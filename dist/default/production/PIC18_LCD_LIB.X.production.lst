

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Mar 25 20:37:51 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    89                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    90                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    91  0000                     
    92                           ; Version 1.40
    93                           ; Generated 01/12/2016 GMT
    94                           ; 
    95                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    96                           ; All rights reserved.
    97                           ; 
    98                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    99                           ; 
   100                           ; Redistribution and use in source and binary forms, with or without modification, are
   101                           ; permitted provided that the following conditions are met:
   102                           ; 
   103                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   104                           ;        conditions and the following disclaimer.
   105                           ; 
   106                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   107                           ;        of conditions and the following disclaimer in the documentation and/or other
   108                           ;        materials provided with the distribution.
   109                           ; 
   110                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   111                           ;        software without specific prior written permission.
   112                           ; 
   113                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   114                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   115                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   116                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   117                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   118                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   119                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   120                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   121                           ; 
   122                           ; 
   123                           ; Code-generator required, PIC18F4620 Definitions
   124                           ; 
   125                           ; SFR Addresses
   126  0000                     
   127                           	psect	idataBANK1
   128  005050                     __pidataBANK1:
   129                           	opt stack 0
   130                           
   131                           ;initializer for _angle
   132  005050  005A               	dw	90
   133                           
   134                           ;initializer for _padAngle_CLOSE
   135  005052  001E               	dw	30
   136                           
   137                           ;initializer for _padAngle_NEUTRAL
   138  005054  0046               	dw	70
   139                           
   140                           ;initializer for _padAngle_OPEN
   141  005056  00B4               	dw	180
   142                           
   143                           ;initializer for _period
   144  005058  797C               	dw	31100
   145                           
   146                           ;initializer for _redirectAngle_9V
   147  00505A  0040               	dw	64
   148                           
   149                           ;initializer for _redirectAngle_AA
   150  00505C  004A               	dw	74
   151                           
   152                           ;initializer for _redirectAngle_C
   153  00505E  006F               	dw	111
   154                           
   155                           ;initializer for _redirectAngle_OTHER
   156  005060  0059               	dw	89
   157                           
   158                           ;initializer for _AA_float
   159  005062  0002               	dw	2
   160  005064  0005               	dw	5
   161                           
   162                           ;initializer for _conveyorServo
   163  005066  0002               	dw	2
   164  005068  0002               	dw	2
   165                           
   166                           ;initializer for _cylinderMotor
   167  00506A  0002               	dw	2
   168  00506C  0000               	dw	0
   169                           
   170                           ;initializer for _padPin1
   171  00506E  0002               	dw	2
   172  005070  0006               	dw	6
   173                           
   174                           ;initializer for _padPin2
   175  005072  0002               	dw	2
   176  005074  0007               	dw	7
   177                           
   178                           ;initializer for _padServo
   179  005076  0002               	dw	2
   180  005078  0001               	dw	1
   181                           
   182                           ;initializer for _redirectingServo
   183  00507A  0003               	dw	3
   184  00507C  0000               	dw	0
   185                           
   186                           	psect	mediumconst
   187  00FDC2                     __pmediumconst:
   188                           	opt stack 0
   189  00FDC2  00                 	db	0
   190  00FDC3                     _dpowers:
   191                           	opt stack 0
   192  00FDC3  0001               	dw	1
   193  00FDC5  0000               	dw	0
   194  00FDC7  000A               	dw	10
   195  00FDC9  0000               	dw	0
   196  00FDCB  0064               	dw	100
   197  00FDCD  0000               	dw	0
   198  00FDCF  03E8               	dw	1000
   199  00FDD1  0000               	dw	0
   200  00FDD3  2710               	dw	10000
   201  00FDD5  0000               	dw	0
   202  00FDD7  86A0               	dw	34464
   203  00FDD9  0001               	dw	1
   204  00FDDB  4240               	dw	16960
   205  00FDDD  000F               	dw	15
   206  00FDDF  9680               	dw	38528
   207  00FDE1  0098               	dw	152
   208  00FDE3  E100               	dw	57600
   209  00FDE5  05F5               	dw	1525
   210  00FDE7  CA00               	dw	51712
   211  00FDE9  3B9A               	dw	15258
   212  00FDEB                     __end_of_dpowers:
   213                           	opt stack 0
   214  00FDEB                     __npowers_:
   215                           	opt stack 0
   216  00FDEB  00                 	db	0
   217  00FDEC  80                 	db	128
   218  00FDED  3F                 	db	63
   219  00FDEE  CD                 	db	205
   220  00FDEF  CC                 	db	204
   221  00FDF0  3D                 	db	61
   222  00FDF1  D7                 	db	215
   223  00FDF2  23                 	db	35
   224  00FDF3  3C                 	db	60
   225  00FDF4  12                 	db	18
   226  00FDF5  83                 	db	131
   227  00FDF6  3A                 	db	58
   228  00FDF7  B7                 	db	183
   229  00FDF8  D1                 	db	209
   230  00FDF9  38                 	db	56
   231  00FDFA  C6                 	db	198
   232  00FDFB  27                 	db	39
   233  00FDFC  37                 	db	55
   234  00FDFD  38                 	db	56
   235  00FDFE  86                 	db	134
   236  00FDFF  35                 	db	53
   237  00FE00  C0                 	db	192
   238  00FE01  D6                 	db	214
   239  00FE02  33                 	db	51
   240  00FE03  CC                 	db	204
   241  00FE04  2B                 	db	43
   242  00FE05  32                 	db	50
   243  00FE06  70                 	db	112
   244  00FE07  89                 	db	137
   245  00FE08  30                 	db	48
   246  00FE09  E7                 	db	231
   247  00FE0A  DB                 	db	219
   248  00FE0B  2E                 	db	46
   249  00FE0C  E5                 	db	229
   250  00FE0D  3C                 	db	60
   251  00FE0E  1E                 	db	30
   252  00FE0F  42                 	db	66
   253  00FE10  A2                 	db	162
   254  00FE11  0D                 	db	13
   255  00FE12                     __end_of__npowers_:
   256                           	opt stack 0
   257  00FE12                     __powers_:
   258                           	opt stack 0
   259  00FE12  00                 	db	0
   260  00FE13  80                 	db	128
   261  00FE14  3F                 	db	63
   262  00FE15  00                 	db	0
   263  00FE16  20                 	db	32
   264  00FE17  41                 	db	65
   265  00FE18  00                 	db	0
   266  00FE19  C8                 	db	200
   267  00FE1A  42                 	db	66
   268  00FE1B  00                 	db	0
   269  00FE1C  7A                 	db	122
   270  00FE1D  44                 	db	68
   271  00FE1E  40                 	db	64
   272  00FE1F  1C                 	db	28
   273  00FE20  46                 	db	70
   274  00FE21  50                 	db	80
   275  00FE22  C3                 	db	195
   276  00FE23  47                 	db	71
   277  00FE24  24                 	db	36
   278  00FE25  74                 	db	116
   279  00FE26  49                 	db	73
   280  00FE27  97                 	db	151
   281  00FE28  18                 	db	24
   282  00FE29  4B                 	db	75
   283  00FE2A  BC                 	db	188
   284  00FE2B  BE                 	db	190
   285  00FE2C  4C                 	db	76
   286  00FE2D  6B                 	db	107
   287  00FE2E  6E                 	db	110
   288  00FE2F  4E                 	db	78
   289  00FE30  03                 	db	3
   290  00FE31  15                 	db	21
   291  00FE32  50                 	db	80
   292  00FE33  79                 	db	121
   293  00FE34  AD                 	db	173
   294  00FE35  60                 	db	96
   295  00FE36  F3                 	db	243
   296  00FE37  49                 	db	73
   297  00FE38  71                 	db	113
   298  00FE39                     __end_of__powers_:
   299                           	opt stack 0
   300  00FE39                     _hexpowers:
   301                           	opt stack 0
   302  00FE39  0001               	dw	1
   303  00FE3B  0000               	dw	0
   304  00FE3D  0010               	dw	16
   305  00FE3F  0000               	dw	0
   306  00FE41  0100               	dw	256
   307  00FE43  0000               	dw	0
   308  00FE45  1000               	dw	4096
   309  00FE47  0000               	dw	0
   310  00FE49  0000               	dw	0
   311  00FE4B  0001               	dw	1
   312  00FE4D  0000               	dw	0
   313  00FE4F  0010               	dw	16
   314  00FE51  0000               	dw	0
   315  00FE53  0100               	dw	256
   316  00FE55  0000               	dw	0
   317  00FE57  1000               	dw	4096
   318  00FE59                     __end_of_hexpowers:
   319                           	opt stack 0
   320  00FE59                     _keys:
   321                           	opt stack 0
   322  00FE59  31                 	db	49
   323  00FE5A  32                 	db	50
   324  00FE5B  33                 	db	51
   325  00FE5C  41                 	db	65
   326  00FE5D  34                 	db	52
   327  00FE5E  35                 	db	53
   328  00FE5F  36                 	db	54
   329  00FE60  42                 	db	66
   330  00FE61  37                 	db	55
   331  00FE62  38                 	db	56
   332  00FE63  39                 	db	57
   333  00FE64  43                 	db	67
   334  00FE65  2A                 	db	42
   335  00FE66  30                 	db	48
   336  00FE67  23                 	db	35
   337  00FE68  44                 	db	68
   338  00FE69  00                 	db	0
   339  00FE6A                     __end_of_keys:
   340                           	opt stack 0
   341  00FE6A                     _happynewyear:
   342                           	opt stack 0
   343  00FE6A  00                 	db	0
   344  00FE6B  59                 	db	89
   345  00FE6C  03                 	db	3
   346  00FE6D  01                 	db	1
   347  00FE6E  13                 	db	19
   348  00FE6F  04                 	db	4
   349  00FE70  17                 	db	23
   350  00FE71                     __end_of_happynewyear:
   351                           	opt stack 0
   352  0000                     _ADCON0	set	4034
   353  0000                     _ADCON1	set	4033
   354  0000                     _ADCON2	set	4032
   355  0000                     _ADRESH	set	4036
   356  0000                     _ADRESL	set	4035
   357  0000                     _EEADR	set	4009
   358  0000                     _EEADRH	set	4010
   359  0000                     _EECON1	set	4006
   360  0000                     _EECON2	set	4007
   361  0000                     _EEDATA	set	4008
   362  0000                     _INTCONbits	set	4082
   363  0000                     _LATA	set	3977
   364  0000                     _LATB	set	3978
   365  0000                     _LATC	set	3979
   366  0000                     _LATD	set	3980
   367  0000                     _LATDbits	set	3980
   368  0000                     _LATE	set	3981
   369  0000                     _PORTA	set	3968
   370  0000                     _PORTB	set	3969
   371  0000                     _PORTBbits	set	3969
   372  0000                     _PORTC	set	3970
   373  0000                     _PORTD	set	3971
   374  0000                     _SSPADD	set	4040
   375  0000                     _SSPBUF	set	4041
   376  0000                     _SSPCON1	set	4038
   377  0000                     _SSPCON2	set	4037
   378  0000                     _SSPSTAT	set	4039
   379  0000                     _T0CON	set	4053
   380  0000                     _T1CON	set	4045
   381  0000                     _T3CON	set	4017
   382  0000                     _TMR0H	set	4055
   383  0000                     _TMR0L	set	4054
   384  0000                     _TMR1H	set	4047
   385  0000                     _TMR1L	set	4046
   386  0000                     _TMR3H	set	4019
   387  0000                     _TMR3L	set	4018
   388  0000                     _TRISA	set	3986
   389  0000                     _TRISB	set	3987
   390  0000                     _TRISC	set	3988
   391  0000                     _TRISD	set	3989
   392  0000                     _TRISE	set	3990
   393  0000                     _ACKDT	set	32301
   394  0000                     _ACKEN	set	32300
   395  0000                     _EEIF	set	32012
   396  0000                     _INT0IE	set	32660
   397  0000                     _INT0IF	set	32657
   398  0000                     _INT1IE	set	32643
   399  0000                     _INT1IF	set	32640
   400  0000                     _PEIE	set	32662
   401  0000                     _PEN	set	32298
   402  0000                     _RCEN	set	32299
   403  0000                     _RSEN	set	32297
   404  0000                     _SEN	set	32296
   405  0000                     _TMR0IE	set	32661
   406  0000                     _TMR0IF	set	32658
   407  0000                     _TMR1IE	set	31976
   408  0000                     _TMR1IF	set	31984
   409  0000                     _TMR3IE	set	32001
   410  0000                     _TRISC3	set	31907
   411  0000                     _TRISC4	set	31908
   412  00FE71                     STR_9:
   413  00FE71  63                 	db	99	;'c'
   414  00FE72  6F                 	db	111	;'o'
   415  00FE73  6E                 	db	110	;'n'
   416  00FE74  76                 	db	118	;'v'
   417  00FE75  65                 	db	101	;'e'
   418  00FE76  79                 	db	121	;'y'
   419  00FE77  6F                 	db	111	;'o'
   420  00FE78  72                 	db	114	;'r'
   421  00FE79  20                 	db	32
   422  00FE7A  26                 	db	38
   423  00FE7B  20                 	db	32
   424  00FE7C  0A                 	db	10
   425  00FE7D  63                 	db	99	;'c'
   426  00FE7E  79                 	db	121	;'y'
   427  00FE7F  6C                 	db	108	;'l'
   428  00FE80  69                 	db	105	;'i'
   429  00FE81  6E                 	db	110	;'n'
   430  00FE82  64                 	db	100	;'d'
   431  00FE83  65                 	db	101	;'e'
   432  00FE84  72                 	db	114	;'r'
   433  00FE85  20                 	db	32
   434  00FE86  6F                 	db	111	;'o'
   435  00FE87  6E                 	db	110	;'n'
   436  00FE88  3F                 	db	63	;'?'
   437  00FE89  00                 	db	0
   438  00FE8A                     STR_6:
   439  00FE8A  73                 	db	115	;'s'
   440  00FE8B  65                 	db	101	;'e'
   441  00FE8C  74                 	db	116	;'t'
   442  00FE8D  20                 	db	32
   443  00FE8E  72                 	db	114	;'r'
   444  00FE8F  65                 	db	101	;'e'
   445  00FE90  64                 	db	100	;'d'
   446  00FE91  69                 	db	105	;'i'
   447  00FE92  72                 	db	114	;'r'
   448  00FE93  65                 	db	101	;'e'
   449  00FE94  63                 	db	99	;'c'
   450  00FE95  74                 	db	116	;'t'
   451  00FE96  20                 	db	32
   452  00FE97  61                 	db	97	;'a'
   453  00FE98  6E                 	db	110	;'n'
   454  00FE99  67                 	db	103	;'g'
   455  00FE9A  6C                 	db	108	;'l'
   456  00FE9B  65                 	db	101	;'e'
   457  00FE9C  3F                 	db	63	;'?'
   458  00FE9D  00                 	db	0
   459  00FE9E                     STR_3:
   460  00FE9E  69                 	db	105	;'i'
   461  00FE9F  6E                 	db	110	;'n'
   462  00FEA0  74                 	db	116	;'t'
   463  00FEA1  65                 	db	101	;'e'
   464  00FEA2  72                 	db	114	;'r'
   465  00FEA3  72                 	db	114	;'r'
   466  00FEA4  75                 	db	117	;'u'
   467  00FEA5  70                 	db	112	;'p'
   468  00FEA6  74                 	db	116	;'t'
   469  00FEA7  21                 	db	33
   470  00FEA8  21                 	db	33
   471  00FEA9  21                 	db	33
   472  00FEAA  0A                 	db	10
   473  00FEAB  63                 	db	99	;'c'
   474  00FEAC  6C                 	db	108	;'l'
   475  00FEAD  6F                 	db	111	;'o'
   476  00FEAE  73                 	db	115	;'s'
   477  00FEAF  65                 	db	101	;'e'
   478  00FEB0  3F                 	db	63	;'?'
   479  00FEB1  00                 	db	0
   480  00FEB2  25                 	db	37
   481  00FEB3  63                 	db	99	;'c'
   482  00FEB4  29                 	db	41
   483  00FEB5  20                 	db	32
   484  00FEB6  74                 	db	116	;'t'
   485  00FEB7  69                 	db	105	;'i'
   486  00FEB8  6D                 	db	109	;'m'
   487  00FEB9  65                 	db	101	;'e'
   488  00FEBA  20                 	db	32
   489  00FEBB  20                 	db	32
   490  00FEBC  3C                 	db	60	;'<'
   491  00FEBD  41                 	db	65	;'A'
   492  00FEBE  20                 	db	32
   493  00FEBF  20                 	db	32
   494  00FEC0  20                 	db	32
   495  00FEC1  20                 	db	32
   496  00FEC2  20                 	db	32
   497  00FEC3  0A                 	db	10
   498  00FEC4  00                 	db	0
   499  00FEC5  73                 	db	115	;'s'
   500  00FEC6  74                 	db	116	;'t'
   501  00FEC7  61                 	db	97	;'a'
   502  00FEC8  72                 	db	114	;'r'
   503  00FEC9  74                 	db	116	;'t'
   504  00FECA  20                 	db	32
   505  00FECB  20                 	db	32
   506  00FECC  20                 	db	32
   507  00FECD  3C                 	db	60	;'<'
   508  00FECE  42                 	db	66	;'B'
   509  00FECF  20                 	db	32
   510  00FED0  20                 	db	32
   511  00FED1  20                 	db	32
   512  00FED2  20                 	db	32
   513  00FED3  20                 	db	32
   514  00FED4  20                 	db	32
   515  00FED5  0A                 	db	10
   516  00FED6  00                 	db	0
   517  00FED7  20                 	db	32
   518  00FED8  20                 	db	32
   519  00FED9  68                 	db	104	;'h'
   520  00FEDA  68                 	db	104	;'h'
   521  00FEDB  3A                 	db	58	;':'
   522  00FEDC  6D                 	db	109	;'m'
   523  00FEDD  6D                 	db	109	;'m'
   524  00FEDE  3A                 	db	58	;':'
   525  00FEDF  73                 	db	115	;'s'
   526  00FEE0  73                 	db	115	;'s'
   527  00FEE1  20                 	db	32
   528  00FEE2  20                 	db	32
   529  00FEE3  20                 	db	32
   530  00FEE4  20                 	db	32
   531  00FEE5  20                 	db	32
   532  00FEE6  20                 	db	32
   533  00FEE7  0A                 	db	10
   534  00FEE8  00                 	db	0
   535  00FEE9  73                 	db	115	;'s'
   536  00FEEA  65                 	db	101	;'e'
   537  00FEEB  6C                 	db	108	;'l'
   538  00FEEC  65                 	db	101	;'e'
   539  00FEED  63                 	db	99	;'c'
   540  00FEEE  74                 	db	116	;'t'
   541  00FEEF  20                 	db	32
   542  00FEF0  72                 	db	114	;'r'
   543  00FEF1  75                 	db	117	;'u'
   544  00FEF2  6E                 	db	110	;'n'
   545  00FEF3  3A                 	db	58	;':'
   546  00FEF4  20                 	db	32
   547  00FEF5  20                 	db	32
   548  00FEF6  20                 	db	32
   549  00FEF7  20                 	db	32
   550  00FEF8  20                 	db	32
   551  00FEF9  0A                 	db	10
   552  00FEFA  00                 	db	0
   553  00FEFB  74                 	db	116	;'t'
   554  00FEFC  69                 	db	105	;'i'
   555  00FEFD  6D                 	db	109	;'m'
   556  00FEFE  65                 	db	101	;'e'
   557  00FEFF  3A                 	db	58	;':'
   558  00FF00  20                 	db	32
   559  00FF01  6E                 	db	110	;'n'
   560  00FF02  6E                 	db	110	;'n'
   561  00FF03  6E                 	db	110	;'n'
   562  00FF04  20                 	db	32
   563  00FF05  73                 	db	115	;'s'
   564  00FF06  65                 	db	101	;'e'
   565  00FF07  63                 	db	99	;'c'
   566  00FF08  20                 	db	32
   567  00FF09  20                 	db	32
   568  00FF0A  20                 	db	32
   569  00FF0B  0A                 	db	10
   570  00FF0C  00                 	db	0
   571  00FF0D  5B                 	db	91	;'['
   572  00FF0E  41                 	db	65	;'A'
   573  00FF0F  41                 	db	65	;'A'
   574  00FF10  2C                 	db	44
   575  00FF11  39                 	db	57	;'9'
   576  00FF12  56                 	db	86	;'V'
   577  00FF13  2C                 	db	44
   578  00FF14  43                 	db	67	;'C'
   579  00FF15  2C                 	db	44
   580  00FF16  6F                 	db	111	;'o'
   581  00FF17  74                 	db	116	;'t'
   582  00FF18  68                 	db	104	;'h'
   583  00FF19  65                 	db	101	;'e'
   584  00FF1A  72                 	db	114	;'r'
   585  00FF1B  5D                 	db	93	;']'
   586  00FF1C  20                 	db	32
   587  00FF1D  0A                 	db	10
   588  00FF1E  00                 	db	0
   589  00FF1F                     STR_24:
   590  00FF1F  30                 	db	48	;'0'
   591  00FF20  31                 	db	49	;'1'
   592  00FF21  32                 	db	50	;'2'
   593  00FF22  33                 	db	51	;'3'
   594  00FF23  34                 	db	52	;'4'
   595  00FF24  35                 	db	53	;'5'
   596  00FF25  36                 	db	54	;'6'
   597  00FF26  37                 	db	55	;'7'
   598  00FF27  38                 	db	56	;'8'
   599  00FF28  39                 	db	57	;'9'
   600  00FF29  61                 	db	97	;'a'
   601  00FF2A  62                 	db	98	;'b'
   602  00FF2B  63                 	db	99	;'c'
   603  00FF2C  64                 	db	100	;'d'
   604  00FF2D  65                 	db	101	;'e'
   605  00FF2E  66                 	db	102	;'f'
   606  00FF2F  00                 	db	0
   607  00FF30  20                 	db	32
   608  00FF31  20                 	db	32
   609  00FF32  20                 	db	32
   610  00FF33  20                 	db	32
   611  00FF34  20                 	db	32
   612  00FF35  20                 	db	32
   613  00FF36  20                 	db	32
   614  00FF37  20                 	db	32
   615  00FF38  20                 	db	32
   616  00FF39  20                 	db	32
   617  00FF3A  20                 	db	32
   618  00FF3B  20                 	db	32
   619  00FF3C  20                 	db	32
   620  00FF3D  20                 	db	32
   621  00FF3E  2A                 	db	42
   622  00FF3F  3E                 	db	62	;'>'
   623  00FF40  00                 	db	0
   624  00FF41  5B                 	db	91	;'['
   625  00FF42  31                 	db	49	;'1'
   626  00FF43  2C                 	db	44
   627  00FF44  32                 	db	50	;'2'
   628  00FF45  2C                 	db	44
   629  00FF46  33                 	db	51	;'3'
   630  00FF47  2C                 	db	44
   631  00FF48  34                 	db	52	;'4'
   632  00FF49  5D                 	db	93	;']'
   633  00FF4A  20                 	db	32
   634  00FF4B  20                 	db	32
   635  00FF4C  20                 	db	32
   636  00FF4D  20                 	db	32
   637  00FF4E  20                 	db	32
   638  00FF4F  2A                 	db	42
   639  00FF50  3E                 	db	62	;'>'
   640  00FF51  00                 	db	0
   641  00FF52  68                 	db	104	;'h'
   642  00FF53  69                 	db	105	;'i'
   643  00FF54  73                 	db	115	;'s'
   644  00FF55  74                 	db	116	;'t'
   645  00FF56  6F                 	db	111	;'o'
   646  00FF57  72                 	db	114	;'r'
   647  00FF58  79                 	db	121	;'y'
   648  00FF59  20                 	db	32
   649  00FF5A  3C                 	db	60	;'<'
   650  00FF5B  43                 	db	67	;'C'
   651  00FF5C  20                 	db	32
   652  00FF5D  20                 	db	32
   653  00FF5E  20                 	db	32
   654  00FF5F  20                 	db	32
   655  00FF60  2A                 	db	42
   656  00FF61  3E                 	db	62	;'>'
   657  00FF62  00                 	db	0
   658  00FF63  20                 	db	32
   659  00FF64  20                 	db	32
   660  00FF65  20                 	db	32
   661  00FF66  73                 	db	115	;'s'
   662  00FF67  74                 	db	116	;'t'
   663  00FF68  61                 	db	97	;'a'
   664  00FF69  74                 	db	116	;'t'
   665  00FF6A  73                 	db	115	;'s'
   666  00FF6B  20                 	db	32
   667  00FF6C  3C                 	db	60	;'<'
   668  00FF6D  42                 	db	66	;'B'
   669  00FF6E  20                 	db	32
   670  00FF6F  20                 	db	32
   671  00FF70  20                 	db	32
   672  00FF71  2A                 	db	42
   673  00FF72  3E                 	db	62	;'>'
   674  00FF73  00                 	db	0
   675  00FF74  5B                 	db	91	;'['
   676  00FF75  6E                 	db	110	;'n'
   677  00FF76  6E                 	db	110	;'n'
   678  00FF77  2C                 	db	44
   679  00FF78  6E                 	db	110	;'n'
   680  00FF79  2C                 	db	44
   681  00FF7A  6E                 	db	110	;'n'
   682  00FF7B  2C                 	db	44
   683  00FF7C  6E                 	db	110	;'n'
   684  00FF7D  6E                 	db	110	;'n'
   685  00FF7E  5D                 	db	93	;']'
   686  00FF7F  20                 	db	32
   687  00FF80  20                 	db	32
   688  00FF81  20                 	db	32
   689  00FF82  2A                 	db	42
   690  00FF83  3E                 	db	62	;'>'
   691  00FF84  00                 	db	0
   692  00FF85  20                 	db	32
   693  00FF86  20                 	db	32
   694  00FF87  6D                 	db	109	;'m'
   695  00FF88  6D                 	db	109	;'m'
   696  00FF89  3A                 	db	58	;':'
   697  00FF8A  64                 	db	100	;'d'
   698  00FF8B  64                 	db	100	;'d'
   699  00FF8C  3A                 	db	58	;':'
   700  00FF8D  79                 	db	121	;'y'
   701  00FF8E  79                 	db	121	;'y'
   702  00FF8F  20                 	db	32
   703  00FF90  20                 	db	32
   704  00FF91  20                 	db	32
   705  00FF92  20                 	db	32
   706  00FF93  41                 	db	65	;'A'
   707  00FF94  3E                 	db	62	;'>'
   708  00FF95  00                 	db	0
   709  00FF96                     STR_7:
   710  00FF96  72                 	db	114	;'r'
   711  00FF97  65                 	db	101	;'e'
   712  00FF98  6C                 	db	108	;'l'
   713  00FF99  65                 	db	101	;'e'
   714  00FF9A  61                 	db	97	;'a'
   715  00FF9B  73                 	db	115	;'s'
   716  00FF9C  65                 	db	101	;'e'
   717  00FF9D  20                 	db	32
   718  00FF9E  62                 	db	98	;'b'
   719  00FF9F  61                 	db	97	;'a'
   720  00FFA0  74                 	db	116	;'t'
   721  00FFA1  74                 	db	116	;'t'
   722  00FFA2  65                 	db	101	;'e'
   723  00FFA3  72                 	db	114	;'r'
   724  00FFA4  79                 	db	121	;'y'
   725  00FFA5  3F                 	db	63	;'?'
   726  00FFA6  00                 	db	0
   727  00FFA7                     STR_2:
   728  00FFA7  74                 	db	116	;'t'
   729  00FFA8  69                 	db	105	;'i'
   730  00FFA9  6D                 	db	109	;'m'
   731  00FFAA  65                 	db	101	;'e'
   732  00FFAB  20                 	db	32
   733  00FFAC  25                 	db	37
   734  00FFAD  30                 	db	48	;'0'
   735  00FFAE  32                 	db	50	;'2'
   736  00FFAF  6C                 	db	108	;'l'
   737  00FFB0  64                 	db	100	;'d'
   738  00FFB1  3A                 	db	58	;':'
   739  00FFB2  25                 	db	37
   740  00FFB3  30                 	db	48	;'0'
   741  00FFB4  32                 	db	50	;'2'
   742  00FFB5  6C                 	db	108	;'l'
   743  00FFB6  64                 	db	100	;'d'
   744  00FFB7  00                 	db	0
   745  00FFB8                     STR_8:
   746  00FFB8  72                 	db	114	;'r'
   747  00FFB9  65                 	db	101	;'e'
   748  00FFBA  73                 	db	115	;'s'
   749  00FFBB  65                 	db	101	;'e'
   750  00FFBC  74                 	db	116	;'t'
   751  00FFBD  20                 	db	32
   752  00FFBE  74                 	db	116	;'t'
   753  00FFBF  68                 	db	104	;'h'
   754  00FFC0  65                 	db	101	;'e'
   755  00FFC1  20                 	db	32
   756  00FFC2  70                 	db	112	;'p'
   757  00FFC3  61                 	db	97	;'a'
   758  00FFC4  64                 	db	100	;'d'
   759  00FFC5  3F                 	db	63	;'?'
   760  00FFC6  00                 	db	0
   761  00FFC7                     STR_5:
   762  00FFC7  73                 	db	115	;'s'
   763  00FFC8  69                 	db	105	;'i'
   764  00FFC9  67                 	db	103	;'g'
   765  00FFCA  3A                 	db	58	;':'
   766  00FFCB  20                 	db	32
   767  00FFCC  25                 	db	37
   768  00FFCD  64                 	db	100	;'d'
   769  00FFCE  20                 	db	32
   770  00FFCF  0A                 	db	10
   771  00FFD0  56                 	db	86	;'V'
   772  00FFD1  3A                 	db	58	;':'
   773  00FFD2  20                 	db	32
   774  00FFD3  25                 	db	37
   775  00FFD4  66                 	db	102	;'f'
   776  00FFD5  00                 	db	0
   777  00FFD6                     STR_4:
   778  00FFD6  72                 	db	114	;'r'
   779  00FFD7  65                 	db	101	;'e'
   780  00FFD8  61                 	db	97	;'a'
   781  00FFD9  64                 	db	100	;'d'
   782  00FFDA  20                 	db	32
   783  00FFDB  76                 	db	118	;'v'
   784  00FFDC  6F                 	db	111	;'o'
   785  00FFDD  6C                 	db	108	;'l'
   786  00FFDE  74                 	db	116	;'t'
   787  00FFDF  61                 	db	97	;'a'
   788  00FFE0  67                 	db	103	;'g'
   789  00FFE1  65                 	db	101	;'e'
   790  00FFE2  3F                 	db	63	;'?'
   791  00FFE3  00                 	db	0
   792  00FFE4                     STR_10:
   793  00FFE4  70                 	db	112	;'p'
   794  00FFE5  65                 	db	101	;'e'
   795  00FFE6  72                 	db	114	;'r'
   796  00FFE7  69                 	db	105	;'i'
   797  00FFE8  6F                 	db	111	;'o'
   798  00FFE9  64                 	db	100	;'d'
   799  00FFEA  20                 	db	32
   800  00FFEB  25                 	db	37
   801  00FFEC  6C                 	db	108	;'l'
   802  00FFED  64                 	db	100	;'d'
   803  00FFEE  00                 	db	0
   804  00FFEF  74                 	db	116	;'t'
   805  00FFF0  31                 	db	49	;'1'
   806  00FFF1  3A                 	db	58	;':'
   807  00FFF2  20                 	db	32
   808  00FFF3  25                 	db	37
   809  00FFF4  78                 	db	120	;'x'
   810  00FFF5  20                 	db	32
   811  00FFF6  00                 	db	0
   812  00FFF7                     STR_1:
   813  00FFF7  72                 	db	114	;'r'
   814  00FFF8  75                 	db	117	;'u'
   815  00FFF9  6E                 	db	110	;'n'
   816  00FFFA  6E                 	db	110	;'n'
   817  00FFFB  69                 	db	105	;'i'
   818  00FFFC  6E                 	db	110	;'n'
   819  00FFFD  67                 	db	103	;'g'
   820  00FFFE  00                 	db	0
   821                           
   822                           ; #config settings
   823  00FFFF  00                 	db	0	; dummy byte at the end
   824  0000                     
   825                           	psect	cinit
   826  004E9E                     __pcinit:
   827                           	opt stack 0
   828  004E9E                     start_initialization:
   829                           	opt stack 0
   830  004E9E                     __initialization:
   831                           	opt stack 0
   832                           
   833                           ; Initialize objects allocated to BANK1 (46 bytes)
   834                           ; load TBLPTR registers with __pidataBANK1
   835  004E9E  0E50               	movlw	low __pidataBANK1
   836  004EA0  6EF6               	movwf	tblptrl,c
   837  004EA2  0E50               	movlw	high __pidataBANK1
   838  004EA4  6EF7               	movwf	tblptrh,c
   839  004EA6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   840  004EA8  6EF8               	movwf	tblptru,c
   841  004EAA  EE01  F032         	lfsr	0,__pdataBANK1
   842  004EAE  EE10 F02E          	lfsr	1,46
   843  004EB2                     copy_data0:
   844  004EB2  0009               	tblrd		*+
   845  004EB4  CFF5 FFEE          	movff	tablat,postinc0
   846  004EB8  50E5               	movf	postdec1,w,c
   847  004EBA  50E1               	movf	fsr1l,w,c
   848  004EBC  E1FA               	bnz	copy_data0
   849                           
   850                           ; Clear objects allocated to BANK1 (39 bytes)
   851  004EBE  EE01  F060         	lfsr	0,__pbssBANK1
   852  004EC2  0E27               	movlw	39
   853  004EC4                     clear_0:
   854  004EC4  6AEE               	clrf	postinc0,c
   855  004EC6  06E8               	decf	wreg,f,c
   856  004EC8  E1FD               	bnz	clear_0
   857                           
   858                           ; Clear objects allocated to BANK0 (1 bytes)
   859  004ECA  0100               	movlb	0
   860  004ECC  6BFF               	clrf	__pbssBANK0& (0+255),b
   861                           
   862                           ; Clear objects allocated to COMRAM (4 bytes)
   863  004ECE  6A7E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   864  004ED0  6A7D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   865  004ED2  6A7C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   866  004ED4  6A7B               	clrf	__pbssCOMRAM& (0+255),c
   867  004ED6                     end_of_initialization:
   868                           	opt stack 0
   869  004ED6                     __end_of__initialization:
   870                           	opt stack 0
   871  004ED6  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   872  004ED8  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   873  004EDA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   874  004EDC  6EF8               	movwf	tblptru,c
   875  004EDE  0100               	movlb	0
   876  004EE0  EF49  F016         	goto	_main	;jump to C main() function
   877                           tblptru	equ	0xFF8
   878                           tblptrh	equ	0xFF7
   879                           tblptrl	equ	0xFF6
   880                           tablat	equ	0xFF5
   881                           postinc0	equ	0xFEE
   882                           wreg	equ	0xFE8
   883                           postdec1	equ	0xFE5
   884                           fsr1l	equ	0xFE1
   885                           
   886                           	psect	bssCOMRAM
   887  00007B                     __pbssCOMRAM:
   888                           	opt stack 0
   889  00007B                     _curr:
   890                           	opt stack 0
   891  00007B                     	ds	2
   892  00007D                     _n:
   893                           	opt stack 0
   894  00007D                     	ds	2
   895                           tblptru	equ	0xFF8
   896                           tblptrh	equ	0xFF7
   897                           tblptrl	equ	0xFF6
   898                           tablat	equ	0xFF5
   899                           postinc0	equ	0xFEE
   900                           wreg	equ	0xFE8
   901                           postdec1	equ	0xFE5
   902                           fsr1l	equ	0xFE1
   903                           
   904                           	psect	bssBANK0
   905  0000FF                     __pbssBANK0:
   906                           	opt stack 0
   907  0000FF                     _lastKey:
   908                           	opt stack 0
   909  0000FF                     	ds	1
   910                           tblptru	equ	0xFF8
   911                           tblptrh	equ	0xFF7
   912                           tblptrl	equ	0xFF6
   913                           tablat	equ	0xFF5
   914                           postinc0	equ	0xFEE
   915                           wreg	equ	0xFE8
   916                           postdec1	equ	0xFE5
   917                           fsr1l	equ	0xFE1
   918                           
   919                           	psect	bssBANK1
   920  000160                     __pbssBANK1:
   921                           	opt stack 0
   922  000160                     _pulse:
   923                           	opt stack 0
   924  000160                     	ds	8
   925  000168                     _servos:
   926                           	opt stack 0
   927  000168                     	ds	8
   928  000170                     _padPin3:
   929                           	opt stack 0
   930  000170                     	ds	4
   931  000174                     _time:
   932                           	opt stack 0
   933  000174                     	ds	4
   934  000178                     _V_LIM_9V:
   935                           	opt stack 0
   936  000178                     	ds	3
   937  00017B                     _V_LIM_AA:
   938                           	opt stack 0
   939  00017B                     	ds	3
   940  00017E                     _V_LIM_C:
   941                           	opt stack 0
   942  00017E                     	ds	3
   943  000181                     _batteryDetected:
   944                           	opt stack 0
   945  000181                     	ds	2
   946  000183                     _count:
   947                           	opt stack 0
   948  000183                     	ds	2
   949  000185                     _prevTime:
   950                           	opt stack 0
   951  000185                     	ds	2
   952                           tblptru	equ	0xFF8
   953                           tblptrh	equ	0xFF7
   954                           tblptrl	equ	0xFF6
   955                           tablat	equ	0xFF5
   956                           postinc0	equ	0xFEE
   957                           wreg	equ	0xFE8
   958                           postdec1	equ	0xFE5
   959                           fsr1l	equ	0xFE1
   960                           
   961                           	psect	dataBANK1
   962  000132                     __pdataBANK1:
   963                           	opt stack 0
   964  000132                     _angle:
   965                           	opt stack 0
   966  000132                     	ds	2
   967  000134                     _padAngle_CLOSE:
   968                           	opt stack 0
   969  000134                     	ds	2
   970  000136                     _padAngle_NEUTRAL:
   971                           	opt stack 0
   972  000136                     	ds	2
   973  000138                     _padAngle_OPEN:
   974                           	opt stack 0
   975  000138                     	ds	2
   976  00013A                     _period:
   977                           	opt stack 0
   978  00013A                     	ds	2
   979  00013C                     _redirectAngle_9V:
   980                           	opt stack 0
   981  00013C                     	ds	2
   982  00013E                     _redirectAngle_AA:
   983                           	opt stack 0
   984  00013E                     	ds	2
   985  000140                     _redirectAngle_C:
   986                           	opt stack 0
   987  000140                     	ds	2
   988  000142                     _redirectAngle_OTHER:
   989                           	opt stack 0
   990  000142                     	ds	2
   991  000144                     _AA_float:
   992                           	opt stack 0
   993  000144                     	ds	4
   994  000148                     _conveyorServo:
   995                           	opt stack 0
   996  000148                     	ds	4
   997  00014C                     _cylinderMotor:
   998                           	opt stack 0
   999  00014C                     	ds	4
  1000  000150                     _padPin1:
  1001                           	opt stack 0
  1002  000150                     	ds	4
  1003  000154                     _padPin2:
  1004                           	opt stack 0
  1005  000154                     	ds	4
  1006  000158                     _padServo:
  1007                           	opt stack 0
  1008  000158                     	ds	4
  1009  00015C                     _redirectingServo:
  1010                           	opt stack 0
  1011  00015C                     	ds	4
  1012                           tblptru	equ	0xFF8
  1013                           tblptrh	equ	0xFF7
  1014                           tblptrl	equ	0xFF6
  1015                           tablat	equ	0xFF5
  1016                           postinc0	equ	0xFEE
  1017                           wreg	equ	0xFE8
  1018                           postdec1	equ	0xFE5
  1019                           fsr1l	equ	0xFE1
  1020                           
  1021                           	psect	cstackBANK1
  1022  000100                     __pcstackBANK1:
  1023                           	opt stack 0
  1024  000100                     _printf$1340:
  1025                           	opt stack 0
  1026                           
  1027                           ; 3 bytes @ 0x0
  1028  000100                     	ds	3
  1029  000103                     printf@cp:
  1030                           	opt stack 0
  1031                           
  1032                           ; 2 bytes @ 0x3
  1033  000103                     	ds	2
  1034  000105                     printf@idx:
  1035                           	opt stack 0
  1036                           
  1037                           ; 1 bytes @ 0x5
  1038  000105                     	ds	1
  1039  000106                     printf@len:
  1040                           	opt stack 0
  1041                           
  1042                           ; 2 bytes @ 0x6
  1043  000106                     	ds	2
  1044  000108                     printf@ap:
  1045                           	opt stack 0
  1046                           
  1047                           ; 2 bytes @ 0x8
  1048  000108                     	ds	2
  1049  00010A                     printf@prec:
  1050                           	opt stack 0
  1051                           
  1052                           ; 2 bytes @ 0xA
  1053  00010A                     	ds	2
  1054  00010C                     printf@tmpval:
  1055                           	opt stack 0
  1056                           
  1057                           ; 4 bytes @ 0xC
  1058  00010C                     	ds	4
  1059  000110                     printf@exp:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x10
  1063  000110                     	ds	2
  1064  000112                     printf@val:
  1065                           	opt stack 0
  1066                           
  1067                           ; 4 bytes @ 0x12
  1068  000112                     	ds	4
  1069  000116                     printf@width:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x16
  1073  000116                     	ds	2
  1074  000118                     printf@fval:
  1075                           	opt stack 0
  1076                           
  1077                           ; 3 bytes @ 0x18
  1078  000118                     	ds	3
  1079  00011B                     printf@flag:
  1080                           	opt stack 0
  1081                           
  1082                           ; 2 bytes @ 0x1B
  1083  00011B                     	ds	2
  1084  00011D                     printf@c:
  1085                           	opt stack 0
  1086                           
  1087                           ; 1 bytes @ 0x1D
  1088  00011D                     	ds	1
  1089  00011E                     sortBattery@V_float:
  1090                           	opt stack 0
  1091                           
  1092                           ; 3 bytes @ 0x1E
  1093  00011E                     	ds	3
  1094  000121                     sortBattery@Vcc:
  1095                           	opt stack 0
  1096                           
  1097                           ; 3 bytes @ 0x21
  1098  000121                     	ds	3
  1099  000124                     sortBattery@resolution:
  1100                           	opt stack 0
  1101                           
  1102                           ; 3 bytes @ 0x24
  1103  000124                     	ds	3
  1104  000127                     sortBattery@targetAngle:
  1105                           	opt stack 0
  1106                           
  1107                           ; 2 bytes @ 0x27
  1108  000127                     	ds	2
  1109  000129                     sortBattery@signal:
  1110                           	opt stack 0
  1111                           
  1112                           ; 2 bytes @ 0x29
  1113  000129                     	ds	2
  1114  00012B                     sortBattery@V:
  1115                           	opt stack 0
  1116                           
  1117                           ; 3 bytes @ 0x2B
  1118  00012B                     	ds	3
  1119  00012E                     main@prevTime:
  1120                           	opt stack 0
  1121                           
  1122                           ; 4 bytes @ 0x2E
  1123  00012E                     	ds	4
  1124                           tblptru	equ	0xFF8
  1125                           tblptrh	equ	0xFF7
  1126                           tblptrl	equ	0xFF6
  1127                           tablat	equ	0xFF5
  1128                           postinc0	equ	0xFEE
  1129                           wreg	equ	0xFE8
  1130                           postdec1	equ	0xFE5
  1131                           fsr1l	equ	0xFE1
  1132                           
  1133                           	psect	cstackBANK0
  1134  000080                     __pcstackBANK0:
  1135                           	opt stack 0
  1136  000080                     ??_isdigit:
  1137  000080                     ?_digitalRead:
  1138                           	opt stack 0
  1139  000080                     ?___awmod:
  1140                           	opt stack 0
  1141  000080                     ?___ftpack:
  1142                           	opt stack 0
  1143  000080                     ?___ftneg:
  1144                           	opt stack 0
  1145  000080                     ?_analogRead:
  1146                           	opt stack 0
  1147  000080                     ?__tdiv_to_l_:
  1148                           	opt stack 0
  1149  000080                     ?__div_to_l_:
  1150                           	opt stack 0
  1151  000080                     ?___aldiv:
  1152                           	opt stack 0
  1153  000080                     ?___lldiv:
  1154                           	opt stack 0
  1155  000080                     lcdNibble@temp:
  1156                           	opt stack 0
  1157  000080                     readKeypad@key:
  1158                           	opt stack 0
  1159  000080                     digitalRead@pin:
  1160                           	opt stack 0
  1161  000080                     digitalWrite@pin:
  1162                           	opt stack 0
  1163  000080                     analogRead@channel:
  1164                           	opt stack 0
  1165  000080                     initTimer@timer:
  1166                           	opt stack 0
  1167  000080                     startTimer@timer:
  1168                           	opt stack 0
  1169  000080                     ___awmod@dividend:
  1170                           	opt stack 0
  1171  000080                     __div_to_l_@f1:
  1172                           	opt stack 0
  1173  000080                     ___ftpack@arg:
  1174                           	opt stack 0
  1175  000080                     __tdiv_to_l_@f1:
  1176                           	opt stack 0
  1177  000080                     ___ftge@ff1:
  1178                           	opt stack 0
  1179  000080                     ___ftneg@f1:
  1180                           	opt stack 0
  1181  000080                     ___aldiv@dividend:
  1182                           	opt stack 0
  1183  000080                     ___lldiv@dividend:
  1184                           	opt stack 0
  1185                           
  1186                           ; 4 bytes @ 0x0
  1187  000080                     	ds	1
  1188  000081                     lcdNibble@data:
  1189                           	opt stack 0
  1190  000081                     _isdigit$966:
  1191                           	opt stack 0
  1192                           
  1193                           ; 1 bytes @ 0x1
  1194  000081                     	ds	1
  1195  000082                     ??_initTimer:
  1196  000082                     ??_digitalRead:
  1197  000082                     ??_lcdInst:
  1198  000082                     isdigit@c:
  1199                           	opt stack 0
  1200  000082                     digitalWrite@val:
  1201                           	opt stack 0
  1202  000082                     ___awmod@divisor:
  1203                           	opt stack 0
  1204  000082                     startTimer@val:
  1205                           	opt stack 0
  1206                           
  1207                           ; 4 bytes @ 0x2
  1208  000082                     	ds	1
  1209  000083                     lcdInst@data:
  1210                           	opt stack 0
  1211  000083                     ___ftpack@exp:
  1212                           	opt stack 0
  1213  000083                     __div_to_l_@f2:
  1214                           	opt stack 0
  1215  000083                     __tdiv_to_l_@f2:
  1216                           	opt stack 0
  1217  000083                     ___ftge@ff2:
  1218                           	opt stack 0
  1219                           
  1220                           ; 3 bytes @ 0x3
  1221  000083                     	ds	1
  1222  000084                     ??_initLCD:
  1223  000084                     ??_digitalWrite:
  1224  000084                     ??_analogRead:
  1225  000084                     putch@data:
  1226                           	opt stack 0
  1227  000084                     ___awmod@counter:
  1228                           	opt stack 0
  1229  000084                     ___ftpack@sign:
  1230                           	opt stack 0
  1231  000084                     ___aldiv@divisor:
  1232                           	opt stack 0
  1233  000084                     ___lldiv@divisor:
  1234                           	opt stack 0
  1235                           
  1236                           ; 4 bytes @ 0x4
  1237  000084                     	ds	1
  1238  000085                     ??___ftpack:
  1239  000085                     ___awmod@sign:
  1240                           	opt stack 0
  1241                           
  1242                           ; 1 bytes @ 0x5
  1243  000085                     	ds	1
  1244  000086                     ??_startTimer:
  1245  000086                     ??__tdiv_to_l_:
  1246  000086                     ??___ftge:
  1247  000086                     ?___awdiv:
  1248                           	opt stack 0
  1249  000086                     ___awdiv@dividend:
  1250                           	opt stack 0
  1251  000086                     __div_to_l_@quot:
  1252                           	opt stack 0
  1253                           
  1254                           ; 4 bytes @ 0x6
  1255  000086                     	ds	1
  1256  000087                     digitalWrite@p:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0x7
  1260  000087                     	ds	1
  1261  000088                     ?___altoft:
  1262                           	opt stack 0
  1263  000088                     ?___awtoft:
  1264                           	opt stack 0
  1265  000088                     ?___lltoft:
  1266                           	opt stack 0
  1267  000088                     ___aldiv@counter:
  1268                           	opt stack 0
  1269  000088                     ___awdiv@divisor:
  1270                           	opt stack 0
  1271  000088                     ___awtoft@c:
  1272                           	opt stack 0
  1273  000088                     ___altoft@c:
  1274                           	opt stack 0
  1275  000088                     ___lldiv@quotient:
  1276                           	opt stack 0
  1277  000088                     ___lltoft@c:
  1278                           	opt stack 0
  1279                           
  1280                           ; 4 bytes @ 0x8
  1281  000088                     	ds	1
  1282  000089                     ___aldiv@sign:
  1283                           	opt stack 0
  1284  000089                     __tdiv_to_l_@quot:
  1285                           	opt stack 0
  1286                           
  1287                           ; 4 bytes @ 0x9
  1288  000089                     	ds	1
  1289  00008A                     ___awdiv@counter:
  1290                           	opt stack 0
  1291  00008A                     __div_to_l_@cntr:
  1292                           	opt stack 0
  1293  00008A                     ___aldiv@quotient:
  1294                           	opt stack 0
  1295                           
  1296                           ; 4 bytes @ 0xA
  1297  00008A                     	ds	1
  1298  00008B                     ___awdiv@sign:
  1299                           	opt stack 0
  1300  00008B                     ___awtoft@sign:
  1301                           	opt stack 0
  1302  00008B                     __div_to_l_@exp1:
  1303                           	opt stack 0
  1304                           
  1305                           ; 1 bytes @ 0xB
  1306  00008B                     	ds	1
  1307  00008C                     ??___altoft:
  1308  00008C                     ??___lltoft:
  1309  00008C                     ___lldiv@counter:
  1310                           	opt stack 0
  1311  00008C                     ___awdiv@quotient:
  1312                           	opt stack 0
  1313                           
  1314                           ; 2 bytes @ 0xC
  1315  00008C                     	ds	1
  1316  00008D                     ?___llmod:
  1317                           	opt stack 0
  1318  00008D                     __tdiv_to_l_@cntr:
  1319                           	opt stack 0
  1320  00008D                     ___llmod@dividend:
  1321                           	opt stack 0
  1322                           
  1323                           ; 4 bytes @ 0xD
  1324  00008D                     	ds	1
  1325  00008E                     ?___wmul:
  1326                           	opt stack 0
  1327  00008E                     ?___almod:
  1328                           	opt stack 0
  1329  00008E                     __tdiv_to_l_@exp1:
  1330                           	opt stack 0
  1331  00008E                     ___wmul@multiplier:
  1332                           	opt stack 0
  1333  00008E                     ___almod@dividend:
  1334                           	opt stack 0
  1335                           
  1336                           ; 4 bytes @ 0xE
  1337  00008E                     	ds	2
  1338  000090                     ___altoft@exp:
  1339                           	opt stack 0
  1340  000090                     ___lltoft@exp:
  1341                           	opt stack 0
  1342  000090                     ___wmul@multiplicand:
  1343                           	opt stack 0
  1344                           
  1345                           ; 2 bytes @ 0x10
  1346  000090                     	ds	1
  1347  000091                     ___altoft@sign:
  1348                           	opt stack 0
  1349  000091                     ___llmod@divisor:
  1350                           	opt stack 0
  1351                           
  1352                           ; 4 bytes @ 0x11
  1353  000091                     	ds	1
  1354  000092                     ?___ftdiv:
  1355                           	opt stack 0
  1356  000092                     ___wmul@product:
  1357                           	opt stack 0
  1358  000092                     ___ftdiv@f1:
  1359                           	opt stack 0
  1360  000092                     ___almod@divisor:
  1361                           	opt stack 0
  1362                           
  1363                           ; 4 bytes @ 0x12
  1364  000092                     	ds	3
  1365  000095                     ___llmod@counter:
  1366                           	opt stack 0
  1367  000095                     ___ftdiv@f2:
  1368                           	opt stack 0
  1369                           
  1370                           ; 3 bytes @ 0x15
  1371  000095                     	ds	1
  1372  000096                     ___almod@counter:
  1373                           	opt stack 0
  1374                           
  1375                           ; 1 bytes @ 0x16
  1376  000096                     	ds	1
  1377  000097                     ___almod@sign:
  1378                           	opt stack 0
  1379                           
  1380                           ; 1 bytes @ 0x17
  1381  000097                     	ds	1
  1382  000098                     ??___ftdiv:
  1383                           
  1384                           ; 1 bytes @ 0x18
  1385  000098                     	ds	3
  1386  00009B                     ___ftdiv@cntr:
  1387                           	opt stack 0
  1388                           
  1389                           ; 1 bytes @ 0x1B
  1390  00009B                     	ds	1
  1391  00009C                     ___ftdiv@f3:
  1392                           	opt stack 0
  1393                           
  1394                           ; 3 bytes @ 0x1C
  1395  00009C                     	ds	3
  1396  00009F                     ___ftdiv@exp:
  1397                           	opt stack 0
  1398                           
  1399                           ; 1 bytes @ 0x1F
  1400  00009F                     	ds	1
  1401  0000A0                     ___ftdiv@sign:
  1402                           	opt stack 0
  1403                           
  1404                           ; 1 bytes @ 0x20
  1405  0000A0                     	ds	1
  1406  0000A1                     ?___ftmul:
  1407                           	opt stack 0
  1408  0000A1                     ___ftmul@f1:
  1409                           	opt stack 0
  1410                           
  1411                           ; 3 bytes @ 0x21
  1412  0000A1                     	ds	3
  1413  0000A4                     ___ftmul@f2:
  1414                           	opt stack 0
  1415                           
  1416                           ; 3 bytes @ 0x24
  1417  0000A4                     	ds	3
  1418  0000A7                     ??___ftmul:
  1419                           
  1420                           ; 1 bytes @ 0x27
  1421  0000A7                     	ds	3
  1422  0000AA                     ___ftmul@exp:
  1423                           	opt stack 0
  1424                           
  1425                           ; 1 bytes @ 0x2A
  1426  0000AA                     	ds	1
  1427  0000AB                     ___ftmul@f3_as_product:
  1428                           	opt stack 0
  1429                           
  1430                           ; 3 bytes @ 0x2B
  1431  0000AB                     	ds	3
  1432  0000AE                     ___ftmul@cntr:
  1433                           	opt stack 0
  1434                           
  1435                           ; 1 bytes @ 0x2E
  1436  0000AE                     	ds	1
  1437  0000AF                     ___ftmul@sign:
  1438                           	opt stack 0
  1439                           
  1440                           ; 1 bytes @ 0x2F
  1441  0000AF                     	ds	1
  1442  0000B0                     ?_fround:
  1443                           	opt stack 0
  1444  0000B0                     ?_scale:
  1445                           	opt stack 0
  1446                           
  1447                           ; 3 bytes @ 0x30
  1448  0000B0                     	ds	3
  1449  0000B3                     _fround$1338:
  1450                           	opt stack 0
  1451  0000B3                     _scale$1339:
  1452                           	opt stack 0
  1453                           
  1454                           ; 3 bytes @ 0x33
  1455  0000B3                     	ds	3
  1456  0000B6                     scale@scl:
  1457                           	opt stack 0
  1458  0000B6                     _fround$1337:
  1459                           	opt stack 0
  1460                           
  1461                           ; 3 bytes @ 0x36
  1462  0000B6                     	ds	3
  1463  0000B9                     fround@prec:
  1464                           	opt stack 0
  1465                           
  1466                           ; 1 bytes @ 0x39
  1467  0000B9                     	ds	1
  1468  0000BA                     ?___ftadd:
  1469                           	opt stack 0
  1470  0000BA                     ___ftadd@f1:
  1471                           	opt stack 0
  1472                           
  1473                           ; 3 bytes @ 0x3A
  1474  0000BA                     	ds	3
  1475  0000BD                     ___ftadd@f2:
  1476                           	opt stack 0
  1477                           
  1478                           ; 3 bytes @ 0x3D
  1479  0000BD                     	ds	3
  1480  0000C0                     ??___ftadd:
  1481                           
  1482                           ; 1 bytes @ 0x40
  1483  0000C0                     	ds	3
  1484  0000C3                     ___ftadd@sign:
  1485                           	opt stack 0
  1486                           
  1487                           ; 1 bytes @ 0x43
  1488  0000C3                     	ds	1
  1489  0000C4                     ___ftadd@exp2:
  1490                           	opt stack 0
  1491                           
  1492                           ; 1 bytes @ 0x44
  1493  0000C4                     	ds	1
  1494  0000C5                     ___ftadd@exp1:
  1495                           	opt stack 0
  1496                           
  1497                           ; 1 bytes @ 0x45
  1498  0000C5                     	ds	1
  1499  0000C6                     ?___ftsub:
  1500                           	opt stack 0
  1501  0000C6                     ?___fttol:
  1502                           	opt stack 0
  1503  0000C6                     ___ftsub@f1:
  1504                           	opt stack 0
  1505  0000C6                     ___fttol@f1:
  1506                           	opt stack 0
  1507                           
  1508                           ; 3 bytes @ 0x46
  1509  0000C6                     	ds	3
  1510  0000C9                     ___ftsub@f2:
  1511                           	opt stack 0
  1512                           
  1513                           ; 3 bytes @ 0x49
  1514  0000C9                     	ds	1
  1515  0000CA                     ??___fttol:
  1516                           
  1517                           ; 1 bytes @ 0x4A
  1518  0000CA                     	ds	2
  1519  0000CC                     
  1520                           ; 1 bytes @ 0x4C
  1521  0000CC                     	ds	3
  1522  0000CF                     ___fttol@sign1:
  1523                           	opt stack 0
  1524                           
  1525                           ; 1 bytes @ 0x4F
  1526  0000CF                     	ds	1
  1527  0000D0                     ___fttol@lval:
  1528                           	opt stack 0
  1529                           
  1530                           ; 4 bytes @ 0x50
  1531  0000D0                     	ds	4
  1532  0000D4                     ___fttol@exp1:
  1533                           	opt stack 0
  1534                           
  1535                           ; 1 bytes @ 0x54
  1536  0000D4                     	ds	1
  1537  0000D5                     ?_printf:
  1538                           	opt stack 0
  1539  0000D5                     ?_angleToPulse:
  1540                           	opt stack 0
  1541  0000D5                     angleToPulse@angle:
  1542                           	opt stack 0
  1543  0000D5                     printf@f:
  1544                           	opt stack 0
  1545                           
  1546                           ; 2 bytes @ 0x55
  1547  0000D5                     	ds	4
  1548  0000D9                     ??_angleToPulse:
  1549                           
  1550                           ; 1 bytes @ 0x59
  1551  0000D9                     	ds	4
  1552  0000DD                     angleToPulse@offset:
  1553                           	opt stack 0
  1554                           
  1555                           ; 4 bytes @ 0x5D
  1556  0000DD                     	ds	2
  1557  0000DF                     ??_printf:
  1558                           
  1559                           ; 1 bytes @ 0x5F
  1560  0000DF                     	ds	2
  1561  0000E1                     angleToPulse@a180:
  1562                           	opt stack 0
  1563                           
  1564                           ; 4 bytes @ 0x61
  1565  0000E1                     	ds	4
  1566  0000E5                     pause@message:
  1567                           	opt stack 0
  1568  0000E5                     _angleToPulse$1336:
  1569                           	opt stack 0
  1570                           
  1571                           ; 3 bytes @ 0x65
  1572  0000E5                     	ds	2
  1573  0000E7                     
  1574                           ; 1 bytes @ 0x67
  1575  0000E7                     	ds	1
  1576  0000E8                     angleToPulse@a000:
  1577                           	opt stack 0
  1578                           
  1579                           ; 4 bytes @ 0x68
  1580  0000E8                     	ds	4
  1581  0000EC                     setAngle@motor:
  1582                           	opt stack 0
  1583                           
  1584                           ; 2 bytes @ 0x6C
  1585  0000EC                     	ds	2
  1586  0000EE                     setAngle@angle:
  1587                           	opt stack 0
  1588                           
  1589                           ; 2 bytes @ 0x6E
  1590  0000EE                     	ds	2
  1591  0000F0                     ??_setAngle:
  1592                           
  1593                           ; 1 bytes @ 0x70
  1594  0000F0                     	ds	2
  1595  0000F2                     setAngle@period:
  1596                           	opt stack 0
  1597                           
  1598                           ; 2 bytes @ 0x72
  1599  0000F2                     	ds	2
  1600  0000F4                     setAngle@i:
  1601                           	opt stack 0
  1602                           
  1603                           ; 2 bytes @ 0x74
  1604  0000F4                     	ds	2
  1605  0000F6                     ??_sortBattery:
  1606  0000F6                     initServo@motor:
  1607                           	opt stack 0
  1608                           
  1609                           ; 2 bytes @ 0x76
  1610  0000F6                     	ds	2
  1611  0000F8                     initServo@angle:
  1612                           	opt stack 0
  1613                           
  1614                           ; 2 bytes @ 0x78
  1615  0000F8                     	ds	2
  1616  0000FA                     ??_initServo:
  1617                           
  1618                           ; 1 bytes @ 0x7A
  1619  0000FA                     	ds	4
  1620  0000FE                     ??_main:
  1621                           
  1622                           ; 1 bytes @ 0x7E
  1623  0000FE                     	ds	1
  1624                           tblptru	equ	0xFF8
  1625                           tblptrh	equ	0xFF7
  1626                           tblptrl	equ	0xFF6
  1627                           tablat	equ	0xFF5
  1628                           postinc0	equ	0xFEE
  1629                           wreg	equ	0xFE8
  1630                           postdec1	equ	0xFE5
  1631                           fsr1l	equ	0xFE1
  1632                           
  1633                           	psect	cstackCOMRAM
  1634  000001                     __pcstackCOMRAM:
  1635                           	opt stack 0
  1636  000001                     ??i2_isdigit:
  1637  000001                     ?i2___awmod:
  1638                           	opt stack 0
  1639  000001                     ?i2___ftpack:
  1640                           	opt stack 0
  1641  000001                     ?i2___ftneg:
  1642                           	opt stack 0
  1643  000001                     ?i2__div_to_l_:
  1644                           	opt stack 0
  1645  000001                     ?i2__tdiv_to_l_:
  1646                           	opt stack 0
  1647  000001                     ?i2___lldiv:
  1648                           	opt stack 0
  1649  000001                     i2lcdNibble@temp:
  1650                           	opt stack 0
  1651  000001                     i2___awmod@dividend:
  1652                           	opt stack 0
  1653  000001                     i2__div_to_l_@f1:
  1654                           	opt stack 0
  1655  000001                     i2___ftpack@arg:
  1656                           	opt stack 0
  1657  000001                     i2__tdiv_to_l_@f1:
  1658                           	opt stack 0
  1659  000001                     i2___ftge@ff1:
  1660                           	opt stack 0
  1661  000001                     i2___ftneg@f1:
  1662                           	opt stack 0
  1663  000001                     i2___lldiv@dividend:
  1664                           	opt stack 0
  1665                           
  1666                           ; 4 bytes @ 0x0
  1667  000001                     	ds	1
  1668  000002                     i2lcdNibble@data:
  1669                           	opt stack 0
  1670  000002                     i2_isdigit$966:
  1671                           	opt stack 0
  1672                           
  1673                           ; 1 bytes @ 0x1
  1674  000002                     	ds	1
  1675  000003                     ??i2_lcdInst:
  1676  000003                     i2isdigit@c:
  1677                           	opt stack 0
  1678  000003                     i2___awmod@divisor:
  1679                           	opt stack 0
  1680                           
  1681                           ; 2 bytes @ 0x2
  1682  000003                     	ds	1
  1683  000004                     i2lcdInst@data:
  1684                           	opt stack 0
  1685  000004                     i2___ftpack@exp:
  1686                           	opt stack 0
  1687  000004                     i2__div_to_l_@f2:
  1688                           	opt stack 0
  1689  000004                     i2__tdiv_to_l_@f2:
  1690                           	opt stack 0
  1691  000004                     i2___ftge@ff2:
  1692                           	opt stack 0
  1693                           
  1694                           ; 3 bytes @ 0x3
  1695  000004                     	ds	1
  1696  000005                     i2putch@data:
  1697                           	opt stack 0
  1698  000005                     i2___awmod@counter:
  1699                           	opt stack 0
  1700  000005                     i2___ftpack@sign:
  1701                           	opt stack 0
  1702  000005                     i2___lldiv@divisor:
  1703                           	opt stack 0
  1704                           
  1705                           ; 4 bytes @ 0x4
  1706  000005                     	ds	1
  1707  000006                     ??i2___ftpack:
  1708  000006                     i2___awmod@sign:
  1709                           	opt stack 0
  1710                           
  1711                           ; 1 bytes @ 0x5
  1712  000006                     	ds	1
  1713  000007                     ??i2__tdiv_to_l_:
  1714  000007                     ??i2___ftge:
  1715  000007                     ?i2___awdiv:
  1716                           	opt stack 0
  1717  000007                     i2digitalWrite@pin:
  1718                           	opt stack 0
  1719  000007                     i2startTimer@timer:
  1720                           	opt stack 0
  1721  000007                     i2___awdiv@dividend:
  1722                           	opt stack 0
  1723  000007                     i2__div_to_l_@quot:
  1724                           	opt stack 0
  1725                           
  1726                           ; 4 bytes @ 0x6
  1727  000007                     	ds	2
  1728  000009                     ?i2___lltoft:
  1729                           	opt stack 0
  1730  000009                     i2digitalWrite@val:
  1731                           	opt stack 0
  1732  000009                     i2___awdiv@divisor:
  1733                           	opt stack 0
  1734  000009                     i2startTimer@val:
  1735                           	opt stack 0
  1736  000009                     i2___lldiv@quotient:
  1737                           	opt stack 0
  1738  000009                     i2___lltoft@c:
  1739                           	opt stack 0
  1740                           
  1741                           ; 4 bytes @ 0x8
  1742  000009                     	ds	1
  1743  00000A                     i2__tdiv_to_l_@quot:
  1744                           	opt stack 0
  1745                           
  1746                           ; 4 bytes @ 0x9
  1747  00000A                     	ds	1
  1748  00000B                     ??i2_digitalWrite:
  1749  00000B                     i2___awdiv@counter:
  1750                           	opt stack 0
  1751  00000B                     i2__div_to_l_@cntr:
  1752                           	opt stack 0
  1753                           
  1754                           ; 1 bytes @ 0xA
  1755  00000B                     	ds	1
  1756  00000C                     i2___awdiv@sign:
  1757                           	opt stack 0
  1758  00000C                     i2__div_to_l_@exp1:
  1759                           	opt stack 0
  1760                           
  1761                           ; 1 bytes @ 0xB
  1762  00000C                     	ds	1
  1763  00000D                     ??i2_startTimer:
  1764  00000D                     ??i2___lltoft:
  1765  00000D                     i2___lldiv@counter:
  1766                           	opt stack 0
  1767  00000D                     i2___awdiv@quotient:
  1768                           	opt stack 0
  1769                           
  1770                           ; 2 bytes @ 0xC
  1771  00000D                     	ds	1
  1772  00000E                     ?i2___llmod:
  1773                           	opt stack 0
  1774  00000E                     i2__tdiv_to_l_@cntr:
  1775                           	opt stack 0
  1776  00000E                     i2digitalWrite@p:
  1777                           	opt stack 0
  1778  00000E                     i2___llmod@dividend:
  1779                           	opt stack 0
  1780                           
  1781                           ; 4 bytes @ 0xD
  1782  00000E                     	ds	1
  1783  00000F                     ?i2___wmul:
  1784                           	opt stack 0
  1785  00000F                     i2__tdiv_to_l_@exp1:
  1786                           	opt stack 0
  1787  00000F                     i2___wmul@multiplier:
  1788                           	opt stack 0
  1789                           
  1790                           ; 2 bytes @ 0xE
  1791  00000F                     	ds	1
  1792  000010                     ??_servoInterruptService:
  1793                           
  1794                           ; 1 bytes @ 0xF
  1795  000010                     	ds	1
  1796  000011                     i2___lltoft@exp:
  1797                           	opt stack 0
  1798  000011                     i2___wmul@multiplicand:
  1799                           	opt stack 0
  1800                           
  1801                           ; 2 bytes @ 0x10
  1802  000011                     	ds	1
  1803  000012                     i2___llmod@divisor:
  1804                           	opt stack 0
  1805                           
  1806                           ; 4 bytes @ 0x11
  1807  000012                     	ds	1
  1808  000013                     i2___wmul@product:
  1809                           	opt stack 0
  1810                           
  1811                           ; 2 bytes @ 0x12
  1812  000013                     	ds	2
  1813  000015                     ?i2___ftmul:
  1814                           	opt stack 0
  1815  000015                     i2___ftmul@f1:
  1816                           	opt stack 0
  1817                           
  1818                           ; 3 bytes @ 0x14
  1819  000015                     	ds	1
  1820  000016                     i2___llmod@counter:
  1821                           	opt stack 0
  1822                           
  1823                           ; 1 bytes @ 0x15
  1824  000016                     	ds	2
  1825  000018                     i2___ftmul@f2:
  1826                           	opt stack 0
  1827                           
  1828                           ; 3 bytes @ 0x17
  1829  000018                     	ds	3
  1830  00001B                     ??i2___ftmul:
  1831                           
  1832                           ; 1 bytes @ 0x1A
  1833  00001B                     	ds	3
  1834  00001E                     i2___ftmul@exp:
  1835                           	opt stack 0
  1836                           
  1837                           ; 1 bytes @ 0x1D
  1838  00001E                     	ds	1
  1839  00001F                     i2___ftmul@f3_as_product:
  1840                           	opt stack 0
  1841                           
  1842                           ; 3 bytes @ 0x1E
  1843  00001F                     	ds	3
  1844  000022                     i2___ftmul@cntr:
  1845                           	opt stack 0
  1846                           
  1847                           ; 1 bytes @ 0x21
  1848  000022                     	ds	1
  1849  000023                     i2___ftmul@sign:
  1850                           	opt stack 0
  1851                           
  1852                           ; 1 bytes @ 0x22
  1853  000023                     	ds	1
  1854  000024                     ?i2_fround:
  1855                           	opt stack 0
  1856  000024                     ?i2_scale:
  1857                           	opt stack 0
  1858                           
  1859                           ; 3 bytes @ 0x23
  1860  000024                     	ds	3
  1861  000027                     i2_fround$1533:
  1862                           	opt stack 0
  1863  000027                     i2_scale$1534:
  1864                           	opt stack 0
  1865                           
  1866                           ; 3 bytes @ 0x26
  1867  000027                     	ds	3
  1868  00002A                     i2scale@scl:
  1869                           	opt stack 0
  1870  00002A                     i2_fround$1532:
  1871                           	opt stack 0
  1872                           
  1873                           ; 3 bytes @ 0x29
  1874  00002A                     	ds	1
  1875  00002B                     ?i2___fttol:
  1876                           	opt stack 0
  1877  00002B                     i2___fttol@f1:
  1878                           	opt stack 0
  1879                           
  1880                           ; 3 bytes @ 0x2A
  1881  00002B                     	ds	2
  1882  00002D                     i2fround@prec:
  1883                           	opt stack 0
  1884                           
  1885                           ; 1 bytes @ 0x2C
  1886  00002D                     	ds	1
  1887  00002E                     ?i2___ftadd:
  1888                           	opt stack 0
  1889  00002E                     i2___ftadd@f1:
  1890                           	opt stack 0
  1891                           
  1892                           ; 3 bytes @ 0x2D
  1893  00002E                     	ds	1
  1894  00002F                     ??i2___fttol:
  1895                           
  1896                           ; 1 bytes @ 0x2E
  1897  00002F                     	ds	2
  1898  000031                     i2___ftadd@f2:
  1899                           	opt stack 0
  1900                           
  1901                           ; 3 bytes @ 0x30
  1902  000031                     	ds	3
  1903  000034                     ??i2___ftadd:
  1904  000034                     i2___fttol@sign1:
  1905                           	opt stack 0
  1906                           
  1907                           ; 1 bytes @ 0x33
  1908  000034                     	ds	1
  1909  000035                     i2___fttol@lval:
  1910                           	opt stack 0
  1911                           
  1912                           ; 4 bytes @ 0x34
  1913  000035                     	ds	2
  1914  000037                     i2___ftadd@sign:
  1915                           	opt stack 0
  1916                           
  1917                           ; 1 bytes @ 0x36
  1918  000037                     	ds	1
  1919  000038                     i2___ftadd@exp2:
  1920                           	opt stack 0
  1921                           
  1922                           ; 1 bytes @ 0x37
  1923  000038                     	ds	1
  1924  000039                     i2___ftadd@exp1:
  1925                           	opt stack 0
  1926  000039                     i2___fttol@exp1:
  1927                           	opt stack 0
  1928                           
  1929                           ; 1 bytes @ 0x38
  1930  000039                     	ds	1
  1931  00003A                     ?i2___ftsub:
  1932                           	opt stack 0
  1933  00003A                     i2___ftsub@f1:
  1934                           	opt stack 0
  1935                           
  1936                           ; 3 bytes @ 0x39
  1937  00003A                     	ds	3
  1938  00003D                     i2___ftsub@f2:
  1939                           	opt stack 0
  1940                           
  1941                           ; 3 bytes @ 0x3C
  1942  00003D                     	ds	3
  1943  000040                     ?i2_printf:
  1944                           	opt stack 0
  1945  000040                     i2printf@f:
  1946                           	opt stack 0
  1947                           
  1948                           ; 2 bytes @ 0x3F
  1949  000040                     	ds	4
  1950  000044                     ??i2_printf:
  1951                           
  1952                           ; 1 bytes @ 0x43
  1953  000044                     	ds	6
  1954  00004A                     i2_printf$1535:
  1955                           	opt stack 0
  1956                           
  1957                           ; 3 bytes @ 0x49
  1958  00004A                     	ds	3
  1959  00004D                     i2printf@idx:
  1960                           	opt stack 0
  1961                           
  1962                           ; 1 bytes @ 0x4C
  1963  00004D                     	ds	1
  1964  00004E                     i2printf@cp:
  1965                           	opt stack 0
  1966                           
  1967                           ; 2 bytes @ 0x4D
  1968  00004E                     	ds	2
  1969  000050                     i2printf@len:
  1970                           	opt stack 0
  1971                           
  1972                           ; 2 bytes @ 0x4F
  1973  000050                     	ds	2
  1974  000052                     i2printf@ap:
  1975                           	opt stack 0
  1976                           
  1977                           ; 2 bytes @ 0x51
  1978  000052                     	ds	2
  1979  000054                     i2printf@prec:
  1980                           	opt stack 0
  1981                           
  1982                           ; 2 bytes @ 0x53
  1983  000054                     	ds	2
  1984  000056                     i2printf@tmpval:
  1985                           	opt stack 0
  1986                           
  1987                           ; 4 bytes @ 0x55
  1988  000056                     	ds	4
  1989  00005A                     i2printf@exp:
  1990                           	opt stack 0
  1991                           
  1992                           ; 2 bytes @ 0x59
  1993  00005A                     	ds	2
  1994  00005C                     i2printf@val:
  1995                           	opt stack 0
  1996                           
  1997                           ; 4 bytes @ 0x5B
  1998  00005C                     	ds	4
  1999  000060                     i2printf@fval:
  2000                           	opt stack 0
  2001                           
  2002                           ; 3 bytes @ 0x5F
  2003  000060                     	ds	3
  2004  000063                     i2printf@width:
  2005                           	opt stack 0
  2006                           
  2007                           ; 2 bytes @ 0x62
  2008  000063                     	ds	2
  2009  000065                     i2printf@flag:
  2010                           	opt stack 0
  2011                           
  2012                           ; 2 bytes @ 0x64
  2013  000065                     	ds	2
  2014  000067                     i2printf@c:
  2015                           	opt stack 0
  2016                           
  2017                           ; 1 bytes @ 0x66
  2018  000067                     	ds	1
  2019  000068                     ??_service:
  2020                           
  2021                           ; 1 bytes @ 0x67
  2022  000068                     	ds	18
  2023  00007A                     service@key:
  2024                           	opt stack 0
  2025                           
  2026                           ; 1 bytes @ 0x79
  2027  00007A                     	ds	1
  2028                           tblptru	equ	0xFF8
  2029                           tblptrh	equ	0xFF7
  2030                           tblptrl	equ	0xFF6
  2031                           tablat	equ	0xFF5
  2032                           postinc0	equ	0xFEE
  2033                           wreg	equ	0xFE8
  2034                           postdec1	equ	0xFE5
  2035                           fsr1l	equ	0xFE1
  2036                           
  2037 ;;
  2038 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2039 ;;
  2040 ;; *************** function _main *****************
  2041 ;; Defined at:
  2042 ;;		line 93 in file "main.c"
  2043 ;; Parameters:    Size  Location     Type
  2044 ;;		None
  2045 ;; Auto vars:     Size  Location     Type
  2046 ;;  prevTime        4   46[BANK1 ] long 
  2047 ;; Return value:  Size  Location     Type
  2048 ;;                  1    wreg      void 
  2049 ;; Registers used:
  2050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2051 ;; Tracked objects:
  2052 ;;		On entry : 0/0
  2053 ;;		On exit  : 0/0
  2054 ;;		Unchanged: 0/0
  2055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2057 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2058 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2059 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2060 ;;Total ram usage:        5 bytes
  2061 ;; Hardware stack levels required when called:   13
  2062 ;; This function calls:
  2063 ;;		___aldiv
  2064 ;;		___almod
  2065 ;;		_digitalWrite
  2066 ;;		_initLCD
  2067 ;;		_initServo
  2068 ;;		_initTimer
  2069 ;;		_lcdClear
  2070 ;;		_lcdHome
  2071 ;;		_pinSetup
  2072 ;;		_printf
  2073 ;;		_sortBattery
  2074 ;;		_startTimer
  2075 ;; This function is called by:
  2076 ;;		Startup code after reset
  2077 ;; This function uses a non-reentrant model
  2078 ;;
  2079                           
  2080                           	psect	text0
  2081  002C92                     __ptext0:
  2082                           	opt stack 0
  2083  002C92                     _main:
  2084                           	opt stack 18
  2085                           
  2086                           ;main.c: 94: pinSetup();
  2087                           
  2088                           ;incstack = 0
  2089  002C92  ECB5  F027         	call	_pinSetup	;wreg free
  2090                           
  2091                           ;main.c: 95: initLCD();
  2092  002C96  EC2A  F027         	call	_initLCD	;wreg free
  2093                           
  2094                           ;main.c: 103: long prevTime = 0;
  2095                           
  2096                           ;main.c: 97: while(1){
  2097  002C9A  0E00               	movlw	0
  2098  002C9C  0101               	movlb	1	; () banked
  2099  002C9E  6F2E               	movwf	main@prevTime& (0+255),b
  2100  002CA0  0E00               	movlw	0
  2101  002CA2  6F2F               	movwf	(main@prevTime+1)& (0+255),b
  2102  002CA4  0E00               	movlw	0
  2103  002CA6  6F30               	movwf	(main@prevTime+2)& (0+255),b
  2104  002CA8  0E00               	movlw	0
  2105  002CAA  6F31               	movwf	(main@prevTime+3)& (0+255),b
  2106                           
  2107                           ; BSR set to: 1
  2108                           ;main.c: 104: time = 0;
  2109  002CAC  0E00               	movlw	0
  2110  002CAE  0101               	movlb	1	; () banked
  2111  002CB0  6F74               	movwf	_time& (0+255),b
  2112  002CB2  0E00               	movlw	0
  2113  002CB4  6F75               	movwf	(_time+1)& (0+255),b
  2114  002CB6  0E00               	movlw	0
  2115  002CB8  6F76               	movwf	(_time+2)& (0+255),b
  2116  002CBA  0E00               	movlw	0
  2117  002CBC  6F77               	movwf	(_time+3)& (0+255),b
  2118                           
  2119                           ;main.c: 105: initTimer(1);
  2120  002CBE  0E00               	movlw	0
  2121  002CC0  0100               	movlb	0	; () banked
  2122  002CC2  6F81               	movwf	(initTimer@timer+1)& (0+255),b
  2123  002CC4  0E01               	movlw	1
  2124  002CC6  6F80               	movwf	initTimer@timer& (0+255),b
  2125  002CC8  ECB7  F026         	call	_initTimer	;wreg free
  2126                           
  2127                           ;main.c: 106: startTimer(1,0);
  2128  002CCC  0E00               	movlw	0
  2129  002CCE  0100               	movlb	0	; () banked
  2130  002CD0  6F81               	movwf	(startTimer@timer+1)& (0+255),b
  2131  002CD2  0E01               	movlw	1
  2132  002CD4  6F80               	movwf	startTimer@timer& (0+255),b
  2133  002CD6  0E00               	movlw	0
  2134  002CD8  0100               	movlb	0	; () banked
  2135  002CDA  6F82               	movwf	startTimer@val& (0+255),b
  2136  002CDC  0E00               	movlw	0
  2137  002CDE  6F83               	movwf	(startTimer@val+1)& (0+255),b
  2138  002CE0  0E00               	movlw	0
  2139  002CE2  6F84               	movwf	(startTimer@val+2)& (0+255),b
  2140  002CE4  0E00               	movlw	0
  2141  002CE6  6F85               	movwf	(startTimer@val+3)& (0+255),b
  2142  002CE8  EC8F  F026         	call	_startTimer	;wreg free
  2143                           
  2144                           ;main.c: 109: digitalWrite(cylinderMotor, 1);
  2145  002CEC  0E4C               	movlw	low _cylinderMotor
  2146  002CEE  0100               	movlb	0	; () banked
  2147  002CF0  6F80               	movwf	digitalWrite@pin& (0+255),b
  2148  002CF2  0E01               	movlw	high _cylinderMotor
  2149  002CF4  0100               	movlb	0	; () banked
  2150  002CF6  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2151  002CF8  0E00               	movlw	0
  2152  002CFA  0100               	movlb	0	; () banked
  2153  002CFC  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2154  002CFE  0E01               	movlw	1
  2155  002D00  6F82               	movwf	digitalWrite@val& (0+255),b
  2156  002D02  EC32  F01E         	call	_digitalWrite	;wreg free
  2157                           
  2158                           ;main.c: 110: initServo(conveyorServo, 0);
  2159  002D06  0E48               	movlw	low _conveyorServo
  2160  002D08  0100               	movlb	0	; () banked
  2161  002D0A  6FF6               	movwf	initServo@motor& (0+255),b
  2162  002D0C  0E01               	movlw	high _conveyorServo
  2163  002D0E  0100               	movlb	0	; () banked
  2164  002D10  6FF7               	movwf	(initServo@motor+1)& (0+255),b
  2165  002D12  0E00               	movlw	0
  2166  002D14  0100               	movlb	0	; () banked
  2167  002D16  6FF9               	movwf	(initServo@angle+1)& (0+255),b
  2168  002D18  0E00               	movlw	0
  2169  002D1A  6FF8               	movwf	initServo@angle& (0+255),b
  2170  002D1C  EC80  F024         	call	_initServo	;wreg free
  2171                           
  2172                           ;main.c: 111: initServo(padServo, padAngle_NEUTRAL);
  2173  002D20  0E58               	movlw	low _padServo
  2174  002D22  0100               	movlb	0	; () banked
  2175  002D24  6FF6               	movwf	initServo@motor& (0+255),b
  2176  002D26  0E01               	movlw	high _padServo
  2177  002D28  0100               	movlb	0	; () banked
  2178  002D2A  6FF7               	movwf	(initServo@motor+1)& (0+255),b
  2179  002D2C  C136  F0F8         	movff	_padAngle_NEUTRAL,initServo@angle
  2180  002D30  C137  F0F9         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  2181  002D34  EC80  F024         	call	_initServo	;wreg free
  2182                           
  2183                           ;main.c: 112: initServo(redirectingServo, redirectAngle_AA);
  2184  002D38  0E5C               	movlw	low _redirectingServo
  2185  002D3A  0100               	movlb	0	; () banked
  2186  002D3C  6FF6               	movwf	initServo@motor& (0+255),b
  2187  002D3E  0E01               	movlw	high _redirectingServo
  2188  002D40  0100               	movlb	0	; () banked
  2189  002D42  6FF7               	movwf	(initServo@motor+1)& (0+255),b
  2190  002D44  C13E  F0F8         	movff	_redirectAngle_AA,initServo@angle
  2191  002D48  C13F  F0F9         	movff	_redirectAngle_AA+1,initServo@angle+1
  2192  002D4C  EC80  F024         	call	_initServo	;wreg free
  2193  002D50                     l118:
  2194                           
  2195                           ;main.c: 116: lcdClear();
  2196  002D50  ECF7  F028         	call	_lcdClear	;wreg free
  2197                           
  2198                           ;main.c: 117: printf("running");
  2199  002D54  0EF7               	movlw	low STR_1
  2200  002D56  0100               	movlb	0	; () banked
  2201  002D58  6FD5               	movwf	printf@f& (0+255),b
  2202  002D5A  0EFF               	movlw	high STR_1
  2203  002D5C  0100               	movlb	0	; () banked
  2204  002D5E  6FD6               	movwf	(printf@f+1)& (0+255),b
  2205  002D60  EC09  F000         	call	_printf	;wreg free
  2206                           
  2207                           ;main.c: 119: while(!batteryDetected){
  2208  002D64  D05B               	goto	l6694
  2209  002D66                     l6688:
  2210                           
  2211                           ;main.c: 121: lcdHome();
  2212  002D66  ECFB  F028         	call	_lcdHome	;wreg free
  2213                           
  2214                           ;main.c: 122: printf("time %02ld:%02ld",time/600,(time/10)%60);
  2215  002D6A  0EA7               	movlw	low STR_2
  2216  002D6C  0100               	movlb	0	; () banked
  2217  002D6E  6FD5               	movwf	printf@f& (0+255),b
  2218  002D70  0EFF               	movlw	high STR_2
  2219  002D72  0100               	movlb	0	; () banked
  2220  002D74  6FD6               	movwf	(printf@f+1)& (0+255),b
  2221  002D76  C174  F080         	movff	_time,___aldiv@dividend
  2222  002D7A  C175  F081         	movff	_time+1,___aldiv@dividend+1
  2223  002D7E  C176  F082         	movff	_time+2,___aldiv@dividend+2
  2224  002D82  C177  F083         	movff	_time+3,___aldiv@dividend+3
  2225  002D86  0E58               	movlw	88
  2226  002D88  0100               	movlb	0	; () banked
  2227  002D8A  6F84               	movwf	___aldiv@divisor& (0+255),b
  2228  002D8C  0E02               	movlw	2
  2229  002D8E  6F85               	movwf	(___aldiv@divisor+1)& (0+255),b
  2230  002D90  0E00               	movlw	0
  2231  002D92  6F86               	movwf	(___aldiv@divisor+2)& (0+255),b
  2232  002D94  0E00               	movlw	0
  2233  002D96  6F87               	movwf	(___aldiv@divisor+3)& (0+255),b
  2234  002D98  EC1F  F01D         	call	___aldiv	;wreg free
  2235  002D9C  C080  F0D7         	movff	?___aldiv,?_printf+2
  2236  002DA0  C081  F0D8         	movff	?___aldiv+1,?_printf+3
  2237  002DA4  C082  F0D9         	movff	?___aldiv+2,?_printf+4
  2238  002DA8  C083  F0DA         	movff	?___aldiv+3,?_printf+5
  2239  002DAC  0E0A               	movlw	10
  2240  002DAE  0100               	movlb	0	; () banked
  2241  002DB0  6F84               	movwf	___aldiv@divisor& (0+255),b
  2242  002DB2  0E00               	movlw	0
  2243  002DB4  6F85               	movwf	(___aldiv@divisor+1)& (0+255),b
  2244  002DB6  0E00               	movlw	0
  2245  002DB8  6F86               	movwf	(___aldiv@divisor+2)& (0+255),b
  2246  002DBA  0E00               	movlw	0
  2247  002DBC  6F87               	movwf	(___aldiv@divisor+3)& (0+255),b
  2248  002DBE  C174  F080         	movff	_time,___aldiv@dividend
  2249  002DC2  C175  F081         	movff	_time+1,___aldiv@dividend+1
  2250  002DC6  C176  F082         	movff	_time+2,___aldiv@dividend+2
  2251  002DCA  C177  F083         	movff	_time+3,___aldiv@dividend+3
  2252  002DCE  EC1F  F01D         	call	___aldiv	;wreg free
  2253  002DD2  C080  F08E         	movff	?___aldiv,___almod@dividend
  2254  002DD6  C081  F08F         	movff	?___aldiv+1,___almod@dividend+1
  2255  002DDA  C082  F090         	movff	?___aldiv+2,___almod@dividend+2
  2256  002DDE  C083  F091         	movff	?___aldiv+3,___almod@dividend+3
  2257  002DE2  0E3C               	movlw	60
  2258  002DE4  0100               	movlb	0	; () banked
  2259  002DE6  6F92               	movwf	___almod@divisor& (0+255),b
  2260  002DE8  0E00               	movlw	0
  2261  002DEA  6F93               	movwf	(___almod@divisor+1)& (0+255),b
  2262  002DEC  0E00               	movlw	0
  2263  002DEE  6F94               	movwf	(___almod@divisor+2)& (0+255),b
  2264  002DF0  0E00               	movlw	0
  2265  002DF2  6F95               	movwf	(___almod@divisor+3)& (0+255),b
  2266  002DF4  EC25  F020         	call	___almod	;wreg free
  2267  002DF8  C08E  F0DB         	movff	?___almod,?_printf+6
  2268  002DFC  C08F  F0DC         	movff	?___almod+1,?_printf+7
  2269  002E00  C090  F0DD         	movff	?___almod+2,?_printf+8
  2270  002E04  C091  F0DE         	movff	?___almod+3,?_printf+9
  2271  002E08  EC09  F000         	call	_printf	;wreg free
  2272                           
  2273                           ;main.c: 123: _delay((unsigned long)((77)*(10000000/4000.0)));
  2274  002E0C  0EFA               	movlw	250
  2275  002E0E  0100               	movlb	0	; () banked
  2276  002E10  6FFE               	movwf	??_main& (0+255),b
  2277  002E12  0EFF               	movlw	255
  2278  002E14                     u7787:
  2279  002E14  2EE8               	decfsz	wreg,f,c
  2280  002E16  D7FE               	bra	u7787
  2281  002E18  2FFE               	decfsz	??_main& (0+255),f,b
  2282  002E1A  D7FC               	bra	u7787
  2283  002E1C                     l6694:
  2284  002E1C  0101               	movlb	1	; () banked
  2285  002E1E  5181               	movf	_batteryDetected& (0+255),w,b
  2286  002E20  0101               	movlb	1	; () banked
  2287  002E22  1182               	iorwf	(_batteryDetected+1)& (0+255),w,b
  2288  002E24  B4D8               	btfsc	status,2,c
  2289  002E26  D79F               	goto	l6688
  2290                           
  2291                           ; BSR set to: 1
  2292                           ;main.c: 126: }
  2293                           ;main.c: 128: sortBattery();
  2294                           
  2295                           ; BSR set to: 1
  2296  002E28  ECF8  F00F         	call	_sortBattery	;wreg free
  2297                           
  2298                           ;main.c: 131: batteryDetected = 0;
  2299  002E2C  0E00               	movlw	0
  2300  002E2E  0101               	movlb	1	; () banked
  2301  002E30  6F82               	movwf	(_batteryDetected+1)& (0+255),b
  2302  002E32  0E00               	movlw	0
  2303  002E34  6F81               	movwf	_batteryDetected& (0+255),b
  2304                           
  2305                           ; BSR set to: 1
  2306  002E36  D78C               	goto	l118
  2307  002E38                     l126:
  2308  002E38  D7FF               	goto	l126
  2309  002E3A                     __end_of_main:
  2310                           	opt stack 0
  2311                           tblptru	equ	0xFF8
  2312                           tblptrh	equ	0xFF7
  2313                           tblptrl	equ	0xFF6
  2314                           tablat	equ	0xFF5
  2315                           postinc0	equ	0xFEE
  2316                           wreg	equ	0xFE8
  2317                           postdec1	equ	0xFE5
  2318                           fsr1l	equ	0xFE1
  2319                           status	equ	0xFD8
  2320                           
  2321 ;; *************** function _sortBattery *****************
  2322 ;; Defined at:
  2323 ;;		line 143 in file "main.c"
  2324 ;; Parameters:    Size  Location     Type
  2325 ;;		None
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;  V_float         3   30[BANK1 ] float 
  2328 ;;  V               3   43[BANK1 ] float 
  2329 ;;  resolution      3   36[BANK1 ] float 
  2330 ;;  Vcc             3   33[BANK1 ] float 
  2331 ;;  signal          2   41[BANK1 ] int 
  2332 ;;  targetAngle     2   39[BANK1 ] int 
  2333 ;; Return value:  Size  Location     Type
  2334 ;;                  1    wreg      void 
  2335 ;; Registers used:
  2336 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2337 ;; Tracked objects:
  2338 ;;		On entry : 0/0
  2339 ;;		On exit  : 0/0
  2340 ;;		Unchanged: 0/0
  2341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2343 ;;      Locals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2344 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2345 ;;      Totals:         0       2      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2346 ;;Total ram usage:       18 bytes
  2347 ;; Hardware stack levels used:    1
  2348 ;; Hardware stack levels required when called:   12
  2349 ;; This function calls:
  2350 ;;		___altoft
  2351 ;;		___ftdiv
  2352 ;;		___ftge
  2353 ;;		___ftmul
  2354 ;;		_analogRead
  2355 ;;		_digitalRead
  2356 ;;		_digitalWrite
  2357 ;;		_lcdClear
  2358 ;;		_pause
  2359 ;;		_printf
  2360 ;;		_readKeypad
  2361 ;;		_setAngle
  2362 ;; This function is called by:
  2363 ;;		_main
  2364 ;; This function uses a non-reentrant model
  2365 ;;
  2366                           
  2367                           	psect	text1
  2368  001FF0                     __ptext1:
  2369                           	opt stack 0
  2370  001FF0                     _sortBattery:
  2371                           	opt stack 18
  2372                           
  2373                           ;main.c: 146: setAngle(conveyorServo, 90);
  2374                           
  2375                           ;incstack = 0
  2376  001FF0  0E48               	movlw	low _conveyorServo
  2377  001FF2  0100               	movlb	0	; () banked
  2378  001FF4  6FEC               	movwf	setAngle@motor& (0+255),b
  2379  001FF6  0E01               	movlw	high _conveyorServo
  2380  001FF8  0100               	movlb	0	; () banked
  2381  001FFA  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2382  001FFC  0E00               	movlw	0
  2383  001FFE  0100               	movlb	0	; () banked
  2384  002000  6FEF               	movwf	(setAngle@angle+1)& (0+255),b
  2385  002002  0E5A               	movlw	90
  2386  002004  6FEE               	movwf	setAngle@angle& (0+255),b
  2387  002006  EC09  F021         	call	_setAngle	;wreg free
  2388                           
  2389                           ;main.c: 147: digitalWrite(cylinderMotor, 0);
  2390  00200A  0E4C               	movlw	low _cylinderMotor
  2391  00200C  0100               	movlb	0	; () banked
  2392  00200E  6F80               	movwf	digitalWrite@pin& (0+255),b
  2393  002010  0E01               	movlw	high _cylinderMotor
  2394  002012  0100               	movlb	0	; () banked
  2395  002014  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2396  002016  0E00               	movlw	0
  2397  002018  0100               	movlb	0	; () banked
  2398  00201A  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2399  00201C  0E00               	movlw	0
  2400  00201E  6F82               	movwf	digitalWrite@val& (0+255),b
  2401  002020  EC32  F01E         	call	_digitalWrite	;wreg free
  2402                           
  2403                           ;main.c: 153: pause("interrupt!!!\nclose?");
  2404  002024  0E9E               	movlw	low STR_3
  2405  002026  0100               	movlb	0	; () banked
  2406  002028  6FE5               	movwf	pause@message& (0+255),b
  2407  00202A  0EFE               	movlw	high STR_3
  2408  00202C  0100               	movlb	0	; () banked
  2409  00202E  6FE6               	movwf	(pause@message+1)& (0+255),b
  2410  002030  ECE8  F028         	call	_pause	;wreg free
  2411                           
  2412                           ;main.c: 154: setAngle(padServo, padAngle_CLOSE);
  2413  002034  0E58               	movlw	low _padServo
  2414  002036  0100               	movlb	0	; () banked
  2415  002038  6FEC               	movwf	setAngle@motor& (0+255),b
  2416  00203A  0E01               	movlw	high _padServo
  2417  00203C  0100               	movlb	0	; () banked
  2418  00203E  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2419  002040  C134  F0EE         	movff	_padAngle_CLOSE,setAngle@angle
  2420  002044  C135  F0EF         	movff	_padAngle_CLOSE+1,setAngle@angle+1
  2421  002048  EC09  F021         	call	_setAngle	;wreg free
  2422                           
  2423                           ;main.c: 157: pause("read voltage?");
  2424  00204C  0ED6               	movlw	low STR_4
  2425  00204E  0100               	movlb	0	; () banked
  2426  002050  6FE5               	movwf	pause@message& (0+255),b
  2427  002052  0EFF               	movlw	high STR_4
  2428  002054  0100               	movlb	0	; () banked
  2429  002056  6FE6               	movwf	(pause@message+1)& (0+255),b
  2430  002058  ECE8  F028         	call	_pause	;wreg free
  2431                           
  2432                           ;main.c: 158: float Vcc = 4.61;
  2433  00205C  0E85               	movlw	133
  2434  00205E  0101               	movlb	1	; () banked
  2435  002060  6F21               	movwf	sortBattery@Vcc& (0+255),b
  2436  002062  0E93               	movlw	147
  2437  002064  0101               	movlb	1	; () banked
  2438  002066  6F22               	movwf	(sortBattery@Vcc+1)& (0+255),b
  2439  002068  0E40               	movlw	64
  2440  00206A  0101               	movlb	1	; () banked
  2441  00206C  6F23               	movwf	(sortBattery@Vcc+2)& (0+255),b
  2442                           
  2443                           ; BSR set to: 1
  2444                           ;main.c: 159: float resolution = (1<<10) - 1;
  2445  00206E  0EC0               	movlw	192
  2446  002070  0101               	movlb	1	; () banked
  2447  002072  6F24               	movwf	sortBattery@resolution& (0+255),b
  2448  002074  0E7F               	movlw	127
  2449  002076  0101               	movlb	1	; () banked
  2450  002078  6F25               	movwf	(sortBattery@resolution+1)& (0+255),b
  2451  00207A  0E44               	movlw	68
  2452  00207C  0101               	movlb	1	; () banked
  2453  00207E  6F26               	movwf	(sortBattery@resolution+2)& (0+255),b
  2454                           
  2455                           ; BSR set to: 1
  2456                           ;main.c: 161: int targetAngle;
  2457                           ;main.c: 162: int signal = digitalRead(padPin1)<<1;
  2458  002080  0E50               	movlw	low _padPin1
  2459  002082  0100               	movlb	0	; () banked
  2460  002084  6F80               	movwf	digitalRead@pin& (0+255),b
  2461  002086  0E01               	movlw	high _padPin1
  2462  002088  0100               	movlb	0	; () banked
  2463  00208A  6F81               	movwf	(digitalRead@pin+1)& (0+255),b
  2464  00208C  ECF3  F01B         	call	_digitalRead	;wreg free
  2465  002090  90D8               	bcf	status,0,c
  2466  002092  0100               	movlb	0	; () banked
  2467  002094  3580               	rlcf	?_digitalRead& (0+255),w,b
  2468  002096  0101               	movlb	1	; () banked
  2469  002098  6F29               	movwf	sortBattery@signal& (0+255),b
  2470  00209A  0100               	movlb	0	; () banked
  2471  00209C  3581               	rlcf	(?_digitalRead+1)& (0+255),w,b
  2472  00209E  0101               	movlb	1	; () banked
  2473  0020A0  6F2A               	movwf	(sortBattery@signal+1)& (0+255),b
  2474                           
  2475                           ; BSR set to: 1
  2476                           ;main.c: 163: signal |= digitalRead(padPin2);
  2477  0020A2  0E54               	movlw	low _padPin2
  2478  0020A4  0100               	movlb	0	; () banked
  2479  0020A6  6F80               	movwf	digitalRead@pin& (0+255),b
  2480  0020A8  0E01               	movlw	high _padPin2
  2481  0020AA  0100               	movlb	0	; () banked
  2482  0020AC  6F81               	movwf	(digitalRead@pin+1)& (0+255),b
  2483  0020AE  ECF3  F01B         	call	_digitalRead	;wreg free
  2484  0020B2  0100               	movlb	0	; () banked
  2485  0020B4  5180               	movf	?_digitalRead& (0+255),w,b
  2486  0020B6  0101               	movlb	1	; () banked
  2487  0020B8  1329               	iorwf	sortBattery@signal& (0+255),f,b
  2488  0020BA  0100               	movlb	0	; () banked
  2489  0020BC  5181               	movf	(?_digitalRead+1)& (0+255),w,b
  2490  0020BE  0101               	movlb	1	; () banked
  2491  0020C0  132A               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  2492                           
  2493                           ; BSR set to: 1
  2494                           ;main.c: 165: digitalWrite(AA_float, 1);
  2495  0020C2  0E44               	movlw	low _AA_float
  2496  0020C4  0100               	movlb	0	; () banked
  2497  0020C6  6F80               	movwf	digitalWrite@pin& (0+255),b
  2498  0020C8  0E01               	movlw	high _AA_float
  2499  0020CA  0100               	movlb	0	; () banked
  2500  0020CC  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2501  0020CE  0E00               	movlw	0
  2502  0020D0  0100               	movlb	0	; () banked
  2503  0020D2  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2504  0020D4  0E01               	movlw	1
  2505  0020D6  6F82               	movwf	digitalWrite@val& (0+255),b
  2506  0020D8  EC32  F01E         	call	_digitalWrite	;wreg free
  2507                           
  2508                           ;main.c: 166: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2509  0020DC  C124  F095         	movff	sortBattery@resolution,___ftdiv@f2
  2510  0020E0  C125  F096         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2511  0020E4  C126  F097         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2512  0020E8  C172  F080         	movff	_padPin3+2,analogRead@channel
  2513  0020EC  C173  F081         	movff	_padPin3+3,analogRead@channel+1
  2514  0020F0  EC94  F027         	call	_analogRead	;wreg free
  2515  0020F4  C080  F088         	movff	?_analogRead,___altoft@c
  2516  0020F8  C081  F089         	movff	?_analogRead+1,___altoft@c+1
  2517  0020FC  C082  F08A         	movff	?_analogRead+2,___altoft@c+2
  2518  002100  C083  F08B         	movff	?_analogRead+3,___altoft@c+3
  2519  002104  EC9C  F023         	call	___altoft	;wreg free
  2520  002108  C088  F092         	movff	?___altoft,___ftdiv@f1
  2521  00210C  C089  F093         	movff	?___altoft+1,___ftdiv@f1+1
  2522  002110  C08A  F094         	movff	?___altoft+2,___ftdiv@f1+2
  2523  002114  EC12  F01A         	call	___ftdiv	;wreg free
  2524  002118  C092  F0A1         	movff	?___ftdiv,___ftmul@f1
  2525  00211C  C093  F0A2         	movff	?___ftdiv+1,___ftmul@f1+1
  2526  002120  C094  F0A3         	movff	?___ftdiv+2,___ftmul@f1+2
  2527  002124  C121  F0A4         	movff	sortBattery@Vcc,___ftmul@f2
  2528  002128  C122  F0A5         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2529  00212C  C123  F0A6         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2530  002130  EC63  F019         	call	___ftmul	;wreg free
  2531  002134  C0A1  F12B         	movff	?___ftmul,sortBattery@V
  2532  002138  C0A2  F12C         	movff	?___ftmul+1,sortBattery@V+1
  2533  00213C  C0A3  F12D         	movff	?___ftmul+2,sortBattery@V+2
  2534                           
  2535                           ;main.c: 168: lcdClear();
  2536  002140  ECF7  F028         	call	_lcdClear	;wreg free
  2537                           
  2538                           ;main.c: 169: printf("sig: %d \nV: %f",signal,V);
  2539  002144  0EC7               	movlw	low STR_5
  2540  002146  0100               	movlb	0	; () banked
  2541  002148  6FD5               	movwf	printf@f& (0+255),b
  2542  00214A  0EFF               	movlw	high STR_5
  2543  00214C  0100               	movlb	0	; () banked
  2544  00214E  6FD6               	movwf	(printf@f+1)& (0+255),b
  2545  002150  C129  F0D7         	movff	sortBattery@signal,?_printf+2
  2546  002154  C12A  F0D8         	movff	sortBattery@signal+1,?_printf+3
  2547  002158  C12B  F0D9         	movff	sortBattery@V,?_printf+4
  2548  00215C  C12C  F0DA         	movff	sortBattery@V+1,?_printf+5
  2549  002160  C12D  F0DB         	movff	sortBattery@V+2,?_printf+6
  2550  002164  EC09  F000         	call	_printf	;wreg free
  2551                           
  2552                           ;main.c: 170: readKeypad();
  2553  002168  EC3F  F028         	call	_readKeypad	;wreg free
  2554                           
  2555                           ;main.c: 173: pause("set redirect angle?");
  2556  00216C  0E8A               	movlw	low STR_6
  2557  00216E  0100               	movlb	0	; () banked
  2558  002170  6FE5               	movwf	pause@message& (0+255),b
  2559  002172  0EFE               	movlw	high STR_6
  2560  002174  0100               	movlb	0	; () banked
  2561  002176  6FE6               	movwf	(pause@message+1)& (0+255),b
  2562  002178  ECE8  F028         	call	_pause	;wreg free
  2563                           
  2564                           ;main.c: 174: switch(signal){
  2565  00217C  D09C               	goto	l6232
  2566  00217E                     l6210:
  2567                           
  2568                           ;main.c: 177: digitalWrite(AA_float, 0);
  2569  00217E  0E44               	movlw	low _AA_float
  2570  002180  0100               	movlb	0	; () banked
  2571  002182  6F80               	movwf	digitalWrite@pin& (0+255),b
  2572  002184  0E01               	movlw	high _AA_float
  2573  002186  0100               	movlb	0	; () banked
  2574  002188  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2575  00218A  0E00               	movlw	0
  2576  00218C  0100               	movlb	0	; () banked
  2577  00218E  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2578  002190  0E00               	movlw	0
  2579  002192  6F82               	movwf	digitalWrite@val& (0+255),b
  2580  002194  EC32  F01E         	call	_digitalWrite	;wreg free
  2581                           
  2582                           ;main.c: 178: _delay((unsigned long)((1)*(10000000/4000.0)));
  2583  002198  0E04               	movlw	4
  2584  00219A  0100               	movlb	0	; () banked
  2585  00219C  6FF6               	movwf	??_sortBattery& (0+255),b
  2586  00219E  0E3D               	movlw	61
  2587  0021A0                     u7797:
  2588  0021A0  2EE8               	decfsz	wreg,f,c
  2589  0021A2  D7FE               	bra	u7797
  2590  0021A4  2FF6               	decfsz	??_sortBattery& (0+255),f,b
  2591  0021A6  D7FC               	bra	u7797
  2592  0021A8  D000               	nop2	
  2593                           
  2594                           ;main.c: 179: float V_float = analogRead(padPin3[1]) / resolution * Vcc;
  2595  0021AA  C124  F095         	movff	sortBattery@resolution,___ftdiv@f2
  2596  0021AE  C125  F096         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2597  0021B2  C126  F097         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2598  0021B6  C172  F080         	movff	_padPin3+2,analogRead@channel
  2599  0021BA  C173  F081         	movff	_padPin3+3,analogRead@channel+1
  2600  0021BE  EC94  F027         	call	_analogRead	;wreg free
  2601  0021C2  C080  F088         	movff	?_analogRead,___altoft@c
  2602  0021C6  C081  F089         	movff	?_analogRead+1,___altoft@c+1
  2603  0021CA  C082  F08A         	movff	?_analogRead+2,___altoft@c+2
  2604  0021CE  C083  F08B         	movff	?_analogRead+3,___altoft@c+3
  2605  0021D2  EC9C  F023         	call	___altoft	;wreg free
  2606  0021D6  C088  F092         	movff	?___altoft,___ftdiv@f1
  2607  0021DA  C089  F093         	movff	?___altoft+1,___ftdiv@f1+1
  2608  0021DE  C08A  F094         	movff	?___altoft+2,___ftdiv@f1+2
  2609  0021E2  EC12  F01A         	call	___ftdiv	;wreg free
  2610  0021E6  C092  F0A1         	movff	?___ftdiv,___ftmul@f1
  2611  0021EA  C093  F0A2         	movff	?___ftdiv+1,___ftmul@f1+1
  2612  0021EE  C094  F0A3         	movff	?___ftdiv+2,___ftmul@f1+2
  2613  0021F2  C121  F0A4         	movff	sortBattery@Vcc,___ftmul@f2
  2614  0021F6  C122  F0A5         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2615  0021FA  C123  F0A6         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2616  0021FE  EC63  F019         	call	___ftmul	;wreg free
  2617  002202  C0A1  F11E         	movff	?___ftmul,sortBattery@V_float
  2618  002206  C0A2  F11F         	movff	?___ftmul+1,sortBattery@V_float+1
  2619  00220A  C0A3  F120         	movff	?___ftmul+2,sortBattery@V_float+2
  2620                           
  2621                           ;main.c: 180: if(V_float < 0.1){
  2622  00220E  C11E  F080         	movff	sortBattery@V_float,___ftge@ff1
  2623  002212  C11F  F081         	movff	sortBattery@V_float+1,___ftge@ff1+1
  2624  002216  C120  F082         	movff	sortBattery@V_float+2,___ftge@ff1+2
  2625  00221A  0ECD               	movlw	205
  2626  00221C  0100               	movlb	0	; () banked
  2627  00221E  6F83               	movwf	___ftge@ff2& (0+255),b
  2628  002220  0ECC               	movlw	204
  2629  002222  0100               	movlb	0	; () banked
  2630  002224  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  2631  002226  0E3D               	movlw	61
  2632  002228  0100               	movlb	0	; () banked
  2633  00222A  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  2634  00222C  EC6F  F021         	call	___ftge	;wreg free
  2635  002230  0100               	movlb	0	; () banked
  2636  002232  B0D8               	btfsc	status,0,c
  2637  002234  D00F               	goto	l6222
  2638                           
  2639                           ; BSR set to: 0
  2640                           ;main.c: 181: if(V > V_LIM_AA) targetAngle = redirectAngle_AA;
  2641  002236  C17B  F080         	movff	_V_LIM_AA,___ftge@ff1
  2642  00223A  C17C  F081         	movff	_V_LIM_AA+1,___ftge@ff1+1
  2643  00223E  C17D  F082         	movff	_V_LIM_AA+2,___ftge@ff1+2
  2644  002242  C12B  F083         	movff	sortBattery@V,___ftge@ff2
  2645  002246  C12C  F084         	movff	sortBattery@V+1,___ftge@ff2+1
  2646  00224A  C12D  F085         	movff	sortBattery@V+2,___ftge@ff2+2
  2647  00224E  EC6F  F021         	call	___ftge	;wreg free
  2648  002252  D024               	goto	L14
  2649  002254                     l6222:
  2650                           
  2651                           ; BSR set to: 0
  2652                           ;main.c: 187: if(V > V_LIM_9V) targetAngle = redirectAngle_9V;
  2653  002254  C178  F080         	movff	_V_LIM_9V,___ftge@ff1
  2654  002258  C179  F081         	movff	_V_LIM_9V+1,___ftge@ff1+1
  2655  00225C  C17A  F082         	movff	_V_LIM_9V+2,___ftge@ff1+2
  2656  002260  C12B  F083         	movff	sortBattery@V,___ftge@ff2
  2657  002264  C12C  F084         	movff	sortBattery@V+1,___ftge@ff2+1
  2658  002268  C12D  F085         	movff	sortBattery@V+2,___ftge@ff2+2
  2659  00226C  EC6F  F021         	call	___ftge	;wreg free
  2660  002270  0100               	movlb	0	; () banked
  2661  002272  B0D8               	btfsc	status,0,c
  2662  002274  D01B               	goto	l142
  2663                           
  2664                           ; BSR set to: 0
  2665  002276  C13C  F127         	movff	_redirectAngle_9V,sortBattery@targetAngle
  2666  00227A  C13D  F128         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  2667  00227E  D02F               	goto	l6234
  2668  002280                     l6226:
  2669                           
  2670                           ; BSR set to: 0
  2671                           ;main.c: 191: if(V > V_LIM_C) targetAngle = redirectAngle_AA;
  2672  002280  C17E  F080         	movff	_V_LIM_C,___ftge@ff1
  2673  002284  C17F  F081         	movff	_V_LIM_C+1,___ftge@ff1+1
  2674  002288  C180  F082         	movff	_V_LIM_C+2,___ftge@ff1+2
  2675  00228C  C12B  F083         	movff	sortBattery@V,___ftge@ff2
  2676  002290  C12C  F084         	movff	sortBattery@V+1,___ftge@ff2+1
  2677  002294  C12D  F085         	movff	sortBattery@V+2,___ftge@ff2+2
  2678  002298  EC6F  F021         	call	___ftge	;wreg free
  2679  00229C                     L14:
  2680  00229C  0100               	movlb	0	; () banked
  2681  00229E  B0D8               	btfsc	status,0,c
  2682  0022A0  D005               	goto	l142
  2683                           
  2684                           ; BSR set to: 0
  2685  0022A2  C13E  F127         	movff	_redirectAngle_AA,sortBattery@targetAngle
  2686  0022A6  C13F  F128         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  2687  0022AA  D019               	goto	l6234
  2688  0022AC                     l142:
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;main.c: 192: else targetAngle = redirectAngle_OTHER;
  2692  0022AC  C142  F127         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  2693  0022B0  C143  F128         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  2694                           
  2695                           ; BSR set to: 0
  2696                           ;main.c: 194: }
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;main.c: 193: break;
  2700  0022B4  D014               	goto	l6234
  2701  0022B6                     l6232:
  2702  0022B6  C129  F0F6         	movff	sortBattery@signal,??_sortBattery
  2703  0022BA  C12A  F0F7         	movff	sortBattery@signal+1,??_sortBattery+1
  2704                           
  2705                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2706                           ; Switch size 1, requested type "space"
  2707                           ; Number of cases is 1, Range of values is 0 to 0
  2708                           ; switch strategies available:
  2709                           ; Name         Instructions Cycles
  2710                           ; simple_byte            4     3 (average)
  2711                           ;	Chosen strategy is simple_byte
  2712  0022BE  0100               	movlb	0	; () banked
  2713  0022C0  51F7               	movf	(??_sortBattery+1)& (0+255),w,b
  2714  0022C2  0A00               	xorlw	0	; case 0
  2715  0022C4  A4D8               	btfss	status,2,c
  2716  0022C6  D00B               	goto	l6234
  2717                           
  2718                           ; BSR set to: 0
  2719                           ; Switch size 1, requested type "space"
  2720                           ; Number of cases is 3, Range of values is 0 to 2
  2721                           ; switch strategies available:
  2722                           ; Name         Instructions Cycles
  2723                           ; simple_byte           10     6 (average)
  2724                           ;	Chosen strategy is simple_byte
  2725  0022C8  0100               	movlb	0	; () banked
  2726  0022CA  51F6               	movf	??_sortBattery& (0+255),w,b
  2727  0022CC  0A00               	xorlw	0	; case 0
  2728  0022CE  B4D8               	btfsc	status,2,c
  2729  0022D0  D756               	goto	l6210
  2730  0022D2  0A01               	xorlw	1	; case 1
  2731  0022D4  B4D8               	btfsc	status,2,c
  2732  0022D6  D7BE               	goto	l6222
  2733  0022D8  0A03               	xorlw	3	; case 2
  2734  0022DA  B4D8               	btfsc	status,2,c
  2735  0022DC  D7D1               	goto	l6226
  2736  0022DE                     l6234:
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;main.c: 196: setAngle(redirectingServo, targetAngle);
  2740  0022DE  0E5C               	movlw	low _redirectingServo
  2741  0022E0  0100               	movlb	0	; () banked
  2742  0022E2  6FEC               	movwf	setAngle@motor& (0+255),b
  2743  0022E4  0E01               	movlw	high _redirectingServo
  2744  0022E6  0100               	movlb	0	; () banked
  2745  0022E8  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2746  0022EA  C127  F0EE         	movff	sortBattery@targetAngle,setAngle@angle
  2747  0022EE  C128  F0EF         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  2748  0022F2  EC09  F021         	call	_setAngle	;wreg free
  2749                           
  2750                           ;main.c: 199: pause("release battery?");
  2751  0022F6  0E96               	movlw	low STR_7
  2752  0022F8  0100               	movlb	0	; () banked
  2753  0022FA  6FE5               	movwf	pause@message& (0+255),b
  2754  0022FC  0EFF               	movlw	high STR_7
  2755  0022FE  0100               	movlb	0	; () banked
  2756  002300  6FE6               	movwf	(pause@message+1)& (0+255),b
  2757  002302  ECE8  F028         	call	_pause	;wreg free
  2758                           
  2759                           ;main.c: 200: setAngle(padServo, padAngle_OPEN);
  2760  002306  0E58               	movlw	low _padServo
  2761  002308  0100               	movlb	0	; () banked
  2762  00230A  6FEC               	movwf	setAngle@motor& (0+255),b
  2763  00230C  0E01               	movlw	high _padServo
  2764  00230E  0100               	movlb	0	; () banked
  2765  002310  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2766  002312  C138  F0EE         	movff	_padAngle_OPEN,setAngle@angle
  2767  002316  C139  F0EF         	movff	_padAngle_OPEN+1,setAngle@angle+1
  2768  00231A  EC09  F021         	call	_setAngle	;wreg free
  2769                           
  2770                           ;main.c: 203: pause("reset the pad?");
  2771  00231E  0EB8               	movlw	low STR_8
  2772  002320  0100               	movlb	0	; () banked
  2773  002322  6FE5               	movwf	pause@message& (0+255),b
  2774  002324  0EFF               	movlw	high STR_8
  2775  002326  0100               	movlb	0	; () banked
  2776  002328  6FE6               	movwf	(pause@message+1)& (0+255),b
  2777  00232A  ECE8  F028         	call	_pause	;wreg free
  2778                           
  2779                           ;main.c: 204: setAngle(padServo, padAngle_NEUTRAL);
  2780  00232E  0E58               	movlw	low _padServo
  2781  002330  0100               	movlb	0	; () banked
  2782  002332  6FEC               	movwf	setAngle@motor& (0+255),b
  2783  002334  0E01               	movlw	high _padServo
  2784  002336  0100               	movlb	0	; () banked
  2785  002338  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2786  00233A  C136  F0EE         	movff	_padAngle_NEUTRAL,setAngle@angle
  2787  00233E  C137  F0EF         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  2788  002342  EC09  F021         	call	_setAngle	;wreg free
  2789                           
  2790                           ;main.c: 207: pause("conveyor & \ncylinder on?");
  2791  002346  0E71               	movlw	low STR_9
  2792  002348  0100               	movlb	0	; () banked
  2793  00234A  6FE5               	movwf	pause@message& (0+255),b
  2794  00234C  0EFE               	movlw	high STR_9
  2795  00234E  0100               	movlb	0	; () banked
  2796  002350  6FE6               	movwf	(pause@message+1)& (0+255),b
  2797  002352  ECE8  F028         	call	_pause	;wreg free
  2798                           
  2799                           ;main.c: 208: setAngle(conveyorServo, 0);
  2800  002356  0E48               	movlw	low _conveyorServo
  2801  002358  0100               	movlb	0	; () banked
  2802  00235A  6FEC               	movwf	setAngle@motor& (0+255),b
  2803  00235C  0E01               	movlw	high _conveyorServo
  2804  00235E  0100               	movlb	0	; () banked
  2805  002360  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2806  002362  0E00               	movlw	0
  2807  002364  0100               	movlb	0	; () banked
  2808  002366  6FEF               	movwf	(setAngle@angle+1)& (0+255),b
  2809  002368  0E00               	movlw	0
  2810  00236A  6FEE               	movwf	setAngle@angle& (0+255),b
  2811  00236C  EC09  F021         	call	_setAngle	;wreg free
  2812                           
  2813                           ;main.c: 209: digitalWrite(cylinderMotor, 1);
  2814  002370  0E4C               	movlw	low _cylinderMotor
  2815  002372  0100               	movlb	0	; () banked
  2816  002374  6F80               	movwf	digitalWrite@pin& (0+255),b
  2817  002376  0E01               	movlw	high _cylinderMotor
  2818  002378  0100               	movlb	0	; () banked
  2819  00237A  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2820  00237C  0E00               	movlw	0
  2821  00237E  0100               	movlb	0	; () banked
  2822  002380  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2823  002382  0E01               	movlw	1
  2824  002384  6F82               	movwf	digitalWrite@val& (0+255),b
  2825  002386  EC32  F01E         	call	_digitalWrite	;wreg free
  2826  00238A  0012               	return		;funcret
  2827  00238C                     __end_of_sortBattery:
  2828                           	opt stack 0
  2829                           tblptru	equ	0xFF8
  2830                           tblptrh	equ	0xFF7
  2831                           tblptrl	equ	0xFF6
  2832                           tablat	equ	0xFF5
  2833                           postinc0	equ	0xFEE
  2834                           wreg	equ	0xFE8
  2835                           postdec1	equ	0xFE5
  2836                           fsr1l	equ	0xFE1
  2837                           status	equ	0xFD8
  2838                           
  2839 ;; *************** function _pause *****************
  2840 ;; Defined at:
  2841 ;;		line 279 in file "main.c"
  2842 ;; Parameters:    Size  Location     Type
  2843 ;;  message         2  101[BANK0 ] PTR unsigned char 
  2844 ;;		 -> STR_9(25), STR_8(15), STR_7(17), STR_6(20), 
  2845 ;;		 -> STR_4(14), STR_3(20), 
  2846 ;; Auto vars:     Size  Location     Type
  2847 ;;		None
  2848 ;; Return value:  Size  Location     Type
  2849 ;;                  1    wreg      void 
  2850 ;; Registers used:
  2851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2852 ;; Tracked objects:
  2853 ;;		On entry : 0/0
  2854 ;;		On exit  : 0/0
  2855 ;;		Unchanged: 0/0
  2856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2857 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2860 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2861 ;;Total ram usage:        2 bytes
  2862 ;; Hardware stack levels used:    1
  2863 ;; Hardware stack levels required when called:   11
  2864 ;; This function calls:
  2865 ;;		_lcdClear
  2866 ;;		_printf
  2867 ;;		_readKeypad
  2868 ;; This function is called by:
  2869 ;;		_sortBattery
  2870 ;; This function uses a non-reentrant model
  2871 ;;
  2872                           
  2873                           	psect	text2
  2874  0051D0                     __ptext2:
  2875                           	opt stack 0
  2876  0051D0                     _pause:
  2877                           	opt stack 18
  2878                           
  2879                           ;main.c: 280: lcdClear();
  2880                           
  2881                           ;incstack = 0
  2882  0051D0  ECF7  F028         	call	_lcdClear	;wreg free
  2883                           
  2884                           ;main.c: 281: printf(message);
  2885  0051D4  C0E5  F0D5         	movff	pause@message,printf@f
  2886  0051D8  C0E6  F0D6         	movff	pause@message+1,printf@f+1
  2887  0051DC  EC09  F000         	call	_printf	;wreg free
  2888                           
  2889                           ;main.c: 282: readKeypad();
  2890  0051E0  EC3F  F028         	call	_readKeypad	;wreg free
  2891  0051E4  0012               	return		;funcret
  2892  0051E6                     __end_of_pause:
  2893                           	opt stack 0
  2894                           tblptru	equ	0xFF8
  2895                           tblptrh	equ	0xFF7
  2896                           tblptrl	equ	0xFF6
  2897                           tablat	equ	0xFF5
  2898                           postinc0	equ	0xFEE
  2899                           wreg	equ	0xFE8
  2900                           postdec1	equ	0xFE5
  2901                           fsr1l	equ	0xFE1
  2902                           status	equ	0xFD8
  2903                           
  2904 ;; *************** function _readKeypad *****************
  2905 ;; Defined at:
  2906 ;;		line 36 in file "keypad.c"
  2907 ;; Parameters:    Size  Location     Type
  2908 ;;		None
  2909 ;; Auto vars:     Size  Location     Type
  2910 ;;  key             1    0[BANK0 ] unsigned char 
  2911 ;; Return value:  Size  Location     Type
  2912 ;;                  1    wreg      unsigned char 
  2913 ;; Registers used:
  2914 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2915 ;; Tracked objects:
  2916 ;;		On entry : 0/0
  2917 ;;		On exit  : 0/0
  2918 ;;		Unchanged: 0/0
  2919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2921 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2923 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2924 ;;Total ram usage:        1 bytes
  2925 ;; Hardware stack levels used:    1
  2926 ;; Hardware stack levels required when called:    6
  2927 ;; This function calls:
  2928 ;;		Nothing
  2929 ;; This function is called by:
  2930 ;;		_sortBattery
  2931 ;;		_pause
  2932 ;;		_showInterface
  2933 ;; This function uses a non-reentrant model
  2934 ;;
  2935                           
  2936                           	psect	text3
  2937  00507E                     __ptext3:
  2938                           	opt stack 0
  2939  00507E                     _readKeypad:
  2940                           	opt stack 23
  2941  00507E                     l222:
  2942  00507E  A281               	btfss	3969,1,c	;volatile
  2943  005080  D7FE               	goto	l222
  2944                           
  2945                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  2946  005082  3881               	swapf	3969,w,c	;volatile
  2947  005084  0B0F               	andlw	15
  2948  005086  0B0F               	andlw	15
  2949  005088  0100               	movlb	0	; () banked
  2950  00508A  6F80               	movwf	readKeypad@key& (0+255),b
  2951  00508C                     l225:
  2952  00508C  B281               	btfsc	3969,1,c	;volatile
  2953  00508E  D7FE               	goto	l225
  2954                           
  2955                           ;keypad.c: 40: return keys[key];
  2956  005090  0100               	movlb	0	; () banked
  2957  005092  5180               	movf	readKeypad@key& (0+255),w,b
  2958  005094  0D01               	mullw	1
  2959  005096  0E59               	movlw	low _keys
  2960  005098  24F3               	addwf	prodl,w,c
  2961  00509A  6EF6               	movwf	tblptrl,c
  2962  00509C  0EFE               	movlw	high _keys
  2963  00509E  20F4               	addwfc	prodh,w,c
  2964  0050A0  6EF7               	movwf	tblptrh,c
  2965  0050A2                     	if	0	;There are less than 3 active tblptr bytes
  2966  0050A2                     	endif
  2967  0050A2  0008               	tblrd		*
  2968  0050A4  50F5               	movf	tablat,w,c
  2969  0050A6  0012               	return	
  2970  0050A8                     __end_of_readKeypad:
  2971                           	opt stack 0
  2972                           tblptru	equ	0xFF8
  2973                           tblptrh	equ	0xFF7
  2974                           tblptrl	equ	0xFF6
  2975                           tablat	equ	0xFF5
  2976                           prodh	equ	0xFF4
  2977                           prodl	equ	0xFF3
  2978                           postinc0	equ	0xFEE
  2979                           wreg	equ	0xFE8
  2980                           postdec1	equ	0xFE5
  2981                           fsr1l	equ	0xFE1
  2982                           status	equ	0xFD8
  2983                           
  2984 ;; *************** function _printf *****************
  2985 ;; Defined at:
  2986 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;  f               2   85[BANK0 ] PTR const unsigned char 
  2989 ;;		 -> STR_23(17), STR_22(18), STR_21(17), STR_20(18), 
  2990 ;;		 -> STR_19(17), STR_18(19), STR_17(17), STR_16(18), 
  2991 ;;		 -> STR_15(17), STR_14(18), STR_13(17), STR_12(18), 
  2992 ;;		 -> STR_11(8), STR_10(11), STR_9(25), STR_8(15), 
  2993 ;;		 -> STR_7(17), STR_6(20), STR_5(15), STR_4(14), 
  2994 ;;		 -> STR_3(20), STR_2(17), STR_1(8), 
  2995 ;; Auto vars:     Size  Location     Type
  2996 ;;  idx             1    5[BANK1 ] unsigned char 
  2997 ;;  val             4   18[BANK1 ] unsigned long 
  2998 ;;  tmpval          4   12[BANK1 ] struct .
  2999 ;;  fval            3   24[BANK1 ] struct .
  3000 ;;  flag            2   27[BANK1 ] unsigned short 
  3001 ;;  width           2   22[BANK1 ] int 
  3002 ;;  exp             2   16[BANK1 ] int 
  3003 ;;  prec            2   10[BANK1 ] int 
  3004 ;;  ap              2    8[BANK1 ] PTR void [1]
  3005 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3006 ;;  len             2    6[BANK1 ] unsigned int 
  3007 ;;  cp              2    3[BANK1 ] PTR const unsigned char 
  3008 ;;		 -> printf@c(1), 
  3009 ;;  c               1   29[BANK1 ] char 
  3010 ;;  d               1    0        unsigned char 
  3011 ;; Return value:  Size  Location     Type
  3012 ;;                  2   85[BANK0 ] int 
  3013 ;; Registers used:
  3014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3015 ;; Tracked objects:
  3016 ;;		On entry : 0/0
  3017 ;;		On exit  : 0/0
  3018 ;;		Unchanged: 0/0
  3019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3020 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3021 ;;      Locals:         0       0      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3022 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3023 ;;      Totals:         0      16      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3024 ;;Total ram usage:       46 bytes
  3025 ;; Hardware stack levels used:    1
  3026 ;; Hardware stack levels required when called:   10
  3027 ;; This function calls:
  3028 ;;		___awdiv
  3029 ;;		___ftadd
  3030 ;;		___ftge
  3031 ;;		___ftmul
  3032 ;;		___ftneg
  3033 ;;		___ftsub
  3034 ;;		___fttol
  3035 ;;		___lldiv
  3036 ;;		___llmod
  3037 ;;		___lltoft
  3038 ;;		___wmul
  3039 ;;		__div_to_l_
  3040 ;;		__tdiv_to_l_
  3041 ;;		_fround
  3042 ;;		_isdigit
  3043 ;;		_putch
  3044 ;;		_scale
  3045 ;; This function is called by:
  3046 ;;		_main
  3047 ;;		_sortBattery
  3048 ;;		_pause
  3049 ;;		_testFrequency
  3050 ;;		_dateTime
  3051 ;;		_mainMenu
  3052 ;;		_runSelect
  3053 ;;		_runMenu
  3054 ;;		_runTime
  3055 ;;		_runStats
  3056 ;; This function uses a non-reentrant model
  3057 ;;
  3058                           
  3059                           	psect	text4
  3060  000012                     __ptext4:
  3061                           	opt stack 0
  3062  000012                     _printf:
  3063                           	opt stack 19
  3064                           
  3065                           ;doprnt.c: 466: va_list ap;
  3066                           ;doprnt.c: 499: signed char c;
  3067                           ;doprnt.c: 501: int width;
  3068                           ;doprnt.c: 504: int prec;
  3069                           ;doprnt.c: 508: unsigned short flag;
  3070                           ;doprnt.c: 515: char d;
  3071                           ;doprnt.c: 516: double fval;
  3072                           ;doprnt.c: 517: int exp;
  3073                           ;doprnt.c: 523: union {
  3074                           ;doprnt.c: 524: unsigned long vd;
  3075                           ;doprnt.c: 525: double integ;
  3076                           ;doprnt.c: 526: } tmpval;
  3077                           ;doprnt.c: 528: unsigned long val;
  3078                           ;doprnt.c: 529: unsigned len;
  3079                           ;doprnt.c: 530: const char * cp;
  3080                           ;doprnt.c: 533: *ap = __va_start();
  3081                           
  3082                           ; BSR set to: 0
  3083                           ;incstack = 0
  3084  000012  0ED7               	movlw	low (?_printf+2)
  3085  000014  0101               	movlb	1	; () banked
  3086  000016  6F08               	movwf	printf@ap& (0+255),b
  3087  000018  0E00               	movlw	high (?_printf+2)
  3088  00001A  0101               	movlb	1	; () banked
  3089  00001C  6F09               	movwf	(printf@ap+1)& (0+255),b
  3090                           
  3091                           ;doprnt.c: 536: while(c = *f++) {
  3092  00001E  EF55  F006         	goto	l5408
  3093  000022                     l5086:
  3094                           
  3095                           ; BSR set to: 1
  3096                           ;doprnt.c: 538: if(c != '%')
  3097  000022  0E25               	movlw	37
  3098  000024  0101               	movlb	1	; () banked
  3099  000026  191D               	xorwf	printf@c& (0+255),w,b
  3100  000028  B4D8               	btfsc	status,2,c
  3101  00002A  D006               	goto	l5090
  3102                           
  3103                           ; BSR set to: 1
  3104                           ;doprnt.c: 540: {
  3105                           ;doprnt.c: 541: (putch(c) );
  3106  00002C  0101               	movlb	1	; () banked
  3107  00002E  511D               	movf	printf@c& (0+255),w,b
  3108  000030  EC7E  F028         	call	_putch
  3109                           
  3110                           ;doprnt.c: 542: continue;
  3111  000034  EF55  F006         	goto	l5408
  3112  000038                     l5090:
  3113                           
  3114                           ;doprnt.c: 543: }
  3115                           ;doprnt.c: 546: width = 0;
  3116  000038  0E00               	movlw	0
  3117  00003A  0101               	movlb	1	; () banked
  3118  00003C  6F17               	movwf	(printf@width+1)& (0+255),b
  3119  00003E  0E00               	movlw	0
  3120  000040  6F16               	movwf	printf@width& (0+255),b
  3121                           
  3122                           ;doprnt.c: 548: flag = 0;
  3123  000042  0E00               	movlw	0
  3124  000044  0101               	movlb	1	; () banked
  3125  000046  6F1C               	movwf	(printf@flag+1)& (0+255),b
  3126  000048  0E00               	movlw	0
  3127  00004A  6F1B               	movwf	printf@flag& (0+255),b
  3128                           
  3129                           ; BSR set to: 1
  3130                           ;doprnt.c: 551: switch(*f) {
  3131                           
  3132                           ;doprnt.c: 550: for(;;) {
  3133  00004C  D005               	goto	l5096
  3134  00004E                     l5092:
  3135                           
  3136                           ;doprnt.c: 580: flag |= 0x04;
  3137  00004E  0101               	movlb	1	; () banked
  3138  000050  851B               	bsf	printf@flag& (0+255),2,b
  3139                           
  3140                           ;doprnt.c: 581: f++;
  3141  000052  0100               	movlb	0	; () banked
  3142  000054  4BD5               	infsnz	printf@f& (0+255),f,b
  3143  000056  2BD6               	incf	(printf@f+1)& (0+255),f,b
  3144  000058                     l5096:
  3145  000058  C0D5  FFF6         	movff	printf@f,tblptrl
  3146  00005C  C0D6  FFF7         	movff	printf@f+1,tblptrh
  3147  000060                     	if	0	;tblptru may be non-zero
  3148  000060                     	endif
  3149  000060                     	if	0	;tblptru may be non-zero
  3150  000060                     	endif
  3151  000060  0008               	tblrd		*
  3152  000062  50F5               	movf	tablat,w,c
  3153                           
  3154                           ; Switch size 1, requested type "space"
  3155                           ; Number of cases is 1, Range of values is 48 to 48
  3156                           ; switch strategies available:
  3157                           ; Name         Instructions Cycles
  3158                           ; simple_byte            4     3 (average)
  3159                           ;	Chosen strategy is simple_byte
  3160  000064  0A30               	xorlw	48	; case 48
  3161  000066  B4D8               	btfsc	status,2,c
  3162  000068  D7F2               	goto	l5092
  3163                           
  3164                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3165                           
  3166                           ;doprnt.c: 586: }
  3167                           
  3168                           ;doprnt.c: 585: break;
  3169  00006A  C0D5  FFF6         	movff	printf@f,tblptrl
  3170  00006E  C0D6  FFF7         	movff	printf@f+1,tblptrh
  3171  000072                     	if	0	;tblptru may be non-zero
  3172  000072                     	endif
  3173  000072                     	if	0	;tblptru may be non-zero
  3174  000072                     	endif
  3175  000072  0008               	tblrd		*
  3176  000074  50F5               	movf	tablat,w,c
  3177  000076  EC54  F028         	call	_isdigit
  3178  00007A  A0D8               	btfss	status,0,c
  3179  00007C  D0A1               	goto	l5142
  3180                           
  3181                           ;doprnt.c: 598: width = 0;
  3182  00007E  0E00               	movlw	0
  3183  000080  0101               	movlb	1	; () banked
  3184  000082  6F17               	movwf	(printf@width+1)& (0+255),b
  3185  000084  0E00               	movlw	0
  3186  000086  6F16               	movwf	printf@width& (0+255),b
  3187  000088                     l5102:
  3188                           
  3189                           ;doprnt.c: 600: width *= 10;
  3190  000088  C116  F08E         	movff	printf@width,___wmul@multiplier
  3191  00008C  C117  F08F         	movff	printf@width+1,___wmul@multiplier+1
  3192  000090  0E00               	movlw	0
  3193  000092  0100               	movlb	0	; () banked
  3194  000094  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3195  000096  0E0A               	movlw	10
  3196  000098  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3197  00009A  ECF5  F027         	call	___wmul	;wreg free
  3198  00009E  C08E  F116         	movff	?___wmul,printf@width
  3199  0000A2  C08F  F117         	movff	?___wmul+1,printf@width+1
  3200                           
  3201                           ;doprnt.c: 601: width += *f++ - '0';
  3202  0000A6  0ED0               	movlw	208
  3203  0000A8  0100               	movlb	0	; () banked
  3204  0000AA  6FDF               	movwf	??_printf& (0+255),b
  3205  0000AC  0EFF               	movlw	255
  3206  0000AE  0100               	movlb	0	; () banked
  3207  0000B0  6FE0               	movwf	(??_printf+1)& (0+255),b
  3208  0000B2  C0D5  FFF6         	movff	printf@f,tblptrl
  3209  0000B6  C0D6  FFF7         	movff	printf@f+1,tblptrh
  3210  0000BA                     	if	0	;tblptru may be non-zero
  3211  0000BA                     	endif
  3212  0000BA                     	if	0	;tblptru may be non-zero
  3213  0000BA                     	endif
  3214  0000BA  0008               	tblrd		*
  3215  0000BC  50F5               	movf	tablat,w,c
  3216  0000BE  0100               	movlb	0	; () banked
  3217  0000C0  6FE1               	movwf	(??_printf+2)& (0+255),b
  3218  0000C2  6BE2               	clrf	(??_printf+3)& (0+255),b
  3219  0000C4  0100               	movlb	0	; () banked
  3220  0000C6  51DF               	movf	??_printf& (0+255),w,b
  3221  0000C8  0100               	movlb	0	; () banked
  3222  0000CA  27E1               	addwf	(??_printf+2)& (0+255),f,b
  3223  0000CC  0100               	movlb	0	; () banked
  3224  0000CE  51E0               	movf	(??_printf+1)& (0+255),w,b
  3225  0000D0  0100               	movlb	0	; () banked
  3226  0000D2  23E2               	addwfc	(??_printf+3)& (0+255),f,b
  3227  0000D4  0100               	movlb	0	; () banked
  3228  0000D6  51E1               	movf	(??_printf+2)& (0+255),w,b
  3229  0000D8  0101               	movlb	1	; () banked
  3230  0000DA  2716               	addwf	printf@width& (0+255),f,b
  3231  0000DC  0100               	movlb	0	; () banked
  3232  0000DE  51E2               	movf	(??_printf+3)& (0+255),w,b
  3233  0000E0  0101               	movlb	1	; () banked
  3234  0000E2  2317               	addwfc	(printf@width+1)& (0+255),f,b
  3235                           
  3236                           ; BSR set to: 1
  3237  0000E4  0100               	movlb	0	; () banked
  3238  0000E6  4BD5               	infsnz	printf@f& (0+255),f,b
  3239  0000E8  2BD6               	incf	(printf@f+1)& (0+255),f,b
  3240                           
  3241                           ; BSR set to: 0
  3242                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3243  0000EA  C0D5  FFF6         	movff	printf@f,tblptrl
  3244  0000EE  C0D6  FFF7         	movff	printf@f+1,tblptrh
  3245  0000F2                     	if	0	;tblptru may be non-zero
  3246  0000F2                     	endif
  3247  0000F2                     	if	0	;tblptru may be non-zero
  3248  0000F2                     	endif
  3249  0000F2  0008               	tblrd		*
  3250  0000F4  50F5               	movf	tablat,w,c
  3251  0000F6  EC54  F028         	call	_isdigit
  3252  0000FA  A0D8               	btfss	status,0,c
  3253  0000FC  D061               	goto	l5142
  3254  0000FE  D7C4               	goto	l5102
  3255  000100                     l5110:
  3256                           
  3257                           ;doprnt.c: 643: flag |= 0x10;
  3258  000100  0101               	movlb	1	; () banked
  3259  000102  891B               	bsf	printf@flag& (0+255),4,b
  3260                           
  3261                           ;doprnt.c: 644: goto loop;
  3262  000104  D05D               	goto	l5142
  3263  000106                     l5112:
  3264                           
  3265                           ; BSR set to: 1
  3266                           ;doprnt.c: 663: flag |= 0x400;
  3267  000106  0101               	movlb	1	; () banked
  3268  000108  851C               	bsf	(printf@flag+1)& (0+255),2,b
  3269                           
  3270                           ; BSR set to: 1
  3271                           ;doprnt.c: 698: case 'i':
  3272                           ;doprnt.c: 699: break;
  3273                           
  3274                           ; BSR set to: 1
  3275                           
  3276                           ;doprnt.c: 697: case 'd':
  3277                           
  3278                           ;doprnt.c: 664: break;
  3279  00010A  D07C               	goto	l5144
  3280  00010C                     l5114:
  3281                           
  3282                           ; BSR set to: 1
  3283                           ;doprnt.c: 721: flag |= 0x80;
  3284  00010C  0101               	movlb	1	; () banked
  3285  00010E  8F1B               	bsf	printf@flag& (0+255),7,b
  3286                           
  3287                           ;doprnt.c: 723: break;
  3288  000110  D079               	goto	l5144
  3289  000112                     l5116:
  3290                           
  3291                           ; BSR set to: 1
  3292                           ;doprnt.c: 757: if(width > len)
  3293  000112  0101               	movlb	1	; () banked
  3294  000114  5116               	movf	printf@width& (0+255),w,b
  3295  000116  0101               	movlb	1	; () banked
  3296  000118  5D06               	subwf	printf@len& (0+255),w,b
  3297  00011A  0101               	movlb	1	; () banked
  3298  00011C  5117               	movf	(printf@width+1)& (0+255),w,b
  3299  00011E  0101               	movlb	1	; () banked
  3300  000120  5907               	subwfb	(printf@len+1)& (0+255),w,b
  3301  000122  B0D8               	btfsc	status,0,c
  3302  000124  D009               	goto	l5120
  3303                           
  3304                           ; BSR set to: 1
  3305                           ;doprnt.c: 758: width -= len;
  3306  000126  0101               	movlb	1	; () banked
  3307  000128  5106               	movf	printf@len& (0+255),w,b
  3308  00012A  0101               	movlb	1	; () banked
  3309  00012C  5F16               	subwf	printf@width& (0+255),f,b
  3310  00012E  0101               	movlb	1	; () banked
  3311  000130  5107               	movf	(printf@len+1)& (0+255),w,b
  3312  000132  0101               	movlb	1	; () banked
  3313  000134  5B17               	subwfb	(printf@width+1)& (0+255),f,b
  3314  000136  D009               	goto	l5124
  3315  000138                     l5120:
  3316                           
  3317                           ; BSR set to: 1
  3318                           ;doprnt.c: 759: else
  3319                           ;doprnt.c: 760: width = 0;
  3320  000138  0E00               	movlw	0
  3321  00013A  0101               	movlb	1	; () banked
  3322  00013C  6F17               	movwf	(printf@width+1)& (0+255),b
  3323  00013E  0E00               	movlw	0
  3324  000140  6F16               	movwf	printf@width& (0+255),b
  3325                           
  3326                           ; BSR set to: 1
  3327                           ;doprnt.c: 764: while(width--)
  3328  000142  D003               	goto	l5124
  3329  000144                     l5122:
  3330                           
  3331                           ; BSR set to: 1
  3332                           ;doprnt.c: 765: (putch(' ') );
  3333  000144  0E20               	movlw	32
  3334  000146  EC7E  F028         	call	_putch
  3335  00014A                     l5124:
  3336  00014A  0101               	movlb	1	; () banked
  3337  00014C  0716               	decf	printf@width& (0+255),f,b
  3338  00014E  A0D8               	btfss	status,0,c
  3339  000150  0717               	decf	(printf@width+1)& (0+255),f,b
  3340  000152  0101               	movlb	1	; () banked
  3341  000154  2916               	incf	printf@width& (0+255),w,b
  3342  000156  E1F6               	bnz	l5122
  3343  000158  0101               	movlb	1	; () banked
  3344  00015A  2917               	incf	(printf@width+1)& (0+255),w,b
  3345  00015C  B4D8               	btfsc	status,2,c
  3346  00015E  D00B               	goto	l5130
  3347  000160  D7F1               	goto	l5122
  3348  000162                     l5126:
  3349                           
  3350                           ; BSR set to: 1
  3351                           ;doprnt.c: 768: (putch(*cp++) );
  3352  000162  C103  FFD9         	movff	printf@cp,fsr2l
  3353  000166  C104  FFDA         	movff	printf@cp+1,fsr2h
  3354  00016A  50DF               	movf	indf2,w,c
  3355  00016C  EC7E  F028         	call	_putch
  3356  000170  0101               	movlb	1	; () banked
  3357  000172  4B03               	infsnz	printf@cp& (0+255),f,b
  3358  000174  2B04               	incf	(printf@cp+1)& (0+255),f,b
  3359  000176                     l5130:
  3360                           
  3361                           ; BSR set to: 1
  3362  000176  0101               	movlb	1	; () banked
  3363  000178  0706               	decf	printf@len& (0+255),f,b
  3364  00017A  A0D8               	btfss	status,0,c
  3365  00017C  0707               	decf	(printf@len+1)& (0+255),f,b
  3366  00017E  0101               	movlb	1	; () banked
  3367  000180  2906               	incf	printf@len& (0+255),w,b
  3368  000182  E1EF               	bnz	l5126
  3369  000184  0101               	movlb	1	; () banked
  3370  000186  2907               	incf	(printf@len+1)& (0+255),w,b
  3371  000188  B4D8               	btfsc	status,2,c
  3372  00018A  EF55  F006         	goto	l5408
  3373  00018E  D7E9               	goto	l5126
  3374  000190                     l5132:
  3375                           
  3376                           ; BSR set to: 1
  3377                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3378  000190  C108  FFD9         	movff	printf@ap,fsr2l
  3379  000194  C109  FFDA         	movff	printf@ap+1,fsr2h
  3380  000198  50DF               	movf	indf2,w,c
  3381  00019A  0101               	movlb	1	; () banked
  3382  00019C  6F1D               	movwf	printf@c& (0+255),b
  3383                           
  3384                           ; BSR set to: 1
  3385  00019E  0E02               	movlw	2
  3386  0001A0  0101               	movlb	1	; () banked
  3387  0001A2  2708               	addwf	printf@ap& (0+255),f,b
  3388  0001A4  0E00               	movlw	0
  3389  0001A6  2309               	addwfc	(printf@ap+1)& (0+255),f,b
  3390  0001A8                     l5136:
  3391                           
  3392                           ; BSR set to: 1
  3393                           ;doprnt.c: 805: cp = (char *)&c;
  3394  0001A8  0E1D               	movlw	low printf@c
  3395  0001AA  0101               	movlb	1	; () banked
  3396  0001AC  6F03               	movwf	printf@cp& (0+255),b
  3397  0001AE  0E01               	movlw	high printf@c
  3398  0001B0  0101               	movlb	1	; () banked
  3399  0001B2  6F04               	movwf	(printf@cp+1)& (0+255),b
  3400                           
  3401                           ; BSR set to: 1
  3402                           ;doprnt.c: 806: len = 1;
  3403  0001B4  0E00               	movlw	0
  3404  0001B6  0101               	movlb	1	; () banked
  3405  0001B8  6F07               	movwf	(printf@len+1)& (0+255),b
  3406  0001BA  0E01               	movlw	1
  3407  0001BC  6F06               	movwf	printf@len& (0+255),b
  3408                           
  3409                           ;doprnt.c: 807: goto dostring;
  3410  0001BE  D7A9               	goto	l5116
  3411  0001C0                     l5142:
  3412  0001C0  C0D5  FFF6         	movff	printf@f,tblptrl
  3413  0001C4  C0D6  FFF7         	movff	printf@f+1,tblptrh
  3414  0001C8  0100               	movlb	0	; () banked
  3415  0001CA  4BD5               	infsnz	printf@f& (0+255),f,b
  3416  0001CC  2BD6               	incf	(printf@f+1)& (0+255),f,b
  3417  0001CE                     	if	0	;tblptru may be non-zero
  3418  0001CE                     	endif
  3419  0001CE                     	if	0	;tblptru may be non-zero
  3420  0001CE                     	endif
  3421  0001CE  0008               	tblrd		*
  3422  0001D0  CFF5 F11D          	movff	tablat,printf@c
  3423  0001D4  0101               	movlb	1	; () banked
  3424  0001D6  511D               	movf	printf@c& (0+255),w,b
  3425                           
  3426                           ; Switch size 1, requested type "space"
  3427                           ; Number of cases is 7, Range of values is 0 to 120
  3428                           ; switch strategies available:
  3429                           ; Name         Instructions Cycles
  3430                           ; simple_byte           22    12 (average)
  3431                           ;	Chosen strategy is simple_byte
  3432  0001D8  0A00               	xorlw	0	; case 0
  3433  0001DA  B4D8               	btfsc	status,2,c
  3434  0001DC  0012               	return	
  3435  0001DE  0A63               	xorlw	99	; case 99
  3436  0001E0  B4D8               	btfsc	status,2,c
  3437  0001E2  D7D6               	goto	l5132
  3438  0001E4  0A07               	xorlw	7	; case 100
  3439  0001E6  B4D8               	btfsc	status,2,c
  3440  0001E8  D00D               	goto	l5144
  3441  0001EA  0A02               	xorlw	2	; case 102
  3442  0001EC  B4D8               	btfsc	status,2,c
  3443  0001EE  D78B               	goto	l5112
  3444  0001F0  0A0F               	xorlw	15	; case 105
  3445  0001F2  B4D8               	btfsc	status,2,c
  3446  0001F4  D007               	goto	l5144
  3447  0001F6  0A05               	xorlw	5	; case 108
  3448  0001F8  B4D8               	btfsc	status,2,c
  3449  0001FA  D782               	goto	l5110
  3450  0001FC  0A14               	xorlw	20	; case 120
  3451  0001FE  B4D8               	btfsc	status,2,c
  3452  000200  D785               	goto	l5114
  3453  000202  D7D2               	goto	l5136
  3454  000204                     l5144:
  3455                           
  3456                           ; BSR set to: 1
  3457                           ;doprnt.c: 825: if(flag & (0x700)) {
  3458  000204  0E07               	movlw	7
  3459  000206  0101               	movlb	1	; () banked
  3460  000208  151C               	andwf	(printf@flag+1)& (0+255),w,b
  3461  00020A  B4D8               	btfsc	status,2,c
  3462  00020C  D37A               	goto	l695
  3463                           
  3464                           ; BSR set to: 1
  3465                           ;doprnt.c: 829: prec = 6;
  3466  00020E  0E00               	movlw	0
  3467  000210  0101               	movlb	1	; () banked
  3468  000212  6F0B               	movwf	(printf@prec+1)& (0+255),b
  3469  000214  0E06               	movlw	6
  3470  000216  6F0A               	movwf	printf@prec& (0+255),b
  3471                           
  3472                           ; BSR set to: 1
  3473                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3474  000218  C108  FFD9         	movff	printf@ap,fsr2l
  3475  00021C  C109  FFDA         	movff	printf@ap+1,fsr2h
  3476  000220  CFDE F118          	movff	postinc2,printf@fval
  3477  000224  CFDE F119          	movff	postinc2,printf@fval+1
  3478  000228  CFDD F11A          	movff	postdec2,printf@fval+2
  3479                           
  3480                           ; BSR set to: 1
  3481  00022C  0E03               	movlw	3
  3482  00022E  0101               	movlb	1	; () banked
  3483  000230  2708               	addwf	printf@ap& (0+255),f,b
  3484  000232  0E00               	movlw	0
  3485  000234  2309               	addwfc	(printf@ap+1)& (0+255),f,b
  3486                           
  3487                           ; BSR set to: 1
  3488                           ;doprnt.c: 831: if(fval < 0.0) {
  3489  000236  0101               	movlb	1	; () banked
  3490  000238  AF1A               	btfss	(printf@fval+2)& (0+255),7,b
  3491  00023A  D011               	goto	l5158
  3492                           
  3493                           ; BSR set to: 1
  3494                           ;doprnt.c: 832: fval = -fval;
  3495  00023C  C118  F080         	movff	printf@fval,___ftneg@f1
  3496  000240  C119  F081         	movff	printf@fval+1,___ftneg@f1+1
  3497  000244  C11A  F082         	movff	printf@fval+2,___ftneg@f1+2
  3498  000248  EC10  F028         	call	___ftneg	;wreg free
  3499  00024C  C080  F118         	movff	?___ftneg,printf@fval
  3500  000250  C081  F119         	movff	?___ftneg+1,printf@fval+1
  3501  000254  C082  F11A         	movff	?___ftneg+2,printf@fval+2
  3502                           
  3503                           ;doprnt.c: 833: flag |= 0x03;
  3504  000258  0E03               	movlw	3
  3505  00025A  0101               	movlb	1	; () banked
  3506  00025C  131B               	iorwf	printf@flag& (0+255),f,b
  3507  00025E                     l5158:
  3508                           
  3509                           ; BSR set to: 1
  3510                           ;doprnt.c: 834: }
  3511                           ;doprnt.c: 835: exp = 0;
  3512  00025E  0E00               	movlw	0
  3513  000260  0101               	movlb	1	; () banked
  3514  000262  6F11               	movwf	(printf@exp+1)& (0+255),b
  3515  000264  0E00               	movlw	0
  3516  000266  6F10               	movwf	printf@exp& (0+255),b
  3517                           
  3518                           ; BSR set to: 1
  3519                           ;doprnt.c: 836: if( fval!=0) {
  3520  000268  0101               	movlb	1	; () banked
  3521  00026A  5118               	movf	printf@fval& (0+255),w,b
  3522  00026C  0101               	movlb	1	; () banked
  3523  00026E  1119               	iorwf	(printf@fval+1)& (0+255),w,b
  3524  000270  0101               	movlb	1	; () banked
  3525  000272  111A               	iorwf	(printf@fval+2)& (0+255),w,b
  3526  000274  B4D8               	btfsc	status,2,c
  3527  000276  D09B               	goto	l5186
  3528                           
  3529                           ; BSR set to: 1
  3530                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3531  000278  0E82               	movlw	130
  3532  00027A  0100               	movlb	0	; () banked
  3533  00027C  6FDF               	movwf	??_printf& (0+255),b
  3534  00027E  0EFF               	movlw	255
  3535  000280  0100               	movlb	0	; () banked
  3536  000282  6FE0               	movwf	(??_printf+1)& (0+255),b
  3537  000284  C118  F0E1         	movff	printf@fval,??_printf+2
  3538  000288  C119  F0E2         	movff	printf@fval+1,??_printf+3
  3539  00028C  C11A  F0E3         	movff	printf@fval+2,??_printf+4
  3540  000290  C11B  F0E4         	movff	printf@fval+3,??_printf+5
  3541  000294  0E10               	movlw	16
  3542  000296  D006               	goto	u5170
  3543  000298                     u5175:
  3544  000298  0100               	movlb	0	; () banked
  3545  00029A  90D8               	bcf	status,0,c
  3546  00029C  33E4               	rrcf	(??_printf+5)& (0+255),f,b
  3547  00029E  33E3               	rrcf	(??_printf+4)& (0+255),f,b
  3548  0002A0  33E2               	rrcf	(??_printf+3)& (0+255),f,b
  3549  0002A2  33E1               	rrcf	(??_printf+2)& (0+255),f,b
  3550  0002A4                     u5170:
  3551  0002A4  2EE8               	decfsz	wreg,f,c
  3552  0002A6  D7F8               	goto	u5175
  3553  0002A8  0100               	movlb	0	; () banked
  3554  0002AA  51E1               	movf	(??_printf+2)& (0+255),w,b
  3555  0002AC  0100               	movlb	0	; () banked
  3556  0002AE  25DF               	addwf	??_printf& (0+255),w,b
  3557  0002B0  0101               	movlb	1	; () banked
  3558  0002B2  6F10               	movwf	printf@exp& (0+255),b
  3559  0002B4  0E00               	movlw	0
  3560  0002B6  0100               	movlb	0	; () banked
  3561  0002B8  21E0               	addwfc	(??_printf+1)& (0+255),w,b
  3562  0002BA  0101               	movlb	1	; () banked
  3563  0002BC  6F11               	movwf	(printf@exp+1)& (0+255),b
  3564                           
  3565                           ; BSR set to: 1
  3566                           ;doprnt.c: 838: exp--;
  3567  0002BE  0101               	movlb	1	; () banked
  3568  0002C0  0710               	decf	printf@exp& (0+255),f,b
  3569  0002C2  A0D8               	btfss	status,0,c
  3570  0002C4  0711               	decf	(printf@exp+1)& (0+255),f,b
  3571                           
  3572                           ; BSR set to: 1
  3573                           ;doprnt.c: 839: exp *= 3;
  3574  0002C6  C110  F08E         	movff	printf@exp,___wmul@multiplier
  3575  0002CA  C111  F08F         	movff	printf@exp+1,___wmul@multiplier+1
  3576  0002CE  0E00               	movlw	0
  3577  0002D0  0100               	movlb	0	; () banked
  3578  0002D2  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3579  0002D4  0E03               	movlw	3
  3580  0002D6  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3581  0002D8  ECF5  F027         	call	___wmul	;wreg free
  3582  0002DC  C08E  F110         	movff	?___wmul,printf@exp
  3583  0002E0  C08F  F111         	movff	?___wmul+1,printf@exp+1
  3584                           
  3585                           ;doprnt.c: 840: exp /= 10;
  3586  0002E4  C110  F086         	movff	printf@exp,___awdiv@dividend
  3587  0002E8  C111  F087         	movff	printf@exp+1,___awdiv@dividend+1
  3588  0002EC  0E00               	movlw	0
  3589  0002EE  0100               	movlb	0	; () banked
  3590  0002F0  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  3591  0002F2  0E0A               	movlw	10
  3592  0002F4  6F88               	movwf	___awdiv@divisor& (0+255),b
  3593  0002F6  EC37  F022         	call	___awdiv	;wreg free
  3594  0002FA  C086  F110         	movff	?___awdiv,printf@exp
  3595  0002FE  C087  F111         	movff	?___awdiv+1,printf@exp+1
  3596                           
  3597                           ;doprnt.c: 841: if(exp < 0)
  3598  000302  0101               	movlb	1	; () banked
  3599  000304  AF11               	btfss	(printf@exp+1)& (0+255),7,b
  3600  000306  D004               	goto	l5174
  3601                           
  3602                           ; BSR set to: 1
  3603                           ;doprnt.c: 842: exp--;
  3604  000308  0101               	movlb	1	; () banked
  3605  00030A  0710               	decf	printf@exp& (0+255),f,b
  3606  00030C  A0D8               	btfss	status,0,c
  3607  00030E  0711               	decf	(printf@exp+1)& (0+255),f,b
  3608  000310                     l5174:
  3609                           
  3610                           ; BSR set to: 1
  3611                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3612  000310  0101               	movlb	1	; () banked
  3613  000312  5110               	movf	printf@exp& (0+255),w,b
  3614  000314  0800               	sublw	0
  3615  000316  ECA9  F00B         	call	_scale
  3616  00031A  C0B0  F10C         	movff	?_scale,printf@tmpval
  3617  00031E  C0B1  F10D         	movff	?_scale+1,printf@tmpval+1
  3618  000322  C0B2  F10E         	movff	?_scale+2,printf@tmpval+2
  3619                           
  3620                           ;doprnt.c: 847: tmpval.integ *= fval;
  3621  000326  C10C  F0A1         	movff	printf@tmpval,___ftmul@f1
  3622  00032A  C10D  F0A2         	movff	printf@tmpval+1,___ftmul@f1+1
  3623  00032E  C10E  F0A3         	movff	printf@tmpval+2,___ftmul@f1+2
  3624  000332  C118  F0A4         	movff	printf@fval,___ftmul@f2
  3625  000336  C119  F0A5         	movff	printf@fval+1,___ftmul@f2+1
  3626  00033A  C11A  F0A6         	movff	printf@fval+2,___ftmul@f2+2
  3627  00033E  EC63  F019         	call	___ftmul	;wreg free
  3628  000342  C0A1  F10C         	movff	?___ftmul,printf@tmpval
  3629  000346  C0A2  F10D         	movff	?___ftmul+1,printf@tmpval+1
  3630  00034A  C0A3  F10E         	movff	?___ftmul+2,printf@tmpval+2
  3631                           
  3632                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3633  00034E  C10C  F080         	movff	printf@tmpval,___ftge@ff1
  3634  000352  C10D  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  3635  000356  C10E  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  3636  00035A  0E00               	movlw	0
  3637  00035C  0100               	movlb	0	; () banked
  3638  00035E  6F83               	movwf	___ftge@ff2& (0+255),b
  3639  000360  0E80               	movlw	128
  3640  000362  0100               	movlb	0	; () banked
  3641  000364  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  3642  000366  0E3F               	movlw	63
  3643  000368  0100               	movlb	0	; () banked
  3644  00036A  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  3645  00036C  EC6F  F021         	call	___ftge	;wreg free
  3646  000370  0100               	movlb	0	; () banked
  3647  000372  B0D8               	btfsc	status,0,c
  3648  000374  D005               	goto	l5182
  3649                           
  3650                           ; BSR set to: 0
  3651                           ;doprnt.c: 849: exp--;
  3652  000376  0101               	movlb	1	; () banked
  3653  000378  0710               	decf	printf@exp& (0+255),f,b
  3654  00037A  A0D8               	btfss	status,0,c
  3655  00037C  0711               	decf	(printf@exp+1)& (0+255),f,b
  3656  00037E  D017               	goto	l5186
  3657  000380                     l5182:
  3658                           
  3659                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3660  000380  C10C  F080         	movff	printf@tmpval,___ftge@ff1
  3661  000384  C10D  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  3662  000388  C10E  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  3663  00038C  0E00               	movlw	0
  3664  00038E  0100               	movlb	0	; () banked
  3665  000390  6F83               	movwf	___ftge@ff2& (0+255),b
  3666  000392  0E20               	movlw	32
  3667  000394  0100               	movlb	0	; () banked
  3668  000396  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  3669  000398  0E41               	movlw	65
  3670  00039A  0100               	movlb	0	; () banked
  3671  00039C  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  3672  00039E  EC6F  F021         	call	___ftge	;wreg free
  3673  0003A2  0100               	movlb	0	; () banked
  3674  0003A4  A0D8               	btfss	status,0,c
  3675  0003A6  D003               	goto	l5186
  3676                           
  3677                           ; BSR set to: 0
  3678                           ;doprnt.c: 851: exp++;
  3679  0003A8  0101               	movlb	1	; () banked
  3680  0003AA  4B10               	infsnz	printf@exp& (0+255),f,b
  3681  0003AC  2B11               	incf	(printf@exp+1)& (0+255),f,b
  3682  0003AE                     l5186:
  3683                           
  3684                           ;doprnt.c: 852: }
  3685                           ;doprnt.c: 1112: if(prec <= 12)
  3686  0003AE  0101               	movlb	1	; () banked
  3687  0003B0  BF0B               	btfsc	(printf@prec+1)& (0+255),7,b
  3688  0003B2  D008               	goto	l5188
  3689  0003B4  0101               	movlb	1	; () banked
  3690  0003B6  510B               	movf	(printf@prec+1)& (0+255),w,b
  3691  0003B8  E11D               	bnz	l5190
  3692  0003BA  0E0D               	movlw	13
  3693  0003BC  0101               	movlb	1	; () banked
  3694  0003BE  5D0A               	subwf	printf@prec& (0+255),w,b
  3695  0003C0  B0D8               	btfsc	status,0,c
  3696  0003C2  D018               	goto	l5190
  3697  0003C4                     l5188:
  3698                           
  3699                           ; BSR set to: 1
  3700                           ;doprnt.c: 1113: fval += fround(prec);
  3701  0003C4  C118  F0BA         	movff	printf@fval,___ftadd@f1
  3702  0003C8  C119  F0BB         	movff	printf@fval+1,___ftadd@f1+1
  3703  0003CC  C11A  F0BC         	movff	printf@fval+2,___ftadd@f1+2
  3704  0003D0  0101               	movlb	1	; () banked
  3705  0003D2  510A               	movf	printf@prec& (0+255),w,b
  3706  0003D4  ECC6  F011         	call	_fround
  3707  0003D8  C0B0  F0BD         	movff	?_fround,___ftadd@f2
  3708  0003DC  C0B1  F0BE         	movff	?_fround+1,___ftadd@f2+1
  3709  0003E0  C0B2  F0BF         	movff	?_fround+2,___ftadd@f2+2
  3710  0003E4  EC1C  F013         	call	___ftadd	;wreg free
  3711  0003E8  C0BA  F118         	movff	?___ftadd,printf@fval
  3712  0003EC  C0BB  F119         	movff	?___ftadd+1,printf@fval+1
  3713  0003F0  C0BC  F11A         	movff	?___ftadd+2,printf@fval+2
  3714  0003F4                     l5190:
  3715                           
  3716                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3717  0003F4  0101               	movlb	1	; () banked
  3718  0003F6  BF11               	btfsc	(printf@exp+1)& (0+255),7,b
  3719  0003F8  D008               	goto	l5192
  3720  0003FA  0101               	movlb	1	; () banked
  3721  0003FC  5111               	movf	(printf@exp+1)& (0+255),w,b
  3722  0003FE  E12A               	bnz	l5198
  3723  000400  0E0A               	movlw	10
  3724  000402  0101               	movlb	1	; () banked
  3725  000404  5D10               	subwf	printf@exp& (0+255),w,b
  3726  000406  B0D8               	btfsc	status,0,c
  3727  000408  D025               	goto	l5198
  3728  00040A                     l5192:
  3729                           
  3730                           ; BSR set to: 1
  3731  00040A  0101               	movlb	1	; () banked
  3732  00040C  5118               	movf	printf@fval& (0+255),w,b
  3733  00040E  0101               	movlb	1	; () banked
  3734  000410  1119               	iorwf	(printf@fval+1)& (0+255),w,b
  3735  000412  0101               	movlb	1	; () banked
  3736  000414  111A               	iorwf	(printf@fval+2)& (0+255),w,b
  3737  000416  B4D8               	btfsc	status,2,c
  3738  000418  D063               	goto	l5212
  3739                           
  3740                           ; BSR set to: 1
  3741  00041A  C118  F0C6         	movff	printf@fval,___fttol@f1
  3742  00041E  C119  F0C7         	movff	printf@fval+1,___fttol@f1+1
  3743  000422  C11A  F0C8         	movff	printf@fval+2,___fttol@f1+2
  3744  000426  ECB8  F01A         	call	___fttol	;wreg free
  3745  00042A  0100               	movlb	0	; () banked
  3746  00042C  51C6               	movf	?___fttol& (0+255),w,b
  3747  00042E  0100               	movlb	0	; () banked
  3748  000430  11C7               	iorwf	(?___fttol+1)& (0+255),w,b
  3749  000432  0100               	movlb	0	; () banked
  3750  000434  11C8               	iorwf	(?___fttol+2)& (0+255),w,b
  3751  000436  0100               	movlb	0	; () banked
  3752  000438  11C9               	iorwf	(?___fttol+3)& (0+255),w,b
  3753  00043A  A4D8               	btfss	status,2,c
  3754  00043C  D051               	goto	l5212
  3755                           
  3756                           ; BSR set to: 0
  3757  00043E  0101               	movlb	1	; () banked
  3758  000440  BF11               	btfsc	(printf@exp+1)& (0+255),7,b
  3759  000442  D04E               	goto	l5212
  3760  000444  0101               	movlb	1	; () banked
  3761  000446  5111               	movf	(printf@exp+1)& (0+255),w,b
  3762  000448  E105               	bnz	l5198
  3763  00044A  0E02               	movlw	2
  3764  00044C  0101               	movlb	1	; () banked
  3765  00044E  5D10               	subwf	printf@exp& (0+255),w,b
  3766  000450  A0D8               	btfss	status,0,c
  3767  000452  D046               	goto	l5212
  3768  000454                     l5198:
  3769                           
  3770                           ; BSR set to: 1
  3771                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3772  000454  C10C  F080         	movff	printf@tmpval,___ftge@ff1
  3773  000458  C10D  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  3774  00045C  C10E  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  3775  000460  0E70               	movlw	112
  3776  000462  0100               	movlb	0	; () banked
  3777  000464  6F83               	movwf	___ftge@ff2& (0+255),b
  3778  000466  0E89               	movlw	137
  3779  000468  0100               	movlb	0	; () banked
  3780  00046A  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  3781  00046C  0E40               	movlw	64
  3782  00046E  0100               	movlb	0	; () banked
  3783  000470  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  3784  000472  EC6F  F021         	call	___ftge	;wreg free
  3785  000476  0100               	movlb	0	; () banked
  3786  000478  B0D8               	btfsc	status,0,c
  3787  00047A  D003               	goto	l5202
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3791  00047C  0101               	movlb	1	; () banked
  3792  00047E  0EF7               	movlw	247
  3793  000480  D002               	goto	L1
  3794  000482                     l5202:
  3795                           
  3796                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3797  000482  0101               	movlb	1	; () banked
  3798  000484  0EF8               	movlw	248
  3799  000486                     L1:
  3800  000486  2710               	addwf	printf@exp& (0+255),f,b
  3801  000488  0EFF               	movlw	255
  3802  00048A  2311               	addwfc	(printf@exp+1)& (0+255),f,b
  3803                           
  3804                           ; BSR set to: 1
  3805                           ;doprnt.c: 1124: }
  3806                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3807                           
  3808                           ; BSR set to: 1
  3809  00048C  0101               	movlb	1	; () banked
  3810  00048E  5110               	movf	printf@exp& (0+255),w,b
  3811  000490  ECA9  F00B         	call	_scale
  3812  000494  C0B0  F10C         	movff	?_scale,printf@tmpval
  3813  000498  C0B1  F10D         	movff	?_scale+1,printf@tmpval+1
  3814  00049C  C0B2  F10E         	movff	?_scale+2,printf@tmpval+2
  3815                           
  3816                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3817  0004A0  C118  F080         	movff	printf@fval,__tdiv_to_l_@f1
  3818  0004A4  C119  F081         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  3819  0004A8  C11A  F082         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  3820  0004AC  C10C  F083         	movff	printf@tmpval,__tdiv_to_l_@f2
  3821  0004B0  C10D  F084         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  3822  0004B4  C10E  F085         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  3823  0004B8  EC1D  F017         	call	__tdiv_to_l_	;wreg free
  3824  0004BC  C080  F112         	movff	?__tdiv_to_l_,printf@val
  3825  0004C0  C081  F113         	movff	?__tdiv_to_l_+1,printf@val+1
  3826  0004C4  C082  F114         	movff	?__tdiv_to_l_+2,printf@val+2
  3827  0004C8  C083  F115         	movff	?__tdiv_to_l_+3,printf@val+3
  3828                           
  3829                           ;doprnt.c: 1129: fval = 0.0;
  3830  0004CC  0E00               	movlw	0
  3831  0004CE  0101               	movlb	1	; () banked
  3832  0004D0  6F18               	movwf	printf@fval& (0+255),b
  3833  0004D2  0E00               	movlw	0
  3834  0004D4  0101               	movlb	1	; () banked
  3835  0004D6  6F19               	movwf	(printf@fval+1)& (0+255),b
  3836  0004D8  0E00               	movlw	0
  3837  0004DA  0101               	movlb	1	; () banked
  3838  0004DC  6F1A               	movwf	(printf@fval+2)& (0+255),b
  3839                           
  3840                           ;doprnt.c: 1130: } else {
  3841  0004DE  D033               	goto	l5216
  3842  0004E0                     l5212:
  3843                           
  3844                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3845  0004E0  C118  F0C6         	movff	printf@fval,___fttol@f1
  3846  0004E4  C119  F0C7         	movff	printf@fval+1,___fttol@f1+1
  3847  0004E8  C11A  F0C8         	movff	printf@fval+2,___fttol@f1+2
  3848  0004EC  ECB8  F01A         	call	___fttol	;wreg free
  3849  0004F0  C0C6  F112         	movff	?___fttol,printf@val
  3850  0004F4  C0C7  F113         	movff	?___fttol+1,printf@val+1
  3851  0004F8  C0C8  F114         	movff	?___fttol+2,printf@val+2
  3852  0004FC  C0C9  F115         	movff	?___fttol+3,printf@val+3
  3853                           
  3854                           ;doprnt.c: 1132: fval -= (double)val;
  3855  000500  C118  F0C6         	movff	printf@fval,___ftsub@f1
  3856  000504  C119  F0C7         	movff	printf@fval+1,___ftsub@f1+1
  3857  000508  C11A  F0C8         	movff	printf@fval+2,___ftsub@f1+2
  3858  00050C  C112  F088         	movff	printf@val,___lltoft@c
  3859  000510  C113  F089         	movff	printf@val+1,___lltoft@c+1
  3860  000514  C114  F08A         	movff	printf@val+2,___lltoft@c+2
  3861  000518  C115  F08B         	movff	printf@val+3,___lltoft@c+3
  3862  00051C  EC49  F025         	call	___lltoft	;wreg free
  3863  000520  C088  F0C9         	movff	?___lltoft,___ftsub@f2
  3864  000524  C089  F0CA         	movff	?___lltoft+1,___ftsub@f2+1
  3865  000528  C08A  F0CB         	movff	?___lltoft+2,___ftsub@f2+2
  3866  00052C  ECDE  F026         	call	___ftsub	;wreg free
  3867  000530  C0C6  F118         	movff	?___ftsub,printf@fval
  3868  000534  C0C7  F119         	movff	?___ftsub+1,printf@fval+1
  3869  000538  C0C8  F11A         	movff	?___ftsub+2,printf@fval+2
  3870                           
  3871                           ;doprnt.c: 1133: exp = 0;
  3872  00053C  0E00               	movlw	0
  3873  00053E  0101               	movlb	1	; () banked
  3874  000540  6F11               	movwf	(printf@exp+1)& (0+255),b
  3875  000542  0E00               	movlw	0
  3876  000544  6F10               	movwf	printf@exp& (0+255),b
  3877  000546                     l5216:
  3878                           
  3879                           ; BSR set to: 1
  3880                           ;doprnt.c: 1134: }
  3881                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3882  000546  0E01               	movlw	1
  3883  000548  0101               	movlb	1	; () banked
  3884  00054A  6F1D               	movwf	printf@c& (0+255),b
  3885  00054C                     l5218:
  3886                           
  3887                           ; BSR set to: 1
  3888  00054C  0E0A               	movlw	10
  3889  00054E  0101               	movlb	1	; () banked
  3890  000550  191D               	xorwf	printf@c& (0+255),w,b
  3891  000552  B4D8               	btfsc	status,2,c
  3892  000554  D01E               	goto	l5230
  3893                           
  3894                           ; BSR set to: 1
  3895                           ;doprnt.c: 1137: if(val < dpowers[c])
  3896                           
  3897                           ; BSR set to: 1
  3898                           
  3899                           ; BSR set to: 1
  3900  000556  0101               	movlb	1	; () banked
  3901  000558  511D               	movf	printf@c& (0+255),w,b
  3902  00055A  0D04               	mullw	4
  3903  00055C  0EC3               	movlw	low _dpowers
  3904  00055E  24F3               	addwf	prodl,w,c
  3905  000560  6EF6               	movwf	tblptrl,c
  3906  000562  0EFD               	movlw	high _dpowers
  3907  000564  20F4               	addwfc	prodh,w,c
  3908  000566  6EF7               	movwf	tblptrh,c
  3909  000568                     	if	0	;There are less than 3 active tblptr bytes
  3910  000568                     	endif
  3911  000568  0009               	tblrd		*+
  3912  00056A  50F5               	movf	tablat,w,c
  3913  00056C  0101               	movlb	1	; () banked
  3914  00056E  5D12               	subwf	printf@val& (0+255),w,b
  3915  000570  0009               	tblrd		*+
  3916  000572  50F5               	movf	tablat,w,c
  3917  000574  0101               	movlb	1	; () banked
  3918  000576  5913               	subwfb	(printf@val+1)& (0+255),w,b
  3919  000578  0009               	tblrd		*+
  3920  00057A  50F5               	movf	tablat,w,c
  3921  00057C  0101               	movlb	1	; () banked
  3922  00057E  5914               	subwfb	(printf@val+2)& (0+255),w,b
  3923  000580  0009               	tblrd		*+
  3924  000582  50F5               	movf	tablat,w,c
  3925  000584  0101               	movlb	1	; () banked
  3926  000586  5915               	subwfb	(printf@val+3)& (0+255),w,b
  3927  000588  A0D8               	btfss	status,0,c
  3928  00058A  D003               	goto	l5230
  3929                           
  3930                           ; BSR set to: 1
  3931                           
  3932                           ; BSR set to: 1
  3933                           
  3934                           ; BSR set to: 1
  3935                           ;doprnt.c: 1138: break;
  3936  00058C  0101               	movlb	1	; () banked
  3937  00058E  2B1D               	incf	printf@c& (0+255),f,b
  3938  000590  D7DD               	goto	l5218
  3939  000592                     l5230:
  3940                           
  3941                           ; BSR set to: 1
  3942                           ;doprnt.c: 1142: width -= prec + c + exp;
  3943  000592  C11D  F0DF         	movff	printf@c,??_printf
  3944  000596  0100               	movlb	0	; () banked
  3945  000598  6BE0               	clrf	(??_printf+1)& (0+255),b
  3946  00059A  BFDF               	btfsc	??_printf& (0+255),7,b
  3947  00059C  07E0               	decf	(??_printf+1)& (0+255),f,b
  3948  00059E  0101               	movlb	1	; () banked
  3949  0005A0  510A               	movf	printf@prec& (0+255),w,b
  3950  0005A2  0100               	movlb	0	; () banked
  3951  0005A4  27DF               	addwf	??_printf& (0+255),f,b
  3952  0005A6  0101               	movlb	1	; () banked
  3953  0005A8  510B               	movf	(printf@prec+1)& (0+255),w,b
  3954  0005AA  0100               	movlb	0	; () banked
  3955  0005AC  23E0               	addwfc	(??_printf+1)& (0+255),f,b
  3956  0005AE  0101               	movlb	1	; () banked
  3957  0005B0  5110               	movf	printf@exp& (0+255),w,b
  3958  0005B2  0100               	movlb	0	; () banked
  3959  0005B4  27DF               	addwf	??_printf& (0+255),f,b
  3960  0005B6  0101               	movlb	1	; () banked
  3961  0005B8  5111               	movf	(printf@exp+1)& (0+255),w,b
  3962  0005BA  0100               	movlb	0	; () banked
  3963  0005BC  23E0               	addwfc	(??_printf+1)& (0+255),f,b
  3964  0005BE  0100               	movlb	0	; () banked
  3965  0005C0  51DF               	movf	??_printf& (0+255),w,b
  3966  0005C2  0101               	movlb	1	; () banked
  3967  0005C4  5F16               	subwf	printf@width& (0+255),f,b
  3968  0005C6  0100               	movlb	0	; () banked
  3969  0005C8  51E0               	movf	(??_printf+1)& (0+255),w,b
  3970  0005CA  0101               	movlb	1	; () banked
  3971  0005CC  5B17               	subwfb	(printf@width+1)& (0+255),f,b
  3972                           
  3973                           ;doprnt.c: 1143: if(
  3974                           ;doprnt.c: 1147: prec)
  3975  0005CE  0101               	movlb	1	; () banked
  3976  0005D0  510A               	movf	printf@prec& (0+255),w,b
  3977  0005D2  0101               	movlb	1	; () banked
  3978  0005D4  110B               	iorwf	(printf@prec+1)& (0+255),w,b
  3979  0005D6  B4D8               	btfsc	status,2,c
  3980  0005D8  D004               	goto	l5234
  3981                           
  3982                           ; BSR set to: 1
  3983                           ;doprnt.c: 1148: width--;
  3984  0005DA  0101               	movlb	1	; () banked
  3985  0005DC  0716               	decf	printf@width& (0+255),f,b
  3986  0005DE  A0D8               	btfss	status,0,c
  3987  0005E0  0717               	decf	(printf@width+1)& (0+255),f,b
  3988  0005E2                     l5234:
  3989                           
  3990                           ; BSR set to: 1
  3991                           ;doprnt.c: 1149: if(flag & 0x03)
  3992  0005E2  0E03               	movlw	3
  3993  0005E4  0101               	movlb	1	; () banked
  3994  0005E6  151B               	andwf	printf@flag& (0+255),w,b
  3995  0005E8  0100               	movlb	0	; () banked
  3996  0005EA  6FDF               	movwf	??_printf& (0+255),b
  3997  0005EC  0E00               	movlw	0
  3998  0005EE  0101               	movlb	1	; () banked
  3999  0005F0  151C               	andwf	(printf@flag+1)& (0+255),w,b
  4000  0005F2  0100               	movlb	0	; () banked
  4001  0005F4  6FE0               	movwf	(??_printf+1)& (0+255),b
  4002  0005F6  0100               	movlb	0	; () banked
  4003  0005F8  51DF               	movf	??_printf& (0+255),w,b
  4004  0005FA  0100               	movlb	0	; () banked
  4005  0005FC  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  4006  0005FE  B4D8               	btfsc	status,2,c
  4007  000600  D004               	goto	l5238
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;doprnt.c: 1150: width--;
  4011  000602  0101               	movlb	1	; () banked
  4012  000604  0716               	decf	printf@width& (0+255),f,b
  4013  000606  A0D8               	btfss	status,0,c
  4014  000608  0717               	decf	(printf@width+1)& (0+255),f,b
  4015  00060A                     l5238:
  4016                           
  4017                           ;doprnt.c: 1153: if(flag & 0x04) {
  4018  00060A  0101               	movlb	1	; () banked
  4019  00060C  A51B               	btfss	printf@flag& (0+255),2,b
  4020  00060E  D02D               	goto	l5254
  4021                           
  4022                           ; BSR set to: 1
  4023                           ;doprnt.c: 1157: if(flag & 0x03)
  4024  000610  0E03               	movlw	3
  4025  000612  0101               	movlb	1	; () banked
  4026  000614  151B               	andwf	printf@flag& (0+255),w,b
  4027  000616  0100               	movlb	0	; () banked
  4028  000618  6FDF               	movwf	??_printf& (0+255),b
  4029  00061A  0E00               	movlw	0
  4030  00061C  0101               	movlb	1	; () banked
  4031  00061E  151C               	andwf	(printf@flag+1)& (0+255),w,b
  4032  000620  0100               	movlb	0	; () banked
  4033  000622  6FE0               	movwf	(??_printf+1)& (0+255),b
  4034  000624  0100               	movlb	0	; () banked
  4035  000626  51DF               	movf	??_printf& (0+255),w,b
  4036  000628  0100               	movlb	0	; () banked
  4037  00062A  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  4038  00062C  B4D8               	btfsc	status,2,c
  4039  00062E  D00B               	goto	l5248
  4040                           
  4041                           ; BSR set to: 0
  4042                           ;doprnt.c: 1159: (putch('-') );
  4043  000630  0E2D               	movlw	45
  4044  000632  EC7E  F028         	call	_putch
  4045                           
  4046                           ;doprnt.c: 1168: while(width > 0) {
  4047  000636  D007               	goto	l5248
  4048  000638                     l5244:
  4049                           
  4050                           ;doprnt.c: 1169: (putch('0') );
  4051  000638  0E30               	movlw	48
  4052  00063A  EC7E  F028         	call	_putch
  4053                           
  4054                           ;doprnt.c: 1170: width--;
  4055  00063E  0101               	movlb	1	; () banked
  4056  000640  0716               	decf	printf@width& (0+255),f,b
  4057  000642  A0D8               	btfss	status,0,c
  4058  000644  0717               	decf	(printf@width+1)& (0+255),f,b
  4059  000646                     l5248:
  4060  000646  0101               	movlb	1	; () banked
  4061  000648  BF17               	btfsc	(printf@width+1)& (0+255),7,b
  4062  00064A  D074               	goto	l5266
  4063  00064C  0101               	movlb	1	; () banked
  4064  00064E  5117               	movf	(printf@width+1)& (0+255),w,b
  4065  000650  E1F3               	bnz	l5244
  4066  000652  0101               	movlb	1	; () banked
  4067  000654  0516               	decf	printf@width& (0+255),w,b
  4068  000656  A0D8               	btfss	status,0,c
  4069  000658  D06D               	goto	l5266
  4070  00065A  D7EE               	goto	l5244
  4071  00065C                     l5250:
  4072                           
  4073                           ; BSR set to: 1
  4074                           ;doprnt.c: 1181: (putch(' ') );
  4075  00065C  0E20               	movlw	32
  4076  00065E  EC7E  F028         	call	_putch
  4077                           
  4078                           ;doprnt.c: 1182: width--;
  4079  000662  0101               	movlb	1	; () banked
  4080  000664  0716               	decf	printf@width& (0+255),f,b
  4081  000666  A0D8               	btfss	status,0,c
  4082  000668  0717               	decf	(printf@width+1)& (0+255),f,b
  4083  00066A                     l5254:
  4084                           
  4085                           ; BSR set to: 1
  4086  00066A  0101               	movlb	1	; () banked
  4087  00066C  BF17               	btfsc	(printf@width+1)& (0+255),7,b
  4088  00066E  D007               	goto	l5256
  4089  000670  0101               	movlb	1	; () banked
  4090  000672  5117               	movf	(printf@width+1)& (0+255),w,b
  4091  000674  E1F3               	bnz	l5250
  4092  000676  0101               	movlb	1	; () banked
  4093  000678  0516               	decf	printf@width& (0+255),w,b
  4094  00067A  B0D8               	btfsc	status,0,c
  4095  00067C  D7EF               	goto	l5250
  4096  00067E                     l5256:
  4097                           
  4098                           ; BSR set to: 1
  4099                           ;doprnt.c: 1183: }
  4100                           ;doprnt.c: 1188: if(flag & 0x03)
  4101  00067E  0E03               	movlw	3
  4102  000680  0101               	movlb	1	; () banked
  4103  000682  151B               	andwf	printf@flag& (0+255),w,b
  4104  000684  0100               	movlb	0	; () banked
  4105  000686  6FDF               	movwf	??_printf& (0+255),b
  4106  000688  0E00               	movlw	0
  4107  00068A  0101               	movlb	1	; () banked
  4108  00068C  151C               	andwf	(printf@flag+1)& (0+255),w,b
  4109  00068E  0100               	movlb	0	; () banked
  4110  000690  6FE0               	movwf	(??_printf+1)& (0+255),b
  4111  000692  0100               	movlb	0	; () banked
  4112  000694  51DF               	movf	??_printf& (0+255),w,b
  4113  000696  0100               	movlb	0	; () banked
  4114  000698  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  4115  00069A  B4D8               	btfsc	status,2,c
  4116  00069C  D04B               	goto	l5266
  4117                           
  4118                           ; BSR set to: 0
  4119                           ;doprnt.c: 1190: (putch('-') );
  4120  00069E  0E2D               	movlw	45
  4121  0006A0  EC7E  F028         	call	_putch
  4122                           
  4123                           ;doprnt.c: 1195: }
  4124                           ;doprnt.c: 1196: while(c--) {
  4125  0006A4  D047               	goto	l5266
  4126  0006A6                     l5260:
  4127                           
  4128                           ;doprnt.c: 1200: {
  4129                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  4130  0006A6  C112  F080         	movff	printf@val,___lldiv@dividend
  4131  0006AA  C113  F081         	movff	printf@val+1,___lldiv@dividend+1
  4132  0006AE  C114  F082         	movff	printf@val+2,___lldiv@dividend+2
  4133  0006B2  C115  F083         	movff	printf@val+3,___lldiv@dividend+3
  4134  0006B6  0101               	movlb	1	; () banked
  4135  0006B8  511D               	movf	printf@c& (0+255),w,b
  4136  0006BA  0D04               	mullw	4
  4137  0006BC  0EC3               	movlw	low _dpowers
  4138  0006BE  24F3               	addwf	prodl,w,c
  4139  0006C0  6EF6               	movwf	tblptrl,c
  4140  0006C2  0EFD               	movlw	high _dpowers
  4141  0006C4  20F4               	addwfc	prodh,w,c
  4142  0006C6  6EF7               	movwf	tblptrh,c
  4143  0006C8                     	if	0	;There are less than 3 active tblptr bytes
  4144  0006C8                     	endif
  4145  0006C8  0009               	tblrd		*+
  4146  0006CA  CFF5 F084          	movff	tablat,___lldiv@divisor
  4147  0006CE  0009               	tblrd		*+
  4148  0006D0  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  4149  0006D4  0009               	tblrd		*+
  4150  0006D6  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  4151  0006DA  000A               	tblrd		*-
  4152  0006DC  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  4153  0006E0  EC96  F022         	call	___lldiv	;wreg free
  4154  0006E4  C080  F10C         	movff	?___lldiv,printf@tmpval
  4155  0006E8  C081  F10D         	movff	?___lldiv+1,printf@tmpval+1
  4156  0006EC  C082  F10E         	movff	?___lldiv+2,printf@tmpval+2
  4157  0006F0  C083  F10F         	movff	?___lldiv+3,printf@tmpval+3
  4158                           
  4159                           ;doprnt.c: 1202: tmpval.vd %= 10;
  4160  0006F4  C10C  F08D         	movff	printf@tmpval,___llmod@dividend
  4161  0006F8  C10D  F08E         	movff	printf@tmpval+1,___llmod@dividend+1
  4162  0006FC  C10E  F08F         	movff	printf@tmpval+2,___llmod@dividend+2
  4163  000700  C10F  F090         	movff	printf@tmpval+3,___llmod@dividend+3
  4164  000704  0E0A               	movlw	10
  4165  000706  0100               	movlb	0	; () banked
  4166  000708  6F91               	movwf	___llmod@divisor& (0+255),b
  4167  00070A  0E00               	movlw	0
  4168  00070C  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  4169  00070E  0E00               	movlw	0
  4170  000710  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  4171  000712  0E00               	movlw	0
  4172  000714  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  4173  000716  ECEB  F023         	call	___llmod	;wreg free
  4174  00071A  C08D  F10C         	movff	?___llmod,printf@tmpval
  4175  00071E  C08E  F10D         	movff	?___llmod+1,printf@tmpval+1
  4176  000722  C08F  F10E         	movff	?___llmod+2,printf@tmpval+2
  4177  000726  C090  F10F         	movff	?___llmod+3,printf@tmpval+3
  4178                           
  4179                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  4180  00072A  0101               	movlb	1	; () banked
  4181  00072C  510C               	movf	printf@tmpval& (0+255),w,b
  4182  00072E  0F30               	addlw	48
  4183  000730  EC7E  F028         	call	_putch
  4184  000734                     l5266:
  4185  000734  0101               	movlb	1	; () banked
  4186  000736  071D               	decf	printf@c& (0+255),f,b
  4187  000738  0101               	movlb	1	; () banked
  4188  00073A  291D               	incf	printf@c& (0+255),w,b
  4189  00073C  B4D8               	btfsc	status,2,c
  4190  00073E  D008               	goto	l5272
  4191  000740  D7B2               	goto	l5260
  4192  000742                     l5268:
  4193                           
  4194                           ; BSR set to: 1
  4195                           ;doprnt.c: 1208: (putch('0') );
  4196  000742  0E30               	movlw	48
  4197  000744  EC7E  F028         	call	_putch
  4198                           
  4199                           ;doprnt.c: 1209: exp--;
  4200  000748  0101               	movlb	1	; () banked
  4201  00074A  0710               	decf	printf@exp& (0+255),f,b
  4202  00074C  A0D8               	btfss	status,0,c
  4203  00074E  0711               	decf	(printf@exp+1)& (0+255),f,b
  4204  000750                     l5272:
  4205                           
  4206                           ; BSR set to: 1
  4207  000750  0101               	movlb	1	; () banked
  4208  000752  BF11               	btfsc	(printf@exp+1)& (0+255),7,b
  4209  000754  D007               	goto	l5274
  4210  000756  0101               	movlb	1	; () banked
  4211  000758  5111               	movf	(printf@exp+1)& (0+255),w,b
  4212  00075A  E1F3               	bnz	l5268
  4213  00075C  0101               	movlb	1	; () banked
  4214  00075E  0510               	decf	printf@exp& (0+255),w,b
  4215  000760  B0D8               	btfsc	status,0,c
  4216  000762  D7EF               	goto	l5268
  4217  000764                     l5274:
  4218                           
  4219                           ; BSR set to: 1
  4220                           ;doprnt.c: 1210: }
  4221                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4222  000764  0101               	movlb	1	; () banked
  4223  000766  BF0B               	btfsc	(printf@prec+1)& (0+255),7,b
  4224  000768  D00C               	goto	l734
  4225  00076A  0101               	movlb	1	; () banked
  4226  00076C  510B               	movf	(printf@prec+1)& (0+255),w,b
  4227  00076E  E105               	bnz	u5390
  4228  000770  0E09               	movlw	9
  4229  000772  0101               	movlb	1	; () banked
  4230  000774  5D0A               	subwf	printf@prec& (0+255),w,b
  4231  000776  A0D8               	btfss	status,0,c
  4232  000778  D004               	goto	l734
  4233  00077A                     u5390:
  4234                           
  4235                           ; BSR set to: 1
  4236                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4237  00077A  0E08               	movlw	8
  4238  00077C  0101               	movlb	1	; () banked
  4239  00077E  6F1D               	movwf	printf@c& (0+255),b
  4240  000780  D002               	goto	l5278
  4241  000782                     l734:
  4242                           
  4243                           ; BSR set to: 1
  4244                           ;doprnt.c: 1213: else
  4245                           ;doprnt.c: 1214: c = prec;
  4246  000782  C10A  F11D         	movff	printf@prec,printf@c
  4247  000786                     l5278:
  4248                           
  4249                           ; BSR set to: 1
  4250                           ;doprnt.c: 1215: prec -= c;
  4251  000786  0101               	movlb	1	; () banked
  4252  000788  511D               	movf	printf@c& (0+255),w,b
  4253  00078A  0101               	movlb	1	; () banked
  4254  00078C  5F0A               	subwf	printf@prec& (0+255),f,b
  4255  00078E  0E00               	movlw	0
  4256  000790  0101               	movlb	1	; () banked
  4257  000792  BF1D               	btfsc	printf@c& (0+255),7,b
  4258  000794  0EFF               	movlw	255
  4259  000796  0101               	movlb	1	; () banked
  4260  000798  5B0B               	subwfb	(printf@prec+1)& (0+255),f,b
  4261                           
  4262                           ; BSR set to: 1
  4263                           ;doprnt.c: 1219: if(c)
  4264  00079A  0101               	movlb	1	; () banked
  4265  00079C  511D               	movf	printf@c& (0+255),w,b
  4266  00079E  0101               	movlb	1	; () banked
  4267  0007A0  B4D8               	btfsc	status,2,c
  4268  0007A2  D003               	goto	l5284
  4269                           
  4270                           ; BSR set to: 1
  4271                           ;doprnt.c: 1221: (putch('.') );
  4272  0007A4  0E2E               	movlw	46
  4273  0007A6  EC7E  F028         	call	_putch
  4274  0007AA                     l5284:
  4275                           
  4276                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4277  0007AA  0101               	movlb	1	; () banked
  4278  0007AC  511D               	movf	printf@c& (0+255),w,b
  4279  0007AE  ECA9  F00B         	call	_scale
  4280  0007B2  C0B0  F100         	movff	?_scale,_printf$1340
  4281  0007B6  C0B1  F101         	movff	?_scale+1,_printf$1340+1
  4282  0007BA  C0B2  F102         	movff	?_scale+2,_printf$1340+2
  4283                           
  4284                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4285  0007BE  C118  F0A4         	movff	printf@fval,___ftmul@f2
  4286  0007C2  C119  F0A5         	movff	printf@fval+1,___ftmul@f2+1
  4287  0007C6  C11A  F0A6         	movff	printf@fval+2,___ftmul@f2+2
  4288  0007CA  C100  F0A1         	movff	_printf$1340,___ftmul@f1
  4289  0007CE  C101  F0A2         	movff	_printf$1340+1,___ftmul@f1+1
  4290  0007D2  C102  F0A3         	movff	_printf$1340+2,___ftmul@f1+2
  4291  0007D6  EC63  F019         	call	___ftmul	;wreg free
  4292  0007DA  C0A1  F0C6         	movff	?___ftmul,___fttol@f1
  4293  0007DE  C0A2  F0C7         	movff	?___ftmul+1,___fttol@f1+1
  4294  0007E2  C0A3  F0C8         	movff	?___ftmul+2,___fttol@f1+2
  4295  0007E6  ECB8  F01A         	call	___fttol	;wreg free
  4296  0007EA  C0C6  F112         	movff	?___fttol,printf@val
  4297  0007EE  C0C7  F113         	movff	?___fttol+1,printf@val+1
  4298  0007F2  C0C8  F114         	movff	?___fttol+2,printf@val+2
  4299  0007F6  C0C9  F115         	movff	?___fttol+3,printf@val+3
  4300                           
  4301                           ;doprnt.c: 1228: while(c--) {
  4302  0007FA  D06E               	goto	l5294
  4303  0007FC                     l5288:
  4304                           
  4305                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4306  0007FC  C112  F080         	movff	printf@val,___lldiv@dividend
  4307  000800  C113  F081         	movff	printf@val+1,___lldiv@dividend+1
  4308  000804  C114  F082         	movff	printf@val+2,___lldiv@dividend+2
  4309  000808  C115  F083         	movff	printf@val+3,___lldiv@dividend+3
  4310  00080C  0101               	movlb	1	; () banked
  4311  00080E  511D               	movf	printf@c& (0+255),w,b
  4312  000810  0D04               	mullw	4
  4313  000812  0EC3               	movlw	low _dpowers
  4314  000814  24F3               	addwf	prodl,w,c
  4315  000816  6EF6               	movwf	tblptrl,c
  4316  000818  0EFD               	movlw	high _dpowers
  4317  00081A  20F4               	addwfc	prodh,w,c
  4318  00081C  6EF7               	movwf	tblptrh,c
  4319  00081E                     	if	0	;There are less than 3 active tblptr bytes
  4320  00081E                     	endif
  4321  00081E  0009               	tblrd		*+
  4322  000820  CFF5 F084          	movff	tablat,___lldiv@divisor
  4323  000824  0009               	tblrd		*+
  4324  000826  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  4325  00082A  0009               	tblrd		*+
  4326  00082C  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  4327  000830  000A               	tblrd		*-
  4328  000832  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  4329  000836  EC96  F022         	call	___lldiv	;wreg free
  4330  00083A  C080  F10C         	movff	?___lldiv,printf@tmpval
  4331  00083E  C081  F10D         	movff	?___lldiv+1,printf@tmpval+1
  4332  000842  C082  F10E         	movff	?___lldiv+2,printf@tmpval+2
  4333  000846  C083  F10F         	movff	?___lldiv+3,printf@tmpval+3
  4334                           
  4335                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4336  00084A  C10C  F08D         	movff	printf@tmpval,___llmod@dividend
  4337  00084E  C10D  F08E         	movff	printf@tmpval+1,___llmod@dividend+1
  4338  000852  C10E  F08F         	movff	printf@tmpval+2,___llmod@dividend+2
  4339  000856  C10F  F090         	movff	printf@tmpval+3,___llmod@dividend+3
  4340  00085A  0E0A               	movlw	10
  4341  00085C  0100               	movlb	0	; () banked
  4342  00085E  6F91               	movwf	___llmod@divisor& (0+255),b
  4343  000860  0E00               	movlw	0
  4344  000862  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  4345  000864  0E00               	movlw	0
  4346  000866  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  4347  000868  0E00               	movlw	0
  4348  00086A  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  4349  00086C  ECEB  F023         	call	___llmod	;wreg free
  4350  000870  C08D  F10C         	movff	?___llmod,printf@tmpval
  4351  000874  C08E  F10D         	movff	?___llmod+1,printf@tmpval+1
  4352  000878  C08F  F10E         	movff	?___llmod+2,printf@tmpval+2
  4353  00087C  C090  F10F         	movff	?___llmod+3,printf@tmpval+3
  4354                           
  4355                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  4356  000880  0101               	movlb	1	; () banked
  4357  000882  510C               	movf	printf@tmpval& (0+255),w,b
  4358  000884  0F30               	addlw	48
  4359  000886  EC7E  F028         	call	_putch
  4360                           
  4361                           ;doprnt.c: 1232: val %= dpowers[c];
  4362  00088A  C112  F08D         	movff	printf@val,___llmod@dividend
  4363  00088E  C113  F08E         	movff	printf@val+1,___llmod@dividend+1
  4364  000892  C114  F08F         	movff	printf@val+2,___llmod@dividend+2
  4365  000896  C115  F090         	movff	printf@val+3,___llmod@dividend+3
  4366  00089A  0101               	movlb	1	; () banked
  4367  00089C  511D               	movf	printf@c& (0+255),w,b
  4368  00089E  0D04               	mullw	4
  4369  0008A0  0EC3               	movlw	low _dpowers
  4370  0008A2  24F3               	addwf	prodl,w,c
  4371  0008A4  6EF6               	movwf	tblptrl,c
  4372  0008A6  0EFD               	movlw	high _dpowers
  4373  0008A8  20F4               	addwfc	prodh,w,c
  4374  0008AA  6EF7               	movwf	tblptrh,c
  4375  0008AC                     	if	0	;There are less than 3 active tblptr bytes
  4376  0008AC                     	endif
  4377  0008AC  0009               	tblrd		*+
  4378  0008AE  CFF5 F091          	movff	tablat,___llmod@divisor
  4379  0008B2  0009               	tblrd		*+
  4380  0008B4  CFF5 F092          	movff	tablat,___llmod@divisor+1
  4381  0008B8  0009               	tblrd		*+
  4382  0008BA  CFF5 F093          	movff	tablat,___llmod@divisor+2
  4383  0008BE  000A               	tblrd		*-
  4384  0008C0  CFF5 F094          	movff	tablat,___llmod@divisor+3
  4385  0008C4  ECEB  F023         	call	___llmod	;wreg free
  4386  0008C8  C08D  F112         	movff	?___llmod,printf@val
  4387  0008CC  C08E  F113         	movff	?___llmod+1,printf@val+1
  4388  0008D0  C08F  F114         	movff	?___llmod+2,printf@val+2
  4389  0008D4  C090  F115         	movff	?___llmod+3,printf@val+3
  4390  0008D8                     l5294:
  4391  0008D8  0101               	movlb	1	; () banked
  4392  0008DA  071D               	decf	printf@c& (0+255),f,b
  4393  0008DC  0101               	movlb	1	; () banked
  4394  0008DE  291D               	incf	printf@c& (0+255),w,b
  4395  0008E0  B4D8               	btfsc	status,2,c
  4396  0008E2  D008               	goto	l5300
  4397  0008E4  D78B               	goto	l5288
  4398  0008E6                     l5296:
  4399                           
  4400                           ; BSR set to: 1
  4401                           ;doprnt.c: 1236: (putch('0') );
  4402  0008E6  0E30               	movlw	48
  4403  0008E8  EC7E  F028         	call	_putch
  4404                           
  4405                           ;doprnt.c: 1237: prec--;
  4406  0008EC  0101               	movlb	1	; () banked
  4407  0008EE  070A               	decf	printf@prec& (0+255),f,b
  4408  0008F0  A0D8               	btfss	status,0,c
  4409  0008F2  070B               	decf	(printf@prec+1)& (0+255),f,b
  4410  0008F4                     l5300:
  4411                           
  4412                           ; BSR set to: 1
  4413  0008F4  0101               	movlb	1	; () banked
  4414  0008F6  510A               	movf	printf@prec& (0+255),w,b
  4415  0008F8  0101               	movlb	1	; () banked
  4416  0008FA  110B               	iorwf	(printf@prec+1)& (0+255),w,b
  4417  0008FC  B4D8               	btfsc	status,2,c
  4418  0008FE  D1D5               	goto	l5408
  4419  000900  D7F2               	goto	l5296
  4420  000902                     l695:
  4421                           
  4422                           ; BSR set to: 1
  4423                           ;doprnt.c: 1246: }
  4424                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4425  000902  0101               	movlb	1	; () banked
  4426  000904  BF1B               	btfsc	printf@flag& (0+255),7,b
  4427  000906  D034               	goto	l743
  4428                           
  4429                           ; BSR set to: 1
  4430                           ;doprnt.c: 1253: {
  4431                           ;doprnt.c: 1255: if(flag & 0x10)
  4432  000908  0101               	movlb	1	; () banked
  4433  00090A  A91B               	btfss	printf@flag& (0+255),4,b
  4434  00090C  D00E               	goto	l5308
  4435                           
  4436                           ; BSR set to: 1
  4437                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  4438  00090E  C108  FFD9         	movff	printf@ap,fsr2l
  4439  000912  C109  FFDA         	movff	printf@ap+1,fsr2h
  4440  000916  CFDE F112          	movff	postinc2,printf@val
  4441  00091A  CFDE F113          	movff	postinc2,printf@val+1
  4442  00091E  CFDE F114          	movff	postinc2,printf@val+2
  4443  000922  CFDE F115          	movff	postinc2,printf@val+3
  4444                           
  4445                           ; BSR set to: 1
  4446  000926  0E04               	movlw	4
  4447  000928  D00F               	goto	L2
  4448  00092A                     l5308:
  4449                           
  4450                           ; BSR set to: 1
  4451                           ;doprnt.c: 1257: else
  4452                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4453  00092A  C108  FFD9         	movff	printf@ap,fsr2l
  4454  00092E  C109  FFDA         	movff	printf@ap+1,fsr2h
  4455  000932  CFDE F112          	movff	postinc2,printf@val
  4456  000936  CFDD F113          	movff	postdec2,printf@val+1
  4457  00093A  0101               	movlb	1	; () banked
  4458  00093C  0E00               	movlw	0
  4459  00093E  BF13               	btfsc	(printf@val+1)& (0+255),7,b
  4460  000940  0EFF               	movlw	-1
  4461  000942  6F14               	movwf	(printf@val+2)& (0+255),b
  4462  000944  6F15               	movwf	(printf@val+3)& (0+255),b
  4463                           
  4464                           ; BSR set to: 1
  4465  000946  0E02               	movlw	2
  4466  000948                     L2:
  4467  000948  0101               	movlb	1	; () banked
  4468  00094A  2708               	addwf	printf@ap& (0+255),f,b
  4469  00094C  0E00               	movlw	0
  4470  00094E  2309               	addwfc	(printf@ap+1)& (0+255),f,b
  4471                           
  4472                           ; BSR set to: 1
  4473                           ;doprnt.c: 1261: if((long)val < 0) {
  4474                           
  4475                           ; BSR set to: 1
  4476  000950  0101               	movlb	1	; () banked
  4477  000952  AF15               	btfss	(printf@val+3)& (0+255),7,b
  4478  000954  D07F               	goto	l5356
  4479                           
  4480                           ; BSR set to: 1
  4481                           ;doprnt.c: 1262: flag |= 0x03;
  4482  000956  0E03               	movlw	3
  4483  000958  0101               	movlb	1	; () banked
  4484  00095A  131B               	iorwf	printf@flag& (0+255),f,b
  4485                           
  4486                           ; BSR set to: 1
  4487                           ;doprnt.c: 1263: val = -val;
  4488  00095C  0101               	movlb	1	; () banked
  4489  00095E  1F15               	comf	(printf@val+3)& (0+255),f,b
  4490  000960  1F14               	comf	(printf@val+2)& (0+255),f,b
  4491  000962  1F13               	comf	(printf@val+1)& (0+255),f,b
  4492  000964  6D12               	negf	printf@val& (0+255),b
  4493  000966  0E00               	movlw	0
  4494  000968  2313               	addwfc	(printf@val+1)& (0+255),f,b
  4495  00096A  2314               	addwfc	(printf@val+2)& (0+255),f,b
  4496  00096C  2315               	addwfc	(printf@val+3)& (0+255),f,b
  4497                           
  4498                           ; BSR set to: 1
  4499                           ;doprnt.c: 1264: }
  4500                           ;doprnt.c: 1266: }
  4501  00096E  D072               	goto	l5356
  4502  000970                     l743:
  4503                           
  4504                           ; BSR set to: 1
  4505                           ;doprnt.c: 1268: else
  4506                           ;doprnt.c: 1273: {
  4507                           ;doprnt.c: 1281: if(flag & 0x10)
  4508  000970  0101               	movlb	1	; () banked
  4509  000972  A91B               	btfss	printf@flag& (0+255),4,b
  4510  000974  D00E               	goto	l5322
  4511                           
  4512                           ; BSR set to: 1
  4513                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  4514  000976  C108  FFD9         	movff	printf@ap,fsr2l
  4515  00097A  C109  FFDA         	movff	printf@ap+1,fsr2h
  4516  00097E  CFDE F112          	movff	postinc2,printf@val
  4517  000982  CFDE F113          	movff	postinc2,printf@val+1
  4518  000986  CFDE F114          	movff	postinc2,printf@val+2
  4519  00098A  CFDE F115          	movff	postinc2,printf@val+3
  4520                           
  4521                           ; BSR set to: 1
  4522  00098E  0E04               	movlw	4
  4523  000990  D010               	goto	L3
  4524  000992                     l5322:
  4525                           
  4526                           ; BSR set to: 1
  4527                           ;doprnt.c: 1283: else
  4528                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4529  000992  C108  FFD9         	movff	printf@ap,fsr2l
  4530  000996  C109  FFDA         	movff	printf@ap+1,fsr2h
  4531  00099A  CFDE F0DF          	movff	postinc2,??_printf
  4532  00099E  CFDD F0E0          	movff	postdec2,??_printf+1
  4533  0009A2  C0DF  F112         	movff	??_printf,printf@val
  4534  0009A6  C0E0  F113         	movff	??_printf+1,printf@val+1
  4535  0009AA  0101               	movlb	1	; () banked
  4536  0009AC  6B14               	clrf	(printf@val+2)& (0+255),b
  4537  0009AE  6B15               	clrf	(printf@val+3)& (0+255),b
  4538                           
  4539                           ; BSR set to: 1
  4540  0009B0  0E02               	movlw	2
  4541  0009B2                     L3:
  4542  0009B2  0101               	movlb	1	; () banked
  4543  0009B4  2708               	addwf	printf@ap& (0+255),f,b
  4544  0009B6  0E00               	movlw	0
  4545  0009B8  2309               	addwfc	(printf@ap+1)& (0+255),f,b
  4546                           
  4547                           ; BSR set to: 1
  4548                           ;doprnt.c: 1287: }
  4549                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4550                           
  4551                           ; BSR set to: 1
  4552  0009BA  D04C               	goto	l5356
  4553  0009BC                     l5326:
  4554                           
  4555                           ; BSR set to: 1
  4556                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4557  0009BC  0E01               	movlw	1
  4558  0009BE  0101               	movlb	1	; () banked
  4559  0009C0  6F1D               	movwf	printf@c& (0+255),b
  4560  0009C2                     l5328:
  4561                           
  4562                           ; BSR set to: 1
  4563  0009C2  0E0A               	movlw	10
  4564  0009C4  0101               	movlb	1	; () banked
  4565  0009C6  191D               	xorwf	printf@c& (0+255),w,b
  4566  0009C8  B4D8               	btfsc	status,2,c
  4567  0009CA  D04D               	goto	l5358
  4568                           
  4569                           ; BSR set to: 1
  4570                           ;doprnt.c: 1306: if(val < dpowers[c])
  4571                           
  4572                           ; BSR set to: 1
  4573                           
  4574                           ; BSR set to: 1
  4575  0009CC  0101               	movlb	1	; () banked
  4576  0009CE  511D               	movf	printf@c& (0+255),w,b
  4577  0009D0  0D04               	mullw	4
  4578  0009D2  0EC3               	movlw	low _dpowers
  4579  0009D4  24F3               	addwf	prodl,w,c
  4580  0009D6  6EF6               	movwf	tblptrl,c
  4581  0009D8  0EFD               	movlw	high _dpowers
  4582  0009DA  20F4               	addwfc	prodh,w,c
  4583  0009DC  6EF7               	movwf	tblptrh,c
  4584  0009DE                     	if	0	;There are less than 3 active tblptr bytes
  4585  0009DE                     	endif
  4586  0009DE  0009               	tblrd		*+
  4587  0009E0  50F5               	movf	tablat,w,c
  4588  0009E2  0101               	movlb	1	; () banked
  4589  0009E4  5D12               	subwf	printf@val& (0+255),w,b
  4590  0009E6  0009               	tblrd		*+
  4591  0009E8  50F5               	movf	tablat,w,c
  4592  0009EA  0101               	movlb	1	; () banked
  4593  0009EC  5913               	subwfb	(printf@val+1)& (0+255),w,b
  4594  0009EE  0009               	tblrd		*+
  4595  0009F0  50F5               	movf	tablat,w,c
  4596  0009F2  0101               	movlb	1	; () banked
  4597  0009F4  5914               	subwfb	(printf@val+2)& (0+255),w,b
  4598  0009F6  0009               	tblrd		*+
  4599  0009F8  50F5               	movf	tablat,w,c
  4600  0009FA  0101               	movlb	1	; () banked
  4601  0009FC  5915               	subwfb	(printf@val+3)& (0+255),w,b
  4602  0009FE  A0D8               	btfss	status,0,c
  4603  000A00  D032               	goto	l5358
  4604                           
  4605                           ; BSR set to: 1
  4606                           
  4607                           ; BSR set to: 1
  4608                           
  4609                           ; BSR set to: 1
  4610                           ;doprnt.c: 1307: break;
  4611  000A02  0101               	movlb	1	; () banked
  4612  000A04  2B1D               	incf	printf@c& (0+255),f,b
  4613  000A06  D7DD               	goto	l5328
  4614  000A08                     l5340:
  4615                           
  4616                           ; BSR set to: 1
  4617                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4618  000A08  0E01               	movlw	1
  4619  000A0A  0101               	movlb	1	; () banked
  4620  000A0C  6F1D               	movwf	printf@c& (0+255),b
  4621  000A0E                     l5342:
  4622                           
  4623                           ; BSR set to: 1
  4624  000A0E  0E08               	movlw	8
  4625  000A10  0101               	movlb	1	; () banked
  4626  000A12  191D               	xorwf	printf@c& (0+255),w,b
  4627  000A14  B4D8               	btfsc	status,2,c
  4628  000A16  D027               	goto	l5358
  4629                           
  4630                           ; BSR set to: 1
  4631                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4632                           
  4633                           ; BSR set to: 1
  4634                           
  4635                           ; BSR set to: 1
  4636  000A18  0101               	movlb	1	; () banked
  4637  000A1A  511D               	movf	printf@c& (0+255),w,b
  4638  000A1C  0D04               	mullw	4
  4639  000A1E  0E39               	movlw	low _hexpowers
  4640  000A20  24F3               	addwf	prodl,w,c
  4641  000A22  6EF6               	movwf	tblptrl,c
  4642  000A24  0EFE               	movlw	high _hexpowers
  4643  000A26  20F4               	addwfc	prodh,w,c
  4644  000A28  6EF7               	movwf	tblptrh,c
  4645  000A2A                     	if	0	;There are less than 3 active tblptr bytes
  4646  000A2A                     	endif
  4647  000A2A  0009               	tblrd		*+
  4648  000A2C  50F5               	movf	tablat,w,c
  4649  000A2E  0101               	movlb	1	; () banked
  4650  000A30  5D12               	subwf	printf@val& (0+255),w,b
  4651  000A32  0009               	tblrd		*+
  4652  000A34  50F5               	movf	tablat,w,c
  4653  000A36  0101               	movlb	1	; () banked
  4654  000A38  5913               	subwfb	(printf@val+1)& (0+255),w,b
  4655  000A3A  0009               	tblrd		*+
  4656  000A3C  50F5               	movf	tablat,w,c
  4657  000A3E  0101               	movlb	1	; () banked
  4658  000A40  5914               	subwfb	(printf@val+2)& (0+255),w,b
  4659  000A42  0009               	tblrd		*+
  4660  000A44  50F5               	movf	tablat,w,c
  4661  000A46  0101               	movlb	1	; () banked
  4662  000A48  5915               	subwfb	(printf@val+3)& (0+255),w,b
  4663  000A4A  A0D8               	btfss	status,0,c
  4664  000A4C  D00C               	goto	l5358
  4665                           
  4666                           ; BSR set to: 1
  4667                           
  4668                           ; BSR set to: 1
  4669                           
  4670                           ; BSR set to: 1
  4671                           ;doprnt.c: 1318: break;
  4672  000A4E  0101               	movlb	1	; () banked
  4673  000A50  2B1D               	incf	printf@c& (0+255),f,b
  4674  000A52  D7DD               	goto	l5342
  4675  000A54                     l5356:
  4676                           
  4677                           ; BSR set to: 1
  4678  000A54  0101               	movlb	1	; () banked
  4679  000A56  511B               	movf	printf@flag& (0+255),w,b
  4680  000A58  0B80               	andlw	128
  4681                           
  4682                           ; Switch size 1, requested type "space"
  4683                           ; Number of cases is 2, Range of values is 0 to 128
  4684                           ; switch strategies available:
  4685                           ; Name         Instructions Cycles
  4686                           ; simple_byte            7     4 (average)
  4687                           ;	Chosen strategy is simple_byte
  4688  000A5A  0A00               	xorlw	0	; case 0
  4689  000A5C  B4D8               	btfsc	status,2,c
  4690  000A5E  D7AE               	goto	l5326
  4691  000A60  0A80               	xorlw	128	; case 128
  4692  000A62  B4D8               	btfsc	status,2,c
  4693  000A64  D7D1               	goto	l5340
  4694  000A66                     l5358:
  4695                           
  4696                           ; BSR set to: 1
  4697                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4698  000A66  0101               	movlb	1	; () banked
  4699  000A68  5116               	movf	printf@width& (0+255),w,b
  4700  000A6A  0101               	movlb	1	; () banked
  4701  000A6C  1117               	iorwf	(printf@width+1)& (0+255),w,b
  4702  000A6E  B4D8               	btfsc	status,2,c
  4703  000A70  D014               	goto	l5364
  4704                           
  4705                           ; BSR set to: 1
  4706  000A72  0E03               	movlw	3
  4707  000A74  0101               	movlb	1	; () banked
  4708  000A76  151B               	andwf	printf@flag& (0+255),w,b
  4709  000A78  0100               	movlb	0	; () banked
  4710  000A7A  6FDF               	movwf	??_printf& (0+255),b
  4711  000A7C  0E00               	movlw	0
  4712  000A7E  0101               	movlb	1	; () banked
  4713  000A80  151C               	andwf	(printf@flag+1)& (0+255),w,b
  4714  000A82  0100               	movlb	0	; () banked
  4715  000A84  6FE0               	movwf	(??_printf+1)& (0+255),b
  4716  000A86  0100               	movlb	0	; () banked
  4717  000A88  51DF               	movf	??_printf& (0+255),w,b
  4718  000A8A  0100               	movlb	0	; () banked
  4719  000A8C  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  4720  000A8E  B4D8               	btfsc	status,2,c
  4721  000A90  D004               	goto	l5364
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;doprnt.c: 1346: width--;
  4725  000A92  0101               	movlb	1	; () banked
  4726  000A94  0716               	decf	printf@width& (0+255),f,b
  4727  000A96  A0D8               	btfss	status,0,c
  4728  000A98  0717               	decf	(printf@width+1)& (0+255),f,b
  4729  000A9A                     l5364:
  4730                           
  4731                           ;doprnt.c: 1381: if(width > c)
  4732  000A9A  0E80               	movlw	128
  4733  000A9C  0101               	movlb	1	; () banked
  4734  000A9E  BF1D               	btfsc	printf@c& (0+255),7,b
  4735  000AA0  0E7F               	movlw	127
  4736  000AA2  0100               	movlb	0	; () banked
  4737  000AA4  6FDF               	movwf	??_printf& (0+255),b
  4738  000AA6  0101               	movlb	1	; () banked
  4739  000AA8  5116               	movf	printf@width& (0+255),w,b
  4740  000AAA  0101               	movlb	1	; () banked
  4741  000AAC  5D1D               	subwf	printf@c& (0+255),w,b
  4742  000AAE  0101               	movlb	1	; () banked
  4743  000AB0  5117               	movf	(printf@width+1)& (0+255),w,b
  4744  000AB2  0A80               	xorlw	128
  4745  000AB4  0100               	movlb	0	; () banked
  4746  000AB6  59DF               	subwfb	??_printf& (0+255),w,b
  4747  000AB8  B0D8               	btfsc	status,0,c
  4748  000ABA  D00B               	goto	l5368
  4749                           
  4750                           ; BSR set to: 0
  4751                           ;doprnt.c: 1382: width -= c;
  4752  000ABC  0101               	movlb	1	; () banked
  4753  000ABE  511D               	movf	printf@c& (0+255),w,b
  4754  000AC0  0101               	movlb	1	; () banked
  4755  000AC2  5F16               	subwf	printf@width& (0+255),f,b
  4756  000AC4  0E00               	movlw	0
  4757  000AC6  0101               	movlb	1	; () banked
  4758  000AC8  BF1D               	btfsc	printf@c& (0+255),7,b
  4759  000ACA  0EFF               	movlw	255
  4760  000ACC  0101               	movlb	1	; () banked
  4761  000ACE  5B17               	subwfb	(printf@width+1)& (0+255),f,b
  4762  000AD0  D005               	goto	l5370
  4763  000AD2                     l5368:
  4764                           
  4765                           ;doprnt.c: 1383: else
  4766                           ;doprnt.c: 1384: width = 0;
  4767  000AD2  0E00               	movlw	0
  4768  000AD4  0101               	movlb	1	; () banked
  4769  000AD6  6F17               	movwf	(printf@width+1)& (0+255),b
  4770  000AD8  0E00               	movlw	0
  4771  000ADA  6F16               	movwf	printf@width& (0+255),b
  4772  000ADC                     l5370:
  4773                           
  4774                           ; BSR set to: 1
  4775                           ;doprnt.c: 1387: if(flag & 0x04) {
  4776  000ADC  0101               	movlb	1	; () banked
  4777  000ADE  A51B               	btfss	printf@flag& (0+255),2,b
  4778  000AE0  D021               	goto	l5382
  4779                           
  4780                           ; BSR set to: 1
  4781                           ;doprnt.c: 1392: if(flag & 0x03)
  4782  000AE2  0E03               	movlw	3
  4783  000AE4  0101               	movlb	1	; () banked
  4784  000AE6  151B               	andwf	printf@flag& (0+255),w,b
  4785  000AE8  0100               	movlb	0	; () banked
  4786  000AEA  6FDF               	movwf	??_printf& (0+255),b
  4787  000AEC  0E00               	movlw	0
  4788  000AEE  0101               	movlb	1	; () banked
  4789  000AF0  151C               	andwf	(printf@flag+1)& (0+255),w,b
  4790  000AF2  0100               	movlb	0	; () banked
  4791  000AF4  6FE0               	movwf	(??_printf+1)& (0+255),b
  4792  000AF6  0100               	movlb	0	; () banked
  4793  000AF8  51DF               	movf	??_printf& (0+255),w,b
  4794  000AFA  0100               	movlb	0	; () banked
  4795  000AFC  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  4796  000AFE  B4D8               	btfsc	status,2,c
  4797  000B00  D003               	goto	l5376
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;doprnt.c: 1393: (putch('-') );
  4801  000B02  0E2D               	movlw	45
  4802  000B04  EC7E  F028         	call	_putch
  4803  000B08                     l5376:
  4804                           
  4805                           ;doprnt.c: 1415: if(width)
  4806  000B08  0101               	movlb	1	; () banked
  4807  000B0A  5116               	movf	printf@width& (0+255),w,b
  4808  000B0C  0101               	movlb	1	; () banked
  4809  000B0E  1117               	iorwf	(printf@width+1)& (0+255),w,b
  4810  000B10  B4D8               	btfsc	status,2,c
  4811  000B12  D02E               	goto	l5392
  4812                           
  4813                           ; BSR set to: 1
  4814                           ;doprnt.c: 1417: (putch('0') );
  4815                           
  4816                           ; BSR set to: 1
  4817                           
  4818                           ;doprnt.c: 1416: do
  4819  000B14  0E30               	movlw	48
  4820  000B16  EC7E  F028         	call	_putch
  4821                           
  4822                           ;doprnt.c: 1418: while(--width);
  4823  000B1A  0101               	movlb	1	; () banked
  4824  000B1C  0716               	decf	printf@width& (0+255),f,b
  4825  000B1E  A0D8               	btfss	status,0,c
  4826  000B20  0717               	decf	(printf@width+1)& (0+255),f,b
  4827  000B22  D7F2               	goto	l5376
  4828  000B24                     l5382:
  4829                           
  4830                           ; BSR set to: 1
  4831                           ;doprnt.c: 1422: {
  4832                           ;doprnt.c: 1424: if(width
  4833                           ;doprnt.c: 1428: )
  4834  000B24  0101               	movlb	1	; () banked
  4835  000B26  5116               	movf	printf@width& (0+255),w,b
  4836  000B28  0101               	movlb	1	; () banked
  4837  000B2A  1117               	iorwf	(printf@width+1)& (0+255),w,b
  4838  000B2C  B4D8               	btfsc	status,2,c
  4839  000B2E  D00D               	goto	l5388
  4840  000B30                     l5384:
  4841                           
  4842                           ; BSR set to: 1
  4843                           ;doprnt.c: 1430: (putch(' ') );
  4844  000B30  0E20               	movlw	32
  4845  000B32  EC7E  F028         	call	_putch
  4846                           
  4847                           ;doprnt.c: 1431: while(--width);
  4848  000B36  0101               	movlb	1	; () banked
  4849  000B38  0716               	decf	printf@width& (0+255),f,b
  4850  000B3A  A0D8               	btfss	status,0,c
  4851  000B3C  0717               	decf	(printf@width+1)& (0+255),f,b
  4852  000B3E  0101               	movlb	1	; () banked
  4853  000B40  5116               	movf	printf@width& (0+255),w,b
  4854  000B42  0101               	movlb	1	; () banked
  4855  000B44  1117               	iorwf	(printf@width+1)& (0+255),w,b
  4856  000B46  A4D8               	btfss	status,2,c
  4857  000B48  D7F3               	goto	l5384
  4858  000B4A                     l5388:
  4859                           
  4860                           ; BSR set to: 1
  4861                           ;doprnt.c: 1438: if(flag & 0x03)
  4862  000B4A  0E03               	movlw	3
  4863  000B4C  0101               	movlb	1	; () banked
  4864  000B4E  151B               	andwf	printf@flag& (0+255),w,b
  4865  000B50  0100               	movlb	0	; () banked
  4866  000B52  6FDF               	movwf	??_printf& (0+255),b
  4867  000B54  0E00               	movlw	0
  4868  000B56  0101               	movlb	1	; () banked
  4869  000B58  151C               	andwf	(printf@flag+1)& (0+255),w,b
  4870  000B5A  0100               	movlb	0	; () banked
  4871  000B5C  6FE0               	movwf	(??_printf+1)& (0+255),b
  4872  000B5E  0100               	movlb	0	; () banked
  4873  000B60  51DF               	movf	??_printf& (0+255),w,b
  4874  000B62  0100               	movlb	0	; () banked
  4875  000B64  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  4876  000B66  B4D8               	btfsc	status,2,c
  4877  000B68  D003               	goto	l5392
  4878                           
  4879                           ; BSR set to: 0
  4880                           ;doprnt.c: 1439: (putch('-') );
  4881  000B6A  0E2D               	movlw	45
  4882  000B6C  EC7E  F028         	call	_putch
  4883  000B70                     l5392:
  4884                           
  4885                           ;doprnt.c: 1469: }
  4886                           ;doprnt.c: 1472: prec = c;
  4887  000B70  0101               	movlb	1	; () banked
  4888  000B72  511D               	movf	printf@c& (0+255),w,b
  4889  000B74  0101               	movlb	1	; () banked
  4890  000B76  6F0A               	movwf	printf@prec& (0+255),b
  4891  000B78  6B0B               	clrf	(printf@prec+1)& (0+255),b
  4892  000B7A  BF0A               	btfsc	printf@prec& (0+255),7,b
  4893  000B7C  070B               	decf	(printf@prec+1)& (0+255),f,b
  4894                           
  4895                           ;doprnt.c: 1474: while(prec--) {
  4896  000B7E  D08A               	goto	l5406
  4897  000B80                     l5394:
  4898                           
  4899                           ; BSR set to: 1
  4900                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4901  000B80  C10A  F0DF         	movff	printf@prec,??_printf
  4902  000B84  C10B  F0E0         	movff	printf@prec+1,??_printf+1
  4903  000B88  0100               	movlb	0	; () banked
  4904  000B8A  90D8               	bcf	status,0,c
  4905  000B8C  37DF               	rlcf	??_printf& (0+255),f,b
  4906  000B8E  37E0               	rlcf	(??_printf+1)& (0+255),f,b
  4907  000B90  0100               	movlb	0	; () banked
  4908  000B92  90D8               	bcf	status,0,c
  4909  000B94  37DF               	rlcf	??_printf& (0+255),f,b
  4910  000B96  37E0               	rlcf	(??_printf+1)& (0+255),f,b
  4911  000B98  0EC3               	movlw	low _dpowers
  4912  000B9A  0100               	movlb	0	; () banked
  4913  000B9C  25DF               	addwf	??_printf& (0+255),w,b
  4914  000B9E  6EF6               	movwf	tblptrl,c
  4915  000BA0  0EFD               	movlw	high _dpowers
  4916  000BA2  21E0               	addwfc	(??_printf+1)& (0+255),w,b
  4917  000BA4  6EF7               	movwf	tblptrh,c
  4918  000BA6                     	if	0	;There are less than 3 active tblptr bytes
  4919  000BA6                     	endif
  4920  000BA6  0009               	tblrd		*+
  4921  000BA8  CFF5 F084          	movff	tablat,___lldiv@divisor
  4922  000BAC  0009               	tblrd		*+
  4923  000BAE  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  4924  000BB2  0009               	tblrd		*+
  4925  000BB4  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  4926  000BB8  000A               	tblrd		*-
  4927  000BBA  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  4928  000BBE  C112  F080         	movff	printf@val,___lldiv@dividend
  4929  000BC2  C113  F081         	movff	printf@val+1,___lldiv@dividend+1
  4930  000BC6  C114  F082         	movff	printf@val+2,___lldiv@dividend+2
  4931  000BCA  C115  F083         	movff	printf@val+3,___lldiv@dividend+3
  4932  000BCE  EC96  F022         	call	___lldiv	;wreg free
  4933  000BD2  C080  F08D         	movff	?___lldiv,___llmod@dividend
  4934  000BD6  C081  F08E         	movff	?___lldiv+1,___llmod@dividend+1
  4935  000BDA  C082  F08F         	movff	?___lldiv+2,___llmod@dividend+2
  4936  000BDE  C083  F090         	movff	?___lldiv+3,___llmod@dividend+3
  4937  000BE2  0E0A               	movlw	10
  4938  000BE4  0100               	movlb	0	; () banked
  4939  000BE6  6F91               	movwf	___llmod@divisor& (0+255),b
  4940  000BE8  0E00               	movlw	0
  4941  000BEA  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  4942  000BEC  0E00               	movlw	0
  4943  000BEE  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  4944  000BF0  0E00               	movlw	0
  4945  000BF2  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  4946  000BF4  ECEB  F023         	call	___llmod	;wreg free
  4947  000BF8  0100               	movlb	0	; () banked
  4948  000BFA  518D               	movf	?___llmod& (0+255),w,b
  4949  000BFC  0F30               	addlw	48
  4950  000BFE  0101               	movlb	1	; () banked
  4951  000C00  6F1D               	movwf	printf@c& (0+255),b
  4952                           
  4953                           ;doprnt.c: 1491: break;
  4954  000C02  D044               	goto	l5404
  4955  000C04                     l5396:
  4956                           
  4957                           ; BSR set to: 1
  4958                           ;doprnt.c: 1499: {
  4959                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4960  000C04  C112  F080         	movff	printf@val,___lldiv@dividend
  4961  000C08  C113  F081         	movff	printf@val+1,___lldiv@dividend+1
  4962  000C0C  C114  F082         	movff	printf@val+2,___lldiv@dividend+2
  4963  000C10  C115  F083         	movff	printf@val+3,___lldiv@dividend+3
  4964  000C14  C10A  F0DF         	movff	printf@prec,??_printf
  4965  000C18  C10B  F0E0         	movff	printf@prec+1,??_printf+1
  4966  000C1C  0100               	movlb	0	; () banked
  4967  000C1E  90D8               	bcf	status,0,c
  4968  000C20  37DF               	rlcf	??_printf& (0+255),f,b
  4969  000C22  37E0               	rlcf	(??_printf+1)& (0+255),f,b
  4970  000C24  0100               	movlb	0	; () banked
  4971  000C26  90D8               	bcf	status,0,c
  4972  000C28  37DF               	rlcf	??_printf& (0+255),f,b
  4973  000C2A  37E0               	rlcf	(??_printf+1)& (0+255),f,b
  4974  000C2C  0E39               	movlw	low _hexpowers
  4975  000C2E  0100               	movlb	0	; () banked
  4976  000C30  25DF               	addwf	??_printf& (0+255),w,b
  4977  000C32  6EF6               	movwf	tblptrl,c
  4978  000C34  0EFE               	movlw	high _hexpowers
  4979  000C36  21E0               	addwfc	(??_printf+1)& (0+255),w,b
  4980  000C38  6EF7               	movwf	tblptrh,c
  4981  000C3A                     	if	0	;There are less than 3 active tblptr bytes
  4982  000C3A                     	endif
  4983  000C3A  0009               	tblrd		*+
  4984  000C3C  CFF5 F084          	movff	tablat,___lldiv@divisor
  4985  000C40  0009               	tblrd		*+
  4986  000C42  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  4987  000C46  0009               	tblrd		*+
  4988  000C48  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  4989  000C4C  000A               	tblrd		*-
  4990  000C4E  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  4991  000C52  EC96  F022         	call	___lldiv	;wreg free
  4992  000C56  0100               	movlb	0	; () banked
  4993  000C58  5180               	movf	?___lldiv& (0+255),w,b
  4994  000C5A  0B0F               	andlw	15
  4995  000C5C  0101               	movlb	1	; () banked
  4996  000C5E  6F05               	movwf	printf@idx& (0+255),b
  4997                           
  4998                           ; BSR set to: 1
  4999                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5000  000C60  0101               	movlb	1	; () banked
  5001  000C62  5105               	movf	printf@idx& (0+255),w,b
  5002  000C64  0D01               	mullw	1
  5003  000C66  0E1F               	movlw	low STR_24
  5004  000C68  24F3               	addwf	prodl,w,c
  5005  000C6A  6EF6               	movwf	tblptrl,c
  5006  000C6C  0EFF               	movlw	high STR_24
  5007  000C6E  20F4               	addwfc	prodh,w,c
  5008  000C70  6EF7               	movwf	tblptrh,c
  5009  000C72                     	if	0	;There are less than 3 active tblptr bytes
  5010  000C72                     	endif
  5011  000C72  0008               	tblrd		*
  5012  000C74  CFF5 F11D          	movff	tablat,printf@c
  5013                           
  5014                           ; BSR set to: 1
  5015                           ;doprnt.c: 1523: }
  5016                           
  5017                           ;doprnt.c: 1508: }
  5018                           ;doprnt.c: 1510: break;
  5019  000C78  D009               	goto	l5404
  5020  000C7A                     l5402:
  5021                           
  5022                           ; BSR set to: 1
  5023  000C7A  0101               	movlb	1	; () banked
  5024  000C7C  511B               	movf	printf@flag& (0+255),w,b
  5025  000C7E  0B80               	andlw	128
  5026                           
  5027                           ; Switch size 1, requested type "space"
  5028                           ; Number of cases is 2, Range of values is 0 to 128
  5029                           ; switch strategies available:
  5030                           ; Name         Instructions Cycles
  5031                           ; simple_byte            7     4 (average)
  5032                           ;	Chosen strategy is simple_byte
  5033  000C80  0A00               	xorlw	0	; case 0
  5034  000C82  B4D8               	btfsc	status,2,c
  5035  000C84  D77D               	goto	l5394
  5036  000C86  0A80               	xorlw	128	; case 128
  5037  000C88  B4D8               	btfsc	status,2,c
  5038  000C8A  D7BC               	goto	l5396
  5039  000C8C                     l5404:
  5040                           
  5041                           ; BSR set to: 1
  5042                           ;doprnt.c: 1524: (putch(c) );
  5043  000C8C  0101               	movlb	1	; () banked
  5044  000C8E  511D               	movf	printf@c& (0+255),w,b
  5045  000C90  EC7E  F028         	call	_putch
  5046  000C94                     l5406:
  5047  000C94  0101               	movlb	1	; () banked
  5048  000C96  070A               	decf	printf@prec& (0+255),f,b
  5049  000C98  A0D8               	btfss	status,0,c
  5050  000C9A  070B               	decf	(printf@prec+1)& (0+255),f,b
  5051  000C9C  0101               	movlb	1	; () banked
  5052  000C9E  290A               	incf	printf@prec& (0+255),w,b
  5053  000CA0  E1EC               	bnz	l5402
  5054  000CA2  0101               	movlb	1	; () banked
  5055  000CA4  290B               	incf	(printf@prec+1)& (0+255),w,b
  5056  000CA6  A4D8               	btfss	status,2,c
  5057  000CA8  D7E8               	goto	l5402
  5058  000CAA                     l5408:
  5059  000CAA  C0D5  FFF6         	movff	printf@f,tblptrl
  5060  000CAE  C0D6  FFF7         	movff	printf@f+1,tblptrh
  5061  000CB2  0100               	movlb	0	; () banked
  5062  000CB4  4BD5               	infsnz	printf@f& (0+255),f,b
  5063  000CB6  2BD6               	incf	(printf@f+1)& (0+255),f,b
  5064  000CB8                     	if	0	;tblptru may be non-zero
  5065  000CB8                     	endif
  5066  000CB8                     	if	0	;tblptru may be non-zero
  5067  000CB8                     	endif
  5068  000CB8  0008               	tblrd		*
  5069  000CBA  CFF5 F11D          	movff	tablat,printf@c
  5070  000CBE  0101               	movlb	1	; () banked
  5071  000CC0  511D               	movf	printf@c& (0+255),w,b
  5072  000CC2  B4D8               	btfsc	status,2,c
  5073  000CC4  0012               	return	
  5074  000CC6  EF11  F000         	goto	l5086
  5075  000CCA                     __end_of_printf:
  5076                           	opt stack 0
  5077                           tblptru	equ	0xFF8
  5078                           tblptrh	equ	0xFF7
  5079                           tblptrl	equ	0xFF6
  5080                           tablat	equ	0xFF5
  5081                           prodh	equ	0xFF4
  5082                           prodl	equ	0xFF3
  5083                           postinc0	equ	0xFEE
  5084                           wreg	equ	0xFE8
  5085                           postdec1	equ	0xFE5
  5086                           fsr1l	equ	0xFE1
  5087                           indf2	equ	0xFDF
  5088                           postinc2	equ	0xFDE
  5089                           postdec2	equ	0xFDD
  5090                           fsr2h	equ	0xFDA
  5091                           fsr2l	equ	0xFD9
  5092                           status	equ	0xFD8
  5093                           
  5094 ;; *************** function _scale *****************
  5095 ;; Defined at:
  5096 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5097 ;; Parameters:    Size  Location     Type
  5098 ;;  scl             1    wreg     char 
  5099 ;; Auto vars:     Size  Location     Type
  5100 ;;  scl             1   54[BANK0 ] char 
  5101 ;; Return value:  Size  Location     Type
  5102 ;;                  3   48[BANK0 ] char 
  5103 ;; Registers used:
  5104 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5105 ;; Tracked objects:
  5106 ;;		On entry : 0/0
  5107 ;;		On exit  : 0/0
  5108 ;;		Unchanged: 0/0
  5109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5110 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5111 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5113 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5114 ;;Total ram usage:        7 bytes
  5115 ;; Hardware stack levels used:    1
  5116 ;; Hardware stack levels required when called:    8
  5117 ;; This function calls:
  5118 ;;		___awdiv
  5119 ;;		___awmod
  5120 ;;		___ftmul
  5121 ;;		___wmul
  5122 ;; This function is called by:
  5123 ;;		_printf
  5124 ;; This function uses a non-reentrant model
  5125 ;;
  5126                           
  5127                           	psect	text5
  5128  001752                     __ptext5:
  5129                           	opt stack 0
  5130  001752                     _scale:
  5131                           	opt stack 20
  5132                           
  5133                           ;incstack = 0
  5134                           ;scale@scl stored from wreg
  5135  001752  0100               	movlb	0	; () banked
  5136  001754  6FB6               	movwf	scale@scl& (0+255),b
  5137                           
  5138                           ;doprnt.c: 428: if(scl < 0) {
  5139  001756  0100               	movlb	0	; () banked
  5140  001758  AFB6               	btfss	scale@scl& (0+255),7,b
  5141  00175A  D12A               	goto	l4694
  5142                           
  5143                           ; BSR set to: 0
  5144                           ;doprnt.c: 429: scl = -scl;
  5145  00175C  0100               	movlb	0	; () banked
  5146  00175E  6DB6               	negf	scale@scl& (0+255),b
  5147                           
  5148                           ;doprnt.c: 430: if(scl>=110)
  5149  001760  0100               	movlb	0	; () banked
  5150  001762  51B6               	movf	scale@scl& (0+255),w,b
  5151  001764  0A80               	xorlw	128
  5152  001766  0F12               	addlw	-238
  5153  001768  A0D8               	btfss	status,0,c
  5154  00176A  D0AC               	goto	l4684
  5155                           
  5156                           ; BSR set to: 0
  5157                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5158  00176C  0E00               	movlw	0
  5159  00176E  0100               	movlb	0	; () banked
  5160  001770  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5161  001772  0E03               	movlw	3
  5162  001774  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5163  001776  0E00               	movlw	0
  5164  001778  0100               	movlb	0	; () banked
  5165  00177A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5166  00177C  0E0A               	movlw	10
  5167  00177E  6F88               	movwf	___awdiv@divisor& (0+255),b
  5168  001780  0E00               	movlw	0
  5169  001782  0100               	movlb	0	; () banked
  5170  001784  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5171  001786  0E64               	movlw	100
  5172  001788  6F82               	movwf	___awmod@divisor& (0+255),b
  5173  00178A  0100               	movlb	0	; () banked
  5174  00178C  51B6               	movf	scale@scl& (0+255),w,b
  5175  00178E  0100               	movlb	0	; () banked
  5176  001790  6F80               	movwf	___awmod@dividend& (0+255),b
  5177  001792  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5178  001794  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  5179  001796  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  5180  001798  EC4B  F023         	call	___awmod	;wreg free
  5181  00179C  C080  F086         	movff	?___awmod,___awdiv@dividend
  5182  0017A0  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  5183  0017A4  EC37  F022         	call	___awdiv	;wreg free
  5184  0017A8  0E09               	movlw	9
  5185  0017AA  0100               	movlb	0	; () banked
  5186  0017AC  2586               	addwf	?___awdiv& (0+255),w,b
  5187  0017AE  0100               	movlb	0	; () banked
  5188  0017B0  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5189  0017B2  0E00               	movlw	0
  5190  0017B4  0100               	movlb	0	; () banked
  5191  0017B6  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5192  0017B8  0100               	movlb	0	; () banked
  5193  0017BA  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5194  0017BC  ECF5  F027         	call	___wmul	;wreg free
  5195  0017C0  0EEB               	movlw	low __npowers_
  5196  0017C2  0100               	movlb	0	; () banked
  5197  0017C4  258E               	addwf	?___wmul& (0+255),w,b
  5198  0017C6  6EF6               	movwf	tblptrl,c
  5199  0017C8  0EFD               	movlw	high __npowers_
  5200  0017CA  0100               	movlb	0	; () banked
  5201  0017CC  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5202  0017CE  6EF7               	movwf	tblptrh,c
  5203  0017D0                     	if	0	;There are less than 3 active tblptr bytes
  5204  0017D0                     	endif
  5205  0017D0  0009               	tblrd		*+
  5206  0017D2  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5207  0017D6  0009               	tblrd		*+
  5208  0017D8  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5209  0017DC  000A               	tblrd		*-
  5210  0017DE  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5211  0017E2  0E00               	movlw	0
  5212  0017E4  0100               	movlb	0	; () banked
  5213  0017E6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5214  0017E8  0E64               	movlw	100
  5215  0017EA  6F88               	movwf	___awdiv@divisor& (0+255),b
  5216  0017EC  0100               	movlb	0	; () banked
  5217  0017EE  51B6               	movf	scale@scl& (0+255),w,b
  5218  0017F0  0100               	movlb	0	; () banked
  5219  0017F2  6F86               	movwf	___awdiv@dividend& (0+255),b
  5220  0017F4  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  5221  0017F6  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  5222  0017F8  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  5223  0017FA  EC37  F022         	call	___awdiv	;wreg free
  5224  0017FE  0E12               	movlw	18
  5225  001800  0100               	movlb	0	; () banked
  5226  001802  2586               	addwf	?___awdiv& (0+255),w,b
  5227  001804  0100               	movlb	0	; () banked
  5228  001806  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5229  001808  0E00               	movlw	0
  5230  00180A  0100               	movlb	0	; () banked
  5231  00180C  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5232  00180E  0100               	movlb	0	; () banked
  5233  001810  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5234  001812  0E00               	movlw	0
  5235  001814  0100               	movlb	0	; () banked
  5236  001816  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5237  001818  0E03               	movlw	3
  5238  00181A  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5239  00181C  ECF5  F027         	call	___wmul	;wreg free
  5240  001820  0EEB               	movlw	low __npowers_
  5241  001822  0100               	movlb	0	; () banked
  5242  001824  258E               	addwf	?___wmul& (0+255),w,b
  5243  001826  6EF6               	movwf	tblptrl,c
  5244  001828  0EFD               	movlw	high __npowers_
  5245  00182A  0100               	movlb	0	; () banked
  5246  00182C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5247  00182E  6EF7               	movwf	tblptrh,c
  5248  001830                     	if	0	;There are less than 3 active tblptr bytes
  5249  001830                     	endif
  5250  001830  0009               	tblrd		*+
  5251  001832  CFF5 F0A1          	movff	tablat,___ftmul@f1
  5252  001836  0009               	tblrd		*+
  5253  001838  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  5254  00183C  000A               	tblrd		*-
  5255  00183E  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  5256  001842  EC63  F019         	call	___ftmul	;wreg free
  5257  001846  C0A1  F0B3         	movff	?___ftmul,_scale$1339
  5258  00184A  C0A2  F0B4         	movff	?___ftmul+1,_scale$1339+1
  5259  00184E  C0A3  F0B5         	movff	?___ftmul+2,_scale$1339+2
  5260                           
  5261                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5262  001852  C0B3  F0A1         	movff	_scale$1339,___ftmul@f1
  5263  001856  C0B4  F0A2         	movff	_scale$1339+1,___ftmul@f1+1
  5264  00185A  C0B5  F0A3         	movff	_scale$1339+2,___ftmul@f1+2
  5265  00185E  0E00               	movlw	0
  5266  001860  0100               	movlb	0	; () banked
  5267  001862  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5268  001864  0E03               	movlw	3
  5269  001866  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5270  001868  0E00               	movlw	0
  5271  00186A  0100               	movlb	0	; () banked
  5272  00186C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5273  00186E  0E0A               	movlw	10
  5274  001870  6F82               	movwf	___awmod@divisor& (0+255),b
  5275  001872  0100               	movlb	0	; () banked
  5276  001874  51B6               	movf	scale@scl& (0+255),w,b
  5277  001876  0100               	movlb	0	; () banked
  5278  001878  6F80               	movwf	___awmod@dividend& (0+255),b
  5279  00187A  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5280  00187C  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  5281  00187E  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  5282  001880  EC4B  F023         	call	___awmod	;wreg free
  5283  001884  C080  F08E         	movff	?___awmod,___wmul@multiplier
  5284  001888  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  5285  00188C  ECF5  F027         	call	___wmul	;wreg free
  5286  001890  0EEB               	movlw	low __npowers_
  5287  001892  0100               	movlb	0	; () banked
  5288  001894  258E               	addwf	?___wmul& (0+255),w,b
  5289  001896  6EF6               	movwf	tblptrl,c
  5290  001898  0EFD               	movlw	high __npowers_
  5291  00189A  0100               	movlb	0	; () banked
  5292  00189C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5293  00189E  6EF7               	movwf	tblptrh,c
  5294  0018A0                     	if	0	;There are less than 3 active tblptr bytes
  5295  0018A0                     	endif
  5296  0018A0  0009               	tblrd		*+
  5297  0018A2  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5298  0018A6  0009               	tblrd		*+
  5299  0018A8  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5300  0018AC  000A               	tblrd		*-
  5301  0018AE  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5302  0018B2  EC63  F019         	call	___ftmul	;wreg free
  5303  0018B6  C0A1  F0B0         	movff	?___ftmul,?_scale
  5304  0018BA  C0A2  F0B1         	movff	?___ftmul+1,?_scale+1
  5305  0018BE  C0A3  F0B2         	movff	?___ftmul+2,?_scale+2
  5306  0018C2  0012               	return	
  5307  0018C4                     l4684:
  5308                           
  5309                           ;doprnt.c: 432: else if(scl > 10)
  5310  0018C4  0100               	movlb	0	; () banked
  5311  0018C6  51B6               	movf	scale@scl& (0+255),w,b
  5312  0018C8  0A80               	xorlw	128
  5313  0018CA  0F75               	addlw	-139
  5314  0018CC  A0D8               	btfss	status,0,c
  5315  0018CE  D05D               	goto	l4690
  5316                           
  5317                           ; BSR set to: 0
  5318                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5319  0018D0  0E00               	movlw	0
  5320  0018D2  0100               	movlb	0	; () banked
  5321  0018D4  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5322  0018D6  0E0A               	movlw	10
  5323  0018D8  6F88               	movwf	___awdiv@divisor& (0+255),b
  5324  0018DA  0100               	movlb	0	; () banked
  5325  0018DC  51B6               	movf	scale@scl& (0+255),w,b
  5326  0018DE  0100               	movlb	0	; () banked
  5327  0018E0  6F86               	movwf	___awdiv@dividend& (0+255),b
  5328  0018E2  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  5329  0018E4  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  5330  0018E6  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  5331  0018E8  EC37  F022         	call	___awdiv	;wreg free
  5332  0018EC  0E09               	movlw	9
  5333  0018EE  0100               	movlb	0	; () banked
  5334  0018F0  2586               	addwf	?___awdiv& (0+255),w,b
  5335  0018F2  0100               	movlb	0	; () banked
  5336  0018F4  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5337  0018F6  0E00               	movlw	0
  5338  0018F8  0100               	movlb	0	; () banked
  5339  0018FA  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5340  0018FC  0100               	movlb	0	; () banked
  5341  0018FE  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5342  001900  0E00               	movlw	0
  5343  001902  0100               	movlb	0	; () banked
  5344  001904  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5345  001906  0E03               	movlw	3
  5346  001908  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5347  00190A  ECF5  F027         	call	___wmul	;wreg free
  5348  00190E  0EEB               	movlw	low __npowers_
  5349  001910  0100               	movlb	0	; () banked
  5350  001912  258E               	addwf	?___wmul& (0+255),w,b
  5351  001914  6EF6               	movwf	tblptrl,c
  5352  001916  0EFD               	movlw	high __npowers_
  5353  001918  0100               	movlb	0	; () banked
  5354  00191A  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5355  00191C  6EF7               	movwf	tblptrh,c
  5356  00191E                     	if	0	;There are less than 3 active tblptr bytes
  5357  00191E                     	endif
  5358  00191E  0009               	tblrd		*+
  5359  001920  CFF5 F0A1          	movff	tablat,___ftmul@f1
  5360  001924  0009               	tblrd		*+
  5361  001926  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  5362  00192A  000A               	tblrd		*-
  5363  00192C  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  5364  001930  0E00               	movlw	0
  5365  001932  0100               	movlb	0	; () banked
  5366  001934  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5367  001936  0E03               	movlw	3
  5368  001938  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5369  00193A  0E00               	movlw	0
  5370  00193C  0100               	movlb	0	; () banked
  5371  00193E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5372  001940  0E0A               	movlw	10
  5373  001942  6F82               	movwf	___awmod@divisor& (0+255),b
  5374  001944  0100               	movlb	0	; () banked
  5375  001946  51B6               	movf	scale@scl& (0+255),w,b
  5376  001948  0100               	movlb	0	; () banked
  5377  00194A  6F80               	movwf	___awmod@dividend& (0+255),b
  5378  00194C  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5379  00194E  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  5380  001950  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  5381  001952  EC4B  F023         	call	___awmod	;wreg free
  5382  001956  C080  F08E         	movff	?___awmod,___wmul@multiplier
  5383  00195A  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  5384  00195E  ECF5  F027         	call	___wmul	;wreg free
  5385  001962  0EEB               	movlw	low __npowers_
  5386  001964  0100               	movlb	0	; () banked
  5387  001966  258E               	addwf	?___wmul& (0+255),w,b
  5388  001968  6EF6               	movwf	tblptrl,c
  5389  00196A  0EFD               	movlw	high __npowers_
  5390  00196C  0100               	movlb	0	; () banked
  5391  00196E  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5392  001970  6EF7               	movwf	tblptrh,c
  5393  001972                     	if	0	;There are less than 3 active tblptr bytes
  5394  001972                     	endif
  5395  001972  0009               	tblrd		*+
  5396  001974  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5397  001978  0009               	tblrd		*+
  5398  00197A  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5399  00197E  000A               	tblrd		*-
  5400  001980  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5401  001984  EC63  F019         	call	___ftmul	;wreg free
  5402  001988  D796               	goto	L4
  5403  00198A                     l4690:
  5404                           
  5405                           ;doprnt.c: 434: return _npowers_[scl];
  5406  00198A  0100               	movlb	0	; () banked
  5407  00198C  51B6               	movf	scale@scl& (0+255),w,b
  5408  00198E  0D03               	mullw	3
  5409  001990  0EEB               	movlw	low __npowers_
  5410  001992  24F3               	addwf	prodl,w,c
  5411  001994  6EF6               	movwf	tblptrl,c
  5412  001996  0EFD               	movlw	high __npowers_
  5413  001998  20F4               	addwfc	prodh,w,c
  5414  00199A  6EF7               	movwf	tblptrh,c
  5415  00199C                     	if	0	;There are less than 3 active tblptr bytes
  5416  00199C                     	endif
  5417  00199C  0009               	tblrd		*+
  5418  00199E  CFF5 F0B0          	movff	tablat,?_scale
  5419  0019A2  0009               	tblrd		*+
  5420  0019A4  CFF5 F0B1          	movff	tablat,?_scale+1
  5421  0019A8  000A               	tblrd		*-
  5422  0019AA  CFF5 F0B2          	movff	tablat,?_scale+2
  5423                           
  5424                           ; BSR set to: 0
  5425  0019AE  0012               	return	
  5426  0019B0                     l4694:
  5427                           
  5428                           ; BSR set to: 0
  5429                           ;doprnt.c: 435: }
  5430                           ;doprnt.c: 436: if(scl>=110)
  5431  0019B0  0100               	movlb	0	; () banked
  5432  0019B2  51B6               	movf	scale@scl& (0+255),w,b
  5433  0019B4  0A80               	xorlw	128
  5434  0019B6  0F12               	addlw	-238
  5435  0019B8  A0D8               	btfss	status,0,c
  5436  0019BA  D0AC               	goto	l4702
  5437                           
  5438                           ; BSR set to: 0
  5439                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5440  0019BC  0E00               	movlw	0
  5441  0019BE  0100               	movlb	0	; () banked
  5442  0019C0  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5443  0019C2  0E03               	movlw	3
  5444  0019C4  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5445  0019C6  0E00               	movlw	0
  5446  0019C8  0100               	movlb	0	; () banked
  5447  0019CA  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5448  0019CC  0E0A               	movlw	10
  5449  0019CE  6F88               	movwf	___awdiv@divisor& (0+255),b
  5450  0019D0  0E00               	movlw	0
  5451  0019D2  0100               	movlb	0	; () banked
  5452  0019D4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5453  0019D6  0E64               	movlw	100
  5454  0019D8  6F82               	movwf	___awmod@divisor& (0+255),b
  5455  0019DA  0100               	movlb	0	; () banked
  5456  0019DC  51B6               	movf	scale@scl& (0+255),w,b
  5457  0019DE  0100               	movlb	0	; () banked
  5458  0019E0  6F80               	movwf	___awmod@dividend& (0+255),b
  5459  0019E2  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5460  0019E4  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  5461  0019E6  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  5462  0019E8  EC4B  F023         	call	___awmod	;wreg free
  5463  0019EC  C080  F086         	movff	?___awmod,___awdiv@dividend
  5464  0019F0  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  5465  0019F4  EC37  F022         	call	___awdiv	;wreg free
  5466  0019F8  0E09               	movlw	9
  5467  0019FA  0100               	movlb	0	; () banked
  5468  0019FC  2586               	addwf	?___awdiv& (0+255),w,b
  5469  0019FE  0100               	movlb	0	; () banked
  5470  001A00  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5471  001A02  0E00               	movlw	0
  5472  001A04  0100               	movlb	0	; () banked
  5473  001A06  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5474  001A08  0100               	movlb	0	; () banked
  5475  001A0A  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5476  001A0C  ECF5  F027         	call	___wmul	;wreg free
  5477  001A10  0E12               	movlw	low __powers_
  5478  001A12  0100               	movlb	0	; () banked
  5479  001A14  258E               	addwf	?___wmul& (0+255),w,b
  5480  001A16  6EF6               	movwf	tblptrl,c
  5481  001A18  0EFE               	movlw	high __powers_
  5482  001A1A  0100               	movlb	0	; () banked
  5483  001A1C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5484  001A1E  6EF7               	movwf	tblptrh,c
  5485  001A20                     	if	0	;There are less than 3 active tblptr bytes
  5486  001A20                     	endif
  5487  001A20  0009               	tblrd		*+
  5488  001A22  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5489  001A26  0009               	tblrd		*+
  5490  001A28  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5491  001A2C  000A               	tblrd		*-
  5492  001A2E  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5493  001A32  0E00               	movlw	0
  5494  001A34  0100               	movlb	0	; () banked
  5495  001A36  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5496  001A38  0E64               	movlw	100
  5497  001A3A  6F88               	movwf	___awdiv@divisor& (0+255),b
  5498  001A3C  0100               	movlb	0	; () banked
  5499  001A3E  51B6               	movf	scale@scl& (0+255),w,b
  5500  001A40  0100               	movlb	0	; () banked
  5501  001A42  6F86               	movwf	___awdiv@dividend& (0+255),b
  5502  001A44  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  5503  001A46  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  5504  001A48  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  5505  001A4A  EC37  F022         	call	___awdiv	;wreg free
  5506  001A4E  0E12               	movlw	18
  5507  001A50  0100               	movlb	0	; () banked
  5508  001A52  2586               	addwf	?___awdiv& (0+255),w,b
  5509  001A54  0100               	movlb	0	; () banked
  5510  001A56  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5511  001A58  0E00               	movlw	0
  5512  001A5A  0100               	movlb	0	; () banked
  5513  001A5C  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5514  001A5E  0100               	movlb	0	; () banked
  5515  001A60  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5516  001A62  0E00               	movlw	0
  5517  001A64  0100               	movlb	0	; () banked
  5518  001A66  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5519  001A68  0E03               	movlw	3
  5520  001A6A  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5521  001A6C  ECF5  F027         	call	___wmul	;wreg free
  5522  001A70  0E12               	movlw	low __powers_
  5523  001A72  0100               	movlb	0	; () banked
  5524  001A74  258E               	addwf	?___wmul& (0+255),w,b
  5525  001A76  6EF6               	movwf	tblptrl,c
  5526  001A78  0EFE               	movlw	high __powers_
  5527  001A7A  0100               	movlb	0	; () banked
  5528  001A7C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5529  001A7E  6EF7               	movwf	tblptrh,c
  5530  001A80                     	if	0	;There are less than 3 active tblptr bytes
  5531  001A80                     	endif
  5532  001A80  0009               	tblrd		*+
  5533  001A82  CFF5 F0A1          	movff	tablat,___ftmul@f1
  5534  001A86  0009               	tblrd		*+
  5535  001A88  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  5536  001A8C  000A               	tblrd		*-
  5537  001A8E  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  5538  001A92  EC63  F019         	call	___ftmul	;wreg free
  5539  001A96  C0A1  F0B3         	movff	?___ftmul,_scale$1339
  5540  001A9A  C0A2  F0B4         	movff	?___ftmul+1,_scale$1339+1
  5541  001A9E  C0A3  F0B5         	movff	?___ftmul+2,_scale$1339+2
  5542                           
  5543                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5544  001AA2  C0B3  F0A1         	movff	_scale$1339,___ftmul@f1
  5545  001AA6  C0B4  F0A2         	movff	_scale$1339+1,___ftmul@f1+1
  5546  001AAA  C0B5  F0A3         	movff	_scale$1339+2,___ftmul@f1+2
  5547  001AAE  0E00               	movlw	0
  5548  001AB0  0100               	movlb	0	; () banked
  5549  001AB2  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5550  001AB4  0E03               	movlw	3
  5551  001AB6  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5552  001AB8  0E00               	movlw	0
  5553  001ABA  0100               	movlb	0	; () banked
  5554  001ABC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5555  001ABE  0E0A               	movlw	10
  5556  001AC0  6F82               	movwf	___awmod@divisor& (0+255),b
  5557  001AC2  0100               	movlb	0	; () banked
  5558  001AC4  51B6               	movf	scale@scl& (0+255),w,b
  5559  001AC6  0100               	movlb	0	; () banked
  5560  001AC8  6F80               	movwf	___awmod@dividend& (0+255),b
  5561  001ACA  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5562  001ACC  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  5563  001ACE  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  5564  001AD0  EC4B  F023         	call	___awmod	;wreg free
  5565  001AD4  C080  F08E         	movff	?___awmod,___wmul@multiplier
  5566  001AD8  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  5567  001ADC  ECF5  F027         	call	___wmul	;wreg free
  5568  001AE0  0E12               	movlw	low __powers_
  5569  001AE2  0100               	movlb	0	; () banked
  5570  001AE4  258E               	addwf	?___wmul& (0+255),w,b
  5571  001AE6  6EF6               	movwf	tblptrl,c
  5572  001AE8  0EFE               	movlw	high __powers_
  5573  001AEA  0100               	movlb	0	; () banked
  5574  001AEC  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5575  001AEE  6EF7               	movwf	tblptrh,c
  5576  001AF0                     	if	0	;There are less than 3 active tblptr bytes
  5577  001AF0                     	endif
  5578  001AF0  0009               	tblrd		*+
  5579  001AF2  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5580  001AF6  0009               	tblrd		*+
  5581  001AF8  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5582  001AFC  000A               	tblrd		*-
  5583  001AFE  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5584  001B02  EC63  F019         	call	___ftmul	;wreg free
  5585  001B06  C0A1  F0B0         	movff	?___ftmul,?_scale
  5586  001B0A  C0A2  F0B1         	movff	?___ftmul+1,?_scale+1
  5587  001B0E  C0A3  F0B2         	movff	?___ftmul+2,?_scale+2
  5588  001B12  0012               	return	
  5589  001B14                     l4702:
  5590                           
  5591                           ;doprnt.c: 438: else if(scl > 10)
  5592  001B14  0100               	movlb	0	; () banked
  5593  001B16  51B6               	movf	scale@scl& (0+255),w,b
  5594  001B18  0A80               	xorlw	128
  5595  001B1A  0F75               	addlw	-139
  5596  001B1C  A0D8               	btfss	status,0,c
  5597  001B1E  D05D               	goto	l4708
  5598                           
  5599                           ; BSR set to: 0
  5600                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5601  001B20  0E00               	movlw	0
  5602  001B22  0100               	movlb	0	; () banked
  5603  001B24  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5604  001B26  0E0A               	movlw	10
  5605  001B28  6F88               	movwf	___awdiv@divisor& (0+255),b
  5606  001B2A  0100               	movlb	0	; () banked
  5607  001B2C  51B6               	movf	scale@scl& (0+255),w,b
  5608  001B2E  0100               	movlb	0	; () banked
  5609  001B30  6F86               	movwf	___awdiv@dividend& (0+255),b
  5610  001B32  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  5611  001B34  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  5612  001B36  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  5613  001B38  EC37  F022         	call	___awdiv	;wreg free
  5614  001B3C  0E09               	movlw	9
  5615  001B3E  0100               	movlb	0	; () banked
  5616  001B40  2586               	addwf	?___awdiv& (0+255),w,b
  5617  001B42  0100               	movlb	0	; () banked
  5618  001B44  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5619  001B46  0E00               	movlw	0
  5620  001B48  0100               	movlb	0	; () banked
  5621  001B4A  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5622  001B4C  0100               	movlb	0	; () banked
  5623  001B4E  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5624  001B50  0E00               	movlw	0
  5625  001B52  0100               	movlb	0	; () banked
  5626  001B54  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5627  001B56  0E03               	movlw	3
  5628  001B58  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5629  001B5A  ECF5  F027         	call	___wmul	;wreg free
  5630  001B5E  0E12               	movlw	low __powers_
  5631  001B60  0100               	movlb	0	; () banked
  5632  001B62  258E               	addwf	?___wmul& (0+255),w,b
  5633  001B64  6EF6               	movwf	tblptrl,c
  5634  001B66  0EFE               	movlw	high __powers_
  5635  001B68  0100               	movlb	0	; () banked
  5636  001B6A  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5637  001B6C  6EF7               	movwf	tblptrh,c
  5638  001B6E                     	if	0	;There are less than 3 active tblptr bytes
  5639  001B6E                     	endif
  5640  001B6E  0009               	tblrd		*+
  5641  001B70  CFF5 F0A1          	movff	tablat,___ftmul@f1
  5642  001B74  0009               	tblrd		*+
  5643  001B76  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  5644  001B7A  000A               	tblrd		*-
  5645  001B7C  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  5646  001B80  0E00               	movlw	0
  5647  001B82  0100               	movlb	0	; () banked
  5648  001B84  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5649  001B86  0E03               	movlw	3
  5650  001B88  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5651  001B8A  0E00               	movlw	0
  5652  001B8C  0100               	movlb	0	; () banked
  5653  001B8E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5654  001B90  0E0A               	movlw	10
  5655  001B92  6F82               	movwf	___awmod@divisor& (0+255),b
  5656  001B94  0100               	movlb	0	; () banked
  5657  001B96  51B6               	movf	scale@scl& (0+255),w,b
  5658  001B98  0100               	movlb	0	; () banked
  5659  001B9A  6F80               	movwf	___awmod@dividend& (0+255),b
  5660  001B9C  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5661  001B9E  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  5662  001BA0  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  5663  001BA2  EC4B  F023         	call	___awmod	;wreg free
  5664  001BA6  C080  F08E         	movff	?___awmod,___wmul@multiplier
  5665  001BAA  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  5666  001BAE  ECF5  F027         	call	___wmul	;wreg free
  5667  001BB2  0E12               	movlw	low __powers_
  5668  001BB4  0100               	movlb	0	; () banked
  5669  001BB6  258E               	addwf	?___wmul& (0+255),w,b
  5670  001BB8  6EF6               	movwf	tblptrl,c
  5671  001BBA  0EFE               	movlw	high __powers_
  5672  001BBC  0100               	movlb	0	; () banked
  5673  001BBE  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5674  001BC0  6EF7               	movwf	tblptrh,c
  5675  001BC2                     	if	0	;There are less than 3 active tblptr bytes
  5676  001BC2                     	endif
  5677  001BC2  0009               	tblrd		*+
  5678  001BC4  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5679  001BC8  0009               	tblrd		*+
  5680  001BCA  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5681  001BCE  000A               	tblrd		*-
  5682  001BD0  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5683  001BD4  EC63  F019         	call	___ftmul	;wreg free
  5684  001BD8  D796               	goto	L5
  5685  001BDA                     l4708:
  5686                           
  5687                           ;doprnt.c: 440: return _powers_[scl];
  5688  001BDA  0100               	movlb	0	; () banked
  5689  001BDC  51B6               	movf	scale@scl& (0+255),w,b
  5690  001BDE  0D03               	mullw	3
  5691  001BE0  0E12               	movlw	low __powers_
  5692  001BE2  24F3               	addwf	prodl,w,c
  5693  001BE4  6EF6               	movwf	tblptrl,c
  5694  001BE6  0EFE               	movlw	high __powers_
  5695  001BE8  20F4               	addwfc	prodh,w,c
  5696  001BEA  6EF7               	movwf	tblptrh,c
  5697  001BEC                     	if	0	;There are less than 3 active tblptr bytes
  5698  001BEC                     	endif
  5699  001BEC  0009               	tblrd		*+
  5700  001BEE  CFF5 F0B0          	movff	tablat,?_scale
  5701  001BF2  0009               	tblrd		*+
  5702  001BF4  CFF5 F0B1          	movff	tablat,?_scale+1
  5703  001BF8  000A               	tblrd		*-
  5704  001BFA  CFF5 F0B2          	movff	tablat,?_scale+2
  5705  001BFE  0012               	return	
  5706  001C00                     __end_of_scale:
  5707                           	opt stack 0
  5708                           tblptru	equ	0xFF8
  5709                           tblptrh	equ	0xFF7
  5710                           tblptrl	equ	0xFF6
  5711                           tablat	equ	0xFF5
  5712                           prodh	equ	0xFF4
  5713                           prodl	equ	0xFF3
  5714                           postinc0	equ	0xFEE
  5715                           wreg	equ	0xFE8
  5716                           postdec1	equ	0xFE5
  5717                           fsr1l	equ	0xFE1
  5718                           indf2	equ	0xFDF
  5719                           postinc2	equ	0xFDE
  5720                           postdec2	equ	0xFDD
  5721                           fsr2h	equ	0xFDA
  5722                           fsr2l	equ	0xFD9
  5723                           status	equ	0xFD8
  5724                           
  5725 ;; *************** function _putch *****************
  5726 ;; Defined at:
  5727 ;;		line 35 in file "lcd.c"
  5728 ;; Parameters:    Size  Location     Type
  5729 ;;  data            1    wreg     unsigned char 
  5730 ;; Auto vars:     Size  Location     Type
  5731 ;;  data            1    4[BANK0 ] unsigned char 
  5732 ;; Return value:  Size  Location     Type
  5733 ;;                  1    wreg      void 
  5734 ;; Registers used:
  5735 ;;		wreg, status,2, status,0, cstack
  5736 ;; Tracked objects:
  5737 ;;		On entry : 0/0
  5738 ;;		On exit  : 0/0
  5739 ;;		Unchanged: 0/0
  5740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5742 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5744 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5745 ;;Total ram usage:        1 bytes
  5746 ;; Hardware stack levels used:    1
  5747 ;; Hardware stack levels required when called:    9
  5748 ;; This function calls:
  5749 ;;		_lcdNewline
  5750 ;;		_lcdNibble
  5751 ;; This function is called by:
  5752 ;;		_printf
  5753 ;; This function uses a non-reentrant model
  5754 ;;
  5755                           
  5756                           	psect	text6
  5757  0050FC                     __ptext6:
  5758                           	opt stack 0
  5759  0050FC                     _putch:
  5760                           	opt stack 19
  5761                           
  5762                           ;incstack = 0
  5763                           ;putch@data stored from wreg
  5764  0050FC  0100               	movlb	0	; () banked
  5765  0050FE  6F84               	movwf	putch@data& (0+255),b
  5766                           
  5767                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  5768  005100  0E0A               	movlw	10
  5769  005102  0100               	movlb	0	; () banked
  5770  005104  1984               	xorwf	putch@data& (0+255),w,b
  5771  005106  A4D8               	btfss	status,2,c
  5772  005108  D003               	goto	l186
  5773                           
  5774                           ; BSR set to: 0
  5775  00510A  ECF3  F028         	call	_lcdNewline	;wreg free
  5776  00510E  0012               	return	
  5777  005110                     l186:
  5778                           
  5779                           ; BSR set to: 0
  5780                           ;lcd.c: 37: else
  5781                           ;lcd.c: 38: {
  5782                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  5783  005110  848C               	bsf	3980,2,c	;volatile
  5784                           
  5785                           ; BSR set to: 0
  5786                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  5787  005112  0E74               	movlw	116
  5788  005114                     u7807:
  5789  005114  2EE8               	decfsz	wreg,f,c
  5790  005116  D7FE               	bra	u7807
  5791  005118  D000               	nop2	
  5792                           
  5793                           ;lcd.c: 41: lcdNibble(data);
  5794  00511A  0100               	movlb	0	; () banked
  5795  00511C  5184               	movf	putch@data& (0+255),w,b
  5796  00511E  EC87  F025         	call	_lcdNibble
  5797  005122  0012               	return	
  5798  005124                     __end_of_putch:
  5799                           	opt stack 0
  5800                           tblptru	equ	0xFF8
  5801                           tblptrh	equ	0xFF7
  5802                           tblptrl	equ	0xFF6
  5803                           tablat	equ	0xFF5
  5804                           prodh	equ	0xFF4
  5805                           prodl	equ	0xFF3
  5806                           postinc0	equ	0xFEE
  5807                           wreg	equ	0xFE8
  5808                           postdec1	equ	0xFE5
  5809                           fsr1l	equ	0xFE1
  5810                           indf2	equ	0xFDF
  5811                           postinc2	equ	0xFDE
  5812                           postdec2	equ	0xFDD
  5813                           fsr2h	equ	0xFDA
  5814                           fsr2l	equ	0xFD9
  5815                           status	equ	0xFD8
  5816                           
  5817 ;; *************** function _lcdNewline *****************
  5818 ;; Defined at:
  5819 ;;		line 78 in file "lcd.c"
  5820 ;; Parameters:    Size  Location     Type
  5821 ;;		None
  5822 ;; Auto vars:     Size  Location     Type
  5823 ;;		None
  5824 ;; Return value:  Size  Location     Type
  5825 ;;                  1    wreg      void 
  5826 ;; Registers used:
  5827 ;;		wreg, status,2, status,0, cstack
  5828 ;; Tracked objects:
  5829 ;;		On entry : 0/0
  5830 ;;		On exit  : 0/0
  5831 ;;		Unchanged: 0/0
  5832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5837 ;;Total ram usage:        0 bytes
  5838 ;; Hardware stack levels used:    1
  5839 ;; Hardware stack levels required when called:    8
  5840 ;; This function calls:
  5841 ;;		_lcdInst
  5842 ;; This function is called by:
  5843 ;;		_putch
  5844 ;; This function uses a non-reentrant model
  5845 ;;
  5846                           
  5847                           	psect	text7
  5848  0051E6                     __ptext7:
  5849                           	opt stack 0
  5850  0051E6                     _lcdNewline:
  5851                           	opt stack 19
  5852                           
  5853                           ;lcd.c: 79: lcdInst(0b11000000);
  5854                           
  5855                           ;incstack = 0
  5856  0051E6  0EC0               	movlw	192
  5857  0051E8  EC69  F028         	call	_lcdInst
  5858  0051EC  0012               	return		;funcret
  5859  0051EE                     __end_of_lcdNewline:
  5860                           	opt stack 0
  5861                           tblptru	equ	0xFF8
  5862                           tblptrh	equ	0xFF7
  5863                           tblptrl	equ	0xFF6
  5864                           tablat	equ	0xFF5
  5865                           prodh	equ	0xFF4
  5866                           prodl	equ	0xFF3
  5867                           postinc0	equ	0xFEE
  5868                           wreg	equ	0xFE8
  5869                           postdec1	equ	0xFE5
  5870                           fsr1l	equ	0xFE1
  5871                           indf2	equ	0xFDF
  5872                           postinc2	equ	0xFDE
  5873                           postdec2	equ	0xFDD
  5874                           fsr2h	equ	0xFDA
  5875                           fsr2l	equ	0xFD9
  5876                           status	equ	0xFD8
  5877                           
  5878 ;; *************** function _isdigit *****************
  5879 ;; Defined at:
  5880 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  5881 ;; Parameters:    Size  Location     Type
  5882 ;;  c               1    wreg     unsigned char 
  5883 ;; Auto vars:     Size  Location     Type
  5884 ;;  c               1    2[BANK0 ] unsigned char 
  5885 ;; Return value:  Size  Location     Type
  5886 ;;		None               void
  5887 ;; Registers used:
  5888 ;;		wreg, status,2, status,0
  5889 ;; Tracked objects:
  5890 ;;		On entry : 0/0
  5891 ;;		On exit  : 0/0
  5892 ;;		Unchanged: 0/0
  5893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5895 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5896 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5897 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5898 ;;Total ram usage:        3 bytes
  5899 ;; Hardware stack levels used:    1
  5900 ;; Hardware stack levels required when called:    6
  5901 ;; This function calls:
  5902 ;;		Nothing
  5903 ;; This function is called by:
  5904 ;;		_printf
  5905 ;; This function uses a non-reentrant model
  5906 ;;
  5907                           
  5908                           	psect	text8
  5909  0050A8                     __ptext8:
  5910                           	opt stack 0
  5911  0050A8                     _isdigit:
  5912                           	opt stack 22
  5913                           
  5914                           ;incstack = 0
  5915                           ;isdigit@c stored from wreg
  5916  0050A8  0100               	movlb	0	; () banked
  5917  0050AA  6F82               	movwf	isdigit@c& (0+255),b
  5918  0050AC  0E00               	movlw	0
  5919  0050AE  0100               	movlb	0	; () banked
  5920  0050B0  6F81               	movwf	_isdigit$966& (0+255),b
  5921                           
  5922                           ; BSR set to: 0
  5923  0050B2  0E3A               	movlw	58
  5924  0050B4  0100               	movlb	0	; () banked
  5925  0050B6  6182               	cpfslt	isdigit@c& (0+255),b
  5926  0050B8  D007               	goto	l4720
  5927                           
  5928                           ; BSR set to: 0
  5929  0050BA  0E2F               	movlw	47
  5930  0050BC  0100               	movlb	0	; () banked
  5931  0050BE  6582               	cpfsgt	isdigit@c& (0+255),b
  5932  0050C0  D003               	goto	l4720
  5933                           
  5934                           ; BSR set to: 0
  5935  0050C2  0E01               	movlw	1
  5936  0050C4  0100               	movlb	0	; () banked
  5937  0050C6  6F81               	movwf	_isdigit$966& (0+255),b
  5938  0050C8                     l4720:
  5939                           
  5940                           ; BSR set to: 0
  5941  0050C8  C081  F080         	movff	_isdigit$966,??_isdigit
  5942  0050CC  0100               	movlb	0	; () banked
  5943  0050CE  3180               	rrcf	??_isdigit& (0+255),w,b
  5944  0050D0  0012               	return	
  5945  0050D2                     __end_of_isdigit:
  5946                           	opt stack 0
  5947                           tblptru	equ	0xFF8
  5948                           tblptrh	equ	0xFF7
  5949                           tblptrl	equ	0xFF6
  5950                           tablat	equ	0xFF5
  5951                           prodh	equ	0xFF4
  5952                           prodl	equ	0xFF3
  5953                           postinc0	equ	0xFEE
  5954                           wreg	equ	0xFE8
  5955                           postdec1	equ	0xFE5
  5956                           fsr1l	equ	0xFE1
  5957                           indf2	equ	0xFDF
  5958                           postinc2	equ	0xFDE
  5959                           postdec2	equ	0xFDD
  5960                           fsr2h	equ	0xFDA
  5961                           fsr2l	equ	0xFD9
  5962                           status	equ	0xFD8
  5963                           
  5964 ;; *************** function _fround *****************
  5965 ;; Defined at:
  5966 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5967 ;; Parameters:    Size  Location     Type
  5968 ;;  prec            1    wreg     unsigned char 
  5969 ;; Auto vars:     Size  Location     Type
  5970 ;;  prec            1   57[BANK0 ] unsigned char 
  5971 ;; Return value:  Size  Location     Type
  5972 ;;                  3   48[BANK0 ] unsigned char 
  5973 ;; Registers used:
  5974 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5975 ;; Tracked objects:
  5976 ;;		On entry : 0/0
  5977 ;;		On exit  : 0/0
  5978 ;;		Unchanged: 0/0
  5979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5980 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5981 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5983 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5984 ;;Total ram usage:       10 bytes
  5985 ;; Hardware stack levels used:    1
  5986 ;; Hardware stack levels required when called:    8
  5987 ;; This function calls:
  5988 ;;		___awdiv
  5989 ;;		___awmod
  5990 ;;		___ftmul
  5991 ;;		___wmul
  5992 ;; This function is called by:
  5993 ;;		_printf
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           	psect	text9
  5998  00238C                     __ptext9:
  5999                           	opt stack 0
  6000  00238C                     _fround:
  6001                           	opt stack 20
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;incstack = 0
  6005                           ;fround@prec stored from wreg
  6006  00238C  0100               	movlb	0	; () banked
  6007  00238E  6FB9               	movwf	fround@prec& (0+255),b
  6008                           
  6009                           ;doprnt.c: 413: if(prec>=110)
  6010  002390  0E6D               	movlw	109
  6011  002392  0100               	movlb	0	; () banked
  6012  002394  65B9               	cpfsgt	fround@prec& (0+255),b
  6013  002396  D0BA               	goto	l4662
  6014                           
  6015                           ; BSR set to: 0
  6016                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6017  002398  0E00               	movlw	0
  6018  00239A  0100               	movlb	0	; () banked
  6019  00239C  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6020  00239E  0E03               	movlw	3
  6021  0023A0  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6022  0023A2  0E00               	movlw	0
  6023  0023A4  0100               	movlb	0	; () banked
  6024  0023A6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6025  0023A8  0E0A               	movlw	10
  6026  0023AA  6F88               	movwf	___awdiv@divisor& (0+255),b
  6027  0023AC  0E00               	movlw	0
  6028  0023AE  0100               	movlb	0	; () banked
  6029  0023B0  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6030  0023B2  0E64               	movlw	100
  6031  0023B4  6F82               	movwf	___awmod@divisor& (0+255),b
  6032  0023B6  C0B9  F080         	movff	fround@prec,___awmod@dividend
  6033  0023BA  0100               	movlb	0	; () banked
  6034  0023BC  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  6035  0023BE  EC4B  F023         	call	___awmod	;wreg free
  6036  0023C2  C080  F086         	movff	?___awmod,___awdiv@dividend
  6037  0023C6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6038  0023CA  EC37  F022         	call	___awdiv	;wreg free
  6039  0023CE  0E09               	movlw	9
  6040  0023D0  0100               	movlb	0	; () banked
  6041  0023D2  2586               	addwf	?___awdiv& (0+255),w,b
  6042  0023D4  0100               	movlb	0	; () banked
  6043  0023D6  6F8E               	movwf	___wmul@multiplier& (0+255),b
  6044  0023D8  0E00               	movlw	0
  6045  0023DA  0100               	movlb	0	; () banked
  6046  0023DC  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  6047  0023DE  0100               	movlb	0	; () banked
  6048  0023E0  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  6049  0023E2  ECF5  F027         	call	___wmul	;wreg free
  6050  0023E6  0EEB               	movlw	low __npowers_
  6051  0023E8  0100               	movlb	0	; () banked
  6052  0023EA  258E               	addwf	?___wmul& (0+255),w,b
  6053  0023EC  6EF6               	movwf	tblptrl,c
  6054  0023EE  0EFD               	movlw	high __npowers_
  6055  0023F0  0100               	movlb	0	; () banked
  6056  0023F2  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6057  0023F4  6EF7               	movwf	tblptrh,c
  6058  0023F6                     	if	0	;There are less than 3 active tblptr bytes
  6059  0023F6                     	endif
  6060  0023F6  0009               	tblrd		*+
  6061  0023F8  CFF5 F0A4          	movff	tablat,___ftmul@f2
  6062  0023FC  0009               	tblrd		*+
  6063  0023FE  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  6064  002402  000A               	tblrd		*-
  6065  002404  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  6066  002408  0E00               	movlw	0
  6067  00240A  0100               	movlb	0	; () banked
  6068  00240C  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6069  00240E  0E64               	movlw	100
  6070  002410  6F88               	movwf	___awdiv@divisor& (0+255),b
  6071  002412  C0B9  F086         	movff	fround@prec,___awdiv@dividend
  6072  002416  0100               	movlb	0	; () banked
  6073  002418  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  6074  00241A  EC37  F022         	call	___awdiv	;wreg free
  6075  00241E  0E12               	movlw	18
  6076  002420  0100               	movlb	0	; () banked
  6077  002422  2586               	addwf	?___awdiv& (0+255),w,b
  6078  002424  0100               	movlb	0	; () banked
  6079  002426  6F8E               	movwf	___wmul@multiplier& (0+255),b
  6080  002428  0E00               	movlw	0
  6081  00242A  0100               	movlb	0	; () banked
  6082  00242C  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  6083  00242E  0100               	movlb	0	; () banked
  6084  002430  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  6085  002432  0E00               	movlw	0
  6086  002434  0100               	movlb	0	; () banked
  6087  002436  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6088  002438  0E03               	movlw	3
  6089  00243A  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6090  00243C  ECF5  F027         	call	___wmul	;wreg free
  6091  002440  0EEB               	movlw	low __npowers_
  6092  002442  0100               	movlb	0	; () banked
  6093  002444  258E               	addwf	?___wmul& (0+255),w,b
  6094  002446  6EF6               	movwf	tblptrl,c
  6095  002448  0EFD               	movlw	high __npowers_
  6096  00244A  0100               	movlb	0	; () banked
  6097  00244C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6098  00244E  6EF7               	movwf	tblptrh,c
  6099  002450                     	if	0	;There are less than 3 active tblptr bytes
  6100  002450                     	endif
  6101  002450  0009               	tblrd		*+
  6102  002452  CFF5 F0A1          	movff	tablat,___ftmul@f1
  6103  002456  0009               	tblrd		*+
  6104  002458  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  6105  00245C  000A               	tblrd		*-
  6106  00245E  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  6107  002462  EC63  F019         	call	___ftmul	;wreg free
  6108  002466  C0A1  F0B6         	movff	?___ftmul,_fround$1337
  6109  00246A  C0A2  F0B7         	movff	?___ftmul+1,_fround$1337+1
  6110  00246E  C0A3  F0B8         	movff	?___ftmul+2,_fround$1337+2
  6111                           
  6112                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6113  002472  0E00               	movlw	0
  6114  002474  0100               	movlb	0	; () banked
  6115  002476  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6116  002478  0E03               	movlw	3
  6117  00247A  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6118  00247C  0E00               	movlw	0
  6119  00247E  0100               	movlb	0	; () banked
  6120  002480  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6121  002482  0E0A               	movlw	10
  6122  002484  6F82               	movwf	___awmod@divisor& (0+255),b
  6123  002486  C0B9  F080         	movff	fround@prec,___awmod@dividend
  6124  00248A  0100               	movlb	0	; () banked
  6125  00248C  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  6126  00248E  EC4B  F023         	call	___awmod	;wreg free
  6127  002492  C080  F08E         	movff	?___awmod,___wmul@multiplier
  6128  002496  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  6129  00249A  ECF5  F027         	call	___wmul	;wreg free
  6130  00249E  0EEB               	movlw	low __npowers_
  6131  0024A0  0100               	movlb	0	; () banked
  6132  0024A2  258E               	addwf	?___wmul& (0+255),w,b
  6133  0024A4  6EF6               	movwf	tblptrl,c
  6134  0024A6  0EFD               	movlw	high __npowers_
  6135  0024A8  0100               	movlb	0	; () banked
  6136  0024AA  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6137  0024AC  6EF7               	movwf	tblptrh,c
  6138  0024AE                     	if	0	;There are less than 3 active tblptr bytes
  6139  0024AE                     	endif
  6140  0024AE  0009               	tblrd		*+
  6141  0024B0  CFF5 F0A4          	movff	tablat,___ftmul@f2
  6142  0024B4  0009               	tblrd		*+
  6143  0024B6  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  6144  0024BA  000A               	tblrd		*-
  6145  0024BC  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  6146  0024C0  C0B6  F0A1         	movff	_fround$1337,___ftmul@f1
  6147  0024C4  C0B7  F0A2         	movff	_fround$1337+1,___ftmul@f1+1
  6148  0024C8  C0B8  F0A3         	movff	_fround$1337+2,___ftmul@f1+2
  6149  0024CC  EC63  F019         	call	___ftmul	;wreg free
  6150  0024D0  C0A1  F0B3         	movff	?___ftmul,_fround$1338
  6151  0024D4  C0A2  F0B4         	movff	?___ftmul+1,_fround$1338+1
  6152  0024D8  C0A3  F0B5         	movff	?___ftmul+2,_fround$1338+2
  6153                           
  6154                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6155  0024DC  C0B3  F0A1         	movff	_fround$1338,___ftmul@f1
  6156  0024E0  C0B4  F0A2         	movff	_fround$1338+1,___ftmul@f1+1
  6157  0024E4  C0B5  F0A3         	movff	_fround$1338+2,___ftmul@f1+2
  6158  0024E8  0E00               	movlw	0
  6159  0024EA  0100               	movlb	0	; () banked
  6160  0024EC  6FA4               	movwf	___ftmul@f2& (0+255),b
  6161  0024EE  0E00               	movlw	0
  6162  0024F0  0100               	movlb	0	; () banked
  6163  0024F2  6FA5               	movwf	(___ftmul@f2+1)& (0+255),b
  6164  0024F4  0E3F               	movlw	63
  6165  0024F6  0100               	movlb	0	; () banked
  6166  0024F8  6FA6               	movwf	(___ftmul@f2+2)& (0+255),b
  6167  0024FA  EC63  F019         	call	___ftmul	;wreg free
  6168  0024FE  C0A1  F0B0         	movff	?___ftmul,?_fround
  6169  002502  C0A2  F0B1         	movff	?___ftmul+1,?_fround+1
  6170  002506  C0A3  F0B2         	movff	?___ftmul+2,?_fround+2
  6171  00250A  0012               	return	
  6172  00250C                     l4662:
  6173                           
  6174                           ;doprnt.c: 415: else if(prec > 10)
  6175  00250C  0E0A               	movlw	10
  6176  00250E  0100               	movlb	0	; () banked
  6177  002510  65B9               	cpfsgt	fround@prec& (0+255),b
  6178  002512  D06E               	goto	l4670
  6179                           
  6180                           ; BSR set to: 0
  6181                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6182  002514  0E00               	movlw	0
  6183  002516  0100               	movlb	0	; () banked
  6184  002518  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6185  00251A  0E03               	movlw	3
  6186  00251C  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6187  00251E  0E00               	movlw	0
  6188  002520  0100               	movlb	0	; () banked
  6189  002522  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6190  002524  0E0A               	movlw	10
  6191  002526  6F82               	movwf	___awmod@divisor& (0+255),b
  6192  002528  C0B9  F080         	movff	fround@prec,___awmod@dividend
  6193  00252C  0100               	movlb	0	; () banked
  6194  00252E  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  6195  002530  EC4B  F023         	call	___awmod	;wreg free
  6196  002534  C080  F08E         	movff	?___awmod,___wmul@multiplier
  6197  002538  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  6198  00253C  ECF5  F027         	call	___wmul	;wreg free
  6199  002540  0EEB               	movlw	low __npowers_
  6200  002542  0100               	movlb	0	; () banked
  6201  002544  258E               	addwf	?___wmul& (0+255),w,b
  6202  002546  6EF6               	movwf	tblptrl,c
  6203  002548  0EFD               	movlw	high __npowers_
  6204  00254A  0100               	movlb	0	; () banked
  6205  00254C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6206  00254E  6EF7               	movwf	tblptrh,c
  6207  002550                     	if	0	;There are less than 3 active tblptr bytes
  6208  002550                     	endif
  6209  002550  0009               	tblrd		*+
  6210  002552  CFF5 F0A4          	movff	tablat,___ftmul@f2
  6211  002556  0009               	tblrd		*+
  6212  002558  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  6213  00255C  000A               	tblrd		*-
  6214  00255E  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  6215  002562  0E00               	movlw	0
  6216  002564  0100               	movlb	0	; () banked
  6217  002566  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6218  002568  0E0A               	movlw	10
  6219  00256A  6F88               	movwf	___awdiv@divisor& (0+255),b
  6220  00256C  C0B9  F086         	movff	fround@prec,___awdiv@dividend
  6221  002570  0100               	movlb	0	; () banked
  6222  002572  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  6223  002574  EC37  F022         	call	___awdiv	;wreg free
  6224  002578  0E09               	movlw	9
  6225  00257A  0100               	movlb	0	; () banked
  6226  00257C  2586               	addwf	?___awdiv& (0+255),w,b
  6227  00257E  0100               	movlb	0	; () banked
  6228  002580  6F8E               	movwf	___wmul@multiplier& (0+255),b
  6229  002582  0E00               	movlw	0
  6230  002584  0100               	movlb	0	; () banked
  6231  002586  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  6232  002588  0100               	movlb	0	; () banked
  6233  00258A  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  6234  00258C  0E00               	movlw	0
  6235  00258E  0100               	movlb	0	; () banked
  6236  002590  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6237  002592  0E03               	movlw	3
  6238  002594  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6239  002596  ECF5  F027         	call	___wmul	;wreg free
  6240  00259A  0EEB               	movlw	low __npowers_
  6241  00259C  0100               	movlb	0	; () banked
  6242  00259E  258E               	addwf	?___wmul& (0+255),w,b
  6243  0025A0  6EF6               	movwf	tblptrl,c
  6244  0025A2  0EFD               	movlw	high __npowers_
  6245  0025A4  0100               	movlb	0	; () banked
  6246  0025A6  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6247  0025A8  6EF7               	movwf	tblptrh,c
  6248  0025AA                     	if	0	;There are less than 3 active tblptr bytes
  6249  0025AA                     	endif
  6250  0025AA  0009               	tblrd		*+
  6251  0025AC  CFF5 F0A1          	movff	tablat,___ftmul@f1
  6252  0025B0  0009               	tblrd		*+
  6253  0025B2  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  6254  0025B6  000A               	tblrd		*-
  6255  0025B8  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  6256  0025BC  EC63  F019         	call	___ftmul	;wreg free
  6257  0025C0  C0A1  F0B6         	movff	?___ftmul,_fround$1337
  6258  0025C4  C0A2  F0B7         	movff	?___ftmul+1,_fround$1337+1
  6259  0025C8  C0A3  F0B8         	movff	?___ftmul+2,_fround$1337+2
  6260                           
  6261                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6262  0025CC  C0B6  F0A1         	movff	_fround$1337,___ftmul@f1
  6263  0025D0  C0B7  F0A2         	movff	_fround$1337+1,___ftmul@f1+1
  6264  0025D4  C0B8  F0A3         	movff	_fround$1337+2,___ftmul@f1+2
  6265  0025D8  0E00               	movlw	0
  6266  0025DA  0100               	movlb	0	; () banked
  6267  0025DC  6FA4               	movwf	___ftmul@f2& (0+255),b
  6268  0025DE  0E00               	movlw	0
  6269  0025E0  0100               	movlb	0	; () banked
  6270  0025E2  6FA5               	movwf	(___ftmul@f2+1)& (0+255),b
  6271  0025E4  0E3F               	movlw	63
  6272  0025E6  0100               	movlb	0	; () banked
  6273  0025E8  6FA6               	movwf	(___ftmul@f2+2)& (0+255),b
  6274  0025EA  EC63  F019         	call	___ftmul	;wreg free
  6275  0025EE  D787               	goto	L6
  6276  0025F0                     l4670:
  6277                           
  6278                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6279  0025F0  0100               	movlb	0	; () banked
  6280  0025F2  51B9               	movf	fround@prec& (0+255),w,b
  6281  0025F4  0D03               	mullw	3
  6282  0025F6  0EEB               	movlw	low __npowers_
  6283  0025F8  24F3               	addwf	prodl,w,c
  6284  0025FA  6EF6               	movwf	tblptrl,c
  6285  0025FC  0EFD               	movlw	high __npowers_
  6286  0025FE  20F4               	addwfc	prodh,w,c
  6287  002600  6EF7               	movwf	tblptrh,c
  6288  002602                     	if	0	;There are less than 3 active tblptr bytes
  6289  002602                     	endif
  6290  002602  0009               	tblrd		*+
  6291  002604  CFF5 F0A1          	movff	tablat,___ftmul@f1
  6292  002608  0009               	tblrd		*+
  6293  00260A  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  6294  00260E  000A               	tblrd		*-
  6295  002610  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  6296  002614  0E00               	movlw	0
  6297  002616  0100               	movlb	0	; () banked
  6298  002618  6FA4               	movwf	___ftmul@f2& (0+255),b
  6299  00261A  0E00               	movlw	0
  6300  00261C  0100               	movlb	0	; () banked
  6301  00261E  6FA5               	movwf	(___ftmul@f2+1)& (0+255),b
  6302  002620  0E3F               	movlw	63
  6303  002622  0100               	movlb	0	; () banked
  6304  002624  6FA6               	movwf	(___ftmul@f2+2)& (0+255),b
  6305  002626  EC63  F019         	call	___ftmul	;wreg free
  6306  00262A  C0A1  F0B0         	movff	?___ftmul,?_fround
  6307  00262E  C0A2  F0B1         	movff	?___ftmul+1,?_fround+1
  6308  002632  C0A3  F0B2         	movff	?___ftmul+2,?_fround+2
  6309  002636  0012               	return	
  6310  002638                     __end_of_fround:
  6311                           	opt stack 0
  6312                           tblptru	equ	0xFF8
  6313                           tblptrh	equ	0xFF7
  6314                           tblptrl	equ	0xFF6
  6315                           tablat	equ	0xFF5
  6316                           prodh	equ	0xFF4
  6317                           prodl	equ	0xFF3
  6318                           postinc0	equ	0xFEE
  6319                           wreg	equ	0xFE8
  6320                           postdec1	equ	0xFE5
  6321                           fsr1l	equ	0xFE1
  6322                           indf2	equ	0xFDF
  6323                           postinc2	equ	0xFDE
  6324                           postdec2	equ	0xFDD
  6325                           fsr2h	equ	0xFDA
  6326                           fsr2l	equ	0xFD9
  6327                           status	equ	0xFD8
  6328                           
  6329 ;; *************** function ___wmul *****************
  6330 ;; Defined at:
  6331 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  6332 ;; Parameters:    Size  Location     Type
  6333 ;;  multiplier      2   14[BANK0 ] unsigned int 
  6334 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  6335 ;; Auto vars:     Size  Location     Type
  6336 ;;  product         2   18[BANK0 ] unsigned int 
  6337 ;; Return value:  Size  Location     Type
  6338 ;;                  2   14[BANK0 ] unsigned int 
  6339 ;; Registers used:
  6340 ;;		wreg, status,2, status,0, prodl, prodh
  6341 ;; Tracked objects:
  6342 ;;		On entry : 0/0
  6343 ;;		On exit  : 0/0
  6344 ;;		Unchanged: 0/0
  6345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6346 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6347 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6349 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6350 ;;Total ram usage:        6 bytes
  6351 ;; Hardware stack levels used:    1
  6352 ;; Hardware stack levels required when called:    6
  6353 ;; This function calls:
  6354 ;;		Nothing
  6355 ;; This function is called by:
  6356 ;;		_fround
  6357 ;;		_scale
  6358 ;;		_printf
  6359 ;; This function uses a non-reentrant model
  6360 ;;
  6361                           
  6362                           	psect	text10
  6363  004FEA                     __ptext10:
  6364                           	opt stack 0
  6365  004FEA                     ___wmul:
  6366                           	opt stack 21
  6367                           
  6368                           ;incstack = 0
  6369  004FEA  0100               	movlb	0	; () banked
  6370  004FEC  518E               	movf	___wmul@multiplier& (0+255),w,b
  6371  004FEE  0100               	movlb	0	; () banked
  6372  004FF0  0390               	mulwf	___wmul@multiplicand& (0+255),b
  6373  004FF2  CFF3 F092          	movff	prodl,___wmul@product
  6374  004FF6  CFF4 F093          	movff	prodh,___wmul@product+1
  6375  004FFA  0100               	movlb	0	; () banked
  6376  004FFC  518E               	movf	___wmul@multiplier& (0+255),w,b
  6377  004FFE  0100               	movlb	0	; () banked
  6378  005000  0391               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  6379  005002  50F3               	movf	prodl,w,c
  6380  005004  0100               	movlb	0	; () banked
  6381  005006  2793               	addwf	(___wmul@product+1)& (0+255),f,b
  6382  005008  0100               	movlb	0	; () banked
  6383  00500A  518F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  6384  00500C  0100               	movlb	0	; () banked
  6385  00500E  0390               	mulwf	___wmul@multiplicand& (0+255),b
  6386  005010  50F3               	movf	prodl,w,c
  6387  005012  0100               	movlb	0	; () banked
  6388  005014  2793               	addwf	(___wmul@product+1)& (0+255),f,b
  6389                           
  6390                           ; BSR set to: 0
  6391  005016  C092  F08E         	movff	___wmul@product,?___wmul
  6392  00501A  C093  F08F         	movff	___wmul@product+1,?___wmul+1
  6393  00501E  0012               	return	
  6394  005020                     __end_of___wmul:
  6395                           	opt stack 0
  6396                           tblptru	equ	0xFF8
  6397                           tblptrh	equ	0xFF7
  6398                           tblptrl	equ	0xFF6
  6399                           tablat	equ	0xFF5
  6400                           prodh	equ	0xFF4
  6401                           prodl	equ	0xFF3
  6402                           postinc0	equ	0xFEE
  6403                           wreg	equ	0xFE8
  6404                           postdec1	equ	0xFE5
  6405                           fsr1l	equ	0xFE1
  6406                           indf2	equ	0xFDF
  6407                           postinc2	equ	0xFDE
  6408                           postdec2	equ	0xFDD
  6409                           fsr2h	equ	0xFDA
  6410                           fsr2l	equ	0xFD9
  6411                           status	equ	0xFD8
  6412                           
  6413 ;; *************** function ___awmod *****************
  6414 ;; Defined at:
  6415 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  6416 ;; Parameters:    Size  Location     Type
  6417 ;;  dividend        2    0[BANK0 ] int 
  6418 ;;  divisor         2    2[BANK0 ] int 
  6419 ;; Auto vars:     Size  Location     Type
  6420 ;;  sign            1    5[BANK0 ] unsigned char 
  6421 ;;  counter         1    4[BANK0 ] unsigned char 
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  2    0[BANK0 ] int 
  6424 ;; Registers used:
  6425 ;;		wreg, status,2, status,0
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6431 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6432 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6434 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6435 ;;Total ram usage:        6 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; Hardware stack levels required when called:    6
  6438 ;; This function calls:
  6439 ;;		Nothing
  6440 ;; This function is called by:
  6441 ;;		_fround
  6442 ;;		_scale
  6443 ;; This function uses a non-reentrant model
  6444 ;;
  6445                           
  6446                           	psect	text11
  6447  004696                     __ptext11:
  6448                           	opt stack 0
  6449  004696                     ___awmod:
  6450                           	opt stack 21
  6451                           
  6452                           ; BSR set to: 0
  6453                           ;incstack = 0
  6454  004696  0E00               	movlw	0
  6455  004698  0100               	movlb	0	; () banked
  6456  00469A  6F85               	movwf	___awmod@sign& (0+255),b
  6457                           
  6458                           ; BSR set to: 0
  6459  00469C  0100               	movlb	0	; () banked
  6460  00469E  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  6461  0046A0  D008               	goto	l4598
  6462                           
  6463                           ; BSR set to: 0
  6464  0046A2  0100               	movlb	0	; () banked
  6465  0046A4  6D80               	negf	___awmod@dividend& (0+255),b
  6466  0046A6  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  6467  0046A8  B0D8               	btfsc	status,0,c
  6468  0046AA  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  6469                           
  6470                           ; BSR set to: 0
  6471  0046AC  0E01               	movlw	1
  6472  0046AE  0100               	movlb	0	; () banked
  6473  0046B0  6F85               	movwf	___awmod@sign& (0+255),b
  6474  0046B2                     l4598:
  6475                           
  6476                           ; BSR set to: 0
  6477  0046B2  0100               	movlb	0	; () banked
  6478  0046B4  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6479  0046B6  D005               	goto	l4602
  6480                           
  6481                           ; BSR set to: 0
  6482  0046B8  0100               	movlb	0	; () banked
  6483  0046BA  6D82               	negf	___awmod@divisor& (0+255),b
  6484  0046BC  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  6485  0046BE  B0D8               	btfsc	status,0,c
  6486  0046C0  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  6487  0046C2                     l4602:
  6488                           
  6489                           ; BSR set to: 0
  6490  0046C2  0100               	movlb	0	; () banked
  6491  0046C4  5182               	movf	___awmod@divisor& (0+255),w,b
  6492  0046C6  0100               	movlb	0	; () banked
  6493  0046C8  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6494  0046CA  B4D8               	btfsc	status,2,c
  6495  0046CC  D026               	goto	l4618
  6496                           
  6497                           ; BSR set to: 0
  6498  0046CE  0E01               	movlw	1
  6499  0046D0  0100               	movlb	0	; () banked
  6500  0046D2  6F84               	movwf	___awmod@counter& (0+255),b
  6501  0046D4  D006               	goto	l4608
  6502  0046D6                     l4606:
  6503                           
  6504                           ; BSR set to: 0
  6505  0046D6  0100               	movlb	0	; () banked
  6506  0046D8  90D8               	bcf	status,0,c
  6507  0046DA  3782               	rlcf	___awmod@divisor& (0+255),f,b
  6508  0046DC  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6509  0046DE  0100               	movlb	0	; () banked
  6510  0046E0  2B84               	incf	___awmod@counter& (0+255),f,b
  6511  0046E2                     l4608:
  6512                           
  6513                           ; BSR set to: 0
  6514  0046E2  0100               	movlb	0	; () banked
  6515  0046E4  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6516  0046E6  D7F7               	goto	l4606
  6517  0046E8                     l4610:
  6518                           
  6519                           ; BSR set to: 0
  6520  0046E8  0100               	movlb	0	; () banked
  6521  0046EA  5182               	movf	___awmod@divisor& (0+255),w,b
  6522  0046EC  0100               	movlb	0	; () banked
  6523  0046EE  5D80               	subwf	___awmod@dividend& (0+255),w,b
  6524  0046F0  0100               	movlb	0	; () banked
  6525  0046F2  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  6526  0046F4  0100               	movlb	0	; () banked
  6527  0046F6  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6528  0046F8  A0D8               	btfss	status,0,c
  6529  0046FA  D008               	goto	l4614
  6530                           
  6531                           ; BSR set to: 0
  6532  0046FC  0100               	movlb	0	; () banked
  6533  0046FE  5182               	movf	___awmod@divisor& (0+255),w,b
  6534  004700  0100               	movlb	0	; () banked
  6535  004702  5F80               	subwf	___awmod@dividend& (0+255),f,b
  6536  004704  0100               	movlb	0	; () banked
  6537  004706  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  6538  004708  0100               	movlb	0	; () banked
  6539  00470A  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6540  00470C                     l4614:
  6541                           
  6542                           ; BSR set to: 0
  6543  00470C  0100               	movlb	0	; () banked
  6544  00470E  90D8               	bcf	status,0,c
  6545  004710  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6546  004712  3382               	rrcf	___awmod@divisor& (0+255),f,b
  6547                           
  6548                           ; BSR set to: 0
  6549  004714  0100               	movlb	0	; () banked
  6550  004716  2F84               	decfsz	___awmod@counter& (0+255),f,b
  6551  004718  D7E7               	goto	l4610
  6552  00471A                     l4618:
  6553                           
  6554                           ; BSR set to: 0
  6555  00471A  0100               	movlb	0	; () banked
  6556  00471C  5185               	movf	___awmod@sign& (0+255),w,b
  6557  00471E  0100               	movlb	0	; () banked
  6558  004720  B4D8               	btfsc	status,2,c
  6559  004722  D005               	goto	l4622
  6560                           
  6561                           ; BSR set to: 0
  6562  004724  0100               	movlb	0	; () banked
  6563  004726  6D80               	negf	___awmod@dividend& (0+255),b
  6564  004728  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  6565  00472A  B0D8               	btfsc	status,0,c
  6566  00472C  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  6567  00472E                     l4622:
  6568                           
  6569                           ; BSR set to: 0
  6570  00472E  C080  F080         	movff	___awmod@dividend,?___awmod
  6571  004732  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  6572  004736  0012               	return	
  6573  004738                     __end_of___awmod:
  6574                           	opt stack 0
  6575                           tblptru	equ	0xFF8
  6576                           tblptrh	equ	0xFF7
  6577                           tblptrl	equ	0xFF6
  6578                           tablat	equ	0xFF5
  6579                           prodh	equ	0xFF4
  6580                           prodl	equ	0xFF3
  6581                           postinc0	equ	0xFEE
  6582                           wreg	equ	0xFE8
  6583                           postdec1	equ	0xFE5
  6584                           fsr1l	equ	0xFE1
  6585                           indf2	equ	0xFDF
  6586                           postinc2	equ	0xFDE
  6587                           postdec2	equ	0xFDD
  6588                           fsr2h	equ	0xFDA
  6589                           fsr2l	equ	0xFD9
  6590                           status	equ	0xFD8
  6591                           
  6592 ;; *************** function ___awdiv *****************
  6593 ;; Defined at:
  6594 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  6595 ;; Parameters:    Size  Location     Type
  6596 ;;  dividend        2    6[BANK0 ] int 
  6597 ;;  divisor         2    8[BANK0 ] int 
  6598 ;; Auto vars:     Size  Location     Type
  6599 ;;  quotient        2   12[BANK0 ] int 
  6600 ;;  sign            1   11[BANK0 ] unsigned char 
  6601 ;;  counter         1   10[BANK0 ] unsigned char 
  6602 ;; Return value:  Size  Location     Type
  6603 ;;                  2    6[BANK0 ] int 
  6604 ;; Registers used:
  6605 ;;		wreg, status,2, status,0
  6606 ;; Tracked objects:
  6607 ;;		On entry : 0/0
  6608 ;;		On exit  : 0/0
  6609 ;;		Unchanged: 0/0
  6610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6611 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6612 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6614 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6615 ;;Total ram usage:        8 bytes
  6616 ;; Hardware stack levels used:    1
  6617 ;; Hardware stack levels required when called:    6
  6618 ;; This function calls:
  6619 ;;		Nothing
  6620 ;; This function is called by:
  6621 ;;		_fround
  6622 ;;		_scale
  6623 ;;		_printf
  6624 ;; This function uses a non-reentrant model
  6625 ;;
  6626                           
  6627                           	psect	text12
  6628  00446E                     __ptext12:
  6629                           	opt stack 0
  6630  00446E                     ___awdiv:
  6631                           	opt stack 21
  6632                           
  6633                           ; BSR set to: 0
  6634                           ;incstack = 0
  6635  00446E  0E00               	movlw	0
  6636  004470  0100               	movlb	0	; () banked
  6637  004472  6F8B               	movwf	___awdiv@sign& (0+255),b
  6638                           
  6639                           ; BSR set to: 0
  6640  004474  0100               	movlb	0	; () banked
  6641  004476  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6642  004478  D008               	goto	l4554
  6643                           
  6644                           ; BSR set to: 0
  6645  00447A  0100               	movlb	0	; () banked
  6646  00447C  6D88               	negf	___awdiv@divisor& (0+255),b
  6647  00447E  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6648  004480  B0D8               	btfsc	status,0,c
  6649  004482  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6650                           
  6651                           ; BSR set to: 0
  6652  004484  0E01               	movlw	1
  6653  004486  0100               	movlb	0	; () banked
  6654  004488  6F8B               	movwf	___awdiv@sign& (0+255),b
  6655  00448A                     l4554:
  6656                           
  6657                           ; BSR set to: 0
  6658  00448A  0100               	movlb	0	; () banked
  6659  00448C  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6660  00448E  D008               	goto	l4560
  6661                           
  6662                           ; BSR set to: 0
  6663  004490  0100               	movlb	0	; () banked
  6664  004492  6D86               	negf	___awdiv@dividend& (0+255),b
  6665  004494  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6666  004496  B0D8               	btfsc	status,0,c
  6667  004498  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6668                           
  6669                           ; BSR set to: 0
  6670  00449A  0E01               	movlw	1
  6671  00449C  0100               	movlb	0	; () banked
  6672  00449E  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  6673  0044A0                     l4560:
  6674                           
  6675                           ; BSR set to: 0
  6676  0044A0  0E00               	movlw	0
  6677  0044A2  0100               	movlb	0	; () banked
  6678  0044A4  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  6679  0044A6  0E00               	movlw	0
  6680  0044A8  6F8C               	movwf	___awdiv@quotient& (0+255),b
  6681                           
  6682                           ; BSR set to: 0
  6683  0044AA  0100               	movlb	0	; () banked
  6684  0044AC  5188               	movf	___awdiv@divisor& (0+255),w,b
  6685  0044AE  0100               	movlb	0	; () banked
  6686  0044B0  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6687  0044B2  B4D8               	btfsc	status,2,c
  6688  0044B4  D02C               	goto	l4582
  6689                           
  6690                           ; BSR set to: 0
  6691  0044B6  0E01               	movlw	1
  6692  0044B8  0100               	movlb	0	; () banked
  6693  0044BA  6F8A               	movwf	___awdiv@counter& (0+255),b
  6694  0044BC  D006               	goto	l4568
  6695  0044BE                     l4566:
  6696                           
  6697                           ; BSR set to: 0
  6698  0044BE  0100               	movlb	0	; () banked
  6699  0044C0  90D8               	bcf	status,0,c
  6700  0044C2  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  6701  0044C4  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6702  0044C6  0100               	movlb	0	; () banked
  6703  0044C8  2B8A               	incf	___awdiv@counter& (0+255),f,b
  6704  0044CA                     l4568:
  6705                           
  6706                           ; BSR set to: 0
  6707  0044CA  0100               	movlb	0	; () banked
  6708  0044CC  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6709  0044CE  D7F7               	goto	l4566
  6710  0044D0                     l4570:
  6711                           
  6712                           ; BSR set to: 0
  6713  0044D0  0100               	movlb	0	; () banked
  6714  0044D2  90D8               	bcf	status,0,c
  6715  0044D4  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  6716  0044D6  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6717                           
  6718                           ; BSR set to: 0
  6719  0044D8  0100               	movlb	0	; () banked
  6720  0044DA  5188               	movf	___awdiv@divisor& (0+255),w,b
  6721  0044DC  0100               	movlb	0	; () banked
  6722  0044DE  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  6723  0044E0  0100               	movlb	0	; () banked
  6724  0044E2  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6725  0044E4  0100               	movlb	0	; () banked
  6726  0044E6  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6727  0044E8  A0D8               	btfss	status,0,c
  6728  0044EA  D00A               	goto	l4578
  6729                           
  6730                           ; BSR set to: 0
  6731  0044EC  0100               	movlb	0	; () banked
  6732  0044EE  5188               	movf	___awdiv@divisor& (0+255),w,b
  6733  0044F0  0100               	movlb	0	; () banked
  6734  0044F2  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  6735  0044F4  0100               	movlb	0	; () banked
  6736  0044F6  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6737  0044F8  0100               	movlb	0	; () banked
  6738  0044FA  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6739                           
  6740                           ; BSR set to: 0
  6741  0044FC  0100               	movlb	0	; () banked
  6742  0044FE  818C               	bsf	___awdiv@quotient& (0+255),0,b
  6743  004500                     l4578:
  6744                           
  6745                           ; BSR set to: 0
  6746  004500  0100               	movlb	0	; () banked
  6747  004502  90D8               	bcf	status,0,c
  6748  004504  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6749  004506  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  6750                           
  6751                           ; BSR set to: 0
  6752  004508  0100               	movlb	0	; () banked
  6753  00450A  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  6754  00450C  D7E1               	goto	l4570
  6755  00450E                     l4582:
  6756                           
  6757                           ; BSR set to: 0
  6758  00450E  0100               	movlb	0	; () banked
  6759  004510  518B               	movf	___awdiv@sign& (0+255),w,b
  6760  004512  0100               	movlb	0	; () banked
  6761  004514  B4D8               	btfsc	status,2,c
  6762  004516  D005               	goto	l4586
  6763                           
  6764                           ; BSR set to: 0
  6765  004518  0100               	movlb	0	; () banked
  6766  00451A  6D8C               	negf	___awdiv@quotient& (0+255),b
  6767  00451C  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6768  00451E  B0D8               	btfsc	status,0,c
  6769  004520  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  6770  004522                     l4586:
  6771                           
  6772                           ; BSR set to: 0
  6773  004522  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  6774  004526  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  6775  00452A  0012               	return	
  6776  00452C                     __end_of___awdiv:
  6777                           	opt stack 0
  6778                           tblptru	equ	0xFF8
  6779                           tblptrh	equ	0xFF7
  6780                           tblptrl	equ	0xFF6
  6781                           tablat	equ	0xFF5
  6782                           prodh	equ	0xFF4
  6783                           prodl	equ	0xFF3
  6784                           postinc0	equ	0xFEE
  6785                           wreg	equ	0xFE8
  6786                           postdec1	equ	0xFE5
  6787                           fsr1l	equ	0xFE1
  6788                           indf2	equ	0xFDF
  6789                           postinc2	equ	0xFDE
  6790                           postdec2	equ	0xFDD
  6791                           fsr2h	equ	0xFDA
  6792                           fsr2l	equ	0xFD9
  6793                           status	equ	0xFD8
  6794                           
  6795 ;; *************** function __tdiv_to_l_ *****************
  6796 ;; Defined at:
  6797 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  6798 ;; Parameters:    Size  Location     Type
  6799 ;;  f1              3    0[BANK0 ] float 
  6800 ;;  f2              3    3[BANK0 ] float 
  6801 ;; Auto vars:     Size  Location     Type
  6802 ;;  quot            4    9[BANK0 ] unsigned long 
  6803 ;;  exp1            1   14[BANK0 ] unsigned char 
  6804 ;;  cntr            1   13[BANK0 ] unsigned char 
  6805 ;; Return value:  Size  Location     Type
  6806 ;;                  4    0[BANK0 ] unsigned long 
  6807 ;; Registers used:
  6808 ;;		wreg, status,2, status,0
  6809 ;; Tracked objects:
  6810 ;;		On entry : 0/0
  6811 ;;		On exit  : 0/0
  6812 ;;		Unchanged: 0/0
  6813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6814 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6815 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6816 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6817 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6818 ;;Total ram usage:       15 bytes
  6819 ;; Hardware stack levels used:    1
  6820 ;; Hardware stack levels required when called:    6
  6821 ;; This function calls:
  6822 ;;		Nothing
  6823 ;; This function is called by:
  6824 ;;		_printf
  6825 ;; This function uses a non-reentrant model
  6826 ;;
  6827                           
  6828                           	psect	text13
  6829  002E3A                     __ptext13:
  6830                           	opt stack 0
  6831  002E3A                     __tdiv_to_l_:
  6832                           	opt stack 22
  6833                           
  6834                           ; BSR set to: 0
  6835                           ;incstack = 0
  6836  002E3A  C082  F086         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6837  002E3E  0100               	movlb	0	; () banked
  6838  002E40  6B87               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  6839  002E42  6B88               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  6840  002E44  0100               	movlb	0	; () banked
  6841  002E46  3581               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  6842  002E48  0100               	movlb	0	; () banked
  6843  002E4A  3786               	rlcf	??__tdiv_to_l_& (0+255),f,b
  6844  002E4C  E301               	bnc	u4561
  6845  002E4E  8187               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  6846  002E50                     u4561:
  6847  002E50  0100               	movlb	0	; () banked
  6848  002E52  5186               	movf	??__tdiv_to_l_& (0+255),w,b
  6849  002E54  0100               	movlb	0	; () banked
  6850  002E56  6F8E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  6851  002E58  0100               	movlb	0	; () banked
  6852  002E5A  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6853  002E5C  A4D8               	btfss	status,2,c
  6854  002E5E  D00A               	goto	l4730
  6855                           
  6856                           ; BSR set to: 0
  6857  002E60  0E00               	movlw	0
  6858  002E62  0100               	movlb	0	; () banked
  6859  002E64  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  6860  002E66  0E00               	movlw	0
  6861  002E68  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6862  002E6A  0E00               	movlw	0
  6863  002E6C  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6864  002E6E  0E00               	movlw	0
  6865  002E70  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6866                           
  6867                           ; BSR set to: 0
  6868  002E72  0012               	return	
  6869  002E74                     l4730:
  6870                           
  6871                           ; BSR set to: 0
  6872  002E74  C085  F086         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6873  002E78  0100               	movlb	0	; () banked
  6874  002E7A  6B87               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  6875  002E7C  6B88               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  6876  002E7E  0100               	movlb	0	; () banked
  6877  002E80  3584               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6878  002E82  0100               	movlb	0	; () banked
  6879  002E84  3786               	rlcf	??__tdiv_to_l_& (0+255),f,b
  6880  002E86  E301               	bnc	u4581
  6881  002E88  8187               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  6882  002E8A                     u4581:
  6883  002E8A  0100               	movlb	0	; () banked
  6884  002E8C  5186               	movf	??__tdiv_to_l_& (0+255),w,b
  6885  002E8E  0100               	movlb	0	; () banked
  6886  002E90  6F8D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  6887  002E92  0100               	movlb	0	; () banked
  6888  002E94  518D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  6889  002E96  A4D8               	btfss	status,2,c
  6890  002E98  D00A               	goto	l4736
  6891                           
  6892                           ; BSR set to: 0
  6893  002E9A  0E00               	movlw	0
  6894  002E9C  0100               	movlb	0	; () banked
  6895  002E9E  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  6896  002EA0  0E00               	movlw	0
  6897  002EA2  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6898  002EA4  0E00               	movlw	0
  6899  002EA6  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6900  002EA8  0E00               	movlw	0
  6901  002EAA  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6902                           
  6903                           ; BSR set to: 0
  6904  002EAC  0012               	return	
  6905  002EAE                     l4736:
  6906                           
  6907                           ; BSR set to: 0
  6908  002EAE  0100               	movlb	0	; () banked
  6909  002EB0  8F81               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  6910                           
  6911                           ; BSR set to: 0
  6912  002EB2  0EFF               	movlw	255
  6913  002EB4  0100               	movlb	0	; () banked
  6914  002EB6  1780               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  6915  002EB8  0EFF               	movlw	255
  6916  002EBA  0100               	movlb	0	; () banked
  6917  002EBC  1781               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6918  002EBE  0E00               	movlw	0
  6919  002EC0  0100               	movlb	0	; () banked
  6920  002EC2  1782               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6921  002EC4  0100               	movlb	0	; () banked
  6922  002EC6  8F84               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  6923                           
  6924                           ; BSR set to: 0
  6925  002EC8  0EFF               	movlw	255
  6926  002ECA  0100               	movlb	0	; () banked
  6927  002ECC  1783               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  6928  002ECE  0EFF               	movlw	255
  6929  002ED0  0100               	movlb	0	; () banked
  6930  002ED2  1784               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  6931  002ED4  0E00               	movlw	0
  6932  002ED6  0100               	movlb	0	; () banked
  6933  002ED8  1785               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  6934                           
  6935                           ; BSR set to: 0
  6936  002EDA  0E00               	movlw	0
  6937  002EDC  0100               	movlb	0	; () banked
  6938  002EDE  6F89               	movwf	__tdiv_to_l_@quot& (0+255),b
  6939  002EE0  0E00               	movlw	0
  6940  002EE2  6F8A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  6941  002EE4  0E00               	movlw	0
  6942  002EE6  6F8B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  6943  002EE8  0E00               	movlw	0
  6944  002EEA  6F8C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  6945                           
  6946                           ; BSR set to: 0
  6947  002EEC  0E7F               	movlw	127
  6948  002EEE  0100               	movlb	0	; () banked
  6949  002EF0  5F8E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  6950                           
  6951                           ; BSR set to: 0
  6952  002EF2  0100               	movlb	0	; () banked
  6953  002EF4  518D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  6954  002EF6  0F98               	addlw	152
  6955  002EF8  0100               	movlb	0	; () banked
  6956  002EFA  5F8E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  6957                           
  6958                           ; BSR set to: 0
  6959  002EFC  0E18               	movlw	24
  6960  002EFE  0100               	movlb	0	; () banked
  6961  002F00  6F8D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  6962  002F02                     l1088:
  6963                           
  6964                           ; BSR set to: 0
  6965  002F02  0100               	movlb	0	; () banked
  6966  002F04  90D8               	bcf	status,0,c
  6967  002F06  3789               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  6968  002F08  378A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6969  002F0A  378B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6970  002F0C  378C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6971                           
  6972                           ; BSR set to: 0
  6973  002F0E  0100               	movlb	0	; () banked
  6974  002F10  5183               	movf	__tdiv_to_l_@f2& (0+255),w,b
  6975  002F12  0100               	movlb	0	; () banked
  6976  002F14  5D80               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  6977  002F16  0100               	movlb	0	; () banked
  6978  002F18  5184               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6979  002F1A  0100               	movlb	0	; () banked
  6980  002F1C  5981               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  6981  002F1E  0100               	movlb	0	; () banked
  6982  002F20  5185               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  6983  002F22  0100               	movlb	0	; () banked
  6984  002F24  5982               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  6985  002F26  A0D8               	btfss	status,0,c
  6986  002F28  D00E               	goto	l1089
  6987                           
  6988                           ; BSR set to: 0
  6989  002F2A  0100               	movlb	0	; () banked
  6990  002F2C  5183               	movf	__tdiv_to_l_@f2& (0+255),w,b
  6991  002F2E  0100               	movlb	0	; () banked
  6992  002F30  5F80               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  6993  002F32  0100               	movlb	0	; () banked
  6994  002F34  5184               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6995  002F36  0100               	movlb	0	; () banked
  6996  002F38  5B81               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6997  002F3A  0100               	movlb	0	; () banked
  6998  002F3C  5185               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  6999  002F3E  0100               	movlb	0	; () banked
  7000  002F40  5B82               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  7001                           
  7002                           ; BSR set to: 0
  7003  002F42  0100               	movlb	0	; () banked
  7004  002F44  8189               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  7005  002F46                     l1089:
  7006                           
  7007                           ; BSR set to: 0
  7008  002F46  0100               	movlb	0	; () banked
  7009  002F48  90D8               	bcf	status,0,c
  7010  002F4A  3780               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  7011  002F4C  3781               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  7012  002F4E  3782               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  7013                           
  7014                           ; BSR set to: 0
  7015  002F50  0100               	movlb	0	; () banked
  7016  002F52  2F8D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  7017  002F54  D7D6               	goto	l1088
  7018                           
  7019                           ; BSR set to: 0
  7020                           
  7021                           ; BSR set to: 0
  7022  002F56  0100               	movlb	0	; () banked
  7023  002F58  AF8E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  7024  002F5A  D01A               	goto	l4770
  7025                           
  7026                           ; BSR set to: 0
  7027  002F5C  0100               	movlb	0	; () banked
  7028  002F5E  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  7029  002F60  0A80               	xorlw	128
  7030  002F62  0F97               	addlw	151
  7031  002F64  B0D8               	btfsc	status,0,c
  7032  002F66  D00A               	goto	l4766
  7033                           
  7034                           ; BSR set to: 0
  7035  002F68  0E00               	movlw	0
  7036  002F6A  0100               	movlb	0	; () banked
  7037  002F6C  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  7038  002F6E  0E00               	movlw	0
  7039  002F70  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  7040  002F72  0E00               	movlw	0
  7041  002F74  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  7042  002F76  0E00               	movlw	0
  7043  002F78  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  7044                           
  7045                           ; BSR set to: 0
  7046  002F7A  0012               	return	
  7047  002F7C                     l4766:
  7048                           
  7049                           ; BSR set to: 0
  7050  002F7C  0100               	movlb	0	; () banked
  7051  002F7E  90D8               	bcf	status,0,c
  7052  002F80  338C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  7053  002F82  338B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  7054  002F84  338A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  7055  002F86  3389               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  7056                           
  7057                           ; BSR set to: 0
  7058  002F88  0100               	movlb	0	; () banked
  7059  002F8A  3F8E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  7060  002F8C  D7F7               	goto	l4766
  7061                           
  7062                           ; BSR set to: 0
  7063  002F8E  D01B               	goto	l1095
  7064  002F90                     l4770:
  7065                           
  7066                           ; BSR set to: 0
  7067  002F90  0E17               	movlw	23
  7068  002F92  0100               	movlb	0	; () banked
  7069  002F94  658E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  7070  002F96  D012               	goto	l4778
  7071                           
  7072                           ; BSR set to: 0
  7073  002F98  0E00               	movlw	0
  7074  002F9A  0100               	movlb	0	; () banked
  7075  002F9C  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  7076  002F9E  0E00               	movlw	0
  7077  002FA0  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  7078  002FA2  0E00               	movlw	0
  7079  002FA4  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  7080  002FA6  0E00               	movlw	0
  7081  002FA8  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  7082                           
  7083                           ; BSR set to: 0
  7084  002FAA  0012               	return	
  7085  002FAC                     l4776:
  7086                           
  7087                           ; BSR set to: 0
  7088  002FAC  0100               	movlb	0	; () banked
  7089  002FAE  90D8               	bcf	status,0,c
  7090  002FB0  3789               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  7091  002FB2  378A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  7092  002FB4  378B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  7093  002FB6  378C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  7094  002FB8  0100               	movlb	0	; () banked
  7095  002FBA  078E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  7096  002FBC                     l4778:
  7097                           
  7098                           ; BSR set to: 0
  7099  002FBC  0100               	movlb	0	; () banked
  7100  002FBE  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  7101  002FC0  0100               	movlb	0	; () banked
  7102  002FC2  A4D8               	btfss	status,2,c
  7103  002FC4  D7F3               	goto	l4776
  7104  002FC6                     l1095:
  7105                           
  7106                           ; BSR set to: 0
  7107  002FC6  C089  F080         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7108  002FCA  C08A  F081         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7109  002FCE  C08B  F082         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7110  002FD2  C08C  F083         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7111                           
  7112                           ; BSR set to: 0
  7113  002FD6  0012               	return		;funcret
  7114  002FD8                     __end_of__tdiv_to_l_:
  7115                           	opt stack 0
  7116                           tblptru	equ	0xFF8
  7117                           tblptrh	equ	0xFF7
  7118                           tblptrl	equ	0xFF6
  7119                           tablat	equ	0xFF5
  7120                           prodh	equ	0xFF4
  7121                           prodl	equ	0xFF3
  7122                           postinc0	equ	0xFEE
  7123                           wreg	equ	0xFE8
  7124                           postdec1	equ	0xFE5
  7125                           fsr1l	equ	0xFE1
  7126                           indf2	equ	0xFDF
  7127                           postinc2	equ	0xFDE
  7128                           postdec2	equ	0xFDD
  7129                           fsr2h	equ	0xFDA
  7130                           fsr2l	equ	0xFD9
  7131                           status	equ	0xFD8
  7132                           
  7133 ;; *************** function __div_to_l_ *****************
  7134 ;; Defined at:
  7135 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  7136 ;; Parameters:    Size  Location     Type
  7137 ;;  f1              3    0[BANK0 ] unsigned long 
  7138 ;;  f2              3    3[BANK0 ] unsigned long 
  7139 ;; Auto vars:     Size  Location     Type
  7140 ;;  quot            4    6[BANK0 ] unsigned long 
  7141 ;;  exp1            1   11[BANK0 ] unsigned char 
  7142 ;;  cntr            1   10[BANK0 ] unsigned char 
  7143 ;; Return value:  Size  Location     Type
  7144 ;;                  4    0[BANK0 ] unsigned long 
  7145 ;; Registers used:
  7146 ;;		wreg, status,2, status,0
  7147 ;; Tracked objects:
  7148 ;;		On entry : 0/0
  7149 ;;		On exit  : 0/0
  7150 ;;		Unchanged: 0/0
  7151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7152 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7153 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7155 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7156 ;;Total ram usage:       12 bytes
  7157 ;; Hardware stack levels used:    1
  7158 ;; Hardware stack levels required when called:    6
  7159 ;; This function calls:
  7160 ;;		Nothing
  7161 ;; This function is called by:
  7162 ;;		_printf
  7163 ;; This function uses a non-reentrant model
  7164 ;;
  7165                           
  7166                           	psect	text14
  7167  002FD8                     __ptext14:
  7168                           	opt stack 0
  7169  002FD8                     __div_to_l_:
  7170                           	opt stack 22
  7171                           
  7172                           ; BSR set to: 0
  7173                           ;incstack = 0
  7174  002FD8  0100               	movlb	0	; () banked
  7175  002FDA  3582               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  7176  002FDC  3583               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  7177  002FDE  0100               	movlb	0	; () banked
  7178  002FE0  6F8B               	movwf	__div_to_l_@exp1& (0+255),b
  7179  002FE2  0100               	movlb	0	; () banked
  7180  002FE4  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  7181  002FE6  A4D8               	btfss	status,2,c
  7182  002FE8  D00A               	goto	l4786
  7183                           
  7184                           ; BSR set to: 0
  7185  002FEA  0E00               	movlw	0
  7186  002FEC  0100               	movlb	0	; () banked
  7187  002FEE  6F80               	movwf	?__div_to_l_& (0+255),b
  7188  002FF0  0E00               	movlw	0
  7189  002FF2  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  7190  002FF4  0E00               	movlw	0
  7191  002FF6  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  7192  002FF8  0E00               	movlw	0
  7193  002FFA  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  7194                           
  7195                           ; BSR set to: 0
  7196  002FFC  0012               	return	
  7197  002FFE                     l4786:
  7198                           
  7199                           ; BSR set to: 0
  7200  002FFE  0100               	movlb	0	; () banked
  7201  003000  3585               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  7202  003002  3586               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  7203  003004  0100               	movlb	0	; () banked
  7204  003006  6F8A               	movwf	__div_to_l_@cntr& (0+255),b
  7205  003008  0100               	movlb	0	; () banked
  7206  00300A  518A               	movf	__div_to_l_@cntr& (0+255),w,b
  7207  00300C  A4D8               	btfss	status,2,c
  7208  00300E  D00A               	goto	l4792
  7209                           
  7210                           ; BSR set to: 0
  7211  003010  0E00               	movlw	0
  7212  003012  0100               	movlb	0	; () banked
  7213  003014  6F80               	movwf	?__div_to_l_& (0+255),b
  7214  003016  0E00               	movlw	0
  7215  003018  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  7216  00301A  0E00               	movlw	0
  7217  00301C  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  7218  00301E  0E00               	movlw	0
  7219  003020  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  7220                           
  7221                           ; BSR set to: 0
  7222  003022  0012               	return	
  7223  003024                     l4792:
  7224                           
  7225                           ; BSR set to: 0
  7226  003024  0100               	movlb	0	; () banked
  7227  003026  8F82               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  7228                           
  7229                           ; BSR set to: 0
  7230  003028  0EFF               	movlw	255
  7231  00302A  0100               	movlb	0	; () banked
  7232  00302C  1780               	andwf	__div_to_l_@f1& (0+255),f,b
  7233  00302E  0EFF               	movlw	255
  7234  003030  1781               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  7235  003032  0EFF               	movlw	255
  7236  003034  1782               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  7237  003036  0E00               	movlw	0
  7238  003038  1783               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  7239                           
  7240                           ; BSR set to: 0
  7241  00303A  0100               	movlb	0	; () banked
  7242  00303C  8F85               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  7243  00303E  0EFF               	movlw	255
  7244  003040  0100               	movlb	0	; () banked
  7245  003042  1783               	andwf	__div_to_l_@f2& (0+255),f,b
  7246  003044  0EFF               	movlw	255
  7247  003046  1784               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  7248  003048  0EFF               	movlw	255
  7249  00304A  1785               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  7250  00304C  0E00               	movlw	0
  7251  00304E  1786               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  7252                           
  7253                           ; BSR set to: 0
  7254  003050  0E00               	movlw	0
  7255  003052  0100               	movlb	0	; () banked
  7256  003054  6F86               	movwf	__div_to_l_@quot& (0+255),b
  7257  003056  0E00               	movlw	0
  7258  003058  6F87               	movwf	(__div_to_l_@quot+1)& (0+255),b
  7259  00305A  0E00               	movlw	0
  7260  00305C  6F88               	movwf	(__div_to_l_@quot+2)& (0+255),b
  7261  00305E  0E00               	movlw	0
  7262  003060  6F89               	movwf	(__div_to_l_@quot+3)& (0+255),b
  7263                           
  7264                           ; BSR set to: 0
  7265  003062  0E7F               	movlw	127
  7266  003064  0100               	movlb	0	; () banked
  7267  003066  5F8B               	subwf	__div_to_l_@exp1& (0+255),f,b
  7268                           
  7269                           ; BSR set to: 0
  7270  003068  0100               	movlb	0	; () banked
  7271  00306A  518A               	movf	__div_to_l_@cntr& (0+255),w,b
  7272  00306C  0FA0               	addlw	160
  7273  00306E  0100               	movlb	0	; () banked
  7274  003070  5F8B               	subwf	__div_to_l_@exp1& (0+255),f,b
  7275                           
  7276                           ; BSR set to: 0
  7277  003072  0E20               	movlw	32
  7278  003074  0100               	movlb	0	; () banked
  7279  003076  6F8A               	movwf	__div_to_l_@cntr& (0+255),b
  7280  003078                     l4806:
  7281                           
  7282                           ; BSR set to: 0
  7283  003078  0100               	movlb	0	; () banked
  7284  00307A  90D8               	bcf	status,0,c
  7285  00307C  3786               	rlcf	__div_to_l_@quot& (0+255),f,b
  7286  00307E  3787               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  7287  003080  3788               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  7288  003082  3789               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  7289                           
  7290                           ; BSR set to: 0
  7291  003084  0100               	movlb	0	; () banked
  7292  003086  5183               	movf	__div_to_l_@f2& (0+255),w,b
  7293  003088  0100               	movlb	0	; () banked
  7294  00308A  5D80               	subwf	__div_to_l_@f1& (0+255),w,b
  7295  00308C  0100               	movlb	0	; () banked
  7296  00308E  5184               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  7297  003090  0100               	movlb	0	; () banked
  7298  003092  5981               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  7299  003094  0100               	movlb	0	; () banked
  7300  003096  5185               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  7301  003098  0100               	movlb	0	; () banked
  7302  00309A  5982               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  7303  00309C  0100               	movlb	0	; () banked
  7304  00309E  5186               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  7305  0030A0  0100               	movlb	0	; () banked
  7306  0030A2  5983               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  7307  0030A4  A0D8               	btfss	status,0,c
  7308  0030A6  D012               	goto	l4814
  7309                           
  7310                           ; BSR set to: 0
  7311  0030A8  0100               	movlb	0	; () banked
  7312  0030AA  5183               	movf	__div_to_l_@f2& (0+255),w,b
  7313  0030AC  0100               	movlb	0	; () banked
  7314  0030AE  5F80               	subwf	__div_to_l_@f1& (0+255),f,b
  7315  0030B0  0100               	movlb	0	; () banked
  7316  0030B2  5184               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  7317  0030B4  0100               	movlb	0	; () banked
  7318  0030B6  5B81               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  7319  0030B8  0100               	movlb	0	; () banked
  7320  0030BA  5185               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  7321  0030BC  0100               	movlb	0	; () banked
  7322  0030BE  5B82               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  7323  0030C0  0100               	movlb	0	; () banked
  7324  0030C2  5186               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  7325  0030C4  0100               	movlb	0	; () banked
  7326  0030C6  5B83               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  7327                           
  7328                           ; BSR set to: 0
  7329  0030C8  0100               	movlb	0	; () banked
  7330  0030CA  8186               	bsf	__div_to_l_@quot& (0+255),0,b
  7331  0030CC                     l4814:
  7332                           
  7333                           ; BSR set to: 0
  7334  0030CC  0100               	movlb	0	; () banked
  7335  0030CE  90D8               	bcf	status,0,c
  7336  0030D0  3780               	rlcf	__div_to_l_@f1& (0+255),f,b
  7337  0030D2  3781               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  7338  0030D4  3782               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  7339  0030D6  3783               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  7340                           
  7341                           ; BSR set to: 0
  7342  0030D8  0100               	movlb	0	; () banked
  7343  0030DA  2F8A               	decfsz	__div_to_l_@cntr& (0+255),f,b
  7344  0030DC  D7CD               	goto	l4806
  7345                           
  7346                           ; BSR set to: 0
  7347                           
  7348                           ; BSR set to: 0
  7349  0030DE  0100               	movlb	0	; () banked
  7350  0030E0  AF8B               	btfss	__div_to_l_@exp1& (0+255),7,b
  7351  0030E2  D01A               	goto	l4830
  7352                           
  7353                           ; BSR set to: 0
  7354  0030E4  0100               	movlb	0	; () banked
  7355  0030E6  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  7356  0030E8  0A80               	xorlw	128
  7357  0030EA  0F9F               	addlw	159
  7358  0030EC  B0D8               	btfsc	status,0,c
  7359  0030EE  D00A               	goto	l4826
  7360                           
  7361                           ; BSR set to: 0
  7362  0030F0  0E00               	movlw	0
  7363  0030F2  0100               	movlb	0	; () banked
  7364  0030F4  6F80               	movwf	?__div_to_l_& (0+255),b
  7365  0030F6  0E00               	movlw	0
  7366  0030F8  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  7367  0030FA  0E00               	movlw	0
  7368  0030FC  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  7369  0030FE  0E00               	movlw	0
  7370  003100  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  7371                           
  7372                           ; BSR set to: 0
  7373  003102  0012               	return	
  7374  003104                     l4826:
  7375                           
  7376                           ; BSR set to: 0
  7377  003104  0100               	movlb	0	; () banked
  7378  003106  90D8               	bcf	status,0,c
  7379  003108  3389               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  7380  00310A  3388               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  7381  00310C  3387               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  7382  00310E  3386               	rrcf	__div_to_l_@quot& (0+255),f,b
  7383                           
  7384                           ; BSR set to: 0
  7385  003110  0100               	movlb	0	; () banked
  7386  003112  3F8B               	incfsz	__div_to_l_@exp1& (0+255),f,b
  7387  003114  D7F7               	goto	l4826
  7388                           
  7389                           ; BSR set to: 0
  7390  003116  D01B               	goto	l991
  7391  003118                     l4830:
  7392                           
  7393                           ; BSR set to: 0
  7394  003118  0E1F               	movlw	31
  7395  00311A  0100               	movlb	0	; () banked
  7396  00311C  658B               	cpfsgt	__div_to_l_@exp1& (0+255),b
  7397  00311E  D012               	goto	l4838
  7398                           
  7399                           ; BSR set to: 0
  7400  003120  0E00               	movlw	0
  7401  003122  0100               	movlb	0	; () banked
  7402  003124  6F80               	movwf	?__div_to_l_& (0+255),b
  7403  003126  0E00               	movlw	0
  7404  003128  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  7405  00312A  0E00               	movlw	0
  7406  00312C  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  7407  00312E  0E00               	movlw	0
  7408  003130  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  7409                           
  7410                           ; BSR set to: 0
  7411  003132  0012               	return	
  7412  003134                     l4836:
  7413                           
  7414                           ; BSR set to: 0
  7415  003134  0100               	movlb	0	; () banked
  7416  003136  90D8               	bcf	status,0,c
  7417  003138  3786               	rlcf	__div_to_l_@quot& (0+255),f,b
  7418  00313A  3787               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  7419  00313C  3788               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  7420  00313E  3789               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  7421  003140  0100               	movlb	0	; () banked
  7422  003142  078B               	decf	__div_to_l_@exp1& (0+255),f,b
  7423  003144                     l4838:
  7424                           
  7425                           ; BSR set to: 0
  7426  003144  0100               	movlb	0	; () banked
  7427  003146  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  7428  003148  0100               	movlb	0	; () banked
  7429  00314A  A4D8               	btfss	status,2,c
  7430  00314C  D7F3               	goto	l4836
  7431  00314E                     l991:
  7432                           
  7433                           ; BSR set to: 0
  7434  00314E  C086  F080         	movff	__div_to_l_@quot,?__div_to_l_
  7435  003152  C087  F081         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7436  003156  C088  F082         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7437  00315A  C089  F083         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7438                           
  7439                           ; BSR set to: 0
  7440  00315E  0012               	return		;funcret
  7441  003160                     __end_of__div_to_l_:
  7442                           	opt stack 0
  7443                           tblptru	equ	0xFF8
  7444                           tblptrh	equ	0xFF7
  7445                           tblptrl	equ	0xFF6
  7446                           tablat	equ	0xFF5
  7447                           prodh	equ	0xFF4
  7448                           prodl	equ	0xFF3
  7449                           postinc0	equ	0xFEE
  7450                           wreg	equ	0xFE8
  7451                           postdec1	equ	0xFE5
  7452                           fsr1l	equ	0xFE1
  7453                           indf2	equ	0xFDF
  7454                           postinc2	equ	0xFDE
  7455                           postdec2	equ	0xFDD
  7456                           fsr2h	equ	0xFDA
  7457                           fsr2l	equ	0xFD9
  7458                           status	equ	0xFD8
  7459                           
  7460 ;; *************** function ___lltoft *****************
  7461 ;; Defined at:
  7462 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  7463 ;; Parameters:    Size  Location     Type
  7464 ;;  c               4    8[BANK0 ] unsigned long 
  7465 ;; Auto vars:     Size  Location     Type
  7466 ;;  exp             1   16[BANK0 ] unsigned char 
  7467 ;; Return value:  Size  Location     Type
  7468 ;;                  3    8[BANK0 ] float 
  7469 ;; Registers used:
  7470 ;;		wreg, status,2, status,0, cstack
  7471 ;; Tracked objects:
  7472 ;;		On entry : 0/0
  7473 ;;		On exit  : 0/0
  7474 ;;		Unchanged: 0/0
  7475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7476 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7477 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7478 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7479 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7480 ;;Total ram usage:        9 bytes
  7481 ;; Hardware stack levels used:    1
  7482 ;; Hardware stack levels required when called:    7
  7483 ;; This function calls:
  7484 ;;		___ftpack
  7485 ;; This function is called by:
  7486 ;;		_printf
  7487 ;; This function uses a non-reentrant model
  7488 ;;
  7489                           
  7490                           	psect	text15
  7491  004A92                     __ptext15:
  7492                           	opt stack 0
  7493  004A92                     ___lltoft:
  7494                           	opt stack 21
  7495                           
  7496                           ; BSR set to: 0
  7497                           ;incstack = 0
  7498  004A92  0E8E               	movlw	142
  7499  004A94  0100               	movlb	0	; () banked
  7500  004A96  6F90               	movwf	___lltoft@exp& (0+255),b
  7501  004A98  D008               	goto	l5032
  7502  004A9A                     l5030:
  7503                           
  7504                           ; BSR set to: 0
  7505  004A9A  0100               	movlb	0	; () banked
  7506  004A9C  90D8               	bcf	status,0,c
  7507  004A9E  338B               	rrcf	(___lltoft@c+3)& (0+255),f,b
  7508  004AA0  338A               	rrcf	(___lltoft@c+2)& (0+255),f,b
  7509  004AA2  3389               	rrcf	(___lltoft@c+1)& (0+255),f,b
  7510  004AA4  3388               	rrcf	___lltoft@c& (0+255),f,b
  7511  004AA6  0100               	movlb	0	; () banked
  7512  004AA8  2B90               	incf	___lltoft@exp& (0+255),f,b
  7513  004AAA                     l5032:
  7514                           
  7515                           ; BSR set to: 0
  7516  004AAA  0E00               	movlw	0
  7517  004AAC  0100               	movlb	0	; () banked
  7518  004AAE  1588               	andwf	___lltoft@c& (0+255),w,b
  7519  004AB0  0100               	movlb	0	; () banked
  7520  004AB2  6F8C               	movwf	??___lltoft& (0+255),b
  7521  004AB4  0E00               	movlw	0
  7522  004AB6  0100               	movlb	0	; () banked
  7523  004AB8  1589               	andwf	(___lltoft@c+1)& (0+255),w,b
  7524  004ABA  0100               	movlb	0	; () banked
  7525  004ABC  6F8D               	movwf	(??___lltoft+1)& (0+255),b
  7526  004ABE  0E00               	movlw	0
  7527  004AC0  0100               	movlb	0	; () banked
  7528  004AC2  158A               	andwf	(___lltoft@c+2)& (0+255),w,b
  7529  004AC4  0100               	movlb	0	; () banked
  7530  004AC6  6F8E               	movwf	(??___lltoft+2)& (0+255),b
  7531  004AC8  0EFF               	movlw	255
  7532  004ACA  0100               	movlb	0	; () banked
  7533  004ACC  158B               	andwf	(___lltoft@c+3)& (0+255),w,b
  7534  004ACE  0100               	movlb	0	; () banked
  7535  004AD0  6F8F               	movwf	(??___lltoft+3)& (0+255),b
  7536  004AD2  0100               	movlb	0	; () banked
  7537  004AD4  518C               	movf	??___lltoft& (0+255),w,b
  7538  004AD6  0100               	movlb	0	; () banked
  7539  004AD8  118D               	iorwf	(??___lltoft+1)& (0+255),w,b
  7540  004ADA  0100               	movlb	0	; () banked
  7541  004ADC  118E               	iorwf	(??___lltoft+2)& (0+255),w,b
  7542  004ADE  0100               	movlb	0	; () banked
  7543  004AE0  118F               	iorwf	(??___lltoft+3)& (0+255),w,b
  7544  004AE2  A4D8               	btfss	status,2,c
  7545  004AE4  D7DA               	goto	l5030
  7546                           
  7547                           ; BSR set to: 0
  7548                           
  7549                           ; BSR set to: 0
  7550  004AE6  C088  F080         	movff	___lltoft@c,___ftpack@arg
  7551  004AEA  C089  F081         	movff	___lltoft@c+1,___ftpack@arg+1
  7552  004AEE  C08A  F082         	movff	___lltoft@c+2,___ftpack@arg+2
  7553  004AF2  C090  F083         	movff	___lltoft@exp,___ftpack@exp
  7554  004AF6  0E00               	movlw	0
  7555  004AF8  0100               	movlb	0	; () banked
  7556  004AFA  6F84               	movwf	___ftpack@sign& (0+255),b
  7557  004AFC  ECAC  F01D         	call	___ftpack	;wreg free
  7558  004B00  C080  F088         	movff	?___ftpack,?___lltoft
  7559  004B04  C081  F089         	movff	?___ftpack+1,?___lltoft+1
  7560  004B08  C082  F08A         	movff	?___ftpack+2,?___lltoft+2
  7561  004B0C  0012               	return	
  7562  004B0E                     __end_of___lltoft:
  7563                           	opt stack 0
  7564                           tblptru	equ	0xFF8
  7565                           tblptrh	equ	0xFF7
  7566                           tblptrl	equ	0xFF6
  7567                           tablat	equ	0xFF5
  7568                           prodh	equ	0xFF4
  7569                           prodl	equ	0xFF3
  7570                           postinc0	equ	0xFEE
  7571                           wreg	equ	0xFE8
  7572                           postdec1	equ	0xFE5
  7573                           fsr1l	equ	0xFE1
  7574                           indf2	equ	0xFDF
  7575                           postinc2	equ	0xFDE
  7576                           postdec2	equ	0xFDD
  7577                           fsr2h	equ	0xFDA
  7578                           fsr2l	equ	0xFD9
  7579                           status	equ	0xFD8
  7580                           
  7581 ;; *************** function ___llmod *****************
  7582 ;; Defined at:
  7583 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  7584 ;; Parameters:    Size  Location     Type
  7585 ;;  dividend        4   13[BANK0 ] unsigned long 
  7586 ;;  divisor         4   17[BANK0 ] unsigned long 
  7587 ;; Auto vars:     Size  Location     Type
  7588 ;;  counter         1   21[BANK0 ] unsigned char 
  7589 ;; Return value:  Size  Location     Type
  7590 ;;                  4   13[BANK0 ] unsigned long 
  7591 ;; Registers used:
  7592 ;;		wreg, status,2, status,0
  7593 ;; Tracked objects:
  7594 ;;		On entry : 0/0
  7595 ;;		On exit  : 0/0
  7596 ;;		Unchanged: 0/0
  7597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7598 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7599 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7601 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7602 ;;Total ram usage:        9 bytes
  7603 ;; Hardware stack levels used:    1
  7604 ;; Hardware stack levels required when called:    6
  7605 ;; This function calls:
  7606 ;;		Nothing
  7607 ;; This function is called by:
  7608 ;;		_printf
  7609 ;; This function uses a non-reentrant model
  7610 ;;
  7611                           
  7612                           	psect	text16
  7613  0047D6                     __ptext16:
  7614                           	opt stack 0
  7615  0047D6                     ___llmod:
  7616                           	opt stack 22
  7617                           
  7618                           ;incstack = 0
  7619  0047D6  0100               	movlb	0	; () banked
  7620  0047D8  5191               	movf	___llmod@divisor& (0+255),w,b
  7621  0047DA  0100               	movlb	0	; () banked
  7622  0047DC  1192               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  7623  0047DE  0100               	movlb	0	; () banked
  7624  0047E0  1193               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  7625  0047E2  0100               	movlb	0	; () banked
  7626  0047E4  1194               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  7627  0047E6  B4D8               	btfsc	status,2,c
  7628  0047E8  D03A               	goto	l1180
  7629                           
  7630                           ; BSR set to: 0
  7631  0047EA  0E01               	movlw	1
  7632  0047EC  0100               	movlb	0	; () banked
  7633  0047EE  6F95               	movwf	___llmod@counter& (0+255),b
  7634  0047F0  D008               	goto	l5018
  7635  0047F2                     l5016:
  7636                           
  7637                           ; BSR set to: 0
  7638  0047F2  0100               	movlb	0	; () banked
  7639  0047F4  90D8               	bcf	status,0,c
  7640  0047F6  3791               	rlcf	___llmod@divisor& (0+255),f,b
  7641  0047F8  3792               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  7642  0047FA  3793               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  7643  0047FC  3794               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  7644  0047FE  0100               	movlb	0	; () banked
  7645  004800  2B95               	incf	___llmod@counter& (0+255),f,b
  7646  004802                     l5018:
  7647                           
  7648                           ; BSR set to: 0
  7649  004802  0100               	movlb	0	; () banked
  7650  004804  AF94               	btfss	(___llmod@divisor+3)& (0+255),7,b
  7651  004806  D7F5               	goto	l5016
  7652  004808                     l5020:
  7653                           
  7654                           ; BSR set to: 0
  7655  004808  0100               	movlb	0	; () banked
  7656  00480A  5191               	movf	___llmod@divisor& (0+255),w,b
  7657  00480C  0100               	movlb	0	; () banked
  7658  00480E  5D8D               	subwf	___llmod@dividend& (0+255),w,b
  7659  004810  0100               	movlb	0	; () banked
  7660  004812  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  7661  004814  0100               	movlb	0	; () banked
  7662  004816  598E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  7663  004818  0100               	movlb	0	; () banked
  7664  00481A  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  7665  00481C  0100               	movlb	0	; () banked
  7666  00481E  598F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  7667  004820  0100               	movlb	0	; () banked
  7668  004822  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  7669  004824  0100               	movlb	0	; () banked
  7670  004826  5990               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  7671  004828  A0D8               	btfss	status,0,c
  7672  00482A  D010               	goto	l5024
  7673                           
  7674                           ; BSR set to: 0
  7675  00482C  0100               	movlb	0	; () banked
  7676  00482E  5191               	movf	___llmod@divisor& (0+255),w,b
  7677  004830  0100               	movlb	0	; () banked
  7678  004832  5F8D               	subwf	___llmod@dividend& (0+255),f,b
  7679  004834  0100               	movlb	0	; () banked
  7680  004836  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  7681  004838  0100               	movlb	0	; () banked
  7682  00483A  5B8E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  7683  00483C  0100               	movlb	0	; () banked
  7684  00483E  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  7685  004840  0100               	movlb	0	; () banked
  7686  004842  5B8F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  7687  004844  0100               	movlb	0	; () banked
  7688  004846  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  7689  004848  0100               	movlb	0	; () banked
  7690  00484A  5B90               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  7691  00484C                     l5024:
  7692                           
  7693                           ; BSR set to: 0
  7694  00484C  0100               	movlb	0	; () banked
  7695  00484E  90D8               	bcf	status,0,c
  7696  004850  3394               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  7697  004852  3393               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  7698  004854  3392               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  7699  004856  3391               	rrcf	___llmod@divisor& (0+255),f,b
  7700                           
  7701                           ; BSR set to: 0
  7702  004858  0100               	movlb	0	; () banked
  7703  00485A  2F95               	decfsz	___llmod@counter& (0+255),f,b
  7704  00485C  D7D5               	goto	l5020
  7705  00485E                     l1180:
  7706                           
  7707                           ; BSR set to: 0
  7708  00485E  C08D  F08D         	movff	___llmod@dividend,?___llmod
  7709  004862  C08E  F08E         	movff	___llmod@dividend+1,?___llmod+1
  7710  004866  C08F  F08F         	movff	___llmod@dividend+2,?___llmod+2
  7711  00486A  C090  F090         	movff	___llmod@dividend+3,?___llmod+3
  7712                           
  7713                           ; BSR set to: 0
  7714  00486E  0012               	return		;funcret
  7715  004870                     __end_of___llmod:
  7716                           	opt stack 0
  7717                           tblptru	equ	0xFF8
  7718                           tblptrh	equ	0xFF7
  7719                           tblptrl	equ	0xFF6
  7720                           tablat	equ	0xFF5
  7721                           prodh	equ	0xFF4
  7722                           prodl	equ	0xFF3
  7723                           postinc0	equ	0xFEE
  7724                           wreg	equ	0xFE8
  7725                           postdec1	equ	0xFE5
  7726                           fsr1l	equ	0xFE1
  7727                           indf2	equ	0xFDF
  7728                           postinc2	equ	0xFDE
  7729                           postdec2	equ	0xFDD
  7730                           fsr2h	equ	0xFDA
  7731                           fsr2l	equ	0xFD9
  7732                           status	equ	0xFD8
  7733                           
  7734 ;; *************** function ___lldiv *****************
  7735 ;; Defined at:
  7736 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  7737 ;; Parameters:    Size  Location     Type
  7738 ;;  dividend        4    0[BANK0 ] unsigned long 
  7739 ;;  divisor         4    4[BANK0 ] unsigned long 
  7740 ;; Auto vars:     Size  Location     Type
  7741 ;;  quotient        4    8[BANK0 ] unsigned long 
  7742 ;;  counter         1   12[BANK0 ] unsigned char 
  7743 ;; Return value:  Size  Location     Type
  7744 ;;                  4    0[BANK0 ] unsigned long 
  7745 ;; Registers used:
  7746 ;;		wreg, status,2, status,0
  7747 ;; Tracked objects:
  7748 ;;		On entry : 0/0
  7749 ;;		On exit  : 0/0
  7750 ;;		Unchanged: 0/0
  7751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7752 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7753 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7755 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7756 ;;Total ram usage:       13 bytes
  7757 ;; Hardware stack levels used:    1
  7758 ;; Hardware stack levels required when called:    6
  7759 ;; This function calls:
  7760 ;;		Nothing
  7761 ;; This function is called by:
  7762 ;;		_printf
  7763 ;;		_I2C_Master_Init
  7764 ;; This function uses a non-reentrant model
  7765 ;;
  7766                           
  7767                           	psect	text17
  7768  00452C                     __ptext17:
  7769                           	opt stack 0
  7770  00452C                     ___lldiv:
  7771                           	opt stack 22
  7772                           
  7773                           ; BSR set to: 0
  7774                           ;incstack = 0
  7775  00452C  0E00               	movlw	0
  7776  00452E  0100               	movlb	0	; () banked
  7777  004530  6F88               	movwf	___lldiv@quotient& (0+255),b
  7778  004532  0E00               	movlw	0
  7779  004534  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  7780  004536  0E00               	movlw	0
  7781  004538  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  7782  00453A  0E00               	movlw	0
  7783  00453C  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7784                           
  7785                           ; BSR set to: 0
  7786  00453E  0100               	movlb	0	; () banked
  7787  004540  5184               	movf	___lldiv@divisor& (0+255),w,b
  7788  004542  0100               	movlb	0	; () banked
  7789  004544  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7790  004546  0100               	movlb	0	; () banked
  7791  004548  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7792  00454A  0100               	movlb	0	; () banked
  7793  00454C  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7794  00454E  B4D8               	btfsc	status,2,c
  7795  004550  D042               	goto	l1170
  7796                           
  7797                           ; BSR set to: 0
  7798  004552  0E01               	movlw	1
  7799  004554  0100               	movlb	0	; () banked
  7800  004556  6F8C               	movwf	___lldiv@counter& (0+255),b
  7801  004558  D008               	goto	l4998
  7802  00455A                     l4996:
  7803                           
  7804                           ; BSR set to: 0
  7805  00455A  0100               	movlb	0	; () banked
  7806  00455C  90D8               	bcf	status,0,c
  7807  00455E  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  7808  004560  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7809  004562  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7810  004564  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7811  004566  0100               	movlb	0	; () banked
  7812  004568  2B8C               	incf	___lldiv@counter& (0+255),f,b
  7813  00456A                     l4998:
  7814                           
  7815                           ; BSR set to: 0
  7816  00456A  0100               	movlb	0	; () banked
  7817  00456C  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7818  00456E  D7F5               	goto	l4996
  7819  004570                     l5000:
  7820                           
  7821                           ; BSR set to: 0
  7822  004570  0100               	movlb	0	; () banked
  7823  004572  90D8               	bcf	status,0,c
  7824  004574  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  7825  004576  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7826  004578  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7827  00457A  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7828                           
  7829                           ; BSR set to: 0
  7830  00457C  0100               	movlb	0	; () banked
  7831  00457E  5184               	movf	___lldiv@divisor& (0+255),w,b
  7832  004580  0100               	movlb	0	; () banked
  7833  004582  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  7834  004584  0100               	movlb	0	; () banked
  7835  004586  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7836  004588  0100               	movlb	0	; () banked
  7837  00458A  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7838  00458C  0100               	movlb	0	; () banked
  7839  00458E  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7840  004590  0100               	movlb	0	; () banked
  7841  004592  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7842  004594  0100               	movlb	0	; () banked
  7843  004596  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7844  004598  0100               	movlb	0	; () banked
  7845  00459A  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7846  00459C  A0D8               	btfss	status,0,c
  7847  00459E  D012               	goto	l5008
  7848                           
  7849                           ; BSR set to: 0
  7850  0045A0  0100               	movlb	0	; () banked
  7851  0045A2  5184               	movf	___lldiv@divisor& (0+255),w,b
  7852  0045A4  0100               	movlb	0	; () banked
  7853  0045A6  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  7854  0045A8  0100               	movlb	0	; () banked
  7855  0045AA  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7856  0045AC  0100               	movlb	0	; () banked
  7857  0045AE  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7858  0045B0  0100               	movlb	0	; () banked
  7859  0045B2  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7860  0045B4  0100               	movlb	0	; () banked
  7861  0045B6  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7862  0045B8  0100               	movlb	0	; () banked
  7863  0045BA  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7864  0045BC  0100               	movlb	0	; () banked
  7865  0045BE  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7866                           
  7867                           ; BSR set to: 0
  7868  0045C0  0100               	movlb	0	; () banked
  7869  0045C2  8188               	bsf	___lldiv@quotient& (0+255),0,b
  7870  0045C4                     l5008:
  7871                           
  7872                           ; BSR set to: 0
  7873  0045C4  0100               	movlb	0	; () banked
  7874  0045C6  90D8               	bcf	status,0,c
  7875  0045C8  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7876  0045CA  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7877  0045CC  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7878  0045CE  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7879                           
  7880                           ; BSR set to: 0
  7881  0045D0  0100               	movlb	0	; () banked
  7882  0045D2  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7883  0045D4  D7CD               	goto	l5000
  7884  0045D6                     l1170:
  7885                           
  7886                           ; BSR set to: 0
  7887  0045D6  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7888  0045DA  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7889  0045DE  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7890  0045E2  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7891                           
  7892                           ; BSR set to: 0
  7893  0045E6  0012               	return		;funcret
  7894  0045E8                     __end_of___lldiv:
  7895                           	opt stack 0
  7896                           tblptru	equ	0xFF8
  7897                           tblptrh	equ	0xFF7
  7898                           tblptrl	equ	0xFF6
  7899                           tablat	equ	0xFF5
  7900                           prodh	equ	0xFF4
  7901                           prodl	equ	0xFF3
  7902                           postinc0	equ	0xFEE
  7903                           wreg	equ	0xFE8
  7904                           postdec1	equ	0xFE5
  7905                           fsr1l	equ	0xFE1
  7906                           indf2	equ	0xFDF
  7907                           postinc2	equ	0xFDE
  7908                           postdec2	equ	0xFDD
  7909                           fsr2h	equ	0xFDA
  7910                           fsr2l	equ	0xFD9
  7911                           status	equ	0xFD8
  7912                           
  7913 ;; *************** function ___ftsub *****************
  7914 ;; Defined at:
  7915 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  7916 ;; Parameters:    Size  Location     Type
  7917 ;;  f1              3   70[BANK0 ] float 
  7918 ;;  f2              3   73[BANK0 ] float 
  7919 ;; Auto vars:     Size  Location     Type
  7920 ;;		None
  7921 ;; Return value:  Size  Location     Type
  7922 ;;                  3   70[BANK0 ] float 
  7923 ;; Registers used:
  7924 ;;		wreg, status,2, status,0, cstack
  7925 ;; Tracked objects:
  7926 ;;		On entry : 0/0
  7927 ;;		On exit  : 0/0
  7928 ;;		Unchanged: 0/0
  7929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7930 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7933 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7934 ;;Total ram usage:        6 bytes
  7935 ;; Hardware stack levels used:    1
  7936 ;; Hardware stack levels required when called:    8
  7937 ;; This function calls:
  7938 ;;		___ftadd
  7939 ;; This function is called by:
  7940 ;;		_printf
  7941 ;; This function uses a non-reentrant model
  7942 ;;
  7943                           
  7944                           	psect	text18
  7945  004DBC                     __ptext18:
  7946                           	opt stack 0
  7947  004DBC                     ___ftsub:
  7948                           	opt stack 20
  7949                           
  7950                           ; BSR set to: 0
  7951                           ;incstack = 0
  7952  004DBC  0100               	movlb	0	; () banked
  7953  004DBE  51C9               	movf	___ftsub@f2& (0+255),w,b
  7954  004DC0  0100               	movlb	0	; () banked
  7955  004DC2  11CA               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7956  004DC4  0100               	movlb	0	; () banked
  7957  004DC6  11CB               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7958  004DC8  B4D8               	btfsc	status,2,c
  7959  004DCA  D009               	goto	l4906
  7960                           
  7961                           ; BSR set to: 0
  7962  004DCC  0E00               	movlw	0
  7963  004DCE  0100               	movlb	0	; () banked
  7964  004DD0  1BC9               	xorwf	___ftsub@f2& (0+255),f,b
  7965  004DD2  0E00               	movlw	0
  7966  004DD4  0100               	movlb	0	; () banked
  7967  004DD6  1BCA               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7968  004DD8  0E80               	movlw	128
  7969  004DDA  0100               	movlb	0	; () banked
  7970  004DDC  1BCB               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7971  004DDE                     l4906:
  7972                           
  7973                           ; BSR set to: 0
  7974  004DDE  C0C6  F0BA         	movff	___ftsub@f1,___ftadd@f1
  7975  004DE2  C0C7  F0BB         	movff	___ftsub@f1+1,___ftadd@f1+1
  7976  004DE6  C0C8  F0BC         	movff	___ftsub@f1+2,___ftadd@f1+2
  7977  004DEA  C0C9  F0BD         	movff	___ftsub@f2,___ftadd@f2
  7978  004DEE  C0CA  F0BE         	movff	___ftsub@f2+1,___ftadd@f2+1
  7979  004DF2  C0CB  F0BF         	movff	___ftsub@f2+2,___ftadd@f2+2
  7980  004DF6  EC1C  F013         	call	___ftadd	;wreg free
  7981  004DFA  C0BA  F0C6         	movff	?___ftadd,?___ftsub
  7982  004DFE  C0BB  F0C7         	movff	?___ftadd+1,?___ftsub+1
  7983  004E02  C0BC  F0C8         	movff	?___ftadd+2,?___ftsub+2
  7984  004E06  0012               	return	
  7985  004E08                     __end_of___ftsub:
  7986                           	opt stack 0
  7987                           tblptru	equ	0xFF8
  7988                           tblptrh	equ	0xFF7
  7989                           tblptrl	equ	0xFF6
  7990                           tablat	equ	0xFF5
  7991                           prodh	equ	0xFF4
  7992                           prodl	equ	0xFF3
  7993                           postinc0	equ	0xFEE
  7994                           wreg	equ	0xFE8
  7995                           postdec1	equ	0xFE5
  7996                           fsr1l	equ	0xFE1
  7997                           indf2	equ	0xFDF
  7998                           postinc2	equ	0xFDE
  7999                           postdec2	equ	0xFDD
  8000                           fsr2h	equ	0xFDA
  8001                           fsr2l	equ	0xFD9
  8002                           status	equ	0xFD8
  8003                           
  8004 ;; *************** function ___ftneg *****************
  8005 ;; Defined at:
  8006 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  8007 ;; Parameters:    Size  Location     Type
  8008 ;;  f1              3    0[BANK0 ] float 
  8009 ;; Auto vars:     Size  Location     Type
  8010 ;;		None
  8011 ;; Return value:  Size  Location     Type
  8012 ;;                  3    0[BANK0 ] float 
  8013 ;; Registers used:
  8014 ;;		wreg, status,2, status,0
  8015 ;; Tracked objects:
  8016 ;;		On entry : 0/0
  8017 ;;		On exit  : 0/0
  8018 ;;		Unchanged: 0/0
  8019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8020 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8023 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8024 ;;Total ram usage:        3 bytes
  8025 ;; Hardware stack levels used:    1
  8026 ;; Hardware stack levels required when called:    6
  8027 ;; This function calls:
  8028 ;;		Nothing
  8029 ;; This function is called by:
  8030 ;;		_printf
  8031 ;; This function uses a non-reentrant model
  8032 ;;
  8033                           
  8034                           	psect	text19
  8035  005020                     __ptext19:
  8036                           	opt stack 0
  8037  005020                     ___ftneg:
  8038                           	opt stack 22
  8039                           
  8040                           ;incstack = 0
  8041  005020  0100               	movlb	0	; () banked
  8042  005022  5180               	movf	___ftneg@f1& (0+255),w,b
  8043  005024  0100               	movlb	0	; () banked
  8044  005026  1181               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  8045  005028  0100               	movlb	0	; () banked
  8046  00502A  1182               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  8047  00502C  B4D8               	btfsc	status,2,c
  8048  00502E  D009               	goto	l1120
  8049                           
  8050                           ; BSR set to: 0
  8051  005030  0E00               	movlw	0
  8052  005032  0100               	movlb	0	; () banked
  8053  005034  1B80               	xorwf	___ftneg@f1& (0+255),f,b
  8054  005036  0E00               	movlw	0
  8055  005038  0100               	movlb	0	; () banked
  8056  00503A  1B81               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  8057  00503C  0E80               	movlw	128
  8058  00503E  0100               	movlb	0	; () banked
  8059  005040  1B82               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  8060  005042                     l1120:
  8061                           
  8062                           ; BSR set to: 0
  8063  005042  C080  F080         	movff	___ftneg@f1,?___ftneg
  8064  005046  C081  F081         	movff	___ftneg@f1+1,?___ftneg+1
  8065  00504A  C082  F082         	movff	___ftneg@f1+2,?___ftneg+2
  8066                           
  8067                           ; BSR set to: 0
  8068  00504E  0012               	return		;funcret
  8069  005050                     __end_of___ftneg:
  8070                           	opt stack 0
  8071                           tblptru	equ	0xFF8
  8072                           tblptrh	equ	0xFF7
  8073                           tblptrl	equ	0xFF6
  8074                           tablat	equ	0xFF5
  8075                           prodh	equ	0xFF4
  8076                           prodl	equ	0xFF3
  8077                           postinc0	equ	0xFEE
  8078                           wreg	equ	0xFE8
  8079                           postdec1	equ	0xFE5
  8080                           fsr1l	equ	0xFE1
  8081                           indf2	equ	0xFDF
  8082                           postinc2	equ	0xFDE
  8083                           postdec2	equ	0xFDD
  8084                           fsr2h	equ	0xFDA
  8085                           fsr2l	equ	0xFD9
  8086                           status	equ	0xFD8
  8087                           
  8088 ;; *************** function ___ftge *****************
  8089 ;; Defined at:
  8090 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  8091 ;; Parameters:    Size  Location     Type
  8092 ;;  ff1             3    0[BANK0 ] float 
  8093 ;;  ff2             3    3[BANK0 ] float 
  8094 ;; Auto vars:     Size  Location     Type
  8095 ;;		None
  8096 ;; Return value:  Size  Location     Type
  8097 ;;		None               void
  8098 ;; Registers used:
  8099 ;;		wreg, status,2, status,0
  8100 ;; Tracked objects:
  8101 ;;		On entry : 0/0
  8102 ;;		On exit  : 0/0
  8103 ;;		Unchanged: 0/0
  8104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8105 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8107 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8108 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8109 ;;Total ram usage:        9 bytes
  8110 ;; Hardware stack levels used:    1
  8111 ;; Hardware stack levels required when called:    6
  8112 ;; This function calls:
  8113 ;;		Nothing
  8114 ;; This function is called by:
  8115 ;;		_sortBattery
  8116 ;;		_printf
  8117 ;; This function uses a non-reentrant model
  8118 ;;
  8119                           
  8120                           	psect	text20
  8121  0042DE                     __ptext20:
  8122                           	opt stack 0
  8123  0042DE                     ___ftge:
  8124                           	opt stack 22
  8125                           
  8126                           ; BSR set to: 0
  8127                           ;incstack = 0
  8128  0042DE  0100               	movlb	0	; () banked
  8129  0042E0  AF82               	btfss	(___ftge@ff1+2)& (0+255),7,b
  8130  0042E2  D01D               	goto	l4926
  8131                           
  8132                           ; BSR set to: 0
  8133  0042E4  C080  F086         	movff	___ftge@ff1,??___ftge
  8134  0042E8  C081  F087         	movff	___ftge@ff1+1,??___ftge+1
  8135  0042EC  C082  F088         	movff	___ftge@ff1+2,??___ftge+2
  8136  0042F0  0100               	movlb	0	; () banked
  8137  0042F2  1F86               	comf	??___ftge& (0+255),f,b
  8138  0042F4  1F87               	comf	(??___ftge+1)& (0+255),f,b
  8139  0042F6  1F88               	comf	(??___ftge+2)& (0+255),f,b
  8140  0042F8  2B86               	incf	??___ftge& (0+255),f,b
  8141  0042FA  0E00               	movlw	0
  8142  0042FC  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  8143  0042FE  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  8144  004300  0E00               	movlw	0
  8145  004302  0100               	movlb	0	; () banked
  8146  004304  2586               	addwf	??___ftge& (0+255),w,b
  8147  004306  0100               	movlb	0	; () banked
  8148  004308  6F80               	movwf	___ftge@ff1& (0+255),b
  8149  00430A  0E00               	movlw	0
  8150  00430C  0100               	movlb	0	; () banked
  8151  00430E  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  8152  004310  0100               	movlb	0	; () banked
  8153  004312  6F81               	movwf	(___ftge@ff1+1)& (0+255),b
  8154  004314  0E80               	movlw	128
  8155  004316  0100               	movlb	0	; () banked
  8156  004318  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  8157  00431A  0100               	movlb	0	; () banked
  8158  00431C  6F82               	movwf	(___ftge@ff1+2)& (0+255),b
  8159  00431E                     l4926:
  8160                           
  8161                           ; BSR set to: 0
  8162  00431E  0100               	movlb	0	; () banked
  8163  004320  AF85               	btfss	(___ftge@ff2+2)& (0+255),7,b
  8164  004322  D01D               	goto	l4930
  8165                           
  8166                           ; BSR set to: 0
  8167  004324  C083  F086         	movff	___ftge@ff2,??___ftge
  8168  004328  C084  F087         	movff	___ftge@ff2+1,??___ftge+1
  8169  00432C  C085  F088         	movff	___ftge@ff2+2,??___ftge+2
  8170  004330  0100               	movlb	0	; () banked
  8171  004332  1F86               	comf	??___ftge& (0+255),f,b
  8172  004334  1F87               	comf	(??___ftge+1)& (0+255),f,b
  8173  004336  1F88               	comf	(??___ftge+2)& (0+255),f,b
  8174  004338  2B86               	incf	??___ftge& (0+255),f,b
  8175  00433A  0E00               	movlw	0
  8176  00433C  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  8177  00433E  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  8178  004340  0E00               	movlw	0
  8179  004342  0100               	movlb	0	; () banked
  8180  004344  2586               	addwf	??___ftge& (0+255),w,b
  8181  004346  0100               	movlb	0	; () banked
  8182  004348  6F83               	movwf	___ftge@ff2& (0+255),b
  8183  00434A  0E00               	movlw	0
  8184  00434C  0100               	movlb	0	; () banked
  8185  00434E  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  8186  004350  0100               	movlb	0	; () banked
  8187  004352  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  8188  004354  0E80               	movlw	128
  8189  004356  0100               	movlb	0	; () banked
  8190  004358  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  8191  00435A  0100               	movlb	0	; () banked
  8192  00435C  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  8193  00435E                     l4930:
  8194                           
  8195                           ; BSR set to: 0
  8196  00435E  0E00               	movlw	0
  8197  004360  0100               	movlb	0	; () banked
  8198  004362  1B80               	xorwf	___ftge@ff1& (0+255),f,b
  8199  004364  0E00               	movlw	0
  8200  004366  0100               	movlb	0	; () banked
  8201  004368  1B81               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  8202  00436A  0E80               	movlw	128
  8203  00436C  0100               	movlb	0	; () banked
  8204  00436E  1B82               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  8205                           
  8206                           ; BSR set to: 0
  8207  004370  0E00               	movlw	0
  8208  004372  0100               	movlb	0	; () banked
  8209  004374  1B83               	xorwf	___ftge@ff2& (0+255),f,b
  8210  004376  0E00               	movlw	0
  8211  004378  0100               	movlb	0	; () banked
  8212  00437A  1B84               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  8213  00437C  0E80               	movlw	128
  8214  00437E  0100               	movlb	0	; () banked
  8215  004380  1B85               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  8216  004382  0100               	movlb	0	; () banked
  8217  004384  5183               	movf	___ftge@ff2& (0+255),w,b
  8218  004386  0100               	movlb	0	; () banked
  8219  004388  5D80               	subwf	___ftge@ff1& (0+255),w,b
  8220  00438A  0100               	movlb	0	; () banked
  8221  00438C  5184               	movf	(___ftge@ff2+1)& (0+255),w,b
  8222  00438E  0100               	movlb	0	; () banked
  8223  004390  5981               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  8224  004392  0100               	movlb	0	; () banked
  8225  004394  5185               	movf	(___ftge@ff2+2)& (0+255),w,b
  8226  004396  0100               	movlb	0	; () banked
  8227  004398  5982               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  8228  00439A  B0D8               	btfsc	status,0,c
  8229  00439C  D002               	goto	l4936
  8230                           
  8231                           ; BSR set to: 0
  8232  00439E  90D8               	bcf	status,0,c
  8233  0043A0  0012               	return	
  8234  0043A2                     l4936:
  8235                           
  8236                           ; BSR set to: 0
  8237  0043A2  80D8               	bsf	status,0,c
  8238                           
  8239                           ; BSR set to: 0
  8240  0043A4  0012               	return	
  8241  0043A6                     __end_of___ftge:
  8242                           	opt stack 0
  8243                           tblptru	equ	0xFF8
  8244                           tblptrh	equ	0xFF7
  8245                           tblptrl	equ	0xFF6
  8246                           tablat	equ	0xFF5
  8247                           prodh	equ	0xFF4
  8248                           prodl	equ	0xFF3
  8249                           postinc0	equ	0xFEE
  8250                           wreg	equ	0xFE8
  8251                           postdec1	equ	0xFE5
  8252                           fsr1l	equ	0xFE1
  8253                           indf2	equ	0xFDF
  8254                           postinc2	equ	0xFDE
  8255                           postdec2	equ	0xFDD
  8256                           fsr2h	equ	0xFDA
  8257                           fsr2l	equ	0xFD9
  8258                           status	equ	0xFD8
  8259                           
  8260 ;; *************** function _lcdClear *****************
  8261 ;; Defined at:
  8262 ;;		line 74 in file "lcd.c"
  8263 ;; Parameters:    Size  Location     Type
  8264 ;;		None
  8265 ;; Auto vars:     Size  Location     Type
  8266 ;;		None
  8267 ;; Return value:  Size  Location     Type
  8268 ;;                  1    wreg      void 
  8269 ;; Registers used:
  8270 ;;		wreg, status,2, status,0, cstack
  8271 ;; Tracked objects:
  8272 ;;		On entry : 0/0
  8273 ;;		On exit  : 0/0
  8274 ;;		Unchanged: 0/0
  8275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8280 ;;Total ram usage:        0 bytes
  8281 ;; Hardware stack levels used:    1
  8282 ;; Hardware stack levels required when called:    8
  8283 ;; This function calls:
  8284 ;;		_lcdInst
  8285 ;; This function is called by:
  8286 ;;		_main
  8287 ;;		_sortBattery
  8288 ;;		_pause
  8289 ;;		_dateTime
  8290 ;;		_mainMenu
  8291 ;;		_runSelect
  8292 ;;		_runMenu
  8293 ;;		_runTime
  8294 ;;		_runStats
  8295 ;; This function uses a non-reentrant model
  8296 ;;
  8297                           
  8298                           	psect	text21
  8299  0051EE                     __ptext21:
  8300                           	opt stack 0
  8301  0051EE                     _lcdClear:
  8302                           	opt stack 20
  8303                           
  8304                           ;lcd.c: 75: lcdInst(0b00000001);
  8305                           
  8306                           ; BSR set to: 0
  8307                           ;incstack = 0
  8308  0051EE  0E01               	movlw	1
  8309  0051F0  EC69  F028         	call	_lcdInst
  8310  0051F4  0012               	return		;funcret
  8311  0051F6                     __end_of_lcdClear:
  8312                           	opt stack 0
  8313                           tblptru	equ	0xFF8
  8314                           tblptrh	equ	0xFF7
  8315                           tblptrl	equ	0xFF6
  8316                           tablat	equ	0xFF5
  8317                           prodh	equ	0xFF4
  8318                           prodl	equ	0xFF3
  8319                           postinc0	equ	0xFEE
  8320                           wreg	equ	0xFE8
  8321                           postdec1	equ	0xFE5
  8322                           fsr1l	equ	0xFE1
  8323                           indf2	equ	0xFDF
  8324                           postinc2	equ	0xFDE
  8325                           postdec2	equ	0xFDD
  8326                           fsr2h	equ	0xFDA
  8327                           fsr2l	equ	0xFD9
  8328                           status	equ	0xFD8
  8329                           
  8330 ;; *************** function _digitalWrite *****************
  8331 ;; Defined at:
  8332 ;;		line 53 in file "iopin.c"
  8333 ;; Parameters:    Size  Location     Type
  8334 ;;  pin             2    0[BANK0 ] PTR int 
  8335 ;;		 -> AA_float(4), redirectingServo(4), padServo(4), conveyorServo(4), 
  8336 ;;		 -> cylinderMotor(4), 
  8337 ;;  val             2    2[BANK0 ] int 
  8338 ;; Auto vars:     Size  Location     Type
  8339 ;;  p               2    7[BANK0 ] int 
  8340 ;; Return value:  Size  Location     Type
  8341 ;;                  1    wreg      void 
  8342 ;; Registers used:
  8343 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8344 ;; Tracked objects:
  8345 ;;		On entry : 0/0
  8346 ;;		On exit  : 0/0
  8347 ;;		Unchanged: 0/0
  8348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8349 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8350 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8351 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8352 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8353 ;;Total ram usage:        9 bytes
  8354 ;; Hardware stack levels used:    1
  8355 ;; Hardware stack levels required when called:    6
  8356 ;; This function calls:
  8357 ;;		Nothing
  8358 ;; This function is called by:
  8359 ;;		_main
  8360 ;;		_sortBattery
  8361 ;; This function uses a non-reentrant model
  8362 ;;
  8363                           
  8364                           	psect	text22
  8365  003C64                     __ptext22:
  8366                           	opt stack 0
  8367  003C64                     _digitalWrite:
  8368                           	opt stack 23
  8369                           
  8370                           ;iopin.c: 54: if(pin){
  8371                           
  8372                           ;incstack = 0
  8373  003C64  0100               	movlb	0	; () banked
  8374  003C66  5180               	movf	digitalWrite@pin& (0+255),w,b
  8375  003C68  0100               	movlb	0	; () banked
  8376  003C6A  1181               	iorwf	(digitalWrite@pin+1)& (0+255),w,b
  8377  003C6C  B4D8               	btfsc	status,2,c
  8378  003C6E  0012               	return	
  8379                           
  8380                           ; BSR set to: 0
  8381                           ;iopin.c: 55: int p = 1 << pin[1];
  8382  003C70  0100               	movlb	0	; () banked
  8383  003C72  EE20 F002          	lfsr	2,2
  8384  003C76  5180               	movf	digitalWrite@pin& (0+255),w,b
  8385  003C78  26D9               	addwf	fsr2l,f,c
  8386  003C7A  5181               	movf	(digitalWrite@pin+1)& (0+255),w,b
  8387  003C7C  22DA               	addwfc	fsr2h,f,c
  8388  003C7E  50DF               	movf	indf2,w,c
  8389  003C80  0100               	movlb	0	; () banked
  8390  003C82  6F84               	movwf	??_digitalWrite& (0+255),b
  8391  003C84  0E01               	movlw	1
  8392  003C86  0100               	movlb	0	; () banked
  8393  003C88  6F85               	movwf	(??_digitalWrite+1)& (0+255),b
  8394  003C8A  0E00               	movlw	0
  8395  003C8C  0100               	movlb	0	; () banked
  8396  003C8E  6F86               	movwf	(??_digitalWrite+2)& (0+255),b
  8397  003C90  0100               	movlb	0	; () banked
  8398  003C92  2B84               	incf	??_digitalWrite& (0+255),f,b
  8399  003C94  D004               	goto	u6074
  8400  003C96                     u6075:
  8401  003C96  90D8               	bcf	status,0,c
  8402  003C98  0100               	movlb	0	; () banked
  8403  003C9A  3785               	rlcf	(??_digitalWrite+1)& (0+255),f,b
  8404  003C9C  3786               	rlcf	(??_digitalWrite+2)& (0+255),f,b
  8405  003C9E                     u6074:
  8406  003C9E  0100               	movlb	0	; () banked
  8407  003CA0  2F84               	decfsz	??_digitalWrite& (0+255),f,b
  8408  003CA2  D7F9               	goto	u6075
  8409  003CA4  C085  F087         	movff	??_digitalWrite+1,digitalWrite@p
  8410  003CA8  C086  F088         	movff	??_digitalWrite+2,digitalWrite@p+1
  8411                           
  8412                           ;iopin.c: 56: if(val == 0){
  8413  003CAC  0100               	movlb	0	; () banked
  8414  003CAE  5182               	movf	digitalWrite@val& (0+255),w,b
  8415  003CB0  0100               	movlb	0	; () banked
  8416  003CB2  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  8417  003CB4  A4D8               	btfss	status,2,c
  8418  003CB6  D03C               	goto	l5706
  8419                           
  8420                           ; BSR set to: 0
  8421                           ;iopin.c: 57: p ^= 0xff;
  8422  003CB8  0EFF               	movlw	255
  8423  003CBA  0100               	movlb	0	; () banked
  8424  003CBC  1B87               	xorwf	digitalWrite@p& (0+255),f,b
  8425                           
  8426                           ; BSR set to: 0
  8427                           ;iopin.c: 58: }
  8428                           ;iopin.c: 60: switch(pin[0]){
  8429  003CBE  D038               	goto	l5706
  8430  003CC0                     l5682:
  8431                           
  8432                           ; BSR set to: 0
  8433  003CC0  0100               	movlb	0	; () banked
  8434  003CC2  0582               	decf	digitalWrite@val& (0+255),w,b
  8435  003CC4  0100               	movlb	0	; () banked
  8436  003CC6  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  8437  003CC8  A4D8               	btfss	status,2,c
  8438  003CCA  D004               	goto	l5686
  8439                           
  8440                           ; BSR set to: 0
  8441  003CCC  0100               	movlb	0	; () banked
  8442  003CCE  5187               	movf	digitalWrite@p& (0+255),w,b
  8443  003CD0  1289               	iorwf	3977,f,c	;volatile
  8444  003CD2  0012               	return	
  8445  003CD4                     l5686:
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;iopin.c: 62: else LATA &= p;
  8449  003CD4  0100               	movlb	0	; () banked
  8450  003CD6  5187               	movf	digitalWrite@p& (0+255),w,b
  8451  003CD8  1689               	andwf	3977,f,c	;volatile
  8452                           
  8453                           ; BSR set to: 0
  8454                           ;iopin.c: 63: break;
  8455  003CDA  0012               	return	
  8456  003CDC                     l5688:
  8457                           
  8458                           ; BSR set to: 0
  8459  003CDC  0100               	movlb	0	; () banked
  8460  003CDE  0582               	decf	digitalWrite@val& (0+255),w,b
  8461  003CE0  0100               	movlb	0	; () banked
  8462  003CE2  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  8463  003CE4  A4D8               	btfss	status,2,c
  8464  003CE6  D004               	goto	l5692
  8465                           
  8466                           ; BSR set to: 0
  8467  003CE8  0100               	movlb	0	; () banked
  8468  003CEA  5187               	movf	digitalWrite@p& (0+255),w,b
  8469  003CEC  128A               	iorwf	3978,f,c	;volatile
  8470  003CEE  0012               	return	
  8471  003CF0                     l5692:
  8472                           
  8473                           ; BSR set to: 0
  8474                           ;iopin.c: 65: else LATB &= p;
  8475  003CF0  0100               	movlb	0	; () banked
  8476  003CF2  5187               	movf	digitalWrite@p& (0+255),w,b
  8477  003CF4  168A               	andwf	3978,f,c	;volatile
  8478                           
  8479                           ; BSR set to: 0
  8480                           ;iopin.c: 66: break;
  8481  003CF6  0012               	return	
  8482  003CF8                     l5694:
  8483                           
  8484                           ; BSR set to: 0
  8485  003CF8  0100               	movlb	0	; () banked
  8486  003CFA  0582               	decf	digitalWrite@val& (0+255),w,b
  8487  003CFC  0100               	movlb	0	; () banked
  8488  003CFE  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  8489  003D00  A4D8               	btfss	status,2,c
  8490  003D02  D004               	goto	l5698
  8491                           
  8492                           ; BSR set to: 0
  8493  003D04  0100               	movlb	0	; () banked
  8494  003D06  5187               	movf	digitalWrite@p& (0+255),w,b
  8495  003D08  128B               	iorwf	3979,f,c	;volatile
  8496  003D0A  0012               	return	
  8497  003D0C                     l5698:
  8498                           
  8499                           ; BSR set to: 0
  8500                           ;iopin.c: 68: else LATC &= p;
  8501  003D0C  0100               	movlb	0	; () banked
  8502  003D0E  5187               	movf	digitalWrite@p& (0+255),w,b
  8503  003D10  168B               	andwf	3979,f,c	;volatile
  8504                           
  8505                           ; BSR set to: 0
  8506                           ;iopin.c: 69: break;
  8507  003D12  0012               	return	
  8508  003D14                     l5700:
  8509                           
  8510                           ; BSR set to: 0
  8511  003D14  0100               	movlb	0	; () banked
  8512  003D16  0582               	decf	digitalWrite@val& (0+255),w,b
  8513  003D18  0100               	movlb	0	; () banked
  8514  003D1A  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  8515  003D1C  A4D8               	btfss	status,2,c
  8516  003D1E  D004               	goto	l5704
  8517                           
  8518                           ; BSR set to: 0
  8519  003D20  0100               	movlb	0	; () banked
  8520  003D22  5187               	movf	digitalWrite@p& (0+255),w,b
  8521  003D24  128C               	iorwf	3980,f,c	;volatile
  8522  003D26  0012               	return	
  8523  003D28                     l5704:
  8524                           
  8525                           ; BSR set to: 0
  8526                           ;iopin.c: 71: else LATD &= p;
  8527  003D28  0100               	movlb	0	; () banked
  8528  003D2A  5187               	movf	digitalWrite@p& (0+255),w,b
  8529  003D2C  168C               	andwf	3980,f,c	;volatile
  8530                           
  8531                           ; BSR set to: 0
  8532                           ;iopin.c: 72: }
  8533  003D2E  0012               	return	
  8534  003D30                     l5706:
  8535                           
  8536                           ; BSR set to: 0
  8537  003D30  C080  FFD9         	movff	digitalWrite@pin,fsr2l
  8538  003D34  C081  FFDA         	movff	digitalWrite@pin+1,fsr2h
  8539  003D38  CFDE F084          	movff	postinc2,??_digitalWrite
  8540  003D3C  CFDD F085          	movff	postdec2,??_digitalWrite+1
  8541                           
  8542                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8543                           ; Switch size 1, requested type "space"
  8544                           ; Number of cases is 1, Range of values is 0 to 0
  8545                           ; switch strategies available:
  8546                           ; Name         Instructions Cycles
  8547                           ; simple_byte            4     3 (average)
  8548                           ;	Chosen strategy is simple_byte
  8549  003D40  0100               	movlb	0	; () banked
  8550  003D42  5185               	movf	(??_digitalWrite+1)& (0+255),w,b
  8551  003D44  0A00               	xorlw	0	; case 0
  8552  003D46  A4D8               	btfss	status,2,c
  8553  003D48  0012               	return	
  8554                           
  8555                           ; BSR set to: 0
  8556                           ; Switch size 1, requested type "space"
  8557                           ; Number of cases is 4, Range of values is 0 to 3
  8558                           ; switch strategies available:
  8559                           ; Name         Instructions Cycles
  8560                           ; simple_byte           13     7 (average)
  8561                           ;	Chosen strategy is simple_byte
  8562  003D4A  0100               	movlb	0	; () banked
  8563  003D4C  5184               	movf	??_digitalWrite& (0+255),w,b
  8564  003D4E  0A00               	xorlw	0	; case 0
  8565  003D50  B4D8               	btfsc	status,2,c
  8566  003D52  D7B6               	goto	l5682
  8567  003D54  0A01               	xorlw	1	; case 1
  8568  003D56  B4D8               	btfsc	status,2,c
  8569  003D58  D7C1               	goto	l5688
  8570  003D5A  0A03               	xorlw	3	; case 2
  8571  003D5C  B4D8               	btfsc	status,2,c
  8572  003D5E  D7CC               	goto	l5694
  8573  003D60  0A01               	xorlw	1	; case 3
  8574  003D62  A4D8               	btfss	status,2,c
  8575                           
  8576                           ; BSR set to: 0
  8577  003D64  0012               	return	
  8578  003D66  D7D6               	goto	l5700
  8579  003D68                     __end_of_digitalWrite:
  8580                           	opt stack 0
  8581                           tblptru	equ	0xFF8
  8582                           tblptrh	equ	0xFF7
  8583                           tblptrl	equ	0xFF6
  8584                           tablat	equ	0xFF5
  8585                           prodh	equ	0xFF4
  8586                           prodl	equ	0xFF3
  8587                           postinc0	equ	0xFEE
  8588                           wreg	equ	0xFE8
  8589                           postdec1	equ	0xFE5
  8590                           fsr1l	equ	0xFE1
  8591                           indf2	equ	0xFDF
  8592                           postinc2	equ	0xFDE
  8593                           postdec2	equ	0xFDD
  8594                           fsr2h	equ	0xFDA
  8595                           fsr2l	equ	0xFD9
  8596                           status	equ	0xFD8
  8597                           
  8598 ;; *************** function _digitalRead *****************
  8599 ;; Defined at:
  8600 ;;		line 43 in file "iopin.c"
  8601 ;; Parameters:    Size  Location     Type
  8602 ;;  pin             2    0[BANK0 ] PTR int 
  8603 ;;		 -> padPin2(4), padPin1(4), 
  8604 ;; Auto vars:     Size  Location     Type
  8605 ;;		None
  8606 ;; Return value:  Size  Location     Type
  8607 ;;                  2    0[BANK0 ] int 
  8608 ;; Registers used:
  8609 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8610 ;; Tracked objects:
  8611 ;;		On entry : 0/0
  8612 ;;		On exit  : 0/0
  8613 ;;		Unchanged: 0/0
  8614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8615 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8617 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8618 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8619 ;;Total ram usage:        4 bytes
  8620 ;; Hardware stack levels used:    1
  8621 ;; Hardware stack levels required when called:    6
  8622 ;; This function calls:
  8623 ;;		Nothing
  8624 ;; This function is called by:
  8625 ;;		_sortBattery
  8626 ;; This function uses a non-reentrant model
  8627 ;;
  8628                           
  8629                           	psect	text23
  8630  0037E6                     __ptext23:
  8631                           	opt stack 0
  8632  0037E6                     _digitalRead:
  8633                           	opt stack 23
  8634                           
  8635                           ;iopin.c: 44: switch(pin[0]){
  8636                           
  8637                           ; BSR set to: 0
  8638                           ;incstack = 0
  8639  0037E6  D078               	goto	l5752
  8640  0037E8                     l5734:
  8641  0037E8  0100               	movlb	0	; () banked
  8642  0037EA  EE20 F002          	lfsr	2,2
  8643  0037EE  5180               	movf	digitalRead@pin& (0+255),w,b
  8644  0037F0  26D9               	addwf	fsr2l,f,c
  8645  0037F2  5181               	movf	(digitalRead@pin+1)& (0+255),w,b
  8646  0037F4  22DA               	addwfc	fsr2h,f,c
  8647  0037F6  50DF               	movf	indf2,w,c
  8648  0037F8  0100               	movlb	0	; () banked
  8649  0037FA  6F82               	movwf	??_digitalRead& (0+255),b
  8650  0037FC  CF80 F083          	movff	3968,??_digitalRead+1	;volatile
  8651  003800  0100               	movlb	0	; () banked
  8652  003802  2B82               	incf	??_digitalRead& (0+255),f,b
  8653  003804  D003               	goto	u6154
  8654  003806                     u6155:
  8655  003806  0100               	movlb	0	; () banked
  8656  003808  90D8               	bcf	status,0,c
  8657  00380A  3383               	rrcf	(??_digitalRead+1)& (0+255),f,b
  8658  00380C                     u6154:
  8659  00380C  0100               	movlb	0	; () banked
  8660  00380E  2F82               	decfsz	??_digitalRead& (0+255),f,b
  8661  003810  D7FA               	goto	u6155
  8662  003812  0E01               	movlw	1
  8663  003814  0100               	movlb	0	; () banked
  8664  003816  1783               	andwf	(??_digitalRead+1)& (0+255),f,b
  8665  003818  0100               	movlb	0	; () banked
  8666  00381A  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  8667  00381C  0100               	movlb	0	; () banked
  8668  00381E  6F80               	movwf	?_digitalRead& (0+255),b
  8669  003820  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  8670                           
  8671                           ; BSR set to: 0
  8672  003822  0012               	return	
  8673  003824                     l5738:
  8674                           
  8675                           ; BSR set to: 0
  8676  003824  0100               	movlb	0	; () banked
  8677  003826  EE20 F002          	lfsr	2,2
  8678  00382A  5180               	movf	digitalRead@pin& (0+255),w,b
  8679  00382C  26D9               	addwf	fsr2l,f,c
  8680  00382E  5181               	movf	(digitalRead@pin+1)& (0+255),w,b
  8681  003830  22DA               	addwfc	fsr2h,f,c
  8682  003832  50DF               	movf	indf2,w,c
  8683  003834  0100               	movlb	0	; () banked
  8684  003836  6F82               	movwf	??_digitalRead& (0+255),b
  8685  003838  CF81 F083          	movff	3969,??_digitalRead+1	;volatile
  8686  00383C  0100               	movlb	0	; () banked
  8687  00383E  2B82               	incf	??_digitalRead& (0+255),f,b
  8688  003840  D003               	goto	u6164
  8689  003842                     u6165:
  8690  003842  0100               	movlb	0	; () banked
  8691  003844  90D8               	bcf	status,0,c
  8692  003846  3383               	rrcf	(??_digitalRead+1)& (0+255),f,b
  8693  003848                     u6164:
  8694  003848  0100               	movlb	0	; () banked
  8695  00384A  2F82               	decfsz	??_digitalRead& (0+255),f,b
  8696  00384C  D7FA               	goto	u6165
  8697  00384E  0E01               	movlw	1
  8698  003850  0100               	movlb	0	; () banked
  8699  003852  1783               	andwf	(??_digitalRead+1)& (0+255),f,b
  8700  003854  0100               	movlb	0	; () banked
  8701  003856  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  8702  003858  0100               	movlb	0	; () banked
  8703  00385A  6F80               	movwf	?_digitalRead& (0+255),b
  8704  00385C  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  8705                           
  8706                           ; BSR set to: 0
  8707  00385E  0012               	return	
  8708  003860                     l5742:
  8709                           
  8710                           ; BSR set to: 0
  8711  003860  0100               	movlb	0	; () banked
  8712  003862  EE20 F002          	lfsr	2,2
  8713  003866  5180               	movf	digitalRead@pin& (0+255),w,b
  8714  003868  26D9               	addwf	fsr2l,f,c
  8715  00386A  5181               	movf	(digitalRead@pin+1)& (0+255),w,b
  8716  00386C  22DA               	addwfc	fsr2h,f,c
  8717  00386E  50DF               	movf	indf2,w,c
  8718  003870  0100               	movlb	0	; () banked
  8719  003872  6F82               	movwf	??_digitalRead& (0+255),b
  8720  003874  CF82 F083          	movff	3970,??_digitalRead+1	;volatile
  8721  003878  0100               	movlb	0	; () banked
  8722  00387A  2B82               	incf	??_digitalRead& (0+255),f,b
  8723  00387C  D003               	goto	u6174
  8724  00387E                     u6175:
  8725  00387E  0100               	movlb	0	; () banked
  8726  003880  90D8               	bcf	status,0,c
  8727  003882  3383               	rrcf	(??_digitalRead+1)& (0+255),f,b
  8728  003884                     u6174:
  8729  003884  0100               	movlb	0	; () banked
  8730  003886  2F82               	decfsz	??_digitalRead& (0+255),f,b
  8731  003888  D7FA               	goto	u6175
  8732  00388A  0E01               	movlw	1
  8733  00388C  0100               	movlb	0	; () banked
  8734  00388E  1783               	andwf	(??_digitalRead+1)& (0+255),f,b
  8735  003890  0100               	movlb	0	; () banked
  8736  003892  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  8737  003894  0100               	movlb	0	; () banked
  8738  003896  6F80               	movwf	?_digitalRead& (0+255),b
  8739  003898  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  8740                           
  8741                           ; BSR set to: 0
  8742  00389A  0012               	return	
  8743  00389C                     l5746:
  8744                           
  8745                           ; BSR set to: 0
  8746  00389C  0100               	movlb	0	; () banked
  8747  00389E  EE20 F002          	lfsr	2,2
  8748  0038A2  5180               	movf	digitalRead@pin& (0+255),w,b
  8749  0038A4  26D9               	addwf	fsr2l,f,c
  8750  0038A6  5181               	movf	(digitalRead@pin+1)& (0+255),w,b
  8751  0038A8  22DA               	addwfc	fsr2h,f,c
  8752  0038AA  50DF               	movf	indf2,w,c
  8753  0038AC  0100               	movlb	0	; () banked
  8754  0038AE  6F82               	movwf	??_digitalRead& (0+255),b
  8755  0038B0  CF83 F083          	movff	3971,??_digitalRead+1	;volatile
  8756  0038B4  0100               	movlb	0	; () banked
  8757  0038B6  2B82               	incf	??_digitalRead& (0+255),f,b
  8758  0038B8  D003               	goto	u6184
  8759  0038BA                     u6185:
  8760  0038BA  0100               	movlb	0	; () banked
  8761  0038BC  90D8               	bcf	status,0,c
  8762  0038BE  3383               	rrcf	(??_digitalRead+1)& (0+255),f,b
  8763  0038C0                     u6184:
  8764  0038C0  0100               	movlb	0	; () banked
  8765  0038C2  2F82               	decfsz	??_digitalRead& (0+255),f,b
  8766  0038C4  D7FA               	goto	u6185
  8767  0038C6  0E01               	movlw	1
  8768  0038C8  0100               	movlb	0	; () banked
  8769  0038CA  1783               	andwf	(??_digitalRead+1)& (0+255),f,b
  8770  0038CC  0100               	movlb	0	; () banked
  8771  0038CE  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  8772  0038D0  0100               	movlb	0	; () banked
  8773  0038D2  6F80               	movwf	?_digitalRead& (0+255),b
  8774  0038D4  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  8775                           
  8776                           ; BSR set to: 0
  8777  0038D6  0012               	return	
  8778  0038D8                     l5752:
  8779  0038D8  C080  FFD9         	movff	digitalRead@pin,fsr2l
  8780  0038DC  C081  FFDA         	movff	digitalRead@pin+1,fsr2h
  8781  0038E0  CFDE F082          	movff	postinc2,??_digitalRead
  8782  0038E4  CFDD F083          	movff	postdec2,??_digitalRead+1
  8783                           
  8784                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8785                           ; Switch size 1, requested type "space"
  8786                           ; Number of cases is 1, Range of values is 0 to 0
  8787                           ; switch strategies available:
  8788                           ; Name         Instructions Cycles
  8789                           ; simple_byte            4     3 (average)
  8790                           ;	Chosen strategy is simple_byte
  8791  0038E8  0100               	movlb	0	; () banked
  8792  0038EA  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  8793  0038EC  0A00               	xorlw	0	; case 0
  8794  0038EE  A4D8               	btfss	status,2,c
  8795  0038F0  D00E               	goto	l295
  8796                           
  8797                           ; BSR set to: 0
  8798                           ; Switch size 1, requested type "space"
  8799                           ; Number of cases is 4, Range of values is 0 to 3
  8800                           ; switch strategies available:
  8801                           ; Name         Instructions Cycles
  8802                           ; simple_byte           13     7 (average)
  8803                           ;	Chosen strategy is simple_byte
  8804  0038F2  0100               	movlb	0	; () banked
  8805  0038F4  5182               	movf	??_digitalRead& (0+255),w,b
  8806  0038F6  0A00               	xorlw	0	; case 0
  8807  0038F8  B4D8               	btfsc	status,2,c
  8808  0038FA  D776               	goto	l5734
  8809  0038FC  0A01               	xorlw	1	; case 1
  8810  0038FE  B4D8               	btfsc	status,2,c
  8811  003900  D791               	goto	l5738
  8812  003902  0A03               	xorlw	3	; case 2
  8813  003904  B4D8               	btfsc	status,2,c
  8814  003906  D7AC               	goto	l5742
  8815  003908  0A01               	xorlw	1	; case 3
  8816  00390A  B4D8               	btfsc	status,2,c
  8817  00390C  D7C7               	goto	l5746
  8818  00390E                     l295:
  8819                           
  8820                           ; BSR set to: 0
  8821                           ;iopin.c: 50: return -1;
  8822  00390E  0100               	movlb	0	; () banked
  8823  003910  6980               	setf	?_digitalRead& (0+255),b
  8824  003912  6981               	setf	(?_digitalRead+1)& (0+255),b
  8825                           
  8826                           ; BSR set to: 0
  8827  003914  0012               	return		;funcret
  8828  003916                     __end_of_digitalRead:
  8829                           	opt stack 0
  8830                           tblptru	equ	0xFF8
  8831                           tblptrh	equ	0xFF7
  8832                           tblptrl	equ	0xFF6
  8833                           tablat	equ	0xFF5
  8834                           prodh	equ	0xFF4
  8835                           prodl	equ	0xFF3
  8836                           postinc0	equ	0xFEE
  8837                           wreg	equ	0xFE8
  8838                           postdec1	equ	0xFE5
  8839                           fsr1l	equ	0xFE1
  8840                           indf2	equ	0xFDF
  8841                           postinc2	equ	0xFDE
  8842                           postdec2	equ	0xFDD
  8843                           fsr2h	equ	0xFDA
  8844                           fsr2l	equ	0xFD9
  8845                           status	equ	0xFD8
  8846                           
  8847 ;; *************** function _analogRead *****************
  8848 ;; Defined at:
  8849 ;;		line 90 in file "iopin.c"
  8850 ;; Parameters:    Size  Location     Type
  8851 ;;  channel         2    0[BANK0 ] int 
  8852 ;; Auto vars:     Size  Location     Type
  8853 ;;		None
  8854 ;; Return value:  Size  Location     Type
  8855 ;;                  4    0[BANK0 ] long 
  8856 ;; Registers used:
  8857 ;;		wreg, status,2, status,0
  8858 ;; Tracked objects:
  8859 ;;		On entry : 0/0
  8860 ;;		On exit  : 0/0
  8861 ;;		Unchanged: 0/0
  8862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8863 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8865 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8866 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8867 ;;Total ram usage:        6 bytes
  8868 ;; Hardware stack levels used:    1
  8869 ;; Hardware stack levels required when called:    6
  8870 ;; This function calls:
  8871 ;;		Nothing
  8872 ;; This function is called by:
  8873 ;;		_sortBattery
  8874 ;; This function uses a non-reentrant model
  8875 ;;
  8876                           
  8877                           	psect	text24
  8878  004F28                     __ptext24:
  8879                           	opt stack 0
  8880  004F28                     _analogRead:
  8881                           	opt stack 23
  8882                           
  8883                           ;iopin.c: 91: ADCON0 = channel<<2;
  8884                           
  8885                           ; BSR set to: 0
  8886                           ;incstack = 0
  8887  004F28  0100               	movlb	0	; () banked
  8888  004F2A  4580               	rlncf	analogRead@channel& (0+255),w,b
  8889  004F2C  46E8               	rlncf	wreg,f,c
  8890  004F2E  0BFC               	andlw	252
  8891  004F30  6EC2               	movwf	4034,c	;volatile
  8892                           
  8893                           ; BSR set to: 0
  8894                           ;iopin.c: 92: ADCON0 |= 1<<0;
  8895  004F32  80C2               	bsf	4034,0,c	;volatile
  8896                           
  8897                           ; BSR set to: 0
  8898                           ;iopin.c: 93: ADCON0 |= 1<<1;
  8899  004F34  82C2               	bsf	4034,1,c	;volatile
  8900  004F36                     l320:
  8901  004F36  B2C2               	btfsc	4034,1,c	;volatile
  8902  004F38  D7FE               	goto	l320
  8903                           
  8904                           ;iopin.c: 97: return (ADRESH<<8) + ADRESL;
  8905  004F3A  50C3               	movf	4035,w,c	;volatile
  8906  004F3C  CFC4 F084          	movff	4036,??_analogRead	;volatile
  8907  004F40  0100               	movlb	0	; () banked
  8908  004F42  6B85               	clrf	(??_analogRead+1)& (0+255),b
  8909  004F44  C084  F085         	movff	??_analogRead,??_analogRead+1
  8910  004F48  0100               	movlb	0	; () banked
  8911  004F4A  6B84               	clrf	??_analogRead& (0+255),b
  8912  004F4C  0100               	movlb	0	; () banked
  8913  004F4E  2784               	addwf	??_analogRead& (0+255),f,b
  8914  004F50  0E00               	movlw	0
  8915  004F52  2385               	addwfc	(??_analogRead+1)& (0+255),f,b
  8916  004F54  C084  F080         	movff	??_analogRead,?_analogRead
  8917  004F58  C085  F081         	movff	??_analogRead+1,?_analogRead+1
  8918  004F5C  0100               	movlb	0	; () banked
  8919  004F5E  0E00               	movlw	0
  8920  004F60  BF81               	btfsc	(?_analogRead+1)& (0+255),7,b
  8921  004F62  0EFF               	movlw	-1
  8922  004F64  6F82               	movwf	(?_analogRead+2)& (0+255),b
  8923  004F66  6F83               	movwf	(?_analogRead+3)& (0+255),b
  8924  004F68  0012               	return	
  8925  004F6A                     __end_of_analogRead:
  8926                           	opt stack 0
  8927                           tblptru	equ	0xFF8
  8928                           tblptrh	equ	0xFF7
  8929                           tblptrl	equ	0xFF6
  8930                           tablat	equ	0xFF5
  8931                           prodh	equ	0xFF4
  8932                           prodl	equ	0xFF3
  8933                           postinc0	equ	0xFEE
  8934                           wreg	equ	0xFE8
  8935                           postdec1	equ	0xFE5
  8936                           fsr1l	equ	0xFE1
  8937                           indf2	equ	0xFDF
  8938                           postinc2	equ	0xFDE
  8939                           postdec2	equ	0xFDD
  8940                           fsr2h	equ	0xFDA
  8941                           fsr2l	equ	0xFD9
  8942                           status	equ	0xFD8
  8943                           
  8944 ;; *************** function _pinSetup *****************
  8945 ;; Defined at:
  8946 ;;		line 212 in file "main.c"
  8947 ;; Parameters:    Size  Location     Type
  8948 ;;		None
  8949 ;; Auto vars:     Size  Location     Type
  8950 ;;		None
  8951 ;; Return value:  Size  Location     Type
  8952 ;;                  1    wreg      void 
  8953 ;; Registers used:
  8954 ;;		wreg, status,2, status,0
  8955 ;; Tracked objects:
  8956 ;;		On entry : 0/0
  8957 ;;		On exit  : 0/0
  8958 ;;		Unchanged: 0/0
  8959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8964 ;;Total ram usage:        0 bytes
  8965 ;; Hardware stack levels used:    1
  8966 ;; Hardware stack levels required when called:    6
  8967 ;; This function calls:
  8968 ;;		Nothing
  8969 ;; This function is called by:
  8970 ;;		_main
  8971 ;; This function uses a non-reentrant model
  8972 ;;
  8973                           
  8974                           	psect	text25
  8975  004F6A                     __ptext25:
  8976                           	opt stack 0
  8977  004F6A                     _pinSetup:
  8978                           	opt stack 24
  8979                           
  8980                           ;main.c: 218: TRISA = 0xFF;
  8981                           
  8982                           ; BSR set to: 0
  8983                           ;incstack = 0
  8984  004F6A  6892               	setf	3986,c	;volatile
  8985                           
  8986                           ;main.c: 219: TRISB = 0xFF;
  8987  004F6C  6893               	setf	3987,c	;volatile
  8988                           
  8989                           ;main.c: 220: TRISC = 0b11000000;
  8990  004F6E  0EC0               	movlw	192
  8991  004F70  6E94               	movwf	3988,c	;volatile
  8992                           
  8993                           ;main.c: 221: TRISD = 0x00;
  8994  004F72  0E00               	movlw	0
  8995  004F74  6E95               	movwf	3989,c	;volatile
  8996                           
  8997                           ;main.c: 222: TRISE = 0x00;
  8998  004F76  0E00               	movlw	0
  8999  004F78  6E96               	movwf	3990,c	;volatile
  9000                           
  9001                           ;main.c: 224: LATA = 0x00;
  9002  004F7A  0E00               	movlw	0
  9003  004F7C  6E89               	movwf	3977,c	;volatile
  9004                           
  9005                           ;main.c: 225: LATB = 0x00;
  9006  004F7E  0E00               	movlw	0
  9007  004F80  6E8A               	movwf	3978,c	;volatile
  9008                           
  9009                           ;main.c: 226: LATC = 0x00;
  9010  004F82  0E00               	movlw	0
  9011  004F84  6E8B               	movwf	3979,c	;volatile
  9012                           
  9013                           ;main.c: 227: LATD = 0x00;
  9014  004F86  0E00               	movlw	0
  9015  004F88  6E8C               	movwf	3980,c	;volatile
  9016                           
  9017                           ;main.c: 228: LATE = 0x00;
  9018  004F8A  0E00               	movlw	0
  9019  004F8C  6E8D               	movwf	3981,c	;volatile
  9020                           
  9021                           ;main.c: 230: ADCON0 = 0x00;
  9022  004F8E  0E00               	movlw	0
  9023  004F90  6EC2               	movwf	4034,c	;volatile
  9024                           
  9025                           ;main.c: 232: ADCON1 |= 0x0B;
  9026  004F92  0E0B               	movlw	11
  9027  004F94  12C1               	iorwf	4033,f,c	;volatile
  9028                           
  9029                           ;main.c: 237: ADCON2 = 0;
  9030  004F96  0E00               	movlw	0
  9031  004F98  6EC0               	movwf	4032,c	;volatile
  9032                           
  9033                           ;main.c: 238: ADCON2 |= 0b010;
  9034  004F9A  82C0               	bsf	4032,1,c	;volatile
  9035                           
  9036                           ;main.c: 239: ADCON2 |= 0b110<<3;
  9037  004F9C  0E30               	movlw	48
  9038  004F9E  12C0               	iorwf	4032,f,c	;volatile
  9039                           
  9040                           ;main.c: 240: ADCON2 |= 1<<7;
  9041  004FA0  8EC0               	bsf	4032,7,c	;volatile
  9042                           
  9043                           ;main.c: 243: INT1IE = 1;
  9044  004FA2  86F0               	bsf	intcon3,3,c	;volatile
  9045                           
  9046                           ;main.c: 244: INT0IE = 1;
  9047  004FA4  88F2               	bsf	intcon,4,c	;volatile
  9048                           
  9049                           ;main.c: 245: (INTCONbits.GIE = 1);
  9050  004FA6  8EF2               	bsf	intcon,7,c	;volatile
  9051  004FA8  0012               	return		;funcret
  9052  004FAA                     __end_of_pinSetup:
  9053                           	opt stack 0
  9054                           tblptru	equ	0xFF8
  9055                           tblptrh	equ	0xFF7
  9056                           tblptrl	equ	0xFF6
  9057                           tablat	equ	0xFF5
  9058                           prodh	equ	0xFF4
  9059                           prodl	equ	0xFF3
  9060                           intcon	equ	0xFF2
  9061                           intcon3	equ	0xFF0
  9062                           postinc0	equ	0xFEE
  9063                           wreg	equ	0xFE8
  9064                           postdec1	equ	0xFE5
  9065                           fsr1l	equ	0xFE1
  9066                           indf2	equ	0xFDF
  9067                           postinc2	equ	0xFDE
  9068                           postdec2	equ	0xFDD
  9069                           fsr2h	equ	0xFDA
  9070                           fsr2l	equ	0xFD9
  9071                           status	equ	0xFD8
  9072                           
  9073 ;; *************** function _lcdHome *****************
  9074 ;; Defined at:
  9075 ;;		line 70 in file "lcd.c"
  9076 ;; Parameters:    Size  Location     Type
  9077 ;;		None
  9078 ;; Auto vars:     Size  Location     Type
  9079 ;;		None
  9080 ;; Return value:  Size  Location     Type
  9081 ;;                  2   18[None  ] int 
  9082 ;; Registers used:
  9083 ;;		wreg, status,2, status,0, cstack
  9084 ;; Tracked objects:
  9085 ;;		On entry : 0/0
  9086 ;;		On exit  : 0/0
  9087 ;;		Unchanged: 0/0
  9088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9093 ;;Total ram usage:        0 bytes
  9094 ;; Hardware stack levels used:    1
  9095 ;; Hardware stack levels required when called:    8
  9096 ;; This function calls:
  9097 ;;		_lcdInst
  9098 ;; This function is called by:
  9099 ;;		_main
  9100 ;; This function uses a non-reentrant model
  9101 ;;
  9102                           
  9103                           	psect	text26
  9104  0051F6                     __ptext26:
  9105                           	opt stack 0
  9106  0051F6                     _lcdHome:
  9107                           	opt stack 22
  9108                           
  9109                           ;lcd.c: 71: lcdInst(0b11000000);
  9110                           
  9111                           ;incstack = 0
  9112  0051F6  0EC0               	movlw	192
  9113  0051F8  EC69  F028         	call	_lcdInst
  9114  0051FC  0012               	return		;funcret
  9115  0051FE                     __end_of_lcdHome:
  9116                           	opt stack 0
  9117                           tblptru	equ	0xFF8
  9118                           tblptrh	equ	0xFF7
  9119                           tblptrl	equ	0xFF6
  9120                           tablat	equ	0xFF5
  9121                           prodh	equ	0xFF4
  9122                           prodl	equ	0xFF3
  9123                           intcon	equ	0xFF2
  9124                           intcon3	equ	0xFF0
  9125                           postinc0	equ	0xFEE
  9126                           wreg	equ	0xFE8
  9127                           postdec1	equ	0xFE5
  9128                           fsr1l	equ	0xFE1
  9129                           indf2	equ	0xFDF
  9130                           postinc2	equ	0xFDE
  9131                           postdec2	equ	0xFDD
  9132                           fsr2h	equ	0xFDA
  9133                           fsr2l	equ	0xFD9
  9134                           status	equ	0xFD8
  9135                           
  9136 ;; *************** function _initServo *****************
  9137 ;; Defined at:
  9138 ;;		line 21 in file "servo.c"
  9139 ;; Parameters:    Size  Location     Type
  9140 ;;  motor           2  118[BANK0 ] PTR int 
  9141 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
  9142 ;;  angle           2  120[BANK0 ] int 
  9143 ;; Auto vars:     Size  Location     Type
  9144 ;;		None
  9145 ;; Return value:  Size  Location     Type
  9146 ;;                  1    wreg      void 
  9147 ;; Registers used:
  9148 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9149 ;; Tracked objects:
  9150 ;;		On entry : 0/0
  9151 ;;		On exit  : 0/0
  9152 ;;		Unchanged: 0/0
  9153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9154 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9156 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9157 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9158 ;;Total ram usage:        8 bytes
  9159 ;; Hardware stack levels used:    1
  9160 ;; Hardware stack levels required when called:   10
  9161 ;; This function calls:
  9162 ;;		_initTimer
  9163 ;;		_setAngle
  9164 ;;		_startTimer
  9165 ;; This function is called by:
  9166 ;;		_main
  9167 ;; This function uses a non-reentrant model
  9168 ;;
  9169                           
  9170                           	psect	text27
  9171  004900                     __ptext27:
  9172                           	opt stack 0
  9173  004900                     _initServo:
  9174                           	opt stack 20
  9175                           
  9176                           ;servo.c: 22: n++;
  9177                           
  9178                           ;incstack = 0
  9179  004900  4A7D               	infsnz	_n,f,c
  9180  004902  2A7E               	incf	_n+1,f,c
  9181                           
  9182                           ;servo.c: 23: servos[n-1] = motor;
  9183  004904  0EFE               	movlw	254
  9184  004906  0100               	movlb	0	; () banked
  9185  004908  6FFA               	movwf	??_initServo& (0+255),b
  9186  00490A  0EFF               	movlw	255
  9187  00490C  0100               	movlb	0	; () banked
  9188  00490E  6FFB               	movwf	(??_initServo+1)& (0+255),b
  9189  004910  C07D  F0FC         	movff	_n,??_initServo+2
  9190  004914  C07E  F0FD         	movff	_n+1,??_initServo+3
  9191  004918  90D8               	bcf	status,0,c
  9192  00491A  0100               	movlb	0	; () banked
  9193  00491C  37FC               	rlcf	(??_initServo+2)& (0+255),f,b
  9194  00491E  37FD               	rlcf	(??_initServo+3)& (0+255),f,b
  9195  004920  0100               	movlb	0	; () banked
  9196  004922  51FA               	movf	??_initServo& (0+255),w,b
  9197  004924  0100               	movlb	0	; () banked
  9198  004926  27FC               	addwf	(??_initServo+2)& (0+255),f,b
  9199  004928  0100               	movlb	0	; () banked
  9200  00492A  51FB               	movf	(??_initServo+1)& (0+255),w,b
  9201  00492C  0100               	movlb	0	; () banked
  9202  00492E  23FD               	addwfc	(??_initServo+3)& (0+255),f,b
  9203  004930  0E68               	movlw	low _servos
  9204  004932  0100               	movlb	0	; () banked
  9205  004934  25FC               	addwf	(??_initServo+2)& (0+255),w,b
  9206  004936  6ED9               	movwf	fsr2l,c
  9207  004938  0E01               	movlw	high _servos
  9208  00493A  0100               	movlb	0	; () banked
  9209  00493C  21FD               	addwfc	(??_initServo+3)& (0+255),w,b
  9210  00493E  6EDA               	movwf	fsr2h,c
  9211  004940  C0F6  FFDE         	movff	initServo@motor,postinc2
  9212  004944  C0F7  FFDD         	movff	initServo@motor+1,postdec2
  9213                           
  9214                           ; BSR set to: 0
  9215                           ;servo.c: 24: setAngle(motor, angle);
  9216  004948  C0F6  F0EC         	movff	initServo@motor,setAngle@motor
  9217  00494C  C0F7  F0ED         	movff	initServo@motor+1,setAngle@motor+1
  9218  004950  C0F8  F0EE         	movff	initServo@angle,setAngle@angle
  9219  004954  C0F9  F0EF         	movff	initServo@angle+1,setAngle@angle+1
  9220  004958  EC09  F021         	call	_setAngle	;wreg free
  9221                           
  9222                           ;servo.c: 26: initTimer(0);
  9223  00495C  0E00               	movlw	0
  9224  00495E  0100               	movlb	0	; () banked
  9225  004960  6F81               	movwf	(initTimer@timer+1)& (0+255),b
  9226  004962  0E00               	movlw	0
  9227  004964  6F80               	movwf	initTimer@timer& (0+255),b
  9228  004966  ECB7  F026         	call	_initTimer	;wreg free
  9229                           
  9230                           ;servo.c: 27: startTimer(0,0);
  9231  00496A  0E00               	movlw	0
  9232  00496C  0100               	movlb	0	; () banked
  9233  00496E  6F81               	movwf	(startTimer@timer+1)& (0+255),b
  9234  004970  0E00               	movlw	0
  9235  004972  6F80               	movwf	startTimer@timer& (0+255),b
  9236  004974  0E00               	movlw	0
  9237  004976  0100               	movlb	0	; () banked
  9238  004978  6F82               	movwf	startTimer@val& (0+255),b
  9239  00497A  0E00               	movlw	0
  9240  00497C  6F83               	movwf	(startTimer@val+1)& (0+255),b
  9241  00497E  0E00               	movlw	0
  9242  004980  6F84               	movwf	(startTimer@val+2)& (0+255),b
  9243  004982  0E00               	movlw	0
  9244  004984  6F85               	movwf	(startTimer@val+3)& (0+255),b
  9245  004986  EC8F  F026         	call	_startTimer	;wreg free
  9246  00498A  0012               	return		;funcret
  9247  00498C                     __end_of_initServo:
  9248                           	opt stack 0
  9249                           tblptru	equ	0xFF8
  9250                           tblptrh	equ	0xFF7
  9251                           tblptrl	equ	0xFF6
  9252                           tablat	equ	0xFF5
  9253                           prodh	equ	0xFF4
  9254                           prodl	equ	0xFF3
  9255                           intcon	equ	0xFF2
  9256                           intcon3	equ	0xFF0
  9257                           postinc0	equ	0xFEE
  9258                           wreg	equ	0xFE8
  9259                           postdec1	equ	0xFE5
  9260                           fsr1l	equ	0xFE1
  9261                           indf2	equ	0xFDF
  9262                           postinc2	equ	0xFDE
  9263                           postdec2	equ	0xFDD
  9264                           fsr2h	equ	0xFDA
  9265                           fsr2l	equ	0xFD9
  9266                           status	equ	0xFD8
  9267                           
  9268 ;; *************** function _startTimer *****************
  9269 ;; Defined at:
  9270 ;;		line 76 in file "timer.c"
  9271 ;; Parameters:    Size  Location     Type
  9272 ;;  timer           2    0[BANK0 ] int 
  9273 ;;  val             4    2[BANK0 ] long 
  9274 ;; Auto vars:     Size  Location     Type
  9275 ;;		None
  9276 ;; Return value:  Size  Location     Type
  9277 ;;                  1    wreg      void 
  9278 ;; Registers used:
  9279 ;;		wreg, status,2, status,0
  9280 ;; Tracked objects:
  9281 ;;		On entry : 0/0
  9282 ;;		On exit  : 0/0
  9283 ;;		Unchanged: 0/0
  9284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9285 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9287 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9288 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9289 ;;Total ram usage:        8 bytes
  9290 ;; Hardware stack levels used:    1
  9291 ;; Hardware stack levels required when called:    6
  9292 ;; This function calls:
  9293 ;;		Nothing
  9294 ;; This function is called by:
  9295 ;;		_main
  9296 ;;		_initServo
  9297 ;;		_testFrequency
  9298 ;; This function uses a non-reentrant model
  9299 ;;
  9300                           
  9301                           	psect	text28
  9302  004D1E                     __ptext28:
  9303                           	opt stack 0
  9304  004D1E                     _startTimer:
  9305                           	opt stack 24
  9306                           
  9307                           ;timer.c: 77: switch(timer){
  9308                           
  9309                           ;incstack = 0
  9310  004D1E  D012               	goto	l5666
  9311  004D20                     l401:
  9312                           
  9313                           ; BSR set to: 0
  9314                           ;timer.c: 79: TMR0H = val>>8;
  9315  004D20  C083  FFD7         	movff	startTimer@val+1,4055	;volatile
  9316                           
  9317                           ;timer.c: 80: TMR0L = val;
  9318  004D24  C082  FFD6         	movff	startTimer@val,4054	;volatile
  9319                           
  9320                           ; BSR set to: 0
  9321                           ;timer.c: 81: T0CON |= 1<<7;
  9322  004D28  8ED5               	bsf	4053,7,c	;volatile
  9323                           
  9324                           ;timer.c: 82: break;
  9325  004D2A  0012               	return	
  9326  004D2C                     l403:
  9327                           
  9328                           ; BSR set to: 0
  9329                           ;timer.c: 84: TMR1H = val>>8;
  9330  004D2C  C083  FFCF         	movff	startTimer@val+1,4047	;volatile
  9331                           
  9332                           ;timer.c: 85: TMR1L = val;
  9333  004D30  C082  FFCE         	movff	startTimer@val,4046	;volatile
  9334                           
  9335                           ; BSR set to: 0
  9336                           ;timer.c: 86: T1CON |= 1<<0;
  9337  004D34  80CD               	bsf	4045,0,c	;volatile
  9338                           
  9339                           ;timer.c: 87: break;
  9340  004D36  0012               	return	
  9341  004D38                     l404:
  9342                           
  9343                           ; BSR set to: 0
  9344                           ;timer.c: 89: TMR3H = val>>8;
  9345  004D38  C083  FFB3         	movff	startTimer@val+1,4019	;volatile
  9346                           
  9347                           ;timer.c: 90: TMR3L = val;
  9348  004D3C  C082  FFB2         	movff	startTimer@val,4018	;volatile
  9349                           
  9350                           ; BSR set to: 0
  9351                           ;timer.c: 91: T3CON |= 1<<0;
  9352  004D40  80B1               	bsf	4017,0,c	;volatile
  9353                           
  9354                           ;timer.c: 92: }
  9355  004D42  0012               	return	
  9356  004D44                     l5666:
  9357  004D44  C080  F086         	movff	startTimer@timer,??_startTimer
  9358  004D48  C081  F087         	movff	startTimer@timer+1,??_startTimer+1
  9359                           
  9360                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9361                           ; Switch size 1, requested type "space"
  9362                           ; Number of cases is 1, Range of values is 0 to 0
  9363                           ; switch strategies available:
  9364                           ; Name         Instructions Cycles
  9365                           ; simple_byte            4     3 (average)
  9366                           ;	Chosen strategy is simple_byte
  9367  004D4C  0100               	movlb	0	; () banked
  9368  004D4E  5187               	movf	(??_startTimer+1)& (0+255),w,b
  9369  004D50  0A00               	xorlw	0	; case 0
  9370  004D52  A4D8               	btfss	status,2,c
  9371  004D54  0012               	return	
  9372                           
  9373                           ; BSR set to: 0
  9374                           ; Switch size 1, requested type "space"
  9375                           ; Number of cases is 3, Range of values is 0 to 3
  9376                           ; switch strategies available:
  9377                           ; Name         Instructions Cycles
  9378                           ; simple_byte           10     6 (average)
  9379                           ;	Chosen strategy is simple_byte
  9380  004D56  0100               	movlb	0	; () banked
  9381  004D58  5186               	movf	??_startTimer& (0+255),w,b
  9382  004D5A  0A00               	xorlw	0	; case 0
  9383  004D5C  B4D8               	btfsc	status,2,c
  9384  004D5E  D7E0               	goto	l401
  9385  004D60  0A01               	xorlw	1	; case 1
  9386  004D62  B4D8               	btfsc	status,2,c
  9387  004D64  D7E3               	goto	l403
  9388  004D66  0A02               	xorlw	2	; case 3
  9389  004D68  A4D8               	btfss	status,2,c
  9390  004D6A  0012               	return	
  9391  004D6C  D7E5               	goto	l404
  9392  004D6E                     __end_of_startTimer:
  9393                           	opt stack 0
  9394                           tblptru	equ	0xFF8
  9395                           tblptrh	equ	0xFF7
  9396                           tblptrl	equ	0xFF6
  9397                           tablat	equ	0xFF5
  9398                           prodh	equ	0xFF4
  9399                           prodl	equ	0xFF3
  9400                           intcon	equ	0xFF2
  9401                           intcon3	equ	0xFF0
  9402                           postinc0	equ	0xFEE
  9403                           wreg	equ	0xFE8
  9404                           postdec1	equ	0xFE5
  9405                           fsr1l	equ	0xFE1
  9406                           indf2	equ	0xFDF
  9407                           postinc2	equ	0xFDE
  9408                           postdec2	equ	0xFDD
  9409                           fsr2h	equ	0xFDA
  9410                           fsr2l	equ	0xFD9
  9411                           status	equ	0xFD8
  9412                           
  9413 ;; *************** function _setAngle *****************
  9414 ;; Defined at:
  9415 ;;		line 41 in file "servo.c"
  9416 ;; Parameters:    Size  Location     Type
  9417 ;;  motor           2  108[BANK0 ] PTR int 
  9418 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
  9419 ;;  angle           2  110[BANK0 ] int 
  9420 ;; Auto vars:     Size  Location     Type
  9421 ;;  i               2  116[BANK0 ] int 
  9422 ;;  period          2  114[BANK0 ] unsigned int 
  9423 ;; Return value:  Size  Location     Type
  9424 ;;                  1    wreg      void 
  9425 ;; Registers used:
  9426 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9427 ;; Tracked objects:
  9428 ;;		On entry : 0/0
  9429 ;;		On exit  : 0/0
  9430 ;;		Unchanged: 0/0
  9431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9432 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9433 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9434 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9435 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9436 ;;Total ram usage:       10 bytes
  9437 ;; Hardware stack levels used:    1
  9438 ;; Hardware stack levels required when called:    9
  9439 ;; This function calls:
  9440 ;;		_angleToPulse
  9441 ;; This function is called by:
  9442 ;;		_sortBattery
  9443 ;;		_initServo
  9444 ;; This function uses a non-reentrant model
  9445 ;;
  9446                           
  9447                           	psect	text29
  9448  004212                     __ptext29:
  9449                           	opt stack 0
  9450  004212                     _setAngle:
  9451                           	opt stack 20
  9452                           
  9453                           ;servo.c: 42: unsigned int period = 50000;
  9454                           
  9455                           ; BSR set to: 0
  9456                           ;incstack = 0
  9457  004212  0EC3               	movlw	195
  9458  004214  0100               	movlb	0	; () banked
  9459  004216  6FF3               	movwf	(setAngle@period+1)& (0+255),b
  9460  004218  0E50               	movlw	80
  9461  00421A  6FF2               	movwf	setAngle@period& (0+255),b
  9462                           
  9463                           ;servo.c: 43: for(int i = 0; i < n; i++){
  9464  00421C  0E00               	movlw	0
  9465  00421E  0100               	movlb	0	; () banked
  9466  004220  6FF5               	movwf	(setAngle@i+1)& (0+255),b
  9467  004222  0E00               	movlw	0
  9468  004224  6FF4               	movwf	setAngle@i& (0+255),b
  9469  004226  D03F               	goto	l5722
  9470  004228                     l5714:
  9471                           
  9472                           ; BSR set to: 0
  9473                           ;servo.c: 44: if(servos[i] == motor){
  9474  004228  90D8               	bcf	status,0,c
  9475  00422A  0100               	movlb	0	; () banked
  9476  00422C  35F4               	rlcf	setAngle@i& (0+255),w,b
  9477  00422E  6ED9               	movwf	fsr2l,c
  9478  004230  0100               	movlb	0	; () banked
  9479  004232  35F5               	rlcf	(setAngle@i+1)& (0+255),w,b
  9480  004234  6EDA               	movwf	fsr2h,c
  9481  004236  0E68               	movlw	low _servos
  9482  004238  26D9               	addwf	fsr2l,f,c
  9483  00423A  0E01               	movlw	high _servos
  9484  00423C  22DA               	addwfc	fsr2h,f,c
  9485  00423E  0100               	movlb	0	; () banked
  9486  004240  51EC               	movf	setAngle@motor& (0+255),w,b
  9487  004242  18DE               	xorwf	postinc2,w,c
  9488  004244  E11C               	bnz	l5718
  9489  004246  0100               	movlb	0	; () banked
  9490  004248  51ED               	movf	(setAngle@motor+1)& (0+255),w,b
  9491  00424A  18DE               	xorwf	postinc2,w,c
  9492  00424C  A4D8               	btfss	status,2,c
  9493  00424E  D017               	goto	l5718
  9494                           
  9495                           ; BSR set to: 0
  9496                           ;servo.c: 45: pulse[i] = angleToPulse(angle);
  9497  004250  C0EE  F0D5         	movff	setAngle@angle,angleToPulse@angle
  9498  004254  C0EF  F0D6         	movff	setAngle@angle+1,angleToPulse@angle+1
  9499  004258  ECB0  F018         	call	_angleToPulse	;wreg free
  9500  00425C  90D8               	bcf	status,0,c
  9501  00425E  0100               	movlb	0	; () banked
  9502  004260  35F4               	rlcf	setAngle@i& (0+255),w,b
  9503  004262  6ED9               	movwf	fsr2l,c
  9504  004264  0100               	movlb	0	; () banked
  9505  004266  35F5               	rlcf	(setAngle@i+1)& (0+255),w,b
  9506  004268  6EDA               	movwf	fsr2h,c
  9507  00426A  0E60               	movlw	low _pulse
  9508  00426C  26D9               	addwf	fsr2l,f,c
  9509  00426E  0E01               	movlw	high _pulse
  9510  004270  22DA               	addwfc	fsr2h,f,c
  9511  004272  0100               	movlb	0	; () banked
  9512  004274  C0D5  FFDE         	movff	?_angleToPulse,postinc2
  9513  004278  0100               	movlb	0	; () banked
  9514  00427A  C0D6  FFDD         	movff	?_angleToPulse+1,postdec2
  9515  00427E                     l5718:
  9516                           
  9517                           ; BSR set to: 0
  9518                           ;servo.c: 46: }
  9519                           ;servo.c: 47: period-=pulse[i];
  9520  00427E  90D8               	bcf	status,0,c
  9521  004280  0100               	movlb	0	; () banked
  9522  004282  35F4               	rlcf	setAngle@i& (0+255),w,b
  9523  004284  6ED9               	movwf	fsr2l,c
  9524  004286  0100               	movlb	0	; () banked
  9525  004288  35F5               	rlcf	(setAngle@i+1)& (0+255),w,b
  9526  00428A  6EDA               	movwf	fsr2h,c
  9527  00428C  0E60               	movlw	low _pulse
  9528  00428E  26D9               	addwf	fsr2l,f,c
  9529  004290  0E01               	movlw	high _pulse
  9530  004292  22DA               	addwfc	fsr2h,f,c
  9531  004294  50DE               	movf	postinc2,w,c
  9532  004296  0100               	movlb	0	; () banked
  9533  004298  5FF2               	subwf	setAngle@period& (0+255),f,b
  9534  00429A  50DD               	movf	postdec2,w,c
  9535  00429C  0100               	movlb	0	; () banked
  9536  00429E  5BF3               	subwfb	(setAngle@period+1)& (0+255),f,b
  9537                           
  9538                           ; BSR set to: 0
  9539  0042A0  0100               	movlb	0	; () banked
  9540  0042A2  4BF4               	infsnz	setAngle@i& (0+255),f,b
  9541  0042A4  2BF5               	incf	(setAngle@i+1)& (0+255),f,b
  9542  0042A6                     l5722:
  9543                           
  9544                           ; BSR set to: 0
  9545  0042A6  507D               	movf	_n,w,c
  9546  0042A8  0100               	movlb	0	; () banked
  9547  0042AA  5DF4               	subwf	setAngle@i& (0+255),w,b
  9548  0042AC  0100               	movlb	0	; () banked
  9549  0042AE  51F5               	movf	(setAngle@i+1)& (0+255),w,b
  9550  0042B0  0A80               	xorlw	128
  9551  0042B2  0100               	movlb	0	; () banked
  9552  0042B4  6FF0               	movwf	??_setAngle& (0+255),b
  9553  0042B6  507E               	movf	_n+1,w,c
  9554  0042B8  0A80               	xorlw	128
  9555  0042BA  0100               	movlb	0	; () banked
  9556  0042BC  59F0               	subwfb	??_setAngle& (0+255),w,b
  9557  0042BE  A0D8               	btfss	status,0,c
  9558  0042C0  D7B3               	goto	l5714
  9559                           
  9560                           ; BSR set to: 0
  9561                           ;servo.c: 48: }
  9562                           ;servo.c: 49: pulse[n] = period;
  9563                           
  9564                           ; BSR set to: 0
  9565  0042C2  90D8               	bcf	status,0,c
  9566  0042C4  347D               	rlcf	_n,w,c
  9567  0042C6  6ED9               	movwf	fsr2l,c
  9568  0042C8  347E               	rlcf	_n+1,w,c
  9569  0042CA  6EDA               	movwf	fsr2h,c
  9570  0042CC  0E60               	movlw	low _pulse
  9571  0042CE  26D9               	addwf	fsr2l,f,c
  9572  0042D0  0E01               	movlw	high _pulse
  9573  0042D2  22DA               	addwfc	fsr2h,f,c
  9574  0042D4  C0F2  FFDE         	movff	setAngle@period,postinc2
  9575  0042D8  C0F3  FFDD         	movff	setAngle@period+1,postdec2
  9576                           
  9577                           ; BSR set to: 0
  9578  0042DC  0012               	return		;funcret
  9579  0042DE                     __end_of_setAngle:
  9580                           	opt stack 0
  9581                           tblptru	equ	0xFF8
  9582                           tblptrh	equ	0xFF7
  9583                           tblptrl	equ	0xFF6
  9584                           tablat	equ	0xFF5
  9585                           prodh	equ	0xFF4
  9586                           prodl	equ	0xFF3
  9587                           intcon	equ	0xFF2
  9588                           intcon3	equ	0xFF0
  9589                           postinc0	equ	0xFEE
  9590                           wreg	equ	0xFE8
  9591                           postdec1	equ	0xFE5
  9592                           fsr1l	equ	0xFE1
  9593                           indf2	equ	0xFDF
  9594                           postinc2	equ	0xFDE
  9595                           postdec2	equ	0xFDD
  9596                           fsr2h	equ	0xFDA
  9597                           fsr2l	equ	0xFD9
  9598                           status	equ	0xFD8
  9599                           
  9600 ;; *************** function _angleToPulse *****************
  9601 ;; Defined at:
  9602 ;;		line 33 in file "servo.c"
  9603 ;; Parameters:    Size  Location     Type
  9604 ;;  angle           2   85[BANK0 ] int 
  9605 ;; Auto vars:     Size  Location     Type
  9606 ;;  a000            4  104[BANK0 ] long 
  9607 ;;  a180            4   97[BANK0 ] long 
  9608 ;;  offset          4   93[BANK0 ] long 
  9609 ;; Return value:  Size  Location     Type
  9610 ;;                  4   85[BANK0 ] long 
  9611 ;; Registers used:
  9612 ;;		wreg, status,2, status,0, cstack
  9613 ;; Tracked objects:
  9614 ;;		On entry : 0/0
  9615 ;;		On exit  : 0/0
  9616 ;;		Unchanged: 0/0
  9617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9618 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9619 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9620 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9621 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9622 ;;Total ram usage:       23 bytes
  9623 ;; Hardware stack levels used:    1
  9624 ;; Hardware stack levels required when called:    8
  9625 ;; This function calls:
  9626 ;;		___altoft
  9627 ;;		___awtoft
  9628 ;;		___ftadd
  9629 ;;		___ftdiv
  9630 ;;		___ftmul
  9631 ;;		___fttol
  9632 ;; This function is called by:
  9633 ;;		_setAngle
  9634 ;; This function uses a non-reentrant model
  9635 ;;
  9636                           
  9637                           	psect	text30
  9638  003160                     __ptext30:
  9639                           	opt stack 0
  9640  003160                     _angleToPulse:
  9641                           	opt stack 20
  9642                           
  9643                           ;servo.c: 34: long offset = -600;
  9644                           
  9645                           ; BSR set to: 0
  9646                           ;incstack = 0
  9647  003160  0EA8               	movlw	168
  9648  003162  0100               	movlb	0	; () banked
  9649  003164  6FDD               	movwf	angleToPulse@offset& (0+255),b
  9650  003166  0EFD               	movlw	253
  9651  003168  6FDE               	movwf	(angleToPulse@offset+1)& (0+255),b
  9652  00316A  0EFF               	movlw	255
  9653  00316C  6FDF               	movwf	(angleToPulse@offset+2)& (0+255),b
  9654  00316E  0EFF               	movlw	255
  9655  003170  6FE0               	movwf	(angleToPulse@offset+3)& (0+255),b
  9656                           
  9657                           ;servo.c: 35: long a000 = 1250;
  9658  003172  0EE2               	movlw	226
  9659  003174  0100               	movlb	0	; () banked
  9660  003176  6FE8               	movwf	angleToPulse@a000& (0+255),b
  9661  003178  0E04               	movlw	4
  9662  00317A  6FE9               	movwf	(angleToPulse@a000+1)& (0+255),b
  9663  00317C  0E00               	movlw	0
  9664  00317E  6FEA               	movwf	(angleToPulse@a000+2)& (0+255),b
  9665  003180  0E00               	movlw	0
  9666  003182  6FEB               	movwf	(angleToPulse@a000+3)& (0+255),b
  9667                           
  9668                           ;servo.c: 36: long a180 = 6250;
  9669  003184  0E6A               	movlw	106
  9670  003186  0100               	movlb	0	; () banked
  9671  003188  6FE1               	movwf	angleToPulse@a180& (0+255),b
  9672  00318A  0E18               	movlw	24
  9673  00318C  6FE2               	movwf	(angleToPulse@a180+1)& (0+255),b
  9674  00318E  0E00               	movlw	0
  9675  003190  6FE3               	movwf	(angleToPulse@a180+2)& (0+255),b
  9676  003192  0E00               	movlw	0
  9677  003194  6FE4               	movwf	(angleToPulse@a180+3)& (0+255),b
  9678                           
  9679                           ; BSR set to: 0
  9680                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
  9681  003196  C0E8  F0D9         	movff	angleToPulse@a000,??_angleToPulse
  9682  00319A  C0E9  F0DA         	movff	angleToPulse@a000+1,??_angleToPulse+1
  9683  00319E  C0EA  F0DB         	movff	angleToPulse@a000+2,??_angleToPulse+2
  9684  0031A2  C0EB  F0DC         	movff	angleToPulse@a000+3,??_angleToPulse+3
  9685  0031A6  0100               	movlb	0	; () banked
  9686  0031A8  1FD9               	comf	??_angleToPulse& (0+255),f,b
  9687  0031AA  1FDA               	comf	(??_angleToPulse+1)& (0+255),f,b
  9688  0031AC  1FDB               	comf	(??_angleToPulse+2)& (0+255),f,b
  9689  0031AE  1FDC               	comf	(??_angleToPulse+3)& (0+255),f,b
  9690  0031B0  2BD9               	incf	??_angleToPulse& (0+255),f,b
  9691  0031B2  0E00               	movlw	0
  9692  0031B4  23DA               	addwfc	(??_angleToPulse+1)& (0+255),f,b
  9693  0031B6  23DB               	addwfc	(??_angleToPulse+2)& (0+255),f,b
  9694  0031B8  23DC               	addwfc	(??_angleToPulse+3)& (0+255),f,b
  9695  0031BA  0100               	movlb	0	; () banked
  9696  0031BC  51E1               	movf	angleToPulse@a180& (0+255),w,b
  9697  0031BE  0100               	movlb	0	; () banked
  9698  0031C0  25D9               	addwf	??_angleToPulse& (0+255),w,b
  9699  0031C2  0100               	movlb	0	; () banked
  9700  0031C4  6F88               	movwf	___altoft@c& (0+255),b
  9701  0031C6  0100               	movlb	0	; () banked
  9702  0031C8  51E2               	movf	(angleToPulse@a180+1)& (0+255),w,b
  9703  0031CA  0100               	movlb	0	; () banked
  9704  0031CC  21DA               	addwfc	(??_angleToPulse+1)& (0+255),w,b
  9705  0031CE  0100               	movlb	0	; () banked
  9706  0031D0  6F89               	movwf	(___altoft@c+1)& (0+255),b
  9707  0031D2  0100               	movlb	0	; () banked
  9708  0031D4  51E3               	movf	(angleToPulse@a180+2)& (0+255),w,b
  9709  0031D6  0100               	movlb	0	; () banked
  9710  0031D8  21DB               	addwfc	(??_angleToPulse+2)& (0+255),w,b
  9711  0031DA  0100               	movlb	0	; () banked
  9712  0031DC  6F8A               	movwf	(___altoft@c+2)& (0+255),b
  9713  0031DE  0100               	movlb	0	; () banked
  9714  0031E0  51E4               	movf	(angleToPulse@a180+3)& (0+255),w,b
  9715  0031E2  0100               	movlb	0	; () banked
  9716  0031E4  21DC               	addwfc	(??_angleToPulse+3)& (0+255),w,b
  9717  0031E6  0100               	movlb	0	; () banked
  9718  0031E8  6F8B               	movwf	(___altoft@c+3)& (0+255),b
  9719  0031EA  EC9C  F023         	call	___altoft	;wreg free
  9720  0031EE  C088  F0A4         	movff	?___altoft,___ftmul@f2
  9721  0031F2  C089  F0A5         	movff	?___altoft+1,___ftmul@f2+1
  9722  0031F6  C08A  F0A6         	movff	?___altoft+2,___ftmul@f2+2
  9723  0031FA  0E00               	movlw	0
  9724  0031FC  0100               	movlb	0	; () banked
  9725  0031FE  6F95               	movwf	___ftdiv@f2& (0+255),b
  9726  003200  0E34               	movlw	52
  9727  003202  0100               	movlb	0	; () banked
  9728  003204  6F96               	movwf	(___ftdiv@f2+1)& (0+255),b
  9729  003206  0E43               	movlw	67
  9730  003208  0100               	movlb	0	; () banked
  9731  00320A  6F97               	movwf	(___ftdiv@f2+2)& (0+255),b
  9732  00320C  C0D5  F088         	movff	angleToPulse@angle,___awtoft@c
  9733  003210  C0D6  F089         	movff	angleToPulse@angle+1,___awtoft@c+1
  9734  003214  EC72  F027         	call	___awtoft	;wreg free
  9735  003218  C088  F092         	movff	?___awtoft,___ftdiv@f1
  9736  00321C  C089  F093         	movff	?___awtoft+1,___ftdiv@f1+1
  9737  003220  C08A  F094         	movff	?___awtoft+2,___ftdiv@f1+2
  9738  003224  EC12  F01A         	call	___ftdiv	;wreg free
  9739  003228  C092  F0A1         	movff	?___ftdiv,___ftmul@f1
  9740  00322C  C093  F0A2         	movff	?___ftdiv+1,___ftmul@f1+1
  9741  003230  C094  F0A3         	movff	?___ftdiv+2,___ftmul@f1+2
  9742  003234  EC63  F019         	call	___ftmul	;wreg free
  9743  003238  C0A1  F0BD         	movff	?___ftmul,___ftadd@f2
  9744  00323C  C0A2  F0BE         	movff	?___ftmul+1,___ftadd@f2+1
  9745  003240  C0A3  F0BF         	movff	?___ftmul+2,___ftadd@f2+2
  9746  003244  C0E8  F088         	movff	angleToPulse@a000,___altoft@c
  9747  003248  C0E9  F089         	movff	angleToPulse@a000+1,___altoft@c+1
  9748  00324C  C0EA  F08A         	movff	angleToPulse@a000+2,___altoft@c+2
  9749  003250  C0EB  F08B         	movff	angleToPulse@a000+3,___altoft@c+3
  9750  003254  EC9C  F023         	call	___altoft	;wreg free
  9751  003258  C088  F0BA         	movff	?___altoft,___ftadd@f1
  9752  00325C  C089  F0BB         	movff	?___altoft+1,___ftadd@f1+1
  9753  003260  C08A  F0BC         	movff	?___altoft+2,___ftadd@f1+2
  9754  003264  EC1C  F013         	call	___ftadd	;wreg free
  9755  003268  C0BA  F0E5         	movff	?___ftadd,_angleToPulse$1336
  9756  00326C  C0BB  F0E6         	movff	?___ftadd+1,_angleToPulse$1336+1
  9757  003270  C0BC  F0E7         	movff	?___ftadd+2,_angleToPulse$1336+2
  9758                           
  9759                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
  9760  003274  C0DD  F088         	movff	angleToPulse@offset,___altoft@c
  9761  003278  C0DE  F089         	movff	angleToPulse@offset+1,___altoft@c+1
  9762  00327C  C0DF  F08A         	movff	angleToPulse@offset+2,___altoft@c+2
  9763  003280  C0E0  F08B         	movff	angleToPulse@offset+3,___altoft@c+3
  9764  003284  EC9C  F023         	call	___altoft	;wreg free
  9765  003288  C088  F0BD         	movff	?___altoft,___ftadd@f2
  9766  00328C  C089  F0BE         	movff	?___altoft+1,___ftadd@f2+1
  9767  003290  C08A  F0BF         	movff	?___altoft+2,___ftadd@f2+2
  9768  003294  C0E5  F0BA         	movff	_angleToPulse$1336,___ftadd@f1
  9769  003298  C0E6  F0BB         	movff	_angleToPulse$1336+1,___ftadd@f1+1
  9770  00329C  C0E7  F0BC         	movff	_angleToPulse$1336+2,___ftadd@f1+2
  9771  0032A0  EC1C  F013         	call	___ftadd	;wreg free
  9772  0032A4  C0BA  F0C6         	movff	?___ftadd,___fttol@f1
  9773  0032A8  C0BB  F0C7         	movff	?___ftadd+1,___fttol@f1+1
  9774  0032AC  C0BC  F0C8         	movff	?___ftadd+2,___fttol@f1+2
  9775  0032B0  ECB8  F01A         	call	___fttol	;wreg free
  9776  0032B4  C0C6  F0D5         	movff	?___fttol,?_angleToPulse
  9777  0032B8  C0C7  F0D6         	movff	?___fttol+1,?_angleToPulse+1
  9778  0032BC  C0C8  F0D7         	movff	?___fttol+2,?_angleToPulse+2
  9779  0032C0  C0C9  F0D8         	movff	?___fttol+3,?_angleToPulse+3
  9780  0032C4  0012               	return	
  9781  0032C6                     __end_of_angleToPulse:
  9782                           	opt stack 0
  9783                           tblptru	equ	0xFF8
  9784                           tblptrh	equ	0xFF7
  9785                           tblptrl	equ	0xFF6
  9786                           tablat	equ	0xFF5
  9787                           prodh	equ	0xFF4
  9788                           prodl	equ	0xFF3
  9789                           intcon	equ	0xFF2
  9790                           intcon3	equ	0xFF0
  9791                           postinc0	equ	0xFEE
  9792                           wreg	equ	0xFE8
  9793                           postdec1	equ	0xFE5
  9794                           fsr1l	equ	0xFE1
  9795                           indf2	equ	0xFDF
  9796                           postinc2	equ	0xFDE
  9797                           postdec2	equ	0xFDD
  9798                           fsr2h	equ	0xFDA
  9799                           fsr2l	equ	0xFD9
  9800                           status	equ	0xFD8
  9801                           
  9802 ;; *************** function ___fttol *****************
  9803 ;; Defined at:
  9804 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  9805 ;; Parameters:    Size  Location     Type
  9806 ;;  f1              3   70[BANK0 ] float 
  9807 ;; Auto vars:     Size  Location     Type
  9808 ;;  lval            4   80[BANK0 ] unsigned long 
  9809 ;;  exp1            1   84[BANK0 ] unsigned char 
  9810 ;;  sign1           1   79[BANK0 ] unsigned char 
  9811 ;; Return value:  Size  Location     Type
  9812 ;;                  4   70[BANK0 ] long 
  9813 ;; Registers used:
  9814 ;;		wreg, status,2, status,0
  9815 ;; Tracked objects:
  9816 ;;		On entry : 0/0
  9817 ;;		On exit  : 0/0
  9818 ;;		Unchanged: 0/0
  9819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9820 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9821 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9822 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9823 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9824 ;;Total ram usage:       15 bytes
  9825 ;; Hardware stack levels used:    1
  9826 ;; Hardware stack levels required when called:    6
  9827 ;; This function calls:
  9828 ;;		Nothing
  9829 ;; This function is called by:
  9830 ;;		_angleToPulse
  9831 ;;		_printf
  9832 ;; This function uses a non-reentrant model
  9833 ;;
  9834                           
  9835                           	psect	text31
  9836  003570                     __ptext31:
  9837                           	opt stack 0
  9838  003570                     ___fttol:
  9839                           	opt stack 21
  9840                           
  9841                           ;incstack = 0
  9842  003570  C0C8  F0CA         	movff	___fttol@f1+2,??___fttol
  9843  003574  0100               	movlb	0	; () banked
  9844  003576  6BCB               	clrf	(??___fttol+1)& (0+255),b
  9845  003578  6BCC               	clrf	(??___fttol+2)& (0+255),b
  9846  00357A  0100               	movlb	0	; () banked
  9847  00357C  35C7               	rlcf	(___fttol@f1+1)& (0+255),w,b
  9848  00357E  0100               	movlb	0	; () banked
  9849  003580  37CA               	rlcf	??___fttol& (0+255),f,b
  9850  003582  E301               	bnc	u4851
  9851  003584  81CB               	bsf	(??___fttol+1)& (0+255),0,b
  9852  003586                     u4851:
  9853  003586  0100               	movlb	0	; () banked
  9854  003588  51CA               	movf	??___fttol& (0+255),w,b
  9855  00358A  0100               	movlb	0	; () banked
  9856  00358C  6FD4               	movwf	___fttol@exp1& (0+255),b
  9857  00358E  0100               	movlb	0	; () banked
  9858  003590  51D4               	movf	___fttol@exp1& (0+255),w,b
  9859  003592  A4D8               	btfss	status,2,c
  9860  003594  D00A               	goto	l4950
  9861                           
  9862                           ; BSR set to: 0
  9863  003596  0E00               	movlw	0
  9864  003598  0100               	movlb	0	; () banked
  9865  00359A  6FC6               	movwf	?___fttol& (0+255),b
  9866  00359C  0E00               	movlw	0
  9867  00359E  6FC7               	movwf	(?___fttol+1)& (0+255),b
  9868  0035A0  0E00               	movlw	0
  9869  0035A2  6FC8               	movwf	(?___fttol+2)& (0+255),b
  9870  0035A4  0E00               	movlw	0
  9871  0035A6  6FC9               	movwf	(?___fttol+3)& (0+255),b
  9872                           
  9873                           ; BSR set to: 0
  9874  0035A8  0012               	return	
  9875  0035AA                     l4950:
  9876                           
  9877                           ; BSR set to: 0
  9878  0035AA  0E17               	movlw	23
  9879  0035AC  0100               	movlb	0	; () banked
  9880  0035AE  6FCA               	movwf	??___fttol& (0+255),b
  9881  0035B0  C0C6  F0CB         	movff	___fttol@f1,??___fttol+1
  9882  0035B4  C0C7  F0CC         	movff	___fttol@f1+1,??___fttol+2
  9883  0035B8  C0C8  F0CD         	movff	___fttol@f1+2,??___fttol+3
  9884  0035BC  0100               	movlb	0	; () banked
  9885  0035BE  29CA               	incf	??___fttol& (0+255),w,b
  9886  0035C0  0100               	movlb	0	; () banked
  9887  0035C2  6FCE               	movwf	(??___fttol+4)& (0+255),b
  9888  0035C4  D005               	goto	u4870
  9889  0035C6                     u4875:
  9890  0035C6  0100               	movlb	0	; () banked
  9891  0035C8  90D8               	bcf	status,0,c
  9892  0035CA  33CD               	rrcf	(??___fttol+3)& (0+255),f,b
  9893  0035CC  33CC               	rrcf	(??___fttol+2)& (0+255),f,b
  9894  0035CE  33CB               	rrcf	(??___fttol+1)& (0+255),f,b
  9895  0035D0                     u4870:
  9896  0035D0  0100               	movlb	0	; () banked
  9897  0035D2  2FCE               	decfsz	(??___fttol+4)& (0+255),f,b
  9898  0035D4  D7F8               	goto	u4875
  9899  0035D6  0100               	movlb	0	; () banked
  9900  0035D8  51CB               	movf	(??___fttol+1)& (0+255),w,b
  9901  0035DA  0100               	movlb	0	; () banked
  9902  0035DC  6FCF               	movwf	___fttol@sign1& (0+255),b
  9903                           
  9904                           ; BSR set to: 0
  9905  0035DE  0100               	movlb	0	; () banked
  9906  0035E0  8FC7               	bsf	(___fttol@f1+1)& (0+255),7,b
  9907                           
  9908                           ; BSR set to: 0
  9909  0035E2  0EFF               	movlw	255
  9910  0035E4  0100               	movlb	0	; () banked
  9911  0035E6  17C6               	andwf	___fttol@f1& (0+255),f,b
  9912  0035E8  0EFF               	movlw	255
  9913  0035EA  0100               	movlb	0	; () banked
  9914  0035EC  17C7               	andwf	(___fttol@f1+1)& (0+255),f,b
  9915  0035EE  0E00               	movlw	0
  9916  0035F0  0100               	movlb	0	; () banked
  9917  0035F2  17C8               	andwf	(___fttol@f1+2)& (0+255),f,b
  9918                           
  9919                           ; BSR set to: 0
  9920  0035F4  0100               	movlb	0	; () banked
  9921  0035F6  51C6               	movf	___fttol@f1& (0+255),w,b
  9922  0035F8  0100               	movlb	0	; () banked
  9923  0035FA  6FD0               	movwf	___fttol@lval& (0+255),b
  9924  0035FC  0100               	movlb	0	; () banked
  9925  0035FE  51C7               	movf	(___fttol@f1+1)& (0+255),w,b
  9926  003600  0100               	movlb	0	; () banked
  9927  003602  6FD1               	movwf	(___fttol@lval+1)& (0+255),b
  9928  003604  0100               	movlb	0	; () banked
  9929  003606  51C8               	movf	(___fttol@f1+2)& (0+255),w,b
  9930  003608  0100               	movlb	0	; () banked
  9931  00360A  6FD2               	movwf	(___fttol@lval+2)& (0+255),b
  9932  00360C  0100               	movlb	0	; () banked
  9933  00360E  6BD3               	clrf	(___fttol@lval+3)& (0+255),b
  9934                           
  9935                           ; BSR set to: 0
  9936  003610  0E8E               	movlw	142
  9937  003612  0100               	movlb	0	; () banked
  9938  003614  5FD4               	subwf	___fttol@exp1& (0+255),f,b
  9939                           
  9940                           ; BSR set to: 0
  9941  003616  0100               	movlb	0	; () banked
  9942  003618  AFD4               	btfss	___fttol@exp1& (0+255),7,b
  9943  00361A  D01A               	goto	l4972
  9944                           
  9945                           ; BSR set to: 0
  9946  00361C  0100               	movlb	0	; () banked
  9947  00361E  51D4               	movf	___fttol@exp1& (0+255),w,b
  9948  003620  0A80               	xorlw	128
  9949  003622  0F8F               	addlw	143
  9950  003624  B0D8               	btfsc	status,0,c
  9951  003626  D00A               	goto	l4968
  9952                           
  9953                           ; BSR set to: 0
  9954  003628  0E00               	movlw	0
  9955  00362A  0100               	movlb	0	; () banked
  9956  00362C  6FC6               	movwf	?___fttol& (0+255),b
  9957  00362E  0E00               	movlw	0
  9958  003630  6FC7               	movwf	(?___fttol+1)& (0+255),b
  9959  003632  0E00               	movlw	0
  9960  003634  6FC8               	movwf	(?___fttol+2)& (0+255),b
  9961  003636  0E00               	movlw	0
  9962  003638  6FC9               	movwf	(?___fttol+3)& (0+255),b
  9963                           
  9964                           ; BSR set to: 0
  9965  00363A  0012               	return	
  9966  00363C                     l4968:
  9967                           
  9968                           ; BSR set to: 0
  9969  00363C  0100               	movlb	0	; () banked
  9970  00363E  90D8               	bcf	status,0,c
  9971  003640  33D3               	rrcf	(___fttol@lval+3)& (0+255),f,b
  9972  003642  33D2               	rrcf	(___fttol@lval+2)& (0+255),f,b
  9973  003644  33D1               	rrcf	(___fttol@lval+1)& (0+255),f,b
  9974  003646  33D0               	rrcf	___fttol@lval& (0+255),f,b
  9975                           
  9976                           ; BSR set to: 0
  9977  003648  0100               	movlb	0	; () banked
  9978  00364A  3FD4               	incfsz	___fttol@exp1& (0+255),f,b
  9979  00364C  D7F7               	goto	l4968
  9980                           
  9981                           ; BSR set to: 0
  9982  00364E  D01B               	goto	l4982
  9983  003650                     l4972:
  9984                           
  9985                           ; BSR set to: 0
  9986  003650  0E17               	movlw	23
  9987  003652  0100               	movlb	0	; () banked
  9988  003654  65D4               	cpfsgt	___fttol@exp1& (0+255),b
  9989  003656  D012               	goto	l4980
  9990                           
  9991                           ; BSR set to: 0
  9992  003658  0E00               	movlw	0
  9993  00365A  0100               	movlb	0	; () banked
  9994  00365C  6FC6               	movwf	?___fttol& (0+255),b
  9995  00365E  0E00               	movlw	0
  9996  003660  6FC7               	movwf	(?___fttol+1)& (0+255),b
  9997  003662  0E00               	movlw	0
  9998  003664  6FC8               	movwf	(?___fttol+2)& (0+255),b
  9999  003666  0E00               	movlw	0
 10000  003668  6FC9               	movwf	(?___fttol+3)& (0+255),b
 10001                           
 10002                           ; BSR set to: 0
 10003  00366A  0012               	return	
 10004  00366C                     l4978:
 10005                           
 10006                           ; BSR set to: 0
 10007  00366C  0100               	movlb	0	; () banked
 10008  00366E  90D8               	bcf	status,0,c
 10009  003670  37D0               	rlcf	___fttol@lval& (0+255),f,b
 10010  003672  37D1               	rlcf	(___fttol@lval+1)& (0+255),f,b
 10011  003674  37D2               	rlcf	(___fttol@lval+2)& (0+255),f,b
 10012  003676  37D3               	rlcf	(___fttol@lval+3)& (0+255),f,b
 10013  003678  0100               	movlb	0	; () banked
 10014  00367A  07D4               	decf	___fttol@exp1& (0+255),f,b
 10015  00367C                     l4980:
 10016                           
 10017                           ; BSR set to: 0
 10018  00367C  0100               	movlb	0	; () banked
 10019  00367E  51D4               	movf	___fttol@exp1& (0+255),w,b
 10020  003680  0100               	movlb	0	; () banked
 10021  003682  A4D8               	btfss	status,2,c
 10022  003684  D7F3               	goto	l4978
 10023  003686                     l4982:
 10024                           
 10025                           ; BSR set to: 0
 10026  003686  0100               	movlb	0	; () banked
 10027  003688  51CF               	movf	___fttol@sign1& (0+255),w,b
 10028  00368A  0100               	movlb	0	; () banked
 10029  00368C  B4D8               	btfsc	status,2,c
 10030  00368E  D009               	goto	l4986
 10031                           
 10032                           ; BSR set to: 0
 10033  003690  0100               	movlb	0	; () banked
 10034  003692  1FD3               	comf	(___fttol@lval+3)& (0+255),f,b
 10035  003694  1FD2               	comf	(___fttol@lval+2)& (0+255),f,b
 10036  003696  1FD1               	comf	(___fttol@lval+1)& (0+255),f,b
 10037  003698  6DD0               	negf	___fttol@lval& (0+255),b
 10038  00369A  0E00               	movlw	0
 10039  00369C  23D1               	addwfc	(___fttol@lval+1)& (0+255),f,b
 10040  00369E  23D2               	addwfc	(___fttol@lval+2)& (0+255),f,b
 10041  0036A0  23D3               	addwfc	(___fttol@lval+3)& (0+255),f,b
 10042  0036A2                     l4986:
 10043                           
 10044                           ; BSR set to: 0
 10045  0036A2  C0D0  F0C6         	movff	___fttol@lval,?___fttol
 10046  0036A6  C0D1  F0C7         	movff	___fttol@lval+1,?___fttol+1
 10047  0036AA  C0D2  F0C8         	movff	___fttol@lval+2,?___fttol+2
 10048  0036AE  C0D3  F0C9         	movff	___fttol@lval+3,?___fttol+3
 10049  0036B2  0012               	return	
 10050  0036B4                     __end_of___fttol:
 10051                           	opt stack 0
 10052                           tblptru	equ	0xFF8
 10053                           tblptrh	equ	0xFF7
 10054                           tblptrl	equ	0xFF6
 10055                           tablat	equ	0xFF5
 10056                           prodh	equ	0xFF4
 10057                           prodl	equ	0xFF3
 10058                           intcon	equ	0xFF2
 10059                           intcon3	equ	0xFF0
 10060                           postinc0	equ	0xFEE
 10061                           wreg	equ	0xFE8
 10062                           postdec1	equ	0xFE5
 10063                           fsr1l	equ	0xFE1
 10064                           indf2	equ	0xFDF
 10065                           postinc2	equ	0xFDE
 10066                           postdec2	equ	0xFDD
 10067                           fsr2h	equ	0xFDA
 10068                           fsr2l	equ	0xFD9
 10069                           status	equ	0xFD8
 10070                           
 10071 ;; *************** function ___ftmul *****************
 10072 ;; Defined at:
 10073 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 10074 ;; Parameters:    Size  Location     Type
 10075 ;;  f1              3   33[BANK0 ] float 
 10076 ;;  f2              3   36[BANK0 ] float 
 10077 ;; Auto vars:     Size  Location     Type
 10078 ;;  f3_as_produc    3   43[BANK0 ] unsigned um
 10079 ;;  sign            1   47[BANK0 ] unsigned char 
 10080 ;;  cntr            1   46[BANK0 ] unsigned char 
 10081 ;;  exp             1   42[BANK0 ] unsigned char 
 10082 ;; Return value:  Size  Location     Type
 10083 ;;                  3   33[BANK0 ] float 
 10084 ;; Registers used:
 10085 ;;		wreg, status,2, status,0, cstack
 10086 ;; Tracked objects:
 10087 ;;		On entry : 0/0
 10088 ;;		On exit  : 0/0
 10089 ;;		Unchanged: 0/0
 10090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10091 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10092 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10093 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10094 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10095 ;;Total ram usage:       15 bytes
 10096 ;; Hardware stack levels used:    1
 10097 ;; Hardware stack levels required when called:    7
 10098 ;; This function calls:
 10099 ;;		___ftpack
 10100 ;; This function is called by:
 10101 ;;		_sortBattery
 10102 ;;		_angleToPulse
 10103 ;;		_fround
 10104 ;;		_scale
 10105 ;;		_printf
 10106 ;; This function uses a non-reentrant model
 10107 ;;
 10108                           
 10109                           	psect	text32
 10110  0032C6                     __ptext32:
 10111                           	opt stack 0
 10112  0032C6                     ___ftmul:
 10113                           	opt stack 20
 10114                           
 10115                           ; BSR set to: 0
 10116                           ;incstack = 0
 10117  0032C6  C0A3  F0A7         	movff	___ftmul@f1+2,??___ftmul
 10118  0032CA  0100               	movlb	0	; () banked
 10119  0032CC  6BA8               	clrf	(??___ftmul+1)& (0+255),b
 10120  0032CE  6BA9               	clrf	(??___ftmul+2)& (0+255),b
 10121  0032D0  0100               	movlb	0	; () banked
 10122  0032D2  35A2               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 10123  0032D4  0100               	movlb	0	; () banked
 10124  0032D6  37A7               	rlcf	??___ftmul& (0+255),f,b
 10125  0032D8  E301               	bnc	u4281
 10126  0032DA  81A8               	bsf	(??___ftmul+1)& (0+255),0,b
 10127  0032DC                     u4281:
 10128  0032DC  0100               	movlb	0	; () banked
 10129  0032DE  51A7               	movf	??___ftmul& (0+255),w,b
 10130  0032E0  0100               	movlb	0	; () banked
 10131  0032E2  6FAA               	movwf	___ftmul@exp& (0+255),b
 10132  0032E4  0100               	movlb	0	; () banked
 10133  0032E6  51AA               	movf	___ftmul@exp& (0+255),w,b
 10134  0032E8  A4D8               	btfss	status,2,c
 10135  0032EA  D00A               	goto	l4504
 10136                           
 10137                           ; BSR set to: 0
 10138  0032EC  0E00               	movlw	0
 10139  0032EE  0100               	movlb	0	; () banked
 10140  0032F0  6FA1               	movwf	?___ftmul& (0+255),b
 10141  0032F2  0E00               	movlw	0
 10142  0032F4  0100               	movlb	0	; () banked
 10143  0032F6  6FA2               	movwf	(?___ftmul+1)& (0+255),b
 10144  0032F8  0E00               	movlw	0
 10145  0032FA  0100               	movlb	0	; () banked
 10146  0032FC  6FA3               	movwf	(?___ftmul+2)& (0+255),b
 10147                           
 10148                           ; BSR set to: 0
 10149  0032FE  0012               	return	
 10150  003300                     l4504:
 10151                           
 10152                           ; BSR set to: 0
 10153  003300  C0A6  F0A7         	movff	___ftmul@f2+2,??___ftmul
 10154  003304  0100               	movlb	0	; () banked
 10155  003306  6BA8               	clrf	(??___ftmul+1)& (0+255),b
 10156  003308  6BA9               	clrf	(??___ftmul+2)& (0+255),b
 10157  00330A  0100               	movlb	0	; () banked
 10158  00330C  35A5               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 10159  00330E  0100               	movlb	0	; () banked
 10160  003310  37A7               	rlcf	??___ftmul& (0+255),f,b
 10161  003312  E301               	bnc	u4301
 10162  003314  81A8               	bsf	(??___ftmul+1)& (0+255),0,b
 10163  003316                     u4301:
 10164  003316  0100               	movlb	0	; () banked
 10165  003318  51A7               	movf	??___ftmul& (0+255),w,b
 10166  00331A  0100               	movlb	0	; () banked
 10167  00331C  6FAF               	movwf	___ftmul@sign& (0+255),b
 10168  00331E  0100               	movlb	0	; () banked
 10169  003320  51AF               	movf	___ftmul@sign& (0+255),w,b
 10170  003322  A4D8               	btfss	status,2,c
 10171  003324  D00A               	goto	l4510
 10172                           
 10173                           ; BSR set to: 0
 10174  003326  0E00               	movlw	0
 10175  003328  0100               	movlb	0	; () banked
 10176  00332A  6FA1               	movwf	?___ftmul& (0+255),b
 10177  00332C  0E00               	movlw	0
 10178  00332E  0100               	movlb	0	; () banked
 10179  003330  6FA2               	movwf	(?___ftmul+1)& (0+255),b
 10180  003332  0E00               	movlw	0
 10181  003334  0100               	movlb	0	; () banked
 10182  003336  6FA3               	movwf	(?___ftmul+2)& (0+255),b
 10183                           
 10184                           ; BSR set to: 0
 10185  003338  0012               	return	
 10186  00333A                     l4510:
 10187                           
 10188                           ; BSR set to: 0
 10189  00333A  0100               	movlb	0	; () banked
 10190  00333C  51AF               	movf	___ftmul@sign& (0+255),w,b
 10191  00333E  0F7B               	addlw	123
 10192  003340  0100               	movlb	0	; () banked
 10193  003342  27AA               	addwf	___ftmul@exp& (0+255),f,b
 10194                           
 10195                           ; BSR set to: 0
 10196  003344  C0A3  F0AF         	movff	___ftmul@f1+2,___ftmul@sign
 10197  003348  0100               	movlb	0	; () banked
 10198  00334A  51A6               	movf	(___ftmul@f2+2)& (0+255),w,b
 10199  00334C  0100               	movlb	0	; () banked
 10200  00334E  1BAF               	xorwf	___ftmul@sign& (0+255),f,b
 10201  003350  0E80               	movlw	128
 10202  003352  0100               	movlb	0	; () banked
 10203  003354  17AF               	andwf	___ftmul@sign& (0+255),f,b
 10204                           
 10205                           ; BSR set to: 0
 10206  003356  0100               	movlb	0	; () banked
 10207  003358  8FA2               	bsf	(___ftmul@f1+1)& (0+255),7,b
 10208                           
 10209                           ; BSR set to: 0
 10210  00335A  0100               	movlb	0	; () banked
 10211  00335C  8FA5               	bsf	(___ftmul@f2+1)& (0+255),7,b
 10212                           
 10213                           ; BSR set to: 0
 10214  00335E  0EFF               	movlw	255
 10215  003360  0100               	movlb	0	; () banked
 10216  003362  17A4               	andwf	___ftmul@f2& (0+255),f,b
 10217  003364  0EFF               	movlw	255
 10218  003366  0100               	movlb	0	; () banked
 10219  003368  17A5               	andwf	(___ftmul@f2+1)& (0+255),f,b
 10220  00336A  0E00               	movlw	0
 10221  00336C  0100               	movlb	0	; () banked
 10222  00336E  17A6               	andwf	(___ftmul@f2+2)& (0+255),f,b
 10223                           
 10224                           ; BSR set to: 0
 10225  003370  0E00               	movlw	0
 10226  003372  0100               	movlb	0	; () banked
 10227  003374  6FAB               	movwf	___ftmul@f3_as_product& (0+255),b
 10228  003376  0E00               	movlw	0
 10229  003378  0100               	movlb	0	; () banked
 10230  00337A  6FAC               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 10231  00337C  0E00               	movlw	0
 10232  00337E  0100               	movlb	0	; () banked
 10233  003380  6FAD               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 10234                           
 10235                           ; BSR set to: 0
 10236  003382  0E07               	movlw	7
 10237  003384  0100               	movlb	0	; () banked
 10238  003386  6FAE               	movwf	___ftmul@cntr& (0+255),b
 10239  003388                     l4524:
 10240                           
 10241                           ; BSR set to: 0
 10242  003388  0100               	movlb	0	; () banked
 10243  00338A  A1A1               	btfss	___ftmul@f1& (0+255),0,b
 10244  00338C  D00C               	goto	l4528
 10245                           
 10246                           ; BSR set to: 0
 10247  00338E  0100               	movlb	0	; () banked
 10248  003390  51A4               	movf	___ftmul@f2& (0+255),w,b
 10249  003392  0100               	movlb	0	; () banked
 10250  003394  27AB               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10251  003396  0100               	movlb	0	; () banked
 10252  003398  51A5               	movf	(___ftmul@f2+1)& (0+255),w,b
 10253  00339A  0100               	movlb	0	; () banked
 10254  00339C  23AC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10255  00339E  0100               	movlb	0	; () banked
 10256  0033A0  51A6               	movf	(___ftmul@f2+2)& (0+255),w,b
 10257  0033A2  0100               	movlb	0	; () banked
 10258  0033A4  23AD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10259  0033A6                     l4528:
 10260                           
 10261                           ; BSR set to: 0
 10262  0033A6  0100               	movlb	0	; () banked
 10263  0033A8  90D8               	bcf	status,0,c
 10264  0033AA  33A3               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10265  0033AC  33A2               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10266  0033AE  33A1               	rrcf	___ftmul@f1& (0+255),f,b
 10267  0033B0  0100               	movlb	0	; () banked
 10268  0033B2  90D8               	bcf	status,0,c
 10269  0033B4  37A4               	rlcf	___ftmul@f2& (0+255),f,b
 10270  0033B6  37A5               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 10271  0033B8  37A6               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 10272                           
 10273                           ; BSR set to: 0
 10274  0033BA  0100               	movlb	0	; () banked
 10275  0033BC  2FAE               	decfsz	___ftmul@cntr& (0+255),f,b
 10276  0033BE  D7E4               	goto	l4524
 10277                           
 10278                           ; BSR set to: 0
 10279                           
 10280                           ; BSR set to: 0
 10281  0033C0  0E09               	movlw	9
 10282  0033C2  0100               	movlb	0	; () banked
 10283  0033C4  6FAE               	movwf	___ftmul@cntr& (0+255),b
 10284  0033C6                     l4534:
 10285                           
 10286                           ; BSR set to: 0
 10287  0033C6  0100               	movlb	0	; () banked
 10288  0033C8  A1A1               	btfss	___ftmul@f1& (0+255),0,b
 10289  0033CA  D00C               	goto	l4538
 10290                           
 10291                           ; BSR set to: 0
 10292  0033CC  0100               	movlb	0	; () banked
 10293  0033CE  51A4               	movf	___ftmul@f2& (0+255),w,b
 10294  0033D0  0100               	movlb	0	; () banked
 10295  0033D2  27AB               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10296  0033D4  0100               	movlb	0	; () banked
 10297  0033D6  51A5               	movf	(___ftmul@f2+1)& (0+255),w,b
 10298  0033D8  0100               	movlb	0	; () banked
 10299  0033DA  23AC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10300  0033DC  0100               	movlb	0	; () banked
 10301  0033DE  51A6               	movf	(___ftmul@f2+2)& (0+255),w,b
 10302  0033E0  0100               	movlb	0	; () banked
 10303  0033E2  23AD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10304  0033E4                     l4538:
 10305                           
 10306                           ; BSR set to: 0
 10307  0033E4  0100               	movlb	0	; () banked
 10308  0033E6  90D8               	bcf	status,0,c
 10309  0033E8  33A3               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10310  0033EA  33A2               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10311  0033EC  33A1               	rrcf	___ftmul@f1& (0+255),f,b
 10312  0033EE  0100               	movlb	0	; () banked
 10313  0033F0  90D8               	bcf	status,0,c
 10314  0033F2  33AD               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10315  0033F4  33AC               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10316  0033F6  33AB               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10317                           
 10318                           ; BSR set to: 0
 10319  0033F8  0100               	movlb	0	; () banked
 10320  0033FA  2FAE               	decfsz	___ftmul@cntr& (0+255),f,b
 10321  0033FC  D7E4               	goto	l4534
 10322                           
 10323                           ; BSR set to: 0
 10324                           
 10325                           ; BSR set to: 0
 10326  0033FE  C0AB  F080         	movff	___ftmul@f3_as_product,___ftpack@arg
 10327  003402  C0AC  F081         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10328  003406  C0AD  F082         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10329  00340A  C0AA  F083         	movff	___ftmul@exp,___ftpack@exp
 10330  00340E  C0AF  F084         	movff	___ftmul@sign,___ftpack@sign
 10331  003412  ECAC  F01D         	call	___ftpack	;wreg free
 10332  003416  C080  F0A1         	movff	?___ftpack,?___ftmul
 10333  00341A  C081  F0A2         	movff	?___ftpack+1,?___ftmul+1
 10334  00341E  C082  F0A3         	movff	?___ftpack+2,?___ftmul+2
 10335  003422  0012               	return	
 10336  003424                     __end_of___ftmul:
 10337                           	opt stack 0
 10338                           tblptru	equ	0xFF8
 10339                           tblptrh	equ	0xFF7
 10340                           tblptrl	equ	0xFF6
 10341                           tablat	equ	0xFF5
 10342                           prodh	equ	0xFF4
 10343                           prodl	equ	0xFF3
 10344                           intcon	equ	0xFF2
 10345                           intcon3	equ	0xFF0
 10346                           postinc0	equ	0xFEE
 10347                           wreg	equ	0xFE8
 10348                           postdec1	equ	0xFE5
 10349                           fsr1l	equ	0xFE1
 10350                           indf2	equ	0xFDF
 10351                           postinc2	equ	0xFDE
 10352                           postdec2	equ	0xFDD
 10353                           fsr2h	equ	0xFDA
 10354                           fsr2l	equ	0xFD9
 10355                           status	equ	0xFD8
 10356                           
 10357 ;; *************** function ___ftdiv *****************
 10358 ;; Defined at:
 10359 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 10360 ;; Parameters:    Size  Location     Type
 10361 ;;  f1              3   18[BANK0 ] float 
 10362 ;;  f2              3   21[BANK0 ] float 
 10363 ;; Auto vars:     Size  Location     Type
 10364 ;;  f3              3   28[BANK0 ] float 
 10365 ;;  sign            1   32[BANK0 ] unsigned char 
 10366 ;;  exp             1   31[BANK0 ] unsigned char 
 10367 ;;  cntr            1   27[BANK0 ] unsigned char 
 10368 ;; Return value:  Size  Location     Type
 10369 ;;                  3   18[BANK0 ] float 
 10370 ;; Registers used:
 10371 ;;		wreg, status,2, status,0, cstack
 10372 ;; Tracked objects:
 10373 ;;		On entry : 0/0
 10374 ;;		On exit  : 0/0
 10375 ;;		Unchanged: 0/0
 10376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10377 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10378 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10379 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10380 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10381 ;;Total ram usage:       15 bytes
 10382 ;; Hardware stack levels used:    1
 10383 ;; Hardware stack levels required when called:    7
 10384 ;; This function calls:
 10385 ;;		___ftpack
 10386 ;; This function is called by:
 10387 ;;		_sortBattery
 10388 ;;		_angleToPulse
 10389 ;; This function uses a non-reentrant model
 10390 ;;
 10391                           
 10392                           	psect	text33
 10393  003424                     __ptext33:
 10394                           	opt stack 0
 10395  003424                     ___ftdiv:
 10396                           	opt stack 20
 10397                           
 10398                           ;incstack = 0
 10399  003424  C094  F098         	movff	___ftdiv@f1+2,??___ftdiv
 10400  003428  0100               	movlb	0	; () banked
 10401  00342A  6B99               	clrf	(??___ftdiv+1)& (0+255),b
 10402  00342C  6B9A               	clrf	(??___ftdiv+2)& (0+255),b
 10403  00342E  0100               	movlb	0	; () banked
 10404  003430  3593               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 10405  003432  0100               	movlb	0	; () banked
 10406  003434  3798               	rlcf	??___ftdiv& (0+255),f,b
 10407  003436  E301               	bnc	u4741
 10408  003438  8199               	bsf	(??___ftdiv+1)& (0+255),0,b
 10409  00343A                     u4741:
 10410  00343A  0100               	movlb	0	; () banked
 10411  00343C  5198               	movf	??___ftdiv& (0+255),w,b
 10412  00343E  0100               	movlb	0	; () banked
 10413  003440  6F9F               	movwf	___ftdiv@exp& (0+255),b
 10414  003442  0100               	movlb	0	; () banked
 10415  003444  519F               	movf	___ftdiv@exp& (0+255),w,b
 10416  003446  A4D8               	btfss	status,2,c
 10417  003448  D00A               	goto	l4862
 10418                           
 10419                           ; BSR set to: 0
 10420  00344A  0E00               	movlw	0
 10421  00344C  0100               	movlb	0	; () banked
 10422  00344E  6F92               	movwf	?___ftdiv& (0+255),b
 10423  003450  0E00               	movlw	0
 10424  003452  0100               	movlb	0	; () banked
 10425  003454  6F93               	movwf	(?___ftdiv+1)& (0+255),b
 10426  003456  0E00               	movlw	0
 10427  003458  0100               	movlb	0	; () banked
 10428  00345A  6F94               	movwf	(?___ftdiv+2)& (0+255),b
 10429                           
 10430                           ; BSR set to: 0
 10431  00345C  0012               	return	
 10432  00345E                     l4862:
 10433                           
 10434                           ; BSR set to: 0
 10435  00345E  C097  F098         	movff	___ftdiv@f2+2,??___ftdiv
 10436  003462  0100               	movlb	0	; () banked
 10437  003464  6B99               	clrf	(??___ftdiv+1)& (0+255),b
 10438  003466  6B9A               	clrf	(??___ftdiv+2)& (0+255),b
 10439  003468  0100               	movlb	0	; () banked
 10440  00346A  3596               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 10441  00346C  0100               	movlb	0	; () banked
 10442  00346E  3798               	rlcf	??___ftdiv& (0+255),f,b
 10443  003470  E301               	bnc	u4761
 10444  003472  8199               	bsf	(??___ftdiv+1)& (0+255),0,b
 10445  003474                     u4761:
 10446  003474  0100               	movlb	0	; () banked
 10447  003476  5198               	movf	??___ftdiv& (0+255),w,b
 10448  003478  0100               	movlb	0	; () banked
 10449  00347A  6FA0               	movwf	___ftdiv@sign& (0+255),b
 10450  00347C  0100               	movlb	0	; () banked
 10451  00347E  51A0               	movf	___ftdiv@sign& (0+255),w,b
 10452  003480  A4D8               	btfss	status,2,c
 10453  003482  D00A               	goto	l4868
 10454                           
 10455                           ; BSR set to: 0
 10456  003484  0E00               	movlw	0
 10457  003486  0100               	movlb	0	; () banked
 10458  003488  6F92               	movwf	?___ftdiv& (0+255),b
 10459  00348A  0E00               	movlw	0
 10460  00348C  0100               	movlb	0	; () banked
 10461  00348E  6F93               	movwf	(?___ftdiv+1)& (0+255),b
 10462  003490  0E00               	movlw	0
 10463  003492  0100               	movlb	0	; () banked
 10464  003494  6F94               	movwf	(?___ftdiv+2)& (0+255),b
 10465                           
 10466                           ; BSR set to: 0
 10467  003496  0012               	return	
 10468  003498                     l4868:
 10469                           
 10470                           ; BSR set to: 0
 10471  003498  0E00               	movlw	0
 10472  00349A  0100               	movlb	0	; () banked
 10473  00349C  6F9C               	movwf	___ftdiv@f3& (0+255),b
 10474  00349E  0E00               	movlw	0
 10475  0034A0  0100               	movlb	0	; () banked
 10476  0034A2  6F9D               	movwf	(___ftdiv@f3+1)& (0+255),b
 10477  0034A4  0E00               	movlw	0
 10478  0034A6  0100               	movlb	0	; () banked
 10479  0034A8  6F9E               	movwf	(___ftdiv@f3+2)& (0+255),b
 10480                           
 10481                           ; BSR set to: 0
 10482  0034AA  0100               	movlb	0	; () banked
 10483  0034AC  51A0               	movf	___ftdiv@sign& (0+255),w,b
 10484  0034AE  0F89               	addlw	137
 10485  0034B0  0100               	movlb	0	; () banked
 10486  0034B2  5F9F               	subwf	___ftdiv@exp& (0+255),f,b
 10487                           
 10488                           ; BSR set to: 0
 10489  0034B4  C094  F0A0         	movff	___ftdiv@f1+2,___ftdiv@sign
 10490                           
 10491                           ; BSR set to: 0
 10492  0034B8  0100               	movlb	0	; () banked
 10493  0034BA  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10494  0034BC  0100               	movlb	0	; () banked
 10495  0034BE  1BA0               	xorwf	___ftdiv@sign& (0+255),f,b
 10496                           
 10497                           ; BSR set to: 0
 10498  0034C0  0E80               	movlw	128
 10499  0034C2  0100               	movlb	0	; () banked
 10500  0034C4  17A0               	andwf	___ftdiv@sign& (0+255),f,b
 10501                           
 10502                           ; BSR set to: 0
 10503  0034C6  0100               	movlb	0	; () banked
 10504  0034C8  8F93               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 10505                           
 10506                           ; BSR set to: 0
 10507  0034CA  0EFF               	movlw	255
 10508  0034CC  0100               	movlb	0	; () banked
 10509  0034CE  1792               	andwf	___ftdiv@f1& (0+255),f,b
 10510  0034D0  0EFF               	movlw	255
 10511  0034D2  0100               	movlb	0	; () banked
 10512  0034D4  1793               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 10513  0034D6  0E00               	movlw	0
 10514  0034D8  0100               	movlb	0	; () banked
 10515  0034DA  1794               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 10516                           
 10517                           ; BSR set to: 0
 10518  0034DC  0100               	movlb	0	; () banked
 10519  0034DE  8F96               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 10520                           
 10521                           ; BSR set to: 0
 10522  0034E0  0EFF               	movlw	255
 10523  0034E2  0100               	movlb	0	; () banked
 10524  0034E4  1795               	andwf	___ftdiv@f2& (0+255),f,b
 10525  0034E6  0EFF               	movlw	255
 10526  0034E8  0100               	movlb	0	; () banked
 10527  0034EA  1796               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 10528  0034EC  0E00               	movlw	0
 10529  0034EE  0100               	movlb	0	; () banked
 10530  0034F0  1797               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 10531                           
 10532                           ; BSR set to: 0
 10533  0034F2  0E18               	movlw	24
 10534  0034F4  0100               	movlb	0	; () banked
 10535  0034F6  6F9B               	movwf	___ftdiv@cntr& (0+255),b
 10536  0034F8                     l4888:
 10537                           
 10538                           ; BSR set to: 0
 10539  0034F8  0100               	movlb	0	; () banked
 10540  0034FA  90D8               	bcf	status,0,c
 10541  0034FC  379C               	rlcf	___ftdiv@f3& (0+255),f,b
 10542  0034FE  379D               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 10543  003500  379E               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 10544                           
 10545                           ; BSR set to: 0
 10546  003502  0100               	movlb	0	; () banked
 10547  003504  5195               	movf	___ftdiv@f2& (0+255),w,b
 10548  003506  0100               	movlb	0	; () banked
 10549  003508  5D92               	subwf	___ftdiv@f1& (0+255),w,b
 10550  00350A  0100               	movlb	0	; () banked
 10551  00350C  5196               	movf	(___ftdiv@f2+1)& (0+255),w,b
 10552  00350E  0100               	movlb	0	; () banked
 10553  003510  5993               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 10554  003512  0100               	movlb	0	; () banked
 10555  003514  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10556  003516  0100               	movlb	0	; () banked
 10557  003518  5994               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 10558  00351A  A0D8               	btfss	status,0,c
 10559  00351C  D00E               	goto	l1081
 10560                           
 10561                           ; BSR set to: 0
 10562  00351E  0100               	movlb	0	; () banked
 10563  003520  5195               	movf	___ftdiv@f2& (0+255),w,b
 10564  003522  0100               	movlb	0	; () banked
 10565  003524  5F92               	subwf	___ftdiv@f1& (0+255),f,b
 10566  003526  0100               	movlb	0	; () banked
 10567  003528  5196               	movf	(___ftdiv@f2+1)& (0+255),w,b
 10568  00352A  0100               	movlb	0	; () banked
 10569  00352C  5B93               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 10570  00352E  0100               	movlb	0	; () banked
 10571  003530  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10572  003532  0100               	movlb	0	; () banked
 10573  003534  5B94               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 10574                           
 10575                           ; BSR set to: 0
 10576  003536  0100               	movlb	0	; () banked
 10577  003538  819C               	bsf	___ftdiv@f3& (0+255),0,b
 10578  00353A                     l1081:
 10579                           
 10580                           ; BSR set to: 0
 10581  00353A  0100               	movlb	0	; () banked
 10582  00353C  90D8               	bcf	status,0,c
 10583  00353E  3792               	rlcf	___ftdiv@f1& (0+255),f,b
 10584  003540  3793               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 10585  003542  3794               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 10586                           
 10587                           ; BSR set to: 0
 10588  003544  0100               	movlb	0	; () banked
 10589  003546  2F9B               	decfsz	___ftdiv@cntr& (0+255),f,b
 10590  003548  D7D7               	goto	l4888
 10591                           
 10592                           ; BSR set to: 0
 10593                           
 10594                           ; BSR set to: 0
 10595  00354A  C09C  F080         	movff	___ftdiv@f3,___ftpack@arg
 10596  00354E  C09D  F081         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10597  003552  C09E  F082         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10598  003556  C09F  F083         	movff	___ftdiv@exp,___ftpack@exp
 10599  00355A  C0A0  F084         	movff	___ftdiv@sign,___ftpack@sign
 10600  00355E  ECAC  F01D         	call	___ftpack	;wreg free
 10601  003562  C080  F092         	movff	?___ftpack,?___ftdiv
 10602  003566  C081  F093         	movff	?___ftpack+1,?___ftdiv+1
 10603  00356A  C082  F094         	movff	?___ftpack+2,?___ftdiv+2
 10604  00356E  0012               	return	
 10605  003570                     __end_of___ftdiv:
 10606                           	opt stack 0
 10607                           tblptru	equ	0xFF8
 10608                           tblptrh	equ	0xFF7
 10609                           tblptrl	equ	0xFF6
 10610                           tablat	equ	0xFF5
 10611                           prodh	equ	0xFF4
 10612                           prodl	equ	0xFF3
 10613                           intcon	equ	0xFF2
 10614                           intcon3	equ	0xFF0
 10615                           postinc0	equ	0xFEE
 10616                           wreg	equ	0xFE8
 10617                           postdec1	equ	0xFE5
 10618                           fsr1l	equ	0xFE1
 10619                           indf2	equ	0xFDF
 10620                           postinc2	equ	0xFDE
 10621                           postdec2	equ	0xFDD
 10622                           fsr2h	equ	0xFDA
 10623                           fsr2l	equ	0xFD9
 10624                           status	equ	0xFD8
 10625                           
 10626 ;; *************** function ___ftadd *****************
 10627 ;; Defined at:
 10628 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 10629 ;; Parameters:    Size  Location     Type
 10630 ;;  f1              3   58[BANK0 ] float 
 10631 ;;  f2              3   61[BANK0 ] float 
 10632 ;; Auto vars:     Size  Location     Type
 10633 ;;  exp1            1   69[BANK0 ] unsigned char 
 10634 ;;  exp2            1   68[BANK0 ] unsigned char 
 10635 ;;  sign            1   67[BANK0 ] unsigned char 
 10636 ;; Return value:  Size  Location     Type
 10637 ;;                  3   58[BANK0 ] float 
 10638 ;; Registers used:
 10639 ;;		wreg, status,2, status,0, cstack
 10640 ;; Tracked objects:
 10641 ;;		On entry : 0/0
 10642 ;;		On exit  : 0/0
 10643 ;;		Unchanged: 0/0
 10644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10645 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10646 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10647 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10648 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10649 ;;Total ram usage:       12 bytes
 10650 ;; Hardware stack levels used:    1
 10651 ;; Hardware stack levels required when called:    7
 10652 ;; This function calls:
 10653 ;;		___ftpack
 10654 ;; This function is called by:
 10655 ;;		_angleToPulse
 10656 ;;		_printf
 10657 ;;		___ftsub
 10658 ;; This function uses a non-reentrant model
 10659 ;;
 10660                           
 10661                           	psect	text34
 10662  002638                     __ptext34:
 10663                           	opt stack 0
 10664  002638                     ___ftadd:
 10665                           	opt stack 20
 10666                           
 10667                           ;incstack = 0
 10668  002638  C0BC  F0C0         	movff	___ftadd@f1+2,??___ftadd
 10669  00263C  0100               	movlb	0	; () banked
 10670  00263E  6BC1               	clrf	(??___ftadd+1)& (0+255),b
 10671  002640  6BC2               	clrf	(??___ftadd+2)& (0+255),b
 10672  002642  0100               	movlb	0	; () banked
 10673  002644  35BB               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10674  002646  0100               	movlb	0	; () banked
 10675  002648  37C0               	rlcf	??___ftadd& (0+255),f,b
 10676  00264A  E301               	bnc	u4071
 10677  00264C  81C1               	bsf	(??___ftadd+1)& (0+255),0,b
 10678  00264E                     u4071:
 10679  00264E  0100               	movlb	0	; () banked
 10680  002650  51C0               	movf	??___ftadd& (0+255),w,b
 10681  002652  0100               	movlb	0	; () banked
 10682  002654  6FC5               	movwf	___ftadd@exp1& (0+255),b
 10683  002656  C0BF  F0C0         	movff	___ftadd@f2+2,??___ftadd
 10684  00265A  0100               	movlb	0	; () banked
 10685  00265C  6BC1               	clrf	(??___ftadd+1)& (0+255),b
 10686  00265E  6BC2               	clrf	(??___ftadd+2)& (0+255),b
 10687  002660  0100               	movlb	0	; () banked
 10688  002662  35BE               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 10689  002664  0100               	movlb	0	; () banked
 10690  002666  37C0               	rlcf	??___ftadd& (0+255),f,b
 10691  002668  E301               	bnc	u4081
 10692  00266A  81C1               	bsf	(??___ftadd+1)& (0+255),0,b
 10693  00266C                     u4081:
 10694  00266C  0100               	movlb	0	; () banked
 10695  00266E  51C0               	movf	??___ftadd& (0+255),w,b
 10696  002670  0100               	movlb	0	; () banked
 10697  002672  6FC4               	movwf	___ftadd@exp2& (0+255),b
 10698                           
 10699                           ; BSR set to: 0
 10700  002674  0100               	movlb	0	; () banked
 10701  002676  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10702  002678  0100               	movlb	0	; () banked
 10703  00267A  B4D8               	btfsc	status,2,c
 10704  00267C  D011               	goto	l1046
 10705                           
 10706                           ; BSR set to: 0
 10707  00267E  0100               	movlb	0	; () banked
 10708  002680  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10709  002682  0100               	movlb	0	; () banked
 10710  002684  5DC5               	subwf	___ftadd@exp1& (0+255),w,b
 10711  002686  B0D8               	btfsc	status,0,c
 10712  002688  D012               	goto	l4436
 10713                           
 10714                           ; BSR set to: 0
 10715  00268A  0100               	movlb	0	; () banked
 10716  00268C  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10717  00268E  0800               	sublw	0
 10718  002690  0100               	movlb	0	; () banked
 10719  002692  25C4               	addwf	___ftadd@exp2& (0+255),w,b
 10720  002694  0100               	movlb	0	; () banked
 10721  002696  6FC0               	movwf	??___ftadd& (0+255),b
 10722  002698  0E18               	movlw	24
 10723  00269A  0100               	movlb	0	; () banked
 10724  00269C  65C0               	cpfsgt	??___ftadd& (0+255),b
 10725  00269E  D007               	goto	l4436
 10726  0026A0                     l1046:
 10727                           
 10728                           ; BSR set to: 0
 10729  0026A0  C0BD  F0BA         	movff	___ftadd@f2,?___ftadd
 10730  0026A4  C0BE  F0BB         	movff	___ftadd@f2+1,?___ftadd+1
 10731  0026A8  C0BF  F0BC         	movff	___ftadd@f2+2,?___ftadd+2
 10732  0026AC  0012               	return	
 10733  0026AE                     l4436:
 10734                           
 10735                           ; BSR set to: 0
 10736  0026AE  0100               	movlb	0	; () banked
 10737  0026B0  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10738  0026B2  0100               	movlb	0	; () banked
 10739  0026B4  B4D8               	btfsc	status,2,c
 10740  0026B6  D011               	goto	l1050
 10741                           
 10742                           ; BSR set to: 0
 10743  0026B8  0100               	movlb	0	; () banked
 10744  0026BA  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10745  0026BC  0100               	movlb	0	; () banked
 10746  0026BE  5DC4               	subwf	___ftadd@exp2& (0+255),w,b
 10747  0026C0  B0D8               	btfsc	status,0,c
 10748  0026C2  D012               	goto	l4442
 10749                           
 10750                           ; BSR set to: 0
 10751  0026C4  0100               	movlb	0	; () banked
 10752  0026C6  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10753  0026C8  0800               	sublw	0
 10754  0026CA  0100               	movlb	0	; () banked
 10755  0026CC  25C5               	addwf	___ftadd@exp1& (0+255),w,b
 10756  0026CE  0100               	movlb	0	; () banked
 10757  0026D0  6FC0               	movwf	??___ftadd& (0+255),b
 10758  0026D2  0E18               	movlw	24
 10759  0026D4  0100               	movlb	0	; () banked
 10760  0026D6  65C0               	cpfsgt	??___ftadd& (0+255),b
 10761  0026D8  D007               	goto	l4442
 10762  0026DA                     l1050:
 10763                           
 10764                           ; BSR set to: 0
 10765  0026DA  C0BA  F0BA         	movff	___ftadd@f1,?___ftadd
 10766  0026DE  C0BB  F0BB         	movff	___ftadd@f1+1,?___ftadd+1
 10767  0026E2  C0BC  F0BC         	movff	___ftadd@f1+2,?___ftadd+2
 10768  0026E6  0012               	return	
 10769  0026E8                     l4442:
 10770                           
 10771                           ; BSR set to: 0
 10772  0026E8  0E06               	movlw	6
 10773  0026EA  0100               	movlb	0	; () banked
 10774  0026EC  6FC3               	movwf	___ftadd@sign& (0+255),b
 10775                           
 10776                           ; BSR set to: 0
 10777  0026EE  0100               	movlb	0	; () banked
 10778  0026F0  AFBC               	btfss	(___ftadd@f1+2)& (0+255),7,b
 10779  0026F2  D002               	goto	l4448
 10780                           
 10781                           ; BSR set to: 0
 10782  0026F4  0100               	movlb	0	; () banked
 10783  0026F6  8FC3               	bsf	___ftadd@sign& (0+255),7,b
 10784  0026F8                     l4448:
 10785                           
 10786                           ; BSR set to: 0
 10787  0026F8  0100               	movlb	0	; () banked
 10788  0026FA  AFBF               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10789  0026FC  D002               	goto	l1052
 10790                           
 10791                           ; BSR set to: 0
 10792  0026FE  0100               	movlb	0	; () banked
 10793  002700  8DC3               	bsf	___ftadd@sign& (0+255),6,b
 10794  002702                     l1052:
 10795                           
 10796                           ; BSR set to: 0
 10797  002702  0100               	movlb	0	; () banked
 10798  002704  8FBB               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10799                           
 10800                           ; BSR set to: 0
 10801  002706  0EFF               	movlw	255
 10802  002708  0100               	movlb	0	; () banked
 10803  00270A  17BA               	andwf	___ftadd@f1& (0+255),f,b
 10804  00270C  0EFF               	movlw	255
 10805  00270E  0100               	movlb	0	; () banked
 10806  002710  17BB               	andwf	(___ftadd@f1+1)& (0+255),f,b
 10807  002712  0E00               	movlw	0
 10808  002714  0100               	movlb	0	; () banked
 10809  002716  17BC               	andwf	(___ftadd@f1+2)& (0+255),f,b
 10810  002718  0100               	movlb	0	; () banked
 10811  00271A  8FBE               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10812                           
 10813                           ; BSR set to: 0
 10814  00271C  0EFF               	movlw	255
 10815  00271E  0100               	movlb	0	; () banked
 10816  002720  17BD               	andwf	___ftadd@f2& (0+255),f,b
 10817  002722  0EFF               	movlw	255
 10818  002724  0100               	movlb	0	; () banked
 10819  002726  17BE               	andwf	(___ftadd@f2+1)& (0+255),f,b
 10820  002728  0E00               	movlw	0
 10821  00272A  0100               	movlb	0	; () banked
 10822  00272C  17BF               	andwf	(___ftadd@f2+2)& (0+255),f,b
 10823                           
 10824                           ; BSR set to: 0
 10825  00272E  0100               	movlb	0	; () banked
 10826  002730  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10827  002732  0100               	movlb	0	; () banked
 10828  002734  5DC5               	subwf	___ftadd@exp1& (0+255),w,b
 10829  002736  B0D8               	btfsc	status,0,c
 10830  002738  D025               	goto	l4468
 10831  00273A                     l4458:
 10832                           
 10833                           ; BSR set to: 0
 10834  00273A  0100               	movlb	0	; () banked
 10835  00273C  90D8               	bcf	status,0,c
 10836  00273E  37BD               	rlcf	___ftadd@f2& (0+255),f,b
 10837  002740  37BE               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10838  002742  37BF               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10839  002744  0100               	movlb	0	; () banked
 10840  002746  07C4               	decf	___ftadd@exp2& (0+255),f,b
 10841                           
 10842                           ; BSR set to: 0
 10843  002748  0100               	movlb	0	; () banked
 10844  00274A  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10845  00274C  0100               	movlb	0	; () banked
 10846  00274E  19C4               	xorwf	___ftadd@exp2& (0+255),w,b
 10847  002750  B4D8               	btfsc	status,2,c
 10848  002752  D011               	goto	l4466
 10849                           
 10850                           ; BSR set to: 0
 10851  002754  0100               	movlb	0	; () banked
 10852  002756  07C3               	decf	___ftadd@sign& (0+255),f,b
 10853  002758  C0C3  F0C0         	movff	___ftadd@sign,??___ftadd
 10854  00275C  0E07               	movlw	7
 10855  00275E  0100               	movlb	0	; () banked
 10856  002760  17C0               	andwf	??___ftadd& (0+255),f,b
 10857  002762  B4D8               	btfsc	status,2,c
 10858  002764  D008               	goto	l4466
 10859  002766  D7E9               	goto	l4458
 10860  002768                     l4464:
 10861                           
 10862                           ; BSR set to: 0
 10863  002768  0100               	movlb	0	; () banked
 10864  00276A  90D8               	bcf	status,0,c
 10865  00276C  33BC               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10866  00276E  33BB               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10867  002770  33BA               	rrcf	___ftadd@f1& (0+255),f,b
 10868  002772  0100               	movlb	0	; () banked
 10869  002774  2BC5               	incf	___ftadd@exp1& (0+255),f,b
 10870  002776                     l4466:
 10871                           
 10872                           ; BSR set to: 0
 10873  002776  0100               	movlb	0	; () banked
 10874  002778  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10875  00277A  0100               	movlb	0	; () banked
 10876  00277C  19C5               	xorwf	___ftadd@exp1& (0+255),w,b
 10877  00277E  B4D8               	btfsc	status,2,c
 10878  002780  D02B               	goto	l1061
 10879  002782  D7F2               	goto	l4464
 10880  002784                     l4468:
 10881                           
 10882                           ; BSR set to: 0
 10883  002784  0100               	movlb	0	; () banked
 10884  002786  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10885  002788  0100               	movlb	0	; () banked
 10886  00278A  5DC4               	subwf	___ftadd@exp2& (0+255),w,b
 10887  00278C  B0D8               	btfsc	status,0,c
 10888  00278E  D024               	goto	l1061
 10889  002790                     l4470:
 10890                           
 10891                           ; BSR set to: 0
 10892  002790  0100               	movlb	0	; () banked
 10893  002792  90D8               	bcf	status,0,c
 10894  002794  37BA               	rlcf	___ftadd@f1& (0+255),f,b
 10895  002796  37BB               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10896  002798  37BC               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10897  00279A  0100               	movlb	0	; () banked
 10898  00279C  07C5               	decf	___ftadd@exp1& (0+255),f,b
 10899                           
 10900                           ; BSR set to: 0
 10901  00279E  0100               	movlb	0	; () banked
 10902  0027A0  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10903  0027A2  0100               	movlb	0	; () banked
 10904  0027A4  19C4               	xorwf	___ftadd@exp2& (0+255),w,b
 10905  0027A6  B4D8               	btfsc	status,2,c
 10906  0027A8  D011               	goto	l4478
 10907                           
 10908                           ; BSR set to: 0
 10909  0027AA  0100               	movlb	0	; () banked
 10910  0027AC  07C3               	decf	___ftadd@sign& (0+255),f,b
 10911  0027AE  C0C3  F0C0         	movff	___ftadd@sign,??___ftadd
 10912  0027B2  0E07               	movlw	7
 10913  0027B4  0100               	movlb	0	; () banked
 10914  0027B6  17C0               	andwf	??___ftadd& (0+255),f,b
 10915  0027B8  B4D8               	btfsc	status,2,c
 10916  0027BA  D008               	goto	l4478
 10917  0027BC  D7E9               	goto	l4470
 10918  0027BE                     l4476:
 10919                           
 10920                           ; BSR set to: 0
 10921  0027BE  0100               	movlb	0	; () banked
 10922  0027C0  90D8               	bcf	status,0,c
 10923  0027C2  33BF               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10924  0027C4  33BE               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10925  0027C6  33BD               	rrcf	___ftadd@f2& (0+255),f,b
 10926  0027C8  0100               	movlb	0	; () banked
 10927  0027CA  2BC4               	incf	___ftadd@exp2& (0+255),f,b
 10928  0027CC                     l4478:
 10929                           
 10930                           ; BSR set to: 0
 10931  0027CC  0100               	movlb	0	; () banked
 10932  0027CE  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10933  0027D0  0100               	movlb	0	; () banked
 10934  0027D2  19C5               	xorwf	___ftadd@exp1& (0+255),w,b
 10935  0027D4  A4D8               	btfss	status,2,c
 10936  0027D6  D7F3               	goto	l4476
 10937  0027D8                     l1061:
 10938                           
 10939                           ; BSR set to: 0
 10940  0027D8  0100               	movlb	0	; () banked
 10941  0027DA  AFC3               	btfss	___ftadd@sign& (0+255),7,b
 10942  0027DC  D012               	goto	l1070
 10943                           
 10944                           ; BSR set to: 0
 10945  0027DE  0EFF               	movlw	255
 10946  0027E0  0100               	movlb	0	; () banked
 10947  0027E2  1BBA               	xorwf	___ftadd@f1& (0+255),f,b
 10948  0027E4  0EFF               	movlw	255
 10949  0027E6  0100               	movlb	0	; () banked
 10950  0027E8  1BBB               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 10951  0027EA  0EFF               	movlw	255
 10952  0027EC  0100               	movlb	0	; () banked
 10953  0027EE  1BBC               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 10954  0027F0  0E01               	movlw	1
 10955  0027F2  0100               	movlb	0	; () banked
 10956  0027F4  27BA               	addwf	___ftadd@f1& (0+255),f,b
 10957  0027F6  0E00               	movlw	0
 10958  0027F8  0100               	movlb	0	; () banked
 10959  0027FA  23BB               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10960  0027FC  0E00               	movlw	0
 10961  0027FE  0100               	movlb	0	; () banked
 10962  002800  23BC               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10963  002802                     l1070:
 10964                           
 10965                           ; BSR set to: 0
 10966  002802  0100               	movlb	0	; () banked
 10967  002804  ADC3               	btfss	___ftadd@sign& (0+255),6,b
 10968  002806  D012               	goto	l4484
 10969                           
 10970                           ; BSR set to: 0
 10971  002808  0EFF               	movlw	255
 10972  00280A  0100               	movlb	0	; () banked
 10973  00280C  1BBD               	xorwf	___ftadd@f2& (0+255),f,b
 10974  00280E  0EFF               	movlw	255
 10975  002810  0100               	movlb	0	; () banked
 10976  002812  1BBE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10977  002814  0EFF               	movlw	255
 10978  002816  0100               	movlb	0	; () banked
 10979  002818  1BBF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10980  00281A  0E01               	movlw	1
 10981  00281C  0100               	movlb	0	; () banked
 10982  00281E  27BD               	addwf	___ftadd@f2& (0+255),f,b
 10983  002820  0E00               	movlw	0
 10984  002822  0100               	movlb	0	; () banked
 10985  002824  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10986  002826  0E00               	movlw	0
 10987  002828  0100               	movlb	0	; () banked
 10988  00282A  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10989  00282C                     l4484:
 10990                           
 10991                           ; BSR set to: 0
 10992  00282C  0E00               	movlw	0
 10993  00282E  0100               	movlb	0	; () banked
 10994  002830  6FC3               	movwf	___ftadd@sign& (0+255),b
 10995                           
 10996                           ; BSR set to: 0
 10997  002832  0100               	movlb	0	; () banked
 10998  002834  51BA               	movf	___ftadd@f1& (0+255),w,b
 10999  002836  0100               	movlb	0	; () banked
 11000  002838  27BD               	addwf	___ftadd@f2& (0+255),f,b
 11001  00283A  0100               	movlb	0	; () banked
 11002  00283C  51BB               	movf	(___ftadd@f1+1)& (0+255),w,b
 11003  00283E  0100               	movlb	0	; () banked
 11004  002840  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11005  002842  0100               	movlb	0	; () banked
 11006  002844  51BC               	movf	(___ftadd@f1+2)& (0+255),w,b
 11007  002846  0100               	movlb	0	; () banked
 11008  002848  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11009                           
 11010                           ; BSR set to: 0
 11011  00284A  0100               	movlb	0	; () banked
 11012  00284C  AFBF               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11013  00284E  D015               	goto	l4494
 11014                           
 11015                           ; BSR set to: 0
 11016  002850  0EFF               	movlw	255
 11017  002852  0100               	movlb	0	; () banked
 11018  002854  1BBD               	xorwf	___ftadd@f2& (0+255),f,b
 11019  002856  0EFF               	movlw	255
 11020  002858  0100               	movlb	0	; () banked
 11021  00285A  1BBE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11022  00285C  0EFF               	movlw	255
 11023  00285E  0100               	movlb	0	; () banked
 11024  002860  1BBF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11025  002862  0E01               	movlw	1
 11026  002864  0100               	movlb	0	; () banked
 11027  002866  27BD               	addwf	___ftadd@f2& (0+255),f,b
 11028  002868  0E00               	movlw	0
 11029  00286A  0100               	movlb	0	; () banked
 11030  00286C  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11031  00286E  0E00               	movlw	0
 11032  002870  0100               	movlb	0	; () banked
 11033  002872  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11034                           
 11035                           ; BSR set to: 0
 11036  002874  0E01               	movlw	1
 11037  002876  0100               	movlb	0	; () banked
 11038  002878  6FC3               	movwf	___ftadd@sign& (0+255),b
 11039  00287A                     l4494:
 11040                           
 11041                           ; BSR set to: 0
 11042  00287A  C0BD  F080         	movff	___ftadd@f2,___ftpack@arg
 11043  00287E  C0BE  F081         	movff	___ftadd@f2+1,___ftpack@arg+1
 11044  002882  C0BF  F082         	movff	___ftadd@f2+2,___ftpack@arg+2
 11045  002886  C0C5  F083         	movff	___ftadd@exp1,___ftpack@exp
 11046  00288A  C0C3  F084         	movff	___ftadd@sign,___ftpack@sign
 11047  00288E  ECAC  F01D         	call	___ftpack	;wreg free
 11048  002892  C080  F0BA         	movff	?___ftpack,?___ftadd
 11049  002896  C081  F0BB         	movff	?___ftpack+1,?___ftadd+1
 11050  00289A  C082  F0BC         	movff	?___ftpack+2,?___ftadd+2
 11051  00289E  0012               	return	
 11052  0028A0                     __end_of___ftadd:
 11053                           	opt stack 0
 11054                           tblptru	equ	0xFF8
 11055                           tblptrh	equ	0xFF7
 11056                           tblptrl	equ	0xFF6
 11057                           tablat	equ	0xFF5
 11058                           prodh	equ	0xFF4
 11059                           prodl	equ	0xFF3
 11060                           intcon	equ	0xFF2
 11061                           intcon3	equ	0xFF0
 11062                           postinc0	equ	0xFEE
 11063                           wreg	equ	0xFE8
 11064                           postdec1	equ	0xFE5
 11065                           fsr1l	equ	0xFE1
 11066                           indf2	equ	0xFDF
 11067                           postinc2	equ	0xFDE
 11068                           postdec2	equ	0xFDD
 11069                           fsr2h	equ	0xFDA
 11070                           fsr2l	equ	0xFD9
 11071                           status	equ	0xFD8
 11072                           
 11073 ;; *************** function ___awtoft *****************
 11074 ;; Defined at:
 11075 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 11076 ;; Parameters:    Size  Location     Type
 11077 ;;  c               2    8[BANK0 ] int 
 11078 ;; Auto vars:     Size  Location     Type
 11079 ;;  sign            1   11[BANK0 ] unsigned char 
 11080 ;; Return value:  Size  Location     Type
 11081 ;;                  3    8[BANK0 ] float 
 11082 ;; Registers used:
 11083 ;;		wreg, status,2, status,0, cstack
 11084 ;; Tracked objects:
 11085 ;;		On entry : 0/0
 11086 ;;		On exit  : 0/0
 11087 ;;		Unchanged: 0/0
 11088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11089 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11090 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11092 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11093 ;;Total ram usage:        4 bytes
 11094 ;; Hardware stack levels used:    1
 11095 ;; Hardware stack levels required when called:    7
 11096 ;; This function calls:
 11097 ;;		___ftpack
 11098 ;; This function is called by:
 11099 ;;		_angleToPulse
 11100 ;;		_testFrequency
 11101 ;; This function uses a non-reentrant model
 11102 ;;
 11103                           
 11104                           	psect	text35
 11105  004EE4                     __ptext35:
 11106                           	opt stack 0
 11107  004EE4                     ___awtoft:
 11108                           	opt stack 20
 11109                           
 11110                           ;incstack = 0
 11111  004EE4  0E00               	movlw	0
 11112  004EE6  0100               	movlb	0	; () banked
 11113  004EE8  6F8B               	movwf	___awtoft@sign& (0+255),b
 11114                           
 11115                           ; BSR set to: 0
 11116  004EEA  0100               	movlb	0	; () banked
 11117  004EEC  AF89               	btfss	(___awtoft@c+1)& (0+255),7,b
 11118  004EEE  D008               	goto	l4918
 11119                           
 11120                           ; BSR set to: 0
 11121  004EF0  0100               	movlb	0	; () banked
 11122  004EF2  6D88               	negf	___awtoft@c& (0+255),b
 11123  004EF4  1F89               	comf	(___awtoft@c+1)& (0+255),f,b
 11124  004EF6  B0D8               	btfsc	status,0,c
 11125  004EF8  2B89               	incf	(___awtoft@c+1)& (0+255),f,b
 11126                           
 11127                           ; BSR set to: 0
 11128  004EFA  0E01               	movlw	1
 11129  004EFC  0100               	movlb	0	; () banked
 11130  004EFE  6F8B               	movwf	___awtoft@sign& (0+255),b
 11131  004F00                     l4918:
 11132                           
 11133                           ; BSR set to: 0
 11134  004F00  C088  F080         	movff	___awtoft@c,___ftpack@arg
 11135  004F04  C089  F081         	movff	___awtoft@c+1,___ftpack@arg+1
 11136  004F08  0100               	movlb	0	; () banked
 11137  004F0A  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
 11138  004F0C  0E8E               	movlw	142
 11139  004F0E  0100               	movlb	0	; () banked
 11140  004F10  6F83               	movwf	___ftpack@exp& (0+255),b
 11141  004F12  C08B  F084         	movff	___awtoft@sign,___ftpack@sign
 11142  004F16  ECAC  F01D         	call	___ftpack	;wreg free
 11143  004F1A  C080  F088         	movff	?___ftpack,?___awtoft
 11144  004F1E  C081  F089         	movff	?___ftpack+1,?___awtoft+1
 11145  004F22  C082  F08A         	movff	?___ftpack+2,?___awtoft+2
 11146  004F26  0012               	return	
 11147  004F28                     __end_of___awtoft:
 11148                           	opt stack 0
 11149                           tblptru	equ	0xFF8
 11150                           tblptrh	equ	0xFF7
 11151                           tblptrl	equ	0xFF6
 11152                           tablat	equ	0xFF5
 11153                           prodh	equ	0xFF4
 11154                           prodl	equ	0xFF3
 11155                           intcon	equ	0xFF2
 11156                           intcon3	equ	0xFF0
 11157                           postinc0	equ	0xFEE
 11158                           wreg	equ	0xFE8
 11159                           postdec1	equ	0xFE5
 11160                           fsr1l	equ	0xFE1
 11161                           indf2	equ	0xFDF
 11162                           postinc2	equ	0xFDE
 11163                           postdec2	equ	0xFDD
 11164                           fsr2h	equ	0xFDA
 11165                           fsr2l	equ	0xFD9
 11166                           status	equ	0xFD8
 11167                           
 11168 ;; *************** function ___altoft *****************
 11169 ;; Defined at:
 11170 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 11171 ;; Parameters:    Size  Location     Type
 11172 ;;  c               4    8[BANK0 ] long 
 11173 ;; Auto vars:     Size  Location     Type
 11174 ;;  sign            1   17[BANK0 ] unsigned char 
 11175 ;;  exp             1   16[BANK0 ] unsigned char 
 11176 ;; Return value:  Size  Location     Type
 11177 ;;                  3    8[BANK0 ] float 
 11178 ;; Registers used:
 11179 ;;		wreg, status,2, status,0, cstack
 11180 ;; Tracked objects:
 11181 ;;		On entry : 0/0
 11182 ;;		On exit  : 0/0
 11183 ;;		Unchanged: 0/0
 11184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11185 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11186 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11187 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11188 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11189 ;;Total ram usage:       10 bytes
 11190 ;; Hardware stack levels used:    1
 11191 ;; Hardware stack levels required when called:    7
 11192 ;; This function calls:
 11193 ;;		___ftpack
 11194 ;; This function is called by:
 11195 ;;		_sortBattery
 11196 ;;		_angleToPulse
 11197 ;; This function uses a non-reentrant model
 11198 ;;
 11199                           
 11200                           	psect	text36
 11201  004738                     __ptext36:
 11202                           	opt stack 0
 11203  004738                     ___altoft:
 11204                           	opt stack 20
 11205                           
 11206                           ;incstack = 0
 11207  004738  0E00               	movlw	0
 11208  00473A  0100               	movlb	0	; () banked
 11209  00473C  6F91               	movwf	___altoft@sign& (0+255),b
 11210  00473E  0E8E               	movlw	142
 11211  004740  0100               	movlb	0	; () banked
 11212  004742  6F90               	movwf	___altoft@exp& (0+255),b
 11213                           
 11214                           ; BSR set to: 0
 11215  004744  0100               	movlb	0	; () banked
 11216  004746  AF8B               	btfss	(___altoft@c+3)& (0+255),7,b
 11217  004748  D015               	goto	l4850
 11218                           
 11219                           ; BSR set to: 0
 11220  00474A  0100               	movlb	0	; () banked
 11221  00474C  1F8B               	comf	(___altoft@c+3)& (0+255),f,b
 11222  00474E  1F8A               	comf	(___altoft@c+2)& (0+255),f,b
 11223  004750  1F89               	comf	(___altoft@c+1)& (0+255),f,b
 11224  004752  6D88               	negf	___altoft@c& (0+255),b
 11225  004754  0E00               	movlw	0
 11226  004756  2389               	addwfc	(___altoft@c+1)& (0+255),f,b
 11227  004758  238A               	addwfc	(___altoft@c+2)& (0+255),f,b
 11228  00475A  238B               	addwfc	(___altoft@c+3)& (0+255),f,b
 11229                           
 11230                           ; BSR set to: 0
 11231  00475C  0E01               	movlw	1
 11232  00475E  0100               	movlb	0	; () banked
 11233  004760  6F91               	movwf	___altoft@sign& (0+255),b
 11234                           
 11235                           ; BSR set to: 0
 11236  004762  D008               	goto	l4850
 11237  004764                     l4848:
 11238                           
 11239                           ; BSR set to: 0
 11240  004764  0100               	movlb	0	; () banked
 11241  004766  90D8               	bcf	status,0,c
 11242  004768  338B               	rrcf	(___altoft@c+3)& (0+255),f,b
 11243  00476A  338A               	rrcf	(___altoft@c+2)& (0+255),f,b
 11244  00476C  3389               	rrcf	(___altoft@c+1)& (0+255),f,b
 11245  00476E  3388               	rrcf	___altoft@c& (0+255),f,b
 11246  004770  0100               	movlb	0	; () banked
 11247  004772  2B90               	incf	___altoft@exp& (0+255),f,b
 11248  004774                     l4850:
 11249                           
 11250                           ; BSR set to: 0
 11251  004774  0E00               	movlw	0
 11252  004776  0100               	movlb	0	; () banked
 11253  004778  1588               	andwf	___altoft@c& (0+255),w,b
 11254  00477A  0100               	movlb	0	; () banked
 11255  00477C  6F8C               	movwf	??___altoft& (0+255),b
 11256  00477E  0E00               	movlw	0
 11257  004780  0100               	movlb	0	; () banked
 11258  004782  1589               	andwf	(___altoft@c+1)& (0+255),w,b
 11259  004784  0100               	movlb	0	; () banked
 11260  004786  6F8D               	movwf	(??___altoft+1)& (0+255),b
 11261  004788  0E00               	movlw	0
 11262  00478A  0100               	movlb	0	; () banked
 11263  00478C  158A               	andwf	(___altoft@c+2)& (0+255),w,b
 11264  00478E  0100               	movlb	0	; () banked
 11265  004790  6F8E               	movwf	(??___altoft+2)& (0+255),b
 11266  004792  0EFF               	movlw	255
 11267  004794  0100               	movlb	0	; () banked
 11268  004796  158B               	andwf	(___altoft@c+3)& (0+255),w,b
 11269  004798  0100               	movlb	0	; () banked
 11270  00479A  6F8F               	movwf	(??___altoft+3)& (0+255),b
 11271  00479C  0100               	movlb	0	; () banked
 11272  00479E  518C               	movf	??___altoft& (0+255),w,b
 11273  0047A0  0100               	movlb	0	; () banked
 11274  0047A2  118D               	iorwf	(??___altoft+1)& (0+255),w,b
 11275  0047A4  0100               	movlb	0	; () banked
 11276  0047A6  118E               	iorwf	(??___altoft+2)& (0+255),w,b
 11277  0047A8  0100               	movlb	0	; () banked
 11278  0047AA  118F               	iorwf	(??___altoft+3)& (0+255),w,b
 11279  0047AC  A4D8               	btfss	status,2,c
 11280  0047AE  D7DA               	goto	l4848
 11281                           
 11282                           ; BSR set to: 0
 11283                           
 11284                           ; BSR set to: 0
 11285  0047B0  C088  F080         	movff	___altoft@c,___ftpack@arg
 11286  0047B4  C089  F081         	movff	___altoft@c+1,___ftpack@arg+1
 11287  0047B8  C08A  F082         	movff	___altoft@c+2,___ftpack@arg+2
 11288  0047BC  C090  F083         	movff	___altoft@exp,___ftpack@exp
 11289  0047C0  C091  F084         	movff	___altoft@sign,___ftpack@sign
 11290  0047C4  ECAC  F01D         	call	___ftpack	;wreg free
 11291  0047C8  C080  F088         	movff	?___ftpack,?___altoft
 11292  0047CC  C081  F089         	movff	?___ftpack+1,?___altoft+1
 11293  0047D0  C082  F08A         	movff	?___ftpack+2,?___altoft+2
 11294  0047D4  0012               	return	
 11295  0047D6                     __end_of___altoft:
 11296                           	opt stack 0
 11297                           tblptru	equ	0xFF8
 11298                           tblptrh	equ	0xFF7
 11299                           tblptrl	equ	0xFF6
 11300                           tablat	equ	0xFF5
 11301                           prodh	equ	0xFF4
 11302                           prodl	equ	0xFF3
 11303                           intcon	equ	0xFF2
 11304                           intcon3	equ	0xFF0
 11305                           postinc0	equ	0xFEE
 11306                           wreg	equ	0xFE8
 11307                           postdec1	equ	0xFE5
 11308                           fsr1l	equ	0xFE1
 11309                           indf2	equ	0xFDF
 11310                           postinc2	equ	0xFDE
 11311                           postdec2	equ	0xFDD
 11312                           fsr2h	equ	0xFDA
 11313                           fsr2l	equ	0xFD9
 11314                           status	equ	0xFD8
 11315                           
 11316 ;; *************** function ___ftpack *****************
 11317 ;; Defined at:
 11318 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 11319 ;; Parameters:    Size  Location     Type
 11320 ;;  arg             3    0[BANK0 ] unsigned um
 11321 ;;  exp             1    3[BANK0 ] unsigned char 
 11322 ;;  sign            1    4[BANK0 ] unsigned char 
 11323 ;; Auto vars:     Size  Location     Type
 11324 ;;		None
 11325 ;; Return value:  Size  Location     Type
 11326 ;;                  3    0[BANK0 ] float 
 11327 ;; Registers used:
 11328 ;;		wreg, status,2, status,0
 11329 ;; Tracked objects:
 11330 ;;		On entry : 0/0
 11331 ;;		On exit  : 0/0
 11332 ;;		Unchanged: 0/0
 11333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11334 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11336 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11337 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11338 ;;Total ram usage:        8 bytes
 11339 ;; Hardware stack levels used:    1
 11340 ;; Hardware stack levels required when called:    6
 11341 ;; This function calls:
 11342 ;;		Nothing
 11343 ;; This function is called by:
 11344 ;;		___altoft
 11345 ;;		___awtoft
 11346 ;;		___ftadd
 11347 ;;		___ftdiv
 11348 ;;		___ftmul
 11349 ;;		___lltoft
 11350 ;; This function uses a non-reentrant model
 11351 ;;
 11352                           
 11353                           	psect	text37
 11354  003B58                     __ptext37:
 11355                           	opt stack 0
 11356  003B58                     ___ftpack:
 11357                           	opt stack 20
 11358                           
 11359                           ;incstack = 0
 11360  003B58  0100               	movlb	0	; () banked
 11361  003B5A  5183               	movf	___ftpack@exp& (0+255),w,b
 11362  003B5C  0100               	movlb	0	; () banked
 11363  003B5E  B4D8               	btfsc	status,2,c
 11364  003B60  D008               	goto	l4388
 11365                           
 11366                           ; BSR set to: 0
 11367  003B62  0100               	movlb	0	; () banked
 11368  003B64  5180               	movf	___ftpack@arg& (0+255),w,b
 11369  003B66  0100               	movlb	0	; () banked
 11370  003B68  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 11371  003B6A  0100               	movlb	0	; () banked
 11372  003B6C  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 11373  003B6E  A4D8               	btfss	status,2,c
 11374  003B70  D011               	goto	l4394
 11375  003B72                     l4388:
 11376                           
 11377                           ; BSR set to: 0
 11378  003B72  0E00               	movlw	0
 11379  003B74  0100               	movlb	0	; () banked
 11380  003B76  6F80               	movwf	?___ftpack& (0+255),b
 11381  003B78  0E00               	movlw	0
 11382  003B7A  0100               	movlb	0	; () banked
 11383  003B7C  6F81               	movwf	(?___ftpack+1)& (0+255),b
 11384  003B7E  0E00               	movlw	0
 11385  003B80  0100               	movlb	0	; () banked
 11386  003B82  6F82               	movwf	(?___ftpack+2)& (0+255),b
 11387                           
 11388                           ; BSR set to: 0
 11389  003B84  0012               	return	
 11390  003B86                     l4392:
 11391                           
 11392                           ; BSR set to: 0
 11393  003B86  0100               	movlb	0	; () banked
 11394  003B88  2B83               	incf	___ftpack@exp& (0+255),f,b
 11395  003B8A  0100               	movlb	0	; () banked
 11396  003B8C  90D8               	bcf	status,0,c
 11397  003B8E  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 11398  003B90  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 11399  003B92  3380               	rrcf	___ftpack@arg& (0+255),f,b
 11400  003B94                     l4394:
 11401                           
 11402                           ; BSR set to: 0
 11403  003B94  0E00               	movlw	0
 11404  003B96  0100               	movlb	0	; () banked
 11405  003B98  1580               	andwf	___ftpack@arg& (0+255),w,b
 11406  003B9A  0100               	movlb	0	; () banked
 11407  003B9C  6F85               	movwf	??___ftpack& (0+255),b
 11408  003B9E  0E00               	movlw	0
 11409  003BA0  0100               	movlb	0	; () banked
 11410  003BA2  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
 11411  003BA4  0100               	movlb	0	; () banked
 11412  003BA6  6F86               	movwf	(??___ftpack+1)& (0+255),b
 11413  003BA8  0EFE               	movlw	254
 11414  003BAA  0100               	movlb	0	; () banked
 11415  003BAC  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
 11416  003BAE  0100               	movlb	0	; () banked
 11417  003BB0  6F87               	movwf	(??___ftpack+2)& (0+255),b
 11418  003BB2  0100               	movlb	0	; () banked
 11419  003BB4  5185               	movf	??___ftpack& (0+255),w,b
 11420  003BB6  0100               	movlb	0	; () banked
 11421  003BB8  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
 11422  003BBA  0100               	movlb	0	; () banked
 11423  003BBC  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
 11424  003BBE  B4D8               	btfsc	status,2,c
 11425  003BC0  D011               	goto	l4400
 11426  003BC2  D7E1               	goto	l4392
 11427  003BC4                     l4396:
 11428                           
 11429                           ; BSR set to: 0
 11430  003BC4  0100               	movlb	0	; () banked
 11431  003BC6  2B83               	incf	___ftpack@exp& (0+255),f,b
 11432                           
 11433                           ; BSR set to: 0
 11434  003BC8  0E01               	movlw	1
 11435  003BCA  0100               	movlb	0	; () banked
 11436  003BCC  2780               	addwf	___ftpack@arg& (0+255),f,b
 11437  003BCE  0E00               	movlw	0
 11438  003BD0  0100               	movlb	0	; () banked
 11439  003BD2  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 11440  003BD4  0E00               	movlw	0
 11441  003BD6  0100               	movlb	0	; () banked
 11442  003BD8  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 11443  003BDA  0100               	movlb	0	; () banked
 11444  003BDC  90D8               	bcf	status,0,c
 11445  003BDE  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 11446  003BE0  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 11447  003BE2  3380               	rrcf	___ftpack@arg& (0+255),f,b
 11448  003BE4                     l4400:
 11449                           
 11450                           ; BSR set to: 0
 11451  003BE4  0E00               	movlw	0
 11452  003BE6  0100               	movlb	0	; () banked
 11453  003BE8  1580               	andwf	___ftpack@arg& (0+255),w,b
 11454  003BEA  0100               	movlb	0	; () banked
 11455  003BEC  6F85               	movwf	??___ftpack& (0+255),b
 11456  003BEE  0E00               	movlw	0
 11457  003BF0  0100               	movlb	0	; () banked
 11458  003BF2  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
 11459  003BF4  0100               	movlb	0	; () banked
 11460  003BF6  6F86               	movwf	(??___ftpack+1)& (0+255),b
 11461  003BF8  0EFF               	movlw	255
 11462  003BFA  0100               	movlb	0	; () banked
 11463  003BFC  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
 11464  003BFE  0100               	movlb	0	; () banked
 11465  003C00  6F87               	movwf	(??___ftpack+2)& (0+255),b
 11466  003C02  0100               	movlb	0	; () banked
 11467  003C04  5185               	movf	??___ftpack& (0+255),w,b
 11468  003C06  0100               	movlb	0	; () banked
 11469  003C08  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
 11470  003C0A  0100               	movlb	0	; () banked
 11471  003C0C  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
 11472  003C0E  B4D8               	btfsc	status,2,c
 11473  003C10  D008               	goto	l4404
 11474  003C12  D7D8               	goto	l4396
 11475  003C14                     l4402:
 11476                           
 11477                           ; BSR set to: 0
 11478  003C14  0100               	movlb	0	; () banked
 11479  003C16  0783               	decf	___ftpack@exp& (0+255),f,b
 11480  003C18  0100               	movlb	0	; () banked
 11481  003C1A  90D8               	bcf	status,0,c
 11482  003C1C  3780               	rlcf	___ftpack@arg& (0+255),f,b
 11483  003C1E  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 11484  003C20  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 11485  003C22                     l4404:
 11486                           
 11487                           ; BSR set to: 0
 11488  003C22  0100               	movlb	0	; () banked
 11489  003C24  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 11490  003C26  D004               	goto	l1023
 11491                           
 11492                           ; BSR set to: 0
 11493  003C28  0E02               	movlw	2
 11494  003C2A  0100               	movlb	0	; () banked
 11495  003C2C  6183               	cpfslt	___ftpack@exp& (0+255),b
 11496  003C2E  D7F2               	goto	l4402
 11497  003C30                     l1023:
 11498                           
 11499                           ; BSR set to: 0
 11500  003C30  0100               	movlb	0	; () banked
 11501  003C32  B183               	btfsc	___ftpack@exp& (0+255),0,b
 11502  003C34  D002               	goto	l4410
 11503                           
 11504                           ; BSR set to: 0
 11505  003C36  0100               	movlb	0	; () banked
 11506  003C38  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
 11507  003C3A                     l4410:
 11508                           
 11509                           ; BSR set to: 0
 11510  003C3A  0100               	movlb	0	; () banked
 11511  003C3C  90D8               	bcf	status,0,c
 11512  003C3E  3383               	rrcf	___ftpack@exp& (0+255),f,b
 11513  003C40  0100               	movlb	0	; () banked
 11514  003C42  5183               	movf	___ftpack@exp& (0+255),w,b
 11515  003C44  0100               	movlb	0	; () banked
 11516  003C46  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 11517                           
 11518                           ; BSR set to: 0
 11519  003C48  0100               	movlb	0	; () banked
 11520  003C4A  5184               	movf	___ftpack@sign& (0+255),w,b
 11521  003C4C  0100               	movlb	0	; () banked
 11522  003C4E  B4D8               	btfsc	status,2,c
 11523  003C50  D002               	goto	l4416
 11524                           
 11525                           ; BSR set to: 0
 11526  003C52  0100               	movlb	0	; () banked
 11527  003C54  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
 11528  003C56                     l4416:
 11529                           
 11530                           ; BSR set to: 0
 11531  003C56  C080  F080         	movff	___ftpack@arg,?___ftpack
 11532  003C5A  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
 11533  003C5E  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
 11534  003C62  0012               	return	
 11535  003C64                     __end_of___ftpack:
 11536                           	opt stack 0
 11537                           tblptru	equ	0xFF8
 11538                           tblptrh	equ	0xFF7
 11539                           tblptrl	equ	0xFF6
 11540                           tablat	equ	0xFF5
 11541                           prodh	equ	0xFF4
 11542                           prodl	equ	0xFF3
 11543                           intcon	equ	0xFF2
 11544                           intcon3	equ	0xFF0
 11545                           postinc0	equ	0xFEE
 11546                           wreg	equ	0xFE8
 11547                           postdec1	equ	0xFE5
 11548                           fsr1l	equ	0xFE1
 11549                           indf2	equ	0xFDF
 11550                           postinc2	equ	0xFDE
 11551                           postdec2	equ	0xFDD
 11552                           fsr2h	equ	0xFDA
 11553                           fsr2l	equ	0xFD9
 11554                           status	equ	0xFD8
 11555                           
 11556 ;; *************** function _initTimer *****************
 11557 ;; Defined at:
 11558 ;;		line 52 in file "timer.c"
 11559 ;; Parameters:    Size  Location     Type
 11560 ;;  timer           2    0[BANK0 ] int 
 11561 ;; Auto vars:     Size  Location     Type
 11562 ;;		None
 11563 ;; Return value:  Size  Location     Type
 11564 ;;                  1    wreg      void 
 11565 ;; Registers used:
 11566 ;;		wreg, status,2, status,0
 11567 ;; Tracked objects:
 11568 ;;		On entry : 0/0
 11569 ;;		On exit  : 0/0
 11570 ;;		Unchanged: 0/0
 11571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11572 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11574 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11575 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11576 ;;Total ram usage:        4 bytes
 11577 ;; Hardware stack levels used:    1
 11578 ;; Hardware stack levels required when called:    6
 11579 ;; This function calls:
 11580 ;;		Nothing
 11581 ;; This function is called by:
 11582 ;;		_main
 11583 ;;		_initServo
 11584 ;;		_testFrequency
 11585 ;; This function uses a non-reentrant model
 11586 ;;
 11587                           
 11588                           	psect	text38
 11589  004D6E                     __ptext38:
 11590                           	opt stack 0
 11591  004D6E                     _initTimer:
 11592                           	opt stack 24
 11593                           
 11594                           ;timer.c: 53: switch(timer){
 11595                           
 11596                           ; BSR set to: 0
 11597                           ;incstack = 0
 11598  004D6E  D00F               	goto	l5652
 11599  004D70                     l5634:
 11600                           
 11601                           ;timer.c: 55: T0CON = 0;
 11602  004D70  0E00               	movlw	0
 11603  004D72  6ED5               	movwf	4053,c	;volatile
 11604                           
 11605                           ;timer.c: 56: T0CON |= 1<<3;
 11606  004D74  86D5               	bsf	4053,3,c	;volatile
 11607                           
 11608                           ;timer.c: 58: TMR0IE = 1;
 11609  004D76  8AF2               	bsf	intcon,5,c	;volatile
 11610                           
 11611                           ;timer.c: 59: break;
 11612  004D78  D01E               	goto	l394
 11613  004D7A                     l5640:
 11614                           
 11615                           ;timer.c: 61: T1CON = 0;
 11616  004D7A  0E00               	movlw	0
 11617  004D7C  6ECD               	movwf	4045,c	;volatile
 11618                           
 11619                           ;timer.c: 63: T1CON |= 0b11<<4;
 11620  004D7E  0E30               	movlw	48
 11621  004D80  12CD               	iorwf	4045,f,c	;volatile
 11622                           
 11623                           ;timer.c: 64: TMR1IE = 1;
 11624  004D82  809D               	bsf	3997,0,c	;volatile
 11625                           
 11626                           ;timer.c: 65: break;
 11627  004D84  D018               	goto	l394
 11628  004D86                     l5646:
 11629                           
 11630                           ;timer.c: 67: T3CON = 0;
 11631  004D86  0E00               	movlw	0
 11632  004D88  6EB1               	movwf	4017,c	;volatile
 11633                           
 11634                           ;timer.c: 68: TMR3IE = 1;
 11635  004D8A  82A0               	bsf	4000,1,c	;volatile
 11636                           
 11637                           ;timer.c: 70: }
 11638                           
 11639                           ;timer.c: 69: break;
 11640  004D8C  D014               	goto	l394
 11641  004D8E                     l5652:
 11642  004D8E  C080  F082         	movff	initTimer@timer,??_initTimer
 11643  004D92  C081  F083         	movff	initTimer@timer+1,??_initTimer+1
 11644                           
 11645                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11646                           ; Switch size 1, requested type "space"
 11647                           ; Number of cases is 1, Range of values is 0 to 0
 11648                           ; switch strategies available:
 11649                           ; Name         Instructions Cycles
 11650                           ; simple_byte            4     3 (average)
 11651                           ;	Chosen strategy is simple_byte
 11652  004D96  0100               	movlb	0	; () banked
 11653  004D98  5183               	movf	(??_initTimer+1)& (0+255),w,b
 11654  004D9A  0A00               	xorlw	0	; case 0
 11655  004D9C  A4D8               	btfss	status,2,c
 11656  004D9E  D00B               	goto	l394
 11657                           
 11658                           ; BSR set to: 0
 11659                           ; Switch size 1, requested type "space"
 11660                           ; Number of cases is 3, Range of values is 0 to 3
 11661                           ; switch strategies available:
 11662                           ; Name         Instructions Cycles
 11663                           ; simple_byte           10     6 (average)
 11664                           ;	Chosen strategy is simple_byte
 11665  004DA0  0100               	movlb	0	; () banked
 11666  004DA2  5182               	movf	??_initTimer& (0+255),w,b
 11667  004DA4  0A00               	xorlw	0	; case 0
 11668  004DA6  B4D8               	btfsc	status,2,c
 11669  004DA8  D7E3               	goto	l5634
 11670  004DAA  0A01               	xorlw	1	; case 1
 11671  004DAC  B4D8               	btfsc	status,2,c
 11672  004DAE  D7E5               	goto	l5640
 11673  004DB0  0A02               	xorlw	2	; case 3
 11674  004DB2  B4D8               	btfsc	status,2,c
 11675  004DB4  D7E8               	goto	l5646
 11676  004DB6                     l394:
 11677                           
 11678                           ;timer.c: 71: PEIE = 1;
 11679  004DB6  8CF2               	bsf	intcon,6,c	;volatile
 11680                           
 11681                           ;timer.c: 72: (INTCONbits.GIE = 1);
 11682  004DB8  8EF2               	bsf	intcon,7,c	;volatile
 11683  004DBA  0012               	return		;funcret
 11684  004DBC                     __end_of_initTimer:
 11685                           	opt stack 0
 11686                           tblptru	equ	0xFF8
 11687                           tblptrh	equ	0xFF7
 11688                           tblptrl	equ	0xFF6
 11689                           tablat	equ	0xFF5
 11690                           prodh	equ	0xFF4
 11691                           prodl	equ	0xFF3
 11692                           intcon	equ	0xFF2
 11693                           intcon3	equ	0xFF0
 11694                           postinc0	equ	0xFEE
 11695                           wreg	equ	0xFE8
 11696                           postdec1	equ	0xFE5
 11697                           fsr1l	equ	0xFE1
 11698                           indf2	equ	0xFDF
 11699                           postinc2	equ	0xFDE
 11700                           postdec2	equ	0xFDD
 11701                           fsr2h	equ	0xFDA
 11702                           fsr2l	equ	0xFD9
 11703                           status	equ	0xFD8
 11704                           
 11705 ;; *************** function _initLCD *****************
 11706 ;; Defined at:
 11707 ;;		line 15 in file "lcd.c"
 11708 ;; Parameters:    Size  Location     Type
 11709 ;;		None
 11710 ;; Auto vars:     Size  Location     Type
 11711 ;;		None
 11712 ;; Return value:  Size  Location     Type
 11713 ;;                  1    wreg      void 
 11714 ;; Registers used:
 11715 ;;		wreg, status,2, status,0, cstack
 11716 ;; Tracked objects:
 11717 ;;		On entry : 0/0
 11718 ;;		On exit  : 0/0
 11719 ;;		Unchanged: 0/0
 11720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11723 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11724 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11725 ;;Total ram usage:        1 bytes
 11726 ;; Hardware stack levels used:    1
 11727 ;; Hardware stack levels required when called:    8
 11728 ;; This function calls:
 11729 ;;		_lcdInst
 11730 ;; This function is called by:
 11731 ;;		_main
 11732 ;; This function uses a non-reentrant model
 11733 ;;
 11734                           
 11735                           	psect	text39
 11736  004E54                     __ptext39:
 11737                           	opt stack 0
 11738  004E54                     _initLCD:
 11739                           	opt stack 22
 11740                           
 11741                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 11742                           
 11743                           ;incstack = 0
 11744  004E54  0E31               	movlw	49
 11745  004E56  0100               	movlb	0	; () banked
 11746  004E58  6F84               	movwf	??_initLCD& (0+255),b
 11747  004E5A  0EB2               	movlw	178
 11748  004E5C                     u7817:
 11749  004E5C  2EE8               	decfsz	wreg,f,c
 11750  004E5E  D7FE               	bra	u7817
 11751  004E60  2F84               	decfsz	??_initLCD& (0+255),f,b
 11752  004E62  D7FC               	bra	u7817
 11753  004E64  F000               	nop	
 11754                           
 11755                           ;lcd.c: 18: lcdInst(0b00110011);
 11756  004E66  0E33               	movlw	51
 11757  004E68  EC69  F028         	call	_lcdInst
 11758                           
 11759                           ;lcd.c: 19: lcdInst(0b00110010);
 11760  004E6C  0E32               	movlw	50
 11761  004E6E  EC69  F028         	call	_lcdInst
 11762                           
 11763                           ;lcd.c: 20: lcdInst(0b00101000);
 11764  004E72  0E28               	movlw	40
 11765  004E74  EC69  F028         	call	_lcdInst
 11766                           
 11767                           ;lcd.c: 21: lcdInst(0b00001111);
 11768  004E78  0E0F               	movlw	15
 11769  004E7A  EC69  F028         	call	_lcdInst
 11770                           
 11771                           ;lcd.c: 22: lcdInst(0b00000110);
 11772  004E7E  0E06               	movlw	6
 11773  004E80  EC69  F028         	call	_lcdInst
 11774                           
 11775                           ;lcd.c: 23: lcdInst(0b00000001);
 11776  004E84  0E01               	movlw	1
 11777  004E86  EC69  F028         	call	_lcdInst
 11778                           
 11779                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 11780  004E8A  0E31               	movlw	49
 11781  004E8C  0100               	movlb	0	; () banked
 11782  004E8E  6F84               	movwf	??_initLCD& (0+255),b
 11783  004E90  0EB2               	movlw	178
 11784  004E92                     u7827:
 11785  004E92  2EE8               	decfsz	wreg,f,c
 11786  004E94  D7FE               	bra	u7827
 11787  004E96  2F84               	decfsz	??_initLCD& (0+255),f,b
 11788  004E98  D7FC               	bra	u7827
 11789  004E9A  F000               	nop	
 11790  004E9C  0012               	return		;funcret
 11791  004E9E                     __end_of_initLCD:
 11792                           	opt stack 0
 11793                           tblptru	equ	0xFF8
 11794                           tblptrh	equ	0xFF7
 11795                           tblptrl	equ	0xFF6
 11796                           tablat	equ	0xFF5
 11797                           prodh	equ	0xFF4
 11798                           prodl	equ	0xFF3
 11799                           intcon	equ	0xFF2
 11800                           intcon3	equ	0xFF0
 11801                           postinc0	equ	0xFEE
 11802                           wreg	equ	0xFE8
 11803                           postdec1	equ	0xFE5
 11804                           fsr1l	equ	0xFE1
 11805                           indf2	equ	0xFDF
 11806                           postinc2	equ	0xFDE
 11807                           postdec2	equ	0xFDD
 11808                           fsr2h	equ	0xFDA
 11809                           fsr2l	equ	0xFD9
 11810                           status	equ	0xFD8
 11811                           
 11812 ;; *************** function _lcdInst *****************
 11813 ;; Defined at:
 11814 ;;		line 27 in file "lcd.c"
 11815 ;; Parameters:    Size  Location     Type
 11816 ;;  data            1    wreg     unsigned char 
 11817 ;; Auto vars:     Size  Location     Type
 11818 ;;  data            1    3[BANK0 ] unsigned char 
 11819 ;; Return value:  Size  Location     Type
 11820 ;;                  1    wreg      void 
 11821 ;; Registers used:
 11822 ;;		wreg, status,2, status,0, cstack
 11823 ;; Tracked objects:
 11824 ;;		On entry : 0/0
 11825 ;;		On exit  : 0/0
 11826 ;;		Unchanged: 0/0
 11827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11829 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11830 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11831 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11832 ;;Total ram usage:        2 bytes
 11833 ;; Hardware stack levels used:    1
 11834 ;; Hardware stack levels required when called:    7
 11835 ;; This function calls:
 11836 ;;		_lcdNibble
 11837 ;; This function is called by:
 11838 ;;		_initLCD
 11839 ;;		_lcdHome
 11840 ;;		_lcdClear
 11841 ;;		_lcdNewline
 11842 ;; This function uses a non-reentrant model
 11843 ;;
 11844                           
 11845                           	psect	text40
 11846  0050D2                     __ptext40:
 11847                           	opt stack 0
 11848  0050D2                     _lcdInst:
 11849                           	opt stack 19
 11850                           
 11851                           ;incstack = 0
 11852                           ;lcdInst@data stored from wreg
 11853  0050D2  0100               	movlb	0	; () banked
 11854  0050D4  6F83               	movwf	lcdInst@data& (0+255),b
 11855                           
 11856                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 11857  0050D6  948C               	bcf	3980,2,c	;volatile
 11858                           
 11859                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 11860  0050D8  0E74               	movlw	116
 11861  0050DA                     u7837:
 11862  0050DA  2EE8               	decfsz	wreg,f,c
 11863  0050DC  D7FE               	bra	u7837
 11864  0050DE  D000               	nop2	
 11865                           
 11866                           ;lcd.c: 30: lcdNibble(data);
 11867  0050E0  0100               	movlb	0	; () banked
 11868  0050E2  5183               	movf	lcdInst@data& (0+255),w,b
 11869  0050E4  EC87  F025         	call	_lcdNibble
 11870                           
 11871                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 11872  0050E8  0E04               	movlw	4
 11873  0050EA  0100               	movlb	0	; () banked
 11874  0050EC  6F82               	movwf	??_lcdInst& (0+255),b
 11875  0050EE  0E3D               	movlw	61
 11876  0050F0                     u7847:
 11877  0050F0  2EE8               	decfsz	wreg,f,c
 11878  0050F2  D7FE               	bra	u7847
 11879  0050F4  2F82               	decfsz	??_lcdInst& (0+255),f,b
 11880  0050F6  D7FC               	bra	u7847
 11881  0050F8  D000               	nop2	
 11882  0050FA  0012               	return		;funcret
 11883  0050FC                     __end_of_lcdInst:
 11884                           	opt stack 0
 11885                           tblptru	equ	0xFF8
 11886                           tblptrh	equ	0xFF7
 11887                           tblptrl	equ	0xFF6
 11888                           tablat	equ	0xFF5
 11889                           prodh	equ	0xFF4
 11890                           prodl	equ	0xFF3
 11891                           intcon	equ	0xFF2
 11892                           intcon3	equ	0xFF0
 11893                           postinc0	equ	0xFEE
 11894                           wreg	equ	0xFE8
 11895                           postdec1	equ	0xFE5
 11896                           fsr1l	equ	0xFE1
 11897                           indf2	equ	0xFDF
 11898                           postinc2	equ	0xFDE
 11899                           postdec2	equ	0xFDD
 11900                           fsr2h	equ	0xFDA
 11901                           fsr2l	equ	0xFD9
 11902                           status	equ	0xFD8
 11903                           
 11904 ;; *************** function _lcdNibble *****************
 11905 ;; Defined at:
 11906 ;;		line 46 in file "lcd.c"
 11907 ;; Parameters:    Size  Location     Type
 11908 ;;  data            1    wreg     unsigned char 
 11909 ;; Auto vars:     Size  Location     Type
 11910 ;;  data            1    1[BANK0 ] unsigned char 
 11911 ;;  temp            1    0[BANK0 ] unsigned char 
 11912 ;; Return value:  Size  Location     Type
 11913 ;;                  1    wreg      void 
 11914 ;; Registers used:
 11915 ;;		wreg, status,2, status,0
 11916 ;; Tracked objects:
 11917 ;;		On entry : 0/0
 11918 ;;		On exit  : 0/0
 11919 ;;		Unchanged: 0/0
 11920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11922 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11924 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11925 ;;Total ram usage:        2 bytes
 11926 ;; Hardware stack levels used:    1
 11927 ;; Hardware stack levels required when called:    6
 11928 ;; This function calls:
 11929 ;;		Nothing
 11930 ;; This function is called by:
 11931 ;;		_lcdInst
 11932 ;;		_putch
 11933 ;; This function uses a non-reentrant model
 11934 ;;
 11935                           
 11936                           	psect	text41
 11937  004B0E                     __ptext41:
 11938                           	opt stack 0
 11939  004B0E                     _lcdNibble:
 11940                           	opt stack 21
 11941                           
 11942                           ;incstack = 0
 11943                           ;lcdNibble@data stored from wreg
 11944  004B0E  0100               	movlb	0	; () banked
 11945  004B10  6F81               	movwf	lcdNibble@data& (0+255),b
 11946                           
 11947                           ;lcd.c: 48: char temp = data & 0xF0;
 11948  004B12  0100               	movlb	0	; () banked
 11949  004B14  5181               	movf	lcdNibble@data& (0+255),w,b
 11950  004B16  0BF0               	andlw	240
 11951  004B18  0100               	movlb	0	; () banked
 11952  004B1A  6F80               	movwf	lcdNibble@temp& (0+255),b
 11953                           
 11954                           ;lcd.c: 49: LATD = LATD & 0x0F;
 11955  004B1C  508C               	movf	3980,w,c	;volatile
 11956  004B1E  0B0F               	andlw	15
 11957  004B20  6E8C               	movwf	3980,c	;volatile
 11958                           
 11959                           ;lcd.c: 50: LATD = temp | LATD;
 11960  004B22  0100               	movlb	0	; () banked
 11961  004B24  5180               	movf	lcdNibble@temp& (0+255),w,b
 11962  004B26  108C               	iorwf	3980,w,c	;volatile
 11963  004B28  6E8C               	movwf	3980,c	;volatile
 11964                           
 11965                           ; BSR set to: 0
 11966                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 11967  004B2A  968C               	bcf	3980,3,c	;volatile
 11968                           
 11969                           ; BSR set to: 0
 11970                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 11971  004B2C  0ED6               	movlw	214
 11972  004B2E                     u7857:
 11973  004B2E  D000               	nop2	
 11974  004B30  D000               	nop2	
 11975  004B32  2EE8               	decfsz	wreg,f,c
 11976  004B34  D7FC               	bra	u7857
 11977  004B36  D000               	nop2	
 11978                           
 11979                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 11980  004B38  868C               	bsf	3980,3,c	;volatile
 11981                           
 11982                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 11983  004B3A  0ED6               	movlw	214
 11984  004B3C                     u7867:
 11985  004B3C  D000               	nop2	
 11986  004B3E  D000               	nop2	
 11987  004B40  2EE8               	decfsz	wreg,f,c
 11988  004B42  D7FC               	bra	u7867
 11989  004B44  D000               	nop2	
 11990                           
 11991                           ;lcd.c: 58: data = data << 4;
 11992  004B46  0100               	movlb	0	; () banked
 11993  004B48  3981               	swapf	lcdNibble@data& (0+255),w,b
 11994  004B4A  0BF0               	andlw	240
 11995  004B4C  0100               	movlb	0	; () banked
 11996  004B4E  6F81               	movwf	lcdNibble@data& (0+255),b
 11997                           
 11998                           ;lcd.c: 60: temp = data & 0xF0;
 11999  004B50  0100               	movlb	0	; () banked
 12000  004B52  5181               	movf	lcdNibble@data& (0+255),w,b
 12001  004B54  0BF0               	andlw	240
 12002  004B56  0100               	movlb	0	; () banked
 12003  004B58  6F80               	movwf	lcdNibble@temp& (0+255),b
 12004                           
 12005                           ;lcd.c: 61: LATD = LATD & 0x0F;
 12006  004B5A  508C               	movf	3980,w,c	;volatile
 12007  004B5C  0B0F               	andlw	15
 12008  004B5E  6E8C               	movwf	3980,c	;volatile
 12009                           
 12010                           ;lcd.c: 62: LATD = temp | LATD;
 12011  004B60  0100               	movlb	0	; () banked
 12012  004B62  5180               	movf	lcdNibble@temp& (0+255),w,b
 12013  004B64  108C               	iorwf	3980,w,c	;volatile
 12014  004B66  6E8C               	movwf	3980,c	;volatile
 12015                           
 12016                           ; BSR set to: 0
 12017                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 12018  004B68  968C               	bcf	3980,3,c	;volatile
 12019                           
 12020                           ; BSR set to: 0
 12021                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12022  004B6A  0ED6               	movlw	214
 12023  004B6C                     u7877:
 12024  004B6C  D000               	nop2	
 12025  004B6E  D000               	nop2	
 12026  004B70  2EE8               	decfsz	wreg,f,c
 12027  004B72  D7FC               	bra	u7877
 12028  004B74  D000               	nop2	
 12029                           
 12030                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 12031  004B76  868C               	bsf	3980,3,c	;volatile
 12032                           
 12033                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 12034  004B78  0ED6               	movlw	214
 12035  004B7A                     u7887:
 12036  004B7A  D000               	nop2	
 12037  004B7C  D000               	nop2	
 12038  004B7E  2EE8               	decfsz	wreg,f,c
 12039  004B80  D7FC               	bra	u7887
 12040  004B82  D000               	nop2	
 12041  004B84  0012               	return		;funcret
 12042  004B86                     __end_of_lcdNibble:
 12043                           	opt stack 0
 12044                           tblptru	equ	0xFF8
 12045                           tblptrh	equ	0xFF7
 12046                           tblptrl	equ	0xFF6
 12047                           tablat	equ	0xFF5
 12048                           prodh	equ	0xFF4
 12049                           prodl	equ	0xFF3
 12050                           intcon	equ	0xFF2
 12051                           intcon3	equ	0xFF0
 12052                           postinc0	equ	0xFEE
 12053                           wreg	equ	0xFE8
 12054                           postdec1	equ	0xFE5
 12055                           fsr1l	equ	0xFE1
 12056                           indf2	equ	0xFDF
 12057                           postinc2	equ	0xFDE
 12058                           postdec2	equ	0xFDD
 12059                           fsr2h	equ	0xFDA
 12060                           fsr2l	equ	0xFD9
 12061                           status	equ	0xFD8
 12062                           
 12063 ;; *************** function ___almod *****************
 12064 ;; Defined at:
 12065 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\almod.c"
 12066 ;; Parameters:    Size  Location     Type
 12067 ;;  dividend        4   14[BANK0 ] long 
 12068 ;;  divisor         4   18[BANK0 ] long 
 12069 ;; Auto vars:     Size  Location     Type
 12070 ;;  sign            1   23[BANK0 ] unsigned char 
 12071 ;;  counter         1   22[BANK0 ] unsigned char 
 12072 ;; Return value:  Size  Location     Type
 12073 ;;                  4   14[BANK0 ] long 
 12074 ;; Registers used:
 12075 ;;		wreg, status,2, status,0
 12076 ;; Tracked objects:
 12077 ;;		On entry : 0/0
 12078 ;;		On exit  : 0/0
 12079 ;;		Unchanged: 0/0
 12080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12081 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12082 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12084 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12085 ;;Total ram usage:       10 bytes
 12086 ;; Hardware stack levels used:    1
 12087 ;; Hardware stack levels required when called:    6
 12088 ;; This function calls:
 12089 ;;		Nothing
 12090 ;; This function is called by:
 12091 ;;		_main
 12092 ;; This function uses a non-reentrant model
 12093 ;;
 12094                           
 12095                           	psect	text42
 12096  00404A                     __ptext42:
 12097                           	opt stack 0
 12098  00404A                     ___almod:
 12099                           	opt stack 24
 12100                           
 12101                           ;incstack = 0
 12102  00404A  0E00               	movlw	0
 12103  00404C  0100               	movlb	0	; () banked
 12104  00404E  6F97               	movwf	___almod@sign& (0+255),b
 12105                           
 12106                           ; BSR set to: 0
 12107  004050  0100               	movlb	0	; () banked
 12108  004052  AF91               	btfss	(___almod@dividend+3)& (0+255),7,b
 12109  004054  D00C               	goto	l6316
 12110                           
 12111                           ; BSR set to: 0
 12112  004056  0100               	movlb	0	; () banked
 12113  004058  1F91               	comf	(___almod@dividend+3)& (0+255),f,b
 12114  00405A  1F90               	comf	(___almod@dividend+2)& (0+255),f,b
 12115  00405C  1F8F               	comf	(___almod@dividend+1)& (0+255),f,b
 12116  00405E  6D8E               	negf	___almod@dividend& (0+255),b
 12117  004060  0E00               	movlw	0
 12118  004062  238F               	addwfc	(___almod@dividend+1)& (0+255),f,b
 12119  004064  2390               	addwfc	(___almod@dividend+2)& (0+255),f,b
 12120  004066  2391               	addwfc	(___almod@dividend+3)& (0+255),f,b
 12121                           
 12122                           ; BSR set to: 0
 12123  004068  0E01               	movlw	1
 12124  00406A  0100               	movlb	0	; () banked
 12125  00406C  6F97               	movwf	___almod@sign& (0+255),b
 12126  00406E                     l6316:
 12127                           
 12128                           ; BSR set to: 0
 12129  00406E  0100               	movlb	0	; () banked
 12130  004070  AF95               	btfss	(___almod@divisor+3)& (0+255),7,b
 12131  004072  D009               	goto	l6320
 12132                           
 12133                           ; BSR set to: 0
 12134  004074  0100               	movlb	0	; () banked
 12135  004076  1F95               	comf	(___almod@divisor+3)& (0+255),f,b
 12136  004078  1F94               	comf	(___almod@divisor+2)& (0+255),f,b
 12137  00407A  1F93               	comf	(___almod@divisor+1)& (0+255),f,b
 12138  00407C  6D92               	negf	___almod@divisor& (0+255),b
 12139  00407E  0E00               	movlw	0
 12140  004080  2393               	addwfc	(___almod@divisor+1)& (0+255),f,b
 12141  004082  2394               	addwfc	(___almod@divisor+2)& (0+255),f,b
 12142  004084  2395               	addwfc	(___almod@divisor+3)& (0+255),f,b
 12143  004086                     l6320:
 12144                           
 12145                           ; BSR set to: 0
 12146  004086  0100               	movlb	0	; () banked
 12147  004088  5192               	movf	___almod@divisor& (0+255),w,b
 12148  00408A  0100               	movlb	0	; () banked
 12149  00408C  1193               	iorwf	(___almod@divisor+1)& (0+255),w,b
 12150  00408E  0100               	movlb	0	; () banked
 12151  004090  1194               	iorwf	(___almod@divisor+2)& (0+255),w,b
 12152  004092  0100               	movlb	0	; () banked
 12153  004094  1195               	iorwf	(___almod@divisor+3)& (0+255),w,b
 12154  004096  B4D8               	btfsc	status,2,c
 12155  004098  D03A               	goto	l6336
 12156                           
 12157                           ; BSR set to: 0
 12158  00409A  0E01               	movlw	1
 12159  00409C  0100               	movlb	0	; () banked
 12160  00409E  6F96               	movwf	___almod@counter& (0+255),b
 12161  0040A0  D008               	goto	l6326
 12162  0040A2                     l6324:
 12163                           
 12164                           ; BSR set to: 0
 12165  0040A2  0100               	movlb	0	; () banked
 12166  0040A4  90D8               	bcf	status,0,c
 12167  0040A6  3792               	rlcf	___almod@divisor& (0+255),f,b
 12168  0040A8  3793               	rlcf	(___almod@divisor+1)& (0+255),f,b
 12169  0040AA  3794               	rlcf	(___almod@divisor+2)& (0+255),f,b
 12170  0040AC  3795               	rlcf	(___almod@divisor+3)& (0+255),f,b
 12171  0040AE  0100               	movlb	0	; () banked
 12172  0040B0  2B96               	incf	___almod@counter& (0+255),f,b
 12173  0040B2                     l6326:
 12174                           
 12175                           ; BSR set to: 0
 12176  0040B2  0100               	movlb	0	; () banked
 12177  0040B4  AF95               	btfss	(___almod@divisor+3)& (0+255),7,b
 12178  0040B6  D7F5               	goto	l6324
 12179  0040B8                     l6328:
 12180                           
 12181                           ; BSR set to: 0
 12182  0040B8  0100               	movlb	0	; () banked
 12183  0040BA  5192               	movf	___almod@divisor& (0+255),w,b
 12184  0040BC  0100               	movlb	0	; () banked
 12185  0040BE  5D8E               	subwf	___almod@dividend& (0+255),w,b
 12186  0040C0  0100               	movlb	0	; () banked
 12187  0040C2  5193               	movf	(___almod@divisor+1)& (0+255),w,b
 12188  0040C4  0100               	movlb	0	; () banked
 12189  0040C6  598F               	subwfb	(___almod@dividend+1)& (0+255),w,b
 12190  0040C8  0100               	movlb	0	; () banked
 12191  0040CA  5194               	movf	(___almod@divisor+2)& (0+255),w,b
 12192  0040CC  0100               	movlb	0	; () banked
 12193  0040CE  5990               	subwfb	(___almod@dividend+2)& (0+255),w,b
 12194  0040D0  0100               	movlb	0	; () banked
 12195  0040D2  5195               	movf	(___almod@divisor+3)& (0+255),w,b
 12196  0040D4  0100               	movlb	0	; () banked
 12197  0040D6  5991               	subwfb	(___almod@dividend+3)& (0+255),w,b
 12198  0040D8  A0D8               	btfss	status,0,c
 12199  0040DA  D010               	goto	l6332
 12200                           
 12201                           ; BSR set to: 0
 12202  0040DC  0100               	movlb	0	; () banked
 12203  0040DE  5192               	movf	___almod@divisor& (0+255),w,b
 12204  0040E0  0100               	movlb	0	; () banked
 12205  0040E2  5F8E               	subwf	___almod@dividend& (0+255),f,b
 12206  0040E4  0100               	movlb	0	; () banked
 12207  0040E6  5193               	movf	(___almod@divisor+1)& (0+255),w,b
 12208  0040E8  0100               	movlb	0	; () banked
 12209  0040EA  5B8F               	subwfb	(___almod@dividend+1)& (0+255),f,b
 12210  0040EC  0100               	movlb	0	; () banked
 12211  0040EE  5194               	movf	(___almod@divisor+2)& (0+255),w,b
 12212  0040F0  0100               	movlb	0	; () banked
 12213  0040F2  5B90               	subwfb	(___almod@dividend+2)& (0+255),f,b
 12214  0040F4  0100               	movlb	0	; () banked
 12215  0040F6  5195               	movf	(___almod@divisor+3)& (0+255),w,b
 12216  0040F8  0100               	movlb	0	; () banked
 12217  0040FA  5B91               	subwfb	(___almod@dividend+3)& (0+255),f,b
 12218  0040FC                     l6332:
 12219                           
 12220                           ; BSR set to: 0
 12221  0040FC  0100               	movlb	0	; () banked
 12222  0040FE  90D8               	bcf	status,0,c
 12223  004100  3395               	rrcf	(___almod@divisor+3)& (0+255),f,b
 12224  004102  3394               	rrcf	(___almod@divisor+2)& (0+255),f,b
 12225  004104  3393               	rrcf	(___almod@divisor+1)& (0+255),f,b
 12226  004106  3392               	rrcf	___almod@divisor& (0+255),f,b
 12227                           
 12228                           ; BSR set to: 0
 12229  004108  0100               	movlb	0	; () banked
 12230  00410A  2F96               	decfsz	___almod@counter& (0+255),f,b
 12231  00410C  D7D5               	goto	l6328
 12232  00410E                     l6336:
 12233                           
 12234                           ; BSR set to: 0
 12235  00410E  0100               	movlb	0	; () banked
 12236  004110  5197               	movf	___almod@sign& (0+255),w,b
 12237  004112  0100               	movlb	0	; () banked
 12238  004114  B4D8               	btfsc	status,2,c
 12239  004116  D009               	goto	l6340
 12240                           
 12241                           ; BSR set to: 0
 12242  004118  0100               	movlb	0	; () banked
 12243  00411A  1F91               	comf	(___almod@dividend+3)& (0+255),f,b
 12244  00411C  1F90               	comf	(___almod@dividend+2)& (0+255),f,b
 12245  00411E  1F8F               	comf	(___almod@dividend+1)& (0+255),f,b
 12246  004120  6D8E               	negf	___almod@dividend& (0+255),b
 12247  004122  0E00               	movlw	0
 12248  004124  238F               	addwfc	(___almod@dividend+1)& (0+255),f,b
 12249  004126  2390               	addwfc	(___almod@dividend+2)& (0+255),f,b
 12250  004128  2391               	addwfc	(___almod@dividend+3)& (0+255),f,b
 12251  00412A                     l6340:
 12252                           
 12253                           ; BSR set to: 0
 12254  00412A  C08E  F08E         	movff	___almod@dividend,?___almod
 12255  00412E  C08F  F08F         	movff	___almod@dividend+1,?___almod+1
 12256  004132  C090  F090         	movff	___almod@dividend+2,?___almod+2
 12257  004136  C091  F091         	movff	___almod@dividend+3,?___almod+3
 12258  00413A  0012               	return	
 12259  00413C                     __end_of___almod:
 12260                           	opt stack 0
 12261                           tblptru	equ	0xFF8
 12262                           tblptrh	equ	0xFF7
 12263                           tblptrl	equ	0xFF6
 12264                           tablat	equ	0xFF5
 12265                           prodh	equ	0xFF4
 12266                           prodl	equ	0xFF3
 12267                           intcon	equ	0xFF2
 12268                           intcon3	equ	0xFF0
 12269                           postinc0	equ	0xFEE
 12270                           wreg	equ	0xFE8
 12271                           postdec1	equ	0xFE5
 12272                           fsr1l	equ	0xFE1
 12273                           indf2	equ	0xFDF
 12274                           postinc2	equ	0xFDE
 12275                           postdec2	equ	0xFDD
 12276                           fsr2h	equ	0xFDA
 12277                           fsr2l	equ	0xFD9
 12278                           status	equ	0xFD8
 12279                           
 12280 ;; *************** function ___aldiv *****************
 12281 ;; Defined at:
 12282 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
 12283 ;; Parameters:    Size  Location     Type
 12284 ;;  dividend        4    0[BANK0 ] long 
 12285 ;;  divisor         4    4[BANK0 ] long 
 12286 ;; Auto vars:     Size  Location     Type
 12287 ;;  quotient        4   10[BANK0 ] long 
 12288 ;;  sign            1    9[BANK0 ] unsigned char 
 12289 ;;  counter         1    8[BANK0 ] unsigned char 
 12290 ;; Return value:  Size  Location     Type
 12291 ;;                  4    0[BANK0 ] long 
 12292 ;; Registers used:
 12293 ;;		wreg, status,2, status,0
 12294 ;; Tracked objects:
 12295 ;;		On entry : 0/0
 12296 ;;		On exit  : 0/0
 12297 ;;		Unchanged: 0/0
 12298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12299 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12300 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12302 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12303 ;;Total ram usage:       14 bytes
 12304 ;; Hardware stack levels used:    1
 12305 ;; Hardware stack levels required when called:    6
 12306 ;; This function calls:
 12307 ;;		Nothing
 12308 ;; This function is called by:
 12309 ;;		_main
 12310 ;; This function uses a non-reentrant model
 12311 ;;
 12312                           
 12313                           	psect	text43
 12314  003A3E                     __ptext43:
 12315                           	opt stack 0
 12316  003A3E                     ___aldiv:
 12317                           	opt stack 24
 12318                           
 12319                           ; BSR set to: 0
 12320                           ;incstack = 0
 12321  003A3E  0E00               	movlw	0
 12322  003A40  0100               	movlb	0	; () banked
 12323  003A42  6F89               	movwf	___aldiv@sign& (0+255),b
 12324                           
 12325                           ; BSR set to: 0
 12326  003A44  0100               	movlb	0	; () banked
 12327  003A46  AF87               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 12328  003A48  D00C               	goto	l6272
 12329                           
 12330                           ; BSR set to: 0
 12331  003A4A  0100               	movlb	0	; () banked
 12332  003A4C  1F87               	comf	(___aldiv@divisor+3)& (0+255),f,b
 12333  003A4E  1F86               	comf	(___aldiv@divisor+2)& (0+255),f,b
 12334  003A50  1F85               	comf	(___aldiv@divisor+1)& (0+255),f,b
 12335  003A52  6D84               	negf	___aldiv@divisor& (0+255),b
 12336  003A54  0E00               	movlw	0
 12337  003A56  2385               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
 12338  003A58  2386               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
 12339  003A5A  2387               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
 12340                           
 12341                           ; BSR set to: 0
 12342  003A5C  0E01               	movlw	1
 12343  003A5E  0100               	movlb	0	; () banked
 12344  003A60  6F89               	movwf	___aldiv@sign& (0+255),b
 12345  003A62                     l6272:
 12346                           
 12347                           ; BSR set to: 0
 12348  003A62  0100               	movlb	0	; () banked
 12349  003A64  AF83               	btfss	(___aldiv@dividend+3)& (0+255),7,b
 12350  003A66  D00C               	goto	l6278
 12351                           
 12352                           ; BSR set to: 0
 12353  003A68  0100               	movlb	0	; () banked
 12354  003A6A  1F83               	comf	(___aldiv@dividend+3)& (0+255),f,b
 12355  003A6C  1F82               	comf	(___aldiv@dividend+2)& (0+255),f,b
 12356  003A6E  1F81               	comf	(___aldiv@dividend+1)& (0+255),f,b
 12357  003A70  6D80               	negf	___aldiv@dividend& (0+255),b
 12358  003A72  0E00               	movlw	0
 12359  003A74  2381               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
 12360  003A76  2382               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
 12361  003A78  2383               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
 12362                           
 12363                           ; BSR set to: 0
 12364  003A7A  0E01               	movlw	1
 12365  003A7C  0100               	movlb	0	; () banked
 12366  003A7E  1B89               	xorwf	___aldiv@sign& (0+255),f,b
 12367  003A80                     l6278:
 12368                           
 12369                           ; BSR set to: 0
 12370  003A80  0E00               	movlw	0
 12371  003A82  0100               	movlb	0	; () banked
 12372  003A84  6F8A               	movwf	___aldiv@quotient& (0+255),b
 12373  003A86  0E00               	movlw	0
 12374  003A88  6F8B               	movwf	(___aldiv@quotient+1)& (0+255),b
 12375  003A8A  0E00               	movlw	0
 12376  003A8C  6F8C               	movwf	(___aldiv@quotient+2)& (0+255),b
 12377  003A8E  0E00               	movlw	0
 12378  003A90  6F8D               	movwf	(___aldiv@quotient+3)& (0+255),b
 12379                           
 12380                           ; BSR set to: 0
 12381  003A92  0100               	movlb	0	; () banked
 12382  003A94  5184               	movf	___aldiv@divisor& (0+255),w,b
 12383  003A96  0100               	movlb	0	; () banked
 12384  003A98  1185               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
 12385  003A9A  0100               	movlb	0	; () banked
 12386  003A9C  1186               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
 12387  003A9E  0100               	movlb	0	; () banked
 12388  003AA0  1187               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
 12389  003AA2  B4D8               	btfsc	status,2,c
 12390  003AA4  D042               	goto	l6300
 12391                           
 12392                           ; BSR set to: 0
 12393  003AA6  0E01               	movlw	1
 12394  003AA8  0100               	movlb	0	; () banked
 12395  003AAA  6F88               	movwf	___aldiv@counter& (0+255),b
 12396  003AAC  D008               	goto	l6286
 12397  003AAE                     l6284:
 12398                           
 12399                           ; BSR set to: 0
 12400  003AAE  0100               	movlb	0	; () banked
 12401  003AB0  90D8               	bcf	status,0,c
 12402  003AB2  3784               	rlcf	___aldiv@divisor& (0+255),f,b
 12403  003AB4  3785               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
 12404  003AB6  3786               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
 12405  003AB8  3787               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
 12406  003ABA  0100               	movlb	0	; () banked
 12407  003ABC  2B88               	incf	___aldiv@counter& (0+255),f,b
 12408  003ABE                     l6286:
 12409                           
 12410                           ; BSR set to: 0
 12411  003ABE  0100               	movlb	0	; () banked
 12412  003AC0  AF87               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 12413  003AC2  D7F5               	goto	l6284
 12414  003AC4                     l6288:
 12415                           
 12416                           ; BSR set to: 0
 12417  003AC4  0100               	movlb	0	; () banked
 12418  003AC6  90D8               	bcf	status,0,c
 12419  003AC8  378A               	rlcf	___aldiv@quotient& (0+255),f,b
 12420  003ACA  378B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 12421  003ACC  378C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 12422  003ACE  378D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 12423                           
 12424                           ; BSR set to: 0
 12425  003AD0  0100               	movlb	0	; () banked
 12426  003AD2  5184               	movf	___aldiv@divisor& (0+255),w,b
 12427  003AD4  0100               	movlb	0	; () banked
 12428  003AD6  5D80               	subwf	___aldiv@dividend& (0+255),w,b
 12429  003AD8  0100               	movlb	0	; () banked
 12430  003ADA  5185               	movf	(___aldiv@divisor+1)& (0+255),w,b
 12431  003ADC  0100               	movlb	0	; () banked
 12432  003ADE  5981               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
 12433  003AE0  0100               	movlb	0	; () banked
 12434  003AE2  5186               	movf	(___aldiv@divisor+2)& (0+255),w,b
 12435  003AE4  0100               	movlb	0	; () banked
 12436  003AE6  5982               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
 12437  003AE8  0100               	movlb	0	; () banked
 12438  003AEA  5187               	movf	(___aldiv@divisor+3)& (0+255),w,b
 12439  003AEC  0100               	movlb	0	; () banked
 12440  003AEE  5983               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
 12441  003AF0  A0D8               	btfss	status,0,c
 12442  003AF2  D012               	goto	l6296
 12443                           
 12444                           ; BSR set to: 0
 12445  003AF4  0100               	movlb	0	; () banked
 12446  003AF6  5184               	movf	___aldiv@divisor& (0+255),w,b
 12447  003AF8  0100               	movlb	0	; () banked
 12448  003AFA  5F80               	subwf	___aldiv@dividend& (0+255),f,b
 12449  003AFC  0100               	movlb	0	; () banked
 12450  003AFE  5185               	movf	(___aldiv@divisor+1)& (0+255),w,b
 12451  003B00  0100               	movlb	0	; () banked
 12452  003B02  5B81               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
 12453  003B04  0100               	movlb	0	; () banked
 12454  003B06  5186               	movf	(___aldiv@divisor+2)& (0+255),w,b
 12455  003B08  0100               	movlb	0	; () banked
 12456  003B0A  5B82               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
 12457  003B0C  0100               	movlb	0	; () banked
 12458  003B0E  5187               	movf	(___aldiv@divisor+3)& (0+255),w,b
 12459  003B10  0100               	movlb	0	; () banked
 12460  003B12  5B83               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
 12461                           
 12462                           ; BSR set to: 0
 12463  003B14  0100               	movlb	0	; () banked
 12464  003B16  818A               	bsf	___aldiv@quotient& (0+255),0,b
 12465  003B18                     l6296:
 12466                           
 12467                           ; BSR set to: 0
 12468  003B18  0100               	movlb	0	; () banked
 12469  003B1A  90D8               	bcf	status,0,c
 12470  003B1C  3387               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
 12471  003B1E  3386               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
 12472  003B20  3385               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
 12473  003B22  3384               	rrcf	___aldiv@divisor& (0+255),f,b
 12474                           
 12475                           ; BSR set to: 0
 12476  003B24  0100               	movlb	0	; () banked
 12477  003B26  2F88               	decfsz	___aldiv@counter& (0+255),f,b
 12478  003B28  D7CD               	goto	l6288
 12479  003B2A                     l6300:
 12480                           
 12481                           ; BSR set to: 0
 12482  003B2A  0100               	movlb	0	; () banked
 12483  003B2C  5189               	movf	___aldiv@sign& (0+255),w,b
 12484  003B2E  0100               	movlb	0	; () banked
 12485  003B30  B4D8               	btfsc	status,2,c
 12486  003B32  D009               	goto	l6304
 12487                           
 12488                           ; BSR set to: 0
 12489  003B34  0100               	movlb	0	; () banked
 12490  003B36  1F8D               	comf	(___aldiv@quotient+3)& (0+255),f,b
 12491  003B38  1F8C               	comf	(___aldiv@quotient+2)& (0+255),f,b
 12492  003B3A  1F8B               	comf	(___aldiv@quotient+1)& (0+255),f,b
 12493  003B3C  6D8A               	negf	___aldiv@quotient& (0+255),b
 12494  003B3E  0E00               	movlw	0
 12495  003B40  238B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 12496  003B42  238C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 12497  003B44  238D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 12498  003B46                     l6304:
 12499                           
 12500                           ; BSR set to: 0
 12501  003B46  C08A  F080         	movff	___aldiv@quotient,?___aldiv
 12502  003B4A  C08B  F081         	movff	___aldiv@quotient+1,?___aldiv+1
 12503  003B4E  C08C  F082         	movff	___aldiv@quotient+2,?___aldiv+2
 12504  003B52  C08D  F083         	movff	___aldiv@quotient+3,?___aldiv+3
 12505  003B56  0012               	return	
 12506  003B58                     __end_of___aldiv:
 12507                           	opt stack 0
 12508                           tblptru	equ	0xFF8
 12509                           tblptrh	equ	0xFF7
 12510                           tblptrl	equ	0xFF6
 12511                           tablat	equ	0xFF5
 12512                           prodh	equ	0xFF4
 12513                           prodl	equ	0xFF3
 12514                           intcon	equ	0xFF2
 12515                           intcon3	equ	0xFF0
 12516                           postinc0	equ	0xFEE
 12517                           wreg	equ	0xFE8
 12518                           postdec1	equ	0xFE5
 12519                           fsr1l	equ	0xFE1
 12520                           indf2	equ	0xFDF
 12521                           postinc2	equ	0xFDE
 12522                           postdec2	equ	0xFDD
 12523                           fsr2h	equ	0xFDA
 12524                           fsr2l	equ	0xFD9
 12525                           status	equ	0xFD8
 12526                           
 12527 ;; *************** function _service *****************
 12528 ;; Defined at:
 12529 ;;		line 251 in file "main.c"
 12530 ;; Parameters:    Size  Location     Type
 12531 ;;		None
 12532 ;; Auto vars:     Size  Location     Type
 12533 ;;  key             1  121[COMRAM] unsigned char 
 12534 ;; Return value:  Size  Location     Type
 12535 ;;                  1    wreg      void 
 12536 ;; Registers used:
 12537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12538 ;; Tracked objects:
 12539 ;;		On entry : 0/0
 12540 ;;		On exit  : 0/0
 12541 ;;		Unchanged: 0/0
 12542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12544 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12545 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12546 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12547 ;;Total ram usage:       19 bytes
 12548 ;; Hardware stack levels used:    1
 12549 ;; Hardware stack levels required when called:    5
 12550 ;; This function calls:
 12551 ;;		_servoInterruptService
 12552 ;;		i2_lcdClear
 12553 ;;		i2_printf
 12554 ;;		i2_startTimer
 12555 ;; This function is called by:
 12556 ;;		Interrupt level 2
 12557 ;; This function uses a non-reentrant model
 12558 ;;
 12559                           
 12560                           	psect	intcode
 12561  000008                     __pintcode:
 12562                           	opt stack 0
 12563  000008                     _service:
 12564                           	opt stack 18
 12565                           
 12566                           ; BSR set to: 0
 12567                           ;incstack = 0
 12568  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 12569  00000A  ED9E  F020         	call	int_func,f	;refresh shadow registers
 12570                           tblptru	equ	0xFF8
 12571                           tblptrh	equ	0xFF7
 12572                           tblptrl	equ	0xFF6
 12573                           tablat	equ	0xFF5
 12574                           prodh	equ	0xFF4
 12575                           prodl	equ	0xFF3
 12576                           intcon	equ	0xFF2
 12577                           intcon3	equ	0xFF0
 12578                           postinc0	equ	0xFEE
 12579                           wreg	equ	0xFE8
 12580                           postdec1	equ	0xFE5
 12581                           fsr1l	equ	0xFE1
 12582                           indf2	equ	0xFDF
 12583                           postinc2	equ	0xFDE
 12584                           postdec2	equ	0xFDD
 12585                           fsr2h	equ	0xFDA
 12586                           fsr2l	equ	0xFD9
 12587                           status	equ	0xFD8
 12588                           
 12589                           	psect	intcode_body
 12590  00413C                     __pintcode_body:
 12591                           	opt stack 18
 12592  00413C                     int_func:
 12593                           	opt stack 18
 12594  00413C  0006               	pop		; remove dummy address from shadow register refresh
 12595  00413E  CFFA F06C          	movff	pclath,??_service+4
 12596  004142  CFFB F06D          	movff	pclatu,??_service+5
 12597  004146  CFE9 F06E          	movff	fsr0l,??_service+6
 12598  00414A  CFEA F06F          	movff	fsr0h,??_service+7
 12599  00414E  CFE1 F070          	movff	fsr1l,??_service+8
 12600  004152  CFE2 F071          	movff	fsr1h,??_service+9
 12601  004156  CFD9 F072          	movff	fsr2l,??_service+10
 12602  00415A  CFDA F073          	movff	fsr2h,??_service+11
 12603  00415E  CFF3 F074          	movff	prodl,??_service+12
 12604  004162  CFF4 F075          	movff	prodh,??_service+13
 12605  004166  CFF6 F076          	movff	tblptrl,??_service+14
 12606  00416A  CFF7 F077          	movff	tblptrh,??_service+15
 12607  00416E  CFF8 F078          	movff	tblptru,??_service+16
 12608  004172  CFF5 F079          	movff	tablat,??_service+17
 12609                           
 12610                           ;main.c: 253: servoInterruptService();
 12611  004176  ECB4  F01E         	call	_servoInterruptService	;wreg free
 12612                           
 12613                           ;main.c: 255: if(TMR1IF){
 12614  00417A  A09E               	btfss	3998,0,c	;volatile
 12615  00417C  D024               	goto	i2l6710
 12616                           
 12617                           ;main.c: 256: startTimer(1,0xffff - period);
 12618  00417E  0E00               	movlw	0
 12619  004180  6E08               	movwf	i2startTimer@timer+1,c
 12620  004182  0E01               	movlw	1
 12621  004184  6E07               	movwf	i2startTimer@timer,c
 12622  004186  0EFF               	movlw	255
 12623  004188  6E68               	movwf	??_service& (0+255),c
 12624  00418A  0EFF               	movlw	255
 12625  00418C  6E69               	movwf	(??_service+1)& (0+255),c
 12626  00418E  C13A  F06A         	movff	_period,??_service+2
 12627  004192  C13B  F06B         	movff	_period+1,??_service+3
 12628  004196  1E6A               	comf	??_service+2,f,c
 12629  004198  1E6B               	comf	??_service+3,f,c
 12630  00419A  4A6A               	infsnz	??_service+2,f,c
 12631  00419C  2A6B               	incf	??_service+3,f,c
 12632  00419E  5068               	movf	??_service,w,c
 12633  0041A0  266A               	addwf	??_service+2,f,c
 12634  0041A2  5069               	movf	??_service+1,w,c
 12635  0041A4  226B               	addwfc	??_service+3,f,c
 12636  0041A6  C06A  F009         	movff	??_service+2,i2startTimer@val
 12637  0041AA  C06B  F00A         	movff	??_service+3,i2startTimer@val+1
 12638  0041AE  6A0B               	clrf	i2startTimer@val+2,c
 12639  0041B0  6A0C               	clrf	i2startTimer@val+3,c
 12640  0041B2  EC04  F027         	call	i2_startTimer	;wreg free
 12641                           
 12642                           ;main.c: 257: time+=1;
 12643  0041B6  0E01               	movlw	1
 12644  0041B8  0101               	movlb	1	; () banked
 12645  0041BA  2774               	addwf	_time& (0+255),f,b
 12646  0041BC  0E00               	movlw	0
 12647  0041BE  2375               	addwfc	(_time+1)& (0+255),f,b
 12648  0041C0  2376               	addwfc	(_time+2)& (0+255),f,b
 12649  0041C2  2377               	addwfc	(_time+3)& (0+255),f,b
 12650                           
 12651                           ; BSR set to: 1
 12652                           ;main.c: 258: TMR1IF = 0;
 12653  0041C4  909E               	bcf	3998,0,c	;volatile
 12654  0041C6                     i2l6710:
 12655                           
 12656                           ;main.c: 259: }
 12657                           ;main.c: 262: if(INT0IF){ INT0IF = 0;
 12658  0041C6  A2F2               	btfss	intcon,1,c	;volatile
 12659  0041C8  D006               	goto	i2l162
 12660  0041CA  92F2               	bcf	intcon,1,c	;volatile
 12661                           
 12662                           ;main.c: 263: batteryDetected = 1;
 12663  0041CC  0E00               	movlw	0
 12664  0041CE  0101               	movlb	1	; () banked
 12665  0041D0  6F82               	movwf	(_batteryDetected+1)& (0+255),b
 12666  0041D2  0E01               	movlw	1
 12667  0041D4  6F81               	movwf	_batteryDetected& (0+255),b
 12668  0041D6                     i2l162:
 12669  0041D6  C079  FFF5         	movff	??_service+17,tablat
 12670  0041DA  C078  FFF8         	movff	??_service+16,tblptru
 12671  0041DE  C077  FFF7         	movff	??_service+15,tblptrh
 12672  0041E2  C076  FFF6         	movff	??_service+14,tblptrl
 12673  0041E6  C075  FFF4         	movff	??_service+13,prodh
 12674  0041EA  C074  FFF3         	movff	??_service+12,prodl
 12675  0041EE  C073  FFDA         	movff	??_service+11,fsr2h
 12676  0041F2  C072  FFD9         	movff	??_service+10,fsr2l
 12677  0041F6  C071  FFE2         	movff	??_service+9,fsr1h
 12678  0041FA  C070  FFE1         	movff	??_service+8,fsr1l
 12679  0041FE  C06F  FFEA         	movff	??_service+7,fsr0h
 12680  004202  C06E  FFE9         	movff	??_service+6,fsr0l
 12681  004206  C06D  FFFB         	movff	??_service+5,pclatu
 12682  00420A  C06C  FFFA         	movff	??_service+4,pclath
 12683  00420E  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12684  004210  0011               	retfie		f
 12685  004212                     __end_of_service:
 12686                           	opt stack 0
 12687                           pclatu	equ	0xFFB
 12688                           pclath	equ	0xFFA
 12689                           tblptru	equ	0xFF8
 12690                           tblptrh	equ	0xFF7
 12691                           tblptrl	equ	0xFF6
 12692                           tablat	equ	0xFF5
 12693                           prodh	equ	0xFF4
 12694                           prodl	equ	0xFF3
 12695                           intcon	equ	0xFF2
 12696                           intcon3	equ	0xFF0
 12697                           postinc0	equ	0xFEE
 12698                           fsr0h	equ	0xFEA
 12699                           fsr0l	equ	0xFE9
 12700                           wreg	equ	0xFE8
 12701                           postdec1	equ	0xFE5
 12702                           fsr1h	equ	0xFE2
 12703                           fsr1l	equ	0xFE1
 12704                           indf2	equ	0xFDF
 12705                           postinc2	equ	0xFDE
 12706                           postdec2	equ	0xFDD
 12707                           fsr2h	equ	0xFDA
 12708                           fsr2l	equ	0xFD9
 12709                           status	equ	0xFD8
 12710                           
 12711 ;; *************** function i2_printf *****************
 12712 ;; Defined at:
 12713 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12714 ;; Parameters:    Size  Location     Type
 12715 ;;  f               2   63[COMRAM] PTR const unsigned char 
 12716 ;;		 -> STR_23(17), STR_22(18), STR_21(17), STR_20(18), 
 12717 ;;		 -> STR_19(17), STR_18(19), STR_17(17), STR_16(18), 
 12718 ;;		 -> STR_15(17), STR_14(18), STR_13(17), STR_12(18), 
 12719 ;;		 -> STR_11(8), STR_10(11), STR_9(25), STR_8(15), 
 12720 ;;		 -> STR_7(17), STR_6(20), STR_5(15), STR_4(14), 
 12721 ;;		 -> STR_3(20), STR_2(17), STR_1(8), 
 12722 ;; Auto vars:     Size  Location     Type
 12723 ;;  printf          4   91[COMRAM] unsigned long 
 12724 ;;  printf          4   85[COMRAM] struct .
 12725 ;;  printf          3   95[COMRAM] struct .
 12726 ;;  printf          2  100[COMRAM] unsigned short 
 12727 ;;  printf          2   98[COMRAM] int 
 12728 ;;  printf          2   89[COMRAM] int 
 12729 ;;  printf          2   83[COMRAM] int 
 12730 ;;  printf          2   81[COMRAM] PTR void [1]
 12731 ;;		 -> ?i2_printf(2), ?_printf(2), 
 12732 ;;  printf          2   79[COMRAM] unsigned int 
 12733 ;;  printf          2   77[COMRAM] PTR const unsigned char 
 12734 ;;		 -> printf@c(1), 
 12735 ;;  printf          1  102[COMRAM] char 
 12736 ;;  printf          1   76[COMRAM] unsigned char 
 12737 ;;  printf          1    0        unsigned char 
 12738 ;; Return value:  Size  Location     Type
 12739 ;;                  2   63[COMRAM] int 
 12740 ;; Registers used:
 12741 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12742 ;; Tracked objects:
 12743 ;;		On entry : 0/0
 12744 ;;		On exit  : 0/0
 12745 ;;		Unchanged: 0/0
 12746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12747 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12748 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12749 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12750 ;;      Totals:        40       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12751 ;;Total ram usage:       40 bytes
 12752 ;; Hardware stack levels used:    1
 12753 ;; Hardware stack levels required when called:    4
 12754 ;; This function calls:
 12755 ;;		i2___awdiv
 12756 ;;		i2___ftadd
 12757 ;;		i2___ftge
 12758 ;;		i2___ftmul
 12759 ;;		i2___ftneg
 12760 ;;		i2___ftsub
 12761 ;;		i2___fttol
 12762 ;;		i2___lldiv
 12763 ;;		i2___llmod
 12764 ;;		i2___lltoft
 12765 ;;		i2___wmul
 12766 ;;		i2__div_to_l_
 12767 ;;		i2__tdiv_to_l_
 12768 ;;		i2_fround
 12769 ;;		i2_isdigit
 12770 ;;		i2_putch
 12771 ;;		i2_scale
 12772 ;; This function is called by:
 12773 ;;		_service
 12774 ;; This function uses a non-reentrant model
 12775 ;;
 12776                           
 12777                           	psect	text45
 12778  000CCA                     __ptext45:
 12779                           	opt stack 0
 12780  000CCA                     i2_printf:
 12781                           	opt stack 18
 12782                           
 12783                           ;doprnt.c: 466: va_list ap;
 12784                           ;doprnt.c: 499: signed char c;
 12785                           ;doprnt.c: 501: int width;
 12786                           ;doprnt.c: 504: int prec;
 12787                           ;doprnt.c: 508: unsigned short flag;
 12788                           ;doprnt.c: 515: char d;
 12789                           ;doprnt.c: 516: double fval;
 12790                           ;doprnt.c: 517: int exp;
 12791                           ;doprnt.c: 523: union {
 12792                           ;doprnt.c: 524: unsigned long vd;
 12793                           ;doprnt.c: 525: double integ;
 12794                           ;doprnt.c: 526: } tmpval;
 12795                           ;doprnt.c: 528: unsigned long val;
 12796                           ;doprnt.c: 529: unsigned len;
 12797                           ;doprnt.c: 530: const char * cp;
 12798                           ;doprnt.c: 533: *ap = __va_start();
 12799                           
 12800                           ;incstack = 0
 12801  000CCA  0E42               	movlw	low (?i2_printf+2)
 12802  000CCC  6E52               	movwf	i2printf@ap,c
 12803  000CCE  0E00               	movlw	high (?i2_printf+2)
 12804  000CD0  6E53               	movwf	i2printf@ap+1,c
 12805                           
 12806                           ;doprnt.c: 536: while(c = *f++) {
 12807  000CD2  EF9B  F00B         	goto	i2l6670
 12808  000CD6                     i2l6348:
 12809                           
 12810                           ;doprnt.c: 538: if(c != '%')
 12811  000CD6  0E25               	movlw	37
 12812  000CD8  1867               	xorwf	i2printf@c,w,c
 12813  000CDA  B4D8               	btfsc	status,2,c
 12814  000CDC  D005               	goto	i2l6352
 12815                           
 12816                           ;doprnt.c: 540: {
 12817                           ;doprnt.c: 541: (putch(c) );
 12818  000CDE  5067               	movf	i2printf@c,w,c
 12819  000CE0  ECB7  F028         	call	i2_putch
 12820                           
 12821                           ;doprnt.c: 542: continue;
 12822  000CE4  EF9B  F00B         	goto	i2l6670
 12823  000CE8                     i2l6352:
 12824                           
 12825                           ;doprnt.c: 543: }
 12826                           ;doprnt.c: 546: width = 0;
 12827  000CE8  0E00               	movlw	0
 12828  000CEA  6E64               	movwf	i2printf@width+1,c
 12829  000CEC  0E00               	movlw	0
 12830  000CEE  6E63               	movwf	i2printf@width,c
 12831                           
 12832                           ;doprnt.c: 548: flag = 0;
 12833  000CF0  0E00               	movlw	0
 12834  000CF2  6E66               	movwf	i2printf@flag+1,c
 12835  000CF4  0E00               	movlw	0
 12836  000CF6  6E65               	movwf	i2printf@flag,c
 12837                           
 12838                           ;doprnt.c: 551: switch(*f) {
 12839                           
 12840                           ;doprnt.c: 550: for(;;) {
 12841  000CF8  D003               	goto	i2l6358
 12842  000CFA                     i2l6354:
 12843                           
 12844                           ;doprnt.c: 580: flag |= 0x04;
 12845  000CFA  8465               	bsf	i2printf@flag,2,c
 12846                           
 12847                           ;doprnt.c: 581: f++;
 12848  000CFC  4A40               	infsnz	i2printf@f,f,c
 12849  000CFE  2A41               	incf	i2printf@f+1,f,c
 12850  000D00                     i2l6358:
 12851  000D00  C040  FFF6         	movff	i2printf@f,tblptrl
 12852  000D04  C041  FFF7         	movff	i2printf@f+1,tblptrh
 12853  000D08                     	if	0	;tblptru may be non-zero
 12854  000D08                     	endif
 12855  000D08                     	if	0	;tblptru may be non-zero
 12856  000D08                     	endif
 12857  000D08  0008               	tblrd		*
 12858  000D0A  50F5               	movf	tablat,w,c
 12859                           
 12860                           ; Switch size 1, requested type "space"
 12861                           ; Number of cases is 1, Range of values is 48 to 48
 12862                           ; switch strategies available:
 12863                           ; Name         Instructions Cycles
 12864                           ; simple_byte            4     3 (average)
 12865                           ;	Chosen strategy is simple_byte
 12866  000D0C  0A30               	xorlw	48	; case 48
 12867  000D0E  B4D8               	btfsc	status,2,c
 12868  000D10  D7F4               	goto	i2l6354
 12869                           
 12870                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12871                           
 12872                           ;doprnt.c: 586: }
 12873                           
 12874                           ;doprnt.c: 585: break;
 12875  000D12  C040  FFF6         	movff	i2printf@f,tblptrl
 12876  000D16  C041  FFF7         	movff	i2printf@f+1,tblptrh
 12877  000D1A                     	if	0	;tblptru may be non-zero
 12878  000D1A                     	endif
 12879  000D1A                     	if	0	;tblptru may be non-zero
 12880  000D1A                     	endif
 12881  000D1A  0008               	tblrd		*
 12882  000D1C  50F5               	movf	tablat,w,c
 12883  000D1E  ECD9  F028         	call	i2_isdigit
 12884  000D22  A0D8               	btfss	status,0,c
 12885  000D24  D07B               	goto	i2l6404
 12886                           
 12887                           ;doprnt.c: 598: width = 0;
 12888  000D26  0E00               	movlw	0
 12889  000D28  6E64               	movwf	i2printf@width+1,c
 12890  000D2A  0E00               	movlw	0
 12891  000D2C  6E63               	movwf	i2printf@width,c
 12892  000D2E                     i2l6364:
 12893                           
 12894                           ;doprnt.c: 600: width *= 10;
 12895  000D2E  C063  F00F         	movff	i2printf@width,i2___wmul@multiplier
 12896  000D32  C064  F010         	movff	i2printf@width+1,i2___wmul@multiplier+1
 12897  000D36  0E00               	movlw	0
 12898  000D38  6E12               	movwf	i2___wmul@multiplicand+1,c
 12899  000D3A  0E0A               	movlw	10
 12900  000D3C  6E11               	movwf	i2___wmul@multiplicand,c
 12901  000D3E  EC92  F028         	call	i2___wmul	;wreg free
 12902  000D42  C00F  F063         	movff	?i2___wmul,i2printf@width
 12903  000D46  C010  F064         	movff	?i2___wmul+1,i2printf@width+1
 12904                           
 12905                           ;doprnt.c: 601: width += *f++ - '0';
 12906  000D4A  0ED0               	movlw	208
 12907  000D4C  6E44               	movwf	??i2_printf& (0+255),c
 12908  000D4E  0EFF               	movlw	255
 12909  000D50  6E45               	movwf	(??i2_printf+1)& (0+255),c
 12910  000D52  C040  FFF6         	movff	i2printf@f,tblptrl
 12911  000D56  C041  FFF7         	movff	i2printf@f+1,tblptrh
 12912  000D5A                     	if	0	;tblptru may be non-zero
 12913  000D5A                     	endif
 12914  000D5A                     	if	0	;tblptru may be non-zero
 12915  000D5A                     	endif
 12916  000D5A  0008               	tblrd		*
 12917  000D5C  50F5               	movf	tablat,w,c
 12918  000D5E  6E46               	movwf	(??i2_printf+2)& (0+255),c
 12919  000D60  6A47               	clrf	(??i2_printf+3)& (0+255),c
 12920  000D62  5044               	movf	??i2_printf,w,c
 12921  000D64  2646               	addwf	??i2_printf+2,f,c
 12922  000D66  5045               	movf	??i2_printf+1,w,c
 12923  000D68  2247               	addwfc	??i2_printf+3,f,c
 12924  000D6A  5046               	movf	??i2_printf+2,w,c
 12925  000D6C  2663               	addwf	i2printf@width,f,c
 12926  000D6E  5047               	movf	??i2_printf+3,w,c
 12927  000D70  2264               	addwfc	i2printf@width+1,f,c
 12928  000D72  4A40               	infsnz	i2printf@f,f,c
 12929  000D74  2A41               	incf	i2printf@f+1,f,c
 12930                           
 12931                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12932  000D76  C040  FFF6         	movff	i2printf@f,tblptrl
 12933  000D7A  C041  FFF7         	movff	i2printf@f+1,tblptrh
 12934  000D7E                     	if	0	;tblptru may be non-zero
 12935  000D7E                     	endif
 12936  000D7E                     	if	0	;tblptru may be non-zero
 12937  000D7E                     	endif
 12938  000D7E  0008               	tblrd		*
 12939  000D80  50F5               	movf	tablat,w,c
 12940  000D82  ECD9  F028         	call	i2_isdigit
 12941  000D86  A0D8               	btfss	status,0,c
 12942  000D88  D049               	goto	i2l6404
 12943  000D8A  D7D1               	goto	i2l6364
 12944  000D8C                     i2l6372:
 12945                           
 12946                           ;doprnt.c: 643: flag |= 0x10;
 12947  000D8C  8865               	bsf	i2printf@flag,4,c
 12948                           
 12949                           ;doprnt.c: 644: goto loop;
 12950  000D8E  D046               	goto	i2l6404
 12951  000D90                     i2l6374:
 12952                           
 12953                           ;doprnt.c: 663: flag |= 0x400;
 12954  000D90  8466               	bsf	i2printf@flag+1,2,c
 12955                           
 12956                           ;doprnt.c: 698: case 'i':
 12957                           ;doprnt.c: 699: break;
 12958                           
 12959                           ;doprnt.c: 697: case 'd':
 12960                           
 12961                           ;doprnt.c: 664: break;
 12962  000D92  D064               	goto	i2l6406
 12963  000D94                     i2l6376:
 12964                           
 12965                           ;doprnt.c: 721: flag |= 0x80;
 12966  000D94  8E65               	bsf	i2printf@flag,7,c
 12967                           
 12968                           ;doprnt.c: 723: break;
 12969  000D96  D062               	goto	i2l6406
 12970  000D98                     i2l6378:
 12971                           
 12972                           ;doprnt.c: 757: if(width > len)
 12973  000D98  5063               	movf	i2printf@width,w,c
 12974  000D9A  5C50               	subwf	i2printf@len,w,c
 12975  000D9C  5064               	movf	i2printf@width+1,w,c
 12976  000D9E  5851               	subwfb	i2printf@len+1,w,c
 12977  000DA0  B0D8               	btfsc	status,0,c
 12978  000DA2  D005               	goto	i2l6382
 12979                           
 12980                           ;doprnt.c: 758: width -= len;
 12981  000DA4  5050               	movf	i2printf@len,w,c
 12982  000DA6  5E63               	subwf	i2printf@width,f,c
 12983  000DA8  5051               	movf	i2printf@len+1,w,c
 12984  000DAA  5A64               	subwfb	i2printf@width+1,f,c
 12985  000DAC  D008               	goto	i2l6386
 12986  000DAE                     i2l6382:
 12987                           
 12988                           ;doprnt.c: 759: else
 12989                           ;doprnt.c: 760: width = 0;
 12990  000DAE  0E00               	movlw	0
 12991  000DB0  6E64               	movwf	i2printf@width+1,c
 12992  000DB2  0E00               	movlw	0
 12993  000DB4  6E63               	movwf	i2printf@width,c
 12994                           
 12995                           ;doprnt.c: 764: while(width--)
 12996  000DB6  D003               	goto	i2l6386
 12997  000DB8                     i2l6384:
 12998                           
 12999                           ;doprnt.c: 765: (putch(' ') );
 13000  000DB8  0E20               	movlw	32
 13001  000DBA  ECB7  F028         	call	i2_putch
 13002  000DBE                     i2l6386:
 13003  000DBE  0663               	decf	i2printf@width,f,c
 13004  000DC0  A0D8               	btfss	status,0,c
 13005  000DC2  0664               	decf	i2printf@width+1,f,c
 13006  000DC4  2863               	incf	i2printf@width,w,c
 13007  000DC6  E1F8               	bnz	i2l6384
 13008  000DC8  2864               	incf	i2printf@width+1,w,c
 13009  000DCA  B4D8               	btfsc	status,2,c
 13010  000DCC  D00A               	goto	i2l6392
 13011  000DCE  D7F4               	goto	i2l6384
 13012  000DD0                     i2l6388:
 13013                           
 13014                           ;doprnt.c: 768: (putch(*cp++) );
 13015  000DD0  C04E  FFD9         	movff	i2printf@cp,fsr2l
 13016  000DD4  C04F  FFDA         	movff	i2printf@cp+1,fsr2h
 13017  000DD8  50DF               	movf	indf2,w,c
 13018  000DDA  ECB7  F028         	call	i2_putch
 13019  000DDE  4A4E               	infsnz	i2printf@cp,f,c
 13020  000DE0  2A4F               	incf	i2printf@cp+1,f,c
 13021  000DE2                     i2l6392:
 13022  000DE2  0650               	decf	i2printf@len,f,c
 13023  000DE4  A0D8               	btfss	status,0,c
 13024  000DE6  0651               	decf	i2printf@len+1,f,c
 13025  000DE8  2850               	incf	i2printf@len,w,c
 13026  000DEA  E1F2               	bnz	i2l6388
 13027  000DEC  2851               	incf	i2printf@len+1,w,c
 13028  000DEE  B4D8               	btfsc	status,2,c
 13029  000DF0  EF9B  F00B         	goto	i2l6670
 13030  000DF4  D7ED               	goto	i2l6388
 13031  000DF6                     i2l6394:
 13032                           
 13033                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 13034  000DF6  C052  FFD9         	movff	i2printf@ap,fsr2l
 13035  000DFA  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 13036  000DFE  50DF               	movf	indf2,w,c
 13037  000E00  6E67               	movwf	i2printf@c,c
 13038  000E02  0E02               	movlw	2
 13039  000E04  2652               	addwf	i2printf@ap,f,c
 13040  000E06  0E00               	movlw	0
 13041  000E08  2253               	addwfc	i2printf@ap+1,f,c
 13042  000E0A                     i2l6398:
 13043                           
 13044                           ;doprnt.c: 805: cp = (char *)&c;
 13045  000E0A  0E67               	movlw	low i2printf@c
 13046  000E0C  6E4E               	movwf	i2printf@cp,c
 13047  000E0E  0E00               	movlw	high i2printf@c
 13048  000E10  6E4F               	movwf	i2printf@cp+1,c
 13049                           
 13050                           ;doprnt.c: 806: len = 1;
 13051  000E12  0E00               	movlw	0
 13052  000E14  6E51               	movwf	i2printf@len+1,c
 13053  000E16  0E01               	movlw	1
 13054  000E18  6E50               	movwf	i2printf@len,c
 13055                           
 13056                           ;doprnt.c: 807: goto dostring;
 13057  000E1A  D7BE               	goto	i2l6378
 13058  000E1C                     i2l6404:
 13059  000E1C  C040  FFF6         	movff	i2printf@f,tblptrl
 13060  000E20  C041  FFF7         	movff	i2printf@f+1,tblptrh
 13061  000E24  4A40               	infsnz	i2printf@f,f,c
 13062  000E26  2A41               	incf	i2printf@f+1,f,c
 13063  000E28                     	if	0	;tblptru may be non-zero
 13064  000E28                     	endif
 13065  000E28                     	if	0	;tblptru may be non-zero
 13066  000E28                     	endif
 13067  000E28  0008               	tblrd		*
 13068  000E2A  CFF5 F067          	movff	tablat,i2printf@c
 13069  000E2E  5067               	movf	i2printf@c,w,c
 13070                           
 13071                           ; Switch size 1, requested type "space"
 13072                           ; Number of cases is 7, Range of values is 0 to 120
 13073                           ; switch strategies available:
 13074                           ; Name         Instructions Cycles
 13075                           ; simple_byte           22    12 (average)
 13076                           ;	Chosen strategy is simple_byte
 13077  000E30  0A00               	xorlw	0	; case 0
 13078  000E32  B4D8               	btfsc	status,2,c
 13079  000E34  0012               	return	
 13080  000E36  0A63               	xorlw	99	; case 99
 13081  000E38  B4D8               	btfsc	status,2,c
 13082  000E3A  D7DD               	goto	i2l6394
 13083  000E3C  0A07               	xorlw	7	; case 100
 13084  000E3E  B4D8               	btfsc	status,2,c
 13085  000E40  D00D               	goto	i2l6406
 13086  000E42  0A02               	xorlw	2	; case 102
 13087  000E44  B4D8               	btfsc	status,2,c
 13088  000E46  D7A4               	goto	i2l6374
 13089  000E48  0A0F               	xorlw	15	; case 105
 13090  000E4A  B4D8               	btfsc	status,2,c
 13091  000E4C  D007               	goto	i2l6406
 13092  000E4E  0A05               	xorlw	5	; case 108
 13093  000E50  B4D8               	btfsc	status,2,c
 13094  000E52  D79C               	goto	i2l6372
 13095  000E54  0A14               	xorlw	20	; case 120
 13096  000E56  B4D8               	btfsc	status,2,c
 13097  000E58  D79D               	goto	i2l6376
 13098  000E5A  D7D7               	goto	i2l6398
 13099  000E5C                     i2l6406:
 13100                           
 13101                           ;doprnt.c: 825: if(flag & (0x700)) {
 13102  000E5C  0E07               	movlw	7
 13103  000E5E  1466               	andwf	i2printf@flag+1,w,c
 13104  000E60  B4D8               	btfsc	status,2,c
 13105  000E62  D2EC               	goto	i2l695
 13106                           
 13107                           ;doprnt.c: 829: prec = 6;
 13108  000E64  0E00               	movlw	0
 13109  000E66  6E55               	movwf	i2printf@prec+1,c
 13110  000E68  0E06               	movlw	6
 13111  000E6A  6E54               	movwf	i2printf@prec,c
 13112                           
 13113                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 13114  000E6C  C052  FFD9         	movff	i2printf@ap,fsr2l
 13115  000E70  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 13116  000E74  CFDE F060          	movff	postinc2,i2printf@fval
 13117  000E78  CFDE F061          	movff	postinc2,i2printf@fval+1
 13118  000E7C  CFDD F062          	movff	postdec2,i2printf@fval+2
 13119  000E80  0E03               	movlw	3
 13120  000E82  2652               	addwf	i2printf@ap,f,c
 13121  000E84  0E00               	movlw	0
 13122  000E86  2253               	addwfc	i2printf@ap+1,f,c
 13123                           
 13124                           ;doprnt.c: 831: if(fval < 0.0) {
 13125  000E88  AE62               	btfss	i2printf@fval+2,7,c
 13126  000E8A  D010               	goto	i2l6420
 13127                           
 13128                           ;doprnt.c: 832: fval = -fval;
 13129  000E8C  C060  F001         	movff	i2printf@fval,i2___ftneg@f1
 13130  000E90  C061  F002         	movff	i2printf@fval+1,i2___ftneg@f1+1
 13131  000E94  C062  F003         	movff	i2printf@fval+2,i2___ftneg@f1+2
 13132  000E98  ECA5  F028         	call	i2___ftneg	;wreg free
 13133  000E9C  C001  F060         	movff	?i2___ftneg,i2printf@fval
 13134  000EA0  C002  F061         	movff	?i2___ftneg+1,i2printf@fval+1
 13135  000EA4  C003  F062         	movff	?i2___ftneg+2,i2printf@fval+2
 13136                           
 13137                           ;doprnt.c: 833: flag |= 0x03;
 13138  000EA8  0E03               	movlw	3
 13139  000EAA  1265               	iorwf	i2printf@flag,f,c
 13140  000EAC                     i2l6420:
 13141                           
 13142                           ;doprnt.c: 834: }
 13143                           ;doprnt.c: 835: exp = 0;
 13144  000EAC  0E00               	movlw	0
 13145  000EAE  6E5B               	movwf	i2printf@exp+1,c
 13146  000EB0  0E00               	movlw	0
 13147  000EB2  6E5A               	movwf	i2printf@exp,c
 13148                           
 13149                           ;doprnt.c: 836: if( fval!=0) {
 13150  000EB4  5060               	movf	i2printf@fval,w,c
 13151  000EB6  1061               	iorwf	i2printf@fval+1,w,c
 13152  000EB8  1062               	iorwf	i2printf@fval+2,w,c
 13153  000EBA  B4D8               	btfsc	status,2,c
 13154  000EBC  D083               	goto	i2l6448
 13155                           
 13156                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 13157  000EBE  0E82               	movlw	130
 13158  000EC0  6E44               	movwf	??i2_printf& (0+255),c
 13159  000EC2  0EFF               	movlw	255
 13160  000EC4  6E45               	movwf	(??i2_printf+1)& (0+255),c
 13161  000EC6  C060  F046         	movff	i2printf@fval,??i2_printf+2
 13162  000ECA  C061  F047         	movff	i2printf@fval+1,??i2_printf+3
 13163  000ECE  C062  F048         	movff	i2printf@fval+2,??i2_printf+4
 13164  000ED2  C063  F049         	movff	i2printf@fval+3,??i2_printf+5
 13165  000ED6  0E10               	movlw	16
 13166  000ED8  D005               	goto	i2u700_40
 13167  000EDA                     i2u700_45:
 13168  000EDA  90D8               	bcf	status,0,c
 13169  000EDC  3249               	rrcf	??i2_printf+5,f,c
 13170  000EDE  3248               	rrcf	??i2_printf+4,f,c
 13171  000EE0  3247               	rrcf	??i2_printf+3,f,c
 13172  000EE2  3246               	rrcf	??i2_printf+2,f,c
 13173  000EE4                     i2u700_40:
 13174  000EE4  2EE8               	decfsz	wreg,f,c
 13175  000EE6  D7F9               	goto	i2u700_45
 13176  000EE8  5046               	movf	??i2_printf+2,w,c
 13177  000EEA  2444               	addwf	??i2_printf,w,c
 13178  000EEC  6E5A               	movwf	i2printf@exp,c
 13179  000EEE  0E00               	movlw	0
 13180  000EF0  2045               	addwfc	??i2_printf+1,w,c
 13181  000EF2  6E5B               	movwf	i2printf@exp+1,c
 13182                           
 13183                           ;doprnt.c: 838: exp--;
 13184  000EF4  065A               	decf	i2printf@exp,f,c
 13185  000EF6  A0D8               	btfss	status,0,c
 13186  000EF8  065B               	decf	i2printf@exp+1,f,c
 13187                           
 13188                           ;doprnt.c: 839: exp *= 3;
 13189  000EFA  C05A  F00F         	movff	i2printf@exp,i2___wmul@multiplier
 13190  000EFE  C05B  F010         	movff	i2printf@exp+1,i2___wmul@multiplier+1
 13191  000F02  0E00               	movlw	0
 13192  000F04  6E12               	movwf	i2___wmul@multiplicand+1,c
 13193  000F06  0E03               	movlw	3
 13194  000F08  6E11               	movwf	i2___wmul@multiplicand,c
 13195  000F0A  EC92  F028         	call	i2___wmul	;wreg free
 13196  000F0E  C00F  F05A         	movff	?i2___wmul,i2printf@exp
 13197  000F12  C010  F05B         	movff	?i2___wmul+1,i2printf@exp+1
 13198                           
 13199                           ;doprnt.c: 840: exp /= 10;
 13200  000F16  C05A  F007         	movff	i2printf@exp,i2___awdiv@dividend
 13201  000F1A  C05B  F008         	movff	i2printf@exp+1,i2___awdiv@dividend+1
 13202  000F1E  0E00               	movlw	0
 13203  000F20  6E0A               	movwf	i2___awdiv@divisor+1,c
 13204  000F22  0E0A               	movlw	10
 13205  000F24  6E09               	movwf	i2___awdiv@divisor,c
 13206  000F26  ECC6  F024         	call	i2___awdiv	;wreg free
 13207  000F2A  C007  F05A         	movff	?i2___awdiv,i2printf@exp
 13208  000F2E  C008  F05B         	movff	?i2___awdiv+1,i2printf@exp+1
 13209                           
 13210                           ;doprnt.c: 841: if(exp < 0)
 13211  000F32  AE5B               	btfss	i2printf@exp+1,7,c
 13212  000F34  D003               	goto	i2l6436
 13213                           
 13214                           ;doprnt.c: 842: exp--;
 13215  000F36  065A               	decf	i2printf@exp,f,c
 13216  000F38  A0D8               	btfss	status,0,c
 13217  000F3A  065B               	decf	i2printf@exp+1,f,c
 13218  000F3C                     i2l6436:
 13219                           
 13220                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 13221  000F3C  505A               	movf	i2printf@exp,w,c
 13222  000F3E  0800               	sublw	0
 13223  000F40  EC00  F00E         	call	i2_scale
 13224  000F44  C024  F056         	movff	?i2_scale,i2printf@tmpval
 13225  000F48  C025  F057         	movff	?i2_scale+1,i2printf@tmpval+1
 13226  000F4C  C026  F058         	movff	?i2_scale+2,i2printf@tmpval+2
 13227                           
 13228                           ;doprnt.c: 847: tmpval.integ *= fval;
 13229  000F50  C056  F015         	movff	i2printf@tmpval,i2___ftmul@f1
 13230  000F54  C057  F016         	movff	i2printf@tmpval+1,i2___ftmul@f1+1
 13231  000F58  C058  F017         	movff	i2printf@tmpval+2,i2___ftmul@f1+2
 13232  000F5C  C060  F018         	movff	i2printf@fval,i2___ftmul@f2
 13233  000F60  C061  F019         	movff	i2printf@fval+1,i2___ftmul@f2+1
 13234  000F64  C062  F01A         	movff	i2printf@fval+2,i2___ftmul@f2+2
 13235  000F68  EC31  F01F         	call	i2___ftmul	;wreg free
 13236  000F6C  C015  F056         	movff	?i2___ftmul,i2printf@tmpval
 13237  000F70  C016  F057         	movff	?i2___ftmul+1,i2printf@tmpval+1
 13238  000F74  C017  F058         	movff	?i2___ftmul+2,i2printf@tmpval+2
 13239                           
 13240                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 13241  000F78  C056  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 13242  000F7C  C057  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 13243  000F80  C058  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 13244  000F84  0E00               	movlw	0
 13245  000F86  6E04               	movwf	i2___ftge@ff2,c
 13246  000F88  0E80               	movlw	128
 13247  000F8A  6E05               	movwf	i2___ftge@ff2+1,c
 13248  000F8C  0E3F               	movlw	63
 13249  000F8E  6E06               	movwf	i2___ftge@ff2+2,c
 13250  000F90  EC38  F024         	call	i2___ftge	;wreg free
 13251  000F94  B0D8               	btfsc	status,0,c
 13252  000F96  D004               	goto	i2l6444
 13253                           
 13254                           ;doprnt.c: 849: exp--;
 13255  000F98  065A               	decf	i2printf@exp,f,c
 13256  000F9A  A0D8               	btfss	status,0,c
 13257  000F9C  065B               	decf	i2printf@exp+1,f,c
 13258  000F9E  D012               	goto	i2l6448
 13259  000FA0                     i2l6444:
 13260                           
 13261                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 13262  000FA0  C056  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 13263  000FA4  C057  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 13264  000FA8  C058  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 13265  000FAC  0E00               	movlw	0
 13266  000FAE  6E04               	movwf	i2___ftge@ff2,c
 13267  000FB0  0E20               	movlw	32
 13268  000FB2  6E05               	movwf	i2___ftge@ff2+1,c
 13269  000FB4  0E41               	movlw	65
 13270  000FB6  6E06               	movwf	i2___ftge@ff2+2,c
 13271  000FB8  EC38  F024         	call	i2___ftge	;wreg free
 13272  000FBC  A0D8               	btfss	status,0,c
 13273  000FBE  D002               	goto	i2l6448
 13274                           
 13275                           ;doprnt.c: 851: exp++;
 13276  000FC0  4A5A               	infsnz	i2printf@exp,f,c
 13277  000FC2  2A5B               	incf	i2printf@exp+1,f,c
 13278  000FC4                     i2l6448:
 13279                           
 13280                           ;doprnt.c: 852: }
 13281                           ;doprnt.c: 1112: if(prec <= 12)
 13282  000FC4  BE55               	btfsc	i2printf@prec+1,7,c
 13283  000FC6  D006               	goto	i2l6450
 13284  000FC8  5055               	movf	i2printf@prec+1,w,c
 13285  000FCA  E11B               	bnz	i2l6452
 13286  000FCC  0E0D               	movlw	13
 13287  000FCE  5C54               	subwf	i2printf@prec,w,c
 13288  000FD0  B0D8               	btfsc	status,0,c
 13289  000FD2  D017               	goto	i2l6452
 13290  000FD4                     i2l6450:
 13291                           
 13292                           ;doprnt.c: 1113: fval += fround(prec);
 13293  000FD4  C060  F02E         	movff	i2printf@fval,i2___ftadd@f1
 13294  000FD8  C061  F02F         	movff	i2printf@fval+1,i2___ftadd@f1+1
 13295  000FDC  C062  F030         	movff	i2printf@fval+2,i2___ftadd@f1+2
 13296  000FE0  5054               	movf	i2printf@prec,w,c
 13297  000FE2  EC50  F014         	call	i2_fround
 13298  000FE6  C024  F031         	movff	?i2_fround,i2___ftadd@f2
 13299  000FEA  C025  F032         	movff	?i2_fround+1,i2___ftadd@f2+1
 13300  000FEE  C026  F033         	movff	?i2_fround+2,i2___ftadd@f2+2
 13301  000FF2  EC73  F015         	call	i2___ftadd	;wreg free
 13302  000FF6  C02E  F060         	movff	?i2___ftadd,i2printf@fval
 13303  000FFA  C02F  F061         	movff	?i2___ftadd+1,i2printf@fval+1
 13304  000FFE  C030  F062         	movff	?i2___ftadd+2,i2printf@fval+2
 13305  001002                     i2l6452:
 13306                           
 13307                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 13308  001002  BE5B               	btfsc	i2printf@exp+1,7,c
 13309  001004  D006               	goto	i2l6454
 13310  001006  505B               	movf	i2printf@exp+1,w,c
 13311  001008  E11E               	bnz	i2l6460
 13312  00100A  0E0A               	movlw	10
 13313  00100C  5C5A               	subwf	i2printf@exp,w,c
 13314  00100E  B0D8               	btfsc	status,0,c
 13315  001010  D01A               	goto	i2l6460
 13316  001012                     i2l6454:
 13317  001012  5060               	movf	i2printf@fval,w,c
 13318  001014  1061               	iorwf	i2printf@fval+1,w,c
 13319  001016  1062               	iorwf	i2printf@fval+2,w,c
 13320  001018  B4D8               	btfsc	status,2,c
 13321  00101A  D051               	goto	i2l6474
 13322  00101C  C060  F02B         	movff	i2printf@fval,i2___fttol@f1
 13323  001020  C061  F02C         	movff	i2printf@fval+1,i2___fttol@f1+1
 13324  001024  C062  F02D         	movff	i2printf@fval+2,i2___fttol@f1+2
 13325  001028  ECAB  F01F         	call	i2___fttol	;wreg free
 13326  00102C  502B               	movf	?i2___fttol,w,c
 13327  00102E  102C               	iorwf	?i2___fttol+1,w,c
 13328  001030  102D               	iorwf	?i2___fttol+2,w,c
 13329  001032  102E               	iorwf	?i2___fttol+3,w,c
 13330  001034  B4D8               	btfsc	status,2,c
 13331  001036  BE5B               	btfsc	i2printf@exp+1,7,c
 13332  001038  D042               	goto	i2l6474
 13333  00103A  505B               	movf	i2printf@exp+1,w,c
 13334  00103C  E104               	bnz	i2l6460
 13335  00103E  0E02               	movlw	2
 13336  001040  5C5A               	subwf	i2printf@exp,w,c
 13337  001042  A0D8               	btfss	status,0,c
 13338  001044  D03C               	goto	i2l6474
 13339  001046                     i2l6460:
 13340                           
 13341                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 13342  001046  C056  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 13343  00104A  C057  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 13344  00104E  C058  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 13345  001052  0E70               	movlw	112
 13346  001054  6E04               	movwf	i2___ftge@ff2,c
 13347  001056  0E89               	movlw	137
 13348  001058  6E05               	movwf	i2___ftge@ff2+1,c
 13349  00105A  0E40               	movlw	64
 13350  00105C  6E06               	movwf	i2___ftge@ff2+2,c
 13351  00105E  EC38  F024         	call	i2___ftge	;wreg free
 13352  001062  B0D8               	btfsc	status,0,c
 13353  001064  D002               	goto	i2l6464
 13354                           
 13355                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 13356  001066  0EF7               	movlw	247
 13357  001068  D001               	goto	L8
 13358  00106A                     i2l6464:
 13359                           
 13360                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 13361  00106A  0EF8               	movlw	248
 13362  00106C                     L8:
 13363  00106C  265A               	addwf	i2printf@exp,f,c
 13364  00106E  0EFF               	movlw	255
 13365  001070  225B               	addwfc	i2printf@exp+1,f,c
 13366                           
 13367                           ;doprnt.c: 1124: }
 13368                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 13369  001072  505A               	movf	i2printf@exp,w,c
 13370  001074  EC00  F00E         	call	i2_scale
 13371  001078  C024  F056         	movff	?i2_scale,i2printf@tmpval
 13372  00107C  C025  F057         	movff	?i2_scale+1,i2printf@tmpval+1
 13373  001080  C026  F058         	movff	?i2_scale+2,i2printf@tmpval+2
 13374                           
 13375                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 13376  001084  C060  F001         	movff	i2printf@fval,i2__tdiv_to_l_@f1
 13377  001088  C061  F002         	movff	i2printf@fval+1,i2__tdiv_to_l_@f1+1
 13378  00108C  C062  F003         	movff	i2printf@fval+2,i2__tdiv_to_l_@f1+2
 13379  001090  C056  F004         	movff	i2printf@tmpval,i2__tdiv_to_l_@f2
 13380  001094  C057  F005         	movff	i2printf@tmpval+1,i2__tdiv_to_l_@f2+1
 13381  001098  C058  F006         	movff	i2printf@tmpval+2,i2__tdiv_to_l_@f2+2
 13382  00109C  EC5A  F01B         	call	i2__tdiv_to_l_	;wreg free
 13383  0010A0  C001  F05C         	movff	?i2__tdiv_to_l_,i2printf@val
 13384  0010A4  C002  F05D         	movff	?i2__tdiv_to_l_+1,i2printf@val+1
 13385  0010A8  C003  F05E         	movff	?i2__tdiv_to_l_+2,i2printf@val+2
 13386  0010AC  C004  F05F         	movff	?i2__tdiv_to_l_+3,i2printf@val+3
 13387                           
 13388                           ;doprnt.c: 1129: fval = 0.0;
 13389  0010B0  0E00               	movlw	0
 13390  0010B2  6E60               	movwf	i2printf@fval,c
 13391  0010B4  0E00               	movlw	0
 13392  0010B6  6E61               	movwf	i2printf@fval+1,c
 13393  0010B8  0E00               	movlw	0
 13394  0010BA  6E62               	movwf	i2printf@fval+2,c
 13395                           
 13396                           ;doprnt.c: 1130: } else {
 13397  0010BC  D032               	goto	i2l6478
 13398  0010BE                     i2l6474:
 13399                           
 13400                           ;doprnt.c: 1131: val = (unsigned long)fval;
 13401  0010BE  C060  F02B         	movff	i2printf@fval,i2___fttol@f1
 13402  0010C2  C061  F02C         	movff	i2printf@fval+1,i2___fttol@f1+1
 13403  0010C6  C062  F02D         	movff	i2printf@fval+2,i2___fttol@f1+2
 13404  0010CA  ECAB  F01F         	call	i2___fttol	;wreg free
 13405  0010CE  C02B  F05C         	movff	?i2___fttol,i2printf@val
 13406  0010D2  C02C  F05D         	movff	?i2___fttol+1,i2printf@val+1
 13407  0010D6  C02D  F05E         	movff	?i2___fttol+2,i2printf@val+2
 13408  0010DA  C02E  F05F         	movff	?i2___fttol+3,i2printf@val+3
 13409                           
 13410                           ;doprnt.c: 1132: fval -= (double)val;
 13411  0010DE  C060  F03A         	movff	i2printf@fval,i2___ftsub@f1
 13412  0010E2  C061  F03B         	movff	i2printf@fval+1,i2___ftsub@f1+1
 13413  0010E6  C062  F03C         	movff	i2printf@fval+2,i2___ftsub@f1+2
 13414  0010EA  C05C  F009         	movff	i2printf@val,i2___lltoft@c
 13415  0010EE  C05D  F00A         	movff	i2printf@val+1,i2___lltoft@c+1
 13416  0010F2  C05E  F00B         	movff	i2printf@val+2,i2___lltoft@c+2
 13417  0010F6  C05F  F00C         	movff	i2printf@val+3,i2___lltoft@c+3
 13418  0010FA  EC61  F026         	call	i2___lltoft	;wreg free
 13419  0010FE  C009  F03D         	movff	?i2___lltoft,i2___ftsub@f2
 13420  001102  C00A  F03E         	movff	?i2___lltoft+1,i2___ftsub@f2+1
 13421  001106  C00B  F03F         	movff	?i2___lltoft+2,i2___ftsub@f2+2
 13422  00110A  ECD5  F027         	call	i2___ftsub	;wreg free
 13423  00110E  C03A  F060         	movff	?i2___ftsub,i2printf@fval
 13424  001112  C03B  F061         	movff	?i2___ftsub+1,i2printf@fval+1
 13425  001116  C03C  F062         	movff	?i2___ftsub+2,i2printf@fval+2
 13426                           
 13427                           ;doprnt.c: 1133: exp = 0;
 13428  00111A  0E00               	movlw	0
 13429  00111C  6E5B               	movwf	i2printf@exp+1,c
 13430  00111E  0E00               	movlw	0
 13431  001120  6E5A               	movwf	i2printf@exp,c
 13432  001122                     i2l6478:
 13433                           
 13434                           ;doprnt.c: 1134: }
 13435                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 13436  001122  0E01               	movlw	1
 13437  001124  6E67               	movwf	i2printf@c,c
 13438  001126                     i2l6480:
 13439  001126  0E0A               	movlw	10
 13440  001128  1867               	xorwf	i2printf@c,w,c
 13441  00112A  B4D8               	btfsc	status,2,c
 13442  00112C  D018               	goto	i2l6492
 13443                           
 13444                           ;doprnt.c: 1137: if(val < dpowers[c])
 13445  00112E  5067               	movf	i2printf@c,w,c
 13446  001130  0D04               	mullw	4
 13447  001132  0EC3               	movlw	low _dpowers
 13448  001134  24F3               	addwf	prodl,w,c
 13449  001136  6EF6               	movwf	tblptrl,c
 13450  001138  0EFD               	movlw	high _dpowers
 13451  00113A  20F4               	addwfc	prodh,w,c
 13452  00113C  6EF7               	movwf	tblptrh,c
 13453  00113E                     	if	0	;There are less than 3 active tblptr bytes
 13454  00113E                     	endif
 13455  00113E  0009               	tblrd		*+
 13456  001140  50F5               	movf	tablat,w,c
 13457  001142  5C5C               	subwf	i2printf@val,w,c
 13458  001144  0009               	tblrd		*+
 13459  001146  50F5               	movf	tablat,w,c
 13460  001148  585D               	subwfb	i2printf@val+1,w,c
 13461  00114A  0009               	tblrd		*+
 13462  00114C  50F5               	movf	tablat,w,c
 13463  00114E  585E               	subwfb	i2printf@val+2,w,c
 13464  001150  0009               	tblrd		*+
 13465  001152  50F5               	movf	tablat,w,c
 13466  001154  585F               	subwfb	i2printf@val+3,w,c
 13467  001156  A0D8               	btfss	status,0,c
 13468  001158  D002               	goto	i2l6492
 13469                           
 13470                           ;doprnt.c: 1138: break;
 13471  00115A  2A67               	incf	i2printf@c,f,c
 13472  00115C  D7E4               	goto	i2l6480
 13473  00115E                     i2l6492:
 13474                           
 13475                           ;doprnt.c: 1142: width -= prec + c + exp;
 13476  00115E  C067  F044         	movff	i2printf@c,??i2_printf
 13477  001162  6A45               	clrf	(??i2_printf+1)& (0+255),c
 13478  001164  BE44               	btfsc	??i2_printf& (0+255),7,c
 13479  001166  0645               	decf	(??i2_printf+1)& (0+255),f,c
 13480  001168  5054               	movf	i2printf@prec,w,c
 13481  00116A  2644               	addwf	??i2_printf,f,c
 13482  00116C  5055               	movf	i2printf@prec+1,w,c
 13483  00116E  2245               	addwfc	??i2_printf+1,f,c
 13484  001170  505A               	movf	i2printf@exp,w,c
 13485  001172  2644               	addwf	??i2_printf,f,c
 13486  001174  505B               	movf	i2printf@exp+1,w,c
 13487  001176  2245               	addwfc	??i2_printf+1,f,c
 13488  001178  5044               	movf	??i2_printf,w,c
 13489  00117A  5E63               	subwf	i2printf@width,f,c
 13490  00117C  5045               	movf	??i2_printf+1,w,c
 13491  00117E  5A64               	subwfb	i2printf@width+1,f,c
 13492                           
 13493                           ;doprnt.c: 1143: if(
 13494                           ;doprnt.c: 1147: prec)
 13495  001180  5054               	movf	i2printf@prec,w,c
 13496  001182  1055               	iorwf	i2printf@prec+1,w,c
 13497  001184  B4D8               	btfsc	status,2,c
 13498  001186  D003               	goto	i2l6496
 13499                           
 13500                           ;doprnt.c: 1148: width--;
 13501  001188  0663               	decf	i2printf@width,f,c
 13502  00118A  A0D8               	btfss	status,0,c
 13503  00118C  0664               	decf	i2printf@width+1,f,c
 13504  00118E                     i2l6496:
 13505                           
 13506                           ;doprnt.c: 1149: if(flag & 0x03)
 13507  00118E  0E03               	movlw	3
 13508  001190  1465               	andwf	i2printf@flag,w,c
 13509  001192  6E44               	movwf	??i2_printf& (0+255),c
 13510  001194  0E00               	movlw	0
 13511  001196  1466               	andwf	i2printf@flag+1,w,c
 13512  001198  6E45               	movwf	(??i2_printf+1)& (0+255),c
 13513  00119A  5044               	movf	??i2_printf,w,c
 13514  00119C  1045               	iorwf	??i2_printf+1,w,c
 13515  00119E  B4D8               	btfsc	status,2,c
 13516  0011A0  D003               	goto	i2l6500
 13517                           
 13518                           ;doprnt.c: 1150: width--;
 13519  0011A2  0663               	decf	i2printf@width,f,c
 13520  0011A4  A0D8               	btfss	status,0,c
 13521  0011A6  0664               	decf	i2printf@width+1,f,c
 13522  0011A8                     i2l6500:
 13523                           
 13524                           ;doprnt.c: 1153: if(flag & 0x04) {
 13525  0011A8  A465               	btfss	i2printf@flag,2,c
 13526  0011AA  D022               	goto	i2l6516
 13527                           
 13528                           ;doprnt.c: 1157: if(flag & 0x03)
 13529  0011AC  0E03               	movlw	3
 13530  0011AE  1465               	andwf	i2printf@flag,w,c
 13531  0011B0  6E44               	movwf	??i2_printf& (0+255),c
 13532  0011B2  0E00               	movlw	0
 13533  0011B4  1466               	andwf	i2printf@flag+1,w,c
 13534  0011B6  6E45               	movwf	(??i2_printf+1)& (0+255),c
 13535  0011B8  5044               	movf	??i2_printf,w,c
 13536  0011BA  1045               	iorwf	??i2_printf+1,w,c
 13537  0011BC  B4D8               	btfsc	status,2,c
 13538  0011BE  D00A               	goto	i2l6510
 13539                           
 13540                           ;doprnt.c: 1159: (putch('-') );
 13541  0011C0  0E2D               	movlw	45
 13542  0011C2  ECB7  F028         	call	i2_putch
 13543                           
 13544                           ;doprnt.c: 1168: while(width > 0) {
 13545  0011C6  D006               	goto	i2l6510
 13546  0011C8                     i2l6506:
 13547                           
 13548                           ;doprnt.c: 1169: (putch('0') );
 13549  0011C8  0E30               	movlw	48
 13550  0011CA  ECB7  F028         	call	i2_putch
 13551                           
 13552                           ;doprnt.c: 1170: width--;
 13553  0011CE  0663               	decf	i2printf@width,f,c
 13554  0011D0  A0D8               	btfss	status,0,c
 13555  0011D2  0664               	decf	i2printf@width+1,f,c
 13556  0011D4                     i2l6510:
 13557  0011D4  BE64               	btfsc	i2printf@width+1,7,c
 13558  0011D6  D065               	goto	i2l6528
 13559  0011D8  5064               	movf	i2printf@width+1,w,c
 13560  0011DA  E1F6               	bnz	i2l6506
 13561  0011DC  0463               	decf	i2printf@width,w,c
 13562  0011DE  A0D8               	btfss	status,0,c
 13563  0011E0  D060               	goto	i2l6528
 13564  0011E2  D7F2               	goto	i2l6506
 13565  0011E4                     i2l6512:
 13566                           
 13567                           ;doprnt.c: 1181: (putch(' ') );
 13568  0011E4  0E20               	movlw	32
 13569  0011E6  ECB7  F028         	call	i2_putch
 13570                           
 13571                           ;doprnt.c: 1182: width--;
 13572  0011EA  0663               	decf	i2printf@width,f,c
 13573  0011EC  A0D8               	btfss	status,0,c
 13574  0011EE  0664               	decf	i2printf@width+1,f,c
 13575  0011F0                     i2l6516:
 13576  0011F0  BE64               	btfsc	i2printf@width+1,7,c
 13577  0011F2  D005               	goto	i2l6518
 13578  0011F4  5064               	movf	i2printf@width+1,w,c
 13579  0011F6  E1F6               	bnz	i2l6512
 13580  0011F8  0463               	decf	i2printf@width,w,c
 13581  0011FA  B0D8               	btfsc	status,0,c
 13582  0011FC  D7F3               	goto	i2l6512
 13583  0011FE                     i2l6518:
 13584                           
 13585                           ;doprnt.c: 1183: }
 13586                           ;doprnt.c: 1188: if(flag & 0x03)
 13587  0011FE  0E03               	movlw	3
 13588  001200  1465               	andwf	i2printf@flag,w,c
 13589  001202  6E44               	movwf	??i2_printf& (0+255),c
 13590  001204  0E00               	movlw	0
 13591  001206  1466               	andwf	i2printf@flag+1,w,c
 13592  001208  6E45               	movwf	(??i2_printf+1)& (0+255),c
 13593  00120A  5044               	movf	??i2_printf,w,c
 13594  00120C  1045               	iorwf	??i2_printf+1,w,c
 13595  00120E  B4D8               	btfsc	status,2,c
 13596  001210  D048               	goto	i2l6528
 13597                           
 13598                           ;doprnt.c: 1190: (putch('-') );
 13599  001212  0E2D               	movlw	45
 13600  001214  ECB7  F028         	call	i2_putch
 13601                           
 13602                           ;doprnt.c: 1195: }
 13603                           ;doprnt.c: 1196: while(c--) {
 13604  001218  D044               	goto	i2l6528
 13605  00121A                     i2l6522:
 13606                           
 13607                           ;doprnt.c: 1200: {
 13608                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 13609  00121A  C05C  F001         	movff	i2printf@val,i2___lldiv@dividend
 13610  00121E  C05D  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 13611  001222  C05E  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 13612  001226  C05F  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 13613  00122A  5067               	movf	i2printf@c,w,c
 13614  00122C  0D04               	mullw	4
 13615  00122E  0EC3               	movlw	low _dpowers
 13616  001230  24F3               	addwf	prodl,w,c
 13617  001232  6EF6               	movwf	tblptrl,c
 13618  001234  0EFD               	movlw	high _dpowers
 13619  001236  20F4               	addwfc	prodh,w,c
 13620  001238  6EF7               	movwf	tblptrh,c
 13621  00123A                     	if	0	;There are less than 3 active tblptr bytes
 13622  00123A                     	endif
 13623  00123A  0009               	tblrd		*+
 13624  00123C  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 13625  001240  0009               	tblrd		*+
 13626  001242  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 13627  001246  0009               	tblrd		*+
 13628  001248  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 13629  00124C  000A               	tblrd		*-
 13630  00124E  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 13631  001252  EC08  F025         	call	i2___lldiv	;wreg free
 13632  001256  C001  F056         	movff	?i2___lldiv,i2printf@tmpval
 13633  00125A  C002  F057         	movff	?i2___lldiv+1,i2printf@tmpval+1
 13634  00125E  C003  F058         	movff	?i2___lldiv+2,i2printf@tmpval+2
 13635  001262  C004  F059         	movff	?i2___lldiv+3,i2printf@tmpval+3
 13636                           
 13637                           ;doprnt.c: 1202: tmpval.vd %= 10;
 13638  001266  C056  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 13639  00126A  C057  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 13640  00126E  C058  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 13641  001272  C059  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 13642  001276  0E0A               	movlw	10
 13643  001278  6E12               	movwf	i2___llmod@divisor,c
 13644  00127A  0E00               	movlw	0
 13645  00127C  6E13               	movwf	i2___llmod@divisor+1,c
 13646  00127E  0E00               	movlw	0
 13647  001280  6E14               	movwf	i2___llmod@divisor+2,c
 13648  001282  0E00               	movlw	0
 13649  001284  6E15               	movwf	i2___llmod@divisor+3,c
 13650  001286  ECFB  F025         	call	i2___llmod	;wreg free
 13651  00128A  C00E  F056         	movff	?i2___llmod,i2printf@tmpval
 13652  00128E  C00F  F057         	movff	?i2___llmod+1,i2printf@tmpval+1
 13653  001292  C010  F058         	movff	?i2___llmod+2,i2printf@tmpval+2
 13654  001296  C011  F059         	movff	?i2___llmod+3,i2printf@tmpval+3
 13655                           
 13656                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 13657  00129A  5056               	movf	i2printf@tmpval,w,c
 13658  00129C  0F30               	addlw	48
 13659  00129E  ECB7  F028         	call	i2_putch
 13660  0012A2                     i2l6528:
 13661  0012A2  0667               	decf	i2printf@c,f,c
 13662  0012A4  2867               	incf	i2printf@c,w,c
 13663  0012A6  B4D8               	btfsc	status,2,c
 13664  0012A8  D007               	goto	i2l6534
 13665  0012AA  D7B7               	goto	i2l6522
 13666  0012AC                     i2l6530:
 13667                           
 13668                           ;doprnt.c: 1208: (putch('0') );
 13669  0012AC  0E30               	movlw	48
 13670  0012AE  ECB7  F028         	call	i2_putch
 13671                           
 13672                           ;doprnt.c: 1209: exp--;
 13673  0012B2  065A               	decf	i2printf@exp,f,c
 13674  0012B4  A0D8               	btfss	status,0,c
 13675  0012B6  065B               	decf	i2printf@exp+1,f,c
 13676  0012B8                     i2l6534:
 13677  0012B8  BE5B               	btfsc	i2printf@exp+1,7,c
 13678  0012BA  D005               	goto	i2l6536
 13679  0012BC  505B               	movf	i2printf@exp+1,w,c
 13680  0012BE  E1F6               	bnz	i2l6530
 13681  0012C0  045A               	decf	i2printf@exp,w,c
 13682  0012C2  B0D8               	btfsc	status,0,c
 13683  0012C4  D7F3               	goto	i2l6530
 13684  0012C6                     i2l6536:
 13685                           
 13686                           ;doprnt.c: 1210: }
 13687                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 13688  0012C6  BE55               	btfsc	i2printf@prec+1,7,c
 13689  0012C8  D009               	goto	i2l734
 13690  0012CA  5055               	movf	i2printf@prec+1,w,c
 13691  0012CC  E104               	bnz	i2u722_40
 13692  0012CE  0E09               	movlw	9
 13693  0012D0  5C54               	subwf	i2printf@prec,w,c
 13694  0012D2  A0D8               	btfss	status,0,c
 13695  0012D4  D003               	goto	i2l734
 13696  0012D6                     i2u722_40:
 13697                           
 13698                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 13699  0012D6  0E08               	movlw	8
 13700  0012D8  6E67               	movwf	i2printf@c,c
 13701  0012DA  D002               	goto	i2l6540
 13702  0012DC                     i2l734:
 13703                           
 13704                           ;doprnt.c: 1213: else
 13705                           ;doprnt.c: 1214: c = prec;
 13706  0012DC  C054  F067         	movff	i2printf@prec,i2printf@c
 13707  0012E0                     i2l6540:
 13708                           
 13709                           ;doprnt.c: 1215: prec -= c;
 13710  0012E0  5067               	movf	i2printf@c,w,c
 13711  0012E2  5E54               	subwf	i2printf@prec,f,c
 13712  0012E4  0E00               	movlw	0
 13713  0012E6  BE67               	btfsc	i2printf@c,7,c
 13714  0012E8  0EFF               	movlw	255
 13715  0012EA  5A55               	subwfb	i2printf@prec+1,f,c
 13716                           
 13717                           ;doprnt.c: 1219: if(c)
 13718  0012EC  5067               	movf	i2printf@c,w,c
 13719  0012EE  B4D8               	btfsc	status,2,c
 13720  0012F0  D003               	goto	i2l6546
 13721                           
 13722                           ;doprnt.c: 1221: (putch('.') );
 13723  0012F2  0E2E               	movlw	46
 13724  0012F4  ECB7  F028         	call	i2_putch
 13725  0012F8                     i2l6546:
 13726                           
 13727                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 13728  0012F8  5067               	movf	i2printf@c,w,c
 13729  0012FA  EC00  F00E         	call	i2_scale
 13730  0012FE  C024  F04A         	movff	?i2_scale,i2_printf$1535
 13731  001302  C025  F04B         	movff	?i2_scale+1,i2_printf$1535+1
 13732  001306  C026  F04C         	movff	?i2_scale+2,i2_printf$1535+2
 13733                           
 13734                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 13735  00130A  C060  F018         	movff	i2printf@fval,i2___ftmul@f2
 13736  00130E  C061  F019         	movff	i2printf@fval+1,i2___ftmul@f2+1
 13737  001312  C062  F01A         	movff	i2printf@fval+2,i2___ftmul@f2+2
 13738  001316  C04A  F015         	movff	i2_printf$1535,i2___ftmul@f1
 13739  00131A  C04B  F016         	movff	i2_printf$1535+1,i2___ftmul@f1+1
 13740  00131E  C04C  F017         	movff	i2_printf$1535+2,i2___ftmul@f1+2
 13741  001322  EC31  F01F         	call	i2___ftmul	;wreg free
 13742  001326  C015  F02B         	movff	?i2___ftmul,i2___fttol@f1
 13743  00132A  C016  F02C         	movff	?i2___ftmul+1,i2___fttol@f1+1
 13744  00132E  C017  F02D         	movff	?i2___ftmul+2,i2___fttol@f1+2
 13745  001332  ECAB  F01F         	call	i2___fttol	;wreg free
 13746  001336  C02B  F05C         	movff	?i2___fttol,i2printf@val
 13747  00133A  C02C  F05D         	movff	?i2___fttol+1,i2printf@val+1
 13748  00133E  C02D  F05E         	movff	?i2___fttol+2,i2printf@val+2
 13749  001342  C02E  F05F         	movff	?i2___fttol+3,i2printf@val+3
 13750                           
 13751                           ;doprnt.c: 1228: while(c--) {
 13752  001346  D06A               	goto	i2l6556
 13753  001348                     i2l6550:
 13754                           
 13755                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 13756  001348  C05C  F001         	movff	i2printf@val,i2___lldiv@dividend
 13757  00134C  C05D  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 13758  001350  C05E  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 13759  001354  C05F  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 13760  001358  5067               	movf	i2printf@c,w,c
 13761  00135A  0D04               	mullw	4
 13762  00135C  0EC3               	movlw	low _dpowers
 13763  00135E  24F3               	addwf	prodl,w,c
 13764  001360  6EF6               	movwf	tblptrl,c
 13765  001362  0EFD               	movlw	high _dpowers
 13766  001364  20F4               	addwfc	prodh,w,c
 13767  001366  6EF7               	movwf	tblptrh,c
 13768  001368                     	if	0	;There are less than 3 active tblptr bytes
 13769  001368                     	endif
 13770  001368  0009               	tblrd		*+
 13771  00136A  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 13772  00136E  0009               	tblrd		*+
 13773  001370  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 13774  001374  0009               	tblrd		*+
 13775  001376  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 13776  00137A  000A               	tblrd		*-
 13777  00137C  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 13778  001380  EC08  F025         	call	i2___lldiv	;wreg free
 13779  001384  C001  F056         	movff	?i2___lldiv,i2printf@tmpval
 13780  001388  C002  F057         	movff	?i2___lldiv+1,i2printf@tmpval+1
 13781  00138C  C003  F058         	movff	?i2___lldiv+2,i2printf@tmpval+2
 13782  001390  C004  F059         	movff	?i2___lldiv+3,i2printf@tmpval+3
 13783                           
 13784                           ;doprnt.c: 1230: tmpval.vd %= 10;
 13785  001394  C056  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 13786  001398  C057  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 13787  00139C  C058  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 13788  0013A0  C059  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 13789  0013A4  0E0A               	movlw	10
 13790  0013A6  6E12               	movwf	i2___llmod@divisor,c
 13791  0013A8  0E00               	movlw	0
 13792  0013AA  6E13               	movwf	i2___llmod@divisor+1,c
 13793  0013AC  0E00               	movlw	0
 13794  0013AE  6E14               	movwf	i2___llmod@divisor+2,c
 13795  0013B0  0E00               	movlw	0
 13796  0013B2  6E15               	movwf	i2___llmod@divisor+3,c
 13797  0013B4  ECFB  F025         	call	i2___llmod	;wreg free
 13798  0013B8  C00E  F056         	movff	?i2___llmod,i2printf@tmpval
 13799  0013BC  C00F  F057         	movff	?i2___llmod+1,i2printf@tmpval+1
 13800  0013C0  C010  F058         	movff	?i2___llmod+2,i2printf@tmpval+2
 13801  0013C4  C011  F059         	movff	?i2___llmod+3,i2printf@tmpval+3
 13802                           
 13803                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 13804  0013C8  5056               	movf	i2printf@tmpval,w,c
 13805  0013CA  0F30               	addlw	48
 13806  0013CC  ECB7  F028         	call	i2_putch
 13807                           
 13808                           ;doprnt.c: 1232: val %= dpowers[c];
 13809  0013D0  C05C  F00E         	movff	i2printf@val,i2___llmod@dividend
 13810  0013D4  C05D  F00F         	movff	i2printf@val+1,i2___llmod@dividend+1
 13811  0013D8  C05E  F010         	movff	i2printf@val+2,i2___llmod@dividend+2
 13812  0013DC  C05F  F011         	movff	i2printf@val+3,i2___llmod@dividend+3
 13813  0013E0  5067               	movf	i2printf@c,w,c
 13814  0013E2  0D04               	mullw	4
 13815  0013E4  0EC3               	movlw	low _dpowers
 13816  0013E6  24F3               	addwf	prodl,w,c
 13817  0013E8  6EF6               	movwf	tblptrl,c
 13818  0013EA  0EFD               	movlw	high _dpowers
 13819  0013EC  20F4               	addwfc	prodh,w,c
 13820  0013EE  6EF7               	movwf	tblptrh,c
 13821  0013F0                     	if	0	;There are less than 3 active tblptr bytes
 13822  0013F0                     	endif
 13823  0013F0  0009               	tblrd		*+
 13824  0013F2  CFF5 F012          	movff	tablat,i2___llmod@divisor
 13825  0013F6  0009               	tblrd		*+
 13826  0013F8  CFF5 F013          	movff	tablat,i2___llmod@divisor+1
 13827  0013FC  0009               	tblrd		*+
 13828  0013FE  CFF5 F014          	movff	tablat,i2___llmod@divisor+2
 13829  001402  000A               	tblrd		*-
 13830  001404  CFF5 F015          	movff	tablat,i2___llmod@divisor+3
 13831  001408  ECFB  F025         	call	i2___llmod	;wreg free
 13832  00140C  C00E  F05C         	movff	?i2___llmod,i2printf@val
 13833  001410  C00F  F05D         	movff	?i2___llmod+1,i2printf@val+1
 13834  001414  C010  F05E         	movff	?i2___llmod+2,i2printf@val+2
 13835  001418  C011  F05F         	movff	?i2___llmod+3,i2printf@val+3
 13836  00141C                     i2l6556:
 13837  00141C  0667               	decf	i2printf@c,f,c
 13838  00141E  2867               	incf	i2printf@c,w,c
 13839  001420  B4D8               	btfsc	status,2,c
 13840  001422  D007               	goto	i2l6562
 13841  001424  D791               	goto	i2l6550
 13842  001426                     i2l6558:
 13843                           
 13844                           ;doprnt.c: 1236: (putch('0') );
 13845  001426  0E30               	movlw	48
 13846  001428  ECB7  F028         	call	i2_putch
 13847                           
 13848                           ;doprnt.c: 1237: prec--;
 13849  00142C  0654               	decf	i2printf@prec,f,c
 13850  00142E  A0D8               	btfss	status,0,c
 13851  001430  0655               	decf	i2printf@prec+1,f,c
 13852  001432                     i2l6562:
 13853  001432  5054               	movf	i2printf@prec,w,c
 13854  001434  1055               	iorwf	i2printf@prec+1,w,c
 13855  001436  B4D8               	btfsc	status,2,c
 13856  001438  D17E               	goto	i2l6670
 13857  00143A  D7F5               	goto	i2l6558
 13858  00143C                     i2l695:
 13859                           
 13860                           ;doprnt.c: 1246: }
 13861                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 13862  00143C  BE65               	btfsc	i2printf@flag,7,c
 13863  00143E  D02E               	goto	i2l743
 13864                           
 13865                           ;doprnt.c: 1253: {
 13866                           ;doprnt.c: 1255: if(flag & 0x10)
 13867  001440  A865               	btfss	i2printf@flag,4,c
 13868  001442  D00E               	goto	i2l6570
 13869                           
 13870                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
 13871  001444  C052  FFD9         	movff	i2printf@ap,fsr2l
 13872  001448  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 13873  00144C  CFDE F05C          	movff	postinc2,i2printf@val
 13874  001450  CFDE F05D          	movff	postinc2,i2printf@val+1
 13875  001454  CFDE F05E          	movff	postinc2,i2printf@val+2
 13876  001458  CFDE F05F          	movff	postinc2,i2printf@val+3
 13877  00145C  0E04               	movlw	4
 13878  00145E  D00E               	goto	L9
 13879  001460                     i2l6570:
 13880                           
 13881                           ;doprnt.c: 1257: else
 13882                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 13883  001460  C052  FFD9         	movff	i2printf@ap,fsr2l
 13884  001464  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 13885  001468  CFDE F05C          	movff	postinc2,i2printf@val
 13886  00146C  CFDD F05D          	movff	postdec2,i2printf@val+1
 13887  001470  0E00               	movlw	0
 13888  001472  BE5D               	btfsc	i2printf@val+1,7,c
 13889  001474  0EFF               	movlw	-1
 13890  001476  6E5E               	movwf	i2printf@val+2,c
 13891  001478  6E5F               	movwf	i2printf@val+3,c
 13892  00147A  0E02               	movlw	2
 13893  00147C                     L9:
 13894  00147C  2652               	addwf	i2printf@ap,f,c
 13895  00147E  0E00               	movlw	0
 13896  001480  2253               	addwfc	i2printf@ap+1,f,c
 13897                           
 13898                           ;doprnt.c: 1261: if((long)val < 0) {
 13899  001482  AE5F               	btfss	i2printf@val+3,7,c
 13900  001484  D06A               	goto	i2l6618
 13901                           
 13902                           ;doprnt.c: 1262: flag |= 0x03;
 13903  001486  0E03               	movlw	3
 13904  001488  1265               	iorwf	i2printf@flag,f,c
 13905                           
 13906                           ;doprnt.c: 1263: val = -val;
 13907  00148A  1E5F               	comf	i2printf@val+3,f,c
 13908  00148C  1E5E               	comf	i2printf@val+2,f,c
 13909  00148E  1E5D               	comf	i2printf@val+1,f,c
 13910  001490  6C5C               	negf	i2printf@val,c
 13911  001492  0E00               	movlw	0
 13912  001494  225D               	addwfc	i2printf@val+1,f,c
 13913  001496  225E               	addwfc	i2printf@val+2,f,c
 13914  001498  225F               	addwfc	i2printf@val+3,f,c
 13915                           
 13916                           ;doprnt.c: 1264: }
 13917                           ;doprnt.c: 1266: }
 13918  00149A  D05F               	goto	i2l6618
 13919  00149C                     i2l743:
 13920                           
 13921                           ;doprnt.c: 1268: else
 13922                           ;doprnt.c: 1273: {
 13923                           ;doprnt.c: 1281: if(flag & 0x10)
 13924  00149C  A865               	btfss	i2printf@flag,4,c
 13925  00149E  D00E               	goto	i2l6584
 13926                           
 13927                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
 13928  0014A0  C052  FFD9         	movff	i2printf@ap,fsr2l
 13929  0014A4  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 13930  0014A8  CFDE F05C          	movff	postinc2,i2printf@val
 13931  0014AC  CFDE F05D          	movff	postinc2,i2printf@val+1
 13932  0014B0  CFDE F05E          	movff	postinc2,i2printf@val+2
 13933  0014B4  CFDE F05F          	movff	postinc2,i2printf@val+3
 13934  0014B8  0E04               	movlw	4
 13935  0014BA  D00F               	goto	L10
 13936  0014BC                     i2l6584:
 13937                           
 13938                           ;doprnt.c: 1283: else
 13939                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13940  0014BC  C052  FFD9         	movff	i2printf@ap,fsr2l
 13941  0014C0  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 13942  0014C4  CFDE F044          	movff	postinc2,??i2_printf
 13943  0014C8  CFDD F045          	movff	postdec2,??i2_printf+1
 13944  0014CC  C044  F05C         	movff	??i2_printf,i2printf@val
 13945  0014D0  C045  F05D         	movff	??i2_printf+1,i2printf@val+1
 13946  0014D4  6A5E               	clrf	i2printf@val+2,c
 13947  0014D6  6A5F               	clrf	i2printf@val+3,c
 13948  0014D8  0E02               	movlw	2
 13949  0014DA                     L10:
 13950  0014DA  2652               	addwf	i2printf@ap,f,c
 13951  0014DC  0E00               	movlw	0
 13952  0014DE  2253               	addwfc	i2printf@ap+1,f,c
 13953                           
 13954                           ;doprnt.c: 1287: }
 13955                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 13956  0014E0  D03C               	goto	i2l6618
 13957  0014E2                     i2l6588:
 13958                           
 13959                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13960  0014E2  0E01               	movlw	1
 13961  0014E4  6E67               	movwf	i2printf@c,c
 13962  0014E6                     i2l6590:
 13963  0014E6  0E0A               	movlw	10
 13964  0014E8  1867               	xorwf	i2printf@c,w,c
 13965  0014EA  B4D8               	btfsc	status,2,c
 13966  0014EC  D03E               	goto	i2l6620
 13967                           
 13968                           ;doprnt.c: 1306: if(val < dpowers[c])
 13969  0014EE  5067               	movf	i2printf@c,w,c
 13970  0014F0  0D04               	mullw	4
 13971  0014F2  0EC3               	movlw	low _dpowers
 13972  0014F4  24F3               	addwf	prodl,w,c
 13973  0014F6  6EF6               	movwf	tblptrl,c
 13974  0014F8  0EFD               	movlw	high _dpowers
 13975  0014FA  20F4               	addwfc	prodh,w,c
 13976  0014FC  6EF7               	movwf	tblptrh,c
 13977  0014FE                     	if	0	;There are less than 3 active tblptr bytes
 13978  0014FE                     	endif
 13979  0014FE  0009               	tblrd		*+
 13980  001500  50F5               	movf	tablat,w,c
 13981  001502  5C5C               	subwf	i2printf@val,w,c
 13982  001504  0009               	tblrd		*+
 13983  001506  50F5               	movf	tablat,w,c
 13984  001508  585D               	subwfb	i2printf@val+1,w,c
 13985  00150A  0009               	tblrd		*+
 13986  00150C  50F5               	movf	tablat,w,c
 13987  00150E  585E               	subwfb	i2printf@val+2,w,c
 13988  001510  0009               	tblrd		*+
 13989  001512  50F5               	movf	tablat,w,c
 13990  001514  585F               	subwfb	i2printf@val+3,w,c
 13991  001516  A0D8               	btfss	status,0,c
 13992  001518  D028               	goto	i2l6620
 13993                           
 13994                           ;doprnt.c: 1307: break;
 13995  00151A  2A67               	incf	i2printf@c,f,c
 13996  00151C  D7E4               	goto	i2l6590
 13997  00151E                     i2l6602:
 13998                           
 13999                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 14000  00151E  0E01               	movlw	1
 14001  001520  6E67               	movwf	i2printf@c,c
 14002  001522                     i2l6604:
 14003  001522  0E08               	movlw	8
 14004  001524  1867               	xorwf	i2printf@c,w,c
 14005  001526  B4D8               	btfsc	status,2,c
 14006  001528  D020               	goto	i2l6620
 14007                           
 14008                           ;doprnt.c: 1317: if(val < hexpowers[c])
 14009  00152A  5067               	movf	i2printf@c,w,c
 14010  00152C  0D04               	mullw	4
 14011  00152E  0E39               	movlw	low _hexpowers
 14012  001530  24F3               	addwf	prodl,w,c
 14013  001532  6EF6               	movwf	tblptrl,c
 14014  001534  0EFE               	movlw	high _hexpowers
 14015  001536  20F4               	addwfc	prodh,w,c
 14016  001538  6EF7               	movwf	tblptrh,c
 14017  00153A                     	if	0	;There are less than 3 active tblptr bytes
 14018  00153A                     	endif
 14019  00153A  0009               	tblrd		*+
 14020  00153C  50F5               	movf	tablat,w,c
 14021  00153E  5C5C               	subwf	i2printf@val,w,c
 14022  001540  0009               	tblrd		*+
 14023  001542  50F5               	movf	tablat,w,c
 14024  001544  585D               	subwfb	i2printf@val+1,w,c
 14025  001546  0009               	tblrd		*+
 14026  001548  50F5               	movf	tablat,w,c
 14027  00154A  585E               	subwfb	i2printf@val+2,w,c
 14028  00154C  0009               	tblrd		*+
 14029  00154E  50F5               	movf	tablat,w,c
 14030  001550  585F               	subwfb	i2printf@val+3,w,c
 14031  001552  A0D8               	btfss	status,0,c
 14032  001554  D00A               	goto	i2l6620
 14033                           
 14034                           ;doprnt.c: 1318: break;
 14035  001556  2A67               	incf	i2printf@c,f,c
 14036  001558  D7E4               	goto	i2l6604
 14037  00155A                     i2l6618:
 14038  00155A  5065               	movf	i2printf@flag,w,c
 14039  00155C  0B80               	andlw	128
 14040                           
 14041                           ; Switch size 1, requested type "space"
 14042                           ; Number of cases is 2, Range of values is 0 to 128
 14043                           ; switch strategies available:
 14044                           ; Name         Instructions Cycles
 14045                           ; simple_byte            7     4 (average)
 14046                           ;	Chosen strategy is simple_byte
 14047  00155E  0A00               	xorlw	0	; case 0
 14048  001560  B4D8               	btfsc	status,2,c
 14049  001562  D7BF               	goto	i2l6588
 14050  001564  0A80               	xorlw	128	; case 128
 14051  001566  B4D8               	btfsc	status,2,c
 14052  001568  D7DA               	goto	i2l6602
 14053  00156A                     i2l6620:
 14054                           
 14055                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14056  00156A  5063               	movf	i2printf@width,w,c
 14057  00156C  1064               	iorwf	i2printf@width+1,w,c
 14058  00156E  B4D8               	btfsc	status,2,c
 14059  001570  D00D               	goto	i2l6626
 14060  001572  0E03               	movlw	3
 14061  001574  1465               	andwf	i2printf@flag,w,c
 14062  001576  6E44               	movwf	??i2_printf& (0+255),c
 14063  001578  0E00               	movlw	0
 14064  00157A  1466               	andwf	i2printf@flag+1,w,c
 14065  00157C  6E45               	movwf	(??i2_printf+1)& (0+255),c
 14066  00157E  5044               	movf	??i2_printf,w,c
 14067  001580  1045               	iorwf	??i2_printf+1,w,c
 14068  001582  B4D8               	btfsc	status,2,c
 14069  001584  D003               	goto	i2l6626
 14070                           
 14071                           ;doprnt.c: 1346: width--;
 14072  001586  0663               	decf	i2printf@width,f,c
 14073  001588  A0D8               	btfss	status,0,c
 14074  00158A  0664               	decf	i2printf@width+1,f,c
 14075  00158C                     i2l6626:
 14076                           
 14077                           ;doprnt.c: 1381: if(width > c)
 14078  00158C  0E80               	movlw	128
 14079  00158E  BE67               	btfsc	i2printf@c,7,c
 14080  001590  0E7F               	movlw	127
 14081  001592  6E44               	movwf	??i2_printf& (0+255),c
 14082  001594  5063               	movf	i2printf@width,w,c
 14083  001596  5C67               	subwf	i2printf@c,w,c
 14084  001598  5064               	movf	i2printf@width+1,w,c
 14085  00159A  0A80               	xorlw	128
 14086  00159C  5844               	subwfb	??i2_printf& (0+255),w,c
 14087  00159E  B0D8               	btfsc	status,0,c
 14088  0015A0  D007               	goto	i2l6630
 14089                           
 14090                           ;doprnt.c: 1382: width -= c;
 14091  0015A2  5067               	movf	i2printf@c,w,c
 14092  0015A4  5E63               	subwf	i2printf@width,f,c
 14093  0015A6  0E00               	movlw	0
 14094  0015A8  BE67               	btfsc	i2printf@c,7,c
 14095  0015AA  0EFF               	movlw	255
 14096  0015AC  5A64               	subwfb	i2printf@width+1,f,c
 14097  0015AE  D004               	goto	i2l6632
 14098  0015B0                     i2l6630:
 14099                           
 14100                           ;doprnt.c: 1383: else
 14101                           ;doprnt.c: 1384: width = 0;
 14102  0015B0  0E00               	movlw	0
 14103  0015B2  6E64               	movwf	i2printf@width+1,c
 14104  0015B4  0E00               	movlw	0
 14105  0015B6  6E63               	movwf	i2printf@width,c
 14106  0015B8                     i2l6632:
 14107                           
 14108                           ;doprnt.c: 1387: if(flag & 0x04) {
 14109  0015B8  A465               	btfss	i2printf@flag,2,c
 14110  0015BA  D018               	goto	i2l6644
 14111                           
 14112                           ;doprnt.c: 1392: if(flag & 0x03)
 14113  0015BC  0E03               	movlw	3
 14114  0015BE  1465               	andwf	i2printf@flag,w,c
 14115  0015C0  6E44               	movwf	??i2_printf& (0+255),c
 14116  0015C2  0E00               	movlw	0
 14117  0015C4  1466               	andwf	i2printf@flag+1,w,c
 14118  0015C6  6E45               	movwf	(??i2_printf+1)& (0+255),c
 14119  0015C8  5044               	movf	??i2_printf,w,c
 14120  0015CA  1045               	iorwf	??i2_printf+1,w,c
 14121  0015CC  B4D8               	btfsc	status,2,c
 14122  0015CE  D003               	goto	i2l6638
 14123                           
 14124                           ;doprnt.c: 1393: (putch('-') );
 14125  0015D0  0E2D               	movlw	45
 14126  0015D2  ECB7  F028         	call	i2_putch
 14127  0015D6                     i2l6638:
 14128                           
 14129                           ;doprnt.c: 1415: if(width)
 14130  0015D6  5063               	movf	i2printf@width,w,c
 14131  0015D8  1064               	iorwf	i2printf@width+1,w,c
 14132  0015DA  B4D8               	btfsc	status,2,c
 14133  0015DC  D022               	goto	i2l6654
 14134                           
 14135                           ;doprnt.c: 1417: (putch('0') );
 14136                           
 14137                           ;doprnt.c: 1416: do
 14138  0015DE  0E30               	movlw	48
 14139  0015E0  ECB7  F028         	call	i2_putch
 14140                           
 14141                           ;doprnt.c: 1418: while(--width);
 14142  0015E4  0663               	decf	i2printf@width,f,c
 14143  0015E6  A0D8               	btfss	status,0,c
 14144  0015E8  0664               	decf	i2printf@width+1,f,c
 14145  0015EA  D7F5               	goto	i2l6638
 14146  0015EC                     i2l6644:
 14147                           
 14148                           ;doprnt.c: 1422: {
 14149                           ;doprnt.c: 1424: if(width
 14150                           ;doprnt.c: 1428: )
 14151  0015EC  5063               	movf	i2printf@width,w,c
 14152  0015EE  1064               	iorwf	i2printf@width+1,w,c
 14153  0015F0  B4D8               	btfsc	status,2,c
 14154  0015F2  D00A               	goto	i2l6650
 14155  0015F4                     i2l6646:
 14156                           
 14157                           ;doprnt.c: 1430: (putch(' ') );
 14158  0015F4  0E20               	movlw	32
 14159  0015F6  ECB7  F028         	call	i2_putch
 14160                           
 14161                           ;doprnt.c: 1431: while(--width);
 14162  0015FA  0663               	decf	i2printf@width,f,c
 14163  0015FC  A0D8               	btfss	status,0,c
 14164  0015FE  0664               	decf	i2printf@width+1,f,c
 14165  001600  5063               	movf	i2printf@width,w,c
 14166  001602  1064               	iorwf	i2printf@width+1,w,c
 14167  001604  A4D8               	btfss	status,2,c
 14168  001606  D7F6               	goto	i2l6646
 14169  001608                     i2l6650:
 14170                           
 14171                           ;doprnt.c: 1438: if(flag & 0x03)
 14172  001608  0E03               	movlw	3
 14173  00160A  1465               	andwf	i2printf@flag,w,c
 14174  00160C  6E44               	movwf	??i2_printf& (0+255),c
 14175  00160E  0E00               	movlw	0
 14176  001610  1466               	andwf	i2printf@flag+1,w,c
 14177  001612  6E45               	movwf	(??i2_printf+1)& (0+255),c
 14178  001614  5044               	movf	??i2_printf,w,c
 14179  001616  1045               	iorwf	??i2_printf+1,w,c
 14180  001618  B4D8               	btfsc	status,2,c
 14181  00161A  D003               	goto	i2l6654
 14182                           
 14183                           ;doprnt.c: 1439: (putch('-') );
 14184  00161C  0E2D               	movlw	45
 14185  00161E  ECB7  F028         	call	i2_putch
 14186  001622                     i2l6654:
 14187                           
 14188                           ;doprnt.c: 1469: }
 14189                           ;doprnt.c: 1472: prec = c;
 14190  001622  5067               	movf	i2printf@c,w,c
 14191  001624  6E54               	movwf	i2printf@prec,c
 14192  001626  6A55               	clrf	i2printf@prec+1,c
 14193  001628  BE54               	btfsc	i2printf@prec,7,c
 14194  00162A  0655               	decf	i2printf@prec+1,f,c
 14195                           
 14196                           ;doprnt.c: 1474: while(prec--) {
 14197  00162C  D07C               	goto	i2l6668
 14198  00162E                     i2l6656:
 14199                           
 14200                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14201  00162E  C054  F044         	movff	i2printf@prec,??i2_printf
 14202  001632  C055  F045         	movff	i2printf@prec+1,??i2_printf+1
 14203  001636  90D8               	bcf	status,0,c
 14204  001638  3644               	rlcf	??i2_printf,f,c
 14205  00163A  3645               	rlcf	??i2_printf+1,f,c
 14206  00163C  90D8               	bcf	status,0,c
 14207  00163E  3644               	rlcf	??i2_printf,f,c
 14208  001640  3645               	rlcf	??i2_printf+1,f,c
 14209  001642  0EC3               	movlw	low _dpowers
 14210  001644  2444               	addwf	??i2_printf,w,c
 14211  001646  6EF6               	movwf	tblptrl,c
 14212  001648  0EFD               	movlw	high _dpowers
 14213  00164A  2045               	addwfc	??i2_printf+1,w,c
 14214  00164C  6EF7               	movwf	tblptrh,c
 14215  00164E                     	if	0	;There are less than 3 active tblptr bytes
 14216  00164E                     	endif
 14217  00164E  0009               	tblrd		*+
 14218  001650  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 14219  001654  0009               	tblrd		*+
 14220  001656  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 14221  00165A  0009               	tblrd		*+
 14222  00165C  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 14223  001660  000A               	tblrd		*-
 14224  001662  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 14225  001666  C05C  F001         	movff	i2printf@val,i2___lldiv@dividend
 14226  00166A  C05D  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 14227  00166E  C05E  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 14228  001672  C05F  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 14229  001676  EC08  F025         	call	i2___lldiv	;wreg free
 14230  00167A  C001  F00E         	movff	?i2___lldiv,i2___llmod@dividend
 14231  00167E  C002  F00F         	movff	?i2___lldiv+1,i2___llmod@dividend+1
 14232  001682  C003  F010         	movff	?i2___lldiv+2,i2___llmod@dividend+2
 14233  001686  C004  F011         	movff	?i2___lldiv+3,i2___llmod@dividend+3
 14234  00168A  0E0A               	movlw	10
 14235  00168C  6E12               	movwf	i2___llmod@divisor,c
 14236  00168E  0E00               	movlw	0
 14237  001690  6E13               	movwf	i2___llmod@divisor+1,c
 14238  001692  0E00               	movlw	0
 14239  001694  6E14               	movwf	i2___llmod@divisor+2,c
 14240  001696  0E00               	movlw	0
 14241  001698  6E15               	movwf	i2___llmod@divisor+3,c
 14242  00169A  ECFB  F025         	call	i2___llmod	;wreg free
 14243  00169E  500E               	movf	?i2___llmod,w,c
 14244  0016A0  0F30               	addlw	48
 14245  0016A2  6E67               	movwf	i2printf@c,c
 14246                           
 14247                           ;doprnt.c: 1491: break;
 14248  0016A4  D03D               	goto	i2l6666
 14249  0016A6                     i2l6658:
 14250                           
 14251                           ;doprnt.c: 1499: {
 14252                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 14253  0016A6  C05C  F001         	movff	i2printf@val,i2___lldiv@dividend
 14254  0016AA  C05D  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 14255  0016AE  C05E  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 14256  0016B2  C05F  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 14257  0016B6  C054  F044         	movff	i2printf@prec,??i2_printf
 14258  0016BA  C055  F045         	movff	i2printf@prec+1,??i2_printf+1
 14259  0016BE  90D8               	bcf	status,0,c
 14260  0016C0  3644               	rlcf	??i2_printf,f,c
 14261  0016C2  3645               	rlcf	??i2_printf+1,f,c
 14262  0016C4  90D8               	bcf	status,0,c
 14263  0016C6  3644               	rlcf	??i2_printf,f,c
 14264  0016C8  3645               	rlcf	??i2_printf+1,f,c
 14265  0016CA  0E39               	movlw	low _hexpowers
 14266  0016CC  2444               	addwf	??i2_printf,w,c
 14267  0016CE  6EF6               	movwf	tblptrl,c
 14268  0016D0  0EFE               	movlw	high _hexpowers
 14269  0016D2  2045               	addwfc	??i2_printf+1,w,c
 14270  0016D4  6EF7               	movwf	tblptrh,c
 14271  0016D6                     	if	0	;There are less than 3 active tblptr bytes
 14272  0016D6                     	endif
 14273  0016D6  0009               	tblrd		*+
 14274  0016D8  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 14275  0016DC  0009               	tblrd		*+
 14276  0016DE  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 14277  0016E2  0009               	tblrd		*+
 14278  0016E4  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 14279  0016E8  000A               	tblrd		*-
 14280  0016EA  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 14281  0016EE  EC08  F025         	call	i2___lldiv	;wreg free
 14282  0016F2  5001               	movf	?i2___lldiv,w,c
 14283  0016F4  0B0F               	andlw	15
 14284  0016F6  6E4D               	movwf	i2printf@idx,c
 14285                           
 14286                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 14287  0016F8  504D               	movf	i2printf@idx,w,c
 14288  0016FA  0D01               	mullw	1
 14289  0016FC  0E1F               	movlw	low STR_24
 14290  0016FE  24F3               	addwf	prodl,w,c
 14291  001700  6EF6               	movwf	tblptrl,c
 14292  001702  0EFF               	movlw	high STR_24
 14293  001704  20F4               	addwfc	prodh,w,c
 14294  001706  6EF7               	movwf	tblptrh,c
 14295  001708                     	if	0	;There are less than 3 active tblptr bytes
 14296  001708                     	endif
 14297  001708  0008               	tblrd		*
 14298  00170A  CFF5 F067          	movff	tablat,i2printf@c
 14299                           
 14300                           ;doprnt.c: 1523: }
 14301                           
 14302                           ;doprnt.c: 1508: }
 14303                           ;doprnt.c: 1510: break;
 14304  00170E  D008               	goto	i2l6666
 14305  001710                     i2l6664:
 14306  001710  5065               	movf	i2printf@flag,w,c
 14307  001712  0B80               	andlw	128
 14308                           
 14309                           ; Switch size 1, requested type "space"
 14310                           ; Number of cases is 2, Range of values is 0 to 128
 14311                           ; switch strategies available:
 14312                           ; Name         Instructions Cycles
 14313                           ; simple_byte            7     4 (average)
 14314                           ;	Chosen strategy is simple_byte
 14315  001714  0A00               	xorlw	0	; case 0
 14316  001716  B4D8               	btfsc	status,2,c
 14317  001718  D78A               	goto	i2l6656
 14318  00171A  0A80               	xorlw	128	; case 128
 14319  00171C  B4D8               	btfsc	status,2,c
 14320  00171E  D7C3               	goto	i2l6658
 14321  001720                     i2l6666:
 14322                           
 14323                           ;doprnt.c: 1524: (putch(c) );
 14324  001720  5067               	movf	i2printf@c,w,c
 14325  001722  ECB7  F028         	call	i2_putch
 14326  001726                     i2l6668:
 14327  001726  0654               	decf	i2printf@prec,f,c
 14328  001728  A0D8               	btfss	status,0,c
 14329  00172A  0655               	decf	i2printf@prec+1,f,c
 14330  00172C  2854               	incf	i2printf@prec,w,c
 14331  00172E  E1F0               	bnz	i2l6664
 14332  001730  2855               	incf	i2printf@prec+1,w,c
 14333  001732  A4D8               	btfss	status,2,c
 14334  001734  D7ED               	goto	i2l6664
 14335  001736                     i2l6670:
 14336  001736  C040  FFF6         	movff	i2printf@f,tblptrl
 14337  00173A  C041  FFF7         	movff	i2printf@f+1,tblptrh
 14338  00173E  4A40               	infsnz	i2printf@f,f,c
 14339  001740  2A41               	incf	i2printf@f+1,f,c
 14340  001742                     	if	0	;tblptru may be non-zero
 14341  001742                     	endif
 14342  001742                     	if	0	;tblptru may be non-zero
 14343  001742                     	endif
 14344  001742  0008               	tblrd		*
 14345  001744  CFF5 F067          	movff	tablat,i2printf@c
 14346  001748  5067               	movf	i2printf@c,w,c
 14347  00174A  B4D8               	btfsc	status,2,c
 14348  00174C  0012               	return	
 14349  00174E  EF6B  F006         	goto	i2l6348
 14350  001752                     __end_ofi2_printf:
 14351                           	opt stack 0
 14352                           pclatu	equ	0xFFB
 14353                           pclath	equ	0xFFA
 14354                           tblptru	equ	0xFF8
 14355                           tblptrh	equ	0xFF7
 14356                           tblptrl	equ	0xFF6
 14357                           tablat	equ	0xFF5
 14358                           prodh	equ	0xFF4
 14359                           prodl	equ	0xFF3
 14360                           intcon	equ	0xFF2
 14361                           intcon3	equ	0xFF0
 14362                           postinc0	equ	0xFEE
 14363                           fsr0h	equ	0xFEA
 14364                           fsr0l	equ	0xFE9
 14365                           wreg	equ	0xFE8
 14366                           postdec1	equ	0xFE5
 14367                           fsr1h	equ	0xFE2
 14368                           fsr1l	equ	0xFE1
 14369                           indf2	equ	0xFDF
 14370                           postinc2	equ	0xFDE
 14371                           postdec2	equ	0xFDD
 14372                           fsr2h	equ	0xFDA
 14373                           fsr2l	equ	0xFD9
 14374                           status	equ	0xFD8
 14375                           
 14376 ;; *************** function i2_scale *****************
 14377 ;; Defined at:
 14378 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 14379 ;; Parameters:    Size  Location     Type
 14380 ;;  scl             1    wreg     char 
 14381 ;; Auto vars:     Size  Location     Type
 14382 ;;  scl             1   41[COMRAM] char 
 14383 ;; Return value:  Size  Location     Type
 14384 ;;                  3   35[COMRAM] char 
 14385 ;; Registers used:
 14386 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14387 ;; Tracked objects:
 14388 ;;		On entry : 0/0
 14389 ;;		On exit  : 0/0
 14390 ;;		Unchanged: 0/0
 14391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14392 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14393 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14395 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14396 ;;Total ram usage:        7 bytes
 14397 ;; Hardware stack levels used:    1
 14398 ;; Hardware stack levels required when called:    2
 14399 ;; This function calls:
 14400 ;;		i2___awdiv
 14401 ;;		i2___awmod
 14402 ;;		i2___ftmul
 14403 ;;		i2___wmul
 14404 ;; This function is called by:
 14405 ;;		i2_printf
 14406 ;; This function uses a non-reentrant model
 14407 ;;
 14408                           
 14409                           	psect	text46
 14410  001C00                     __ptext46:
 14411                           	opt stack 0
 14412  001C00                     i2_scale:
 14413                           	opt stack 19
 14414                           
 14415                           ;incstack = 0
 14416                           ;i2scale@scl stored from wreg
 14417  001C00  6E2A               	movwf	i2scale@scl,c
 14418                           
 14419                           ;doprnt.c: 428: if(scl < 0) {
 14420  001C02  AE2A               	btfss	i2scale@scl,7,c
 14421  001C04  D0FB               	goto	i2l5870
 14422                           
 14423                           ;doprnt.c: 429: scl = -scl;
 14424  001C06  6C2A               	negf	i2scale@scl,c
 14425                           
 14426                           ;doprnt.c: 430: if(scl>=110)
 14427  001C08  502A               	movf	i2scale@scl,w,c
 14428  001C0A  0A80               	xorlw	128
 14429  001C0C  0F12               	addlw	-238
 14430  001C0E  A0D8               	btfss	status,0,c
 14431  001C10  D091               	goto	i2l5860
 14432                           
 14433                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 14434  001C12  0E00               	movlw	0
 14435  001C14  6E12               	movwf	i2___wmul@multiplicand+1,c
 14436  001C16  0E03               	movlw	3
 14437  001C18  6E11               	movwf	i2___wmul@multiplicand,c
 14438  001C1A  0E00               	movlw	0
 14439  001C1C  6E0A               	movwf	i2___awdiv@divisor+1,c
 14440  001C1E  0E0A               	movlw	10
 14441  001C20  6E09               	movwf	i2___awdiv@divisor,c
 14442  001C22  0E00               	movlw	0
 14443  001C24  6E04               	movwf	i2___awmod@divisor+1,c
 14444  001C26  0E64               	movlw	100
 14445  001C28  6E03               	movwf	i2___awmod@divisor,c
 14446  001C2A  502A               	movf	i2scale@scl,w,c
 14447  001C2C  6E01               	movwf	i2___awmod@dividend,c
 14448  001C2E  6A02               	clrf	i2___awmod@dividend+1,c
 14449  001C30  BE01               	btfsc	i2___awmod@dividend,7,c
 14450  001C32  0602               	decf	i2___awmod@dividend+1,f,c
 14451  001C34  ECC3  F025         	call	i2___awmod	;wreg free
 14452  001C38  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 14453  001C3C  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 14454  001C40  ECC6  F024         	call	i2___awdiv	;wreg free
 14455  001C44  0E09               	movlw	9
 14456  001C46  2407               	addwf	?i2___awdiv,w,c
 14457  001C48  6E0F               	movwf	i2___wmul@multiplier,c
 14458  001C4A  0E00               	movlw	0
 14459  001C4C  2008               	addwfc	?i2___awdiv+1,w,c
 14460  001C4E  6E10               	movwf	i2___wmul@multiplier+1,c
 14461  001C50  EC92  F028         	call	i2___wmul	;wreg free
 14462  001C54  0EEB               	movlw	low __npowers_
 14463  001C56  240F               	addwf	?i2___wmul,w,c
 14464  001C58  6EF6               	movwf	tblptrl,c
 14465  001C5A  0EFD               	movlw	high __npowers_
 14466  001C5C  2010               	addwfc	?i2___wmul+1,w,c
 14467  001C5E  6EF7               	movwf	tblptrh,c
 14468  001C60                     	if	0	;There are less than 3 active tblptr bytes
 14469  001C60                     	endif
 14470  001C60  0009               	tblrd		*+
 14471  001C62  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14472  001C66  0009               	tblrd		*+
 14473  001C68  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14474  001C6C  000A               	tblrd		*-
 14475  001C6E  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14476  001C72  0E00               	movlw	0
 14477  001C74  6E0A               	movwf	i2___awdiv@divisor+1,c
 14478  001C76  0E64               	movlw	100
 14479  001C78  6E09               	movwf	i2___awdiv@divisor,c
 14480  001C7A  502A               	movf	i2scale@scl,w,c
 14481  001C7C  6E07               	movwf	i2___awdiv@dividend,c
 14482  001C7E  6A08               	clrf	i2___awdiv@dividend+1,c
 14483  001C80  BE07               	btfsc	i2___awdiv@dividend,7,c
 14484  001C82  0608               	decf	i2___awdiv@dividend+1,f,c
 14485  001C84  ECC6  F024         	call	i2___awdiv	;wreg free
 14486  001C88  0E12               	movlw	18
 14487  001C8A  2407               	addwf	?i2___awdiv,w,c
 14488  001C8C  6E0F               	movwf	i2___wmul@multiplier,c
 14489  001C8E  0E00               	movlw	0
 14490  001C90  2008               	addwfc	?i2___awdiv+1,w,c
 14491  001C92  6E10               	movwf	i2___wmul@multiplier+1,c
 14492  001C94  0E00               	movlw	0
 14493  001C96  6E12               	movwf	i2___wmul@multiplicand+1,c
 14494  001C98  0E03               	movlw	3
 14495  001C9A  6E11               	movwf	i2___wmul@multiplicand,c
 14496  001C9C  EC92  F028         	call	i2___wmul	;wreg free
 14497  001CA0  0EEB               	movlw	low __npowers_
 14498  001CA2  240F               	addwf	?i2___wmul,w,c
 14499  001CA4  6EF6               	movwf	tblptrl,c
 14500  001CA6  0EFD               	movlw	high __npowers_
 14501  001CA8  2010               	addwfc	?i2___wmul+1,w,c
 14502  001CAA  6EF7               	movwf	tblptrh,c
 14503  001CAC                     	if	0	;There are less than 3 active tblptr bytes
 14504  001CAC                     	endif
 14505  001CAC  0009               	tblrd		*+
 14506  001CAE  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14507  001CB2  0009               	tblrd		*+
 14508  001CB4  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14509  001CB8  000A               	tblrd		*-
 14510  001CBA  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14511  001CBE  EC31  F01F         	call	i2___ftmul	;wreg free
 14512  001CC2  C015  F027         	movff	?i2___ftmul,i2_scale$1534
 14513  001CC6  C016  F028         	movff	?i2___ftmul+1,i2_scale$1534+1
 14514  001CCA  C017  F029         	movff	?i2___ftmul+2,i2_scale$1534+2
 14515                           
 14516                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 14517  001CCE  C027  F015         	movff	i2_scale$1534,i2___ftmul@f1
 14518  001CD2  C028  F016         	movff	i2_scale$1534+1,i2___ftmul@f1+1
 14519  001CD6  C029  F017         	movff	i2_scale$1534+2,i2___ftmul@f1+2
 14520  001CDA  0E00               	movlw	0
 14521  001CDC  6E12               	movwf	i2___wmul@multiplicand+1,c
 14522  001CDE  0E03               	movlw	3
 14523  001CE0  6E11               	movwf	i2___wmul@multiplicand,c
 14524  001CE2  0E00               	movlw	0
 14525  001CE4  6E04               	movwf	i2___awmod@divisor+1,c
 14526  001CE6  0E0A               	movlw	10
 14527  001CE8  6E03               	movwf	i2___awmod@divisor,c
 14528  001CEA  502A               	movf	i2scale@scl,w,c
 14529  001CEC  6E01               	movwf	i2___awmod@dividend,c
 14530  001CEE  6A02               	clrf	i2___awmod@dividend+1,c
 14531  001CF0  BE01               	btfsc	i2___awmod@dividend,7,c
 14532  001CF2  0602               	decf	i2___awmod@dividend+1,f,c
 14533  001CF4  ECC3  F025         	call	i2___awmod	;wreg free
 14534  001CF8  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14535  001CFC  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14536  001D00  EC92  F028         	call	i2___wmul	;wreg free
 14537  001D04  0EEB               	movlw	low __npowers_
 14538  001D06  240F               	addwf	?i2___wmul,w,c
 14539  001D08  6EF6               	movwf	tblptrl,c
 14540  001D0A  0EFD               	movlw	high __npowers_
 14541  001D0C  2010               	addwfc	?i2___wmul+1,w,c
 14542  001D0E  6EF7               	movwf	tblptrh,c
 14543  001D10                     	if	0	;There are less than 3 active tblptr bytes
 14544  001D10                     	endif
 14545  001D10  0009               	tblrd		*+
 14546  001D12  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14547  001D16  0009               	tblrd		*+
 14548  001D18  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14549  001D1C  000A               	tblrd		*-
 14550  001D1E  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14551  001D22  EC31  F01F         	call	i2___ftmul	;wreg free
 14552  001D26  C015  F024         	movff	?i2___ftmul,?i2_scale
 14553  001D2A  C016  F025         	movff	?i2___ftmul+1,?i2_scale+1
 14554  001D2E  C017  F026         	movff	?i2___ftmul+2,?i2_scale+2
 14555  001D32  0012               	return	
 14556  001D34                     i2l5860:
 14557                           
 14558                           ;doprnt.c: 432: else if(scl > 10)
 14559  001D34  502A               	movf	i2scale@scl,w,c
 14560  001D36  0A80               	xorlw	128
 14561  001D38  0F75               	addlw	-139
 14562  001D3A  A0D8               	btfss	status,0,c
 14563  001D3C  D04D               	goto	i2l5866
 14564                           
 14565                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 14566  001D3E  0E00               	movlw	0
 14567  001D40  6E0A               	movwf	i2___awdiv@divisor+1,c
 14568  001D42  0E0A               	movlw	10
 14569  001D44  6E09               	movwf	i2___awdiv@divisor,c
 14570  001D46  502A               	movf	i2scale@scl,w,c
 14571  001D48  6E07               	movwf	i2___awdiv@dividend,c
 14572  001D4A  6A08               	clrf	i2___awdiv@dividend+1,c
 14573  001D4C  BE07               	btfsc	i2___awdiv@dividend,7,c
 14574  001D4E  0608               	decf	i2___awdiv@dividend+1,f,c
 14575  001D50  ECC6  F024         	call	i2___awdiv	;wreg free
 14576  001D54  0E09               	movlw	9
 14577  001D56  2407               	addwf	?i2___awdiv,w,c
 14578  001D58  6E0F               	movwf	i2___wmul@multiplier,c
 14579  001D5A  0E00               	movlw	0
 14580  001D5C  2008               	addwfc	?i2___awdiv+1,w,c
 14581  001D5E  6E10               	movwf	i2___wmul@multiplier+1,c
 14582  001D60  0E00               	movlw	0
 14583  001D62  6E12               	movwf	i2___wmul@multiplicand+1,c
 14584  001D64  0E03               	movlw	3
 14585  001D66  6E11               	movwf	i2___wmul@multiplicand,c
 14586  001D68  EC92  F028         	call	i2___wmul	;wreg free
 14587  001D6C  0EEB               	movlw	low __npowers_
 14588  001D6E  240F               	addwf	?i2___wmul,w,c
 14589  001D70  6EF6               	movwf	tblptrl,c
 14590  001D72  0EFD               	movlw	high __npowers_
 14591  001D74  2010               	addwfc	?i2___wmul+1,w,c
 14592  001D76  6EF7               	movwf	tblptrh,c
 14593  001D78                     	if	0	;There are less than 3 active tblptr bytes
 14594  001D78                     	endif
 14595  001D78  0009               	tblrd		*+
 14596  001D7A  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14597  001D7E  0009               	tblrd		*+
 14598  001D80  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14599  001D84  000A               	tblrd		*-
 14600  001D86  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14601  001D8A  0E00               	movlw	0
 14602  001D8C  6E12               	movwf	i2___wmul@multiplicand+1,c
 14603  001D8E  0E03               	movlw	3
 14604  001D90  6E11               	movwf	i2___wmul@multiplicand,c
 14605  001D92  0E00               	movlw	0
 14606  001D94  6E04               	movwf	i2___awmod@divisor+1,c
 14607  001D96  0E0A               	movlw	10
 14608  001D98  6E03               	movwf	i2___awmod@divisor,c
 14609  001D9A  502A               	movf	i2scale@scl,w,c
 14610  001D9C  6E01               	movwf	i2___awmod@dividend,c
 14611  001D9E  6A02               	clrf	i2___awmod@dividend+1,c
 14612  001DA0  BE01               	btfsc	i2___awmod@dividend,7,c
 14613  001DA2  0602               	decf	i2___awmod@dividend+1,f,c
 14614  001DA4  ECC3  F025         	call	i2___awmod	;wreg free
 14615  001DA8  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14616  001DAC  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14617  001DB0  EC92  F028         	call	i2___wmul	;wreg free
 14618  001DB4  0EEB               	movlw	low __npowers_
 14619  001DB6  240F               	addwf	?i2___wmul,w,c
 14620  001DB8  6EF6               	movwf	tblptrl,c
 14621  001DBA  0EFD               	movlw	high __npowers_
 14622  001DBC  2010               	addwfc	?i2___wmul+1,w,c
 14623  001DBE  6EF7               	movwf	tblptrh,c
 14624  001DC0                     	if	0	;There are less than 3 active tblptr bytes
 14625  001DC0                     	endif
 14626  001DC0  0009               	tblrd		*+
 14627  001DC2  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14628  001DC6  0009               	tblrd		*+
 14629  001DC8  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14630  001DCC  000A               	tblrd		*-
 14631  001DCE  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14632  001DD2  EC31  F01F         	call	i2___ftmul	;wreg free
 14633  001DD6  D7A7               	goto	L11
 14634  001DD8                     i2l5866:
 14635                           
 14636                           ;doprnt.c: 434: return _npowers_[scl];
 14637  001DD8  502A               	movf	i2scale@scl,w,c
 14638  001DDA  0D03               	mullw	3
 14639  001DDC  0EEB               	movlw	low __npowers_
 14640  001DDE  24F3               	addwf	prodl,w,c
 14641  001DE0  6EF6               	movwf	tblptrl,c
 14642  001DE2  0EFD               	movlw	high __npowers_
 14643  001DE4  20F4               	addwfc	prodh,w,c
 14644  001DE6  6EF7               	movwf	tblptrh,c
 14645  001DE8                     	if	0	;There are less than 3 active tblptr bytes
 14646  001DE8                     	endif
 14647  001DE8  0009               	tblrd		*+
 14648  001DEA  CFF5 F024          	movff	tablat,?i2_scale
 14649  001DEE  0009               	tblrd		*+
 14650  001DF0  CFF5 F025          	movff	tablat,?i2_scale+1
 14651  001DF4  000A               	tblrd		*-
 14652  001DF6  CFF5 F026          	movff	tablat,?i2_scale+2
 14653  001DFA  0012               	return	
 14654  001DFC                     i2l5870:
 14655                           
 14656                           ;doprnt.c: 435: }
 14657                           ;doprnt.c: 436: if(scl>=110)
 14658  001DFC  502A               	movf	i2scale@scl,w,c
 14659  001DFE  0A80               	xorlw	128
 14660  001E00  0F12               	addlw	-238
 14661  001E02  A0D8               	btfss	status,0,c
 14662  001E04  D091               	goto	i2l5878
 14663                           
 14664                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 14665  001E06  0E00               	movlw	0
 14666  001E08  6E12               	movwf	i2___wmul@multiplicand+1,c
 14667  001E0A  0E03               	movlw	3
 14668  001E0C  6E11               	movwf	i2___wmul@multiplicand,c
 14669  001E0E  0E00               	movlw	0
 14670  001E10  6E0A               	movwf	i2___awdiv@divisor+1,c
 14671  001E12  0E0A               	movlw	10
 14672  001E14  6E09               	movwf	i2___awdiv@divisor,c
 14673  001E16  0E00               	movlw	0
 14674  001E18  6E04               	movwf	i2___awmod@divisor+1,c
 14675  001E1A  0E64               	movlw	100
 14676  001E1C  6E03               	movwf	i2___awmod@divisor,c
 14677  001E1E  502A               	movf	i2scale@scl,w,c
 14678  001E20  6E01               	movwf	i2___awmod@dividend,c
 14679  001E22  6A02               	clrf	i2___awmod@dividend+1,c
 14680  001E24  BE01               	btfsc	i2___awmod@dividend,7,c
 14681  001E26  0602               	decf	i2___awmod@dividend+1,f,c
 14682  001E28  ECC3  F025         	call	i2___awmod	;wreg free
 14683  001E2C  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 14684  001E30  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 14685  001E34  ECC6  F024         	call	i2___awdiv	;wreg free
 14686  001E38  0E09               	movlw	9
 14687  001E3A  2407               	addwf	?i2___awdiv,w,c
 14688  001E3C  6E0F               	movwf	i2___wmul@multiplier,c
 14689  001E3E  0E00               	movlw	0
 14690  001E40  2008               	addwfc	?i2___awdiv+1,w,c
 14691  001E42  6E10               	movwf	i2___wmul@multiplier+1,c
 14692  001E44  EC92  F028         	call	i2___wmul	;wreg free
 14693  001E48  0E12               	movlw	low __powers_
 14694  001E4A  240F               	addwf	?i2___wmul,w,c
 14695  001E4C  6EF6               	movwf	tblptrl,c
 14696  001E4E  0EFE               	movlw	high __powers_
 14697  001E50  2010               	addwfc	?i2___wmul+1,w,c
 14698  001E52  6EF7               	movwf	tblptrh,c
 14699  001E54                     	if	0	;There are less than 3 active tblptr bytes
 14700  001E54                     	endif
 14701  001E54  0009               	tblrd		*+
 14702  001E56  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14703  001E5A  0009               	tblrd		*+
 14704  001E5C  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14705  001E60  000A               	tblrd		*-
 14706  001E62  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14707  001E66  0E00               	movlw	0
 14708  001E68  6E0A               	movwf	i2___awdiv@divisor+1,c
 14709  001E6A  0E64               	movlw	100
 14710  001E6C  6E09               	movwf	i2___awdiv@divisor,c
 14711  001E6E  502A               	movf	i2scale@scl,w,c
 14712  001E70  6E07               	movwf	i2___awdiv@dividend,c
 14713  001E72  6A08               	clrf	i2___awdiv@dividend+1,c
 14714  001E74  BE07               	btfsc	i2___awdiv@dividend,7,c
 14715  001E76  0608               	decf	i2___awdiv@dividend+1,f,c
 14716  001E78  ECC6  F024         	call	i2___awdiv	;wreg free
 14717  001E7C  0E12               	movlw	18
 14718  001E7E  2407               	addwf	?i2___awdiv,w,c
 14719  001E80  6E0F               	movwf	i2___wmul@multiplier,c
 14720  001E82  0E00               	movlw	0
 14721  001E84  2008               	addwfc	?i2___awdiv+1,w,c
 14722  001E86  6E10               	movwf	i2___wmul@multiplier+1,c
 14723  001E88  0E00               	movlw	0
 14724  001E8A  6E12               	movwf	i2___wmul@multiplicand+1,c
 14725  001E8C  0E03               	movlw	3
 14726  001E8E  6E11               	movwf	i2___wmul@multiplicand,c
 14727  001E90  EC92  F028         	call	i2___wmul	;wreg free
 14728  001E94  0E12               	movlw	low __powers_
 14729  001E96  240F               	addwf	?i2___wmul,w,c
 14730  001E98  6EF6               	movwf	tblptrl,c
 14731  001E9A  0EFE               	movlw	high __powers_
 14732  001E9C  2010               	addwfc	?i2___wmul+1,w,c
 14733  001E9E  6EF7               	movwf	tblptrh,c
 14734  001EA0                     	if	0	;There are less than 3 active tblptr bytes
 14735  001EA0                     	endif
 14736  001EA0  0009               	tblrd		*+
 14737  001EA2  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14738  001EA6  0009               	tblrd		*+
 14739  001EA8  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14740  001EAC  000A               	tblrd		*-
 14741  001EAE  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14742  001EB2  EC31  F01F         	call	i2___ftmul	;wreg free
 14743  001EB6  C015  F027         	movff	?i2___ftmul,i2_scale$1534
 14744  001EBA  C016  F028         	movff	?i2___ftmul+1,i2_scale$1534+1
 14745  001EBE  C017  F029         	movff	?i2___ftmul+2,i2_scale$1534+2
 14746                           
 14747                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 14748  001EC2  C027  F015         	movff	i2_scale$1534,i2___ftmul@f1
 14749  001EC6  C028  F016         	movff	i2_scale$1534+1,i2___ftmul@f1+1
 14750  001ECA  C029  F017         	movff	i2_scale$1534+2,i2___ftmul@f1+2
 14751  001ECE  0E00               	movlw	0
 14752  001ED0  6E12               	movwf	i2___wmul@multiplicand+1,c
 14753  001ED2  0E03               	movlw	3
 14754  001ED4  6E11               	movwf	i2___wmul@multiplicand,c
 14755  001ED6  0E00               	movlw	0
 14756  001ED8  6E04               	movwf	i2___awmod@divisor+1,c
 14757  001EDA  0E0A               	movlw	10
 14758  001EDC  6E03               	movwf	i2___awmod@divisor,c
 14759  001EDE  502A               	movf	i2scale@scl,w,c
 14760  001EE0  6E01               	movwf	i2___awmod@dividend,c
 14761  001EE2  6A02               	clrf	i2___awmod@dividend+1,c
 14762  001EE4  BE01               	btfsc	i2___awmod@dividend,7,c
 14763  001EE6  0602               	decf	i2___awmod@dividend+1,f,c
 14764  001EE8  ECC3  F025         	call	i2___awmod	;wreg free
 14765  001EEC  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14766  001EF0  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14767  001EF4  EC92  F028         	call	i2___wmul	;wreg free
 14768  001EF8  0E12               	movlw	low __powers_
 14769  001EFA  240F               	addwf	?i2___wmul,w,c
 14770  001EFC  6EF6               	movwf	tblptrl,c
 14771  001EFE  0EFE               	movlw	high __powers_
 14772  001F00  2010               	addwfc	?i2___wmul+1,w,c
 14773  001F02  6EF7               	movwf	tblptrh,c
 14774  001F04                     	if	0	;There are less than 3 active tblptr bytes
 14775  001F04                     	endif
 14776  001F04  0009               	tblrd		*+
 14777  001F06  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14778  001F0A  0009               	tblrd		*+
 14779  001F0C  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14780  001F10  000A               	tblrd		*-
 14781  001F12  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14782  001F16  EC31  F01F         	call	i2___ftmul	;wreg free
 14783  001F1A  C015  F024         	movff	?i2___ftmul,?i2_scale
 14784  001F1E  C016  F025         	movff	?i2___ftmul+1,?i2_scale+1
 14785  001F22  C017  F026         	movff	?i2___ftmul+2,?i2_scale+2
 14786  001F26  0012               	return	
 14787  001F28                     i2l5878:
 14788                           
 14789                           ;doprnt.c: 438: else if(scl > 10)
 14790  001F28  502A               	movf	i2scale@scl,w,c
 14791  001F2A  0A80               	xorlw	128
 14792  001F2C  0F75               	addlw	-139
 14793  001F2E  A0D8               	btfss	status,0,c
 14794  001F30  D04D               	goto	i2l5884
 14795                           
 14796                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 14797  001F32  0E00               	movlw	0
 14798  001F34  6E0A               	movwf	i2___awdiv@divisor+1,c
 14799  001F36  0E0A               	movlw	10
 14800  001F38  6E09               	movwf	i2___awdiv@divisor,c
 14801  001F3A  502A               	movf	i2scale@scl,w,c
 14802  001F3C  6E07               	movwf	i2___awdiv@dividend,c
 14803  001F3E  6A08               	clrf	i2___awdiv@dividend+1,c
 14804  001F40  BE07               	btfsc	i2___awdiv@dividend,7,c
 14805  001F42  0608               	decf	i2___awdiv@dividend+1,f,c
 14806  001F44  ECC6  F024         	call	i2___awdiv	;wreg free
 14807  001F48  0E09               	movlw	9
 14808  001F4A  2407               	addwf	?i2___awdiv,w,c
 14809  001F4C  6E0F               	movwf	i2___wmul@multiplier,c
 14810  001F4E  0E00               	movlw	0
 14811  001F50  2008               	addwfc	?i2___awdiv+1,w,c
 14812  001F52  6E10               	movwf	i2___wmul@multiplier+1,c
 14813  001F54  0E00               	movlw	0
 14814  001F56  6E12               	movwf	i2___wmul@multiplicand+1,c
 14815  001F58  0E03               	movlw	3
 14816  001F5A  6E11               	movwf	i2___wmul@multiplicand,c
 14817  001F5C  EC92  F028         	call	i2___wmul	;wreg free
 14818  001F60  0E12               	movlw	low __powers_
 14819  001F62  240F               	addwf	?i2___wmul,w,c
 14820  001F64  6EF6               	movwf	tblptrl,c
 14821  001F66  0EFE               	movlw	high __powers_
 14822  001F68  2010               	addwfc	?i2___wmul+1,w,c
 14823  001F6A  6EF7               	movwf	tblptrh,c
 14824  001F6C                     	if	0	;There are less than 3 active tblptr bytes
 14825  001F6C                     	endif
 14826  001F6C  0009               	tblrd		*+
 14827  001F6E  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14828  001F72  0009               	tblrd		*+
 14829  001F74  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14830  001F78  000A               	tblrd		*-
 14831  001F7A  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14832  001F7E  0E00               	movlw	0
 14833  001F80  6E12               	movwf	i2___wmul@multiplicand+1,c
 14834  001F82  0E03               	movlw	3
 14835  001F84  6E11               	movwf	i2___wmul@multiplicand,c
 14836  001F86  0E00               	movlw	0
 14837  001F88  6E04               	movwf	i2___awmod@divisor+1,c
 14838  001F8A  0E0A               	movlw	10
 14839  001F8C  6E03               	movwf	i2___awmod@divisor,c
 14840  001F8E  502A               	movf	i2scale@scl,w,c
 14841  001F90  6E01               	movwf	i2___awmod@dividend,c
 14842  001F92  6A02               	clrf	i2___awmod@dividend+1,c
 14843  001F94  BE01               	btfsc	i2___awmod@dividend,7,c
 14844  001F96  0602               	decf	i2___awmod@dividend+1,f,c
 14845  001F98  ECC3  F025         	call	i2___awmod	;wreg free
 14846  001F9C  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14847  001FA0  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14848  001FA4  EC92  F028         	call	i2___wmul	;wreg free
 14849  001FA8  0E12               	movlw	low __powers_
 14850  001FAA  240F               	addwf	?i2___wmul,w,c
 14851  001FAC  6EF6               	movwf	tblptrl,c
 14852  001FAE  0EFE               	movlw	high __powers_
 14853  001FB0  2010               	addwfc	?i2___wmul+1,w,c
 14854  001FB2  6EF7               	movwf	tblptrh,c
 14855  001FB4                     	if	0	;There are less than 3 active tblptr bytes
 14856  001FB4                     	endif
 14857  001FB4  0009               	tblrd		*+
 14858  001FB6  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14859  001FBA  0009               	tblrd		*+
 14860  001FBC  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14861  001FC0  000A               	tblrd		*-
 14862  001FC2  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14863  001FC6  EC31  F01F         	call	i2___ftmul	;wreg free
 14864  001FCA  D7A7               	goto	L12
 14865  001FCC                     i2l5884:
 14866                           
 14867                           ;doprnt.c: 440: return _powers_[scl];
 14868  001FCC  502A               	movf	i2scale@scl,w,c
 14869  001FCE  0D03               	mullw	3
 14870  001FD0  0E12               	movlw	low __powers_
 14871  001FD2  24F3               	addwf	prodl,w,c
 14872  001FD4  6EF6               	movwf	tblptrl,c
 14873  001FD6  0EFE               	movlw	high __powers_
 14874  001FD8  20F4               	addwfc	prodh,w,c
 14875  001FDA  6EF7               	movwf	tblptrh,c
 14876  001FDC                     	if	0	;There are less than 3 active tblptr bytes
 14877  001FDC                     	endif
 14878  001FDC  0009               	tblrd		*+
 14879  001FDE  CFF5 F024          	movff	tablat,?i2_scale
 14880  001FE2  0009               	tblrd		*+
 14881  001FE4  CFF5 F025          	movff	tablat,?i2_scale+1
 14882  001FE8  000A               	tblrd		*-
 14883  001FEA  CFF5 F026          	movff	tablat,?i2_scale+2
 14884  001FEE  0012               	return	
 14885  001FF0                     __end_ofi2_scale:
 14886                           	opt stack 0
 14887                           pclatu	equ	0xFFB
 14888                           pclath	equ	0xFFA
 14889                           tblptru	equ	0xFF8
 14890                           tblptrh	equ	0xFF7
 14891                           tblptrl	equ	0xFF6
 14892                           tablat	equ	0xFF5
 14893                           prodh	equ	0xFF4
 14894                           prodl	equ	0xFF3
 14895                           intcon	equ	0xFF2
 14896                           intcon3	equ	0xFF0
 14897                           postinc0	equ	0xFEE
 14898                           fsr0h	equ	0xFEA
 14899                           fsr0l	equ	0xFE9
 14900                           wreg	equ	0xFE8
 14901                           postdec1	equ	0xFE5
 14902                           fsr1h	equ	0xFE2
 14903                           fsr1l	equ	0xFE1
 14904                           indf2	equ	0xFDF
 14905                           postinc2	equ	0xFDE
 14906                           postdec2	equ	0xFDD
 14907                           fsr2h	equ	0xFDA
 14908                           fsr2l	equ	0xFD9
 14909                           status	equ	0xFD8
 14910                           
 14911 ;; *************** function i2_putch *****************
 14912 ;; Defined at:
 14913 ;;		line 35 in file "lcd.c"
 14914 ;; Parameters:    Size  Location     Type
 14915 ;;  data            1    wreg     unsigned char 
 14916 ;; Auto vars:     Size  Location     Type
 14917 ;;  data            1    4[COMRAM] unsigned char 
 14918 ;; Return value:  Size  Location     Type
 14919 ;;                  1    wreg      void 
 14920 ;; Registers used:
 14921 ;;		wreg, status,2, status,0, cstack
 14922 ;; Tracked objects:
 14923 ;;		On entry : 0/0
 14924 ;;		On exit  : 0/0
 14925 ;;		Unchanged: 0/0
 14926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14928 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14930 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14931 ;;Total ram usage:        1 bytes
 14932 ;; Hardware stack levels used:    1
 14933 ;; Hardware stack levels required when called:    3
 14934 ;; This function calls:
 14935 ;;		i2_lcdNewline
 14936 ;;		i2_lcdNibble
 14937 ;; This function is called by:
 14938 ;;		i2_printf
 14939 ;; This function uses a non-reentrant model
 14940 ;;
 14941                           
 14942                           	psect	text47
 14943  00516E                     __ptext47:
 14944                           	opt stack 0
 14945  00516E                     i2_putch:
 14946                           	opt stack 18
 14947                           
 14948                           ;incstack = 0
 14949                           ;i2putch@data stored from wreg
 14950  00516E  6E05               	movwf	i2putch@data,c
 14951                           
 14952                           ;lcd.c: 36: if(data == '\n')lcdNewline();
 14953  005170  0E0A               	movlw	10
 14954  005172  1805               	xorwf	i2putch@data,w,c
 14955  005174  A4D8               	btfss	status,2,c
 14956  005176  D003               	goto	i2l186
 14957  005178  ECFF  F028         	call	i2_lcdNewline	;wreg free
 14958  00517C  0012               	return	
 14959  00517E                     i2l186:
 14960                           
 14961                           ;lcd.c: 37: else
 14962                           ;lcd.c: 38: {
 14963                           ;lcd.c: 39: LATDbits.LATD2 = 1;
 14964  00517E  848C               	bsf	3980,2,c	;volatile
 14965                           
 14966                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
 14967  005180  0E74               	movlw	116
 14968  005182                     i2u789_47:
 14969  005182  2EE8               	decfsz	wreg,f,c
 14970  005184  D7FE               	bra	i2u789_47
 14971  005186  D000               	nop2	
 14972                           
 14973                           ;lcd.c: 41: lcdNibble(data);
 14974  005188  5005               	movf	i2putch@data,w,c
 14975  00518A  EC2E  F026         	call	i2_lcdNibble
 14976  00518E  0012               	return	
 14977  005190                     __end_ofi2_putch:
 14978                           	opt stack 0
 14979                           pclatu	equ	0xFFB
 14980                           pclath	equ	0xFFA
 14981                           tblptru	equ	0xFF8
 14982                           tblptrh	equ	0xFF7
 14983                           tblptrl	equ	0xFF6
 14984                           tablat	equ	0xFF5
 14985                           prodh	equ	0xFF4
 14986                           prodl	equ	0xFF3
 14987                           intcon	equ	0xFF2
 14988                           intcon3	equ	0xFF0
 14989                           postinc0	equ	0xFEE
 14990                           fsr0h	equ	0xFEA
 14991                           fsr0l	equ	0xFE9
 14992                           wreg	equ	0xFE8
 14993                           postdec1	equ	0xFE5
 14994                           fsr1h	equ	0xFE2
 14995                           fsr1l	equ	0xFE1
 14996                           indf2	equ	0xFDF
 14997                           postinc2	equ	0xFDE
 14998                           postdec2	equ	0xFDD
 14999                           fsr2h	equ	0xFDA
 15000                           fsr2l	equ	0xFD9
 15001                           status	equ	0xFD8
 15002                           
 15003 ;; *************** function i2_lcdNewline *****************
 15004 ;; Defined at:
 15005 ;;		line 78 in file "lcd.c"
 15006 ;; Parameters:    Size  Location     Type
 15007 ;;		None
 15008 ;; Auto vars:     Size  Location     Type
 15009 ;;		None
 15010 ;; Return value:  Size  Location     Type
 15011 ;;                  1    wreg      void 
 15012 ;; Registers used:
 15013 ;;		wreg, status,2, status,0, cstack
 15014 ;; Tracked objects:
 15015 ;;		On entry : 0/0
 15016 ;;		On exit  : 0/0
 15017 ;;		Unchanged: 0/0
 15018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15022 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15023 ;;Total ram usage:        0 bytes
 15024 ;; Hardware stack levels used:    1
 15025 ;; Hardware stack levels required when called:    2
 15026 ;; This function calls:
 15027 ;;		i2_lcdInst
 15028 ;; This function is called by:
 15029 ;;		i2_putch
 15030 ;; This function uses a non-reentrant model
 15031 ;;
 15032                           
 15033                           	psect	text48
 15034  0051FE                     __ptext48:
 15035                           	opt stack 0
 15036  0051FE                     i2_lcdNewline:
 15037                           	opt stack 18
 15038                           
 15039                           ;lcd.c: 79: lcdInst(0b11000000);
 15040                           
 15041                           ;incstack = 0
 15042  0051FE  0EC0               	movlw	192
 15043  005200  ECC8  F028         	call	i2_lcdInst
 15044  005204  0012               	return		;funcret
 15045  005206                     __end_ofi2_lcdNewline:
 15046                           	opt stack 0
 15047                           pclatu	equ	0xFFB
 15048                           pclath	equ	0xFFA
 15049                           tblptru	equ	0xFF8
 15050                           tblptrh	equ	0xFF7
 15051                           tblptrl	equ	0xFF6
 15052                           tablat	equ	0xFF5
 15053                           prodh	equ	0xFF4
 15054                           prodl	equ	0xFF3
 15055                           intcon	equ	0xFF2
 15056                           intcon3	equ	0xFF0
 15057                           postinc0	equ	0xFEE
 15058                           fsr0h	equ	0xFEA
 15059                           fsr0l	equ	0xFE9
 15060                           wreg	equ	0xFE8
 15061                           postdec1	equ	0xFE5
 15062                           fsr1h	equ	0xFE2
 15063                           fsr1l	equ	0xFE1
 15064                           indf2	equ	0xFDF
 15065                           postinc2	equ	0xFDE
 15066                           postdec2	equ	0xFDD
 15067                           fsr2h	equ	0xFDA
 15068                           fsr2l	equ	0xFD9
 15069                           status	equ	0xFD8
 15070                           
 15071 ;; *************** function i2_isdigit *****************
 15072 ;; Defined at:
 15073 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 15074 ;; Parameters:    Size  Location     Type
 15075 ;;  c               1    wreg     unsigned char 
 15076 ;; Auto vars:     Size  Location     Type
 15077 ;;  c               1    2[COMRAM] unsigned char 
 15078 ;; Return value:  Size  Location     Type
 15079 ;;		None               void
 15080 ;; Registers used:
 15081 ;;		wreg, status,2, status,0
 15082 ;; Tracked objects:
 15083 ;;		On entry : 0/0
 15084 ;;		On exit  : 0/0
 15085 ;;		Unchanged: 0/0
 15086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15088 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15089 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15090 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15091 ;;Total ram usage:        3 bytes
 15092 ;; Hardware stack levels used:    1
 15093 ;; This function calls:
 15094 ;;		Nothing
 15095 ;; This function is called by:
 15096 ;;		i2_printf
 15097 ;; This function uses a non-reentrant model
 15098 ;;
 15099                           
 15100                           	psect	text49
 15101  0051B2                     __ptext49:
 15102                           	opt stack 0
 15103  0051B2                     i2_isdigit:
 15104                           	opt stack 21
 15105                           
 15106                           ;incstack = 0
 15107                           ;i2isdigit@c stored from wreg
 15108  0051B2  6E03               	movwf	i2isdigit@c,c
 15109  0051B4  0E00               	movlw	0
 15110  0051B6  6E02               	movwf	i2_isdigit$966,c
 15111  0051B8  0E3A               	movlw	58
 15112  0051BA  6003               	cpfslt	i2isdigit@c,c
 15113  0051BC  D005               	goto	i2l6088
 15114  0051BE  0E2F               	movlw	47
 15115  0051C0  6403               	cpfsgt	i2isdigit@c,c
 15116  0051C2  D002               	goto	i2l6088
 15117  0051C4  0E01               	movlw	1
 15118  0051C6  6E02               	movwf	i2_isdigit$966,c
 15119  0051C8                     i2l6088:
 15120  0051C8  C002  F001         	movff	i2_isdigit$966,??i2_isdigit
 15121  0051CC  3001               	rrcf	??i2_isdigit,w,c
 15122  0051CE  0012               	return	
 15123  0051D0                     __end_ofi2_isdigit:
 15124                           	opt stack 0
 15125                           pclatu	equ	0xFFB
 15126                           pclath	equ	0xFFA
 15127                           tblptru	equ	0xFF8
 15128                           tblptrh	equ	0xFF7
 15129                           tblptrl	equ	0xFF6
 15130                           tablat	equ	0xFF5
 15131                           prodh	equ	0xFF4
 15132                           prodl	equ	0xFF3
 15133                           intcon	equ	0xFF2
 15134                           intcon3	equ	0xFF0
 15135                           postinc0	equ	0xFEE
 15136                           fsr0h	equ	0xFEA
 15137                           fsr0l	equ	0xFE9
 15138                           wreg	equ	0xFE8
 15139                           postdec1	equ	0xFE5
 15140                           fsr1h	equ	0xFE2
 15141                           fsr1l	equ	0xFE1
 15142                           indf2	equ	0xFDF
 15143                           postinc2	equ	0xFDE
 15144                           postdec2	equ	0xFDD
 15145                           fsr2h	equ	0xFDA
 15146                           fsr2l	equ	0xFD9
 15147                           status	equ	0xFD8
 15148                           
 15149 ;; *************** function i2_fround *****************
 15150 ;; Defined at:
 15151 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 15152 ;; Parameters:    Size  Location     Type
 15153 ;;  prec            1    wreg     unsigned char 
 15154 ;; Auto vars:     Size  Location     Type
 15155 ;;  prec            1   44[COMRAM] unsigned char 
 15156 ;; Return value:  Size  Location     Type
 15157 ;;                  3   35[COMRAM] unsigned char 
 15158 ;; Registers used:
 15159 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15160 ;; Tracked objects:
 15161 ;;		On entry : 0/0
 15162 ;;		On exit  : 0/0
 15163 ;;		Unchanged: 0/0
 15164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15165 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15166 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15168 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15169 ;;Total ram usage:       10 bytes
 15170 ;; Hardware stack levels used:    1
 15171 ;; Hardware stack levels required when called:    2
 15172 ;; This function calls:
 15173 ;;		i2___awdiv
 15174 ;;		i2___awmod
 15175 ;;		i2___ftmul
 15176 ;;		i2___wmul
 15177 ;; This function is called by:
 15178 ;;		i2_printf
 15179 ;; This function uses a non-reentrant model
 15180 ;;
 15181                           
 15182                           	psect	text50
 15183  0028A0                     __ptext50:
 15184                           	opt stack 0
 15185  0028A0                     i2_fround:
 15186                           	opt stack 19
 15187                           
 15188                           ;incstack = 0
 15189                           ;i2fround@prec stored from wreg
 15190  0028A0  6E2D               	movwf	i2fround@prec,c
 15191                           
 15192                           ;doprnt.c: 413: if(prec>=110)
 15193  0028A2  0E6D               	movlw	109
 15194  0028A4  642D               	cpfsgt	i2fround@prec,c
 15195  0028A6  D09F               	goto	i2l5838
 15196                           
 15197                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15198  0028A8  0E00               	movlw	0
 15199  0028AA  6E12               	movwf	i2___wmul@multiplicand+1,c
 15200  0028AC  0E03               	movlw	3
 15201  0028AE  6E11               	movwf	i2___wmul@multiplicand,c
 15202  0028B0  0E00               	movlw	0
 15203  0028B2  6E0A               	movwf	i2___awdiv@divisor+1,c
 15204  0028B4  0E0A               	movlw	10
 15205  0028B6  6E09               	movwf	i2___awdiv@divisor,c
 15206  0028B8  0E00               	movlw	0
 15207  0028BA  6E04               	movwf	i2___awmod@divisor+1,c
 15208  0028BC  0E64               	movlw	100
 15209  0028BE  6E03               	movwf	i2___awmod@divisor,c
 15210  0028C0  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 15211  0028C4  6A02               	clrf	i2___awmod@dividend+1,c
 15212  0028C6  ECC3  F025         	call	i2___awmod	;wreg free
 15213  0028CA  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 15214  0028CE  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 15215  0028D2  ECC6  F024         	call	i2___awdiv	;wreg free
 15216  0028D6  0E09               	movlw	9
 15217  0028D8  2407               	addwf	?i2___awdiv,w,c
 15218  0028DA  6E0F               	movwf	i2___wmul@multiplier,c
 15219  0028DC  0E00               	movlw	0
 15220  0028DE  2008               	addwfc	?i2___awdiv+1,w,c
 15221  0028E0  6E10               	movwf	i2___wmul@multiplier+1,c
 15222  0028E2  EC92  F028         	call	i2___wmul	;wreg free
 15223  0028E6  0EEB               	movlw	low __npowers_
 15224  0028E8  240F               	addwf	?i2___wmul,w,c
 15225  0028EA  6EF6               	movwf	tblptrl,c
 15226  0028EC  0EFD               	movlw	high __npowers_
 15227  0028EE  2010               	addwfc	?i2___wmul+1,w,c
 15228  0028F0  6EF7               	movwf	tblptrh,c
 15229  0028F2                     	if	0	;There are less than 3 active tblptr bytes
 15230  0028F2                     	endif
 15231  0028F2  0009               	tblrd		*+
 15232  0028F4  CFF5 F018          	movff	tablat,i2___ftmul@f2
 15233  0028F8  0009               	tblrd		*+
 15234  0028FA  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 15235  0028FE  000A               	tblrd		*-
 15236  002900  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 15237  002904  0E00               	movlw	0
 15238  002906  6E0A               	movwf	i2___awdiv@divisor+1,c
 15239  002908  0E64               	movlw	100
 15240  00290A  6E09               	movwf	i2___awdiv@divisor,c
 15241  00290C  C02D  F007         	movff	i2fround@prec,i2___awdiv@dividend
 15242  002910  6A08               	clrf	i2___awdiv@dividend+1,c
 15243  002912  ECC6  F024         	call	i2___awdiv	;wreg free
 15244  002916  0E12               	movlw	18
 15245  002918  2407               	addwf	?i2___awdiv,w,c
 15246  00291A  6E0F               	movwf	i2___wmul@multiplier,c
 15247  00291C  0E00               	movlw	0
 15248  00291E  2008               	addwfc	?i2___awdiv+1,w,c
 15249  002920  6E10               	movwf	i2___wmul@multiplier+1,c
 15250  002922  0E00               	movlw	0
 15251  002924  6E12               	movwf	i2___wmul@multiplicand+1,c
 15252  002926  0E03               	movlw	3
 15253  002928  6E11               	movwf	i2___wmul@multiplicand,c
 15254  00292A  EC92  F028         	call	i2___wmul	;wreg free
 15255  00292E  0EEB               	movlw	low __npowers_
 15256  002930  240F               	addwf	?i2___wmul,w,c
 15257  002932  6EF6               	movwf	tblptrl,c
 15258  002934  0EFD               	movlw	high __npowers_
 15259  002936  2010               	addwfc	?i2___wmul+1,w,c
 15260  002938  6EF7               	movwf	tblptrh,c
 15261  00293A                     	if	0	;There are less than 3 active tblptr bytes
 15262  00293A                     	endif
 15263  00293A  0009               	tblrd		*+
 15264  00293C  CFF5 F015          	movff	tablat,i2___ftmul@f1
 15265  002940  0009               	tblrd		*+
 15266  002942  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 15267  002946  000A               	tblrd		*-
 15268  002948  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 15269  00294C  EC31  F01F         	call	i2___ftmul	;wreg free
 15270  002950  C015  F02A         	movff	?i2___ftmul,i2_fround$1532
 15271  002954  C016  F02B         	movff	?i2___ftmul+1,i2_fround$1532+1
 15272  002958  C017  F02C         	movff	?i2___ftmul+2,i2_fround$1532+2
 15273                           
 15274                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15275  00295C  0E00               	movlw	0
 15276  00295E  6E12               	movwf	i2___wmul@multiplicand+1,c
 15277  002960  0E03               	movlw	3
 15278  002962  6E11               	movwf	i2___wmul@multiplicand,c
 15279  002964  0E00               	movlw	0
 15280  002966  6E04               	movwf	i2___awmod@divisor+1,c
 15281  002968  0E0A               	movlw	10
 15282  00296A  6E03               	movwf	i2___awmod@divisor,c
 15283  00296C  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 15284  002970  6A02               	clrf	i2___awmod@dividend+1,c
 15285  002972  ECC3  F025         	call	i2___awmod	;wreg free
 15286  002976  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 15287  00297A  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 15288  00297E  EC92  F028         	call	i2___wmul	;wreg free
 15289  002982  0EEB               	movlw	low __npowers_
 15290  002984  240F               	addwf	?i2___wmul,w,c
 15291  002986  6EF6               	movwf	tblptrl,c
 15292  002988  0EFD               	movlw	high __npowers_
 15293  00298A  2010               	addwfc	?i2___wmul+1,w,c
 15294  00298C  6EF7               	movwf	tblptrh,c
 15295  00298E                     	if	0	;There are less than 3 active tblptr bytes
 15296  00298E                     	endif
 15297  00298E  0009               	tblrd		*+
 15298  002990  CFF5 F018          	movff	tablat,i2___ftmul@f2
 15299  002994  0009               	tblrd		*+
 15300  002996  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 15301  00299A  000A               	tblrd		*-
 15302  00299C  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 15303  0029A0  C02A  F015         	movff	i2_fround$1532,i2___ftmul@f1
 15304  0029A4  C02B  F016         	movff	i2_fround$1532+1,i2___ftmul@f1+1
 15305  0029A8  C02C  F017         	movff	i2_fround$1532+2,i2___ftmul@f1+2
 15306  0029AC  EC31  F01F         	call	i2___ftmul	;wreg free
 15307  0029B0  C015  F027         	movff	?i2___ftmul,i2_fround$1533
 15308  0029B4  C016  F028         	movff	?i2___ftmul+1,i2_fround$1533+1
 15309  0029B8  C017  F029         	movff	?i2___ftmul+2,i2_fround$1533+2
 15310                           
 15311                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15312  0029BC  C027  F015         	movff	i2_fround$1533,i2___ftmul@f1
 15313  0029C0  C028  F016         	movff	i2_fround$1533+1,i2___ftmul@f1+1
 15314  0029C4  C029  F017         	movff	i2_fround$1533+2,i2___ftmul@f1+2
 15315  0029C8  0E00               	movlw	0
 15316  0029CA  6E18               	movwf	i2___ftmul@f2,c
 15317  0029CC  0E00               	movlw	0
 15318  0029CE  6E19               	movwf	i2___ftmul@f2+1,c
 15319  0029D0  0E3F               	movlw	63
 15320  0029D2  6E1A               	movwf	i2___ftmul@f2+2,c
 15321  0029D4  EC31  F01F         	call	i2___ftmul	;wreg free
 15322  0029D8  C015  F024         	movff	?i2___ftmul,?i2_fround
 15323  0029DC  C016  F025         	movff	?i2___ftmul+1,?i2_fround+1
 15324  0029E0  C017  F026         	movff	?i2___ftmul+2,?i2_fround+2
 15325  0029E4  0012               	return	
 15326  0029E6                     i2l5838:
 15327                           
 15328                           ;doprnt.c: 415: else if(prec > 10)
 15329  0029E6  0E0A               	movlw	10
 15330  0029E8  642D               	cpfsgt	i2fround@prec,c
 15331  0029EA  D05D               	goto	i2l5846
 15332                           
 15333                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 15334  0029EC  0E00               	movlw	0
 15335  0029EE  6E12               	movwf	i2___wmul@multiplicand+1,c
 15336  0029F0  0E03               	movlw	3
 15337  0029F2  6E11               	movwf	i2___wmul@multiplicand,c
 15338  0029F4  0E00               	movlw	0
 15339  0029F6  6E04               	movwf	i2___awmod@divisor+1,c
 15340  0029F8  0E0A               	movlw	10
 15341  0029FA  6E03               	movwf	i2___awmod@divisor,c
 15342  0029FC  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 15343  002A00  6A02               	clrf	i2___awmod@dividend+1,c
 15344  002A02  ECC3  F025         	call	i2___awmod	;wreg free
 15345  002A06  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 15346  002A0A  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 15347  002A0E  EC92  F028         	call	i2___wmul	;wreg free
 15348  002A12  0EEB               	movlw	low __npowers_
 15349  002A14  240F               	addwf	?i2___wmul,w,c
 15350  002A16  6EF6               	movwf	tblptrl,c
 15351  002A18  0EFD               	movlw	high __npowers_
 15352  002A1A  2010               	addwfc	?i2___wmul+1,w,c
 15353  002A1C  6EF7               	movwf	tblptrh,c
 15354  002A1E                     	if	0	;There are less than 3 active tblptr bytes
 15355  002A1E                     	endif
 15356  002A1E  0009               	tblrd		*+
 15357  002A20  CFF5 F018          	movff	tablat,i2___ftmul@f2
 15358  002A24  0009               	tblrd		*+
 15359  002A26  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 15360  002A2A  000A               	tblrd		*-
 15361  002A2C  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 15362  002A30  0E00               	movlw	0
 15363  002A32  6E0A               	movwf	i2___awdiv@divisor+1,c
 15364  002A34  0E0A               	movlw	10
 15365  002A36  6E09               	movwf	i2___awdiv@divisor,c
 15366  002A38  C02D  F007         	movff	i2fround@prec,i2___awdiv@dividend
 15367  002A3C  6A08               	clrf	i2___awdiv@dividend+1,c
 15368  002A3E  ECC6  F024         	call	i2___awdiv	;wreg free
 15369  002A42  0E09               	movlw	9
 15370  002A44  2407               	addwf	?i2___awdiv,w,c
 15371  002A46  6E0F               	movwf	i2___wmul@multiplier,c
 15372  002A48  0E00               	movlw	0
 15373  002A4A  2008               	addwfc	?i2___awdiv+1,w,c
 15374  002A4C  6E10               	movwf	i2___wmul@multiplier+1,c
 15375  002A4E  0E00               	movlw	0
 15376  002A50  6E12               	movwf	i2___wmul@multiplicand+1,c
 15377  002A52  0E03               	movlw	3
 15378  002A54  6E11               	movwf	i2___wmul@multiplicand,c
 15379  002A56  EC92  F028         	call	i2___wmul	;wreg free
 15380  002A5A  0EEB               	movlw	low __npowers_
 15381  002A5C  240F               	addwf	?i2___wmul,w,c
 15382  002A5E  6EF6               	movwf	tblptrl,c
 15383  002A60  0EFD               	movlw	high __npowers_
 15384  002A62  2010               	addwfc	?i2___wmul+1,w,c
 15385  002A64  6EF7               	movwf	tblptrh,c
 15386  002A66                     	if	0	;There are less than 3 active tblptr bytes
 15387  002A66                     	endif
 15388  002A66  0009               	tblrd		*+
 15389  002A68  CFF5 F015          	movff	tablat,i2___ftmul@f1
 15390  002A6C  0009               	tblrd		*+
 15391  002A6E  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 15392  002A72  000A               	tblrd		*-
 15393  002A74  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 15394  002A78  EC31  F01F         	call	i2___ftmul	;wreg free
 15395  002A7C  C015  F02A         	movff	?i2___ftmul,i2_fround$1532
 15396  002A80  C016  F02B         	movff	?i2___ftmul+1,i2_fround$1532+1
 15397  002A84  C017  F02C         	movff	?i2___ftmul+2,i2_fround$1532+2
 15398                           
 15399                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 15400  002A88  C02A  F015         	movff	i2_fround$1532,i2___ftmul@f1
 15401  002A8C  C02B  F016         	movff	i2_fround$1532+1,i2___ftmul@f1+1
 15402  002A90  C02C  F017         	movff	i2_fround$1532+2,i2___ftmul@f1+2
 15403  002A94  0E00               	movlw	0
 15404  002A96  6E18               	movwf	i2___ftmul@f2,c
 15405  002A98  0E00               	movlw	0
 15406  002A9A  6E19               	movwf	i2___ftmul@f2+1,c
 15407  002A9C  0E3F               	movlw	63
 15408  002A9E  6E1A               	movwf	i2___ftmul@f2+2,c
 15409  002AA0  EC31  F01F         	call	i2___ftmul	;wreg free
 15410  002AA4  D799               	goto	L13
 15411  002AA6                     i2l5846:
 15412                           
 15413                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 15414  002AA6  502D               	movf	i2fround@prec,w,c
 15415  002AA8  0D03               	mullw	3
 15416  002AAA  0EEB               	movlw	low __npowers_
 15417  002AAC  24F3               	addwf	prodl,w,c
 15418  002AAE  6EF6               	movwf	tblptrl,c
 15419  002AB0  0EFD               	movlw	high __npowers_
 15420  002AB2  20F4               	addwfc	prodh,w,c
 15421  002AB4  6EF7               	movwf	tblptrh,c
 15422  002AB6                     	if	0	;There are less than 3 active tblptr bytes
 15423  002AB6                     	endif
 15424  002AB6  0009               	tblrd		*+
 15425  002AB8  CFF5 F015          	movff	tablat,i2___ftmul@f1
 15426  002ABC  0009               	tblrd		*+
 15427  002ABE  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 15428  002AC2  000A               	tblrd		*-
 15429  002AC4  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 15430  002AC8  0E00               	movlw	0
 15431  002ACA  6E18               	movwf	i2___ftmul@f2,c
 15432  002ACC  0E00               	movlw	0
 15433  002ACE  6E19               	movwf	i2___ftmul@f2+1,c
 15434  002AD0  0E3F               	movlw	63
 15435  002AD2  6E1A               	movwf	i2___ftmul@f2+2,c
 15436  002AD4  EC31  F01F         	call	i2___ftmul	;wreg free
 15437  002AD8  C015  F024         	movff	?i2___ftmul,?i2_fround
 15438  002ADC  C016  F025         	movff	?i2___ftmul+1,?i2_fround+1
 15439  002AE0  C017  F026         	movff	?i2___ftmul+2,?i2_fround+2
 15440  002AE4  0012               	return	
 15441  002AE6                     __end_ofi2_fround:
 15442                           	opt stack 0
 15443                           pclatu	equ	0xFFB
 15444                           pclath	equ	0xFFA
 15445                           tblptru	equ	0xFF8
 15446                           tblptrh	equ	0xFF7
 15447                           tblptrl	equ	0xFF6
 15448                           tablat	equ	0xFF5
 15449                           prodh	equ	0xFF4
 15450                           prodl	equ	0xFF3
 15451                           intcon	equ	0xFF2
 15452                           intcon3	equ	0xFF0
 15453                           postinc0	equ	0xFEE
 15454                           fsr0h	equ	0xFEA
 15455                           fsr0l	equ	0xFE9
 15456                           wreg	equ	0xFE8
 15457                           postdec1	equ	0xFE5
 15458                           fsr1h	equ	0xFE2
 15459                           fsr1l	equ	0xFE1
 15460                           indf2	equ	0xFDF
 15461                           postinc2	equ	0xFDE
 15462                           postdec2	equ	0xFDD
 15463                           fsr2h	equ	0xFDA
 15464                           fsr2l	equ	0xFD9
 15465                           status	equ	0xFD8
 15466                           
 15467 ;; *************** function i2___wmul *****************
 15468 ;; Defined at:
 15469 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 15470 ;; Parameters:    Size  Location     Type
 15471 ;;  multiplier      2   14[COMRAM] unsigned int 
 15472 ;;  multiplicand    2   16[COMRAM] unsigned int 
 15473 ;; Auto vars:     Size  Location     Type
 15474 ;;  __wmul          2   18[COMRAM] unsigned int 
 15475 ;; Return value:  Size  Location     Type
 15476 ;;                  2   14[COMRAM] unsigned int 
 15477 ;; Registers used:
 15478 ;;		wreg, status,2, status,0, prodl, prodh
 15479 ;; Tracked objects:
 15480 ;;		On entry : 0/0
 15481 ;;		On exit  : 0/0
 15482 ;;		Unchanged: 0/0
 15483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15484 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15485 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15487 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15488 ;;Total ram usage:        6 bytes
 15489 ;; Hardware stack levels used:    1
 15490 ;; This function calls:
 15491 ;;		Nothing
 15492 ;; This function is called by:
 15493 ;;		i2_fround
 15494 ;;		i2_scale
 15495 ;;		i2_printf
 15496 ;; This function uses a non-reentrant model
 15497 ;;
 15498                           
 15499                           	psect	text51
 15500  005124                     __ptext51:
 15501                           	opt stack 0
 15502  005124                     i2___wmul:
 15503                           	opt stack 20
 15504                           
 15505                           ;incstack = 0
 15506  005124  500F               	movf	i2___wmul@multiplier,w,c
 15507  005126  0211               	mulwf	i2___wmul@multiplicand,c
 15508  005128  CFF3 F013          	movff	prodl,i2___wmul@product
 15509  00512C  CFF4 F014          	movff	prodh,i2___wmul@product+1
 15510  005130  500F               	movf	i2___wmul@multiplier,w,c
 15511  005132  0212               	mulwf	i2___wmul@multiplicand+1,c
 15512  005134  50F3               	movf	prodl,w,c
 15513  005136  2614               	addwf	i2___wmul@product+1,f,c
 15514  005138  5010               	movf	i2___wmul@multiplier+1,w,c
 15515  00513A  0211               	mulwf	i2___wmul@multiplicand,c
 15516  00513C  50F3               	movf	prodl,w,c
 15517  00513E  2614               	addwf	i2___wmul@product+1,f,c
 15518  005140  C013  F00F         	movff	i2___wmul@product,?i2___wmul
 15519  005144  C014  F010         	movff	i2___wmul@product+1,?i2___wmul+1
 15520  005148  0012               	return	
 15521  00514A                     __end_ofi2___wmul:
 15522                           	opt stack 0
 15523                           pclatu	equ	0xFFB
 15524                           pclath	equ	0xFFA
 15525                           tblptru	equ	0xFF8
 15526                           tblptrh	equ	0xFF7
 15527                           tblptrl	equ	0xFF6
 15528                           tablat	equ	0xFF5
 15529                           prodh	equ	0xFF4
 15530                           prodl	equ	0xFF3
 15531                           intcon	equ	0xFF2
 15532                           intcon3	equ	0xFF0
 15533                           postinc0	equ	0xFEE
 15534                           fsr0h	equ	0xFEA
 15535                           fsr0l	equ	0xFE9
 15536                           wreg	equ	0xFE8
 15537                           postdec1	equ	0xFE5
 15538                           fsr1h	equ	0xFE2
 15539                           fsr1l	equ	0xFE1
 15540                           indf2	equ	0xFDF
 15541                           postinc2	equ	0xFDE
 15542                           postdec2	equ	0xFDD
 15543                           fsr2h	equ	0xFDA
 15544                           fsr2l	equ	0xFD9
 15545                           status	equ	0xFD8
 15546                           
 15547 ;; *************** function i2___ftmul *****************
 15548 ;; Defined at:
 15549 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 15550 ;; Parameters:    Size  Location     Type
 15551 ;;  f1              3   20[COMRAM] float 
 15552 ;;  f2              3   23[COMRAM] float 
 15553 ;; Auto vars:     Size  Location     Type
 15554 ;;  __ftmul         3   30[COMRAM] unsigned um
 15555 ;;  __ftmul         1   34[COMRAM] unsigned char 
 15556 ;;  __ftmul         1   33[COMRAM] unsigned char 
 15557 ;;  __ftmul         1   29[COMRAM] unsigned char 
 15558 ;; Return value:  Size  Location     Type
 15559 ;;                  3   20[COMRAM] float 
 15560 ;; Registers used:
 15561 ;;		wreg, status,2, status,0, cstack
 15562 ;; Tracked objects:
 15563 ;;		On entry : 0/0
 15564 ;;		On exit  : 0/0
 15565 ;;		Unchanged: 0/0
 15566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15567 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15568 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15569 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15570 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15571 ;;Total ram usage:       15 bytes
 15572 ;; Hardware stack levels used:    1
 15573 ;; Hardware stack levels required when called:    1
 15574 ;; This function calls:
 15575 ;;		i2___ftpack
 15576 ;; This function is called by:
 15577 ;;		i2_fround
 15578 ;;		i2_scale
 15579 ;;		i2_printf
 15580 ;; This function uses a non-reentrant model
 15581 ;;
 15582                           
 15583                           	psect	text52
 15584  003E62                     __ptext52:
 15585                           	opt stack 0
 15586  003E62                     i2___ftmul:
 15587                           	opt stack 19
 15588                           
 15589                           ;incstack = 0
 15590  003E62  C017  F01B         	movff	i2___ftmul@f1+2,??i2___ftmul
 15591  003E66  6A1C               	clrf	(??i2___ftmul+1)& (0+255),c
 15592  003E68  6A1D               	clrf	(??i2___ftmul+2)& (0+255),c
 15593  003E6A  3416               	rlcf	i2___ftmul@f1+1,w,c
 15594  003E6C  361B               	rlcf	??i2___ftmul& (0+255),f,c
 15595  003E6E  E301               	bnc	u600_41
 15596  003E70  801C               	bsf	(??i2___ftmul+1)& (0+255),0,c
 15597  003E72                     u600_41:
 15598  003E72  501B               	movf	??i2___ftmul,w,c
 15599  003E74  6E1E               	movwf	i2___ftmul@exp,c
 15600  003E76  501E               	movf	i2___ftmul@exp,w,c
 15601  003E78  A4D8               	btfss	status,2,c
 15602  003E7A  D007               	goto	i2l5590
 15603  003E7C  0E00               	movlw	0
 15604  003E7E  6E15               	movwf	?i2___ftmul,c
 15605  003E80  0E00               	movlw	0
 15606  003E82  6E16               	movwf	?i2___ftmul+1,c
 15607  003E84  0E00               	movlw	0
 15608  003E86  6E17               	movwf	?i2___ftmul+2,c
 15609  003E88  0012               	return	
 15610  003E8A                     i2l5590:
 15611  003E8A  C01A  F01B         	movff	i2___ftmul@f2+2,??i2___ftmul
 15612  003E8E  6A1C               	clrf	(??i2___ftmul+1)& (0+255),c
 15613  003E90  6A1D               	clrf	(??i2___ftmul+2)& (0+255),c
 15614  003E92  3419               	rlcf	i2___ftmul@f2+1,w,c
 15615  003E94  361B               	rlcf	??i2___ftmul& (0+255),f,c
 15616  003E96  E301               	bnc	u602_41
 15617  003E98  801C               	bsf	(??i2___ftmul+1)& (0+255),0,c
 15618  003E9A                     u602_41:
 15619  003E9A  501B               	movf	??i2___ftmul,w,c
 15620  003E9C  6E23               	movwf	i2___ftmul@sign,c
 15621  003E9E  5023               	movf	i2___ftmul@sign,w,c
 15622  003EA0  A4D8               	btfss	status,2,c
 15623  003EA2  D007               	goto	i2l5596
 15624  003EA4  0E00               	movlw	0
 15625  003EA6  6E15               	movwf	?i2___ftmul,c
 15626  003EA8  0E00               	movlw	0
 15627  003EAA  6E16               	movwf	?i2___ftmul+1,c
 15628  003EAC  0E00               	movlw	0
 15629  003EAE  6E17               	movwf	?i2___ftmul+2,c
 15630  003EB0  0012               	return	
 15631  003EB2                     i2l5596:
 15632  003EB2  5023               	movf	i2___ftmul@sign,w,c
 15633  003EB4  0F7B               	addlw	123
 15634  003EB6  261E               	addwf	i2___ftmul@exp,f,c
 15635  003EB8  C017  F023         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 15636  003EBC  501A               	movf	i2___ftmul@f2+2,w,c
 15637  003EBE  1A23               	xorwf	i2___ftmul@sign,f,c
 15638  003EC0  0E80               	movlw	128
 15639  003EC2  1623               	andwf	i2___ftmul@sign,f,c
 15640  003EC4  8E16               	bsf	i2___ftmul@f1+1,7,c
 15641  003EC6  8E19               	bsf	i2___ftmul@f2+1,7,c
 15642  003EC8  0EFF               	movlw	255
 15643  003ECA  1618               	andwf	i2___ftmul@f2,f,c
 15644  003ECC  0EFF               	movlw	255
 15645  003ECE  1619               	andwf	i2___ftmul@f2+1,f,c
 15646  003ED0  0E00               	movlw	0
 15647  003ED2  161A               	andwf	i2___ftmul@f2+2,f,c
 15648  003ED4  0E00               	movlw	0
 15649  003ED6  6E1F               	movwf	i2___ftmul@f3_as_product,c
 15650  003ED8  0E00               	movlw	0
 15651  003EDA  6E20               	movwf	i2___ftmul@f3_as_product+1,c
 15652  003EDC  0E00               	movlw	0
 15653  003EDE  6E21               	movwf	i2___ftmul@f3_as_product+2,c
 15654  003EE0  0E07               	movlw	7
 15655  003EE2  6E22               	movwf	i2___ftmul@cntr,c
 15656  003EE4                     i2l5610:
 15657  003EE4  A015               	btfss	i2___ftmul@f1,0,c
 15658  003EE6  D006               	goto	i2l5614
 15659  003EE8  5018               	movf	i2___ftmul@f2,w,c
 15660  003EEA  261F               	addwf	i2___ftmul@f3_as_product,f,c
 15661  003EEC  5019               	movf	i2___ftmul@f2+1,w,c
 15662  003EEE  2220               	addwfc	i2___ftmul@f3_as_product+1,f,c
 15663  003EF0  501A               	movf	i2___ftmul@f2+2,w,c
 15664  003EF2  2221               	addwfc	i2___ftmul@f3_as_product+2,f,c
 15665  003EF4                     i2l5614:
 15666  003EF4  90D8               	bcf	status,0,c
 15667  003EF6  3217               	rrcf	i2___ftmul@f1+2,f,c
 15668  003EF8  3216               	rrcf	i2___ftmul@f1+1,f,c
 15669  003EFA  3215               	rrcf	i2___ftmul@f1,f,c
 15670  003EFC  90D8               	bcf	status,0,c
 15671  003EFE  3618               	rlcf	i2___ftmul@f2,f,c
 15672  003F00  3619               	rlcf	i2___ftmul@f2+1,f,c
 15673  003F02  361A               	rlcf	i2___ftmul@f2+2,f,c
 15674  003F04  2E22               	decfsz	i2___ftmul@cntr,f,c
 15675  003F06  D7EE               	goto	i2l5610
 15676  003F08  0E09               	movlw	9
 15677  003F0A  6E22               	movwf	i2___ftmul@cntr,c
 15678  003F0C                     i2l5620:
 15679  003F0C  A015               	btfss	i2___ftmul@f1,0,c
 15680  003F0E  D006               	goto	i2l5624
 15681  003F10  5018               	movf	i2___ftmul@f2,w,c
 15682  003F12  261F               	addwf	i2___ftmul@f3_as_product,f,c
 15683  003F14  5019               	movf	i2___ftmul@f2+1,w,c
 15684  003F16  2220               	addwfc	i2___ftmul@f3_as_product+1,f,c
 15685  003F18  501A               	movf	i2___ftmul@f2+2,w,c
 15686  003F1A  2221               	addwfc	i2___ftmul@f3_as_product+2,f,c
 15687  003F1C                     i2l5624:
 15688  003F1C  90D8               	bcf	status,0,c
 15689  003F1E  3217               	rrcf	i2___ftmul@f1+2,f,c
 15690  003F20  3216               	rrcf	i2___ftmul@f1+1,f,c
 15691  003F22  3215               	rrcf	i2___ftmul@f1,f,c
 15692  003F24  90D8               	bcf	status,0,c
 15693  003F26  3221               	rrcf	i2___ftmul@f3_as_product+2,f,c
 15694  003F28  3220               	rrcf	i2___ftmul@f3_as_product+1,f,c
 15695  003F2A  321F               	rrcf	i2___ftmul@f3_as_product,f,c
 15696  003F2C  2E22               	decfsz	i2___ftmul@cntr,f,c
 15697  003F2E  D7EE               	goto	i2l5620
 15698  003F30  C01F  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 15699  003F34  C020  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 15700  003F38  C021  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 15701  003F3C  C01E  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 15702  003F40  C023  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 15703  003F44  ECF4  F022         	call	i2___ftpack	;wreg free
 15704  003F48  C001  F015         	movff	?i2___ftpack,?i2___ftmul
 15705  003F4C  C002  F016         	movff	?i2___ftpack+1,?i2___ftmul+1
 15706  003F50  C003  F017         	movff	?i2___ftpack+2,?i2___ftmul+2
 15707  003F54  0012               	return	
 15708  003F56                     __end_ofi2___ftmul:
 15709                           	opt stack 0
 15710                           pclatu	equ	0xFFB
 15711                           pclath	equ	0xFFA
 15712                           tblptru	equ	0xFF8
 15713                           tblptrh	equ	0xFF7
 15714                           tblptrl	equ	0xFF6
 15715                           tablat	equ	0xFF5
 15716                           prodh	equ	0xFF4
 15717                           prodl	equ	0xFF3
 15718                           intcon	equ	0xFF2
 15719                           intcon3	equ	0xFF0
 15720                           postinc0	equ	0xFEE
 15721                           fsr0h	equ	0xFEA
 15722                           fsr0l	equ	0xFE9
 15723                           wreg	equ	0xFE8
 15724                           postdec1	equ	0xFE5
 15725                           fsr1h	equ	0xFE2
 15726                           fsr1l	equ	0xFE1
 15727                           indf2	equ	0xFDF
 15728                           postinc2	equ	0xFDE
 15729                           postdec2	equ	0xFDD
 15730                           fsr2h	equ	0xFDA
 15731                           fsr2l	equ	0xFD9
 15732                           status	equ	0xFD8
 15733                           
 15734 ;; *************** function i2___awdiv *****************
 15735 ;; Defined at:
 15736 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 15737 ;; Parameters:    Size  Location     Type
 15738 ;;  dividend        2    6[COMRAM] int 
 15739 ;;  divisor         2    8[COMRAM] int 
 15740 ;; Auto vars:     Size  Location     Type
 15741 ;;  __awdiv         2   12[COMRAM] int 
 15742 ;;  __awdiv         1   11[COMRAM] unsigned char 
 15743 ;;  __awdiv         1   10[COMRAM] unsigned char 
 15744 ;; Return value:  Size  Location     Type
 15745 ;;                  2    6[COMRAM] int 
 15746 ;; Registers used:
 15747 ;;		wreg, status,2, status,0
 15748 ;; Tracked objects:
 15749 ;;		On entry : 0/0
 15750 ;;		On exit  : 0/0
 15751 ;;		Unchanged: 0/0
 15752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15753 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15754 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15756 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15757 ;;Total ram usage:        8 bytes
 15758 ;; Hardware stack levels used:    1
 15759 ;; This function calls:
 15760 ;;		Nothing
 15761 ;; This function is called by:
 15762 ;;		i2_fround
 15763 ;;		i2_scale
 15764 ;;		i2_printf
 15765 ;; This function uses a non-reentrant model
 15766 ;;
 15767                           
 15768                           	psect	text53
 15769  00498C                     __ptext53:
 15770                           	opt stack 0
 15771  00498C                     i2___awdiv:
 15772                           	opt stack 20
 15773                           
 15774                           ;incstack = 0
 15775  00498C  0E00               	movlw	0
 15776  00498E  6E0C               	movwf	i2___awdiv@sign,c
 15777  004990  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 15778  004992  D006               	goto	i2l5442
 15779  004994  6C09               	negf	i2___awdiv@divisor,c
 15780  004996  1E0A               	comf	i2___awdiv@divisor+1,f,c
 15781  004998  B0D8               	btfsc	status,0,c
 15782  00499A  2A0A               	incf	i2___awdiv@divisor+1,f,c
 15783  00499C  0E01               	movlw	1
 15784  00499E  6E0C               	movwf	i2___awdiv@sign,c
 15785  0049A0                     i2l5442:
 15786  0049A0  AE08               	btfss	i2___awdiv@dividend+1,7,c
 15787  0049A2  D006               	goto	i2l5448
 15788  0049A4  6C07               	negf	i2___awdiv@dividend,c
 15789  0049A6  1E08               	comf	i2___awdiv@dividend+1,f,c
 15790  0049A8  B0D8               	btfsc	status,0,c
 15791  0049AA  2A08               	incf	i2___awdiv@dividend+1,f,c
 15792  0049AC  0E01               	movlw	1
 15793  0049AE  1A0C               	xorwf	i2___awdiv@sign,f,c
 15794  0049B0                     i2l5448:
 15795  0049B0  0E00               	movlw	0
 15796  0049B2  6E0E               	movwf	i2___awdiv@quotient+1,c
 15797  0049B4  0E00               	movlw	0
 15798  0049B6  6E0D               	movwf	i2___awdiv@quotient,c
 15799  0049B8  5009               	movf	i2___awdiv@divisor,w,c
 15800  0049BA  100A               	iorwf	i2___awdiv@divisor+1,w,c
 15801  0049BC  B4D8               	btfsc	status,2,c
 15802  0049BE  D01C               	goto	i2l5470
 15803  0049C0  0E01               	movlw	1
 15804  0049C2  6E0B               	movwf	i2___awdiv@counter,c
 15805  0049C4  D004               	goto	i2l5456
 15806  0049C6                     i2l5454:
 15807  0049C6  90D8               	bcf	status,0,c
 15808  0049C8  3609               	rlcf	i2___awdiv@divisor,f,c
 15809  0049CA  360A               	rlcf	i2___awdiv@divisor+1,f,c
 15810  0049CC  2A0B               	incf	i2___awdiv@counter,f,c
 15811  0049CE                     i2l5456:
 15812  0049CE  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 15813  0049D0  D7FA               	goto	i2l5454
 15814  0049D2                     i2l5458:
 15815  0049D2  90D8               	bcf	status,0,c
 15816  0049D4  360D               	rlcf	i2___awdiv@quotient,f,c
 15817  0049D6  360E               	rlcf	i2___awdiv@quotient+1,f,c
 15818  0049D8  5009               	movf	i2___awdiv@divisor,w,c
 15819  0049DA  5C07               	subwf	i2___awdiv@dividend,w,c
 15820  0049DC  500A               	movf	i2___awdiv@divisor+1,w,c
 15821  0049DE  5808               	subwfb	i2___awdiv@dividend+1,w,c
 15822  0049E0  A0D8               	btfss	status,0,c
 15823  0049E2  D005               	goto	i2l5466
 15824  0049E4  5009               	movf	i2___awdiv@divisor,w,c
 15825  0049E6  5E07               	subwf	i2___awdiv@dividend,f,c
 15826  0049E8  500A               	movf	i2___awdiv@divisor+1,w,c
 15827  0049EA  5A08               	subwfb	i2___awdiv@dividend+1,f,c
 15828  0049EC  800D               	bsf	i2___awdiv@quotient,0,c
 15829  0049EE                     i2l5466:
 15830  0049EE  90D8               	bcf	status,0,c
 15831  0049F0  320A               	rrcf	i2___awdiv@divisor+1,f,c
 15832  0049F2  3209               	rrcf	i2___awdiv@divisor,f,c
 15833  0049F4  2E0B               	decfsz	i2___awdiv@counter,f,c
 15834  0049F6  D7ED               	goto	i2l5458
 15835  0049F8                     i2l5470:
 15836  0049F8  500C               	movf	i2___awdiv@sign,w,c
 15837  0049FA  B4D8               	btfsc	status,2,c
 15838  0049FC  D004               	goto	i2l5474
 15839  0049FE  6C0D               	negf	i2___awdiv@quotient,c
 15840  004A00  1E0E               	comf	i2___awdiv@quotient+1,f,c
 15841  004A02  B0D8               	btfsc	status,0,c
 15842  004A04  2A0E               	incf	i2___awdiv@quotient+1,f,c
 15843  004A06                     i2l5474:
 15844  004A06  C00D  F007         	movff	i2___awdiv@quotient,?i2___awdiv
 15845  004A0A  C00E  F008         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 15846  004A0E  0012               	return	
 15847  004A10                     __end_ofi2___awdiv:
 15848                           	opt stack 0
 15849                           pclatu	equ	0xFFB
 15850                           pclath	equ	0xFFA
 15851                           tblptru	equ	0xFF8
 15852                           tblptrh	equ	0xFF7
 15853                           tblptrl	equ	0xFF6
 15854                           tablat	equ	0xFF5
 15855                           prodh	equ	0xFF4
 15856                           prodl	equ	0xFF3
 15857                           intcon	equ	0xFF2
 15858                           intcon3	equ	0xFF0
 15859                           postinc0	equ	0xFEE
 15860                           fsr0h	equ	0xFEA
 15861                           fsr0l	equ	0xFE9
 15862                           wreg	equ	0xFE8
 15863                           postdec1	equ	0xFE5
 15864                           fsr1h	equ	0xFE2
 15865                           fsr1l	equ	0xFE1
 15866                           indf2	equ	0xFDF
 15867                           postinc2	equ	0xFDE
 15868                           postdec2	equ	0xFDD
 15869                           fsr2h	equ	0xFDA
 15870                           fsr2l	equ	0xFD9
 15871                           status	equ	0xFD8
 15872                           
 15873 ;; *************** function i2__tdiv_to_l_ *****************
 15874 ;; Defined at:
 15875 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
 15876 ;; Parameters:    Size  Location     Type
 15877 ;;  f1              3    0[COMRAM] float 
 15878 ;;  f2              3    3[COMRAM] float 
 15879 ;; Auto vars:     Size  Location     Type
 15880 ;;  _tdiv_to_l_     4    9[COMRAM] unsigned long 
 15881 ;;  _tdiv_to_l_     1   14[COMRAM] unsigned char 
 15882 ;;  _tdiv_to_l_     1   13[COMRAM] unsigned char 
 15883 ;; Return value:  Size  Location     Type
 15884 ;;                  4    0[COMRAM] unsigned long 
 15885 ;; Registers used:
 15886 ;;		wreg, status,2, status,0
 15887 ;; Tracked objects:
 15888 ;;		On entry : 0/0
 15889 ;;		On exit  : 0/0
 15890 ;;		Unchanged: 0/0
 15891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15892 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15893 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15894 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15895 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15896 ;;Total ram usage:       15 bytes
 15897 ;; Hardware stack levels used:    1
 15898 ;; This function calls:
 15899 ;;		Nothing
 15900 ;; This function is called by:
 15901 ;;		i2_printf
 15902 ;; This function uses a non-reentrant model
 15903 ;;
 15904                           
 15905                           	psect	text54
 15906  0036B4                     __ptext54:
 15907                           	opt stack 0
 15908  0036B4                     i2__tdiv_to_l_:
 15909                           	opt stack 21
 15910                           
 15911                           ;incstack = 0
 15912  0036B4  C003  F007         	movff	i2__tdiv_to_l_@f1+2,??i2__tdiv_to_l_
 15913  0036B8  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 15914  0036BA  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 15915  0036BC  3402               	rlcf	i2__tdiv_to_l_@f1+1,w,c
 15916  0036BE  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 15917  0036C0  E301               	bnc	u642_41
 15918  0036C2  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 15919  0036C4                     u642_41:
 15920  0036C4  5007               	movf	??i2__tdiv_to_l_,w,c
 15921  0036C6  6E0F               	movwf	i2__tdiv_to_l_@exp1,c
 15922  0036C8  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 15923  0036CA  A4D8               	btfss	status,2,c
 15924  0036CC  D009               	goto	i2l5954
 15925  0036CE  0E00               	movlw	0
 15926  0036D0  6E01               	movwf	?i2__tdiv_to_l_,c
 15927  0036D2  0E00               	movlw	0
 15928  0036D4  6E02               	movwf	?i2__tdiv_to_l_+1,c
 15929  0036D6  0E00               	movlw	0
 15930  0036D8  6E03               	movwf	?i2__tdiv_to_l_+2,c
 15931  0036DA  0E00               	movlw	0
 15932  0036DC  6E04               	movwf	?i2__tdiv_to_l_+3,c
 15933  0036DE  0012               	return	
 15934  0036E0                     i2l5954:
 15935  0036E0  C006  F007         	movff	i2__tdiv_to_l_@f2+2,??i2__tdiv_to_l_
 15936  0036E4  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 15937  0036E6  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 15938  0036E8  3405               	rlcf	i2__tdiv_to_l_@f2+1,w,c
 15939  0036EA  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 15940  0036EC  E301               	bnc	u644_41
 15941  0036EE  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 15942  0036F0                     u644_41:
 15943  0036F0  5007               	movf	??i2__tdiv_to_l_,w,c
 15944  0036F2  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 15945  0036F4  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 15946  0036F6  A4D8               	btfss	status,2,c
 15947  0036F8  D009               	goto	i2l5960
 15948  0036FA  0E00               	movlw	0
 15949  0036FC  6E01               	movwf	?i2__tdiv_to_l_,c
 15950  0036FE  0E00               	movlw	0
 15951  003700  6E02               	movwf	?i2__tdiv_to_l_+1,c
 15952  003702  0E00               	movlw	0
 15953  003704  6E03               	movwf	?i2__tdiv_to_l_+2,c
 15954  003706  0E00               	movlw	0
 15955  003708  6E04               	movwf	?i2__tdiv_to_l_+3,c
 15956  00370A  0012               	return	
 15957  00370C                     i2l5960:
 15958  00370C  8E02               	bsf	i2__tdiv_to_l_@f1+1,7,c
 15959  00370E  0EFF               	movlw	255
 15960  003710  1601               	andwf	i2__tdiv_to_l_@f1,f,c
 15961  003712  0EFF               	movlw	255
 15962  003714  1602               	andwf	i2__tdiv_to_l_@f1+1,f,c
 15963  003716  0E00               	movlw	0
 15964  003718  1603               	andwf	i2__tdiv_to_l_@f1+2,f,c
 15965  00371A  8E05               	bsf	i2__tdiv_to_l_@f2+1,7,c
 15966  00371C  0EFF               	movlw	255
 15967  00371E  1604               	andwf	i2__tdiv_to_l_@f2,f,c
 15968  003720  0EFF               	movlw	255
 15969  003722  1605               	andwf	i2__tdiv_to_l_@f2+1,f,c
 15970  003724  0E00               	movlw	0
 15971  003726  1606               	andwf	i2__tdiv_to_l_@f2+2,f,c
 15972  003728  0E00               	movlw	0
 15973  00372A  6E0A               	movwf	i2__tdiv_to_l_@quot,c
 15974  00372C  0E00               	movlw	0
 15975  00372E  6E0B               	movwf	i2__tdiv_to_l_@quot+1,c
 15976  003730  0E00               	movlw	0
 15977  003732  6E0C               	movwf	i2__tdiv_to_l_@quot+2,c
 15978  003734  0E00               	movlw	0
 15979  003736  6E0D               	movwf	i2__tdiv_to_l_@quot+3,c
 15980  003738  0E7F               	movlw	127
 15981  00373A  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 15982  00373C  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 15983  00373E  0F98               	addlw	152
 15984  003740  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 15985  003742  0E18               	movlw	24
 15986  003744  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 15987  003746                     i2l1088:
 15988  003746  90D8               	bcf	status,0,c
 15989  003748  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 15990  00374A  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 15991  00374C  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 15992  00374E  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 15993  003750  5004               	movf	i2__tdiv_to_l_@f2,w,c
 15994  003752  5C01               	subwf	i2__tdiv_to_l_@f1,w,c
 15995  003754  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 15996  003756  5802               	subwfb	i2__tdiv_to_l_@f1+1,w,c
 15997  003758  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 15998  00375A  5803               	subwfb	i2__tdiv_to_l_@f1+2,w,c
 15999  00375C  A0D8               	btfss	status,0,c
 16000  00375E  D007               	goto	i2l1089
 16001  003760  5004               	movf	i2__tdiv_to_l_@f2,w,c
 16002  003762  5E01               	subwf	i2__tdiv_to_l_@f1,f,c
 16003  003764  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 16004  003766  5A02               	subwfb	i2__tdiv_to_l_@f1+1,f,c
 16005  003768  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 16006  00376A  5A03               	subwfb	i2__tdiv_to_l_@f1+2,f,c
 16007  00376C  800A               	bsf	i2__tdiv_to_l_@quot,0,c
 16008  00376E                     i2l1089:
 16009  00376E  90D8               	bcf	status,0,c
 16010  003770  3601               	rlcf	i2__tdiv_to_l_@f1,f,c
 16011  003772  3602               	rlcf	i2__tdiv_to_l_@f1+1,f,c
 16012  003774  3603               	rlcf	i2__tdiv_to_l_@f1+2,f,c
 16013  003776  2E0E               	decfsz	i2__tdiv_to_l_@cntr,f,c
 16014  003778  D7E6               	goto	i2l1088
 16015  00377A  AE0F               	btfss	i2__tdiv_to_l_@exp1,7,c
 16016  00377C  D016               	goto	i2l5994
 16017  00377E  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 16018  003780  0A80               	xorlw	128
 16019  003782  0F97               	addlw	151
 16020  003784  B0D8               	btfsc	status,0,c
 16021  003786  D009               	goto	i2l5990
 16022  003788  0E00               	movlw	0
 16023  00378A  6E01               	movwf	?i2__tdiv_to_l_,c
 16024  00378C  0E00               	movlw	0
 16025  00378E  6E02               	movwf	?i2__tdiv_to_l_+1,c
 16026  003790  0E00               	movlw	0
 16027  003792  6E03               	movwf	?i2__tdiv_to_l_+2,c
 16028  003794  0E00               	movlw	0
 16029  003796  6E04               	movwf	?i2__tdiv_to_l_+3,c
 16030  003798  0012               	return	
 16031  00379A                     i2l5990:
 16032  00379A  90D8               	bcf	status,0,c
 16033  00379C  320D               	rrcf	i2__tdiv_to_l_@quot+3,f,c
 16034  00379E  320C               	rrcf	i2__tdiv_to_l_@quot+2,f,c
 16035  0037A0  320B               	rrcf	i2__tdiv_to_l_@quot+1,f,c
 16036  0037A2  320A               	rrcf	i2__tdiv_to_l_@quot,f,c
 16037  0037A4  3E0F               	incfsz	i2__tdiv_to_l_@exp1,f,c
 16038  0037A6  D7F9               	goto	i2l5990
 16039  0037A8  D015               	goto	i2l1095
 16040  0037AA                     i2l5994:
 16041  0037AA  0E17               	movlw	23
 16042  0037AC  640F               	cpfsgt	i2__tdiv_to_l_@exp1,c
 16043  0037AE  D00F               	goto	i2l6002
 16044  0037B0  0E00               	movlw	0
 16045  0037B2  6E01               	movwf	?i2__tdiv_to_l_,c
 16046  0037B4  0E00               	movlw	0
 16047  0037B6  6E02               	movwf	?i2__tdiv_to_l_+1,c
 16048  0037B8  0E00               	movlw	0
 16049  0037BA  6E03               	movwf	?i2__tdiv_to_l_+2,c
 16050  0037BC  0E00               	movlw	0
 16051  0037BE  6E04               	movwf	?i2__tdiv_to_l_+3,c
 16052  0037C0  0012               	return	
 16053  0037C2                     i2l6000:
 16054  0037C2  90D8               	bcf	status,0,c
 16055  0037C4  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 16056  0037C6  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 16057  0037C8  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 16058  0037CA  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 16059  0037CC  060F               	decf	i2__tdiv_to_l_@exp1,f,c
 16060  0037CE                     i2l6002:
 16061  0037CE  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 16062  0037D0  A4D8               	btfss	status,2,c
 16063  0037D2  D7F7               	goto	i2l6000
 16064  0037D4                     i2l1095:
 16065  0037D4  C00A  F001         	movff	i2__tdiv_to_l_@quot,?i2__tdiv_to_l_
 16066  0037D8  C00B  F002         	movff	i2__tdiv_to_l_@quot+1,?i2__tdiv_to_l_+1
 16067  0037DC  C00C  F003         	movff	i2__tdiv_to_l_@quot+2,?i2__tdiv_to_l_+2
 16068  0037E0  C00D  F004         	movff	i2__tdiv_to_l_@quot+3,?i2__tdiv_to_l_+3
 16069  0037E4  0012               	return		;funcret
 16070  0037E6                     __end_ofi2__tdiv_to_l_:
 16071                           	opt stack 0
 16072                           pclatu	equ	0xFFB
 16073                           pclath	equ	0xFFA
 16074                           tblptru	equ	0xFF8
 16075                           tblptrh	equ	0xFF7
 16076                           tblptrl	equ	0xFF6
 16077                           tablat	equ	0xFF5
 16078                           prodh	equ	0xFF4
 16079                           prodl	equ	0xFF3
 16080                           intcon	equ	0xFF2
 16081                           intcon3	equ	0xFF0
 16082                           postinc0	equ	0xFEE
 16083                           fsr0h	equ	0xFEA
 16084                           fsr0l	equ	0xFE9
 16085                           wreg	equ	0xFE8
 16086                           postdec1	equ	0xFE5
 16087                           fsr1h	equ	0xFE2
 16088                           fsr1l	equ	0xFE1
 16089                           indf2	equ	0xFDF
 16090                           postinc2	equ	0xFDE
 16091                           postdec2	equ	0xFDD
 16092                           fsr2h	equ	0xFDA
 16093                           fsr2l	equ	0xFD9
 16094                           status	equ	0xFD8
 16095                           
 16096 ;; *************** function i2__div_to_l_ *****************
 16097 ;; Defined at:
 16098 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
 16099 ;; Parameters:    Size  Location     Type
 16100 ;;  f1              3    0[COMRAM] unsigned long 
 16101 ;;  f2              3    3[COMRAM] unsigned long 
 16102 ;; Auto vars:     Size  Location     Type
 16103 ;;  _div_to_l_      4    6[COMRAM] unsigned long 
 16104 ;;  _div_to_l_      1   11[COMRAM] unsigned char 
 16105 ;;  _div_to_l_      1   10[COMRAM] unsigned char 
 16106 ;; Return value:  Size  Location     Type
 16107 ;;                  4    0[COMRAM] unsigned long 
 16108 ;; Registers used:
 16109 ;;		wreg, status,2, status,0
 16110 ;; Tracked objects:
 16111 ;;		On entry : 0/0
 16112 ;;		On exit  : 0/0
 16113 ;;		Unchanged: 0/0
 16114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16115 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16116 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16118 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16119 ;;Total ram usage:       12 bytes
 16120 ;; Hardware stack levels used:    1
 16121 ;; This function calls:
 16122 ;;		Nothing
 16123 ;; This function is called by:
 16124 ;;		i2_printf
 16125 ;; This function uses a non-reentrant model
 16126 ;;
 16127                           
 16128                           	psect	text55
 16129  003916                     __ptext55:
 16130                           	opt stack 0
 16131  003916                     i2__div_to_l_:
 16132                           	opt stack 21
 16133                           
 16134                           ;incstack = 0
 16135  003916  3403               	rlcf	i2__div_to_l_@f1+2,w,c
 16136  003918  3404               	rlcf	i2__div_to_l_@f1+3,w,c
 16137  00391A  6E0C               	movwf	i2__div_to_l_@exp1,c
 16138  00391C  500C               	movf	i2__div_to_l_@exp1,w,c
 16139  00391E  A4D8               	btfss	status,2,c
 16140  003920  D009               	goto	i2l5894
 16141  003922  0E00               	movlw	0
 16142  003924  6E01               	movwf	?i2__div_to_l_,c
 16143  003926  0E00               	movlw	0
 16144  003928  6E02               	movwf	?i2__div_to_l_+1,c
 16145  00392A  0E00               	movlw	0
 16146  00392C  6E03               	movwf	?i2__div_to_l_+2,c
 16147  00392E  0E00               	movlw	0
 16148  003930  6E04               	movwf	?i2__div_to_l_+3,c
 16149  003932  0012               	return	
 16150  003934                     i2l5894:
 16151  003934  3406               	rlcf	i2__div_to_l_@f2+2,w,c
 16152  003936  3407               	rlcf	i2__div_to_l_@f2+3,w,c
 16153  003938  6E0B               	movwf	i2__div_to_l_@cntr,c
 16154  00393A  500B               	movf	i2__div_to_l_@cntr,w,c
 16155  00393C  A4D8               	btfss	status,2,c
 16156  00393E  D009               	goto	i2l5900
 16157  003940  0E00               	movlw	0
 16158  003942  6E01               	movwf	?i2__div_to_l_,c
 16159  003944  0E00               	movlw	0
 16160  003946  6E02               	movwf	?i2__div_to_l_+1,c
 16161  003948  0E00               	movlw	0
 16162  00394A  6E03               	movwf	?i2__div_to_l_+2,c
 16163  00394C  0E00               	movlw	0
 16164  00394E  6E04               	movwf	?i2__div_to_l_+3,c
 16165  003950  0012               	return	
 16166  003952                     i2l5900:
 16167  003952  8E03               	bsf	i2__div_to_l_@f1+2,7,c
 16168  003954  0EFF               	movlw	255
 16169  003956  1601               	andwf	i2__div_to_l_@f1,f,c
 16170  003958  0EFF               	movlw	255
 16171  00395A  1602               	andwf	i2__div_to_l_@f1+1,f,c
 16172  00395C  0EFF               	movlw	255
 16173  00395E  1603               	andwf	i2__div_to_l_@f1+2,f,c
 16174  003960  0E00               	movlw	0
 16175  003962  1604               	andwf	i2__div_to_l_@f1+3,f,c
 16176  003964  8E06               	bsf	i2__div_to_l_@f2+2,7,c
 16177  003966  0EFF               	movlw	255
 16178  003968  1604               	andwf	i2__div_to_l_@f2,f,c
 16179  00396A  0EFF               	movlw	255
 16180  00396C  1605               	andwf	i2__div_to_l_@f2+1,f,c
 16181  00396E  0EFF               	movlw	255
 16182  003970  1606               	andwf	i2__div_to_l_@f2+2,f,c
 16183  003972  0E00               	movlw	0
 16184  003974  1607               	andwf	i2__div_to_l_@f2+3,f,c
 16185  003976  0E00               	movlw	0
 16186  003978  6E07               	movwf	i2__div_to_l_@quot,c
 16187  00397A  0E00               	movlw	0
 16188  00397C  6E08               	movwf	i2__div_to_l_@quot+1,c
 16189  00397E  0E00               	movlw	0
 16190  003980  6E09               	movwf	i2__div_to_l_@quot+2,c
 16191  003982  0E00               	movlw	0
 16192  003984  6E0A               	movwf	i2__div_to_l_@quot+3,c
 16193  003986  0E7F               	movlw	127
 16194  003988  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 16195  00398A  500B               	movf	i2__div_to_l_@cntr,w,c
 16196  00398C  0FA0               	addlw	160
 16197  00398E  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 16198  003990  0E20               	movlw	32
 16199  003992  6E0B               	movwf	i2__div_to_l_@cntr,c
 16200  003994                     i2l5914:
 16201  003994  90D8               	bcf	status,0,c
 16202  003996  3607               	rlcf	i2__div_to_l_@quot,f,c
 16203  003998  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 16204  00399A  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 16205  00399C  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 16206  00399E  5004               	movf	i2__div_to_l_@f2,w,c
 16207  0039A0  5C01               	subwf	i2__div_to_l_@f1,w,c
 16208  0039A2  5005               	movf	i2__div_to_l_@f2+1,w,c
 16209  0039A4  5802               	subwfb	i2__div_to_l_@f1+1,w,c
 16210  0039A6  5006               	movf	i2__div_to_l_@f2+2,w,c
 16211  0039A8  5803               	subwfb	i2__div_to_l_@f1+2,w,c
 16212  0039AA  5007               	movf	i2__div_to_l_@f2+3,w,c
 16213  0039AC  5804               	subwfb	i2__div_to_l_@f1+3,w,c
 16214  0039AE  A0D8               	btfss	status,0,c
 16215  0039B0  D009               	goto	i2l5922
 16216  0039B2  5004               	movf	i2__div_to_l_@f2,w,c
 16217  0039B4  5E01               	subwf	i2__div_to_l_@f1,f,c
 16218  0039B6  5005               	movf	i2__div_to_l_@f2+1,w,c
 16219  0039B8  5A02               	subwfb	i2__div_to_l_@f1+1,f,c
 16220  0039BA  5006               	movf	i2__div_to_l_@f2+2,w,c
 16221  0039BC  5A03               	subwfb	i2__div_to_l_@f1+2,f,c
 16222  0039BE  5007               	movf	i2__div_to_l_@f2+3,w,c
 16223  0039C0  5A04               	subwfb	i2__div_to_l_@f1+3,f,c
 16224  0039C2  8007               	bsf	i2__div_to_l_@quot,0,c
 16225  0039C4                     i2l5922:
 16226  0039C4  90D8               	bcf	status,0,c
 16227  0039C6  3601               	rlcf	i2__div_to_l_@f1,f,c
 16228  0039C8  3602               	rlcf	i2__div_to_l_@f1+1,f,c
 16229  0039CA  3603               	rlcf	i2__div_to_l_@f1+2,f,c
 16230  0039CC  3604               	rlcf	i2__div_to_l_@f1+3,f,c
 16231  0039CE  2E0B               	decfsz	i2__div_to_l_@cntr,f,c
 16232  0039D0  D7E1               	goto	i2l5914
 16233  0039D2  AE0C               	btfss	i2__div_to_l_@exp1,7,c
 16234  0039D4  D016               	goto	i2l5938
 16235  0039D6  500C               	movf	i2__div_to_l_@exp1,w,c
 16236  0039D8  0A80               	xorlw	128
 16237  0039DA  0F9F               	addlw	159
 16238  0039DC  B0D8               	btfsc	status,0,c
 16239  0039DE  D009               	goto	i2l5934
 16240  0039E0  0E00               	movlw	0
 16241  0039E2  6E01               	movwf	?i2__div_to_l_,c
 16242  0039E4  0E00               	movlw	0
 16243  0039E6  6E02               	movwf	?i2__div_to_l_+1,c
 16244  0039E8  0E00               	movlw	0
 16245  0039EA  6E03               	movwf	?i2__div_to_l_+2,c
 16246  0039EC  0E00               	movlw	0
 16247  0039EE  6E04               	movwf	?i2__div_to_l_+3,c
 16248  0039F0  0012               	return	
 16249  0039F2                     i2l5934:
 16250  0039F2  90D8               	bcf	status,0,c
 16251  0039F4  320A               	rrcf	i2__div_to_l_@quot+3,f,c
 16252  0039F6  3209               	rrcf	i2__div_to_l_@quot+2,f,c
 16253  0039F8  3208               	rrcf	i2__div_to_l_@quot+1,f,c
 16254  0039FA  3207               	rrcf	i2__div_to_l_@quot,f,c
 16255  0039FC  3E0C               	incfsz	i2__div_to_l_@exp1,f,c
 16256  0039FE  D7F9               	goto	i2l5934
 16257  003A00  D015               	goto	i2l991
 16258  003A02                     i2l5938:
 16259  003A02  0E1F               	movlw	31
 16260  003A04  640C               	cpfsgt	i2__div_to_l_@exp1,c
 16261  003A06  D00F               	goto	i2l5946
 16262  003A08  0E00               	movlw	0
 16263  003A0A  6E01               	movwf	?i2__div_to_l_,c
 16264  003A0C  0E00               	movlw	0
 16265  003A0E  6E02               	movwf	?i2__div_to_l_+1,c
 16266  003A10  0E00               	movlw	0
 16267  003A12  6E03               	movwf	?i2__div_to_l_+2,c
 16268  003A14  0E00               	movlw	0
 16269  003A16  6E04               	movwf	?i2__div_to_l_+3,c
 16270  003A18  0012               	return	
 16271  003A1A                     i2l5944:
 16272  003A1A  90D8               	bcf	status,0,c
 16273  003A1C  3607               	rlcf	i2__div_to_l_@quot,f,c
 16274  003A1E  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 16275  003A20  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 16276  003A22  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 16277  003A24  060C               	decf	i2__div_to_l_@exp1,f,c
 16278  003A26                     i2l5946:
 16279  003A26  500C               	movf	i2__div_to_l_@exp1,w,c
 16280  003A28  A4D8               	btfss	status,2,c
 16281  003A2A  D7F7               	goto	i2l5944
 16282  003A2C                     i2l991:
 16283  003A2C  C007  F001         	movff	i2__div_to_l_@quot,?i2__div_to_l_
 16284  003A30  C008  F002         	movff	i2__div_to_l_@quot+1,?i2__div_to_l_+1
 16285  003A34  C009  F003         	movff	i2__div_to_l_@quot+2,?i2__div_to_l_+2
 16286  003A38  C00A  F004         	movff	i2__div_to_l_@quot+3,?i2__div_to_l_+3
 16287  003A3C  0012               	return		;funcret
 16288  003A3E                     __end_ofi2__div_to_l_:
 16289                           	opt stack 0
 16290                           pclatu	equ	0xFFB
 16291                           pclath	equ	0xFFA
 16292                           tblptru	equ	0xFF8
 16293                           tblptrh	equ	0xFF7
 16294                           tblptrl	equ	0xFF6
 16295                           tablat	equ	0xFF5
 16296                           prodh	equ	0xFF4
 16297                           prodl	equ	0xFF3
 16298                           intcon	equ	0xFF2
 16299                           intcon3	equ	0xFF0
 16300                           postinc0	equ	0xFEE
 16301                           fsr0h	equ	0xFEA
 16302                           fsr0l	equ	0xFE9
 16303                           wreg	equ	0xFE8
 16304                           postdec1	equ	0xFE5
 16305                           fsr1h	equ	0xFE2
 16306                           fsr1l	equ	0xFE1
 16307                           indf2	equ	0xFDF
 16308                           postinc2	equ	0xFDE
 16309                           postdec2	equ	0xFDD
 16310                           fsr2h	equ	0xFDA
 16311                           fsr2l	equ	0xFD9
 16312                           status	equ	0xFD8
 16313                           
 16314 ;; *************** function i2___lltoft *****************
 16315 ;; Defined at:
 16316 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 16317 ;; Parameters:    Size  Location     Type
 16318 ;;  c               4    8[COMRAM] unsigned long 
 16319 ;; Auto vars:     Size  Location     Type
 16320 ;;  __lltoft        1   16[COMRAM] unsigned char 
 16321 ;; Return value:  Size  Location     Type
 16322 ;;                  3    8[COMRAM] float 
 16323 ;; Registers used:
 16324 ;;		wreg, status,2, status,0, cstack
 16325 ;; Tracked objects:
 16326 ;;		On entry : 0/0
 16327 ;;		On exit  : 0/0
 16328 ;;		Unchanged: 0/0
 16329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16330 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16331 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16332 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16333 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16334 ;;Total ram usage:        9 bytes
 16335 ;; Hardware stack levels used:    1
 16336 ;; Hardware stack levels required when called:    1
 16337 ;; This function calls:
 16338 ;;		i2___ftpack
 16339 ;; This function is called by:
 16340 ;;		i2_printf
 16341 ;; This function uses a non-reentrant model
 16342 ;;
 16343                           
 16344                           	psect	text56
 16345  004CC2                     __ptext56:
 16346                           	opt stack 0
 16347  004CC2                     i2___lltoft:
 16348                           	opt stack 20
 16349                           
 16350                           ;incstack = 0
 16351  004CC2  0E8E               	movlw	142
 16352  004CC4  6E11               	movwf	i2___lltoft@exp,c
 16353  004CC6  D006               	goto	i2l6134
 16354  004CC8                     i2l6132:
 16355  004CC8  90D8               	bcf	status,0,c
 16356  004CCA  320C               	rrcf	i2___lltoft@c+3,f,c
 16357  004CCC  320B               	rrcf	i2___lltoft@c+2,f,c
 16358  004CCE  320A               	rrcf	i2___lltoft@c+1,f,c
 16359  004CD0  3209               	rrcf	i2___lltoft@c,f,c
 16360  004CD2  2A11               	incf	i2___lltoft@exp,f,c
 16361  004CD4                     i2l6134:
 16362  004CD4  0E00               	movlw	0
 16363  004CD6  1409               	andwf	i2___lltoft@c,w,c
 16364  004CD8  6E0D               	movwf	??i2___lltoft& (0+255),c
 16365  004CDA  0E00               	movlw	0
 16366  004CDC  140A               	andwf	i2___lltoft@c+1,w,c
 16367  004CDE  6E0E               	movwf	(??i2___lltoft+1)& (0+255),c
 16368  004CE0  0E00               	movlw	0
 16369  004CE2  140B               	andwf	i2___lltoft@c+2,w,c
 16370  004CE4  6E0F               	movwf	(??i2___lltoft+2)& (0+255),c
 16371  004CE6  0EFF               	movlw	255
 16372  004CE8  140C               	andwf	i2___lltoft@c+3,w,c
 16373  004CEA  6E10               	movwf	(??i2___lltoft+3)& (0+255),c
 16374  004CEC  500D               	movf	??i2___lltoft,w,c
 16375  004CEE  100E               	iorwf	??i2___lltoft+1,w,c
 16376  004CF0  100F               	iorwf	??i2___lltoft+2,w,c
 16377  004CF2  1010               	iorwf	??i2___lltoft+3,w,c
 16378  004CF4  A4D8               	btfss	status,2,c
 16379  004CF6  D7E8               	goto	i2l6132
 16380  004CF8  C009  F001         	movff	i2___lltoft@c,i2___ftpack@arg
 16381  004CFC  C00A  F002         	movff	i2___lltoft@c+1,i2___ftpack@arg+1
 16382  004D00  C00B  F003         	movff	i2___lltoft@c+2,i2___ftpack@arg+2
 16383  004D04  C011  F004         	movff	i2___lltoft@exp,i2___ftpack@exp
 16384  004D08  0E00               	movlw	0
 16385  004D0A  6E05               	movwf	i2___ftpack@sign,c
 16386  004D0C  ECF4  F022         	call	i2___ftpack	;wreg free
 16387  004D10  C001  F009         	movff	?i2___ftpack,?i2___lltoft
 16388  004D14  C002  F00A         	movff	?i2___ftpack+1,?i2___lltoft+1
 16389  004D18  C003  F00B         	movff	?i2___ftpack+2,?i2___lltoft+2
 16390  004D1C  0012               	return	
 16391  004D1E                     __end_ofi2___lltoft:
 16392                           	opt stack 0
 16393                           pclatu	equ	0xFFB
 16394                           pclath	equ	0xFFA
 16395                           tblptru	equ	0xFF8
 16396                           tblptrh	equ	0xFF7
 16397                           tblptrl	equ	0xFF6
 16398                           tablat	equ	0xFF5
 16399                           prodh	equ	0xFF4
 16400                           prodl	equ	0xFF3
 16401                           intcon	equ	0xFF2
 16402                           intcon3	equ	0xFF0
 16403                           postinc0	equ	0xFEE
 16404                           fsr0h	equ	0xFEA
 16405                           fsr0l	equ	0xFE9
 16406                           wreg	equ	0xFE8
 16407                           postdec1	equ	0xFE5
 16408                           fsr1h	equ	0xFE2
 16409                           fsr1l	equ	0xFE1
 16410                           indf2	equ	0xFDF
 16411                           postinc2	equ	0xFDE
 16412                           postdec2	equ	0xFDD
 16413                           fsr2h	equ	0xFDA
 16414                           fsr2l	equ	0xFD9
 16415                           status	equ	0xFD8
 16416                           
 16417 ;; *************** function i2___llmod *****************
 16418 ;; Defined at:
 16419 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
 16420 ;; Parameters:    Size  Location     Type
 16421 ;;  dividend        4   13[COMRAM] unsigned long 
 16422 ;;  divisor         4   17[COMRAM] unsigned long 
 16423 ;; Auto vars:     Size  Location     Type
 16424 ;;  __llmod         1   21[COMRAM] unsigned char 
 16425 ;; Return value:  Size  Location     Type
 16426 ;;                  4   13[COMRAM] unsigned long 
 16427 ;; Registers used:
 16428 ;;		wreg, status,2, status,0
 16429 ;; Tracked objects:
 16430 ;;		On entry : 0/0
 16431 ;;		On exit  : 0/0
 16432 ;;		Unchanged: 0/0
 16433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16434 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16435 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16437 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16438 ;;Total ram usage:        9 bytes
 16439 ;; Hardware stack levels used:    1
 16440 ;; This function calls:
 16441 ;;		Nothing
 16442 ;; This function is called by:
 16443 ;;		i2_printf
 16444 ;; This function uses a non-reentrant model
 16445 ;;
 16446                           
 16447                           	psect	text57
 16448  004BF6                     __ptext57:
 16449                           	opt stack 0
 16450  004BF6                     i2___llmod:
 16451                           	opt stack 21
 16452                           
 16453                           ;incstack = 0
 16454  004BF6  5012               	movf	i2___llmod@divisor,w,c
 16455  004BF8  1013               	iorwf	i2___llmod@divisor+1,w,c
 16456  004BFA  1014               	iorwf	i2___llmod@divisor+2,w,c
 16457  004BFC  1015               	iorwf	i2___llmod@divisor+3,w,c
 16458  004BFE  B4D8               	btfsc	status,2,c
 16459  004C00  D024               	goto	i2l1180
 16460  004C02  0E01               	movlw	1
 16461  004C04  6E16               	movwf	i2___llmod@counter,c
 16462  004C06  D006               	goto	i2l6120
 16463  004C08                     i2l6118:
 16464  004C08  90D8               	bcf	status,0,c
 16465  004C0A  3612               	rlcf	i2___llmod@divisor,f,c
 16466  004C0C  3613               	rlcf	i2___llmod@divisor+1,f,c
 16467  004C0E  3614               	rlcf	i2___llmod@divisor+2,f,c
 16468  004C10  3615               	rlcf	i2___llmod@divisor+3,f,c
 16469  004C12  2A16               	incf	i2___llmod@counter,f,c
 16470  004C14                     i2l6120:
 16471  004C14  AE15               	btfss	i2___llmod@divisor+3,7,c
 16472  004C16  D7F8               	goto	i2l6118
 16473  004C18                     i2l6122:
 16474  004C18  5012               	movf	i2___llmod@divisor,w,c
 16475  004C1A  5C0E               	subwf	i2___llmod@dividend,w,c
 16476  004C1C  5013               	movf	i2___llmod@divisor+1,w,c
 16477  004C1E  580F               	subwfb	i2___llmod@dividend+1,w,c
 16478  004C20  5014               	movf	i2___llmod@divisor+2,w,c
 16479  004C22  5810               	subwfb	i2___llmod@dividend+2,w,c
 16480  004C24  5015               	movf	i2___llmod@divisor+3,w,c
 16481  004C26  5811               	subwfb	i2___llmod@dividend+3,w,c
 16482  004C28  A0D8               	btfss	status,0,c
 16483  004C2A  D008               	goto	i2l6126
 16484  004C2C  5012               	movf	i2___llmod@divisor,w,c
 16485  004C2E  5E0E               	subwf	i2___llmod@dividend,f,c
 16486  004C30  5013               	movf	i2___llmod@divisor+1,w,c
 16487  004C32  5A0F               	subwfb	i2___llmod@dividend+1,f,c
 16488  004C34  5014               	movf	i2___llmod@divisor+2,w,c
 16489  004C36  5A10               	subwfb	i2___llmod@dividend+2,f,c
 16490  004C38  5015               	movf	i2___llmod@divisor+3,w,c
 16491  004C3A  5A11               	subwfb	i2___llmod@dividend+3,f,c
 16492  004C3C                     i2l6126:
 16493  004C3C  90D8               	bcf	status,0,c
 16494  004C3E  3215               	rrcf	i2___llmod@divisor+3,f,c
 16495  004C40  3214               	rrcf	i2___llmod@divisor+2,f,c
 16496  004C42  3213               	rrcf	i2___llmod@divisor+1,f,c
 16497  004C44  3212               	rrcf	i2___llmod@divisor,f,c
 16498  004C46  2E16               	decfsz	i2___llmod@counter,f,c
 16499  004C48  D7E7               	goto	i2l6122
 16500  004C4A                     i2l1180:
 16501  004C4A  C00E  F00E         	movff	i2___llmod@dividend,?i2___llmod
 16502  004C4E  C00F  F00F         	movff	i2___llmod@dividend+1,?i2___llmod+1
 16503  004C52  C010  F010         	movff	i2___llmod@dividend+2,?i2___llmod+2
 16504  004C56  C011  F011         	movff	i2___llmod@dividend+3,?i2___llmod+3
 16505  004C5A  0012               	return		;funcret
 16506  004C5C                     __end_ofi2___llmod:
 16507                           	opt stack 0
 16508                           pclatu	equ	0xFFB
 16509                           pclath	equ	0xFFA
 16510                           tblptru	equ	0xFF8
 16511                           tblptrh	equ	0xFF7
 16512                           tblptrl	equ	0xFF6
 16513                           tablat	equ	0xFF5
 16514                           prodh	equ	0xFF4
 16515                           prodl	equ	0xFF3
 16516                           intcon	equ	0xFF2
 16517                           intcon3	equ	0xFF0
 16518                           postinc0	equ	0xFEE
 16519                           fsr0h	equ	0xFEA
 16520                           fsr0l	equ	0xFE9
 16521                           wreg	equ	0xFE8
 16522                           postdec1	equ	0xFE5
 16523                           fsr1h	equ	0xFE2
 16524                           fsr1l	equ	0xFE1
 16525                           indf2	equ	0xFDF
 16526                           postinc2	equ	0xFDE
 16527                           postdec2	equ	0xFDD
 16528                           fsr2h	equ	0xFDA
 16529                           fsr2l	equ	0xFD9
 16530                           status	equ	0xFD8
 16531                           
 16532 ;; *************** function i2___lldiv *****************
 16533 ;; Defined at:
 16534 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 16535 ;; Parameters:    Size  Location     Type
 16536 ;;  dividend        4    0[COMRAM] unsigned long 
 16537 ;;  divisor         4    4[COMRAM] unsigned long 
 16538 ;; Auto vars:     Size  Location     Type
 16539 ;;  __lldiv         4    8[COMRAM] unsigned long 
 16540 ;;  __lldiv         1   12[COMRAM] unsigned char 
 16541 ;; Return value:  Size  Location     Type
 16542 ;;                  4    0[COMRAM] unsigned long 
 16543 ;; Registers used:
 16544 ;;		wreg, status,2, status,0
 16545 ;; Tracked objects:
 16546 ;;		On entry : 0/0
 16547 ;;		On exit  : 0/0
 16548 ;;		Unchanged: 0/0
 16549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16550 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16551 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16553 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16554 ;;Total ram usage:       13 bytes
 16555 ;; Hardware stack levels used:    1
 16556 ;; This function calls:
 16557 ;;		Nothing
 16558 ;; This function is called by:
 16559 ;;		i2_printf
 16560 ;; This function uses a non-reentrant model
 16561 ;;
 16562                           
 16563                           	psect	text58
 16564  004A10                     __ptext58:
 16565                           	opt stack 0
 16566  004A10                     i2___lldiv:
 16567                           	opt stack 21
 16568                           
 16569                           ;incstack = 0
 16570  004A10  0E00               	movlw	0
 16571  004A12  6E09               	movwf	i2___lldiv@quotient,c
 16572  004A14  0E00               	movlw	0
 16573  004A16  6E0A               	movwf	i2___lldiv@quotient+1,c
 16574  004A18  0E00               	movlw	0
 16575  004A1A  6E0B               	movwf	i2___lldiv@quotient+2,c
 16576  004A1C  0E00               	movlw	0
 16577  004A1E  6E0C               	movwf	i2___lldiv@quotient+3,c
 16578  004A20  5005               	movf	i2___lldiv@divisor,w,c
 16579  004A22  1006               	iorwf	i2___lldiv@divisor+1,w,c
 16580  004A24  1007               	iorwf	i2___lldiv@divisor+2,w,c
 16581  004A26  1008               	iorwf	i2___lldiv@divisor+3,w,c
 16582  004A28  B4D8               	btfsc	status,2,c
 16583  004A2A  D02A               	goto	i2l1170
 16584  004A2C  0E01               	movlw	1
 16585  004A2E  6E0D               	movwf	i2___lldiv@counter,c
 16586  004A30  D006               	goto	i2l6100
 16587  004A32                     i2l6098:
 16588  004A32  90D8               	bcf	status,0,c
 16589  004A34  3605               	rlcf	i2___lldiv@divisor,f,c
 16590  004A36  3606               	rlcf	i2___lldiv@divisor+1,f,c
 16591  004A38  3607               	rlcf	i2___lldiv@divisor+2,f,c
 16592  004A3A  3608               	rlcf	i2___lldiv@divisor+3,f,c
 16593  004A3C  2A0D               	incf	i2___lldiv@counter,f,c
 16594  004A3E                     i2l6100:
 16595  004A3E  AE08               	btfss	i2___lldiv@divisor+3,7,c
 16596  004A40  D7F8               	goto	i2l6098
 16597  004A42                     i2l6102:
 16598  004A42  90D8               	bcf	status,0,c
 16599  004A44  3609               	rlcf	i2___lldiv@quotient,f,c
 16600  004A46  360A               	rlcf	i2___lldiv@quotient+1,f,c
 16601  004A48  360B               	rlcf	i2___lldiv@quotient+2,f,c
 16602  004A4A  360C               	rlcf	i2___lldiv@quotient+3,f,c
 16603  004A4C  5005               	movf	i2___lldiv@divisor,w,c
 16604  004A4E  5C01               	subwf	i2___lldiv@dividend,w,c
 16605  004A50  5006               	movf	i2___lldiv@divisor+1,w,c
 16606  004A52  5802               	subwfb	i2___lldiv@dividend+1,w,c
 16607  004A54  5007               	movf	i2___lldiv@divisor+2,w,c
 16608  004A56  5803               	subwfb	i2___lldiv@dividend+2,w,c
 16609  004A58  5008               	movf	i2___lldiv@divisor+3,w,c
 16610  004A5A  5804               	subwfb	i2___lldiv@dividend+3,w,c
 16611  004A5C  A0D8               	btfss	status,0,c
 16612  004A5E  D009               	goto	i2l6110
 16613  004A60  5005               	movf	i2___lldiv@divisor,w,c
 16614  004A62  5E01               	subwf	i2___lldiv@dividend,f,c
 16615  004A64  5006               	movf	i2___lldiv@divisor+1,w,c
 16616  004A66  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 16617  004A68  5007               	movf	i2___lldiv@divisor+2,w,c
 16618  004A6A  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 16619  004A6C  5008               	movf	i2___lldiv@divisor+3,w,c
 16620  004A6E  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 16621  004A70  8009               	bsf	i2___lldiv@quotient,0,c
 16622  004A72                     i2l6110:
 16623  004A72  90D8               	bcf	status,0,c
 16624  004A74  3208               	rrcf	i2___lldiv@divisor+3,f,c
 16625  004A76  3207               	rrcf	i2___lldiv@divisor+2,f,c
 16626  004A78  3206               	rrcf	i2___lldiv@divisor+1,f,c
 16627  004A7A  3205               	rrcf	i2___lldiv@divisor,f,c
 16628  004A7C  2E0D               	decfsz	i2___lldiv@counter,f,c
 16629  004A7E  D7E1               	goto	i2l6102
 16630  004A80                     i2l1170:
 16631  004A80  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 16632  004A84  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 16633  004A88  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 16634  004A8C  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 16635  004A90  0012               	return		;funcret
 16636  004A92                     __end_ofi2___lldiv:
 16637                           	opt stack 0
 16638                           pclatu	equ	0xFFB
 16639                           pclath	equ	0xFFA
 16640                           tblptru	equ	0xFF8
 16641                           tblptrh	equ	0xFF7
 16642                           tblptrl	equ	0xFF6
 16643                           tablat	equ	0xFF5
 16644                           prodh	equ	0xFF4
 16645                           prodl	equ	0xFF3
 16646                           intcon	equ	0xFF2
 16647                           intcon3	equ	0xFF0
 16648                           postinc0	equ	0xFEE
 16649                           fsr0h	equ	0xFEA
 16650                           fsr0l	equ	0xFE9
 16651                           wreg	equ	0xFE8
 16652                           postdec1	equ	0xFE5
 16653                           fsr1h	equ	0xFE2
 16654                           fsr1l	equ	0xFE1
 16655                           indf2	equ	0xFDF
 16656                           postinc2	equ	0xFDE
 16657                           postdec2	equ	0xFDD
 16658                           fsr2h	equ	0xFDA
 16659                           fsr2l	equ	0xFD9
 16660                           status	equ	0xFD8
 16661                           
 16662 ;; *************** function i2___fttol *****************
 16663 ;; Defined at:
 16664 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 16665 ;; Parameters:    Size  Location     Type
 16666 ;;  f1              3   42[COMRAM] float 
 16667 ;; Auto vars:     Size  Location     Type
 16668 ;;  __fttol         4   52[COMRAM] unsigned long 
 16669 ;;  __fttol         1   56[COMRAM] unsigned char 
 16670 ;;  __fttol         1   51[COMRAM] unsigned char 
 16671 ;; Return value:  Size  Location     Type
 16672 ;;                  4   42[COMRAM] long 
 16673 ;; Registers used:
 16674 ;;		wreg, status,2, status,0
 16675 ;; Tracked objects:
 16676 ;;		On entry : 0/0
 16677 ;;		On exit  : 0/0
 16678 ;;		Unchanged: 0/0
 16679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16680 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16681 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16682 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16683 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16684 ;;Total ram usage:       15 bytes
 16685 ;; Hardware stack levels used:    1
 16686 ;; This function calls:
 16687 ;;		Nothing
 16688 ;; This function is called by:
 16689 ;;		i2_printf
 16690 ;; This function uses a non-reentrant model
 16691 ;;
 16692                           
 16693                           	psect	text59
 16694  003F56                     __ptext59:
 16695                           	opt stack 0
 16696  003F56                     i2___fttol:
 16697                           	opt stack 21
 16698                           
 16699                           ;incstack = 0
 16700  003F56  C02D  F02F         	movff	i2___fttol@f1+2,??i2___fttol
 16701  003F5A  6A30               	clrf	(??i2___fttol+1)& (0+255),c
 16702  003F5C  6A31               	clrf	(??i2___fttol+2)& (0+255),c
 16703  003F5E  342C               	rlcf	i2___fttol@f1+1,w,c
 16704  003F60  362F               	rlcf	??i2___fttol& (0+255),f,c
 16705  003F62  E301               	bnc	u656_41
 16706  003F64  8030               	bsf	(??i2___fttol+1)& (0+255),0,c
 16707  003F66                     u656_41:
 16708  003F66  502F               	movf	??i2___fttol,w,c
 16709  003F68  6E39               	movwf	i2___fttol@exp1,c
 16710  003F6A  5039               	movf	i2___fttol@exp1,w,c
 16711  003F6C  A4D8               	btfss	status,2,c
 16712  003F6E  D009               	goto	i2l6040
 16713  003F70  0E00               	movlw	0
 16714  003F72  6E2B               	movwf	?i2___fttol,c
 16715  003F74  0E00               	movlw	0
 16716  003F76  6E2C               	movwf	?i2___fttol+1,c
 16717  003F78  0E00               	movlw	0
 16718  003F7A  6E2D               	movwf	?i2___fttol+2,c
 16719  003F7C  0E00               	movlw	0
 16720  003F7E  6E2E               	movwf	?i2___fttol+3,c
 16721  003F80  0012               	return	
 16722  003F82                     i2l6040:
 16723  003F82  0E17               	movlw	23
 16724  003F84  6E2F               	movwf	??i2___fttol& (0+255),c
 16725  003F86  C02B  F030         	movff	i2___fttol@f1,??i2___fttol+1
 16726  003F8A  C02C  F031         	movff	i2___fttol@f1+1,??i2___fttol+2
 16727  003F8E  C02D  F032         	movff	i2___fttol@f1+2,??i2___fttol+3
 16728  003F92  282F               	incf	??i2___fttol,w,c
 16729  003F94  6E33               	movwf	(??i2___fttol+4)& (0+255),c
 16730  003F96  D004               	goto	i2u658_40
 16731  003F98                     i2u658_45:
 16732  003F98  90D8               	bcf	status,0,c
 16733  003F9A  3232               	rrcf	??i2___fttol+3,f,c
 16734  003F9C  3231               	rrcf	??i2___fttol+2,f,c
 16735  003F9E  3230               	rrcf	??i2___fttol+1,f,c
 16736  003FA0                     i2u658_40:
 16737  003FA0  2E33               	decfsz	(??i2___fttol+4)& (0+255),f,c
 16738  003FA2  D7FA               	goto	i2u658_45
 16739  003FA4  5030               	movf	??i2___fttol+1,w,c
 16740  003FA6  6E34               	movwf	i2___fttol@sign1,c
 16741  003FA8  8E2C               	bsf	i2___fttol@f1+1,7,c
 16742  003FAA  0EFF               	movlw	255
 16743  003FAC  162B               	andwf	i2___fttol@f1,f,c
 16744  003FAE  0EFF               	movlw	255
 16745  003FB0  162C               	andwf	i2___fttol@f1+1,f,c
 16746  003FB2  0E00               	movlw	0
 16747  003FB4  162D               	andwf	i2___fttol@f1+2,f,c
 16748  003FB6  502B               	movf	i2___fttol@f1,w,c
 16749  003FB8  6E35               	movwf	i2___fttol@lval,c
 16750  003FBA  502C               	movf	i2___fttol@f1+1,w,c
 16751  003FBC  6E36               	movwf	i2___fttol@lval+1,c
 16752  003FBE  502D               	movf	i2___fttol@f1+2,w,c
 16753  003FC0  6E37               	movwf	i2___fttol@lval+2,c
 16754  003FC2  6A38               	clrf	i2___fttol@lval+3,c
 16755  003FC4  0E8E               	movlw	142
 16756  003FC6  5E39               	subwf	i2___fttol@exp1,f,c
 16757  003FC8  AE39               	btfss	i2___fttol@exp1,7,c
 16758  003FCA  D016               	goto	i2l6062
 16759  003FCC  5039               	movf	i2___fttol@exp1,w,c
 16760  003FCE  0A80               	xorlw	128
 16761  003FD0  0F8F               	addlw	143
 16762  003FD2  B0D8               	btfsc	status,0,c
 16763  003FD4  D009               	goto	i2l6058
 16764  003FD6  0E00               	movlw	0
 16765  003FD8  6E2B               	movwf	?i2___fttol,c
 16766  003FDA  0E00               	movlw	0
 16767  003FDC  6E2C               	movwf	?i2___fttol+1,c
 16768  003FDE  0E00               	movlw	0
 16769  003FE0  6E2D               	movwf	?i2___fttol+2,c
 16770  003FE2  0E00               	movlw	0
 16771  003FE4  6E2E               	movwf	?i2___fttol+3,c
 16772  003FE6  0012               	return	
 16773  003FE8                     i2l6058:
 16774  003FE8  90D8               	bcf	status,0,c
 16775  003FEA  3238               	rrcf	i2___fttol@lval+3,f,c
 16776  003FEC  3237               	rrcf	i2___fttol@lval+2,f,c
 16777  003FEE  3236               	rrcf	i2___fttol@lval+1,f,c
 16778  003FF0  3235               	rrcf	i2___fttol@lval,f,c
 16779  003FF2  3E39               	incfsz	i2___fttol@exp1,f,c
 16780  003FF4  D7F9               	goto	i2l6058
 16781  003FF6  D015               	goto	i2l6072
 16782  003FF8                     i2l6062:
 16783  003FF8  0E17               	movlw	23
 16784  003FFA  6439               	cpfsgt	i2___fttol@exp1,c
 16785  003FFC  D00F               	goto	i2l6070
 16786  003FFE  0E00               	movlw	0
 16787  004000  6E2B               	movwf	?i2___fttol,c
 16788  004002  0E00               	movlw	0
 16789  004004  6E2C               	movwf	?i2___fttol+1,c
 16790  004006  0E00               	movlw	0
 16791  004008  6E2D               	movwf	?i2___fttol+2,c
 16792  00400A  0E00               	movlw	0
 16793  00400C  6E2E               	movwf	?i2___fttol+3,c
 16794  00400E  0012               	return	
 16795  004010                     i2l6068:
 16796  004010  90D8               	bcf	status,0,c
 16797  004012  3635               	rlcf	i2___fttol@lval,f,c
 16798  004014  3636               	rlcf	i2___fttol@lval+1,f,c
 16799  004016  3637               	rlcf	i2___fttol@lval+2,f,c
 16800  004018  3638               	rlcf	i2___fttol@lval+3,f,c
 16801  00401A  0639               	decf	i2___fttol@exp1,f,c
 16802  00401C                     i2l6070:
 16803  00401C  5039               	movf	i2___fttol@exp1,w,c
 16804  00401E  A4D8               	btfss	status,2,c
 16805  004020  D7F7               	goto	i2l6068
 16806  004022                     i2l6072:
 16807  004022  5034               	movf	i2___fttol@sign1,w,c
 16808  004024  B4D8               	btfsc	status,2,c
 16809  004026  D008               	goto	i2l6076
 16810  004028  1E38               	comf	i2___fttol@lval+3,f,c
 16811  00402A  1E37               	comf	i2___fttol@lval+2,f,c
 16812  00402C  1E36               	comf	i2___fttol@lval+1,f,c
 16813  00402E  6C35               	negf	i2___fttol@lval,c
 16814  004030  0E00               	movlw	0
 16815  004032  2236               	addwfc	i2___fttol@lval+1,f,c
 16816  004034  2237               	addwfc	i2___fttol@lval+2,f,c
 16817  004036  2238               	addwfc	i2___fttol@lval+3,f,c
 16818  004038                     i2l6076:
 16819  004038  C035  F02B         	movff	i2___fttol@lval,?i2___fttol
 16820  00403C  C036  F02C         	movff	i2___fttol@lval+1,?i2___fttol+1
 16821  004040  C037  F02D         	movff	i2___fttol@lval+2,?i2___fttol+2
 16822  004044  C038  F02E         	movff	i2___fttol@lval+3,?i2___fttol+3
 16823  004048  0012               	return	
 16824  00404A                     __end_ofi2___fttol:
 16825                           	opt stack 0
 16826                           pclatu	equ	0xFFB
 16827                           pclath	equ	0xFFA
 16828                           tblptru	equ	0xFF8
 16829                           tblptrh	equ	0xFF7
 16830                           tblptrl	equ	0xFF6
 16831                           tablat	equ	0xFF5
 16832                           prodh	equ	0xFF4
 16833                           prodl	equ	0xFF3
 16834                           intcon	equ	0xFF2
 16835                           intcon3	equ	0xFF0
 16836                           postinc0	equ	0xFEE
 16837                           fsr0h	equ	0xFEA
 16838                           fsr0l	equ	0xFE9
 16839                           wreg	equ	0xFE8
 16840                           postdec1	equ	0xFE5
 16841                           fsr1h	equ	0xFE2
 16842                           fsr1l	equ	0xFE1
 16843                           indf2	equ	0xFDF
 16844                           postinc2	equ	0xFDE
 16845                           postdec2	equ	0xFDD
 16846                           fsr2h	equ	0xFDA
 16847                           fsr2l	equ	0xFD9
 16848                           status	equ	0xFD8
 16849                           
 16850 ;; *************** function i2___ftsub *****************
 16851 ;; Defined at:
 16852 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 16853 ;; Parameters:    Size  Location     Type
 16854 ;;  f1              3   57[COMRAM] float 
 16855 ;;  f2              3   60[COMRAM] float 
 16856 ;; Auto vars:     Size  Location     Type
 16857 ;;		None
 16858 ;; Return value:  Size  Location     Type
 16859 ;;                  3   57[COMRAM] float 
 16860 ;; Registers used:
 16861 ;;		wreg, status,2, status,0, cstack
 16862 ;; Tracked objects:
 16863 ;;		On entry : 0/0
 16864 ;;		On exit  : 0/0
 16865 ;;		Unchanged: 0/0
 16866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16867 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16870 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16871 ;;Total ram usage:        6 bytes
 16872 ;; Hardware stack levels used:    1
 16873 ;; Hardware stack levels required when called:    2
 16874 ;; This function calls:
 16875 ;;		i2___ftadd
 16876 ;; This function is called by:
 16877 ;;		i2_printf
 16878 ;; This function uses a non-reentrant model
 16879 ;;
 16880                           
 16881                           	psect	text60
 16882  004FAA                     __ptext60:
 16883                           	opt stack 0
 16884  004FAA                     i2___ftsub:
 16885                           	opt stack 19
 16886                           
 16887                           ;incstack = 0
 16888  004FAA  503D               	movf	i2___ftsub@f2,w,c
 16889  004FAC  103E               	iorwf	i2___ftsub@f2+1,w,c
 16890  004FAE  103F               	iorwf	i2___ftsub@f2+2,w,c
 16891  004FB0  B4D8               	btfsc	status,2,c
 16892  004FB2  D006               	goto	i2l6030
 16893  004FB4  0E00               	movlw	0
 16894  004FB6  1A3D               	xorwf	i2___ftsub@f2,f,c
 16895  004FB8  0E00               	movlw	0
 16896  004FBA  1A3E               	xorwf	i2___ftsub@f2+1,f,c
 16897  004FBC  0E80               	movlw	128
 16898  004FBE  1A3F               	xorwf	i2___ftsub@f2+2,f,c
 16899  004FC0                     i2l6030:
 16900  004FC0  C03A  F02E         	movff	i2___ftsub@f1,i2___ftadd@f1
 16901  004FC4  C03B  F02F         	movff	i2___ftsub@f1+1,i2___ftadd@f1+1
 16902  004FC8  C03C  F030         	movff	i2___ftsub@f1+2,i2___ftadd@f1+2
 16903  004FCC  C03D  F031         	movff	i2___ftsub@f2,i2___ftadd@f2
 16904  004FD0  C03E  F032         	movff	i2___ftsub@f2+1,i2___ftadd@f2+1
 16905  004FD4  C03F  F033         	movff	i2___ftsub@f2+2,i2___ftadd@f2+2
 16906  004FD8  EC73  F015         	call	i2___ftadd	;wreg free
 16907  004FDC  C02E  F03A         	movff	?i2___ftadd,?i2___ftsub
 16908  004FE0  C02F  F03B         	movff	?i2___ftadd+1,?i2___ftsub+1
 16909  004FE4  C030  F03C         	movff	?i2___ftadd+2,?i2___ftsub+2
 16910  004FE8  0012               	return	
 16911  004FEA                     __end_ofi2___ftsub:
 16912                           	opt stack 0
 16913                           pclatu	equ	0xFFB
 16914                           pclath	equ	0xFFA
 16915                           tblptru	equ	0xFF8
 16916                           tblptrh	equ	0xFF7
 16917                           tblptrl	equ	0xFF6
 16918                           tablat	equ	0xFF5
 16919                           prodh	equ	0xFF4
 16920                           prodl	equ	0xFF3
 16921                           intcon	equ	0xFF2
 16922                           intcon3	equ	0xFF0
 16923                           postinc0	equ	0xFEE
 16924                           fsr0h	equ	0xFEA
 16925                           fsr0l	equ	0xFE9
 16926                           wreg	equ	0xFE8
 16927                           postdec1	equ	0xFE5
 16928                           fsr1h	equ	0xFE2
 16929                           fsr1l	equ	0xFE1
 16930                           indf2	equ	0xFDF
 16931                           postinc2	equ	0xFDE
 16932                           postdec2	equ	0xFDD
 16933                           fsr2h	equ	0xFDA
 16934                           fsr2l	equ	0xFD9
 16935                           status	equ	0xFD8
 16936                           
 16937 ;; *************** function i2___ftadd *****************
 16938 ;; Defined at:
 16939 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 16940 ;; Parameters:    Size  Location     Type
 16941 ;;  f1              3   45[COMRAM] float 
 16942 ;;  f2              3   48[COMRAM] float 
 16943 ;; Auto vars:     Size  Location     Type
 16944 ;;  __ftadd         1   56[COMRAM] unsigned char 
 16945 ;;  __ftadd         1   55[COMRAM] unsigned char 
 16946 ;;  __ftadd         1   54[COMRAM] unsigned char 
 16947 ;; Return value:  Size  Location     Type
 16948 ;;                  3   45[COMRAM] float 
 16949 ;; Registers used:
 16950 ;;		wreg, status,2, status,0, cstack
 16951 ;; Tracked objects:
 16952 ;;		On entry : 0/0
 16953 ;;		On exit  : 0/0
 16954 ;;		Unchanged: 0/0
 16955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16956 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16957 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16958 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16959 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16960 ;;Total ram usage:       12 bytes
 16961 ;; Hardware stack levels used:    1
 16962 ;; Hardware stack levels required when called:    1
 16963 ;; This function calls:
 16964 ;;		i2___ftpack
 16965 ;; This function is called by:
 16966 ;;		i2_printf
 16967 ;;		i2___ftsub
 16968 ;; This function uses a non-reentrant model
 16969 ;;
 16970                           
 16971                           	psect	text61
 16972  002AE6                     __ptext61:
 16973                           	opt stack 0
 16974  002AE6                     i2___ftadd:
 16975                           	opt stack 19
 16976                           
 16977                           ;incstack = 0
 16978  002AE6  C030  F034         	movff	i2___ftadd@f1+2,??i2___ftadd
 16979  002AEA  6A35               	clrf	(??i2___ftadd+1)& (0+255),c
 16980  002AEC  6A36               	clrf	(??i2___ftadd+2)& (0+255),c
 16981  002AEE  342F               	rlcf	i2___ftadd@f1+1,w,c
 16982  002AF0  3634               	rlcf	??i2___ftadd& (0+255),f,c
 16983  002AF2  E301               	bnc	u579_41
 16984  002AF4  8035               	bsf	(??i2___ftadd+1)& (0+255),0,c
 16985  002AF6                     u579_41:
 16986  002AF6  5034               	movf	??i2___ftadd,w,c
 16987  002AF8  6E39               	movwf	i2___ftadd@exp1,c
 16988  002AFA  C033  F034         	movff	i2___ftadd@f2+2,??i2___ftadd
 16989  002AFE  6A35               	clrf	(??i2___ftadd+1)& (0+255),c
 16990  002B00  6A36               	clrf	(??i2___ftadd+2)& (0+255),c
 16991  002B02  3432               	rlcf	i2___ftadd@f2+1,w,c
 16992  002B04  3634               	rlcf	??i2___ftadd& (0+255),f,c
 16993  002B06  E301               	bnc	u580_41
 16994  002B08  8035               	bsf	(??i2___ftadd+1)& (0+255),0,c
 16995  002B0A                     u580_41:
 16996  002B0A  5034               	movf	??i2___ftadd,w,c
 16997  002B0C  6E38               	movwf	i2___ftadd@exp2,c
 16998  002B0E  5039               	movf	i2___ftadd@exp1,w,c
 16999  002B10  B4D8               	btfsc	status,2,c
 17000  002B12  D00B               	goto	i2l1046
 17001  002B14  5038               	movf	i2___ftadd@exp2,w,c
 17002  002B16  5C39               	subwf	i2___ftadd@exp1,w,c
 17003  002B18  B0D8               	btfsc	status,0,c
 17004  002B1A  D00E               	goto	i2l5522
 17005  002B1C  5039               	movf	i2___ftadd@exp1,w,c
 17006  002B1E  0800               	sublw	0
 17007  002B20  2438               	addwf	i2___ftadd@exp2,w,c
 17008  002B22  6E34               	movwf	??i2___ftadd& (0+255),c
 17009  002B24  0E18               	movlw	24
 17010  002B26  6434               	cpfsgt	??i2___ftadd,c
 17011  002B28  D007               	goto	i2l5522
 17012  002B2A                     i2l1046:
 17013  002B2A  C031  F02E         	movff	i2___ftadd@f2,?i2___ftadd
 17014  002B2E  C032  F02F         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 17015  002B32  C033  F030         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 17016  002B36  0012               	return	
 17017  002B38                     i2l5522:
 17018  002B38  5038               	movf	i2___ftadd@exp2,w,c
 17019  002B3A  B4D8               	btfsc	status,2,c
 17020  002B3C  D00B               	goto	i2l1050
 17021  002B3E  5039               	movf	i2___ftadd@exp1,w,c
 17022  002B40  5C38               	subwf	i2___ftadd@exp2,w,c
 17023  002B42  B0D8               	btfsc	status,0,c
 17024  002B44  D00E               	goto	i2l5528
 17025  002B46  5038               	movf	i2___ftadd@exp2,w,c
 17026  002B48  0800               	sublw	0
 17027  002B4A  2439               	addwf	i2___ftadd@exp1,w,c
 17028  002B4C  6E34               	movwf	??i2___ftadd& (0+255),c
 17029  002B4E  0E18               	movlw	24
 17030  002B50  6434               	cpfsgt	??i2___ftadd,c
 17031  002B52  D007               	goto	i2l5528
 17032  002B54                     i2l1050:
 17033  002B54  C02E  F02E         	movff	i2___ftadd@f1,?i2___ftadd
 17034  002B58  C02F  F02F         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 17035  002B5C  C030  F030         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 17036  002B60  0012               	return	
 17037  002B62                     i2l5528:
 17038  002B62  0E06               	movlw	6
 17039  002B64  6E37               	movwf	i2___ftadd@sign,c
 17040  002B66  BE30               	btfsc	i2___ftadd@f1+2,7,c
 17041  002B68  8E37               	bsf	i2___ftadd@sign,7,c
 17042  002B6A  BE33               	btfsc	i2___ftadd@f2+2,7,c
 17043  002B6C  8C37               	bsf	i2___ftadd@sign,6,c
 17044  002B6E  8E2F               	bsf	i2___ftadd@f1+1,7,c
 17045  002B70  0EFF               	movlw	255
 17046  002B72  162E               	andwf	i2___ftadd@f1,f,c
 17047  002B74  0EFF               	movlw	255
 17048  002B76  162F               	andwf	i2___ftadd@f1+1,f,c
 17049  002B78  0E00               	movlw	0
 17050  002B7A  1630               	andwf	i2___ftadd@f1+2,f,c
 17051  002B7C  8E32               	bsf	i2___ftadd@f2+1,7,c
 17052  002B7E  0EFF               	movlw	255
 17053  002B80  1631               	andwf	i2___ftadd@f2,f,c
 17054  002B82  0EFF               	movlw	255
 17055  002B84  1632               	andwf	i2___ftadd@f2+1,f,c
 17056  002B86  0E00               	movlw	0
 17057  002B88  1633               	andwf	i2___ftadd@f2+2,f,c
 17058  002B8A  5038               	movf	i2___ftadd@exp2,w,c
 17059  002B8C  5C39               	subwf	i2___ftadd@exp1,w,c
 17060  002B8E  B0D8               	btfsc	status,0,c
 17061  002B90  D01B               	goto	i2l5554
 17062  002B92                     i2l5544:
 17063  002B92  90D8               	bcf	status,0,c
 17064  002B94  3631               	rlcf	i2___ftadd@f2,f,c
 17065  002B96  3632               	rlcf	i2___ftadd@f2+1,f,c
 17066  002B98  3633               	rlcf	i2___ftadd@f2+2,f,c
 17067  002B9A  0638               	decf	i2___ftadd@exp2,f,c
 17068  002B9C  5039               	movf	i2___ftadd@exp1,w,c
 17069  002B9E  1838               	xorwf	i2___ftadd@exp2,w,c
 17070  002BA0  B4D8               	btfsc	status,2,c
 17071  002BA2  D00D               	goto	i2l5552
 17072  002BA4  0637               	decf	i2___ftadd@sign,f,c
 17073  002BA6  C037  F034         	movff	i2___ftadd@sign,??i2___ftadd
 17074  002BAA  0E07               	movlw	7
 17075  002BAC  1634               	andwf	??i2___ftadd,f,c
 17076  002BAE  B4D8               	btfsc	status,2,c
 17077  002BB0  D006               	goto	i2l5552
 17078  002BB2  D7EF               	goto	i2l5544
 17079  002BB4                     i2l5550:
 17080  002BB4  90D8               	bcf	status,0,c
 17081  002BB6  3230               	rrcf	i2___ftadd@f1+2,f,c
 17082  002BB8  322F               	rrcf	i2___ftadd@f1+1,f,c
 17083  002BBA  322E               	rrcf	i2___ftadd@f1,f,c
 17084  002BBC  2A39               	incf	i2___ftadd@exp1,f,c
 17085  002BBE                     i2l5552:
 17086  002BBE  5038               	movf	i2___ftadd@exp2,w,c
 17087  002BC0  1839               	xorwf	i2___ftadd@exp1,w,c
 17088  002BC2  B4D8               	btfsc	status,2,c
 17089  002BC4  D01F               	goto	i2l1061
 17090  002BC6  D7F6               	goto	i2l5550
 17091  002BC8                     i2l5554:
 17092  002BC8  5039               	movf	i2___ftadd@exp1,w,c
 17093  002BCA  5C38               	subwf	i2___ftadd@exp2,w,c
 17094  002BCC  B0D8               	btfsc	status,0,c
 17095  002BCE  D01A               	goto	i2l1061
 17096  002BD0                     i2l5556:
 17097  002BD0  90D8               	bcf	status,0,c
 17098  002BD2  362E               	rlcf	i2___ftadd@f1,f,c
 17099  002BD4  362F               	rlcf	i2___ftadd@f1+1,f,c
 17100  002BD6  3630               	rlcf	i2___ftadd@f1+2,f,c
 17101  002BD8  0639               	decf	i2___ftadd@exp1,f,c
 17102  002BDA  5039               	movf	i2___ftadd@exp1,w,c
 17103  002BDC  1838               	xorwf	i2___ftadd@exp2,w,c
 17104  002BDE  B4D8               	btfsc	status,2,c
 17105  002BE0  D00D               	goto	i2l5564
 17106  002BE2  0637               	decf	i2___ftadd@sign,f,c
 17107  002BE4  C037  F034         	movff	i2___ftadd@sign,??i2___ftadd
 17108  002BE8  0E07               	movlw	7
 17109  002BEA  1634               	andwf	??i2___ftadd,f,c
 17110  002BEC  B4D8               	btfsc	status,2,c
 17111  002BEE  D006               	goto	i2l5564
 17112  002BF0  D7EF               	goto	i2l5556
 17113  002BF2                     i2l5562:
 17114  002BF2  90D8               	bcf	status,0,c
 17115  002BF4  3233               	rrcf	i2___ftadd@f2+2,f,c
 17116  002BF6  3232               	rrcf	i2___ftadd@f2+1,f,c
 17117  002BF8  3231               	rrcf	i2___ftadd@f2,f,c
 17118  002BFA  2A38               	incf	i2___ftadd@exp2,f,c
 17119  002BFC                     i2l5564:
 17120  002BFC  5038               	movf	i2___ftadd@exp2,w,c
 17121  002BFE  1839               	xorwf	i2___ftadd@exp1,w,c
 17122  002C00  A4D8               	btfss	status,2,c
 17123  002C02  D7F7               	goto	i2l5562
 17124  002C04                     i2l1061:
 17125  002C04  AE37               	btfss	i2___ftadd@sign,7,c
 17126  002C06  D00C               	goto	i2l1070
 17127  002C08  0EFF               	movlw	255
 17128  002C0A  1A2E               	xorwf	i2___ftadd@f1,f,c
 17129  002C0C  0EFF               	movlw	255
 17130  002C0E  1A2F               	xorwf	i2___ftadd@f1+1,f,c
 17131  002C10  0EFF               	movlw	255
 17132  002C12  1A30               	xorwf	i2___ftadd@f1+2,f,c
 17133  002C14  0E01               	movlw	1
 17134  002C16  262E               	addwf	i2___ftadd@f1,f,c
 17135  002C18  0E00               	movlw	0
 17136  002C1A  222F               	addwfc	i2___ftadd@f1+1,f,c
 17137  002C1C  0E00               	movlw	0
 17138  002C1E  2230               	addwfc	i2___ftadd@f1+2,f,c
 17139  002C20                     i2l1070:
 17140  002C20  AC37               	btfss	i2___ftadd@sign,6,c
 17141  002C22  D00C               	goto	i2l5570
 17142  002C24  0EFF               	movlw	255
 17143  002C26  1A31               	xorwf	i2___ftadd@f2,f,c
 17144  002C28  0EFF               	movlw	255
 17145  002C2A  1A32               	xorwf	i2___ftadd@f2+1,f,c
 17146  002C2C  0EFF               	movlw	255
 17147  002C2E  1A33               	xorwf	i2___ftadd@f2+2,f,c
 17148  002C30  0E01               	movlw	1
 17149  002C32  2631               	addwf	i2___ftadd@f2,f,c
 17150  002C34  0E00               	movlw	0
 17151  002C36  2232               	addwfc	i2___ftadd@f2+1,f,c
 17152  002C38  0E00               	movlw	0
 17153  002C3A  2233               	addwfc	i2___ftadd@f2+2,f,c
 17154  002C3C                     i2l5570:
 17155  002C3C  0E00               	movlw	0
 17156  002C3E  6E37               	movwf	i2___ftadd@sign,c
 17157  002C40  502E               	movf	i2___ftadd@f1,w,c
 17158  002C42  2631               	addwf	i2___ftadd@f2,f,c
 17159  002C44  502F               	movf	i2___ftadd@f1+1,w,c
 17160  002C46  2232               	addwfc	i2___ftadd@f2+1,f,c
 17161  002C48  5030               	movf	i2___ftadd@f1+2,w,c
 17162  002C4A  2233               	addwfc	i2___ftadd@f2+2,f,c
 17163  002C4C  AE33               	btfss	i2___ftadd@f2+2,7,c
 17164  002C4E  D00E               	goto	i2l5580
 17165  002C50  0EFF               	movlw	255
 17166  002C52  1A31               	xorwf	i2___ftadd@f2,f,c
 17167  002C54  0EFF               	movlw	255
 17168  002C56  1A32               	xorwf	i2___ftadd@f2+1,f,c
 17169  002C58  0EFF               	movlw	255
 17170  002C5A  1A33               	xorwf	i2___ftadd@f2+2,f,c
 17171  002C5C  0E01               	movlw	1
 17172  002C5E  2631               	addwf	i2___ftadd@f2,f,c
 17173  002C60  0E00               	movlw	0
 17174  002C62  2232               	addwfc	i2___ftadd@f2+1,f,c
 17175  002C64  0E00               	movlw	0
 17176  002C66  2233               	addwfc	i2___ftadd@f2+2,f,c
 17177  002C68  0E01               	movlw	1
 17178  002C6A  6E37               	movwf	i2___ftadd@sign,c
 17179  002C6C                     i2l5580:
 17180  002C6C  C031  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 17181  002C70  C032  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 17182  002C74  C033  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 17183  002C78  C039  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 17184  002C7C  C037  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 17185  002C80  ECF4  F022         	call	i2___ftpack	;wreg free
 17186  002C84  C001  F02E         	movff	?i2___ftpack,?i2___ftadd
 17187  002C88  C002  F02F         	movff	?i2___ftpack+1,?i2___ftadd+1
 17188  002C8C  C003  F030         	movff	?i2___ftpack+2,?i2___ftadd+2
 17189  002C90  0012               	return	
 17190  002C92                     __end_ofi2___ftadd:
 17191                           	opt stack 0
 17192                           pclatu	equ	0xFFB
 17193                           pclath	equ	0xFFA
 17194                           tblptru	equ	0xFF8
 17195                           tblptrh	equ	0xFF7
 17196                           tblptrl	equ	0xFF6
 17197                           tablat	equ	0xFF5
 17198                           prodh	equ	0xFF4
 17199                           prodl	equ	0xFF3
 17200                           intcon	equ	0xFF2
 17201                           intcon3	equ	0xFF0
 17202                           postinc0	equ	0xFEE
 17203                           fsr0h	equ	0xFEA
 17204                           fsr0l	equ	0xFE9
 17205                           wreg	equ	0xFE8
 17206                           postdec1	equ	0xFE5
 17207                           fsr1h	equ	0xFE2
 17208                           fsr1l	equ	0xFE1
 17209                           indf2	equ	0xFDF
 17210                           postinc2	equ	0xFDE
 17211                           postdec2	equ	0xFDD
 17212                           fsr2h	equ	0xFDA
 17213                           fsr2l	equ	0xFD9
 17214                           status	equ	0xFD8
 17215                           
 17216 ;; *************** function i2___ftpack *****************
 17217 ;; Defined at:
 17218 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 17219 ;; Parameters:    Size  Location     Type
 17220 ;;  arg             3    0[COMRAM] unsigned um
 17221 ;;  exp             1    3[COMRAM] unsigned char 
 17222 ;;  sign            1    4[COMRAM] unsigned char 
 17223 ;; Auto vars:     Size  Location     Type
 17224 ;;		None
 17225 ;; Return value:  Size  Location     Type
 17226 ;;                  3    0[COMRAM] float 
 17227 ;; Registers used:
 17228 ;;		wreg, status,2, status,0
 17229 ;; Tracked objects:
 17230 ;;		On entry : 0/0
 17231 ;;		On exit  : 0/0
 17232 ;;		Unchanged: 0/0
 17233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17234 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17236 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17237 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17238 ;;Total ram usage:        8 bytes
 17239 ;; Hardware stack levels used:    1
 17240 ;; This function calls:
 17241 ;;		Nothing
 17242 ;; This function is called by:
 17243 ;;		i2___ftadd
 17244 ;;		i2___ftmul
 17245 ;;		i2___lltoft
 17246 ;; This function uses a non-reentrant model
 17247 ;;
 17248                           
 17249                           	psect	text62
 17250  0045E8                     __ptext62:
 17251                           	opt stack 0
 17252  0045E8                     i2___ftpack:
 17253                           	opt stack 19
 17254                           
 17255                           ;incstack = 0
 17256  0045E8  5004               	movf	i2___ftpack@exp,w,c
 17257  0045EA  B4D8               	btfsc	status,2,c
 17258  0045EC  D005               	goto	i2l5050
 17259  0045EE  5001               	movf	i2___ftpack@arg,w,c
 17260  0045F0  1002               	iorwf	i2___ftpack@arg+1,w,c
 17261  0045F2  1003               	iorwf	i2___ftpack@arg+2,w,c
 17262  0045F4  A4D8               	btfss	status,2,c
 17263  0045F6  D00C               	goto	i2l5056
 17264  0045F8                     i2l5050:
 17265  0045F8  0E00               	movlw	0
 17266  0045FA  6E01               	movwf	?i2___ftpack,c
 17267  0045FC  0E00               	movlw	0
 17268  0045FE  6E02               	movwf	?i2___ftpack+1,c
 17269  004600  0E00               	movlw	0
 17270  004602  6E03               	movwf	?i2___ftpack+2,c
 17271  004604  0012               	return	
 17272  004606                     i2l5054:
 17273  004606  2A04               	incf	i2___ftpack@exp,f,c
 17274  004608  90D8               	bcf	status,0,c
 17275  00460A  3203               	rrcf	i2___ftpack@arg+2,f,c
 17276  00460C  3202               	rrcf	i2___ftpack@arg+1,f,c
 17277  00460E  3201               	rrcf	i2___ftpack@arg,f,c
 17278  004610                     i2l5056:
 17279  004610  0E00               	movlw	0
 17280  004612  1401               	andwf	i2___ftpack@arg,w,c
 17281  004614  6E06               	movwf	??i2___ftpack& (0+255),c
 17282  004616  0E00               	movlw	0
 17283  004618  1402               	andwf	i2___ftpack@arg+1,w,c
 17284  00461A  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 17285  00461C  0EFE               	movlw	254
 17286  00461E  1403               	andwf	i2___ftpack@arg+2,w,c
 17287  004620  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 17288  004622  5006               	movf	??i2___ftpack,w,c
 17289  004624  1007               	iorwf	??i2___ftpack+1,w,c
 17290  004626  1008               	iorwf	??i2___ftpack+2,w,c
 17291  004628  B4D8               	btfsc	status,2,c
 17292  00462A  D00C               	goto	i2l5062
 17293  00462C  D7EC               	goto	i2l5054
 17294  00462E                     i2l5058:
 17295  00462E  2A04               	incf	i2___ftpack@exp,f,c
 17296  004630  0E01               	movlw	1
 17297  004632  2601               	addwf	i2___ftpack@arg,f,c
 17298  004634  0E00               	movlw	0
 17299  004636  2202               	addwfc	i2___ftpack@arg+1,f,c
 17300  004638  0E00               	movlw	0
 17301  00463A  2203               	addwfc	i2___ftpack@arg+2,f,c
 17302  00463C  90D8               	bcf	status,0,c
 17303  00463E  3203               	rrcf	i2___ftpack@arg+2,f,c
 17304  004640  3202               	rrcf	i2___ftpack@arg+1,f,c
 17305  004642  3201               	rrcf	i2___ftpack@arg,f,c
 17306  004644                     i2l5062:
 17307  004644  0E00               	movlw	0
 17308  004646  1401               	andwf	i2___ftpack@arg,w,c
 17309  004648  6E06               	movwf	??i2___ftpack& (0+255),c
 17310  00464A  0E00               	movlw	0
 17311  00464C  1402               	andwf	i2___ftpack@arg+1,w,c
 17312  00464E  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 17313  004650  0EFF               	movlw	255
 17314  004652  1403               	andwf	i2___ftpack@arg+2,w,c
 17315  004654  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 17316  004656  5006               	movf	??i2___ftpack,w,c
 17317  004658  1007               	iorwf	??i2___ftpack+1,w,c
 17318  00465A  1008               	iorwf	??i2___ftpack+2,w,c
 17319  00465C  B4D8               	btfsc	status,2,c
 17320  00465E  D006               	goto	i2l5066
 17321  004660  D7E6               	goto	i2l5058
 17322  004662                     i2l5064:
 17323  004662  0604               	decf	i2___ftpack@exp,f,c
 17324  004664  90D8               	bcf	status,0,c
 17325  004666  3601               	rlcf	i2___ftpack@arg,f,c
 17326  004668  3602               	rlcf	i2___ftpack@arg+1,f,c
 17327  00466A  3603               	rlcf	i2___ftpack@arg+2,f,c
 17328  00466C                     i2l5066:
 17329  00466C  BE02               	btfsc	i2___ftpack@arg+1,7,c
 17330  00466E  D003               	goto	i2l1023
 17331  004670  0E02               	movlw	2
 17332  004672  6004               	cpfslt	i2___ftpack@exp,c
 17333  004674  D7F6               	goto	i2l5064
 17334  004676                     i2l1023:
 17335  004676  A004               	btfss	i2___ftpack@exp,0,c
 17336  004678  9E02               	bcf	i2___ftpack@arg+1,7,c
 17337  00467A  90D8               	bcf	status,0,c
 17338  00467C  3204               	rrcf	i2___ftpack@exp,f,c
 17339  00467E  5004               	movf	i2___ftpack@exp,w,c
 17340  004680  1203               	iorwf	i2___ftpack@arg+2,f,c
 17341  004682  5005               	movf	i2___ftpack@sign,w,c
 17342  004684  A4D8               	btfss	status,2,c
 17343  004686  8E03               	bsf	i2___ftpack@arg+2,7,c
 17344  004688  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 17345  00468C  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 17346  004690  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 17347  004694  0012               	return	
 17348  004696                     __end_ofi2___ftpack:
 17349                           	opt stack 0
 17350                           pclatu	equ	0xFFB
 17351                           pclath	equ	0xFFA
 17352                           tblptru	equ	0xFF8
 17353                           tblptrh	equ	0xFF7
 17354                           tblptrl	equ	0xFF6
 17355                           tablat	equ	0xFF5
 17356                           prodh	equ	0xFF4
 17357                           prodl	equ	0xFF3
 17358                           intcon	equ	0xFF2
 17359                           intcon3	equ	0xFF0
 17360                           postinc0	equ	0xFEE
 17361                           fsr0h	equ	0xFEA
 17362                           fsr0l	equ	0xFE9
 17363                           wreg	equ	0xFE8
 17364                           postdec1	equ	0xFE5
 17365                           fsr1h	equ	0xFE2
 17366                           fsr1l	equ	0xFE1
 17367                           indf2	equ	0xFDF
 17368                           postinc2	equ	0xFDE
 17369                           postdec2	equ	0xFDD
 17370                           fsr2h	equ	0xFDA
 17371                           fsr2l	equ	0xFD9
 17372                           status	equ	0xFD8
 17373                           
 17374 ;; *************** function i2___ftneg *****************
 17375 ;; Defined at:
 17376 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 17377 ;; Parameters:    Size  Location     Type
 17378 ;;  f1              3    0[COMRAM] float 
 17379 ;; Auto vars:     Size  Location     Type
 17380 ;;		None
 17381 ;; Return value:  Size  Location     Type
 17382 ;;                  3    0[COMRAM] float 
 17383 ;; Registers used:
 17384 ;;		wreg, status,2, status,0
 17385 ;; Tracked objects:
 17386 ;;		On entry : 0/0
 17387 ;;		On exit  : 0/0
 17388 ;;		Unchanged: 0/0
 17389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17390 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17393 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17394 ;;Total ram usage:        3 bytes
 17395 ;; Hardware stack levels used:    1
 17396 ;; This function calls:
 17397 ;;		Nothing
 17398 ;; This function is called by:
 17399 ;;		i2_printf
 17400 ;; This function uses a non-reentrant model
 17401 ;;
 17402                           
 17403                           	psect	text63
 17404  00514A                     __ptext63:
 17405                           	opt stack 0
 17406  00514A                     i2___ftneg:
 17407                           	opt stack 21
 17408                           
 17409                           ;incstack = 0
 17410  00514A  5001               	movf	i2___ftneg@f1,w,c
 17411  00514C  1002               	iorwf	i2___ftneg@f1+1,w,c
 17412  00514E  1003               	iorwf	i2___ftneg@f1+2,w,c
 17413  005150  B4D8               	btfsc	status,2,c
 17414  005152  D006               	goto	i2l1120
 17415  005154  0E00               	movlw	0
 17416  005156  1A01               	xorwf	i2___ftneg@f1,f,c
 17417  005158  0E00               	movlw	0
 17418  00515A  1A02               	xorwf	i2___ftneg@f1+1,f,c
 17419  00515C  0E80               	movlw	128
 17420  00515E  1A03               	xorwf	i2___ftneg@f1+2,f,c
 17421  005160                     i2l1120:
 17422  005160  C001  F001         	movff	i2___ftneg@f1,?i2___ftneg
 17423  005164  C002  F002         	movff	i2___ftneg@f1+1,?i2___ftneg+1
 17424  005168  C003  F003         	movff	i2___ftneg@f1+2,?i2___ftneg+2
 17425  00516C  0012               	return		;funcret
 17426  00516E                     __end_ofi2___ftneg:
 17427                           	opt stack 0
 17428                           pclatu	equ	0xFFB
 17429                           pclath	equ	0xFFA
 17430                           tblptru	equ	0xFF8
 17431                           tblptrh	equ	0xFF7
 17432                           tblptrl	equ	0xFF6
 17433                           tablat	equ	0xFF5
 17434                           prodh	equ	0xFF4
 17435                           prodl	equ	0xFF3
 17436                           intcon	equ	0xFF2
 17437                           intcon3	equ	0xFF0
 17438                           postinc0	equ	0xFEE
 17439                           fsr0h	equ	0xFEA
 17440                           fsr0l	equ	0xFE9
 17441                           wreg	equ	0xFE8
 17442                           postdec1	equ	0xFE5
 17443                           fsr1h	equ	0xFE2
 17444                           fsr1l	equ	0xFE1
 17445                           indf2	equ	0xFDF
 17446                           postinc2	equ	0xFDE
 17447                           postdec2	equ	0xFDD
 17448                           fsr2h	equ	0xFDA
 17449                           fsr2l	equ	0xFD9
 17450                           status	equ	0xFD8
 17451                           
 17452 ;; *************** function i2___ftge *****************
 17453 ;; Defined at:
 17454 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 17455 ;; Parameters:    Size  Location     Type
 17456 ;;  ff1             3    0[COMRAM] float 
 17457 ;;  ff2             3    3[COMRAM] float 
 17458 ;; Auto vars:     Size  Location     Type
 17459 ;;		None
 17460 ;; Return value:  Size  Location     Type
 17461 ;;		None               void
 17462 ;; Registers used:
 17463 ;;		wreg, status,2, status,0
 17464 ;; Tracked objects:
 17465 ;;		On entry : 0/0
 17466 ;;		On exit  : 0/0
 17467 ;;		Unchanged: 0/0
 17468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17469 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17471 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17472 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17473 ;;Total ram usage:        9 bytes
 17474 ;; Hardware stack levels used:    1
 17475 ;; This function calls:
 17476 ;;		Nothing
 17477 ;; This function is called by:
 17478 ;;		i2_printf
 17479 ;; This function uses a non-reentrant model
 17480 ;;
 17481                           
 17482                           	psect	text64
 17483  004870                     __ptext64:
 17484                           	opt stack 0
 17485  004870                     i2___ftge:
 17486                           	opt stack 21
 17487                           
 17488                           ;incstack = 0
 17489  004870  AE03               	btfss	i2___ftge@ff1+2,7,c
 17490  004872  D016               	goto	i2l6008
 17491  004874  C001  F007         	movff	i2___ftge@ff1,??i2___ftge
 17492  004878  C002  F008         	movff	i2___ftge@ff1+1,??i2___ftge+1
 17493  00487C  C003  F009         	movff	i2___ftge@ff1+2,??i2___ftge+2
 17494  004880  1E07               	comf	??i2___ftge,f,c
 17495  004882  1E08               	comf	??i2___ftge+1,f,c
 17496  004884  1E09               	comf	??i2___ftge+2,f,c
 17497  004886  2A07               	incf	??i2___ftge,f,c
 17498  004888  0E00               	movlw	0
 17499  00488A  2208               	addwfc	??i2___ftge+1,f,c
 17500  00488C  2209               	addwfc	??i2___ftge+2,f,c
 17501  00488E  0E00               	movlw	0
 17502  004890  2407               	addwf	??i2___ftge,w,c
 17503  004892  6E01               	movwf	i2___ftge@ff1,c
 17504  004894  0E00               	movlw	0
 17505  004896  2008               	addwfc	??i2___ftge+1,w,c
 17506  004898  6E02               	movwf	i2___ftge@ff1+1,c
 17507  00489A  0E80               	movlw	128
 17508  00489C  2009               	addwfc	??i2___ftge+2,w,c
 17509  00489E  6E03               	movwf	i2___ftge@ff1+2,c
 17510  0048A0                     i2l6008:
 17511  0048A0  AE06               	btfss	i2___ftge@ff2+2,7,c
 17512  0048A2  D016               	goto	i2l6012
 17513  0048A4  C004  F007         	movff	i2___ftge@ff2,??i2___ftge
 17514  0048A8  C005  F008         	movff	i2___ftge@ff2+1,??i2___ftge+1
 17515  0048AC  C006  F009         	movff	i2___ftge@ff2+2,??i2___ftge+2
 17516  0048B0  1E07               	comf	??i2___ftge,f,c
 17517  0048B2  1E08               	comf	??i2___ftge+1,f,c
 17518  0048B4  1E09               	comf	??i2___ftge+2,f,c
 17519  0048B6  2A07               	incf	??i2___ftge,f,c
 17520  0048B8  0E00               	movlw	0
 17521  0048BA  2208               	addwfc	??i2___ftge+1,f,c
 17522  0048BC  2209               	addwfc	??i2___ftge+2,f,c
 17523  0048BE  0E00               	movlw	0
 17524  0048C0  2407               	addwf	??i2___ftge,w,c
 17525  0048C2  6E04               	movwf	i2___ftge@ff2,c
 17526  0048C4  0E00               	movlw	0
 17527  0048C6  2008               	addwfc	??i2___ftge+1,w,c
 17528  0048C8  6E05               	movwf	i2___ftge@ff2+1,c
 17529  0048CA  0E80               	movlw	128
 17530  0048CC  2009               	addwfc	??i2___ftge+2,w,c
 17531  0048CE  6E06               	movwf	i2___ftge@ff2+2,c
 17532  0048D0                     i2l6012:
 17533  0048D0  0E00               	movlw	0
 17534  0048D2  1A01               	xorwf	i2___ftge@ff1,f,c
 17535  0048D4  0E00               	movlw	0
 17536  0048D6  1A02               	xorwf	i2___ftge@ff1+1,f,c
 17537  0048D8  0E80               	movlw	128
 17538  0048DA  1A03               	xorwf	i2___ftge@ff1+2,f,c
 17539  0048DC  0E00               	movlw	0
 17540  0048DE  1A04               	xorwf	i2___ftge@ff2,f,c
 17541  0048E0  0E00               	movlw	0
 17542  0048E2  1A05               	xorwf	i2___ftge@ff2+1,f,c
 17543  0048E4  0E80               	movlw	128
 17544  0048E6  1A06               	xorwf	i2___ftge@ff2+2,f,c
 17545  0048E8  5004               	movf	i2___ftge@ff2,w,c
 17546  0048EA  5C01               	subwf	i2___ftge@ff1,w,c
 17547  0048EC  5005               	movf	i2___ftge@ff2+1,w,c
 17548  0048EE  5802               	subwfb	i2___ftge@ff1+1,w,c
 17549  0048F0  5006               	movf	i2___ftge@ff2+2,w,c
 17550  0048F2  5803               	subwfb	i2___ftge@ff1+2,w,c
 17551  0048F4  B0D8               	btfsc	status,0,c
 17552  0048F6  D002               	goto	i2l6018
 17553  0048F8  90D8               	bcf	status,0,c
 17554  0048FA  0012               	return	
 17555  0048FC                     i2l6018:
 17556  0048FC  80D8               	bsf	status,0,c
 17557  0048FE  0012               	return	
 17558  004900                     __end_ofi2___ftge:
 17559                           	opt stack 0
 17560                           pclatu	equ	0xFFB
 17561                           pclath	equ	0xFFA
 17562                           tblptru	equ	0xFF8
 17563                           tblptrh	equ	0xFF7
 17564                           tblptrl	equ	0xFF6
 17565                           tablat	equ	0xFF5
 17566                           prodh	equ	0xFF4
 17567                           prodl	equ	0xFF3
 17568                           intcon	equ	0xFF2
 17569                           intcon3	equ	0xFF0
 17570                           postinc0	equ	0xFEE
 17571                           fsr0h	equ	0xFEA
 17572                           fsr0l	equ	0xFE9
 17573                           wreg	equ	0xFE8
 17574                           postdec1	equ	0xFE5
 17575                           fsr1h	equ	0xFE2
 17576                           fsr1l	equ	0xFE1
 17577                           indf2	equ	0xFDF
 17578                           postinc2	equ	0xFDE
 17579                           postdec2	equ	0xFDD
 17580                           fsr2h	equ	0xFDA
 17581                           fsr2l	equ	0xFD9
 17582                           status	equ	0xFD8
 17583                           
 17584 ;; *************** function i2_lcdClear *****************
 17585 ;; Defined at:
 17586 ;;		line 74 in file "lcd.c"
 17587 ;; Parameters:    Size  Location     Type
 17588 ;;		None
 17589 ;; Auto vars:     Size  Location     Type
 17590 ;;		None
 17591 ;; Return value:  Size  Location     Type
 17592 ;;                  1    wreg      void 
 17593 ;; Registers used:
 17594 ;;		wreg, status,2, status,0, cstack
 17595 ;; Tracked objects:
 17596 ;;		On entry : 0/0
 17597 ;;		On exit  : 0/0
 17598 ;;		Unchanged: 0/0
 17599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17604 ;;Total ram usage:        0 bytes
 17605 ;; Hardware stack levels used:    1
 17606 ;; Hardware stack levels required when called:    2
 17607 ;; This function calls:
 17608 ;;		i2_lcdInst
 17609 ;; This function is called by:
 17610 ;;		_service
 17611 ;; This function uses a non-reentrant model
 17612 ;;
 17613                           
 17614                           	psect	text65
 17615  005206                     __ptext65:
 17616                           	opt stack 0
 17617  005206                     i2_lcdClear:
 17618                           	opt stack 20
 17619                           
 17620                           ;lcd.c: 75: lcdInst(0b00000001);
 17621                           
 17622                           ;incstack = 0
 17623  005206  0E01               	movlw	1
 17624  005208  ECC8  F028         	call	i2_lcdInst
 17625  00520C  0012               	return		;funcret
 17626  00520E                     __end_ofi2_lcdClear:
 17627                           	opt stack 0
 17628                           pclatu	equ	0xFFB
 17629                           pclath	equ	0xFFA
 17630                           tblptru	equ	0xFF8
 17631                           tblptrh	equ	0xFF7
 17632                           tblptrl	equ	0xFF6
 17633                           tablat	equ	0xFF5
 17634                           prodh	equ	0xFF4
 17635                           prodl	equ	0xFF3
 17636                           intcon	equ	0xFF2
 17637                           intcon3	equ	0xFF0
 17638                           postinc0	equ	0xFEE
 17639                           fsr0h	equ	0xFEA
 17640                           fsr0l	equ	0xFE9
 17641                           wreg	equ	0xFE8
 17642                           postdec1	equ	0xFE5
 17643                           fsr1h	equ	0xFE2
 17644                           fsr1l	equ	0xFE1
 17645                           indf2	equ	0xFDF
 17646                           postinc2	equ	0xFDE
 17647                           postdec2	equ	0xFDD
 17648                           fsr2h	equ	0xFDA
 17649                           fsr2l	equ	0xFD9
 17650                           status	equ	0xFD8
 17651                           
 17652 ;; *************** function i2_lcdInst *****************
 17653 ;; Defined at:
 17654 ;;		line 27 in file "lcd.c"
 17655 ;; Parameters:    Size  Location     Type
 17656 ;;  data            1    wreg     unsigned char 
 17657 ;; Auto vars:     Size  Location     Type
 17658 ;;  data            1    3[COMRAM] unsigned char 
 17659 ;; Return value:  Size  Location     Type
 17660 ;;                  1    wreg      void 
 17661 ;; Registers used:
 17662 ;;		wreg, status,2, status,0, cstack
 17663 ;; Tracked objects:
 17664 ;;		On entry : 0/0
 17665 ;;		On exit  : 0/0
 17666 ;;		Unchanged: 0/0
 17667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17669 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17670 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17671 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17672 ;;Total ram usage:        2 bytes
 17673 ;; Hardware stack levels used:    1
 17674 ;; Hardware stack levels required when called:    1
 17675 ;; This function calls:
 17676 ;;		i2_lcdNibble
 17677 ;; This function is called by:
 17678 ;;		i2_lcdClear
 17679 ;;		i2_lcdNewline
 17680 ;; This function uses a non-reentrant model
 17681 ;;
 17682                           
 17683                           	psect	text66
 17684  005190                     __ptext66:
 17685                           	opt stack 0
 17686  005190                     i2_lcdInst:
 17687                           	opt stack 18
 17688                           
 17689                           ;incstack = 0
 17690                           ;i2lcdInst@data stored from wreg
 17691  005190  6E04               	movwf	i2lcdInst@data,c
 17692                           
 17693                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 17694  005192  948C               	bcf	3980,2,c	;volatile
 17695                           
 17696                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 17697  005194  0E74               	movlw	116
 17698  005196                     i2u790_47:
 17699  005196  2EE8               	decfsz	wreg,f,c
 17700  005198  D7FE               	bra	i2u790_47
 17701  00519A  D000               	nop2	
 17702                           
 17703                           ;lcd.c: 30: lcdNibble(data);
 17704  00519C  5004               	movf	i2lcdInst@data,w,c
 17705  00519E  EC2E  F026         	call	i2_lcdNibble
 17706                           
 17707                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 17708  0051A2  0E04               	movlw	4
 17709  0051A4  6E03               	movwf	??i2_lcdInst& (0+255),c
 17710  0051A6  0E3E               	movlw	62
 17711  0051A8                     i2u791_47:
 17712  0051A8  2EE8               	decfsz	wreg,f,c
 17713  0051AA  D7FE               	bra	i2u791_47
 17714  0051AC  2E03               	decfsz	??i2_lcdInst& (0+255),f,c
 17715  0051AE  D7FC               	bra	i2u791_47
 17716  0051B0  0012               	return		;funcret
 17717  0051B2                     __end_ofi2_lcdInst:
 17718                           	opt stack 0
 17719                           pclatu	equ	0xFFB
 17720                           pclath	equ	0xFFA
 17721                           tblptru	equ	0xFF8
 17722                           tblptrh	equ	0xFF7
 17723                           tblptrl	equ	0xFF6
 17724                           tablat	equ	0xFF5
 17725                           prodh	equ	0xFF4
 17726                           prodl	equ	0xFF3
 17727                           intcon	equ	0xFF2
 17728                           intcon3	equ	0xFF0
 17729                           postinc0	equ	0xFEE
 17730                           fsr0h	equ	0xFEA
 17731                           fsr0l	equ	0xFE9
 17732                           wreg	equ	0xFE8
 17733                           postdec1	equ	0xFE5
 17734                           fsr1h	equ	0xFE2
 17735                           fsr1l	equ	0xFE1
 17736                           indf2	equ	0xFDF
 17737                           postinc2	equ	0xFDE
 17738                           postdec2	equ	0xFDD
 17739                           fsr2h	equ	0xFDA
 17740                           fsr2l	equ	0xFD9
 17741                           status	equ	0xFD8
 17742                           
 17743 ;; *************** function i2_lcdNibble *****************
 17744 ;; Defined at:
 17745 ;;		line 46 in file "lcd.c"
 17746 ;; Parameters:    Size  Location     Type
 17747 ;;  data            1    wreg     unsigned char 
 17748 ;; Auto vars:     Size  Location     Type
 17749 ;;  data            1    1[COMRAM] unsigned char 
 17750 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 17751 ;; Return value:  Size  Location     Type
 17752 ;;                  1    wreg      void 
 17753 ;; Registers used:
 17754 ;;		wreg, status,2, status,0
 17755 ;; Tracked objects:
 17756 ;;		On entry : 0/0
 17757 ;;		On exit  : 0/0
 17758 ;;		Unchanged: 0/0
 17759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17761 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17763 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17764 ;;Total ram usage:        2 bytes
 17765 ;; Hardware stack levels used:    1
 17766 ;; This function calls:
 17767 ;;		Nothing
 17768 ;; This function is called by:
 17769 ;;		i2_lcdInst
 17770 ;;		i2_putch
 17771 ;; This function uses a non-reentrant model
 17772 ;;
 17773                           
 17774                           	psect	text67
 17775  004C5C                     __ptext67:
 17776                           	opt stack 0
 17777  004C5C                     i2_lcdNibble:
 17778                           	opt stack 20
 17779                           
 17780                           ;incstack = 0
 17781                           ;i2lcdNibble@data stored from wreg
 17782  004C5C  6E02               	movwf	i2lcdNibble@data,c
 17783                           
 17784                           ;lcd.c: 48: char temp = data & 0xF0;
 17785  004C5E  5002               	movf	i2lcdNibble@data,w,c
 17786  004C60  0BF0               	andlw	240
 17787  004C62  6E01               	movwf	i2lcdNibble@temp,c
 17788                           
 17789                           ;lcd.c: 49: LATD = LATD & 0x0F;
 17790  004C64  508C               	movf	3980,w,c	;volatile
 17791  004C66  0B0F               	andlw	15
 17792  004C68  6E8C               	movwf	3980,c	;volatile
 17793                           
 17794                           ;lcd.c: 50: LATD = temp | LATD;
 17795  004C6A  5001               	movf	i2lcdNibble@temp,w,c
 17796  004C6C  108C               	iorwf	3980,w,c	;volatile
 17797  004C6E  6E8C               	movwf	3980,c	;volatile
 17798                           
 17799                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 17800  004C70  968C               	bcf	3980,3,c	;volatile
 17801                           
 17802                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 17803  004C72  0ED6               	movlw	214
 17804  004C74                     i2u792_47:
 17805  004C74  D000               	nop2	
 17806  004C76  D000               	nop2	
 17807  004C78  2EE8               	decfsz	wreg,f,c
 17808  004C7A  D7FC               	bra	i2u792_47
 17809  004C7C  D000               	nop2	
 17810                           
 17811                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 17812  004C7E  868C               	bsf	3980,3,c	;volatile
 17813                           
 17814                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 17815  004C80  0ED6               	movlw	214
 17816  004C82                     i2u793_47:
 17817  004C82  D000               	nop2	
 17818  004C84  D000               	nop2	
 17819  004C86  2EE8               	decfsz	wreg,f,c
 17820  004C88  D7FC               	bra	i2u793_47
 17821  004C8A  D000               	nop2	
 17822                           
 17823                           ;lcd.c: 58: data = data << 4;
 17824  004C8C  3802               	swapf	i2lcdNibble@data,w,c
 17825  004C8E  0BF0               	andlw	240
 17826  004C90  6E02               	movwf	i2lcdNibble@data,c
 17827                           
 17828                           ;lcd.c: 60: temp = data & 0xF0;
 17829  004C92  5002               	movf	i2lcdNibble@data,w,c
 17830  004C94  0BF0               	andlw	240
 17831  004C96  6E01               	movwf	i2lcdNibble@temp,c
 17832                           
 17833                           ;lcd.c: 61: LATD = LATD & 0x0F;
 17834  004C98  508C               	movf	3980,w,c	;volatile
 17835  004C9A  0B0F               	andlw	15
 17836  004C9C  6E8C               	movwf	3980,c	;volatile
 17837                           
 17838                           ;lcd.c: 62: LATD = temp | LATD;
 17839  004C9E  5001               	movf	i2lcdNibble@temp,w,c
 17840  004CA0  108C               	iorwf	3980,w,c	;volatile
 17841  004CA2  6E8C               	movwf	3980,c	;volatile
 17842                           
 17843                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 17844  004CA4  968C               	bcf	3980,3,c	;volatile
 17845                           
 17846                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 17847  004CA6  0ED6               	movlw	214
 17848  004CA8                     i2u794_47:
 17849  004CA8  D000               	nop2	
 17850  004CAA  D000               	nop2	
 17851  004CAC  2EE8               	decfsz	wreg,f,c
 17852  004CAE  D7FC               	bra	i2u794_47
 17853  004CB0  D000               	nop2	
 17854                           
 17855                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 17856  004CB2  868C               	bsf	3980,3,c	;volatile
 17857                           
 17858                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 17859  004CB4  0ED6               	movlw	214
 17860  004CB6                     i2u795_47:
 17861  004CB6  D000               	nop2	
 17862  004CB8  D000               	nop2	
 17863  004CBA  2EE8               	decfsz	wreg,f,c
 17864  004CBC  D7FC               	bra	i2u795_47
 17865  004CBE  D000               	nop2	
 17866  004CC0  0012               	return		;funcret
 17867  004CC2                     __end_ofi2_lcdNibble:
 17868                           	opt stack 0
 17869                           pclatu	equ	0xFFB
 17870                           pclath	equ	0xFFA
 17871                           tblptru	equ	0xFF8
 17872                           tblptrh	equ	0xFF7
 17873                           tblptrl	equ	0xFF6
 17874                           tablat	equ	0xFF5
 17875                           prodh	equ	0xFF4
 17876                           prodl	equ	0xFF3
 17877                           intcon	equ	0xFF2
 17878                           intcon3	equ	0xFF0
 17879                           postinc0	equ	0xFEE
 17880                           fsr0h	equ	0xFEA
 17881                           fsr0l	equ	0xFE9
 17882                           wreg	equ	0xFE8
 17883                           postdec1	equ	0xFE5
 17884                           fsr1h	equ	0xFE2
 17885                           fsr1l	equ	0xFE1
 17886                           indf2	equ	0xFDF
 17887                           postinc2	equ	0xFDE
 17888                           postdec2	equ	0xFDD
 17889                           fsr2h	equ	0xFDA
 17890                           fsr2l	equ	0xFD9
 17891                           status	equ	0xFD8
 17892                           
 17893 ;; *************** function _servoInterruptService *****************
 17894 ;; Defined at:
 17895 ;;		line 52 in file "servo.c"
 17896 ;; Parameters:    Size  Location     Type
 17897 ;;		None
 17898 ;; Auto vars:     Size  Location     Type
 17899 ;;		None
 17900 ;; Return value:  Size  Location     Type
 17901 ;;                  1    wreg      void 
 17902 ;; Registers used:
 17903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17904 ;; Tracked objects:
 17905 ;;		On entry : 0/0
 17906 ;;		On exit  : 0/0
 17907 ;;		Unchanged: 0/0
 17908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17911 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17912 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17913 ;;Total ram usage:        4 bytes
 17914 ;; Hardware stack levels used:    1
 17915 ;; Hardware stack levels required when called:    1
 17916 ;; This function calls:
 17917 ;;		i2___awmod
 17918 ;;		i2_digitalWrite
 17919 ;;		i2_startTimer
 17920 ;; This function is called by:
 17921 ;;		_service
 17922 ;; This function uses a non-reentrant model
 17923 ;;
 17924                           
 17925                           	psect	text68
 17926  003D68                     __ptext68:
 17927                           	opt stack 0
 17928  003D68                     _servoInterruptService:
 17929                           	opt stack 21
 17930                           
 17931                           ;servo.c: 54: if(TMR0IF){TMR0IF = 0;
 17932                           
 17933                           ;incstack = 0
 17934  003D68  A4F2               	btfss	intcon,2,c	;volatile
 17935  003D6A  0012               	return	
 17936  003D6C  94F2               	bcf	intcon,2,c	;volatile
 17937                           
 17938                           ;servo.c: 55: digitalWrite(servos[curr],0);
 17939  003D6E  90D8               	bcf	status,0,c
 17940  003D70  347B               	rlcf	_curr,w,c
 17941  003D72  6ED9               	movwf	fsr2l,c
 17942  003D74  347C               	rlcf	_curr+1,w,c
 17943  003D76  6EDA               	movwf	fsr2h,c
 17944  003D78  0E68               	movlw	low _servos
 17945  003D7A  26D9               	addwf	fsr2l,f,c
 17946  003D7C  0E01               	movlw	high _servos
 17947  003D7E  22DA               	addwfc	fsr2h,f,c
 17948  003D80  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 17949  003D84  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 17950  003D88  0E00               	movlw	0
 17951  003D8A  6E0A               	movwf	i2digitalWrite@val+1,c
 17952  003D8C  0E00               	movlw	0
 17953  003D8E  6E09               	movwf	i2digitalWrite@val,c
 17954  003D90  ECD3  F021         	call	i2_digitalWrite	;wreg free
 17955                           
 17956                           ;servo.c: 56: digitalWrite(servos[ (curr+1)%(n+1) ],1);
 17957  003D94  0E01               	movlw	1
 17958  003D96  247B               	addwf	_curr,w,c
 17959  003D98  6E01               	movwf	i2___awmod@dividend,c
 17960  003D9A  0E00               	movlw	0
 17961  003D9C  207C               	addwfc	_curr+1,w,c
 17962  003D9E  6E02               	movwf	i2___awmod@dividend+1,c
 17963  003DA0  0E01               	movlw	1
 17964  003DA2  247D               	addwf	_n,w,c
 17965  003DA4  6E03               	movwf	i2___awmod@divisor,c
 17966  003DA6  0E00               	movlw	0
 17967  003DA8  207E               	addwfc	_n+1,w,c
 17968  003DAA  6E04               	movwf	i2___awmod@divisor+1,c
 17969  003DAC  ECC3  F025         	call	i2___awmod	;wreg free
 17970  003DB0  90D8               	bcf	status,0,c
 17971  003DB2  3601               	rlcf	?i2___awmod,f,c
 17972  003DB4  3602               	rlcf	?i2___awmod+1,f,c
 17973  003DB6  0E68               	movlw	low _servos
 17974  003DB8  2401               	addwf	?i2___awmod,w,c
 17975  003DBA  6ED9               	movwf	fsr2l,c
 17976  003DBC  0E01               	movlw	high _servos
 17977  003DBE  2002               	addwfc	?i2___awmod+1,w,c
 17978  003DC0  6EDA               	movwf	fsr2h,c
 17979  003DC2  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 17980  003DC6  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 17981  003DCA  0E00               	movlw	0
 17982  003DCC  6E0A               	movwf	i2digitalWrite@val+1,c
 17983  003DCE  0E01               	movlw	1
 17984  003DD0  6E09               	movwf	i2digitalWrite@val,c
 17985  003DD2  ECD3  F021         	call	i2_digitalWrite	;wreg free
 17986                           
 17987                           ;servo.c: 57: startTimer(0, 0xFFFF - pulse[ (curr+1)%(n+1) ]);
 17988  003DD6  0E00               	movlw	0
 17989  003DD8  6E08               	movwf	i2startTimer@timer+1,c
 17990  003DDA  0E00               	movlw	0
 17991  003DDC  6E07               	movwf	i2startTimer@timer,c
 17992  003DDE  0EFF               	movlw	255
 17993  003DE0  6E10               	movwf	??_servoInterruptService& (0+255),c
 17994  003DE2  0EFF               	movlw	255
 17995  003DE4  6E11               	movwf	(??_servoInterruptService+1)& (0+255),c
 17996  003DE6  0E01               	movlw	1
 17997  003DE8  247B               	addwf	_curr,w,c
 17998  003DEA  6E01               	movwf	i2___awmod@dividend,c
 17999  003DEC  0E00               	movlw	0
 18000  003DEE  207C               	addwfc	_curr+1,w,c
 18001  003DF0  6E02               	movwf	i2___awmod@dividend+1,c
 18002  003DF2  0E01               	movlw	1
 18003  003DF4  247D               	addwf	_n,w,c
 18004  003DF6  6E03               	movwf	i2___awmod@divisor,c
 18005  003DF8  0E00               	movlw	0
 18006  003DFA  207E               	addwfc	_n+1,w,c
 18007  003DFC  6E04               	movwf	i2___awmod@divisor+1,c
 18008  003DFE  ECC3  F025         	call	i2___awmod	;wreg free
 18009  003E02  90D8               	bcf	status,0,c
 18010  003E04  3601               	rlcf	?i2___awmod,f,c
 18011  003E06  3602               	rlcf	?i2___awmod+1,f,c
 18012  003E08  0E60               	movlw	low _pulse
 18013  003E0A  2401               	addwf	?i2___awmod,w,c
 18014  003E0C  6ED9               	movwf	fsr2l,c
 18015  003E0E  0E01               	movlw	high _pulse
 18016  003E10  2002               	addwfc	?i2___awmod+1,w,c
 18017  003E12  6EDA               	movwf	fsr2h,c
 18018  003E14  CFDE F012          	movff	postinc2,??_servoInterruptService+2
 18019  003E18  CFDD F013          	movff	postdec2,??_servoInterruptService+3
 18020  003E1C  1E12               	comf	??_servoInterruptService+2,f,c
 18021  003E1E  1E13               	comf	??_servoInterruptService+3,f,c
 18022  003E20  4A12               	infsnz	??_servoInterruptService+2,f,c
 18023  003E22  2A13               	incf	??_servoInterruptService+3,f,c
 18024  003E24  5010               	movf	??_servoInterruptService,w,c
 18025  003E26  2612               	addwf	??_servoInterruptService+2,f,c
 18026  003E28  5011               	movf	??_servoInterruptService+1,w,c
 18027  003E2A  2213               	addwfc	??_servoInterruptService+3,f,c
 18028  003E2C  C012  F009         	movff	??_servoInterruptService+2,i2startTimer@val
 18029  003E30  C013  F00A         	movff	??_servoInterruptService+3,i2startTimer@val+1
 18030  003E34  6A0B               	clrf	i2startTimer@val+2,c
 18031  003E36  6A0C               	clrf	i2startTimer@val+3,c
 18032  003E38  EC04  F027         	call	i2_startTimer	;wreg free
 18033                           
 18034                           ;servo.c: 59: curr = (curr+1)%(n+1);
 18035  003E3C  0E01               	movlw	1
 18036  003E3E  247B               	addwf	_curr,w,c
 18037  003E40  6E01               	movwf	i2___awmod@dividend,c
 18038  003E42  0E00               	movlw	0
 18039  003E44  207C               	addwfc	_curr+1,w,c
 18040  003E46  6E02               	movwf	i2___awmod@dividend+1,c
 18041  003E48  0E01               	movlw	1
 18042  003E4A  247D               	addwf	_n,w,c
 18043  003E4C  6E03               	movwf	i2___awmod@divisor,c
 18044  003E4E  0E00               	movlw	0
 18045  003E50  207E               	addwfc	_n+1,w,c
 18046  003E52  6E04               	movwf	i2___awmod@divisor+1,c
 18047  003E54  ECC3  F025         	call	i2___awmod	;wreg free
 18048  003E58  C001  F07B         	movff	?i2___awmod,_curr
 18049  003E5C  C002  F07C         	movff	?i2___awmod+1,_curr+1
 18050  003E60  0012               	return	
 18051  003E62                     __end_of_servoInterruptService:
 18052                           	opt stack 0
 18053                           pclatu	equ	0xFFB
 18054                           pclath	equ	0xFFA
 18055                           tblptru	equ	0xFF8
 18056                           tblptrh	equ	0xFF7
 18057                           tblptrl	equ	0xFF6
 18058                           tablat	equ	0xFF5
 18059                           prodh	equ	0xFF4
 18060                           prodl	equ	0xFF3
 18061                           intcon	equ	0xFF2
 18062                           intcon3	equ	0xFF0
 18063                           postinc0	equ	0xFEE
 18064                           fsr0h	equ	0xFEA
 18065                           fsr0l	equ	0xFE9
 18066                           wreg	equ	0xFE8
 18067                           postdec1	equ	0xFE5
 18068                           fsr1h	equ	0xFE2
 18069                           fsr1l	equ	0xFE1
 18070                           indf2	equ	0xFDF
 18071                           postinc2	equ	0xFDE
 18072                           postdec2	equ	0xFDD
 18073                           fsr2h	equ	0xFDA
 18074                           fsr2l	equ	0xFD9
 18075                           status	equ	0xFD8
 18076                           
 18077 ;; *************** function i2_startTimer *****************
 18078 ;; Defined at:
 18079 ;;		line 76 in file "timer.c"
 18080 ;; Parameters:    Size  Location     Type
 18081 ;;  timer           2    6[COMRAM] int 
 18082 ;;  val             4    8[COMRAM] long 
 18083 ;; Auto vars:     Size  Location     Type
 18084 ;;		None
 18085 ;; Return value:  Size  Location     Type
 18086 ;;                  1    wreg      void 
 18087 ;; Registers used:
 18088 ;;		wreg, status,2, status,0
 18089 ;; Tracked objects:
 18090 ;;		On entry : 0/0
 18091 ;;		On exit  : 0/0
 18092 ;;		Unchanged: 0/0
 18093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18094 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18096 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18097 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18098 ;;Total ram usage:        8 bytes
 18099 ;; Hardware stack levels used:    1
 18100 ;; This function calls:
 18101 ;;		Nothing
 18102 ;; This function is called by:
 18103 ;;		_service
 18104 ;;		_servoInterruptService
 18105 ;; This function uses a non-reentrant model
 18106 ;;
 18107                           
 18108                           	psect	text69
 18109  004E08                     __ptext69:
 18110                           	opt stack 0
 18111  004E08                     i2_startTimer:
 18112                           	opt stack 22
 18113                           
 18114                           ;timer.c: 77: switch(timer){
 18115                           
 18116                           ;incstack = 0
 18117  004E08  D012               	goto	i2l5822
 18118  004E0A                     i2l401:
 18119                           
 18120                           ;timer.c: 79: TMR0H = val>>8;
 18121  004E0A  C00A  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 18122                           
 18123                           ;timer.c: 80: TMR0L = val;
 18124  004E0E  C009  FFD6         	movff	i2startTimer@val,4054	;volatile
 18125                           
 18126                           ;timer.c: 81: T0CON |= 1<<7;
 18127  004E12  8ED5               	bsf	4053,7,c	;volatile
 18128                           
 18129                           ;timer.c: 82: break;
 18130  004E14  0012               	return	
 18131  004E16                     i2l403:
 18132                           
 18133                           ;timer.c: 84: TMR1H = val>>8;
 18134  004E16  C00A  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 18135                           
 18136                           ;timer.c: 85: TMR1L = val;
 18137  004E1A  C009  FFCE         	movff	i2startTimer@val,4046	;volatile
 18138                           
 18139                           ;timer.c: 86: T1CON |= 1<<0;
 18140  004E1E  80CD               	bsf	4045,0,c	;volatile
 18141                           
 18142                           ;timer.c: 87: break;
 18143  004E20  0012               	return	
 18144  004E22                     i2l404:
 18145                           
 18146                           ;timer.c: 89: TMR3H = val>>8;
 18147  004E22  C00A  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 18148                           
 18149                           ;timer.c: 90: TMR3L = val;
 18150  004E26  C009  FFB2         	movff	i2startTimer@val,4018	;volatile
 18151                           
 18152                           ;timer.c: 91: T3CON |= 1<<0;
 18153  004E2A  80B1               	bsf	4017,0,c	;volatile
 18154                           
 18155                           ;timer.c: 92: }
 18156  004E2C  0012               	return	
 18157  004E2E                     i2l5822:
 18158  004E2E  C007  F00D         	movff	i2startTimer@timer,??i2_startTimer
 18159  004E32  C008  F00E         	movff	i2startTimer@timer+1,??i2_startTimer+1
 18160                           
 18161                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18162                           ; Switch size 1, requested type "space"
 18163                           ; Number of cases is 1, Range of values is 0 to 0
 18164                           ; switch strategies available:
 18165                           ; Name         Instructions Cycles
 18166                           ; simple_byte            4     3 (average)
 18167                           ;	Chosen strategy is simple_byte
 18168  004E36  500E               	movf	??i2_startTimer+1,w,c
 18169  004E38  0A00               	xorlw	0	; case 0
 18170  004E3A  A4D8               	btfss	status,2,c
 18171  004E3C  0012               	return	
 18172                           
 18173                           ; Switch size 1, requested type "space"
 18174                           ; Number of cases is 3, Range of values is 0 to 3
 18175                           ; switch strategies available:
 18176                           ; Name         Instructions Cycles
 18177                           ; simple_byte           10     6 (average)
 18178                           ;	Chosen strategy is simple_byte
 18179  004E3E  500D               	movf	??i2_startTimer,w,c
 18180  004E40  0A00               	xorlw	0	; case 0
 18181  004E42  B4D8               	btfsc	status,2,c
 18182  004E44  D7E2               	goto	i2l401
 18183  004E46  0A01               	xorlw	1	; case 1
 18184  004E48  B4D8               	btfsc	status,2,c
 18185  004E4A  D7E5               	goto	i2l403
 18186  004E4C  0A02               	xorlw	2	; case 3
 18187  004E4E  A4D8               	btfss	status,2,c
 18188  004E50  0012               	return	
 18189  004E52  D7E7               	goto	i2l404
 18190  004E54                     __end_ofi2_startTimer:
 18191                           	opt stack 0
 18192                           pclatu	equ	0xFFB
 18193                           pclath	equ	0xFFA
 18194                           tblptru	equ	0xFF8
 18195                           tblptrh	equ	0xFF7
 18196                           tblptrl	equ	0xFF6
 18197                           tablat	equ	0xFF5
 18198                           prodh	equ	0xFF4
 18199                           prodl	equ	0xFF3
 18200                           intcon	equ	0xFF2
 18201                           intcon3	equ	0xFF0
 18202                           postinc0	equ	0xFEE
 18203                           fsr0h	equ	0xFEA
 18204                           fsr0l	equ	0xFE9
 18205                           wreg	equ	0xFE8
 18206                           postdec1	equ	0xFE5
 18207                           fsr1h	equ	0xFE2
 18208                           fsr1l	equ	0xFE1
 18209                           indf2	equ	0xFDF
 18210                           postinc2	equ	0xFDE
 18211                           postdec2	equ	0xFDD
 18212                           fsr2h	equ	0xFDA
 18213                           fsr2l	equ	0xFD9
 18214                           status	equ	0xFD8
 18215                           
 18216 ;; *************** function i2_digitalWrite *****************
 18217 ;; Defined at:
 18218 ;;		line 53 in file "iopin.c"
 18219 ;; Parameters:    Size  Location     Type
 18220 ;;  pin             2    6[COMRAM] PTR int 
 18221 ;;		 -> AA_float(4), redirectingServo(4), padServo(4), conveyorServo(4), 
 18222 ;;		 -> cylinderMotor(4), 
 18223 ;;  val             2    8[COMRAM] int 
 18224 ;; Auto vars:     Size  Location     Type
 18225 ;;  digitalWrite    2   13[COMRAM] int 
 18226 ;; Return value:  Size  Location     Type
 18227 ;;                  1    wreg      void 
 18228 ;; Registers used:
 18229 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18230 ;; Tracked objects:
 18231 ;;		On entry : 0/0
 18232 ;;		On exit  : 0/0
 18233 ;;		Unchanged: 0/0
 18234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18235 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18236 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18237 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18238 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18239 ;;Total ram usage:        9 bytes
 18240 ;; Hardware stack levels used:    1
 18241 ;; This function calls:
 18242 ;;		Nothing
 18243 ;; This function is called by:
 18244 ;;		_servoInterruptService
 18245 ;; This function uses a non-reentrant model
 18246 ;;
 18247                           
 18248                           	psect	text70
 18249  0043A6                     __ptext70:
 18250                           	opt stack 0
 18251  0043A6                     i2_digitalWrite:
 18252                           	opt stack 21
 18253                           
 18254                           ;iopin.c: 54: if(pin){
 18255                           
 18256                           ;incstack = 0
 18257  0043A6  5007               	movf	i2digitalWrite@pin,w,c
 18258  0043A8  1008               	iorwf	i2digitalWrite@pin+1,w,c
 18259  0043AA  B4D8               	btfsc	status,2,c
 18260  0043AC  0012               	return	
 18261                           
 18262                           ;iopin.c: 55: int p = 1 << pin[1];
 18263  0043AE  EE20 F002          	lfsr	2,2
 18264  0043B2  5007               	movf	i2digitalWrite@pin,w,c
 18265  0043B4  26D9               	addwf	fsr2l,f,c
 18266  0043B6  5008               	movf	i2digitalWrite@pin+1,w,c
 18267  0043B8  22DA               	addwfc	fsr2h,f,c
 18268  0043BA  50DF               	movf	indf2,w,c
 18269  0043BC  6E0B               	movwf	??i2_digitalWrite& (0+255),c
 18270  0043BE  0E01               	movlw	1
 18271  0043C0  6E0C               	movwf	(??i2_digitalWrite+1)& (0+255),c
 18272  0043C2  0E00               	movlw	0
 18273  0043C4  6E0D               	movwf	(??i2_digitalWrite+2)& (0+255),c
 18274  0043C6  2A0B               	incf	??i2_digitalWrite,f,c
 18275  0043C8  D003               	goto	i2u622_44
 18276  0043CA                     i2u622_45:
 18277  0043CA  90D8               	bcf	status,0,c
 18278  0043CC  360C               	rlcf	??i2_digitalWrite+1,f,c
 18279  0043CE  360D               	rlcf	??i2_digitalWrite+2,f,c
 18280  0043D0                     i2u622_44:
 18281  0043D0  2E0B               	decfsz	??i2_digitalWrite,f,c
 18282  0043D2  D7FB               	goto	i2u622_45
 18283  0043D4  C00C  F00E         	movff	??i2_digitalWrite+1,i2digitalWrite@p
 18284  0043D8  C00D  F00F         	movff	??i2_digitalWrite+2,i2digitalWrite@p+1
 18285                           
 18286                           ;iopin.c: 56: if(val == 0){
 18287  0043DC  5009               	movf	i2digitalWrite@val,w,c
 18288  0043DE  100A               	iorwf	i2digitalWrite@val+1,w,c
 18289  0043E0  A4D8               	btfss	status,2,c
 18290  0043E2  D02B               	goto	i2l5808
 18291                           
 18292                           ;iopin.c: 57: p ^= 0xff;
 18293  0043E4  0EFF               	movlw	255
 18294  0043E6  1A0E               	xorwf	i2digitalWrite@p,f,c
 18295                           
 18296                           ;iopin.c: 58: }
 18297                           ;iopin.c: 60: switch(pin[0]){
 18298  0043E8  D028               	goto	i2l5808
 18299  0043EA                     i2l5784:
 18300  0043EA  0409               	decf	i2digitalWrite@val,w,c
 18301  0043EC  100A               	iorwf	i2digitalWrite@val+1,w,c
 18302  0043EE  A4D8               	btfss	status,2,c
 18303  0043F0  D003               	goto	i2l5788
 18304  0043F2  500E               	movf	i2digitalWrite@p,w,c
 18305  0043F4  1289               	iorwf	3977,f,c	;volatile
 18306  0043F6  0012               	return	
 18307  0043F8                     i2l5788:
 18308                           
 18309                           ;iopin.c: 62: else LATA &= p;
 18310  0043F8  500E               	movf	i2digitalWrite@p,w,c
 18311  0043FA  1689               	andwf	3977,f,c	;volatile
 18312                           
 18313                           ;iopin.c: 63: break;
 18314  0043FC  0012               	return	
 18315  0043FE                     i2l5790:
 18316  0043FE  0409               	decf	i2digitalWrite@val,w,c
 18317  004400  100A               	iorwf	i2digitalWrite@val+1,w,c
 18318  004402  A4D8               	btfss	status,2,c
 18319  004404  D003               	goto	i2l5794
 18320  004406  500E               	movf	i2digitalWrite@p,w,c
 18321  004408  128A               	iorwf	3978,f,c	;volatile
 18322  00440A  0012               	return	
 18323  00440C                     i2l5794:
 18324                           
 18325                           ;iopin.c: 65: else LATB &= p;
 18326  00440C  500E               	movf	i2digitalWrite@p,w,c
 18327  00440E  168A               	andwf	3978,f,c	;volatile
 18328                           
 18329                           ;iopin.c: 66: break;
 18330  004410  0012               	return	
 18331  004412                     i2l5796:
 18332  004412  0409               	decf	i2digitalWrite@val,w,c
 18333  004414  100A               	iorwf	i2digitalWrite@val+1,w,c
 18334  004416  A4D8               	btfss	status,2,c
 18335  004418  D003               	goto	i2l5800
 18336  00441A  500E               	movf	i2digitalWrite@p,w,c
 18337  00441C  128B               	iorwf	3979,f,c	;volatile
 18338  00441E  0012               	return	
 18339  004420                     i2l5800:
 18340                           
 18341                           ;iopin.c: 68: else LATC &= p;
 18342  004420  500E               	movf	i2digitalWrite@p,w,c
 18343  004422  168B               	andwf	3979,f,c	;volatile
 18344                           
 18345                           ;iopin.c: 69: break;
 18346  004424  0012               	return	
 18347  004426                     i2l5802:
 18348  004426  0409               	decf	i2digitalWrite@val,w,c
 18349  004428  100A               	iorwf	i2digitalWrite@val+1,w,c
 18350  00442A  A4D8               	btfss	status,2,c
 18351  00442C  D003               	goto	i2l5806
 18352  00442E  500E               	movf	i2digitalWrite@p,w,c
 18353  004430  128C               	iorwf	3980,f,c	;volatile
 18354  004432  0012               	return	
 18355  004434                     i2l5806:
 18356                           
 18357                           ;iopin.c: 71: else LATD &= p;
 18358  004434  500E               	movf	i2digitalWrite@p,w,c
 18359  004436  168C               	andwf	3980,f,c	;volatile
 18360                           
 18361                           ;iopin.c: 72: }
 18362  004438  0012               	return	
 18363  00443A                     i2l5808:
 18364  00443A  C007  FFD9         	movff	i2digitalWrite@pin,fsr2l
 18365  00443E  C008  FFDA         	movff	i2digitalWrite@pin+1,fsr2h
 18366  004442  CFDE F00B          	movff	postinc2,??i2_digitalWrite
 18367  004446  CFDD F00C          	movff	postdec2,??i2_digitalWrite+1
 18368                           
 18369                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18370                           ; Switch size 1, requested type "space"
 18371                           ; Number of cases is 1, Range of values is 0 to 0
 18372                           ; switch strategies available:
 18373                           ; Name         Instructions Cycles
 18374                           ; simple_byte            4     3 (average)
 18375                           ;	Chosen strategy is simple_byte
 18376  00444A  500C               	movf	??i2_digitalWrite+1,w,c
 18377  00444C  0A00               	xorlw	0	; case 0
 18378  00444E  A4D8               	btfss	status,2,c
 18379  004450  0012               	return	
 18380                           
 18381                           ; Switch size 1, requested type "space"
 18382                           ; Number of cases is 4, Range of values is 0 to 3
 18383                           ; switch strategies available:
 18384                           ; Name         Instructions Cycles
 18385                           ; simple_byte           13     7 (average)
 18386                           ;	Chosen strategy is simple_byte
 18387  004452  500B               	movf	??i2_digitalWrite,w,c
 18388  004454  0A00               	xorlw	0	; case 0
 18389  004456  B4D8               	btfsc	status,2,c
 18390  004458  D7C8               	goto	i2l5784
 18391  00445A  0A01               	xorlw	1	; case 1
 18392  00445C  B4D8               	btfsc	status,2,c
 18393  00445E  D7CF               	goto	i2l5790
 18394  004460  0A03               	xorlw	3	; case 2
 18395  004462  B4D8               	btfsc	status,2,c
 18396  004464  D7D6               	goto	i2l5796
 18397  004466  0A01               	xorlw	1	; case 3
 18398  004468  A4D8               	btfss	status,2,c
 18399  00446A  0012               	return	
 18400  00446C  D7DC               	goto	i2l5802
 18401  00446E                     __end_ofi2_digitalWrite:
 18402                           	opt stack 0
 18403                           pclatu	equ	0xFFB
 18404                           pclath	equ	0xFFA
 18405                           tblptru	equ	0xFF8
 18406                           tblptrh	equ	0xFF7
 18407                           tblptrl	equ	0xFF6
 18408                           tablat	equ	0xFF5
 18409                           prodh	equ	0xFF4
 18410                           prodl	equ	0xFF3
 18411                           intcon	equ	0xFF2
 18412                           intcon3	equ	0xFF0
 18413                           postinc0	equ	0xFEE
 18414                           fsr0h	equ	0xFEA
 18415                           fsr0l	equ	0xFE9
 18416                           wreg	equ	0xFE8
 18417                           postdec1	equ	0xFE5
 18418                           fsr1h	equ	0xFE2
 18419                           fsr1l	equ	0xFE1
 18420                           indf2	equ	0xFDF
 18421                           postinc2	equ	0xFDE
 18422                           postdec2	equ	0xFDD
 18423                           fsr2h	equ	0xFDA
 18424                           fsr2l	equ	0xFD9
 18425                           status	equ	0xFD8
 18426                           
 18427 ;; *************** function i2___awmod *****************
 18428 ;; Defined at:
 18429 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 18430 ;; Parameters:    Size  Location     Type
 18431 ;;  dividend        2    0[COMRAM] int 
 18432 ;;  divisor         2    2[COMRAM] int 
 18433 ;; Auto vars:     Size  Location     Type
 18434 ;;  __awmod         1    5[COMRAM] unsigned char 
 18435 ;;  __awmod         1    4[COMRAM] unsigned char 
 18436 ;; Return value:  Size  Location     Type
 18437 ;;                  2    0[COMRAM] int 
 18438 ;; Registers used:
 18439 ;;		wreg, status,2, status,0
 18440 ;; Tracked objects:
 18441 ;;		On entry : 0/0
 18442 ;;		On exit  : 0/0
 18443 ;;		Unchanged: 0/0
 18444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18445 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18446 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18448 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18449 ;;Total ram usage:        6 bytes
 18450 ;; Hardware stack levels used:    1
 18451 ;; This function calls:
 18452 ;;		Nothing
 18453 ;; This function is called by:
 18454 ;;		_servoInterruptService
 18455 ;;		i2_fround
 18456 ;;		i2_scale
 18457 ;; This function uses a non-reentrant model
 18458 ;;
 18459                           
 18460                           	psect	text71
 18461  004B86                     __ptext71:
 18462                           	opt stack 0
 18463  004B86                     i2___awmod:
 18464                           	opt stack 20
 18465                           
 18466                           ;incstack = 0
 18467  004B86  0E00               	movlw	0
 18468  004B88  6E06               	movwf	i2___awmod@sign,c
 18469  004B8A  AE02               	btfss	i2___awmod@dividend+1,7,c
 18470  004B8C  D006               	goto	i2l5486
 18471  004B8E  6C01               	negf	i2___awmod@dividend,c
 18472  004B90  1E02               	comf	i2___awmod@dividend+1,f,c
 18473  004B92  B0D8               	btfsc	status,0,c
 18474  004B94  2A02               	incf	i2___awmod@dividend+1,f,c
 18475  004B96  0E01               	movlw	1
 18476  004B98  6E06               	movwf	i2___awmod@sign,c
 18477  004B9A                     i2l5486:
 18478  004B9A  AE04               	btfss	i2___awmod@divisor+1,7,c
 18479  004B9C  D004               	goto	i2l5490
 18480  004B9E  6C03               	negf	i2___awmod@divisor,c
 18481  004BA0  1E04               	comf	i2___awmod@divisor+1,f,c
 18482  004BA2  B0D8               	btfsc	status,0,c
 18483  004BA4  2A04               	incf	i2___awmod@divisor+1,f,c
 18484  004BA6                     i2l5490:
 18485  004BA6  5003               	movf	i2___awmod@divisor,w,c
 18486  004BA8  1004               	iorwf	i2___awmod@divisor+1,w,c
 18487  004BAA  B4D8               	btfsc	status,2,c
 18488  004BAC  D018               	goto	i2l5506
 18489  004BAE  0E01               	movlw	1
 18490  004BB0  6E05               	movwf	i2___awmod@counter,c
 18491  004BB2  D004               	goto	i2l5496
 18492  004BB4                     i2l5494:
 18493  004BB4  90D8               	bcf	status,0,c
 18494  004BB6  3603               	rlcf	i2___awmod@divisor,f,c
 18495  004BB8  3604               	rlcf	i2___awmod@divisor+1,f,c
 18496  004BBA  2A05               	incf	i2___awmod@counter,f,c
 18497  004BBC                     i2l5496:
 18498  004BBC  AE04               	btfss	i2___awmod@divisor+1,7,c
 18499  004BBE  D7FA               	goto	i2l5494
 18500  004BC0                     i2l5498:
 18501  004BC0  5003               	movf	i2___awmod@divisor,w,c
 18502  004BC2  5C01               	subwf	i2___awmod@dividend,w,c
 18503  004BC4  5004               	movf	i2___awmod@divisor+1,w,c
 18504  004BC6  5802               	subwfb	i2___awmod@dividend+1,w,c
 18505  004BC8  A0D8               	btfss	status,0,c
 18506  004BCA  D004               	goto	i2l5502
 18507  004BCC  5003               	movf	i2___awmod@divisor,w,c
 18508  004BCE  5E01               	subwf	i2___awmod@dividend,f,c
 18509  004BD0  5004               	movf	i2___awmod@divisor+1,w,c
 18510  004BD2  5A02               	subwfb	i2___awmod@dividend+1,f,c
 18511  004BD4                     i2l5502:
 18512  004BD4  90D8               	bcf	status,0,c
 18513  004BD6  3204               	rrcf	i2___awmod@divisor+1,f,c
 18514  004BD8  3203               	rrcf	i2___awmod@divisor,f,c
 18515  004BDA  2E05               	decfsz	i2___awmod@counter,f,c
 18516  004BDC  D7F1               	goto	i2l5498
 18517  004BDE                     i2l5506:
 18518  004BDE  5006               	movf	i2___awmod@sign,w,c
 18519  004BE0  B4D8               	btfsc	status,2,c
 18520  004BE2  D004               	goto	i2l5510
 18521  004BE4  6C01               	negf	i2___awmod@dividend,c
 18522  004BE6  1E02               	comf	i2___awmod@dividend+1,f,c
 18523  004BE8  B0D8               	btfsc	status,0,c
 18524  004BEA  2A02               	incf	i2___awmod@dividend+1,f,c
 18525  004BEC                     i2l5510:
 18526  004BEC  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 18527  004BF0  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 18528  004BF4  0012               	return	
 18529  004BF6                     __end_ofi2___awmod:
 18530                           	opt stack 0
 18531                           pclatu	equ	0xFFB
 18532                           pclath	equ	0xFFA
 18533                           tblptru	equ	0xFF8
 18534                           tblptrh	equ	0xFF7
 18535                           tblptrl	equ	0xFF6
 18536                           tablat	equ	0xFF5
 18537                           prodh	equ	0xFF4
 18538                           prodl	equ	0xFF3
 18539                           intcon	equ	0xFF2
 18540                           intcon3	equ	0xFF0
 18541                           postinc0	equ	0xFEE
 18542                           fsr0h	equ	0xFEA
 18543                           fsr0l	equ	0xFE9
 18544                           wreg	equ	0xFE8
 18545                           postdec1	equ	0xFE5
 18546                           fsr1h	equ	0xFE2
 18547                           fsr1l	equ	0xFE1
 18548                           indf2	equ	0xFDF
 18549                           postinc2	equ	0xFDE
 18550                           postdec2	equ	0xFDD
 18551                           fsr2h	equ	0xFDA
 18552                           fsr2l	equ	0xFD9
 18553                           status	equ	0xFD8
 18554                           pclatu	equ	0xFFB
 18555                           pclath	equ	0xFFA
 18556                           tblptru	equ	0xFF8
 18557                           tblptrh	equ	0xFF7
 18558                           tblptrl	equ	0xFF6
 18559                           tablat	equ	0xFF5
 18560                           prodh	equ	0xFF4
 18561                           prodl	equ	0xFF3
 18562                           intcon	equ	0xFF2
 18563                           intcon3	equ	0xFF0
 18564                           postinc0	equ	0xFEE
 18565                           fsr0h	equ	0xFEA
 18566                           fsr0l	equ	0xFE9
 18567                           wreg	equ	0xFE8
 18568                           postdec1	equ	0xFE5
 18569                           fsr1h	equ	0xFE2
 18570                           fsr1l	equ	0xFE1
 18571                           indf2	equ	0xFDF
 18572                           postinc2	equ	0xFDE
 18573                           postdec2	equ	0xFDD
 18574                           fsr2h	equ	0xFDA
 18575                           fsr2l	equ	0xFD9
 18576                           status	equ	0xFD8
 18577                           
 18578                           	psect	rparam
 18579  0000                     pclatu	equ	0xFFB
 18580                           pclath	equ	0xFFA
 18581                           tblptru	equ	0xFF8
 18582                           tblptrh	equ	0xFF7
 18583                           tblptrl	equ	0xFF6
 18584                           tablat	equ	0xFF5
 18585                           prodh	equ	0xFF4
 18586                           prodl	equ	0xFF3
 18587                           intcon	equ	0xFF2
 18588                           intcon3	equ	0xFF0
 18589                           postinc0	equ	0xFEE
 18590                           fsr0h	equ	0xFEA
 18591                           fsr0l	equ	0xFE9
 18592                           wreg	equ	0xFE8
 18593                           postdec1	equ	0xFE5
 18594                           fsr1h	equ	0xFE2
 18595                           fsr1l	equ	0xFE1
 18596                           indf2	equ	0xFDF
 18597                           postinc2	equ	0xFDE
 18598                           postdec2	equ	0xFDD
 18599                           fsr2h	equ	0xFDA
 18600                           fsr2l	equ	0xFD9
 18601                           status	equ	0xFD8
 18602                           
 18603                           	psect	temp
 18604  00007F                     btemp:
 18605                           	opt stack 0
 18606  00007F                     	ds	1
 18607  0000                     int$flags	set	btemp
 18608                           pclatu	equ	0xFFB
 18609                           pclath	equ	0xFFA
 18610                           tblptru	equ	0xFF8
 18611                           tblptrh	equ	0xFF7
 18612                           tblptrl	equ	0xFF6
 18613                           tablat	equ	0xFF5
 18614                           prodh	equ	0xFF4
 18615                           prodl	equ	0xFF3
 18616                           intcon	equ	0xFF2
 18617                           intcon3	equ	0xFF0
 18618                           postinc0	equ	0xFEE
 18619                           fsr0h	equ	0xFEA
 18620                           fsr0l	equ	0xFE9
 18621                           wreg	equ	0xFE8
 18622                           postdec1	equ	0xFE5
 18623                           fsr1h	equ	0xFE2
 18624                           fsr1l	equ	0xFE1
 18625                           indf2	equ	0xFDF
 18626                           postinc2	equ	0xFDE
 18627                           postdec2	equ	0xFDD
 18628                           fsr2h	equ	0xFDA
 18629                           fsr2l	equ	0xFD9
 18630                           status	equ	0xFD8


Data Sizes:
    Strings     398
    Constant    174
    Data        46
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    122     126
    BANK0           128    127     128
    BANK1           256     50     135
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK1[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_23(CODE[17]), STR_22(CODE[18]), STR_21(CODE[17]), STR_20(CODE[18]), 
		 -> STR_19(CODE[17]), STR_18(CODE[19]), STR_17(CODE[17]), STR_16(CODE[18]), 
		 -> STR_15(CODE[17]), STR_14(CODE[18]), STR_13(CODE[17]), STR_12(CODE[18]), 
		 -> STR_11(CODE[8]), STR_10(CODE[11]), STR_9(CODE[25]), STR_8(CODE[15]), 
		 -> STR_7(CODE[17]), STR_6(CODE[20]), STR_5(CODE[15]), STR_4(CODE[14]), 
		 -> STR_3(CODE[20]), STR_2(CODE[17]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    initServo@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    servos	PTR int [4] size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 4
		 -> AA_float(BANK1[4]), redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 
		 -> cylinderMotor(BANK1[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 4
		 -> padPin2(BANK1[4]), padPin1(BANK1[4]), 

    pause@message	PTR unsigned char  size(2) Largest target is 25
		 -> STR_9(CODE[25]), STR_8(CODE[15]), STR_7(CODE[17]), STR_6(CODE[20]), 
		 -> STR_4(CODE[14]), STR_3(CODE[20]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _service in COMRAM

    _service->i2_printf
    i2_printf->i2___ftsub
    i2_scale->i2___ftmul
    i2_lcdNewline->i2_lcdInst
    i2_fround->i2___ftmul
    i2___wmul->i2___awdiv
    i2___ftmul->i2___wmul
    i2___awdiv->i2___awmod
    i2___lltoft->i2___ftpack
    i2___llmod->i2___lldiv
    i2___fttol->i2_scale
    i2___ftsub->i2___ftadd
    i2___ftadd->i2_fround
    i2_lcdClear->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    _servoInterruptService->i2_digitalWrite
    i2_startTimer->i2___awmod
    i2_digitalWrite->i2___awmod

Critical Paths under _main in BANK0

    _main->_initServo
    _sortBattery->_setAngle
    _pause->_printf
    _printf->___fttol
    _scale->___ftmul
    _lcdNewline->_lcdInst
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___ftadd
    _lcdClear->_lcdInst
    _lcdHome->_lcdInst
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftdiv->___altoft
    ___ftadd->_fround
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    ___almod->___aldiv

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery
    _sortBattery->_printf
    _pause->_printf

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0  202277
                                            126 BANK0      1     1      0
                                             46 BANK1      4     4      0
                            ___aldiv
                            ___almod
                       _digitalWrite
                            _initLCD
                          _initServo
                          _initTimer
                           _lcdClear
                            _lcdHome
                           _pinSetup
                             _printf
                        _sortBattery
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         18    18      0  130269
                                            118 BANK0      2     2      0
                                             30 BANK1     16    16      0
                           ___altoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                         _analogRead
                        _digitalRead
                       _digitalWrite
                           _lcdClear
                              _pause
                             _printf
                         _readKeypad
                           _setAngle
 ---------------------------------------------------------------------------------
 (2) _pause                                                2     0      2   49779
                                            101 BANK0      2     0      2
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _printf                                              47    37     10   49215
                                             85 BANK0     16     6     10
                                              0 BANK1     30    30      0
                            ___aldiv (ARG)
                            ___almod (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   11138
                                             48 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     292
                                              4 BANK0      1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   10940
                                             48 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2641
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1676
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1580
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     431
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     591
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2281
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     671
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     802
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3899
                                             70 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     109
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1032
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (3) _lcdClear                                             0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     5      4    1146
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          4     2      2     238
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     150
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdHome                                              0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initServo                                            8     4      4   19357
                                            118 BANK0      8     4      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _startTimer                                           8     2      6     690
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   18003
                                            108 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   16949
                                             85 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     508
                                             70 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4752
                                             33 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    2914
                                             18 BANK0     15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3602
                                             58 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2367
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2606
                                              8 BANK0     10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2148
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            4     2      2     214
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              4 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     135
                                              2 BANK0      2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     424
                                             14 BANK0     10     2      8
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     556
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             19    19      0   23753
                                            103 COMRAM    19    19      0
              _servoInterruptService
                         i2_lcdClear
                           i2_printf
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            41    37      4   21657
                                             63 COMRAM    40    36      4
                          i2___awdiv
                          i2___ftadd
                           i2___ftge
                          i2___ftmul
                          i2___ftneg
                          i2___ftsub
                          i2___fttol
                          i2___lldiv
                          i2___llmod
                         i2___lltoft
                           i2___wmul
                       i2__div_to_l_
                      i2__tdiv_to_l_
                           i2_fround
                          i2_isdigit
                            i2_putch
                            i2_scale
 ---------------------------------------------------------------------------------
 (10) i2_scale                                            13    10      3    4789
                                             35 COMRAM     7     4      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     292
                                              4 COMRAM     1     1      0
                       i2_lcdNewline
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNewline                                        0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2_fround                                           16    13      3    4591
                                             35 COMRAM    10     7      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4    1041
                                             14 COMRAM     6     2      4
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftmul                                          15     9      6    1519
                                             20 COMRAM    15     9      6
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
                         i2___ftpack
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___awdiv                                           8     4      4     820
                                              6 COMRAM     8     4      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2__tdiv_to_l_                                      15     9      6     355
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (10) i2__div_to_l_                                       12     6      6     481
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (10) i2___lltoft                                          9     5      4     560
                                              8 COMRAM     9     5      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (10) i2___llmod                                           9     1      8     367
                                             13 COMRAM     9     1      8
                          i2___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___lldiv                                          13     5      8     370
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (10) i2___fttol                                          15    11      4     330
                                             42 COMRAM    15    11      4
                          i2___ftmul (ARG)
                            i2_scale (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___ftsub                                           6     0      6    1528
                                             57 COMRAM     6     0      6
                          i2___ftadd
                         i2___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftadd                                          12     6      6    1409
                                             45 COMRAM    12     6      6
                         i2___ftpack
                           i2_fround (ARG)
 ---------------------------------------------------------------------------------
 (12) i2___ftpack                                          8     3      5     465
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (10) i2___ftneg                                           3     0      3      71
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (10) i2___ftge                                            9     3      6     292
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (9) i2_lcdClear                                           0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (12) i2_lcdInst                                           2     2      0     135
                                              2 COMRAM     2     2      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                                4     4      0    1636
                                             15 COMRAM     4     4      0
                          i2___awmod
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) i2_startTimer                                         8     2      6     258
                                              6 COMRAM     8     2      6
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     5      4     458
                                              6 COMRAM     9     5      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___awmod                                           6     2      4     920
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
   ___almod
     ___aldiv (ARG)
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _initTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _lcdHome
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___aldiv (ARG)
     ___almod (ARG)
       ___aldiv (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _lcdClear
       _lcdInst
         _lcdNibble
     _pause
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _printf
       ___aldiv (ARG)
       ___almod (ARG)
         ___aldiv (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _startTimer

 _service (ROOT)
   _servoInterruptService
     i2___awmod
     i2_digitalWrite
       i2___awmod (ARG)
     i2_startTimer
       i2___awmod (ARG)
   i2_lcdClear
     i2_lcdInst
       i2_lcdNibble
   i2_printf
     i2___awdiv
       i2___awmod (ARG)
     i2___ftadd
       i2___ftpack
       i2_fround (ARG)
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
     i2___ftge
     i2___ftmul
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
       i2___ftpack (ARG)
       i2___wmul (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     i2___ftneg
     i2___ftsub
       i2___ftadd
         i2___ftpack
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___lltoft (ARG)
         i2___ftpack
     i2___fttol
       i2___ftmul (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2_scale (ARG)
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
     i2___lldiv
     i2___llmod
       i2___lldiv (ARG)
     i2___lltoft
       i2___ftpack
     i2___wmul
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
     i2__div_to_l_
     i2__tdiv_to_l_
     i2_fround
       i2___awdiv
         i2___awmod (ARG)
       i2___awmod
       i2___ftmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     i2_isdigit
     i2_putch
       i2_lcdNewline
         i2_lcdInst
           i2_lcdNibble
       i2_lcdNibble
     i2_scale
       i2___awdiv
         i2___awmod (ARG)
       i2___awmod
       i2___ftmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
   i2_startTimer
     i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     32      87       7       52.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     7F      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     7A      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     185      34        0.0%
DATA                 0      0     185       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Mar 25 20:37:51 2017

                  ___altoft@exp 0090                               _n 007D                   ___altoft@sign 0091  
                   _sortBattery 1FF0                    ___awdiv@sign 008B             ___wmul@multiplicand 0090  
                   __CFG_BORV$3 000000                      i2___ftpack 45E8                    __CFG_CP0$OFF 000000  
                  __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000  
                   __CFG_OSC$HS 000000                _redirectingServo 015C                    ___ftadd@exp1 00C5  
                  ___ftadd@exp2 00C4                      i2___lltoft 4CC2                    ___ftadd@sign 00C3  
                           l222 507E                             l142 22AC                             l126 2E38  
                           l118 2D50                             l320 4F36                             l401 4D20  
                           l225 508C                             l403 4D2C                             l404 4D38  
                           l186 5110                             l295 390E                             l394 4DB6  
                           l734 0782                             l743 0970                             l695 0902  
                           l991 314E                    __CFG_CPB$OFF 000000                             _PEN 007E2A  
                  __CFG_CPD$OFF 000000                             _SEN 007E28                    ___awmod@sign 0085  
                           wreg 000FE8                      i2_lcdClear 5206                    __CFG_LVP$OFF 000000  
                  ___ftdiv@cntr 009B                    ___ftdiv@sign 00A0                    __CFG_WDT$OFF 000000  
                          l1023 3C30                            l1120 5042                            l1050 26DA  
                          l1052 2702                            l1061 27D8                            l1070 2802  
                          l1046 26A0                            l1081 353A                            l1170 45D6  
                          l1180 485E                            l1095 2FC6                            l1088 2F02  
                          l1089 2F46                            l5000 4570                            l5020 4808  
                          l5030 4A9A                            l5110 0100                            l5102 0088  
                          l4400 3BE4                            l5008 45C4                            l5024 484C  
                          l5016 47F2                            l5032 4AAA                            l5120 0138  
                          l5112 0106                            l4410 3C3A                            l4402 3C14  
                          l5018 4802                            l5202 0482                            l5130 0176  
                          l5122 0144                            l5114 010C                            l4404 3C22  
                          l5300 08F4                            l5212 04E0                            l5132 0190  
                          l5124 014A                            l5116 0112                            l4510 333A  
                          l5230 0592                            l5126 0162                            l5142 01C0  
                          l4416 3C56                            l4504 3300                            l5216 0546  
                          l5136 01A8                            l5144 0204                            l4442 26E8  
                          l4610 46E8                            l4602 46C2                            l5402 0C7A  
                          l5322 0992                            l5250 065C                            l5234 05E2  
                          l5218 054C                            l5090 0038                            l6210 217E  
                          l6300 3B2A                            l4436 26AE                            l4524 3388  
                          l5404 0C8C                            l5340 0A08                            l5308 092A  
                          l5260 06A6                            l5244 0638                            l5092 004E  
                          l4470 2790                            l4534 33C6                            l4622 472E  
                          l4614 470C                            l4606 46D6                            l4702 1B14  
                          l5406 0C94                            l5342 0A0E                            l5326 09BC  
                          l5254 066A                            l5238 060A                            l5190 03F4  
                          l5182 0380                            l5174 0310                            l5158 025E  
                          l5086 0022                            l6222 2254                            l6304 3B46  
                          l6320 4086                            l4392 3B86                            l4464 2768  
                          l4448 26F8                            l4528 33A6                            l4560 44A0  
                          l4608 46E2                            l4720 50C8                            l5328 09C2  
                          l5272 0750                            l5256 067E                            l5248 0646  
                          l5192 040A                            l5096 0058                            l5408 0CAA  
                          l6232 22B6                            l4394 3B94                            l4466 2776  
                          l4458 273A                            l4538 33E4                            l4730 2E74  
                          l4570 44D0                            l4554 448A                            l4618 471A  
                          l5370 0ADC                            l5274 0764                            l5266 0734  
                          l5186 03AE                            l6226 2280                            l6234 22DE  
                          l6340 412A                            l6332 40FC                            l6324 40A2  
                          l6316 406E                            l4396 3BC4                            l4388 3B72  
                          l4484 282C                            l4476 27BE                            l4468 2784  
                          l5700 3D14                            l4708 1BDA                            l5364 0A9A  
                          l5356 0A54                            l5284 07AA                            l5268 0742  
                          l5188 03C4                            l6326 40B2                            l4494 287A  
                          l4478 27CC                            l4830 3118                            l4814 30CC  
                          l4806 3078                            l4566 44BE                            l4582 450E  
                          l4670 25F0                            l4662 250C                            l5382 0B24  
                          l5358 0A66                            l5294 08D8                            l5278 0786  
                          l5198 0454                            l6272 3A62                            l6328 40B8  
                          l6336 410E                            l5640 4D7A                            l5704 3D28  
                          l4736 2EAE                            l4568 44CA                            l5384 0B30  
                          l5392 0B70                            l5376 0B08                            l5368 0AD2  
                          l5296 08E6                            l5288 07FC                            l5634 4D70  
                          l4850 4774                            l5714 4228                            l5722 42A6  
                          l5706 3D30                            l4930 435E                            l4906 4DDE  
                          l4826 3104                            l4770 2F90                            l4586 4522  
                          l4578 4500                            l4690 198A                            l5394 0B80  
                          l6284 3AAE                            l5652 4D8E                            l4836 3134  
                          l4684 18C4                            l5396 0C04                            l5388 0B4A  
                          l6286 3ABE                            l6278 3A80                            l5646 4D86  
                          l4918 4F00                            l4862 345E                            l4950 35AA  
                          l5718 427E                            l5742 3860                            l5734 37E8  
                          l4926 431E                            l4838 3144                            l4766 2F7C  
                          l4598 46B2                            l4694 19B0                            l6296 3B18  
                          l6288 3AC4                            l4848 4764                            l5752 38D8  
                          l4936 43A2                            l4792 3024                            l4776 2FAC  
                          l5666 4D44                            l5746 389C                            l5738 3824  
                          l5682 3CC0                            l4786 2FFE                            l4778 2FBC  
                          l4868 3498                            l4980 367C                            l4972 3650  
                          l5692 3CF0                            l4982 3686                            l5694 3CF8  
                          l5686 3CD4                            l4888 34F8                            l4968 363C  
                          l5688 3CDC                            l4986 36A2                            l4978 366C  
                          l5698 3D0C                            l4996 455A                            l4998 456A  
                          l6694 2E1C                            l6688 2D66                            _EEIF 007D0C  
         __size_ofi2__div_to_l_ 0128                            STR_1 FFF7                            STR_2 FFA7  
                          STR_3 FE9E                            STR_4 FFD6                            STR_5 FFC7  
                          STR_6 FE8A                            STR_7 FF96                            STR_8 FFB8  
                          STR_9 FE71                            _LATA 000F89                            _LATB 000F8A  
                          _LATC 000F8B                            _LATD 000F8C                            _LATE 000F8D  
                          u4301 3316                            u4071 264E                            u4081 266C  
                  printf@tmpval 010C                            u4281 32DC                            u5170 02A4  
                          _PEIE 007F96                            u5175 0298                            u4561 2E50  
                          u6154 380C                            u6074 3C9E                            u6155 3806  
                          u6075 3C96                            u6164 3848                            _RCEN 007E2B  
                          u4741 343A                            u6165 3842                            u4581 2E8A  
                          u6174 3884                            u5390 077A                            u6175 387E  
                          u6184 38C0                            u4761 3474                            u6185 38BA  
                          u4851 3586                            u4870 35D0                            u4875 35C6  
                          u7807 5114                            u7817 4E5C                            u7827 4E92  
                          u7837 50DA                            u7847 50F0                            u7857 4B2E  
                          u7867 4B3C                            u7787 2E14                            u7877 4B6C  
                          u7797 21A0                            u7887 4B7A                            _RSEN 007E29  
                          _main 2C92                            _curr 007B                    ___ftpack@arg 0080  
                          _keys FE59                    ___ftpack@exp 0083                            _time 0174  
                          fsr0h 000FEA                            fsr1h 000FE2                            fsr2h 000FDA  
                          fsr0l 000FE9                            indf2 000FDF                            fsr1l 000FE1  
                          fsr2l 000FD9                            btemp 007F                    i2___ftadd@f1 002E  
                  i2___ftadd@f2 0031                    i2___ftge@ff1 0001                    i2___ftge@ff2 0004  
                          prodh 000FF4                            prodl 000FF3                            start 000E  
                 __CFG_IESO$OFF 000000                 __end_ofi2_scale 1FF0                    i2___ftneg@f1 0001  
               __end_ofi2_putch 5190                   __CFG_MCLRE$ON 000000                    ___ftmul@cntr 00AE  
                  i2___ftmul@f1 0015                    i2___ftmul@f2 0018                    ___param_bank 000000  
                  ___ftmul@sign 00AF                    i2___ftsub@f1 003A                    i2___ftsub@f2 003D  
                  i2___fttol@f1 002B                     i2_lcdNibble 4C5C                    ___fttol@exp1 00D4  
                  i2___lltoft@c 0009                    ___fttol@lval 00D0            __end_ofi2_startTimer 4E54  
          __end_of_angleToPulse 32C6                 __end_of___aldiv 3B58                 __end_of___almod 413C  
                         ?_main 0001                           _ACKEN 007E2C                           _ACKDT 007E2D  
               __end_of___awdiv 452C                           _EEADR 000FA9                 __end_of___ftadd 28A0  
                         STR_10 FFE4                           STR_11 FFEF                           STR_20 FEFB  
                         STR_12 FED7                           STR_13 FF85                           STR_21 FF30  
                         STR_22 FF0D                           STR_14 FEC5                           STR_23 FF74  
                         STR_15 FF52                           STR_24 FF1F                           STR_16 FEE9  
                         STR_17 FF41                           STR_18 FEB2                           STR_19 FF63  
               __end_of___awmod 4738                 __end_of___ftdiv 3570         ??_servoInterruptService 0010  
               __end_of___ftneg 5050                 __end_of___lldiv 45E8                 __end_of___ftmul 3424  
                         _T0CON 000FD5                 ___awdiv@divisor 0088                           _T1CON 000FCD  
               __end_of___llmod 4870                 __end_of___ftsub 4E08                 __end_of___fttol 36B4  
                         _T3CON 000FB1                           i2l401 4E0A                           i2l162 41D6  
                         i2l403 4E16                           i2l404 4E22                           i2l186 517E  
                         i2l734 12DC                           i2l743 149C                           i2l695 143C  
               ___awdiv@counter 008A                           i2l991 3A2C                           _TMR0H 000FD7  
                         _TMR1H 000FCF                           _TMR0L 000FD6                           _TMR3H 000FB3  
                         _TMR1L 000FCE                           _TMR3L 000FB2                           _PORTA 000F80  
                         _PORTB 000F81                           _PORTC 000F82                           _PORTD 000F83  
                  i2__div_to_l_ 3916                           _TRISA 000F92                           _TRISB 000F93  
                         _TRISC 000F94                           _TRISD 000F95                           _TRISE 000F96  
                 __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                 __end_of_lcdHome 51FE  
                  ___lltoft@exp 0090                   _conveyorServo 0148                 __end_of_lcdInst 50FC  
                __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000  
                __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000           __size_ofi2_lcdNewline 0008  
                 __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000  
               __end_of_initLCD 4E9E                  __CFG_EBTRB$OFF 000000                      i2isdigit@c 0003  
                 ___awtoft@sign 008B                           _angle 0132                 __end_of_dpowers FDEB  
                    i2scale@scl 002A                           _count 0183                           _scale 1752  
               __end_of_isdigit 50D2                           _pause 51D0                   ___ftpack@sign 0084  
                         _pulse 0160                           _putch 50FC                    main@prevTime 012E  
                         pclath 000FFA                           tablat 000FF5                __end_ofi2___ftge 4900  
               __end_of_service 4212                __end_ofi2___wmul 514A                           status 000FD8  
              __end_ofi2_fround 2AE6              __size_ofi2___awdiv 0084              __size_ofi2___ftadd 01AC  
            __size_ofi2___awmod 0070                  __CFG_PBADEN$ON 000000                   i2printf@width 0063  
            __size_ofi2___ftneg 0024              __size_ofi2___lldiv 0082              __size_ofi2___ftmul 00F4  
            __size_ofi2___llmod 0066              __size_ofi2___ftsub 0040              __size_ofi2___fttol 00F4  
              __end_ofi2_printf 1752            __end_of_digitalWrite 3D68                 __initialization 4E9E  
             i2___lldiv@divisor 0005              __size_ofi2_lcdInst 0022                    __end_of_main 2E3A  
             i2___lldiv@counter 000D                    __end_of_keys FE6A                   i2___ftmul@exp 001E  
                    i2printf@ap 0052                      i2printf@cp 004E              __size_ofi2_isdigit 001E  
                   ?i2___ftpack 0001                    i2_lcdNewline 51FE                     ?i2___lltoft 0009  
                        ??_main 00FE                   ___fttol@sign1 00CF                   __activetblptr 000002  
          __size_of_digitalRead 0130            __size_of__tdiv_to_l_ 019E                 i2digitalWrite@p 000E  
                   ?i2_lcdClear 0001                          _ADCON0 000FC2                          _ADCON1 000FC1  
                        _ADCON2 000FC0                __end_of___altoft 47D6                ___llmod@dividend 008D  
                        ?_scale 00B0                          _ADRESH 000FC4                          _EEADRH 000FAA  
                        _ADRESL 000FC3                          _EEDATA 000FA8                          ?_pause 00E5  
                        _EECON1 000FA6                          _EECON2 000FA7                ___awdiv@dividend 0086  
               i2lcdNibble@data 0002                __end_of___awtoft 4F28                          ?_putch 0001  
              __end_of___ftpack 3C64                 i2lcdNibble@temp 0001                __end_of___lltoft 4B0E  
                        _INT0IE 007F94                          _INT0IF 007F91                          _INT1IE 007F83  
                        _INT1IF 007F80                    sortBattery@V 012B                          i2l1023 4676  
                        i2l1120 5160                          i2l1050 2B54                          i2l1061 2C04  
                        i2l1070 2C20                          i2l1046 2B2A                          i2l1170 4A80  
                        i2l1180 4C4A                          i2l1095 37D4                          i2l1088 3746  
                        i2l1089 376E                          i2l6000 37C2                          i2l5050 45F8  
                        i2l6002 37CE                          i2l6012 48D0                          i2l6100 4A3E  
                        i2l5062 4644                          i2l5054 4606                          i2l6030 4FC0  
                        i2l6110 4A72                          i2l6102 4A42                          i2l6008 48A0  
                        i2l5064 4662                          i2l5056 4610                          i2l6040 3F82  
                        i2l6120 4C14                          i2l6018 48FC                          i2l5066 466C  
                        i2l5058 462E                          i2l6122 4C18                          i2l6132 4CC8  
                        i2l5510 4BEC                          i2l5502 4BD4                          i2l6070 401C  
                        i2l6062 3FF8                          i2l6126 4C3C                          i2l6118 4C08  
                        i2l6134 4CD4                          i2l6072 4022                          i2l5506 4BDE  
                        i2l5522 2B38                          i2l6058 3FE8                          i2l5442 49A0  
                        i2l5610 3EE4                          i2l6076 4038                          i2l6068 4010  
                        i2l5620 3F0C                          i2l6500 11A8                          i2l6420 0EAC  
                        i2l6404 0E1C                          i2l5550 2BB4                          i2l5454 49C6  
                        i2l5470 49F8                          i2l5614 3EF4                          i2l6510 11D4  
                        i2l6406 0E5C                          i2l5800 4420                          i2l5552 2BBE  
                        i2l5544 2B92                          i2l5528 2B62                          i2l5456 49CE  
                        i2l5448 49B0                          i2l5624 3F1C                          i2l6088 51C8  
                        i2l6512 11E4                          i2l6352 0CE8                          i2l5490 4BA6  
                        i2l5802 4426                          i2l5570 2C3C                          i2l5562 2BF2  
                        i2l5554 2BC8                          i2l6098 4A32                          i2l5474 4A06  
                        i2l5466 49EE                          i2l5458 49D2                          i2l6602 151E  
                        i2l6530 12AC                          i2l6522 121A                          i2l6506 11C8  
                        i2l6450 0FD4                          i2l6354 0CFA                          i2l5580 2C6C  
                        i2l5564 2BFC                          i2l5556 2BD0                          i2l5900 3952  
                        i2l6604 1522                          i2l6620 156A                          i2l6540 12E0  
                        i2l6516 11F0                          i2l6460 1046                          i2l6452 1002  
                        i2l6444 0FA0                          i2l6436 0F3C                          i2l6372 0D8C  
                        i2l6364 0D2E                          i2l6348 0CD6                          i2l5494 4BB4  
                        i2l5486 4B9A                          i2l5806 4434                          i2l5822 4E2E  
                        i2l5590 3E8A                          i2l6630 15B0                          i2l6550 1348  
                        i2l6534 12B8                          i2l6518 11FE                          i2l6454 1012  
                        i2l6382 0DAE                          i2l6374 0D90                          i2l6358 0D00  
                        i2l6710 41C6                          i2l5496 4BBC                          i2l5808 443A  
                        i2l6632 15B8                          i2l6536 12C6                          i2l6528 12A2  
                        i2l6480 1126                          i2l6464 106A                          i2l6448 0FC4  
                        i2l6392 0DE2                          i2l6384 0DB8                          i2l6376 0D94  
                        i2l5498 4BC0                          i2l5922 39C4                          i2l5914 3994  
                        i2l6650 1608                          i2l6626 158C                          i2l6618 155A  
                        i2l6570 1460                          i2l6562 1432                          i2l6546 12F8  
                        i2l6474 10BE                          i2l6394 0DF6                          i2l6386 0DBE  
                        i2l6378 0D98                          i2l5596 3EB2                          i2l5860 1D34  
                        i2l6644 15EC                          i2l6556 141C                          i2l6492 115E  
                        i2l6388 0DD0                          i2l5790 43FE                          i2l5934 39F2  
                        i2l5846 2AA6                          i2l5838 29E6                          i2l5870 1DFC  
                        i2l6646 15F4                          i2l6654 1622                          i2l6638 15D6  
                        i2l6590 14E6                          i2l6558 1426                          i2l6478 1122  
                        i2l6398 0E0A                          i2l6670 1736                          i2l5784 43EA  
                        i2l5944 3A1A                          i2l5960 370C                          i2l6656 162E  
                        i2l6664 1710                          i2l6584 14BC                          i2l6496 118E  
                        i2l5794 440C                          i2l5946 3A26                          i2l5938 3A02  
                        i2l5954 36E0                          i2l5866 1DD8                          i2l6658 16A6  
                        i2l6666 1720                          i2l5796 4412                          i2l5788 43F8  
                        i2l5884 1FCC                          i2l6668 1726                          i2l6588 14E2  
                        i2l5894 3934                          i2l5990 379A                          i2l5878 1F28  
                        i2l5994 37AA                          u600_41 3E72                       ??i2_scale 0027  
                        u602_41 3E9A                          u642_41 36C4                          u580_41 2B0A  
                        u644_41 36F0                          u656_41 3F66                          u579_41 2AF6  
                        _TMR0IE 007F95                          _TMR0IF 007F92                       ??i2_putch 0005  
                        _TMR1IE 007CE8                          _TMR1IF 007CF0                          _TMR3IE 007D01  
                        _SSPADD 000FC8                          _TRISC3 007CA3                          _TRISC4 007CA4  
                        _SSPBUF 000FC9          __size_ofi2__tdiv_to_l_ 0132                __end_of_lcdClear 51F6  
             _angleToPulse$1336 00E5                  __CFG_XINST$OFF 000000                    i2_scale$1534 0027  
              __end_of__powers_ FE39                          ___ftge 42DE                       ??___aldiv 0088  
                     ??___almod 0096                          ___wmul 4FEA                       ??___awdiv 008A  
                     ??___ftadd 00C0                  __CFG_STVREN$ON 000000                       ??___awmod 0084  
                     ??___ftdiv 0098                       ??___ftneg 0083                       ??___lldiv 0088  
                     ??___ftmul 00A7                       ??___llmod 0095                       ??___ftsub 00CC  
                     ??___fttol 00CA                          _fround 238C                          clear_0 4EC4  
              ___awdiv@quotient 008C                          _period 013A                 ___awmod@divisor 0082  
                     ??_lcdHome 0084                 ___awmod@counter 0084                          _servos 0168  
                     ??_lcdInst 0082                          _printf 0012                __end_of_pinSetup 4FAA  
              __end_of_setAngle 42DE                  i2___awdiv@sign 000C               analogRead@channel 0080  
         ___ftmul@f3_as_product 00AB                       ??_initLCD 0084                       ??_isdigit 0080  
             __end_ofi2___awdiv 4A10               __end_ofi2___ftadd 2C92               __end_ofi2___awmod 4BF6  
                i2___ftadd@exp1 0039                  i2___ftadd@exp2 0038               __end_ofi2___ftneg 516E  
             __end_ofi2___lldiv 4A92               __end_ofi2___ftmul 3F56                   setAngle@angle 00EE  
             __end_ofi2___llmod 4C5C               __end_ofi2___ftsub 4FEA               __end_ofi2___fttol 404A  
                i2___ftadd@sign 0037                    __mediumconst FDC2                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                   setAngle@motor 00EC  
                     ??_service 0068                  i2___awmod@sign 0006               __end_ofi2_lcdInst 51B2  
             __end_ofi2_isdigit 51D0                      __accesstop 0080         __end_of__initialization 4ED6  
                    ___altoft@c 0088                      ___ftadd@f1 00BA                      ___ftadd@f2 00BD  
           __size_ofi2___ftpack 00AE                  i2printf@tmpval 0056                      ___ftge@ff1 0080  
                    ___ftge@ff2 0083             __size_ofi2___lltoft 005C                   ___rparam_used 000001  
                    ___ftdiv@f1 0092                      ___ftdiv@f2 0095                      ___ftdiv@f3 009C  
                    ___ftneg@f1 0080                      ___awtoft@c 0088                  i2___ftpack@arg 0001  
         __size_ofi2_startTimer 004C              i2__tdiv_to_l_@exp1 000F               i2___llmod@divisor 0012  
                i2___ftpack@exp 0004              i2__tdiv_to_l_@cntr 000E               i2___llmod@counter 0016  
            i2__tdiv_to_l_@quot 000A                      ___ftmul@f1 00A1                      ___ftmul@f2 00A4  
                    ___ftsub@f1 00C6                      ___ftsub@f2 00C9                      ___fttol@f1 00C6  
          __end_of_happynewyear FE71                  __pcstackCOMRAM 0001              i2___lldiv@dividend 0001  
         __size_of_angleToPulse 0166             __size_ofi2_lcdClear 0008                    __pidataBANK1 5050  
                    ___lltoft@c 0088                   _cylinderMotor 014C                  i2___ftmul@cntr 0022  
                 __end_of_scale 1C00                    ?_sortBattery 0001                   __end_of_pause 51E6  
                i2___ftmul@sign 0023                   __end_of_putch 5124                     i2printf@idx 004D  
                   i2printf@len 0050                     i2printf@exp 005A                     i2printf@val 005C  
                i2___fttol@exp1 0039                  i2___fttol@lval 0035                       ?i2___ftge 0001  
                     ?i2___wmul 000F                   i2__tdiv_to_l_ 36B4              __size_of_lcdNibble 0078  
                    __div_to_l_ 2FD8                     i2putch@data 0005                       ?i2_fround 0024  
                     ?i2_printf 0040                 __div_to_l_@exp1 008B                 __div_to_l_@cntr 008A  
                       ??_scale 00B3                  i2___lltoft@exp 0011                         ??_pause 00E7  
               __div_to_l_@quot 0086                         ??_putch 0084              i2___lldiv@quotient 0009  
                  i2_startTimer 4E08                      __pbssBANK0 00FF                      __pbssBANK1 0160  
              i2__tdiv_to_l_@f1 0001                i2__tdiv_to_l_@f2 0004                    _angleToPulse 3160  
         __size_of_digitalWrite 0104              __size_of_initTimer 004E              __size_of_initServo 008C  
                    _analogRead 4F28                   __div_to_l_@f1 0080                   __div_to_l_@f2 0083  
                       ?___ftge 0080                    ?i2_lcdNibble 0001                         ?___wmul 008E  
         sortBattery@resolution 0124                       ?___altoft 0088                         ?_fround 00B0  
                    _lcdNewline 51E6                       ?___awtoft 0088                       ?___ftpack 0080  
                       ?_printf 00D5                       ?___lltoft 0088                  ?i2__tdiv_to_l_ 0001  
                    ??i2___ftge 0007                      ??i2___wmul 0013  __size_of_servoInterruptService 00FA  
 __end_of_servoInterruptService 3E62                      ??i2_fround 0027               i2startTimer@timer 0007  
                     ?_lcdClear 0001                angleToPulse@a000 00E8                      ??i2_printf 0044  
              angleToPulse@a180 00E1                    _digitalWrite 3C64                         _SSPCON1 000FC6  
                       _SSPCON2 000FC5                         _SSPSTAT 000FC7         __size_ofi2_digitalWrite 00C8  
                       i2_scale 1C00                         _V_LIM_C 017E                         i2_putch 516E  
                     ?_pinSetup 0001                       ?_setAngle 00EC               __end_of_lcdNibble 4B86  
             __end_of__npowers_ FE12                         __Hparam 0000                      _scale$1339 00B3  
                       __Lparam 0000                         ___aldiv 3A3E                         ___almod 404A  
               __size_of___ftge 00C8                         ___awdiv 446E                         ___ftadd 2638  
                       ___awmod 4696                      _readKeypad 507E                         ___ftdiv 3424  
                       ___ftneg 5020                         ___lldiv 452C                 __size_of___wmul 0036  
                       ___ftmul 32C6                         ___llmod 47D6                         ___ftsub 4DBC  
                       ___fttol 3570                      ??___altoft 008C                         __pcinit 4E9E  
                  ??i2___ftpack 0006                      ??___awtoft 008B                      ??___ftpack 0085  
               __size_of_fround 02AC         i2___ftmul@f3_as_product 001F                         __ramtop 1000  
                       _lcdHome 51F6                    ??i2___lltoft 000D                         _lcdInst 50D2  
                    ??___lltoft 008C                         __ptext0 2C92                         __ptext1 1FF0  
                       __ptext2 51D0                         __ptext3 507E                         __ptext4 0012  
                       __ptext5 1752                         __ptext6 50FC                         __ptext7 51E6  
                       __ptext8 50A8                         __ptext9 238C                 __size_of_printf 0CB8  
                       _padPin1 0150                         _padPin2 0154                         _padPin3 0170  
                 i2_fround$1532 002A                   i2_fround$1533 0027                   startTimer@val 0082  
                       _initLCD 4E54               __end_of_hexpowers FE59                     ?__div_to_l_ 0080  
                       _lastKey 00FF               __end_of_initTimer 4DBC               __end_of_initServo 498C  
                 i2_isdigit$966 0002                         _dpowers FDC3                    i2fround@prec 002D  
                       _isdigit 50A8                ___awmod@dividend 0080                ___aldiv@dividend 0080  
                  ??i2_lcdClear 0005                      ??_lcdClear 0084                         _service 0008  
                __pintcode_body 413C            end_of_initialization 4ED6                   __Lmediumconst FDC2  
                       int_func 413C             i2___wmul@multiplier 000F                  digitalRead@pin 0080  
                   ?_analogRead 0080              __end_ofi2___ftpack 4696                      ??_pinSetup 0080  
                    ??_setAngle 00F0              __end_ofi2___lltoft 4D1E                 ___lldiv@divisor 0084  
               ___lldiv@counter 008C                  setAngle@period 00F2                         printf@c 011D  
                       printf@f 00D5                ___aldiv@quotient 008A                         postdec1 000FE5  
                       postdec2 000FDD                 _batteryDetected 0181                         postinc0 000FEE  
                       postinc2 000FDE              __end_ofi2_lcdClear 520E                  __tdiv_to_l_@f1 0080  
                __tdiv_to_l_@f2 0083                 ??i2__tdiv_to_l_ 0007                   ??_digitalRead 0082  
                   ?_lcdNewline 0001                   ??__tdiv_to_l_ 0086                       _PORTBbits 000F81  
          __size_of_sortBattery 039C             _redirectAngle_OTHER 0142                    _happynewyear FE6A  
            angleToPulse@offset 00DD              sortBattery@V_float 011E                       i2___awdiv 498C  
                     i2___ftadd 2AE6                       i2___awmod 4B86                       i2___ftneg 514A  
                     i2___lldiv 4A10                       i2___ftmul 3E62                       i2___llmod 4BF6  
                     i2___ftsub 4FAA                       i2___fttol 3F56                      _startTimer 4D1E  
                     i2_lcdInst 5190                     ___ftdiv@exp 009F                     printf@width 0116  
            i2___llmod@dividend 000E              i2___awdiv@dividend 0007                 i2___ftpack@sign 0005  
                     i2_isdigit 51B2             __size_of__div_to_l_ 0188                     ___ftmul@exp 00AA  
                   ?_readKeypad 0001                  __end_of___ftge 43A6                  __end_of___wmul 5020  
          __size_ofi2_lcdNibble 0066                   i2lcdInst@data 0004                  __end_of_fround 2638  
              i2___wmul@product 0013                  __end_of_printf 0CCA                   i2_printf$1535 004A  
                  i2printf@flag 0065                    i2printf@fval 0060             __size_of_analogRead 0042  
                  i2printf@prec 0054             start_initialization 4E9E               __size_ofi2___ftge 0090  
           __end_of_digitalRead 3916              i2___awdiv@quotient 000D               __size_ofi2___wmul 0026  
           __end_of__tdiv_to_l_ 2FD8                  initServo@angle 00F8                       i2printf@c 0067  
                     i2printf@f 0040                  initTimer@timer 0080                 i2___fttol@sign1 0034  
                initServo@motor 00F6               __size_ofi2_fround 0246                      ?i2___awdiv 0007  
                    ?i2___ftadd 002E                      ?i2___awmod 0001                      ?i2___ftneg 0001  
                    ?i2___lldiv 0001                      ?i2___ftmul 0015                      ?i2___llmod 000E  
                    ?i2___ftsub 003A                      ?i2___fttol 002B               __size_ofi2_printf 0A88  
                i2_digitalWrite 43A6                      ?i2_lcdInst 0001             __size_of_lcdNewline 0008  
               ___llmod@divisor 0091                 ___llmod@counter 0095                      ?i2_isdigit 0001  
                      ??___ftge 0086                        ??___wmul 0092                     __pdataBANK1 0132  
                  pause@message 00E5                __CFG_LPT1OSC$OFF 000000                        ??_fround 00B3  
                      ??_printf 00DF               __size_of___altoft 009E                      fround@prec 00B9  
                 ?i2__div_to_l_ 0001               __size_of___awtoft 0044               __size_of___ftpack 010C  
             __size_of___lltoft 007C                     __pbssCOMRAM 007B                   __pcstackBANK0 0080  
                 __pcstackBANK1 0100          __end_ofi2_digitalWrite 446E          sortBattery@targetAngle 0127  
                   ?_startTimer 0080               __size_of_lcdClear 0008             __size_of_readKeypad 002A  
                      ?i2_scale 0024                        ?i2_putch 0001               i2digitalWrite@pin 0007  
             i2digitalWrite@val 0009               __CFG_CCP2MX$PORTC 000000               __size_of_pinSetup 0040  
             __size_of_setAngle 00CC                       __pintcode 0008                   __pmediumconst FDC2  
                     _lcdNibble 4B0E                        ?___aldiv 0080                        ?___almod 008E  
                      ?___awdiv 0086                        ?___ftadd 00BA                        ?___awmod 0080  
                      ?___ftdiv 0092                        ?___ftneg 0080                        ?___lldiv 0080  
                      ?___ftmul 00A1                        ?___llmod 008D                        ?___ftsub 00C6  
                     __npowers_ FDEB                        ?___fttol 00C6                   ?i2_lcdNewline 0001  
                   _digitalRead 37E6                ___almod@dividend 008E                        ?_lcdHome 0001  
                      ?_lcdInst 0001                     __tdiv_to_l_ 2E3A                  ??i2__div_to_l_ 0007  
                  ??__div_to_l_ 0086                        ?_initLCD 0001                 startTimer@timer 0080  
                      ?_isdigit 0001                        ?_service 0001                       _hexpowers FE39  
                     _initTimer 4D6E                       _initServo 4900                 ?i2_digitalWrite 0007  
         _servoInterruptService 3D68                     ??i2___awdiv 000B                     ??i2___ftadd 0034  
                   ??i2___awmod 0005                     ??i2___ftneg 0004                     ??i2___lldiv 0009  
                   ??i2___ftmul 001B                  __size_of_scale 04AE                     ??i2___llmod 0016  
                   ??i2___ftsub 0040                     ??i2___fttol 002F                  __size_of_pause 0016  
                __size_of_putch 0028                        _AA_float 0144                 ___aldiv@divisor 0084  
                   ??i2_lcdInst 0003                 ___aldiv@counter 0088                  sortBattery@Vcc 0121  
                ___wmul@product 0092                        _LATDbits 000F8C                    ??_analogRead 0084  
                   ??i2_isdigit 0001              __end_of__div_to_l_ 3160                        i2u700_40 0EE4  
                      i2u700_45 0EDA                        i2u622_44 43D0                        i2u622_45 43CA  
                      i2u722_40 12D6                        i2u658_40 3FA0                        i2u658_45 3F98  
                      i2u790_47 5196                        i2u791_47 51A8                        i2u792_47 4C74  
                      i2u793_47 4C82                        i2u794_47 4CA8                        i2u795_47 4CB6  
                      i2u789_47 5182                __CFG_WDTPS$32768 000000                      ?_lcdNibble 0001  
                _padAngle_CLOSE 0134                 i2__div_to_l_@f1 0001                 i2__div_to_l_@f2 0004  
                 digitalWrite@p 0087                  ??i2_lcdNewline 0005                      service@key 007A  
                  ??_lcdNewline 0084             __size_of_startTimer 0050               angleToPulse@angle 00D5  
             ___wmul@multiplier 008E                        i2___ftge 4870                        i2___wmul 5124  
                 lcdNibble@data 0081                      printf@flag 011B                   lcdNibble@temp 0080  
                    printf@fval 0118                      printf@prec 010A               i2___awdiv@divisor 0009  
                      i2_fround 28A0              __end_of_analogRead 4F6A                        _V_LIM_AA 017B  
                      _V_LIM_9V 0178               i2___awdiv@counter 000B                        i2_printf 0CCA  
                    ?_initTimer 0080                      ?_initServo 00F6               sortBattery@signal 0129  
                     copy_data0 4EB2              i2___awmod@dividend 0001                __size_ofi2_scale 03F0  
              __size_ofi2_putch 0022              __end_of_lcdNewline 51EE                   readKeypad@key 0080  
                      __Hrparam 0000                        __Lrparam 0000              __CFG_BOREN$SBORDIS 000000  
                  ??_readKeypad 0080                   ??_sortBattery 00F6                __size_of___aldiv 011A  
              __size_of___almod 00F2                __size_of___awdiv 00BE                __size_of___ftadd 0268  
              __size_of___awmod 00A2                __size_of___ftdiv 014C                __size_of___ftneg 0030  
         i2___wmul@multiplicand 0011                __size_of___lldiv 00BC                        ___altoft 4738  
              __size_of___ftmul 015E                __size_of___llmod 009A                __size_of___ftsub 004C  
              __size_of___fttol 0144                        ___awtoft 4EE4                        ___ftpack 3B58  
                   _fround$1337 00B6                     _fround$1338 00B3                        ___lltoft 4A92  
         __end_ofi2__tdiv_to_l_ 37E6                     _isdigit$966 0081                __size_of_lcdHome 0008  
              __size_of_lcdInst 002A                       setAngle@i 00F4                __size_of_initLCD 004A  
              __size_of_isdigit 002A          ?_servoInterruptService 0001                        _lcdClear 51EE  
                      __ptext10 4FEA                        __ptext11 4696                        __ptext20 42DE  
                      __ptext12 446E                        __ptext21 51EE                        __ptext13 2E3A  
                      __ptext30 3160                        __ptext22 3C64                        __ptext14 2FD8  
                      __ptext31 3570                        __ptext23 37E6                        __ptext15 4A92  
                      __ptext40 50D2                        __ptext32 32C6                        __ptext24 4F28  
                      __ptext16 47D6                        __ptext41 4B0E                        __ptext33 3424  
                      __ptext25 4F6A                        __ptext17 452C                        __ptext50 28A0  
                      __ptext42 404A                        __ptext34 2638                        __ptext26 51F6  
                      __ptext18 4DBC                        __ptext51 5124                        __ptext43 3A3E  
                      __ptext35 4EE4                        __ptext27 4900                        __ptext19 5020  
                      __ptext60 4FAA                        __ptext52 3E62                        __ptext36 4738  
                      __ptext28 4D1E                        __ptext61 2AE6                        __ptext53 498C  
                      __ptext45 0CCA                        __ptext37 3B58                        __ptext29 4212  
                      __ptext70 43A6                        __ptext62 45E8                        __ptext54 36B4  
                      __ptext46 1C00                        __ptext38 4D6E                        __ptext71 4B86  
                      __ptext63 514A                        __ptext55 3916                        __ptext47 516E  
                      __ptext39 4E54                        __ptext64 4870                        __ptext56 4CC2  
                      __ptext48 51FE                        __ptext65 5206                        __ptext57 4BF6  
                      __ptext49 51B2                        __ptext66 5190                        __ptext58 4A10  
                      __ptext67 4C5C                        __ptext59 3F56                        __ptext68 3D68  
                      __ptext69 4E08                        __powers_ FE12                __size_of_service 420A  
               i2startTimer@val 0009                 ___almod@divisor 0092                   ?i2_startTimer 0007  
                      _padServo 0158                 ___almod@counter 0096              __end_of_readKeypad 50A8  
                 ?_angleToPulse 00D5                   __size_of_main 01A8            __end_ofi2__div_to_l_ 3A3E  
                      _pinSetup 4F6A                        _setAngle 4212                        _prevTime 0185  
                 ??i2_lcdNibble 0001                     ??_lcdNibble 0080                   _padAngle_OPEN 0138  
                      int$flags 007F                       printf@idx 0105                       printf@len 0106  
                     printf@exp 0110                       printf@val 0112               i2___awmod@divisor 0003  
                     putch@data 0084               i2___awmod@counter 0005             __end_of_sortBattery 238C  
                    _INTCONbits 000FF2                   ?_digitalWrite 0080                     ??_initTimer 0082  
                   ??_initServo 00FA                        isdigit@c 0082                        scale@scl 00B6  
                ??i2_startTimer 000D                    ??_startTimer 0086                        intlevel2 0000  
              __tdiv_to_l_@exp1 008E                __tdiv_to_l_@cntr 008D                  ??_angleToPulse 00D9  
          __end_ofi2_lcdNewline 5206                __tdiv_to_l_@quot 0089                ___lldiv@dividend 0080  
              _redirectAngle_AA 013E                _redirectAngle_9V 013C                        printf@ap 0108  
                      printf@cp 0103                     lcdInst@data 0083                    ?_digitalRead 0080  
                  ?__tdiv_to_l_ 0080              __end_of_startTimer 4D6E                     _printf$1340 0100  
           __end_ofi2_lcdNibble 4CC2                ??i2_digitalWrite 000B                ___lldiv@quotient 0088  
                ??_digitalWrite 0084                    ___aldiv@sign 0089                 _redirectAngle_C 0140  
              _padAngle_NEUTRAL 0136                 digitalWrite@pin 0080                 digitalWrite@val 0082  
             i2__div_to_l_@exp1 000C               i2__div_to_l_@cntr 000B                    ___almod@sign 0097  
             i2__div_to_l_@quot 0007  
