

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Feb 26 14:09:47 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    72                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    73  0000                     
    74                           ; Version 1.40
    75                           ; Generated 01/12/2016 GMT
    76                           ; 
    77                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC18F4620 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108  0000                     
   109                           	psect	smallconst
   110  001000                     __psmallconst:
   111                           	opt stack 0
   112  001000  00                 	db	0
   113  001001                     _dpowers:
   114                           	opt stack 0
   115  001001  0001               	dw	1
   116  001003  0000               	dw	0
   117  001005  000A               	dw	10
   118  001007  0000               	dw	0
   119  001009  0064               	dw	100
   120  00100B  0000               	dw	0
   121  00100D  03E8               	dw	1000
   122  00100F  0000               	dw	0
   123  001011  2710               	dw	10000
   124  001013  0000               	dw	0
   125  001015  86A0               	dw	34464
   126  001017  0001               	dw	1
   127  001019  4240               	dw	16960
   128  00101B  000F               	dw	15
   129  00101D  9680               	dw	38528
   130  00101F  0098               	dw	152
   131  001021  E100               	dw	57600
   132  001023  05F5               	dw	1525
   133  001025  CA00               	dw	51712
   134  001027  3B9A               	dw	15258
   135  001029                     __end_of_dpowers:
   136                           	opt stack 0
   137  001029                     __npowers_:
   138                           	opt stack 0
   139  001029  00                 	db	0
   140  00102A  80                 	db	128
   141  00102B  3F                 	db	63
   142  00102C  CD                 	db	205
   143  00102D  CC                 	db	204
   144  00102E  3D                 	db	61
   145  00102F  D7                 	db	215
   146  001030  23                 	db	35
   147  001031  3C                 	db	60
   148  001032  12                 	db	18
   149  001033  83                 	db	131
   150  001034  3A                 	db	58
   151  001035  B7                 	db	183
   152  001036  D1                 	db	209
   153  001037  38                 	db	56
   154  001038  C6                 	db	198
   155  001039  27                 	db	39
   156  00103A  37                 	db	55
   157  00103B  38                 	db	56
   158  00103C  86                 	db	134
   159  00103D  35                 	db	53
   160  00103E  C0                 	db	192
   161  00103F  D6                 	db	214
   162  001040  33                 	db	51
   163  001041  CC                 	db	204
   164  001042  2B                 	db	43
   165  001043  32                 	db	50
   166  001044  70                 	db	112
   167  001045  89                 	db	137
   168  001046  30                 	db	48
   169  001047  E7                 	db	231
   170  001048  DB                 	db	219
   171  001049  2E                 	db	46
   172  00104A  E5                 	db	229
   173  00104B  3C                 	db	60
   174  00104C  1E                 	db	30
   175  00104D  42                 	db	66
   176  00104E  A2                 	db	162
   177  00104F  0D                 	db	13
   178  001050                     __end_of__npowers_:
   179                           	opt stack 0
   180  001050                     __powers_:
   181                           	opt stack 0
   182  001050  00                 	db	0
   183  001051  80                 	db	128
   184  001052  3F                 	db	63
   185  001053  00                 	db	0
   186  001054  20                 	db	32
   187  001055  41                 	db	65
   188  001056  00                 	db	0
   189  001057  C8                 	db	200
   190  001058  42                 	db	66
   191  001059  00                 	db	0
   192  00105A  7A                 	db	122
   193  00105B  44                 	db	68
   194  00105C  40                 	db	64
   195  00105D  1C                 	db	28
   196  00105E  46                 	db	70
   197  00105F  50                 	db	80
   198  001060  C3                 	db	195
   199  001061  47                 	db	71
   200  001062  24                 	db	36
   201  001063  74                 	db	116
   202  001064  49                 	db	73
   203  001065  97                 	db	151
   204  001066  18                 	db	24
   205  001067  4B                 	db	75
   206  001068  BC                 	db	188
   207  001069  BE                 	db	190
   208  00106A  4C                 	db	76
   209  00106B  6B                 	db	107
   210  00106C  6E                 	db	110
   211  00106D  4E                 	db	78
   212  00106E  03                 	db	3
   213  00106F  15                 	db	21
   214  001070  50                 	db	80
   215  001071  79                 	db	121
   216  001072  AD                 	db	173
   217  001073  60                 	db	96
   218  001074  F3                 	db	243
   219  001075  49                 	db	73
   220  001076  71                 	db	113
   221  001077                     __end_of__powers_:
   222                           	opt stack 0
   223  001077                     _hexpowers:
   224                           	opt stack 0
   225  001077  0001               	dw	1
   226  001079  0000               	dw	0
   227  00107B  0010               	dw	16
   228  00107D  0000               	dw	0
   229  00107F  0100               	dw	256
   230  001081  0000               	dw	0
   231  001083  1000               	dw	4096
   232  001085  0000               	dw	0
   233  001087  0000               	dw	0
   234  001089  0001               	dw	1
   235  00108B  0000               	dw	0
   236  00108D  0010               	dw	16
   237  00108F  0000               	dw	0
   238  001091  0100               	dw	256
   239  001093  0000               	dw	0
   240  001095  1000               	dw	4096
   241  001097                     __end_of_hexpowers:
   242                           	opt stack 0
   243  001097  31                 	db	49
   244  001098  32                 	db	50
   245  001099  33                 	db	51
   246  00109A  41                 	db	65
   247  00109B  34                 	db	52
   248  00109C  35                 	db	53
   249  00109D  36                 	db	54
   250  00109E  42                 	db	66
   251  00109F  37                 	db	55
   252  0010A0  38                 	db	56
   253  0010A1  39                 	db	57
   254  0010A2  43                 	db	67
   255  0010A3  2A                 	db	42
   256  0010A4  30                 	db	48
   257  0010A5  23                 	db	35
   258  0010A6  44                 	db	68
   259  0010A7  00                 	db	0
   260  0010A8                     __end_of_keys:
   261                           	opt stack 0
   262  0010A8                     testFrequency@F2960:
   263                           	opt stack 0
   264  0010A8  45                 	db	69
   265  0010A9  59                 	db	89
   266  0010AA  23                 	db	35
   267  0010AB  07                 	db	7
   268  0010AC  31                 	db	49
   269  0010AD  12                 	db	18
   270  0010AE  16                 	db	22
   271  0010AF                     __end_oftestFrequency@F2960:
   272                           	opt stack 0
   273  0000                     _ADCON0	set	4034
   274  0000                     _ADCON1	set	4033
   275  0000                     _ADCON2	set	4032
   276  0000                     _ADRESH	set	4036
   277  0000                     _ADRESL	set	4035
   278  0000                     _EEADR	set	4009
   279  0000                     _EEADRH	set	4010
   280  0000                     _EECON1	set	4006
   281  0000                     _EECON2	set	4007
   282  0000                     _EEDATA	set	4008
   283  0000                     _INTCONbits	set	4082
   284  0000                     _LATA	set	3977
   285  0000                     _LATB	set	3978
   286  0000                     _LATC	set	3979
   287  0000                     _LATD	set	3980
   288  0000                     _LATDbits	set	3980
   289  0000                     _LATE	set	3981
   290  0000                     _PORTA	set	3968
   291  0000                     _PORTB	set	3969
   292  0000                     _PORTBbits	set	3969
   293  0000                     _PORTC	set	3970
   294  0000                     _PORTD	set	3971
   295  0000                     _SSPADD	set	4040
   296  0000                     _SSPBUF	set	4041
   297  0000                     _SSPCON1	set	4038
   298  0000                     _SSPCON2	set	4037
   299  0000                     _SSPSTAT	set	4039
   300  0000                     _T0CON	set	4053
   301  0000                     _TMR0H	set	4055
   302  0000                     _TMR0L	set	4054
   303  0000                     _TRISA	set	3986
   304  0000                     _TRISB	set	3987
   305  0000                     _TRISC	set	3988
   306  0000                     _TRISD	set	3989
   307  0000                     _TRISE	set	3990
   308  0000                     _ACKDT	set	32301
   309  0000                     _ACKEN	set	32300
   310  0000                     _EEIF	set	32012
   311  0000                     _PEIE	set	32662
   312  0000                     _PEN	set	32298
   313  0000                     _RCEN	set	32299
   314  0000                     _RSEN	set	32297
   315  0000                     _SEN	set	32296
   316  0000                     _TMR0IE	set	32661
   317  0000                     _TMR0IF	set	32658
   318  0000                     _TRISC3	set	31907
   319  0000                     _TRISC4	set	31908
   320  0010AF                     STR_7:
   321  0010AF  30                 	db	48	;'0'
   322  0010B0  31                 	db	49	;'1'
   323  0010B1  32                 	db	50	;'2'
   324  0010B2  33                 	db	51	;'3'
   325  0010B3  34                 	db	52	;'4'
   326  0010B4  35                 	db	53	;'5'
   327  0010B5  36                 	db	54	;'6'
   328  0010B6  37                 	db	55	;'7'
   329  0010B7  38                 	db	56	;'8'
   330  0010B8  39                 	db	57	;'9'
   331  0010B9  61                 	db	97	;'a'
   332  0010BA  62                 	db	98	;'b'
   333  0010BB  63                 	db	99	;'c'
   334  0010BC  64                 	db	100	;'d'
   335  0010BD  65                 	db	101	;'e'
   336  0010BE  66                 	db	102	;'f'
   337  0010BF  00                 	db	0
   338  0010C0                     STR_4:
   339  0010C0  6F                 	db	111	;'o'
   340  0010C1  75                 	db	117	;'u'
   341  0010C2  74                 	db	116	;'t'
   342  0010C3  20                 	db	32
   343  0010C4  6F                 	db	111	;'o'
   344  0010C5  66                 	db	102	;'f'
   345  0010C6  20                 	db	32
   346  0010C7  74                 	db	116	;'t'
   347  0010C8  69                 	db	105	;'i'
   348  0010C9  6D                 	db	109	;'m'
   349  0010CA  65                 	db	101	;'e'
   350  0010CB  00                 	db	0
   351  0010CC                     STR_5:
   352  0010CC  74                 	db	116	;'t'
   353  0010CD  31                 	db	49	;'1'
   354  0010CE  3A                 	db	58	;':'
   355  0010CF  20                 	db	32
   356  0010D0  25                 	db	37
   357  0010D1  78                 	db	120	;'x'
   358  0010D2  20                 	db	32
   359  0010D3  00                 	db	0
   360  0010D4                     STR_6:
   361  0010D4  25                 	db	37
   362  0010D5  78                 	db	120	;'x'
   363  0010D6  20                 	db	32
   364  0010D7  25                 	db	37
   365  0010D8  78                 	db	120	;'x'
   366  0010D9  0A                 	db	10
   367  0010DA  00                 	db	0
   368  0010DB                     STR_3:
   369  0010DB  25                 	db	37
   370  0010DC  66                 	db	102	;'f'
   371  0010DD  00                 	db	0
   372  0010DE  30                 	db	48	;'0'
   373  0010DF  00                 	db	0
   374  0010E0  31                 	db	49	;'1'
   375  0010E1  00                 	db	0
   376                           
   377                           ; #config settings
   378  0010E2  00                 	db	0	; dummy byte at the end
   379  0000                     
   380                           	psect	cinit
   381  004C58                     __pcinit:
   382                           	opt stack 0
   383  004C58                     start_initialization:
   384                           	opt stack 0
   385  004C58                     __initialization:
   386                           	opt stack 0
   387                           
   388                           ; Clear objects allocated to COMRAM (6 bytes)
   389  004C58  6A73               	clrf	(__pbssCOMRAM+5)& (0+255),c
   390  004C5A  6A72               	clrf	(__pbssCOMRAM+4)& (0+255),c
   391  004C5C  6A71               	clrf	(__pbssCOMRAM+3)& (0+255),c
   392  004C5E  6A70               	clrf	(__pbssCOMRAM+2)& (0+255),c
   393  004C60  6A6F               	clrf	(__pbssCOMRAM+1)& (0+255),c
   394  004C62  6A6E               	clrf	__pbssCOMRAM& (0+255),c
   395  004C64                     end_of_initialization:
   396                           	opt stack 0
   397  004C64                     __end_of__initialization:
   398                           	opt stack 0
   399  004C64  9074               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   400  004C66  9274               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   401  004C68  0E00               	movlw	low (__Lmediumconst shr (0+16))
   402  004C6A  6EF8               	movwf	tblptru,c
   403  004C6C  0100               	movlb	0
   404  004C6E  EFE4  F023         	goto	_main	;jump to C main() function
   405                           tblptru	equ	0xFF8
   406                           
   407                           	psect	bssCOMRAM
   408  00006E                     __pbssCOMRAM:
   409                           	opt stack 0
   410  00006E                     _count:
   411                           	opt stack 0
   412  00006E                     	ds	4
   413  000072                     _T:
   414                           	opt stack 0
   415  000072                     	ds	2
   416                           tblptru	equ	0xFF8
   417                           
   418                           	psect	cstackBANK1
   419  000100                     __pcstackBANK1:
   420                           	opt stack 0
   421  000100                     testFrequency@datetime:
   422                           	opt stack 0
   423                           
   424                           ; 7 bytes @ 0x0
   425  000100                     	ds	7
   426  000107                     testFrequency@time:
   427                           	opt stack 0
   428                           
   429                           ; 14 bytes @ 0x7
   430  000107                     	ds	14
   431  000115                     testFrequency@count:
   432                           	opt stack 0
   433                           
   434                           ; 4 bytes @ 0x15
   435  000115                     	ds	4
   436  000119                     testFrequency@prev:
   437                           	opt stack 0
   438                           
   439                           ; 2 bytes @ 0x19
   440  000119                     	ds	2
   441  00011B                     testFrequency@timerOff:
   442                           	opt stack 0
   443                           
   444                           ; 2 bytes @ 0x1B
   445  00011B                     	ds	2
   446  00011D                     testFrequency@first:
   447                           	opt stack 0
   448                           
   449                           ; 2 bytes @ 0x1D
   450  00011D                     	ds	2
   451  00011F                     testFrequency@i:
   452                           	opt stack 0
   453                           
   454                           ; 1 bytes @ 0x1F
   455  00011F                     	ds	1
   456  000120                     testFrequency@i_390:
   457                           	opt stack 0
   458                           
   459                           ; 1 bytes @ 0x20
   460  000120                     	ds	1
   461                           tblptru	equ	0xFF8
   462                           
   463                           	psect	cstackBANK0
   464  000080                     __pcstackBANK0:
   465                           	opt stack 0
   466  000080                     ??_I2C_Master_Wait:
   467  000080                     ?___awmod:
   468                           	opt stack 0
   469  000080                     ?___ftpack:
   470                           	opt stack 0
   471  000080                     ?___ftneg:
   472                           	opt stack 0
   473  000080                     ?__tdiv_to_l_:
   474                           	opt stack 0
   475  000080                     ?__div_to_l_:
   476                           	opt stack 0
   477  000080                     ?___lldiv:
   478                           	opt stack 0
   479  000080                     ?___llmod:
   480                           	opt stack 0
   481  000080                     lcdNibble@temp:
   482                           	opt stack 0
   483  000080                     startT0@time:
   484                           	opt stack 0
   485  000080                     ___awmod@dividend:
   486                           	opt stack 0
   487  000080                     __div_to_l_@f1:
   488                           	opt stack 0
   489  000080                     ___ftpack@arg:
   490                           	opt stack 0
   491  000080                     __tdiv_to_l_@f1:
   492                           	opt stack 0
   493  000080                     ___ftge@ff1:
   494                           	opt stack 0
   495  000080                     ___ftneg@f1:
   496                           	opt stack 0
   497  000080                     ___lldiv@dividend:
   498                           	opt stack 0
   499  000080                     ___llmod@dividend:
   500                           	opt stack 0
   501                           
   502                           ; 4 bytes @ 0x0
   503  000080                     	ds	1
   504  000081                     lcdNibble@data:
   505                           	opt stack 0
   506  000081                     I2C_Master_Read@a:
   507                           	opt stack 0
   508  000081                     I2C_Master_Write@d:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x1
   512  000081                     	ds	1
   513  000082                     ??_lcdInst:
   514  000082                     I2C_Master_Read@temp:
   515                           	opt stack 0
   516  000082                     ___awmod@divisor:
   517                           	opt stack 0
   518                           
   519                           ; 2 bytes @ 0x2
   520  000082                     	ds	1
   521  000083                     lcdInst@data:
   522                           	opt stack 0
   523  000083                     ___ftpack@exp:
   524                           	opt stack 0
   525  000083                     __div_to_l_@f2:
   526                           	opt stack 0
   527  000083                     __tdiv_to_l_@f2:
   528                           	opt stack 0
   529  000083                     ___ftge@ff2:
   530                           	opt stack 0
   531                           
   532                           ; 3 bytes @ 0x3
   533  000083                     	ds	1
   534  000084                     ??_initLCD:
   535  000084                     putch@data:
   536                           	opt stack 0
   537  000084                     ___awmod@counter:
   538                           	opt stack 0
   539  000084                     ___ftpack@sign:
   540                           	opt stack 0
   541  000084                     ___lldiv@divisor:
   542                           	opt stack 0
   543  000084                     ___llmod@divisor:
   544                           	opt stack 0
   545                           
   546                           ; 4 bytes @ 0x4
   547  000084                     	ds	1
   548  000085                     ??___ftpack:
   549  000085                     ___awmod@sign:
   550                           	opt stack 0
   551                           
   552                           ; 1 bytes @ 0x5
   553  000085                     	ds	1
   554  000086                     ??__tdiv_to_l_:
   555  000086                     ??___ftge:
   556  000086                     ?___awdiv:
   557                           	opt stack 0
   558  000086                     ___awdiv@dividend:
   559                           	opt stack 0
   560  000086                     __div_to_l_@quot:
   561                           	opt stack 0
   562                           
   563                           ; 4 bytes @ 0x6
   564  000086                     	ds	2
   565  000088                     ?___altoft:
   566                           	opt stack 0
   567  000088                     ?___lltoft:
   568                           	opt stack 0
   569  000088                     ___llmod@counter:
   570                           	opt stack 0
   571  000088                     ___awdiv@divisor:
   572                           	opt stack 0
   573  000088                     ___altoft@c:
   574                           	opt stack 0
   575  000088                     ___lldiv@quotient:
   576                           	opt stack 0
   577  000088                     ___lltoft@c:
   578                           	opt stack 0
   579                           
   580                           ; 4 bytes @ 0x8
   581  000088                     	ds	1
   582  000089                     __tdiv_to_l_@quot:
   583                           	opt stack 0
   584                           
   585                           ; 4 bytes @ 0x9
   586  000089                     	ds	1
   587  00008A                     ___awdiv@counter:
   588                           	opt stack 0
   589  00008A                     __div_to_l_@cntr:
   590                           	opt stack 0
   591                           
   592                           ; 1 bytes @ 0xA
   593  00008A                     	ds	1
   594  00008B                     ___awdiv@sign:
   595                           	opt stack 0
   596  00008B                     __div_to_l_@exp1:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0xB
   600  00008B                     	ds	1
   601  00008C                     ??___altoft:
   602  00008C                     ??___lltoft:
   603  00008C                     ___lldiv@counter:
   604                           	opt stack 0
   605  00008C                     ___awdiv@quotient:
   606                           	opt stack 0
   607                           
   608                           ; 2 bytes @ 0xC
   609  00008C                     	ds	1
   610  00008D                     __tdiv_to_l_@cntr:
   611                           	opt stack 0
   612  00008D                     I2C_Master_Init@c:
   613                           	opt stack 0
   614                           
   615                           ; 4 bytes @ 0xD
   616  00008D                     	ds	1
   617  00008E                     ?___wmul:
   618                           	opt stack 0
   619  00008E                     __tdiv_to_l_@exp1:
   620                           	opt stack 0
   621  00008E                     ___wmul@multiplier:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0xE
   625  00008E                     	ds	2
   626  000090                     ___altoft@exp:
   627                           	opt stack 0
   628  000090                     ___lltoft@exp:
   629                           	opt stack 0
   630  000090                     ___wmul@multiplicand:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x10
   634  000090                     	ds	1
   635  000091                     ??_I2C_Master_Init:
   636  000091                     ___altoft@sign:
   637                           	opt stack 0
   638                           
   639                           ; 1 bytes @ 0x11
   640  000091                     	ds	1
   641  000092                     ?___ftdiv:
   642                           	opt stack 0
   643  000092                     ___wmul@product:
   644                           	opt stack 0
   645  000092                     ___ftdiv@f1:
   646                           	opt stack 0
   647                           
   648                           ; 3 bytes @ 0x12
   649  000092                     	ds	2
   650  000094                     ?___ftmul:
   651                           	opt stack 0
   652  000094                     ___ftmul@f1:
   653                           	opt stack 0
   654                           
   655                           ; 3 bytes @ 0x14
   656  000094                     	ds	1
   657  000095                     ___ftdiv@f2:
   658                           	opt stack 0
   659                           
   660                           ; 3 bytes @ 0x15
   661  000095                     	ds	2
   662  000097                     ___ftmul@f2:
   663                           	opt stack 0
   664                           
   665                           ; 3 bytes @ 0x17
   666  000097                     	ds	1
   667  000098                     ??___ftdiv:
   668                           
   669                           ; 1 bytes @ 0x18
   670  000098                     	ds	2
   671  00009A                     ??___ftmul:
   672                           
   673                           ; 1 bytes @ 0x1A
   674  00009A                     	ds	1
   675  00009B                     ___ftdiv@cntr:
   676                           	opt stack 0
   677                           
   678                           ; 1 bytes @ 0x1B
   679  00009B                     	ds	1
   680  00009C                     ___ftdiv@f3:
   681                           	opt stack 0
   682                           
   683                           ; 3 bytes @ 0x1C
   684  00009C                     	ds	1
   685  00009D                     ___ftmul@exp:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x1D
   689  00009D                     	ds	1
   690  00009E                     ___ftmul@f3_as_product:
   691                           	opt stack 0
   692                           
   693                           ; 3 bytes @ 0x1E
   694  00009E                     	ds	1
   695  00009F                     ___ftdiv@exp:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x1F
   699  00009F                     	ds	1
   700  0000A0                     ___ftdiv@sign:
   701                           	opt stack 0
   702                           
   703                           ; 1 bytes @ 0x20
   704  0000A0                     	ds	1
   705  0000A1                     ___ftmul@cntr:
   706                           	opt stack 0
   707                           
   708                           ; 1 bytes @ 0x21
   709  0000A1                     	ds	1
   710  0000A2                     ___ftmul@sign:
   711                           	opt stack 0
   712                           
   713                           ; 1 bytes @ 0x22
   714  0000A2                     	ds	1
   715  0000A3                     ?_fround:
   716                           	opt stack 0
   717  0000A3                     ?_scale:
   718                           	opt stack 0
   719                           
   720                           ; 3 bytes @ 0x23
   721  0000A3                     	ds	3
   722  0000A6                     _fround$1073:
   723                           	opt stack 0
   724  0000A6                     _scale$1074:
   725                           	opt stack 0
   726                           
   727                           ; 3 bytes @ 0x26
   728  0000A6                     	ds	3
   729  0000A9                     scale@scl:
   730                           	opt stack 0
   731  0000A9                     _fround$1072:
   732                           	opt stack 0
   733                           
   734                           ; 3 bytes @ 0x29
   735  0000A9                     	ds	1
   736  0000AA                     ?___fttol:
   737                           	opt stack 0
   738  0000AA                     ___fttol@f1:
   739                           	opt stack 0
   740                           
   741                           ; 3 bytes @ 0x2A
   742  0000AA                     	ds	2
   743  0000AC                     fround@prec:
   744                           	opt stack 0
   745                           
   746                           ; 1 bytes @ 0x2C
   747  0000AC                     	ds	1
   748  0000AD                     ?___ftadd:
   749                           	opt stack 0
   750  0000AD                     ___ftadd@f1:
   751                           	opt stack 0
   752                           
   753                           ; 3 bytes @ 0x2D
   754  0000AD                     	ds	1
   755  0000AE                     ??___fttol:
   756                           
   757                           ; 1 bytes @ 0x2E
   758  0000AE                     	ds	2
   759  0000B0                     ___ftadd@f2:
   760                           	opt stack 0
   761                           
   762                           ; 3 bytes @ 0x30
   763  0000B0                     	ds	3
   764  0000B3                     ??___ftadd:
   765  0000B3                     ___fttol@sign1:
   766                           	opt stack 0
   767                           
   768                           ; 1 bytes @ 0x33
   769  0000B3                     	ds	1
   770  0000B4                     ___fttol@lval:
   771                           	opt stack 0
   772                           
   773                           ; 4 bytes @ 0x34
   774  0000B4                     	ds	2
   775  0000B6                     ___ftadd@sign:
   776                           	opt stack 0
   777                           
   778                           ; 1 bytes @ 0x36
   779  0000B6                     	ds	1
   780  0000B7                     ___ftadd@exp2:
   781                           	opt stack 0
   782                           
   783                           ; 1 bytes @ 0x37
   784  0000B7                     	ds	1
   785  0000B8                     ___ftadd@exp1:
   786                           	opt stack 0
   787  0000B8                     ___fttol@exp1:
   788                           	opt stack 0
   789                           
   790                           ; 1 bytes @ 0x38
   791  0000B8                     	ds	1
   792  0000B9                     ?___ftsub:
   793                           	opt stack 0
   794  0000B9                     ___ftsub@f1:
   795                           	opt stack 0
   796                           
   797                           ; 3 bytes @ 0x39
   798  0000B9                     	ds	3
   799  0000BC                     ___ftsub@f2:
   800                           	opt stack 0
   801                           
   802                           ; 3 bytes @ 0x3C
   803  0000BC                     	ds	3
   804  0000BF                     ?_printf:
   805                           	opt stack 0
   806  0000BF                     printf@f:
   807                           	opt stack 0
   808                           
   809                           ; 2 bytes @ 0x3F
   810  0000BF                     	ds	6
   811  0000C5                     ??_printf:
   812                           
   813                           ; 1 bytes @ 0x45
   814  0000C5                     	ds	6
   815  0000CB                     _printf$1075:
   816                           	opt stack 0
   817                           
   818                           ; 3 bytes @ 0x4B
   819  0000CB                     	ds	3
   820  0000CE                     printf@idx:
   821                           	opt stack 0
   822                           
   823                           ; 1 bytes @ 0x4E
   824  0000CE                     	ds	1
   825  0000CF                     printf@ap:
   826                           	opt stack 0
   827                           
   828                           ; 2 bytes @ 0x4F
   829  0000CF                     	ds	2
   830  0000D1                     printf@flag:
   831                           	opt stack 0
   832                           
   833                           ; 2 bytes @ 0x51
   834  0000D1                     	ds	2
   835  0000D3                     printf@prec:
   836                           	opt stack 0
   837                           
   838                           ; 2 bytes @ 0x53
   839  0000D3                     	ds	2
   840  0000D5                     printf@val:
   841                           	opt stack 0
   842                           
   843                           ; 4 bytes @ 0x55
   844  0000D5                     	ds	4
   845  0000D9                     printf@exp:
   846                           	opt stack 0
   847                           
   848                           ; 2 bytes @ 0x59
   849  0000D9                     	ds	2
   850  0000DB                     printf@tmpval:
   851                           	opt stack 0
   852                           
   853                           ; 4 bytes @ 0x5B
   854  0000DB                     	ds	4
   855  0000DF                     printf@fval:
   856                           	opt stack 0
   857                           
   858                           ; 3 bytes @ 0x5F
   859  0000DF                     	ds	3
   860  0000E2                     printf@c:
   861                           	opt stack 0
   862                           
   863                           ; 1 bytes @ 0x62
   864  0000E2                     	ds	1
   865  0000E3                     ?_testFrequency:
   866                           	opt stack 0
   867                           
   868                           ; 3 bytes @ 0x63
   869  0000E3                     	ds	3
   870  0000E6                     ??_testFrequency:
   871                           
   872                           ; 1 bytes @ 0x66
   873  0000E6                     	ds	4
   874  0000EA                     _main$1071:
   875                           	opt stack 0
   876                           
   877                           ; 3 bytes @ 0x6A
   878  0000EA                     	ds	3
   879                           tblptru	equ	0xFF8
   880                           
   881                           	psect	cstackCOMRAM
   882  000001                     __pcstackCOMRAM:
   883                           	opt stack 0
   884  000001                     ?i2___awmod:
   885                           	opt stack 0
   886  000001                     ?i2___ftpack:
   887                           	opt stack 0
   888  000001                     ?i2___ftneg:
   889                           	opt stack 0
   890  000001                     ?i2__div_to_l_:
   891                           	opt stack 0
   892  000001                     ?i2__tdiv_to_l_:
   893                           	opt stack 0
   894  000001                     ?i2___lldiv:
   895                           	opt stack 0
   896  000001                     ?i2___llmod:
   897                           	opt stack 0
   898  000001                     i2lcdNibble@temp:
   899                           	opt stack 0
   900  000001                     i2___awmod@dividend:
   901                           	opt stack 0
   902  000001                     i2__div_to_l_@f1:
   903                           	opt stack 0
   904  000001                     i2___ftpack@arg:
   905                           	opt stack 0
   906  000001                     i2__tdiv_to_l_@f1:
   907                           	opt stack 0
   908  000001                     i2___ftge@ff1:
   909                           	opt stack 0
   910  000001                     i2___ftneg@f1:
   911                           	opt stack 0
   912  000001                     i2___lldiv@dividend:
   913                           	opt stack 0
   914  000001                     i2___llmod@dividend:
   915                           	opt stack 0
   916                           
   917                           ; 4 bytes @ 0x0
   918  000001                     	ds	1
   919  000002                     i2lcdNibble@data:
   920                           	opt stack 0
   921                           
   922                           ; 1 bytes @ 0x1
   923  000002                     	ds	1
   924  000003                     ??i2_lcdInst:
   925  000003                     i2___awmod@divisor:
   926                           	opt stack 0
   927                           
   928                           ; 2 bytes @ 0x2
   929  000003                     	ds	1
   930  000004                     i2lcdInst@data:
   931                           	opt stack 0
   932  000004                     i2___ftpack@exp:
   933                           	opt stack 0
   934  000004                     i2__div_to_l_@f2:
   935                           	opt stack 0
   936  000004                     i2__tdiv_to_l_@f2:
   937                           	opt stack 0
   938  000004                     i2___ftge@ff2:
   939                           	opt stack 0
   940                           
   941                           ; 3 bytes @ 0x3
   942  000004                     	ds	1
   943  000005                     i2putch@data:
   944                           	opt stack 0
   945  000005                     i2___awmod@counter:
   946                           	opt stack 0
   947  000005                     i2___ftpack@sign:
   948                           	opt stack 0
   949  000005                     i2___lldiv@divisor:
   950                           	opt stack 0
   951  000005                     i2___llmod@divisor:
   952                           	opt stack 0
   953                           
   954                           ; 4 bytes @ 0x4
   955  000005                     	ds	1
   956  000006                     ??i2___ftpack:
   957  000006                     i2___awmod@sign:
   958                           	opt stack 0
   959                           
   960                           ; 1 bytes @ 0x5
   961  000006                     	ds	1
   962  000007                     ??i2__tdiv_to_l_:
   963  000007                     ??i2___ftge:
   964  000007                     ?i2___awdiv:
   965                           	opt stack 0
   966  000007                     i2___awdiv@dividend:
   967                           	opt stack 0
   968  000007                     i2__div_to_l_@quot:
   969                           	opt stack 0
   970                           
   971                           ; 4 bytes @ 0x6
   972  000007                     	ds	2
   973  000009                     ?i2___lltoft:
   974                           	opt stack 0
   975  000009                     i2___llmod@counter:
   976                           	opt stack 0
   977  000009                     i2___awdiv@divisor:
   978                           	opt stack 0
   979  000009                     i2___lldiv@quotient:
   980                           	opt stack 0
   981  000009                     i2___lltoft@c:
   982                           	opt stack 0
   983                           
   984                           ; 4 bytes @ 0x8
   985  000009                     	ds	1
   986  00000A                     i2__tdiv_to_l_@quot:
   987                           	opt stack 0
   988                           
   989                           ; 4 bytes @ 0x9
   990  00000A                     	ds	1
   991  00000B                     i2___awdiv@counter:
   992                           	opt stack 0
   993  00000B                     i2__div_to_l_@cntr:
   994                           	opt stack 0
   995                           
   996                           ; 1 bytes @ 0xA
   997  00000B                     	ds	1
   998  00000C                     i2___awdiv@sign:
   999                           	opt stack 0
  1000  00000C                     i2__div_to_l_@exp1:
  1001                           	opt stack 0
  1002                           
  1003                           ; 1 bytes @ 0xB
  1004  00000C                     	ds	1
  1005  00000D                     ??i2___lltoft:
  1006  00000D                     i2___lldiv@counter:
  1007                           	opt stack 0
  1008  00000D                     i2___awdiv@quotient:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0xC
  1012  00000D                     	ds	1
  1013  00000E                     i2__tdiv_to_l_@cntr:
  1014                           	opt stack 0
  1015                           
  1016                           ; 1 bytes @ 0xD
  1017  00000E                     	ds	1
  1018  00000F                     ?i2___wmul:
  1019                           	opt stack 0
  1020  00000F                     i2__tdiv_to_l_@exp1:
  1021                           	opt stack 0
  1022  00000F                     i2___wmul@multiplier:
  1023                           	opt stack 0
  1024                           
  1025                           ; 2 bytes @ 0xE
  1026  00000F                     	ds	2
  1027  000011                     i2___lltoft@exp:
  1028                           	opt stack 0
  1029  000011                     i2___wmul@multiplicand:
  1030                           	opt stack 0
  1031                           
  1032                           ; 2 bytes @ 0x10
  1033  000011                     	ds	2
  1034  000013                     i2___wmul@product:
  1035                           	opt stack 0
  1036                           
  1037                           ; 2 bytes @ 0x12
  1038  000013                     	ds	2
  1039  000015                     ?i2___ftmul:
  1040                           	opt stack 0
  1041  000015                     i2___ftmul@f1:
  1042                           	opt stack 0
  1043                           
  1044                           ; 3 bytes @ 0x14
  1045  000015                     	ds	3
  1046  000018                     i2___ftmul@f2:
  1047                           	opt stack 0
  1048                           
  1049                           ; 3 bytes @ 0x17
  1050  000018                     	ds	3
  1051  00001B                     ??i2___ftmul:
  1052                           
  1053                           ; 1 bytes @ 0x1A
  1054  00001B                     	ds	3
  1055  00001E                     i2___ftmul@exp:
  1056                           	opt stack 0
  1057                           
  1058                           ; 1 bytes @ 0x1D
  1059  00001E                     	ds	1
  1060  00001F                     i2___ftmul@f3_as_product:
  1061                           	opt stack 0
  1062                           
  1063                           ; 3 bytes @ 0x1E
  1064  00001F                     	ds	3
  1065  000022                     i2___ftmul@cntr:
  1066                           	opt stack 0
  1067                           
  1068                           ; 1 bytes @ 0x21
  1069  000022                     	ds	1
  1070  000023                     i2___ftmul@sign:
  1071                           	opt stack 0
  1072                           
  1073                           ; 1 bytes @ 0x22
  1074  000023                     	ds	1
  1075  000024                     ?i2_fround:
  1076                           	opt stack 0
  1077  000024                     ?i2_scale:
  1078                           	opt stack 0
  1079                           
  1080                           ; 3 bytes @ 0x23
  1081  000024                     	ds	3
  1082  000027                     i2_fround$1245:
  1083                           	opt stack 0
  1084  000027                     i2_scale$1246:
  1085                           	opt stack 0
  1086                           
  1087                           ; 3 bytes @ 0x26
  1088  000027                     	ds	3
  1089  00002A                     i2scale@scl:
  1090                           	opt stack 0
  1091  00002A                     i2_fround$1244:
  1092                           	opt stack 0
  1093                           
  1094                           ; 3 bytes @ 0x29
  1095  00002A                     	ds	1
  1096  00002B                     ?i2___fttol:
  1097                           	opt stack 0
  1098  00002B                     i2___fttol@f1:
  1099                           	opt stack 0
  1100                           
  1101                           ; 3 bytes @ 0x2A
  1102  00002B                     	ds	2
  1103  00002D                     i2fround@prec:
  1104                           	opt stack 0
  1105                           
  1106                           ; 1 bytes @ 0x2C
  1107  00002D                     	ds	1
  1108  00002E                     ?i2___ftadd:
  1109                           	opt stack 0
  1110  00002E                     i2___ftadd@f1:
  1111                           	opt stack 0
  1112                           
  1113                           ; 3 bytes @ 0x2D
  1114  00002E                     	ds	1
  1115  00002F                     ??i2___fttol:
  1116                           
  1117                           ; 1 bytes @ 0x2E
  1118  00002F                     	ds	2
  1119  000031                     i2___ftadd@f2:
  1120                           	opt stack 0
  1121                           
  1122                           ; 3 bytes @ 0x30
  1123  000031                     	ds	3
  1124  000034                     ??i2___ftadd:
  1125  000034                     i2___fttol@sign1:
  1126                           	opt stack 0
  1127                           
  1128                           ; 1 bytes @ 0x33
  1129  000034                     	ds	1
  1130  000035                     i2___fttol@lval:
  1131                           	opt stack 0
  1132                           
  1133                           ; 4 bytes @ 0x34
  1134  000035                     	ds	2
  1135  000037                     i2___ftadd@sign:
  1136                           	opt stack 0
  1137                           
  1138                           ; 1 bytes @ 0x36
  1139  000037                     	ds	1
  1140  000038                     i2___ftadd@exp2:
  1141                           	opt stack 0
  1142                           
  1143                           ; 1 bytes @ 0x37
  1144  000038                     	ds	1
  1145  000039                     i2___ftadd@exp1:
  1146                           	opt stack 0
  1147  000039                     i2___fttol@exp1:
  1148                           	opt stack 0
  1149                           
  1150                           ; 1 bytes @ 0x38
  1151  000039                     	ds	1
  1152  00003A                     ?i2___ftsub:
  1153                           	opt stack 0
  1154  00003A                     i2___ftsub@f1:
  1155                           	opt stack 0
  1156                           
  1157                           ; 3 bytes @ 0x39
  1158  00003A                     	ds	3
  1159  00003D                     i2___ftsub@f2:
  1160                           	opt stack 0
  1161                           
  1162                           ; 3 bytes @ 0x3C
  1163  00003D                     	ds	3
  1164  000040                     ?i2_printf:
  1165                           	opt stack 0
  1166  000040                     i2printf@f:
  1167                           	opt stack 0
  1168                           
  1169                           ; 2 bytes @ 0x3F
  1170  000040                     	ds	2
  1171  000042                     ??i2_printf:
  1172                           
  1173                           ; 1 bytes @ 0x41
  1174  000042                     	ds	6
  1175  000048                     i2_printf$1247:
  1176                           	opt stack 0
  1177                           
  1178                           ; 3 bytes @ 0x47
  1179  000048                     	ds	3
  1180  00004B                     i2printf@idx:
  1181                           	opt stack 0
  1182                           
  1183                           ; 1 bytes @ 0x4A
  1184  00004B                     	ds	1
  1185  00004C                     i2printf@ap:
  1186                           	opt stack 0
  1187                           
  1188                           ; 2 bytes @ 0x4B
  1189  00004C                     	ds	2
  1190  00004E                     i2printf@flag:
  1191                           	opt stack 0
  1192                           
  1193                           ; 2 bytes @ 0x4D
  1194  00004E                     	ds	2
  1195  000050                     i2printf@prec:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x4F
  1199  000050                     	ds	2
  1200  000052                     i2printf@val:
  1201                           	opt stack 0
  1202                           
  1203                           ; 4 bytes @ 0x51
  1204  000052                     	ds	4
  1205  000056                     i2printf@exp:
  1206                           	opt stack 0
  1207                           
  1208                           ; 2 bytes @ 0x55
  1209  000056                     	ds	2
  1210  000058                     i2printf@tmpval:
  1211                           	opt stack 0
  1212                           
  1213                           ; 4 bytes @ 0x57
  1214  000058                     	ds	4
  1215  00005C                     i2printf@fval:
  1216                           	opt stack 0
  1217                           
  1218                           ; 3 bytes @ 0x5B
  1219  00005C                     	ds	3
  1220  00005F                     i2printf@c:
  1221                           	opt stack 0
  1222                           
  1223                           ; 1 bytes @ 0x5E
  1224  00005F                     	ds	1
  1225  000060                     ??_lol:
  1226                           
  1227                           ; 1 bytes @ 0x5F
  1228  000060                     	ds	14
  1229                           tblptru	equ	0xFF8
  1230                           
  1231 ;;
  1232 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1233 ;;
  1234 ;; *************** function _main *****************
  1235 ;; Defined at:
  1236 ;;		line 31 in file "main.c"
  1237 ;; Parameters:    Size  Location     Type
  1238 ;;		None
  1239 ;; Auto vars:     Size  Location     Type
  1240 ;;		None
  1241 ;; Return value:  Size  Location     Type
  1242 ;;                  1    wreg      void 
  1243 ;; Registers used:
  1244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1245 ;; Tracked objects:
  1246 ;;		On entry : 0/0
  1247 ;;		On exit  : 0/0
  1248 ;;		Unchanged: 0/0
  1249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1251 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1253 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1254 ;;Total ram usage:        3 bytes
  1255 ;; Hardware stack levels required when called:   12
  1256 ;; This function calls:
  1257 ;;		_initLCD
  1258 ;;		_printf
  1259 ;;		_testFrequency
  1260 ;; This function is called by:
  1261 ;;		Startup code after reset
  1262 ;; This function uses a non-reentrant model
  1263 ;;
  1264                           
  1265                           	psect	text0
  1266  0047C8                     __ptext0:
  1267                           	opt stack 0
  1268  0047C8                     _main:
  1269                           	opt stack 19
  1270                           
  1271                           ;main.c: 34: TRISA = 0xFF;
  1272                           
  1273                           ;incstack = 0
  1274  0047C8  6892               	setf	3986,c	;volatile
  1275                           
  1276                           ;main.c: 35: TRISB = 0xFF;
  1277  0047CA  6893               	setf	3987,c	;volatile
  1278                           
  1279                           ;main.c: 36: TRISC = 0x00;
  1280  0047CC  0E00               	movlw	0
  1281  0047CE  6E94               	movwf	3988,c	;volatile
  1282                           
  1283                           ;main.c: 37: TRISD = 0x00;
  1284  0047D0  0E00               	movlw	0
  1285  0047D2  6E95               	movwf	3989,c	;volatile
  1286                           
  1287                           ;main.c: 38: TRISE = 0x00;
  1288  0047D4  0E00               	movlw	0
  1289  0047D6  6E96               	movwf	3990,c	;volatile
  1290                           
  1291                           ;main.c: 40: LATA = 0x00;
  1292  0047D8  0E00               	movlw	0
  1293  0047DA  6E89               	movwf	3977,c	;volatile
  1294                           
  1295                           ;main.c: 41: LATB = 0x00;
  1296  0047DC  0E00               	movlw	0
  1297  0047DE  6E8A               	movwf	3978,c	;volatile
  1298                           
  1299                           ;main.c: 42: LATC = 0x00;
  1300  0047E0  0E00               	movlw	0
  1301  0047E2  6E8B               	movwf	3979,c	;volatile
  1302                           
  1303                           ;main.c: 43: LATD = 0x00;
  1304  0047E4  0E00               	movlw	0
  1305  0047E6  6E8C               	movwf	3980,c	;volatile
  1306                           
  1307                           ;main.c: 44: LATE = 0x00;
  1308  0047E8  0E00               	movlw	0
  1309  0047EA  6E8D               	movwf	3981,c	;volatile
  1310                           
  1311                           ;main.c: 46: ADCON0 = 0x00;
  1312  0047EC  0E00               	movlw	0
  1313  0047EE  6EC2               	movwf	4034,c	;volatile
  1314                           
  1315                           ;main.c: 47: ADCON1 |= 0x0A;
  1316  0047F0  0E0A               	movlw	10
  1317  0047F2  12C1               	iorwf	4033,f,c	;volatile
  1318                           
  1319                           ;main.c: 51: ADCON2 = 0;
  1320  0047F4  0E00               	movlw	0
  1321  0047F6  6EC0               	movwf	4032,c	;volatile
  1322                           
  1323                           ;main.c: 52: ADCON2 |= 0b001;
  1324  0047F8  80C0               	bsf	4032,0,c	;volatile
  1325                           
  1326                           ;main.c: 53: ADCON2 |= 0b110<<3;
  1327  0047FA  0E30               	movlw	48
  1328  0047FC  12C0               	iorwf	4032,f,c	;volatile
  1329                           
  1330                           ;main.c: 54: ADCON2 |= 1<<7;
  1331  0047FE  8EC0               	bsf	4032,7,c	;volatile
  1332                           
  1333                           ;main.c: 56: initLCD();
  1334  004800  EC2F  F025         	call	_initLCD	;wreg free
  1335                           
  1336                           ;main.c: 58: printf("%f",testFrequency());
  1337  004804  EC52  F015         	call	_testFrequency	;wreg free
  1338  004808  C0E3  F0EA         	movff	?_testFrequency,_main$1071
  1339  00480C  C0E4  F0EB         	movff	?_testFrequency+1,_main$1071+1
  1340  004810  C0E5  F0EC         	movff	?_testFrequency+2,_main$1071+2
  1341                           
  1342                           ;main.c: 58: printf("%f",testFrequency());
  1343  004814  0EDB               	movlw	low STR_3
  1344  004816  0100               	movlb	0	; () banked
  1345  004818  6FBF               	movwf	printf@f& (0+255),b
  1346  00481A  0E10               	movlw	high STR_3
  1347  00481C  0100               	movlb	0	; () banked
  1348  00481E  6FC0               	movwf	(printf@f+1)& (0+255),b
  1349  004820  C0EA  F0C1         	movff	_main$1071,?_printf+2
  1350  004824  C0EB  F0C2         	movff	_main$1071+1,?_printf+3
  1351  004828  C0EC  F0C3         	movff	_main$1071+2,?_printf+4
  1352  00482C  EC72  F008         	call	_printf	;wreg free
  1353  004830                     l44:
  1354  004830  D7FF               	goto	l44
  1355  004832                     __end_of_main:
  1356                           	opt stack 0
  1357                           tblptru	equ	0xFF8
  1358                           
  1359 ;; *************** function _testFrequency *****************
  1360 ;; Defined at:
  1361 ;;		line 65 in file "timer.c"
  1362 ;; Parameters:    Size  Location     Type
  1363 ;;		None
  1364 ;; Auto vars:     Size  Location     Type
  1365 ;;  count           4   21[BANK1 ] long 
  1366 ;;  i               1   32[BANK1 ] unsigned char 
  1367 ;;  i               1   31[BANK1 ] unsigned char 
  1368 ;;  time           14    7[BANK1 ] int [7]
  1369 ;;  datetime        7    0[BANK1 ] const unsigned char [7]
  1370 ;;  first           2   29[BANK1 ] int 
  1371 ;;  timerOff        2   27[BANK1 ] int 
  1372 ;;  prev            2   25[BANK1 ] int 
  1373 ;; Return value:  Size  Location     Type
  1374 ;;                  3   99[BANK0 ] float 
  1375 ;; Registers used:
  1376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1377 ;; Tracked objects:
  1378 ;;		On entry : 0/0
  1379 ;;		On exit  : 0/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1382 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1383 ;;      Locals:         0       0      33       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1384 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1385 ;;      Totals:         0       7      33       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1386 ;;Total ram usage:       40 bytes
  1387 ;; Hardware stack levels used:    1
  1388 ;; Hardware stack levels required when called:   11
  1389 ;; This function calls:
  1390 ;;		_I2C_Master_Init
  1391 ;;		_I2C_Master_Read
  1392 ;;		_I2C_Master_Start
  1393 ;;		_I2C_Master_Stop
  1394 ;;		_I2C_Master_Write
  1395 ;;		___altoft
  1396 ;;		___ftdiv
  1397 ;;		_initT0
  1398 ;;		_printf
  1399 ;;		_startT0
  1400 ;; This function is called by:
  1401 ;;		_main
  1402 ;; This function uses a non-reentrant model
  1403 ;;
  1404                           
  1405                           	psect	text1
  1406  002AA4                     __ptext1:
  1407                           	opt stack 0
  1408  002AA4                     _testFrequency:
  1409                           	opt stack 19
  1410                           
  1411                           ;timer.c: 66: const char datetime[7] = {
  1412                           ;timer.c: 67: 0x45,
  1413                           ;timer.c: 68: 0x59,
  1414                           ;timer.c: 69: 0x23,
  1415                           ;timer.c: 70: 0x07,
  1416                           ;timer.c: 71: 0x31,
  1417                           ;timer.c: 72: 0x12,
  1418                           ;timer.c: 73: 0x16
  1419                           ;timer.c: 74: };
  1420                           
  1421                           ;incstack = 0
  1422  002AA4  0EA8               	movlw	low testFrequency@F2960
  1423  002AA6  6EF6               	movwf	tblptrl,c
  1424  002AA8                     	if	1	;There is more than 1 active tblptr byte
  1425  002AA8  0E10               	movlw	high testFrequency@F2960
  1426  002AAA  6EF7               	movwf	tblptrh,c
  1427  002AAC                     	endif
  1428  002AAC                     	if	0	;There are less than 3 active tblptr bytes
  1429  002AAC                     	endif
  1430  002AAC  EE21  F000         	lfsr	2,testFrequency@datetime
  1431  002AB0  0E06               	movlw	6
  1432  002AB2                     u5130:
  1433  002AB2  0009               	tblrd		*+
  1434  002AB4  CFF5 FFDE          	movff	tablat,postinc2
  1435  002AB8  06E8               	decf	wreg,f,c
  1436  002ABA  E2FB               	bc	u5130
  1437                           
  1438                           ;timer.c: 76: (INTCONbits.GIE = 0);
  1439  002ABC  9EF2               	bcf	intcon,7,c	;volatile
  1440                           
  1441                           ;timer.c: 77: I2C_Master_Init(10000);
  1442  002ABE  0E10               	movlw	16
  1443  002AC0  0100               	movlb	0	; () banked
  1444  002AC2  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  1445  002AC4  0E27               	movlw	39
  1446  002AC6  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1447  002AC8  0E00               	movlw	0
  1448  002ACA  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1449  002ACC  0E00               	movlw	0
  1450  002ACE  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1451  002AD0  EC80  F024         	call	_I2C_Master_Init	;wreg free
  1452                           
  1453                           ;timer.c: 79: I2C_Master_Start();
  1454  002AD4  EC5F  F026         	call	_I2C_Master_Start	;wreg free
  1455                           
  1456                           ;timer.c: 80: I2C_Master_Write(0b11010000);
  1457  002AD8  0E00               	movlw	0
  1458  002ADA  0100               	movlb	0	; () banked
  1459  002ADC  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1460  002ADE  0ED0               	movlw	208
  1461  002AE0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  1462  002AE2  EC4E  F026         	call	_I2C_Master_Write	;wreg free
  1463                           
  1464                           ;timer.c: 81: I2C_Master_Write(0x00);
  1465  002AE6  0E00               	movlw	0
  1466  002AE8  0100               	movlb	0	; () banked
  1467  002AEA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1468  002AEC  0E00               	movlw	0
  1469  002AEE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  1470  002AF0  EC4E  F026         	call	_I2C_Master_Write	;wreg free
  1471                           
  1472                           ;timer.c: 82: for(char i = 0; i < 7; i++)I2C_Master_Write(datetime[i]);
  1473  002AF4  0E00               	movlw	0
  1474  002AF6  0101               	movlb	1	; () banked
  1475  002AF8  6F1F               	movwf	testFrequency@i& (0+255),b
  1476  002AFA                     l4536:
  1477                           
  1478                           ; BSR set to: 1
  1479  002AFA  0E06               	movlw	6
  1480  002AFC  0101               	movlb	1	; () banked
  1481  002AFE  651F               	cpfsgt	testFrequency@i& (0+255),b
  1482  002B00  D001               	goto	l4540
  1483  002B02  D016               	goto	l4546
  1484  002B04                     l4540:
  1485                           
  1486                           ; BSR set to: 1
  1487  002B04  0101               	movlb	1	; () banked
  1488  002B06  511F               	movf	testFrequency@i& (0+255),w,b
  1489  002B08  0D01               	mullw	1
  1490  002B0A  0E00               	movlw	low testFrequency@datetime
  1491  002B0C  24F3               	addwf	prodl,w,c
  1492  002B0E  6ED9               	movwf	fsr2l,c
  1493  002B10  0E01               	movlw	high testFrequency@datetime
  1494  002B12  20F4               	addwfc	prodh,w,c
  1495  002B14  6EDA               	movwf	fsr2h,c
  1496  002B16  50DF               	movf	indf2,w,c
  1497  002B18  0100               	movlb	0	; () banked
  1498  002B1A  6FE6               	movwf	??_testFrequency& (0+255),b
  1499  002B1C  0100               	movlb	0	; () banked
  1500  002B1E  51E6               	movf	??_testFrequency& (0+255),w,b
  1501  002B20  0100               	movlb	0	; () banked
  1502  002B22  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  1503  002B24  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  1504  002B26  EC4E  F026         	call	_I2C_Master_Write	;wreg free
  1505  002B2A  0101               	movlb	1	; () banked
  1506  002B2C  2B1F               	incf	testFrequency@i& (0+255),f,b
  1507  002B2E  D7E5               	goto	l4536
  1508  002B30                     l4546:
  1509                           
  1510                           ; BSR set to: 1
  1511                           ;timer.c: 83: I2C_Master_Stop();
  1512  002B30  EC5B  F026         	call	_I2C_Master_Stop	;wreg free
  1513                           
  1514                           ;timer.c: 85: int time[7];
  1515                           ;timer.c: 86: int prev = 0;
  1516  002B34  0E00               	movlw	0
  1517  002B36  0101               	movlb	1	; () banked
  1518  002B38  6F1A               	movwf	(testFrequency@prev+1)& (0+255),b
  1519  002B3A  0E00               	movlw	0
  1520  002B3C  6F19               	movwf	testFrequency@prev& (0+255),b
  1521                           
  1522                           ; BSR set to: 1
  1523                           ;timer.c: 87: int timerOff = 1;
  1524  002B3E  0E00               	movlw	0
  1525  002B40  0101               	movlb	1	; () banked
  1526  002B42  6F1C               	movwf	(testFrequency@timerOff+1)& (0+255),b
  1527  002B44  0E01               	movlw	1
  1528  002B46  6F1B               	movwf	testFrequency@timerOff& (0+255),b
  1529                           
  1530                           ; BSR set to: 1
  1531                           ;timer.c: 88: int first = 1;
  1532  002B48  0E00               	movlw	0
  1533  002B4A  0101               	movlb	1	; () banked
  1534  002B4C  6F1E               	movwf	(testFrequency@first+1)& (0+255),b
  1535  002B4E  0E01               	movlw	1
  1536  002B50  6F1D               	movwf	testFrequency@first& (0+255),b
  1537                           
  1538                           ; BSR set to: 1
  1539                           ;timer.c: 89: (INTCONbits.GIE = 1);
  1540  002B52  8EF2               	bsf	intcon,7,c	;volatile
  1541  002B54                     l4556:
  1542                           
  1543                           ;timer.c: 93: I2C_Master_Start();
  1544  002B54  EC5F  F026         	call	_I2C_Master_Start	;wreg free
  1545                           
  1546                           ;timer.c: 94: I2C_Master_Write(0b11010000);
  1547  002B58  0E00               	movlw	0
  1548  002B5A  0100               	movlb	0	; () banked
  1549  002B5C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1550  002B5E  0ED0               	movlw	208
  1551  002B60  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  1552  002B62  EC4E  F026         	call	_I2C_Master_Write	;wreg free
  1553                           
  1554                           ;timer.c: 95: I2C_Master_Write(0x00);
  1555  002B66  0E00               	movlw	0
  1556  002B68  0100               	movlb	0	; () banked
  1557  002B6A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1558  002B6C  0E00               	movlw	0
  1559  002B6E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  1560  002B70  EC4E  F026         	call	_I2C_Master_Write	;wreg free
  1561                           
  1562                           ;timer.c: 96: I2C_Master_Stop();
  1563  002B74  EC5B  F026         	call	_I2C_Master_Stop	;wreg free
  1564                           
  1565                           ;timer.c: 99: I2C_Master_Start();
  1566  002B78  EC5F  F026         	call	_I2C_Master_Start	;wreg free
  1567                           
  1568                           ;timer.c: 100: I2C_Master_Write(0b11010001);
  1569  002B7C  0E00               	movlw	0
  1570  002B7E  0100               	movlb	0	; () banked
  1571  002B80  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1572  002B82  0ED1               	movlw	209
  1573  002B84  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  1574  002B86  EC4E  F026         	call	_I2C_Master_Write	;wreg free
  1575                           
  1576                           ;timer.c: 102: for(unsigned char i=0;i<0x06;i++){
  1577  002B8A  0E00               	movlw	0
  1578  002B8C  0101               	movlb	1	; () banked
  1579  002B8E  6F20               	movwf	testFrequency@i_390& (0+255),b
  1580  002B90                     l4570:
  1581                           
  1582                           ; BSR set to: 1
  1583  002B90  0E05               	movlw	5
  1584  002B92  0101               	movlb	1	; () banked
  1585  002B94  6520               	cpfsgt	testFrequency@i_390& (0+255),b
  1586  002B96  D001               	goto	l4574
  1587  002B98  D016               	goto	l4580
  1588  002B9A                     l4574:
  1589                           
  1590                           ; BSR set to: 1
  1591                           ;timer.c: 103: time[i] = I2C_Master_Read(1);
  1592  002B9A  0E01               	movlw	1
  1593  002B9C  ECA5  F025         	call	_I2C_Master_Read
  1594  002BA0  0100               	movlb	0	; () banked
  1595  002BA2  6FE6               	movwf	??_testFrequency& (0+255),b
  1596  002BA4  6BE7               	clrf	(??_testFrequency+1)& (0+255),b
  1597  002BA6  0101               	movlb	1	; () banked
  1598  002BA8  5120               	movf	testFrequency@i_390& (0+255),w,b
  1599  002BAA  0D02               	mullw	2
  1600  002BAC  0E07               	movlw	low testFrequency@time
  1601  002BAE  24F3               	addwf	prodl,w,c
  1602  002BB0  6ED9               	movwf	fsr2l,c
  1603  002BB2  0E01               	movlw	high testFrequency@time
  1604  002BB4  20F4               	addwfc	prodh,w,c
  1605  002BB6  6EDA               	movwf	fsr2h,c
  1606  002BB8  C0E6  FFDE         	movff	??_testFrequency,postinc2
  1607  002BBC  C0E7  FFDD         	movff	??_testFrequency+1,postdec2
  1608                           
  1609                           ; BSR set to: 1
  1610  002BC0  0101               	movlb	1	; () banked
  1611  002BC2  2B20               	incf	testFrequency@i_390& (0+255),f,b
  1612  002BC4  D7E5               	goto	l4570
  1613  002BC6                     l4580:
  1614                           
  1615                           ; BSR set to: 1
  1616                           ;timer.c: 104: }
  1617                           ;timer.c: 105: time[6] = I2C_Master_Read(0);
  1618  002BC6  0E00               	movlw	0
  1619  002BC8  ECA5  F025         	call	_I2C_Master_Read
  1620  002BCC  0100               	movlb	0	; () banked
  1621  002BCE  6FE6               	movwf	??_testFrequency& (0+255),b
  1622  002BD0  0100               	movlb	0	; () banked
  1623  002BD2  51E6               	movf	??_testFrequency& (0+255),w,b
  1624  002BD4  0101               	movlb	1	; () banked
  1625  002BD6  6F13               	movwf	(testFrequency@time+12)& (0+255),b
  1626  002BD8  6B14               	clrf	(testFrequency@time+13)& (0+255),b
  1627                           
  1628                           ;timer.c: 106: I2C_Master_Stop();
  1629  002BDA  EC5B  F026         	call	_I2C_Master_Stop	;wreg free
  1630                           
  1631                           ;timer.c: 108: if(time[0]^prev){
  1632  002BDE  0101               	movlb	1	; () banked
  1633  002BE0  5119               	movf	testFrequency@prev& (0+255),w,b
  1634  002BE2  0101               	movlb	1	; () banked
  1635  002BE4  1907               	xorwf	testFrequency@time& (0+255),w,b
  1636  002BE6  0100               	movlb	0	; () banked
  1637  002BE8  6FE6               	movwf	??_testFrequency& (0+255),b
  1638  002BEA  0101               	movlb	1	; () banked
  1639  002BEC  511A               	movf	(testFrequency@prev+1)& (0+255),w,b
  1640  002BEE  0101               	movlb	1	; () banked
  1641  002BF0  1908               	xorwf	(testFrequency@time+1)& (0+255),w,b
  1642  002BF2  0100               	movlb	0	; () banked
  1643  002BF4  6FE7               	movwf	(??_testFrequency+1)& (0+255),b
  1644  002BF6  0100               	movlb	0	; () banked
  1645  002BF8  51E6               	movf	??_testFrequency& (0+255),w,b
  1646  002BFA  0100               	movlb	0	; () banked
  1647  002BFC  11E7               	iorwf	(??_testFrequency+1)& (0+255),w,b
  1648  002BFE  B4D8               	btfsc	status,2,c
  1649  002C00  D096               	goto	l273
  1650                           
  1651                           ; BSR set to: 0
  1652                           ;timer.c: 109: if(first)
  1653  002C02  0101               	movlb	1	; () banked
  1654  002C04  511D               	movf	testFrequency@first& (0+255),w,b
  1655  002C06  0101               	movlb	1	; () banked
  1656  002C08  111E               	iorwf	(testFrequency@first+1)& (0+255),w,b
  1657  002C0A  B4D8               	btfsc	status,2,c
  1658  002C0C  D006               	goto	l4588
  1659                           
  1660                           ; BSR set to: 1
  1661                           ;timer.c: 110: first = 0;
  1662  002C0E  0E00               	movlw	0
  1663  002C10  0101               	movlb	1	; () banked
  1664  002C12  6F1E               	movwf	(testFrequency@first+1)& (0+255),b
  1665  002C14  0E00               	movlw	0
  1666  002C16  6F1D               	movwf	testFrequency@first& (0+255),b
  1667  002C18  D08A               	goto	l273
  1668  002C1A                     l4588:
  1669                           
  1670                           ; BSR set to: 1
  1671                           ;timer.c: 111: else
  1672                           ;timer.c: 112: if(timerOff){
  1673  002C1A  0101               	movlb	1	; () banked
  1674  002C1C  511B               	movf	testFrequency@timerOff& (0+255),w,b
  1675  002C1E  0101               	movlb	1	; () banked
  1676  002C20  111C               	iorwf	(testFrequency@timerOff+1)& (0+255),w,b
  1677  002C22  B4D8               	btfsc	status,2,c
  1678  002C24  D01B               	goto	l276
  1679                           
  1680                           ; BSR set to: 1
  1681                           ;timer.c: 113: printf("t1: %x ",time[0]);
  1682  002C26  0ECC               	movlw	low STR_5
  1683  002C28  0100               	movlb	0	; () banked
  1684  002C2A  6FBF               	movwf	printf@f& (0+255),b
  1685  002C2C  0E10               	movlw	high STR_5
  1686  002C2E  0100               	movlb	0	; () banked
  1687  002C30  6FC0               	movwf	(printf@f+1)& (0+255),b
  1688  002C32  C107  F0C1         	movff	testFrequency@time,?_printf+2
  1689  002C36  C108  F0C2         	movff	testFrequency@time+1,?_printf+3
  1690  002C3A  EC72  F008         	call	_printf	;wreg free
  1691                           
  1692                           ;timer.c: 114: initT0();
  1693  002C3E  EC57  F026         	call	_initT0	;wreg free
  1694                           
  1695                           ;timer.c: 115: startT0(0);
  1696  002C42  0E00               	movlw	0
  1697  002C44  0100               	movlb	0	; () banked
  1698  002C46  6F81               	movwf	(startT0@time+1)& (0+255),b
  1699  002C48  0E00               	movlw	0
  1700  002C4A  6F80               	movwf	startT0@time& (0+255),b
  1701  002C4C  EC39  F026         	call	_startT0	;wreg free
  1702                           
  1703                           ;timer.c: 116: timerOff = 0;
  1704  002C50  0E00               	movlw	0
  1705  002C52  0101               	movlb	1	; () banked
  1706  002C54  6F1C               	movwf	(testFrequency@timerOff+1)& (0+255),b
  1707  002C56  0E00               	movlw	0
  1708  002C58  6F1B               	movwf	testFrequency@timerOff& (0+255),b
  1709                           
  1710                           ;timer.c: 117: }
  1711  002C5A  D069               	goto	l273
  1712  002C5C                     l276:
  1713                           
  1714                           ; BSR set to: 1
  1715                           ;timer.c: 118: else
  1716                           ;timer.c: 119: {
  1717                           ;timer.c: 120: (INTCONbits.GIE = 0);
  1718  002C5C  9EF2               	bcf	intcon,7,c	;volatile
  1719                           
  1720                           ; BSR set to: 1
  1721                           ;timer.c: 121: printf("%x %x\n",TMR0L, TMR0H);
  1722  002C5E  0ED4               	movlw	low STR_6
  1723  002C60  0100               	movlb	0	; () banked
  1724  002C62  6FBF               	movwf	printf@f& (0+255),b
  1725  002C64  0E10               	movlw	high STR_6
  1726  002C66  0100               	movlb	0	; () banked
  1727  002C68  6FC0               	movwf	(printf@f+1)& (0+255),b
  1728  002C6A  CFD6 F0C1          	movff	4054,?_printf+2	;volatile
  1729  002C6E  0100               	movlb	0	; () banked
  1730  002C70  6BC2               	clrf	(?_printf+3)& (0+255),b
  1731  002C72  CFD7 F0C3          	movff	4055,?_printf+4	;volatile
  1732  002C76  0100               	movlb	0	; () banked
  1733  002C78  6BC4               	clrf	(?_printf+5)& (0+255),b
  1734  002C7A  EC72  F008         	call	_printf	;wreg free
  1735                           
  1736                           ;timer.c: 122: T0CON = 0;
  1737  002C7E  0E00               	movlw	0
  1738  002C80  6ED5               	movwf	4053,c	;volatile
  1739                           
  1740                           ;timer.c: 127: long count = TMR0L + (TMR0H<<8);
  1741  002C82  50D7               	movf	4055,w,c	;volatile
  1742  002C84  0100               	movlb	0	; () banked
  1743  002C86  6FE7               	movwf	(??_testFrequency+1)& (0+255),b
  1744  002C88  6BE6               	clrf	??_testFrequency& (0+255),b
  1745  002C8A  50D6               	movf	4054,w,c	;volatile
  1746  002C8C  0100               	movlb	0	; () banked
  1747  002C8E  6FE8               	movwf	(??_testFrequency+2)& (0+255),b
  1748  002C90  6BE9               	clrf	(??_testFrequency+3)& (0+255),b
  1749  002C92  0100               	movlb	0	; () banked
  1750  002C94  51E6               	movf	??_testFrequency& (0+255),w,b
  1751  002C96  0100               	movlb	0	; () banked
  1752  002C98  27E8               	addwf	(??_testFrequency+2)& (0+255),f,b
  1753  002C9A  0100               	movlb	0	; () banked
  1754  002C9C  51E7               	movf	(??_testFrequency+1)& (0+255),w,b
  1755  002C9E  0100               	movlb	0	; () banked
  1756  002CA0  23E9               	addwfc	(??_testFrequency+3)& (0+255),f,b
  1757  002CA2  C0E8  F115         	movff	??_testFrequency+2,testFrequency@count
  1758  002CA6  C0E9  F116         	movff	??_testFrequency+3,testFrequency@count+1
  1759  002CAA  0101               	movlb	1	; () banked
  1760  002CAC  0E00               	movlw	0
  1761  002CAE  BF16               	btfsc	(testFrequency@count+1)& (0+255),7,b
  1762  002CB0  0EFF               	movlw	-1
  1763  002CB2  6F17               	movwf	(testFrequency@count+2)& (0+255),b
  1764  002CB4  6F18               	movwf	(testFrequency@count+3)& (0+255),b
  1765                           
  1766                           ; BSR set to: 1
  1767                           ;timer.c: 128: return count*128*4 / 1000000.0;
  1768  002CB6  C115  F0E6         	movff	testFrequency@count,??_testFrequency
  1769  002CBA  C116  F0E7         	movff	testFrequency@count+1,??_testFrequency+1
  1770  002CBE  C117  F0E8         	movff	testFrequency@count+2,??_testFrequency+2
  1771  002CC2  C118  F0E9         	movff	testFrequency@count+3,??_testFrequency+3
  1772  002CC6  0E07               	movlw	7
  1773  002CC8                     u5215:
  1774  002CC8  90D8               	bcf	status,0,c
  1775  002CCA  0100               	movlb	0	; () banked
  1776  002CCC  37E6               	rlcf	??_testFrequency& (0+255),f,b
  1777  002CCE  37E7               	rlcf	(??_testFrequency+1)& (0+255),f,b
  1778  002CD0  37E8               	rlcf	(??_testFrequency+2)& (0+255),f,b
  1779  002CD2  37E9               	rlcf	(??_testFrequency+3)& (0+255),f,b
  1780  002CD4  2EE8               	decfsz	wreg,f,c
  1781  002CD6  D7F8               	goto	u5215
  1782  002CD8  0E02               	movlw	2
  1783  002CDA                     u5225:
  1784  002CDA  90D8               	bcf	status,0,c
  1785  002CDC  0100               	movlb	0	; () banked
  1786  002CDE  37E6               	rlcf	??_testFrequency& (0+255),f,b
  1787  002CE0  37E7               	rlcf	(??_testFrequency+1)& (0+255),f,b
  1788  002CE2  37E8               	rlcf	(??_testFrequency+2)& (0+255),f,b
  1789  002CE4  37E9               	rlcf	(??_testFrequency+3)& (0+255),f,b
  1790  002CE6  2EE8               	decfsz	wreg,f,c
  1791  002CE8  D7F8               	goto	u5225
  1792  002CEA  C0E6  F088         	movff	??_testFrequency,___altoft@c
  1793  002CEE  C0E7  F089         	movff	??_testFrequency+1,___altoft@c+1
  1794  002CF2  C0E8  F08A         	movff	??_testFrequency+2,___altoft@c+2
  1795  002CF6  C0E9  F08B         	movff	??_testFrequency+3,___altoft@c+3
  1796  002CFA  ECC3  F021         	call	___altoft	;wreg free
  1797  002CFE  C088  F092         	movff	?___altoft,___ftdiv@f1
  1798  002D02  C089  F093         	movff	?___altoft+1,___ftdiv@f1+1
  1799  002D06  C08A  F094         	movff	?___altoft+2,___ftdiv@f1+2
  1800  002D0A  0E24               	movlw	36
  1801  002D0C  0100               	movlb	0	; () banked
  1802  002D0E  6F95               	movwf	___ftdiv@f2& (0+255),b
  1803  002D10  0E74               	movlw	116
  1804  002D12  0100               	movlb	0	; () banked
  1805  002D14  6F96               	movwf	(___ftdiv@f2+1)& (0+255),b
  1806  002D16  0E49               	movlw	73
  1807  002D18  0100               	movlb	0	; () banked
  1808  002D1A  6F97               	movwf	(___ftdiv@f2+2)& (0+255),b
  1809  002D1C  EC0B  F01C         	call	___ftdiv	;wreg free
  1810  002D20  C092  F0E3         	movff	?___ftdiv,?_testFrequency
  1811  002D24  C093  F0E4         	movff	?___ftdiv+1,?_testFrequency+1
  1812  002D28  C094  F0E5         	movff	?___ftdiv+2,?_testFrequency+2
  1813  002D2C  0012               	return	
  1814  002D2E                     l273:
  1815                           
  1816                           ;timer.c: 129: }
  1817                           ;timer.c: 131: }
  1818                           ;timer.c: 133: prev = time[0];
  1819  002D2E  C107  F119         	movff	testFrequency@time,testFrequency@prev
  1820  002D32  C108  F11A         	movff	testFrequency@time+1,testFrequency@prev+1
  1821  002D36  D70E               	goto	l4556
  1822  002D38                     __end_of_testFrequency:
  1823                           	opt stack 0
  1824                           tblptru	equ	0xFF8
  1825                           tblptrh	equ	0xFF7
  1826                           tblptrl	equ	0xFF6
  1827                           tablat	equ	0xFF5
  1828                           prodh	equ	0xFF4
  1829                           prodl	equ	0xFF3
  1830                           intcon	equ	0xFF2
  1831                           wreg	equ	0xFE8
  1832                           indf2	equ	0xFDF
  1833                           postinc2	equ	0xFDE
  1834                           postdec2	equ	0xFDD
  1835                           fsr2h	equ	0xFDA
  1836                           fsr2l	equ	0xFD9
  1837                           status	equ	0xFD8
  1838                           
  1839 ;; *************** function _startT0 *****************
  1840 ;; Defined at:
  1841 ;;		line 54 in file "timer.c"
  1842 ;; Parameters:    Size  Location     Type
  1843 ;;  time            2    0[BANK0 ] int 
  1844 ;; Auto vars:     Size  Location     Type
  1845 ;;		None
  1846 ;; Return value:  Size  Location     Type
  1847 ;;                  1    wreg      void 
  1848 ;; Registers used:
  1849 ;;		wreg, status,2, status,0
  1850 ;; Tracked objects:
  1851 ;;		On entry : 0/0
  1852 ;;		On exit  : 0/0
  1853 ;;		Unchanged: 0/0
  1854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1855 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1858 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1859 ;;Total ram usage:        2 bytes
  1860 ;; Hardware stack levels used:    1
  1861 ;; Hardware stack levels required when called:    6
  1862 ;; This function calls:
  1863 ;;		Nothing
  1864 ;; This function is called by:
  1865 ;;		_testFrequency
  1866 ;; This function uses a non-reentrant model
  1867 ;;
  1868                           
  1869                           	psect	text2
  1870  004C72                     __ptext2:
  1871                           	opt stack 0
  1872  004C72                     _startT0:
  1873                           	opt stack 23
  1874                           
  1875                           ;timer.c: 55: T0CON = 0;
  1876                           
  1877                           ;incstack = 0
  1878  004C72  0E00               	movlw	0
  1879  004C74  6ED5               	movwf	4053,c	;volatile
  1880                           
  1881                           ;timer.c: 58: T0CON |= 0b110;
  1882  004C76  0E06               	movlw	6
  1883  004C78  12D5               	iorwf	4053,f,c	;volatile
  1884                           
  1885                           ;timer.c: 59: TMR0H = time>>8;
  1886  004C7A  0100               	movlb	0	; () banked
  1887  004C7C  5181               	movf	(startT0@time+1)& (0+255),w,b
  1888  004C7E  6ED7               	movwf	4055,c	;volatile
  1889                           
  1890                           ; BSR set to: 0
  1891                           ;timer.c: 60: TMR0L = time & 0xFF;
  1892  004C80  C080  FFD6         	movff	startT0@time,4054	;volatile
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;timer.c: 61: T0CON |= 1<<7;
  1896  004C84  8ED5               	bsf	4053,7,c	;volatile
  1897                           
  1898                           ; BSR set to: 0
  1899  004C86  0012               	return		;funcret
  1900  004C88                     __end_of_startT0:
  1901                           	opt stack 0
  1902                           tblptru	equ	0xFF8
  1903                           tblptrh	equ	0xFF7
  1904                           tblptrl	equ	0xFF6
  1905                           tablat	equ	0xFF5
  1906                           prodh	equ	0xFF4
  1907                           prodl	equ	0xFF3
  1908                           intcon	equ	0xFF2
  1909                           wreg	equ	0xFE8
  1910                           indf2	equ	0xFDF
  1911                           postinc2	equ	0xFDE
  1912                           postdec2	equ	0xFDD
  1913                           fsr2h	equ	0xFDA
  1914                           fsr2l	equ	0xFD9
  1915                           status	equ	0xFD8
  1916                           
  1917 ;; *************** function _printf *****************
  1918 ;; Defined at:
  1919 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  1920 ;; Parameters:    Size  Location     Type
  1921 ;;  f               2   63[BANK0 ] PTR const unsigned char 
  1922 ;;		 -> STR_6(7), STR_5(8), STR_4(12), STR_3(3), 
  1923 ;;		 -> STR_2(2), STR_1(2), 
  1924 ;; Auto vars:     Size  Location     Type
  1925 ;;  idx             1   78[BANK0 ] unsigned char 
  1926 ;;  tmpval          4   91[BANK0 ] struct .
  1927 ;;  val             4   85[BANK0 ] unsigned long 
  1928 ;;  fval            3   95[BANK0 ] unsigned long 
  1929 ;;  cp              3    0        PTR const unsigned char 
  1930 ;;  exp             2   89[BANK0 ] int 
  1931 ;;  prec            2   83[BANK0 ] int 
  1932 ;;  flag            2   81[BANK0 ] unsigned short 
  1933 ;;  ap              2   79[BANK0 ] PTR void [1]
  1934 ;;		 -> ?i2_printf(2), ?_printf(2), 
  1935 ;;  len             2    0        unsigned int 
  1936 ;;  width           2    0        int 
  1937 ;;  c               1   98[BANK0 ] char 
  1938 ;;  d               1    0        unsigned char 
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  2   63[BANK0 ] int 
  1941 ;; Registers used:
  1942 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1948 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1949 ;;      Locals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1950 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1951 ;;      Totals:         0      36       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1952 ;;Total ram usage:       36 bytes
  1953 ;; Hardware stack levels used:    1
  1954 ;; Hardware stack levels required when called:   10
  1955 ;; This function calls:
  1956 ;;		___awdiv
  1957 ;;		___ftadd
  1958 ;;		___ftge
  1959 ;;		___ftmul
  1960 ;;		___ftneg
  1961 ;;		___ftsub
  1962 ;;		___fttol
  1963 ;;		___lldiv
  1964 ;;		___llmod
  1965 ;;		___lltoft
  1966 ;;		___wmul
  1967 ;;		__div_to_l_
  1968 ;;		__tdiv_to_l_
  1969 ;;		_fround
  1970 ;;		_putch
  1971 ;;		_scale
  1972 ;; This function is called by:
  1973 ;;		_main
  1974 ;;		_testFrequency
  1975 ;;		_printb
  1976 ;; This function uses a non-reentrant model
  1977 ;;
  1978                           
  1979                           	psect	text3
  1980  0010E4                     __ptext3:
  1981                           	opt stack 0
  1982  0010E4                     _printf:
  1983                           	opt stack 19
  1984                           
  1985                           ;doprnt.c: 466: va_list ap;
  1986                           ;doprnt.c: 499: signed char c;
  1987                           ;doprnt.c: 501: int width;
  1988                           ;doprnt.c: 504: int prec;
  1989                           ;doprnt.c: 508: unsigned short flag;
  1990                           ;doprnt.c: 515: char d;
  1991                           ;doprnt.c: 516: double fval;
  1992                           ;doprnt.c: 517: int exp;
  1993                           ;doprnt.c: 523: union {
  1994                           ;doprnt.c: 524: unsigned long vd;
  1995                           ;doprnt.c: 525: double integ;
  1996                           ;doprnt.c: 526: } tmpval;
  1997                           ;doprnt.c: 528: unsigned long val;
  1998                           ;doprnt.c: 529: unsigned len;
  1999                           ;doprnt.c: 530: const char * cp;
  2000                           ;doprnt.c: 533: *ap = __va_start();
  2001                           
  2002                           ; BSR set to: 0
  2003                           ;incstack = 0
  2004  0010E4  0EC1               	movlw	low (?_printf+2)
  2005  0010E6  0100               	movlb	0	; () banked
  2006  0010E8  6FCF               	movwf	printf@ap& (0+255),b
  2007  0010EA  0E00               	movlw	high (?_printf+2)
  2008  0010EC  0100               	movlb	0	; () banked
  2009  0010EE  6FD0               	movwf	(printf@ap+1)& (0+255),b
  2010                           
  2011                           ;doprnt.c: 536: while(c = *f++) {
  2012  0010F0  D3CF               	goto	l4090
  2013  0010F2                     l3914:
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;doprnt.c: 538: if(c != '%')
  2017  0010F2  0E25               	movlw	37
  2018  0010F4  0100               	movlb	0	; () banked
  2019  0010F6  19E2               	xorwf	printf@c& (0+255),w,b
  2020  0010F8  B4D8               	btfsc	status,2,c
  2021  0010FA  D005               	goto	l3918
  2022                           
  2023                           ; BSR set to: 0
  2024                           ;doprnt.c: 540: {
  2025                           ;doprnt.c: 541: (putch(c) );
  2026  0010FC  0100               	movlb	0	; () banked
  2027  0010FE  51E2               	movf	printf@c& (0+255),w,b
  2028  001100  ECD1  F025         	call	_putch
  2029                           
  2030                           ;doprnt.c: 542: continue;
  2031  001104  D3C5               	goto	l4090
  2032  001106                     l3918:
  2033                           
  2034                           ;doprnt.c: 543: }
  2035                           ;doprnt.c: 548: flag = 0;
  2036  001106  0E00               	movlw	0
  2037  001108  0100               	movlb	0	; () banked
  2038  00110A  6FD2               	movwf	(printf@flag+1)& (0+255),b
  2039  00110C  0E00               	movlw	0
  2040  00110E  6FD1               	movwf	printf@flag& (0+255),b
  2041                           
  2042                           ;doprnt.c: 635: switch(c = *f++) {
  2043  001110  D003               	goto	l3924
  2044  001112                     l3920:
  2045                           
  2046                           ; BSR set to: 0
  2047                           ;doprnt.c: 663: flag |= 0x400;
  2048  001112  0100               	movlb	0	; () banked
  2049  001114  85D2               	bsf	(printf@flag+1)& (0+255),2,b
  2050                           
  2051                           ; BSR set to: 0
  2052                           ;doprnt.c: 723: break;
  2053                           
  2054                           ;doprnt.c: 718: case 'x':
  2055                           
  2056                           ;doprnt.c: 664: break;
  2057  001116  D015               	goto	l3926
  2058  001118                     l3924:
  2059                           
  2060                           ; BSR set to: 0
  2061  001118  C0BF  FFF6         	movff	printf@f,tblptrl
  2062  00111C  C0C0  FFF7         	movff	printf@f+1,tblptrh
  2063  001120  0100               	movlb	0	; () banked
  2064  001122  4BBF               	infsnz	printf@f& (0+255),f,b
  2065  001124  2BC0               	incf	(printf@f+1)& (0+255),f,b
  2066  001126                     	if	0	;tblptru may be non-zero
  2067  001126                     	endif
  2068  001126                     	if	0	;tblptru may be non-zero
  2069  001126                     	endif
  2070  001126  0008               	tblrd		*
  2071  001128  CFF5 F0E2          	movff	tablat,printf@c
  2072  00112C  0100               	movlb	0	; () banked
  2073  00112E  51E2               	movf	printf@c& (0+255),w,b
  2074                           
  2075                           ; Switch size 1, requested type "space"
  2076                           ; Number of cases is 3, Range of values is 0 to 120
  2077                           ; switch strategies available:
  2078                           ; Name         Instructions Cycles
  2079                           ; simple_byte           10     6 (average)
  2080                           ;	Chosen strategy is simple_byte
  2081  001130  0A00               	xorlw	0	; case 0
  2082  001132  B4D8               	btfsc	status,2,c
  2083  001134  0012               	return	
  2084  001136  0A66               	xorlw	102	; case 102
  2085  001138  B4D8               	btfsc	status,2,c
  2086  00113A  D7EB               	goto	l3920
  2087  00113C  0A1E               	xorlw	30	; case 120
  2088  00113E  A4D8               	btfss	status,2,c
  2089  001140  D3A7               	goto	l4090
  2090  001142                     l3926:
  2091                           
  2092                           ; BSR set to: 0
  2093                           ;doprnt.c: 825: if(flag & (0x700)) {
  2094  001142  0E07               	movlw	7
  2095  001144  0100               	movlb	0	; () banked
  2096  001146  15D2               	andwf	(printf@flag+1)& (0+255),w,b
  2097  001148  B4D8               	btfsc	status,2,c
  2098  00114A  D304               	goto	l4058
  2099                           
  2100                           ; BSR set to: 0
  2101                           ;doprnt.c: 829: prec = 6;
  2102  00114C  0E00               	movlw	0
  2103  00114E  0100               	movlb	0	; () banked
  2104  001150  6FD4               	movwf	(printf@prec+1)& (0+255),b
  2105  001152  0E06               	movlw	6
  2106  001154  6FD3               	movwf	printf@prec& (0+255),b
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2110  001156  C0CF  FFD9         	movff	printf@ap,fsr2l
  2111  00115A  C0D0  FFDA         	movff	printf@ap+1,fsr2h
  2112  00115E  CFDE F0DF          	movff	postinc2,printf@fval
  2113  001162  CFDE F0E0          	movff	postinc2,printf@fval+1
  2114  001166  CFDD F0E1          	movff	postdec2,printf@fval+2
  2115                           
  2116                           ; BSR set to: 0
  2117  00116A  0E03               	movlw	3
  2118  00116C  0100               	movlb	0	; () banked
  2119  00116E  27CF               	addwf	printf@ap& (0+255),f,b
  2120  001170  0E00               	movlw	0
  2121  001172  23D0               	addwfc	(printf@ap+1)& (0+255),f,b
  2122                           
  2123                           ; BSR set to: 0
  2124                           ;doprnt.c: 831: if(fval < 0.0) {
  2125  001174  0100               	movlb	0	; () banked
  2126  001176  AFE1               	btfss	(printf@fval+2)& (0+255),7,b
  2127  001178  D011               	goto	l3940
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;doprnt.c: 832: fval = -fval;
  2131  00117A  C0DF  F080         	movff	printf@fval,___ftneg@f1
  2132  00117E  C0E0  F081         	movff	printf@fval+1,___ftneg@f1+1
  2133  001182  C0E1  F082         	movff	printf@fval+2,___ftneg@f1+2
  2134  001186  EC8D  F025         	call	___ftneg	;wreg free
  2135  00118A  C080  F0DF         	movff	?___ftneg,printf@fval
  2136  00118E  C081  F0E0         	movff	?___ftneg+1,printf@fval+1
  2137  001192  C082  F0E1         	movff	?___ftneg+2,printf@fval+2
  2138                           
  2139                           ;doprnt.c: 833: flag |= 0x03;
  2140  001196  0E03               	movlw	3
  2141  001198  0100               	movlb	0	; () banked
  2142  00119A  13D1               	iorwf	printf@flag& (0+255),f,b
  2143  00119C                     l3940:
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;doprnt.c: 834: }
  2147                           ;doprnt.c: 835: exp = 0;
  2148  00119C  0E00               	movlw	0
  2149  00119E  0100               	movlb	0	; () banked
  2150  0011A0  6FDA               	movwf	(printf@exp+1)& (0+255),b
  2151  0011A2  0E00               	movlw	0
  2152  0011A4  6FD9               	movwf	printf@exp& (0+255),b
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;doprnt.c: 836: if( fval!=0) {
  2156  0011A6  0100               	movlb	0	; () banked
  2157  0011A8  51DF               	movf	printf@fval& (0+255),w,b
  2158  0011AA  0100               	movlb	0	; () banked
  2159  0011AC  11E0               	iorwf	(printf@fval+1)& (0+255),w,b
  2160  0011AE  0100               	movlb	0	; () banked
  2161  0011B0  11E1               	iorwf	(printf@fval+2)& (0+255),w,b
  2162  0011B2  B4D8               	btfsc	status,2,c
  2163  0011B4  D09B               	goto	l3968
  2164                           
  2165                           ; BSR set to: 0
  2166                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2167  0011B6  0E82               	movlw	130
  2168  0011B8  0100               	movlb	0	; () banked
  2169  0011BA  6FC5               	movwf	??_printf& (0+255),b
  2170  0011BC  0EFF               	movlw	255
  2171  0011BE  0100               	movlb	0	; () banked
  2172  0011C0  6FC6               	movwf	(??_printf+1)& (0+255),b
  2173  0011C2  C0DF  F0C7         	movff	printf@fval,??_printf+2
  2174  0011C6  C0E0  F0C8         	movff	printf@fval+1,??_printf+3
  2175  0011CA  C0E1  F0C9         	movff	printf@fval+2,??_printf+4
  2176  0011CE  C0E2  F0CA         	movff	printf@fval+3,??_printf+5
  2177  0011D2  0E10               	movlw	16
  2178  0011D4  D006               	goto	u4330
  2179  0011D6                     u4335:
  2180  0011D6  0100               	movlb	0	; () banked
  2181  0011D8  90D8               	bcf	status,0,c
  2182  0011DA  33CA               	rrcf	(??_printf+5)& (0+255),f,b
  2183  0011DC  33C9               	rrcf	(??_printf+4)& (0+255),f,b
  2184  0011DE  33C8               	rrcf	(??_printf+3)& (0+255),f,b
  2185  0011E0  33C7               	rrcf	(??_printf+2)& (0+255),f,b
  2186  0011E2                     u4330:
  2187  0011E2  2EE8               	decfsz	wreg,f,c
  2188  0011E4  D7F8               	goto	u4335
  2189  0011E6  0100               	movlb	0	; () banked
  2190  0011E8  51C7               	movf	(??_printf+2)& (0+255),w,b
  2191  0011EA  0100               	movlb	0	; () banked
  2192  0011EC  25C5               	addwf	??_printf& (0+255),w,b
  2193  0011EE  0100               	movlb	0	; () banked
  2194  0011F0  6FD9               	movwf	printf@exp& (0+255),b
  2195  0011F2  0E00               	movlw	0
  2196  0011F4  0100               	movlb	0	; () banked
  2197  0011F6  21C6               	addwfc	(??_printf+1)& (0+255),w,b
  2198  0011F8  0100               	movlb	0	; () banked
  2199  0011FA  6FDA               	movwf	(printf@exp+1)& (0+255),b
  2200                           
  2201                           ; BSR set to: 0
  2202                           ;doprnt.c: 838: exp--;
  2203  0011FC  0100               	movlb	0	; () banked
  2204  0011FE  07D9               	decf	printf@exp& (0+255),f,b
  2205  001200  A0D8               	btfss	status,0,c
  2206  001202  07DA               	decf	(printf@exp+1)& (0+255),f,b
  2207                           
  2208                           ; BSR set to: 0
  2209                           ;doprnt.c: 839: exp *= 3;
  2210  001204  C0D9  F08E         	movff	printf@exp,___wmul@multiplier
  2211  001208  C0DA  F08F         	movff	printf@exp+1,___wmul@multiplier+1
  2212  00120C  0E00               	movlw	0
  2213  00120E  0100               	movlb	0	; () banked
  2214  001210  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2215  001212  0E03               	movlw	3
  2216  001214  6F90               	movwf	___wmul@multiplicand& (0+255),b
  2217  001216  EC72  F025         	call	___wmul	;wreg free
  2218  00121A  C08E  F0D9         	movff	?___wmul,printf@exp
  2219  00121E  C08F  F0DA         	movff	?___wmul+1,printf@exp+1
  2220                           
  2221                           ;doprnt.c: 840: exp /= 10;
  2222  001222  C0D9  F086         	movff	printf@exp,___awdiv@dividend
  2223  001226  C0DA  F087         	movff	printf@exp+1,___awdiv@dividend+1
  2224  00122A  0E00               	movlw	0
  2225  00122C  0100               	movlb	0	; () banked
  2226  00122E  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  2227  001230  0E0A               	movlw	10
  2228  001232  6F88               	movwf	___awdiv@divisor& (0+255),b
  2229  001234  EC5E  F020         	call	___awdiv	;wreg free
  2230  001238  C086  F0D9         	movff	?___awdiv,printf@exp
  2231  00123C  C087  F0DA         	movff	?___awdiv+1,printf@exp+1
  2232                           
  2233                           ;doprnt.c: 841: if(exp < 0)
  2234  001240  0100               	movlb	0	; () banked
  2235  001242  AFDA               	btfss	(printf@exp+1)& (0+255),7,b
  2236  001244  D004               	goto	l3956
  2237                           
  2238                           ; BSR set to: 0
  2239                           ;doprnt.c: 842: exp--;
  2240  001246  0100               	movlb	0	; () banked
  2241  001248  07D9               	decf	printf@exp& (0+255),f,b
  2242  00124A  A0D8               	btfss	status,0,c
  2243  00124C  07DA               	decf	(printf@exp+1)& (0+255),f,b
  2244  00124E                     l3956:
  2245                           
  2246                           ; BSR set to: 0
  2247                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2248  00124E  0100               	movlb	0	; () banked
  2249  001250  51D9               	movf	printf@exp& (0+255),w,b
  2250  001252  0800               	sublw	0
  2251  001254  ECAD  F00F         	call	_scale
  2252  001258  C0A3  F0DB         	movff	?_scale,printf@tmpval
  2253  00125C  C0A4  F0DC         	movff	?_scale+1,printf@tmpval+1
  2254  001260  C0A5  F0DD         	movff	?_scale+2,printf@tmpval+2
  2255                           
  2256                           ;doprnt.c: 847: tmpval.integ *= fval;
  2257  001264  C0DB  F094         	movff	printf@tmpval,___ftmul@f1
  2258  001268  C0DC  F095         	movff	printf@tmpval+1,___ftmul@f1+1
  2259  00126C  C0DD  F096         	movff	printf@tmpval+2,___ftmul@f1+2
  2260  001270  C0DF  F097         	movff	printf@fval,___ftmul@f2
  2261  001274  C0E0  F098         	movff	printf@fval+1,___ftmul@f2+1
  2262  001278  C0E1  F099         	movff	printf@fval+2,___ftmul@f2+2
  2263  00127C  EC5C  F01B         	call	___ftmul	;wreg free
  2264  001280  C094  F0DB         	movff	?___ftmul,printf@tmpval
  2265  001284  C095  F0DC         	movff	?___ftmul+1,printf@tmpval+1
  2266  001288  C096  F0DD         	movff	?___ftmul+2,printf@tmpval+2
  2267                           
  2268                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2269  00128C  C0DB  F080         	movff	printf@tmpval,___ftge@ff1
  2270  001290  C0DC  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  2271  001294  C0DD  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  2272  001298  0E00               	movlw	0
  2273  00129A  0100               	movlb	0	; () banked
  2274  00129C  6F83               	movwf	___ftge@ff2& (0+255),b
  2275  00129E  0E80               	movlw	128
  2276  0012A0  0100               	movlb	0	; () banked
  2277  0012A2  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  2278  0012A4  0E3F               	movlw	63
  2279  0012A6  0100               	movlb	0	; () banked
  2280  0012A8  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  2281  0012AA  ECFA  F01F         	call	___ftge	;wreg free
  2282  0012AE  0100               	movlb	0	; () banked
  2283  0012B0  B0D8               	btfsc	status,0,c
  2284  0012B2  D005               	goto	l3964
  2285                           
  2286                           ; BSR set to: 0
  2287                           ;doprnt.c: 849: exp--;
  2288  0012B4  0100               	movlb	0	; () banked
  2289  0012B6  07D9               	decf	printf@exp& (0+255),f,b
  2290  0012B8  A0D8               	btfss	status,0,c
  2291  0012BA  07DA               	decf	(printf@exp+1)& (0+255),f,b
  2292  0012BC  D017               	goto	l3968
  2293  0012BE                     l3964:
  2294                           
  2295                           ; BSR set to: 0
  2296                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2297  0012BE  C0DB  F080         	movff	printf@tmpval,___ftge@ff1
  2298  0012C2  C0DC  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  2299  0012C6  C0DD  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  2300  0012CA  0E00               	movlw	0
  2301  0012CC  0100               	movlb	0	; () banked
  2302  0012CE  6F83               	movwf	___ftge@ff2& (0+255),b
  2303  0012D0  0E20               	movlw	32
  2304  0012D2  0100               	movlb	0	; () banked
  2305  0012D4  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  2306  0012D6  0E41               	movlw	65
  2307  0012D8  0100               	movlb	0	; () banked
  2308  0012DA  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  2309  0012DC  ECFA  F01F         	call	___ftge	;wreg free
  2310  0012E0  0100               	movlb	0	; () banked
  2311  0012E2  A0D8               	btfss	status,0,c
  2312  0012E4  D003               	goto	l3968
  2313                           
  2314                           ; BSR set to: 0
  2315                           ;doprnt.c: 851: exp++;
  2316  0012E6  0100               	movlb	0	; () banked
  2317  0012E8  4BD9               	infsnz	printf@exp& (0+255),f,b
  2318  0012EA  2BDA               	incf	(printf@exp+1)& (0+255),f,b
  2319  0012EC                     l3968:
  2320                           
  2321                           ; BSR set to: 0
  2322                           ;doprnt.c: 852: }
  2323                           ;doprnt.c: 1112: if(prec <= 12)
  2324  0012EC  0100               	movlb	0	; () banked
  2325  0012EE  BFD4               	btfsc	(printf@prec+1)& (0+255),7,b
  2326  0012F0  D008               	goto	l3970
  2327  0012F2  0100               	movlb	0	; () banked
  2328  0012F4  51D4               	movf	(printf@prec+1)& (0+255),w,b
  2329  0012F6  E11D               	bnz	l3972
  2330  0012F8  0E0D               	movlw	13
  2331  0012FA  0100               	movlb	0	; () banked
  2332  0012FC  5DD3               	subwf	printf@prec& (0+255),w,b
  2333  0012FE  B0D8               	btfsc	status,0,c
  2334  001300  D018               	goto	l3972
  2335  001302                     l3970:
  2336                           
  2337                           ; BSR set to: 0
  2338                           ;doprnt.c: 1113: fval += fround(prec);
  2339  001302  C0DF  F0AD         	movff	printf@fval,___ftadd@f1
  2340  001306  C0E0  F0AE         	movff	printf@fval+1,___ftadd@f1+1
  2341  00130A  C0E1  F0AF         	movff	printf@fval+2,___ftadd@f1+2
  2342  00130E  0100               	movlb	0	; () banked
  2343  001310  51D3               	movf	printf@prec& (0+255),w,b
  2344  001312  ECFC  F013         	call	_fround
  2345  001316  C0A3  F0B0         	movff	?_fround,___ftadd@f2
  2346  00131A  C0A4  F0B1         	movff	?_fround+1,___ftadd@f2+1
  2347  00131E  C0A5  F0B2         	movff	?_fround+2,___ftadd@f2+2
  2348  001322  EC9C  F016         	call	___ftadd	;wreg free
  2349  001326  C0AD  F0DF         	movff	?___ftadd,printf@fval
  2350  00132A  C0AE  F0E0         	movff	?___ftadd+1,printf@fval+1
  2351  00132E  C0AF  F0E1         	movff	?___ftadd+2,printf@fval+2
  2352  001332                     l3972:
  2353                           
  2354                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2355  001332  0100               	movlb	0	; () banked
  2356  001334  BFDA               	btfsc	(printf@exp+1)& (0+255),7,b
  2357  001336  D008               	goto	l3974
  2358  001338  0100               	movlb	0	; () banked
  2359  00133A  51DA               	movf	(printf@exp+1)& (0+255),w,b
  2360  00133C  E12A               	bnz	l3980
  2361  00133E  0E0A               	movlw	10
  2362  001340  0100               	movlb	0	; () banked
  2363  001342  5DD9               	subwf	printf@exp& (0+255),w,b
  2364  001344  B0D8               	btfsc	status,0,c
  2365  001346  D025               	goto	l3980
  2366  001348                     l3974:
  2367                           
  2368                           ; BSR set to: 0
  2369  001348  0100               	movlb	0	; () banked
  2370  00134A  51DF               	movf	printf@fval& (0+255),w,b
  2371  00134C  0100               	movlb	0	; () banked
  2372  00134E  11E0               	iorwf	(printf@fval+1)& (0+255),w,b
  2373  001350  0100               	movlb	0	; () banked
  2374  001352  11E1               	iorwf	(printf@fval+2)& (0+255),w,b
  2375  001354  B4D8               	btfsc	status,2,c
  2376  001356  D063               	goto	l3994
  2377                           
  2378                           ; BSR set to: 0
  2379  001358  C0DF  F0AA         	movff	printf@fval,___fttol@f1
  2380  00135C  C0E0  F0AB         	movff	printf@fval+1,___fttol@f1+1
  2381  001360  C0E1  F0AC         	movff	printf@fval+2,___fttol@f1+2
  2382  001364  ECB1  F01C         	call	___fttol	;wreg free
  2383  001368  0100               	movlb	0	; () banked
  2384  00136A  51AA               	movf	?___fttol& (0+255),w,b
  2385  00136C  0100               	movlb	0	; () banked
  2386  00136E  11AB               	iorwf	(?___fttol+1)& (0+255),w,b
  2387  001370  0100               	movlb	0	; () banked
  2388  001372  11AC               	iorwf	(?___fttol+2)& (0+255),w,b
  2389  001374  0100               	movlb	0	; () banked
  2390  001376  11AD               	iorwf	(?___fttol+3)& (0+255),w,b
  2391  001378  A4D8               	btfss	status,2,c
  2392  00137A  D051               	goto	l3994
  2393                           
  2394                           ; BSR set to: 0
  2395  00137C  0100               	movlb	0	; () banked
  2396  00137E  BFDA               	btfsc	(printf@exp+1)& (0+255),7,b
  2397  001380  D04E               	goto	l3994
  2398  001382  0100               	movlb	0	; () banked
  2399  001384  51DA               	movf	(printf@exp+1)& (0+255),w,b
  2400  001386  E105               	bnz	l3980
  2401  001388  0E02               	movlw	2
  2402  00138A  0100               	movlb	0	; () banked
  2403  00138C  5DD9               	subwf	printf@exp& (0+255),w,b
  2404  00138E  A0D8               	btfss	status,0,c
  2405  001390  D046               	goto	l3994
  2406  001392                     l3980:
  2407                           
  2408                           ; BSR set to: 0
  2409                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2410  001392  C0DB  F080         	movff	printf@tmpval,___ftge@ff1
  2411  001396  C0DC  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  2412  00139A  C0DD  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  2413  00139E  0E70               	movlw	112
  2414  0013A0  0100               	movlb	0	; () banked
  2415  0013A2  6F83               	movwf	___ftge@ff2& (0+255),b
  2416  0013A4  0E89               	movlw	137
  2417  0013A6  0100               	movlb	0	; () banked
  2418  0013A8  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  2419  0013AA  0E40               	movlw	64
  2420  0013AC  0100               	movlb	0	; () banked
  2421  0013AE  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  2422  0013B0  ECFA  F01F         	call	___ftge	;wreg free
  2423  0013B4  0100               	movlb	0	; () banked
  2424  0013B6  B0D8               	btfsc	status,0,c
  2425  0013B8  D003               	goto	l3984
  2426                           
  2427                           ; BSR set to: 0
  2428                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2429  0013BA  0100               	movlb	0	; () banked
  2430  0013BC  0EF7               	movlw	247
  2431  0013BE  D002               	goto	L1
  2432  0013C0                     l3984:
  2433                           
  2434                           ; BSR set to: 0
  2435                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2436  0013C0  0100               	movlb	0	; () banked
  2437  0013C2  0EF8               	movlw	248
  2438  0013C4                     L1:
  2439  0013C4  27D9               	addwf	printf@exp& (0+255),f,b
  2440  0013C6  0EFF               	movlw	255
  2441  0013C8  23DA               	addwfc	(printf@exp+1)& (0+255),f,b
  2442                           
  2443                           ; BSR set to: 0
  2444                           ;doprnt.c: 1124: }
  2445                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2446                           
  2447                           ; BSR set to: 0
  2448  0013CA  0100               	movlb	0	; () banked
  2449  0013CC  51D9               	movf	printf@exp& (0+255),w,b
  2450  0013CE  ECAD  F00F         	call	_scale
  2451  0013D2  C0A3  F0DB         	movff	?_scale,printf@tmpval
  2452  0013D6  C0A4  F0DC         	movff	?_scale+1,printf@tmpval+1
  2453  0013DA  C0A5  F0DD         	movff	?_scale+2,printf@tmpval+2
  2454                           
  2455                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2456  0013DE  C0DF  F080         	movff	printf@fval,__tdiv_to_l_@f1
  2457  0013E2  C0E0  F081         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  2458  0013E6  C0E1  F082         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  2459  0013EA  C0DB  F083         	movff	printf@tmpval,__tdiv_to_l_@f2
  2460  0013EE  C0DC  F084         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  2461  0013F2  C0DD  F085         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  2462  0013F6  ECC9  F019         	call	__tdiv_to_l_	;wreg free
  2463  0013FA  C080  F0D5         	movff	?__tdiv_to_l_,printf@val
  2464  0013FE  C081  F0D6         	movff	?__tdiv_to_l_+1,printf@val+1
  2465  001402  C082  F0D7         	movff	?__tdiv_to_l_+2,printf@val+2
  2466  001406  C083  F0D8         	movff	?__tdiv_to_l_+3,printf@val+3
  2467                           
  2468                           ;doprnt.c: 1129: fval = 0.0;
  2469  00140A  0E00               	movlw	0
  2470  00140C  0100               	movlb	0	; () banked
  2471  00140E  6FDF               	movwf	printf@fval& (0+255),b
  2472  001410  0E00               	movlw	0
  2473  001412  0100               	movlb	0	; () banked
  2474  001414  6FE0               	movwf	(printf@fval+1)& (0+255),b
  2475  001416  0E00               	movlw	0
  2476  001418  0100               	movlb	0	; () banked
  2477  00141A  6FE1               	movwf	(printf@fval+2)& (0+255),b
  2478                           
  2479                           ;doprnt.c: 1130: } else {
  2480  00141C  D033               	goto	l3998
  2481  00141E                     l3994:
  2482                           
  2483                           ; BSR set to: 0
  2484                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2485  00141E  C0DF  F0AA         	movff	printf@fval,___fttol@f1
  2486  001422  C0E0  F0AB         	movff	printf@fval+1,___fttol@f1+1
  2487  001426  C0E1  F0AC         	movff	printf@fval+2,___fttol@f1+2
  2488  00142A  ECB1  F01C         	call	___fttol	;wreg free
  2489  00142E  C0AA  F0D5         	movff	?___fttol,printf@val
  2490  001432  C0AB  F0D6         	movff	?___fttol+1,printf@val+1
  2491  001436  C0AC  F0D7         	movff	?___fttol+2,printf@val+2
  2492  00143A  C0AD  F0D8         	movff	?___fttol+3,printf@val+3
  2493                           
  2494                           ;doprnt.c: 1132: fval -= (double)val;
  2495  00143E  C0DF  F0B9         	movff	printf@fval,___ftsub@f1
  2496  001442  C0E0  F0BA         	movff	printf@fval+1,___ftsub@f1+1
  2497  001446  C0E1  F0BB         	movff	printf@fval+2,___ftsub@f1+2
  2498  00144A  C0D5  F088         	movff	printf@val,___lltoft@c
  2499  00144E  C0D6  F089         	movff	printf@val+1,___lltoft@c+1
  2500  001452  C0D7  F08A         	movff	printf@val+2,___lltoft@c+2
  2501  001456  C0D8  F08B         	movff	printf@val+3,___lltoft@c+3
  2502  00145A  EC6E  F023         	call	___lltoft	;wreg free
  2503  00145E  C088  F0BC         	movff	?___lltoft,___ftsub@f2
  2504  001462  C089  F0BD         	movff	?___lltoft+1,___ftsub@f2+1
  2505  001466  C08A  F0BE         	movff	?___lltoft+2,___ftsub@f2+2
  2506  00146A  EC09  F025         	call	___ftsub	;wreg free
  2507  00146E  C0B9  F0DF         	movff	?___ftsub,printf@fval
  2508  001472  C0BA  F0E0         	movff	?___ftsub+1,printf@fval+1
  2509  001476  C0BB  F0E1         	movff	?___ftsub+2,printf@fval+2
  2510                           
  2511                           ;doprnt.c: 1133: exp = 0;
  2512  00147A  0E00               	movlw	0
  2513  00147C  0100               	movlb	0	; () banked
  2514  00147E  6FDA               	movwf	(printf@exp+1)& (0+255),b
  2515  001480  0E00               	movlw	0
  2516  001482  6FD9               	movwf	printf@exp& (0+255),b
  2517  001484                     l3998:
  2518                           
  2519                           ; BSR set to: 0
  2520                           ;doprnt.c: 1134: }
  2521                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2522  001484  0E01               	movlw	1
  2523  001486  0100               	movlb	0	; () banked
  2524  001488  6FE2               	movwf	printf@c& (0+255),b
  2525  00148A                     l4000:
  2526                           
  2527                           ; BSR set to: 0
  2528  00148A  0E0A               	movlw	10
  2529  00148C  0100               	movlb	0	; () banked
  2530  00148E  19E2               	xorwf	printf@c& (0+255),w,b
  2531  001490  B4D8               	btfsc	status,2,c
  2532  001492  D01E               	goto	l4012
  2533                           
  2534                           ; BSR set to: 0
  2535                           ;doprnt.c: 1137: if(val < dpowers[c])
  2536                           
  2537                           ; BSR set to: 0
  2538                           
  2539                           ; BSR set to: 0
  2540  001494  0100               	movlb	0	; () banked
  2541  001496  51E2               	movf	printf@c& (0+255),w,b
  2542  001498  0D04               	mullw	4
  2543  00149A  0E01               	movlw	low _dpowers
  2544  00149C  24F3               	addwf	prodl,w,c
  2545  00149E  6EF6               	movwf	tblptrl,c
  2546  0014A0  0E10               	movlw	high _dpowers
  2547  0014A2  20F4               	addwfc	prodh,w,c
  2548  0014A4  6EF7               	movwf	tblptrh,c
  2549  0014A6                     	if	0	;There are less than 3 active tblptr bytes
  2550  0014A6                     	endif
  2551  0014A6  0009               	tblrd		*+
  2552  0014A8  50F5               	movf	tablat,w,c
  2553  0014AA  0100               	movlb	0	; () banked
  2554  0014AC  5DD5               	subwf	printf@val& (0+255),w,b
  2555  0014AE  0009               	tblrd		*+
  2556  0014B0  50F5               	movf	tablat,w,c
  2557  0014B2  0100               	movlb	0	; () banked
  2558  0014B4  59D6               	subwfb	(printf@val+1)& (0+255),w,b
  2559  0014B6  0009               	tblrd		*+
  2560  0014B8  50F5               	movf	tablat,w,c
  2561  0014BA  0100               	movlb	0	; () banked
  2562  0014BC  59D7               	subwfb	(printf@val+2)& (0+255),w,b
  2563  0014BE  0009               	tblrd		*+
  2564  0014C0  50F5               	movf	tablat,w,c
  2565  0014C2  0100               	movlb	0	; () banked
  2566  0014C4  59D8               	subwfb	(printf@val+3)& (0+255),w,b
  2567  0014C6  A0D8               	btfss	status,0,c
  2568  0014C8  D003               	goto	l4012
  2569                           
  2570                           ; BSR set to: 0
  2571                           
  2572                           ; BSR set to: 0
  2573                           
  2574                           ; BSR set to: 0
  2575                           ;doprnt.c: 1138: break;
  2576  0014CA  0100               	movlb	0	; () banked
  2577  0014CC  2BE2               	incf	printf@c& (0+255),f,b
  2578  0014CE  D7DD               	goto	l4000
  2579  0014D0                     l4012:
  2580                           
  2581                           ; BSR set to: 0
  2582                           ;doprnt.c: 1175: {
  2583                           ;doprnt.c: 1188: if(flag & 0x03)
  2584  0014D0  0E03               	movlw	3
  2585  0014D2  0100               	movlb	0	; () banked
  2586  0014D4  15D1               	andwf	printf@flag& (0+255),w,b
  2587  0014D6  0100               	movlb	0	; () banked
  2588  0014D8  6FC5               	movwf	??_printf& (0+255),b
  2589  0014DA  0E00               	movlw	0
  2590  0014DC  0100               	movlb	0	; () banked
  2591  0014DE  15D2               	andwf	(printf@flag+1)& (0+255),w,b
  2592  0014E0  0100               	movlb	0	; () banked
  2593  0014E2  6FC6               	movwf	(??_printf+1)& (0+255),b
  2594  0014E4  0100               	movlb	0	; () banked
  2595  0014E6  51C5               	movf	??_printf& (0+255),w,b
  2596  0014E8  0100               	movlb	0	; () banked
  2597  0014EA  11C6               	iorwf	(??_printf+1)& (0+255),w,b
  2598  0014EC  B4D8               	btfsc	status,2,c
  2599  0014EE  D04B               	goto	l4022
  2600                           
  2601                           ; BSR set to: 0
  2602                           ;doprnt.c: 1190: (putch('-') );
  2603  0014F0  0E2D               	movlw	45
  2604  0014F2  ECD1  F025         	call	_putch
  2605                           
  2606                           ;doprnt.c: 1195: }
  2607                           ;doprnt.c: 1196: while(c--) {
  2608  0014F6  D047               	goto	l4022
  2609  0014F8                     l4016:
  2610                           
  2611                           ;doprnt.c: 1200: {
  2612                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2613  0014F8  C0D5  F080         	movff	printf@val,___lldiv@dividend
  2614  0014FC  C0D6  F081         	movff	printf@val+1,___lldiv@dividend+1
  2615  001500  C0D7  F082         	movff	printf@val+2,___lldiv@dividend+2
  2616  001504  C0D8  F083         	movff	printf@val+3,___lldiv@dividend+3
  2617  001508  0100               	movlb	0	; () banked
  2618  00150A  51E2               	movf	printf@c& (0+255),w,b
  2619  00150C  0D04               	mullw	4
  2620  00150E  0E01               	movlw	low _dpowers
  2621  001510  24F3               	addwf	prodl,w,c
  2622  001512  6EF6               	movwf	tblptrl,c
  2623  001514  0E10               	movlw	high _dpowers
  2624  001516  20F4               	addwfc	prodh,w,c
  2625  001518  6EF7               	movwf	tblptrh,c
  2626  00151A                     	if	0	;There are less than 3 active tblptr bytes
  2627  00151A                     	endif
  2628  00151A  0009               	tblrd		*+
  2629  00151C  CFF5 F084          	movff	tablat,___lldiv@divisor
  2630  001520  0009               	tblrd		*+
  2631  001522  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  2632  001526  0009               	tblrd		*+
  2633  001528  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  2634  00152C  000A               	tblrd		*-
  2635  00152E  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  2636  001532  ECBD  F020         	call	___lldiv	;wreg free
  2637  001536  C080  F0DB         	movff	?___lldiv,printf@tmpval
  2638  00153A  C081  F0DC         	movff	?___lldiv+1,printf@tmpval+1
  2639  00153E  C082  F0DD         	movff	?___lldiv+2,printf@tmpval+2
  2640  001542  C083  F0DE         	movff	?___lldiv+3,printf@tmpval+3
  2641                           
  2642                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2643  001546  C0DB  F080         	movff	printf@tmpval,___llmod@dividend
  2644  00154A  C0DC  F081         	movff	printf@tmpval+1,___llmod@dividend+1
  2645  00154E  C0DD  F082         	movff	printf@tmpval+2,___llmod@dividend+2
  2646  001552  C0DE  F083         	movff	printf@tmpval+3,___llmod@dividend+3
  2647  001556  0E0A               	movlw	10
  2648  001558  0100               	movlb	0	; () banked
  2649  00155A  6F84               	movwf	___llmod@divisor& (0+255),b
  2650  00155C  0E00               	movlw	0
  2651  00155E  6F85               	movwf	(___llmod@divisor+1)& (0+255),b
  2652  001560  0E00               	movlw	0
  2653  001562  6F86               	movwf	(___llmod@divisor+2)& (0+255),b
  2654  001564  0E00               	movlw	0
  2655  001566  6F87               	movwf	(___llmod@divisor+3)& (0+255),b
  2656  001568  EC12  F022         	call	___llmod	;wreg free
  2657  00156C  C080  F0DB         	movff	?___llmod,printf@tmpval
  2658  001570  C081  F0DC         	movff	?___llmod+1,printf@tmpval+1
  2659  001574  C082  F0DD         	movff	?___llmod+2,printf@tmpval+2
  2660  001578  C083  F0DE         	movff	?___llmod+3,printf@tmpval+3
  2661                           
  2662                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  2663  00157C  0100               	movlb	0	; () banked
  2664  00157E  51DB               	movf	printf@tmpval& (0+255),w,b
  2665  001580  0F30               	addlw	48
  2666  001582  ECD1  F025         	call	_putch
  2667  001586                     l4022:
  2668  001586  0100               	movlb	0	; () banked
  2669  001588  07E2               	decf	printf@c& (0+255),f,b
  2670  00158A  0100               	movlb	0	; () banked
  2671  00158C  29E2               	incf	printf@c& (0+255),w,b
  2672  00158E  B4D8               	btfsc	status,2,c
  2673  001590  D008               	goto	l4028
  2674  001592  D7B2               	goto	l4016
  2675  001594                     l4024:
  2676                           
  2677                           ; BSR set to: 0
  2678                           ;doprnt.c: 1208: (putch('0') );
  2679  001594  0E30               	movlw	48
  2680  001596  ECD1  F025         	call	_putch
  2681                           
  2682                           ;doprnt.c: 1209: exp--;
  2683  00159A  0100               	movlb	0	; () banked
  2684  00159C  07D9               	decf	printf@exp& (0+255),f,b
  2685  00159E  A0D8               	btfss	status,0,c
  2686  0015A0  07DA               	decf	(printf@exp+1)& (0+255),f,b
  2687  0015A2                     l4028:
  2688                           
  2689                           ; BSR set to: 0
  2690  0015A2  0100               	movlb	0	; () banked
  2691  0015A4  BFDA               	btfsc	(printf@exp+1)& (0+255),7,b
  2692  0015A6  D007               	goto	l4030
  2693  0015A8  0100               	movlb	0	; () banked
  2694  0015AA  51DA               	movf	(printf@exp+1)& (0+255),w,b
  2695  0015AC  E1F3               	bnz	l4024
  2696  0015AE  0100               	movlb	0	; () banked
  2697  0015B0  05D9               	decf	printf@exp& (0+255),w,b
  2698  0015B2  B0D8               	btfsc	status,0,c
  2699  0015B4  D7EF               	goto	l4024
  2700  0015B6                     l4030:
  2701                           
  2702                           ; BSR set to: 0
  2703                           ;doprnt.c: 1210: }
  2704                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2705  0015B6  0100               	movlb	0	; () banked
  2706  0015B8  BFD4               	btfsc	(printf@prec+1)& (0+255),7,b
  2707  0015BA  D00C               	goto	l413
  2708  0015BC  0100               	movlb	0	; () banked
  2709  0015BE  51D4               	movf	(printf@prec+1)& (0+255),w,b
  2710  0015C0  E105               	bnz	u4490
  2711  0015C2  0E09               	movlw	9
  2712  0015C4  0100               	movlb	0	; () banked
  2713  0015C6  5DD3               	subwf	printf@prec& (0+255),w,b
  2714  0015C8  A0D8               	btfss	status,0,c
  2715  0015CA  D004               	goto	l413
  2716  0015CC                     u4490:
  2717                           
  2718                           ; BSR set to: 0
  2719                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2720  0015CC  0E08               	movlw	8
  2721  0015CE  0100               	movlb	0	; () banked
  2722  0015D0  6FE2               	movwf	printf@c& (0+255),b
  2723  0015D2  D002               	goto	l4034
  2724  0015D4                     l413:
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;doprnt.c: 1213: else
  2728                           ;doprnt.c: 1214: c = prec;
  2729  0015D4  C0D3  F0E2         	movff	printf@prec,printf@c
  2730  0015D8                     l4034:
  2731                           
  2732                           ; BSR set to: 0
  2733                           ;doprnt.c: 1215: prec -= c;
  2734  0015D8  0100               	movlb	0	; () banked
  2735  0015DA  51E2               	movf	printf@c& (0+255),w,b
  2736  0015DC  0100               	movlb	0	; () banked
  2737  0015DE  5FD3               	subwf	printf@prec& (0+255),f,b
  2738  0015E0  0E00               	movlw	0
  2739  0015E2  0100               	movlb	0	; () banked
  2740  0015E4  BFE2               	btfsc	printf@c& (0+255),7,b
  2741  0015E6  0EFF               	movlw	255
  2742  0015E8  0100               	movlb	0	; () banked
  2743  0015EA  5BD4               	subwfb	(printf@prec+1)& (0+255),f,b
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;doprnt.c: 1219: if(c)
  2747  0015EC  0100               	movlb	0	; () banked
  2748  0015EE  51E2               	movf	printf@c& (0+255),w,b
  2749  0015F0  0100               	movlb	0	; () banked
  2750  0015F2  B4D8               	btfsc	status,2,c
  2751  0015F4  D003               	goto	l4040
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;doprnt.c: 1221: (putch('.') );
  2755  0015F6  0E2E               	movlw	46
  2756  0015F8  ECD1  F025         	call	_putch
  2757  0015FC                     l4040:
  2758                           
  2759                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2760  0015FC  0100               	movlb	0	; () banked
  2761  0015FE  51E2               	movf	printf@c& (0+255),w,b
  2762  001600  ECAD  F00F         	call	_scale
  2763  001604  C0A3  F0CB         	movff	?_scale,_printf$1075
  2764  001608  C0A4  F0CC         	movff	?_scale+1,_printf$1075+1
  2765  00160C  C0A5  F0CD         	movff	?_scale+2,_printf$1075+2
  2766                           
  2767                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2768  001610  C0DF  F097         	movff	printf@fval,___ftmul@f2
  2769  001614  C0E0  F098         	movff	printf@fval+1,___ftmul@f2+1
  2770  001618  C0E1  F099         	movff	printf@fval+2,___ftmul@f2+2
  2771  00161C  C0CB  F094         	movff	_printf$1075,___ftmul@f1
  2772  001620  C0CC  F095         	movff	_printf$1075+1,___ftmul@f1+1
  2773  001624  C0CD  F096         	movff	_printf$1075+2,___ftmul@f1+2
  2774  001628  EC5C  F01B         	call	___ftmul	;wreg free
  2775  00162C  C094  F0AA         	movff	?___ftmul,___fttol@f1
  2776  001630  C095  F0AB         	movff	?___ftmul+1,___fttol@f1+1
  2777  001634  C096  F0AC         	movff	?___ftmul+2,___fttol@f1+2
  2778  001638  ECB1  F01C         	call	___fttol	;wreg free
  2779  00163C  C0AA  F0D5         	movff	?___fttol,printf@val
  2780  001640  C0AB  F0D6         	movff	?___fttol+1,printf@val+1
  2781  001644  C0AC  F0D7         	movff	?___fttol+2,printf@val+2
  2782  001648  C0AD  F0D8         	movff	?___fttol+3,printf@val+3
  2783                           
  2784                           ;doprnt.c: 1228: while(c--) {
  2785  00164C  D06E               	goto	l4050
  2786  00164E                     l4044:
  2787                           
  2788                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2789  00164E  C0D5  F080         	movff	printf@val,___lldiv@dividend
  2790  001652  C0D6  F081         	movff	printf@val+1,___lldiv@dividend+1
  2791  001656  C0D7  F082         	movff	printf@val+2,___lldiv@dividend+2
  2792  00165A  C0D8  F083         	movff	printf@val+3,___lldiv@dividend+3
  2793  00165E  0100               	movlb	0	; () banked
  2794  001660  51E2               	movf	printf@c& (0+255),w,b
  2795  001662  0D04               	mullw	4
  2796  001664  0E01               	movlw	low _dpowers
  2797  001666  24F3               	addwf	prodl,w,c
  2798  001668  6EF6               	movwf	tblptrl,c
  2799  00166A  0E10               	movlw	high _dpowers
  2800  00166C  20F4               	addwfc	prodh,w,c
  2801  00166E  6EF7               	movwf	tblptrh,c
  2802  001670                     	if	0	;There are less than 3 active tblptr bytes
  2803  001670                     	endif
  2804  001670  0009               	tblrd		*+
  2805  001672  CFF5 F084          	movff	tablat,___lldiv@divisor
  2806  001676  0009               	tblrd		*+
  2807  001678  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  2808  00167C  0009               	tblrd		*+
  2809  00167E  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  2810  001682  000A               	tblrd		*-
  2811  001684  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  2812  001688  ECBD  F020         	call	___lldiv	;wreg free
  2813  00168C  C080  F0DB         	movff	?___lldiv,printf@tmpval
  2814  001690  C081  F0DC         	movff	?___lldiv+1,printf@tmpval+1
  2815  001694  C082  F0DD         	movff	?___lldiv+2,printf@tmpval+2
  2816  001698  C083  F0DE         	movff	?___lldiv+3,printf@tmpval+3
  2817                           
  2818                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2819  00169C  C0DB  F080         	movff	printf@tmpval,___llmod@dividend
  2820  0016A0  C0DC  F081         	movff	printf@tmpval+1,___llmod@dividend+1
  2821  0016A4  C0DD  F082         	movff	printf@tmpval+2,___llmod@dividend+2
  2822  0016A8  C0DE  F083         	movff	printf@tmpval+3,___llmod@dividend+3
  2823  0016AC  0E0A               	movlw	10
  2824  0016AE  0100               	movlb	0	; () banked
  2825  0016B0  6F84               	movwf	___llmod@divisor& (0+255),b
  2826  0016B2  0E00               	movlw	0
  2827  0016B4  6F85               	movwf	(___llmod@divisor+1)& (0+255),b
  2828  0016B6  0E00               	movlw	0
  2829  0016B8  6F86               	movwf	(___llmod@divisor+2)& (0+255),b
  2830  0016BA  0E00               	movlw	0
  2831  0016BC  6F87               	movwf	(___llmod@divisor+3)& (0+255),b
  2832  0016BE  EC12  F022         	call	___llmod	;wreg free
  2833  0016C2  C080  F0DB         	movff	?___llmod,printf@tmpval
  2834  0016C6  C081  F0DC         	movff	?___llmod+1,printf@tmpval+1
  2835  0016CA  C082  F0DD         	movff	?___llmod+2,printf@tmpval+2
  2836  0016CE  C083  F0DE         	movff	?___llmod+3,printf@tmpval+3
  2837                           
  2838                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  2839  0016D2  0100               	movlb	0	; () banked
  2840  0016D4  51DB               	movf	printf@tmpval& (0+255),w,b
  2841  0016D6  0F30               	addlw	48
  2842  0016D8  ECD1  F025         	call	_putch
  2843                           
  2844                           ;doprnt.c: 1232: val %= dpowers[c];
  2845  0016DC  C0D5  F080         	movff	printf@val,___llmod@dividend
  2846  0016E0  C0D6  F081         	movff	printf@val+1,___llmod@dividend+1
  2847  0016E4  C0D7  F082         	movff	printf@val+2,___llmod@dividend+2
  2848  0016E8  C0D8  F083         	movff	printf@val+3,___llmod@dividend+3
  2849  0016EC  0100               	movlb	0	; () banked
  2850  0016EE  51E2               	movf	printf@c& (0+255),w,b
  2851  0016F0  0D04               	mullw	4
  2852  0016F2  0E01               	movlw	low _dpowers
  2853  0016F4  24F3               	addwf	prodl,w,c
  2854  0016F6  6EF6               	movwf	tblptrl,c
  2855  0016F8  0E10               	movlw	high _dpowers
  2856  0016FA  20F4               	addwfc	prodh,w,c
  2857  0016FC  6EF7               	movwf	tblptrh,c
  2858  0016FE                     	if	0	;There are less than 3 active tblptr bytes
  2859  0016FE                     	endif
  2860  0016FE  0009               	tblrd		*+
  2861  001700  CFF5 F084          	movff	tablat,___llmod@divisor
  2862  001704  0009               	tblrd		*+
  2863  001706  CFF5 F085          	movff	tablat,___llmod@divisor+1
  2864  00170A  0009               	tblrd		*+
  2865  00170C  CFF5 F086          	movff	tablat,___llmod@divisor+2
  2866  001710  000A               	tblrd		*-
  2867  001712  CFF5 F087          	movff	tablat,___llmod@divisor+3
  2868  001716  EC12  F022         	call	___llmod	;wreg free
  2869  00171A  C080  F0D5         	movff	?___llmod,printf@val
  2870  00171E  C081  F0D6         	movff	?___llmod+1,printf@val+1
  2871  001722  C082  F0D7         	movff	?___llmod+2,printf@val+2
  2872  001726  C083  F0D8         	movff	?___llmod+3,printf@val+3
  2873  00172A                     l4050:
  2874  00172A  0100               	movlb	0	; () banked
  2875  00172C  07E2               	decf	printf@c& (0+255),f,b
  2876  00172E  0100               	movlb	0	; () banked
  2877  001730  29E2               	incf	printf@c& (0+255),w,b
  2878  001732  B4D8               	btfsc	status,2,c
  2879  001734  D008               	goto	l4056
  2880  001736  D78B               	goto	l4044
  2881  001738                     l4052:
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;doprnt.c: 1236: (putch('0') );
  2885  001738  0E30               	movlw	48
  2886  00173A  ECD1  F025         	call	_putch
  2887                           
  2888                           ;doprnt.c: 1237: prec--;
  2889  00173E  0100               	movlb	0	; () banked
  2890  001740  07D3               	decf	printf@prec& (0+255),f,b
  2891  001742  A0D8               	btfss	status,0,c
  2892  001744  07D4               	decf	(printf@prec+1)& (0+255),f,b
  2893  001746                     l4056:
  2894                           
  2895                           ; BSR set to: 0
  2896  001746  0100               	movlb	0	; () banked
  2897  001748  51D3               	movf	printf@prec& (0+255),w,b
  2898  00174A  0100               	movlb	0	; () banked
  2899  00174C  11D4               	iorwf	(printf@prec+1)& (0+255),w,b
  2900  00174E  B4D8               	btfsc	status,2,c
  2901  001750  D09F               	goto	l4090
  2902  001752  D7F2               	goto	l4052
  2903  001754                     l4058:
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;doprnt.c: 1246: }
  2907                           ;doprnt.c: 1273: {
  2908                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2909  001754  C0CF  FFD9         	movff	printf@ap,fsr2l
  2910  001758  C0D0  FFDA         	movff	printf@ap+1,fsr2h
  2911  00175C  CFDE F0C5          	movff	postinc2,??_printf
  2912  001760  CFDD F0C6          	movff	postdec2,??_printf+1
  2913  001764  C0C5  F0D5         	movff	??_printf,printf@val
  2914  001768  C0C6  F0D6         	movff	??_printf+1,printf@val+1
  2915  00176C  0100               	movlb	0	; () banked
  2916  00176E  6BD7               	clrf	(printf@val+2)& (0+255),b
  2917  001770  6BD8               	clrf	(printf@val+3)& (0+255),b
  2918                           
  2919                           ; BSR set to: 0
  2920  001772  0E02               	movlw	2
  2921  001774  0100               	movlb	0	; () banked
  2922  001776  27CF               	addwf	printf@ap& (0+255),f,b
  2923  001778  0E00               	movlw	0
  2924  00177A  23D0               	addwfc	(printf@ap+1)& (0+255),f,b
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;doprnt.c: 1287: }
  2928                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2929  00177C  0E01               	movlw	1
  2930  00177E  0100               	movlb	0	; () banked
  2931  001780  6FE2               	movwf	printf@c& (0+255),b
  2932  001782                     l4064:
  2933                           
  2934                           ; BSR set to: 0
  2935  001782  0E08               	movlw	8
  2936  001784  0100               	movlb	0	; () banked
  2937  001786  19E2               	xorwf	printf@c& (0+255),w,b
  2938  001788  B4D8               	btfsc	status,2,c
  2939  00178A  D01E               	goto	l4076
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2943                           
  2944                           ; BSR set to: 0
  2945                           
  2946                           ; BSR set to: 0
  2947  00178C  0100               	movlb	0	; () banked
  2948  00178E  51E2               	movf	printf@c& (0+255),w,b
  2949  001790  0D04               	mullw	4
  2950  001792  0E77               	movlw	low _hexpowers
  2951  001794  24F3               	addwf	prodl,w,c
  2952  001796  6EF6               	movwf	tblptrl,c
  2953  001798  0E10               	movlw	high _hexpowers
  2954  00179A  20F4               	addwfc	prodh,w,c
  2955  00179C  6EF7               	movwf	tblptrh,c
  2956  00179E                     	if	0	;There are less than 3 active tblptr bytes
  2957  00179E                     	endif
  2958  00179E  0009               	tblrd		*+
  2959  0017A0  50F5               	movf	tablat,w,c
  2960  0017A2  0100               	movlb	0	; () banked
  2961  0017A4  5DD5               	subwf	printf@val& (0+255),w,b
  2962  0017A6  0009               	tblrd		*+
  2963  0017A8  50F5               	movf	tablat,w,c
  2964  0017AA  0100               	movlb	0	; () banked
  2965  0017AC  59D6               	subwfb	(printf@val+1)& (0+255),w,b
  2966  0017AE  0009               	tblrd		*+
  2967  0017B0  50F5               	movf	tablat,w,c
  2968  0017B2  0100               	movlb	0	; () banked
  2969  0017B4  59D7               	subwfb	(printf@val+2)& (0+255),w,b
  2970  0017B6  0009               	tblrd		*+
  2971  0017B8  50F5               	movf	tablat,w,c
  2972  0017BA  0100               	movlb	0	; () banked
  2973  0017BC  59D8               	subwfb	(printf@val+3)& (0+255),w,b
  2974  0017BE  A0D8               	btfss	status,0,c
  2975  0017C0  D003               	goto	l4076
  2976                           
  2977                           ; BSR set to: 0
  2978                           
  2979                           ; BSR set to: 0
  2980                           
  2981                           ; BSR set to: 0
  2982                           ;doprnt.c: 1318: break;
  2983  0017C2  0100               	movlb	0	; () banked
  2984  0017C4  2BE2               	incf	printf@c& (0+255),f,b
  2985  0017C6  D7DD               	goto	l4064
  2986  0017C8                     l4076:
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;doprnt.c: 1422: {
  2990                           ;doprnt.c: 1438: if(flag & 0x03)
  2991  0017C8  0E03               	movlw	3
  2992  0017CA  0100               	movlb	0	; () banked
  2993  0017CC  15D1               	andwf	printf@flag& (0+255),w,b
  2994  0017CE  0100               	movlb	0	; () banked
  2995  0017D0  6FC5               	movwf	??_printf& (0+255),b
  2996  0017D2  0E00               	movlw	0
  2997  0017D4  0100               	movlb	0	; () banked
  2998  0017D6  15D2               	andwf	(printf@flag+1)& (0+255),w,b
  2999  0017D8  0100               	movlb	0	; () banked
  3000  0017DA  6FC6               	movwf	(??_printf+1)& (0+255),b
  3001  0017DC  0100               	movlb	0	; () banked
  3002  0017DE  51C5               	movf	??_printf& (0+255),w,b
  3003  0017E0  0100               	movlb	0	; () banked
  3004  0017E2  11C6               	iorwf	(??_printf+1)& (0+255),w,b
  3005  0017E4  B4D8               	btfsc	status,2,c
  3006  0017E6  D003               	goto	l4080
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;doprnt.c: 1439: (putch('-') );
  3010  0017E8  0E2D               	movlw	45
  3011  0017EA  ECD1  F025         	call	_putch
  3012  0017EE                     l4080:
  3013                           
  3014                           ;doprnt.c: 1469: }
  3015                           ;doprnt.c: 1472: prec = c;
  3016  0017EE  0100               	movlb	0	; () banked
  3017  0017F0  51E2               	movf	printf@c& (0+255),w,b
  3018  0017F2  0100               	movlb	0	; () banked
  3019  0017F4  6FD3               	movwf	printf@prec& (0+255),b
  3020  0017F6  6BD4               	clrf	(printf@prec+1)& (0+255),b
  3021  0017F8  BFD3               	btfsc	printf@prec& (0+255),7,b
  3022  0017FA  07D4               	decf	(printf@prec+1)& (0+255),f,b
  3023                           
  3024                           ;doprnt.c: 1474: while(prec--) {
  3025  0017FC  D03E               	goto	l4088
  3026  0017FE                     l4082:
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;doprnt.c: 1478: {
  3030                           ;doprnt.c: 1499: {
  3031                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3032  0017FE  C0D5  F080         	movff	printf@val,___lldiv@dividend
  3033  001802  C0D6  F081         	movff	printf@val+1,___lldiv@dividend+1
  3034  001806  C0D7  F082         	movff	printf@val+2,___lldiv@dividend+2
  3035  00180A  C0D8  F083         	movff	printf@val+3,___lldiv@dividend+3
  3036  00180E  C0D3  F0C5         	movff	printf@prec,??_printf
  3037  001812  C0D4  F0C6         	movff	printf@prec+1,??_printf+1
  3038  001816  0100               	movlb	0	; () banked
  3039  001818  90D8               	bcf	status,0,c
  3040  00181A  37C5               	rlcf	??_printf& (0+255),f,b
  3041  00181C  37C6               	rlcf	(??_printf+1)& (0+255),f,b
  3042  00181E  0100               	movlb	0	; () banked
  3043  001820  90D8               	bcf	status,0,c
  3044  001822  37C5               	rlcf	??_printf& (0+255),f,b
  3045  001824  37C6               	rlcf	(??_printf+1)& (0+255),f,b
  3046  001826  0E77               	movlw	low _hexpowers
  3047  001828  0100               	movlb	0	; () banked
  3048  00182A  25C5               	addwf	??_printf& (0+255),w,b
  3049  00182C  6EF6               	movwf	tblptrl,c
  3050  00182E  0E10               	movlw	high _hexpowers
  3051  001830  21C6               	addwfc	(??_printf+1)& (0+255),w,b
  3052  001832  6EF7               	movwf	tblptrh,c
  3053  001834                     	if	0	;There are less than 3 active tblptr bytes
  3054  001834                     	endif
  3055  001834  0009               	tblrd		*+
  3056  001836  CFF5 F084          	movff	tablat,___lldiv@divisor
  3057  00183A  0009               	tblrd		*+
  3058  00183C  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  3059  001840  0009               	tblrd		*+
  3060  001842  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  3061  001846  000A               	tblrd		*-
  3062  001848  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  3063  00184C  ECBD  F020         	call	___lldiv	;wreg free
  3064  001850  0100               	movlb	0	; () banked
  3065  001852  5180               	movf	?___lldiv& (0+255),w,b
  3066  001854  0B0F               	andlw	15
  3067  001856  0100               	movlb	0	; () banked
  3068  001858  6FCE               	movwf	printf@idx& (0+255),b
  3069                           
  3070                           ; BSR set to: 0
  3071                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3072  00185A  0100               	movlb	0	; () banked
  3073  00185C  51CE               	movf	printf@idx& (0+255),w,b
  3074  00185E  0D01               	mullw	1
  3075  001860  0EAF               	movlw	low STR_7
  3076  001862  24F3               	addwf	prodl,w,c
  3077  001864  6EF6               	movwf	tblptrl,c
  3078  001866  0E10               	movlw	high STR_7
  3079  001868  20F4               	addwfc	prodh,w,c
  3080  00186A  6EF7               	movwf	tblptrh,c
  3081  00186C                     	if	0	;There are less than 3 active tblptr bytes
  3082  00186C                     	endif
  3083  00186C  0008               	tblrd		*
  3084  00186E  CFF5 F0E2          	movff	tablat,printf@c
  3085                           
  3086                           ; BSR set to: 0
  3087                           ;doprnt.c: 1508: }
  3088                           ;doprnt.c: 1523: }
  3089                           ;doprnt.c: 1524: (putch(c) );
  3090  001872  0100               	movlb	0	; () banked
  3091  001874  51E2               	movf	printf@c& (0+255),w,b
  3092  001876  ECD1  F025         	call	_putch
  3093  00187A                     l4088:
  3094  00187A  0100               	movlb	0	; () banked
  3095  00187C  07D3               	decf	printf@prec& (0+255),f,b
  3096  00187E  A0D8               	btfss	status,0,c
  3097  001880  07D4               	decf	(printf@prec+1)& (0+255),f,b
  3098  001882  0100               	movlb	0	; () banked
  3099  001884  29D3               	incf	printf@prec& (0+255),w,b
  3100  001886  E1BB               	bnz	l4082
  3101  001888  0100               	movlb	0	; () banked
  3102  00188A  29D4               	incf	(printf@prec+1)& (0+255),w,b
  3103  00188C  A4D8               	btfss	status,2,c
  3104  00188E  D7B7               	goto	l4082
  3105  001890                     l4090:
  3106  001890  C0BF  FFF6         	movff	printf@f,tblptrl
  3107  001894  C0C0  FFF7         	movff	printf@f+1,tblptrh
  3108  001898  0100               	movlb	0	; () banked
  3109  00189A  4BBF               	infsnz	printf@f& (0+255),f,b
  3110  00189C  2BC0               	incf	(printf@f+1)& (0+255),f,b
  3111  00189E                     	if	0	;tblptru may be non-zero
  3112  00189E                     	endif
  3113  00189E                     	if	0	;tblptru may be non-zero
  3114  00189E                     	endif
  3115  00189E  0008               	tblrd		*
  3116  0018A0  CFF5 F0E2          	movff	tablat,printf@c
  3117  0018A4  0100               	movlb	0	; () banked
  3118  0018A6  51E2               	movf	printf@c& (0+255),w,b
  3119  0018A8  B4D8               	btfsc	status,2,c
  3120  0018AA  0012               	return	
  3121  0018AC  D422               	goto	l3914
  3122  0018AE                     __end_of_printf:
  3123                           	opt stack 0
  3124                           tblptru	equ	0xFF8
  3125                           tblptrh	equ	0xFF7
  3126                           tblptrl	equ	0xFF6
  3127                           tablat	equ	0xFF5
  3128                           prodh	equ	0xFF4
  3129                           prodl	equ	0xFF3
  3130                           intcon	equ	0xFF2
  3131                           wreg	equ	0xFE8
  3132                           indf2	equ	0xFDF
  3133                           postinc2	equ	0xFDE
  3134                           postdec2	equ	0xFDD
  3135                           fsr2h	equ	0xFDA
  3136                           fsr2l	equ	0xFD9
  3137                           status	equ	0xFD8
  3138                           
  3139 ;; *************** function _scale *****************
  3140 ;; Defined at:
  3141 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3142 ;; Parameters:    Size  Location     Type
  3143 ;;  scl             1    wreg     char 
  3144 ;; Auto vars:     Size  Location     Type
  3145 ;;  scl             1   41[BANK0 ] char 
  3146 ;; Return value:  Size  Location     Type
  3147 ;;                  3   35[BANK0 ] char 
  3148 ;; Registers used:
  3149 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3150 ;; Tracked objects:
  3151 ;;		On entry : 0/0
  3152 ;;		On exit  : 0/0
  3153 ;;		Unchanged: 0/0
  3154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3155 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3156 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3158 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3159 ;;Total ram usage:        7 bytes
  3160 ;; Hardware stack levels used:    1
  3161 ;; Hardware stack levels required when called:    8
  3162 ;; This function calls:
  3163 ;;		___awdiv
  3164 ;;		___awmod
  3165 ;;		___ftmul
  3166 ;;		___wmul
  3167 ;; This function is called by:
  3168 ;;		_printf
  3169 ;; This function uses a non-reentrant model
  3170 ;;
  3171                           
  3172                           	psect	text4
  3173  001F5A                     __ptext4:
  3174                           	opt stack 0
  3175  001F5A                     _scale:
  3176                           	opt stack 20
  3177                           
  3178                           ; BSR set to: 0
  3179                           ;incstack = 0
  3180                           ;scale@scl stored from wreg
  3181  001F5A  0100               	movlb	0	; () banked
  3182  001F5C  6FA9               	movwf	scale@scl& (0+255),b
  3183                           
  3184                           ;doprnt.c: 428: if(scl < 0) {
  3185  001F5E  0100               	movlb	0	; () banked
  3186  001F60  AFA9               	btfss	scale@scl& (0+255),7,b
  3187  001F62  D12A               	goto	l3448
  3188                           
  3189                           ; BSR set to: 0
  3190                           ;doprnt.c: 429: scl = -scl;
  3191  001F64  0100               	movlb	0	; () banked
  3192  001F66  6DA9               	negf	scale@scl& (0+255),b
  3193                           
  3194                           ;doprnt.c: 430: if(scl>=110)
  3195  001F68  0100               	movlb	0	; () banked
  3196  001F6A  51A9               	movf	scale@scl& (0+255),w,b
  3197  001F6C  0A80               	xorlw	128
  3198  001F6E  0F12               	addlw	-238
  3199  001F70  A0D8               	btfss	status,0,c
  3200  001F72  D0AC               	goto	l3438
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3204  001F74  0E00               	movlw	0
  3205  001F76  0100               	movlb	0	; () banked
  3206  001F78  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3207  001F7A  0E03               	movlw	3
  3208  001F7C  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3209  001F7E  0E00               	movlw	0
  3210  001F80  0100               	movlb	0	; () banked
  3211  001F82  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  3212  001F84  0E0A               	movlw	10
  3213  001F86  6F88               	movwf	___awdiv@divisor& (0+255),b
  3214  001F88  0E00               	movlw	0
  3215  001F8A  0100               	movlb	0	; () banked
  3216  001F8C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  3217  001F8E  0E64               	movlw	100
  3218  001F90  6F82               	movwf	___awmod@divisor& (0+255),b
  3219  001F92  0100               	movlb	0	; () banked
  3220  001F94  51A9               	movf	scale@scl& (0+255),w,b
  3221  001F96  0100               	movlb	0	; () banked
  3222  001F98  6F80               	movwf	___awmod@dividend& (0+255),b
  3223  001F9A  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  3224  001F9C  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  3225  001F9E  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  3226  001FA0  EC72  F021         	call	___awmod	;wreg free
  3227  001FA4  C080  F086         	movff	?___awmod,___awdiv@dividend
  3228  001FA8  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  3229  001FAC  EC5E  F020         	call	___awdiv	;wreg free
  3230  001FB0  0E09               	movlw	9
  3231  001FB2  0100               	movlb	0	; () banked
  3232  001FB4  2586               	addwf	?___awdiv& (0+255),w,b
  3233  001FB6  0100               	movlb	0	; () banked
  3234  001FB8  6F8E               	movwf	___wmul@multiplier& (0+255),b
  3235  001FBA  0E00               	movlw	0
  3236  001FBC  0100               	movlb	0	; () banked
  3237  001FBE  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  3238  001FC0  0100               	movlb	0	; () banked
  3239  001FC2  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3240  001FC4  EC72  F025         	call	___wmul	;wreg free
  3241  001FC8  0E29               	movlw	low __npowers_
  3242  001FCA  0100               	movlb	0	; () banked
  3243  001FCC  258E               	addwf	?___wmul& (0+255),w,b
  3244  001FCE  6EF6               	movwf	tblptrl,c
  3245  001FD0  0E10               	movlw	high __npowers_
  3246  001FD2  0100               	movlb	0	; () banked
  3247  001FD4  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  3248  001FD6  6EF7               	movwf	tblptrh,c
  3249  001FD8                     	if	0	;There are less than 3 active tblptr bytes
  3250  001FD8                     	endif
  3251  001FD8  0009               	tblrd		*+
  3252  001FDA  CFF5 F097          	movff	tablat,___ftmul@f2
  3253  001FDE  0009               	tblrd		*+
  3254  001FE0  CFF5 F098          	movff	tablat,___ftmul@f2+1
  3255  001FE4  000A               	tblrd		*-
  3256  001FE6  CFF5 F099          	movff	tablat,___ftmul@f2+2
  3257  001FEA  0E00               	movlw	0
  3258  001FEC  0100               	movlb	0	; () banked
  3259  001FEE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  3260  001FF0  0E64               	movlw	100
  3261  001FF2  6F88               	movwf	___awdiv@divisor& (0+255),b
  3262  001FF4  0100               	movlb	0	; () banked
  3263  001FF6  51A9               	movf	scale@scl& (0+255),w,b
  3264  001FF8  0100               	movlb	0	; () banked
  3265  001FFA  6F86               	movwf	___awdiv@dividend& (0+255),b
  3266  001FFC  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  3267  001FFE  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  3268  002000  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  3269  002002  EC5E  F020         	call	___awdiv	;wreg free
  3270  002006  0E12               	movlw	18
  3271  002008  0100               	movlb	0	; () banked
  3272  00200A  2586               	addwf	?___awdiv& (0+255),w,b
  3273  00200C  0100               	movlb	0	; () banked
  3274  00200E  6F8E               	movwf	___wmul@multiplier& (0+255),b
  3275  002010  0E00               	movlw	0
  3276  002012  0100               	movlb	0	; () banked
  3277  002014  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  3278  002016  0100               	movlb	0	; () banked
  3279  002018  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3280  00201A  0E00               	movlw	0
  3281  00201C  0100               	movlb	0	; () banked
  3282  00201E  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3283  002020  0E03               	movlw	3
  3284  002022  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3285  002024  EC72  F025         	call	___wmul	;wreg free
  3286  002028  0E29               	movlw	low __npowers_
  3287  00202A  0100               	movlb	0	; () banked
  3288  00202C  258E               	addwf	?___wmul& (0+255),w,b
  3289  00202E  6EF6               	movwf	tblptrl,c
  3290  002030  0E10               	movlw	high __npowers_
  3291  002032  0100               	movlb	0	; () banked
  3292  002034  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  3293  002036  6EF7               	movwf	tblptrh,c
  3294  002038                     	if	0	;There are less than 3 active tblptr bytes
  3295  002038                     	endif
  3296  002038  0009               	tblrd		*+
  3297  00203A  CFF5 F094          	movff	tablat,___ftmul@f1
  3298  00203E  0009               	tblrd		*+
  3299  002040  CFF5 F095          	movff	tablat,___ftmul@f1+1
  3300  002044  000A               	tblrd		*-
  3301  002046  CFF5 F096          	movff	tablat,___ftmul@f1+2
  3302  00204A  EC5C  F01B         	call	___ftmul	;wreg free
  3303  00204E  C094  F0A6         	movff	?___ftmul,_scale$1074
  3304  002052  C095  F0A7         	movff	?___ftmul+1,_scale$1074+1
  3305  002056  C096  F0A8         	movff	?___ftmul+2,_scale$1074+2
  3306                           
  3307                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3308  00205A  C0A6  F094         	movff	_scale$1074,___ftmul@f1
  3309  00205E  C0A7  F095         	movff	_scale$1074+1,___ftmul@f1+1
  3310  002062  C0A8  F096         	movff	_scale$1074+2,___ftmul@f1+2
  3311  002066  0E00               	movlw	0
  3312  002068  0100               	movlb	0	; () banked
  3313  00206A  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3314  00206C  0E03               	movlw	3
  3315  00206E  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3316  002070  0E00               	movlw	0
  3317  002072  0100               	movlb	0	; () banked
  3318  002074  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  3319  002076  0E0A               	movlw	10
  3320  002078  6F82               	movwf	___awmod@divisor& (0+255),b
  3321  00207A  0100               	movlb	0	; () banked
  3322  00207C  51A9               	movf	scale@scl& (0+255),w,b
  3323  00207E  0100               	movlb	0	; () banked
  3324  002080  6F80               	movwf	___awmod@dividend& (0+255),b
  3325  002082  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  3326  002084  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  3327  002086  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  3328  002088  EC72  F021         	call	___awmod	;wreg free
  3329  00208C  C080  F08E         	movff	?___awmod,___wmul@multiplier
  3330  002090  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  3331  002094  EC72  F025         	call	___wmul	;wreg free
  3332  002098  0E29               	movlw	low __npowers_
  3333  00209A  0100               	movlb	0	; () banked
  3334  00209C  258E               	addwf	?___wmul& (0+255),w,b
  3335  00209E  6EF6               	movwf	tblptrl,c
  3336  0020A0  0E10               	movlw	high __npowers_
  3337  0020A2  0100               	movlb	0	; () banked
  3338  0020A4  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  3339  0020A6  6EF7               	movwf	tblptrh,c
  3340  0020A8                     	if	0	;There are less than 3 active tblptr bytes
  3341  0020A8                     	endif
  3342  0020A8  0009               	tblrd		*+
  3343  0020AA  CFF5 F097          	movff	tablat,___ftmul@f2
  3344  0020AE  0009               	tblrd		*+
  3345  0020B0  CFF5 F098          	movff	tablat,___ftmul@f2+1
  3346  0020B4  000A               	tblrd		*-
  3347  0020B6  CFF5 F099          	movff	tablat,___ftmul@f2+2
  3348  0020BA  EC5C  F01B         	call	___ftmul	;wreg free
  3349  0020BE  C094  F0A3         	movff	?___ftmul,?_scale
  3350  0020C2  C095  F0A4         	movff	?___ftmul+1,?_scale+1
  3351  0020C6  C096  F0A5         	movff	?___ftmul+2,?_scale+2
  3352  0020CA  0012               	return	
  3353  0020CC                     l3438:
  3354                           
  3355                           ;doprnt.c: 432: else if(scl > 10)
  3356  0020CC  0100               	movlb	0	; () banked
  3357  0020CE  51A9               	movf	scale@scl& (0+255),w,b
  3358  0020D0  0A80               	xorlw	128
  3359  0020D2  0F75               	addlw	-139
  3360  0020D4  A0D8               	btfss	status,0,c
  3361  0020D6  D05D               	goto	l3444
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3365  0020D8  0E00               	movlw	0
  3366  0020DA  0100               	movlb	0	; () banked
  3367  0020DC  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  3368  0020DE  0E0A               	movlw	10
  3369  0020E0  6F88               	movwf	___awdiv@divisor& (0+255),b
  3370  0020E2  0100               	movlb	0	; () banked
  3371  0020E4  51A9               	movf	scale@scl& (0+255),w,b
  3372  0020E6  0100               	movlb	0	; () banked
  3373  0020E8  6F86               	movwf	___awdiv@dividend& (0+255),b
  3374  0020EA  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  3375  0020EC  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  3376  0020EE  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  3377  0020F0  EC5E  F020         	call	___awdiv	;wreg free
  3378  0020F4  0E09               	movlw	9
  3379  0020F6  0100               	movlb	0	; () banked
  3380  0020F8  2586               	addwf	?___awdiv& (0+255),w,b
  3381  0020FA  0100               	movlb	0	; () banked
  3382  0020FC  6F8E               	movwf	___wmul@multiplier& (0+255),b
  3383  0020FE  0E00               	movlw	0
  3384  002100  0100               	movlb	0	; () banked
  3385  002102  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  3386  002104  0100               	movlb	0	; () banked
  3387  002106  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3388  002108  0E00               	movlw	0
  3389  00210A  0100               	movlb	0	; () banked
  3390  00210C  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3391  00210E  0E03               	movlw	3
  3392  002110  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3393  002112  EC72  F025         	call	___wmul	;wreg free
  3394  002116  0E29               	movlw	low __npowers_
  3395  002118  0100               	movlb	0	; () banked
  3396  00211A  258E               	addwf	?___wmul& (0+255),w,b
  3397  00211C  6EF6               	movwf	tblptrl,c
  3398  00211E  0E10               	movlw	high __npowers_
  3399  002120  0100               	movlb	0	; () banked
  3400  002122  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  3401  002124  6EF7               	movwf	tblptrh,c
  3402  002126                     	if	0	;There are less than 3 active tblptr bytes
  3403  002126                     	endif
  3404  002126  0009               	tblrd		*+
  3405  002128  CFF5 F094          	movff	tablat,___ftmul@f1
  3406  00212C  0009               	tblrd		*+
  3407  00212E  CFF5 F095          	movff	tablat,___ftmul@f1+1
  3408  002132  000A               	tblrd		*-
  3409  002134  CFF5 F096          	movff	tablat,___ftmul@f1+2
  3410  002138  0E00               	movlw	0
  3411  00213A  0100               	movlb	0	; () banked
  3412  00213C  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3413  00213E  0E03               	movlw	3
  3414  002140  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3415  002142  0E00               	movlw	0
  3416  002144  0100               	movlb	0	; () banked
  3417  002146  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  3418  002148  0E0A               	movlw	10
  3419  00214A  6F82               	movwf	___awmod@divisor& (0+255),b
  3420  00214C  0100               	movlb	0	; () banked
  3421  00214E  51A9               	movf	scale@scl& (0+255),w,b
  3422  002150  0100               	movlb	0	; () banked
  3423  002152  6F80               	movwf	___awmod@dividend& (0+255),b
  3424  002154  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  3425  002156  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  3426  002158  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  3427  00215A  EC72  F021         	call	___awmod	;wreg free
  3428  00215E  C080  F08E         	movff	?___awmod,___wmul@multiplier
  3429  002162  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  3430  002166  EC72  F025         	call	___wmul	;wreg free
  3431  00216A  0E29               	movlw	low __npowers_
  3432  00216C  0100               	movlb	0	; () banked
  3433  00216E  258E               	addwf	?___wmul& (0+255),w,b
  3434  002170  6EF6               	movwf	tblptrl,c
  3435  002172  0E10               	movlw	high __npowers_
  3436  002174  0100               	movlb	0	; () banked
  3437  002176  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  3438  002178  6EF7               	movwf	tblptrh,c
  3439  00217A                     	if	0	;There are less than 3 active tblptr bytes
  3440  00217A                     	endif
  3441  00217A  0009               	tblrd		*+
  3442  00217C  CFF5 F097          	movff	tablat,___ftmul@f2
  3443  002180  0009               	tblrd		*+
  3444  002182  CFF5 F098          	movff	tablat,___ftmul@f2+1
  3445  002186  000A               	tblrd		*-
  3446  002188  CFF5 F099          	movff	tablat,___ftmul@f2+2
  3447  00218C  EC5C  F01B         	call	___ftmul	;wreg free
  3448  002190  D796               	goto	L2
  3449  002192                     l3444:
  3450                           
  3451                           ;doprnt.c: 434: return _npowers_[scl];
  3452  002192  0100               	movlb	0	; () banked
  3453  002194  51A9               	movf	scale@scl& (0+255),w,b
  3454  002196  0D03               	mullw	3
  3455  002198  0E29               	movlw	low __npowers_
  3456  00219A  24F3               	addwf	prodl,w,c
  3457  00219C  6EF6               	movwf	tblptrl,c
  3458  00219E  0E10               	movlw	high __npowers_
  3459  0021A0  20F4               	addwfc	prodh,w,c
  3460  0021A2  6EF7               	movwf	tblptrh,c
  3461  0021A4                     	if	0	;There are less than 3 active tblptr bytes
  3462  0021A4                     	endif
  3463  0021A4  0009               	tblrd		*+
  3464  0021A6  CFF5 F0A3          	movff	tablat,?_scale
  3465  0021AA  0009               	tblrd		*+
  3466  0021AC  CFF5 F0A4          	movff	tablat,?_scale+1
  3467  0021B0  000A               	tblrd		*-
  3468  0021B2  CFF5 F0A5          	movff	tablat,?_scale+2
  3469                           
  3470                           ; BSR set to: 0
  3471  0021B6  0012               	return	
  3472  0021B8                     l3448:
  3473                           
  3474                           ; BSR set to: 0
  3475                           ;doprnt.c: 435: }
  3476                           ;doprnt.c: 436: if(scl>=110)
  3477  0021B8  0100               	movlb	0	; () banked
  3478  0021BA  51A9               	movf	scale@scl& (0+255),w,b
  3479  0021BC  0A80               	xorlw	128
  3480  0021BE  0F12               	addlw	-238
  3481  0021C0  A0D8               	btfss	status,0,c
  3482  0021C2  D0AC               	goto	l3456
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3486  0021C4  0E00               	movlw	0
  3487  0021C6  0100               	movlb	0	; () banked
  3488  0021C8  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3489  0021CA  0E03               	movlw	3
  3490  0021CC  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3491  0021CE  0E00               	movlw	0
  3492  0021D0  0100               	movlb	0	; () banked
  3493  0021D2  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  3494  0021D4  0E0A               	movlw	10
  3495  0021D6  6F88               	movwf	___awdiv@divisor& (0+255),b
  3496  0021D8  0E00               	movlw	0
  3497  0021DA  0100               	movlb	0	; () banked
  3498  0021DC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  3499  0021DE  0E64               	movlw	100
  3500  0021E0  6F82               	movwf	___awmod@divisor& (0+255),b
  3501  0021E2  0100               	movlb	0	; () banked
  3502  0021E4  51A9               	movf	scale@scl& (0+255),w,b
  3503  0021E6  0100               	movlb	0	; () banked
  3504  0021E8  6F80               	movwf	___awmod@dividend& (0+255),b
  3505  0021EA  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  3506  0021EC  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  3507  0021EE  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  3508  0021F0  EC72  F021         	call	___awmod	;wreg free
  3509  0021F4  C080  F086         	movff	?___awmod,___awdiv@dividend
  3510  0021F8  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  3511  0021FC  EC5E  F020         	call	___awdiv	;wreg free
  3512  002200  0E09               	movlw	9
  3513  002202  0100               	movlb	0	; () banked
  3514  002204  2586               	addwf	?___awdiv& (0+255),w,b
  3515  002206  0100               	movlb	0	; () banked
  3516  002208  6F8E               	movwf	___wmul@multiplier& (0+255),b
  3517  00220A  0E00               	movlw	0
  3518  00220C  0100               	movlb	0	; () banked
  3519  00220E  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  3520  002210  0100               	movlb	0	; () banked
  3521  002212  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3522  002214  EC72  F025         	call	___wmul	;wreg free
  3523  002218  0E50               	movlw	low __powers_
  3524  00221A  0100               	movlb	0	; () banked
  3525  00221C  258E               	addwf	?___wmul& (0+255),w,b
  3526  00221E  6EF6               	movwf	tblptrl,c
  3527  002220  0E10               	movlw	high __powers_
  3528  002222  0100               	movlb	0	; () banked
  3529  002224  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  3530  002226  6EF7               	movwf	tblptrh,c
  3531  002228                     	if	0	;There are less than 3 active tblptr bytes
  3532  002228                     	endif
  3533  002228  0009               	tblrd		*+
  3534  00222A  CFF5 F097          	movff	tablat,___ftmul@f2
  3535  00222E  0009               	tblrd		*+
  3536  002230  CFF5 F098          	movff	tablat,___ftmul@f2+1
  3537  002234  000A               	tblrd		*-
  3538  002236  CFF5 F099          	movff	tablat,___ftmul@f2+2
  3539  00223A  0E00               	movlw	0
  3540  00223C  0100               	movlb	0	; () banked
  3541  00223E  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  3542  002240  0E64               	movlw	100
  3543  002242  6F88               	movwf	___awdiv@divisor& (0+255),b
  3544  002244  0100               	movlb	0	; () banked
  3545  002246  51A9               	movf	scale@scl& (0+255),w,b
  3546  002248  0100               	movlb	0	; () banked
  3547  00224A  6F86               	movwf	___awdiv@dividend& (0+255),b
  3548  00224C  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  3549  00224E  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  3550  002250  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  3551  002252  EC5E  F020         	call	___awdiv	;wreg free
  3552  002256  0E12               	movlw	18
  3553  002258  0100               	movlb	0	; () banked
  3554  00225A  2586               	addwf	?___awdiv& (0+255),w,b
  3555  00225C  0100               	movlb	0	; () banked
  3556  00225E  6F8E               	movwf	___wmul@multiplier& (0+255),b
  3557  002260  0E00               	movlw	0
  3558  002262  0100               	movlb	0	; () banked
  3559  002264  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  3560  002266  0100               	movlb	0	; () banked
  3561  002268  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3562  00226A  0E00               	movlw	0
  3563  00226C  0100               	movlb	0	; () banked
  3564  00226E  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3565  002270  0E03               	movlw	3
  3566  002272  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3567  002274  EC72  F025         	call	___wmul	;wreg free
  3568  002278  0E50               	movlw	low __powers_
  3569  00227A  0100               	movlb	0	; () banked
  3570  00227C  258E               	addwf	?___wmul& (0+255),w,b
  3571  00227E  6EF6               	movwf	tblptrl,c
  3572  002280  0E10               	movlw	high __powers_
  3573  002282  0100               	movlb	0	; () banked
  3574  002284  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  3575  002286  6EF7               	movwf	tblptrh,c
  3576  002288                     	if	0	;There are less than 3 active tblptr bytes
  3577  002288                     	endif
  3578  002288  0009               	tblrd		*+
  3579  00228A  CFF5 F094          	movff	tablat,___ftmul@f1
  3580  00228E  0009               	tblrd		*+
  3581  002290  CFF5 F095          	movff	tablat,___ftmul@f1+1
  3582  002294  000A               	tblrd		*-
  3583  002296  CFF5 F096          	movff	tablat,___ftmul@f1+2
  3584  00229A  EC5C  F01B         	call	___ftmul	;wreg free
  3585  00229E  C094  F0A6         	movff	?___ftmul,_scale$1074
  3586  0022A2  C095  F0A7         	movff	?___ftmul+1,_scale$1074+1
  3587  0022A6  C096  F0A8         	movff	?___ftmul+2,_scale$1074+2
  3588                           
  3589                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3590  0022AA  C0A6  F094         	movff	_scale$1074,___ftmul@f1
  3591  0022AE  C0A7  F095         	movff	_scale$1074+1,___ftmul@f1+1
  3592  0022B2  C0A8  F096         	movff	_scale$1074+2,___ftmul@f1+2
  3593  0022B6  0E00               	movlw	0
  3594  0022B8  0100               	movlb	0	; () banked
  3595  0022BA  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3596  0022BC  0E03               	movlw	3
  3597  0022BE  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3598  0022C0  0E00               	movlw	0
  3599  0022C2  0100               	movlb	0	; () banked
  3600  0022C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  3601  0022C6  0E0A               	movlw	10
  3602  0022C8  6F82               	movwf	___awmod@divisor& (0+255),b
  3603  0022CA  0100               	movlb	0	; () banked
  3604  0022CC  51A9               	movf	scale@scl& (0+255),w,b
  3605  0022CE  0100               	movlb	0	; () banked
  3606  0022D0  6F80               	movwf	___awmod@dividend& (0+255),b
  3607  0022D2  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  3608  0022D4  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  3609  0022D6  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  3610  0022D8  EC72  F021         	call	___awmod	;wreg free
  3611  0022DC  C080  F08E         	movff	?___awmod,___wmul@multiplier
  3612  0022E0  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  3613  0022E4  EC72  F025         	call	___wmul	;wreg free
  3614  0022E8  0E50               	movlw	low __powers_
  3615  0022EA  0100               	movlb	0	; () banked
  3616  0022EC  258E               	addwf	?___wmul& (0+255),w,b
  3617  0022EE  6EF6               	movwf	tblptrl,c
  3618  0022F0  0E10               	movlw	high __powers_
  3619  0022F2  0100               	movlb	0	; () banked
  3620  0022F4  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  3621  0022F6  6EF7               	movwf	tblptrh,c
  3622  0022F8                     	if	0	;There are less than 3 active tblptr bytes
  3623  0022F8                     	endif
  3624  0022F8  0009               	tblrd		*+
  3625  0022FA  CFF5 F097          	movff	tablat,___ftmul@f2
  3626  0022FE  0009               	tblrd		*+
  3627  002300  CFF5 F098          	movff	tablat,___ftmul@f2+1
  3628  002304  000A               	tblrd		*-
  3629  002306  CFF5 F099          	movff	tablat,___ftmul@f2+2
  3630  00230A  EC5C  F01B         	call	___ftmul	;wreg free
  3631  00230E  C094  F0A3         	movff	?___ftmul,?_scale
  3632  002312  C095  F0A4         	movff	?___ftmul+1,?_scale+1
  3633  002316  C096  F0A5         	movff	?___ftmul+2,?_scale+2
  3634  00231A  0012               	return	
  3635  00231C                     l3456:
  3636                           
  3637                           ;doprnt.c: 438: else if(scl > 10)
  3638  00231C  0100               	movlb	0	; () banked
  3639  00231E  51A9               	movf	scale@scl& (0+255),w,b
  3640  002320  0A80               	xorlw	128
  3641  002322  0F75               	addlw	-139
  3642  002324  A0D8               	btfss	status,0,c
  3643  002326  D05D               	goto	l3462
  3644                           
  3645                           ; BSR set to: 0
  3646                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3647  002328  0E00               	movlw	0
  3648  00232A  0100               	movlb	0	; () banked
  3649  00232C  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  3650  00232E  0E0A               	movlw	10
  3651  002330  6F88               	movwf	___awdiv@divisor& (0+255),b
  3652  002332  0100               	movlb	0	; () banked
  3653  002334  51A9               	movf	scale@scl& (0+255),w,b
  3654  002336  0100               	movlb	0	; () banked
  3655  002338  6F86               	movwf	___awdiv@dividend& (0+255),b
  3656  00233A  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  3657  00233C  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  3658  00233E  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  3659  002340  EC5E  F020         	call	___awdiv	;wreg free
  3660  002344  0E09               	movlw	9
  3661  002346  0100               	movlb	0	; () banked
  3662  002348  2586               	addwf	?___awdiv& (0+255),w,b
  3663  00234A  0100               	movlb	0	; () banked
  3664  00234C  6F8E               	movwf	___wmul@multiplier& (0+255),b
  3665  00234E  0E00               	movlw	0
  3666  002350  0100               	movlb	0	; () banked
  3667  002352  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  3668  002354  0100               	movlb	0	; () banked
  3669  002356  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3670  002358  0E00               	movlw	0
  3671  00235A  0100               	movlb	0	; () banked
  3672  00235C  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3673  00235E  0E03               	movlw	3
  3674  002360  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3675  002362  EC72  F025         	call	___wmul	;wreg free
  3676  002366  0E50               	movlw	low __powers_
  3677  002368  0100               	movlb	0	; () banked
  3678  00236A  258E               	addwf	?___wmul& (0+255),w,b
  3679  00236C  6EF6               	movwf	tblptrl,c
  3680  00236E  0E10               	movlw	high __powers_
  3681  002370  0100               	movlb	0	; () banked
  3682  002372  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  3683  002374  6EF7               	movwf	tblptrh,c
  3684  002376                     	if	0	;There are less than 3 active tblptr bytes
  3685  002376                     	endif
  3686  002376  0009               	tblrd		*+
  3687  002378  CFF5 F094          	movff	tablat,___ftmul@f1
  3688  00237C  0009               	tblrd		*+
  3689  00237E  CFF5 F095          	movff	tablat,___ftmul@f1+1
  3690  002382  000A               	tblrd		*-
  3691  002384  CFF5 F096          	movff	tablat,___ftmul@f1+2
  3692  002388  0E00               	movlw	0
  3693  00238A  0100               	movlb	0	; () banked
  3694  00238C  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3695  00238E  0E03               	movlw	3
  3696  002390  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3697  002392  0E00               	movlw	0
  3698  002394  0100               	movlb	0	; () banked
  3699  002396  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  3700  002398  0E0A               	movlw	10
  3701  00239A  6F82               	movwf	___awmod@divisor& (0+255),b
  3702  00239C  0100               	movlb	0	; () banked
  3703  00239E  51A9               	movf	scale@scl& (0+255),w,b
  3704  0023A0  0100               	movlb	0	; () banked
  3705  0023A2  6F80               	movwf	___awmod@dividend& (0+255),b
  3706  0023A4  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  3707  0023A6  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  3708  0023A8  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  3709  0023AA  EC72  F021         	call	___awmod	;wreg free
  3710  0023AE  C080  F08E         	movff	?___awmod,___wmul@multiplier
  3711  0023B2  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  3712  0023B6  EC72  F025         	call	___wmul	;wreg free
  3713  0023BA  0E50               	movlw	low __powers_
  3714  0023BC  0100               	movlb	0	; () banked
  3715  0023BE  258E               	addwf	?___wmul& (0+255),w,b
  3716  0023C0  6EF6               	movwf	tblptrl,c
  3717  0023C2  0E10               	movlw	high __powers_
  3718  0023C4  0100               	movlb	0	; () banked
  3719  0023C6  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  3720  0023C8  6EF7               	movwf	tblptrh,c
  3721  0023CA                     	if	0	;There are less than 3 active tblptr bytes
  3722  0023CA                     	endif
  3723  0023CA  0009               	tblrd		*+
  3724  0023CC  CFF5 F097          	movff	tablat,___ftmul@f2
  3725  0023D0  0009               	tblrd		*+
  3726  0023D2  CFF5 F098          	movff	tablat,___ftmul@f2+1
  3727  0023D6  000A               	tblrd		*-
  3728  0023D8  CFF5 F099          	movff	tablat,___ftmul@f2+2
  3729  0023DC  EC5C  F01B         	call	___ftmul	;wreg free
  3730  0023E0  D796               	goto	L3
  3731  0023E2                     l3462:
  3732                           
  3733                           ;doprnt.c: 440: return _powers_[scl];
  3734  0023E2  0100               	movlb	0	; () banked
  3735  0023E4  51A9               	movf	scale@scl& (0+255),w,b
  3736  0023E6  0D03               	mullw	3
  3737  0023E8  0E50               	movlw	low __powers_
  3738  0023EA  24F3               	addwf	prodl,w,c
  3739  0023EC  6EF6               	movwf	tblptrl,c
  3740  0023EE  0E10               	movlw	high __powers_
  3741  0023F0  20F4               	addwfc	prodh,w,c
  3742  0023F2  6EF7               	movwf	tblptrh,c
  3743  0023F4                     	if	0	;There are less than 3 active tblptr bytes
  3744  0023F4                     	endif
  3745  0023F4  0009               	tblrd		*+
  3746  0023F6  CFF5 F0A3          	movff	tablat,?_scale
  3747  0023FA  0009               	tblrd		*+
  3748  0023FC  CFF5 F0A4          	movff	tablat,?_scale+1
  3749  002400  000A               	tblrd		*-
  3750  002402  CFF5 F0A5          	movff	tablat,?_scale+2
  3751  002406  0012               	return	
  3752  002408                     __end_of_scale:
  3753                           	opt stack 0
  3754                           tblptru	equ	0xFF8
  3755                           tblptrh	equ	0xFF7
  3756                           tblptrl	equ	0xFF6
  3757                           tablat	equ	0xFF5
  3758                           prodh	equ	0xFF4
  3759                           prodl	equ	0xFF3
  3760                           intcon	equ	0xFF2
  3761                           wreg	equ	0xFE8
  3762                           indf2	equ	0xFDF
  3763                           postinc2	equ	0xFDE
  3764                           postdec2	equ	0xFDD
  3765                           fsr2h	equ	0xFDA
  3766                           fsr2l	equ	0xFD9
  3767                           status	equ	0xFD8
  3768                           
  3769 ;; *************** function _putch *****************
  3770 ;; Defined at:
  3771 ;;		line 35 in file "lcd.c"
  3772 ;; Parameters:    Size  Location     Type
  3773 ;;  data            1    wreg     unsigned char 
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;  data            1    4[BANK0 ] unsigned char 
  3776 ;; Return value:  Size  Location     Type
  3777 ;;                  1    wreg      void 
  3778 ;; Registers used:
  3779 ;;		wreg, status,2, status,0, cstack
  3780 ;; Tracked objects:
  3781 ;;		On entry : 0/0
  3782 ;;		On exit  : 0/0
  3783 ;;		Unchanged: 0/0
  3784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3786 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3788 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3789 ;;Total ram usage:        1 bytes
  3790 ;; Hardware stack levels used:    1
  3791 ;; Hardware stack levels required when called:    9
  3792 ;; This function calls:
  3793 ;;		_lcdNewline
  3794 ;;		_lcdNibble
  3795 ;; This function is called by:
  3796 ;;		_printf
  3797 ;; This function uses a non-reentrant model
  3798 ;;
  3799                           
  3800                           	psect	text5
  3801  004BA2                     __ptext5:
  3802                           	opt stack 0
  3803  004BA2                     _putch:
  3804                           	opt stack 19
  3805                           
  3806                           ;incstack = 0
  3807                           ;putch@data stored from wreg
  3808  004BA2  0100               	movlb	0	; () banked
  3809  004BA4  6F84               	movwf	putch@data& (0+255),b
  3810                           
  3811                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  3812  004BA6  0E0A               	movlw	10
  3813  004BA8  0100               	movlb	0	; () banked
  3814  004BAA  1984               	xorwf	putch@data& (0+255),w,b
  3815  004BAC  A4D8               	btfss	status,2,c
  3816  004BAE  D003               	goto	l79
  3817                           
  3818                           ; BSR set to: 0
  3819  004BB0  EC53  F026         	call	_lcdNewline	;wreg free
  3820  004BB4  0012               	return	
  3821  004BB6                     l79:
  3822                           
  3823                           ; BSR set to: 0
  3824                           ;lcd.c: 37: else
  3825                           ;lcd.c: 38: {
  3826                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  3827  004BB6  848C               	bsf	3980,2,c	;volatile
  3828                           
  3829                           ; BSR set to: 0
  3830                           ;lcd.c: 40: _delay((unsigned long)((140)*(8000000/4000000.0)));
  3831  004BB8  0E5D               	movlw	93
  3832  004BBA                     u5577:
  3833  004BBA  2EE8               	decfsz	wreg,f,c
  3834  004BBC  D7FE               	bra	u5577
  3835  004BBE  F000               	nop	
  3836                           
  3837                           ;lcd.c: 41: lcdNibble(data);
  3838  004BC0  0100               	movlb	0	; () banked
  3839  004BC2  5184               	movf	putch@data& (0+255),w,b
  3840  004BC4  EC19  F024         	call	_lcdNibble
  3841  004BC8  0012               	return	
  3842  004BCA                     __end_of_putch:
  3843                           	opt stack 0
  3844                           tblptru	equ	0xFF8
  3845                           tblptrh	equ	0xFF7
  3846                           tblptrl	equ	0xFF6
  3847                           tablat	equ	0xFF5
  3848                           prodh	equ	0xFF4
  3849                           prodl	equ	0xFF3
  3850                           intcon	equ	0xFF2
  3851                           wreg	equ	0xFE8
  3852                           indf2	equ	0xFDF
  3853                           postinc2	equ	0xFDE
  3854                           postdec2	equ	0xFDD
  3855                           fsr2h	equ	0xFDA
  3856                           fsr2l	equ	0xFD9
  3857                           status	equ	0xFD8
  3858                           
  3859 ;; *************** function _lcdNewline *****************
  3860 ;; Defined at:
  3861 ;;		line 78 in file "lcd.c"
  3862 ;; Parameters:    Size  Location     Type
  3863 ;;		None
  3864 ;; Auto vars:     Size  Location     Type
  3865 ;;		None
  3866 ;; Return value:  Size  Location     Type
  3867 ;;                  1    wreg      void 
  3868 ;; Registers used:
  3869 ;;		wreg, status,2, status,0, cstack
  3870 ;; Tracked objects:
  3871 ;;		On entry : 0/0
  3872 ;;		On exit  : 0/0
  3873 ;;		Unchanged: 0/0
  3874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3879 ;;Total ram usage:        0 bytes
  3880 ;; Hardware stack levels used:    1
  3881 ;; Hardware stack levels required when called:    8
  3882 ;; This function calls:
  3883 ;;		_lcdInst
  3884 ;; This function is called by:
  3885 ;;		_putch
  3886 ;; This function uses a non-reentrant model
  3887 ;;
  3888                           
  3889                           	psect	text6
  3890  004CA6                     __ptext6:
  3891                           	opt stack 0
  3892  004CA6                     _lcdNewline:
  3893                           	opt stack 19
  3894                           
  3895                           ;lcd.c: 79: lcdInst(0b11000000);
  3896                           
  3897                           ;incstack = 0
  3898  004CA6  0EC0               	movlw	192
  3899  004CA8  ECBC  F025         	call	_lcdInst
  3900  004CAC  0012               	return		;funcret
  3901  004CAE                     __end_of_lcdNewline:
  3902                           	opt stack 0
  3903                           tblptru	equ	0xFF8
  3904                           tblptrh	equ	0xFF7
  3905                           tblptrl	equ	0xFF6
  3906                           tablat	equ	0xFF5
  3907                           prodh	equ	0xFF4
  3908                           prodl	equ	0xFF3
  3909                           intcon	equ	0xFF2
  3910                           wreg	equ	0xFE8
  3911                           indf2	equ	0xFDF
  3912                           postinc2	equ	0xFDE
  3913                           postdec2	equ	0xFDD
  3914                           fsr2h	equ	0xFDA
  3915                           fsr2l	equ	0xFD9
  3916                           status	equ	0xFD8
  3917                           
  3918 ;; *************** function _fround *****************
  3919 ;; Defined at:
  3920 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3921 ;; Parameters:    Size  Location     Type
  3922 ;;  prec            1    wreg     unsigned char 
  3923 ;; Auto vars:     Size  Location     Type
  3924 ;;  prec            1   44[BANK0 ] unsigned char 
  3925 ;; Return value:  Size  Location     Type
  3926 ;;                  3   35[BANK0 ] unsigned char 
  3927 ;; Registers used:
  3928 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3929 ;; Tracked objects:
  3930 ;;		On entry : 0/0
  3931 ;;		On exit  : 0/0
  3932 ;;		Unchanged: 0/0
  3933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3934 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3935 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3937 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3938 ;;Total ram usage:       10 bytes
  3939 ;; Hardware stack levels used:    1
  3940 ;; Hardware stack levels required when called:    8
  3941 ;; This function calls:
  3942 ;;		___awdiv
  3943 ;;		___awmod
  3944 ;;		___ftmul
  3945 ;;		___wmul
  3946 ;; This function is called by:
  3947 ;;		_printf
  3948 ;; This function uses a non-reentrant model
  3949 ;;
  3950                           
  3951                           	psect	text7
  3952  0027F8                     __ptext7:
  3953                           	opt stack 0
  3954  0027F8                     _fround:
  3955                           	opt stack 20
  3956                           
  3957                           ;incstack = 0
  3958                           ;fround@prec stored from wreg
  3959  0027F8  0100               	movlb	0	; () banked
  3960  0027FA  6FAC               	movwf	fround@prec& (0+255),b
  3961                           
  3962                           ;doprnt.c: 413: if(prec>=110)
  3963  0027FC  0E6D               	movlw	109
  3964  0027FE  0100               	movlb	0	; () banked
  3965  002800  65AC               	cpfsgt	fround@prec& (0+255),b
  3966  002802  D0BA               	goto	l3416
  3967                           
  3968                           ; BSR set to: 0
  3969                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3970  002804  0E00               	movlw	0
  3971  002806  0100               	movlb	0	; () banked
  3972  002808  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3973  00280A  0E03               	movlw	3
  3974  00280C  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3975  00280E  0E00               	movlw	0
  3976  002810  0100               	movlb	0	; () banked
  3977  002812  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  3978  002814  0E0A               	movlw	10
  3979  002816  6F88               	movwf	___awdiv@divisor& (0+255),b
  3980  002818  0E00               	movlw	0
  3981  00281A  0100               	movlb	0	; () banked
  3982  00281C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  3983  00281E  0E64               	movlw	100
  3984  002820  6F82               	movwf	___awmod@divisor& (0+255),b
  3985  002822  C0AC  F080         	movff	fround@prec,___awmod@dividend
  3986  002826  0100               	movlb	0	; () banked
  3987  002828  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  3988  00282A  EC72  F021         	call	___awmod	;wreg free
  3989  00282E  C080  F086         	movff	?___awmod,___awdiv@dividend
  3990  002832  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  3991  002836  EC5E  F020         	call	___awdiv	;wreg free
  3992  00283A  0E09               	movlw	9
  3993  00283C  0100               	movlb	0	; () banked
  3994  00283E  2586               	addwf	?___awdiv& (0+255),w,b
  3995  002840  0100               	movlb	0	; () banked
  3996  002842  6F8E               	movwf	___wmul@multiplier& (0+255),b
  3997  002844  0E00               	movlw	0
  3998  002846  0100               	movlb	0	; () banked
  3999  002848  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  4000  00284A  0100               	movlb	0	; () banked
  4001  00284C  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4002  00284E  EC72  F025         	call	___wmul	;wreg free
  4003  002852  0E29               	movlw	low __npowers_
  4004  002854  0100               	movlb	0	; () banked
  4005  002856  258E               	addwf	?___wmul& (0+255),w,b
  4006  002858  6EF6               	movwf	tblptrl,c
  4007  00285A  0E10               	movlw	high __npowers_
  4008  00285C  0100               	movlb	0	; () banked
  4009  00285E  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  4010  002860  6EF7               	movwf	tblptrh,c
  4011  002862                     	if	0	;There are less than 3 active tblptr bytes
  4012  002862                     	endif
  4013  002862  0009               	tblrd		*+
  4014  002864  CFF5 F097          	movff	tablat,___ftmul@f2
  4015  002868  0009               	tblrd		*+
  4016  00286A  CFF5 F098          	movff	tablat,___ftmul@f2+1
  4017  00286E  000A               	tblrd		*-
  4018  002870  CFF5 F099          	movff	tablat,___ftmul@f2+2
  4019  002874  0E00               	movlw	0
  4020  002876  0100               	movlb	0	; () banked
  4021  002878  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  4022  00287A  0E64               	movlw	100
  4023  00287C  6F88               	movwf	___awdiv@divisor& (0+255),b
  4024  00287E  C0AC  F086         	movff	fround@prec,___awdiv@dividend
  4025  002882  0100               	movlb	0	; () banked
  4026  002884  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  4027  002886  EC5E  F020         	call	___awdiv	;wreg free
  4028  00288A  0E12               	movlw	18
  4029  00288C  0100               	movlb	0	; () banked
  4030  00288E  2586               	addwf	?___awdiv& (0+255),w,b
  4031  002890  0100               	movlb	0	; () banked
  4032  002892  6F8E               	movwf	___wmul@multiplier& (0+255),b
  4033  002894  0E00               	movlw	0
  4034  002896  0100               	movlb	0	; () banked
  4035  002898  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  4036  00289A  0100               	movlb	0	; () banked
  4037  00289C  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4038  00289E  0E00               	movlw	0
  4039  0028A0  0100               	movlb	0	; () banked
  4040  0028A2  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4041  0028A4  0E03               	movlw	3
  4042  0028A6  6F90               	movwf	___wmul@multiplicand& (0+255),b
  4043  0028A8  EC72  F025         	call	___wmul	;wreg free
  4044  0028AC  0E29               	movlw	low __npowers_
  4045  0028AE  0100               	movlb	0	; () banked
  4046  0028B0  258E               	addwf	?___wmul& (0+255),w,b
  4047  0028B2  6EF6               	movwf	tblptrl,c
  4048  0028B4  0E10               	movlw	high __npowers_
  4049  0028B6  0100               	movlb	0	; () banked
  4050  0028B8  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  4051  0028BA  6EF7               	movwf	tblptrh,c
  4052  0028BC                     	if	0	;There are less than 3 active tblptr bytes
  4053  0028BC                     	endif
  4054  0028BC  0009               	tblrd		*+
  4055  0028BE  CFF5 F094          	movff	tablat,___ftmul@f1
  4056  0028C2  0009               	tblrd		*+
  4057  0028C4  CFF5 F095          	movff	tablat,___ftmul@f1+1
  4058  0028C8  000A               	tblrd		*-
  4059  0028CA  CFF5 F096          	movff	tablat,___ftmul@f1+2
  4060  0028CE  EC5C  F01B         	call	___ftmul	;wreg free
  4061  0028D2  C094  F0A9         	movff	?___ftmul,_fround$1072
  4062  0028D6  C095  F0AA         	movff	?___ftmul+1,_fround$1072+1
  4063  0028DA  C096  F0AB         	movff	?___ftmul+2,_fround$1072+2
  4064                           
  4065                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4066  0028DE  0E00               	movlw	0
  4067  0028E0  0100               	movlb	0	; () banked
  4068  0028E2  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4069  0028E4  0E03               	movlw	3
  4070  0028E6  6F90               	movwf	___wmul@multiplicand& (0+255),b
  4071  0028E8  0E00               	movlw	0
  4072  0028EA  0100               	movlb	0	; () banked
  4073  0028EC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4074  0028EE  0E0A               	movlw	10
  4075  0028F0  6F82               	movwf	___awmod@divisor& (0+255),b
  4076  0028F2  C0AC  F080         	movff	fround@prec,___awmod@dividend
  4077  0028F6  0100               	movlb	0	; () banked
  4078  0028F8  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  4079  0028FA  EC72  F021         	call	___awmod	;wreg free
  4080  0028FE  C080  F08E         	movff	?___awmod,___wmul@multiplier
  4081  002902  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  4082  002906  EC72  F025         	call	___wmul	;wreg free
  4083  00290A  0E29               	movlw	low __npowers_
  4084  00290C  0100               	movlb	0	; () banked
  4085  00290E  258E               	addwf	?___wmul& (0+255),w,b
  4086  002910  6EF6               	movwf	tblptrl,c
  4087  002912  0E10               	movlw	high __npowers_
  4088  002914  0100               	movlb	0	; () banked
  4089  002916  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  4090  002918  6EF7               	movwf	tblptrh,c
  4091  00291A                     	if	0	;There are less than 3 active tblptr bytes
  4092  00291A                     	endif
  4093  00291A  0009               	tblrd		*+
  4094  00291C  CFF5 F097          	movff	tablat,___ftmul@f2
  4095  002920  0009               	tblrd		*+
  4096  002922  CFF5 F098          	movff	tablat,___ftmul@f2+1
  4097  002926  000A               	tblrd		*-
  4098  002928  CFF5 F099          	movff	tablat,___ftmul@f2+2
  4099  00292C  C0A9  F094         	movff	_fround$1072,___ftmul@f1
  4100  002930  C0AA  F095         	movff	_fround$1072+1,___ftmul@f1+1
  4101  002934  C0AB  F096         	movff	_fround$1072+2,___ftmul@f1+2
  4102  002938  EC5C  F01B         	call	___ftmul	;wreg free
  4103  00293C  C094  F0A6         	movff	?___ftmul,_fround$1073
  4104  002940  C095  F0A7         	movff	?___ftmul+1,_fround$1073+1
  4105  002944  C096  F0A8         	movff	?___ftmul+2,_fround$1073+2
  4106                           
  4107                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4108  002948  C0A6  F094         	movff	_fround$1073,___ftmul@f1
  4109  00294C  C0A7  F095         	movff	_fround$1073+1,___ftmul@f1+1
  4110  002950  C0A8  F096         	movff	_fround$1073+2,___ftmul@f1+2
  4111  002954  0E00               	movlw	0
  4112  002956  0100               	movlb	0	; () banked
  4113  002958  6F97               	movwf	___ftmul@f2& (0+255),b
  4114  00295A  0E00               	movlw	0
  4115  00295C  0100               	movlb	0	; () banked
  4116  00295E  6F98               	movwf	(___ftmul@f2+1)& (0+255),b
  4117  002960  0E3F               	movlw	63
  4118  002962  0100               	movlb	0	; () banked
  4119  002964  6F99               	movwf	(___ftmul@f2+2)& (0+255),b
  4120  002966  EC5C  F01B         	call	___ftmul	;wreg free
  4121  00296A  C094  F0A3         	movff	?___ftmul,?_fround
  4122  00296E  C095  F0A4         	movff	?___ftmul+1,?_fround+1
  4123  002972  C096  F0A5         	movff	?___ftmul+2,?_fround+2
  4124  002976  0012               	return	
  4125  002978                     l3416:
  4126                           
  4127                           ;doprnt.c: 415: else if(prec > 10)
  4128  002978  0E0A               	movlw	10
  4129  00297A  0100               	movlb	0	; () banked
  4130  00297C  65AC               	cpfsgt	fround@prec& (0+255),b
  4131  00297E  D06E               	goto	l3424
  4132                           
  4133                           ; BSR set to: 0
  4134                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4135  002980  0E00               	movlw	0
  4136  002982  0100               	movlb	0	; () banked
  4137  002984  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4138  002986  0E03               	movlw	3
  4139  002988  6F90               	movwf	___wmul@multiplicand& (0+255),b
  4140  00298A  0E00               	movlw	0
  4141  00298C  0100               	movlb	0	; () banked
  4142  00298E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4143  002990  0E0A               	movlw	10
  4144  002992  6F82               	movwf	___awmod@divisor& (0+255),b
  4145  002994  C0AC  F080         	movff	fround@prec,___awmod@dividend
  4146  002998  0100               	movlb	0	; () banked
  4147  00299A  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  4148  00299C  EC72  F021         	call	___awmod	;wreg free
  4149  0029A0  C080  F08E         	movff	?___awmod,___wmul@multiplier
  4150  0029A4  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  4151  0029A8  EC72  F025         	call	___wmul	;wreg free
  4152  0029AC  0E29               	movlw	low __npowers_
  4153  0029AE  0100               	movlb	0	; () banked
  4154  0029B0  258E               	addwf	?___wmul& (0+255),w,b
  4155  0029B2  6EF6               	movwf	tblptrl,c
  4156  0029B4  0E10               	movlw	high __npowers_
  4157  0029B6  0100               	movlb	0	; () banked
  4158  0029B8  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  4159  0029BA  6EF7               	movwf	tblptrh,c
  4160  0029BC                     	if	0	;There are less than 3 active tblptr bytes
  4161  0029BC                     	endif
  4162  0029BC  0009               	tblrd		*+
  4163  0029BE  CFF5 F097          	movff	tablat,___ftmul@f2
  4164  0029C2  0009               	tblrd		*+
  4165  0029C4  CFF5 F098          	movff	tablat,___ftmul@f2+1
  4166  0029C8  000A               	tblrd		*-
  4167  0029CA  CFF5 F099          	movff	tablat,___ftmul@f2+2
  4168  0029CE  0E00               	movlw	0
  4169  0029D0  0100               	movlb	0	; () banked
  4170  0029D2  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  4171  0029D4  0E0A               	movlw	10
  4172  0029D6  6F88               	movwf	___awdiv@divisor& (0+255),b
  4173  0029D8  C0AC  F086         	movff	fround@prec,___awdiv@dividend
  4174  0029DC  0100               	movlb	0	; () banked
  4175  0029DE  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  4176  0029E0  EC5E  F020         	call	___awdiv	;wreg free
  4177  0029E4  0E09               	movlw	9
  4178  0029E6  0100               	movlb	0	; () banked
  4179  0029E8  2586               	addwf	?___awdiv& (0+255),w,b
  4180  0029EA  0100               	movlb	0	; () banked
  4181  0029EC  6F8E               	movwf	___wmul@multiplier& (0+255),b
  4182  0029EE  0E00               	movlw	0
  4183  0029F0  0100               	movlb	0	; () banked
  4184  0029F2  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  4185  0029F4  0100               	movlb	0	; () banked
  4186  0029F6  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4187  0029F8  0E00               	movlw	0
  4188  0029FA  0100               	movlb	0	; () banked
  4189  0029FC  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4190  0029FE  0E03               	movlw	3
  4191  002A00  6F90               	movwf	___wmul@multiplicand& (0+255),b
  4192  002A02  EC72  F025         	call	___wmul	;wreg free
  4193  002A06  0E29               	movlw	low __npowers_
  4194  002A08  0100               	movlb	0	; () banked
  4195  002A0A  258E               	addwf	?___wmul& (0+255),w,b
  4196  002A0C  6EF6               	movwf	tblptrl,c
  4197  002A0E  0E10               	movlw	high __npowers_
  4198  002A10  0100               	movlb	0	; () banked
  4199  002A12  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  4200  002A14  6EF7               	movwf	tblptrh,c
  4201  002A16                     	if	0	;There are less than 3 active tblptr bytes
  4202  002A16                     	endif
  4203  002A16  0009               	tblrd		*+
  4204  002A18  CFF5 F094          	movff	tablat,___ftmul@f1
  4205  002A1C  0009               	tblrd		*+
  4206  002A1E  CFF5 F095          	movff	tablat,___ftmul@f1+1
  4207  002A22  000A               	tblrd		*-
  4208  002A24  CFF5 F096          	movff	tablat,___ftmul@f1+2
  4209  002A28  EC5C  F01B         	call	___ftmul	;wreg free
  4210  002A2C  C094  F0A9         	movff	?___ftmul,_fround$1072
  4211  002A30  C095  F0AA         	movff	?___ftmul+1,_fround$1072+1
  4212  002A34  C096  F0AB         	movff	?___ftmul+2,_fround$1072+2
  4213                           
  4214                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4215  002A38  C0A9  F094         	movff	_fround$1072,___ftmul@f1
  4216  002A3C  C0AA  F095         	movff	_fround$1072+1,___ftmul@f1+1
  4217  002A40  C0AB  F096         	movff	_fround$1072+2,___ftmul@f1+2
  4218  002A44  0E00               	movlw	0
  4219  002A46  0100               	movlb	0	; () banked
  4220  002A48  6F97               	movwf	___ftmul@f2& (0+255),b
  4221  002A4A  0E00               	movlw	0
  4222  002A4C  0100               	movlb	0	; () banked
  4223  002A4E  6F98               	movwf	(___ftmul@f2+1)& (0+255),b
  4224  002A50  0E3F               	movlw	63
  4225  002A52  0100               	movlb	0	; () banked
  4226  002A54  6F99               	movwf	(___ftmul@f2+2)& (0+255),b
  4227  002A56  EC5C  F01B         	call	___ftmul	;wreg free
  4228  002A5A  D787               	goto	L4
  4229  002A5C                     l3424:
  4230                           
  4231                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4232  002A5C  0100               	movlb	0	; () banked
  4233  002A5E  51AC               	movf	fround@prec& (0+255),w,b
  4234  002A60  0D03               	mullw	3
  4235  002A62  0E29               	movlw	low __npowers_
  4236  002A64  24F3               	addwf	prodl,w,c
  4237  002A66  6EF6               	movwf	tblptrl,c
  4238  002A68  0E10               	movlw	high __npowers_
  4239  002A6A  20F4               	addwfc	prodh,w,c
  4240  002A6C  6EF7               	movwf	tblptrh,c
  4241  002A6E                     	if	0	;There are less than 3 active tblptr bytes
  4242  002A6E                     	endif
  4243  002A6E  0009               	tblrd		*+
  4244  002A70  CFF5 F094          	movff	tablat,___ftmul@f1
  4245  002A74  0009               	tblrd		*+
  4246  002A76  CFF5 F095          	movff	tablat,___ftmul@f1+1
  4247  002A7A  000A               	tblrd		*-
  4248  002A7C  CFF5 F096          	movff	tablat,___ftmul@f1+2
  4249  002A80  0E00               	movlw	0
  4250  002A82  0100               	movlb	0	; () banked
  4251  002A84  6F97               	movwf	___ftmul@f2& (0+255),b
  4252  002A86  0E00               	movlw	0
  4253  002A88  0100               	movlb	0	; () banked
  4254  002A8A  6F98               	movwf	(___ftmul@f2+1)& (0+255),b
  4255  002A8C  0E3F               	movlw	63
  4256  002A8E  0100               	movlb	0	; () banked
  4257  002A90  6F99               	movwf	(___ftmul@f2+2)& (0+255),b
  4258  002A92  EC5C  F01B         	call	___ftmul	;wreg free
  4259  002A96  C094  F0A3         	movff	?___ftmul,?_fround
  4260  002A9A  C095  F0A4         	movff	?___ftmul+1,?_fround+1
  4261  002A9E  C096  F0A5         	movff	?___ftmul+2,?_fround+2
  4262  002AA2  0012               	return	
  4263  002AA4                     __end_of_fround:
  4264                           	opt stack 0
  4265                           tblptru	equ	0xFF8
  4266                           tblptrh	equ	0xFF7
  4267                           tblptrl	equ	0xFF6
  4268                           tablat	equ	0xFF5
  4269                           prodh	equ	0xFF4
  4270                           prodl	equ	0xFF3
  4271                           intcon	equ	0xFF2
  4272                           wreg	equ	0xFE8
  4273                           indf2	equ	0xFDF
  4274                           postinc2	equ	0xFDE
  4275                           postdec2	equ	0xFDD
  4276                           fsr2h	equ	0xFDA
  4277                           fsr2l	equ	0xFD9
  4278                           status	equ	0xFD8
  4279                           
  4280 ;; *************** function ___wmul *****************
  4281 ;; Defined at:
  4282 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4283 ;; Parameters:    Size  Location     Type
  4284 ;;  multiplier      2   14[BANK0 ] unsigned int 
  4285 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  4286 ;; Auto vars:     Size  Location     Type
  4287 ;;  product         2   18[BANK0 ] unsigned int 
  4288 ;; Return value:  Size  Location     Type
  4289 ;;                  2   14[BANK0 ] unsigned int 
  4290 ;; Registers used:
  4291 ;;		wreg, status,2, status,0, prodl, prodh
  4292 ;; Tracked objects:
  4293 ;;		On entry : 0/0
  4294 ;;		On exit  : 0/0
  4295 ;;		Unchanged: 0/0
  4296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4297 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4298 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4300 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4301 ;;Total ram usage:        6 bytes
  4302 ;; Hardware stack levels used:    1
  4303 ;; Hardware stack levels required when called:    6
  4304 ;; This function calls:
  4305 ;;		Nothing
  4306 ;; This function is called by:
  4307 ;;		_fround
  4308 ;;		_scale
  4309 ;;		_printf
  4310 ;; This function uses a non-reentrant model
  4311 ;;
  4312                           
  4313                           	psect	text8
  4314  004AE4                     __ptext8:
  4315                           	opt stack 0
  4316  004AE4                     ___wmul:
  4317                           	opt stack 21
  4318                           
  4319                           ;incstack = 0
  4320  004AE4  0100               	movlb	0	; () banked
  4321  004AE6  518E               	movf	___wmul@multiplier& (0+255),w,b
  4322  004AE8  0100               	movlb	0	; () banked
  4323  004AEA  0390               	mulwf	___wmul@multiplicand& (0+255),b
  4324  004AEC  CFF3 F092          	movff	prodl,___wmul@product
  4325  004AF0  CFF4 F093          	movff	prodh,___wmul@product+1
  4326  004AF4  0100               	movlb	0	; () banked
  4327  004AF6  518E               	movf	___wmul@multiplier& (0+255),w,b
  4328  004AF8  0100               	movlb	0	; () banked
  4329  004AFA  0391               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  4330  004AFC  50F3               	movf	prodl,w,c
  4331  004AFE  0100               	movlb	0	; () banked
  4332  004B00  2793               	addwf	(___wmul@product+1)& (0+255),f,b
  4333  004B02  0100               	movlb	0	; () banked
  4334  004B04  518F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  4335  004B06  0100               	movlb	0	; () banked
  4336  004B08  0390               	mulwf	___wmul@multiplicand& (0+255),b
  4337  004B0A  50F3               	movf	prodl,w,c
  4338  004B0C  0100               	movlb	0	; () banked
  4339  004B0E  2793               	addwf	(___wmul@product+1)& (0+255),f,b
  4340                           
  4341                           ; BSR set to: 0
  4342  004B10  C092  F08E         	movff	___wmul@product,?___wmul
  4343  004B14  C093  F08F         	movff	___wmul@product+1,?___wmul+1
  4344  004B18  0012               	return	
  4345  004B1A                     __end_of___wmul:
  4346                           	opt stack 0
  4347                           tblptru	equ	0xFF8
  4348                           tblptrh	equ	0xFF7
  4349                           tblptrl	equ	0xFF6
  4350                           tablat	equ	0xFF5
  4351                           prodh	equ	0xFF4
  4352                           prodl	equ	0xFF3
  4353                           intcon	equ	0xFF2
  4354                           wreg	equ	0xFE8
  4355                           indf2	equ	0xFDF
  4356                           postinc2	equ	0xFDE
  4357                           postdec2	equ	0xFDD
  4358                           fsr2h	equ	0xFDA
  4359                           fsr2l	equ	0xFD9
  4360                           status	equ	0xFD8
  4361                           
  4362 ;; *************** function ___ftmul *****************
  4363 ;; Defined at:
  4364 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  4365 ;; Parameters:    Size  Location     Type
  4366 ;;  f1              3   20[BANK0 ] float 
  4367 ;;  f2              3   23[BANK0 ] float 
  4368 ;; Auto vars:     Size  Location     Type
  4369 ;;  f3_as_produc    3   30[BANK0 ] unsigned um
  4370 ;;  sign            1   34[BANK0 ] unsigned char 
  4371 ;;  cntr            1   33[BANK0 ] unsigned char 
  4372 ;;  exp             1   29[BANK0 ] unsigned char 
  4373 ;; Return value:  Size  Location     Type
  4374 ;;                  3   20[BANK0 ] float 
  4375 ;; Registers used:
  4376 ;;		wreg, status,2, status,0, cstack
  4377 ;; Tracked objects:
  4378 ;;		On entry : 0/0
  4379 ;;		On exit  : 0/0
  4380 ;;		Unchanged: 0/0
  4381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4382 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4383 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4384 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4385 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4386 ;;Total ram usage:       15 bytes
  4387 ;; Hardware stack levels used:    1
  4388 ;; Hardware stack levels required when called:    7
  4389 ;; This function calls:
  4390 ;;		___ftpack
  4391 ;; This function is called by:
  4392 ;;		_fround
  4393 ;;		_scale
  4394 ;;		_printf
  4395 ;; This function uses a non-reentrant model
  4396 ;;
  4397                           
  4398                           	psect	text9
  4399  0036B8                     __ptext9:
  4400                           	opt stack 0
  4401  0036B8                     ___ftmul:
  4402                           	opt stack 20
  4403                           
  4404                           ; BSR set to: 0
  4405                           ;incstack = 0
  4406  0036B8  C096  F09A         	movff	___ftmul@f1+2,??___ftmul
  4407  0036BC  0100               	movlb	0	; () banked
  4408  0036BE  6B9B               	clrf	(??___ftmul+1)& (0+255),b
  4409  0036C0  6B9C               	clrf	(??___ftmul+2)& (0+255),b
  4410  0036C2  0100               	movlb	0	; () banked
  4411  0036C4  3595               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  4412  0036C6  0100               	movlb	0	; () banked
  4413  0036C8  379A               	rlcf	??___ftmul& (0+255),f,b
  4414  0036CA  E301               	bnc	u3181
  4415  0036CC  819B               	bsf	(??___ftmul+1)& (0+255),0,b
  4416  0036CE                     u3181:
  4417  0036CE  0100               	movlb	0	; () banked
  4418  0036D0  519A               	movf	??___ftmul& (0+255),w,b
  4419  0036D2  0100               	movlb	0	; () banked
  4420  0036D4  6F9D               	movwf	___ftmul@exp& (0+255),b
  4421  0036D6  0100               	movlb	0	; () banked
  4422  0036D8  519D               	movf	___ftmul@exp& (0+255),w,b
  4423  0036DA  A4D8               	btfss	status,2,c
  4424  0036DC  D00A               	goto	l3228
  4425                           
  4426                           ; BSR set to: 0
  4427  0036DE  0E00               	movlw	0
  4428  0036E0  0100               	movlb	0	; () banked
  4429  0036E2  6F94               	movwf	?___ftmul& (0+255),b
  4430  0036E4  0E00               	movlw	0
  4431  0036E6  0100               	movlb	0	; () banked
  4432  0036E8  6F95               	movwf	(?___ftmul+1)& (0+255),b
  4433  0036EA  0E00               	movlw	0
  4434  0036EC  0100               	movlb	0	; () banked
  4435  0036EE  6F96               	movwf	(?___ftmul+2)& (0+255),b
  4436                           
  4437                           ; BSR set to: 0
  4438  0036F0  0012               	return	
  4439  0036F2                     l3228:
  4440                           
  4441                           ; BSR set to: 0
  4442  0036F2  C099  F09A         	movff	___ftmul@f2+2,??___ftmul
  4443  0036F6  0100               	movlb	0	; () banked
  4444  0036F8  6B9B               	clrf	(??___ftmul+1)& (0+255),b
  4445  0036FA  6B9C               	clrf	(??___ftmul+2)& (0+255),b
  4446  0036FC  0100               	movlb	0	; () banked
  4447  0036FE  3598               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  4448  003700  0100               	movlb	0	; () banked
  4449  003702  379A               	rlcf	??___ftmul& (0+255),f,b
  4450  003704  E301               	bnc	u3201
  4451  003706  819B               	bsf	(??___ftmul+1)& (0+255),0,b
  4452  003708                     u3201:
  4453  003708  0100               	movlb	0	; () banked
  4454  00370A  519A               	movf	??___ftmul& (0+255),w,b
  4455  00370C  0100               	movlb	0	; () banked
  4456  00370E  6FA2               	movwf	___ftmul@sign& (0+255),b
  4457  003710  0100               	movlb	0	; () banked
  4458  003712  51A2               	movf	___ftmul@sign& (0+255),w,b
  4459  003714  A4D8               	btfss	status,2,c
  4460  003716  D00A               	goto	l3234
  4461                           
  4462                           ; BSR set to: 0
  4463  003718  0E00               	movlw	0
  4464  00371A  0100               	movlb	0	; () banked
  4465  00371C  6F94               	movwf	?___ftmul& (0+255),b
  4466  00371E  0E00               	movlw	0
  4467  003720  0100               	movlb	0	; () banked
  4468  003722  6F95               	movwf	(?___ftmul+1)& (0+255),b
  4469  003724  0E00               	movlw	0
  4470  003726  0100               	movlb	0	; () banked
  4471  003728  6F96               	movwf	(?___ftmul+2)& (0+255),b
  4472                           
  4473                           ; BSR set to: 0
  4474  00372A  0012               	return	
  4475  00372C                     l3234:
  4476                           
  4477                           ; BSR set to: 0
  4478  00372C  0100               	movlb	0	; () banked
  4479  00372E  51A2               	movf	___ftmul@sign& (0+255),w,b
  4480  003730  0F7B               	addlw	123
  4481  003732  0100               	movlb	0	; () banked
  4482  003734  279D               	addwf	___ftmul@exp& (0+255),f,b
  4483                           
  4484                           ; BSR set to: 0
  4485  003736  C096  F0A2         	movff	___ftmul@f1+2,___ftmul@sign
  4486  00373A  0100               	movlb	0	; () banked
  4487  00373C  5199               	movf	(___ftmul@f2+2)& (0+255),w,b
  4488  00373E  0100               	movlb	0	; () banked
  4489  003740  1BA2               	xorwf	___ftmul@sign& (0+255),f,b
  4490  003742  0E80               	movlw	128
  4491  003744  0100               	movlb	0	; () banked
  4492  003746  17A2               	andwf	___ftmul@sign& (0+255),f,b
  4493                           
  4494                           ; BSR set to: 0
  4495  003748  0100               	movlb	0	; () banked
  4496  00374A  8F95               	bsf	(___ftmul@f1+1)& (0+255),7,b
  4497                           
  4498                           ; BSR set to: 0
  4499  00374C  0100               	movlb	0	; () banked
  4500  00374E  8F98               	bsf	(___ftmul@f2+1)& (0+255),7,b
  4501                           
  4502                           ; BSR set to: 0
  4503  003750  0EFF               	movlw	255
  4504  003752  0100               	movlb	0	; () banked
  4505  003754  1797               	andwf	___ftmul@f2& (0+255),f,b
  4506  003756  0EFF               	movlw	255
  4507  003758  0100               	movlb	0	; () banked
  4508  00375A  1798               	andwf	(___ftmul@f2+1)& (0+255),f,b
  4509  00375C  0E00               	movlw	0
  4510  00375E  0100               	movlb	0	; () banked
  4511  003760  1799               	andwf	(___ftmul@f2+2)& (0+255),f,b
  4512                           
  4513                           ; BSR set to: 0
  4514  003762  0E00               	movlw	0
  4515  003764  0100               	movlb	0	; () banked
  4516  003766  6F9E               	movwf	___ftmul@f3_as_product& (0+255),b
  4517  003768  0E00               	movlw	0
  4518  00376A  0100               	movlb	0	; () banked
  4519  00376C  6F9F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  4520  00376E  0E00               	movlw	0
  4521  003770  0100               	movlb	0	; () banked
  4522  003772  6FA0               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  4523                           
  4524                           ; BSR set to: 0
  4525  003774  0E07               	movlw	7
  4526  003776  0100               	movlb	0	; () banked
  4527  003778  6FA1               	movwf	___ftmul@cntr& (0+255),b
  4528  00377A                     l3248:
  4529                           
  4530                           ; BSR set to: 0
  4531  00377A  0100               	movlb	0	; () banked
  4532  00377C  A194               	btfss	___ftmul@f1& (0+255),0,b
  4533  00377E  D00C               	goto	l3252
  4534                           
  4535                           ; BSR set to: 0
  4536  003780  0100               	movlb	0	; () banked
  4537  003782  5197               	movf	___ftmul@f2& (0+255),w,b
  4538  003784  0100               	movlb	0	; () banked
  4539  003786  279E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4540  003788  0100               	movlb	0	; () banked
  4541  00378A  5198               	movf	(___ftmul@f2+1)& (0+255),w,b
  4542  00378C  0100               	movlb	0	; () banked
  4543  00378E  239F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4544  003790  0100               	movlb	0	; () banked
  4545  003792  5199               	movf	(___ftmul@f2+2)& (0+255),w,b
  4546  003794  0100               	movlb	0	; () banked
  4547  003796  23A0               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4548  003798                     l3252:
  4549                           
  4550                           ; BSR set to: 0
  4551  003798  0100               	movlb	0	; () banked
  4552  00379A  90D8               	bcf	status,0,c
  4553  00379C  3396               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  4554  00379E  3395               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  4555  0037A0  3394               	rrcf	___ftmul@f1& (0+255),f,b
  4556  0037A2  0100               	movlb	0	; () banked
  4557  0037A4  90D8               	bcf	status,0,c
  4558  0037A6  3797               	rlcf	___ftmul@f2& (0+255),f,b
  4559  0037A8  3798               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  4560  0037AA  3799               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  4561                           
  4562                           ; BSR set to: 0
  4563  0037AC  0100               	movlb	0	; () banked
  4564  0037AE  2FA1               	decfsz	___ftmul@cntr& (0+255),f,b
  4565  0037B0  D7E4               	goto	l3248
  4566                           
  4567                           ; BSR set to: 0
  4568                           
  4569                           ; BSR set to: 0
  4570  0037B2  0E09               	movlw	9
  4571  0037B4  0100               	movlb	0	; () banked
  4572  0037B6  6FA1               	movwf	___ftmul@cntr& (0+255),b
  4573  0037B8                     l3258:
  4574                           
  4575                           ; BSR set to: 0
  4576  0037B8  0100               	movlb	0	; () banked
  4577  0037BA  A194               	btfss	___ftmul@f1& (0+255),0,b
  4578  0037BC  D00C               	goto	l3262
  4579                           
  4580                           ; BSR set to: 0
  4581  0037BE  0100               	movlb	0	; () banked
  4582  0037C0  5197               	movf	___ftmul@f2& (0+255),w,b
  4583  0037C2  0100               	movlb	0	; () banked
  4584  0037C4  279E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4585  0037C6  0100               	movlb	0	; () banked
  4586  0037C8  5198               	movf	(___ftmul@f2+1)& (0+255),w,b
  4587  0037CA  0100               	movlb	0	; () banked
  4588  0037CC  239F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4589  0037CE  0100               	movlb	0	; () banked
  4590  0037D0  5199               	movf	(___ftmul@f2+2)& (0+255),w,b
  4591  0037D2  0100               	movlb	0	; () banked
  4592  0037D4  23A0               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4593  0037D6                     l3262:
  4594                           
  4595                           ; BSR set to: 0
  4596  0037D6  0100               	movlb	0	; () banked
  4597  0037D8  90D8               	bcf	status,0,c
  4598  0037DA  3396               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  4599  0037DC  3395               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  4600  0037DE  3394               	rrcf	___ftmul@f1& (0+255),f,b
  4601  0037E0  0100               	movlb	0	; () banked
  4602  0037E2  90D8               	bcf	status,0,c
  4603  0037E4  33A0               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  4604  0037E6  339F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  4605  0037E8  339E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  4606                           
  4607                           ; BSR set to: 0
  4608  0037EA  0100               	movlb	0	; () banked
  4609  0037EC  2FA1               	decfsz	___ftmul@cntr& (0+255),f,b
  4610  0037EE  D7E4               	goto	l3258
  4611                           
  4612                           ; BSR set to: 0
  4613                           
  4614                           ; BSR set to: 0
  4615  0037F0  C09E  F080         	movff	___ftmul@f3_as_product,___ftpack@arg
  4616  0037F4  C09F  F081         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4617  0037F8  C0A0  F082         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4618  0037FC  C09D  F083         	movff	___ftmul@exp,___ftpack@exp
  4619  003800  C0A2  F084         	movff	___ftmul@sign,___ftpack@sign
  4620  003804  EC80  F01E         	call	___ftpack	;wreg free
  4621  003808  C080  F094         	movff	?___ftpack,?___ftmul
  4622  00380C  C081  F095         	movff	?___ftpack+1,?___ftmul+1
  4623  003810  C082  F096         	movff	?___ftpack+2,?___ftmul+2
  4624  003814  0012               	return	
  4625  003816                     __end_of___ftmul:
  4626                           	opt stack 0
  4627                           tblptru	equ	0xFF8
  4628                           tblptrh	equ	0xFF7
  4629                           tblptrl	equ	0xFF6
  4630                           tablat	equ	0xFF5
  4631                           prodh	equ	0xFF4
  4632                           prodl	equ	0xFF3
  4633                           intcon	equ	0xFF2
  4634                           wreg	equ	0xFE8
  4635                           indf2	equ	0xFDF
  4636                           postinc2	equ	0xFDE
  4637                           postdec2	equ	0xFDD
  4638                           fsr2h	equ	0xFDA
  4639                           fsr2l	equ	0xFD9
  4640                           status	equ	0xFD8
  4641                           
  4642 ;; *************** function ___awmod *****************
  4643 ;; Defined at:
  4644 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  4645 ;; Parameters:    Size  Location     Type
  4646 ;;  dividend        2    0[BANK0 ] int 
  4647 ;;  divisor         2    2[BANK0 ] int 
  4648 ;; Auto vars:     Size  Location     Type
  4649 ;;  sign            1    5[BANK0 ] unsigned char 
  4650 ;;  counter         1    4[BANK0 ] unsigned char 
  4651 ;; Return value:  Size  Location     Type
  4652 ;;                  2    0[BANK0 ] int 
  4653 ;; Registers used:
  4654 ;;		wreg, status,2, status,0
  4655 ;; Tracked objects:
  4656 ;;		On entry : 0/0
  4657 ;;		On exit  : 0/0
  4658 ;;		Unchanged: 0/0
  4659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4660 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4661 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4663 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4664 ;;Total ram usage:        6 bytes
  4665 ;; Hardware stack levels used:    1
  4666 ;; Hardware stack levels required when called:    6
  4667 ;; This function calls:
  4668 ;;		Nothing
  4669 ;; This function is called by:
  4670 ;;		_fround
  4671 ;;		_scale
  4672 ;; This function uses a non-reentrant model
  4673 ;;
  4674                           
  4675                           	psect	text10
  4676  0042E4                     __ptext10:
  4677                           	opt stack 0
  4678  0042E4                     ___awmod:
  4679                           	opt stack 21
  4680                           
  4681                           ;incstack = 0
  4682  0042E4  0E00               	movlw	0
  4683  0042E6  0100               	movlb	0	; () banked
  4684  0042E8  6F85               	movwf	___awmod@sign& (0+255),b
  4685                           
  4686                           ; BSR set to: 0
  4687  0042EA  0100               	movlb	0	; () banked
  4688  0042EC  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  4689  0042EE  D008               	goto	l3322
  4690                           
  4691                           ; BSR set to: 0
  4692  0042F0  0100               	movlb	0	; () banked
  4693  0042F2  6D80               	negf	___awmod@dividend& (0+255),b
  4694  0042F4  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  4695  0042F6  B0D8               	btfsc	status,0,c
  4696  0042F8  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  4697                           
  4698                           ; BSR set to: 0
  4699  0042FA  0E01               	movlw	1
  4700  0042FC  0100               	movlb	0	; () banked
  4701  0042FE  6F85               	movwf	___awmod@sign& (0+255),b
  4702  004300                     l3322:
  4703                           
  4704                           ; BSR set to: 0
  4705  004300  0100               	movlb	0	; () banked
  4706  004302  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4707  004304  D005               	goto	l3326
  4708                           
  4709                           ; BSR set to: 0
  4710  004306  0100               	movlb	0	; () banked
  4711  004308  6D82               	negf	___awmod@divisor& (0+255),b
  4712  00430A  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  4713  00430C  B0D8               	btfsc	status,0,c
  4714  00430E  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  4715  004310                     l3326:
  4716                           
  4717                           ; BSR set to: 0
  4718  004310  0100               	movlb	0	; () banked
  4719  004312  5182               	movf	___awmod@divisor& (0+255),w,b
  4720  004314  0100               	movlb	0	; () banked
  4721  004316  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  4722  004318  B4D8               	btfsc	status,2,c
  4723  00431A  D026               	goto	l3342
  4724                           
  4725                           ; BSR set to: 0
  4726  00431C  0E01               	movlw	1
  4727  00431E  0100               	movlb	0	; () banked
  4728  004320  6F84               	movwf	___awmod@counter& (0+255),b
  4729  004322  D006               	goto	l3332
  4730  004324                     l3330:
  4731                           
  4732                           ; BSR set to: 0
  4733  004324  0100               	movlb	0	; () banked
  4734  004326  90D8               	bcf	status,0,c
  4735  004328  3782               	rlcf	___awmod@divisor& (0+255),f,b
  4736  00432A  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  4737  00432C  0100               	movlb	0	; () banked
  4738  00432E  2B84               	incf	___awmod@counter& (0+255),f,b
  4739  004330                     l3332:
  4740                           
  4741                           ; BSR set to: 0
  4742  004330  0100               	movlb	0	; () banked
  4743  004332  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4744  004334  D7F7               	goto	l3330
  4745  004336                     l3334:
  4746                           
  4747                           ; BSR set to: 0
  4748  004336  0100               	movlb	0	; () banked
  4749  004338  5182               	movf	___awmod@divisor& (0+255),w,b
  4750  00433A  0100               	movlb	0	; () banked
  4751  00433C  5D80               	subwf	___awmod@dividend& (0+255),w,b
  4752  00433E  0100               	movlb	0	; () banked
  4753  004340  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  4754  004342  0100               	movlb	0	; () banked
  4755  004344  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  4756  004346  A0D8               	btfss	status,0,c
  4757  004348  D008               	goto	l3338
  4758                           
  4759                           ; BSR set to: 0
  4760  00434A  0100               	movlb	0	; () banked
  4761  00434C  5182               	movf	___awmod@divisor& (0+255),w,b
  4762  00434E  0100               	movlb	0	; () banked
  4763  004350  5F80               	subwf	___awmod@dividend& (0+255),f,b
  4764  004352  0100               	movlb	0	; () banked
  4765  004354  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  4766  004356  0100               	movlb	0	; () banked
  4767  004358  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  4768  00435A                     l3338:
  4769                           
  4770                           ; BSR set to: 0
  4771  00435A  0100               	movlb	0	; () banked
  4772  00435C  90D8               	bcf	status,0,c
  4773  00435E  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  4774  004360  3382               	rrcf	___awmod@divisor& (0+255),f,b
  4775                           
  4776                           ; BSR set to: 0
  4777  004362  0100               	movlb	0	; () banked
  4778  004364  2F84               	decfsz	___awmod@counter& (0+255),f,b
  4779  004366  D7E7               	goto	l3334
  4780  004368                     l3342:
  4781                           
  4782                           ; BSR set to: 0
  4783  004368  0100               	movlb	0	; () banked
  4784  00436A  5185               	movf	___awmod@sign& (0+255),w,b
  4785  00436C  0100               	movlb	0	; () banked
  4786  00436E  B4D8               	btfsc	status,2,c
  4787  004370  D005               	goto	l3346
  4788                           
  4789                           ; BSR set to: 0
  4790  004372  0100               	movlb	0	; () banked
  4791  004374  6D80               	negf	___awmod@dividend& (0+255),b
  4792  004376  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  4793  004378  B0D8               	btfsc	status,0,c
  4794  00437A  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  4795  00437C                     l3346:
  4796                           
  4797                           ; BSR set to: 0
  4798  00437C  C080  F080         	movff	___awmod@dividend,?___awmod
  4799  004380  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  4800  004384  0012               	return	
  4801  004386                     __end_of___awmod:
  4802                           	opt stack 0
  4803                           tblptru	equ	0xFF8
  4804                           tblptrh	equ	0xFF7
  4805                           tblptrl	equ	0xFF6
  4806                           tablat	equ	0xFF5
  4807                           prodh	equ	0xFF4
  4808                           prodl	equ	0xFF3
  4809                           intcon	equ	0xFF2
  4810                           wreg	equ	0xFE8
  4811                           indf2	equ	0xFDF
  4812                           postinc2	equ	0xFDE
  4813                           postdec2	equ	0xFDD
  4814                           fsr2h	equ	0xFDA
  4815                           fsr2l	equ	0xFD9
  4816                           status	equ	0xFD8
  4817                           
  4818 ;; *************** function ___awdiv *****************
  4819 ;; Defined at:
  4820 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  4821 ;; Parameters:    Size  Location     Type
  4822 ;;  dividend        2    6[BANK0 ] int 
  4823 ;;  divisor         2    8[BANK0 ] int 
  4824 ;; Auto vars:     Size  Location     Type
  4825 ;;  quotient        2   12[BANK0 ] int 
  4826 ;;  sign            1   11[BANK0 ] unsigned char 
  4827 ;;  counter         1   10[BANK0 ] unsigned char 
  4828 ;; Return value:  Size  Location     Type
  4829 ;;                  2    6[BANK0 ] int 
  4830 ;; Registers used:
  4831 ;;		wreg, status,2, status,0
  4832 ;; Tracked objects:
  4833 ;;		On entry : 0/0
  4834 ;;		On exit  : 0/0
  4835 ;;		Unchanged: 0/0
  4836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4837 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4838 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4840 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4841 ;;Total ram usage:        8 bytes
  4842 ;; Hardware stack levels used:    1
  4843 ;; Hardware stack levels required when called:    6
  4844 ;; This function calls:
  4845 ;;		Nothing
  4846 ;; This function is called by:
  4847 ;;		_fround
  4848 ;;		_scale
  4849 ;;		_printf
  4850 ;; This function uses a non-reentrant model
  4851 ;;
  4852                           
  4853                           	psect	text11
  4854  0040BC                     __ptext11:
  4855                           	opt stack 0
  4856  0040BC                     ___awdiv:
  4857                           	opt stack 21
  4858                           
  4859                           ; BSR set to: 0
  4860                           ;incstack = 0
  4861  0040BC  0E00               	movlw	0
  4862  0040BE  0100               	movlb	0	; () banked
  4863  0040C0  6F8B               	movwf	___awdiv@sign& (0+255),b
  4864                           
  4865                           ; BSR set to: 0
  4866  0040C2  0100               	movlb	0	; () banked
  4867  0040C4  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4868  0040C6  D008               	goto	l3278
  4869                           
  4870                           ; BSR set to: 0
  4871  0040C8  0100               	movlb	0	; () banked
  4872  0040CA  6D88               	negf	___awdiv@divisor& (0+255),b
  4873  0040CC  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  4874  0040CE  B0D8               	btfsc	status,0,c
  4875  0040D0  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  4876                           
  4877                           ; BSR set to: 0
  4878  0040D2  0E01               	movlw	1
  4879  0040D4  0100               	movlb	0	; () banked
  4880  0040D6  6F8B               	movwf	___awdiv@sign& (0+255),b
  4881  0040D8                     l3278:
  4882                           
  4883                           ; BSR set to: 0
  4884  0040D8  0100               	movlb	0	; () banked
  4885  0040DA  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  4886  0040DC  D008               	goto	l3284
  4887                           
  4888                           ; BSR set to: 0
  4889  0040DE  0100               	movlb	0	; () banked
  4890  0040E0  6D86               	negf	___awdiv@dividend& (0+255),b
  4891  0040E2  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  4892  0040E4  B0D8               	btfsc	status,0,c
  4893  0040E6  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  4894                           
  4895                           ; BSR set to: 0
  4896  0040E8  0E01               	movlw	1
  4897  0040EA  0100               	movlb	0	; () banked
  4898  0040EC  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  4899  0040EE                     l3284:
  4900                           
  4901                           ; BSR set to: 0
  4902  0040EE  0E00               	movlw	0
  4903  0040F0  0100               	movlb	0	; () banked
  4904  0040F2  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  4905  0040F4  0E00               	movlw	0
  4906  0040F6  6F8C               	movwf	___awdiv@quotient& (0+255),b
  4907                           
  4908                           ; BSR set to: 0
  4909  0040F8  0100               	movlb	0	; () banked
  4910  0040FA  5188               	movf	___awdiv@divisor& (0+255),w,b
  4911  0040FC  0100               	movlb	0	; () banked
  4912  0040FE  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4913  004100  B4D8               	btfsc	status,2,c
  4914  004102  D02C               	goto	l3306
  4915                           
  4916                           ; BSR set to: 0
  4917  004104  0E01               	movlw	1
  4918  004106  0100               	movlb	0	; () banked
  4919  004108  6F8A               	movwf	___awdiv@counter& (0+255),b
  4920  00410A  D006               	goto	l3292
  4921  00410C                     l3290:
  4922                           
  4923                           ; BSR set to: 0
  4924  00410C  0100               	movlb	0	; () banked
  4925  00410E  90D8               	bcf	status,0,c
  4926  004110  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  4927  004112  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4928  004114  0100               	movlb	0	; () banked
  4929  004116  2B8A               	incf	___awdiv@counter& (0+255),f,b
  4930  004118                     l3292:
  4931                           
  4932                           ; BSR set to: 0
  4933  004118  0100               	movlb	0	; () banked
  4934  00411A  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4935  00411C  D7F7               	goto	l3290
  4936  00411E                     l3294:
  4937                           
  4938                           ; BSR set to: 0
  4939  00411E  0100               	movlb	0	; () banked
  4940  004120  90D8               	bcf	status,0,c
  4941  004122  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  4942  004124  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4943                           
  4944                           ; BSR set to: 0
  4945  004126  0100               	movlb	0	; () banked
  4946  004128  5188               	movf	___awdiv@divisor& (0+255),w,b
  4947  00412A  0100               	movlb	0	; () banked
  4948  00412C  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  4949  00412E  0100               	movlb	0	; () banked
  4950  004130  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4951  004132  0100               	movlb	0	; () banked
  4952  004134  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4953  004136  A0D8               	btfss	status,0,c
  4954  004138  D00A               	goto	l3302
  4955                           
  4956                           ; BSR set to: 0
  4957  00413A  0100               	movlb	0	; () banked
  4958  00413C  5188               	movf	___awdiv@divisor& (0+255),w,b
  4959  00413E  0100               	movlb	0	; () banked
  4960  004140  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  4961  004142  0100               	movlb	0	; () banked
  4962  004144  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4963  004146  0100               	movlb	0	; () banked
  4964  004148  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4965                           
  4966                           ; BSR set to: 0
  4967  00414A  0100               	movlb	0	; () banked
  4968  00414C  818C               	bsf	___awdiv@quotient& (0+255),0,b
  4969  00414E                     l3302:
  4970                           
  4971                           ; BSR set to: 0
  4972  00414E  0100               	movlb	0	; () banked
  4973  004150  90D8               	bcf	status,0,c
  4974  004152  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4975  004154  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  4976                           
  4977                           ; BSR set to: 0
  4978  004156  0100               	movlb	0	; () banked
  4979  004158  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  4980  00415A  D7E1               	goto	l3294
  4981  00415C                     l3306:
  4982                           
  4983                           ; BSR set to: 0
  4984  00415C  0100               	movlb	0	; () banked
  4985  00415E  518B               	movf	___awdiv@sign& (0+255),w,b
  4986  004160  0100               	movlb	0	; () banked
  4987  004162  B4D8               	btfsc	status,2,c
  4988  004164  D005               	goto	l3310
  4989                           
  4990                           ; BSR set to: 0
  4991  004166  0100               	movlb	0	; () banked
  4992  004168  6D8C               	negf	___awdiv@quotient& (0+255),b
  4993  00416A  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4994  00416C  B0D8               	btfsc	status,0,c
  4995  00416E  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4996  004170                     l3310:
  4997                           
  4998                           ; BSR set to: 0
  4999  004170  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  5000  004174  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  5001  004178  0012               	return	
  5002  00417A                     __end_of___awdiv:
  5003                           	opt stack 0
  5004                           tblptru	equ	0xFF8
  5005                           tblptrh	equ	0xFF7
  5006                           tblptrl	equ	0xFF6
  5007                           tablat	equ	0xFF5
  5008                           prodh	equ	0xFF4
  5009                           prodl	equ	0xFF3
  5010                           intcon	equ	0xFF2
  5011                           wreg	equ	0xFE8
  5012                           indf2	equ	0xFDF
  5013                           postinc2	equ	0xFDE
  5014                           postdec2	equ	0xFDD
  5015                           fsr2h	equ	0xFDA
  5016                           fsr2l	equ	0xFD9
  5017                           status	equ	0xFD8
  5018                           
  5019 ;; *************** function __tdiv_to_l_ *****************
  5020 ;; Defined at:
  5021 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  5022 ;; Parameters:    Size  Location     Type
  5023 ;;  f1              3    0[BANK0 ] float 
  5024 ;;  f2              3    3[BANK0 ] float 
  5025 ;; Auto vars:     Size  Location     Type
  5026 ;;  quot            4    9[BANK0 ] unsigned long 
  5027 ;;  exp1            1   14[BANK0 ] unsigned char 
  5028 ;;  cntr            1   13[BANK0 ] unsigned char 
  5029 ;; Return value:  Size  Location     Type
  5030 ;;                  4    0[BANK0 ] unsigned long 
  5031 ;; Registers used:
  5032 ;;		wreg, status,2, status,0
  5033 ;; Tracked objects:
  5034 ;;		On entry : 0/0
  5035 ;;		On exit  : 0/0
  5036 ;;		Unchanged: 0/0
  5037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5038 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5039 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5040 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5041 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5042 ;;Total ram usage:       15 bytes
  5043 ;; Hardware stack levels used:    1
  5044 ;; Hardware stack levels required when called:    6
  5045 ;; This function calls:
  5046 ;;		Nothing
  5047 ;; This function is called by:
  5048 ;;		_printf
  5049 ;; This function uses a non-reentrant model
  5050 ;;
  5051                           
  5052                           	psect	text12
  5053  003392                     __ptext12:
  5054                           	opt stack 0
  5055  003392                     __tdiv_to_l_:
  5056                           	opt stack 22
  5057                           
  5058                           ; BSR set to: 0
  5059                           ;incstack = 0
  5060  003392  C082  F086         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5061  003396  0100               	movlb	0	; () banked
  5062  003398  6B87               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  5063  00339A  6B88               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  5064  00339C  0100               	movlb	0	; () banked
  5065  00339E  3581               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  5066  0033A0  0100               	movlb	0	; () banked
  5067  0033A2  3786               	rlcf	??__tdiv_to_l_& (0+255),f,b
  5068  0033A4  E301               	bnc	u3541
  5069  0033A6  8187               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  5070  0033A8                     u3541:
  5071  0033A8  0100               	movlb	0	; () banked
  5072  0033AA  5186               	movf	??__tdiv_to_l_& (0+255),w,b
  5073  0033AC  0100               	movlb	0	; () banked
  5074  0033AE  6F8E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  5075  0033B0  0100               	movlb	0	; () banked
  5076  0033B2  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  5077  0033B4  A4D8               	btfss	status,2,c
  5078  0033B6  D00A               	goto	l3472
  5079                           
  5080                           ; BSR set to: 0
  5081  0033B8  0E00               	movlw	0
  5082  0033BA  0100               	movlb	0	; () banked
  5083  0033BC  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  5084  0033BE  0E00               	movlw	0
  5085  0033C0  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5086  0033C2  0E00               	movlw	0
  5087  0033C4  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5088  0033C6  0E00               	movlw	0
  5089  0033C8  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5090                           
  5091                           ; BSR set to: 0
  5092  0033CA  0012               	return	
  5093  0033CC                     l3472:
  5094                           
  5095                           ; BSR set to: 0
  5096  0033CC  C085  F086         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5097  0033D0  0100               	movlb	0	; () banked
  5098  0033D2  6B87               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  5099  0033D4  6B88               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  5100  0033D6  0100               	movlb	0	; () banked
  5101  0033D8  3584               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  5102  0033DA  0100               	movlb	0	; () banked
  5103  0033DC  3786               	rlcf	??__tdiv_to_l_& (0+255),f,b
  5104  0033DE  E301               	bnc	u3561
  5105  0033E0  8187               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  5106  0033E2                     u3561:
  5107  0033E2  0100               	movlb	0	; () banked
  5108  0033E4  5186               	movf	??__tdiv_to_l_& (0+255),w,b
  5109  0033E6  0100               	movlb	0	; () banked
  5110  0033E8  6F8D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  5111  0033EA  0100               	movlb	0	; () banked
  5112  0033EC  518D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  5113  0033EE  A4D8               	btfss	status,2,c
  5114  0033F0  D00A               	goto	l3478
  5115                           
  5116                           ; BSR set to: 0
  5117  0033F2  0E00               	movlw	0
  5118  0033F4  0100               	movlb	0	; () banked
  5119  0033F6  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  5120  0033F8  0E00               	movlw	0
  5121  0033FA  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5122  0033FC  0E00               	movlw	0
  5123  0033FE  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5124  003400  0E00               	movlw	0
  5125  003402  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5126                           
  5127                           ; BSR set to: 0
  5128  003404  0012               	return	
  5129  003406                     l3478:
  5130                           
  5131                           ; BSR set to: 0
  5132  003406  0100               	movlb	0	; () banked
  5133  003408  8F81               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  5134                           
  5135                           ; BSR set to: 0
  5136  00340A  0EFF               	movlw	255
  5137  00340C  0100               	movlb	0	; () banked
  5138  00340E  1780               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  5139  003410  0EFF               	movlw	255
  5140  003412  0100               	movlb	0	; () banked
  5141  003414  1781               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  5142  003416  0E00               	movlw	0
  5143  003418  0100               	movlb	0	; () banked
  5144  00341A  1782               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  5145  00341C  0100               	movlb	0	; () banked
  5146  00341E  8F84               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  5147                           
  5148                           ; BSR set to: 0
  5149  003420  0EFF               	movlw	255
  5150  003422  0100               	movlb	0	; () banked
  5151  003424  1783               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  5152  003426  0EFF               	movlw	255
  5153  003428  0100               	movlb	0	; () banked
  5154  00342A  1784               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  5155  00342C  0E00               	movlw	0
  5156  00342E  0100               	movlb	0	; () banked
  5157  003430  1785               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  5158                           
  5159                           ; BSR set to: 0
  5160  003432  0E00               	movlw	0
  5161  003434  0100               	movlb	0	; () banked
  5162  003436  6F89               	movwf	__tdiv_to_l_@quot& (0+255),b
  5163  003438  0E00               	movlw	0
  5164  00343A  6F8A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  5165  00343C  0E00               	movlw	0
  5166  00343E  6F8B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  5167  003440  0E00               	movlw	0
  5168  003442  6F8C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  5169                           
  5170                           ; BSR set to: 0
  5171  003444  0E7F               	movlw	127
  5172  003446  0100               	movlb	0	; () banked
  5173  003448  5F8E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  5174                           
  5175                           ; BSR set to: 0
  5176  00344A  0100               	movlb	0	; () banked
  5177  00344C  518D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  5178  00344E  0F98               	addlw	152
  5179  003450  0100               	movlb	0	; () banked
  5180  003452  5F8E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  5181                           
  5182                           ; BSR set to: 0
  5183  003454  0E18               	movlw	24
  5184  003456  0100               	movlb	0	; () banked
  5185  003458  6F8D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  5186  00345A                     l737:
  5187                           
  5188                           ; BSR set to: 0
  5189  00345A  0100               	movlb	0	; () banked
  5190  00345C  90D8               	bcf	status,0,c
  5191  00345E  3789               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  5192  003460  378A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  5193  003462  378B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  5194  003464  378C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  5195                           
  5196                           ; BSR set to: 0
  5197  003466  0100               	movlb	0	; () banked
  5198  003468  5183               	movf	__tdiv_to_l_@f2& (0+255),w,b
  5199  00346A  0100               	movlb	0	; () banked
  5200  00346C  5D80               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  5201  00346E  0100               	movlb	0	; () banked
  5202  003470  5184               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  5203  003472  0100               	movlb	0	; () banked
  5204  003474  5981               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  5205  003476  0100               	movlb	0	; () banked
  5206  003478  5185               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  5207  00347A  0100               	movlb	0	; () banked
  5208  00347C  5982               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  5209  00347E  A0D8               	btfss	status,0,c
  5210  003480  D00E               	goto	l738
  5211                           
  5212                           ; BSR set to: 0
  5213  003482  0100               	movlb	0	; () banked
  5214  003484  5183               	movf	__tdiv_to_l_@f2& (0+255),w,b
  5215  003486  0100               	movlb	0	; () banked
  5216  003488  5F80               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  5217  00348A  0100               	movlb	0	; () banked
  5218  00348C  5184               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  5219  00348E  0100               	movlb	0	; () banked
  5220  003490  5B81               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  5221  003492  0100               	movlb	0	; () banked
  5222  003494  5185               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  5223  003496  0100               	movlb	0	; () banked
  5224  003498  5B82               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  5225                           
  5226                           ; BSR set to: 0
  5227  00349A  0100               	movlb	0	; () banked
  5228  00349C  8189               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  5229  00349E                     l738:
  5230                           
  5231                           ; BSR set to: 0
  5232  00349E  0100               	movlb	0	; () banked
  5233  0034A0  90D8               	bcf	status,0,c
  5234  0034A2  3780               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  5235  0034A4  3781               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  5236  0034A6  3782               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  5237                           
  5238                           ; BSR set to: 0
  5239  0034A8  0100               	movlb	0	; () banked
  5240  0034AA  2F8D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  5241  0034AC  D7D6               	goto	l737
  5242                           
  5243                           ; BSR set to: 0
  5244                           
  5245                           ; BSR set to: 0
  5246  0034AE  0100               	movlb	0	; () banked
  5247  0034B0  AF8E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  5248  0034B2  D01A               	goto	l3512
  5249                           
  5250                           ; BSR set to: 0
  5251  0034B4  0100               	movlb	0	; () banked
  5252  0034B6  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  5253  0034B8  0A80               	xorlw	128
  5254  0034BA  0F97               	addlw	151
  5255  0034BC  B0D8               	btfsc	status,0,c
  5256  0034BE  D00A               	goto	l3508
  5257                           
  5258                           ; BSR set to: 0
  5259  0034C0  0E00               	movlw	0
  5260  0034C2  0100               	movlb	0	; () banked
  5261  0034C4  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  5262  0034C6  0E00               	movlw	0
  5263  0034C8  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5264  0034CA  0E00               	movlw	0
  5265  0034CC  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5266  0034CE  0E00               	movlw	0
  5267  0034D0  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5268                           
  5269                           ; BSR set to: 0
  5270  0034D2  0012               	return	
  5271  0034D4                     l3508:
  5272                           
  5273                           ; BSR set to: 0
  5274  0034D4  0100               	movlb	0	; () banked
  5275  0034D6  90D8               	bcf	status,0,c
  5276  0034D8  338C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  5277  0034DA  338B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  5278  0034DC  338A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  5279  0034DE  3389               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  5280                           
  5281                           ; BSR set to: 0
  5282  0034E0  0100               	movlb	0	; () banked
  5283  0034E2  3F8E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  5284  0034E4  D7F7               	goto	l3508
  5285                           
  5286                           ; BSR set to: 0
  5287  0034E6  D01B               	goto	l744
  5288  0034E8                     l3512:
  5289                           
  5290                           ; BSR set to: 0
  5291  0034E8  0E17               	movlw	23
  5292  0034EA  0100               	movlb	0	; () banked
  5293  0034EC  658E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  5294  0034EE  D012               	goto	l3520
  5295                           
  5296                           ; BSR set to: 0
  5297  0034F0  0E00               	movlw	0
  5298  0034F2  0100               	movlb	0	; () banked
  5299  0034F4  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  5300  0034F6  0E00               	movlw	0
  5301  0034F8  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5302  0034FA  0E00               	movlw	0
  5303  0034FC  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5304  0034FE  0E00               	movlw	0
  5305  003500  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5306                           
  5307                           ; BSR set to: 0
  5308  003502  0012               	return	
  5309  003504                     l3518:
  5310                           
  5311                           ; BSR set to: 0
  5312  003504  0100               	movlb	0	; () banked
  5313  003506  90D8               	bcf	status,0,c
  5314  003508  3789               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  5315  00350A  378A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  5316  00350C  378B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  5317  00350E  378C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  5318  003510  0100               	movlb	0	; () banked
  5319  003512  078E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  5320  003514                     l3520:
  5321                           
  5322                           ; BSR set to: 0
  5323  003514  0100               	movlb	0	; () banked
  5324  003516  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  5325  003518  0100               	movlb	0	; () banked
  5326  00351A  A4D8               	btfss	status,2,c
  5327  00351C  D7F3               	goto	l3518
  5328  00351E                     l744:
  5329                           
  5330                           ; BSR set to: 0
  5331  00351E  C089  F080         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5332  003522  C08A  F081         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5333  003526  C08B  F082         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5334  00352A  C08C  F083         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5335                           
  5336                           ; BSR set to: 0
  5337  00352E  0012               	return		;funcret
  5338  003530                     __end_of__tdiv_to_l_:
  5339                           	opt stack 0
  5340                           tblptru	equ	0xFF8
  5341                           tblptrh	equ	0xFF7
  5342                           tblptrl	equ	0xFF6
  5343                           tablat	equ	0xFF5
  5344                           prodh	equ	0xFF4
  5345                           prodl	equ	0xFF3
  5346                           intcon	equ	0xFF2
  5347                           wreg	equ	0xFE8
  5348                           indf2	equ	0xFDF
  5349                           postinc2	equ	0xFDE
  5350                           postdec2	equ	0xFDD
  5351                           fsr2h	equ	0xFDA
  5352                           fsr2l	equ	0xFD9
  5353                           status	equ	0xFD8
  5354                           
  5355 ;; *************** function __div_to_l_ *****************
  5356 ;; Defined at:
  5357 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  5358 ;; Parameters:    Size  Location     Type
  5359 ;;  f1              3    0[BANK0 ] unsigned long 
  5360 ;;  f2              3    3[BANK0 ] unsigned long 
  5361 ;; Auto vars:     Size  Location     Type
  5362 ;;  quot            4    6[BANK0 ] unsigned long 
  5363 ;;  exp1            1   11[BANK0 ] unsigned char 
  5364 ;;  cntr            1   10[BANK0 ] unsigned char 
  5365 ;; Return value:  Size  Location     Type
  5366 ;;                  4    0[BANK0 ] unsigned long 
  5367 ;; Registers used:
  5368 ;;		wreg, status,2, status,0
  5369 ;; Tracked objects:
  5370 ;;		On entry : 0/0
  5371 ;;		On exit  : 0/0
  5372 ;;		Unchanged: 0/0
  5373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5374 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5375 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5377 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5378 ;;Total ram usage:       12 bytes
  5379 ;; Hardware stack levels used:    1
  5380 ;; Hardware stack levels required when called:    6
  5381 ;; This function calls:
  5382 ;;		Nothing
  5383 ;; This function is called by:
  5384 ;;		_printf
  5385 ;; This function uses a non-reentrant model
  5386 ;;
  5387                           
  5388                           	psect	text13
  5389  003530                     __ptext13:
  5390                           	opt stack 0
  5391  003530                     __div_to_l_:
  5392                           	opt stack 22
  5393                           
  5394                           ; BSR set to: 0
  5395                           ;incstack = 0
  5396  003530  0100               	movlb	0	; () banked
  5397  003532  3582               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  5398  003534  3583               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  5399  003536  0100               	movlb	0	; () banked
  5400  003538  6F8B               	movwf	__div_to_l_@exp1& (0+255),b
  5401  00353A  0100               	movlb	0	; () banked
  5402  00353C  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  5403  00353E  A4D8               	btfss	status,2,c
  5404  003540  D00A               	goto	l3528
  5405                           
  5406                           ; BSR set to: 0
  5407  003542  0E00               	movlw	0
  5408  003544  0100               	movlb	0	; () banked
  5409  003546  6F80               	movwf	?__div_to_l_& (0+255),b
  5410  003548  0E00               	movlw	0
  5411  00354A  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  5412  00354C  0E00               	movlw	0
  5413  00354E  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  5414  003550  0E00               	movlw	0
  5415  003552  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  5416                           
  5417                           ; BSR set to: 0
  5418  003554  0012               	return	
  5419  003556                     l3528:
  5420                           
  5421                           ; BSR set to: 0
  5422  003556  0100               	movlb	0	; () banked
  5423  003558  3585               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  5424  00355A  3586               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  5425  00355C  0100               	movlb	0	; () banked
  5426  00355E  6F8A               	movwf	__div_to_l_@cntr& (0+255),b
  5427  003560  0100               	movlb	0	; () banked
  5428  003562  518A               	movf	__div_to_l_@cntr& (0+255),w,b
  5429  003564  A4D8               	btfss	status,2,c
  5430  003566  D00A               	goto	l3534
  5431                           
  5432                           ; BSR set to: 0
  5433  003568  0E00               	movlw	0
  5434  00356A  0100               	movlb	0	; () banked
  5435  00356C  6F80               	movwf	?__div_to_l_& (0+255),b
  5436  00356E  0E00               	movlw	0
  5437  003570  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  5438  003572  0E00               	movlw	0
  5439  003574  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  5440  003576  0E00               	movlw	0
  5441  003578  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  5442                           
  5443                           ; BSR set to: 0
  5444  00357A  0012               	return	
  5445  00357C                     l3534:
  5446                           
  5447                           ; BSR set to: 0
  5448  00357C  0100               	movlb	0	; () banked
  5449  00357E  8F82               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  5450                           
  5451                           ; BSR set to: 0
  5452  003580  0EFF               	movlw	255
  5453  003582  0100               	movlb	0	; () banked
  5454  003584  1780               	andwf	__div_to_l_@f1& (0+255),f,b
  5455  003586  0EFF               	movlw	255
  5456  003588  1781               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  5457  00358A  0EFF               	movlw	255
  5458  00358C  1782               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  5459  00358E  0E00               	movlw	0
  5460  003590  1783               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  5461                           
  5462                           ; BSR set to: 0
  5463  003592  0100               	movlb	0	; () banked
  5464  003594  8F85               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  5465  003596  0EFF               	movlw	255
  5466  003598  0100               	movlb	0	; () banked
  5467  00359A  1783               	andwf	__div_to_l_@f2& (0+255),f,b
  5468  00359C  0EFF               	movlw	255
  5469  00359E  1784               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  5470  0035A0  0EFF               	movlw	255
  5471  0035A2  1785               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  5472  0035A4  0E00               	movlw	0
  5473  0035A6  1786               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  5474                           
  5475                           ; BSR set to: 0
  5476  0035A8  0E00               	movlw	0
  5477  0035AA  0100               	movlb	0	; () banked
  5478  0035AC  6F86               	movwf	__div_to_l_@quot& (0+255),b
  5479  0035AE  0E00               	movlw	0
  5480  0035B0  6F87               	movwf	(__div_to_l_@quot+1)& (0+255),b
  5481  0035B2  0E00               	movlw	0
  5482  0035B4  6F88               	movwf	(__div_to_l_@quot+2)& (0+255),b
  5483  0035B6  0E00               	movlw	0
  5484  0035B8  6F89               	movwf	(__div_to_l_@quot+3)& (0+255),b
  5485                           
  5486                           ; BSR set to: 0
  5487  0035BA  0E7F               	movlw	127
  5488  0035BC  0100               	movlb	0	; () banked
  5489  0035BE  5F8B               	subwf	__div_to_l_@exp1& (0+255),f,b
  5490                           
  5491                           ; BSR set to: 0
  5492  0035C0  0100               	movlb	0	; () banked
  5493  0035C2  518A               	movf	__div_to_l_@cntr& (0+255),w,b
  5494  0035C4  0FA0               	addlw	160
  5495  0035C6  0100               	movlb	0	; () banked
  5496  0035C8  5F8B               	subwf	__div_to_l_@exp1& (0+255),f,b
  5497                           
  5498                           ; BSR set to: 0
  5499  0035CA  0E20               	movlw	32
  5500  0035CC  0100               	movlb	0	; () banked
  5501  0035CE  6F8A               	movwf	__div_to_l_@cntr& (0+255),b
  5502  0035D0                     l3548:
  5503                           
  5504                           ; BSR set to: 0
  5505  0035D0  0100               	movlb	0	; () banked
  5506  0035D2  90D8               	bcf	status,0,c
  5507  0035D4  3786               	rlcf	__div_to_l_@quot& (0+255),f,b
  5508  0035D6  3787               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  5509  0035D8  3788               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  5510  0035DA  3789               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  5511                           
  5512                           ; BSR set to: 0
  5513  0035DC  0100               	movlb	0	; () banked
  5514  0035DE  5183               	movf	__div_to_l_@f2& (0+255),w,b
  5515  0035E0  0100               	movlb	0	; () banked
  5516  0035E2  5D80               	subwf	__div_to_l_@f1& (0+255),w,b
  5517  0035E4  0100               	movlb	0	; () banked
  5518  0035E6  5184               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  5519  0035E8  0100               	movlb	0	; () banked
  5520  0035EA  5981               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  5521  0035EC  0100               	movlb	0	; () banked
  5522  0035EE  5185               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  5523  0035F0  0100               	movlb	0	; () banked
  5524  0035F2  5982               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  5525  0035F4  0100               	movlb	0	; () banked
  5526  0035F6  5186               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  5527  0035F8  0100               	movlb	0	; () banked
  5528  0035FA  5983               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  5529  0035FC  A0D8               	btfss	status,0,c
  5530  0035FE  D012               	goto	l3556
  5531                           
  5532                           ; BSR set to: 0
  5533  003600  0100               	movlb	0	; () banked
  5534  003602  5183               	movf	__div_to_l_@f2& (0+255),w,b
  5535  003604  0100               	movlb	0	; () banked
  5536  003606  5F80               	subwf	__div_to_l_@f1& (0+255),f,b
  5537  003608  0100               	movlb	0	; () banked
  5538  00360A  5184               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  5539  00360C  0100               	movlb	0	; () banked
  5540  00360E  5B81               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  5541  003610  0100               	movlb	0	; () banked
  5542  003612  5185               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  5543  003614  0100               	movlb	0	; () banked
  5544  003616  5B82               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  5545  003618  0100               	movlb	0	; () banked
  5546  00361A  5186               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  5547  00361C  0100               	movlb	0	; () banked
  5548  00361E  5B83               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  5549                           
  5550                           ; BSR set to: 0
  5551  003620  0100               	movlb	0	; () banked
  5552  003622  8186               	bsf	__div_to_l_@quot& (0+255),0,b
  5553  003624                     l3556:
  5554                           
  5555                           ; BSR set to: 0
  5556  003624  0100               	movlb	0	; () banked
  5557  003626  90D8               	bcf	status,0,c
  5558  003628  3780               	rlcf	__div_to_l_@f1& (0+255),f,b
  5559  00362A  3781               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  5560  00362C  3782               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  5561  00362E  3783               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  5562                           
  5563                           ; BSR set to: 0
  5564  003630  0100               	movlb	0	; () banked
  5565  003632  2F8A               	decfsz	__div_to_l_@cntr& (0+255),f,b
  5566  003634  D7CD               	goto	l3548
  5567                           
  5568                           ; BSR set to: 0
  5569                           
  5570                           ; BSR set to: 0
  5571  003636  0100               	movlb	0	; () banked
  5572  003638  AF8B               	btfss	__div_to_l_@exp1& (0+255),7,b
  5573  00363A  D01A               	goto	l3572
  5574                           
  5575                           ; BSR set to: 0
  5576  00363C  0100               	movlb	0	; () banked
  5577  00363E  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  5578  003640  0A80               	xorlw	128
  5579  003642  0F9F               	addlw	159
  5580  003644  B0D8               	btfsc	status,0,c
  5581  003646  D00A               	goto	l3568
  5582                           
  5583                           ; BSR set to: 0
  5584  003648  0E00               	movlw	0
  5585  00364A  0100               	movlb	0	; () banked
  5586  00364C  6F80               	movwf	?__div_to_l_& (0+255),b
  5587  00364E  0E00               	movlw	0
  5588  003650  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  5589  003652  0E00               	movlw	0
  5590  003654  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  5591  003656  0E00               	movlw	0
  5592  003658  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  5593                           
  5594                           ; BSR set to: 0
  5595  00365A  0012               	return	
  5596  00365C                     l3568:
  5597                           
  5598                           ; BSR set to: 0
  5599  00365C  0100               	movlb	0	; () banked
  5600  00365E  90D8               	bcf	status,0,c
  5601  003660  3389               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  5602  003662  3388               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  5603  003664  3387               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  5604  003666  3386               	rrcf	__div_to_l_@quot& (0+255),f,b
  5605                           
  5606                           ; BSR set to: 0
  5607  003668  0100               	movlb	0	; () banked
  5608  00366A  3F8B               	incfsz	__div_to_l_@exp1& (0+255),f,b
  5609  00366C  D7F7               	goto	l3568
  5610                           
  5611                           ; BSR set to: 0
  5612  00366E  D01B               	goto	l640
  5613  003670                     l3572:
  5614                           
  5615                           ; BSR set to: 0
  5616  003670  0E1F               	movlw	31
  5617  003672  0100               	movlb	0	; () banked
  5618  003674  658B               	cpfsgt	__div_to_l_@exp1& (0+255),b
  5619  003676  D012               	goto	l3580
  5620                           
  5621                           ; BSR set to: 0
  5622  003678  0E00               	movlw	0
  5623  00367A  0100               	movlb	0	; () banked
  5624  00367C  6F80               	movwf	?__div_to_l_& (0+255),b
  5625  00367E  0E00               	movlw	0
  5626  003680  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  5627  003682  0E00               	movlw	0
  5628  003684  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  5629  003686  0E00               	movlw	0
  5630  003688  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  5631                           
  5632                           ; BSR set to: 0
  5633  00368A  0012               	return	
  5634  00368C                     l3578:
  5635                           
  5636                           ; BSR set to: 0
  5637  00368C  0100               	movlb	0	; () banked
  5638  00368E  90D8               	bcf	status,0,c
  5639  003690  3786               	rlcf	__div_to_l_@quot& (0+255),f,b
  5640  003692  3787               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  5641  003694  3788               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  5642  003696  3789               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  5643  003698  0100               	movlb	0	; () banked
  5644  00369A  078B               	decf	__div_to_l_@exp1& (0+255),f,b
  5645  00369C                     l3580:
  5646                           
  5647                           ; BSR set to: 0
  5648  00369C  0100               	movlb	0	; () banked
  5649  00369E  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  5650  0036A0  0100               	movlb	0	; () banked
  5651  0036A2  A4D8               	btfss	status,2,c
  5652  0036A4  D7F3               	goto	l3578
  5653  0036A6                     l640:
  5654                           
  5655                           ; BSR set to: 0
  5656  0036A6  C086  F080         	movff	__div_to_l_@quot,?__div_to_l_
  5657  0036AA  C087  F081         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5658  0036AE  C088  F082         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5659  0036B2  C089  F083         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5660                           
  5661                           ; BSR set to: 0
  5662  0036B6  0012               	return		;funcret
  5663  0036B8                     __end_of__div_to_l_:
  5664                           	opt stack 0
  5665                           tblptru	equ	0xFF8
  5666                           tblptrh	equ	0xFF7
  5667                           tblptrl	equ	0xFF6
  5668                           tablat	equ	0xFF5
  5669                           prodh	equ	0xFF4
  5670                           prodl	equ	0xFF3
  5671                           intcon	equ	0xFF2
  5672                           wreg	equ	0xFE8
  5673                           indf2	equ	0xFDF
  5674                           postinc2	equ	0xFDE
  5675                           postdec2	equ	0xFDD
  5676                           fsr2h	equ	0xFDA
  5677                           fsr2l	equ	0xFD9
  5678                           status	equ	0xFD8
  5679                           
  5680 ;; *************** function ___lltoft *****************
  5681 ;; Defined at:
  5682 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  5683 ;; Parameters:    Size  Location     Type
  5684 ;;  c               4    8[BANK0 ] unsigned long 
  5685 ;; Auto vars:     Size  Location     Type
  5686 ;;  exp             1   16[BANK0 ] unsigned char 
  5687 ;; Return value:  Size  Location     Type
  5688 ;;                  3    8[BANK0 ] float 
  5689 ;; Registers used:
  5690 ;;		wreg, status,2, status,0, cstack
  5691 ;; Tracked objects:
  5692 ;;		On entry : 0/0
  5693 ;;		On exit  : 0/0
  5694 ;;		Unchanged: 0/0
  5695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5696 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5697 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5698 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5699 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5700 ;;Total ram usage:        9 bytes
  5701 ;; Hardware stack levels used:    1
  5702 ;; Hardware stack levels required when called:    7
  5703 ;; This function calls:
  5704 ;;		___ftpack
  5705 ;; This function is called by:
  5706 ;;		_printf
  5707 ;; This function uses a non-reentrant model
  5708 ;;
  5709                           
  5710                           	psect	text14
  5711  0046DC                     __ptext14:
  5712                           	opt stack 0
  5713  0046DC                     ___lltoft:
  5714                           	opt stack 21
  5715                           
  5716                           ; BSR set to: 0
  5717                           ;incstack = 0
  5718  0046DC  0E8E               	movlw	142
  5719  0046DE  0100               	movlb	0	; () banked
  5720  0046E0  6F90               	movwf	___lltoft@exp& (0+255),b
  5721  0046E2  D008               	goto	l3700
  5722  0046E4                     l3698:
  5723                           
  5724                           ; BSR set to: 0
  5725  0046E4  0100               	movlb	0	; () banked
  5726  0046E6  90D8               	bcf	status,0,c
  5727  0046E8  338B               	rrcf	(___lltoft@c+3)& (0+255),f,b
  5728  0046EA  338A               	rrcf	(___lltoft@c+2)& (0+255),f,b
  5729  0046EC  3389               	rrcf	(___lltoft@c+1)& (0+255),f,b
  5730  0046EE  3388               	rrcf	___lltoft@c& (0+255),f,b
  5731  0046F0  0100               	movlb	0	; () banked
  5732  0046F2  2B90               	incf	___lltoft@exp& (0+255),f,b
  5733  0046F4                     l3700:
  5734                           
  5735                           ; BSR set to: 0
  5736  0046F4  0E00               	movlw	0
  5737  0046F6  0100               	movlb	0	; () banked
  5738  0046F8  1588               	andwf	___lltoft@c& (0+255),w,b
  5739  0046FA  0100               	movlb	0	; () banked
  5740  0046FC  6F8C               	movwf	??___lltoft& (0+255),b
  5741  0046FE  0E00               	movlw	0
  5742  004700  0100               	movlb	0	; () banked
  5743  004702  1589               	andwf	(___lltoft@c+1)& (0+255),w,b
  5744  004704  0100               	movlb	0	; () banked
  5745  004706  6F8D               	movwf	(??___lltoft+1)& (0+255),b
  5746  004708  0E00               	movlw	0
  5747  00470A  0100               	movlb	0	; () banked
  5748  00470C  158A               	andwf	(___lltoft@c+2)& (0+255),w,b
  5749  00470E  0100               	movlb	0	; () banked
  5750  004710  6F8E               	movwf	(??___lltoft+2)& (0+255),b
  5751  004712  0EFF               	movlw	255
  5752  004714  0100               	movlb	0	; () banked
  5753  004716  158B               	andwf	(___lltoft@c+3)& (0+255),w,b
  5754  004718  0100               	movlb	0	; () banked
  5755  00471A  6F8F               	movwf	(??___lltoft+3)& (0+255),b
  5756  00471C  0100               	movlb	0	; () banked
  5757  00471E  518C               	movf	??___lltoft& (0+255),w,b
  5758  004720  0100               	movlb	0	; () banked
  5759  004722  118D               	iorwf	(??___lltoft+1)& (0+255),w,b
  5760  004724  0100               	movlb	0	; () banked
  5761  004726  118E               	iorwf	(??___lltoft+2)& (0+255),w,b
  5762  004728  0100               	movlb	0	; () banked
  5763  00472A  118F               	iorwf	(??___lltoft+3)& (0+255),w,b
  5764  00472C  A4D8               	btfss	status,2,c
  5765  00472E  D7DA               	goto	l3698
  5766                           
  5767                           ; BSR set to: 0
  5768                           
  5769                           ; BSR set to: 0
  5770  004730  C088  F080         	movff	___lltoft@c,___ftpack@arg
  5771  004734  C089  F081         	movff	___lltoft@c+1,___ftpack@arg+1
  5772  004738  C08A  F082         	movff	___lltoft@c+2,___ftpack@arg+2
  5773  00473C  C090  F083         	movff	___lltoft@exp,___ftpack@exp
  5774  004740  0E00               	movlw	0
  5775  004742  0100               	movlb	0	; () banked
  5776  004744  6F84               	movwf	___ftpack@sign& (0+255),b
  5777  004746  EC80  F01E         	call	___ftpack	;wreg free
  5778  00474A  C080  F088         	movff	?___ftpack,?___lltoft
  5779  00474E  C081  F089         	movff	?___ftpack+1,?___lltoft+1
  5780  004752  C082  F08A         	movff	?___ftpack+2,?___lltoft+2
  5781  004756  0012               	return	
  5782  004758                     __end_of___lltoft:
  5783                           	opt stack 0
  5784                           tblptru	equ	0xFF8
  5785                           tblptrh	equ	0xFF7
  5786                           tblptrl	equ	0xFF6
  5787                           tablat	equ	0xFF5
  5788                           prodh	equ	0xFF4
  5789                           prodl	equ	0xFF3
  5790                           intcon	equ	0xFF2
  5791                           wreg	equ	0xFE8
  5792                           indf2	equ	0xFDF
  5793                           postinc2	equ	0xFDE
  5794                           postdec2	equ	0xFDD
  5795                           fsr2h	equ	0xFDA
  5796                           fsr2l	equ	0xFD9
  5797                           status	equ	0xFD8
  5798                           
  5799 ;; *************** function ___llmod *****************
  5800 ;; Defined at:
  5801 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  5802 ;; Parameters:    Size  Location     Type
  5803 ;;  dividend        4    0[BANK0 ] unsigned long 
  5804 ;;  divisor         4    4[BANK0 ] unsigned long 
  5805 ;; Auto vars:     Size  Location     Type
  5806 ;;  counter         1    8[BANK0 ] unsigned char 
  5807 ;; Return value:  Size  Location     Type
  5808 ;;                  4    0[BANK0 ] unsigned long 
  5809 ;; Registers used:
  5810 ;;		wreg, status,2, status,0
  5811 ;; Tracked objects:
  5812 ;;		On entry : 0/0
  5813 ;;		On exit  : 0/0
  5814 ;;		Unchanged: 0/0
  5815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5816 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5817 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5819 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5820 ;;Total ram usage:        9 bytes
  5821 ;; Hardware stack levels used:    1
  5822 ;; Hardware stack levels required when called:    6
  5823 ;; This function calls:
  5824 ;;		Nothing
  5825 ;; This function is called by:
  5826 ;;		_printf
  5827 ;; This function uses a non-reentrant model
  5828 ;;
  5829                           
  5830                           	psect	text15
  5831  004424                     __ptext15:
  5832                           	opt stack 0
  5833  004424                     ___llmod:
  5834                           	opt stack 22
  5835                           
  5836                           ;incstack = 0
  5837  004424  0100               	movlb	0	; () banked
  5838  004426  5184               	movf	___llmod@divisor& (0+255),w,b
  5839  004428  0100               	movlb	0	; () banked
  5840  00442A  1185               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  5841  00442C  0100               	movlb	0	; () banked
  5842  00442E  1186               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  5843  004430  0100               	movlb	0	; () banked
  5844  004432  1187               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  5845  004434  B4D8               	btfsc	status,2,c
  5846  004436  D03A               	goto	l824
  5847                           
  5848                           ; BSR set to: 0
  5849  004438  0E01               	movlw	1
  5850  00443A  0100               	movlb	0	; () banked
  5851  00443C  6F88               	movwf	___llmod@counter& (0+255),b
  5852  00443E  D008               	goto	l3686
  5853  004440                     l3684:
  5854                           
  5855                           ; BSR set to: 0
  5856  004440  0100               	movlb	0	; () banked
  5857  004442  90D8               	bcf	status,0,c
  5858  004444  3784               	rlcf	___llmod@divisor& (0+255),f,b
  5859  004446  3785               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  5860  004448  3786               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  5861  00444A  3787               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  5862  00444C  0100               	movlb	0	; () banked
  5863  00444E  2B88               	incf	___llmod@counter& (0+255),f,b
  5864  004450                     l3686:
  5865                           
  5866                           ; BSR set to: 0
  5867  004450  0100               	movlb	0	; () banked
  5868  004452  AF87               	btfss	(___llmod@divisor+3)& (0+255),7,b
  5869  004454  D7F5               	goto	l3684
  5870  004456                     l3688:
  5871                           
  5872                           ; BSR set to: 0
  5873  004456  0100               	movlb	0	; () banked
  5874  004458  5184               	movf	___llmod@divisor& (0+255),w,b
  5875  00445A  0100               	movlb	0	; () banked
  5876  00445C  5D80               	subwf	___llmod@dividend& (0+255),w,b
  5877  00445E  0100               	movlb	0	; () banked
  5878  004460  5185               	movf	(___llmod@divisor+1)& (0+255),w,b
  5879  004462  0100               	movlb	0	; () banked
  5880  004464  5981               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  5881  004466  0100               	movlb	0	; () banked
  5882  004468  5186               	movf	(___llmod@divisor+2)& (0+255),w,b
  5883  00446A  0100               	movlb	0	; () banked
  5884  00446C  5982               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  5885  00446E  0100               	movlb	0	; () banked
  5886  004470  5187               	movf	(___llmod@divisor+3)& (0+255),w,b
  5887  004472  0100               	movlb	0	; () banked
  5888  004474  5983               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  5889  004476  A0D8               	btfss	status,0,c
  5890  004478  D010               	goto	l3692
  5891                           
  5892                           ; BSR set to: 0
  5893  00447A  0100               	movlb	0	; () banked
  5894  00447C  5184               	movf	___llmod@divisor& (0+255),w,b
  5895  00447E  0100               	movlb	0	; () banked
  5896  004480  5F80               	subwf	___llmod@dividend& (0+255),f,b
  5897  004482  0100               	movlb	0	; () banked
  5898  004484  5185               	movf	(___llmod@divisor+1)& (0+255),w,b
  5899  004486  0100               	movlb	0	; () banked
  5900  004488  5B81               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  5901  00448A  0100               	movlb	0	; () banked
  5902  00448C  5186               	movf	(___llmod@divisor+2)& (0+255),w,b
  5903  00448E  0100               	movlb	0	; () banked
  5904  004490  5B82               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  5905  004492  0100               	movlb	0	; () banked
  5906  004494  5187               	movf	(___llmod@divisor+3)& (0+255),w,b
  5907  004496  0100               	movlb	0	; () banked
  5908  004498  5B83               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  5909  00449A                     l3692:
  5910                           
  5911                           ; BSR set to: 0
  5912  00449A  0100               	movlb	0	; () banked
  5913  00449C  90D8               	bcf	status,0,c
  5914  00449E  3387               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  5915  0044A0  3386               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  5916  0044A2  3385               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  5917  0044A4  3384               	rrcf	___llmod@divisor& (0+255),f,b
  5918                           
  5919                           ; BSR set to: 0
  5920  0044A6  0100               	movlb	0	; () banked
  5921  0044A8  2F88               	decfsz	___llmod@counter& (0+255),f,b
  5922  0044AA  D7D5               	goto	l3688
  5923  0044AC                     l824:
  5924                           
  5925                           ; BSR set to: 0
  5926  0044AC  C080  F080         	movff	___llmod@dividend,?___llmod
  5927  0044B0  C081  F081         	movff	___llmod@dividend+1,?___llmod+1
  5928  0044B4  C082  F082         	movff	___llmod@dividend+2,?___llmod+2
  5929  0044B8  C083  F083         	movff	___llmod@dividend+3,?___llmod+3
  5930                           
  5931                           ; BSR set to: 0
  5932  0044BC  0012               	return		;funcret
  5933  0044BE                     __end_of___llmod:
  5934                           	opt stack 0
  5935                           tblptru	equ	0xFF8
  5936                           tblptrh	equ	0xFF7
  5937                           tblptrl	equ	0xFF6
  5938                           tablat	equ	0xFF5
  5939                           prodh	equ	0xFF4
  5940                           prodl	equ	0xFF3
  5941                           intcon	equ	0xFF2
  5942                           wreg	equ	0xFE8
  5943                           indf2	equ	0xFDF
  5944                           postinc2	equ	0xFDE
  5945                           postdec2	equ	0xFDD
  5946                           fsr2h	equ	0xFDA
  5947                           fsr2l	equ	0xFD9
  5948                           status	equ	0xFD8
  5949                           
  5950 ;; *************** function ___fttol *****************
  5951 ;; Defined at:
  5952 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  5953 ;; Parameters:    Size  Location     Type
  5954 ;;  f1              3   42[BANK0 ] float 
  5955 ;; Auto vars:     Size  Location     Type
  5956 ;;  lval            4   52[BANK0 ] unsigned long 
  5957 ;;  exp1            1   56[BANK0 ] unsigned char 
  5958 ;;  sign1           1   51[BANK0 ] unsigned char 
  5959 ;; Return value:  Size  Location     Type
  5960 ;;                  4   42[BANK0 ] long 
  5961 ;; Registers used:
  5962 ;;		wreg, status,2, status,0
  5963 ;; Tracked objects:
  5964 ;;		On entry : 0/0
  5965 ;;		On exit  : 0/0
  5966 ;;		Unchanged: 0/0
  5967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5968 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5969 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5970 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5971 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5972 ;;Total ram usage:       15 bytes
  5973 ;; Hardware stack levels used:    1
  5974 ;; Hardware stack levels required when called:    6
  5975 ;; This function calls:
  5976 ;;		Nothing
  5977 ;; This function is called by:
  5978 ;;		_printf
  5979 ;; This function uses a non-reentrant model
  5980 ;;
  5981                           
  5982                           	psect	text16
  5983  003962                     __ptext16:
  5984                           	opt stack 0
  5985  003962                     ___fttol:
  5986                           	opt stack 22
  5987                           
  5988                           ; BSR set to: 0
  5989                           ;incstack = 0
  5990  003962  C0AC  F0AE         	movff	___fttol@f1+2,??___fttol
  5991  003966  0100               	movlb	0	; () banked
  5992  003968  6BAF               	clrf	(??___fttol+1)& (0+255),b
  5993  00396A  6BB0               	clrf	(??___fttol+2)& (0+255),b
  5994  00396C  0100               	movlb	0	; () banked
  5995  00396E  35AB               	rlcf	(___fttol@f1+1)& (0+255),w,b
  5996  003970  0100               	movlb	0	; () banked
  5997  003972  37AE               	rlcf	??___fttol& (0+255),f,b
  5998  003974  E301               	bnc	u3751
  5999  003976  81AF               	bsf	(??___fttol+1)& (0+255),0,b
  6000  003978                     u3751:
  6001  003978  0100               	movlb	0	; () banked
  6002  00397A  51AE               	movf	??___fttol& (0+255),w,b
  6003  00397C  0100               	movlb	0	; () banked
  6004  00397E  6FB8               	movwf	___fttol@exp1& (0+255),b
  6005  003980  0100               	movlb	0	; () banked
  6006  003982  51B8               	movf	___fttol@exp1& (0+255),w,b
  6007  003984  A4D8               	btfss	status,2,c
  6008  003986  D00A               	goto	l3618
  6009                           
  6010                           ; BSR set to: 0
  6011  003988  0E00               	movlw	0
  6012  00398A  0100               	movlb	0	; () banked
  6013  00398C  6FAA               	movwf	?___fttol& (0+255),b
  6014  00398E  0E00               	movlw	0
  6015  003990  6FAB               	movwf	(?___fttol+1)& (0+255),b
  6016  003992  0E00               	movlw	0
  6017  003994  6FAC               	movwf	(?___fttol+2)& (0+255),b
  6018  003996  0E00               	movlw	0
  6019  003998  6FAD               	movwf	(?___fttol+3)& (0+255),b
  6020                           
  6021                           ; BSR set to: 0
  6022  00399A  0012               	return	
  6023  00399C                     l3618:
  6024                           
  6025                           ; BSR set to: 0
  6026  00399C  0E17               	movlw	23
  6027  00399E  0100               	movlb	0	; () banked
  6028  0039A0  6FAE               	movwf	??___fttol& (0+255),b
  6029  0039A2  C0AA  F0AF         	movff	___fttol@f1,??___fttol+1
  6030  0039A6  C0AB  F0B0         	movff	___fttol@f1+1,??___fttol+2
  6031  0039AA  C0AC  F0B1         	movff	___fttol@f1+2,??___fttol+3
  6032  0039AE  0100               	movlb	0	; () banked
  6033  0039B0  29AE               	incf	??___fttol& (0+255),w,b
  6034  0039B2  0100               	movlb	0	; () banked
  6035  0039B4  6FB2               	movwf	(??___fttol+4)& (0+255),b
  6036  0039B6  D005               	goto	u3770
  6037  0039B8                     u3775:
  6038  0039B8  0100               	movlb	0	; () banked
  6039  0039BA  90D8               	bcf	status,0,c
  6040  0039BC  33B1               	rrcf	(??___fttol+3)& (0+255),f,b
  6041  0039BE  33B0               	rrcf	(??___fttol+2)& (0+255),f,b
  6042  0039C0  33AF               	rrcf	(??___fttol+1)& (0+255),f,b
  6043  0039C2                     u3770:
  6044  0039C2  0100               	movlb	0	; () banked
  6045  0039C4  2FB2               	decfsz	(??___fttol+4)& (0+255),f,b
  6046  0039C6  D7F8               	goto	u3775
  6047  0039C8  0100               	movlb	0	; () banked
  6048  0039CA  51AF               	movf	(??___fttol+1)& (0+255),w,b
  6049  0039CC  0100               	movlb	0	; () banked
  6050  0039CE  6FB3               	movwf	___fttol@sign1& (0+255),b
  6051                           
  6052                           ; BSR set to: 0
  6053  0039D0  0100               	movlb	0	; () banked
  6054  0039D2  8FAB               	bsf	(___fttol@f1+1)& (0+255),7,b
  6055                           
  6056                           ; BSR set to: 0
  6057  0039D4  0EFF               	movlw	255
  6058  0039D6  0100               	movlb	0	; () banked
  6059  0039D8  17AA               	andwf	___fttol@f1& (0+255),f,b
  6060  0039DA  0EFF               	movlw	255
  6061  0039DC  0100               	movlb	0	; () banked
  6062  0039DE  17AB               	andwf	(___fttol@f1+1)& (0+255),f,b
  6063  0039E0  0E00               	movlw	0
  6064  0039E2  0100               	movlb	0	; () banked
  6065  0039E4  17AC               	andwf	(___fttol@f1+2)& (0+255),f,b
  6066                           
  6067                           ; BSR set to: 0
  6068  0039E6  0100               	movlb	0	; () banked
  6069  0039E8  51AA               	movf	___fttol@f1& (0+255),w,b
  6070  0039EA  0100               	movlb	0	; () banked
  6071  0039EC  6FB4               	movwf	___fttol@lval& (0+255),b
  6072  0039EE  0100               	movlb	0	; () banked
  6073  0039F0  51AB               	movf	(___fttol@f1+1)& (0+255),w,b
  6074  0039F2  0100               	movlb	0	; () banked
  6075  0039F4  6FB5               	movwf	(___fttol@lval+1)& (0+255),b
  6076  0039F6  0100               	movlb	0	; () banked
  6077  0039F8  51AC               	movf	(___fttol@f1+2)& (0+255),w,b
  6078  0039FA  0100               	movlb	0	; () banked
  6079  0039FC  6FB6               	movwf	(___fttol@lval+2)& (0+255),b
  6080  0039FE  0100               	movlb	0	; () banked
  6081  003A00  6BB7               	clrf	(___fttol@lval+3)& (0+255),b
  6082                           
  6083                           ; BSR set to: 0
  6084  003A02  0E8E               	movlw	142
  6085  003A04  0100               	movlb	0	; () banked
  6086  003A06  5FB8               	subwf	___fttol@exp1& (0+255),f,b
  6087                           
  6088                           ; BSR set to: 0
  6089  003A08  0100               	movlb	0	; () banked
  6090  003A0A  AFB8               	btfss	___fttol@exp1& (0+255),7,b
  6091  003A0C  D01A               	goto	l3640
  6092                           
  6093                           ; BSR set to: 0
  6094  003A0E  0100               	movlb	0	; () banked
  6095  003A10  51B8               	movf	___fttol@exp1& (0+255),w,b
  6096  003A12  0A80               	xorlw	128
  6097  003A14  0F8F               	addlw	143
  6098  003A16  B0D8               	btfsc	status,0,c
  6099  003A18  D00A               	goto	l3636
  6100                           
  6101                           ; BSR set to: 0
  6102  003A1A  0E00               	movlw	0
  6103  003A1C  0100               	movlb	0	; () banked
  6104  003A1E  6FAA               	movwf	?___fttol& (0+255),b
  6105  003A20  0E00               	movlw	0
  6106  003A22  6FAB               	movwf	(?___fttol+1)& (0+255),b
  6107  003A24  0E00               	movlw	0
  6108  003A26  6FAC               	movwf	(?___fttol+2)& (0+255),b
  6109  003A28  0E00               	movlw	0
  6110  003A2A  6FAD               	movwf	(?___fttol+3)& (0+255),b
  6111                           
  6112                           ; BSR set to: 0
  6113  003A2C  0012               	return	
  6114  003A2E                     l3636:
  6115                           
  6116                           ; BSR set to: 0
  6117  003A2E  0100               	movlb	0	; () banked
  6118  003A30  90D8               	bcf	status,0,c
  6119  003A32  33B7               	rrcf	(___fttol@lval+3)& (0+255),f,b
  6120  003A34  33B6               	rrcf	(___fttol@lval+2)& (0+255),f,b
  6121  003A36  33B5               	rrcf	(___fttol@lval+1)& (0+255),f,b
  6122  003A38  33B4               	rrcf	___fttol@lval& (0+255),f,b
  6123                           
  6124                           ; BSR set to: 0
  6125  003A3A  0100               	movlb	0	; () banked
  6126  003A3C  3FB8               	incfsz	___fttol@exp1& (0+255),f,b
  6127  003A3E  D7F7               	goto	l3636
  6128                           
  6129                           ; BSR set to: 0
  6130  003A40  D01B               	goto	l3650
  6131  003A42                     l3640:
  6132                           
  6133                           ; BSR set to: 0
  6134  003A42  0E17               	movlw	23
  6135  003A44  0100               	movlb	0	; () banked
  6136  003A46  65B8               	cpfsgt	___fttol@exp1& (0+255),b
  6137  003A48  D012               	goto	l3648
  6138                           
  6139                           ; BSR set to: 0
  6140  003A4A  0E00               	movlw	0
  6141  003A4C  0100               	movlb	0	; () banked
  6142  003A4E  6FAA               	movwf	?___fttol& (0+255),b
  6143  003A50  0E00               	movlw	0
  6144  003A52  6FAB               	movwf	(?___fttol+1)& (0+255),b
  6145  003A54  0E00               	movlw	0
  6146  003A56  6FAC               	movwf	(?___fttol+2)& (0+255),b
  6147  003A58  0E00               	movlw	0
  6148  003A5A  6FAD               	movwf	(?___fttol+3)& (0+255),b
  6149                           
  6150                           ; BSR set to: 0
  6151  003A5C  0012               	return	
  6152  003A5E                     l3646:
  6153                           
  6154                           ; BSR set to: 0
  6155  003A5E  0100               	movlb	0	; () banked
  6156  003A60  90D8               	bcf	status,0,c
  6157  003A62  37B4               	rlcf	___fttol@lval& (0+255),f,b
  6158  003A64  37B5               	rlcf	(___fttol@lval+1)& (0+255),f,b
  6159  003A66  37B6               	rlcf	(___fttol@lval+2)& (0+255),f,b
  6160  003A68  37B7               	rlcf	(___fttol@lval+3)& (0+255),f,b
  6161  003A6A  0100               	movlb	0	; () banked
  6162  003A6C  07B8               	decf	___fttol@exp1& (0+255),f,b
  6163  003A6E                     l3648:
  6164                           
  6165                           ; BSR set to: 0
  6166  003A6E  0100               	movlb	0	; () banked
  6167  003A70  51B8               	movf	___fttol@exp1& (0+255),w,b
  6168  003A72  0100               	movlb	0	; () banked
  6169  003A74  A4D8               	btfss	status,2,c
  6170  003A76  D7F3               	goto	l3646
  6171  003A78                     l3650:
  6172                           
  6173                           ; BSR set to: 0
  6174  003A78  0100               	movlb	0	; () banked
  6175  003A7A  51B3               	movf	___fttol@sign1& (0+255),w,b
  6176  003A7C  0100               	movlb	0	; () banked
  6177  003A7E  B4D8               	btfsc	status,2,c
  6178  003A80  D009               	goto	l3654
  6179                           
  6180                           ; BSR set to: 0
  6181  003A82  0100               	movlb	0	; () banked
  6182  003A84  1FB7               	comf	(___fttol@lval+3)& (0+255),f,b
  6183  003A86  1FB6               	comf	(___fttol@lval+2)& (0+255),f,b
  6184  003A88  1FB5               	comf	(___fttol@lval+1)& (0+255),f,b
  6185  003A8A  6DB4               	negf	___fttol@lval& (0+255),b
  6186  003A8C  0E00               	movlw	0
  6187  003A8E  23B5               	addwfc	(___fttol@lval+1)& (0+255),f,b
  6188  003A90  23B6               	addwfc	(___fttol@lval+2)& (0+255),f,b
  6189  003A92  23B7               	addwfc	(___fttol@lval+3)& (0+255),f,b
  6190  003A94                     l3654:
  6191                           
  6192                           ; BSR set to: 0
  6193  003A94  C0B4  F0AA         	movff	___fttol@lval,?___fttol
  6194  003A98  C0B5  F0AB         	movff	___fttol@lval+1,?___fttol+1
  6195  003A9C  C0B6  F0AC         	movff	___fttol@lval+2,?___fttol+2
  6196  003AA0  C0B7  F0AD         	movff	___fttol@lval+3,?___fttol+3
  6197  003AA4  0012               	return	
  6198  003AA6                     __end_of___fttol:
  6199                           	opt stack 0
  6200                           tblptru	equ	0xFF8
  6201                           tblptrh	equ	0xFF7
  6202                           tblptrl	equ	0xFF6
  6203                           tablat	equ	0xFF5
  6204                           prodh	equ	0xFF4
  6205                           prodl	equ	0xFF3
  6206                           intcon	equ	0xFF2
  6207                           wreg	equ	0xFE8
  6208                           indf2	equ	0xFDF
  6209                           postinc2	equ	0xFDE
  6210                           postdec2	equ	0xFDD
  6211                           fsr2h	equ	0xFDA
  6212                           fsr2l	equ	0xFD9
  6213                           status	equ	0xFD8
  6214                           
  6215 ;; *************** function ___ftsub *****************
  6216 ;; Defined at:
  6217 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  6218 ;; Parameters:    Size  Location     Type
  6219 ;;  f1              3   57[BANK0 ] float 
  6220 ;;  f2              3   60[BANK0 ] float 
  6221 ;; Auto vars:     Size  Location     Type
  6222 ;;		None
  6223 ;; Return value:  Size  Location     Type
  6224 ;;                  3   57[BANK0 ] float 
  6225 ;; Registers used:
  6226 ;;		wreg, status,2, status,0, cstack
  6227 ;; Tracked objects:
  6228 ;;		On entry : 0/0
  6229 ;;		On exit  : 0/0
  6230 ;;		Unchanged: 0/0
  6231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6232 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6235 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6236 ;;Total ram usage:        6 bytes
  6237 ;; Hardware stack levels used:    1
  6238 ;; Hardware stack levels required when called:    8
  6239 ;; This function calls:
  6240 ;;		___ftadd
  6241 ;; This function is called by:
  6242 ;;		_printf
  6243 ;; This function uses a non-reentrant model
  6244 ;;
  6245                           
  6246                           	psect	text17
  6247  004A12                     __ptext17:
  6248                           	opt stack 0
  6249  004A12                     ___ftsub:
  6250                           	opt stack 20
  6251                           
  6252                           ; BSR set to: 0
  6253                           ;incstack = 0
  6254  004A12  0100               	movlb	0	; () banked
  6255  004A14  51BC               	movf	___ftsub@f2& (0+255),w,b
  6256  004A16  0100               	movlb	0	; () banked
  6257  004A18  11BD               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  6258  004A1A  0100               	movlb	0	; () banked
  6259  004A1C  11BE               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  6260  004A1E  B4D8               	btfsc	status,2,c
  6261  004A20  D009               	goto	l3586
  6262                           
  6263                           ; BSR set to: 0
  6264  004A22  0E00               	movlw	0
  6265  004A24  0100               	movlb	0	; () banked
  6266  004A26  1BBC               	xorwf	___ftsub@f2& (0+255),f,b
  6267  004A28  0E00               	movlw	0
  6268  004A2A  0100               	movlb	0	; () banked
  6269  004A2C  1BBD               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  6270  004A2E  0E80               	movlw	128
  6271  004A30  0100               	movlb	0	; () banked
  6272  004A32  1BBE               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  6273  004A34                     l3586:
  6274                           
  6275                           ; BSR set to: 0
  6276  004A34  C0B9  F0AD         	movff	___ftsub@f1,___ftadd@f1
  6277  004A38  C0BA  F0AE         	movff	___ftsub@f1+1,___ftadd@f1+1
  6278  004A3C  C0BB  F0AF         	movff	___ftsub@f1+2,___ftadd@f1+2
  6279  004A40  C0BC  F0B0         	movff	___ftsub@f2,___ftadd@f2
  6280  004A44  C0BD  F0B1         	movff	___ftsub@f2+1,___ftadd@f2+1
  6281  004A48  C0BE  F0B2         	movff	___ftsub@f2+2,___ftadd@f2+2
  6282  004A4C  EC9C  F016         	call	___ftadd	;wreg free
  6283  004A50  C0AD  F0B9         	movff	?___ftadd,?___ftsub
  6284  004A54  C0AE  F0BA         	movff	?___ftadd+1,?___ftsub+1
  6285  004A58  C0AF  F0BB         	movff	?___ftadd+2,?___ftsub+2
  6286  004A5C  0012               	return	
  6287  004A5E                     __end_of___ftsub:
  6288                           	opt stack 0
  6289                           tblptru	equ	0xFF8
  6290                           tblptrh	equ	0xFF7
  6291                           tblptrl	equ	0xFF6
  6292                           tablat	equ	0xFF5
  6293                           prodh	equ	0xFF4
  6294                           prodl	equ	0xFF3
  6295                           intcon	equ	0xFF2
  6296                           wreg	equ	0xFE8
  6297                           indf2	equ	0xFDF
  6298                           postinc2	equ	0xFDE
  6299                           postdec2	equ	0xFDD
  6300                           fsr2h	equ	0xFDA
  6301                           fsr2l	equ	0xFD9
  6302                           status	equ	0xFD8
  6303                           
  6304 ;; *************** function ___ftadd *****************
  6305 ;; Defined at:
  6306 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  6307 ;; Parameters:    Size  Location     Type
  6308 ;;  f1              3   45[BANK0 ] float 
  6309 ;;  f2              3   48[BANK0 ] float 
  6310 ;; Auto vars:     Size  Location     Type
  6311 ;;  exp1            1   56[BANK0 ] unsigned char 
  6312 ;;  exp2            1   55[BANK0 ] unsigned char 
  6313 ;;  sign            1   54[BANK0 ] unsigned char 
  6314 ;; Return value:  Size  Location     Type
  6315 ;;                  3   45[BANK0 ] float 
  6316 ;; Registers used:
  6317 ;;		wreg, status,2, status,0, cstack
  6318 ;; Tracked objects:
  6319 ;;		On entry : 0/0
  6320 ;;		On exit  : 0/0
  6321 ;;		Unchanged: 0/0
  6322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6323 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6324 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6325 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6326 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6327 ;;Total ram usage:       12 bytes
  6328 ;; Hardware stack levels used:    1
  6329 ;; Hardware stack levels required when called:    7
  6330 ;; This function calls:
  6331 ;;		___ftpack
  6332 ;; This function is called by:
  6333 ;;		_printf
  6334 ;;		___ftsub
  6335 ;; This function uses a non-reentrant model
  6336 ;;
  6337                           
  6338                           	psect	text18
  6339  002D38                     __ptext18:
  6340                           	opt stack 0
  6341  002D38                     ___ftadd:
  6342                           	opt stack 20
  6343                           
  6344                           ;incstack = 0
  6345  002D38  C0AF  F0B3         	movff	___ftadd@f1+2,??___ftadd
  6346  002D3C  0100               	movlb	0	; () banked
  6347  002D3E  6BB4               	clrf	(??___ftadd+1)& (0+255),b
  6348  002D40  6BB5               	clrf	(??___ftadd+2)& (0+255),b
  6349  002D42  0100               	movlb	0	; () banked
  6350  002D44  35AE               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  6351  002D46  0100               	movlb	0	; () banked
  6352  002D48  37B3               	rlcf	??___ftadd& (0+255),f,b
  6353  002D4A  E301               	bnc	u2971
  6354  002D4C  81B4               	bsf	(??___ftadd+1)& (0+255),0,b
  6355  002D4E                     u2971:
  6356  002D4E  0100               	movlb	0	; () banked
  6357  002D50  51B3               	movf	??___ftadd& (0+255),w,b
  6358  002D52  0100               	movlb	0	; () banked
  6359  002D54  6FB8               	movwf	___ftadd@exp1& (0+255),b
  6360  002D56  C0B2  F0B3         	movff	___ftadd@f2+2,??___ftadd
  6361  002D5A  0100               	movlb	0	; () banked
  6362  002D5C  6BB4               	clrf	(??___ftadd+1)& (0+255),b
  6363  002D5E  6BB5               	clrf	(??___ftadd+2)& (0+255),b
  6364  002D60  0100               	movlb	0	; () banked
  6365  002D62  35B1               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  6366  002D64  0100               	movlb	0	; () banked
  6367  002D66  37B3               	rlcf	??___ftadd& (0+255),f,b
  6368  002D68  E301               	bnc	u2981
  6369  002D6A  81B4               	bsf	(??___ftadd+1)& (0+255),0,b
  6370  002D6C                     u2981:
  6371  002D6C  0100               	movlb	0	; () banked
  6372  002D6E  51B3               	movf	??___ftadd& (0+255),w,b
  6373  002D70  0100               	movlb	0	; () banked
  6374  002D72  6FB7               	movwf	___ftadd@exp2& (0+255),b
  6375                           
  6376                           ; BSR set to: 0
  6377  002D74  0100               	movlb	0	; () banked
  6378  002D76  51B8               	movf	___ftadd@exp1& (0+255),w,b
  6379  002D78  0100               	movlb	0	; () banked
  6380  002D7A  B4D8               	btfsc	status,2,c
  6381  002D7C  D011               	goto	l695
  6382                           
  6383                           ; BSR set to: 0
  6384  002D7E  0100               	movlb	0	; () banked
  6385  002D80  51B7               	movf	___ftadd@exp2& (0+255),w,b
  6386  002D82  0100               	movlb	0	; () banked
  6387  002D84  5DB8               	subwf	___ftadd@exp1& (0+255),w,b
  6388  002D86  B0D8               	btfsc	status,0,c
  6389  002D88  D012               	goto	l3160
  6390                           
  6391                           ; BSR set to: 0
  6392  002D8A  0100               	movlb	0	; () banked
  6393  002D8C  51B8               	movf	___ftadd@exp1& (0+255),w,b
  6394  002D8E  0800               	sublw	0
  6395  002D90  0100               	movlb	0	; () banked
  6396  002D92  25B7               	addwf	___ftadd@exp2& (0+255),w,b
  6397  002D94  0100               	movlb	0	; () banked
  6398  002D96  6FB3               	movwf	??___ftadd& (0+255),b
  6399  002D98  0E18               	movlw	24
  6400  002D9A  0100               	movlb	0	; () banked
  6401  002D9C  65B3               	cpfsgt	??___ftadd& (0+255),b
  6402  002D9E  D007               	goto	l3160
  6403  002DA0                     l695:
  6404                           
  6405                           ; BSR set to: 0
  6406  002DA0  C0B0  F0AD         	movff	___ftadd@f2,?___ftadd
  6407  002DA4  C0B1  F0AE         	movff	___ftadd@f2+1,?___ftadd+1
  6408  002DA8  C0B2  F0AF         	movff	___ftadd@f2+2,?___ftadd+2
  6409  002DAC  0012               	return	
  6410  002DAE                     l3160:
  6411                           
  6412                           ; BSR set to: 0
  6413  002DAE  0100               	movlb	0	; () banked
  6414  002DB0  51B7               	movf	___ftadd@exp2& (0+255),w,b
  6415  002DB2  0100               	movlb	0	; () banked
  6416  002DB4  B4D8               	btfsc	status,2,c
  6417  002DB6  D011               	goto	l699
  6418                           
  6419                           ; BSR set to: 0
  6420  002DB8  0100               	movlb	0	; () banked
  6421  002DBA  51B8               	movf	___ftadd@exp1& (0+255),w,b
  6422  002DBC  0100               	movlb	0	; () banked
  6423  002DBE  5DB7               	subwf	___ftadd@exp2& (0+255),w,b
  6424  002DC0  B0D8               	btfsc	status,0,c
  6425  002DC2  D012               	goto	l3166
  6426                           
  6427                           ; BSR set to: 0
  6428  002DC4  0100               	movlb	0	; () banked
  6429  002DC6  51B7               	movf	___ftadd@exp2& (0+255),w,b
  6430  002DC8  0800               	sublw	0
  6431  002DCA  0100               	movlb	0	; () banked
  6432  002DCC  25B8               	addwf	___ftadd@exp1& (0+255),w,b
  6433  002DCE  0100               	movlb	0	; () banked
  6434  002DD0  6FB3               	movwf	??___ftadd& (0+255),b
  6435  002DD2  0E18               	movlw	24
  6436  002DD4  0100               	movlb	0	; () banked
  6437  002DD6  65B3               	cpfsgt	??___ftadd& (0+255),b
  6438  002DD8  D007               	goto	l3166
  6439  002DDA                     l699:
  6440                           
  6441                           ; BSR set to: 0
  6442  002DDA  C0AD  F0AD         	movff	___ftadd@f1,?___ftadd
  6443  002DDE  C0AE  F0AE         	movff	___ftadd@f1+1,?___ftadd+1
  6444  002DE2  C0AF  F0AF         	movff	___ftadd@f1+2,?___ftadd+2
  6445  002DE6  0012               	return	
  6446  002DE8                     l3166:
  6447                           
  6448                           ; BSR set to: 0
  6449  002DE8  0E06               	movlw	6
  6450  002DEA  0100               	movlb	0	; () banked
  6451  002DEC  6FB6               	movwf	___ftadd@sign& (0+255),b
  6452                           
  6453                           ; BSR set to: 0
  6454  002DEE  0100               	movlb	0	; () banked
  6455  002DF0  AFAF               	btfss	(___ftadd@f1+2)& (0+255),7,b
  6456  002DF2  D002               	goto	l3172
  6457                           
  6458                           ; BSR set to: 0
  6459  002DF4  0100               	movlb	0	; () banked
  6460  002DF6  8FB6               	bsf	___ftadd@sign& (0+255),7,b
  6461  002DF8                     l3172:
  6462                           
  6463                           ; BSR set to: 0
  6464  002DF8  0100               	movlb	0	; () banked
  6465  002DFA  AFB2               	btfss	(___ftadd@f2+2)& (0+255),7,b
  6466  002DFC  D002               	goto	l701
  6467                           
  6468                           ; BSR set to: 0
  6469  002DFE  0100               	movlb	0	; () banked
  6470  002E00  8DB6               	bsf	___ftadd@sign& (0+255),6,b
  6471  002E02                     l701:
  6472                           
  6473                           ; BSR set to: 0
  6474  002E02  0100               	movlb	0	; () banked
  6475  002E04  8FAE               	bsf	(___ftadd@f1+1)& (0+255),7,b
  6476                           
  6477                           ; BSR set to: 0
  6478  002E06  0EFF               	movlw	255
  6479  002E08  0100               	movlb	0	; () banked
  6480  002E0A  17AD               	andwf	___ftadd@f1& (0+255),f,b
  6481  002E0C  0EFF               	movlw	255
  6482  002E0E  0100               	movlb	0	; () banked
  6483  002E10  17AE               	andwf	(___ftadd@f1+1)& (0+255),f,b
  6484  002E12  0E00               	movlw	0
  6485  002E14  0100               	movlb	0	; () banked
  6486  002E16  17AF               	andwf	(___ftadd@f1+2)& (0+255),f,b
  6487  002E18  0100               	movlb	0	; () banked
  6488  002E1A  8FB1               	bsf	(___ftadd@f2+1)& (0+255),7,b
  6489                           
  6490                           ; BSR set to: 0
  6491  002E1C  0EFF               	movlw	255
  6492  002E1E  0100               	movlb	0	; () banked
  6493  002E20  17B0               	andwf	___ftadd@f2& (0+255),f,b
  6494  002E22  0EFF               	movlw	255
  6495  002E24  0100               	movlb	0	; () banked
  6496  002E26  17B1               	andwf	(___ftadd@f2+1)& (0+255),f,b
  6497  002E28  0E00               	movlw	0
  6498  002E2A  0100               	movlb	0	; () banked
  6499  002E2C  17B2               	andwf	(___ftadd@f2+2)& (0+255),f,b
  6500                           
  6501                           ; BSR set to: 0
  6502  002E2E  0100               	movlb	0	; () banked
  6503  002E30  51B7               	movf	___ftadd@exp2& (0+255),w,b
  6504  002E32  0100               	movlb	0	; () banked
  6505  002E34  5DB8               	subwf	___ftadd@exp1& (0+255),w,b
  6506  002E36  B0D8               	btfsc	status,0,c
  6507  002E38  D025               	goto	l3192
  6508  002E3A                     l3182:
  6509                           
  6510                           ; BSR set to: 0
  6511  002E3A  0100               	movlb	0	; () banked
  6512  002E3C  90D8               	bcf	status,0,c
  6513  002E3E  37B0               	rlcf	___ftadd@f2& (0+255),f,b
  6514  002E40  37B1               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  6515  002E42  37B2               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  6516  002E44  0100               	movlb	0	; () banked
  6517  002E46  07B7               	decf	___ftadd@exp2& (0+255),f,b
  6518                           
  6519                           ; BSR set to: 0
  6520  002E48  0100               	movlb	0	; () banked
  6521  002E4A  51B8               	movf	___ftadd@exp1& (0+255),w,b
  6522  002E4C  0100               	movlb	0	; () banked
  6523  002E4E  19B7               	xorwf	___ftadd@exp2& (0+255),w,b
  6524  002E50  B4D8               	btfsc	status,2,c
  6525  002E52  D011               	goto	l3190
  6526                           
  6527                           ; BSR set to: 0
  6528  002E54  0100               	movlb	0	; () banked
  6529  002E56  07B6               	decf	___ftadd@sign& (0+255),f,b
  6530  002E58  C0B6  F0B3         	movff	___ftadd@sign,??___ftadd
  6531  002E5C  0E07               	movlw	7
  6532  002E5E  0100               	movlb	0	; () banked
  6533  002E60  17B3               	andwf	??___ftadd& (0+255),f,b
  6534  002E62  B4D8               	btfsc	status,2,c
  6535  002E64  D008               	goto	l3190
  6536  002E66  D7E9               	goto	l3182
  6537  002E68                     l3188:
  6538                           
  6539                           ; BSR set to: 0
  6540  002E68  0100               	movlb	0	; () banked
  6541  002E6A  90D8               	bcf	status,0,c
  6542  002E6C  33AF               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  6543  002E6E  33AE               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  6544  002E70  33AD               	rrcf	___ftadd@f1& (0+255),f,b
  6545  002E72  0100               	movlb	0	; () banked
  6546  002E74  2BB8               	incf	___ftadd@exp1& (0+255),f,b
  6547  002E76                     l3190:
  6548                           
  6549                           ; BSR set to: 0
  6550  002E76  0100               	movlb	0	; () banked
  6551  002E78  51B7               	movf	___ftadd@exp2& (0+255),w,b
  6552  002E7A  0100               	movlb	0	; () banked
  6553  002E7C  19B8               	xorwf	___ftadd@exp1& (0+255),w,b
  6554  002E7E  B4D8               	btfsc	status,2,c
  6555  002E80  D02B               	goto	l710
  6556  002E82  D7F2               	goto	l3188
  6557  002E84                     l3192:
  6558                           
  6559                           ; BSR set to: 0
  6560  002E84  0100               	movlb	0	; () banked
  6561  002E86  51B8               	movf	___ftadd@exp1& (0+255),w,b
  6562  002E88  0100               	movlb	0	; () banked
  6563  002E8A  5DB7               	subwf	___ftadd@exp2& (0+255),w,b
  6564  002E8C  B0D8               	btfsc	status,0,c
  6565  002E8E  D024               	goto	l710
  6566  002E90                     l3194:
  6567                           
  6568                           ; BSR set to: 0
  6569  002E90  0100               	movlb	0	; () banked
  6570  002E92  90D8               	bcf	status,0,c
  6571  002E94  37AD               	rlcf	___ftadd@f1& (0+255),f,b
  6572  002E96  37AE               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  6573  002E98  37AF               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  6574  002E9A  0100               	movlb	0	; () banked
  6575  002E9C  07B8               	decf	___ftadd@exp1& (0+255),f,b
  6576                           
  6577                           ; BSR set to: 0
  6578  002E9E  0100               	movlb	0	; () banked
  6579  002EA0  51B8               	movf	___ftadd@exp1& (0+255),w,b
  6580  002EA2  0100               	movlb	0	; () banked
  6581  002EA4  19B7               	xorwf	___ftadd@exp2& (0+255),w,b
  6582  002EA6  B4D8               	btfsc	status,2,c
  6583  002EA8  D011               	goto	l3202
  6584                           
  6585                           ; BSR set to: 0
  6586  002EAA  0100               	movlb	0	; () banked
  6587  002EAC  07B6               	decf	___ftadd@sign& (0+255),f,b
  6588  002EAE  C0B6  F0B3         	movff	___ftadd@sign,??___ftadd
  6589  002EB2  0E07               	movlw	7
  6590  002EB4  0100               	movlb	0	; () banked
  6591  002EB6  17B3               	andwf	??___ftadd& (0+255),f,b
  6592  002EB8  B4D8               	btfsc	status,2,c
  6593  002EBA  D008               	goto	l3202
  6594  002EBC  D7E9               	goto	l3194
  6595  002EBE                     l3200:
  6596                           
  6597                           ; BSR set to: 0
  6598  002EBE  0100               	movlb	0	; () banked
  6599  002EC0  90D8               	bcf	status,0,c
  6600  002EC2  33B2               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  6601  002EC4  33B1               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  6602  002EC6  33B0               	rrcf	___ftadd@f2& (0+255),f,b
  6603  002EC8  0100               	movlb	0	; () banked
  6604  002ECA  2BB7               	incf	___ftadd@exp2& (0+255),f,b
  6605  002ECC                     l3202:
  6606                           
  6607                           ; BSR set to: 0
  6608  002ECC  0100               	movlb	0	; () banked
  6609  002ECE  51B7               	movf	___ftadd@exp2& (0+255),w,b
  6610  002ED0  0100               	movlb	0	; () banked
  6611  002ED2  19B8               	xorwf	___ftadd@exp1& (0+255),w,b
  6612  002ED4  A4D8               	btfss	status,2,c
  6613  002ED6  D7F3               	goto	l3200
  6614  002ED8                     l710:
  6615                           
  6616                           ; BSR set to: 0
  6617  002ED8  0100               	movlb	0	; () banked
  6618  002EDA  AFB6               	btfss	___ftadd@sign& (0+255),7,b
  6619  002EDC  D012               	goto	l719
  6620                           
  6621                           ; BSR set to: 0
  6622  002EDE  0EFF               	movlw	255
  6623  002EE0  0100               	movlb	0	; () banked
  6624  002EE2  1BAD               	xorwf	___ftadd@f1& (0+255),f,b
  6625  002EE4  0EFF               	movlw	255
  6626  002EE6  0100               	movlb	0	; () banked
  6627  002EE8  1BAE               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  6628  002EEA  0EFF               	movlw	255
  6629  002EEC  0100               	movlb	0	; () banked
  6630  002EEE  1BAF               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  6631  002EF0  0E01               	movlw	1
  6632  002EF2  0100               	movlb	0	; () banked
  6633  002EF4  27AD               	addwf	___ftadd@f1& (0+255),f,b
  6634  002EF6  0E00               	movlw	0
  6635  002EF8  0100               	movlb	0	; () banked
  6636  002EFA  23AE               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  6637  002EFC  0E00               	movlw	0
  6638  002EFE  0100               	movlb	0	; () banked
  6639  002F00  23AF               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  6640  002F02                     l719:
  6641                           
  6642                           ; BSR set to: 0
  6643  002F02  0100               	movlb	0	; () banked
  6644  002F04  ADB6               	btfss	___ftadd@sign& (0+255),6,b
  6645  002F06  D012               	goto	l3208
  6646                           
  6647                           ; BSR set to: 0
  6648  002F08  0EFF               	movlw	255
  6649  002F0A  0100               	movlb	0	; () banked
  6650  002F0C  1BB0               	xorwf	___ftadd@f2& (0+255),f,b
  6651  002F0E  0EFF               	movlw	255
  6652  002F10  0100               	movlb	0	; () banked
  6653  002F12  1BB1               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  6654  002F14  0EFF               	movlw	255
  6655  002F16  0100               	movlb	0	; () banked
  6656  002F18  1BB2               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  6657  002F1A  0E01               	movlw	1
  6658  002F1C  0100               	movlb	0	; () banked
  6659  002F1E  27B0               	addwf	___ftadd@f2& (0+255),f,b
  6660  002F20  0E00               	movlw	0
  6661  002F22  0100               	movlb	0	; () banked
  6662  002F24  23B1               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  6663  002F26  0E00               	movlw	0
  6664  002F28  0100               	movlb	0	; () banked
  6665  002F2A  23B2               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  6666  002F2C                     l3208:
  6667                           
  6668                           ; BSR set to: 0
  6669  002F2C  0E00               	movlw	0
  6670  002F2E  0100               	movlb	0	; () banked
  6671  002F30  6FB6               	movwf	___ftadd@sign& (0+255),b
  6672                           
  6673                           ; BSR set to: 0
  6674  002F32  0100               	movlb	0	; () banked
  6675  002F34  51AD               	movf	___ftadd@f1& (0+255),w,b
  6676  002F36  0100               	movlb	0	; () banked
  6677  002F38  27B0               	addwf	___ftadd@f2& (0+255),f,b
  6678  002F3A  0100               	movlb	0	; () banked
  6679  002F3C  51AE               	movf	(___ftadd@f1+1)& (0+255),w,b
  6680  002F3E  0100               	movlb	0	; () banked
  6681  002F40  23B1               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  6682  002F42  0100               	movlb	0	; () banked
  6683  002F44  51AF               	movf	(___ftadd@f1+2)& (0+255),w,b
  6684  002F46  0100               	movlb	0	; () banked
  6685  002F48  23B2               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  6686                           
  6687                           ; BSR set to: 0
  6688  002F4A  0100               	movlb	0	; () banked
  6689  002F4C  AFB2               	btfss	(___ftadd@f2+2)& (0+255),7,b
  6690  002F4E  D015               	goto	l3218
  6691                           
  6692                           ; BSR set to: 0
  6693  002F50  0EFF               	movlw	255
  6694  002F52  0100               	movlb	0	; () banked
  6695  002F54  1BB0               	xorwf	___ftadd@f2& (0+255),f,b
  6696  002F56  0EFF               	movlw	255
  6697  002F58  0100               	movlb	0	; () banked
  6698  002F5A  1BB1               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  6699  002F5C  0EFF               	movlw	255
  6700  002F5E  0100               	movlb	0	; () banked
  6701  002F60  1BB2               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  6702  002F62  0E01               	movlw	1
  6703  002F64  0100               	movlb	0	; () banked
  6704  002F66  27B0               	addwf	___ftadd@f2& (0+255),f,b
  6705  002F68  0E00               	movlw	0
  6706  002F6A  0100               	movlb	0	; () banked
  6707  002F6C  23B1               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  6708  002F6E  0E00               	movlw	0
  6709  002F70  0100               	movlb	0	; () banked
  6710  002F72  23B2               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  6711                           
  6712                           ; BSR set to: 0
  6713  002F74  0E01               	movlw	1
  6714  002F76  0100               	movlb	0	; () banked
  6715  002F78  6FB6               	movwf	___ftadd@sign& (0+255),b
  6716  002F7A                     l3218:
  6717                           
  6718                           ; BSR set to: 0
  6719  002F7A  C0B0  F080         	movff	___ftadd@f2,___ftpack@arg
  6720  002F7E  C0B1  F081         	movff	___ftadd@f2+1,___ftpack@arg+1
  6721  002F82  C0B2  F082         	movff	___ftadd@f2+2,___ftpack@arg+2
  6722  002F86  C0B8  F083         	movff	___ftadd@exp1,___ftpack@exp
  6723  002F8A  C0B6  F084         	movff	___ftadd@sign,___ftpack@sign
  6724  002F8E  EC80  F01E         	call	___ftpack	;wreg free
  6725  002F92  C080  F0AD         	movff	?___ftpack,?___ftadd
  6726  002F96  C081  F0AE         	movff	?___ftpack+1,?___ftadd+1
  6727  002F9A  C082  F0AF         	movff	?___ftpack+2,?___ftadd+2
  6728  002F9E  0012               	return	
  6729  002FA0                     __end_of___ftadd:
  6730                           	opt stack 0
  6731                           tblptru	equ	0xFF8
  6732                           tblptrh	equ	0xFF7
  6733                           tblptrl	equ	0xFF6
  6734                           tablat	equ	0xFF5
  6735                           prodh	equ	0xFF4
  6736                           prodl	equ	0xFF3
  6737                           intcon	equ	0xFF2
  6738                           wreg	equ	0xFE8
  6739                           indf2	equ	0xFDF
  6740                           postinc2	equ	0xFDE
  6741                           postdec2	equ	0xFDD
  6742                           fsr2h	equ	0xFDA
  6743                           fsr2l	equ	0xFD9
  6744                           status	equ	0xFD8
  6745                           
  6746 ;; *************** function ___ftneg *****************
  6747 ;; Defined at:
  6748 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  6749 ;; Parameters:    Size  Location     Type
  6750 ;;  f1              3    0[BANK0 ] float 
  6751 ;; Auto vars:     Size  Location     Type
  6752 ;;		None
  6753 ;; Return value:  Size  Location     Type
  6754 ;;                  3    0[BANK0 ] float 
  6755 ;; Registers used:
  6756 ;;		wreg, status,2, status,0
  6757 ;; Tracked objects:
  6758 ;;		On entry : 0/0
  6759 ;;		On exit  : 0/0
  6760 ;;		Unchanged: 0/0
  6761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6762 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6765 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6766 ;;Total ram usage:        3 bytes
  6767 ;; Hardware stack levels used:    1
  6768 ;; Hardware stack levels required when called:    6
  6769 ;; This function calls:
  6770 ;;		Nothing
  6771 ;; This function is called by:
  6772 ;;		_printf
  6773 ;; This function uses a non-reentrant model
  6774 ;;
  6775                           
  6776                           	psect	text19
  6777  004B1A                     __ptext19:
  6778                           	opt stack 0
  6779  004B1A                     ___ftneg:
  6780                           	opt stack 22
  6781                           
  6782                           ;incstack = 0
  6783  004B1A  0100               	movlb	0	; () banked
  6784  004B1C  5180               	movf	___ftneg@f1& (0+255),w,b
  6785  004B1E  0100               	movlb	0	; () banked
  6786  004B20  1181               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  6787  004B22  0100               	movlb	0	; () banked
  6788  004B24  1182               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  6789  004B26  B4D8               	btfsc	status,2,c
  6790  004B28  D009               	goto	l769
  6791                           
  6792                           ; BSR set to: 0
  6793  004B2A  0E00               	movlw	0
  6794  004B2C  0100               	movlb	0	; () banked
  6795  004B2E  1B80               	xorwf	___ftneg@f1& (0+255),f,b
  6796  004B30  0E00               	movlw	0
  6797  004B32  0100               	movlb	0	; () banked
  6798  004B34  1B81               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  6799  004B36  0E80               	movlw	128
  6800  004B38  0100               	movlb	0	; () banked
  6801  004B3A  1B82               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  6802  004B3C                     l769:
  6803                           
  6804                           ; BSR set to: 0
  6805  004B3C  C080  F080         	movff	___ftneg@f1,?___ftneg
  6806  004B40  C081  F081         	movff	___ftneg@f1+1,?___ftneg+1
  6807  004B44  C082  F082         	movff	___ftneg@f1+2,?___ftneg+2
  6808                           
  6809                           ; BSR set to: 0
  6810  004B48  0012               	return		;funcret
  6811  004B4A                     __end_of___ftneg:
  6812                           	opt stack 0
  6813                           tblptru	equ	0xFF8
  6814                           tblptrh	equ	0xFF7
  6815                           tblptrl	equ	0xFF6
  6816                           tablat	equ	0xFF5
  6817                           prodh	equ	0xFF4
  6818                           prodl	equ	0xFF3
  6819                           intcon	equ	0xFF2
  6820                           wreg	equ	0xFE8
  6821                           indf2	equ	0xFDF
  6822                           postinc2	equ	0xFDE
  6823                           postdec2	equ	0xFDD
  6824                           fsr2h	equ	0xFDA
  6825                           fsr2l	equ	0xFD9
  6826                           status	equ	0xFD8
  6827                           
  6828 ;; *************** function ___ftge *****************
  6829 ;; Defined at:
  6830 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  6831 ;; Parameters:    Size  Location     Type
  6832 ;;  ff1             3    0[BANK0 ] float 
  6833 ;;  ff2             3    3[BANK0 ] float 
  6834 ;; Auto vars:     Size  Location     Type
  6835 ;;		None
  6836 ;; Return value:  Size  Location     Type
  6837 ;;		None               void
  6838 ;; Registers used:
  6839 ;;		wreg, status,2, status,0
  6840 ;; Tracked objects:
  6841 ;;		On entry : 0/0
  6842 ;;		On exit  : 0/0
  6843 ;;		Unchanged: 0/0
  6844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6845 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6847 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6848 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6849 ;;Total ram usage:        9 bytes
  6850 ;; Hardware stack levels used:    1
  6851 ;; Hardware stack levels required when called:    6
  6852 ;; This function calls:
  6853 ;;		Nothing
  6854 ;; This function is called by:
  6855 ;;		_printf
  6856 ;; This function uses a non-reentrant model
  6857 ;;
  6858                           
  6859                           	psect	text20
  6860  003FF4                     __ptext20:
  6861                           	opt stack 0
  6862  003FF4                     ___ftge:
  6863                           	opt stack 22
  6864                           
  6865                           ; BSR set to: 0
  6866                           ;incstack = 0
  6867  003FF4  0100               	movlb	0	; () banked
  6868  003FF6  AF82               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6869  003FF8  D01D               	goto	l3594
  6870                           
  6871                           ; BSR set to: 0
  6872  003FFA  C080  F086         	movff	___ftge@ff1,??___ftge
  6873  003FFE  C081  F087         	movff	___ftge@ff1+1,??___ftge+1
  6874  004002  C082  F088         	movff	___ftge@ff1+2,??___ftge+2
  6875  004006  0100               	movlb	0	; () banked
  6876  004008  1F86               	comf	??___ftge& (0+255),f,b
  6877  00400A  1F87               	comf	(??___ftge+1)& (0+255),f,b
  6878  00400C  1F88               	comf	(??___ftge+2)& (0+255),f,b
  6879  00400E  2B86               	incf	??___ftge& (0+255),f,b
  6880  004010  0E00               	movlw	0
  6881  004012  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  6882  004014  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  6883  004016  0E00               	movlw	0
  6884  004018  0100               	movlb	0	; () banked
  6885  00401A  2586               	addwf	??___ftge& (0+255),w,b
  6886  00401C  0100               	movlb	0	; () banked
  6887  00401E  6F80               	movwf	___ftge@ff1& (0+255),b
  6888  004020  0E00               	movlw	0
  6889  004022  0100               	movlb	0	; () banked
  6890  004024  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  6891  004026  0100               	movlb	0	; () banked
  6892  004028  6F81               	movwf	(___ftge@ff1+1)& (0+255),b
  6893  00402A  0E80               	movlw	128
  6894  00402C  0100               	movlb	0	; () banked
  6895  00402E  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  6896  004030  0100               	movlb	0	; () banked
  6897  004032  6F82               	movwf	(___ftge@ff1+2)& (0+255),b
  6898  004034                     l3594:
  6899                           
  6900                           ; BSR set to: 0
  6901  004034  0100               	movlb	0	; () banked
  6902  004036  AF85               	btfss	(___ftge@ff2+2)& (0+255),7,b
  6903  004038  D01D               	goto	l3598
  6904                           
  6905                           ; BSR set to: 0
  6906  00403A  C083  F086         	movff	___ftge@ff2,??___ftge
  6907  00403E  C084  F087         	movff	___ftge@ff2+1,??___ftge+1
  6908  004042  C085  F088         	movff	___ftge@ff2+2,??___ftge+2
  6909  004046  0100               	movlb	0	; () banked
  6910  004048  1F86               	comf	??___ftge& (0+255),f,b
  6911  00404A  1F87               	comf	(??___ftge+1)& (0+255),f,b
  6912  00404C  1F88               	comf	(??___ftge+2)& (0+255),f,b
  6913  00404E  2B86               	incf	??___ftge& (0+255),f,b
  6914  004050  0E00               	movlw	0
  6915  004052  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  6916  004054  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  6917  004056  0E00               	movlw	0
  6918  004058  0100               	movlb	0	; () banked
  6919  00405A  2586               	addwf	??___ftge& (0+255),w,b
  6920  00405C  0100               	movlb	0	; () banked
  6921  00405E  6F83               	movwf	___ftge@ff2& (0+255),b
  6922  004060  0E00               	movlw	0
  6923  004062  0100               	movlb	0	; () banked
  6924  004064  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  6925  004066  0100               	movlb	0	; () banked
  6926  004068  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  6927  00406A  0E80               	movlw	128
  6928  00406C  0100               	movlb	0	; () banked
  6929  00406E  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  6930  004070  0100               	movlb	0	; () banked
  6931  004072  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  6932  004074                     l3598:
  6933                           
  6934                           ; BSR set to: 0
  6935  004074  0E00               	movlw	0
  6936  004076  0100               	movlb	0	; () banked
  6937  004078  1B80               	xorwf	___ftge@ff1& (0+255),f,b
  6938  00407A  0E00               	movlw	0
  6939  00407C  0100               	movlb	0	; () banked
  6940  00407E  1B81               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  6941  004080  0E80               	movlw	128
  6942  004082  0100               	movlb	0	; () banked
  6943  004084  1B82               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  6944                           
  6945                           ; BSR set to: 0
  6946  004086  0E00               	movlw	0
  6947  004088  0100               	movlb	0	; () banked
  6948  00408A  1B83               	xorwf	___ftge@ff2& (0+255),f,b
  6949  00408C  0E00               	movlw	0
  6950  00408E  0100               	movlb	0	; () banked
  6951  004090  1B84               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  6952  004092  0E80               	movlw	128
  6953  004094  0100               	movlb	0	; () banked
  6954  004096  1B85               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  6955  004098  0100               	movlb	0	; () banked
  6956  00409A  5183               	movf	___ftge@ff2& (0+255),w,b
  6957  00409C  0100               	movlb	0	; () banked
  6958  00409E  5D80               	subwf	___ftge@ff1& (0+255),w,b
  6959  0040A0  0100               	movlb	0	; () banked
  6960  0040A2  5184               	movf	(___ftge@ff2+1)& (0+255),w,b
  6961  0040A4  0100               	movlb	0	; () banked
  6962  0040A6  5981               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  6963  0040A8  0100               	movlb	0	; () banked
  6964  0040AA  5185               	movf	(___ftge@ff2+2)& (0+255),w,b
  6965  0040AC  0100               	movlb	0	; () banked
  6966  0040AE  5982               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  6967  0040B0  B0D8               	btfsc	status,0,c
  6968  0040B2  D002               	goto	l3604
  6969                           
  6970                           ; BSR set to: 0
  6971  0040B4  90D8               	bcf	status,0,c
  6972  0040B6  0012               	return	
  6973  0040B8                     l3604:
  6974                           
  6975                           ; BSR set to: 0
  6976  0040B8  80D8               	bsf	status,0,c
  6977                           
  6978                           ; BSR set to: 0
  6979  0040BA  0012               	return	
  6980  0040BC                     __end_of___ftge:
  6981                           	opt stack 0
  6982                           tblptru	equ	0xFF8
  6983                           tblptrh	equ	0xFF7
  6984                           tblptrl	equ	0xFF6
  6985                           tablat	equ	0xFF5
  6986                           prodh	equ	0xFF4
  6987                           prodl	equ	0xFF3
  6988                           intcon	equ	0xFF2
  6989                           wreg	equ	0xFE8
  6990                           indf2	equ	0xFDF
  6991                           postinc2	equ	0xFDE
  6992                           postdec2	equ	0xFDD
  6993                           fsr2h	equ	0xFDA
  6994                           fsr2l	equ	0xFD9
  6995                           status	equ	0xFD8
  6996                           
  6997 ;; *************** function _initT0 *****************
  6998 ;; Defined at:
  6999 ;;		line 47 in file "timer.c"
  7000 ;; Parameters:    Size  Location     Type
  7001 ;;		None
  7002 ;; Auto vars:     Size  Location     Type
  7003 ;;		None
  7004 ;; Return value:  Size  Location     Type
  7005 ;;                  1    wreg      void 
  7006 ;; Registers used:
  7007 ;;		None
  7008 ;; Tracked objects:
  7009 ;;		On entry : 0/0
  7010 ;;		On exit  : 0/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7017 ;;Total ram usage:        0 bytes
  7018 ;; Hardware stack levels used:    1
  7019 ;; Hardware stack levels required when called:    6
  7020 ;; This function calls:
  7021 ;;		Nothing
  7022 ;; This function is called by:
  7023 ;;		_testFrequency
  7024 ;; This function uses a non-reentrant model
  7025 ;;
  7026                           
  7027                           	psect	text21
  7028  004CAE                     __ptext21:
  7029                           	opt stack 0
  7030  004CAE                     _initT0:
  7031                           	opt stack 23
  7032                           
  7033                           ;timer.c: 49: TMR0IE = 1;
  7034                           
  7035                           ; BSR set to: 0
  7036                           ;incstack = 0
  7037  004CAE  8AF2               	bsf	intcon,5,c	;volatile
  7038                           
  7039                           ;timer.c: 50: PEIE = 1;
  7040  004CB0  8CF2               	bsf	intcon,6,c	;volatile
  7041                           
  7042                           ;timer.c: 51: (INTCONbits.GIE = 1);
  7043  004CB2  8EF2               	bsf	intcon,7,c	;volatile
  7044  004CB4  0012               	return		;funcret
  7045  004CB6                     __end_of_initT0:
  7046                           	opt stack 0
  7047                           tblptru	equ	0xFF8
  7048                           tblptrh	equ	0xFF7
  7049                           tblptrl	equ	0xFF6
  7050                           tablat	equ	0xFF5
  7051                           prodh	equ	0xFF4
  7052                           prodl	equ	0xFF3
  7053                           intcon	equ	0xFF2
  7054                           wreg	equ	0xFE8
  7055                           indf2	equ	0xFDF
  7056                           postinc2	equ	0xFDE
  7057                           postdec2	equ	0xFDD
  7058                           fsr2h	equ	0xFDA
  7059                           fsr2l	equ	0xFD9
  7060                           status	equ	0xFD8
  7061                           
  7062 ;; *************** function ___ftdiv *****************
  7063 ;; Defined at:
  7064 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  7065 ;; Parameters:    Size  Location     Type
  7066 ;;  f1              3   18[BANK0 ] float 
  7067 ;;  f2              3   21[BANK0 ] float 
  7068 ;; Auto vars:     Size  Location     Type
  7069 ;;  f3              3   28[BANK0 ] float 
  7070 ;;  sign            1   32[BANK0 ] unsigned char 
  7071 ;;  exp             1   31[BANK0 ] unsigned char 
  7072 ;;  cntr            1   27[BANK0 ] unsigned char 
  7073 ;; Return value:  Size  Location     Type
  7074 ;;                  3   18[BANK0 ] float 
  7075 ;; Registers used:
  7076 ;;		wreg, status,2, status,0, cstack
  7077 ;; Tracked objects:
  7078 ;;		On entry : 0/0
  7079 ;;		On exit  : 0/0
  7080 ;;		Unchanged: 0/0
  7081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7082 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7083 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7084 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7085 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7086 ;;Total ram usage:       15 bytes
  7087 ;; Hardware stack levels used:    1
  7088 ;; Hardware stack levels required when called:    7
  7089 ;; This function calls:
  7090 ;;		___ftpack
  7091 ;; This function is called by:
  7092 ;;		_testFrequency
  7093 ;; This function uses a non-reentrant model
  7094 ;;
  7095                           
  7096                           	psect	text22
  7097  003816                     __ptext22:
  7098                           	opt stack 0
  7099  003816                     ___ftdiv:
  7100                           	opt stack 22
  7101                           
  7102                           ;incstack = 0
  7103  003816  C094  F098         	movff	___ftdiv@f1+2,??___ftdiv
  7104  00381A  0100               	movlb	0	; () banked
  7105  00381C  6B99               	clrf	(??___ftdiv+1)& (0+255),b
  7106  00381E  6B9A               	clrf	(??___ftdiv+2)& (0+255),b
  7107  003820  0100               	movlb	0	; () banked
  7108  003822  3593               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  7109  003824  0100               	movlb	0	; () banked
  7110  003826  3798               	rlcf	??___ftdiv& (0+255),f,b
  7111  003828  E301               	bnc	u4641
  7112  00382A  8199               	bsf	(??___ftdiv+1)& (0+255),0,b
  7113  00382C                     u4641:
  7114  00382C  0100               	movlb	0	; () banked
  7115  00382E  5198               	movf	??___ftdiv& (0+255),w,b
  7116  003830  0100               	movlb	0	; () banked
  7117  003832  6F9F               	movwf	___ftdiv@exp& (0+255),b
  7118  003834  0100               	movlb	0	; () banked
  7119  003836  519F               	movf	___ftdiv@exp& (0+255),w,b
  7120  003838  A4D8               	btfss	status,2,c
  7121  00383A  D00A               	goto	l4160
  7122                           
  7123                           ; BSR set to: 0
  7124  00383C  0E00               	movlw	0
  7125  00383E  0100               	movlb	0	; () banked
  7126  003840  6F92               	movwf	?___ftdiv& (0+255),b
  7127  003842  0E00               	movlw	0
  7128  003844  0100               	movlb	0	; () banked
  7129  003846  6F93               	movwf	(?___ftdiv+1)& (0+255),b
  7130  003848  0E00               	movlw	0
  7131  00384A  0100               	movlb	0	; () banked
  7132  00384C  6F94               	movwf	(?___ftdiv+2)& (0+255),b
  7133                           
  7134                           ; BSR set to: 0
  7135  00384E  0012               	return	
  7136  003850                     l4160:
  7137                           
  7138                           ; BSR set to: 0
  7139  003850  C097  F098         	movff	___ftdiv@f2+2,??___ftdiv
  7140  003854  0100               	movlb	0	; () banked
  7141  003856  6B99               	clrf	(??___ftdiv+1)& (0+255),b
  7142  003858  6B9A               	clrf	(??___ftdiv+2)& (0+255),b
  7143  00385A  0100               	movlb	0	; () banked
  7144  00385C  3596               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  7145  00385E  0100               	movlb	0	; () banked
  7146  003860  3798               	rlcf	??___ftdiv& (0+255),f,b
  7147  003862  E301               	bnc	u4661
  7148  003864  8199               	bsf	(??___ftdiv+1)& (0+255),0,b
  7149  003866                     u4661:
  7150  003866  0100               	movlb	0	; () banked
  7151  003868  5198               	movf	??___ftdiv& (0+255),w,b
  7152  00386A  0100               	movlb	0	; () banked
  7153  00386C  6FA0               	movwf	___ftdiv@sign& (0+255),b
  7154  00386E  0100               	movlb	0	; () banked
  7155  003870  51A0               	movf	___ftdiv@sign& (0+255),w,b
  7156  003872  A4D8               	btfss	status,2,c
  7157  003874  D00A               	goto	l4166
  7158                           
  7159                           ; BSR set to: 0
  7160  003876  0E00               	movlw	0
  7161  003878  0100               	movlb	0	; () banked
  7162  00387A  6F92               	movwf	?___ftdiv& (0+255),b
  7163  00387C  0E00               	movlw	0
  7164  00387E  0100               	movlb	0	; () banked
  7165  003880  6F93               	movwf	(?___ftdiv+1)& (0+255),b
  7166  003882  0E00               	movlw	0
  7167  003884  0100               	movlb	0	; () banked
  7168  003886  6F94               	movwf	(?___ftdiv+2)& (0+255),b
  7169                           
  7170                           ; BSR set to: 0
  7171  003888  0012               	return	
  7172  00388A                     l4166:
  7173                           
  7174                           ; BSR set to: 0
  7175  00388A  0E00               	movlw	0
  7176  00388C  0100               	movlb	0	; () banked
  7177  00388E  6F9C               	movwf	___ftdiv@f3& (0+255),b
  7178  003890  0E00               	movlw	0
  7179  003892  0100               	movlb	0	; () banked
  7180  003894  6F9D               	movwf	(___ftdiv@f3+1)& (0+255),b
  7181  003896  0E00               	movlw	0
  7182  003898  0100               	movlb	0	; () banked
  7183  00389A  6F9E               	movwf	(___ftdiv@f3+2)& (0+255),b
  7184                           
  7185                           ; BSR set to: 0
  7186  00389C  0100               	movlb	0	; () banked
  7187  00389E  51A0               	movf	___ftdiv@sign& (0+255),w,b
  7188  0038A0  0F89               	addlw	137
  7189  0038A2  0100               	movlb	0	; () banked
  7190  0038A4  5F9F               	subwf	___ftdiv@exp& (0+255),f,b
  7191                           
  7192                           ; BSR set to: 0
  7193  0038A6  C094  F0A0         	movff	___ftdiv@f1+2,___ftdiv@sign
  7194                           
  7195                           ; BSR set to: 0
  7196  0038AA  0100               	movlb	0	; () banked
  7197  0038AC  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
  7198  0038AE  0100               	movlb	0	; () banked
  7199  0038B0  1BA0               	xorwf	___ftdiv@sign& (0+255),f,b
  7200                           
  7201                           ; BSR set to: 0
  7202  0038B2  0E80               	movlw	128
  7203  0038B4  0100               	movlb	0	; () banked
  7204  0038B6  17A0               	andwf	___ftdiv@sign& (0+255),f,b
  7205                           
  7206                           ; BSR set to: 0
  7207  0038B8  0100               	movlb	0	; () banked
  7208  0038BA  8F93               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  7209                           
  7210                           ; BSR set to: 0
  7211  0038BC  0EFF               	movlw	255
  7212  0038BE  0100               	movlb	0	; () banked
  7213  0038C0  1792               	andwf	___ftdiv@f1& (0+255),f,b
  7214  0038C2  0EFF               	movlw	255
  7215  0038C4  0100               	movlb	0	; () banked
  7216  0038C6  1793               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  7217  0038C8  0E00               	movlw	0
  7218  0038CA  0100               	movlb	0	; () banked
  7219  0038CC  1794               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  7220                           
  7221                           ; BSR set to: 0
  7222  0038CE  0100               	movlb	0	; () banked
  7223  0038D0  8F96               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  7224                           
  7225                           ; BSR set to: 0
  7226  0038D2  0EFF               	movlw	255
  7227  0038D4  0100               	movlb	0	; () banked
  7228  0038D6  1795               	andwf	___ftdiv@f2& (0+255),f,b
  7229  0038D8  0EFF               	movlw	255
  7230  0038DA  0100               	movlb	0	; () banked
  7231  0038DC  1796               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  7232  0038DE  0E00               	movlw	0
  7233  0038E0  0100               	movlb	0	; () banked
  7234  0038E2  1797               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  7235                           
  7236                           ; BSR set to: 0
  7237  0038E4  0E18               	movlw	24
  7238  0038E6  0100               	movlb	0	; () banked
  7239  0038E8  6F9B               	movwf	___ftdiv@cntr& (0+255),b
  7240  0038EA                     l4186:
  7241                           
  7242                           ; BSR set to: 0
  7243  0038EA  0100               	movlb	0	; () banked
  7244  0038EC  90D8               	bcf	status,0,c
  7245  0038EE  379C               	rlcf	___ftdiv@f3& (0+255),f,b
  7246  0038F0  379D               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  7247  0038F2  379E               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  7248                           
  7249                           ; BSR set to: 0
  7250  0038F4  0100               	movlb	0	; () banked
  7251  0038F6  5195               	movf	___ftdiv@f2& (0+255),w,b
  7252  0038F8  0100               	movlb	0	; () banked
  7253  0038FA  5D92               	subwf	___ftdiv@f1& (0+255),w,b
  7254  0038FC  0100               	movlb	0	; () banked
  7255  0038FE  5196               	movf	(___ftdiv@f2+1)& (0+255),w,b
  7256  003900  0100               	movlb	0	; () banked
  7257  003902  5993               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  7258  003904  0100               	movlb	0	; () banked
  7259  003906  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
  7260  003908  0100               	movlb	0	; () banked
  7261  00390A  5994               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  7262  00390C  A0D8               	btfss	status,0,c
  7263  00390E  D00E               	goto	l730
  7264                           
  7265                           ; BSR set to: 0
  7266  003910  0100               	movlb	0	; () banked
  7267  003912  5195               	movf	___ftdiv@f2& (0+255),w,b
  7268  003914  0100               	movlb	0	; () banked
  7269  003916  5F92               	subwf	___ftdiv@f1& (0+255),f,b
  7270  003918  0100               	movlb	0	; () banked
  7271  00391A  5196               	movf	(___ftdiv@f2+1)& (0+255),w,b
  7272  00391C  0100               	movlb	0	; () banked
  7273  00391E  5B93               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  7274  003920  0100               	movlb	0	; () banked
  7275  003922  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
  7276  003924  0100               	movlb	0	; () banked
  7277  003926  5B94               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  7278                           
  7279                           ; BSR set to: 0
  7280  003928  0100               	movlb	0	; () banked
  7281  00392A  819C               	bsf	___ftdiv@f3& (0+255),0,b
  7282  00392C                     l730:
  7283                           
  7284                           ; BSR set to: 0
  7285  00392C  0100               	movlb	0	; () banked
  7286  00392E  90D8               	bcf	status,0,c
  7287  003930  3792               	rlcf	___ftdiv@f1& (0+255),f,b
  7288  003932  3793               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  7289  003934  3794               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  7290                           
  7291                           ; BSR set to: 0
  7292  003936  0100               	movlb	0	; () banked
  7293  003938  2F9B               	decfsz	___ftdiv@cntr& (0+255),f,b
  7294  00393A  D7D7               	goto	l4186
  7295                           
  7296                           ; BSR set to: 0
  7297                           
  7298                           ; BSR set to: 0
  7299  00393C  C09C  F080         	movff	___ftdiv@f3,___ftpack@arg
  7300  003940  C09D  F081         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7301  003944  C09E  F082         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7302  003948  C09F  F083         	movff	___ftdiv@exp,___ftpack@exp
  7303  00394C  C0A0  F084         	movff	___ftdiv@sign,___ftpack@sign
  7304  003950  EC80  F01E         	call	___ftpack	;wreg free
  7305  003954  C080  F092         	movff	?___ftpack,?___ftdiv
  7306  003958  C081  F093         	movff	?___ftpack+1,?___ftdiv+1
  7307  00395C  C082  F094         	movff	?___ftpack+2,?___ftdiv+2
  7308  003960  0012               	return	
  7309  003962                     __end_of___ftdiv:
  7310                           	opt stack 0
  7311                           tblptru	equ	0xFF8
  7312                           tblptrh	equ	0xFF7
  7313                           tblptrl	equ	0xFF6
  7314                           tablat	equ	0xFF5
  7315                           prodh	equ	0xFF4
  7316                           prodl	equ	0xFF3
  7317                           intcon	equ	0xFF2
  7318                           wreg	equ	0xFE8
  7319                           indf2	equ	0xFDF
  7320                           postinc2	equ	0xFDE
  7321                           postdec2	equ	0xFDD
  7322                           fsr2h	equ	0xFDA
  7323                           fsr2l	equ	0xFD9
  7324                           status	equ	0xFD8
  7325                           
  7326 ;; *************** function ___altoft *****************
  7327 ;; Defined at:
  7328 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  7329 ;; Parameters:    Size  Location     Type
  7330 ;;  c               4    8[BANK0 ] long 
  7331 ;; Auto vars:     Size  Location     Type
  7332 ;;  sign            1   17[BANK0 ] unsigned char 
  7333 ;;  exp             1   16[BANK0 ] unsigned char 
  7334 ;; Return value:  Size  Location     Type
  7335 ;;                  3    8[BANK0 ] float 
  7336 ;; Registers used:
  7337 ;;		wreg, status,2, status,0, cstack
  7338 ;; Tracked objects:
  7339 ;;		On entry : 0/0
  7340 ;;		On exit  : 0/0
  7341 ;;		Unchanged: 0/0
  7342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7343 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7344 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7345 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7346 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7347 ;;Total ram usage:       10 bytes
  7348 ;; Hardware stack levels used:    1
  7349 ;; Hardware stack levels required when called:    7
  7350 ;; This function calls:
  7351 ;;		___ftpack
  7352 ;; This function is called by:
  7353 ;;		_testFrequency
  7354 ;; This function uses a non-reentrant model
  7355 ;;
  7356                           
  7357                           	psect	text23
  7358  004386                     __ptext23:
  7359                           	opt stack 0
  7360  004386                     ___altoft:
  7361                           	opt stack 22
  7362                           
  7363                           ;incstack = 0
  7364  004386  0E00               	movlw	0
  7365  004388  0100               	movlb	0	; () banked
  7366  00438A  6F91               	movwf	___altoft@sign& (0+255),b
  7367  00438C  0E8E               	movlw	142
  7368  00438E  0100               	movlb	0	; () banked
  7369  004390  6F90               	movwf	___altoft@exp& (0+255),b
  7370                           
  7371                           ; BSR set to: 0
  7372  004392  0100               	movlb	0	; () banked
  7373  004394  AF8B               	btfss	(___altoft@c+3)& (0+255),7,b
  7374  004396  D015               	goto	l4148
  7375                           
  7376                           ; BSR set to: 0
  7377  004398  0100               	movlb	0	; () banked
  7378  00439A  1F8B               	comf	(___altoft@c+3)& (0+255),f,b
  7379  00439C  1F8A               	comf	(___altoft@c+2)& (0+255),f,b
  7380  00439E  1F89               	comf	(___altoft@c+1)& (0+255),f,b
  7381  0043A0  6D88               	negf	___altoft@c& (0+255),b
  7382  0043A2  0E00               	movlw	0
  7383  0043A4  2389               	addwfc	(___altoft@c+1)& (0+255),f,b
  7384  0043A6  238A               	addwfc	(___altoft@c+2)& (0+255),f,b
  7385  0043A8  238B               	addwfc	(___altoft@c+3)& (0+255),f,b
  7386                           
  7387                           ; BSR set to: 0
  7388  0043AA  0E01               	movlw	1
  7389  0043AC  0100               	movlb	0	; () banked
  7390  0043AE  6F91               	movwf	___altoft@sign& (0+255),b
  7391                           
  7392                           ; BSR set to: 0
  7393  0043B0  D008               	goto	l4148
  7394  0043B2                     l4146:
  7395                           
  7396                           ; BSR set to: 0
  7397  0043B2  0100               	movlb	0	; () banked
  7398  0043B4  90D8               	bcf	status,0,c
  7399  0043B6  338B               	rrcf	(___altoft@c+3)& (0+255),f,b
  7400  0043B8  338A               	rrcf	(___altoft@c+2)& (0+255),f,b
  7401  0043BA  3389               	rrcf	(___altoft@c+1)& (0+255),f,b
  7402  0043BC  3388               	rrcf	___altoft@c& (0+255),f,b
  7403  0043BE  0100               	movlb	0	; () banked
  7404  0043C0  2B90               	incf	___altoft@exp& (0+255),f,b
  7405  0043C2                     l4148:
  7406                           
  7407                           ; BSR set to: 0
  7408  0043C2  0E00               	movlw	0
  7409  0043C4  0100               	movlb	0	; () banked
  7410  0043C6  1588               	andwf	___altoft@c& (0+255),w,b
  7411  0043C8  0100               	movlb	0	; () banked
  7412  0043CA  6F8C               	movwf	??___altoft& (0+255),b
  7413  0043CC  0E00               	movlw	0
  7414  0043CE  0100               	movlb	0	; () banked
  7415  0043D0  1589               	andwf	(___altoft@c+1)& (0+255),w,b
  7416  0043D2  0100               	movlb	0	; () banked
  7417  0043D4  6F8D               	movwf	(??___altoft+1)& (0+255),b
  7418  0043D6  0E00               	movlw	0
  7419  0043D8  0100               	movlb	0	; () banked
  7420  0043DA  158A               	andwf	(___altoft@c+2)& (0+255),w,b
  7421  0043DC  0100               	movlb	0	; () banked
  7422  0043DE  6F8E               	movwf	(??___altoft+2)& (0+255),b
  7423  0043E0  0EFF               	movlw	255
  7424  0043E2  0100               	movlb	0	; () banked
  7425  0043E4  158B               	andwf	(___altoft@c+3)& (0+255),w,b
  7426  0043E6  0100               	movlb	0	; () banked
  7427  0043E8  6F8F               	movwf	(??___altoft+3)& (0+255),b
  7428  0043EA  0100               	movlb	0	; () banked
  7429  0043EC  518C               	movf	??___altoft& (0+255),w,b
  7430  0043EE  0100               	movlb	0	; () banked
  7431  0043F0  118D               	iorwf	(??___altoft+1)& (0+255),w,b
  7432  0043F2  0100               	movlb	0	; () banked
  7433  0043F4  118E               	iorwf	(??___altoft+2)& (0+255),w,b
  7434  0043F6  0100               	movlb	0	; () banked
  7435  0043F8  118F               	iorwf	(??___altoft+3)& (0+255),w,b
  7436  0043FA  A4D8               	btfss	status,2,c
  7437  0043FC  D7DA               	goto	l4146
  7438                           
  7439                           ; BSR set to: 0
  7440                           
  7441                           ; BSR set to: 0
  7442  0043FE  C088  F080         	movff	___altoft@c,___ftpack@arg
  7443  004402  C089  F081         	movff	___altoft@c+1,___ftpack@arg+1
  7444  004406  C08A  F082         	movff	___altoft@c+2,___ftpack@arg+2
  7445  00440A  C090  F083         	movff	___altoft@exp,___ftpack@exp
  7446  00440E  C091  F084         	movff	___altoft@sign,___ftpack@sign
  7447  004412  EC80  F01E         	call	___ftpack	;wreg free
  7448  004416  C080  F088         	movff	?___ftpack,?___altoft
  7449  00441A  C081  F089         	movff	?___ftpack+1,?___altoft+1
  7450  00441E  C082  F08A         	movff	?___ftpack+2,?___altoft+2
  7451  004422  0012               	return	
  7452  004424                     __end_of___altoft:
  7453                           	opt stack 0
  7454                           tblptru	equ	0xFF8
  7455                           tblptrh	equ	0xFF7
  7456                           tblptrl	equ	0xFF6
  7457                           tablat	equ	0xFF5
  7458                           prodh	equ	0xFF4
  7459                           prodl	equ	0xFF3
  7460                           intcon	equ	0xFF2
  7461                           wreg	equ	0xFE8
  7462                           indf2	equ	0xFDF
  7463                           postinc2	equ	0xFDE
  7464                           postdec2	equ	0xFDD
  7465                           fsr2h	equ	0xFDA
  7466                           fsr2l	equ	0xFD9
  7467                           status	equ	0xFD8
  7468                           
  7469 ;; *************** function ___ftpack *****************
  7470 ;; Defined at:
  7471 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  7472 ;; Parameters:    Size  Location     Type
  7473 ;;  arg             3    0[BANK0 ] unsigned um
  7474 ;;  exp             1    3[BANK0 ] unsigned char 
  7475 ;;  sign            1    4[BANK0 ] unsigned char 
  7476 ;; Auto vars:     Size  Location     Type
  7477 ;;		None
  7478 ;; Return value:  Size  Location     Type
  7479 ;;                  3    0[BANK0 ] float 
  7480 ;; Registers used:
  7481 ;;		wreg, status,2, status,0
  7482 ;; Tracked objects:
  7483 ;;		On entry : 0/0
  7484 ;;		On exit  : 0/0
  7485 ;;		Unchanged: 0/0
  7486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7487 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7489 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7490 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7491 ;;Total ram usage:        8 bytes
  7492 ;; Hardware stack levels used:    1
  7493 ;; Hardware stack levels required when called:    6
  7494 ;; This function calls:
  7495 ;;		Nothing
  7496 ;; This function is called by:
  7497 ;;		___altoft
  7498 ;;		___ftadd
  7499 ;;		___ftdiv
  7500 ;;		___ftmul
  7501 ;;		___lltoft
  7502 ;; This function uses a non-reentrant model
  7503 ;;
  7504                           
  7505                           	psect	text24
  7506  003D00                     __ptext24:
  7507                           	opt stack 0
  7508  003D00                     ___ftpack:
  7509                           	opt stack 20
  7510                           
  7511                           ;incstack = 0
  7512  003D00  0100               	movlb	0	; () banked
  7513  003D02  5183               	movf	___ftpack@exp& (0+255),w,b
  7514  003D04  0100               	movlb	0	; () banked
  7515  003D06  B4D8               	btfsc	status,2,c
  7516  003D08  D008               	goto	l3094
  7517                           
  7518                           ; BSR set to: 0
  7519  003D0A  0100               	movlb	0	; () banked
  7520  003D0C  5180               	movf	___ftpack@arg& (0+255),w,b
  7521  003D0E  0100               	movlb	0	; () banked
  7522  003D10  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  7523  003D12  0100               	movlb	0	; () banked
  7524  003D14  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  7525  003D16  A4D8               	btfss	status,2,c
  7526  003D18  D011               	goto	l3100
  7527  003D1A                     l3094:
  7528                           
  7529                           ; BSR set to: 0
  7530  003D1A  0E00               	movlw	0
  7531  003D1C  0100               	movlb	0	; () banked
  7532  003D1E  6F80               	movwf	?___ftpack& (0+255),b
  7533  003D20  0E00               	movlw	0
  7534  003D22  0100               	movlb	0	; () banked
  7535  003D24  6F81               	movwf	(?___ftpack+1)& (0+255),b
  7536  003D26  0E00               	movlw	0
  7537  003D28  0100               	movlb	0	; () banked
  7538  003D2A  6F82               	movwf	(?___ftpack+2)& (0+255),b
  7539                           
  7540                           ; BSR set to: 0
  7541  003D2C  0012               	return	
  7542  003D2E                     l3098:
  7543                           
  7544                           ; BSR set to: 0
  7545  003D2E  0100               	movlb	0	; () banked
  7546  003D30  2B83               	incf	___ftpack@exp& (0+255),f,b
  7547  003D32  0100               	movlb	0	; () banked
  7548  003D34  90D8               	bcf	status,0,c
  7549  003D36  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  7550  003D38  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  7551  003D3A  3380               	rrcf	___ftpack@arg& (0+255),f,b
  7552  003D3C                     l3100:
  7553                           
  7554                           ; BSR set to: 0
  7555  003D3C  0E00               	movlw	0
  7556  003D3E  0100               	movlb	0	; () banked
  7557  003D40  1580               	andwf	___ftpack@arg& (0+255),w,b
  7558  003D42  0100               	movlb	0	; () banked
  7559  003D44  6F85               	movwf	??___ftpack& (0+255),b
  7560  003D46  0E00               	movlw	0
  7561  003D48  0100               	movlb	0	; () banked
  7562  003D4A  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  7563  003D4C  0100               	movlb	0	; () banked
  7564  003D4E  6F86               	movwf	(??___ftpack+1)& (0+255),b
  7565  003D50  0EFE               	movlw	254
  7566  003D52  0100               	movlb	0	; () banked
  7567  003D54  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  7568  003D56  0100               	movlb	0	; () banked
  7569  003D58  6F87               	movwf	(??___ftpack+2)& (0+255),b
  7570  003D5A  0100               	movlb	0	; () banked
  7571  003D5C  5185               	movf	??___ftpack& (0+255),w,b
  7572  003D5E  0100               	movlb	0	; () banked
  7573  003D60  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  7574  003D62  0100               	movlb	0	; () banked
  7575  003D64  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  7576  003D66  B4D8               	btfsc	status,2,c
  7577  003D68  D011               	goto	l3106
  7578  003D6A  D7E1               	goto	l3098
  7579  003D6C                     l3102:
  7580                           
  7581                           ; BSR set to: 0
  7582  003D6C  0100               	movlb	0	; () banked
  7583  003D6E  2B83               	incf	___ftpack@exp& (0+255),f,b
  7584                           
  7585                           ; BSR set to: 0
  7586  003D70  0E01               	movlw	1
  7587  003D72  0100               	movlb	0	; () banked
  7588  003D74  2780               	addwf	___ftpack@arg& (0+255),f,b
  7589  003D76  0E00               	movlw	0
  7590  003D78  0100               	movlb	0	; () banked
  7591  003D7A  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  7592  003D7C  0E00               	movlw	0
  7593  003D7E  0100               	movlb	0	; () banked
  7594  003D80  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  7595  003D82  0100               	movlb	0	; () banked
  7596  003D84  90D8               	bcf	status,0,c
  7597  003D86  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  7598  003D88  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  7599  003D8A  3380               	rrcf	___ftpack@arg& (0+255),f,b
  7600  003D8C                     l3106:
  7601                           
  7602                           ; BSR set to: 0
  7603  003D8C  0E00               	movlw	0
  7604  003D8E  0100               	movlb	0	; () banked
  7605  003D90  1580               	andwf	___ftpack@arg& (0+255),w,b
  7606  003D92  0100               	movlb	0	; () banked
  7607  003D94  6F85               	movwf	??___ftpack& (0+255),b
  7608  003D96  0E00               	movlw	0
  7609  003D98  0100               	movlb	0	; () banked
  7610  003D9A  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  7611  003D9C  0100               	movlb	0	; () banked
  7612  003D9E  6F86               	movwf	(??___ftpack+1)& (0+255),b
  7613  003DA0  0EFF               	movlw	255
  7614  003DA2  0100               	movlb	0	; () banked
  7615  003DA4  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  7616  003DA6  0100               	movlb	0	; () banked
  7617  003DA8  6F87               	movwf	(??___ftpack+2)& (0+255),b
  7618  003DAA  0100               	movlb	0	; () banked
  7619  003DAC  5185               	movf	??___ftpack& (0+255),w,b
  7620  003DAE  0100               	movlb	0	; () banked
  7621  003DB0  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  7622  003DB2  0100               	movlb	0	; () banked
  7623  003DB4  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  7624  003DB6  B4D8               	btfsc	status,2,c
  7625  003DB8  D008               	goto	l3110
  7626  003DBA  D7D8               	goto	l3102
  7627  003DBC                     l3108:
  7628                           
  7629                           ; BSR set to: 0
  7630  003DBC  0100               	movlb	0	; () banked
  7631  003DBE  0783               	decf	___ftpack@exp& (0+255),f,b
  7632  003DC0  0100               	movlb	0	; () banked
  7633  003DC2  90D8               	bcf	status,0,c
  7634  003DC4  3780               	rlcf	___ftpack@arg& (0+255),f,b
  7635  003DC6  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  7636  003DC8  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  7637  003DCA                     l3110:
  7638                           
  7639                           ; BSR set to: 0
  7640  003DCA  0100               	movlb	0	; () banked
  7641  003DCC  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  7642  003DCE  D004               	goto	l672
  7643                           
  7644                           ; BSR set to: 0
  7645  003DD0  0E02               	movlw	2
  7646  003DD2  0100               	movlb	0	; () banked
  7647  003DD4  6183               	cpfslt	___ftpack@exp& (0+255),b
  7648  003DD6  D7F2               	goto	l3108
  7649  003DD8                     l672:
  7650                           
  7651                           ; BSR set to: 0
  7652  003DD8  0100               	movlb	0	; () banked
  7653  003DDA  B183               	btfsc	___ftpack@exp& (0+255),0,b
  7654  003DDC  D002               	goto	l3116
  7655                           
  7656                           ; BSR set to: 0
  7657  003DDE  0100               	movlb	0	; () banked
  7658  003DE0  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  7659  003DE2                     l3116:
  7660                           
  7661                           ; BSR set to: 0
  7662  003DE2  0100               	movlb	0	; () banked
  7663  003DE4  90D8               	bcf	status,0,c
  7664  003DE6  3383               	rrcf	___ftpack@exp& (0+255),f,b
  7665  003DE8  0100               	movlb	0	; () banked
  7666  003DEA  5183               	movf	___ftpack@exp& (0+255),w,b
  7667  003DEC  0100               	movlb	0	; () banked
  7668  003DEE  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  7669                           
  7670                           ; BSR set to: 0
  7671  003DF0  0100               	movlb	0	; () banked
  7672  003DF2  5184               	movf	___ftpack@sign& (0+255),w,b
  7673  003DF4  0100               	movlb	0	; () banked
  7674  003DF6  B4D8               	btfsc	status,2,c
  7675  003DF8  D002               	goto	l3122
  7676                           
  7677                           ; BSR set to: 0
  7678  003DFA  0100               	movlb	0	; () banked
  7679  003DFC  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  7680  003DFE                     l3122:
  7681                           
  7682                           ; BSR set to: 0
  7683  003DFE  C080  F080         	movff	___ftpack@arg,?___ftpack
  7684  003E02  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  7685  003E06  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  7686  003E0A  0012               	return	
  7687  003E0C                     __end_of___ftpack:
  7688                           	opt stack 0
  7689                           tblptru	equ	0xFF8
  7690                           tblptrh	equ	0xFF7
  7691                           tblptrl	equ	0xFF6
  7692                           tablat	equ	0xFF5
  7693                           prodh	equ	0xFF4
  7694                           prodl	equ	0xFF3
  7695                           intcon	equ	0xFF2
  7696                           wreg	equ	0xFE8
  7697                           indf2	equ	0xFDF
  7698                           postinc2	equ	0xFDE
  7699                           postdec2	equ	0xFDD
  7700                           fsr2h	equ	0xFDA
  7701                           fsr2l	equ	0xFD9
  7702                           status	equ	0xFD8
  7703                           
  7704 ;; *************** function _I2C_Master_Write *****************
  7705 ;; Defined at:
  7706 ;;		line 47 in file "I2C.c"
  7707 ;; Parameters:    Size  Location     Type
  7708 ;;  d               2    1[BANK0 ] unsigned int 
  7709 ;; Auto vars:     Size  Location     Type
  7710 ;;		None
  7711 ;; Return value:  Size  Location     Type
  7712 ;;                  1    wreg      void 
  7713 ;; Registers used:
  7714 ;;		wreg, status,2, status,0, cstack
  7715 ;; Tracked objects:
  7716 ;;		On entry : 0/0
  7717 ;;		On exit  : 0/0
  7718 ;;		Unchanged: 0/0
  7719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7720 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7723 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7724 ;;Total ram usage:        2 bytes
  7725 ;; Hardware stack levels used:    1
  7726 ;; Hardware stack levels required when called:    7
  7727 ;; This function calls:
  7728 ;;		_I2C_Master_Wait
  7729 ;; This function is called by:
  7730 ;;		_testFrequency
  7731 ;; This function uses a non-reentrant model
  7732 ;;
  7733                           
  7734                           	psect	text25
  7735  004C9C                     __ptext25:
  7736                           	opt stack 0
  7737  004C9C                     _I2C_Master_Write:
  7738                           	opt stack 22
  7739                           
  7740                           ;I2C.c: 49: I2C_Master_Wait();
  7741                           
  7742                           ; BSR set to: 0
  7743                           ;incstack = 0
  7744  004C9C  EC44  F026         	call	_I2C_Master_Wait	;wreg free
  7745                           
  7746                           ;I2C.c: 50: SSPBUF = d;
  7747  004CA0  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  7748  004CA4  0012               	return		;funcret
  7749  004CA6                     __end_of_I2C_Master_Write:
  7750                           	opt stack 0
  7751                           tblptru	equ	0xFF8
  7752                           tblptrh	equ	0xFF7
  7753                           tblptrl	equ	0xFF6
  7754                           tablat	equ	0xFF5
  7755                           prodh	equ	0xFF4
  7756                           prodl	equ	0xFF3
  7757                           intcon	equ	0xFF2
  7758                           wreg	equ	0xFE8
  7759                           indf2	equ	0xFDF
  7760                           postinc2	equ	0xFDE
  7761                           postdec2	equ	0xFDD
  7762                           fsr2h	equ	0xFDA
  7763                           fsr2l	equ	0xFD9
  7764                           status	equ	0xFD8
  7765                           
  7766 ;; *************** function _I2C_Master_Stop *****************
  7767 ;; Defined at:
  7768 ;;		line 41 in file "I2C.c"
  7769 ;; Parameters:    Size  Location     Type
  7770 ;;		None
  7771 ;; Auto vars:     Size  Location     Type
  7772 ;;		None
  7773 ;; Return value:  Size  Location     Type
  7774 ;;                  2  253[None  ] int 
  7775 ;; Registers used:
  7776 ;;		wreg, status,2, status,0, cstack
  7777 ;; Tracked objects:
  7778 ;;		On entry : 0/0
  7779 ;;		On exit  : 0/0
  7780 ;;		Unchanged: 0/0
  7781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7786 ;;Total ram usage:        0 bytes
  7787 ;; Hardware stack levels used:    1
  7788 ;; Hardware stack levels required when called:    7
  7789 ;; This function calls:
  7790 ;;		_I2C_Master_Wait
  7791 ;; This function is called by:
  7792 ;;		_testFrequency
  7793 ;; This function uses a non-reentrant model
  7794 ;;
  7795                           
  7796                           	psect	text26
  7797  004CB6                     __ptext26:
  7798                           	opt stack 0
  7799  004CB6                     _I2C_Master_Stop:
  7800                           	opt stack 22
  7801                           
  7802                           ;I2C.c: 43: I2C_Master_Wait();
  7803                           
  7804                           ;incstack = 0
  7805  004CB6  EC44  F026         	call	_I2C_Master_Wait	;wreg free
  7806                           
  7807                           ;I2C.c: 44: PEN = 1;
  7808  004CBA  84C5               	bsf	4037,2,c	;volatile
  7809  004CBC  0012               	return		;funcret
  7810  004CBE                     __end_of_I2C_Master_Stop:
  7811                           	opt stack 0
  7812                           tblptru	equ	0xFF8
  7813                           tblptrh	equ	0xFF7
  7814                           tblptrl	equ	0xFF6
  7815                           tablat	equ	0xFF5
  7816                           prodh	equ	0xFF4
  7817                           prodl	equ	0xFF3
  7818                           intcon	equ	0xFF2
  7819                           wreg	equ	0xFE8
  7820                           indf2	equ	0xFDF
  7821                           postinc2	equ	0xFDE
  7822                           postdec2	equ	0xFDD
  7823                           fsr2h	equ	0xFDA
  7824                           fsr2l	equ	0xFD9
  7825                           status	equ	0xFD8
  7826                           
  7827 ;; *************** function _I2C_Master_Start *****************
  7828 ;; Defined at:
  7829 ;;		line 29 in file "I2C.c"
  7830 ;; Parameters:    Size  Location     Type
  7831 ;;		None
  7832 ;; Auto vars:     Size  Location     Type
  7833 ;;		None
  7834 ;; Return value:  Size  Location     Type
  7835 ;;                  2  249[None  ] int 
  7836 ;; Registers used:
  7837 ;;		wreg, status,2, status,0, cstack
  7838 ;; Tracked objects:
  7839 ;;		On entry : 0/0
  7840 ;;		On exit  : 0/0
  7841 ;;		Unchanged: 0/0
  7842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7847 ;;Total ram usage:        0 bytes
  7848 ;; Hardware stack levels used:    1
  7849 ;; Hardware stack levels required when called:    7
  7850 ;; This function calls:
  7851 ;;		_I2C_Master_Wait
  7852 ;; This function is called by:
  7853 ;;		_testFrequency
  7854 ;; This function uses a non-reentrant model
  7855 ;;
  7856                           
  7857                           	psect	text27
  7858  004CBE                     __ptext27:
  7859                           	opt stack 0
  7860  004CBE                     _I2C_Master_Start:
  7861                           	opt stack 22
  7862                           
  7863                           ;I2C.c: 31: I2C_Master_Wait();
  7864                           
  7865                           ;incstack = 0
  7866  004CBE  EC44  F026         	call	_I2C_Master_Wait	;wreg free
  7867                           
  7868                           ;I2C.c: 32: SEN = 1;
  7869  004CC2  80C5               	bsf	4037,0,c	;volatile
  7870  004CC4  0012               	return		;funcret
  7871  004CC6                     __end_of_I2C_Master_Start:
  7872                           	opt stack 0
  7873                           tblptru	equ	0xFF8
  7874                           tblptrh	equ	0xFF7
  7875                           tblptrl	equ	0xFF6
  7876                           tablat	equ	0xFF5
  7877                           prodh	equ	0xFF4
  7878                           prodl	equ	0xFF3
  7879                           intcon	equ	0xFF2
  7880                           wreg	equ	0xFE8
  7881                           indf2	equ	0xFDF
  7882                           postinc2	equ	0xFDE
  7883                           postdec2	equ	0xFDD
  7884                           fsr2h	equ	0xFDA
  7885                           fsr2l	equ	0xFD9
  7886                           status	equ	0xFD8
  7887                           
  7888 ;; *************** function _I2C_Master_Read *****************
  7889 ;; Defined at:
  7890 ;;		line 53 in file "I2C.c"
  7891 ;; Parameters:    Size  Location     Type
  7892 ;;  a               1    wreg     unsigned char 
  7893 ;; Auto vars:     Size  Location     Type
  7894 ;;  a               1    1[BANK0 ] unsigned char 
  7895 ;;  temp            1    2[BANK0 ] unsigned char 
  7896 ;; Return value:  Size  Location     Type
  7897 ;;                  1    wreg      unsigned char 
  7898 ;; Registers used:
  7899 ;;		wreg, status,2, status,0, cstack
  7900 ;; Tracked objects:
  7901 ;;		On entry : 0/0
  7902 ;;		On exit  : 0/0
  7903 ;;		Unchanged: 0/0
  7904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7906 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7908 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7909 ;;Total ram usage:        2 bytes
  7910 ;; Hardware stack levels used:    1
  7911 ;; Hardware stack levels required when called:    7
  7912 ;; This function calls:
  7913 ;;		_I2C_Master_Wait
  7914 ;; This function is called by:
  7915 ;;		_testFrequency
  7916 ;; This function uses a non-reentrant model
  7917 ;;
  7918                           
  7919                           	psect	text28
  7920  004B4A                     __ptext28:
  7921                           	opt stack 0
  7922  004B4A                     _I2C_Master_Read:
  7923                           	opt stack 22
  7924                           
  7925                           ;incstack = 0
  7926                           ;I2C_Master_Read@a stored from wreg
  7927  004B4A  0100               	movlb	0	; () banked
  7928  004B4C  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  7929                           
  7930                           ;I2C.c: 55: unsigned char temp;
  7931                           ;I2C.c: 56: I2C_Master_Wait();
  7932  004B4E  EC44  F026         	call	_I2C_Master_Wait	;wreg free
  7933                           
  7934                           ;I2C.c: 57: RCEN = 1;
  7935  004B52  86C5               	bsf	4037,3,c	;volatile
  7936                           
  7937                           ;I2C.c: 58: I2C_Master_Wait();
  7938  004B54  EC44  F026         	call	_I2C_Master_Wait	;wreg free
  7939                           
  7940                           ;I2C.c: 59: temp = SSPBUF;
  7941  004B58  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  7942                           
  7943                           ;I2C.c: 60: I2C_Master_Wait();
  7944  004B5C  EC44  F026         	call	_I2C_Master_Wait	;wreg free
  7945                           
  7946                           ;I2C.c: 61: ACKDT = (a)?0:1;
  7947  004B60  0100               	movlb	0	; () banked
  7948  004B62  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  7949  004B64  0100               	movlb	0	; () banked
  7950  004B66  A4D8               	btfss	status,2,c
  7951  004B68  D002               	goto	u4600
  7952  004B6A  8AC5               	bsf	4037,5,c	;volatile
  7953  004B6C  D001               	goto	l4132
  7954  004B6E                     u4600:
  7955  004B6E  9AC5               	bcf	4037,5,c	;volatile
  7956  004B70                     l4132:
  7957                           
  7958                           ;I2C.c: 62: ACKEN = 1;
  7959  004B70  88C5               	bsf	4037,4,c	;volatile
  7960                           
  7961                           ;I2C.c: 63: return temp;
  7962  004B72  0100               	movlb	0	; () banked
  7963  004B74  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  7964  004B76  0012               	return	
  7965  004B78                     __end_of_I2C_Master_Read:
  7966                           	opt stack 0
  7967                           tblptru	equ	0xFF8
  7968                           tblptrh	equ	0xFF7
  7969                           tblptrl	equ	0xFF6
  7970                           tablat	equ	0xFF5
  7971                           prodh	equ	0xFF4
  7972                           prodl	equ	0xFF3
  7973                           intcon	equ	0xFF2
  7974                           wreg	equ	0xFE8
  7975                           indf2	equ	0xFDF
  7976                           postinc2	equ	0xFDE
  7977                           postdec2	equ	0xFDD
  7978                           fsr2h	equ	0xFDA
  7979                           fsr2l	equ	0xFD9
  7980                           status	equ	0xFD8
  7981                           
  7982 ;; *************** function _I2C_Master_Wait *****************
  7983 ;; Defined at:
  7984 ;;		line 24 in file "I2C.c"
  7985 ;; Parameters:    Size  Location     Type
  7986 ;;		None
  7987 ;; Auto vars:     Size  Location     Type
  7988 ;;		None
  7989 ;; Return value:  Size  Location     Type
  7990 ;;                  1    wreg      void 
  7991 ;; Registers used:
  7992 ;;		wreg, status,2, status,0
  7993 ;; Tracked objects:
  7994 ;;		On entry : 0/0
  7995 ;;		On exit  : 0/0
  7996 ;;		Unchanged: 0/0
  7997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8000 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8001 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8002 ;;Total ram usage:        1 bytes
  8003 ;; Hardware stack levels used:    1
  8004 ;; Hardware stack levels required when called:    6
  8005 ;; This function calls:
  8006 ;;		Nothing
  8007 ;; This function is called by:
  8008 ;;		_I2C_Master_Start
  8009 ;;		_I2C_Master_Stop
  8010 ;;		_I2C_Master_Write
  8011 ;;		_I2C_Master_Read
  8012 ;;		_I2C_Master_RepeatedStart
  8013 ;; This function uses a non-reentrant model
  8014 ;;
  8015                           
  8016                           	psect	text29
  8017  004C88                     __ptext29:
  8018                           	opt stack 0
  8019  004C88                     _I2C_Master_Wait:
  8020                           	opt stack 22
  8021  004C88                     l314:
  8022  004C88  B4C7               	btfsc	4039,2,c	;volatile
  8023  004C8A  D7FE               	goto	l314
  8024  004C8C  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8025  004C90  0E1F               	movlw	31
  8026  004C92  0100               	movlb	0	; () banked
  8027  004C94  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8028  004C96  B4D8               	btfsc	status,2,c
  8029  004C98  0012               	return	
  8030  004C9A  D7F6               	goto	l314
  8031  004C9C                     __end_of_I2C_Master_Wait:
  8032                           	opt stack 0
  8033                           tblptru	equ	0xFF8
  8034                           tblptrh	equ	0xFF7
  8035                           tblptrl	equ	0xFF6
  8036                           tablat	equ	0xFF5
  8037                           prodh	equ	0xFF4
  8038                           prodl	equ	0xFF3
  8039                           intcon	equ	0xFF2
  8040                           wreg	equ	0xFE8
  8041                           indf2	equ	0xFDF
  8042                           postinc2	equ	0xFDE
  8043                           postdec2	equ	0xFDD
  8044                           fsr2h	equ	0xFDA
  8045                           fsr2l	equ	0xFD9
  8046                           status	equ	0xFD8
  8047                           
  8048 ;; *************** function _I2C_Master_Init *****************
  8049 ;; Defined at:
  8050 ;;		line 13 in file "I2C.c"
  8051 ;; Parameters:    Size  Location     Type
  8052 ;;  c               4   13[BANK0 ] const unsigned long 
  8053 ;; Auto vars:     Size  Location     Type
  8054 ;;		None
  8055 ;; Return value:  Size  Location     Type
  8056 ;;                  1    wreg      void 
  8057 ;; Registers used:
  8058 ;;		wreg, status,2, status,0, cstack
  8059 ;; Tracked objects:
  8060 ;;		On entry : 0/0
  8061 ;;		On exit  : 0/0
  8062 ;;		Unchanged: 0/0
  8063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8064 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8066 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8067 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8068 ;;Total ram usage:        8 bytes
  8069 ;; Hardware stack levels used:    1
  8070 ;; Hardware stack levels required when called:    7
  8071 ;; This function calls:
  8072 ;;		___lldiv
  8073 ;; This function is called by:
  8074 ;;		_testFrequency
  8075 ;; This function uses a non-reentrant model
  8076 ;;
  8077                           
  8078                           	psect	text30
  8079  004900                     __ptext30:
  8080                           	opt stack 0
  8081  004900                     _I2C_Master_Init:
  8082                           	opt stack 22
  8083                           
  8084                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  8085                           
  8086                           ; BSR set to: 0
  8087                           ;incstack = 0
  8088  004900  0E00               	movlw	0
  8089  004902  6EC7               	movwf	4039,c	;volatile
  8090                           
  8091                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  8092  004904  0E28               	movlw	40
  8093  004906  6EC6               	movwf	4038,c	;volatile
  8094                           
  8095                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  8096  004908  0E00               	movlw	0
  8097  00490A  6EC5               	movwf	4037,c	;volatile
  8098                           
  8099                           ;I2C.c: 19: SSPADD = (8000000/(4*c))-1;
  8100  00490C  0E00               	movlw	0
  8101  00490E  0100               	movlb	0	; () banked
  8102  004910  6F80               	movwf	___lldiv@dividend& (0+255),b
  8103  004912  0E12               	movlw	18
  8104  004914  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  8105  004916  0E7A               	movlw	122
  8106  004918  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  8107  00491A  0E00               	movlw	0
  8108  00491C  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  8109  00491E  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  8110  004922  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  8111  004926  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  8112  00492A  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  8113  00492E  0E02               	movlw	2
  8114  004930                     u4595:
  8115  004930  90D8               	bcf	status,0,c
  8116  004932  0100               	movlb	0	; () banked
  8117  004934  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  8118  004936  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  8119  004938  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  8120  00493A  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  8121  00493C  2EE8               	decfsz	wreg,f,c
  8122  00493E  D7F8               	goto	u4595
  8123  004940  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  8124  004944  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  8125  004948  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  8126  00494C  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  8127  004950  ECBD  F020         	call	___lldiv	;wreg free
  8128  004954  0100               	movlb	0	; () banked
  8129  004956  0580               	decf	?___lldiv& (0+255),w,b
  8130  004958  6EC8               	movwf	4040,c	;volatile
  8131                           
  8132                           ; BSR set to: 0
  8133                           ;I2C.c: 20: TRISC3 = 1;
  8134  00495A  8694               	bsf	3988,3,c	;volatile
  8135                           
  8136                           ; BSR set to: 0
  8137                           ;I2C.c: 21: TRISC4 = 1;
  8138  00495C  8894               	bsf	3988,4,c	;volatile
  8139                           
  8140                           ; BSR set to: 0
  8141  00495E  0012               	return		;funcret
  8142  004960                     __end_of_I2C_Master_Init:
  8143                           	opt stack 0
  8144                           tblptru	equ	0xFF8
  8145                           tblptrh	equ	0xFF7
  8146                           tblptrl	equ	0xFF6
  8147                           tablat	equ	0xFF5
  8148                           prodh	equ	0xFF4
  8149                           prodl	equ	0xFF3
  8150                           intcon	equ	0xFF2
  8151                           wreg	equ	0xFE8
  8152                           indf2	equ	0xFDF
  8153                           postinc2	equ	0xFDE
  8154                           postdec2	equ	0xFDD
  8155                           fsr2h	equ	0xFDA
  8156                           fsr2l	equ	0xFD9
  8157                           status	equ	0xFD8
  8158                           
  8159 ;; *************** function ___lldiv *****************
  8160 ;; Defined at:
  8161 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  8162 ;; Parameters:    Size  Location     Type
  8163 ;;  dividend        4    0[BANK0 ] unsigned long 
  8164 ;;  divisor         4    4[BANK0 ] unsigned long 
  8165 ;; Auto vars:     Size  Location     Type
  8166 ;;  quotient        4    8[BANK0 ] unsigned long 
  8167 ;;  counter         1   12[BANK0 ] unsigned char 
  8168 ;; Return value:  Size  Location     Type
  8169 ;;                  4    0[BANK0 ] unsigned long 
  8170 ;; Registers used:
  8171 ;;		wreg, status,2, status,0
  8172 ;; Tracked objects:
  8173 ;;		On entry : 0/0
  8174 ;;		On exit  : 0/0
  8175 ;;		Unchanged: 0/0
  8176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8177 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8178 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8180 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8181 ;;Total ram usage:       13 bytes
  8182 ;; Hardware stack levels used:    1
  8183 ;; Hardware stack levels required when called:    6
  8184 ;; This function calls:
  8185 ;;		Nothing
  8186 ;; This function is called by:
  8187 ;;		_I2C_Master_Init
  8188 ;;		_printf
  8189 ;; This function uses a non-reentrant model
  8190 ;;
  8191                           
  8192                           	psect	text31
  8193  00417A                     __ptext31:
  8194                           	opt stack 0
  8195  00417A                     ___lldiv:
  8196                           	opt stack 22
  8197                           
  8198                           ; BSR set to: 0
  8199                           ;incstack = 0
  8200  00417A  0E00               	movlw	0
  8201  00417C  0100               	movlb	0	; () banked
  8202  00417E  6F88               	movwf	___lldiv@quotient& (0+255),b
  8203  004180  0E00               	movlw	0
  8204  004182  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  8205  004184  0E00               	movlw	0
  8206  004186  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  8207  004188  0E00               	movlw	0
  8208  00418A  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  8209                           
  8210                           ; BSR set to: 0
  8211  00418C  0100               	movlb	0	; () banked
  8212  00418E  5184               	movf	___lldiv@divisor& (0+255),w,b
  8213  004190  0100               	movlb	0	; () banked
  8214  004192  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  8215  004194  0100               	movlb	0	; () banked
  8216  004196  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  8217  004198  0100               	movlb	0	; () banked
  8218  00419A  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  8219  00419C  B4D8               	btfsc	status,2,c
  8220  00419E  D042               	goto	l814
  8221                           
  8222                           ; BSR set to: 0
  8223  0041A0  0E01               	movlw	1
  8224  0041A2  0100               	movlb	0	; () banked
  8225  0041A4  6F8C               	movwf	___lldiv@counter& (0+255),b
  8226  0041A6  D008               	goto	l3666
  8227  0041A8                     l3664:
  8228                           
  8229                           ; BSR set to: 0
  8230  0041A8  0100               	movlb	0	; () banked
  8231  0041AA  90D8               	bcf	status,0,c
  8232  0041AC  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  8233  0041AE  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  8234  0041B0  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  8235  0041B2  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  8236  0041B4  0100               	movlb	0	; () banked
  8237  0041B6  2B8C               	incf	___lldiv@counter& (0+255),f,b
  8238  0041B8                     l3666:
  8239                           
  8240                           ; BSR set to: 0
  8241  0041B8  0100               	movlb	0	; () banked
  8242  0041BA  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  8243  0041BC  D7F5               	goto	l3664
  8244  0041BE                     l3668:
  8245                           
  8246                           ; BSR set to: 0
  8247  0041BE  0100               	movlb	0	; () banked
  8248  0041C0  90D8               	bcf	status,0,c
  8249  0041C2  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  8250  0041C4  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8251  0041C6  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8252  0041C8  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8253                           
  8254                           ; BSR set to: 0
  8255  0041CA  0100               	movlb	0	; () banked
  8256  0041CC  5184               	movf	___lldiv@divisor& (0+255),w,b
  8257  0041CE  0100               	movlb	0	; () banked
  8258  0041D0  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  8259  0041D2  0100               	movlb	0	; () banked
  8260  0041D4  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8261  0041D6  0100               	movlb	0	; () banked
  8262  0041D8  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  8263  0041DA  0100               	movlb	0	; () banked
  8264  0041DC  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8265  0041DE  0100               	movlb	0	; () banked
  8266  0041E0  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  8267  0041E2  0100               	movlb	0	; () banked
  8268  0041E4  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8269  0041E6  0100               	movlb	0	; () banked
  8270  0041E8  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  8271  0041EA  A0D8               	btfss	status,0,c
  8272  0041EC  D012               	goto	l3676
  8273                           
  8274                           ; BSR set to: 0
  8275  0041EE  0100               	movlb	0	; () banked
  8276  0041F0  5184               	movf	___lldiv@divisor& (0+255),w,b
  8277  0041F2  0100               	movlb	0	; () banked
  8278  0041F4  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  8279  0041F6  0100               	movlb	0	; () banked
  8280  0041F8  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8281  0041FA  0100               	movlb	0	; () banked
  8282  0041FC  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  8283  0041FE  0100               	movlb	0	; () banked
  8284  004200  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8285  004202  0100               	movlb	0	; () banked
  8286  004204  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  8287  004206  0100               	movlb	0	; () banked
  8288  004208  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8289  00420A  0100               	movlb	0	; () banked
  8290  00420C  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  8291                           
  8292                           ; BSR set to: 0
  8293  00420E  0100               	movlb	0	; () banked
  8294  004210  8188               	bsf	___lldiv@quotient& (0+255),0,b
  8295  004212                     l3676:
  8296                           
  8297                           ; BSR set to: 0
  8298  004212  0100               	movlb	0	; () banked
  8299  004214  90D8               	bcf	status,0,c
  8300  004216  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  8301  004218  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  8302  00421A  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  8303  00421C  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  8304                           
  8305                           ; BSR set to: 0
  8306  00421E  0100               	movlb	0	; () banked
  8307  004220  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  8308  004222  D7CD               	goto	l3668
  8309  004224                     l814:
  8310                           
  8311                           ; BSR set to: 0
  8312  004224  C088  F080         	movff	___lldiv@quotient,?___lldiv
  8313  004228  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  8314  00422C  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  8315  004230  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  8316                           
  8317                           ; BSR set to: 0
  8318  004234  0012               	return		;funcret
  8319  004236                     __end_of___lldiv:
  8320                           	opt stack 0
  8321                           tblptru	equ	0xFF8
  8322                           tblptrh	equ	0xFF7
  8323                           tblptrl	equ	0xFF6
  8324                           tablat	equ	0xFF5
  8325                           prodh	equ	0xFF4
  8326                           prodl	equ	0xFF3
  8327                           intcon	equ	0xFF2
  8328                           wreg	equ	0xFE8
  8329                           indf2	equ	0xFDF
  8330                           postinc2	equ	0xFDE
  8331                           postdec2	equ	0xFDD
  8332                           fsr2h	equ	0xFDA
  8333                           fsr2l	equ	0xFD9
  8334                           status	equ	0xFD8
  8335                           
  8336 ;; *************** function _initLCD *****************
  8337 ;; Defined at:
  8338 ;;		line 15 in file "lcd.c"
  8339 ;; Parameters:    Size  Location     Type
  8340 ;;		None
  8341 ;; Auto vars:     Size  Location     Type
  8342 ;;		None
  8343 ;; Return value:  Size  Location     Type
  8344 ;;                  1    wreg      void 
  8345 ;; Registers used:
  8346 ;;		wreg, status,2, status,0, cstack
  8347 ;; Tracked objects:
  8348 ;;		On entry : 0/0
  8349 ;;		On exit  : 0/0
  8350 ;;		Unchanged: 0/0
  8351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8354 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8355 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8356 ;;Total ram usage:        1 bytes
  8357 ;; Hardware stack levels used:    1
  8358 ;; Hardware stack levels required when called:    8
  8359 ;; This function calls:
  8360 ;;		_lcdInst
  8361 ;; This function is called by:
  8362 ;;		_main
  8363 ;; This function uses a non-reentrant model
  8364 ;;
  8365                           
  8366                           	psect	text32
  8367  004A5E                     __ptext32:
  8368                           	opt stack 0
  8369  004A5E                     _initLCD:
  8370                           	opt stack 22
  8371                           
  8372                           ;lcd.c: 17: _delay((unsigned long)((15)*(8000000/4000.0)));
  8373                           
  8374                           ; BSR set to: 0
  8375                           ;incstack = 0
  8376  004A5E  0E27               	movlw	39
  8377  004A60  0100               	movlb	0	; () banked
  8378  004A62  6F84               	movwf	??_initLCD& (0+255),b
  8379  004A64  0EF5               	movlw	245
  8380  004A66                     u5587:
  8381  004A66  2EE8               	decfsz	wreg,f,c
  8382  004A68  D7FE               	bra	u5587
  8383  004A6A  2F84               	decfsz	??_initLCD& (0+255),f,b
  8384  004A6C  D7FC               	bra	u5587
  8385                           
  8386                           ;lcd.c: 18: lcdInst(0b00110011);
  8387  004A6E  0E33               	movlw	51
  8388  004A70  ECBC  F025         	call	_lcdInst
  8389                           
  8390                           ;lcd.c: 19: lcdInst(0b00110010);
  8391  004A74  0E32               	movlw	50
  8392  004A76  ECBC  F025         	call	_lcdInst
  8393                           
  8394                           ;lcd.c: 20: lcdInst(0b00101000);
  8395  004A7A  0E28               	movlw	40
  8396  004A7C  ECBC  F025         	call	_lcdInst
  8397                           
  8398                           ;lcd.c: 21: lcdInst(0b00001111);
  8399  004A80  0E0F               	movlw	15
  8400  004A82  ECBC  F025         	call	_lcdInst
  8401                           
  8402                           ;lcd.c: 22: lcdInst(0b00000110);
  8403  004A86  0E06               	movlw	6
  8404  004A88  ECBC  F025         	call	_lcdInst
  8405                           
  8406                           ;lcd.c: 23: lcdInst(0b00000001);
  8407  004A8C  0E01               	movlw	1
  8408  004A8E  ECBC  F025         	call	_lcdInst
  8409                           
  8410                           ;lcd.c: 24: _delay((unsigned long)((15)*(8000000/4000.0)));
  8411  004A92  0E27               	movlw	39
  8412  004A94  0100               	movlb	0	; () banked
  8413  004A96  6F84               	movwf	??_initLCD& (0+255),b
  8414  004A98  0EF5               	movlw	245
  8415  004A9A                     u5597:
  8416  004A9A  2EE8               	decfsz	wreg,f,c
  8417  004A9C  D7FE               	bra	u5597
  8418  004A9E  2F84               	decfsz	??_initLCD& (0+255),f,b
  8419  004AA0  D7FC               	bra	u5597
  8420  004AA2  0012               	return		;funcret
  8421  004AA4                     __end_of_initLCD:
  8422                           	opt stack 0
  8423                           tblptru	equ	0xFF8
  8424                           tblptrh	equ	0xFF7
  8425                           tblptrl	equ	0xFF6
  8426                           tablat	equ	0xFF5
  8427                           prodh	equ	0xFF4
  8428                           prodl	equ	0xFF3
  8429                           intcon	equ	0xFF2
  8430                           wreg	equ	0xFE8
  8431                           indf2	equ	0xFDF
  8432                           postinc2	equ	0xFDE
  8433                           postdec2	equ	0xFDD
  8434                           fsr2h	equ	0xFDA
  8435                           fsr2l	equ	0xFD9
  8436                           status	equ	0xFD8
  8437                           
  8438 ;; *************** function _lcdInst *****************
  8439 ;; Defined at:
  8440 ;;		line 27 in file "lcd.c"
  8441 ;; Parameters:    Size  Location     Type
  8442 ;;  data            1    wreg     unsigned char 
  8443 ;; Auto vars:     Size  Location     Type
  8444 ;;  data            1    3[BANK0 ] unsigned char 
  8445 ;; Return value:  Size  Location     Type
  8446 ;;                  1    wreg      void 
  8447 ;; Registers used:
  8448 ;;		wreg, status,2, status,0, cstack
  8449 ;; Tracked objects:
  8450 ;;		On entry : 0/0
  8451 ;;		On exit  : 0/0
  8452 ;;		Unchanged: 0/0
  8453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8455 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8456 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8457 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8458 ;;Total ram usage:        2 bytes
  8459 ;; Hardware stack levels used:    1
  8460 ;; Hardware stack levels required when called:    7
  8461 ;; This function calls:
  8462 ;;		_lcdNibble
  8463 ;; This function is called by:
  8464 ;;		_initLCD
  8465 ;;		_lcdNewline
  8466 ;;		_lcdHome
  8467 ;;		_lcdClear
  8468 ;; This function uses a non-reentrant model
  8469 ;;
  8470                           
  8471                           	psect	text33
  8472  004B78                     __ptext33:
  8473                           	opt stack 0
  8474  004B78                     _lcdInst:
  8475                           	opt stack 19
  8476                           
  8477                           ;incstack = 0
  8478                           ;lcdInst@data stored from wreg
  8479  004B78  0100               	movlb	0	; () banked
  8480  004B7A  6F83               	movwf	lcdInst@data& (0+255),b
  8481                           
  8482                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  8483  004B7C  948C               	bcf	3980,2,c	;volatile
  8484                           
  8485                           ;lcd.c: 29: _delay((unsigned long)((140)*(8000000/4000000.0)));
  8486  004B7E  0E5D               	movlw	93
  8487  004B80                     u5607:
  8488  004B80  2EE8               	decfsz	wreg,f,c
  8489  004B82  D7FE               	bra	u5607
  8490  004B84  F000               	nop	
  8491                           
  8492                           ;lcd.c: 30: lcdNibble(data);
  8493  004B86  0100               	movlb	0	; () banked
  8494  004B88  5183               	movf	lcdInst@data& (0+255),w,b
  8495  004B8A  EC19  F024         	call	_lcdNibble
  8496                           
  8497                           ;lcd.c: 31: _delay((unsigned long)((1000)*(8000000/4000000.0)));
  8498  004B8E  0E03               	movlw	3
  8499  004B90  0100               	movlb	0	; () banked
  8500  004B92  6F82               	movwf	??_lcdInst& (0+255),b
  8501  004B94  0E97               	movlw	151
  8502  004B96                     u5617:
  8503  004B96  2EE8               	decfsz	wreg,f,c
  8504  004B98  D7FE               	bra	u5617
  8505  004B9A  2F82               	decfsz	??_lcdInst& (0+255),f,b
  8506  004B9C  D7FC               	bra	u5617
  8507  004B9E  D000               	nop2	
  8508  004BA0  0012               	return		;funcret
  8509  004BA2                     __end_of_lcdInst:
  8510                           	opt stack 0
  8511                           tblptru	equ	0xFF8
  8512                           tblptrh	equ	0xFF7
  8513                           tblptrl	equ	0xFF6
  8514                           tablat	equ	0xFF5
  8515                           prodh	equ	0xFF4
  8516                           prodl	equ	0xFF3
  8517                           intcon	equ	0xFF2
  8518                           wreg	equ	0xFE8
  8519                           indf2	equ	0xFDF
  8520                           postinc2	equ	0xFDE
  8521                           postdec2	equ	0xFDD
  8522                           fsr2h	equ	0xFDA
  8523                           fsr2l	equ	0xFD9
  8524                           status	equ	0xFD8
  8525                           
  8526 ;; *************** function _lcdNibble *****************
  8527 ;; Defined at:
  8528 ;;		line 46 in file "lcd.c"
  8529 ;; Parameters:    Size  Location     Type
  8530 ;;  data            1    wreg     unsigned char 
  8531 ;; Auto vars:     Size  Location     Type
  8532 ;;  data            1    1[BANK0 ] unsigned char 
  8533 ;;  temp            1    0[BANK0 ] unsigned char 
  8534 ;; Return value:  Size  Location     Type
  8535 ;;                  1    wreg      void 
  8536 ;; Registers used:
  8537 ;;		wreg, status,2, status,0
  8538 ;; Tracked objects:
  8539 ;;		On entry : 0/0
  8540 ;;		On exit  : 0/0
  8541 ;;		Unchanged: 0/0
  8542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8544 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8546 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8547 ;;Total ram usage:        2 bytes
  8548 ;; Hardware stack levels used:    1
  8549 ;; Hardware stack levels required when called:    6
  8550 ;; This function calls:
  8551 ;;		Nothing
  8552 ;; This function is called by:
  8553 ;;		_lcdInst
  8554 ;;		_putch
  8555 ;; This function uses a non-reentrant model
  8556 ;;
  8557                           
  8558                           	psect	text34
  8559  004832                     __ptext34:
  8560                           	opt stack 0
  8561  004832                     _lcdNibble:
  8562                           	opt stack 21
  8563                           
  8564                           ;incstack = 0
  8565                           ;lcdNibble@data stored from wreg
  8566  004832  0100               	movlb	0	; () banked
  8567  004834  6F81               	movwf	lcdNibble@data& (0+255),b
  8568                           
  8569                           ;lcd.c: 48: char temp = data & 0xF0;
  8570  004836  0100               	movlb	0	; () banked
  8571  004838  5181               	movf	lcdNibble@data& (0+255),w,b
  8572  00483A  0BF0               	andlw	240
  8573  00483C  0100               	movlb	0	; () banked
  8574  00483E  6F80               	movwf	lcdNibble@temp& (0+255),b
  8575                           
  8576                           ;lcd.c: 49: LATD = LATD & 0x0F;
  8577  004840  508C               	movf	3980,w,c	;volatile
  8578  004842  0B0F               	andlw	15
  8579  004844  6E8C               	movwf	3980,c	;volatile
  8580                           
  8581                           ;lcd.c: 50: LATD = temp | LATD;
  8582  004846  0100               	movlb	0	; () banked
  8583  004848  5180               	movf	lcdNibble@temp& (0+255),w,b
  8584  00484A  108C               	iorwf	3980,w,c	;volatile
  8585  00484C  6E8C               	movwf	3980,c	;volatile
  8586                           
  8587                           ; BSR set to: 0
  8588                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  8589  00484E  968C               	bcf	3980,3,c	;volatile
  8590                           
  8591                           ; BSR set to: 0
  8592                           ;lcd.c: 53: _delay((unsigned long)((600)*(8000000/4000000.0)));
  8593  004850  0EF0               	movlw	240
  8594  004852                     u5627:
  8595  004852  D000               	nop2	
  8596  004854  2EE8               	decfsz	wreg,f,c
  8597  004856  D7FD               	bra	u5627
  8598                           
  8599                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  8600  004858  868C               	bsf	3980,3,c	;volatile
  8601                           
  8602                           ;lcd.c: 55: _delay((unsigned long)((600)*(8000000/4000000.0)));
  8603  00485A  0EF0               	movlw	240
  8604  00485C                     u5637:
  8605  00485C  D000               	nop2	
  8606  00485E  2EE8               	decfsz	wreg,f,c
  8607  004860  D7FD               	bra	u5637
  8608                           
  8609                           ;lcd.c: 58: data = data << 4;
  8610  004862  0100               	movlb	0	; () banked
  8611  004864  3981               	swapf	lcdNibble@data& (0+255),w,b
  8612  004866  0BF0               	andlw	240
  8613  004868  0100               	movlb	0	; () banked
  8614  00486A  6F81               	movwf	lcdNibble@data& (0+255),b
  8615                           
  8616                           ;lcd.c: 60: temp = data & 0xF0;
  8617  00486C  0100               	movlb	0	; () banked
  8618  00486E  5181               	movf	lcdNibble@data& (0+255),w,b
  8619  004870  0BF0               	andlw	240
  8620  004872  0100               	movlb	0	; () banked
  8621  004874  6F80               	movwf	lcdNibble@temp& (0+255),b
  8622                           
  8623                           ;lcd.c: 61: LATD = LATD & 0x0F;
  8624  004876  508C               	movf	3980,w,c	;volatile
  8625  004878  0B0F               	andlw	15
  8626  00487A  6E8C               	movwf	3980,c	;volatile
  8627                           
  8628                           ;lcd.c: 62: LATD = temp | LATD;
  8629  00487C  0100               	movlb	0	; () banked
  8630  00487E  5180               	movf	lcdNibble@temp& (0+255),w,b
  8631  004880  108C               	iorwf	3980,w,c	;volatile
  8632  004882  6E8C               	movwf	3980,c	;volatile
  8633                           
  8634                           ; BSR set to: 0
  8635                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  8636  004884  968C               	bcf	3980,3,c	;volatile
  8637                           
  8638                           ; BSR set to: 0
  8639                           ;lcd.c: 65: _delay((unsigned long)((600)*(8000000/4000000.0)));
  8640  004886  0EF0               	movlw	240
  8641  004888                     u5647:
  8642  004888  D000               	nop2	
  8643  00488A  2EE8               	decfsz	wreg,f,c
  8644  00488C  D7FD               	bra	u5647
  8645                           
  8646                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  8647  00488E  868C               	bsf	3980,3,c	;volatile
  8648                           
  8649                           ;lcd.c: 67: _delay((unsigned long)((600)*(8000000/4000000.0)));
  8650  004890  0EF0               	movlw	240
  8651  004892                     u5657:
  8652  004892  D000               	nop2	
  8653  004894  2EE8               	decfsz	wreg,f,c
  8654  004896  D7FD               	bra	u5657
  8655  004898  0012               	return		;funcret
  8656  00489A                     __end_of_lcdNibble:
  8657                           	opt stack 0
  8658                           tblptru	equ	0xFF8
  8659                           tblptrh	equ	0xFF7
  8660                           tblptrl	equ	0xFF6
  8661                           tablat	equ	0xFF5
  8662                           prodh	equ	0xFF4
  8663                           prodl	equ	0xFF3
  8664                           intcon	equ	0xFF2
  8665                           wreg	equ	0xFE8
  8666                           indf2	equ	0xFDF
  8667                           postinc2	equ	0xFDE
  8668                           postdec2	equ	0xFDD
  8669                           fsr2h	equ	0xFDA
  8670                           fsr2l	equ	0xFD9
  8671                           status	equ	0xFD8
  8672                           
  8673 ;; *************** function _lol *****************
  8674 ;; Defined at:
  8675 ;;		line 66 in file "main.c"
  8676 ;; Parameters:    Size  Location     Type
  8677 ;;		None
  8678 ;; Auto vars:     Size  Location     Type
  8679 ;;		None
  8680 ;; Return value:  Size  Location     Type
  8681 ;;                  1    wreg      void 
  8682 ;; Registers used:
  8683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8684 ;; Tracked objects:
  8685 ;;		On entry : 0/0
  8686 ;;		On exit  : 0/0
  8687 ;;		Unchanged: 0/0
  8688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8691 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8692 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8693 ;;Total ram usage:       14 bytes
  8694 ;; Hardware stack levels used:    1
  8695 ;; Hardware stack levels required when called:    5
  8696 ;; This function calls:
  8697 ;;		i2_printf
  8698 ;; This function is called by:
  8699 ;;		Interrupt level 2
  8700 ;; This function uses a non-reentrant model
  8701 ;;
  8702                           
  8703                           	psect	intcode
  8704  000008                     __pintcode:
  8705                           	opt stack 0
  8706  000008                     _lol:
  8707                           	opt stack 19
  8708                           
  8709                           ;incstack = 0
  8710  000008  8274               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8711  00000A  EDA7  F022         	call	int_func,f	;refresh shadow registers
  8712                           tblptru	equ	0xFF8
  8713                           tblptrh	equ	0xFF7
  8714                           tblptrl	equ	0xFF6
  8715                           tablat	equ	0xFF5
  8716                           prodh	equ	0xFF4
  8717                           prodl	equ	0xFF3
  8718                           intcon	equ	0xFF2
  8719                           wreg	equ	0xFE8
  8720                           indf2	equ	0xFDF
  8721                           postinc2	equ	0xFDE
  8722                           postdec2	equ	0xFDD
  8723                           fsr2h	equ	0xFDA
  8724                           fsr2l	equ	0xFD9
  8725                           status	equ	0xFD8
  8726                           
  8727                           	psect	intcode_body
  8728  00454E                     __pintcode_body:
  8729                           	opt stack 19
  8730  00454E                     int_func:
  8731                           	opt stack 19
  8732  00454E  0006               	pop		; remove dummy address from shadow register refresh
  8733  004550  CFFA F060          	movff	pclath,??_lol
  8734  004554  CFFB F061          	movff	pclatu,??_lol+1
  8735  004558  CFE9 F062          	movff	fsr0l,??_lol+2
  8736  00455C  CFEA F063          	movff	fsr0h,??_lol+3
  8737  004560  CFE1 F064          	movff	fsr1l,??_lol+4
  8738  004564  CFE2 F065          	movff	fsr1h,??_lol+5
  8739  004568  CFD9 F066          	movff	fsr2l,??_lol+6
  8740  00456C  CFDA F067          	movff	fsr2h,??_lol+7
  8741  004570  CFF3 F068          	movff	prodl,??_lol+8
  8742  004574  CFF4 F069          	movff	prodh,??_lol+9
  8743  004578  CFF6 F06A          	movff	tblptrl,??_lol+10
  8744  00457C  CFF7 F06B          	movff	tblptrh,??_lol+11
  8745  004580  CFF8 F06C          	movff	tblptru,??_lol+12
  8746  004584  CFF5 F06D          	movff	tablat,??_lol+13
  8747                           
  8748                           ;main.c: 67: if(TMR0IF){
  8749  004588  A4F2               	btfss	intcon,2,c	;volatile
  8750  00458A  D007               	goto	i2l58
  8751                           
  8752                           ;main.c: 68: printf("out of time");
  8753  00458C  0EC0               	movlw	low STR_4
  8754  00458E  6E40               	movwf	i2printf@f,c
  8755  004590  0E10               	movlw	high STR_4
  8756  004592  6E41               	movwf	i2printf@f+1,c
  8757  004594  EC57  F00C         	call	i2_printf	;wreg free
  8758  004598                     i2l55:
  8759  004598  D7FF               	goto	i2l55
  8760  00459A                     i2l58:
  8761  00459A  C06D  FFF5         	movff	??_lol+13,tablat
  8762  00459E  C06C  FFF8         	movff	??_lol+12,tblptru
  8763  0045A2  C06B  FFF7         	movff	??_lol+11,tblptrh
  8764  0045A6  C06A  FFF6         	movff	??_lol+10,tblptrl
  8765  0045AA  C069  FFF4         	movff	??_lol+9,prodh
  8766  0045AE  C068  FFF3         	movff	??_lol+8,prodl
  8767  0045B2  C067  FFDA         	movff	??_lol+7,fsr2h
  8768  0045B6  C066  FFD9         	movff	??_lol+6,fsr2l
  8769  0045BA  C065  FFE2         	movff	??_lol+5,fsr1h
  8770  0045BE  C064  FFE1         	movff	??_lol+4,fsr1l
  8771  0045C2  C063  FFEA         	movff	??_lol+3,fsr0h
  8772  0045C6  C062  FFE9         	movff	??_lol+2,fsr0l
  8773  0045CA  C061  FFFB         	movff	??_lol+1,pclatu
  8774  0045CE  C060  FFFA         	movff	??_lol,pclath
  8775  0045D2  9274               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8776  0045D4  0011               	retfie		f
  8777  0045D6                     __end_of_lol:
  8778                           	opt stack 0
  8779                           pclatu	equ	0xFFB
  8780                           pclath	equ	0xFFA
  8781                           tblptru	equ	0xFF8
  8782                           tblptrh	equ	0xFF7
  8783                           tblptrl	equ	0xFF6
  8784                           tablat	equ	0xFF5
  8785                           prodh	equ	0xFF4
  8786                           prodl	equ	0xFF3
  8787                           intcon	equ	0xFF2
  8788                           fsr0h	equ	0xFEA
  8789                           fsr0l	equ	0xFE9
  8790                           wreg	equ	0xFE8
  8791                           fsr1h	equ	0xFE2
  8792                           fsr1l	equ	0xFE1
  8793                           indf2	equ	0xFDF
  8794                           postinc2	equ	0xFDE
  8795                           postdec2	equ	0xFDD
  8796                           fsr2h	equ	0xFDA
  8797                           fsr2l	equ	0xFD9
  8798                           status	equ	0xFD8
  8799                           
  8800 ;; *************** function i2_printf *****************
  8801 ;; Defined at:
  8802 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  8803 ;; Parameters:    Size  Location     Type
  8804 ;;  f               2   63[COMRAM] PTR const unsigned char 
  8805 ;;		 -> STR_6(7), STR_5(8), STR_4(12), STR_3(3), 
  8806 ;;		 -> STR_2(2), STR_1(2), 
  8807 ;; Auto vars:     Size  Location     Type
  8808 ;;  printf          4   87[COMRAM] struct .
  8809 ;;  printf          4   81[COMRAM] unsigned long 
  8810 ;;  printf          3   91[COMRAM] unsigned long 
  8811 ;;  printf          3    0        PTR const unsigned char 
  8812 ;;  printf          2   85[COMRAM] int 
  8813 ;;  printf          2   79[COMRAM] int 
  8814 ;;  printf          2   77[COMRAM] unsigned short 
  8815 ;;  printf          2   75[COMRAM] PTR void [1]
  8816 ;;		 -> ?i2_printf(2), ?_printf(2), 
  8817 ;;  printf          2    0        unsigned int 
  8818 ;;  printf          2    0        int 
  8819 ;;  printf          1   94[COMRAM] char 
  8820 ;;  printf          1   74[COMRAM] unsigned char 
  8821 ;;  printf          1    0        unsigned char 
  8822 ;; Return value:  Size  Location     Type
  8823 ;;                  2   63[COMRAM] int 
  8824 ;; Registers used:
  8825 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8826 ;; Tracked objects:
  8827 ;;		On entry : 0/0
  8828 ;;		On exit  : 0/0
  8829 ;;		Unchanged: 0/0
  8830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8831 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8832 ;;      Locals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8833 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8834 ;;      Totals:        32       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8835 ;;Total ram usage:       32 bytes
  8836 ;; Hardware stack levels used:    1
  8837 ;; Hardware stack levels required when called:    4
  8838 ;; This function calls:
  8839 ;;		i2___awdiv
  8840 ;;		i2___ftadd
  8841 ;;		i2___ftge
  8842 ;;		i2___ftmul
  8843 ;;		i2___ftneg
  8844 ;;		i2___ftsub
  8845 ;;		i2___fttol
  8846 ;;		i2___lldiv
  8847 ;;		i2___llmod
  8848 ;;		i2___lltoft
  8849 ;;		i2___wmul
  8850 ;;		i2__div_to_l_
  8851 ;;		i2__tdiv_to_l_
  8852 ;;		i2_fround
  8853 ;;		i2_putch
  8854 ;;		i2_scale
  8855 ;; This function is called by:
  8856 ;;		_lol
  8857 ;; This function uses a non-reentrant model
  8858 ;;
  8859                           
  8860                           	psect	text36
  8861  0018AE                     __ptext36:
  8862                           	opt stack 0
  8863  0018AE                     i2_printf:
  8864                           	opt stack 19
  8865                           
  8866                           ;doprnt.c: 466: va_list ap;
  8867                           ;doprnt.c: 499: signed char c;
  8868                           ;doprnt.c: 501: int width;
  8869                           ;doprnt.c: 504: int prec;
  8870                           ;doprnt.c: 508: unsigned short flag;
  8871                           ;doprnt.c: 515: char d;
  8872                           ;doprnt.c: 516: double fval;
  8873                           ;doprnt.c: 517: int exp;
  8874                           ;doprnt.c: 523: union {
  8875                           ;doprnt.c: 524: unsigned long vd;
  8876                           ;doprnt.c: 525: double integ;
  8877                           ;doprnt.c: 526: } tmpval;
  8878                           ;doprnt.c: 528: unsigned long val;
  8879                           ;doprnt.c: 529: unsigned len;
  8880                           ;doprnt.c: 530: const char * cp;
  8881                           ;doprnt.c: 533: *ap = __va_start();
  8882                           
  8883                           ;incstack = 0
  8884  0018AE  0E42               	movlw	low (?i2_printf+2)
  8885  0018B0  6E4C               	movwf	i2printf@ap,c
  8886  0018B2  0E00               	movlw	high (?i2_printf+2)
  8887  0018B4  6E4D               	movwf	i2printf@ap+1,c
  8888                           
  8889                           ;doprnt.c: 536: while(c = *f++) {
  8890  0018B6  D344               	goto	i2l4790
  8891  0018B8                     i2l4614:
  8892                           
  8893                           ;doprnt.c: 538: if(c != '%')
  8894  0018B8  0E25               	movlw	37
  8895  0018BA  185F               	xorwf	i2printf@c,w,c
  8896  0018BC  B4D8               	btfsc	status,2,c
  8897  0018BE  D004               	goto	i2l4618
  8898                           
  8899                           ;doprnt.c: 540: {
  8900                           ;doprnt.c: 541: (putch(c) );
  8901  0018C0  505F               	movf	i2printf@c,w,c
  8902  0018C2  EC0A  F026         	call	i2_putch
  8903                           
  8904                           ;doprnt.c: 542: continue;
  8905  0018C6  D33C               	goto	i2l4790
  8906  0018C8                     i2l4618:
  8907                           
  8908                           ;doprnt.c: 543: }
  8909                           ;doprnt.c: 548: flag = 0;
  8910  0018C8  0E00               	movlw	0
  8911  0018CA  6E4F               	movwf	i2printf@flag+1,c
  8912  0018CC  0E00               	movlw	0
  8913  0018CE  6E4E               	movwf	i2printf@flag,c
  8914                           
  8915                           ;doprnt.c: 635: switch(c = *f++) {
  8916  0018D0  D002               	goto	i2l4624
  8917  0018D2                     i2l4620:
  8918                           
  8919                           ;doprnt.c: 663: flag |= 0x400;
  8920  0018D2  844F               	bsf	i2printf@flag+1,2,c
  8921                           
  8922                           ;doprnt.c: 723: break;
  8923                           
  8924                           ;doprnt.c: 718: case 'x':
  8925                           
  8926                           ;doprnt.c: 664: break;
  8927  0018D4  D013               	goto	i2l4626
  8928  0018D6                     i2l4624:
  8929  0018D6  C040  FFF6         	movff	i2printf@f,tblptrl
  8930  0018DA  C041  FFF7         	movff	i2printf@f+1,tblptrh
  8931  0018DE  4A40               	infsnz	i2printf@f,f,c
  8932  0018E0  2A41               	incf	i2printf@f+1,f,c
  8933  0018E2                     	if	0	;tblptru may be non-zero
  8934  0018E2                     	endif
  8935  0018E2                     	if	0	;tblptru may be non-zero
  8936  0018E2                     	endif
  8937  0018E2  0008               	tblrd		*
  8938  0018E4  CFF5 F05F          	movff	tablat,i2printf@c
  8939  0018E8  505F               	movf	i2printf@c,w,c
  8940                           
  8941                           ; Switch size 1, requested type "space"
  8942                           ; Number of cases is 3, Range of values is 0 to 120
  8943                           ; switch strategies available:
  8944                           ; Name         Instructions Cycles
  8945                           ; simple_byte           10     6 (average)
  8946                           ;	Chosen strategy is simple_byte
  8947  0018EA  0A00               	xorlw	0	; case 0
  8948  0018EC  B4D8               	btfsc	status,2,c
  8949  0018EE  0012               	return	
  8950  0018F0  0A66               	xorlw	102	; case 102
  8951  0018F2  B4D8               	btfsc	status,2,c
  8952  0018F4  D7EE               	goto	i2l4620
  8953  0018F6  0A1E               	xorlw	30	; case 120
  8954  0018F8  A4D8               	btfss	status,2,c
  8955  0018FA  D322               	goto	i2l4790
  8956  0018FC                     i2l4626:
  8957                           
  8958                           ;doprnt.c: 825: if(flag & (0x700)) {
  8959  0018FC  0E07               	movlw	7
  8960  0018FE  144F               	andwf	i2printf@flag+1,w,c
  8961  001900  B4D8               	btfsc	status,2,c
  8962  001902  D29C               	goto	i2l4758
  8963                           
  8964                           ;doprnt.c: 829: prec = 6;
  8965  001904  0E00               	movlw	0
  8966  001906  6E51               	movwf	i2printf@prec+1,c
  8967  001908  0E06               	movlw	6
  8968  00190A  6E50               	movwf	i2printf@prec,c
  8969                           
  8970                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  8971  00190C  C04C  FFD9         	movff	i2printf@ap,fsr2l
  8972  001910  C04D  FFDA         	movff	i2printf@ap+1,fsr2h
  8973  001914  CFDE F05C          	movff	postinc2,i2printf@fval
  8974  001918  CFDE F05D          	movff	postinc2,i2printf@fval+1
  8975  00191C  CFDD F05E          	movff	postdec2,i2printf@fval+2
  8976  001920  0E03               	movlw	3
  8977  001922  264C               	addwf	i2printf@ap,f,c
  8978  001924  0E00               	movlw	0
  8979  001926  224D               	addwfc	i2printf@ap+1,f,c
  8980                           
  8981                           ;doprnt.c: 831: if(fval < 0.0) {
  8982  001928  AE5E               	btfss	i2printf@fval+2,7,c
  8983  00192A  D010               	goto	i2l4640
  8984                           
  8985                           ;doprnt.c: 832: fval = -fval;
  8986  00192C  C05C  F001         	movff	i2printf@fval,i2___ftneg@f1
  8987  001930  C05D  F002         	movff	i2printf@fval+1,i2___ftneg@f1+1
  8988  001934  C05E  F003         	movff	i2printf@fval+2,i2___ftneg@f1+2
  8989  001938  ECF8  F025         	call	i2___ftneg	;wreg free
  8990  00193C  C001  F05C         	movff	?i2___ftneg,i2printf@fval
  8991  001940  C002  F05D         	movff	?i2___ftneg+1,i2printf@fval+1
  8992  001944  C003  F05E         	movff	?i2___ftneg+2,i2printf@fval+2
  8993                           
  8994                           ;doprnt.c: 833: flag |= 0x03;
  8995  001948  0E03               	movlw	3
  8996  00194A  124E               	iorwf	i2printf@flag,f,c
  8997  00194C                     i2l4640:
  8998                           
  8999                           ;doprnt.c: 834: }
  9000                           ;doprnt.c: 835: exp = 0;
  9001  00194C  0E00               	movlw	0
  9002  00194E  6E57               	movwf	i2printf@exp+1,c
  9003  001950  0E00               	movlw	0
  9004  001952  6E56               	movwf	i2printf@exp,c
  9005                           
  9006                           ;doprnt.c: 836: if( fval!=0) {
  9007  001954  505C               	movf	i2printf@fval,w,c
  9008  001956  105D               	iorwf	i2printf@fval+1,w,c
  9009  001958  105E               	iorwf	i2printf@fval+2,w,c
  9010  00195A  B4D8               	btfsc	status,2,c
  9011  00195C  D083               	goto	i2l4668
  9012                           
  9013                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  9014  00195E  0E82               	movlw	130
  9015  001960  6E42               	movwf	??i2_printf& (0+255),c
  9016  001962  0EFF               	movlw	255
  9017  001964  6E43               	movwf	(??i2_printf+1)& (0+255),c
  9018  001966  C05C  F044         	movff	i2printf@fval,??i2_printf+2
  9019  00196A  C05D  F045         	movff	i2printf@fval+1,??i2_printf+3
  9020  00196E  C05E  F046         	movff	i2printf@fval+2,??i2_printf+4
  9021  001972  C05F  F047         	movff	i2printf@fval+3,??i2_printf+5
  9022  001976  0E10               	movlw	16
  9023  001978  D005               	goto	i2u527_40
  9024  00197A                     i2u527_45:
  9025  00197A  90D8               	bcf	status,0,c
  9026  00197C  3247               	rrcf	??i2_printf+5,f,c
  9027  00197E  3246               	rrcf	??i2_printf+4,f,c
  9028  001980  3245               	rrcf	??i2_printf+3,f,c
  9029  001982  3244               	rrcf	??i2_printf+2,f,c
  9030  001984                     i2u527_40:
  9031  001984  2EE8               	decfsz	wreg,f,c
  9032  001986  D7F9               	goto	i2u527_45
  9033  001988  5044               	movf	??i2_printf+2,w,c
  9034  00198A  2442               	addwf	??i2_printf,w,c
  9035  00198C  6E56               	movwf	i2printf@exp,c
  9036  00198E  0E00               	movlw	0
  9037  001990  2043               	addwfc	??i2_printf+1,w,c
  9038  001992  6E57               	movwf	i2printf@exp+1,c
  9039                           
  9040                           ;doprnt.c: 838: exp--;
  9041  001994  0656               	decf	i2printf@exp,f,c
  9042  001996  A0D8               	btfss	status,0,c
  9043  001998  0657               	decf	i2printf@exp+1,f,c
  9044                           
  9045                           ;doprnt.c: 839: exp *= 3;
  9046  00199A  C056  F00F         	movff	i2printf@exp,i2___wmul@multiplier
  9047  00199E  C057  F010         	movff	i2printf@exp+1,i2___wmul@multiplier+1
  9048  0019A2  0E00               	movlw	0
  9049  0019A4  6E12               	movwf	i2___wmul@multiplicand+1,c
  9050  0019A6  0E03               	movlw	3
  9051  0019A8  6E11               	movwf	i2___wmul@multiplicand,c
  9052  0019AA  ECE5  F025         	call	i2___wmul	;wreg free
  9053  0019AE  C00F  F056         	movff	?i2___wmul,i2printf@exp
  9054  0019B2  C010  F057         	movff	?i2___wmul+1,i2printf@exp+1
  9055                           
  9056                           ;doprnt.c: 840: exp /= 10;
  9057  0019B6  C056  F007         	movff	i2printf@exp,i2___awdiv@dividend
  9058  0019BA  C057  F008         	movff	i2printf@exp+1,i2___awdiv@dividend+1
  9059  0019BE  0E00               	movlw	0
  9060  0019C0  6E0A               	movwf	i2___awdiv@divisor+1,c
  9061  0019C2  0E0A               	movlw	10
  9062  0019C4  6E09               	movwf	i2___awdiv@divisor,c
  9063  0019C6  ECEB  F022         	call	i2___awdiv	;wreg free
  9064  0019CA  C007  F056         	movff	?i2___awdiv,i2printf@exp
  9065  0019CE  C008  F057         	movff	?i2___awdiv+1,i2printf@exp+1
  9066                           
  9067                           ;doprnt.c: 841: if(exp < 0)
  9068  0019D2  AE57               	btfss	i2printf@exp+1,7,c
  9069  0019D4  D003               	goto	i2l4656
  9070                           
  9071                           ;doprnt.c: 842: exp--;
  9072  0019D6  0656               	decf	i2printf@exp,f,c
  9073  0019D8  A0D8               	btfss	status,0,c
  9074  0019DA  0657               	decf	i2printf@exp+1,f,c
  9075  0019DC                     i2l4656:
  9076                           
  9077                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  9078  0019DC  5056               	movf	i2printf@exp,w,c
  9079  0019DE  0800               	sublw	0
  9080  0019E0  EC04  F012         	call	i2_scale
  9081  0019E4  C024  F058         	movff	?i2_scale,i2printf@tmpval
  9082  0019E8  C025  F059         	movff	?i2_scale+1,i2printf@tmpval+1
  9083  0019EC  C026  F05A         	movff	?i2_scale+2,i2printf@tmpval+2
  9084                           
  9085                           ;doprnt.c: 847: tmpval.integ *= fval;
  9086  0019F0  C058  F015         	movff	i2printf@tmpval,i2___ftmul@f1
  9087  0019F4  C059  F016         	movff	i2printf@tmpval+1,i2___ftmul@f1+1
  9088  0019F8  C05A  F017         	movff	i2printf@tmpval+2,i2___ftmul@f1+2
  9089  0019FC  C05C  F018         	movff	i2printf@fval,i2___ftmul@f2
  9090  001A00  C05D  F019         	movff	i2printf@fval+1,i2___ftmul@f2+1
  9091  001A04  C05E  F01A         	movff	i2printf@fval+2,i2___ftmul@f2+2
  9092  001A08  EC06  F01F         	call	i2___ftmul	;wreg free
  9093  001A0C  C015  F058         	movff	?i2___ftmul,i2printf@tmpval
  9094  001A10  C016  F059         	movff	?i2___ftmul+1,i2printf@tmpval+1
  9095  001A14  C017  F05A         	movff	?i2___ftmul+2,i2printf@tmpval+2
  9096                           
  9097                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  9098  001A18  C058  F001         	movff	i2printf@tmpval,i2___ftge@ff1
  9099  001A1C  C059  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
  9100  001A20  C05A  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
  9101  001A24  0E00               	movlw	0
  9102  001A26  6E04               	movwf	i2___ftge@ff2,c
  9103  001A28  0E80               	movlw	128
  9104  001A2A  6E05               	movwf	i2___ftge@ff2+1,c
  9105  001A2C  0E3F               	movlw	63
  9106  001A2E  6E06               	movwf	i2___ftge@ff2+2,c
  9107  001A30  EC5F  F022         	call	i2___ftge	;wreg free
  9108  001A34  B0D8               	btfsc	status,0,c
  9109  001A36  D004               	goto	i2l4664
  9110                           
  9111                           ;doprnt.c: 849: exp--;
  9112  001A38  0656               	decf	i2printf@exp,f,c
  9113  001A3A  A0D8               	btfss	status,0,c
  9114  001A3C  0657               	decf	i2printf@exp+1,f,c
  9115  001A3E  D012               	goto	i2l4668
  9116  001A40                     i2l4664:
  9117                           
  9118                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  9119  001A40  C058  F001         	movff	i2printf@tmpval,i2___ftge@ff1
  9120  001A44  C059  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
  9121  001A48  C05A  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
  9122  001A4C  0E00               	movlw	0
  9123  001A4E  6E04               	movwf	i2___ftge@ff2,c
  9124  001A50  0E20               	movlw	32
  9125  001A52  6E05               	movwf	i2___ftge@ff2+1,c
  9126  001A54  0E41               	movlw	65
  9127  001A56  6E06               	movwf	i2___ftge@ff2+2,c
  9128  001A58  EC5F  F022         	call	i2___ftge	;wreg free
  9129  001A5C  A0D8               	btfss	status,0,c
  9130  001A5E  D002               	goto	i2l4668
  9131                           
  9132                           ;doprnt.c: 851: exp++;
  9133  001A60  4A56               	infsnz	i2printf@exp,f,c
  9134  001A62  2A57               	incf	i2printf@exp+1,f,c
  9135  001A64                     i2l4668:
  9136                           
  9137                           ;doprnt.c: 852: }
  9138                           ;doprnt.c: 1112: if(prec <= 12)
  9139  001A64  BE51               	btfsc	i2printf@prec+1,7,c
  9140  001A66  D006               	goto	i2l4670
  9141  001A68  5051               	movf	i2printf@prec+1,w,c
  9142  001A6A  E11B               	bnz	i2l4672
  9143  001A6C  0E0D               	movlw	13
  9144  001A6E  5C50               	subwf	i2printf@prec,w,c
  9145  001A70  B0D8               	btfsc	status,0,c
  9146  001A72  D017               	goto	i2l4672
  9147  001A74                     i2l4670:
  9148                           
  9149                           ;doprnt.c: 1113: fval += fround(prec);
  9150  001A74  C05C  F02E         	movff	i2printf@fval,i2___ftadd@f1
  9151  001A78  C05D  F02F         	movff	i2printf@fval+1,i2___ftadd@f1+1
  9152  001A7C  C05E  F030         	movff	i2printf@fval+2,i2___ftadd@f1+2
  9153  001A80  5050               	movf	i2printf@prec,w,c
  9154  001A82  ECD0  F017         	call	i2_fround
  9155  001A86  C024  F031         	movff	?i2_fround,i2___ftadd@f2
  9156  001A8A  C025  F032         	movff	?i2_fround+1,i2___ftadd@f2+1
  9157  001A8E  C026  F033         	movff	?i2_fround+2,i2___ftadd@f2+2
  9158  001A92  ECF3  F018         	call	i2___ftadd	;wreg free
  9159  001A96  C02E  F05C         	movff	?i2___ftadd,i2printf@fval
  9160  001A9A  C02F  F05D         	movff	?i2___ftadd+1,i2printf@fval+1
  9161  001A9E  C030  F05E         	movff	?i2___ftadd+2,i2printf@fval+2
  9162  001AA2                     i2l4672:
  9163                           
  9164                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  9165  001AA2  BE57               	btfsc	i2printf@exp+1,7,c
  9166  001AA4  D006               	goto	i2l4674
  9167  001AA6  5057               	movf	i2printf@exp+1,w,c
  9168  001AA8  E11E               	bnz	i2l4680
  9169  001AAA  0E0A               	movlw	10
  9170  001AAC  5C56               	subwf	i2printf@exp,w,c
  9171  001AAE  B0D8               	btfsc	status,0,c
  9172  001AB0  D01A               	goto	i2l4680
  9173  001AB2                     i2l4674:
  9174  001AB2  505C               	movf	i2printf@fval,w,c
  9175  001AB4  105D               	iorwf	i2printf@fval+1,w,c
  9176  001AB6  105E               	iorwf	i2printf@fval+2,w,c
  9177  001AB8  B4D8               	btfsc	status,2,c
  9178  001ABA  D051               	goto	i2l4694
  9179  001ABC  C05C  F02B         	movff	i2printf@fval,i2___fttol@f1
  9180  001AC0  C05D  F02C         	movff	i2printf@fval+1,i2___fttol@f1+1
  9181  001AC4  C05E  F02D         	movff	i2printf@fval+2,i2___fttol@f1+2
  9182  001AC8  EC80  F01F         	call	i2___fttol	;wreg free
  9183  001ACC  502B               	movf	?i2___fttol,w,c
  9184  001ACE  102C               	iorwf	?i2___fttol+1,w,c
  9185  001AD0  102D               	iorwf	?i2___fttol+2,w,c
  9186  001AD2  102E               	iorwf	?i2___fttol+3,w,c
  9187  001AD4  B4D8               	btfsc	status,2,c
  9188  001AD6  BE57               	btfsc	i2printf@exp+1,7,c
  9189  001AD8  D042               	goto	i2l4694
  9190  001ADA  5057               	movf	i2printf@exp+1,w,c
  9191  001ADC  E104               	bnz	i2l4680
  9192  001ADE  0E02               	movlw	2
  9193  001AE0  5C56               	subwf	i2printf@exp,w,c
  9194  001AE2  A0D8               	btfss	status,0,c
  9195  001AE4  D03C               	goto	i2l4694
  9196  001AE6                     i2l4680:
  9197                           
  9198                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  9199  001AE6  C058  F001         	movff	i2printf@tmpval,i2___ftge@ff1
  9200  001AEA  C059  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
  9201  001AEE  C05A  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
  9202  001AF2  0E70               	movlw	112
  9203  001AF4  6E04               	movwf	i2___ftge@ff2,c
  9204  001AF6  0E89               	movlw	137
  9205  001AF8  6E05               	movwf	i2___ftge@ff2+1,c
  9206  001AFA  0E40               	movlw	64
  9207  001AFC  6E06               	movwf	i2___ftge@ff2+2,c
  9208  001AFE  EC5F  F022         	call	i2___ftge	;wreg free
  9209  001B02  B0D8               	btfsc	status,0,c
  9210  001B04  D002               	goto	i2l4684
  9211                           
  9212                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  9213  001B06  0EF7               	movlw	247
  9214  001B08  D001               	goto	L5
  9215  001B0A                     i2l4684:
  9216                           
  9217                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  9218  001B0A  0EF8               	movlw	248
  9219  001B0C                     L5:
  9220  001B0C  2656               	addwf	i2printf@exp,f,c
  9221  001B0E  0EFF               	movlw	255
  9222  001B10  2257               	addwfc	i2printf@exp+1,f,c
  9223                           
  9224                           ;doprnt.c: 1124: }
  9225                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  9226  001B12  5056               	movf	i2printf@exp,w,c
  9227  001B14  EC04  F012         	call	i2_scale
  9228  001B18  C024  F058         	movff	?i2_scale,i2printf@tmpval
  9229  001B1C  C025  F059         	movff	?i2_scale+1,i2printf@tmpval+1
  9230  001B20  C026  F05A         	movff	?i2_scale+2,i2printf@tmpval+2
  9231                           
  9232                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  9233  001B24  C05C  F001         	movff	i2printf@fval,i2__tdiv_to_l_@f1
  9234  001B28  C05D  F002         	movff	i2printf@fval+1,i2__tdiv_to_l_@f1+1
  9235  001B2C  C05E  F003         	movff	i2printf@fval+2,i2__tdiv_to_l_@f1+2
  9236  001B30  C058  F004         	movff	i2printf@tmpval,i2__tdiv_to_l_@f2
  9237  001B34  C059  F005         	movff	i2printf@tmpval+1,i2__tdiv_to_l_@f2+1
  9238  001B38  C05A  F006         	movff	i2printf@tmpval+2,i2__tdiv_to_l_@f2+2
  9239  001B3C  EC53  F01D         	call	i2__tdiv_to_l_	;wreg free
  9240  001B40  C001  F052         	movff	?i2__tdiv_to_l_,i2printf@val
  9241  001B44  C002  F053         	movff	?i2__tdiv_to_l_+1,i2printf@val+1
  9242  001B48  C003  F054         	movff	?i2__tdiv_to_l_+2,i2printf@val+2
  9243  001B4C  C004  F055         	movff	?i2__tdiv_to_l_+3,i2printf@val+3
  9244                           
  9245                           ;doprnt.c: 1129: fval = 0.0;
  9246  001B50  0E00               	movlw	0
  9247  001B52  6E5C               	movwf	i2printf@fval,c
  9248  001B54  0E00               	movlw	0
  9249  001B56  6E5D               	movwf	i2printf@fval+1,c
  9250  001B58  0E00               	movlw	0
  9251  001B5A  6E5E               	movwf	i2printf@fval+2,c
  9252                           
  9253                           ;doprnt.c: 1130: } else {
  9254  001B5C  D032               	goto	i2l4698
  9255  001B5E                     i2l4694:
  9256                           
  9257                           ;doprnt.c: 1131: val = (unsigned long)fval;
  9258  001B5E  C05C  F02B         	movff	i2printf@fval,i2___fttol@f1
  9259  001B62  C05D  F02C         	movff	i2printf@fval+1,i2___fttol@f1+1
  9260  001B66  C05E  F02D         	movff	i2printf@fval+2,i2___fttol@f1+2
  9261  001B6A  EC80  F01F         	call	i2___fttol	;wreg free
  9262  001B6E  C02B  F052         	movff	?i2___fttol,i2printf@val
  9263  001B72  C02C  F053         	movff	?i2___fttol+1,i2printf@val+1
  9264  001B76  C02D  F054         	movff	?i2___fttol+2,i2printf@val+2
  9265  001B7A  C02E  F055         	movff	?i2___fttol+3,i2printf@val+3
  9266                           
  9267                           ;doprnt.c: 1132: fval -= (double)val;
  9268  001B7E  C05C  F03A         	movff	i2printf@fval,i2___ftsub@f1
  9269  001B82  C05D  F03B         	movff	i2printf@fval+1,i2___ftsub@f1+1
  9270  001B86  C05E  F03C         	movff	i2printf@fval+2,i2___ftsub@f1+2
  9271  001B8A  C052  F009         	movff	i2printf@val,i2___lltoft@c
  9272  001B8E  C053  F00A         	movff	i2printf@val+1,i2___lltoft@c+1
  9273  001B92  C054  F00B         	movff	i2printf@val+2,i2___lltoft@c+2
  9274  001B96  C055  F00C         	movff	i2printf@val+3,i2___lltoft@c+3
  9275  001B9A  ECB0  F024         	call	i2___lltoft	;wreg free
  9276  001B9E  C009  F03D         	movff	?i2___lltoft,i2___ftsub@f2
  9277  001BA2  C00A  F03E         	movff	?i2___lltoft+1,i2___ftsub@f2+1
  9278  001BA6  C00B  F03F         	movff	?i2___lltoft+2,i2___ftsub@f2+2
  9279  001BAA  EC52  F025         	call	i2___ftsub	;wreg free
  9280  001BAE  C03A  F05C         	movff	?i2___ftsub,i2printf@fval
  9281  001BB2  C03B  F05D         	movff	?i2___ftsub+1,i2printf@fval+1
  9282  001BB6  C03C  F05E         	movff	?i2___ftsub+2,i2printf@fval+2
  9283                           
  9284                           ;doprnt.c: 1133: exp = 0;
  9285  001BBA  0E00               	movlw	0
  9286  001BBC  6E57               	movwf	i2printf@exp+1,c
  9287  001BBE  0E00               	movlw	0
  9288  001BC0  6E56               	movwf	i2printf@exp,c
  9289  001BC2                     i2l4698:
  9290                           
  9291                           ;doprnt.c: 1134: }
  9292                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  9293  001BC2  0E01               	movlw	1
  9294  001BC4  6E5F               	movwf	i2printf@c,c
  9295  001BC6                     i2l4700:
  9296  001BC6  0E0A               	movlw	10
  9297  001BC8  185F               	xorwf	i2printf@c,w,c
  9298  001BCA  B4D8               	btfsc	status,2,c
  9299  001BCC  D018               	goto	i2l4712
  9300                           
  9301                           ;doprnt.c: 1137: if(val < dpowers[c])
  9302  001BCE  505F               	movf	i2printf@c,w,c
  9303  001BD0  0D04               	mullw	4
  9304  001BD2  0E01               	movlw	low _dpowers
  9305  001BD4  24F3               	addwf	prodl,w,c
  9306  001BD6  6EF6               	movwf	tblptrl,c
  9307  001BD8  0E10               	movlw	high _dpowers
  9308  001BDA  20F4               	addwfc	prodh,w,c
  9309  001BDC  6EF7               	movwf	tblptrh,c
  9310  001BDE                     	if	0	;There are less than 3 active tblptr bytes
  9311  001BDE                     	endif
  9312  001BDE  0009               	tblrd		*+
  9313  001BE0  50F5               	movf	tablat,w,c
  9314  001BE2  5C52               	subwf	i2printf@val,w,c
  9315  001BE4  0009               	tblrd		*+
  9316  001BE6  50F5               	movf	tablat,w,c
  9317  001BE8  5853               	subwfb	i2printf@val+1,w,c
  9318  001BEA  0009               	tblrd		*+
  9319  001BEC  50F5               	movf	tablat,w,c
  9320  001BEE  5854               	subwfb	i2printf@val+2,w,c
  9321  001BF0  0009               	tblrd		*+
  9322  001BF2  50F5               	movf	tablat,w,c
  9323  001BF4  5855               	subwfb	i2printf@val+3,w,c
  9324  001BF6  A0D8               	btfss	status,0,c
  9325  001BF8  D002               	goto	i2l4712
  9326                           
  9327                           ;doprnt.c: 1138: break;
  9328  001BFA  2A5F               	incf	i2printf@c,f,c
  9329  001BFC  D7E4               	goto	i2l4700
  9330  001BFE                     i2l4712:
  9331                           
  9332                           ;doprnt.c: 1175: {
  9333                           ;doprnt.c: 1188: if(flag & 0x03)
  9334  001BFE  0E03               	movlw	3
  9335  001C00  144E               	andwf	i2printf@flag,w,c
  9336  001C02  6E42               	movwf	??i2_printf& (0+255),c
  9337  001C04  0E00               	movlw	0
  9338  001C06  144F               	andwf	i2printf@flag+1,w,c
  9339  001C08  6E43               	movwf	(??i2_printf+1)& (0+255),c
  9340  001C0A  5042               	movf	??i2_printf,w,c
  9341  001C0C  1043               	iorwf	??i2_printf+1,w,c
  9342  001C0E  B4D8               	btfsc	status,2,c
  9343  001C10  D048               	goto	i2l4722
  9344                           
  9345                           ;doprnt.c: 1190: (putch('-') );
  9346  001C12  0E2D               	movlw	45
  9347  001C14  EC0A  F026         	call	i2_putch
  9348                           
  9349                           ;doprnt.c: 1195: }
  9350                           ;doprnt.c: 1196: while(c--) {
  9351  001C18  D044               	goto	i2l4722
  9352  001C1A                     i2l4716:
  9353                           
  9354                           ;doprnt.c: 1200: {
  9355                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  9356  001C1A  C052  F001         	movff	i2printf@val,i2___lldiv@dividend
  9357  001C1E  C053  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
  9358  001C22  C054  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
  9359  001C26  C055  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
  9360  001C2A  505F               	movf	i2printf@c,w,c
  9361  001C2C  0D04               	mullw	4
  9362  001C2E  0E01               	movlw	low _dpowers
  9363  001C30  24F3               	addwf	prodl,w,c
  9364  001C32  6EF6               	movwf	tblptrl,c
  9365  001C34  0E10               	movlw	high _dpowers
  9366  001C36  20F4               	addwfc	prodh,w,c
  9367  001C38  6EF7               	movwf	tblptrh,c
  9368  001C3A                     	if	0	;There are less than 3 active tblptr bytes
  9369  001C3A                     	endif
  9370  001C3A  0009               	tblrd		*+
  9371  001C3C  CFF5 F005          	movff	tablat,i2___lldiv@divisor
  9372  001C40  0009               	tblrd		*+
  9373  001C42  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
  9374  001C46  0009               	tblrd		*+
  9375  001C48  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
  9376  001C4C  000A               	tblrd		*-
  9377  001C4E  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
  9378  001C52  EC2D  F023         	call	i2___lldiv	;wreg free
  9379  001C56  C001  F058         	movff	?i2___lldiv,i2printf@tmpval
  9380  001C5A  C002  F059         	movff	?i2___lldiv+1,i2printf@tmpval+1
  9381  001C5E  C003  F05A         	movff	?i2___lldiv+2,i2printf@tmpval+2
  9382  001C62  C004  F05B         	movff	?i2___lldiv+3,i2printf@tmpval+3
  9383                           
  9384                           ;doprnt.c: 1202: tmpval.vd %= 10;
  9385  001C66  C058  F001         	movff	i2printf@tmpval,i2___llmod@dividend
  9386  001C6A  C059  F002         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
  9387  001C6E  C05A  F003         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
  9388  001C72  C05B  F004         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
  9389  001C76  0E0A               	movlw	10
  9390  001C78  6E05               	movwf	i2___llmod@divisor,c
  9391  001C7A  0E00               	movlw	0
  9392  001C7C  6E06               	movwf	i2___llmod@divisor+1,c
  9393  001C7E  0E00               	movlw	0
  9394  001C80  6E07               	movwf	i2___llmod@divisor+2,c
  9395  001C82  0E00               	movlw	0
  9396  001C84  6E08               	movwf	i2___llmod@divisor+3,c
  9397  001C86  EC4D  F024         	call	i2___llmod	;wreg free
  9398  001C8A  C001  F058         	movff	?i2___llmod,i2printf@tmpval
  9399  001C8E  C002  F059         	movff	?i2___llmod+1,i2printf@tmpval+1
  9400  001C92  C003  F05A         	movff	?i2___llmod+2,i2printf@tmpval+2
  9401  001C96  C004  F05B         	movff	?i2___llmod+3,i2printf@tmpval+3
  9402                           
  9403                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  9404  001C9A  5058               	movf	i2printf@tmpval,w,c
  9405  001C9C  0F30               	addlw	48
  9406  001C9E  EC0A  F026         	call	i2_putch
  9407  001CA2                     i2l4722:
  9408  001CA2  065F               	decf	i2printf@c,f,c
  9409  001CA4  285F               	incf	i2printf@c,w,c
  9410  001CA6  B4D8               	btfsc	status,2,c
  9411  001CA8  D007               	goto	i2l4728
  9412  001CAA  D7B7               	goto	i2l4716
  9413  001CAC                     i2l4724:
  9414                           
  9415                           ;doprnt.c: 1208: (putch('0') );
  9416  001CAC  0E30               	movlw	48
  9417  001CAE  EC0A  F026         	call	i2_putch
  9418                           
  9419                           ;doprnt.c: 1209: exp--;
  9420  001CB2  0656               	decf	i2printf@exp,f,c
  9421  001CB4  A0D8               	btfss	status,0,c
  9422  001CB6  0657               	decf	i2printf@exp+1,f,c
  9423  001CB8                     i2l4728:
  9424  001CB8  BE57               	btfsc	i2printf@exp+1,7,c
  9425  001CBA  D005               	goto	i2l4730
  9426  001CBC  5057               	movf	i2printf@exp+1,w,c
  9427  001CBE  E1F6               	bnz	i2l4724
  9428  001CC0  0456               	decf	i2printf@exp,w,c
  9429  001CC2  B0D8               	btfsc	status,0,c
  9430  001CC4  D7F3               	goto	i2l4724
  9431  001CC6                     i2l4730:
  9432                           
  9433                           ;doprnt.c: 1210: }
  9434                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  9435  001CC6  BE51               	btfsc	i2printf@prec+1,7,c
  9436  001CC8  D009               	goto	i2l413
  9437  001CCA  5051               	movf	i2printf@prec+1,w,c
  9438  001CCC  E104               	bnz	i2u543_40
  9439  001CCE  0E09               	movlw	9
  9440  001CD0  5C50               	subwf	i2printf@prec,w,c
  9441  001CD2  A0D8               	btfss	status,0,c
  9442  001CD4  D003               	goto	i2l413
  9443  001CD6                     i2u543_40:
  9444                           
  9445                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  9446  001CD6  0E08               	movlw	8
  9447  001CD8  6E5F               	movwf	i2printf@c,c
  9448  001CDA  D002               	goto	i2l4734
  9449  001CDC                     i2l413:
  9450                           
  9451                           ;doprnt.c: 1213: else
  9452                           ;doprnt.c: 1214: c = prec;
  9453  001CDC  C050  F05F         	movff	i2printf@prec,i2printf@c
  9454  001CE0                     i2l4734:
  9455                           
  9456                           ;doprnt.c: 1215: prec -= c;
  9457  001CE0  505F               	movf	i2printf@c,w,c
  9458  001CE2  5E50               	subwf	i2printf@prec,f,c
  9459  001CE4  0E00               	movlw	0
  9460  001CE6  BE5F               	btfsc	i2printf@c,7,c
  9461  001CE8  0EFF               	movlw	255
  9462  001CEA  5A51               	subwfb	i2printf@prec+1,f,c
  9463                           
  9464                           ;doprnt.c: 1219: if(c)
  9465  001CEC  505F               	movf	i2printf@c,w,c
  9466  001CEE  B4D8               	btfsc	status,2,c
  9467  001CF0  D003               	goto	i2l4740
  9468                           
  9469                           ;doprnt.c: 1221: (putch('.') );
  9470  001CF2  0E2E               	movlw	46
  9471  001CF4  EC0A  F026         	call	i2_putch
  9472  001CF8                     i2l4740:
  9473                           
  9474                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  9475  001CF8  505F               	movf	i2printf@c,w,c
  9476  001CFA  EC04  F012         	call	i2_scale
  9477  001CFE  C024  F048         	movff	?i2_scale,i2_printf$1247
  9478  001D02  C025  F049         	movff	?i2_scale+1,i2_printf$1247+1
  9479  001D06  C026  F04A         	movff	?i2_scale+2,i2_printf$1247+2
  9480                           
  9481                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  9482  001D0A  C05C  F018         	movff	i2printf@fval,i2___ftmul@f2
  9483  001D0E  C05D  F019         	movff	i2printf@fval+1,i2___ftmul@f2+1
  9484  001D12  C05E  F01A         	movff	i2printf@fval+2,i2___ftmul@f2+2
  9485  001D16  C048  F015         	movff	i2_printf$1247,i2___ftmul@f1
  9486  001D1A  C049  F016         	movff	i2_printf$1247+1,i2___ftmul@f1+1
  9487  001D1E  C04A  F017         	movff	i2_printf$1247+2,i2___ftmul@f1+2
  9488  001D22  EC06  F01F         	call	i2___ftmul	;wreg free
  9489  001D26  C015  F02B         	movff	?i2___ftmul,i2___fttol@f1
  9490  001D2A  C016  F02C         	movff	?i2___ftmul+1,i2___fttol@f1+1
  9491  001D2E  C017  F02D         	movff	?i2___ftmul+2,i2___fttol@f1+2
  9492  001D32  EC80  F01F         	call	i2___fttol	;wreg free
  9493  001D36  C02B  F052         	movff	?i2___fttol,i2printf@val
  9494  001D3A  C02C  F053         	movff	?i2___fttol+1,i2printf@val+1
  9495  001D3E  C02D  F054         	movff	?i2___fttol+2,i2printf@val+2
  9496  001D42  C02E  F055         	movff	?i2___fttol+3,i2printf@val+3
  9497                           
  9498                           ;doprnt.c: 1228: while(c--) {
  9499  001D46  D06A               	goto	i2l4750
  9500  001D48                     i2l4744:
  9501                           
  9502                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  9503  001D48  C052  F001         	movff	i2printf@val,i2___lldiv@dividend
  9504  001D4C  C053  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
  9505  001D50  C054  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
  9506  001D54  C055  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
  9507  001D58  505F               	movf	i2printf@c,w,c
  9508  001D5A  0D04               	mullw	4
  9509  001D5C  0E01               	movlw	low _dpowers
  9510  001D5E  24F3               	addwf	prodl,w,c
  9511  001D60  6EF6               	movwf	tblptrl,c
  9512  001D62  0E10               	movlw	high _dpowers
  9513  001D64  20F4               	addwfc	prodh,w,c
  9514  001D66  6EF7               	movwf	tblptrh,c
  9515  001D68                     	if	0	;There are less than 3 active tblptr bytes
  9516  001D68                     	endif
  9517  001D68  0009               	tblrd		*+
  9518  001D6A  CFF5 F005          	movff	tablat,i2___lldiv@divisor
  9519  001D6E  0009               	tblrd		*+
  9520  001D70  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
  9521  001D74  0009               	tblrd		*+
  9522  001D76  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
  9523  001D7A  000A               	tblrd		*-
  9524  001D7C  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
  9525  001D80  EC2D  F023         	call	i2___lldiv	;wreg free
  9526  001D84  C001  F058         	movff	?i2___lldiv,i2printf@tmpval
  9527  001D88  C002  F059         	movff	?i2___lldiv+1,i2printf@tmpval+1
  9528  001D8C  C003  F05A         	movff	?i2___lldiv+2,i2printf@tmpval+2
  9529  001D90  C004  F05B         	movff	?i2___lldiv+3,i2printf@tmpval+3
  9530                           
  9531                           ;doprnt.c: 1230: tmpval.vd %= 10;
  9532  001D94  C058  F001         	movff	i2printf@tmpval,i2___llmod@dividend
  9533  001D98  C059  F002         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
  9534  001D9C  C05A  F003         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
  9535  001DA0  C05B  F004         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
  9536  001DA4  0E0A               	movlw	10
  9537  001DA6  6E05               	movwf	i2___llmod@divisor,c
  9538  001DA8  0E00               	movlw	0
  9539  001DAA  6E06               	movwf	i2___llmod@divisor+1,c
  9540  001DAC  0E00               	movlw	0
  9541  001DAE  6E07               	movwf	i2___llmod@divisor+2,c
  9542  001DB0  0E00               	movlw	0
  9543  001DB2  6E08               	movwf	i2___llmod@divisor+3,c
  9544  001DB4  EC4D  F024         	call	i2___llmod	;wreg free
  9545  001DB8  C001  F058         	movff	?i2___llmod,i2printf@tmpval
  9546  001DBC  C002  F059         	movff	?i2___llmod+1,i2printf@tmpval+1
  9547  001DC0  C003  F05A         	movff	?i2___llmod+2,i2printf@tmpval+2
  9548  001DC4  C004  F05B         	movff	?i2___llmod+3,i2printf@tmpval+3
  9549                           
  9550                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  9551  001DC8  5058               	movf	i2printf@tmpval,w,c
  9552  001DCA  0F30               	addlw	48
  9553  001DCC  EC0A  F026         	call	i2_putch
  9554                           
  9555                           ;doprnt.c: 1232: val %= dpowers[c];
  9556  001DD0  C052  F001         	movff	i2printf@val,i2___llmod@dividend
  9557  001DD4  C053  F002         	movff	i2printf@val+1,i2___llmod@dividend+1
  9558  001DD8  C054  F003         	movff	i2printf@val+2,i2___llmod@dividend+2
  9559  001DDC  C055  F004         	movff	i2printf@val+3,i2___llmod@dividend+3
  9560  001DE0  505F               	movf	i2printf@c,w,c
  9561  001DE2  0D04               	mullw	4
  9562  001DE4  0E01               	movlw	low _dpowers
  9563  001DE6  24F3               	addwf	prodl,w,c
  9564  001DE8  6EF6               	movwf	tblptrl,c
  9565  001DEA  0E10               	movlw	high _dpowers
  9566  001DEC  20F4               	addwfc	prodh,w,c
  9567  001DEE  6EF7               	movwf	tblptrh,c
  9568  001DF0                     	if	0	;There are less than 3 active tblptr bytes
  9569  001DF0                     	endif
  9570  001DF0  0009               	tblrd		*+
  9571  001DF2  CFF5 F005          	movff	tablat,i2___llmod@divisor
  9572  001DF6  0009               	tblrd		*+
  9573  001DF8  CFF5 F006          	movff	tablat,i2___llmod@divisor+1
  9574  001DFC  0009               	tblrd		*+
  9575  001DFE  CFF5 F007          	movff	tablat,i2___llmod@divisor+2
  9576  001E02  000A               	tblrd		*-
  9577  001E04  CFF5 F008          	movff	tablat,i2___llmod@divisor+3
  9578  001E08  EC4D  F024         	call	i2___llmod	;wreg free
  9579  001E0C  C001  F052         	movff	?i2___llmod,i2printf@val
  9580  001E10  C002  F053         	movff	?i2___llmod+1,i2printf@val+1
  9581  001E14  C003  F054         	movff	?i2___llmod+2,i2printf@val+2
  9582  001E18  C004  F055         	movff	?i2___llmod+3,i2printf@val+3
  9583  001E1C                     i2l4750:
  9584  001E1C  065F               	decf	i2printf@c,f,c
  9585  001E1E  285F               	incf	i2printf@c,w,c
  9586  001E20  B4D8               	btfsc	status,2,c
  9587  001E22  D007               	goto	i2l4756
  9588  001E24  D791               	goto	i2l4744
  9589  001E26                     i2l4752:
  9590                           
  9591                           ;doprnt.c: 1236: (putch('0') );
  9592  001E26  0E30               	movlw	48
  9593  001E28  EC0A  F026         	call	i2_putch
  9594                           
  9595                           ;doprnt.c: 1237: prec--;
  9596  001E2C  0650               	decf	i2printf@prec,f,c
  9597  001E2E  A0D8               	btfss	status,0,c
  9598  001E30  0651               	decf	i2printf@prec+1,f,c
  9599  001E32                     i2l4756:
  9600  001E32  5050               	movf	i2printf@prec,w,c
  9601  001E34  1051               	iorwf	i2printf@prec+1,w,c
  9602  001E36  B4D8               	btfsc	status,2,c
  9603  001E38  D083               	goto	i2l4790
  9604  001E3A  D7F5               	goto	i2l4752
  9605  001E3C                     i2l4758:
  9606                           
  9607                           ;doprnt.c: 1246: }
  9608                           ;doprnt.c: 1273: {
  9609                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9610  001E3C  C04C  FFD9         	movff	i2printf@ap,fsr2l
  9611  001E40  C04D  FFDA         	movff	i2printf@ap+1,fsr2h
  9612  001E44  CFDE F042          	movff	postinc2,??i2_printf
  9613  001E48  CFDD F043          	movff	postdec2,??i2_printf+1
  9614  001E4C  C042  F052         	movff	??i2_printf,i2printf@val
  9615  001E50  C043  F053         	movff	??i2_printf+1,i2printf@val+1
  9616  001E54  6A54               	clrf	i2printf@val+2,c
  9617  001E56  6A55               	clrf	i2printf@val+3,c
  9618  001E58  0E02               	movlw	2
  9619  001E5A  264C               	addwf	i2printf@ap,f,c
  9620  001E5C  0E00               	movlw	0
  9621  001E5E  224D               	addwfc	i2printf@ap+1,f,c
  9622                           
  9623                           ;doprnt.c: 1287: }
  9624                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  9625  001E60  0E01               	movlw	1
  9626  001E62  6E5F               	movwf	i2printf@c,c
  9627  001E64                     i2l4764:
  9628  001E64  0E08               	movlw	8
  9629  001E66  185F               	xorwf	i2printf@c,w,c
  9630  001E68  B4D8               	btfsc	status,2,c
  9631  001E6A  D018               	goto	i2l4776
  9632                           
  9633                           ;doprnt.c: 1317: if(val < hexpowers[c])
  9634  001E6C  505F               	movf	i2printf@c,w,c
  9635  001E6E  0D04               	mullw	4
  9636  001E70  0E77               	movlw	low _hexpowers
  9637  001E72  24F3               	addwf	prodl,w,c
  9638  001E74  6EF6               	movwf	tblptrl,c
  9639  001E76  0E10               	movlw	high _hexpowers
  9640  001E78  20F4               	addwfc	prodh,w,c
  9641  001E7A  6EF7               	movwf	tblptrh,c
  9642  001E7C                     	if	0	;There are less than 3 active tblptr bytes
  9643  001E7C                     	endif
  9644  001E7C  0009               	tblrd		*+
  9645  001E7E  50F5               	movf	tablat,w,c
  9646  001E80  5C52               	subwf	i2printf@val,w,c
  9647  001E82  0009               	tblrd		*+
  9648  001E84  50F5               	movf	tablat,w,c
  9649  001E86  5853               	subwfb	i2printf@val+1,w,c
  9650  001E88  0009               	tblrd		*+
  9651  001E8A  50F5               	movf	tablat,w,c
  9652  001E8C  5854               	subwfb	i2printf@val+2,w,c
  9653  001E8E  0009               	tblrd		*+
  9654  001E90  50F5               	movf	tablat,w,c
  9655  001E92  5855               	subwfb	i2printf@val+3,w,c
  9656  001E94  A0D8               	btfss	status,0,c
  9657  001E96  D002               	goto	i2l4776
  9658                           
  9659                           ;doprnt.c: 1318: break;
  9660  001E98  2A5F               	incf	i2printf@c,f,c
  9661  001E9A  D7E4               	goto	i2l4764
  9662  001E9C                     i2l4776:
  9663                           
  9664                           ;doprnt.c: 1422: {
  9665                           ;doprnt.c: 1438: if(flag & 0x03)
  9666  001E9C  0E03               	movlw	3
  9667  001E9E  144E               	andwf	i2printf@flag,w,c
  9668  001EA0  6E42               	movwf	??i2_printf& (0+255),c
  9669  001EA2  0E00               	movlw	0
  9670  001EA4  144F               	andwf	i2printf@flag+1,w,c
  9671  001EA6  6E43               	movwf	(??i2_printf+1)& (0+255),c
  9672  001EA8  5042               	movf	??i2_printf,w,c
  9673  001EAA  1043               	iorwf	??i2_printf+1,w,c
  9674  001EAC  B4D8               	btfsc	status,2,c
  9675  001EAE  D003               	goto	i2l4780
  9676                           
  9677                           ;doprnt.c: 1439: (putch('-') );
  9678  001EB0  0E2D               	movlw	45
  9679  001EB2  EC0A  F026         	call	i2_putch
  9680  001EB6                     i2l4780:
  9681                           
  9682                           ;doprnt.c: 1469: }
  9683                           ;doprnt.c: 1472: prec = c;
  9684  001EB6  505F               	movf	i2printf@c,w,c
  9685  001EB8  6E50               	movwf	i2printf@prec,c
  9686  001EBA  6A51               	clrf	i2printf@prec+1,c
  9687  001EBC  BE50               	btfsc	i2printf@prec,7,c
  9688  001EBE  0651               	decf	i2printf@prec+1,f,c
  9689                           
  9690                           ;doprnt.c: 1474: while(prec--) {
  9691  001EC0  D037               	goto	i2l4788
  9692  001EC2                     i2l4782:
  9693                           
  9694                           ;doprnt.c: 1478: {
  9695                           ;doprnt.c: 1499: {
  9696                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  9697  001EC2  C052  F001         	movff	i2printf@val,i2___lldiv@dividend
  9698  001EC6  C053  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
  9699  001ECA  C054  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
  9700  001ECE  C055  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
  9701  001ED2  C050  F042         	movff	i2printf@prec,??i2_printf
  9702  001ED6  C051  F043         	movff	i2printf@prec+1,??i2_printf+1
  9703  001EDA  90D8               	bcf	status,0,c
  9704  001EDC  3642               	rlcf	??i2_printf,f,c
  9705  001EDE  3643               	rlcf	??i2_printf+1,f,c
  9706  001EE0  90D8               	bcf	status,0,c
  9707  001EE2  3642               	rlcf	??i2_printf,f,c
  9708  001EE4  3643               	rlcf	??i2_printf+1,f,c
  9709  001EE6  0E77               	movlw	low _hexpowers
  9710  001EE8  2442               	addwf	??i2_printf,w,c
  9711  001EEA  6EF6               	movwf	tblptrl,c
  9712  001EEC  0E10               	movlw	high _hexpowers
  9713  001EEE  2043               	addwfc	??i2_printf+1,w,c
  9714  001EF0  6EF7               	movwf	tblptrh,c
  9715  001EF2                     	if	0	;There are less than 3 active tblptr bytes
  9716  001EF2                     	endif
  9717  001EF2  0009               	tblrd		*+
  9718  001EF4  CFF5 F005          	movff	tablat,i2___lldiv@divisor
  9719  001EF8  0009               	tblrd		*+
  9720  001EFA  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
  9721  001EFE  0009               	tblrd		*+
  9722  001F00  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
  9723  001F04  000A               	tblrd		*-
  9724  001F06  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
  9725  001F0A  EC2D  F023         	call	i2___lldiv	;wreg free
  9726  001F0E  5001               	movf	?i2___lldiv,w,c
  9727  001F10  0B0F               	andlw	15
  9728  001F12  6E4B               	movwf	i2printf@idx,c
  9729                           
  9730                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  9731  001F14  504B               	movf	i2printf@idx,w,c
  9732  001F16  0D01               	mullw	1
  9733  001F18  0EAF               	movlw	low STR_7
  9734  001F1A  24F3               	addwf	prodl,w,c
  9735  001F1C  6EF6               	movwf	tblptrl,c
  9736  001F1E  0E10               	movlw	high STR_7
  9737  001F20  20F4               	addwfc	prodh,w,c
  9738  001F22  6EF7               	movwf	tblptrh,c
  9739  001F24                     	if	0	;There are less than 3 active tblptr bytes
  9740  001F24                     	endif
  9741  001F24  0008               	tblrd		*
  9742  001F26  CFF5 F05F          	movff	tablat,i2printf@c
  9743                           
  9744                           ;doprnt.c: 1508: }
  9745                           ;doprnt.c: 1523: }
  9746                           ;doprnt.c: 1524: (putch(c) );
  9747  001F2A  505F               	movf	i2printf@c,w,c
  9748  001F2C  EC0A  F026         	call	i2_putch
  9749  001F30                     i2l4788:
  9750  001F30  0650               	decf	i2printf@prec,f,c
  9751  001F32  A0D8               	btfss	status,0,c
  9752  001F34  0651               	decf	i2printf@prec+1,f,c
  9753  001F36  2850               	incf	i2printf@prec,w,c
  9754  001F38  E1C4               	bnz	i2l4782
  9755  001F3A  2851               	incf	i2printf@prec+1,w,c
  9756  001F3C  A4D8               	btfss	status,2,c
  9757  001F3E  D7C1               	goto	i2l4782
  9758  001F40                     i2l4790:
  9759  001F40  C040  FFF6         	movff	i2printf@f,tblptrl
  9760  001F44  C041  FFF7         	movff	i2printf@f+1,tblptrh
  9761  001F48  4A40               	infsnz	i2printf@f,f,c
  9762  001F4A  2A41               	incf	i2printf@f+1,f,c
  9763  001F4C                     	if	0	;tblptru may be non-zero
  9764  001F4C                     	endif
  9765  001F4C                     	if	0	;tblptru may be non-zero
  9766  001F4C                     	endif
  9767  001F4C  0008               	tblrd		*
  9768  001F4E  CFF5 F05F          	movff	tablat,i2printf@c
  9769  001F52  505F               	movf	i2printf@c,w,c
  9770  001F54  B4D8               	btfsc	status,2,c
  9771  001F56  0012               	return	
  9772  001F58  D4AF               	goto	i2l4614
  9773  001F5A                     __end_ofi2_printf:
  9774                           	opt stack 0
  9775                           pclatu	equ	0xFFB
  9776                           pclath	equ	0xFFA
  9777                           tblptru	equ	0xFF8
  9778                           tblptrh	equ	0xFF7
  9779                           tblptrl	equ	0xFF6
  9780                           tablat	equ	0xFF5
  9781                           prodh	equ	0xFF4
  9782                           prodl	equ	0xFF3
  9783                           intcon	equ	0xFF2
  9784                           fsr0h	equ	0xFEA
  9785                           fsr0l	equ	0xFE9
  9786                           wreg	equ	0xFE8
  9787                           fsr1h	equ	0xFE2
  9788                           fsr1l	equ	0xFE1
  9789                           indf2	equ	0xFDF
  9790                           postinc2	equ	0xFDE
  9791                           postdec2	equ	0xFDD
  9792                           fsr2h	equ	0xFDA
  9793                           fsr2l	equ	0xFD9
  9794                           status	equ	0xFD8
  9795                           
  9796 ;; *************** function i2_scale *****************
  9797 ;; Defined at:
  9798 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  9799 ;; Parameters:    Size  Location     Type
  9800 ;;  scl             1    wreg     char 
  9801 ;; Auto vars:     Size  Location     Type
  9802 ;;  scl             1   41[COMRAM] char 
  9803 ;; Return value:  Size  Location     Type
  9804 ;;                  3   35[COMRAM] char 
  9805 ;; Registers used:
  9806 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9807 ;; Tracked objects:
  9808 ;;		On entry : 0/0
  9809 ;;		On exit  : 0/0
  9810 ;;		Unchanged: 0/0
  9811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9812 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9813 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9815 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9816 ;;Total ram usage:        7 bytes
  9817 ;; Hardware stack levels used:    1
  9818 ;; Hardware stack levels required when called:    2
  9819 ;; This function calls:
  9820 ;;		i2___awdiv
  9821 ;;		i2___awmod
  9822 ;;		i2___ftmul
  9823 ;;		i2___wmul
  9824 ;; This function is called by:
  9825 ;;		i2_printf
  9826 ;; This function uses a non-reentrant model
  9827 ;;
  9828                           
  9829                           	psect	text37
  9830  002408                     __ptext37:
  9831                           	opt stack 0
  9832  002408                     i2_scale:
  9833                           	opt stack 20
  9834                           
  9835                           ;incstack = 0
  9836                           ;i2scale@scl stored from wreg
  9837  002408  6E2A               	movwf	i2scale@scl,c
  9838                           
  9839                           ;doprnt.c: 428: if(scl < 0) {
  9840  00240A  AE2A               	btfss	i2scale@scl,7,c
  9841  00240C  D0FB               	goto	i2l4250
  9842                           
  9843                           ;doprnt.c: 429: scl = -scl;
  9844  00240E  6C2A               	negf	i2scale@scl,c
  9845                           
  9846                           ;doprnt.c: 430: if(scl>=110)
  9847  002410  502A               	movf	i2scale@scl,w,c
  9848  002412  0A80               	xorlw	128
  9849  002414  0F12               	addlw	-238
  9850  002416  A0D8               	btfss	status,0,c
  9851  002418  D091               	goto	i2l4240
  9852                           
  9853                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  9854  00241A  0E00               	movlw	0
  9855  00241C  6E12               	movwf	i2___wmul@multiplicand+1,c
  9856  00241E  0E03               	movlw	3
  9857  002420  6E11               	movwf	i2___wmul@multiplicand,c
  9858  002422  0E00               	movlw	0
  9859  002424  6E0A               	movwf	i2___awdiv@divisor+1,c
  9860  002426  0E0A               	movlw	10
  9861  002428  6E09               	movwf	i2___awdiv@divisor,c
  9862  00242A  0E00               	movlw	0
  9863  00242C  6E04               	movwf	i2___awmod@divisor+1,c
  9864  00242E  0E64               	movlw	100
  9865  002430  6E03               	movwf	i2___awmod@divisor,c
  9866  002432  502A               	movf	i2scale@scl,w,c
  9867  002434  6E01               	movwf	i2___awmod@dividend,c
  9868  002436  6A02               	clrf	i2___awmod@dividend+1,c
  9869  002438  BE01               	btfsc	i2___awmod@dividend,7,c
  9870  00243A  0602               	decf	i2___awmod@dividend+1,f,c
  9871  00243C  ECAC  F023         	call	i2___awmod	;wreg free
  9872  002440  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
  9873  002444  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
  9874  002448  ECEB  F022         	call	i2___awdiv	;wreg free
  9875  00244C  0E09               	movlw	9
  9876  00244E  2407               	addwf	?i2___awdiv,w,c
  9877  002450  6E0F               	movwf	i2___wmul@multiplier,c
  9878  002452  0E00               	movlw	0
  9879  002454  2008               	addwfc	?i2___awdiv+1,w,c
  9880  002456  6E10               	movwf	i2___wmul@multiplier+1,c
  9881  002458  ECE5  F025         	call	i2___wmul	;wreg free
  9882  00245C  0E29               	movlw	low __npowers_
  9883  00245E  240F               	addwf	?i2___wmul,w,c
  9884  002460  6EF6               	movwf	tblptrl,c
  9885  002462  0E10               	movlw	high __npowers_
  9886  002464  2010               	addwfc	?i2___wmul+1,w,c
  9887  002466  6EF7               	movwf	tblptrh,c
  9888  002468                     	if	0	;There are less than 3 active tblptr bytes
  9889  002468                     	endif
  9890  002468  0009               	tblrd		*+
  9891  00246A  CFF5 F018          	movff	tablat,i2___ftmul@f2
  9892  00246E  0009               	tblrd		*+
  9893  002470  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
  9894  002474  000A               	tblrd		*-
  9895  002476  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
  9896  00247A  0E00               	movlw	0
  9897  00247C  6E0A               	movwf	i2___awdiv@divisor+1,c
  9898  00247E  0E64               	movlw	100
  9899  002480  6E09               	movwf	i2___awdiv@divisor,c
  9900  002482  502A               	movf	i2scale@scl,w,c
  9901  002484  6E07               	movwf	i2___awdiv@dividend,c
  9902  002486  6A08               	clrf	i2___awdiv@dividend+1,c
  9903  002488  BE07               	btfsc	i2___awdiv@dividend,7,c
  9904  00248A  0608               	decf	i2___awdiv@dividend+1,f,c
  9905  00248C  ECEB  F022         	call	i2___awdiv	;wreg free
  9906  002490  0E12               	movlw	18
  9907  002492  2407               	addwf	?i2___awdiv,w,c
  9908  002494  6E0F               	movwf	i2___wmul@multiplier,c
  9909  002496  0E00               	movlw	0
  9910  002498  2008               	addwfc	?i2___awdiv+1,w,c
  9911  00249A  6E10               	movwf	i2___wmul@multiplier+1,c
  9912  00249C  0E00               	movlw	0
  9913  00249E  6E12               	movwf	i2___wmul@multiplicand+1,c
  9914  0024A0  0E03               	movlw	3
  9915  0024A2  6E11               	movwf	i2___wmul@multiplicand,c
  9916  0024A4  ECE5  F025         	call	i2___wmul	;wreg free
  9917  0024A8  0E29               	movlw	low __npowers_
  9918  0024AA  240F               	addwf	?i2___wmul,w,c
  9919  0024AC  6EF6               	movwf	tblptrl,c
  9920  0024AE  0E10               	movlw	high __npowers_
  9921  0024B0  2010               	addwfc	?i2___wmul+1,w,c
  9922  0024B2  6EF7               	movwf	tblptrh,c
  9923  0024B4                     	if	0	;There are less than 3 active tblptr bytes
  9924  0024B4                     	endif
  9925  0024B4  0009               	tblrd		*+
  9926  0024B6  CFF5 F015          	movff	tablat,i2___ftmul@f1
  9927  0024BA  0009               	tblrd		*+
  9928  0024BC  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
  9929  0024C0  000A               	tblrd		*-
  9930  0024C2  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
  9931  0024C6  EC06  F01F         	call	i2___ftmul	;wreg free
  9932  0024CA  C015  F027         	movff	?i2___ftmul,i2_scale$1246
  9933  0024CE  C016  F028         	movff	?i2___ftmul+1,i2_scale$1246+1
  9934  0024D2  C017  F029         	movff	?i2___ftmul+2,i2_scale$1246+2
  9935                           
  9936                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  9937  0024D6  C027  F015         	movff	i2_scale$1246,i2___ftmul@f1
  9938  0024DA  C028  F016         	movff	i2_scale$1246+1,i2___ftmul@f1+1
  9939  0024DE  C029  F017         	movff	i2_scale$1246+2,i2___ftmul@f1+2
  9940  0024E2  0E00               	movlw	0
  9941  0024E4  6E12               	movwf	i2___wmul@multiplicand+1,c
  9942  0024E6  0E03               	movlw	3
  9943  0024E8  6E11               	movwf	i2___wmul@multiplicand,c
  9944  0024EA  0E00               	movlw	0
  9945  0024EC  6E04               	movwf	i2___awmod@divisor+1,c
  9946  0024EE  0E0A               	movlw	10
  9947  0024F0  6E03               	movwf	i2___awmod@divisor,c
  9948  0024F2  502A               	movf	i2scale@scl,w,c
  9949  0024F4  6E01               	movwf	i2___awmod@dividend,c
  9950  0024F6  6A02               	clrf	i2___awmod@dividend+1,c
  9951  0024F8  BE01               	btfsc	i2___awmod@dividend,7,c
  9952  0024FA  0602               	decf	i2___awmod@dividend+1,f,c
  9953  0024FC  ECAC  F023         	call	i2___awmod	;wreg free
  9954  002500  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
  9955  002504  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
  9956  002508  ECE5  F025         	call	i2___wmul	;wreg free
  9957  00250C  0E29               	movlw	low __npowers_
  9958  00250E  240F               	addwf	?i2___wmul,w,c
  9959  002510  6EF6               	movwf	tblptrl,c
  9960  002512  0E10               	movlw	high __npowers_
  9961  002514  2010               	addwfc	?i2___wmul+1,w,c
  9962  002516  6EF7               	movwf	tblptrh,c
  9963  002518                     	if	0	;There are less than 3 active tblptr bytes
  9964  002518                     	endif
  9965  002518  0009               	tblrd		*+
  9966  00251A  CFF5 F018          	movff	tablat,i2___ftmul@f2
  9967  00251E  0009               	tblrd		*+
  9968  002520  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
  9969  002524  000A               	tblrd		*-
  9970  002526  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
  9971  00252A  EC06  F01F         	call	i2___ftmul	;wreg free
  9972  00252E  C015  F024         	movff	?i2___ftmul,?i2_scale
  9973  002532  C016  F025         	movff	?i2___ftmul+1,?i2_scale+1
  9974  002536  C017  F026         	movff	?i2___ftmul+2,?i2_scale+2
  9975  00253A  0012               	return	
  9976  00253C                     i2l4240:
  9977                           
  9978                           ;doprnt.c: 432: else if(scl > 10)
  9979  00253C  502A               	movf	i2scale@scl,w,c
  9980  00253E  0A80               	xorlw	128
  9981  002540  0F75               	addlw	-139
  9982  002542  A0D8               	btfss	status,0,c
  9983  002544  D04D               	goto	i2l4246
  9984                           
  9985                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  9986  002546  0E00               	movlw	0
  9987  002548  6E0A               	movwf	i2___awdiv@divisor+1,c
  9988  00254A  0E0A               	movlw	10
  9989  00254C  6E09               	movwf	i2___awdiv@divisor,c
  9990  00254E  502A               	movf	i2scale@scl,w,c
  9991  002550  6E07               	movwf	i2___awdiv@dividend,c
  9992  002552  6A08               	clrf	i2___awdiv@dividend+1,c
  9993  002554  BE07               	btfsc	i2___awdiv@dividend,7,c
  9994  002556  0608               	decf	i2___awdiv@dividend+1,f,c
  9995  002558  ECEB  F022         	call	i2___awdiv	;wreg free
  9996  00255C  0E09               	movlw	9
  9997  00255E  2407               	addwf	?i2___awdiv,w,c
  9998  002560  6E0F               	movwf	i2___wmul@multiplier,c
  9999  002562  0E00               	movlw	0
 10000  002564  2008               	addwfc	?i2___awdiv+1,w,c
 10001  002566  6E10               	movwf	i2___wmul@multiplier+1,c
 10002  002568  0E00               	movlw	0
 10003  00256A  6E12               	movwf	i2___wmul@multiplicand+1,c
 10004  00256C  0E03               	movlw	3
 10005  00256E  6E11               	movwf	i2___wmul@multiplicand,c
 10006  002570  ECE5  F025         	call	i2___wmul	;wreg free
 10007  002574  0E29               	movlw	low __npowers_
 10008  002576  240F               	addwf	?i2___wmul,w,c
 10009  002578  6EF6               	movwf	tblptrl,c
 10010  00257A  0E10               	movlw	high __npowers_
 10011  00257C  2010               	addwfc	?i2___wmul+1,w,c
 10012  00257E  6EF7               	movwf	tblptrh,c
 10013  002580                     	if	0	;There are less than 3 active tblptr bytes
 10014  002580                     	endif
 10015  002580  0009               	tblrd		*+
 10016  002582  CFF5 F015          	movff	tablat,i2___ftmul@f1
 10017  002586  0009               	tblrd		*+
 10018  002588  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 10019  00258C  000A               	tblrd		*-
 10020  00258E  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 10021  002592  0E00               	movlw	0
 10022  002594  6E12               	movwf	i2___wmul@multiplicand+1,c
 10023  002596  0E03               	movlw	3
 10024  002598  6E11               	movwf	i2___wmul@multiplicand,c
 10025  00259A  0E00               	movlw	0
 10026  00259C  6E04               	movwf	i2___awmod@divisor+1,c
 10027  00259E  0E0A               	movlw	10
 10028  0025A0  6E03               	movwf	i2___awmod@divisor,c
 10029  0025A2  502A               	movf	i2scale@scl,w,c
 10030  0025A4  6E01               	movwf	i2___awmod@dividend,c
 10031  0025A6  6A02               	clrf	i2___awmod@dividend+1,c
 10032  0025A8  BE01               	btfsc	i2___awmod@dividend,7,c
 10033  0025AA  0602               	decf	i2___awmod@dividend+1,f,c
 10034  0025AC  ECAC  F023         	call	i2___awmod	;wreg free
 10035  0025B0  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 10036  0025B4  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 10037  0025B8  ECE5  F025         	call	i2___wmul	;wreg free
 10038  0025BC  0E29               	movlw	low __npowers_
 10039  0025BE  240F               	addwf	?i2___wmul,w,c
 10040  0025C0  6EF6               	movwf	tblptrl,c
 10041  0025C2  0E10               	movlw	high __npowers_
 10042  0025C4  2010               	addwfc	?i2___wmul+1,w,c
 10043  0025C6  6EF7               	movwf	tblptrh,c
 10044  0025C8                     	if	0	;There are less than 3 active tblptr bytes
 10045  0025C8                     	endif
 10046  0025C8  0009               	tblrd		*+
 10047  0025CA  CFF5 F018          	movff	tablat,i2___ftmul@f2
 10048  0025CE  0009               	tblrd		*+
 10049  0025D0  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 10050  0025D4  000A               	tblrd		*-
 10051  0025D6  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 10052  0025DA  EC06  F01F         	call	i2___ftmul	;wreg free
 10053  0025DE  D7A7               	goto	L6
 10054  0025E0                     i2l4246:
 10055                           
 10056                           ;doprnt.c: 434: return _npowers_[scl];
 10057  0025E0  502A               	movf	i2scale@scl,w,c
 10058  0025E2  0D03               	mullw	3
 10059  0025E4  0E29               	movlw	low __npowers_
 10060  0025E6  24F3               	addwf	prodl,w,c
 10061  0025E8  6EF6               	movwf	tblptrl,c
 10062  0025EA  0E10               	movlw	high __npowers_
 10063  0025EC  20F4               	addwfc	prodh,w,c
 10064  0025EE  6EF7               	movwf	tblptrh,c
 10065  0025F0                     	if	0	;There are less than 3 active tblptr bytes
 10066  0025F0                     	endif
 10067  0025F0  0009               	tblrd		*+
 10068  0025F2  CFF5 F024          	movff	tablat,?i2_scale
 10069  0025F6  0009               	tblrd		*+
 10070  0025F8  CFF5 F025          	movff	tablat,?i2_scale+1
 10071  0025FC  000A               	tblrd		*-
 10072  0025FE  CFF5 F026          	movff	tablat,?i2_scale+2
 10073  002602  0012               	return	
 10074  002604                     i2l4250:
 10075                           
 10076                           ;doprnt.c: 435: }
 10077                           ;doprnt.c: 436: if(scl>=110)
 10078  002604  502A               	movf	i2scale@scl,w,c
 10079  002606  0A80               	xorlw	128
 10080  002608  0F12               	addlw	-238
 10081  00260A  A0D8               	btfss	status,0,c
 10082  00260C  D091               	goto	i2l4258
 10083                           
 10084                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 10085  00260E  0E00               	movlw	0
 10086  002610  6E12               	movwf	i2___wmul@multiplicand+1,c
 10087  002612  0E03               	movlw	3
 10088  002614  6E11               	movwf	i2___wmul@multiplicand,c
 10089  002616  0E00               	movlw	0
 10090  002618  6E0A               	movwf	i2___awdiv@divisor+1,c
 10091  00261A  0E0A               	movlw	10
 10092  00261C  6E09               	movwf	i2___awdiv@divisor,c
 10093  00261E  0E00               	movlw	0
 10094  002620  6E04               	movwf	i2___awmod@divisor+1,c
 10095  002622  0E64               	movlw	100
 10096  002624  6E03               	movwf	i2___awmod@divisor,c
 10097  002626  502A               	movf	i2scale@scl,w,c
 10098  002628  6E01               	movwf	i2___awmod@dividend,c
 10099  00262A  6A02               	clrf	i2___awmod@dividend+1,c
 10100  00262C  BE01               	btfsc	i2___awmod@dividend,7,c
 10101  00262E  0602               	decf	i2___awmod@dividend+1,f,c
 10102  002630  ECAC  F023         	call	i2___awmod	;wreg free
 10103  002634  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 10104  002638  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 10105  00263C  ECEB  F022         	call	i2___awdiv	;wreg free
 10106  002640  0E09               	movlw	9
 10107  002642  2407               	addwf	?i2___awdiv,w,c
 10108  002644  6E0F               	movwf	i2___wmul@multiplier,c
 10109  002646  0E00               	movlw	0
 10110  002648  2008               	addwfc	?i2___awdiv+1,w,c
 10111  00264A  6E10               	movwf	i2___wmul@multiplier+1,c
 10112  00264C  ECE5  F025         	call	i2___wmul	;wreg free
 10113  002650  0E50               	movlw	low __powers_
 10114  002652  240F               	addwf	?i2___wmul,w,c
 10115  002654  6EF6               	movwf	tblptrl,c
 10116  002656  0E10               	movlw	high __powers_
 10117  002658  2010               	addwfc	?i2___wmul+1,w,c
 10118  00265A  6EF7               	movwf	tblptrh,c
 10119  00265C                     	if	0	;There are less than 3 active tblptr bytes
 10120  00265C                     	endif
 10121  00265C  0009               	tblrd		*+
 10122  00265E  CFF5 F018          	movff	tablat,i2___ftmul@f2
 10123  002662  0009               	tblrd		*+
 10124  002664  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 10125  002668  000A               	tblrd		*-
 10126  00266A  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 10127  00266E  0E00               	movlw	0
 10128  002670  6E0A               	movwf	i2___awdiv@divisor+1,c
 10129  002672  0E64               	movlw	100
 10130  002674  6E09               	movwf	i2___awdiv@divisor,c
 10131  002676  502A               	movf	i2scale@scl,w,c
 10132  002678  6E07               	movwf	i2___awdiv@dividend,c
 10133  00267A  6A08               	clrf	i2___awdiv@dividend+1,c
 10134  00267C  BE07               	btfsc	i2___awdiv@dividend,7,c
 10135  00267E  0608               	decf	i2___awdiv@dividend+1,f,c
 10136  002680  ECEB  F022         	call	i2___awdiv	;wreg free
 10137  002684  0E12               	movlw	18
 10138  002686  2407               	addwf	?i2___awdiv,w,c
 10139  002688  6E0F               	movwf	i2___wmul@multiplier,c
 10140  00268A  0E00               	movlw	0
 10141  00268C  2008               	addwfc	?i2___awdiv+1,w,c
 10142  00268E  6E10               	movwf	i2___wmul@multiplier+1,c
 10143  002690  0E00               	movlw	0
 10144  002692  6E12               	movwf	i2___wmul@multiplicand+1,c
 10145  002694  0E03               	movlw	3
 10146  002696  6E11               	movwf	i2___wmul@multiplicand,c
 10147  002698  ECE5  F025         	call	i2___wmul	;wreg free
 10148  00269C  0E50               	movlw	low __powers_
 10149  00269E  240F               	addwf	?i2___wmul,w,c
 10150  0026A0  6EF6               	movwf	tblptrl,c
 10151  0026A2  0E10               	movlw	high __powers_
 10152  0026A4  2010               	addwfc	?i2___wmul+1,w,c
 10153  0026A6  6EF7               	movwf	tblptrh,c
 10154  0026A8                     	if	0	;There are less than 3 active tblptr bytes
 10155  0026A8                     	endif
 10156  0026A8  0009               	tblrd		*+
 10157  0026AA  CFF5 F015          	movff	tablat,i2___ftmul@f1
 10158  0026AE  0009               	tblrd		*+
 10159  0026B0  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 10160  0026B4  000A               	tblrd		*-
 10161  0026B6  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 10162  0026BA  EC06  F01F         	call	i2___ftmul	;wreg free
 10163  0026BE  C015  F027         	movff	?i2___ftmul,i2_scale$1246
 10164  0026C2  C016  F028         	movff	?i2___ftmul+1,i2_scale$1246+1
 10165  0026C6  C017  F029         	movff	?i2___ftmul+2,i2_scale$1246+2
 10166                           
 10167                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 10168  0026CA  C027  F015         	movff	i2_scale$1246,i2___ftmul@f1
 10169  0026CE  C028  F016         	movff	i2_scale$1246+1,i2___ftmul@f1+1
 10170  0026D2  C029  F017         	movff	i2_scale$1246+2,i2___ftmul@f1+2
 10171  0026D6  0E00               	movlw	0
 10172  0026D8  6E12               	movwf	i2___wmul@multiplicand+1,c
 10173  0026DA  0E03               	movlw	3
 10174  0026DC  6E11               	movwf	i2___wmul@multiplicand,c
 10175  0026DE  0E00               	movlw	0
 10176  0026E0  6E04               	movwf	i2___awmod@divisor+1,c
 10177  0026E2  0E0A               	movlw	10
 10178  0026E4  6E03               	movwf	i2___awmod@divisor,c
 10179  0026E6  502A               	movf	i2scale@scl,w,c
 10180  0026E8  6E01               	movwf	i2___awmod@dividend,c
 10181  0026EA  6A02               	clrf	i2___awmod@dividend+1,c
 10182  0026EC  BE01               	btfsc	i2___awmod@dividend,7,c
 10183  0026EE  0602               	decf	i2___awmod@dividend+1,f,c
 10184  0026F0  ECAC  F023         	call	i2___awmod	;wreg free
 10185  0026F4  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 10186  0026F8  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 10187  0026FC  ECE5  F025         	call	i2___wmul	;wreg free
 10188  002700  0E50               	movlw	low __powers_
 10189  002702  240F               	addwf	?i2___wmul,w,c
 10190  002704  6EF6               	movwf	tblptrl,c
 10191  002706  0E10               	movlw	high __powers_
 10192  002708  2010               	addwfc	?i2___wmul+1,w,c
 10193  00270A  6EF7               	movwf	tblptrh,c
 10194  00270C                     	if	0	;There are less than 3 active tblptr bytes
 10195  00270C                     	endif
 10196  00270C  0009               	tblrd		*+
 10197  00270E  CFF5 F018          	movff	tablat,i2___ftmul@f2
 10198  002712  0009               	tblrd		*+
 10199  002714  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 10200  002718  000A               	tblrd		*-
 10201  00271A  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 10202  00271E  EC06  F01F         	call	i2___ftmul	;wreg free
 10203  002722  C015  F024         	movff	?i2___ftmul,?i2_scale
 10204  002726  C016  F025         	movff	?i2___ftmul+1,?i2_scale+1
 10205  00272A  C017  F026         	movff	?i2___ftmul+2,?i2_scale+2
 10206  00272E  0012               	return	
 10207  002730                     i2l4258:
 10208                           
 10209                           ;doprnt.c: 438: else if(scl > 10)
 10210  002730  502A               	movf	i2scale@scl,w,c
 10211  002732  0A80               	xorlw	128
 10212  002734  0F75               	addlw	-139
 10213  002736  A0D8               	btfss	status,0,c
 10214  002738  D04D               	goto	i2l4264
 10215                           
 10216                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 10217  00273A  0E00               	movlw	0
 10218  00273C  6E0A               	movwf	i2___awdiv@divisor+1,c
 10219  00273E  0E0A               	movlw	10
 10220  002740  6E09               	movwf	i2___awdiv@divisor,c
 10221  002742  502A               	movf	i2scale@scl,w,c
 10222  002744  6E07               	movwf	i2___awdiv@dividend,c
 10223  002746  6A08               	clrf	i2___awdiv@dividend+1,c
 10224  002748  BE07               	btfsc	i2___awdiv@dividend,7,c
 10225  00274A  0608               	decf	i2___awdiv@dividend+1,f,c
 10226  00274C  ECEB  F022         	call	i2___awdiv	;wreg free
 10227  002750  0E09               	movlw	9
 10228  002752  2407               	addwf	?i2___awdiv,w,c
 10229  002754  6E0F               	movwf	i2___wmul@multiplier,c
 10230  002756  0E00               	movlw	0
 10231  002758  2008               	addwfc	?i2___awdiv+1,w,c
 10232  00275A  6E10               	movwf	i2___wmul@multiplier+1,c
 10233  00275C  0E00               	movlw	0
 10234  00275E  6E12               	movwf	i2___wmul@multiplicand+1,c
 10235  002760  0E03               	movlw	3
 10236  002762  6E11               	movwf	i2___wmul@multiplicand,c
 10237  002764  ECE5  F025         	call	i2___wmul	;wreg free
 10238  002768  0E50               	movlw	low __powers_
 10239  00276A  240F               	addwf	?i2___wmul,w,c
 10240  00276C  6EF6               	movwf	tblptrl,c
 10241  00276E  0E10               	movlw	high __powers_
 10242  002770  2010               	addwfc	?i2___wmul+1,w,c
 10243  002772  6EF7               	movwf	tblptrh,c
 10244  002774                     	if	0	;There are less than 3 active tblptr bytes
 10245  002774                     	endif
 10246  002774  0009               	tblrd		*+
 10247  002776  CFF5 F015          	movff	tablat,i2___ftmul@f1
 10248  00277A  0009               	tblrd		*+
 10249  00277C  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 10250  002780  000A               	tblrd		*-
 10251  002782  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 10252  002786  0E00               	movlw	0
 10253  002788  6E12               	movwf	i2___wmul@multiplicand+1,c
 10254  00278A  0E03               	movlw	3
 10255  00278C  6E11               	movwf	i2___wmul@multiplicand,c
 10256  00278E  0E00               	movlw	0
 10257  002790  6E04               	movwf	i2___awmod@divisor+1,c
 10258  002792  0E0A               	movlw	10
 10259  002794  6E03               	movwf	i2___awmod@divisor,c
 10260  002796  502A               	movf	i2scale@scl,w,c
 10261  002798  6E01               	movwf	i2___awmod@dividend,c
 10262  00279A  6A02               	clrf	i2___awmod@dividend+1,c
 10263  00279C  BE01               	btfsc	i2___awmod@dividend,7,c
 10264  00279E  0602               	decf	i2___awmod@dividend+1,f,c
 10265  0027A0  ECAC  F023         	call	i2___awmod	;wreg free
 10266  0027A4  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 10267  0027A8  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 10268  0027AC  ECE5  F025         	call	i2___wmul	;wreg free
 10269  0027B0  0E50               	movlw	low __powers_
 10270  0027B2  240F               	addwf	?i2___wmul,w,c
 10271  0027B4  6EF6               	movwf	tblptrl,c
 10272  0027B6  0E10               	movlw	high __powers_
 10273  0027B8  2010               	addwfc	?i2___wmul+1,w,c
 10274  0027BA  6EF7               	movwf	tblptrh,c
 10275  0027BC                     	if	0	;There are less than 3 active tblptr bytes
 10276  0027BC                     	endif
 10277  0027BC  0009               	tblrd		*+
 10278  0027BE  CFF5 F018          	movff	tablat,i2___ftmul@f2
 10279  0027C2  0009               	tblrd		*+
 10280  0027C4  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 10281  0027C8  000A               	tblrd		*-
 10282  0027CA  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 10283  0027CE  EC06  F01F         	call	i2___ftmul	;wreg free
 10284  0027D2  D7A7               	goto	L7
 10285  0027D4                     i2l4264:
 10286                           
 10287                           ;doprnt.c: 440: return _powers_[scl];
 10288  0027D4  502A               	movf	i2scale@scl,w,c
 10289  0027D6  0D03               	mullw	3
 10290  0027D8  0E50               	movlw	low __powers_
 10291  0027DA  24F3               	addwf	prodl,w,c
 10292  0027DC  6EF6               	movwf	tblptrl,c
 10293  0027DE  0E10               	movlw	high __powers_
 10294  0027E0  20F4               	addwfc	prodh,w,c
 10295  0027E2  6EF7               	movwf	tblptrh,c
 10296  0027E4                     	if	0	;There are less than 3 active tblptr bytes
 10297  0027E4                     	endif
 10298  0027E4  0009               	tblrd		*+
 10299  0027E6  CFF5 F024          	movff	tablat,?i2_scale
 10300  0027EA  0009               	tblrd		*+
 10301  0027EC  CFF5 F025          	movff	tablat,?i2_scale+1
 10302  0027F0  000A               	tblrd		*-
 10303  0027F2  CFF5 F026          	movff	tablat,?i2_scale+2
 10304  0027F6  0012               	return	
 10305  0027F8                     __end_ofi2_scale:
 10306                           	opt stack 0
 10307                           pclatu	equ	0xFFB
 10308                           pclath	equ	0xFFA
 10309                           tblptru	equ	0xFF8
 10310                           tblptrh	equ	0xFF7
 10311                           tblptrl	equ	0xFF6
 10312                           tablat	equ	0xFF5
 10313                           prodh	equ	0xFF4
 10314                           prodl	equ	0xFF3
 10315                           intcon	equ	0xFF2
 10316                           fsr0h	equ	0xFEA
 10317                           fsr0l	equ	0xFE9
 10318                           wreg	equ	0xFE8
 10319                           fsr1h	equ	0xFE2
 10320                           fsr1l	equ	0xFE1
 10321                           indf2	equ	0xFDF
 10322                           postinc2	equ	0xFDE
 10323                           postdec2	equ	0xFDD
 10324                           fsr2h	equ	0xFDA
 10325                           fsr2l	equ	0xFD9
 10326                           status	equ	0xFD8
 10327                           
 10328 ;; *************** function i2_putch *****************
 10329 ;; Defined at:
 10330 ;;		line 35 in file "lcd.c"
 10331 ;; Parameters:    Size  Location     Type
 10332 ;;  data            1    wreg     unsigned char 
 10333 ;; Auto vars:     Size  Location     Type
 10334 ;;  data            1    4[COMRAM] unsigned char 
 10335 ;; Return value:  Size  Location     Type
 10336 ;;                  1    wreg      void 
 10337 ;; Registers used:
 10338 ;;		wreg, status,2, status,0, cstack
 10339 ;; Tracked objects:
 10340 ;;		On entry : 0/0
 10341 ;;		On exit  : 0/0
 10342 ;;		Unchanged: 0/0
 10343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10345 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10347 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10348 ;;Total ram usage:        1 bytes
 10349 ;; Hardware stack levels used:    1
 10350 ;; Hardware stack levels required when called:    3
 10351 ;; This function calls:
 10352 ;;		i2_lcdNewline
 10353 ;;		i2_lcdNibble
 10354 ;; This function is called by:
 10355 ;;		i2_printf
 10356 ;; This function uses a non-reentrant model
 10357 ;;
 10358                           
 10359                           	psect	text38
 10360  004C14                     __ptext38:
 10361                           	opt stack 0
 10362  004C14                     i2_putch:
 10363                           	opt stack 19
 10364                           
 10365                           ;incstack = 0
 10366                           ;i2putch@data stored from wreg
 10367  004C14  6E05               	movwf	i2putch@data,c
 10368                           
 10369                           ;lcd.c: 36: if(data == '\n')lcdNewline();
 10370  004C16  0E0A               	movlw	10
 10371  004C18  1805               	xorwf	i2putch@data,w,c
 10372  004C1A  A4D8               	btfss	status,2,c
 10373  004C1C  D003               	goto	i2l79
 10374  004C1E  EC63  F026         	call	i2_lcdNewline	;wreg free
 10375  004C22  0012               	return	
 10376  004C24                     i2l79:
 10377                           
 10378                           ;lcd.c: 37: else
 10379                           ;lcd.c: 38: {
 10380                           ;lcd.c: 39: LATDbits.LATD2 = 1;
 10381  004C24  848C               	bsf	3980,2,c	;volatile
 10382                           
 10383                           ;lcd.c: 40: _delay((unsigned long)((140)*(8000000/4000000.0)));
 10384  004C26  0E5D               	movlw	93
 10385  004C28                     i2u566_47:
 10386  004C28  2EE8               	decfsz	wreg,f,c
 10387  004C2A  D7FE               	bra	i2u566_47
 10388  004C2C  F000               	nop	
 10389                           
 10390                           ;lcd.c: 41: lcdNibble(data);
 10391  004C2E  5005               	movf	i2putch@data,w,c
 10392  004C30  ECDE  F024         	call	i2_lcdNibble
 10393  004C34  0012               	return	
 10394  004C36                     __end_ofi2_putch:
 10395                           	opt stack 0
 10396                           pclatu	equ	0xFFB
 10397                           pclath	equ	0xFFA
 10398                           tblptru	equ	0xFF8
 10399                           tblptrh	equ	0xFF7
 10400                           tblptrl	equ	0xFF6
 10401                           tablat	equ	0xFF5
 10402                           prodh	equ	0xFF4
 10403                           prodl	equ	0xFF3
 10404                           intcon	equ	0xFF2
 10405                           fsr0h	equ	0xFEA
 10406                           fsr0l	equ	0xFE9
 10407                           wreg	equ	0xFE8
 10408                           fsr1h	equ	0xFE2
 10409                           fsr1l	equ	0xFE1
 10410                           indf2	equ	0xFDF
 10411                           postinc2	equ	0xFDE
 10412                           postdec2	equ	0xFDD
 10413                           fsr2h	equ	0xFDA
 10414                           fsr2l	equ	0xFD9
 10415                           status	equ	0xFD8
 10416                           
 10417 ;; *************** function i2_lcdNewline *****************
 10418 ;; Defined at:
 10419 ;;		line 78 in file "lcd.c"
 10420 ;; Parameters:    Size  Location     Type
 10421 ;;		None
 10422 ;; Auto vars:     Size  Location     Type
 10423 ;;		None
 10424 ;; Return value:  Size  Location     Type
 10425 ;;                  1    wreg      void 
 10426 ;; Registers used:
 10427 ;;		wreg, status,2, status,0, cstack
 10428 ;; Tracked objects:
 10429 ;;		On entry : 0/0
 10430 ;;		On exit  : 0/0
 10431 ;;		Unchanged: 0/0
 10432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10437 ;;Total ram usage:        0 bytes
 10438 ;; Hardware stack levels used:    1
 10439 ;; Hardware stack levels required when called:    2
 10440 ;; This function calls:
 10441 ;;		i2_lcdInst
 10442 ;; This function is called by:
 10443 ;;		i2_putch
 10444 ;; This function uses a non-reentrant model
 10445 ;;
 10446                           
 10447                           	psect	text39
 10448  004CC6                     __ptext39:
 10449                           	opt stack 0
 10450  004CC6                     i2_lcdNewline:
 10451                           	opt stack 19
 10452                           
 10453                           ;lcd.c: 79: lcdInst(0b11000000);
 10454                           
 10455                           ;incstack = 0
 10456  004CC6  0EC0               	movlw	192
 10457  004CC8  EC1B  F026         	call	i2_lcdInst
 10458  004CCC  0012               	return		;funcret
 10459  004CCE                     __end_ofi2_lcdNewline:
 10460                           	opt stack 0
 10461                           pclatu	equ	0xFFB
 10462                           pclath	equ	0xFFA
 10463                           tblptru	equ	0xFF8
 10464                           tblptrh	equ	0xFF7
 10465                           tblptrl	equ	0xFF6
 10466                           tablat	equ	0xFF5
 10467                           prodh	equ	0xFF4
 10468                           prodl	equ	0xFF3
 10469                           intcon	equ	0xFF2
 10470                           fsr0h	equ	0xFEA
 10471                           fsr0l	equ	0xFE9
 10472                           wreg	equ	0xFE8
 10473                           fsr1h	equ	0xFE2
 10474                           fsr1l	equ	0xFE1
 10475                           indf2	equ	0xFDF
 10476                           postinc2	equ	0xFDE
 10477                           postdec2	equ	0xFDD
 10478                           fsr2h	equ	0xFDA
 10479                           fsr2l	equ	0xFD9
 10480                           status	equ	0xFD8
 10481                           
 10482 ;; *************** function i2_lcdInst *****************
 10483 ;; Defined at:
 10484 ;;		line 27 in file "lcd.c"
 10485 ;; Parameters:    Size  Location     Type
 10486 ;;  data            1    wreg     unsigned char 
 10487 ;; Auto vars:     Size  Location     Type
 10488 ;;  data            1    3[COMRAM] unsigned char 
 10489 ;; Return value:  Size  Location     Type
 10490 ;;                  1    wreg      void 
 10491 ;; Registers used:
 10492 ;;		wreg, status,2, status,0, cstack
 10493 ;; Tracked objects:
 10494 ;;		On entry : 0/0
 10495 ;;		On exit  : 0/0
 10496 ;;		Unchanged: 0/0
 10497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10499 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10500 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10501 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10502 ;;Total ram usage:        2 bytes
 10503 ;; Hardware stack levels used:    1
 10504 ;; Hardware stack levels required when called:    1
 10505 ;; This function calls:
 10506 ;;		i2_lcdNibble
 10507 ;; This function is called by:
 10508 ;;		i2_lcdNewline
 10509 ;; This function uses a non-reentrant model
 10510 ;;
 10511                           
 10512                           	psect	text40
 10513  004C36                     __ptext40:
 10514                           	opt stack 0
 10515  004C36                     i2_lcdInst:
 10516                           	opt stack 19
 10517                           
 10518                           ;incstack = 0
 10519                           ;i2lcdInst@data stored from wreg
 10520  004C36  6E04               	movwf	i2lcdInst@data,c
 10521                           
 10522                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 10523  004C38  948C               	bcf	3980,2,c	;volatile
 10524                           
 10525                           ;lcd.c: 29: _delay((unsigned long)((140)*(8000000/4000000.0)));
 10526  004C3A  0E5D               	movlw	93
 10527  004C3C                     i2u567_47:
 10528  004C3C  2EE8               	decfsz	wreg,f,c
 10529  004C3E  D7FE               	bra	i2u567_47
 10530  004C40  F000               	nop	
 10531                           
 10532                           ;lcd.c: 30: lcdNibble(data);
 10533  004C42  5004               	movf	i2lcdInst@data,w,c
 10534  004C44  ECDE  F024         	call	i2_lcdNibble
 10535                           
 10536                           ;lcd.c: 31: _delay((unsigned long)((1000)*(8000000/4000000.0)));
 10537  004C48  0E03               	movlw	3
 10538  004C4A  6E03               	movwf	??i2_lcdInst& (0+255),c
 10539  004C4C  0E98               	movlw	152
 10540  004C4E                     i2u568_47:
 10541  004C4E  2EE8               	decfsz	wreg,f,c
 10542  004C50  D7FE               	bra	i2u568_47
 10543  004C52  2E03               	decfsz	??i2_lcdInst& (0+255),f,c
 10544  004C54  D7FC               	bra	i2u568_47
 10545  004C56  0012               	return		;funcret
 10546  004C58                     __end_ofi2_lcdInst:
 10547                           	opt stack 0
 10548                           pclatu	equ	0xFFB
 10549                           pclath	equ	0xFFA
 10550                           tblptru	equ	0xFF8
 10551                           tblptrh	equ	0xFF7
 10552                           tblptrl	equ	0xFF6
 10553                           tablat	equ	0xFF5
 10554                           prodh	equ	0xFF4
 10555                           prodl	equ	0xFF3
 10556                           intcon	equ	0xFF2
 10557                           fsr0h	equ	0xFEA
 10558                           fsr0l	equ	0xFE9
 10559                           wreg	equ	0xFE8
 10560                           fsr1h	equ	0xFE2
 10561                           fsr1l	equ	0xFE1
 10562                           indf2	equ	0xFDF
 10563                           postinc2	equ	0xFDE
 10564                           postdec2	equ	0xFDD
 10565                           fsr2h	equ	0xFDA
 10566                           fsr2l	equ	0xFD9
 10567                           status	equ	0xFD8
 10568                           
 10569 ;; *************** function i2_lcdNibble *****************
 10570 ;; Defined at:
 10571 ;;		line 46 in file "lcd.c"
 10572 ;; Parameters:    Size  Location     Type
 10573 ;;  data            1    wreg     unsigned char 
 10574 ;; Auto vars:     Size  Location     Type
 10575 ;;  data            1    1[COMRAM] unsigned char 
 10576 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 10577 ;; Return value:  Size  Location     Type
 10578 ;;                  1    wreg      void 
 10579 ;; Registers used:
 10580 ;;		wreg, status,2, status,0
 10581 ;; Tracked objects:
 10582 ;;		On entry : 0/0
 10583 ;;		On exit  : 0/0
 10584 ;;		Unchanged: 0/0
 10585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10587 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10589 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10590 ;;Total ram usage:        2 bytes
 10591 ;; Hardware stack levels used:    1
 10592 ;; This function calls:
 10593 ;;		Nothing
 10594 ;; This function is called by:
 10595 ;;		i2_lcdInst
 10596 ;;		i2_putch
 10597 ;; This function uses a non-reentrant model
 10598 ;;
 10599                           
 10600                           	psect	text41
 10601  0049BC                     __ptext41:
 10602                           	opt stack 0
 10603  0049BC                     i2_lcdNibble:
 10604                           	opt stack 21
 10605                           
 10606                           ;incstack = 0
 10607                           ;i2lcdNibble@data stored from wreg
 10608  0049BC  6E02               	movwf	i2lcdNibble@data,c
 10609                           
 10610                           ;lcd.c: 48: char temp = data & 0xF0;
 10611  0049BE  5002               	movf	i2lcdNibble@data,w,c
 10612  0049C0  0BF0               	andlw	240
 10613  0049C2  6E01               	movwf	i2lcdNibble@temp,c
 10614                           
 10615                           ;lcd.c: 49: LATD = LATD & 0x0F;
 10616  0049C4  508C               	movf	3980,w,c	;volatile
 10617  0049C6  0B0F               	andlw	15
 10618  0049C8  6E8C               	movwf	3980,c	;volatile
 10619                           
 10620                           ;lcd.c: 50: LATD = temp | LATD;
 10621  0049CA  5001               	movf	i2lcdNibble@temp,w,c
 10622  0049CC  108C               	iorwf	3980,w,c	;volatile
 10623  0049CE  6E8C               	movwf	3980,c	;volatile
 10624                           
 10625                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 10626  0049D0  968C               	bcf	3980,3,c	;volatile
 10627                           
 10628                           ;lcd.c: 53: _delay((unsigned long)((600)*(8000000/4000000.0)));
 10629  0049D2  0EF0               	movlw	240
 10630  0049D4                     i2u569_47:
 10631  0049D4  D000               	nop2	
 10632  0049D6  2EE8               	decfsz	wreg,f,c
 10633  0049D8  D7FD               	bra	i2u569_47
 10634                           
 10635                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 10636  0049DA  868C               	bsf	3980,3,c	;volatile
 10637                           
 10638                           ;lcd.c: 55: _delay((unsigned long)((600)*(8000000/4000000.0)));
 10639  0049DC  0EF0               	movlw	240
 10640  0049DE                     i2u570_47:
 10641  0049DE  D000               	nop2	
 10642  0049E0  2EE8               	decfsz	wreg,f,c
 10643  0049E2  D7FD               	bra	i2u570_47
 10644                           
 10645                           ;lcd.c: 58: data = data << 4;
 10646  0049E4  3802               	swapf	i2lcdNibble@data,w,c
 10647  0049E6  0BF0               	andlw	240
 10648  0049E8  6E02               	movwf	i2lcdNibble@data,c
 10649                           
 10650                           ;lcd.c: 60: temp = data & 0xF0;
 10651  0049EA  5002               	movf	i2lcdNibble@data,w,c
 10652  0049EC  0BF0               	andlw	240
 10653  0049EE  6E01               	movwf	i2lcdNibble@temp,c
 10654                           
 10655                           ;lcd.c: 61: LATD = LATD & 0x0F;
 10656  0049F0  508C               	movf	3980,w,c	;volatile
 10657  0049F2  0B0F               	andlw	15
 10658  0049F4  6E8C               	movwf	3980,c	;volatile
 10659                           
 10660                           ;lcd.c: 62: LATD = temp | LATD;
 10661  0049F6  5001               	movf	i2lcdNibble@temp,w,c
 10662  0049F8  108C               	iorwf	3980,w,c	;volatile
 10663  0049FA  6E8C               	movwf	3980,c	;volatile
 10664                           
 10665                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 10666  0049FC  968C               	bcf	3980,3,c	;volatile
 10667                           
 10668                           ;lcd.c: 65: _delay((unsigned long)((600)*(8000000/4000000.0)));
 10669  0049FE  0EF0               	movlw	240
 10670  004A00                     i2u571_47:
 10671  004A00  D000               	nop2	
 10672  004A02  2EE8               	decfsz	wreg,f,c
 10673  004A04  D7FD               	bra	i2u571_47
 10674                           
 10675                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 10676  004A06  868C               	bsf	3980,3,c	;volatile
 10677                           
 10678                           ;lcd.c: 67: _delay((unsigned long)((600)*(8000000/4000000.0)));
 10679  004A08  0EF0               	movlw	240
 10680  004A0A                     i2u572_47:
 10681  004A0A  D000               	nop2	
 10682  004A0C  2EE8               	decfsz	wreg,f,c
 10683  004A0E  D7FD               	bra	i2u572_47
 10684  004A10  0012               	return		;funcret
 10685  004A12                     __end_ofi2_lcdNibble:
 10686                           	opt stack 0
 10687                           pclatu	equ	0xFFB
 10688                           pclath	equ	0xFFA
 10689                           tblptru	equ	0xFF8
 10690                           tblptrh	equ	0xFF7
 10691                           tblptrl	equ	0xFF6
 10692                           tablat	equ	0xFF5
 10693                           prodh	equ	0xFF4
 10694                           prodl	equ	0xFF3
 10695                           intcon	equ	0xFF2
 10696                           fsr0h	equ	0xFEA
 10697                           fsr0l	equ	0xFE9
 10698                           wreg	equ	0xFE8
 10699                           fsr1h	equ	0xFE2
 10700                           fsr1l	equ	0xFE1
 10701                           indf2	equ	0xFDF
 10702                           postinc2	equ	0xFDE
 10703                           postdec2	equ	0xFDD
 10704                           fsr2h	equ	0xFDA
 10705                           fsr2l	equ	0xFD9
 10706                           status	equ	0xFD8
 10707                           
 10708 ;; *************** function i2_fround *****************
 10709 ;; Defined at:
 10710 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 10711 ;; Parameters:    Size  Location     Type
 10712 ;;  prec            1    wreg     unsigned char 
 10713 ;; Auto vars:     Size  Location     Type
 10714 ;;  prec            1   44[COMRAM] unsigned char 
 10715 ;; Return value:  Size  Location     Type
 10716 ;;                  3   35[COMRAM] unsigned char 
 10717 ;; Registers used:
 10718 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10719 ;; Tracked objects:
 10720 ;;		On entry : 0/0
 10721 ;;		On exit  : 0/0
 10722 ;;		Unchanged: 0/0
 10723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10724 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10725 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10727 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10728 ;;Total ram usage:       10 bytes
 10729 ;; Hardware stack levels used:    1
 10730 ;; Hardware stack levels required when called:    2
 10731 ;; This function calls:
 10732 ;;		i2___awdiv
 10733 ;;		i2___awmod
 10734 ;;		i2___ftmul
 10735 ;;		i2___wmul
 10736 ;; This function is called by:
 10737 ;;		i2_printf
 10738 ;; This function uses a non-reentrant model
 10739 ;;
 10740                           
 10741                           	psect	text42
 10742  002FA0                     __ptext42:
 10743                           	opt stack 0
 10744  002FA0                     i2_fround:
 10745                           	opt stack 20
 10746                           
 10747                           ;incstack = 0
 10748                           ;i2fround@prec stored from wreg
 10749  002FA0  6E2D               	movwf	i2fround@prec,c
 10750                           
 10751                           ;doprnt.c: 413: if(prec>=110)
 10752  002FA2  0E6D               	movlw	109
 10753  002FA4  642D               	cpfsgt	i2fround@prec,c
 10754  002FA6  D09F               	goto	i2l4218
 10755                           
 10756                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10757  002FA8  0E00               	movlw	0
 10758  002FAA  6E12               	movwf	i2___wmul@multiplicand+1,c
 10759  002FAC  0E03               	movlw	3
 10760  002FAE  6E11               	movwf	i2___wmul@multiplicand,c
 10761  002FB0  0E00               	movlw	0
 10762  002FB2  6E0A               	movwf	i2___awdiv@divisor+1,c
 10763  002FB4  0E0A               	movlw	10
 10764  002FB6  6E09               	movwf	i2___awdiv@divisor,c
 10765  002FB8  0E00               	movlw	0
 10766  002FBA  6E04               	movwf	i2___awmod@divisor+1,c
 10767  002FBC  0E64               	movlw	100
 10768  002FBE  6E03               	movwf	i2___awmod@divisor,c
 10769  002FC0  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 10770  002FC4  6A02               	clrf	i2___awmod@dividend+1,c
 10771  002FC6  ECAC  F023         	call	i2___awmod	;wreg free
 10772  002FCA  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 10773  002FCE  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 10774  002FD2  ECEB  F022         	call	i2___awdiv	;wreg free
 10775  002FD6  0E09               	movlw	9
 10776  002FD8  2407               	addwf	?i2___awdiv,w,c
 10777  002FDA  6E0F               	movwf	i2___wmul@multiplier,c
 10778  002FDC  0E00               	movlw	0
 10779  002FDE  2008               	addwfc	?i2___awdiv+1,w,c
 10780  002FE0  6E10               	movwf	i2___wmul@multiplier+1,c
 10781  002FE2  ECE5  F025         	call	i2___wmul	;wreg free
 10782  002FE6  0E29               	movlw	low __npowers_
 10783  002FE8  240F               	addwf	?i2___wmul,w,c
 10784  002FEA  6EF6               	movwf	tblptrl,c
 10785  002FEC  0E10               	movlw	high __npowers_
 10786  002FEE  2010               	addwfc	?i2___wmul+1,w,c
 10787  002FF0  6EF7               	movwf	tblptrh,c
 10788  002FF2                     	if	0	;There are less than 3 active tblptr bytes
 10789  002FF2                     	endif
 10790  002FF2  0009               	tblrd		*+
 10791  002FF4  CFF5 F018          	movff	tablat,i2___ftmul@f2
 10792  002FF8  0009               	tblrd		*+
 10793  002FFA  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 10794  002FFE  000A               	tblrd		*-
 10795  003000  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 10796  003004  0E00               	movlw	0
 10797  003006  6E0A               	movwf	i2___awdiv@divisor+1,c
 10798  003008  0E64               	movlw	100
 10799  00300A  6E09               	movwf	i2___awdiv@divisor,c
 10800  00300C  C02D  F007         	movff	i2fround@prec,i2___awdiv@dividend
 10801  003010  6A08               	clrf	i2___awdiv@dividend+1,c
 10802  003012  ECEB  F022         	call	i2___awdiv	;wreg free
 10803  003016  0E12               	movlw	18
 10804  003018  2407               	addwf	?i2___awdiv,w,c
 10805  00301A  6E0F               	movwf	i2___wmul@multiplier,c
 10806  00301C  0E00               	movlw	0
 10807  00301E  2008               	addwfc	?i2___awdiv+1,w,c
 10808  003020  6E10               	movwf	i2___wmul@multiplier+1,c
 10809  003022  0E00               	movlw	0
 10810  003024  6E12               	movwf	i2___wmul@multiplicand+1,c
 10811  003026  0E03               	movlw	3
 10812  003028  6E11               	movwf	i2___wmul@multiplicand,c
 10813  00302A  ECE5  F025         	call	i2___wmul	;wreg free
 10814  00302E  0E29               	movlw	low __npowers_
 10815  003030  240F               	addwf	?i2___wmul,w,c
 10816  003032  6EF6               	movwf	tblptrl,c
 10817  003034  0E10               	movlw	high __npowers_
 10818  003036  2010               	addwfc	?i2___wmul+1,w,c
 10819  003038  6EF7               	movwf	tblptrh,c
 10820  00303A                     	if	0	;There are less than 3 active tblptr bytes
 10821  00303A                     	endif
 10822  00303A  0009               	tblrd		*+
 10823  00303C  CFF5 F015          	movff	tablat,i2___ftmul@f1
 10824  003040  0009               	tblrd		*+
 10825  003042  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 10826  003046  000A               	tblrd		*-
 10827  003048  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 10828  00304C  EC06  F01F         	call	i2___ftmul	;wreg free
 10829  003050  C015  F02A         	movff	?i2___ftmul,i2_fround$1244
 10830  003054  C016  F02B         	movff	?i2___ftmul+1,i2_fround$1244+1
 10831  003058  C017  F02C         	movff	?i2___ftmul+2,i2_fround$1244+2
 10832                           
 10833                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10834  00305C  0E00               	movlw	0
 10835  00305E  6E12               	movwf	i2___wmul@multiplicand+1,c
 10836  003060  0E03               	movlw	3
 10837  003062  6E11               	movwf	i2___wmul@multiplicand,c
 10838  003064  0E00               	movlw	0
 10839  003066  6E04               	movwf	i2___awmod@divisor+1,c
 10840  003068  0E0A               	movlw	10
 10841  00306A  6E03               	movwf	i2___awmod@divisor,c
 10842  00306C  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 10843  003070  6A02               	clrf	i2___awmod@dividend+1,c
 10844  003072  ECAC  F023         	call	i2___awmod	;wreg free
 10845  003076  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 10846  00307A  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 10847  00307E  ECE5  F025         	call	i2___wmul	;wreg free
 10848  003082  0E29               	movlw	low __npowers_
 10849  003084  240F               	addwf	?i2___wmul,w,c
 10850  003086  6EF6               	movwf	tblptrl,c
 10851  003088  0E10               	movlw	high __npowers_
 10852  00308A  2010               	addwfc	?i2___wmul+1,w,c
 10853  00308C  6EF7               	movwf	tblptrh,c
 10854  00308E                     	if	0	;There are less than 3 active tblptr bytes
 10855  00308E                     	endif
 10856  00308E  0009               	tblrd		*+
 10857  003090  CFF5 F018          	movff	tablat,i2___ftmul@f2
 10858  003094  0009               	tblrd		*+
 10859  003096  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 10860  00309A  000A               	tblrd		*-
 10861  00309C  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 10862  0030A0  C02A  F015         	movff	i2_fround$1244,i2___ftmul@f1
 10863  0030A4  C02B  F016         	movff	i2_fround$1244+1,i2___ftmul@f1+1
 10864  0030A8  C02C  F017         	movff	i2_fround$1244+2,i2___ftmul@f1+2
 10865  0030AC  EC06  F01F         	call	i2___ftmul	;wreg free
 10866  0030B0  C015  F027         	movff	?i2___ftmul,i2_fround$1245
 10867  0030B4  C016  F028         	movff	?i2___ftmul+1,i2_fround$1245+1
 10868  0030B8  C017  F029         	movff	?i2___ftmul+2,i2_fround$1245+2
 10869                           
 10870                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10871  0030BC  C027  F015         	movff	i2_fround$1245,i2___ftmul@f1
 10872  0030C0  C028  F016         	movff	i2_fround$1245+1,i2___ftmul@f1+1
 10873  0030C4  C029  F017         	movff	i2_fround$1245+2,i2___ftmul@f1+2
 10874  0030C8  0E00               	movlw	0
 10875  0030CA  6E18               	movwf	i2___ftmul@f2,c
 10876  0030CC  0E00               	movlw	0
 10877  0030CE  6E19               	movwf	i2___ftmul@f2+1,c
 10878  0030D0  0E3F               	movlw	63
 10879  0030D2  6E1A               	movwf	i2___ftmul@f2+2,c
 10880  0030D4  EC06  F01F         	call	i2___ftmul	;wreg free
 10881  0030D8  C015  F024         	movff	?i2___ftmul,?i2_fround
 10882  0030DC  C016  F025         	movff	?i2___ftmul+1,?i2_fround+1
 10883  0030E0  C017  F026         	movff	?i2___ftmul+2,?i2_fround+2
 10884  0030E4  0012               	return	
 10885  0030E6                     i2l4218:
 10886                           
 10887                           ;doprnt.c: 415: else if(prec > 10)
 10888  0030E6  0E0A               	movlw	10
 10889  0030E8  642D               	cpfsgt	i2fround@prec,c
 10890  0030EA  D05D               	goto	i2l4226
 10891                           
 10892                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 10893  0030EC  0E00               	movlw	0
 10894  0030EE  6E12               	movwf	i2___wmul@multiplicand+1,c
 10895  0030F0  0E03               	movlw	3
 10896  0030F2  6E11               	movwf	i2___wmul@multiplicand,c
 10897  0030F4  0E00               	movlw	0
 10898  0030F6  6E04               	movwf	i2___awmod@divisor+1,c
 10899  0030F8  0E0A               	movlw	10
 10900  0030FA  6E03               	movwf	i2___awmod@divisor,c
 10901  0030FC  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 10902  003100  6A02               	clrf	i2___awmod@dividend+1,c
 10903  003102  ECAC  F023         	call	i2___awmod	;wreg free
 10904  003106  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 10905  00310A  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 10906  00310E  ECE5  F025         	call	i2___wmul	;wreg free
 10907  003112  0E29               	movlw	low __npowers_
 10908  003114  240F               	addwf	?i2___wmul,w,c
 10909  003116  6EF6               	movwf	tblptrl,c
 10910  003118  0E10               	movlw	high __npowers_
 10911  00311A  2010               	addwfc	?i2___wmul+1,w,c
 10912  00311C  6EF7               	movwf	tblptrh,c
 10913  00311E                     	if	0	;There are less than 3 active tblptr bytes
 10914  00311E                     	endif
 10915  00311E  0009               	tblrd		*+
 10916  003120  CFF5 F018          	movff	tablat,i2___ftmul@f2
 10917  003124  0009               	tblrd		*+
 10918  003126  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 10919  00312A  000A               	tblrd		*-
 10920  00312C  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 10921  003130  0E00               	movlw	0
 10922  003132  6E0A               	movwf	i2___awdiv@divisor+1,c
 10923  003134  0E0A               	movlw	10
 10924  003136  6E09               	movwf	i2___awdiv@divisor,c
 10925  003138  C02D  F007         	movff	i2fround@prec,i2___awdiv@dividend
 10926  00313C  6A08               	clrf	i2___awdiv@dividend+1,c
 10927  00313E  ECEB  F022         	call	i2___awdiv	;wreg free
 10928  003142  0E09               	movlw	9
 10929  003144  2407               	addwf	?i2___awdiv,w,c
 10930  003146  6E0F               	movwf	i2___wmul@multiplier,c
 10931  003148  0E00               	movlw	0
 10932  00314A  2008               	addwfc	?i2___awdiv+1,w,c
 10933  00314C  6E10               	movwf	i2___wmul@multiplier+1,c
 10934  00314E  0E00               	movlw	0
 10935  003150  6E12               	movwf	i2___wmul@multiplicand+1,c
 10936  003152  0E03               	movlw	3
 10937  003154  6E11               	movwf	i2___wmul@multiplicand,c
 10938  003156  ECE5  F025         	call	i2___wmul	;wreg free
 10939  00315A  0E29               	movlw	low __npowers_
 10940  00315C  240F               	addwf	?i2___wmul,w,c
 10941  00315E  6EF6               	movwf	tblptrl,c
 10942  003160  0E10               	movlw	high __npowers_
 10943  003162  2010               	addwfc	?i2___wmul+1,w,c
 10944  003164  6EF7               	movwf	tblptrh,c
 10945  003166                     	if	0	;There are less than 3 active tblptr bytes
 10946  003166                     	endif
 10947  003166  0009               	tblrd		*+
 10948  003168  CFF5 F015          	movff	tablat,i2___ftmul@f1
 10949  00316C  0009               	tblrd		*+
 10950  00316E  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 10951  003172  000A               	tblrd		*-
 10952  003174  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 10953  003178  EC06  F01F         	call	i2___ftmul	;wreg free
 10954  00317C  C015  F02A         	movff	?i2___ftmul,i2_fround$1244
 10955  003180  C016  F02B         	movff	?i2___ftmul+1,i2_fround$1244+1
 10956  003184  C017  F02C         	movff	?i2___ftmul+2,i2_fround$1244+2
 10957                           
 10958                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 10959  003188  C02A  F015         	movff	i2_fround$1244,i2___ftmul@f1
 10960  00318C  C02B  F016         	movff	i2_fround$1244+1,i2___ftmul@f1+1
 10961  003190  C02C  F017         	movff	i2_fround$1244+2,i2___ftmul@f1+2
 10962  003194  0E00               	movlw	0
 10963  003196  6E18               	movwf	i2___ftmul@f2,c
 10964  003198  0E00               	movlw	0
 10965  00319A  6E19               	movwf	i2___ftmul@f2+1,c
 10966  00319C  0E3F               	movlw	63
 10967  00319E  6E1A               	movwf	i2___ftmul@f2+2,c
 10968  0031A0  EC06  F01F         	call	i2___ftmul	;wreg free
 10969  0031A4  D799               	goto	L8
 10970  0031A6                     i2l4226:
 10971                           
 10972                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 10973  0031A6  502D               	movf	i2fround@prec,w,c
 10974  0031A8  0D03               	mullw	3
 10975  0031AA  0E29               	movlw	low __npowers_
 10976  0031AC  24F3               	addwf	prodl,w,c
 10977  0031AE  6EF6               	movwf	tblptrl,c
 10978  0031B0  0E10               	movlw	high __npowers_
 10979  0031B2  20F4               	addwfc	prodh,w,c
 10980  0031B4  6EF7               	movwf	tblptrh,c
 10981  0031B6                     	if	0	;There are less than 3 active tblptr bytes
 10982  0031B6                     	endif
 10983  0031B6  0009               	tblrd		*+
 10984  0031B8  CFF5 F015          	movff	tablat,i2___ftmul@f1
 10985  0031BC  0009               	tblrd		*+
 10986  0031BE  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 10987  0031C2  000A               	tblrd		*-
 10988  0031C4  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 10989  0031C8  0E00               	movlw	0
 10990  0031CA  6E18               	movwf	i2___ftmul@f2,c
 10991  0031CC  0E00               	movlw	0
 10992  0031CE  6E19               	movwf	i2___ftmul@f2+1,c
 10993  0031D0  0E3F               	movlw	63
 10994  0031D2  6E1A               	movwf	i2___ftmul@f2+2,c
 10995  0031D4  EC06  F01F         	call	i2___ftmul	;wreg free
 10996  0031D8  C015  F024         	movff	?i2___ftmul,?i2_fround
 10997  0031DC  C016  F025         	movff	?i2___ftmul+1,?i2_fround+1
 10998  0031E0  C017  F026         	movff	?i2___ftmul+2,?i2_fround+2
 10999  0031E4  0012               	return	
 11000  0031E6                     __end_ofi2_fround:
 11001                           	opt stack 0
 11002                           pclatu	equ	0xFFB
 11003                           pclath	equ	0xFFA
 11004                           tblptru	equ	0xFF8
 11005                           tblptrh	equ	0xFF7
 11006                           tblptrl	equ	0xFF6
 11007                           tablat	equ	0xFF5
 11008                           prodh	equ	0xFF4
 11009                           prodl	equ	0xFF3
 11010                           intcon	equ	0xFF2
 11011                           fsr0h	equ	0xFEA
 11012                           fsr0l	equ	0xFE9
 11013                           wreg	equ	0xFE8
 11014                           fsr1h	equ	0xFE2
 11015                           fsr1l	equ	0xFE1
 11016                           indf2	equ	0xFDF
 11017                           postinc2	equ	0xFDE
 11018                           postdec2	equ	0xFDD
 11019                           fsr2h	equ	0xFDA
 11020                           fsr2l	equ	0xFD9
 11021                           status	equ	0xFD8
 11022                           
 11023 ;; *************** function i2___wmul *****************
 11024 ;; Defined at:
 11025 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 11026 ;; Parameters:    Size  Location     Type
 11027 ;;  multiplier      2   14[COMRAM] unsigned int 
 11028 ;;  multiplicand    2   16[COMRAM] unsigned int 
 11029 ;; Auto vars:     Size  Location     Type
 11030 ;;  __wmul          2   18[COMRAM] unsigned int 
 11031 ;; Return value:  Size  Location     Type
 11032 ;;                  2   14[COMRAM] unsigned int 
 11033 ;; Registers used:
 11034 ;;		wreg, status,2, status,0, prodl, prodh
 11035 ;; Tracked objects:
 11036 ;;		On entry : 0/0
 11037 ;;		On exit  : 0/0
 11038 ;;		Unchanged: 0/0
 11039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11040 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11041 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11043 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11044 ;;Total ram usage:        6 bytes
 11045 ;; Hardware stack levels used:    1
 11046 ;; This function calls:
 11047 ;;		Nothing
 11048 ;; This function is called by:
 11049 ;;		i2_fround
 11050 ;;		i2_scale
 11051 ;;		i2_printf
 11052 ;; This function uses a non-reentrant model
 11053 ;;
 11054                           
 11055                           	psect	text43
 11056  004BCA                     __ptext43:
 11057                           	opt stack 0
 11058  004BCA                     i2___wmul:
 11059                           	opt stack 21
 11060                           
 11061                           ;incstack = 0
 11062  004BCA  500F               	movf	i2___wmul@multiplier,w,c
 11063  004BCC  0211               	mulwf	i2___wmul@multiplicand,c
 11064  004BCE  CFF3 F013          	movff	prodl,i2___wmul@product
 11065  004BD2  CFF4 F014          	movff	prodh,i2___wmul@product+1
 11066  004BD6  500F               	movf	i2___wmul@multiplier,w,c
 11067  004BD8  0212               	mulwf	i2___wmul@multiplicand+1,c
 11068  004BDA  50F3               	movf	prodl,w,c
 11069  004BDC  2614               	addwf	i2___wmul@product+1,f,c
 11070  004BDE  5010               	movf	i2___wmul@multiplier+1,w,c
 11071  004BE0  0211               	mulwf	i2___wmul@multiplicand,c
 11072  004BE2  50F3               	movf	prodl,w,c
 11073  004BE4  2614               	addwf	i2___wmul@product+1,f,c
 11074  004BE6  C013  F00F         	movff	i2___wmul@product,?i2___wmul
 11075  004BEA  C014  F010         	movff	i2___wmul@product+1,?i2___wmul+1
 11076  004BEE  0012               	return	
 11077  004BF0                     __end_ofi2___wmul:
 11078                           	opt stack 0
 11079                           pclatu	equ	0xFFB
 11080                           pclath	equ	0xFFA
 11081                           tblptru	equ	0xFF8
 11082                           tblptrh	equ	0xFF7
 11083                           tblptrl	equ	0xFF6
 11084                           tablat	equ	0xFF5
 11085                           prodh	equ	0xFF4
 11086                           prodl	equ	0xFF3
 11087                           intcon	equ	0xFF2
 11088                           fsr0h	equ	0xFEA
 11089                           fsr0l	equ	0xFE9
 11090                           wreg	equ	0xFE8
 11091                           fsr1h	equ	0xFE2
 11092                           fsr1l	equ	0xFE1
 11093                           indf2	equ	0xFDF
 11094                           postinc2	equ	0xFDE
 11095                           postdec2	equ	0xFDD
 11096                           fsr2h	equ	0xFDA
 11097                           fsr2l	equ	0xFD9
 11098                           status	equ	0xFD8
 11099                           
 11100 ;; *************** function i2___ftmul *****************
 11101 ;; Defined at:
 11102 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 11103 ;; Parameters:    Size  Location     Type
 11104 ;;  f1              3   20[COMRAM] float 
 11105 ;;  f2              3   23[COMRAM] float 
 11106 ;; Auto vars:     Size  Location     Type
 11107 ;;  __ftmul         3   30[COMRAM] unsigned um
 11108 ;;  __ftmul         1   34[COMRAM] unsigned char 
 11109 ;;  __ftmul         1   33[COMRAM] unsigned char 
 11110 ;;  __ftmul         1   29[COMRAM] unsigned char 
 11111 ;; Return value:  Size  Location     Type
 11112 ;;                  3   20[COMRAM] float 
 11113 ;; Registers used:
 11114 ;;		wreg, status,2, status,0, cstack
 11115 ;; Tracked objects:
 11116 ;;		On entry : 0/0
 11117 ;;		On exit  : 0/0
 11118 ;;		Unchanged: 0/0
 11119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11120 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11121 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11122 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11123 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11124 ;;Total ram usage:       15 bytes
 11125 ;; Hardware stack levels used:    1
 11126 ;; Hardware stack levels required when called:    1
 11127 ;; This function calls:
 11128 ;;		i2___ftpack
 11129 ;; This function is called by:
 11130 ;;		i2_fround
 11131 ;;		i2_scale
 11132 ;;		i2_printf
 11133 ;; This function uses a non-reentrant model
 11134 ;;
 11135                           
 11136                           	psect	text44
 11137  003E0C                     __ptext44:
 11138                           	opt stack 0
 11139  003E0C                     i2___ftmul:
 11140                           	opt stack 20
 11141                           
 11142                           ;incstack = 0
 11143  003E0C  C017  F01B         	movff	i2___ftmul@f1+2,??i2___ftmul
 11144  003E10  6A1C               	clrf	(??i2___ftmul+1)& (0+255),c
 11145  003E12  6A1D               	clrf	(??i2___ftmul+2)& (0+255),c
 11146  003E14  3416               	rlcf	i2___ftmul@f1+1,w,c
 11147  003E16  361B               	rlcf	??i2___ftmul& (0+255),f,c
 11148  003E18  E301               	bnc	u423_41
 11149  003E1A  801C               	bsf	(??i2___ftmul+1)& (0+255),0,c
 11150  003E1C                     u423_41:
 11151  003E1C  501B               	movf	??i2___ftmul,w,c
 11152  003E1E  6E1E               	movwf	i2___ftmul@exp,c
 11153  003E20  501E               	movf	i2___ftmul@exp,w,c
 11154  003E22  A4D8               	btfss	status,2,c
 11155  003E24  D007               	goto	i2l3870
 11156  003E26  0E00               	movlw	0
 11157  003E28  6E15               	movwf	?i2___ftmul,c
 11158  003E2A  0E00               	movlw	0
 11159  003E2C  6E16               	movwf	?i2___ftmul+1,c
 11160  003E2E  0E00               	movlw	0
 11161  003E30  6E17               	movwf	?i2___ftmul+2,c
 11162  003E32  0012               	return	
 11163  003E34                     i2l3870:
 11164  003E34  C01A  F01B         	movff	i2___ftmul@f2+2,??i2___ftmul
 11165  003E38  6A1C               	clrf	(??i2___ftmul+1)& (0+255),c
 11166  003E3A  6A1D               	clrf	(??i2___ftmul+2)& (0+255),c
 11167  003E3C  3419               	rlcf	i2___ftmul@f2+1,w,c
 11168  003E3E  361B               	rlcf	??i2___ftmul& (0+255),f,c
 11169  003E40  E301               	bnc	u425_41
 11170  003E42  801C               	bsf	(??i2___ftmul+1)& (0+255),0,c
 11171  003E44                     u425_41:
 11172  003E44  501B               	movf	??i2___ftmul,w,c
 11173  003E46  6E23               	movwf	i2___ftmul@sign,c
 11174  003E48  5023               	movf	i2___ftmul@sign,w,c
 11175  003E4A  A4D8               	btfss	status,2,c
 11176  003E4C  D007               	goto	i2l3876
 11177  003E4E  0E00               	movlw	0
 11178  003E50  6E15               	movwf	?i2___ftmul,c
 11179  003E52  0E00               	movlw	0
 11180  003E54  6E16               	movwf	?i2___ftmul+1,c
 11181  003E56  0E00               	movlw	0
 11182  003E58  6E17               	movwf	?i2___ftmul+2,c
 11183  003E5A  0012               	return	
 11184  003E5C                     i2l3876:
 11185  003E5C  5023               	movf	i2___ftmul@sign,w,c
 11186  003E5E  0F7B               	addlw	123
 11187  003E60  261E               	addwf	i2___ftmul@exp,f,c
 11188  003E62  C017  F023         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 11189  003E66  501A               	movf	i2___ftmul@f2+2,w,c
 11190  003E68  1A23               	xorwf	i2___ftmul@sign,f,c
 11191  003E6A  0E80               	movlw	128
 11192  003E6C  1623               	andwf	i2___ftmul@sign,f,c
 11193  003E6E  8E16               	bsf	i2___ftmul@f1+1,7,c
 11194  003E70  8E19               	bsf	i2___ftmul@f2+1,7,c
 11195  003E72  0EFF               	movlw	255
 11196  003E74  1618               	andwf	i2___ftmul@f2,f,c
 11197  003E76  0EFF               	movlw	255
 11198  003E78  1619               	andwf	i2___ftmul@f2+1,f,c
 11199  003E7A  0E00               	movlw	0
 11200  003E7C  161A               	andwf	i2___ftmul@f2+2,f,c
 11201  003E7E  0E00               	movlw	0
 11202  003E80  6E1F               	movwf	i2___ftmul@f3_as_product,c
 11203  003E82  0E00               	movlw	0
 11204  003E84  6E20               	movwf	i2___ftmul@f3_as_product+1,c
 11205  003E86  0E00               	movlw	0
 11206  003E88  6E21               	movwf	i2___ftmul@f3_as_product+2,c
 11207  003E8A  0E07               	movlw	7
 11208  003E8C  6E22               	movwf	i2___ftmul@cntr,c
 11209  003E8E                     i2l3890:
 11210  003E8E  A015               	btfss	i2___ftmul@f1,0,c
 11211  003E90  D006               	goto	i2l3894
 11212  003E92  5018               	movf	i2___ftmul@f2,w,c
 11213  003E94  261F               	addwf	i2___ftmul@f3_as_product,f,c
 11214  003E96  5019               	movf	i2___ftmul@f2+1,w,c
 11215  003E98  2220               	addwfc	i2___ftmul@f3_as_product+1,f,c
 11216  003E9A  501A               	movf	i2___ftmul@f2+2,w,c
 11217  003E9C  2221               	addwfc	i2___ftmul@f3_as_product+2,f,c
 11218  003E9E                     i2l3894:
 11219  003E9E  90D8               	bcf	status,0,c
 11220  003EA0  3217               	rrcf	i2___ftmul@f1+2,f,c
 11221  003EA2  3216               	rrcf	i2___ftmul@f1+1,f,c
 11222  003EA4  3215               	rrcf	i2___ftmul@f1,f,c
 11223  003EA6  90D8               	bcf	status,0,c
 11224  003EA8  3618               	rlcf	i2___ftmul@f2,f,c
 11225  003EAA  3619               	rlcf	i2___ftmul@f2+1,f,c
 11226  003EAC  361A               	rlcf	i2___ftmul@f2+2,f,c
 11227  003EAE  2E22               	decfsz	i2___ftmul@cntr,f,c
 11228  003EB0  D7EE               	goto	i2l3890
 11229  003EB2  0E09               	movlw	9
 11230  003EB4  6E22               	movwf	i2___ftmul@cntr,c
 11231  003EB6                     i2l3900:
 11232  003EB6  A015               	btfss	i2___ftmul@f1,0,c
 11233  003EB8  D006               	goto	i2l3904
 11234  003EBA  5018               	movf	i2___ftmul@f2,w,c
 11235  003EBC  261F               	addwf	i2___ftmul@f3_as_product,f,c
 11236  003EBE  5019               	movf	i2___ftmul@f2+1,w,c
 11237  003EC0  2220               	addwfc	i2___ftmul@f3_as_product+1,f,c
 11238  003EC2  501A               	movf	i2___ftmul@f2+2,w,c
 11239  003EC4  2221               	addwfc	i2___ftmul@f3_as_product+2,f,c
 11240  003EC6                     i2l3904:
 11241  003EC6  90D8               	bcf	status,0,c
 11242  003EC8  3217               	rrcf	i2___ftmul@f1+2,f,c
 11243  003ECA  3216               	rrcf	i2___ftmul@f1+1,f,c
 11244  003ECC  3215               	rrcf	i2___ftmul@f1,f,c
 11245  003ECE  90D8               	bcf	status,0,c
 11246  003ED0  3221               	rrcf	i2___ftmul@f3_as_product+2,f,c
 11247  003ED2  3220               	rrcf	i2___ftmul@f3_as_product+1,f,c
 11248  003ED4  321F               	rrcf	i2___ftmul@f3_as_product,f,c
 11249  003ED6  2E22               	decfsz	i2___ftmul@cntr,f,c
 11250  003ED8  D7EE               	goto	i2l3900
 11251  003EDA  C01F  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 11252  003EDE  C020  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 11253  003EE2  C021  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 11254  003EE6  C01E  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 11255  003EEA  C023  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 11256  003EEE  EC1B  F021         	call	i2___ftpack	;wreg free
 11257  003EF2  C001  F015         	movff	?i2___ftpack,?i2___ftmul
 11258  003EF6  C002  F016         	movff	?i2___ftpack+1,?i2___ftmul+1
 11259  003EFA  C003  F017         	movff	?i2___ftpack+2,?i2___ftmul+2
 11260  003EFE  0012               	return	
 11261  003F00                     __end_ofi2___ftmul:
 11262                           	opt stack 0
 11263                           pclatu	equ	0xFFB
 11264                           pclath	equ	0xFFA
 11265                           tblptru	equ	0xFF8
 11266                           tblptrh	equ	0xFF7
 11267                           tblptrl	equ	0xFF6
 11268                           tablat	equ	0xFF5
 11269                           prodh	equ	0xFF4
 11270                           prodl	equ	0xFF3
 11271                           intcon	equ	0xFF2
 11272                           fsr0h	equ	0xFEA
 11273                           fsr0l	equ	0xFE9
 11274                           wreg	equ	0xFE8
 11275                           fsr1h	equ	0xFE2
 11276                           fsr1l	equ	0xFE1
 11277                           indf2	equ	0xFDF
 11278                           postinc2	equ	0xFDE
 11279                           postdec2	equ	0xFDD
 11280                           fsr2h	equ	0xFDA
 11281                           fsr2l	equ	0xFD9
 11282                           status	equ	0xFD8
 11283                           
 11284 ;; *************** function i2___awmod *****************
 11285 ;; Defined at:
 11286 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 11287 ;; Parameters:    Size  Location     Type
 11288 ;;  dividend        2    0[COMRAM] int 
 11289 ;;  divisor         2    2[COMRAM] int 
 11290 ;; Auto vars:     Size  Location     Type
 11291 ;;  __awmod         1    5[COMRAM] unsigned char 
 11292 ;;  __awmod         1    4[COMRAM] unsigned char 
 11293 ;; Return value:  Size  Location     Type
 11294 ;;                  2    0[COMRAM] int 
 11295 ;; Registers used:
 11296 ;;		wreg, status,2, status,0
 11297 ;; Tracked objects:
 11298 ;;		On entry : 0/0
 11299 ;;		On exit  : 0/0
 11300 ;;		Unchanged: 0/0
 11301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11302 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11303 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11305 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11306 ;;Total ram usage:        6 bytes
 11307 ;; Hardware stack levels used:    1
 11308 ;; This function calls:
 11309 ;;		Nothing
 11310 ;; This function is called by:
 11311 ;;		i2_fround
 11312 ;;		i2_scale
 11313 ;; This function uses a non-reentrant model
 11314 ;;
 11315                           
 11316                           	psect	text45
 11317  004758                     __ptext45:
 11318                           	opt stack 0
 11319  004758                     i2___awmod:
 11320                           	opt stack 21
 11321                           
 11322                           ;incstack = 0
 11323  004758  0E00               	movlw	0
 11324  00475A  6E06               	movwf	i2___awmod@sign,c
 11325  00475C  AE02               	btfss	i2___awmod@dividend+1,7,c
 11326  00475E  D006               	goto	i2l3766
 11327  004760  6C01               	negf	i2___awmod@dividend,c
 11328  004762  1E02               	comf	i2___awmod@dividend+1,f,c
 11329  004764  B0D8               	btfsc	status,0,c
 11330  004766  2A02               	incf	i2___awmod@dividend+1,f,c
 11331  004768  0E01               	movlw	1
 11332  00476A  6E06               	movwf	i2___awmod@sign,c
 11333  00476C                     i2l3766:
 11334  00476C  AE04               	btfss	i2___awmod@divisor+1,7,c
 11335  00476E  D004               	goto	i2l3770
 11336  004770  6C03               	negf	i2___awmod@divisor,c
 11337  004772  1E04               	comf	i2___awmod@divisor+1,f,c
 11338  004774  B0D8               	btfsc	status,0,c
 11339  004776  2A04               	incf	i2___awmod@divisor+1,f,c
 11340  004778                     i2l3770:
 11341  004778  5003               	movf	i2___awmod@divisor,w,c
 11342  00477A  1004               	iorwf	i2___awmod@divisor+1,w,c
 11343  00477C  B4D8               	btfsc	status,2,c
 11344  00477E  D018               	goto	i2l3786
 11345  004780  0E01               	movlw	1
 11346  004782  6E05               	movwf	i2___awmod@counter,c
 11347  004784  D004               	goto	i2l3776
 11348  004786                     i2l3774:
 11349  004786  90D8               	bcf	status,0,c
 11350  004788  3603               	rlcf	i2___awmod@divisor,f,c
 11351  00478A  3604               	rlcf	i2___awmod@divisor+1,f,c
 11352  00478C  2A05               	incf	i2___awmod@counter,f,c
 11353  00478E                     i2l3776:
 11354  00478E  AE04               	btfss	i2___awmod@divisor+1,7,c
 11355  004790  D7FA               	goto	i2l3774
 11356  004792                     i2l3778:
 11357  004792  5003               	movf	i2___awmod@divisor,w,c
 11358  004794  5C01               	subwf	i2___awmod@dividend,w,c
 11359  004796  5004               	movf	i2___awmod@divisor+1,w,c
 11360  004798  5802               	subwfb	i2___awmod@dividend+1,w,c
 11361  00479A  A0D8               	btfss	status,0,c
 11362  00479C  D004               	goto	i2l3782
 11363  00479E  5003               	movf	i2___awmod@divisor,w,c
 11364  0047A0  5E01               	subwf	i2___awmod@dividend,f,c
 11365  0047A2  5004               	movf	i2___awmod@divisor+1,w,c
 11366  0047A4  5A02               	subwfb	i2___awmod@dividend+1,f,c
 11367  0047A6                     i2l3782:
 11368  0047A6  90D8               	bcf	status,0,c
 11369  0047A8  3204               	rrcf	i2___awmod@divisor+1,f,c
 11370  0047AA  3203               	rrcf	i2___awmod@divisor,f,c
 11371  0047AC  2E05               	decfsz	i2___awmod@counter,f,c
 11372  0047AE  D7F1               	goto	i2l3778
 11373  0047B0                     i2l3786:
 11374  0047B0  5006               	movf	i2___awmod@sign,w,c
 11375  0047B2  B4D8               	btfsc	status,2,c
 11376  0047B4  D004               	goto	i2l3790
 11377  0047B6  6C01               	negf	i2___awmod@dividend,c
 11378  0047B8  1E02               	comf	i2___awmod@dividend+1,f,c
 11379  0047BA  B0D8               	btfsc	status,0,c
 11380  0047BC  2A02               	incf	i2___awmod@dividend+1,f,c
 11381  0047BE                     i2l3790:
 11382  0047BE  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 11383  0047C2  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 11384  0047C6  0012               	return	
 11385  0047C8                     __end_ofi2___awmod:
 11386                           	opt stack 0
 11387                           pclatu	equ	0xFFB
 11388                           pclath	equ	0xFFA
 11389                           tblptru	equ	0xFF8
 11390                           tblptrh	equ	0xFF7
 11391                           tblptrl	equ	0xFF6
 11392                           tablat	equ	0xFF5
 11393                           prodh	equ	0xFF4
 11394                           prodl	equ	0xFF3
 11395                           intcon	equ	0xFF2
 11396                           fsr0h	equ	0xFEA
 11397                           fsr0l	equ	0xFE9
 11398                           wreg	equ	0xFE8
 11399                           fsr1h	equ	0xFE2
 11400                           fsr1l	equ	0xFE1
 11401                           indf2	equ	0xFDF
 11402                           postinc2	equ	0xFDE
 11403                           postdec2	equ	0xFDD
 11404                           fsr2h	equ	0xFDA
 11405                           fsr2l	equ	0xFD9
 11406                           status	equ	0xFD8
 11407                           
 11408 ;; *************** function i2___awdiv *****************
 11409 ;; Defined at:
 11410 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 11411 ;; Parameters:    Size  Location     Type
 11412 ;;  dividend        2    6[COMRAM] int 
 11413 ;;  divisor         2    8[COMRAM] int 
 11414 ;; Auto vars:     Size  Location     Type
 11415 ;;  __awdiv         2   12[COMRAM] int 
 11416 ;;  __awdiv         1   11[COMRAM] unsigned char 
 11417 ;;  __awdiv         1   10[COMRAM] unsigned char 
 11418 ;; Return value:  Size  Location     Type
 11419 ;;                  2    6[COMRAM] int 
 11420 ;; Registers used:
 11421 ;;		wreg, status,2, status,0
 11422 ;; Tracked objects:
 11423 ;;		On entry : 0/0
 11424 ;;		On exit  : 0/0
 11425 ;;		Unchanged: 0/0
 11426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11427 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11428 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11430 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11431 ;;Total ram usage:        8 bytes
 11432 ;; Hardware stack levels used:    1
 11433 ;; This function calls:
 11434 ;;		Nothing
 11435 ;; This function is called by:
 11436 ;;		i2_fround
 11437 ;;		i2_scale
 11438 ;;		i2_printf
 11439 ;; This function uses a non-reentrant model
 11440 ;;
 11441                           
 11442                           	psect	text46
 11443  0045D6                     __ptext46:
 11444                           	opt stack 0
 11445  0045D6                     i2___awdiv:
 11446                           	opt stack 21
 11447                           
 11448                           ;incstack = 0
 11449  0045D6  0E00               	movlw	0
 11450  0045D8  6E0C               	movwf	i2___awdiv@sign,c
 11451  0045DA  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 11452  0045DC  D006               	goto	i2l3722
 11453  0045DE  6C09               	negf	i2___awdiv@divisor,c
 11454  0045E0  1E0A               	comf	i2___awdiv@divisor+1,f,c
 11455  0045E2  B0D8               	btfsc	status,0,c
 11456  0045E4  2A0A               	incf	i2___awdiv@divisor+1,f,c
 11457  0045E6  0E01               	movlw	1
 11458  0045E8  6E0C               	movwf	i2___awdiv@sign,c
 11459  0045EA                     i2l3722:
 11460  0045EA  AE08               	btfss	i2___awdiv@dividend+1,7,c
 11461  0045EC  D006               	goto	i2l3728
 11462  0045EE  6C07               	negf	i2___awdiv@dividend,c
 11463  0045F0  1E08               	comf	i2___awdiv@dividend+1,f,c
 11464  0045F2  B0D8               	btfsc	status,0,c
 11465  0045F4  2A08               	incf	i2___awdiv@dividend+1,f,c
 11466  0045F6  0E01               	movlw	1
 11467  0045F8  1A0C               	xorwf	i2___awdiv@sign,f,c
 11468  0045FA                     i2l3728:
 11469  0045FA  0E00               	movlw	0
 11470  0045FC  6E0E               	movwf	i2___awdiv@quotient+1,c
 11471  0045FE  0E00               	movlw	0
 11472  004600  6E0D               	movwf	i2___awdiv@quotient,c
 11473  004602  5009               	movf	i2___awdiv@divisor,w,c
 11474  004604  100A               	iorwf	i2___awdiv@divisor+1,w,c
 11475  004606  B4D8               	btfsc	status,2,c
 11476  004608  D01C               	goto	i2l3750
 11477  00460A  0E01               	movlw	1
 11478  00460C  6E0B               	movwf	i2___awdiv@counter,c
 11479  00460E  D004               	goto	i2l3736
 11480  004610                     i2l3734:
 11481  004610  90D8               	bcf	status,0,c
 11482  004612  3609               	rlcf	i2___awdiv@divisor,f,c
 11483  004614  360A               	rlcf	i2___awdiv@divisor+1,f,c
 11484  004616  2A0B               	incf	i2___awdiv@counter,f,c
 11485  004618                     i2l3736:
 11486  004618  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 11487  00461A  D7FA               	goto	i2l3734
 11488  00461C                     i2l3738:
 11489  00461C  90D8               	bcf	status,0,c
 11490  00461E  360D               	rlcf	i2___awdiv@quotient,f,c
 11491  004620  360E               	rlcf	i2___awdiv@quotient+1,f,c
 11492  004622  5009               	movf	i2___awdiv@divisor,w,c
 11493  004624  5C07               	subwf	i2___awdiv@dividend,w,c
 11494  004626  500A               	movf	i2___awdiv@divisor+1,w,c
 11495  004628  5808               	subwfb	i2___awdiv@dividend+1,w,c
 11496  00462A  A0D8               	btfss	status,0,c
 11497  00462C  D005               	goto	i2l3746
 11498  00462E  5009               	movf	i2___awdiv@divisor,w,c
 11499  004630  5E07               	subwf	i2___awdiv@dividend,f,c
 11500  004632  500A               	movf	i2___awdiv@divisor+1,w,c
 11501  004634  5A08               	subwfb	i2___awdiv@dividend+1,f,c
 11502  004636  800D               	bsf	i2___awdiv@quotient,0,c
 11503  004638                     i2l3746:
 11504  004638  90D8               	bcf	status,0,c
 11505  00463A  320A               	rrcf	i2___awdiv@divisor+1,f,c
 11506  00463C  3209               	rrcf	i2___awdiv@divisor,f,c
 11507  00463E  2E0B               	decfsz	i2___awdiv@counter,f,c
 11508  004640  D7ED               	goto	i2l3738
 11509  004642                     i2l3750:
 11510  004642  500C               	movf	i2___awdiv@sign,w,c
 11511  004644  B4D8               	btfsc	status,2,c
 11512  004646  D004               	goto	i2l3754
 11513  004648  6C0D               	negf	i2___awdiv@quotient,c
 11514  00464A  1E0E               	comf	i2___awdiv@quotient+1,f,c
 11515  00464C  B0D8               	btfsc	status,0,c
 11516  00464E  2A0E               	incf	i2___awdiv@quotient+1,f,c
 11517  004650                     i2l3754:
 11518  004650  C00D  F007         	movff	i2___awdiv@quotient,?i2___awdiv
 11519  004654  C00E  F008         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 11520  004658  0012               	return	
 11521  00465A                     __end_ofi2___awdiv:
 11522                           	opt stack 0
 11523                           pclatu	equ	0xFFB
 11524                           pclath	equ	0xFFA
 11525                           tblptru	equ	0xFF8
 11526                           tblptrh	equ	0xFF7
 11527                           tblptrl	equ	0xFF6
 11528                           tablat	equ	0xFF5
 11529                           prodh	equ	0xFF4
 11530                           prodl	equ	0xFF3
 11531                           intcon	equ	0xFF2
 11532                           fsr0h	equ	0xFEA
 11533                           fsr0l	equ	0xFE9
 11534                           wreg	equ	0xFE8
 11535                           fsr1h	equ	0xFE2
 11536                           fsr1l	equ	0xFE1
 11537                           indf2	equ	0xFDF
 11538                           postinc2	equ	0xFDE
 11539                           postdec2	equ	0xFDD
 11540                           fsr2h	equ	0xFDA
 11541                           fsr2l	equ	0xFD9
 11542                           status	equ	0xFD8
 11543                           
 11544 ;; *************** function i2__tdiv_to_l_ *****************
 11545 ;; Defined at:
 11546 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
 11547 ;; Parameters:    Size  Location     Type
 11548 ;;  f1              3    0[COMRAM] float 
 11549 ;;  f2              3    3[COMRAM] float 
 11550 ;; Auto vars:     Size  Location     Type
 11551 ;;  _tdiv_to_l_     4    9[COMRAM] unsigned long 
 11552 ;;  _tdiv_to_l_     1   14[COMRAM] unsigned char 
 11553 ;;  _tdiv_to_l_     1   13[COMRAM] unsigned char 
 11554 ;; Return value:  Size  Location     Type
 11555 ;;                  4    0[COMRAM] unsigned long 
 11556 ;; Registers used:
 11557 ;;		wreg, status,2, status,0
 11558 ;; Tracked objects:
 11559 ;;		On entry : 0/0
 11560 ;;		On exit  : 0/0
 11561 ;;		Unchanged: 0/0
 11562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11563 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11564 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11565 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11566 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11567 ;;Total ram usage:       15 bytes
 11568 ;; Hardware stack levels used:    1
 11569 ;; This function calls:
 11570 ;;		Nothing
 11571 ;; This function is called by:
 11572 ;;		i2_printf
 11573 ;; This function uses a non-reentrant model
 11574 ;;
 11575                           
 11576                           	psect	text47
 11577  003AA6                     __ptext47:
 11578                           	opt stack 0
 11579  003AA6                     i2__tdiv_to_l_:
 11580                           	opt stack 22
 11581                           
 11582                           ;incstack = 0
 11583  003AA6  C003  F007         	movff	i2__tdiv_to_l_@f1+2,??i2__tdiv_to_l_
 11584  003AAA  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 11585  003AAC  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 11586  003AAE  3402               	rlcf	i2__tdiv_to_l_@f1+1,w,c
 11587  003AB0  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 11588  003AB2  E301               	bnc	u484_41
 11589  003AB4  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 11590  003AB6                     u484_41:
 11591  003AB6  5007               	movf	??i2__tdiv_to_l_,w,c
 11592  003AB8  6E0F               	movwf	i2__tdiv_to_l_@exp1,c
 11593  003ABA  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 11594  003ABC  A4D8               	btfss	status,2,c
 11595  003ABE  D009               	goto	i2l4334
 11596  003AC0  0E00               	movlw	0
 11597  003AC2  6E01               	movwf	?i2__tdiv_to_l_,c
 11598  003AC4  0E00               	movlw	0
 11599  003AC6  6E02               	movwf	?i2__tdiv_to_l_+1,c
 11600  003AC8  0E00               	movlw	0
 11601  003ACA  6E03               	movwf	?i2__tdiv_to_l_+2,c
 11602  003ACC  0E00               	movlw	0
 11603  003ACE  6E04               	movwf	?i2__tdiv_to_l_+3,c
 11604  003AD0  0012               	return	
 11605  003AD2                     i2l4334:
 11606  003AD2  C006  F007         	movff	i2__tdiv_to_l_@f2+2,??i2__tdiv_to_l_
 11607  003AD6  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 11608  003AD8  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 11609  003ADA  3405               	rlcf	i2__tdiv_to_l_@f2+1,w,c
 11610  003ADC  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 11611  003ADE  E301               	bnc	u486_41
 11612  003AE0  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 11613  003AE2                     u486_41:
 11614  003AE2  5007               	movf	??i2__tdiv_to_l_,w,c
 11615  003AE4  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 11616  003AE6  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 11617  003AE8  A4D8               	btfss	status,2,c
 11618  003AEA  D009               	goto	i2l4340
 11619  003AEC  0E00               	movlw	0
 11620  003AEE  6E01               	movwf	?i2__tdiv_to_l_,c
 11621  003AF0  0E00               	movlw	0
 11622  003AF2  6E02               	movwf	?i2__tdiv_to_l_+1,c
 11623  003AF4  0E00               	movlw	0
 11624  003AF6  6E03               	movwf	?i2__tdiv_to_l_+2,c
 11625  003AF8  0E00               	movlw	0
 11626  003AFA  6E04               	movwf	?i2__tdiv_to_l_+3,c
 11627  003AFC  0012               	return	
 11628  003AFE                     i2l4340:
 11629  003AFE  8E02               	bsf	i2__tdiv_to_l_@f1+1,7,c
 11630  003B00  0EFF               	movlw	255
 11631  003B02  1601               	andwf	i2__tdiv_to_l_@f1,f,c
 11632  003B04  0EFF               	movlw	255
 11633  003B06  1602               	andwf	i2__tdiv_to_l_@f1+1,f,c
 11634  003B08  0E00               	movlw	0
 11635  003B0A  1603               	andwf	i2__tdiv_to_l_@f1+2,f,c
 11636  003B0C  8E05               	bsf	i2__tdiv_to_l_@f2+1,7,c
 11637  003B0E  0EFF               	movlw	255
 11638  003B10  1604               	andwf	i2__tdiv_to_l_@f2,f,c
 11639  003B12  0EFF               	movlw	255
 11640  003B14  1605               	andwf	i2__tdiv_to_l_@f2+1,f,c
 11641  003B16  0E00               	movlw	0
 11642  003B18  1606               	andwf	i2__tdiv_to_l_@f2+2,f,c
 11643  003B1A  0E00               	movlw	0
 11644  003B1C  6E0A               	movwf	i2__tdiv_to_l_@quot,c
 11645  003B1E  0E00               	movlw	0
 11646  003B20  6E0B               	movwf	i2__tdiv_to_l_@quot+1,c
 11647  003B22  0E00               	movlw	0
 11648  003B24  6E0C               	movwf	i2__tdiv_to_l_@quot+2,c
 11649  003B26  0E00               	movlw	0
 11650  003B28  6E0D               	movwf	i2__tdiv_to_l_@quot+3,c
 11651  003B2A  0E7F               	movlw	127
 11652  003B2C  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 11653  003B2E  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 11654  003B30  0F98               	addlw	152
 11655  003B32  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 11656  003B34  0E18               	movlw	24
 11657  003B36  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 11658  003B38                     i2l737:
 11659  003B38  90D8               	bcf	status,0,c
 11660  003B3A  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 11661  003B3C  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 11662  003B3E  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 11663  003B40  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 11664  003B42  5004               	movf	i2__tdiv_to_l_@f2,w,c
 11665  003B44  5C01               	subwf	i2__tdiv_to_l_@f1,w,c
 11666  003B46  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 11667  003B48  5802               	subwfb	i2__tdiv_to_l_@f1+1,w,c
 11668  003B4A  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 11669  003B4C  5803               	subwfb	i2__tdiv_to_l_@f1+2,w,c
 11670  003B4E  A0D8               	btfss	status,0,c
 11671  003B50  D007               	goto	i2l738
 11672  003B52  5004               	movf	i2__tdiv_to_l_@f2,w,c
 11673  003B54  5E01               	subwf	i2__tdiv_to_l_@f1,f,c
 11674  003B56  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 11675  003B58  5A02               	subwfb	i2__tdiv_to_l_@f1+1,f,c
 11676  003B5A  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 11677  003B5C  5A03               	subwfb	i2__tdiv_to_l_@f1+2,f,c
 11678  003B5E  800A               	bsf	i2__tdiv_to_l_@quot,0,c
 11679  003B60                     i2l738:
 11680  003B60  90D8               	bcf	status,0,c
 11681  003B62  3601               	rlcf	i2__tdiv_to_l_@f1,f,c
 11682  003B64  3602               	rlcf	i2__tdiv_to_l_@f1+1,f,c
 11683  003B66  3603               	rlcf	i2__tdiv_to_l_@f1+2,f,c
 11684  003B68  2E0E               	decfsz	i2__tdiv_to_l_@cntr,f,c
 11685  003B6A  D7E6               	goto	i2l737
 11686  003B6C  AE0F               	btfss	i2__tdiv_to_l_@exp1,7,c
 11687  003B6E  D016               	goto	i2l4374
 11688  003B70  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 11689  003B72  0A80               	xorlw	128
 11690  003B74  0F97               	addlw	151
 11691  003B76  B0D8               	btfsc	status,0,c
 11692  003B78  D009               	goto	i2l4370
 11693  003B7A  0E00               	movlw	0
 11694  003B7C  6E01               	movwf	?i2__tdiv_to_l_,c
 11695  003B7E  0E00               	movlw	0
 11696  003B80  6E02               	movwf	?i2__tdiv_to_l_+1,c
 11697  003B82  0E00               	movlw	0
 11698  003B84  6E03               	movwf	?i2__tdiv_to_l_+2,c
 11699  003B86  0E00               	movlw	0
 11700  003B88  6E04               	movwf	?i2__tdiv_to_l_+3,c
 11701  003B8A  0012               	return	
 11702  003B8C                     i2l4370:
 11703  003B8C  90D8               	bcf	status,0,c
 11704  003B8E  320D               	rrcf	i2__tdiv_to_l_@quot+3,f,c
 11705  003B90  320C               	rrcf	i2__tdiv_to_l_@quot+2,f,c
 11706  003B92  320B               	rrcf	i2__tdiv_to_l_@quot+1,f,c
 11707  003B94  320A               	rrcf	i2__tdiv_to_l_@quot,f,c
 11708  003B96  3E0F               	incfsz	i2__tdiv_to_l_@exp1,f,c
 11709  003B98  D7F9               	goto	i2l4370
 11710  003B9A  D015               	goto	i2l744
 11711  003B9C                     i2l4374:
 11712  003B9C  0E17               	movlw	23
 11713  003B9E  640F               	cpfsgt	i2__tdiv_to_l_@exp1,c
 11714  003BA0  D00F               	goto	i2l4382
 11715  003BA2  0E00               	movlw	0
 11716  003BA4  6E01               	movwf	?i2__tdiv_to_l_,c
 11717  003BA6  0E00               	movlw	0
 11718  003BA8  6E02               	movwf	?i2__tdiv_to_l_+1,c
 11719  003BAA  0E00               	movlw	0
 11720  003BAC  6E03               	movwf	?i2__tdiv_to_l_+2,c
 11721  003BAE  0E00               	movlw	0
 11722  003BB0  6E04               	movwf	?i2__tdiv_to_l_+3,c
 11723  003BB2  0012               	return	
 11724  003BB4                     i2l4380:
 11725  003BB4  90D8               	bcf	status,0,c
 11726  003BB6  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 11727  003BB8  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 11728  003BBA  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 11729  003BBC  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 11730  003BBE  060F               	decf	i2__tdiv_to_l_@exp1,f,c
 11731  003BC0                     i2l4382:
 11732  003BC0  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 11733  003BC2  A4D8               	btfss	status,2,c
 11734  003BC4  D7F7               	goto	i2l4380
 11735  003BC6                     i2l744:
 11736  003BC6  C00A  F001         	movff	i2__tdiv_to_l_@quot,?i2__tdiv_to_l_
 11737  003BCA  C00B  F002         	movff	i2__tdiv_to_l_@quot+1,?i2__tdiv_to_l_+1
 11738  003BCE  C00C  F003         	movff	i2__tdiv_to_l_@quot+2,?i2__tdiv_to_l_+2
 11739  003BD2  C00D  F004         	movff	i2__tdiv_to_l_@quot+3,?i2__tdiv_to_l_+3
 11740  003BD6  0012               	return		;funcret
 11741  003BD8                     __end_ofi2__tdiv_to_l_:
 11742                           	opt stack 0
 11743                           pclatu	equ	0xFFB
 11744                           pclath	equ	0xFFA
 11745                           tblptru	equ	0xFF8
 11746                           tblptrh	equ	0xFF7
 11747                           tblptrl	equ	0xFF6
 11748                           tablat	equ	0xFF5
 11749                           prodh	equ	0xFF4
 11750                           prodl	equ	0xFF3
 11751                           intcon	equ	0xFF2
 11752                           fsr0h	equ	0xFEA
 11753                           fsr0l	equ	0xFE9
 11754                           wreg	equ	0xFE8
 11755                           fsr1h	equ	0xFE2
 11756                           fsr1l	equ	0xFE1
 11757                           indf2	equ	0xFDF
 11758                           postinc2	equ	0xFDE
 11759                           postdec2	equ	0xFDD
 11760                           fsr2h	equ	0xFDA
 11761                           fsr2l	equ	0xFD9
 11762                           status	equ	0xFD8
 11763                           
 11764 ;; *************** function i2__div_to_l_ *****************
 11765 ;; Defined at:
 11766 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
 11767 ;; Parameters:    Size  Location     Type
 11768 ;;  f1              3    0[COMRAM] unsigned long 
 11769 ;;  f2              3    3[COMRAM] unsigned long 
 11770 ;; Auto vars:     Size  Location     Type
 11771 ;;  _div_to_l_      4    6[COMRAM] unsigned long 
 11772 ;;  _div_to_l_      1   11[COMRAM] unsigned char 
 11773 ;;  _div_to_l_      1   10[COMRAM] unsigned char 
 11774 ;; Return value:  Size  Location     Type
 11775 ;;                  4    0[COMRAM] unsigned long 
 11776 ;; Registers used:
 11777 ;;		wreg, status,2, status,0
 11778 ;; Tracked objects:
 11779 ;;		On entry : 0/0
 11780 ;;		On exit  : 0/0
 11781 ;;		Unchanged: 0/0
 11782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11783 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11784 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11786 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11787 ;;Total ram usage:       12 bytes
 11788 ;; Hardware stack levels used:    1
 11789 ;; This function calls:
 11790 ;;		Nothing
 11791 ;; This function is called by:
 11792 ;;		i2_printf
 11793 ;; This function uses a non-reentrant model
 11794 ;;
 11795                           
 11796                           	psect	text48
 11797  003BD8                     __ptext48:
 11798                           	opt stack 0
 11799  003BD8                     i2__div_to_l_:
 11800                           	opt stack 22
 11801                           
 11802                           ;incstack = 0
 11803  003BD8  3403               	rlcf	i2__div_to_l_@f1+2,w,c
 11804  003BDA  3404               	rlcf	i2__div_to_l_@f1+3,w,c
 11805  003BDC  6E0C               	movwf	i2__div_to_l_@exp1,c
 11806  003BDE  500C               	movf	i2__div_to_l_@exp1,w,c
 11807  003BE0  A4D8               	btfss	status,2,c
 11808  003BE2  D009               	goto	i2l4274
 11809  003BE4  0E00               	movlw	0
 11810  003BE6  6E01               	movwf	?i2__div_to_l_,c
 11811  003BE8  0E00               	movlw	0
 11812  003BEA  6E02               	movwf	?i2__div_to_l_+1,c
 11813  003BEC  0E00               	movlw	0
 11814  003BEE  6E03               	movwf	?i2__div_to_l_+2,c
 11815  003BF0  0E00               	movlw	0
 11816  003BF2  6E04               	movwf	?i2__div_to_l_+3,c
 11817  003BF4  0012               	return	
 11818  003BF6                     i2l4274:
 11819  003BF6  3406               	rlcf	i2__div_to_l_@f2+2,w,c
 11820  003BF8  3407               	rlcf	i2__div_to_l_@f2+3,w,c
 11821  003BFA  6E0B               	movwf	i2__div_to_l_@cntr,c
 11822  003BFC  500B               	movf	i2__div_to_l_@cntr,w,c
 11823  003BFE  A4D8               	btfss	status,2,c
 11824  003C00  D009               	goto	i2l4280
 11825  003C02  0E00               	movlw	0
 11826  003C04  6E01               	movwf	?i2__div_to_l_,c
 11827  003C06  0E00               	movlw	0
 11828  003C08  6E02               	movwf	?i2__div_to_l_+1,c
 11829  003C0A  0E00               	movlw	0
 11830  003C0C  6E03               	movwf	?i2__div_to_l_+2,c
 11831  003C0E  0E00               	movlw	0
 11832  003C10  6E04               	movwf	?i2__div_to_l_+3,c
 11833  003C12  0012               	return	
 11834  003C14                     i2l4280:
 11835  003C14  8E03               	bsf	i2__div_to_l_@f1+2,7,c
 11836  003C16  0EFF               	movlw	255
 11837  003C18  1601               	andwf	i2__div_to_l_@f1,f,c
 11838  003C1A  0EFF               	movlw	255
 11839  003C1C  1602               	andwf	i2__div_to_l_@f1+1,f,c
 11840  003C1E  0EFF               	movlw	255
 11841  003C20  1603               	andwf	i2__div_to_l_@f1+2,f,c
 11842  003C22  0E00               	movlw	0
 11843  003C24  1604               	andwf	i2__div_to_l_@f1+3,f,c
 11844  003C26  8E06               	bsf	i2__div_to_l_@f2+2,7,c
 11845  003C28  0EFF               	movlw	255
 11846  003C2A  1604               	andwf	i2__div_to_l_@f2,f,c
 11847  003C2C  0EFF               	movlw	255
 11848  003C2E  1605               	andwf	i2__div_to_l_@f2+1,f,c
 11849  003C30  0EFF               	movlw	255
 11850  003C32  1606               	andwf	i2__div_to_l_@f2+2,f,c
 11851  003C34  0E00               	movlw	0
 11852  003C36  1607               	andwf	i2__div_to_l_@f2+3,f,c
 11853  003C38  0E00               	movlw	0
 11854  003C3A  6E07               	movwf	i2__div_to_l_@quot,c
 11855  003C3C  0E00               	movlw	0
 11856  003C3E  6E08               	movwf	i2__div_to_l_@quot+1,c
 11857  003C40  0E00               	movlw	0
 11858  003C42  6E09               	movwf	i2__div_to_l_@quot+2,c
 11859  003C44  0E00               	movlw	0
 11860  003C46  6E0A               	movwf	i2__div_to_l_@quot+3,c
 11861  003C48  0E7F               	movlw	127
 11862  003C4A  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 11863  003C4C  500B               	movf	i2__div_to_l_@cntr,w,c
 11864  003C4E  0FA0               	addlw	160
 11865  003C50  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 11866  003C52  0E20               	movlw	32
 11867  003C54  6E0B               	movwf	i2__div_to_l_@cntr,c
 11868  003C56                     i2l4294:
 11869  003C56  90D8               	bcf	status,0,c
 11870  003C58  3607               	rlcf	i2__div_to_l_@quot,f,c
 11871  003C5A  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 11872  003C5C  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 11873  003C5E  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 11874  003C60  5004               	movf	i2__div_to_l_@f2,w,c
 11875  003C62  5C01               	subwf	i2__div_to_l_@f1,w,c
 11876  003C64  5005               	movf	i2__div_to_l_@f2+1,w,c
 11877  003C66  5802               	subwfb	i2__div_to_l_@f1+1,w,c
 11878  003C68  5006               	movf	i2__div_to_l_@f2+2,w,c
 11879  003C6A  5803               	subwfb	i2__div_to_l_@f1+2,w,c
 11880  003C6C  5007               	movf	i2__div_to_l_@f2+3,w,c
 11881  003C6E  5804               	subwfb	i2__div_to_l_@f1+3,w,c
 11882  003C70  A0D8               	btfss	status,0,c
 11883  003C72  D009               	goto	i2l4302
 11884  003C74  5004               	movf	i2__div_to_l_@f2,w,c
 11885  003C76  5E01               	subwf	i2__div_to_l_@f1,f,c
 11886  003C78  5005               	movf	i2__div_to_l_@f2+1,w,c
 11887  003C7A  5A02               	subwfb	i2__div_to_l_@f1+1,f,c
 11888  003C7C  5006               	movf	i2__div_to_l_@f2+2,w,c
 11889  003C7E  5A03               	subwfb	i2__div_to_l_@f1+2,f,c
 11890  003C80  5007               	movf	i2__div_to_l_@f2+3,w,c
 11891  003C82  5A04               	subwfb	i2__div_to_l_@f1+3,f,c
 11892  003C84  8007               	bsf	i2__div_to_l_@quot,0,c
 11893  003C86                     i2l4302:
 11894  003C86  90D8               	bcf	status,0,c
 11895  003C88  3601               	rlcf	i2__div_to_l_@f1,f,c
 11896  003C8A  3602               	rlcf	i2__div_to_l_@f1+1,f,c
 11897  003C8C  3603               	rlcf	i2__div_to_l_@f1+2,f,c
 11898  003C8E  3604               	rlcf	i2__div_to_l_@f1+3,f,c
 11899  003C90  2E0B               	decfsz	i2__div_to_l_@cntr,f,c
 11900  003C92  D7E1               	goto	i2l4294
 11901  003C94  AE0C               	btfss	i2__div_to_l_@exp1,7,c
 11902  003C96  D016               	goto	i2l4318
 11903  003C98  500C               	movf	i2__div_to_l_@exp1,w,c
 11904  003C9A  0A80               	xorlw	128
 11905  003C9C  0F9F               	addlw	159
 11906  003C9E  B0D8               	btfsc	status,0,c
 11907  003CA0  D009               	goto	i2l4314
 11908  003CA2  0E00               	movlw	0
 11909  003CA4  6E01               	movwf	?i2__div_to_l_,c
 11910  003CA6  0E00               	movlw	0
 11911  003CA8  6E02               	movwf	?i2__div_to_l_+1,c
 11912  003CAA  0E00               	movlw	0
 11913  003CAC  6E03               	movwf	?i2__div_to_l_+2,c
 11914  003CAE  0E00               	movlw	0
 11915  003CB0  6E04               	movwf	?i2__div_to_l_+3,c
 11916  003CB2  0012               	return	
 11917  003CB4                     i2l4314:
 11918  003CB4  90D8               	bcf	status,0,c
 11919  003CB6  320A               	rrcf	i2__div_to_l_@quot+3,f,c
 11920  003CB8  3209               	rrcf	i2__div_to_l_@quot+2,f,c
 11921  003CBA  3208               	rrcf	i2__div_to_l_@quot+1,f,c
 11922  003CBC  3207               	rrcf	i2__div_to_l_@quot,f,c
 11923  003CBE  3E0C               	incfsz	i2__div_to_l_@exp1,f,c
 11924  003CC0  D7F9               	goto	i2l4314
 11925  003CC2  D015               	goto	i2l640
 11926  003CC4                     i2l4318:
 11927  003CC4  0E1F               	movlw	31
 11928  003CC6  640C               	cpfsgt	i2__div_to_l_@exp1,c
 11929  003CC8  D00F               	goto	i2l4326
 11930  003CCA  0E00               	movlw	0
 11931  003CCC  6E01               	movwf	?i2__div_to_l_,c
 11932  003CCE  0E00               	movlw	0
 11933  003CD0  6E02               	movwf	?i2__div_to_l_+1,c
 11934  003CD2  0E00               	movlw	0
 11935  003CD4  6E03               	movwf	?i2__div_to_l_+2,c
 11936  003CD6  0E00               	movlw	0
 11937  003CD8  6E04               	movwf	?i2__div_to_l_+3,c
 11938  003CDA  0012               	return	
 11939  003CDC                     i2l4324:
 11940  003CDC  90D8               	bcf	status,0,c
 11941  003CDE  3607               	rlcf	i2__div_to_l_@quot,f,c
 11942  003CE0  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 11943  003CE2  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 11944  003CE4  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 11945  003CE6  060C               	decf	i2__div_to_l_@exp1,f,c
 11946  003CE8                     i2l4326:
 11947  003CE8  500C               	movf	i2__div_to_l_@exp1,w,c
 11948  003CEA  A4D8               	btfss	status,2,c
 11949  003CEC  D7F7               	goto	i2l4324
 11950  003CEE                     i2l640:
 11951  003CEE  C007  F001         	movff	i2__div_to_l_@quot,?i2__div_to_l_
 11952  003CF2  C008  F002         	movff	i2__div_to_l_@quot+1,?i2__div_to_l_+1
 11953  003CF6  C009  F003         	movff	i2__div_to_l_@quot+2,?i2__div_to_l_+2
 11954  003CFA  C00A  F004         	movff	i2__div_to_l_@quot+3,?i2__div_to_l_+3
 11955  003CFE  0012               	return		;funcret
 11956  003D00                     __end_ofi2__div_to_l_:
 11957                           	opt stack 0
 11958                           pclatu	equ	0xFFB
 11959                           pclath	equ	0xFFA
 11960                           tblptru	equ	0xFF8
 11961                           tblptrh	equ	0xFF7
 11962                           tblptrl	equ	0xFF6
 11963                           tablat	equ	0xFF5
 11964                           prodh	equ	0xFF4
 11965                           prodl	equ	0xFF3
 11966                           intcon	equ	0xFF2
 11967                           fsr0h	equ	0xFEA
 11968                           fsr0l	equ	0xFE9
 11969                           wreg	equ	0xFE8
 11970                           fsr1h	equ	0xFE2
 11971                           fsr1l	equ	0xFE1
 11972                           indf2	equ	0xFDF
 11973                           postinc2	equ	0xFDE
 11974                           postdec2	equ	0xFDD
 11975                           fsr2h	equ	0xFDA
 11976                           fsr2l	equ	0xFD9
 11977                           status	equ	0xFD8
 11978                           
 11979 ;; *************** function i2___lltoft *****************
 11980 ;; Defined at:
 11981 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 11982 ;; Parameters:    Size  Location     Type
 11983 ;;  c               4    8[COMRAM] unsigned long 
 11984 ;; Auto vars:     Size  Location     Type
 11985 ;;  __lltoft        1   16[COMRAM] unsigned char 
 11986 ;; Return value:  Size  Location     Type
 11987 ;;                  3    8[COMRAM] float 
 11988 ;; Registers used:
 11989 ;;		wreg, status,2, status,0, cstack
 11990 ;; Tracked objects:
 11991 ;;		On entry : 0/0
 11992 ;;		On exit  : 0/0
 11993 ;;		Unchanged: 0/0
 11994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11995 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11996 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11997 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11998 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11999 ;;Total ram usage:        9 bytes
 12000 ;; Hardware stack levels used:    1
 12001 ;; Hardware stack levels required when called:    1
 12002 ;; This function calls:
 12003 ;;		i2___ftpack
 12004 ;; This function is called by:
 12005 ;;		i2_printf
 12006 ;; This function uses a non-reentrant model
 12007 ;;
 12008                           
 12009                           	psect	text49
 12010  004960                     __ptext49:
 12011                           	opt stack 0
 12012  004960                     i2___lltoft:
 12013                           	opt stack 21
 12014                           
 12015                           ;incstack = 0
 12016  004960  0E8E               	movlw	142
 12017  004962  6E11               	movwf	i2___lltoft@exp,c
 12018  004964  D006               	goto	i2l4502
 12019  004966                     i2l4500:
 12020  004966  90D8               	bcf	status,0,c
 12021  004968  320C               	rrcf	i2___lltoft@c+3,f,c
 12022  00496A  320B               	rrcf	i2___lltoft@c+2,f,c
 12023  00496C  320A               	rrcf	i2___lltoft@c+1,f,c
 12024  00496E  3209               	rrcf	i2___lltoft@c,f,c
 12025  004970  2A11               	incf	i2___lltoft@exp,f,c
 12026  004972                     i2l4502:
 12027  004972  0E00               	movlw	0
 12028  004974  1409               	andwf	i2___lltoft@c,w,c
 12029  004976  6E0D               	movwf	??i2___lltoft& (0+255),c
 12030  004978  0E00               	movlw	0
 12031  00497A  140A               	andwf	i2___lltoft@c+1,w,c
 12032  00497C  6E0E               	movwf	(??i2___lltoft+1)& (0+255),c
 12033  00497E  0E00               	movlw	0
 12034  004980  140B               	andwf	i2___lltoft@c+2,w,c
 12035  004982  6E0F               	movwf	(??i2___lltoft+2)& (0+255),c
 12036  004984  0EFF               	movlw	255
 12037  004986  140C               	andwf	i2___lltoft@c+3,w,c
 12038  004988  6E10               	movwf	(??i2___lltoft+3)& (0+255),c
 12039  00498A  500D               	movf	??i2___lltoft,w,c
 12040  00498C  100E               	iorwf	??i2___lltoft+1,w,c
 12041  00498E  100F               	iorwf	??i2___lltoft+2,w,c
 12042  004990  1010               	iorwf	??i2___lltoft+3,w,c
 12043  004992  A4D8               	btfss	status,2,c
 12044  004994  D7E8               	goto	i2l4500
 12045  004996  C009  F001         	movff	i2___lltoft@c,i2___ftpack@arg
 12046  00499A  C00A  F002         	movff	i2___lltoft@c+1,i2___ftpack@arg+1
 12047  00499E  C00B  F003         	movff	i2___lltoft@c+2,i2___ftpack@arg+2
 12048  0049A2  C011  F004         	movff	i2___lltoft@exp,i2___ftpack@exp
 12049  0049A6  0E00               	movlw	0
 12050  0049A8  6E05               	movwf	i2___ftpack@sign,c
 12051  0049AA  EC1B  F021         	call	i2___ftpack	;wreg free
 12052  0049AE  C001  F009         	movff	?i2___ftpack,?i2___lltoft
 12053  0049B2  C002  F00A         	movff	?i2___ftpack+1,?i2___lltoft+1
 12054  0049B6  C003  F00B         	movff	?i2___ftpack+2,?i2___lltoft+2
 12055  0049BA  0012               	return	
 12056  0049BC                     __end_ofi2___lltoft:
 12057                           	opt stack 0
 12058                           pclatu	equ	0xFFB
 12059                           pclath	equ	0xFFA
 12060                           tblptru	equ	0xFF8
 12061                           tblptrh	equ	0xFF7
 12062                           tblptrl	equ	0xFF6
 12063                           tablat	equ	0xFF5
 12064                           prodh	equ	0xFF4
 12065                           prodl	equ	0xFF3
 12066                           intcon	equ	0xFF2
 12067                           fsr0h	equ	0xFEA
 12068                           fsr0l	equ	0xFE9
 12069                           wreg	equ	0xFE8
 12070                           fsr1h	equ	0xFE2
 12071                           fsr1l	equ	0xFE1
 12072                           indf2	equ	0xFDF
 12073                           postinc2	equ	0xFDE
 12074                           postdec2	equ	0xFDD
 12075                           fsr2h	equ	0xFDA
 12076                           fsr2l	equ	0xFD9
 12077                           status	equ	0xFD8
 12078                           
 12079 ;; *************** function i2___llmod *****************
 12080 ;; Defined at:
 12081 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
 12082 ;; Parameters:    Size  Location     Type
 12083 ;;  dividend        4    0[COMRAM] unsigned long 
 12084 ;;  divisor         4    4[COMRAM] unsigned long 
 12085 ;; Auto vars:     Size  Location     Type
 12086 ;;  __llmod         1    8[COMRAM] unsigned char 
 12087 ;; Return value:  Size  Location     Type
 12088 ;;                  4    0[COMRAM] unsigned long 
 12089 ;; Registers used:
 12090 ;;		wreg, status,2, status,0
 12091 ;; Tracked objects:
 12092 ;;		On entry : 0/0
 12093 ;;		On exit  : 0/0
 12094 ;;		Unchanged: 0/0
 12095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12096 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12097 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12099 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12100 ;;Total ram usage:        9 bytes
 12101 ;; Hardware stack levels used:    1
 12102 ;; This function calls:
 12103 ;;		Nothing
 12104 ;; This function is called by:
 12105 ;;		i2_printf
 12106 ;; This function uses a non-reentrant model
 12107 ;;
 12108                           
 12109                           	psect	text50
 12110  00489A                     __ptext50:
 12111                           	opt stack 0
 12112  00489A                     i2___llmod:
 12113                           	opt stack 22
 12114                           
 12115                           ;incstack = 0
 12116  00489A  5005               	movf	i2___llmod@divisor,w,c
 12117  00489C  1006               	iorwf	i2___llmod@divisor+1,w,c
 12118  00489E  1007               	iorwf	i2___llmod@divisor+2,w,c
 12119  0048A0  1008               	iorwf	i2___llmod@divisor+3,w,c
 12120  0048A2  B4D8               	btfsc	status,2,c
 12121  0048A4  D024               	goto	i2l824
 12122  0048A6  0E01               	movlw	1
 12123  0048A8  6E09               	movwf	i2___llmod@counter,c
 12124  0048AA  D006               	goto	i2l4488
 12125  0048AC                     i2l4486:
 12126  0048AC  90D8               	bcf	status,0,c
 12127  0048AE  3605               	rlcf	i2___llmod@divisor,f,c
 12128  0048B0  3606               	rlcf	i2___llmod@divisor+1,f,c
 12129  0048B2  3607               	rlcf	i2___llmod@divisor+2,f,c
 12130  0048B4  3608               	rlcf	i2___llmod@divisor+3,f,c
 12131  0048B6  2A09               	incf	i2___llmod@counter,f,c
 12132  0048B8                     i2l4488:
 12133  0048B8  AE08               	btfss	i2___llmod@divisor+3,7,c
 12134  0048BA  D7F8               	goto	i2l4486
 12135  0048BC                     i2l4490:
 12136  0048BC  5005               	movf	i2___llmod@divisor,w,c
 12137  0048BE  5C01               	subwf	i2___llmod@dividend,w,c
 12138  0048C0  5006               	movf	i2___llmod@divisor+1,w,c
 12139  0048C2  5802               	subwfb	i2___llmod@dividend+1,w,c
 12140  0048C4  5007               	movf	i2___llmod@divisor+2,w,c
 12141  0048C6  5803               	subwfb	i2___llmod@dividend+2,w,c
 12142  0048C8  5008               	movf	i2___llmod@divisor+3,w,c
 12143  0048CA  5804               	subwfb	i2___llmod@dividend+3,w,c
 12144  0048CC  A0D8               	btfss	status,0,c
 12145  0048CE  D008               	goto	i2l4494
 12146  0048D0  5005               	movf	i2___llmod@divisor,w,c
 12147  0048D2  5E01               	subwf	i2___llmod@dividend,f,c
 12148  0048D4  5006               	movf	i2___llmod@divisor+1,w,c
 12149  0048D6  5A02               	subwfb	i2___llmod@dividend+1,f,c
 12150  0048D8  5007               	movf	i2___llmod@divisor+2,w,c
 12151  0048DA  5A03               	subwfb	i2___llmod@dividend+2,f,c
 12152  0048DC  5008               	movf	i2___llmod@divisor+3,w,c
 12153  0048DE  5A04               	subwfb	i2___llmod@dividend+3,f,c
 12154  0048E0                     i2l4494:
 12155  0048E0  90D8               	bcf	status,0,c
 12156  0048E2  3208               	rrcf	i2___llmod@divisor+3,f,c
 12157  0048E4  3207               	rrcf	i2___llmod@divisor+2,f,c
 12158  0048E6  3206               	rrcf	i2___llmod@divisor+1,f,c
 12159  0048E8  3205               	rrcf	i2___llmod@divisor,f,c
 12160  0048EA  2E09               	decfsz	i2___llmod@counter,f,c
 12161  0048EC  D7E7               	goto	i2l4490
 12162  0048EE                     i2l824:
 12163  0048EE  C001  F001         	movff	i2___llmod@dividend,?i2___llmod
 12164  0048F2  C002  F002         	movff	i2___llmod@dividend+1,?i2___llmod+1
 12165  0048F6  C003  F003         	movff	i2___llmod@dividend+2,?i2___llmod+2
 12166  0048FA  C004  F004         	movff	i2___llmod@dividend+3,?i2___llmod+3
 12167  0048FE  0012               	return		;funcret
 12168  004900                     __end_ofi2___llmod:
 12169                           	opt stack 0
 12170                           pclatu	equ	0xFFB
 12171                           pclath	equ	0xFFA
 12172                           tblptru	equ	0xFF8
 12173                           tblptrh	equ	0xFF7
 12174                           tblptrl	equ	0xFF6
 12175                           tablat	equ	0xFF5
 12176                           prodh	equ	0xFF4
 12177                           prodl	equ	0xFF3
 12178                           intcon	equ	0xFF2
 12179                           fsr0h	equ	0xFEA
 12180                           fsr0l	equ	0xFE9
 12181                           wreg	equ	0xFE8
 12182                           fsr1h	equ	0xFE2
 12183                           fsr1l	equ	0xFE1
 12184                           indf2	equ	0xFDF
 12185                           postinc2	equ	0xFDE
 12186                           postdec2	equ	0xFDD
 12187                           fsr2h	equ	0xFDA
 12188                           fsr2l	equ	0xFD9
 12189                           status	equ	0xFD8
 12190                           
 12191 ;; *************** function i2___lldiv *****************
 12192 ;; Defined at:
 12193 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 12194 ;; Parameters:    Size  Location     Type
 12195 ;;  dividend        4    0[COMRAM] unsigned long 
 12196 ;;  divisor         4    4[COMRAM] unsigned long 
 12197 ;; Auto vars:     Size  Location     Type
 12198 ;;  __lldiv         4    8[COMRAM] unsigned long 
 12199 ;;  __lldiv         1   12[COMRAM] unsigned char 
 12200 ;; Return value:  Size  Location     Type
 12201 ;;                  4    0[COMRAM] unsigned long 
 12202 ;; Registers used:
 12203 ;;		wreg, status,2, status,0
 12204 ;; Tracked objects:
 12205 ;;		On entry : 0/0
 12206 ;;		On exit  : 0/0
 12207 ;;		Unchanged: 0/0
 12208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12209 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12210 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12212 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12213 ;;Total ram usage:       13 bytes
 12214 ;; Hardware stack levels used:    1
 12215 ;; This function calls:
 12216 ;;		Nothing
 12217 ;; This function is called by:
 12218 ;;		i2_printf
 12219 ;; This function uses a non-reentrant model
 12220 ;;
 12221                           
 12222                           	psect	text51
 12223  00465A                     __ptext51:
 12224                           	opt stack 0
 12225  00465A                     i2___lldiv:
 12226                           	opt stack 22
 12227                           
 12228                           ;incstack = 0
 12229  00465A  0E00               	movlw	0
 12230  00465C  6E09               	movwf	i2___lldiv@quotient,c
 12231  00465E  0E00               	movlw	0
 12232  004660  6E0A               	movwf	i2___lldiv@quotient+1,c
 12233  004662  0E00               	movlw	0
 12234  004664  6E0B               	movwf	i2___lldiv@quotient+2,c
 12235  004666  0E00               	movlw	0
 12236  004668  6E0C               	movwf	i2___lldiv@quotient+3,c
 12237  00466A  5005               	movf	i2___lldiv@divisor,w,c
 12238  00466C  1006               	iorwf	i2___lldiv@divisor+1,w,c
 12239  00466E  1007               	iorwf	i2___lldiv@divisor+2,w,c
 12240  004670  1008               	iorwf	i2___lldiv@divisor+3,w,c
 12241  004672  B4D8               	btfsc	status,2,c
 12242  004674  D02A               	goto	i2l814
 12243  004676  0E01               	movlw	1
 12244  004678  6E0D               	movwf	i2___lldiv@counter,c
 12245  00467A  D006               	goto	i2l4468
 12246  00467C                     i2l4466:
 12247  00467C  90D8               	bcf	status,0,c
 12248  00467E  3605               	rlcf	i2___lldiv@divisor,f,c
 12249  004680  3606               	rlcf	i2___lldiv@divisor+1,f,c
 12250  004682  3607               	rlcf	i2___lldiv@divisor+2,f,c
 12251  004684  3608               	rlcf	i2___lldiv@divisor+3,f,c
 12252  004686  2A0D               	incf	i2___lldiv@counter,f,c
 12253  004688                     i2l4468:
 12254  004688  AE08               	btfss	i2___lldiv@divisor+3,7,c
 12255  00468A  D7F8               	goto	i2l4466
 12256  00468C                     i2l4470:
 12257  00468C  90D8               	bcf	status,0,c
 12258  00468E  3609               	rlcf	i2___lldiv@quotient,f,c
 12259  004690  360A               	rlcf	i2___lldiv@quotient+1,f,c
 12260  004692  360B               	rlcf	i2___lldiv@quotient+2,f,c
 12261  004694  360C               	rlcf	i2___lldiv@quotient+3,f,c
 12262  004696  5005               	movf	i2___lldiv@divisor,w,c
 12263  004698  5C01               	subwf	i2___lldiv@dividend,w,c
 12264  00469A  5006               	movf	i2___lldiv@divisor+1,w,c
 12265  00469C  5802               	subwfb	i2___lldiv@dividend+1,w,c
 12266  00469E  5007               	movf	i2___lldiv@divisor+2,w,c
 12267  0046A0  5803               	subwfb	i2___lldiv@dividend+2,w,c
 12268  0046A2  5008               	movf	i2___lldiv@divisor+3,w,c
 12269  0046A4  5804               	subwfb	i2___lldiv@dividend+3,w,c
 12270  0046A6  A0D8               	btfss	status,0,c
 12271  0046A8  D009               	goto	i2l4478
 12272  0046AA  5005               	movf	i2___lldiv@divisor,w,c
 12273  0046AC  5E01               	subwf	i2___lldiv@dividend,f,c
 12274  0046AE  5006               	movf	i2___lldiv@divisor+1,w,c
 12275  0046B0  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 12276  0046B2  5007               	movf	i2___lldiv@divisor+2,w,c
 12277  0046B4  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 12278  0046B6  5008               	movf	i2___lldiv@divisor+3,w,c
 12279  0046B8  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 12280  0046BA  8009               	bsf	i2___lldiv@quotient,0,c
 12281  0046BC                     i2l4478:
 12282  0046BC  90D8               	bcf	status,0,c
 12283  0046BE  3208               	rrcf	i2___lldiv@divisor+3,f,c
 12284  0046C0  3207               	rrcf	i2___lldiv@divisor+2,f,c
 12285  0046C2  3206               	rrcf	i2___lldiv@divisor+1,f,c
 12286  0046C4  3205               	rrcf	i2___lldiv@divisor,f,c
 12287  0046C6  2E0D               	decfsz	i2___lldiv@counter,f,c
 12288  0046C8  D7E1               	goto	i2l4470
 12289  0046CA                     i2l814:
 12290  0046CA  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 12291  0046CE  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 12292  0046D2  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 12293  0046D6  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 12294  0046DA  0012               	return		;funcret
 12295  0046DC                     __end_ofi2___lldiv:
 12296                           	opt stack 0
 12297                           pclatu	equ	0xFFB
 12298                           pclath	equ	0xFFA
 12299                           tblptru	equ	0xFF8
 12300                           tblptrh	equ	0xFF7
 12301                           tblptrl	equ	0xFF6
 12302                           tablat	equ	0xFF5
 12303                           prodh	equ	0xFF4
 12304                           prodl	equ	0xFF3
 12305                           intcon	equ	0xFF2
 12306                           fsr0h	equ	0xFEA
 12307                           fsr0l	equ	0xFE9
 12308                           wreg	equ	0xFE8
 12309                           fsr1h	equ	0xFE2
 12310                           fsr1l	equ	0xFE1
 12311                           indf2	equ	0xFDF
 12312                           postinc2	equ	0xFDE
 12313                           postdec2	equ	0xFDD
 12314                           fsr2h	equ	0xFDA
 12315                           fsr2l	equ	0xFD9
 12316                           status	equ	0xFD8
 12317                           
 12318 ;; *************** function i2___fttol *****************
 12319 ;; Defined at:
 12320 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 12321 ;; Parameters:    Size  Location     Type
 12322 ;;  f1              3   42[COMRAM] float 
 12323 ;; Auto vars:     Size  Location     Type
 12324 ;;  __fttol         4   52[COMRAM] unsigned long 
 12325 ;;  __fttol         1   56[COMRAM] unsigned char 
 12326 ;;  __fttol         1   51[COMRAM] unsigned char 
 12327 ;; Return value:  Size  Location     Type
 12328 ;;                  4   42[COMRAM] long 
 12329 ;; Registers used:
 12330 ;;		wreg, status,2, status,0
 12331 ;; Tracked objects:
 12332 ;;		On entry : 0/0
 12333 ;;		On exit  : 0/0
 12334 ;;		Unchanged: 0/0
 12335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12336 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12337 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12338 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12339 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12340 ;;Total ram usage:       15 bytes
 12341 ;; Hardware stack levels used:    1
 12342 ;; This function calls:
 12343 ;;		Nothing
 12344 ;; This function is called by:
 12345 ;;		i2_printf
 12346 ;; This function uses a non-reentrant model
 12347 ;;
 12348                           
 12349                           	psect	text52
 12350  003F00                     __ptext52:
 12351                           	opt stack 0
 12352  003F00                     i2___fttol:
 12353                           	opt stack 22
 12354                           
 12355                           ;incstack = 0
 12356  003F00  C02D  F02F         	movff	i2___fttol@f1+2,??i2___fttol
 12357  003F04  6A30               	clrf	(??i2___fttol+1)& (0+255),c
 12358  003F06  6A31               	clrf	(??i2___fttol+2)& (0+255),c
 12359  003F08  342C               	rlcf	i2___fttol@f1+1,w,c
 12360  003F0A  362F               	rlcf	??i2___fttol& (0+255),f,c
 12361  003F0C  E301               	bnc	u498_41
 12362  003F0E  8030               	bsf	(??i2___fttol+1)& (0+255),0,c
 12363  003F10                     u498_41:
 12364  003F10  502F               	movf	??i2___fttol,w,c
 12365  003F12  6E39               	movwf	i2___fttol@exp1,c
 12366  003F14  5039               	movf	i2___fttol@exp1,w,c
 12367  003F16  A4D8               	btfss	status,2,c
 12368  003F18  D009               	goto	i2l4420
 12369  003F1A  0E00               	movlw	0
 12370  003F1C  6E2B               	movwf	?i2___fttol,c
 12371  003F1E  0E00               	movlw	0
 12372  003F20  6E2C               	movwf	?i2___fttol+1,c
 12373  003F22  0E00               	movlw	0
 12374  003F24  6E2D               	movwf	?i2___fttol+2,c
 12375  003F26  0E00               	movlw	0
 12376  003F28  6E2E               	movwf	?i2___fttol+3,c
 12377  003F2A  0012               	return	
 12378  003F2C                     i2l4420:
 12379  003F2C  0E17               	movlw	23
 12380  003F2E  6E2F               	movwf	??i2___fttol& (0+255),c
 12381  003F30  C02B  F030         	movff	i2___fttol@f1,??i2___fttol+1
 12382  003F34  C02C  F031         	movff	i2___fttol@f1+1,??i2___fttol+2
 12383  003F38  C02D  F032         	movff	i2___fttol@f1+2,??i2___fttol+3
 12384  003F3C  282F               	incf	??i2___fttol,w,c
 12385  003F3E  6E33               	movwf	(??i2___fttol+4)& (0+255),c
 12386  003F40  D004               	goto	i2u500_40
 12387  003F42                     i2u500_45:
 12388  003F42  90D8               	bcf	status,0,c
 12389  003F44  3232               	rrcf	??i2___fttol+3,f,c
 12390  003F46  3231               	rrcf	??i2___fttol+2,f,c
 12391  003F48  3230               	rrcf	??i2___fttol+1,f,c
 12392  003F4A                     i2u500_40:
 12393  003F4A  2E33               	decfsz	(??i2___fttol+4)& (0+255),f,c
 12394  003F4C  D7FA               	goto	i2u500_45
 12395  003F4E  5030               	movf	??i2___fttol+1,w,c
 12396  003F50  6E34               	movwf	i2___fttol@sign1,c
 12397  003F52  8E2C               	bsf	i2___fttol@f1+1,7,c
 12398  003F54  0EFF               	movlw	255
 12399  003F56  162B               	andwf	i2___fttol@f1,f,c
 12400  003F58  0EFF               	movlw	255
 12401  003F5A  162C               	andwf	i2___fttol@f1+1,f,c
 12402  003F5C  0E00               	movlw	0
 12403  003F5E  162D               	andwf	i2___fttol@f1+2,f,c
 12404  003F60  502B               	movf	i2___fttol@f1,w,c
 12405  003F62  6E35               	movwf	i2___fttol@lval,c
 12406  003F64  502C               	movf	i2___fttol@f1+1,w,c
 12407  003F66  6E36               	movwf	i2___fttol@lval+1,c
 12408  003F68  502D               	movf	i2___fttol@f1+2,w,c
 12409  003F6A  6E37               	movwf	i2___fttol@lval+2,c
 12410  003F6C  6A38               	clrf	i2___fttol@lval+3,c
 12411  003F6E  0E8E               	movlw	142
 12412  003F70  5E39               	subwf	i2___fttol@exp1,f,c
 12413  003F72  AE39               	btfss	i2___fttol@exp1,7,c
 12414  003F74  D016               	goto	i2l4442
 12415  003F76  5039               	movf	i2___fttol@exp1,w,c
 12416  003F78  0A80               	xorlw	128
 12417  003F7A  0F8F               	addlw	143
 12418  003F7C  B0D8               	btfsc	status,0,c
 12419  003F7E  D009               	goto	i2l4438
 12420  003F80  0E00               	movlw	0
 12421  003F82  6E2B               	movwf	?i2___fttol,c
 12422  003F84  0E00               	movlw	0
 12423  003F86  6E2C               	movwf	?i2___fttol+1,c
 12424  003F88  0E00               	movlw	0
 12425  003F8A  6E2D               	movwf	?i2___fttol+2,c
 12426  003F8C  0E00               	movlw	0
 12427  003F8E  6E2E               	movwf	?i2___fttol+3,c
 12428  003F90  0012               	return	
 12429  003F92                     i2l4438:
 12430  003F92  90D8               	bcf	status,0,c
 12431  003F94  3238               	rrcf	i2___fttol@lval+3,f,c
 12432  003F96  3237               	rrcf	i2___fttol@lval+2,f,c
 12433  003F98  3236               	rrcf	i2___fttol@lval+1,f,c
 12434  003F9A  3235               	rrcf	i2___fttol@lval,f,c
 12435  003F9C  3E39               	incfsz	i2___fttol@exp1,f,c
 12436  003F9E  D7F9               	goto	i2l4438
 12437  003FA0  D015               	goto	i2l4452
 12438  003FA2                     i2l4442:
 12439  003FA2  0E17               	movlw	23
 12440  003FA4  6439               	cpfsgt	i2___fttol@exp1,c
 12441  003FA6  D00F               	goto	i2l4450
 12442  003FA8  0E00               	movlw	0
 12443  003FAA  6E2B               	movwf	?i2___fttol,c
 12444  003FAC  0E00               	movlw	0
 12445  003FAE  6E2C               	movwf	?i2___fttol+1,c
 12446  003FB0  0E00               	movlw	0
 12447  003FB2  6E2D               	movwf	?i2___fttol+2,c
 12448  003FB4  0E00               	movlw	0
 12449  003FB6  6E2E               	movwf	?i2___fttol+3,c
 12450  003FB8  0012               	return	
 12451  003FBA                     i2l4448:
 12452  003FBA  90D8               	bcf	status,0,c
 12453  003FBC  3635               	rlcf	i2___fttol@lval,f,c
 12454  003FBE  3636               	rlcf	i2___fttol@lval+1,f,c
 12455  003FC0  3637               	rlcf	i2___fttol@lval+2,f,c
 12456  003FC2  3638               	rlcf	i2___fttol@lval+3,f,c
 12457  003FC4  0639               	decf	i2___fttol@exp1,f,c
 12458  003FC6                     i2l4450:
 12459  003FC6  5039               	movf	i2___fttol@exp1,w,c
 12460  003FC8  A4D8               	btfss	status,2,c
 12461  003FCA  D7F7               	goto	i2l4448
 12462  003FCC                     i2l4452:
 12463  003FCC  5034               	movf	i2___fttol@sign1,w,c
 12464  003FCE  B4D8               	btfsc	status,2,c
 12465  003FD0  D008               	goto	i2l4456
 12466  003FD2  1E38               	comf	i2___fttol@lval+3,f,c
 12467  003FD4  1E37               	comf	i2___fttol@lval+2,f,c
 12468  003FD6  1E36               	comf	i2___fttol@lval+1,f,c
 12469  003FD8  6C35               	negf	i2___fttol@lval,c
 12470  003FDA  0E00               	movlw	0
 12471  003FDC  2236               	addwfc	i2___fttol@lval+1,f,c
 12472  003FDE  2237               	addwfc	i2___fttol@lval+2,f,c
 12473  003FE0  2238               	addwfc	i2___fttol@lval+3,f,c
 12474  003FE2                     i2l4456:
 12475  003FE2  C035  F02B         	movff	i2___fttol@lval,?i2___fttol
 12476  003FE6  C036  F02C         	movff	i2___fttol@lval+1,?i2___fttol+1
 12477  003FEA  C037  F02D         	movff	i2___fttol@lval+2,?i2___fttol+2
 12478  003FEE  C038  F02E         	movff	i2___fttol@lval+3,?i2___fttol+3
 12479  003FF2  0012               	return	
 12480  003FF4                     __end_ofi2___fttol:
 12481                           	opt stack 0
 12482                           pclatu	equ	0xFFB
 12483                           pclath	equ	0xFFA
 12484                           tblptru	equ	0xFF8
 12485                           tblptrh	equ	0xFF7
 12486                           tblptrl	equ	0xFF6
 12487                           tablat	equ	0xFF5
 12488                           prodh	equ	0xFF4
 12489                           prodl	equ	0xFF3
 12490                           intcon	equ	0xFF2
 12491                           fsr0h	equ	0xFEA
 12492                           fsr0l	equ	0xFE9
 12493                           wreg	equ	0xFE8
 12494                           fsr1h	equ	0xFE2
 12495                           fsr1l	equ	0xFE1
 12496                           indf2	equ	0xFDF
 12497                           postinc2	equ	0xFDE
 12498                           postdec2	equ	0xFDD
 12499                           fsr2h	equ	0xFDA
 12500                           fsr2l	equ	0xFD9
 12501                           status	equ	0xFD8
 12502                           
 12503 ;; *************** function i2___ftsub *****************
 12504 ;; Defined at:
 12505 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 12506 ;; Parameters:    Size  Location     Type
 12507 ;;  f1              3   57[COMRAM] float 
 12508 ;;  f2              3   60[COMRAM] float 
 12509 ;; Auto vars:     Size  Location     Type
 12510 ;;		None
 12511 ;; Return value:  Size  Location     Type
 12512 ;;                  3   57[COMRAM] float 
 12513 ;; Registers used:
 12514 ;;		wreg, status,2, status,0, cstack
 12515 ;; Tracked objects:
 12516 ;;		On entry : 0/0
 12517 ;;		On exit  : 0/0
 12518 ;;		Unchanged: 0/0
 12519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12520 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12523 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12524 ;;Total ram usage:        6 bytes
 12525 ;; Hardware stack levels used:    1
 12526 ;; Hardware stack levels required when called:    2
 12527 ;; This function calls:
 12528 ;;		i2___ftadd
 12529 ;; This function is called by:
 12530 ;;		i2_printf
 12531 ;; This function uses a non-reentrant model
 12532 ;;
 12533                           
 12534                           	psect	text53
 12535  004AA4                     __ptext53:
 12536                           	opt stack 0
 12537  004AA4                     i2___ftsub:
 12538                           	opt stack 20
 12539                           
 12540                           ;incstack = 0
 12541  004AA4  503D               	movf	i2___ftsub@f2,w,c
 12542  004AA6  103E               	iorwf	i2___ftsub@f2+1,w,c
 12543  004AA8  103F               	iorwf	i2___ftsub@f2+2,w,c
 12544  004AAA  B4D8               	btfsc	status,2,c
 12545  004AAC  D006               	goto	i2l4410
 12546  004AAE  0E00               	movlw	0
 12547  004AB0  1A3D               	xorwf	i2___ftsub@f2,f,c
 12548  004AB2  0E00               	movlw	0
 12549  004AB4  1A3E               	xorwf	i2___ftsub@f2+1,f,c
 12550  004AB6  0E80               	movlw	128
 12551  004AB8  1A3F               	xorwf	i2___ftsub@f2+2,f,c
 12552  004ABA                     i2l4410:
 12553  004ABA  C03A  F02E         	movff	i2___ftsub@f1,i2___ftadd@f1
 12554  004ABE  C03B  F02F         	movff	i2___ftsub@f1+1,i2___ftadd@f1+1
 12555  004AC2  C03C  F030         	movff	i2___ftsub@f1+2,i2___ftadd@f1+2
 12556  004AC6  C03D  F031         	movff	i2___ftsub@f2,i2___ftadd@f2
 12557  004ACA  C03E  F032         	movff	i2___ftsub@f2+1,i2___ftadd@f2+1
 12558  004ACE  C03F  F033         	movff	i2___ftsub@f2+2,i2___ftadd@f2+2
 12559  004AD2  ECF3  F018         	call	i2___ftadd	;wreg free
 12560  004AD6  C02E  F03A         	movff	?i2___ftadd,?i2___ftsub
 12561  004ADA  C02F  F03B         	movff	?i2___ftadd+1,?i2___ftsub+1
 12562  004ADE  C030  F03C         	movff	?i2___ftadd+2,?i2___ftsub+2
 12563  004AE2  0012               	return	
 12564  004AE4                     __end_ofi2___ftsub:
 12565                           	opt stack 0
 12566                           pclatu	equ	0xFFB
 12567                           pclath	equ	0xFFA
 12568                           tblptru	equ	0xFF8
 12569                           tblptrh	equ	0xFF7
 12570                           tblptrl	equ	0xFF6
 12571                           tablat	equ	0xFF5
 12572                           prodh	equ	0xFF4
 12573                           prodl	equ	0xFF3
 12574                           intcon	equ	0xFF2
 12575                           fsr0h	equ	0xFEA
 12576                           fsr0l	equ	0xFE9
 12577                           wreg	equ	0xFE8
 12578                           fsr1h	equ	0xFE2
 12579                           fsr1l	equ	0xFE1
 12580                           indf2	equ	0xFDF
 12581                           postinc2	equ	0xFDE
 12582                           postdec2	equ	0xFDD
 12583                           fsr2h	equ	0xFDA
 12584                           fsr2l	equ	0xFD9
 12585                           status	equ	0xFD8
 12586                           
 12587 ;; *************** function i2___ftadd *****************
 12588 ;; Defined at:
 12589 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 12590 ;; Parameters:    Size  Location     Type
 12591 ;;  f1              3   45[COMRAM] float 
 12592 ;;  f2              3   48[COMRAM] float 
 12593 ;; Auto vars:     Size  Location     Type
 12594 ;;  __ftadd         1   56[COMRAM] unsigned char 
 12595 ;;  __ftadd         1   55[COMRAM] unsigned char 
 12596 ;;  __ftadd         1   54[COMRAM] unsigned char 
 12597 ;; Return value:  Size  Location     Type
 12598 ;;                  3   45[COMRAM] float 
 12599 ;; Registers used:
 12600 ;;		wreg, status,2, status,0, cstack
 12601 ;; Tracked objects:
 12602 ;;		On entry : 0/0
 12603 ;;		On exit  : 0/0
 12604 ;;		Unchanged: 0/0
 12605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12606 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12607 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12608 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12609 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12610 ;;Total ram usage:       12 bytes
 12611 ;; Hardware stack levels used:    1
 12612 ;; Hardware stack levels required when called:    1
 12613 ;; This function calls:
 12614 ;;		i2___ftpack
 12615 ;; This function is called by:
 12616 ;;		i2_printf
 12617 ;;		i2___ftsub
 12618 ;; This function uses a non-reentrant model
 12619 ;;
 12620                           
 12621                           	psect	text54
 12622  0031E6                     __ptext54:
 12623                           	opt stack 0
 12624  0031E6                     i2___ftadd:
 12625                           	opt stack 20
 12626                           
 12627                           ;incstack = 0
 12628  0031E6  C030  F034         	movff	i2___ftadd@f1+2,??i2___ftadd
 12629  0031EA  6A35               	clrf	(??i2___ftadd+1)& (0+255),c
 12630  0031EC  6A36               	clrf	(??i2___ftadd+2)& (0+255),c
 12631  0031EE  342F               	rlcf	i2___ftadd@f1+1,w,c
 12632  0031F0  3634               	rlcf	??i2___ftadd& (0+255),f,c
 12633  0031F2  E301               	bnc	u402_41
 12634  0031F4  8035               	bsf	(??i2___ftadd+1)& (0+255),0,c
 12635  0031F6                     u402_41:
 12636  0031F6  5034               	movf	??i2___ftadd,w,c
 12637  0031F8  6E39               	movwf	i2___ftadd@exp1,c
 12638  0031FA  C033  F034         	movff	i2___ftadd@f2+2,??i2___ftadd
 12639  0031FE  6A35               	clrf	(??i2___ftadd+1)& (0+255),c
 12640  003200  6A36               	clrf	(??i2___ftadd+2)& (0+255),c
 12641  003202  3432               	rlcf	i2___ftadd@f2+1,w,c
 12642  003204  3634               	rlcf	??i2___ftadd& (0+255),f,c
 12643  003206  E301               	bnc	u403_41
 12644  003208  8035               	bsf	(??i2___ftadd+1)& (0+255),0,c
 12645  00320A                     u403_41:
 12646  00320A  5034               	movf	??i2___ftadd,w,c
 12647  00320C  6E38               	movwf	i2___ftadd@exp2,c
 12648  00320E  5039               	movf	i2___ftadd@exp1,w,c
 12649  003210  B4D8               	btfsc	status,2,c
 12650  003212  D00B               	goto	i2l695
 12651  003214  5038               	movf	i2___ftadd@exp2,w,c
 12652  003216  5C39               	subwf	i2___ftadd@exp1,w,c
 12653  003218  B0D8               	btfsc	status,0,c
 12654  00321A  D00E               	goto	i2l3802
 12655  00321C  5039               	movf	i2___ftadd@exp1,w,c
 12656  00321E  0800               	sublw	0
 12657  003220  2438               	addwf	i2___ftadd@exp2,w,c
 12658  003222  6E34               	movwf	??i2___ftadd& (0+255),c
 12659  003224  0E18               	movlw	24
 12660  003226  6434               	cpfsgt	??i2___ftadd,c
 12661  003228  D007               	goto	i2l3802
 12662  00322A                     i2l695:
 12663  00322A  C031  F02E         	movff	i2___ftadd@f2,?i2___ftadd
 12664  00322E  C032  F02F         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 12665  003232  C033  F030         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 12666  003236  0012               	return	
 12667  003238                     i2l3802:
 12668  003238  5038               	movf	i2___ftadd@exp2,w,c
 12669  00323A  B4D8               	btfsc	status,2,c
 12670  00323C  D00B               	goto	i2l699
 12671  00323E  5039               	movf	i2___ftadd@exp1,w,c
 12672  003240  5C38               	subwf	i2___ftadd@exp2,w,c
 12673  003242  B0D8               	btfsc	status,0,c
 12674  003244  D00E               	goto	i2l3808
 12675  003246  5038               	movf	i2___ftadd@exp2,w,c
 12676  003248  0800               	sublw	0
 12677  00324A  2439               	addwf	i2___ftadd@exp1,w,c
 12678  00324C  6E34               	movwf	??i2___ftadd& (0+255),c
 12679  00324E  0E18               	movlw	24
 12680  003250  6434               	cpfsgt	??i2___ftadd,c
 12681  003252  D007               	goto	i2l3808
 12682  003254                     i2l699:
 12683  003254  C02E  F02E         	movff	i2___ftadd@f1,?i2___ftadd
 12684  003258  C02F  F02F         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 12685  00325C  C030  F030         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 12686  003260  0012               	return	
 12687  003262                     i2l3808:
 12688  003262  0E06               	movlw	6
 12689  003264  6E37               	movwf	i2___ftadd@sign,c
 12690  003266  BE30               	btfsc	i2___ftadd@f1+2,7,c
 12691  003268  8E37               	bsf	i2___ftadd@sign,7,c
 12692  00326A  BE33               	btfsc	i2___ftadd@f2+2,7,c
 12693  00326C  8C37               	bsf	i2___ftadd@sign,6,c
 12694  00326E  8E2F               	bsf	i2___ftadd@f1+1,7,c
 12695  003270  0EFF               	movlw	255
 12696  003272  162E               	andwf	i2___ftadd@f1,f,c
 12697  003274  0EFF               	movlw	255
 12698  003276  162F               	andwf	i2___ftadd@f1+1,f,c
 12699  003278  0E00               	movlw	0
 12700  00327A  1630               	andwf	i2___ftadd@f1+2,f,c
 12701  00327C  8E32               	bsf	i2___ftadd@f2+1,7,c
 12702  00327E  0EFF               	movlw	255
 12703  003280  1631               	andwf	i2___ftadd@f2,f,c
 12704  003282  0EFF               	movlw	255
 12705  003284  1632               	andwf	i2___ftadd@f2+1,f,c
 12706  003286  0E00               	movlw	0
 12707  003288  1633               	andwf	i2___ftadd@f2+2,f,c
 12708  00328A  5038               	movf	i2___ftadd@exp2,w,c
 12709  00328C  5C39               	subwf	i2___ftadd@exp1,w,c
 12710  00328E  B0D8               	btfsc	status,0,c
 12711  003290  D01B               	goto	i2l3834
 12712  003292                     i2l3824:
 12713  003292  90D8               	bcf	status,0,c
 12714  003294  3631               	rlcf	i2___ftadd@f2,f,c
 12715  003296  3632               	rlcf	i2___ftadd@f2+1,f,c
 12716  003298  3633               	rlcf	i2___ftadd@f2+2,f,c
 12717  00329A  0638               	decf	i2___ftadd@exp2,f,c
 12718  00329C  5039               	movf	i2___ftadd@exp1,w,c
 12719  00329E  1838               	xorwf	i2___ftadd@exp2,w,c
 12720  0032A0  B4D8               	btfsc	status,2,c
 12721  0032A2  D00D               	goto	i2l3832
 12722  0032A4  0637               	decf	i2___ftadd@sign,f,c
 12723  0032A6  C037  F034         	movff	i2___ftadd@sign,??i2___ftadd
 12724  0032AA  0E07               	movlw	7
 12725  0032AC  1634               	andwf	??i2___ftadd,f,c
 12726  0032AE  B4D8               	btfsc	status,2,c
 12727  0032B0  D006               	goto	i2l3832
 12728  0032B2  D7EF               	goto	i2l3824
 12729  0032B4                     i2l3830:
 12730  0032B4  90D8               	bcf	status,0,c
 12731  0032B6  3230               	rrcf	i2___ftadd@f1+2,f,c
 12732  0032B8  322F               	rrcf	i2___ftadd@f1+1,f,c
 12733  0032BA  322E               	rrcf	i2___ftadd@f1,f,c
 12734  0032BC  2A39               	incf	i2___ftadd@exp1,f,c
 12735  0032BE                     i2l3832:
 12736  0032BE  5038               	movf	i2___ftadd@exp2,w,c
 12737  0032C0  1839               	xorwf	i2___ftadd@exp1,w,c
 12738  0032C2  B4D8               	btfsc	status,2,c
 12739  0032C4  D01F               	goto	i2l710
 12740  0032C6  D7F6               	goto	i2l3830
 12741  0032C8                     i2l3834:
 12742  0032C8  5039               	movf	i2___ftadd@exp1,w,c
 12743  0032CA  5C38               	subwf	i2___ftadd@exp2,w,c
 12744  0032CC  B0D8               	btfsc	status,0,c
 12745  0032CE  D01A               	goto	i2l710
 12746  0032D0                     i2l3836:
 12747  0032D0  90D8               	bcf	status,0,c
 12748  0032D2  362E               	rlcf	i2___ftadd@f1,f,c
 12749  0032D4  362F               	rlcf	i2___ftadd@f1+1,f,c
 12750  0032D6  3630               	rlcf	i2___ftadd@f1+2,f,c
 12751  0032D8  0639               	decf	i2___ftadd@exp1,f,c
 12752  0032DA  5039               	movf	i2___ftadd@exp1,w,c
 12753  0032DC  1838               	xorwf	i2___ftadd@exp2,w,c
 12754  0032DE  B4D8               	btfsc	status,2,c
 12755  0032E0  D00D               	goto	i2l3844
 12756  0032E2  0637               	decf	i2___ftadd@sign,f,c
 12757  0032E4  C037  F034         	movff	i2___ftadd@sign,??i2___ftadd
 12758  0032E8  0E07               	movlw	7
 12759  0032EA  1634               	andwf	??i2___ftadd,f,c
 12760  0032EC  B4D8               	btfsc	status,2,c
 12761  0032EE  D006               	goto	i2l3844
 12762  0032F0  D7EF               	goto	i2l3836
 12763  0032F2                     i2l3842:
 12764  0032F2  90D8               	bcf	status,0,c
 12765  0032F4  3233               	rrcf	i2___ftadd@f2+2,f,c
 12766  0032F6  3232               	rrcf	i2___ftadd@f2+1,f,c
 12767  0032F8  3231               	rrcf	i2___ftadd@f2,f,c
 12768  0032FA  2A38               	incf	i2___ftadd@exp2,f,c
 12769  0032FC                     i2l3844:
 12770  0032FC  5038               	movf	i2___ftadd@exp2,w,c
 12771  0032FE  1839               	xorwf	i2___ftadd@exp1,w,c
 12772  003300  A4D8               	btfss	status,2,c
 12773  003302  D7F7               	goto	i2l3842
 12774  003304                     i2l710:
 12775  003304  AE37               	btfss	i2___ftadd@sign,7,c
 12776  003306  D00C               	goto	i2l719
 12777  003308  0EFF               	movlw	255
 12778  00330A  1A2E               	xorwf	i2___ftadd@f1,f,c
 12779  00330C  0EFF               	movlw	255
 12780  00330E  1A2F               	xorwf	i2___ftadd@f1+1,f,c
 12781  003310  0EFF               	movlw	255
 12782  003312  1A30               	xorwf	i2___ftadd@f1+2,f,c
 12783  003314  0E01               	movlw	1
 12784  003316  262E               	addwf	i2___ftadd@f1,f,c
 12785  003318  0E00               	movlw	0
 12786  00331A  222F               	addwfc	i2___ftadd@f1+1,f,c
 12787  00331C  0E00               	movlw	0
 12788  00331E  2230               	addwfc	i2___ftadd@f1+2,f,c
 12789  003320                     i2l719:
 12790  003320  AC37               	btfss	i2___ftadd@sign,6,c
 12791  003322  D00C               	goto	i2l3850
 12792  003324  0EFF               	movlw	255
 12793  003326  1A31               	xorwf	i2___ftadd@f2,f,c
 12794  003328  0EFF               	movlw	255
 12795  00332A  1A32               	xorwf	i2___ftadd@f2+1,f,c
 12796  00332C  0EFF               	movlw	255
 12797  00332E  1A33               	xorwf	i2___ftadd@f2+2,f,c
 12798  003330  0E01               	movlw	1
 12799  003332  2631               	addwf	i2___ftadd@f2,f,c
 12800  003334  0E00               	movlw	0
 12801  003336  2232               	addwfc	i2___ftadd@f2+1,f,c
 12802  003338  0E00               	movlw	0
 12803  00333A  2233               	addwfc	i2___ftadd@f2+2,f,c
 12804  00333C                     i2l3850:
 12805  00333C  0E00               	movlw	0
 12806  00333E  6E37               	movwf	i2___ftadd@sign,c
 12807  003340  502E               	movf	i2___ftadd@f1,w,c
 12808  003342  2631               	addwf	i2___ftadd@f2,f,c
 12809  003344  502F               	movf	i2___ftadd@f1+1,w,c
 12810  003346  2232               	addwfc	i2___ftadd@f2+1,f,c
 12811  003348  5030               	movf	i2___ftadd@f1+2,w,c
 12812  00334A  2233               	addwfc	i2___ftadd@f2+2,f,c
 12813  00334C  AE33               	btfss	i2___ftadd@f2+2,7,c
 12814  00334E  D00E               	goto	i2l3860
 12815  003350  0EFF               	movlw	255
 12816  003352  1A31               	xorwf	i2___ftadd@f2,f,c
 12817  003354  0EFF               	movlw	255
 12818  003356  1A32               	xorwf	i2___ftadd@f2+1,f,c
 12819  003358  0EFF               	movlw	255
 12820  00335A  1A33               	xorwf	i2___ftadd@f2+2,f,c
 12821  00335C  0E01               	movlw	1
 12822  00335E  2631               	addwf	i2___ftadd@f2,f,c
 12823  003360  0E00               	movlw	0
 12824  003362  2232               	addwfc	i2___ftadd@f2+1,f,c
 12825  003364  0E00               	movlw	0
 12826  003366  2233               	addwfc	i2___ftadd@f2+2,f,c
 12827  003368  0E01               	movlw	1
 12828  00336A  6E37               	movwf	i2___ftadd@sign,c
 12829  00336C                     i2l3860:
 12830  00336C  C031  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 12831  003370  C032  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 12832  003374  C033  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 12833  003378  C039  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 12834  00337C  C037  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 12835  003380  EC1B  F021         	call	i2___ftpack	;wreg free
 12836  003384  C001  F02E         	movff	?i2___ftpack,?i2___ftadd
 12837  003388  C002  F02F         	movff	?i2___ftpack+1,?i2___ftadd+1
 12838  00338C  C003  F030         	movff	?i2___ftpack+2,?i2___ftadd+2
 12839  003390  0012               	return	
 12840  003392                     __end_ofi2___ftadd:
 12841                           	opt stack 0
 12842                           pclatu	equ	0xFFB
 12843                           pclath	equ	0xFFA
 12844                           tblptru	equ	0xFF8
 12845                           tblptrh	equ	0xFF7
 12846                           tblptrl	equ	0xFF6
 12847                           tablat	equ	0xFF5
 12848                           prodh	equ	0xFF4
 12849                           prodl	equ	0xFF3
 12850                           intcon	equ	0xFF2
 12851                           fsr0h	equ	0xFEA
 12852                           fsr0l	equ	0xFE9
 12853                           wreg	equ	0xFE8
 12854                           fsr1h	equ	0xFE2
 12855                           fsr1l	equ	0xFE1
 12856                           indf2	equ	0xFDF
 12857                           postinc2	equ	0xFDE
 12858                           postdec2	equ	0xFDD
 12859                           fsr2h	equ	0xFDA
 12860                           fsr2l	equ	0xFD9
 12861                           status	equ	0xFD8
 12862                           
 12863 ;; *************** function i2___ftpack *****************
 12864 ;; Defined at:
 12865 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 12866 ;; Parameters:    Size  Location     Type
 12867 ;;  arg             3    0[COMRAM] unsigned um
 12868 ;;  exp             1    3[COMRAM] unsigned char 
 12869 ;;  sign            1    4[COMRAM] unsigned char 
 12870 ;; Auto vars:     Size  Location     Type
 12871 ;;		None
 12872 ;; Return value:  Size  Location     Type
 12873 ;;                  3    0[COMRAM] float 
 12874 ;; Registers used:
 12875 ;;		wreg, status,2, status,0
 12876 ;; Tracked objects:
 12877 ;;		On entry : 0/0
 12878 ;;		On exit  : 0/0
 12879 ;;		Unchanged: 0/0
 12880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12881 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12883 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12884 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12885 ;;Total ram usage:        8 bytes
 12886 ;; Hardware stack levels used:    1
 12887 ;; This function calls:
 12888 ;;		Nothing
 12889 ;; This function is called by:
 12890 ;;		i2___ftadd
 12891 ;;		i2___ftmul
 12892 ;;		i2___lltoft
 12893 ;; This function uses a non-reentrant model
 12894 ;;
 12895                           
 12896                           	psect	text55
 12897  004236                     __ptext55:
 12898                           	opt stack 0
 12899  004236                     i2___ftpack:
 12900                           	opt stack 20
 12901                           
 12902                           ;incstack = 0
 12903  004236  5004               	movf	i2___ftpack@exp,w,c
 12904  004238  B4D8               	btfsc	status,2,c
 12905  00423A  D005               	goto	i2l3362
 12906  00423C  5001               	movf	i2___ftpack@arg,w,c
 12907  00423E  1002               	iorwf	i2___ftpack@arg+1,w,c
 12908  004240  1003               	iorwf	i2___ftpack@arg+2,w,c
 12909  004242  A4D8               	btfss	status,2,c
 12910  004244  D00C               	goto	i2l3368
 12911  004246                     i2l3362:
 12912  004246  0E00               	movlw	0
 12913  004248  6E01               	movwf	?i2___ftpack,c
 12914  00424A  0E00               	movlw	0
 12915  00424C  6E02               	movwf	?i2___ftpack+1,c
 12916  00424E  0E00               	movlw	0
 12917  004250  6E03               	movwf	?i2___ftpack+2,c
 12918  004252  0012               	return	
 12919  004254                     i2l3366:
 12920  004254  2A04               	incf	i2___ftpack@exp,f,c
 12921  004256  90D8               	bcf	status,0,c
 12922  004258  3203               	rrcf	i2___ftpack@arg+2,f,c
 12923  00425A  3202               	rrcf	i2___ftpack@arg+1,f,c
 12924  00425C  3201               	rrcf	i2___ftpack@arg,f,c
 12925  00425E                     i2l3368:
 12926  00425E  0E00               	movlw	0
 12927  004260  1401               	andwf	i2___ftpack@arg,w,c
 12928  004262  6E06               	movwf	??i2___ftpack& (0+255),c
 12929  004264  0E00               	movlw	0
 12930  004266  1402               	andwf	i2___ftpack@arg+1,w,c
 12931  004268  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 12932  00426A  0EFE               	movlw	254
 12933  00426C  1403               	andwf	i2___ftpack@arg+2,w,c
 12934  00426E  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 12935  004270  5006               	movf	??i2___ftpack,w,c
 12936  004272  1007               	iorwf	??i2___ftpack+1,w,c
 12937  004274  1008               	iorwf	??i2___ftpack+2,w,c
 12938  004276  B4D8               	btfsc	status,2,c
 12939  004278  D00C               	goto	i2l3374
 12940  00427A  D7EC               	goto	i2l3366
 12941  00427C                     i2l3370:
 12942  00427C  2A04               	incf	i2___ftpack@exp,f,c
 12943  00427E  0E01               	movlw	1
 12944  004280  2601               	addwf	i2___ftpack@arg,f,c
 12945  004282  0E00               	movlw	0
 12946  004284  2202               	addwfc	i2___ftpack@arg+1,f,c
 12947  004286  0E00               	movlw	0
 12948  004288  2203               	addwfc	i2___ftpack@arg+2,f,c
 12949  00428A  90D8               	bcf	status,0,c
 12950  00428C  3203               	rrcf	i2___ftpack@arg+2,f,c
 12951  00428E  3202               	rrcf	i2___ftpack@arg+1,f,c
 12952  004290  3201               	rrcf	i2___ftpack@arg,f,c
 12953  004292                     i2l3374:
 12954  004292  0E00               	movlw	0
 12955  004294  1401               	andwf	i2___ftpack@arg,w,c
 12956  004296  6E06               	movwf	??i2___ftpack& (0+255),c
 12957  004298  0E00               	movlw	0
 12958  00429A  1402               	andwf	i2___ftpack@arg+1,w,c
 12959  00429C  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 12960  00429E  0EFF               	movlw	255
 12961  0042A0  1403               	andwf	i2___ftpack@arg+2,w,c
 12962  0042A2  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 12963  0042A4  5006               	movf	??i2___ftpack,w,c
 12964  0042A6  1007               	iorwf	??i2___ftpack+1,w,c
 12965  0042A8  1008               	iorwf	??i2___ftpack+2,w,c
 12966  0042AA  B4D8               	btfsc	status,2,c
 12967  0042AC  D006               	goto	i2l3378
 12968  0042AE  D7E6               	goto	i2l3370
 12969  0042B0                     i2l3376:
 12970  0042B0  0604               	decf	i2___ftpack@exp,f,c
 12971  0042B2  90D8               	bcf	status,0,c
 12972  0042B4  3601               	rlcf	i2___ftpack@arg,f,c
 12973  0042B6  3602               	rlcf	i2___ftpack@arg+1,f,c
 12974  0042B8  3603               	rlcf	i2___ftpack@arg+2,f,c
 12975  0042BA                     i2l3378:
 12976  0042BA  BE02               	btfsc	i2___ftpack@arg+1,7,c
 12977  0042BC  D003               	goto	i2l672
 12978  0042BE  0E02               	movlw	2
 12979  0042C0  6004               	cpfslt	i2___ftpack@exp,c
 12980  0042C2  D7F6               	goto	i2l3376
 12981  0042C4                     i2l672:
 12982  0042C4  A004               	btfss	i2___ftpack@exp,0,c
 12983  0042C6  9E02               	bcf	i2___ftpack@arg+1,7,c
 12984  0042C8  90D8               	bcf	status,0,c
 12985  0042CA  3204               	rrcf	i2___ftpack@exp,f,c
 12986  0042CC  5004               	movf	i2___ftpack@exp,w,c
 12987  0042CE  1203               	iorwf	i2___ftpack@arg+2,f,c
 12988  0042D0  5005               	movf	i2___ftpack@sign,w,c
 12989  0042D2  A4D8               	btfss	status,2,c
 12990  0042D4  8E03               	bsf	i2___ftpack@arg+2,7,c
 12991  0042D6  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 12992  0042DA  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 12993  0042DE  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 12994  0042E2  0012               	return	
 12995  0042E4                     __end_ofi2___ftpack:
 12996                           	opt stack 0
 12997                           pclatu	equ	0xFFB
 12998                           pclath	equ	0xFFA
 12999                           tblptru	equ	0xFF8
 13000                           tblptrh	equ	0xFF7
 13001                           tblptrl	equ	0xFF6
 13002                           tablat	equ	0xFF5
 13003                           prodh	equ	0xFF4
 13004                           prodl	equ	0xFF3
 13005                           intcon	equ	0xFF2
 13006                           fsr0h	equ	0xFEA
 13007                           fsr0l	equ	0xFE9
 13008                           wreg	equ	0xFE8
 13009                           fsr1h	equ	0xFE2
 13010                           fsr1l	equ	0xFE1
 13011                           indf2	equ	0xFDF
 13012                           postinc2	equ	0xFDE
 13013                           postdec2	equ	0xFDD
 13014                           fsr2h	equ	0xFDA
 13015                           fsr2l	equ	0xFD9
 13016                           status	equ	0xFD8
 13017                           
 13018 ;; *************** function i2___ftneg *****************
 13019 ;; Defined at:
 13020 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 13021 ;; Parameters:    Size  Location     Type
 13022 ;;  f1              3    0[COMRAM] float 
 13023 ;; Auto vars:     Size  Location     Type
 13024 ;;		None
 13025 ;; Return value:  Size  Location     Type
 13026 ;;                  3    0[COMRAM] float 
 13027 ;; Registers used:
 13028 ;;		wreg, status,2, status,0
 13029 ;; Tracked objects:
 13030 ;;		On entry : 0/0
 13031 ;;		On exit  : 0/0
 13032 ;;		Unchanged: 0/0
 13033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13034 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13037 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13038 ;;Total ram usage:        3 bytes
 13039 ;; Hardware stack levels used:    1
 13040 ;; This function calls:
 13041 ;;		Nothing
 13042 ;; This function is called by:
 13043 ;;		i2_printf
 13044 ;; This function uses a non-reentrant model
 13045 ;;
 13046                           
 13047                           	psect	text56
 13048  004BF0                     __ptext56:
 13049                           	opt stack 0
 13050  004BF0                     i2___ftneg:
 13051                           	opt stack 22
 13052                           
 13053                           ;incstack = 0
 13054  004BF0  5001               	movf	i2___ftneg@f1,w,c
 13055  004BF2  1002               	iorwf	i2___ftneg@f1+1,w,c
 13056  004BF4  1003               	iorwf	i2___ftneg@f1+2,w,c
 13057  004BF6  B4D8               	btfsc	status,2,c
 13058  004BF8  D006               	goto	i2l769
 13059  004BFA  0E00               	movlw	0
 13060  004BFC  1A01               	xorwf	i2___ftneg@f1,f,c
 13061  004BFE  0E00               	movlw	0
 13062  004C00  1A02               	xorwf	i2___ftneg@f1+1,f,c
 13063  004C02  0E80               	movlw	128
 13064  004C04  1A03               	xorwf	i2___ftneg@f1+2,f,c
 13065  004C06                     i2l769:
 13066  004C06  C001  F001         	movff	i2___ftneg@f1,?i2___ftneg
 13067  004C0A  C002  F002         	movff	i2___ftneg@f1+1,?i2___ftneg+1
 13068  004C0E  C003  F003         	movff	i2___ftneg@f1+2,?i2___ftneg+2
 13069  004C12  0012               	return		;funcret
 13070  004C14                     __end_ofi2___ftneg:
 13071                           	opt stack 0
 13072                           pclatu	equ	0xFFB
 13073                           pclath	equ	0xFFA
 13074                           tblptru	equ	0xFF8
 13075                           tblptrh	equ	0xFF7
 13076                           tblptrl	equ	0xFF6
 13077                           tablat	equ	0xFF5
 13078                           prodh	equ	0xFF4
 13079                           prodl	equ	0xFF3
 13080                           intcon	equ	0xFF2
 13081                           fsr0h	equ	0xFEA
 13082                           fsr0l	equ	0xFE9
 13083                           wreg	equ	0xFE8
 13084                           fsr1h	equ	0xFE2
 13085                           fsr1l	equ	0xFE1
 13086                           indf2	equ	0xFDF
 13087                           postinc2	equ	0xFDE
 13088                           postdec2	equ	0xFDD
 13089                           fsr2h	equ	0xFDA
 13090                           fsr2l	equ	0xFD9
 13091                           status	equ	0xFD8
 13092                           
 13093 ;; *************** function i2___ftge *****************
 13094 ;; Defined at:
 13095 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 13096 ;; Parameters:    Size  Location     Type
 13097 ;;  ff1             3    0[COMRAM] float 
 13098 ;;  ff2             3    3[COMRAM] float 
 13099 ;; Auto vars:     Size  Location     Type
 13100 ;;		None
 13101 ;; Return value:  Size  Location     Type
 13102 ;;		None               void
 13103 ;; Registers used:
 13104 ;;		wreg, status,2, status,0
 13105 ;; Tracked objects:
 13106 ;;		On entry : 0/0
 13107 ;;		On exit  : 0/0
 13108 ;;		Unchanged: 0/0
 13109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13110 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13112 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13113 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13114 ;;Total ram usage:        9 bytes
 13115 ;; Hardware stack levels used:    1
 13116 ;; This function calls:
 13117 ;;		Nothing
 13118 ;; This function is called by:
 13119 ;;		i2_printf
 13120 ;; This function uses a non-reentrant model
 13121 ;;
 13122                           
 13123                           	psect	text57
 13124  0044BE                     __ptext57:
 13125                           	opt stack 0
 13126  0044BE                     i2___ftge:
 13127                           	opt stack 22
 13128                           
 13129                           ;incstack = 0
 13130  0044BE  AE03               	btfss	i2___ftge@ff1+2,7,c
 13131  0044C0  D016               	goto	i2l4388
 13132  0044C2  C001  F007         	movff	i2___ftge@ff1,??i2___ftge
 13133  0044C6  C002  F008         	movff	i2___ftge@ff1+1,??i2___ftge+1
 13134  0044CA  C003  F009         	movff	i2___ftge@ff1+2,??i2___ftge+2
 13135  0044CE  1E07               	comf	??i2___ftge,f,c
 13136  0044D0  1E08               	comf	??i2___ftge+1,f,c
 13137  0044D2  1E09               	comf	??i2___ftge+2,f,c
 13138  0044D4  2A07               	incf	??i2___ftge,f,c
 13139  0044D6  0E00               	movlw	0
 13140  0044D8  2208               	addwfc	??i2___ftge+1,f,c
 13141  0044DA  2209               	addwfc	??i2___ftge+2,f,c
 13142  0044DC  0E00               	movlw	0
 13143  0044DE  2407               	addwf	??i2___ftge,w,c
 13144  0044E0  6E01               	movwf	i2___ftge@ff1,c
 13145  0044E2  0E00               	movlw	0
 13146  0044E4  2008               	addwfc	??i2___ftge+1,w,c
 13147  0044E6  6E02               	movwf	i2___ftge@ff1+1,c
 13148  0044E8  0E80               	movlw	128
 13149  0044EA  2009               	addwfc	??i2___ftge+2,w,c
 13150  0044EC  6E03               	movwf	i2___ftge@ff1+2,c
 13151  0044EE                     i2l4388:
 13152  0044EE  AE06               	btfss	i2___ftge@ff2+2,7,c
 13153  0044F0  D016               	goto	i2l4392
 13154  0044F2  C004  F007         	movff	i2___ftge@ff2,??i2___ftge
 13155  0044F6  C005  F008         	movff	i2___ftge@ff2+1,??i2___ftge+1
 13156  0044FA  C006  F009         	movff	i2___ftge@ff2+2,??i2___ftge+2
 13157  0044FE  1E07               	comf	??i2___ftge,f,c
 13158  004500  1E08               	comf	??i2___ftge+1,f,c
 13159  004502  1E09               	comf	??i2___ftge+2,f,c
 13160  004504  2A07               	incf	??i2___ftge,f,c
 13161  004506  0E00               	movlw	0
 13162  004508  2208               	addwfc	??i2___ftge+1,f,c
 13163  00450A  2209               	addwfc	??i2___ftge+2,f,c
 13164  00450C  0E00               	movlw	0
 13165  00450E  2407               	addwf	??i2___ftge,w,c
 13166  004510  6E04               	movwf	i2___ftge@ff2,c
 13167  004512  0E00               	movlw	0
 13168  004514  2008               	addwfc	??i2___ftge+1,w,c
 13169  004516  6E05               	movwf	i2___ftge@ff2+1,c
 13170  004518  0E80               	movlw	128
 13171  00451A  2009               	addwfc	??i2___ftge+2,w,c
 13172  00451C  6E06               	movwf	i2___ftge@ff2+2,c
 13173  00451E                     i2l4392:
 13174  00451E  0E00               	movlw	0
 13175  004520  1A01               	xorwf	i2___ftge@ff1,f,c
 13176  004522  0E00               	movlw	0
 13177  004524  1A02               	xorwf	i2___ftge@ff1+1,f,c
 13178  004526  0E80               	movlw	128
 13179  004528  1A03               	xorwf	i2___ftge@ff1+2,f,c
 13180  00452A  0E00               	movlw	0
 13181  00452C  1A04               	xorwf	i2___ftge@ff2,f,c
 13182  00452E  0E00               	movlw	0
 13183  004530  1A05               	xorwf	i2___ftge@ff2+1,f,c
 13184  004532  0E80               	movlw	128
 13185  004534  1A06               	xorwf	i2___ftge@ff2+2,f,c
 13186  004536  5004               	movf	i2___ftge@ff2,w,c
 13187  004538  5C01               	subwf	i2___ftge@ff1,w,c
 13188  00453A  5005               	movf	i2___ftge@ff2+1,w,c
 13189  00453C  5802               	subwfb	i2___ftge@ff1+1,w,c
 13190  00453E  5006               	movf	i2___ftge@ff2+2,w,c
 13191  004540  5803               	subwfb	i2___ftge@ff1+2,w,c
 13192  004542  B0D8               	btfsc	status,0,c
 13193  004544  D002               	goto	i2l4398
 13194  004546  90D8               	bcf	status,0,c
 13195  004548  0012               	return	
 13196  00454A                     i2l4398:
 13197  00454A  80D8               	bsf	status,0,c
 13198  00454C  0012               	return	
 13199  00454E                     __end_ofi2___ftge:
 13200                           	opt stack 0
 13201                           pclatu	equ	0xFFB
 13202                           pclath	equ	0xFFA
 13203                           tblptru	equ	0xFF8
 13204                           tblptrh	equ	0xFF7
 13205                           tblptrl	equ	0xFF6
 13206                           tablat	equ	0xFF5
 13207                           prodh	equ	0xFF4
 13208                           prodl	equ	0xFF3
 13209                           intcon	equ	0xFF2
 13210                           fsr0h	equ	0xFEA
 13211                           fsr0l	equ	0xFE9
 13212                           wreg	equ	0xFE8
 13213                           fsr1h	equ	0xFE2
 13214                           fsr1l	equ	0xFE1
 13215                           indf2	equ	0xFDF
 13216                           postinc2	equ	0xFDE
 13217                           postdec2	equ	0xFDD
 13218                           fsr2h	equ	0xFDA
 13219                           fsr2l	equ	0xFD9
 13220                           status	equ	0xFD8
 13221                           pclatu	equ	0xFFB
 13222                           pclath	equ	0xFFA
 13223                           tblptru	equ	0xFF8
 13224                           tblptrh	equ	0xFF7
 13225                           tblptrl	equ	0xFF6
 13226                           tablat	equ	0xFF5
 13227                           prodh	equ	0xFF4
 13228                           prodl	equ	0xFF3
 13229                           intcon	equ	0xFF2
 13230                           fsr0h	equ	0xFEA
 13231                           fsr0l	equ	0xFE9
 13232                           wreg	equ	0xFE8
 13233                           fsr1h	equ	0xFE2
 13234                           fsr1l	equ	0xFE1
 13235                           indf2	equ	0xFDF
 13236                           postinc2	equ	0xFDE
 13237                           postdec2	equ	0xFDD
 13238                           fsr2h	equ	0xFDA
 13239                           fsr2l	equ	0xFD9
 13240                           status	equ	0xFD8
 13241                           
 13242                           	psect	rparam
 13243  0000                     pclatu	equ	0xFFB
 13244                           pclath	equ	0xFFA
 13245                           tblptru	equ	0xFF8
 13246                           tblptrh	equ	0xFF7
 13247                           tblptrl	equ	0xFF6
 13248                           tablat	equ	0xFF5
 13249                           prodh	equ	0xFF4
 13250                           prodl	equ	0xFF3
 13251                           intcon	equ	0xFF2
 13252                           fsr0h	equ	0xFEA
 13253                           fsr0l	equ	0xFE9
 13254                           wreg	equ	0xFE8
 13255                           fsr1h	equ	0xFE2
 13256                           fsr1l	equ	0xFE1
 13257                           indf2	equ	0xFDF
 13258                           postinc2	equ	0xFDE
 13259                           postdec2	equ	0xFDD
 13260                           fsr2h	equ	0xFDA
 13261                           fsr2l	equ	0xFD9
 13262                           status	equ	0xFD8
 13263                           
 13264                           	psect	temp
 13265  000074                     btemp:
 13266                           	opt stack 0
 13267  000074                     	ds	1
 13268  0000                     int$flags	set	btemp
 13269                           pclatu	equ	0xFFB
 13270                           pclath	equ	0xFFA
 13271                           tblptru	equ	0xFF8
 13272                           tblptrh	equ	0xFF7
 13273                           tblptrl	equ	0xFF6
 13274                           tablat	equ	0xFF5
 13275                           prodh	equ	0xFF4
 13276                           prodl	equ	0xFF3
 13277                           intcon	equ	0xFF2
 13278                           fsr0h	equ	0xFEA
 13279                           fsr0l	equ	0xFE9
 13280                           wreg	equ	0xFE8
 13281                           fsr1h	equ	0xFE2
 13282                           fsr1l	equ	0xFE1
 13283                           indf2	equ	0xFDF
 13284                           postinc2	equ	0xFDE
 13285                           postdec2	equ	0xFDD
 13286                           fsr2h	equ	0xFDA
 13287                           fsr2l	equ	0xFD9
 13288                           status	equ	0xFD8


Data Sizes:
    Strings     51
    Constant    174
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    109     115
    BANK0           128    109     109
    BANK1           256     33      33
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_6(CODE[7]), STR_5(CODE[8]), STR_4(CODE[12]), STR_3(CODE[3]), 
		 -> STR_2(CODE[2]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _lol in COMRAM

    _lol->i2_printf
    i2_printf->i2___ftsub
    i2_scale->i2___ftmul
    i2_lcdNewline->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    i2_fround->i2___ftmul
    i2___wmul->i2___awdiv
    i2___ftmul->i2___wmul
    i2___awdiv->i2___awmod
    i2___lltoft->i2___ftpack
    i2___fttol->i2_scale
    i2___ftsub->i2___ftadd
    i2___ftadd->i2_fround

Critical Paths under _main in BANK0

    _main->_testFrequency
    _testFrequency->_printf
    _printf->___ftsub
    _scale->___ftmul
    _lcdNewline->_lcdInst
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftdiv->___altoft
    ___altoft->___ftpack
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _lol in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_testFrequency

Critical Paths under _lol in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _lol in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _lol in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _lol in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _lol in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _lol in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _lol in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _lol in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _lol in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _lol in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _lol in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _lol in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _lol in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _lol in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _lol in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   92340
                                            106 BANK0      3     3      0
                            _initLCD
                             _printf
                      _testFrequency
 ---------------------------------------------------------------------------------
 (1) _testFrequency                                       40    37      3   49400
                                             99 BANK0      7     4      3
                                              0 BANK1     33    33      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                           ___altoft
                            ___ftdiv
                             _initT0
                             _printf
                            _startT0
 ---------------------------------------------------------------------------------
 (2) _startT0                                              2     0      2     108
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _printf                                              44    38      6   42782
                                             63 BANK0     36    30      6
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   10055
                                             35 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     292
                                              4 BANK0      1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3    9857
                                             35 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2209
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4329
                                             20 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1580
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     431
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     591
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2242
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     543
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     444
                                             42 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3604
                                             57 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3307
                                             45 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     109
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     520
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _initT0                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2619
                                             18 BANK0     15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4    2311
                                              8 BANK0     10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2109
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     760
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     674
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              4 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     135
                                              2 BANK0      2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _lol                                                 14    14      0   19904
                                             95 COMRAM    14    14      0
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) i2_printf                                            40    38      2   19904
                                             63 COMRAM    32    30      2
                          i2___awdiv
                          i2___ftadd
                           i2___ftge
                          i2___ftmul
                          i2___ftneg
                          i2___ftsub
                          i2___fttol
                          i2___lldiv
                          i2___llmod
                         i2___lltoft
                           i2___wmul
                       i2__div_to_l_
                      i2__tdiv_to_l_
                           i2_fround
                            i2_putch
                            i2_scale
 ---------------------------------------------------------------------------------
 (9) i2_scale                                             13    10      3    4581
                                             35 COMRAM     7     4      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (9) i2_putch                                              1     1      0     292
                                              4 COMRAM     1     1      0
                       i2_lcdNewline
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_lcdNewline                                        0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           2     2      0     135
                                              2 COMRAM     2     2      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) i2_fround                                            16    13      3    4383
                                             35 COMRAM    10     7      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     989
                                             14 COMRAM     6     2      4
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___ftmul                                          15     9      6    1519
                                             20 COMRAM    15     9      6
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
                         i2___ftpack
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     764
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___awdiv                                           8     4      4     820
                                              6 COMRAM     8     4      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (9) i2__tdiv_to_l_                                       15     9      6     355
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (9) i2__div_to_l_                                        12     6      6     481
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (9) i2___lltoft                                           9     5      4     560
                                              8 COMRAM     9     5      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) i2___llmod                                            9     1      8     315
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (9) i2___lldiv                                           13     5      8     318
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (9) i2___fttol                                           15    11      4     330
                                             42 COMRAM    15    11      4
                          i2___ftmul (ARG)
                            i2_scale (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___ftsub                                            6     0      6    1528
                                             57 COMRAM     6     0      6
                          i2___ftadd
                         i2___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___ftadd                                          12     6      6    1409
                                             45 COMRAM    12     6      6
                         i2___ftpack
                           i2_fround (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftpack                                          8     3      5     465
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) i2___ftneg                                            3     0      3      71
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) i2___ftge                                             9     3      6     292
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _testFrequency
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___altoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     _initT0
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _putch
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _startT0

 _lol (ROOT)
   i2_printf
     i2___awdiv
       i2___awmod (ARG)
     i2___ftadd
       i2___ftpack
       i2_fround (ARG)
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
     i2___ftge
     i2___ftmul
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
       i2___ftpack (ARG)
       i2___wmul (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     i2___ftneg
     i2___ftsub
       i2___ftadd
         i2___ftpack
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___lltoft (ARG)
         i2___ftpack
     i2___fttol
       i2___ftmul (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2_scale (ARG)
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
     i2___lldiv
     i2___llmod
     i2___lltoft
       i2___ftpack
     i2___wmul
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
     i2__div_to_l_
     i2__tdiv_to_l_
     i2_fround
       i2___awdiv
         i2___awmod (ARG)
       i2___awmod
       i2___ftmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     i2_putch
       i2_lcdNewline
         i2_lcdInst
           i2_lcdNibble
       i2_lcdNibble
     i2_scale
       i2___awdiv
         i2___awmod (ARG)
       i2___awmod
       i2___ftmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     21      21       7       12.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     6D      6D       5       85.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6D      73       1       91.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     101      34        0.0%
DATA                 0      0     101       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Feb 26 14:09:47 2017

              ___altoft@exp 0090                           _T 0072               ___altoft@sign 0091  
                        l44 4830                          l79 4BB6                ___awdiv@sign 008B  
       ___wmul@multiplicand 0090                 __CFG_BORV$3 000000                  i2___ftpack 4236  
              __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000  
              __CFG_CP3$OFF 000000             ??_testFrequency 00E6                 __CFG_OSC$HS 000000  
              ___ftadd@exp1 00B8                ___ftadd@exp2 00B7                  i2___lltoft 4960  
              ___ftadd@sign 00B6                         l314 4C88                         l413 15D4  
                       l273 2D2E                         l276 2C5C                         l701 2E02  
                       l710 2ED8                         l640 36A6                         l730 392C  
                       l814 4224                         l719 2F02                         l672 3DD8  
                       l824 44AC                         l744 351E                         l737 345A  
                       l738 349E                         l695 2DA0                         l769 4B3C  
                       l699 2DDA                __CFG_CPB$OFF 000000                         _PEN 007E2A  
              __CFG_CPD$OFF 000000                         _SEN 007E28                         _lol 0008  
              ___awmod@sign 0085                         prod 000FF3                         wreg 000FE8  
              __CFG_LVP$OFF 000000                ___ftdiv@cntr 009B                ___ftdiv@sign 00A0  
              __CFG_WDT$OFF 000000                        l3100 3D3C                        l3110 3DCA  
                      l3102 3D6C                        l3200 2EBE                        l4000 148A  
                      l3122 3DFE                        l3106 3D8C                        l3202 2ECC  
                      l3116 3DE2                        l3108 3DBC                        l4012 14D0  
                      l3310 4170                        l3302 414E                        l4030 15B6  
                      l4022 1586                        l3208 2F2C                        l3160 2DAE  
                      l4040 15FC                        l4024 1594                        l4016 14F8  
                      l3218 2F7A                        l3306 415C                        l3330 4324  
                      l3322 4300                        l3234 372C                        l4050 172A  
                      l4034 15D8                        l4132 4B70                        l3172 2DF8  
                      l3332 4330                        l3252 3798                        l3228 36F2  
                      l4052 1738                        l4044 164E                        l4028 15A2  
                      l3094 3D1A                        l3190 2E76                        l3182 2E3A  
                      l3166 2DE8                        l3334 4336                        l3342 4368  
                      l3326 4310                        l3262 37D6                        l4160 3850  
                      l3192 2E84                        l3520 3514                        l3512 34E8  
                      l3248 377A                        l3424 2A5C                        l3416 2978  
                      l4080 17EE                        l4064 1782                        l4056 1746  
                      l3098 3D2E                        l4146 43B2                        l3194 2E90  
                      l3290 410C                        l3346 437C                        l3338 435A  
                      l3258 37B8                        l4082 17FE                        l4058 1754  
                      l4090 1890                        l4148 43C2                        l3604 40B8  
                      l3188 2E68                        l3700 46F4                        l3508 34D4  
                      l3292 4118                        l3284 40EE                        l3444 2192  
                      l4076 17C8                        l4166 388A                        l3534 357C  
                      l3518 3504                        l3294 411E                        l3278 40D8  
                      l3462 23E2                        l3438 20CC                        l3640 3A42  
                      l3528 3556                        l3472 33CC                        l3456 231C  
                      l3448 21B8                        l4088 187A                        l4186 38EA  
                      l3650 3A78                        l3618 399C                        l3636 3A2E  
                      l3580 369C                        l3572 3670                        l3556 3624  
                      l3548 35D0                        l4540 2B04                        l3654 3A94  
                      l3646 3A5E                        l3478 3406                        l3664 41A8  
                      l3648 3A6E                        l3568 365C                        l3920 1112  
                      l4536 2AFA                        l3666 41B8                        l3594 4034  
                      l3586 4A34                        l3578 368C                        l3914 10F2  
                      l4570 2B90                        l4546 2B30                        l3676 4212  
                      l3668 41BE                        l3692 449A                        l3684 4440  
                      l3940 119C                        l3924 1118                        l4580 2BC6  
                      l4556 2B54                        l3598 4074                        l3686 4450  
                      l3926 1142                        l3918 1106                        l4574 2B9A  
                      l3688 4456                        l3698 46E4                        l3970 1302  
                      l3980 1392                        l3972 1332                        l3964 12BE  
                      l3956 124E                        l4588 2C1A                        l3974 1348  
                      l3984 13C0                        l3968 12EC                        l3994 141E  
                      ?_lol 0001                        l3998 1484                        _EEIF 007D0C  
     __size_ofi2__div_to_l_ 0128                        STR_1 10E0                        STR_2 10DE  
                      STR_3 10DB                        STR_4 10C0                        STR_5 10CC  
                      STR_6 10D4                        STR_7 10AF                        _LATA 000F89  
                      _LATB 000F8A                        _LATC 000F8B                        _LATD 000F8C  
                      u3201 3708                        _LATE 000F8D                        u3181 36CE  
                      u4330 11E2                        u5130 2AB2                printf@tmpval 00DB  
                      u3541 33A8                        u4335 11D6                        u5215 2CC8  
                      u4600 4B6E                        u3561 33E2                        u5225 2CDA  
                      _PEIE 007F96                        u3751 3978                        u4641 382C  
                      u3770 39C2                        u4490 15CC                        u2971 2D4E  
                      _RCEN 007E2B                        u4661 3866                        u2981 2D6C  
                      u5607 4B80                        u3775 39B8                        u5617 4B96  
                      u5627 4852                        u4595 4930                        u5637 485C  
                      i2l55 4598                        u5647 4888                        u5657 4892  
                      u5577 4BBA                        i2l58 459A                        u5587 4A66  
                      u5597 4A9A                        i2l79 4C24                        _RSEN 007E29  
                      _main 47C8                ___ftpack@arg 0080                        _keys 1097  
              ___ftpack@exp 0083                        fsr0h 000FEA                        fsr1h 000FE2  
                      fsr2h 000FDA                        fsr0l 000FE9                        indf2 000FDF  
                      fsr1l 000FE1                        fsr2l 000FD9                        btemp 0074  
              i2___ftadd@f1 002E                i2___ftadd@f2 0031                i2___ftge@ff1 0001  
              i2___ftge@ff2 0004                        prodh 000FF4                        prodl 000FF3  
                      start 000E               __CFG_IESO$OFF 000000             __end_ofi2_scale 27F8  
              i2___ftneg@f1 0001             __end_ofi2_putch 4C36               __CFG_MCLRE$ON 000000  
              ___ftmul@cntr 00A1                i2___ftmul@f1 0015                i2___ftmul@f2 0018  
              ___param_bank 000000                ___ftmul@sign 00A2                i2___ftsub@f1 003A  
              i2___ftsub@f2 003D                i2___fttol@f1 002B                 i2_lcdNibble 49BC  
              ___fttol@exp1 00B8                i2___lltoft@c 0009                ___fttol@lval 00B4  
                     ??_lol 0060            ?_I2C_Master_Init 008D            ?_I2C_Master_Read 0001  
          ?_I2C_Master_Wait 0001            ?_I2C_Master_Stop 0001                       ?_main 0001  
                     _ACKEN 007E2C                       _ACKDT 007E2D             __end_of___awdiv 417A  
                     _EEADR 000FA9             __end_of___ftadd 2FA0             __end_of___awmod 4386  
           __end_of___ftdiv 3962             __end_of___ftneg 4B4A             __end_of___lldiv 4236  
           __end_of___ftmul 3816                       _T0CON 000FD5             ___awdiv@divisor 0088  
           __end_of___llmod 44BE             __end_of___ftsub 4A5E             __end_of___fttol 3AA6  
                     i2l413 1CDC                       i2l710 3304                       i2l640 3CEE  
                     i2l814 46CA                       i2l719 3320                       i2l672 42C4  
                     i2l824 48EE                       i2l744 3BC6                       i2l737 3B38  
                     i2l738 3B60                       i2l695 322A                       i2l769 4C06  
                     i2l699 3254             ___awdiv@counter 008A                       _TMR0H 000FD7  
                     _TMR0L 000FD6                       _PORTA 000F80                       _PORTB 000F81  
                     _PORTC 000F82                       _PORTD 000F83                i2__div_to_l_ 3BD8  
                     _TRISA 000F92                       _TRISB 000F93                       _TRISC 000F94  
                     _TRISD 000F95                       _TRISE 000F96               __CFG_PWRT$OFF 000000  
             __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000  
             __CFG_WRT3$OFF 000000                ___lltoft@exp 0090             __end_of_lcdInst 4BA2  
            __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000  
            __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000       __size_ofi2_lcdNewline 0008  
             __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000  
           __end_of_initLCD 4AA4              __CFG_EBTRB$OFF 000000             __end_of_dpowers 1029  
                i2scale@scl 002A                       _count 006E                       _scale 1F5A  
             ___ftpack@sign 0084                       _putch 4BA2                       pclath 000FFA  
                     tablat 000FF5            __end_ofi2___ftge 454E            __end_ofi2___wmul 4BF0  
           __end_of_startT0 4C88                       status 000FD8            __end_ofi2_fround 31E6  
        __size_ofi2___awdiv 0084          __size_ofi2___ftadd 01AC          __size_ofi2___awmod 0070  
            __CFG_PBADEN$ON 000000          __size_ofi2___ftneg 0024          __size_ofi2___lldiv 0082  
        __size_ofi2___ftmul 00F4          __size_ofi2___llmod 0066          __size_ofi2___ftsub 0040  
        __size_ofi2___fttol 00F4            __end_ofi2_printf 1F5A             __initialization 4C58  
         i2___lldiv@divisor 0005          __size_ofi2_lcdInst 0022                __end_of_main 4832  
         i2___lldiv@counter 000D                __end_of_keys 10A8               i2___ftmul@exp 001E  
                i2printf@ap 004C                 ?i2___ftpack 0001                i2_lcdNewline 4CC6  
               ?i2___lltoft 0009                      ??_main 00EA               ___fttol@sign1 00B3  
             __activetblptr 000002        __size_of__tdiv_to_l_ 019E           ?_I2C_Master_Start 0001  
         ?_I2C_Master_Write 0081          ??_I2C_Master_Start 0081                      _ADCON0 000FC2  
                    _ADCON1 000FC1          ??_I2C_Master_Write 0083                      _ADCON2 000FC0  
          __end_of___altoft 4424            ___llmod@dividend 0080                      ?_scale 00A3  
                    _ADRESH 000FC4                      _EEADRH 000FAA                      _ADRESL 000FC3  
                    _EEDATA 000FA8                      _EECON1 000FA6                      _EECON2 000FA7  
          ___awdiv@dividend 0086             i2lcdNibble@data 0002                      ?_putch 0001  
          __end_of___ftpack 3E0C             i2lcdNibble@temp 0001            __end_of___lltoft 4758  
                    i2l4302 3C86                      i2l4240 253C                      i2l3370 427C  
                    i2l3362 4246                      i2l4410 4ABA                      i2l4314 3CB4  
                    i2l4226 31A6                      i2l4218 30E6                      i2l4250 2604  
                    i2l4420 3F2C                      i2l4500 4966                      i2l4324 3CDC  
                    i2l4340 3AFE                      i2l3374 4292                      i2l3366 4254  
                    i2l4502 4972                      i2l4326 3CE8                      i2l4318 3CC4  
                    i2l4334 3AD2                      i2l4246 25E0                      i2l3376 42B0  
                    i2l3368 425E                      i2l4280 3C14                      i2l4264 27D4  
                    i2l3378 42BA                      i2l3802 3238                      i2l4450 3FC6  
                    i2l4442 3FA2                      i2l4274 3BF6                      i2l4370 3B8C  
                    i2l3722 45EA                      i2l4258 2730                      i2l4452 3FCC  
                    i2l4380 3BB4                      i2l3900 3EB6                      i2l4700 1BC6  
                    i2l4620 18D2                      i2l3830 32B4                      i2l4438 3F92  
                    i2l4470 468C                      i2l4294 3C56                      i2l4382 3BC0  
                    i2l4374 3B9C                      i2l3734 4610                      i2l3750 4642  
                    i2l4614 18B8                      i2l4392 451E                      i2l3832 32BE  
                    i2l3824 3292                      i2l3808 3262                      i2l4456 3FE2  
                    i2l4448 3FBA                      i2l3736 4618                      i2l3728 45FA  
                    i2l3904 3EC6                      i2l4712 1BFE                      i2l4640 194C  
                    i2l4624 18D6                      i2l3850 333C                      i2l3842 32F2  
                    i2l3834 32C8                      i2l4466 467C                      i2l4490 48BC  
                    i2l3754 4650                      i2l3746 4638                      i2l3738 461C  
                    i2l3770 4778                      i2l4730 1CC6                      i2l4722 1CA2  
                    i2l4626 18FC                      i2l4618 18C8                      i2l4388 44EE  
                    i2l3860 336C                      i2l3844 32FC                      i2l3836 32D0  
                    i2l4468 4688                      i2l4740 1CF8                      i2l4724 1CAC  
                    i2l4716 1C1A                      i2l4398 454A                      i2l4478 46BC  
                    i2l4494 48E0                      i2l4486 48AC                      i2l3790 47BE  
                    i2l3782 47A6                      i2l3774 4786                      i2l3766 476C  
                    i2l3870 3E34                      i2l4750 1E1C                      i2l4734 1CE0  
                    i2l4670 1A74                      i2l4488 48B8                      i2l3776 478E  
                    i2l4752 1E26                      i2l4744 1D48                      i2l4728 1CB8  
                    i2l4680 1AE6                      i2l4672 1AA2                      i2l4664 1A40  
                    i2l4656 19DC                      i2l3778 4792                      i2l3786 47B0  
                    i2l3890 3E8E                      i2l4674 1AB2                      i2l3876 3E5C  
                    i2l4780 1EB6                      i2l4764 1E64                      i2l4756 1E32  
                    i2l4684 1B0A                      i2l4668 1A64                      i2l3894 3E9E  
                    i2l4782 1EC2                      i2l4694 1B5E                      i2l4758 1E3C  
                    i2l4790 1F40                      i2l4776 1E9C                      i2l4698 1BC2  
                    i2l4788 1F30                      u402_41 31F6                      u403_41 320A  
                    u423_41 3E1C                   ??i2_scale 0027                      u425_41 3E44  
                    u484_41 3AB6                      u486_41 3AE2                      u498_41 3F10  
                    _TMR0IE 007F95                      _TMR0IF 007F92                   ??i2_putch 0005  
                    _SSPADD 000FC8                      _TRISC3 007CA3                      _TRISC4 007CA4  
                    _SSPBUF 000FC9      __size_ofi2__tdiv_to_l_ 0132              __CFG_XINST$OFF 000000  
              i2_scale$1246 0027            __end_of__powers_ 1077                      ___ftge 3FF4  
                    ___wmul 4AE4                   ??___awdiv 008A                   ??___ftadd 00B3  
            __CFG_STVREN$ON 000000                   ??___awmod 0084                   ??___ftdiv 0098  
                 ??___ftneg 0083                   ??___lldiv 0088                   ??___ftmul 009A  
                 ??___llmod 0088                   ??___ftsub 00BF                   ??___fttol 00AE  
                    _initT0 4CAE                      _fround 27F8            ___awdiv@quotient 008C  
           ___awmod@divisor 0082             ___awmod@counter 0084                   ??_lcdInst 0082  
                    _printf 10E4              i2___awdiv@sign 000C       ___ftmul@f3_as_product 009E  
                 ??_initLCD 0084           __end_ofi2___awdiv 465A           __end_ofi2___ftadd 3392  
         __end_ofi2___awmod 47C8              i2___ftadd@exp1 0039              i2___ftadd@exp2 0038  
         __end_ofi2___ftneg 4C14           __end_ofi2___lldiv 46DC           __end_ofi2___ftmul 3F00  
         __end_ofi2___llmod 4900           __end_ofi2___ftsub 4AE4           __end_ofi2___fttol 3FF4  
            i2___ftadd@sign 0037                __mediumconst 0000                      tblptrh 000FF7  
                    tblptrl 000FF6                      tblptru 000FF8                   ??_startT0 0082  
            i2___awmod@sign 0006           __end_ofi2_lcdInst 4C58                  __accesstop 0080  
   __end_of__initialization 4C64                  ___altoft@c 0088                  ___ftadd@f1 00AD  
                ___ftadd@f2 00B0         __size_ofi2___ftpack 00AE              i2printf@tmpval 0058  
                ___ftge@ff1 0080                  ___ftge@ff2 0083         __size_ofi2___lltoft 005C  
             ___rparam_used 000001                  ___ftdiv@f1 0092                  ___ftdiv@f2 0095  
                ___ftdiv@f3 009C                  ___ftneg@f1 0080              i2___ftpack@arg 0001  
        i2__tdiv_to_l_@exp1 000F           i2___llmod@divisor 0005              i2___ftpack@exp 0004  
        i2__tdiv_to_l_@cntr 000E           i2___llmod@counter 0009          i2__tdiv_to_l_@quot 000A  
                ___ftmul@f1 0094                  ___ftmul@f2 0097                  ___ftsub@f1 00B9  
                ___ftsub@f2 00BC                  ___fttol@f1 00AA              __pcstackCOMRAM 0001  
        i2___lldiv@dividend 0001                  ___lltoft@c 0088              i2___ftmul@cntr 0022  
             __end_of_scale 2408              i2___ftmul@sign 0023               __end_of_putch 4BCA  
               i2printf@idx 004B                 i2printf@exp 0056                 i2printf@val 0052  
            i2___fttol@exp1 0039              i2___fttol@lval 0035                   ?i2___ftge 0001  
                 ?i2___wmul 000F               i2__tdiv_to_l_ 3AA6          __size_of_lcdNibble 0068  
                __div_to_l_ 3530                 i2putch@data 0005                   ?i2_fround 0024  
                 ?i2_printf 0040             __div_to_l_@exp1 008B             __div_to_l_@cntr 008A  
                   ??_scale 00A6              i2___lltoft@exp 0011             __div_to_l_@quot 0086  
                   ??_putch 0084          i2___lldiv@quotient 0009            i2__tdiv_to_l_@f1 0001  
          i2__tdiv_to_l_@f2 0004               __div_to_l_@f1 0080               __div_to_l_@f2 0083  
                   ?___ftge 0080                ?i2_lcdNibble 0001                     ?___wmul 008E  
                   ?_initT0 0001                   ?___altoft 0088                     ?_fround 00A3  
                _lcdNewline 4CA6                   ?___ftpack 0080                     ?_printf 00BF  
                 ?___lltoft 0088              ?i2__tdiv_to_l_ 0001                  ??i2___ftge 0007  
                ??i2___wmul 0013       __end_of_testFrequency 2D38                  ??i2_fround 0027  
                ??i2_printf 0042                     _SSPCON1 000FC6                     _SSPCON2 000FC5  
                   _SSPSTAT 000FC7                     i2_scale 2408                     i2_putch 4C14  
         __end_of_lcdNibble 489A           __end_of__npowers_ 1050                     __Hparam 0000  
                _scale$1074 00A6                     __Lparam 0000             __size_of___ftge 00C8  
                   ___awdiv 40BC                     ___ftadd 2D38                     ___awmod 42E4  
                   ___ftdiv 3816                     ___ftneg 4B1A                     ___lldiv 417A  
           __size_of___wmul 0036                     ___ftmul 36B8                     ___llmod 4424  
                   ___ftsub 4A12                     ___fttol 3962                __psmallconst 1000  
                ??___altoft 008C             __size_of_initT0 0008                     __pcinit 4C58  
              ??i2___ftpack 0006                  ??___ftpack 0085             __size_of_fround 02AC  
   i2___ftmul@f3_as_product 001F                     __ramtop 1000  __end_oftestFrequency@F2960 10AF  
              ??i2___lltoft 000D                     _lcdInst 4B78                  ??___lltoft 008C  
                   __ptext0 47C8                     __ptext1 2AA4                     __ptext2 4C72  
                   __ptext3 10E4                     __ptext4 1F5A                     __ptext5 4BA2  
                   __ptext6 4CA6                     __ptext7 27F8                     __ptext8 4AE4  
                   __ptext9 36B8             __size_of_printf 07CA               i2_fround$1244 002A  
             i2_fround$1245 0027                     _initLCD 4A5E           __end_of_hexpowers 1097  
               ?__div_to_l_ 0080                     _dpowers 1001                i2fround@prec 002D  
              __size_of_lol 45CE            ___awmod@dividend 0080    __size_of_I2C_Master_Init 0060  
  __size_of_I2C_Master_Read 002E    __size_of_I2C_Master_Wait 0014    __size_of_I2C_Master_Stop 0008  
                   _startT0 4C72              __pintcode_body 454E        end_of_initialization 4C64  
             __Lmediumconst 0000                     int_func 454E         i2___wmul@multiplier 000F  
        __end_ofi2___ftpack 42E4   __size_of_I2C_Master_Start 0008          __end_ofi2___lltoft 49BC  
 __size_of_I2C_Master_Write 000A             ___lldiv@divisor 0084             ___lldiv@counter 008C  
                   printf@c 00E2                     printf@f 00BF            I2C_Master_Init@c 008D  
          I2C_Master_Read@a 0081                     postdec2 000FDD                     postinc2 000FDE  
            __tdiv_to_l_@f1 0080              __tdiv_to_l_@f2 0083             ??i2__tdiv_to_l_ 0007  
               ?_lcdNewline 0001               ??__tdiv_to_l_ 0086                   _PORTBbits 000F81  
                 i2___awdiv 45D6                   i2___ftadd 31E6                   i2___awmod 4758  
                 i2___ftneg 4BF0                   i2___lldiv 465A                   i2___ftmul 3E0C  
                 i2___llmod 489A                   i2___ftsub 4AA4                   i2___fttol 3F00  
                 i2_lcdInst 4C36                 ___ftdiv@exp 009F          i2___llmod@dividend 0001  
        i2___awdiv@dividend 0007             i2___ftpack@sign 0005         __size_of__div_to_l_ 0188  
               ___ftmul@exp 009D              __end_of___ftge 40BC              __end_of___wmul 4B1A  
      __size_ofi2_lcdNibble 0056               i2lcdInst@data 0004              __end_of_initT0 4CB6  
            __end_of_fround 2AA4            i2___wmul@product 0013              __end_of_printf 18AE  
             i2_printf$1247 0048                i2printf@flag 004E                i2printf@fval 005C  
              i2printf@prec 0050         start_initialization 4C58           __size_ofi2___ftge 0090  
        i2___awdiv@quotient 000D           __size_ofi2___wmul 0026                 startT0@time 0080  
       __end_of__tdiv_to_l_ 3530                 __end_of_lol 45D6                   i2printf@c 005F  
                 i2printf@f 0040             i2___fttol@sign1 0034           __size_ofi2_fround 0246  
                ?i2___awdiv 0007                  ?i2___ftadd 002E                  ?i2___awmod 0001  
                ?i2___ftneg 0001                  ?i2___lldiv 0001                  ?i2___ftmul 0015  
                ?i2___llmod 0001                  ?i2___ftsub 003A                  ?i2___fttol 002B  
         __size_ofi2_printf 06AC           ??_I2C_Master_Init 0091           ??_I2C_Master_Read 0081  
         ??_I2C_Master_Wait 0080                  ?i2_lcdInst 0001           ??_I2C_Master_Stop 0081  
       __size_of_lcdNewline 0008             ___llmod@divisor 0084             ___llmod@counter 0088  
                  ??___ftge 0086                    ??___wmul 0092                    ??_initT0 0080  
          __CFG_LPT1OSC$OFF 000000                    ??_fround 00A6                    ??_printf 00C5  
         __size_of___altoft 009E                  fround@prec 00AC               ?i2__div_to_l_ 0001  
         __size_of___ftpack 010C           __size_of___lltoft 007C                 __pbssCOMRAM 006E  
             __pcstackBANK0 0080               __pcstackBANK1 0100                    ?i2_scale 0024  
                  ?i2_putch 0001            _I2C_Master_Start 4CBE            _I2C_Master_Write 4C9C  
                 _main$1071 00EA           __CFG_CCP2MX$PORTC 000000                   __pintcode 0008  
                 _lcdNibble 4832                    ?___awdiv 0086                    ?___ftadd 00AD  
                  ?___awmod 0080                    ?___ftdiv 0092                    ?___ftneg 0080  
                  ?___lldiv 0080                    ?___ftmul 0094                    ?___llmod 0080  
                  ?___ftsub 00B9                   __npowers_ 1029                    ?___fttol 00AA  
             ?i2_lcdNewline 0001                    ?_lcdInst 0001                 __tdiv_to_l_ 3392  
            ??i2__div_to_l_ 0007                ??__div_to_l_ 0086                    ?_initLCD 0001  
               __smallconst 1000                   _hexpowers 1077                    ?_startT0 0080  
               ??i2___awdiv 000B                 ??i2___ftadd 0034                 ??i2___awmod 0005  
               ??i2___ftneg 0004                 ??i2___lldiv 0009                 ??i2___ftmul 001B  
            __size_of_scale 04AE                 ??i2___llmod 0009                 ??i2___ftsub 0040  
               ??i2___fttol 002F          testFrequency@F2960 10A8              __size_of_putch 0028  
               ??i2_lcdInst 0003              ___wmul@product 0092                    _LATDbits 000F8C  
        testFrequency@i_390 0120      __size_of_testFrequency 0294                    i2u500_40 3F4A  
                  i2u500_45 3F42          __end_of__div_to_l_ 36B8          testFrequency@first 011D  
        testFrequency@count 0115                    i2u543_40 1CD6                    i2u527_40 1984  
                  i2u527_45 197A                    i2u570_47 49DE                    i2u571_47 4A00  
                  i2u572_47 4A0A                    i2u566_47 4C28                    i2u567_47 4C3C  
                  i2u568_47 4C4E                    i2u569_47 49D4            __CFG_WDTPS$32768 000000  
                ?_lcdNibble 0001             i2__div_to_l_@f1 0001             i2__div_to_l_@f2 0004  
            ??i2_lcdNewline 0005                ??_lcdNewline 0084           ___wmul@multiplier 008E  
                  i2___ftge 44BE                    i2___wmul 4BCA               lcdNibble@data 0081  
                printf@flag 00D1               lcdNibble@temp 0080                  printf@fval 00DF  
                printf@prec 00D3           i2___awdiv@divisor 0009                    i2_fround 2FA0  
         i2___awdiv@counter 000B                    i2_printf 18AE         I2C_Master_Read@temp 0082  
        i2___awmod@dividend 0001            __size_ofi2_scale 03F0            __size_ofi2_putch 0022  
        __end_of_lcdNewline 4CAE                    __Hrparam 0000                    __Lrparam 0000  
        __CFG_BOREN$SBORDIS 000000            __size_of___awdiv 00BE            __size_of___ftadd 0268  
          __size_of___awmod 00A2            __size_of___ftdiv 014C            __size_of___ftneg 0030  
     i2___wmul@multiplicand 0011            __size_of___lldiv 00BC                    ___altoft 4386  
          __size_of___ftmul 015E            __size_of___llmod 009A            __size_of___ftsub 004C  
          __size_of___fttol 0144                    ___ftpack 3D00                 _fround$1072 00A9  
               _fround$1073 00A6                    ___lltoft 46DC       __end_ofi2__tdiv_to_l_ 3BD8  
          __size_of_lcdInst 002A             _I2C_Master_Init 4900             _I2C_Master_Read 4B4A  
          __size_of_initLCD 0046             _I2C_Master_Wait 4C88             _I2C_Master_Stop 4CB6  
             _testFrequency 2AA4                    __ptext10 42E4                    __ptext11 40BC  
                  __ptext20 3FF4                    __ptext12 3392                    __ptext21 4CAE  
                  __ptext13 3530                    __ptext30 4900                    __ptext22 3816  
                  __ptext14 46DC                    __ptext31 417A                    __ptext23 4386  
                  __ptext15 4424                    __ptext40 4C36                    __ptext32 4A5E  
                  __ptext24 3D00                    __ptext16 3962                    __ptext41 49BC  
                  __ptext33 4B78                    __ptext25 4C9C                    __ptext17 4A12  
                  __ptext50 489A                    __ptext42 2FA0                    __ptext34 4832  
                  __ptext26 4CB6                    __ptext18 2D38                    __ptext51 465A  
                  __ptext43 4BCA                    __ptext27 4CBE                    __ptext19 4B1A  
                  __ptext52 3F00                    __ptext44 3E0C                    __ptext36 18AE  
                  __ptext28 4B4A                    __ptext53 4AA4                    __ptext45 4758  
                  __ptext37 2408                    __ptext29 4C88                    __ptext54 31E6  
                  __ptext46 45D6                    __ptext38 4C14                    __ptext55 4236  
                  __ptext47 3AA6                    __ptext39 4CC6                    __ptext56 4BF0  
                  __ptext48 3BD8                    __ptext57 44BE                    __ptext49 4960  
                  __powers_ 1050            __size_of_startT0 0016       testFrequency@datetime 0100  
             __size_of_main 006A        __end_ofi2__div_to_l_ 3D00              testFrequency@i 011F  
         testFrequency@time 0107           testFrequency@prev 0119               ??i2_lcdNibble 0001  
               ??_lcdNibble 0080                    int$flags 0074                   printf@idx 00CE  
                 printf@exp 00D9                   printf@val 00D5       testFrequency@timerOff 011B  
         i2___awmod@divisor 0003                   putch@data 0084              ?_testFrequency 00E3  
         i2___awmod@counter 0005    __end_of_I2C_Master_Start 4CC6    __end_of_I2C_Master_Write 4CA6  
                _INTCONbits 000FF2                    scale@scl 00A9                    intlevel2 0000  
          __tdiv_to_l_@exp1 008E            __tdiv_to_l_@cntr 008D        __end_ofi2_lcdNewline 4CCE  
          __tdiv_to_l_@quot 0089            ___lldiv@dividend 0080                    printf@ap 00CF  
   __end_of_I2C_Master_Init 4960     __end_of_I2C_Master_Read 4B78     __end_of_I2C_Master_Wait 4C9C  
   __end_of_I2C_Master_Stop 4CBE                 lcdInst@data 0083                ?__tdiv_to_l_ 0080  
               _printf$1075 00CB         __end_ofi2_lcdNibble 4A12            ___lldiv@quotient 0088  
         I2C_Master_Write@d 0081           i2__div_to_l_@exp1 000C           i2__div_to_l_@cntr 000B  
         i2__div_to_l_@quot 0007  
