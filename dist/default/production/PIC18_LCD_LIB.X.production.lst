

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Apr 10 12:30:12 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    84                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    91                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    92                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    93  0000                     
    94                           ; Version 1.40
    95                           ; Generated 01/12/2016 GMT
    96                           ; 
    97                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    98                           ; All rights reserved.
    99                           ; 
   100                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   101                           ; 
   102                           ; Redistribution and use in source and binary forms, with or without modification, are
   103                           ; permitted provided that the following conditions are met:
   104                           ; 
   105                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   106                           ;        conditions and the following disclaimer.
   107                           ; 
   108                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   109                           ;        of conditions and the following disclaimer in the documentation and/or other
   110                           ;        materials provided with the distribution.
   111                           ; 
   112                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   113                           ;        software without specific prior written permission.
   114                           ; 
   115                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   116                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   117                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   118                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   119                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   120                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   121                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   122                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   123                           ; 
   124                           ; 
   125                           ; Code-generator required, PIC18F4620 Definitions
   126                           ; 
   127                           ; SFR Addresses
   128  0000                     
   129                           	psect	idataCOMRAM
   130  0045C2                     __pidataCOMRAM:
   131                           	opt stack 0
   132                           
   133                           ;initializer for _angle
   134  0045C2  005A               	dw	90
   135                           
   136                           ;initializer for _AA_float
   137  0045C4  0002               	dw	2
   138  0045C6  0005               	dw	5
   139                           
   140                           ;initializer for _padPin1
   141  0045C8  0002               	dw	2
   142  0045CA  0006               	dw	6
   143                           
   144                           ;initializer for _padPin2
   145  0045CC  0002               	dw	2
   146  0045CE  0007               	dw	7
   147                           
   148                           	psect	idataBANK0
   149  0045E6                     __pidataBANK0:
   150                           	opt stack 0
   151                           
   152                           ;initializer for _V_LIM_9V
   153  0045E6  33                 	db	51
   154  0045E7  A3                 	db	163
   155  0045E8  3F                 	db	63
   156                           
   157                           ;initializer for _V_LIM_AA
   158  0045E9  EC                 	db	236
   159  0045EA  D1                 	db	209
   160  0045EB  3E                 	db	62
   161                           
   162                           ;initializer for _V_LIM_C
   163  0045EC  66                 	db	102
   164  0045ED  A6                 	db	166
   165  0045EE  3F                 	db	63
   166                           
   167                           	psect	idataBANK1
   168  004618                     __pidataBANK1:
   169                           	opt stack 0
   170                           
   171                           ;initializer for _stoppingTime
   172  004618  012C               	dw	300
   173                           
   174                           	psect	mediumconst
   175  00FD8A                     __pmediumconst:
   176                           	opt stack 0
   177  00FD8A  00                 	db	0
   178  00FD8B                     _dpowers:
   179                           	opt stack 0
   180  00FD8B  0001               	dw	1
   181  00FD8D  0000               	dw	0
   182  00FD8F  000A               	dw	10
   183  00FD91  0000               	dw	0
   184  00FD93  0064               	dw	100
   185  00FD95  0000               	dw	0
   186  00FD97  03E8               	dw	1000
   187  00FD99  0000               	dw	0
   188  00FD9B  2710               	dw	10000
   189  00FD9D  0000               	dw	0
   190  00FD9F  86A0               	dw	34464
   191  00FDA1  0001               	dw	1
   192  00FDA3  4240               	dw	16960
   193  00FDA5  000F               	dw	15
   194  00FDA7  9680               	dw	38528
   195  00FDA9  0098               	dw	152
   196  00FDAB  E100               	dw	57600
   197  00FDAD  05F5               	dw	1525
   198  00FDAF  CA00               	dw	51712
   199  00FDB1  3B9A               	dw	15258
   200  00FDB3                     __end_of_dpowers:
   201                           	opt stack 0
   202  00FDB3                     __npowers_:
   203                           	opt stack 0
   204  00FDB3  00                 	db	0
   205  00FDB4  80                 	db	128
   206  00FDB5  3F                 	db	63
   207  00FDB6  CD                 	db	205
   208  00FDB7  CC                 	db	204
   209  00FDB8  3D                 	db	61
   210  00FDB9  D7                 	db	215
   211  00FDBA  23                 	db	35
   212  00FDBB  3C                 	db	60
   213  00FDBC  12                 	db	18
   214  00FDBD  83                 	db	131
   215  00FDBE  3A                 	db	58
   216  00FDBF  B7                 	db	183
   217  00FDC0  D1                 	db	209
   218  00FDC1  38                 	db	56
   219  00FDC2  C6                 	db	198
   220  00FDC3  27                 	db	39
   221  00FDC4  37                 	db	55
   222  00FDC5  38                 	db	56
   223  00FDC6  86                 	db	134
   224  00FDC7  35                 	db	53
   225  00FDC8  C0                 	db	192
   226  00FDC9  D6                 	db	214
   227  00FDCA  33                 	db	51
   228  00FDCB  CC                 	db	204
   229  00FDCC  2B                 	db	43
   230  00FDCD  32                 	db	50
   231  00FDCE  70                 	db	112
   232  00FDCF  89                 	db	137
   233  00FDD0  30                 	db	48
   234  00FDD1  E7                 	db	231
   235  00FDD2  DB                 	db	219
   236  00FDD3  2E                 	db	46
   237  00FDD4  E5                 	db	229
   238  00FDD5  3C                 	db	60
   239  00FDD6  1E                 	db	30
   240  00FDD7  42                 	db	66
   241  00FDD8  A2                 	db	162
   242  00FDD9  0D                 	db	13
   243  00FDDA                     __end_of__npowers_:
   244                           	opt stack 0
   245  00FDDA                     __powers_:
   246                           	opt stack 0
   247  00FDDA  00                 	db	0
   248  00FDDB  80                 	db	128
   249  00FDDC  3F                 	db	63
   250  00FDDD  00                 	db	0
   251  00FDDE  20                 	db	32
   252  00FDDF  41                 	db	65
   253  00FDE0  00                 	db	0
   254  00FDE1  C8                 	db	200
   255  00FDE2  42                 	db	66
   256  00FDE3  00                 	db	0
   257  00FDE4  7A                 	db	122
   258  00FDE5  44                 	db	68
   259  00FDE6  40                 	db	64
   260  00FDE7  1C                 	db	28
   261  00FDE8  46                 	db	70
   262  00FDE9  50                 	db	80
   263  00FDEA  C3                 	db	195
   264  00FDEB  47                 	db	71
   265  00FDEC  24                 	db	36
   266  00FDED  74                 	db	116
   267  00FDEE  49                 	db	73
   268  00FDEF  97                 	db	151
   269  00FDF0  18                 	db	24
   270  00FDF1  4B                 	db	75
   271  00FDF2  BC                 	db	188
   272  00FDF3  BE                 	db	190
   273  00FDF4  4C                 	db	76
   274  00FDF5  6B                 	db	107
   275  00FDF6  6E                 	db	110
   276  00FDF7  4E                 	db	78
   277  00FDF8  03                 	db	3
   278  00FDF9  15                 	db	21
   279  00FDFA  50                 	db	80
   280  00FDFB  79                 	db	121
   281  00FDFC  AD                 	db	173
   282  00FDFD  60                 	db	96
   283  00FDFE  F3                 	db	243
   284  00FDFF  49                 	db	73
   285  00FE00  71                 	db	113
   286  00FE01                     __end_of__powers_:
   287                           	opt stack 0
   288  00FE01                     _hexpowers:
   289                           	opt stack 0
   290  00FE01  0001               	dw	1
   291  00FE03  0000               	dw	0
   292  00FE05  0010               	dw	16
   293  00FE07  0000               	dw	0
   294  00FE09  0100               	dw	256
   295  00FE0B  0000               	dw	0
   296  00FE0D  1000               	dw	4096
   297  00FE0F  0000               	dw	0
   298  00FE11  0000               	dw	0
   299  00FE13  0001               	dw	1
   300  00FE15  0000               	dw	0
   301  00FE17  0010               	dw	16
   302  00FE19  0000               	dw	0
   303  00FE1B  0100               	dw	256
   304  00FE1D  0000               	dw	0
   305  00FE1F  1000               	dw	4096
   306  00FE21                     __end_of_hexpowers:
   307                           	opt stack 0
   308  00FE21                     _keys:
   309                           	opt stack 0
   310  00FE21  31                 	db	49
   311  00FE22  32                 	db	50
   312  00FE23  33                 	db	51
   313  00FE24  41                 	db	65
   314  00FE25  34                 	db	52
   315  00FE26  35                 	db	53
   316  00FE27  36                 	db	54
   317  00FE28  42                 	db	66
   318  00FE29  37                 	db	55
   319  00FE2A  38                 	db	56
   320  00FE2B  39                 	db	57
   321  00FE2C  43                 	db	67
   322  00FE2D  2A                 	db	42
   323  00FE2E  30                 	db	48
   324  00FE2F  23                 	db	35
   325  00FE30  44                 	db	68
   326  00FE31  00                 	db	0
   327  00FE32                     __end_of_keys:
   328                           	opt stack 0
   329  00FE32                     _happynewyear:
   330                           	opt stack 0
   331  00FE32  00                 	db	0
   332  00FE33  50                 	db	80
   333  00FE34  10                 	db	16
   334  00FE35  01                 	db	1
   335  00FE36  10                 	db	16
   336  00FE37  04                 	db	4
   337  00FE38  17                 	db	23
   338  00FE39                     __end_of_happynewyear:
   339                           	opt stack 0
   340  00FE39                     _Vcc:
   341                           	opt stack 0
   342  00FE39  00                 	db	0
   343  00FE3A  A0                 	db	160
   344  00FE3B  40                 	db	64
   345  00FE3C                     __end_of_Vcc:
   346                           	opt stack 0
   347  00FE3C                     _resolution:
   348                           	opt stack 0
   349  00FE3C  C0                 	db	192
   350  00FE3D  7F                 	db	127
   351  00FE3E  44                 	db	68
   352  00FE3F                     __end_of_resolution:
   353                           	opt stack 0
   354  00FE3F                     _cylinderBackward:
   355                           	opt stack 0
   356  00FE3F  001E               	dw	30
   357  00FE41                     __end_of_cylinderBackward:
   358                           	opt stack 0
   359  00FE41                     _cylinderForward:
   360                           	opt stack 0
   361  00FE41  0064               	dw	100
   362  00FE43                     __end_of_cylinderForward:
   363                           	opt stack 0
   364  00FE43                     _padAngle_CLOSE:
   365                           	opt stack 0
   366  00FE43  0046               	dw	70
   367  00FE45                     __end_of_padAngle_CLOSE:
   368                           	opt stack 0
   369  00FE45                     _padAngle_NEUTRAL:
   370                           	opt stack 0
   371  00FE45  0082               	dw	130
   372  00FE47                     __end_of_padAngle_NEUTRAL:
   373                           	opt stack 0
   374  00FE47                     _padAngle_OPEN:
   375                           	opt stack 0
   376  00FE47  00B4               	dw	180
   377  00FE49                     __end_of_padAngle_OPEN:
   378                           	opt stack 0
   379  00FE49                     _redirectAngle_9V:
   380                           	opt stack 0
   381  00FE49  0076               	dw	118
   382  00FE4B                     __end_of_redirectAngle_9V:
   383                           	opt stack 0
   384  00FE4B                     _redirectAngle_AA:
   385                           	opt stack 0
   386  00FE4B  008A               	dw	138
   387  00FE4D                     __end_of_redirectAngle_AA:
   388                           	opt stack 0
   389  00FE4D                     _redirectAngle_C:
   390                           	opt stack 0
   391  00FE4D  00A6               	dw	166
   392  00FE4F                     __end_of_redirectAngle_C:
   393                           	opt stack 0
   394  00FE4F                     _redirectAngle_OTHER:
   395                           	opt stack 0
   396  00FE4F  0099               	dw	153
   397  00FE51                     __end_of_redirectAngle_OTHER:
   398                           	opt stack 0
   399  00FE51                     _conveyorServo:
   400                           	opt stack 0
   401  00FE51  0002               	dw	2
   402  00FE53  0000               	dw	0
   403  00FE55                     __end_of_conveyorServo:
   404                           	opt stack 0
   405  00FE55                     _cylinderMotor1:
   406                           	opt stack 0
   407  00FE55  0003               	dw	3
   408  00FE57  0000               	dw	0
   409  00FE59                     __end_of_cylinderMotor1:
   410                           	opt stack 0
   411  00FE59                     _cylinderMotor2:
   412                           	opt stack 0
   413  00FE59  0003               	dw	3
   414  00FE5B  0001               	dw	1
   415  00FE5D                     __end_of_cylinderMotor2:
   416                           	opt stack 0
   417  00FE5D                     _padServo:
   418                           	opt stack 0
   419  00FE5D  0002               	dw	2
   420  00FE5F  0001               	dw	1
   421  00FE61                     __end_of_padServo:
   422                           	opt stack 0
   423  00FE61                     _redirectingServo:
   424                           	opt stack 0
   425  00FE61  0002               	dw	2
   426  00FE63  0002               	dw	2
   427  00FE65                     __end_of_redirectingServo:
   428                           	opt stack 0
   429  0000                     _ADCON0	set	4034
   430  0000                     _ADCON1	set	4033
   431  0000                     _ADCON2	set	4032
   432  0000                     _ADRESH	set	4036
   433  0000                     _ADRESL	set	4035
   434  0000                     _EEADR	set	4009
   435  0000                     _EEADRH	set	4010
   436  0000                     _EECON1	set	4006
   437  0000                     _EECON2	set	4007
   438  0000                     _EEDATA	set	4008
   439  0000                     _INTCONbits	set	4082
   440  0000                     _LATA	set	3977
   441  0000                     _LATB	set	3978
   442  0000                     _LATC	set	3979
   443  0000                     _LATD	set	3980
   444  0000                     _LATDbits	set	3980
   445  0000                     _LATE	set	3981
   446  0000                     _PORTA	set	3968
   447  0000                     _PORTB	set	3969
   448  0000                     _PORTBbits	set	3969
   449  0000                     _PORTC	set	3970
   450  0000                     _PORTD	set	3971
   451  0000                     _SSPADD	set	4040
   452  0000                     _SSPBUF	set	4041
   453  0000                     _SSPCON1	set	4038
   454  0000                     _SSPCON2	set	4037
   455  0000                     _SSPSTAT	set	4039
   456  0000                     _T0CON	set	4053
   457  0000                     _T1CON	set	4045
   458  0000                     _T3CON	set	4017
   459  0000                     _TMR0H	set	4055
   460  0000                     _TMR0L	set	4054
   461  0000                     _TMR1H	set	4047
   462  0000                     _TMR1L	set	4046
   463  0000                     _TMR3H	set	4019
   464  0000                     _TMR3L	set	4018
   465  0000                     _TRISA	set	3986
   466  0000                     _TRISB	set	3987
   467  0000                     _TRISC	set	3988
   468  0000                     _TRISD	set	3989
   469  0000                     _TRISE	set	3990
   470  0000                     _ACKDT	set	32301
   471  0000                     _ACKEN	set	32300
   472  0000                     _EEIF	set	32012
   473  0000                     _INT0IE	set	32660
   474  0000                     _INT0IF	set	32657
   475  0000                     _INT1IE	set	32643
   476  0000                     _INT1IF	set	32640
   477  0000                     _PEIE	set	32662
   478  0000                     _PEN	set	32298
   479  0000                     _RCEN	set	32299
   480  0000                     _RSEN	set	32297
   481  0000                     _SEN	set	32296
   482  0000                     _TMR0IE	set	32661
   483  0000                     _TMR0IF	set	32658
   484  0000                     _TMR1IE	set	31976
   485  0000                     _TMR1IF	set	31984
   486  0000                     _TMR3IE	set	32001
   487  0000                     _TRISC3	set	31907
   488  0000                     _TRISC4	set	31908
   489  00FE65                     STR_3:
   490  00FE65  73                 	db	115	;'s'
   491  00FE66  74                 	db	116	;'t'
   492  00FE67  6F                 	db	111	;'o'
   493  00FE68  70                 	db	112	;'p'
   494  00FE69  20                 	db	32
   495  00FE6A  69                 	db	105	;'i'
   496  00FE6B  6E                 	db	110	;'n'
   497  00FE6C  3A                 	db	58	;':'
   498  00FE6D  20                 	db	32
   499  00FE6E  25                 	db	37
   500  00FE6F  64                 	db	100	;'d'
   501  00FE70  20                 	db	32
   502  00FE71  20                 	db	32
   503  00FE72  20                 	db	32
   504  00FE73  20                 	db	32
   505  00FE74  20                 	db	32
   506  00FE75  20                 	db	32
   507  00FE76  20                 	db	32
   508  00FE77  20                 	db	32
   509  00FE78  20                 	db	32
   510  00FE79  20                 	db	32
   511  00FE7A  20                 	db	32
   512  00FE7B  20                 	db	32
   513  00FE7C  20                 	db	32
   514  00FE7D  20                 	db	32
   515  00FE7E  20                 	db	32
   516  00FE7F  20                 	db	32
   517  00FE80  20                 	db	32
   518  00FE81  20                 	db	32
   519  00FE82  00                 	db	0
   520  00FE83                     STR_2:
   521  00FE83  74                 	db	116	;'t'
   522  00FE84  69                 	db	105	;'i'
   523  00FE85  6D                 	db	109	;'m'
   524  00FE86  65                 	db	101	;'e'
   525  00FE87  20                 	db	32
   526  00FE88  25                 	db	37
   527  00FE89  30                 	db	48	;'0'
   528  00FE8A  32                 	db	50	;'2'
   529  00FE8B  6C                 	db	108	;'l'
   530  00FE8C  64                 	db	100	;'d'
   531  00FE8D  3A                 	db	58	;':'
   532  00FE8E  25                 	db	37
   533  00FE8F  30                 	db	48	;'0'
   534  00FE90  32                 	db	50	;'2'
   535  00FE91  6C                 	db	108	;'l'
   536  00FE92  64                 	db	100	;'d'
   537  00FE93  2E                 	db	46
   538  00FE94  25                 	db	37
   539  00FE95  30                 	db	48	;'0'
   540  00FE96  31                 	db	49	;'1'
   541  00FE97  6C                 	db	108	;'l'
   542  00FE98  64                 	db	100	;'d'
   543  00FE99  20                 	db	32
   544  00FE9A  20                 	db	32
   545  00FE9B  20                 	db	32
   546  00FE9C  20                 	db	32
   547  00FE9D  20                 	db	32
   548  00FE9E  0A                 	db	10
   549  00FE9F  00                 	db	0
   550  00FEA0                     STR_18:
   551  00FEA0  74                 	db	116	;'t'
   552  00FEA1  69                 	db	105	;'i'
   553  00FEA2  6D                 	db	109	;'m'
   554  00FEA3  65                 	db	101	;'e'
   555  00FEA4  20                 	db	32
   556  00FEA5  25                 	db	37
   557  00FEA6  30                 	db	48	;'0'
   558  00FEA7  32                 	db	50	;'2'
   559  00FEA8  6C                 	db	108	;'l'
   560  00FEA9  64                 	db	100	;'d'
   561  00FEAA  3A                 	db	58	;':'
   562  00FEAB  25                 	db	37
   563  00FEAC  30                 	db	48	;'0'
   564  00FEAD  32                 	db	50	;'2'
   565  00FEAE  6C                 	db	108	;'l'
   566  00FEAF  64                 	db	100	;'d'
   567  00FEB0  2E                 	db	46
   568  00FEB1  25                 	db	37
   569  00FEB2  30                 	db	48	;'0'
   570  00FEB3  31                 	db	49	;'1'
   571  00FEB4  6C                 	db	108	;'l'
   572  00FEB5  64                 	db	100	;'d'
   573  00FEB6  0A                 	db	10
   574  00FEB7  00                 	db	0
   575  00FEB8                     STR_11:
   576  00FEB8  20                 	db	32
   577  00FEB9  20                 	db	32
   578  00FEBA  20                 	db	32
   579  00FEBB  25                 	db	37
   580  00FEBC  30                 	db	48	;'0'
   581  00FEBD  32                 	db	50	;'2'
   582  00FEBE  78                 	db	120	;'x'
   583  00FEBF  3A                 	db	58	;':'
   584  00FEC0  25                 	db	37
   585  00FEC1  30                 	db	48	;'0'
   586  00FEC2  32                 	db	50	;'2'
   587  00FEC3  78                 	db	120	;'x'
   588  00FEC4  3A                 	db	58	;':'
   589  00FEC5  25                 	db	37
   590  00FEC6  30                 	db	48	;'0'
   591  00FEC7  32                 	db	50	;'2'
   592  00FEC8  78                 	db	120	;'x'
   593  00FEC9  20                 	db	32
   594  00FECA  20                 	db	32
   595  00FECB  20                 	db	32
   596  00FECC  41                 	db	65	;'A'
   597  00FECD  3E                 	db	62	;'>'
   598  00FECE  00                 	db	0
   599  00FECF                     STR_10:
   600  00FECF  20                 	db	32
   601  00FED0  20                 	db	32
   602  00FED1  32                 	db	50	;'2'
   603  00FED2  30                 	db	48	;'0'
   604  00FED3  25                 	db	37
   605  00FED4  30                 	db	48	;'0'
   606  00FED5  32                 	db	50	;'2'
   607  00FED6  78                 	db	120	;'x'
   608  00FED7  2F                 	db	47
   609  00FED8  25                 	db	37
   610  00FED9  30                 	db	48	;'0'
   611  00FEDA  32                 	db	50	;'2'
   612  00FEDB  78                 	db	120	;'x'
   613  00FEDC  2F                 	db	47
   614  00FEDD  25                 	db	37
   615  00FEDE  30                 	db	48	;'0'
   616  00FEDF  32                 	db	50	;'2'
   617  00FEE0  78                 	db	120	;'x'
   618  00FEE1  0A                 	db	10
   619  00FEE2  00                 	db	0
   620  00FEE3                     STR_16:
   621  00FEE3  25                 	db	37
   622  00FEE4  63                 	db	99	;'c'
   623  00FEE5  29                 	db	41
   624  00FEE6  20                 	db	32
   625  00FEE7  74                 	db	116	;'t'
   626  00FEE8  69                 	db	105	;'i'
   627  00FEE9  6D                 	db	109	;'m'
   628  00FEEA  65                 	db	101	;'e'
   629  00FEEB  20                 	db	32
   630  00FEEC  20                 	db	32
   631  00FEED  3C                 	db	60	;'<'
   632  00FEEE  41                 	db	65	;'A'
   633  00FEEF  20                 	db	32
   634  00FEF0  20                 	db	32
   635  00FEF1  20                 	db	32
   636  00FEF2  20                 	db	32
   637  00FEF3  20                 	db	32
   638  00FEF4  0A                 	db	10
   639  00FEF5  00                 	db	0
   640  00FEF6                     STR_21:
   641  00FEF6  5B                 	db	91	;'['
   642  00FEF7  25                 	db	37
   643  00FEF8  64                 	db	100	;'d'
   644  00FEF9  2C                 	db	44
   645  00FEFA  25                 	db	37
   646  00FEFB  64                 	db	100	;'d'
   647  00FEFC  2C                 	db	44
   648  00FEFD  25                 	db	37
   649  00FEFE  64                 	db	100	;'d'
   650  00FEFF  2C                 	db	44
   651  00FF00  25                 	db	37
   652  00FF01  64                 	db	100	;'d'
   653  00FF02  5D                 	db	93	;']'
   654  00FF03  20                 	db	32
   655  00FF04  20                 	db	32
   656  00FF05  20                 	db	32
   657  00FF06  2A                 	db	42
   658  00FF07  3E                 	db	62	;'>'
   659  00FF08  00                 	db	0
   660  00FF09                     STR_12:
   661  00FF09  73                 	db	115	;'s'
   662  00FF0A  74                 	db	116	;'t'
   663  00FF0B  61                 	db	97	;'a'
   664  00FF0C  72                 	db	114	;'r'
   665  00FF0D  74                 	db	116	;'t'
   666  00FF0E  20                 	db	32
   667  00FF0F  20                 	db	32
   668  00FF10  20                 	db	32
   669  00FF11  3C                 	db	60	;'<'
   670  00FF12  42                 	db	66	;'B'
   671  00FF13  20                 	db	32
   672  00FF14  20                 	db	32
   673  00FF15  20                 	db	32
   674  00FF16  20                 	db	32
   675  00FF17  20                 	db	32
   676  00FF18  20                 	db	32
   677  00FF19  0A                 	db	10
   678  00FF1A  00                 	db	0
   679  00FF1B                     STR_14:
   680  00FF1B  73                 	db	115	;'s'
   681  00FF1C  65                 	db	101	;'e'
   682  00FF1D  6C                 	db	108	;'l'
   683  00FF1E  65                 	db	101	;'e'
   684  00FF1F  63                 	db	99	;'c'
   685  00FF20  74                 	db	116	;'t'
   686  00FF21  20                 	db	32
   687  00FF22  72                 	db	114	;'r'
   688  00FF23  75                 	db	117	;'u'
   689  00FF24  6E                 	db	110	;'n'
   690  00FF25  3A                 	db	58	;':'
   691  00FF26  20                 	db	32
   692  00FF27  20                 	db	32
   693  00FF28  20                 	db	32
   694  00FF29  20                 	db	32
   695  00FF2A  20                 	db	32
   696  00FF2B  0A                 	db	10
   697  00FF2C  00                 	db	0
   698  00FF2D                     STR_20:
   699  00FF2D  5B                 	db	91	;'['
   700  00FF2E  41                 	db	65	;'A'
   701  00FF2F  41                 	db	65	;'A'
   702  00FF30  2C                 	db	44
   703  00FF31  39                 	db	57	;'9'
   704  00FF32  56                 	db	86	;'V'
   705  00FF33  2C                 	db	44
   706  00FF34  43                 	db	67	;'C'
   707  00FF35  2C                 	db	44
   708  00FF36  6F                 	db	111	;'o'
   709  00FF37  74                 	db	116	;'t'
   710  00FF38  68                 	db	104	;'h'
   711  00FF39  65                 	db	101	;'e'
   712  00FF3A  72                 	db	114	;'r'
   713  00FF3B  5D                 	db	93	;']'
   714  00FF3C  20                 	db	32
   715  00FF3D  0A                 	db	10
   716  00FF3E  00                 	db	0
   717  00FF3F                     STR_24:
   718  00FF3F  30                 	db	48	;'0'
   719  00FF40  31                 	db	49	;'1'
   720  00FF41  32                 	db	50	;'2'
   721  00FF42  33                 	db	51	;'3'
   722  00FF43  34                 	db	52	;'4'
   723  00FF44  35                 	db	53	;'5'
   724  00FF45  36                 	db	54	;'6'
   725  00FF46  37                 	db	55	;'7'
   726  00FF47  38                 	db	56	;'8'
   727  00FF48  39                 	db	57	;'9'
   728  00FF49  61                 	db	97	;'a'
   729  00FF4A  62                 	db	98	;'b'
   730  00FF4B  63                 	db	99	;'c'
   731  00FF4C  64                 	db	100	;'d'
   732  00FF4D  65                 	db	101	;'e'
   733  00FF4E  66                 	db	102	;'f'
   734  00FF4F  00                 	db	0
   735  00FF50                     STR_19:
   736  00FF50  20                 	db	32
   737  00FF51  20                 	db	32
   738  00FF52  20                 	db	32
   739  00FF53  20                 	db	32
   740  00FF54  20                 	db	32
   741  00FF55  20                 	db	32
   742  00FF56  20                 	db	32
   743  00FF57  20                 	db	32
   744  00FF58  20                 	db	32
   745  00FF59  20                 	db	32
   746  00FF5A  20                 	db	32
   747  00FF5B  20                 	db	32
   748  00FF5C  20                 	db	32
   749  00FF5D  20                 	db	32
   750  00FF5E  2A                 	db	42
   751  00FF5F  3E                 	db	62	;'>'
   752  00FF60  00                 	db	0
   753  00FF61                     STR_15:
   754  00FF61  5B                 	db	91	;'['
   755  00FF62  31                 	db	49	;'1'
   756  00FF63  2C                 	db	44
   757  00FF64  32                 	db	50	;'2'
   758  00FF65  2C                 	db	44
   759  00FF66  33                 	db	51	;'3'
   760  00FF67  2C                 	db	44
   761  00FF68  34                 	db	52	;'4'
   762  00FF69  5D                 	db	93	;']'
   763  00FF6A  20                 	db	32
   764  00FF6B  20                 	db	32
   765  00FF6C  20                 	db	32
   766  00FF6D  20                 	db	32
   767  00FF6E  20                 	db	32
   768  00FF6F  2A                 	db	42
   769  00FF70  3E                 	db	62	;'>'
   770  00FF71  00                 	db	0
   771  00FF72                     STR_13:
   772  00FF72  68                 	db	104	;'h'
   773  00FF73  69                 	db	105	;'i'
   774  00FF74  73                 	db	115	;'s'
   775  00FF75  74                 	db	116	;'t'
   776  00FF76  6F                 	db	111	;'o'
   777  00FF77  72                 	db	114	;'r'
   778  00FF78  79                 	db	121	;'y'
   779  00FF79  20                 	db	32
   780  00FF7A  3C                 	db	60	;'<'
   781  00FF7B  43                 	db	67	;'C'
   782  00FF7C  20                 	db	32
   783  00FF7D  20                 	db	32
   784  00FF7E  20                 	db	32
   785  00FF7F  20                 	db	32
   786  00FF80  2A                 	db	42
   787  00FF81  3E                 	db	62	;'>'
   788  00FF82  00                 	db	0
   789  00FF83                     STR_17:
   790  00FF83  20                 	db	32
   791  00FF84  20                 	db	32
   792  00FF85  20                 	db	32
   793  00FF86  73                 	db	115	;'s'
   794  00FF87  74                 	db	116	;'t'
   795  00FF88  61                 	db	97	;'a'
   796  00FF89  74                 	db	116	;'t'
   797  00FF8A  73                 	db	115	;'s'
   798  00FF8B  20                 	db	32
   799  00FF8C  3C                 	db	60	;'<'
   800  00FF8D  42                 	db	66	;'B'
   801  00FF8E  20                 	db	32
   802  00FF8F  20                 	db	32
   803  00FF90  20                 	db	32
   804  00FF91  2A                 	db	42
   805  00FF92  3E                 	db	62	;'>'
   806  00FF93  00                 	db	0
   807  00FF94                     STR_23:
   808  00FF94  20                 	db	32
   809  00FF95  20                 	db	32
   810  00FF96  61                 	db	97	;'a'
   811  00FF97  76                 	db	118	;'v'
   812  00FF98  61                 	db	97	;'a'
   813  00FF99  69                 	db	105	;'i'
   814  00FF9A  6C                 	db	108	;'l'
   815  00FF9B  61                 	db	97	;'a'
   816  00FF9C  62                 	db	98	;'b'
   817  00FF9D  6C                 	db	108	;'l'
   818  00FF9E  65                 	db	101	;'e'
   819  00FF9F  20                 	db	32
   820  00FFA0  20                 	db	32
   821  00FFA1  20                 	db	32
   822  00FFA2  2A                 	db	42
   823  00FFA3  3E                 	db	62	;'>'
   824  00FFA4  00                 	db	0
   825  00FFA5                     STR_4:
   826  00FFA5  56                 	db	86	;'V'
   827  00FFA6  3A                 	db	58	;':'
   828  00FFA7  20                 	db	32
   829  00FFA8  25                 	db	37
   830  00FFA9  2E                 	db	46
   831  00FFAA  33                 	db	51	;'3'
   832  00FFAB  66                 	db	102	;'f'
   833  00FFAC  2C                 	db	44
   834  00FFAD  20                 	db	32
   835  00FFAE  4E                 	db	78	;'N'
   836  00FFAF  3A                 	db	58	;':'
   837  00FFB0  20                 	db	32
   838  00FFB1  25                 	db	37
   839  00FFB2  64                 	db	100	;'d'
   840  00FFB3  0A                 	db	10
   841  00FFB4  00                 	db	0
   842  00FFB5                     STR_5:
   843  00FFB5  56                 	db	86	;'V'
   844  00FFB6  5F                 	db	95	;'_'
   845  00FFB7  6D                 	db	109	;'m'
   846  00FFB8  61                 	db	97	;'a'
   847  00FFB9  78                 	db	120	;'x'
   848  00FFBA  3A                 	db	58	;':'
   849  00FFBB  20                 	db	32
   850  00FFBC  25                 	db	37
   851  00FFBD  2E                 	db	46
   852  00FFBE  33                 	db	51	;'3'
   853  00FFBF  66                 	db	102	;'f'
   854  00FFC0  00                 	db	0
   855  00FFC1                     STR_22:
   856  00FFC1  20                 	db	32
   857  00FFC2  72                 	db	114	;'r'
   858  00FFC3  75                 	db	117	;'u'
   859  00FFC4  6E                 	db	110	;'n'
   860  00FFC5  20                 	db	32
   861  00FFC6  6E                 	db	110	;'n'
   862  00FFC7  6F                 	db	111	;'o'
   863  00FFC8  74                 	db	116	;'t'
   864  00FFC9  20                 	db	32
   865  00FFCA  0A                 	db	10
   866  00FFCB  00                 	db	0
   867  00FFCC                     STR_8:
   868  00FFCC  43                 	db	67	;'C'
   869  00FFCD  20                 	db	32
   870  00FFCE  20                 	db	32
   871  00FFCF  6C                 	db	108	;'l'
   872  00FFD0  69                 	db	105	;'i'
   873  00FFD1  6D                 	db	109	;'m'
   874  00FFD2  3A                 	db	58	;':'
   875  00FFD3  20                 	db	32
   876  00FFD4  25                 	db	37
   877  00FFD5  66                 	db	102	;'f'
   878  00FFD6  00                 	db	0
   879  00FFD7                     STR_6:
   880  00FFD7  41                 	db	65	;'A'
   881  00FFD8  41                 	db	65	;'A'
   882  00FFD9  20                 	db	32
   883  00FFDA  6C                 	db	108	;'l'
   884  00FFDB  69                 	db	105	;'i'
   885  00FFDC  6D                 	db	109	;'m'
   886  00FFDD  3A                 	db	58	;':'
   887  00FFDE  20                 	db	32
   888  00FFDF  25                 	db	37
   889  00FFE0  66                 	db	102	;'f'
   890  00FFE1  00                 	db	0
   891  00FFE2                     STR_7:
   892  00FFE2  39                 	db	57	;'9'
   893  00FFE3  56                 	db	86	;'V'
   894  00FFE4  20                 	db	32
   895  00FFE5  6C                 	db	108	;'l'
   896  00FFE6  69                 	db	105	;'i'
   897  00FFE7  6D                 	db	109	;'m'
   898  00FFE8  3A                 	db	58	;':'
   899  00FFE9  20                 	db	32
   900  00FFEA  25                 	db	37
   901  00FFEB  66                 	db	102	;'f'
   902  00FFEC  00                 	db	0
   903  00FFED  25                 	db	37
   904  00FFEE  64                 	db	100	;'d'
   905  00FFEF  2C                 	db	44
   906  00FFF0  20                 	db	32
   907  00FFF1  25                 	db	37
   908  00FFF2  30                 	db	48	;'0'
   909  00FFF3  32                 	db	50	;'2'
   910  00FFF4  78                 	db	120	;'x'
   911  00FFF5  00                 	db	0
   912  00FFF6  74                 	db	116	;'t'
   913  00FFF7  31                 	db	49	;'1'
   914  00FFF8  3A                 	db	58	;':'
   915  00FFF9  20                 	db	32
   916  00FFFA  25                 	db	37
   917  00FFFB  78                 	db	120	;'x'
   918  00FFFC  20                 	db	32
   919  00FFFD  00                 	db	0
   920                           
   921                           ; #config settings
   922  00FFFE  00                 	db	0	; dummy byte at the end
   923  0000                     
   924                           	psect	cinit
   925  003C46                     __pcinit:
   926                           	opt stack 0
   927  003C46                     start_initialization:
   928                           	opt stack 0
   929  003C46                     __initialization:
   930                           	opt stack 0
   931                           
   932                           ; Initialize objects allocated to BANK1 (2 bytes)
   933                           ; load TBLPTR registers with __pidataBANK1
   934  003C46  0E18               	movlw	low __pidataBANK1
   935  003C48  6EF6               	movwf	tblptrl,c
   936  003C4A  0E46               	movlw	high __pidataBANK1
   937  003C4C  6EF7               	movwf	tblptrh,c
   938  003C4E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   939  003C50  6EF8               	movwf	tblptru,c
   940  003C52  0009               	tblrd		*+	;fetch initializer
   941  003C54  CFF5 F157          	movff	tablat,__pdataBANK1
   942  003C58  0009               	tblrd		*+	;fetch initializer
   943  003C5A  CFF5 F158          	movff	tablat,__pdataBANK1+1
   944                           
   945                           ; Initialize objects allocated to BANK0 (9 bytes)
   946                           ; load TBLPTR registers with __pidataBANK0
   947  003C5E  0EE6               	movlw	low __pidataBANK0
   948  003C60  6EF6               	movwf	tblptrl,c
   949  003C62  0E45               	movlw	high __pidataBANK0
   950  003C64  6EF7               	movwf	tblptrh,c
   951  003C66  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   952  003C68  6EF8               	movwf	tblptru,c
   953  003C6A  EE00  F0F5         	lfsr	0,__pdataBANK0
   954  003C6E  EE10 F009          	lfsr	1,9
   955  003C72                     copy_data0:
   956  003C72  0009               	tblrd		*+
   957  003C74  CFF5 FFEE          	movff	tablat,postinc0
   958  003C78  50E5               	movf	postdec1,w,c
   959  003C7A  50E1               	movf	fsr1l,w,c
   960  003C7C  E1FA               	bnz	copy_data0
   961                           
   962                           ; Initialize objects allocated to COMRAM (14 bytes)
   963                           ; load TBLPTR registers with __pidataCOMRAM
   964  003C7E  0EC2               	movlw	low __pidataCOMRAM
   965  003C80  6EF6               	movwf	tblptrl,c
   966  003C82  0E45               	movlw	high __pidataCOMRAM
   967  003C84  6EF7               	movwf	tblptrh,c
   968  003C86  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   969  003C88  6EF8               	movwf	tblptru,c
   970  003C8A  EE00  F04D         	lfsr	0,__pdataCOMRAM
   971  003C8E  EE10 F00E          	lfsr	1,14
   972  003C92                     copy_data1:
   973  003C92  0009               	tblrd		*+
   974  003C94  CFF5 FFEE          	movff	tablat,postinc0
   975  003C98  50E5               	movf	postdec1,w,c
   976  003C9A  50E1               	movf	fsr1l,w,c
   977  003C9C  E1FA               	bnz	copy_data1
   978                           
   979                           ; Clear objects allocated to BANK1 (24 bytes)
   980  003C9E  EE01  F03F         	lfsr	0,__pbssBANK1
   981  003CA2  0E18               	movlw	24
   982  003CA4                     clear_0:
   983  003CA4  6AEE               	clrf	postinc0,c
   984  003CA6  06E8               	decf	wreg,f,c
   985  003CA8  E1FD               	bnz	clear_0
   986                           
   987                           ; Clear objects allocated to BANK0 (2 bytes)
   988  003CAA  0100               	movlb	0
   989  003CAC  6BFF               	clrf	(__pbssBANK0+1)& (0+255),b
   990  003CAE  6BFE               	clrf	__pbssBANK0& (0+255),b
   991                           
   992                           ; Clear objects allocated to COMRAM (19 bytes)
   993  003CB0  EE00  F03A         	lfsr	0,__pbssCOMRAM
   994  003CB4  0E13               	movlw	19
   995  003CB6                     clear_1:
   996  003CB6  6AEE               	clrf	postinc0,c
   997  003CB8  06E8               	decf	wreg,f,c
   998  003CBA  E1FD               	bnz	clear_1
   999  003CBC                     end_of_initialization:
  1000                           	opt stack 0
  1001  003CBC                     __end_of__initialization:
  1002                           	opt stack 0
  1003  003CBC  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1004  003CBE  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1005  003CC0  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1006  003CC2  6EF8               	movwf	tblptru,c
  1007  003CC4  0100               	movlb	0
  1008  003CC6  EF7A  F00A         	goto	_main	;jump to C main() function
  1009                           tblptru	equ	0xFF8
  1010                           tblptrh	equ	0xFF7
  1011                           tblptrl	equ	0xFF6
  1012                           tablat	equ	0xFF5
  1013                           postinc0	equ	0xFEE
  1014                           wreg	equ	0xFE8
  1015                           postdec1	equ	0xFE5
  1016                           fsr1l	equ	0xFE1
  1017                           
  1018                           	psect	bssCOMRAM
  1019  00003A                     __pbssCOMRAM:
  1020                           	opt stack 0
  1021  00003A                     _servos:
  1022                           	opt stack 0
  1023  00003A                     	ds	8
  1024  000042                     _padPin3:
  1025                           	opt stack 0
  1026  000042                     	ds	4
  1027  000046                     _count:
  1028                           	opt stack 0
  1029  000046                     	ds	2
  1030  000048                     _curr:
  1031                           	opt stack 0
  1032  000048                     	ds	2
  1033  00004A                     _prevTime:
  1034                           	opt stack 0
  1035  00004A                     	ds	2
  1036  00004C                     _lastKey:
  1037                           	opt stack 0
  1038  00004C                     	ds	1
  1039                           tblptru	equ	0xFF8
  1040                           tblptrh	equ	0xFF7
  1041                           tblptrl	equ	0xFF6
  1042                           tablat	equ	0xFF5
  1043                           postinc0	equ	0xFEE
  1044                           wreg	equ	0xFE8
  1045                           postdec1	equ	0xFE5
  1046                           fsr1l	equ	0xFE1
  1047                           
  1048                           	psect	dataCOMRAM
  1049  00004D                     __pdataCOMRAM:
  1050                           	opt stack 0
  1051  00004D                     _angle:
  1052                           	opt stack 0
  1053  00004D                     	ds	2
  1054  00004F                     _AA_float:
  1055                           	opt stack 0
  1056  00004F                     	ds	4
  1057  000053                     _padPin1:
  1058                           	opt stack 0
  1059  000053                     	ds	4
  1060  000057                     _padPin2:
  1061                           	opt stack 0
  1062  000057                     	ds	4
  1063                           tblptru	equ	0xFF8
  1064                           tblptrh	equ	0xFF7
  1065                           tblptrl	equ	0xFF6
  1066                           tablat	equ	0xFF5
  1067                           postinc0	equ	0xFEE
  1068                           wreg	equ	0xFE8
  1069                           postdec1	equ	0xFE5
  1070                           fsr1l	equ	0xFE1
  1071                           
  1072                           	psect	bssBANK0
  1073  0000FE                     __pbssBANK0:
  1074                           	opt stack 0
  1075  0000FE                     _n:
  1076                           	opt stack 0
  1077  0000FE                     	ds	2
  1078                           tblptru	equ	0xFF8
  1079                           tblptrh	equ	0xFF7
  1080                           tblptrl	equ	0xFF6
  1081                           tablat	equ	0xFF5
  1082                           postinc0	equ	0xFEE
  1083                           wreg	equ	0xFE8
  1084                           postdec1	equ	0xFE5
  1085                           fsr1l	equ	0xFE1
  1086                           
  1087                           	psect	dataBANK0
  1088  0000F5                     __pdataBANK0:
  1089                           	opt stack 0
  1090  0000F5                     _V_LIM_9V:
  1091                           	opt stack 0
  1092  0000F5                     	ds	3
  1093  0000F8                     _V_LIM_AA:
  1094                           	opt stack 0
  1095  0000F8                     	ds	3
  1096  0000FB                     _V_LIM_C:
  1097                           	opt stack 0
  1098  0000FB                     	ds	3
  1099                           tblptru	equ	0xFF8
  1100                           tblptrh	equ	0xFF7
  1101                           tblptrl	equ	0xFF6
  1102                           tablat	equ	0xFF5
  1103                           postinc0	equ	0xFEE
  1104                           wreg	equ	0xFE8
  1105                           postdec1	equ	0xFE5
  1106                           fsr1l	equ	0xFE1
  1107                           
  1108                           	psect	bssBANK1
  1109  00013F                     __pbssBANK1:
  1110                           	opt stack 0
  1111  00013F                     _pulse:
  1112                           	opt stack 0
  1113  00013F                     	ds	8
  1114  000147                     _time:
  1115                           	opt stack 0
  1116  000147                     	ds	4
  1117  00014B                     _batteryDetected:
  1118                           	opt stack 0
  1119  00014B                     	ds	2
  1120  00014D                     _n_9V:
  1121                           	opt stack 0
  1122  00014D                     	ds	2
  1123  00014F                     _n_AA:
  1124                           	opt stack 0
  1125  00014F                     	ds	2
  1126  000151                     _n_C:
  1127                           	opt stack 0
  1128  000151                     	ds	2
  1129  000153                     _n_OTHER:
  1130                           	opt stack 0
  1131  000153                     	ds	2
  1132  000155                     _terminate:
  1133                           	opt stack 0
  1134  000155                     	ds	2
  1135                           tblptru	equ	0xFF8
  1136                           tblptrh	equ	0xFF7
  1137                           tblptrl	equ	0xFF6
  1138                           tablat	equ	0xFF5
  1139                           postinc0	equ	0xFEE
  1140                           wreg	equ	0xFE8
  1141                           postdec1	equ	0xFE5
  1142                           fsr1l	equ	0xFE1
  1143                           
  1144                           	psect	dataBANK1
  1145  000157                     __pdataBANK1:
  1146                           	opt stack 0
  1147  000157                     _stoppingTime:
  1148                           	opt stack 0
  1149  000157                     	ds	2
  1150                           tblptru	equ	0xFF8
  1151                           tblptrh	equ	0xFF7
  1152                           tblptrl	equ	0xFF6
  1153                           tablat	equ	0xFF5
  1154                           postinc0	equ	0xFEE
  1155                           wreg	equ	0xFE8
  1156                           postdec1	equ	0xFE5
  1157                           fsr1l	equ	0xFE1
  1158                           
  1159                           	psect	cstackBANK1
  1160  000100                     __pcstackBANK1:
  1161                           	opt stack 0
  1162  000100                     showDateTime@sec:
  1163                           	opt stack 0
  1164  000100                     _sortBattery$1418:
  1165                           	opt stack 0
  1166  000100                     _showRunTime$1420:
  1167                           	opt stack 0
  1168                           
  1169                           ; 4 bytes @ 0x0
  1170  000100                     	ds	2
  1171  000102                     showDateTime@min:
  1172                           	opt stack 0
  1173  000102                     sortBattery@V_float:
  1174                           	opt stack 0
  1175                           
  1176                           ; 3 bytes @ 0x2
  1177  000102                     	ds	2
  1178  000104                     showDateTime@hour:
  1179                           	opt stack 0
  1180  000104                     showRunTime@t1:
  1181                           	opt stack 0
  1182                           
  1183                           ; 2 bytes @ 0x4
  1184  000104                     	ds	1
  1185  000105                     sortBattery@signal:
  1186                           	opt stack 0
  1187                           
  1188                           ; 2 bytes @ 0x5
  1189  000105                     	ds	1
  1190  000106                     showDateTime@day:
  1191                           	opt stack 0
  1192  000106                     showRunTime@t2:
  1193                           	opt stack 0
  1194                           
  1195                           ; 2 bytes @ 0x6
  1196  000106                     	ds	1
  1197  000107                     sortBattery@V_max:
  1198                           	opt stack 0
  1199                           
  1200                           ; 3 bytes @ 0x7
  1201  000107                     	ds	1
  1202  000108                     showDateTime@mon:
  1203                           	opt stack 0
  1204  000108                     showRunTime@time:
  1205                           	opt stack 0
  1206                           
  1207                           ; 4 bytes @ 0x8
  1208  000108                     	ds	2
  1209  00010A                     sortBattery@targetAngle:
  1210                           	opt stack 0
  1211  00010A                     showDateTime@year:
  1212                           	opt stack 0
  1213                           
  1214                           ; 2 bytes @ 0xA
  1215  00010A                     	ds	2
  1216  00010C                     showDateTime@t:
  1217                           	opt stack 0
  1218  00010C                     sortBattery@V_sum:
  1219                           	opt stack 0
  1220                           
  1221                           ; 3 bytes @ 0xC
  1222  00010C                     	ds	2
  1223  00010E                     ??_showInterface:
  1224                           
  1225                           ; 1 bytes @ 0xE
  1226  00010E                     	ds	1
  1227  00010F                     sortBattery@pos_v_counter:
  1228                           	opt stack 0
  1229                           
  1230                           ; 2 bytes @ 0xF
  1231  00010F                     	ds	1
  1232  000110                     showInterface@n:
  1233                           	opt stack 0
  1234                           
  1235                           ; 2 bytes @ 0x10
  1236  000110                     	ds	1
  1237  000111                     sortBattery@V_245:
  1238                           	opt stack 0
  1239                           
  1240                           ; 3 bytes @ 0x11
  1241  000111                     	ds	1
  1242  000112                     showInterface@run:
  1243                           	opt stack 0
  1244                           
  1245                           ; 2 bytes @ 0x12
  1246  000112                     	ds	2
  1247  000114                     showInterface@key:
  1248                           	opt stack 0
  1249  000114                     sortBattery@i:
  1250                           	opt stack 0
  1251                           
  1252                           ; 3 bytes @ 0x14
  1253  000114                     	ds	3
  1254  000117                     sortBattery@V:
  1255                           	opt stack 0
  1256                           
  1257                           ; 3 bytes @ 0x17
  1258  000117                     	ds	3
  1259  00011A                     ??_main:
  1260                           
  1261                           ; 1 bytes @ 0x1A
  1262  00011A                     	ds	13
  1263  000127                     _main$1417:
  1264                           	opt stack 0
  1265                           
  1266                           ; 4 bytes @ 0x27
  1267  000127                     	ds	4
  1268  00012B                     main@cylinderStart:
  1269                           	opt stack 0
  1270                           
  1271                           ; 2 bytes @ 0x2B
  1272  00012B                     	ds	2
  1273  00012D                     main@run:
  1274                           	opt stack 0
  1275                           
  1276                           ; 14 bytes @ 0x2D
  1277  00012D                     	ds	14
  1278  00013B                     main@duration:
  1279                           	opt stack 0
  1280                           
  1281                           ; 2 bytes @ 0x3B
  1282  00013B                     	ds	2
  1283  00013D                     main@lastBatteryTime:
  1284                           	opt stack 0
  1285                           
  1286                           ; 2 bytes @ 0x3D
  1287  00013D                     	ds	2
  1288                           tblptru	equ	0xFF8
  1289                           tblptrh	equ	0xFF7
  1290                           tblptrl	equ	0xFF6
  1291                           tablat	equ	0xFF5
  1292                           postinc0	equ	0xFEE
  1293                           wreg	equ	0xFE8
  1294                           postdec1	equ	0xFE5
  1295                           fsr1l	equ	0xFE1
  1296                           
  1297                           	psect	cstackBANK0
  1298  000080                     __pcstackBANK0:
  1299                           	opt stack 0
  1300  000080                     ?_eepromRead:
  1301                           	opt stack 0
  1302  000080                     ?___ftmul:
  1303                           	opt stack 0
  1304  000080                     ___aldiv@counter:
  1305                           	opt stack 0
  1306  000080                     ___llmod@counter:
  1307                           	opt stack 0
  1308  000080                     ___ftmul@f1:
  1309                           	opt stack 0
  1310  000080                     eepromRead@address:
  1311                           	opt stack 0
  1312  000080                     getTime@time:
  1313                           	opt stack 0
  1314                           
  1315                           ; 14 bytes @ 0x0
  1316  000080                     	ds	1
  1317  000081                     ___aldiv@sign:
  1318                           	opt stack 0
  1319                           
  1320                           ; 1 bytes @ 0x1
  1321  000081                     	ds	1
  1322  000082                     ___aldiv@quotient:
  1323                           	opt stack 0
  1324                           
  1325                           ; 4 bytes @ 0x2
  1326  000082                     	ds	1
  1327  000083                     ___ftmul@f2:
  1328                           	opt stack 0
  1329                           
  1330                           ; 3 bytes @ 0x3
  1331  000083                     	ds	1
  1332  000084                     ?_readPastRun:
  1333                           	opt stack 0
  1334  000084                     readPastRun@run:
  1335                           	opt stack 0
  1336  000084                     eepromWrite@data:
  1337                           	opt stack 0
  1338                           
  1339                           ; 2 bytes @ 0x4
  1340  000084                     	ds	2
  1341  000086                     ??___ftmul:
  1342  000086                     eepromWrite@address:
  1343                           	opt stack 0
  1344  000086                     readPastRun@data:
  1345                           	opt stack 0
  1346                           
  1347                           ; 14 bytes @ 0x6
  1348  000086                     	ds	3
  1349  000089                     ___ftmul@exp:
  1350                           	opt stack 0
  1351                           
  1352                           ; 1 bytes @ 0x9
  1353  000089                     	ds	1
  1354  00008A                     eepromWrite@ien:
  1355                           	opt stack 0
  1356  00008A                     ___ftmul@f3_as_product:
  1357                           	opt stack 0
  1358                           
  1359                           ; 3 bytes @ 0xA
  1360  00008A                     	ds	2
  1361  00008C                     saveNewRun@data:
  1362                           	opt stack 0
  1363                           
  1364                           ; 2 bytes @ 0xC
  1365  00008C                     	ds	1
  1366  00008D                     ___ftmul@cntr:
  1367                           	opt stack 0
  1368                           
  1369                           ; 1 bytes @ 0xD
  1370  00008D                     	ds	1
  1371  00008E                     getTime@i:
  1372                           	opt stack 0
  1373  00008E                     ___ftmul@sign:
  1374                           	opt stack 0
  1375  00008E                     saveNewRun@n:
  1376                           	opt stack 0
  1377                           
  1378                           ; 2 bytes @ 0xE
  1379  00008E                     	ds	1
  1380  00008F                     ?___ftdiv:
  1381                           	opt stack 0
  1382  00008F                     ?_fround:
  1383                           	opt stack 0
  1384  00008F                     ?_scale:
  1385                           	opt stack 0
  1386  00008F                     ___ftdiv@f1:
  1387                           	opt stack 0
  1388                           
  1389                           ; 3 bytes @ 0xF
  1390  00008F                     	ds	1
  1391  000090                     saveNewRun@i:
  1392                           	opt stack 0
  1393                           
  1394                           ; 2 bytes @ 0x10
  1395  000090                     	ds	2
  1396  000092                     ___ftdiv@f2:
  1397                           	opt stack 0
  1398  000092                     _fround$1422:
  1399                           	opt stack 0
  1400  000092                     _scale$1423:
  1401                           	opt stack 0
  1402                           
  1403                           ; 3 bytes @ 0x12
  1404  000092                     	ds	2
  1405  000094                     readPastRun@i:
  1406                           	opt stack 0
  1407                           
  1408                           ; 2 bytes @ 0x14
  1409  000094                     	ds	1
  1410  000095                     ??___ftdiv:
  1411  000095                     scale@scl:
  1412                           	opt stack 0
  1413  000095                     _fround$1421:
  1414                           	opt stack 0
  1415                           
  1416                           ; 3 bytes @ 0x15
  1417  000095                     	ds	3
  1418  000098                     fround@prec:
  1419                           	opt stack 0
  1420  000098                     ___ftdiv@cntr:
  1421                           	opt stack 0
  1422                           
  1423                           ; 1 bytes @ 0x18
  1424  000098                     	ds	1
  1425  000099                     ___ftdiv@f3:
  1426                           	opt stack 0
  1427                           
  1428                           ; 3 bytes @ 0x19
  1429  000099                     	ds	3
  1430  00009C                     ___ftdiv@exp:
  1431                           	opt stack 0
  1432                           
  1433                           ; 1 bytes @ 0x1C
  1434  00009C                     	ds	1
  1435  00009D                     ___ftdiv@sign:
  1436                           	opt stack 0
  1437                           
  1438                           ; 1 bytes @ 0x1D
  1439  00009D                     	ds	1
  1440  00009E                     ?___ftadd:
  1441                           	opt stack 0
  1442  00009E                     ___ftadd@f1:
  1443                           	opt stack 0
  1444                           
  1445                           ; 3 bytes @ 0x1E
  1446  00009E                     	ds	3
  1447  0000A1                     ___ftadd@f2:
  1448                           	opt stack 0
  1449                           
  1450                           ; 3 bytes @ 0x21
  1451  0000A1                     	ds	3
  1452  0000A4                     ??___ftadd:
  1453                           
  1454                           ; 1 bytes @ 0x24
  1455  0000A4                     	ds	3
  1456  0000A7                     ___ftadd@sign:
  1457                           	opt stack 0
  1458                           
  1459                           ; 1 bytes @ 0x27
  1460  0000A7                     	ds	1
  1461  0000A8                     ___ftadd@exp2:
  1462                           	opt stack 0
  1463                           
  1464                           ; 1 bytes @ 0x28
  1465  0000A8                     	ds	1
  1466  0000A9                     ___ftadd@exp1:
  1467                           	opt stack 0
  1468                           
  1469                           ; 1 bytes @ 0x29
  1470  0000A9                     	ds	1
  1471  0000AA                     ?___ftsub:
  1472                           	opt stack 0
  1473  0000AA                     ?___fttol:
  1474                           	opt stack 0
  1475  0000AA                     ___ftsub@f1:
  1476                           	opt stack 0
  1477  0000AA                     ___fttol@f1:
  1478                           	opt stack 0
  1479                           
  1480                           ; 3 bytes @ 0x2A
  1481  0000AA                     	ds	3
  1482  0000AD                     ___ftsub@f2:
  1483                           	opt stack 0
  1484                           
  1485                           ; 3 bytes @ 0x2D
  1486  0000AD                     	ds	1
  1487  0000AE                     ??___fttol:
  1488                           
  1489                           ; 1 bytes @ 0x2E
  1490  0000AE                     	ds	5
  1491  0000B3                     ___fttol@sign1:
  1492                           	opt stack 0
  1493                           
  1494                           ; 1 bytes @ 0x33
  1495  0000B3                     	ds	1
  1496  0000B4                     ___fttol@lval:
  1497                           	opt stack 0
  1498                           
  1499                           ; 4 bytes @ 0x34
  1500  0000B4                     	ds	4
  1501  0000B8                     ___fttol@exp1:
  1502                           	opt stack 0
  1503                           
  1504                           ; 1 bytes @ 0x38
  1505  0000B8                     	ds	1
  1506  0000B9                     ?_printf:
  1507                           	opt stack 0
  1508  0000B9                     ?_angleToPulse:
  1509                           	opt stack 0
  1510  0000B9                     angleToPulse@angle:
  1511                           	opt stack 0
  1512  0000B9                     printf@f:
  1513                           	opt stack 0
  1514                           
  1515                           ; 2 bytes @ 0x39
  1516  0000B9                     	ds	4
  1517  0000BD                     ??_angleToPulse:
  1518                           
  1519                           ; 1 bytes @ 0x3D
  1520  0000BD                     	ds	4
  1521  0000C1                     angleToPulse@offset:
  1522                           	opt stack 0
  1523                           
  1524                           ; 4 bytes @ 0x41
  1525  0000C1                     	ds	4
  1526  0000C5                     angleToPulse@a180:
  1527                           	opt stack 0
  1528                           
  1529                           ; 4 bytes @ 0x45
  1530  0000C5                     	ds	2
  1531  0000C7                     ??_printf:
  1532                           
  1533                           ; 1 bytes @ 0x47
  1534  0000C7                     	ds	2
  1535  0000C9                     _angleToPulse$1419:
  1536                           	opt stack 0
  1537                           
  1538                           ; 3 bytes @ 0x49
  1539  0000C9                     	ds	3
  1540  0000CC                     angleToPulse@a000:
  1541                           	opt stack 0
  1542                           
  1543                           ; 4 bytes @ 0x4C
  1544  0000CC                     	ds	1
  1545  0000CD                     _printf$1424:
  1546                           	opt stack 0
  1547                           
  1548                           ; 3 bytes @ 0x4D
  1549  0000CD                     	ds	3
  1550  0000D0                     printf@idx:
  1551                           	opt stack 0
  1552  0000D0                     setAngle@motor:
  1553                           	opt stack 0
  1554                           
  1555                           ; 2 bytes @ 0x50
  1556  0000D0                     	ds	1
  1557  0000D1                     printf@cp:
  1558                           	opt stack 0
  1559                           
  1560                           ; 2 bytes @ 0x51
  1561  0000D1                     	ds	1
  1562  0000D2                     setAngle@angle:
  1563                           	opt stack 0
  1564                           
  1565                           ; 2 bytes @ 0x52
  1566  0000D2                     	ds	1
  1567  0000D3                     printf@len:
  1568                           	opt stack 0
  1569                           
  1570                           ; 2 bytes @ 0x53
  1571  0000D3                     	ds	1
  1572  0000D4                     ??_setAngle:
  1573                           
  1574                           ; 1 bytes @ 0x54
  1575  0000D4                     	ds	1
  1576  0000D5                     printf@ap:
  1577                           	opt stack 0
  1578                           
  1579                           ; 2 bytes @ 0x55
  1580  0000D5                     	ds	1
  1581  0000D6                     setAngle@period:
  1582                           	opt stack 0
  1583                           
  1584                           ; 2 bytes @ 0x56
  1585  0000D6                     	ds	1
  1586  0000D7                     printf@tmpval:
  1587                           	opt stack 0
  1588                           
  1589                           ; 4 bytes @ 0x57
  1590  0000D7                     	ds	1
  1591  0000D8                     setAngle@i:
  1592                           	opt stack 0
  1593                           
  1594                           ; 2 bytes @ 0x58
  1595  0000D8                     	ds	2
  1596  0000DA                     initServo@motor:
  1597                           	opt stack 0
  1598                           
  1599                           ; 2 bytes @ 0x5A
  1600  0000DA                     	ds	1
  1601  0000DB                     printf@exp:
  1602                           	opt stack 0
  1603                           
  1604                           ; 2 bytes @ 0x5B
  1605  0000DB                     	ds	1
  1606  0000DC                     initServo@angle:
  1607                           	opt stack 0
  1608                           
  1609                           ; 2 bytes @ 0x5C
  1610  0000DC                     	ds	1
  1611  0000DD                     printf@fval:
  1612                           	opt stack 0
  1613                           
  1614                           ; 3 bytes @ 0x5D
  1615  0000DD                     	ds	1
  1616  0000DE                     ??_initServo:
  1617                           
  1618                           ; 1 bytes @ 0x5E
  1619  0000DE                     	ds	2
  1620  0000E0                     printf@val:
  1621                           	opt stack 0
  1622                           
  1623                           ; 4 bytes @ 0x60
  1624  0000E0                     	ds	2
  1625  0000E2                     initServo@i:
  1626                           	opt stack 0
  1627                           
  1628                           ; 2 bytes @ 0x62
  1629  0000E2                     	ds	2
  1630  0000E4                     printf@width:
  1631                           	opt stack 0
  1632                           
  1633                           ; 2 bytes @ 0x64
  1634  0000E4                     	ds	2
  1635  0000E6                     printf@flag:
  1636                           	opt stack 0
  1637                           
  1638                           ; 2 bytes @ 0x66
  1639  0000E6                     	ds	2
  1640  0000E8                     printf@prec:
  1641                           	opt stack 0
  1642                           
  1643                           ; 2 bytes @ 0x68
  1644  0000E8                     	ds	2
  1645  0000EA                     printf@c:
  1646                           	opt stack 0
  1647                           
  1648                           ; 1 bytes @ 0x6A
  1649  0000EA                     	ds	1
  1650  0000EB                     ??_sortBattery:
  1651  0000EB                     ??_showDateTime:
  1652  0000EB                     showMainMenu@k:
  1653                           	opt stack 0
  1654  0000EB                     showRunSelect@k:
  1655                           	opt stack 0
  1656  0000EB                     showRunMenu@key:
  1657                           	opt stack 0
  1658  0000EB                     showRunTime@run:
  1659                           	opt stack 0
  1660  0000EB                     showRunStats@run:
  1661                           	opt stack 0
  1662                           
  1663                           ; 2 bytes @ 0x6B
  1664  0000EB                     	ds	1
  1665  0000EC                     showRunMenu@k:
  1666                           	opt stack 0
  1667                           
  1668                           ; 1 bytes @ 0x6C
  1669  0000EC                     	ds	1
  1670  0000ED                     ??_showRunTime:
  1671  0000ED                     showRunStats@n_AA:
  1672                           	opt stack 0
  1673                           
  1674                           ; 2 bytes @ 0x6D
  1675  0000ED                     	ds	2
  1676  0000EF                     showRunStats@n_9V:
  1677                           	opt stack 0
  1678                           
  1679                           ; 2 bytes @ 0x6F
  1680  0000EF                     	ds	2
  1681  0000F1                     showRunStats@n_C:
  1682                           	opt stack 0
  1683                           
  1684                           ; 2 bytes @ 0x71
  1685  0000F1                     	ds	2
  1686  0000F3                     showRunStats@n_OTHER:
  1687                           	opt stack 0
  1688                           
  1689                           ; 2 bytes @ 0x73
  1690  0000F3                     	ds	2
  1691                           tblptru	equ	0xFF8
  1692                           tblptrh	equ	0xFF7
  1693                           tblptrl	equ	0xFF6
  1694                           tablat	equ	0xFF5
  1695                           postinc0	equ	0xFEE
  1696                           wreg	equ	0xFE8
  1697                           postdec1	equ	0xFE5
  1698                           fsr1l	equ	0xFE1
  1699                           
  1700                           	psect	cstackCOMRAM
  1701  000001                     __pcstackCOMRAM:
  1702                           	opt stack 0
  1703  000001                     ?i2___awmod:
  1704                           	opt stack 0
  1705  000001                     keyPressedInterruptService@key:
  1706                           	opt stack 0
  1707  000001                     i2___awmod@dividend:
  1708                           	opt stack 0
  1709                           
  1710                           ; 2 bytes @ 0x0
  1711  000001                     	ds	2
  1712  000003                     i2___awmod@divisor:
  1713                           	opt stack 0
  1714                           
  1715                           ; 2 bytes @ 0x2
  1716  000003                     	ds	2
  1717  000005                     i2___awmod@counter:
  1718                           	opt stack 0
  1719                           
  1720                           ; 1 bytes @ 0x4
  1721  000005                     	ds	1
  1722  000006                     i2___awmod@sign:
  1723                           	opt stack 0
  1724                           
  1725                           ; 1 bytes @ 0x5
  1726  000006                     	ds	1
  1727  000007                     i2digitalWrite@pin:
  1728                           	opt stack 0
  1729  000007                     i2startTimer@timer:
  1730                           	opt stack 0
  1731                           
  1732                           ; 2 bytes @ 0x6
  1733  000007                     	ds	2
  1734  000009                     i2digitalWrite@val:
  1735                           	opt stack 0
  1736  000009                     i2startTimer@val:
  1737                           	opt stack 0
  1738                           
  1739                           ; 4 bytes @ 0x8
  1740  000009                     	ds	2
  1741  00000B                     ??i2_digitalWrite:
  1742                           
  1743                           ; 1 bytes @ 0xA
  1744  00000B                     	ds	2
  1745  00000D                     ??i2_startTimer:
  1746                           
  1747                           ; 1 bytes @ 0xC
  1748  00000D                     	ds	3
  1749  000010                     i2digitalWrite@p:
  1750                           	opt stack 0
  1751                           
  1752                           ; 2 bytes @ 0xF
  1753  000010                     	ds	2
  1754  000012                     ??_servoInterruptService:
  1755                           
  1756                           ; 1 bytes @ 0x11
  1757  000012                     	ds	4
  1758  000016                     ??_service:
  1759                           
  1760                           ; 1 bytes @ 0x15
  1761  000016                     	ds	14
  1762  000024                     service@key:
  1763                           	opt stack 0
  1764                           
  1765                           ; 1 bytes @ 0x23
  1766  000024                     	ds	1
  1767  000025                     ??_isdigit:
  1768  000025                     ??_I2C_Master_Wait:
  1769  000025                     ?_digitalRead:
  1770                           	opt stack 0
  1771  000025                     ?___awmod:
  1772                           	opt stack 0
  1773  000025                     ?___ftpack:
  1774                           	opt stack 0
  1775  000025                     ?___ftneg:
  1776                           	opt stack 0
  1777  000025                     ?_analogRead:
  1778                           	opt stack 0
  1779  000025                     ?__tdiv_to_l_:
  1780                           	opt stack 0
  1781  000025                     ?__div_to_l_:
  1782                           	opt stack 0
  1783  000025                     ?___almod:
  1784                           	opt stack 0
  1785  000025                     ?___lldiv:
  1786                           	opt stack 0
  1787  000025                     lcdNibble@temp:
  1788                           	opt stack 0
  1789  000025                     readKeypad@key:
  1790                           	opt stack 0
  1791  000025                     keyPressed@key:
  1792                           	opt stack 0
  1793  000025                     digitalRead@pin:
  1794                           	opt stack 0
  1795  000025                     digitalWrite@pin:
  1796                           	opt stack 0
  1797  000025                     analogRead@channel:
  1798                           	opt stack 0
  1799  000025                     initTimer@timer:
  1800                           	opt stack 0
  1801  000025                     startTimer@timer:
  1802                           	opt stack 0
  1803  000025                     ___awmod@dividend:
  1804                           	opt stack 0
  1805  000025                     __div_to_l_@f1:
  1806                           	opt stack 0
  1807  000025                     ___ftpack@arg:
  1808                           	opt stack 0
  1809  000025                     __tdiv_to_l_@f1:
  1810                           	opt stack 0
  1811  000025                     ___ftneg@f1:
  1812                           	opt stack 0
  1813  000025                     ___almod@dividend:
  1814                           	opt stack 0
  1815  000025                     ___lldiv@dividend:
  1816                           	opt stack 0
  1817                           
  1818                           ; 4 bytes @ 0x24
  1819  000025                     	ds	1
  1820  000026                     lcdNibble@data:
  1821                           	opt stack 0
  1822  000026                     I2C_Master_Read@a:
  1823                           	opt stack 0
  1824  000026                     _isdigit$1053:
  1825                           	opt stack 0
  1826  000026                     I2C_Master_Write@d:
  1827                           	opt stack 0
  1828                           
  1829                           ; 2 bytes @ 0x25
  1830  000026                     	ds	1
  1831  000027                     ??_initTimer:
  1832  000027                     ??_digitalRead:
  1833  000027                     ??_lcdInst:
  1834  000027                     I2C_Master_Read@temp:
  1835                           	opt stack 0
  1836  000027                     isdigit@c:
  1837                           	opt stack 0
  1838  000027                     digitalWrite@val:
  1839                           	opt stack 0
  1840  000027                     ___awmod@divisor:
  1841                           	opt stack 0
  1842  000027                     startTimer@val:
  1843                           	opt stack 0
  1844                           
  1845                           ; 4 bytes @ 0x26
  1846  000027                     	ds	1
  1847  000028                     ?_getTime:
  1848                           	opt stack 0
  1849  000028                     lcdInst@data:
  1850                           	opt stack 0
  1851  000028                     ___ftpack@exp:
  1852                           	opt stack 0
  1853  000028                     __div_to_l_@f2:
  1854                           	opt stack 0
  1855  000028                     __tdiv_to_l_@f2:
  1856                           	opt stack 0
  1857                           
  1858                           ; 3 bytes @ 0x27
  1859  000028                     	ds	1
  1860  000029                     ??_initLCD:
  1861  000029                     ??_digitalWrite:
  1862  000029                     ??_analogRead:
  1863  000029                     putch@data:
  1864                           	opt stack 0
  1865  000029                     ___awmod@counter:
  1866                           	opt stack 0
  1867  000029                     ___ftpack@sign:
  1868                           	opt stack 0
  1869  000029                     ___almod@divisor:
  1870                           	opt stack 0
  1871  000029                     ___lldiv@divisor:
  1872                           	opt stack 0
  1873                           
  1874                           ; 4 bytes @ 0x28
  1875  000029                     	ds	1
  1876  00002A                     ??___ftpack:
  1877  00002A                     ??_getTime:
  1878  00002A                     ___awmod@sign:
  1879                           	opt stack 0
  1880                           
  1881                           ; 1 bytes @ 0x29
  1882  00002A                     	ds	1
  1883  00002B                     ??_startTimer:
  1884  00002B                     ??__tdiv_to_l_:
  1885  00002B                     ?___awdiv:
  1886                           	opt stack 0
  1887  00002B                     ___awdiv@dividend:
  1888                           	opt stack 0
  1889  00002B                     __div_to_l_@quot:
  1890                           	opt stack 0
  1891                           
  1892                           ; 4 bytes @ 0x2A
  1893  00002B                     	ds	2
  1894  00002D                     ?___altoft:
  1895                           	opt stack 0
  1896  00002D                     ?___awtoft:
  1897                           	opt stack 0
  1898  00002D                     ?___lltoft:
  1899                           	opt stack 0
  1900  00002D                     ___almod@counter:
  1901                           	opt stack 0
  1902  00002D                     ___awdiv@divisor:
  1903                           	opt stack 0
  1904  00002D                     ___awtoft@c:
  1905                           	opt stack 0
  1906  00002D                     ___altoft@c:
  1907                           	opt stack 0
  1908  00002D                     ___lldiv@quotient:
  1909                           	opt stack 0
  1910  00002D                     ___lltoft@c:
  1911                           	opt stack 0
  1912                           
  1913                           ; 4 bytes @ 0x2C
  1914  00002D                     	ds	1
  1915  00002E                     ___almod@sign:
  1916                           	opt stack 0
  1917  00002E                     digitalWrite@p:
  1918                           	opt stack 0
  1919  00002E                     __tdiv_to_l_@quot:
  1920                           	opt stack 0
  1921                           
  1922                           ; 4 bytes @ 0x2D
  1923  00002E                     	ds	1
  1924  00002F                     ?___aldiv:
  1925                           	opt stack 0
  1926  00002F                     ___awdiv@counter:
  1927                           	opt stack 0
  1928  00002F                     __div_to_l_@cntr:
  1929                           	opt stack 0
  1930  00002F                     ___aldiv@dividend:
  1931                           	opt stack 0
  1932                           
  1933                           ; 4 bytes @ 0x2E
  1934  00002F                     	ds	1
  1935  000030                     ___awdiv@sign:
  1936                           	opt stack 0
  1937  000030                     ___awtoft@sign:
  1938                           	opt stack 0
  1939  000030                     __div_to_l_@exp1:
  1940                           	opt stack 0
  1941                           
  1942                           ; 1 bytes @ 0x2F
  1943  000030                     	ds	1
  1944  000031                     ??___altoft:
  1945  000031                     ??___lltoft:
  1946  000031                     ___lldiv@counter:
  1947                           	opt stack 0
  1948  000031                     ___awdiv@quotient:
  1949                           	opt stack 0
  1950  000031                     ___ftge@ff1:
  1951                           	opt stack 0
  1952                           
  1953                           ; 3 bytes @ 0x30
  1954  000031                     	ds	1
  1955  000032                     ?___llmod:
  1956                           	opt stack 0
  1957  000032                     __tdiv_to_l_@cntr:
  1958                           	opt stack 0
  1959  000032                     I2C_Master_Init@c:
  1960                           	opt stack 0
  1961  000032                     ___llmod@dividend:
  1962                           	opt stack 0
  1963                           
  1964                           ; 4 bytes @ 0x31
  1965  000032                     	ds	1
  1966  000033                     ?___wmul:
  1967                           	opt stack 0
  1968  000033                     __tdiv_to_l_@exp1:
  1969                           	opt stack 0
  1970  000033                     ___wmul@multiplier:
  1971                           	opt stack 0
  1972  000033                     ___aldiv@divisor:
  1973                           	opt stack 0
  1974                           
  1975                           ; 4 bytes @ 0x32
  1976  000033                     	ds	1
  1977  000034                     ___ftge@ff2:
  1978                           	opt stack 0
  1979                           
  1980                           ; 3 bytes @ 0x33
  1981  000034                     	ds	1
  1982  000035                     ___altoft@exp:
  1983                           	opt stack 0
  1984  000035                     ___lltoft@exp:
  1985                           	opt stack 0
  1986  000035                     ___wmul@multiplicand:
  1987                           	opt stack 0
  1988                           
  1989                           ; 2 bytes @ 0x34
  1990  000035                     	ds	1
  1991  000036                     ??_I2C_Master_Init:
  1992  000036                     ___altoft@sign:
  1993                           	opt stack 0
  1994  000036                     ___llmod@divisor:
  1995                           	opt stack 0
  1996                           
  1997                           ; 4 bytes @ 0x35
  1998  000036                     	ds	1
  1999  000037                     ??___ftge:
  2000  000037                     ___wmul@product:
  2001                           	opt stack 0
  2002                           
  2003                           ; 2 bytes @ 0x36
  2004  000037                     	ds	2
  2005  000039                     ??_eepromWrite:
  2006  000039                     
  2007                           ; 1 bytes @ 0x38
  2008  000039                     	ds	1
  2009  00003A                     tblptru	equ	0xFF8
  2010                           tblptrh	equ	0xFF7
  2011                           tblptrl	equ	0xFF6
  2012                           tablat	equ	0xFF5
  2013                           postinc0	equ	0xFEE
  2014                           wreg	equ	0xFE8
  2015                           postdec1	equ	0xFE5
  2016                           fsr1l	equ	0xFE1
  2017                           
  2018                           ; 1 bytes @ 0x39
  2019 ;;
  2020 ;;Main: autosize = 0, tempsize = 13, incstack = 0, save=0
  2021 ;;
  2022 ;; *************** function _main *****************
  2023 ;; Defined at:
  2024 ;;		line 126 in file "main.c"
  2025 ;; Parameters:    Size  Location     Type
  2026 ;;		None
  2027 ;; Auto vars:     Size  Location     Type
  2028 ;;  lastBatteryT    2   61[BANK1 ] int 
  2029 ;;  duration        2   59[BANK1 ] int 
  2030 ;;  cylinderStar    2   43[BANK1 ] int 
  2031 ;;  run            14   45[BANK1 ] int [7]
  2032 ;; Return value:  Size  Location     Type
  2033 ;;                  1    wreg      void 
  2034 ;; Registers used:
  2035 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2036 ;; Tracked objects:
  2037 ;;		On entry : 0/0
  2038 ;;		On exit  : 0/0
  2039 ;;		Unchanged: 0/0
  2040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2042 ;;      Locals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2043 ;;      Temps:          0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2044 ;;      Totals:         0       0      37       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2045 ;;Total ram usage:       37 bytes
  2046 ;; Hardware stack levels required when called:   10
  2047 ;; This function calls:
  2048 ;;		___aldiv
  2049 ;;		___almod
  2050 ;;		___awtoft
  2051 ;;		___ftadd
  2052 ;;		___ftdiv
  2053 ;;		___ftmul
  2054 ;;		___fttol
  2055 ;;		_digitalRead
  2056 ;;		_digitalWrite
  2057 ;;		_initLCD
  2058 ;;		_initServo
  2059 ;;		_initTimer
  2060 ;;		_lcdHome
  2061 ;;		_pinSetup
  2062 ;;		_printf
  2063 ;;		_saveNewRun
  2064 ;;		_setAngle
  2065 ;;		_showInterface
  2066 ;;		_showRunStats
  2067 ;;		_showRunTime
  2068 ;;		_sortBattery
  2069 ;;		_startTimer
  2070 ;; This function is called by:
  2071 ;;		Startup code after reset
  2072 ;; This function uses a non-reentrant model
  2073 ;;
  2074                           
  2075                           	psect	text0
  2076  0014F4                     __ptext0:
  2077                           	opt stack 0
  2078  0014F4                     _main:
  2079                           	opt stack 21
  2080                           
  2081                           ;main.c: 130: pinSetup();
  2082                           
  2083                           ;incstack = 0
  2084  0014F4  ECC2  F021         	call	_pinSetup	;wreg free
  2085                           
  2086                           ;main.c: 131: initLCD();
  2087  0014F8  EC9F  F021         	call	_initLCD	;wreg free
  2088  0014FC                     l7763:
  2089                           
  2090                           ;main.c: 134: showInterface();
  2091  0014FC  ECE1  F01B         	call	_showInterface	;wreg free
  2092                           
  2093                           ;main.c: 137: terminate = 0;
  2094  001500  0E00               	movlw	0
  2095  001502  0101               	movlb	1	; () banked
  2096  001504  6F56               	movwf	(_terminate+1)& (0+255),b
  2097  001506  0E00               	movlw	0
  2098  001508  6F55               	movwf	_terminate& (0+255),b
  2099                           
  2100                           ; BSR set to: 1
  2101                           ;main.c: 138: time = 0;
  2102  00150A  0E00               	movlw	0
  2103  00150C  0101               	movlb	1	; () banked
  2104  00150E  6F47               	movwf	_time& (0+255),b
  2105  001510  0E00               	movlw	0
  2106  001512  6F48               	movwf	(_time+1)& (0+255),b
  2107  001514  0E00               	movlw	0
  2108  001516  6F49               	movwf	(_time+2)& (0+255),b
  2109  001518  0E00               	movlw	0
  2110  00151A  6F4A               	movwf	(_time+3)& (0+255),b
  2111                           
  2112                           ; BSR set to: 1
  2113                           ;main.c: 139: initTimer(1);
  2114  00151C  0E00               	movlw	0
  2115  00151E  6E26               	movwf	initTimer@timer+1,c
  2116  001520  0E01               	movlw	1
  2117  001522  6E25               	movwf	initTimer@timer,c
  2118  001524  EC7A  F021         	call	_initTimer	;wreg free
  2119                           
  2120                           ;main.c: 140: startTimer(1,0);
  2121  001528  0E00               	movlw	0
  2122  00152A  6E26               	movwf	startTimer@timer+1,c
  2123  00152C  0E01               	movlw	1
  2124  00152E  6E25               	movwf	startTimer@timer,c
  2125  001530  0E00               	movlw	0
  2126  001532  6E27               	movwf	startTimer@val,c
  2127  001534  0E00               	movlw	0
  2128  001536  6E28               	movwf	startTimer@val+1,c
  2129  001538  0E00               	movlw	0
  2130  00153A  6E29               	movwf	startTimer@val+2,c
  2131  00153C  0E00               	movlw	0
  2132  00153E  6E2A               	movwf	startTimer@val+3,c
  2133  001540  EC2E  F021         	call	_startTimer	;wreg free
  2134                           
  2135                           ;main.c: 143: digitalWrite(cylinderMotor1, 0);
  2136  001544  0E55               	movlw	low _cylinderMotor1
  2137  001546  6E25               	movwf	digitalWrite@pin,c
  2138  001548  0EFE               	movlw	high _cylinderMotor1
  2139  00154A  6E26               	movwf	digitalWrite@pin+1,c
  2140  00154C  0E00               	movlw	0
  2141  00154E  6E28               	movwf	digitalWrite@val+1,c
  2142  001550  0E00               	movlw	0
  2143  001552  6E27               	movwf	digitalWrite@val,c
  2144  001554  EC97  F018         	call	_digitalWrite	;wreg free
  2145                           
  2146                           ;main.c: 144: digitalWrite(cylinderMotor1, 1);
  2147  001558  0E55               	movlw	low _cylinderMotor1
  2148  00155A  6E25               	movwf	digitalWrite@pin,c
  2149  00155C  0EFE               	movlw	high _cylinderMotor1
  2150  00155E  6E26               	movwf	digitalWrite@pin+1,c
  2151  001560  0E00               	movlw	0
  2152  001562  6E28               	movwf	digitalWrite@val+1,c
  2153  001564  0E01               	movlw	1
  2154  001566  6E27               	movwf	digitalWrite@val,c
  2155  001568  EC97  F018         	call	_digitalWrite	;wreg free
  2156                           
  2157                           ;main.c: 145: initServo(conveyorServo, 130);
  2158  00156C  0E51               	movlw	low _conveyorServo
  2159  00156E  0100               	movlb	0	; () banked
  2160  001570  6FDA               	movwf	initServo@motor& (0+255),b
  2161  001572  0EFE               	movlw	high _conveyorServo
  2162  001574  0100               	movlb	0	; () banked
  2163  001576  6FDB               	movwf	(initServo@motor+1)& (0+255),b
  2164  001578  0E00               	movlw	0
  2165  00157A  0100               	movlb	0	; () banked
  2166  00157C  6FDD               	movwf	(initServo@angle+1)& (0+255),b
  2167  00157E  0E82               	movlw	130
  2168  001580  6FDC               	movwf	initServo@angle& (0+255),b
  2169  001582  EC9F  F019         	call	_initServo	;wreg free
  2170                           
  2171                           ;main.c: 146: initServo(padServo, padAngle_NEUTRAL);
  2172  001586  0E5D               	movlw	low _padServo
  2173  001588  0100               	movlb	0	; () banked
  2174  00158A  6FDA               	movwf	initServo@motor& (0+255),b
  2175  00158C  0EFE               	movlw	high _padServo
  2176  00158E  0100               	movlb	0	; () banked
  2177  001590  6FDB               	movwf	(initServo@motor+1)& (0+255),b
  2178  001592  0E45               	movlw	low _padAngle_NEUTRAL
  2179  001594  6EF6               	movwf	tblptrl,c
  2180  001596                     	if	1	;There is more than 1 active tblptr byte
  2181  001596  0EFE               	movlw	high _padAngle_NEUTRAL
  2182  001598  6EF7               	movwf	tblptrh,c
  2183  00159A                     	endif
  2184  00159A                     	if	0	;There are less than 3 active tblptr bytes
  2185  00159A                     	endif
  2186  00159A  0009               	tblrd		*+
  2187  00159C  CFF5 F0DC          	movff	tablat,initServo@angle
  2188  0015A0  000A               	tblrd		*-
  2189  0015A2  CFF5 F0DD          	movff	tablat,initServo@angle+1
  2190  0015A6  EC9F  F019         	call	_initServo	;wreg free
  2191                           
  2192                           ;main.c: 147: initServo(redirectingServo, redirectAngle_AA);
  2193  0015AA  0E61               	movlw	low _redirectingServo
  2194  0015AC  0100               	movlb	0	; () banked
  2195  0015AE  6FDA               	movwf	initServo@motor& (0+255),b
  2196  0015B0  0EFE               	movlw	high _redirectingServo
  2197  0015B2  0100               	movlb	0	; () banked
  2198  0015B4  6FDB               	movwf	(initServo@motor+1)& (0+255),b
  2199  0015B6  0E4B               	movlw	low _redirectAngle_AA
  2200  0015B8  6EF6               	movwf	tblptrl,c
  2201  0015BA                     	if	1	;There is more than 1 active tblptr byte
  2202  0015BA  0EFE               	movlw	high _redirectAngle_AA
  2203  0015BC  6EF7               	movwf	tblptrh,c
  2204  0015BE                     	endif
  2205  0015BE                     	if	0	;There are less than 3 active tblptr bytes
  2206  0015BE                     	endif
  2207  0015BE  0009               	tblrd		*+
  2208  0015C0  CFF5 F0DC          	movff	tablat,initServo@angle
  2209  0015C4  000A               	tblrd		*-
  2210  0015C6  CFF5 F0DD          	movff	tablat,initServo@angle+1
  2211  0015CA  EC9F  F019         	call	_initServo	;wreg free
  2212  0015CE                     l7783:
  2213                           
  2214                           ;main.c: 152: int lastBatteryTime = time;
  2215  0015CE  C147  F13D         	movff	_time,main@lastBatteryTime
  2216  0015D2  C148  F13E         	movff	_time+1,main@lastBatteryTime+1
  2217                           
  2218                           ;main.c: 154: int cylinderStart = time;
  2219  0015D6  C147  F12B         	movff	_time,main@cylinderStart
  2220  0015DA  C148  F12C         	movff	_time+1,main@cylinderStart+1
  2221                           
  2222                           ;main.c: 155: int duration = 0;
  2223  0015DE  0E00               	movlw	0
  2224  0015E0  0101               	movlb	1	; () banked
  2225  0015E2  6F3C               	movwf	(main@duration+1)& (0+255),b
  2226  0015E4  0E00               	movlw	0
  2227  0015E6  6F3B               	movwf	main@duration& (0+255),b
  2228                           
  2229                           ; BSR set to: 1
  2230                           ;main.c: 157: stoppingTime = 200 + 300 * (float)(15 - (n_AA + n_9V + n_C + n_OTHER))/15;
  2231  0015E8  0E00               	movlw	0
  2232  0015EA  0100               	movlb	0	; () banked
  2233  0015EC  6FA1               	movwf	___ftadd@f2& (0+255),b
  2234  0015EE  0E48               	movlw	72
  2235  0015F0  0100               	movlb	0	; () banked
  2236  0015F2  6FA2               	movwf	(___ftadd@f2+1)& (0+255),b
  2237  0015F4  0E43               	movlw	67
  2238  0015F6  0100               	movlb	0	; () banked
  2239  0015F8  6FA3               	movwf	(___ftadd@f2+2)& (0+255),b
  2240  0015FA  0E00               	movlw	0
  2241  0015FC  0100               	movlb	0	; () banked
  2242  0015FE  6F92               	movwf	___ftdiv@f2& (0+255),b
  2243  001600  0E70               	movlw	112
  2244  001602  0100               	movlb	0	; () banked
  2245  001604  6F93               	movwf	(___ftdiv@f2+1)& (0+255),b
  2246  001606  0E41               	movlw	65
  2247  001608  0100               	movlb	0	; () banked
  2248  00160A  6F94               	movwf	(___ftdiv@f2+2)& (0+255),b
  2249  00160C  0E00               	movlw	0
  2250  00160E  0100               	movlb	0	; () banked
  2251  001610  6F83               	movwf	___ftmul@f2& (0+255),b
  2252  001612  0E96               	movlw	150
  2253  001614  0100               	movlb	0	; () banked
  2254  001616  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  2255  001618  0E43               	movlw	67
  2256  00161A  0100               	movlb	0	; () banked
  2257  00161C  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  2258  00161E  0101               	movlb	1	; () banked
  2259  001620  514D               	movf	_n_9V& (0+255),w,b
  2260  001622  0101               	movlb	1	; () banked
  2261  001624  254F               	addwf	_n_AA& (0+255),w,b
  2262  001626  0101               	movlb	1	; () banked
  2263  001628  6F1A               	movwf	??_main& (0+255),b
  2264  00162A  0101               	movlb	1	; () banked
  2265  00162C  514E               	movf	(_n_9V+1)& (0+255),w,b
  2266  00162E  0101               	movlb	1	; () banked
  2267  001630  2150               	addwfc	(_n_AA+1)& (0+255),w,b
  2268  001632  0101               	movlb	1	; () banked
  2269  001634  6F1B               	movwf	(??_main+1)& (0+255),b
  2270  001636  0101               	movlb	1	; () banked
  2271  001638  5151               	movf	_n_C& (0+255),w,b
  2272  00163A  0101               	movlb	1	; () banked
  2273  00163C  271A               	addwf	??_main& (0+255),f,b
  2274  00163E  0101               	movlb	1	; () banked
  2275  001640  5152               	movf	(_n_C+1)& (0+255),w,b
  2276  001642  0101               	movlb	1	; () banked
  2277  001644  231B               	addwfc	(??_main+1)& (0+255),f,b
  2278  001646  0101               	movlb	1	; () banked
  2279  001648  5153               	movf	_n_OTHER& (0+255),w,b
  2280  00164A  0101               	movlb	1	; () banked
  2281  00164C  271A               	addwf	??_main& (0+255),f,b
  2282  00164E  0101               	movlb	1	; () banked
  2283  001650  5154               	movf	(_n_OTHER+1)& (0+255),w,b
  2284  001652  0101               	movlb	1	; () banked
  2285  001654  231B               	addwfc	(??_main+1)& (0+255),f,b
  2286  001656  0101               	movlb	1	; () banked
  2287  001658  1F1A               	comf	??_main& (0+255),f,b
  2288  00165A  1F1B               	comf	(??_main+1)& (0+255),f,b
  2289  00165C  4B1A               	infsnz	??_main& (0+255),f,b
  2290  00165E  2B1B               	incf	(??_main+1)& (0+255),f,b
  2291  001660  0E0F               	movlw	15
  2292  001662  0101               	movlb	1	; () banked
  2293  001664  251A               	addwf	??_main& (0+255),w,b
  2294  001666  6E2D               	movwf	___awtoft@c,c
  2295  001668  0E00               	movlw	0
  2296  00166A  0101               	movlb	1	; () banked
  2297  00166C  211B               	addwfc	(??_main+1)& (0+255),w,b
  2298  00166E  6E2E               	movwf	___awtoft@c+1,c
  2299  001670  ECFE  F021         	call	___awtoft	;wreg free
  2300  001674  C02D  F080         	movff	?___awtoft,___ftmul@f1
  2301  001678  C02E  F081         	movff	?___awtoft+1,___ftmul@f1+1
  2302  00167C  C02F  F082         	movff	?___awtoft+2,___ftmul@f1+2
  2303  001680  EC65  F014         	call	___ftmul	;wreg free
  2304  001684  C080  F08F         	movff	?___ftmul,___ftdiv@f1
  2305  001688  C081  F090         	movff	?___ftmul+1,___ftdiv@f1+1
  2306  00168C  C082  F091         	movff	?___ftmul+2,___ftdiv@f1+2
  2307  001690  EC14  F015         	call	___ftdiv	;wreg free
  2308  001694  C08F  F09E         	movff	?___ftdiv,___ftadd@f1
  2309  001698  C090  F09F         	movff	?___ftdiv+1,___ftadd@f1+1
  2310  00169C  C091  F0A0         	movff	?___ftdiv+2,___ftadd@f1+2
  2311  0016A0  ECD1  F00F         	call	___ftadd	;wreg free
  2312  0016A4  C09E  F0AA         	movff	?___ftadd,___fttol@f1
  2313  0016A8  C09F  F0AB         	movff	?___ftadd+1,___fttol@f1+1
  2314  0016AC  C0A0  F0AC         	movff	?___ftadd+2,___fttol@f1+2
  2315  0016B0  ECBA  F015         	call	___fttol	;wreg free
  2316  0016B4  C0AA  F157         	movff	?___fttol,_stoppingTime
  2317  0016B8  C0AB  F158         	movff	?___fttol+1,_stoppingTime+1
  2318                           
  2319                           ;main.c: 159: while(!batteryDetected && !terminate){
  2320  0016BC  D1F5               	goto	l7817
  2321  0016BE                     l7791:
  2322                           
  2323                           ;main.c: 161: lcdHome();
  2324  0016BE  ECFC  F022         	call	_lcdHome	;wreg free
  2325                           
  2326                           ;main.c: 162: printf("time %02ld:%02ld.%01ld     \n",time/600,(time%600)/10,(time%600)%1
      +                          0);
  2327  0016C2  0E58               	movlw	88
  2328  0016C4  6E29               	movwf	___almod@divisor,c
  2329  0016C6  0E02               	movlw	2
  2330  0016C8  6E2A               	movwf	___almod@divisor+1,c
  2331  0016CA  0E00               	movlw	0
  2332  0016CC  6E2B               	movwf	___almod@divisor+2,c
  2333  0016CE  0E00               	movlw	0
  2334  0016D0  6E2C               	movwf	___almod@divisor+3,c
  2335  0016D2  C147  F025         	movff	_time,___almod@dividend
  2336  0016D6  C148  F026         	movff	_time+1,___almod@dividend+1
  2337  0016DA  C149  F027         	movff	_time+2,___almod@dividend+2
  2338  0016DE  C14A  F028         	movff	_time+3,___almod@dividend+3
  2339  0016E2  EC9F  F01C         	call	___almod	;wreg free
  2340  0016E6  C025  F127         	movff	?___almod,_main$1417
  2341  0016EA  C026  F128         	movff	?___almod+1,_main$1417+1
  2342  0016EE  C027  F129         	movff	?___almod+2,_main$1417+2
  2343  0016F2  C028  F12A         	movff	?___almod+3,_main$1417+3
  2344                           
  2345                           ;main.c: 162: printf("time %02ld:%02ld.%01ld     \n",time/600,(time%600)/10,(time%600)%1
      +                          0);
  2346  0016F6  0E83               	movlw	low STR_2
  2347  0016F8  0100               	movlb	0	; () banked
  2348  0016FA  6FB9               	movwf	printf@f& (0+255),b
  2349  0016FC  0EFE               	movlw	high STR_2
  2350  0016FE  0100               	movlb	0	; () banked
  2351  001700  6FBA               	movwf	(printf@f+1)& (0+255),b
  2352  001702  C147  F02F         	movff	_time,___aldiv@dividend
  2353  001706  C148  F030         	movff	_time+1,___aldiv@dividend+1
  2354  00170A  C149  F031         	movff	_time+2,___aldiv@dividend+2
  2355  00170E  C14A  F032         	movff	_time+3,___aldiv@dividend+3
  2356  001712  0E58               	movlw	88
  2357  001714  6E33               	movwf	___aldiv@divisor,c
  2358  001716  0E02               	movlw	2
  2359  001718  6E34               	movwf	___aldiv@divisor+1,c
  2360  00171A  0E00               	movlw	0
  2361  00171C  6E35               	movwf	___aldiv@divisor+2,c
  2362  00171E  0E00               	movlw	0
  2363  001720  6E36               	movwf	___aldiv@divisor+3,c
  2364  001722  EC05  F01B         	call	___aldiv	;wreg free
  2365  001726  C02F  F0BB         	movff	?___aldiv,?_printf+2
  2366  00172A  C030  F0BC         	movff	?___aldiv+1,?_printf+3
  2367  00172E  C031  F0BD         	movff	?___aldiv+2,?_printf+4
  2368  001732  C032  F0BE         	movff	?___aldiv+3,?_printf+5
  2369  001736  0E58               	movlw	88
  2370  001738  6E29               	movwf	___almod@divisor,c
  2371  00173A  0E02               	movlw	2
  2372  00173C  6E2A               	movwf	___almod@divisor+1,c
  2373  00173E  0E00               	movlw	0
  2374  001740  6E2B               	movwf	___almod@divisor+2,c
  2375  001742  0E00               	movlw	0
  2376  001744  6E2C               	movwf	___almod@divisor+3,c
  2377  001746  C147  F025         	movff	_time,___almod@dividend
  2378  00174A  C148  F026         	movff	_time+1,___almod@dividend+1
  2379  00174E  C149  F027         	movff	_time+2,___almod@dividend+2
  2380  001752  C14A  F028         	movff	_time+3,___almod@dividend+3
  2381  001756  EC9F  F01C         	call	___almod	;wreg free
  2382  00175A  C025  F02F         	movff	?___almod,___aldiv@dividend
  2383  00175E  C026  F030         	movff	?___almod+1,___aldiv@dividend+1
  2384  001762  C027  F031         	movff	?___almod+2,___aldiv@dividend+2
  2385  001766  C028  F032         	movff	?___almod+3,___aldiv@dividend+3
  2386  00176A  0E0A               	movlw	10
  2387  00176C  6E33               	movwf	___aldiv@divisor,c
  2388  00176E  0E00               	movlw	0
  2389  001770  6E34               	movwf	___aldiv@divisor+1,c
  2390  001772  0E00               	movlw	0
  2391  001774  6E35               	movwf	___aldiv@divisor+2,c
  2392  001776  0E00               	movlw	0
  2393  001778  6E36               	movwf	___aldiv@divisor+3,c
  2394  00177A  EC05  F01B         	call	___aldiv	;wreg free
  2395  00177E  C02F  F0BF         	movff	?___aldiv,?_printf+6
  2396  001782  C030  F0C0         	movff	?___aldiv+1,?_printf+7
  2397  001786  C031  F0C1         	movff	?___aldiv+2,?_printf+8
  2398  00178A  C032  F0C2         	movff	?___aldiv+3,?_printf+9
  2399  00178E  C127  F025         	movff	_main$1417,___almod@dividend
  2400  001792  C128  F026         	movff	_main$1417+1,___almod@dividend+1
  2401  001796  C129  F027         	movff	_main$1417+2,___almod@dividend+2
  2402  00179A  C12A  F028         	movff	_main$1417+3,___almod@dividend+3
  2403  00179E  0E0A               	movlw	10
  2404  0017A0  6E29               	movwf	___almod@divisor,c
  2405  0017A2  0E00               	movlw	0
  2406  0017A4  6E2A               	movwf	___almod@divisor+1,c
  2407  0017A6  0E00               	movlw	0
  2408  0017A8  6E2B               	movwf	___almod@divisor+2,c
  2409  0017AA  0E00               	movlw	0
  2410  0017AC  6E2C               	movwf	___almod@divisor+3,c
  2411  0017AE  EC9F  F01C         	call	___almod	;wreg free
  2412  0017B2  C025  F0C3         	movff	?___almod,?_printf+10
  2413  0017B6  C026  F0C4         	movff	?___almod+1,?_printf+11
  2414  0017BA  C027  F0C5         	movff	?___almod+2,?_printf+12
  2415  0017BE  C028  F0C6         	movff	?___almod+3,?_printf+13
  2416  0017C2  EC09  F000         	call	_printf	;wreg free
  2417                           
  2418                           ;main.c: 163: printf("stop in: %d                  ",(1+stoppingTime - (time-lastBattery
      +                          Time) )%600/10);
  2419  0017C6  0E65               	movlw	low STR_3
  2420  0017C8  0100               	movlb	0	; () banked
  2421  0017CA  6FB9               	movwf	printf@f& (0+255),b
  2422  0017CC  0EFE               	movlw	high STR_3
  2423  0017CE  0100               	movlb	0	; () banked
  2424  0017D0  6FBA               	movwf	(printf@f+1)& (0+255),b
  2425  0017D2  0E58               	movlw	88
  2426  0017D4  6E29               	movwf	___almod@divisor,c
  2427  0017D6  0E02               	movlw	2
  2428  0017D8  6E2A               	movwf	___almod@divisor+1,c
  2429  0017DA  0E00               	movlw	0
  2430  0017DC  6E2B               	movwf	___almod@divisor+2,c
  2431  0017DE  0E00               	movlw	0
  2432  0017E0  6E2C               	movwf	___almod@divisor+3,c
  2433  0017E2  C13D  F11A         	movff	main@lastBatteryTime,??_main
  2434  0017E6  C13E  F11B         	movff	main@lastBatteryTime+1,??_main+1
  2435  0017EA  0E00               	movlw	0
  2436  0017EC  0101               	movlb	1	; () banked
  2437  0017EE  BF1B               	btfsc	(??_main+1)& (0+255),7,b
  2438  0017F0  0EFF               	movlw	255
  2439  0017F2  6F1C               	movwf	(??_main+2)& (0+255),b
  2440  0017F4  6F1D               	movwf	(??_main+3)& (0+255),b
  2441  0017F6  0101               	movlb	1	; () banked
  2442  0017F8  1F1A               	comf	??_main& (0+255),f,b
  2443  0017FA  1F1B               	comf	(??_main+1)& (0+255),f,b
  2444  0017FC  1F1C               	comf	(??_main+2)& (0+255),f,b
  2445  0017FE  1F1D               	comf	(??_main+3)& (0+255),f,b
  2446  001800  2B1A               	incf	??_main& (0+255),f,b
  2447  001802  0E00               	movlw	0
  2448  001804  231B               	addwfc	(??_main+1)& (0+255),f,b
  2449  001806  231C               	addwfc	(??_main+2)& (0+255),f,b
  2450  001808  231D               	addwfc	(??_main+3)& (0+255),f,b
  2451  00180A  0101               	movlb	1	; () banked
  2452  00180C  5147               	movf	_time& (0+255),w,b
  2453  00180E  0101               	movlb	1	; () banked
  2454  001810  251A               	addwf	??_main& (0+255),w,b
  2455  001812  0101               	movlb	1	; () banked
  2456  001814  6F1E               	movwf	(??_main+4)& (0+255),b
  2457  001816  0101               	movlb	1	; () banked
  2458  001818  5148               	movf	(_time+1)& (0+255),w,b
  2459  00181A  0101               	movlb	1	; () banked
  2460  00181C  211B               	addwfc	(??_main+1)& (0+255),w,b
  2461  00181E  0101               	movlb	1	; () banked
  2462  001820  6F1F               	movwf	(??_main+5)& (0+255),b
  2463  001822  0101               	movlb	1	; () banked
  2464  001824  5149               	movf	(_time+2)& (0+255),w,b
  2465  001826  0101               	movlb	1	; () banked
  2466  001828  211C               	addwfc	(??_main+2)& (0+255),w,b
  2467  00182A  0101               	movlb	1	; () banked
  2468  00182C  6F20               	movwf	(??_main+6)& (0+255),b
  2469  00182E  0101               	movlb	1	; () banked
  2470  001830  514A               	movf	(_time+3)& (0+255),w,b
  2471  001832  0101               	movlb	1	; () banked
  2472  001834  211D               	addwfc	(??_main+3)& (0+255),w,b
  2473  001836  0101               	movlb	1	; () banked
  2474  001838  6F21               	movwf	(??_main+7)& (0+255),b
  2475  00183A  0101               	movlb	1	; () banked
  2476  00183C  1F1E               	comf	(??_main+4)& (0+255),f,b
  2477  00183E  1F1F               	comf	(??_main+5)& (0+255),f,b
  2478  001840  1F20               	comf	(??_main+6)& (0+255),f,b
  2479  001842  1F21               	comf	(??_main+7)& (0+255),f,b
  2480  001844  2B1E               	incf	(??_main+4)& (0+255),f,b
  2481  001846  0E00               	movlw	0
  2482  001848  231F               	addwfc	(??_main+5)& (0+255),f,b
  2483  00184A  2320               	addwfc	(??_main+6)& (0+255),f,b
  2484  00184C  2321               	addwfc	(??_main+7)& (0+255),f,b
  2485  00184E  0E01               	movlw	1
  2486  001850  0101               	movlb	1	; () banked
  2487  001852  2557               	addwf	_stoppingTime& (0+255),w,b
  2488  001854  0101               	movlb	1	; () banked
  2489  001856  6F22               	movwf	(??_main+8)& (0+255),b
  2490  001858  0E00               	movlw	0
  2491  00185A  0101               	movlb	1	; () banked
  2492  00185C  2158               	addwfc	(_stoppingTime+1)& (0+255),w,b
  2493  00185E  0101               	movlb	1	; () banked
  2494  001860  6F23               	movwf	(??_main+9)& (0+255),b
  2495  001862  0101               	movlb	1	; () banked
  2496  001864  6B24               	clrf	(??_main+10)& (0+255),b
  2497  001866  0101               	movlb	1	; () banked
  2498  001868  BF23               	btfsc	(??_main+9)& (0+255),7,b
  2499  00186A  0724               	decf	(??_main+10)& (0+255),f,b
  2500  00186C  0101               	movlb	1	; () banked
  2501  00186E  5124               	movf	(??_main+10)& (0+255),w,b
  2502  001870  0101               	movlb	1	; () banked
  2503  001872  6F25               	movwf	(??_main+11)& (0+255),b
  2504  001874  0101               	movlb	1	; () banked
  2505  001876  511E               	movf	(??_main+4)& (0+255),w,b
  2506  001878  0101               	movlb	1	; () banked
  2507  00187A  2522               	addwf	(??_main+8)& (0+255),w,b
  2508  00187C  6E25               	movwf	___almod@dividend,c
  2509  00187E  0101               	movlb	1	; () banked
  2510  001880  511F               	movf	(??_main+5)& (0+255),w,b
  2511  001882  0101               	movlb	1	; () banked
  2512  001884  2123               	addwfc	(??_main+9)& (0+255),w,b
  2513  001886  6E26               	movwf	___almod@dividend+1,c
  2514  001888  0101               	movlb	1	; () banked
  2515  00188A  5120               	movf	(??_main+6)& (0+255),w,b
  2516  00188C  0101               	movlb	1	; () banked
  2517  00188E  2124               	addwfc	(??_main+10)& (0+255),w,b
  2518  001890  6E27               	movwf	___almod@dividend+2,c
  2519  001892  0101               	movlb	1	; () banked
  2520  001894  5121               	movf	(??_main+7)& (0+255),w,b
  2521  001896  0101               	movlb	1	; () banked
  2522  001898  2125               	addwfc	(??_main+11)& (0+255),w,b
  2523  00189A  6E28               	movwf	___almod@dividend+3,c
  2524  00189C  EC9F  F01C         	call	___almod	;wreg free
  2525  0018A0  C025  F02F         	movff	?___almod,___aldiv@dividend
  2526  0018A4  C026  F030         	movff	?___almod+1,___aldiv@dividend+1
  2527  0018A8  C027  F031         	movff	?___almod+2,___aldiv@dividend+2
  2528  0018AC  C028  F032         	movff	?___almod+3,___aldiv@dividend+3
  2529  0018B0  0E0A               	movlw	10
  2530  0018B2  6E33               	movwf	___aldiv@divisor,c
  2531  0018B4  0E00               	movlw	0
  2532  0018B6  6E34               	movwf	___aldiv@divisor+1,c
  2533  0018B8  0E00               	movlw	0
  2534  0018BA  6E35               	movwf	___aldiv@divisor+2,c
  2535  0018BC  0E00               	movlw	0
  2536  0018BE  6E36               	movwf	___aldiv@divisor+3,c
  2537  0018C0  EC05  F01B         	call	___aldiv	;wreg free
  2538  0018C4  C02F  F0BB         	movff	?___aldiv,?_printf+2
  2539  0018C8  C030  F0BC         	movff	?___aldiv+1,?_printf+3
  2540  0018CC  C031  F0BD         	movff	?___aldiv+2,?_printf+4
  2541  0018D0  C032  F0BE         	movff	?___aldiv+3,?_printf+5
  2542  0018D4  EC09  F000         	call	_printf	;wreg free
  2543                           
  2544                           ;main.c: 164: _delay((unsigned long)((45)*(10000000/4000.0)));
  2545  0018D8  0E93               	movlw	147
  2546  0018DA  0101               	movlb	1	; () banked
  2547  0018DC  6F1A               	movwf	??_main& (0+255),b
  2548  0018DE  0E19               	movlw	25
  2549  0018E0                     u8417:
  2550  0018E0  2EE8               	decfsz	wreg,f,c
  2551  0018E2  D7FE               	bra	u8417
  2552  0018E4  2F1A               	decfsz	??_main& (0+255),f,b
  2553  0018E6  D7FC               	bra	u8417
  2554                           
  2555                           ;main.c: 167: if(time - cylinderStart >= duration)
  2556  0018E8  C13B  F11A         	movff	main@duration,??_main
  2557  0018EC  C13C  F11B         	movff	main@duration+1,??_main+1
  2558  0018F0  0E00               	movlw	0
  2559  0018F2  0101               	movlb	1	; () banked
  2560  0018F4  BF1B               	btfsc	(??_main+1)& (0+255),7,b
  2561  0018F6  0EFF               	movlw	255
  2562  0018F8  6F1C               	movwf	(??_main+2)& (0+255),b
  2563  0018FA  6F1D               	movwf	(??_main+3)& (0+255),b
  2564  0018FC  C12B  F11E         	movff	main@cylinderStart,??_main+4
  2565  001900  C12C  F11F         	movff	main@cylinderStart+1,??_main+5
  2566  001904  0E00               	movlw	0
  2567  001906  0101               	movlb	1	; () banked
  2568  001908  BF1F               	btfsc	(??_main+5)& (0+255),7,b
  2569  00190A  0EFF               	movlw	255
  2570  00190C  6F20               	movwf	(??_main+6)& (0+255),b
  2571  00190E  6F21               	movwf	(??_main+7)& (0+255),b
  2572  001910  0101               	movlb	1	; () banked
  2573  001912  1F1E               	comf	(??_main+4)& (0+255),f,b
  2574  001914  1F1F               	comf	(??_main+5)& (0+255),f,b
  2575  001916  1F20               	comf	(??_main+6)& (0+255),f,b
  2576  001918  1F21               	comf	(??_main+7)& (0+255),f,b
  2577  00191A  2B1E               	incf	(??_main+4)& (0+255),f,b
  2578  00191C  0E00               	movlw	0
  2579  00191E  231F               	addwfc	(??_main+5)& (0+255),f,b
  2580  001920  2320               	addwfc	(??_main+6)& (0+255),f,b
  2581  001922  2321               	addwfc	(??_main+7)& (0+255),f,b
  2582  001924  0101               	movlb	1	; () banked
  2583  001926  5147               	movf	_time& (0+255),w,b
  2584  001928  0101               	movlb	1	; () banked
  2585  00192A  251E               	addwf	(??_main+4)& (0+255),w,b
  2586  00192C  0101               	movlb	1	; () banked
  2587  00192E  6F22               	movwf	(??_main+8)& (0+255),b
  2588  001930  0101               	movlb	1	; () banked
  2589  001932  5148               	movf	(_time+1)& (0+255),w,b
  2590  001934  0101               	movlb	1	; () banked
  2591  001936  211F               	addwfc	(??_main+5)& (0+255),w,b
  2592  001938  0101               	movlb	1	; () banked
  2593  00193A  6F23               	movwf	(??_main+9)& (0+255),b
  2594  00193C  0101               	movlb	1	; () banked
  2595  00193E  5149               	movf	(_time+2)& (0+255),w,b
  2596  001940  0101               	movlb	1	; () banked
  2597  001942  2120               	addwfc	(??_main+6)& (0+255),w,b
  2598  001944  0101               	movlb	1	; () banked
  2599  001946  6F24               	movwf	(??_main+10)& (0+255),b
  2600  001948  0101               	movlb	1	; () banked
  2601  00194A  514A               	movf	(_time+3)& (0+255),w,b
  2602  00194C  0101               	movlb	1	; () banked
  2603  00194E  2121               	addwfc	(??_main+7)& (0+255),w,b
  2604  001950  0101               	movlb	1	; () banked
  2605  001952  6F25               	movwf	(??_main+11)& (0+255),b
  2606  001954  0101               	movlb	1	; () banked
  2607  001956  511A               	movf	??_main& (0+255),w,b
  2608  001958  0101               	movlb	1	; () banked
  2609  00195A  5D22               	subwf	(??_main+8)& (0+255),w,b
  2610  00195C  0101               	movlb	1	; () banked
  2611  00195E  511B               	movf	(??_main+1)& (0+255),w,b
  2612  001960  0101               	movlb	1	; () banked
  2613  001962  5923               	subwfb	(??_main+9)& (0+255),w,b
  2614  001964  0101               	movlb	1	; () banked
  2615  001966  511C               	movf	(??_main+2)& (0+255),w,b
  2616  001968  0101               	movlb	1	; () banked
  2617  00196A  5924               	subwfb	(??_main+10)& (0+255),w,b
  2618  00196C  0101               	movlb	1	; () banked
  2619  00196E  5125               	movf	(??_main+11)& (0+255),w,b
  2620  001970  0A80               	xorlw	128
  2621  001972  0101               	movlb	1	; () banked
  2622  001974  6F26               	movwf	(??_main+12)& (0+255),b
  2623  001976  0101               	movlb	1	; () banked
  2624  001978  511D               	movf	(??_main+3)& (0+255),w,b
  2625  00197A  0A80               	xorlw	128
  2626  00197C  0101               	movlb	1	; () banked
  2627  00197E  5926               	subwfb	(??_main+12)& (0+255),w,b
  2628  001980  A0D8               	btfss	status,0,c
  2629  001982  D045               	goto	l7813
  2630                           
  2631                           ; BSR set to: 1
  2632                           ;main.c: 168: {
  2633                           ;main.c: 169: if(digitalRead(cylinderMotor1)){
  2634  001984  0E55               	movlw	low _cylinderMotor1
  2635  001986  6E25               	movwf	digitalRead@pin,c
  2636  001988  0EFE               	movlw	high _cylinderMotor1
  2637  00198A  6E26               	movwf	digitalRead@pin+1,c
  2638  00198C  EC35  F012         	call	_digitalRead	;wreg free
  2639  001990  5025               	movf	?_digitalRead,w,c
  2640  001992  1026               	iorwf	?_digitalRead+1,w,c
  2641  001994  B4D8               	btfsc	status,2,c
  2642  001996  D019               	goto	l7807
  2643                           
  2644                           ;main.c: 170: digitalWrite(cylinderMotor1, 0);
  2645  001998  0E55               	movlw	low _cylinderMotor1
  2646  00199A  6E25               	movwf	digitalWrite@pin,c
  2647  00199C  0EFE               	movlw	high _cylinderMotor1
  2648  00199E  6E26               	movwf	digitalWrite@pin+1,c
  2649  0019A0  0E00               	movlw	0
  2650  0019A2  6E28               	movwf	digitalWrite@val+1,c
  2651  0019A4  0E00               	movlw	0
  2652  0019A6  6E27               	movwf	digitalWrite@val,c
  2653  0019A8  EC97  F018         	call	_digitalWrite	;wreg free
  2654                           
  2655                           ;main.c: 171: digitalWrite(cylinderMotor2, 1);
  2656  0019AC  0E59               	movlw	low _cylinderMotor2
  2657  0019AE  6E25               	movwf	digitalWrite@pin,c
  2658  0019B0  0EFE               	movlw	high _cylinderMotor2
  2659  0019B2  6E26               	movwf	digitalWrite@pin+1,c
  2660  0019B4  0E00               	movlw	0
  2661  0019B6  6E28               	movwf	digitalWrite@val+1,c
  2662  0019B8  0E01               	movlw	1
  2663  0019BA  6E27               	movwf	digitalWrite@val,c
  2664  0019BC  EC97  F018         	call	_digitalWrite	;wreg free
  2665                           
  2666                           ;main.c: 172: duration = cylinderForward;
  2667  0019C0  0E41               	movlw	low _cylinderForward
  2668  0019C2  6EF6               	movwf	tblptrl,c
  2669  0019C4                     	if	1	;There is more than 1 active tblptr byte
  2670  0019C4  0EFE               	movlw	high _cylinderForward
  2671  0019C6  6EF7               	movwf	tblptrh,c
  2672  0019C8                     	endif
  2673  0019C8                     	if	0	;There are less than 3 active tblptr bytes
  2674  0019C8  D018               	goto	L1
  2675  0019CA                     l7807:
  2676                           
  2677                           ;main.c: 174: digitalWrite(cylinderMotor2, 0);
  2678  0019CA  0E59               	movlw	low _cylinderMotor2
  2679  0019CC  6E25               	movwf	digitalWrite@pin,c
  2680  0019CE  0EFE               	movlw	high _cylinderMotor2
  2681  0019D0  6E26               	movwf	digitalWrite@pin+1,c
  2682  0019D2  0E00               	movlw	0
  2683  0019D4  6E28               	movwf	digitalWrite@val+1,c
  2684  0019D6  0E00               	movlw	0
  2685  0019D8  6E27               	movwf	digitalWrite@val,c
  2686  0019DA  EC97  F018         	call	_digitalWrite	;wreg free
  2687                           
  2688                           ;main.c: 175: digitalWrite(cylinderMotor1, 1);
  2689  0019DE  0E55               	movlw	low _cylinderMotor1
  2690  0019E0  6E25               	movwf	digitalWrite@pin,c
  2691  0019E2  0EFE               	movlw	high _cylinderMotor1
  2692  0019E4  6E26               	movwf	digitalWrite@pin+1,c
  2693  0019E6  0E00               	movlw	0
  2694  0019E8  6E28               	movwf	digitalWrite@val+1,c
  2695  0019EA  0E01               	movlw	1
  2696  0019EC  6E27               	movwf	digitalWrite@val,c
  2697  0019EE  EC97  F018         	call	_digitalWrite	;wreg free
  2698                           
  2699                           ;main.c: 176: duration = cylinderBackward;
  2700  0019F2  0E3F               	movlw	low _cylinderBackward
  2701  0019F4  6EF6               	movwf	tblptrl,c
  2702  0019F6                     	if	1	;There is more than 1 active tblptr byte
  2703  0019F6  0EFE               	movlw	high _cylinderBackward
  2704  0019F8  6EF7               	movwf	tblptrh,c
  2705  0019FA                     	endif
  2706  0019FA                     	if	0	;There are less than 3 active tblptr bytes
  2707  0019FA                     L1:
  2708  0019FA                     	endif
  2709  0019FA  0009               	tblrd		*+
  2710  0019FC  CFF5 F13B          	movff	tablat,main@duration
  2711  001A00  000A               	tblrd		*-
  2712  001A02  CFF5 F13C          	movff	tablat,main@duration+1
  2713                           
  2714                           ;main.c: 177: }
  2715                           ;main.c: 179: cylinderStart = time;
  2716  001A06  C147  F12B         	movff	_time,main@cylinderStart
  2717  001A0A  C148  F12C         	movff	_time+1,main@cylinderStart+1
  2718  001A0E                     l7813:
  2719                           
  2720                           ;main.c: 180: }
  2721                           ;main.c: 182: if(time - lastBatteryTime > stoppingTime)
  2722  001A0E  C13D  F11A         	movff	main@lastBatteryTime,??_main
  2723  001A12  C13E  F11B         	movff	main@lastBatteryTime+1,??_main+1
  2724  001A16  0E00               	movlw	0
  2725  001A18  0101               	movlb	1	; () banked
  2726  001A1A  BF1B               	btfsc	(??_main+1)& (0+255),7,b
  2727  001A1C  0EFF               	movlw	255
  2728  001A1E  6F1C               	movwf	(??_main+2)& (0+255),b
  2729  001A20  6F1D               	movwf	(??_main+3)& (0+255),b
  2730  001A22  0101               	movlb	1	; () banked
  2731  001A24  1F1A               	comf	??_main& (0+255),f,b
  2732  001A26  1F1B               	comf	(??_main+1)& (0+255),f,b
  2733  001A28  1F1C               	comf	(??_main+2)& (0+255),f,b
  2734  001A2A  1F1D               	comf	(??_main+3)& (0+255),f,b
  2735  001A2C  2B1A               	incf	??_main& (0+255),f,b
  2736  001A2E  0E00               	movlw	0
  2737  001A30  231B               	addwfc	(??_main+1)& (0+255),f,b
  2738  001A32  231C               	addwfc	(??_main+2)& (0+255),f,b
  2739  001A34  231D               	addwfc	(??_main+3)& (0+255),f,b
  2740  001A36  0101               	movlb	1	; () banked
  2741  001A38  5147               	movf	_time& (0+255),w,b
  2742  001A3A  0101               	movlb	1	; () banked
  2743  001A3C  251A               	addwf	??_main& (0+255),w,b
  2744  001A3E  0101               	movlb	1	; () banked
  2745  001A40  6F1E               	movwf	(??_main+4)& (0+255),b
  2746  001A42  0101               	movlb	1	; () banked
  2747  001A44  5148               	movf	(_time+1)& (0+255),w,b
  2748  001A46  0101               	movlb	1	; () banked
  2749  001A48  211B               	addwfc	(??_main+1)& (0+255),w,b
  2750  001A4A  0101               	movlb	1	; () banked
  2751  001A4C  6F1F               	movwf	(??_main+5)& (0+255),b
  2752  001A4E  0101               	movlb	1	; () banked
  2753  001A50  5149               	movf	(_time+2)& (0+255),w,b
  2754  001A52  0101               	movlb	1	; () banked
  2755  001A54  211C               	addwfc	(??_main+2)& (0+255),w,b
  2756  001A56  0101               	movlb	1	; () banked
  2757  001A58  6F20               	movwf	(??_main+6)& (0+255),b
  2758  001A5A  0101               	movlb	1	; () banked
  2759  001A5C  514A               	movf	(_time+3)& (0+255),w,b
  2760  001A5E  0101               	movlb	1	; () banked
  2761  001A60  211D               	addwfc	(??_main+3)& (0+255),w,b
  2762  001A62  0101               	movlb	1	; () banked
  2763  001A64  6F21               	movwf	(??_main+7)& (0+255),b
  2764  001A66  0E00               	movlw	0
  2765  001A68  0101               	movlb	1	; () banked
  2766  001A6A  BF58               	btfsc	(_stoppingTime+1)& (0+255),7,b
  2767  001A6C  0EFF               	movlw	255
  2768  001A6E  0101               	movlb	1	; () banked
  2769  001A70  6F23               	movwf	(??_main+9)& (0+255),b
  2770  001A72  0A80               	xorlw	128
  2771  001A74  6F22               	movwf	(??_main+8)& (0+255),b
  2772  001A76  0101               	movlb	1	; () banked
  2773  001A78  511E               	movf	(??_main+4)& (0+255),w,b
  2774  001A7A  0101               	movlb	1	; () banked
  2775  001A7C  5D57               	subwf	_stoppingTime& (0+255),w,b
  2776  001A7E  0101               	movlb	1	; () banked
  2777  001A80  511F               	movf	(??_main+5)& (0+255),w,b
  2778  001A82  0101               	movlb	1	; () banked
  2779  001A84  5958               	subwfb	(_stoppingTime+1)& (0+255),w,b
  2780  001A86  0101               	movlb	1	; () banked
  2781  001A88  5120               	movf	(??_main+6)& (0+255),w,b
  2782  001A8A  0101               	movlb	1	; () banked
  2783  001A8C  5923               	subwfb	(??_main+9)& (0+255),w,b
  2784  001A8E  0101               	movlb	1	; () banked
  2785  001A90  5121               	movf	(??_main+7)& (0+255),w,b
  2786  001A92  0A80               	xorlw	128
  2787  001A94  0101               	movlb	1	; () banked
  2788  001A96  5922               	subwfb	(??_main+8)& (0+255),w,b
  2789  001A98  B0D8               	btfsc	status,0,c
  2790  001A9A  D006               	goto	l7817
  2791                           
  2792                           ; BSR set to: 1
  2793                           ;main.c: 183: {
  2794                           ;main.c: 184: terminate = 1;
  2795  001A9C  0E00               	movlw	0
  2796  001A9E  0101               	movlb	1	; () banked
  2797  001AA0  6F56               	movwf	(_terminate+1)& (0+255),b
  2798  001AA2  0E01               	movlw	1
  2799  001AA4  6F55               	movwf	_terminate& (0+255),b
  2800                           
  2801                           ;main.c: 185: break;
  2802  001AA6  D00C               	goto	l7821
  2803  001AA8                     l7817:
  2804  001AA8  0101               	movlb	1	; () banked
  2805  001AAA  514B               	movf	_batteryDetected& (0+255),w,b
  2806  001AAC  0101               	movlb	1	; () banked
  2807  001AAE  114C               	iorwf	(_batteryDetected+1)& (0+255),w,b
  2808  001AB0  A4D8               	btfss	status,2,c
  2809  001AB2  D006               	goto	l7821
  2810                           
  2811                           ; BSR set to: 1
  2812  001AB4  0101               	movlb	1	; () banked
  2813  001AB6  5155               	movf	_terminate& (0+255),w,b
  2814  001AB8  0101               	movlb	1	; () banked
  2815  001ABA  1156               	iorwf	(_terminate+1)& (0+255),w,b
  2816  001ABC  B4D8               	btfsc	status,2,c
  2817  001ABE  D5FF               	goto	l7791
  2818  001AC0                     l7821:
  2819                           
  2820                           ; BSR set to: 1
  2821                           ;main.c: 186: }
  2822                           ;main.c: 187: }
  2823                           ;main.c: 189: if(terminate)break;
  2824  001AC0  0101               	movlb	1	; () banked
  2825  001AC2  5155               	movf	_terminate& (0+255),w,b
  2826  001AC4  0101               	movlb	1	; () banked
  2827  001AC6  1156               	iorwf	(_terminate+1)& (0+255),w,b
  2828  001AC8  A4D8               	btfss	status,2,c
  2829  001ACA  D00C               	goto	l7831
  2830                           
  2831                           ; BSR set to: 1
  2832                           ;main.c: 191: sortBattery();
  2833                           
  2834                           ; BSR set to: 1
  2835                           
  2836                           ; BSR set to: 1
  2837  001ACC  EC05  F007         	call	_sortBattery	;wreg free
  2838                           
  2839                           ;main.c: 194: lastBatteryTime = time;
  2840  001AD0  C147  F13D         	movff	_time,main@lastBatteryTime
  2841  001AD4  C148  F13E         	movff	_time+1,main@lastBatteryTime+1
  2842                           
  2843                           ;main.c: 195: batteryDetected = 0;
  2844  001AD8  0E00               	movlw	0
  2845  001ADA  0101               	movlb	1	; () banked
  2846  001ADC  6F4C               	movwf	(_batteryDetected+1)& (0+255),b
  2847  001ADE  0E00               	movlw	0
  2848  001AE0  6F4B               	movwf	_batteryDetected& (0+255),b
  2849                           
  2850                           ; BSR set to: 1
  2851  001AE2  D575               	goto	l7783
  2852  001AE4                     l7831:
  2853                           
  2854                           ; BSR set to: 1
  2855                           ;main.c: 196: }
  2856                           ;main.c: 199: setAngle(conveyorServo, 90);
  2857  001AE4  0E51               	movlw	low _conveyorServo
  2858  001AE6  0100               	movlb	0	; () banked
  2859  001AE8  6FD0               	movwf	setAngle@motor& (0+255),b
  2860  001AEA  0EFE               	movlw	high _conveyorServo
  2861  001AEC  0100               	movlb	0	; () banked
  2862  001AEE  6FD1               	movwf	(setAngle@motor+1)& (0+255),b
  2863  001AF0  0E00               	movlw	0
  2864  001AF2  0100               	movlb	0	; () banked
  2865  001AF4  6FD3               	movwf	(setAngle@angle+1)& (0+255),b
  2866  001AF6  0E5A               	movlw	90
  2867  001AF8  6FD2               	movwf	setAngle@angle& (0+255),b
  2868  001AFA  EC77  F01B         	call	_setAngle	;wreg free
  2869                           
  2870                           ;main.c: 200: digitalWrite(cylinderMotor1, 0);
  2871  001AFE  0E55               	movlw	low _cylinderMotor1
  2872  001B00  6E25               	movwf	digitalWrite@pin,c
  2873  001B02  0EFE               	movlw	high _cylinderMotor1
  2874  001B04  6E26               	movwf	digitalWrite@pin+1,c
  2875  001B06  0E00               	movlw	0
  2876  001B08  6E28               	movwf	digitalWrite@val+1,c
  2877  001B0A  0E00               	movlw	0
  2878  001B0C  6E27               	movwf	digitalWrite@val,c
  2879  001B0E  EC97  F018         	call	_digitalWrite	;wreg free
  2880                           
  2881                           ;main.c: 201: digitalWrite(cylinderMotor2, 0);
  2882  001B12  0E59               	movlw	low _cylinderMotor2
  2883  001B14  6E25               	movwf	digitalWrite@pin,c
  2884  001B16  0EFE               	movlw	high _cylinderMotor2
  2885  001B18  6E26               	movwf	digitalWrite@pin+1,c
  2886  001B1A  0E00               	movlw	0
  2887  001B1C  6E28               	movwf	digitalWrite@val+1,c
  2888  001B1E  0E00               	movlw	0
  2889  001B20  6E27               	movwf	digitalWrite@val,c
  2890  001B22  EC97  F018         	call	_digitalWrite	;wreg free
  2891                           
  2892                           ;main.c: 204: int run[7];
  2893                           ;main.c: 205: run[0] = time>>8;
  2894  001B26  C148  F12D         	movff	_time+1,main@run
  2895  001B2A  C149  F12E         	movff	_time+2,main@run+1
  2896                           
  2897                           ;main.c: 206: run[1] = time&0xff;
  2898  001B2E  0101               	movlb	1	; () banked
  2899  001B30  5147               	movf	_time& (0+255),w,b
  2900  001B32  0101               	movlb	1	; () banked
  2901  001B34  6F2F               	movwf	(main@run+2)& (0+255),b
  2902  001B36  6B30               	clrf	(main@run+3)& (0+255),b
  2903                           
  2904                           ; BSR set to: 1
  2905                           ;main.c: 207: run[2] = n_AA;
  2906  001B38  C14F  F131         	movff	_n_AA,main@run+4
  2907  001B3C  C150  F132         	movff	_n_AA+1,main@run+5
  2908                           
  2909                           ; BSR set to: 1
  2910                           ;main.c: 208: run[3] = n_9V;
  2911  001B40  C14D  F133         	movff	_n_9V,main@run+6
  2912  001B44  C14E  F134         	movff	_n_9V+1,main@run+7
  2913                           
  2914                           ; BSR set to: 1
  2915                           ;main.c: 209: run[4] = n_C;
  2916  001B48  C151  F135         	movff	_n_C,main@run+8
  2917  001B4C  C152  F136         	movff	_n_C+1,main@run+9
  2918                           
  2919                           ; BSR set to: 1
  2920                           ;main.c: 210: run[5] = n_OTHER;
  2921  001B50  C153  F137         	movff	_n_OTHER,main@run+10
  2922  001B54  C154  F138         	movff	_n_OTHER+1,main@run+11
  2923                           
  2924                           ; BSR set to: 1
  2925                           ;main.c: 212: saveNewRun(run);
  2926  001B58  0E2D               	movlw	low main@run
  2927  001B5A  0100               	movlb	0	; () banked
  2928  001B5C  6F8C               	movwf	saveNewRun@data& (0+255),b
  2929  001B5E  0E01               	movlw	high main@run
  2930  001B60  0100               	movlb	0	; () banked
  2931  001B62  6F8D               	movwf	(saveNewRun@data+1)& (0+255),b
  2932  001B64  EC1B  F01A         	call	_saveNewRun	;wreg free
  2933                           
  2934                           ;main.c: 213: showRunTime(run);
  2935  001B68  0E2D               	movlw	low main@run
  2936  001B6A  0100               	movlb	0	; () banked
  2937  001B6C  6FEB               	movwf	showRunTime@run& (0+255),b
  2938  001B6E  0E01               	movlw	high main@run
  2939  001B70  0100               	movlb	0	; () banked
  2940  001B72  6FEC               	movwf	(showRunTime@run+1)& (0+255),b
  2941  001B74  ECFA  F012         	call	_showRunTime	;wreg free
  2942                           
  2943                           ;main.c: 214: showRunStats(run);
  2944  001B78  0E2D               	movlw	low main@run
  2945  001B7A  0100               	movlb	0	; () banked
  2946  001B7C  6FEB               	movwf	showRunStats@run& (0+255),b
  2947  001B7E  0E01               	movlw	high main@run
  2948  001B80  0100               	movlb	0	; () banked
  2949  001B82  6FEC               	movwf	(showRunStats@run+1)& (0+255),b
  2950  001B84  ECF5  F01C         	call	_showRunStats	;wreg free
  2951  001B88  D4B9               	goto	l7763
  2952  001B8A                     l174:
  2953  001B8A  D7FF               	goto	l174
  2954  001B8C                     __end_of_main:
  2955                           	opt stack 0
  2956                           tblptru	equ	0xFF8
  2957                           tblptrh	equ	0xFF7
  2958                           tblptrl	equ	0xFF6
  2959                           tablat	equ	0xFF5
  2960                           postinc0	equ	0xFEE
  2961                           wreg	equ	0xFE8
  2962                           postdec1	equ	0xFE5
  2963                           fsr1l	equ	0xFE1
  2964                           status	equ	0xFD8
  2965                           
  2966 ;; *************** function _sortBattery *****************
  2967 ;; Defined at:
  2968 ;;		line 222 in file "main.c"
  2969 ;; Parameters:    Size  Location     Type
  2970 ;;		None
  2971 ;; Auto vars:     Size  Location     Type
  2972 ;;  V               3   23[BANK1 ] float 
  2973 ;;  i               3   20[BANK1 ] float 
  2974 ;;  V               3   17[BANK1 ] float 
  2975 ;;  V_sum           3   12[BANK1 ] float 
  2976 ;;  V_max           3    7[BANK1 ] float 
  2977 ;;  V_float         3    2[BANK1 ] float 
  2978 ;;  pos_v_counte    2   15[BANK1 ] int 
  2979 ;;  targetAngle     2   10[BANK1 ] int 
  2980 ;;  signal          2    5[BANK1 ] int 
  2981 ;; Return value:  Size  Location     Type
  2982 ;;                  1    wreg      void 
  2983 ;; Registers used:
  2984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2985 ;; Tracked objects:
  2986 ;;		On entry : 0/0
  2987 ;;		On exit  : 0/0
  2988 ;;		Unchanged: 0/0
  2989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2991 ;;      Locals:         0       0      26       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2992 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2993 ;;      Totals:         0       2      26       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2994 ;;Total ram usage:       28 bytes
  2995 ;; Hardware stack levels used:    1
  2996 ;; Hardware stack levels required when called:    8
  2997 ;; This function calls:
  2998 ;;		___altoft
  2999 ;;		___awtoft
  3000 ;;		___ftadd
  3001 ;;		___ftdiv
  3002 ;;		___ftge
  3003 ;;		___ftmul
  3004 ;;		___ftsub
  3005 ;;		___fttol
  3006 ;;		_analogRead
  3007 ;;		_digitalRead
  3008 ;;		_digitalWrite
  3009 ;;		_lcdClear
  3010 ;;		_lcdHome
  3011 ;;		_printf
  3012 ;;		_readKeypad
  3013 ;;		_setAngle
  3014 ;; This function is called by:
  3015 ;;		_main
  3016 ;; This function uses a non-reentrant model
  3017 ;;
  3018                           
  3019                           	psect	text1
  3020  000E0A                     __ptext1:
  3021                           	opt stack 0
  3022  000E0A                     _sortBattery:
  3023                           	opt stack 22
  3024                           
  3025                           ;main.c: 225: setAngle(conveyorServo, 90);
  3026                           
  3027                           ;incstack = 0
  3028  000E0A  0E51               	movlw	low _conveyorServo
  3029  000E0C  0100               	movlb	0	; () banked
  3030  000E0E  6FD0               	movwf	setAngle@motor& (0+255),b
  3031  000E10  0EFE               	movlw	high _conveyorServo
  3032  000E12  0100               	movlb	0	; () banked
  3033  000E14  6FD1               	movwf	(setAngle@motor+1)& (0+255),b
  3034  000E16  0E00               	movlw	0
  3035  000E18  0100               	movlb	0	; () banked
  3036  000E1A  6FD3               	movwf	(setAngle@angle+1)& (0+255),b
  3037  000E1C  0E5A               	movlw	90
  3038  000E1E  6FD2               	movwf	setAngle@angle& (0+255),b
  3039  000E20  EC77  F01B         	call	_setAngle	;wreg free
  3040                           
  3041                           ;main.c: 226: digitalWrite(cylinderMotor1, 0);
  3042  000E24  0E55               	movlw	low _cylinderMotor1
  3043  000E26  6E25               	movwf	digitalWrite@pin,c
  3044  000E28  0EFE               	movlw	high _cylinderMotor1
  3045  000E2A  6E26               	movwf	digitalWrite@pin+1,c
  3046  000E2C  0E00               	movlw	0
  3047  000E2E  6E28               	movwf	digitalWrite@val+1,c
  3048  000E30  0E00               	movlw	0
  3049  000E32  6E27               	movwf	digitalWrite@val,c
  3050  000E34  EC97  F018         	call	_digitalWrite	;wreg free
  3051                           
  3052                           ;main.c: 227: digitalWrite(cylinderMotor2, 0);
  3053  000E38  0E59               	movlw	low _cylinderMotor2
  3054  000E3A  6E25               	movwf	digitalWrite@pin,c
  3055  000E3C  0EFE               	movlw	high _cylinderMotor2
  3056  000E3E  6E26               	movwf	digitalWrite@pin+1,c
  3057  000E40  0E00               	movlw	0
  3058  000E42  6E28               	movwf	digitalWrite@val+1,c
  3059  000E44  0E00               	movlw	0
  3060  000E46  6E27               	movwf	digitalWrite@val,c
  3061  000E48  EC97  F018         	call	_digitalWrite	;wreg free
  3062                           
  3063                           ;main.c: 230: _delay((unsigned long)((1000)*(10000000/4000.0)));
  3064  000E4C  0E0D               	movlw	13
  3065  000E4E  0100               	movlb	0	; () banked
  3066  000E50  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  3067  000E52  0EAF               	movlw	175
  3068  000E54  0100               	movlb	0	; () banked
  3069  000E56  6FEB               	movwf	??_sortBattery& (0+255),b
  3070  000E58  0EB6               	movlw	182
  3071  000E5A                     u8427:
  3072  000E5A  2EE8               	decfsz	wreg,f,c
  3073  000E5C  D7FE               	bra	u8427
  3074  000E5E  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  3075  000E60  D7FC               	bra	u8427
  3076  000E62  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  3077  000E64  D7FA               	bra	u8427
  3078  000E66  F000               	nop	
  3079                           
  3080                           ;main.c: 232: float V_max = 0;
  3081  000E68  0E00               	movlw	0
  3082  000E6A  0101               	movlb	1	; () banked
  3083  000E6C  6F07               	movwf	sortBattery@V_max& (0+255),b
  3084  000E6E  0E00               	movlw	0
  3085  000E70  0101               	movlb	1	; () banked
  3086  000E72  6F08               	movwf	(sortBattery@V_max+1)& (0+255),b
  3087  000E74  0E00               	movlw	0
  3088  000E76  0101               	movlb	1	; () banked
  3089  000E78  6F09               	movwf	(sortBattery@V_max+2)& (0+255),b
  3090                           
  3091                           ; BSR set to: 1
  3092                           ;main.c: 233: float V_sum = 0;
  3093  000E7A  0E00               	movlw	0
  3094  000E7C  0101               	movlb	1	; () banked
  3095  000E7E  6F0C               	movwf	sortBattery@V_sum& (0+255),b
  3096  000E80  0E00               	movlw	0
  3097  000E82  0101               	movlb	1	; () banked
  3098  000E84  6F0D               	movwf	(sortBattery@V_sum+1)& (0+255),b
  3099  000E86  0E00               	movlw	0
  3100  000E88  0101               	movlb	1	; () banked
  3101  000E8A  6F0E               	movwf	(sortBattery@V_sum+2)& (0+255),b
  3102                           
  3103                           ; BSR set to: 1
  3104                           ;main.c: 234: float V_float = 0;
  3105  000E8C  0E00               	movlw	0
  3106  000E8E  0101               	movlb	1	; () banked
  3107  000E90  6F02               	movwf	sortBattery@V_float& (0+255),b
  3108  000E92  0E00               	movlw	0
  3109  000E94  0101               	movlb	1	; () banked
  3110  000E96  6F03               	movwf	(sortBattery@V_float+1)& (0+255),b
  3111  000E98  0E00               	movlw	0
  3112  000E9A  0101               	movlb	1	; () banked
  3113  000E9C  6F04               	movwf	(sortBattery@V_float+2)& (0+255),b
  3114                           
  3115                           ; BSR set to: 1
  3116                           ;main.c: 235: int pos_v_counter = 1;
  3117  000E9E  0E00               	movlw	0
  3118  000EA0  0101               	movlb	1	; () banked
  3119  000EA2  6F10               	movwf	(sortBattery@pos_v_counter+1)& (0+255),b
  3120  000EA4  0E01               	movlw	1
  3121  000EA6  6F0F               	movwf	sortBattery@pos_v_counter& (0+255),b
  3122                           
  3123                           ; BSR set to: 1
  3124                           ;main.c: 236: int signal = 0;
  3125  000EA8  0E00               	movlw	0
  3126  000EAA  0101               	movlb	1	; () banked
  3127  000EAC  6F06               	movwf	(sortBattery@signal+1)& (0+255),b
  3128  000EAE  0E00               	movlw	0
  3129  000EB0  6F05               	movwf	sortBattery@signal& (0+255),b
  3130                           
  3131                           ; BSR set to: 1
  3132                           ;main.c: 240: for(float i = (float)padAngle_NEUTRAL; i > padAngle_CLOSE; i -= 0.2) {
  3133  000EB2  0E45               	movlw	low _padAngle_NEUTRAL
  3134  000EB4  6EF6               	movwf	tblptrl,c
  3135  000EB6                     	if	1	;There is more than 1 active tblptr byte
  3136  000EB6  0EFE               	movlw	high _padAngle_NEUTRAL
  3137  000EB8  6EF7               	movwf	tblptrh,c
  3138  000EBA                     	endif
  3139  000EBA                     	if	0	;There are less than 3 active tblptr bytes
  3140  000EBA                     	endif
  3141  000EBA  0009               	tblrd		*+
  3142  000EBC  CFF5 F02D          	movff	tablat,___awtoft@c
  3143  000EC0  000A               	tblrd		*-
  3144  000EC2  CFF5 F02E          	movff	tablat,___awtoft@c+1
  3145  000EC6  ECFE  F021         	call	___awtoft	;wreg free
  3146  000ECA  C02D  F114         	movff	?___awtoft,sortBattery@i
  3147  000ECE  C02E  F115         	movff	?___awtoft+1,sortBattery@i+1
  3148  000ED2  C02F  F116         	movff	?___awtoft+2,sortBattery@i+2
  3149  000ED6  0E43               	movlw	low _padAngle_CLOSE
  3150  000ED8  6EF6               	movwf	tblptrl,c
  3151  000EDA                     	if	1	;There is more than 1 active tblptr byte
  3152  000EDA  0EFE               	movlw	high _padAngle_CLOSE
  3153  000EDC  6EF7               	movwf	tblptrh,c
  3154  000EDE                     	endif
  3155  000EDE                     	if	0	;There are less than 3 active tblptr bytes
  3156  000EDE                     	endif
  3157  000EDE  0009               	tblrd		*+
  3158  000EE0  CFF5 F02D          	movff	tablat,___awtoft@c
  3159  000EE4  000A               	tblrd		*-
  3160  000EE6  CFF5 F02E          	movff	tablat,___awtoft@c+1
  3161  000EEA  ECFE  F021         	call	___awtoft	;wreg free
  3162  000EEE  C02D  F031         	movff	?___awtoft,___ftge@ff1
  3163  000EF2  C02E  F032         	movff	?___awtoft+1,___ftge@ff1+1
  3164  000EF6  C02F  F033         	movff	?___awtoft+2,___ftge@ff1+2
  3165  000EFA  C114  F034         	movff	sortBattery@i,___ftge@ff2
  3166  000EFE  C115  F035         	movff	sortBattery@i+1,___ftge@ff2+1
  3167  000F02  C116  F036         	movff	sortBattery@i+2,___ftge@ff2+2
  3168  000F06  EC95  F01D         	call	___ftge	;wreg free
  3169  000F0A  B0D8               	btfsc	status,0,c
  3170  000F0C  D170               	goto	l7661
  3171                           
  3172                           ;main.c: 241: setAngle(padServo, i);
  3173  000F0E  C114  F0AA         	movff	sortBattery@i,___fttol@f1
  3174  000F12  C115  F0AB         	movff	sortBattery@i+1,___fttol@f1+1
  3175  000F16  C116  F0AC         	movff	sortBattery@i+2,___fttol@f1+2
  3176  000F1A  ECBA  F015         	call	___fttol	;wreg free
  3177  000F1E  C0AA  F100         	movff	?___fttol,_sortBattery$1418
  3178  000F22  C0AB  F101         	movff	?___fttol+1,_sortBattery$1418+1
  3179                           
  3180                           ;main.c: 241: setAngle(padServo, i);
  3181  000F26  0E5D               	movlw	low _padServo
  3182  000F28  0100               	movlb	0	; () banked
  3183  000F2A  6FD0               	movwf	setAngle@motor& (0+255),b
  3184  000F2C  0EFE               	movlw	high _padServo
  3185  000F2E  0100               	movlb	0	; () banked
  3186  000F30  6FD1               	movwf	(setAngle@motor+1)& (0+255),b
  3187  000F32  C100  F0D2         	movff	_sortBattery$1418,setAngle@angle
  3188  000F36  C101  F0D3         	movff	_sortBattery$1418+1,setAngle@angle+1
  3189  000F3A  EC77  F01B         	call	_setAngle	;wreg free
  3190                           
  3191                           ;main.c: 242: _delay((unsigned long)((100)*(10000000/4000000.0)));
  3192  000F3E  0E53               	movlw	83
  3193  000F40                     u8437:
  3194  000F40  2EE8               	decfsz	wreg,f,c
  3195  000F42  D7FE               	bra	u8437
  3196  000F44  F000               	nop	
  3197                           
  3198                           ;main.c: 244: digitalWrite(AA_float, 1);
  3199  000F46  0E4F               	movlw	low _AA_float
  3200  000F48  6E25               	movwf	digitalWrite@pin,c
  3201  000F4A  0E00               	movlw	high _AA_float
  3202  000F4C  6E26               	movwf	digitalWrite@pin+1,c
  3203  000F4E  0E00               	movlw	0
  3204  000F50  6E28               	movwf	digitalWrite@val+1,c
  3205  000F52  0E01               	movlw	1
  3206  000F54  6E27               	movwf	digitalWrite@val,c
  3207  000F56  EC97  F018         	call	_digitalWrite	;wreg free
  3208                           
  3209                           ;main.c: 245: float V = analogRead(padPin3[1]) / resolution * Vcc;
  3210  000F5A  0E3C               	movlw	low _resolution
  3211  000F5C  6EF6               	movwf	tblptrl,c
  3212  000F5E                     	if	1	;There is more than 1 active tblptr byte
  3213  000F5E  0EFE               	movlw	high _resolution
  3214  000F60  6EF7               	movwf	tblptrh,c
  3215  000F62                     	endif
  3216  000F62                     	if	0	;There are less than 3 active tblptr bytes
  3217  000F62                     	endif
  3218  000F62  0009               	tblrd		*+
  3219  000F64  CFF5 F092          	movff	tablat,___ftdiv@f2
  3220  000F68  0009               	tblrd		*+
  3221  000F6A  CFF5 F093          	movff	tablat,___ftdiv@f2+1
  3222  000F6E  000A               	tblrd		*-
  3223  000F70  CFF5 F094          	movff	tablat,___ftdiv@f2+2
  3224  000F74  C044  F025         	movff	_padPin3+2,analogRead@channel
  3225  000F78  C045  F026         	movff	_padPin3+3,analogRead@channel+1
  3226  000F7C  ECE2  F021         	call	_analogRead	;wreg free
  3227  000F80  C025  F02D         	movff	?_analogRead,___altoft@c
  3228  000F84  C026  F02E         	movff	?_analogRead+1,___altoft@c+1
  3229  000F88  C027  F02F         	movff	?_analogRead+2,___altoft@c+2
  3230  000F8C  C028  F030         	movff	?_analogRead+3,___altoft@c+3
  3231  000F90  ECE8  F01E         	call	___altoft	;wreg free
  3232  000F94  C02D  F08F         	movff	?___altoft,___ftdiv@f1
  3233  000F98  C02E  F090         	movff	?___altoft+1,___ftdiv@f1+1
  3234  000F9C  C02F  F091         	movff	?___altoft+2,___ftdiv@f1+2
  3235  000FA0  EC14  F015         	call	___ftdiv	;wreg free
  3236  000FA4  C08F  F080         	movff	?___ftdiv,___ftmul@f1
  3237  000FA8  C090  F081         	movff	?___ftdiv+1,___ftmul@f1+1
  3238  000FAC  C091  F082         	movff	?___ftdiv+2,___ftmul@f1+2
  3239  000FB0  0E39               	movlw	low _Vcc
  3240  000FB2  6EF6               	movwf	tblptrl,c
  3241  000FB4                     	if	1	;There is more than 1 active tblptr byte
  3242  000FB4  0EFE               	movlw	high _Vcc
  3243  000FB6  6EF7               	movwf	tblptrh,c
  3244  000FB8                     	endif
  3245  000FB8                     	if	0	;There are less than 3 active tblptr bytes
  3246  000FB8                     	endif
  3247  000FB8  0009               	tblrd		*+
  3248  000FBA  CFF5 F083          	movff	tablat,___ftmul@f2
  3249  000FBE  0009               	tblrd		*+
  3250  000FC0  CFF5 F084          	movff	tablat,___ftmul@f2+1
  3251  000FC4  000A               	tblrd		*-
  3252  000FC6  CFF5 F085          	movff	tablat,___ftmul@f2+2
  3253  000FCA  EC65  F014         	call	___ftmul	;wreg free
  3254  000FCE  C080  F117         	movff	?___ftmul,sortBattery@V
  3255  000FD2  C081  F118         	movff	?___ftmul+1,sortBattery@V+1
  3256  000FD6  C082  F119         	movff	?___ftmul+2,sortBattery@V+2
  3257                           
  3258                           ;main.c: 247: if(V > 0.1)
  3259  000FDA  0ECD               	movlw	205
  3260  000FDC  6E31               	movwf	___ftge@ff1,c
  3261  000FDE  0ECC               	movlw	204
  3262  000FE0  6E32               	movwf	___ftge@ff1+1,c
  3263  000FE2  0E3D               	movlw	61
  3264  000FE4  6E33               	movwf	___ftge@ff1+2,c
  3265  000FE6  C117  F034         	movff	sortBattery@V,___ftge@ff2
  3266  000FEA  C118  F035         	movff	sortBattery@V+1,___ftge@ff2+1
  3267  000FEE  C119  F036         	movff	sortBattery@V+2,___ftge@ff2+2
  3268  000FF2  EC95  F01D         	call	___ftge	;wreg free
  3269  000FF6  B0D8               	btfsc	status,0,c
  3270  000FF8  D0C8               	goto	l182
  3271                           
  3272                           ;main.c: 248: {
  3273                           ;main.c: 249: pos_v_counter++;
  3274  000FFA  0101               	movlb	1	; () banked
  3275  000FFC  4B0F               	infsnz	sortBattery@pos_v_counter& (0+255),f,b
  3276  000FFE  2B10               	incf	(sortBattery@pos_v_counter+1)& (0+255),f,b
  3277                           
  3278                           ; BSR set to: 1
  3279                           ;main.c: 250: signal = digitalRead(padPin1)<<1;
  3280  001000  0E53               	movlw	low _padPin1
  3281  001002  6E25               	movwf	digitalRead@pin,c
  3282  001004  0E00               	movlw	high _padPin1
  3283  001006  6E26               	movwf	digitalRead@pin+1,c
  3284  001008  EC35  F012         	call	_digitalRead	;wreg free
  3285  00100C  90D8               	bcf	status,0,c
  3286  00100E  3425               	rlcf	?_digitalRead,w,c
  3287  001010  0101               	movlb	1	; () banked
  3288  001012  6F05               	movwf	sortBattery@signal& (0+255),b
  3289  001014  3426               	rlcf	?_digitalRead+1,w,c
  3290  001016  0101               	movlb	1	; () banked
  3291  001018  6F06               	movwf	(sortBattery@signal+1)& (0+255),b
  3292                           
  3293                           ; BSR set to: 1
  3294                           ;main.c: 251: signal |= digitalRead(padPin2)<<0;
  3295  00101A  0E57               	movlw	low _padPin2
  3296  00101C  6E25               	movwf	digitalRead@pin,c
  3297  00101E  0E00               	movlw	high _padPin2
  3298  001020  6E26               	movwf	digitalRead@pin+1,c
  3299  001022  EC35  F012         	call	_digitalRead	;wreg free
  3300  001026  5025               	movf	?_digitalRead,w,c
  3301  001028  0101               	movlb	1	; () banked
  3302  00102A  1305               	iorwf	sortBattery@signal& (0+255),f,b
  3303  00102C  5026               	movf	?_digitalRead+1,w,c
  3304  00102E  0101               	movlb	1	; () banked
  3305  001030  1306               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  3306                           
  3307                           ; BSR set to: 1
  3308                           ;main.c: 253: if(V > V_max)V_max = V;
  3309  001032  C107  F031         	movff	sortBattery@V_max,___ftge@ff1
  3310  001036  C108  F032         	movff	sortBattery@V_max+1,___ftge@ff1+1
  3311  00103A  C109  F033         	movff	sortBattery@V_max+2,___ftge@ff1+2
  3312  00103E  C117  F034         	movff	sortBattery@V,___ftge@ff2
  3313  001042  C118  F035         	movff	sortBattery@V+1,___ftge@ff2+1
  3314  001046  C119  F036         	movff	sortBattery@V+2,___ftge@ff2+2
  3315  00104A  EC95  F01D         	call	___ftge	;wreg free
  3316  00104E  B0D8               	btfsc	status,0,c
  3317  001050  D006               	goto	l7647
  3318  001052  C117  F107         	movff	sortBattery@V,sortBattery@V_max
  3319  001056  C118  F108         	movff	sortBattery@V+1,sortBattery@V_max+1
  3320  00105A  C119  F109         	movff	sortBattery@V+2,sortBattery@V_max+2
  3321  00105E                     l7647:
  3322                           
  3323                           ;main.c: 256: digitalWrite(AA_float, 0);
  3324  00105E  0E4F               	movlw	low _AA_float
  3325  001060  6E25               	movwf	digitalWrite@pin,c
  3326  001062  0E00               	movlw	high _AA_float
  3327  001064  6E26               	movwf	digitalWrite@pin+1,c
  3328  001066  0E00               	movlw	0
  3329  001068  6E28               	movwf	digitalWrite@val+1,c
  3330  00106A  0E00               	movlw	0
  3331  00106C  6E27               	movwf	digitalWrite@val,c
  3332  00106E  EC97  F018         	call	_digitalWrite	;wreg free
  3333                           
  3334                           ;main.c: 257: _delay((unsigned long)((1)*(10000000/4000.0)));
  3335  001072  0E04               	movlw	4
  3336  001074  0100               	movlb	0	; () banked
  3337  001076  6FEB               	movwf	??_sortBattery& (0+255),b
  3338  001078  0E3D               	movlw	61
  3339  00107A                     u8447:
  3340  00107A  2EE8               	decfsz	wreg,f,c
  3341  00107C  D7FE               	bra	u8447
  3342  00107E  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  3343  001080  D7FC               	bra	u8447
  3344  001082  D000               	nop2	
  3345                           
  3346                           ;main.c: 258: V_float = analogRead(padPin3[1]) / resolution * Vcc;
  3347  001084  0E3C               	movlw	low _resolution
  3348  001086  6EF6               	movwf	tblptrl,c
  3349  001088                     	if	1	;There is more than 1 active tblptr byte
  3350  001088  0EFE               	movlw	high _resolution
  3351  00108A  6EF7               	movwf	tblptrh,c
  3352  00108C                     	endif
  3353  00108C                     	if	0	;There are less than 3 active tblptr bytes
  3354  00108C                     	endif
  3355  00108C  0009               	tblrd		*+
  3356  00108E  CFF5 F092          	movff	tablat,___ftdiv@f2
  3357  001092  0009               	tblrd		*+
  3358  001094  CFF5 F093          	movff	tablat,___ftdiv@f2+1
  3359  001098  000A               	tblrd		*-
  3360  00109A  CFF5 F094          	movff	tablat,___ftdiv@f2+2
  3361  00109E  C044  F025         	movff	_padPin3+2,analogRead@channel
  3362  0010A2  C045  F026         	movff	_padPin3+3,analogRead@channel+1
  3363  0010A6  ECE2  F021         	call	_analogRead	;wreg free
  3364  0010AA  C025  F02D         	movff	?_analogRead,___altoft@c
  3365  0010AE  C026  F02E         	movff	?_analogRead+1,___altoft@c+1
  3366  0010B2  C027  F02F         	movff	?_analogRead+2,___altoft@c+2
  3367  0010B6  C028  F030         	movff	?_analogRead+3,___altoft@c+3
  3368  0010BA  ECE8  F01E         	call	___altoft	;wreg free
  3369  0010BE  C02D  F08F         	movff	?___altoft,___ftdiv@f1
  3370  0010C2  C02E  F090         	movff	?___altoft+1,___ftdiv@f1+1
  3371  0010C6  C02F  F091         	movff	?___altoft+2,___ftdiv@f1+2
  3372  0010CA  EC14  F015         	call	___ftdiv	;wreg free
  3373  0010CE  C08F  F080         	movff	?___ftdiv,___ftmul@f1
  3374  0010D2  C090  F081         	movff	?___ftdiv+1,___ftmul@f1+1
  3375  0010D6  C091  F082         	movff	?___ftdiv+2,___ftmul@f1+2
  3376  0010DA  0E39               	movlw	low _Vcc
  3377  0010DC  6EF6               	movwf	tblptrl,c
  3378  0010DE                     	if	1	;There is more than 1 active tblptr byte
  3379  0010DE  0EFE               	movlw	high _Vcc
  3380  0010E0  6EF7               	movwf	tblptrh,c
  3381  0010E2                     	endif
  3382  0010E2                     	if	0	;There are less than 3 active tblptr bytes
  3383  0010E2                     	endif
  3384  0010E2  0009               	tblrd		*+
  3385  0010E4  CFF5 F083          	movff	tablat,___ftmul@f2
  3386  0010E8  0009               	tblrd		*+
  3387  0010EA  CFF5 F084          	movff	tablat,___ftmul@f2+1
  3388  0010EE  000A               	tblrd		*-
  3389  0010F0  CFF5 F085          	movff	tablat,___ftmul@f2+2
  3390  0010F4  EC65  F014         	call	___ftmul	;wreg free
  3391  0010F8  C080  F102         	movff	?___ftmul,sortBattery@V_float
  3392  0010FC  C081  F103         	movff	?___ftmul+1,sortBattery@V_float+1
  3393  001100  C082  F104         	movff	?___ftmul+2,sortBattery@V_float+2
  3394                           
  3395                           ;main.c: 261: if(pos_v_counter == 0)V_sum = V;
  3396  001104  0101               	movlb	1	; () banked
  3397  001106  510F               	movf	sortBattery@pos_v_counter& (0+255),w,b
  3398  001108  0101               	movlb	1	; () banked
  3399  00110A  1110               	iorwf	(sortBattery@pos_v_counter+1)& (0+255),w,b
  3400  00110C  A4D8               	btfss	status,2,c
  3401  00110E  D007               	goto	l7657
  3402                           
  3403                           ; BSR set to: 1
  3404  001110  C117  F10C         	movff	sortBattery@V,sortBattery@V_sum
  3405  001114  C118  F10D         	movff	sortBattery@V+1,sortBattery@V_sum+1
  3406  001118  C119  F10E         	movff	sortBattery@V+2,sortBattery@V_sum+2
  3407  00111C  D036               	goto	l182
  3408  00111E                     l7657:
  3409                           
  3410                           ; BSR set to: 1
  3411                           ;main.c: 262: else V_sum = V_sum * 0.7 + V * 0.3;
  3412  00111E  0E33               	movlw	51
  3413  001120  0100               	movlb	0	; () banked
  3414  001122  6F83               	movwf	___ftmul@f2& (0+255),b
  3415  001124  0E33               	movlw	51
  3416  001126  0100               	movlb	0	; () banked
  3417  001128  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  3418  00112A  0E3F               	movlw	63
  3419  00112C  0100               	movlb	0	; () banked
  3420  00112E  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  3421  001130  C10C  F080         	movff	sortBattery@V_sum,___ftmul@f1
  3422  001134  C10D  F081         	movff	sortBattery@V_sum+1,___ftmul@f1+1
  3423  001138  C10E  F082         	movff	sortBattery@V_sum+2,___ftmul@f1+2
  3424  00113C  EC65  F014         	call	___ftmul	;wreg free
  3425  001140  C080  F09E         	movff	?___ftmul,___ftadd@f1
  3426  001144  C081  F09F         	movff	?___ftmul+1,___ftadd@f1+1
  3427  001148  C082  F0A0         	movff	?___ftmul+2,___ftadd@f1+2
  3428  00114C  0E9A               	movlw	154
  3429  00114E  0100               	movlb	0	; () banked
  3430  001150  6F83               	movwf	___ftmul@f2& (0+255),b
  3431  001152  0E99               	movlw	153
  3432  001154  0100               	movlb	0	; () banked
  3433  001156  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  3434  001158  0E3E               	movlw	62
  3435  00115A  0100               	movlb	0	; () banked
  3436  00115C  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  3437  00115E  C117  F080         	movff	sortBattery@V,___ftmul@f1
  3438  001162  C118  F081         	movff	sortBattery@V+1,___ftmul@f1+1
  3439  001166  C119  F082         	movff	sortBattery@V+2,___ftmul@f1+2
  3440  00116A  EC65  F014         	call	___ftmul	;wreg free
  3441  00116E  C080  F0A1         	movff	?___ftmul,___ftadd@f2
  3442  001172  C081  F0A2         	movff	?___ftmul+1,___ftadd@f2+1
  3443  001176  C082  F0A3         	movff	?___ftmul+2,___ftadd@f2+2
  3444  00117A  ECD1  F00F         	call	___ftadd	;wreg free
  3445  00117E  C09E  F10C         	movff	?___ftadd,sortBattery@V_sum
  3446  001182  C09F  F10D         	movff	?___ftadd+1,sortBattery@V_sum+1
  3447  001186  C0A0  F10E         	movff	?___ftadd+2,sortBattery@V_sum+2
  3448  00118A                     l182:
  3449  00118A  C114  F0AA         	movff	sortBattery@i,___ftsub@f1
  3450  00118E  C115  F0AB         	movff	sortBattery@i+1,___ftsub@f1+1
  3451  001192  C116  F0AC         	movff	sortBattery@i+2,___ftsub@f1+2
  3452  001196  0ECD               	movlw	205
  3453  001198  0100               	movlb	0	; () banked
  3454  00119A  6FAD               	movwf	___ftsub@f2& (0+255),b
  3455  00119C  0E4C               	movlw	76
  3456  00119E  0100               	movlb	0	; () banked
  3457  0011A0  6FAE               	movwf	(___ftsub@f2+1)& (0+255),b
  3458  0011A2  0E3E               	movlw	62
  3459  0011A4  0100               	movlb	0	; () banked
  3460  0011A6  6FAF               	movwf	(___ftsub@f2+2)& (0+255),b
  3461  0011A8  EC08  F021         	call	___ftsub	;wreg free
  3462  0011AC  C0AA  F114         	movff	?___ftsub,sortBattery@i
  3463  0011B0  C0AB  F115         	movff	?___ftsub+1,sortBattery@i+1
  3464  0011B4  C0AC  F116         	movff	?___ftsub+2,sortBattery@i+2
  3465  0011B8  0E43               	movlw	low _padAngle_CLOSE
  3466  0011BA  6EF6               	movwf	tblptrl,c
  3467  0011BC                     	if	1	;There is more than 1 active tblptr byte
  3468  0011BC  0EFE               	movlw	high _padAngle_CLOSE
  3469  0011BE  6EF7               	movwf	tblptrh,c
  3470  0011C0                     	endif
  3471  0011C0                     	if	0	;There are less than 3 active tblptr bytes
  3472  0011C0                     	endif
  3473  0011C0  0009               	tblrd		*+
  3474  0011C2  CFF5 F02D          	movff	tablat,___awtoft@c
  3475  0011C6  000A               	tblrd		*-
  3476  0011C8  CFF5 F02E          	movff	tablat,___awtoft@c+1
  3477  0011CC  ECFE  F021         	call	___awtoft	;wreg free
  3478  0011D0  C02D  F031         	movff	?___awtoft,___ftge@ff1
  3479  0011D4  C02E  F032         	movff	?___awtoft+1,___ftge@ff1+1
  3480  0011D8  C02F  F033         	movff	?___awtoft+2,___ftge@ff1+2
  3481  0011DC  C114  F034         	movff	sortBattery@i,___ftge@ff2
  3482  0011E0  C115  F035         	movff	sortBattery@i+1,___ftge@ff2+1
  3483  0011E4  C116  F036         	movff	sortBattery@i+2,___ftge@ff2+2
  3484  0011E8  EC95  F01D         	call	___ftge	;wreg free
  3485  0011EC  D68E               	goto	L2
  3486  0011EE                     l7661:
  3487                           
  3488                           ;main.c: 263: }
  3489                           ;main.c: 264: }
  3490                           ;main.c: 266: int targetAngle;
  3491                           ;main.c: 267: float V = V_sum / pos_v_counter;
  3492  0011EE  C10C  F08F         	movff	sortBattery@V_sum,___ftdiv@f1
  3493  0011F2  C10D  F090         	movff	sortBattery@V_sum+1,___ftdiv@f1+1
  3494  0011F6  C10E  F091         	movff	sortBattery@V_sum+2,___ftdiv@f1+2
  3495  0011FA  C10F  F02D         	movff	sortBattery@pos_v_counter,___awtoft@c
  3496  0011FE  C110  F02E         	movff	sortBattery@pos_v_counter+1,___awtoft@c+1
  3497  001202  ECFE  F021         	call	___awtoft	;wreg free
  3498  001206  C02D  F092         	movff	?___awtoft,___ftdiv@f2
  3499  00120A  C02E  F093         	movff	?___awtoft+1,___ftdiv@f2+1
  3500  00120E  C02F  F094         	movff	?___awtoft+2,___ftdiv@f2+2
  3501  001212  EC14  F015         	call	___ftdiv	;wreg free
  3502  001216  C08F  F111         	movff	?___ftdiv,sortBattery@V_245
  3503  00121A  C090  F112         	movff	?___ftdiv+1,sortBattery@V_245+1
  3504  00121E  C091  F113         	movff	?___ftdiv+2,sortBattery@V_245+2
  3505                           
  3506                           ;main.c: 269: lcdClear();
  3507  001222  EC00  F023         	call	_lcdClear	;wreg free
  3508                           
  3509                           ;main.c: 270: printf("V: %.3f, N: %d\n",V,pos_v_counter);
  3510  001226  0EA5               	movlw	low STR_4
  3511  001228  0100               	movlb	0	; () banked
  3512  00122A  6FB9               	movwf	printf@f& (0+255),b
  3513  00122C  0EFF               	movlw	high STR_4
  3514  00122E  0100               	movlb	0	; () banked
  3515  001230  6FBA               	movwf	(printf@f+1)& (0+255),b
  3516  001232  C111  F0BB         	movff	sortBattery@V_245,?_printf+2
  3517  001236  C112  F0BC         	movff	sortBattery@V_245+1,?_printf+3
  3518  00123A  C113  F0BD         	movff	sortBattery@V_245+2,?_printf+4
  3519  00123E  C10F  F0BE         	movff	sortBattery@pos_v_counter,?_printf+5
  3520  001242  C110  F0BF         	movff	sortBattery@pos_v_counter+1,?_printf+6
  3521  001246  EC09  F000         	call	_printf	;wreg free
  3522                           
  3523                           ;main.c: 271: printf("V_max: %.3f",V_max);
  3524  00124A  0EB5               	movlw	low STR_5
  3525  00124C  0100               	movlb	0	; () banked
  3526  00124E  6FB9               	movwf	printf@f& (0+255),b
  3527  001250  0EFF               	movlw	high STR_5
  3528  001252  0100               	movlb	0	; () banked
  3529  001254  6FBA               	movwf	(printf@f+1)& (0+255),b
  3530  001256  C107  F0BB         	movff	sortBattery@V_max,?_printf+2
  3531  00125A  C108  F0BC         	movff	sortBattery@V_max+1,?_printf+3
  3532  00125E  C109  F0BD         	movff	sortBattery@V_max+2,?_printf+4
  3533  001262  EC09  F000         	call	_printf	;wreg free
  3534                           
  3535                           ;main.c: 272: readKeypad();
  3536  001266  EC32  F022         	call	_readKeypad	;wreg free
  3537                           
  3538                           ;main.c: 273: lcdHome();
  3539  00126A  ECFC  F022         	call	_lcdHome	;wreg free
  3540                           
  3541                           ;main.c: 278: switch(signal){
  3542  00126E  D0BE               	goto	l7711
  3543  001270                     l7671:
  3544                           
  3545                           ;main.c: 280: if(V_float < 0.1){
  3546  001270  C102  F031         	movff	sortBattery@V_float,___ftge@ff1
  3547  001274  C103  F032         	movff	sortBattery@V_float+1,___ftge@ff1+1
  3548  001278  C104  F033         	movff	sortBattery@V_float+2,___ftge@ff1+2
  3549  00127C  0ECD               	movlw	205
  3550  00127E  6E34               	movwf	___ftge@ff2,c
  3551  001280  0ECC               	movlw	204
  3552  001282  6E35               	movwf	___ftge@ff2+1,c
  3553  001284  0E3D               	movlw	61
  3554  001286  6E36               	movwf	___ftge@ff2+2,c
  3555  001288  EC95  F01D         	call	___ftge	;wreg free
  3556  00128C  B0D8               	btfsc	status,0,c
  3557  00128E  D03A               	goto	l7685
  3558                           
  3559                           ;main.c: 281: if(V > V_LIM_AA){ targetAngle = redirectAngle_AA; n_AA+=1;}
  3560  001290  C0F8  F031         	movff	_V_LIM_AA,___ftge@ff1
  3561  001294  C0F9  F032         	movff	_V_LIM_AA+1,___ftge@ff1+1
  3562  001298  C0FA  F033         	movff	_V_LIM_AA+2,___ftge@ff1+2
  3563  00129C  C111  F034         	movff	sortBattery@V_245,___ftge@ff2
  3564  0012A0  C112  F035         	movff	sortBattery@V_245+1,___ftge@ff2+1
  3565  0012A4  C113  F036         	movff	sortBattery@V_245+2,___ftge@ff2+2
  3566  0012A8  EC95  F01D         	call	___ftge	;wreg free
  3567  0012AC  B0D8               	btfsc	status,0,c
  3568  0012AE  D00E               	goto	l7679
  3569  0012B0  0E4B               	movlw	low _redirectAngle_AA
  3570  0012B2  6EF6               	movwf	tblptrl,c
  3571  0012B4                     	if	1	;There is more than 1 active tblptr byte
  3572  0012B4  0EFE               	movlw	high _redirectAngle_AA
  3573  0012B6  6EF7               	movwf	tblptrh,c
  3574  0012B8                     	endif
  3575  0012B8                     	if	0	;There are less than 3 active tblptr bytes
  3576  0012B8                     	endif
  3577  0012B8  0009               	tblrd		*+
  3578  0012BA  CFF5 F10A          	movff	tablat,sortBattery@targetAngle
  3579  0012BE  000A               	tblrd		*-
  3580  0012C0  CFF5 F10B          	movff	tablat,sortBattery@targetAngle+1
  3581  0012C4  0101               	movlb	1	; () banked
  3582  0012C6  4B4F               	infsnz	_n_AA& (0+255),f,b
  3583  0012C8  2B50               	incf	(_n_AA+1)& (0+255),f,b
  3584  0012CA  D00D               	goto	l7683
  3585  0012CC                     l7679:
  3586                           
  3587                           ;main.c: 282: else { targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  3588  0012CC  0E4F               	movlw	low _redirectAngle_OTHER
  3589  0012CE  6EF6               	movwf	tblptrl,c
  3590  0012D0                     	if	1	;There is more than 1 active tblptr byte
  3591  0012D0  0EFE               	movlw	high _redirectAngle_OTHER
  3592  0012D2  6EF7               	movwf	tblptrh,c
  3593  0012D4                     	endif
  3594  0012D4                     	if	0	;There are less than 3 active tblptr bytes
  3595  0012D4                     	endif
  3596  0012D4  0009               	tblrd		*+
  3597  0012D6  CFF5 F10A          	movff	tablat,sortBattery@targetAngle
  3598  0012DA  000A               	tblrd		*-
  3599  0012DC  CFF5 F10B          	movff	tablat,sortBattery@targetAngle+1
  3600  0012E0  0101               	movlb	1	; () banked
  3601  0012E2  4B53               	infsnz	_n_OTHER& (0+255),f,b
  3602  0012E4  2B54               	incf	(_n_OTHER+1)& (0+255),f,b
  3603  0012E6                     l7683:
  3604                           
  3605                           ; BSR set to: 1
  3606                           ;main.c: 283: printf("AA lim: %f",V_LIM_AA);
  3607  0012E6  0ED7               	movlw	low STR_6
  3608  0012E8  0100               	movlb	0	; () banked
  3609  0012EA  6FB9               	movwf	printf@f& (0+255),b
  3610  0012EC  0EFF               	movlw	high STR_6
  3611  0012EE  0100               	movlb	0	; () banked
  3612  0012F0  6FBA               	movwf	(printf@f+1)& (0+255),b
  3613  0012F2  C0F8  F0BB         	movff	_V_LIM_AA,?_printf+2
  3614  0012F6  C0F9  F0BC         	movff	_V_LIM_AA+1,?_printf+3
  3615  0012FA  C0FA  F0BD         	movff	_V_LIM_AA+2,?_printf+4
  3616  0012FE  EC09  F000         	call	_printf	;wreg free
  3617                           
  3618                           ;main.c: 284: break;
  3619  001302  D088               	goto	l7713
  3620  001304                     l7685:
  3621                           
  3622                           ;main.c: 288: if(V > V_LIM_9V) {targetAngle = redirectAngle_9V; n_9V+=1;}
  3623  001304  C0F5  F031         	movff	_V_LIM_9V,___ftge@ff1
  3624  001308  C0F6  F032         	movff	_V_LIM_9V+1,___ftge@ff1+1
  3625  00130C  C0F7  F033         	movff	_V_LIM_9V+2,___ftge@ff1+2
  3626  001310  C111  F034         	movff	sortBattery@V_245,___ftge@ff2
  3627  001314  C112  F035         	movff	sortBattery@V_245+1,___ftge@ff2+1
  3628  001318  C113  F036         	movff	sortBattery@V_245+2,___ftge@ff2+2
  3629  00131C  EC95  F01D         	call	___ftge	;wreg free
  3630  001320  B0D8               	btfsc	status,0,c
  3631  001322  D00E               	goto	l7691
  3632  001324  0E49               	movlw	low _redirectAngle_9V
  3633  001326  6EF6               	movwf	tblptrl,c
  3634  001328                     	if	1	;There is more than 1 active tblptr byte
  3635  001328  0EFE               	movlw	high _redirectAngle_9V
  3636  00132A  6EF7               	movwf	tblptrh,c
  3637  00132C                     	endif
  3638  00132C                     	if	0	;There are less than 3 active tblptr bytes
  3639  00132C                     	endif
  3640  00132C  0009               	tblrd		*+
  3641  00132E  CFF5 F10A          	movff	tablat,sortBattery@targetAngle
  3642  001332  000A               	tblrd		*-
  3643  001334  CFF5 F10B          	movff	tablat,sortBattery@targetAngle+1
  3644  001338  0101               	movlb	1	; () banked
  3645  00133A  4B4D               	infsnz	_n_9V& (0+255),f,b
  3646  00133C  2B4E               	incf	(_n_9V+1)& (0+255),f,b
  3647  00133E  D00D               	goto	l7695
  3648  001340                     l7691:
  3649                           
  3650                           ;main.c: 289: else {targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  3651  001340  0E4F               	movlw	low _redirectAngle_OTHER
  3652  001342  6EF6               	movwf	tblptrl,c
  3653  001344                     	if	1	;There is more than 1 active tblptr byte
  3654  001344  0EFE               	movlw	high _redirectAngle_OTHER
  3655  001346  6EF7               	movwf	tblptrh,c
  3656  001348                     	endif
  3657  001348                     	if	0	;There are less than 3 active tblptr bytes
  3658  001348                     	endif
  3659  001348  0009               	tblrd		*+
  3660  00134A  CFF5 F10A          	movff	tablat,sortBattery@targetAngle
  3661  00134E  000A               	tblrd		*-
  3662  001350  CFF5 F10B          	movff	tablat,sortBattery@targetAngle+1
  3663  001354  0101               	movlb	1	; () banked
  3664  001356  4B53               	infsnz	_n_OTHER& (0+255),f,b
  3665  001358  2B54               	incf	(_n_OTHER+1)& (0+255),f,b
  3666  00135A                     l7695:
  3667                           
  3668                           ; BSR set to: 1
  3669                           ;main.c: 290: printf("9V lim: %f",V_LIM_9V);
  3670  00135A  0EE2               	movlw	low STR_7
  3671  00135C  0100               	movlb	0	; () banked
  3672  00135E  6FB9               	movwf	printf@f& (0+255),b
  3673  001360  0EFF               	movlw	high STR_7
  3674  001362  0100               	movlb	0	; () banked
  3675  001364  6FBA               	movwf	(printf@f+1)& (0+255),b
  3676  001366  C0F5  F0BB         	movff	_V_LIM_9V,?_printf+2
  3677  00136A  C0F6  F0BC         	movff	_V_LIM_9V+1,?_printf+3
  3678  00136E  C0F7  F0BD         	movff	_V_LIM_9V+2,?_printf+4
  3679  001372  EC09  F000         	call	_printf	;wreg free
  3680                           
  3681                           ;main.c: 291: break;
  3682  001376  D04E               	goto	l7713
  3683  001378                     l7697:
  3684                           
  3685                           ;main.c: 293: if(V > V_LIM_C) {targetAngle = redirectAngle_C; n_C+=1;}
  3686  001378  C0FB  F031         	movff	_V_LIM_C,___ftge@ff1
  3687  00137C  C0FC  F032         	movff	_V_LIM_C+1,___ftge@ff1+1
  3688  001380  C0FD  F033         	movff	_V_LIM_C+2,___ftge@ff1+2
  3689  001384  C111  F034         	movff	sortBattery@V_245,___ftge@ff2
  3690  001388  C112  F035         	movff	sortBattery@V_245+1,___ftge@ff2+1
  3691  00138C  C113  F036         	movff	sortBattery@V_245+2,___ftge@ff2+2
  3692  001390  EC95  F01D         	call	___ftge	;wreg free
  3693  001394  B0D8               	btfsc	status,0,c
  3694  001396  D00E               	goto	l7703
  3695  001398  0E4D               	movlw	low _redirectAngle_C
  3696  00139A  6EF6               	movwf	tblptrl,c
  3697  00139C                     	if	1	;There is more than 1 active tblptr byte
  3698  00139C  0EFE               	movlw	high _redirectAngle_C
  3699  00139E  6EF7               	movwf	tblptrh,c
  3700  0013A0                     	endif
  3701  0013A0                     	if	0	;There are less than 3 active tblptr bytes
  3702  0013A0                     	endif
  3703  0013A0  0009               	tblrd		*+
  3704  0013A2  CFF5 F10A          	movff	tablat,sortBattery@targetAngle
  3705  0013A6  000A               	tblrd		*-
  3706  0013A8  CFF5 F10B          	movff	tablat,sortBattery@targetAngle+1
  3707  0013AC  0101               	movlb	1	; () banked
  3708  0013AE  4B51               	infsnz	_n_C& (0+255),f,b
  3709  0013B0  2B52               	incf	(_n_C+1)& (0+255),f,b
  3710  0013B2  D00D               	goto	l7707
  3711  0013B4                     l7703:
  3712                           
  3713                           ;main.c: 294: else {targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  3714  0013B4  0E4F               	movlw	low _redirectAngle_OTHER
  3715  0013B6  6EF6               	movwf	tblptrl,c
  3716  0013B8                     	if	1	;There is more than 1 active tblptr byte
  3717  0013B8  0EFE               	movlw	high _redirectAngle_OTHER
  3718  0013BA  6EF7               	movwf	tblptrh,c
  3719  0013BC                     	endif
  3720  0013BC                     	if	0	;There are less than 3 active tblptr bytes
  3721  0013BC                     	endif
  3722  0013BC  0009               	tblrd		*+
  3723  0013BE  CFF5 F10A          	movff	tablat,sortBattery@targetAngle
  3724  0013C2  000A               	tblrd		*-
  3725  0013C4  CFF5 F10B          	movff	tablat,sortBattery@targetAngle+1
  3726  0013C8  0101               	movlb	1	; () banked
  3727  0013CA  4B53               	infsnz	_n_OTHER& (0+255),f,b
  3728  0013CC  2B54               	incf	(_n_OTHER+1)& (0+255),f,b
  3729  0013CE                     l7707:
  3730                           
  3731                           ; BSR set to: 1
  3732                           ;main.c: 295: printf("C  lim: %f",V_LIM_C);
  3733  0013CE  0ECC               	movlw	low STR_8
  3734  0013D0  0100               	movlb	0	; () banked
  3735  0013D2  6FB9               	movwf	printf@f& (0+255),b
  3736  0013D4  0EFF               	movlw	high STR_8
  3737  0013D6  0100               	movlb	0	; () banked
  3738  0013D8  6FBA               	movwf	(printf@f+1)& (0+255),b
  3739  0013DA  C0FB  F0BB         	movff	_V_LIM_C,?_printf+2
  3740  0013DE  C0FC  F0BC         	movff	_V_LIM_C+1,?_printf+3
  3741  0013E2  C0FD  F0BD         	movff	_V_LIM_C+2,?_printf+4
  3742  0013E6  EC09  F000         	call	_printf	;wreg free
  3743                           
  3744                           ;main.c: 297: }
  3745                           
  3746                           ;main.c: 296: break;
  3747  0013EA  D014               	goto	l7713
  3748  0013EC                     l7711:
  3749  0013EC  C105  F0EB         	movff	sortBattery@signal,??_sortBattery
  3750  0013F0  C106  F0EC         	movff	sortBattery@signal+1,??_sortBattery+1
  3751                           
  3752                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3753                           ; Switch size 1, requested type "space"
  3754                           ; Number of cases is 1, Range of values is 0 to 0
  3755                           ; switch strategies available:
  3756                           ; Name         Instructions Cycles
  3757                           ; simple_byte            4     3 (average)
  3758                           ;	Chosen strategy is simple_byte
  3759  0013F4  0100               	movlb	0	; () banked
  3760  0013F6  51EC               	movf	(??_sortBattery+1)& (0+255),w,b
  3761  0013F8  0A00               	xorlw	0	; case 0
  3762  0013FA  A4D8               	btfss	status,2,c
  3763  0013FC  D00B               	goto	l7713
  3764                           
  3765                           ; BSR set to: 0
  3766                           ; Switch size 1, requested type "space"
  3767                           ; Number of cases is 3, Range of values is 0 to 2
  3768                           ; switch strategies available:
  3769                           ; Name         Instructions Cycles
  3770                           ; simple_byte           10     6 (average)
  3771                           ;	Chosen strategy is simple_byte
  3772  0013FE  0100               	movlb	0	; () banked
  3773  001400  51EB               	movf	??_sortBattery& (0+255),w,b
  3774  001402  0A00               	xorlw	0	; case 0
  3775  001404  B4D8               	btfsc	status,2,c
  3776  001406  D77E               	goto	l7685
  3777  001408  0A01               	xorlw	1	; case 1
  3778  00140A  B4D8               	btfsc	status,2,c
  3779  00140C  D731               	goto	l7671
  3780  00140E  0A03               	xorlw	3	; case 2
  3781  001410  B4D8               	btfsc	status,2,c
  3782  001412  D7B2               	goto	l7697
  3783  001414                     l7713:
  3784                           
  3785                           ;main.c: 300: readKeypad();
  3786  001414  EC32  F022         	call	_readKeypad	;wreg free
  3787                           
  3788                           ;main.c: 301: setAngle(redirectingServo, targetAngle);
  3789  001418  0E61               	movlw	low _redirectingServo
  3790  00141A  0100               	movlb	0	; () banked
  3791  00141C  6FD0               	movwf	setAngle@motor& (0+255),b
  3792  00141E  0EFE               	movlw	high _redirectingServo
  3793  001420  0100               	movlb	0	; () banked
  3794  001422  6FD1               	movwf	(setAngle@motor+1)& (0+255),b
  3795  001424  C10A  F0D2         	movff	sortBattery@targetAngle,setAngle@angle
  3796  001428  C10B  F0D3         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  3797  00142C  EC77  F01B         	call	_setAngle	;wreg free
  3798                           
  3799                           ;main.c: 302: _delay((unsigned long)((500)*(10000000/4000.0)));
  3800  001430  0E07               	movlw	7
  3801  001432  0100               	movlb	0	; () banked
  3802  001434  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  3803  001436  0E58               	movlw	88
  3804  001438  0100               	movlb	0	; () banked
  3805  00143A  6FEB               	movwf	??_sortBattery& (0+255),b
  3806  00143C  0E59               	movlw	89
  3807  00143E                     u8457:
  3808  00143E  2EE8               	decfsz	wreg,f,c
  3809  001440  D7FE               	bra	u8457
  3810  001442  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  3811  001444  D7FC               	bra	u8457
  3812  001446  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  3813  001448  D7FA               	bra	u8457
  3814  00144A  D000               	nop2	
  3815                           
  3816                           ;main.c: 311: setAngle(padServo, padAngle_OPEN);
  3817  00144C  0E5D               	movlw	low _padServo
  3818  00144E  0100               	movlb	0	; () banked
  3819  001450  6FD0               	movwf	setAngle@motor& (0+255),b
  3820  001452  0EFE               	movlw	high _padServo
  3821  001454  0100               	movlb	0	; () banked
  3822  001456  6FD1               	movwf	(setAngle@motor+1)& (0+255),b
  3823  001458  0E47               	movlw	low _padAngle_OPEN
  3824  00145A  6EF6               	movwf	tblptrl,c
  3825  00145C                     	if	1	;There is more than 1 active tblptr byte
  3826  00145C  0EFE               	movlw	high _padAngle_OPEN
  3827  00145E  6EF7               	movwf	tblptrh,c
  3828  001460                     	endif
  3829  001460                     	if	0	;There are less than 3 active tblptr bytes
  3830  001460                     	endif
  3831  001460  0009               	tblrd		*+
  3832  001462  CFF5 F0D2          	movff	tablat,setAngle@angle
  3833  001466  000A               	tblrd		*-
  3834  001468  CFF5 F0D3          	movff	tablat,setAngle@angle+1
  3835  00146C  EC77  F01B         	call	_setAngle	;wreg free
  3836                           
  3837                           ;main.c: 312: _delay((unsigned long)((1000)*(10000000/4000.0)));
  3838  001470  0E0D               	movlw	13
  3839  001472  0100               	movlb	0	; () banked
  3840  001474  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  3841  001476  0EAF               	movlw	175
  3842  001478  0100               	movlb	0	; () banked
  3843  00147A  6FEB               	movwf	??_sortBattery& (0+255),b
  3844  00147C  0EB6               	movlw	182
  3845  00147E                     u8467:
  3846  00147E  2EE8               	decfsz	wreg,f,c
  3847  001480  D7FE               	bra	u8467
  3848  001482  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  3849  001484  D7FC               	bra	u8467
  3850  001486  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  3851  001488  D7FA               	bra	u8467
  3852  00148A  F000               	nop	
  3853                           
  3854                           ;main.c: 316: setAngle(padServo, padAngle_NEUTRAL);
  3855  00148C  0E5D               	movlw	low _padServo
  3856  00148E  0100               	movlb	0	; () banked
  3857  001490  6FD0               	movwf	setAngle@motor& (0+255),b
  3858  001492  0EFE               	movlw	high _padServo
  3859  001494  0100               	movlb	0	; () banked
  3860  001496  6FD1               	movwf	(setAngle@motor+1)& (0+255),b
  3861  001498  0E45               	movlw	low _padAngle_NEUTRAL
  3862  00149A  6EF6               	movwf	tblptrl,c
  3863  00149C                     	if	1	;There is more than 1 active tblptr byte
  3864  00149C  0EFE               	movlw	high _padAngle_NEUTRAL
  3865  00149E  6EF7               	movwf	tblptrh,c
  3866  0014A0                     	endif
  3867  0014A0                     	if	0	;There are less than 3 active tblptr bytes
  3868  0014A0                     	endif
  3869  0014A0  0009               	tblrd		*+
  3870  0014A2  CFF5 F0D2          	movff	tablat,setAngle@angle
  3871  0014A6  000A               	tblrd		*-
  3872  0014A8  CFF5 F0D3          	movff	tablat,setAngle@angle+1
  3873  0014AC  EC77  F01B         	call	_setAngle	;wreg free
  3874                           
  3875                           ;main.c: 320: setAngle(conveyorServo, 130);
  3876  0014B0  0E51               	movlw	low _conveyorServo
  3877  0014B2  0100               	movlb	0	; () banked
  3878  0014B4  6FD0               	movwf	setAngle@motor& (0+255),b
  3879  0014B6  0EFE               	movlw	high _conveyorServo
  3880  0014B8  0100               	movlb	0	; () banked
  3881  0014BA  6FD1               	movwf	(setAngle@motor+1)& (0+255),b
  3882  0014BC  0E00               	movlw	0
  3883  0014BE  0100               	movlb	0	; () banked
  3884  0014C0  6FD3               	movwf	(setAngle@angle+1)& (0+255),b
  3885  0014C2  0E82               	movlw	130
  3886  0014C4  6FD2               	movwf	setAngle@angle& (0+255),b
  3887  0014C6  EC77  F01B         	call	_setAngle	;wreg free
  3888                           
  3889                           ;main.c: 321: digitalWrite(cylinderMotor2, 0);
  3890  0014CA  0E59               	movlw	low _cylinderMotor2
  3891  0014CC  6E25               	movwf	digitalWrite@pin,c
  3892  0014CE  0EFE               	movlw	high _cylinderMotor2
  3893  0014D0  6E26               	movwf	digitalWrite@pin+1,c
  3894  0014D2  0E00               	movlw	0
  3895  0014D4  6E28               	movwf	digitalWrite@val+1,c
  3896  0014D6  0E00               	movlw	0
  3897  0014D8  6E27               	movwf	digitalWrite@val,c
  3898  0014DA  EC97  F018         	call	_digitalWrite	;wreg free
  3899                           
  3900                           ;main.c: 322: digitalWrite(cylinderMotor1, 1);
  3901  0014DE  0E55               	movlw	low _cylinderMotor1
  3902  0014E0  6E25               	movwf	digitalWrite@pin,c
  3903  0014E2  0EFE               	movlw	high _cylinderMotor1
  3904  0014E4  6E26               	movwf	digitalWrite@pin+1,c
  3905  0014E6  0E00               	movlw	0
  3906  0014E8  6E28               	movwf	digitalWrite@val+1,c
  3907  0014EA  0E01               	movlw	1
  3908  0014EC  6E27               	movwf	digitalWrite@val,c
  3909  0014EE  EC97  F018         	call	_digitalWrite	;wreg free
  3910  0014F2  0012               	return		;funcret
  3911  0014F4                     __end_of_sortBattery:
  3912                           	opt stack 0
  3913                           tblptru	equ	0xFF8
  3914                           tblptrh	equ	0xFF7
  3915                           tblptrl	equ	0xFF6
  3916                           tablat	equ	0xFF5
  3917                           postinc0	equ	0xFEE
  3918                           wreg	equ	0xFE8
  3919                           postdec1	equ	0xFE5
  3920                           fsr1l	equ	0xFE1
  3921                           status	equ	0xFD8
  3922                           
  3923 ;; *************** function _digitalWrite *****************
  3924 ;; Defined at:
  3925 ;;		line 53 in file "iopin.c"
  3926 ;; Parameters:    Size  Location     Type
  3927 ;;  pin             2   36[COMRAM] PTR int 
  3928 ;;		 -> AA_float(4), cylinderMotor2(4), redirectingServo(4), padServo(4), 
  3929 ;;		 -> conveyorServo(4), cylinderMotor1(4), 
  3930 ;;  val             2   38[COMRAM] int 
  3931 ;; Auto vars:     Size  Location     Type
  3932 ;;  p               2   45[COMRAM] int 
  3933 ;; Return value:  Size  Location     Type
  3934 ;;                  1    wreg      void 
  3935 ;; Registers used:
  3936 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3937 ;; Tracked objects:
  3938 ;;		On entry : 0/0
  3939 ;;		On exit  : 0/0
  3940 ;;		Unchanged: 0/0
  3941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3942 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3943 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3944 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3945 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3946 ;;Total ram usage:       11 bytes
  3947 ;; Hardware stack levels used:    1
  3948 ;; Hardware stack levels required when called:    3
  3949 ;; This function calls:
  3950 ;;		Nothing
  3951 ;; This function is called by:
  3952 ;;		_main
  3953 ;;		_sortBattery
  3954 ;; This function uses a non-reentrant model
  3955 ;;
  3956                           
  3957                           	psect	text2
  3958  00312E                     __ptext2:
  3959                           	opt stack 0
  3960  00312E                     _digitalWrite:
  3961                           	opt stack 26
  3962                           
  3963                           ;iopin.c: 54: if(pin){
  3964                           
  3965                           ;incstack = 0
  3966  00312E  5025               	movf	digitalWrite@pin,w,c
  3967  003130  1026               	iorwf	digitalWrite@pin+1,w,c
  3968  003132  B4D8               	btfsc	status,2,c
  3969  003134  0012               	return	
  3970                           
  3971                           ;iopin.c: 55: int p = 1 << pin[1];
  3972  003136  0E02               	movlw	2
  3973  003138  2425               	addwf	digitalWrite@pin,w,c
  3974  00313A  6E29               	movwf	??_digitalWrite& (0+255),c
  3975  00313C  0E00               	movlw	0
  3976  00313E  2026               	addwfc	digitalWrite@pin+1,w,c
  3977  003140  6E2A               	movwf	(??_digitalWrite+1)& (0+255),c
  3978  003142  C029  FFF6         	movff	??_digitalWrite,tblptrl
  3979  003146  C02A  FFF7         	movff	??_digitalWrite+1,tblptrh
  3980  00314A  0E00               	movlw	low (__mediumconst shr (0+16))
  3981  00314C  6EF8               	movwf	tblptru,c
  3982  00314E  0E0F               	movlw	(high __ramtop+-1)
  3983  003150  64F7               	cpfsgt	tblptrh,c
  3984  003152  D003               	bra	u7697
  3985  003154  0008               	tblrd		*
  3986  003156  50F5               	movf	tablat,w,c
  3987  003158  D005               	bra	u7690
  3988  00315A                     u7697:
  3989  00315A  CFF6 FFD9          	movff	tblptrl,fsr2l
  3990  00315E  CFF7 FFDA          	movff	tblptrh,fsr2h
  3991  003162  50DF               	movf	indf2,w,c
  3992  003164                     u7690:
  3993  003164  6E2B               	movwf	(??_digitalWrite+2)& (0+255),c
  3994  003166  0E01               	movlw	1
  3995  003168  6E2C               	movwf	(??_digitalWrite+3)& (0+255),c
  3996  00316A  0E00               	movlw	0
  3997  00316C  6E2D               	movwf	(??_digitalWrite+4)& (0+255),c
  3998  00316E  2A2B               	incf	??_digitalWrite+2,f,c
  3999  003170  D003               	goto	u7704
  4000  003172                     u7705:
  4001  003172  90D8               	bcf	status,0,c
  4002  003174  362C               	rlcf	??_digitalWrite+3,f,c
  4003  003176  362D               	rlcf	??_digitalWrite+4,f,c
  4004  003178                     u7704:
  4005  003178  2E2B               	decfsz	??_digitalWrite+2,f,c
  4006  00317A  D7FB               	goto	u7705
  4007  00317C  C02C  F02E         	movff	??_digitalWrite+3,digitalWrite@p
  4008  003180  C02D  F02F         	movff	??_digitalWrite+4,digitalWrite@p+1
  4009                           
  4010                           ;iopin.c: 56: if(val == 0){
  4011  003184  5027               	movf	digitalWrite@val,w,c
  4012  003186  1028               	iorwf	digitalWrite@val+1,w,c
  4013  003188  A4D8               	btfss	status,2,c
  4014  00318A  D02B               	goto	l7309
  4015                           
  4016                           ;iopin.c: 57: p ^= 0xff;
  4017  00318C  0EFF               	movlw	255
  4018  00318E  1A2E               	xorwf	digitalWrite@p,f,c
  4019                           
  4020                           ;iopin.c: 58: }
  4021                           ;iopin.c: 60: switch(pin[0]){
  4022  003190  D028               	goto	l7309
  4023  003192                     l7285:
  4024  003192  0427               	decf	digitalWrite@val,w,c
  4025  003194  1028               	iorwf	digitalWrite@val+1,w,c
  4026  003196  A4D8               	btfss	status,2,c
  4027  003198  D003               	goto	l7289
  4028  00319A  502E               	movf	digitalWrite@p,w,c
  4029  00319C  1289               	iorwf	3977,f,c	;volatile
  4030  00319E  0012               	return	
  4031  0031A0                     l7289:
  4032                           
  4033                           ;iopin.c: 62: else LATA &= p;
  4034  0031A0  502E               	movf	digitalWrite@p,w,c
  4035  0031A2  1689               	andwf	3977,f,c	;volatile
  4036                           
  4037                           ;iopin.c: 63: break;
  4038  0031A4  0012               	return	
  4039  0031A6                     l7291:
  4040  0031A6  0427               	decf	digitalWrite@val,w,c
  4041  0031A8  1028               	iorwf	digitalWrite@val+1,w,c
  4042  0031AA  A4D8               	btfss	status,2,c
  4043  0031AC  D003               	goto	l7295
  4044  0031AE  502E               	movf	digitalWrite@p,w,c
  4045  0031B0  128A               	iorwf	3978,f,c	;volatile
  4046  0031B2  0012               	return	
  4047  0031B4                     l7295:
  4048                           
  4049                           ;iopin.c: 65: else LATB &= p;
  4050  0031B4  502E               	movf	digitalWrite@p,w,c
  4051  0031B6  168A               	andwf	3978,f,c	;volatile
  4052                           
  4053                           ;iopin.c: 66: break;
  4054  0031B8  0012               	return	
  4055  0031BA                     l7297:
  4056  0031BA  0427               	decf	digitalWrite@val,w,c
  4057  0031BC  1028               	iorwf	digitalWrite@val+1,w,c
  4058  0031BE  A4D8               	btfss	status,2,c
  4059  0031C0  D003               	goto	l7301
  4060  0031C2  502E               	movf	digitalWrite@p,w,c
  4061  0031C4  128B               	iorwf	3979,f,c	;volatile
  4062  0031C6  0012               	return	
  4063  0031C8                     l7301:
  4064                           
  4065                           ;iopin.c: 68: else LATC &= p;
  4066  0031C8  502E               	movf	digitalWrite@p,w,c
  4067  0031CA  168B               	andwf	3979,f,c	;volatile
  4068                           
  4069                           ;iopin.c: 69: break;
  4070  0031CC  0012               	return	
  4071  0031CE                     l7303:
  4072  0031CE  0427               	decf	digitalWrite@val,w,c
  4073  0031D0  1028               	iorwf	digitalWrite@val+1,w,c
  4074  0031D2  A4D8               	btfss	status,2,c
  4075  0031D4  D003               	goto	l7307
  4076  0031D6  502E               	movf	digitalWrite@p,w,c
  4077  0031D8  128C               	iorwf	3980,f,c	;volatile
  4078  0031DA  0012               	return	
  4079  0031DC                     l7307:
  4080                           
  4081                           ;iopin.c: 71: else LATD &= p;
  4082  0031DC  502E               	movf	digitalWrite@p,w,c
  4083  0031DE  168C               	andwf	3980,f,c	;volatile
  4084                           
  4085                           ;iopin.c: 72: }
  4086  0031E0  0012               	return	
  4087  0031E2                     l7309:
  4088  0031E2  C025  FFF6         	movff	digitalWrite@pin,tblptrl
  4089  0031E6  C026  FFF7         	movff	digitalWrite@pin+1,tblptrh
  4090  0031EA  0E00               	movlw	low (__mediumconst shr (0+16))
  4091  0031EC  6EF8               	movwf	tblptru,c
  4092  0031EE  0E0F               	movlw	(high __ramtop+-1)
  4093  0031F0  64F7               	cpfsgt	tblptrh,c
  4094  0031F2  D007               	bra	u7767
  4095  0031F4  0009               	tblrd		*+
  4096  0031F6  CFF5 F029          	movff	tablat,??_digitalWrite
  4097  0031FA  0009               	tblrd		*+
  4098  0031FC  CFF5 F02A          	movff	tablat,??_digitalWrite+1
  4099  003200  D008               	bra	u7760
  4100  003202                     u7767:
  4101  003202  CFF6 FFD9          	movff	tblptrl,fsr2l
  4102  003206  CFF7 FFDA          	movff	tblptrh,fsr2h
  4103  00320A  CFDE F029          	movff	postinc2,??_digitalWrite
  4104  00320E  CFDE F02A          	movff	postinc2,??_digitalWrite+1
  4105  003212                     u7760:
  4106                           
  4107                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4108                           ; Switch size 1, requested type "space"
  4109                           ; Number of cases is 1, Range of values is 0 to 0
  4110                           ; switch strategies available:
  4111                           ; Name         Instructions Cycles
  4112                           ; simple_byte            4     3 (average)
  4113                           ;	Chosen strategy is simple_byte
  4114  003212  502A               	movf	??_digitalWrite+1,w,c
  4115  003214  0A00               	xorlw	0	; case 0
  4116  003216  A4D8               	btfss	status,2,c
  4117  003218  0012               	return	
  4118                           
  4119                           ; Switch size 1, requested type "space"
  4120                           ; Number of cases is 4, Range of values is 0 to 3
  4121                           ; switch strategies available:
  4122                           ; Name         Instructions Cycles
  4123                           ; simple_byte           13     7 (average)
  4124                           ;	Chosen strategy is simple_byte
  4125  00321A  5029               	movf	??_digitalWrite,w,c
  4126  00321C  0A00               	xorlw	0	; case 0
  4127  00321E  B4D8               	btfsc	status,2,c
  4128  003220  D7B8               	goto	l7285
  4129  003222  0A01               	xorlw	1	; case 1
  4130  003224  B4D8               	btfsc	status,2,c
  4131  003226  D7BF               	goto	l7291
  4132  003228  0A03               	xorlw	3	; case 2
  4133  00322A  B4D8               	btfsc	status,2,c
  4134  00322C  D7C6               	goto	l7297
  4135  00322E  0A01               	xorlw	1	; case 3
  4136  003230  A4D8               	btfss	status,2,c
  4137  003232  0012               	return	
  4138  003234  D7CC               	goto	l7303
  4139  003236                     __end_of_digitalWrite:
  4140                           	opt stack 0
  4141                           tblptru	equ	0xFF8
  4142                           tblptrh	equ	0xFF7
  4143                           tblptrl	equ	0xFF6
  4144                           tablat	equ	0xFF5
  4145                           postinc0	equ	0xFEE
  4146                           wreg	equ	0xFE8
  4147                           postdec1	equ	0xFE5
  4148                           fsr1l	equ	0xFE1
  4149                           indf2	equ	0xFDF
  4150                           postinc2	equ	0xFDE
  4151                           fsr2h	equ	0xFDA
  4152                           fsr2l	equ	0xFD9
  4153                           status	equ	0xFD8
  4154                           
  4155 ;; *************** function _digitalRead *****************
  4156 ;; Defined at:
  4157 ;;		line 43 in file "iopin.c"
  4158 ;; Parameters:    Size  Location     Type
  4159 ;;  pin             2   36[COMRAM] PTR int 
  4160 ;;		 -> padPin2(4), padPin1(4), cylinderMotor1(4), 
  4161 ;; Auto vars:     Size  Location     Type
  4162 ;;		None
  4163 ;; Return value:  Size  Location     Type
  4164 ;;                  2   36[COMRAM] int 
  4165 ;; Registers used:
  4166 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4167 ;; Tracked objects:
  4168 ;;		On entry : 0/0
  4169 ;;		On exit  : 0/0
  4170 ;;		Unchanged: 0/0
  4171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4172 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4174 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4175 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4176 ;;Total ram usage:        6 bytes
  4177 ;; Hardware stack levels used:    1
  4178 ;; Hardware stack levels required when called:    3
  4179 ;; This function calls:
  4180 ;;		Nothing
  4181 ;; This function is called by:
  4182 ;;		_main
  4183 ;;		_sortBattery
  4184 ;; This function uses a non-reentrant model
  4185 ;;
  4186                           
  4187                           	psect	text3
  4188  00246A                     __ptext3:
  4189                           	opt stack 0
  4190  00246A                     _digitalRead:
  4191                           	opt stack 26
  4192                           
  4193                           ;iopin.c: 44: switch(pin[0]){
  4194                           
  4195                           ;incstack = 0
  4196  00246A  D098               	goto	l7335
  4197  00246C                     l7317:
  4198  00246C  0E02               	movlw	2
  4199  00246E  2425               	addwf	digitalRead@pin,w,c
  4200  002470  6E27               	movwf	??_digitalRead& (0+255),c
  4201  002472  0E00               	movlw	0
  4202  002474  2026               	addwfc	digitalRead@pin+1,w,c
  4203  002476  6E28               	movwf	(??_digitalRead+1)& (0+255),c
  4204  002478  C027  FFF6         	movff	??_digitalRead,tblptrl
  4205  00247C  C028  FFF7         	movff	??_digitalRead+1,tblptrh
  4206  002480  0E00               	movlw	low (__mediumconst shr (0+16))
  4207  002482  6EF8               	movwf	tblptru,c
  4208  002484  0E0F               	movlw	(high __ramtop+-1)
  4209  002486  64F7               	cpfsgt	tblptrh,c
  4210  002488  D003               	bra	u7777
  4211  00248A  0008               	tblrd		*
  4212  00248C  50F5               	movf	tablat,w,c
  4213  00248E  D005               	bra	u7770
  4214  002490                     u7777:
  4215  002490  CFF6 FFD9          	movff	tblptrl,fsr2l
  4216  002494  CFF7 FFDA          	movff	tblptrh,fsr2h
  4217  002498  50DF               	movf	indf2,w,c
  4218  00249A                     u7770:
  4219  00249A  6E29               	movwf	(??_digitalRead+2)& (0+255),c
  4220  00249C  CF80 F02A          	movff	3968,??_digitalRead+3	;volatile
  4221  0024A0  2A29               	incf	??_digitalRead+2,f,c
  4222  0024A2  D002               	goto	u7784
  4223  0024A4                     u7785:
  4224  0024A4  90D8               	bcf	status,0,c
  4225  0024A6  322A               	rrcf	??_digitalRead+3,f,c
  4226  0024A8                     u7784:
  4227  0024A8  2E29               	decfsz	??_digitalRead+2,f,c
  4228  0024AA  D7FC               	goto	u7785
  4229  0024AC  0E01               	movlw	1
  4230  0024AE  162A               	andwf	??_digitalRead+3,f,c
  4231  0024B0  502A               	movf	??_digitalRead+3,w,c
  4232  0024B2  6E25               	movwf	?_digitalRead,c
  4233  0024B4  6A26               	clrf	?_digitalRead+1,c
  4234  0024B6  0012               	return	
  4235  0024B8                     l7321:
  4236  0024B8  0E02               	movlw	2
  4237  0024BA  2425               	addwf	digitalRead@pin,w,c
  4238  0024BC  6E27               	movwf	??_digitalRead& (0+255),c
  4239  0024BE  0E00               	movlw	0
  4240  0024C0  2026               	addwfc	digitalRead@pin+1,w,c
  4241  0024C2  6E28               	movwf	(??_digitalRead+1)& (0+255),c
  4242  0024C4  C027  FFF6         	movff	??_digitalRead,tblptrl
  4243  0024C8  C028  FFF7         	movff	??_digitalRead+1,tblptrh
  4244  0024CC  0E00               	movlw	low (__mediumconst shr (0+16))
  4245  0024CE  6EF8               	movwf	tblptru,c
  4246  0024D0  0E0F               	movlw	(high __ramtop+-1)
  4247  0024D2  64F7               	cpfsgt	tblptrh,c
  4248  0024D4  D003               	bra	u7797
  4249  0024D6  0008               	tblrd		*
  4250  0024D8  50F5               	movf	tablat,w,c
  4251  0024DA  D005               	bra	u7790
  4252  0024DC                     u7797:
  4253  0024DC  CFF6 FFD9          	movff	tblptrl,fsr2l
  4254  0024E0  CFF7 FFDA          	movff	tblptrh,fsr2h
  4255  0024E4  50DF               	movf	indf2,w,c
  4256  0024E6                     u7790:
  4257  0024E6  6E29               	movwf	(??_digitalRead+2)& (0+255),c
  4258  0024E8  CF81 F02A          	movff	3969,??_digitalRead+3	;volatile
  4259  0024EC  2A29               	incf	??_digitalRead+2,f,c
  4260  0024EE  D002               	goto	u7804
  4261  0024F0                     u7805:
  4262  0024F0  90D8               	bcf	status,0,c
  4263  0024F2  322A               	rrcf	??_digitalRead+3,f,c
  4264  0024F4                     u7804:
  4265  0024F4  2E29               	decfsz	??_digitalRead+2,f,c
  4266  0024F6  D7FC               	goto	u7805
  4267  0024F8  0E01               	movlw	1
  4268  0024FA  162A               	andwf	??_digitalRead+3,f,c
  4269  0024FC  502A               	movf	??_digitalRead+3,w,c
  4270  0024FE  6E25               	movwf	?_digitalRead,c
  4271  002500  6A26               	clrf	?_digitalRead+1,c
  4272  002502  0012               	return	
  4273  002504                     l7325:
  4274  002504  0E02               	movlw	2
  4275  002506  2425               	addwf	digitalRead@pin,w,c
  4276  002508  6E27               	movwf	??_digitalRead& (0+255),c
  4277  00250A  0E00               	movlw	0
  4278  00250C  2026               	addwfc	digitalRead@pin+1,w,c
  4279  00250E  6E28               	movwf	(??_digitalRead+1)& (0+255),c
  4280  002510  C027  FFF6         	movff	??_digitalRead,tblptrl
  4281  002514  C028  FFF7         	movff	??_digitalRead+1,tblptrh
  4282  002518  0E00               	movlw	low (__mediumconst shr (0+16))
  4283  00251A  6EF8               	movwf	tblptru,c
  4284  00251C  0E0F               	movlw	(high __ramtop+-1)
  4285  00251E  64F7               	cpfsgt	tblptrh,c
  4286  002520  D003               	bra	u7817
  4287  002522  0008               	tblrd		*
  4288  002524  50F5               	movf	tablat,w,c
  4289  002526  D005               	bra	u7810
  4290  002528                     u7817:
  4291  002528  CFF6 FFD9          	movff	tblptrl,fsr2l
  4292  00252C  CFF7 FFDA          	movff	tblptrh,fsr2h
  4293  002530  50DF               	movf	indf2,w,c
  4294  002532                     u7810:
  4295  002532  6E29               	movwf	(??_digitalRead+2)& (0+255),c
  4296  002534  CF82 F02A          	movff	3970,??_digitalRead+3	;volatile
  4297  002538  2A29               	incf	??_digitalRead+2,f,c
  4298  00253A  D002               	goto	u7824
  4299  00253C                     u7825:
  4300  00253C  90D8               	bcf	status,0,c
  4301  00253E  322A               	rrcf	??_digitalRead+3,f,c
  4302  002540                     u7824:
  4303  002540  2E29               	decfsz	??_digitalRead+2,f,c
  4304  002542  D7FC               	goto	u7825
  4305  002544  0E01               	movlw	1
  4306  002546  162A               	andwf	??_digitalRead+3,f,c
  4307  002548  502A               	movf	??_digitalRead+3,w,c
  4308  00254A  6E25               	movwf	?_digitalRead,c
  4309  00254C  6A26               	clrf	?_digitalRead+1,c
  4310  00254E  0012               	return	
  4311  002550                     l7329:
  4312  002550  0E02               	movlw	2
  4313  002552  2425               	addwf	digitalRead@pin,w,c
  4314  002554  6E27               	movwf	??_digitalRead& (0+255),c
  4315  002556  0E00               	movlw	0
  4316  002558  2026               	addwfc	digitalRead@pin+1,w,c
  4317  00255A  6E28               	movwf	(??_digitalRead+1)& (0+255),c
  4318  00255C  C027  FFF6         	movff	??_digitalRead,tblptrl
  4319  002560  C028  FFF7         	movff	??_digitalRead+1,tblptrh
  4320  002564  0E00               	movlw	low (__mediumconst shr (0+16))
  4321  002566  6EF8               	movwf	tblptru,c
  4322  002568  0E0F               	movlw	(high __ramtop+-1)
  4323  00256A  64F7               	cpfsgt	tblptrh,c
  4324  00256C  D003               	bra	u7837
  4325  00256E  0008               	tblrd		*
  4326  002570  50F5               	movf	tablat,w,c
  4327  002572  D005               	bra	u7830
  4328  002574                     u7837:
  4329  002574  CFF6 FFD9          	movff	tblptrl,fsr2l
  4330  002578  CFF7 FFDA          	movff	tblptrh,fsr2h
  4331  00257C  50DF               	movf	indf2,w,c
  4332  00257E                     u7830:
  4333  00257E  6E29               	movwf	(??_digitalRead+2)& (0+255),c
  4334  002580  CF83 F02A          	movff	3971,??_digitalRead+3	;volatile
  4335  002584  2A29               	incf	??_digitalRead+2,f,c
  4336  002586  D002               	goto	u7844
  4337  002588                     u7845:
  4338  002588  90D8               	bcf	status,0,c
  4339  00258A  322A               	rrcf	??_digitalRead+3,f,c
  4340  00258C                     u7844:
  4341  00258C  2E29               	decfsz	??_digitalRead+2,f,c
  4342  00258E  D7FC               	goto	u7845
  4343  002590  0E01               	movlw	1
  4344  002592  162A               	andwf	??_digitalRead+3,f,c
  4345  002594  502A               	movf	??_digitalRead+3,w,c
  4346  002596  6E25               	movwf	?_digitalRead,c
  4347  002598  6A26               	clrf	?_digitalRead+1,c
  4348  00259A  0012               	return	
  4349  00259C                     l7335:
  4350  00259C  C025  FFF6         	movff	digitalRead@pin,tblptrl
  4351  0025A0  C026  FFF7         	movff	digitalRead@pin+1,tblptrh
  4352  0025A4  0E00               	movlw	low (__mediumconst shr (0+16))
  4353  0025A6  6EF8               	movwf	tblptru,c
  4354  0025A8  0E0F               	movlw	(high __ramtop+-1)
  4355  0025AA  64F7               	cpfsgt	tblptrh,c
  4356  0025AC  D007               	bra	u7857
  4357  0025AE  0009               	tblrd		*+
  4358  0025B0  CFF5 F027          	movff	tablat,??_digitalRead
  4359  0025B4  0009               	tblrd		*+
  4360  0025B6  CFF5 F028          	movff	tablat,??_digitalRead+1
  4361  0025BA  D008               	bra	u7850
  4362  0025BC                     u7857:
  4363  0025BC  CFF6 FFD9          	movff	tblptrl,fsr2l
  4364  0025C0  CFF7 FFDA          	movff	tblptrh,fsr2h
  4365  0025C4  CFDE F027          	movff	postinc2,??_digitalRead
  4366  0025C8  CFDE F028          	movff	postinc2,??_digitalRead+1
  4367  0025CC                     u7850:
  4368                           
  4369                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4370                           ; Switch size 1, requested type "space"
  4371                           ; Number of cases is 1, Range of values is 0 to 0
  4372                           ; switch strategies available:
  4373                           ; Name         Instructions Cycles
  4374                           ; simple_byte            4     3 (average)
  4375                           ;	Chosen strategy is simple_byte
  4376  0025CC  5028               	movf	??_digitalRead+1,w,c
  4377  0025CE  0A00               	xorlw	0	; case 0
  4378  0025D0  A4D8               	btfss	status,2,c
  4379  0025D2  D00D               	goto	l344
  4380                           
  4381                           ; Switch size 1, requested type "space"
  4382                           ; Number of cases is 4, Range of values is 0 to 3
  4383                           ; switch strategies available:
  4384                           ; Name         Instructions Cycles
  4385                           ; simple_byte           13     7 (average)
  4386                           ;	Chosen strategy is simple_byte
  4387  0025D4  5027               	movf	??_digitalRead,w,c
  4388  0025D6  0A00               	xorlw	0	; case 0
  4389  0025D8  B4D8               	btfsc	status,2,c
  4390  0025DA  D748               	goto	l7317
  4391  0025DC  0A01               	xorlw	1	; case 1
  4392  0025DE  B4D8               	btfsc	status,2,c
  4393  0025E0  D76B               	goto	l7321
  4394  0025E2  0A03               	xorlw	3	; case 2
  4395  0025E4  B4D8               	btfsc	status,2,c
  4396  0025E6  D78E               	goto	l7325
  4397  0025E8  0A01               	xorlw	1	; case 3
  4398  0025EA  B4D8               	btfsc	status,2,c
  4399  0025EC  D7B1               	goto	l7329
  4400  0025EE                     l344:
  4401                           
  4402                           ;iopin.c: 50: return -1;
  4403  0025EE  6825               	setf	?_digitalRead,c
  4404  0025F0  6826               	setf	?_digitalRead+1,c
  4405  0025F2  0012               	return		;funcret
  4406  0025F4                     __end_of_digitalRead:
  4407                           	opt stack 0
  4408                           tblptru	equ	0xFF8
  4409                           tblptrh	equ	0xFF7
  4410                           tblptrl	equ	0xFF6
  4411                           tablat	equ	0xFF5
  4412                           postinc0	equ	0xFEE
  4413                           wreg	equ	0xFE8
  4414                           postdec1	equ	0xFE5
  4415                           fsr1l	equ	0xFE1
  4416                           indf2	equ	0xFDF
  4417                           postinc2	equ	0xFDE
  4418                           fsr2h	equ	0xFDA
  4419                           fsr2l	equ	0xFD9
  4420                           status	equ	0xFD8
  4421                           
  4422 ;; *************** function _analogRead *****************
  4423 ;; Defined at:
  4424 ;;		line 90 in file "iopin.c"
  4425 ;; Parameters:    Size  Location     Type
  4426 ;;  channel         2   36[COMRAM] int 
  4427 ;; Auto vars:     Size  Location     Type
  4428 ;;		None
  4429 ;; Return value:  Size  Location     Type
  4430 ;;                  4   36[COMRAM] long 
  4431 ;; Registers used:
  4432 ;;		wreg, status,2, status,0
  4433 ;; Tracked objects:
  4434 ;;		On entry : 0/0
  4435 ;;		On exit  : 0/0
  4436 ;;		Unchanged: 0/0
  4437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4438 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4440 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4441 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4442 ;;Total ram usage:        6 bytes
  4443 ;; Hardware stack levels used:    1
  4444 ;; Hardware stack levels required when called:    3
  4445 ;; This function calls:
  4446 ;;		Nothing
  4447 ;; This function is called by:
  4448 ;;		_sortBattery
  4449 ;; This function uses a non-reentrant model
  4450 ;;
  4451                           
  4452                           	psect	text4
  4453  0043C4                     __ptext4:
  4454                           	opt stack 0
  4455  0043C4                     _analogRead:
  4456                           	opt stack 26
  4457                           
  4458                           ;iopin.c: 91: ADCON0 = channel<<2;
  4459                           
  4460                           ;incstack = 0
  4461  0043C4  4425               	rlncf	analogRead@channel,w,c
  4462  0043C6  46E8               	rlncf	wreg,f,c
  4463  0043C8  0BFC               	andlw	252
  4464  0043CA  6EC2               	movwf	4034,c	;volatile
  4465                           
  4466                           ;iopin.c: 92: ADCON0 |= 1<<0;
  4467  0043CC  80C2               	bsf	4034,0,c	;volatile
  4468                           
  4469                           ;iopin.c: 93: ADCON0 |= 1<<1;
  4470  0043CE  82C2               	bsf	4034,1,c	;volatile
  4471  0043D0                     l369:
  4472  0043D0  B2C2               	btfsc	4034,1,c	;volatile
  4473  0043D2  D7FE               	goto	l369
  4474                           
  4475                           ;iopin.c: 97: return (ADRESH<<8) + ADRESL;
  4476  0043D4  50C3               	movf	4035,w,c	;volatile
  4477  0043D6  CFC4 F029          	movff	4036,??_analogRead	;volatile
  4478  0043DA  6A2A               	clrf	(??_analogRead+1)& (0+255),c
  4479  0043DC  C029  F02A         	movff	??_analogRead,??_analogRead+1
  4480  0043E0  6A29               	clrf	??_analogRead,c
  4481  0043E2  2629               	addwf	??_analogRead,f,c
  4482  0043E4  0E00               	movlw	0
  4483  0043E6  222A               	addwfc	??_analogRead+1,f,c
  4484  0043E8  C029  F025         	movff	??_analogRead,?_analogRead
  4485  0043EC  C02A  F026         	movff	??_analogRead+1,?_analogRead+1
  4486  0043F0  0E00               	movlw	0
  4487  0043F2  BE26               	btfsc	?_analogRead+1,7,c
  4488  0043F4  0EFF               	movlw	-1
  4489  0043F6  6E27               	movwf	?_analogRead+2,c
  4490  0043F8  6E28               	movwf	?_analogRead+3,c
  4491  0043FA  0012               	return	
  4492  0043FC                     __end_of_analogRead:
  4493                           	opt stack 0
  4494                           tblptru	equ	0xFF8
  4495                           tblptrh	equ	0xFF7
  4496                           tblptrl	equ	0xFF6
  4497                           tablat	equ	0xFF5
  4498                           postinc0	equ	0xFEE
  4499                           wreg	equ	0xFE8
  4500                           postdec1	equ	0xFE5
  4501                           fsr1l	equ	0xFE1
  4502                           indf2	equ	0xFDF
  4503                           postinc2	equ	0xFDE
  4504                           fsr2h	equ	0xFDA
  4505                           fsr2l	equ	0xFD9
  4506                           status	equ	0xFD8
  4507                           
  4508 ;; *************** function _showInterface *****************
  4509 ;; Defined at:
  4510 ;;		line 18 in file "interface.c"
  4511 ;; Parameters:    Size  Location     Type
  4512 ;;		None
  4513 ;; Auto vars:     Size  Location     Type
  4514 ;;  run             2   18[BANK1 ] PTR int 
  4515 ;;		 -> readPastRun@data(14), 
  4516 ;;  n               2   16[BANK1 ] int 
  4517 ;;  key             1   20[BANK1 ] unsigned char 
  4518 ;; Return value:  Size  Location     Type
  4519 ;;                  1    wreg      void 
  4520 ;; Registers used:
  4521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4522 ;; Tracked objects:
  4523 ;;		On entry : 0/0
  4524 ;;		On exit  : 0/0
  4525 ;;		Unchanged: 0/0
  4526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4528 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4529 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4530 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4531 ;;Total ram usage:        7 bytes
  4532 ;; Hardware stack levels used:    1
  4533 ;; Hardware stack levels required when called:    9
  4534 ;; This function calls:
  4535 ;;		_initRTC
  4536 ;;		_readPastRun
  4537 ;;		_showDateTime
  4538 ;;		_showErrorMessage
  4539 ;;		_showMainMenu
  4540 ;;		_showRunMenu
  4541 ;;		_showRunSelect
  4542 ;;		_showRunStats
  4543 ;;		_showRunTime
  4544 ;; This function is called by:
  4545 ;;		_main
  4546 ;; This function uses a non-reentrant model
  4547 ;;
  4548                           
  4549                           	psect	text5
  4550  0037C2                     __ptext5:
  4551                           	opt stack 0
  4552  0037C2                     _showInterface:
  4553                           	opt stack 21
  4554                           
  4555                           ;interface.c: 20: initRTC();
  4556                           
  4557                           ;incstack = 0
  4558  0037C2  ECCD  F022         	call	_initRTC	;wreg free
  4559  0037C6                     l7537:
  4560                           
  4561                           ;interface.c: 23: showDateTime();
  4562  0037C6  EC89  F017         	call	_showDateTime	;wreg free
  4563  0037CA                     l7539:
  4564                           
  4565                           ;interface.c: 26: key = showMainMenu();
  4566  0037CA  ECB8  F020         	call	_showMainMenu	;wreg free
  4567  0037CE  0101               	movlb	1	; () banked
  4568  0037D0  6F14               	movwf	showInterface@key& (0+255),b
  4569                           
  4570                           ; BSR set to: 1
  4571                           ;interface.c: 28: if(key == 'C'){
  4572  0037D2  0E43               	movlw	67
  4573  0037D4  0101               	movlb	1	; () banked
  4574  0037D6  1914               	xorwf	showInterface@key& (0+255),w,b
  4575  0037D8  A4D8               	btfss	status,2,c
  4576  0037DA  D04F               	goto	l7569
  4577                           
  4578                           ; BSR set to: 1
  4579                           ;interface.c: 30: int n = showRunSelect();
  4580  0037DC  ECFD  F01F         	call	_showRunSelect	;wreg free
  4581  0037E0  0101               	movlb	1	; () banked
  4582  0037E2  6F0E               	movwf	??_showInterface& (0+255),b
  4583  0037E4  0101               	movlb	1	; () banked
  4584  0037E6  510E               	movf	??_showInterface& (0+255),w,b
  4585  0037E8  0101               	movlb	1	; () banked
  4586  0037EA  6F10               	movwf	showInterface@n& (0+255),b
  4587  0037EC  6B11               	clrf	(showInterface@n+1)& (0+255),b
  4588                           
  4589                           ; BSR set to: 1
  4590                           ;interface.c: 32: if(n == '*')continue;
  4591  0037EE  0E2A               	movlw	42
  4592  0037F0  0101               	movlb	1	; () banked
  4593  0037F2  1910               	xorwf	showInterface@n& (0+255),w,b
  4594  0037F4  0101               	movlb	1	; () banked
  4595  0037F6  1111               	iorwf	(showInterface@n+1)& (0+255),w,b
  4596  0037F8  B4D8               	btfsc	status,2,c
  4597  0037FA  D7E7               	goto	l7539
  4598                           
  4599                           ; BSR set to: 1
  4600                           ;interface.c: 34: int* run = readPastRun( n - '1');
  4601                           
  4602                           ; BSR set to: 1
  4603                           
  4604                           ; BSR set to: 1
  4605  0037FC  0ECF               	movlw	207
  4606  0037FE  0101               	movlb	1	; () banked
  4607  003800  2510               	addwf	showInterface@n& (0+255),w,b
  4608  003802  0100               	movlb	0	; () banked
  4609  003804  6F84               	movwf	readPastRun@run& (0+255),b
  4610  003806  0EFF               	movlw	255
  4611  003808  0101               	movlb	1	; () banked
  4612  00380A  2111               	addwfc	(showInterface@n+1)& (0+255),w,b
  4613  00380C  0100               	movlb	0	; () banked
  4614  00380E  6F85               	movwf	(readPastRun@run+1)& (0+255),b
  4615  003810  EC49  F01D         	call	_readPastRun	;wreg free
  4616  003814  C084  F112         	movff	?_readPastRun,showInterface@run
  4617  003818  C085  F113         	movff	?_readPastRun+1,showInterface@run+1
  4618                           
  4619                           ;interface.c: 35: if(run[0] == 0xff){
  4620  00381C  C112  FFD9         	movff	showInterface@run,fsr2l
  4621  003820  C113  FFDA         	movff	showInterface@run+1,fsr2h
  4622  003824  28DE               	incf	postinc2,w,c
  4623  003826  10DE               	iorwf	postinc2,w,c
  4624  003828  A4D8               	btfss	status,2,c
  4625  00382A  D003               	goto	l7555
  4626                           
  4627                           ;interface.c: 36: showErrorMessage();
  4628  00382C  EC1A  F022         	call	_showErrorMessage	;wreg free
  4629                           
  4630                           ;interface.c: 37: continue;
  4631  003830  D7CC               	goto	l7539
  4632  003832                     l7555:
  4633                           
  4634                           ;interface.c: 41: key = showRunMenu(n);
  4635  003832  0101               	movlb	1	; () banked
  4636  003834  5110               	movf	showInterface@n& (0+255),w,b
  4637  003836  EC2F  F020         	call	_showRunMenu
  4638  00383A  0101               	movlb	1	; () banked
  4639  00383C  6F14               	movwf	showInterface@key& (0+255),b
  4640                           
  4641                           ; BSR set to: 1
  4642                           ;interface.c: 43: if(key == 'A') showRunTime(run);
  4643  00383E  0E41               	movlw	65
  4644  003840  0101               	movlb	1	; () banked
  4645  003842  1914               	xorwf	showInterface@key& (0+255),w,b
  4646  003844  A4D8               	btfss	status,2,c
  4647  003846  D007               	goto	l7561
  4648                           
  4649                           ; BSR set to: 1
  4650  003848  C112  F0EB         	movff	showInterface@run,showRunTime@run
  4651  00384C  C113  F0EC         	movff	showInterface@run+1,showRunTime@run+1
  4652  003850  ECFA  F012         	call	_showRunTime	;wreg free
  4653  003854  D7EE               	goto	l7555
  4654  003856                     l7561:
  4655                           
  4656                           ;interface.c: 44: else if(key == 'B') showRunStats(run);
  4657  003856  0E42               	movlw	66
  4658  003858  0101               	movlb	1	; () banked
  4659  00385A  1914               	xorwf	showInterface@key& (0+255),w,b
  4660  00385C  A4D8               	btfss	status,2,c
  4661  00385E  D007               	goto	l7565
  4662                           
  4663                           ; BSR set to: 1
  4664  003860  C112  F0EB         	movff	showInterface@run,showRunStats@run
  4665  003864  C113  F0EC         	movff	showInterface@run+1,showRunStats@run+1
  4666  003868  ECF5  F01C         	call	_showRunStats	;wreg free
  4667  00386C  D7E2               	goto	l7555
  4668  00386E                     l7565:
  4669                           
  4670                           ;interface.c: 45: else if(key == '*') break;
  4671  00386E  0E2A               	movlw	42
  4672  003870  0101               	movlb	1	; () banked
  4673  003872  1914               	xorwf	showInterface@key& (0+255),w,b
  4674  003874  B4D8               	btfsc	status,2,c
  4675  003876  D7A9               	goto	l7539
  4676  003878  D7DC               	goto	l7555
  4677  00387A                     l7569:
  4678                           
  4679                           ; BSR set to: 1
  4680                           ;interface.c: 49: else if(key == 'B') return;
  4681  00387A  0E42               	movlw	66
  4682  00387C  0101               	movlb	1	; () banked
  4683  00387E  1914               	xorwf	showInterface@key& (0+255),w,b
  4684  003880  B4D8               	btfsc	status,2,c
  4685  003882  0012               	return	
  4686                           
  4687                           ; BSR set to: 1
  4688                           ;interface.c: 50: else if(key == '*') break;
  4689                           
  4690                           ; BSR set to: 1
  4691                           
  4692                           ; BSR set to: 1
  4693                           
  4694                           ; BSR set to: 1
  4695  003884  0E2A               	movlw	42
  4696  003886  0101               	movlb	1	; () banked
  4697  003888  1914               	xorwf	showInterface@key& (0+255),w,b
  4698  00388A  B4D8               	btfsc	status,2,c
  4699  00388C  D79C               	goto	l7537
  4700  00388E  D79D               	goto	l7539
  4701  003890                     __end_of_showInterface:
  4702                           	opt stack 0
  4703                           tblptru	equ	0xFF8
  4704                           tblptrh	equ	0xFF7
  4705                           tblptrl	equ	0xFF6
  4706                           tablat	equ	0xFF5
  4707                           postinc0	equ	0xFEE
  4708                           wreg	equ	0xFE8
  4709                           postdec1	equ	0xFE5
  4710                           fsr1l	equ	0xFE1
  4711                           indf2	equ	0xFDF
  4712                           postinc2	equ	0xFDE
  4713                           fsr2h	equ	0xFDA
  4714                           fsr2l	equ	0xFD9
  4715                           status	equ	0xFD8
  4716                           
  4717 ;; *************** function _showRunTime *****************
  4718 ;; Defined at:
  4719 ;;		line 108 in file "interface.c"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;  run             2  107[BANK0 ] PTR int 
  4722 ;;		 -> readPastRun@data(14), main@run(14), 
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;  time            4    8[BANK1 ] long 
  4725 ;;  t2              2    6[BANK1 ] int 
  4726 ;;  t1              2    4[BANK1 ] int 
  4727 ;; Return value:  Size  Location     Type
  4728 ;;                  1    wreg      unsigned char 
  4729 ;; Registers used:
  4730 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4731 ;; Tracked objects:
  4732 ;;		On entry : 0/0
  4733 ;;		On exit  : 0/0
  4734 ;;		Unchanged: 0/0
  4735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4736 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4737 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4738 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4739 ;;      Totals:         0       4      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4740 ;;Total ram usage:       16 bytes
  4741 ;; Hardware stack levels used:    1
  4742 ;; Hardware stack levels required when called:    8
  4743 ;; This function calls:
  4744 ;;		___aldiv
  4745 ;;		___almod
  4746 ;;		_lcdClear
  4747 ;;		_printf
  4748 ;;		_readKeypad
  4749 ;; This function is called by:
  4750 ;;		_main
  4751 ;;		_showInterface
  4752 ;; This function uses a non-reentrant model
  4753 ;;
  4754                           
  4755                           	psect	text6
  4756  0025F4                     __ptext6:
  4757                           	opt stack 0
  4758  0025F4                     _showRunTime:
  4759                           	opt stack 22
  4760                           
  4761                           ;interface.c: 109: int t1 = run[0], t2 = run[1];
  4762                           
  4763                           ; BSR set to: 1
  4764                           ;incstack = 0
  4765  0025F4  C0EB  FFD9         	movff	showRunTime@run,fsr2l
  4766  0025F8  C0EC  FFDA         	movff	showRunTime@run+1,fsr2h
  4767  0025FC  CFDE F104          	movff	postinc2,showRunTime@t1
  4768  002600  CFDD F105          	movff	postdec2,showRunTime@t1+1
  4769  002604  0100               	movlb	0	; () banked
  4770  002606  EE20 F002          	lfsr	2,2
  4771  00260A  51EB               	movf	showRunTime@run& (0+255),w,b
  4772  00260C  26D9               	addwf	fsr2l,f,c
  4773  00260E  51EC               	movf	(showRunTime@run+1)& (0+255),w,b
  4774  002610  22DA               	addwfc	fsr2h,f,c
  4775  002612  CFDE F106          	movff	postinc2,showRunTime@t2
  4776  002616  CFDD F107          	movff	postdec2,showRunTime@t2+1
  4777                           
  4778                           ;interface.c: 110: long time = (t1<<8) + t2;
  4779  00261A  0101               	movlb	1	; () banked
  4780  00261C  5104               	movf	showRunTime@t1& (0+255),w,b
  4781  00261E  0100               	movlb	0	; () banked
  4782  002620  6FEE               	movwf	(??_showRunTime+1)& (0+255),b
  4783  002622  6BED               	clrf	??_showRunTime& (0+255),b
  4784  002624  0101               	movlb	1	; () banked
  4785  002626  5106               	movf	showRunTime@t2& (0+255),w,b
  4786  002628  0100               	movlb	0	; () banked
  4787  00262A  27ED               	addwf	??_showRunTime& (0+255),f,b
  4788  00262C  0101               	movlb	1	; () banked
  4789  00262E  5107               	movf	(showRunTime@t2+1)& (0+255),w,b
  4790  002630  0100               	movlb	0	; () banked
  4791  002632  23EE               	addwfc	(??_showRunTime+1)& (0+255),f,b
  4792  002634  C0ED  F108         	movff	??_showRunTime,showRunTime@time
  4793  002638  C0EE  F109         	movff	??_showRunTime+1,showRunTime@time+1
  4794  00263C  0101               	movlb	1	; () banked
  4795  00263E  0E00               	movlw	0
  4796  002640  BF09               	btfsc	(showRunTime@time+1)& (0+255),7,b
  4797  002642  0EFF               	movlw	-1
  4798  002644  6F0A               	movwf	(showRunTime@time+2)& (0+255),b
  4799  002646  6F0B               	movwf	(showRunTime@time+3)& (0+255),b
  4800                           
  4801                           ; BSR set to: 1
  4802                           ;interface.c: 112: lcdClear();
  4803  002648  EC00  F023         	call	_lcdClear	;wreg free
  4804                           
  4805                           ;interface.c: 113: printf("time %02ld:%02ld.%01ld\n",time/600,(time%600)/10,(time%600)%1
      +                          0);
  4806  00264C  0E58               	movlw	88
  4807  00264E  6E29               	movwf	___almod@divisor,c
  4808  002650  0E02               	movlw	2
  4809  002652  6E2A               	movwf	___almod@divisor+1,c
  4810  002654  0E00               	movlw	0
  4811  002656  6E2B               	movwf	___almod@divisor+2,c
  4812  002658  0E00               	movlw	0
  4813  00265A  6E2C               	movwf	___almod@divisor+3,c
  4814  00265C  C108  F025         	movff	showRunTime@time,___almod@dividend
  4815  002660  C109  F026         	movff	showRunTime@time+1,___almod@dividend+1
  4816  002664  C10A  F027         	movff	showRunTime@time+2,___almod@dividend+2
  4817  002668  C10B  F028         	movff	showRunTime@time+3,___almod@dividend+3
  4818  00266C  EC9F  F01C         	call	___almod	;wreg free
  4819  002670  C025  F100         	movff	?___almod,_showRunTime$1420
  4820  002674  C026  F101         	movff	?___almod+1,_showRunTime$1420+1
  4821  002678  C027  F102         	movff	?___almod+2,_showRunTime$1420+2
  4822  00267C  C028  F103         	movff	?___almod+3,_showRunTime$1420+3
  4823                           
  4824                           ;interface.c: 113: printf("time %02ld:%02ld.%01ld\n",time/600,(time%600)/10,(time%600)%1
      +                          0);
  4825  002680  0EA0               	movlw	low STR_18
  4826  002682  0100               	movlb	0	; () banked
  4827  002684  6FB9               	movwf	printf@f& (0+255),b
  4828  002686  0EFE               	movlw	high STR_18
  4829  002688  0100               	movlb	0	; () banked
  4830  00268A  6FBA               	movwf	(printf@f+1)& (0+255),b
  4831  00268C  C108  F02F         	movff	showRunTime@time,___aldiv@dividend
  4832  002690  C109  F030         	movff	showRunTime@time+1,___aldiv@dividend+1
  4833  002694  C10A  F031         	movff	showRunTime@time+2,___aldiv@dividend+2
  4834  002698  C10B  F032         	movff	showRunTime@time+3,___aldiv@dividend+3
  4835  00269C  0E58               	movlw	88
  4836  00269E  6E33               	movwf	___aldiv@divisor,c
  4837  0026A0  0E02               	movlw	2
  4838  0026A2  6E34               	movwf	___aldiv@divisor+1,c
  4839  0026A4  0E00               	movlw	0
  4840  0026A6  6E35               	movwf	___aldiv@divisor+2,c
  4841  0026A8  0E00               	movlw	0
  4842  0026AA  6E36               	movwf	___aldiv@divisor+3,c
  4843  0026AC  EC05  F01B         	call	___aldiv	;wreg free
  4844  0026B0  C02F  F0BB         	movff	?___aldiv,?_printf+2
  4845  0026B4  C030  F0BC         	movff	?___aldiv+1,?_printf+3
  4846  0026B8  C031  F0BD         	movff	?___aldiv+2,?_printf+4
  4847  0026BC  C032  F0BE         	movff	?___aldiv+3,?_printf+5
  4848  0026C0  0E58               	movlw	88
  4849  0026C2  6E29               	movwf	___almod@divisor,c
  4850  0026C4  0E02               	movlw	2
  4851  0026C6  6E2A               	movwf	___almod@divisor+1,c
  4852  0026C8  0E00               	movlw	0
  4853  0026CA  6E2B               	movwf	___almod@divisor+2,c
  4854  0026CC  0E00               	movlw	0
  4855  0026CE  6E2C               	movwf	___almod@divisor+3,c
  4856  0026D0  C108  F025         	movff	showRunTime@time,___almod@dividend
  4857  0026D4  C109  F026         	movff	showRunTime@time+1,___almod@dividend+1
  4858  0026D8  C10A  F027         	movff	showRunTime@time+2,___almod@dividend+2
  4859  0026DC  C10B  F028         	movff	showRunTime@time+3,___almod@dividend+3
  4860  0026E0  EC9F  F01C         	call	___almod	;wreg free
  4861  0026E4  C025  F02F         	movff	?___almod,___aldiv@dividend
  4862  0026E8  C026  F030         	movff	?___almod+1,___aldiv@dividend+1
  4863  0026EC  C027  F031         	movff	?___almod+2,___aldiv@dividend+2
  4864  0026F0  C028  F032         	movff	?___almod+3,___aldiv@dividend+3
  4865  0026F4  0E0A               	movlw	10
  4866  0026F6  6E33               	movwf	___aldiv@divisor,c
  4867  0026F8  0E00               	movlw	0
  4868  0026FA  6E34               	movwf	___aldiv@divisor+1,c
  4869  0026FC  0E00               	movlw	0
  4870  0026FE  6E35               	movwf	___aldiv@divisor+2,c
  4871  002700  0E00               	movlw	0
  4872  002702  6E36               	movwf	___aldiv@divisor+3,c
  4873  002704  EC05  F01B         	call	___aldiv	;wreg free
  4874  002708  C02F  F0BF         	movff	?___aldiv,?_printf+6
  4875  00270C  C030  F0C0         	movff	?___aldiv+1,?_printf+7
  4876  002710  C031  F0C1         	movff	?___aldiv+2,?_printf+8
  4877  002714  C032  F0C2         	movff	?___aldiv+3,?_printf+9
  4878  002718  C100  F025         	movff	_showRunTime$1420,___almod@dividend
  4879  00271C  C101  F026         	movff	_showRunTime$1420+1,___almod@dividend+1
  4880  002720  C102  F027         	movff	_showRunTime$1420+2,___almod@dividend+2
  4881  002724  C103  F028         	movff	_showRunTime$1420+3,___almod@dividend+3
  4882  002728  0E0A               	movlw	10
  4883  00272A  6E29               	movwf	___almod@divisor,c
  4884  00272C  0E00               	movlw	0
  4885  00272E  6E2A               	movwf	___almod@divisor+1,c
  4886  002730  0E00               	movlw	0
  4887  002732  6E2B               	movwf	___almod@divisor+2,c
  4888  002734  0E00               	movlw	0
  4889  002736  6E2C               	movwf	___almod@divisor+3,c
  4890  002738  EC9F  F01C         	call	___almod	;wreg free
  4891  00273C  C025  F0C3         	movff	?___almod,?_printf+10
  4892  002740  C026  F0C4         	movff	?___almod+1,?_printf+11
  4893  002744  C027  F0C5         	movff	?___almod+2,?_printf+12
  4894  002748  C028  F0C6         	movff	?___almod+3,?_printf+13
  4895  00274C  EC09  F000         	call	_printf	;wreg free
  4896                           
  4897                           ;interface.c: 114: printf("              *>");
  4898  002750  0E50               	movlw	low STR_19
  4899  002752  0100               	movlb	0	; () banked
  4900  002754  6FB9               	movwf	printf@f& (0+255),b
  4901  002756  0EFF               	movlw	high STR_19
  4902  002758  0100               	movlb	0	; () banked
  4903  00275A  6FBA               	movwf	(printf@f+1)& (0+255),b
  4904  00275C  EC09  F000         	call	_printf	;wreg free
  4905  002760                     l7367:
  4906  002760  EC32  F022         	call	_readKeypad	;wreg free
  4907  002764  0A2A               	xorlw	42
  4908  002766  B4D8               	btfsc	status,2,c
  4909  002768  0012               	return	
  4910  00276A  D7FA               	goto	l7367
  4911  00276C                     __end_of_showRunTime:
  4912                           	opt stack 0
  4913                           tblptru	equ	0xFF8
  4914                           tblptrh	equ	0xFF7
  4915                           tblptrl	equ	0xFF6
  4916                           tablat	equ	0xFF5
  4917                           postinc0	equ	0xFEE
  4918                           wreg	equ	0xFE8
  4919                           postdec1	equ	0xFE5
  4920                           fsr1l	equ	0xFE1
  4921                           indf2	equ	0xFDF
  4922                           postinc2	equ	0xFDE
  4923                           postdec2	equ	0xFDD
  4924                           fsr2h	equ	0xFDA
  4925                           fsr2l	equ	0xFD9
  4926                           status	equ	0xFD8
  4927                           
  4928 ;; *************** function ___almod *****************
  4929 ;; Defined at:
  4930 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\almod.c"
  4931 ;; Parameters:    Size  Location     Type
  4932 ;;  dividend        4   36[COMRAM] long 
  4933 ;;  divisor         4   40[COMRAM] long 
  4934 ;; Auto vars:     Size  Location     Type
  4935 ;;  sign            1   45[COMRAM] unsigned char 
  4936 ;;  counter         1   44[COMRAM] unsigned char 
  4937 ;; Return value:  Size  Location     Type
  4938 ;;                  4   36[COMRAM] long 
  4939 ;; Registers used:
  4940 ;;		wreg, status,2, status,0
  4941 ;; Tracked objects:
  4942 ;;		On entry : 0/0
  4943 ;;		On exit  : 0/0
  4944 ;;		Unchanged: 0/0
  4945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4946 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4947 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4949 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4950 ;;Total ram usage:       10 bytes
  4951 ;; Hardware stack levels used:    1
  4952 ;; Hardware stack levels required when called:    3
  4953 ;; This function calls:
  4954 ;;		Nothing
  4955 ;; This function is called by:
  4956 ;;		_main
  4957 ;;		_showRunTime
  4958 ;; This function uses a non-reentrant model
  4959 ;;
  4960                           
  4961                           	psect	text7
  4962  00393E                     __ptext7:
  4963                           	opt stack 0
  4964  00393E                     ___almod:
  4965                           	opt stack 26
  4966                           
  4967                           ;incstack = 0
  4968  00393E  0E00               	movlw	0
  4969  003940  6E2E               	movwf	___almod@sign,c
  4970  003942  AE28               	btfss	___almod@dividend+3,7,c
  4971  003944  D00A               	goto	l7249
  4972  003946  1E28               	comf	___almod@dividend+3,f,c
  4973  003948  1E27               	comf	___almod@dividend+2,f,c
  4974  00394A  1E26               	comf	___almod@dividend+1,f,c
  4975  00394C  6C25               	negf	___almod@dividend,c
  4976  00394E  0E00               	movlw	0
  4977  003950  2226               	addwfc	___almod@dividend+1,f,c
  4978  003952  2227               	addwfc	___almod@dividend+2,f,c
  4979  003954  2228               	addwfc	___almod@dividend+3,f,c
  4980  003956  0E01               	movlw	1
  4981  003958  6E2E               	movwf	___almod@sign,c
  4982  00395A                     l7249:
  4983  00395A  AE2C               	btfss	___almod@divisor+3,7,c
  4984  00395C  D008               	goto	l7253
  4985  00395E  1E2C               	comf	___almod@divisor+3,f,c
  4986  003960  1E2B               	comf	___almod@divisor+2,f,c
  4987  003962  1E2A               	comf	___almod@divisor+1,f,c
  4988  003964  6C29               	negf	___almod@divisor,c
  4989  003966  0E00               	movlw	0
  4990  003968  222A               	addwfc	___almod@divisor+1,f,c
  4991  00396A  222B               	addwfc	___almod@divisor+2,f,c
  4992  00396C  222C               	addwfc	___almod@divisor+3,f,c
  4993  00396E                     l7253:
  4994  00396E  5029               	movf	___almod@divisor,w,c
  4995  003970  102A               	iorwf	___almod@divisor+1,w,c
  4996  003972  102B               	iorwf	___almod@divisor+2,w,c
  4997  003974  102C               	iorwf	___almod@divisor+3,w,c
  4998  003976  B4D8               	btfsc	status,2,c
  4999  003978  D024               	goto	l7269
  5000  00397A  0E01               	movlw	1
  5001  00397C  6E2D               	movwf	___almod@counter,c
  5002  00397E  D006               	goto	l7259
  5003  003980                     l7257:
  5004  003980  90D8               	bcf	status,0,c
  5005  003982  3629               	rlcf	___almod@divisor,f,c
  5006  003984  362A               	rlcf	___almod@divisor+1,f,c
  5007  003986  362B               	rlcf	___almod@divisor+2,f,c
  5008  003988  362C               	rlcf	___almod@divisor+3,f,c
  5009  00398A  2A2D               	incf	___almod@counter,f,c
  5010  00398C                     l7259:
  5011  00398C  AE2C               	btfss	___almod@divisor+3,7,c
  5012  00398E  D7F8               	goto	l7257
  5013  003990                     l7261:
  5014  003990  5029               	movf	___almod@divisor,w,c
  5015  003992  5C25               	subwf	___almod@dividend,w,c
  5016  003994  502A               	movf	___almod@divisor+1,w,c
  5017  003996  5826               	subwfb	___almod@dividend+1,w,c
  5018  003998  502B               	movf	___almod@divisor+2,w,c
  5019  00399A  5827               	subwfb	___almod@dividend+2,w,c
  5020  00399C  502C               	movf	___almod@divisor+3,w,c
  5021  00399E  5828               	subwfb	___almod@dividend+3,w,c
  5022  0039A0  A0D8               	btfss	status,0,c
  5023  0039A2  D008               	goto	l7265
  5024  0039A4  5029               	movf	___almod@divisor,w,c
  5025  0039A6  5E25               	subwf	___almod@dividend,f,c
  5026  0039A8  502A               	movf	___almod@divisor+1,w,c
  5027  0039AA  5A26               	subwfb	___almod@dividend+1,f,c
  5028  0039AC  502B               	movf	___almod@divisor+2,w,c
  5029  0039AE  5A27               	subwfb	___almod@dividend+2,f,c
  5030  0039B0  502C               	movf	___almod@divisor+3,w,c
  5031  0039B2  5A28               	subwfb	___almod@dividend+3,f,c
  5032  0039B4                     l7265:
  5033  0039B4  90D8               	bcf	status,0,c
  5034  0039B6  322C               	rrcf	___almod@divisor+3,f,c
  5035  0039B8  322B               	rrcf	___almod@divisor+2,f,c
  5036  0039BA  322A               	rrcf	___almod@divisor+1,f,c
  5037  0039BC  3229               	rrcf	___almod@divisor,f,c
  5038  0039BE  2E2D               	decfsz	___almod@counter,f,c
  5039  0039C0  D7E7               	goto	l7261
  5040  0039C2                     l7269:
  5041  0039C2  502E               	movf	___almod@sign,w,c
  5042  0039C4  B4D8               	btfsc	status,2,c
  5043  0039C6  D008               	goto	l7273
  5044  0039C8  1E28               	comf	___almod@dividend+3,f,c
  5045  0039CA  1E27               	comf	___almod@dividend+2,f,c
  5046  0039CC  1E26               	comf	___almod@dividend+1,f,c
  5047  0039CE  6C25               	negf	___almod@dividend,c
  5048  0039D0  0E00               	movlw	0
  5049  0039D2  2226               	addwfc	___almod@dividend+1,f,c
  5050  0039D4  2227               	addwfc	___almod@dividend+2,f,c
  5051  0039D6  2228               	addwfc	___almod@dividend+3,f,c
  5052  0039D8                     l7273:
  5053  0039D8  C025  F025         	movff	___almod@dividend,?___almod
  5054  0039DC  C026  F026         	movff	___almod@dividend+1,?___almod+1
  5055  0039E0  C027  F027         	movff	___almod@dividend+2,?___almod+2
  5056  0039E4  C028  F028         	movff	___almod@dividend+3,?___almod+3
  5057  0039E8  0012               	return	
  5058  0039EA                     __end_of___almod:
  5059                           	opt stack 0
  5060                           tblptru	equ	0xFF8
  5061                           tblptrh	equ	0xFF7
  5062                           tblptrl	equ	0xFF6
  5063                           tablat	equ	0xFF5
  5064                           postinc0	equ	0xFEE
  5065                           wreg	equ	0xFE8
  5066                           postdec1	equ	0xFE5
  5067                           fsr1l	equ	0xFE1
  5068                           indf2	equ	0xFDF
  5069                           postinc2	equ	0xFDE
  5070                           postdec2	equ	0xFDD
  5071                           fsr2h	equ	0xFDA
  5072                           fsr2l	equ	0xFD9
  5073                           status	equ	0xFD8
  5074                           
  5075 ;; *************** function ___aldiv *****************
  5076 ;; Defined at:
  5077 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
  5078 ;; Parameters:    Size  Location     Type
  5079 ;;  dividend        4   46[COMRAM] long 
  5080 ;;  divisor         4   50[COMRAM] long 
  5081 ;; Auto vars:     Size  Location     Type
  5082 ;;  quotient        4    2[BANK0 ] long 
  5083 ;;  sign            1    1[BANK0 ] unsigned char 
  5084 ;;  counter         1    0[BANK0 ] unsigned char 
  5085 ;; Return value:  Size  Location     Type
  5086 ;;                  4   46[COMRAM] long 
  5087 ;; Registers used:
  5088 ;;		wreg, status,2, status,0
  5089 ;; Tracked objects:
  5090 ;;		On entry : 0/0
  5091 ;;		On exit  : 0/0
  5092 ;;		Unchanged: 0/0
  5093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5094 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5095 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5097 ;;      Totals:         8       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5098 ;;Total ram usage:       14 bytes
  5099 ;; Hardware stack levels used:    1
  5100 ;; Hardware stack levels required when called:    3
  5101 ;; This function calls:
  5102 ;;		Nothing
  5103 ;; This function is called by:
  5104 ;;		_main
  5105 ;;		_showRunTime
  5106 ;; This function uses a non-reentrant model
  5107 ;;
  5108                           
  5109                           	psect	text8
  5110  00360A                     __ptext8:
  5111                           	opt stack 0
  5112  00360A                     ___aldiv:
  5113                           	opt stack 26
  5114                           
  5115                           ;incstack = 0
  5116  00360A  0E00               	movlw	0
  5117  00360C  0100               	movlb	0	; () banked
  5118  00360E  6F81               	movwf	___aldiv@sign& (0+255),b
  5119                           
  5120                           ; BSR set to: 0
  5121  003610  AE36               	btfss	___aldiv@divisor+3,7,c
  5122  003612  D00B               	goto	l7205
  5123                           
  5124                           ; BSR set to: 0
  5125  003614  1E36               	comf	___aldiv@divisor+3,f,c
  5126  003616  1E35               	comf	___aldiv@divisor+2,f,c
  5127  003618  1E34               	comf	___aldiv@divisor+1,f,c
  5128  00361A  6C33               	negf	___aldiv@divisor,c
  5129  00361C  0E00               	movlw	0
  5130  00361E  2234               	addwfc	___aldiv@divisor+1,f,c
  5131  003620  2235               	addwfc	___aldiv@divisor+2,f,c
  5132  003622  2236               	addwfc	___aldiv@divisor+3,f,c
  5133                           
  5134                           ; BSR set to: 0
  5135  003624  0E01               	movlw	1
  5136  003626  0100               	movlb	0	; () banked
  5137  003628  6F81               	movwf	___aldiv@sign& (0+255),b
  5138  00362A                     l7205:
  5139                           
  5140                           ; BSR set to: 0
  5141  00362A  AE32               	btfss	___aldiv@dividend+3,7,c
  5142  00362C  D00B               	goto	l7211
  5143                           
  5144                           ; BSR set to: 0
  5145  00362E  1E32               	comf	___aldiv@dividend+3,f,c
  5146  003630  1E31               	comf	___aldiv@dividend+2,f,c
  5147  003632  1E30               	comf	___aldiv@dividend+1,f,c
  5148  003634  6C2F               	negf	___aldiv@dividend,c
  5149  003636  0E00               	movlw	0
  5150  003638  2230               	addwfc	___aldiv@dividend+1,f,c
  5151  00363A  2231               	addwfc	___aldiv@dividend+2,f,c
  5152  00363C  2232               	addwfc	___aldiv@dividend+3,f,c
  5153                           
  5154                           ; BSR set to: 0
  5155  00363E  0E01               	movlw	1
  5156  003640  0100               	movlb	0	; () banked
  5157  003642  1B81               	xorwf	___aldiv@sign& (0+255),f,b
  5158  003644                     l7211:
  5159                           
  5160                           ; BSR set to: 0
  5161  003644  0E00               	movlw	0
  5162  003646  0100               	movlb	0	; () banked
  5163  003648  6F82               	movwf	___aldiv@quotient& (0+255),b
  5164  00364A  0E00               	movlw	0
  5165  00364C  6F83               	movwf	(___aldiv@quotient+1)& (0+255),b
  5166  00364E  0E00               	movlw	0
  5167  003650  6F84               	movwf	(___aldiv@quotient+2)& (0+255),b
  5168  003652  0E00               	movlw	0
  5169  003654  6F85               	movwf	(___aldiv@quotient+3)& (0+255),b
  5170                           
  5171                           ; BSR set to: 0
  5172  003656  5033               	movf	___aldiv@divisor,w,c
  5173  003658  1034               	iorwf	___aldiv@divisor+1,w,c
  5174  00365A  1035               	iorwf	___aldiv@divisor+2,w,c
  5175  00365C  1036               	iorwf	___aldiv@divisor+3,w,c
  5176  00365E  B4D8               	btfsc	status,2,c
  5177  003660  D02F               	goto	l7233
  5178                           
  5179                           ; BSR set to: 0
  5180  003662  0E01               	movlw	1
  5181  003664  0100               	movlb	0	; () banked
  5182  003666  6F80               	movwf	___aldiv@counter& (0+255),b
  5183  003668  D007               	goto	l7219
  5184  00366A                     l7217:
  5185                           
  5186                           ; BSR set to: 0
  5187  00366A  90D8               	bcf	status,0,c
  5188  00366C  3633               	rlcf	___aldiv@divisor,f,c
  5189  00366E  3634               	rlcf	___aldiv@divisor+1,f,c
  5190  003670  3635               	rlcf	___aldiv@divisor+2,f,c
  5191  003672  3636               	rlcf	___aldiv@divisor+3,f,c
  5192  003674  0100               	movlb	0	; () banked
  5193  003676  2B80               	incf	___aldiv@counter& (0+255),f,b
  5194  003678                     l7219:
  5195                           
  5196                           ; BSR set to: 0
  5197  003678  AE36               	btfss	___aldiv@divisor+3,7,c
  5198  00367A  D7F7               	goto	l7217
  5199  00367C                     l7221:
  5200                           
  5201                           ; BSR set to: 0
  5202  00367C  0100               	movlb	0	; () banked
  5203  00367E  90D8               	bcf	status,0,c
  5204  003680  3782               	rlcf	___aldiv@quotient& (0+255),f,b
  5205  003682  3783               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  5206  003684  3784               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  5207  003686  3785               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  5208                           
  5209                           ; BSR set to: 0
  5210  003688  5033               	movf	___aldiv@divisor,w,c
  5211  00368A  5C2F               	subwf	___aldiv@dividend,w,c
  5212  00368C  5034               	movf	___aldiv@divisor+1,w,c
  5213  00368E  5830               	subwfb	___aldiv@dividend+1,w,c
  5214  003690  5035               	movf	___aldiv@divisor+2,w,c
  5215  003692  5831               	subwfb	___aldiv@dividend+2,w,c
  5216  003694  5036               	movf	___aldiv@divisor+3,w,c
  5217  003696  5832               	subwfb	___aldiv@dividend+3,w,c
  5218  003698  A0D8               	btfss	status,0,c
  5219  00369A  D00A               	goto	l7229
  5220                           
  5221                           ; BSR set to: 0
  5222  00369C  5033               	movf	___aldiv@divisor,w,c
  5223  00369E  5E2F               	subwf	___aldiv@dividend,f,c
  5224  0036A0  5034               	movf	___aldiv@divisor+1,w,c
  5225  0036A2  5A30               	subwfb	___aldiv@dividend+1,f,c
  5226  0036A4  5035               	movf	___aldiv@divisor+2,w,c
  5227  0036A6  5A31               	subwfb	___aldiv@dividend+2,f,c
  5228  0036A8  5036               	movf	___aldiv@divisor+3,w,c
  5229  0036AA  5A32               	subwfb	___aldiv@dividend+3,f,c
  5230                           
  5231                           ; BSR set to: 0
  5232  0036AC  0100               	movlb	0	; () banked
  5233  0036AE  8182               	bsf	___aldiv@quotient& (0+255),0,b
  5234  0036B0                     l7229:
  5235                           
  5236                           ; BSR set to: 0
  5237  0036B0  90D8               	bcf	status,0,c
  5238  0036B2  3236               	rrcf	___aldiv@divisor+3,f,c
  5239  0036B4  3235               	rrcf	___aldiv@divisor+2,f,c
  5240  0036B6  3234               	rrcf	___aldiv@divisor+1,f,c
  5241  0036B8  3233               	rrcf	___aldiv@divisor,f,c
  5242                           
  5243                           ; BSR set to: 0
  5244  0036BA  0100               	movlb	0	; () banked
  5245  0036BC  2F80               	decfsz	___aldiv@counter& (0+255),f,b
  5246  0036BE  D7DE               	goto	l7221
  5247  0036C0                     l7233:
  5248                           
  5249                           ; BSR set to: 0
  5250  0036C0  0100               	movlb	0	; () banked
  5251  0036C2  5181               	movf	___aldiv@sign& (0+255),w,b
  5252  0036C4  0100               	movlb	0	; () banked
  5253  0036C6  B4D8               	btfsc	status,2,c
  5254  0036C8  D009               	goto	l7237
  5255                           
  5256                           ; BSR set to: 0
  5257  0036CA  0100               	movlb	0	; () banked
  5258  0036CC  1F85               	comf	(___aldiv@quotient+3)& (0+255),f,b
  5259  0036CE  1F84               	comf	(___aldiv@quotient+2)& (0+255),f,b
  5260  0036D0  1F83               	comf	(___aldiv@quotient+1)& (0+255),f,b
  5261  0036D2  6D82               	negf	___aldiv@quotient& (0+255),b
  5262  0036D4  0E00               	movlw	0
  5263  0036D6  2383               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  5264  0036D8  2384               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  5265  0036DA  2385               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  5266  0036DC                     l7237:
  5267                           
  5268                           ; BSR set to: 0
  5269  0036DC  C082  F02F         	movff	___aldiv@quotient,?___aldiv
  5270  0036E0  C083  F030         	movff	___aldiv@quotient+1,?___aldiv+1
  5271  0036E4  C084  F031         	movff	___aldiv@quotient+2,?___aldiv+2
  5272  0036E8  C085  F032         	movff	___aldiv@quotient+3,?___aldiv+3
  5273  0036EC  0012               	return	
  5274  0036EE                     __end_of___aldiv:
  5275                           	opt stack 0
  5276                           tblptru	equ	0xFF8
  5277                           tblptrh	equ	0xFF7
  5278                           tblptrl	equ	0xFF6
  5279                           tablat	equ	0xFF5
  5280                           postinc0	equ	0xFEE
  5281                           wreg	equ	0xFE8
  5282                           postdec1	equ	0xFE5
  5283                           fsr1l	equ	0xFE1
  5284                           indf2	equ	0xFDF
  5285                           postinc2	equ	0xFDE
  5286                           postdec2	equ	0xFDD
  5287                           fsr2h	equ	0xFDA
  5288                           fsr2l	equ	0xFD9
  5289                           status	equ	0xFD8
  5290                           
  5291 ;; *************** function _showRunStats *****************
  5292 ;; Defined at:
  5293 ;;		line 119 in file "interface.c"
  5294 ;; Parameters:    Size  Location     Type
  5295 ;;  run             2  107[BANK0 ] PTR int 
  5296 ;;		 -> readPastRun@data(14), main@run(14), 
  5297 ;; Auto vars:     Size  Location     Type
  5298 ;;  n_OTHER         2  115[BANK0 ] int 
  5299 ;;  n_C             2  113[BANK0 ] int 
  5300 ;;  n_9V            2  111[BANK0 ] int 
  5301 ;;  n_AA            2  109[BANK0 ] int 
  5302 ;; Return value:  Size  Location     Type
  5303 ;;                  1    wreg      unsigned char 
  5304 ;; Registers used:
  5305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5306 ;; Tracked objects:
  5307 ;;		On entry : 0/0
  5308 ;;		On exit  : 0/0
  5309 ;;		Unchanged: 0/0
  5310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5311 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5312 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5314 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5315 ;;Total ram usage:       10 bytes
  5316 ;; Hardware stack levels used:    1
  5317 ;; Hardware stack levels required when called:    8
  5318 ;; This function calls:
  5319 ;;		_lcdClear
  5320 ;;		_printf
  5321 ;;		_readKeypad
  5322 ;; This function is called by:
  5323 ;;		_main
  5324 ;;		_showInterface
  5325 ;; This function uses a non-reentrant model
  5326 ;;
  5327                           
  5328                           	psect	text9
  5329  0039EA                     __ptext9:
  5330                           	opt stack 0
  5331  0039EA                     _showRunStats:
  5332                           	opt stack 22
  5333                           
  5334                           ;interface.c: 120: int n_AA = run[2], n_9V = run[3], n_C = run[4], n_OTHER = run[5];
  5335                           
  5336                           ; BSR set to: 0
  5337                           ;incstack = 0
  5338  0039EA  0100               	movlb	0	; () banked
  5339  0039EC  EE20 F004          	lfsr	2,4
  5340  0039F0  51EB               	movf	showRunStats@run& (0+255),w,b
  5341  0039F2  26D9               	addwf	fsr2l,f,c
  5342  0039F4  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  5343  0039F6  22DA               	addwfc	fsr2h,f,c
  5344  0039F8  CFDE F0ED          	movff	postinc2,showRunStats@n_AA
  5345  0039FC  CFDD F0EE          	movff	postdec2,showRunStats@n_AA+1
  5346  003A00  0100               	movlb	0	; () banked
  5347  003A02  EE20 F006          	lfsr	2,6
  5348  003A06  51EB               	movf	showRunStats@run& (0+255),w,b
  5349  003A08  26D9               	addwf	fsr2l,f,c
  5350  003A0A  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  5351  003A0C  22DA               	addwfc	fsr2h,f,c
  5352  003A0E  CFDE F0EF          	movff	postinc2,showRunStats@n_9V
  5353  003A12  CFDD F0F0          	movff	postdec2,showRunStats@n_9V+1
  5354  003A16  0100               	movlb	0	; () banked
  5355  003A18  EE20 F008          	lfsr	2,8
  5356  003A1C  51EB               	movf	showRunStats@run& (0+255),w,b
  5357  003A1E  26D9               	addwf	fsr2l,f,c
  5358  003A20  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  5359  003A22  22DA               	addwfc	fsr2h,f,c
  5360  003A24  CFDE F0F1          	movff	postinc2,showRunStats@n_C
  5361  003A28  CFDD F0F2          	movff	postdec2,showRunStats@n_C+1
  5362  003A2C  0100               	movlb	0	; () banked
  5363  003A2E  EE20 F00A          	lfsr	2,10
  5364  003A32  51EB               	movf	showRunStats@run& (0+255),w,b
  5365  003A34  26D9               	addwf	fsr2l,f,c
  5366  003A36  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  5367  003A38  22DA               	addwfc	fsr2h,f,c
  5368  003A3A  CFDE F0F3          	movff	postinc2,showRunStats@n_OTHER
  5369  003A3E  CFDD F0F4          	movff	postdec2,showRunStats@n_OTHER+1
  5370                           
  5371                           ; BSR set to: 0
  5372                           ;interface.c: 122: lcdClear();
  5373  003A42  EC00  F023         	call	_lcdClear	;wreg free
  5374                           
  5375                           ;interface.c: 123: printf("[AA,9V,C,other] \n");
  5376  003A46  0E2D               	movlw	low STR_20
  5377  003A48  0100               	movlb	0	; () banked
  5378  003A4A  6FB9               	movwf	printf@f& (0+255),b
  5379  003A4C  0EFF               	movlw	high STR_20
  5380  003A4E  0100               	movlb	0	; () banked
  5381  003A50  6FBA               	movwf	(printf@f+1)& (0+255),b
  5382  003A52  EC09  F000         	call	_printf	;wreg free
  5383                           
  5384                           ;interface.c: 124: printf("[%d,%d,%d,%d]   *>",n_AA,n_9V,n_C,n_OTHER);
  5385  003A56  0EF6               	movlw	low STR_21
  5386  003A58  0100               	movlb	0	; () banked
  5387  003A5A  6FB9               	movwf	printf@f& (0+255),b
  5388  003A5C  0EFE               	movlw	high STR_21
  5389  003A5E  0100               	movlb	0	; () banked
  5390  003A60  6FBA               	movwf	(printf@f+1)& (0+255),b
  5391  003A62  C0ED  F0BB         	movff	showRunStats@n_AA,?_printf+2
  5392  003A66  C0EE  F0BC         	movff	showRunStats@n_AA+1,?_printf+3
  5393  003A6A  C0EF  F0BD         	movff	showRunStats@n_9V,?_printf+4
  5394  003A6E  C0F0  F0BE         	movff	showRunStats@n_9V+1,?_printf+5
  5395  003A72  C0F1  F0BF         	movff	showRunStats@n_C,?_printf+6
  5396  003A76  C0F2  F0C0         	movff	showRunStats@n_C+1,?_printf+7
  5397  003A7A  C0F3  F0C1         	movff	showRunStats@n_OTHER,?_printf+8
  5398  003A7E  C0F4  F0C2         	movff	showRunStats@n_OTHER+1,?_printf+9
  5399  003A82  EC09  F000         	call	_printf	;wreg free
  5400  003A86                     l7377:
  5401  003A86  EC32  F022         	call	_readKeypad	;wreg free
  5402  003A8A  0A2A               	xorlw	42
  5403  003A8C  B4D8               	btfsc	status,2,c
  5404  003A8E  0012               	return	
  5405  003A90  D7FA               	goto	l7377
  5406  003A92                     __end_of_showRunStats:
  5407                           	opt stack 0
  5408                           tblptru	equ	0xFF8
  5409                           tblptrh	equ	0xFF7
  5410                           tblptrl	equ	0xFF6
  5411                           tablat	equ	0xFF5
  5412                           postinc0	equ	0xFEE
  5413                           wreg	equ	0xFE8
  5414                           postdec1	equ	0xFE5
  5415                           fsr1l	equ	0xFE1
  5416                           indf2	equ	0xFDF
  5417                           postinc2	equ	0xFDE
  5418                           postdec2	equ	0xFDD
  5419                           fsr2h	equ	0xFDA
  5420                           fsr2l	equ	0xFD9
  5421                           status	equ	0xFD8
  5422                           
  5423 ;; *************** function _showRunSelect *****************
  5424 ;; Defined at:
  5425 ;;		line 86 in file "interface.c"
  5426 ;; Parameters:    Size  Location     Type
  5427 ;;		None
  5428 ;; Auto vars:     Size  Location     Type
  5429 ;;  k               1  107[BANK0 ] unsigned char 
  5430 ;; Return value:  Size  Location     Type
  5431 ;;                  1    wreg      unsigned char 
  5432 ;; Registers used:
  5433 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5434 ;; Tracked objects:
  5435 ;;		On entry : 0/0
  5436 ;;		On exit  : 0/0
  5437 ;;		Unchanged: 0/0
  5438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5440 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5442 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5443 ;;Total ram usage:        1 bytes
  5444 ;; Hardware stack levels used:    1
  5445 ;; Hardware stack levels required when called:    8
  5446 ;; This function calls:
  5447 ;;		_lcdClear
  5448 ;;		_printf
  5449 ;;		_readKeypad
  5450 ;; This function is called by:
  5451 ;;		_showInterface
  5452 ;; This function uses a non-reentrant model
  5453 ;;
  5454                           
  5455                           	psect	text10
  5456  003FFA                     __ptext10:
  5457                           	opt stack 0
  5458  003FFA                     _showRunSelect:
  5459                           	opt stack 21
  5460                           
  5461                           ;interface.c: 87: lcdClear();
  5462                           
  5463                           ;incstack = 0
  5464  003FFA  EC00  F023         	call	_lcdClear	;wreg free
  5465                           
  5466                           ;interface.c: 88: printf("select run:     \n");
  5467  003FFE  0E1B               	movlw	low STR_14
  5468  004000  0100               	movlb	0	; () banked
  5469  004002  6FB9               	movwf	printf@f& (0+255),b
  5470  004004  0EFF               	movlw	high STR_14
  5471  004006  0100               	movlb	0	; () banked
  5472  004008  6FBA               	movwf	(printf@f+1)& (0+255),b
  5473  00400A  EC09  F000         	call	_printf	;wreg free
  5474                           
  5475                           ;interface.c: 89: printf("[1,2,3,4]     *>");
  5476  00400E  0E61               	movlw	low STR_15
  5477  004010  0100               	movlb	0	; () banked
  5478  004012  6FB9               	movwf	printf@f& (0+255),b
  5479  004014  0EFF               	movlw	high STR_15
  5480  004016  0100               	movlb	0	; () banked
  5481  004018  6FBA               	movwf	(printf@f+1)& (0+255),b
  5482  00401A  EC09  F000         	call	_printf	;wreg free
  5483  00401E                     l7479:
  5484  00401E  EC32  F022         	call	_readKeypad	;wreg free
  5485  004022  0100               	movlb	0	; () banked
  5486  004024  6FEB               	movwf	showRunSelect@k& (0+255),b
  5487                           
  5488                           ; BSR set to: 0
  5489                           ;interface.c: 93: while(k != '1' && k != '2' && k != '3' && k != '4' && k != '*');
  5490  004026  0E31               	movlw	49
  5491  004028  0100               	movlb	0	; () banked
  5492  00402A  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  5493  00402C  B4D8               	btfsc	status,2,c
  5494  00402E  D014               	goto	l7491
  5495                           
  5496                           ; BSR set to: 0
  5497  004030  0E32               	movlw	50
  5498  004032  0100               	movlb	0	; () banked
  5499  004034  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  5500  004036  B4D8               	btfsc	status,2,c
  5501  004038  D00F               	goto	l7491
  5502                           
  5503                           ; BSR set to: 0
  5504  00403A  0E33               	movlw	51
  5505  00403C  0100               	movlb	0	; () banked
  5506  00403E  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  5507  004040  B4D8               	btfsc	status,2,c
  5508  004042  D00A               	goto	l7491
  5509                           
  5510                           ; BSR set to: 0
  5511  004044  0E34               	movlw	52
  5512  004046  0100               	movlb	0	; () banked
  5513  004048  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  5514  00404A  B4D8               	btfsc	status,2,c
  5515  00404C  D005               	goto	l7491
  5516                           
  5517                           ; BSR set to: 0
  5518  00404E  0E2A               	movlw	42
  5519  004050  0100               	movlb	0	; () banked
  5520  004052  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  5521  004054  A4D8               	btfss	status,2,c
  5522  004056  D7E3               	goto	l7479
  5523  004058                     l7491:
  5524                           
  5525                           ; BSR set to: 0
  5526                           ;interface.c: 94: return k;
  5527  004058  0100               	movlb	0	; () banked
  5528  00405A  51EB               	movf	showRunSelect@k& (0+255),w,b
  5529  00405C  0012               	return	
  5530  00405E                     __end_of_showRunSelect:
  5531                           	opt stack 0
  5532                           tblptru	equ	0xFF8
  5533                           tblptrh	equ	0xFF7
  5534                           tblptrl	equ	0xFF6
  5535                           tablat	equ	0xFF5
  5536                           postinc0	equ	0xFEE
  5537                           wreg	equ	0xFE8
  5538                           postdec1	equ	0xFE5
  5539                           fsr1l	equ	0xFE1
  5540                           indf2	equ	0xFDF
  5541                           postinc2	equ	0xFDE
  5542                           postdec2	equ	0xFDD
  5543                           fsr2h	equ	0xFDA
  5544                           fsr2l	equ	0xFD9
  5545                           status	equ	0xFD8
  5546                           
  5547 ;; *************** function _showRunMenu *****************
  5548 ;; Defined at:
  5549 ;;		line 97 in file "interface.c"
  5550 ;; Parameters:    Size  Location     Type
  5551 ;;  key             1    wreg     unsigned char 
  5552 ;; Auto vars:     Size  Location     Type
  5553 ;;  key             1  107[BANK0 ] unsigned char 
  5554 ;;  k               1  108[BANK0 ] unsigned char 
  5555 ;; Return value:  Size  Location     Type
  5556 ;;                  1    wreg      unsigned char 
  5557 ;; Registers used:
  5558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5559 ;; Tracked objects:
  5560 ;;		On entry : 0/0
  5561 ;;		On exit  : 0/0
  5562 ;;		Unchanged: 0/0
  5563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5565 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5567 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5568 ;;Total ram usage:        2 bytes
  5569 ;; Hardware stack levels used:    1
  5570 ;; Hardware stack levels required when called:    8
  5571 ;; This function calls:
  5572 ;;		_lcdClear
  5573 ;;		_printf
  5574 ;;		_readKeypad
  5575 ;; This function is called by:
  5576 ;;		_showInterface
  5577 ;; This function uses a non-reentrant model
  5578 ;;
  5579                           
  5580                           	psect	text11
  5581  00405E                     __ptext11:
  5582                           	opt stack 0
  5583  00405E                     _showRunMenu:
  5584                           	opt stack 21
  5585                           
  5586                           ; BSR set to: 0
  5587                           ;incstack = 0
  5588                           ;showRunMenu@key stored from wreg
  5589  00405E  0100               	movlb	0	; () banked
  5590  004060  6FEB               	movwf	showRunMenu@key& (0+255),b
  5591                           
  5592                           ;interface.c: 98: lcdClear();
  5593  004062  EC00  F023         	call	_lcdClear	;wreg free
  5594                           
  5595                           ;interface.c: 99: printf("%c) time  <A     \n",key);
  5596  004066  0EE3               	movlw	low STR_16
  5597  004068  0100               	movlb	0	; () banked
  5598  00406A  6FB9               	movwf	printf@f& (0+255),b
  5599  00406C  0EFE               	movlw	high STR_16
  5600  00406E  0100               	movlb	0	; () banked
  5601  004070  6FBA               	movwf	(printf@f+1)& (0+255),b
  5602  004072  C0EB  F0BB         	movff	showRunMenu@key,?_printf+2
  5603  004076  0100               	movlb	0	; () banked
  5604  004078  6BBC               	clrf	(?_printf+3)& (0+255),b
  5605  00407A  EC09  F000         	call	_printf	;wreg free
  5606                           
  5607                           ;interface.c: 100: printf( "   stats <B   *>");
  5608  00407E  0E83               	movlw	low STR_17
  5609  004080  0100               	movlb	0	; () banked
  5610  004082  6FB9               	movwf	printf@f& (0+255),b
  5611  004084  0EFF               	movlw	high STR_17
  5612  004086  0100               	movlb	0	; () banked
  5613  004088  6FBA               	movwf	(printf@f+1)& (0+255),b
  5614  00408A  EC09  F000         	call	_printf	;wreg free
  5615  00408E                     l7509:
  5616  00408E  EC32  F022         	call	_readKeypad	;wreg free
  5617  004092  0100               	movlb	0	; () banked
  5618  004094  6FEC               	movwf	showRunMenu@k& (0+255),b
  5619                           
  5620                           ; BSR set to: 0
  5621                           ;interface.c: 104: while(k != 'A' && k != 'B' && k != '*');
  5622  004096  0E41               	movlw	65
  5623  004098  0100               	movlb	0	; () banked
  5624  00409A  19EC               	xorwf	showRunMenu@k& (0+255),w,b
  5625  00409C  B4D8               	btfsc	status,2,c
  5626  00409E  D00A               	goto	l7517
  5627                           
  5628                           ; BSR set to: 0
  5629  0040A0  0E42               	movlw	66
  5630  0040A2  0100               	movlb	0	; () banked
  5631  0040A4  19EC               	xorwf	showRunMenu@k& (0+255),w,b
  5632  0040A6  B4D8               	btfsc	status,2,c
  5633  0040A8  D005               	goto	l7517
  5634                           
  5635                           ; BSR set to: 0
  5636  0040AA  0E2A               	movlw	42
  5637  0040AC  0100               	movlb	0	; () banked
  5638  0040AE  19EC               	xorwf	showRunMenu@k& (0+255),w,b
  5639  0040B0  A4D8               	btfss	status,2,c
  5640  0040B2  D7ED               	goto	l7509
  5641  0040B4                     l7517:
  5642                           
  5643                           ; BSR set to: 0
  5644                           ;interface.c: 105: return k;
  5645  0040B4  0100               	movlb	0	; () banked
  5646  0040B6  51EC               	movf	showRunMenu@k& (0+255),w,b
  5647  0040B8  0012               	return	
  5648  0040BA                     __end_of_showRunMenu:
  5649                           	opt stack 0
  5650                           tblptru	equ	0xFF8
  5651                           tblptrh	equ	0xFF7
  5652                           tblptrl	equ	0xFF6
  5653                           tablat	equ	0xFF5
  5654                           postinc0	equ	0xFEE
  5655                           wreg	equ	0xFE8
  5656                           postdec1	equ	0xFE5
  5657                           fsr1l	equ	0xFE1
  5658                           indf2	equ	0xFDF
  5659                           postinc2	equ	0xFDE
  5660                           postdec2	equ	0xFDD
  5661                           fsr2h	equ	0xFDA
  5662                           fsr2l	equ	0xFD9
  5663                           status	equ	0xFD8
  5664                           
  5665 ;; *************** function _showMainMenu *****************
  5666 ;; Defined at:
  5667 ;;		line 75 in file "interface.c"
  5668 ;; Parameters:    Size  Location     Type
  5669 ;;		None
  5670 ;; Auto vars:     Size  Location     Type
  5671 ;;  k               1  107[BANK0 ] unsigned char 
  5672 ;; Return value:  Size  Location     Type
  5673 ;;                  1    wreg      unsigned char 
  5674 ;; Registers used:
  5675 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5676 ;; Tracked objects:
  5677 ;;		On entry : 0/0
  5678 ;;		On exit  : 0/0
  5679 ;;		Unchanged: 0/0
  5680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5682 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5684 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5685 ;;Total ram usage:        1 bytes
  5686 ;; Hardware stack levels used:    1
  5687 ;; Hardware stack levels required when called:    8
  5688 ;; This function calls:
  5689 ;;		_lcdClear
  5690 ;;		_printf
  5691 ;;		_readKeypad
  5692 ;; This function is called by:
  5693 ;;		_showInterface
  5694 ;; This function uses a non-reentrant model
  5695 ;;
  5696                           
  5697                           	psect	text12
  5698  004170                     __ptext12:
  5699                           	opt stack 0
  5700  004170                     _showMainMenu:
  5701                           	opt stack 21
  5702                           
  5703                           ;interface.c: 76: lcdClear();
  5704                           
  5705                           ; BSR set to: 0
  5706                           ;incstack = 0
  5707  004170  EC00  F023         	call	_lcdClear	;wreg free
  5708                           
  5709                           ;interface.c: 77: printf("start   <B      \n");
  5710  004174  0E09               	movlw	low STR_12
  5711  004176  0100               	movlb	0	; () banked
  5712  004178  6FB9               	movwf	printf@f& (0+255),b
  5713  00417A  0EFF               	movlw	high STR_12
  5714  00417C  0100               	movlb	0	; () banked
  5715  00417E  6FBA               	movwf	(printf@f+1)& (0+255),b
  5716  004180  EC09  F000         	call	_printf	;wreg free
  5717                           
  5718                           ;interface.c: 78: printf("history <C    *>");
  5719  004184  0E72               	movlw	low STR_13
  5720  004186  0100               	movlb	0	; () banked
  5721  004188  6FB9               	movwf	printf@f& (0+255),b
  5722  00418A  0EFF               	movlw	high STR_13
  5723  00418C  0100               	movlb	0	; () banked
  5724  00418E  6FBA               	movwf	(printf@f+1)& (0+255),b
  5725  004190  EC09  F000         	call	_printf	;wreg free
  5726  004194                     l7461:
  5727  004194  EC32  F022         	call	_readKeypad	;wreg free
  5728  004198  0100               	movlb	0	; () banked
  5729  00419A  6FEB               	movwf	showMainMenu@k& (0+255),b
  5730                           
  5731                           ; BSR set to: 0
  5732                           ;interface.c: 82: while(k != 'B' && k != 'C' && k != '*');
  5733  00419C  0E42               	movlw	66
  5734  00419E  0100               	movlb	0	; () banked
  5735  0041A0  19EB               	xorwf	showMainMenu@k& (0+255),w,b
  5736  0041A2  B4D8               	btfsc	status,2,c
  5737  0041A4  D00A               	goto	l7469
  5738                           
  5739                           ; BSR set to: 0
  5740  0041A6  0E43               	movlw	67
  5741  0041A8  0100               	movlb	0	; () banked
  5742  0041AA  19EB               	xorwf	showMainMenu@k& (0+255),w,b
  5743  0041AC  B4D8               	btfsc	status,2,c
  5744  0041AE  D005               	goto	l7469
  5745                           
  5746                           ; BSR set to: 0
  5747  0041B0  0E2A               	movlw	42
  5748  0041B2  0100               	movlb	0	; () banked
  5749  0041B4  19EB               	xorwf	showMainMenu@k& (0+255),w,b
  5750  0041B6  A4D8               	btfss	status,2,c
  5751  0041B8  D7ED               	goto	l7461
  5752  0041BA                     l7469:
  5753                           
  5754                           ; BSR set to: 0
  5755                           ;interface.c: 83: return k;
  5756  0041BA  0100               	movlb	0	; () banked
  5757  0041BC  51EB               	movf	showMainMenu@k& (0+255),w,b
  5758  0041BE  0012               	return	
  5759  0041C0                     __end_of_showMainMenu:
  5760                           	opt stack 0
  5761                           tblptru	equ	0xFF8
  5762                           tblptrh	equ	0xFF7
  5763                           tblptrl	equ	0xFF6
  5764                           tablat	equ	0xFF5
  5765                           postinc0	equ	0xFEE
  5766                           wreg	equ	0xFE8
  5767                           postdec1	equ	0xFE5
  5768                           fsr1l	equ	0xFE1
  5769                           indf2	equ	0xFDF
  5770                           postinc2	equ	0xFDE
  5771                           postdec2	equ	0xFDD
  5772                           fsr2h	equ	0xFDA
  5773                           fsr2l	equ	0xFD9
  5774                           status	equ	0xFD8
  5775                           
  5776 ;; *************** function _showErrorMessage *****************
  5777 ;; Defined at:
  5778 ;;		line 129 in file "interface.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;		None
  5781 ;; Auto vars:     Size  Location     Type
  5782 ;;		None
  5783 ;; Return value:  Size  Location     Type
  5784 ;;                  1    wreg      void 
  5785 ;; Registers used:
  5786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5787 ;; Tracked objects:
  5788 ;;		On entry : 0/0
  5789 ;;		On exit  : 0/0
  5790 ;;		Unchanged: 0/0
  5791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5796 ;;Total ram usage:        0 bytes
  5797 ;; Hardware stack levels used:    1
  5798 ;; Hardware stack levels required when called:    8
  5799 ;; This function calls:
  5800 ;;		_lcdClear
  5801 ;;		_printf
  5802 ;;		_readKeypad
  5803 ;; This function is called by:
  5804 ;;		_showInterface
  5805 ;; This function uses a non-reentrant model
  5806 ;;
  5807                           
  5808                           	psect	text13
  5809  004434                     __ptext13:
  5810                           	opt stack 0
  5811  004434                     _showErrorMessage:
  5812                           	opt stack 21
  5813                           
  5814                           ;interface.c: 130: lcdClear();
  5815                           
  5816                           ; BSR set to: 0
  5817                           ;incstack = 0
  5818  004434  EC00  F023         	call	_lcdClear	;wreg free
  5819                           
  5820                           ;interface.c: 132: printf(" run not \n");
  5821  004438  0EC1               	movlw	low STR_22
  5822  00443A  0100               	movlb	0	; () banked
  5823  00443C  6FB9               	movwf	printf@f& (0+255),b
  5824  00443E  0EFF               	movlw	high STR_22
  5825  004440  0100               	movlb	0	; () banked
  5826  004442  6FBA               	movwf	(printf@f+1)& (0+255),b
  5827  004444  EC09  F000         	call	_printf	;wreg free
  5828                           
  5829                           ;interface.c: 133: printf("  available   *>");
  5830  004448  0E94               	movlw	low STR_23
  5831  00444A  0100               	movlb	0	; () banked
  5832  00444C  6FB9               	movwf	printf@f& (0+255),b
  5833  00444E  0EFF               	movlw	high STR_23
  5834  004450  0100               	movlb	0	; () banked
  5835  004452  6FBA               	movwf	(printf@f+1)& (0+255),b
  5836  004454  EC09  F000         	call	_printf	;wreg free
  5837  004458                     l7501:
  5838  004458  EC32  F022         	call	_readKeypad	;wreg free
  5839  00445C  0A2A               	xorlw	42
  5840  00445E  B4D8               	btfsc	status,2,c
  5841  004460  0012               	return	
  5842  004462  D7FA               	goto	l7501
  5843  004464                     __end_of_showErrorMessage:
  5844                           	opt stack 0
  5845                           tblptru	equ	0xFF8
  5846                           tblptrh	equ	0xFF7
  5847                           tblptrl	equ	0xFF6
  5848                           tablat	equ	0xFF5
  5849                           postinc0	equ	0xFEE
  5850                           wreg	equ	0xFE8
  5851                           postdec1	equ	0xFE5
  5852                           fsr1l	equ	0xFE1
  5853                           indf2	equ	0xFDF
  5854                           postinc2	equ	0xFDE
  5855                           postdec2	equ	0xFDD
  5856                           fsr2h	equ	0xFDA
  5857                           fsr2l	equ	0xFD9
  5858                           status	equ	0xFD8
  5859                           
  5860 ;; *************** function _readKeypad *****************
  5861 ;; Defined at:
  5862 ;;		line 36 in file "keypad.c"
  5863 ;; Parameters:    Size  Location     Type
  5864 ;;		None
  5865 ;; Auto vars:     Size  Location     Type
  5866 ;;  key             1   36[COMRAM] unsigned char 
  5867 ;; Return value:  Size  Location     Type
  5868 ;;                  1    wreg      unsigned char 
  5869 ;; Registers used:
  5870 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5871 ;; Tracked objects:
  5872 ;;		On entry : 0/0
  5873 ;;		On exit  : 0/0
  5874 ;;		Unchanged: 0/0
  5875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5877 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5879 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5880 ;;Total ram usage:        1 bytes
  5881 ;; Hardware stack levels used:    1
  5882 ;; Hardware stack levels required when called:    3
  5883 ;; This function calls:
  5884 ;;		Nothing
  5885 ;; This function is called by:
  5886 ;;		_sortBattery
  5887 ;;		_showMainMenu
  5888 ;;		_showRunSelect
  5889 ;;		_showRunMenu
  5890 ;;		_showRunTime
  5891 ;;		_showRunStats
  5892 ;;		_showErrorMessage
  5893 ;;		_debug
  5894 ;;		_pause
  5895 ;; This function uses a non-reentrant model
  5896 ;;
  5897                           
  5898                           	psect	text14
  5899  004464                     __ptext14:
  5900                           	opt stack 0
  5901  004464                     _readKeypad:
  5902                           	opt stack 26
  5903  004464                     l271:
  5904  004464  A281               	btfss	3969,1,c	;volatile
  5905  004466  D7FE               	goto	l271
  5906                           
  5907                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  5908  004468  3881               	swapf	3969,w,c	;volatile
  5909  00446A  0B0F               	andlw	15
  5910  00446C  0B0F               	andlw	15
  5911  00446E  6E25               	movwf	readKeypad@key,c
  5912  004470                     l274:
  5913  004470  B281               	btfsc	3969,1,c	;volatile
  5914  004472  D7FE               	goto	l274
  5915                           
  5916                           ;keypad.c: 40: return keys[key];
  5917  004474  5025               	movf	readKeypad@key,w,c
  5918  004476  0D01               	mullw	1
  5919  004478  0E21               	movlw	low _keys
  5920  00447A  24F3               	addwf	prodl,w,c
  5921  00447C  6EF6               	movwf	tblptrl,c
  5922  00447E  0EFE               	movlw	high _keys
  5923  004480  20F4               	addwfc	prodh,w,c
  5924  004482  6EF7               	movwf	tblptrh,c
  5925  004484                     	if	0	;There are less than 3 active tblptr bytes
  5926  004484                     	endif
  5927  004484  0008               	tblrd		*
  5928  004486  50F5               	movf	tablat,w,c
  5929  004488  0012               	return	
  5930  00448A                     __end_of_readKeypad:
  5931                           	opt stack 0
  5932                           tblptru	equ	0xFF8
  5933                           tblptrh	equ	0xFF7
  5934                           tblptrl	equ	0xFF6
  5935                           tablat	equ	0xFF5
  5936                           prodh	equ	0xFF4
  5937                           prodl	equ	0xFF3
  5938                           postinc0	equ	0xFEE
  5939                           wreg	equ	0xFE8
  5940                           postdec1	equ	0xFE5
  5941                           fsr1l	equ	0xFE1
  5942                           indf2	equ	0xFDF
  5943                           postinc2	equ	0xFDE
  5944                           postdec2	equ	0xFDD
  5945                           fsr2h	equ	0xFDA
  5946                           fsr2l	equ	0xFD9
  5947                           status	equ	0xFD8
  5948                           
  5949 ;; *************** function _showDateTime *****************
  5950 ;; Defined at:
  5951 ;;		line 59 in file "interface.c"
  5952 ;; Parameters:    Size  Location     Type
  5953 ;;		None
  5954 ;; Auto vars:     Size  Location     Type
  5955 ;;  t               2   12[BANK1 ] PTR int 
  5956 ;;		 -> getTime@time(14), 
  5957 ;;  year            2   10[BANK1 ] int 
  5958 ;;  mon             2    8[BANK1 ] int 
  5959 ;;  day             2    6[BANK1 ] int 
  5960 ;;  hour            2    4[BANK1 ] int 
  5961 ;;  min             2    2[BANK1 ] int 
  5962 ;;  sec             2    0[BANK1 ] int 
  5963 ;; Return value:  Size  Location     Type
  5964 ;;                  1    wreg      void 
  5965 ;; Registers used:
  5966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5967 ;; Tracked objects:
  5968 ;;		On entry : 0/0
  5969 ;;		On exit  : 0/0
  5970 ;;		Unchanged: 0/0
  5971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5973 ;;      Locals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5974 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5975 ;;      Totals:         0       2      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5976 ;;Total ram usage:       16 bytes
  5977 ;; Hardware stack levels used:    1
  5978 ;; Hardware stack levels required when called:    8
  5979 ;; This function calls:
  5980 ;;		_getTime
  5981 ;;		_initRTC
  5982 ;;		_keyPressed
  5983 ;;		_lcdClear
  5984 ;;		_lcdHome
  5985 ;;		_printf
  5986 ;; This function is called by:
  5987 ;;		_showInterface
  5988 ;; This function uses a non-reentrant model
  5989 ;;
  5990                           
  5991                           	psect	text15
  5992  002F12                     __ptext15:
  5993                           	opt stack 0
  5994  002F12                     _showDateTime:
  5995                           	opt stack 21
  5996                           
  5997                           ;interface.c: 60: lcdClear();
  5998                           
  5999                           ;incstack = 0
  6000  002F12  EC00  F023         	call	_lcdClear	;wreg free
  6001                           
  6002                           ;interface.c: 61: initRTC();
  6003  002F16  ECCD  F022         	call	_initRTC	;wreg free
  6004                           
  6005                           ;interface.c: 63: while(keyPressed() != 'A'){
  6006  002F1A  D07D               	goto	l7453
  6007  002F1C                     l7431:
  6008                           
  6009                           ;interface.c: 64: int* t = getTime();
  6010  002F1C  ECDD  F01D         	call	_getTime	;wreg free
  6011  002F20  C028  F10C         	movff	?_getTime,showDateTime@t
  6012  002F24  C029  F10D         	movff	?_getTime+1,showDateTime@t+1
  6013                           
  6014                           ;interface.c: 65: int sec = t[0], min = t[1], hour = t[2];
  6015  002F28  C10C  FFD9         	movff	showDateTime@t,fsr2l
  6016  002F2C  C10D  FFDA         	movff	showDateTime@t+1,fsr2h
  6017  002F30  CFDE F100          	movff	postinc2,showDateTime@sec
  6018  002F34  CFDD F101          	movff	postdec2,showDateTime@sec+1
  6019  002F38  0101               	movlb	1	; () banked
  6020  002F3A  EE20 F002          	lfsr	2,2
  6021  002F3E  510C               	movf	showDateTime@t& (0+255),w,b
  6022  002F40  26D9               	addwf	fsr2l,f,c
  6023  002F42  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  6024  002F44  22DA               	addwfc	fsr2h,f,c
  6025  002F46  CFDE F102          	movff	postinc2,showDateTime@min
  6026  002F4A  CFDD F103          	movff	postdec2,showDateTime@min+1
  6027                           
  6028                           ; BSR set to: 1
  6029  002F4E  0101               	movlb	1	; () banked
  6030  002F50  EE20 F004          	lfsr	2,4
  6031  002F54  510C               	movf	showDateTime@t& (0+255),w,b
  6032  002F56  26D9               	addwf	fsr2l,f,c
  6033  002F58  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  6034  002F5A  22DA               	addwfc	fsr2h,f,c
  6035  002F5C  CFDE F104          	movff	postinc2,showDateTime@hour
  6036  002F60  CFDD F105          	movff	postdec2,showDateTime@hour+1
  6037                           
  6038                           ; BSR set to: 1
  6039                           ;interface.c: 66: int day = t[4], mon = t[5], year = t[6];
  6040  002F64  0101               	movlb	1	; () banked
  6041  002F66  EE20 F008          	lfsr	2,8
  6042  002F6A  510C               	movf	showDateTime@t& (0+255),w,b
  6043  002F6C  26D9               	addwf	fsr2l,f,c
  6044  002F6E  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  6045  002F70  22DA               	addwfc	fsr2h,f,c
  6046  002F72  CFDE F106          	movff	postinc2,showDateTime@day
  6047  002F76  CFDD F107          	movff	postdec2,showDateTime@day+1
  6048                           
  6049                           ; BSR set to: 1
  6050  002F7A  0101               	movlb	1	; () banked
  6051  002F7C  EE20 F00A          	lfsr	2,10
  6052  002F80  510C               	movf	showDateTime@t& (0+255),w,b
  6053  002F82  26D9               	addwf	fsr2l,f,c
  6054  002F84  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  6055  002F86  22DA               	addwfc	fsr2h,f,c
  6056  002F88  CFDE F108          	movff	postinc2,showDateTime@mon
  6057  002F8C  CFDD F109          	movff	postdec2,showDateTime@mon+1
  6058                           
  6059                           ; BSR set to: 1
  6060  002F90  0101               	movlb	1	; () banked
  6061  002F92  EE20 F00C          	lfsr	2,12
  6062  002F96  510C               	movf	showDateTime@t& (0+255),w,b
  6063  002F98  26D9               	addwf	fsr2l,f,c
  6064  002F9A  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  6065  002F9C  22DA               	addwfc	fsr2h,f,c
  6066  002F9E  CFDE F10A          	movff	postinc2,showDateTime@year
  6067  002FA2  CFDD F10B          	movff	postdec2,showDateTime@year+1
  6068                           
  6069                           ; BSR set to: 1
  6070                           ;interface.c: 68: lcdHome();
  6071  002FA6  ECFC  F022         	call	_lcdHome	;wreg free
  6072                           
  6073                           ;interface.c: 69: printf("  20%02x/%02x/%02x\n",year,mon,day);
  6074  002FAA  0ECF               	movlw	low STR_10
  6075  002FAC  0100               	movlb	0	; () banked
  6076  002FAE  6FB9               	movwf	printf@f& (0+255),b
  6077  002FB0  0EFE               	movlw	high STR_10
  6078  002FB2  0100               	movlb	0	; () banked
  6079  002FB4  6FBA               	movwf	(printf@f+1)& (0+255),b
  6080  002FB6  C10A  F0BB         	movff	showDateTime@year,?_printf+2
  6081  002FBA  C10B  F0BC         	movff	showDateTime@year+1,?_printf+3
  6082  002FBE  C108  F0BD         	movff	showDateTime@mon,?_printf+4
  6083  002FC2  C109  F0BE         	movff	showDateTime@mon+1,?_printf+5
  6084  002FC6  C106  F0BF         	movff	showDateTime@day,?_printf+6
  6085  002FCA  C107  F0C0         	movff	showDateTime@day+1,?_printf+7
  6086  002FCE  EC09  F000         	call	_printf	;wreg free
  6087                           
  6088                           ;interface.c: 70: printf("   %02x:%02x:%02x   A>",hour,min,sec);
  6089  002FD2  0EB8               	movlw	low STR_11
  6090  002FD4  0100               	movlb	0	; () banked
  6091  002FD6  6FB9               	movwf	printf@f& (0+255),b
  6092  002FD8  0EFE               	movlw	high STR_11
  6093  002FDA  0100               	movlb	0	; () banked
  6094  002FDC  6FBA               	movwf	(printf@f+1)& (0+255),b
  6095  002FDE  C104  F0BB         	movff	showDateTime@hour,?_printf+2
  6096  002FE2  C105  F0BC         	movff	showDateTime@hour+1,?_printf+3
  6097  002FE6  C102  F0BD         	movff	showDateTime@min,?_printf+4
  6098  002FEA  C103  F0BE         	movff	showDateTime@min+1,?_printf+5
  6099  002FEE  C100  F0BF         	movff	showDateTime@sec,?_printf+6
  6100  002FF2  C101  F0C0         	movff	showDateTime@sec+1,?_printf+7
  6101  002FF6  EC09  F000         	call	_printf	;wreg free
  6102                           
  6103                           ;interface.c: 71: _delay((unsigned long)((100)*(10000000/4000.0)));
  6104  002FFA  0E02               	movlw	2
  6105  002FFC  0100               	movlb	0	; () banked
  6106  002FFE  6FEC               	movwf	(??_showDateTime+1)& (0+255),b
  6107  003000  0E45               	movlw	69
  6108  003002  0100               	movlb	0	; () banked
  6109  003004  6FEB               	movwf	??_showDateTime& (0+255),b
  6110  003006  0EA9               	movlw	169
  6111  003008                     u8477:
  6112  003008  2EE8               	decfsz	wreg,f,c
  6113  00300A  D7FE               	bra	u8477
  6114  00300C  2FEB               	decfsz	??_showDateTime& (0+255),f,b
  6115  00300E  D7FC               	bra	u8477
  6116  003010  2FEC               	decfsz	(??_showDateTime+1)& (0+255),f,b
  6117  003012  D7FA               	bra	u8477
  6118  003014  D000               	nop2	
  6119  003016                     l7453:
  6120  003016  ECE8  F022         	call	_keyPressed	;wreg free
  6121  00301A  0A41               	xorlw	65
  6122  00301C  B4D8               	btfsc	status,2,c
  6123  00301E  0012               	return	
  6124  003020  D77D               	goto	l7431
  6125  003022                     __end_of_showDateTime:
  6126                           	opt stack 0
  6127                           tblptru	equ	0xFF8
  6128                           tblptrh	equ	0xFF7
  6129                           tblptrl	equ	0xFF6
  6130                           tablat	equ	0xFF5
  6131                           prodh	equ	0xFF4
  6132                           prodl	equ	0xFF3
  6133                           postinc0	equ	0xFEE
  6134                           wreg	equ	0xFE8
  6135                           postdec1	equ	0xFE5
  6136                           fsr1l	equ	0xFE1
  6137                           indf2	equ	0xFDF
  6138                           postinc2	equ	0xFDE
  6139                           postdec2	equ	0xFDD
  6140                           fsr2h	equ	0xFDA
  6141                           fsr2l	equ	0xFD9
  6142                           status	equ	0xFD8
  6143                           
  6144 ;; *************** function _printf *****************
  6145 ;; Defined at:
  6146 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6147 ;; Parameters:    Size  Location     Type
  6148 ;;  f               2   57[BANK0 ] PTR const unsigned char 
  6149 ;;		 -> STR_23(17), STR_22(11), STR_21(19), STR_20(18), 
  6150 ;;		 -> STR_19(17), STR_18(24), STR_17(17), STR_16(19), 
  6151 ;;		 -> STR_15(17), STR_14(18), STR_13(17), STR_12(18), 
  6152 ;;		 -> STR_11(23), STR_10(20), STR_9(8), STR_8(11), 
  6153 ;;		 -> STR_7(11), STR_6(11), STR_5(12), STR_4(16), 
  6154 ;;		 -> STR_3(30), STR_2(29), STR_1(9), 
  6155 ;; Auto vars:     Size  Location     Type
  6156 ;;  idx             1   80[BANK0 ] unsigned char 
  6157 ;;  val             4   96[BANK0 ] unsigned long 
  6158 ;;  tmpval          4   87[BANK0 ] struct .
  6159 ;;  fval            3   93[BANK0 ] struct .
  6160 ;;  prec            2  104[BANK0 ] int 
  6161 ;;  flag            2  102[BANK0 ] unsigned short 
  6162 ;;  width           2  100[BANK0 ] int 
  6163 ;;  exp             2   91[BANK0 ] int 
  6164 ;;  ap              2   85[BANK0 ] PTR void [1]
  6165 ;;		 -> ?_printf(2), 
  6166 ;;  len             2   83[BANK0 ] unsigned int 
  6167 ;;  cp              2   81[BANK0 ] PTR const unsigned char 
  6168 ;;		 -> printf@c(1), 
  6169 ;;  c               1  106[BANK0 ] char 
  6170 ;;  d               1    0        unsigned char 
  6171 ;; Return value:  Size  Location     Type
  6172 ;;                  2   57[BANK0 ] int 
  6173 ;; Registers used:
  6174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6175 ;; Tracked objects:
  6176 ;;		On entry : 0/0
  6177 ;;		On exit  : 0/0
  6178 ;;		Unchanged: 0/0
  6179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6180 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6181 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6182 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6183 ;;      Totals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6184 ;;Total ram usage:       50 bytes
  6185 ;; Hardware stack levels used:    1
  6186 ;; Hardware stack levels required when called:    7
  6187 ;; This function calls:
  6188 ;;		___awdiv
  6189 ;;		___ftadd
  6190 ;;		___ftge
  6191 ;;		___ftmul
  6192 ;;		___ftneg
  6193 ;;		___ftsub
  6194 ;;		___fttol
  6195 ;;		___lldiv
  6196 ;;		___llmod
  6197 ;;		___lltoft
  6198 ;;		___wmul
  6199 ;;		__div_to_l_
  6200 ;;		__tdiv_to_l_
  6201 ;;		_fround
  6202 ;;		_isdigit
  6203 ;;		_putch
  6204 ;;		_scale
  6205 ;; This function is called by:
  6206 ;;		_main
  6207 ;;		_sortBattery
  6208 ;;		_showDateTime
  6209 ;;		_showMainMenu
  6210 ;;		_showRunSelect
  6211 ;;		_showRunMenu
  6212 ;;		_showRunTime
  6213 ;;		_showRunStats
  6214 ;;		_showErrorMessage
  6215 ;;		_debug
  6216 ;;		_pause
  6217 ;;		_testFrequency
  6218 ;; This function uses a non-reentrant model
  6219 ;;
  6220                           
  6221                           	psect	text16
  6222  000012                     __ptext16:
  6223                           	opt stack 0
  6224  000012                     _printf:
  6225                           	opt stack 22
  6226                           
  6227                           ;doprnt.c: 466: va_list ap;
  6228                           ;doprnt.c: 499: signed char c;
  6229                           ;doprnt.c: 501: int width;
  6230                           ;doprnt.c: 504: int prec;
  6231                           ;doprnt.c: 508: unsigned short flag;
  6232                           ;doprnt.c: 515: char d;
  6233                           ;doprnt.c: 516: double fval;
  6234                           ;doprnt.c: 517: int exp;
  6235                           ;doprnt.c: 523: union {
  6236                           ;doprnt.c: 524: unsigned long vd;
  6237                           ;doprnt.c: 525: double integ;
  6238                           ;doprnt.c: 526: } tmpval;
  6239                           ;doprnt.c: 528: unsigned long val;
  6240                           ;doprnt.c: 529: unsigned len;
  6241                           ;doprnt.c: 530: const char * cp;
  6242                           ;doprnt.c: 533: *ap = __va_start();
  6243                           
  6244                           ;incstack = 0
  6245  000012  0EBB               	movlw	low (?_printf+2)
  6246  000014  0100               	movlb	0	; () banked
  6247  000016  6FD5               	movwf	printf@ap& (0+255),b
  6248  000018  0E00               	movlw	high (?_printf+2)
  6249  00001A  0100               	movlb	0	; () banked
  6250  00001C  6FD6               	movwf	(printf@ap+1)& (0+255),b
  6251                           
  6252                           ;doprnt.c: 536: while(c = *f++) {
  6253  00001E  EFF5  F006         	goto	l7145
  6254  000022                     l6779:
  6255                           
  6256                           ; BSR set to: 0
  6257                           ;doprnt.c: 538: if(c != '%')
  6258  000022  0E25               	movlw	37
  6259  000024  0100               	movlb	0	; () banked
  6260  000026  19EA               	xorwf	printf@c& (0+255),w,b
  6261  000028  B4D8               	btfsc	status,2,c
  6262  00002A  D006               	goto	l6783
  6263                           
  6264                           ; BSR set to: 0
  6265                           ;doprnt.c: 540: {
  6266                           ;doprnt.c: 541: (putch(c) );
  6267  00002C  0100               	movlb	0	; () banked
  6268  00002E  51EA               	movf	printf@c& (0+255),w,b
  6269  000030  EC7D  F022         	call	_putch
  6270                           
  6271                           ;doprnt.c: 542: continue;
  6272  000034  EFF5  F006         	goto	l7145
  6273  000038                     l6783:
  6274                           
  6275                           ;doprnt.c: 543: }
  6276                           ;doprnt.c: 546: width = 0;
  6277  000038  0E00               	movlw	0
  6278  00003A  0100               	movlb	0	; () banked
  6279  00003C  6FE5               	movwf	(printf@width+1)& (0+255),b
  6280  00003E  0E00               	movlw	0
  6281  000040  6FE4               	movwf	printf@width& (0+255),b
  6282                           
  6283                           ;doprnt.c: 548: flag = 0;
  6284  000042  0E00               	movlw	0
  6285  000044  0100               	movlb	0	; () banked
  6286  000046  6FE7               	movwf	(printf@flag+1)& (0+255),b
  6287  000048  0E00               	movlw	0
  6288  00004A  6FE6               	movwf	printf@flag& (0+255),b
  6289                           
  6290                           ; BSR set to: 0
  6291                           ;doprnt.c: 551: switch(*f) {
  6292                           
  6293                           ;doprnt.c: 550: for(;;) {
  6294  00004C  D005               	goto	l6789
  6295  00004E                     l6785:
  6296                           
  6297                           ;doprnt.c: 580: flag |= 0x04;
  6298  00004E  0100               	movlb	0	; () banked
  6299  000050  85E6               	bsf	printf@flag& (0+255),2,b
  6300                           
  6301                           ;doprnt.c: 581: f++;
  6302  000052  0100               	movlb	0	; () banked
  6303  000054  4BB9               	infsnz	printf@f& (0+255),f,b
  6304  000056  2BBA               	incf	(printf@f+1)& (0+255),f,b
  6305  000058                     l6789:
  6306  000058  C0B9  FFF6         	movff	printf@f,tblptrl
  6307  00005C  C0BA  FFF7         	movff	printf@f+1,tblptrh
  6308  000060                     	if	0	;tblptru may be non-zero
  6309  000060                     	endif
  6310  000060                     	if	0	;tblptru may be non-zero
  6311  000060                     	endif
  6312  000060  0008               	tblrd		*
  6313  000062  50F5               	movf	tablat,w,c
  6314                           
  6315                           ; Switch size 1, requested type "space"
  6316                           ; Number of cases is 1, Range of values is 48 to 48
  6317                           ; switch strategies available:
  6318                           ; Name         Instructions Cycles
  6319                           ; simple_byte            4     3 (average)
  6320                           ;	Chosen strategy is simple_byte
  6321  000064  0A30               	xorlw	48	; case 48
  6322  000066  B4D8               	btfsc	status,2,c
  6323  000068  D7F2               	goto	l6785
  6324                           
  6325                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6326                           
  6327                           ;doprnt.c: 586: }
  6328                           
  6329                           ;doprnt.c: 585: break;
  6330  00006A  C0B9  FFF6         	movff	printf@f,tblptrl
  6331  00006E  C0BA  FFF7         	movff	printf@f+1,tblptrh
  6332  000072                     	if	0	;tblptru may be non-zero
  6333  000072                     	endif
  6334  000072                     	if	0	;tblptru may be non-zero
  6335  000072                     	endif
  6336  000072  0008               	tblrd		*
  6337  000074  50F5               	movf	tablat,w,c
  6338  000076  ECAF  F022         	call	_isdigit
  6339  00007A  A0D8               	btfss	status,0,c
  6340  00007C  D03F               	goto	l6803
  6341                           
  6342                           ;doprnt.c: 598: width = 0;
  6343  00007E  0E00               	movlw	0
  6344  000080  0100               	movlb	0	; () banked
  6345  000082  6FE5               	movwf	(printf@width+1)& (0+255),b
  6346  000084  0E00               	movlw	0
  6347  000086  6FE4               	movwf	printf@width& (0+255),b
  6348  000088                     l6795:
  6349                           
  6350                           ;doprnt.c: 600: width *= 10;
  6351  000088  C0E4  F033         	movff	printf@width,___wmul@multiplier
  6352  00008C  C0E5  F034         	movff	printf@width+1,___wmul@multiplier+1
  6353  000090  0E00               	movlw	0
  6354  000092  6E36               	movwf	___wmul@multiplicand+1,c
  6355  000094  0E0A               	movlw	10
  6356  000096  6E35               	movwf	___wmul@multiplicand,c
  6357  000098  EC58  F022         	call	___wmul	;wreg free
  6358  00009C  C033  F0E4         	movff	?___wmul,printf@width
  6359  0000A0  C034  F0E5         	movff	?___wmul+1,printf@width+1
  6360                           
  6361                           ;doprnt.c: 601: width += *f++ - '0';
  6362  0000A4  0ED0               	movlw	208
  6363  0000A6  0100               	movlb	0	; () banked
  6364  0000A8  6FC7               	movwf	??_printf& (0+255),b
  6365  0000AA  0EFF               	movlw	255
  6366  0000AC  0100               	movlb	0	; () banked
  6367  0000AE  6FC8               	movwf	(??_printf+1)& (0+255),b
  6368  0000B0  C0B9  FFF6         	movff	printf@f,tblptrl
  6369  0000B4  C0BA  FFF7         	movff	printf@f+1,tblptrh
  6370  0000B8                     	if	0	;tblptru may be non-zero
  6371  0000B8                     	endif
  6372  0000B8                     	if	0	;tblptru may be non-zero
  6373  0000B8                     	endif
  6374  0000B8  0008               	tblrd		*
  6375  0000BA  50F5               	movf	tablat,w,c
  6376  0000BC  0100               	movlb	0	; () banked
  6377  0000BE  6FC9               	movwf	(??_printf+2)& (0+255),b
  6378  0000C0  6BCA               	clrf	(??_printf+3)& (0+255),b
  6379  0000C2  0100               	movlb	0	; () banked
  6380  0000C4  51C7               	movf	??_printf& (0+255),w,b
  6381  0000C6  0100               	movlb	0	; () banked
  6382  0000C8  27C9               	addwf	(??_printf+2)& (0+255),f,b
  6383  0000CA  0100               	movlb	0	; () banked
  6384  0000CC  51C8               	movf	(??_printf+1)& (0+255),w,b
  6385  0000CE  0100               	movlb	0	; () banked
  6386  0000D0  23CA               	addwfc	(??_printf+3)& (0+255),f,b
  6387  0000D2  0100               	movlb	0	; () banked
  6388  0000D4  51C9               	movf	(??_printf+2)& (0+255),w,b
  6389  0000D6  0100               	movlb	0	; () banked
  6390  0000D8  27E4               	addwf	printf@width& (0+255),f,b
  6391  0000DA  0100               	movlb	0	; () banked
  6392  0000DC  51CA               	movf	(??_printf+3)& (0+255),w,b
  6393  0000DE  0100               	movlb	0	; () banked
  6394  0000E0  23E5               	addwfc	(printf@width+1)& (0+255),f,b
  6395                           
  6396                           ; BSR set to: 0
  6397  0000E2  0100               	movlb	0	; () banked
  6398  0000E4  4BB9               	infsnz	printf@f& (0+255),f,b
  6399  0000E6  2BBA               	incf	(printf@f+1)& (0+255),f,b
  6400                           
  6401                           ; BSR set to: 0
  6402                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6403  0000E8  C0B9  FFF6         	movff	printf@f,tblptrl
  6404  0000EC  C0BA  FFF7         	movff	printf@f+1,tblptrh
  6405  0000F0                     	if	0	;tblptru may be non-zero
  6406  0000F0                     	endif
  6407  0000F0                     	if	0	;tblptru may be non-zero
  6408  0000F0                     	endif
  6409  0000F0  0008               	tblrd		*
  6410  0000F2  50F5               	movf	tablat,w,c
  6411  0000F4  ECAF  F022         	call	_isdigit
  6412  0000F8  B0D8               	btfsc	status,0,c
  6413  0000FA  D7C6               	goto	l6795
  6414  0000FC                     l6803:
  6415                           
  6416                           ;doprnt.c: 608: }
  6417                           ;doprnt.c: 611: if(*f == '.') {
  6418  0000FC  C0B9  FFF6         	movff	printf@f,tblptrl
  6419  000100  C0BA  FFF7         	movff	printf@f+1,tblptrh
  6420  000104                     	if	0	;tblptru may be non-zero
  6421  000104                     	endif
  6422  000104                     	if	0	;tblptru may be non-zero
  6423  000104                     	endif
  6424  000104  0008               	tblrd		*
  6425  000106  50F5               	movf	tablat,w,c
  6426  000108  0A2E               	xorlw	46
  6427  00010A  A4D8               	btfss	status,2,c
  6428  00010C  D034               	goto	l6815
  6429                           
  6430                           ;doprnt.c: 612: flag |= 0x4000;
  6431  00010E  0100               	movlb	0	; () banked
  6432  000110  8DE7               	bsf	(printf@flag+1)& (0+255),6,b
  6433                           
  6434                           ;doprnt.c: 613: f++;
  6435  000112  0100               	movlb	0	; () banked
  6436  000114  4BB9               	infsnz	printf@f& (0+255),f,b
  6437  000116  2BBA               	incf	(printf@f+1)& (0+255),f,b
  6438                           
  6439                           ; BSR set to: 0
  6440                           ;doprnt.c: 620: {
  6441                           ;doprnt.c: 621: prec = 0;
  6442  000118  0E00               	movlw	0
  6443  00011A  0100               	movlb	0	; () banked
  6444  00011C  6FE9               	movwf	(printf@prec+1)& (0+255),b
  6445  00011E  0E00               	movlw	0
  6446  000120  6FE8               	movwf	printf@prec& (0+255),b
  6447                           
  6448                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  6449  000122  D01E               	goto	l6813
  6450  000124                     l6809:
  6451                           
  6452                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  6453  000124  C0E8  F033         	movff	printf@prec,___wmul@multiplier
  6454  000128  C0E9  F034         	movff	printf@prec+1,___wmul@multiplier+1
  6455  00012C  0E00               	movlw	0
  6456  00012E  6E36               	movwf	___wmul@multiplicand+1,c
  6457  000130  0E0A               	movlw	10
  6458  000132  6E35               	movwf	___wmul@multiplicand,c
  6459  000134  EC58  F022         	call	___wmul	;wreg free
  6460  000138  C0B9  FFF6         	movff	printf@f,tblptrl
  6461  00013C  C0BA  FFF7         	movff	printf@f+1,tblptrh
  6462  000140                     	if	0	;tblptru may be non-zero
  6463  000140                     	endif
  6464  000140                     	if	0	;tblptru may be non-zero
  6465  000140                     	endif
  6466  000140  0008               	tblrd		*
  6467  000142  50F5               	movf	tablat,w,c
  6468  000144  2633               	addwf	?___wmul,f,c
  6469  000146  0E00               	movlw	0
  6470  000148  2234               	addwfc	?___wmul+1,f,c
  6471  00014A  0ED0               	movlw	208
  6472  00014C  2433               	addwf	?___wmul,w,c
  6473  00014E  0100               	movlb	0	; () banked
  6474  000150  6FE8               	movwf	printf@prec& (0+255),b
  6475  000152  0EFF               	movlw	255
  6476  000154  2034               	addwfc	?___wmul+1,w,c
  6477  000156  0100               	movlb	0	; () banked
  6478  000158  6FE9               	movwf	(printf@prec+1)& (0+255),b
  6479                           
  6480                           ; BSR set to: 0
  6481  00015A  0100               	movlb	0	; () banked
  6482  00015C  4BB9               	infsnz	printf@f& (0+255),f,b
  6483  00015E  2BBA               	incf	(printf@f+1)& (0+255),f,b
  6484  000160                     l6813:
  6485                           
  6486                           ; BSR set to: 0
  6487  000160  C0B9  FFF6         	movff	printf@f,tblptrl
  6488  000164  C0BA  FFF7         	movff	printf@f+1,tblptrh
  6489  000168                     	if	0	;tblptru may be non-zero
  6490  000168                     	endif
  6491  000168                     	if	0	;tblptru may be non-zero
  6492  000168                     	endif
  6493  000168  0008               	tblrd		*
  6494  00016A  50F5               	movf	tablat,w,c
  6495  00016C  ECAF  F022         	call	_isdigit
  6496  000170  A0D8               	btfss	status,0,c
  6497  000172  D07D               	goto	l6857
  6498  000174  D7D7               	goto	l6809
  6499  000176                     l6815:
  6500                           
  6501                           ;doprnt.c: 626: prec = 0;
  6502  000176  0E00               	movlw	0
  6503  000178  0100               	movlb	0	; () banked
  6504  00017A  6FE9               	movwf	(printf@prec+1)& (0+255),b
  6505  00017C  0E00               	movlw	0
  6506  00017E  6FE8               	movwf	printf@prec& (0+255),b
  6507                           
  6508                           ; BSR set to: 0
  6509                           ;doprnt.c: 628: flag |= 0x1000;
  6510  000180  0100               	movlb	0	; () banked
  6511  000182  89E7               	bsf	(printf@flag+1)& (0+255),4,b
  6512                           
  6513                           ; BSR set to: 0
  6514                           ;doprnt.c: 635: switch(c = *f++) {
  6515                           
  6516                           ;doprnt.c: 630: }
  6517                           ;doprnt.c: 633: loop:
  6518                           
  6519                           ; BSR set to: 0
  6520  000184  D074               	goto	l6857
  6521  000186                     l6819:
  6522                           
  6523                           ; BSR set to: 0
  6524                           ;doprnt.c: 643: flag |= 0x10;
  6525  000186  0100               	movlb	0	; () banked
  6526  000188  89E6               	bsf	printf@flag& (0+255),4,b
  6527                           
  6528                           ;doprnt.c: 644: goto loop;
  6529  00018A  D071               	goto	l6857
  6530  00018C                     l6821:
  6531                           
  6532                           ; BSR set to: 0
  6533                           ;doprnt.c: 663: flag |= 0x400;
  6534  00018C  0100               	movlb	0	; () banked
  6535  00018E  85E7               	bsf	(printf@flag+1)& (0+255),2,b
  6536                           
  6537                           ; BSR set to: 0
  6538                           ;doprnt.c: 698: case 'i':
  6539                           ;doprnt.c: 699: break;
  6540                           
  6541                           ; BSR set to: 0
  6542                           
  6543                           ;doprnt.c: 697: case 'd':
  6544                           
  6545                           ;doprnt.c: 664: break;
  6546  000190  D090               	goto	l6859
  6547  000192                     l6823:
  6548                           
  6549                           ; BSR set to: 0
  6550                           ;doprnt.c: 721: flag |= 0x80;
  6551  000192  0100               	movlb	0	; () banked
  6552  000194  8FE6               	bsf	printf@flag& (0+255),7,b
  6553                           
  6554                           ;doprnt.c: 723: break;
  6555  000196  D08D               	goto	l6859
  6556  000198                     l6825:
  6557                           
  6558                           ; BSR set to: 0
  6559                           ;doprnt.c: 753: if(prec && prec < len)
  6560  000198  0100               	movlb	0	; () banked
  6561  00019A  51E8               	movf	printf@prec& (0+255),w,b
  6562  00019C  0100               	movlb	0	; () banked
  6563  00019E  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  6564  0001A0  B4D8               	btfsc	status,2,c
  6565  0001A2  D00E               	goto	l6831
  6566                           
  6567                           ; BSR set to: 0
  6568  0001A4  0100               	movlb	0	; () banked
  6569  0001A6  51D3               	movf	printf@len& (0+255),w,b
  6570  0001A8  0100               	movlb	0	; () banked
  6571  0001AA  5DE8               	subwf	printf@prec& (0+255),w,b
  6572  0001AC  0100               	movlb	0	; () banked
  6573  0001AE  51D4               	movf	(printf@len+1)& (0+255),w,b
  6574  0001B0  0100               	movlb	0	; () banked
  6575  0001B2  59E9               	subwfb	(printf@prec+1)& (0+255),w,b
  6576  0001B4  B0D8               	btfsc	status,0,c
  6577  0001B6  D004               	goto	l6831
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;doprnt.c: 754: len = prec;
  6581  0001B8  C0E8  F0D3         	movff	printf@prec,printf@len
  6582  0001BC  C0E9  F0D4         	movff	printf@prec+1,printf@len+1
  6583  0001C0                     l6831:
  6584                           
  6585                           ; BSR set to: 0
  6586                           ;doprnt.c: 757: if(width > len)
  6587  0001C0  0100               	movlb	0	; () banked
  6588  0001C2  51E4               	movf	printf@width& (0+255),w,b
  6589  0001C4  0100               	movlb	0	; () banked
  6590  0001C6  5DD3               	subwf	printf@len& (0+255),w,b
  6591  0001C8  0100               	movlb	0	; () banked
  6592  0001CA  51E5               	movf	(printf@width+1)& (0+255),w,b
  6593  0001CC  0100               	movlb	0	; () banked
  6594  0001CE  59D4               	subwfb	(printf@len+1)& (0+255),w,b
  6595  0001D0  B0D8               	btfsc	status,0,c
  6596  0001D2  D009               	goto	l6835
  6597                           
  6598                           ; BSR set to: 0
  6599                           ;doprnt.c: 758: width -= len;
  6600  0001D4  0100               	movlb	0	; () banked
  6601  0001D6  51D3               	movf	printf@len& (0+255),w,b
  6602  0001D8  0100               	movlb	0	; () banked
  6603  0001DA  5FE4               	subwf	printf@width& (0+255),f,b
  6604  0001DC  0100               	movlb	0	; () banked
  6605  0001DE  51D4               	movf	(printf@len+1)& (0+255),w,b
  6606  0001E0  0100               	movlb	0	; () banked
  6607  0001E2  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  6608  0001E4  D009               	goto	l6839
  6609  0001E6                     l6835:
  6610                           
  6611                           ; BSR set to: 0
  6612                           ;doprnt.c: 759: else
  6613                           ;doprnt.c: 760: width = 0;
  6614  0001E6  0E00               	movlw	0
  6615  0001E8  0100               	movlb	0	; () banked
  6616  0001EA  6FE5               	movwf	(printf@width+1)& (0+255),b
  6617  0001EC  0E00               	movlw	0
  6618  0001EE  6FE4               	movwf	printf@width& (0+255),b
  6619                           
  6620                           ; BSR set to: 0
  6621                           ;doprnt.c: 764: while(width--)
  6622  0001F0  D003               	goto	l6839
  6623  0001F2                     l6837:
  6624                           
  6625                           ; BSR set to: 0
  6626                           ;doprnt.c: 765: (putch(' ') );
  6627  0001F2  0E20               	movlw	32
  6628  0001F4  EC7D  F022         	call	_putch
  6629  0001F8                     l6839:
  6630  0001F8  0100               	movlb	0	; () banked
  6631  0001FA  07E4               	decf	printf@width& (0+255),f,b
  6632  0001FC  A0D8               	btfss	status,0,c
  6633  0001FE  07E5               	decf	(printf@width+1)& (0+255),f,b
  6634  000200  0100               	movlb	0	; () banked
  6635  000202  29E4               	incf	printf@width& (0+255),w,b
  6636  000204  E1F6               	bnz	l6837
  6637  000206  0100               	movlb	0	; () banked
  6638  000208  29E5               	incf	(printf@width+1)& (0+255),w,b
  6639  00020A  B4D8               	btfsc	status,2,c
  6640  00020C  D00B               	goto	l6845
  6641  00020E  D7F1               	goto	l6837
  6642  000210                     l6841:
  6643                           
  6644                           ; BSR set to: 0
  6645                           ;doprnt.c: 768: (putch(*cp++) );
  6646  000210  C0D1  FFD9         	movff	printf@cp,fsr2l
  6647  000214  C0D2  FFDA         	movff	printf@cp+1,fsr2h
  6648  000218  50DF               	movf	indf2,w,c
  6649  00021A  EC7D  F022         	call	_putch
  6650  00021E  0100               	movlb	0	; () banked
  6651  000220  4BD1               	infsnz	printf@cp& (0+255),f,b
  6652  000222  2BD2               	incf	(printf@cp+1)& (0+255),f,b
  6653  000224                     l6845:
  6654                           
  6655                           ; BSR set to: 0
  6656  000224  0100               	movlb	0	; () banked
  6657  000226  07D3               	decf	printf@len& (0+255),f,b
  6658  000228  A0D8               	btfss	status,0,c
  6659  00022A  07D4               	decf	(printf@len+1)& (0+255),f,b
  6660  00022C  0100               	movlb	0	; () banked
  6661  00022E  29D3               	incf	printf@len& (0+255),w,b
  6662  000230  E1EF               	bnz	l6841
  6663  000232  0100               	movlb	0	; () banked
  6664  000234  29D4               	incf	(printf@len+1)& (0+255),w,b
  6665  000236  B4D8               	btfsc	status,2,c
  6666  000238  EFF5  F006         	goto	l7145
  6667  00023C  D7E9               	goto	l6841
  6668  00023E                     l6847:
  6669                           
  6670                           ; BSR set to: 0
  6671                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6672  00023E  C0D5  FFD9         	movff	printf@ap,fsr2l
  6673  000242  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  6674  000246  50DF               	movf	indf2,w,c
  6675  000248  0100               	movlb	0	; () banked
  6676  00024A  6FEA               	movwf	printf@c& (0+255),b
  6677                           
  6678                           ; BSR set to: 0
  6679  00024C  0E02               	movlw	2
  6680  00024E  0100               	movlb	0	; () banked
  6681  000250  27D5               	addwf	printf@ap& (0+255),f,b
  6682  000252  0E00               	movlw	0
  6683  000254  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  6684  000256                     l6851:
  6685                           
  6686                           ; BSR set to: 0
  6687                           ;doprnt.c: 805: cp = (char *)&c;
  6688  000256  0EEA               	movlw	low printf@c
  6689  000258  0100               	movlb	0	; () banked
  6690  00025A  6FD1               	movwf	printf@cp& (0+255),b
  6691  00025C  0E00               	movlw	high printf@c
  6692  00025E  0100               	movlb	0	; () banked
  6693  000260  6FD2               	movwf	(printf@cp+1)& (0+255),b
  6694                           
  6695                           ; BSR set to: 0
  6696                           ;doprnt.c: 806: len = 1;
  6697  000262  0E00               	movlw	0
  6698  000264  0100               	movlb	0	; () banked
  6699  000266  6FD4               	movwf	(printf@len+1)& (0+255),b
  6700  000268  0E01               	movlw	1
  6701  00026A  6FD3               	movwf	printf@len& (0+255),b
  6702                           
  6703                           ;doprnt.c: 807: goto dostring;
  6704  00026C  D795               	goto	l6825
  6705  00026E                     l6857:
  6706  00026E  C0B9  FFF6         	movff	printf@f,tblptrl
  6707  000272  C0BA  FFF7         	movff	printf@f+1,tblptrh
  6708  000276  0100               	movlb	0	; () banked
  6709  000278  4BB9               	infsnz	printf@f& (0+255),f,b
  6710  00027A  2BBA               	incf	(printf@f+1)& (0+255),f,b
  6711  00027C                     	if	0	;tblptru may be non-zero
  6712  00027C                     	endif
  6713  00027C                     	if	0	;tblptru may be non-zero
  6714  00027C                     	endif
  6715  00027C  0008               	tblrd		*
  6716  00027E  CFF5 F0EA          	movff	tablat,printf@c
  6717  000282  0100               	movlb	0	; () banked
  6718  000284  51EA               	movf	printf@c& (0+255),w,b
  6719                           
  6720                           ; Switch size 1, requested type "space"
  6721                           ; Number of cases is 7, Range of values is 0 to 120
  6722                           ; switch strategies available:
  6723                           ; Name         Instructions Cycles
  6724                           ; simple_byte           22    12 (average)
  6725                           ;	Chosen strategy is simple_byte
  6726  000286  0A00               	xorlw	0	; case 0
  6727  000288  B4D8               	btfsc	status,2,c
  6728  00028A  0012               	return	
  6729  00028C  0A63               	xorlw	99	; case 99
  6730  00028E  B4D8               	btfsc	status,2,c
  6731  000290  D7D6               	goto	l6847
  6732  000292  0A07               	xorlw	7	; case 100
  6733  000294  B4D8               	btfsc	status,2,c
  6734  000296  D00D               	goto	l6859
  6735  000298  0A02               	xorlw	2	; case 102
  6736  00029A  B4D8               	btfsc	status,2,c
  6737  00029C  D777               	goto	l6821
  6738  00029E  0A0F               	xorlw	15	; case 105
  6739  0002A0  B4D8               	btfsc	status,2,c
  6740  0002A2  D007               	goto	l6859
  6741  0002A4  0A05               	xorlw	5	; case 108
  6742  0002A6  B4D8               	btfsc	status,2,c
  6743  0002A8  D76E               	goto	l6819
  6744  0002AA  0A14               	xorlw	20	; case 120
  6745  0002AC  B4D8               	btfsc	status,2,c
  6746  0002AE  D771               	goto	l6823
  6747  0002B0  D7D2               	goto	l6851
  6748  0002B2                     l6859:
  6749                           
  6750                           ; BSR set to: 0
  6751                           ;doprnt.c: 825: if(flag & (0x700)) {
  6752  0002B2  0E07               	movlw	7
  6753  0002B4  0100               	movlb	0	; () banked
  6754  0002B6  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  6755  0002B8  B4D8               	btfsc	status,2,c
  6756  0002BA  D36D               	goto	l792
  6757                           
  6758                           ; BSR set to: 0
  6759                           ;doprnt.c: 827: if(flag & 0x1000)
  6760  0002BC  0100               	movlb	0	; () banked
  6761  0002BE  A9E7               	btfss	(printf@flag+1)& (0+255),4,b
  6762  0002C0  D005               	goto	l6865
  6763                           
  6764                           ; BSR set to: 0
  6765                           ;doprnt.c: 829: prec = 6;
  6766  0002C2  0E00               	movlw	0
  6767  0002C4  0100               	movlb	0	; () banked
  6768  0002C6  6FE9               	movwf	(printf@prec+1)& (0+255),b
  6769  0002C8  0E06               	movlw	6
  6770  0002CA  6FE8               	movwf	printf@prec& (0+255),b
  6771  0002CC                     l6865:
  6772                           
  6773                           ; BSR set to: 0
  6774                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  6775  0002CC  C0D5  FFD9         	movff	printf@ap,fsr2l
  6776  0002D0  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  6777  0002D4  CFDE F0DD          	movff	postinc2,printf@fval
  6778  0002D8  CFDE F0DE          	movff	postinc2,printf@fval+1
  6779  0002DC  CFDD F0DF          	movff	postdec2,printf@fval+2
  6780                           
  6781                           ; BSR set to: 0
  6782  0002E0  0E03               	movlw	3
  6783  0002E2  0100               	movlb	0	; () banked
  6784  0002E4  27D5               	addwf	printf@ap& (0+255),f,b
  6785  0002E6  0E00               	movlw	0
  6786  0002E8  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  6787                           
  6788                           ; BSR set to: 0
  6789                           ;doprnt.c: 831: if(fval < 0.0) {
  6790  0002EA  0100               	movlb	0	; () banked
  6791  0002EC  AFDF               	btfss	(printf@fval+2)& (0+255),7,b
  6792  0002EE  D011               	goto	l6875
  6793                           
  6794                           ; BSR set to: 0
  6795                           ;doprnt.c: 832: fval = -fval;
  6796  0002F0  C0DD  F025         	movff	printf@fval,___ftneg@f1
  6797  0002F4  C0DE  F026         	movff	printf@fval+1,___ftneg@f1+1
  6798  0002F8  C0DF  F027         	movff	printf@fval+2,___ftneg@f1+2
  6799  0002FC  EC6B  F022         	call	___ftneg	;wreg free
  6800  000300  C025  F0DD         	movff	?___ftneg,printf@fval
  6801  000304  C026  F0DE         	movff	?___ftneg+1,printf@fval+1
  6802  000308  C027  F0DF         	movff	?___ftneg+2,printf@fval+2
  6803                           
  6804                           ;doprnt.c: 833: flag |= 0x03;
  6805  00030C  0E03               	movlw	3
  6806  00030E  0100               	movlb	0	; () banked
  6807  000310  13E6               	iorwf	printf@flag& (0+255),f,b
  6808  000312                     l6875:
  6809                           
  6810                           ; BSR set to: 0
  6811                           ;doprnt.c: 834: }
  6812                           ;doprnt.c: 835: exp = 0;
  6813  000312  0E00               	movlw	0
  6814  000314  0100               	movlb	0	; () banked
  6815  000316  6FDC               	movwf	(printf@exp+1)& (0+255),b
  6816  000318  0E00               	movlw	0
  6817  00031A  6FDB               	movwf	printf@exp& (0+255),b
  6818                           
  6819                           ; BSR set to: 0
  6820                           ;doprnt.c: 836: if( fval!=0) {
  6821  00031C  0100               	movlb	0	; () banked
  6822  00031E  51DD               	movf	printf@fval& (0+255),w,b
  6823  000320  0100               	movlb	0	; () banked
  6824  000322  11DE               	iorwf	(printf@fval+1)& (0+255),w,b
  6825  000324  0100               	movlb	0	; () banked
  6826  000326  11DF               	iorwf	(printf@fval+2)& (0+255),w,b
  6827  000328  B4D8               	btfsc	status,2,c
  6828  00032A  D091               	goto	l6903
  6829                           
  6830                           ; BSR set to: 0
  6831                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6832  00032C  0E82               	movlw	130
  6833  00032E  0100               	movlb	0	; () banked
  6834  000330  6FC7               	movwf	??_printf& (0+255),b
  6835  000332  0EFF               	movlw	255
  6836  000334  0100               	movlb	0	; () banked
  6837  000336  6FC8               	movwf	(??_printf+1)& (0+255),b
  6838  000338  C0DD  F0C9         	movff	printf@fval,??_printf+2
  6839  00033C  C0DE  F0CA         	movff	printf@fval+1,??_printf+3
  6840  000340  C0DF  F0CB         	movff	printf@fval+2,??_printf+4
  6841  000344  C0E0  F0CC         	movff	printf@fval+3,??_printf+5
  6842  000348  0E10               	movlw	16
  6843  00034A  D006               	goto	u6980
  6844  00034C                     u6985:
  6845  00034C  0100               	movlb	0	; () banked
  6846  00034E  90D8               	bcf	status,0,c
  6847  000350  33CC               	rrcf	(??_printf+5)& (0+255),f,b
  6848  000352  33CB               	rrcf	(??_printf+4)& (0+255),f,b
  6849  000354  33CA               	rrcf	(??_printf+3)& (0+255),f,b
  6850  000356  33C9               	rrcf	(??_printf+2)& (0+255),f,b
  6851  000358                     u6980:
  6852  000358  2EE8               	decfsz	wreg,f,c
  6853  00035A  D7F8               	goto	u6985
  6854  00035C  0100               	movlb	0	; () banked
  6855  00035E  51C9               	movf	(??_printf+2)& (0+255),w,b
  6856  000360  0100               	movlb	0	; () banked
  6857  000362  25C7               	addwf	??_printf& (0+255),w,b
  6858  000364  0100               	movlb	0	; () banked
  6859  000366  6FDB               	movwf	printf@exp& (0+255),b
  6860  000368  0E00               	movlw	0
  6861  00036A  0100               	movlb	0	; () banked
  6862  00036C  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  6863  00036E  0100               	movlb	0	; () banked
  6864  000370  6FDC               	movwf	(printf@exp+1)& (0+255),b
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;doprnt.c: 838: exp--;
  6868  000372  0100               	movlb	0	; () banked
  6869  000374  07DB               	decf	printf@exp& (0+255),f,b
  6870  000376  A0D8               	btfss	status,0,c
  6871  000378  07DC               	decf	(printf@exp+1)& (0+255),f,b
  6872                           
  6873                           ; BSR set to: 0
  6874                           ;doprnt.c: 839: exp *= 3;
  6875  00037A  C0DB  F033         	movff	printf@exp,___wmul@multiplier
  6876  00037E  C0DC  F034         	movff	printf@exp+1,___wmul@multiplier+1
  6877  000382  0E00               	movlw	0
  6878  000384  6E36               	movwf	___wmul@multiplicand+1,c
  6879  000386  0E03               	movlw	3
  6880  000388  6E35               	movwf	___wmul@multiplicand,c
  6881  00038A  EC58  F022         	call	___wmul	;wreg free
  6882  00038E  C033  F0DB         	movff	?___wmul,printf@exp
  6883  000392  C034  F0DC         	movff	?___wmul+1,printf@exp+1
  6884                           
  6885                           ;doprnt.c: 840: exp /= 10;
  6886  000396  C0DB  F02B         	movff	printf@exp,___awdiv@dividend
  6887  00039A  C0DC  F02C         	movff	printf@exp+1,___awdiv@dividend+1
  6888  00039E  0E00               	movlw	0
  6889  0003A0  6E2E               	movwf	___awdiv@divisor+1,c
  6890  0003A2  0E0A               	movlw	10
  6891  0003A4  6E2D               	movwf	___awdiv@divisor,c
  6892  0003A6  EC65  F01E         	call	___awdiv	;wreg free
  6893  0003AA  C02B  F0DB         	movff	?___awdiv,printf@exp
  6894  0003AE  C02C  F0DC         	movff	?___awdiv+1,printf@exp+1
  6895                           
  6896                           ;doprnt.c: 841: if(exp < 0)
  6897  0003B2  0100               	movlb	0	; () banked
  6898  0003B4  AFDC               	btfss	(printf@exp+1)& (0+255),7,b
  6899  0003B6  D004               	goto	l6891
  6900                           
  6901                           ; BSR set to: 0
  6902                           ;doprnt.c: 842: exp--;
  6903  0003B8  0100               	movlb	0	; () banked
  6904  0003BA  07DB               	decf	printf@exp& (0+255),f,b
  6905  0003BC  A0D8               	btfss	status,0,c
  6906  0003BE  07DC               	decf	(printf@exp+1)& (0+255),f,b
  6907  0003C0                     l6891:
  6908                           
  6909                           ; BSR set to: 0
  6910                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  6911  0003C0  0100               	movlb	0	; () banked
  6912  0003C2  51DB               	movf	printf@exp& (0+255),w,b
  6913  0003C4  0800               	sublw	0
  6914  0003C6  ECC6  F00D         	call	_scale
  6915  0003CA  C08F  F0D7         	movff	?_scale,printf@tmpval
  6916  0003CE  C090  F0D8         	movff	?_scale+1,printf@tmpval+1
  6917  0003D2  C091  F0D9         	movff	?_scale+2,printf@tmpval+2
  6918                           
  6919                           ;doprnt.c: 847: tmpval.integ *= fval;
  6920  0003D6  C0D7  F080         	movff	printf@tmpval,___ftmul@f1
  6921  0003DA  C0D8  F081         	movff	printf@tmpval+1,___ftmul@f1+1
  6922  0003DE  C0D9  F082         	movff	printf@tmpval+2,___ftmul@f1+2
  6923  0003E2  C0DD  F083         	movff	printf@fval,___ftmul@f2
  6924  0003E6  C0DE  F084         	movff	printf@fval+1,___ftmul@f2+1
  6925  0003EA  C0DF  F085         	movff	printf@fval+2,___ftmul@f2+2
  6926  0003EE  EC65  F014         	call	___ftmul	;wreg free
  6927  0003F2  C080  F0D7         	movff	?___ftmul,printf@tmpval
  6928  0003F6  C081  F0D8         	movff	?___ftmul+1,printf@tmpval+1
  6929  0003FA  C082  F0D9         	movff	?___ftmul+2,printf@tmpval+2
  6930                           
  6931                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  6932  0003FE  C0D7  F031         	movff	printf@tmpval,___ftge@ff1
  6933  000402  C0D8  F032         	movff	printf@tmpval+1,___ftge@ff1+1
  6934  000406  C0D9  F033         	movff	printf@tmpval+2,___ftge@ff1+2
  6935  00040A  0E00               	movlw	0
  6936  00040C  6E34               	movwf	___ftge@ff2,c
  6937  00040E  0E80               	movlw	128
  6938  000410  6E35               	movwf	___ftge@ff2+1,c
  6939  000412  0E3F               	movlw	63
  6940  000414  6E36               	movwf	___ftge@ff2+2,c
  6941  000416  EC95  F01D         	call	___ftge	;wreg free
  6942  00041A  B0D8               	btfsc	status,0,c
  6943  00041C  D005               	goto	l6899
  6944                           
  6945                           ;doprnt.c: 849: exp--;
  6946  00041E  0100               	movlb	0	; () banked
  6947  000420  07DB               	decf	printf@exp& (0+255),f,b
  6948  000422  A0D8               	btfss	status,0,c
  6949  000424  07DC               	decf	(printf@exp+1)& (0+255),f,b
  6950  000426  D013               	goto	l6903
  6951  000428                     l6899:
  6952                           
  6953                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  6954  000428  C0D7  F031         	movff	printf@tmpval,___ftge@ff1
  6955  00042C  C0D8  F032         	movff	printf@tmpval+1,___ftge@ff1+1
  6956  000430  C0D9  F033         	movff	printf@tmpval+2,___ftge@ff1+2
  6957  000434  0E00               	movlw	0
  6958  000436  6E34               	movwf	___ftge@ff2,c
  6959  000438  0E20               	movlw	32
  6960  00043A  6E35               	movwf	___ftge@ff2+1,c
  6961  00043C  0E41               	movlw	65
  6962  00043E  6E36               	movwf	___ftge@ff2+2,c
  6963  000440  EC95  F01D         	call	___ftge	;wreg free
  6964  000444  A0D8               	btfss	status,0,c
  6965  000446  D003               	goto	l6903
  6966                           
  6967                           ;doprnt.c: 851: exp++;
  6968  000448  0100               	movlb	0	; () banked
  6969  00044A  4BDB               	infsnz	printf@exp& (0+255),f,b
  6970  00044C  2BDC               	incf	(printf@exp+1)& (0+255),f,b
  6971  00044E                     l6903:
  6972                           
  6973                           ;doprnt.c: 852: }
  6974                           ;doprnt.c: 1112: if(prec <= 12)
  6975  00044E  0100               	movlb	0	; () banked
  6976  000450  BFE9               	btfsc	(printf@prec+1)& (0+255),7,b
  6977  000452  D008               	goto	l6905
  6978  000454  0100               	movlb	0	; () banked
  6979  000456  51E9               	movf	(printf@prec+1)& (0+255),w,b
  6980  000458  E11D               	bnz	l6907
  6981  00045A  0E0D               	movlw	13
  6982  00045C  0100               	movlb	0	; () banked
  6983  00045E  5DE8               	subwf	printf@prec& (0+255),w,b
  6984  000460  B0D8               	btfsc	status,0,c
  6985  000462  D018               	goto	l6907
  6986  000464                     l6905:
  6987                           
  6988                           ; BSR set to: 0
  6989                           ;doprnt.c: 1113: fval += fround(prec);
  6990  000464  C0DD  F09E         	movff	printf@fval,___ftadd@f1
  6991  000468  C0DE  F09F         	movff	printf@fval+1,___ftadd@f1+1
  6992  00046C  C0DF  F0A0         	movff	printf@fval+2,___ftadd@f1+2
  6993  000470  0100               	movlb	0	; () banked
  6994  000472  51E8               	movf	printf@prec& (0+255),w,b
  6995  000474  EC05  F011         	call	_fround
  6996  000478  C08F  F0A1         	movff	?_fround,___ftadd@f2
  6997  00047C  C090  F0A2         	movff	?_fround+1,___ftadd@f2+1
  6998  000480  C091  F0A3         	movff	?_fround+2,___ftadd@f2+2
  6999  000484  ECD1  F00F         	call	___ftadd	;wreg free
  7000  000488  C09E  F0DD         	movff	?___ftadd,printf@fval
  7001  00048C  C09F  F0DE         	movff	?___ftadd+1,printf@fval+1
  7002  000490  C0A0  F0DF         	movff	?___ftadd+2,printf@fval+2
  7003  000494                     l6907:
  7004                           
  7005                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  7006  000494  0100               	movlb	0	; () banked
  7007  000496  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  7008  000498  D008               	goto	l6909
  7009  00049A  0100               	movlb	0	; () banked
  7010  00049C  51DC               	movf	(printf@exp+1)& (0+255),w,b
  7011  00049E  E12A               	bnz	l6915
  7012  0004A0  0E0A               	movlw	10
  7013  0004A2  0100               	movlb	0	; () banked
  7014  0004A4  5DDB               	subwf	printf@exp& (0+255),w,b
  7015  0004A6  B0D8               	btfsc	status,0,c
  7016  0004A8  D025               	goto	l6915
  7017  0004AA                     l6909:
  7018                           
  7019                           ; BSR set to: 0
  7020  0004AA  0100               	movlb	0	; () banked
  7021  0004AC  51DD               	movf	printf@fval& (0+255),w,b
  7022  0004AE  0100               	movlb	0	; () banked
  7023  0004B0  11DE               	iorwf	(printf@fval+1)& (0+255),w,b
  7024  0004B2  0100               	movlb	0	; () banked
  7025  0004B4  11DF               	iorwf	(printf@fval+2)& (0+255),w,b
  7026  0004B6  B4D8               	btfsc	status,2,c
  7027  0004B8  D05F               	goto	l6929
  7028                           
  7029                           ; BSR set to: 0
  7030  0004BA  C0DD  F0AA         	movff	printf@fval,___fttol@f1
  7031  0004BE  C0DE  F0AB         	movff	printf@fval+1,___fttol@f1+1
  7032  0004C2  C0DF  F0AC         	movff	printf@fval+2,___fttol@f1+2
  7033  0004C6  ECBA  F015         	call	___fttol	;wreg free
  7034  0004CA  0100               	movlb	0	; () banked
  7035  0004CC  51AA               	movf	?___fttol& (0+255),w,b
  7036  0004CE  0100               	movlb	0	; () banked
  7037  0004D0  11AB               	iorwf	(?___fttol+1)& (0+255),w,b
  7038  0004D2  0100               	movlb	0	; () banked
  7039  0004D4  11AC               	iorwf	(?___fttol+2)& (0+255),w,b
  7040  0004D6  0100               	movlb	0	; () banked
  7041  0004D8  11AD               	iorwf	(?___fttol+3)& (0+255),w,b
  7042  0004DA  A4D8               	btfss	status,2,c
  7043  0004DC  D04D               	goto	l6929
  7044                           
  7045                           ; BSR set to: 0
  7046  0004DE  0100               	movlb	0	; () banked
  7047  0004E0  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  7048  0004E2  D04A               	goto	l6929
  7049  0004E4  0100               	movlb	0	; () banked
  7050  0004E6  51DC               	movf	(printf@exp+1)& (0+255),w,b
  7051  0004E8  E105               	bnz	l6915
  7052  0004EA  0E02               	movlw	2
  7053  0004EC  0100               	movlb	0	; () banked
  7054  0004EE  5DDB               	subwf	printf@exp& (0+255),w,b
  7055  0004F0  A0D8               	btfss	status,0,c
  7056  0004F2  D042               	goto	l6929
  7057  0004F4                     l6915:
  7058                           
  7059                           ; BSR set to: 0
  7060                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  7061  0004F4  C0D7  F031         	movff	printf@tmpval,___ftge@ff1
  7062  0004F8  C0D8  F032         	movff	printf@tmpval+1,___ftge@ff1+1
  7063  0004FC  C0D9  F033         	movff	printf@tmpval+2,___ftge@ff1+2
  7064  000500  0E70               	movlw	112
  7065  000502  6E34               	movwf	___ftge@ff2,c
  7066  000504  0E89               	movlw	137
  7067  000506  6E35               	movwf	___ftge@ff2+1,c
  7068  000508  0E40               	movlw	64
  7069  00050A  6E36               	movwf	___ftge@ff2+2,c
  7070  00050C  EC95  F01D         	call	___ftge	;wreg free
  7071  000510  B0D8               	btfsc	status,0,c
  7072  000512  D003               	goto	l6919
  7073                           
  7074                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  7075  000514  0100               	movlb	0	; () banked
  7076  000516  0EF7               	movlw	247
  7077  000518  D002               	goto	L3
  7078  00051A                     l6919:
  7079                           
  7080                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  7081  00051A  0100               	movlb	0	; () banked
  7082  00051C  0EF8               	movlw	248
  7083  00051E                     L3:
  7084  00051E  27DB               	addwf	printf@exp& (0+255),f,b
  7085  000520  0EFF               	movlw	255
  7086  000522  23DC               	addwfc	(printf@exp+1)& (0+255),f,b
  7087                           
  7088                           ; BSR set to: 0
  7089                           ;doprnt.c: 1124: }
  7090                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  7091                           
  7092                           ; BSR set to: 0
  7093  000524  0100               	movlb	0	; () banked
  7094  000526  51DB               	movf	printf@exp& (0+255),w,b
  7095  000528  ECC6  F00D         	call	_scale
  7096  00052C  C08F  F0D7         	movff	?_scale,printf@tmpval
  7097  000530  C090  F0D8         	movff	?_scale+1,printf@tmpval+1
  7098  000534  C091  F0D9         	movff	?_scale+2,printf@tmpval+2
  7099                           
  7100                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  7101  000538  C0DD  F025         	movff	printf@fval,__tdiv_to_l_@f1
  7102  00053C  C0DE  F026         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  7103  000540  C0DF  F027         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  7104  000544  C0D7  F028         	movff	printf@tmpval,__tdiv_to_l_@f2
  7105  000548  C0D8  F029         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  7106  00054C  C0D9  F02A         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  7107  000550  EC5C  F016         	call	__tdiv_to_l_	;wreg free
  7108  000554  C025  F0E0         	movff	?__tdiv_to_l_,printf@val
  7109  000558  C026  F0E1         	movff	?__tdiv_to_l_+1,printf@val+1
  7110  00055C  C027  F0E2         	movff	?__tdiv_to_l_+2,printf@val+2
  7111  000560  C028  F0E3         	movff	?__tdiv_to_l_+3,printf@val+3
  7112                           
  7113                           ;doprnt.c: 1129: fval = 0.0;
  7114  000564  0E00               	movlw	0
  7115  000566  0100               	movlb	0	; () banked
  7116  000568  6FDD               	movwf	printf@fval& (0+255),b
  7117  00056A  0E00               	movlw	0
  7118  00056C  0100               	movlb	0	; () banked
  7119  00056E  6FDE               	movwf	(printf@fval+1)& (0+255),b
  7120  000570  0E00               	movlw	0
  7121  000572  0100               	movlb	0	; () banked
  7122  000574  6FDF               	movwf	(printf@fval+2)& (0+255),b
  7123                           
  7124                           ;doprnt.c: 1130: } else {
  7125  000576  D033               	goto	l6933
  7126  000578                     l6929:
  7127                           
  7128                           ; BSR set to: 0
  7129                           ;doprnt.c: 1131: val = (unsigned long)fval;
  7130  000578  C0DD  F0AA         	movff	printf@fval,___fttol@f1
  7131  00057C  C0DE  F0AB         	movff	printf@fval+1,___fttol@f1+1
  7132  000580  C0DF  F0AC         	movff	printf@fval+2,___fttol@f1+2
  7133  000584  ECBA  F015         	call	___fttol	;wreg free
  7134  000588  C0AA  F0E0         	movff	?___fttol,printf@val
  7135  00058C  C0AB  F0E1         	movff	?___fttol+1,printf@val+1
  7136  000590  C0AC  F0E2         	movff	?___fttol+2,printf@val+2
  7137  000594  C0AD  F0E3         	movff	?___fttol+3,printf@val+3
  7138                           
  7139                           ;doprnt.c: 1132: fval -= (double)val;
  7140  000598  C0DD  F0AA         	movff	printf@fval,___ftsub@f1
  7141  00059C  C0DE  F0AB         	movff	printf@fval+1,___ftsub@f1+1
  7142  0005A0  C0DF  F0AC         	movff	printf@fval+2,___ftsub@f1+2
  7143  0005A4  C0E0  F02D         	movff	printf@val,___lltoft@c
  7144  0005A8  C0E1  F02E         	movff	printf@val+1,___lltoft@c+1
  7145  0005AC  C0E2  F02F         	movff	printf@val+2,___lltoft@c+2
  7146  0005B0  C0E3  F030         	movff	printf@val+3,___lltoft@c+3
  7147  0005B4  EC5D  F020         	call	___lltoft	;wreg free
  7148  0005B8  C02D  F0AD         	movff	?___lltoft,___ftsub@f2
  7149  0005BC  C02E  F0AE         	movff	?___lltoft+1,___ftsub@f2+1
  7150  0005C0  C02F  F0AF         	movff	?___lltoft+2,___ftsub@f2+2
  7151  0005C4  EC08  F021         	call	___ftsub	;wreg free
  7152  0005C8  C0AA  F0DD         	movff	?___ftsub,printf@fval
  7153  0005CC  C0AB  F0DE         	movff	?___ftsub+1,printf@fval+1
  7154  0005D0  C0AC  F0DF         	movff	?___ftsub+2,printf@fval+2
  7155                           
  7156                           ;doprnt.c: 1133: exp = 0;
  7157  0005D4  0E00               	movlw	0
  7158  0005D6  0100               	movlb	0	; () banked
  7159  0005D8  6FDC               	movwf	(printf@exp+1)& (0+255),b
  7160  0005DA  0E00               	movlw	0
  7161  0005DC  6FDB               	movwf	printf@exp& (0+255),b
  7162  0005DE                     l6933:
  7163                           
  7164                           ; BSR set to: 0
  7165                           ;doprnt.c: 1134: }
  7166                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  7167  0005DE  0E01               	movlw	1
  7168  0005E0  0100               	movlb	0	; () banked
  7169  0005E2  6FEA               	movwf	printf@c& (0+255),b
  7170  0005E4                     l6935:
  7171                           
  7172                           ; BSR set to: 0
  7173  0005E4  0E0A               	movlw	10
  7174  0005E6  0100               	movlb	0	; () banked
  7175  0005E8  19EA               	xorwf	printf@c& (0+255),w,b
  7176  0005EA  B4D8               	btfsc	status,2,c
  7177  0005EC  D01E               	goto	l6947
  7178                           
  7179                           ; BSR set to: 0
  7180                           ;doprnt.c: 1137: if(val < dpowers[c])
  7181                           
  7182                           ; BSR set to: 0
  7183                           
  7184                           ; BSR set to: 0
  7185  0005EE  0100               	movlb	0	; () banked
  7186  0005F0  51EA               	movf	printf@c& (0+255),w,b
  7187  0005F2  0D04               	mullw	4
  7188  0005F4  0E8B               	movlw	low _dpowers
  7189  0005F6  24F3               	addwf	prodl,w,c
  7190  0005F8  6EF6               	movwf	tblptrl,c
  7191  0005FA  0EFD               	movlw	high _dpowers
  7192  0005FC  20F4               	addwfc	prodh,w,c
  7193  0005FE  6EF7               	movwf	tblptrh,c
  7194  000600                     	if	0	;There are less than 3 active tblptr bytes
  7195  000600                     	endif
  7196  000600  0009               	tblrd		*+
  7197  000602  50F5               	movf	tablat,w,c
  7198  000604  0100               	movlb	0	; () banked
  7199  000606  5DE0               	subwf	printf@val& (0+255),w,b
  7200  000608  0009               	tblrd		*+
  7201  00060A  50F5               	movf	tablat,w,c
  7202  00060C  0100               	movlb	0	; () banked
  7203  00060E  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  7204  000610  0009               	tblrd		*+
  7205  000612  50F5               	movf	tablat,w,c
  7206  000614  0100               	movlb	0	; () banked
  7207  000616  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  7208  000618  0009               	tblrd		*+
  7209  00061A  50F5               	movf	tablat,w,c
  7210  00061C  0100               	movlb	0	; () banked
  7211  00061E  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  7212  000620  A0D8               	btfss	status,0,c
  7213  000622  D003               	goto	l6947
  7214                           
  7215                           ; BSR set to: 0
  7216                           
  7217                           ; BSR set to: 0
  7218                           
  7219                           ; BSR set to: 0
  7220                           ;doprnt.c: 1138: break;
  7221  000624  0100               	movlb	0	; () banked
  7222  000626  2BEA               	incf	printf@c& (0+255),f,b
  7223  000628  D7DD               	goto	l6935
  7224  00062A                     l6947:
  7225                           
  7226                           ; BSR set to: 0
  7227                           ;doprnt.c: 1142: width -= prec + c + exp;
  7228  00062A  C0EA  F0C7         	movff	printf@c,??_printf
  7229  00062E  0100               	movlb	0	; () banked
  7230  000630  6BC8               	clrf	(??_printf+1)& (0+255),b
  7231  000632  BFC7               	btfsc	??_printf& (0+255),7,b
  7232  000634  07C8               	decf	(??_printf+1)& (0+255),f,b
  7233  000636  0100               	movlb	0	; () banked
  7234  000638  51E8               	movf	printf@prec& (0+255),w,b
  7235  00063A  0100               	movlb	0	; () banked
  7236  00063C  27C7               	addwf	??_printf& (0+255),f,b
  7237  00063E  0100               	movlb	0	; () banked
  7238  000640  51E9               	movf	(printf@prec+1)& (0+255),w,b
  7239  000642  0100               	movlb	0	; () banked
  7240  000644  23C8               	addwfc	(??_printf+1)& (0+255),f,b
  7241  000646  0100               	movlb	0	; () banked
  7242  000648  51DB               	movf	printf@exp& (0+255),w,b
  7243  00064A  0100               	movlb	0	; () banked
  7244  00064C  27C7               	addwf	??_printf& (0+255),f,b
  7245  00064E  0100               	movlb	0	; () banked
  7246  000650  51DC               	movf	(printf@exp+1)& (0+255),w,b
  7247  000652  0100               	movlb	0	; () banked
  7248  000654  23C8               	addwfc	(??_printf+1)& (0+255),f,b
  7249  000656  0100               	movlb	0	; () banked
  7250  000658  51C7               	movf	??_printf& (0+255),w,b
  7251  00065A  0100               	movlb	0	; () banked
  7252  00065C  5FE4               	subwf	printf@width& (0+255),f,b
  7253  00065E  0100               	movlb	0	; () banked
  7254  000660  51C8               	movf	(??_printf+1)& (0+255),w,b
  7255  000662  0100               	movlb	0	; () banked
  7256  000664  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  7257                           
  7258                           ;doprnt.c: 1143: if(
  7259                           ;doprnt.c: 1147: prec)
  7260  000666  0100               	movlb	0	; () banked
  7261  000668  51E8               	movf	printf@prec& (0+255),w,b
  7262  00066A  0100               	movlb	0	; () banked
  7263  00066C  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  7264  00066E  B4D8               	btfsc	status,2,c
  7265  000670  D004               	goto	l6951
  7266                           
  7267                           ; BSR set to: 0
  7268                           ;doprnt.c: 1148: width--;
  7269  000672  0100               	movlb	0	; () banked
  7270  000674  07E4               	decf	printf@width& (0+255),f,b
  7271  000676  A0D8               	btfss	status,0,c
  7272  000678  07E5               	decf	(printf@width+1)& (0+255),f,b
  7273  00067A                     l6951:
  7274                           
  7275                           ; BSR set to: 0
  7276                           ;doprnt.c: 1149: if(flag & 0x03)
  7277  00067A  0E03               	movlw	3
  7278  00067C  0100               	movlb	0	; () banked
  7279  00067E  15E6               	andwf	printf@flag& (0+255),w,b
  7280  000680  0100               	movlb	0	; () banked
  7281  000682  6FC7               	movwf	??_printf& (0+255),b
  7282  000684  0E00               	movlw	0
  7283  000686  0100               	movlb	0	; () banked
  7284  000688  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  7285  00068A  0100               	movlb	0	; () banked
  7286  00068C  6FC8               	movwf	(??_printf+1)& (0+255),b
  7287  00068E  0100               	movlb	0	; () banked
  7288  000690  51C7               	movf	??_printf& (0+255),w,b
  7289  000692  0100               	movlb	0	; () banked
  7290  000694  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  7291  000696  B4D8               	btfsc	status,2,c
  7292  000698  D004               	goto	l6955
  7293                           
  7294                           ; BSR set to: 0
  7295                           ;doprnt.c: 1150: width--;
  7296  00069A  0100               	movlb	0	; () banked
  7297  00069C  07E4               	decf	printf@width& (0+255),f,b
  7298  00069E  A0D8               	btfss	status,0,c
  7299  0006A0  07E5               	decf	(printf@width+1)& (0+255),f,b
  7300  0006A2                     l6955:
  7301                           
  7302                           ; BSR set to: 0
  7303                           ;doprnt.c: 1153: if(flag & 0x04) {
  7304  0006A2  0100               	movlb	0	; () banked
  7305  0006A4  A5E6               	btfss	printf@flag& (0+255),2,b
  7306  0006A6  D02D               	goto	l6971
  7307                           
  7308                           ; BSR set to: 0
  7309                           ;doprnt.c: 1157: if(flag & 0x03)
  7310  0006A8  0E03               	movlw	3
  7311  0006AA  0100               	movlb	0	; () banked
  7312  0006AC  15E6               	andwf	printf@flag& (0+255),w,b
  7313  0006AE  0100               	movlb	0	; () banked
  7314  0006B0  6FC7               	movwf	??_printf& (0+255),b
  7315  0006B2  0E00               	movlw	0
  7316  0006B4  0100               	movlb	0	; () banked
  7317  0006B6  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  7318  0006B8  0100               	movlb	0	; () banked
  7319  0006BA  6FC8               	movwf	(??_printf+1)& (0+255),b
  7320  0006BC  0100               	movlb	0	; () banked
  7321  0006BE  51C7               	movf	??_printf& (0+255),w,b
  7322  0006C0  0100               	movlb	0	; () banked
  7323  0006C2  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  7324  0006C4  B4D8               	btfsc	status,2,c
  7325  0006C6  D00B               	goto	l6965
  7326                           
  7327                           ; BSR set to: 0
  7328                           ;doprnt.c: 1159: (putch('-') );
  7329  0006C8  0E2D               	movlw	45
  7330  0006CA  EC7D  F022         	call	_putch
  7331                           
  7332                           ;doprnt.c: 1168: while(width > 0) {
  7333  0006CE  D007               	goto	l6965
  7334  0006D0                     l6961:
  7335                           
  7336                           ;doprnt.c: 1169: (putch('0') );
  7337  0006D0  0E30               	movlw	48
  7338  0006D2  EC7D  F022         	call	_putch
  7339                           
  7340                           ;doprnt.c: 1170: width--;
  7341  0006D6  0100               	movlb	0	; () banked
  7342  0006D8  07E4               	decf	printf@width& (0+255),f,b
  7343  0006DA  A0D8               	btfss	status,0,c
  7344  0006DC  07E5               	decf	(printf@width+1)& (0+255),f,b
  7345  0006DE                     l6965:
  7346  0006DE  0100               	movlb	0	; () banked
  7347  0006E0  BFE5               	btfsc	(printf@width+1)& (0+255),7,b
  7348  0006E2  D073               	goto	l6983
  7349  0006E4  0100               	movlb	0	; () banked
  7350  0006E6  51E5               	movf	(printf@width+1)& (0+255),w,b
  7351  0006E8  E1F3               	bnz	l6961
  7352  0006EA  0100               	movlb	0	; () banked
  7353  0006EC  05E4               	decf	printf@width& (0+255),w,b
  7354  0006EE  A0D8               	btfss	status,0,c
  7355  0006F0  D06C               	goto	l6983
  7356  0006F2  D7EE               	goto	l6961
  7357  0006F4                     l6967:
  7358                           
  7359                           ; BSR set to: 0
  7360                           ;doprnt.c: 1181: (putch(' ') );
  7361  0006F4  0E20               	movlw	32
  7362  0006F6  EC7D  F022         	call	_putch
  7363                           
  7364                           ;doprnt.c: 1182: width--;
  7365  0006FA  0100               	movlb	0	; () banked
  7366  0006FC  07E4               	decf	printf@width& (0+255),f,b
  7367  0006FE  A0D8               	btfss	status,0,c
  7368  000700  07E5               	decf	(printf@width+1)& (0+255),f,b
  7369  000702                     l6971:
  7370                           
  7371                           ; BSR set to: 0
  7372  000702  0100               	movlb	0	; () banked
  7373  000704  BFE5               	btfsc	(printf@width+1)& (0+255),7,b
  7374  000706  D007               	goto	l6973
  7375  000708  0100               	movlb	0	; () banked
  7376  00070A  51E5               	movf	(printf@width+1)& (0+255),w,b
  7377  00070C  E1F3               	bnz	l6967
  7378  00070E  0100               	movlb	0	; () banked
  7379  000710  05E4               	decf	printf@width& (0+255),w,b
  7380  000712  B0D8               	btfsc	status,0,c
  7381  000714  D7EF               	goto	l6967
  7382  000716                     l6973:
  7383                           
  7384                           ; BSR set to: 0
  7385                           ;doprnt.c: 1183: }
  7386                           ;doprnt.c: 1188: if(flag & 0x03)
  7387  000716  0E03               	movlw	3
  7388  000718  0100               	movlb	0	; () banked
  7389  00071A  15E6               	andwf	printf@flag& (0+255),w,b
  7390  00071C  0100               	movlb	0	; () banked
  7391  00071E  6FC7               	movwf	??_printf& (0+255),b
  7392  000720  0E00               	movlw	0
  7393  000722  0100               	movlb	0	; () banked
  7394  000724  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  7395  000726  0100               	movlb	0	; () banked
  7396  000728  6FC8               	movwf	(??_printf+1)& (0+255),b
  7397  00072A  0100               	movlb	0	; () banked
  7398  00072C  51C7               	movf	??_printf& (0+255),w,b
  7399  00072E  0100               	movlb	0	; () banked
  7400  000730  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  7401  000732  B4D8               	btfsc	status,2,c
  7402  000734  D04A               	goto	l6983
  7403                           
  7404                           ; BSR set to: 0
  7405                           ;doprnt.c: 1190: (putch('-') );
  7406  000736  0E2D               	movlw	45
  7407  000738  EC7D  F022         	call	_putch
  7408                           
  7409                           ;doprnt.c: 1195: }
  7410                           ;doprnt.c: 1196: while(c--) {
  7411  00073C  D046               	goto	l6983
  7412  00073E                     l6977:
  7413                           
  7414                           ;doprnt.c: 1200: {
  7415                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  7416  00073E  C0E0  F025         	movff	printf@val,___lldiv@dividend
  7417  000742  C0E1  F026         	movff	printf@val+1,___lldiv@dividend+1
  7418  000746  C0E2  F027         	movff	printf@val+2,___lldiv@dividend+2
  7419  00074A  C0E3  F028         	movff	printf@val+3,___lldiv@dividend+3
  7420  00074E  0100               	movlb	0	; () banked
  7421  000750  51EA               	movf	printf@c& (0+255),w,b
  7422  000752  0D04               	mullw	4
  7423  000754  0E8B               	movlw	low _dpowers
  7424  000756  24F3               	addwf	prodl,w,c
  7425  000758  6EF6               	movwf	tblptrl,c
  7426  00075A  0EFD               	movlw	high _dpowers
  7427  00075C  20F4               	addwfc	prodh,w,c
  7428  00075E  6EF7               	movwf	tblptrh,c
  7429  000760                     	if	0	;There are less than 3 active tblptr bytes
  7430  000760                     	endif
  7431  000760  0009               	tblrd		*+
  7432  000762  CFF5 F029          	movff	tablat,___lldiv@divisor
  7433  000766  0009               	tblrd		*+
  7434  000768  CFF5 F02A          	movff	tablat,___lldiv@divisor+1
  7435  00076C  0009               	tblrd		*+
  7436  00076E  CFF5 F02B          	movff	tablat,___lldiv@divisor+2
  7437  000772  000A               	tblrd		*-
  7438  000774  CFF5 F02C          	movff	tablat,___lldiv@divisor+3
  7439  000778  ECA7  F01E         	call	___lldiv	;wreg free
  7440  00077C  C025  F0D7         	movff	?___lldiv,printf@tmpval
  7441  000780  C026  F0D8         	movff	?___lldiv+1,printf@tmpval+1
  7442  000784  C027  F0D9         	movff	?___lldiv+2,printf@tmpval+2
  7443  000788  C028  F0DA         	movff	?___lldiv+3,printf@tmpval+3
  7444                           
  7445                           ;doprnt.c: 1202: tmpval.vd %= 10;
  7446  00078C  C0D7  F032         	movff	printf@tmpval,___llmod@dividend
  7447  000790  C0D8  F033         	movff	printf@tmpval+1,___llmod@dividend+1
  7448  000794  C0D9  F034         	movff	printf@tmpval+2,___llmod@dividend+2
  7449  000798  C0DA  F035         	movff	printf@tmpval+3,___llmod@dividend+3
  7450  00079C  0E0A               	movlw	10
  7451  00079E  6E36               	movwf	___llmod@divisor,c
  7452  0007A0  0E00               	movlw	0
  7453  0007A2  6E37               	movwf	___llmod@divisor+1,c
  7454  0007A4  0E00               	movlw	0
  7455  0007A6  6E38               	movwf	___llmod@divisor+2,c
  7456  0007A8  0E00               	movlw	0
  7457  0007AA  6E39               	movwf	___llmod@divisor+3,c
  7458  0007AC  EC94  F01F         	call	___llmod	;wreg free
  7459  0007B0  C032  F0D7         	movff	?___llmod,printf@tmpval
  7460  0007B4  C033  F0D8         	movff	?___llmod+1,printf@tmpval+1
  7461  0007B8  C034  F0D9         	movff	?___llmod+2,printf@tmpval+2
  7462  0007BC  C035  F0DA         	movff	?___llmod+3,printf@tmpval+3
  7463                           
  7464                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  7465  0007C0  0100               	movlb	0	; () banked
  7466  0007C2  51D7               	movf	printf@tmpval& (0+255),w,b
  7467  0007C4  0F30               	addlw	48
  7468  0007C6  EC7D  F022         	call	_putch
  7469  0007CA                     l6983:
  7470  0007CA  0100               	movlb	0	; () banked
  7471  0007CC  07EA               	decf	printf@c& (0+255),f,b
  7472  0007CE  0100               	movlb	0	; () banked
  7473  0007D0  29EA               	incf	printf@c& (0+255),w,b
  7474  0007D2  B4D8               	btfsc	status,2,c
  7475  0007D4  D008               	goto	l6989
  7476  0007D6  D7B3               	goto	l6977
  7477  0007D8                     l6985:
  7478                           
  7479                           ; BSR set to: 0
  7480                           ;doprnt.c: 1208: (putch('0') );
  7481  0007D8  0E30               	movlw	48
  7482  0007DA  EC7D  F022         	call	_putch
  7483                           
  7484                           ;doprnt.c: 1209: exp--;
  7485  0007DE  0100               	movlb	0	; () banked
  7486  0007E0  07DB               	decf	printf@exp& (0+255),f,b
  7487  0007E2  A0D8               	btfss	status,0,c
  7488  0007E4  07DC               	decf	(printf@exp+1)& (0+255),f,b
  7489  0007E6                     l6989:
  7490                           
  7491                           ; BSR set to: 0
  7492  0007E6  0100               	movlb	0	; () banked
  7493  0007E8  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  7494  0007EA  D007               	goto	l6991
  7495  0007EC  0100               	movlb	0	; () banked
  7496  0007EE  51DC               	movf	(printf@exp+1)& (0+255),w,b
  7497  0007F0  E1F3               	bnz	l6985
  7498  0007F2  0100               	movlb	0	; () banked
  7499  0007F4  05DB               	decf	printf@exp& (0+255),w,b
  7500  0007F6  B0D8               	btfsc	status,0,c
  7501  0007F8  D7EF               	goto	l6985
  7502  0007FA                     l6991:
  7503                           
  7504                           ; BSR set to: 0
  7505                           ;doprnt.c: 1210: }
  7506                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  7507  0007FA  0100               	movlb	0	; () banked
  7508  0007FC  BFE9               	btfsc	(printf@prec+1)& (0+255),7,b
  7509  0007FE  D00C               	goto	l832
  7510  000800  0100               	movlb	0	; () banked
  7511  000802  51E9               	movf	(printf@prec+1)& (0+255),w,b
  7512  000804  E105               	bnz	u7200
  7513  000806  0E09               	movlw	9
  7514  000808  0100               	movlb	0	; () banked
  7515  00080A  5DE8               	subwf	printf@prec& (0+255),w,b
  7516  00080C  A0D8               	btfss	status,0,c
  7517  00080E  D004               	goto	l832
  7518  000810                     u7200:
  7519                           
  7520                           ; BSR set to: 0
  7521                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  7522  000810  0E08               	movlw	8
  7523  000812  0100               	movlb	0	; () banked
  7524  000814  6FEA               	movwf	printf@c& (0+255),b
  7525  000816  D002               	goto	l6995
  7526  000818                     l832:
  7527                           
  7528                           ; BSR set to: 0
  7529                           ;doprnt.c: 1213: else
  7530                           ;doprnt.c: 1214: c = prec;
  7531  000818  C0E8  F0EA         	movff	printf@prec,printf@c
  7532  00081C                     l6995:
  7533                           
  7534                           ; BSR set to: 0
  7535                           ;doprnt.c: 1215: prec -= c;
  7536  00081C  0100               	movlb	0	; () banked
  7537  00081E  51EA               	movf	printf@c& (0+255),w,b
  7538  000820  0100               	movlb	0	; () banked
  7539  000822  5FE8               	subwf	printf@prec& (0+255),f,b
  7540  000824  0E00               	movlw	0
  7541  000826  0100               	movlb	0	; () banked
  7542  000828  BFEA               	btfsc	printf@c& (0+255),7,b
  7543  00082A  0EFF               	movlw	255
  7544  00082C  0100               	movlb	0	; () banked
  7545  00082E  5BE9               	subwfb	(printf@prec+1)& (0+255),f,b
  7546                           
  7547                           ; BSR set to: 0
  7548                           ;doprnt.c: 1219: if(c)
  7549  000830  0100               	movlb	0	; () banked
  7550  000832  51EA               	movf	printf@c& (0+255),w,b
  7551  000834  0100               	movlb	0	; () banked
  7552  000836  B4D8               	btfsc	status,2,c
  7553  000838  D003               	goto	l7001
  7554                           
  7555                           ; BSR set to: 0
  7556                           ;doprnt.c: 1221: (putch('.') );
  7557  00083A  0E2E               	movlw	46
  7558  00083C  EC7D  F022         	call	_putch
  7559  000840                     l7001:
  7560                           
  7561                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7562  000840  0100               	movlb	0	; () banked
  7563  000842  51EA               	movf	printf@c& (0+255),w,b
  7564  000844  ECC6  F00D         	call	_scale
  7565  000848  C08F  F0CD         	movff	?_scale,_printf$1424
  7566  00084C  C090  F0CE         	movff	?_scale+1,_printf$1424+1
  7567  000850  C091  F0CF         	movff	?_scale+2,_printf$1424+2
  7568                           
  7569                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7570  000854  C0DD  F083         	movff	printf@fval,___ftmul@f2
  7571  000858  C0DE  F084         	movff	printf@fval+1,___ftmul@f2+1
  7572  00085C  C0DF  F085         	movff	printf@fval+2,___ftmul@f2+2
  7573  000860  C0CD  F080         	movff	_printf$1424,___ftmul@f1
  7574  000864  C0CE  F081         	movff	_printf$1424+1,___ftmul@f1+1
  7575  000868  C0CF  F082         	movff	_printf$1424+2,___ftmul@f1+2
  7576  00086C  EC65  F014         	call	___ftmul	;wreg free
  7577  000870  C080  F0AA         	movff	?___ftmul,___fttol@f1
  7578  000874  C081  F0AB         	movff	?___ftmul+1,___fttol@f1+1
  7579  000878  C082  F0AC         	movff	?___ftmul+2,___fttol@f1+2
  7580  00087C  ECBA  F015         	call	___fttol	;wreg free
  7581  000880  C0AA  F0E0         	movff	?___fttol,printf@val
  7582  000884  C0AB  F0E1         	movff	?___fttol+1,printf@val+1
  7583  000888  C0AC  F0E2         	movff	?___fttol+2,printf@val+2
  7584  00088C  C0AD  F0E3         	movff	?___fttol+3,printf@val+3
  7585                           
  7586                           ;doprnt.c: 1228: while(c--) {
  7587  000890  D06D               	goto	l7011
  7588  000892                     l7005:
  7589                           
  7590                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  7591  000892  C0E0  F025         	movff	printf@val,___lldiv@dividend
  7592  000896  C0E1  F026         	movff	printf@val+1,___lldiv@dividend+1
  7593  00089A  C0E2  F027         	movff	printf@val+2,___lldiv@dividend+2
  7594  00089E  C0E3  F028         	movff	printf@val+3,___lldiv@dividend+3
  7595  0008A2  0100               	movlb	0	; () banked
  7596  0008A4  51EA               	movf	printf@c& (0+255),w,b
  7597  0008A6  0D04               	mullw	4
  7598  0008A8  0E8B               	movlw	low _dpowers
  7599  0008AA  24F3               	addwf	prodl,w,c
  7600  0008AC  6EF6               	movwf	tblptrl,c
  7601  0008AE  0EFD               	movlw	high _dpowers
  7602  0008B0  20F4               	addwfc	prodh,w,c
  7603  0008B2  6EF7               	movwf	tblptrh,c
  7604  0008B4                     	if	0	;There are less than 3 active tblptr bytes
  7605  0008B4                     	endif
  7606  0008B4  0009               	tblrd		*+
  7607  0008B6  CFF5 F029          	movff	tablat,___lldiv@divisor
  7608  0008BA  0009               	tblrd		*+
  7609  0008BC  CFF5 F02A          	movff	tablat,___lldiv@divisor+1
  7610  0008C0  0009               	tblrd		*+
  7611  0008C2  CFF5 F02B          	movff	tablat,___lldiv@divisor+2
  7612  0008C6  000A               	tblrd		*-
  7613  0008C8  CFF5 F02C          	movff	tablat,___lldiv@divisor+3
  7614  0008CC  ECA7  F01E         	call	___lldiv	;wreg free
  7615  0008D0  C025  F0D7         	movff	?___lldiv,printf@tmpval
  7616  0008D4  C026  F0D8         	movff	?___lldiv+1,printf@tmpval+1
  7617  0008D8  C027  F0D9         	movff	?___lldiv+2,printf@tmpval+2
  7618  0008DC  C028  F0DA         	movff	?___lldiv+3,printf@tmpval+3
  7619                           
  7620                           ;doprnt.c: 1230: tmpval.vd %= 10;
  7621  0008E0  C0D7  F032         	movff	printf@tmpval,___llmod@dividend
  7622  0008E4  C0D8  F033         	movff	printf@tmpval+1,___llmod@dividend+1
  7623  0008E8  C0D9  F034         	movff	printf@tmpval+2,___llmod@dividend+2
  7624  0008EC  C0DA  F035         	movff	printf@tmpval+3,___llmod@dividend+3
  7625  0008F0  0E0A               	movlw	10
  7626  0008F2  6E36               	movwf	___llmod@divisor,c
  7627  0008F4  0E00               	movlw	0
  7628  0008F6  6E37               	movwf	___llmod@divisor+1,c
  7629  0008F8  0E00               	movlw	0
  7630  0008FA  6E38               	movwf	___llmod@divisor+2,c
  7631  0008FC  0E00               	movlw	0
  7632  0008FE  6E39               	movwf	___llmod@divisor+3,c
  7633  000900  EC94  F01F         	call	___llmod	;wreg free
  7634  000904  C032  F0D7         	movff	?___llmod,printf@tmpval
  7635  000908  C033  F0D8         	movff	?___llmod+1,printf@tmpval+1
  7636  00090C  C034  F0D9         	movff	?___llmod+2,printf@tmpval+2
  7637  000910  C035  F0DA         	movff	?___llmod+3,printf@tmpval+3
  7638                           
  7639                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  7640  000914  0100               	movlb	0	; () banked
  7641  000916  51D7               	movf	printf@tmpval& (0+255),w,b
  7642  000918  0F30               	addlw	48
  7643  00091A  EC7D  F022         	call	_putch
  7644                           
  7645                           ;doprnt.c: 1232: val %= dpowers[c];
  7646  00091E  C0E0  F032         	movff	printf@val,___llmod@dividend
  7647  000922  C0E1  F033         	movff	printf@val+1,___llmod@dividend+1
  7648  000926  C0E2  F034         	movff	printf@val+2,___llmod@dividend+2
  7649  00092A  C0E3  F035         	movff	printf@val+3,___llmod@dividend+3
  7650  00092E  0100               	movlb	0	; () banked
  7651  000930  51EA               	movf	printf@c& (0+255),w,b
  7652  000932  0D04               	mullw	4
  7653  000934  0E8B               	movlw	low _dpowers
  7654  000936  24F3               	addwf	prodl,w,c
  7655  000938  6EF6               	movwf	tblptrl,c
  7656  00093A  0EFD               	movlw	high _dpowers
  7657  00093C  20F4               	addwfc	prodh,w,c
  7658  00093E  6EF7               	movwf	tblptrh,c
  7659  000940                     	if	0	;There are less than 3 active tblptr bytes
  7660  000940                     	endif
  7661  000940  0009               	tblrd		*+
  7662  000942  CFF5 F036          	movff	tablat,___llmod@divisor
  7663  000946  0009               	tblrd		*+
  7664  000948  CFF5 F037          	movff	tablat,___llmod@divisor+1
  7665  00094C  0009               	tblrd		*+
  7666  00094E  CFF5 F038          	movff	tablat,___llmod@divisor+2
  7667  000952  000A               	tblrd		*-
  7668  000954  CFF5 F039          	movff	tablat,___llmod@divisor+3
  7669  000958  EC94  F01F         	call	___llmod	;wreg free
  7670  00095C  C032  F0E0         	movff	?___llmod,printf@val
  7671  000960  C033  F0E1         	movff	?___llmod+1,printf@val+1
  7672  000964  C034  F0E2         	movff	?___llmod+2,printf@val+2
  7673  000968  C035  F0E3         	movff	?___llmod+3,printf@val+3
  7674  00096C                     l7011:
  7675  00096C  0100               	movlb	0	; () banked
  7676  00096E  07EA               	decf	printf@c& (0+255),f,b
  7677  000970  0100               	movlb	0	; () banked
  7678  000972  29EA               	incf	printf@c& (0+255),w,b
  7679  000974  B4D8               	btfsc	status,2,c
  7680  000976  D008               	goto	l7017
  7681  000978  D78C               	goto	l7005
  7682  00097A                     l7013:
  7683                           
  7684                           ; BSR set to: 0
  7685                           ;doprnt.c: 1236: (putch('0') );
  7686  00097A  0E30               	movlw	48
  7687  00097C  EC7D  F022         	call	_putch
  7688                           
  7689                           ;doprnt.c: 1237: prec--;
  7690  000980  0100               	movlb	0	; () banked
  7691  000982  07E8               	decf	printf@prec& (0+255),f,b
  7692  000984  A0D8               	btfss	status,0,c
  7693  000986  07E9               	decf	(printf@prec+1)& (0+255),f,b
  7694  000988                     l7017:
  7695                           
  7696                           ; BSR set to: 0
  7697  000988  0100               	movlb	0	; () banked
  7698  00098A  51E8               	movf	printf@prec& (0+255),w,b
  7699  00098C  0100               	movlb	0	; () banked
  7700  00098E  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  7701  000990  B4D8               	btfsc	status,2,c
  7702  000992  D22B               	goto	l7145
  7703  000994  D7F2               	goto	l7013
  7704  000996                     l792:
  7705                           
  7706                           ; BSR set to: 0
  7707                           ;doprnt.c: 1246: }
  7708                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7709  000996  0100               	movlb	0	; () banked
  7710  000998  BFE6               	btfsc	printf@flag& (0+255),7,b
  7711  00099A  D034               	goto	l841
  7712                           
  7713                           ; BSR set to: 0
  7714                           ;doprnt.c: 1253: {
  7715                           ;doprnt.c: 1255: if(flag & 0x10)
  7716  00099C  0100               	movlb	0	; () banked
  7717  00099E  A9E6               	btfss	printf@flag& (0+255),4,b
  7718  0009A0  D00E               	goto	l7025
  7719                           
  7720                           ; BSR set to: 0
  7721                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  7722  0009A2  C0D5  FFD9         	movff	printf@ap,fsr2l
  7723  0009A6  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  7724  0009AA  CFDE F0E0          	movff	postinc2,printf@val
  7725  0009AE  CFDE F0E1          	movff	postinc2,printf@val+1
  7726  0009B2  CFDE F0E2          	movff	postinc2,printf@val+2
  7727  0009B6  CFDE F0E3          	movff	postinc2,printf@val+3
  7728                           
  7729                           ; BSR set to: 0
  7730  0009BA  0E04               	movlw	4
  7731  0009BC  D00F               	goto	L4
  7732  0009BE                     l7025:
  7733                           
  7734                           ; BSR set to: 0
  7735                           ;doprnt.c: 1257: else
  7736                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  7737  0009BE  C0D5  FFD9         	movff	printf@ap,fsr2l
  7738  0009C2  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  7739  0009C6  CFDE F0E0          	movff	postinc2,printf@val
  7740  0009CA  CFDD F0E1          	movff	postdec2,printf@val+1
  7741  0009CE  0100               	movlb	0	; () banked
  7742  0009D0  0E00               	movlw	0
  7743  0009D2  BFE1               	btfsc	(printf@val+1)& (0+255),7,b
  7744  0009D4  0EFF               	movlw	-1
  7745  0009D6  6FE2               	movwf	(printf@val+2)& (0+255),b
  7746  0009D8  6FE3               	movwf	(printf@val+3)& (0+255),b
  7747                           
  7748                           ; BSR set to: 0
  7749  0009DA  0E02               	movlw	2
  7750  0009DC                     L4:
  7751  0009DC  0100               	movlb	0	; () banked
  7752  0009DE  27D5               	addwf	printf@ap& (0+255),f,b
  7753  0009E0  0E00               	movlw	0
  7754  0009E2  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  7755                           
  7756                           ; BSR set to: 0
  7757                           ;doprnt.c: 1261: if((long)val < 0) {
  7758                           
  7759                           ; BSR set to: 0
  7760  0009E4  0100               	movlb	0	; () banked
  7761  0009E6  AFE3               	btfss	(printf@val+3)& (0+255),7,b
  7762  0009E8  D032               	goto	l7043
  7763                           
  7764                           ; BSR set to: 0
  7765                           ;doprnt.c: 1262: flag |= 0x03;
  7766  0009EA  0E03               	movlw	3
  7767  0009EC  0100               	movlb	0	; () banked
  7768  0009EE  13E6               	iorwf	printf@flag& (0+255),f,b
  7769                           
  7770                           ; BSR set to: 0
  7771                           ;doprnt.c: 1263: val = -val;
  7772  0009F0  0100               	movlb	0	; () banked
  7773  0009F2  1FE3               	comf	(printf@val+3)& (0+255),f,b
  7774  0009F4  1FE2               	comf	(printf@val+2)& (0+255),f,b
  7775  0009F6  1FE1               	comf	(printf@val+1)& (0+255),f,b
  7776  0009F8  6DE0               	negf	printf@val& (0+255),b
  7777  0009FA  0E00               	movlw	0
  7778  0009FC  23E1               	addwfc	(printf@val+1)& (0+255),f,b
  7779  0009FE  23E2               	addwfc	(printf@val+2)& (0+255),f,b
  7780  000A00  23E3               	addwfc	(printf@val+3)& (0+255),f,b
  7781                           
  7782                           ; BSR set to: 0
  7783                           ;doprnt.c: 1264: }
  7784                           ;doprnt.c: 1266: }
  7785  000A02  D025               	goto	l7043
  7786  000A04                     l841:
  7787                           
  7788                           ; BSR set to: 0
  7789                           ;doprnt.c: 1268: else
  7790                           ;doprnt.c: 1273: {
  7791                           ;doprnt.c: 1281: if(flag & 0x10)
  7792  000A04  0100               	movlb	0	; () banked
  7793  000A06  A9E6               	btfss	printf@flag& (0+255),4,b
  7794  000A08  D00E               	goto	l7039
  7795                           
  7796                           ; BSR set to: 0
  7797                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  7798  000A0A  C0D5  FFD9         	movff	printf@ap,fsr2l
  7799  000A0E  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  7800  000A12  CFDE F0E0          	movff	postinc2,printf@val
  7801  000A16  CFDE F0E1          	movff	postinc2,printf@val+1
  7802  000A1A  CFDE F0E2          	movff	postinc2,printf@val+2
  7803  000A1E  CFDE F0E3          	movff	postinc2,printf@val+3
  7804                           
  7805                           ; BSR set to: 0
  7806  000A22  0E04               	movlw	4
  7807  000A24  D010               	goto	L5
  7808  000A26                     l7039:
  7809                           
  7810                           ; BSR set to: 0
  7811                           ;doprnt.c: 1283: else
  7812                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7813  000A26  C0D5  FFD9         	movff	printf@ap,fsr2l
  7814  000A2A  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  7815  000A2E  CFDE F0C7          	movff	postinc2,??_printf
  7816  000A32  CFDD F0C8          	movff	postdec2,??_printf+1
  7817  000A36  C0C7  F0E0         	movff	??_printf,printf@val
  7818  000A3A  C0C8  F0E1         	movff	??_printf+1,printf@val+1
  7819  000A3E  0100               	movlb	0	; () banked
  7820  000A40  6BE2               	clrf	(printf@val+2)& (0+255),b
  7821  000A42  6BE3               	clrf	(printf@val+3)& (0+255),b
  7822                           
  7823                           ; BSR set to: 0
  7824  000A44  0E02               	movlw	2
  7825  000A46                     L5:
  7826  000A46  0100               	movlb	0	; () banked
  7827  000A48  27D5               	addwf	printf@ap& (0+255),f,b
  7828  000A4A  0E00               	movlw	0
  7829  000A4C  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  7830  000A4E                     l7043:
  7831                           
  7832                           ; BSR set to: 0
  7833                           ;doprnt.c: 1287: }
  7834                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7835  000A4E  0100               	movlb	0	; () banked
  7836  000A50  51E8               	movf	printf@prec& (0+255),w,b
  7837  000A52  0100               	movlb	0	; () banked
  7838  000A54  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  7839  000A56  A4D8               	btfss	status,2,c
  7840  000A58  D05A               	goto	l7079
  7841                           
  7842                           ; BSR set to: 0
  7843  000A5A  0100               	movlb	0	; () banked
  7844  000A5C  51E0               	movf	printf@val& (0+255),w,b
  7845  000A5E  0100               	movlb	0	; () banked
  7846  000A60  11E1               	iorwf	(printf@val+1)& (0+255),w,b
  7847  000A62  0100               	movlb	0	; () banked
  7848  000A64  11E2               	iorwf	(printf@val+2)& (0+255),w,b
  7849  000A66  0100               	movlb	0	; () banked
  7850  000A68  11E3               	iorwf	(printf@val+3)& (0+255),w,b
  7851  000A6A  A4D8               	btfss	status,2,c
  7852  000A6C  D050               	goto	l7079
  7853                           
  7854                           ; BSR set to: 0
  7855                           ;doprnt.c: 1291: prec++;
  7856  000A6E  0100               	movlb	0	; () banked
  7857  000A70  4BE8               	infsnz	printf@prec& (0+255),f,b
  7858  000A72  2BE9               	incf	(printf@prec+1)& (0+255),f,b
  7859                           
  7860                           ; BSR set to: 0
  7861                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7862  000A74  D04C               	goto	l7079
  7863  000A76                     l7049:
  7864                           
  7865                           ; BSR set to: 0
  7866                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7867  000A76  0E01               	movlw	1
  7868  000A78  0100               	movlb	0	; () banked
  7869  000A7A  6FEA               	movwf	printf@c& (0+255),b
  7870  000A7C                     l7051:
  7871                           
  7872                           ; BSR set to: 0
  7873  000A7C  0E0A               	movlw	10
  7874  000A7E  0100               	movlb	0	; () banked
  7875  000A80  19EA               	xorwf	printf@c& (0+255),w,b
  7876  000A82  B4D8               	btfsc	status,2,c
  7877  000A84  D04D               	goto	l7081
  7878                           
  7879                           ; BSR set to: 0
  7880                           ;doprnt.c: 1306: if(val < dpowers[c])
  7881                           
  7882                           ; BSR set to: 0
  7883                           
  7884                           ; BSR set to: 0
  7885  000A86  0100               	movlb	0	; () banked
  7886  000A88  51EA               	movf	printf@c& (0+255),w,b
  7887  000A8A  0D04               	mullw	4
  7888  000A8C  0E8B               	movlw	low _dpowers
  7889  000A8E  24F3               	addwf	prodl,w,c
  7890  000A90  6EF6               	movwf	tblptrl,c
  7891  000A92  0EFD               	movlw	high _dpowers
  7892  000A94  20F4               	addwfc	prodh,w,c
  7893  000A96  6EF7               	movwf	tblptrh,c
  7894  000A98                     	if	0	;There are less than 3 active tblptr bytes
  7895  000A98                     	endif
  7896  000A98  0009               	tblrd		*+
  7897  000A9A  50F5               	movf	tablat,w,c
  7898  000A9C  0100               	movlb	0	; () banked
  7899  000A9E  5DE0               	subwf	printf@val& (0+255),w,b
  7900  000AA0  0009               	tblrd		*+
  7901  000AA2  50F5               	movf	tablat,w,c
  7902  000AA4  0100               	movlb	0	; () banked
  7903  000AA6  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  7904  000AA8  0009               	tblrd		*+
  7905  000AAA  50F5               	movf	tablat,w,c
  7906  000AAC  0100               	movlb	0	; () banked
  7907  000AAE  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  7908  000AB0  0009               	tblrd		*+
  7909  000AB2  50F5               	movf	tablat,w,c
  7910  000AB4  0100               	movlb	0	; () banked
  7911  000AB6  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  7912  000AB8  A0D8               	btfss	status,0,c
  7913  000ABA  D032               	goto	l7081
  7914                           
  7915                           ; BSR set to: 0
  7916                           
  7917                           ; BSR set to: 0
  7918                           
  7919                           ; BSR set to: 0
  7920                           ;doprnt.c: 1307: break;
  7921  000ABC  0100               	movlb	0	; () banked
  7922  000ABE  2BEA               	incf	printf@c& (0+255),f,b
  7923  000AC0  D7DD               	goto	l7051
  7924  000AC2                     l7063:
  7925                           
  7926                           ; BSR set to: 0
  7927                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7928  000AC2  0E01               	movlw	1
  7929  000AC4  0100               	movlb	0	; () banked
  7930  000AC6  6FEA               	movwf	printf@c& (0+255),b
  7931  000AC8                     l7065:
  7932                           
  7933                           ; BSR set to: 0
  7934  000AC8  0E08               	movlw	8
  7935  000ACA  0100               	movlb	0	; () banked
  7936  000ACC  19EA               	xorwf	printf@c& (0+255),w,b
  7937  000ACE  B4D8               	btfsc	status,2,c
  7938  000AD0  D027               	goto	l7081
  7939                           
  7940                           ; BSR set to: 0
  7941                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7942                           
  7943                           ; BSR set to: 0
  7944                           
  7945                           ; BSR set to: 0
  7946  000AD2  0100               	movlb	0	; () banked
  7947  000AD4  51EA               	movf	printf@c& (0+255),w,b
  7948  000AD6  0D04               	mullw	4
  7949  000AD8  0E01               	movlw	low _hexpowers
  7950  000ADA  24F3               	addwf	prodl,w,c
  7951  000ADC  6EF6               	movwf	tblptrl,c
  7952  000ADE  0EFE               	movlw	high _hexpowers
  7953  000AE0  20F4               	addwfc	prodh,w,c
  7954  000AE2  6EF7               	movwf	tblptrh,c
  7955  000AE4                     	if	0	;There are less than 3 active tblptr bytes
  7956  000AE4                     	endif
  7957  000AE4  0009               	tblrd		*+
  7958  000AE6  50F5               	movf	tablat,w,c
  7959  000AE8  0100               	movlb	0	; () banked
  7960  000AEA  5DE0               	subwf	printf@val& (0+255),w,b
  7961  000AEC  0009               	tblrd		*+
  7962  000AEE  50F5               	movf	tablat,w,c
  7963  000AF0  0100               	movlb	0	; () banked
  7964  000AF2  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  7965  000AF4  0009               	tblrd		*+
  7966  000AF6  50F5               	movf	tablat,w,c
  7967  000AF8  0100               	movlb	0	; () banked
  7968  000AFA  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  7969  000AFC  0009               	tblrd		*+
  7970  000AFE  50F5               	movf	tablat,w,c
  7971  000B00  0100               	movlb	0	; () banked
  7972  000B02  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  7973  000B04  A0D8               	btfss	status,0,c
  7974  000B06  D00C               	goto	l7081
  7975                           
  7976                           ; BSR set to: 0
  7977                           
  7978                           ; BSR set to: 0
  7979                           
  7980                           ; BSR set to: 0
  7981                           ;doprnt.c: 1318: break;
  7982  000B08  0100               	movlb	0	; () banked
  7983  000B0A  2BEA               	incf	printf@c& (0+255),f,b
  7984  000B0C  D7DD               	goto	l7065
  7985  000B0E                     l7079:
  7986                           
  7987                           ; BSR set to: 0
  7988  000B0E  0100               	movlb	0	; () banked
  7989  000B10  51E6               	movf	printf@flag& (0+255),w,b
  7990  000B12  0B80               	andlw	128
  7991                           
  7992                           ; Switch size 1, requested type "space"
  7993                           ; Number of cases is 2, Range of values is 0 to 128
  7994                           ; switch strategies available:
  7995                           ; Name         Instructions Cycles
  7996                           ; simple_byte            7     4 (average)
  7997                           ;	Chosen strategy is simple_byte
  7998  000B14  0A00               	xorlw	0	; case 0
  7999  000B16  B4D8               	btfsc	status,2,c
  8000  000B18  D7AE               	goto	l7049
  8001  000B1A  0A80               	xorlw	128	; case 128
  8002  000B1C  B4D8               	btfsc	status,2,c
  8003  000B1E  D7D1               	goto	l7063
  8004  000B20                     l7081:
  8005                           
  8006                           ; BSR set to: 0
  8007                           ;doprnt.c: 1339: if(c < prec)
  8008  000B20  0E80               	movlw	128
  8009  000B22  0100               	movlb	0	; () banked
  8010  000B24  BFEA               	btfsc	printf@c& (0+255),7,b
  8011  000B26  0E7F               	movlw	127
  8012  000B28  0100               	movlb	0	; () banked
  8013  000B2A  6FC7               	movwf	??_printf& (0+255),b
  8014  000B2C  0100               	movlb	0	; () banked
  8015  000B2E  51E8               	movf	printf@prec& (0+255),w,b
  8016  000B30  0100               	movlb	0	; () banked
  8017  000B32  5DEA               	subwf	printf@c& (0+255),w,b
  8018  000B34  0100               	movlb	0	; () banked
  8019  000B36  51E9               	movf	(printf@prec+1)& (0+255),w,b
  8020  000B38  0A80               	xorlw	128
  8021  000B3A  0100               	movlb	0	; () banked
  8022  000B3C  59C7               	subwfb	??_printf& (0+255),w,b
  8023  000B3E  B0D8               	btfsc	status,0,c
  8024  000B40  D003               	goto	l7085
  8025                           
  8026                           ; BSR set to: 0
  8027                           ;doprnt.c: 1340: c = prec;
  8028  000B42  C0E8  F0EA         	movff	printf@prec,printf@c
  8029  000B46  D018               	goto	l7089
  8030  000B48                     l7085:
  8031                           
  8032                           ; BSR set to: 0
  8033                           ;doprnt.c: 1341: else if(prec < c)
  8034  000B48  0100               	movlb	0	; () banked
  8035  000B4A  51E9               	movf	(printf@prec+1)& (0+255),w,b
  8036  000B4C  0A80               	xorlw	128
  8037  000B4E  0100               	movlb	0	; () banked
  8038  000B50  6FC7               	movwf	??_printf& (0+255),b
  8039  000B52  0100               	movlb	0	; () banked
  8040  000B54  51EA               	movf	printf@c& (0+255),w,b
  8041  000B56  0100               	movlb	0	; () banked
  8042  000B58  5DE8               	subwf	printf@prec& (0+255),w,b
  8043  000B5A  0E80               	movlw	128
  8044  000B5C  0100               	movlb	0	; () banked
  8045  000B5E  BFEA               	btfsc	printf@c& (0+255),7,b
  8046  000B60  0E7F               	movlw	127
  8047  000B62  0100               	movlb	0	; () banked
  8048  000B64  59C7               	subwfb	??_printf& (0+255),w,b
  8049  000B66  B0D8               	btfsc	status,0,c
  8050  000B68  D007               	goto	l7089
  8051                           
  8052                           ; BSR set to: 0
  8053                           ;doprnt.c: 1342: prec = c;
  8054  000B6A  0100               	movlb	0	; () banked
  8055  000B6C  51EA               	movf	printf@c& (0+255),w,b
  8056  000B6E  0100               	movlb	0	; () banked
  8057  000B70  6FE8               	movwf	printf@prec& (0+255),b
  8058  000B72  6BE9               	clrf	(printf@prec+1)& (0+255),b
  8059  000B74  BFE8               	btfsc	printf@prec& (0+255),7,b
  8060  000B76  07E9               	decf	(printf@prec+1)& (0+255),f,b
  8061  000B78                     l7089:
  8062                           
  8063                           ; BSR set to: 0
  8064                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8065  000B78  0100               	movlb	0	; () banked
  8066  000B7A  51E4               	movf	printf@width& (0+255),w,b
  8067  000B7C  0100               	movlb	0	; () banked
  8068  000B7E  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  8069  000B80  B4D8               	btfsc	status,2,c
  8070  000B82  D014               	goto	l7095
  8071                           
  8072                           ; BSR set to: 0
  8073  000B84  0E03               	movlw	3
  8074  000B86  0100               	movlb	0	; () banked
  8075  000B88  15E6               	andwf	printf@flag& (0+255),w,b
  8076  000B8A  0100               	movlb	0	; () banked
  8077  000B8C  6FC7               	movwf	??_printf& (0+255),b
  8078  000B8E  0E00               	movlw	0
  8079  000B90  0100               	movlb	0	; () banked
  8080  000B92  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  8081  000B94  0100               	movlb	0	; () banked
  8082  000B96  6FC8               	movwf	(??_printf+1)& (0+255),b
  8083  000B98  0100               	movlb	0	; () banked
  8084  000B9A  51C7               	movf	??_printf& (0+255),w,b
  8085  000B9C  0100               	movlb	0	; () banked
  8086  000B9E  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  8087  000BA0  B4D8               	btfsc	status,2,c
  8088  000BA2  D004               	goto	l7095
  8089                           
  8090                           ; BSR set to: 0
  8091                           ;doprnt.c: 1346: width--;
  8092  000BA4  0100               	movlb	0	; () banked
  8093  000BA6  07E4               	decf	printf@width& (0+255),f,b
  8094  000BA8  A0D8               	btfss	status,0,c
  8095  000BAA  07E5               	decf	(printf@width+1)& (0+255),f,b
  8096  000BAC                     l7095:
  8097                           
  8098                           ; BSR set to: 0
  8099                           ;doprnt.c: 1348: if(flag & 0x4000) {
  8100  000BAC  0100               	movlb	0	; () banked
  8101  000BAE  ADE7               	btfss	(printf@flag+1)& (0+255),6,b
  8102  000BB0  D01E               	goto	l7103
  8103                           
  8104                           ; BSR set to: 0
  8105                           ;doprnt.c: 1349: if(width > prec)
  8106  000BB2  0100               	movlb	0	; () banked
  8107  000BB4  51E4               	movf	printf@width& (0+255),w,b
  8108  000BB6  0100               	movlb	0	; () banked
  8109  000BB8  5DE8               	subwf	printf@prec& (0+255),w,b
  8110  000BBA  0100               	movlb	0	; () banked
  8111  000BBC  51E9               	movf	(printf@prec+1)& (0+255),w,b
  8112  000BBE  0A80               	xorlw	128
  8113  000BC0  0100               	movlb	0	; () banked
  8114  000BC2  6FC7               	movwf	??_printf& (0+255),b
  8115  000BC4  0100               	movlb	0	; () banked
  8116  000BC6  51E5               	movf	(printf@width+1)& (0+255),w,b
  8117  000BC8  0A80               	xorlw	128
  8118  000BCA  0100               	movlb	0	; () banked
  8119  000BCC  59C7               	subwfb	??_printf& (0+255),w,b
  8120  000BCE  B0D8               	btfsc	status,0,c
  8121  000BD0  D009               	goto	l7101
  8122                           
  8123                           ; BSR set to: 0
  8124                           ;doprnt.c: 1350: width -= prec;
  8125  000BD2  0100               	movlb	0	; () banked
  8126  000BD4  51E8               	movf	printf@prec& (0+255),w,b
  8127  000BD6  0100               	movlb	0	; () banked
  8128  000BD8  5FE4               	subwf	printf@width& (0+255),f,b
  8129  000BDA  0100               	movlb	0	; () banked
  8130  000BDC  51E9               	movf	(printf@prec+1)& (0+255),w,b
  8131  000BDE  0100               	movlb	0	; () banked
  8132  000BE0  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  8133  000BE2  D005               	goto	l7103
  8134  000BE4                     l7101:
  8135                           
  8136                           ; BSR set to: 0
  8137                           ;doprnt.c: 1351: else
  8138                           ;doprnt.c: 1352: width = 0;
  8139  000BE4  0E00               	movlw	0
  8140  000BE6  0100               	movlb	0	; () banked
  8141  000BE8  6FE5               	movwf	(printf@width+1)& (0+255),b
  8142  000BEA  0E00               	movlw	0
  8143  000BEC  6FE4               	movwf	printf@width& (0+255),b
  8144  000BEE                     l7103:
  8145                           
  8146                           ; BSR set to: 0
  8147                           ;doprnt.c: 1353: }
  8148                           ;doprnt.c: 1381: if(width > c)
  8149  000BEE  0E80               	movlw	128
  8150  000BF0  0100               	movlb	0	; () banked
  8151  000BF2  BFEA               	btfsc	printf@c& (0+255),7,b
  8152  000BF4  0E7F               	movlw	127
  8153  000BF6  0100               	movlb	0	; () banked
  8154  000BF8  6FC7               	movwf	??_printf& (0+255),b
  8155  000BFA  0100               	movlb	0	; () banked
  8156  000BFC  51E4               	movf	printf@width& (0+255),w,b
  8157  000BFE  0100               	movlb	0	; () banked
  8158  000C00  5DEA               	subwf	printf@c& (0+255),w,b
  8159  000C02  0100               	movlb	0	; () banked
  8160  000C04  51E5               	movf	(printf@width+1)& (0+255),w,b
  8161  000C06  0A80               	xorlw	128
  8162  000C08  0100               	movlb	0	; () banked
  8163  000C0A  59C7               	subwfb	??_printf& (0+255),w,b
  8164  000C0C  B0D8               	btfsc	status,0,c
  8165  000C0E  D00B               	goto	l7107
  8166                           
  8167                           ; BSR set to: 0
  8168                           ;doprnt.c: 1382: width -= c;
  8169  000C10  0100               	movlb	0	; () banked
  8170  000C12  51EA               	movf	printf@c& (0+255),w,b
  8171  000C14  0100               	movlb	0	; () banked
  8172  000C16  5FE4               	subwf	printf@width& (0+255),f,b
  8173  000C18  0E00               	movlw	0
  8174  000C1A  0100               	movlb	0	; () banked
  8175  000C1C  BFEA               	btfsc	printf@c& (0+255),7,b
  8176  000C1E  0EFF               	movlw	255
  8177  000C20  0100               	movlb	0	; () banked
  8178  000C22  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  8179  000C24  D005               	goto	l7109
  8180  000C26                     l7107:
  8181                           
  8182                           ; BSR set to: 0
  8183                           ;doprnt.c: 1383: else
  8184                           ;doprnt.c: 1384: width = 0;
  8185  000C26  0E00               	movlw	0
  8186  000C28  0100               	movlb	0	; () banked
  8187  000C2A  6FE5               	movwf	(printf@width+1)& (0+255),b
  8188  000C2C  0E00               	movlw	0
  8189  000C2E  6FE4               	movwf	printf@width& (0+255),b
  8190  000C30                     l7109:
  8191                           
  8192                           ; BSR set to: 0
  8193                           ;doprnt.c: 1387: if(flag & 0x04) {
  8194  000C30  0100               	movlb	0	; () banked
  8195  000C32  A5E6               	btfss	printf@flag& (0+255),2,b
  8196  000C34  D021               	goto	l7121
  8197                           
  8198                           ; BSR set to: 0
  8199                           ;doprnt.c: 1392: if(flag & 0x03)
  8200  000C36  0E03               	movlw	3
  8201  000C38  0100               	movlb	0	; () banked
  8202  000C3A  15E6               	andwf	printf@flag& (0+255),w,b
  8203  000C3C  0100               	movlb	0	; () banked
  8204  000C3E  6FC7               	movwf	??_printf& (0+255),b
  8205  000C40  0E00               	movlw	0
  8206  000C42  0100               	movlb	0	; () banked
  8207  000C44  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  8208  000C46  0100               	movlb	0	; () banked
  8209  000C48  6FC8               	movwf	(??_printf+1)& (0+255),b
  8210  000C4A  0100               	movlb	0	; () banked
  8211  000C4C  51C7               	movf	??_printf& (0+255),w,b
  8212  000C4E  0100               	movlb	0	; () banked
  8213  000C50  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  8214  000C52  B4D8               	btfsc	status,2,c
  8215  000C54  D003               	goto	l7115
  8216                           
  8217                           ; BSR set to: 0
  8218                           ;doprnt.c: 1393: (putch('-') );
  8219  000C56  0E2D               	movlw	45
  8220  000C58  EC7D  F022         	call	_putch
  8221  000C5C                     l7115:
  8222                           
  8223                           ;doprnt.c: 1415: if(width)
  8224  000C5C  0100               	movlb	0	; () banked
  8225  000C5E  51E4               	movf	printf@width& (0+255),w,b
  8226  000C60  0100               	movlb	0	; () banked
  8227  000C62  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  8228  000C64  B4D8               	btfsc	status,2,c
  8229  000C66  D0B6               	goto	l7143
  8230                           
  8231                           ; BSR set to: 0
  8232                           ;doprnt.c: 1417: (putch('0') );
  8233                           
  8234                           ; BSR set to: 0
  8235                           
  8236                           ;doprnt.c: 1416: do
  8237  000C68  0E30               	movlw	48
  8238  000C6A  EC7D  F022         	call	_putch
  8239                           
  8240                           ;doprnt.c: 1418: while(--width);
  8241  000C6E  0100               	movlb	0	; () banked
  8242  000C70  07E4               	decf	printf@width& (0+255),f,b
  8243  000C72  A0D8               	btfss	status,0,c
  8244  000C74  07E5               	decf	(printf@width+1)& (0+255),f,b
  8245  000C76  D7F2               	goto	l7115
  8246  000C78                     l7121:
  8247                           
  8248                           ; BSR set to: 0
  8249                           ;doprnt.c: 1422: {
  8250                           ;doprnt.c: 1424: if(width
  8251                           ;doprnt.c: 1428: )
  8252  000C78  0100               	movlb	0	; () banked
  8253  000C7A  51E4               	movf	printf@width& (0+255),w,b
  8254  000C7C  0100               	movlb	0	; () banked
  8255  000C7E  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  8256  000C80  B4D8               	btfsc	status,2,c
  8257  000C82  D00D               	goto	l7127
  8258  000C84                     l7123:
  8259                           
  8260                           ; BSR set to: 0
  8261                           ;doprnt.c: 1430: (putch(' ') );
  8262  000C84  0E20               	movlw	32
  8263  000C86  EC7D  F022         	call	_putch
  8264                           
  8265                           ;doprnt.c: 1431: while(--width);
  8266  000C8A  0100               	movlb	0	; () banked
  8267  000C8C  07E4               	decf	printf@width& (0+255),f,b
  8268  000C8E  A0D8               	btfss	status,0,c
  8269  000C90  07E5               	decf	(printf@width+1)& (0+255),f,b
  8270  000C92  0100               	movlb	0	; () banked
  8271  000C94  51E4               	movf	printf@width& (0+255),w,b
  8272  000C96  0100               	movlb	0	; () banked
  8273  000C98  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  8274  000C9A  A4D8               	btfss	status,2,c
  8275  000C9C  D7F3               	goto	l7123
  8276  000C9E                     l7127:
  8277                           
  8278                           ; BSR set to: 0
  8279                           ;doprnt.c: 1438: if(flag & 0x03)
  8280  000C9E  0E03               	movlw	3
  8281  000CA0  0100               	movlb	0	; () banked
  8282  000CA2  15E6               	andwf	printf@flag& (0+255),w,b
  8283  000CA4  0100               	movlb	0	; () banked
  8284  000CA6  6FC7               	movwf	??_printf& (0+255),b
  8285  000CA8  0E00               	movlw	0
  8286  000CAA  0100               	movlb	0	; () banked
  8287  000CAC  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  8288  000CAE  0100               	movlb	0	; () banked
  8289  000CB0  6FC8               	movwf	(??_printf+1)& (0+255),b
  8290  000CB2  0100               	movlb	0	; () banked
  8291  000CB4  51C7               	movf	??_printf& (0+255),w,b
  8292  000CB6  0100               	movlb	0	; () banked
  8293  000CB8  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  8294  000CBA  B4D8               	btfsc	status,2,c
  8295  000CBC  D08B               	goto	l7143
  8296                           
  8297                           ; BSR set to: 0
  8298                           ;doprnt.c: 1439: (putch('-') );
  8299  000CBE  0E2D               	movlw	45
  8300  000CC0  EC7D  F022         	call	_putch
  8301                           
  8302                           ;doprnt.c: 1469: }
  8303                           ;doprnt.c: 1474: while(prec--) {
  8304  000CC4  D087               	goto	l7143
  8305  000CC6                     l7131:
  8306                           
  8307                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8308  000CC6  C0E8  F0C7         	movff	printf@prec,??_printf
  8309  000CCA  C0E9  F0C8         	movff	printf@prec+1,??_printf+1
  8310  000CCE  0100               	movlb	0	; () banked
  8311  000CD0  90D8               	bcf	status,0,c
  8312  000CD2  37C7               	rlcf	??_printf& (0+255),f,b
  8313  000CD4  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  8314  000CD6  0100               	movlb	0	; () banked
  8315  000CD8  90D8               	bcf	status,0,c
  8316  000CDA  37C7               	rlcf	??_printf& (0+255),f,b
  8317  000CDC  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  8318  000CDE  0E8B               	movlw	low _dpowers
  8319  000CE0  0100               	movlb	0	; () banked
  8320  000CE2  25C7               	addwf	??_printf& (0+255),w,b
  8321  000CE4  6EF6               	movwf	tblptrl,c
  8322  000CE6  0EFD               	movlw	high _dpowers
  8323  000CE8  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  8324  000CEA  6EF7               	movwf	tblptrh,c
  8325  000CEC                     	if	0	;There are less than 3 active tblptr bytes
  8326  000CEC                     	endif
  8327  000CEC  0009               	tblrd		*+
  8328  000CEE  CFF5 F029          	movff	tablat,___lldiv@divisor
  8329  000CF2  0009               	tblrd		*+
  8330  000CF4  CFF5 F02A          	movff	tablat,___lldiv@divisor+1
  8331  000CF8  0009               	tblrd		*+
  8332  000CFA  CFF5 F02B          	movff	tablat,___lldiv@divisor+2
  8333  000CFE  000A               	tblrd		*-
  8334  000D00  CFF5 F02C          	movff	tablat,___lldiv@divisor+3
  8335  000D04  C0E0  F025         	movff	printf@val,___lldiv@dividend
  8336  000D08  C0E1  F026         	movff	printf@val+1,___lldiv@dividend+1
  8337  000D0C  C0E2  F027         	movff	printf@val+2,___lldiv@dividend+2
  8338  000D10  C0E3  F028         	movff	printf@val+3,___lldiv@dividend+3
  8339  000D14  ECA7  F01E         	call	___lldiv	;wreg free
  8340  000D18  C025  F032         	movff	?___lldiv,___llmod@dividend
  8341  000D1C  C026  F033         	movff	?___lldiv+1,___llmod@dividend+1
  8342  000D20  C027  F034         	movff	?___lldiv+2,___llmod@dividend+2
  8343  000D24  C028  F035         	movff	?___lldiv+3,___llmod@dividend+3
  8344  000D28  0E0A               	movlw	10
  8345  000D2A  6E36               	movwf	___llmod@divisor,c
  8346  000D2C  0E00               	movlw	0
  8347  000D2E  6E37               	movwf	___llmod@divisor+1,c
  8348  000D30  0E00               	movlw	0
  8349  000D32  6E38               	movwf	___llmod@divisor+2,c
  8350  000D34  0E00               	movlw	0
  8351  000D36  6E39               	movwf	___llmod@divisor+3,c
  8352  000D38  EC94  F01F         	call	___llmod	;wreg free
  8353  000D3C  5032               	movf	?___llmod,w,c
  8354  000D3E  0F30               	addlw	48
  8355  000D40  0100               	movlb	0	; () banked
  8356  000D42  6FEA               	movwf	printf@c& (0+255),b
  8357                           
  8358                           ;doprnt.c: 1491: break;
  8359  000D44  D043               	goto	l7141
  8360  000D46                     l7133:
  8361                           
  8362                           ; BSR set to: 0
  8363                           ;doprnt.c: 1499: {
  8364                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8365  000D46  C0E0  F025         	movff	printf@val,___lldiv@dividend
  8366  000D4A  C0E1  F026         	movff	printf@val+1,___lldiv@dividend+1
  8367  000D4E  C0E2  F027         	movff	printf@val+2,___lldiv@dividend+2
  8368  000D52  C0E3  F028         	movff	printf@val+3,___lldiv@dividend+3
  8369  000D56  C0E8  F0C7         	movff	printf@prec,??_printf
  8370  000D5A  C0E9  F0C8         	movff	printf@prec+1,??_printf+1
  8371  000D5E  0100               	movlb	0	; () banked
  8372  000D60  90D8               	bcf	status,0,c
  8373  000D62  37C7               	rlcf	??_printf& (0+255),f,b
  8374  000D64  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  8375  000D66  0100               	movlb	0	; () banked
  8376  000D68  90D8               	bcf	status,0,c
  8377  000D6A  37C7               	rlcf	??_printf& (0+255),f,b
  8378  000D6C  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  8379  000D6E  0E01               	movlw	low _hexpowers
  8380  000D70  0100               	movlb	0	; () banked
  8381  000D72  25C7               	addwf	??_printf& (0+255),w,b
  8382  000D74  6EF6               	movwf	tblptrl,c
  8383  000D76  0EFE               	movlw	high _hexpowers
  8384  000D78  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  8385  000D7A  6EF7               	movwf	tblptrh,c
  8386  000D7C                     	if	0	;There are less than 3 active tblptr bytes
  8387  000D7C                     	endif
  8388  000D7C  0009               	tblrd		*+
  8389  000D7E  CFF5 F029          	movff	tablat,___lldiv@divisor
  8390  000D82  0009               	tblrd		*+
  8391  000D84  CFF5 F02A          	movff	tablat,___lldiv@divisor+1
  8392  000D88  0009               	tblrd		*+
  8393  000D8A  CFF5 F02B          	movff	tablat,___lldiv@divisor+2
  8394  000D8E  000A               	tblrd		*-
  8395  000D90  CFF5 F02C          	movff	tablat,___lldiv@divisor+3
  8396  000D94  ECA7  F01E         	call	___lldiv	;wreg free
  8397  000D98  5025               	movf	?___lldiv,w,c
  8398  000D9A  0B0F               	andlw	15
  8399  000D9C  0100               	movlb	0	; () banked
  8400  000D9E  6FD0               	movwf	printf@idx& (0+255),b
  8401                           
  8402                           ; BSR set to: 0
  8403                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  8404  000DA0  0100               	movlb	0	; () banked
  8405  000DA2  51D0               	movf	printf@idx& (0+255),w,b
  8406  000DA4  0D01               	mullw	1
  8407  000DA6  0E3F               	movlw	low STR_24
  8408  000DA8  24F3               	addwf	prodl,w,c
  8409  000DAA  6EF6               	movwf	tblptrl,c
  8410  000DAC  0EFF               	movlw	high STR_24
  8411  000DAE  20F4               	addwfc	prodh,w,c
  8412  000DB0  6EF7               	movwf	tblptrh,c
  8413  000DB2                     	if	0	;There are less than 3 active tblptr bytes
  8414  000DB2                     	endif
  8415  000DB2  0008               	tblrd		*
  8416  000DB4  CFF5 F0EA          	movff	tablat,printf@c
  8417                           
  8418                           ; BSR set to: 0
  8419                           ;doprnt.c: 1523: }
  8420                           
  8421                           ;doprnt.c: 1508: }
  8422                           ;doprnt.c: 1510: break;
  8423  000DB8  D009               	goto	l7141
  8424  000DBA                     l7139:
  8425  000DBA  0100               	movlb	0	; () banked
  8426  000DBC  51E6               	movf	printf@flag& (0+255),w,b
  8427  000DBE  0B80               	andlw	128
  8428                           
  8429                           ; Switch size 1, requested type "space"
  8430                           ; Number of cases is 2, Range of values is 0 to 128
  8431                           ; switch strategies available:
  8432                           ; Name         Instructions Cycles
  8433                           ; simple_byte            7     4 (average)
  8434                           ;	Chosen strategy is simple_byte
  8435  000DC0  0A00               	xorlw	0	; case 0
  8436  000DC2  B4D8               	btfsc	status,2,c
  8437  000DC4  D780               	goto	l7131
  8438  000DC6  0A80               	xorlw	128	; case 128
  8439  000DC8  B4D8               	btfsc	status,2,c
  8440  000DCA  D7BD               	goto	l7133
  8441  000DCC                     l7141:
  8442                           
  8443                           ; BSR set to: 0
  8444                           ;doprnt.c: 1524: (putch(c) );
  8445  000DCC  0100               	movlb	0	; () banked
  8446  000DCE  51EA               	movf	printf@c& (0+255),w,b
  8447  000DD0  EC7D  F022         	call	_putch
  8448  000DD4                     l7143:
  8449  000DD4  0100               	movlb	0	; () banked
  8450  000DD6  07E8               	decf	printf@prec& (0+255),f,b
  8451  000DD8  A0D8               	btfss	status,0,c
  8452  000DDA  07E9               	decf	(printf@prec+1)& (0+255),f,b
  8453  000DDC  0100               	movlb	0	; () banked
  8454  000DDE  29E8               	incf	printf@prec& (0+255),w,b
  8455  000DE0  E1EC               	bnz	l7139
  8456  000DE2  0100               	movlb	0	; () banked
  8457  000DE4  29E9               	incf	(printf@prec+1)& (0+255),w,b
  8458  000DE6  A4D8               	btfss	status,2,c
  8459  000DE8  D7E8               	goto	l7139
  8460  000DEA                     l7145:
  8461  000DEA  C0B9  FFF6         	movff	printf@f,tblptrl
  8462  000DEE  C0BA  FFF7         	movff	printf@f+1,tblptrh
  8463  000DF2  0100               	movlb	0	; () banked
  8464  000DF4  4BB9               	infsnz	printf@f& (0+255),f,b
  8465  000DF6  2BBA               	incf	(printf@f+1)& (0+255),f,b
  8466  000DF8                     	if	0	;tblptru may be non-zero
  8467  000DF8                     	endif
  8468  000DF8                     	if	0	;tblptru may be non-zero
  8469  000DF8                     	endif
  8470  000DF8  0008               	tblrd		*
  8471  000DFA  CFF5 F0EA          	movff	tablat,printf@c
  8472  000DFE  0100               	movlb	0	; () banked
  8473  000E00  51EA               	movf	printf@c& (0+255),w,b
  8474  000E02  B4D8               	btfsc	status,2,c
  8475  000E04  0012               	return	
  8476  000E06  EF11  F000         	goto	l6779
  8477  000E0A                     __end_of_printf:
  8478                           	opt stack 0
  8479                           tblptru	equ	0xFF8
  8480                           tblptrh	equ	0xFF7
  8481                           tblptrl	equ	0xFF6
  8482                           tablat	equ	0xFF5
  8483                           prodh	equ	0xFF4
  8484                           prodl	equ	0xFF3
  8485                           postinc0	equ	0xFEE
  8486                           wreg	equ	0xFE8
  8487                           postdec1	equ	0xFE5
  8488                           fsr1l	equ	0xFE1
  8489                           indf2	equ	0xFDF
  8490                           postinc2	equ	0xFDE
  8491                           postdec2	equ	0xFDD
  8492                           fsr2h	equ	0xFDA
  8493                           fsr2l	equ	0xFD9
  8494                           status	equ	0xFD8
  8495                           
  8496 ;; *************** function _scale *****************
  8497 ;; Defined at:
  8498 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  8499 ;; Parameters:    Size  Location     Type
  8500 ;;  scl             1    wreg     char 
  8501 ;; Auto vars:     Size  Location     Type
  8502 ;;  scl             1   21[BANK0 ] char 
  8503 ;; Return value:  Size  Location     Type
  8504 ;;                  3   15[BANK0 ] char 
  8505 ;; Registers used:
  8506 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8507 ;; Tracked objects:
  8508 ;;		On entry : 0/0
  8509 ;;		On exit  : 0/0
  8510 ;;		Unchanged: 0/0
  8511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8512 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8513 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8515 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8516 ;;Total ram usage:        7 bytes
  8517 ;; Hardware stack levels used:    1
  8518 ;; Hardware stack levels required when called:    5
  8519 ;; This function calls:
  8520 ;;		___awdiv
  8521 ;;		___awmod
  8522 ;;		___ftmul
  8523 ;;		___wmul
  8524 ;; This function is called by:
  8525 ;;		_printf
  8526 ;; This function uses a non-reentrant model
  8527 ;;
  8528                           
  8529                           	psect	text17
  8530  001B8C                     __ptext17:
  8531                           	opt stack 0
  8532  001B8C                     _scale:
  8533                           	opt stack 23
  8534                           
  8535                           ; BSR set to: 0
  8536                           ;incstack = 0
  8537                           ;scale@scl stored from wreg
  8538  001B8C  0100               	movlb	0	; () banked
  8539  001B8E  6F95               	movwf	scale@scl& (0+255),b
  8540                           
  8541                           ;doprnt.c: 428: if(scl < 0) {
  8542  001B90  0100               	movlb	0	; () banked
  8543  001B92  AF95               	btfss	scale@scl& (0+255),7,b
  8544  001B94  D104               	goto	l6441
  8545                           
  8546                           ; BSR set to: 0
  8547                           ;doprnt.c: 429: scl = -scl;
  8548  001B96  0100               	movlb	0	; () banked
  8549  001B98  6D95               	negf	scale@scl& (0+255),b
  8550                           
  8551                           ;doprnt.c: 430: if(scl>=110)
  8552  001B9A  0100               	movlb	0	; () banked
  8553  001B9C  5195               	movf	scale@scl& (0+255),w,b
  8554  001B9E  0A80               	xorlw	128
  8555  001BA0  0F12               	addlw	-238
  8556  001BA2  A0D8               	btfss	status,0,c
  8557  001BA4  D094               	goto	l6431
  8558                           
  8559                           ; BSR set to: 0
  8560                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8561  001BA6  0E00               	movlw	0
  8562  001BA8  6E36               	movwf	___wmul@multiplicand+1,c
  8563  001BAA  0E03               	movlw	3
  8564  001BAC  6E35               	movwf	___wmul@multiplicand,c
  8565  001BAE  0E00               	movlw	0
  8566  001BB0  6E2E               	movwf	___awdiv@divisor+1,c
  8567  001BB2  0E0A               	movlw	10
  8568  001BB4  6E2D               	movwf	___awdiv@divisor,c
  8569  001BB6  0E00               	movlw	0
  8570  001BB8  6E28               	movwf	___awmod@divisor+1,c
  8571  001BBA  0E64               	movlw	100
  8572  001BBC  6E27               	movwf	___awmod@divisor,c
  8573  001BBE  0100               	movlb	0	; () banked
  8574  001BC0  5195               	movf	scale@scl& (0+255),w,b
  8575  001BC2  6E25               	movwf	___awmod@dividend,c
  8576  001BC4  6A26               	clrf	___awmod@dividend+1,c
  8577  001BC6  BE25               	btfsc	___awmod@dividend,7,c
  8578  001BC8  0626               	decf	___awmod@dividend+1,f,c
  8579  001BCA  EC24  F01F         	call	___awmod	;wreg free
  8580  001BCE  C025  F02B         	movff	?___awmod,___awdiv@dividend
  8581  001BD2  C026  F02C         	movff	?___awmod+1,___awdiv@dividend+1
  8582  001BD6  EC65  F01E         	call	___awdiv	;wreg free
  8583  001BDA  0E09               	movlw	9
  8584  001BDC  242B               	addwf	?___awdiv,w,c
  8585  001BDE  6E33               	movwf	___wmul@multiplier,c
  8586  001BE0  0E00               	movlw	0
  8587  001BE2  202C               	addwfc	?___awdiv+1,w,c
  8588  001BE4  6E34               	movwf	___wmul@multiplier+1,c
  8589  001BE6  EC58  F022         	call	___wmul	;wreg free
  8590  001BEA  0EB3               	movlw	low __npowers_
  8591  001BEC  2433               	addwf	?___wmul,w,c
  8592  001BEE  6EF6               	movwf	tblptrl,c
  8593  001BF0  0EFD               	movlw	high __npowers_
  8594  001BF2  2034               	addwfc	?___wmul+1,w,c
  8595  001BF4  6EF7               	movwf	tblptrh,c
  8596  001BF6                     	if	0	;There are less than 3 active tblptr bytes
  8597  001BF6                     	endif
  8598  001BF6  0009               	tblrd		*+
  8599  001BF8  CFF5 F083          	movff	tablat,___ftmul@f2
  8600  001BFC  0009               	tblrd		*+
  8601  001BFE  CFF5 F084          	movff	tablat,___ftmul@f2+1
  8602  001C02  000A               	tblrd		*-
  8603  001C04  CFF5 F085          	movff	tablat,___ftmul@f2+2
  8604  001C08  0E00               	movlw	0
  8605  001C0A  6E2E               	movwf	___awdiv@divisor+1,c
  8606  001C0C  0E64               	movlw	100
  8607  001C0E  6E2D               	movwf	___awdiv@divisor,c
  8608  001C10  0100               	movlb	0	; () banked
  8609  001C12  5195               	movf	scale@scl& (0+255),w,b
  8610  001C14  6E2B               	movwf	___awdiv@dividend,c
  8611  001C16  6A2C               	clrf	___awdiv@dividend+1,c
  8612  001C18  BE2B               	btfsc	___awdiv@dividend,7,c
  8613  001C1A  062C               	decf	___awdiv@dividend+1,f,c
  8614  001C1C  EC65  F01E         	call	___awdiv	;wreg free
  8615  001C20  0E12               	movlw	18
  8616  001C22  242B               	addwf	?___awdiv,w,c
  8617  001C24  6E33               	movwf	___wmul@multiplier,c
  8618  001C26  0E00               	movlw	0
  8619  001C28  202C               	addwfc	?___awdiv+1,w,c
  8620  001C2A  6E34               	movwf	___wmul@multiplier+1,c
  8621  001C2C  0E00               	movlw	0
  8622  001C2E  6E36               	movwf	___wmul@multiplicand+1,c
  8623  001C30  0E03               	movlw	3
  8624  001C32  6E35               	movwf	___wmul@multiplicand,c
  8625  001C34  EC58  F022         	call	___wmul	;wreg free
  8626  001C38  0EB3               	movlw	low __npowers_
  8627  001C3A  2433               	addwf	?___wmul,w,c
  8628  001C3C  6EF6               	movwf	tblptrl,c
  8629  001C3E  0EFD               	movlw	high __npowers_
  8630  001C40  2034               	addwfc	?___wmul+1,w,c
  8631  001C42  6EF7               	movwf	tblptrh,c
  8632  001C44                     	if	0	;There are less than 3 active tblptr bytes
  8633  001C44                     	endif
  8634  001C44  0009               	tblrd		*+
  8635  001C46  CFF5 F080          	movff	tablat,___ftmul@f1
  8636  001C4A  0009               	tblrd		*+
  8637  001C4C  CFF5 F081          	movff	tablat,___ftmul@f1+1
  8638  001C50  000A               	tblrd		*-
  8639  001C52  CFF5 F082          	movff	tablat,___ftmul@f1+2
  8640  001C56  EC65  F014         	call	___ftmul	;wreg free
  8641  001C5A  C080  F092         	movff	?___ftmul,_scale$1423
  8642  001C5E  C081  F093         	movff	?___ftmul+1,_scale$1423+1
  8643  001C62  C082  F094         	movff	?___ftmul+2,_scale$1423+2
  8644                           
  8645                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8646  001C66  C092  F080         	movff	_scale$1423,___ftmul@f1
  8647  001C6A  C093  F081         	movff	_scale$1423+1,___ftmul@f1+1
  8648  001C6E  C094  F082         	movff	_scale$1423+2,___ftmul@f1+2
  8649  001C72  0E00               	movlw	0
  8650  001C74  6E36               	movwf	___wmul@multiplicand+1,c
  8651  001C76  0E03               	movlw	3
  8652  001C78  6E35               	movwf	___wmul@multiplicand,c
  8653  001C7A  0E00               	movlw	0
  8654  001C7C  6E28               	movwf	___awmod@divisor+1,c
  8655  001C7E  0E0A               	movlw	10
  8656  001C80  6E27               	movwf	___awmod@divisor,c
  8657  001C82  0100               	movlb	0	; () banked
  8658  001C84  5195               	movf	scale@scl& (0+255),w,b
  8659  001C86  6E25               	movwf	___awmod@dividend,c
  8660  001C88  6A26               	clrf	___awmod@dividend+1,c
  8661  001C8A  BE25               	btfsc	___awmod@dividend,7,c
  8662  001C8C  0626               	decf	___awmod@dividend+1,f,c
  8663  001C8E  EC24  F01F         	call	___awmod	;wreg free
  8664  001C92  C025  F033         	movff	?___awmod,___wmul@multiplier
  8665  001C96  C026  F034         	movff	?___awmod+1,___wmul@multiplier+1
  8666  001C9A  EC58  F022         	call	___wmul	;wreg free
  8667  001C9E  0EB3               	movlw	low __npowers_
  8668  001CA0  2433               	addwf	?___wmul,w,c
  8669  001CA2  6EF6               	movwf	tblptrl,c
  8670  001CA4  0EFD               	movlw	high __npowers_
  8671  001CA6  2034               	addwfc	?___wmul+1,w,c
  8672  001CA8  6EF7               	movwf	tblptrh,c
  8673  001CAA                     	if	0	;There are less than 3 active tblptr bytes
  8674  001CAA                     	endif
  8675  001CAA  0009               	tblrd		*+
  8676  001CAC  CFF5 F083          	movff	tablat,___ftmul@f2
  8677  001CB0  0009               	tblrd		*+
  8678  001CB2  CFF5 F084          	movff	tablat,___ftmul@f2+1
  8679  001CB6  000A               	tblrd		*-
  8680  001CB8  CFF5 F085          	movff	tablat,___ftmul@f2+2
  8681  001CBC  EC65  F014         	call	___ftmul	;wreg free
  8682  001CC0  C080  F08F         	movff	?___ftmul,?_scale
  8683  001CC4  C081  F090         	movff	?___ftmul+1,?_scale+1
  8684  001CC8  C082  F091         	movff	?___ftmul+2,?_scale+2
  8685  001CCC  0012               	return	
  8686  001CCE                     l6431:
  8687                           
  8688                           ;doprnt.c: 432: else if(scl > 10)
  8689  001CCE  0100               	movlb	0	; () banked
  8690  001CD0  5195               	movf	scale@scl& (0+255),w,b
  8691  001CD2  0A80               	xorlw	128
  8692  001CD4  0F75               	addlw	-139
  8693  001CD6  A0D8               	btfss	status,0,c
  8694  001CD8  D04F               	goto	l6437
  8695                           
  8696                           ; BSR set to: 0
  8697                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  8698  001CDA  0E00               	movlw	0
  8699  001CDC  6E2E               	movwf	___awdiv@divisor+1,c
  8700  001CDE  0E0A               	movlw	10
  8701  001CE0  6E2D               	movwf	___awdiv@divisor,c
  8702  001CE2  0100               	movlb	0	; () banked
  8703  001CE4  5195               	movf	scale@scl& (0+255),w,b
  8704  001CE6  6E2B               	movwf	___awdiv@dividend,c
  8705  001CE8  6A2C               	clrf	___awdiv@dividend+1,c
  8706  001CEA  BE2B               	btfsc	___awdiv@dividend,7,c
  8707  001CEC  062C               	decf	___awdiv@dividend+1,f,c
  8708  001CEE  EC65  F01E         	call	___awdiv	;wreg free
  8709  001CF2  0E09               	movlw	9
  8710  001CF4  242B               	addwf	?___awdiv,w,c
  8711  001CF6  6E33               	movwf	___wmul@multiplier,c
  8712  001CF8  0E00               	movlw	0
  8713  001CFA  202C               	addwfc	?___awdiv+1,w,c
  8714  001CFC  6E34               	movwf	___wmul@multiplier+1,c
  8715  001CFE  0E00               	movlw	0
  8716  001D00  6E36               	movwf	___wmul@multiplicand+1,c
  8717  001D02  0E03               	movlw	3
  8718  001D04  6E35               	movwf	___wmul@multiplicand,c
  8719  001D06  EC58  F022         	call	___wmul	;wreg free
  8720  001D0A  0EB3               	movlw	low __npowers_
  8721  001D0C  2433               	addwf	?___wmul,w,c
  8722  001D0E  6EF6               	movwf	tblptrl,c
  8723  001D10  0EFD               	movlw	high __npowers_
  8724  001D12  2034               	addwfc	?___wmul+1,w,c
  8725  001D14  6EF7               	movwf	tblptrh,c
  8726  001D16                     	if	0	;There are less than 3 active tblptr bytes
  8727  001D16                     	endif
  8728  001D16  0009               	tblrd		*+
  8729  001D18  CFF5 F080          	movff	tablat,___ftmul@f1
  8730  001D1C  0009               	tblrd		*+
  8731  001D1E  CFF5 F081          	movff	tablat,___ftmul@f1+1
  8732  001D22  000A               	tblrd		*-
  8733  001D24  CFF5 F082          	movff	tablat,___ftmul@f1+2
  8734  001D28  0E00               	movlw	0
  8735  001D2A  6E36               	movwf	___wmul@multiplicand+1,c
  8736  001D2C  0E03               	movlw	3
  8737  001D2E  6E35               	movwf	___wmul@multiplicand,c
  8738  001D30  0E00               	movlw	0
  8739  001D32  6E28               	movwf	___awmod@divisor+1,c
  8740  001D34  0E0A               	movlw	10
  8741  001D36  6E27               	movwf	___awmod@divisor,c
  8742  001D38  0100               	movlb	0	; () banked
  8743  001D3A  5195               	movf	scale@scl& (0+255),w,b
  8744  001D3C  6E25               	movwf	___awmod@dividend,c
  8745  001D3E  6A26               	clrf	___awmod@dividend+1,c
  8746  001D40  BE25               	btfsc	___awmod@dividend,7,c
  8747  001D42  0626               	decf	___awmod@dividend+1,f,c
  8748  001D44  EC24  F01F         	call	___awmod	;wreg free
  8749  001D48  C025  F033         	movff	?___awmod,___wmul@multiplier
  8750  001D4C  C026  F034         	movff	?___awmod+1,___wmul@multiplier+1
  8751  001D50  EC58  F022         	call	___wmul	;wreg free
  8752  001D54  0EB3               	movlw	low __npowers_
  8753  001D56  2433               	addwf	?___wmul,w,c
  8754  001D58  6EF6               	movwf	tblptrl,c
  8755  001D5A  0EFD               	movlw	high __npowers_
  8756  001D5C  2034               	addwfc	?___wmul+1,w,c
  8757  001D5E  6EF7               	movwf	tblptrh,c
  8758  001D60                     	if	0	;There are less than 3 active tblptr bytes
  8759  001D60                     	endif
  8760  001D60  0009               	tblrd		*+
  8761  001D62  CFF5 F083          	movff	tablat,___ftmul@f2
  8762  001D66  0009               	tblrd		*+
  8763  001D68  CFF5 F084          	movff	tablat,___ftmul@f2+1
  8764  001D6C  000A               	tblrd		*-
  8765  001D6E  CFF5 F085          	movff	tablat,___ftmul@f2+2
  8766  001D72  EC65  F014         	call	___ftmul	;wreg free
  8767  001D76  D7A4               	goto	L6
  8768  001D78                     l6437:
  8769                           
  8770                           ;doprnt.c: 434: return _npowers_[scl];
  8771  001D78  0100               	movlb	0	; () banked
  8772  001D7A  5195               	movf	scale@scl& (0+255),w,b
  8773  001D7C  0D03               	mullw	3
  8774  001D7E  0EB3               	movlw	low __npowers_
  8775  001D80  24F3               	addwf	prodl,w,c
  8776  001D82  6EF6               	movwf	tblptrl,c
  8777  001D84  0EFD               	movlw	high __npowers_
  8778  001D86  20F4               	addwfc	prodh,w,c
  8779  001D88  6EF7               	movwf	tblptrh,c
  8780  001D8A                     	if	0	;There are less than 3 active tblptr bytes
  8781  001D8A                     	endif
  8782  001D8A  0009               	tblrd		*+
  8783  001D8C  CFF5 F08F          	movff	tablat,?_scale
  8784  001D90  0009               	tblrd		*+
  8785  001D92  CFF5 F090          	movff	tablat,?_scale+1
  8786  001D96  000A               	tblrd		*-
  8787  001D98  CFF5 F091          	movff	tablat,?_scale+2
  8788                           
  8789                           ; BSR set to: 0
  8790  001D9C  0012               	return	
  8791  001D9E                     l6441:
  8792                           
  8793                           ; BSR set to: 0
  8794                           ;doprnt.c: 435: }
  8795                           ;doprnt.c: 436: if(scl>=110)
  8796  001D9E  0100               	movlb	0	; () banked
  8797  001DA0  5195               	movf	scale@scl& (0+255),w,b
  8798  001DA2  0A80               	xorlw	128
  8799  001DA4  0F12               	addlw	-238
  8800  001DA6  A0D8               	btfss	status,0,c
  8801  001DA8  D094               	goto	l6449
  8802                           
  8803                           ; BSR set to: 0
  8804                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8805  001DAA  0E00               	movlw	0
  8806  001DAC  6E36               	movwf	___wmul@multiplicand+1,c
  8807  001DAE  0E03               	movlw	3
  8808  001DB0  6E35               	movwf	___wmul@multiplicand,c
  8809  001DB2  0E00               	movlw	0
  8810  001DB4  6E2E               	movwf	___awdiv@divisor+1,c
  8811  001DB6  0E0A               	movlw	10
  8812  001DB8  6E2D               	movwf	___awdiv@divisor,c
  8813  001DBA  0E00               	movlw	0
  8814  001DBC  6E28               	movwf	___awmod@divisor+1,c
  8815  001DBE  0E64               	movlw	100
  8816  001DC0  6E27               	movwf	___awmod@divisor,c
  8817  001DC2  0100               	movlb	0	; () banked
  8818  001DC4  5195               	movf	scale@scl& (0+255),w,b
  8819  001DC6  6E25               	movwf	___awmod@dividend,c
  8820  001DC8  6A26               	clrf	___awmod@dividend+1,c
  8821  001DCA  BE25               	btfsc	___awmod@dividend,7,c
  8822  001DCC  0626               	decf	___awmod@dividend+1,f,c
  8823  001DCE  EC24  F01F         	call	___awmod	;wreg free
  8824  001DD2  C025  F02B         	movff	?___awmod,___awdiv@dividend
  8825  001DD6  C026  F02C         	movff	?___awmod+1,___awdiv@dividend+1
  8826  001DDA  EC65  F01E         	call	___awdiv	;wreg free
  8827  001DDE  0E09               	movlw	9
  8828  001DE0  242B               	addwf	?___awdiv,w,c
  8829  001DE2  6E33               	movwf	___wmul@multiplier,c
  8830  001DE4  0E00               	movlw	0
  8831  001DE6  202C               	addwfc	?___awdiv+1,w,c
  8832  001DE8  6E34               	movwf	___wmul@multiplier+1,c
  8833  001DEA  EC58  F022         	call	___wmul	;wreg free
  8834  001DEE  0EDA               	movlw	low __powers_
  8835  001DF0  2433               	addwf	?___wmul,w,c
  8836  001DF2  6EF6               	movwf	tblptrl,c
  8837  001DF4  0EFD               	movlw	high __powers_
  8838  001DF6  2034               	addwfc	?___wmul+1,w,c
  8839  001DF8  6EF7               	movwf	tblptrh,c
  8840  001DFA                     	if	0	;There are less than 3 active tblptr bytes
  8841  001DFA                     	endif
  8842  001DFA  0009               	tblrd		*+
  8843  001DFC  CFF5 F083          	movff	tablat,___ftmul@f2
  8844  001E00  0009               	tblrd		*+
  8845  001E02  CFF5 F084          	movff	tablat,___ftmul@f2+1
  8846  001E06  000A               	tblrd		*-
  8847  001E08  CFF5 F085          	movff	tablat,___ftmul@f2+2
  8848  001E0C  0E00               	movlw	0
  8849  001E0E  6E2E               	movwf	___awdiv@divisor+1,c
  8850  001E10  0E64               	movlw	100
  8851  001E12  6E2D               	movwf	___awdiv@divisor,c
  8852  001E14  0100               	movlb	0	; () banked
  8853  001E16  5195               	movf	scale@scl& (0+255),w,b
  8854  001E18  6E2B               	movwf	___awdiv@dividend,c
  8855  001E1A  6A2C               	clrf	___awdiv@dividend+1,c
  8856  001E1C  BE2B               	btfsc	___awdiv@dividend,7,c
  8857  001E1E  062C               	decf	___awdiv@dividend+1,f,c
  8858  001E20  EC65  F01E         	call	___awdiv	;wreg free
  8859  001E24  0E12               	movlw	18
  8860  001E26  242B               	addwf	?___awdiv,w,c
  8861  001E28  6E33               	movwf	___wmul@multiplier,c
  8862  001E2A  0E00               	movlw	0
  8863  001E2C  202C               	addwfc	?___awdiv+1,w,c
  8864  001E2E  6E34               	movwf	___wmul@multiplier+1,c
  8865  001E30  0E00               	movlw	0
  8866  001E32  6E36               	movwf	___wmul@multiplicand+1,c
  8867  001E34  0E03               	movlw	3
  8868  001E36  6E35               	movwf	___wmul@multiplicand,c
  8869  001E38  EC58  F022         	call	___wmul	;wreg free
  8870  001E3C  0EDA               	movlw	low __powers_
  8871  001E3E  2433               	addwf	?___wmul,w,c
  8872  001E40  6EF6               	movwf	tblptrl,c
  8873  001E42  0EFD               	movlw	high __powers_
  8874  001E44  2034               	addwfc	?___wmul+1,w,c
  8875  001E46  6EF7               	movwf	tblptrh,c
  8876  001E48                     	if	0	;There are less than 3 active tblptr bytes
  8877  001E48                     	endif
  8878  001E48  0009               	tblrd		*+
  8879  001E4A  CFF5 F080          	movff	tablat,___ftmul@f1
  8880  001E4E  0009               	tblrd		*+
  8881  001E50  CFF5 F081          	movff	tablat,___ftmul@f1+1
  8882  001E54  000A               	tblrd		*-
  8883  001E56  CFF5 F082          	movff	tablat,___ftmul@f1+2
  8884  001E5A  EC65  F014         	call	___ftmul	;wreg free
  8885  001E5E  C080  F092         	movff	?___ftmul,_scale$1423
  8886  001E62  C081  F093         	movff	?___ftmul+1,_scale$1423+1
  8887  001E66  C082  F094         	movff	?___ftmul+2,_scale$1423+2
  8888                           
  8889                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8890  001E6A  C092  F080         	movff	_scale$1423,___ftmul@f1
  8891  001E6E  C093  F081         	movff	_scale$1423+1,___ftmul@f1+1
  8892  001E72  C094  F082         	movff	_scale$1423+2,___ftmul@f1+2
  8893  001E76  0E00               	movlw	0
  8894  001E78  6E36               	movwf	___wmul@multiplicand+1,c
  8895  001E7A  0E03               	movlw	3
  8896  001E7C  6E35               	movwf	___wmul@multiplicand,c
  8897  001E7E  0E00               	movlw	0
  8898  001E80  6E28               	movwf	___awmod@divisor+1,c
  8899  001E82  0E0A               	movlw	10
  8900  001E84  6E27               	movwf	___awmod@divisor,c
  8901  001E86  0100               	movlb	0	; () banked
  8902  001E88  5195               	movf	scale@scl& (0+255),w,b
  8903  001E8A  6E25               	movwf	___awmod@dividend,c
  8904  001E8C  6A26               	clrf	___awmod@dividend+1,c
  8905  001E8E  BE25               	btfsc	___awmod@dividend,7,c
  8906  001E90  0626               	decf	___awmod@dividend+1,f,c
  8907  001E92  EC24  F01F         	call	___awmod	;wreg free
  8908  001E96  C025  F033         	movff	?___awmod,___wmul@multiplier
  8909  001E9A  C026  F034         	movff	?___awmod+1,___wmul@multiplier+1
  8910  001E9E  EC58  F022         	call	___wmul	;wreg free
  8911  001EA2  0EDA               	movlw	low __powers_
  8912  001EA4  2433               	addwf	?___wmul,w,c
  8913  001EA6  6EF6               	movwf	tblptrl,c
  8914  001EA8  0EFD               	movlw	high __powers_
  8915  001EAA  2034               	addwfc	?___wmul+1,w,c
  8916  001EAC  6EF7               	movwf	tblptrh,c
  8917  001EAE                     	if	0	;There are less than 3 active tblptr bytes
  8918  001EAE                     	endif
  8919  001EAE  0009               	tblrd		*+
  8920  001EB0  CFF5 F083          	movff	tablat,___ftmul@f2
  8921  001EB4  0009               	tblrd		*+
  8922  001EB6  CFF5 F084          	movff	tablat,___ftmul@f2+1
  8923  001EBA  000A               	tblrd		*-
  8924  001EBC  CFF5 F085          	movff	tablat,___ftmul@f2+2
  8925  001EC0  EC65  F014         	call	___ftmul	;wreg free
  8926  001EC4  C080  F08F         	movff	?___ftmul,?_scale
  8927  001EC8  C081  F090         	movff	?___ftmul+1,?_scale+1
  8928  001ECC  C082  F091         	movff	?___ftmul+2,?_scale+2
  8929  001ED0  0012               	return	
  8930  001ED2                     l6449:
  8931                           
  8932                           ;doprnt.c: 438: else if(scl > 10)
  8933  001ED2  0100               	movlb	0	; () banked
  8934  001ED4  5195               	movf	scale@scl& (0+255),w,b
  8935  001ED6  0A80               	xorlw	128
  8936  001ED8  0F75               	addlw	-139
  8937  001EDA  A0D8               	btfss	status,0,c
  8938  001EDC  D04F               	goto	l6455
  8939                           
  8940                           ; BSR set to: 0
  8941                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  8942  001EDE  0E00               	movlw	0
  8943  001EE0  6E2E               	movwf	___awdiv@divisor+1,c
  8944  001EE2  0E0A               	movlw	10
  8945  001EE4  6E2D               	movwf	___awdiv@divisor,c
  8946  001EE6  0100               	movlb	0	; () banked
  8947  001EE8  5195               	movf	scale@scl& (0+255),w,b
  8948  001EEA  6E2B               	movwf	___awdiv@dividend,c
  8949  001EEC  6A2C               	clrf	___awdiv@dividend+1,c
  8950  001EEE  BE2B               	btfsc	___awdiv@dividend,7,c
  8951  001EF0  062C               	decf	___awdiv@dividend+1,f,c
  8952  001EF2  EC65  F01E         	call	___awdiv	;wreg free
  8953  001EF6  0E09               	movlw	9
  8954  001EF8  242B               	addwf	?___awdiv,w,c
  8955  001EFA  6E33               	movwf	___wmul@multiplier,c
  8956  001EFC  0E00               	movlw	0
  8957  001EFE  202C               	addwfc	?___awdiv+1,w,c
  8958  001F00  6E34               	movwf	___wmul@multiplier+1,c
  8959  001F02  0E00               	movlw	0
  8960  001F04  6E36               	movwf	___wmul@multiplicand+1,c
  8961  001F06  0E03               	movlw	3
  8962  001F08  6E35               	movwf	___wmul@multiplicand,c
  8963  001F0A  EC58  F022         	call	___wmul	;wreg free
  8964  001F0E  0EDA               	movlw	low __powers_
  8965  001F10  2433               	addwf	?___wmul,w,c
  8966  001F12  6EF6               	movwf	tblptrl,c
  8967  001F14  0EFD               	movlw	high __powers_
  8968  001F16  2034               	addwfc	?___wmul+1,w,c
  8969  001F18  6EF7               	movwf	tblptrh,c
  8970  001F1A                     	if	0	;There are less than 3 active tblptr bytes
  8971  001F1A                     	endif
  8972  001F1A  0009               	tblrd		*+
  8973  001F1C  CFF5 F080          	movff	tablat,___ftmul@f1
  8974  001F20  0009               	tblrd		*+
  8975  001F22  CFF5 F081          	movff	tablat,___ftmul@f1+1
  8976  001F26  000A               	tblrd		*-
  8977  001F28  CFF5 F082          	movff	tablat,___ftmul@f1+2
  8978  001F2C  0E00               	movlw	0
  8979  001F2E  6E36               	movwf	___wmul@multiplicand+1,c
  8980  001F30  0E03               	movlw	3
  8981  001F32  6E35               	movwf	___wmul@multiplicand,c
  8982  001F34  0E00               	movlw	0
  8983  001F36  6E28               	movwf	___awmod@divisor+1,c
  8984  001F38  0E0A               	movlw	10
  8985  001F3A  6E27               	movwf	___awmod@divisor,c
  8986  001F3C  0100               	movlb	0	; () banked
  8987  001F3E  5195               	movf	scale@scl& (0+255),w,b
  8988  001F40  6E25               	movwf	___awmod@dividend,c
  8989  001F42  6A26               	clrf	___awmod@dividend+1,c
  8990  001F44  BE25               	btfsc	___awmod@dividend,7,c
  8991  001F46  0626               	decf	___awmod@dividend+1,f,c
  8992  001F48  EC24  F01F         	call	___awmod	;wreg free
  8993  001F4C  C025  F033         	movff	?___awmod,___wmul@multiplier
  8994  001F50  C026  F034         	movff	?___awmod+1,___wmul@multiplier+1
  8995  001F54  EC58  F022         	call	___wmul	;wreg free
  8996  001F58  0EDA               	movlw	low __powers_
  8997  001F5A  2433               	addwf	?___wmul,w,c
  8998  001F5C  6EF6               	movwf	tblptrl,c
  8999  001F5E  0EFD               	movlw	high __powers_
  9000  001F60  2034               	addwfc	?___wmul+1,w,c
  9001  001F62  6EF7               	movwf	tblptrh,c
  9002  001F64                     	if	0	;There are less than 3 active tblptr bytes
  9003  001F64                     	endif
  9004  001F64  0009               	tblrd		*+
  9005  001F66  CFF5 F083          	movff	tablat,___ftmul@f2
  9006  001F6A  0009               	tblrd		*+
  9007  001F6C  CFF5 F084          	movff	tablat,___ftmul@f2+1
  9008  001F70  000A               	tblrd		*-
  9009  001F72  CFF5 F085          	movff	tablat,___ftmul@f2+2
  9010  001F76  EC65  F014         	call	___ftmul	;wreg free
  9011  001F7A  D7A4               	goto	L7
  9012  001F7C                     l6455:
  9013                           
  9014                           ;doprnt.c: 440: return _powers_[scl];
  9015  001F7C  0100               	movlb	0	; () banked
  9016  001F7E  5195               	movf	scale@scl& (0+255),w,b
  9017  001F80  0D03               	mullw	3
  9018  001F82  0EDA               	movlw	low __powers_
  9019  001F84  24F3               	addwf	prodl,w,c
  9020  001F86  6EF6               	movwf	tblptrl,c
  9021  001F88  0EFD               	movlw	high __powers_
  9022  001F8A  20F4               	addwfc	prodh,w,c
  9023  001F8C  6EF7               	movwf	tblptrh,c
  9024  001F8E                     	if	0	;There are less than 3 active tblptr bytes
  9025  001F8E                     	endif
  9026  001F8E  0009               	tblrd		*+
  9027  001F90  CFF5 F08F          	movff	tablat,?_scale
  9028  001F94  0009               	tblrd		*+
  9029  001F96  CFF5 F090          	movff	tablat,?_scale+1
  9030  001F9A  000A               	tblrd		*-
  9031  001F9C  CFF5 F091          	movff	tablat,?_scale+2
  9032  001FA0  0012               	return	
  9033  001FA2                     __end_of_scale:
  9034                           	opt stack 0
  9035                           tblptru	equ	0xFF8
  9036                           tblptrh	equ	0xFF7
  9037                           tblptrl	equ	0xFF6
  9038                           tablat	equ	0xFF5
  9039                           prodh	equ	0xFF4
  9040                           prodl	equ	0xFF3
  9041                           postinc0	equ	0xFEE
  9042                           wreg	equ	0xFE8
  9043                           postdec1	equ	0xFE5
  9044                           fsr1l	equ	0xFE1
  9045                           indf2	equ	0xFDF
  9046                           postinc2	equ	0xFDE
  9047                           postdec2	equ	0xFDD
  9048                           fsr2h	equ	0xFDA
  9049                           fsr2l	equ	0xFD9
  9050                           status	equ	0xFD8
  9051                           
  9052 ;; *************** function _putch *****************
  9053 ;; Defined at:
  9054 ;;		line 35 in file "lcd.c"
  9055 ;; Parameters:    Size  Location     Type
  9056 ;;  data            1    wreg     unsigned char 
  9057 ;; Auto vars:     Size  Location     Type
  9058 ;;  data            1   40[COMRAM] unsigned char 
  9059 ;; Return value:  Size  Location     Type
  9060 ;;                  1    wreg      void 
  9061 ;; Registers used:
  9062 ;;		wreg, status,2, status,0, cstack
  9063 ;; Tracked objects:
  9064 ;;		On entry : 0/0
  9065 ;;		On exit  : 0/0
  9066 ;;		Unchanged: 0/0
  9067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9069 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9071 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9072 ;;Total ram usage:        1 bytes
  9073 ;; Hardware stack levels used:    1
  9074 ;; Hardware stack levels required when called:    6
  9075 ;; This function calls:
  9076 ;;		_lcdNewline
  9077 ;;		_lcdNibble
  9078 ;; This function is called by:
  9079 ;;		_printf
  9080 ;; This function uses a non-reentrant model
  9081 ;;
  9082                           
  9083                           	psect	text18
  9084  0044FA                     __ptext18:
  9085                           	opt stack 0
  9086  0044FA                     _putch:
  9087                           	opt stack 22
  9088                           
  9089                           ;incstack = 0
  9090                           ;putch@data stored from wreg
  9091  0044FA  6E29               	movwf	putch@data,c
  9092                           
  9093                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  9094  0044FC  0E0A               	movlw	10
  9095  0044FE  1829               	xorwf	putch@data,w,c
  9096  004500  A4D8               	btfss	status,2,c
  9097  004502  D003               	goto	l235
  9098  004504  ECF8  F022         	call	_lcdNewline	;wreg free
  9099  004508  0012               	return	
  9100  00450A                     l235:
  9101                           
  9102                           ;lcd.c: 37: else
  9103                           ;lcd.c: 38: {
  9104                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  9105  00450A  848C               	bsf	3980,2,c	;volatile
  9106                           
  9107                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  9108  00450C  0E74               	movlw	116
  9109  00450E                     u8487:
  9110  00450E  2EE8               	decfsz	wreg,f,c
  9111  004510  D7FE               	bra	u8487
  9112  004512  D000               	nop2	
  9113                           
  9114                           ;lcd.c: 41: lcdNibble(data);
  9115  004514  5029               	movf	putch@data,w,c
  9116  004516  ECCA  F01F         	call	_lcdNibble
  9117  00451A  0012               	return	
  9118  00451C                     __end_of_putch:
  9119                           	opt stack 0
  9120                           tblptru	equ	0xFF8
  9121                           tblptrh	equ	0xFF7
  9122                           tblptrl	equ	0xFF6
  9123                           tablat	equ	0xFF5
  9124                           prodh	equ	0xFF4
  9125                           prodl	equ	0xFF3
  9126                           postinc0	equ	0xFEE
  9127                           wreg	equ	0xFE8
  9128                           postdec1	equ	0xFE5
  9129                           fsr1l	equ	0xFE1
  9130                           indf2	equ	0xFDF
  9131                           postinc2	equ	0xFDE
  9132                           postdec2	equ	0xFDD
  9133                           fsr2h	equ	0xFDA
  9134                           fsr2l	equ	0xFD9
  9135                           status	equ	0xFD8
  9136                           
  9137 ;; *************** function _lcdNewline *****************
  9138 ;; Defined at:
  9139 ;;		line 78 in file "lcd.c"
  9140 ;; Parameters:    Size  Location     Type
  9141 ;;		None
  9142 ;; Auto vars:     Size  Location     Type
  9143 ;;		None
  9144 ;; Return value:  Size  Location     Type
  9145 ;;                  1    wreg      void 
  9146 ;; Registers used:
  9147 ;;		wreg, status,2, status,0, cstack
  9148 ;; Tracked objects:
  9149 ;;		On entry : 0/0
  9150 ;;		On exit  : 0/0
  9151 ;;		Unchanged: 0/0
  9152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9157 ;;Total ram usage:        0 bytes
  9158 ;; Hardware stack levels used:    1
  9159 ;; Hardware stack levels required when called:    5
  9160 ;; This function calls:
  9161 ;;		_lcdInst
  9162 ;; This function is called by:
  9163 ;;		_putch
  9164 ;; This function uses a non-reentrant model
  9165 ;;
  9166                           
  9167                           	psect	text19
  9168  0045F0                     __ptext19:
  9169                           	opt stack 0
  9170  0045F0                     _lcdNewline:
  9171                           	opt stack 22
  9172                           
  9173                           ;lcd.c: 79: lcdInst(0b11000000);
  9174                           
  9175                           ;incstack = 0
  9176  0045F0  0EC0               	movlw	192
  9177  0045F2  EC8E  F022         	call	_lcdInst
  9178  0045F6  0012               	return		;funcret
  9179  0045F8                     __end_of_lcdNewline:
  9180                           	opt stack 0
  9181                           tblptru	equ	0xFF8
  9182                           tblptrh	equ	0xFF7
  9183                           tblptrl	equ	0xFF6
  9184                           tablat	equ	0xFF5
  9185                           prodh	equ	0xFF4
  9186                           prodl	equ	0xFF3
  9187                           postinc0	equ	0xFEE
  9188                           wreg	equ	0xFE8
  9189                           postdec1	equ	0xFE5
  9190                           fsr1l	equ	0xFE1
  9191                           indf2	equ	0xFDF
  9192                           postinc2	equ	0xFDE
  9193                           postdec2	equ	0xFDD
  9194                           fsr2h	equ	0xFDA
  9195                           fsr2l	equ	0xFD9
  9196                           status	equ	0xFD8
  9197                           
  9198 ;; *************** function _isdigit *****************
  9199 ;; Defined at:
  9200 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  9201 ;; Parameters:    Size  Location     Type
  9202 ;;  c               1    wreg     unsigned char 
  9203 ;; Auto vars:     Size  Location     Type
  9204 ;;  c               1   38[COMRAM] unsigned char 
  9205 ;; Return value:  Size  Location     Type
  9206 ;;		None               void
  9207 ;; Registers used:
  9208 ;;		wreg, status,2, status,0
  9209 ;; Tracked objects:
  9210 ;;		On entry : 0/0
  9211 ;;		On exit  : 0/0
  9212 ;;		Unchanged: 0/0
  9213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9215 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9216 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9217 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9218 ;;Total ram usage:        3 bytes
  9219 ;; Hardware stack levels used:    1
  9220 ;; Hardware stack levels required when called:    3
  9221 ;; This function calls:
  9222 ;;		Nothing
  9223 ;; This function is called by:
  9224 ;;		_printf
  9225 ;; This function uses a non-reentrant model
  9226 ;;
  9227                           
  9228                           	psect	text20
  9229  00455E                     __ptext20:
  9230                           	opt stack 0
  9231  00455E                     _isdigit:
  9232                           	opt stack 25
  9233                           
  9234                           ;incstack = 0
  9235                           ;isdigit@c stored from wreg
  9236  00455E  6E27               	movwf	isdigit@c,c
  9237  004560  0E00               	movlw	0
  9238  004562  6E26               	movwf	_isdigit$1053,c
  9239  004564  0E3A               	movlw	58
  9240  004566  6027               	cpfslt	isdigit@c,c
  9241  004568  D005               	goto	l6467
  9242  00456A  0E2F               	movlw	47
  9243  00456C  6427               	cpfsgt	isdigit@c,c
  9244  00456E  D002               	goto	l6467
  9245  004570  0E01               	movlw	1
  9246  004572  6E26               	movwf	_isdigit$1053,c
  9247  004574                     l6467:
  9248  004574  C026  F025         	movff	_isdigit$1053,??_isdigit
  9249  004578  3025               	rrcf	??_isdigit,w,c
  9250  00457A  0012               	return	
  9251  00457C                     __end_of_isdigit:
  9252                           	opt stack 0
  9253                           tblptru	equ	0xFF8
  9254                           tblptrh	equ	0xFF7
  9255                           tblptrl	equ	0xFF6
  9256                           tablat	equ	0xFF5
  9257                           prodh	equ	0xFF4
  9258                           prodl	equ	0xFF3
  9259                           postinc0	equ	0xFEE
  9260                           wreg	equ	0xFE8
  9261                           postdec1	equ	0xFE5
  9262                           fsr1l	equ	0xFE1
  9263                           indf2	equ	0xFDF
  9264                           postinc2	equ	0xFDE
  9265                           postdec2	equ	0xFDD
  9266                           fsr2h	equ	0xFDA
  9267                           fsr2l	equ	0xFD9
  9268                           status	equ	0xFD8
  9269                           
  9270 ;; *************** function _fround *****************
  9271 ;; Defined at:
  9272 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  9273 ;; Parameters:    Size  Location     Type
  9274 ;;  prec            1    wreg     unsigned char 
  9275 ;; Auto vars:     Size  Location     Type
  9276 ;;  prec            1   24[BANK0 ] unsigned char 
  9277 ;; Return value:  Size  Location     Type
  9278 ;;                  3   15[BANK0 ] unsigned char 
  9279 ;; Registers used:
  9280 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9281 ;; Tracked objects:
  9282 ;;		On entry : 0/0
  9283 ;;		On exit  : 0/0
  9284 ;;		Unchanged: 0/0
  9285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9286 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9287 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9289 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9290 ;;Total ram usage:       10 bytes
  9291 ;; Hardware stack levels used:    1
  9292 ;; Hardware stack levels required when called:    5
  9293 ;; This function calls:
  9294 ;;		___awdiv
  9295 ;;		___awmod
  9296 ;;		___ftmul
  9297 ;;		___wmul
  9298 ;; This function is called by:
  9299 ;;		_printf
  9300 ;; This function uses a non-reentrant model
  9301 ;;
  9302                           
  9303                           	psect	text21
  9304  00220A                     __ptext21:
  9305                           	opt stack 0
  9306  00220A                     _fround:
  9307                           	opt stack 23
  9308                           
  9309                           ;incstack = 0
  9310                           ;fround@prec stored from wreg
  9311  00220A  0100               	movlb	0	; () banked
  9312  00220C  6F98               	movwf	fround@prec& (0+255),b
  9313                           
  9314                           ;doprnt.c: 413: if(prec>=110)
  9315  00220E  0E6D               	movlw	109
  9316  002210  0100               	movlb	0	; () banked
  9317  002212  6598               	cpfsgt	fround@prec& (0+255),b
  9318  002214  D0A2               	goto	l6409
  9319                           
  9320                           ; BSR set to: 0
  9321                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9322  002216  0E00               	movlw	0
  9323  002218  6E36               	movwf	___wmul@multiplicand+1,c
  9324  00221A  0E03               	movlw	3
  9325  00221C  6E35               	movwf	___wmul@multiplicand,c
  9326  00221E  0E00               	movlw	0
  9327  002220  6E2E               	movwf	___awdiv@divisor+1,c
  9328  002222  0E0A               	movlw	10
  9329  002224  6E2D               	movwf	___awdiv@divisor,c
  9330  002226  0E00               	movlw	0
  9331  002228  6E28               	movwf	___awmod@divisor+1,c
  9332  00222A  0E64               	movlw	100
  9333  00222C  6E27               	movwf	___awmod@divisor,c
  9334  00222E  C098  F025         	movff	fround@prec,___awmod@dividend
  9335  002232  6A26               	clrf	___awmod@dividend+1,c
  9336  002234  EC24  F01F         	call	___awmod	;wreg free
  9337  002238  C025  F02B         	movff	?___awmod,___awdiv@dividend
  9338  00223C  C026  F02C         	movff	?___awmod+1,___awdiv@dividend+1
  9339  002240  EC65  F01E         	call	___awdiv	;wreg free
  9340  002244  0E09               	movlw	9
  9341  002246  242B               	addwf	?___awdiv,w,c
  9342  002248  6E33               	movwf	___wmul@multiplier,c
  9343  00224A  0E00               	movlw	0
  9344  00224C  202C               	addwfc	?___awdiv+1,w,c
  9345  00224E  6E34               	movwf	___wmul@multiplier+1,c
  9346  002250  EC58  F022         	call	___wmul	;wreg free
  9347  002254  0EB3               	movlw	low __npowers_
  9348  002256  2433               	addwf	?___wmul,w,c
  9349  002258  6EF6               	movwf	tblptrl,c
  9350  00225A  0EFD               	movlw	high __npowers_
  9351  00225C  2034               	addwfc	?___wmul+1,w,c
  9352  00225E  6EF7               	movwf	tblptrh,c
  9353  002260                     	if	0	;There are less than 3 active tblptr bytes
  9354  002260                     	endif
  9355  002260  0009               	tblrd		*+
  9356  002262  CFF5 F083          	movff	tablat,___ftmul@f2
  9357  002266  0009               	tblrd		*+
  9358  002268  CFF5 F084          	movff	tablat,___ftmul@f2+1
  9359  00226C  000A               	tblrd		*-
  9360  00226E  CFF5 F085          	movff	tablat,___ftmul@f2+2
  9361  002272  0E00               	movlw	0
  9362  002274  6E2E               	movwf	___awdiv@divisor+1,c
  9363  002276  0E64               	movlw	100
  9364  002278  6E2D               	movwf	___awdiv@divisor,c
  9365  00227A  C098  F02B         	movff	fround@prec,___awdiv@dividend
  9366  00227E  6A2C               	clrf	___awdiv@dividend+1,c
  9367  002280  EC65  F01E         	call	___awdiv	;wreg free
  9368  002284  0E12               	movlw	18
  9369  002286  242B               	addwf	?___awdiv,w,c
  9370  002288  6E33               	movwf	___wmul@multiplier,c
  9371  00228A  0E00               	movlw	0
  9372  00228C  202C               	addwfc	?___awdiv+1,w,c
  9373  00228E  6E34               	movwf	___wmul@multiplier+1,c
  9374  002290  0E00               	movlw	0
  9375  002292  6E36               	movwf	___wmul@multiplicand+1,c
  9376  002294  0E03               	movlw	3
  9377  002296  6E35               	movwf	___wmul@multiplicand,c
  9378  002298  EC58  F022         	call	___wmul	;wreg free
  9379  00229C  0EB3               	movlw	low __npowers_
  9380  00229E  2433               	addwf	?___wmul,w,c
  9381  0022A0  6EF6               	movwf	tblptrl,c
  9382  0022A2  0EFD               	movlw	high __npowers_
  9383  0022A4  2034               	addwfc	?___wmul+1,w,c
  9384  0022A6  6EF7               	movwf	tblptrh,c
  9385  0022A8                     	if	0	;There are less than 3 active tblptr bytes
  9386  0022A8                     	endif
  9387  0022A8  0009               	tblrd		*+
  9388  0022AA  CFF5 F080          	movff	tablat,___ftmul@f1
  9389  0022AE  0009               	tblrd		*+
  9390  0022B0  CFF5 F081          	movff	tablat,___ftmul@f1+1
  9391  0022B4  000A               	tblrd		*-
  9392  0022B6  CFF5 F082          	movff	tablat,___ftmul@f1+2
  9393  0022BA  EC65  F014         	call	___ftmul	;wreg free
  9394  0022BE  C080  F095         	movff	?___ftmul,_fround$1421
  9395  0022C2  C081  F096         	movff	?___ftmul+1,_fround$1421+1
  9396  0022C6  C082  F097         	movff	?___ftmul+2,_fround$1421+2
  9397                           
  9398                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9399  0022CA  0E00               	movlw	0
  9400  0022CC  6E36               	movwf	___wmul@multiplicand+1,c
  9401  0022CE  0E03               	movlw	3
  9402  0022D0  6E35               	movwf	___wmul@multiplicand,c
  9403  0022D2  0E00               	movlw	0
  9404  0022D4  6E28               	movwf	___awmod@divisor+1,c
  9405  0022D6  0E0A               	movlw	10
  9406  0022D8  6E27               	movwf	___awmod@divisor,c
  9407  0022DA  C098  F025         	movff	fround@prec,___awmod@dividend
  9408  0022DE  6A26               	clrf	___awmod@dividend+1,c
  9409  0022E0  EC24  F01F         	call	___awmod	;wreg free
  9410  0022E4  C025  F033         	movff	?___awmod,___wmul@multiplier
  9411  0022E8  C026  F034         	movff	?___awmod+1,___wmul@multiplier+1
  9412  0022EC  EC58  F022         	call	___wmul	;wreg free
  9413  0022F0  0EB3               	movlw	low __npowers_
  9414  0022F2  2433               	addwf	?___wmul,w,c
  9415  0022F4  6EF6               	movwf	tblptrl,c
  9416  0022F6  0EFD               	movlw	high __npowers_
  9417  0022F8  2034               	addwfc	?___wmul+1,w,c
  9418  0022FA  6EF7               	movwf	tblptrh,c
  9419  0022FC                     	if	0	;There are less than 3 active tblptr bytes
  9420  0022FC                     	endif
  9421  0022FC  0009               	tblrd		*+
  9422  0022FE  CFF5 F083          	movff	tablat,___ftmul@f2
  9423  002302  0009               	tblrd		*+
  9424  002304  CFF5 F084          	movff	tablat,___ftmul@f2+1
  9425  002308  000A               	tblrd		*-
  9426  00230A  CFF5 F085          	movff	tablat,___ftmul@f2+2
  9427  00230E  C095  F080         	movff	_fround$1421,___ftmul@f1
  9428  002312  C096  F081         	movff	_fround$1421+1,___ftmul@f1+1
  9429  002316  C097  F082         	movff	_fround$1421+2,___ftmul@f1+2
  9430  00231A  EC65  F014         	call	___ftmul	;wreg free
  9431  00231E  C080  F092         	movff	?___ftmul,_fround$1422
  9432  002322  C081  F093         	movff	?___ftmul+1,_fround$1422+1
  9433  002326  C082  F094         	movff	?___ftmul+2,_fround$1422+2
  9434                           
  9435                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9436  00232A  C092  F080         	movff	_fround$1422,___ftmul@f1
  9437  00232E  C093  F081         	movff	_fround$1422+1,___ftmul@f1+1
  9438  002332  C094  F082         	movff	_fround$1422+2,___ftmul@f1+2
  9439  002336  0E00               	movlw	0
  9440  002338  0100               	movlb	0	; () banked
  9441  00233A  6F83               	movwf	___ftmul@f2& (0+255),b
  9442  00233C  0E00               	movlw	0
  9443  00233E  0100               	movlb	0	; () banked
  9444  002340  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  9445  002342  0E3F               	movlw	63
  9446  002344  0100               	movlb	0	; () banked
  9447  002346  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  9448  002348  EC65  F014         	call	___ftmul	;wreg free
  9449  00234C  C080  F08F         	movff	?___ftmul,?_fround
  9450  002350  C081  F090         	movff	?___ftmul+1,?_fround+1
  9451  002354  C082  F091         	movff	?___ftmul+2,?_fround+2
  9452  002358  0012               	return	
  9453  00235A                     l6409:
  9454                           
  9455                           ;doprnt.c: 415: else if(prec > 10)
  9456  00235A  0E0A               	movlw	10
  9457  00235C  0100               	movlb	0	; () banked
  9458  00235E  6598               	cpfsgt	fround@prec& (0+255),b
  9459  002360  D060               	goto	l6417
  9460                           
  9461                           ; BSR set to: 0
  9462                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9463  002362  0E00               	movlw	0
  9464  002364  6E36               	movwf	___wmul@multiplicand+1,c
  9465  002366  0E03               	movlw	3
  9466  002368  6E35               	movwf	___wmul@multiplicand,c
  9467  00236A  0E00               	movlw	0
  9468  00236C  6E28               	movwf	___awmod@divisor+1,c
  9469  00236E  0E0A               	movlw	10
  9470  002370  6E27               	movwf	___awmod@divisor,c
  9471  002372  C098  F025         	movff	fround@prec,___awmod@dividend
  9472  002376  6A26               	clrf	___awmod@dividend+1,c
  9473  002378  EC24  F01F         	call	___awmod	;wreg free
  9474  00237C  C025  F033         	movff	?___awmod,___wmul@multiplier
  9475  002380  C026  F034         	movff	?___awmod+1,___wmul@multiplier+1
  9476  002384  EC58  F022         	call	___wmul	;wreg free
  9477  002388  0EB3               	movlw	low __npowers_
  9478  00238A  2433               	addwf	?___wmul,w,c
  9479  00238C  6EF6               	movwf	tblptrl,c
  9480  00238E  0EFD               	movlw	high __npowers_
  9481  002390  2034               	addwfc	?___wmul+1,w,c
  9482  002392  6EF7               	movwf	tblptrh,c
  9483  002394                     	if	0	;There are less than 3 active tblptr bytes
  9484  002394                     	endif
  9485  002394  0009               	tblrd		*+
  9486  002396  CFF5 F083          	movff	tablat,___ftmul@f2
  9487  00239A  0009               	tblrd		*+
  9488  00239C  CFF5 F084          	movff	tablat,___ftmul@f2+1
  9489  0023A0  000A               	tblrd		*-
  9490  0023A2  CFF5 F085          	movff	tablat,___ftmul@f2+2
  9491  0023A6  0E00               	movlw	0
  9492  0023A8  6E2E               	movwf	___awdiv@divisor+1,c
  9493  0023AA  0E0A               	movlw	10
  9494  0023AC  6E2D               	movwf	___awdiv@divisor,c
  9495  0023AE  C098  F02B         	movff	fround@prec,___awdiv@dividend
  9496  0023B2  6A2C               	clrf	___awdiv@dividend+1,c
  9497  0023B4  EC65  F01E         	call	___awdiv	;wreg free
  9498  0023B8  0E09               	movlw	9
  9499  0023BA  242B               	addwf	?___awdiv,w,c
  9500  0023BC  6E33               	movwf	___wmul@multiplier,c
  9501  0023BE  0E00               	movlw	0
  9502  0023C0  202C               	addwfc	?___awdiv+1,w,c
  9503  0023C2  6E34               	movwf	___wmul@multiplier+1,c
  9504  0023C4  0E00               	movlw	0
  9505  0023C6  6E36               	movwf	___wmul@multiplicand+1,c
  9506  0023C8  0E03               	movlw	3
  9507  0023CA  6E35               	movwf	___wmul@multiplicand,c
  9508  0023CC  EC58  F022         	call	___wmul	;wreg free
  9509  0023D0  0EB3               	movlw	low __npowers_
  9510  0023D2  2433               	addwf	?___wmul,w,c
  9511  0023D4  6EF6               	movwf	tblptrl,c
  9512  0023D6  0EFD               	movlw	high __npowers_
  9513  0023D8  2034               	addwfc	?___wmul+1,w,c
  9514  0023DA  6EF7               	movwf	tblptrh,c
  9515  0023DC                     	if	0	;There are less than 3 active tblptr bytes
  9516  0023DC                     	endif
  9517  0023DC  0009               	tblrd		*+
  9518  0023DE  CFF5 F080          	movff	tablat,___ftmul@f1
  9519  0023E2  0009               	tblrd		*+
  9520  0023E4  CFF5 F081          	movff	tablat,___ftmul@f1+1
  9521  0023E8  000A               	tblrd		*-
  9522  0023EA  CFF5 F082          	movff	tablat,___ftmul@f1+2
  9523  0023EE  EC65  F014         	call	___ftmul	;wreg free
  9524  0023F2  C080  F095         	movff	?___ftmul,_fround$1421
  9525  0023F6  C081  F096         	movff	?___ftmul+1,_fround$1421+1
  9526  0023FA  C082  F097         	movff	?___ftmul+2,_fround$1421+2
  9527                           
  9528                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9529  0023FE  C095  F080         	movff	_fround$1421,___ftmul@f1
  9530  002402  C096  F081         	movff	_fround$1421+1,___ftmul@f1+1
  9531  002406  C097  F082         	movff	_fround$1421+2,___ftmul@f1+2
  9532  00240A  0E00               	movlw	0
  9533  00240C  0100               	movlb	0	; () banked
  9534  00240E  6F83               	movwf	___ftmul@f2& (0+255),b
  9535  002410  0E00               	movlw	0
  9536  002412  0100               	movlb	0	; () banked
  9537  002414  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  9538  002416  0E3F               	movlw	63
  9539  002418  0100               	movlb	0	; () banked
  9540  00241A  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  9541  00241C  EC65  F014         	call	___ftmul	;wreg free
  9542  002420  D795               	goto	L8
  9543  002422                     l6417:
  9544                           
  9545                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  9546  002422  0100               	movlb	0	; () banked
  9547  002424  5198               	movf	fround@prec& (0+255),w,b
  9548  002426  0D03               	mullw	3
  9549  002428  0EB3               	movlw	low __npowers_
  9550  00242A  24F3               	addwf	prodl,w,c
  9551  00242C  6EF6               	movwf	tblptrl,c
  9552  00242E  0EFD               	movlw	high __npowers_
  9553  002430  20F4               	addwfc	prodh,w,c
  9554  002432  6EF7               	movwf	tblptrh,c
  9555  002434                     	if	0	;There are less than 3 active tblptr bytes
  9556  002434                     	endif
  9557  002434  0009               	tblrd		*+
  9558  002436  CFF5 F080          	movff	tablat,___ftmul@f1
  9559  00243A  0009               	tblrd		*+
  9560  00243C  CFF5 F081          	movff	tablat,___ftmul@f1+1
  9561  002440  000A               	tblrd		*-
  9562  002442  CFF5 F082          	movff	tablat,___ftmul@f1+2
  9563  002446  0E00               	movlw	0
  9564  002448  0100               	movlb	0	; () banked
  9565  00244A  6F83               	movwf	___ftmul@f2& (0+255),b
  9566  00244C  0E00               	movlw	0
  9567  00244E  0100               	movlb	0	; () banked
  9568  002450  6F84               	movwf	(___ftmul@f2+1)& (0+255),b
  9569  002452  0E3F               	movlw	63
  9570  002454  0100               	movlb	0	; () banked
  9571  002456  6F85               	movwf	(___ftmul@f2+2)& (0+255),b
  9572  002458  EC65  F014         	call	___ftmul	;wreg free
  9573  00245C  C080  F08F         	movff	?___ftmul,?_fround
  9574  002460  C081  F090         	movff	?___ftmul+1,?_fround+1
  9575  002464  C082  F091         	movff	?___ftmul+2,?_fround+2
  9576  002468  0012               	return	
  9577  00246A                     __end_of_fround:
  9578                           	opt stack 0
  9579                           tblptru	equ	0xFF8
  9580                           tblptrh	equ	0xFF7
  9581                           tblptrl	equ	0xFF6
  9582                           tablat	equ	0xFF5
  9583                           prodh	equ	0xFF4
  9584                           prodl	equ	0xFF3
  9585                           postinc0	equ	0xFEE
  9586                           wreg	equ	0xFE8
  9587                           postdec1	equ	0xFE5
  9588                           fsr1l	equ	0xFE1
  9589                           indf2	equ	0xFDF
  9590                           postinc2	equ	0xFDE
  9591                           postdec2	equ	0xFDD
  9592                           fsr2h	equ	0xFDA
  9593                           fsr2l	equ	0xFD9
  9594                           status	equ	0xFD8
  9595                           
  9596 ;; *************** function ___awmod *****************
  9597 ;; Defined at:
  9598 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9599 ;; Parameters:    Size  Location     Type
  9600 ;;  dividend        2   36[COMRAM] int 
  9601 ;;  divisor         2   38[COMRAM] int 
  9602 ;; Auto vars:     Size  Location     Type
  9603 ;;  sign            1   41[COMRAM] unsigned char 
  9604 ;;  counter         1   40[COMRAM] unsigned char 
  9605 ;; Return value:  Size  Location     Type
  9606 ;;                  2   36[COMRAM] int 
  9607 ;; Registers used:
  9608 ;;		wreg, status,2, status,0
  9609 ;; Tracked objects:
  9610 ;;		On entry : 0/0
  9611 ;;		On exit  : 0/0
  9612 ;;		Unchanged: 0/0
  9613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9614 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9615 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9617 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9618 ;;Total ram usage:        6 bytes
  9619 ;; Hardware stack levels used:    1
  9620 ;; Hardware stack levels required when called:    3
  9621 ;; This function calls:
  9622 ;;		Nothing
  9623 ;; This function is called by:
  9624 ;;		_fround
  9625 ;;		_scale
  9626 ;; This function uses a non-reentrant model
  9627 ;;
  9628                           
  9629                           	psect	text22
  9630  003E48                     __ptext22:
  9631                           	opt stack 0
  9632  003E48                     ___awmod:
  9633                           	opt stack 24
  9634                           
  9635                           ;incstack = 0
  9636  003E48  0E00               	movlw	0
  9637  003E4A  6E2A               	movwf	___awmod@sign,c
  9638  003E4C  AE26               	btfss	___awmod@dividend+1,7,c
  9639  003E4E  D006               	goto	l6307
  9640  003E50  6C25               	negf	___awmod@dividend,c
  9641  003E52  1E26               	comf	___awmod@dividend+1,f,c
  9642  003E54  B0D8               	btfsc	status,0,c
  9643  003E56  2A26               	incf	___awmod@dividend+1,f,c
  9644  003E58  0E01               	movlw	1
  9645  003E5A  6E2A               	movwf	___awmod@sign,c
  9646  003E5C                     l6307:
  9647  003E5C  AE28               	btfss	___awmod@divisor+1,7,c
  9648  003E5E  D004               	goto	l6311
  9649  003E60  6C27               	negf	___awmod@divisor,c
  9650  003E62  1E28               	comf	___awmod@divisor+1,f,c
  9651  003E64  B0D8               	btfsc	status,0,c
  9652  003E66  2A28               	incf	___awmod@divisor+1,f,c
  9653  003E68                     l6311:
  9654  003E68  5027               	movf	___awmod@divisor,w,c
  9655  003E6A  1028               	iorwf	___awmod@divisor+1,w,c
  9656  003E6C  B4D8               	btfsc	status,2,c
  9657  003E6E  D018               	goto	l6327
  9658  003E70  0E01               	movlw	1
  9659  003E72  6E29               	movwf	___awmod@counter,c
  9660  003E74  D004               	goto	l6317
  9661  003E76                     l6315:
  9662  003E76  90D8               	bcf	status,0,c
  9663  003E78  3627               	rlcf	___awmod@divisor,f,c
  9664  003E7A  3628               	rlcf	___awmod@divisor+1,f,c
  9665  003E7C  2A29               	incf	___awmod@counter,f,c
  9666  003E7E                     l6317:
  9667  003E7E  AE28               	btfss	___awmod@divisor+1,7,c
  9668  003E80  D7FA               	goto	l6315
  9669  003E82                     l6319:
  9670  003E82  5027               	movf	___awmod@divisor,w,c
  9671  003E84  5C25               	subwf	___awmod@dividend,w,c
  9672  003E86  5028               	movf	___awmod@divisor+1,w,c
  9673  003E88  5826               	subwfb	___awmod@dividend+1,w,c
  9674  003E8A  A0D8               	btfss	status,0,c
  9675  003E8C  D004               	goto	l6323
  9676  003E8E  5027               	movf	___awmod@divisor,w,c
  9677  003E90  5E25               	subwf	___awmod@dividend,f,c
  9678  003E92  5028               	movf	___awmod@divisor+1,w,c
  9679  003E94  5A26               	subwfb	___awmod@dividend+1,f,c
  9680  003E96                     l6323:
  9681  003E96  90D8               	bcf	status,0,c
  9682  003E98  3228               	rrcf	___awmod@divisor+1,f,c
  9683  003E9A  3227               	rrcf	___awmod@divisor,f,c
  9684  003E9C  2E29               	decfsz	___awmod@counter,f,c
  9685  003E9E  D7F1               	goto	l6319
  9686  003EA0                     l6327:
  9687  003EA0  502A               	movf	___awmod@sign,w,c
  9688  003EA2  B4D8               	btfsc	status,2,c
  9689  003EA4  D004               	goto	l6331
  9690  003EA6  6C25               	negf	___awmod@dividend,c
  9691  003EA8  1E26               	comf	___awmod@dividend+1,f,c
  9692  003EAA  B0D8               	btfsc	status,0,c
  9693  003EAC  2A26               	incf	___awmod@dividend+1,f,c
  9694  003EAE                     l6331:
  9695  003EAE  C025  F025         	movff	___awmod@dividend,?___awmod
  9696  003EB2  C026  F026         	movff	___awmod@dividend+1,?___awmod+1
  9697  003EB6  0012               	return	
  9698  003EB8                     __end_of___awmod:
  9699                           	opt stack 0
  9700                           tblptru	equ	0xFF8
  9701                           tblptrh	equ	0xFF7
  9702                           tblptrl	equ	0xFF6
  9703                           tablat	equ	0xFF5
  9704                           prodh	equ	0xFF4
  9705                           prodl	equ	0xFF3
  9706                           postinc0	equ	0xFEE
  9707                           wreg	equ	0xFE8
  9708                           postdec1	equ	0xFE5
  9709                           fsr1l	equ	0xFE1
  9710                           indf2	equ	0xFDF
  9711                           postinc2	equ	0xFDE
  9712                           postdec2	equ	0xFDD
  9713                           fsr2h	equ	0xFDA
  9714                           fsr2l	equ	0xFD9
  9715                           status	equ	0xFD8
  9716                           
  9717 ;; *************** function ___awdiv *****************
  9718 ;; Defined at:
  9719 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9720 ;; Parameters:    Size  Location     Type
  9721 ;;  dividend        2   42[COMRAM] int 
  9722 ;;  divisor         2   44[COMRAM] int 
  9723 ;; Auto vars:     Size  Location     Type
  9724 ;;  quotient        2   48[COMRAM] int 
  9725 ;;  sign            1   47[COMRAM] unsigned char 
  9726 ;;  counter         1   46[COMRAM] unsigned char 
  9727 ;; Return value:  Size  Location     Type
  9728 ;;                  2   42[COMRAM] int 
  9729 ;; Registers used:
  9730 ;;		wreg, status,2, status,0
  9731 ;; Tracked objects:
  9732 ;;		On entry : 0/0
  9733 ;;		On exit  : 0/0
  9734 ;;		Unchanged: 0/0
  9735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9736 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9737 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9739 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9740 ;;Total ram usage:        8 bytes
  9741 ;; Hardware stack levels used:    1
  9742 ;; Hardware stack levels required when called:    3
  9743 ;; This function calls:
  9744 ;;		Nothing
  9745 ;; This function is called by:
  9746 ;;		_fround
  9747 ;;		_scale
  9748 ;;		_printf
  9749 ;; This function uses a non-reentrant model
  9750 ;;
  9751                           
  9752                           	psect	text23
  9753  003CCA                     __ptext23:
  9754                           	opt stack 0
  9755  003CCA                     ___awdiv:
  9756                           	opt stack 24
  9757                           
  9758                           ;incstack = 0
  9759  003CCA  0E00               	movlw	0
  9760  003CCC  6E30               	movwf	___awdiv@sign,c
  9761  003CCE  AE2E               	btfss	___awdiv@divisor+1,7,c
  9762  003CD0  D006               	goto	l6263
  9763  003CD2  6C2D               	negf	___awdiv@divisor,c
  9764  003CD4  1E2E               	comf	___awdiv@divisor+1,f,c
  9765  003CD6  B0D8               	btfsc	status,0,c
  9766  003CD8  2A2E               	incf	___awdiv@divisor+1,f,c
  9767  003CDA  0E01               	movlw	1
  9768  003CDC  6E30               	movwf	___awdiv@sign,c
  9769  003CDE                     l6263:
  9770  003CDE  AE2C               	btfss	___awdiv@dividend+1,7,c
  9771  003CE0  D006               	goto	l6269
  9772  003CE2  6C2B               	negf	___awdiv@dividend,c
  9773  003CE4  1E2C               	comf	___awdiv@dividend+1,f,c
  9774  003CE6  B0D8               	btfsc	status,0,c
  9775  003CE8  2A2C               	incf	___awdiv@dividend+1,f,c
  9776  003CEA  0E01               	movlw	1
  9777  003CEC  1A30               	xorwf	___awdiv@sign,f,c
  9778  003CEE                     l6269:
  9779  003CEE  0E00               	movlw	0
  9780  003CF0  6E32               	movwf	___awdiv@quotient+1,c
  9781  003CF2  0E00               	movlw	0
  9782  003CF4  6E31               	movwf	___awdiv@quotient,c
  9783  003CF6  502D               	movf	___awdiv@divisor,w,c
  9784  003CF8  102E               	iorwf	___awdiv@divisor+1,w,c
  9785  003CFA  B4D8               	btfsc	status,2,c
  9786  003CFC  D01C               	goto	l6291
  9787  003CFE  0E01               	movlw	1
  9788  003D00  6E2F               	movwf	___awdiv@counter,c
  9789  003D02  D004               	goto	l6277
  9790  003D04                     l6275:
  9791  003D04  90D8               	bcf	status,0,c
  9792  003D06  362D               	rlcf	___awdiv@divisor,f,c
  9793  003D08  362E               	rlcf	___awdiv@divisor+1,f,c
  9794  003D0A  2A2F               	incf	___awdiv@counter,f,c
  9795  003D0C                     l6277:
  9796  003D0C  AE2E               	btfss	___awdiv@divisor+1,7,c
  9797  003D0E  D7FA               	goto	l6275
  9798  003D10                     l6279:
  9799  003D10  90D8               	bcf	status,0,c
  9800  003D12  3631               	rlcf	___awdiv@quotient,f,c
  9801  003D14  3632               	rlcf	___awdiv@quotient+1,f,c
  9802  003D16  502D               	movf	___awdiv@divisor,w,c
  9803  003D18  5C2B               	subwf	___awdiv@dividend,w,c
  9804  003D1A  502E               	movf	___awdiv@divisor+1,w,c
  9805  003D1C  582C               	subwfb	___awdiv@dividend+1,w,c
  9806  003D1E  A0D8               	btfss	status,0,c
  9807  003D20  D005               	goto	l6287
  9808  003D22  502D               	movf	___awdiv@divisor,w,c
  9809  003D24  5E2B               	subwf	___awdiv@dividend,f,c
  9810  003D26  502E               	movf	___awdiv@divisor+1,w,c
  9811  003D28  5A2C               	subwfb	___awdiv@dividend+1,f,c
  9812  003D2A  8031               	bsf	___awdiv@quotient,0,c
  9813  003D2C                     l6287:
  9814  003D2C  90D8               	bcf	status,0,c
  9815  003D2E  322E               	rrcf	___awdiv@divisor+1,f,c
  9816  003D30  322D               	rrcf	___awdiv@divisor,f,c
  9817  003D32  2E2F               	decfsz	___awdiv@counter,f,c
  9818  003D34  D7ED               	goto	l6279
  9819  003D36                     l6291:
  9820  003D36  5030               	movf	___awdiv@sign,w,c
  9821  003D38  B4D8               	btfsc	status,2,c
  9822  003D3A  D004               	goto	l6295
  9823  003D3C  6C31               	negf	___awdiv@quotient,c
  9824  003D3E  1E32               	comf	___awdiv@quotient+1,f,c
  9825  003D40  B0D8               	btfsc	status,0,c
  9826  003D42  2A32               	incf	___awdiv@quotient+1,f,c
  9827  003D44                     l6295:
  9828  003D44  C031  F02B         	movff	___awdiv@quotient,?___awdiv
  9829  003D48  C032  F02C         	movff	___awdiv@quotient+1,?___awdiv+1
  9830  003D4C  0012               	return	
  9831  003D4E                     __end_of___awdiv:
  9832                           	opt stack 0
  9833                           tblptru	equ	0xFF8
  9834                           tblptrh	equ	0xFF7
  9835                           tblptrl	equ	0xFF6
  9836                           tablat	equ	0xFF5
  9837                           prodh	equ	0xFF4
  9838                           prodl	equ	0xFF3
  9839                           postinc0	equ	0xFEE
  9840                           wreg	equ	0xFE8
  9841                           postdec1	equ	0xFE5
  9842                           fsr1l	equ	0xFE1
  9843                           indf2	equ	0xFDF
  9844                           postinc2	equ	0xFDE
  9845                           postdec2	equ	0xFDD
  9846                           fsr2h	equ	0xFDA
  9847                           fsr2l	equ	0xFD9
  9848                           status	equ	0xFD8
  9849                           
  9850 ;; *************** function __tdiv_to_l_ *****************
  9851 ;; Defined at:
  9852 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  9853 ;; Parameters:    Size  Location     Type
  9854 ;;  f1              3   36[COMRAM] float 
  9855 ;;  f2              3   39[COMRAM] float 
  9856 ;; Auto vars:     Size  Location     Type
  9857 ;;  quot            4   45[COMRAM] unsigned long 
  9858 ;;  exp1            1   50[COMRAM] unsigned char 
  9859 ;;  cntr            1   49[COMRAM] unsigned char 
  9860 ;; Return value:  Size  Location     Type
  9861 ;;                  4   36[COMRAM] unsigned long 
  9862 ;; Registers used:
  9863 ;;		wreg, status,2, status,0
  9864 ;; Tracked objects:
  9865 ;;		On entry : 0/0
  9866 ;;		On exit  : 0/0
  9867 ;;		Unchanged: 0/0
  9868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9869 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9870 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9871 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9872 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9873 ;;Total ram usage:       15 bytes
  9874 ;; Hardware stack levels used:    1
  9875 ;; Hardware stack levels required when called:    3
  9876 ;; This function calls:
  9877 ;;		Nothing
  9878 ;; This function is called by:
  9879 ;;		_printf
  9880 ;; This function uses a non-reentrant model
  9881 ;;
  9882                           
  9883                           	psect	text24
  9884  002CB8                     __ptext24:
  9885                           	opt stack 0
  9886  002CB8                     __tdiv_to_l_:
  9887                           	opt stack 25
  9888                           
  9889                           ;incstack = 0
  9890  002CB8  C027  F02B         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  9891  002CBC  6A2C               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  9892  002CBE  6A2D               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  9893  002CC0  3426               	rlcf	__tdiv_to_l_@f1+1,w,c
  9894  002CC2  362B               	rlcf	??__tdiv_to_l_& (0+255),f,c
  9895  002CC4  E301               	bnc	u6431
  9896  002CC6  802C               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  9897  002CC8                     u6431:
  9898  002CC8  502B               	movf	??__tdiv_to_l_,w,c
  9899  002CCA  6E33               	movwf	__tdiv_to_l_@exp1,c
  9900  002CCC  5033               	movf	__tdiv_to_l_@exp1,w,c
  9901  002CCE  A4D8               	btfss	status,2,c
  9902  002CD0  D009               	goto	l6477
  9903  002CD2  0E00               	movlw	0
  9904  002CD4  6E25               	movwf	?__tdiv_to_l_,c
  9905  002CD6  0E00               	movlw	0
  9906  002CD8  6E26               	movwf	?__tdiv_to_l_+1,c
  9907  002CDA  0E00               	movlw	0
  9908  002CDC  6E27               	movwf	?__tdiv_to_l_+2,c
  9909  002CDE  0E00               	movlw	0
  9910  002CE0  6E28               	movwf	?__tdiv_to_l_+3,c
  9911  002CE2  0012               	return	
  9912  002CE4                     l6477:
  9913  002CE4  C02A  F02B         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  9914  002CE8  6A2C               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  9915  002CEA  6A2D               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  9916  002CEC  3429               	rlcf	__tdiv_to_l_@f2+1,w,c
  9917  002CEE  362B               	rlcf	??__tdiv_to_l_& (0+255),f,c
  9918  002CF0  E301               	bnc	u6451
  9919  002CF2  802C               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  9920  002CF4                     u6451:
  9921  002CF4  502B               	movf	??__tdiv_to_l_,w,c
  9922  002CF6  6E32               	movwf	__tdiv_to_l_@cntr,c
  9923  002CF8  5032               	movf	__tdiv_to_l_@cntr,w,c
  9924  002CFA  A4D8               	btfss	status,2,c
  9925  002CFC  D009               	goto	l6483
  9926  002CFE  0E00               	movlw	0
  9927  002D00  6E25               	movwf	?__tdiv_to_l_,c
  9928  002D02  0E00               	movlw	0
  9929  002D04  6E26               	movwf	?__tdiv_to_l_+1,c
  9930  002D06  0E00               	movlw	0
  9931  002D08  6E27               	movwf	?__tdiv_to_l_+2,c
  9932  002D0A  0E00               	movlw	0
  9933  002D0C  6E28               	movwf	?__tdiv_to_l_+3,c
  9934  002D0E  0012               	return	
  9935  002D10                     l6483:
  9936  002D10  8E26               	bsf	__tdiv_to_l_@f1+1,7,c
  9937  002D12  0EFF               	movlw	255
  9938  002D14  1625               	andwf	__tdiv_to_l_@f1,f,c
  9939  002D16  0EFF               	movlw	255
  9940  002D18  1626               	andwf	__tdiv_to_l_@f1+1,f,c
  9941  002D1A  0E00               	movlw	0
  9942  002D1C  1627               	andwf	__tdiv_to_l_@f1+2,f,c
  9943  002D1E  8E29               	bsf	__tdiv_to_l_@f2+1,7,c
  9944  002D20  0EFF               	movlw	255
  9945  002D22  1628               	andwf	__tdiv_to_l_@f2,f,c
  9946  002D24  0EFF               	movlw	255
  9947  002D26  1629               	andwf	__tdiv_to_l_@f2+1,f,c
  9948  002D28  0E00               	movlw	0
  9949  002D2A  162A               	andwf	__tdiv_to_l_@f2+2,f,c
  9950  002D2C  0E00               	movlw	0
  9951  002D2E  6E2E               	movwf	__tdiv_to_l_@quot,c
  9952  002D30  0E00               	movlw	0
  9953  002D32  6E2F               	movwf	__tdiv_to_l_@quot+1,c
  9954  002D34  0E00               	movlw	0
  9955  002D36  6E30               	movwf	__tdiv_to_l_@quot+2,c
  9956  002D38  0E00               	movlw	0
  9957  002D3A  6E31               	movwf	__tdiv_to_l_@quot+3,c
  9958  002D3C  0E7F               	movlw	127
  9959  002D3E  5E33               	subwf	__tdiv_to_l_@exp1,f,c
  9960  002D40  5032               	movf	__tdiv_to_l_@cntr,w,c
  9961  002D42  0F98               	addlw	152
  9962  002D44  5E33               	subwf	__tdiv_to_l_@exp1,f,c
  9963  002D46  0E18               	movlw	24
  9964  002D48  6E32               	movwf	__tdiv_to_l_@cntr,c
  9965  002D4A                     l1193:
  9966  002D4A  90D8               	bcf	status,0,c
  9967  002D4C  362E               	rlcf	__tdiv_to_l_@quot,f,c
  9968  002D4E  362F               	rlcf	__tdiv_to_l_@quot+1,f,c
  9969  002D50  3630               	rlcf	__tdiv_to_l_@quot+2,f,c
  9970  002D52  3631               	rlcf	__tdiv_to_l_@quot+3,f,c
  9971  002D54  5028               	movf	__tdiv_to_l_@f2,w,c
  9972  002D56  5C25               	subwf	__tdiv_to_l_@f1,w,c
  9973  002D58  5029               	movf	__tdiv_to_l_@f2+1,w,c
  9974  002D5A  5826               	subwfb	__tdiv_to_l_@f1+1,w,c
  9975  002D5C  502A               	movf	__tdiv_to_l_@f2+2,w,c
  9976  002D5E  5827               	subwfb	__tdiv_to_l_@f1+2,w,c
  9977  002D60  A0D8               	btfss	status,0,c
  9978  002D62  D007               	goto	l1194
  9979  002D64  5028               	movf	__tdiv_to_l_@f2,w,c
  9980  002D66  5E25               	subwf	__tdiv_to_l_@f1,f,c
  9981  002D68  5029               	movf	__tdiv_to_l_@f2+1,w,c
  9982  002D6A  5A26               	subwfb	__tdiv_to_l_@f1+1,f,c
  9983  002D6C  502A               	movf	__tdiv_to_l_@f2+2,w,c
  9984  002D6E  5A27               	subwfb	__tdiv_to_l_@f1+2,f,c
  9985  002D70  802E               	bsf	__tdiv_to_l_@quot,0,c
  9986  002D72                     l1194:
  9987  002D72  90D8               	bcf	status,0,c
  9988  002D74  3625               	rlcf	__tdiv_to_l_@f1,f,c
  9989  002D76  3626               	rlcf	__tdiv_to_l_@f1+1,f,c
  9990  002D78  3627               	rlcf	__tdiv_to_l_@f1+2,f,c
  9991  002D7A  2E32               	decfsz	__tdiv_to_l_@cntr,f,c
  9992  002D7C  D7E6               	goto	l1193
  9993  002D7E  AE33               	btfss	__tdiv_to_l_@exp1,7,c
  9994  002D80  D016               	goto	l6517
  9995  002D82  5033               	movf	__tdiv_to_l_@exp1,w,c
  9996  002D84  0A80               	xorlw	128
  9997  002D86  0F97               	addlw	151
  9998  002D88  B0D8               	btfsc	status,0,c
  9999  002D8A  D009               	goto	l6513
 10000  002D8C  0E00               	movlw	0
 10001  002D8E  6E25               	movwf	?__tdiv_to_l_,c
 10002  002D90  0E00               	movlw	0
 10003  002D92  6E26               	movwf	?__tdiv_to_l_+1,c
 10004  002D94  0E00               	movlw	0
 10005  002D96  6E27               	movwf	?__tdiv_to_l_+2,c
 10006  002D98  0E00               	movlw	0
 10007  002D9A  6E28               	movwf	?__tdiv_to_l_+3,c
 10008  002D9C  0012               	return	
 10009  002D9E                     l6513:
 10010  002D9E  90D8               	bcf	status,0,c
 10011  002DA0  3231               	rrcf	__tdiv_to_l_@quot+3,f,c
 10012  002DA2  3230               	rrcf	__tdiv_to_l_@quot+2,f,c
 10013  002DA4  322F               	rrcf	__tdiv_to_l_@quot+1,f,c
 10014  002DA6  322E               	rrcf	__tdiv_to_l_@quot,f,c
 10015  002DA8  3E33               	incfsz	__tdiv_to_l_@exp1,f,c
 10016  002DAA  D7F9               	goto	l6513
 10017  002DAC  D015               	goto	l1200
 10018  002DAE                     l6517:
 10019  002DAE  0E17               	movlw	23
 10020  002DB0  6433               	cpfsgt	__tdiv_to_l_@exp1,c
 10021  002DB2  D00F               	goto	l6525
 10022  002DB4  0E00               	movlw	0
 10023  002DB6  6E25               	movwf	?__tdiv_to_l_,c
 10024  002DB8  0E00               	movlw	0
 10025  002DBA  6E26               	movwf	?__tdiv_to_l_+1,c
 10026  002DBC  0E00               	movlw	0
 10027  002DBE  6E27               	movwf	?__tdiv_to_l_+2,c
 10028  002DC0  0E00               	movlw	0
 10029  002DC2  6E28               	movwf	?__tdiv_to_l_+3,c
 10030  002DC4  0012               	return	
 10031  002DC6                     l6523:
 10032  002DC6  90D8               	bcf	status,0,c
 10033  002DC8  362E               	rlcf	__tdiv_to_l_@quot,f,c
 10034  002DCA  362F               	rlcf	__tdiv_to_l_@quot+1,f,c
 10035  002DCC  3630               	rlcf	__tdiv_to_l_@quot+2,f,c
 10036  002DCE  3631               	rlcf	__tdiv_to_l_@quot+3,f,c
 10037  002DD0  0633               	decf	__tdiv_to_l_@exp1,f,c
 10038  002DD2                     l6525:
 10039  002DD2  5033               	movf	__tdiv_to_l_@exp1,w,c
 10040  002DD4  A4D8               	btfss	status,2,c
 10041  002DD6  D7F7               	goto	l6523
 10042  002DD8                     l1200:
 10043  002DD8  C02E  F025         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 10044  002DDC  C02F  F026         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 10045  002DE0  C030  F027         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 10046  002DE4  C031  F028         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 10047  002DE8  0012               	return		;funcret
 10048  002DEA                     __end_of__tdiv_to_l_:
 10049                           	opt stack 0
 10050                           tblptru	equ	0xFF8
 10051                           tblptrh	equ	0xFF7
 10052                           tblptrl	equ	0xFF6
 10053                           tablat	equ	0xFF5
 10054                           prodh	equ	0xFF4
 10055                           prodl	equ	0xFF3
 10056                           postinc0	equ	0xFEE
 10057                           wreg	equ	0xFE8
 10058                           postdec1	equ	0xFE5
 10059                           fsr1l	equ	0xFE1
 10060                           indf2	equ	0xFDF
 10061                           postinc2	equ	0xFDE
 10062                           postdec2	equ	0xFDD
 10063                           fsr2h	equ	0xFDA
 10064                           fsr2l	equ	0xFD9
 10065                           status	equ	0xFD8
 10066                           
 10067 ;; *************** function __div_to_l_ *****************
 10068 ;; Defined at:
 10069 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
 10070 ;; Parameters:    Size  Location     Type
 10071 ;;  f1              3   36[COMRAM] unsigned long 
 10072 ;;  f2              3   39[COMRAM] unsigned long 
 10073 ;; Auto vars:     Size  Location     Type
 10074 ;;  quot            4   42[COMRAM] unsigned long 
 10075 ;;  exp1            1   47[COMRAM] unsigned char 
 10076 ;;  cntr            1   46[COMRAM] unsigned char 
 10077 ;; Return value:  Size  Location     Type
 10078 ;;                  4   36[COMRAM] unsigned long 
 10079 ;; Registers used:
 10080 ;;		wreg, status,2, status,0
 10081 ;; Tracked objects:
 10082 ;;		On entry : 0/0
 10083 ;;		On exit  : 0/0
 10084 ;;		Unchanged: 0/0
 10085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10086 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10087 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10089 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10090 ;;Total ram usage:       12 bytes
 10091 ;; Hardware stack levels used:    1
 10092 ;; Hardware stack levels required when called:    3
 10093 ;; This function calls:
 10094 ;;		Nothing
 10095 ;; This function is called by:
 10096 ;;		_printf
 10097 ;; This function uses a non-reentrant model
 10098 ;;
 10099                           
 10100                           	psect	text25
 10101  002DEA                     __ptext25:
 10102                           	opt stack 0
 10103  002DEA                     __div_to_l_:
 10104                           	opt stack 25
 10105                           
 10106                           ;incstack = 0
 10107  002DEA  3427               	rlcf	__div_to_l_@f1+2,w,c
 10108  002DEC  3428               	rlcf	__div_to_l_@f1+3,w,c
 10109  002DEE  6E30               	movwf	__div_to_l_@exp1,c
 10110  002DF0  5030               	movf	__div_to_l_@exp1,w,c
 10111  002DF2  A4D8               	btfss	status,2,c
 10112  002DF4  D009               	goto	l6533
 10113  002DF6  0E00               	movlw	0
 10114  002DF8  6E25               	movwf	?__div_to_l_,c
 10115  002DFA  0E00               	movlw	0
 10116  002DFC  6E26               	movwf	?__div_to_l_+1,c
 10117  002DFE  0E00               	movlw	0
 10118  002E00  6E27               	movwf	?__div_to_l_+2,c
 10119  002E02  0E00               	movlw	0
 10120  002E04  6E28               	movwf	?__div_to_l_+3,c
 10121  002E06  0012               	return	
 10122  002E08                     l6533:
 10123  002E08  342A               	rlcf	__div_to_l_@f2+2,w,c
 10124  002E0A  342B               	rlcf	__div_to_l_@f2+3,w,c
 10125  002E0C  6E2F               	movwf	__div_to_l_@cntr,c
 10126  002E0E  502F               	movf	__div_to_l_@cntr,w,c
 10127  002E10  A4D8               	btfss	status,2,c
 10128  002E12  D009               	goto	l6539
 10129  002E14  0E00               	movlw	0
 10130  002E16  6E25               	movwf	?__div_to_l_,c
 10131  002E18  0E00               	movlw	0
 10132  002E1A  6E26               	movwf	?__div_to_l_+1,c
 10133  002E1C  0E00               	movlw	0
 10134  002E1E  6E27               	movwf	?__div_to_l_+2,c
 10135  002E20  0E00               	movlw	0
 10136  002E22  6E28               	movwf	?__div_to_l_+3,c
 10137  002E24  0012               	return	
 10138  002E26                     l6539:
 10139  002E26  8E27               	bsf	__div_to_l_@f1+2,7,c
 10140  002E28  0EFF               	movlw	255
 10141  002E2A  1625               	andwf	__div_to_l_@f1,f,c
 10142  002E2C  0EFF               	movlw	255
 10143  002E2E  1626               	andwf	__div_to_l_@f1+1,f,c
 10144  002E30  0EFF               	movlw	255
 10145  002E32  1627               	andwf	__div_to_l_@f1+2,f,c
 10146  002E34  0E00               	movlw	0
 10147  002E36  1628               	andwf	__div_to_l_@f1+3,f,c
 10148  002E38  8E2A               	bsf	__div_to_l_@f2+2,7,c
 10149  002E3A  0EFF               	movlw	255
 10150  002E3C  1628               	andwf	__div_to_l_@f2,f,c
 10151  002E3E  0EFF               	movlw	255
 10152  002E40  1629               	andwf	__div_to_l_@f2+1,f,c
 10153  002E42  0EFF               	movlw	255
 10154  002E44  162A               	andwf	__div_to_l_@f2+2,f,c
 10155  002E46  0E00               	movlw	0
 10156  002E48  162B               	andwf	__div_to_l_@f2+3,f,c
 10157  002E4A  0E00               	movlw	0
 10158  002E4C  6E2B               	movwf	__div_to_l_@quot,c
 10159  002E4E  0E00               	movlw	0
 10160  002E50  6E2C               	movwf	__div_to_l_@quot+1,c
 10161  002E52  0E00               	movlw	0
 10162  002E54  6E2D               	movwf	__div_to_l_@quot+2,c
 10163  002E56  0E00               	movlw	0
 10164  002E58  6E2E               	movwf	__div_to_l_@quot+3,c
 10165  002E5A  0E7F               	movlw	127
 10166  002E5C  5E30               	subwf	__div_to_l_@exp1,f,c
 10167  002E5E  502F               	movf	__div_to_l_@cntr,w,c
 10168  002E60  0FA0               	addlw	160
 10169  002E62  5E30               	subwf	__div_to_l_@exp1,f,c
 10170  002E64  0E20               	movlw	32
 10171  002E66  6E2F               	movwf	__div_to_l_@cntr,c
 10172  002E68                     l6553:
 10173  002E68  90D8               	bcf	status,0,c
 10174  002E6A  362B               	rlcf	__div_to_l_@quot,f,c
 10175  002E6C  362C               	rlcf	__div_to_l_@quot+1,f,c
 10176  002E6E  362D               	rlcf	__div_to_l_@quot+2,f,c
 10177  002E70  362E               	rlcf	__div_to_l_@quot+3,f,c
 10178  002E72  5028               	movf	__div_to_l_@f2,w,c
 10179  002E74  5C25               	subwf	__div_to_l_@f1,w,c
 10180  002E76  5029               	movf	__div_to_l_@f2+1,w,c
 10181  002E78  5826               	subwfb	__div_to_l_@f1+1,w,c
 10182  002E7A  502A               	movf	__div_to_l_@f2+2,w,c
 10183  002E7C  5827               	subwfb	__div_to_l_@f1+2,w,c
 10184  002E7E  502B               	movf	__div_to_l_@f2+3,w,c
 10185  002E80  5828               	subwfb	__div_to_l_@f1+3,w,c
 10186  002E82  A0D8               	btfss	status,0,c
 10187  002E84  D009               	goto	l6561
 10188  002E86  5028               	movf	__div_to_l_@f2,w,c
 10189  002E88  5E25               	subwf	__div_to_l_@f1,f,c
 10190  002E8A  5029               	movf	__div_to_l_@f2+1,w,c
 10191  002E8C  5A26               	subwfb	__div_to_l_@f1+1,f,c
 10192  002E8E  502A               	movf	__div_to_l_@f2+2,w,c
 10193  002E90  5A27               	subwfb	__div_to_l_@f1+2,f,c
 10194  002E92  502B               	movf	__div_to_l_@f2+3,w,c
 10195  002E94  5A28               	subwfb	__div_to_l_@f1+3,f,c
 10196  002E96  802B               	bsf	__div_to_l_@quot,0,c
 10197  002E98                     l6561:
 10198  002E98  90D8               	bcf	status,0,c
 10199  002E9A  3625               	rlcf	__div_to_l_@f1,f,c
 10200  002E9C  3626               	rlcf	__div_to_l_@f1+1,f,c
 10201  002E9E  3627               	rlcf	__div_to_l_@f1+2,f,c
 10202  002EA0  3628               	rlcf	__div_to_l_@f1+3,f,c
 10203  002EA2  2E2F               	decfsz	__div_to_l_@cntr,f,c
 10204  002EA4  D7E1               	goto	l6553
 10205  002EA6  AE30               	btfss	__div_to_l_@exp1,7,c
 10206  002EA8  D016               	goto	l6577
 10207  002EAA  5030               	movf	__div_to_l_@exp1,w,c
 10208  002EAC  0A80               	xorlw	128
 10209  002EAE  0F9F               	addlw	159
 10210  002EB0  B0D8               	btfsc	status,0,c
 10211  002EB2  D009               	goto	l6573
 10212  002EB4  0E00               	movlw	0
 10213  002EB6  6E25               	movwf	?__div_to_l_,c
 10214  002EB8  0E00               	movlw	0
 10215  002EBA  6E26               	movwf	?__div_to_l_+1,c
 10216  002EBC  0E00               	movlw	0
 10217  002EBE  6E27               	movwf	?__div_to_l_+2,c
 10218  002EC0  0E00               	movlw	0
 10219  002EC2  6E28               	movwf	?__div_to_l_+3,c
 10220  002EC4  0012               	return	
 10221  002EC6                     l6573:
 10222  002EC6  90D8               	bcf	status,0,c
 10223  002EC8  322E               	rrcf	__div_to_l_@quot+3,f,c
 10224  002ECA  322D               	rrcf	__div_to_l_@quot+2,f,c
 10225  002ECC  322C               	rrcf	__div_to_l_@quot+1,f,c
 10226  002ECE  322B               	rrcf	__div_to_l_@quot,f,c
 10227  002ED0  3E30               	incfsz	__div_to_l_@exp1,f,c
 10228  002ED2  D7F9               	goto	l6573
 10229  002ED4  D015               	goto	l1096
 10230  002ED6                     l6577:
 10231  002ED6  0E1F               	movlw	31
 10232  002ED8  6430               	cpfsgt	__div_to_l_@exp1,c
 10233  002EDA  D00F               	goto	l6585
 10234  002EDC  0E00               	movlw	0
 10235  002EDE  6E25               	movwf	?__div_to_l_,c
 10236  002EE0  0E00               	movlw	0
 10237  002EE2  6E26               	movwf	?__div_to_l_+1,c
 10238  002EE4  0E00               	movlw	0
 10239  002EE6  6E27               	movwf	?__div_to_l_+2,c
 10240  002EE8  0E00               	movlw	0
 10241  002EEA  6E28               	movwf	?__div_to_l_+3,c
 10242  002EEC  0012               	return	
 10243  002EEE                     l6583:
 10244  002EEE  90D8               	bcf	status,0,c
 10245  002EF0  362B               	rlcf	__div_to_l_@quot,f,c
 10246  002EF2  362C               	rlcf	__div_to_l_@quot+1,f,c
 10247  002EF4  362D               	rlcf	__div_to_l_@quot+2,f,c
 10248  002EF6  362E               	rlcf	__div_to_l_@quot+3,f,c
 10249  002EF8  0630               	decf	__div_to_l_@exp1,f,c
 10250  002EFA                     l6585:
 10251  002EFA  5030               	movf	__div_to_l_@exp1,w,c
 10252  002EFC  A4D8               	btfss	status,2,c
 10253  002EFE  D7F7               	goto	l6583
 10254  002F00                     l1096:
 10255  002F00  C02B  F025         	movff	__div_to_l_@quot,?__div_to_l_
 10256  002F04  C02C  F026         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 10257  002F08  C02D  F027         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 10258  002F0C  C02E  F028         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 10259  002F10  0012               	return		;funcret
 10260  002F12                     __end_of__div_to_l_:
 10261                           	opt stack 0
 10262                           tblptru	equ	0xFF8
 10263                           tblptrh	equ	0xFF7
 10264                           tblptrl	equ	0xFF6
 10265                           tablat	equ	0xFF5
 10266                           prodh	equ	0xFF4
 10267                           prodl	equ	0xFF3
 10268                           postinc0	equ	0xFEE
 10269                           wreg	equ	0xFE8
 10270                           postdec1	equ	0xFE5
 10271                           fsr1l	equ	0xFE1
 10272                           indf2	equ	0xFDF
 10273                           postinc2	equ	0xFDE
 10274                           postdec2	equ	0xFDD
 10275                           fsr2h	equ	0xFDA
 10276                           fsr2l	equ	0xFD9
 10277                           status	equ	0xFD8
 10278                           
 10279 ;; *************** function ___lltoft *****************
 10280 ;; Defined at:
 10281 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 10282 ;; Parameters:    Size  Location     Type
 10283 ;;  c               4   44[COMRAM] unsigned long 
 10284 ;; Auto vars:     Size  Location     Type
 10285 ;;  exp             1   52[COMRAM] unsigned char 
 10286 ;; Return value:  Size  Location     Type
 10287 ;;                  3   44[COMRAM] float 
 10288 ;; Registers used:
 10289 ;;		wreg, status,2, status,0, cstack
 10290 ;; Tracked objects:
 10291 ;;		On entry : 0/0
 10292 ;;		On exit  : 0/0
 10293 ;;		Unchanged: 0/0
 10294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10295 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10296 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10297 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10298 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10299 ;;Total ram usage:        9 bytes
 10300 ;; Hardware stack levels used:    1
 10301 ;; Hardware stack levels required when called:    4
 10302 ;; This function calls:
 10303 ;;		___ftpack
 10304 ;; This function is called by:
 10305 ;;		_printf
 10306 ;; This function uses a non-reentrant model
 10307 ;;
 10308                           
 10309                           	psect	text26
 10310  0040BA                     __ptext26:
 10311                           	opt stack 0
 10312  0040BA                     ___lltoft:
 10313                           	opt stack 24
 10314                           
 10315                           ;incstack = 0
 10316  0040BA  0E8E               	movlw	142
 10317  0040BC  6E35               	movwf	___lltoft@exp,c
 10318  0040BE  D006               	goto	l6757
 10319  0040C0                     l6755:
 10320  0040C0  90D8               	bcf	status,0,c
 10321  0040C2  3230               	rrcf	___lltoft@c+3,f,c
 10322  0040C4  322F               	rrcf	___lltoft@c+2,f,c
 10323  0040C6  322E               	rrcf	___lltoft@c+1,f,c
 10324  0040C8  322D               	rrcf	___lltoft@c,f,c
 10325  0040CA  2A35               	incf	___lltoft@exp,f,c
 10326  0040CC                     l6757:
 10327  0040CC  0E00               	movlw	0
 10328  0040CE  142D               	andwf	___lltoft@c,w,c
 10329  0040D0  6E31               	movwf	??___lltoft& (0+255),c
 10330  0040D2  0E00               	movlw	0
 10331  0040D4  142E               	andwf	___lltoft@c+1,w,c
 10332  0040D6  6E32               	movwf	(??___lltoft+1)& (0+255),c
 10333  0040D8  0E00               	movlw	0
 10334  0040DA  142F               	andwf	___lltoft@c+2,w,c
 10335  0040DC  6E33               	movwf	(??___lltoft+2)& (0+255),c
 10336  0040DE  0EFF               	movlw	255
 10337  0040E0  1430               	andwf	___lltoft@c+3,w,c
 10338  0040E2  6E34               	movwf	(??___lltoft+3)& (0+255),c
 10339  0040E4  5031               	movf	??___lltoft,w,c
 10340  0040E6  1032               	iorwf	??___lltoft+1,w,c
 10341  0040E8  1033               	iorwf	??___lltoft+2,w,c
 10342  0040EA  1034               	iorwf	??___lltoft+3,w,c
 10343  0040EC  A4D8               	btfss	status,2,c
 10344  0040EE  D7E8               	goto	l6755
 10345  0040F0  C02D  F025         	movff	___lltoft@c,___ftpack@arg
 10346  0040F4  C02E  F026         	movff	___lltoft@c+1,___ftpack@arg+1
 10347  0040F8  C02F  F027         	movff	___lltoft@c+2,___ftpack@arg+2
 10348  0040FC  C035  F028         	movff	___lltoft@exp,___ftpack@exp
 10349  004100  0E00               	movlw	0
 10350  004102  6E29               	movwf	___ftpack@sign,c
 10351  004104  EC48  F01C         	call	___ftpack	;wreg free
 10352  004108  C025  F02D         	movff	?___ftpack,?___lltoft
 10353  00410C  C026  F02E         	movff	?___ftpack+1,?___lltoft+1
 10354  004110  C027  F02F         	movff	?___ftpack+2,?___lltoft+2
 10355  004114  0012               	return	
 10356  004116                     __end_of___lltoft:
 10357                           	opt stack 0
 10358                           tblptru	equ	0xFF8
 10359                           tblptrh	equ	0xFF7
 10360                           tblptrl	equ	0xFF6
 10361                           tablat	equ	0xFF5
 10362                           prodh	equ	0xFF4
 10363                           prodl	equ	0xFF3
 10364                           postinc0	equ	0xFEE
 10365                           wreg	equ	0xFE8
 10366                           postdec1	equ	0xFE5
 10367                           fsr1l	equ	0xFE1
 10368                           indf2	equ	0xFDF
 10369                           postinc2	equ	0xFDE
 10370                           postdec2	equ	0xFDD
 10371                           fsr2h	equ	0xFDA
 10372                           fsr2l	equ	0xFD9
 10373                           status	equ	0xFD8
 10374                           
 10375 ;; *************** function ___llmod *****************
 10376 ;; Defined at:
 10377 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
 10378 ;; Parameters:    Size  Location     Type
 10379 ;;  dividend        4   49[COMRAM] unsigned long 
 10380 ;;  divisor         4   53[COMRAM] unsigned long 
 10381 ;; Auto vars:     Size  Location     Type
 10382 ;;  counter         1    0[BANK0 ] unsigned char 
 10383 ;; Return value:  Size  Location     Type
 10384 ;;                  4   49[COMRAM] unsigned long 
 10385 ;; Registers used:
 10386 ;;		wreg, status,2, status,0
 10387 ;; Tracked objects:
 10388 ;;		On entry : 0/0
 10389 ;;		On exit  : 0/0
 10390 ;;		Unchanged: 0/0
 10391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10392 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10393 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10395 ;;      Totals:         8       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10396 ;;Total ram usage:        9 bytes
 10397 ;; Hardware stack levels used:    1
 10398 ;; Hardware stack levels required when called:    3
 10399 ;; This function calls:
 10400 ;;		Nothing
 10401 ;; This function is called by:
 10402 ;;		_printf
 10403 ;; This function uses a non-reentrant model
 10404 ;;
 10405                           
 10406                           	psect	text27
 10407  003F28                     __ptext27:
 10408                           	opt stack 0
 10409  003F28                     ___llmod:
 10410                           	opt stack 25
 10411                           
 10412                           ;incstack = 0
 10413  003F28  5036               	movf	___llmod@divisor,w,c
 10414  003F2A  1037               	iorwf	___llmod@divisor+1,w,c
 10415  003F2C  1038               	iorwf	___llmod@divisor+2,w,c
 10416  003F2E  1039               	iorwf	___llmod@divisor+3,w,c
 10417  003F30  B4D8               	btfsc	status,2,c
 10418  003F32  D027               	goto	l1285
 10419  003F34  0E01               	movlw	1
 10420  003F36  0100               	movlb	0	; () banked
 10421  003F38  6F80               	movwf	___llmod@counter& (0+255),b
 10422  003F3A  D007               	goto	l6743
 10423  003F3C                     l6741:
 10424                           
 10425                           ; BSR set to: 0
 10426  003F3C  90D8               	bcf	status,0,c
 10427  003F3E  3636               	rlcf	___llmod@divisor,f,c
 10428  003F40  3637               	rlcf	___llmod@divisor+1,f,c
 10429  003F42  3638               	rlcf	___llmod@divisor+2,f,c
 10430  003F44  3639               	rlcf	___llmod@divisor+3,f,c
 10431  003F46  0100               	movlb	0	; () banked
 10432  003F48  2B80               	incf	___llmod@counter& (0+255),f,b
 10433  003F4A                     l6743:
 10434                           
 10435                           ; BSR set to: 0
 10436  003F4A  AE39               	btfss	___llmod@divisor+3,7,c
 10437  003F4C  D7F7               	goto	l6741
 10438  003F4E                     l6745:
 10439                           
 10440                           ; BSR set to: 0
 10441  003F4E  5036               	movf	___llmod@divisor,w,c
 10442  003F50  5C32               	subwf	___llmod@dividend,w,c
 10443  003F52  5037               	movf	___llmod@divisor+1,w,c
 10444  003F54  5833               	subwfb	___llmod@dividend+1,w,c
 10445  003F56  5038               	movf	___llmod@divisor+2,w,c
 10446  003F58  5834               	subwfb	___llmod@dividend+2,w,c
 10447  003F5A  5039               	movf	___llmod@divisor+3,w,c
 10448  003F5C  5835               	subwfb	___llmod@dividend+3,w,c
 10449  003F5E  A0D8               	btfss	status,0,c
 10450  003F60  D008               	goto	l6749
 10451                           
 10452                           ; BSR set to: 0
 10453  003F62  5036               	movf	___llmod@divisor,w,c
 10454  003F64  5E32               	subwf	___llmod@dividend,f,c
 10455  003F66  5037               	movf	___llmod@divisor+1,w,c
 10456  003F68  5A33               	subwfb	___llmod@dividend+1,f,c
 10457  003F6A  5038               	movf	___llmod@divisor+2,w,c
 10458  003F6C  5A34               	subwfb	___llmod@dividend+2,f,c
 10459  003F6E  5039               	movf	___llmod@divisor+3,w,c
 10460  003F70  5A35               	subwfb	___llmod@dividend+3,f,c
 10461  003F72                     l6749:
 10462                           
 10463                           ; BSR set to: 0
 10464  003F72  90D8               	bcf	status,0,c
 10465  003F74  3239               	rrcf	___llmod@divisor+3,f,c
 10466  003F76  3238               	rrcf	___llmod@divisor+2,f,c
 10467  003F78  3237               	rrcf	___llmod@divisor+1,f,c
 10468  003F7A  3236               	rrcf	___llmod@divisor,f,c
 10469                           
 10470                           ; BSR set to: 0
 10471  003F7C  0100               	movlb	0	; () banked
 10472  003F7E  2F80               	decfsz	___llmod@counter& (0+255),f,b
 10473  003F80  D7E6               	goto	l6745
 10474  003F82                     l1285:
 10475  003F82  C032  F032         	movff	___llmod@dividend,?___llmod
 10476  003F86  C033  F033         	movff	___llmod@dividend+1,?___llmod+1
 10477  003F8A  C034  F034         	movff	___llmod@dividend+2,?___llmod+2
 10478  003F8E  C035  F035         	movff	___llmod@dividend+3,?___llmod+3
 10479  003F92  0012               	return		;funcret
 10480  003F94                     __end_of___llmod:
 10481                           	opt stack 0
 10482                           tblptru	equ	0xFF8
 10483                           tblptrh	equ	0xFF7
 10484                           tblptrl	equ	0xFF6
 10485                           tablat	equ	0xFF5
 10486                           prodh	equ	0xFF4
 10487                           prodl	equ	0xFF3
 10488                           postinc0	equ	0xFEE
 10489                           wreg	equ	0xFE8
 10490                           postdec1	equ	0xFE5
 10491                           fsr1l	equ	0xFE1
 10492                           indf2	equ	0xFDF
 10493                           postinc2	equ	0xFDE
 10494                           postdec2	equ	0xFDD
 10495                           fsr2h	equ	0xFDA
 10496                           fsr2l	equ	0xFD9
 10497                           status	equ	0xFD8
 10498                           
 10499 ;; *************** function ___ftsub *****************
 10500 ;; Defined at:
 10501 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 10502 ;; Parameters:    Size  Location     Type
 10503 ;;  f1              3   42[BANK0 ] float 
 10504 ;;  f2              3   45[BANK0 ] float 
 10505 ;; Auto vars:     Size  Location     Type
 10506 ;;		None
 10507 ;; Return value:  Size  Location     Type
 10508 ;;                  3   42[BANK0 ] float 
 10509 ;; Registers used:
 10510 ;;		wreg, status,2, status,0, cstack
 10511 ;; Tracked objects:
 10512 ;;		On entry : 0/0
 10513 ;;		On exit  : 0/0
 10514 ;;		Unchanged: 0/0
 10515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10516 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10519 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10520 ;;Total ram usage:        6 bytes
 10521 ;; Hardware stack levels used:    1
 10522 ;; Hardware stack levels required when called:    5
 10523 ;; This function calls:
 10524 ;;		___ftadd
 10525 ;; This function is called by:
 10526 ;;		_sortBattery
 10527 ;;		_printf
 10528 ;; This function uses a non-reentrant model
 10529 ;;
 10530                           
 10531                           	psect	text28
 10532  004210                     __ptext28:
 10533                           	opt stack 0
 10534  004210                     ___ftsub:
 10535                           	opt stack 23
 10536                           
 10537                           ;incstack = 0
 10538  004210  0100               	movlb	0	; () banked
 10539  004212  51AD               	movf	___ftsub@f2& (0+255),w,b
 10540  004214  0100               	movlb	0	; () banked
 10541  004216  11AE               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 10542  004218  0100               	movlb	0	; () banked
 10543  00421A  11AF               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 10544  00421C  B4D8               	btfsc	status,2,c
 10545  00421E  D009               	goto	l6653
 10546                           
 10547                           ; BSR set to: 0
 10548  004220  0E00               	movlw	0
 10549  004222  0100               	movlb	0	; () banked
 10550  004224  1BAD               	xorwf	___ftsub@f2& (0+255),f,b
 10551  004226  0E00               	movlw	0
 10552  004228  0100               	movlb	0	; () banked
 10553  00422A  1BAE               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 10554  00422C  0E80               	movlw	128
 10555  00422E  0100               	movlb	0	; () banked
 10556  004230  1BAF               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 10557  004232                     l6653:
 10558                           
 10559                           ; BSR set to: 0
 10560  004232  C0AA  F09E         	movff	___ftsub@f1,___ftadd@f1
 10561  004236  C0AB  F09F         	movff	___ftsub@f1+1,___ftadd@f1+1
 10562  00423A  C0AC  F0A0         	movff	___ftsub@f1+2,___ftadd@f1+2
 10563  00423E  C0AD  F0A1         	movff	___ftsub@f2,___ftadd@f2
 10564  004242  C0AE  F0A2         	movff	___ftsub@f2+1,___ftadd@f2+1
 10565  004246  C0AF  F0A3         	movff	___ftsub@f2+2,___ftadd@f2+2
 10566  00424A  ECD1  F00F         	call	___ftadd	;wreg free
 10567  00424E  C09E  F0AA         	movff	?___ftadd,?___ftsub
 10568  004252  C09F  F0AB         	movff	?___ftadd+1,?___ftsub+1
 10569  004256  C0A0  F0AC         	movff	?___ftadd+2,?___ftsub+2
 10570  00425A  0012               	return	
 10571  00425C                     __end_of___ftsub:
 10572                           	opt stack 0
 10573                           tblptru	equ	0xFF8
 10574                           tblptrh	equ	0xFF7
 10575                           tblptrl	equ	0xFF6
 10576                           tablat	equ	0xFF5
 10577                           prodh	equ	0xFF4
 10578                           prodl	equ	0xFF3
 10579                           postinc0	equ	0xFEE
 10580                           wreg	equ	0xFE8
 10581                           postdec1	equ	0xFE5
 10582                           fsr1l	equ	0xFE1
 10583                           indf2	equ	0xFDF
 10584                           postinc2	equ	0xFDE
 10585                           postdec2	equ	0xFDD
 10586                           fsr2h	equ	0xFDA
 10587                           fsr2l	equ	0xFD9
 10588                           status	equ	0xFD8
 10589                           
 10590 ;; *************** function ___ftneg *****************
 10591 ;; Defined at:
 10592 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 10593 ;; Parameters:    Size  Location     Type
 10594 ;;  f1              3   36[COMRAM] float 
 10595 ;; Auto vars:     Size  Location     Type
 10596 ;;		None
 10597 ;; Return value:  Size  Location     Type
 10598 ;;                  3   36[COMRAM] float 
 10599 ;; Registers used:
 10600 ;;		wreg, status,2, status,0
 10601 ;; Tracked objects:
 10602 ;;		On entry : 0/0
 10603 ;;		On exit  : 0/0
 10604 ;;		Unchanged: 0/0
 10605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10606 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10609 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10610 ;;Total ram usage:        3 bytes
 10611 ;; Hardware stack levels used:    1
 10612 ;; Hardware stack levels required when called:    3
 10613 ;; This function calls:
 10614 ;;		Nothing
 10615 ;; This function is called by:
 10616 ;;		_printf
 10617 ;; This function uses a non-reentrant model
 10618 ;;
 10619                           
 10620                           	psect	text29
 10621  0044D6                     __ptext29:
 10622                           	opt stack 0
 10623  0044D6                     ___ftneg:
 10624                           	opt stack 25
 10625                           
 10626                           ;incstack = 0
 10627  0044D6  5025               	movf	___ftneg@f1,w,c
 10628  0044D8  1026               	iorwf	___ftneg@f1+1,w,c
 10629  0044DA  1027               	iorwf	___ftneg@f1+2,w,c
 10630  0044DC  B4D8               	btfsc	status,2,c
 10631  0044DE  D006               	goto	l1225
 10632  0044E0  0E00               	movlw	0
 10633  0044E2  1A25               	xorwf	___ftneg@f1,f,c
 10634  0044E4  0E00               	movlw	0
 10635  0044E6  1A26               	xorwf	___ftneg@f1+1,f,c
 10636  0044E8  0E80               	movlw	128
 10637  0044EA  1A27               	xorwf	___ftneg@f1+2,f,c
 10638  0044EC                     l1225:
 10639  0044EC  C025  F025         	movff	___ftneg@f1,?___ftneg
 10640  0044F0  C026  F026         	movff	___ftneg@f1+1,?___ftneg+1
 10641  0044F4  C027  F027         	movff	___ftneg@f1+2,?___ftneg+2
 10642  0044F8  0012               	return		;funcret
 10643  0044FA                     __end_of___ftneg:
 10644                           	opt stack 0
 10645                           tblptru	equ	0xFF8
 10646                           tblptrh	equ	0xFF7
 10647                           tblptrl	equ	0xFF6
 10648                           tablat	equ	0xFF5
 10649                           prodh	equ	0xFF4
 10650                           prodl	equ	0xFF3
 10651                           postinc0	equ	0xFEE
 10652                           wreg	equ	0xFE8
 10653                           postdec1	equ	0xFE5
 10654                           fsr1l	equ	0xFE1
 10655                           indf2	equ	0xFDF
 10656                           postinc2	equ	0xFDE
 10657                           postdec2	equ	0xFDD
 10658                           fsr2h	equ	0xFDA
 10659                           fsr2l	equ	0xFD9
 10660                           status	equ	0xFD8
 10661                           
 10662 ;; *************** function ___ftge *****************
 10663 ;; Defined at:
 10664 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 10665 ;; Parameters:    Size  Location     Type
 10666 ;;  ff1             3   48[COMRAM] float 
 10667 ;;  ff2             3   51[COMRAM] float 
 10668 ;; Auto vars:     Size  Location     Type
 10669 ;;		None
 10670 ;; Return value:  Size  Location     Type
 10671 ;;		None               void
 10672 ;; Registers used:
 10673 ;;		wreg, status,2, status,0
 10674 ;; Tracked objects:
 10675 ;;		On entry : 0/0
 10676 ;;		On exit  : 0/0
 10677 ;;		Unchanged: 0/0
 10678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10679 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10681 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10682 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10683 ;;Total ram usage:        9 bytes
 10684 ;; Hardware stack levels used:    1
 10685 ;; Hardware stack levels required when called:    3
 10686 ;; This function calls:
 10687 ;;		Nothing
 10688 ;; This function is called by:
 10689 ;;		_sortBattery
 10690 ;;		_printf
 10691 ;; This function uses a non-reentrant model
 10692 ;;
 10693                           
 10694                           	psect	text30
 10695  003B2A                     __ptext30:
 10696                           	opt stack 0
 10697  003B2A                     ___ftge:
 10698                           	opt stack 25
 10699                           
 10700                           ;incstack = 0
 10701  003B2A  AE33               	btfss	___ftge@ff1+2,7,c
 10702  003B2C  D016               	goto	l6673
 10703  003B2E  C031  F037         	movff	___ftge@ff1,??___ftge
 10704  003B32  C032  F038         	movff	___ftge@ff1+1,??___ftge+1
 10705  003B36  C033  F039         	movff	___ftge@ff1+2,??___ftge+2
 10706  003B3A  1E37               	comf	??___ftge,f,c
 10707  003B3C  1E38               	comf	??___ftge+1,f,c
 10708  003B3E  1E39               	comf	??___ftge+2,f,c
 10709  003B40  2A37               	incf	??___ftge,f,c
 10710  003B42  0E00               	movlw	0
 10711  003B44  2238               	addwfc	??___ftge+1,f,c
 10712  003B46  2239               	addwfc	??___ftge+2,f,c
 10713  003B48  0E00               	movlw	0
 10714  003B4A  2437               	addwf	??___ftge,w,c
 10715  003B4C  6E31               	movwf	___ftge@ff1,c
 10716  003B4E  0E00               	movlw	0
 10717  003B50  2038               	addwfc	??___ftge+1,w,c
 10718  003B52  6E32               	movwf	___ftge@ff1+1,c
 10719  003B54  0E80               	movlw	128
 10720  003B56  2039               	addwfc	??___ftge+2,w,c
 10721  003B58  6E33               	movwf	___ftge@ff1+2,c
 10722  003B5A                     l6673:
 10723  003B5A  AE36               	btfss	___ftge@ff2+2,7,c
 10724  003B5C  D016               	goto	l6677
 10725  003B5E  C034  F037         	movff	___ftge@ff2,??___ftge
 10726  003B62  C035  F038         	movff	___ftge@ff2+1,??___ftge+1
 10727  003B66  C036  F039         	movff	___ftge@ff2+2,??___ftge+2
 10728  003B6A  1E37               	comf	??___ftge,f,c
 10729  003B6C  1E38               	comf	??___ftge+1,f,c
 10730  003B6E  1E39               	comf	??___ftge+2,f,c
 10731  003B70  2A37               	incf	??___ftge,f,c
 10732  003B72  0E00               	movlw	0
 10733  003B74  2238               	addwfc	??___ftge+1,f,c
 10734  003B76  2239               	addwfc	??___ftge+2,f,c
 10735  003B78  0E00               	movlw	0
 10736  003B7A  2437               	addwf	??___ftge,w,c
 10737  003B7C  6E34               	movwf	___ftge@ff2,c
 10738  003B7E  0E00               	movlw	0
 10739  003B80  2038               	addwfc	??___ftge+1,w,c
 10740  003B82  6E35               	movwf	___ftge@ff2+1,c
 10741  003B84  0E80               	movlw	128
 10742  003B86  2039               	addwfc	??___ftge+2,w,c
 10743  003B88  6E36               	movwf	___ftge@ff2+2,c
 10744  003B8A                     l6677:
 10745  003B8A  0E00               	movlw	0
 10746  003B8C  1A31               	xorwf	___ftge@ff1,f,c
 10747  003B8E  0E00               	movlw	0
 10748  003B90  1A32               	xorwf	___ftge@ff1+1,f,c
 10749  003B92  0E80               	movlw	128
 10750  003B94  1A33               	xorwf	___ftge@ff1+2,f,c
 10751  003B96  0E00               	movlw	0
 10752  003B98  1A34               	xorwf	___ftge@ff2,f,c
 10753  003B9A  0E00               	movlw	0
 10754  003B9C  1A35               	xorwf	___ftge@ff2+1,f,c
 10755  003B9E  0E80               	movlw	128
 10756  003BA0  1A36               	xorwf	___ftge@ff2+2,f,c
 10757  003BA2  5034               	movf	___ftge@ff2,w,c
 10758  003BA4  5C31               	subwf	___ftge@ff1,w,c
 10759  003BA6  5035               	movf	___ftge@ff2+1,w,c
 10760  003BA8  5832               	subwfb	___ftge@ff1+1,w,c
 10761  003BAA  5036               	movf	___ftge@ff2+2,w,c
 10762  003BAC  5833               	subwfb	___ftge@ff1+2,w,c
 10763  003BAE  B0D8               	btfsc	status,0,c
 10764  003BB0  D002               	goto	l6683
 10765  003BB2  90D8               	bcf	status,0,c
 10766  003BB4  0012               	return	
 10767  003BB6                     l6683:
 10768  003BB6  80D8               	bsf	status,0,c
 10769  003BB8  0012               	return	
 10770  003BBA                     __end_of___ftge:
 10771                           	opt stack 0
 10772                           tblptru	equ	0xFF8
 10773                           tblptrh	equ	0xFF7
 10774                           tblptrl	equ	0xFF6
 10775                           tablat	equ	0xFF5
 10776                           prodh	equ	0xFF4
 10777                           prodl	equ	0xFF3
 10778                           postinc0	equ	0xFEE
 10779                           wreg	equ	0xFE8
 10780                           postdec1	equ	0xFE5
 10781                           fsr1l	equ	0xFE1
 10782                           indf2	equ	0xFDF
 10783                           postinc2	equ	0xFDE
 10784                           postdec2	equ	0xFDD
 10785                           fsr2h	equ	0xFDA
 10786                           fsr2l	equ	0xFD9
 10787                           status	equ	0xFD8
 10788                           
 10789 ;; *************** function _lcdHome *****************
 10790 ;; Defined at:
 10791 ;;		line 70 in file "lcd.c"
 10792 ;; Parameters:    Size  Location     Type
 10793 ;;		None
 10794 ;; Auto vars:     Size  Location     Type
 10795 ;;		None
 10796 ;; Return value:  Size  Location     Type
 10797 ;;                  2   24[None  ] int 
 10798 ;; Registers used:
 10799 ;;		wreg, status,2, status,0, cstack
 10800 ;; Tracked objects:
 10801 ;;		On entry : 0/0
 10802 ;;		On exit  : 0/0
 10803 ;;		Unchanged: 0/0
 10804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10809 ;;Total ram usage:        0 bytes
 10810 ;; Hardware stack levels used:    1
 10811 ;; Hardware stack levels required when called:    5
 10812 ;; This function calls:
 10813 ;;		_lcdInst
 10814 ;; This function is called by:
 10815 ;;		_main
 10816 ;;		_sortBattery
 10817 ;;		_showDateTime
 10818 ;; This function uses a non-reentrant model
 10819 ;;
 10820                           
 10821                           	psect	text31
 10822  0045F8                     __ptext31:
 10823                           	opt stack 0
 10824  0045F8                     _lcdHome:
 10825                           	opt stack 24
 10826                           
 10827                           ;lcd.c: 71: lcdInst(0b00000010);
 10828                           
 10829                           ;incstack = 0
 10830  0045F8  0E02               	movlw	2
 10831  0045FA  EC8E  F022         	call	_lcdInst
 10832  0045FE  0012               	return		;funcret
 10833  004600                     __end_of_lcdHome:
 10834                           	opt stack 0
 10835                           tblptru	equ	0xFF8
 10836                           tblptrh	equ	0xFF7
 10837                           tblptrl	equ	0xFF6
 10838                           tablat	equ	0xFF5
 10839                           prodh	equ	0xFF4
 10840                           prodl	equ	0xFF3
 10841                           postinc0	equ	0xFEE
 10842                           wreg	equ	0xFE8
 10843                           postdec1	equ	0xFE5
 10844                           fsr1l	equ	0xFE1
 10845                           indf2	equ	0xFDF
 10846                           postinc2	equ	0xFDE
 10847                           postdec2	equ	0xFDD
 10848                           fsr2h	equ	0xFDA
 10849                           fsr2l	equ	0xFD9
 10850                           status	equ	0xFD8
 10851                           
 10852 ;; *************** function _lcdClear *****************
 10853 ;; Defined at:
 10854 ;;		line 74 in file "lcd.c"
 10855 ;; Parameters:    Size  Location     Type
 10856 ;;		None
 10857 ;; Auto vars:     Size  Location     Type
 10858 ;;		None
 10859 ;; Return value:  Size  Location     Type
 10860 ;;                  1    wreg      void 
 10861 ;; Registers used:
 10862 ;;		wreg, status,2, status,0, cstack
 10863 ;; Tracked objects:
 10864 ;;		On entry : 0/0
 10865 ;;		On exit  : 0/0
 10866 ;;		Unchanged: 0/0
 10867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10872 ;;Total ram usage:        0 bytes
 10873 ;; Hardware stack levels used:    1
 10874 ;; Hardware stack levels required when called:    5
 10875 ;; This function calls:
 10876 ;;		_lcdInst
 10877 ;; This function is called by:
 10878 ;;		_sortBattery
 10879 ;;		_showDateTime
 10880 ;;		_showMainMenu
 10881 ;;		_showRunSelect
 10882 ;;		_showRunMenu
 10883 ;;		_showRunTime
 10884 ;;		_showRunStats
 10885 ;;		_showErrorMessage
 10886 ;;		_debug
 10887 ;;		_pause
 10888 ;; This function uses a non-reentrant model
 10889 ;;
 10890                           
 10891                           	psect	text32
 10892  004600                     __ptext32:
 10893                           	opt stack 0
 10894  004600                     _lcdClear:
 10895                           	opt stack 24
 10896                           
 10897                           ;lcd.c: 75: lcdInst(0b00000001);
 10898                           
 10899                           ;incstack = 0
 10900  004600  0E01               	movlw	1
 10901  004602  EC8E  F022         	call	_lcdInst
 10902  004606  0012               	return		;funcret
 10903  004608                     __end_of_lcdClear:
 10904                           	opt stack 0
 10905                           tblptru	equ	0xFF8
 10906                           tblptrh	equ	0xFF7
 10907                           tblptrl	equ	0xFF6
 10908                           tablat	equ	0xFF5
 10909                           prodh	equ	0xFF4
 10910                           prodl	equ	0xFF3
 10911                           postinc0	equ	0xFEE
 10912                           wreg	equ	0xFE8
 10913                           postdec1	equ	0xFE5
 10914                           fsr1l	equ	0xFE1
 10915                           indf2	equ	0xFDF
 10916                           postinc2	equ	0xFDE
 10917                           postdec2	equ	0xFDD
 10918                           fsr2h	equ	0xFDA
 10919                           fsr2l	equ	0xFD9
 10920                           status	equ	0xFD8
 10921                           
 10922 ;; *************** function _keyPressed *****************
 10923 ;; Defined at:
 10924 ;;		line 43 in file "keypad.c"
 10925 ;; Parameters:    Size  Location     Type
 10926 ;;		None
 10927 ;; Auto vars:     Size  Location     Type
 10928 ;;  key             1   36[COMRAM] unsigned char 
 10929 ;; Return value:  Size  Location     Type
 10930 ;;                  1    wreg      unsigned char 
 10931 ;; Registers used:
 10932 ;;		wreg, status,2
 10933 ;; Tracked objects:
 10934 ;;		On entry : 0/0
 10935 ;;		On exit  : 0/0
 10936 ;;		Unchanged: 0/0
 10937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10939 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10941 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10942 ;;Total ram usage:        1 bytes
 10943 ;; Hardware stack levels used:    1
 10944 ;; Hardware stack levels required when called:    3
 10945 ;; This function calls:
 10946 ;;		Nothing
 10947 ;; This function is called by:
 10948 ;;		_showDateTime
 10949 ;; This function uses a non-reentrant model
 10950 ;;
 10951                           
 10952                           	psect	text33
 10953  0045D0                     __ptext33:
 10954                           	opt stack 0
 10955  0045D0                     _keyPressed:
 10956                           	opt stack 25
 10957                           
 10958                           ;keypad.c: 44: char key = lastKey;
 10959                           
 10960                           ;incstack = 0
 10961  0045D0  C04C  F025         	movff	_lastKey,keyPressed@key
 10962                           
 10963                           ;keypad.c: 45: lastKey = 0;
 10964  0045D4  0E00               	movlw	0
 10965  0045D6  6E4C               	movwf	_lastKey,c
 10966                           
 10967                           ;keypad.c: 46: return key;
 10968  0045D8  5025               	movf	keyPressed@key,w,c
 10969  0045DA  0012               	return	
 10970  0045DC                     __end_of_keyPressed:
 10971                           	opt stack 0
 10972                           tblptru	equ	0xFF8
 10973                           tblptrh	equ	0xFF7
 10974                           tblptrl	equ	0xFF6
 10975                           tablat	equ	0xFF5
 10976                           prodh	equ	0xFF4
 10977                           prodl	equ	0xFF3
 10978                           postinc0	equ	0xFEE
 10979                           wreg	equ	0xFE8
 10980                           postdec1	equ	0xFE5
 10981                           fsr1l	equ	0xFE1
 10982                           indf2	equ	0xFDF
 10983                           postinc2	equ	0xFDE
 10984                           postdec2	equ	0xFDD
 10985                           fsr2h	equ	0xFDA
 10986                           fsr2l	equ	0xFD9
 10987                           status	equ	0xFD8
 10988                           
 10989 ;; *************** function _initRTC *****************
 10990 ;; Defined at:
 10991 ;;		line 19 in file "RTC.c"
 10992 ;; Parameters:    Size  Location     Type
 10993 ;;		None
 10994 ;; Auto vars:     Size  Location     Type
 10995 ;;		None
 10996 ;; Return value:  Size  Location     Type
 10997 ;;                  1    wreg      void 
 10998 ;; Registers used:
 10999 ;;		wreg, status,2, status,0, cstack
 11000 ;; Tracked objects:
 11001 ;;		On entry : 0/0
 11002 ;;		On exit  : 0/0
 11003 ;;		Unchanged: 0/0
 11004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11009 ;;Total ram usage:        0 bytes
 11010 ;; Hardware stack levels used:    1
 11011 ;; Hardware stack levels required when called:    5
 11012 ;; This function calls:
 11013 ;;		_I2C_Master_Init
 11014 ;; This function is called by:
 11015 ;;		_showInterface
 11016 ;;		_showDateTime
 11017 ;; This function uses a non-reentrant model
 11018 ;;
 11019                           
 11020                           	psect	text34
 11021  00459A                     __ptext34:
 11022                           	opt stack 0
 11023  00459A                     _initRTC:
 11024                           	opt stack 23
 11025                           
 11026                           ;RTC.c: 20: I2C_Master_Init(10000);
 11027                           
 11028                           ;incstack = 0
 11029  00459A  0E10               	movlw	16
 11030  00459C  6E32               	movwf	I2C_Master_Init@c,c
 11031  00459E  0E27               	movlw	39
 11032  0045A0  6E33               	movwf	I2C_Master_Init@c+1,c
 11033  0045A2  0E00               	movlw	0
 11034  0045A4  6E34               	movwf	I2C_Master_Init@c+2,c
 11035  0045A6  0E00               	movlw	0
 11036  0045A8  6E35               	movwf	I2C_Master_Init@c+3,c
 11037  0045AA  EC8B  F020         	call	_I2C_Master_Init	;wreg free
 11038  0045AE  0012               	return		;funcret
 11039  0045B0                     __end_of_initRTC:
 11040                           	opt stack 0
 11041                           tblptru	equ	0xFF8
 11042                           tblptrh	equ	0xFF7
 11043                           tblptrl	equ	0xFF6
 11044                           tablat	equ	0xFF5
 11045                           prodh	equ	0xFF4
 11046                           prodl	equ	0xFF3
 11047                           postinc0	equ	0xFEE
 11048                           wreg	equ	0xFE8
 11049                           postdec1	equ	0xFE5
 11050                           fsr1l	equ	0xFE1
 11051                           indf2	equ	0xFDF
 11052                           postinc2	equ	0xFDE
 11053                           postdec2	equ	0xFDD
 11054                           fsr2h	equ	0xFDA
 11055                           fsr2l	equ	0xFD9
 11056                           status	equ	0xFD8
 11057                           
 11058 ;; *************** function _I2C_Master_Init *****************
 11059 ;; Defined at:
 11060 ;;		line 13 in file "I2C.c"
 11061 ;; Parameters:    Size  Location     Type
 11062 ;;  c               4   49[COMRAM] const unsigned long 
 11063 ;; Auto vars:     Size  Location     Type
 11064 ;;		None
 11065 ;; Return value:  Size  Location     Type
 11066 ;;                  1    wreg      void 
 11067 ;; Registers used:
 11068 ;;		wreg, status,2, status,0, cstack
 11069 ;; Tracked objects:
 11070 ;;		On entry : 0/0
 11071 ;;		On exit  : 0/0
 11072 ;;		Unchanged: 0/0
 11073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11074 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11076 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11077 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11078 ;;Total ram usage:        8 bytes
 11079 ;; Hardware stack levels used:    1
 11080 ;; Hardware stack levels required when called:    4
 11081 ;; This function calls:
 11082 ;;		___lldiv
 11083 ;; This function is called by:
 11084 ;;		_initRTC
 11085 ;;		_testFrequency
 11086 ;; This function uses a non-reentrant model
 11087 ;;
 11088                           
 11089                           	psect	text35
 11090  004116                     __ptext35:
 11091                           	opt stack 0
 11092  004116                     _I2C_Master_Init:
 11093                           	opt stack 23
 11094                           
 11095                           ;I2C.c: 16: SSPSTAT = 0b00000000;
 11096                           
 11097                           ;incstack = 0
 11098  004116  0E00               	movlw	0
 11099  004118  6EC7               	movwf	4039,c	;volatile
 11100                           
 11101                           ;I2C.c: 17: SSPCON1 = 0b00101000;
 11102  00411A  0E28               	movlw	40
 11103  00411C  6EC6               	movwf	4038,c	;volatile
 11104                           
 11105                           ;I2C.c: 18: SSPCON2 = 0b00000000;
 11106  00411E  0E00               	movlw	0
 11107  004120  6EC5               	movwf	4037,c	;volatile
 11108                           
 11109                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
 11110  004122  0E80               	movlw	128
 11111  004124  6E25               	movwf	___lldiv@dividend,c
 11112  004126  0E96               	movlw	150
 11113  004128  6E26               	movwf	___lldiv@dividend+1,c
 11114  00412A  0E98               	movlw	152
 11115  00412C  6E27               	movwf	___lldiv@dividend+2,c
 11116  00412E  0E00               	movlw	0
 11117  004130  6E28               	movwf	___lldiv@dividend+3,c
 11118  004132  C032  F036         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 11119  004136  C033  F037         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 11120  00413A  C034  F038         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 11121  00413E  C035  F039         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 11122  004142  0E02               	movlw	2
 11123  004144                     u6315:
 11124  004144  90D8               	bcf	status,0,c
 11125  004146  3636               	rlcf	??_I2C_Master_Init,f,c
 11126  004148  3637               	rlcf	??_I2C_Master_Init+1,f,c
 11127  00414A  3638               	rlcf	??_I2C_Master_Init+2,f,c
 11128  00414C  3639               	rlcf	??_I2C_Master_Init+3,f,c
 11129  00414E  2EE8               	decfsz	wreg,f,c
 11130  004150  D7F9               	goto	u6315
 11131  004152  C036  F029         	movff	??_I2C_Master_Init,___lldiv@divisor
 11132  004156  C037  F02A         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 11133  00415A  C038  F02B         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 11134  00415E  C039  F02C         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 11135  004162  ECA7  F01E         	call	___lldiv	;wreg free
 11136  004166  0425               	decf	?___lldiv,w,c
 11137  004168  6EC8               	movwf	4040,c	;volatile
 11138                           
 11139                           ;I2C.c: 20: TRISC3 = 1;
 11140  00416A  8694               	bsf	3988,3,c	;volatile
 11141                           
 11142                           ;I2C.c: 21: TRISC4 = 1;
 11143  00416C  8894               	bsf	3988,4,c	;volatile
 11144  00416E  0012               	return		;funcret
 11145  004170                     __end_of_I2C_Master_Init:
 11146                           	opt stack 0
 11147                           tblptru	equ	0xFF8
 11148                           tblptrh	equ	0xFF7
 11149                           tblptrl	equ	0xFF6
 11150                           tablat	equ	0xFF5
 11151                           prodh	equ	0xFF4
 11152                           prodl	equ	0xFF3
 11153                           postinc0	equ	0xFEE
 11154                           wreg	equ	0xFE8
 11155                           postdec1	equ	0xFE5
 11156                           fsr1l	equ	0xFE1
 11157                           indf2	equ	0xFDF
 11158                           postinc2	equ	0xFDE
 11159                           postdec2	equ	0xFDD
 11160                           fsr2h	equ	0xFDA
 11161                           fsr2l	equ	0xFD9
 11162                           status	equ	0xFD8
 11163                           
 11164 ;; *************** function ___lldiv *****************
 11165 ;; Defined at:
 11166 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 11167 ;; Parameters:    Size  Location     Type
 11168 ;;  dividend        4   36[COMRAM] unsigned long 
 11169 ;;  divisor         4   40[COMRAM] unsigned long 
 11170 ;; Auto vars:     Size  Location     Type
 11171 ;;  quotient        4   44[COMRAM] unsigned long 
 11172 ;;  counter         1   48[COMRAM] unsigned char 
 11173 ;; Return value:  Size  Location     Type
 11174 ;;                  4   36[COMRAM] unsigned long 
 11175 ;; Registers used:
 11176 ;;		wreg, status,2, status,0
 11177 ;; Tracked objects:
 11178 ;;		On entry : 0/0
 11179 ;;		On exit  : 0/0
 11180 ;;		Unchanged: 0/0
 11181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11182 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11183 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11185 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11186 ;;Total ram usage:       13 bytes
 11187 ;; Hardware stack levels used:    1
 11188 ;; Hardware stack levels required when called:    3
 11189 ;; This function calls:
 11190 ;;		Nothing
 11191 ;; This function is called by:
 11192 ;;		_I2C_Master_Init
 11193 ;;		_printf
 11194 ;; This function uses a non-reentrant model
 11195 ;;
 11196                           
 11197                           	psect	text36
 11198  003D4E                     __ptext36:
 11199                           	opt stack 0
 11200  003D4E                     ___lldiv:
 11201                           	opt stack 25
 11202                           
 11203                           ;incstack = 0
 11204  003D4E  0E00               	movlw	0
 11205  003D50  6E2D               	movwf	___lldiv@quotient,c
 11206  003D52  0E00               	movlw	0
 11207  003D54  6E2E               	movwf	___lldiv@quotient+1,c
 11208  003D56  0E00               	movlw	0
 11209  003D58  6E2F               	movwf	___lldiv@quotient+2,c
 11210  003D5A  0E00               	movlw	0
 11211  003D5C  6E30               	movwf	___lldiv@quotient+3,c
 11212  003D5E  5029               	movf	___lldiv@divisor,w,c
 11213  003D60  102A               	iorwf	___lldiv@divisor+1,w,c
 11214  003D62  102B               	iorwf	___lldiv@divisor+2,w,c
 11215  003D64  102C               	iorwf	___lldiv@divisor+3,w,c
 11216  003D66  B4D8               	btfsc	status,2,c
 11217  003D68  D02A               	goto	l1275
 11218  003D6A  0E01               	movlw	1
 11219  003D6C  6E31               	movwf	___lldiv@counter,c
 11220  003D6E  D006               	goto	l6343
 11221  003D70                     l6341:
 11222  003D70  90D8               	bcf	status,0,c
 11223  003D72  3629               	rlcf	___lldiv@divisor,f,c
 11224  003D74  362A               	rlcf	___lldiv@divisor+1,f,c
 11225  003D76  362B               	rlcf	___lldiv@divisor+2,f,c
 11226  003D78  362C               	rlcf	___lldiv@divisor+3,f,c
 11227  003D7A  2A31               	incf	___lldiv@counter,f,c
 11228  003D7C                     l6343:
 11229  003D7C  AE2C               	btfss	___lldiv@divisor+3,7,c
 11230  003D7E  D7F8               	goto	l6341
 11231  003D80                     l6345:
 11232  003D80  90D8               	bcf	status,0,c
 11233  003D82  362D               	rlcf	___lldiv@quotient,f,c
 11234  003D84  362E               	rlcf	___lldiv@quotient+1,f,c
 11235  003D86  362F               	rlcf	___lldiv@quotient+2,f,c
 11236  003D88  3630               	rlcf	___lldiv@quotient+3,f,c
 11237  003D8A  5029               	movf	___lldiv@divisor,w,c
 11238  003D8C  5C25               	subwf	___lldiv@dividend,w,c
 11239  003D8E  502A               	movf	___lldiv@divisor+1,w,c
 11240  003D90  5826               	subwfb	___lldiv@dividend+1,w,c
 11241  003D92  502B               	movf	___lldiv@divisor+2,w,c
 11242  003D94  5827               	subwfb	___lldiv@dividend+2,w,c
 11243  003D96  502C               	movf	___lldiv@divisor+3,w,c
 11244  003D98  5828               	subwfb	___lldiv@dividend+3,w,c
 11245  003D9A  A0D8               	btfss	status,0,c
 11246  003D9C  D009               	goto	l6353
 11247  003D9E  5029               	movf	___lldiv@divisor,w,c
 11248  003DA0  5E25               	subwf	___lldiv@dividend,f,c
 11249  003DA2  502A               	movf	___lldiv@divisor+1,w,c
 11250  003DA4  5A26               	subwfb	___lldiv@dividend+1,f,c
 11251  003DA6  502B               	movf	___lldiv@divisor+2,w,c
 11252  003DA8  5A27               	subwfb	___lldiv@dividend+2,f,c
 11253  003DAA  502C               	movf	___lldiv@divisor+3,w,c
 11254  003DAC  5A28               	subwfb	___lldiv@dividend+3,f,c
 11255  003DAE  802D               	bsf	___lldiv@quotient,0,c
 11256  003DB0                     l6353:
 11257  003DB0  90D8               	bcf	status,0,c
 11258  003DB2  322C               	rrcf	___lldiv@divisor+3,f,c
 11259  003DB4  322B               	rrcf	___lldiv@divisor+2,f,c
 11260  003DB6  322A               	rrcf	___lldiv@divisor+1,f,c
 11261  003DB8  3229               	rrcf	___lldiv@divisor,f,c
 11262  003DBA  2E31               	decfsz	___lldiv@counter,f,c
 11263  003DBC  D7E1               	goto	l6345
 11264  003DBE                     l1275:
 11265  003DBE  C02D  F025         	movff	___lldiv@quotient,?___lldiv
 11266  003DC2  C02E  F026         	movff	___lldiv@quotient+1,?___lldiv+1
 11267  003DC6  C02F  F027         	movff	___lldiv@quotient+2,?___lldiv+2
 11268  003DCA  C030  F028         	movff	___lldiv@quotient+3,?___lldiv+3
 11269  003DCE  0012               	return		;funcret
 11270  003DD0                     __end_of___lldiv:
 11271                           	opt stack 0
 11272                           tblptru	equ	0xFF8
 11273                           tblptrh	equ	0xFF7
 11274                           tblptrl	equ	0xFF6
 11275                           tablat	equ	0xFF5
 11276                           prodh	equ	0xFF4
 11277                           prodl	equ	0xFF3
 11278                           postinc0	equ	0xFEE
 11279                           wreg	equ	0xFE8
 11280                           postdec1	equ	0xFE5
 11281                           fsr1l	equ	0xFE1
 11282                           indf2	equ	0xFDF
 11283                           postinc2	equ	0xFDE
 11284                           postdec2	equ	0xFDD
 11285                           fsr2h	equ	0xFDA
 11286                           fsr2l	equ	0xFD9
 11287                           status	equ	0xFD8
 11288                           
 11289 ;; *************** function _getTime *****************
 11290 ;; Defined at:
 11291 ;;		line 23 in file "RTC.c"
 11292 ;; Parameters:    Size  Location     Type
 11293 ;;		None
 11294 ;; Auto vars:     Size  Location     Type
 11295 ;;  i               1   14[BANK0 ] unsigned char 
 11296 ;;  time           14    0[BANK0 ] int [7]
 11297 ;; Return value:  Size  Location     Type
 11298 ;;                  2   39[COMRAM] PTR int 
 11299 ;; Registers used:
 11300 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11301 ;; Tracked objects:
 11302 ;;		On entry : 0/0
 11303 ;;		On exit  : 0/0
 11304 ;;		Unchanged: 0/0
 11305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11306 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11307 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11308 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11309 ;;      Totals:         4      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11310 ;;Total ram usage:       19 bytes
 11311 ;; Hardware stack levels used:    1
 11312 ;; Hardware stack levels required when called:    5
 11313 ;; This function calls:
 11314 ;;		_I2C_Master_Read
 11315 ;;		_I2C_Master_Start
 11316 ;;		_I2C_Master_Stop
 11317 ;;		_I2C_Master_Write
 11318 ;; This function is called by:
 11319 ;;		_showDateTime
 11320 ;; This function uses a non-reentrant model
 11321 ;;
 11322                           
 11323                           	psect	text37
 11324  003BBA                     __ptext37:
 11325                           	opt stack 0
 11326  003BBA                     _getTime:
 11327                           	opt stack 23
 11328                           
 11329                           ;RTC.c: 24: int time[7];
 11330                           ;RTC.c: 26: (INTCONbits.GIE = 0);
 11331                           
 11332                           ;incstack = 0
 11333  003BBA  9EF2               	bcf	intcon,7,c	;volatile
 11334                           
 11335                           ;RTC.c: 29: I2C_Master_Start();
 11336  003BBC  EC08  F023         	call	_I2C_Master_Start	;wreg free
 11337                           
 11338                           ;RTC.c: 30: I2C_Master_Write(0b11010000);
 11339  003BC0  0E00               	movlw	0
 11340  003BC2  6E27               	movwf	I2C_Master_Write@d+1,c
 11341  003BC4  0ED0               	movlw	208
 11342  003BC6  6E26               	movwf	I2C_Master_Write@d,c
 11343  003BC8  ECEE  F022         	call	_I2C_Master_Write	;wreg free
 11344                           
 11345                           ;RTC.c: 31: I2C_Master_Write(0x00);
 11346  003BCC  0E00               	movlw	0
 11347  003BCE  6E27               	movwf	I2C_Master_Write@d+1,c
 11348  003BD0  0E00               	movlw	0
 11349  003BD2  6E26               	movwf	I2C_Master_Write@d,c
 11350  003BD4  ECEE  F022         	call	_I2C_Master_Write	;wreg free
 11351                           
 11352                           ;RTC.c: 32: I2C_Master_Stop();
 11353  003BD8  EC04  F023         	call	_I2C_Master_Stop	;wreg free
 11354                           
 11355                           ;RTC.c: 35: I2C_Master_Start();
 11356  003BDC  EC08  F023         	call	_I2C_Master_Start	;wreg free
 11357                           
 11358                           ;RTC.c: 36: I2C_Master_Write(0b11010001);
 11359  003BE0  0E00               	movlw	0
 11360  003BE2  6E27               	movwf	I2C_Master_Write@d+1,c
 11361  003BE4  0ED1               	movlw	209
 11362  003BE6  6E26               	movwf	I2C_Master_Write@d,c
 11363  003BE8  ECEE  F022         	call	_I2C_Master_Write	;wreg free
 11364                           
 11365                           ;RTC.c: 37: for(unsigned char i=0;i<6;i++){
 11366  003BEC  0E00               	movlw	0
 11367  003BEE  0100               	movlb	0	; () banked
 11368  003BF0  6F8E               	movwf	getTime@i& (0+255),b
 11369  003BF2                     l7179:
 11370                           
 11371                           ; BSR set to: 0
 11372  003BF2  0E05               	movlw	5
 11373  003BF4  0100               	movlb	0	; () banked
 11374  003BF6  658E               	cpfsgt	getTime@i& (0+255),b
 11375  003BF8  D001               	goto	l7183
 11376  003BFA  D015               	goto	l7189
 11377  003BFC                     l7183:
 11378                           
 11379                           ; BSR set to: 0
 11380                           ;RTC.c: 38: time[i] = I2C_Master_Read(1);
 11381  003BFC  0E01               	movlw	1
 11382  003BFE  EC45  F022         	call	_I2C_Master_Read
 11383  003C02  6E2A               	movwf	??_getTime& (0+255),c
 11384  003C04  6A2B               	clrf	(??_getTime+1)& (0+255),c
 11385  003C06  0100               	movlb	0	; () banked
 11386  003C08  518E               	movf	getTime@i& (0+255),w,b
 11387  003C0A  0D02               	mullw	2
 11388  003C0C  0E80               	movlw	low getTime@time
 11389  003C0E  24F3               	addwf	prodl,w,c
 11390  003C10  6ED9               	movwf	fsr2l,c
 11391  003C12  0E00               	movlw	high getTime@time
 11392  003C14  20F4               	addwfc	prodh,w,c
 11393  003C16  6EDA               	movwf	fsr2h,c
 11394  003C18  C02A  FFDE         	movff	??_getTime,postinc2
 11395  003C1C  C02B  FFDD         	movff	??_getTime+1,postdec2
 11396                           
 11397                           ; BSR set to: 0
 11398  003C20  0100               	movlb	0	; () banked
 11399  003C22  2B8E               	incf	getTime@i& (0+255),f,b
 11400  003C24  D7E6               	goto	l7179
 11401  003C26                     l7189:
 11402                           
 11403                           ; BSR set to: 0
 11404                           ;RTC.c: 39: }
 11405                           ;RTC.c: 40: time[6] = I2C_Master_Read(0);
 11406  003C26  0E00               	movlw	0
 11407  003C28  EC45  F022         	call	_I2C_Master_Read
 11408  003C2C  6E2A               	movwf	??_getTime& (0+255),c
 11409  003C2E  502A               	movf	??_getTime,w,c
 11410  003C30  0100               	movlb	0	; () banked
 11411  003C32  6F8C               	movwf	(getTime@time+12)& (0+255),b
 11412  003C34  6B8D               	clrf	(getTime@time+13)& (0+255),b
 11413                           
 11414                           ;RTC.c: 41: I2C_Master_Stop();
 11415  003C36  EC04  F023         	call	_I2C_Master_Stop	;wreg free
 11416                           
 11417                           ;RTC.c: 43: (INTCONbits.GIE = 1);
 11418  003C3A  8EF2               	bsf	intcon,7,c	;volatile
 11419                           
 11420                           ;RTC.c: 45: return time;
 11421  003C3C  0E80               	movlw	low getTime@time
 11422  003C3E  6E28               	movwf	?_getTime,c
 11423  003C40  0E00               	movlw	high getTime@time
 11424  003C42  6E29               	movwf	?_getTime+1,c
 11425  003C44  0012               	return	
 11426  003C46                     __end_of_getTime:
 11427                           	opt stack 0
 11428                           tblptru	equ	0xFF8
 11429                           tblptrh	equ	0xFF7
 11430                           tblptrl	equ	0xFF6
 11431                           tablat	equ	0xFF5
 11432                           prodh	equ	0xFF4
 11433                           prodl	equ	0xFF3
 11434                           intcon	equ	0xFF2
 11435                           postinc0	equ	0xFEE
 11436                           wreg	equ	0xFE8
 11437                           postdec1	equ	0xFE5
 11438                           fsr1l	equ	0xFE1
 11439                           indf2	equ	0xFDF
 11440                           postinc2	equ	0xFDE
 11441                           postdec2	equ	0xFDD
 11442                           fsr2h	equ	0xFDA
 11443                           fsr2l	equ	0xFD9
 11444                           status	equ	0xFD8
 11445                           
 11446 ;; *************** function _I2C_Master_Write *****************
 11447 ;; Defined at:
 11448 ;;		line 47 in file "I2C.c"
 11449 ;; Parameters:    Size  Location     Type
 11450 ;;  d               2   37[COMRAM] unsigned int 
 11451 ;; Auto vars:     Size  Location     Type
 11452 ;;		None
 11453 ;; Return value:  Size  Location     Type
 11454 ;;                  1    wreg      void 
 11455 ;; Registers used:
 11456 ;;		wreg, status,2, status,0, cstack
 11457 ;; Tracked objects:
 11458 ;;		On entry : 0/0
 11459 ;;		On exit  : 0/0
 11460 ;;		Unchanged: 0/0
 11461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11462 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11465 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11466 ;;Total ram usage:        2 bytes
 11467 ;; Hardware stack levels used:    1
 11468 ;; Hardware stack levels required when called:    4
 11469 ;; This function calls:
 11470 ;;		_I2C_Master_Wait
 11471 ;; This function is called by:
 11472 ;;		_getTime
 11473 ;;		_testFrequency
 11474 ;;		_setTime
 11475 ;; This function uses a non-reentrant model
 11476 ;;
 11477                           
 11478                           	psect	text38
 11479  0045DC                     __ptext38:
 11480                           	opt stack 0
 11481  0045DC                     _I2C_Master_Write:
 11482                           	opt stack 23
 11483                           
 11484                           ;I2C.c: 49: I2C_Master_Wait();
 11485                           
 11486                           ;incstack = 0
 11487  0045DC  ECD8  F022         	call	_I2C_Master_Wait	;wreg free
 11488                           
 11489                           ;I2C.c: 50: SSPBUF = d;
 11490  0045E0  C026  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 11491  0045E4  0012               	return		;funcret
 11492  0045E6                     __end_of_I2C_Master_Write:
 11493                           	opt stack 0
 11494                           tblptru	equ	0xFF8
 11495                           tblptrh	equ	0xFF7
 11496                           tblptrl	equ	0xFF6
 11497                           tablat	equ	0xFF5
 11498                           prodh	equ	0xFF4
 11499                           prodl	equ	0xFF3
 11500                           intcon	equ	0xFF2
 11501                           postinc0	equ	0xFEE
 11502                           wreg	equ	0xFE8
 11503                           postdec1	equ	0xFE5
 11504                           fsr1l	equ	0xFE1
 11505                           indf2	equ	0xFDF
 11506                           postinc2	equ	0xFDE
 11507                           postdec2	equ	0xFDD
 11508                           fsr2h	equ	0xFDA
 11509                           fsr2l	equ	0xFD9
 11510                           status	equ	0xFD8
 11511                           
 11512 ;; *************** function _I2C_Master_Stop *****************
 11513 ;; Defined at:
 11514 ;;		line 41 in file "I2C.c"
 11515 ;; Parameters:    Size  Location     Type
 11516 ;;		None
 11517 ;; Auto vars:     Size  Location     Type
 11518 ;;		None
 11519 ;; Return value:  Size  Location     Type
 11520 ;;                  2  448[None  ] int 
 11521 ;; Registers used:
 11522 ;;		wreg, status,2, status,0, cstack
 11523 ;; Tracked objects:
 11524 ;;		On entry : 0/0
 11525 ;;		On exit  : 0/0
 11526 ;;		Unchanged: 0/0
 11527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11531 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11532 ;;Total ram usage:        0 bytes
 11533 ;; Hardware stack levels used:    1
 11534 ;; Hardware stack levels required when called:    4
 11535 ;; This function calls:
 11536 ;;		_I2C_Master_Wait
 11537 ;; This function is called by:
 11538 ;;		_getTime
 11539 ;;		_testFrequency
 11540 ;;		_setTime
 11541 ;; This function uses a non-reentrant model
 11542 ;;
 11543                           
 11544                           	psect	text39
 11545  004608                     __ptext39:
 11546                           	opt stack 0
 11547  004608                     _I2C_Master_Stop:
 11548                           	opt stack 23
 11549                           
 11550                           ;I2C.c: 43: I2C_Master_Wait();
 11551                           
 11552                           ;incstack = 0
 11553  004608  ECD8  F022         	call	_I2C_Master_Wait	;wreg free
 11554                           
 11555                           ;I2C.c: 44: PEN = 1;
 11556  00460C  84C5               	bsf	4037,2,c	;volatile
 11557  00460E  0012               	return		;funcret
 11558  004610                     __end_of_I2C_Master_Stop:
 11559                           	opt stack 0
 11560                           tblptru	equ	0xFF8
 11561                           tblptrh	equ	0xFF7
 11562                           tblptrl	equ	0xFF6
 11563                           tablat	equ	0xFF5
 11564                           prodh	equ	0xFF4
 11565                           prodl	equ	0xFF3
 11566                           intcon	equ	0xFF2
 11567                           postinc0	equ	0xFEE
 11568                           wreg	equ	0xFE8
 11569                           postdec1	equ	0xFE5
 11570                           fsr1l	equ	0xFE1
 11571                           indf2	equ	0xFDF
 11572                           postinc2	equ	0xFDE
 11573                           postdec2	equ	0xFDD
 11574                           fsr2h	equ	0xFDA
 11575                           fsr2l	equ	0xFD9
 11576                           status	equ	0xFD8
 11577                           
 11578 ;; *************** function _I2C_Master_Start *****************
 11579 ;; Defined at:
 11580 ;;		line 29 in file "I2C.c"
 11581 ;; Parameters:    Size  Location     Type
 11582 ;;		None
 11583 ;; Auto vars:     Size  Location     Type
 11584 ;;		None
 11585 ;; Return value:  Size  Location     Type
 11586 ;;                  2  444[None  ] int 
 11587 ;; Registers used:
 11588 ;;		wreg, status,2, status,0, cstack
 11589 ;; Tracked objects:
 11590 ;;		On entry : 0/0
 11591 ;;		On exit  : 0/0
 11592 ;;		Unchanged: 0/0
 11593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11598 ;;Total ram usage:        0 bytes
 11599 ;; Hardware stack levels used:    1
 11600 ;; Hardware stack levels required when called:    4
 11601 ;; This function calls:
 11602 ;;		_I2C_Master_Wait
 11603 ;; This function is called by:
 11604 ;;		_getTime
 11605 ;;		_testFrequency
 11606 ;;		_setTime
 11607 ;; This function uses a non-reentrant model
 11608 ;;
 11609                           
 11610                           	psect	text40
 11611  004610                     __ptext40:
 11612                           	opt stack 0
 11613  004610                     _I2C_Master_Start:
 11614                           	opt stack 23
 11615                           
 11616                           ;I2C.c: 31: I2C_Master_Wait();
 11617                           
 11618                           ;incstack = 0
 11619  004610  ECD8  F022         	call	_I2C_Master_Wait	;wreg free
 11620                           
 11621                           ;I2C.c: 32: SEN = 1;
 11622  004614  80C5               	bsf	4037,0,c	;volatile
 11623  004616  0012               	return		;funcret
 11624  004618                     __end_of_I2C_Master_Start:
 11625                           	opt stack 0
 11626                           tblptru	equ	0xFF8
 11627                           tblptrh	equ	0xFF7
 11628                           tblptrl	equ	0xFF6
 11629                           tablat	equ	0xFF5
 11630                           prodh	equ	0xFF4
 11631                           prodl	equ	0xFF3
 11632                           intcon	equ	0xFF2
 11633                           postinc0	equ	0xFEE
 11634                           wreg	equ	0xFE8
 11635                           postdec1	equ	0xFE5
 11636                           fsr1l	equ	0xFE1
 11637                           indf2	equ	0xFDF
 11638                           postinc2	equ	0xFDE
 11639                           postdec2	equ	0xFDD
 11640                           fsr2h	equ	0xFDA
 11641                           fsr2l	equ	0xFD9
 11642                           status	equ	0xFD8
 11643                           
 11644 ;; *************** function _I2C_Master_Read *****************
 11645 ;; Defined at:
 11646 ;;		line 53 in file "I2C.c"
 11647 ;; Parameters:    Size  Location     Type
 11648 ;;  a               1    wreg     unsigned char 
 11649 ;; Auto vars:     Size  Location     Type
 11650 ;;  a               1   37[COMRAM] unsigned char 
 11651 ;;  temp            1   38[COMRAM] unsigned char 
 11652 ;; Return value:  Size  Location     Type
 11653 ;;                  1    wreg      unsigned char 
 11654 ;; Registers used:
 11655 ;;		wreg, status,2, status,0, cstack
 11656 ;; Tracked objects:
 11657 ;;		On entry : 0/0
 11658 ;;		On exit  : 0/0
 11659 ;;		Unchanged: 0/0
 11660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11662 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11664 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11665 ;;Total ram usage:        2 bytes
 11666 ;; Hardware stack levels used:    1
 11667 ;; Hardware stack levels required when called:    4
 11668 ;; This function calls:
 11669 ;;		_I2C_Master_Wait
 11670 ;; This function is called by:
 11671 ;;		_getTime
 11672 ;;		_testFrequency
 11673 ;; This function uses a non-reentrant model
 11674 ;;
 11675                           
 11676                           	psect	text41
 11677  00448A                     __ptext41:
 11678                           	opt stack 0
 11679  00448A                     _I2C_Master_Read:
 11680                           	opt stack 23
 11681                           
 11682                           ;incstack = 0
 11683                           ;I2C_Master_Read@a stored from wreg
 11684  00448A  6E26               	movwf	I2C_Master_Read@a,c
 11685                           
 11686                           ;I2C.c: 55: unsigned char temp;
 11687                           ;I2C.c: 56: I2C_Master_Wait();
 11688  00448C  ECD8  F022         	call	_I2C_Master_Wait	;wreg free
 11689                           
 11690                           ;I2C.c: 57: RCEN = 1;
 11691  004490  86C5               	bsf	4037,3,c	;volatile
 11692                           
 11693                           ;I2C.c: 58: I2C_Master_Wait();
 11694  004492  ECD8  F022         	call	_I2C_Master_Wait	;wreg free
 11695                           
 11696                           ;I2C.c: 59: temp = SSPBUF;
 11697  004496  CFC9 F027          	movff	4041,I2C_Master_Read@temp	;volatile
 11698                           
 11699                           ;I2C.c: 60: I2C_Master_Wait();
 11700  00449A  ECD8  F022         	call	_I2C_Master_Wait	;wreg free
 11701                           
 11702                           ;I2C.c: 61: ACKDT = (a)?0:1;
 11703  00449E  5026               	movf	I2C_Master_Read@a,w,c
 11704  0044A0  A4D8               	btfss	status,2,c
 11705  0044A2  D002               	goto	u6320
 11706  0044A4  8AC5               	bsf	4037,5,c	;volatile
 11707  0044A6  D001               	goto	l6393
 11708  0044A8                     u6320:
 11709  0044A8  9AC5               	bcf	4037,5,c	;volatile
 11710  0044AA                     l6393:
 11711                           
 11712                           ;I2C.c: 62: ACKEN = 1;
 11713  0044AA  88C5               	bsf	4037,4,c	;volatile
 11714                           
 11715                           ;I2C.c: 63: return temp;
 11716  0044AC  5027               	movf	I2C_Master_Read@temp,w,c
 11717  0044AE  0012               	return	
 11718  0044B0                     __end_of_I2C_Master_Read:
 11719                           	opt stack 0
 11720                           tblptru	equ	0xFF8
 11721                           tblptrh	equ	0xFF7
 11722                           tblptrl	equ	0xFF6
 11723                           tablat	equ	0xFF5
 11724                           prodh	equ	0xFF4
 11725                           prodl	equ	0xFF3
 11726                           intcon	equ	0xFF2
 11727                           postinc0	equ	0xFEE
 11728                           wreg	equ	0xFE8
 11729                           postdec1	equ	0xFE5
 11730                           fsr1l	equ	0xFE1
 11731                           indf2	equ	0xFDF
 11732                           postinc2	equ	0xFDE
 11733                           postdec2	equ	0xFDD
 11734                           fsr2h	equ	0xFDA
 11735                           fsr2l	equ	0xFD9
 11736                           status	equ	0xFD8
 11737                           
 11738 ;; *************** function _I2C_Master_Wait *****************
 11739 ;; Defined at:
 11740 ;;		line 24 in file "I2C.c"
 11741 ;; Parameters:    Size  Location     Type
 11742 ;;		None
 11743 ;; Auto vars:     Size  Location     Type
 11744 ;;		None
 11745 ;; Return value:  Size  Location     Type
 11746 ;;                  1    wreg      void 
 11747 ;; Registers used:
 11748 ;;		wreg, status,2, status,0
 11749 ;; Tracked objects:
 11750 ;;		On entry : 0/0
 11751 ;;		On exit  : 0/0
 11752 ;;		Unchanged: 0/0
 11753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11756 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11757 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11758 ;;Total ram usage:        1 bytes
 11759 ;; Hardware stack levels used:    1
 11760 ;; Hardware stack levels required when called:    3
 11761 ;; This function calls:
 11762 ;;		Nothing
 11763 ;; This function is called by:
 11764 ;;		_I2C_Master_Start
 11765 ;;		_I2C_Master_Stop
 11766 ;;		_I2C_Master_Write
 11767 ;;		_I2C_Master_Read
 11768 ;;		_I2C_Master_RepeatedStart
 11769 ;; This function uses a non-reentrant model
 11770 ;;
 11771                           
 11772                           	psect	text42
 11773  0045B0                     __ptext42:
 11774                           	opt stack 0
 11775  0045B0                     _I2C_Master_Wait:
 11776                           	opt stack 23
 11777  0045B0                     l519:
 11778  0045B0  B4C7               	btfsc	4039,2,c	;volatile
 11779  0045B2  D7FE               	goto	l519
 11780  0045B4  CFC5 F025          	movff	4037,??_I2C_Master_Wait	;volatile
 11781  0045B8  0E1F               	movlw	31
 11782  0045BA  1625               	andwf	??_I2C_Master_Wait,f,c
 11783  0045BC  B4D8               	btfsc	status,2,c
 11784  0045BE  0012               	return	
 11785  0045C0  D7F7               	goto	l519
 11786  0045C2                     __end_of_I2C_Master_Wait:
 11787                           	opt stack 0
 11788                           tblptru	equ	0xFF8
 11789                           tblptrh	equ	0xFF7
 11790                           tblptrl	equ	0xFF6
 11791                           tablat	equ	0xFF5
 11792                           prodh	equ	0xFF4
 11793                           prodl	equ	0xFF3
 11794                           intcon	equ	0xFF2
 11795                           postinc0	equ	0xFEE
 11796                           wreg	equ	0xFE8
 11797                           postdec1	equ	0xFE5
 11798                           fsr1l	equ	0xFE1
 11799                           indf2	equ	0xFDF
 11800                           postinc2	equ	0xFDE
 11801                           postdec2	equ	0xFDD
 11802                           fsr2h	equ	0xFDA
 11803                           fsr2l	equ	0xFD9
 11804                           status	equ	0xFD8
 11805                           
 11806 ;; *************** function _readPastRun *****************
 11807 ;; Defined at:
 11808 ;;		line 23 in file "eeprom.c"
 11809 ;; Parameters:    Size  Location     Type
 11810 ;;  run             2    4[BANK0 ] int 
 11811 ;; Auto vars:     Size  Location     Type
 11812 ;;  i               2   20[BANK0 ] int 
 11813 ;;  data           14    6[BANK0 ] int [7]
 11814 ;; Return value:  Size  Location     Type
 11815 ;;                  2    4[BANK0 ] PTR int 
 11816 ;; Registers used:
 11817 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11818 ;; Tracked objects:
 11819 ;;		On entry : 0/0
 11820 ;;		On exit  : 0/0
 11821 ;;		Unchanged: 0/0
 11822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11823 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11824 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11826 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11827 ;;Total ram usage:       18 bytes
 11828 ;; Hardware stack levels used:    1
 11829 ;; Hardware stack levels required when called:    4
 11830 ;; This function calls:
 11831 ;;		___wmul
 11832 ;;		_eepromRead
 11833 ;; This function is called by:
 11834 ;;		_showInterface
 11835 ;; This function uses a non-reentrant model
 11836 ;;
 11837                           
 11838                           	psect	text43
 11839  003A92                     __ptext43:
 11840                           	opt stack 0
 11841  003A92                     _readPastRun:
 11842                           	opt stack 25
 11843                           
 11844                           ;eeprom.c: 24: int data[7];
 11845                           ;eeprom.c: 25: for(int i = 0; i < 7; i++){
 11846                           
 11847                           ;incstack = 0
 11848  003A92  0E00               	movlw	0
 11849  003A94  0100               	movlb	0	; () banked
 11850  003A96  6F95               	movwf	(readPastRun@i+1)& (0+255),b
 11851  003A98  0E00               	movlw	0
 11852  003A9A  6F94               	movwf	readPastRun@i& (0+255),b
 11853  003A9C                     l7391:
 11854                           
 11855                           ; BSR set to: 0
 11856  003A9C  0100               	movlb	0	; () banked
 11857  003A9E  BF95               	btfsc	(readPastRun@i+1)& (0+255),7,b
 11858  003AA0  D008               	goto	l7395
 11859  003AA2  0100               	movlb	0	; () banked
 11860  003AA4  5195               	movf	(readPastRun@i+1)& (0+255),w,b
 11861  003AA6  E13A               	bnz	l7401
 11862  003AA8  0E07               	movlw	7
 11863  003AAA  0100               	movlb	0	; () banked
 11864  003AAC  5D94               	subwf	readPastRun@i& (0+255),w,b
 11865  003AAE  B0D8               	btfsc	status,0,c
 11866  003AB0  D035               	goto	l7401
 11867  003AB2                     l7395:
 11868                           
 11869                           ; BSR set to: 0
 11870                           ;eeprom.c: 26: data[i] = eepromRead((run*7+1) + i);
 11871  003AB2  C084  F033         	movff	readPastRun@run,___wmul@multiplier
 11872  003AB6  C085  F034         	movff	readPastRun@run+1,___wmul@multiplier+1
 11873  003ABA  0E00               	movlw	0
 11874  003ABC  6E36               	movwf	___wmul@multiplicand+1,c
 11875  003ABE  0E07               	movlw	7
 11876  003AC0  6E35               	movwf	___wmul@multiplicand,c
 11877  003AC2  EC58  F022         	call	___wmul	;wreg free
 11878  003AC6  0100               	movlb	0	; () banked
 11879  003AC8  5194               	movf	readPastRun@i& (0+255),w,b
 11880  003ACA  2633               	addwf	?___wmul,f,c
 11881  003ACC  0100               	movlb	0	; () banked
 11882  003ACE  5195               	movf	(readPastRun@i+1)& (0+255),w,b
 11883  003AD0  2234               	addwfc	?___wmul+1,f,c
 11884  003AD2  0E01               	movlw	1
 11885  003AD4  2633               	addwf	?___wmul,f,c
 11886  003AD6  0E00               	movlw	0
 11887  003AD8  2234               	addwfc	?___wmul+1,f,c
 11888  003ADA  C033  F080         	movff	?___wmul,eepromRead@address
 11889  003ADE  C034  F081         	movff	?___wmul+1,eepromRead@address+1
 11890  003AE2  0100               	movlb	0	; () banked
 11891  003AE4  0E00               	movlw	0
 11892  003AE6  BF81               	btfsc	(eepromRead@address+1)& (0+255),7,b
 11893  003AE8  0EFF               	movlw	-1
 11894  003AEA  6F82               	movwf	(eepromRead@address+2)& (0+255),b
 11895  003AEC  6F83               	movwf	(eepromRead@address+3)& (0+255),b
 11896  003AEE  ECBE  F022         	call	_eepromRead	;wreg free
 11897  003AF2  90D8               	bcf	status,0,c
 11898  003AF4  0100               	movlb	0	; () banked
 11899  003AF6  3594               	rlcf	readPastRun@i& (0+255),w,b
 11900  003AF8  6ED9               	movwf	fsr2l,c
 11901  003AFA  0100               	movlb	0	; () banked
 11902  003AFC  3595               	rlcf	(readPastRun@i+1)& (0+255),w,b
 11903  003AFE  6EDA               	movwf	fsr2h,c
 11904  003B00  0E86               	movlw	low readPastRun@data
 11905  003B02  26D9               	addwf	fsr2l,f,c
 11906  003B04  0E00               	movlw	high readPastRun@data
 11907  003B06  22DA               	addwfc	fsr2h,f,c
 11908  003B08  0100               	movlb	0	; () banked
 11909  003B0A  C080  FFDE         	movff	?_eepromRead,postinc2
 11910  003B0E  0100               	movlb	0	; () banked
 11911  003B10  C081  FFDD         	movff	?_eepromRead+1,postdec2
 11912                           
 11913                           ; BSR set to: 0
 11914  003B14  0100               	movlb	0	; () banked
 11915  003B16  4B94               	infsnz	readPastRun@i& (0+255),f,b
 11916  003B18  2B95               	incf	(readPastRun@i+1)& (0+255),f,b
 11917  003B1A  D7C0               	goto	l7391
 11918  003B1C                     l7401:
 11919                           
 11920                           ; BSR set to: 0
 11921                           ;eeprom.c: 27: }
 11922                           ;eeprom.c: 28: return data;
 11923  003B1C  0E86               	movlw	low readPastRun@data
 11924  003B1E  0100               	movlb	0	; () banked
 11925  003B20  6F84               	movwf	?_readPastRun& (0+255),b
 11926  003B22  0E00               	movlw	high readPastRun@data
 11927  003B24  0100               	movlb	0	; () banked
 11928  003B26  6F85               	movwf	(?_readPastRun+1)& (0+255),b
 11929  003B28  0012               	return	
 11930  003B2A                     __end_of_readPastRun:
 11931                           	opt stack 0
 11932                           tblptru	equ	0xFF8
 11933                           tblptrh	equ	0xFF7
 11934                           tblptrl	equ	0xFF6
 11935                           tablat	equ	0xFF5
 11936                           prodh	equ	0xFF4
 11937                           prodl	equ	0xFF3
 11938                           intcon	equ	0xFF2
 11939                           postinc0	equ	0xFEE
 11940                           wreg	equ	0xFE8
 11941                           postdec1	equ	0xFE5
 11942                           fsr1l	equ	0xFE1
 11943                           indf2	equ	0xFDF
 11944                           postinc2	equ	0xFDE
 11945                           postdec2	equ	0xFDD
 11946                           fsr2h	equ	0xFDA
 11947                           fsr2l	equ	0xFD9
 11948                           status	equ	0xFD8
 11949                           
 11950 ;; *************** function _saveNewRun *****************
 11951 ;; Defined at:
 11952 ;;		line 31 in file "eeprom.c"
 11953 ;; Parameters:    Size  Location     Type
 11954 ;;  data            2   12[BANK0 ] PTR int 
 11955 ;;		 -> main@run(14), 
 11956 ;; Auto vars:     Size  Location     Type
 11957 ;;  i               2   16[BANK0 ] int 
 11958 ;;  n               2   14[BANK0 ] int 
 11959 ;; Return value:  Size  Location     Type
 11960 ;;                  1    wreg      void 
 11961 ;; Registers used:
 11962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11963 ;; Tracked objects:
 11964 ;;		On entry : 0/0
 11965 ;;		On exit  : 0/0
 11966 ;;		Unchanged: 0/0
 11967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11968 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11969 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11971 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11972 ;;Total ram usage:        6 bytes
 11973 ;; Hardware stack levels used:    1
 11974 ;; Hardware stack levels required when called:    4
 11975 ;; This function calls:
 11976 ;;		___wmul
 11977 ;;		_eepromRead
 11978 ;;		_eepromWrite
 11979 ;; This function is called by:
 11980 ;;		_main
 11981 ;; This function uses a non-reentrant model
 11982 ;;
 11983                           
 11984                           	psect	text44
 11985  003436                     __ptext44:
 11986                           	opt stack 0
 11987  003436                     _saveNewRun:
 11988                           	opt stack 26
 11989                           
 11990                           ;eeprom.c: 33: eepromWrite(eepromRead(0)+1,0);
 11991                           
 11992                           ; BSR set to: 0
 11993                           ;incstack = 0
 11994  003436  0E00               	movlw	0
 11995  003438  0100               	movlb	0	; () banked
 11996  00343A  6F80               	movwf	eepromRead@address& (0+255),b
 11997  00343C  0E00               	movlw	0
 11998  00343E  6F81               	movwf	(eepromRead@address+1)& (0+255),b
 11999  003440  0E00               	movlw	0
 12000  003442  6F82               	movwf	(eepromRead@address+2)& (0+255),b
 12001  003444  0E00               	movlw	0
 12002  003446  6F83               	movwf	(eepromRead@address+3)& (0+255),b
 12003  003448  ECBE  F022         	call	_eepromRead	;wreg free
 12004  00344C  0E01               	movlw	1
 12005  00344E  0100               	movlb	0	; () banked
 12006  003450  2580               	addwf	?_eepromRead& (0+255),w,b
 12007  003452  0100               	movlb	0	; () banked
 12008  003454  6F84               	movwf	eepromWrite@data& (0+255),b
 12009  003456  0E00               	movlw	0
 12010  003458  0100               	movlb	0	; () banked
 12011  00345A  2181               	addwfc	(?_eepromRead+1)& (0+255),w,b
 12012  00345C  0100               	movlb	0	; () banked
 12013  00345E  6F85               	movwf	(eepromWrite@data+1)& (0+255),b
 12014  003460  0E00               	movlw	0
 12015  003462  0100               	movlb	0	; () banked
 12016  003464  6F86               	movwf	eepromWrite@address& (0+255),b
 12017  003466  0E00               	movlw	0
 12018  003468  6F87               	movwf	(eepromWrite@address+1)& (0+255),b
 12019  00346A  0E00               	movlw	0
 12020  00346C  6F88               	movwf	(eepromWrite@address+2)& (0+255),b
 12021  00346E  0E00               	movlw	0
 12022  003470  6F89               	movwf	(eepromWrite@address+3)& (0+255),b
 12023  003472  ECE0  F020         	call	_eepromWrite	;wreg free
 12024                           
 12025                           ;eeprom.c: 34: int n = eepromRead(0);
 12026  003476  0E00               	movlw	0
 12027  003478  0100               	movlb	0	; () banked
 12028  00347A  6F80               	movwf	eepromRead@address& (0+255),b
 12029  00347C  0E00               	movlw	0
 12030  00347E  6F81               	movwf	(eepromRead@address+1)& (0+255),b
 12031  003480  0E00               	movlw	0
 12032  003482  6F82               	movwf	(eepromRead@address+2)& (0+255),b
 12033  003484  0E00               	movlw	0
 12034  003486  6F83               	movwf	(eepromRead@address+3)& (0+255),b
 12035  003488  ECBE  F022         	call	_eepromRead	;wreg free
 12036  00348C  C080  F08E         	movff	?_eepromRead,saveNewRun@n
 12037  003490  C081  F08F         	movff	?_eepromRead+1,saveNewRun@n+1
 12038                           
 12039                           ;eeprom.c: 36: for(int i = 0; i < 7; i++){
 12040  003494  0E00               	movlw	0
 12041  003496  0100               	movlb	0	; () banked
 12042  003498  6F91               	movwf	(saveNewRun@i+1)& (0+255),b
 12043  00349A  0E00               	movlw	0
 12044  00349C  6F90               	movwf	saveNewRun@i& (0+255),b
 12045  00349E                     l7739:
 12046                           
 12047                           ; BSR set to: 0
 12048  00349E  0100               	movlb	0	; () banked
 12049  0034A0  BF91               	btfsc	(saveNewRun@i+1)& (0+255),7,b
 12050  0034A2  D008               	goto	l7743
 12051  0034A4  0100               	movlb	0	; () banked
 12052  0034A6  5191               	movf	(saveNewRun@i+1)& (0+255),w,b
 12053  0034A8  E13A               	bnz	l400
 12054  0034AA  0E07               	movlw	7
 12055  0034AC  0100               	movlb	0	; () banked
 12056  0034AE  5D90               	subwf	saveNewRun@i& (0+255),w,b
 12057  0034B0  B0D8               	btfsc	status,0,c
 12058  0034B2  0012               	return	
 12059  0034B4                     l7743:
 12060                           
 12061                           ; BSR set to: 0
 12062                           ;eeprom.c: 37: eepromWrite(data[i], (n*7+1) + i);
 12063  0034B4  90D8               	bcf	status,0,c
 12064  0034B6  0100               	movlb	0	; () banked
 12065  0034B8  3590               	rlcf	saveNewRun@i& (0+255),w,b
 12066  0034BA  6ED9               	movwf	fsr2l,c
 12067  0034BC  0100               	movlb	0	; () banked
 12068  0034BE  3591               	rlcf	(saveNewRun@i+1)& (0+255),w,b
 12069  0034C0  6EDA               	movwf	fsr2h,c
 12070  0034C2  0100               	movlb	0	; () banked
 12071  0034C4  518C               	movf	saveNewRun@data& (0+255),w,b
 12072  0034C6  26D9               	addwf	fsr2l,f,c
 12073  0034C8  0100               	movlb	0	; () banked
 12074  0034CA  518D               	movf	(saveNewRun@data+1)& (0+255),w,b
 12075  0034CC  22DA               	addwfc	fsr2h,f,c
 12076  0034CE  CFDE F084          	movff	postinc2,eepromWrite@data
 12077  0034D2  CFDD F085          	movff	postdec2,eepromWrite@data+1
 12078  0034D6  C08E  F033         	movff	saveNewRun@n,___wmul@multiplier
 12079  0034DA  C08F  F034         	movff	saveNewRun@n+1,___wmul@multiplier+1
 12080  0034DE  0E00               	movlw	0
 12081  0034E0  6E36               	movwf	___wmul@multiplicand+1,c
 12082  0034E2  0E07               	movlw	7
 12083  0034E4  6E35               	movwf	___wmul@multiplicand,c
 12084  0034E6  EC58  F022         	call	___wmul	;wreg free
 12085  0034EA  0100               	movlb	0	; () banked
 12086  0034EC  5190               	movf	saveNewRun@i& (0+255),w,b
 12087  0034EE  2633               	addwf	?___wmul,f,c
 12088  0034F0  0100               	movlb	0	; () banked
 12089  0034F2  5191               	movf	(saveNewRun@i+1)& (0+255),w,b
 12090  0034F4  2234               	addwfc	?___wmul+1,f,c
 12091  0034F6  0E01               	movlw	1
 12092  0034F8  2633               	addwf	?___wmul,f,c
 12093  0034FA  0E00               	movlw	0
 12094  0034FC  2234               	addwfc	?___wmul+1,f,c
 12095  0034FE  C033  F086         	movff	?___wmul,eepromWrite@address
 12096  003502  C034  F087         	movff	?___wmul+1,eepromWrite@address+1
 12097  003506  0100               	movlb	0	; () banked
 12098  003508  0E00               	movlw	0
 12099  00350A  BF87               	btfsc	(eepromWrite@address+1)& (0+255),7,b
 12100  00350C  0EFF               	movlw	-1
 12101  00350E  6F88               	movwf	(eepromWrite@address+2)& (0+255),b
 12102  003510  6F89               	movwf	(eepromWrite@address+3)& (0+255),b
 12103  003512  ECE0  F020         	call	_eepromWrite	;wreg free
 12104  003516  0100               	movlb	0	; () banked
 12105  003518  4B90               	infsnz	saveNewRun@i& (0+255),f,b
 12106  00351A  2B91               	incf	(saveNewRun@i+1)& (0+255),f,b
 12107  00351C  D7C0               	goto	l7739
 12108  00351E                     l400:
 12109                           
 12110                           ; BSR set to: 0
 12111  00351E  0012               	return		;funcret
 12112  003520                     __end_of_saveNewRun:
 12113                           	opt stack 0
 12114                           tblptru	equ	0xFF8
 12115                           tblptrh	equ	0xFF7
 12116                           tblptrl	equ	0xFF6
 12117                           tablat	equ	0xFF5
 12118                           prodh	equ	0xFF4
 12119                           prodl	equ	0xFF3
 12120                           intcon	equ	0xFF2
 12121                           postinc0	equ	0xFEE
 12122                           wreg	equ	0xFE8
 12123                           postdec1	equ	0xFE5
 12124                           fsr1l	equ	0xFE1
 12125                           indf2	equ	0xFDF
 12126                           postinc2	equ	0xFDE
 12127                           postdec2	equ	0xFDD
 12128                           fsr2h	equ	0xFDA
 12129                           fsr2l	equ	0xFD9
 12130                           status	equ	0xFD8
 12131                           
 12132 ;; *************** function _eepromWrite *****************
 12133 ;; Defined at:
 12134 ;;		line 41 in file "eeprom.c"
 12135 ;; Parameters:    Size  Location     Type
 12136 ;;  data            2    4[BANK0 ] int 
 12137 ;;  address         4    6[BANK0 ] long 
 12138 ;; Auto vars:     Size  Location     Type
 12139 ;;  ien             2   10[BANK0 ] int 
 12140 ;; Return value:  Size  Location     Type
 12141 ;;                  1    wreg      void 
 12142 ;; Registers used:
 12143 ;;		wreg, status,2, status,0
 12144 ;; Tracked objects:
 12145 ;;		On entry : 0/0
 12146 ;;		On exit  : 0/0
 12147 ;;		Unchanged: 0/0
 12148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12149 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12150 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12151 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12152 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12153 ;;Total ram usage:        9 bytes
 12154 ;; Hardware stack levels used:    1
 12155 ;; Hardware stack levels required when called:    3
 12156 ;; This function calls:
 12157 ;;		Nothing
 12158 ;; This function is called by:
 12159 ;;		_saveNewRun
 12160 ;; This function uses a non-reentrant model
 12161 ;;
 12162                           
 12163                           	psect	text45
 12164  0041C0                     __ptext45:
 12165                           	opt stack 0
 12166  0041C0                     _eepromWrite:
 12167                           	opt stack 26
 12168  0041C0                     l403:
 12169  0041C0  B2A6               	btfsc	4006,1,c	;volatile
 12170  0041C2  D7FE               	goto	l403
 12171                           
 12172                           ;eeprom.c: 45: int ien = INTCONbits.GIE;
 12173  0041C4  AEF2               	btfss	intcon,7,c	;volatile
 12174  0041C6  D003               	goto	u7940
 12175  0041C8  6A39               	clrf	??_eepromWrite& (0+255),c
 12176  0041CA  2A39               	incf	??_eepromWrite& (0+255),f,c
 12177  0041CC  D001               	goto	u7948
 12178  0041CE                     u7940:
 12179  0041CE  6A39               	clrf	??_eepromWrite& (0+255),c
 12180  0041D0                     u7948:
 12181  0041D0  5039               	movf	??_eepromWrite,w,c
 12182  0041D2  0100               	movlb	0	; () banked
 12183  0041D4  6F8A               	movwf	eepromWrite@ien& (0+255),b
 12184  0041D6  6B8B               	clrf	(eepromWrite@ien+1)& (0+255),b
 12185                           
 12186                           ; BSR set to: 0
 12187                           ;eeprom.c: 46: (INTCONbits.GIE = 0);
 12188  0041D8  9EF2               	bcf	intcon,7,c	;volatile
 12189                           
 12190                           ; BSR set to: 0
 12191                           ;eeprom.c: 47: EEADR = address;
 12192  0041DA  C086  FFA9         	movff	eepromWrite@address,4009	;volatile
 12193                           
 12194                           ; BSR set to: 0
 12195                           ;eeprom.c: 48: EEADRH = (address>>8) & 0b11;
 12196  0041DE  0100               	movlb	0	; () banked
 12197  0041E0  5187               	movf	(eepromWrite@address+1)& (0+255),w,b
 12198  0041E2  0B03               	andlw	3
 12199  0041E4  6EAA               	movwf	4010,c	;volatile
 12200                           
 12201                           ; BSR set to: 0
 12202                           ;eeprom.c: 49: EEDATA = data;
 12203  0041E6  C084  FFA8         	movff	eepromWrite@data,4008	;volatile
 12204                           
 12205                           ; BSR set to: 0
 12206                           ;eeprom.c: 50: EECON1 = 0b100;
 12207  0041EA  0E04               	movlw	4
 12208  0041EC  6EA6               	movwf	4006,c	;volatile
 12209                           
 12210                           ; BSR set to: 0
 12211                           ;eeprom.c: 52: EECON2 = 0x55;
 12212  0041EE  0E55               	movlw	85
 12213  0041F0  6EA7               	movwf	4007,c	;volatile
 12214                           
 12215                           ; BSR set to: 0
 12216                           ;eeprom.c: 53: EECON2 = 0xaa;
 12217  0041F2  0EAA               	movlw	170
 12218  0041F4  6EA7               	movwf	4007,c	;volatile
 12219                           
 12220                           ; BSR set to: 0
 12221                           ;eeprom.c: 57: EECON1 |= 0b10;
 12222  0041F6  82A6               	bsf	4006,1,c	;volatile
 12223  0041F8                     l406:
 12224  0041F8  B2A6               	btfsc	4006,1,c	;volatile
 12225  0041FA  D7FE               	goto	l406
 12226                           
 12227                           ;eeprom.c: 60: EEIF = 0;
 12228  0041FC  98A1               	bcf	4001,4,c	;volatile
 12229                           
 12230                           ;eeprom.c: 62: EECON1 = 0;
 12231  0041FE  0E00               	movlw	0
 12232  004200  6EA6               	movwf	4006,c	;volatile
 12233                           
 12234                           ;eeprom.c: 63: INTCONbits.GIE = ien;
 12235  004202  0100               	movlb	0	; () banked
 12236  004204  B18A               	btfsc	eepromWrite@ien& (0+255),0,b
 12237  004206  D002               	bra	u7965
 12238  004208  9EF2               	bcf	intcon,7,c	;volatile
 12239  00420A  D001               	bra	u7966
 12240  00420C                     u7965:
 12241  00420C  8EF2               	bsf	intcon,7,c	;volatile
 12242  00420E                     u7966:
 12243  00420E  0012               	return		;funcret
 12244  004210                     __end_of_eepromWrite:
 12245                           	opt stack 0
 12246                           tblptru	equ	0xFF8
 12247                           tblptrh	equ	0xFF7
 12248                           tblptrl	equ	0xFF6
 12249                           tablat	equ	0xFF5
 12250                           prodh	equ	0xFF4
 12251                           prodl	equ	0xFF3
 12252                           intcon	equ	0xFF2
 12253                           postinc0	equ	0xFEE
 12254                           wreg	equ	0xFE8
 12255                           postdec1	equ	0xFE5
 12256                           fsr1l	equ	0xFE1
 12257                           indf2	equ	0xFDF
 12258                           postinc2	equ	0xFDE
 12259                           postdec2	equ	0xFDD
 12260                           fsr2h	equ	0xFDA
 12261                           fsr2l	equ	0xFD9
 12262                           status	equ	0xFD8
 12263                           
 12264 ;; *************** function _eepromRead *****************
 12265 ;; Defined at:
 12266 ;;		line 66 in file "eeprom.c"
 12267 ;; Parameters:    Size  Location     Type
 12268 ;;  address         4    0[BANK0 ] long 
 12269 ;; Auto vars:     Size  Location     Type
 12270 ;;		None
 12271 ;; Return value:  Size  Location     Type
 12272 ;;                  2    0[BANK0 ] int 
 12273 ;; Registers used:
 12274 ;;		wreg, status,2, status,0
 12275 ;; Tracked objects:
 12276 ;;		On entry : 0/0
 12277 ;;		On exit  : 0/0
 12278 ;;		Unchanged: 0/0
 12279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12280 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12283 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12284 ;;Total ram usage:        4 bytes
 12285 ;; Hardware stack levels used:    1
 12286 ;; Hardware stack levels required when called:    3
 12287 ;; This function calls:
 12288 ;;		Nothing
 12289 ;; This function is called by:
 12290 ;;		_readPastRun
 12291 ;;		_saveNewRun
 12292 ;;		_debug
 12293 ;; This function uses a non-reentrant model
 12294 ;;
 12295                           
 12296                           	psect	text46
 12297  00457C                     __ptext46:
 12298                           	opt stack 0
 12299  00457C                     _eepromRead:
 12300                           	opt stack 25
 12301                           
 12302                           ;eeprom.c: 67: EEADR = address;
 12303                           
 12304                           ;incstack = 0
 12305  00457C  C080  FFA9         	movff	eepromRead@address,4009	;volatile
 12306                           
 12307                           ;eeprom.c: 68: EEADRH = (address>>8) & 0b11;
 12308  004580  0100               	movlb	0	; () banked
 12309  004582  5181               	movf	(eepromRead@address+1)& (0+255),w,b
 12310  004584  0B03               	andlw	3
 12311  004586  6EAA               	movwf	4010,c	;volatile
 12312                           
 12313                           ; BSR set to: 0
 12314                           ;eeprom.c: 69: EECON1 = 0;
 12315  004588  0E00               	movlw	0
 12316  00458A  6EA6               	movwf	4006,c	;volatile
 12317                           
 12318                           ; BSR set to: 0
 12319                           ;eeprom.c: 70: EECON1 = 1;
 12320  00458C  0E01               	movlw	1
 12321  00458E  6EA6               	movwf	4006,c	;volatile
 12322                           
 12323                           ; BSR set to: 0
 12324                           ;eeprom.c: 71: return EEDATA;
 12325  004590  CFA8 F080          	movff	4008,?_eepromRead	;volatile
 12326  004594  0100               	movlb	0	; () banked
 12327  004596  6B81               	clrf	(?_eepromRead+1)& (0+255),b
 12328  004598  0012               	return	
 12329  00459A                     __end_of_eepromRead:
 12330                           	opt stack 0
 12331                           tblptru	equ	0xFF8
 12332                           tblptrh	equ	0xFF7
 12333                           tblptrl	equ	0xFF6
 12334                           tablat	equ	0xFF5
 12335                           prodh	equ	0xFF4
 12336                           prodl	equ	0xFF3
 12337                           intcon	equ	0xFF2
 12338                           postinc0	equ	0xFEE
 12339                           wreg	equ	0xFE8
 12340                           postdec1	equ	0xFE5
 12341                           fsr1l	equ	0xFE1
 12342                           indf2	equ	0xFDF
 12343                           postinc2	equ	0xFDE
 12344                           postdec2	equ	0xFDD
 12345                           fsr2h	equ	0xFDA
 12346                           fsr2l	equ	0xFD9
 12347                           status	equ	0xFD8
 12348                           
 12349 ;; *************** function ___wmul *****************
 12350 ;; Defined at:
 12351 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 12352 ;; Parameters:    Size  Location     Type
 12353 ;;  multiplier      2   50[COMRAM] unsigned int 
 12354 ;;  multiplicand    2   52[COMRAM] unsigned int 
 12355 ;; Auto vars:     Size  Location     Type
 12356 ;;  product         2   54[COMRAM] unsigned int 
 12357 ;; Return value:  Size  Location     Type
 12358 ;;                  2   50[COMRAM] unsigned int 
 12359 ;; Registers used:
 12360 ;;		wreg, status,2, status,0, prodl, prodh
 12361 ;; Tracked objects:
 12362 ;;		On entry : 0/0
 12363 ;;		On exit  : 0/0
 12364 ;;		Unchanged: 0/0
 12365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12366 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12367 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12369 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12370 ;;Total ram usage:        6 bytes
 12371 ;; Hardware stack levels used:    1
 12372 ;; Hardware stack levels required when called:    3
 12373 ;; This function calls:
 12374 ;;		Nothing
 12375 ;; This function is called by:
 12376 ;;		_readPastRun
 12377 ;;		_saveNewRun
 12378 ;;		_fround
 12379 ;;		_scale
 12380 ;;		_printf
 12381 ;; This function uses a non-reentrant model
 12382 ;;
 12383                           
 12384                           	psect	text47
 12385  0044B0                     __ptext47:
 12386                           	opt stack 0
 12387  0044B0                     ___wmul:
 12388                           	opt stack 24
 12389                           
 12390                           ; BSR set to: 0
 12391                           ;incstack = 0
 12392  0044B0  5033               	movf	___wmul@multiplier,w,c
 12393  0044B2  0235               	mulwf	___wmul@multiplicand,c
 12394  0044B4  CFF3 F037          	movff	prodl,___wmul@product
 12395  0044B8  CFF4 F038          	movff	prodh,___wmul@product+1
 12396  0044BC  5033               	movf	___wmul@multiplier,w,c
 12397  0044BE  0236               	mulwf	___wmul@multiplicand+1,c
 12398  0044C0  50F3               	movf	prodl,w,c
 12399  0044C2  2638               	addwf	___wmul@product+1,f,c
 12400  0044C4  5034               	movf	___wmul@multiplier+1,w,c
 12401  0044C6  0235               	mulwf	___wmul@multiplicand,c
 12402  0044C8  50F3               	movf	prodl,w,c
 12403  0044CA  2638               	addwf	___wmul@product+1,f,c
 12404  0044CC  C037  F033         	movff	___wmul@product,?___wmul
 12405  0044D0  C038  F034         	movff	___wmul@product+1,?___wmul+1
 12406  0044D4  0012               	return	
 12407  0044D6                     __end_of___wmul:
 12408                           	opt stack 0
 12409                           tblptru	equ	0xFF8
 12410                           tblptrh	equ	0xFF7
 12411                           tblptrl	equ	0xFF6
 12412                           tablat	equ	0xFF5
 12413                           prodh	equ	0xFF4
 12414                           prodl	equ	0xFF3
 12415                           intcon	equ	0xFF2
 12416                           postinc0	equ	0xFEE
 12417                           wreg	equ	0xFE8
 12418                           postdec1	equ	0xFE5
 12419                           fsr1l	equ	0xFE1
 12420                           indf2	equ	0xFDF
 12421                           postinc2	equ	0xFDE
 12422                           postdec2	equ	0xFDD
 12423                           fsr2h	equ	0xFDA
 12424                           fsr2l	equ	0xFD9
 12425                           status	equ	0xFD8
 12426                           
 12427 ;; *************** function _pinSetup *****************
 12428 ;; Defined at:
 12429 ;;		line 325 in file "main.c"
 12430 ;; Parameters:    Size  Location     Type
 12431 ;;		None
 12432 ;; Auto vars:     Size  Location     Type
 12433 ;;		None
 12434 ;; Return value:  Size  Location     Type
 12435 ;;                  1    wreg      void 
 12436 ;; Registers used:
 12437 ;;		wreg, status,2, status,0
 12438 ;; Tracked objects:
 12439 ;;		On entry : 0/0
 12440 ;;		On exit  : 0/0
 12441 ;;		Unchanged: 0/0
 12442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12447 ;;Total ram usage:        0 bytes
 12448 ;; Hardware stack levels used:    1
 12449 ;; Hardware stack levels required when called:    3
 12450 ;; This function calls:
 12451 ;;		Nothing
 12452 ;; This function is called by:
 12453 ;;		_main
 12454 ;;		_debug
 12455 ;; This function uses a non-reentrant model
 12456 ;;
 12457                           
 12458                           	psect	text48
 12459  004384                     __ptext48:
 12460                           	opt stack 0
 12461  004384                     _pinSetup:
 12462                           	opt stack 27
 12463                           
 12464                           ;main.c: 331: TRISA = 0xFF;
 12465                           
 12466                           ;incstack = 0
 12467  004384  6892               	setf	3986,c	;volatile
 12468                           
 12469                           ;main.c: 332: TRISB = 0xFF;
 12470  004386  6893               	setf	3987,c	;volatile
 12471                           
 12472                           ;main.c: 333: TRISC = 0b11000000;
 12473  004388  0EC0               	movlw	192
 12474  00438A  6E94               	movwf	3988,c	;volatile
 12475                           
 12476                           ;main.c: 334: TRISD = 0x00;
 12477  00438C  0E00               	movlw	0
 12478  00438E  6E95               	movwf	3989,c	;volatile
 12479                           
 12480                           ;main.c: 335: TRISE = 0x00;
 12481  004390  0E00               	movlw	0
 12482  004392  6E96               	movwf	3990,c	;volatile
 12483                           
 12484                           ;main.c: 337: LATA = 0x00;
 12485  004394  0E00               	movlw	0
 12486  004396  6E89               	movwf	3977,c	;volatile
 12487                           
 12488                           ;main.c: 338: LATB = 0x00;
 12489  004398  0E00               	movlw	0
 12490  00439A  6E8A               	movwf	3978,c	;volatile
 12491                           
 12492                           ;main.c: 339: LATC = 0x00;
 12493  00439C  0E00               	movlw	0
 12494  00439E  6E8B               	movwf	3979,c	;volatile
 12495                           
 12496                           ;main.c: 340: LATD = 0x00;
 12497  0043A0  0E00               	movlw	0
 12498  0043A2  6E8C               	movwf	3980,c	;volatile
 12499                           
 12500                           ;main.c: 341: LATE = 0x00;
 12501  0043A4  0E00               	movlw	0
 12502  0043A6  6E8D               	movwf	3981,c	;volatile
 12503                           
 12504                           ;main.c: 343: ADCON0 = 0x00;
 12505  0043A8  0E00               	movlw	0
 12506  0043AA  6EC2               	movwf	4034,c	;volatile
 12507                           
 12508                           ;main.c: 345: ADCON1 |= 0x0B;
 12509  0043AC  0E0B               	movlw	11
 12510  0043AE  12C1               	iorwf	4033,f,c	;volatile
 12511                           
 12512                           ;main.c: 350: ADCON2 = 0;
 12513  0043B0  0E00               	movlw	0
 12514  0043B2  6EC0               	movwf	4032,c	;volatile
 12515                           
 12516                           ;main.c: 351: ADCON2 |= 0b010;
 12517  0043B4  82C0               	bsf	4032,1,c	;volatile
 12518                           
 12519                           ;main.c: 352: ADCON2 |= 0b110<<3;
 12520  0043B6  0E30               	movlw	48
 12521  0043B8  12C0               	iorwf	4032,f,c	;volatile
 12522                           
 12523                           ;main.c: 353: ADCON2 |= 1<<7;
 12524  0043BA  8EC0               	bsf	4032,7,c	;volatile
 12525                           
 12526                           ;main.c: 356: INT1IE = 1;
 12527  0043BC  86F0               	bsf	intcon3,3,c	;volatile
 12528                           
 12529                           ;main.c: 357: INT0IE = 1;
 12530  0043BE  88F2               	bsf	intcon,4,c	;volatile
 12531                           
 12532                           ;main.c: 358: (INTCONbits.GIE = 1);
 12533  0043C0  8EF2               	bsf	intcon,7,c	;volatile
 12534  0043C2  0012               	return		;funcret
 12535  0043C4                     __end_of_pinSetup:
 12536                           	opt stack 0
 12537                           tblptru	equ	0xFF8
 12538                           tblptrh	equ	0xFF7
 12539                           tblptrl	equ	0xFF6
 12540                           tablat	equ	0xFF5
 12541                           prodh	equ	0xFF4
 12542                           prodl	equ	0xFF3
 12543                           intcon	equ	0xFF2
 12544                           intcon3	equ	0xFF0
 12545                           postinc0	equ	0xFEE
 12546                           wreg	equ	0xFE8
 12547                           postdec1	equ	0xFE5
 12548                           fsr1l	equ	0xFE1
 12549                           indf2	equ	0xFDF
 12550                           postinc2	equ	0xFDE
 12551                           postdec2	equ	0xFDD
 12552                           fsr2h	equ	0xFDA
 12553                           fsr2l	equ	0xFD9
 12554                           status	equ	0xFD8
 12555                           
 12556 ;; *************** function _initServo *****************
 12557 ;; Defined at:
 12558 ;;		line 21 in file "servo.c"
 12559 ;; Parameters:    Size  Location     Type
 12560 ;;  motor           2   90[BANK0 ] PTR int 
 12561 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
 12562 ;;  angle           2   92[BANK0 ] int 
 12563 ;; Auto vars:     Size  Location     Type
 12564 ;;  i               2   98[BANK0 ] int 
 12565 ;; Return value:  Size  Location     Type
 12566 ;;                  1    wreg      void 
 12567 ;; Registers used:
 12568 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12569 ;; Tracked objects:
 12570 ;;		On entry : 0/0
 12571 ;;		On exit  : 0/0
 12572 ;;		Unchanged: 0/0
 12573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12574 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12575 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12576 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12577 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12578 ;;Total ram usage:       10 bytes
 12579 ;; Hardware stack levels used:    1
 12580 ;; Hardware stack levels required when called:    7
 12581 ;; This function calls:
 12582 ;;		_initTimer
 12583 ;;		_setAngle
 12584 ;;		_startTimer
 12585 ;; This function is called by:
 12586 ;;		_main
 12587 ;; This function uses a non-reentrant model
 12588 ;;
 12589                           
 12590                           	psect	text49
 12591  00333E                     __ptext49:
 12592                           	opt stack 0
 12593  00333E                     _initServo:
 12594                           	opt stack 23
 12595                           
 12596                           ;servo.c: 24: for(int i = 0; i < n; i++){
 12597                           
 12598                           ;incstack = 0
 12599  00333E  0E00               	movlw	0
 12600  003340  0100               	movlb	0	; () banked
 12601  003342  6FE3               	movwf	(initServo@i+1)& (0+255),b
 12602  003344  0E00               	movlw	0
 12603  003346  6FE2               	movwf	initServo@i& (0+255),b
 12604  003348  D022               	goto	l7589
 12605  00334A                     l7581:
 12606                           
 12607                           ; BSR set to: 0
 12608                           ;servo.c: 25: if(servos[i] == motor){
 12609  00334A  90D8               	bcf	status,0,c
 12610  00334C  0100               	movlb	0	; () banked
 12611  00334E  35E2               	rlcf	initServo@i& (0+255),w,b
 12612  003350  6ED9               	movwf	fsr2l,c
 12613  003352  0100               	movlb	0	; () banked
 12614  003354  35E3               	rlcf	(initServo@i+1)& (0+255),w,b
 12615  003356  6EDA               	movwf	fsr2h,c
 12616  003358  0E3A               	movlw	low _servos
 12617  00335A  26D9               	addwf	fsr2l,f,c
 12618  00335C  0E00               	movlw	high _servos
 12619  00335E  22DA               	addwfc	fsr2h,f,c
 12620  003360  0100               	movlb	0	; () banked
 12621  003362  51DA               	movf	initServo@motor& (0+255),w,b
 12622  003364  18DE               	xorwf	postinc2,w,c
 12623  003366  E110               	bnz	l7587
 12624  003368  0100               	movlb	0	; () banked
 12625  00336A  51DB               	movf	(initServo@motor+1)& (0+255),w,b
 12626  00336C  18DE               	xorwf	postinc2,w,c
 12627  00336E  A4D8               	btfss	status,2,c
 12628  003370  D00B               	goto	l7587
 12629                           
 12630                           ; BSR set to: 0
 12631                           ;servo.c: 26: setAngle(motor, angle);
 12632  003372  C0DA  F0D0         	movff	initServo@motor,setAngle@motor
 12633  003376  C0DB  F0D1         	movff	initServo@motor+1,setAngle@motor+1
 12634  00337A  C0DC  F0D2         	movff	initServo@angle,setAngle@angle
 12635  00337E  C0DD  F0D3         	movff	initServo@angle+1,setAngle@angle+1
 12636  003382  EC77  F01B         	call	_setAngle	;wreg free
 12637                           
 12638                           ;servo.c: 27: return;
 12639  003386  0012               	return	
 12640  003388                     l7587:
 12641                           
 12642                           ;servo.c: 28: };
 12643  003388  0100               	movlb	0	; () banked
 12644  00338A  4BE2               	infsnz	initServo@i& (0+255),f,b
 12645  00338C  2BE3               	incf	(initServo@i+1)& (0+255),f,b
 12646  00338E                     l7589:
 12647                           
 12648                           ; BSR set to: 0
 12649  00338E  0100               	movlb	0	; () banked
 12650  003390  51FE               	movf	_n& (0+255),w,b
 12651  003392  0100               	movlb	0	; () banked
 12652  003394  5DE2               	subwf	initServo@i& (0+255),w,b
 12653  003396  0100               	movlb	0	; () banked
 12654  003398  51E3               	movf	(initServo@i+1)& (0+255),w,b
 12655  00339A  0A80               	xorlw	128
 12656  00339C  0100               	movlb	0	; () banked
 12657  00339E  6FDE               	movwf	??_initServo& (0+255),b
 12658  0033A0  0100               	movlb	0	; () banked
 12659  0033A2  51FF               	movf	(_n+1)& (0+255),w,b
 12660  0033A4  0A80               	xorlw	128
 12661  0033A6  0100               	movlb	0	; () banked
 12662  0033A8  59DE               	subwfb	??_initServo& (0+255),w,b
 12663  0033AA  A0D8               	btfss	status,0,c
 12664  0033AC  D7CE               	goto	l7581
 12665                           
 12666                           ; BSR set to: 0
 12667                           ;servo.c: 29: }
 12668                           ;servo.c: 31: n++;
 12669                           
 12670                           ; BSR set to: 0
 12671  0033AE  0100               	movlb	0	; () banked
 12672  0033B0  4BFE               	infsnz	_n& (0+255),f,b
 12673  0033B2  2BFF               	incf	(_n+1)& (0+255),f,b
 12674                           
 12675                           ; BSR set to: 0
 12676                           ;servo.c: 32: servos[n-1] = motor;
 12677  0033B4  0EFE               	movlw	254
 12678  0033B6  0100               	movlb	0	; () banked
 12679  0033B8  6FDE               	movwf	??_initServo& (0+255),b
 12680  0033BA  0EFF               	movlw	255
 12681  0033BC  0100               	movlb	0	; () banked
 12682  0033BE  6FDF               	movwf	(??_initServo+1)& (0+255),b
 12683  0033C0  C0FE  F0E0         	movff	_n,??_initServo+2
 12684  0033C4  C0FF  F0E1         	movff	_n+1,??_initServo+3
 12685  0033C8  90D8               	bcf	status,0,c
 12686  0033CA  0100               	movlb	0	; () banked
 12687  0033CC  37E0               	rlcf	(??_initServo+2)& (0+255),f,b
 12688  0033CE  37E1               	rlcf	(??_initServo+3)& (0+255),f,b
 12689  0033D0  0100               	movlb	0	; () banked
 12690  0033D2  51DE               	movf	??_initServo& (0+255),w,b
 12691  0033D4  0100               	movlb	0	; () banked
 12692  0033D6  27E0               	addwf	(??_initServo+2)& (0+255),f,b
 12693  0033D8  0100               	movlb	0	; () banked
 12694  0033DA  51DF               	movf	(??_initServo+1)& (0+255),w,b
 12695  0033DC  0100               	movlb	0	; () banked
 12696  0033DE  23E1               	addwfc	(??_initServo+3)& (0+255),f,b
 12697  0033E0  0E3A               	movlw	low _servos
 12698  0033E2  0100               	movlb	0	; () banked
 12699  0033E4  25E0               	addwf	(??_initServo+2)& (0+255),w,b
 12700  0033E6  6ED9               	movwf	fsr2l,c
 12701  0033E8  0E00               	movlw	high _servos
 12702  0033EA  0100               	movlb	0	; () banked
 12703  0033EC  21E1               	addwfc	(??_initServo+3)& (0+255),w,b
 12704  0033EE  6EDA               	movwf	fsr2h,c
 12705  0033F0  C0DA  FFDE         	movff	initServo@motor,postinc2
 12706  0033F4  C0DB  FFDD         	movff	initServo@motor+1,postdec2
 12707                           
 12708                           ; BSR set to: 0
 12709                           ;servo.c: 33: setAngle(motor, angle);
 12710  0033F8  C0DA  F0D0         	movff	initServo@motor,setAngle@motor
 12711  0033FC  C0DB  F0D1         	movff	initServo@motor+1,setAngle@motor+1
 12712  003400  C0DC  F0D2         	movff	initServo@angle,setAngle@angle
 12713  003404  C0DD  F0D3         	movff	initServo@angle+1,setAngle@angle+1
 12714  003408  EC77  F01B         	call	_setAngle	;wreg free
 12715                           
 12716                           ;servo.c: 35: initTimer(0);
 12717  00340C  0E00               	movlw	0
 12718  00340E  6E26               	movwf	initTimer@timer+1,c
 12719  003410  0E00               	movlw	0
 12720  003412  6E25               	movwf	initTimer@timer,c
 12721  003414  EC7A  F021         	call	_initTimer	;wreg free
 12722                           
 12723                           ;servo.c: 36: startTimer(0,0);
 12724  003418  0E00               	movlw	0
 12725  00341A  6E26               	movwf	startTimer@timer+1,c
 12726  00341C  0E00               	movlw	0
 12727  00341E  6E25               	movwf	startTimer@timer,c
 12728  003420  0E00               	movlw	0
 12729  003422  6E27               	movwf	startTimer@val,c
 12730  003424  0E00               	movlw	0
 12731  003426  6E28               	movwf	startTimer@val+1,c
 12732  003428  0E00               	movlw	0
 12733  00342A  6E29               	movwf	startTimer@val+2,c
 12734  00342C  0E00               	movlw	0
 12735  00342E  6E2A               	movwf	startTimer@val+3,c
 12736  003430  EC2E  F021         	call	_startTimer	;wreg free
 12737  003434  0012               	return		;funcret
 12738  003436                     __end_of_initServo:
 12739                           	opt stack 0
 12740                           tblptru	equ	0xFF8
 12741                           tblptrh	equ	0xFF7
 12742                           tblptrl	equ	0xFF6
 12743                           tablat	equ	0xFF5
 12744                           prodh	equ	0xFF4
 12745                           prodl	equ	0xFF3
 12746                           intcon	equ	0xFF2
 12747                           intcon3	equ	0xFF0
 12748                           postinc0	equ	0xFEE
 12749                           wreg	equ	0xFE8
 12750                           postdec1	equ	0xFE5
 12751                           fsr1l	equ	0xFE1
 12752                           indf2	equ	0xFDF
 12753                           postinc2	equ	0xFDE
 12754                           postdec2	equ	0xFDD
 12755                           fsr2h	equ	0xFDA
 12756                           fsr2l	equ	0xFD9
 12757                           status	equ	0xFD8
 12758                           
 12759 ;; *************** function _startTimer *****************
 12760 ;; Defined at:
 12761 ;;		line 77 in file "timer.c"
 12762 ;; Parameters:    Size  Location     Type
 12763 ;;  timer           2   36[COMRAM] int 
 12764 ;;  val             4   38[COMRAM] long 
 12765 ;; Auto vars:     Size  Location     Type
 12766 ;;		None
 12767 ;; Return value:  Size  Location     Type
 12768 ;;                  1    wreg      void 
 12769 ;; Registers used:
 12770 ;;		wreg, status,2, status,0
 12771 ;; Tracked objects:
 12772 ;;		On entry : 0/0
 12773 ;;		On exit  : 0/0
 12774 ;;		Unchanged: 0/0
 12775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12776 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12778 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12779 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12780 ;;Total ram usage:        8 bytes
 12781 ;; Hardware stack levels used:    1
 12782 ;; Hardware stack levels required when called:    3
 12783 ;; This function calls:
 12784 ;;		Nothing
 12785 ;; This function is called by:
 12786 ;;		_main
 12787 ;;		_initServo
 12788 ;;		_testFrequency
 12789 ;; This function uses a non-reentrant model
 12790 ;;
 12791                           
 12792                           	psect	text50
 12793  00425C                     __ptext50:
 12794                           	opt stack 0
 12795  00425C                     _startTimer:
 12796                           	opt stack 27
 12797                           
 12798                           ;timer.c: 78: switch(timer){
 12799                           
 12800                           ;incstack = 0
 12801  00425C  D012               	goto	l5101
 12802  00425E                     l464:
 12803                           
 12804                           ;timer.c: 80: TMR0H = val>>8;
 12805  00425E  C028  FFD7         	movff	startTimer@val+1,4055	;volatile
 12806                           
 12807                           ;timer.c: 81: TMR0L = val;
 12808  004262  C027  FFD6         	movff	startTimer@val,4054	;volatile
 12809                           
 12810                           ;timer.c: 82: T0CON |= 1<<7;
 12811  004266  8ED5               	bsf	4053,7,c	;volatile
 12812                           
 12813                           ;timer.c: 83: break;
 12814  004268  0012               	return	
 12815  00426A                     l466:
 12816                           
 12817                           ;timer.c: 85: TMR1H = val>>8;
 12818  00426A  C028  FFCF         	movff	startTimer@val+1,4047	;volatile
 12819                           
 12820                           ;timer.c: 86: TMR1L = val;
 12821  00426E  C027  FFCE         	movff	startTimer@val,4046	;volatile
 12822                           
 12823                           ;timer.c: 87: T1CON |= 1<<0;
 12824  004272  80CD               	bsf	4045,0,c	;volatile
 12825                           
 12826                           ;timer.c: 88: break;
 12827  004274  0012               	return	
 12828  004276                     l467:
 12829                           
 12830                           ;timer.c: 90: TMR3H = val>>8;
 12831  004276  C028  FFB3         	movff	startTimer@val+1,4019	;volatile
 12832                           
 12833                           ;timer.c: 91: TMR3L = val;
 12834  00427A  C027  FFB2         	movff	startTimer@val,4018	;volatile
 12835                           
 12836                           ;timer.c: 92: T3CON |= 1<<0;
 12837  00427E  80B1               	bsf	4017,0,c	;volatile
 12838                           
 12839                           ;timer.c: 93: }
 12840  004280  0012               	return	
 12841  004282                     l5101:
 12842  004282  C025  F02B         	movff	startTimer@timer,??_startTimer
 12843  004286  C026  F02C         	movff	startTimer@timer+1,??_startTimer+1
 12844                           
 12845                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12846                           ; Switch size 1, requested type "space"
 12847                           ; Number of cases is 1, Range of values is 0 to 0
 12848                           ; switch strategies available:
 12849                           ; Name         Instructions Cycles
 12850                           ; simple_byte            4     3 (average)
 12851                           ;	Chosen strategy is simple_byte
 12852  00428A  502C               	movf	??_startTimer+1,w,c
 12853  00428C  0A00               	xorlw	0	; case 0
 12854  00428E  A4D8               	btfss	status,2,c
 12855  004290  0012               	return	
 12856                           
 12857                           ; Switch size 1, requested type "space"
 12858                           ; Number of cases is 3, Range of values is 0 to 3
 12859                           ; switch strategies available:
 12860                           ; Name         Instructions Cycles
 12861                           ; simple_byte           10     6 (average)
 12862                           ;	Chosen strategy is simple_byte
 12863  004292  502B               	movf	??_startTimer,w,c
 12864  004294  0A00               	xorlw	0	; case 0
 12865  004296  B4D8               	btfsc	status,2,c
 12866  004298  D7E2               	goto	l464
 12867  00429A  0A01               	xorlw	1	; case 1
 12868  00429C  B4D8               	btfsc	status,2,c
 12869  00429E  D7E5               	goto	l466
 12870  0042A0  0A02               	xorlw	2	; case 3
 12871  0042A2  A4D8               	btfss	status,2,c
 12872  0042A4  0012               	return	
 12873  0042A6  D7E7               	goto	l467
 12874  0042A8                     __end_of_startTimer:
 12875                           	opt stack 0
 12876                           tblptru	equ	0xFF8
 12877                           tblptrh	equ	0xFF7
 12878                           tblptrl	equ	0xFF6
 12879                           tablat	equ	0xFF5
 12880                           prodh	equ	0xFF4
 12881                           prodl	equ	0xFF3
 12882                           intcon	equ	0xFF2
 12883                           intcon3	equ	0xFF0
 12884                           postinc0	equ	0xFEE
 12885                           wreg	equ	0xFE8
 12886                           postdec1	equ	0xFE5
 12887                           fsr1l	equ	0xFE1
 12888                           indf2	equ	0xFDF
 12889                           postinc2	equ	0xFDE
 12890                           postdec2	equ	0xFDD
 12891                           fsr2h	equ	0xFDA
 12892                           fsr2l	equ	0xFD9
 12893                           status	equ	0xFD8
 12894                           
 12895 ;; *************** function _setAngle *****************
 12896 ;; Defined at:
 12897 ;;		line 47 in file "servo.c"
 12898 ;; Parameters:    Size  Location     Type
 12899 ;;  motor           2   80[BANK0 ] PTR int 
 12900 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
 12901 ;;  angle           2   82[BANK0 ] int 
 12902 ;; Auto vars:     Size  Location     Type
 12903 ;;  i               2   88[BANK0 ] int 
 12904 ;;  period          2   86[BANK0 ] unsigned int 
 12905 ;; Return value:  Size  Location     Type
 12906 ;;                  1    wreg      void 
 12907 ;; Registers used:
 12908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12909 ;; Tracked objects:
 12910 ;;		On entry : 0/0
 12911 ;;		On exit  : 0/0
 12912 ;;		Unchanged: 0/0
 12913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12914 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12915 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12916 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12917 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12918 ;;Total ram usage:       10 bytes
 12919 ;; Hardware stack levels used:    1
 12920 ;; Hardware stack levels required when called:    6
 12921 ;; This function calls:
 12922 ;;		_angleToPulse
 12923 ;; This function is called by:
 12924 ;;		_main
 12925 ;;		_sortBattery
 12926 ;;		_initServo
 12927 ;; This function uses a non-reentrant model
 12928 ;;
 12929                           
 12930                           	psect	text51
 12931  0036EE                     __ptext51:
 12932                           	opt stack 0
 12933  0036EE                     _setAngle:
 12934                           	opt stack 23
 12935                           
 12936                           ;servo.c: 48: unsigned int period = 50000;
 12937                           
 12938                           ;incstack = 0
 12939  0036EE  0EC3               	movlw	195
 12940  0036F0  0100               	movlb	0	; () banked
 12941  0036F2  6FD7               	movwf	(setAngle@period+1)& (0+255),b
 12942  0036F4  0E50               	movlw	80
 12943  0036F6  6FD6               	movwf	setAngle@period& (0+255),b
 12944                           
 12945                           ;servo.c: 49: for(int i = 0; i < n; i++){
 12946  0036F8  0E00               	movlw	0
 12947  0036FA  0100               	movlb	0	; () banked
 12948  0036FC  6FD9               	movwf	(setAngle@i+1)& (0+255),b
 12949  0036FE  0E00               	movlw	0
 12950  003700  6FD8               	movwf	setAngle@i& (0+255),b
 12951  003702  D03F               	goto	l7351
 12952  003704                     l7343:
 12953                           
 12954                           ; BSR set to: 0
 12955                           ;servo.c: 50: if(servos[i] == motor){
 12956  003704  90D8               	bcf	status,0,c
 12957  003706  0100               	movlb	0	; () banked
 12958  003708  35D8               	rlcf	setAngle@i& (0+255),w,b
 12959  00370A  6ED9               	movwf	fsr2l,c
 12960  00370C  0100               	movlb	0	; () banked
 12961  00370E  35D9               	rlcf	(setAngle@i+1)& (0+255),w,b
 12962  003710  6EDA               	movwf	fsr2h,c
 12963  003712  0E3A               	movlw	low _servos
 12964  003714  26D9               	addwf	fsr2l,f,c
 12965  003716  0E00               	movlw	high _servos
 12966  003718  22DA               	addwfc	fsr2h,f,c
 12967  00371A  0100               	movlb	0	; () banked
 12968  00371C  51D0               	movf	setAngle@motor& (0+255),w,b
 12969  00371E  18DE               	xorwf	postinc2,w,c
 12970  003720  E11C               	bnz	l7347
 12971  003722  0100               	movlb	0	; () banked
 12972  003724  51D1               	movf	(setAngle@motor+1)& (0+255),w,b
 12973  003726  18DE               	xorwf	postinc2,w,c
 12974  003728  A4D8               	btfss	status,2,c
 12975  00372A  D017               	goto	l7347
 12976                           
 12977                           ; BSR set to: 0
 12978                           ;servo.c: 51: pulse[i] = angleToPulse(angle);
 12979  00372C  C0D2  F0B9         	movff	setAngle@angle,angleToPulse@angle
 12980  003730  C0D3  F0BA         	movff	setAngle@angle+1,angleToPulse@angle+1
 12981  003734  ECB6  F013         	call	_angleToPulse	;wreg free
 12982  003738  90D8               	bcf	status,0,c
 12983  00373A  0100               	movlb	0	; () banked
 12984  00373C  35D8               	rlcf	setAngle@i& (0+255),w,b
 12985  00373E  6ED9               	movwf	fsr2l,c
 12986  003740  0100               	movlb	0	; () banked
 12987  003742  35D9               	rlcf	(setAngle@i+1)& (0+255),w,b
 12988  003744  6EDA               	movwf	fsr2h,c
 12989  003746  0E3F               	movlw	low _pulse
 12990  003748  26D9               	addwf	fsr2l,f,c
 12991  00374A  0E01               	movlw	high _pulse
 12992  00374C  22DA               	addwfc	fsr2h,f,c
 12993  00374E  0100               	movlb	0	; () banked
 12994  003750  C0B9  FFDE         	movff	?_angleToPulse,postinc2
 12995  003754  0100               	movlb	0	; () banked
 12996  003756  C0BA  FFDD         	movff	?_angleToPulse+1,postdec2
 12997  00375A                     l7347:
 12998                           
 12999                           ; BSR set to: 0
 13000                           ;servo.c: 52: }
 13001                           ;servo.c: 53: period-=pulse[i];
 13002  00375A  90D8               	bcf	status,0,c
 13003  00375C  0100               	movlb	0	; () banked
 13004  00375E  35D8               	rlcf	setAngle@i& (0+255),w,b
 13005  003760  6ED9               	movwf	fsr2l,c
 13006  003762  0100               	movlb	0	; () banked
 13007  003764  35D9               	rlcf	(setAngle@i+1)& (0+255),w,b
 13008  003766  6EDA               	movwf	fsr2h,c
 13009  003768  0E3F               	movlw	low _pulse
 13010  00376A  26D9               	addwf	fsr2l,f,c
 13011  00376C  0E01               	movlw	high _pulse
 13012  00376E  22DA               	addwfc	fsr2h,f,c
 13013  003770  50DE               	movf	postinc2,w,c
 13014  003772  0100               	movlb	0	; () banked
 13015  003774  5FD6               	subwf	setAngle@period& (0+255),f,b
 13016  003776  50DD               	movf	postdec2,w,c
 13017  003778  0100               	movlb	0	; () banked
 13018  00377A  5BD7               	subwfb	(setAngle@period+1)& (0+255),f,b
 13019                           
 13020                           ; BSR set to: 0
 13021  00377C  0100               	movlb	0	; () banked
 13022  00377E  4BD8               	infsnz	setAngle@i& (0+255),f,b
 13023  003780  2BD9               	incf	(setAngle@i+1)& (0+255),f,b
 13024  003782                     l7351:
 13025                           
 13026                           ; BSR set to: 0
 13027  003782  0100               	movlb	0	; () banked
 13028  003784  51FE               	movf	_n& (0+255),w,b
 13029  003786  0100               	movlb	0	; () banked
 13030  003788  5DD8               	subwf	setAngle@i& (0+255),w,b
 13031  00378A  0100               	movlb	0	; () banked
 13032  00378C  51D9               	movf	(setAngle@i+1)& (0+255),w,b
 13033  00378E  0A80               	xorlw	128
 13034  003790  0100               	movlb	0	; () banked
 13035  003792  6FD4               	movwf	??_setAngle& (0+255),b
 13036  003794  0100               	movlb	0	; () banked
 13037  003796  51FF               	movf	(_n+1)& (0+255),w,b
 13038  003798  0A80               	xorlw	128
 13039  00379A  0100               	movlb	0	; () banked
 13040  00379C  59D4               	subwfb	??_setAngle& (0+255),w,b
 13041  00379E  A0D8               	btfss	status,0,c
 13042  0037A0  D7B1               	goto	l7343
 13043                           
 13044                           ; BSR set to: 0
 13045                           ;servo.c: 54: }
 13046                           ;servo.c: 55: pulse[n] = period;
 13047                           
 13048                           ; BSR set to: 0
 13049  0037A2  90D8               	bcf	status,0,c
 13050  0037A4  0100               	movlb	0	; () banked
 13051  0037A6  35FE               	rlcf	_n& (0+255),w,b
 13052  0037A8  6ED9               	movwf	fsr2l,c
 13053  0037AA  0100               	movlb	0	; () banked
 13054  0037AC  35FF               	rlcf	(_n+1)& (0+255),w,b
 13055  0037AE  6EDA               	movwf	fsr2h,c
 13056  0037B0  0E3F               	movlw	low _pulse
 13057  0037B2  26D9               	addwf	fsr2l,f,c
 13058  0037B4  0E01               	movlw	high _pulse
 13059  0037B6  22DA               	addwfc	fsr2h,f,c
 13060  0037B8  C0D6  FFDE         	movff	setAngle@period,postinc2
 13061  0037BC  C0D7  FFDD         	movff	setAngle@period+1,postdec2
 13062                           
 13063                           ; BSR set to: 0
 13064  0037C0  0012               	return		;funcret
 13065  0037C2                     __end_of_setAngle:
 13066                           	opt stack 0
 13067                           tblptru	equ	0xFF8
 13068                           tblptrh	equ	0xFF7
 13069                           tblptrl	equ	0xFF6
 13070                           tablat	equ	0xFF5
 13071                           prodh	equ	0xFF4
 13072                           prodl	equ	0xFF3
 13073                           intcon	equ	0xFF2
 13074                           intcon3	equ	0xFF0
 13075                           postinc0	equ	0xFEE
 13076                           wreg	equ	0xFE8
 13077                           postdec1	equ	0xFE5
 13078                           fsr1l	equ	0xFE1
 13079                           indf2	equ	0xFDF
 13080                           postinc2	equ	0xFDE
 13081                           postdec2	equ	0xFDD
 13082                           fsr2h	equ	0xFDA
 13083                           fsr2l	equ	0xFD9
 13084                           status	equ	0xFD8
 13085                           
 13086 ;; *************** function _angleToPulse *****************
 13087 ;; Defined at:
 13088 ;;		line 39 in file "servo.c"
 13089 ;; Parameters:    Size  Location     Type
 13090 ;;  angle           2   57[BANK0 ] int 
 13091 ;; Auto vars:     Size  Location     Type
 13092 ;;  a000            4   76[BANK0 ] long 
 13093 ;;  a180            4   69[BANK0 ] long 
 13094 ;;  offset          4   65[BANK0 ] long 
 13095 ;; Return value:  Size  Location     Type
 13096 ;;                  4   57[BANK0 ] long 
 13097 ;; Registers used:
 13098 ;;		wreg, status,2, status,0, cstack
 13099 ;; Tracked objects:
 13100 ;;		On entry : 0/0
 13101 ;;		On exit  : 0/0
 13102 ;;		Unchanged: 0/0
 13103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13104 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13105 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13106 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13107 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13108 ;;Total ram usage:       23 bytes
 13109 ;; Hardware stack levels used:    1
 13110 ;; Hardware stack levels required when called:    5
 13111 ;; This function calls:
 13112 ;;		___altoft
 13113 ;;		___awtoft
 13114 ;;		___ftadd
 13115 ;;		___ftdiv
 13116 ;;		___ftmul
 13117 ;;		___fttol
 13118 ;; This function is called by:
 13119 ;;		_setAngle
 13120 ;; This function uses a non-reentrant model
 13121 ;;
 13122                           
 13123                           	psect	text52
 13124  00276C                     __ptext52:
 13125                           	opt stack 0
 13126  00276C                     _angleToPulse:
 13127                           	opt stack 23
 13128                           
 13129                           ;servo.c: 40: long offset = -600;
 13130                           
 13131                           ; BSR set to: 0
 13132                           ;incstack = 0
 13133  00276C  0EA8               	movlw	168
 13134  00276E  0100               	movlb	0	; () banked
 13135  002770  6FC1               	movwf	angleToPulse@offset& (0+255),b
 13136  002772  0EFD               	movlw	253
 13137  002774  6FC2               	movwf	(angleToPulse@offset+1)& (0+255),b
 13138  002776  0EFF               	movlw	255
 13139  002778  6FC3               	movwf	(angleToPulse@offset+2)& (0+255),b
 13140  00277A  0EFF               	movlw	255
 13141  00277C  6FC4               	movwf	(angleToPulse@offset+3)& (0+255),b
 13142                           
 13143                           ;servo.c: 41: long a000 = 1250;
 13144  00277E  0EE2               	movlw	226
 13145  002780  0100               	movlb	0	; () banked
 13146  002782  6FCC               	movwf	angleToPulse@a000& (0+255),b
 13147  002784  0E04               	movlw	4
 13148  002786  6FCD               	movwf	(angleToPulse@a000+1)& (0+255),b
 13149  002788  0E00               	movlw	0
 13150  00278A  6FCE               	movwf	(angleToPulse@a000+2)& (0+255),b
 13151  00278C  0E00               	movlw	0
 13152  00278E  6FCF               	movwf	(angleToPulse@a000+3)& (0+255),b
 13153                           
 13154                           ;servo.c: 42: long a180 = 6250;
 13155  002790  0E6A               	movlw	106
 13156  002792  0100               	movlb	0	; () banked
 13157  002794  6FC5               	movwf	angleToPulse@a180& (0+255),b
 13158  002796  0E18               	movlw	24
 13159  002798  6FC6               	movwf	(angleToPulse@a180+1)& (0+255),b
 13160  00279A  0E00               	movlw	0
 13161  00279C  6FC7               	movwf	(angleToPulse@a180+2)& (0+255),b
 13162  00279E  0E00               	movlw	0
 13163  0027A0  6FC8               	movwf	(angleToPulse@a180+3)& (0+255),b
 13164                           
 13165                           ; BSR set to: 0
 13166                           ;servo.c: 44: return a000 + angle/180.0*(a180-a000) + offset;
 13167  0027A2  C0CC  F0BD         	movff	angleToPulse@a000,??_angleToPulse
 13168  0027A6  C0CD  F0BE         	movff	angleToPulse@a000+1,??_angleToPulse+1
 13169  0027AA  C0CE  F0BF         	movff	angleToPulse@a000+2,??_angleToPulse+2
 13170  0027AE  C0CF  F0C0         	movff	angleToPulse@a000+3,??_angleToPulse+3
 13171  0027B2  0100               	movlb	0	; () banked
 13172  0027B4  1FBD               	comf	??_angleToPulse& (0+255),f,b
 13173  0027B6  1FBE               	comf	(??_angleToPulse+1)& (0+255),f,b
 13174  0027B8  1FBF               	comf	(??_angleToPulse+2)& (0+255),f,b
 13175  0027BA  1FC0               	comf	(??_angleToPulse+3)& (0+255),f,b
 13176  0027BC  2BBD               	incf	??_angleToPulse& (0+255),f,b
 13177  0027BE  0E00               	movlw	0
 13178  0027C0  23BE               	addwfc	(??_angleToPulse+1)& (0+255),f,b
 13179  0027C2  23BF               	addwfc	(??_angleToPulse+2)& (0+255),f,b
 13180  0027C4  23C0               	addwfc	(??_angleToPulse+3)& (0+255),f,b
 13181  0027C6  0100               	movlb	0	; () banked
 13182  0027C8  51C5               	movf	angleToPulse@a180& (0+255),w,b
 13183  0027CA  0100               	movlb	0	; () banked
 13184  0027CC  25BD               	addwf	??_angleToPulse& (0+255),w,b
 13185  0027CE  6E2D               	movwf	___altoft@c,c
 13186  0027D0  0100               	movlb	0	; () banked
 13187  0027D2  51C6               	movf	(angleToPulse@a180+1)& (0+255),w,b
 13188  0027D4  0100               	movlb	0	; () banked
 13189  0027D6  21BE               	addwfc	(??_angleToPulse+1)& (0+255),w,b
 13190  0027D8  6E2E               	movwf	___altoft@c+1,c
 13191  0027DA  0100               	movlb	0	; () banked
 13192  0027DC  51C7               	movf	(angleToPulse@a180+2)& (0+255),w,b
 13193  0027DE  0100               	movlb	0	; () banked
 13194  0027E0  21BF               	addwfc	(??_angleToPulse+2)& (0+255),w,b
 13195  0027E2  6E2F               	movwf	___altoft@c+2,c
 13196  0027E4  0100               	movlb	0	; () banked
 13197  0027E6  51C8               	movf	(angleToPulse@a180+3)& (0+255),w,b
 13198  0027E8  0100               	movlb	0	; () banked
 13199  0027EA  21C0               	addwfc	(??_angleToPulse+3)& (0+255),w,b
 13200  0027EC  6E30               	movwf	___altoft@c+3,c
 13201  0027EE  ECE8  F01E         	call	___altoft	;wreg free
 13202  0027F2  C02D  F083         	movff	?___altoft,___ftmul@f2
 13203  0027F6  C02E  F084         	movff	?___altoft+1,___ftmul@f2+1
 13204  0027FA  C02F  F085         	movff	?___altoft+2,___ftmul@f2+2
 13205  0027FE  0E00               	movlw	0
 13206  002800  0100               	movlb	0	; () banked
 13207  002802  6F92               	movwf	___ftdiv@f2& (0+255),b
 13208  002804  0E34               	movlw	52
 13209  002806  0100               	movlb	0	; () banked
 13210  002808  6F93               	movwf	(___ftdiv@f2+1)& (0+255),b
 13211  00280A  0E43               	movlw	67
 13212  00280C  0100               	movlb	0	; () banked
 13213  00280E  6F94               	movwf	(___ftdiv@f2+2)& (0+255),b
 13214  002810  C0B9  F02D         	movff	angleToPulse@angle,___awtoft@c
 13215  002814  C0BA  F02E         	movff	angleToPulse@angle+1,___awtoft@c+1
 13216  002818  ECFE  F021         	call	___awtoft	;wreg free
 13217  00281C  C02D  F08F         	movff	?___awtoft,___ftdiv@f1
 13218  002820  C02E  F090         	movff	?___awtoft+1,___ftdiv@f1+1
 13219  002824  C02F  F091         	movff	?___awtoft+2,___ftdiv@f1+2
 13220  002828  EC14  F015         	call	___ftdiv	;wreg free
 13221  00282C  C08F  F080         	movff	?___ftdiv,___ftmul@f1
 13222  002830  C090  F081         	movff	?___ftdiv+1,___ftmul@f1+1
 13223  002834  C091  F082         	movff	?___ftdiv+2,___ftmul@f1+2
 13224  002838  EC65  F014         	call	___ftmul	;wreg free
 13225  00283C  C080  F0A1         	movff	?___ftmul,___ftadd@f2
 13226  002840  C081  F0A2         	movff	?___ftmul+1,___ftadd@f2+1
 13227  002844  C082  F0A3         	movff	?___ftmul+2,___ftadd@f2+2
 13228  002848  C0CC  F02D         	movff	angleToPulse@a000,___altoft@c
 13229  00284C  C0CD  F02E         	movff	angleToPulse@a000+1,___altoft@c+1
 13230  002850  C0CE  F02F         	movff	angleToPulse@a000+2,___altoft@c+2
 13231  002854  C0CF  F030         	movff	angleToPulse@a000+3,___altoft@c+3
 13232  002858  ECE8  F01E         	call	___altoft	;wreg free
 13233  00285C  C02D  F09E         	movff	?___altoft,___ftadd@f1
 13234  002860  C02E  F09F         	movff	?___altoft+1,___ftadd@f1+1
 13235  002864  C02F  F0A0         	movff	?___altoft+2,___ftadd@f1+2
 13236  002868  ECD1  F00F         	call	___ftadd	;wreg free
 13237  00286C  C09E  F0C9         	movff	?___ftadd,_angleToPulse$1419
 13238  002870  C09F  F0CA         	movff	?___ftadd+1,_angleToPulse$1419+1
 13239  002874  C0A0  F0CB         	movff	?___ftadd+2,_angleToPulse$1419+2
 13240                           
 13241                           ;servo.c: 44: return a000 + angle/180.0*(a180-a000) + offset;
 13242  002878  C0C1  F02D         	movff	angleToPulse@offset,___altoft@c
 13243  00287C  C0C2  F02E         	movff	angleToPulse@offset+1,___altoft@c+1
 13244  002880  C0C3  F02F         	movff	angleToPulse@offset+2,___altoft@c+2
 13245  002884  C0C4  F030         	movff	angleToPulse@offset+3,___altoft@c+3
 13246  002888  ECE8  F01E         	call	___altoft	;wreg free
 13247  00288C  C02D  F0A1         	movff	?___altoft,___ftadd@f2
 13248  002890  C02E  F0A2         	movff	?___altoft+1,___ftadd@f2+1
 13249  002894  C02F  F0A3         	movff	?___altoft+2,___ftadd@f2+2
 13250  002898  C0C9  F09E         	movff	_angleToPulse$1419,___ftadd@f1
 13251  00289C  C0CA  F09F         	movff	_angleToPulse$1419+1,___ftadd@f1+1
 13252  0028A0  C0CB  F0A0         	movff	_angleToPulse$1419+2,___ftadd@f1+2
 13253  0028A4  ECD1  F00F         	call	___ftadd	;wreg free
 13254  0028A8  C09E  F0AA         	movff	?___ftadd,___fttol@f1
 13255  0028AC  C09F  F0AB         	movff	?___ftadd+1,___fttol@f1+1
 13256  0028B0  C0A0  F0AC         	movff	?___ftadd+2,___fttol@f1+2
 13257  0028B4  ECBA  F015         	call	___fttol	;wreg free
 13258  0028B8  C0AA  F0B9         	movff	?___fttol,?_angleToPulse
 13259  0028BC  C0AB  F0BA         	movff	?___fttol+1,?_angleToPulse+1
 13260  0028C0  C0AC  F0BB         	movff	?___fttol+2,?_angleToPulse+2
 13261  0028C4  C0AD  F0BC         	movff	?___fttol+3,?_angleToPulse+3
 13262  0028C8  0012               	return	
 13263  0028CA                     __end_of_angleToPulse:
 13264                           	opt stack 0
 13265                           tblptru	equ	0xFF8
 13266                           tblptrh	equ	0xFF7
 13267                           tblptrl	equ	0xFF6
 13268                           tablat	equ	0xFF5
 13269                           prodh	equ	0xFF4
 13270                           prodl	equ	0xFF3
 13271                           intcon	equ	0xFF2
 13272                           intcon3	equ	0xFF0
 13273                           postinc0	equ	0xFEE
 13274                           wreg	equ	0xFE8
 13275                           postdec1	equ	0xFE5
 13276                           fsr1l	equ	0xFE1
 13277                           indf2	equ	0xFDF
 13278                           postinc2	equ	0xFDE
 13279                           postdec2	equ	0xFDD
 13280                           fsr2h	equ	0xFDA
 13281                           fsr2l	equ	0xFD9
 13282                           status	equ	0xFD8
 13283                           
 13284 ;; *************** function ___fttol *****************
 13285 ;; Defined at:
 13286 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 13287 ;; Parameters:    Size  Location     Type
 13288 ;;  f1              3   42[BANK0 ] float 
 13289 ;; Auto vars:     Size  Location     Type
 13290 ;;  lval            4   52[BANK0 ] unsigned long 
 13291 ;;  exp1            1   56[BANK0 ] unsigned char 
 13292 ;;  sign1           1   51[BANK0 ] unsigned char 
 13293 ;; Return value:  Size  Location     Type
 13294 ;;                  4   42[BANK0 ] long 
 13295 ;; Registers used:
 13296 ;;		wreg, status,2, status,0
 13297 ;; Tracked objects:
 13298 ;;		On entry : 0/0
 13299 ;;		On exit  : 0/0
 13300 ;;		Unchanged: 0/0
 13301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13302 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13303 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13304 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13305 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13306 ;;Total ram usage:       15 bytes
 13307 ;; Hardware stack levels used:    1
 13308 ;; Hardware stack levels required when called:    3
 13309 ;; This function calls:
 13310 ;;		Nothing
 13311 ;; This function is called by:
 13312 ;;		_main
 13313 ;;		_sortBattery
 13314 ;;		_angleToPulse
 13315 ;;		_printf
 13316 ;; This function uses a non-reentrant model
 13317 ;;
 13318                           
 13319                           	psect	text53
 13320  002B74                     __ptext53:
 13321                           	opt stack 0
 13322  002B74                     ___fttol:
 13323                           	opt stack 24
 13324                           
 13325                           ;incstack = 0
 13326  002B74  C0AC  F0AE         	movff	___fttol@f1+2,??___fttol
 13327  002B78  0100               	movlb	0	; () banked
 13328  002B7A  6BAF               	clrf	(??___fttol+1)& (0+255),b
 13329  002B7C  6BB0               	clrf	(??___fttol+2)& (0+255),b
 13330  002B7E  0100               	movlb	0	; () banked
 13331  002B80  35AB               	rlcf	(___fttol@f1+1)& (0+255),w,b
 13332  002B82  0100               	movlb	0	; () banked
 13333  002B84  37AE               	rlcf	??___fttol& (0+255),f,b
 13334  002B86  E301               	bnc	u6721
 13335  002B88  81AF               	bsf	(??___fttol+1)& (0+255),0,b
 13336  002B8A                     u6721:
 13337  002B8A  0100               	movlb	0	; () banked
 13338  002B8C  51AE               	movf	??___fttol& (0+255),w,b
 13339  002B8E  0100               	movlb	0	; () banked
 13340  002B90  6FB8               	movwf	___fttol@exp1& (0+255),b
 13341  002B92  0100               	movlb	0	; () banked
 13342  002B94  51B8               	movf	___fttol@exp1& (0+255),w,b
 13343  002B96  A4D8               	btfss	status,2,c
 13344  002B98  D00A               	goto	l6697
 13345                           
 13346                           ; BSR set to: 0
 13347  002B9A  0E00               	movlw	0
 13348  002B9C  0100               	movlb	0	; () banked
 13349  002B9E  6FAA               	movwf	?___fttol& (0+255),b
 13350  002BA0  0E00               	movlw	0
 13351  002BA2  6FAB               	movwf	(?___fttol+1)& (0+255),b
 13352  002BA4  0E00               	movlw	0
 13353  002BA6  6FAC               	movwf	(?___fttol+2)& (0+255),b
 13354  002BA8  0E00               	movlw	0
 13355  002BAA  6FAD               	movwf	(?___fttol+3)& (0+255),b
 13356                           
 13357                           ; BSR set to: 0
 13358  002BAC  0012               	return	
 13359  002BAE                     l6697:
 13360                           
 13361                           ; BSR set to: 0
 13362  002BAE  0E17               	movlw	23
 13363  002BB0  0100               	movlb	0	; () banked
 13364  002BB2  6FAE               	movwf	??___fttol& (0+255),b
 13365  002BB4  C0AA  F0AF         	movff	___fttol@f1,??___fttol+1
 13366  002BB8  C0AB  F0B0         	movff	___fttol@f1+1,??___fttol+2
 13367  002BBC  C0AC  F0B1         	movff	___fttol@f1+2,??___fttol+3
 13368  002BC0  0100               	movlb	0	; () banked
 13369  002BC2  29AE               	incf	??___fttol& (0+255),w,b
 13370  002BC4  0100               	movlb	0	; () banked
 13371  002BC6  6FB2               	movwf	(??___fttol+4)& (0+255),b
 13372  002BC8  D005               	goto	u6740
 13373  002BCA                     u6745:
 13374  002BCA  0100               	movlb	0	; () banked
 13375  002BCC  90D8               	bcf	status,0,c
 13376  002BCE  33B1               	rrcf	(??___fttol+3)& (0+255),f,b
 13377  002BD0  33B0               	rrcf	(??___fttol+2)& (0+255),f,b
 13378  002BD2  33AF               	rrcf	(??___fttol+1)& (0+255),f,b
 13379  002BD4                     u6740:
 13380  002BD4  0100               	movlb	0	; () banked
 13381  002BD6  2FB2               	decfsz	(??___fttol+4)& (0+255),f,b
 13382  002BD8  D7F8               	goto	u6745
 13383  002BDA  0100               	movlb	0	; () banked
 13384  002BDC  51AF               	movf	(??___fttol+1)& (0+255),w,b
 13385  002BDE  0100               	movlb	0	; () banked
 13386  002BE0  6FB3               	movwf	___fttol@sign1& (0+255),b
 13387                           
 13388                           ; BSR set to: 0
 13389  002BE2  0100               	movlb	0	; () banked
 13390  002BE4  8FAB               	bsf	(___fttol@f1+1)& (0+255),7,b
 13391                           
 13392                           ; BSR set to: 0
 13393  002BE6  0EFF               	movlw	255
 13394  002BE8  0100               	movlb	0	; () banked
 13395  002BEA  17AA               	andwf	___fttol@f1& (0+255),f,b
 13396  002BEC  0EFF               	movlw	255
 13397  002BEE  0100               	movlb	0	; () banked
 13398  002BF0  17AB               	andwf	(___fttol@f1+1)& (0+255),f,b
 13399  002BF2  0E00               	movlw	0
 13400  002BF4  0100               	movlb	0	; () banked
 13401  002BF6  17AC               	andwf	(___fttol@f1+2)& (0+255),f,b
 13402                           
 13403                           ; BSR set to: 0
 13404  002BF8  0100               	movlb	0	; () banked
 13405  002BFA  51AA               	movf	___fttol@f1& (0+255),w,b
 13406  002BFC  0100               	movlb	0	; () banked
 13407  002BFE  6FB4               	movwf	___fttol@lval& (0+255),b
 13408  002C00  0100               	movlb	0	; () banked
 13409  002C02  51AB               	movf	(___fttol@f1+1)& (0+255),w,b
 13410  002C04  0100               	movlb	0	; () banked
 13411  002C06  6FB5               	movwf	(___fttol@lval+1)& (0+255),b
 13412  002C08  0100               	movlb	0	; () banked
 13413  002C0A  51AC               	movf	(___fttol@f1+2)& (0+255),w,b
 13414  002C0C  0100               	movlb	0	; () banked
 13415  002C0E  6FB6               	movwf	(___fttol@lval+2)& (0+255),b
 13416  002C10  0100               	movlb	0	; () banked
 13417  002C12  6BB7               	clrf	(___fttol@lval+3)& (0+255),b
 13418                           
 13419                           ; BSR set to: 0
 13420  002C14  0E8E               	movlw	142
 13421  002C16  0100               	movlb	0	; () banked
 13422  002C18  5FB8               	subwf	___fttol@exp1& (0+255),f,b
 13423                           
 13424                           ; BSR set to: 0
 13425  002C1A  0100               	movlb	0	; () banked
 13426  002C1C  AFB8               	btfss	___fttol@exp1& (0+255),7,b
 13427  002C1E  D01A               	goto	l6719
 13428                           
 13429                           ; BSR set to: 0
 13430  002C20  0100               	movlb	0	; () banked
 13431  002C22  51B8               	movf	___fttol@exp1& (0+255),w,b
 13432  002C24  0A80               	xorlw	128
 13433  002C26  0F8F               	addlw	143
 13434  002C28  B0D8               	btfsc	status,0,c
 13435  002C2A  D00A               	goto	l6715
 13436                           
 13437                           ; BSR set to: 0
 13438  002C2C  0E00               	movlw	0
 13439  002C2E  0100               	movlb	0	; () banked
 13440  002C30  6FAA               	movwf	?___fttol& (0+255),b
 13441  002C32  0E00               	movlw	0
 13442  002C34  6FAB               	movwf	(?___fttol+1)& (0+255),b
 13443  002C36  0E00               	movlw	0
 13444  002C38  6FAC               	movwf	(?___fttol+2)& (0+255),b
 13445  002C3A  0E00               	movlw	0
 13446  002C3C  6FAD               	movwf	(?___fttol+3)& (0+255),b
 13447                           
 13448                           ; BSR set to: 0
 13449  002C3E  0012               	return	
 13450  002C40                     l6715:
 13451                           
 13452                           ; BSR set to: 0
 13453  002C40  0100               	movlb	0	; () banked
 13454  002C42  90D8               	bcf	status,0,c
 13455  002C44  33B7               	rrcf	(___fttol@lval+3)& (0+255),f,b
 13456  002C46  33B6               	rrcf	(___fttol@lval+2)& (0+255),f,b
 13457  002C48  33B5               	rrcf	(___fttol@lval+1)& (0+255),f,b
 13458  002C4A  33B4               	rrcf	___fttol@lval& (0+255),f,b
 13459                           
 13460                           ; BSR set to: 0
 13461  002C4C  0100               	movlb	0	; () banked
 13462  002C4E  3FB8               	incfsz	___fttol@exp1& (0+255),f,b
 13463  002C50  D7F7               	goto	l6715
 13464                           
 13465                           ; BSR set to: 0
 13466  002C52  D01B               	goto	l6729
 13467  002C54                     l6719:
 13468                           
 13469                           ; BSR set to: 0
 13470  002C54  0E17               	movlw	23
 13471  002C56  0100               	movlb	0	; () banked
 13472  002C58  65B8               	cpfsgt	___fttol@exp1& (0+255),b
 13473  002C5A  D012               	goto	l6727
 13474                           
 13475                           ; BSR set to: 0
 13476  002C5C  0E00               	movlw	0
 13477  002C5E  0100               	movlb	0	; () banked
 13478  002C60  6FAA               	movwf	?___fttol& (0+255),b
 13479  002C62  0E00               	movlw	0
 13480  002C64  6FAB               	movwf	(?___fttol+1)& (0+255),b
 13481  002C66  0E00               	movlw	0
 13482  002C68  6FAC               	movwf	(?___fttol+2)& (0+255),b
 13483  002C6A  0E00               	movlw	0
 13484  002C6C  6FAD               	movwf	(?___fttol+3)& (0+255),b
 13485                           
 13486                           ; BSR set to: 0
 13487  002C6E  0012               	return	
 13488  002C70                     l6725:
 13489                           
 13490                           ; BSR set to: 0
 13491  002C70  0100               	movlb	0	; () banked
 13492  002C72  90D8               	bcf	status,0,c
 13493  002C74  37B4               	rlcf	___fttol@lval& (0+255),f,b
 13494  002C76  37B5               	rlcf	(___fttol@lval+1)& (0+255),f,b
 13495  002C78  37B6               	rlcf	(___fttol@lval+2)& (0+255),f,b
 13496  002C7A  37B7               	rlcf	(___fttol@lval+3)& (0+255),f,b
 13497  002C7C  0100               	movlb	0	; () banked
 13498  002C7E  07B8               	decf	___fttol@exp1& (0+255),f,b
 13499  002C80                     l6727:
 13500                           
 13501                           ; BSR set to: 0
 13502  002C80  0100               	movlb	0	; () banked
 13503  002C82  51B8               	movf	___fttol@exp1& (0+255),w,b
 13504  002C84  0100               	movlb	0	; () banked
 13505  002C86  A4D8               	btfss	status,2,c
 13506  002C88  D7F3               	goto	l6725
 13507  002C8A                     l6729:
 13508                           
 13509                           ; BSR set to: 0
 13510  002C8A  0100               	movlb	0	; () banked
 13511  002C8C  51B3               	movf	___fttol@sign1& (0+255),w,b
 13512  002C8E  0100               	movlb	0	; () banked
 13513  002C90  B4D8               	btfsc	status,2,c
 13514  002C92  D009               	goto	l6733
 13515                           
 13516                           ; BSR set to: 0
 13517  002C94  0100               	movlb	0	; () banked
 13518  002C96  1FB7               	comf	(___fttol@lval+3)& (0+255),f,b
 13519  002C98  1FB6               	comf	(___fttol@lval+2)& (0+255),f,b
 13520  002C9A  1FB5               	comf	(___fttol@lval+1)& (0+255),f,b
 13521  002C9C  6DB4               	negf	___fttol@lval& (0+255),b
 13522  002C9E  0E00               	movlw	0
 13523  002CA0  23B5               	addwfc	(___fttol@lval+1)& (0+255),f,b
 13524  002CA2  23B6               	addwfc	(___fttol@lval+2)& (0+255),f,b
 13525  002CA4  23B7               	addwfc	(___fttol@lval+3)& (0+255),f,b
 13526  002CA6                     l6733:
 13527                           
 13528                           ; BSR set to: 0
 13529  002CA6  C0B4  F0AA         	movff	___fttol@lval,?___fttol
 13530  002CAA  C0B5  F0AB         	movff	___fttol@lval+1,?___fttol+1
 13531  002CAE  C0B6  F0AC         	movff	___fttol@lval+2,?___fttol+2
 13532  002CB2  C0B7  F0AD         	movff	___fttol@lval+3,?___fttol+3
 13533  002CB6  0012               	return	
 13534  002CB8                     __end_of___fttol:
 13535                           	opt stack 0
 13536                           tblptru	equ	0xFF8
 13537                           tblptrh	equ	0xFF7
 13538                           tblptrl	equ	0xFF6
 13539                           tablat	equ	0xFF5
 13540                           prodh	equ	0xFF4
 13541                           prodl	equ	0xFF3
 13542                           intcon	equ	0xFF2
 13543                           intcon3	equ	0xFF0
 13544                           postinc0	equ	0xFEE
 13545                           wreg	equ	0xFE8
 13546                           postdec1	equ	0xFE5
 13547                           fsr1l	equ	0xFE1
 13548                           indf2	equ	0xFDF
 13549                           postinc2	equ	0xFDE
 13550                           postdec2	equ	0xFDD
 13551                           fsr2h	equ	0xFDA
 13552                           fsr2l	equ	0xFD9
 13553                           status	equ	0xFD8
 13554                           
 13555 ;; *************** function ___ftmul *****************
 13556 ;; Defined at:
 13557 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 13558 ;; Parameters:    Size  Location     Type
 13559 ;;  f1              3    0[BANK0 ] float 
 13560 ;;  f2              3    3[BANK0 ] float 
 13561 ;; Auto vars:     Size  Location     Type
 13562 ;;  f3_as_produc    3   10[BANK0 ] unsigned um
 13563 ;;  sign            1   14[BANK0 ] unsigned char 
 13564 ;;  cntr            1   13[BANK0 ] unsigned char 
 13565 ;;  exp             1    9[BANK0 ] unsigned char 
 13566 ;; Return value:  Size  Location     Type
 13567 ;;                  3    0[BANK0 ] float 
 13568 ;; Registers used:
 13569 ;;		wreg, status,2, status,0, cstack
 13570 ;; Tracked objects:
 13571 ;;		On entry : 0/0
 13572 ;;		On exit  : 0/0
 13573 ;;		Unchanged: 0/0
 13574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13575 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13576 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13577 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13578 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13579 ;;Total ram usage:       15 bytes
 13580 ;; Hardware stack levels used:    1
 13581 ;; Hardware stack levels required when called:    4
 13582 ;; This function calls:
 13583 ;;		___ftpack
 13584 ;; This function is called by:
 13585 ;;		_main
 13586 ;;		_sortBattery
 13587 ;;		_angleToPulse
 13588 ;;		_fround
 13589 ;;		_scale
 13590 ;;		_printf
 13591 ;; This function uses a non-reentrant model
 13592 ;;
 13593                           
 13594                           	psect	text54
 13595  0028CA                     __ptext54:
 13596                           	opt stack 0
 13597  0028CA                     ___ftmul:
 13598                           	opt stack 23
 13599                           
 13600                           ; BSR set to: 0
 13601                           ;incstack = 0
 13602  0028CA  C082  F086         	movff	___ftmul@f1+2,??___ftmul
 13603  0028CE  0100               	movlb	0	; () banked
 13604  0028D0  6B87               	clrf	(??___ftmul+1)& (0+255),b
 13605  0028D2  6B88               	clrf	(??___ftmul+2)& (0+255),b
 13606  0028D4  0100               	movlb	0	; () banked
 13607  0028D6  3581               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 13608  0028D8  0100               	movlb	0	; () banked
 13609  0028DA  3786               	rlcf	??___ftmul& (0+255),f,b
 13610  0028DC  E301               	bnc	u6091
 13611  0028DE  8187               	bsf	(??___ftmul+1)& (0+255),0,b
 13612  0028E0                     u6091:
 13613  0028E0  0100               	movlb	0	; () banked
 13614  0028E2  5186               	movf	??___ftmul& (0+255),w,b
 13615  0028E4  0100               	movlb	0	; () banked
 13616  0028E6  6F89               	movwf	___ftmul@exp& (0+255),b
 13617  0028E8  0100               	movlb	0	; () banked
 13618  0028EA  5189               	movf	___ftmul@exp& (0+255),w,b
 13619  0028EC  A4D8               	btfss	status,2,c
 13620  0028EE  D00A               	goto	l6213
 13621                           
 13622                           ; BSR set to: 0
 13623  0028F0  0E00               	movlw	0
 13624  0028F2  0100               	movlb	0	; () banked
 13625  0028F4  6F80               	movwf	?___ftmul& (0+255),b
 13626  0028F6  0E00               	movlw	0
 13627  0028F8  0100               	movlb	0	; () banked
 13628  0028FA  6F81               	movwf	(?___ftmul+1)& (0+255),b
 13629  0028FC  0E00               	movlw	0
 13630  0028FE  0100               	movlb	0	; () banked
 13631  002900  6F82               	movwf	(?___ftmul+2)& (0+255),b
 13632                           
 13633                           ; BSR set to: 0
 13634  002902  0012               	return	
 13635  002904                     l6213:
 13636                           
 13637                           ; BSR set to: 0
 13638  002904  C085  F086         	movff	___ftmul@f2+2,??___ftmul
 13639  002908  0100               	movlb	0	; () banked
 13640  00290A  6B87               	clrf	(??___ftmul+1)& (0+255),b
 13641  00290C  6B88               	clrf	(??___ftmul+2)& (0+255),b
 13642  00290E  0100               	movlb	0	; () banked
 13643  002910  3584               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 13644  002912  0100               	movlb	0	; () banked
 13645  002914  3786               	rlcf	??___ftmul& (0+255),f,b
 13646  002916  E301               	bnc	u6111
 13647  002918  8187               	bsf	(??___ftmul+1)& (0+255),0,b
 13648  00291A                     u6111:
 13649  00291A  0100               	movlb	0	; () banked
 13650  00291C  5186               	movf	??___ftmul& (0+255),w,b
 13651  00291E  0100               	movlb	0	; () banked
 13652  002920  6F8E               	movwf	___ftmul@sign& (0+255),b
 13653  002922  0100               	movlb	0	; () banked
 13654  002924  518E               	movf	___ftmul@sign& (0+255),w,b
 13655  002926  A4D8               	btfss	status,2,c
 13656  002928  D00A               	goto	l6219
 13657                           
 13658                           ; BSR set to: 0
 13659  00292A  0E00               	movlw	0
 13660  00292C  0100               	movlb	0	; () banked
 13661  00292E  6F80               	movwf	?___ftmul& (0+255),b
 13662  002930  0E00               	movlw	0
 13663  002932  0100               	movlb	0	; () banked
 13664  002934  6F81               	movwf	(?___ftmul+1)& (0+255),b
 13665  002936  0E00               	movlw	0
 13666  002938  0100               	movlb	0	; () banked
 13667  00293A  6F82               	movwf	(?___ftmul+2)& (0+255),b
 13668                           
 13669                           ; BSR set to: 0
 13670  00293C  0012               	return	
 13671  00293E                     l6219:
 13672                           
 13673                           ; BSR set to: 0
 13674  00293E  0100               	movlb	0	; () banked
 13675  002940  518E               	movf	___ftmul@sign& (0+255),w,b
 13676  002942  0F7B               	addlw	123
 13677  002944  0100               	movlb	0	; () banked
 13678  002946  2789               	addwf	___ftmul@exp& (0+255),f,b
 13679                           
 13680                           ; BSR set to: 0
 13681  002948  C082  F08E         	movff	___ftmul@f1+2,___ftmul@sign
 13682  00294C  0100               	movlb	0	; () banked
 13683  00294E  5185               	movf	(___ftmul@f2+2)& (0+255),w,b
 13684  002950  0100               	movlb	0	; () banked
 13685  002952  1B8E               	xorwf	___ftmul@sign& (0+255),f,b
 13686  002954  0E80               	movlw	128
 13687  002956  0100               	movlb	0	; () banked
 13688  002958  178E               	andwf	___ftmul@sign& (0+255),f,b
 13689                           
 13690                           ; BSR set to: 0
 13691  00295A  0100               	movlb	0	; () banked
 13692  00295C  8F81               	bsf	(___ftmul@f1+1)& (0+255),7,b
 13693                           
 13694                           ; BSR set to: 0
 13695  00295E  0100               	movlb	0	; () banked
 13696  002960  8F84               	bsf	(___ftmul@f2+1)& (0+255),7,b
 13697                           
 13698                           ; BSR set to: 0
 13699  002962  0EFF               	movlw	255
 13700  002964  0100               	movlb	0	; () banked
 13701  002966  1783               	andwf	___ftmul@f2& (0+255),f,b
 13702  002968  0EFF               	movlw	255
 13703  00296A  0100               	movlb	0	; () banked
 13704  00296C  1784               	andwf	(___ftmul@f2+1)& (0+255),f,b
 13705  00296E  0E00               	movlw	0
 13706  002970  0100               	movlb	0	; () banked
 13707  002972  1785               	andwf	(___ftmul@f2+2)& (0+255),f,b
 13708                           
 13709                           ; BSR set to: 0
 13710  002974  0E00               	movlw	0
 13711  002976  0100               	movlb	0	; () banked
 13712  002978  6F8A               	movwf	___ftmul@f3_as_product& (0+255),b
 13713  00297A  0E00               	movlw	0
 13714  00297C  0100               	movlb	0	; () banked
 13715  00297E  6F8B               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 13716  002980  0E00               	movlw	0
 13717  002982  0100               	movlb	0	; () banked
 13718  002984  6F8C               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 13719                           
 13720                           ; BSR set to: 0
 13721  002986  0E07               	movlw	7
 13722  002988  0100               	movlb	0	; () banked
 13723  00298A  6F8D               	movwf	___ftmul@cntr& (0+255),b
 13724  00298C                     l6233:
 13725                           
 13726                           ; BSR set to: 0
 13727  00298C  0100               	movlb	0	; () banked
 13728  00298E  A180               	btfss	___ftmul@f1& (0+255),0,b
 13729  002990  D00C               	goto	l6237
 13730                           
 13731                           ; BSR set to: 0
 13732  002992  0100               	movlb	0	; () banked
 13733  002994  5183               	movf	___ftmul@f2& (0+255),w,b
 13734  002996  0100               	movlb	0	; () banked
 13735  002998  278A               	addwf	___ftmul@f3_as_product& (0+255),f,b
 13736  00299A  0100               	movlb	0	; () banked
 13737  00299C  5184               	movf	(___ftmul@f2+1)& (0+255),w,b
 13738  00299E  0100               	movlb	0	; () banked
 13739  0029A0  238B               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 13740  0029A2  0100               	movlb	0	; () banked
 13741  0029A4  5185               	movf	(___ftmul@f2+2)& (0+255),w,b
 13742  0029A6  0100               	movlb	0	; () banked
 13743  0029A8  238C               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 13744  0029AA                     l6237:
 13745                           
 13746                           ; BSR set to: 0
 13747  0029AA  0100               	movlb	0	; () banked
 13748  0029AC  90D8               	bcf	status,0,c
 13749  0029AE  3382               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 13750  0029B0  3381               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 13751  0029B2  3380               	rrcf	___ftmul@f1& (0+255),f,b
 13752  0029B4  0100               	movlb	0	; () banked
 13753  0029B6  90D8               	bcf	status,0,c
 13754  0029B8  3783               	rlcf	___ftmul@f2& (0+255),f,b
 13755  0029BA  3784               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 13756  0029BC  3785               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 13757                           
 13758                           ; BSR set to: 0
 13759  0029BE  0100               	movlb	0	; () banked
 13760  0029C0  2F8D               	decfsz	___ftmul@cntr& (0+255),f,b
 13761  0029C2  D7E4               	goto	l6233
 13762                           
 13763                           ; BSR set to: 0
 13764                           
 13765                           ; BSR set to: 0
 13766  0029C4  0E09               	movlw	9
 13767  0029C6  0100               	movlb	0	; () banked
 13768  0029C8  6F8D               	movwf	___ftmul@cntr& (0+255),b
 13769  0029CA                     l6243:
 13770                           
 13771                           ; BSR set to: 0
 13772  0029CA  0100               	movlb	0	; () banked
 13773  0029CC  A180               	btfss	___ftmul@f1& (0+255),0,b
 13774  0029CE  D00C               	goto	l6247
 13775                           
 13776                           ; BSR set to: 0
 13777  0029D0  0100               	movlb	0	; () banked
 13778  0029D2  5183               	movf	___ftmul@f2& (0+255),w,b
 13779  0029D4  0100               	movlb	0	; () banked
 13780  0029D6  278A               	addwf	___ftmul@f3_as_product& (0+255),f,b
 13781  0029D8  0100               	movlb	0	; () banked
 13782  0029DA  5184               	movf	(___ftmul@f2+1)& (0+255),w,b
 13783  0029DC  0100               	movlb	0	; () banked
 13784  0029DE  238B               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 13785  0029E0  0100               	movlb	0	; () banked
 13786  0029E2  5185               	movf	(___ftmul@f2+2)& (0+255),w,b
 13787  0029E4  0100               	movlb	0	; () banked
 13788  0029E6  238C               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 13789  0029E8                     l6247:
 13790                           
 13791                           ; BSR set to: 0
 13792  0029E8  0100               	movlb	0	; () banked
 13793  0029EA  90D8               	bcf	status,0,c
 13794  0029EC  3382               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 13795  0029EE  3381               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 13796  0029F0  3380               	rrcf	___ftmul@f1& (0+255),f,b
 13797  0029F2  0100               	movlb	0	; () banked
 13798  0029F4  90D8               	bcf	status,0,c
 13799  0029F6  338C               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 13800  0029F8  338B               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 13801  0029FA  338A               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 13802                           
 13803                           ; BSR set to: 0
 13804  0029FC  0100               	movlb	0	; () banked
 13805  0029FE  2F8D               	decfsz	___ftmul@cntr& (0+255),f,b
 13806  002A00  D7E4               	goto	l6243
 13807                           
 13808                           ; BSR set to: 0
 13809                           
 13810                           ; BSR set to: 0
 13811  002A02  C08A  F025         	movff	___ftmul@f3_as_product,___ftpack@arg
 13812  002A06  C08B  F026         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 13813  002A0A  C08C  F027         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 13814  002A0E  C089  F028         	movff	___ftmul@exp,___ftpack@exp
 13815  002A12  C08E  F029         	movff	___ftmul@sign,___ftpack@sign
 13816  002A16  EC48  F01C         	call	___ftpack	;wreg free
 13817  002A1A  C025  F080         	movff	?___ftpack,?___ftmul
 13818  002A1E  C026  F081         	movff	?___ftpack+1,?___ftmul+1
 13819  002A22  C027  F082         	movff	?___ftpack+2,?___ftmul+2
 13820  002A26  0012               	return	
 13821  002A28                     __end_of___ftmul:
 13822                           	opt stack 0
 13823                           tblptru	equ	0xFF8
 13824                           tblptrh	equ	0xFF7
 13825                           tblptrl	equ	0xFF6
 13826                           tablat	equ	0xFF5
 13827                           prodh	equ	0xFF4
 13828                           prodl	equ	0xFF3
 13829                           intcon	equ	0xFF2
 13830                           intcon3	equ	0xFF0
 13831                           postinc0	equ	0xFEE
 13832                           wreg	equ	0xFE8
 13833                           postdec1	equ	0xFE5
 13834                           fsr1l	equ	0xFE1
 13835                           indf2	equ	0xFDF
 13836                           postinc2	equ	0xFDE
 13837                           postdec2	equ	0xFDD
 13838                           fsr2h	equ	0xFDA
 13839                           fsr2l	equ	0xFD9
 13840                           status	equ	0xFD8
 13841                           
 13842 ;; *************** function ___ftdiv *****************
 13843 ;; Defined at:
 13844 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 13845 ;; Parameters:    Size  Location     Type
 13846 ;;  f1              3   15[BANK0 ] float 
 13847 ;;  f2              3   18[BANK0 ] float 
 13848 ;; Auto vars:     Size  Location     Type
 13849 ;;  f3              3   25[BANK0 ] float 
 13850 ;;  sign            1   29[BANK0 ] unsigned char 
 13851 ;;  exp             1   28[BANK0 ] unsigned char 
 13852 ;;  cntr            1   24[BANK0 ] unsigned char 
 13853 ;; Return value:  Size  Location     Type
 13854 ;;                  3   15[BANK0 ] float 
 13855 ;; Registers used:
 13856 ;;		wreg, status,2, status,0, cstack
 13857 ;; Tracked objects:
 13858 ;;		On entry : 0/0
 13859 ;;		On exit  : 0/0
 13860 ;;		Unchanged: 0/0
 13861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13862 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13863 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13864 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13865 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13866 ;;Total ram usage:       15 bytes
 13867 ;; Hardware stack levels used:    1
 13868 ;; Hardware stack levels required when called:    4
 13869 ;; This function calls:
 13870 ;;		___ftpack
 13871 ;; This function is called by:
 13872 ;;		_main
 13873 ;;		_sortBattery
 13874 ;;		_angleToPulse
 13875 ;; This function uses a non-reentrant model
 13876 ;;
 13877                           
 13878                           	psect	text55
 13879  002A28                     __ptext55:
 13880                           	opt stack 0
 13881  002A28                     ___ftdiv:
 13882                           	opt stack 23
 13883                           
 13884                           ;incstack = 0
 13885  002A28  C091  F095         	movff	___ftdiv@f1+2,??___ftdiv
 13886  002A2C  0100               	movlb	0	; () banked
 13887  002A2E  6B96               	clrf	(??___ftdiv+1)& (0+255),b
 13888  002A30  6B97               	clrf	(??___ftdiv+2)& (0+255),b
 13889  002A32  0100               	movlb	0	; () banked
 13890  002A34  3590               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 13891  002A36  0100               	movlb	0	; () banked
 13892  002A38  3795               	rlcf	??___ftdiv& (0+255),f,b
 13893  002A3A  E301               	bnc	u6611
 13894  002A3C  8196               	bsf	(??___ftdiv+1)& (0+255),0,b
 13895  002A3E                     u6611:
 13896  002A3E  0100               	movlb	0	; () banked
 13897  002A40  5195               	movf	??___ftdiv& (0+255),w,b
 13898  002A42  0100               	movlb	0	; () banked
 13899  002A44  6F9C               	movwf	___ftdiv@exp& (0+255),b
 13900  002A46  0100               	movlb	0	; () banked
 13901  002A48  519C               	movf	___ftdiv@exp& (0+255),w,b
 13902  002A4A  A4D8               	btfss	status,2,c
 13903  002A4C  D00A               	goto	l6609
 13904                           
 13905                           ; BSR set to: 0
 13906  002A4E  0E00               	movlw	0
 13907  002A50  0100               	movlb	0	; () banked
 13908  002A52  6F8F               	movwf	?___ftdiv& (0+255),b
 13909  002A54  0E00               	movlw	0
 13910  002A56  0100               	movlb	0	; () banked
 13911  002A58  6F90               	movwf	(?___ftdiv+1)& (0+255),b
 13912  002A5A  0E00               	movlw	0
 13913  002A5C  0100               	movlb	0	; () banked
 13914  002A5E  6F91               	movwf	(?___ftdiv+2)& (0+255),b
 13915                           
 13916                           ; BSR set to: 0
 13917  002A60  0012               	return	
 13918  002A62                     l6609:
 13919                           
 13920                           ; BSR set to: 0
 13921  002A62  C094  F095         	movff	___ftdiv@f2+2,??___ftdiv
 13922  002A66  0100               	movlb	0	; () banked
 13923  002A68  6B96               	clrf	(??___ftdiv+1)& (0+255),b
 13924  002A6A  6B97               	clrf	(??___ftdiv+2)& (0+255),b
 13925  002A6C  0100               	movlb	0	; () banked
 13926  002A6E  3593               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 13927  002A70  0100               	movlb	0	; () banked
 13928  002A72  3795               	rlcf	??___ftdiv& (0+255),f,b
 13929  002A74  E301               	bnc	u6631
 13930  002A76  8196               	bsf	(??___ftdiv+1)& (0+255),0,b
 13931  002A78                     u6631:
 13932  002A78  0100               	movlb	0	; () banked
 13933  002A7A  5195               	movf	??___ftdiv& (0+255),w,b
 13934  002A7C  0100               	movlb	0	; () banked
 13935  002A7E  6F9D               	movwf	___ftdiv@sign& (0+255),b
 13936  002A80  0100               	movlb	0	; () banked
 13937  002A82  519D               	movf	___ftdiv@sign& (0+255),w,b
 13938  002A84  A4D8               	btfss	status,2,c
 13939  002A86  D00A               	goto	l6615
 13940                           
 13941                           ; BSR set to: 0
 13942  002A88  0E00               	movlw	0
 13943  002A8A  0100               	movlb	0	; () banked
 13944  002A8C  6F8F               	movwf	?___ftdiv& (0+255),b
 13945  002A8E  0E00               	movlw	0
 13946  002A90  0100               	movlb	0	; () banked
 13947  002A92  6F90               	movwf	(?___ftdiv+1)& (0+255),b
 13948  002A94  0E00               	movlw	0
 13949  002A96  0100               	movlb	0	; () banked
 13950  002A98  6F91               	movwf	(?___ftdiv+2)& (0+255),b
 13951                           
 13952                           ; BSR set to: 0
 13953  002A9A  0012               	return	
 13954  002A9C                     l6615:
 13955                           
 13956                           ; BSR set to: 0
 13957  002A9C  0E00               	movlw	0
 13958  002A9E  0100               	movlb	0	; () banked
 13959  002AA0  6F99               	movwf	___ftdiv@f3& (0+255),b
 13960  002AA2  0E00               	movlw	0
 13961  002AA4  0100               	movlb	0	; () banked
 13962  002AA6  6F9A               	movwf	(___ftdiv@f3+1)& (0+255),b
 13963  002AA8  0E00               	movlw	0
 13964  002AAA  0100               	movlb	0	; () banked
 13965  002AAC  6F9B               	movwf	(___ftdiv@f3+2)& (0+255),b
 13966                           
 13967                           ; BSR set to: 0
 13968  002AAE  0100               	movlb	0	; () banked
 13969  002AB0  519D               	movf	___ftdiv@sign& (0+255),w,b
 13970  002AB2  0F89               	addlw	137
 13971  002AB4  0100               	movlb	0	; () banked
 13972  002AB6  5F9C               	subwf	___ftdiv@exp& (0+255),f,b
 13973                           
 13974                           ; BSR set to: 0
 13975  002AB8  C091  F09D         	movff	___ftdiv@f1+2,___ftdiv@sign
 13976                           
 13977                           ; BSR set to: 0
 13978  002ABC  0100               	movlb	0	; () banked
 13979  002ABE  5194               	movf	(___ftdiv@f2+2)& (0+255),w,b
 13980  002AC0  0100               	movlb	0	; () banked
 13981  002AC2  1B9D               	xorwf	___ftdiv@sign& (0+255),f,b
 13982                           
 13983                           ; BSR set to: 0
 13984  002AC4  0E80               	movlw	128
 13985  002AC6  0100               	movlb	0	; () banked
 13986  002AC8  179D               	andwf	___ftdiv@sign& (0+255),f,b
 13987                           
 13988                           ; BSR set to: 0
 13989  002ACA  0100               	movlb	0	; () banked
 13990  002ACC  8F90               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 13991                           
 13992                           ; BSR set to: 0
 13993  002ACE  0EFF               	movlw	255
 13994  002AD0  0100               	movlb	0	; () banked
 13995  002AD2  178F               	andwf	___ftdiv@f1& (0+255),f,b
 13996  002AD4  0EFF               	movlw	255
 13997  002AD6  0100               	movlb	0	; () banked
 13998  002AD8  1790               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 13999  002ADA  0E00               	movlw	0
 14000  002ADC  0100               	movlb	0	; () banked
 14001  002ADE  1791               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 14002                           
 14003                           ; BSR set to: 0
 14004  002AE0  0100               	movlb	0	; () banked
 14005  002AE2  8F93               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 14006                           
 14007                           ; BSR set to: 0
 14008  002AE4  0EFF               	movlw	255
 14009  002AE6  0100               	movlb	0	; () banked
 14010  002AE8  1792               	andwf	___ftdiv@f2& (0+255),f,b
 14011  002AEA  0EFF               	movlw	255
 14012  002AEC  0100               	movlb	0	; () banked
 14013  002AEE  1793               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 14014  002AF0  0E00               	movlw	0
 14015  002AF2  0100               	movlb	0	; () banked
 14016  002AF4  1794               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 14017                           
 14018                           ; BSR set to: 0
 14019  002AF6  0E18               	movlw	24
 14020  002AF8  0100               	movlb	0	; () banked
 14021  002AFA  6F98               	movwf	___ftdiv@cntr& (0+255),b
 14022  002AFC                     l6635:
 14023                           
 14024                           ; BSR set to: 0
 14025  002AFC  0100               	movlb	0	; () banked
 14026  002AFE  90D8               	bcf	status,0,c
 14027  002B00  3799               	rlcf	___ftdiv@f3& (0+255),f,b
 14028  002B02  379A               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 14029  002B04  379B               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 14030                           
 14031                           ; BSR set to: 0
 14032  002B06  0100               	movlb	0	; () banked
 14033  002B08  5192               	movf	___ftdiv@f2& (0+255),w,b
 14034  002B0A  0100               	movlb	0	; () banked
 14035  002B0C  5D8F               	subwf	___ftdiv@f1& (0+255),w,b
 14036  002B0E  0100               	movlb	0	; () banked
 14037  002B10  5193               	movf	(___ftdiv@f2+1)& (0+255),w,b
 14038  002B12  0100               	movlb	0	; () banked
 14039  002B14  5990               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 14040  002B16  0100               	movlb	0	; () banked
 14041  002B18  5194               	movf	(___ftdiv@f2+2)& (0+255),w,b
 14042  002B1A  0100               	movlb	0	; () banked
 14043  002B1C  5991               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 14044  002B1E  A0D8               	btfss	status,0,c
 14045  002B20  D00E               	goto	l1186
 14046                           
 14047                           ; BSR set to: 0
 14048  002B22  0100               	movlb	0	; () banked
 14049  002B24  5192               	movf	___ftdiv@f2& (0+255),w,b
 14050  002B26  0100               	movlb	0	; () banked
 14051  002B28  5F8F               	subwf	___ftdiv@f1& (0+255),f,b
 14052  002B2A  0100               	movlb	0	; () banked
 14053  002B2C  5193               	movf	(___ftdiv@f2+1)& (0+255),w,b
 14054  002B2E  0100               	movlb	0	; () banked
 14055  002B30  5B90               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 14056  002B32  0100               	movlb	0	; () banked
 14057  002B34  5194               	movf	(___ftdiv@f2+2)& (0+255),w,b
 14058  002B36  0100               	movlb	0	; () banked
 14059  002B38  5B91               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 14060                           
 14061                           ; BSR set to: 0
 14062  002B3A  0100               	movlb	0	; () banked
 14063  002B3C  8199               	bsf	___ftdiv@f3& (0+255),0,b
 14064  002B3E                     l1186:
 14065                           
 14066                           ; BSR set to: 0
 14067  002B3E  0100               	movlb	0	; () banked
 14068  002B40  90D8               	bcf	status,0,c
 14069  002B42  378F               	rlcf	___ftdiv@f1& (0+255),f,b
 14070  002B44  3790               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 14071  002B46  3791               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 14072                           
 14073                           ; BSR set to: 0
 14074  002B48  0100               	movlb	0	; () banked
 14075  002B4A  2F98               	decfsz	___ftdiv@cntr& (0+255),f,b
 14076  002B4C  D7D7               	goto	l6635
 14077                           
 14078                           ; BSR set to: 0
 14079                           
 14080                           ; BSR set to: 0
 14081  002B4E  C099  F025         	movff	___ftdiv@f3,___ftpack@arg
 14082  002B52  C09A  F026         	movff	___ftdiv@f3+1,___ftpack@arg+1
 14083  002B56  C09B  F027         	movff	___ftdiv@f3+2,___ftpack@arg+2
 14084  002B5A  C09C  F028         	movff	___ftdiv@exp,___ftpack@exp
 14085  002B5E  C09D  F029         	movff	___ftdiv@sign,___ftpack@sign
 14086  002B62  EC48  F01C         	call	___ftpack	;wreg free
 14087  002B66  C025  F08F         	movff	?___ftpack,?___ftdiv
 14088  002B6A  C026  F090         	movff	?___ftpack+1,?___ftdiv+1
 14089  002B6E  C027  F091         	movff	?___ftpack+2,?___ftdiv+2
 14090  002B72  0012               	return	
 14091  002B74                     __end_of___ftdiv:
 14092                           	opt stack 0
 14093                           tblptru	equ	0xFF8
 14094                           tblptrh	equ	0xFF7
 14095                           tblptrl	equ	0xFF6
 14096                           tablat	equ	0xFF5
 14097                           prodh	equ	0xFF4
 14098                           prodl	equ	0xFF3
 14099                           intcon	equ	0xFF2
 14100                           intcon3	equ	0xFF0
 14101                           postinc0	equ	0xFEE
 14102                           wreg	equ	0xFE8
 14103                           postdec1	equ	0xFE5
 14104                           fsr1l	equ	0xFE1
 14105                           indf2	equ	0xFDF
 14106                           postinc2	equ	0xFDE
 14107                           postdec2	equ	0xFDD
 14108                           fsr2h	equ	0xFDA
 14109                           fsr2l	equ	0xFD9
 14110                           status	equ	0xFD8
 14111                           
 14112 ;; *************** function ___ftadd *****************
 14113 ;; Defined at:
 14114 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 14115 ;; Parameters:    Size  Location     Type
 14116 ;;  f1              3   30[BANK0 ] float 
 14117 ;;  f2              3   33[BANK0 ] float 
 14118 ;; Auto vars:     Size  Location     Type
 14119 ;;  exp1            1   41[BANK0 ] unsigned char 
 14120 ;;  exp2            1   40[BANK0 ] unsigned char 
 14121 ;;  sign            1   39[BANK0 ] unsigned char 
 14122 ;; Return value:  Size  Location     Type
 14123 ;;                  3   30[BANK0 ] float 
 14124 ;; Registers used:
 14125 ;;		wreg, status,2, status,0, cstack
 14126 ;; Tracked objects:
 14127 ;;		On entry : 0/0
 14128 ;;		On exit  : 0/0
 14129 ;;		Unchanged: 0/0
 14130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14131 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14132 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14133 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14134 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14135 ;;Total ram usage:       12 bytes
 14136 ;; Hardware stack levels used:    1
 14137 ;; Hardware stack levels required when called:    4
 14138 ;; This function calls:
 14139 ;;		___ftpack
 14140 ;; This function is called by:
 14141 ;;		_main
 14142 ;;		_sortBattery
 14143 ;;		_angleToPulse
 14144 ;;		_printf
 14145 ;;		___ftsub
 14146 ;; This function uses a non-reentrant model
 14147 ;;
 14148                           
 14149                           	psect	text56
 14150  001FA2                     __ptext56:
 14151                           	opt stack 0
 14152  001FA2                     ___ftadd:
 14153                           	opt stack 23
 14154                           
 14155                           ;incstack = 0
 14156  001FA2  C0A0  F0A4         	movff	___ftadd@f1+2,??___ftadd
 14157  001FA6  0100               	movlb	0	; () banked
 14158  001FA8  6BA5               	clrf	(??___ftadd+1)& (0+255),b
 14159  001FAA  6BA6               	clrf	(??___ftadd+2)& (0+255),b
 14160  001FAC  0100               	movlb	0	; () banked
 14161  001FAE  359F               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 14162  001FB0  0100               	movlb	0	; () banked
 14163  001FB2  37A4               	rlcf	??___ftadd& (0+255),f,b
 14164  001FB4  E301               	bnc	u5881
 14165  001FB6  81A5               	bsf	(??___ftadd+1)& (0+255),0,b
 14166  001FB8                     u5881:
 14167  001FB8  0100               	movlb	0	; () banked
 14168  001FBA  51A4               	movf	??___ftadd& (0+255),w,b
 14169  001FBC  0100               	movlb	0	; () banked
 14170  001FBE  6FA9               	movwf	___ftadd@exp1& (0+255),b
 14171  001FC0  C0A3  F0A4         	movff	___ftadd@f2+2,??___ftadd
 14172  001FC4  0100               	movlb	0	; () banked
 14173  001FC6  6BA5               	clrf	(??___ftadd+1)& (0+255),b
 14174  001FC8  6BA6               	clrf	(??___ftadd+2)& (0+255),b
 14175  001FCA  0100               	movlb	0	; () banked
 14176  001FCC  35A2               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 14177  001FCE  0100               	movlb	0	; () banked
 14178  001FD0  37A4               	rlcf	??___ftadd& (0+255),f,b
 14179  001FD2  E301               	bnc	u5891
 14180  001FD4  81A5               	bsf	(??___ftadd+1)& (0+255),0,b
 14181  001FD6                     u5891:
 14182  001FD6  0100               	movlb	0	; () banked
 14183  001FD8  51A4               	movf	??___ftadd& (0+255),w,b
 14184  001FDA  0100               	movlb	0	; () banked
 14185  001FDC  6FA8               	movwf	___ftadd@exp2& (0+255),b
 14186                           
 14187                           ; BSR set to: 0
 14188  001FDE  0100               	movlb	0	; () banked
 14189  001FE0  51A9               	movf	___ftadd@exp1& (0+255),w,b
 14190  001FE2  0100               	movlb	0	; () banked
 14191  001FE4  B4D8               	btfsc	status,2,c
 14192  001FE6  D011               	goto	l1151
 14193                           
 14194                           ; BSR set to: 0
 14195  001FE8  0100               	movlb	0	; () banked
 14196  001FEA  51A8               	movf	___ftadd@exp2& (0+255),w,b
 14197  001FEC  0100               	movlb	0	; () banked
 14198  001FEE  5DA9               	subwf	___ftadd@exp1& (0+255),w,b
 14199  001FF0  B0D8               	btfsc	status,0,c
 14200  001FF2  D012               	goto	l6145
 14201                           
 14202                           ; BSR set to: 0
 14203  001FF4  0100               	movlb	0	; () banked
 14204  001FF6  51A9               	movf	___ftadd@exp1& (0+255),w,b
 14205  001FF8  0800               	sublw	0
 14206  001FFA  0100               	movlb	0	; () banked
 14207  001FFC  25A8               	addwf	___ftadd@exp2& (0+255),w,b
 14208  001FFE  0100               	movlb	0	; () banked
 14209  002000  6FA4               	movwf	??___ftadd& (0+255),b
 14210  002002  0E18               	movlw	24
 14211  002004  0100               	movlb	0	; () banked
 14212  002006  65A4               	cpfsgt	??___ftadd& (0+255),b
 14213  002008  D007               	goto	l6145
 14214  00200A                     l1151:
 14215                           
 14216                           ; BSR set to: 0
 14217  00200A  C0A1  F09E         	movff	___ftadd@f2,?___ftadd
 14218  00200E  C0A2  F09F         	movff	___ftadd@f2+1,?___ftadd+1
 14219  002012  C0A3  F0A0         	movff	___ftadd@f2+2,?___ftadd+2
 14220  002016  0012               	return	
 14221  002018                     l6145:
 14222                           
 14223                           ; BSR set to: 0
 14224  002018  0100               	movlb	0	; () banked
 14225  00201A  51A8               	movf	___ftadd@exp2& (0+255),w,b
 14226  00201C  0100               	movlb	0	; () banked
 14227  00201E  B4D8               	btfsc	status,2,c
 14228  002020  D011               	goto	l1155
 14229                           
 14230                           ; BSR set to: 0
 14231  002022  0100               	movlb	0	; () banked
 14232  002024  51A9               	movf	___ftadd@exp1& (0+255),w,b
 14233  002026  0100               	movlb	0	; () banked
 14234  002028  5DA8               	subwf	___ftadd@exp2& (0+255),w,b
 14235  00202A  B0D8               	btfsc	status,0,c
 14236  00202C  D012               	goto	l6151
 14237                           
 14238                           ; BSR set to: 0
 14239  00202E  0100               	movlb	0	; () banked
 14240  002030  51A8               	movf	___ftadd@exp2& (0+255),w,b
 14241  002032  0800               	sublw	0
 14242  002034  0100               	movlb	0	; () banked
 14243  002036  25A9               	addwf	___ftadd@exp1& (0+255),w,b
 14244  002038  0100               	movlb	0	; () banked
 14245  00203A  6FA4               	movwf	??___ftadd& (0+255),b
 14246  00203C  0E18               	movlw	24
 14247  00203E  0100               	movlb	0	; () banked
 14248  002040  65A4               	cpfsgt	??___ftadd& (0+255),b
 14249  002042  D007               	goto	l6151
 14250  002044                     l1155:
 14251                           
 14252                           ; BSR set to: 0
 14253  002044  C09E  F09E         	movff	___ftadd@f1,?___ftadd
 14254  002048  C09F  F09F         	movff	___ftadd@f1+1,?___ftadd+1
 14255  00204C  C0A0  F0A0         	movff	___ftadd@f1+2,?___ftadd+2
 14256  002050  0012               	return	
 14257  002052                     l6151:
 14258                           
 14259                           ; BSR set to: 0
 14260  002052  0E06               	movlw	6
 14261  002054  0100               	movlb	0	; () banked
 14262  002056  6FA7               	movwf	___ftadd@sign& (0+255),b
 14263                           
 14264                           ; BSR set to: 0
 14265  002058  0100               	movlb	0	; () banked
 14266  00205A  AFA0               	btfss	(___ftadd@f1+2)& (0+255),7,b
 14267  00205C  D002               	goto	l6157
 14268                           
 14269                           ; BSR set to: 0
 14270  00205E  0100               	movlb	0	; () banked
 14271  002060  8FA7               	bsf	___ftadd@sign& (0+255),7,b
 14272  002062                     l6157:
 14273                           
 14274                           ; BSR set to: 0
 14275  002062  0100               	movlb	0	; () banked
 14276  002064  AFA3               	btfss	(___ftadd@f2+2)& (0+255),7,b
 14277  002066  D002               	goto	l1157
 14278                           
 14279                           ; BSR set to: 0
 14280  002068  0100               	movlb	0	; () banked
 14281  00206A  8DA7               	bsf	___ftadd@sign& (0+255),6,b
 14282  00206C                     l1157:
 14283                           
 14284                           ; BSR set to: 0
 14285  00206C  0100               	movlb	0	; () banked
 14286  00206E  8F9F               	bsf	(___ftadd@f1+1)& (0+255),7,b
 14287                           
 14288                           ; BSR set to: 0
 14289  002070  0EFF               	movlw	255
 14290  002072  0100               	movlb	0	; () banked
 14291  002074  179E               	andwf	___ftadd@f1& (0+255),f,b
 14292  002076  0EFF               	movlw	255
 14293  002078  0100               	movlb	0	; () banked
 14294  00207A  179F               	andwf	(___ftadd@f1+1)& (0+255),f,b
 14295  00207C  0E00               	movlw	0
 14296  00207E  0100               	movlb	0	; () banked
 14297  002080  17A0               	andwf	(___ftadd@f1+2)& (0+255),f,b
 14298  002082  0100               	movlb	0	; () banked
 14299  002084  8FA2               	bsf	(___ftadd@f2+1)& (0+255),7,b
 14300                           
 14301                           ; BSR set to: 0
 14302  002086  0EFF               	movlw	255
 14303  002088  0100               	movlb	0	; () banked
 14304  00208A  17A1               	andwf	___ftadd@f2& (0+255),f,b
 14305  00208C  0EFF               	movlw	255
 14306  00208E  0100               	movlb	0	; () banked
 14307  002090  17A2               	andwf	(___ftadd@f2+1)& (0+255),f,b
 14308  002092  0E00               	movlw	0
 14309  002094  0100               	movlb	0	; () banked
 14310  002096  17A3               	andwf	(___ftadd@f2+2)& (0+255),f,b
 14311                           
 14312                           ; BSR set to: 0
 14313  002098  0100               	movlb	0	; () banked
 14314  00209A  51A8               	movf	___ftadd@exp2& (0+255),w,b
 14315  00209C  0100               	movlb	0	; () banked
 14316  00209E  5DA9               	subwf	___ftadd@exp1& (0+255),w,b
 14317  0020A0  B0D8               	btfsc	status,0,c
 14318  0020A2  D025               	goto	l6177
 14319  0020A4                     l6167:
 14320                           
 14321                           ; BSR set to: 0
 14322  0020A4  0100               	movlb	0	; () banked
 14323  0020A6  90D8               	bcf	status,0,c
 14324  0020A8  37A1               	rlcf	___ftadd@f2& (0+255),f,b
 14325  0020AA  37A2               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 14326  0020AC  37A3               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 14327  0020AE  0100               	movlb	0	; () banked
 14328  0020B0  07A8               	decf	___ftadd@exp2& (0+255),f,b
 14329                           
 14330                           ; BSR set to: 0
 14331  0020B2  0100               	movlb	0	; () banked
 14332  0020B4  51A9               	movf	___ftadd@exp1& (0+255),w,b
 14333  0020B6  0100               	movlb	0	; () banked
 14334  0020B8  19A8               	xorwf	___ftadd@exp2& (0+255),w,b
 14335  0020BA  B4D8               	btfsc	status,2,c
 14336  0020BC  D011               	goto	l6175
 14337                           
 14338                           ; BSR set to: 0
 14339  0020BE  0100               	movlb	0	; () banked
 14340  0020C0  07A7               	decf	___ftadd@sign& (0+255),f,b
 14341  0020C2  C0A7  F0A4         	movff	___ftadd@sign,??___ftadd
 14342  0020C6  0E07               	movlw	7
 14343  0020C8  0100               	movlb	0	; () banked
 14344  0020CA  17A4               	andwf	??___ftadd& (0+255),f,b
 14345  0020CC  B4D8               	btfsc	status,2,c
 14346  0020CE  D008               	goto	l6175
 14347  0020D0  D7E9               	goto	l6167
 14348  0020D2                     l6173:
 14349                           
 14350                           ; BSR set to: 0
 14351  0020D2  0100               	movlb	0	; () banked
 14352  0020D4  90D8               	bcf	status,0,c
 14353  0020D6  33A0               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 14354  0020D8  339F               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 14355  0020DA  339E               	rrcf	___ftadd@f1& (0+255),f,b
 14356  0020DC  0100               	movlb	0	; () banked
 14357  0020DE  2BA9               	incf	___ftadd@exp1& (0+255),f,b
 14358  0020E0                     l6175:
 14359                           
 14360                           ; BSR set to: 0
 14361  0020E0  0100               	movlb	0	; () banked
 14362  0020E2  51A8               	movf	___ftadd@exp2& (0+255),w,b
 14363  0020E4  0100               	movlb	0	; () banked
 14364  0020E6  19A9               	xorwf	___ftadd@exp1& (0+255),w,b
 14365  0020E8  B4D8               	btfsc	status,2,c
 14366  0020EA  D02B               	goto	l1166
 14367  0020EC  D7F2               	goto	l6173
 14368  0020EE                     l6177:
 14369                           
 14370                           ; BSR set to: 0
 14371  0020EE  0100               	movlb	0	; () banked
 14372  0020F0  51A9               	movf	___ftadd@exp1& (0+255),w,b
 14373  0020F2  0100               	movlb	0	; () banked
 14374  0020F4  5DA8               	subwf	___ftadd@exp2& (0+255),w,b
 14375  0020F6  B0D8               	btfsc	status,0,c
 14376  0020F8  D024               	goto	l1166
 14377  0020FA                     l6179:
 14378                           
 14379                           ; BSR set to: 0
 14380  0020FA  0100               	movlb	0	; () banked
 14381  0020FC  90D8               	bcf	status,0,c
 14382  0020FE  379E               	rlcf	___ftadd@f1& (0+255),f,b
 14383  002100  379F               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 14384  002102  37A0               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 14385  002104  0100               	movlb	0	; () banked
 14386  002106  07A9               	decf	___ftadd@exp1& (0+255),f,b
 14387                           
 14388                           ; BSR set to: 0
 14389  002108  0100               	movlb	0	; () banked
 14390  00210A  51A9               	movf	___ftadd@exp1& (0+255),w,b
 14391  00210C  0100               	movlb	0	; () banked
 14392  00210E  19A8               	xorwf	___ftadd@exp2& (0+255),w,b
 14393  002110  B4D8               	btfsc	status,2,c
 14394  002112  D011               	goto	l6187
 14395                           
 14396                           ; BSR set to: 0
 14397  002114  0100               	movlb	0	; () banked
 14398  002116  07A7               	decf	___ftadd@sign& (0+255),f,b
 14399  002118  C0A7  F0A4         	movff	___ftadd@sign,??___ftadd
 14400  00211C  0E07               	movlw	7
 14401  00211E  0100               	movlb	0	; () banked
 14402  002120  17A4               	andwf	??___ftadd& (0+255),f,b
 14403  002122  B4D8               	btfsc	status,2,c
 14404  002124  D008               	goto	l6187
 14405  002126  D7E9               	goto	l6179
 14406  002128                     l6185:
 14407                           
 14408                           ; BSR set to: 0
 14409  002128  0100               	movlb	0	; () banked
 14410  00212A  90D8               	bcf	status,0,c
 14411  00212C  33A3               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 14412  00212E  33A2               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 14413  002130  33A1               	rrcf	___ftadd@f2& (0+255),f,b
 14414  002132  0100               	movlb	0	; () banked
 14415  002134  2BA8               	incf	___ftadd@exp2& (0+255),f,b
 14416  002136                     l6187:
 14417                           
 14418                           ; BSR set to: 0
 14419  002136  0100               	movlb	0	; () banked
 14420  002138  51A8               	movf	___ftadd@exp2& (0+255),w,b
 14421  00213A  0100               	movlb	0	; () banked
 14422  00213C  19A9               	xorwf	___ftadd@exp1& (0+255),w,b
 14423  00213E  A4D8               	btfss	status,2,c
 14424  002140  D7F3               	goto	l6185
 14425  002142                     l1166:
 14426                           
 14427                           ; BSR set to: 0
 14428  002142  0100               	movlb	0	; () banked
 14429  002144  AFA7               	btfss	___ftadd@sign& (0+255),7,b
 14430  002146  D012               	goto	l1175
 14431                           
 14432                           ; BSR set to: 0
 14433  002148  0EFF               	movlw	255
 14434  00214A  0100               	movlb	0	; () banked
 14435  00214C  1B9E               	xorwf	___ftadd@f1& (0+255),f,b
 14436  00214E  0EFF               	movlw	255
 14437  002150  0100               	movlb	0	; () banked
 14438  002152  1B9F               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 14439  002154  0EFF               	movlw	255
 14440  002156  0100               	movlb	0	; () banked
 14441  002158  1BA0               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 14442  00215A  0E01               	movlw	1
 14443  00215C  0100               	movlb	0	; () banked
 14444  00215E  279E               	addwf	___ftadd@f1& (0+255),f,b
 14445  002160  0E00               	movlw	0
 14446  002162  0100               	movlb	0	; () banked
 14447  002164  239F               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 14448  002166  0E00               	movlw	0
 14449  002168  0100               	movlb	0	; () banked
 14450  00216A  23A0               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 14451  00216C                     l1175:
 14452                           
 14453                           ; BSR set to: 0
 14454  00216C  0100               	movlb	0	; () banked
 14455  00216E  ADA7               	btfss	___ftadd@sign& (0+255),6,b
 14456  002170  D012               	goto	l6193
 14457                           
 14458                           ; BSR set to: 0
 14459  002172  0EFF               	movlw	255
 14460  002174  0100               	movlb	0	; () banked
 14461  002176  1BA1               	xorwf	___ftadd@f2& (0+255),f,b
 14462  002178  0EFF               	movlw	255
 14463  00217A  0100               	movlb	0	; () banked
 14464  00217C  1BA2               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 14465  00217E  0EFF               	movlw	255
 14466  002180  0100               	movlb	0	; () banked
 14467  002182  1BA3               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 14468  002184  0E01               	movlw	1
 14469  002186  0100               	movlb	0	; () banked
 14470  002188  27A1               	addwf	___ftadd@f2& (0+255),f,b
 14471  00218A  0E00               	movlw	0
 14472  00218C  0100               	movlb	0	; () banked
 14473  00218E  23A2               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14474  002190  0E00               	movlw	0
 14475  002192  0100               	movlb	0	; () banked
 14476  002194  23A3               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14477  002196                     l6193:
 14478                           
 14479                           ; BSR set to: 0
 14480  002196  0E00               	movlw	0
 14481  002198  0100               	movlb	0	; () banked
 14482  00219A  6FA7               	movwf	___ftadd@sign& (0+255),b
 14483                           
 14484                           ; BSR set to: 0
 14485  00219C  0100               	movlb	0	; () banked
 14486  00219E  519E               	movf	___ftadd@f1& (0+255),w,b
 14487  0021A0  0100               	movlb	0	; () banked
 14488  0021A2  27A1               	addwf	___ftadd@f2& (0+255),f,b
 14489  0021A4  0100               	movlb	0	; () banked
 14490  0021A6  519F               	movf	(___ftadd@f1+1)& (0+255),w,b
 14491  0021A8  0100               	movlb	0	; () banked
 14492  0021AA  23A2               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14493  0021AC  0100               	movlb	0	; () banked
 14494  0021AE  51A0               	movf	(___ftadd@f1+2)& (0+255),w,b
 14495  0021B0  0100               	movlb	0	; () banked
 14496  0021B2  23A3               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14497                           
 14498                           ; BSR set to: 0
 14499  0021B4  0100               	movlb	0	; () banked
 14500  0021B6  AFA3               	btfss	(___ftadd@f2+2)& (0+255),7,b
 14501  0021B8  D015               	goto	l6203
 14502                           
 14503                           ; BSR set to: 0
 14504  0021BA  0EFF               	movlw	255
 14505  0021BC  0100               	movlb	0	; () banked
 14506  0021BE  1BA1               	xorwf	___ftadd@f2& (0+255),f,b
 14507  0021C0  0EFF               	movlw	255
 14508  0021C2  0100               	movlb	0	; () banked
 14509  0021C4  1BA2               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 14510  0021C6  0EFF               	movlw	255
 14511  0021C8  0100               	movlb	0	; () banked
 14512  0021CA  1BA3               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 14513  0021CC  0E01               	movlw	1
 14514  0021CE  0100               	movlb	0	; () banked
 14515  0021D0  27A1               	addwf	___ftadd@f2& (0+255),f,b
 14516  0021D2  0E00               	movlw	0
 14517  0021D4  0100               	movlb	0	; () banked
 14518  0021D6  23A2               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14519  0021D8  0E00               	movlw	0
 14520  0021DA  0100               	movlb	0	; () banked
 14521  0021DC  23A3               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14522                           
 14523                           ; BSR set to: 0
 14524  0021DE  0E01               	movlw	1
 14525  0021E0  0100               	movlb	0	; () banked
 14526  0021E2  6FA7               	movwf	___ftadd@sign& (0+255),b
 14527  0021E4                     l6203:
 14528                           
 14529                           ; BSR set to: 0
 14530  0021E4  C0A1  F025         	movff	___ftadd@f2,___ftpack@arg
 14531  0021E8  C0A2  F026         	movff	___ftadd@f2+1,___ftpack@arg+1
 14532  0021EC  C0A3  F027         	movff	___ftadd@f2+2,___ftpack@arg+2
 14533  0021F0  C0A9  F028         	movff	___ftadd@exp1,___ftpack@exp
 14534  0021F4  C0A7  F029         	movff	___ftadd@sign,___ftpack@sign
 14535  0021F8  EC48  F01C         	call	___ftpack	;wreg free
 14536  0021FC  C025  F09E         	movff	?___ftpack,?___ftadd
 14537  002200  C026  F09F         	movff	?___ftpack+1,?___ftadd+1
 14538  002204  C027  F0A0         	movff	?___ftpack+2,?___ftadd+2
 14539  002208  0012               	return	
 14540  00220A                     __end_of___ftadd:
 14541                           	opt stack 0
 14542                           tblptru	equ	0xFF8
 14543                           tblptrh	equ	0xFF7
 14544                           tblptrl	equ	0xFF6
 14545                           tablat	equ	0xFF5
 14546                           prodh	equ	0xFF4
 14547                           prodl	equ	0xFF3
 14548                           intcon	equ	0xFF2
 14549                           intcon3	equ	0xFF0
 14550                           postinc0	equ	0xFEE
 14551                           wreg	equ	0xFE8
 14552                           postdec1	equ	0xFE5
 14553                           fsr1l	equ	0xFE1
 14554                           indf2	equ	0xFDF
 14555                           postinc2	equ	0xFDE
 14556                           postdec2	equ	0xFDD
 14557                           fsr2h	equ	0xFDA
 14558                           fsr2l	equ	0xFD9
 14559                           status	equ	0xFD8
 14560                           
 14561 ;; *************** function ___awtoft *****************
 14562 ;; Defined at:
 14563 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 14564 ;; Parameters:    Size  Location     Type
 14565 ;;  c               2   44[COMRAM] int 
 14566 ;; Auto vars:     Size  Location     Type
 14567 ;;  sign            1   47[COMRAM] unsigned char 
 14568 ;; Return value:  Size  Location     Type
 14569 ;;                  3   44[COMRAM] float 
 14570 ;; Registers used:
 14571 ;;		wreg, status,2, status,0, cstack
 14572 ;; Tracked objects:
 14573 ;;		On entry : 0/0
 14574 ;;		On exit  : 0/0
 14575 ;;		Unchanged: 0/0
 14576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14577 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14578 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14580 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14581 ;;Total ram usage:        4 bytes
 14582 ;; Hardware stack levels used:    1
 14583 ;; Hardware stack levels required when called:    4
 14584 ;; This function calls:
 14585 ;;		___ftpack
 14586 ;; This function is called by:
 14587 ;;		_main
 14588 ;;		_sortBattery
 14589 ;;		_angleToPulse
 14590 ;;		_testFrequency
 14591 ;; This function uses a non-reentrant model
 14592 ;;
 14593                           
 14594                           	psect	text57
 14595  0043FC                     __ptext57:
 14596                           	opt stack 0
 14597  0043FC                     ___awtoft:
 14598                           	opt stack 23
 14599                           
 14600                           ;incstack = 0
 14601  0043FC  0E00               	movlw	0
 14602  0043FE  6E30               	movwf	___awtoft@sign,c
 14603  004400  AE2E               	btfss	___awtoft@c+1,7,c
 14604  004402  D006               	goto	l6665
 14605  004404  6C2D               	negf	___awtoft@c,c
 14606  004406  1E2E               	comf	___awtoft@c+1,f,c
 14607  004408  B0D8               	btfsc	status,0,c
 14608  00440A  2A2E               	incf	___awtoft@c+1,f,c
 14609  00440C  0E01               	movlw	1
 14610  00440E  6E30               	movwf	___awtoft@sign,c
 14611  004410                     l6665:
 14612  004410  C02D  F025         	movff	___awtoft@c,___ftpack@arg
 14613  004414  C02E  F026         	movff	___awtoft@c+1,___ftpack@arg+1
 14614  004418  6A27               	clrf	___ftpack@arg+2,c
 14615  00441A  0E8E               	movlw	142
 14616  00441C  6E28               	movwf	___ftpack@exp,c
 14617  00441E  C030  F029         	movff	___awtoft@sign,___ftpack@sign
 14618  004422  EC48  F01C         	call	___ftpack	;wreg free
 14619  004426  C025  F02D         	movff	?___ftpack,?___awtoft
 14620  00442A  C026  F02E         	movff	?___ftpack+1,?___awtoft+1
 14621  00442E  C027  F02F         	movff	?___ftpack+2,?___awtoft+2
 14622  004432  0012               	return	
 14623  004434                     __end_of___awtoft:
 14624                           	opt stack 0
 14625                           tblptru	equ	0xFF8
 14626                           tblptrh	equ	0xFF7
 14627                           tblptrl	equ	0xFF6
 14628                           tablat	equ	0xFF5
 14629                           prodh	equ	0xFF4
 14630                           prodl	equ	0xFF3
 14631                           intcon	equ	0xFF2
 14632                           intcon3	equ	0xFF0
 14633                           postinc0	equ	0xFEE
 14634                           wreg	equ	0xFE8
 14635                           postdec1	equ	0xFE5
 14636                           fsr1l	equ	0xFE1
 14637                           indf2	equ	0xFDF
 14638                           postinc2	equ	0xFDE
 14639                           postdec2	equ	0xFDD
 14640                           fsr2h	equ	0xFDA
 14641                           fsr2l	equ	0xFD9
 14642                           status	equ	0xFD8
 14643                           
 14644 ;; *************** function ___altoft *****************
 14645 ;; Defined at:
 14646 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 14647 ;; Parameters:    Size  Location     Type
 14648 ;;  c               4   44[COMRAM] long 
 14649 ;; Auto vars:     Size  Location     Type
 14650 ;;  sign            1   53[COMRAM] unsigned char 
 14651 ;;  exp             1   52[COMRAM] unsigned char 
 14652 ;; Return value:  Size  Location     Type
 14653 ;;                  3   44[COMRAM] float 
 14654 ;; Registers used:
 14655 ;;		wreg, status,2, status,0, cstack
 14656 ;; Tracked objects:
 14657 ;;		On entry : 0/0
 14658 ;;		On exit  : 0/0
 14659 ;;		Unchanged: 0/0
 14660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14661 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14662 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14663 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14664 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14665 ;;Total ram usage:       10 bytes
 14666 ;; Hardware stack levels used:    1
 14667 ;; Hardware stack levels required when called:    4
 14668 ;; This function calls:
 14669 ;;		___ftpack
 14670 ;; This function is called by:
 14671 ;;		_sortBattery
 14672 ;;		_angleToPulse
 14673 ;; This function uses a non-reentrant model
 14674 ;;
 14675                           
 14676                           	psect	text58
 14677  003DD0                     __ptext58:
 14678                           	opt stack 0
 14679  003DD0                     ___altoft:
 14680                           	opt stack 23
 14681                           
 14682                           ;incstack = 0
 14683  003DD0  0E00               	movlw	0
 14684  003DD2  6E36               	movwf	___altoft@sign,c
 14685  003DD4  0E8E               	movlw	142
 14686  003DD6  6E35               	movwf	___altoft@exp,c
 14687  003DD8  AE30               	btfss	___altoft@c+3,7,c
 14688  003DDA  D011               	goto	l6597
 14689  003DDC  1E30               	comf	___altoft@c+3,f,c
 14690  003DDE  1E2F               	comf	___altoft@c+2,f,c
 14691  003DE0  1E2E               	comf	___altoft@c+1,f,c
 14692  003DE2  6C2D               	negf	___altoft@c,c
 14693  003DE4  0E00               	movlw	0
 14694  003DE6  222E               	addwfc	___altoft@c+1,f,c
 14695  003DE8  222F               	addwfc	___altoft@c+2,f,c
 14696  003DEA  2230               	addwfc	___altoft@c+3,f,c
 14697  003DEC  0E01               	movlw	1
 14698  003DEE  6E36               	movwf	___altoft@sign,c
 14699  003DF0  D006               	goto	l6597
 14700  003DF2                     l6595:
 14701  003DF2  90D8               	bcf	status,0,c
 14702  003DF4  3230               	rrcf	___altoft@c+3,f,c
 14703  003DF6  322F               	rrcf	___altoft@c+2,f,c
 14704  003DF8  322E               	rrcf	___altoft@c+1,f,c
 14705  003DFA  322D               	rrcf	___altoft@c,f,c
 14706  003DFC  2A35               	incf	___altoft@exp,f,c
 14707  003DFE                     l6597:
 14708  003DFE  0E00               	movlw	0
 14709  003E00  142D               	andwf	___altoft@c,w,c
 14710  003E02  6E31               	movwf	??___altoft& (0+255),c
 14711  003E04  0E00               	movlw	0
 14712  003E06  142E               	andwf	___altoft@c+1,w,c
 14713  003E08  6E32               	movwf	(??___altoft+1)& (0+255),c
 14714  003E0A  0E00               	movlw	0
 14715  003E0C  142F               	andwf	___altoft@c+2,w,c
 14716  003E0E  6E33               	movwf	(??___altoft+2)& (0+255),c
 14717  003E10  0EFF               	movlw	255
 14718  003E12  1430               	andwf	___altoft@c+3,w,c
 14719  003E14  6E34               	movwf	(??___altoft+3)& (0+255),c
 14720  003E16  5031               	movf	??___altoft,w,c
 14721  003E18  1032               	iorwf	??___altoft+1,w,c
 14722  003E1A  1033               	iorwf	??___altoft+2,w,c
 14723  003E1C  1034               	iorwf	??___altoft+3,w,c
 14724  003E1E  A4D8               	btfss	status,2,c
 14725  003E20  D7E8               	goto	l6595
 14726  003E22  C02D  F025         	movff	___altoft@c,___ftpack@arg
 14727  003E26  C02E  F026         	movff	___altoft@c+1,___ftpack@arg+1
 14728  003E2A  C02F  F027         	movff	___altoft@c+2,___ftpack@arg+2
 14729  003E2E  C035  F028         	movff	___altoft@exp,___ftpack@exp
 14730  003E32  C036  F029         	movff	___altoft@sign,___ftpack@sign
 14731  003E36  EC48  F01C         	call	___ftpack	;wreg free
 14732  003E3A  C025  F02D         	movff	?___ftpack,?___altoft
 14733  003E3E  C026  F02E         	movff	?___ftpack+1,?___altoft+1
 14734  003E42  C027  F02F         	movff	?___ftpack+2,?___altoft+2
 14735  003E46  0012               	return	
 14736  003E48                     __end_of___altoft:
 14737                           	opt stack 0
 14738                           tblptru	equ	0xFF8
 14739                           tblptrh	equ	0xFF7
 14740                           tblptrl	equ	0xFF6
 14741                           tablat	equ	0xFF5
 14742                           prodh	equ	0xFF4
 14743                           prodl	equ	0xFF3
 14744                           intcon	equ	0xFF2
 14745                           intcon3	equ	0xFF0
 14746                           postinc0	equ	0xFEE
 14747                           wreg	equ	0xFE8
 14748                           postdec1	equ	0xFE5
 14749                           fsr1l	equ	0xFE1
 14750                           indf2	equ	0xFDF
 14751                           postinc2	equ	0xFDE
 14752                           postdec2	equ	0xFDD
 14753                           fsr2h	equ	0xFDA
 14754                           fsr2l	equ	0xFD9
 14755                           status	equ	0xFD8
 14756                           
 14757 ;; *************** function ___ftpack *****************
 14758 ;; Defined at:
 14759 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 14760 ;; Parameters:    Size  Location     Type
 14761 ;;  arg             3   36[COMRAM] unsigned um
 14762 ;;  exp             1   39[COMRAM] unsigned char 
 14763 ;;  sign            1   40[COMRAM] unsigned char 
 14764 ;; Auto vars:     Size  Location     Type
 14765 ;;		None
 14766 ;; Return value:  Size  Location     Type
 14767 ;;                  3   36[COMRAM] float 
 14768 ;; Registers used:
 14769 ;;		wreg, status,2, status,0
 14770 ;; Tracked objects:
 14771 ;;		On entry : 0/0
 14772 ;;		On exit  : 0/0
 14773 ;;		Unchanged: 0/0
 14774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14775 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14777 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14778 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14779 ;;Total ram usage:        8 bytes
 14780 ;; Hardware stack levels used:    1
 14781 ;; Hardware stack levels required when called:    3
 14782 ;; This function calls:
 14783 ;;		Nothing
 14784 ;; This function is called by:
 14785 ;;		___altoft
 14786 ;;		___awtoft
 14787 ;;		___ftadd
 14788 ;;		___ftdiv
 14789 ;;		___ftmul
 14790 ;;		___lltoft
 14791 ;; This function uses a non-reentrant model
 14792 ;;
 14793                           
 14794                           	psect	text59
 14795  003890                     __ptext59:
 14796                           	opt stack 0
 14797  003890                     ___ftpack:
 14798                           	opt stack 23
 14799                           
 14800                           ;incstack = 0
 14801  003890  5028               	movf	___ftpack@exp,w,c
 14802  003892  B4D8               	btfsc	status,2,c
 14803  003894  D005               	goto	l6093
 14804  003896  5025               	movf	___ftpack@arg,w,c
 14805  003898  1026               	iorwf	___ftpack@arg+1,w,c
 14806  00389A  1027               	iorwf	___ftpack@arg+2,w,c
 14807  00389C  A4D8               	btfss	status,2,c
 14808  00389E  D00C               	goto	l6099
 14809  0038A0                     l6093:
 14810  0038A0  0E00               	movlw	0
 14811  0038A2  6E25               	movwf	?___ftpack,c
 14812  0038A4  0E00               	movlw	0
 14813  0038A6  6E26               	movwf	?___ftpack+1,c
 14814  0038A8  0E00               	movlw	0
 14815  0038AA  6E27               	movwf	?___ftpack+2,c
 14816  0038AC  0012               	return	
 14817  0038AE                     l6097:
 14818  0038AE  2A28               	incf	___ftpack@exp,f,c
 14819  0038B0  90D8               	bcf	status,0,c
 14820  0038B2  3227               	rrcf	___ftpack@arg+2,f,c
 14821  0038B4  3226               	rrcf	___ftpack@arg+1,f,c
 14822  0038B6  3225               	rrcf	___ftpack@arg,f,c
 14823  0038B8                     l6099:
 14824  0038B8  0E00               	movlw	0
 14825  0038BA  1425               	andwf	___ftpack@arg,w,c
 14826  0038BC  6E2A               	movwf	??___ftpack& (0+255),c
 14827  0038BE  0E00               	movlw	0
 14828  0038C0  1426               	andwf	___ftpack@arg+1,w,c
 14829  0038C2  6E2B               	movwf	(??___ftpack+1)& (0+255),c
 14830  0038C4  0EFE               	movlw	254
 14831  0038C6  1427               	andwf	___ftpack@arg+2,w,c
 14832  0038C8  6E2C               	movwf	(??___ftpack+2)& (0+255),c
 14833  0038CA  502A               	movf	??___ftpack,w,c
 14834  0038CC  102B               	iorwf	??___ftpack+1,w,c
 14835  0038CE  102C               	iorwf	??___ftpack+2,w,c
 14836  0038D0  B4D8               	btfsc	status,2,c
 14837  0038D2  D00C               	goto	l6105
 14838  0038D4  D7EC               	goto	l6097
 14839  0038D6                     l6101:
 14840  0038D6  2A28               	incf	___ftpack@exp,f,c
 14841  0038D8  0E01               	movlw	1
 14842  0038DA  2625               	addwf	___ftpack@arg,f,c
 14843  0038DC  0E00               	movlw	0
 14844  0038DE  2226               	addwfc	___ftpack@arg+1,f,c
 14845  0038E0  0E00               	movlw	0
 14846  0038E2  2227               	addwfc	___ftpack@arg+2,f,c
 14847  0038E4  90D8               	bcf	status,0,c
 14848  0038E6  3227               	rrcf	___ftpack@arg+2,f,c
 14849  0038E8  3226               	rrcf	___ftpack@arg+1,f,c
 14850  0038EA  3225               	rrcf	___ftpack@arg,f,c
 14851  0038EC                     l6105:
 14852  0038EC  0E00               	movlw	0
 14853  0038EE  1425               	andwf	___ftpack@arg,w,c
 14854  0038F0  6E2A               	movwf	??___ftpack& (0+255),c
 14855  0038F2  0E00               	movlw	0
 14856  0038F4  1426               	andwf	___ftpack@arg+1,w,c
 14857  0038F6  6E2B               	movwf	(??___ftpack+1)& (0+255),c
 14858  0038F8  0EFF               	movlw	255
 14859  0038FA  1427               	andwf	___ftpack@arg+2,w,c
 14860  0038FC  6E2C               	movwf	(??___ftpack+2)& (0+255),c
 14861  0038FE  502A               	movf	??___ftpack,w,c
 14862  003900  102B               	iorwf	??___ftpack+1,w,c
 14863  003902  102C               	iorwf	??___ftpack+2,w,c
 14864  003904  B4D8               	btfsc	status,2,c
 14865  003906  D006               	goto	l6109
 14866  003908  D7E6               	goto	l6101
 14867  00390A                     l6107:
 14868  00390A  0628               	decf	___ftpack@exp,f,c
 14869  00390C  90D8               	bcf	status,0,c
 14870  00390E  3625               	rlcf	___ftpack@arg,f,c
 14871  003910  3626               	rlcf	___ftpack@arg+1,f,c
 14872  003912  3627               	rlcf	___ftpack@arg+2,f,c
 14873  003914                     l6109:
 14874  003914  BE26               	btfsc	___ftpack@arg+1,7,c
 14875  003916  D003               	goto	l1128
 14876  003918  0E02               	movlw	2
 14877  00391A  6028               	cpfslt	___ftpack@exp,c
 14878  00391C  D7F6               	goto	l6107
 14879  00391E                     l1128:
 14880  00391E  A028               	btfss	___ftpack@exp,0,c
 14881  003920  9E26               	bcf	___ftpack@arg+1,7,c
 14882  003922  90D8               	bcf	status,0,c
 14883  003924  3228               	rrcf	___ftpack@exp,f,c
 14884  003926  5028               	movf	___ftpack@exp,w,c
 14885  003928  1227               	iorwf	___ftpack@arg+2,f,c
 14886  00392A  5029               	movf	___ftpack@sign,w,c
 14887  00392C  A4D8               	btfss	status,2,c
 14888  00392E  8E27               	bsf	___ftpack@arg+2,7,c
 14889  003930  C025  F025         	movff	___ftpack@arg,?___ftpack
 14890  003934  C026  F026         	movff	___ftpack@arg+1,?___ftpack+1
 14891  003938  C027  F027         	movff	___ftpack@arg+2,?___ftpack+2
 14892  00393C  0012               	return	
 14893  00393E                     __end_of___ftpack:
 14894                           	opt stack 0
 14895                           tblptru	equ	0xFF8
 14896                           tblptrh	equ	0xFF7
 14897                           tblptrl	equ	0xFF6
 14898                           tablat	equ	0xFF5
 14899                           prodh	equ	0xFF4
 14900                           prodl	equ	0xFF3
 14901                           intcon	equ	0xFF2
 14902                           intcon3	equ	0xFF0
 14903                           postinc0	equ	0xFEE
 14904                           wreg	equ	0xFE8
 14905                           postdec1	equ	0xFE5
 14906                           fsr1l	equ	0xFE1
 14907                           indf2	equ	0xFDF
 14908                           postinc2	equ	0xFDE
 14909                           postdec2	equ	0xFDD
 14910                           fsr2h	equ	0xFDA
 14911                           fsr2l	equ	0xFD9
 14912                           status	equ	0xFD8
 14913                           
 14914 ;; *************** function _initTimer *****************
 14915 ;; Defined at:
 14916 ;;		line 53 in file "timer.c"
 14917 ;; Parameters:    Size  Location     Type
 14918 ;;  timer           2   36[COMRAM] int 
 14919 ;; Auto vars:     Size  Location     Type
 14920 ;;		None
 14921 ;; Return value:  Size  Location     Type
 14922 ;;                  1    wreg      void 
 14923 ;; Registers used:
 14924 ;;		wreg, status,2, status,0
 14925 ;; Tracked objects:
 14926 ;;		On entry : 0/0
 14927 ;;		On exit  : 0/0
 14928 ;;		Unchanged: 0/0
 14929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14930 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14932 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14933 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14934 ;;Total ram usage:        4 bytes
 14935 ;; Hardware stack levels used:    1
 14936 ;; Hardware stack levels required when called:    3
 14937 ;; This function calls:
 14938 ;;		Nothing
 14939 ;; This function is called by:
 14940 ;;		_main
 14941 ;;		_initServo
 14942 ;;		_testFrequency
 14943 ;; This function uses a non-reentrant model
 14944 ;;
 14945                           
 14946                           	psect	text60
 14947  0042F4                     __ptext60:
 14948                           	opt stack 0
 14949  0042F4                     _initTimer:
 14950                           	opt stack 27
 14951                           
 14952                           ;timer.c: 54: switch(timer){
 14953                           
 14954                           ;incstack = 0
 14955  0042F4  D00F               	goto	l5087
 14956  0042F6                     l5069:
 14957                           
 14958                           ;timer.c: 56: T0CON = 0;
 14959  0042F6  0E00               	movlw	0
 14960  0042F8  6ED5               	movwf	4053,c	;volatile
 14961                           
 14962                           ;timer.c: 57: T0CON |= 1<<3;
 14963  0042FA  86D5               	bsf	4053,3,c	;volatile
 14964                           
 14965                           ;timer.c: 59: TMR0IE = 1;
 14966  0042FC  8AF2               	bsf	intcon,5,c	;volatile
 14967                           
 14968                           ;timer.c: 60: break;
 14969  0042FE  D01C               	goto	l457
 14970  004300                     l5075:
 14971                           
 14972                           ;timer.c: 62: T1CON = 0;
 14973  004300  0E00               	movlw	0
 14974  004302  6ECD               	movwf	4045,c	;volatile
 14975                           
 14976                           ;timer.c: 64: T1CON |= 0b11<<4;
 14977  004304  0E30               	movlw	48
 14978  004306  12CD               	iorwf	4045,f,c	;volatile
 14979                           
 14980                           ;timer.c: 65: TMR1IE = 1;
 14981  004308  809D               	bsf	3997,0,c	;volatile
 14982                           
 14983                           ;timer.c: 66: break;
 14984  00430A  D016               	goto	l457
 14985  00430C                     l5081:
 14986                           
 14987                           ;timer.c: 68: T3CON = 0;
 14988  00430C  0E00               	movlw	0
 14989  00430E  6EB1               	movwf	4017,c	;volatile
 14990                           
 14991                           ;timer.c: 69: TMR3IE = 1;
 14992  004310  82A0               	bsf	4000,1,c	;volatile
 14993                           
 14994                           ;timer.c: 71: }
 14995                           
 14996                           ;timer.c: 70: break;
 14997  004312  D012               	goto	l457
 14998  004314                     l5087:
 14999  004314  C025  F027         	movff	initTimer@timer,??_initTimer
 15000  004318  C026  F028         	movff	initTimer@timer+1,??_initTimer+1
 15001                           
 15002                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15003                           ; Switch size 1, requested type "space"
 15004                           ; Number of cases is 1, Range of values is 0 to 0
 15005                           ; switch strategies available:
 15006                           ; Name         Instructions Cycles
 15007                           ; simple_byte            4     3 (average)
 15008                           ;	Chosen strategy is simple_byte
 15009  00431C  5028               	movf	??_initTimer+1,w,c
 15010  00431E  0A00               	xorlw	0	; case 0
 15011  004320  A4D8               	btfss	status,2,c
 15012  004322  D00A               	goto	l457
 15013                           
 15014                           ; Switch size 1, requested type "space"
 15015                           ; Number of cases is 3, Range of values is 0 to 3
 15016                           ; switch strategies available:
 15017                           ; Name         Instructions Cycles
 15018                           ; simple_byte           10     6 (average)
 15019                           ;	Chosen strategy is simple_byte
 15020  004324  5027               	movf	??_initTimer,w,c
 15021  004326  0A00               	xorlw	0	; case 0
 15022  004328  B4D8               	btfsc	status,2,c
 15023  00432A  D7E5               	goto	l5069
 15024  00432C  0A01               	xorlw	1	; case 1
 15025  00432E  B4D8               	btfsc	status,2,c
 15026  004330  D7E7               	goto	l5075
 15027  004332  0A02               	xorlw	2	; case 3
 15028  004334  B4D8               	btfsc	status,2,c
 15029  004336  D7EA               	goto	l5081
 15030  004338                     l457:
 15031                           
 15032                           ;timer.c: 72: PEIE = 1;
 15033  004338  8CF2               	bsf	intcon,6,c	;volatile
 15034                           
 15035                           ;timer.c: 73: (INTCONbits.GIE = 1);
 15036  00433A  8EF2               	bsf	intcon,7,c	;volatile
 15037  00433C  0012               	return		;funcret
 15038  00433E                     __end_of_initTimer:
 15039                           	opt stack 0
 15040                           tblptru	equ	0xFF8
 15041                           tblptrh	equ	0xFF7
 15042                           tblptrl	equ	0xFF6
 15043                           tablat	equ	0xFF5
 15044                           prodh	equ	0xFF4
 15045                           prodl	equ	0xFF3
 15046                           intcon	equ	0xFF2
 15047                           intcon3	equ	0xFF0
 15048                           postinc0	equ	0xFEE
 15049                           wreg	equ	0xFE8
 15050                           postdec1	equ	0xFE5
 15051                           fsr1l	equ	0xFE1
 15052                           indf2	equ	0xFDF
 15053                           postinc2	equ	0xFDE
 15054                           postdec2	equ	0xFDD
 15055                           fsr2h	equ	0xFDA
 15056                           fsr2l	equ	0xFD9
 15057                           status	equ	0xFD8
 15058                           
 15059 ;; *************** function _initLCD *****************
 15060 ;; Defined at:
 15061 ;;		line 15 in file "lcd.c"
 15062 ;; Parameters:    Size  Location     Type
 15063 ;;		None
 15064 ;; Auto vars:     Size  Location     Type
 15065 ;;		None
 15066 ;; Return value:  Size  Location     Type
 15067 ;;                  1    wreg      void 
 15068 ;; Registers used:
 15069 ;;		wreg, status,2, status,0, cstack
 15070 ;; Tracked objects:
 15071 ;;		On entry : 0/0
 15072 ;;		On exit  : 0/0
 15073 ;;		Unchanged: 0/0
 15074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15077 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15078 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15079 ;;Total ram usage:        1 bytes
 15080 ;; Hardware stack levels used:    1
 15081 ;; Hardware stack levels required when called:    5
 15082 ;; This function calls:
 15083 ;;		_lcdInst
 15084 ;; This function is called by:
 15085 ;;		_main
 15086 ;;		_debug
 15087 ;; This function uses a non-reentrant model
 15088 ;;
 15089                           
 15090                           	psect	text61
 15091  00433E                     __ptext61:
 15092                           	opt stack 0
 15093  00433E                     _initLCD:
 15094                           	opt stack 25
 15095                           
 15096                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 15097                           
 15098                           ;incstack = 0
 15099  00433E  0E31               	movlw	49
 15100  004340  6E29               	movwf	??_initLCD& (0+255),c
 15101  004342  0EB2               	movlw	178
 15102  004344                     u8497:
 15103  004344  2EE8               	decfsz	wreg,f,c
 15104  004346  D7FE               	bra	u8497
 15105  004348  2E29               	decfsz	??_initLCD& (0+255),f,c
 15106  00434A  D7FC               	bra	u8497
 15107  00434C  D000               	nop2	
 15108                           
 15109                           ;lcd.c: 18: lcdInst(0b00110011);
 15110  00434E  0E33               	movlw	51
 15111  004350  EC8E  F022         	call	_lcdInst
 15112                           
 15113                           ;lcd.c: 19: lcdInst(0b00110010);
 15114  004354  0E32               	movlw	50
 15115  004356  EC8E  F022         	call	_lcdInst
 15116                           
 15117                           ;lcd.c: 20: lcdInst(0b00101000);
 15118  00435A  0E28               	movlw	40
 15119  00435C  EC8E  F022         	call	_lcdInst
 15120                           
 15121                           ;lcd.c: 21: lcdInst(0b00001111);
 15122  004360  0E0F               	movlw	15
 15123  004362  EC8E  F022         	call	_lcdInst
 15124                           
 15125                           ;lcd.c: 22: lcdInst(0b00000110);
 15126  004366  0E06               	movlw	6
 15127  004368  EC8E  F022         	call	_lcdInst
 15128                           
 15129                           ;lcd.c: 23: lcdInst(0b00000001);
 15130  00436C  0E01               	movlw	1
 15131  00436E  EC8E  F022         	call	_lcdInst
 15132                           
 15133                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 15134  004372  0E31               	movlw	49
 15135  004374  6E29               	movwf	??_initLCD& (0+255),c
 15136  004376  0EB2               	movlw	178
 15137  004378                     u8507:
 15138  004378  2EE8               	decfsz	wreg,f,c
 15139  00437A  D7FE               	bra	u8507
 15140  00437C  2E29               	decfsz	??_initLCD& (0+255),f,c
 15141  00437E  D7FC               	bra	u8507
 15142  004380  D000               	nop2	
 15143  004382  0012               	return		;funcret
 15144  004384                     __end_of_initLCD:
 15145                           	opt stack 0
 15146                           tblptru	equ	0xFF8
 15147                           tblptrh	equ	0xFF7
 15148                           tblptrl	equ	0xFF6
 15149                           tablat	equ	0xFF5
 15150                           prodh	equ	0xFF4
 15151                           prodl	equ	0xFF3
 15152                           intcon	equ	0xFF2
 15153                           intcon3	equ	0xFF0
 15154                           postinc0	equ	0xFEE
 15155                           wreg	equ	0xFE8
 15156                           postdec1	equ	0xFE5
 15157                           fsr1l	equ	0xFE1
 15158                           indf2	equ	0xFDF
 15159                           postinc2	equ	0xFDE
 15160                           postdec2	equ	0xFDD
 15161                           fsr2h	equ	0xFDA
 15162                           fsr2l	equ	0xFD9
 15163                           status	equ	0xFD8
 15164                           
 15165 ;; *************** function _lcdInst *****************
 15166 ;; Defined at:
 15167 ;;		line 27 in file "lcd.c"
 15168 ;; Parameters:    Size  Location     Type
 15169 ;;  data            1    wreg     unsigned char 
 15170 ;; Auto vars:     Size  Location     Type
 15171 ;;  data            1   39[COMRAM] unsigned char 
 15172 ;; Return value:  Size  Location     Type
 15173 ;;                  1    wreg      void 
 15174 ;; Registers used:
 15175 ;;		wreg, status,2, status,0, cstack
 15176 ;; Tracked objects:
 15177 ;;		On entry : 0/0
 15178 ;;		On exit  : 0/0
 15179 ;;		Unchanged: 0/0
 15180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15182 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15183 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15184 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15185 ;;Total ram usage:        2 bytes
 15186 ;; Hardware stack levels used:    1
 15187 ;; Hardware stack levels required when called:    4
 15188 ;; This function calls:
 15189 ;;		_lcdNibble
 15190 ;; This function is called by:
 15191 ;;		_initLCD
 15192 ;;		_lcdHome
 15193 ;;		_lcdClear
 15194 ;;		_lcdNewline
 15195 ;; This function uses a non-reentrant model
 15196 ;;
 15197                           
 15198                           	psect	text62
 15199  00451C                     __ptext62:
 15200                           	opt stack 0
 15201  00451C                     _lcdInst:
 15202                           	opt stack 22
 15203                           
 15204                           ;incstack = 0
 15205                           ;lcdInst@data stored from wreg
 15206  00451C  6E28               	movwf	lcdInst@data,c
 15207                           
 15208                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 15209  00451E  948C               	bcf	3980,2,c	;volatile
 15210                           
 15211                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 15212  004520  0E74               	movlw	116
 15213  004522                     u8517:
 15214  004522  2EE8               	decfsz	wreg,f,c
 15215  004524  D7FE               	bra	u8517
 15216  004526  D000               	nop2	
 15217                           
 15218                           ;lcd.c: 30: lcdNibble(data);
 15219  004528  5028               	movf	lcdInst@data,w,c
 15220  00452A  ECCA  F01F         	call	_lcdNibble
 15221                           
 15222                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 15223  00452E  0E04               	movlw	4
 15224  004530  6E27               	movwf	??_lcdInst& (0+255),c
 15225  004532  0E3E               	movlw	62
 15226  004534                     u8527:
 15227  004534  2EE8               	decfsz	wreg,f,c
 15228  004536  D7FE               	bra	u8527
 15229  004538  2E27               	decfsz	??_lcdInst& (0+255),f,c
 15230  00453A  D7FC               	bra	u8527
 15231  00453C  0012               	return		;funcret
 15232  00453E                     __end_of_lcdInst:
 15233                           	opt stack 0
 15234                           tblptru	equ	0xFF8
 15235                           tblptrh	equ	0xFF7
 15236                           tblptrl	equ	0xFF6
 15237                           tablat	equ	0xFF5
 15238                           prodh	equ	0xFF4
 15239                           prodl	equ	0xFF3
 15240                           intcon	equ	0xFF2
 15241                           intcon3	equ	0xFF0
 15242                           postinc0	equ	0xFEE
 15243                           wreg	equ	0xFE8
 15244                           postdec1	equ	0xFE5
 15245                           fsr1l	equ	0xFE1
 15246                           indf2	equ	0xFDF
 15247                           postinc2	equ	0xFDE
 15248                           postdec2	equ	0xFDD
 15249                           fsr2h	equ	0xFDA
 15250                           fsr2l	equ	0xFD9
 15251                           status	equ	0xFD8
 15252                           
 15253 ;; *************** function _lcdNibble *****************
 15254 ;; Defined at:
 15255 ;;		line 46 in file "lcd.c"
 15256 ;; Parameters:    Size  Location     Type
 15257 ;;  data            1    wreg     unsigned char 
 15258 ;; Auto vars:     Size  Location     Type
 15259 ;;  data            1   37[COMRAM] unsigned char 
 15260 ;;  temp            1   36[COMRAM] unsigned char 
 15261 ;; Return value:  Size  Location     Type
 15262 ;;                  1    wreg      void 
 15263 ;; Registers used:
 15264 ;;		wreg, status,2, status,0
 15265 ;; Tracked objects:
 15266 ;;		On entry : 0/0
 15267 ;;		On exit  : 0/0
 15268 ;;		Unchanged: 0/0
 15269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15271 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15273 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15274 ;;Total ram usage:        2 bytes
 15275 ;; Hardware stack levels used:    1
 15276 ;; Hardware stack levels required when called:    3
 15277 ;; This function calls:
 15278 ;;		Nothing
 15279 ;; This function is called by:
 15280 ;;		_lcdInst
 15281 ;;		_putch
 15282 ;; This function uses a non-reentrant model
 15283 ;;
 15284                           
 15285                           	psect	text63
 15286  003F94                     __ptext63:
 15287                           	opt stack 0
 15288  003F94                     _lcdNibble:
 15289                           	opt stack 24
 15290                           
 15291                           ;incstack = 0
 15292                           ;lcdNibble@data stored from wreg
 15293  003F94  6E26               	movwf	lcdNibble@data,c
 15294                           
 15295                           ;lcd.c: 48: char temp = data & 0xF0;
 15296  003F96  5026               	movf	lcdNibble@data,w,c
 15297  003F98  0BF0               	andlw	240
 15298  003F9A  6E25               	movwf	lcdNibble@temp,c
 15299                           
 15300                           ;lcd.c: 49: LATD = LATD & 0x0F;
 15301  003F9C  508C               	movf	3980,w,c	;volatile
 15302  003F9E  0B0F               	andlw	15
 15303  003FA0  6E8C               	movwf	3980,c	;volatile
 15304                           
 15305                           ;lcd.c: 50: LATD = temp | LATD;
 15306  003FA2  5025               	movf	lcdNibble@temp,w,c
 15307  003FA4  108C               	iorwf	3980,w,c	;volatile
 15308  003FA6  6E8C               	movwf	3980,c	;volatile
 15309                           
 15310                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 15311  003FA8  968C               	bcf	3980,3,c	;volatile
 15312                           
 15313                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 15314  003FAA  0ED6               	movlw	214
 15315  003FAC                     u8537:
 15316  003FAC  D000               	nop2	
 15317  003FAE  D000               	nop2	
 15318  003FB0  2EE8               	decfsz	wreg,f,c
 15319  003FB2  D7FC               	bra	u8537
 15320  003FB4  D000               	nop2	
 15321                           
 15322                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 15323  003FB6  868C               	bsf	3980,3,c	;volatile
 15324                           
 15325                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 15326  003FB8  0ED6               	movlw	214
 15327  003FBA                     u8547:
 15328  003FBA  D000               	nop2	
 15329  003FBC  D000               	nop2	
 15330  003FBE  2EE8               	decfsz	wreg,f,c
 15331  003FC0  D7FC               	bra	u8547
 15332  003FC2  D000               	nop2	
 15333                           
 15334                           ;lcd.c: 58: data = data << 4;
 15335  003FC4  3826               	swapf	lcdNibble@data,w,c
 15336  003FC6  0BF0               	andlw	240
 15337  003FC8  6E26               	movwf	lcdNibble@data,c
 15338                           
 15339                           ;lcd.c: 60: temp = data & 0xF0;
 15340  003FCA  5026               	movf	lcdNibble@data,w,c
 15341  003FCC  0BF0               	andlw	240
 15342  003FCE  6E25               	movwf	lcdNibble@temp,c
 15343                           
 15344                           ;lcd.c: 61: LATD = LATD & 0x0F;
 15345  003FD0  508C               	movf	3980,w,c	;volatile
 15346  003FD2  0B0F               	andlw	15
 15347  003FD4  6E8C               	movwf	3980,c	;volatile
 15348                           
 15349                           ;lcd.c: 62: LATD = temp | LATD;
 15350  003FD6  5025               	movf	lcdNibble@temp,w,c
 15351  003FD8  108C               	iorwf	3980,w,c	;volatile
 15352  003FDA  6E8C               	movwf	3980,c	;volatile
 15353                           
 15354                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 15355  003FDC  968C               	bcf	3980,3,c	;volatile
 15356                           
 15357                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 15358  003FDE  0ED6               	movlw	214
 15359  003FE0                     u8557:
 15360  003FE0  D000               	nop2	
 15361  003FE2  D000               	nop2	
 15362  003FE4  2EE8               	decfsz	wreg,f,c
 15363  003FE6  D7FC               	bra	u8557
 15364  003FE8  D000               	nop2	
 15365                           
 15366                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 15367  003FEA  868C               	bsf	3980,3,c	;volatile
 15368                           
 15369                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 15370  003FEC  0ED6               	movlw	214
 15371  003FEE                     u8567:
 15372  003FEE  D000               	nop2	
 15373  003FF0  D000               	nop2	
 15374  003FF2  2EE8               	decfsz	wreg,f,c
 15375  003FF4  D7FC               	bra	u8567
 15376  003FF6  D000               	nop2	
 15377  003FF8  0012               	return		;funcret
 15378  003FFA                     __end_of_lcdNibble:
 15379                           	opt stack 0
 15380                           tblptru	equ	0xFF8
 15381                           tblptrh	equ	0xFF7
 15382                           tblptrl	equ	0xFF6
 15383                           tablat	equ	0xFF5
 15384                           prodh	equ	0xFF4
 15385                           prodl	equ	0xFF3
 15386                           intcon	equ	0xFF2
 15387                           intcon3	equ	0xFF0
 15388                           postinc0	equ	0xFEE
 15389                           wreg	equ	0xFE8
 15390                           postdec1	equ	0xFE5
 15391                           fsr1l	equ	0xFE1
 15392                           indf2	equ	0xFDF
 15393                           postinc2	equ	0xFDE
 15394                           postdec2	equ	0xFDD
 15395                           fsr2h	equ	0xFDA
 15396                           fsr2l	equ	0xFD9
 15397                           status	equ	0xFD8
 15398                           
 15399 ;; *************** function _service *****************
 15400 ;; Defined at:
 15401 ;;		line 365 in file "main.c"
 15402 ;; Parameters:    Size  Location     Type
 15403 ;;		None
 15404 ;; Auto vars:     Size  Location     Type
 15405 ;;  key             1   35[COMRAM] unsigned char 
 15406 ;; Return value:  Size  Location     Type
 15407 ;;                  1    wreg      void 
 15408 ;; Registers used:
 15409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15410 ;; Tracked objects:
 15411 ;;		On entry : 0/0
 15412 ;;		On exit  : 0/0
 15413 ;;		Unchanged: 0/0
 15414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15416 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15417 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15418 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15419 ;;Total ram usage:       15 bytes
 15420 ;; Hardware stack levels used:    1
 15421 ;; Hardware stack levels required when called:    2
 15422 ;; This function calls:
 15423 ;;		_keyPressedInterruptService
 15424 ;;		_servoInterruptService
 15425 ;;		i2_startTimer
 15426 ;; This function is called by:
 15427 ;;		Interrupt level 2
 15428 ;; This function uses a non-reentrant model
 15429 ;;
 15430                           
 15431                           	psect	intcode
 15432  000008                     __pintcode:
 15433                           	opt stack 0
 15434  000008                     _service:
 15435                           	opt stack 21
 15436                           
 15437                           ;incstack = 0
 15438  000008  825B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15439  00000A  ED90  F01A         	call	int_func,f	;refresh shadow registers
 15440                           tblptru	equ	0xFF8
 15441                           tblptrh	equ	0xFF7
 15442                           tblptrl	equ	0xFF6
 15443                           tablat	equ	0xFF5
 15444                           prodh	equ	0xFF4
 15445                           prodl	equ	0xFF3
 15446                           intcon	equ	0xFF2
 15447                           intcon3	equ	0xFF0
 15448                           postinc0	equ	0xFEE
 15449                           wreg	equ	0xFE8
 15450                           postdec1	equ	0xFE5
 15451                           fsr1l	equ	0xFE1
 15452                           indf2	equ	0xFDF
 15453                           postinc2	equ	0xFDE
 15454                           postdec2	equ	0xFDD
 15455                           fsr2h	equ	0xFDA
 15456                           fsr2l	equ	0xFD9
 15457                           status	equ	0xFD8
 15458                           
 15459                           	psect	intcode_body
 15460  003520                     __pintcode_body:
 15461                           	opt stack 21
 15462  003520                     int_func:
 15463                           	opt stack 21
 15464  003520  0006               	pop		; remove dummy address from shadow register refresh
 15465  003522  CFFA F016          	movff	pclath,??_service
 15466  003526  CFFB F017          	movff	pclatu,??_service+1
 15467  00352A  CFE9 F018          	movff	fsr0l,??_service+2
 15468  00352E  CFEA F019          	movff	fsr0h,??_service+3
 15469  003532  CFE1 F01A          	movff	fsr1l,??_service+4
 15470  003536  CFE2 F01B          	movff	fsr1h,??_service+5
 15471  00353A  CFD9 F01C          	movff	fsr2l,??_service+6
 15472  00353E  CFDA F01D          	movff	fsr2h,??_service+7
 15473  003542  CFF3 F01E          	movff	prodl,??_service+8
 15474  003546  CFF4 F01F          	movff	prodh,??_service+9
 15475  00354A  CFF6 F020          	movff	tblptrl,??_service+10
 15476  00354E  CFF7 F021          	movff	tblptrh,??_service+11
 15477  003552  CFF8 F022          	movff	tblptru,??_service+12
 15478  003556  CFF5 F023          	movff	tablat,??_service+13
 15479                           
 15480                           ;main.c: 367: if( servoInterruptService() )return;
 15481  00355A  EC11  F018         	call	_servoInterruptService	;wreg free
 15482  00355E  0900               	iorlw	0
 15483  003560  A4D8               	btfss	status,2,c
 15484  003562  D035               	goto	i2l207
 15485                           
 15486                           ;main.c: 372: if(TMR1IF){
 15487  003564  A09E               	btfss	3998,0,c	;volatile
 15488  003566  D017               	goto	i2l208
 15489                           
 15490                           ;main.c: 373: startTimer(1,0x8683);
 15491  003568  0E00               	movlw	0
 15492  00356A  6E08               	movwf	i2startTimer@timer+1,c
 15493  00356C  0E01               	movlw	1
 15494  00356E  6E07               	movwf	i2startTimer@timer,c
 15495  003570  0E83               	movlw	131
 15496  003572  6E09               	movwf	i2startTimer@val,c
 15497  003574  0E86               	movlw	134
 15498  003576  6E0A               	movwf	i2startTimer@val+1,c
 15499  003578  0E00               	movlw	0
 15500  00357A  6E0B               	movwf	i2startTimer@val+2,c
 15501  00357C  0E00               	movlw	0
 15502  00357E  6E0C               	movwf	i2startTimer@val+3,c
 15503  003580  EC54  F021         	call	i2_startTimer	;wreg free
 15504                           
 15505                           ;main.c: 374: time+=1;
 15506  003584  0E01               	movlw	1
 15507  003586  0101               	movlb	1	; () banked
 15508  003588  2747               	addwf	_time& (0+255),f,b
 15509  00358A  0E00               	movlw	0
 15510  00358C  2348               	addwfc	(_time+1)& (0+255),f,b
 15511  00358E  2349               	addwfc	(_time+2)& (0+255),f,b
 15512  003590  234A               	addwfc	(_time+3)& (0+255),f,b
 15513                           
 15514                           ; BSR set to: 1
 15515                           ;main.c: 375: TMR1IF = 0;
 15516  003592  909E               	bcf	3998,0,c	;volatile
 15517                           
 15518                           ; BSR set to: 1
 15519                           ;main.c: 376: return;
 15520  003594  D01C               	goto	i2l207
 15521  003596                     i2l208:
 15522                           
 15523                           ;main.c: 377: }
 15524                           ;main.c: 380: if(INT0IF){ INT0IF = 0;
 15525  003596  A2F2               	btfss	intcon,1,c	;volatile
 15526  003598  D007               	goto	i2l209
 15527  00359A  92F2               	bcf	intcon,1,c	;volatile
 15528                           
 15529                           ;main.c: 381: batteryDetected = 1;
 15530  00359C  0E00               	movlw	0
 15531  00359E  0101               	movlb	1	; () banked
 15532  0035A0  6F4C               	movwf	(_batteryDetected+1)& (0+255),b
 15533  0035A2  0E01               	movlw	1
 15534  0035A4  6F4B               	movwf	_batteryDetected& (0+255),b
 15535                           
 15536                           ; BSR set to: 1
 15537                           ;main.c: 382: return;
 15538  0035A6  D013               	goto	i2l207
 15539  0035A8                     i2l209:
 15540                           
 15541                           ;main.c: 383: }
 15542                           ;main.c: 386: if(INT1IF && INT1IE){INT1IF = 0;
 15543  0035A8  B0F0               	btfsc	intcon3,0,c	;volatile
 15544  0035AA  A6F0               	btfss	intcon3,3,c	;volatile
 15545  0035AC  D010               	goto	i2l207
 15546  0035AE  90F0               	bcf	intcon3,0,c	;volatile
 15547                           
 15548                           ;main.c: 387: keyPressedInterruptService();
 15549  0035B0  EC9F  F022         	call	_keyPressedInterruptService	;wreg free
 15550                           
 15551                           ;main.c: 388: char key = (PORTB & 0xF0) >> 4;
 15552  0035B4  3881               	swapf	3969,w,c	;volatile
 15553  0035B6  0B0F               	andlw	15
 15554  0035B8  0B0F               	andlw	15
 15555  0035BA  6E24               	movwf	service@key,c
 15556                           
 15557                           ;main.c: 389: if(key == 12)terminate = 1;
 15558  0035BC  0E0C               	movlw	12
 15559  0035BE  1824               	xorwf	service@key,w,c
 15560  0035C0  A4D8               	btfss	status,2,c
 15561  0035C2  D005               	goto	i2l207
 15562  0035C4  0E00               	movlw	0
 15563  0035C6  0101               	movlb	1	; () banked
 15564  0035C8  6F56               	movwf	(_terminate+1)& (0+255),b
 15565  0035CA  0E01               	movlw	1
 15566  0035CC  6F55               	movwf	_terminate& (0+255),b
 15567  0035CE                     i2l207:
 15568  0035CE  C023  FFF5         	movff	??_service+13,tablat
 15569  0035D2  C022  FFF8         	movff	??_service+12,tblptru
 15570  0035D6  C021  FFF7         	movff	??_service+11,tblptrh
 15571  0035DA  C020  FFF6         	movff	??_service+10,tblptrl
 15572  0035DE  C01F  FFF4         	movff	??_service+9,prodh
 15573  0035E2  C01E  FFF3         	movff	??_service+8,prodl
 15574  0035E6  C01D  FFDA         	movff	??_service+7,fsr2h
 15575  0035EA  C01C  FFD9         	movff	??_service+6,fsr2l
 15576  0035EE  C01B  FFE2         	movff	??_service+5,fsr1h
 15577  0035F2  C01A  FFE1         	movff	??_service+4,fsr1l
 15578  0035F6  C019  FFEA         	movff	??_service+3,fsr0h
 15579  0035FA  C018  FFE9         	movff	??_service+2,fsr0l
 15580  0035FE  C017  FFFB         	movff	??_service+1,pclatu
 15581  003602  C016  FFFA         	movff	??_service,pclath
 15582  003606  925B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15583  003608  0011               	retfie		f
 15584  00360A                     __end_of_service:
 15585                           	opt stack 0
 15586                           pclatu	equ	0xFFB
 15587                           pclath	equ	0xFFA
 15588                           tblptru	equ	0xFF8
 15589                           tblptrh	equ	0xFF7
 15590                           tblptrl	equ	0xFF6
 15591                           tablat	equ	0xFF5
 15592                           prodh	equ	0xFF4
 15593                           prodl	equ	0xFF3
 15594                           intcon	equ	0xFF2
 15595                           intcon3	equ	0xFF0
 15596                           postinc0	equ	0xFEE
 15597                           fsr0h	equ	0xFEA
 15598                           fsr0l	equ	0xFE9
 15599                           wreg	equ	0xFE8
 15600                           postdec1	equ	0xFE5
 15601                           fsr1h	equ	0xFE2
 15602                           fsr1l	equ	0xFE1
 15603                           indf2	equ	0xFDF
 15604                           postinc2	equ	0xFDE
 15605                           postdec2	equ	0xFDD
 15606                           fsr2h	equ	0xFDA
 15607                           fsr2l	equ	0xFD9
 15608                           status	equ	0xFD8
 15609                           
 15610 ;; *************** function _servoInterruptService *****************
 15611 ;; Defined at:
 15612 ;;		line 58 in file "servo.c"
 15613 ;; Parameters:    Size  Location     Type
 15614 ;;		None
 15615 ;; Auto vars:     Size  Location     Type
 15616 ;;		None
 15617 ;; Return value:  Size  Location     Type
 15618 ;;                  1    wreg      unsigned char 
 15619 ;; Registers used:
 15620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15621 ;; Tracked objects:
 15622 ;;		On entry : 0/0
 15623 ;;		On exit  : 0/0
 15624 ;;		Unchanged: 0/0
 15625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15628 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15629 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15630 ;;Total ram usage:        4 bytes
 15631 ;; Hardware stack levels used:    1
 15632 ;; Hardware stack levels required when called:    1
 15633 ;; This function calls:
 15634 ;;		i2___awmod
 15635 ;;		i2_digitalWrite
 15636 ;;		i2_startTimer
 15637 ;; This function is called by:
 15638 ;;		_service
 15639 ;; This function uses a non-reentrant model
 15640 ;;
 15641                           
 15642                           	psect	text65
 15643  003022                     __ptext65:
 15644                           	opt stack 0
 15645  003022                     _servoInterruptService:
 15646                           	opt stack 21
 15647                           
 15648                           ;servo.c: 60: if(TMR0IF){TMR0IF = 0;
 15649                           
 15650                           ;incstack = 0
 15651  003022  A4F2               	btfss	intcon,2,c	;volatile
 15652  003024  D082               	goto	i2l5699
 15653  003026  94F2               	bcf	intcon,2,c	;volatile
 15654                           
 15655                           ;servo.c: 61: digitalWrite(servos[curr],0);
 15656  003028  90D8               	bcf	status,0,c
 15657  00302A  3448               	rlcf	_curr,w,c
 15658  00302C  6ED9               	movwf	fsr2l,c
 15659  00302E  3449               	rlcf	_curr+1,w,c
 15660  003030  6EDA               	movwf	fsr2h,c
 15661  003032  0E3A               	movlw	low _servos
 15662  003034  26D9               	addwf	fsr2l,f,c
 15663  003036  0E00               	movlw	high _servos
 15664  003038  22DA               	addwfc	fsr2h,f,c
 15665  00303A  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 15666  00303E  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 15667  003042  0E00               	movlw	0
 15668  003044  6E0A               	movwf	i2digitalWrite@val+1,c
 15669  003046  0E00               	movlw	0
 15670  003048  6E09               	movwf	i2digitalWrite@val,c
 15671  00304A  EC1B  F019         	call	i2_digitalWrite	;wreg free
 15672                           
 15673                           ;servo.c: 62: digitalWrite(servos[ (curr+1)%(n+1) ],1);
 15674  00304E  0E01               	movlw	1
 15675  003050  2448               	addwf	_curr,w,c
 15676  003052  6E01               	movwf	i2___awmod@dividend,c
 15677  003054  0E00               	movlw	0
 15678  003056  2049               	addwfc	_curr+1,w,c
 15679  003058  6E02               	movwf	i2___awmod@dividend+1,c
 15680  00305A  0E01               	movlw	1
 15681  00305C  0100               	movlb	0	; () banked
 15682  00305E  25FE               	addwf	_n& (0+255),w,b
 15683  003060  6E03               	movwf	i2___awmod@divisor,c
 15684  003062  0E00               	movlw	0
 15685  003064  0100               	movlb	0	; () banked
 15686  003066  21FF               	addwfc	(_n+1)& (0+255),w,b
 15687  003068  6E04               	movwf	i2___awmod@divisor+1,c
 15688  00306A  EC5C  F01F         	call	i2___awmod	;wreg free
 15689  00306E  90D8               	bcf	status,0,c
 15690  003070  3601               	rlcf	?i2___awmod,f,c
 15691  003072  3602               	rlcf	?i2___awmod+1,f,c
 15692  003074  0E3A               	movlw	low _servos
 15693  003076  2401               	addwf	?i2___awmod,w,c
 15694  003078  6ED9               	movwf	fsr2l,c
 15695  00307A  0E00               	movlw	high _servos
 15696  00307C  2002               	addwfc	?i2___awmod+1,w,c
 15697  00307E  6EDA               	movwf	fsr2h,c
 15698  003080  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 15699  003084  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 15700  003088  0E00               	movlw	0
 15701  00308A  6E0A               	movwf	i2digitalWrite@val+1,c
 15702  00308C  0E01               	movlw	1
 15703  00308E  6E09               	movwf	i2digitalWrite@val,c
 15704  003090  EC1B  F019         	call	i2_digitalWrite	;wreg free
 15705                           
 15706                           ;servo.c: 63: startTimer(0, 0xFFFF - pulse[ (curr+1)%(n+1) ]);
 15707  003094  0E00               	movlw	0
 15708  003096  6E08               	movwf	i2startTimer@timer+1,c
 15709  003098  0E00               	movlw	0
 15710  00309A  6E07               	movwf	i2startTimer@timer,c
 15711  00309C  0EFF               	movlw	255
 15712  00309E  6E12               	movwf	??_servoInterruptService& (0+255),c
 15713  0030A0  0EFF               	movlw	255
 15714  0030A2  6E13               	movwf	(??_servoInterruptService+1)& (0+255),c
 15715  0030A4  0E01               	movlw	1
 15716  0030A6  2448               	addwf	_curr,w,c
 15717  0030A8  6E01               	movwf	i2___awmod@dividend,c
 15718  0030AA  0E00               	movlw	0
 15719  0030AC  2049               	addwfc	_curr+1,w,c
 15720  0030AE  6E02               	movwf	i2___awmod@dividend+1,c
 15721  0030B0  0E01               	movlw	1
 15722  0030B2  0100               	movlb	0	; () banked
 15723  0030B4  25FE               	addwf	_n& (0+255),w,b
 15724  0030B6  6E03               	movwf	i2___awmod@divisor,c
 15725  0030B8  0E00               	movlw	0
 15726  0030BA  0100               	movlb	0	; () banked
 15727  0030BC  21FF               	addwfc	(_n+1)& (0+255),w,b
 15728  0030BE  6E04               	movwf	i2___awmod@divisor+1,c
 15729  0030C0  EC5C  F01F         	call	i2___awmod	;wreg free
 15730  0030C4  90D8               	bcf	status,0,c
 15731  0030C6  3601               	rlcf	?i2___awmod,f,c
 15732  0030C8  3602               	rlcf	?i2___awmod+1,f,c
 15733  0030CA  0E3F               	movlw	low _pulse
 15734  0030CC  2401               	addwf	?i2___awmod,w,c
 15735  0030CE  6ED9               	movwf	fsr2l,c
 15736  0030D0  0E01               	movlw	high _pulse
 15737  0030D2  2002               	addwfc	?i2___awmod+1,w,c
 15738  0030D4  6EDA               	movwf	fsr2h,c
 15739  0030D6  CFDE F014          	movff	postinc2,??_servoInterruptService+2
 15740  0030DA  CFDD F015          	movff	postdec2,??_servoInterruptService+3
 15741  0030DE  1E14               	comf	??_servoInterruptService+2,f,c
 15742  0030E0  1E15               	comf	??_servoInterruptService+3,f,c
 15743  0030E2  4A14               	infsnz	??_servoInterruptService+2,f,c
 15744  0030E4  2A15               	incf	??_servoInterruptService+3,f,c
 15745  0030E6  5012               	movf	??_servoInterruptService,w,c
 15746  0030E8  2614               	addwf	??_servoInterruptService+2,f,c
 15747  0030EA  5013               	movf	??_servoInterruptService+1,w,c
 15748  0030EC  2215               	addwfc	??_servoInterruptService+3,f,c
 15749  0030EE  C014  F009         	movff	??_servoInterruptService+2,i2startTimer@val
 15750  0030F2  C015  F00A         	movff	??_servoInterruptService+3,i2startTimer@val+1
 15751  0030F6  6A0B               	clrf	i2startTimer@val+2,c
 15752  0030F8  6A0C               	clrf	i2startTimer@val+3,c
 15753  0030FA  EC54  F021         	call	i2_startTimer	;wreg free
 15754                           
 15755                           ;servo.c: 65: curr = (curr+1)%(n+1);
 15756  0030FE  0E01               	movlw	1
 15757  003100  2448               	addwf	_curr,w,c
 15758  003102  6E01               	movwf	i2___awmod@dividend,c
 15759  003104  0E00               	movlw	0
 15760  003106  2049               	addwfc	_curr+1,w,c
 15761  003108  6E02               	movwf	i2___awmod@dividend+1,c
 15762  00310A  0E01               	movlw	1
 15763  00310C  0100               	movlb	0	; () banked
 15764  00310E  25FE               	addwf	_n& (0+255),w,b
 15765  003110  6E03               	movwf	i2___awmod@divisor,c
 15766  003112  0E00               	movlw	0
 15767  003114  0100               	movlb	0	; () banked
 15768  003116  21FF               	addwfc	(_n+1)& (0+255),w,b
 15769  003118  6E04               	movwf	i2___awmod@divisor+1,c
 15770  00311A  EC5C  F01F         	call	i2___awmod	;wreg free
 15771  00311E  C001  F048         	movff	?i2___awmod,_curr
 15772  003122  C002  F049         	movff	?i2___awmod+1,_curr+1
 15773                           
 15774                           ;servo.c: 66: return 1;
 15775  003126  0E01               	movlw	1
 15776  003128  0012               	return	
 15777  00312A                     i2l5699:
 15778                           
 15779                           ;servo.c: 67: }
 15780                           ;servo.c: 68: return 0;
 15781  00312A  0E00               	movlw	0
 15782  00312C  0012               	return	
 15783  00312E                     __end_of_servoInterruptService:
 15784                           	opt stack 0
 15785                           pclatu	equ	0xFFB
 15786                           pclath	equ	0xFFA
 15787                           tblptru	equ	0xFF8
 15788                           tblptrh	equ	0xFF7
 15789                           tblptrl	equ	0xFF6
 15790                           tablat	equ	0xFF5
 15791                           prodh	equ	0xFF4
 15792                           prodl	equ	0xFF3
 15793                           intcon	equ	0xFF2
 15794                           intcon3	equ	0xFF0
 15795                           postinc0	equ	0xFEE
 15796                           fsr0h	equ	0xFEA
 15797                           fsr0l	equ	0xFE9
 15798                           wreg	equ	0xFE8
 15799                           postdec1	equ	0xFE5
 15800                           fsr1h	equ	0xFE2
 15801                           fsr1l	equ	0xFE1
 15802                           indf2	equ	0xFDF
 15803                           postinc2	equ	0xFDE
 15804                           postdec2	equ	0xFDD
 15805                           fsr2h	equ	0xFDA
 15806                           fsr2l	equ	0xFD9
 15807                           status	equ	0xFD8
 15808                           
 15809 ;; *************** function i2_startTimer *****************
 15810 ;; Defined at:
 15811 ;;		line 77 in file "timer.c"
 15812 ;; Parameters:    Size  Location     Type
 15813 ;;  timer           2    6[COMRAM] int 
 15814 ;;  val             4    8[COMRAM] long 
 15815 ;; Auto vars:     Size  Location     Type
 15816 ;;		None
 15817 ;; Return value:  Size  Location     Type
 15818 ;;                  1    wreg      void 
 15819 ;; Registers used:
 15820 ;;		wreg, status,2, status,0
 15821 ;; Tracked objects:
 15822 ;;		On entry : 0/0
 15823 ;;		On exit  : 0/0
 15824 ;;		Unchanged: 0/0
 15825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15826 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15828 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15829 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15830 ;;Total ram usage:        8 bytes
 15831 ;; Hardware stack levels used:    1
 15832 ;; This function calls:
 15833 ;;		Nothing
 15834 ;; This function is called by:
 15835 ;;		_service
 15836 ;;		_servoInterruptService
 15837 ;; This function uses a non-reentrant model
 15838 ;;
 15839                           
 15840                           	psect	text66
 15841  0042A8                     __ptext66:
 15842                           	opt stack 0
 15843  0042A8                     i2_startTimer:
 15844                           	opt stack 22
 15845                           
 15846                           ;timer.c: 78: switch(timer){
 15847                           
 15848                           ;incstack = 0
 15849  0042A8  D012               	goto	i2l5397
 15850  0042AA                     i2l464:
 15851                           
 15852                           ;timer.c: 80: TMR0H = val>>8;
 15853  0042AA  C00A  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 15854                           
 15855                           ;timer.c: 81: TMR0L = val;
 15856  0042AE  C009  FFD6         	movff	i2startTimer@val,4054	;volatile
 15857                           
 15858                           ;timer.c: 82: T0CON |= 1<<7;
 15859  0042B2  8ED5               	bsf	4053,7,c	;volatile
 15860                           
 15861                           ;timer.c: 83: break;
 15862  0042B4  0012               	return	
 15863  0042B6                     i2l466:
 15864                           
 15865                           ;timer.c: 85: TMR1H = val>>8;
 15866  0042B6  C00A  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 15867                           
 15868                           ;timer.c: 86: TMR1L = val;
 15869  0042BA  C009  FFCE         	movff	i2startTimer@val,4046	;volatile
 15870                           
 15871                           ;timer.c: 87: T1CON |= 1<<0;
 15872  0042BE  80CD               	bsf	4045,0,c	;volatile
 15873                           
 15874                           ;timer.c: 88: break;
 15875  0042C0  0012               	return	
 15876  0042C2                     i2l467:
 15877                           
 15878                           ;timer.c: 90: TMR3H = val>>8;
 15879  0042C2  C00A  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 15880                           
 15881                           ;timer.c: 91: TMR3L = val;
 15882  0042C6  C009  FFB2         	movff	i2startTimer@val,4018	;volatile
 15883                           
 15884                           ;timer.c: 92: T3CON |= 1<<0;
 15885  0042CA  80B1               	bsf	4017,0,c	;volatile
 15886                           
 15887                           ;timer.c: 93: }
 15888  0042CC  0012               	return	
 15889  0042CE                     i2l5397:
 15890  0042CE  C007  F00D         	movff	i2startTimer@timer,??i2_startTimer
 15891  0042D2  C008  F00E         	movff	i2startTimer@timer+1,??i2_startTimer+1
 15892                           
 15893                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15894                           ; Switch size 1, requested type "space"
 15895                           ; Number of cases is 1, Range of values is 0 to 0
 15896                           ; switch strategies available:
 15897                           ; Name         Instructions Cycles
 15898                           ; simple_byte            4     3 (average)
 15899                           ;	Chosen strategy is simple_byte
 15900  0042D6  500E               	movf	??i2_startTimer+1,w,c
 15901  0042D8  0A00               	xorlw	0	; case 0
 15902  0042DA  A4D8               	btfss	status,2,c
 15903  0042DC  0012               	return	
 15904                           
 15905                           ; Switch size 1, requested type "space"
 15906                           ; Number of cases is 3, Range of values is 0 to 3
 15907                           ; switch strategies available:
 15908                           ; Name         Instructions Cycles
 15909                           ; simple_byte           10     6 (average)
 15910                           ;	Chosen strategy is simple_byte
 15911  0042DE  500D               	movf	??i2_startTimer,w,c
 15912  0042E0  0A00               	xorlw	0	; case 0
 15913  0042E2  B4D8               	btfsc	status,2,c
 15914  0042E4  D7E2               	goto	i2l464
 15915  0042E6  0A01               	xorlw	1	; case 1
 15916  0042E8  B4D8               	btfsc	status,2,c
 15917  0042EA  D7E5               	goto	i2l466
 15918  0042EC  0A02               	xorlw	2	; case 3
 15919  0042EE  A4D8               	btfss	status,2,c
 15920  0042F0  0012               	return	
 15921  0042F2  D7E7               	goto	i2l467
 15922  0042F4                     __end_ofi2_startTimer:
 15923                           	opt stack 0
 15924                           pclatu	equ	0xFFB
 15925                           pclath	equ	0xFFA
 15926                           tblptru	equ	0xFF8
 15927                           tblptrh	equ	0xFF7
 15928                           tblptrl	equ	0xFF6
 15929                           tablat	equ	0xFF5
 15930                           prodh	equ	0xFF4
 15931                           prodl	equ	0xFF3
 15932                           intcon	equ	0xFF2
 15933                           intcon3	equ	0xFF0
 15934                           postinc0	equ	0xFEE
 15935                           fsr0h	equ	0xFEA
 15936                           fsr0l	equ	0xFE9
 15937                           wreg	equ	0xFE8
 15938                           postdec1	equ	0xFE5
 15939                           fsr1h	equ	0xFE2
 15940                           fsr1l	equ	0xFE1
 15941                           indf2	equ	0xFDF
 15942                           postinc2	equ	0xFDE
 15943                           postdec2	equ	0xFDD
 15944                           fsr2h	equ	0xFDA
 15945                           fsr2l	equ	0xFD9
 15946                           status	equ	0xFD8
 15947                           
 15948 ;; *************** function i2_digitalWrite *****************
 15949 ;; Defined at:
 15950 ;;		line 53 in file "iopin.c"
 15951 ;; Parameters:    Size  Location     Type
 15952 ;;  pin             2    6[COMRAM] PTR int 
 15953 ;;		 -> AA_float(4), cylinderMotor2(4), redirectingServo(4), padServo(4), 
 15954 ;;		 -> conveyorServo(4), cylinderMotor1(4), 
 15955 ;;  val             2    8[COMRAM] int 
 15956 ;; Auto vars:     Size  Location     Type
 15957 ;;  digitalWrite    2   15[COMRAM] int 
 15958 ;; Return value:  Size  Location     Type
 15959 ;;                  1    wreg      void 
 15960 ;; Registers used:
 15961 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 15962 ;; Tracked objects:
 15963 ;;		On entry : 0/0
 15964 ;;		On exit  : 0/0
 15965 ;;		Unchanged: 0/0
 15966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15967 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15968 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15969 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15970 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15971 ;;Total ram usage:       11 bytes
 15972 ;; Hardware stack levels used:    1
 15973 ;; This function calls:
 15974 ;;		Nothing
 15975 ;; This function is called by:
 15976 ;;		_servoInterruptService
 15977 ;; This function uses a non-reentrant model
 15978 ;;
 15979                           
 15980                           	psect	text67
 15981  003236                     __ptext67:
 15982                           	opt stack 0
 15983  003236                     i2_digitalWrite:
 15984                           	opt stack 21
 15985                           
 15986                           ;iopin.c: 54: if(pin){
 15987                           
 15988                           ;incstack = 0
 15989  003236  5007               	movf	i2digitalWrite@pin,w,c
 15990  003238  1008               	iorwf	i2digitalWrite@pin+1,w,c
 15991  00323A  B4D8               	btfsc	status,2,c
 15992  00323C  0012               	return	
 15993                           
 15994                           ;iopin.c: 55: int p = 1 << pin[1];
 15995  00323E  0E02               	movlw	2
 15996  003240  2407               	addwf	i2digitalWrite@pin,w,c
 15997  003242  6E0B               	movwf	??i2_digitalWrite& (0+255),c
 15998  003244  0E00               	movlw	0
 15999  003246  2008               	addwfc	i2digitalWrite@pin+1,w,c
 16000  003248  6E0C               	movwf	(??i2_digitalWrite+1)& (0+255),c
 16001  00324A  C00B  FFF6         	movff	??i2_digitalWrite,tblptrl
 16002  00324E  C00C  FFF7         	movff	??i2_digitalWrite+1,tblptrh
 16003  003252  0E00               	movlw	low (__mediumconst shr (0+16))
 16004  003254  6EF8               	movwf	tblptru,c
 16005  003256  0E0F               	movlw	(high __ramtop+-1)
 16006  003258  64F7               	cpfsgt	tblptrh,c
 16007  00325A  D003               	bra	i2u526_47
 16008  00325C  0008               	tblrd		*
 16009  00325E  50F5               	movf	tablat,w,c
 16010  003260  D005               	bra	i2u526_40
 16011  003262                     i2u526_47:
 16012  003262  CFF6 FFD9          	movff	tblptrl,fsr2l
 16013  003266  CFF7 FFDA          	movff	tblptrh,fsr2h
 16014  00326A  50DF               	movf	indf2,w,c
 16015  00326C                     i2u526_40:
 16016  00326C  6E0D               	movwf	(??i2_digitalWrite+2)& (0+255),c
 16017  00326E  0E01               	movlw	1
 16018  003270  6E0E               	movwf	(??i2_digitalWrite+3)& (0+255),c
 16019  003272  0E00               	movlw	0
 16020  003274  6E0F               	movwf	(??i2_digitalWrite+4)& (0+255),c
 16021  003276  2A0D               	incf	??i2_digitalWrite+2,f,c
 16022  003278  D003               	goto	i2u527_44
 16023  00327A                     i2u527_45:
 16024  00327A  90D8               	bcf	status,0,c
 16025  00327C  360E               	rlcf	??i2_digitalWrite+3,f,c
 16026  00327E  360F               	rlcf	??i2_digitalWrite+4,f,c
 16027  003280                     i2u527_44:
 16028  003280  2E0D               	decfsz	??i2_digitalWrite+2,f,c
 16029  003282  D7FB               	goto	i2u527_45
 16030  003284  C00E  F010         	movff	??i2_digitalWrite+3,i2digitalWrite@p
 16031  003288  C00F  F011         	movff	??i2_digitalWrite+4,i2digitalWrite@p+1
 16032                           
 16033                           ;iopin.c: 56: if(val == 0){
 16034  00328C  5009               	movf	i2digitalWrite@val,w,c
 16035  00328E  100A               	iorwf	i2digitalWrite@val+1,w,c
 16036  003290  A4D8               	btfss	status,2,c
 16037  003292  D02B               	goto	i2l5383
 16038                           
 16039                           ;iopin.c: 57: p ^= 0xff;
 16040  003294  0EFF               	movlw	255
 16041  003296  1A10               	xorwf	i2digitalWrite@p,f,c
 16042                           
 16043                           ;iopin.c: 58: }
 16044                           ;iopin.c: 60: switch(pin[0]){
 16045  003298  D028               	goto	i2l5383
 16046  00329A                     i2l5359:
 16047  00329A  0409               	decf	i2digitalWrite@val,w,c
 16048  00329C  100A               	iorwf	i2digitalWrite@val+1,w,c
 16049  00329E  A4D8               	btfss	status,2,c
 16050  0032A0  D003               	goto	i2l5363
 16051  0032A2  5010               	movf	i2digitalWrite@p,w,c
 16052  0032A4  1289               	iorwf	3977,f,c	;volatile
 16053  0032A6  0012               	return	
 16054  0032A8                     i2l5363:
 16055                           
 16056                           ;iopin.c: 62: else LATA &= p;
 16057  0032A8  5010               	movf	i2digitalWrite@p,w,c
 16058  0032AA  1689               	andwf	3977,f,c	;volatile
 16059                           
 16060                           ;iopin.c: 63: break;
 16061  0032AC  0012               	return	
 16062  0032AE                     i2l5365:
 16063  0032AE  0409               	decf	i2digitalWrite@val,w,c
 16064  0032B0  100A               	iorwf	i2digitalWrite@val+1,w,c
 16065  0032B2  A4D8               	btfss	status,2,c
 16066  0032B4  D003               	goto	i2l5369
 16067  0032B6  5010               	movf	i2digitalWrite@p,w,c
 16068  0032B8  128A               	iorwf	3978,f,c	;volatile
 16069  0032BA  0012               	return	
 16070  0032BC                     i2l5369:
 16071                           
 16072                           ;iopin.c: 65: else LATB &= p;
 16073  0032BC  5010               	movf	i2digitalWrite@p,w,c
 16074  0032BE  168A               	andwf	3978,f,c	;volatile
 16075                           
 16076                           ;iopin.c: 66: break;
 16077  0032C0  0012               	return	
 16078  0032C2                     i2l5371:
 16079  0032C2  0409               	decf	i2digitalWrite@val,w,c
 16080  0032C4  100A               	iorwf	i2digitalWrite@val+1,w,c
 16081  0032C6  A4D8               	btfss	status,2,c
 16082  0032C8  D003               	goto	i2l5375
 16083  0032CA  5010               	movf	i2digitalWrite@p,w,c
 16084  0032CC  128B               	iorwf	3979,f,c	;volatile
 16085  0032CE  0012               	return	
 16086  0032D0                     i2l5375:
 16087                           
 16088                           ;iopin.c: 68: else LATC &= p;
 16089  0032D0  5010               	movf	i2digitalWrite@p,w,c
 16090  0032D2  168B               	andwf	3979,f,c	;volatile
 16091                           
 16092                           ;iopin.c: 69: break;
 16093  0032D4  0012               	return	
 16094  0032D6                     i2l5377:
 16095  0032D6  0409               	decf	i2digitalWrite@val,w,c
 16096  0032D8  100A               	iorwf	i2digitalWrite@val+1,w,c
 16097  0032DA  A4D8               	btfss	status,2,c
 16098  0032DC  D003               	goto	i2l5381
 16099  0032DE  5010               	movf	i2digitalWrite@p,w,c
 16100  0032E0  128C               	iorwf	3980,f,c	;volatile
 16101  0032E2  0012               	return	
 16102  0032E4                     i2l5381:
 16103                           
 16104                           ;iopin.c: 71: else LATD &= p;
 16105  0032E4  5010               	movf	i2digitalWrite@p,w,c
 16106  0032E6  168C               	andwf	3980,f,c	;volatile
 16107                           
 16108                           ;iopin.c: 72: }
 16109  0032E8  0012               	return	
 16110  0032EA                     i2l5383:
 16111  0032EA  C007  FFF6         	movff	i2digitalWrite@pin,tblptrl
 16112  0032EE  C008  FFF7         	movff	i2digitalWrite@pin+1,tblptrh
 16113  0032F2  0E00               	movlw	low (__mediumconst shr (0+16))
 16114  0032F4  6EF8               	movwf	tblptru,c
 16115  0032F6  0E0F               	movlw	(high __ramtop+-1)
 16116  0032F8  64F7               	cpfsgt	tblptrh,c
 16117  0032FA  D007               	bra	i2u533_47
 16118  0032FC  0009               	tblrd		*+
 16119  0032FE  CFF5 F00B          	movff	tablat,??i2_digitalWrite
 16120  003302  0009               	tblrd		*+
 16121  003304  CFF5 F00C          	movff	tablat,??i2_digitalWrite+1
 16122  003308  D008               	bra	i2u533_40
 16123  00330A                     i2u533_47:
 16124  00330A  CFF6 FFD9          	movff	tblptrl,fsr2l
 16125  00330E  CFF7 FFDA          	movff	tblptrh,fsr2h
 16126  003312  CFDE F00B          	movff	postinc2,??i2_digitalWrite
 16127  003316  CFDE F00C          	movff	postinc2,??i2_digitalWrite+1
 16128  00331A                     i2u533_40:
 16129                           
 16130                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16131                           ; Switch size 1, requested type "space"
 16132                           ; Number of cases is 1, Range of values is 0 to 0
 16133                           ; switch strategies available:
 16134                           ; Name         Instructions Cycles
 16135                           ; simple_byte            4     3 (average)
 16136                           ;	Chosen strategy is simple_byte
 16137  00331A  500C               	movf	??i2_digitalWrite+1,w,c
 16138  00331C  0A00               	xorlw	0	; case 0
 16139  00331E  A4D8               	btfss	status,2,c
 16140  003320  0012               	return	
 16141                           
 16142                           ; Switch size 1, requested type "space"
 16143                           ; Number of cases is 4, Range of values is 0 to 3
 16144                           ; switch strategies available:
 16145                           ; Name         Instructions Cycles
 16146                           ; simple_byte           13     7 (average)
 16147                           ;	Chosen strategy is simple_byte
 16148  003322  500B               	movf	??i2_digitalWrite,w,c
 16149  003324  0A00               	xorlw	0	; case 0
 16150  003326  B4D8               	btfsc	status,2,c
 16151  003328  D7B8               	goto	i2l5359
 16152  00332A  0A01               	xorlw	1	; case 1
 16153  00332C  B4D8               	btfsc	status,2,c
 16154  00332E  D7BF               	goto	i2l5365
 16155  003330  0A03               	xorlw	3	; case 2
 16156  003332  B4D8               	btfsc	status,2,c
 16157  003334  D7C6               	goto	i2l5371
 16158  003336  0A01               	xorlw	1	; case 3
 16159  003338  A4D8               	btfss	status,2,c
 16160  00333A  0012               	return	
 16161  00333C  D7CC               	goto	i2l5377
 16162  00333E                     __end_ofi2_digitalWrite:
 16163                           	opt stack 0
 16164                           pclatu	equ	0xFFB
 16165                           pclath	equ	0xFFA
 16166                           tblptru	equ	0xFF8
 16167                           tblptrh	equ	0xFF7
 16168                           tblptrl	equ	0xFF6
 16169                           tablat	equ	0xFF5
 16170                           prodh	equ	0xFF4
 16171                           prodl	equ	0xFF3
 16172                           intcon	equ	0xFF2
 16173                           intcon3	equ	0xFF0
 16174                           postinc0	equ	0xFEE
 16175                           fsr0h	equ	0xFEA
 16176                           fsr0l	equ	0xFE9
 16177                           wreg	equ	0xFE8
 16178                           postdec1	equ	0xFE5
 16179                           fsr1h	equ	0xFE2
 16180                           fsr1l	equ	0xFE1
 16181                           indf2	equ	0xFDF
 16182                           postinc2	equ	0xFDE
 16183                           postdec2	equ	0xFDD
 16184                           fsr2h	equ	0xFDA
 16185                           fsr2l	equ	0xFD9
 16186                           status	equ	0xFD8
 16187                           
 16188 ;; *************** function i2___awmod *****************
 16189 ;; Defined at:
 16190 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 16191 ;; Parameters:    Size  Location     Type
 16192 ;;  dividend        2    0[COMRAM] int 
 16193 ;;  divisor         2    2[COMRAM] int 
 16194 ;; Auto vars:     Size  Location     Type
 16195 ;;  __awmod         1    5[COMRAM] unsigned char 
 16196 ;;  __awmod         1    4[COMRAM] unsigned char 
 16197 ;; Return value:  Size  Location     Type
 16198 ;;                  2    0[COMRAM] int 
 16199 ;; Registers used:
 16200 ;;		wreg, status,2, status,0
 16201 ;; Tracked objects:
 16202 ;;		On entry : 0/0
 16203 ;;		On exit  : 0/0
 16204 ;;		Unchanged: 0/0
 16205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16206 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16207 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16209 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16210 ;;Total ram usage:        6 bytes
 16211 ;; Hardware stack levels used:    1
 16212 ;; This function calls:
 16213 ;;		Nothing
 16214 ;; This function is called by:
 16215 ;;		_servoInterruptService
 16216 ;; This function uses a non-reentrant model
 16217 ;;
 16218                           
 16219                           	psect	text68
 16220  003EB8                     __ptext68:
 16221                           	opt stack 0
 16222  003EB8                     i2___awmod:
 16223                           	opt stack 21
 16224                           
 16225                           ;incstack = 0
 16226  003EB8  0E00               	movlw	0
 16227  003EBA  6E06               	movwf	i2___awmod@sign,c
 16228  003EBC  AE02               	btfss	i2___awmod@dividend+1,7,c
 16229  003EBE  D006               	goto	i2l5411
 16230  003EC0  6C01               	negf	i2___awmod@dividend,c
 16231  003EC2  1E02               	comf	i2___awmod@dividend+1,f,c
 16232  003EC4  B0D8               	btfsc	status,0,c
 16233  003EC6  2A02               	incf	i2___awmod@dividend+1,f,c
 16234  003EC8  0E01               	movlw	1
 16235  003ECA  6E06               	movwf	i2___awmod@sign,c
 16236  003ECC                     i2l5411:
 16237  003ECC  AE04               	btfss	i2___awmod@divisor+1,7,c
 16238  003ECE  D004               	goto	i2l5415
 16239  003ED0  6C03               	negf	i2___awmod@divisor,c
 16240  003ED2  1E04               	comf	i2___awmod@divisor+1,f,c
 16241  003ED4  B0D8               	btfsc	status,0,c
 16242  003ED6  2A04               	incf	i2___awmod@divisor+1,f,c
 16243  003ED8                     i2l5415:
 16244  003ED8  5003               	movf	i2___awmod@divisor,w,c
 16245  003EDA  1004               	iorwf	i2___awmod@divisor+1,w,c
 16246  003EDC  B4D8               	btfsc	status,2,c
 16247  003EDE  D018               	goto	i2l5431
 16248  003EE0  0E01               	movlw	1
 16249  003EE2  6E05               	movwf	i2___awmod@counter,c
 16250  003EE4  D004               	goto	i2l5421
 16251  003EE6                     i2l5419:
 16252  003EE6  90D8               	bcf	status,0,c
 16253  003EE8  3603               	rlcf	i2___awmod@divisor,f,c
 16254  003EEA  3604               	rlcf	i2___awmod@divisor+1,f,c
 16255  003EEC  2A05               	incf	i2___awmod@counter,f,c
 16256  003EEE                     i2l5421:
 16257  003EEE  AE04               	btfss	i2___awmod@divisor+1,7,c
 16258  003EF0  D7FA               	goto	i2l5419
 16259  003EF2                     i2l5423:
 16260  003EF2  5003               	movf	i2___awmod@divisor,w,c
 16261  003EF4  5C01               	subwf	i2___awmod@dividend,w,c
 16262  003EF6  5004               	movf	i2___awmod@divisor+1,w,c
 16263  003EF8  5802               	subwfb	i2___awmod@dividend+1,w,c
 16264  003EFA  A0D8               	btfss	status,0,c
 16265  003EFC  D004               	goto	i2l5427
 16266  003EFE  5003               	movf	i2___awmod@divisor,w,c
 16267  003F00  5E01               	subwf	i2___awmod@dividend,f,c
 16268  003F02  5004               	movf	i2___awmod@divisor+1,w,c
 16269  003F04  5A02               	subwfb	i2___awmod@dividend+1,f,c
 16270  003F06                     i2l5427:
 16271  003F06  90D8               	bcf	status,0,c
 16272  003F08  3204               	rrcf	i2___awmod@divisor+1,f,c
 16273  003F0A  3203               	rrcf	i2___awmod@divisor,f,c
 16274  003F0C  2E05               	decfsz	i2___awmod@counter,f,c
 16275  003F0E  D7F1               	goto	i2l5423
 16276  003F10                     i2l5431:
 16277  003F10  5006               	movf	i2___awmod@sign,w,c
 16278  003F12  B4D8               	btfsc	status,2,c
 16279  003F14  D004               	goto	i2l5435
 16280  003F16  6C01               	negf	i2___awmod@dividend,c
 16281  003F18  1E02               	comf	i2___awmod@dividend+1,f,c
 16282  003F1A  B0D8               	btfsc	status,0,c
 16283  003F1C  2A02               	incf	i2___awmod@dividend+1,f,c
 16284  003F1E                     i2l5435:
 16285  003F1E  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 16286  003F22  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 16287  003F26  0012               	return	
 16288  003F28                     __end_ofi2___awmod:
 16289                           	opt stack 0
 16290                           pclatu	equ	0xFFB
 16291                           pclath	equ	0xFFA
 16292                           tblptru	equ	0xFF8
 16293                           tblptrh	equ	0xFF7
 16294                           tblptrl	equ	0xFF6
 16295                           tablat	equ	0xFF5
 16296                           prodh	equ	0xFF4
 16297                           prodl	equ	0xFF3
 16298                           intcon	equ	0xFF2
 16299                           intcon3	equ	0xFF0
 16300                           postinc0	equ	0xFEE
 16301                           fsr0h	equ	0xFEA
 16302                           fsr0l	equ	0xFE9
 16303                           wreg	equ	0xFE8
 16304                           postdec1	equ	0xFE5
 16305                           fsr1h	equ	0xFE2
 16306                           fsr1l	equ	0xFE1
 16307                           indf2	equ	0xFDF
 16308                           postinc2	equ	0xFDE
 16309                           postdec2	equ	0xFDD
 16310                           fsr2h	equ	0xFDA
 16311                           fsr2l	equ	0xFD9
 16312                           status	equ	0xFD8
 16313                           
 16314 ;; *************** function _keyPressedInterruptService *****************
 16315 ;; Defined at:
 16316 ;;		line 49 in file "keypad.c"
 16317 ;; Parameters:    Size  Location     Type
 16318 ;;		None
 16319 ;; Auto vars:     Size  Location     Type
 16320 ;;  key             1    0[COMRAM] unsigned char 
 16321 ;; Return value:  Size  Location     Type
 16322 ;;                  1    wreg      void 
 16323 ;; Registers used:
 16324 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 16325 ;; Tracked objects:
 16326 ;;		On entry : 0/0
 16327 ;;		On exit  : 0/0
 16328 ;;		Unchanged: 0/0
 16329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16331 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16333 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16334 ;;Total ram usage:        1 bytes
 16335 ;; Hardware stack levels used:    1
 16336 ;; This function calls:
 16337 ;;		Nothing
 16338 ;; This function is called by:
 16339 ;;		_service
 16340 ;; This function uses a non-reentrant model
 16341 ;;
 16342                           
 16343                           	psect	text69
 16344  00453E                     __ptext69:
 16345                           	opt stack 0
 16346  00453E                     _keyPressedInterruptService:
 16347                           	opt stack 22
 16348                           
 16349                           ;keypad.c: 50: char key = (PORTB & 0xF0) >> 4;
 16350                           
 16351                           ;incstack = 0
 16352  00453E  3881               	swapf	3969,w,c	;volatile
 16353  004540  0B0F               	andlw	15
 16354  004542  0B0F               	andlw	15
 16355  004544  6E01               	movwf	keyPressedInterruptService@key,c
 16356                           
 16357                           ;keypad.c: 51: lastKey = keys[key];
 16358  004546  5001               	movf	keyPressedInterruptService@key,w,c
 16359  004548  0D01               	mullw	1
 16360  00454A  0E21               	movlw	low _keys
 16361  00454C  24F3               	addwf	prodl,w,c
 16362  00454E  6EF6               	movwf	tblptrl,c
 16363  004550  0EFE               	movlw	high _keys
 16364  004552  20F4               	addwfc	prodh,w,c
 16365  004554  6EF7               	movwf	tblptrh,c
 16366  004556                     	if	0	;There are less than 3 active tblptr bytes
 16367  004556                     	endif
 16368  004556  0008               	tblrd		*
 16369  004558  CFF5 F04C          	movff	tablat,_lastKey
 16370  00455C  0012               	return		;funcret
 16371  00455E                     __end_of_keyPressedInterruptService:
 16372                           	opt stack 0
 16373                           pclatu	equ	0xFFB
 16374                           pclath	equ	0xFFA
 16375                           tblptru	equ	0xFF8
 16376                           tblptrh	equ	0xFF7
 16377                           tblptrl	equ	0xFF6
 16378                           tablat	equ	0xFF5
 16379                           prodh	equ	0xFF4
 16380                           prodl	equ	0xFF3
 16381                           intcon	equ	0xFF2
 16382                           intcon3	equ	0xFF0
 16383                           postinc0	equ	0xFEE
 16384                           fsr0h	equ	0xFEA
 16385                           fsr0l	equ	0xFE9
 16386                           wreg	equ	0xFE8
 16387                           postdec1	equ	0xFE5
 16388                           fsr1h	equ	0xFE2
 16389                           fsr1l	equ	0xFE1
 16390                           indf2	equ	0xFDF
 16391                           postinc2	equ	0xFDE
 16392                           postdec2	equ	0xFDD
 16393                           fsr2h	equ	0xFDA
 16394                           fsr2l	equ	0xFD9
 16395                           status	equ	0xFD8
 16396                           pclatu	equ	0xFFB
 16397                           pclath	equ	0xFFA
 16398                           tblptru	equ	0xFF8
 16399                           tblptrh	equ	0xFF7
 16400                           tblptrl	equ	0xFF6
 16401                           tablat	equ	0xFF5
 16402                           prodh	equ	0xFF4
 16403                           prodl	equ	0xFF3
 16404                           intcon	equ	0xFF2
 16405                           intcon3	equ	0xFF0
 16406                           postinc0	equ	0xFEE
 16407                           fsr0h	equ	0xFEA
 16408                           fsr0l	equ	0xFE9
 16409                           wreg	equ	0xFE8
 16410                           postdec1	equ	0xFE5
 16411                           fsr1h	equ	0xFE2
 16412                           fsr1l	equ	0xFE1
 16413                           indf2	equ	0xFDF
 16414                           postinc2	equ	0xFDE
 16415                           postdec2	equ	0xFDD
 16416                           fsr2h	equ	0xFDA
 16417                           fsr2l	equ	0xFD9
 16418                           status	equ	0xFD8
 16419                           
 16420                           	psect	rparam
 16421  0000                     pclatu	equ	0xFFB
 16422                           pclath	equ	0xFFA
 16423                           tblptru	equ	0xFF8
 16424                           tblptrh	equ	0xFF7
 16425                           tblptrl	equ	0xFF6
 16426                           tablat	equ	0xFF5
 16427                           prodh	equ	0xFF4
 16428                           prodl	equ	0xFF3
 16429                           intcon	equ	0xFF2
 16430                           intcon3	equ	0xFF0
 16431                           postinc0	equ	0xFEE
 16432                           fsr0h	equ	0xFEA
 16433                           fsr0l	equ	0xFE9
 16434                           wreg	equ	0xFE8
 16435                           postdec1	equ	0xFE5
 16436                           fsr1h	equ	0xFE2
 16437                           fsr1l	equ	0xFE1
 16438                           indf2	equ	0xFDF
 16439                           postinc2	equ	0xFDE
 16440                           postdec2	equ	0xFDD
 16441                           fsr2h	equ	0xFDA
 16442                           fsr2l	equ	0xFD9
 16443                           status	equ	0xFD8
 16444                           
 16445                           	psect	temp
 16446  00005B                     btemp:
 16447                           	opt stack 0
 16448  00005B                     	ds	1
 16449  0000                     int$flags	set	btemp
 16450                           pclatu	equ	0xFFB
 16451                           pclath	equ	0xFFA
 16452                           tblptru	equ	0xFF8
 16453                           tblptrh	equ	0xFF7
 16454                           tblptrl	equ	0xFF6
 16455                           tablat	equ	0xFF5
 16456                           prodh	equ	0xFF4
 16457                           prodl	equ	0xFF3
 16458                           intcon	equ	0xFF2
 16459                           intcon3	equ	0xFF0
 16460                           postinc0	equ	0xFEE
 16461                           fsr0h	equ	0xFEA
 16462                           fsr0l	equ	0xFE9
 16463                           wreg	equ	0xFE8
 16464                           postdec1	equ	0xFE5
 16465                           fsr1h	equ	0xFE2
 16466                           fsr1l	equ	0xFE1
 16467                           indf2	equ	0xFDF
 16468                           postinc2	equ	0xFDE
 16469                           postdec2	equ	0xFDD
 16470                           fsr2h	equ	0xFDA
 16471                           fsr2l	equ	0xFD9
 16472                           status	equ	0xFD8


Data Sizes:
    Strings     409
    Constant    218
    Data        25
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     57      90
    BANK0           128    117     128
    BANK1           256     63      89
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_23(CODE[17]), STR_22(CODE[11]), STR_21(CODE[19]), STR_20(CODE[18]), 
		 -> STR_19(CODE[17]), STR_18(CODE[24]), STR_17(CODE[17]), STR_16(CODE[19]), 
		 -> STR_15(CODE[17]), STR_14(CODE[18]), STR_13(CODE[17]), STR_12(CODE[18]), 
		 -> STR_11(CODE[23]), STR_10(CODE[20]), STR_9(CODE[8]), STR_8(CODE[11]), 
		 -> STR_7(CODE[11]), STR_6(CODE[11]), STR_5(CODE[12]), STR_4(CODE[16]), 
		 -> STR_3(CODE[30]), STR_2(CODE[29]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    showRunStats@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), main@run(BANK1[14]), 

    showRunTime@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), main@run(BANK1[14]), 

    showDateTime@t	PTR int  size(2) Largest target is 14
		 -> getTime@time(BANK0[14]), 

    showInterface@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(BANK0[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(CODE[4]), padServo(CODE[4]), conveyorServo(CODE[4]), 

    initServo@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(CODE[4]), padServo(CODE[4]), conveyorServo(CODE[4]), 

    servos	PTR int [4] size(2) Largest target is 4
		 -> redirectingServo(CODE[4]), padServo(CODE[4]), conveyorServo(CODE[4]), 

    saveNewRun@data	PTR int  size(2) Largest target is 14
		 -> main@run(BANK1[14]), 

    sp__readPastRun	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 4
		 -> AA_float(COMRAM[4]), cylinderMotor2(CODE[4]), redirectingServo(CODE[4]), padServo(CODE[4]), 
		 -> conveyorServo(CODE[4]), cylinderMotor1(CODE[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 4
		 -> padPin2(COMRAM[4]), padPin1(COMRAM[4]), cylinderMotor1(CODE[4]), 


Critical Paths under _main in COMRAM

    _sortBattery->___ftge
    ___aldiv->___almod
    _printf->___ftge
    _printf->___llmod
    _scale->___wmul
    _lcdNewline->_lcdInst
    _fround->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftge->___awtoft
    _lcdHome->_lcdInst
    _lcdClear->_lcdInst
    _initRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _getTime->_I2C_Master_Read
    _getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _readPastRun->___wmul
    _saveNewRun->_eepromWrite
    _eepromWrite->___wmul
    _eepromRead->___wmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in COMRAM

    _service->_servoInterruptService
    _servoInterruptService->i2_digitalWrite
    i2_startTimer->i2___awmod
    i2_digitalWrite->i2___awmod

Critical Paths under _main in BANK0

    _main->_showRunStats
    _sortBattery->_printf
    _showInterface->_showRunStats
    _showRunTime->_printf
    _showRunStats->_printf
    _showRunSelect->_printf
    _showRunMenu->_printf
    _showMainMenu->_printf
    _showErrorMessage->_printf
    _showDateTime->_printf
    _printf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___ftsub->___ftadd
    _readPastRun->_eepromRead
    _saveNewRun->_eepromWrite
    _eepromWrite->_eepromRead
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftdiv

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery
    _showInterface->_showDateTime

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                37    37      0  899623
                                             26 BANK1     37    37      0
                            ___aldiv
                            ___almod
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                        _digitalRead
                       _digitalWrite
                            _initLCD
                          _initServo
                          _initTimer
                            _lcdHome
                           _pinSetup
                             _printf
                         _saveNewRun
                           _setAngle
                      _showInterface
                       _showRunStats
                        _showRunTime
                        _sortBattery
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         28    28      0  125700
                                            107 BANK0      2     2      0
                                              0 BANK1     26    26      0
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                         _analogRead
                        _digitalRead
                       _digitalWrite
                           _lcdClear
                            _lcdHome
                             _printf
                         _readKeypad
                           _setAngle
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                        11     7      4    2826
                                             36 COMRAM    11     7      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          6     4      2     386
                                             36 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     185
                                             36 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        7     7      0  486190
                                             14 BANK1      7     7      0
                            _initRTC
                        _readPastRun
                       _showDateTime
                   _showErrorMessage
                       _showMainMenu
                        _showRunMenu
                      _showRunSelect
                       _showRunStats
                        _showRunTime
 ---------------------------------------------------------------------------------
 (1) _showRunTime                                         16    14      2   70762
                                            107 BANK0      4     2      2
                                              0 BANK1     12    12      0
                            ___aldiv
                            ___almod
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) ___almod                                             10     2      8    1511
                                             36 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8    1215
                                             46 COMRAM     8     0      8
                                              0 BANK0      6     6      0
                            ___almod (ARG)
 ---------------------------------------------------------------------------------
 (1) _showRunStats                                        10     8      2   68036
                                            107 BANK0     10     8      2
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunSelect                                        1     1      0   67811
                                            107 BANK0      1     1      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunMenu                                          2     2      0   67780
                                            107 BANK0      2     2      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showMainMenu                                         1     1      0   67749
                                            107 BANK0      1     1      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showErrorMessage                                     0     0      0   67622
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      34
                                             36 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _showDateTime                                        16    16      0   70417
                                            107 BANK0      2     2      0
                                              0 BANK1     14    14      0
                            _getTime
                            _initRTC
                         _keyPressed
                           _lcdClear
                            _lcdHome
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              51    37     14   67393
                                             57 BANK0     50    36     14
                            ___aldiv (ARG)
                            ___almod (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   14755
                                             15 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     421
                                             40 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             36 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   14476
                                             15 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2071
                                             36 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1985
                                             42 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                             36 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     827
                                             36 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2763
                                             44 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                             49 COMRAM     8     0      8
                                              0 BANK0      1     1      0
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5365
                                             42 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     142
                                             36 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1892
                                             48 COMRAM     9     3      6
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _lcdHome                                              0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdClear                                             0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _keyPressed                                           1     1      0      34
                                             36 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _initRTC                                              0     0      0    1196
                    _I2C_Master_Init
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Init                                      8     4      4    1196
                                             49 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1011
                                             36 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _getTime                                             19    17      2    1011
                                             39 COMRAM     4     2      2
                                              0 BANK0     15    15      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Write                                     2     0      2     724
                                             37 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Read                                      2     2      0      65
                                             37 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Wait                                      1     1      0       0
                                             36 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _readPastRun                                         18    16      2    4433
                                              4 BANK0     18    16      2
                             ___wmul
                         _eepromRead
 ---------------------------------------------------------------------------------
 (1) _saveNewRun                                           6     4      2    4813
                                             12 BANK0      6     4      2
                             ___wmul
                         _eepromRead
                        _eepromWrite
 ---------------------------------------------------------------------------------
 (2) _eepromWrite                                          9     3      6     435
                                             56 COMRAM     1     1      0
                                              4 BANK0      8     2      6
                             ___wmul (ARG)
                         _eepromRead (ARG)
 ---------------------------------------------------------------------------------
 (3) _eepromRead                                           4     0      4     370
                                              0 BANK0      4     0      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3736
                                             50 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initServo                                           10     6      4   25773
                                             90 BANK0     10     6      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _startTimer                                           8     2      6     690
                                             36 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   24153
                                             80 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   22538
                                             57 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     833
                                             42 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    6266
                                              0 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3888
                                             15 BANK0     15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4847
                                             30 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3256
                                             44 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    3173
                                             44 COMRAM    10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2584
                                             36 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            4     2      2     214
                                             36 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             40 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     195
                                             38 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             36 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             15    15      0    1472
                                             21 COMRAM    15    15      0
         _keyPressedInterruptService
              _servoInterruptService
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                                4     4      0    1168
                                             17 COMRAM     4     4      0
                          i2___awmod
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) i2_startTimer                                         8     2      6     258
                                              6 COMRAM     8     2      6
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                     11     7      4     458
                                              6 COMRAM    11     7      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     452
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _keyPressedInterruptService                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
     ___almod (ARG)
   ___almod
   ___awtoft
     ___ftpack
   ___ftadd
     ___altoft (ARG)
       ___ftpack
       _analogRead (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftpack (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftdiv
     ___altoft (ARG)
       ___ftpack
       _analogRead (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftpack (ARG)
     _analogRead (ARG)
   ___ftmul
     ___altoft (ARG)
       ___ftpack
       _analogRead (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _analogRead (ARG)
   ___fttol
     ___altoft (ARG)
       ___ftpack
       _analogRead (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _digitalRead
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _initTimer
   _lcdHome
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___aldiv (ARG)
       ___almod (ARG)
     ___almod (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___awtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _saveNewRun
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _eepromRead
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _eepromWrite
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _eepromRead (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _setAngle
     _angleToPulse
       ___altoft
         ___ftpack
         _analogRead (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _showInterface
     _initRTC
       _I2C_Master_Init
         ___lldiv
     _readPastRun
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _eepromRead
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _showDateTime
       _getTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _initRTC
         _I2C_Master_Init
           ___lldiv
       _keyPressed
       _lcdClear
         _lcdInst
           _lcdNibble
       _lcdHome
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _showErrorMessage
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showMainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunTime
       ___aldiv
         ___almod (ARG)
       ___almod
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
   _showRunStats
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
         ___almod (ARG)
       ___almod (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
   _showRunTime
     ___aldiv
       ___almod (ARG)
     ___almod
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
         ___almod (ARG)
       ___almod (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___awtoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
       ___awtoft (ARG)
         ___ftpack
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _lcdClear
       _lcdInst
         _lcdNibble
     _lcdHome
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
         ___almod (ARG)
       ___almod (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _startTimer

 _service (ROOT)
   _keyPressedInterruptService
   _servoInterruptService
     i2___awmod
     i2_digitalWrite
       i2___awmod (ARG)
     i2_startTimer
       i2___awmod (ARG)
   i2_startTimer
     i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     3F      59       7       34.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     75      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     39      5A       1       71.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     133      34        0.0%
DATA                 0      0     133       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Apr 10 12:30:12 2017

                       ___altoft@exp 0035                        showRunTime@t1 0104  
                      showRunTime@t2 0106                                    _n 00FE  
                  main@cylinderStart 012B                        ___altoft@sign 0036  
                        _sortBattery 0E0A                       showRunSelect@k 00EB  
                       ___awdiv@sign 0030                  ___wmul@multiplicand 0035  
                        __CFG_BORV$3 000000                       showRunTime@run 00EB  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                        __CFG_OSC$HS 000000                     _redirectingServo FE61  
                       ___ftadd@exp1 00A9                         ___ftadd@exp2 00A8  
                       ___ftadd@sign 00A7                                  l400 351E  
                                l403 41C0                                  l235 450A  
                                l406 41F8                                  l182 118A  
                                l174 1B8A                                  l271 4464  
                                l344 25EE                                  l274 4470  
                                l519 45B0                                  l464 425E  
                                l457 4338                                  l369 43D0  
                                l466 426A                                  l467 4276  
                                l832 0818                                  l841 0A04  
                    ??_showInterface 010E                                  l792 0996  
                       __CFG_CPB$OFF 000000                                  _PEN 007E2A  
                       __CFG_CPD$OFF 000000                                  _SEN 007E28  
                                _Vcc FE39                                  _n_C 0151  
                       ___awmod@sign 002A                                  prod 000FF3  
                                wreg 000FE8                      showRunTime@time 0108  
                       __CFG_LVP$OFF 000000                         ___ftdiv@cntr 0098  
                       ___ftdiv@sign 009D                         __CFG_WDT$OFF 000000  
                               l1200 2DD8                                 l1151 200A  
                               l1128 391E                                 l1225 44EC  
                               l1155 2044                                 l1157 206C  
                               l1166 2142                                 l1175 216C  
                               l1096 2F00                                 l1193 2D4A  
                               l1186 2B3E                                 l1194 2D72  
                               l1275 3DBE                                 l1285 3F82  
                               l5101 4282                                 l6101 38D6  
                               l5081 430C                                 l6105 38EC  
                               l7001 0840                                 l5075 4300  
                               l6107 390A                                 l6203 21E4  
                               l7011 096C                                 l5069 42F6  
                               l6109 3914                                 l6213 2904  
                               l7101 0BE4                                 l7013 097A  
                               l7005 0892                                 l5087 4314  
                               l6151 2052                                 l6311 3E68  
                               l7103 0BEE                                 l6145 2018  
                               l6233 298C                                 l7121 0C78  
                               l7025 09BE                                 l7017 0988  
                               l6243 29CA                                 l6219 293E  
                               l6331 3EAE                                 l6323 3E96  
                               l6315 3E76                                 l6307 3E5C  
                               l7131 0CC6                                 l7123 0C84  
                               l7115 0C5C                                 l7107 0C26  
                               l7051 0A7C                                 l7043 0A4E  
                               l7211 3644                                 l6093 38A0  
                               l6173 20D2                                 l6157 2062  
                               l6237 29AA                                 l6341 3D70  
                               l6317 3E7E                                 l7133 0D46  
                               l7141 0DCC                                 l7109 0C30  
                               l7221 367C                                 l7205 362A  
                               l7301 31C8                                 l6175 20E0  
                               l6167 20A4                                 l6247 29E8  
                               l6343 3D7C                                 l6263 3CDE  
                               l6319 3E82                                 l6327 3EA0  
                               l6431 1CCE                                 l7127 0C9E  
                               l7143 0DD4                                 l7063 0AC2  
                               l7039 0A26                                 l7303 31CE  
                               l6097 38AE                                 l6193 2196  
                               l6185 2128                                 l6177 20EE  
                               l7401 3B1C                                 l6353 3DB0  
                               l6345 3D80                                 l6513 2D9E  
                               l6417 2422                                 l6409 235A  
                               l6441 1D9E                                 l7065 0AC8  
                               l7081 0B20                                 l7049 0A76  
                               l7145 0DEA                                 l7217 366A  
                               l7233 36C0                                 l7321 24B8  
                               l6099 38B8                                 l6187 2136  
                               l6179 20FA                                 l6523 2DC6  
                               l6275 3D04                                 l6291 3D36  
                               l7139 0DBA                                 l7219 3678  
                               l7307 31DC                                 l6533 2E08  
                               l6525 2DD2                                 l6517 2DAE  
                               l6277 3D0C                                 l6269 3CEE  
                               l6437 1D78                                 l7085 0B48  
                               l7501 4458                                 l7237 36DC  
                               l7229 36B0                                 l7261 3990  
                               l7253 396E                                 l7325 2504  
                               l7317 246C                                 l7309 31E2  
                               l6615 2A9C                                 l7343 3704  
                               l7351 3782                                 l7183 3BFC  
                               l6295 3D44                                 l6287 3D2C  
                               l6279 3D10                                 l6455 1F7C  
                               l7095 0BAC                                 l7079 0B0E  
                               l7431 2F1C                                 l7335 259C  
                               l6609 2A62                                 l6393 44AA  
                               l6561 2E98                                 l6553 2E68  
                               l6449 1ED2                                 l7089 0B78  
                               l7273 39D8                                 l7265 39B4  
                               l7257 3980                                 l7249 395A  
                               l7329 2550                                 l6635 2AFC  
                               l6715 2C40                                 l7347 375A  
                               l7179 3BF2                                 l6539 2E26  
                               l6483 2D10                                 l6467 4574  
                               l6803 00FC                                 l7259 398C  
                               l7291 31A6                                 l6733 2CA6  
                               l6725 2C70                                 l7189 3C26  
                               l6653 4232                                 l6741 3F3C  
                               l6573 2EC6                                 l6477 2CE4  
                               l6821 018C                                 l6813 0160  
                               l7453 3016                                 l7461 4194  
                               l7517 40B4                                 l7509 408E  
                               l7269 39C2                                 l7285 3192  
                               l6727 2C80                                 l6719 2C54  
                               l7391 3A9C                                 l6743 3F4A  
                               l6583 2EEE                                 l6903 044E  
                               l6831 01C0                                 l6823 0192  
                               l6815 0176                                 l7367 2760  
                               l7295 31B4                                 l7703 13B4  
                               l7711 13EC                                 l6665 4410  
                               l6729 2C8A                                 l6673 3B5A  
                               l6745 3F4E                                 l6585 2EFA  
                               l6577 2ED6                                 l6905 0464  
                               l6841 0210                                 l6825 0198  
                               l6809 0124                                 l7377 3A86  
                               l7561 3856                                 l7537 37C6  
                               l7297 31BA                                 l7289 31A0  
                               l7713 1414                                 l6595 3DF2  
                               l7395 3AB2                                 l6683 3BB6  
                               l6755 40C0                                 l6915 04F4  
                               l6907 0494                                 l6851 0256  
                               l6835 01E6                                 l6819 0186  
                               l7491 4058                                 l7555 3832  
                               l7539 37CA                                 l7707 13CE  
                               l6597 3DFE                                 l7581 334A  
                               l6677 3B8A                                 l6749 3F72  
                               l6757 40CC                                 l6933 05DE  
                               l6909 04AA                                 l6845 0224  
                               l6837 01F2                                 l7469 41BA  
                               l7565 386E                                 l7661 11EE  
                               l7821 1AC0                                 l7813 1A0E  
                               l7743 34B4                                 l6951 067A  
                               l6935 05E4                                 l6919 051A  
                               l6847 023E                                 l6839 01F8  
                               l6783 0038                                 l7479 401E  
                               l7671 1270                                 l7647 105E  
                               l7831 1AE4                                 l7807 19CA  
                               l6697 2BAE                                 l6961 06D0  
                               l6929 0578                                 l6865 02CC  
                               l6857 026E                                 l6785 004E  
                               l7569 387A                                 l7657 111E  
                               l7817 1AA8                                 l7587 3388  
                               l7739 349E                                 l6971 0702  
                               l6955 06A2                                 l6947 062A  
                               l6891 03C0                                 l6875 0312  
                               l6859 02B2                                 l6795 0088  
                               l6779 0022                                 l7691 1340  
                               l7683 12E6                                 l7763 14FC  
                               l7589 338E                                 l6973 0716  
                               l6965 06DE                                 l6789 0058  
                               l7685 1304                                 l6991 07FA  
                               l6967 06F4                                 l6983 07CA  
                               l7695 135A                                 l7679 12CC  
                               l7791 16BE                                 l7783 15CE  
                               l6985 07D8                                 l6977 073E  
                               l7697 1378                                 l6995 081C  
                               l6899 0428                                 l6989 07E6  
                               _EEIF 007D0C                                 STR_1 FFED  
                               STR_2 FE83                                 STR_3 FE65  
                               STR_4 FFA5                                 STR_5 FFB5  
                               STR_6 FFD7                                 STR_7 FFE2  
                               STR_8 FFCC                                 STR_9 FFF6  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                         printf@tmpval 00D7  
                               u6111 291A                                 _PEIE 007F96  
                               u6320 44A8                                 u7200 0810  
                               u6091 28E0                                 u6315 4144  
                               _RCEN 007E2B                                 u6431 2CC8  
                               u6611 2A3E                                 u6451 2CF4  
                               u6631 2A78                                 u6721 2B8A  
                               u6740 2BD4                                 u7704 3178  
                               u5881 1FB8                                 u6745 2BCA  
                               u7705 3172                                 u8417 18E0  
                               u7810 2532                                 u8507 4378  
                               u5891 1FD6                                 u8427 0E5A  
                               u7804 24F4                                 u8517 4522  
                               u7805 24F0                                 u8437 0F40  
                               u7830 257E                                 u8527 4534  
                               u8447 107A                                 u7824 2540  
                               u7760 3212                                 u8537 3FAC  
                               u7825 253C                                 u7817 2528  
                               u8457 143E                                 u7850 25CC  
                               u7770 249A                                 u7690 3164  
                               u8547 3FBA                                 u8467 147E  
                               u7940 41CE                                 u6980 0358  
                               u7844 258C                                 u8557 3FE0  
                               u8477 3008                                 u7845 2588  
                               u7837 2574                                 u7790 24E6  
                               u8567 3FEE                                 u8487 450E  
                               u7767 3202                                 u7784 24A8  
                               u8497 4344                                 u6985 034C  
                               u7857 25BC                                 u7785 24A4  
                               u7777 2490                                 u7697 315A  
                               u7948 41D0                                 u7965 420C  
                               u7797 24DC                                 u7966 420E  
                               _RSEN 007E29                      showRunStats@n_C 00F1  
                               _n_AA 014F                                 _n_9V 014D  
                    showRunStats@run 00EB                                 _main 14F4  
                               _curr 0048                         ___ftpack@arg 0025  
                               _keys FE21                         ___ftpack@exp 0028  
                               _time 0147                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               fsr0l 000FE9                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 005B                      ??_showRunSelect 003A  
                               prodh 000FF4                                 prodl 000FF3  
                               start 000E                        __CFG_IESO$OFF 000000  
                      __CFG_MCLRE$ON 000000                         ___ftmul@cntr 008D  
                       ___param_bank 000000                         ___ftmul@sign 008E  
                       ___fttol@exp1 00B8                         ___fttol@lval 00B4  
               __end_ofi2_startTimer 42F4                     ?_I2C_Master_Init 0032  
                   ?_I2C_Master_Read 0001                     ?_I2C_Master_Wait 0001  
                   ?_I2C_Master_Stop 0001                         ?_readPastRun 0084  
               __end_of_angleToPulse 28CA                      __end_of___aldiv 36EE  
                    __end_of___almod 39EA              __end_of_redirectAngle_C FE4F  
                              ?_main 0001                                _ACKEN 007E2C  
                              _ACKDT 007E2D                      __end_of___awdiv 3D4E  
                              _EEADR 000FA9                      __end_of___ftadd 220A  
                              STR_10 FECF                                STR_11 FEB8  
                              STR_20 FF2D                                STR_12 FF09  
                              STR_13 FF72                                STR_21 FEF6  
                              STR_22 FFC1                                STR_14 FF1B  
                              STR_23 FF94                                STR_15 FF61  
                              STR_24 FF3F                                STR_16 FEE3  
                              STR_17 FF83                                STR_18 FEA0  
                              STR_19 FF50                      __end_of___awmod 3EB8  
                    __end_of___ftdiv 2B74              ??_servoInterruptService 0012  
                    __end_of___ftneg 44FA                      __end_of___lldiv 3DD0  
                    __end_of___ftmul 2A28                                _T0CON 000FD5  
                    ___awdiv@divisor 002D                                _T1CON 000FCD  
                    __end_of___llmod 3F94                      __end_of___ftsub 425C  
                    __end_of___fttol 2CB8                                _T3CON 000FB1  
                              i2l207 35CE                                i2l208 3596  
                              i2l209 35A8                                i2l464 42AA  
                              i2l466 42B6                                i2l467 42C2  
                    ___awdiv@counter 002F                                _TMR0H 000FD7  
                              _TMR1H 000FCF                                _TMR0L 000FD6  
                              _TMR3H 000FB3                                _TMR1L 000FCE  
                              _TMR3L 000FB2                                _PORTA 000F80  
                              _PORTB 000F81                                _PORTC 000F82  
                              _PORTD 000F83                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
                       main@duration 013B                        __CFG_PWRT$OFF 000000  
                    _cylinderForward FE41                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                      __end_of_lcdHome 4600  
                       ___lltoft@exp 0035                        _conveyorServo FE51  
                    __end_of_lcdInst 453E                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                      __end_of_getTime 3C46  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                     showRunStats@n_AA 00ED  
                   showRunStats@n_9V 00EF                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                    __end_of_initLCD 4384                       __CFG_EBTRB$OFF 000000  
                      ___awtoft@sign 0030                                _angle 004D  
                    __end_of_initRTC 45B0                      __end_of_dpowers FDB3  
                              _count 0046                                _scale 1B8C  
                    __end_of_isdigit 457C                       eepromWrite@ien 008A  
                      ___ftpack@sign 0029                    ?_showErrorMessage 0001  
                              _pulse 013F                                _putch 44FA  
                              pclath 000FFA                                tablat 000FF5  
                    __end_of_service 360A                   ??_showErrorMessage 003A  
                              status 000FD8                   __size_ofi2___awmod 0070  
                     __CFG_PBADEN$ON 000000                 __end_of_digitalWrite 3236  
                    __initialization 3C46                         __end_of_main 1B8C  
                       __end_of_keys FE32                               ??_main 011A  
                      ___fttol@sign1 00B3                        __activetblptr 000002  
               __size_of_digitalRead 018A                     _cylinderBackward FE3F  
               __size_of__tdiv_to_l_ 0132                         _stoppingTime 0157  
                  ?_I2C_Master_Start 0001                      i2digitalWrite@p 0010  
                  ?_I2C_Master_Write 0026                   ??_I2C_Master_Start 0026  
           __end_of_redirectAngle_AA FE4D             __end_of_redirectAngle_9V FE4B  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                 ??_I2C_Master_Write 0028                               _ADCON2 000FC0  
                   __end_of___altoft 3E48                     ___llmod@dividend 0032  
                             ?_scale 008F                               _ADRESH 000FC4  
                             _EEADRH 000FAA                               _ADRESL 000FC3  
                             _EEDATA 000FA8                               _EECON1 000FA6  
                             _EECON2 000FA7        keyPressedInterruptService@key 0001  
                   ___awdiv@dividend 002B                     __end_of___awtoft 4434  
                             ?_putch 0001                     __end_of___ftpack 393E  
                   __end_of___lltoft 4116                               _INT0IE 007F94  
                             _INT0IF 007F91                               _INT1IE 007F83  
                             _INT1IF 007F80                         sortBattery@V 0117  
                       sortBattery@i 0114                               i2l5411 3ECC  
                             i2l5421 3EEE                               i2l5423 3EF2  
                             i2l5431 3F10                               i2l5415 3ED8  
                             i2l5435 3F1E                               i2l5427 3F06  
                             i2l5419 3EE6                               i2l5371 32C2  
                             i2l5363 32A8                               i2l5381 32E4  
                             i2l5365 32AE                               i2l5375 32D0  
                             i2l5359 329A                               i2l5383 32EA  
                             i2l5377 32D6                               i2l5369 32BC  
                             i2l5397 42CE                               i2l5699 312A  
                             _TMR0IE 007F95                               _TMR0IF 007F92  
                             _TMR1IE 007CE8                               _TMR1IF 007CF0  
                             _TMR3IE 007D01                               _SSPADD 000FC8  
                             _TRISC3 007CA3                               _TRISC4 007CA4  
                             _SSPBUF 000FC9                     __end_of_lcdClear 4608  
                  _angleToPulse$1419 00C9                       __CFG_XINST$OFF 000000  
               __size_of_eepromWrite 0050                     __end_of__powers_ FE01  
                             ___ftge 3B2A                     __end_of_padServo FE61  
                          ??___aldiv 0037                            ??___almod 002D  
                             ___wmul 44B0                            ??___awdiv 002F  
                          ??___ftadd 00A4                       __CFG_STVREN$ON 000000  
                          ??___awmod 0029                            ??___ftdiv 0095  
                          ??___ftneg 0028                            ??___lldiv 002D  
                          ??___ftmul 0086                            ??___llmod 003A  
                          ??___ftsub 0039                            ??___fttol 00AE  
           __end_of_padAngle_NEUTRAL FE47              __end_of_cylinderForward FE43  
                             _fround 220A                               clear_0 3CA4  
                             clear_1 3CB6                      eepromWrite@data 0084  
                   ___awdiv@quotient 0031                      ___awmod@divisor 0027  
                          ??_lcdHome 0029                      ___awmod@counter 0029  
                             _servos 003A                            ??_lcdInst 0027  
                             _printf 0012                            ??_getTime 002A  
                   __end_of_pinSetup 43C4                     __end_of_setAngle 37C2  
                  analogRead@channel 0025                ___ftmul@f3_as_product 008A  
                          ??_initLCD 0029                            ??_initRTC 003A  
                       __pdataCOMRAM 004D                            ??_isdigit 0025  
                    readPastRun@data 0086                    __end_ofi2___awmod 3F28  
                      setAngle@angle 00D2                         __mediumconst FD8A  
                       ?_showRunMenu 0001                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                       ?_showRunTime 00EB                        setAngle@motor 00D0  
                          ??_service 0016                       i2___awmod@sign 0006  
                         __accesstop 0080              __end_of__initialization 3CBC  
                         ___altoft@c 002D             __end_of_redirectingServo FE65  
                         ___ftadd@f1 009E                           ___ftadd@f2 00A1  
                         ___ftge@ff1 0031                           ___ftge@ff2 0034  
                      ___rparam_used 000001                           ___ftdiv@f1 008F  
                         ___ftdiv@f2 0092                           ___ftdiv@f3 0099  
                         ___ftneg@f1 0025                           ___awtoft@c 002D  
              __size_ofi2_startTimer 004C                           ___ftmul@f1 0080  
                         ___ftmul@f2 0083                           ___ftsub@f1 00AA  
                         ___ftsub@f2 00AD                           ___fttol@f1 00AA  
               __end_of_happynewyear FE39                       __pcstackCOMRAM 0001  
              __size_of_angleToPulse 015E                         __pidataBANK0 45E6  
                       __pidataBANK1 4618                           ___lltoft@c 002D  
                      __end_of_scale 1FA2                         ?_sortBattery 0001  
                      __end_of_putch 451C                   __size_of_lcdNibble 0066  
                         __div_to_l_ 2DEA                    eepromRead@address 0080  
               __size_of_readPastRun 0098                      showDateTime@day 0106  
                    showDateTime@min 0102                      showDateTime@sec 0100  
                    showDateTime@mon 0108                      __div_to_l_@exp1 0030  
                    __div_to_l_@cntr 002F                              ??_scale 0039  
                    __div_to_l_@quot 002B                              ??_putch 0029  
                       i2_startTimer 42A8                           __pbssBANK0 00FE  
                         __pbssBANK1 013F                         _angleToPulse 276C  
              __size_of_digitalWrite 0108                   __size_of_initTimer 004A  
                 __size_of_initServo 00F8                           _analogRead 43C4  
                      __div_to_l_@f1 0025                        __div_to_l_@f2 0028  
                            ?___ftge 0031                              ?___wmul 0033  
                   _sortBattery$1418 0100                          saveNewRun@i 0090  
                          ?___altoft 002D                          saveNewRun@n 008E  
                            ?_fround 008F                           _lcdNewline 45F0  
                          ?___awtoft 002D                            ?___ftpack 0025  
                            ?_printf 00B9                            ?___lltoft 002D  
                         _eepromRead 457C       __size_of_servoInterruptService 010C  
      __end_of_servoInterruptService 312E                __end_of_showInterface 3890  
                  i2startTimer@timer 0007                            ?_lcdClear 0001  
                   angleToPulse@a000 00CC                     angleToPulse@a180 00C5  
                       _digitalWrite 312E                              _SSPCON1 000FC6  
                            _SSPCON2 000FC5                              _SSPSTAT 000FC7  
            __size_ofi2_digitalWrite 0108                              _V_LIM_C 00FB  
                main@lastBatteryTime 013D                            ?_pinSetup 0001  
                          ?_setAngle 00D0                    __end_of_lcdNibble 3FFA  
           __end_of_cylinderBackward FE41                    __end_of__npowers_ FDDA  
                            __Hparam 0000                           _scale$1423 0092  
              __end_of_showRunSelect 405E                           _keyPressed 45D0  
                            __Lparam 0000                __end_of_padAngle_OPEN FE49  
                       readPastRun@i 0094                              ___aldiv 360A  
          __size_of_showErrorMessage 0030                              ___almod 393E  
                    __size_of___ftge 0090                              ___awdiv 3CCA  
                            ___ftadd 1FA2                              ___awmod 3E48  
                         _readKeypad 4464                              ___ftdiv 2A28  
                            ___ftneg 44D6                              ___lldiv 3D4E  
                    __size_of___wmul 0026                              ___ftmul 28CA  
                            ___llmod 3F28                              ___ftsub 4210  
                            ___fttol 2B74                              _n_OTHER 0153  
                         ??___altoft 0031                              __pcinit 3C46  
                         ??___awtoft 0030                           ??___ftpack 002A  
                    __size_of_fround 0260                              __ramtop 1000  
                            _lcdHome 45F8                              _lcdInst 451C  
                         ??___lltoft 0031                              __ptext0 14F4  
                            __ptext1 0E0A                              __ptext2 312E  
                            __ptext3 246A                              _getTime 3BBA  
                            __ptext4 43C4                              __ptext5 37C2  
                            __ptext6 25F4                              __ptext7 393E  
                            __ptext8 360A                              __ptext9 39EA  
                      ?_showDateTime 0001                      __size_of_printf 0DF8  
                            _padPin1 0053                              _padPin2 0057  
                            _padPin3 0042                        startTimer@val 0027  
                            _initLCD 433E                    __end_of_hexpowers FE21  
                        ?__div_to_l_ 0025                              _lastKey 004C  
                            _initRTC 459A                    __end_of_initTimer 433E  
                  __end_of_initServo 3436                              _dpowers FD8B  
                            _isdigit 455E                     ___awmod@dividend 0025  
                   ___aldiv@dividend 002F             __size_of_I2C_Master_Init 005A  
           __size_of_I2C_Master_Read 0026                           ??_lcdClear 0029  
           __size_of_I2C_Master_Wait 0012             __size_of_I2C_Master_Stop 0008  
                      ?_showMainMenu 0001                              _service 0008  
                            main@run 012D                 __size_of_showRunMenu 005C  
                     __pintcode_body 3520                 __size_of_showRunTime 0178  
               end_of_initialization 3CBC                           _saveNewRun 3436  
                      __Lmediumconst FD8A                              int_func 3520  
                     digitalRead@pin 0025                          ?_analogRead 0025  
                         ??_pinSetup 0025                           ??_setAngle 00D4  
          __size_of_I2C_Master_Start 0008            __size_of_I2C_Master_Write 000A  
                    ___lldiv@divisor 0029                      ___lldiv@counter 0031  
                     setAngle@period 00D6                        ?_showRunStats 00EB  
                            printf@c 00EA                              printf@f 00B9  
                   ___aldiv@quotient 0082                     I2C_Master_Init@c 0032  
                   I2C_Master_Read@a 0026                              postdec1 000FE5  
                            postdec2 000FDD                      _batteryDetected 014B  
                            postinc0 000FEE                              postinc2 000FDE  
                     __tdiv_to_l_@f1 0025                       __tdiv_to_l_@f2 0028  
                         _resolution FE3C                        ??_digitalRead 0027  
                        ?_lcdNewline 0001                        ??__tdiv_to_l_ 002B  
                     ??_showDateTime 00EB                            _PORTBbits 000F81  
               __size_of_sortBattery 06EA                     showInterface@key 0114  
                   showInterface@run 0112                          ?_eepromRead 0080  
                     ??_showMainMenu 003A         ??_keyPressedInterruptService 0001  
                _redirectAngle_OTHER FE4F                         _happynewyear FE32  
                 angleToPulse@offset 00C1                   sortBattery@V_float 0102  
                          i2___awmod 3EB8                           _startTimer 425C  
                      ??_eepromWrite 0039                          ___ftdiv@exp 009C  
                        printf@width 00E4                  __size_of__div_to_l_ 0128  
                     ??_showRunStats 003A                          ?_keyPressed 0001  
                        ___ftmul@exp 0089                          ?_readKeypad 0001  
                     __end_of___ftge 3BBA                       __end_of___wmul 44D6  
                      __pidataCOMRAM 45C2  __size_of_keyPressedInterruptService 0020  
                     _cylinderMotor1 FE55                       _cylinderMotor2 FE59  
                     __end_of_fround 246A                       __end_of_printf 0E0A  
                __size_of_analogRead 0038                  start_initialization 3C46  
                __end_of_digitalRead 25F4                          __end_of_Vcc FE3C  
                __end_of__tdiv_to_l_ 2DEA                       initServo@angle 00DC  
                     initTimer@timer 0025                       initServo@motor 00DA  
                         ?i2___awmod 0001                          ?_saveNewRun 008C  
                     i2_digitalWrite 3236                    ??_I2C_Master_Init 0036  
                  ??_I2C_Master_Read 0026                    ??_I2C_Master_Wait 0025  
                  ??_I2C_Master_Stop 0026                  __size_of_lcdNewline 0008  
                    ___llmod@divisor 0036                      ___llmod@counter 0080  
                __size_of_eepromRead 001E                           initServo@i 00E2  
                   showDateTime@hour 0104                     showDateTime@year 010A  
                           ??___ftge 0037                     _showErrorMessage 4434  
                __end_of_eepromWrite 4210                             ??___wmul 0037  
             __end_of_cylinderMotor1 FE59               __end_of_cylinderMotor2 FE5D  
                        __pdataBANK0 00F5                          __pdataBANK1 0157  
                   __CFG_LPT1OSC$OFF 000000                             ??_fround 0039  
                      ??_readPastRun 0039                       readPastRun@run 0084  
                           ??_printf 00C7                    __size_of___altoft 0078  
                         fround@prec 0098                    __size_of___awtoft 0038  
                  __size_of___ftpack 00AE                __end_of_conveyorServo FE55  
                  __size_of___lltoft 005C                          __pbssCOMRAM 003A  
                      __pcstackBANK0 0080                        __pcstackBANK1 0100  
                __size_of_keyPressed 000C               __end_ofi2_digitalWrite 333E  
             sortBattery@targetAngle 010A                         _isdigit$1053 0026  
                      keyPressed@key 0025                          ?_startTimer 0025  
                  __size_of_lcdClear 0008                  __size_of_readKeypad 0026  
               __end_of_showDateTime 3022                    i2digitalWrite@pin 0007  
                  i2digitalWrite@val 0009                     _I2C_Master_Start 4610  
                   _I2C_Master_Write 45DC                            _main$1417 0127  
                  __CFG_CCP2MX$PORTC 000000                    __size_of_pinSetup 0040  
               __end_of_showMainMenu 41C0                    __size_of_setAngle 00D4  
                          __pintcode 0008                        __pmediumconst FD8A  
                          _lcdNibble 3F94                             ?___aldiv 002F  
                           ?___almod 0025                             ?___awdiv 002B  
                           ?___ftadd 009E                             ?___awmod 0025  
                           ?___ftdiv 008F                             ?___ftneg 0025  
                           ?___lldiv 0025                             ?___ftmul 0080  
                           ?___llmod 0032                             ?___ftsub 00AA  
                          __npowers_ FDB3                             ?___fttol 00AA  
                        _digitalRead 246A                  __size_of_saveNewRun 00EA  
                   ___almod@dividend 0025                             ?_lcdHome 0001  
                           ?_lcdInst 0001                          __tdiv_to_l_ 2CB8  
                           ?_getTime 0028                         ??__div_to_l_ 002B  
                           ?_initLCD 0001                             ?_initRTC 0001  
                    startTimer@timer 0025                             ?_isdigit 0001  
 __end_of_keyPressedInterruptService 455E           _keyPressedInterruptService 453E  
                __end_of_readPastRun 3B2A                 __end_of_showRunStats 3A92  
                           ?_service 0001                            _hexpowers FE01  
                          _initTimer 42F4                            _initServo 333E  
                    ?i2_digitalWrite 0007                _servoInterruptService 3022  
                        ??i2___awmod 0005                       __size_of_scale 0416  
                     __size_of_putch 0022                             _AA_float 004F  
                 eepromWrite@address 0086                      ___aldiv@divisor 0033  
                    ___aldiv@counter 0080                       ___wmul@product 0037  
                           _LATDbits 000F8C                         ??_analogRead 0029  
                        _eepromWrite 41C0                   __end_of__div_to_l_ 2F12  
                           i2u533_40 331A                             i2u533_47 330A  
                           i2u526_40 326C                             i2u526_47 3262  
                           i2u527_44 3280                             i2u527_45 327A  
             __size_of_showInterface 00CE                     __CFG_WDTPS$32768 000000  
                         ?_lcdNibble 0001                       _padAngle_CLOSE FE43  
                          _terminate 0155                        digitalWrite@p 002E  
                         service@key 0024                         ??_lcdNewline 0029  
                __size_of_startTimer 004C                    angleToPulse@angle 00B9  
                  ___wmul@multiplier 0033                        lcdNibble@data 0026  
                       ??_eepromRead 0039                           printf@flag 00E6  
                      lcdNibble@temp 0025                           printf@fval 00DD  
                         printf@prec 00E8                        ??_showRunMenu 003A  
                      ??_showRunTime 00ED                   __end_of_analogRead 43FC  
                           _V_LIM_AA 00F8                             _V_LIM_9V 00F5  
             __size_of_showRunSelect 0064                       saveNewRun@data 008C  
                         ?_initTimer 0025                           ?_initServo 00DA  
                  sortBattery@signal 0105             sortBattery@pos_v_counter 010F  
                I2C_Master_Read@temp 0027                            copy_data0 3C72  
                          copy_data1 3C92                   i2___awmod@dividend 0001  
                 __end_of_lcdNewline 45F8                        readKeypad@key 0025  
                           __Hrparam 0000                         ??_keyPressed 0025  
             __end_of_padAngle_CLOSE FE45                             __Lrparam 0000  
                 __end_of_eepromRead 459A                   __CFG_BOREN$SBORDIS 000000  
                       ??_readKeypad 0025                  showRunStats@n_OTHER 00F3  
                      ??_sortBattery 00EB                     __size_of___aldiv 00E4  
                   __size_of___almod 00AC                     __size_of___awdiv 0084  
                   __size_of___ftadd 0268                     __size_of___awmod 0070  
                   __size_of___ftdiv 014C                     __size_of___ftneg 0024  
                   __size_of___lldiv 0082                             ___altoft 3DD0  
                   __size_of___ftmul 015E                     __size_of___llmod 006C  
                   __size_of___ftsub 004C                     __size_of___fttol 0144  
                           ___awtoft 43FC                             ___ftpack 3890  
                        _readPastRun 3A92                          _fround$1421 0095  
                        _fround$1422 0092                             ___lltoft 40BA  
                   __size_of_lcdHome 0008                     __size_of_lcdInst 0022  
                   __size_of_getTime 008C                        showDateTime@t 010C  
                          setAngle@i 00D8                      _I2C_Master_Init 4116  
                    _I2C_Master_Read 448A                     __size_of_initLCD 0046  
                    _I2C_Master_Wait 45B0                     __size_of_initRTC 0016  
                    _I2C_Master_Stop 4608                     __size_of_isdigit 001E  
             ?_servoInterruptService 0001                        _showInterface 37C2  
                           _lcdClear 4600                             __ptext10 3FFA  
                           __ptext11 405E                             __ptext20 455E  
                           __ptext12 4170                             __ptext21 220A  
                           __ptext13 4434                             __ptext30 3B2A  
                           __ptext22 3E48                             __ptext14 4464  
                           __ptext31 45F8                             __ptext23 3CCA  
                           __ptext15 2F12                             __ptext40 4610  
                           __ptext32 4600                             __ptext24 2CB8  
                           __ptext16 0012                             __ptext41 448A  
                           __ptext33 45D0                             __ptext25 2DEA  
                           __ptext17 1B8C                             __ptext50 425C  
                           __ptext42 45B0                             __ptext34 459A  
                           __ptext26 40BA                             __ptext18 44FA  
                           __ptext51 36EE                             __ptext43 3A92  
                           __ptext35 4116                             __ptext27 3F28  
                           __ptext19 45F0                             __ptext60 42F4  
                           __ptext52 276C                             __ptext44 3436  
                           __ptext36 3D4E                             __ptext28 4210  
                           __ptext61 433E                             __ptext53 2B74  
                           __ptext45 41C0                             __ptext37 3BBA  
                           __ptext29 44D6                             __ptext62 451C  
                           __ptext54 28CA                             __ptext46 457C  
                           __ptext38 45DC                             __ptext63 3F94  
                           __ptext55 2A28                             __ptext47 44B0  
                           __ptext39 4608                             __ptext56 1FA2  
                           __ptext48 4384                             __ptext65 3022  
                           __ptext57 43FC                             __ptext49 333E  
                           __ptext66 42A8                             __ptext58 3DD0  
                           __ptext67 3236                             __ptext59 3890  
                           __ptext68 3EB8                             __ptext69 453E  
           __end_of_showErrorMessage 4464                   __end_of_keyPressed 45DC  
              __size_of_showDateTime 0110                             __powers_ FDDA  
                   __size_of_service 3602                      i2startTimer@val 0009  
                    ___almod@divisor 0029                         ??_saveNewRun 003A  
                      ?i2_startTimer 0007                             _padServo FE5D  
                    ___almod@counter 002D                  __end_of_showRunMenu 40BA  
                 __end_of_readKeypad 448A                  __end_of_showRunTime 276C  
                      ?_angleToPulse 00B9                        __size_of_main 0698  
              __size_of_showMainMenu 0050                             _pinSetup 4384  
                           _setAngle 36EE                        _showRunSelect 3FFA  
                           _prevTime 004A                     sortBattery@V_245 0111  
                        ??_lcdNibble 0025                             getTime@i 008E  
                     showInterface@n 0110                        _padAngle_OPEN FE47  
                           int$flags 005B                     sortBattery@V_max 0107  
                   sortBattery@V_sum 010C                            printf@idx 00D0  
                          printf@len 00D3                            printf@exp 00DB  
                          printf@val 00E0                        showMainMenu@k 00EB  
                 __end_of_saveNewRun 3520                __size_of_showRunStats 00A8  
                       _showDateTime 2F12                    i2___awmod@divisor 0003  
                          putch@data 0029                    i2___awmod@counter 0005  
           __end_of_I2C_Master_Start 4618                  __end_of_sortBattery 14F4  
           __end_of_I2C_Master_Write 45E6                           _INTCONbits 000FF2  
                     ?_showInterface 0001                        ?_digitalWrite 0025  
                        ??_initTimer 0027                          ??_initServo 00DE  
                           isdigit@c 0027                         _showMainMenu 4170  
                           scale@scl 0095                       ??i2_startTimer 000D  
                       ??_startTimer 002B                             intlevel2 0000  
                   __tdiv_to_l_@exp1 0033                     __tdiv_to_l_@cntr 0032  
                     ??_angleToPulse 00BD                     __tdiv_to_l_@quot 002E  
        __end_of_redirectAngle_OTHER FE51                     ___lldiv@dividend 0025  
                 __end_of_resolution FE3F                     _showRunTime$1420 0100  
                     ?_showRunSelect 0001                         _showRunStats 39EA  
                   _redirectAngle_AA FE4B                     _redirectAngle_9V FE49  
                           printf@ap 00D5                             printf@cp 00D1  
            __end_of_I2C_Master_Init 4170              __end_of_I2C_Master_Read 44B0  
            __end_of_I2C_Master_Wait 45C2              __end_of_I2C_Master_Stop 4610  
                        lcdInst@data 0028                         ?_digitalRead 0025  
                       ?__tdiv_to_l_ 0025                   __end_of_startTimer 42A8  
                        _printf$1424 00CD                     ??i2_digitalWrite 000B  
                   ___lldiv@quotient 002D                    I2C_Master_Write@d 0026  
                     ??_digitalWrite 0029          ?_keyPressedInterruptService 0001  
                       ___aldiv@sign 0081                          _showRunMenu 405E  
                        _showRunTime 25F4                      _redirectAngle_C FE4D  
                        getTime@time 0080                     _padAngle_NEUTRAL FE45  
                    digitalWrite@pin 0025                      digitalWrite@val 0027  
                       ___almod@sign 002E                         ?_eepromWrite 0084  
                       showRunMenu@k 00EC                       showRunMenu@key 00EB  
