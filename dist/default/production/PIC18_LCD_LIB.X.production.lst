

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Mar 24 17:00:53 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    91                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    92                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    93  0000                     
    94                           ; Version 1.40
    95                           ; Generated 01/12/2016 GMT
    96                           ; 
    97                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    98                           ; All rights reserved.
    99                           ; 
   100                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   101                           ; 
   102                           ; Redistribution and use in source and binary forms, with or without modification, are
   103                           ; permitted provided that the following conditions are met:
   104                           ; 
   105                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   106                           ;        conditions and the following disclaimer.
   107                           ; 
   108                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   109                           ;        of conditions and the following disclaimer in the documentation and/or other
   110                           ;        materials provided with the distribution.
   111                           ; 
   112                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   113                           ;        software without specific prior written permission.
   114                           ; 
   115                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   116                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   117                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   118                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   119                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   120                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   121                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   122                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   123                           ; 
   124                           ; 
   125                           ; Code-generator required, PIC18F4620 Definitions
   126                           ; 
   127                           ; SFR Addresses
   128  0000                     
   129                           	psect	idataCOMRAM
   130  004C74                     __pidataCOMRAM:
   131                           	opt stack 0
   132                           
   133                           ;initializer for _angle
   134  004C74  005A               	dw	90
   135                           
   136                           ;initializer for _redirectAngle_C
   137  004C76  006F               	dw	111
   138                           
   139                           	psect	idataBANK1
   140  004B06                     __pidataBANK1:
   141                           	opt stack 0
   142                           
   143                           ;initializer for _padAngle_CLOSE
   144  004B06  001E               	dw	30
   145                           
   146                           ;initializer for _padAngle_NEUTRAL
   147  004B08  0046               	dw	70
   148                           
   149                           ;initializer for _padAngle_OPEN
   150  004B0A  00B4               	dw	180
   151                           
   152                           ;initializer for _redirectAngle_9V
   153  004B0C  0040               	dw	64
   154                           
   155                           ;initializer for _redirectAngle_AA
   156  004B0E  004A               	dw	74
   157                           
   158                           ;initializer for _redirectAngle_OTHER
   159  004B10  0059               	dw	89
   160                           
   161                           ;initializer for _conveyorServo
   162  004B12  0002               	dw	2
   163  004B14  0001               	dw	1
   164  004B16  00                 	db	0
   165  004B17  00                 	db	0
   166                           
   167                           ;initializer for _padServo
   168  004B18  0002               	dw	2
   169  004B1A  0002               	dw	2
   170  004B1C  00                 	db	0
   171  004B1D  00                 	db	0
   172                           
   173                           ;initializer for _redirectingServo
   174  004B1E  0002               	dw	2
   175  004B20  0003               	dw	3
   176  004B22  00                 	db	0
   177  004B23  00                 	db	0
   178                           
   179                           ;initializer for _AA_float
   180  004B24  0002               	dw	2
   181  004B26  0005               	dw	5
   182                           
   183                           ;initializer for _cylinderMotor
   184  004B28  0002               	dw	2
   185  004B2A  0000               	dw	0
   186                           
   187                           ;initializer for _padPin1
   188  004B2C  0002               	dw	2
   189  004B2E  0006               	dw	6
   190                           
   191                           ;initializer for _padPin2
   192  004B30  0002               	dw	2
   193  004B32  0007               	dw	7
   194                           
   195                           	psect	mediumconst
   196  00FDC2                     __pmediumconst:
   197                           	opt stack 0
   198  00FDC2  00                 	db	0
   199  00FDC3                     _dpowers:
   200                           	opt stack 0
   201  00FDC3  0001               	dw	1
   202  00FDC5  0000               	dw	0
   203  00FDC7  000A               	dw	10
   204  00FDC9  0000               	dw	0
   205  00FDCB  0064               	dw	100
   206  00FDCD  0000               	dw	0
   207  00FDCF  03E8               	dw	1000
   208  00FDD1  0000               	dw	0
   209  00FDD3  2710               	dw	10000
   210  00FDD5  0000               	dw	0
   211  00FDD7  86A0               	dw	34464
   212  00FDD9  0001               	dw	1
   213  00FDDB  4240               	dw	16960
   214  00FDDD  000F               	dw	15
   215  00FDDF  9680               	dw	38528
   216  00FDE1  0098               	dw	152
   217  00FDE3  E100               	dw	57600
   218  00FDE5  05F5               	dw	1525
   219  00FDE7  CA00               	dw	51712
   220  00FDE9  3B9A               	dw	15258
   221  00FDEB                     __end_of_dpowers:
   222                           	opt stack 0
   223  00FDEB                     __npowers_:
   224                           	opt stack 0
   225  00FDEB  00                 	db	0
   226  00FDEC  80                 	db	128
   227  00FDED  3F                 	db	63
   228  00FDEE  CD                 	db	205
   229  00FDEF  CC                 	db	204
   230  00FDF0  3D                 	db	61
   231  00FDF1  D7                 	db	215
   232  00FDF2  23                 	db	35
   233  00FDF3  3C                 	db	60
   234  00FDF4  12                 	db	18
   235  00FDF5  83                 	db	131
   236  00FDF6  3A                 	db	58
   237  00FDF7  B7                 	db	183
   238  00FDF8  D1                 	db	209
   239  00FDF9  38                 	db	56
   240  00FDFA  C6                 	db	198
   241  00FDFB  27                 	db	39
   242  00FDFC  37                 	db	55
   243  00FDFD  38                 	db	56
   244  00FDFE  86                 	db	134
   245  00FDFF  35                 	db	53
   246  00FE00  C0                 	db	192
   247  00FE01  D6                 	db	214
   248  00FE02  33                 	db	51
   249  00FE03  CC                 	db	204
   250  00FE04  2B                 	db	43
   251  00FE05  32                 	db	50
   252  00FE06  70                 	db	112
   253  00FE07  89                 	db	137
   254  00FE08  30                 	db	48
   255  00FE09  E7                 	db	231
   256  00FE0A  DB                 	db	219
   257  00FE0B  2E                 	db	46
   258  00FE0C  E5                 	db	229
   259  00FE0D  3C                 	db	60
   260  00FE0E  1E                 	db	30
   261  00FE0F  42                 	db	66
   262  00FE10  A2                 	db	162
   263  00FE11  0D                 	db	13
   264  00FE12                     __end_of__npowers_:
   265                           	opt stack 0
   266  00FE12                     __powers_:
   267                           	opt stack 0
   268  00FE12  00                 	db	0
   269  00FE13  80                 	db	128
   270  00FE14  3F                 	db	63
   271  00FE15  00                 	db	0
   272  00FE16  20                 	db	32
   273  00FE17  41                 	db	65
   274  00FE18  00                 	db	0
   275  00FE19  C8                 	db	200
   276  00FE1A  42                 	db	66
   277  00FE1B  00                 	db	0
   278  00FE1C  7A                 	db	122
   279  00FE1D  44                 	db	68
   280  00FE1E  40                 	db	64
   281  00FE1F  1C                 	db	28
   282  00FE20  46                 	db	70
   283  00FE21  50                 	db	80
   284  00FE22  C3                 	db	195
   285  00FE23  47                 	db	71
   286  00FE24  24                 	db	36
   287  00FE25  74                 	db	116
   288  00FE26  49                 	db	73
   289  00FE27  97                 	db	151
   290  00FE28  18                 	db	24
   291  00FE29  4B                 	db	75
   292  00FE2A  BC                 	db	188
   293  00FE2B  BE                 	db	190
   294  00FE2C  4C                 	db	76
   295  00FE2D  6B                 	db	107
   296  00FE2E  6E                 	db	110
   297  00FE2F  4E                 	db	78
   298  00FE30  03                 	db	3
   299  00FE31  15                 	db	21
   300  00FE32  50                 	db	80
   301  00FE33  79                 	db	121
   302  00FE34  AD                 	db	173
   303  00FE35  60                 	db	96
   304  00FE36  F3                 	db	243
   305  00FE37  49                 	db	73
   306  00FE38  71                 	db	113
   307  00FE39                     __end_of__powers_:
   308                           	opt stack 0
   309  00FE39                     _hexpowers:
   310                           	opt stack 0
   311  00FE39  0001               	dw	1
   312  00FE3B  0000               	dw	0
   313  00FE3D  0010               	dw	16
   314  00FE3F  0000               	dw	0
   315  00FE41  0100               	dw	256
   316  00FE43  0000               	dw	0
   317  00FE45  1000               	dw	4096
   318  00FE47  0000               	dw	0
   319  00FE49  0000               	dw	0
   320  00FE4B  0001               	dw	1
   321  00FE4D  0000               	dw	0
   322  00FE4F  0010               	dw	16
   323  00FE51  0000               	dw	0
   324  00FE53  0100               	dw	256
   325  00FE55  0000               	dw	0
   326  00FE57  1000               	dw	4096
   327  00FE59                     __end_of_hexpowers:
   328                           	opt stack 0
   329  00FE59                     _keys:
   330                           	opt stack 0
   331  00FE59  31                 	db	49
   332  00FE5A  32                 	db	50
   333  00FE5B  33                 	db	51
   334  00FE5C  41                 	db	65
   335  00FE5D  34                 	db	52
   336  00FE5E  35                 	db	53
   337  00FE5F  36                 	db	54
   338  00FE60  42                 	db	66
   339  00FE61  37                 	db	55
   340  00FE62  38                 	db	56
   341  00FE63  39                 	db	57
   342  00FE64  43                 	db	67
   343  00FE65  2A                 	db	42
   344  00FE66  30                 	db	48
   345  00FE67  23                 	db	35
   346  00FE68  44                 	db	68
   347  00FE69  00                 	db	0
   348  00FE6A                     __end_of_keys:
   349                           	opt stack 0
   350  00FE6A                     _happynewyear:
   351                           	opt stack 0
   352  00FE6A  00                 	db	0
   353  00FE6B  59                 	db	89
   354  00FE6C  03                 	db	3
   355  00FE6D  01                 	db	1
   356  00FE6E  13                 	db	19
   357  00FE6F  04                 	db	4
   358  00FE70  17                 	db	23
   359  00FE71                     __end_of_happynewyear:
   360                           	opt stack 0
   361  0000                     _ADCON0	set	4034
   362  0000                     _ADCON1	set	4033
   363  0000                     _ADCON2	set	4032
   364  0000                     _ADRESH	set	4036
   365  0000                     _ADRESL	set	4035
   366  0000                     _EEADR	set	4009
   367  0000                     _EEADRH	set	4010
   368  0000                     _EECON1	set	4006
   369  0000                     _EECON2	set	4007
   370  0000                     _EEDATA	set	4008
   371  0000                     _INTCONbits	set	4082
   372  0000                     _LATA	set	3977
   373  0000                     _LATB	set	3978
   374  0000                     _LATC	set	3979
   375  0000                     _LATD	set	3980
   376  0000                     _LATDbits	set	3980
   377  0000                     _LATE	set	3981
   378  0000                     _PORTA	set	3968
   379  0000                     _PORTB	set	3969
   380  0000                     _PORTBbits	set	3969
   381  0000                     _PORTC	set	3970
   382  0000                     _PORTD	set	3971
   383  0000                     _SSPADD	set	4040
   384  0000                     _SSPBUF	set	4041
   385  0000                     _SSPCON1	set	4038
   386  0000                     _SSPCON2	set	4037
   387  0000                     _SSPSTAT	set	4039
   388  0000                     _T0CON	set	4053
   389  0000                     _T1CON	set	4045
   390  0000                     _T3CON	set	4017
   391  0000                     _TMR0H	set	4055
   392  0000                     _TMR0L	set	4054
   393  0000                     _TMR1H	set	4047
   394  0000                     _TMR1L	set	4046
   395  0000                     _TMR3H	set	4019
   396  0000                     _TMR3L	set	4018
   397  0000                     _TRISA	set	3986
   398  0000                     _TRISB	set	3987
   399  0000                     _TRISC	set	3988
   400  0000                     _TRISD	set	3989
   401  0000                     _TRISE	set	3990
   402  0000                     _ACKDT	set	32301
   403  0000                     _ACKEN	set	32300
   404  0000                     _EEIF	set	32012
   405  0000                     _INT0IE	set	32660
   406  0000                     _INT0IF	set	32657
   407  0000                     _INT1IE	set	32643
   408  0000                     _INT1IF	set	32640
   409  0000                     _PEIE	set	32662
   410  0000                     _PEN	set	32298
   411  0000                     _RCEN	set	32299
   412  0000                     _RSEN	set	32297
   413  0000                     _SEN	set	32296
   414  0000                     _TMR0IE	set	32661
   415  0000                     _TMR0IF	set	32658
   416  0000                     _TMR1IE	set	31976
   417  0000                     _TMR3IE	set	32001
   418  0000                     _TRISC3	set	31907
   419  0000                     _TRISC4	set	31908
   420  00FE71                     STR_8:
   421  00FE71  63                 	db	99	;'c'
   422  00FE72  6F                 	db	111	;'o'
   423  00FE73  6E                 	db	110	;'n'
   424  00FE74  76                 	db	118	;'v'
   425  00FE75  65                 	db	101	;'e'
   426  00FE76  79                 	db	121	;'y'
   427  00FE77  6F                 	db	111	;'o'
   428  00FE78  72                 	db	114	;'r'
   429  00FE79  20                 	db	32
   430  00FE7A  26                 	db	38
   431  00FE7B  20                 	db	32
   432  00FE7C  0A                 	db	10
   433  00FE7D  63                 	db	99	;'c'
   434  00FE7E  79                 	db	121	;'y'
   435  00FE7F  6C                 	db	108	;'l'
   436  00FE80  69                 	db	105	;'i'
   437  00FE81  6E                 	db	110	;'n'
   438  00FE82  64                 	db	100	;'d'
   439  00FE83  65                 	db	101	;'e'
   440  00FE84  72                 	db	114	;'r'
   441  00FE85  20                 	db	32
   442  00FE86  6F                 	db	111	;'o'
   443  00FE87  6E                 	db	110	;'n'
   444  00FE88  3F                 	db	63	;'?'
   445  00FE89  00                 	db	0
   446  00FE8A                     STR_4:
   447  00FE8A  73                 	db	115	;'s'
   448  00FE8B  69                 	db	105	;'i'
   449  00FE8C  67                 	db	103	;'g'
   450  00FE8D  6E                 	db	110	;'n'
   451  00FE8E  61                 	db	97	;'a'
   452  00FE8F  6C                 	db	108	;'l'
   453  00FE90  3A                 	db	58	;':'
   454  00FE91  20                 	db	32
   455  00FE92  25                 	db	37
   456  00FE93  64                 	db	100	;'d'
   457  00FE94  20                 	db	32
   458  00FE95  0A                 	db	10
   459  00FE96  56                 	db	86	;'V'
   460  00FE97  6F                 	db	111	;'o'
   461  00FE98  6C                 	db	108	;'l'
   462  00FE99  74                 	db	116	;'t'
   463  00FE9A  61                 	db	97	;'a'
   464  00FE9B  67                 	db	103	;'g'
   465  00FE9C  65                 	db	101	;'e'
   466  00FE9D  3A                 	db	58	;':'
   467  00FE9E  20                 	db	32
   468  00FE9F  25                 	db	37
   469  00FEA0  66                 	db	102	;'f'
   470  00FEA1  00                 	db	0
   471  00FEA2                     STR_5:
   472  00FEA2  73                 	db	115	;'s'
   473  00FEA3  65                 	db	101	;'e'
   474  00FEA4  74                 	db	116	;'t'
   475  00FEA5  20                 	db	32
   476  00FEA6  72                 	db	114	;'r'
   477  00FEA7  65                 	db	101	;'e'
   478  00FEA8  64                 	db	100	;'d'
   479  00FEA9  69                 	db	105	;'i'
   480  00FEAA  72                 	db	114	;'r'
   481  00FEAB  65                 	db	101	;'e'
   482  00FEAC  63                 	db	99	;'c'
   483  00FEAD  74                 	db	116	;'t'
   484  00FEAE  20                 	db	32
   485  00FEAF  61                 	db	97	;'a'
   486  00FEB0  6E                 	db	110	;'n'
   487  00FEB1  67                 	db	103	;'g'
   488  00FEB2  6C                 	db	108	;'l'
   489  00FEB3  65                 	db	101	;'e'
   490  00FEB4  3F                 	db	63	;'?'
   491  00FEB5  00                 	db	0
   492  00FEB6                     STR_2:
   493  00FEB6  69                 	db	105	;'i'
   494  00FEB7  6E                 	db	110	;'n'
   495  00FEB8  74                 	db	116	;'t'
   496  00FEB9  65                 	db	101	;'e'
   497  00FEBA  72                 	db	114	;'r'
   498  00FEBB  72                 	db	114	;'r'
   499  00FEBC  75                 	db	117	;'u'
   500  00FEBD  70                 	db	112	;'p'
   501  00FEBE  74                 	db	116	;'t'
   502  00FEBF  21                 	db	33
   503  00FEC0  21                 	db	33
   504  00FEC1  21                 	db	33
   505  00FEC2  0A                 	db	10
   506  00FEC3  63                 	db	99	;'c'
   507  00FEC4  6C                 	db	108	;'l'
   508  00FEC5  6F                 	db	111	;'o'
   509  00FEC6  73                 	db	115	;'s'
   510  00FEC7  65                 	db	101	;'e'
   511  00FEC8  3F                 	db	63	;'?'
   512  00FEC9  00                 	db	0
   513  00FECA  25                 	db	37
   514  00FECB  63                 	db	99	;'c'
   515  00FECC  29                 	db	41
   516  00FECD  20                 	db	32
   517  00FECE  74                 	db	116	;'t'
   518  00FECF  69                 	db	105	;'i'
   519  00FED0  6D                 	db	109	;'m'
   520  00FED1  65                 	db	101	;'e'
   521  00FED2  20                 	db	32
   522  00FED3  20                 	db	32
   523  00FED4  3C                 	db	60	;'<'
   524  00FED5  41                 	db	65	;'A'
   525  00FED6  20                 	db	32
   526  00FED7  20                 	db	32
   527  00FED8  20                 	db	32
   528  00FED9  20                 	db	32
   529  00FEDA  20                 	db	32
   530  00FEDB  0A                 	db	10
   531  00FEDC  00                 	db	0
   532  00FEDD  73                 	db	115	;'s'
   533  00FEDE  74                 	db	116	;'t'
   534  00FEDF  61                 	db	97	;'a'
   535  00FEE0  72                 	db	114	;'r'
   536  00FEE1  74                 	db	116	;'t'
   537  00FEE2  20                 	db	32
   538  00FEE3  20                 	db	32
   539  00FEE4  20                 	db	32
   540  00FEE5  3C                 	db	60	;'<'
   541  00FEE6  42                 	db	66	;'B'
   542  00FEE7  20                 	db	32
   543  00FEE8  20                 	db	32
   544  00FEE9  20                 	db	32
   545  00FEEA  20                 	db	32
   546  00FEEB  20                 	db	32
   547  00FEEC  20                 	db	32
   548  00FEED  0A                 	db	10
   549  00FEEE  00                 	db	0
   550  00FEEF  20                 	db	32
   551  00FEF0  20                 	db	32
   552  00FEF1  68                 	db	104	;'h'
   553  00FEF2  68                 	db	104	;'h'
   554  00FEF3  3A                 	db	58	;':'
   555  00FEF4  6D                 	db	109	;'m'
   556  00FEF5  6D                 	db	109	;'m'
   557  00FEF6  3A                 	db	58	;':'
   558  00FEF7  73                 	db	115	;'s'
   559  00FEF8  73                 	db	115	;'s'
   560  00FEF9  20                 	db	32
   561  00FEFA  20                 	db	32
   562  00FEFB  20                 	db	32
   563  00FEFC  20                 	db	32
   564  00FEFD  20                 	db	32
   565  00FEFE  20                 	db	32
   566  00FEFF  0A                 	db	10
   567  00FF00  00                 	db	0
   568  00FF01  73                 	db	115	;'s'
   569  00FF02  65                 	db	101	;'e'
   570  00FF03  6C                 	db	108	;'l'
   571  00FF04  65                 	db	101	;'e'
   572  00FF05  63                 	db	99	;'c'
   573  00FF06  74                 	db	116	;'t'
   574  00FF07  20                 	db	32
   575  00FF08  72                 	db	114	;'r'
   576  00FF09  75                 	db	117	;'u'
   577  00FF0A  6E                 	db	110	;'n'
   578  00FF0B  3A                 	db	58	;':'
   579  00FF0C  20                 	db	32
   580  00FF0D  20                 	db	32
   581  00FF0E  20                 	db	32
   582  00FF0F  20                 	db	32
   583  00FF10  20                 	db	32
   584  00FF11  0A                 	db	10
   585  00FF12  00                 	db	0
   586  00FF13  74                 	db	116	;'t'
   587  00FF14  69                 	db	105	;'i'
   588  00FF15  6D                 	db	109	;'m'
   589  00FF16  65                 	db	101	;'e'
   590  00FF17  3A                 	db	58	;':'
   591  00FF18  20                 	db	32
   592  00FF19  6E                 	db	110	;'n'
   593  00FF1A  6E                 	db	110	;'n'
   594  00FF1B  6E                 	db	110	;'n'
   595  00FF1C  20                 	db	32
   596  00FF1D  73                 	db	115	;'s'
   597  00FF1E  65                 	db	101	;'e'
   598  00FF1F  63                 	db	99	;'c'
   599  00FF20  20                 	db	32
   600  00FF21  20                 	db	32
   601  00FF22  20                 	db	32
   602  00FF23  0A                 	db	10
   603  00FF24  00                 	db	0
   604  00FF25  5B                 	db	91	;'['
   605  00FF26  41                 	db	65	;'A'
   606  00FF27  41                 	db	65	;'A'
   607  00FF28  2C                 	db	44
   608  00FF29  39                 	db	57	;'9'
   609  00FF2A  56                 	db	86	;'V'
   610  00FF2B  2C                 	db	44
   611  00FF2C  43                 	db	67	;'C'
   612  00FF2D  2C                 	db	44
   613  00FF2E  6F                 	db	111	;'o'
   614  00FF2F  74                 	db	116	;'t'
   615  00FF30  68                 	db	104	;'h'
   616  00FF31  65                 	db	101	;'e'
   617  00FF32  72                 	db	114	;'r'
   618  00FF33  5D                 	db	93	;']'
   619  00FF34  20                 	db	32
   620  00FF35  0A                 	db	10
   621  00FF36  00                 	db	0
   622  00FF37                     STR_24:
   623  00FF37  30                 	db	48	;'0'
   624  00FF38  31                 	db	49	;'1'
   625  00FF39  32                 	db	50	;'2'
   626  00FF3A  33                 	db	51	;'3'
   627  00FF3B  34                 	db	52	;'4'
   628  00FF3C  35                 	db	53	;'5'
   629  00FF3D  36                 	db	54	;'6'
   630  00FF3E  37                 	db	55	;'7'
   631  00FF3F  38                 	db	56	;'8'
   632  00FF40  39                 	db	57	;'9'
   633  00FF41  61                 	db	97	;'a'
   634  00FF42  62                 	db	98	;'b'
   635  00FF43  63                 	db	99	;'c'
   636  00FF44  64                 	db	100	;'d'
   637  00FF45  65                 	db	101	;'e'
   638  00FF46  66                 	db	102	;'f'
   639  00FF47  00                 	db	0
   640  00FF48  20                 	db	32
   641  00FF49  20                 	db	32
   642  00FF4A  20                 	db	32
   643  00FF4B  20                 	db	32
   644  00FF4C  20                 	db	32
   645  00FF4D  20                 	db	32
   646  00FF4E  20                 	db	32
   647  00FF4F  20                 	db	32
   648  00FF50  20                 	db	32
   649  00FF51  20                 	db	32
   650  00FF52  20                 	db	32
   651  00FF53  20                 	db	32
   652  00FF54  20                 	db	32
   653  00FF55  20                 	db	32
   654  00FF56  2A                 	db	42
   655  00FF57  3E                 	db	62	;'>'
   656  00FF58  00                 	db	0
   657  00FF59  5B                 	db	91	;'['
   658  00FF5A  31                 	db	49	;'1'
   659  00FF5B  2C                 	db	44
   660  00FF5C  32                 	db	50	;'2'
   661  00FF5D  2C                 	db	44
   662  00FF5E  33                 	db	51	;'3'
   663  00FF5F  2C                 	db	44
   664  00FF60  34                 	db	52	;'4'
   665  00FF61  5D                 	db	93	;']'
   666  00FF62  20                 	db	32
   667  00FF63  20                 	db	32
   668  00FF64  20                 	db	32
   669  00FF65  20                 	db	32
   670  00FF66  20                 	db	32
   671  00FF67  2A                 	db	42
   672  00FF68  3E                 	db	62	;'>'
   673  00FF69  00                 	db	0
   674  00FF6A  68                 	db	104	;'h'
   675  00FF6B  69                 	db	105	;'i'
   676  00FF6C  73                 	db	115	;'s'
   677  00FF6D  74                 	db	116	;'t'
   678  00FF6E  6F                 	db	111	;'o'
   679  00FF6F  72                 	db	114	;'r'
   680  00FF70  79                 	db	121	;'y'
   681  00FF71  20                 	db	32
   682  00FF72  3C                 	db	60	;'<'
   683  00FF73  43                 	db	67	;'C'
   684  00FF74  20                 	db	32
   685  00FF75  20                 	db	32
   686  00FF76  20                 	db	32
   687  00FF77  20                 	db	32
   688  00FF78  2A                 	db	42
   689  00FF79  3E                 	db	62	;'>'
   690  00FF7A  00                 	db	0
   691  00FF7B  20                 	db	32
   692  00FF7C  20                 	db	32
   693  00FF7D  20                 	db	32
   694  00FF7E  73                 	db	115	;'s'
   695  00FF7F  74                 	db	116	;'t'
   696  00FF80  61                 	db	97	;'a'
   697  00FF81  74                 	db	116	;'t'
   698  00FF82  73                 	db	115	;'s'
   699  00FF83  20                 	db	32
   700  00FF84  3C                 	db	60	;'<'
   701  00FF85  42                 	db	66	;'B'
   702  00FF86  20                 	db	32
   703  00FF87  20                 	db	32
   704  00FF88  20                 	db	32
   705  00FF89  2A                 	db	42
   706  00FF8A  3E                 	db	62	;'>'
   707  00FF8B  00                 	db	0
   708  00FF8C  5B                 	db	91	;'['
   709  00FF8D  6E                 	db	110	;'n'
   710  00FF8E  6E                 	db	110	;'n'
   711  00FF8F  2C                 	db	44
   712  00FF90  6E                 	db	110	;'n'
   713  00FF91  2C                 	db	44
   714  00FF92  6E                 	db	110	;'n'
   715  00FF93  2C                 	db	44
   716  00FF94  6E                 	db	110	;'n'
   717  00FF95  6E                 	db	110	;'n'
   718  00FF96  5D                 	db	93	;']'
   719  00FF97  20                 	db	32
   720  00FF98  20                 	db	32
   721  00FF99  20                 	db	32
   722  00FF9A  2A                 	db	42
   723  00FF9B  3E                 	db	62	;'>'
   724  00FF9C  00                 	db	0
   725  00FF9D  20                 	db	32
   726  00FF9E  20                 	db	32
   727  00FF9F  6D                 	db	109	;'m'
   728  00FFA0  6D                 	db	109	;'m'
   729  00FFA1  3A                 	db	58	;':'
   730  00FFA2  64                 	db	100	;'d'
   731  00FFA3  64                 	db	100	;'d'
   732  00FFA4  3A                 	db	58	;':'
   733  00FFA5  79                 	db	121	;'y'
   734  00FFA6  79                 	db	121	;'y'
   735  00FFA7  20                 	db	32
   736  00FFA8  20                 	db	32
   737  00FFA9  20                 	db	32
   738  00FFAA  20                 	db	32
   739  00FFAB  41                 	db	65	;'A'
   740  00FFAC  3E                 	db	62	;'>'
   741  00FFAD  00                 	db	0
   742  00FFAE                     STR_6:
   743  00FFAE  72                 	db	114	;'r'
   744  00FFAF  65                 	db	101	;'e'
   745  00FFB0  6C                 	db	108	;'l'
   746  00FFB1  65                 	db	101	;'e'
   747  00FFB2  61                 	db	97	;'a'
   748  00FFB3  73                 	db	115	;'s'
   749  00FFB4  65                 	db	101	;'e'
   750  00FFB5  20                 	db	32
   751  00FFB6  62                 	db	98	;'b'
   752  00FFB7  61                 	db	97	;'a'
   753  00FFB8  74                 	db	116	;'t'
   754  00FFB9  74                 	db	116	;'t'
   755  00FFBA  65                 	db	101	;'e'
   756  00FFBB  72                 	db	114	;'r'
   757  00FFBC  79                 	db	121	;'y'
   758  00FFBD  3F                 	db	63	;'?'
   759  00FFBE  00                 	db	0
   760  00FFBF                     STR_7:
   761  00FFBF  72                 	db	114	;'r'
   762  00FFC0  65                 	db	101	;'e'
   763  00FFC1  73                 	db	115	;'s'
   764  00FFC2  65                 	db	101	;'e'
   765  00FFC3  74                 	db	116	;'t'
   766  00FFC4  20                 	db	32
   767  00FFC5  74                 	db	116	;'t'
   768  00FFC6  68                 	db	104	;'h'
   769  00FFC7  65                 	db	101	;'e'
   770  00FFC8  20                 	db	32
   771  00FFC9  70                 	db	112	;'p'
   772  00FFCA  61                 	db	97	;'a'
   773  00FFCB  64                 	db	100	;'d'
   774  00FFCC  3F                 	db	63	;'?'
   775  00FFCD  00                 	db	0
   776  00FFCE                     STR_3:
   777  00FFCE  72                 	db	114	;'r'
   778  00FFCF  65                 	db	101	;'e'
   779  00FFD0  61                 	db	97	;'a'
   780  00FFD1  64                 	db	100	;'d'
   781  00FFD2  20                 	db	32
   782  00FFD3  76                 	db	118	;'v'
   783  00FFD4  6F                 	db	111	;'o'
   784  00FFD5  6C                 	db	108	;'l'
   785  00FFD6  74                 	db	116	;'t'
   786  00FFD7  61                 	db	97	;'a'
   787  00FFD8  67                 	db	103	;'g'
   788  00FFD9  65                 	db	101	;'e'
   789  00FFDA  3F                 	db	63	;'?'
   790  00FFDB  00                 	db	0
   791  00FFDC                     STR_9:
   792  00FFDC  61                 	db	97	;'a'
   793  00FFDD  6E                 	db	110	;'n'
   794  00FFDE  67                 	db	103	;'g'
   795  00FFDF  6C                 	db	108	;'l'
   796  00FFE0  65                 	db	101	;'e'
   797  00FFE1  3A                 	db	58	;':'
   798  00FFE2  20                 	db	32
   799  00FFE3  25                 	db	37
   800  00FFE4  64                 	db	100	;'d'
   801  00FFE5  00                 	db	0
   802  00FFE6  5B                 	db	91	;'['
   803  00FFE7  25                 	db	37
   804  00FFE8  78                 	db	120	;'x'
   805  00FFE9  20                 	db	32
   806  00FFEA  25                 	db	37
   807  00FFEB  78                 	db	120	;'x'
   808  00FFEC  5D                 	db	93	;']'
   809  00FFED  0A                 	db	10
   810  00FFEE  00                 	db	0
   811  00FFEF  74                 	db	116	;'t'
   812  00FFF0  31                 	db	49	;'1'
   813  00FFF1  3A                 	db	58	;':'
   814  00FFF2  20                 	db	32
   815  00FFF3  25                 	db	37
   816  00FFF4  78                 	db	120	;'x'
   817  00FFF5  20                 	db	32
   818  00FFF6  00                 	db	0
   819  00FFF7                     STR_1:
   820  00FFF7  72                 	db	114	;'r'
   821  00FFF8  75                 	db	117	;'u'
   822  00FFF9  6E                 	db	110	;'n'
   823  00FFFA  6E                 	db	110	;'n'
   824  00FFFB  69                 	db	105	;'i'
   825  00FFFC  6E                 	db	110	;'n'
   826  00FFFD  67                 	db	103	;'g'
   827  00FFFE  00                 	db	0
   828                           
   829                           ; #config settings
   830  00FFFF  00                 	db	0	; dummy byte at the end
   831  0000                     
   832                           	psect	cinit
   833  0045DE                     __pcinit:
   834                           	opt stack 0
   835  0045DE                     start_initialization:
   836                           	opt stack 0
   837  0045DE                     __initialization:
   838                           	opt stack 0
   839                           
   840                           ; Initialize objects allocated to BANK1 (46 bytes)
   841                           ; load TBLPTR registers with __pidataBANK1
   842  0045DE  0E06               	movlw	low __pidataBANK1
   843  0045E0  6EF6               	movwf	tblptrl,c
   844  0045E2  0E4B               	movlw	high __pidataBANK1
   845  0045E4  6EF7               	movwf	tblptrh,c
   846  0045E6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   847  0045E8  6EF8               	movwf	tblptru,c
   848  0045EA  EE01  F032         	lfsr	0,__pdataBANK1
   849  0045EE  EE10 F02E          	lfsr	1,46
   850  0045F2                     copy_data0:
   851  0045F2  0009               	tblrd		*+
   852  0045F4  CFF5 FFEE          	movff	tablat,postinc0
   853  0045F8  50E5               	movf	postdec1,w,c
   854  0045FA  50E1               	movf	fsr1l,w,c
   855  0045FC  E1FA               	bnz	copy_data0
   856                           
   857                           ; Initialize objects allocated to COMRAM (4 bytes)
   858                           ; load TBLPTR registers with __pidataCOMRAM
   859  0045FE  0E74               	movlw	low __pidataCOMRAM
   860  004600  6EF6               	movwf	tblptrl,c
   861  004602  0E4C               	movlw	high __pidataCOMRAM
   862  004604  6EF7               	movwf	tblptrh,c
   863  004606  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   864  004608  6EF8               	movwf	tblptru,c
   865  00460A  EE00  F07A         	lfsr	0,__pdataCOMRAM
   866  00460E  EE10 F004          	lfsr	1,4
   867  004612                     copy_data1:
   868  004612  0009               	tblrd		*+
   869  004614  CFF5 FFEE          	movff	tablat,postinc0
   870  004618  50E5               	movf	postdec1,w,c
   871  00461A  50E1               	movf	fsr1l,w,c
   872  00461C  E1FA               	bnz	copy_data1
   873                           
   874                           ; Clear objects allocated to BANK1 (25 bytes)
   875  00461E  EE01  F060         	lfsr	0,__pbssBANK1
   876  004622  0E19               	movlw	25
   877  004624                     clear_0:
   878  004624  6AEE               	clrf	postinc0,c
   879  004626  06E8               	decf	wreg,f,c
   880  004628  E1FD               	bnz	clear_0
   881                           
   882                           ; Clear objects allocated to BANK0 (8 bytes)
   883  00462A  EE00  F0EA         	lfsr	0,__pbssBANK0
   884  00462E  0E08               	movlw	8
   885  004630                     clear_1:
   886  004630  6AEE               	clrf	postinc0,c
   887  004632  06E8               	decf	wreg,f,c
   888  004634  E1FD               	bnz	clear_1
   889                           
   890                           ; Clear objects allocated to COMRAM (7 bytes)
   891  004636  EE00  F073         	lfsr	0,__pbssCOMRAM
   892  00463A  0E07               	movlw	7
   893  00463C                     clear_2:
   894  00463C  6AEE               	clrf	postinc0,c
   895  00463E  06E8               	decf	wreg,f,c
   896  004640  E1FD               	bnz	clear_2
   897  004642                     end_of_initialization:
   898                           	opt stack 0
   899  004642                     __end_of__initialization:
   900                           	opt stack 0
   901  004642  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   902  004644  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   903  004646  0E00               	movlw	low (__Lmediumconst shr (0+16))
   904  004648  6EF8               	movwf	tblptru,c
   905  00464A  0100               	movlb	0
   906  00464C  EF8D  F020         	goto	_main	;jump to C main() function
   907                           tblptru	equ	0xFF8
   908                           tblptrh	equ	0xFF7
   909                           tblptrl	equ	0xFF6
   910                           tablat	equ	0xFF5
   911                           postinc0	equ	0xFEE
   912                           wreg	equ	0xFE8
   913                           postdec1	equ	0xFE5
   914                           fsr1l	equ	0xFE1
   915                           
   916                           	psect	bssCOMRAM
   917  000073                     __pbssCOMRAM:
   918                           	opt stack 0
   919  000073                     _count:
   920                           	opt stack 0
   921  000073                     	ds	2
   922  000075                     _curr:
   923                           	opt stack 0
   924  000075                     	ds	2
   925  000077                     _prevTime:
   926                           	opt stack 0
   927  000077                     	ds	2
   928  000079                     _lastKey:
   929                           	opt stack 0
   930  000079                     	ds	1
   931                           tblptru	equ	0xFF8
   932                           tblptrh	equ	0xFF7
   933                           tblptrl	equ	0xFF6
   934                           tablat	equ	0xFF5
   935                           postinc0	equ	0xFEE
   936                           wreg	equ	0xFE8
   937                           postdec1	equ	0xFE5
   938                           fsr1l	equ	0xFE1
   939                           
   940                           	psect	dataCOMRAM
   941  00007A                     __pdataCOMRAM:
   942                           	opt stack 0
   943  00007A                     _angle:
   944                           	opt stack 0
   945  00007A                     	ds	2
   946  00007C                     _redirectAngle_C:
   947                           	opt stack 0
   948  00007C                     	ds	2
   949                           tblptru	equ	0xFF8
   950                           tblptrh	equ	0xFF7
   951                           tblptrl	equ	0xFF6
   952                           tablat	equ	0xFF5
   953                           postinc0	equ	0xFEE
   954                           wreg	equ	0xFE8
   955                           postdec1	equ	0xFE5
   956                           fsr1l	equ	0xFE1
   957                           
   958                           	psect	bssBANK0
   959  0000EA                     __pbssBANK0:
   960                           	opt stack 0
   961  0000EA                     _pulse:
   962                           	opt stack 0
   963  0000EA                     	ds	8
   964                           tblptru	equ	0xFF8
   965                           tblptrh	equ	0xFF7
   966                           tblptrl	equ	0xFF6
   967                           tablat	equ	0xFF5
   968                           postinc0	equ	0xFEE
   969                           wreg	equ	0xFE8
   970                           postdec1	equ	0xFE5
   971                           fsr1l	equ	0xFE1
   972                           
   973                           	psect	bssBANK1
   974  000160                     __pbssBANK1:
   975                           	opt stack 0
   976  000160                     _servos:
   977                           	opt stack 0
   978  000160                     	ds	8
   979  000168                     _padPin3:
   980                           	opt stack 0
   981  000168                     	ds	4
   982  00016C                     _V_LIM_9V:
   983                           	opt stack 0
   984  00016C                     	ds	3
   985  00016F                     _V_LIM_AA:
   986                           	opt stack 0
   987  00016F                     	ds	3
   988  000172                     _V_LIM_C:
   989                           	opt stack 0
   990  000172                     	ds	3
   991  000175                     _batteryDetected:
   992                           	opt stack 0
   993  000175                     	ds	2
   994  000177                     _n:
   995                           	opt stack 0
   996  000177                     	ds	2
   997                           tblptru	equ	0xFF8
   998                           tblptrh	equ	0xFF7
   999                           tblptrl	equ	0xFF6
  1000                           tablat	equ	0xFF5
  1001                           postinc0	equ	0xFEE
  1002                           wreg	equ	0xFE8
  1003                           postdec1	equ	0xFE5
  1004                           fsr1l	equ	0xFE1
  1005                           
  1006                           	psect	dataBANK1
  1007  000132                     __pdataBANK1:
  1008                           	opt stack 0
  1009  000132                     _padAngle_CLOSE:
  1010                           	opt stack 0
  1011  000132                     	ds	2
  1012  000134                     _padAngle_NEUTRAL:
  1013                           	opt stack 0
  1014  000134                     	ds	2
  1015  000136                     _padAngle_OPEN:
  1016                           	opt stack 0
  1017  000136                     	ds	2
  1018  000138                     _redirectAngle_9V:
  1019                           	opt stack 0
  1020  000138                     	ds	2
  1021  00013A                     _redirectAngle_AA:
  1022                           	opt stack 0
  1023  00013A                     	ds	2
  1024  00013C                     _redirectAngle_OTHER:
  1025                           	opt stack 0
  1026  00013C                     	ds	2
  1027  00013E                     _conveyorServo:
  1028                           	opt stack 0
  1029  00013E                     	ds	6
  1030  000144                     _padServo:
  1031                           	opt stack 0
  1032  000144                     	ds	6
  1033  00014A                     _redirectingServo:
  1034                           	opt stack 0
  1035  00014A                     	ds	6
  1036  000150                     _AA_float:
  1037                           	opt stack 0
  1038  000150                     	ds	4
  1039  000154                     _cylinderMotor:
  1040                           	opt stack 0
  1041  000154                     	ds	4
  1042  000158                     _padPin1:
  1043                           	opt stack 0
  1044  000158                     	ds	4
  1045  00015C                     _padPin2:
  1046                           	opt stack 0
  1047  00015C                     	ds	4
  1048                           tblptru	equ	0xFF8
  1049                           tblptrh	equ	0xFF7
  1050                           tblptrl	equ	0xFF6
  1051                           tablat	equ	0xFF5
  1052                           postinc0	equ	0xFEE
  1053                           wreg	equ	0xFE8
  1054                           postdec1	equ	0xFE5
  1055                           fsr1l	equ	0xFE1
  1056                           
  1057                           	psect	cstackBANK1
  1058  000100                     __pcstackBANK1:
  1059                           	opt stack 0
  1060  000100                     ??_printf:
  1061  000100                     ??_angleToPulse:
  1062                           
  1063                           ; 1 bytes @ 0x0
  1064  000100                     	ds	4
  1065  000104                     angleToPulse@offset:
  1066                           	opt stack 0
  1067                           
  1068                           ; 4 bytes @ 0x4
  1069  000104                     	ds	2
  1070  000106                     _printf$1323:
  1071                           	opt stack 0
  1072                           
  1073                           ; 3 bytes @ 0x6
  1074  000106                     	ds	2
  1075  000108                     angleToPulse@a180:
  1076                           	opt stack 0
  1077                           
  1078                           ; 4 bytes @ 0x8
  1079  000108                     	ds	1
  1080  000109                     printf@idx:
  1081                           	opt stack 0
  1082                           
  1083                           ; 1 bytes @ 0x9
  1084  000109                     	ds	1
  1085  00010A                     printf@ap:
  1086                           	opt stack 0
  1087                           
  1088                           ; 2 bytes @ 0xA
  1089  00010A                     	ds	2
  1090  00010C                     printf@flag:
  1091                           	opt stack 0
  1092  00010C                     _angleToPulse$1319:
  1093                           	opt stack 0
  1094                           
  1095                           ; 3 bytes @ 0xC
  1096  00010C                     	ds	2
  1097  00010E                     printf@prec:
  1098                           	opt stack 0
  1099                           
  1100                           ; 2 bytes @ 0xE
  1101  00010E                     	ds	1
  1102  00010F                     angleToPulse@a000:
  1103                           	opt stack 0
  1104                           
  1105                           ; 4 bytes @ 0xF
  1106  00010F                     	ds	1
  1107  000110                     printf@exp:
  1108                           	opt stack 0
  1109                           
  1110                           ; 2 bytes @ 0x10
  1111  000110                     	ds	2
  1112  000112                     printf@tmpval:
  1113                           	opt stack 0
  1114                           
  1115                           ; 4 bytes @ 0x12
  1116  000112                     	ds	1
  1117  000113                     setAngle@motor:
  1118                           	opt stack 0
  1119                           
  1120                           ; 2 bytes @ 0x13
  1121  000113                     	ds	2
  1122  000115                     setAngle@angle:
  1123                           	opt stack 0
  1124                           
  1125                           ; 2 bytes @ 0x15
  1126  000115                     	ds	1
  1127  000116                     printf@val:
  1128                           	opt stack 0
  1129                           
  1130                           ; 4 bytes @ 0x16
  1131  000116                     	ds	1
  1132  000117                     setAngle@period:
  1133                           	opt stack 0
  1134                           
  1135                           ; 2 bytes @ 0x17
  1136  000117                     	ds	2
  1137  000119                     setAngle@i:
  1138                           	opt stack 0
  1139                           
  1140                           ; 2 bytes @ 0x19
  1141  000119                     	ds	1
  1142  00011A                     printf@fval:
  1143                           	opt stack 0
  1144                           
  1145                           ; 3 bytes @ 0x1A
  1146  00011A                     	ds	1
  1147  00011B                     initServo@motor:
  1148                           	opt stack 0
  1149                           
  1150                           ; 2 bytes @ 0x1B
  1151  00011B                     	ds	2
  1152  00011D                     printf@c:
  1153                           	opt stack 0
  1154  00011D                     initServo@angle:
  1155                           	opt stack 0
  1156                           
  1157                           ; 2 bytes @ 0x1D
  1158  00011D                     	ds	1
  1159  00011E                     pause@message:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x1E
  1163  00011E                     	ds	1
  1164  00011F                     ??_initServo:
  1165                           
  1166                           ; 1 bytes @ 0x1F
  1167  00011F                     	ds	1
  1168  000120                     ??_sortBattery:
  1169                           
  1170                           ; 1 bytes @ 0x20
  1171  000120                     	ds	2
  1172  000122                     sortBattery@V_float:
  1173                           	opt stack 0
  1174                           
  1175                           ; 3 bytes @ 0x22
  1176  000122                     	ds	3
  1177  000125                     sortBattery@Vcc:
  1178                           	opt stack 0
  1179                           
  1180                           ; 3 bytes @ 0x25
  1181  000125                     	ds	3
  1182  000128                     sortBattery@resolution:
  1183                           	opt stack 0
  1184                           
  1185                           ; 3 bytes @ 0x28
  1186  000128                     	ds	3
  1187  00012B                     sortBattery@signal:
  1188                           	opt stack 0
  1189                           
  1190                           ; 2 bytes @ 0x2B
  1191  00012B                     	ds	2
  1192  00012D                     sortBattery@targetAngle:
  1193                           	opt stack 0
  1194                           
  1195                           ; 2 bytes @ 0x2D
  1196  00012D                     	ds	2
  1197  00012F                     sortBattery@V:
  1198                           	opt stack 0
  1199                           
  1200                           ; 3 bytes @ 0x2F
  1201  00012F                     	ds	3
  1202                           tblptru	equ	0xFF8
  1203                           tblptrh	equ	0xFF7
  1204                           tblptrl	equ	0xFF6
  1205                           tablat	equ	0xFF5
  1206                           postinc0	equ	0xFEE
  1207                           wreg	equ	0xFE8
  1208                           postdec1	equ	0xFE5
  1209                           fsr1l	equ	0xFE1
  1210                           
  1211                           	psect	cstackBANK0
  1212  000080                     __pcstackBANK0:
  1213                           	opt stack 0
  1214  000080                     ??_service:
  1215                           
  1216                           ; 1 bytes @ 0x0
  1217  000080                     	ds	14
  1218  00008E                     ?_digitalRead:
  1219                           	opt stack 0
  1220  00008E                     ?___awmod:
  1221                           	opt stack 0
  1222  00008E                     ?___ftpack:
  1223                           	opt stack 0
  1224  00008E                     ?___ftneg:
  1225                           	opt stack 0
  1226  00008E                     ?_analogRead:
  1227                           	opt stack 0
  1228  00008E                     ?__tdiv_to_l_:
  1229                           	opt stack 0
  1230  00008E                     ?__div_to_l_:
  1231                           	opt stack 0
  1232  00008E                     ?___lldiv:
  1233                           	opt stack 0
  1234  00008E                     lcdNibble@temp:
  1235                           	opt stack 0
  1236  00008E                     readKeypad@key:
  1237                           	opt stack 0
  1238  00008E                     digitalRead@pin:
  1239                           	opt stack 0
  1240  00008E                     digitalWrite@pin:
  1241                           	opt stack 0
  1242  00008E                     analogRead@channel:
  1243                           	opt stack 0
  1244  00008E                     initTimer@timer:
  1245                           	opt stack 0
  1246  00008E                     startTimer@timer:
  1247                           	opt stack 0
  1248  00008E                     ___awmod@dividend:
  1249                           	opt stack 0
  1250  00008E                     __div_to_l_@f1:
  1251                           	opt stack 0
  1252  00008E                     ___ftpack@arg:
  1253                           	opt stack 0
  1254  00008E                     __tdiv_to_l_@f1:
  1255                           	opt stack 0
  1256  00008E                     ___ftge@ff1:
  1257                           	opt stack 0
  1258  00008E                     ___ftneg@f1:
  1259                           	opt stack 0
  1260  00008E                     ___lldiv@dividend:
  1261                           	opt stack 0
  1262                           
  1263                           ; 4 bytes @ 0xE
  1264  00008E                     	ds	1
  1265  00008F                     lcdNibble@data:
  1266                           	opt stack 0
  1267                           
  1268                           ; 1 bytes @ 0xF
  1269  00008F                     	ds	1
  1270  000090                     ??_digitalRead:
  1271  000090                     ??_lcdInst:
  1272  000090                     ??_initTimer:
  1273  000090                     digitalWrite@val:
  1274                           	opt stack 0
  1275  000090                     ___awmod@divisor:
  1276                           	opt stack 0
  1277  000090                     startTimer@val:
  1278                           	opt stack 0
  1279                           
  1280                           ; 4 bytes @ 0x10
  1281  000090                     	ds	1
  1282  000091                     lcdInst@data:
  1283                           	opt stack 0
  1284  000091                     ___ftpack@exp:
  1285                           	opt stack 0
  1286  000091                     __div_to_l_@f2:
  1287                           	opt stack 0
  1288  000091                     __tdiv_to_l_@f2:
  1289                           	opt stack 0
  1290  000091                     ___ftge@ff2:
  1291                           	opt stack 0
  1292                           
  1293                           ; 3 bytes @ 0x11
  1294  000091                     	ds	1
  1295  000092                     ??_initLCD:
  1296  000092                     ??_digitalWrite:
  1297  000092                     ??_analogRead:
  1298  000092                     putch@data:
  1299                           	opt stack 0
  1300  000092                     ___awmod@counter:
  1301                           	opt stack 0
  1302  000092                     ___ftpack@sign:
  1303                           	opt stack 0
  1304  000092                     ___lldiv@divisor:
  1305                           	opt stack 0
  1306                           
  1307                           ; 4 bytes @ 0x12
  1308  000092                     	ds	1
  1309  000093                     ??___ftpack:
  1310  000093                     ___awmod@sign:
  1311                           	opt stack 0
  1312                           
  1313                           ; 1 bytes @ 0x13
  1314  000093                     	ds	1
  1315  000094                     ??__tdiv_to_l_:
  1316  000094                     ??_startTimer:
  1317  000094                     ??___ftge:
  1318  000094                     ?___awdiv:
  1319                           	opt stack 0
  1320  000094                     ___awdiv@dividend:
  1321                           	opt stack 0
  1322  000094                     __div_to_l_@quot:
  1323                           	opt stack 0
  1324                           
  1325                           ; 4 bytes @ 0x14
  1326  000094                     	ds	1
  1327  000095                     digitalWrite@p:
  1328                           	opt stack 0
  1329                           
  1330                           ; 2 bytes @ 0x15
  1331  000095                     	ds	1
  1332  000096                     ?___altoft:
  1333                           	opt stack 0
  1334  000096                     ?___awtoft:
  1335                           	opt stack 0
  1336  000096                     ?___lltoft:
  1337                           	opt stack 0
  1338  000096                     ___awdiv@divisor:
  1339                           	opt stack 0
  1340  000096                     ___awtoft@c:
  1341                           	opt stack 0
  1342  000096                     ___altoft@c:
  1343                           	opt stack 0
  1344  000096                     ___lldiv@quotient:
  1345                           	opt stack 0
  1346  000096                     ___lltoft@c:
  1347                           	opt stack 0
  1348                           
  1349                           ; 4 bytes @ 0x16
  1350  000096                     	ds	1
  1351  000097                     __tdiv_to_l_@quot:
  1352                           	opt stack 0
  1353                           
  1354                           ; 4 bytes @ 0x17
  1355  000097                     	ds	1
  1356  000098                     ___awdiv@counter:
  1357                           	opt stack 0
  1358  000098                     __div_to_l_@cntr:
  1359                           	opt stack 0
  1360                           
  1361                           ; 1 bytes @ 0x18
  1362  000098                     	ds	1
  1363  000099                     ___awdiv@sign:
  1364                           	opt stack 0
  1365  000099                     ___awtoft@sign:
  1366                           	opt stack 0
  1367  000099                     __div_to_l_@exp1:
  1368                           	opt stack 0
  1369                           
  1370                           ; 1 bytes @ 0x19
  1371  000099                     	ds	1
  1372  00009A                     ??___altoft:
  1373  00009A                     ??___lltoft:
  1374  00009A                     ___lldiv@counter:
  1375                           	opt stack 0
  1376  00009A                     ___awdiv@quotient:
  1377                           	opt stack 0
  1378                           
  1379                           ; 2 bytes @ 0x1A
  1380  00009A                     	ds	1
  1381  00009B                     ?___llmod:
  1382                           	opt stack 0
  1383  00009B                     __tdiv_to_l_@cntr:
  1384                           	opt stack 0
  1385  00009B                     ___llmod@dividend:
  1386                           	opt stack 0
  1387                           
  1388                           ; 4 bytes @ 0x1B
  1389  00009B                     	ds	1
  1390  00009C                     ?___wmul:
  1391                           	opt stack 0
  1392  00009C                     __tdiv_to_l_@exp1:
  1393                           	opt stack 0
  1394  00009C                     ___wmul@multiplier:
  1395                           	opt stack 0
  1396                           
  1397                           ; 2 bytes @ 0x1C
  1398  00009C                     	ds	2
  1399  00009E                     ___altoft@exp:
  1400                           	opt stack 0
  1401  00009E                     ___lltoft@exp:
  1402                           	opt stack 0
  1403  00009E                     ___wmul@multiplicand:
  1404                           	opt stack 0
  1405                           
  1406                           ; 2 bytes @ 0x1E
  1407  00009E                     	ds	1
  1408  00009F                     ___altoft@sign:
  1409                           	opt stack 0
  1410  00009F                     ___llmod@divisor:
  1411                           	opt stack 0
  1412                           
  1413                           ; 4 bytes @ 0x1F
  1414  00009F                     	ds	1
  1415  0000A0                     ?___ftdiv:
  1416                           	opt stack 0
  1417  0000A0                     ___wmul@product:
  1418                           	opt stack 0
  1419  0000A0                     ___ftdiv@f1:
  1420                           	opt stack 0
  1421                           
  1422                           ; 3 bytes @ 0x20
  1423  0000A0                     	ds	3
  1424  0000A3                     ___llmod@counter:
  1425                           	opt stack 0
  1426  0000A3                     ___ftdiv@f2:
  1427                           	opt stack 0
  1428                           
  1429                           ; 3 bytes @ 0x23
  1430  0000A3                     	ds	3
  1431  0000A6                     ??___ftdiv:
  1432                           
  1433                           ; 1 bytes @ 0x26
  1434  0000A6                     	ds	3
  1435  0000A9                     ___ftdiv@cntr:
  1436                           	opt stack 0
  1437                           
  1438                           ; 1 bytes @ 0x29
  1439  0000A9                     	ds	1
  1440  0000AA                     ___ftdiv@f3:
  1441                           	opt stack 0
  1442                           
  1443                           ; 3 bytes @ 0x2A
  1444  0000AA                     	ds	3
  1445  0000AD                     ___ftdiv@exp:
  1446                           	opt stack 0
  1447                           
  1448                           ; 1 bytes @ 0x2D
  1449  0000AD                     	ds	1
  1450  0000AE                     ___ftdiv@sign:
  1451                           	opt stack 0
  1452                           
  1453                           ; 1 bytes @ 0x2E
  1454  0000AE                     	ds	1
  1455  0000AF                     ?___ftmul:
  1456                           	opt stack 0
  1457  0000AF                     ___ftmul@f1:
  1458                           	opt stack 0
  1459                           
  1460                           ; 3 bytes @ 0x2F
  1461  0000AF                     	ds	3
  1462  0000B2                     ___ftmul@f2:
  1463                           	opt stack 0
  1464                           
  1465                           ; 3 bytes @ 0x32
  1466  0000B2                     	ds	3
  1467  0000B5                     ??___ftmul:
  1468                           
  1469                           ; 1 bytes @ 0x35
  1470  0000B5                     	ds	3
  1471  0000B8                     ___ftmul@exp:
  1472                           	opt stack 0
  1473                           
  1474                           ; 1 bytes @ 0x38
  1475  0000B8                     	ds	1
  1476  0000B9                     ___ftmul@f3_as_product:
  1477                           	opt stack 0
  1478                           
  1479                           ; 3 bytes @ 0x39
  1480  0000B9                     	ds	3
  1481  0000BC                     ___ftmul@cntr:
  1482                           	opt stack 0
  1483                           
  1484                           ; 1 bytes @ 0x3C
  1485  0000BC                     	ds	1
  1486  0000BD                     ___ftmul@sign:
  1487                           	opt stack 0
  1488                           
  1489                           ; 1 bytes @ 0x3D
  1490  0000BD                     	ds	1
  1491  0000BE                     ?_fround:
  1492                           	opt stack 0
  1493  0000BE                     ?_scale:
  1494                           	opt stack 0
  1495                           
  1496                           ; 3 bytes @ 0x3E
  1497  0000BE                     	ds	3
  1498  0000C1                     _fround$1321:
  1499                           	opt stack 0
  1500  0000C1                     _scale$1322:
  1501                           	opt stack 0
  1502                           
  1503                           ; 3 bytes @ 0x41
  1504  0000C1                     	ds	3
  1505  0000C4                     scale@scl:
  1506                           	opt stack 0
  1507  0000C4                     _fround$1320:
  1508                           	opt stack 0
  1509                           
  1510                           ; 3 bytes @ 0x44
  1511  0000C4                     	ds	3
  1512  0000C7                     fround@prec:
  1513                           	opt stack 0
  1514                           
  1515                           ; 1 bytes @ 0x47
  1516  0000C7                     	ds	1
  1517  0000C8                     ?___ftadd:
  1518                           	opt stack 0
  1519  0000C8                     ___ftadd@f1:
  1520                           	opt stack 0
  1521                           
  1522                           ; 3 bytes @ 0x48
  1523  0000C8                     	ds	3
  1524  0000CB                     ___ftadd@f2:
  1525                           	opt stack 0
  1526                           
  1527                           ; 3 bytes @ 0x4B
  1528  0000CB                     	ds	3
  1529  0000CE                     ??___ftadd:
  1530                           
  1531                           ; 1 bytes @ 0x4E
  1532  0000CE                     	ds	3
  1533  0000D1                     ___ftadd@sign:
  1534                           	opt stack 0
  1535                           
  1536                           ; 1 bytes @ 0x51
  1537  0000D1                     	ds	1
  1538  0000D2                     ___ftadd@exp2:
  1539                           	opt stack 0
  1540                           
  1541                           ; 1 bytes @ 0x52
  1542  0000D2                     	ds	1
  1543  0000D3                     ___ftadd@exp1:
  1544                           	opt stack 0
  1545                           
  1546                           ; 1 bytes @ 0x53
  1547  0000D3                     	ds	1
  1548  0000D4                     ?___ftsub:
  1549                           	opt stack 0
  1550  0000D4                     ?___fttol:
  1551                           	opt stack 0
  1552  0000D4                     ___ftsub@f1:
  1553                           	opt stack 0
  1554  0000D4                     ___fttol@f1:
  1555                           	opt stack 0
  1556                           
  1557                           ; 3 bytes @ 0x54
  1558  0000D4                     	ds	3
  1559  0000D7                     ___ftsub@f2:
  1560                           	opt stack 0
  1561                           
  1562                           ; 3 bytes @ 0x57
  1563  0000D7                     	ds	1
  1564  0000D8                     ??___fttol:
  1565                           
  1566                           ; 1 bytes @ 0x58
  1567  0000D8                     	ds	2
  1568  0000DA                     
  1569                           ; 1 bytes @ 0x5A
  1570  0000DA                     	ds	3
  1571  0000DD                     ___fttol@sign1:
  1572                           	opt stack 0
  1573                           
  1574                           ; 1 bytes @ 0x5D
  1575  0000DD                     	ds	1
  1576  0000DE                     ___fttol@lval:
  1577                           	opt stack 0
  1578                           
  1579                           ; 4 bytes @ 0x5E
  1580  0000DE                     	ds	4
  1581  0000E2                     ___fttol@exp1:
  1582                           	opt stack 0
  1583                           
  1584                           ; 1 bytes @ 0x62
  1585  0000E2                     	ds	1
  1586  0000E3                     ?_printf:
  1587                           	opt stack 0
  1588  0000E3                     ?_angleToPulse:
  1589                           	opt stack 0
  1590  0000E3                     angleToPulse@angle:
  1591                           	opt stack 0
  1592  0000E3                     printf@f:
  1593                           	opt stack 0
  1594                           
  1595                           ; 2 bytes @ 0x63
  1596  0000E3                     	ds	4
  1597  0000E7                     ??_setAngle:
  1598                           
  1599                           ; 1 bytes @ 0x67
  1600  0000E7                     	ds	3
  1601  0000EA                     tblptru	equ	0xFF8
  1602                           tblptrh	equ	0xFF7
  1603                           tblptrl	equ	0xFF6
  1604                           tablat	equ	0xFF5
  1605                           postinc0	equ	0xFEE
  1606                           wreg	equ	0xFE8
  1607                           postdec1	equ	0xFE5
  1608                           fsr1l	equ	0xFE1
  1609                           
  1610                           ; 1 bytes @ 0x6A
  1611                           
  1612                           	psect	cstackCOMRAM
  1613  000001                     __pcstackCOMRAM:
  1614                           	opt stack 0
  1615  000001                     ?i2___awmod:
  1616                           	opt stack 0
  1617  000001                     ?i2___ftpack:
  1618                           	opt stack 0
  1619  000001                     ?i2___ftneg:
  1620                           	opt stack 0
  1621  000001                     ?i2__div_to_l_:
  1622                           	opt stack 0
  1623  000001                     ?i2__tdiv_to_l_:
  1624                           	opt stack 0
  1625  000001                     ?i2___lldiv:
  1626                           	opt stack 0
  1627  000001                     i2lcdNibble@temp:
  1628                           	opt stack 0
  1629  000001                     i2___awmod@dividend:
  1630                           	opt stack 0
  1631  000001                     i2__div_to_l_@f1:
  1632                           	opt stack 0
  1633  000001                     i2___ftpack@arg:
  1634                           	opt stack 0
  1635  000001                     i2__tdiv_to_l_@f1:
  1636                           	opt stack 0
  1637  000001                     i2___ftge@ff1:
  1638                           	opt stack 0
  1639  000001                     i2___ftneg@f1:
  1640                           	opt stack 0
  1641  000001                     i2___lldiv@dividend:
  1642                           	opt stack 0
  1643                           
  1644                           ; 4 bytes @ 0x0
  1645  000001                     	ds	1
  1646  000002                     i2lcdNibble@data:
  1647                           	opt stack 0
  1648                           
  1649                           ; 1 bytes @ 0x1
  1650  000002                     	ds	1
  1651  000003                     ??i2_lcdInst:
  1652  000003                     i2___awmod@divisor:
  1653                           	opt stack 0
  1654                           
  1655                           ; 2 bytes @ 0x2
  1656  000003                     	ds	1
  1657  000004                     i2lcdInst@data:
  1658                           	opt stack 0
  1659  000004                     i2___ftpack@exp:
  1660                           	opt stack 0
  1661  000004                     i2__div_to_l_@f2:
  1662                           	opt stack 0
  1663  000004                     i2__tdiv_to_l_@f2:
  1664                           	opt stack 0
  1665  000004                     i2___ftge@ff2:
  1666                           	opt stack 0
  1667                           
  1668                           ; 3 bytes @ 0x3
  1669  000004                     	ds	1
  1670  000005                     i2putch@data:
  1671                           	opt stack 0
  1672  000005                     i2___awmod@counter:
  1673                           	opt stack 0
  1674  000005                     i2___ftpack@sign:
  1675                           	opt stack 0
  1676  000005                     i2___lldiv@divisor:
  1677                           	opt stack 0
  1678                           
  1679                           ; 4 bytes @ 0x4
  1680  000005                     	ds	1
  1681  000006                     ??i2___ftpack:
  1682  000006                     i2___awmod@sign:
  1683                           	opt stack 0
  1684                           
  1685                           ; 1 bytes @ 0x5
  1686  000006                     	ds	1
  1687  000007                     ??i2__tdiv_to_l_:
  1688  000007                     ??i2___ftge:
  1689  000007                     ?i2___awdiv:
  1690                           	opt stack 0
  1691  000007                     i2digitalWrite@pin:
  1692                           	opt stack 0
  1693  000007                     i2startTimer@timer:
  1694                           	opt stack 0
  1695  000007                     i2___awdiv@dividend:
  1696                           	opt stack 0
  1697  000007                     i2__div_to_l_@quot:
  1698                           	opt stack 0
  1699                           
  1700                           ; 4 bytes @ 0x6
  1701  000007                     	ds	2
  1702  000009                     ?i2___altoft:
  1703                           	opt stack 0
  1704  000009                     ?i2___awtoft:
  1705                           	opt stack 0
  1706  000009                     ?i2___lltoft:
  1707                           	opt stack 0
  1708  000009                     i2digitalWrite@val:
  1709                           	opt stack 0
  1710  000009                     i2___awdiv@divisor:
  1711                           	opt stack 0
  1712  000009                     i2___awtoft@c:
  1713                           	opt stack 0
  1714  000009                     i2startTimer@val:
  1715                           	opt stack 0
  1716  000009                     i2___altoft@c:
  1717                           	opt stack 0
  1718  000009                     i2___lldiv@quotient:
  1719                           	opt stack 0
  1720  000009                     i2___lltoft@c:
  1721                           	opt stack 0
  1722                           
  1723                           ; 4 bytes @ 0x8
  1724  000009                     	ds	1
  1725  00000A                     i2__tdiv_to_l_@quot:
  1726                           	opt stack 0
  1727                           
  1728                           ; 4 bytes @ 0x9
  1729  00000A                     	ds	1
  1730  00000B                     ??i2_digitalWrite:
  1731  00000B                     i2___awdiv@counter:
  1732                           	opt stack 0
  1733  00000B                     i2__div_to_l_@cntr:
  1734                           	opt stack 0
  1735                           
  1736                           ; 1 bytes @ 0xA
  1737  00000B                     	ds	1
  1738  00000C                     i2___awdiv@sign:
  1739                           	opt stack 0
  1740  00000C                     i2___awtoft@sign:
  1741                           	opt stack 0
  1742  00000C                     i2__div_to_l_@exp1:
  1743                           	opt stack 0
  1744                           
  1745                           ; 1 bytes @ 0xB
  1746  00000C                     	ds	1
  1747  00000D                     ??i2_startTimer:
  1748  00000D                     ??i2___altoft:
  1749  00000D                     ??i2___lltoft:
  1750  00000D                     ?i2___ftdiv:
  1751                           	opt stack 0
  1752  00000D                     i2___lldiv@counter:
  1753                           	opt stack 0
  1754  00000D                     i2___awdiv@quotient:
  1755                           	opt stack 0
  1756  00000D                     i2___ftdiv@f1:
  1757                           	opt stack 0
  1758                           
  1759                           ; 3 bytes @ 0xC
  1760  00000D                     	ds	1
  1761  00000E                     ?i2___llmod:
  1762                           	opt stack 0
  1763  00000E                     i2__tdiv_to_l_@cntr:
  1764                           	opt stack 0
  1765  00000E                     i2digitalWrite@p:
  1766                           	opt stack 0
  1767  00000E                     i2___llmod@dividend:
  1768                           	opt stack 0
  1769                           
  1770                           ; 4 bytes @ 0xD
  1771  00000E                     	ds	1
  1772  00000F                     ?i2___wmul:
  1773                           	opt stack 0
  1774  00000F                     i2__tdiv_to_l_@exp1:
  1775                           	opt stack 0
  1776  00000F                     i2___wmul@multiplier:
  1777                           	opt stack 0
  1778                           
  1779                           ; 2 bytes @ 0xE
  1780  00000F                     	ds	1
  1781  000010                     ??_servoInterruptService:
  1782  000010                     i2___ftdiv@f2:
  1783                           	opt stack 0
  1784                           
  1785                           ; 3 bytes @ 0xF
  1786  000010                     	ds	1
  1787  000011                     i2___altoft@exp:
  1788                           	opt stack 0
  1789  000011                     i2___lltoft@exp:
  1790                           	opt stack 0
  1791  000011                     i2___wmul@multiplicand:
  1792                           	opt stack 0
  1793                           
  1794                           ; 2 bytes @ 0x10
  1795  000011                     	ds	1
  1796  000012                     i2___altoft@sign:
  1797                           	opt stack 0
  1798  000012                     i2___llmod@divisor:
  1799                           	opt stack 0
  1800                           
  1801                           ; 4 bytes @ 0x11
  1802  000012                     	ds	1
  1803  000013                     ??i2___ftdiv:
  1804  000013                     i2___wmul@product:
  1805                           	opt stack 0
  1806                           
  1807                           ; 2 bytes @ 0x12
  1808  000013                     	ds	3
  1809  000016                     i2___ftdiv@cntr:
  1810                           	opt stack 0
  1811  000016                     i2___llmod@counter:
  1812                           	opt stack 0
  1813                           
  1814                           ; 1 bytes @ 0x15
  1815  000016                     	ds	1
  1816  000017                     i2___ftdiv@f3:
  1817                           	opt stack 0
  1818                           
  1819                           ; 3 bytes @ 0x16
  1820  000017                     	ds	3
  1821  00001A                     i2___ftdiv@exp:
  1822                           	opt stack 0
  1823                           
  1824                           ; 1 bytes @ 0x19
  1825  00001A                     	ds	1
  1826  00001B                     i2___ftdiv@sign:
  1827                           	opt stack 0
  1828                           
  1829                           ; 1 bytes @ 0x1A
  1830  00001B                     	ds	1
  1831  00001C                     ?i2___ftmul:
  1832                           	opt stack 0
  1833  00001C                     i2___ftmul@f1:
  1834                           	opt stack 0
  1835                           
  1836                           ; 3 bytes @ 0x1B
  1837  00001C                     	ds	3
  1838  00001F                     i2___ftmul@f2:
  1839                           	opt stack 0
  1840                           
  1841                           ; 3 bytes @ 0x1E
  1842  00001F                     	ds	3
  1843  000022                     ??i2___ftmul:
  1844                           
  1845                           ; 1 bytes @ 0x21
  1846  000022                     	ds	3
  1847  000025                     i2___ftmul@exp:
  1848                           	opt stack 0
  1849                           
  1850                           ; 1 bytes @ 0x24
  1851  000025                     	ds	1
  1852  000026                     i2___ftmul@f3_as_product:
  1853                           	opt stack 0
  1854                           
  1855                           ; 3 bytes @ 0x25
  1856  000026                     	ds	3
  1857  000029                     i2___ftmul@cntr:
  1858                           	opt stack 0
  1859                           
  1860                           ; 1 bytes @ 0x28
  1861  000029                     	ds	1
  1862  00002A                     i2___ftmul@sign:
  1863                           	opt stack 0
  1864                           
  1865                           ; 1 bytes @ 0x29
  1866  00002A                     	ds	1
  1867  00002B                     ?i2_fround:
  1868                           	opt stack 0
  1869  00002B                     ?i2_scale:
  1870                           	opt stack 0
  1871                           
  1872                           ; 3 bytes @ 0x2A
  1873  00002B                     	ds	3
  1874  00002E                     i2_fround$1551:
  1875                           	opt stack 0
  1876  00002E                     i2_scale$1552:
  1877                           	opt stack 0
  1878                           
  1879                           ; 3 bytes @ 0x2D
  1880  00002E                     	ds	3
  1881  000031                     i2scale@scl:
  1882                           	opt stack 0
  1883  000031                     i2_fround$1550:
  1884                           	opt stack 0
  1885                           
  1886                           ; 3 bytes @ 0x30
  1887  000031                     	ds	3
  1888  000034                     i2fround@prec:
  1889                           	opt stack 0
  1890                           
  1891                           ; 1 bytes @ 0x33
  1892  000034                     	ds	1
  1893  000035                     ?i2___ftadd:
  1894                           	opt stack 0
  1895  000035                     i2___ftadd@f1:
  1896                           	opt stack 0
  1897                           
  1898                           ; 3 bytes @ 0x34
  1899  000035                     	ds	3
  1900  000038                     i2___ftadd@f2:
  1901                           	opt stack 0
  1902                           
  1903                           ; 3 bytes @ 0x37
  1904  000038                     	ds	3
  1905  00003B                     ??i2___ftadd:
  1906                           
  1907                           ; 1 bytes @ 0x3A
  1908  00003B                     	ds	3
  1909  00003E                     i2___ftadd@sign:
  1910                           	opt stack 0
  1911                           
  1912                           ; 1 bytes @ 0x3D
  1913  00003E                     	ds	1
  1914  00003F                     i2___ftadd@exp2:
  1915                           	opt stack 0
  1916                           
  1917                           ; 1 bytes @ 0x3E
  1918  00003F                     	ds	1
  1919  000040                     i2___ftadd@exp1:
  1920                           	opt stack 0
  1921                           
  1922                           ; 1 bytes @ 0x3F
  1923  000040                     	ds	1
  1924  000041                     ?i2___ftsub:
  1925                           	opt stack 0
  1926  000041                     ?i2___fttol:
  1927                           	opt stack 0
  1928  000041                     i2___ftsub@f1:
  1929                           	opt stack 0
  1930  000041                     i2___fttol@f1:
  1931                           	opt stack 0
  1932                           
  1933                           ; 3 bytes @ 0x40
  1934  000041                     	ds	3
  1935  000044                     i2___ftsub@f2:
  1936                           	opt stack 0
  1937                           
  1938                           ; 3 bytes @ 0x43
  1939  000044                     	ds	1
  1940  000045                     ??i2___fttol:
  1941                           
  1942                           ; 1 bytes @ 0x44
  1943  000045                     	ds	2
  1944  000047                     
  1945                           ; 1 bytes @ 0x46
  1946  000047                     	ds	3
  1947  00004A                     i2___fttol@sign1:
  1948                           	opt stack 0
  1949                           
  1950                           ; 1 bytes @ 0x49
  1951  00004A                     	ds	1
  1952  00004B                     i2___fttol@lval:
  1953                           	opt stack 0
  1954                           
  1955                           ; 4 bytes @ 0x4A
  1956  00004B                     	ds	4
  1957  00004F                     i2___fttol@exp1:
  1958                           	opt stack 0
  1959                           
  1960                           ; 1 bytes @ 0x4E
  1961  00004F                     	ds	1
  1962  000050                     ?i2_printf:
  1963                           	opt stack 0
  1964  000050                     ?i2_angleToPulse:
  1965                           	opt stack 0
  1966  000050                     i2angleToPulse@angle:
  1967                           	opt stack 0
  1968  000050                     i2printf@f:
  1969                           	opt stack 0
  1970                           
  1971                           ; 2 bytes @ 0x4F
  1972  000050                     	ds	4
  1973  000054                     ??i2_angleToPulse:
  1974  000054                     ??i2_printf:
  1975                           
  1976                           ; 1 bytes @ 0x53
  1977  000054                     	ds	4
  1978  000058                     i2angleToPulse@offset:
  1979                           	opt stack 0
  1980                           
  1981                           ; 4 bytes @ 0x57
  1982  000058                     	ds	2
  1983  00005A                     i2_printf$1553:
  1984                           	opt stack 0
  1985                           
  1986                           ; 3 bytes @ 0x59
  1987  00005A                     	ds	2
  1988  00005C                     i2angleToPulse@a180:
  1989                           	opt stack 0
  1990                           
  1991                           ; 4 bytes @ 0x5B
  1992  00005C                     	ds	1
  1993  00005D                     i2printf@idx:
  1994                           	opt stack 0
  1995                           
  1996                           ; 1 bytes @ 0x5C
  1997  00005D                     	ds	1
  1998  00005E                     i2printf@ap:
  1999                           	opt stack 0
  2000                           
  2001                           ; 2 bytes @ 0x5D
  2002  00005E                     	ds	2
  2003  000060                     i2printf@flag:
  2004                           	opt stack 0
  2005  000060                     i2_angleToPulse$1549:
  2006                           	opt stack 0
  2007                           
  2008                           ; 3 bytes @ 0x5F
  2009  000060                     	ds	2
  2010  000062                     i2printf@prec:
  2011                           	opt stack 0
  2012                           
  2013                           ; 2 bytes @ 0x61
  2014  000062                     	ds	1
  2015  000063                     i2angleToPulse@a000:
  2016                           	opt stack 0
  2017                           
  2018                           ; 4 bytes @ 0x62
  2019  000063                     	ds	1
  2020  000064                     i2printf@exp:
  2021                           	opt stack 0
  2022                           
  2023                           ; 2 bytes @ 0x63
  2024  000064                     	ds	2
  2025  000066                     i2printf@tmpval:
  2026                           	opt stack 0
  2027                           
  2028                           ; 4 bytes @ 0x65
  2029  000066                     	ds	1
  2030  000067                     i2setAngle@motor:
  2031                           	opt stack 0
  2032                           
  2033                           ; 2 bytes @ 0x66
  2034  000067                     	ds	2
  2035  000069                     i2setAngle@angle:
  2036                           	opt stack 0
  2037                           
  2038                           ; 2 bytes @ 0x68
  2039  000069                     	ds	1
  2040  00006A                     i2printf@val:
  2041                           	opt stack 0
  2042                           
  2043                           ; 4 bytes @ 0x69
  2044  00006A                     	ds	1
  2045  00006B                     ??i2_setAngle:
  2046                           
  2047                           ; 1 bytes @ 0x6A
  2048  00006B                     	ds	2
  2049  00006D                     i2setAngle@period:
  2050                           	opt stack 0
  2051                           
  2052                           ; 2 bytes @ 0x6C
  2053  00006D                     	ds	1
  2054  00006E                     i2printf@fval:
  2055                           	opt stack 0
  2056                           
  2057                           ; 3 bytes @ 0x6D
  2058  00006E                     	ds	1
  2059  00006F                     i2setAngle@i:
  2060                           	opt stack 0
  2061                           
  2062                           ; 2 bytes @ 0x6E
  2063  00006F                     	ds	2
  2064  000071                     i2printf@c:
  2065                           	opt stack 0
  2066                           
  2067                           ; 1 bytes @ 0x70
  2068  000071                     	ds	1
  2069  000072                     service@key:
  2070                           	opt stack 0
  2071                           
  2072                           ; 1 bytes @ 0x71
  2073  000072                     	ds	1
  2074                           tblptru	equ	0xFF8
  2075                           tblptrh	equ	0xFF7
  2076                           tblptrl	equ	0xFF6
  2077                           tablat	equ	0xFF5
  2078                           postinc0	equ	0xFEE
  2079                           wreg	equ	0xFE8
  2080                           postdec1	equ	0xFE5
  2081                           fsr1l	equ	0xFE1
  2082                           
  2083 ;;
  2084 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2085 ;;
  2086 ;; *************** function _main *****************
  2087 ;; Defined at:
  2088 ;;		line 90 in file "main.c"
  2089 ;; Parameters:    Size  Location     Type
  2090 ;;		None
  2091 ;; Auto vars:     Size  Location     Type
  2092 ;;		None
  2093 ;; Return value:  Size  Location     Type
  2094 ;;                  1    wreg      void 
  2095 ;; Registers used:
  2096 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2097 ;; Tracked objects:
  2098 ;;		On entry : 0/0
  2099 ;;		On exit  : 0/0
  2100 ;;		Unchanged: 0/0
  2101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2106 ;;Total ram usage:        0 bytes
  2107 ;; Hardware stack levels required when called:   13
  2108 ;; This function calls:
  2109 ;;		_digitalWrite
  2110 ;;		_initLCD
  2111 ;;		_initServo
  2112 ;;		_pinSetup
  2113 ;;		_printf
  2114 ;;		_sortBattery
  2115 ;; This function is called by:
  2116 ;;		Startup code after reset
  2117 ;; This function uses a non-reentrant model
  2118 ;;
  2119                           
  2120                           	psect	text0
  2121  00411A                     __ptext0:
  2122                           	opt stack 0
  2123  00411A                     _main:
  2124                           	opt stack 18
  2125                           
  2126                           ;main.c: 91: pinSetup();
  2127                           
  2128                           ;incstack = 0
  2129  00411A  EC15  F025         	call	_pinSetup	;wreg free
  2130                           
  2131                           ;main.c: 92: initLCD();
  2132  00411E  EC8D  F024         	call	_initLCD	;wreg free
  2133                           
  2134                           ;main.c: 98: digitalWrite(cylinderMotor, 1);
  2135                           
  2136                           ;main.c: 94: while(1){
  2137  004122  0E54               	movlw	low _cylinderMotor
  2138  004124  0100               	movlb	0	; () banked
  2139  004126  6F8E               	movwf	digitalWrite@pin& (0+255),b
  2140  004128  0E01               	movlw	high _cylinderMotor
  2141  00412A  0100               	movlb	0	; () banked
  2142  00412C  6F8F               	movwf	(digitalWrite@pin+1)& (0+255),b
  2143  00412E  0E00               	movlw	0
  2144  004130  0100               	movlb	0	; () banked
  2145  004132  6F91               	movwf	(digitalWrite@val+1)& (0+255),b
  2146  004134  0E01               	movlw	1
  2147  004136  6F90               	movwf	digitalWrite@val& (0+255),b
  2148  004138  ECF9  F01A         	call	_digitalWrite	;wreg free
  2149                           
  2150                           ;main.c: 99: initServo(conveyorServo, 0);
  2151  00413C  0E3E               	movlw	low _conveyorServo
  2152  00413E  0101               	movlb	1	; () banked
  2153  004140  6F1B               	movwf	initServo@motor& (0+255),b
  2154  004142  0E01               	movlw	high _conveyorServo
  2155  004144  0101               	movlb	1	; () banked
  2156  004146  6F1C               	movwf	(initServo@motor+1)& (0+255),b
  2157  004148  0E00               	movlw	0
  2158  00414A  0101               	movlb	1	; () banked
  2159  00414C  6F1E               	movwf	(initServo@angle+1)& (0+255),b
  2160  00414E  0E00               	movlw	0
  2161  004150  6F1D               	movwf	initServo@angle& (0+255),b
  2162  004152  EC6F  F021         	call	_initServo	;wreg free
  2163                           
  2164                           ;main.c: 100: initServo(padServo, padAngle_NEUTRAL);
  2165  004156  0E44               	movlw	low _padServo
  2166  004158  0101               	movlb	1	; () banked
  2167  00415A  6F1B               	movwf	initServo@motor& (0+255),b
  2168  00415C  0E01               	movlw	high _padServo
  2169  00415E  0101               	movlb	1	; () banked
  2170  004160  6F1C               	movwf	(initServo@motor+1)& (0+255),b
  2171  004162  C134  F11D         	movff	_padAngle_NEUTRAL,initServo@angle
  2172  004166  C135  F11E         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  2173  00416A  EC6F  F021         	call	_initServo	;wreg free
  2174                           
  2175                           ;main.c: 101: initServo(redirectingServo, redirectAngle_AA);
  2176  00416E  0E4A               	movlw	low _redirectingServo
  2177  004170  0101               	movlb	1	; () banked
  2178  004172  6F1B               	movwf	initServo@motor& (0+255),b
  2179  004174  0E01               	movlw	high _redirectingServo
  2180  004176  0101               	movlb	1	; () banked
  2181  004178  6F1C               	movwf	(initServo@motor+1)& (0+255),b
  2182  00417A  C13A  F11D         	movff	_redirectAngle_AA,initServo@angle
  2183  00417E  C13B  F11E         	movff	_redirectAngle_AA+1,initServo@angle+1
  2184  004182  EC6F  F021         	call	_initServo	;wreg free
  2185  004186                     l6838:
  2186                           
  2187                           ;main.c: 106: printf("running");
  2188  004186  0EF7               	movlw	low STR_1
  2189  004188  0100               	movlb	0	; () banked
  2190  00418A  6FE3               	movwf	printf@f& (0+255),b
  2191  00418C  0EFF               	movlw	high STR_1
  2192  00418E  0100               	movlb	0	; () banked
  2193  004190  6FE4               	movwf	(printf@f+1)& (0+255),b
  2194  004192  EC09  F000         	call	_printf	;wreg free
  2195  004196                     l6840:
  2196  004196  0101               	movlb	1	; () banked
  2197  004198  5175               	movf	_batteryDetected& (0+255),w,b
  2198  00419A  0101               	movlb	1	; () banked
  2199  00419C  1176               	iorwf	(_batteryDetected+1)& (0+255),w,b
  2200  00419E  B4D8               	btfsc	status,2,c
  2201  0041A0  D7FA               	goto	l6840
  2202                           
  2203                           ; BSR set to: 1
  2204                           ;main.c: 110: sortBattery();
  2205                           
  2206                           ; BSR set to: 1
  2207  0041A2  ECFD  F00C         	call	_sortBattery	;wreg free
  2208                           
  2209                           ;main.c: 113: batteryDetected = 0;
  2210  0041A6  0E00               	movlw	0
  2211  0041A8  0101               	movlb	1	; () banked
  2212  0041AA  6F76               	movwf	(_batteryDetected+1)& (0+255),b
  2213  0041AC  0E00               	movlw	0
  2214  0041AE  6F75               	movwf	_batteryDetected& (0+255),b
  2215                           
  2216                           ; BSR set to: 1
  2217  0041B0  D7EA               	goto	l6838
  2218  0041B2                     l116:
  2219  0041B2  D7FF               	goto	l116
  2220  0041B4                     __end_of_main:
  2221                           	opt stack 0
  2222                           tblptru	equ	0xFF8
  2223                           tblptrh	equ	0xFF7
  2224                           tblptrl	equ	0xFF6
  2225                           tablat	equ	0xFF5
  2226                           postinc0	equ	0xFEE
  2227                           wreg	equ	0xFE8
  2228                           postdec1	equ	0xFE5
  2229                           fsr1l	equ	0xFE1
  2230                           status	equ	0xFD8
  2231                           
  2232 ;; *************** function _sortBattery *****************
  2233 ;; Defined at:
  2234 ;;		line 125 in file "main.c"
  2235 ;; Parameters:    Size  Location     Type
  2236 ;;		None
  2237 ;; Auto vars:     Size  Location     Type
  2238 ;;  V_float         3   34[BANK1 ] float 
  2239 ;;  V               3   47[BANK1 ] float 
  2240 ;;  resolution      3   40[BANK1 ] float 
  2241 ;;  Vcc             3   37[BANK1 ] float 
  2242 ;;  targetAngle     2   45[BANK1 ] int 
  2243 ;;  signal          2   43[BANK1 ] int 
  2244 ;; Return value:  Size  Location     Type
  2245 ;;                  1    wreg      void 
  2246 ;; Registers used:
  2247 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2248 ;; Tracked objects:
  2249 ;;		On entry : 0/0
  2250 ;;		On exit  : 0/0
  2251 ;;		Unchanged: 0/0
  2252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2254 ;;      Locals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2255 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2256 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2257 ;;Total ram usage:       18 bytes
  2258 ;; Hardware stack levels used:    1
  2259 ;; Hardware stack levels required when called:   12
  2260 ;; This function calls:
  2261 ;;		___altoft
  2262 ;;		___ftdiv
  2263 ;;		___ftge
  2264 ;;		___ftmul
  2265 ;;		_analogRead
  2266 ;;		_digitalRead
  2267 ;;		_digitalWrite
  2268 ;;		_lcdClear
  2269 ;;		_pause
  2270 ;;		_printf
  2271 ;;		_readKeypad
  2272 ;;		_setAngle
  2273 ;; This function is called by:
  2274 ;;		_main
  2275 ;; This function uses a non-reentrant model
  2276 ;;
  2277                           
  2278                           	psect	text1
  2279  0019FA                     __ptext1:
  2280                           	opt stack 0
  2281  0019FA                     _sortBattery:
  2282                           	opt stack 18
  2283                           
  2284                           ;main.c: 128: setAngle(conveyorServo, 90);
  2285                           
  2286                           ;incstack = 0
  2287  0019FA  0E3E               	movlw	low _conveyorServo
  2288  0019FC  0101               	movlb	1	; () banked
  2289  0019FE  6F13               	movwf	setAngle@motor& (0+255),b
  2290  001A00  0E01               	movlw	high _conveyorServo
  2291  001A02  0101               	movlb	1	; () banked
  2292  001A04  6F14               	movwf	(setAngle@motor+1)& (0+255),b
  2293  001A06  0E00               	movlw	0
  2294  001A08  0101               	movlb	1	; () banked
  2295  001A0A  6F16               	movwf	(setAngle@angle+1)& (0+255),b
  2296  001A0C  0E5A               	movlw	90
  2297  001A0E  6F15               	movwf	setAngle@angle& (0+255),b
  2298  001A10  EC50  F01D         	call	_setAngle	;wreg free
  2299                           
  2300                           ;main.c: 129: digitalWrite(cylinderMotor, 0);
  2301  001A14  0E54               	movlw	low _cylinderMotor
  2302  001A16  0100               	movlb	0	; () banked
  2303  001A18  6F8E               	movwf	digitalWrite@pin& (0+255),b
  2304  001A1A  0E01               	movlw	high _cylinderMotor
  2305  001A1C  0100               	movlb	0	; () banked
  2306  001A1E  6F8F               	movwf	(digitalWrite@pin+1)& (0+255),b
  2307  001A20  0E00               	movlw	0
  2308  001A22  0100               	movlb	0	; () banked
  2309  001A24  6F91               	movwf	(digitalWrite@val+1)& (0+255),b
  2310  001A26  0E00               	movlw	0
  2311  001A28  6F90               	movwf	digitalWrite@val& (0+255),b
  2312  001A2A  ECF9  F01A         	call	_digitalWrite	;wreg free
  2313                           
  2314                           ;main.c: 135: pause("interrupt!!!\nclose?");
  2315  001A2E  0EB6               	movlw	low STR_2
  2316  001A30  0101               	movlb	1	; () banked
  2317  001A32  6F1E               	movwf	pause@message& (0+255),b
  2318  001A34  0EFE               	movlw	high STR_2
  2319  001A36  0101               	movlb	1	; () banked
  2320  001A38  6F1F               	movwf	(pause@message+1)& (0+255),b
  2321  001A3A  EC1F  F026         	call	_pause	;wreg free
  2322                           
  2323                           ;main.c: 136: setAngle(padServo, padAngle_CLOSE);
  2324  001A3E  0E44               	movlw	low _padServo
  2325  001A40  0101               	movlb	1	; () banked
  2326  001A42  6F13               	movwf	setAngle@motor& (0+255),b
  2327  001A44  0E01               	movlw	high _padServo
  2328  001A46  0101               	movlb	1	; () banked
  2329  001A48  6F14               	movwf	(setAngle@motor+1)& (0+255),b
  2330  001A4A  C132  F115         	movff	_padAngle_CLOSE,setAngle@angle
  2331  001A4E  C133  F116         	movff	_padAngle_CLOSE+1,setAngle@angle+1
  2332  001A52  EC50  F01D         	call	_setAngle	;wreg free
  2333                           
  2334                           ;main.c: 139: pause("read voltage?");
  2335  001A56  0ECE               	movlw	low STR_3
  2336  001A58  0101               	movlb	1	; () banked
  2337  001A5A  6F1E               	movwf	pause@message& (0+255),b
  2338  001A5C  0EFF               	movlw	high STR_3
  2339  001A5E  0101               	movlb	1	; () banked
  2340  001A60  6F1F               	movwf	(pause@message+1)& (0+255),b
  2341  001A62  EC1F  F026         	call	_pause	;wreg free
  2342                           
  2343                           ;main.c: 140: float Vcc = 4.61;
  2344  001A66  0E85               	movlw	133
  2345  001A68  0101               	movlb	1	; () banked
  2346  001A6A  6F25               	movwf	sortBattery@Vcc& (0+255),b
  2347  001A6C  0E93               	movlw	147
  2348  001A6E  0101               	movlb	1	; () banked
  2349  001A70  6F26               	movwf	(sortBattery@Vcc+1)& (0+255),b
  2350  001A72  0E40               	movlw	64
  2351  001A74  0101               	movlb	1	; () banked
  2352  001A76  6F27               	movwf	(sortBattery@Vcc+2)& (0+255),b
  2353                           
  2354                           ; BSR set to: 1
  2355                           ;main.c: 141: float resolution = (1<<10) - 1;
  2356  001A78  0EC0               	movlw	192
  2357  001A7A  0101               	movlb	1	; () banked
  2358  001A7C  6F28               	movwf	sortBattery@resolution& (0+255),b
  2359  001A7E  0E7F               	movlw	127
  2360  001A80  0101               	movlb	1	; () banked
  2361  001A82  6F29               	movwf	(sortBattery@resolution+1)& (0+255),b
  2362  001A84  0E44               	movlw	68
  2363  001A86  0101               	movlb	1	; () banked
  2364  001A88  6F2A               	movwf	(sortBattery@resolution+2)& (0+255),b
  2365                           
  2366                           ; BSR set to: 1
  2367                           ;main.c: 143: int targetAngle;
  2368                           ;main.c: 144: int signal = digitalRead(padPin1)<<1;
  2369  001A8A  0E58               	movlw	low _padPin1
  2370  001A8C  0100               	movlb	0	; () banked
  2371  001A8E  6F8E               	movwf	digitalRead@pin& (0+255),b
  2372  001A90  0E01               	movlw	high _padPin1
  2373  001A92  0100               	movlb	0	; () banked
  2374  001A94  6F8F               	movwf	(digitalRead@pin+1)& (0+255),b
  2375  001A96  ECC4  F018         	call	_digitalRead	;wreg free
  2376  001A9A  90D8               	bcf	status,0,c
  2377  001A9C  0100               	movlb	0	; () banked
  2378  001A9E  358E               	rlcf	?_digitalRead& (0+255),w,b
  2379  001AA0  0101               	movlb	1	; () banked
  2380  001AA2  6F2B               	movwf	sortBattery@signal& (0+255),b
  2381  001AA4  0100               	movlb	0	; () banked
  2382  001AA6  358F               	rlcf	(?_digitalRead+1)& (0+255),w,b
  2383  001AA8  0101               	movlb	1	; () banked
  2384  001AAA  6F2C               	movwf	(sortBattery@signal+1)& (0+255),b
  2385                           
  2386                           ; BSR set to: 1
  2387                           ;main.c: 145: signal |= digitalRead(padPin2);
  2388  001AAC  0E5C               	movlw	low _padPin2
  2389  001AAE  0100               	movlb	0	; () banked
  2390  001AB0  6F8E               	movwf	digitalRead@pin& (0+255),b
  2391  001AB2  0E01               	movlw	high _padPin2
  2392  001AB4  0100               	movlb	0	; () banked
  2393  001AB6  6F8F               	movwf	(digitalRead@pin+1)& (0+255),b
  2394  001AB8  ECC4  F018         	call	_digitalRead	;wreg free
  2395  001ABC  0100               	movlb	0	; () banked
  2396  001ABE  518E               	movf	?_digitalRead& (0+255),w,b
  2397  001AC0  0101               	movlb	1	; () banked
  2398  001AC2  132B               	iorwf	sortBattery@signal& (0+255),f,b
  2399  001AC4  0100               	movlb	0	; () banked
  2400  001AC6  518F               	movf	(?_digitalRead+1)& (0+255),w,b
  2401  001AC8  0101               	movlb	1	; () banked
  2402  001ACA  132C               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  2403                           
  2404                           ; BSR set to: 1
  2405                           ;main.c: 147: digitalWrite(AA_float, 1);
  2406  001ACC  0E50               	movlw	low _AA_float
  2407  001ACE  0100               	movlb	0	; () banked
  2408  001AD0  6F8E               	movwf	digitalWrite@pin& (0+255),b
  2409  001AD2  0E01               	movlw	high _AA_float
  2410  001AD4  0100               	movlb	0	; () banked
  2411  001AD6  6F8F               	movwf	(digitalWrite@pin+1)& (0+255),b
  2412  001AD8  0E00               	movlw	0
  2413  001ADA  0100               	movlb	0	; () banked
  2414  001ADC  6F91               	movwf	(digitalWrite@val+1)& (0+255),b
  2415  001ADE  0E01               	movlw	1
  2416  001AE0  6F90               	movwf	digitalWrite@val& (0+255),b
  2417  001AE2  ECF9  F01A         	call	_digitalWrite	;wreg free
  2418                           
  2419                           ;main.c: 148: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2420  001AE6  C128  F0A3         	movff	sortBattery@resolution,___ftdiv@f2
  2421  001AEA  C129  F0A4         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2422  001AEE  C12A  F0A5         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2423  001AF2  C16A  F08E         	movff	_padPin3+2,analogRead@channel
  2424  001AF6  C16B  F08F         	movff	_padPin3+3,analogRead@channel+1
  2425  001AFA  ECD4  F024         	call	_analogRead	;wreg free
  2426  001AFE  C08E  F096         	movff	?_analogRead,___altoft@c
  2427  001B02  C08F  F097         	movff	?_analogRead+1,___altoft@c+1
  2428  001B06  C090  F098         	movff	?_analogRead+2,___altoft@c+2
  2429  001B0A  C091  F099         	movff	?_analogRead+3,___altoft@c+3
  2430  001B0E  EC3E  F020         	call	___altoft	;wreg free
  2431  001B12  C096  F0A0         	movff	?___altoft,___ftdiv@f1
  2432  001B16  C097  F0A1         	movff	?___altoft+1,___ftdiv@f1+1
  2433  001B1A  C098  F0A2         	movff	?___altoft+2,___ftdiv@f1+2
  2434  001B1E  EC43  F016         	call	___ftdiv	;wreg free
  2435  001B22  C0A0  F0AF         	movff	?___ftdiv,___ftmul@f1
  2436  001B26  C0A1  F0B0         	movff	?___ftdiv+1,___ftmul@f1+1
  2437  001B2A  C0A2  F0B1         	movff	?___ftdiv+2,___ftmul@f1+2
  2438  001B2E  C125  F0B2         	movff	sortBattery@Vcc,___ftmul@f2
  2439  001B32  C126  F0B3         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2440  001B36  C127  F0B4         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2441  001B3A  EC94  F015         	call	___ftmul	;wreg free
  2442  001B3E  C0AF  F12F         	movff	?___ftmul,sortBattery@V
  2443  001B42  C0B0  F130         	movff	?___ftmul+1,sortBattery@V+1
  2444  001B46  C0B1  F131         	movff	?___ftmul+2,sortBattery@V+2
  2445                           
  2446                           ;main.c: 150: lcdClear();
  2447  001B4A  EC2E  F026         	call	_lcdClear	;wreg free
  2448                           
  2449                           ;main.c: 151: printf("signal: %d \nVoltage: %f",signal,V);
  2450  001B4E  0E8A               	movlw	low STR_4
  2451  001B50  0100               	movlb	0	; () banked
  2452  001B52  6FE3               	movwf	printf@f& (0+255),b
  2453  001B54  0EFE               	movlw	high STR_4
  2454  001B56  0100               	movlb	0	; () banked
  2455  001B58  6FE4               	movwf	(printf@f+1)& (0+255),b
  2456  001B5A  C12B  F0E5         	movff	sortBattery@signal,?_printf+2
  2457  001B5E  C12C  F0E6         	movff	sortBattery@signal+1,?_printf+3
  2458  001B62  C12F  F0E7         	movff	sortBattery@V,?_printf+4
  2459  001B66  C130  F0E8         	movff	sortBattery@V+1,?_printf+5
  2460  001B6A  C131  F0E9         	movff	sortBattery@V+2,?_printf+6
  2461  001B6E  EC09  F000         	call	_printf	;wreg free
  2462                           
  2463                           ;main.c: 152: readKeypad();
  2464  001B72  EC9A  F025         	call	_readKeypad	;wreg free
  2465                           
  2466                           ;main.c: 155: pause("set redirect angle?");
  2467  001B76  0EA2               	movlw	low STR_5
  2468  001B78  0101               	movlb	1	; () banked
  2469  001B7A  6F1E               	movwf	pause@message& (0+255),b
  2470  001B7C  0EFE               	movlw	high STR_5
  2471  001B7E  0101               	movlb	1	; () banked
  2472  001B80  6F1F               	movwf	(pause@message+1)& (0+255),b
  2473  001B82  EC1F  F026         	call	_pause	;wreg free
  2474                           
  2475                           ;main.c: 156: switch(signal){
  2476  001B86  D09C               	goto	l6812
  2477  001B88                     l6790:
  2478                           
  2479                           ;main.c: 159: digitalWrite(AA_float, 0);
  2480  001B88  0E50               	movlw	low _AA_float
  2481  001B8A  0100               	movlb	0	; () banked
  2482  001B8C  6F8E               	movwf	digitalWrite@pin& (0+255),b
  2483  001B8E  0E01               	movlw	high _AA_float
  2484  001B90  0100               	movlb	0	; () banked
  2485  001B92  6F8F               	movwf	(digitalWrite@pin+1)& (0+255),b
  2486  001B94  0E00               	movlw	0
  2487  001B96  0100               	movlb	0	; () banked
  2488  001B98  6F91               	movwf	(digitalWrite@val+1)& (0+255),b
  2489  001B9A  0E00               	movlw	0
  2490  001B9C  6F90               	movwf	digitalWrite@val& (0+255),b
  2491  001B9E  ECF9  F01A         	call	_digitalWrite	;wreg free
  2492                           
  2493                           ;main.c: 160: _delay((unsigned long)((1)*(10000000/4000.0)));
  2494  001BA2  0E04               	movlw	4
  2495  001BA4  0101               	movlb	1	; () banked
  2496  001BA6  6F20               	movwf	??_sortBattery& (0+255),b
  2497  001BA8  0E3D               	movlw	61
  2498  001BAA                     u7447:
  2499  001BAA  2EE8               	decfsz	wreg,f,c
  2500  001BAC  D7FE               	bra	u7447
  2501  001BAE  2F20               	decfsz	??_sortBattery& (0+255),f,b
  2502  001BB0  D7FC               	bra	u7447
  2503  001BB2  D000               	nop2	
  2504                           
  2505                           ;main.c: 161: float V_float = analogRead(padPin3[1]) / resolution * Vcc;
  2506  001BB4  C128  F0A3         	movff	sortBattery@resolution,___ftdiv@f2
  2507  001BB8  C129  F0A4         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2508  001BBC  C12A  F0A5         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2509  001BC0  C16A  F08E         	movff	_padPin3+2,analogRead@channel
  2510  001BC4  C16B  F08F         	movff	_padPin3+3,analogRead@channel+1
  2511  001BC8  ECD4  F024         	call	_analogRead	;wreg free
  2512  001BCC  C08E  F096         	movff	?_analogRead,___altoft@c
  2513  001BD0  C08F  F097         	movff	?_analogRead+1,___altoft@c+1
  2514  001BD4  C090  F098         	movff	?_analogRead+2,___altoft@c+2
  2515  001BD8  C091  F099         	movff	?_analogRead+3,___altoft@c+3
  2516  001BDC  EC3E  F020         	call	___altoft	;wreg free
  2517  001BE0  C096  F0A0         	movff	?___altoft,___ftdiv@f1
  2518  001BE4  C097  F0A1         	movff	?___altoft+1,___ftdiv@f1+1
  2519  001BE8  C098  F0A2         	movff	?___altoft+2,___ftdiv@f1+2
  2520  001BEC  EC43  F016         	call	___ftdiv	;wreg free
  2521  001BF0  C0A0  F0AF         	movff	?___ftdiv,___ftmul@f1
  2522  001BF4  C0A1  F0B0         	movff	?___ftdiv+1,___ftmul@f1+1
  2523  001BF8  C0A2  F0B1         	movff	?___ftdiv+2,___ftmul@f1+2
  2524  001BFC  C125  F0B2         	movff	sortBattery@Vcc,___ftmul@f2
  2525  001C00  C126  F0B3         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2526  001C04  C127  F0B4         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2527  001C08  EC94  F015         	call	___ftmul	;wreg free
  2528  001C0C  C0AF  F122         	movff	?___ftmul,sortBattery@V_float
  2529  001C10  C0B0  F123         	movff	?___ftmul+1,sortBattery@V_float+1
  2530  001C14  C0B1  F124         	movff	?___ftmul+2,sortBattery@V_float+2
  2531                           
  2532                           ;main.c: 162: if(V_float < 0.1){
  2533  001C18  C122  F08E         	movff	sortBattery@V_float,___ftge@ff1
  2534  001C1C  C123  F08F         	movff	sortBattery@V_float+1,___ftge@ff1+1
  2535  001C20  C124  F090         	movff	sortBattery@V_float+2,___ftge@ff1+2
  2536  001C24  0ECD               	movlw	205
  2537  001C26  0100               	movlb	0	; () banked
  2538  001C28  6F91               	movwf	___ftge@ff2& (0+255),b
  2539  001C2A  0ECC               	movlw	204
  2540  001C2C  0100               	movlb	0	; () banked
  2541  001C2E  6F92               	movwf	(___ftge@ff2+1)& (0+255),b
  2542  001C30  0E3D               	movlw	61
  2543  001C32  0100               	movlb	0	; () banked
  2544  001C34  6F93               	movwf	(___ftge@ff2+2)& (0+255),b
  2545  001C36  ECBA  F01D         	call	___ftge	;wreg free
  2546  001C3A  0100               	movlb	0	; () banked
  2547  001C3C  B0D8               	btfsc	status,0,c
  2548  001C3E  D00F               	goto	l6802
  2549                           
  2550                           ; BSR set to: 0
  2551                           ;main.c: 163: if(V > V_LIM_AA) targetAngle = redirectAngle_AA;
  2552  001C40  C16F  F08E         	movff	_V_LIM_AA,___ftge@ff1
  2553  001C44  C170  F08F         	movff	_V_LIM_AA+1,___ftge@ff1+1
  2554  001C48  C171  F090         	movff	_V_LIM_AA+2,___ftge@ff1+2
  2555  001C4C  C12F  F091         	movff	sortBattery@V,___ftge@ff2
  2556  001C50  C130  F092         	movff	sortBattery@V+1,___ftge@ff2+1
  2557  001C54  C131  F093         	movff	sortBattery@V+2,___ftge@ff2+2
  2558  001C58  ECBA  F01D         	call	___ftge	;wreg free
  2559  001C5C  D024               	goto	L9
  2560  001C5E                     l6802:
  2561                           
  2562                           ;main.c: 169: if(V > V_LIM_9V) targetAngle = redirectAngle_9V;
  2563  001C5E  C16C  F08E         	movff	_V_LIM_9V,___ftge@ff1
  2564  001C62  C16D  F08F         	movff	_V_LIM_9V+1,___ftge@ff1+1
  2565  001C66  C16E  F090         	movff	_V_LIM_9V+2,___ftge@ff1+2
  2566  001C6A  C12F  F091         	movff	sortBattery@V,___ftge@ff2
  2567  001C6E  C130  F092         	movff	sortBattery@V+1,___ftge@ff2+1
  2568  001C72  C131  F093         	movff	sortBattery@V+2,___ftge@ff2+2
  2569  001C76  ECBA  F01D         	call	___ftge	;wreg free
  2570  001C7A  0100               	movlb	0	; () banked
  2571  001C7C  B0D8               	btfsc	status,0,c
  2572  001C7E  D01B               	goto	l132
  2573                           
  2574                           ; BSR set to: 0
  2575  001C80  C138  F12D         	movff	_redirectAngle_9V,sortBattery@targetAngle
  2576  001C84  C139  F12E         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  2577  001C88  D02F               	goto	l6814
  2578  001C8A                     l6806:
  2579                           
  2580                           ;main.c: 173: if(V > V_LIM_C) targetAngle = redirectAngle_AA;
  2581  001C8A  C172  F08E         	movff	_V_LIM_C,___ftge@ff1
  2582  001C8E  C173  F08F         	movff	_V_LIM_C+1,___ftge@ff1+1
  2583  001C92  C174  F090         	movff	_V_LIM_C+2,___ftge@ff1+2
  2584  001C96  C12F  F091         	movff	sortBattery@V,___ftge@ff2
  2585  001C9A  C130  F092         	movff	sortBattery@V+1,___ftge@ff2+1
  2586  001C9E  C131  F093         	movff	sortBattery@V+2,___ftge@ff2+2
  2587  001CA2  ECBA  F01D         	call	___ftge	;wreg free
  2588  001CA6                     L9:
  2589  001CA6  0100               	movlb	0	; () banked
  2590  001CA8  B0D8               	btfsc	status,0,c
  2591  001CAA  D005               	goto	l132
  2592                           
  2593                           ; BSR set to: 0
  2594  001CAC  C13A  F12D         	movff	_redirectAngle_AA,sortBattery@targetAngle
  2595  001CB0  C13B  F12E         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  2596  001CB4  D019               	goto	l6814
  2597  001CB6                     l132:
  2598                           
  2599                           ; BSR set to: 0
  2600                           ;main.c: 174: else targetAngle = redirectAngle_OTHER;
  2601  001CB6  C13C  F12D         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  2602  001CBA  C13D  F12E         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  2603                           
  2604                           ; BSR set to: 0
  2605                           ;main.c: 176: }
  2606                           
  2607                           ; BSR set to: 0
  2608                           ;main.c: 175: break;
  2609  001CBE  D014               	goto	l6814
  2610  001CC0                     l6812:
  2611  001CC0  C12B  F120         	movff	sortBattery@signal,??_sortBattery
  2612  001CC4  C12C  F121         	movff	sortBattery@signal+1,??_sortBattery+1
  2613                           
  2614                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2615                           ; Switch size 1, requested type "space"
  2616                           ; Number of cases is 1, Range of values is 0 to 0
  2617                           ; switch strategies available:
  2618                           ; Name         Instructions Cycles
  2619                           ; simple_byte            4     3 (average)
  2620                           ;	Chosen strategy is simple_byte
  2621  001CC8  0101               	movlb	1	; () banked
  2622  001CCA  5121               	movf	(??_sortBattery+1)& (0+255),w,b
  2623  001CCC  0A00               	xorlw	0	; case 0
  2624  001CCE  A4D8               	btfss	status,2,c
  2625  001CD0  D00B               	goto	l6814
  2626                           
  2627                           ; BSR set to: 1
  2628                           ; Switch size 1, requested type "space"
  2629                           ; Number of cases is 3, Range of values is 0 to 2
  2630                           ; switch strategies available:
  2631                           ; Name         Instructions Cycles
  2632                           ; simple_byte           10     6 (average)
  2633                           ;	Chosen strategy is simple_byte
  2634  001CD2  0101               	movlb	1	; () banked
  2635  001CD4  5120               	movf	??_sortBattery& (0+255),w,b
  2636  001CD6  0A00               	xorlw	0	; case 0
  2637  001CD8  B4D8               	btfsc	status,2,c
  2638  001CDA  D756               	goto	l6790
  2639  001CDC  0A01               	xorlw	1	; case 1
  2640  001CDE  B4D8               	btfsc	status,2,c
  2641  001CE0  D7BE               	goto	l6802
  2642  001CE2  0A03               	xorlw	3	; case 2
  2643  001CE4  B4D8               	btfsc	status,2,c
  2644  001CE6  D7D1               	goto	l6806
  2645  001CE8                     l6814:
  2646                           
  2647                           ;main.c: 178: setAngle(redirectingServo, targetAngle);
  2648  001CE8  0E4A               	movlw	low _redirectingServo
  2649  001CEA  0101               	movlb	1	; () banked
  2650  001CEC  6F13               	movwf	setAngle@motor& (0+255),b
  2651  001CEE  0E01               	movlw	high _redirectingServo
  2652  001CF0  0101               	movlb	1	; () banked
  2653  001CF2  6F14               	movwf	(setAngle@motor+1)& (0+255),b
  2654  001CF4  C12D  F115         	movff	sortBattery@targetAngle,setAngle@angle
  2655  001CF8  C12E  F116         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  2656  001CFC  EC50  F01D         	call	_setAngle	;wreg free
  2657                           
  2658                           ;main.c: 181: pause("release battery?");
  2659  001D00  0EAE               	movlw	low STR_6
  2660  001D02  0101               	movlb	1	; () banked
  2661  001D04  6F1E               	movwf	pause@message& (0+255),b
  2662  001D06  0EFF               	movlw	high STR_6
  2663  001D08  0101               	movlb	1	; () banked
  2664  001D0A  6F1F               	movwf	(pause@message+1)& (0+255),b
  2665  001D0C  EC1F  F026         	call	_pause	;wreg free
  2666                           
  2667                           ;main.c: 182: setAngle(padServo, padAngle_OPEN);
  2668  001D10  0E44               	movlw	low _padServo
  2669  001D12  0101               	movlb	1	; () banked
  2670  001D14  6F13               	movwf	setAngle@motor& (0+255),b
  2671  001D16  0E01               	movlw	high _padServo
  2672  001D18  0101               	movlb	1	; () banked
  2673  001D1A  6F14               	movwf	(setAngle@motor+1)& (0+255),b
  2674  001D1C  C136  F115         	movff	_padAngle_OPEN,setAngle@angle
  2675  001D20  C137  F116         	movff	_padAngle_OPEN+1,setAngle@angle+1
  2676  001D24  EC50  F01D         	call	_setAngle	;wreg free
  2677                           
  2678                           ;main.c: 185: pause("reset the pad?");
  2679  001D28  0EBF               	movlw	low STR_7
  2680  001D2A  0101               	movlb	1	; () banked
  2681  001D2C  6F1E               	movwf	pause@message& (0+255),b
  2682  001D2E  0EFF               	movlw	high STR_7
  2683  001D30  0101               	movlb	1	; () banked
  2684  001D32  6F1F               	movwf	(pause@message+1)& (0+255),b
  2685  001D34  EC1F  F026         	call	_pause	;wreg free
  2686                           
  2687                           ;main.c: 186: setAngle(padServo, padAngle_NEUTRAL);
  2688  001D38  0E44               	movlw	low _padServo
  2689  001D3A  0101               	movlb	1	; () banked
  2690  001D3C  6F13               	movwf	setAngle@motor& (0+255),b
  2691  001D3E  0E01               	movlw	high _padServo
  2692  001D40  0101               	movlb	1	; () banked
  2693  001D42  6F14               	movwf	(setAngle@motor+1)& (0+255),b
  2694  001D44  C134  F115         	movff	_padAngle_NEUTRAL,setAngle@angle
  2695  001D48  C135  F116         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  2696  001D4C  EC50  F01D         	call	_setAngle	;wreg free
  2697                           
  2698                           ;main.c: 189: pause("conveyor & \ncylinder on?");
  2699  001D50  0E71               	movlw	low STR_8
  2700  001D52  0101               	movlb	1	; () banked
  2701  001D54  6F1E               	movwf	pause@message& (0+255),b
  2702  001D56  0EFE               	movlw	high STR_8
  2703  001D58  0101               	movlb	1	; () banked
  2704  001D5A  6F1F               	movwf	(pause@message+1)& (0+255),b
  2705  001D5C  EC1F  F026         	call	_pause	;wreg free
  2706                           
  2707                           ;main.c: 190: setAngle(conveyorServo, 0);
  2708  001D60  0E3E               	movlw	low _conveyorServo
  2709  001D62  0101               	movlb	1	; () banked
  2710  001D64  6F13               	movwf	setAngle@motor& (0+255),b
  2711  001D66  0E01               	movlw	high _conveyorServo
  2712  001D68  0101               	movlb	1	; () banked
  2713  001D6A  6F14               	movwf	(setAngle@motor+1)& (0+255),b
  2714  001D6C  0E00               	movlw	0
  2715  001D6E  0101               	movlb	1	; () banked
  2716  001D70  6F16               	movwf	(setAngle@angle+1)& (0+255),b
  2717  001D72  0E00               	movlw	0
  2718  001D74  6F15               	movwf	setAngle@angle& (0+255),b
  2719  001D76  EC50  F01D         	call	_setAngle	;wreg free
  2720                           
  2721                           ;main.c: 191: digitalWrite(cylinderMotor, 1);
  2722  001D7A  0E54               	movlw	low _cylinderMotor
  2723  001D7C  0100               	movlb	0	; () banked
  2724  001D7E  6F8E               	movwf	digitalWrite@pin& (0+255),b
  2725  001D80  0E01               	movlw	high _cylinderMotor
  2726  001D82  0100               	movlb	0	; () banked
  2727  001D84  6F8F               	movwf	(digitalWrite@pin+1)& (0+255),b
  2728  001D86  0E00               	movlw	0
  2729  001D88  0100               	movlb	0	; () banked
  2730  001D8A  6F91               	movwf	(digitalWrite@val+1)& (0+255),b
  2731  001D8C  0E01               	movlw	1
  2732  001D8E  6F90               	movwf	digitalWrite@val& (0+255),b
  2733  001D90  ECF9  F01A         	call	_digitalWrite	;wreg free
  2734  001D94  0012               	return		;funcret
  2735  001D96                     __end_of_sortBattery:
  2736                           	opt stack 0
  2737                           tblptru	equ	0xFF8
  2738                           tblptrh	equ	0xFF7
  2739                           tblptrl	equ	0xFF6
  2740                           tablat	equ	0xFF5
  2741                           postinc0	equ	0xFEE
  2742                           wreg	equ	0xFE8
  2743                           postdec1	equ	0xFE5
  2744                           fsr1l	equ	0xFE1
  2745                           status	equ	0xFD8
  2746                           
  2747 ;; *************** function _pause *****************
  2748 ;; Defined at:
  2749 ;;		line 252 in file "main.c"
  2750 ;; Parameters:    Size  Location     Type
  2751 ;;  message         2   30[BANK1 ] PTR unsigned char 
  2752 ;;		 -> STR_8(25), STR_7(15), STR_6(17), STR_5(20), 
  2753 ;;		 -> STR_3(14), STR_2(20), 
  2754 ;; Auto vars:     Size  Location     Type
  2755 ;;		None
  2756 ;; Return value:  Size  Location     Type
  2757 ;;                  1    wreg      void 
  2758 ;; Registers used:
  2759 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2760 ;; Tracked objects:
  2761 ;;		On entry : 0/0
  2762 ;;		On exit  : 0/0
  2763 ;;		Unchanged: 0/0
  2764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2765 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2768 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2769 ;;Total ram usage:        2 bytes
  2770 ;; Hardware stack levels used:    1
  2771 ;; Hardware stack levels required when called:   11
  2772 ;; This function calls:
  2773 ;;		_lcdClear
  2774 ;;		_printf
  2775 ;;		_readKeypad
  2776 ;; This function is called by:
  2777 ;;		_sortBattery
  2778 ;; This function uses a non-reentrant model
  2779 ;;
  2780                           
  2781                           	psect	text2
  2782  004C3E                     __ptext2:
  2783                           	opt stack 0
  2784  004C3E                     _pause:
  2785                           	opt stack 18
  2786                           
  2787                           ;main.c: 253: lcdClear();
  2788                           
  2789                           ;incstack = 0
  2790  004C3E  EC2E  F026         	call	_lcdClear	;wreg free
  2791                           
  2792                           ;main.c: 254: printf(message);
  2793  004C42  C11E  F0E3         	movff	pause@message,printf@f
  2794  004C46  C11F  F0E4         	movff	pause@message+1,printf@f+1
  2795  004C4A  EC09  F000         	call	_printf	;wreg free
  2796                           
  2797                           ;main.c: 255: readKeypad();
  2798  004C4E  EC9A  F025         	call	_readKeypad	;wreg free
  2799  004C52  0012               	return		;funcret
  2800  004C54                     __end_of_pause:
  2801                           	opt stack 0
  2802                           tblptru	equ	0xFF8
  2803                           tblptrh	equ	0xFF7
  2804                           tblptrl	equ	0xFF6
  2805                           tablat	equ	0xFF5
  2806                           postinc0	equ	0xFEE
  2807                           wreg	equ	0xFE8
  2808                           postdec1	equ	0xFE5
  2809                           fsr1l	equ	0xFE1
  2810                           status	equ	0xFD8
  2811                           
  2812 ;; *************** function _readKeypad *****************
  2813 ;; Defined at:
  2814 ;;		line 36 in file "keypad.c"
  2815 ;; Parameters:    Size  Location     Type
  2816 ;;		None
  2817 ;; Auto vars:     Size  Location     Type
  2818 ;;  key             1   14[BANK0 ] unsigned char 
  2819 ;; Return value:  Size  Location     Type
  2820 ;;                  1    wreg      unsigned char 
  2821 ;; Registers used:
  2822 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2823 ;; Tracked objects:
  2824 ;;		On entry : 0/0
  2825 ;;		On exit  : 0/0
  2826 ;;		Unchanged: 0/0
  2827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2829 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2831 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2832 ;;Total ram usage:        1 bytes
  2833 ;; Hardware stack levels used:    1
  2834 ;; Hardware stack levels required when called:    6
  2835 ;; This function calls:
  2836 ;;		Nothing
  2837 ;; This function is called by:
  2838 ;;		_sortBattery
  2839 ;;		_pause
  2840 ;;		_showInterface
  2841 ;; This function uses a non-reentrant model
  2842 ;;
  2843                           
  2844                           	psect	text3
  2845  004B34                     __ptext3:
  2846                           	opt stack 0
  2847  004B34                     _readKeypad:
  2848                           	opt stack 23
  2849  004B34                     l206:
  2850  004B34  A281               	btfss	3969,1,c	;volatile
  2851  004B36  D7FE               	goto	l206
  2852                           
  2853                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  2854  004B38  3881               	swapf	3969,w,c	;volatile
  2855  004B3A  0B0F               	andlw	15
  2856  004B3C  0B0F               	andlw	15
  2857  004B3E  0100               	movlb	0	; () banked
  2858  004B40  6F8E               	movwf	readKeypad@key& (0+255),b
  2859  004B42                     l209:
  2860  004B42  B281               	btfsc	3969,1,c	;volatile
  2861  004B44  D7FE               	goto	l209
  2862                           
  2863                           ;keypad.c: 40: return keys[key];
  2864  004B46  0100               	movlb	0	; () banked
  2865  004B48  518E               	movf	readKeypad@key& (0+255),w,b
  2866  004B4A  0D01               	mullw	1
  2867  004B4C  0E59               	movlw	low _keys
  2868  004B4E  24F3               	addwf	prodl,w,c
  2869  004B50  6EF6               	movwf	tblptrl,c
  2870  004B52  0EFE               	movlw	high _keys
  2871  004B54  20F4               	addwfc	prodh,w,c
  2872  004B56  6EF7               	movwf	tblptrh,c
  2873  004B58                     	if	0	;There are less than 3 active tblptr bytes
  2874  004B58                     	endif
  2875  004B58  0008               	tblrd		*
  2876  004B5A  50F5               	movf	tablat,w,c
  2877  004B5C  0012               	return	
  2878  004B5E                     __end_of_readKeypad:
  2879                           	opt stack 0
  2880                           tblptru	equ	0xFF8
  2881                           tblptrh	equ	0xFF7
  2882                           tblptrl	equ	0xFF6
  2883                           tablat	equ	0xFF5
  2884                           prodh	equ	0xFF4
  2885                           prodl	equ	0xFF3
  2886                           postinc0	equ	0xFEE
  2887                           wreg	equ	0xFE8
  2888                           postdec1	equ	0xFE5
  2889                           fsr1l	equ	0xFE1
  2890                           status	equ	0xFD8
  2891                           
  2892 ;; *************** function _printf *****************
  2893 ;; Defined at:
  2894 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2895 ;; Parameters:    Size  Location     Type
  2896 ;;  f               2   99[BANK0 ] PTR const unsigned char 
  2897 ;;		 -> STR_23(17), STR_22(18), STR_21(17), STR_20(18), 
  2898 ;;		 -> STR_19(17), STR_18(19), STR_17(17), STR_16(18), 
  2899 ;;		 -> STR_15(17), STR_14(18), STR_13(17), STR_12(18), 
  2900 ;;		 -> STR_11(9), STR_10(8), STR_9(10), STR_8(25), 
  2901 ;;		 -> STR_7(15), STR_6(17), STR_5(20), STR_4(24), 
  2902 ;;		 -> STR_3(14), STR_2(20), STR_1(8), 
  2903 ;; Auto vars:     Size  Location     Type
  2904 ;;  idx             1    9[BANK1 ] unsigned char 
  2905 ;;  val             4   22[BANK1 ] unsigned long 
  2906 ;;  tmpval          4   18[BANK1 ] struct .
  2907 ;;  fval            3   26[BANK1 ] struct .
  2908 ;;  cp              3    0        PTR const unsigned char 
  2909 ;;  exp             2   16[BANK1 ] int 
  2910 ;;  prec            2   14[BANK1 ] int 
  2911 ;;  flag            2   12[BANK1 ] unsigned short 
  2912 ;;  ap              2   10[BANK1 ] PTR void [1]
  2913 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2914 ;;  len             2    0        unsigned int 
  2915 ;;  width           2    0        int 
  2916 ;;  c               1   29[BANK1 ] char 
  2917 ;;  d               1    0        unsigned char 
  2918 ;; Return value:  Size  Location     Type
  2919 ;;                  2   99[BANK0 ] int 
  2920 ;; Registers used:
  2921 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2922 ;; Tracked objects:
  2923 ;;		On entry : 0/0
  2924 ;;		On exit  : 0/0
  2925 ;;		Unchanged: 0/0
  2926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2927 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2928 ;;      Locals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2929 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2930 ;;      Totals:         0       7      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2931 ;;Total ram usage:       37 bytes
  2932 ;; Hardware stack levels used:    1
  2933 ;; Hardware stack levels required when called:   10
  2934 ;; This function calls:
  2935 ;;		___awdiv
  2936 ;;		___ftadd
  2937 ;;		___ftge
  2938 ;;		___ftmul
  2939 ;;		___ftneg
  2940 ;;		___ftsub
  2941 ;;		___fttol
  2942 ;;		___lldiv
  2943 ;;		___llmod
  2944 ;;		___lltoft
  2945 ;;		___wmul
  2946 ;;		__div_to_l_
  2947 ;;		__tdiv_to_l_
  2948 ;;		_fround
  2949 ;;		_putch
  2950 ;;		_scale
  2951 ;; This function is called by:
  2952 ;;		_main
  2953 ;;		_sortBattery
  2954 ;;		_pause
  2955 ;;		_testFrequency
  2956 ;;		_dateTime
  2957 ;;		_mainMenu
  2958 ;;		_runSelect
  2959 ;;		_runMenu
  2960 ;;		_runTime
  2961 ;;		_runStats
  2962 ;; This function uses a non-reentrant model
  2963 ;;
  2964                           
  2965                           	psect	text4
  2966  000012                     __ptext4:
  2967                           	opt stack 0
  2968  000012                     _printf:
  2969                           	opt stack 19
  2970                           
  2971                           ;doprnt.c: 466: va_list ap;
  2972                           ;doprnt.c: 499: signed char c;
  2973                           ;doprnt.c: 501: int width;
  2974                           ;doprnt.c: 504: int prec;
  2975                           ;doprnt.c: 508: unsigned short flag;
  2976                           ;doprnt.c: 515: char d;
  2977                           ;doprnt.c: 516: double fval;
  2978                           ;doprnt.c: 517: int exp;
  2979                           ;doprnt.c: 523: union {
  2980                           ;doprnt.c: 524: unsigned long vd;
  2981                           ;doprnt.c: 525: double integ;
  2982                           ;doprnt.c: 526: } tmpval;
  2983                           ;doprnt.c: 528: unsigned long val;
  2984                           ;doprnt.c: 529: unsigned len;
  2985                           ;doprnt.c: 530: const char * cp;
  2986                           ;doprnt.c: 533: *ap = __va_start();
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;incstack = 0
  2990  000012  0EE5               	movlw	low (?_printf+2)
  2991  000014  0101               	movlb	1	; () banked
  2992  000016  6F0A               	movwf	printf@ap& (0+255),b
  2993  000018  0E00               	movlw	high (?_printf+2)
  2994  00001A  0101               	movlb	1	; () banked
  2995  00001C  6F0B               	movwf	(printf@ap+1)& (0+255),b
  2996                           
  2997                           ;doprnt.c: 536: while(c = *f++) {
  2998  00001E  EFA2  F004         	goto	l6724
  2999  000022                     l6506:
  3000                           
  3001                           ; BSR set to: 1
  3002                           ;doprnt.c: 538: if(c != '%')
  3003  000022  0E25               	movlw	37
  3004  000024  0101               	movlb	1	; () banked
  3005  000026  191D               	xorwf	printf@c& (0+255),w,b
  3006  000028  B4D8               	btfsc	status,2,c
  3007  00002A  D006               	goto	l6510
  3008                           
  3009                           ; BSR set to: 1
  3010                           ;doprnt.c: 540: {
  3011                           ;doprnt.c: 541: (putch(c) );
  3012  00002C  0101               	movlb	1	; () banked
  3013  00002E  511D               	movf	printf@c& (0+255),w,b
  3014  000030  ECC4  F025         	call	_putch
  3015                           
  3016                           ;doprnt.c: 542: continue;
  3017  000034  EFA2  F004         	goto	l6724
  3018  000038                     l6510:
  3019                           
  3020                           ;doprnt.c: 543: }
  3021                           ;doprnt.c: 548: flag = 0;
  3022  000038  0E00               	movlw	0
  3023  00003A  0101               	movlb	1	; () banked
  3024  00003C  6F0D               	movwf	(printf@flag+1)& (0+255),b
  3025  00003E  0E00               	movlw	0
  3026  000040  6F0C               	movwf	printf@flag& (0+255),b
  3027                           
  3028                           ;doprnt.c: 635: switch(c = *f++) {
  3029  000042  D018               	goto	l6524
  3030  000044                     l6512:
  3031                           
  3032                           ; BSR set to: 1
  3033                           ;doprnt.c: 663: flag |= 0x400;
  3034  000044  0101               	movlb	1	; () banked
  3035  000046  850D               	bsf	(printf@flag+1)& (0+255),2,b
  3036                           
  3037                           ; BSR set to: 1
  3038                           ;doprnt.c: 698: case 'i':
  3039                           ;doprnt.c: 699: break;
  3040                           
  3041                           ; BSR set to: 1
  3042                           
  3043                           ;doprnt.c: 697: case 'd':
  3044                           
  3045                           ;doprnt.c: 664: break;
  3046  000048  D034               	goto	l6526
  3047  00004A                     l6514:
  3048                           
  3049                           ; BSR set to: 1
  3050                           ;doprnt.c: 721: flag |= 0x80;
  3051  00004A  0101               	movlb	1	; () banked
  3052  00004C  8F0C               	bsf	printf@flag& (0+255),7,b
  3053                           
  3054                           ;doprnt.c: 723: break;
  3055  00004E  D031               	goto	l6526
  3056  000050                     l6516:
  3057                           
  3058                           ; BSR set to: 1
  3059                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3060  000050  C10A  FFD9         	movff	printf@ap,fsr2l
  3061  000054  C10B  FFDA         	movff	printf@ap+1,fsr2h
  3062  000058  50DF               	movf	indf2,w,c
  3063  00005A  0101               	movlb	1	; () banked
  3064  00005C  6F1D               	movwf	printf@c& (0+255),b
  3065                           
  3066                           ; BSR set to: 1
  3067  00005E  0E02               	movlw	2
  3068  000060  0101               	movlb	1	; () banked
  3069  000062  270A               	addwf	printf@ap& (0+255),f,b
  3070  000064  0E00               	movlw	0
  3071  000066  230B               	addwfc	(printf@ap+1)& (0+255),f,b
  3072  000068                     l6520:
  3073                           
  3074                           ; BSR set to: 1
  3075                           ;doprnt.c: 809: (putch(c) );
  3076  000068  0101               	movlb	1	; () banked
  3077  00006A  511D               	movf	printf@c& (0+255),w,b
  3078  00006C  ECC4  F025         	call	_putch
  3079                           
  3080                           ;doprnt.c: 810: continue;
  3081  000070  EFA2  F004         	goto	l6724
  3082  000074                     l6524:
  3083  000074  C0E3  FFF6         	movff	printf@f,tblptrl
  3084  000078  C0E4  FFF7         	movff	printf@f+1,tblptrh
  3085  00007C  0100               	movlb	0	; () banked
  3086  00007E  4BE3               	infsnz	printf@f& (0+255),f,b
  3087  000080  2BE4               	incf	(printf@f+1)& (0+255),f,b
  3088  000082                     	if	0	;tblptru may be non-zero
  3089  000082                     	endif
  3090  000082                     	if	0	;tblptru may be non-zero
  3091  000082                     	endif
  3092  000082  0008               	tblrd		*
  3093  000084  CFF5 F11D          	movff	tablat,printf@c
  3094  000088  0101               	movlb	1	; () banked
  3095  00008A  511D               	movf	printf@c& (0+255),w,b
  3096                           
  3097                           ; Switch size 1, requested type "space"
  3098                           ; Number of cases is 6, Range of values is 0 to 120
  3099                           ; switch strategies available:
  3100                           ; Name         Instructions Cycles
  3101                           ; simple_byte           19    10 (average)
  3102                           ;	Chosen strategy is simple_byte
  3103  00008C  0A00               	xorlw	0	; case 0
  3104  00008E  B4D8               	btfsc	status,2,c
  3105  000090  0012               	return	
  3106  000092  0A63               	xorlw	99	; case 99
  3107  000094  B4D8               	btfsc	status,2,c
  3108  000096  D7DC               	goto	l6516
  3109  000098  0A07               	xorlw	7	; case 100
  3110  00009A  B4D8               	btfsc	status,2,c
  3111  00009C  D00A               	goto	l6526
  3112  00009E  0A02               	xorlw	2	; case 102
  3113  0000A0  B4D8               	btfsc	status,2,c
  3114  0000A2  D7D0               	goto	l6512
  3115  0000A4  0A0F               	xorlw	15	; case 105
  3116  0000A6  B4D8               	btfsc	status,2,c
  3117  0000A8  D004               	goto	l6526
  3118  0000AA  0A11               	xorlw	17	; case 120
  3119  0000AC  B4D8               	btfsc	status,2,c
  3120  0000AE  D7CD               	goto	l6514
  3121  0000B0  D7DB               	goto	l6520
  3122  0000B2                     l6526:
  3123                           
  3124                           ;doprnt.c: 825: if(flag & (0x700)) {
  3125  0000B2  0E07               	movlw	7
  3126  0000B4  0101               	movlb	1	; () banked
  3127  0000B6  150D               	andwf	(printf@flag+1)& (0+255),w,b
  3128  0000B8  B4D8               	btfsc	status,2,c
  3129  0000BA  D304               	goto	l659
  3130                           
  3131                           ; BSR set to: 1
  3132                           ;doprnt.c: 829: prec = 6;
  3133  0000BC  0E00               	movlw	0
  3134  0000BE  0101               	movlb	1	; () banked
  3135  0000C0  6F0F               	movwf	(printf@prec+1)& (0+255),b
  3136  0000C2  0E06               	movlw	6
  3137  0000C4  6F0E               	movwf	printf@prec& (0+255),b
  3138                           
  3139                           ; BSR set to: 1
  3140                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3141  0000C6  C10A  FFD9         	movff	printf@ap,fsr2l
  3142  0000CA  C10B  FFDA         	movff	printf@ap+1,fsr2h
  3143  0000CE  CFDE F11A          	movff	postinc2,printf@fval
  3144  0000D2  CFDE F11B          	movff	postinc2,printf@fval+1
  3145  0000D6  CFDD F11C          	movff	postdec2,printf@fval+2
  3146                           
  3147                           ; BSR set to: 1
  3148  0000DA  0E03               	movlw	3
  3149  0000DC  0101               	movlb	1	; () banked
  3150  0000DE  270A               	addwf	printf@ap& (0+255),f,b
  3151  0000E0  0E00               	movlw	0
  3152  0000E2  230B               	addwfc	(printf@ap+1)& (0+255),f,b
  3153                           
  3154                           ; BSR set to: 1
  3155                           ;doprnt.c: 831: if(fval < 0.0) {
  3156  0000E4  0101               	movlb	1	; () banked
  3157  0000E6  AF1C               	btfss	(printf@fval+2)& (0+255),7,b
  3158  0000E8  D011               	goto	l6540
  3159                           
  3160                           ; BSR set to: 1
  3161                           ;doprnt.c: 832: fval = -fval;
  3162  0000EA  C11A  F08E         	movff	printf@fval,___ftneg@f1
  3163  0000EE  C11B  F08F         	movff	printf@fval+1,___ftneg@f1+1
  3164  0000F2  C11C  F090         	movff	printf@fval+2,___ftneg@f1+2
  3165  0000F6  EC6B  F025         	call	___ftneg	;wreg free
  3166  0000FA  C08E  F11A         	movff	?___ftneg,printf@fval
  3167  0000FE  C08F  F11B         	movff	?___ftneg+1,printf@fval+1
  3168  000102  C090  F11C         	movff	?___ftneg+2,printf@fval+2
  3169                           
  3170                           ;doprnt.c: 833: flag |= 0x03;
  3171  000106  0E03               	movlw	3
  3172  000108  0101               	movlb	1	; () banked
  3173  00010A  130C               	iorwf	printf@flag& (0+255),f,b
  3174  00010C                     l6540:
  3175                           
  3176                           ; BSR set to: 1
  3177                           ;doprnt.c: 834: }
  3178                           ;doprnt.c: 835: exp = 0;
  3179  00010C  0E00               	movlw	0
  3180  00010E  0101               	movlb	1	; () banked
  3181  000110  6F11               	movwf	(printf@exp+1)& (0+255),b
  3182  000112  0E00               	movlw	0
  3183  000114  6F10               	movwf	printf@exp& (0+255),b
  3184                           
  3185                           ; BSR set to: 1
  3186                           ;doprnt.c: 836: if( fval!=0) {
  3187  000116  0101               	movlb	1	; () banked
  3188  000118  511A               	movf	printf@fval& (0+255),w,b
  3189  00011A  0101               	movlb	1	; () banked
  3190  00011C  111B               	iorwf	(printf@fval+1)& (0+255),w,b
  3191  00011E  0101               	movlb	1	; () banked
  3192  000120  111C               	iorwf	(printf@fval+2)& (0+255),w,b
  3193  000122  B4D8               	btfsc	status,2,c
  3194  000124  D09B               	goto	l6568
  3195                           
  3196                           ; BSR set to: 1
  3197                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3198  000126  0E82               	movlw	130
  3199  000128  0101               	movlb	1	; () banked
  3200  00012A  6F00               	movwf	??_printf& (0+255),b
  3201  00012C  0EFF               	movlw	255
  3202  00012E  0101               	movlb	1	; () banked
  3203  000130  6F01               	movwf	(??_printf+1)& (0+255),b
  3204  000132  C11A  F102         	movff	printf@fval,??_printf+2
  3205  000136  C11B  F103         	movff	printf@fval+1,??_printf+3
  3206  00013A  C11C  F104         	movff	printf@fval+2,??_printf+4
  3207  00013E  C11D  F105         	movff	printf@fval+3,??_printf+5
  3208  000142  0E10               	movlw	16
  3209  000144  D006               	goto	u6820
  3210  000146                     u6825:
  3211  000146  0101               	movlb	1	; () banked
  3212  000148  90D8               	bcf	status,0,c
  3213  00014A  3305               	rrcf	(??_printf+5)& (0+255),f,b
  3214  00014C  3304               	rrcf	(??_printf+4)& (0+255),f,b
  3215  00014E  3303               	rrcf	(??_printf+3)& (0+255),f,b
  3216  000150  3302               	rrcf	(??_printf+2)& (0+255),f,b
  3217  000152                     u6820:
  3218  000152  2EE8               	decfsz	wreg,f,c
  3219  000154  D7F8               	goto	u6825
  3220  000156  0101               	movlb	1	; () banked
  3221  000158  5102               	movf	(??_printf+2)& (0+255),w,b
  3222  00015A  0101               	movlb	1	; () banked
  3223  00015C  2500               	addwf	??_printf& (0+255),w,b
  3224  00015E  0101               	movlb	1	; () banked
  3225  000160  6F10               	movwf	printf@exp& (0+255),b
  3226  000162  0E00               	movlw	0
  3227  000164  0101               	movlb	1	; () banked
  3228  000166  2101               	addwfc	(??_printf+1)& (0+255),w,b
  3229  000168  0101               	movlb	1	; () banked
  3230  00016A  6F11               	movwf	(printf@exp+1)& (0+255),b
  3231                           
  3232                           ; BSR set to: 1
  3233                           ;doprnt.c: 838: exp--;
  3234  00016C  0101               	movlb	1	; () banked
  3235  00016E  0710               	decf	printf@exp& (0+255),f,b
  3236  000170  A0D8               	btfss	status,0,c
  3237  000172  0711               	decf	(printf@exp+1)& (0+255),f,b
  3238                           
  3239                           ; BSR set to: 1
  3240                           ;doprnt.c: 839: exp *= 3;
  3241  000174  C110  F09C         	movff	printf@exp,___wmul@multiplier
  3242  000178  C111  F09D         	movff	printf@exp+1,___wmul@multiplier+1
  3243  00017C  0E00               	movlw	0
  3244  00017E  0100               	movlb	0	; () banked
  3245  000180  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3246  000182  0E03               	movlw	3
  3247  000184  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  3248  000186  EC50  F025         	call	___wmul	;wreg free
  3249  00018A  C09C  F110         	movff	?___wmul,printf@exp
  3250  00018E  C09D  F111         	movff	?___wmul+1,printf@exp+1
  3251                           
  3252                           ;doprnt.c: 840: exp /= 10;
  3253  000192  C110  F094         	movff	printf@exp,___awdiv@dividend
  3254  000196  C111  F095         	movff	printf@exp+1,___awdiv@dividend+1
  3255  00019A  0E00               	movlw	0
  3256  00019C  0100               	movlb	0	; () banked
  3257  00019E  6F97               	movwf	(___awdiv@divisor+1)& (0+255),b
  3258  0001A0  0E0A               	movlw	10
  3259  0001A2  6F96               	movwf	___awdiv@divisor& (0+255),b
  3260  0001A4  EC82  F01E         	call	___awdiv	;wreg free
  3261  0001A8  C094  F110         	movff	?___awdiv,printf@exp
  3262  0001AC  C095  F111         	movff	?___awdiv+1,printf@exp+1
  3263                           
  3264                           ;doprnt.c: 841: if(exp < 0)
  3265  0001B0  0101               	movlb	1	; () banked
  3266  0001B2  AF11               	btfss	(printf@exp+1)& (0+255),7,b
  3267  0001B4  D004               	goto	l6556
  3268                           
  3269                           ; BSR set to: 1
  3270                           ;doprnt.c: 842: exp--;
  3271  0001B6  0101               	movlb	1	; () banked
  3272  0001B8  0710               	decf	printf@exp& (0+255),f,b
  3273  0001BA  A0D8               	btfss	status,0,c
  3274  0001BC  0711               	decf	(printf@exp+1)& (0+255),f,b
  3275  0001BE                     l6556:
  3276                           
  3277                           ; BSR set to: 1
  3278                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3279  0001BE  0101               	movlb	1	; () banked
  3280  0001C0  5110               	movf	printf@exp& (0+255),w,b
  3281  0001C2  0800               	sublw	0
  3282  0001C4  ECAE  F008         	call	_scale
  3283  0001C8  C0BE  F112         	movff	?_scale,printf@tmpval
  3284  0001CC  C0BF  F113         	movff	?_scale+1,printf@tmpval+1
  3285  0001D0  C0C0  F114         	movff	?_scale+2,printf@tmpval+2
  3286                           
  3287                           ;doprnt.c: 847: tmpval.integ *= fval;
  3288  0001D4  C112  F0AF         	movff	printf@tmpval,___ftmul@f1
  3289  0001D8  C113  F0B0         	movff	printf@tmpval+1,___ftmul@f1+1
  3290  0001DC  C114  F0B1         	movff	printf@tmpval+2,___ftmul@f1+2
  3291  0001E0  C11A  F0B2         	movff	printf@fval,___ftmul@f2
  3292  0001E4  C11B  F0B3         	movff	printf@fval+1,___ftmul@f2+1
  3293  0001E8  C11C  F0B4         	movff	printf@fval+2,___ftmul@f2+2
  3294  0001EC  EC94  F015         	call	___ftmul	;wreg free
  3295  0001F0  C0AF  F112         	movff	?___ftmul,printf@tmpval
  3296  0001F4  C0B0  F113         	movff	?___ftmul+1,printf@tmpval+1
  3297  0001F8  C0B1  F114         	movff	?___ftmul+2,printf@tmpval+2
  3298                           
  3299                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3300  0001FC  C112  F08E         	movff	printf@tmpval,___ftge@ff1
  3301  000200  C113  F08F         	movff	printf@tmpval+1,___ftge@ff1+1
  3302  000204  C114  F090         	movff	printf@tmpval+2,___ftge@ff1+2
  3303  000208  0E00               	movlw	0
  3304  00020A  0100               	movlb	0	; () banked
  3305  00020C  6F91               	movwf	___ftge@ff2& (0+255),b
  3306  00020E  0E80               	movlw	128
  3307  000210  0100               	movlb	0	; () banked
  3308  000212  6F92               	movwf	(___ftge@ff2+1)& (0+255),b
  3309  000214  0E3F               	movlw	63
  3310  000216  0100               	movlb	0	; () banked
  3311  000218  6F93               	movwf	(___ftge@ff2+2)& (0+255),b
  3312  00021A  ECBA  F01D         	call	___ftge	;wreg free
  3313  00021E  0100               	movlb	0	; () banked
  3314  000220  B0D8               	btfsc	status,0,c
  3315  000222  D005               	goto	l6564
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;doprnt.c: 849: exp--;
  3319  000224  0101               	movlb	1	; () banked
  3320  000226  0710               	decf	printf@exp& (0+255),f,b
  3321  000228  A0D8               	btfss	status,0,c
  3322  00022A  0711               	decf	(printf@exp+1)& (0+255),f,b
  3323  00022C  D017               	goto	l6568
  3324  00022E                     l6564:
  3325                           
  3326                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3327  00022E  C112  F08E         	movff	printf@tmpval,___ftge@ff1
  3328  000232  C113  F08F         	movff	printf@tmpval+1,___ftge@ff1+1
  3329  000236  C114  F090         	movff	printf@tmpval+2,___ftge@ff1+2
  3330  00023A  0E00               	movlw	0
  3331  00023C  0100               	movlb	0	; () banked
  3332  00023E  6F91               	movwf	___ftge@ff2& (0+255),b
  3333  000240  0E20               	movlw	32
  3334  000242  0100               	movlb	0	; () banked
  3335  000244  6F92               	movwf	(___ftge@ff2+1)& (0+255),b
  3336  000246  0E41               	movlw	65
  3337  000248  0100               	movlb	0	; () banked
  3338  00024A  6F93               	movwf	(___ftge@ff2+2)& (0+255),b
  3339  00024C  ECBA  F01D         	call	___ftge	;wreg free
  3340  000250  0100               	movlb	0	; () banked
  3341  000252  A0D8               	btfss	status,0,c
  3342  000254  D003               	goto	l6568
  3343                           
  3344                           ; BSR set to: 0
  3345                           ;doprnt.c: 851: exp++;
  3346  000256  0101               	movlb	1	; () banked
  3347  000258  4B10               	infsnz	printf@exp& (0+255),f,b
  3348  00025A  2B11               	incf	(printf@exp+1)& (0+255),f,b
  3349  00025C                     l6568:
  3350                           
  3351                           ;doprnt.c: 852: }
  3352                           ;doprnt.c: 1112: if(prec <= 12)
  3353  00025C  0101               	movlb	1	; () banked
  3354  00025E  BF0F               	btfsc	(printf@prec+1)& (0+255),7,b
  3355  000260  D008               	goto	l6570
  3356  000262  0101               	movlb	1	; () banked
  3357  000264  510F               	movf	(printf@prec+1)& (0+255),w,b
  3358  000266  E11D               	bnz	l6572
  3359  000268  0E0D               	movlw	13
  3360  00026A  0101               	movlb	1	; () banked
  3361  00026C  5D0E               	subwf	printf@prec& (0+255),w,b
  3362  00026E  B0D8               	btfsc	status,0,c
  3363  000270  D018               	goto	l6572
  3364  000272                     l6570:
  3365                           
  3366                           ; BSR set to: 1
  3367                           ;doprnt.c: 1113: fval += fround(prec);
  3368  000272  C11A  F0C8         	movff	printf@fval,___ftadd@f1
  3369  000276  C11B  F0C9         	movff	printf@fval+1,___ftadd@f1+1
  3370  00027A  C11C  F0CA         	movff	printf@fval+2,___ftadd@f1+2
  3371  00027E  0101               	movlb	1	; () banked
  3372  000280  510E               	movf	printf@prec& (0+255),w,b
  3373  000282  ECCB  F00E         	call	_fround
  3374  000286  C0BE  F0CB         	movff	?_fround,___ftadd@f2
  3375  00028A  C0BF  F0CC         	movff	?_fround+1,___ftadd@f2+1
  3376  00028E  C0C0  F0CD         	movff	?_fround+2,___ftadd@f2+2
  3377  000292  EC21  F010         	call	___ftadd	;wreg free
  3378  000296  C0C8  F11A         	movff	?___ftadd,printf@fval
  3379  00029A  C0C9  F11B         	movff	?___ftadd+1,printf@fval+1
  3380  00029E  C0CA  F11C         	movff	?___ftadd+2,printf@fval+2
  3381  0002A2                     l6572:
  3382                           
  3383                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3384  0002A2  0101               	movlb	1	; () banked
  3385  0002A4  BF11               	btfsc	(printf@exp+1)& (0+255),7,b
  3386  0002A6  D008               	goto	l6574
  3387  0002A8  0101               	movlb	1	; () banked
  3388  0002AA  5111               	movf	(printf@exp+1)& (0+255),w,b
  3389  0002AC  E12A               	bnz	l6580
  3390  0002AE  0E0A               	movlw	10
  3391  0002B0  0101               	movlb	1	; () banked
  3392  0002B2  5D10               	subwf	printf@exp& (0+255),w,b
  3393  0002B4  B0D8               	btfsc	status,0,c
  3394  0002B6  D025               	goto	l6580
  3395  0002B8                     l6574:
  3396                           
  3397                           ; BSR set to: 1
  3398  0002B8  0101               	movlb	1	; () banked
  3399  0002BA  511A               	movf	printf@fval& (0+255),w,b
  3400  0002BC  0101               	movlb	1	; () banked
  3401  0002BE  111B               	iorwf	(printf@fval+1)& (0+255),w,b
  3402  0002C0  0101               	movlb	1	; () banked
  3403  0002C2  111C               	iorwf	(printf@fval+2)& (0+255),w,b
  3404  0002C4  B4D8               	btfsc	status,2,c
  3405  0002C6  D063               	goto	l6594
  3406                           
  3407                           ; BSR set to: 1
  3408  0002C8  C11A  F0D4         	movff	printf@fval,___fttol@f1
  3409  0002CC  C11B  F0D5         	movff	printf@fval+1,___fttol@f1+1
  3410  0002D0  C11C  F0D6         	movff	printf@fval+2,___fttol@f1+2
  3411  0002D4  ECE9  F016         	call	___fttol	;wreg free
  3412  0002D8  0100               	movlb	0	; () banked
  3413  0002DA  51D4               	movf	?___fttol& (0+255),w,b
  3414  0002DC  0100               	movlb	0	; () banked
  3415  0002DE  11D5               	iorwf	(?___fttol+1)& (0+255),w,b
  3416  0002E0  0100               	movlb	0	; () banked
  3417  0002E2  11D6               	iorwf	(?___fttol+2)& (0+255),w,b
  3418  0002E4  0100               	movlb	0	; () banked
  3419  0002E6  11D7               	iorwf	(?___fttol+3)& (0+255),w,b
  3420  0002E8  A4D8               	btfss	status,2,c
  3421  0002EA  D051               	goto	l6594
  3422                           
  3423                           ; BSR set to: 0
  3424  0002EC  0101               	movlb	1	; () banked
  3425  0002EE  BF11               	btfsc	(printf@exp+1)& (0+255),7,b
  3426  0002F0  D04E               	goto	l6594
  3427  0002F2  0101               	movlb	1	; () banked
  3428  0002F4  5111               	movf	(printf@exp+1)& (0+255),w,b
  3429  0002F6  E105               	bnz	l6580
  3430  0002F8  0E02               	movlw	2
  3431  0002FA  0101               	movlb	1	; () banked
  3432  0002FC  5D10               	subwf	printf@exp& (0+255),w,b
  3433  0002FE  A0D8               	btfss	status,0,c
  3434  000300  D046               	goto	l6594
  3435  000302                     l6580:
  3436                           
  3437                           ; BSR set to: 1
  3438                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3439  000302  C112  F08E         	movff	printf@tmpval,___ftge@ff1
  3440  000306  C113  F08F         	movff	printf@tmpval+1,___ftge@ff1+1
  3441  00030A  C114  F090         	movff	printf@tmpval+2,___ftge@ff1+2
  3442  00030E  0E70               	movlw	112
  3443  000310  0100               	movlb	0	; () banked
  3444  000312  6F91               	movwf	___ftge@ff2& (0+255),b
  3445  000314  0E89               	movlw	137
  3446  000316  0100               	movlb	0	; () banked
  3447  000318  6F92               	movwf	(___ftge@ff2+1)& (0+255),b
  3448  00031A  0E40               	movlw	64
  3449  00031C  0100               	movlb	0	; () banked
  3450  00031E  6F93               	movwf	(___ftge@ff2+2)& (0+255),b
  3451  000320  ECBA  F01D         	call	___ftge	;wreg free
  3452  000324  0100               	movlb	0	; () banked
  3453  000326  B0D8               	btfsc	status,0,c
  3454  000328  D003               	goto	l6584
  3455                           
  3456                           ; BSR set to: 0
  3457                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3458  00032A  0101               	movlb	1	; () banked
  3459  00032C  0EF7               	movlw	247
  3460  00032E  D002               	goto	L1
  3461  000330                     l6584:
  3462                           
  3463                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3464  000330  0101               	movlb	1	; () banked
  3465  000332  0EF8               	movlw	248
  3466  000334                     L1:
  3467  000334  2710               	addwf	printf@exp& (0+255),f,b
  3468  000336  0EFF               	movlw	255
  3469  000338  2311               	addwfc	(printf@exp+1)& (0+255),f,b
  3470                           
  3471                           ; BSR set to: 1
  3472                           ;doprnt.c: 1124: }
  3473                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3474                           
  3475                           ; BSR set to: 1
  3476  00033A  0101               	movlb	1	; () banked
  3477  00033C  5110               	movf	printf@exp& (0+255),w,b
  3478  00033E  ECAE  F008         	call	_scale
  3479  000342  C0BE  F112         	movff	?_scale,printf@tmpval
  3480  000346  C0BF  F113         	movff	?_scale+1,printf@tmpval+1
  3481  00034A  C0C0  F114         	movff	?_scale+2,printf@tmpval+2
  3482                           
  3483                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3484  00034E  C11A  F08E         	movff	printf@fval,__tdiv_to_l_@f1
  3485  000352  C11B  F08F         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  3486  000356  C11C  F090         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  3487  00035A  C112  F091         	movff	printf@tmpval,__tdiv_to_l_@f2
  3488  00035E  C113  F092         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  3489  000362  C114  F093         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  3490  000366  EC4E  F013         	call	__tdiv_to_l_	;wreg free
  3491  00036A  C08E  F116         	movff	?__tdiv_to_l_,printf@val
  3492  00036E  C08F  F117         	movff	?__tdiv_to_l_+1,printf@val+1
  3493  000372  C090  F118         	movff	?__tdiv_to_l_+2,printf@val+2
  3494  000376  C091  F119         	movff	?__tdiv_to_l_+3,printf@val+3
  3495                           
  3496                           ;doprnt.c: 1129: fval = 0.0;
  3497  00037A  0E00               	movlw	0
  3498  00037C  0101               	movlb	1	; () banked
  3499  00037E  6F1A               	movwf	printf@fval& (0+255),b
  3500  000380  0E00               	movlw	0
  3501  000382  0101               	movlb	1	; () banked
  3502  000384  6F1B               	movwf	(printf@fval+1)& (0+255),b
  3503  000386  0E00               	movlw	0
  3504  000388  0101               	movlb	1	; () banked
  3505  00038A  6F1C               	movwf	(printf@fval+2)& (0+255),b
  3506                           
  3507                           ;doprnt.c: 1130: } else {
  3508  00038C  D033               	goto	l6598
  3509  00038E                     l6594:
  3510                           
  3511                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3512  00038E  C11A  F0D4         	movff	printf@fval,___fttol@f1
  3513  000392  C11B  F0D5         	movff	printf@fval+1,___fttol@f1+1
  3514  000396  C11C  F0D6         	movff	printf@fval+2,___fttol@f1+2
  3515  00039A  ECE9  F016         	call	___fttol	;wreg free
  3516  00039E  C0D4  F116         	movff	?___fttol,printf@val
  3517  0003A2  C0D5  F117         	movff	?___fttol+1,printf@val+1
  3518  0003A6  C0D6  F118         	movff	?___fttol+2,printf@val+2
  3519  0003AA  C0D7  F119         	movff	?___fttol+3,printf@val+3
  3520                           
  3521                           ;doprnt.c: 1132: fval -= (double)val;
  3522  0003AE  C11A  F0D4         	movff	printf@fval,___ftsub@f1
  3523  0003B2  C11B  F0D5         	movff	printf@fval+1,___ftsub@f1+1
  3524  0003B6  C11C  F0D6         	movff	printf@fval+2,___ftsub@f1+2
  3525  0003BA  C116  F096         	movff	printf@val,___lltoft@c
  3526  0003BE  C117  F097         	movff	printf@val+1,___lltoft@c+1
  3527  0003C2  C118  F098         	movff	printf@val+2,___lltoft@c+2
  3528  0003C6  C119  F099         	movff	printf@val+3,___lltoft@c+3
  3529  0003CA  EC39  F022         	call	___lltoft	;wreg free
  3530  0003CE  C096  F0D7         	movff	?___lltoft,___ftsub@f2
  3531  0003D2  C097  F0D8         	movff	?___lltoft+1,___ftsub@f2+1
  3532  0003D6  C098  F0D9         	movff	?___lltoft+2,___ftsub@f2+2
  3533  0003DA  EC1C  F024         	call	___ftsub	;wreg free
  3534  0003DE  C0D4  F11A         	movff	?___ftsub,printf@fval
  3535  0003E2  C0D5  F11B         	movff	?___ftsub+1,printf@fval+1
  3536  0003E6  C0D6  F11C         	movff	?___ftsub+2,printf@fval+2
  3537                           
  3538                           ;doprnt.c: 1133: exp = 0;
  3539  0003EA  0E00               	movlw	0
  3540  0003EC  0101               	movlb	1	; () banked
  3541  0003EE  6F11               	movwf	(printf@exp+1)& (0+255),b
  3542  0003F0  0E00               	movlw	0
  3543  0003F2  6F10               	movwf	printf@exp& (0+255),b
  3544  0003F4                     l6598:
  3545                           
  3546                           ; BSR set to: 1
  3547                           ;doprnt.c: 1134: }
  3548                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3549  0003F4  0E01               	movlw	1
  3550  0003F6  0101               	movlb	1	; () banked
  3551  0003F8  6F1D               	movwf	printf@c& (0+255),b
  3552  0003FA                     l6600:
  3553                           
  3554                           ; BSR set to: 1
  3555  0003FA  0E0A               	movlw	10
  3556  0003FC  0101               	movlb	1	; () banked
  3557  0003FE  191D               	xorwf	printf@c& (0+255),w,b
  3558  000400  B4D8               	btfsc	status,2,c
  3559  000402  D01E               	goto	l6612
  3560                           
  3561                           ; BSR set to: 1
  3562                           ;doprnt.c: 1137: if(val < dpowers[c])
  3563                           
  3564                           ; BSR set to: 1
  3565                           
  3566                           ; BSR set to: 1
  3567  000404  0101               	movlb	1	; () banked
  3568  000406  511D               	movf	printf@c& (0+255),w,b
  3569  000408  0D04               	mullw	4
  3570  00040A  0EC3               	movlw	low _dpowers
  3571  00040C  24F3               	addwf	prodl,w,c
  3572  00040E  6EF6               	movwf	tblptrl,c
  3573  000410  0EFD               	movlw	high _dpowers
  3574  000412  20F4               	addwfc	prodh,w,c
  3575  000414  6EF7               	movwf	tblptrh,c
  3576  000416                     	if	0	;There are less than 3 active tblptr bytes
  3577  000416                     	endif
  3578  000416  0009               	tblrd		*+
  3579  000418  50F5               	movf	tablat,w,c
  3580  00041A  0101               	movlb	1	; () banked
  3581  00041C  5D16               	subwf	printf@val& (0+255),w,b
  3582  00041E  0009               	tblrd		*+
  3583  000420  50F5               	movf	tablat,w,c
  3584  000422  0101               	movlb	1	; () banked
  3585  000424  5917               	subwfb	(printf@val+1)& (0+255),w,b
  3586  000426  0009               	tblrd		*+
  3587  000428  50F5               	movf	tablat,w,c
  3588  00042A  0101               	movlb	1	; () banked
  3589  00042C  5918               	subwfb	(printf@val+2)& (0+255),w,b
  3590  00042E  0009               	tblrd		*+
  3591  000430  50F5               	movf	tablat,w,c
  3592  000432  0101               	movlb	1	; () banked
  3593  000434  5919               	subwfb	(printf@val+3)& (0+255),w,b
  3594  000436  A0D8               	btfss	status,0,c
  3595  000438  D003               	goto	l6612
  3596                           
  3597                           ; BSR set to: 1
  3598                           
  3599                           ; BSR set to: 1
  3600                           
  3601                           ; BSR set to: 1
  3602                           ;doprnt.c: 1138: break;
  3603  00043A  0101               	movlb	1	; () banked
  3604  00043C  2B1D               	incf	printf@c& (0+255),f,b
  3605  00043E  D7DD               	goto	l6600
  3606  000440                     l6612:
  3607                           
  3608                           ; BSR set to: 1
  3609                           ;doprnt.c: 1175: {
  3610                           ;doprnt.c: 1188: if(flag & 0x03)
  3611  000440  0E03               	movlw	3
  3612  000442  0101               	movlb	1	; () banked
  3613  000444  150C               	andwf	printf@flag& (0+255),w,b
  3614  000446  0101               	movlb	1	; () banked
  3615  000448  6F00               	movwf	??_printf& (0+255),b
  3616  00044A  0E00               	movlw	0
  3617  00044C  0101               	movlb	1	; () banked
  3618  00044E  150D               	andwf	(printf@flag+1)& (0+255),w,b
  3619  000450  0101               	movlb	1	; () banked
  3620  000452  6F01               	movwf	(??_printf+1)& (0+255),b
  3621  000454  0101               	movlb	1	; () banked
  3622  000456  5100               	movf	??_printf& (0+255),w,b
  3623  000458  0101               	movlb	1	; () banked
  3624  00045A  1101               	iorwf	(??_printf+1)& (0+255),w,b
  3625  00045C  B4D8               	btfsc	status,2,c
  3626  00045E  D04B               	goto	l6622
  3627                           
  3628                           ; BSR set to: 1
  3629                           ;doprnt.c: 1190: (putch('-') );
  3630  000460  0E2D               	movlw	45
  3631  000462  ECC4  F025         	call	_putch
  3632                           
  3633                           ;doprnt.c: 1195: }
  3634                           ;doprnt.c: 1196: while(c--) {
  3635  000466  D047               	goto	l6622
  3636  000468                     l6616:
  3637                           
  3638                           ;doprnt.c: 1200: {
  3639                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3640  000468  C116  F08E         	movff	printf@val,___lldiv@dividend
  3641  00046C  C117  F08F         	movff	printf@val+1,___lldiv@dividend+1
  3642  000470  C118  F090         	movff	printf@val+2,___lldiv@dividend+2
  3643  000474  C119  F091         	movff	printf@val+3,___lldiv@dividend+3
  3644  000478  0101               	movlb	1	; () banked
  3645  00047A  511D               	movf	printf@c& (0+255),w,b
  3646  00047C  0D04               	mullw	4
  3647  00047E  0EC3               	movlw	low _dpowers
  3648  000480  24F3               	addwf	prodl,w,c
  3649  000482  6EF6               	movwf	tblptrl,c
  3650  000484  0EFD               	movlw	high _dpowers
  3651  000486  20F4               	addwfc	prodh,w,c
  3652  000488  6EF7               	movwf	tblptrh,c
  3653  00048A                     	if	0	;There are less than 3 active tblptr bytes
  3654  00048A                     	endif
  3655  00048A  0009               	tblrd		*+
  3656  00048C  CFF5 F092          	movff	tablat,___lldiv@divisor
  3657  000490  0009               	tblrd		*+
  3658  000492  CFF5 F093          	movff	tablat,___lldiv@divisor+1
  3659  000496  0009               	tblrd		*+
  3660  000498  CFF5 F094          	movff	tablat,___lldiv@divisor+2
  3661  00049C  000A               	tblrd		*-
  3662  00049E  CFF5 F095          	movff	tablat,___lldiv@divisor+3
  3663  0004A2  ECE1  F01E         	call	___lldiv	;wreg free
  3664  0004A6  C08E  F112         	movff	?___lldiv,printf@tmpval
  3665  0004AA  C08F  F113         	movff	?___lldiv+1,printf@tmpval+1
  3666  0004AE  C090  F114         	movff	?___lldiv+2,printf@tmpval+2
  3667  0004B2  C091  F115         	movff	?___lldiv+3,printf@tmpval+3
  3668                           
  3669                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3670  0004B6  C112  F09B         	movff	printf@tmpval,___llmod@dividend
  3671  0004BA  C113  F09C         	movff	printf@tmpval+1,___llmod@dividend+1
  3672  0004BE  C114  F09D         	movff	printf@tmpval+2,___llmod@dividend+2
  3673  0004C2  C115  F09E         	movff	printf@tmpval+3,___llmod@dividend+3
  3674  0004C6  0E0A               	movlw	10
  3675  0004C8  0100               	movlb	0	; () banked
  3676  0004CA  6F9F               	movwf	___llmod@divisor& (0+255),b
  3677  0004CC  0E00               	movlw	0
  3678  0004CE  6FA0               	movwf	(___llmod@divisor+1)& (0+255),b
  3679  0004D0  0E00               	movlw	0
  3680  0004D2  6FA1               	movwf	(___llmod@divisor+2)& (0+255),b
  3681  0004D4  0E00               	movlw	0
  3682  0004D6  6FA2               	movwf	(___llmod@divisor+3)& (0+255),b
  3683  0004D8  ECDA  F020         	call	___llmod	;wreg free
  3684  0004DC  C09B  F112         	movff	?___llmod,printf@tmpval
  3685  0004E0  C09C  F113         	movff	?___llmod+1,printf@tmpval+1
  3686  0004E4  C09D  F114         	movff	?___llmod+2,printf@tmpval+2
  3687  0004E8  C09E  F115         	movff	?___llmod+3,printf@tmpval+3
  3688                           
  3689                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  3690  0004EC  0101               	movlb	1	; () banked
  3691  0004EE  5112               	movf	printf@tmpval& (0+255),w,b
  3692  0004F0  0F30               	addlw	48
  3693  0004F2  ECC4  F025         	call	_putch
  3694  0004F6                     l6622:
  3695  0004F6  0101               	movlb	1	; () banked
  3696  0004F8  071D               	decf	printf@c& (0+255),f,b
  3697  0004FA  0101               	movlb	1	; () banked
  3698  0004FC  291D               	incf	printf@c& (0+255),w,b
  3699  0004FE  B4D8               	btfsc	status,2,c
  3700  000500  D008               	goto	l6628
  3701  000502  D7B2               	goto	l6616
  3702  000504                     l6624:
  3703                           
  3704                           ; BSR set to: 1
  3705                           ;doprnt.c: 1208: (putch('0') );
  3706  000504  0E30               	movlw	48
  3707  000506  ECC4  F025         	call	_putch
  3708                           
  3709                           ;doprnt.c: 1209: exp--;
  3710  00050A  0101               	movlb	1	; () banked
  3711  00050C  0710               	decf	printf@exp& (0+255),f,b
  3712  00050E  A0D8               	btfss	status,0,c
  3713  000510  0711               	decf	(printf@exp+1)& (0+255),f,b
  3714  000512                     l6628:
  3715                           
  3716                           ; BSR set to: 1
  3717  000512  0101               	movlb	1	; () banked
  3718  000514  BF11               	btfsc	(printf@exp+1)& (0+255),7,b
  3719  000516  D007               	goto	l6630
  3720  000518  0101               	movlb	1	; () banked
  3721  00051A  5111               	movf	(printf@exp+1)& (0+255),w,b
  3722  00051C  E1F3               	bnz	l6624
  3723  00051E  0101               	movlb	1	; () banked
  3724  000520  0510               	decf	printf@exp& (0+255),w,b
  3725  000522  B0D8               	btfsc	status,0,c
  3726  000524  D7EF               	goto	l6624
  3727  000526                     l6630:
  3728                           
  3729                           ; BSR set to: 1
  3730                           ;doprnt.c: 1210: }
  3731                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3732  000526  0101               	movlb	1	; () banked
  3733  000528  BF0F               	btfsc	(printf@prec+1)& (0+255),7,b
  3734  00052A  D00C               	goto	l687
  3735  00052C  0101               	movlb	1	; () banked
  3736  00052E  510F               	movf	(printf@prec+1)& (0+255),w,b
  3737  000530  E105               	bnz	u6980
  3738  000532  0E09               	movlw	9
  3739  000534  0101               	movlb	1	; () banked
  3740  000536  5D0E               	subwf	printf@prec& (0+255),w,b
  3741  000538  A0D8               	btfss	status,0,c
  3742  00053A  D004               	goto	l687
  3743  00053C                     u6980:
  3744                           
  3745                           ; BSR set to: 1
  3746                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3747  00053C  0E08               	movlw	8
  3748  00053E  0101               	movlb	1	; () banked
  3749  000540  6F1D               	movwf	printf@c& (0+255),b
  3750  000542  D002               	goto	l6634
  3751  000544                     l687:
  3752                           
  3753                           ; BSR set to: 1
  3754                           ;doprnt.c: 1213: else
  3755                           ;doprnt.c: 1214: c = prec;
  3756  000544  C10E  F11D         	movff	printf@prec,printf@c
  3757  000548                     l6634:
  3758                           
  3759                           ; BSR set to: 1
  3760                           ;doprnt.c: 1215: prec -= c;
  3761  000548  0101               	movlb	1	; () banked
  3762  00054A  511D               	movf	printf@c& (0+255),w,b
  3763  00054C  0101               	movlb	1	; () banked
  3764  00054E  5F0E               	subwf	printf@prec& (0+255),f,b
  3765  000550  0E00               	movlw	0
  3766  000552  0101               	movlb	1	; () banked
  3767  000554  BF1D               	btfsc	printf@c& (0+255),7,b
  3768  000556  0EFF               	movlw	255
  3769  000558  0101               	movlb	1	; () banked
  3770  00055A  5B0F               	subwfb	(printf@prec+1)& (0+255),f,b
  3771                           
  3772                           ; BSR set to: 1
  3773                           ;doprnt.c: 1219: if(c)
  3774  00055C  0101               	movlb	1	; () banked
  3775  00055E  511D               	movf	printf@c& (0+255),w,b
  3776  000560  0101               	movlb	1	; () banked
  3777  000562  B4D8               	btfsc	status,2,c
  3778  000564  D003               	goto	l6640
  3779                           
  3780                           ; BSR set to: 1
  3781                           ;doprnt.c: 1221: (putch('.') );
  3782  000566  0E2E               	movlw	46
  3783  000568  ECC4  F025         	call	_putch
  3784  00056C                     l6640:
  3785                           
  3786                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3787  00056C  0101               	movlb	1	; () banked
  3788  00056E  511D               	movf	printf@c& (0+255),w,b
  3789  000570  ECAE  F008         	call	_scale
  3790  000574  C0BE  F106         	movff	?_scale,_printf$1323
  3791  000578  C0BF  F107         	movff	?_scale+1,_printf$1323+1
  3792  00057C  C0C0  F108         	movff	?_scale+2,_printf$1323+2
  3793                           
  3794                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3795  000580  C11A  F0B2         	movff	printf@fval,___ftmul@f2
  3796  000584  C11B  F0B3         	movff	printf@fval+1,___ftmul@f2+1
  3797  000588  C11C  F0B4         	movff	printf@fval+2,___ftmul@f2+2
  3798  00058C  C106  F0AF         	movff	_printf$1323,___ftmul@f1
  3799  000590  C107  F0B0         	movff	_printf$1323+1,___ftmul@f1+1
  3800  000594  C108  F0B1         	movff	_printf$1323+2,___ftmul@f1+2
  3801  000598  EC94  F015         	call	___ftmul	;wreg free
  3802  00059C  C0AF  F0D4         	movff	?___ftmul,___fttol@f1
  3803  0005A0  C0B0  F0D5         	movff	?___ftmul+1,___fttol@f1+1
  3804  0005A4  C0B1  F0D6         	movff	?___ftmul+2,___fttol@f1+2
  3805  0005A8  ECE9  F016         	call	___fttol	;wreg free
  3806  0005AC  C0D4  F116         	movff	?___fttol,printf@val
  3807  0005B0  C0D5  F117         	movff	?___fttol+1,printf@val+1
  3808  0005B4  C0D6  F118         	movff	?___fttol+2,printf@val+2
  3809  0005B8  C0D7  F119         	movff	?___fttol+3,printf@val+3
  3810                           
  3811                           ;doprnt.c: 1228: while(c--) {
  3812  0005BC  D06E               	goto	l6650
  3813  0005BE                     l6644:
  3814                           
  3815                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3816  0005BE  C116  F08E         	movff	printf@val,___lldiv@dividend
  3817  0005C2  C117  F08F         	movff	printf@val+1,___lldiv@dividend+1
  3818  0005C6  C118  F090         	movff	printf@val+2,___lldiv@dividend+2
  3819  0005CA  C119  F091         	movff	printf@val+3,___lldiv@dividend+3
  3820  0005CE  0101               	movlb	1	; () banked
  3821  0005D0  511D               	movf	printf@c& (0+255),w,b
  3822  0005D2  0D04               	mullw	4
  3823  0005D4  0EC3               	movlw	low _dpowers
  3824  0005D6  24F3               	addwf	prodl,w,c
  3825  0005D8  6EF6               	movwf	tblptrl,c
  3826  0005DA  0EFD               	movlw	high _dpowers
  3827  0005DC  20F4               	addwfc	prodh,w,c
  3828  0005DE  6EF7               	movwf	tblptrh,c
  3829  0005E0                     	if	0	;There are less than 3 active tblptr bytes
  3830  0005E0                     	endif
  3831  0005E0  0009               	tblrd		*+
  3832  0005E2  CFF5 F092          	movff	tablat,___lldiv@divisor
  3833  0005E6  0009               	tblrd		*+
  3834  0005E8  CFF5 F093          	movff	tablat,___lldiv@divisor+1
  3835  0005EC  0009               	tblrd		*+
  3836  0005EE  CFF5 F094          	movff	tablat,___lldiv@divisor+2
  3837  0005F2  000A               	tblrd		*-
  3838  0005F4  CFF5 F095          	movff	tablat,___lldiv@divisor+3
  3839  0005F8  ECE1  F01E         	call	___lldiv	;wreg free
  3840  0005FC  C08E  F112         	movff	?___lldiv,printf@tmpval
  3841  000600  C08F  F113         	movff	?___lldiv+1,printf@tmpval+1
  3842  000604  C090  F114         	movff	?___lldiv+2,printf@tmpval+2
  3843  000608  C091  F115         	movff	?___lldiv+3,printf@tmpval+3
  3844                           
  3845                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3846  00060C  C112  F09B         	movff	printf@tmpval,___llmod@dividend
  3847  000610  C113  F09C         	movff	printf@tmpval+1,___llmod@dividend+1
  3848  000614  C114  F09D         	movff	printf@tmpval+2,___llmod@dividend+2
  3849  000618  C115  F09E         	movff	printf@tmpval+3,___llmod@dividend+3
  3850  00061C  0E0A               	movlw	10
  3851  00061E  0100               	movlb	0	; () banked
  3852  000620  6F9F               	movwf	___llmod@divisor& (0+255),b
  3853  000622  0E00               	movlw	0
  3854  000624  6FA0               	movwf	(___llmod@divisor+1)& (0+255),b
  3855  000626  0E00               	movlw	0
  3856  000628  6FA1               	movwf	(___llmod@divisor+2)& (0+255),b
  3857  00062A  0E00               	movlw	0
  3858  00062C  6FA2               	movwf	(___llmod@divisor+3)& (0+255),b
  3859  00062E  ECDA  F020         	call	___llmod	;wreg free
  3860  000632  C09B  F112         	movff	?___llmod,printf@tmpval
  3861  000636  C09C  F113         	movff	?___llmod+1,printf@tmpval+1
  3862  00063A  C09D  F114         	movff	?___llmod+2,printf@tmpval+2
  3863  00063E  C09E  F115         	movff	?___llmod+3,printf@tmpval+3
  3864                           
  3865                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  3866  000642  0101               	movlb	1	; () banked
  3867  000644  5112               	movf	printf@tmpval& (0+255),w,b
  3868  000646  0F30               	addlw	48
  3869  000648  ECC4  F025         	call	_putch
  3870                           
  3871                           ;doprnt.c: 1232: val %= dpowers[c];
  3872  00064C  C116  F09B         	movff	printf@val,___llmod@dividend
  3873  000650  C117  F09C         	movff	printf@val+1,___llmod@dividend+1
  3874  000654  C118  F09D         	movff	printf@val+2,___llmod@dividend+2
  3875  000658  C119  F09E         	movff	printf@val+3,___llmod@dividend+3
  3876  00065C  0101               	movlb	1	; () banked
  3877  00065E  511D               	movf	printf@c& (0+255),w,b
  3878  000660  0D04               	mullw	4
  3879  000662  0EC3               	movlw	low _dpowers
  3880  000664  24F3               	addwf	prodl,w,c
  3881  000666  6EF6               	movwf	tblptrl,c
  3882  000668  0EFD               	movlw	high _dpowers
  3883  00066A  20F4               	addwfc	prodh,w,c
  3884  00066C  6EF7               	movwf	tblptrh,c
  3885  00066E                     	if	0	;There are less than 3 active tblptr bytes
  3886  00066E                     	endif
  3887  00066E  0009               	tblrd		*+
  3888  000670  CFF5 F09F          	movff	tablat,___llmod@divisor
  3889  000674  0009               	tblrd		*+
  3890  000676  CFF5 F0A0          	movff	tablat,___llmod@divisor+1
  3891  00067A  0009               	tblrd		*+
  3892  00067C  CFF5 F0A1          	movff	tablat,___llmod@divisor+2
  3893  000680  000A               	tblrd		*-
  3894  000682  CFF5 F0A2          	movff	tablat,___llmod@divisor+3
  3895  000686  ECDA  F020         	call	___llmod	;wreg free
  3896  00068A  C09B  F116         	movff	?___llmod,printf@val
  3897  00068E  C09C  F117         	movff	?___llmod+1,printf@val+1
  3898  000692  C09D  F118         	movff	?___llmod+2,printf@val+2
  3899  000696  C09E  F119         	movff	?___llmod+3,printf@val+3
  3900  00069A                     l6650:
  3901  00069A  0101               	movlb	1	; () banked
  3902  00069C  071D               	decf	printf@c& (0+255),f,b
  3903  00069E  0101               	movlb	1	; () banked
  3904  0006A0  291D               	incf	printf@c& (0+255),w,b
  3905  0006A2  B4D8               	btfsc	status,2,c
  3906  0006A4  D008               	goto	l6656
  3907  0006A6  D78B               	goto	l6644
  3908  0006A8                     l6652:
  3909                           
  3910                           ; BSR set to: 1
  3911                           ;doprnt.c: 1236: (putch('0') );
  3912  0006A8  0E30               	movlw	48
  3913  0006AA  ECC4  F025         	call	_putch
  3914                           
  3915                           ;doprnt.c: 1237: prec--;
  3916  0006AE  0101               	movlb	1	; () banked
  3917  0006B0  070E               	decf	printf@prec& (0+255),f,b
  3918  0006B2  A0D8               	btfss	status,0,c
  3919  0006B4  070F               	decf	(printf@prec+1)& (0+255),f,b
  3920  0006B6                     l6656:
  3921                           
  3922                           ; BSR set to: 1
  3923  0006B6  0101               	movlb	1	; () banked
  3924  0006B8  510E               	movf	printf@prec& (0+255),w,b
  3925  0006BA  0101               	movlb	1	; () banked
  3926  0006BC  110F               	iorwf	(printf@prec+1)& (0+255),w,b
  3927  0006BE  B4D8               	btfsc	status,2,c
  3928  0006C0  D141               	goto	l6724
  3929  0006C2  D7F2               	goto	l6652
  3930  0006C4                     l659:
  3931                           
  3932                           ; BSR set to: 1
  3933                           ;doprnt.c: 1246: }
  3934                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3935  0006C4  0101               	movlb	1	; () banked
  3936  0006C6  BF0C               	btfsc	printf@flag& (0+255),7,b
  3937  0006C8  D023               	goto	l6668
  3938                           
  3939                           ; BSR set to: 1
  3940                           ;doprnt.c: 1253: {
  3941                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3942  0006CA  C10A  FFD9         	movff	printf@ap,fsr2l
  3943  0006CE  C10B  FFDA         	movff	printf@ap+1,fsr2h
  3944  0006D2  CFDE F116          	movff	postinc2,printf@val
  3945  0006D6  CFDD F117          	movff	postdec2,printf@val+1
  3946  0006DA  0101               	movlb	1	; () banked
  3947  0006DC  0E00               	movlw	0
  3948  0006DE  BF17               	btfsc	(printf@val+1)& (0+255),7,b
  3949  0006E0  0EFF               	movlw	-1
  3950  0006E2  6F18               	movwf	(printf@val+2)& (0+255),b
  3951  0006E4  6F19               	movwf	(printf@val+3)& (0+255),b
  3952                           
  3953                           ; BSR set to: 1
  3954  0006E6  0E02               	movlw	2
  3955  0006E8  0101               	movlb	1	; () banked
  3956  0006EA  270A               	addwf	printf@ap& (0+255),f,b
  3957  0006EC  0E00               	movlw	0
  3958  0006EE  230B               	addwfc	(printf@ap+1)& (0+255),f,b
  3959                           
  3960                           ; BSR set to: 1
  3961                           ;doprnt.c: 1261: if((long)val < 0) {
  3962  0006F0  0101               	movlb	1	; () banked
  3963  0006F2  AF19               	btfss	(printf@val+3)& (0+255),7,b
  3964  0006F4  D06E               	goto	l6702
  3965                           
  3966                           ; BSR set to: 1
  3967                           ;doprnt.c: 1262: flag |= 0x03;
  3968  0006F6  0E03               	movlw	3
  3969  0006F8  0101               	movlb	1	; () banked
  3970  0006FA  130C               	iorwf	printf@flag& (0+255),f,b
  3971                           
  3972                           ; BSR set to: 1
  3973                           ;doprnt.c: 1263: val = -val;
  3974  0006FC  0101               	movlb	1	; () banked
  3975  0006FE  1F19               	comf	(printf@val+3)& (0+255),f,b
  3976  000700  1F18               	comf	(printf@val+2)& (0+255),f,b
  3977  000702  1F17               	comf	(printf@val+1)& (0+255),f,b
  3978  000704  6D16               	negf	printf@val& (0+255),b
  3979  000706  0E00               	movlw	0
  3980  000708  2317               	addwfc	(printf@val+1)& (0+255),f,b
  3981  00070A  2318               	addwfc	(printf@val+2)& (0+255),f,b
  3982  00070C  2319               	addwfc	(printf@val+3)& (0+255),f,b
  3983                           
  3984                           ; BSR set to: 1
  3985                           ;doprnt.c: 1264: }
  3986                           ;doprnt.c: 1266: }
  3987  00070E  D061               	goto	l6702
  3988  000710                     l6668:
  3989                           
  3990                           ; BSR set to: 1
  3991                           ;doprnt.c: 1268: else
  3992                           ;doprnt.c: 1273: {
  3993                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3994  000710  C10A  FFD9         	movff	printf@ap,fsr2l
  3995  000714  C10B  FFDA         	movff	printf@ap+1,fsr2h
  3996  000718  CFDE F100          	movff	postinc2,??_printf
  3997  00071C  CFDD F101          	movff	postdec2,??_printf+1
  3998  000720  C100  F116         	movff	??_printf,printf@val
  3999  000724  C101  F117         	movff	??_printf+1,printf@val+1
  4000  000728  0101               	movlb	1	; () banked
  4001  00072A  6B18               	clrf	(printf@val+2)& (0+255),b
  4002  00072C  6B19               	clrf	(printf@val+3)& (0+255),b
  4003                           
  4004                           ; BSR set to: 1
  4005  00072E  0E02               	movlw	2
  4006  000730  0101               	movlb	1	; () banked
  4007  000732  270A               	addwf	printf@ap& (0+255),f,b
  4008  000734  0E00               	movlw	0
  4009  000736  230B               	addwfc	(printf@ap+1)& (0+255),f,b
  4010                           
  4011                           ; BSR set to: 1
  4012                           ;doprnt.c: 1287: }
  4013                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4014  000738  D04C               	goto	l6702
  4015  00073A                     l6672:
  4016                           
  4017                           ; BSR set to: 1
  4018                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4019  00073A  0E01               	movlw	1
  4020  00073C  0101               	movlb	1	; () banked
  4021  00073E  6F1D               	movwf	printf@c& (0+255),b
  4022  000740                     l6674:
  4023                           
  4024                           ; BSR set to: 1
  4025  000740  0E0A               	movlw	10
  4026  000742  0101               	movlb	1	; () banked
  4027  000744  191D               	xorwf	printf@c& (0+255),w,b
  4028  000746  B4D8               	btfsc	status,2,c
  4029  000748  D04D               	goto	l6704
  4030                           
  4031                           ; BSR set to: 1
  4032                           ;doprnt.c: 1306: if(val < dpowers[c])
  4033                           
  4034                           ; BSR set to: 1
  4035                           
  4036                           ; BSR set to: 1
  4037  00074A  0101               	movlb	1	; () banked
  4038  00074C  511D               	movf	printf@c& (0+255),w,b
  4039  00074E  0D04               	mullw	4
  4040  000750  0EC3               	movlw	low _dpowers
  4041  000752  24F3               	addwf	prodl,w,c
  4042  000754  6EF6               	movwf	tblptrl,c
  4043  000756  0EFD               	movlw	high _dpowers
  4044  000758  20F4               	addwfc	prodh,w,c
  4045  00075A  6EF7               	movwf	tblptrh,c
  4046  00075C                     	if	0	;There are less than 3 active tblptr bytes
  4047  00075C                     	endif
  4048  00075C  0009               	tblrd		*+
  4049  00075E  50F5               	movf	tablat,w,c
  4050  000760  0101               	movlb	1	; () banked
  4051  000762  5D16               	subwf	printf@val& (0+255),w,b
  4052  000764  0009               	tblrd		*+
  4053  000766  50F5               	movf	tablat,w,c
  4054  000768  0101               	movlb	1	; () banked
  4055  00076A  5917               	subwfb	(printf@val+1)& (0+255),w,b
  4056  00076C  0009               	tblrd		*+
  4057  00076E  50F5               	movf	tablat,w,c
  4058  000770  0101               	movlb	1	; () banked
  4059  000772  5918               	subwfb	(printf@val+2)& (0+255),w,b
  4060  000774  0009               	tblrd		*+
  4061  000776  50F5               	movf	tablat,w,c
  4062  000778  0101               	movlb	1	; () banked
  4063  00077A  5919               	subwfb	(printf@val+3)& (0+255),w,b
  4064  00077C  A0D8               	btfss	status,0,c
  4065  00077E  D032               	goto	l6704
  4066                           
  4067                           ; BSR set to: 1
  4068                           
  4069                           ; BSR set to: 1
  4070                           
  4071                           ; BSR set to: 1
  4072                           ;doprnt.c: 1307: break;
  4073  000780  0101               	movlb	1	; () banked
  4074  000782  2B1D               	incf	printf@c& (0+255),f,b
  4075  000784  D7DD               	goto	l6674
  4076  000786                     l6686:
  4077                           
  4078                           ; BSR set to: 1
  4079                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4080  000786  0E01               	movlw	1
  4081  000788  0101               	movlb	1	; () banked
  4082  00078A  6F1D               	movwf	printf@c& (0+255),b
  4083  00078C                     l6688:
  4084                           
  4085                           ; BSR set to: 1
  4086  00078C  0E08               	movlw	8
  4087  00078E  0101               	movlb	1	; () banked
  4088  000790  191D               	xorwf	printf@c& (0+255),w,b
  4089  000792  B4D8               	btfsc	status,2,c
  4090  000794  D027               	goto	l6704
  4091                           
  4092                           ; BSR set to: 1
  4093                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4094                           
  4095                           ; BSR set to: 1
  4096                           
  4097                           ; BSR set to: 1
  4098  000796  0101               	movlb	1	; () banked
  4099  000798  511D               	movf	printf@c& (0+255),w,b
  4100  00079A  0D04               	mullw	4
  4101  00079C  0E39               	movlw	low _hexpowers
  4102  00079E  24F3               	addwf	prodl,w,c
  4103  0007A0  6EF6               	movwf	tblptrl,c
  4104  0007A2  0EFE               	movlw	high _hexpowers
  4105  0007A4  20F4               	addwfc	prodh,w,c
  4106  0007A6  6EF7               	movwf	tblptrh,c
  4107  0007A8                     	if	0	;There are less than 3 active tblptr bytes
  4108  0007A8                     	endif
  4109  0007A8  0009               	tblrd		*+
  4110  0007AA  50F5               	movf	tablat,w,c
  4111  0007AC  0101               	movlb	1	; () banked
  4112  0007AE  5D16               	subwf	printf@val& (0+255),w,b
  4113  0007B0  0009               	tblrd		*+
  4114  0007B2  50F5               	movf	tablat,w,c
  4115  0007B4  0101               	movlb	1	; () banked
  4116  0007B6  5917               	subwfb	(printf@val+1)& (0+255),w,b
  4117  0007B8  0009               	tblrd		*+
  4118  0007BA  50F5               	movf	tablat,w,c
  4119  0007BC  0101               	movlb	1	; () banked
  4120  0007BE  5918               	subwfb	(printf@val+2)& (0+255),w,b
  4121  0007C0  0009               	tblrd		*+
  4122  0007C2  50F5               	movf	tablat,w,c
  4123  0007C4  0101               	movlb	1	; () banked
  4124  0007C6  5919               	subwfb	(printf@val+3)& (0+255),w,b
  4125  0007C8  A0D8               	btfss	status,0,c
  4126  0007CA  D00C               	goto	l6704
  4127                           
  4128                           ; BSR set to: 1
  4129                           
  4130                           ; BSR set to: 1
  4131                           
  4132                           ; BSR set to: 1
  4133                           ;doprnt.c: 1318: break;
  4134  0007CC  0101               	movlb	1	; () banked
  4135  0007CE  2B1D               	incf	printf@c& (0+255),f,b
  4136  0007D0  D7DD               	goto	l6688
  4137  0007D2                     l6702:
  4138                           
  4139                           ; BSR set to: 1
  4140  0007D2  0101               	movlb	1	; () banked
  4141  0007D4  510C               	movf	printf@flag& (0+255),w,b
  4142  0007D6  0B80               	andlw	128
  4143                           
  4144                           ; Switch size 1, requested type "space"
  4145                           ; Number of cases is 2, Range of values is 0 to 128
  4146                           ; switch strategies available:
  4147                           ; Name         Instructions Cycles
  4148                           ; simple_byte            7     4 (average)
  4149                           ;	Chosen strategy is simple_byte
  4150  0007D8  0A00               	xorlw	0	; case 0
  4151  0007DA  B4D8               	btfsc	status,2,c
  4152  0007DC  D7AE               	goto	l6672
  4153  0007DE  0A80               	xorlw	128	; case 128
  4154  0007E0  B4D8               	btfsc	status,2,c
  4155  0007E2  D7D1               	goto	l6686
  4156  0007E4                     l6704:
  4157                           
  4158                           ; BSR set to: 1
  4159                           ;doprnt.c: 1422: {
  4160                           ;doprnt.c: 1438: if(flag & 0x03)
  4161  0007E4  0E03               	movlw	3
  4162  0007E6  0101               	movlb	1	; () banked
  4163  0007E8  150C               	andwf	printf@flag& (0+255),w,b
  4164  0007EA  0101               	movlb	1	; () banked
  4165  0007EC  6F00               	movwf	??_printf& (0+255),b
  4166  0007EE  0E00               	movlw	0
  4167  0007F0  0101               	movlb	1	; () banked
  4168  0007F2  150D               	andwf	(printf@flag+1)& (0+255),w,b
  4169  0007F4  0101               	movlb	1	; () banked
  4170  0007F6  6F01               	movwf	(??_printf+1)& (0+255),b
  4171  0007F8  0101               	movlb	1	; () banked
  4172  0007FA  5100               	movf	??_printf& (0+255),w,b
  4173  0007FC  0101               	movlb	1	; () banked
  4174  0007FE  1101               	iorwf	(??_printf+1)& (0+255),w,b
  4175  000800  B4D8               	btfsc	status,2,c
  4176  000802  D003               	goto	l6708
  4177                           
  4178                           ; BSR set to: 1
  4179                           ;doprnt.c: 1439: (putch('-') );
  4180  000804  0E2D               	movlw	45
  4181  000806  ECC4  F025         	call	_putch
  4182  00080A                     l6708:
  4183                           
  4184                           ;doprnt.c: 1469: }
  4185                           ;doprnt.c: 1472: prec = c;
  4186  00080A  0101               	movlb	1	; () banked
  4187  00080C  511D               	movf	printf@c& (0+255),w,b
  4188  00080E  0101               	movlb	1	; () banked
  4189  000810  6F0E               	movwf	printf@prec& (0+255),b
  4190  000812  6B0F               	clrf	(printf@prec+1)& (0+255),b
  4191  000814  BF0E               	btfsc	printf@prec& (0+255),7,b
  4192  000816  070F               	decf	(printf@prec+1)& (0+255),f,b
  4193                           
  4194                           ;doprnt.c: 1474: while(prec--) {
  4195  000818  D08A               	goto	l6722
  4196  00081A                     l6710:
  4197                           
  4198                           ; BSR set to: 1
  4199                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4200  00081A  C10E  F100         	movff	printf@prec,??_printf
  4201  00081E  C10F  F101         	movff	printf@prec+1,??_printf+1
  4202  000822  0101               	movlb	1	; () banked
  4203  000824  90D8               	bcf	status,0,c
  4204  000826  3700               	rlcf	??_printf& (0+255),f,b
  4205  000828  3701               	rlcf	(??_printf+1)& (0+255),f,b
  4206  00082A  0101               	movlb	1	; () banked
  4207  00082C  90D8               	bcf	status,0,c
  4208  00082E  3700               	rlcf	??_printf& (0+255),f,b
  4209  000830  3701               	rlcf	(??_printf+1)& (0+255),f,b
  4210  000832  0EC3               	movlw	low _dpowers
  4211  000834  0101               	movlb	1	; () banked
  4212  000836  2500               	addwf	??_printf& (0+255),w,b
  4213  000838  6EF6               	movwf	tblptrl,c
  4214  00083A  0EFD               	movlw	high _dpowers
  4215  00083C  2101               	addwfc	(??_printf+1)& (0+255),w,b
  4216  00083E  6EF7               	movwf	tblptrh,c
  4217  000840                     	if	0	;There are less than 3 active tblptr bytes
  4218  000840                     	endif
  4219  000840  0009               	tblrd		*+
  4220  000842  CFF5 F092          	movff	tablat,___lldiv@divisor
  4221  000846  0009               	tblrd		*+
  4222  000848  CFF5 F093          	movff	tablat,___lldiv@divisor+1
  4223  00084C  0009               	tblrd		*+
  4224  00084E  CFF5 F094          	movff	tablat,___lldiv@divisor+2
  4225  000852  000A               	tblrd		*-
  4226  000854  CFF5 F095          	movff	tablat,___lldiv@divisor+3
  4227  000858  C116  F08E         	movff	printf@val,___lldiv@dividend
  4228  00085C  C117  F08F         	movff	printf@val+1,___lldiv@dividend+1
  4229  000860  C118  F090         	movff	printf@val+2,___lldiv@dividend+2
  4230  000864  C119  F091         	movff	printf@val+3,___lldiv@dividend+3
  4231  000868  ECE1  F01E         	call	___lldiv	;wreg free
  4232  00086C  C08E  F09B         	movff	?___lldiv,___llmod@dividend
  4233  000870  C08F  F09C         	movff	?___lldiv+1,___llmod@dividend+1
  4234  000874  C090  F09D         	movff	?___lldiv+2,___llmod@dividend+2
  4235  000878  C091  F09E         	movff	?___lldiv+3,___llmod@dividend+3
  4236  00087C  0E0A               	movlw	10
  4237  00087E  0100               	movlb	0	; () banked
  4238  000880  6F9F               	movwf	___llmod@divisor& (0+255),b
  4239  000882  0E00               	movlw	0
  4240  000884  6FA0               	movwf	(___llmod@divisor+1)& (0+255),b
  4241  000886  0E00               	movlw	0
  4242  000888  6FA1               	movwf	(___llmod@divisor+2)& (0+255),b
  4243  00088A  0E00               	movlw	0
  4244  00088C  6FA2               	movwf	(___llmod@divisor+3)& (0+255),b
  4245  00088E  ECDA  F020         	call	___llmod	;wreg free
  4246  000892  0100               	movlb	0	; () banked
  4247  000894  519B               	movf	?___llmod& (0+255),w,b
  4248  000896  0F30               	addlw	48
  4249  000898  0101               	movlb	1	; () banked
  4250  00089A  6F1D               	movwf	printf@c& (0+255),b
  4251                           
  4252                           ;doprnt.c: 1491: break;
  4253  00089C  D044               	goto	l6720
  4254  00089E                     l6712:
  4255                           
  4256                           ; BSR set to: 1
  4257                           ;doprnt.c: 1499: {
  4258                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4259  00089E  C116  F08E         	movff	printf@val,___lldiv@dividend
  4260  0008A2  C117  F08F         	movff	printf@val+1,___lldiv@dividend+1
  4261  0008A6  C118  F090         	movff	printf@val+2,___lldiv@dividend+2
  4262  0008AA  C119  F091         	movff	printf@val+3,___lldiv@dividend+3
  4263  0008AE  C10E  F100         	movff	printf@prec,??_printf
  4264  0008B2  C10F  F101         	movff	printf@prec+1,??_printf+1
  4265  0008B6  0101               	movlb	1	; () banked
  4266  0008B8  90D8               	bcf	status,0,c
  4267  0008BA  3700               	rlcf	??_printf& (0+255),f,b
  4268  0008BC  3701               	rlcf	(??_printf+1)& (0+255),f,b
  4269  0008BE  0101               	movlb	1	; () banked
  4270  0008C0  90D8               	bcf	status,0,c
  4271  0008C2  3700               	rlcf	??_printf& (0+255),f,b
  4272  0008C4  3701               	rlcf	(??_printf+1)& (0+255),f,b
  4273  0008C6  0E39               	movlw	low _hexpowers
  4274  0008C8  0101               	movlb	1	; () banked
  4275  0008CA  2500               	addwf	??_printf& (0+255),w,b
  4276  0008CC  6EF6               	movwf	tblptrl,c
  4277  0008CE  0EFE               	movlw	high _hexpowers
  4278  0008D0  2101               	addwfc	(??_printf+1)& (0+255),w,b
  4279  0008D2  6EF7               	movwf	tblptrh,c
  4280  0008D4                     	if	0	;There are less than 3 active tblptr bytes
  4281  0008D4                     	endif
  4282  0008D4  0009               	tblrd		*+
  4283  0008D6  CFF5 F092          	movff	tablat,___lldiv@divisor
  4284  0008DA  0009               	tblrd		*+
  4285  0008DC  CFF5 F093          	movff	tablat,___lldiv@divisor+1
  4286  0008E0  0009               	tblrd		*+
  4287  0008E2  CFF5 F094          	movff	tablat,___lldiv@divisor+2
  4288  0008E6  000A               	tblrd		*-
  4289  0008E8  CFF5 F095          	movff	tablat,___lldiv@divisor+3
  4290  0008EC  ECE1  F01E         	call	___lldiv	;wreg free
  4291  0008F0  0100               	movlb	0	; () banked
  4292  0008F2  518E               	movf	?___lldiv& (0+255),w,b
  4293  0008F4  0B0F               	andlw	15
  4294  0008F6  0101               	movlb	1	; () banked
  4295  0008F8  6F09               	movwf	printf@idx& (0+255),b
  4296                           
  4297                           ; BSR set to: 1
  4298                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4299  0008FA  0101               	movlb	1	; () banked
  4300  0008FC  5109               	movf	printf@idx& (0+255),w,b
  4301  0008FE  0D01               	mullw	1
  4302  000900  0E37               	movlw	low STR_24
  4303  000902  24F3               	addwf	prodl,w,c
  4304  000904  6EF6               	movwf	tblptrl,c
  4305  000906  0EFF               	movlw	high STR_24
  4306  000908  20F4               	addwfc	prodh,w,c
  4307  00090A  6EF7               	movwf	tblptrh,c
  4308  00090C                     	if	0	;There are less than 3 active tblptr bytes
  4309  00090C                     	endif
  4310  00090C  0008               	tblrd		*
  4311  00090E  CFF5 F11D          	movff	tablat,printf@c
  4312                           
  4313                           ; BSR set to: 1
  4314                           ;doprnt.c: 1523: }
  4315                           
  4316                           ;doprnt.c: 1508: }
  4317                           ;doprnt.c: 1510: break;
  4318  000912  D009               	goto	l6720
  4319  000914                     l6718:
  4320                           
  4321                           ; BSR set to: 1
  4322  000914  0101               	movlb	1	; () banked
  4323  000916  510C               	movf	printf@flag& (0+255),w,b
  4324  000918  0B80               	andlw	128
  4325                           
  4326                           ; Switch size 1, requested type "space"
  4327                           ; Number of cases is 2, Range of values is 0 to 128
  4328                           ; switch strategies available:
  4329                           ; Name         Instructions Cycles
  4330                           ; simple_byte            7     4 (average)
  4331                           ;	Chosen strategy is simple_byte
  4332  00091A  0A00               	xorlw	0	; case 0
  4333  00091C  B4D8               	btfsc	status,2,c
  4334  00091E  D77D               	goto	l6710
  4335  000920  0A80               	xorlw	128	; case 128
  4336  000922  B4D8               	btfsc	status,2,c
  4337  000924  D7BC               	goto	l6712
  4338  000926                     l6720:
  4339                           
  4340                           ; BSR set to: 1
  4341                           ;doprnt.c: 1524: (putch(c) );
  4342  000926  0101               	movlb	1	; () banked
  4343  000928  511D               	movf	printf@c& (0+255),w,b
  4344  00092A  ECC4  F025         	call	_putch
  4345  00092E                     l6722:
  4346  00092E  0101               	movlb	1	; () banked
  4347  000930  070E               	decf	printf@prec& (0+255),f,b
  4348  000932  A0D8               	btfss	status,0,c
  4349  000934  070F               	decf	(printf@prec+1)& (0+255),f,b
  4350  000936  0101               	movlb	1	; () banked
  4351  000938  290E               	incf	printf@prec& (0+255),w,b
  4352  00093A  E1EC               	bnz	l6718
  4353  00093C  0101               	movlb	1	; () banked
  4354  00093E  290F               	incf	(printf@prec+1)& (0+255),w,b
  4355  000940  A4D8               	btfss	status,2,c
  4356  000942  D7E8               	goto	l6718
  4357  000944                     l6724:
  4358  000944  C0E3  FFF6         	movff	printf@f,tblptrl
  4359  000948  C0E4  FFF7         	movff	printf@f+1,tblptrh
  4360  00094C  0100               	movlb	0	; () banked
  4361  00094E  4BE3               	infsnz	printf@f& (0+255),f,b
  4362  000950  2BE4               	incf	(printf@f+1)& (0+255),f,b
  4363  000952                     	if	0	;tblptru may be non-zero
  4364  000952                     	endif
  4365  000952                     	if	0	;tblptru may be non-zero
  4366  000952                     	endif
  4367  000952  0008               	tblrd		*
  4368  000954  CFF5 F11D          	movff	tablat,printf@c
  4369  000958  0101               	movlb	1	; () banked
  4370  00095A  511D               	movf	printf@c& (0+255),w,b
  4371  00095C  B4D8               	btfsc	status,2,c
  4372  00095E  0012               	return	
  4373  000960  EF11  F000         	goto	l6506
  4374  000964                     __end_of_printf:
  4375                           	opt stack 0
  4376                           tblptru	equ	0xFF8
  4377                           tblptrh	equ	0xFF7
  4378                           tblptrl	equ	0xFF6
  4379                           tablat	equ	0xFF5
  4380                           prodh	equ	0xFF4
  4381                           prodl	equ	0xFF3
  4382                           postinc0	equ	0xFEE
  4383                           wreg	equ	0xFE8
  4384                           postdec1	equ	0xFE5
  4385                           fsr1l	equ	0xFE1
  4386                           indf2	equ	0xFDF
  4387                           postinc2	equ	0xFDE
  4388                           postdec2	equ	0xFDD
  4389                           fsr2h	equ	0xFDA
  4390                           fsr2l	equ	0xFD9
  4391                           status	equ	0xFD8
  4392                           
  4393 ;; *************** function _scale *****************
  4394 ;; Defined at:
  4395 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4396 ;; Parameters:    Size  Location     Type
  4397 ;;  scl             1    wreg     char 
  4398 ;; Auto vars:     Size  Location     Type
  4399 ;;  scl             1   68[BANK0 ] char 
  4400 ;; Return value:  Size  Location     Type
  4401 ;;                  3   62[BANK0 ] char 
  4402 ;; Registers used:
  4403 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4404 ;; Tracked objects:
  4405 ;;		On entry : 0/0
  4406 ;;		On exit  : 0/0
  4407 ;;		Unchanged: 0/0
  4408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4409 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4410 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4412 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4413 ;;Total ram usage:        7 bytes
  4414 ;; Hardware stack levels used:    1
  4415 ;; Hardware stack levels required when called:    8
  4416 ;; This function calls:
  4417 ;;		___awdiv
  4418 ;;		___awmod
  4419 ;;		___ftmul
  4420 ;;		___wmul
  4421 ;; This function is called by:
  4422 ;;		_printf
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           	psect	text5
  4427  00115C                     __ptext5:
  4428                           	opt stack 0
  4429  00115C                     _scale:
  4430                           	opt stack 20
  4431                           
  4432                           ; BSR set to: 1
  4433                           ;incstack = 0
  4434                           ;scale@scl stored from wreg
  4435  00115C  0100               	movlb	0	; () banked
  4436  00115E  6FC4               	movwf	scale@scl& (0+255),b
  4437                           
  4438                           ;doprnt.c: 428: if(scl < 0) {
  4439  001160  0100               	movlb	0	; () banked
  4440  001162  AFC4               	btfss	scale@scl& (0+255),7,b
  4441  001164  D12A               	goto	l4392
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;doprnt.c: 429: scl = -scl;
  4445  001166  0100               	movlb	0	; () banked
  4446  001168  6DC4               	negf	scale@scl& (0+255),b
  4447                           
  4448                           ;doprnt.c: 430: if(scl>=110)
  4449  00116A  0100               	movlb	0	; () banked
  4450  00116C  51C4               	movf	scale@scl& (0+255),w,b
  4451  00116E  0A80               	xorlw	128
  4452  001170  0F12               	addlw	-238
  4453  001172  A0D8               	btfss	status,0,c
  4454  001174  D0AC               	goto	l4382
  4455                           
  4456                           ; BSR set to: 0
  4457                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4458  001176  0E00               	movlw	0
  4459  001178  0100               	movlb	0	; () banked
  4460  00117A  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4461  00117C  0E03               	movlw	3
  4462  00117E  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  4463  001180  0E00               	movlw	0
  4464  001182  0100               	movlb	0	; () banked
  4465  001184  6F97               	movwf	(___awdiv@divisor+1)& (0+255),b
  4466  001186  0E0A               	movlw	10
  4467  001188  6F96               	movwf	___awdiv@divisor& (0+255),b
  4468  00118A  0E00               	movlw	0
  4469  00118C  0100               	movlb	0	; () banked
  4470  00118E  6F91               	movwf	(___awmod@divisor+1)& (0+255),b
  4471  001190  0E64               	movlw	100
  4472  001192  6F90               	movwf	___awmod@divisor& (0+255),b
  4473  001194  0100               	movlb	0	; () banked
  4474  001196  51C4               	movf	scale@scl& (0+255),w,b
  4475  001198  0100               	movlb	0	; () banked
  4476  00119A  6F8E               	movwf	___awmod@dividend& (0+255),b
  4477  00119C  6B8F               	clrf	(___awmod@dividend+1)& (0+255),b
  4478  00119E  BF8E               	btfsc	___awmod@dividend& (0+255),7,b
  4479  0011A0  078F               	decf	(___awmod@dividend+1)& (0+255),f,b
  4480  0011A2  ECED  F01F         	call	___awmod	;wreg free
  4481  0011A6  C08E  F094         	movff	?___awmod,___awdiv@dividend
  4482  0011AA  C08F  F095         	movff	?___awmod+1,___awdiv@dividend+1
  4483  0011AE  EC82  F01E         	call	___awdiv	;wreg free
  4484  0011B2  0E09               	movlw	9
  4485  0011B4  0100               	movlb	0	; () banked
  4486  0011B6  2594               	addwf	?___awdiv& (0+255),w,b
  4487  0011B8  0100               	movlb	0	; () banked
  4488  0011BA  6F9C               	movwf	___wmul@multiplier& (0+255),b
  4489  0011BC  0E00               	movlw	0
  4490  0011BE  0100               	movlb	0	; () banked
  4491  0011C0  2195               	addwfc	(?___awdiv+1)& (0+255),w,b
  4492  0011C2  0100               	movlb	0	; () banked
  4493  0011C4  6F9D               	movwf	(___wmul@multiplier+1)& (0+255),b
  4494  0011C6  EC50  F025         	call	___wmul	;wreg free
  4495  0011CA  0EEB               	movlw	low __npowers_
  4496  0011CC  0100               	movlb	0	; () banked
  4497  0011CE  259C               	addwf	?___wmul& (0+255),w,b
  4498  0011D0  6EF6               	movwf	tblptrl,c
  4499  0011D2  0EFD               	movlw	high __npowers_
  4500  0011D4  0100               	movlb	0	; () banked
  4501  0011D6  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  4502  0011D8  6EF7               	movwf	tblptrh,c
  4503  0011DA                     	if	0	;There are less than 3 active tblptr bytes
  4504  0011DA                     	endif
  4505  0011DA  0009               	tblrd		*+
  4506  0011DC  CFF5 F0B2          	movff	tablat,___ftmul@f2
  4507  0011E0  0009               	tblrd		*+
  4508  0011E2  CFF5 F0B3          	movff	tablat,___ftmul@f2+1
  4509  0011E6  000A               	tblrd		*-
  4510  0011E8  CFF5 F0B4          	movff	tablat,___ftmul@f2+2
  4511  0011EC  0E00               	movlw	0
  4512  0011EE  0100               	movlb	0	; () banked
  4513  0011F0  6F97               	movwf	(___awdiv@divisor+1)& (0+255),b
  4514  0011F2  0E64               	movlw	100
  4515  0011F4  6F96               	movwf	___awdiv@divisor& (0+255),b
  4516  0011F6  0100               	movlb	0	; () banked
  4517  0011F8  51C4               	movf	scale@scl& (0+255),w,b
  4518  0011FA  0100               	movlb	0	; () banked
  4519  0011FC  6F94               	movwf	___awdiv@dividend& (0+255),b
  4520  0011FE  6B95               	clrf	(___awdiv@dividend+1)& (0+255),b
  4521  001200  BF94               	btfsc	___awdiv@dividend& (0+255),7,b
  4522  001202  0795               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4523  001204  EC82  F01E         	call	___awdiv	;wreg free
  4524  001208  0E12               	movlw	18
  4525  00120A  0100               	movlb	0	; () banked
  4526  00120C  2594               	addwf	?___awdiv& (0+255),w,b
  4527  00120E  0100               	movlb	0	; () banked
  4528  001210  6F9C               	movwf	___wmul@multiplier& (0+255),b
  4529  001212  0E00               	movlw	0
  4530  001214  0100               	movlb	0	; () banked
  4531  001216  2195               	addwfc	(?___awdiv+1)& (0+255),w,b
  4532  001218  0100               	movlb	0	; () banked
  4533  00121A  6F9D               	movwf	(___wmul@multiplier+1)& (0+255),b
  4534  00121C  0E00               	movlw	0
  4535  00121E  0100               	movlb	0	; () banked
  4536  001220  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4537  001222  0E03               	movlw	3
  4538  001224  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  4539  001226  EC50  F025         	call	___wmul	;wreg free
  4540  00122A  0EEB               	movlw	low __npowers_
  4541  00122C  0100               	movlb	0	; () banked
  4542  00122E  259C               	addwf	?___wmul& (0+255),w,b
  4543  001230  6EF6               	movwf	tblptrl,c
  4544  001232  0EFD               	movlw	high __npowers_
  4545  001234  0100               	movlb	0	; () banked
  4546  001236  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  4547  001238  6EF7               	movwf	tblptrh,c
  4548  00123A                     	if	0	;There are less than 3 active tblptr bytes
  4549  00123A                     	endif
  4550  00123A  0009               	tblrd		*+
  4551  00123C  CFF5 F0AF          	movff	tablat,___ftmul@f1
  4552  001240  0009               	tblrd		*+
  4553  001242  CFF5 F0B0          	movff	tablat,___ftmul@f1+1
  4554  001246  000A               	tblrd		*-
  4555  001248  CFF5 F0B1          	movff	tablat,___ftmul@f1+2
  4556  00124C  EC94  F015         	call	___ftmul	;wreg free
  4557  001250  C0AF  F0C1         	movff	?___ftmul,_scale$1322
  4558  001254  C0B0  F0C2         	movff	?___ftmul+1,_scale$1322+1
  4559  001258  C0B1  F0C3         	movff	?___ftmul+2,_scale$1322+2
  4560                           
  4561                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4562  00125C  C0C1  F0AF         	movff	_scale$1322,___ftmul@f1
  4563  001260  C0C2  F0B0         	movff	_scale$1322+1,___ftmul@f1+1
  4564  001264  C0C3  F0B1         	movff	_scale$1322+2,___ftmul@f1+2
  4565  001268  0E00               	movlw	0
  4566  00126A  0100               	movlb	0	; () banked
  4567  00126C  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4568  00126E  0E03               	movlw	3
  4569  001270  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  4570  001272  0E00               	movlw	0
  4571  001274  0100               	movlb	0	; () banked
  4572  001276  6F91               	movwf	(___awmod@divisor+1)& (0+255),b
  4573  001278  0E0A               	movlw	10
  4574  00127A  6F90               	movwf	___awmod@divisor& (0+255),b
  4575  00127C  0100               	movlb	0	; () banked
  4576  00127E  51C4               	movf	scale@scl& (0+255),w,b
  4577  001280  0100               	movlb	0	; () banked
  4578  001282  6F8E               	movwf	___awmod@dividend& (0+255),b
  4579  001284  6B8F               	clrf	(___awmod@dividend+1)& (0+255),b
  4580  001286  BF8E               	btfsc	___awmod@dividend& (0+255),7,b
  4581  001288  078F               	decf	(___awmod@dividend+1)& (0+255),f,b
  4582  00128A  ECED  F01F         	call	___awmod	;wreg free
  4583  00128E  C08E  F09C         	movff	?___awmod,___wmul@multiplier
  4584  001292  C08F  F09D         	movff	?___awmod+1,___wmul@multiplier+1
  4585  001296  EC50  F025         	call	___wmul	;wreg free
  4586  00129A  0EEB               	movlw	low __npowers_
  4587  00129C  0100               	movlb	0	; () banked
  4588  00129E  259C               	addwf	?___wmul& (0+255),w,b
  4589  0012A0  6EF6               	movwf	tblptrl,c
  4590  0012A2  0EFD               	movlw	high __npowers_
  4591  0012A4  0100               	movlb	0	; () banked
  4592  0012A6  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  4593  0012A8  6EF7               	movwf	tblptrh,c
  4594  0012AA                     	if	0	;There are less than 3 active tblptr bytes
  4595  0012AA                     	endif
  4596  0012AA  0009               	tblrd		*+
  4597  0012AC  CFF5 F0B2          	movff	tablat,___ftmul@f2
  4598  0012B0  0009               	tblrd		*+
  4599  0012B2  CFF5 F0B3          	movff	tablat,___ftmul@f2+1
  4600  0012B6  000A               	tblrd		*-
  4601  0012B8  CFF5 F0B4          	movff	tablat,___ftmul@f2+2
  4602  0012BC  EC94  F015         	call	___ftmul	;wreg free
  4603  0012C0  C0AF  F0BE         	movff	?___ftmul,?_scale
  4604  0012C4  C0B0  F0BF         	movff	?___ftmul+1,?_scale+1
  4605  0012C8  C0B1  F0C0         	movff	?___ftmul+2,?_scale+2
  4606  0012CC  0012               	return	
  4607  0012CE                     l4382:
  4608                           
  4609                           ;doprnt.c: 432: else if(scl > 10)
  4610  0012CE  0100               	movlb	0	; () banked
  4611  0012D0  51C4               	movf	scale@scl& (0+255),w,b
  4612  0012D2  0A80               	xorlw	128
  4613  0012D4  0F75               	addlw	-139
  4614  0012D6  A0D8               	btfss	status,0,c
  4615  0012D8  D05D               	goto	l4388
  4616                           
  4617                           ; BSR set to: 0
  4618                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4619  0012DA  0E00               	movlw	0
  4620  0012DC  0100               	movlb	0	; () banked
  4621  0012DE  6F97               	movwf	(___awdiv@divisor+1)& (0+255),b
  4622  0012E0  0E0A               	movlw	10
  4623  0012E2  6F96               	movwf	___awdiv@divisor& (0+255),b
  4624  0012E4  0100               	movlb	0	; () banked
  4625  0012E6  51C4               	movf	scale@scl& (0+255),w,b
  4626  0012E8  0100               	movlb	0	; () banked
  4627  0012EA  6F94               	movwf	___awdiv@dividend& (0+255),b
  4628  0012EC  6B95               	clrf	(___awdiv@dividend+1)& (0+255),b
  4629  0012EE  BF94               	btfsc	___awdiv@dividend& (0+255),7,b
  4630  0012F0  0795               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4631  0012F2  EC82  F01E         	call	___awdiv	;wreg free
  4632  0012F6  0E09               	movlw	9
  4633  0012F8  0100               	movlb	0	; () banked
  4634  0012FA  2594               	addwf	?___awdiv& (0+255),w,b
  4635  0012FC  0100               	movlb	0	; () banked
  4636  0012FE  6F9C               	movwf	___wmul@multiplier& (0+255),b
  4637  001300  0E00               	movlw	0
  4638  001302  0100               	movlb	0	; () banked
  4639  001304  2195               	addwfc	(?___awdiv+1)& (0+255),w,b
  4640  001306  0100               	movlb	0	; () banked
  4641  001308  6F9D               	movwf	(___wmul@multiplier+1)& (0+255),b
  4642  00130A  0E00               	movlw	0
  4643  00130C  0100               	movlb	0	; () banked
  4644  00130E  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4645  001310  0E03               	movlw	3
  4646  001312  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  4647  001314  EC50  F025         	call	___wmul	;wreg free
  4648  001318  0EEB               	movlw	low __npowers_
  4649  00131A  0100               	movlb	0	; () banked
  4650  00131C  259C               	addwf	?___wmul& (0+255),w,b
  4651  00131E  6EF6               	movwf	tblptrl,c
  4652  001320  0EFD               	movlw	high __npowers_
  4653  001322  0100               	movlb	0	; () banked
  4654  001324  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  4655  001326  6EF7               	movwf	tblptrh,c
  4656  001328                     	if	0	;There are less than 3 active tblptr bytes
  4657  001328                     	endif
  4658  001328  0009               	tblrd		*+
  4659  00132A  CFF5 F0AF          	movff	tablat,___ftmul@f1
  4660  00132E  0009               	tblrd		*+
  4661  001330  CFF5 F0B0          	movff	tablat,___ftmul@f1+1
  4662  001334  000A               	tblrd		*-
  4663  001336  CFF5 F0B1          	movff	tablat,___ftmul@f1+2
  4664  00133A  0E00               	movlw	0
  4665  00133C  0100               	movlb	0	; () banked
  4666  00133E  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4667  001340  0E03               	movlw	3
  4668  001342  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  4669  001344  0E00               	movlw	0
  4670  001346  0100               	movlb	0	; () banked
  4671  001348  6F91               	movwf	(___awmod@divisor+1)& (0+255),b
  4672  00134A  0E0A               	movlw	10
  4673  00134C  6F90               	movwf	___awmod@divisor& (0+255),b
  4674  00134E  0100               	movlb	0	; () banked
  4675  001350  51C4               	movf	scale@scl& (0+255),w,b
  4676  001352  0100               	movlb	0	; () banked
  4677  001354  6F8E               	movwf	___awmod@dividend& (0+255),b
  4678  001356  6B8F               	clrf	(___awmod@dividend+1)& (0+255),b
  4679  001358  BF8E               	btfsc	___awmod@dividend& (0+255),7,b
  4680  00135A  078F               	decf	(___awmod@dividend+1)& (0+255),f,b
  4681  00135C  ECED  F01F         	call	___awmod	;wreg free
  4682  001360  C08E  F09C         	movff	?___awmod,___wmul@multiplier
  4683  001364  C08F  F09D         	movff	?___awmod+1,___wmul@multiplier+1
  4684  001368  EC50  F025         	call	___wmul	;wreg free
  4685  00136C  0EEB               	movlw	low __npowers_
  4686  00136E  0100               	movlb	0	; () banked
  4687  001370  259C               	addwf	?___wmul& (0+255),w,b
  4688  001372  6EF6               	movwf	tblptrl,c
  4689  001374  0EFD               	movlw	high __npowers_
  4690  001376  0100               	movlb	0	; () banked
  4691  001378  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  4692  00137A  6EF7               	movwf	tblptrh,c
  4693  00137C                     	if	0	;There are less than 3 active tblptr bytes
  4694  00137C                     	endif
  4695  00137C  0009               	tblrd		*+
  4696  00137E  CFF5 F0B2          	movff	tablat,___ftmul@f2
  4697  001382  0009               	tblrd		*+
  4698  001384  CFF5 F0B3          	movff	tablat,___ftmul@f2+1
  4699  001388  000A               	tblrd		*-
  4700  00138A  CFF5 F0B4          	movff	tablat,___ftmul@f2+2
  4701  00138E  EC94  F015         	call	___ftmul	;wreg free
  4702  001392  D796               	goto	L2
  4703  001394                     l4388:
  4704                           
  4705                           ;doprnt.c: 434: return _npowers_[scl];
  4706  001394  0100               	movlb	0	; () banked
  4707  001396  51C4               	movf	scale@scl& (0+255),w,b
  4708  001398  0D03               	mullw	3
  4709  00139A  0EEB               	movlw	low __npowers_
  4710  00139C  24F3               	addwf	prodl,w,c
  4711  00139E  6EF6               	movwf	tblptrl,c
  4712  0013A0  0EFD               	movlw	high __npowers_
  4713  0013A2  20F4               	addwfc	prodh,w,c
  4714  0013A4  6EF7               	movwf	tblptrh,c
  4715  0013A6                     	if	0	;There are less than 3 active tblptr bytes
  4716  0013A6                     	endif
  4717  0013A6  0009               	tblrd		*+
  4718  0013A8  CFF5 F0BE          	movff	tablat,?_scale
  4719  0013AC  0009               	tblrd		*+
  4720  0013AE  CFF5 F0BF          	movff	tablat,?_scale+1
  4721  0013B2  000A               	tblrd		*-
  4722  0013B4  CFF5 F0C0          	movff	tablat,?_scale+2
  4723                           
  4724                           ; BSR set to: 0
  4725  0013B8  0012               	return	
  4726  0013BA                     l4392:
  4727                           
  4728                           ; BSR set to: 0
  4729                           ;doprnt.c: 435: }
  4730                           ;doprnt.c: 436: if(scl>=110)
  4731  0013BA  0100               	movlb	0	; () banked
  4732  0013BC  51C4               	movf	scale@scl& (0+255),w,b
  4733  0013BE  0A80               	xorlw	128
  4734  0013C0  0F12               	addlw	-238
  4735  0013C2  A0D8               	btfss	status,0,c
  4736  0013C4  D0AC               	goto	l4400
  4737                           
  4738                           ; BSR set to: 0
  4739                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4740  0013C6  0E00               	movlw	0
  4741  0013C8  0100               	movlb	0	; () banked
  4742  0013CA  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4743  0013CC  0E03               	movlw	3
  4744  0013CE  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  4745  0013D0  0E00               	movlw	0
  4746  0013D2  0100               	movlb	0	; () banked
  4747  0013D4  6F97               	movwf	(___awdiv@divisor+1)& (0+255),b
  4748  0013D6  0E0A               	movlw	10
  4749  0013D8  6F96               	movwf	___awdiv@divisor& (0+255),b
  4750  0013DA  0E00               	movlw	0
  4751  0013DC  0100               	movlb	0	; () banked
  4752  0013DE  6F91               	movwf	(___awmod@divisor+1)& (0+255),b
  4753  0013E0  0E64               	movlw	100
  4754  0013E2  6F90               	movwf	___awmod@divisor& (0+255),b
  4755  0013E4  0100               	movlb	0	; () banked
  4756  0013E6  51C4               	movf	scale@scl& (0+255),w,b
  4757  0013E8  0100               	movlb	0	; () banked
  4758  0013EA  6F8E               	movwf	___awmod@dividend& (0+255),b
  4759  0013EC  6B8F               	clrf	(___awmod@dividend+1)& (0+255),b
  4760  0013EE  BF8E               	btfsc	___awmod@dividend& (0+255),7,b
  4761  0013F0  078F               	decf	(___awmod@dividend+1)& (0+255),f,b
  4762  0013F2  ECED  F01F         	call	___awmod	;wreg free
  4763  0013F6  C08E  F094         	movff	?___awmod,___awdiv@dividend
  4764  0013FA  C08F  F095         	movff	?___awmod+1,___awdiv@dividend+1
  4765  0013FE  EC82  F01E         	call	___awdiv	;wreg free
  4766  001402  0E09               	movlw	9
  4767  001404  0100               	movlb	0	; () banked
  4768  001406  2594               	addwf	?___awdiv& (0+255),w,b
  4769  001408  0100               	movlb	0	; () banked
  4770  00140A  6F9C               	movwf	___wmul@multiplier& (0+255),b
  4771  00140C  0E00               	movlw	0
  4772  00140E  0100               	movlb	0	; () banked
  4773  001410  2195               	addwfc	(?___awdiv+1)& (0+255),w,b
  4774  001412  0100               	movlb	0	; () banked
  4775  001414  6F9D               	movwf	(___wmul@multiplier+1)& (0+255),b
  4776  001416  EC50  F025         	call	___wmul	;wreg free
  4777  00141A  0E12               	movlw	low __powers_
  4778  00141C  0100               	movlb	0	; () banked
  4779  00141E  259C               	addwf	?___wmul& (0+255),w,b
  4780  001420  6EF6               	movwf	tblptrl,c
  4781  001422  0EFE               	movlw	high __powers_
  4782  001424  0100               	movlb	0	; () banked
  4783  001426  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  4784  001428  6EF7               	movwf	tblptrh,c
  4785  00142A                     	if	0	;There are less than 3 active tblptr bytes
  4786  00142A                     	endif
  4787  00142A  0009               	tblrd		*+
  4788  00142C  CFF5 F0B2          	movff	tablat,___ftmul@f2
  4789  001430  0009               	tblrd		*+
  4790  001432  CFF5 F0B3          	movff	tablat,___ftmul@f2+1
  4791  001436  000A               	tblrd		*-
  4792  001438  CFF5 F0B4          	movff	tablat,___ftmul@f2+2
  4793  00143C  0E00               	movlw	0
  4794  00143E  0100               	movlb	0	; () banked
  4795  001440  6F97               	movwf	(___awdiv@divisor+1)& (0+255),b
  4796  001442  0E64               	movlw	100
  4797  001444  6F96               	movwf	___awdiv@divisor& (0+255),b
  4798  001446  0100               	movlb	0	; () banked
  4799  001448  51C4               	movf	scale@scl& (0+255),w,b
  4800  00144A  0100               	movlb	0	; () banked
  4801  00144C  6F94               	movwf	___awdiv@dividend& (0+255),b
  4802  00144E  6B95               	clrf	(___awdiv@dividend+1)& (0+255),b
  4803  001450  BF94               	btfsc	___awdiv@dividend& (0+255),7,b
  4804  001452  0795               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4805  001454  EC82  F01E         	call	___awdiv	;wreg free
  4806  001458  0E12               	movlw	18
  4807  00145A  0100               	movlb	0	; () banked
  4808  00145C  2594               	addwf	?___awdiv& (0+255),w,b
  4809  00145E  0100               	movlb	0	; () banked
  4810  001460  6F9C               	movwf	___wmul@multiplier& (0+255),b
  4811  001462  0E00               	movlw	0
  4812  001464  0100               	movlb	0	; () banked
  4813  001466  2195               	addwfc	(?___awdiv+1)& (0+255),w,b
  4814  001468  0100               	movlb	0	; () banked
  4815  00146A  6F9D               	movwf	(___wmul@multiplier+1)& (0+255),b
  4816  00146C  0E00               	movlw	0
  4817  00146E  0100               	movlb	0	; () banked
  4818  001470  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4819  001472  0E03               	movlw	3
  4820  001474  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  4821  001476  EC50  F025         	call	___wmul	;wreg free
  4822  00147A  0E12               	movlw	low __powers_
  4823  00147C  0100               	movlb	0	; () banked
  4824  00147E  259C               	addwf	?___wmul& (0+255),w,b
  4825  001480  6EF6               	movwf	tblptrl,c
  4826  001482  0EFE               	movlw	high __powers_
  4827  001484  0100               	movlb	0	; () banked
  4828  001486  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  4829  001488  6EF7               	movwf	tblptrh,c
  4830  00148A                     	if	0	;There are less than 3 active tblptr bytes
  4831  00148A                     	endif
  4832  00148A  0009               	tblrd		*+
  4833  00148C  CFF5 F0AF          	movff	tablat,___ftmul@f1
  4834  001490  0009               	tblrd		*+
  4835  001492  CFF5 F0B0          	movff	tablat,___ftmul@f1+1
  4836  001496  000A               	tblrd		*-
  4837  001498  CFF5 F0B1          	movff	tablat,___ftmul@f1+2
  4838  00149C  EC94  F015         	call	___ftmul	;wreg free
  4839  0014A0  C0AF  F0C1         	movff	?___ftmul,_scale$1322
  4840  0014A4  C0B0  F0C2         	movff	?___ftmul+1,_scale$1322+1
  4841  0014A8  C0B1  F0C3         	movff	?___ftmul+2,_scale$1322+2
  4842                           
  4843                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4844  0014AC  C0C1  F0AF         	movff	_scale$1322,___ftmul@f1
  4845  0014B0  C0C2  F0B0         	movff	_scale$1322+1,___ftmul@f1+1
  4846  0014B4  C0C3  F0B1         	movff	_scale$1322+2,___ftmul@f1+2
  4847  0014B8  0E00               	movlw	0
  4848  0014BA  0100               	movlb	0	; () banked
  4849  0014BC  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4850  0014BE  0E03               	movlw	3
  4851  0014C0  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  4852  0014C2  0E00               	movlw	0
  4853  0014C4  0100               	movlb	0	; () banked
  4854  0014C6  6F91               	movwf	(___awmod@divisor+1)& (0+255),b
  4855  0014C8  0E0A               	movlw	10
  4856  0014CA  6F90               	movwf	___awmod@divisor& (0+255),b
  4857  0014CC  0100               	movlb	0	; () banked
  4858  0014CE  51C4               	movf	scale@scl& (0+255),w,b
  4859  0014D0  0100               	movlb	0	; () banked
  4860  0014D2  6F8E               	movwf	___awmod@dividend& (0+255),b
  4861  0014D4  6B8F               	clrf	(___awmod@dividend+1)& (0+255),b
  4862  0014D6  BF8E               	btfsc	___awmod@dividend& (0+255),7,b
  4863  0014D8  078F               	decf	(___awmod@dividend+1)& (0+255),f,b
  4864  0014DA  ECED  F01F         	call	___awmod	;wreg free
  4865  0014DE  C08E  F09C         	movff	?___awmod,___wmul@multiplier
  4866  0014E2  C08F  F09D         	movff	?___awmod+1,___wmul@multiplier+1
  4867  0014E6  EC50  F025         	call	___wmul	;wreg free
  4868  0014EA  0E12               	movlw	low __powers_
  4869  0014EC  0100               	movlb	0	; () banked
  4870  0014EE  259C               	addwf	?___wmul& (0+255),w,b
  4871  0014F0  6EF6               	movwf	tblptrl,c
  4872  0014F2  0EFE               	movlw	high __powers_
  4873  0014F4  0100               	movlb	0	; () banked
  4874  0014F6  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  4875  0014F8  6EF7               	movwf	tblptrh,c
  4876  0014FA                     	if	0	;There are less than 3 active tblptr bytes
  4877  0014FA                     	endif
  4878  0014FA  0009               	tblrd		*+
  4879  0014FC  CFF5 F0B2          	movff	tablat,___ftmul@f2
  4880  001500  0009               	tblrd		*+
  4881  001502  CFF5 F0B3          	movff	tablat,___ftmul@f2+1
  4882  001506  000A               	tblrd		*-
  4883  001508  CFF5 F0B4          	movff	tablat,___ftmul@f2+2
  4884  00150C  EC94  F015         	call	___ftmul	;wreg free
  4885  001510  C0AF  F0BE         	movff	?___ftmul,?_scale
  4886  001514  C0B0  F0BF         	movff	?___ftmul+1,?_scale+1
  4887  001518  C0B1  F0C0         	movff	?___ftmul+2,?_scale+2
  4888  00151C  0012               	return	
  4889  00151E                     l4400:
  4890                           
  4891                           ;doprnt.c: 438: else if(scl > 10)
  4892  00151E  0100               	movlb	0	; () banked
  4893  001520  51C4               	movf	scale@scl& (0+255),w,b
  4894  001522  0A80               	xorlw	128
  4895  001524  0F75               	addlw	-139
  4896  001526  A0D8               	btfss	status,0,c
  4897  001528  D05D               	goto	l4406
  4898                           
  4899                           ; BSR set to: 0
  4900                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4901  00152A  0E00               	movlw	0
  4902  00152C  0100               	movlb	0	; () banked
  4903  00152E  6F97               	movwf	(___awdiv@divisor+1)& (0+255),b
  4904  001530  0E0A               	movlw	10
  4905  001532  6F96               	movwf	___awdiv@divisor& (0+255),b
  4906  001534  0100               	movlb	0	; () banked
  4907  001536  51C4               	movf	scale@scl& (0+255),w,b
  4908  001538  0100               	movlb	0	; () banked
  4909  00153A  6F94               	movwf	___awdiv@dividend& (0+255),b
  4910  00153C  6B95               	clrf	(___awdiv@dividend+1)& (0+255),b
  4911  00153E  BF94               	btfsc	___awdiv@dividend& (0+255),7,b
  4912  001540  0795               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4913  001542  EC82  F01E         	call	___awdiv	;wreg free
  4914  001546  0E09               	movlw	9
  4915  001548  0100               	movlb	0	; () banked
  4916  00154A  2594               	addwf	?___awdiv& (0+255),w,b
  4917  00154C  0100               	movlb	0	; () banked
  4918  00154E  6F9C               	movwf	___wmul@multiplier& (0+255),b
  4919  001550  0E00               	movlw	0
  4920  001552  0100               	movlb	0	; () banked
  4921  001554  2195               	addwfc	(?___awdiv+1)& (0+255),w,b
  4922  001556  0100               	movlb	0	; () banked
  4923  001558  6F9D               	movwf	(___wmul@multiplier+1)& (0+255),b
  4924  00155A  0E00               	movlw	0
  4925  00155C  0100               	movlb	0	; () banked
  4926  00155E  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4927  001560  0E03               	movlw	3
  4928  001562  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  4929  001564  EC50  F025         	call	___wmul	;wreg free
  4930  001568  0E12               	movlw	low __powers_
  4931  00156A  0100               	movlb	0	; () banked
  4932  00156C  259C               	addwf	?___wmul& (0+255),w,b
  4933  00156E  6EF6               	movwf	tblptrl,c
  4934  001570  0EFE               	movlw	high __powers_
  4935  001572  0100               	movlb	0	; () banked
  4936  001574  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  4937  001576  6EF7               	movwf	tblptrh,c
  4938  001578                     	if	0	;There are less than 3 active tblptr bytes
  4939  001578                     	endif
  4940  001578  0009               	tblrd		*+
  4941  00157A  CFF5 F0AF          	movff	tablat,___ftmul@f1
  4942  00157E  0009               	tblrd		*+
  4943  001580  CFF5 F0B0          	movff	tablat,___ftmul@f1+1
  4944  001584  000A               	tblrd		*-
  4945  001586  CFF5 F0B1          	movff	tablat,___ftmul@f1+2
  4946  00158A  0E00               	movlw	0
  4947  00158C  0100               	movlb	0	; () banked
  4948  00158E  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4949  001590  0E03               	movlw	3
  4950  001592  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  4951  001594  0E00               	movlw	0
  4952  001596  0100               	movlb	0	; () banked
  4953  001598  6F91               	movwf	(___awmod@divisor+1)& (0+255),b
  4954  00159A  0E0A               	movlw	10
  4955  00159C  6F90               	movwf	___awmod@divisor& (0+255),b
  4956  00159E  0100               	movlb	0	; () banked
  4957  0015A0  51C4               	movf	scale@scl& (0+255),w,b
  4958  0015A2  0100               	movlb	0	; () banked
  4959  0015A4  6F8E               	movwf	___awmod@dividend& (0+255),b
  4960  0015A6  6B8F               	clrf	(___awmod@dividend+1)& (0+255),b
  4961  0015A8  BF8E               	btfsc	___awmod@dividend& (0+255),7,b
  4962  0015AA  078F               	decf	(___awmod@dividend+1)& (0+255),f,b
  4963  0015AC  ECED  F01F         	call	___awmod	;wreg free
  4964  0015B0  C08E  F09C         	movff	?___awmod,___wmul@multiplier
  4965  0015B4  C08F  F09D         	movff	?___awmod+1,___wmul@multiplier+1
  4966  0015B8  EC50  F025         	call	___wmul	;wreg free
  4967  0015BC  0E12               	movlw	low __powers_
  4968  0015BE  0100               	movlb	0	; () banked
  4969  0015C0  259C               	addwf	?___wmul& (0+255),w,b
  4970  0015C2  6EF6               	movwf	tblptrl,c
  4971  0015C4  0EFE               	movlw	high __powers_
  4972  0015C6  0100               	movlb	0	; () banked
  4973  0015C8  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  4974  0015CA  6EF7               	movwf	tblptrh,c
  4975  0015CC                     	if	0	;There are less than 3 active tblptr bytes
  4976  0015CC                     	endif
  4977  0015CC  0009               	tblrd		*+
  4978  0015CE  CFF5 F0B2          	movff	tablat,___ftmul@f2
  4979  0015D2  0009               	tblrd		*+
  4980  0015D4  CFF5 F0B3          	movff	tablat,___ftmul@f2+1
  4981  0015D8  000A               	tblrd		*-
  4982  0015DA  CFF5 F0B4          	movff	tablat,___ftmul@f2+2
  4983  0015DE  EC94  F015         	call	___ftmul	;wreg free
  4984  0015E2  D796               	goto	L3
  4985  0015E4                     l4406:
  4986                           
  4987                           ;doprnt.c: 440: return _powers_[scl];
  4988  0015E4  0100               	movlb	0	; () banked
  4989  0015E6  51C4               	movf	scale@scl& (0+255),w,b
  4990  0015E8  0D03               	mullw	3
  4991  0015EA  0E12               	movlw	low __powers_
  4992  0015EC  24F3               	addwf	prodl,w,c
  4993  0015EE  6EF6               	movwf	tblptrl,c
  4994  0015F0  0EFE               	movlw	high __powers_
  4995  0015F2  20F4               	addwfc	prodh,w,c
  4996  0015F4  6EF7               	movwf	tblptrh,c
  4997  0015F6                     	if	0	;There are less than 3 active tblptr bytes
  4998  0015F6                     	endif
  4999  0015F6  0009               	tblrd		*+
  5000  0015F8  CFF5 F0BE          	movff	tablat,?_scale
  5001  0015FC  0009               	tblrd		*+
  5002  0015FE  CFF5 F0BF          	movff	tablat,?_scale+1
  5003  001602  000A               	tblrd		*-
  5004  001604  CFF5 F0C0          	movff	tablat,?_scale+2
  5005  001608  0012               	return	
  5006  00160A                     __end_of_scale:
  5007                           	opt stack 0
  5008                           tblptru	equ	0xFF8
  5009                           tblptrh	equ	0xFF7
  5010                           tblptrl	equ	0xFF6
  5011                           tablat	equ	0xFF5
  5012                           prodh	equ	0xFF4
  5013                           prodl	equ	0xFF3
  5014                           postinc0	equ	0xFEE
  5015                           wreg	equ	0xFE8
  5016                           postdec1	equ	0xFE5
  5017                           fsr1l	equ	0xFE1
  5018                           indf2	equ	0xFDF
  5019                           postinc2	equ	0xFDE
  5020                           postdec2	equ	0xFDD
  5021                           fsr2h	equ	0xFDA
  5022                           fsr2l	equ	0xFD9
  5023                           status	equ	0xFD8
  5024                           
  5025 ;; *************** function _putch *****************
  5026 ;; Defined at:
  5027 ;;		line 35 in file "lcd.c"
  5028 ;; Parameters:    Size  Location     Type
  5029 ;;  data            1    wreg     unsigned char 
  5030 ;; Auto vars:     Size  Location     Type
  5031 ;;  data            1   18[BANK0 ] unsigned char 
  5032 ;; Return value:  Size  Location     Type
  5033 ;;                  1    wreg      void 
  5034 ;; Registers used:
  5035 ;;		wreg, status,2, status,0, cstack
  5036 ;; Tracked objects:
  5037 ;;		On entry : 0/0
  5038 ;;		On exit  : 0/0
  5039 ;;		Unchanged: 0/0
  5040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5042 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5044 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5045 ;;Total ram usage:        1 bytes
  5046 ;; Hardware stack levels used:    1
  5047 ;; Hardware stack levels required when called:    9
  5048 ;; This function calls:
  5049 ;;		_lcdNewline
  5050 ;;		_lcdNibble
  5051 ;; This function is called by:
  5052 ;;		_printf
  5053 ;; This function uses a non-reentrant model
  5054 ;;
  5055                           
  5056                           	psect	text6
  5057  004B88                     __ptext6:
  5058                           	opt stack 0
  5059  004B88                     _putch:
  5060                           	opt stack 19
  5061                           
  5062                           ;incstack = 0
  5063                           ;putch@data stored from wreg
  5064  004B88  0100               	movlb	0	; () banked
  5065  004B8A  6F92               	movwf	putch@data& (0+255),b
  5066                           
  5067                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  5068  004B8C  0E0A               	movlw	10
  5069  004B8E  0100               	movlb	0	; () banked
  5070  004B90  1992               	xorwf	putch@data& (0+255),w,b
  5071  004B92  A4D8               	btfss	status,2,c
  5072  004B94  D003               	goto	l170
  5073                           
  5074                           ; BSR set to: 0
  5075  004B96  EC2A  F026         	call	_lcdNewline	;wreg free
  5076  004B9A  0012               	return	
  5077  004B9C                     l170:
  5078                           
  5079                           ; BSR set to: 0
  5080                           ;lcd.c: 37: else
  5081                           ;lcd.c: 38: {
  5082                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  5083  004B9C  848C               	bsf	3980,2,c	;volatile
  5084                           
  5085                           ; BSR set to: 0
  5086                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  5087  004B9E  0E74               	movlw	116
  5088  004BA0                     u7457:
  5089  004BA0  2EE8               	decfsz	wreg,f,c
  5090  004BA2  D7FE               	bra	u7457
  5091  004BA4  D000               	nop2	
  5092                           
  5093                           ;lcd.c: 41: lcdNibble(data);
  5094  004BA6  0100               	movlb	0	; () banked
  5095  004BA8  5192               	movf	putch@data& (0+255),w,b
  5096  004BAA  EC77  F022         	call	_lcdNibble
  5097  004BAE  0012               	return	
  5098  004BB0                     __end_of_putch:
  5099                           	opt stack 0
  5100                           tblptru	equ	0xFF8
  5101                           tblptrh	equ	0xFF7
  5102                           tblptrl	equ	0xFF6
  5103                           tablat	equ	0xFF5
  5104                           prodh	equ	0xFF4
  5105                           prodl	equ	0xFF3
  5106                           postinc0	equ	0xFEE
  5107                           wreg	equ	0xFE8
  5108                           postdec1	equ	0xFE5
  5109                           fsr1l	equ	0xFE1
  5110                           indf2	equ	0xFDF
  5111                           postinc2	equ	0xFDE
  5112                           postdec2	equ	0xFDD
  5113                           fsr2h	equ	0xFDA
  5114                           fsr2l	equ	0xFD9
  5115                           status	equ	0xFD8
  5116                           
  5117 ;; *************** function _lcdNewline *****************
  5118 ;; Defined at:
  5119 ;;		line 78 in file "lcd.c"
  5120 ;; Parameters:    Size  Location     Type
  5121 ;;		None
  5122 ;; Auto vars:     Size  Location     Type
  5123 ;;		None
  5124 ;; Return value:  Size  Location     Type
  5125 ;;                  1    wreg      void 
  5126 ;; Registers used:
  5127 ;;		wreg, status,2, status,0, cstack
  5128 ;; Tracked objects:
  5129 ;;		On entry : 0/0
  5130 ;;		On exit  : 0/0
  5131 ;;		Unchanged: 0/0
  5132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5137 ;;Total ram usage:        0 bytes
  5138 ;; Hardware stack levels used:    1
  5139 ;; Hardware stack levels required when called:    8
  5140 ;; This function calls:
  5141 ;;		_lcdInst
  5142 ;; This function is called by:
  5143 ;;		_putch
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147                           	psect	text7
  5148  004C54                     __ptext7:
  5149                           	opt stack 0
  5150  004C54                     _lcdNewline:
  5151                           	opt stack 19
  5152                           
  5153                           ;lcd.c: 79: lcdInst(0b11000000);
  5154                           
  5155                           ;incstack = 0
  5156  004C54  0EC0               	movlw	192
  5157  004C56  ECAF  F025         	call	_lcdInst
  5158  004C5A  0012               	return		;funcret
  5159  004C5C                     __end_of_lcdNewline:
  5160                           	opt stack 0
  5161                           tblptru	equ	0xFF8
  5162                           tblptrh	equ	0xFF7
  5163                           tblptrl	equ	0xFF6
  5164                           tablat	equ	0xFF5
  5165                           prodh	equ	0xFF4
  5166                           prodl	equ	0xFF3
  5167                           postinc0	equ	0xFEE
  5168                           wreg	equ	0xFE8
  5169                           postdec1	equ	0xFE5
  5170                           fsr1l	equ	0xFE1
  5171                           indf2	equ	0xFDF
  5172                           postinc2	equ	0xFDE
  5173                           postdec2	equ	0xFDD
  5174                           fsr2h	equ	0xFDA
  5175                           fsr2l	equ	0xFD9
  5176                           status	equ	0xFD8
  5177                           
  5178 ;; *************** function _fround *****************
  5179 ;; Defined at:
  5180 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5181 ;; Parameters:    Size  Location     Type
  5182 ;;  prec            1    wreg     unsigned char 
  5183 ;; Auto vars:     Size  Location     Type
  5184 ;;  prec            1   71[BANK0 ] unsigned char 
  5185 ;; Return value:  Size  Location     Type
  5186 ;;                  3   62[BANK0 ] unsigned char 
  5187 ;; Registers used:
  5188 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5189 ;; Tracked objects:
  5190 ;;		On entry : 0/0
  5191 ;;		On exit  : 0/0
  5192 ;;		Unchanged: 0/0
  5193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5194 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5195 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5197 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5198 ;;Total ram usage:       10 bytes
  5199 ;; Hardware stack levels used:    1
  5200 ;; Hardware stack levels required when called:    8
  5201 ;; This function calls:
  5202 ;;		___awdiv
  5203 ;;		___awmod
  5204 ;;		___ftmul
  5205 ;;		___wmul
  5206 ;; This function is called by:
  5207 ;;		_printf
  5208 ;; This function uses a non-reentrant model
  5209 ;;
  5210                           
  5211                           	psect	text8
  5212  001D96                     __ptext8:
  5213                           	opt stack 0
  5214  001D96                     _fround:
  5215                           	opt stack 20
  5216                           
  5217                           ;incstack = 0
  5218                           ;fround@prec stored from wreg
  5219  001D96  0100               	movlb	0	; () banked
  5220  001D98  6FC7               	movwf	fround@prec& (0+255),b
  5221                           
  5222                           ;doprnt.c: 413: if(prec>=110)
  5223  001D9A  0E6D               	movlw	109
  5224  001D9C  0100               	movlb	0	; () banked
  5225  001D9E  65C7               	cpfsgt	fround@prec& (0+255),b
  5226  001DA0  D0BA               	goto	l4360
  5227                           
  5228                           ; BSR set to: 0
  5229                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5230  001DA2  0E00               	movlw	0
  5231  001DA4  0100               	movlb	0	; () banked
  5232  001DA6  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5233  001DA8  0E03               	movlw	3
  5234  001DAA  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  5235  001DAC  0E00               	movlw	0
  5236  001DAE  0100               	movlb	0	; () banked
  5237  001DB0  6F97               	movwf	(___awdiv@divisor+1)& (0+255),b
  5238  001DB2  0E0A               	movlw	10
  5239  001DB4  6F96               	movwf	___awdiv@divisor& (0+255),b
  5240  001DB6  0E00               	movlw	0
  5241  001DB8  0100               	movlb	0	; () banked
  5242  001DBA  6F91               	movwf	(___awmod@divisor+1)& (0+255),b
  5243  001DBC  0E64               	movlw	100
  5244  001DBE  6F90               	movwf	___awmod@divisor& (0+255),b
  5245  001DC0  C0C7  F08E         	movff	fround@prec,___awmod@dividend
  5246  001DC4  0100               	movlb	0	; () banked
  5247  001DC6  6B8F               	clrf	(___awmod@dividend+1)& (0+255),b
  5248  001DC8  ECED  F01F         	call	___awmod	;wreg free
  5249  001DCC  C08E  F094         	movff	?___awmod,___awdiv@dividend
  5250  001DD0  C08F  F095         	movff	?___awmod+1,___awdiv@dividend+1
  5251  001DD4  EC82  F01E         	call	___awdiv	;wreg free
  5252  001DD8  0E09               	movlw	9
  5253  001DDA  0100               	movlb	0	; () banked
  5254  001DDC  2594               	addwf	?___awdiv& (0+255),w,b
  5255  001DDE  0100               	movlb	0	; () banked
  5256  001DE0  6F9C               	movwf	___wmul@multiplier& (0+255),b
  5257  001DE2  0E00               	movlw	0
  5258  001DE4  0100               	movlb	0	; () banked
  5259  001DE6  2195               	addwfc	(?___awdiv+1)& (0+255),w,b
  5260  001DE8  0100               	movlb	0	; () banked
  5261  001DEA  6F9D               	movwf	(___wmul@multiplier+1)& (0+255),b
  5262  001DEC  EC50  F025         	call	___wmul	;wreg free
  5263  001DF0  0EEB               	movlw	low __npowers_
  5264  001DF2  0100               	movlb	0	; () banked
  5265  001DF4  259C               	addwf	?___wmul& (0+255),w,b
  5266  001DF6  6EF6               	movwf	tblptrl,c
  5267  001DF8  0EFD               	movlw	high __npowers_
  5268  001DFA  0100               	movlb	0	; () banked
  5269  001DFC  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  5270  001DFE  6EF7               	movwf	tblptrh,c
  5271  001E00                     	if	0	;There are less than 3 active tblptr bytes
  5272  001E00                     	endif
  5273  001E00  0009               	tblrd		*+
  5274  001E02  CFF5 F0B2          	movff	tablat,___ftmul@f2
  5275  001E06  0009               	tblrd		*+
  5276  001E08  CFF5 F0B3          	movff	tablat,___ftmul@f2+1
  5277  001E0C  000A               	tblrd		*-
  5278  001E0E  CFF5 F0B4          	movff	tablat,___ftmul@f2+2
  5279  001E12  0E00               	movlw	0
  5280  001E14  0100               	movlb	0	; () banked
  5281  001E16  6F97               	movwf	(___awdiv@divisor+1)& (0+255),b
  5282  001E18  0E64               	movlw	100
  5283  001E1A  6F96               	movwf	___awdiv@divisor& (0+255),b
  5284  001E1C  C0C7  F094         	movff	fround@prec,___awdiv@dividend
  5285  001E20  0100               	movlb	0	; () banked
  5286  001E22  6B95               	clrf	(___awdiv@dividend+1)& (0+255),b
  5287  001E24  EC82  F01E         	call	___awdiv	;wreg free
  5288  001E28  0E12               	movlw	18
  5289  001E2A  0100               	movlb	0	; () banked
  5290  001E2C  2594               	addwf	?___awdiv& (0+255),w,b
  5291  001E2E  0100               	movlb	0	; () banked
  5292  001E30  6F9C               	movwf	___wmul@multiplier& (0+255),b
  5293  001E32  0E00               	movlw	0
  5294  001E34  0100               	movlb	0	; () banked
  5295  001E36  2195               	addwfc	(?___awdiv+1)& (0+255),w,b
  5296  001E38  0100               	movlb	0	; () banked
  5297  001E3A  6F9D               	movwf	(___wmul@multiplier+1)& (0+255),b
  5298  001E3C  0E00               	movlw	0
  5299  001E3E  0100               	movlb	0	; () banked
  5300  001E40  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5301  001E42  0E03               	movlw	3
  5302  001E44  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  5303  001E46  EC50  F025         	call	___wmul	;wreg free
  5304  001E4A  0EEB               	movlw	low __npowers_
  5305  001E4C  0100               	movlb	0	; () banked
  5306  001E4E  259C               	addwf	?___wmul& (0+255),w,b
  5307  001E50  6EF6               	movwf	tblptrl,c
  5308  001E52  0EFD               	movlw	high __npowers_
  5309  001E54  0100               	movlb	0	; () banked
  5310  001E56  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  5311  001E58  6EF7               	movwf	tblptrh,c
  5312  001E5A                     	if	0	;There are less than 3 active tblptr bytes
  5313  001E5A                     	endif
  5314  001E5A  0009               	tblrd		*+
  5315  001E5C  CFF5 F0AF          	movff	tablat,___ftmul@f1
  5316  001E60  0009               	tblrd		*+
  5317  001E62  CFF5 F0B0          	movff	tablat,___ftmul@f1+1
  5318  001E66  000A               	tblrd		*-
  5319  001E68  CFF5 F0B1          	movff	tablat,___ftmul@f1+2
  5320  001E6C  EC94  F015         	call	___ftmul	;wreg free
  5321  001E70  C0AF  F0C4         	movff	?___ftmul,_fround$1320
  5322  001E74  C0B0  F0C5         	movff	?___ftmul+1,_fround$1320+1
  5323  001E78  C0B1  F0C6         	movff	?___ftmul+2,_fround$1320+2
  5324                           
  5325                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5326  001E7C  0E00               	movlw	0
  5327  001E7E  0100               	movlb	0	; () banked
  5328  001E80  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5329  001E82  0E03               	movlw	3
  5330  001E84  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  5331  001E86  0E00               	movlw	0
  5332  001E88  0100               	movlb	0	; () banked
  5333  001E8A  6F91               	movwf	(___awmod@divisor+1)& (0+255),b
  5334  001E8C  0E0A               	movlw	10
  5335  001E8E  6F90               	movwf	___awmod@divisor& (0+255),b
  5336  001E90  C0C7  F08E         	movff	fround@prec,___awmod@dividend
  5337  001E94  0100               	movlb	0	; () banked
  5338  001E96  6B8F               	clrf	(___awmod@dividend+1)& (0+255),b
  5339  001E98  ECED  F01F         	call	___awmod	;wreg free
  5340  001E9C  C08E  F09C         	movff	?___awmod,___wmul@multiplier
  5341  001EA0  C08F  F09D         	movff	?___awmod+1,___wmul@multiplier+1
  5342  001EA4  EC50  F025         	call	___wmul	;wreg free
  5343  001EA8  0EEB               	movlw	low __npowers_
  5344  001EAA  0100               	movlb	0	; () banked
  5345  001EAC  259C               	addwf	?___wmul& (0+255),w,b
  5346  001EAE  6EF6               	movwf	tblptrl,c
  5347  001EB0  0EFD               	movlw	high __npowers_
  5348  001EB2  0100               	movlb	0	; () banked
  5349  001EB4  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  5350  001EB6  6EF7               	movwf	tblptrh,c
  5351  001EB8                     	if	0	;There are less than 3 active tblptr bytes
  5352  001EB8                     	endif
  5353  001EB8  0009               	tblrd		*+
  5354  001EBA  CFF5 F0B2          	movff	tablat,___ftmul@f2
  5355  001EBE  0009               	tblrd		*+
  5356  001EC0  CFF5 F0B3          	movff	tablat,___ftmul@f2+1
  5357  001EC4  000A               	tblrd		*-
  5358  001EC6  CFF5 F0B4          	movff	tablat,___ftmul@f2+2
  5359  001ECA  C0C4  F0AF         	movff	_fround$1320,___ftmul@f1
  5360  001ECE  C0C5  F0B0         	movff	_fround$1320+1,___ftmul@f1+1
  5361  001ED2  C0C6  F0B1         	movff	_fround$1320+2,___ftmul@f1+2
  5362  001ED6  EC94  F015         	call	___ftmul	;wreg free
  5363  001EDA  C0AF  F0C1         	movff	?___ftmul,_fround$1321
  5364  001EDE  C0B0  F0C2         	movff	?___ftmul+1,_fround$1321+1
  5365  001EE2  C0B1  F0C3         	movff	?___ftmul+2,_fround$1321+2
  5366                           
  5367                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5368  001EE6  C0C1  F0AF         	movff	_fround$1321,___ftmul@f1
  5369  001EEA  C0C2  F0B0         	movff	_fround$1321+1,___ftmul@f1+1
  5370  001EEE  C0C3  F0B1         	movff	_fround$1321+2,___ftmul@f1+2
  5371  001EF2  0E00               	movlw	0
  5372  001EF4  0100               	movlb	0	; () banked
  5373  001EF6  6FB2               	movwf	___ftmul@f2& (0+255),b
  5374  001EF8  0E00               	movlw	0
  5375  001EFA  0100               	movlb	0	; () banked
  5376  001EFC  6FB3               	movwf	(___ftmul@f2+1)& (0+255),b
  5377  001EFE  0E3F               	movlw	63
  5378  001F00  0100               	movlb	0	; () banked
  5379  001F02  6FB4               	movwf	(___ftmul@f2+2)& (0+255),b
  5380  001F04  EC94  F015         	call	___ftmul	;wreg free
  5381  001F08  C0AF  F0BE         	movff	?___ftmul,?_fround
  5382  001F0C  C0B0  F0BF         	movff	?___ftmul+1,?_fround+1
  5383  001F10  C0B1  F0C0         	movff	?___ftmul+2,?_fround+2
  5384  001F14  0012               	return	
  5385  001F16                     l4360:
  5386                           
  5387                           ;doprnt.c: 415: else if(prec > 10)
  5388  001F16  0E0A               	movlw	10
  5389  001F18  0100               	movlb	0	; () banked
  5390  001F1A  65C7               	cpfsgt	fround@prec& (0+255),b
  5391  001F1C  D06E               	goto	l4368
  5392                           
  5393                           ; BSR set to: 0
  5394                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5395  001F1E  0E00               	movlw	0
  5396  001F20  0100               	movlb	0	; () banked
  5397  001F22  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5398  001F24  0E03               	movlw	3
  5399  001F26  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  5400  001F28  0E00               	movlw	0
  5401  001F2A  0100               	movlb	0	; () banked
  5402  001F2C  6F91               	movwf	(___awmod@divisor+1)& (0+255),b
  5403  001F2E  0E0A               	movlw	10
  5404  001F30  6F90               	movwf	___awmod@divisor& (0+255),b
  5405  001F32  C0C7  F08E         	movff	fround@prec,___awmod@dividend
  5406  001F36  0100               	movlb	0	; () banked
  5407  001F38  6B8F               	clrf	(___awmod@dividend+1)& (0+255),b
  5408  001F3A  ECED  F01F         	call	___awmod	;wreg free
  5409  001F3E  C08E  F09C         	movff	?___awmod,___wmul@multiplier
  5410  001F42  C08F  F09D         	movff	?___awmod+1,___wmul@multiplier+1
  5411  001F46  EC50  F025         	call	___wmul	;wreg free
  5412  001F4A  0EEB               	movlw	low __npowers_
  5413  001F4C  0100               	movlb	0	; () banked
  5414  001F4E  259C               	addwf	?___wmul& (0+255),w,b
  5415  001F50  6EF6               	movwf	tblptrl,c
  5416  001F52  0EFD               	movlw	high __npowers_
  5417  001F54  0100               	movlb	0	; () banked
  5418  001F56  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  5419  001F58  6EF7               	movwf	tblptrh,c
  5420  001F5A                     	if	0	;There are less than 3 active tblptr bytes
  5421  001F5A                     	endif
  5422  001F5A  0009               	tblrd		*+
  5423  001F5C  CFF5 F0B2          	movff	tablat,___ftmul@f2
  5424  001F60  0009               	tblrd		*+
  5425  001F62  CFF5 F0B3          	movff	tablat,___ftmul@f2+1
  5426  001F66  000A               	tblrd		*-
  5427  001F68  CFF5 F0B4          	movff	tablat,___ftmul@f2+2
  5428  001F6C  0E00               	movlw	0
  5429  001F6E  0100               	movlb	0	; () banked
  5430  001F70  6F97               	movwf	(___awdiv@divisor+1)& (0+255),b
  5431  001F72  0E0A               	movlw	10
  5432  001F74  6F96               	movwf	___awdiv@divisor& (0+255),b
  5433  001F76  C0C7  F094         	movff	fround@prec,___awdiv@dividend
  5434  001F7A  0100               	movlb	0	; () banked
  5435  001F7C  6B95               	clrf	(___awdiv@dividend+1)& (0+255),b
  5436  001F7E  EC82  F01E         	call	___awdiv	;wreg free
  5437  001F82  0E09               	movlw	9
  5438  001F84  0100               	movlb	0	; () banked
  5439  001F86  2594               	addwf	?___awdiv& (0+255),w,b
  5440  001F88  0100               	movlb	0	; () banked
  5441  001F8A  6F9C               	movwf	___wmul@multiplier& (0+255),b
  5442  001F8C  0E00               	movlw	0
  5443  001F8E  0100               	movlb	0	; () banked
  5444  001F90  2195               	addwfc	(?___awdiv+1)& (0+255),w,b
  5445  001F92  0100               	movlb	0	; () banked
  5446  001F94  6F9D               	movwf	(___wmul@multiplier+1)& (0+255),b
  5447  001F96  0E00               	movlw	0
  5448  001F98  0100               	movlb	0	; () banked
  5449  001F9A  6F9F               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5450  001F9C  0E03               	movlw	3
  5451  001F9E  6F9E               	movwf	___wmul@multiplicand& (0+255),b
  5452  001FA0  EC50  F025         	call	___wmul	;wreg free
  5453  001FA4  0EEB               	movlw	low __npowers_
  5454  001FA6  0100               	movlb	0	; () banked
  5455  001FA8  259C               	addwf	?___wmul& (0+255),w,b
  5456  001FAA  6EF6               	movwf	tblptrl,c
  5457  001FAC  0EFD               	movlw	high __npowers_
  5458  001FAE  0100               	movlb	0	; () banked
  5459  001FB0  219D               	addwfc	(?___wmul+1)& (0+255),w,b
  5460  001FB2  6EF7               	movwf	tblptrh,c
  5461  001FB4                     	if	0	;There are less than 3 active tblptr bytes
  5462  001FB4                     	endif
  5463  001FB4  0009               	tblrd		*+
  5464  001FB6  CFF5 F0AF          	movff	tablat,___ftmul@f1
  5465  001FBA  0009               	tblrd		*+
  5466  001FBC  CFF5 F0B0          	movff	tablat,___ftmul@f1+1
  5467  001FC0  000A               	tblrd		*-
  5468  001FC2  CFF5 F0B1          	movff	tablat,___ftmul@f1+2
  5469  001FC6  EC94  F015         	call	___ftmul	;wreg free
  5470  001FCA  C0AF  F0C4         	movff	?___ftmul,_fround$1320
  5471  001FCE  C0B0  F0C5         	movff	?___ftmul+1,_fround$1320+1
  5472  001FD2  C0B1  F0C6         	movff	?___ftmul+2,_fround$1320+2
  5473                           
  5474                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5475  001FD6  C0C4  F0AF         	movff	_fround$1320,___ftmul@f1
  5476  001FDA  C0C5  F0B0         	movff	_fround$1320+1,___ftmul@f1+1
  5477  001FDE  C0C6  F0B1         	movff	_fround$1320+2,___ftmul@f1+2
  5478  001FE2  0E00               	movlw	0
  5479  001FE4  0100               	movlb	0	; () banked
  5480  001FE6  6FB2               	movwf	___ftmul@f2& (0+255),b
  5481  001FE8  0E00               	movlw	0
  5482  001FEA  0100               	movlb	0	; () banked
  5483  001FEC  6FB3               	movwf	(___ftmul@f2+1)& (0+255),b
  5484  001FEE  0E3F               	movlw	63
  5485  001FF0  0100               	movlb	0	; () banked
  5486  001FF2  6FB4               	movwf	(___ftmul@f2+2)& (0+255),b
  5487  001FF4  EC94  F015         	call	___ftmul	;wreg free
  5488  001FF8  D787               	goto	L4
  5489  001FFA                     l4368:
  5490                           
  5491                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5492  001FFA  0100               	movlb	0	; () banked
  5493  001FFC  51C7               	movf	fround@prec& (0+255),w,b
  5494  001FFE  0D03               	mullw	3
  5495  002000  0EEB               	movlw	low __npowers_
  5496  002002  24F3               	addwf	prodl,w,c
  5497  002004  6EF6               	movwf	tblptrl,c
  5498  002006  0EFD               	movlw	high __npowers_
  5499  002008  20F4               	addwfc	prodh,w,c
  5500  00200A  6EF7               	movwf	tblptrh,c
  5501  00200C                     	if	0	;There are less than 3 active tblptr bytes
  5502  00200C                     	endif
  5503  00200C  0009               	tblrd		*+
  5504  00200E  CFF5 F0AF          	movff	tablat,___ftmul@f1
  5505  002012  0009               	tblrd		*+
  5506  002014  CFF5 F0B0          	movff	tablat,___ftmul@f1+1
  5507  002018  000A               	tblrd		*-
  5508  00201A  CFF5 F0B1          	movff	tablat,___ftmul@f1+2
  5509  00201E  0E00               	movlw	0
  5510  002020  0100               	movlb	0	; () banked
  5511  002022  6FB2               	movwf	___ftmul@f2& (0+255),b
  5512  002024  0E00               	movlw	0
  5513  002026  0100               	movlb	0	; () banked
  5514  002028  6FB3               	movwf	(___ftmul@f2+1)& (0+255),b
  5515  00202A  0E3F               	movlw	63
  5516  00202C  0100               	movlb	0	; () banked
  5517  00202E  6FB4               	movwf	(___ftmul@f2+2)& (0+255),b
  5518  002030  EC94  F015         	call	___ftmul	;wreg free
  5519  002034  C0AF  F0BE         	movff	?___ftmul,?_fround
  5520  002038  C0B0  F0BF         	movff	?___ftmul+1,?_fround+1
  5521  00203C  C0B1  F0C0         	movff	?___ftmul+2,?_fround+2
  5522  002040  0012               	return	
  5523  002042                     __end_of_fround:
  5524                           	opt stack 0
  5525                           tblptru	equ	0xFF8
  5526                           tblptrh	equ	0xFF7
  5527                           tblptrl	equ	0xFF6
  5528                           tablat	equ	0xFF5
  5529                           prodh	equ	0xFF4
  5530                           prodl	equ	0xFF3
  5531                           postinc0	equ	0xFEE
  5532                           wreg	equ	0xFE8
  5533                           postdec1	equ	0xFE5
  5534                           fsr1l	equ	0xFE1
  5535                           indf2	equ	0xFDF
  5536                           postinc2	equ	0xFDE
  5537                           postdec2	equ	0xFDD
  5538                           fsr2h	equ	0xFDA
  5539                           fsr2l	equ	0xFD9
  5540                           status	equ	0xFD8
  5541                           
  5542 ;; *************** function ___wmul *****************
  5543 ;; Defined at:
  5544 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  5545 ;; Parameters:    Size  Location     Type
  5546 ;;  multiplier      2   28[BANK0 ] unsigned int 
  5547 ;;  multiplicand    2   30[BANK0 ] unsigned int 
  5548 ;; Auto vars:     Size  Location     Type
  5549 ;;  product         2   32[BANK0 ] unsigned int 
  5550 ;; Return value:  Size  Location     Type
  5551 ;;                  2   28[BANK0 ] unsigned int 
  5552 ;; Registers used:
  5553 ;;		wreg, status,2, status,0, prodl, prodh
  5554 ;; Tracked objects:
  5555 ;;		On entry : 0/0
  5556 ;;		On exit  : 0/0
  5557 ;;		Unchanged: 0/0
  5558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5559 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5560 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5562 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5563 ;;Total ram usage:        6 bytes
  5564 ;; Hardware stack levels used:    1
  5565 ;; Hardware stack levels required when called:    6
  5566 ;; This function calls:
  5567 ;;		Nothing
  5568 ;; This function is called by:
  5569 ;;		_fround
  5570 ;;		_scale
  5571 ;;		_printf
  5572 ;; This function uses a non-reentrant model
  5573 ;;
  5574                           
  5575                           	psect	text9
  5576  004AA0                     __ptext9:
  5577                           	opt stack 0
  5578  004AA0                     ___wmul:
  5579                           	opt stack 21
  5580                           
  5581                           ;incstack = 0
  5582  004AA0  0100               	movlb	0	; () banked
  5583  004AA2  519C               	movf	___wmul@multiplier& (0+255),w,b
  5584  004AA4  0100               	movlb	0	; () banked
  5585  004AA6  039E               	mulwf	___wmul@multiplicand& (0+255),b
  5586  004AA8  CFF3 F0A0          	movff	prodl,___wmul@product
  5587  004AAC  CFF4 F0A1          	movff	prodh,___wmul@product+1
  5588  004AB0  0100               	movlb	0	; () banked
  5589  004AB2  519C               	movf	___wmul@multiplier& (0+255),w,b
  5590  004AB4  0100               	movlb	0	; () banked
  5591  004AB6  039F               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  5592  004AB8  50F3               	movf	prodl,w,c
  5593  004ABA  0100               	movlb	0	; () banked
  5594  004ABC  27A1               	addwf	(___wmul@product+1)& (0+255),f,b
  5595  004ABE  0100               	movlb	0	; () banked
  5596  004AC0  519D               	movf	(___wmul@multiplier+1)& (0+255),w,b
  5597  004AC2  0100               	movlb	0	; () banked
  5598  004AC4  039E               	mulwf	___wmul@multiplicand& (0+255),b
  5599  004AC6  50F3               	movf	prodl,w,c
  5600  004AC8  0100               	movlb	0	; () banked
  5601  004ACA  27A1               	addwf	(___wmul@product+1)& (0+255),f,b
  5602                           
  5603                           ; BSR set to: 0
  5604  004ACC  C0A0  F09C         	movff	___wmul@product,?___wmul
  5605  004AD0  C0A1  F09D         	movff	___wmul@product+1,?___wmul+1
  5606  004AD4  0012               	return	
  5607  004AD6                     __end_of___wmul:
  5608                           	opt stack 0
  5609                           tblptru	equ	0xFF8
  5610                           tblptrh	equ	0xFF7
  5611                           tblptrl	equ	0xFF6
  5612                           tablat	equ	0xFF5
  5613                           prodh	equ	0xFF4
  5614                           prodl	equ	0xFF3
  5615                           postinc0	equ	0xFEE
  5616                           wreg	equ	0xFE8
  5617                           postdec1	equ	0xFE5
  5618                           fsr1l	equ	0xFE1
  5619                           indf2	equ	0xFDF
  5620                           postinc2	equ	0xFDE
  5621                           postdec2	equ	0xFDD
  5622                           fsr2h	equ	0xFDA
  5623                           fsr2l	equ	0xFD9
  5624                           status	equ	0xFD8
  5625                           
  5626 ;; *************** function ___awmod *****************
  5627 ;; Defined at:
  5628 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  5629 ;; Parameters:    Size  Location     Type
  5630 ;;  dividend        2   14[BANK0 ] int 
  5631 ;;  divisor         2   16[BANK0 ] int 
  5632 ;; Auto vars:     Size  Location     Type
  5633 ;;  sign            1   19[BANK0 ] unsigned char 
  5634 ;;  counter         1   18[BANK0 ] unsigned char 
  5635 ;; Return value:  Size  Location     Type
  5636 ;;                  2   14[BANK0 ] int 
  5637 ;; Registers used:
  5638 ;;		wreg, status,2, status,0
  5639 ;; Tracked objects:
  5640 ;;		On entry : 0/0
  5641 ;;		On exit  : 0/0
  5642 ;;		Unchanged: 0/0
  5643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5644 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5645 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5647 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5648 ;;Total ram usage:        6 bytes
  5649 ;; Hardware stack levels used:    1
  5650 ;; Hardware stack levels required when called:    6
  5651 ;; This function calls:
  5652 ;;		Nothing
  5653 ;; This function is called by:
  5654 ;;		_fround
  5655 ;;		_scale
  5656 ;; This function uses a non-reentrant model
  5657 ;;
  5658                           
  5659                           	psect	text10
  5660  003FDA                     __ptext10:
  5661                           	opt stack 0
  5662  003FDA                     ___awmod:
  5663                           	opt stack 21
  5664                           
  5665                           ; BSR set to: 0
  5666                           ;incstack = 0
  5667  003FDA  0E00               	movlw	0
  5668  003FDC  0100               	movlb	0	; () banked
  5669  003FDE  6F93               	movwf	___awmod@sign& (0+255),b
  5670                           
  5671                           ; BSR set to: 0
  5672  003FE0  0100               	movlb	0	; () banked
  5673  003FE2  AF8F               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5674  003FE4  D008               	goto	l4296
  5675                           
  5676                           ; BSR set to: 0
  5677  003FE6  0100               	movlb	0	; () banked
  5678  003FE8  6D8E               	negf	___awmod@dividend& (0+255),b
  5679  003FEA  1F8F               	comf	(___awmod@dividend+1)& (0+255),f,b
  5680  003FEC  B0D8               	btfsc	status,0,c
  5681  003FEE  2B8F               	incf	(___awmod@dividend+1)& (0+255),f,b
  5682                           
  5683                           ; BSR set to: 0
  5684  003FF0  0E01               	movlw	1
  5685  003FF2  0100               	movlb	0	; () banked
  5686  003FF4  6F93               	movwf	___awmod@sign& (0+255),b
  5687  003FF6                     l4296:
  5688                           
  5689                           ; BSR set to: 0
  5690  003FF6  0100               	movlb	0	; () banked
  5691  003FF8  AF91               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5692  003FFA  D005               	goto	l4300
  5693                           
  5694                           ; BSR set to: 0
  5695  003FFC  0100               	movlb	0	; () banked
  5696  003FFE  6D90               	negf	___awmod@divisor& (0+255),b
  5697  004000  1F91               	comf	(___awmod@divisor+1)& (0+255),f,b
  5698  004002  B0D8               	btfsc	status,0,c
  5699  004004  2B91               	incf	(___awmod@divisor+1)& (0+255),f,b
  5700  004006                     l4300:
  5701                           
  5702                           ; BSR set to: 0
  5703  004006  0100               	movlb	0	; () banked
  5704  004008  5190               	movf	___awmod@divisor& (0+255),w,b
  5705  00400A  0100               	movlb	0	; () banked
  5706  00400C  1191               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5707  00400E  B4D8               	btfsc	status,2,c
  5708  004010  D026               	goto	l4316
  5709                           
  5710                           ; BSR set to: 0
  5711  004012  0E01               	movlw	1
  5712  004014  0100               	movlb	0	; () banked
  5713  004016  6F92               	movwf	___awmod@counter& (0+255),b
  5714  004018  D006               	goto	l4306
  5715  00401A                     l4304:
  5716                           
  5717                           ; BSR set to: 0
  5718  00401A  0100               	movlb	0	; () banked
  5719  00401C  90D8               	bcf	status,0,c
  5720  00401E  3790               	rlcf	___awmod@divisor& (0+255),f,b
  5721  004020  3791               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5722  004022  0100               	movlb	0	; () banked
  5723  004024  2B92               	incf	___awmod@counter& (0+255),f,b
  5724  004026                     l4306:
  5725                           
  5726                           ; BSR set to: 0
  5727  004026  0100               	movlb	0	; () banked
  5728  004028  AF91               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5729  00402A  D7F7               	goto	l4304
  5730  00402C                     l4308:
  5731                           
  5732                           ; BSR set to: 0
  5733  00402C  0100               	movlb	0	; () banked
  5734  00402E  5190               	movf	___awmod@divisor& (0+255),w,b
  5735  004030  0100               	movlb	0	; () banked
  5736  004032  5D8E               	subwf	___awmod@dividend& (0+255),w,b
  5737  004034  0100               	movlb	0	; () banked
  5738  004036  5191               	movf	(___awmod@divisor+1)& (0+255),w,b
  5739  004038  0100               	movlb	0	; () banked
  5740  00403A  598F               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5741  00403C  A0D8               	btfss	status,0,c
  5742  00403E  D008               	goto	l4312
  5743                           
  5744                           ; BSR set to: 0
  5745  004040  0100               	movlb	0	; () banked
  5746  004042  5190               	movf	___awmod@divisor& (0+255),w,b
  5747  004044  0100               	movlb	0	; () banked
  5748  004046  5F8E               	subwf	___awmod@dividend& (0+255),f,b
  5749  004048  0100               	movlb	0	; () banked
  5750  00404A  5191               	movf	(___awmod@divisor+1)& (0+255),w,b
  5751  00404C  0100               	movlb	0	; () banked
  5752  00404E  5B8F               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5753  004050                     l4312:
  5754                           
  5755                           ; BSR set to: 0
  5756  004050  0100               	movlb	0	; () banked
  5757  004052  90D8               	bcf	status,0,c
  5758  004054  3391               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5759  004056  3390               	rrcf	___awmod@divisor& (0+255),f,b
  5760                           
  5761                           ; BSR set to: 0
  5762  004058  0100               	movlb	0	; () banked
  5763  00405A  2F92               	decfsz	___awmod@counter& (0+255),f,b
  5764  00405C  D7E7               	goto	l4308
  5765  00405E                     l4316:
  5766                           
  5767                           ; BSR set to: 0
  5768  00405E  0100               	movlb	0	; () banked
  5769  004060  5193               	movf	___awmod@sign& (0+255),w,b
  5770  004062  0100               	movlb	0	; () banked
  5771  004064  B4D8               	btfsc	status,2,c
  5772  004066  D005               	goto	l4320
  5773                           
  5774                           ; BSR set to: 0
  5775  004068  0100               	movlb	0	; () banked
  5776  00406A  6D8E               	negf	___awmod@dividend& (0+255),b
  5777  00406C  1F8F               	comf	(___awmod@dividend+1)& (0+255),f,b
  5778  00406E  B0D8               	btfsc	status,0,c
  5779  004070  2B8F               	incf	(___awmod@dividend+1)& (0+255),f,b
  5780  004072                     l4320:
  5781                           
  5782                           ; BSR set to: 0
  5783  004072  C08E  F08E         	movff	___awmod@dividend,?___awmod
  5784  004076  C08F  F08F         	movff	___awmod@dividend+1,?___awmod+1
  5785  00407A  0012               	return	
  5786  00407C                     __end_of___awmod:
  5787                           	opt stack 0
  5788                           tblptru	equ	0xFF8
  5789                           tblptrh	equ	0xFF7
  5790                           tblptrl	equ	0xFF6
  5791                           tablat	equ	0xFF5
  5792                           prodh	equ	0xFF4
  5793                           prodl	equ	0xFF3
  5794                           postinc0	equ	0xFEE
  5795                           wreg	equ	0xFE8
  5796                           postdec1	equ	0xFE5
  5797                           fsr1l	equ	0xFE1
  5798                           indf2	equ	0xFDF
  5799                           postinc2	equ	0xFDE
  5800                           postdec2	equ	0xFDD
  5801                           fsr2h	equ	0xFDA
  5802                           fsr2l	equ	0xFD9
  5803                           status	equ	0xFD8
  5804                           
  5805 ;; *************** function ___awdiv *****************
  5806 ;; Defined at:
  5807 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  5808 ;; Parameters:    Size  Location     Type
  5809 ;;  dividend        2   20[BANK0 ] int 
  5810 ;;  divisor         2   22[BANK0 ] int 
  5811 ;; Auto vars:     Size  Location     Type
  5812 ;;  quotient        2   26[BANK0 ] int 
  5813 ;;  sign            1   25[BANK0 ] unsigned char 
  5814 ;;  counter         1   24[BANK0 ] unsigned char 
  5815 ;; Return value:  Size  Location     Type
  5816 ;;                  2   20[BANK0 ] int 
  5817 ;; Registers used:
  5818 ;;		wreg, status,2, status,0
  5819 ;; Tracked objects:
  5820 ;;		On entry : 0/0
  5821 ;;		On exit  : 0/0
  5822 ;;		Unchanged: 0/0
  5823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5824 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5825 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5827 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5828 ;;Total ram usage:        8 bytes
  5829 ;; Hardware stack levels used:    1
  5830 ;; Hardware stack levels required when called:    6
  5831 ;; This function calls:
  5832 ;;		Nothing
  5833 ;; This function is called by:
  5834 ;;		_fround
  5835 ;;		_scale
  5836 ;;		_printf
  5837 ;; This function uses a non-reentrant model
  5838 ;;
  5839                           
  5840                           	psect	text11
  5841  003D04                     __ptext11:
  5842                           	opt stack 0
  5843  003D04                     ___awdiv:
  5844                           	opt stack 21
  5845                           
  5846                           ; BSR set to: 0
  5847                           ;incstack = 0
  5848  003D04  0E00               	movlw	0
  5849  003D06  0100               	movlb	0	; () banked
  5850  003D08  6F99               	movwf	___awdiv@sign& (0+255),b
  5851                           
  5852                           ; BSR set to: 0
  5853  003D0A  0100               	movlb	0	; () banked
  5854  003D0C  AF97               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5855  003D0E  D008               	goto	l4252
  5856                           
  5857                           ; BSR set to: 0
  5858  003D10  0100               	movlb	0	; () banked
  5859  003D12  6D96               	negf	___awdiv@divisor& (0+255),b
  5860  003D14  1F97               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5861  003D16  B0D8               	btfsc	status,0,c
  5862  003D18  2B97               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5863                           
  5864                           ; BSR set to: 0
  5865  003D1A  0E01               	movlw	1
  5866  003D1C  0100               	movlb	0	; () banked
  5867  003D1E  6F99               	movwf	___awdiv@sign& (0+255),b
  5868  003D20                     l4252:
  5869                           
  5870                           ; BSR set to: 0
  5871  003D20  0100               	movlb	0	; () banked
  5872  003D22  AF95               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5873  003D24  D008               	goto	l4258
  5874                           
  5875                           ; BSR set to: 0
  5876  003D26  0100               	movlb	0	; () banked
  5877  003D28  6D94               	negf	___awdiv@dividend& (0+255),b
  5878  003D2A  1F95               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5879  003D2C  B0D8               	btfsc	status,0,c
  5880  003D2E  2B95               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5881                           
  5882                           ; BSR set to: 0
  5883  003D30  0E01               	movlw	1
  5884  003D32  0100               	movlb	0	; () banked
  5885  003D34  1B99               	xorwf	___awdiv@sign& (0+255),f,b
  5886  003D36                     l4258:
  5887                           
  5888                           ; BSR set to: 0
  5889  003D36  0E00               	movlw	0
  5890  003D38  0100               	movlb	0	; () banked
  5891  003D3A  6F9B               	movwf	(___awdiv@quotient+1)& (0+255),b
  5892  003D3C  0E00               	movlw	0
  5893  003D3E  6F9A               	movwf	___awdiv@quotient& (0+255),b
  5894                           
  5895                           ; BSR set to: 0
  5896  003D40  0100               	movlb	0	; () banked
  5897  003D42  5196               	movf	___awdiv@divisor& (0+255),w,b
  5898  003D44  0100               	movlb	0	; () banked
  5899  003D46  1197               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5900  003D48  B4D8               	btfsc	status,2,c
  5901  003D4A  D02C               	goto	l4280
  5902                           
  5903                           ; BSR set to: 0
  5904  003D4C  0E01               	movlw	1
  5905  003D4E  0100               	movlb	0	; () banked
  5906  003D50  6F98               	movwf	___awdiv@counter& (0+255),b
  5907  003D52  D006               	goto	l4266
  5908  003D54                     l4264:
  5909                           
  5910                           ; BSR set to: 0
  5911  003D54  0100               	movlb	0	; () banked
  5912  003D56  90D8               	bcf	status,0,c
  5913  003D58  3796               	rlcf	___awdiv@divisor& (0+255),f,b
  5914  003D5A  3797               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5915  003D5C  0100               	movlb	0	; () banked
  5916  003D5E  2B98               	incf	___awdiv@counter& (0+255),f,b
  5917  003D60                     l4266:
  5918                           
  5919                           ; BSR set to: 0
  5920  003D60  0100               	movlb	0	; () banked
  5921  003D62  AF97               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5922  003D64  D7F7               	goto	l4264
  5923  003D66                     l4268:
  5924                           
  5925                           ; BSR set to: 0
  5926  003D66  0100               	movlb	0	; () banked
  5927  003D68  90D8               	bcf	status,0,c
  5928  003D6A  379A               	rlcf	___awdiv@quotient& (0+255),f,b
  5929  003D6C  379B               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5930                           
  5931                           ; BSR set to: 0
  5932  003D6E  0100               	movlb	0	; () banked
  5933  003D70  5196               	movf	___awdiv@divisor& (0+255),w,b
  5934  003D72  0100               	movlb	0	; () banked
  5935  003D74  5D94               	subwf	___awdiv@dividend& (0+255),w,b
  5936  003D76  0100               	movlb	0	; () banked
  5937  003D78  5197               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5938  003D7A  0100               	movlb	0	; () banked
  5939  003D7C  5995               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5940  003D7E  A0D8               	btfss	status,0,c
  5941  003D80  D00A               	goto	l4276
  5942                           
  5943                           ; BSR set to: 0
  5944  003D82  0100               	movlb	0	; () banked
  5945  003D84  5196               	movf	___awdiv@divisor& (0+255),w,b
  5946  003D86  0100               	movlb	0	; () banked
  5947  003D88  5F94               	subwf	___awdiv@dividend& (0+255),f,b
  5948  003D8A  0100               	movlb	0	; () banked
  5949  003D8C  5197               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5950  003D8E  0100               	movlb	0	; () banked
  5951  003D90  5B95               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5952                           
  5953                           ; BSR set to: 0
  5954  003D92  0100               	movlb	0	; () banked
  5955  003D94  819A               	bsf	___awdiv@quotient& (0+255),0,b
  5956  003D96                     l4276:
  5957                           
  5958                           ; BSR set to: 0
  5959  003D96  0100               	movlb	0	; () banked
  5960  003D98  90D8               	bcf	status,0,c
  5961  003D9A  3397               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5962  003D9C  3396               	rrcf	___awdiv@divisor& (0+255),f,b
  5963                           
  5964                           ; BSR set to: 0
  5965  003D9E  0100               	movlb	0	; () banked
  5966  003DA0  2F98               	decfsz	___awdiv@counter& (0+255),f,b
  5967  003DA2  D7E1               	goto	l4268
  5968  003DA4                     l4280:
  5969                           
  5970                           ; BSR set to: 0
  5971  003DA4  0100               	movlb	0	; () banked
  5972  003DA6  5199               	movf	___awdiv@sign& (0+255),w,b
  5973  003DA8  0100               	movlb	0	; () banked
  5974  003DAA  B4D8               	btfsc	status,2,c
  5975  003DAC  D005               	goto	l4284
  5976                           
  5977                           ; BSR set to: 0
  5978  003DAE  0100               	movlb	0	; () banked
  5979  003DB0  6D9A               	negf	___awdiv@quotient& (0+255),b
  5980  003DB2  1F9B               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5981  003DB4  B0D8               	btfsc	status,0,c
  5982  003DB6  2B9B               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5983  003DB8                     l4284:
  5984                           
  5985                           ; BSR set to: 0
  5986  003DB8  C09A  F094         	movff	___awdiv@quotient,?___awdiv
  5987  003DBC  C09B  F095         	movff	___awdiv@quotient+1,?___awdiv+1
  5988  003DC0  0012               	return	
  5989  003DC2                     __end_of___awdiv:
  5990                           	opt stack 0
  5991                           tblptru	equ	0xFF8
  5992                           tblptrh	equ	0xFF7
  5993                           tblptrl	equ	0xFF6
  5994                           tablat	equ	0xFF5
  5995                           prodh	equ	0xFF4
  5996                           prodl	equ	0xFF3
  5997                           postinc0	equ	0xFEE
  5998                           wreg	equ	0xFE8
  5999                           postdec1	equ	0xFE5
  6000                           fsr1l	equ	0xFE1
  6001                           indf2	equ	0xFDF
  6002                           postinc2	equ	0xFDE
  6003                           postdec2	equ	0xFDD
  6004                           fsr2h	equ	0xFDA
  6005                           fsr2l	equ	0xFD9
  6006                           status	equ	0xFD8
  6007                           
  6008 ;; *************** function __tdiv_to_l_ *****************
  6009 ;; Defined at:
  6010 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  6011 ;; Parameters:    Size  Location     Type
  6012 ;;  f1              3   14[BANK0 ] float 
  6013 ;;  f2              3   17[BANK0 ] float 
  6014 ;; Auto vars:     Size  Location     Type
  6015 ;;  quot            4   23[BANK0 ] unsigned long 
  6016 ;;  exp1            1   28[BANK0 ] unsigned char 
  6017 ;;  cntr            1   27[BANK0 ] unsigned char 
  6018 ;; Return value:  Size  Location     Type
  6019 ;;                  4   14[BANK0 ] unsigned long 
  6020 ;; Registers used:
  6021 ;;		wreg, status,2, status,0
  6022 ;; Tracked objects:
  6023 ;;		On entry : 0/0
  6024 ;;		On exit  : 0/0
  6025 ;;		Unchanged: 0/0
  6026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6027 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6028 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6029 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6030 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6031 ;;Total ram usage:       15 bytes
  6032 ;; Hardware stack levels used:    1
  6033 ;; Hardware stack levels required when called:    6
  6034 ;; This function calls:
  6035 ;;		Nothing
  6036 ;; This function is called by:
  6037 ;;		_printf
  6038 ;; This function uses a non-reentrant model
  6039 ;;
  6040                           
  6041                           	psect	text12
  6042  00269C                     __ptext12:
  6043                           	opt stack 0
  6044  00269C                     __tdiv_to_l_:
  6045                           	opt stack 22
  6046                           
  6047                           ; BSR set to: 0
  6048                           ;incstack = 0
  6049  00269C  C090  F094         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6050  0026A0  0100               	movlb	0	; () banked
  6051  0026A2  6B95               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  6052  0026A4  6B96               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  6053  0026A6  0100               	movlb	0	; () banked
  6054  0026A8  358F               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  6055  0026AA  0100               	movlb	0	; () banked
  6056  0026AC  3794               	rlcf	??__tdiv_to_l_& (0+255),f,b
  6057  0026AE  E301               	bnc	u4041
  6058  0026B0  8195               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  6059  0026B2                     u4041:
  6060  0026B2  0100               	movlb	0	; () banked
  6061  0026B4  5194               	movf	??__tdiv_to_l_& (0+255),w,b
  6062  0026B6  0100               	movlb	0	; () banked
  6063  0026B8  6F9C               	movwf	__tdiv_to_l_@exp1& (0+255),b
  6064  0026BA  0100               	movlb	0	; () banked
  6065  0026BC  519C               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6066  0026BE  A4D8               	btfss	status,2,c
  6067  0026C0  D00A               	goto	l4416
  6068                           
  6069                           ; BSR set to: 0
  6070  0026C2  0E00               	movlw	0
  6071  0026C4  0100               	movlb	0	; () banked
  6072  0026C6  6F8E               	movwf	?__tdiv_to_l_& (0+255),b
  6073  0026C8  0E00               	movlw	0
  6074  0026CA  6F8F               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6075  0026CC  0E00               	movlw	0
  6076  0026CE  6F90               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6077  0026D0  0E00               	movlw	0
  6078  0026D2  6F91               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6079                           
  6080                           ; BSR set to: 0
  6081  0026D4  0012               	return	
  6082  0026D6                     l4416:
  6083                           
  6084                           ; BSR set to: 0
  6085  0026D6  C093  F094         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6086  0026DA  0100               	movlb	0	; () banked
  6087  0026DC  6B95               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  6088  0026DE  6B96               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  6089  0026E0  0100               	movlb	0	; () banked
  6090  0026E2  3592               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6091  0026E4  0100               	movlb	0	; () banked
  6092  0026E6  3794               	rlcf	??__tdiv_to_l_& (0+255),f,b
  6093  0026E8  E301               	bnc	u4061
  6094  0026EA  8195               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  6095  0026EC                     u4061:
  6096  0026EC  0100               	movlb	0	; () banked
  6097  0026EE  5194               	movf	??__tdiv_to_l_& (0+255),w,b
  6098  0026F0  0100               	movlb	0	; () banked
  6099  0026F2  6F9B               	movwf	__tdiv_to_l_@cntr& (0+255),b
  6100  0026F4  0100               	movlb	0	; () banked
  6101  0026F6  519B               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  6102  0026F8  A4D8               	btfss	status,2,c
  6103  0026FA  D00A               	goto	l4422
  6104                           
  6105                           ; BSR set to: 0
  6106  0026FC  0E00               	movlw	0
  6107  0026FE  0100               	movlb	0	; () banked
  6108  002700  6F8E               	movwf	?__tdiv_to_l_& (0+255),b
  6109  002702  0E00               	movlw	0
  6110  002704  6F8F               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6111  002706  0E00               	movlw	0
  6112  002708  6F90               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6113  00270A  0E00               	movlw	0
  6114  00270C  6F91               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6115                           
  6116                           ; BSR set to: 0
  6117  00270E  0012               	return	
  6118  002710                     l4422:
  6119                           
  6120                           ; BSR set to: 0
  6121  002710  0100               	movlb	0	; () banked
  6122  002712  8F8F               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  6123                           
  6124                           ; BSR set to: 0
  6125  002714  0EFF               	movlw	255
  6126  002716  0100               	movlb	0	; () banked
  6127  002718  178E               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  6128  00271A  0EFF               	movlw	255
  6129  00271C  0100               	movlb	0	; () banked
  6130  00271E  178F               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6131  002720  0E00               	movlw	0
  6132  002722  0100               	movlb	0	; () banked
  6133  002724  1790               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6134  002726  0100               	movlb	0	; () banked
  6135  002728  8F92               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  6136                           
  6137                           ; BSR set to: 0
  6138  00272A  0EFF               	movlw	255
  6139  00272C  0100               	movlb	0	; () banked
  6140  00272E  1791               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  6141  002730  0EFF               	movlw	255
  6142  002732  0100               	movlb	0	; () banked
  6143  002734  1792               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  6144  002736  0E00               	movlw	0
  6145  002738  0100               	movlb	0	; () banked
  6146  00273A  1793               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  6147                           
  6148                           ; BSR set to: 0
  6149  00273C  0E00               	movlw	0
  6150  00273E  0100               	movlb	0	; () banked
  6151  002740  6F97               	movwf	__tdiv_to_l_@quot& (0+255),b
  6152  002742  0E00               	movlw	0
  6153  002744  6F98               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  6154  002746  0E00               	movlw	0
  6155  002748  6F99               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  6156  00274A  0E00               	movlw	0
  6157  00274C  6F9A               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  6158                           
  6159                           ; BSR set to: 0
  6160  00274E  0E7F               	movlw	127
  6161  002750  0100               	movlb	0	; () banked
  6162  002752  5F9C               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  6163                           
  6164                           ; BSR set to: 0
  6165  002754  0100               	movlb	0	; () banked
  6166  002756  519B               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  6167  002758  0F98               	addlw	152
  6168  00275A  0100               	movlb	0	; () banked
  6169  00275C  5F9C               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  6170                           
  6171                           ; BSR set to: 0
  6172  00275E  0E18               	movlw	24
  6173  002760  0100               	movlb	0	; () banked
  6174  002762  6F9B               	movwf	__tdiv_to_l_@cntr& (0+255),b
  6175  002764                     l1025:
  6176                           
  6177                           ; BSR set to: 0
  6178  002764  0100               	movlb	0	; () banked
  6179  002766  90D8               	bcf	status,0,c
  6180  002768  3797               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  6181  00276A  3798               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6182  00276C  3799               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6183  00276E  379A               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6184                           
  6185                           ; BSR set to: 0
  6186  002770  0100               	movlb	0	; () banked
  6187  002772  5191               	movf	__tdiv_to_l_@f2& (0+255),w,b
  6188  002774  0100               	movlb	0	; () banked
  6189  002776  5D8E               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  6190  002778  0100               	movlb	0	; () banked
  6191  00277A  5192               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6192  00277C  0100               	movlb	0	; () banked
  6193  00277E  598F               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  6194  002780  0100               	movlb	0	; () banked
  6195  002782  5193               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  6196  002784  0100               	movlb	0	; () banked
  6197  002786  5990               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  6198  002788  A0D8               	btfss	status,0,c
  6199  00278A  D00E               	goto	l1026
  6200                           
  6201                           ; BSR set to: 0
  6202  00278C  0100               	movlb	0	; () banked
  6203  00278E  5191               	movf	__tdiv_to_l_@f2& (0+255),w,b
  6204  002790  0100               	movlb	0	; () banked
  6205  002792  5F8E               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  6206  002794  0100               	movlb	0	; () banked
  6207  002796  5192               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6208  002798  0100               	movlb	0	; () banked
  6209  00279A  5B8F               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6210  00279C  0100               	movlb	0	; () banked
  6211  00279E  5193               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  6212  0027A0  0100               	movlb	0	; () banked
  6213  0027A2  5B90               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6214                           
  6215                           ; BSR set to: 0
  6216  0027A4  0100               	movlb	0	; () banked
  6217  0027A6  8197               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  6218  0027A8                     l1026:
  6219                           
  6220                           ; BSR set to: 0
  6221  0027A8  0100               	movlb	0	; () banked
  6222  0027AA  90D8               	bcf	status,0,c
  6223  0027AC  378E               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  6224  0027AE  378F               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6225  0027B0  3790               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6226                           
  6227                           ; BSR set to: 0
  6228  0027B2  0100               	movlb	0	; () banked
  6229  0027B4  2F9B               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  6230  0027B6  D7D6               	goto	l1025
  6231                           
  6232                           ; BSR set to: 0
  6233                           
  6234                           ; BSR set to: 0
  6235  0027B8  0100               	movlb	0	; () banked
  6236  0027BA  AF9C               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  6237  0027BC  D01A               	goto	l4456
  6238                           
  6239                           ; BSR set to: 0
  6240  0027BE  0100               	movlb	0	; () banked
  6241  0027C0  519C               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6242  0027C2  0A80               	xorlw	128
  6243  0027C4  0F97               	addlw	151
  6244  0027C6  B0D8               	btfsc	status,0,c
  6245  0027C8  D00A               	goto	l4452
  6246                           
  6247                           ; BSR set to: 0
  6248  0027CA  0E00               	movlw	0
  6249  0027CC  0100               	movlb	0	; () banked
  6250  0027CE  6F8E               	movwf	?__tdiv_to_l_& (0+255),b
  6251  0027D0  0E00               	movlw	0
  6252  0027D2  6F8F               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6253  0027D4  0E00               	movlw	0
  6254  0027D6  6F90               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6255  0027D8  0E00               	movlw	0
  6256  0027DA  6F91               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6257                           
  6258                           ; BSR set to: 0
  6259  0027DC  0012               	return	
  6260  0027DE                     l4452:
  6261                           
  6262                           ; BSR set to: 0
  6263  0027DE  0100               	movlb	0	; () banked
  6264  0027E0  90D8               	bcf	status,0,c
  6265  0027E2  339A               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6266  0027E4  3399               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6267  0027E6  3398               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6268  0027E8  3397               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  6269                           
  6270                           ; BSR set to: 0
  6271  0027EA  0100               	movlb	0	; () banked
  6272  0027EC  3F9C               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  6273  0027EE  D7F7               	goto	l4452
  6274                           
  6275                           ; BSR set to: 0
  6276  0027F0  D01B               	goto	l1032
  6277  0027F2                     l4456:
  6278                           
  6279                           ; BSR set to: 0
  6280  0027F2  0E17               	movlw	23
  6281  0027F4  0100               	movlb	0	; () banked
  6282  0027F6  659C               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  6283  0027F8  D012               	goto	l4464
  6284                           
  6285                           ; BSR set to: 0
  6286  0027FA  0E00               	movlw	0
  6287  0027FC  0100               	movlb	0	; () banked
  6288  0027FE  6F8E               	movwf	?__tdiv_to_l_& (0+255),b
  6289  002800  0E00               	movlw	0
  6290  002802  6F8F               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6291  002804  0E00               	movlw	0
  6292  002806  6F90               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6293  002808  0E00               	movlw	0
  6294  00280A  6F91               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6295                           
  6296                           ; BSR set to: 0
  6297  00280C  0012               	return	
  6298  00280E                     l4462:
  6299                           
  6300                           ; BSR set to: 0
  6301  00280E  0100               	movlb	0	; () banked
  6302  002810  90D8               	bcf	status,0,c
  6303  002812  3797               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  6304  002814  3798               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6305  002816  3799               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6306  002818  379A               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6307  00281A  0100               	movlb	0	; () banked
  6308  00281C  079C               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  6309  00281E                     l4464:
  6310                           
  6311                           ; BSR set to: 0
  6312  00281E  0100               	movlb	0	; () banked
  6313  002820  519C               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6314  002822  0100               	movlb	0	; () banked
  6315  002824  A4D8               	btfss	status,2,c
  6316  002826  D7F3               	goto	l4462
  6317  002828                     l1032:
  6318                           
  6319                           ; BSR set to: 0
  6320  002828  C097  F08E         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6321  00282C  C098  F08F         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6322  002830  C099  F090         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6323  002834  C09A  F091         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6324                           
  6325                           ; BSR set to: 0
  6326  002838  0012               	return		;funcret
  6327  00283A                     __end_of__tdiv_to_l_:
  6328                           	opt stack 0
  6329                           tblptru	equ	0xFF8
  6330                           tblptrh	equ	0xFF7
  6331                           tblptrl	equ	0xFF6
  6332                           tablat	equ	0xFF5
  6333                           prodh	equ	0xFF4
  6334                           prodl	equ	0xFF3
  6335                           postinc0	equ	0xFEE
  6336                           wreg	equ	0xFE8
  6337                           postdec1	equ	0xFE5
  6338                           fsr1l	equ	0xFE1
  6339                           indf2	equ	0xFDF
  6340                           postinc2	equ	0xFDE
  6341                           postdec2	equ	0xFDD
  6342                           fsr2h	equ	0xFDA
  6343                           fsr2l	equ	0xFD9
  6344                           status	equ	0xFD8
  6345                           
  6346 ;; *************** function __div_to_l_ *****************
  6347 ;; Defined at:
  6348 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  6349 ;; Parameters:    Size  Location     Type
  6350 ;;  f1              3   14[BANK0 ] unsigned long 
  6351 ;;  f2              3   17[BANK0 ] unsigned long 
  6352 ;; Auto vars:     Size  Location     Type
  6353 ;;  quot            4   20[BANK0 ] unsigned long 
  6354 ;;  exp1            1   25[BANK0 ] unsigned char 
  6355 ;;  cntr            1   24[BANK0 ] unsigned char 
  6356 ;; Return value:  Size  Location     Type
  6357 ;;                  4   14[BANK0 ] unsigned long 
  6358 ;; Registers used:
  6359 ;;		wreg, status,2, status,0
  6360 ;; Tracked objects:
  6361 ;;		On entry : 0/0
  6362 ;;		On exit  : 0/0
  6363 ;;		Unchanged: 0/0
  6364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6365 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6366 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6368 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6369 ;;Total ram usage:       12 bytes
  6370 ;; Hardware stack levels used:    1
  6371 ;; Hardware stack levels required when called:    6
  6372 ;; This function calls:
  6373 ;;		Nothing
  6374 ;; This function is called by:
  6375 ;;		_printf
  6376 ;; This function uses a non-reentrant model
  6377 ;;
  6378                           
  6379                           	psect	text13
  6380  00283A                     __ptext13:
  6381                           	opt stack 0
  6382  00283A                     __div_to_l_:
  6383                           	opt stack 22
  6384                           
  6385                           ; BSR set to: 0
  6386                           ;incstack = 0
  6387  00283A  0100               	movlb	0	; () banked
  6388  00283C  3590               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  6389  00283E  3591               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  6390  002840  0100               	movlb	0	; () banked
  6391  002842  6F99               	movwf	__div_to_l_@exp1& (0+255),b
  6392  002844  0100               	movlb	0	; () banked
  6393  002846  5199               	movf	__div_to_l_@exp1& (0+255),w,b
  6394  002848  A4D8               	btfss	status,2,c
  6395  00284A  D00A               	goto	l4472
  6396                           
  6397                           ; BSR set to: 0
  6398  00284C  0E00               	movlw	0
  6399  00284E  0100               	movlb	0	; () banked
  6400  002850  6F8E               	movwf	?__div_to_l_& (0+255),b
  6401  002852  0E00               	movlw	0
  6402  002854  6F8F               	movwf	(?__div_to_l_+1)& (0+255),b
  6403  002856  0E00               	movlw	0
  6404  002858  6F90               	movwf	(?__div_to_l_+2)& (0+255),b
  6405  00285A  0E00               	movlw	0
  6406  00285C  6F91               	movwf	(?__div_to_l_+3)& (0+255),b
  6407                           
  6408                           ; BSR set to: 0
  6409  00285E  0012               	return	
  6410  002860                     l4472:
  6411                           
  6412                           ; BSR set to: 0
  6413  002860  0100               	movlb	0	; () banked
  6414  002862  3593               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  6415  002864  3594               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  6416  002866  0100               	movlb	0	; () banked
  6417  002868  6F98               	movwf	__div_to_l_@cntr& (0+255),b
  6418  00286A  0100               	movlb	0	; () banked
  6419  00286C  5198               	movf	__div_to_l_@cntr& (0+255),w,b
  6420  00286E  A4D8               	btfss	status,2,c
  6421  002870  D00A               	goto	l4478
  6422                           
  6423                           ; BSR set to: 0
  6424  002872  0E00               	movlw	0
  6425  002874  0100               	movlb	0	; () banked
  6426  002876  6F8E               	movwf	?__div_to_l_& (0+255),b
  6427  002878  0E00               	movlw	0
  6428  00287A  6F8F               	movwf	(?__div_to_l_+1)& (0+255),b
  6429  00287C  0E00               	movlw	0
  6430  00287E  6F90               	movwf	(?__div_to_l_+2)& (0+255),b
  6431  002880  0E00               	movlw	0
  6432  002882  6F91               	movwf	(?__div_to_l_+3)& (0+255),b
  6433                           
  6434                           ; BSR set to: 0
  6435  002884  0012               	return	
  6436  002886                     l4478:
  6437                           
  6438                           ; BSR set to: 0
  6439  002886  0100               	movlb	0	; () banked
  6440  002888  8F90               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  6441                           
  6442                           ; BSR set to: 0
  6443  00288A  0EFF               	movlw	255
  6444  00288C  0100               	movlb	0	; () banked
  6445  00288E  178E               	andwf	__div_to_l_@f1& (0+255),f,b
  6446  002890  0EFF               	movlw	255
  6447  002892  178F               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  6448  002894  0EFF               	movlw	255
  6449  002896  1790               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  6450  002898  0E00               	movlw	0
  6451  00289A  1791               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  6452                           
  6453                           ; BSR set to: 0
  6454  00289C  0100               	movlb	0	; () banked
  6455  00289E  8F93               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  6456  0028A0  0EFF               	movlw	255
  6457  0028A2  0100               	movlb	0	; () banked
  6458  0028A4  1791               	andwf	__div_to_l_@f2& (0+255),f,b
  6459  0028A6  0EFF               	movlw	255
  6460  0028A8  1792               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  6461  0028AA  0EFF               	movlw	255
  6462  0028AC  1793               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  6463  0028AE  0E00               	movlw	0
  6464  0028B0  1794               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  6465                           
  6466                           ; BSR set to: 0
  6467  0028B2  0E00               	movlw	0
  6468  0028B4  0100               	movlb	0	; () banked
  6469  0028B6  6F94               	movwf	__div_to_l_@quot& (0+255),b
  6470  0028B8  0E00               	movlw	0
  6471  0028BA  6F95               	movwf	(__div_to_l_@quot+1)& (0+255),b
  6472  0028BC  0E00               	movlw	0
  6473  0028BE  6F96               	movwf	(__div_to_l_@quot+2)& (0+255),b
  6474  0028C0  0E00               	movlw	0
  6475  0028C2  6F97               	movwf	(__div_to_l_@quot+3)& (0+255),b
  6476                           
  6477                           ; BSR set to: 0
  6478  0028C4  0E7F               	movlw	127
  6479  0028C6  0100               	movlb	0	; () banked
  6480  0028C8  5F99               	subwf	__div_to_l_@exp1& (0+255),f,b
  6481                           
  6482                           ; BSR set to: 0
  6483  0028CA  0100               	movlb	0	; () banked
  6484  0028CC  5198               	movf	__div_to_l_@cntr& (0+255),w,b
  6485  0028CE  0FA0               	addlw	160
  6486  0028D0  0100               	movlb	0	; () banked
  6487  0028D2  5F99               	subwf	__div_to_l_@exp1& (0+255),f,b
  6488                           
  6489                           ; BSR set to: 0
  6490  0028D4  0E20               	movlw	32
  6491  0028D6  0100               	movlb	0	; () banked
  6492  0028D8  6F98               	movwf	__div_to_l_@cntr& (0+255),b
  6493  0028DA                     l4492:
  6494                           
  6495                           ; BSR set to: 0
  6496  0028DA  0100               	movlb	0	; () banked
  6497  0028DC  90D8               	bcf	status,0,c
  6498  0028DE  3794               	rlcf	__div_to_l_@quot& (0+255),f,b
  6499  0028E0  3795               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  6500  0028E2  3796               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  6501  0028E4  3797               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  6502                           
  6503                           ; BSR set to: 0
  6504  0028E6  0100               	movlb	0	; () banked
  6505  0028E8  5191               	movf	__div_to_l_@f2& (0+255),w,b
  6506  0028EA  0100               	movlb	0	; () banked
  6507  0028EC  5D8E               	subwf	__div_to_l_@f1& (0+255),w,b
  6508  0028EE  0100               	movlb	0	; () banked
  6509  0028F0  5192               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  6510  0028F2  0100               	movlb	0	; () banked
  6511  0028F4  598F               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  6512  0028F6  0100               	movlb	0	; () banked
  6513  0028F8  5193               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  6514  0028FA  0100               	movlb	0	; () banked
  6515  0028FC  5990               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  6516  0028FE  0100               	movlb	0	; () banked
  6517  002900  5194               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  6518  002902  0100               	movlb	0	; () banked
  6519  002904  5991               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  6520  002906  A0D8               	btfss	status,0,c
  6521  002908  D012               	goto	l4500
  6522                           
  6523                           ; BSR set to: 0
  6524  00290A  0100               	movlb	0	; () banked
  6525  00290C  5191               	movf	__div_to_l_@f2& (0+255),w,b
  6526  00290E  0100               	movlb	0	; () banked
  6527  002910  5F8E               	subwf	__div_to_l_@f1& (0+255),f,b
  6528  002912  0100               	movlb	0	; () banked
  6529  002914  5192               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  6530  002916  0100               	movlb	0	; () banked
  6531  002918  5B8F               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  6532  00291A  0100               	movlb	0	; () banked
  6533  00291C  5193               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  6534  00291E  0100               	movlb	0	; () banked
  6535  002920  5B90               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  6536  002922  0100               	movlb	0	; () banked
  6537  002924  5194               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  6538  002926  0100               	movlb	0	; () banked
  6539  002928  5B91               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  6540                           
  6541                           ; BSR set to: 0
  6542  00292A  0100               	movlb	0	; () banked
  6543  00292C  8194               	bsf	__div_to_l_@quot& (0+255),0,b
  6544  00292E                     l4500:
  6545                           
  6546                           ; BSR set to: 0
  6547  00292E  0100               	movlb	0	; () banked
  6548  002930  90D8               	bcf	status,0,c
  6549  002932  378E               	rlcf	__div_to_l_@f1& (0+255),f,b
  6550  002934  378F               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  6551  002936  3790               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  6552  002938  3791               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  6553                           
  6554                           ; BSR set to: 0
  6555  00293A  0100               	movlb	0	; () banked
  6556  00293C  2F98               	decfsz	__div_to_l_@cntr& (0+255),f,b
  6557  00293E  D7CD               	goto	l4492
  6558                           
  6559                           ; BSR set to: 0
  6560                           
  6561                           ; BSR set to: 0
  6562  002940  0100               	movlb	0	; () banked
  6563  002942  AF99               	btfss	__div_to_l_@exp1& (0+255),7,b
  6564  002944  D01A               	goto	l4516
  6565                           
  6566                           ; BSR set to: 0
  6567  002946  0100               	movlb	0	; () banked
  6568  002948  5199               	movf	__div_to_l_@exp1& (0+255),w,b
  6569  00294A  0A80               	xorlw	128
  6570  00294C  0F9F               	addlw	159
  6571  00294E  B0D8               	btfsc	status,0,c
  6572  002950  D00A               	goto	l4512
  6573                           
  6574                           ; BSR set to: 0
  6575  002952  0E00               	movlw	0
  6576  002954  0100               	movlb	0	; () banked
  6577  002956  6F8E               	movwf	?__div_to_l_& (0+255),b
  6578  002958  0E00               	movlw	0
  6579  00295A  6F8F               	movwf	(?__div_to_l_+1)& (0+255),b
  6580  00295C  0E00               	movlw	0
  6581  00295E  6F90               	movwf	(?__div_to_l_+2)& (0+255),b
  6582  002960  0E00               	movlw	0
  6583  002962  6F91               	movwf	(?__div_to_l_+3)& (0+255),b
  6584                           
  6585                           ; BSR set to: 0
  6586  002964  0012               	return	
  6587  002966                     l4512:
  6588                           
  6589                           ; BSR set to: 0
  6590  002966  0100               	movlb	0	; () banked
  6591  002968  90D8               	bcf	status,0,c
  6592  00296A  3397               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  6593  00296C  3396               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  6594  00296E  3395               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  6595  002970  3394               	rrcf	__div_to_l_@quot& (0+255),f,b
  6596                           
  6597                           ; BSR set to: 0
  6598  002972  0100               	movlb	0	; () banked
  6599  002974  3F99               	incfsz	__div_to_l_@exp1& (0+255),f,b
  6600  002976  D7F7               	goto	l4512
  6601                           
  6602                           ; BSR set to: 0
  6603  002978  D01B               	goto	l928
  6604  00297A                     l4516:
  6605                           
  6606                           ; BSR set to: 0
  6607  00297A  0E1F               	movlw	31
  6608  00297C  0100               	movlb	0	; () banked
  6609  00297E  6599               	cpfsgt	__div_to_l_@exp1& (0+255),b
  6610  002980  D012               	goto	l4524
  6611                           
  6612                           ; BSR set to: 0
  6613  002982  0E00               	movlw	0
  6614  002984  0100               	movlb	0	; () banked
  6615  002986  6F8E               	movwf	?__div_to_l_& (0+255),b
  6616  002988  0E00               	movlw	0
  6617  00298A  6F8F               	movwf	(?__div_to_l_+1)& (0+255),b
  6618  00298C  0E00               	movlw	0
  6619  00298E  6F90               	movwf	(?__div_to_l_+2)& (0+255),b
  6620  002990  0E00               	movlw	0
  6621  002992  6F91               	movwf	(?__div_to_l_+3)& (0+255),b
  6622                           
  6623                           ; BSR set to: 0
  6624  002994  0012               	return	
  6625  002996                     l4522:
  6626                           
  6627                           ; BSR set to: 0
  6628  002996  0100               	movlb	0	; () banked
  6629  002998  90D8               	bcf	status,0,c
  6630  00299A  3794               	rlcf	__div_to_l_@quot& (0+255),f,b
  6631  00299C  3795               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  6632  00299E  3796               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  6633  0029A0  3797               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  6634  0029A2  0100               	movlb	0	; () banked
  6635  0029A4  0799               	decf	__div_to_l_@exp1& (0+255),f,b
  6636  0029A6                     l4524:
  6637                           
  6638                           ; BSR set to: 0
  6639  0029A6  0100               	movlb	0	; () banked
  6640  0029A8  5199               	movf	__div_to_l_@exp1& (0+255),w,b
  6641  0029AA  0100               	movlb	0	; () banked
  6642  0029AC  A4D8               	btfss	status,2,c
  6643  0029AE  D7F3               	goto	l4522
  6644  0029B0                     l928:
  6645                           
  6646                           ; BSR set to: 0
  6647  0029B0  C094  F08E         	movff	__div_to_l_@quot,?__div_to_l_
  6648  0029B4  C095  F08F         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6649  0029B8  C096  F090         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6650  0029BC  C097  F091         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6651                           
  6652                           ; BSR set to: 0
  6653  0029C0  0012               	return		;funcret
  6654  0029C2                     __end_of__div_to_l_:
  6655                           	opt stack 0
  6656                           tblptru	equ	0xFF8
  6657                           tblptrh	equ	0xFF7
  6658                           tblptrl	equ	0xFF6
  6659                           tablat	equ	0xFF5
  6660                           prodh	equ	0xFF4
  6661                           prodl	equ	0xFF3
  6662                           postinc0	equ	0xFEE
  6663                           wreg	equ	0xFE8
  6664                           postdec1	equ	0xFE5
  6665                           fsr1l	equ	0xFE1
  6666                           indf2	equ	0xFDF
  6667                           postinc2	equ	0xFDE
  6668                           postdec2	equ	0xFDD
  6669                           fsr2h	equ	0xFDA
  6670                           fsr2l	equ	0xFD9
  6671                           status	equ	0xFD8
  6672                           
  6673 ;; *************** function ___lltoft *****************
  6674 ;; Defined at:
  6675 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  6676 ;; Parameters:    Size  Location     Type
  6677 ;;  c               4   22[BANK0 ] unsigned long 
  6678 ;; Auto vars:     Size  Location     Type
  6679 ;;  exp             1   30[BANK0 ] unsigned char 
  6680 ;; Return value:  Size  Location     Type
  6681 ;;                  3   22[BANK0 ] float 
  6682 ;; Registers used:
  6683 ;;		wreg, status,2, status,0, cstack
  6684 ;; Tracked objects:
  6685 ;;		On entry : 0/0
  6686 ;;		On exit  : 0/0
  6687 ;;		Unchanged: 0/0
  6688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6689 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6690 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6691 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6692 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6693 ;;Total ram usage:        9 bytes
  6694 ;; Hardware stack levels used:    1
  6695 ;; Hardware stack levels required when called:    7
  6696 ;; This function calls:
  6697 ;;		___ftpack
  6698 ;; This function is called by:
  6699 ;;		_printf
  6700 ;; This function uses a non-reentrant model
  6701 ;;
  6702                           
  6703                           	psect	text14
  6704  004472                     __ptext14:
  6705                           	opt stack 0
  6706  004472                     ___lltoft:
  6707                           	opt stack 21
  6708                           
  6709                           ; BSR set to: 0
  6710                           ;incstack = 0
  6711  004472  0E8E               	movlw	142
  6712  004474  0100               	movlb	0	; () banked
  6713  004476  6F9E               	movwf	___lltoft@exp& (0+255),b
  6714  004478  D008               	goto	l4718
  6715  00447A                     l4716:
  6716                           
  6717                           ; BSR set to: 0
  6718  00447A  0100               	movlb	0	; () banked
  6719  00447C  90D8               	bcf	status,0,c
  6720  00447E  3399               	rrcf	(___lltoft@c+3)& (0+255),f,b
  6721  004480  3398               	rrcf	(___lltoft@c+2)& (0+255),f,b
  6722  004482  3397               	rrcf	(___lltoft@c+1)& (0+255),f,b
  6723  004484  3396               	rrcf	___lltoft@c& (0+255),f,b
  6724  004486  0100               	movlb	0	; () banked
  6725  004488  2B9E               	incf	___lltoft@exp& (0+255),f,b
  6726  00448A                     l4718:
  6727                           
  6728                           ; BSR set to: 0
  6729  00448A  0E00               	movlw	0
  6730  00448C  0100               	movlb	0	; () banked
  6731  00448E  1596               	andwf	___lltoft@c& (0+255),w,b
  6732  004490  0100               	movlb	0	; () banked
  6733  004492  6F9A               	movwf	??___lltoft& (0+255),b
  6734  004494  0E00               	movlw	0
  6735  004496  0100               	movlb	0	; () banked
  6736  004498  1597               	andwf	(___lltoft@c+1)& (0+255),w,b
  6737  00449A  0100               	movlb	0	; () banked
  6738  00449C  6F9B               	movwf	(??___lltoft+1)& (0+255),b
  6739  00449E  0E00               	movlw	0
  6740  0044A0  0100               	movlb	0	; () banked
  6741  0044A2  1598               	andwf	(___lltoft@c+2)& (0+255),w,b
  6742  0044A4  0100               	movlb	0	; () banked
  6743  0044A6  6F9C               	movwf	(??___lltoft+2)& (0+255),b
  6744  0044A8  0EFF               	movlw	255
  6745  0044AA  0100               	movlb	0	; () banked
  6746  0044AC  1599               	andwf	(___lltoft@c+3)& (0+255),w,b
  6747  0044AE  0100               	movlb	0	; () banked
  6748  0044B0  6F9D               	movwf	(??___lltoft+3)& (0+255),b
  6749  0044B2  0100               	movlb	0	; () banked
  6750  0044B4  519A               	movf	??___lltoft& (0+255),w,b
  6751  0044B6  0100               	movlb	0	; () banked
  6752  0044B8  119B               	iorwf	(??___lltoft+1)& (0+255),w,b
  6753  0044BA  0100               	movlb	0	; () banked
  6754  0044BC  119C               	iorwf	(??___lltoft+2)& (0+255),w,b
  6755  0044BE  0100               	movlb	0	; () banked
  6756  0044C0  119D               	iorwf	(??___lltoft+3)& (0+255),w,b
  6757  0044C2  A4D8               	btfss	status,2,c
  6758  0044C4  D7DA               	goto	l4716
  6759                           
  6760                           ; BSR set to: 0
  6761                           
  6762                           ; BSR set to: 0
  6763  0044C6  C096  F08E         	movff	___lltoft@c,___ftpack@arg
  6764  0044CA  C097  F08F         	movff	___lltoft@c+1,___ftpack@arg+1
  6765  0044CE  C098  F090         	movff	___lltoft@c+2,___ftpack@arg+2
  6766  0044D2  C09E  F091         	movff	___lltoft@exp,___ftpack@exp
  6767  0044D6  0E00               	movlw	0
  6768  0044D8  0100               	movlb	0	; () banked
  6769  0044DA  6F92               	movwf	___ftpack@sign& (0+255),b
  6770  0044DC  ECF0  F019         	call	___ftpack	;wreg free
  6771  0044E0  C08E  F096         	movff	?___ftpack,?___lltoft
  6772  0044E4  C08F  F097         	movff	?___ftpack+1,?___lltoft+1
  6773  0044E8  C090  F098         	movff	?___ftpack+2,?___lltoft+2
  6774  0044EC  0012               	return	
  6775  0044EE                     __end_of___lltoft:
  6776                           	opt stack 0
  6777                           tblptru	equ	0xFF8
  6778                           tblptrh	equ	0xFF7
  6779                           tblptrl	equ	0xFF6
  6780                           tablat	equ	0xFF5
  6781                           prodh	equ	0xFF4
  6782                           prodl	equ	0xFF3
  6783                           postinc0	equ	0xFEE
  6784                           wreg	equ	0xFE8
  6785                           postdec1	equ	0xFE5
  6786                           fsr1l	equ	0xFE1
  6787                           indf2	equ	0xFDF
  6788                           postinc2	equ	0xFDE
  6789                           postdec2	equ	0xFDD
  6790                           fsr2h	equ	0xFDA
  6791                           fsr2l	equ	0xFD9
  6792                           status	equ	0xFD8
  6793                           
  6794 ;; *************** function ___llmod *****************
  6795 ;; Defined at:
  6796 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  6797 ;; Parameters:    Size  Location     Type
  6798 ;;  dividend        4   27[BANK0 ] unsigned long 
  6799 ;;  divisor         4   31[BANK0 ] unsigned long 
  6800 ;; Auto vars:     Size  Location     Type
  6801 ;;  counter         1   35[BANK0 ] unsigned char 
  6802 ;; Return value:  Size  Location     Type
  6803 ;;                  4   27[BANK0 ] unsigned long 
  6804 ;; Registers used:
  6805 ;;		wreg, status,2, status,0
  6806 ;; Tracked objects:
  6807 ;;		On entry : 0/0
  6808 ;;		On exit  : 0/0
  6809 ;;		Unchanged: 0/0
  6810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6811 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6812 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6814 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6815 ;;Total ram usage:        9 bytes
  6816 ;; Hardware stack levels used:    1
  6817 ;; Hardware stack levels required when called:    6
  6818 ;; This function calls:
  6819 ;;		Nothing
  6820 ;; This function is called by:
  6821 ;;		_printf
  6822 ;; This function uses a non-reentrant model
  6823 ;;
  6824                           
  6825                           	psect	text15
  6826  0041B4                     __ptext15:
  6827                           	opt stack 0
  6828  0041B4                     ___llmod:
  6829                           	opt stack 22
  6830                           
  6831                           ;incstack = 0
  6832  0041B4  0100               	movlb	0	; () banked
  6833  0041B6  519F               	movf	___llmod@divisor& (0+255),w,b
  6834  0041B8  0100               	movlb	0	; () banked
  6835  0041BA  11A0               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  6836  0041BC  0100               	movlb	0	; () banked
  6837  0041BE  11A1               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  6838  0041C0  0100               	movlb	0	; () banked
  6839  0041C2  11A2               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  6840  0041C4  B4D8               	btfsc	status,2,c
  6841  0041C6  D03A               	goto	l1112
  6842                           
  6843                           ; BSR set to: 0
  6844  0041C8  0E01               	movlw	1
  6845  0041CA  0100               	movlb	0	; () banked
  6846  0041CC  6FA3               	movwf	___llmod@counter& (0+255),b
  6847  0041CE  D008               	goto	l4704
  6848  0041D0                     l4702:
  6849                           
  6850                           ; BSR set to: 0
  6851  0041D0  0100               	movlb	0	; () banked
  6852  0041D2  90D8               	bcf	status,0,c
  6853  0041D4  379F               	rlcf	___llmod@divisor& (0+255),f,b
  6854  0041D6  37A0               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  6855  0041D8  37A1               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  6856  0041DA  37A2               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  6857  0041DC  0100               	movlb	0	; () banked
  6858  0041DE  2BA3               	incf	___llmod@counter& (0+255),f,b
  6859  0041E0                     l4704:
  6860                           
  6861                           ; BSR set to: 0
  6862  0041E0  0100               	movlb	0	; () banked
  6863  0041E2  AFA2               	btfss	(___llmod@divisor+3)& (0+255),7,b
  6864  0041E4  D7F5               	goto	l4702
  6865  0041E6                     l4706:
  6866                           
  6867                           ; BSR set to: 0
  6868  0041E6  0100               	movlb	0	; () banked
  6869  0041E8  519F               	movf	___llmod@divisor& (0+255),w,b
  6870  0041EA  0100               	movlb	0	; () banked
  6871  0041EC  5D9B               	subwf	___llmod@dividend& (0+255),w,b
  6872  0041EE  0100               	movlb	0	; () banked
  6873  0041F0  51A0               	movf	(___llmod@divisor+1)& (0+255),w,b
  6874  0041F2  0100               	movlb	0	; () banked
  6875  0041F4  599C               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  6876  0041F6  0100               	movlb	0	; () banked
  6877  0041F8  51A1               	movf	(___llmod@divisor+2)& (0+255),w,b
  6878  0041FA  0100               	movlb	0	; () banked
  6879  0041FC  599D               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  6880  0041FE  0100               	movlb	0	; () banked
  6881  004200  51A2               	movf	(___llmod@divisor+3)& (0+255),w,b
  6882  004202  0100               	movlb	0	; () banked
  6883  004204  599E               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  6884  004206  A0D8               	btfss	status,0,c
  6885  004208  D010               	goto	l4710
  6886                           
  6887                           ; BSR set to: 0
  6888  00420A  0100               	movlb	0	; () banked
  6889  00420C  519F               	movf	___llmod@divisor& (0+255),w,b
  6890  00420E  0100               	movlb	0	; () banked
  6891  004210  5F9B               	subwf	___llmod@dividend& (0+255),f,b
  6892  004212  0100               	movlb	0	; () banked
  6893  004214  51A0               	movf	(___llmod@divisor+1)& (0+255),w,b
  6894  004216  0100               	movlb	0	; () banked
  6895  004218  5B9C               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  6896  00421A  0100               	movlb	0	; () banked
  6897  00421C  51A1               	movf	(___llmod@divisor+2)& (0+255),w,b
  6898  00421E  0100               	movlb	0	; () banked
  6899  004220  5B9D               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  6900  004222  0100               	movlb	0	; () banked
  6901  004224  51A2               	movf	(___llmod@divisor+3)& (0+255),w,b
  6902  004226  0100               	movlb	0	; () banked
  6903  004228  5B9E               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  6904  00422A                     l4710:
  6905                           
  6906                           ; BSR set to: 0
  6907  00422A  0100               	movlb	0	; () banked
  6908  00422C  90D8               	bcf	status,0,c
  6909  00422E  33A2               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  6910  004230  33A1               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  6911  004232  33A0               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  6912  004234  339F               	rrcf	___llmod@divisor& (0+255),f,b
  6913                           
  6914                           ; BSR set to: 0
  6915  004236  0100               	movlb	0	; () banked
  6916  004238  2FA3               	decfsz	___llmod@counter& (0+255),f,b
  6917  00423A  D7D5               	goto	l4706
  6918  00423C                     l1112:
  6919                           
  6920                           ; BSR set to: 0
  6921  00423C  C09B  F09B         	movff	___llmod@dividend,?___llmod
  6922  004240  C09C  F09C         	movff	___llmod@dividend+1,?___llmod+1
  6923  004244  C09D  F09D         	movff	___llmod@dividend+2,?___llmod+2
  6924  004248  C09E  F09E         	movff	___llmod@dividend+3,?___llmod+3
  6925                           
  6926                           ; BSR set to: 0
  6927  00424C  0012               	return		;funcret
  6928  00424E                     __end_of___llmod:
  6929                           	opt stack 0
  6930                           tblptru	equ	0xFF8
  6931                           tblptrh	equ	0xFF7
  6932                           tblptrl	equ	0xFF6
  6933                           tablat	equ	0xFF5
  6934                           prodh	equ	0xFF4
  6935                           prodl	equ	0xFF3
  6936                           postinc0	equ	0xFEE
  6937                           wreg	equ	0xFE8
  6938                           postdec1	equ	0xFE5
  6939                           fsr1l	equ	0xFE1
  6940                           indf2	equ	0xFDF
  6941                           postinc2	equ	0xFDE
  6942                           postdec2	equ	0xFDD
  6943                           fsr2h	equ	0xFDA
  6944                           fsr2l	equ	0xFD9
  6945                           status	equ	0xFD8
  6946                           
  6947 ;; *************** function ___lldiv *****************
  6948 ;; Defined at:
  6949 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6950 ;; Parameters:    Size  Location     Type
  6951 ;;  dividend        4   14[BANK0 ] unsigned long 
  6952 ;;  divisor         4   18[BANK0 ] unsigned long 
  6953 ;; Auto vars:     Size  Location     Type
  6954 ;;  quotient        4   22[BANK0 ] unsigned long 
  6955 ;;  counter         1   26[BANK0 ] unsigned char 
  6956 ;; Return value:  Size  Location     Type
  6957 ;;                  4   14[BANK0 ] unsigned long 
  6958 ;; Registers used:
  6959 ;;		wreg, status,2, status,0
  6960 ;; Tracked objects:
  6961 ;;		On entry : 0/0
  6962 ;;		On exit  : 0/0
  6963 ;;		Unchanged: 0/0
  6964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6965 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6966 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6968 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6969 ;;Total ram usage:       13 bytes
  6970 ;; Hardware stack levels used:    1
  6971 ;; Hardware stack levels required when called:    6
  6972 ;; This function calls:
  6973 ;;		Nothing
  6974 ;; This function is called by:
  6975 ;;		_printf
  6976 ;;		_I2C_Master_Init
  6977 ;; This function uses a non-reentrant model
  6978 ;;
  6979                           
  6980                           	psect	text16
  6981  003DC2                     __ptext16:
  6982                           	opt stack 0
  6983  003DC2                     ___lldiv:
  6984                           	opt stack 22
  6985                           
  6986                           ; BSR set to: 0
  6987                           ;incstack = 0
  6988  003DC2  0E00               	movlw	0
  6989  003DC4  0100               	movlb	0	; () banked
  6990  003DC6  6F96               	movwf	___lldiv@quotient& (0+255),b
  6991  003DC8  0E00               	movlw	0
  6992  003DCA  6F97               	movwf	(___lldiv@quotient+1)& (0+255),b
  6993  003DCC  0E00               	movlw	0
  6994  003DCE  6F98               	movwf	(___lldiv@quotient+2)& (0+255),b
  6995  003DD0  0E00               	movlw	0
  6996  003DD2  6F99               	movwf	(___lldiv@quotient+3)& (0+255),b
  6997                           
  6998                           ; BSR set to: 0
  6999  003DD4  0100               	movlb	0	; () banked
  7000  003DD6  5192               	movf	___lldiv@divisor& (0+255),w,b
  7001  003DD8  0100               	movlb	0	; () banked
  7002  003DDA  1193               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7003  003DDC  0100               	movlb	0	; () banked
  7004  003DDE  1194               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7005  003DE0  0100               	movlb	0	; () banked
  7006  003DE2  1195               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7007  003DE4  B4D8               	btfsc	status,2,c
  7008  003DE6  D042               	goto	l1102
  7009                           
  7010                           ; BSR set to: 0
  7011  003DE8  0E01               	movlw	1
  7012  003DEA  0100               	movlb	0	; () banked
  7013  003DEC  6F9A               	movwf	___lldiv@counter& (0+255),b
  7014  003DEE  D008               	goto	l4684
  7015  003DF0                     l4682:
  7016                           
  7017                           ; BSR set to: 0
  7018  003DF0  0100               	movlb	0	; () banked
  7019  003DF2  90D8               	bcf	status,0,c
  7020  003DF4  3792               	rlcf	___lldiv@divisor& (0+255),f,b
  7021  003DF6  3793               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7022  003DF8  3794               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7023  003DFA  3795               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7024  003DFC  0100               	movlb	0	; () banked
  7025  003DFE  2B9A               	incf	___lldiv@counter& (0+255),f,b
  7026  003E00                     l4684:
  7027                           
  7028                           ; BSR set to: 0
  7029  003E00  0100               	movlb	0	; () banked
  7030  003E02  AF95               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7031  003E04  D7F5               	goto	l4682
  7032  003E06                     l4686:
  7033                           
  7034                           ; BSR set to: 0
  7035  003E06  0100               	movlb	0	; () banked
  7036  003E08  90D8               	bcf	status,0,c
  7037  003E0A  3796               	rlcf	___lldiv@quotient& (0+255),f,b
  7038  003E0C  3797               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7039  003E0E  3798               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7040  003E10  3799               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7041                           
  7042                           ; BSR set to: 0
  7043  003E12  0100               	movlb	0	; () banked
  7044  003E14  5192               	movf	___lldiv@divisor& (0+255),w,b
  7045  003E16  0100               	movlb	0	; () banked
  7046  003E18  5D8E               	subwf	___lldiv@dividend& (0+255),w,b
  7047  003E1A  0100               	movlb	0	; () banked
  7048  003E1C  5193               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7049  003E1E  0100               	movlb	0	; () banked
  7050  003E20  598F               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7051  003E22  0100               	movlb	0	; () banked
  7052  003E24  5194               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7053  003E26  0100               	movlb	0	; () banked
  7054  003E28  5990               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7055  003E2A  0100               	movlb	0	; () banked
  7056  003E2C  5195               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7057  003E2E  0100               	movlb	0	; () banked
  7058  003E30  5991               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7059  003E32  A0D8               	btfss	status,0,c
  7060  003E34  D012               	goto	l4694
  7061                           
  7062                           ; BSR set to: 0
  7063  003E36  0100               	movlb	0	; () banked
  7064  003E38  5192               	movf	___lldiv@divisor& (0+255),w,b
  7065  003E3A  0100               	movlb	0	; () banked
  7066  003E3C  5F8E               	subwf	___lldiv@dividend& (0+255),f,b
  7067  003E3E  0100               	movlb	0	; () banked
  7068  003E40  5193               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7069  003E42  0100               	movlb	0	; () banked
  7070  003E44  5B8F               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7071  003E46  0100               	movlb	0	; () banked
  7072  003E48  5194               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7073  003E4A  0100               	movlb	0	; () banked
  7074  003E4C  5B90               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7075  003E4E  0100               	movlb	0	; () banked
  7076  003E50  5195               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7077  003E52  0100               	movlb	0	; () banked
  7078  003E54  5B91               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7079                           
  7080                           ; BSR set to: 0
  7081  003E56  0100               	movlb	0	; () banked
  7082  003E58  8196               	bsf	___lldiv@quotient& (0+255),0,b
  7083  003E5A                     l4694:
  7084                           
  7085                           ; BSR set to: 0
  7086  003E5A  0100               	movlb	0	; () banked
  7087  003E5C  90D8               	bcf	status,0,c
  7088  003E5E  3395               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7089  003E60  3394               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7090  003E62  3393               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7091  003E64  3392               	rrcf	___lldiv@divisor& (0+255),f,b
  7092                           
  7093                           ; BSR set to: 0
  7094  003E66  0100               	movlb	0	; () banked
  7095  003E68  2F9A               	decfsz	___lldiv@counter& (0+255),f,b
  7096  003E6A  D7CD               	goto	l4686
  7097  003E6C                     l1102:
  7098                           
  7099                           ; BSR set to: 0
  7100  003E6C  C096  F08E         	movff	___lldiv@quotient,?___lldiv
  7101  003E70  C097  F08F         	movff	___lldiv@quotient+1,?___lldiv+1
  7102  003E74  C098  F090         	movff	___lldiv@quotient+2,?___lldiv+2
  7103  003E78  C099  F091         	movff	___lldiv@quotient+3,?___lldiv+3
  7104                           
  7105                           ; BSR set to: 0
  7106  003E7C  0012               	return		;funcret
  7107  003E7E                     __end_of___lldiv:
  7108                           	opt stack 0
  7109                           tblptru	equ	0xFF8
  7110                           tblptrh	equ	0xFF7
  7111                           tblptrl	equ	0xFF6
  7112                           tablat	equ	0xFF5
  7113                           prodh	equ	0xFF4
  7114                           prodl	equ	0xFF3
  7115                           postinc0	equ	0xFEE
  7116                           wreg	equ	0xFE8
  7117                           postdec1	equ	0xFE5
  7118                           fsr1l	equ	0xFE1
  7119                           indf2	equ	0xFDF
  7120                           postinc2	equ	0xFDE
  7121                           postdec2	equ	0xFDD
  7122                           fsr2h	equ	0xFDA
  7123                           fsr2l	equ	0xFD9
  7124                           status	equ	0xFD8
  7125                           
  7126 ;; *************** function ___ftsub *****************
  7127 ;; Defined at:
  7128 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  7129 ;; Parameters:    Size  Location     Type
  7130 ;;  f1              3   84[BANK0 ] float 
  7131 ;;  f2              3   87[BANK0 ] float 
  7132 ;; Auto vars:     Size  Location     Type
  7133 ;;		None
  7134 ;; Return value:  Size  Location     Type
  7135 ;;                  3   84[BANK0 ] float 
  7136 ;; Registers used:
  7137 ;;		wreg, status,2, status,0, cstack
  7138 ;; Tracked objects:
  7139 ;;		On entry : 0/0
  7140 ;;		On exit  : 0/0
  7141 ;;		Unchanged: 0/0
  7142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7143 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7146 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7147 ;;Total ram usage:        6 bytes
  7148 ;; Hardware stack levels used:    1
  7149 ;; Hardware stack levels required when called:    8
  7150 ;; This function calls:
  7151 ;;		___ftadd
  7152 ;; This function is called by:
  7153 ;;		_printf
  7154 ;; This function uses a non-reentrant model
  7155 ;;
  7156                           
  7157                           	psect	text17
  7158  004838                     __ptext17:
  7159                           	opt stack 0
  7160  004838                     ___ftsub:
  7161                           	opt stack 20
  7162                           
  7163                           ; BSR set to: 0
  7164                           ;incstack = 0
  7165  004838  0100               	movlb	0	; () banked
  7166  00483A  51D7               	movf	___ftsub@f2& (0+255),w,b
  7167  00483C  0100               	movlb	0	; () banked
  7168  00483E  11D8               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7169  004840  0100               	movlb	0	; () banked
  7170  004842  11D9               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7171  004844  B4D8               	btfsc	status,2,c
  7172  004846  D009               	goto	l4592
  7173                           
  7174                           ; BSR set to: 0
  7175  004848  0E00               	movlw	0
  7176  00484A  0100               	movlb	0	; () banked
  7177  00484C  1BD7               	xorwf	___ftsub@f2& (0+255),f,b
  7178  00484E  0E00               	movlw	0
  7179  004850  0100               	movlb	0	; () banked
  7180  004852  1BD8               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7181  004854  0E80               	movlw	128
  7182  004856  0100               	movlb	0	; () banked
  7183  004858  1BD9               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7184  00485A                     l4592:
  7185                           
  7186                           ; BSR set to: 0
  7187  00485A  C0D4  F0C8         	movff	___ftsub@f1,___ftadd@f1
  7188  00485E  C0D5  F0C9         	movff	___ftsub@f1+1,___ftadd@f1+1
  7189  004862  C0D6  F0CA         	movff	___ftsub@f1+2,___ftadd@f1+2
  7190  004866  C0D7  F0CB         	movff	___ftsub@f2,___ftadd@f2
  7191  00486A  C0D8  F0CC         	movff	___ftsub@f2+1,___ftadd@f2+1
  7192  00486E  C0D9  F0CD         	movff	___ftsub@f2+2,___ftadd@f2+2
  7193  004872  EC21  F010         	call	___ftadd	;wreg free
  7194  004876  C0C8  F0D4         	movff	?___ftadd,?___ftsub
  7195  00487A  C0C9  F0D5         	movff	?___ftadd+1,?___ftsub+1
  7196  00487E  C0CA  F0D6         	movff	?___ftadd+2,?___ftsub+2
  7197  004882  0012               	return	
  7198  004884                     __end_of___ftsub:
  7199                           	opt stack 0
  7200                           tblptru	equ	0xFF8
  7201                           tblptrh	equ	0xFF7
  7202                           tblptrl	equ	0xFF6
  7203                           tablat	equ	0xFF5
  7204                           prodh	equ	0xFF4
  7205                           prodl	equ	0xFF3
  7206                           postinc0	equ	0xFEE
  7207                           wreg	equ	0xFE8
  7208                           postdec1	equ	0xFE5
  7209                           fsr1l	equ	0xFE1
  7210                           indf2	equ	0xFDF
  7211                           postinc2	equ	0xFDE
  7212                           postdec2	equ	0xFDD
  7213                           fsr2h	equ	0xFDA
  7214                           fsr2l	equ	0xFD9
  7215                           status	equ	0xFD8
  7216                           
  7217 ;; *************** function ___ftneg *****************
  7218 ;; Defined at:
  7219 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  7220 ;; Parameters:    Size  Location     Type
  7221 ;;  f1              3   14[BANK0 ] float 
  7222 ;; Auto vars:     Size  Location     Type
  7223 ;;		None
  7224 ;; Return value:  Size  Location     Type
  7225 ;;                  3   14[BANK0 ] float 
  7226 ;; Registers used:
  7227 ;;		wreg, status,2, status,0
  7228 ;; Tracked objects:
  7229 ;;		On entry : 0/0
  7230 ;;		On exit  : 0/0
  7231 ;;		Unchanged: 0/0
  7232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7233 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7236 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7237 ;;Total ram usage:        3 bytes
  7238 ;; Hardware stack levels used:    1
  7239 ;; Hardware stack levels required when called:    6
  7240 ;; This function calls:
  7241 ;;		Nothing
  7242 ;; This function is called by:
  7243 ;;		_printf
  7244 ;; This function uses a non-reentrant model
  7245 ;;
  7246                           
  7247                           	psect	text18
  7248  004AD6                     __ptext18:
  7249                           	opt stack 0
  7250  004AD6                     ___ftneg:
  7251                           	opt stack 22
  7252                           
  7253                           ;incstack = 0
  7254  004AD6  0100               	movlb	0	; () banked
  7255  004AD8  518E               	movf	___ftneg@f1& (0+255),w,b
  7256  004ADA  0100               	movlb	0	; () banked
  7257  004ADC  118F               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  7258  004ADE  0100               	movlb	0	; () banked
  7259  004AE0  1190               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  7260  004AE2  B4D8               	btfsc	status,2,c
  7261  004AE4  D009               	goto	l1057
  7262                           
  7263                           ; BSR set to: 0
  7264  004AE6  0E00               	movlw	0
  7265  004AE8  0100               	movlb	0	; () banked
  7266  004AEA  1B8E               	xorwf	___ftneg@f1& (0+255),f,b
  7267  004AEC  0E00               	movlw	0
  7268  004AEE  0100               	movlb	0	; () banked
  7269  004AF0  1B8F               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  7270  004AF2  0E80               	movlw	128
  7271  004AF4  0100               	movlb	0	; () banked
  7272  004AF6  1B90               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  7273  004AF8                     l1057:
  7274                           
  7275                           ; BSR set to: 0
  7276  004AF8  C08E  F08E         	movff	___ftneg@f1,?___ftneg
  7277  004AFC  C08F  F08F         	movff	___ftneg@f1+1,?___ftneg+1
  7278  004B00  C090  F090         	movff	___ftneg@f1+2,?___ftneg+2
  7279                           
  7280                           ; BSR set to: 0
  7281  004B04  0012               	return		;funcret
  7282  004B06                     __end_of___ftneg:
  7283                           	opt stack 0
  7284                           tblptru	equ	0xFF8
  7285                           tblptrh	equ	0xFF7
  7286                           tblptrl	equ	0xFF6
  7287                           tablat	equ	0xFF5
  7288                           prodh	equ	0xFF4
  7289                           prodl	equ	0xFF3
  7290                           postinc0	equ	0xFEE
  7291                           wreg	equ	0xFE8
  7292                           postdec1	equ	0xFE5
  7293                           fsr1l	equ	0xFE1
  7294                           indf2	equ	0xFDF
  7295                           postinc2	equ	0xFDE
  7296                           postdec2	equ	0xFDD
  7297                           fsr2h	equ	0xFDA
  7298                           fsr2l	equ	0xFD9
  7299                           status	equ	0xFD8
  7300                           
  7301 ;; *************** function ___ftge *****************
  7302 ;; Defined at:
  7303 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  7304 ;; Parameters:    Size  Location     Type
  7305 ;;  ff1             3   14[BANK0 ] float 
  7306 ;;  ff2             3   17[BANK0 ] float 
  7307 ;; Auto vars:     Size  Location     Type
  7308 ;;		None
  7309 ;; Return value:  Size  Location     Type
  7310 ;;		None               void
  7311 ;; Registers used:
  7312 ;;		wreg, status,2, status,0
  7313 ;; Tracked objects:
  7314 ;;		On entry : 0/0
  7315 ;;		On exit  : 0/0
  7316 ;;		Unchanged: 0/0
  7317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7318 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7320 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7321 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7322 ;;Total ram usage:        9 bytes
  7323 ;; Hardware stack levels used:    1
  7324 ;; Hardware stack levels required when called:    6
  7325 ;; This function calls:
  7326 ;;		Nothing
  7327 ;; This function is called by:
  7328 ;;		_sortBattery
  7329 ;;		_printf
  7330 ;; This function uses a non-reentrant model
  7331 ;;
  7332                           
  7333                           	psect	text19
  7334  003B74                     __ptext19:
  7335                           	opt stack 0
  7336  003B74                     ___ftge:
  7337                           	opt stack 22
  7338                           
  7339                           ; BSR set to: 0
  7340                           ;incstack = 0
  7341  003B74  0100               	movlb	0	; () banked
  7342  003B76  AF90               	btfss	(___ftge@ff1+2)& (0+255),7,b
  7343  003B78  D01D               	goto	l4612
  7344                           
  7345                           ; BSR set to: 0
  7346  003B7A  C08E  F094         	movff	___ftge@ff1,??___ftge
  7347  003B7E  C08F  F095         	movff	___ftge@ff1+1,??___ftge+1
  7348  003B82  C090  F096         	movff	___ftge@ff1+2,??___ftge+2
  7349  003B86  0100               	movlb	0	; () banked
  7350  003B88  1F94               	comf	??___ftge& (0+255),f,b
  7351  003B8A  1F95               	comf	(??___ftge+1)& (0+255),f,b
  7352  003B8C  1F96               	comf	(??___ftge+2)& (0+255),f,b
  7353  003B8E  2B94               	incf	??___ftge& (0+255),f,b
  7354  003B90  0E00               	movlw	0
  7355  003B92  2395               	addwfc	(??___ftge+1)& (0+255),f,b
  7356  003B94  2396               	addwfc	(??___ftge+2)& (0+255),f,b
  7357  003B96  0E00               	movlw	0
  7358  003B98  0100               	movlb	0	; () banked
  7359  003B9A  2594               	addwf	??___ftge& (0+255),w,b
  7360  003B9C  0100               	movlb	0	; () banked
  7361  003B9E  6F8E               	movwf	___ftge@ff1& (0+255),b
  7362  003BA0  0E00               	movlw	0
  7363  003BA2  0100               	movlb	0	; () banked
  7364  003BA4  2195               	addwfc	(??___ftge+1)& (0+255),w,b
  7365  003BA6  0100               	movlb	0	; () banked
  7366  003BA8  6F8F               	movwf	(___ftge@ff1+1)& (0+255),b
  7367  003BAA  0E80               	movlw	128
  7368  003BAC  0100               	movlb	0	; () banked
  7369  003BAE  2196               	addwfc	(??___ftge+2)& (0+255),w,b
  7370  003BB0  0100               	movlb	0	; () banked
  7371  003BB2  6F90               	movwf	(___ftge@ff1+2)& (0+255),b
  7372  003BB4                     l4612:
  7373                           
  7374                           ; BSR set to: 0
  7375  003BB4  0100               	movlb	0	; () banked
  7376  003BB6  AF93               	btfss	(___ftge@ff2+2)& (0+255),7,b
  7377  003BB8  D01D               	goto	l4616
  7378                           
  7379                           ; BSR set to: 0
  7380  003BBA  C091  F094         	movff	___ftge@ff2,??___ftge
  7381  003BBE  C092  F095         	movff	___ftge@ff2+1,??___ftge+1
  7382  003BC2  C093  F096         	movff	___ftge@ff2+2,??___ftge+2
  7383  003BC6  0100               	movlb	0	; () banked
  7384  003BC8  1F94               	comf	??___ftge& (0+255),f,b
  7385  003BCA  1F95               	comf	(??___ftge+1)& (0+255),f,b
  7386  003BCC  1F96               	comf	(??___ftge+2)& (0+255),f,b
  7387  003BCE  2B94               	incf	??___ftge& (0+255),f,b
  7388  003BD0  0E00               	movlw	0
  7389  003BD2  2395               	addwfc	(??___ftge+1)& (0+255),f,b
  7390  003BD4  2396               	addwfc	(??___ftge+2)& (0+255),f,b
  7391  003BD6  0E00               	movlw	0
  7392  003BD8  0100               	movlb	0	; () banked
  7393  003BDA  2594               	addwf	??___ftge& (0+255),w,b
  7394  003BDC  0100               	movlb	0	; () banked
  7395  003BDE  6F91               	movwf	___ftge@ff2& (0+255),b
  7396  003BE0  0E00               	movlw	0
  7397  003BE2  0100               	movlb	0	; () banked
  7398  003BE4  2195               	addwfc	(??___ftge+1)& (0+255),w,b
  7399  003BE6  0100               	movlb	0	; () banked
  7400  003BE8  6F92               	movwf	(___ftge@ff2+1)& (0+255),b
  7401  003BEA  0E80               	movlw	128
  7402  003BEC  0100               	movlb	0	; () banked
  7403  003BEE  2196               	addwfc	(??___ftge+2)& (0+255),w,b
  7404  003BF0  0100               	movlb	0	; () banked
  7405  003BF2  6F93               	movwf	(___ftge@ff2+2)& (0+255),b
  7406  003BF4                     l4616:
  7407                           
  7408                           ; BSR set to: 0
  7409  003BF4  0E00               	movlw	0
  7410  003BF6  0100               	movlb	0	; () banked
  7411  003BF8  1B8E               	xorwf	___ftge@ff1& (0+255),f,b
  7412  003BFA  0E00               	movlw	0
  7413  003BFC  0100               	movlb	0	; () banked
  7414  003BFE  1B8F               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  7415  003C00  0E80               	movlw	128
  7416  003C02  0100               	movlb	0	; () banked
  7417  003C04  1B90               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  7418                           
  7419                           ; BSR set to: 0
  7420  003C06  0E00               	movlw	0
  7421  003C08  0100               	movlb	0	; () banked
  7422  003C0A  1B91               	xorwf	___ftge@ff2& (0+255),f,b
  7423  003C0C  0E00               	movlw	0
  7424  003C0E  0100               	movlb	0	; () banked
  7425  003C10  1B92               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  7426  003C12  0E80               	movlw	128
  7427  003C14  0100               	movlb	0	; () banked
  7428  003C16  1B93               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  7429  003C18  0100               	movlb	0	; () banked
  7430  003C1A  5191               	movf	___ftge@ff2& (0+255),w,b
  7431  003C1C  0100               	movlb	0	; () banked
  7432  003C1E  5D8E               	subwf	___ftge@ff1& (0+255),w,b
  7433  003C20  0100               	movlb	0	; () banked
  7434  003C22  5192               	movf	(___ftge@ff2+1)& (0+255),w,b
  7435  003C24  0100               	movlb	0	; () banked
  7436  003C26  598F               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  7437  003C28  0100               	movlb	0	; () banked
  7438  003C2A  5193               	movf	(___ftge@ff2+2)& (0+255),w,b
  7439  003C2C  0100               	movlb	0	; () banked
  7440  003C2E  5990               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  7441  003C30  B0D8               	btfsc	status,0,c
  7442  003C32  D002               	goto	l4622
  7443                           
  7444                           ; BSR set to: 0
  7445  003C34  90D8               	bcf	status,0,c
  7446  003C36  0012               	return	
  7447  003C38                     l4622:
  7448                           
  7449                           ; BSR set to: 0
  7450  003C38  80D8               	bsf	status,0,c
  7451                           
  7452                           ; BSR set to: 0
  7453  003C3A  0012               	return	
  7454  003C3C                     __end_of___ftge:
  7455                           	opt stack 0
  7456                           tblptru	equ	0xFF8
  7457                           tblptrh	equ	0xFF7
  7458                           tblptrl	equ	0xFF6
  7459                           tablat	equ	0xFF5
  7460                           prodh	equ	0xFF4
  7461                           prodl	equ	0xFF3
  7462                           postinc0	equ	0xFEE
  7463                           wreg	equ	0xFE8
  7464                           postdec1	equ	0xFE5
  7465                           fsr1l	equ	0xFE1
  7466                           indf2	equ	0xFDF
  7467                           postinc2	equ	0xFDE
  7468                           postdec2	equ	0xFDD
  7469                           fsr2h	equ	0xFDA
  7470                           fsr2l	equ	0xFD9
  7471                           status	equ	0xFD8
  7472                           
  7473 ;; *************** function _lcdClear *****************
  7474 ;; Defined at:
  7475 ;;		line 74 in file "lcd.c"
  7476 ;; Parameters:    Size  Location     Type
  7477 ;;		None
  7478 ;; Auto vars:     Size  Location     Type
  7479 ;;		None
  7480 ;; Return value:  Size  Location     Type
  7481 ;;                  1    wreg      void 
  7482 ;; Registers used:
  7483 ;;		wreg, status,2, status,0, cstack
  7484 ;; Tracked objects:
  7485 ;;		On entry : 0/0
  7486 ;;		On exit  : 0/0
  7487 ;;		Unchanged: 0/0
  7488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7493 ;;Total ram usage:        0 bytes
  7494 ;; Hardware stack levels used:    1
  7495 ;; Hardware stack levels required when called:    8
  7496 ;; This function calls:
  7497 ;;		_lcdInst
  7498 ;; This function is called by:
  7499 ;;		_sortBattery
  7500 ;;		_pause
  7501 ;;		_dateTime
  7502 ;;		_mainMenu
  7503 ;;		_runSelect
  7504 ;;		_runMenu
  7505 ;;		_runTime
  7506 ;;		_runStats
  7507 ;; This function uses a non-reentrant model
  7508 ;;
  7509                           
  7510                           	psect	text20
  7511  004C5C                     __ptext20:
  7512                           	opt stack 0
  7513  004C5C                     _lcdClear:
  7514                           	opt stack 20
  7515                           
  7516                           ;lcd.c: 75: lcdInst(0b00000001);
  7517                           
  7518                           ; BSR set to: 0
  7519                           ;incstack = 0
  7520  004C5C  0E01               	movlw	1
  7521  004C5E  ECAF  F025         	call	_lcdInst
  7522  004C62  0012               	return		;funcret
  7523  004C64                     __end_of_lcdClear:
  7524                           	opt stack 0
  7525                           tblptru	equ	0xFF8
  7526                           tblptrh	equ	0xFF7
  7527                           tblptrl	equ	0xFF6
  7528                           tablat	equ	0xFF5
  7529                           prodh	equ	0xFF4
  7530                           prodl	equ	0xFF3
  7531                           postinc0	equ	0xFEE
  7532                           wreg	equ	0xFE8
  7533                           postdec1	equ	0xFE5
  7534                           fsr1l	equ	0xFE1
  7535                           indf2	equ	0xFDF
  7536                           postinc2	equ	0xFDE
  7537                           postdec2	equ	0xFDD
  7538                           fsr2h	equ	0xFDA
  7539                           fsr2l	equ	0xFD9
  7540                           status	equ	0xFD8
  7541                           
  7542 ;; *************** function _digitalWrite *****************
  7543 ;; Defined at:
  7544 ;;		line 53 in file "iopin.c"
  7545 ;; Parameters:    Size  Location     Type
  7546 ;;  pin             2   14[BANK0 ] PTR int 
  7547 ;;		 -> AA_float(4), redirectingServo(6), padServo(6), conveyorServo(6), 
  7548 ;;		 -> cylinderMotor(4), 
  7549 ;;  val             2   16[BANK0 ] int 
  7550 ;; Auto vars:     Size  Location     Type
  7551 ;;  p               2   21[BANK0 ] int 
  7552 ;; Return value:  Size  Location     Type
  7553 ;;                  1    wreg      void 
  7554 ;; Registers used:
  7555 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7556 ;; Tracked objects:
  7557 ;;		On entry : 0/0
  7558 ;;		On exit  : 0/0
  7559 ;;		Unchanged: 0/0
  7560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7561 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7562 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7563 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7564 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7565 ;;Total ram usage:        9 bytes
  7566 ;; Hardware stack levels used:    1
  7567 ;; Hardware stack levels required when called:    6
  7568 ;; This function calls:
  7569 ;;		Nothing
  7570 ;; This function is called by:
  7571 ;;		_main
  7572 ;;		_sortBattery
  7573 ;; This function uses a non-reentrant model
  7574 ;;
  7575                           
  7576                           	psect	text21
  7577  0035F2                     __ptext21:
  7578                           	opt stack 0
  7579  0035F2                     _digitalWrite:
  7580                           	opt stack 23
  7581                           
  7582                           ;iopin.c: 54: if(pin){
  7583                           
  7584                           ;incstack = 0
  7585  0035F2  0100               	movlb	0	; () banked
  7586  0035F4  518E               	movf	digitalWrite@pin& (0+255),w,b
  7587  0035F6  0100               	movlb	0	; () banked
  7588  0035F8  118F               	iorwf	(digitalWrite@pin+1)& (0+255),w,b
  7589  0035FA  B4D8               	btfsc	status,2,c
  7590  0035FC  0012               	return	
  7591                           
  7592                           ; BSR set to: 0
  7593                           ;iopin.c: 55: int p = 1 << pin[1];
  7594  0035FE  0100               	movlb	0	; () banked
  7595  003600  EE20 F002          	lfsr	2,2
  7596  003604  518E               	movf	digitalWrite@pin& (0+255),w,b
  7597  003606  26D9               	addwf	fsr2l,f,c
  7598  003608  518F               	movf	(digitalWrite@pin+1)& (0+255),w,b
  7599  00360A  22DA               	addwfc	fsr2h,f,c
  7600  00360C  50DF               	movf	indf2,w,c
  7601  00360E  0100               	movlb	0	; () banked
  7602  003610  6F92               	movwf	??_digitalWrite& (0+255),b
  7603  003612  0E01               	movlw	1
  7604  003614  0100               	movlb	0	; () banked
  7605  003616  6F93               	movwf	(??_digitalWrite+1)& (0+255),b
  7606  003618  0E00               	movlw	0
  7607  00361A  0100               	movlb	0	; () banked
  7608  00361C  6F94               	movwf	(??_digitalWrite+2)& (0+255),b
  7609  00361E  0100               	movlb	0	; () banked
  7610  003620  2B92               	incf	??_digitalWrite& (0+255),f,b
  7611  003622  D004               	goto	u5494
  7612  003624                     u5495:
  7613  003624  90D8               	bcf	status,0,c
  7614  003626  0100               	movlb	0	; () banked
  7615  003628  3793               	rlcf	(??_digitalWrite+1)& (0+255),f,b
  7616  00362A  3794               	rlcf	(??_digitalWrite+2)& (0+255),f,b
  7617  00362C                     u5494:
  7618  00362C  0100               	movlb	0	; () banked
  7619  00362E  2F92               	decfsz	??_digitalWrite& (0+255),f,b
  7620  003630  D7F9               	goto	u5495
  7621  003632  C093  F095         	movff	??_digitalWrite+1,digitalWrite@p
  7622  003636  C094  F096         	movff	??_digitalWrite+2,digitalWrite@p+1
  7623                           
  7624                           ;iopin.c: 56: if(val == 0){
  7625  00363A  0100               	movlb	0	; () banked
  7626  00363C  5190               	movf	digitalWrite@val& (0+255),w,b
  7627  00363E  0100               	movlb	0	; () banked
  7628  003640  1191               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  7629  003642  A4D8               	btfss	status,2,c
  7630  003644  D03C               	goto	l5366
  7631                           
  7632                           ; BSR set to: 0
  7633                           ;iopin.c: 57: p ^= 0xff;
  7634  003646  0EFF               	movlw	255
  7635  003648  0100               	movlb	0	; () banked
  7636  00364A  1B95               	xorwf	digitalWrite@p& (0+255),f,b
  7637                           
  7638                           ; BSR set to: 0
  7639                           ;iopin.c: 58: }
  7640                           ;iopin.c: 60: switch(pin[0]){
  7641  00364C  D038               	goto	l5366
  7642  00364E                     l5342:
  7643                           
  7644                           ; BSR set to: 0
  7645  00364E  0100               	movlb	0	; () banked
  7646  003650  0590               	decf	digitalWrite@val& (0+255),w,b
  7647  003652  0100               	movlb	0	; () banked
  7648  003654  1191               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  7649  003656  A4D8               	btfss	status,2,c
  7650  003658  D004               	goto	l5346
  7651                           
  7652                           ; BSR set to: 0
  7653  00365A  0100               	movlb	0	; () banked
  7654  00365C  5195               	movf	digitalWrite@p& (0+255),w,b
  7655  00365E  1289               	iorwf	3977,f,c	;volatile
  7656  003660  0012               	return	
  7657  003662                     l5346:
  7658                           
  7659                           ; BSR set to: 0
  7660                           ;iopin.c: 62: else LATA &= p;
  7661  003662  0100               	movlb	0	; () banked
  7662  003664  5195               	movf	digitalWrite@p& (0+255),w,b
  7663  003666  1689               	andwf	3977,f,c	;volatile
  7664                           
  7665                           ; BSR set to: 0
  7666                           ;iopin.c: 63: break;
  7667  003668  0012               	return	
  7668  00366A                     l5348:
  7669                           
  7670                           ; BSR set to: 0
  7671  00366A  0100               	movlb	0	; () banked
  7672  00366C  0590               	decf	digitalWrite@val& (0+255),w,b
  7673  00366E  0100               	movlb	0	; () banked
  7674  003670  1191               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  7675  003672  A4D8               	btfss	status,2,c
  7676  003674  D004               	goto	l5352
  7677                           
  7678                           ; BSR set to: 0
  7679  003676  0100               	movlb	0	; () banked
  7680  003678  5195               	movf	digitalWrite@p& (0+255),w,b
  7681  00367A  128A               	iorwf	3978,f,c	;volatile
  7682  00367C  0012               	return	
  7683  00367E                     l5352:
  7684                           
  7685                           ; BSR set to: 0
  7686                           ;iopin.c: 65: else LATB &= p;
  7687  00367E  0100               	movlb	0	; () banked
  7688  003680  5195               	movf	digitalWrite@p& (0+255),w,b
  7689  003682  168A               	andwf	3978,f,c	;volatile
  7690                           
  7691                           ; BSR set to: 0
  7692                           ;iopin.c: 66: break;
  7693  003684  0012               	return	
  7694  003686                     l5354:
  7695                           
  7696                           ; BSR set to: 0
  7697  003686  0100               	movlb	0	; () banked
  7698  003688  0590               	decf	digitalWrite@val& (0+255),w,b
  7699  00368A  0100               	movlb	0	; () banked
  7700  00368C  1191               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  7701  00368E  A4D8               	btfss	status,2,c
  7702  003690  D004               	goto	l5358
  7703                           
  7704                           ; BSR set to: 0
  7705  003692  0100               	movlb	0	; () banked
  7706  003694  5195               	movf	digitalWrite@p& (0+255),w,b
  7707  003696  128B               	iorwf	3979,f,c	;volatile
  7708  003698  0012               	return	
  7709  00369A                     l5358:
  7710                           
  7711                           ; BSR set to: 0
  7712                           ;iopin.c: 68: else LATC &= p;
  7713  00369A  0100               	movlb	0	; () banked
  7714  00369C  5195               	movf	digitalWrite@p& (0+255),w,b
  7715  00369E  168B               	andwf	3979,f,c	;volatile
  7716                           
  7717                           ; BSR set to: 0
  7718                           ;iopin.c: 69: break;
  7719  0036A0  0012               	return	
  7720  0036A2                     l5360:
  7721                           
  7722                           ; BSR set to: 0
  7723  0036A2  0100               	movlb	0	; () banked
  7724  0036A4  0590               	decf	digitalWrite@val& (0+255),w,b
  7725  0036A6  0100               	movlb	0	; () banked
  7726  0036A8  1191               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  7727  0036AA  A4D8               	btfss	status,2,c
  7728  0036AC  D004               	goto	l5364
  7729                           
  7730                           ; BSR set to: 0
  7731  0036AE  0100               	movlb	0	; () banked
  7732  0036B0  5195               	movf	digitalWrite@p& (0+255),w,b
  7733  0036B2  128C               	iorwf	3980,f,c	;volatile
  7734  0036B4  0012               	return	
  7735  0036B6                     l5364:
  7736                           
  7737                           ; BSR set to: 0
  7738                           ;iopin.c: 71: else LATD &= p;
  7739  0036B6  0100               	movlb	0	; () banked
  7740  0036B8  5195               	movf	digitalWrite@p& (0+255),w,b
  7741  0036BA  168C               	andwf	3980,f,c	;volatile
  7742                           
  7743                           ; BSR set to: 0
  7744                           ;iopin.c: 72: }
  7745  0036BC  0012               	return	
  7746  0036BE                     l5366:
  7747                           
  7748                           ; BSR set to: 0
  7749  0036BE  C08E  FFD9         	movff	digitalWrite@pin,fsr2l
  7750  0036C2  C08F  FFDA         	movff	digitalWrite@pin+1,fsr2h
  7751  0036C6  CFDE F092          	movff	postinc2,??_digitalWrite
  7752  0036CA  CFDD F093          	movff	postdec2,??_digitalWrite+1
  7753                           
  7754                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7755                           ; Switch size 1, requested type "space"
  7756                           ; Number of cases is 1, Range of values is 0 to 0
  7757                           ; switch strategies available:
  7758                           ; Name         Instructions Cycles
  7759                           ; simple_byte            4     3 (average)
  7760                           ;	Chosen strategy is simple_byte
  7761  0036CE  0100               	movlb	0	; () banked
  7762  0036D0  5193               	movf	(??_digitalWrite+1)& (0+255),w,b
  7763  0036D2  0A00               	xorlw	0	; case 0
  7764  0036D4  A4D8               	btfss	status,2,c
  7765  0036D6  0012               	return	
  7766                           
  7767                           ; BSR set to: 0
  7768                           ; Switch size 1, requested type "space"
  7769                           ; Number of cases is 4, Range of values is 0 to 3
  7770                           ; switch strategies available:
  7771                           ; Name         Instructions Cycles
  7772                           ; simple_byte           13     7 (average)
  7773                           ;	Chosen strategy is simple_byte
  7774  0036D8  0100               	movlb	0	; () banked
  7775  0036DA  5192               	movf	??_digitalWrite& (0+255),w,b
  7776  0036DC  0A00               	xorlw	0	; case 0
  7777  0036DE  B4D8               	btfsc	status,2,c
  7778  0036E0  D7B6               	goto	l5342
  7779  0036E2  0A01               	xorlw	1	; case 1
  7780  0036E4  B4D8               	btfsc	status,2,c
  7781  0036E6  D7C1               	goto	l5348
  7782  0036E8  0A03               	xorlw	3	; case 2
  7783  0036EA  B4D8               	btfsc	status,2,c
  7784  0036EC  D7CC               	goto	l5354
  7785  0036EE  0A01               	xorlw	1	; case 3
  7786  0036F0  A4D8               	btfss	status,2,c
  7787                           
  7788                           ; BSR set to: 0
  7789  0036F2  0012               	return	
  7790  0036F4  D7D6               	goto	l5360
  7791  0036F6                     __end_of_digitalWrite:
  7792                           	opt stack 0
  7793                           tblptru	equ	0xFF8
  7794                           tblptrh	equ	0xFF7
  7795                           tblptrl	equ	0xFF6
  7796                           tablat	equ	0xFF5
  7797                           prodh	equ	0xFF4
  7798                           prodl	equ	0xFF3
  7799                           postinc0	equ	0xFEE
  7800                           wreg	equ	0xFE8
  7801                           postdec1	equ	0xFE5
  7802                           fsr1l	equ	0xFE1
  7803                           indf2	equ	0xFDF
  7804                           postinc2	equ	0xFDE
  7805                           postdec2	equ	0xFDD
  7806                           fsr2h	equ	0xFDA
  7807                           fsr2l	equ	0xFD9
  7808                           status	equ	0xFD8
  7809                           
  7810 ;; *************** function _digitalRead *****************
  7811 ;; Defined at:
  7812 ;;		line 43 in file "iopin.c"
  7813 ;; Parameters:    Size  Location     Type
  7814 ;;  pin             2   14[BANK0 ] PTR int 
  7815 ;;		 -> padPin2(4), padPin1(4), 
  7816 ;; Auto vars:     Size  Location     Type
  7817 ;;		None
  7818 ;; Return value:  Size  Location     Type
  7819 ;;                  2   14[BANK0 ] int 
  7820 ;; Registers used:
  7821 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7822 ;; Tracked objects:
  7823 ;;		On entry : 0/0
  7824 ;;		On exit  : 0/0
  7825 ;;		Unchanged: 0/0
  7826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7827 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7829 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7830 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7831 ;;Total ram usage:        4 bytes
  7832 ;; Hardware stack levels used:    1
  7833 ;; Hardware stack levels required when called:    6
  7834 ;; This function calls:
  7835 ;;		Nothing
  7836 ;; This function is called by:
  7837 ;;		_sortBattery
  7838 ;; This function uses a non-reentrant model
  7839 ;;
  7840                           
  7841                           	psect	text22
  7842  003188                     __ptext22:
  7843                           	opt stack 0
  7844  003188                     _digitalRead:
  7845                           	opt stack 23
  7846                           
  7847                           ;iopin.c: 44: switch(pin[0]){
  7848                           
  7849                           ; BSR set to: 0
  7850                           ;incstack = 0
  7851  003188  D078               	goto	l5412
  7852  00318A                     l5394:
  7853  00318A  0100               	movlb	0	; () banked
  7854  00318C  EE20 F002          	lfsr	2,2
  7855  003190  518E               	movf	digitalRead@pin& (0+255),w,b
  7856  003192  26D9               	addwf	fsr2l,f,c
  7857  003194  518F               	movf	(digitalRead@pin+1)& (0+255),w,b
  7858  003196  22DA               	addwfc	fsr2h,f,c
  7859  003198  50DF               	movf	indf2,w,c
  7860  00319A  0100               	movlb	0	; () banked
  7861  00319C  6F90               	movwf	??_digitalRead& (0+255),b
  7862  00319E  CF80 F091          	movff	3968,??_digitalRead+1	;volatile
  7863  0031A2  0100               	movlb	0	; () banked
  7864  0031A4  2B90               	incf	??_digitalRead& (0+255),f,b
  7865  0031A6  D003               	goto	u5574
  7866  0031A8                     u5575:
  7867  0031A8  0100               	movlb	0	; () banked
  7868  0031AA  90D8               	bcf	status,0,c
  7869  0031AC  3391               	rrcf	(??_digitalRead+1)& (0+255),f,b
  7870  0031AE                     u5574:
  7871  0031AE  0100               	movlb	0	; () banked
  7872  0031B0  2F90               	decfsz	??_digitalRead& (0+255),f,b
  7873  0031B2  D7FA               	goto	u5575
  7874  0031B4  0E01               	movlw	1
  7875  0031B6  0100               	movlb	0	; () banked
  7876  0031B8  1791               	andwf	(??_digitalRead+1)& (0+255),f,b
  7877  0031BA  0100               	movlb	0	; () banked
  7878  0031BC  5191               	movf	(??_digitalRead+1)& (0+255),w,b
  7879  0031BE  0100               	movlb	0	; () banked
  7880  0031C0  6F8E               	movwf	?_digitalRead& (0+255),b
  7881  0031C2  6B8F               	clrf	(?_digitalRead+1)& (0+255),b
  7882                           
  7883                           ; BSR set to: 0
  7884  0031C4  0012               	return	
  7885  0031C6                     l5398:
  7886                           
  7887                           ; BSR set to: 0
  7888  0031C6  0100               	movlb	0	; () banked
  7889  0031C8  EE20 F002          	lfsr	2,2
  7890  0031CC  518E               	movf	digitalRead@pin& (0+255),w,b
  7891  0031CE  26D9               	addwf	fsr2l,f,c
  7892  0031D0  518F               	movf	(digitalRead@pin+1)& (0+255),w,b
  7893  0031D2  22DA               	addwfc	fsr2h,f,c
  7894  0031D4  50DF               	movf	indf2,w,c
  7895  0031D6  0100               	movlb	0	; () banked
  7896  0031D8  6F90               	movwf	??_digitalRead& (0+255),b
  7897  0031DA  CF81 F091          	movff	3969,??_digitalRead+1	;volatile
  7898  0031DE  0100               	movlb	0	; () banked
  7899  0031E0  2B90               	incf	??_digitalRead& (0+255),f,b
  7900  0031E2  D003               	goto	u5584
  7901  0031E4                     u5585:
  7902  0031E4  0100               	movlb	0	; () banked
  7903  0031E6  90D8               	bcf	status,0,c
  7904  0031E8  3391               	rrcf	(??_digitalRead+1)& (0+255),f,b
  7905  0031EA                     u5584:
  7906  0031EA  0100               	movlb	0	; () banked
  7907  0031EC  2F90               	decfsz	??_digitalRead& (0+255),f,b
  7908  0031EE  D7FA               	goto	u5585
  7909  0031F0  0E01               	movlw	1
  7910  0031F2  0100               	movlb	0	; () banked
  7911  0031F4  1791               	andwf	(??_digitalRead+1)& (0+255),f,b
  7912  0031F6  0100               	movlb	0	; () banked
  7913  0031F8  5191               	movf	(??_digitalRead+1)& (0+255),w,b
  7914  0031FA  0100               	movlb	0	; () banked
  7915  0031FC  6F8E               	movwf	?_digitalRead& (0+255),b
  7916  0031FE  6B8F               	clrf	(?_digitalRead+1)& (0+255),b
  7917                           
  7918                           ; BSR set to: 0
  7919  003200  0012               	return	
  7920  003202                     l5402:
  7921                           
  7922                           ; BSR set to: 0
  7923  003202  0100               	movlb	0	; () banked
  7924  003204  EE20 F002          	lfsr	2,2
  7925  003208  518E               	movf	digitalRead@pin& (0+255),w,b
  7926  00320A  26D9               	addwf	fsr2l,f,c
  7927  00320C  518F               	movf	(digitalRead@pin+1)& (0+255),w,b
  7928  00320E  22DA               	addwfc	fsr2h,f,c
  7929  003210  50DF               	movf	indf2,w,c
  7930  003212  0100               	movlb	0	; () banked
  7931  003214  6F90               	movwf	??_digitalRead& (0+255),b
  7932  003216  CF82 F091          	movff	3970,??_digitalRead+1	;volatile
  7933  00321A  0100               	movlb	0	; () banked
  7934  00321C  2B90               	incf	??_digitalRead& (0+255),f,b
  7935  00321E  D003               	goto	u5594
  7936  003220                     u5595:
  7937  003220  0100               	movlb	0	; () banked
  7938  003222  90D8               	bcf	status,0,c
  7939  003224  3391               	rrcf	(??_digitalRead+1)& (0+255),f,b
  7940  003226                     u5594:
  7941  003226  0100               	movlb	0	; () banked
  7942  003228  2F90               	decfsz	??_digitalRead& (0+255),f,b
  7943  00322A  D7FA               	goto	u5595
  7944  00322C  0E01               	movlw	1
  7945  00322E  0100               	movlb	0	; () banked
  7946  003230  1791               	andwf	(??_digitalRead+1)& (0+255),f,b
  7947  003232  0100               	movlb	0	; () banked
  7948  003234  5191               	movf	(??_digitalRead+1)& (0+255),w,b
  7949  003236  0100               	movlb	0	; () banked
  7950  003238  6F8E               	movwf	?_digitalRead& (0+255),b
  7951  00323A  6B8F               	clrf	(?_digitalRead+1)& (0+255),b
  7952                           
  7953                           ; BSR set to: 0
  7954  00323C  0012               	return	
  7955  00323E                     l5406:
  7956                           
  7957                           ; BSR set to: 0
  7958  00323E  0100               	movlb	0	; () banked
  7959  003240  EE20 F002          	lfsr	2,2
  7960  003244  518E               	movf	digitalRead@pin& (0+255),w,b
  7961  003246  26D9               	addwf	fsr2l,f,c
  7962  003248  518F               	movf	(digitalRead@pin+1)& (0+255),w,b
  7963  00324A  22DA               	addwfc	fsr2h,f,c
  7964  00324C  50DF               	movf	indf2,w,c
  7965  00324E  0100               	movlb	0	; () banked
  7966  003250  6F90               	movwf	??_digitalRead& (0+255),b
  7967  003252  CF83 F091          	movff	3971,??_digitalRead+1	;volatile
  7968  003256  0100               	movlb	0	; () banked
  7969  003258  2B90               	incf	??_digitalRead& (0+255),f,b
  7970  00325A  D003               	goto	u5604
  7971  00325C                     u5605:
  7972  00325C  0100               	movlb	0	; () banked
  7973  00325E  90D8               	bcf	status,0,c
  7974  003260  3391               	rrcf	(??_digitalRead+1)& (0+255),f,b
  7975  003262                     u5604:
  7976  003262  0100               	movlb	0	; () banked
  7977  003264  2F90               	decfsz	??_digitalRead& (0+255),f,b
  7978  003266  D7FA               	goto	u5605
  7979  003268  0E01               	movlw	1
  7980  00326A  0100               	movlb	0	; () banked
  7981  00326C  1791               	andwf	(??_digitalRead+1)& (0+255),f,b
  7982  00326E  0100               	movlb	0	; () banked
  7983  003270  5191               	movf	(??_digitalRead+1)& (0+255),w,b
  7984  003272  0100               	movlb	0	; () banked
  7985  003274  6F8E               	movwf	?_digitalRead& (0+255),b
  7986  003276  6B8F               	clrf	(?_digitalRead+1)& (0+255),b
  7987                           
  7988                           ; BSR set to: 0
  7989  003278  0012               	return	
  7990  00327A                     l5412:
  7991  00327A  C08E  FFD9         	movff	digitalRead@pin,fsr2l
  7992  00327E  C08F  FFDA         	movff	digitalRead@pin+1,fsr2h
  7993  003282  CFDE F090          	movff	postinc2,??_digitalRead
  7994  003286  CFDD F091          	movff	postdec2,??_digitalRead+1
  7995                           
  7996                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7997                           ; Switch size 1, requested type "space"
  7998                           ; Number of cases is 1, Range of values is 0 to 0
  7999                           ; switch strategies available:
  8000                           ; Name         Instructions Cycles
  8001                           ; simple_byte            4     3 (average)
  8002                           ;	Chosen strategy is simple_byte
  8003  00328A  0100               	movlb	0	; () banked
  8004  00328C  5191               	movf	(??_digitalRead+1)& (0+255),w,b
  8005  00328E  0A00               	xorlw	0	; case 0
  8006  003290  A4D8               	btfss	status,2,c
  8007  003292  D00E               	goto	l279
  8008                           
  8009                           ; BSR set to: 0
  8010                           ; Switch size 1, requested type "space"
  8011                           ; Number of cases is 4, Range of values is 0 to 3
  8012                           ; switch strategies available:
  8013                           ; Name         Instructions Cycles
  8014                           ; simple_byte           13     7 (average)
  8015                           ;	Chosen strategy is simple_byte
  8016  003294  0100               	movlb	0	; () banked
  8017  003296  5190               	movf	??_digitalRead& (0+255),w,b
  8018  003298  0A00               	xorlw	0	; case 0
  8019  00329A  B4D8               	btfsc	status,2,c
  8020  00329C  D776               	goto	l5394
  8021  00329E  0A01               	xorlw	1	; case 1
  8022  0032A0  B4D8               	btfsc	status,2,c
  8023  0032A2  D791               	goto	l5398
  8024  0032A4  0A03               	xorlw	3	; case 2
  8025  0032A6  B4D8               	btfsc	status,2,c
  8026  0032A8  D7AC               	goto	l5402
  8027  0032AA  0A01               	xorlw	1	; case 3
  8028  0032AC  B4D8               	btfsc	status,2,c
  8029  0032AE  D7C7               	goto	l5406
  8030  0032B0                     l279:
  8031                           
  8032                           ; BSR set to: 0
  8033                           ;iopin.c: 50: return -1;
  8034  0032B0  0100               	movlb	0	; () banked
  8035  0032B2  698E               	setf	?_digitalRead& (0+255),b
  8036  0032B4  698F               	setf	(?_digitalRead+1)& (0+255),b
  8037                           
  8038                           ; BSR set to: 0
  8039  0032B6  0012               	return		;funcret
  8040  0032B8                     __end_of_digitalRead:
  8041                           	opt stack 0
  8042                           tblptru	equ	0xFF8
  8043                           tblptrh	equ	0xFF7
  8044                           tblptrl	equ	0xFF6
  8045                           tablat	equ	0xFF5
  8046                           prodh	equ	0xFF4
  8047                           prodl	equ	0xFF3
  8048                           postinc0	equ	0xFEE
  8049                           wreg	equ	0xFE8
  8050                           postdec1	equ	0xFE5
  8051                           fsr1l	equ	0xFE1
  8052                           indf2	equ	0xFDF
  8053                           postinc2	equ	0xFDE
  8054                           postdec2	equ	0xFDD
  8055                           fsr2h	equ	0xFDA
  8056                           fsr2l	equ	0xFD9
  8057                           status	equ	0xFD8
  8058                           
  8059 ;; *************** function _analogRead *****************
  8060 ;; Defined at:
  8061 ;;		line 90 in file "iopin.c"
  8062 ;; Parameters:    Size  Location     Type
  8063 ;;  channel         2   14[BANK0 ] int 
  8064 ;; Auto vars:     Size  Location     Type
  8065 ;;		None
  8066 ;; Return value:  Size  Location     Type
  8067 ;;                  4   14[BANK0 ] long 
  8068 ;; Registers used:
  8069 ;;		wreg, status,2, status,0
  8070 ;; Tracked objects:
  8071 ;;		On entry : 0/0
  8072 ;;		On exit  : 0/0
  8073 ;;		Unchanged: 0/0
  8074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8075 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8077 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8078 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8079 ;;Total ram usage:        6 bytes
  8080 ;; Hardware stack levels used:    1
  8081 ;; Hardware stack levels required when called:    6
  8082 ;; This function calls:
  8083 ;;		Nothing
  8084 ;; This function is called by:
  8085 ;;		_sortBattery
  8086 ;; This function uses a non-reentrant model
  8087 ;;
  8088                           
  8089                           	psect	text23
  8090  0049A8                     __ptext23:
  8091                           	opt stack 0
  8092  0049A8                     _analogRead:
  8093                           	opt stack 23
  8094                           
  8095                           ;iopin.c: 91: ADCON0 = channel<<2;
  8096                           
  8097                           ; BSR set to: 0
  8098                           ;incstack = 0
  8099  0049A8  0100               	movlb	0	; () banked
  8100  0049AA  458E               	rlncf	analogRead@channel& (0+255),w,b
  8101  0049AC  46E8               	rlncf	wreg,f,c
  8102  0049AE  0BFC               	andlw	252
  8103  0049B0  6EC2               	movwf	4034,c	;volatile
  8104                           
  8105                           ; BSR set to: 0
  8106                           ;iopin.c: 92: ADCON0 |= 1<<0;
  8107  0049B2  80C2               	bsf	4034,0,c	;volatile
  8108                           
  8109                           ; BSR set to: 0
  8110                           ;iopin.c: 93: ADCON0 |= 1<<1;
  8111  0049B4  82C2               	bsf	4034,1,c	;volatile
  8112  0049B6                     l304:
  8113  0049B6  B2C2               	btfsc	4034,1,c	;volatile
  8114  0049B8  D7FE               	goto	l304
  8115                           
  8116                           ;iopin.c: 97: return (ADRESH<<8) + ADRESL;
  8117  0049BA  50C3               	movf	4035,w,c	;volatile
  8118  0049BC  CFC4 F092          	movff	4036,??_analogRead	;volatile
  8119  0049C0  0100               	movlb	0	; () banked
  8120  0049C2  6B93               	clrf	(??_analogRead+1)& (0+255),b
  8121  0049C4  C092  F093         	movff	??_analogRead,??_analogRead+1
  8122  0049C8  0100               	movlb	0	; () banked
  8123  0049CA  6B92               	clrf	??_analogRead& (0+255),b
  8124  0049CC  0100               	movlb	0	; () banked
  8125  0049CE  2792               	addwf	??_analogRead& (0+255),f,b
  8126  0049D0  0E00               	movlw	0
  8127  0049D2  2393               	addwfc	(??_analogRead+1)& (0+255),f,b
  8128  0049D4  C092  F08E         	movff	??_analogRead,?_analogRead
  8129  0049D8  C093  F08F         	movff	??_analogRead+1,?_analogRead+1
  8130  0049DC  0100               	movlb	0	; () banked
  8131  0049DE  0E00               	movlw	0
  8132  0049E0  BF8F               	btfsc	(?_analogRead+1)& (0+255),7,b
  8133  0049E2  0EFF               	movlw	-1
  8134  0049E4  6F90               	movwf	(?_analogRead+2)& (0+255),b
  8135  0049E6  6F91               	movwf	(?_analogRead+3)& (0+255),b
  8136  0049E8  0012               	return	
  8137  0049EA                     __end_of_analogRead:
  8138                           	opt stack 0
  8139                           tblptru	equ	0xFF8
  8140                           tblptrh	equ	0xFF7
  8141                           tblptrl	equ	0xFF6
  8142                           tablat	equ	0xFF5
  8143                           prodh	equ	0xFF4
  8144                           prodl	equ	0xFF3
  8145                           postinc0	equ	0xFEE
  8146                           wreg	equ	0xFE8
  8147                           postdec1	equ	0xFE5
  8148                           fsr1l	equ	0xFE1
  8149                           indf2	equ	0xFDF
  8150                           postinc2	equ	0xFDE
  8151                           postdec2	equ	0xFDD
  8152                           fsr2h	equ	0xFDA
  8153                           fsr2l	equ	0xFD9
  8154                           status	equ	0xFD8
  8155                           
  8156 ;; *************** function _pinSetup *****************
  8157 ;; Defined at:
  8158 ;;		line 194 in file "main.c"
  8159 ;; Parameters:    Size  Location     Type
  8160 ;;		None
  8161 ;; Auto vars:     Size  Location     Type
  8162 ;;		None
  8163 ;; Return value:  Size  Location     Type
  8164 ;;                  1    wreg      void 
  8165 ;; Registers used:
  8166 ;;		wreg, status,2, status,0
  8167 ;; Tracked objects:
  8168 ;;		On entry : 0/0
  8169 ;;		On exit  : 0/0
  8170 ;;		Unchanged: 0/0
  8171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8176 ;;Total ram usage:        0 bytes
  8177 ;; Hardware stack levels used:    1
  8178 ;; Hardware stack levels required when called:    6
  8179 ;; This function calls:
  8180 ;;		Nothing
  8181 ;; This function is called by:
  8182 ;;		_main
  8183 ;; This function uses a non-reentrant model
  8184 ;;
  8185                           
  8186                           	psect	text24
  8187  004A2A                     __ptext24:
  8188                           	opt stack 0
  8189  004A2A                     _pinSetup:
  8190                           	opt stack 24
  8191                           
  8192                           ;main.c: 200: TRISA = 0xFF;
  8193                           
  8194                           ; BSR set to: 0
  8195                           ;incstack = 0
  8196  004A2A  6892               	setf	3986,c	;volatile
  8197                           
  8198                           ;main.c: 201: TRISB = 0xFF;
  8199  004A2C  6893               	setf	3987,c	;volatile
  8200                           
  8201                           ;main.c: 202: TRISC = 0b11000000;
  8202  004A2E  0EC0               	movlw	192
  8203  004A30  6E94               	movwf	3988,c	;volatile
  8204                           
  8205                           ;main.c: 203: TRISD = 0x00;
  8206  004A32  0E00               	movlw	0
  8207  004A34  6E95               	movwf	3989,c	;volatile
  8208                           
  8209                           ;main.c: 204: TRISE = 0x00;
  8210  004A36  0E00               	movlw	0
  8211  004A38  6E96               	movwf	3990,c	;volatile
  8212                           
  8213                           ;main.c: 206: LATA = 0x00;
  8214  004A3A  0E00               	movlw	0
  8215  004A3C  6E89               	movwf	3977,c	;volatile
  8216                           
  8217                           ;main.c: 207: LATB = 0x00;
  8218  004A3E  0E00               	movlw	0
  8219  004A40  6E8A               	movwf	3978,c	;volatile
  8220                           
  8221                           ;main.c: 208: LATC = 0x00;
  8222  004A42  0E00               	movlw	0
  8223  004A44  6E8B               	movwf	3979,c	;volatile
  8224                           
  8225                           ;main.c: 209: LATD = 0x00;
  8226  004A46  0E00               	movlw	0
  8227  004A48  6E8C               	movwf	3980,c	;volatile
  8228                           
  8229                           ;main.c: 210: LATE = 0x00;
  8230  004A4A  0E00               	movlw	0
  8231  004A4C  6E8D               	movwf	3981,c	;volatile
  8232                           
  8233                           ;main.c: 212: ADCON0 = 0x00;
  8234  004A4E  0E00               	movlw	0
  8235  004A50  6EC2               	movwf	4034,c	;volatile
  8236                           
  8237                           ;main.c: 214: ADCON1 |= 0x0B;
  8238  004A52  0E0B               	movlw	11
  8239  004A54  12C1               	iorwf	4033,f,c	;volatile
  8240                           
  8241                           ;main.c: 219: ADCON2 = 0;
  8242  004A56  0E00               	movlw	0
  8243  004A58  6EC0               	movwf	4032,c	;volatile
  8244                           
  8245                           ;main.c: 220: ADCON2 |= 0b010;
  8246  004A5A  82C0               	bsf	4032,1,c	;volatile
  8247                           
  8248                           ;main.c: 221: ADCON2 |= 0b110<<3;
  8249  004A5C  0E30               	movlw	48
  8250  004A5E  12C0               	iorwf	4032,f,c	;volatile
  8251                           
  8252                           ;main.c: 222: ADCON2 |= 1<<7;
  8253  004A60  8EC0               	bsf	4032,7,c	;volatile
  8254                           
  8255                           ;main.c: 226: INT0IE = 1;
  8256  004A62  88F2               	bsf	intcon,4,c	;volatile
  8257                           
  8258                           ;main.c: 227: (INTCONbits.GIE = 1);
  8259  004A64  8EF2               	bsf	intcon,7,c	;volatile
  8260  004A66  0012               	return		;funcret
  8261  004A68                     __end_of_pinSetup:
  8262                           	opt stack 0
  8263                           tblptru	equ	0xFF8
  8264                           tblptrh	equ	0xFF7
  8265                           tblptrl	equ	0xFF6
  8266                           tablat	equ	0xFF5
  8267                           prodh	equ	0xFF4
  8268                           prodl	equ	0xFF3
  8269                           intcon	equ	0xFF2
  8270                           postinc0	equ	0xFEE
  8271                           wreg	equ	0xFE8
  8272                           postdec1	equ	0xFE5
  8273                           fsr1l	equ	0xFE1
  8274                           indf2	equ	0xFDF
  8275                           postinc2	equ	0xFDE
  8276                           postdec2	equ	0xFDD
  8277                           fsr2h	equ	0xFDA
  8278                           fsr2l	equ	0xFD9
  8279                           status	equ	0xFD8
  8280                           
  8281 ;; *************** function _initServo *****************
  8282 ;; Defined at:
  8283 ;;		line 21 in file "servo.c"
  8284 ;; Parameters:    Size  Location     Type
  8285 ;;  motor           2   27[BANK1 ] PTR int 
  8286 ;;		 -> redirectingServo(6), padServo(6), conveyorServo(6), 
  8287 ;;  angle           2   29[BANK1 ] int 
  8288 ;; Auto vars:     Size  Location     Type
  8289 ;;		None
  8290 ;; Return value:  Size  Location     Type
  8291 ;;                  1    wreg      void 
  8292 ;; Registers used:
  8293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8294 ;; Tracked objects:
  8295 ;;		On entry : 0/0
  8296 ;;		On exit  : 0/0
  8297 ;;		Unchanged: 0/0
  8298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8299 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8301 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8302 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8303 ;;Total ram usage:        8 bytes
  8304 ;; Hardware stack levels used:    1
  8305 ;; Hardware stack levels required when called:   10
  8306 ;; This function calls:
  8307 ;;		_initTimer
  8308 ;;		_setAngle
  8309 ;;		_startTimer
  8310 ;; This function is called by:
  8311 ;;		_main
  8312 ;; This function uses a non-reentrant model
  8313 ;;
  8314                           
  8315                           	psect	text25
  8316  0042DE                     __ptext25:
  8317                           	opt stack 0
  8318  0042DE                     _initServo:
  8319                           	opt stack 20
  8320                           
  8321                           ;servo.c: 22: n++;
  8322                           
  8323                           ;incstack = 0
  8324  0042DE  0101               	movlb	1	; () banked
  8325  0042E0  4B77               	infsnz	_n& (0+255),f,b
  8326  0042E2  2B78               	incf	(_n+1)& (0+255),f,b
  8327                           
  8328                           ; BSR set to: 1
  8329                           ;servo.c: 23: servos[n-1] = motor;
  8330  0042E4  0EFE               	movlw	254
  8331  0042E6  0101               	movlb	1	; () banked
  8332  0042E8  6F1F               	movwf	??_initServo& (0+255),b
  8333  0042EA  0EFF               	movlw	255
  8334  0042EC  0101               	movlb	1	; () banked
  8335  0042EE  6F20               	movwf	(??_initServo+1)& (0+255),b
  8336  0042F0  C177  F121         	movff	_n,??_initServo+2
  8337  0042F4  C178  F122         	movff	_n+1,??_initServo+3
  8338  0042F8  90D8               	bcf	status,0,c
  8339  0042FA  0101               	movlb	1	; () banked
  8340  0042FC  3721               	rlcf	(??_initServo+2)& (0+255),f,b
  8341  0042FE  3722               	rlcf	(??_initServo+3)& (0+255),f,b
  8342  004300  0101               	movlb	1	; () banked
  8343  004302  511F               	movf	??_initServo& (0+255),w,b
  8344  004304  0101               	movlb	1	; () banked
  8345  004306  2721               	addwf	(??_initServo+2)& (0+255),f,b
  8346  004308  0101               	movlb	1	; () banked
  8347  00430A  5120               	movf	(??_initServo+1)& (0+255),w,b
  8348  00430C  0101               	movlb	1	; () banked
  8349  00430E  2322               	addwfc	(??_initServo+3)& (0+255),f,b
  8350  004310  0E60               	movlw	low _servos
  8351  004312  0101               	movlb	1	; () banked
  8352  004314  2521               	addwf	(??_initServo+2)& (0+255),w,b
  8353  004316  6ED9               	movwf	fsr2l,c
  8354  004318  0E01               	movlw	high _servos
  8355  00431A  0101               	movlb	1	; () banked
  8356  00431C  2122               	addwfc	(??_initServo+3)& (0+255),w,b
  8357  00431E  6EDA               	movwf	fsr2h,c
  8358  004320  C11B  FFDE         	movff	initServo@motor,postinc2
  8359  004324  C11C  FFDD         	movff	initServo@motor+1,postdec2
  8360                           
  8361                           ; BSR set to: 1
  8362                           ;servo.c: 24: setAngle(motor, angle);
  8363  004328  C11B  F113         	movff	initServo@motor,setAngle@motor
  8364  00432C  C11C  F114         	movff	initServo@motor+1,setAngle@motor+1
  8365  004330  C11D  F115         	movff	initServo@angle,setAngle@angle
  8366  004334  C11E  F116         	movff	initServo@angle+1,setAngle@angle+1
  8367  004338  EC50  F01D         	call	_setAngle	;wreg free
  8368                           
  8369                           ;servo.c: 26: initTimer(0);
  8370  00433C  0E00               	movlw	0
  8371  00433E  0100               	movlb	0	; () banked
  8372  004340  6F8F               	movwf	(initTimer@timer+1)& (0+255),b
  8373  004342  0E00               	movlw	0
  8374  004344  6F8E               	movwf	initTimer@timer& (0+255),b
  8375  004346  EC68  F024         	call	_initTimer	;wreg free
  8376                           
  8377                           ;servo.c: 27: startTimer(0,0);
  8378  00434A  0E00               	movlw	0
  8379  00434C  0100               	movlb	0	; () banked
  8380  00434E  6F8F               	movwf	(startTimer@timer+1)& (0+255),b
  8381  004350  0E00               	movlw	0
  8382  004352  6F8E               	movwf	startTimer@timer& (0+255),b
  8383  004354  0E00               	movlw	0
  8384  004356  0100               	movlb	0	; () banked
  8385  004358  6F90               	movwf	startTimer@val& (0+255),b
  8386  00435A  0E00               	movlw	0
  8387  00435C  6F91               	movwf	(startTimer@val+1)& (0+255),b
  8388  00435E  0E00               	movlw	0
  8389  004360  6F92               	movwf	(startTimer@val+2)& (0+255),b
  8390  004362  0E00               	movlw	0
  8391  004364  6F93               	movwf	(startTimer@val+3)& (0+255),b
  8392  004366  ECF4  F023         	call	_startTimer	;wreg free
  8393  00436A  0012               	return		;funcret
  8394  00436C                     __end_of_initServo:
  8395                           	opt stack 0
  8396                           tblptru	equ	0xFF8
  8397                           tblptrh	equ	0xFF7
  8398                           tblptrl	equ	0xFF6
  8399                           tablat	equ	0xFF5
  8400                           prodh	equ	0xFF4
  8401                           prodl	equ	0xFF3
  8402                           intcon	equ	0xFF2
  8403                           postinc0	equ	0xFEE
  8404                           wreg	equ	0xFE8
  8405                           postdec1	equ	0xFE5
  8406                           fsr1l	equ	0xFE1
  8407                           indf2	equ	0xFDF
  8408                           postinc2	equ	0xFDE
  8409                           postdec2	equ	0xFDD
  8410                           fsr2h	equ	0xFDA
  8411                           fsr2l	equ	0xFD9
  8412                           status	equ	0xFD8
  8413                           
  8414 ;; *************** function _startTimer *****************
  8415 ;; Defined at:
  8416 ;;		line 75 in file "timer.c"
  8417 ;; Parameters:    Size  Location     Type
  8418 ;;  timer           2   14[BANK0 ] int 
  8419 ;;  val             4   16[BANK0 ] long 
  8420 ;; Auto vars:     Size  Location     Type
  8421 ;;		None
  8422 ;; Return value:  Size  Location     Type
  8423 ;;                  1    wreg      void 
  8424 ;; Registers used:
  8425 ;;		wreg, status,2, status,0
  8426 ;; Tracked objects:
  8427 ;;		On entry : 0/0
  8428 ;;		On exit  : 0/0
  8429 ;;		Unchanged: 0/0
  8430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8431 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8433 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8434 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8435 ;;Total ram usage:        8 bytes
  8436 ;; Hardware stack levels used:    1
  8437 ;; Hardware stack levels required when called:    6
  8438 ;; This function calls:
  8439 ;;		Nothing
  8440 ;; This function is called by:
  8441 ;;		_initServo
  8442 ;;		_testFrequency
  8443 ;; This function uses a non-reentrant model
  8444 ;;
  8445                           
  8446                           	psect	text26
  8447  0047E8                     __ptext26:
  8448                           	opt stack 0
  8449  0047E8                     _startTimer:
  8450                           	opt stack 23
  8451                           
  8452                           ;timer.c: 76: switch(timer){
  8453                           
  8454                           ;incstack = 0
  8455  0047E8  D012               	goto	l5460
  8456  0047EA                     l385:
  8457                           
  8458                           ; BSR set to: 0
  8459                           ;timer.c: 78: TMR0H = val>>8;
  8460  0047EA  C091  FFD7         	movff	startTimer@val+1,4055	;volatile
  8461                           
  8462                           ;timer.c: 79: TMR0L = val;
  8463  0047EE  C090  FFD6         	movff	startTimer@val,4054	;volatile
  8464                           
  8465                           ; BSR set to: 0
  8466                           ;timer.c: 80: T0CON |= 1<<7;
  8467  0047F2  8ED5               	bsf	4053,7,c	;volatile
  8468                           
  8469                           ;timer.c: 81: break;
  8470  0047F4  0012               	return	
  8471  0047F6                     l387:
  8472                           
  8473                           ; BSR set to: 0
  8474                           ;timer.c: 83: TMR1H = val>>8;
  8475  0047F6  C091  FFCF         	movff	startTimer@val+1,4047	;volatile
  8476                           
  8477                           ;timer.c: 84: TMR1L = val;
  8478  0047FA  C090  FFCE         	movff	startTimer@val,4046	;volatile
  8479                           
  8480                           ; BSR set to: 0
  8481                           ;timer.c: 85: T1CON |= 1<<0;
  8482  0047FE  80CD               	bsf	4045,0,c	;volatile
  8483                           
  8484                           ;timer.c: 86: break;
  8485  004800  0012               	return	
  8486  004802                     l388:
  8487                           
  8488                           ; BSR set to: 0
  8489                           ;timer.c: 88: TMR3H = val>>8;
  8490  004802  C091  FFB3         	movff	startTimer@val+1,4019	;volatile
  8491                           
  8492                           ;timer.c: 89: TMR3L = val;
  8493  004806  C090  FFB2         	movff	startTimer@val,4018	;volatile
  8494                           
  8495                           ; BSR set to: 0
  8496                           ;timer.c: 90: T3CON |= 1<<0;
  8497  00480A  80B1               	bsf	4017,0,c	;volatile
  8498                           
  8499                           ;timer.c: 91: }
  8500  00480C  0012               	return	
  8501  00480E                     l5460:
  8502  00480E  C08E  F094         	movff	startTimer@timer,??_startTimer
  8503  004812  C08F  F095         	movff	startTimer@timer+1,??_startTimer+1
  8504                           
  8505                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8506                           ; Switch size 1, requested type "space"
  8507                           ; Number of cases is 1, Range of values is 0 to 0
  8508                           ; switch strategies available:
  8509                           ; Name         Instructions Cycles
  8510                           ; simple_byte            4     3 (average)
  8511                           ;	Chosen strategy is simple_byte
  8512  004816  0100               	movlb	0	; () banked
  8513  004818  5195               	movf	(??_startTimer+1)& (0+255),w,b
  8514  00481A  0A00               	xorlw	0	; case 0
  8515  00481C  A4D8               	btfss	status,2,c
  8516  00481E  0012               	return	
  8517                           
  8518                           ; BSR set to: 0
  8519                           ; Switch size 1, requested type "space"
  8520                           ; Number of cases is 3, Range of values is 0 to 3
  8521                           ; switch strategies available:
  8522                           ; Name         Instructions Cycles
  8523                           ; simple_byte           10     6 (average)
  8524                           ;	Chosen strategy is simple_byte
  8525  004820  0100               	movlb	0	; () banked
  8526  004822  5194               	movf	??_startTimer& (0+255),w,b
  8527  004824  0A00               	xorlw	0	; case 0
  8528  004826  B4D8               	btfsc	status,2,c
  8529  004828  D7E0               	goto	l385
  8530  00482A  0A01               	xorlw	1	; case 1
  8531  00482C  B4D8               	btfsc	status,2,c
  8532  00482E  D7E3               	goto	l387
  8533  004830  0A02               	xorlw	2	; case 3
  8534  004832  A4D8               	btfss	status,2,c
  8535  004834  0012               	return	
  8536  004836  D7E5               	goto	l388
  8537  004838                     __end_of_startTimer:
  8538                           	opt stack 0
  8539                           tblptru	equ	0xFF8
  8540                           tblptrh	equ	0xFF7
  8541                           tblptrl	equ	0xFF6
  8542                           tablat	equ	0xFF5
  8543                           prodh	equ	0xFF4
  8544                           prodl	equ	0xFF3
  8545                           intcon	equ	0xFF2
  8546                           postinc0	equ	0xFEE
  8547                           wreg	equ	0xFE8
  8548                           postdec1	equ	0xFE5
  8549                           fsr1l	equ	0xFE1
  8550                           indf2	equ	0xFDF
  8551                           postinc2	equ	0xFDE
  8552                           postdec2	equ	0xFDD
  8553                           fsr2h	equ	0xFDA
  8554                           fsr2l	equ	0xFD9
  8555                           status	equ	0xFD8
  8556                           
  8557 ;; *************** function _setAngle *****************
  8558 ;; Defined at:
  8559 ;;		line 41 in file "servo.c"
  8560 ;; Parameters:    Size  Location     Type
  8561 ;;  motor           2   19[BANK1 ] PTR int 
  8562 ;;		 -> redirectingServo(6), padServo(6), conveyorServo(6), 
  8563 ;;  angle           2   21[BANK1 ] int 
  8564 ;; Auto vars:     Size  Location     Type
  8565 ;;  i               2   25[BANK1 ] int 
  8566 ;;  period          2   23[BANK1 ] unsigned int 
  8567 ;; Return value:  Size  Location     Type
  8568 ;;                  1    wreg      void 
  8569 ;; Registers used:
  8570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8571 ;; Tracked objects:
  8572 ;;		On entry : 0/0
  8573 ;;		On exit  : 0/0
  8574 ;;		Unchanged: 0/0
  8575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8576 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8577 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8578 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8579 ;;      Totals:         0       2       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8580 ;;Total ram usage:       10 bytes
  8581 ;; Hardware stack levels used:    1
  8582 ;; Hardware stack levels required when called:    9
  8583 ;; This function calls:
  8584 ;;		_angleToPulse
  8585 ;; This function is called by:
  8586 ;;		_sortBattery
  8587 ;;		_initServo
  8588 ;; This function uses a non-reentrant model
  8589 ;;
  8590                           
  8591                           	psect	text27
  8592  003AA0                     __ptext27:
  8593                           	opt stack 0
  8594  003AA0                     _setAngle:
  8595                           	opt stack 20
  8596                           
  8597                           ;servo.c: 42: unsigned int period = 50000;
  8598                           
  8599                           ; BSR set to: 0
  8600                           ;incstack = 0
  8601  003AA0  0EC3               	movlw	195
  8602  003AA2  0101               	movlb	1	; () banked
  8603  003AA4  6F18               	movwf	(setAngle@period+1)& (0+255),b
  8604  003AA6  0E50               	movlw	80
  8605  003AA8  6F17               	movwf	setAngle@period& (0+255),b
  8606                           
  8607                           ;servo.c: 43: for(int i = 0; i < n; i++){
  8608  003AAA  0E00               	movlw	0
  8609  003AAC  0101               	movlb	1	; () banked
  8610  003AAE  6F1A               	movwf	(setAngle@i+1)& (0+255),b
  8611  003AB0  0E00               	movlw	0
  8612  003AB2  6F19               	movwf	setAngle@i& (0+255),b
  8613  003AB4  D03F               	goto	l6744
  8614  003AB6                     l6736:
  8615                           
  8616                           ;servo.c: 44: if(servos[i] == motor){
  8617  003AB6  90D8               	bcf	status,0,c
  8618  003AB8  0101               	movlb	1	; () banked
  8619  003ABA  3519               	rlcf	setAngle@i& (0+255),w,b
  8620  003ABC  6ED9               	movwf	fsr2l,c
  8621  003ABE  0101               	movlb	1	; () banked
  8622  003AC0  351A               	rlcf	(setAngle@i+1)& (0+255),w,b
  8623  003AC2  6EDA               	movwf	fsr2h,c
  8624  003AC4  0E60               	movlw	low _servos
  8625  003AC6  26D9               	addwf	fsr2l,f,c
  8626  003AC8  0E01               	movlw	high _servos
  8627  003ACA  22DA               	addwfc	fsr2h,f,c
  8628  003ACC  0101               	movlb	1	; () banked
  8629  003ACE  5113               	movf	setAngle@motor& (0+255),w,b
  8630  003AD0  18DE               	xorwf	postinc2,w,c
  8631  003AD2  E11C               	bnz	l6740
  8632  003AD4  0101               	movlb	1	; () banked
  8633  003AD6  5114               	movf	(setAngle@motor+1)& (0+255),w,b
  8634  003AD8  18DE               	xorwf	postinc2,w,c
  8635  003ADA  A4D8               	btfss	status,2,c
  8636  003ADC  D017               	goto	l6740
  8637                           
  8638                           ; BSR set to: 1
  8639                           ;servo.c: 45: pulse[i] = angleToPulse(angle);
  8640  003ADE  C115  F0E3         	movff	setAngle@angle,angleToPulse@angle
  8641  003AE2  C116  F0E4         	movff	setAngle@angle+1,angleToPulse@angle+1
  8642  003AE6  ECE1  F014         	call	_angleToPulse	;wreg free
  8643  003AEA  90D8               	bcf	status,0,c
  8644  003AEC  0101               	movlb	1	; () banked
  8645  003AEE  3519               	rlcf	setAngle@i& (0+255),w,b
  8646  003AF0  6ED9               	movwf	fsr2l,c
  8647  003AF2  0101               	movlb	1	; () banked
  8648  003AF4  351A               	rlcf	(setAngle@i+1)& (0+255),w,b
  8649  003AF6  6EDA               	movwf	fsr2h,c
  8650  003AF8  0EEA               	movlw	low _pulse
  8651  003AFA  26D9               	addwf	fsr2l,f,c
  8652  003AFC  0E00               	movlw	high _pulse
  8653  003AFE  22DA               	addwfc	fsr2h,f,c
  8654  003B00  0100               	movlb	0	; () banked
  8655  003B02  C0E3  FFDE         	movff	?_angleToPulse,postinc2
  8656  003B06  0100               	movlb	0	; () banked
  8657  003B08  C0E4  FFDD         	movff	?_angleToPulse+1,postdec2
  8658  003B0C                     l6740:
  8659                           
  8660                           ;servo.c: 46: }
  8661                           ;servo.c: 47: period-=pulse[i];
  8662  003B0C  90D8               	bcf	status,0,c
  8663  003B0E  0101               	movlb	1	; () banked
  8664  003B10  3519               	rlcf	setAngle@i& (0+255),w,b
  8665  003B12  6ED9               	movwf	fsr2l,c
  8666  003B14  0101               	movlb	1	; () banked
  8667  003B16  351A               	rlcf	(setAngle@i+1)& (0+255),w,b
  8668  003B18  6EDA               	movwf	fsr2h,c
  8669  003B1A  0EEA               	movlw	low _pulse
  8670  003B1C  26D9               	addwf	fsr2l,f,c
  8671  003B1E  0E00               	movlw	high _pulse
  8672  003B20  22DA               	addwfc	fsr2h,f,c
  8673  003B22  50DE               	movf	postinc2,w,c
  8674  003B24  0101               	movlb	1	; () banked
  8675  003B26  5F17               	subwf	setAngle@period& (0+255),f,b
  8676  003B28  50DD               	movf	postdec2,w,c
  8677  003B2A  0101               	movlb	1	; () banked
  8678  003B2C  5B18               	subwfb	(setAngle@period+1)& (0+255),f,b
  8679                           
  8680                           ; BSR set to: 1
  8681  003B2E  0101               	movlb	1	; () banked
  8682  003B30  4B19               	infsnz	setAngle@i& (0+255),f,b
  8683  003B32  2B1A               	incf	(setAngle@i+1)& (0+255),f,b
  8684  003B34                     l6744:
  8685                           
  8686                           ; BSR set to: 1
  8687  003B34  0101               	movlb	1	; () banked
  8688  003B36  5177               	movf	_n& (0+255),w,b
  8689  003B38  0101               	movlb	1	; () banked
  8690  003B3A  5D19               	subwf	setAngle@i& (0+255),w,b
  8691  003B3C  0101               	movlb	1	; () banked
  8692  003B3E  511A               	movf	(setAngle@i+1)& (0+255),w,b
  8693  003B40  0A80               	xorlw	128
  8694  003B42  0100               	movlb	0	; () banked
  8695  003B44  6FE7               	movwf	??_setAngle& (0+255),b
  8696  003B46  0101               	movlb	1	; () banked
  8697  003B48  5178               	movf	(_n+1)& (0+255),w,b
  8698  003B4A  0A80               	xorlw	128
  8699  003B4C  0100               	movlb	0	; () banked
  8700  003B4E  59E7               	subwfb	??_setAngle& (0+255),w,b
  8701  003B50  A0D8               	btfss	status,0,c
  8702  003B52  D7B1               	goto	l6736
  8703                           
  8704                           ; BSR set to: 0
  8705                           ;servo.c: 48: }
  8706                           ;servo.c: 49: pulse[n] = period;
  8707                           
  8708                           ; BSR set to: 0
  8709  003B54  90D8               	bcf	status,0,c
  8710  003B56  0101               	movlb	1	; () banked
  8711  003B58  3577               	rlcf	_n& (0+255),w,b
  8712  003B5A  6ED9               	movwf	fsr2l,c
  8713  003B5C  0101               	movlb	1	; () banked
  8714  003B5E  3578               	rlcf	(_n+1)& (0+255),w,b
  8715  003B60  6EDA               	movwf	fsr2h,c
  8716  003B62  0EEA               	movlw	low _pulse
  8717  003B64  26D9               	addwf	fsr2l,f,c
  8718  003B66  0E00               	movlw	high _pulse
  8719  003B68  22DA               	addwfc	fsr2h,f,c
  8720  003B6A  C117  FFDE         	movff	setAngle@period,postinc2
  8721  003B6E  C118  FFDD         	movff	setAngle@period+1,postdec2
  8722                           
  8723                           ; BSR set to: 1
  8724  003B72  0012               	return		;funcret
  8725  003B74                     __end_of_setAngle:
  8726                           	opt stack 0
  8727                           tblptru	equ	0xFF8
  8728                           tblptrh	equ	0xFF7
  8729                           tblptrl	equ	0xFF6
  8730                           tablat	equ	0xFF5
  8731                           prodh	equ	0xFF4
  8732                           prodl	equ	0xFF3
  8733                           intcon	equ	0xFF2
  8734                           postinc0	equ	0xFEE
  8735                           wreg	equ	0xFE8
  8736                           postdec1	equ	0xFE5
  8737                           fsr1l	equ	0xFE1
  8738                           indf2	equ	0xFDF
  8739                           postinc2	equ	0xFDE
  8740                           postdec2	equ	0xFDD
  8741                           fsr2h	equ	0xFDA
  8742                           fsr2l	equ	0xFD9
  8743                           status	equ	0xFD8
  8744                           
  8745 ;; *************** function _angleToPulse *****************
  8746 ;; Defined at:
  8747 ;;		line 33 in file "servo.c"
  8748 ;; Parameters:    Size  Location     Type
  8749 ;;  angle           2   99[BANK0 ] int 
  8750 ;; Auto vars:     Size  Location     Type
  8751 ;;  a000            4   15[BANK1 ] long 
  8752 ;;  a180            4    8[BANK1 ] long 
  8753 ;;  offset          4    4[BANK1 ] long 
  8754 ;; Return value:  Size  Location     Type
  8755 ;;                  4   99[BANK0 ] long 
  8756 ;; Registers used:
  8757 ;;		wreg, status,2, status,0, cstack
  8758 ;; Tracked objects:
  8759 ;;		On entry : 0/0
  8760 ;;		On exit  : 0/0
  8761 ;;		Unchanged: 0/0
  8762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8763 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8764 ;;      Locals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8765 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8766 ;;      Totals:         0       4      19       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8767 ;;Total ram usage:       23 bytes
  8768 ;; Hardware stack levels used:    1
  8769 ;; Hardware stack levels required when called:    8
  8770 ;; This function calls:
  8771 ;;		___altoft
  8772 ;;		___awtoft
  8773 ;;		___ftadd
  8774 ;;		___ftdiv
  8775 ;;		___ftmul
  8776 ;;		___fttol
  8777 ;; This function is called by:
  8778 ;;		_setAngle
  8779 ;; This function uses a non-reentrant model
  8780 ;;
  8781                           
  8782                           	psect	text28
  8783  0029C2                     __ptext28:
  8784                           	opt stack 0
  8785  0029C2                     _angleToPulse:
  8786                           	opt stack 20
  8787                           
  8788                           ;servo.c: 34: long offset = -600;
  8789                           
  8790                           ; BSR set to: 1
  8791                           ;incstack = 0
  8792  0029C2  0EA8               	movlw	168
  8793  0029C4  0101               	movlb	1	; () banked
  8794  0029C6  6F04               	movwf	angleToPulse@offset& (0+255),b
  8795  0029C8  0EFD               	movlw	253
  8796  0029CA  6F05               	movwf	(angleToPulse@offset+1)& (0+255),b
  8797  0029CC  0EFF               	movlw	255
  8798  0029CE  6F06               	movwf	(angleToPulse@offset+2)& (0+255),b
  8799  0029D0  0EFF               	movlw	255
  8800  0029D2  6F07               	movwf	(angleToPulse@offset+3)& (0+255),b
  8801                           
  8802                           ;servo.c: 35: long a000 = 1250;
  8803  0029D4  0EE2               	movlw	226
  8804  0029D6  0101               	movlb	1	; () banked
  8805  0029D8  6F0F               	movwf	angleToPulse@a000& (0+255),b
  8806  0029DA  0E04               	movlw	4
  8807  0029DC  6F10               	movwf	(angleToPulse@a000+1)& (0+255),b
  8808  0029DE  0E00               	movlw	0
  8809  0029E0  6F11               	movwf	(angleToPulse@a000+2)& (0+255),b
  8810  0029E2  0E00               	movlw	0
  8811  0029E4  6F12               	movwf	(angleToPulse@a000+3)& (0+255),b
  8812                           
  8813                           ;servo.c: 36: long a180 = 6250;
  8814  0029E6  0E6A               	movlw	106
  8815  0029E8  0101               	movlb	1	; () banked
  8816  0029EA  6F08               	movwf	angleToPulse@a180& (0+255),b
  8817  0029EC  0E18               	movlw	24
  8818  0029EE  6F09               	movwf	(angleToPulse@a180+1)& (0+255),b
  8819  0029F0  0E00               	movlw	0
  8820  0029F2  6F0A               	movwf	(angleToPulse@a180+2)& (0+255),b
  8821  0029F4  0E00               	movlw	0
  8822  0029F6  6F0B               	movwf	(angleToPulse@a180+3)& (0+255),b
  8823                           
  8824                           ; BSR set to: 1
  8825                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
  8826  0029F8  C10F  F100         	movff	angleToPulse@a000,??_angleToPulse
  8827  0029FC  C110  F101         	movff	angleToPulse@a000+1,??_angleToPulse+1
  8828  002A00  C111  F102         	movff	angleToPulse@a000+2,??_angleToPulse+2
  8829  002A04  C112  F103         	movff	angleToPulse@a000+3,??_angleToPulse+3
  8830  002A08  0101               	movlb	1	; () banked
  8831  002A0A  1F00               	comf	??_angleToPulse& (0+255),f,b
  8832  002A0C  1F01               	comf	(??_angleToPulse+1)& (0+255),f,b
  8833  002A0E  1F02               	comf	(??_angleToPulse+2)& (0+255),f,b
  8834  002A10  1F03               	comf	(??_angleToPulse+3)& (0+255),f,b
  8835  002A12  2B00               	incf	??_angleToPulse& (0+255),f,b
  8836  002A14  0E00               	movlw	0
  8837  002A16  2301               	addwfc	(??_angleToPulse+1)& (0+255),f,b
  8838  002A18  2302               	addwfc	(??_angleToPulse+2)& (0+255),f,b
  8839  002A1A  2303               	addwfc	(??_angleToPulse+3)& (0+255),f,b
  8840  002A1C  0101               	movlb	1	; () banked
  8841  002A1E  5108               	movf	angleToPulse@a180& (0+255),w,b
  8842  002A20  0101               	movlb	1	; () banked
  8843  002A22  2500               	addwf	??_angleToPulse& (0+255),w,b
  8844  002A24  0100               	movlb	0	; () banked
  8845  002A26  6F96               	movwf	___altoft@c& (0+255),b
  8846  002A28  0101               	movlb	1	; () banked
  8847  002A2A  5109               	movf	(angleToPulse@a180+1)& (0+255),w,b
  8848  002A2C  0101               	movlb	1	; () banked
  8849  002A2E  2101               	addwfc	(??_angleToPulse+1)& (0+255),w,b
  8850  002A30  0100               	movlb	0	; () banked
  8851  002A32  6F97               	movwf	(___altoft@c+1)& (0+255),b
  8852  002A34  0101               	movlb	1	; () banked
  8853  002A36  510A               	movf	(angleToPulse@a180+2)& (0+255),w,b
  8854  002A38  0101               	movlb	1	; () banked
  8855  002A3A  2102               	addwfc	(??_angleToPulse+2)& (0+255),w,b
  8856  002A3C  0100               	movlb	0	; () banked
  8857  002A3E  6F98               	movwf	(___altoft@c+2)& (0+255),b
  8858  002A40  0101               	movlb	1	; () banked
  8859  002A42  510B               	movf	(angleToPulse@a180+3)& (0+255),w,b
  8860  002A44  0101               	movlb	1	; () banked
  8861  002A46  2103               	addwfc	(??_angleToPulse+3)& (0+255),w,b
  8862  002A48  0100               	movlb	0	; () banked
  8863  002A4A  6F99               	movwf	(___altoft@c+3)& (0+255),b
  8864  002A4C  EC3E  F020         	call	___altoft	;wreg free
  8865  002A50  C096  F0B2         	movff	?___altoft,___ftmul@f2
  8866  002A54  C097  F0B3         	movff	?___altoft+1,___ftmul@f2+1
  8867  002A58  C098  F0B4         	movff	?___altoft+2,___ftmul@f2+2
  8868  002A5C  0E00               	movlw	0
  8869  002A5E  0100               	movlb	0	; () banked
  8870  002A60  6FA3               	movwf	___ftdiv@f2& (0+255),b
  8871  002A62  0E34               	movlw	52
  8872  002A64  0100               	movlb	0	; () banked
  8873  002A66  6FA4               	movwf	(___ftdiv@f2+1)& (0+255),b
  8874  002A68  0E43               	movlw	67
  8875  002A6A  0100               	movlb	0	; () banked
  8876  002A6C  6FA5               	movwf	(___ftdiv@f2+2)& (0+255),b
  8877  002A6E  C0E3  F096         	movff	angleToPulse@angle,___awtoft@c
  8878  002A72  C0E4  F097         	movff	angleToPulse@angle+1,___awtoft@c+1
  8879  002A76  ECB2  F024         	call	___awtoft	;wreg free
  8880  002A7A  C096  F0A0         	movff	?___awtoft,___ftdiv@f1
  8881  002A7E  C097  F0A1         	movff	?___awtoft+1,___ftdiv@f1+1
  8882  002A82  C098  F0A2         	movff	?___awtoft+2,___ftdiv@f1+2
  8883  002A86  EC43  F016         	call	___ftdiv	;wreg free
  8884  002A8A  C0A0  F0AF         	movff	?___ftdiv,___ftmul@f1
  8885  002A8E  C0A1  F0B0         	movff	?___ftdiv+1,___ftmul@f1+1
  8886  002A92  C0A2  F0B1         	movff	?___ftdiv+2,___ftmul@f1+2
  8887  002A96  EC94  F015         	call	___ftmul	;wreg free
  8888  002A9A  C0AF  F0CB         	movff	?___ftmul,___ftadd@f2
  8889  002A9E  C0B0  F0CC         	movff	?___ftmul+1,___ftadd@f2+1
  8890  002AA2  C0B1  F0CD         	movff	?___ftmul+2,___ftadd@f2+2
  8891  002AA6  C10F  F096         	movff	angleToPulse@a000,___altoft@c
  8892  002AAA  C110  F097         	movff	angleToPulse@a000+1,___altoft@c+1
  8893  002AAE  C111  F098         	movff	angleToPulse@a000+2,___altoft@c+2
  8894  002AB2  C112  F099         	movff	angleToPulse@a000+3,___altoft@c+3
  8895  002AB6  EC3E  F020         	call	___altoft	;wreg free
  8896  002ABA  C096  F0C8         	movff	?___altoft,___ftadd@f1
  8897  002ABE  C097  F0C9         	movff	?___altoft+1,___ftadd@f1+1
  8898  002AC2  C098  F0CA         	movff	?___altoft+2,___ftadd@f1+2
  8899  002AC6  EC21  F010         	call	___ftadd	;wreg free
  8900  002ACA  C0C8  F10C         	movff	?___ftadd,_angleToPulse$1319
  8901  002ACE  C0C9  F10D         	movff	?___ftadd+1,_angleToPulse$1319+1
  8902  002AD2  C0CA  F10E         	movff	?___ftadd+2,_angleToPulse$1319+2
  8903                           
  8904                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
  8905  002AD6  C104  F096         	movff	angleToPulse@offset,___altoft@c
  8906  002ADA  C105  F097         	movff	angleToPulse@offset+1,___altoft@c+1
  8907  002ADE  C106  F098         	movff	angleToPulse@offset+2,___altoft@c+2
  8908  002AE2  C107  F099         	movff	angleToPulse@offset+3,___altoft@c+3
  8909  002AE6  EC3E  F020         	call	___altoft	;wreg free
  8910  002AEA  C096  F0CB         	movff	?___altoft,___ftadd@f2
  8911  002AEE  C097  F0CC         	movff	?___altoft+1,___ftadd@f2+1
  8912  002AF2  C098  F0CD         	movff	?___altoft+2,___ftadd@f2+2
  8913  002AF6  C10C  F0C8         	movff	_angleToPulse$1319,___ftadd@f1
  8914  002AFA  C10D  F0C9         	movff	_angleToPulse$1319+1,___ftadd@f1+1
  8915  002AFE  C10E  F0CA         	movff	_angleToPulse$1319+2,___ftadd@f1+2
  8916  002B02  EC21  F010         	call	___ftadd	;wreg free
  8917  002B06  C0C8  F0D4         	movff	?___ftadd,___fttol@f1
  8918  002B0A  C0C9  F0D5         	movff	?___ftadd+1,___fttol@f1+1
  8919  002B0E  C0CA  F0D6         	movff	?___ftadd+2,___fttol@f1+2
  8920  002B12  ECE9  F016         	call	___fttol	;wreg free
  8921  002B16  C0D4  F0E3         	movff	?___fttol,?_angleToPulse
  8922  002B1A  C0D5  F0E4         	movff	?___fttol+1,?_angleToPulse+1
  8923  002B1E  C0D6  F0E5         	movff	?___fttol+2,?_angleToPulse+2
  8924  002B22  C0D7  F0E6         	movff	?___fttol+3,?_angleToPulse+3
  8925  002B26  0012               	return	
  8926  002B28                     __end_of_angleToPulse:
  8927                           	opt stack 0
  8928                           tblptru	equ	0xFF8
  8929                           tblptrh	equ	0xFF7
  8930                           tblptrl	equ	0xFF6
  8931                           tablat	equ	0xFF5
  8932                           prodh	equ	0xFF4
  8933                           prodl	equ	0xFF3
  8934                           intcon	equ	0xFF2
  8935                           postinc0	equ	0xFEE
  8936                           wreg	equ	0xFE8
  8937                           postdec1	equ	0xFE5
  8938                           fsr1l	equ	0xFE1
  8939                           indf2	equ	0xFDF
  8940                           postinc2	equ	0xFDE
  8941                           postdec2	equ	0xFDD
  8942                           fsr2h	equ	0xFDA
  8943                           fsr2l	equ	0xFD9
  8944                           status	equ	0xFD8
  8945                           
  8946 ;; *************** function ___fttol *****************
  8947 ;; Defined at:
  8948 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  8949 ;; Parameters:    Size  Location     Type
  8950 ;;  f1              3   84[BANK0 ] float 
  8951 ;; Auto vars:     Size  Location     Type
  8952 ;;  lval            4   94[BANK0 ] unsigned long 
  8953 ;;  exp1            1   98[BANK0 ] unsigned char 
  8954 ;;  sign1           1   93[BANK0 ] unsigned char 
  8955 ;; Return value:  Size  Location     Type
  8956 ;;                  4   84[BANK0 ] long 
  8957 ;; Registers used:
  8958 ;;		wreg, status,2, status,0
  8959 ;; Tracked objects:
  8960 ;;		On entry : 0/0
  8961 ;;		On exit  : 0/0
  8962 ;;		Unchanged: 0/0
  8963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8964 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8965 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8966 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8967 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8968 ;;Total ram usage:       15 bytes
  8969 ;; Hardware stack levels used:    1
  8970 ;; Hardware stack levels required when called:    6
  8971 ;; This function calls:
  8972 ;;		Nothing
  8973 ;; This function is called by:
  8974 ;;		_angleToPulse
  8975 ;;		_printf
  8976 ;; This function uses a non-reentrant model
  8977 ;;
  8978                           
  8979                           	psect	text29
  8980  002DD2                     __ptext29:
  8981                           	opt stack 0
  8982  002DD2                     ___fttol:
  8983                           	opt stack 21
  8984                           
  8985                           ;incstack = 0
  8986  002DD2  C0D6  F0D8         	movff	___fttol@f1+2,??___fttol
  8987  002DD6  0100               	movlb	0	; () banked
  8988  002DD8  6BD9               	clrf	(??___fttol+1)& (0+255),b
  8989  002DDA  6BDA               	clrf	(??___fttol+2)& (0+255),b
  8990  002DDC  0100               	movlb	0	; () banked
  8991  002DDE  35D5               	rlcf	(___fttol@f1+1)& (0+255),w,b
  8992  002DE0  0100               	movlb	0	; () banked
  8993  002DE2  37D8               	rlcf	??___fttol& (0+255),f,b
  8994  002DE4  E301               	bnc	u4331
  8995  002DE6  81D9               	bsf	(??___fttol+1)& (0+255),0,b
  8996  002DE8                     u4331:
  8997  002DE8  0100               	movlb	0	; () banked
  8998  002DEA  51D8               	movf	??___fttol& (0+255),w,b
  8999  002DEC  0100               	movlb	0	; () banked
  9000  002DEE  6FE2               	movwf	___fttol@exp1& (0+255),b
  9001  002DF0  0100               	movlb	0	; () banked
  9002  002DF2  51E2               	movf	___fttol@exp1& (0+255),w,b
  9003  002DF4  A4D8               	btfss	status,2,c
  9004  002DF6  D00A               	goto	l4636
  9005                           
  9006                           ; BSR set to: 0
  9007  002DF8  0E00               	movlw	0
  9008  002DFA  0100               	movlb	0	; () banked
  9009  002DFC  6FD4               	movwf	?___fttol& (0+255),b
  9010  002DFE  0E00               	movlw	0
  9011  002E00  6FD5               	movwf	(?___fttol+1)& (0+255),b
  9012  002E02  0E00               	movlw	0
  9013  002E04  6FD6               	movwf	(?___fttol+2)& (0+255),b
  9014  002E06  0E00               	movlw	0
  9015  002E08  6FD7               	movwf	(?___fttol+3)& (0+255),b
  9016                           
  9017                           ; BSR set to: 0
  9018  002E0A  0012               	return	
  9019  002E0C                     l4636:
  9020                           
  9021                           ; BSR set to: 0
  9022  002E0C  0E17               	movlw	23
  9023  002E0E  0100               	movlb	0	; () banked
  9024  002E10  6FD8               	movwf	??___fttol& (0+255),b
  9025  002E12  C0D4  F0D9         	movff	___fttol@f1,??___fttol+1
  9026  002E16  C0D5  F0DA         	movff	___fttol@f1+1,??___fttol+2
  9027  002E1A  C0D6  F0DB         	movff	___fttol@f1+2,??___fttol+3
  9028  002E1E  0100               	movlb	0	; () banked
  9029  002E20  29D8               	incf	??___fttol& (0+255),w,b
  9030  002E22  0100               	movlb	0	; () banked
  9031  002E24  6FDC               	movwf	(??___fttol+4)& (0+255),b
  9032  002E26  D005               	goto	u4350
  9033  002E28                     u4355:
  9034  002E28  0100               	movlb	0	; () banked
  9035  002E2A  90D8               	bcf	status,0,c
  9036  002E2C  33DB               	rrcf	(??___fttol+3)& (0+255),f,b
  9037  002E2E  33DA               	rrcf	(??___fttol+2)& (0+255),f,b
  9038  002E30  33D9               	rrcf	(??___fttol+1)& (0+255),f,b
  9039  002E32                     u4350:
  9040  002E32  0100               	movlb	0	; () banked
  9041  002E34  2FDC               	decfsz	(??___fttol+4)& (0+255),f,b
  9042  002E36  D7F8               	goto	u4355
  9043  002E38  0100               	movlb	0	; () banked
  9044  002E3A  51D9               	movf	(??___fttol+1)& (0+255),w,b
  9045  002E3C  0100               	movlb	0	; () banked
  9046  002E3E  6FDD               	movwf	___fttol@sign1& (0+255),b
  9047                           
  9048                           ; BSR set to: 0
  9049  002E40  0100               	movlb	0	; () banked
  9050  002E42  8FD5               	bsf	(___fttol@f1+1)& (0+255),7,b
  9051                           
  9052                           ; BSR set to: 0
  9053  002E44  0EFF               	movlw	255
  9054  002E46  0100               	movlb	0	; () banked
  9055  002E48  17D4               	andwf	___fttol@f1& (0+255),f,b
  9056  002E4A  0EFF               	movlw	255
  9057  002E4C  0100               	movlb	0	; () banked
  9058  002E4E  17D5               	andwf	(___fttol@f1+1)& (0+255),f,b
  9059  002E50  0E00               	movlw	0
  9060  002E52  0100               	movlb	0	; () banked
  9061  002E54  17D6               	andwf	(___fttol@f1+2)& (0+255),f,b
  9062                           
  9063                           ; BSR set to: 0
  9064  002E56  0100               	movlb	0	; () banked
  9065  002E58  51D4               	movf	___fttol@f1& (0+255),w,b
  9066  002E5A  0100               	movlb	0	; () banked
  9067  002E5C  6FDE               	movwf	___fttol@lval& (0+255),b
  9068  002E5E  0100               	movlb	0	; () banked
  9069  002E60  51D5               	movf	(___fttol@f1+1)& (0+255),w,b
  9070  002E62  0100               	movlb	0	; () banked
  9071  002E64  6FDF               	movwf	(___fttol@lval+1)& (0+255),b
  9072  002E66  0100               	movlb	0	; () banked
  9073  002E68  51D6               	movf	(___fttol@f1+2)& (0+255),w,b
  9074  002E6A  0100               	movlb	0	; () banked
  9075  002E6C  6FE0               	movwf	(___fttol@lval+2)& (0+255),b
  9076  002E6E  0100               	movlb	0	; () banked
  9077  002E70  6BE1               	clrf	(___fttol@lval+3)& (0+255),b
  9078                           
  9079                           ; BSR set to: 0
  9080  002E72  0E8E               	movlw	142
  9081  002E74  0100               	movlb	0	; () banked
  9082  002E76  5FE2               	subwf	___fttol@exp1& (0+255),f,b
  9083                           
  9084                           ; BSR set to: 0
  9085  002E78  0100               	movlb	0	; () banked
  9086  002E7A  AFE2               	btfss	___fttol@exp1& (0+255),7,b
  9087  002E7C  D01A               	goto	l4658
  9088                           
  9089                           ; BSR set to: 0
  9090  002E7E  0100               	movlb	0	; () banked
  9091  002E80  51E2               	movf	___fttol@exp1& (0+255),w,b
  9092  002E82  0A80               	xorlw	128
  9093  002E84  0F8F               	addlw	143
  9094  002E86  B0D8               	btfsc	status,0,c
  9095  002E88  D00A               	goto	l4654
  9096                           
  9097                           ; BSR set to: 0
  9098  002E8A  0E00               	movlw	0
  9099  002E8C  0100               	movlb	0	; () banked
  9100  002E8E  6FD4               	movwf	?___fttol& (0+255),b
  9101  002E90  0E00               	movlw	0
  9102  002E92  6FD5               	movwf	(?___fttol+1)& (0+255),b
  9103  002E94  0E00               	movlw	0
  9104  002E96  6FD6               	movwf	(?___fttol+2)& (0+255),b
  9105  002E98  0E00               	movlw	0
  9106  002E9A  6FD7               	movwf	(?___fttol+3)& (0+255),b
  9107                           
  9108                           ; BSR set to: 0
  9109  002E9C  0012               	return	
  9110  002E9E                     l4654:
  9111                           
  9112                           ; BSR set to: 0
  9113  002E9E  0100               	movlb	0	; () banked
  9114  002EA0  90D8               	bcf	status,0,c
  9115  002EA2  33E1               	rrcf	(___fttol@lval+3)& (0+255),f,b
  9116  002EA4  33E0               	rrcf	(___fttol@lval+2)& (0+255),f,b
  9117  002EA6  33DF               	rrcf	(___fttol@lval+1)& (0+255),f,b
  9118  002EA8  33DE               	rrcf	___fttol@lval& (0+255),f,b
  9119                           
  9120                           ; BSR set to: 0
  9121  002EAA  0100               	movlb	0	; () banked
  9122  002EAC  3FE2               	incfsz	___fttol@exp1& (0+255),f,b
  9123  002EAE  D7F7               	goto	l4654
  9124                           
  9125                           ; BSR set to: 0
  9126  002EB0  D01B               	goto	l4668
  9127  002EB2                     l4658:
  9128                           
  9129                           ; BSR set to: 0
  9130  002EB2  0E17               	movlw	23
  9131  002EB4  0100               	movlb	0	; () banked
  9132  002EB6  65E2               	cpfsgt	___fttol@exp1& (0+255),b
  9133  002EB8  D012               	goto	l4666
  9134                           
  9135                           ; BSR set to: 0
  9136  002EBA  0E00               	movlw	0
  9137  002EBC  0100               	movlb	0	; () banked
  9138  002EBE  6FD4               	movwf	?___fttol& (0+255),b
  9139  002EC0  0E00               	movlw	0
  9140  002EC2  6FD5               	movwf	(?___fttol+1)& (0+255),b
  9141  002EC4  0E00               	movlw	0
  9142  002EC6  6FD6               	movwf	(?___fttol+2)& (0+255),b
  9143  002EC8  0E00               	movlw	0
  9144  002ECA  6FD7               	movwf	(?___fttol+3)& (0+255),b
  9145                           
  9146                           ; BSR set to: 0
  9147  002ECC  0012               	return	
  9148  002ECE                     l4664:
  9149                           
  9150                           ; BSR set to: 0
  9151  002ECE  0100               	movlb	0	; () banked
  9152  002ED0  90D8               	bcf	status,0,c
  9153  002ED2  37DE               	rlcf	___fttol@lval& (0+255),f,b
  9154  002ED4  37DF               	rlcf	(___fttol@lval+1)& (0+255),f,b
  9155  002ED6  37E0               	rlcf	(___fttol@lval+2)& (0+255),f,b
  9156  002ED8  37E1               	rlcf	(___fttol@lval+3)& (0+255),f,b
  9157  002EDA  0100               	movlb	0	; () banked
  9158  002EDC  07E2               	decf	___fttol@exp1& (0+255),f,b
  9159  002EDE                     l4666:
  9160                           
  9161                           ; BSR set to: 0
  9162  002EDE  0100               	movlb	0	; () banked
  9163  002EE0  51E2               	movf	___fttol@exp1& (0+255),w,b
  9164  002EE2  0100               	movlb	0	; () banked
  9165  002EE4  A4D8               	btfss	status,2,c
  9166  002EE6  D7F3               	goto	l4664
  9167  002EE8                     l4668:
  9168                           
  9169                           ; BSR set to: 0
  9170  002EE8  0100               	movlb	0	; () banked
  9171  002EEA  51DD               	movf	___fttol@sign1& (0+255),w,b
  9172  002EEC  0100               	movlb	0	; () banked
  9173  002EEE  B4D8               	btfsc	status,2,c
  9174  002EF0  D009               	goto	l4672
  9175                           
  9176                           ; BSR set to: 0
  9177  002EF2  0100               	movlb	0	; () banked
  9178  002EF4  1FE1               	comf	(___fttol@lval+3)& (0+255),f,b
  9179  002EF6  1FE0               	comf	(___fttol@lval+2)& (0+255),f,b
  9180  002EF8  1FDF               	comf	(___fttol@lval+1)& (0+255),f,b
  9181  002EFA  6DDE               	negf	___fttol@lval& (0+255),b
  9182  002EFC  0E00               	movlw	0
  9183  002EFE  23DF               	addwfc	(___fttol@lval+1)& (0+255),f,b
  9184  002F00  23E0               	addwfc	(___fttol@lval+2)& (0+255),f,b
  9185  002F02  23E1               	addwfc	(___fttol@lval+3)& (0+255),f,b
  9186  002F04                     l4672:
  9187                           
  9188                           ; BSR set to: 0
  9189  002F04  C0DE  F0D4         	movff	___fttol@lval,?___fttol
  9190  002F08  C0DF  F0D5         	movff	___fttol@lval+1,?___fttol+1
  9191  002F0C  C0E0  F0D6         	movff	___fttol@lval+2,?___fttol+2
  9192  002F10  C0E1  F0D7         	movff	___fttol@lval+3,?___fttol+3
  9193  002F14  0012               	return	
  9194  002F16                     __end_of___fttol:
  9195                           	opt stack 0
  9196                           tblptru	equ	0xFF8
  9197                           tblptrh	equ	0xFF7
  9198                           tblptrl	equ	0xFF6
  9199                           tablat	equ	0xFF5
  9200                           prodh	equ	0xFF4
  9201                           prodl	equ	0xFF3
  9202                           intcon	equ	0xFF2
  9203                           postinc0	equ	0xFEE
  9204                           wreg	equ	0xFE8
  9205                           postdec1	equ	0xFE5
  9206                           fsr1l	equ	0xFE1
  9207                           indf2	equ	0xFDF
  9208                           postinc2	equ	0xFDE
  9209                           postdec2	equ	0xFDD
  9210                           fsr2h	equ	0xFDA
  9211                           fsr2l	equ	0xFD9
  9212                           status	equ	0xFD8
  9213                           
  9214 ;; *************** function ___ftmul *****************
  9215 ;; Defined at:
  9216 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  9217 ;; Parameters:    Size  Location     Type
  9218 ;;  f1              3   47[BANK0 ] float 
  9219 ;;  f2              3   50[BANK0 ] float 
  9220 ;; Auto vars:     Size  Location     Type
  9221 ;;  f3_as_produc    3   57[BANK0 ] unsigned um
  9222 ;;  sign            1   61[BANK0 ] unsigned char 
  9223 ;;  cntr            1   60[BANK0 ] unsigned char 
  9224 ;;  exp             1   56[BANK0 ] unsigned char 
  9225 ;; Return value:  Size  Location     Type
  9226 ;;                  3   47[BANK0 ] float 
  9227 ;; Registers used:
  9228 ;;		wreg, status,2, status,0, cstack
  9229 ;; Tracked objects:
  9230 ;;		On entry : 0/0
  9231 ;;		On exit  : 0/0
  9232 ;;		Unchanged: 0/0
  9233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9234 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9235 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9236 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9237 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9238 ;;Total ram usage:       15 bytes
  9239 ;; Hardware stack levels used:    1
  9240 ;; Hardware stack levels required when called:    7
  9241 ;; This function calls:
  9242 ;;		___ftpack
  9243 ;; This function is called by:
  9244 ;;		_sortBattery
  9245 ;;		_angleToPulse
  9246 ;;		_fround
  9247 ;;		_scale
  9248 ;;		_printf
  9249 ;; This function uses a non-reentrant model
  9250 ;;
  9251                           
  9252                           	psect	text30
  9253  002B28                     __ptext30:
  9254                           	opt stack 0
  9255  002B28                     ___ftmul:
  9256                           	opt stack 20
  9257                           
  9258                           ; BSR set to: 0
  9259                           ;incstack = 0
  9260  002B28  C0B1  F0B5         	movff	___ftmul@f1+2,??___ftmul
  9261  002B2C  0100               	movlb	0	; () banked
  9262  002B2E  6BB6               	clrf	(??___ftmul+1)& (0+255),b
  9263  002B30  6BB7               	clrf	(??___ftmul+2)& (0+255),b
  9264  002B32  0100               	movlb	0	; () banked
  9265  002B34  35B0               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  9266  002B36  0100               	movlb	0	; () banked
  9267  002B38  37B5               	rlcf	??___ftmul& (0+255),f,b
  9268  002B3A  E301               	bnc	u3781
  9269  002B3C  81B6               	bsf	(??___ftmul+1)& (0+255),0,b
  9270  002B3E                     u3781:
  9271  002B3E  0100               	movlb	0	; () banked
  9272  002B40  51B5               	movf	??___ftmul& (0+255),w,b
  9273  002B42  0100               	movlb	0	; () banked
  9274  002B44  6FB8               	movwf	___ftmul@exp& (0+255),b
  9275  002B46  0100               	movlb	0	; () banked
  9276  002B48  51B8               	movf	___ftmul@exp& (0+255),w,b
  9277  002B4A  A4D8               	btfss	status,2,c
  9278  002B4C  D00A               	goto	l4202
  9279                           
  9280                           ; BSR set to: 0
  9281  002B4E  0E00               	movlw	0
  9282  002B50  0100               	movlb	0	; () banked
  9283  002B52  6FAF               	movwf	?___ftmul& (0+255),b
  9284  002B54  0E00               	movlw	0
  9285  002B56  0100               	movlb	0	; () banked
  9286  002B58  6FB0               	movwf	(?___ftmul+1)& (0+255),b
  9287  002B5A  0E00               	movlw	0
  9288  002B5C  0100               	movlb	0	; () banked
  9289  002B5E  6FB1               	movwf	(?___ftmul+2)& (0+255),b
  9290                           
  9291                           ; BSR set to: 0
  9292  002B60  0012               	return	
  9293  002B62                     l4202:
  9294                           
  9295                           ; BSR set to: 0
  9296  002B62  C0B4  F0B5         	movff	___ftmul@f2+2,??___ftmul
  9297  002B66  0100               	movlb	0	; () banked
  9298  002B68  6BB6               	clrf	(??___ftmul+1)& (0+255),b
  9299  002B6A  6BB7               	clrf	(??___ftmul+2)& (0+255),b
  9300  002B6C  0100               	movlb	0	; () banked
  9301  002B6E  35B3               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  9302  002B70  0100               	movlb	0	; () banked
  9303  002B72  37B5               	rlcf	??___ftmul& (0+255),f,b
  9304  002B74  E301               	bnc	u3801
  9305  002B76  81B6               	bsf	(??___ftmul+1)& (0+255),0,b
  9306  002B78                     u3801:
  9307  002B78  0100               	movlb	0	; () banked
  9308  002B7A  51B5               	movf	??___ftmul& (0+255),w,b
  9309  002B7C  0100               	movlb	0	; () banked
  9310  002B7E  6FBD               	movwf	___ftmul@sign& (0+255),b
  9311  002B80  0100               	movlb	0	; () banked
  9312  002B82  51BD               	movf	___ftmul@sign& (0+255),w,b
  9313  002B84  A4D8               	btfss	status,2,c
  9314  002B86  D00A               	goto	l4208
  9315                           
  9316                           ; BSR set to: 0
  9317  002B88  0E00               	movlw	0
  9318  002B8A  0100               	movlb	0	; () banked
  9319  002B8C  6FAF               	movwf	?___ftmul& (0+255),b
  9320  002B8E  0E00               	movlw	0
  9321  002B90  0100               	movlb	0	; () banked
  9322  002B92  6FB0               	movwf	(?___ftmul+1)& (0+255),b
  9323  002B94  0E00               	movlw	0
  9324  002B96  0100               	movlb	0	; () banked
  9325  002B98  6FB1               	movwf	(?___ftmul+2)& (0+255),b
  9326                           
  9327                           ; BSR set to: 0
  9328  002B9A  0012               	return	
  9329  002B9C                     l4208:
  9330                           
  9331                           ; BSR set to: 0
  9332  002B9C  0100               	movlb	0	; () banked
  9333  002B9E  51BD               	movf	___ftmul@sign& (0+255),w,b
  9334  002BA0  0F7B               	addlw	123
  9335  002BA2  0100               	movlb	0	; () banked
  9336  002BA4  27B8               	addwf	___ftmul@exp& (0+255),f,b
  9337                           
  9338                           ; BSR set to: 0
  9339  002BA6  C0B1  F0BD         	movff	___ftmul@f1+2,___ftmul@sign
  9340  002BAA  0100               	movlb	0	; () banked
  9341  002BAC  51B4               	movf	(___ftmul@f2+2)& (0+255),w,b
  9342  002BAE  0100               	movlb	0	; () banked
  9343  002BB0  1BBD               	xorwf	___ftmul@sign& (0+255),f,b
  9344  002BB2  0E80               	movlw	128
  9345  002BB4  0100               	movlb	0	; () banked
  9346  002BB6  17BD               	andwf	___ftmul@sign& (0+255),f,b
  9347                           
  9348                           ; BSR set to: 0
  9349  002BB8  0100               	movlb	0	; () banked
  9350  002BBA  8FB0               	bsf	(___ftmul@f1+1)& (0+255),7,b
  9351                           
  9352                           ; BSR set to: 0
  9353  002BBC  0100               	movlb	0	; () banked
  9354  002BBE  8FB3               	bsf	(___ftmul@f2+1)& (0+255),7,b
  9355                           
  9356                           ; BSR set to: 0
  9357  002BC0  0EFF               	movlw	255
  9358  002BC2  0100               	movlb	0	; () banked
  9359  002BC4  17B2               	andwf	___ftmul@f2& (0+255),f,b
  9360  002BC6  0EFF               	movlw	255
  9361  002BC8  0100               	movlb	0	; () banked
  9362  002BCA  17B3               	andwf	(___ftmul@f2+1)& (0+255),f,b
  9363  002BCC  0E00               	movlw	0
  9364  002BCE  0100               	movlb	0	; () banked
  9365  002BD0  17B4               	andwf	(___ftmul@f2+2)& (0+255),f,b
  9366                           
  9367                           ; BSR set to: 0
  9368  002BD2  0E00               	movlw	0
  9369  002BD4  0100               	movlb	0	; () banked
  9370  002BD6  6FB9               	movwf	___ftmul@f3_as_product& (0+255),b
  9371  002BD8  0E00               	movlw	0
  9372  002BDA  0100               	movlb	0	; () banked
  9373  002BDC  6FBA               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  9374  002BDE  0E00               	movlw	0
  9375  002BE0  0100               	movlb	0	; () banked
  9376  002BE2  6FBB               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  9377                           
  9378                           ; BSR set to: 0
  9379  002BE4  0E07               	movlw	7
  9380  002BE6  0100               	movlb	0	; () banked
  9381  002BE8  6FBC               	movwf	___ftmul@cntr& (0+255),b
  9382  002BEA                     l4222:
  9383                           
  9384                           ; BSR set to: 0
  9385  002BEA  0100               	movlb	0	; () banked
  9386  002BEC  A1AF               	btfss	___ftmul@f1& (0+255),0,b
  9387  002BEE  D00C               	goto	l4226
  9388                           
  9389                           ; BSR set to: 0
  9390  002BF0  0100               	movlb	0	; () banked
  9391  002BF2  51B2               	movf	___ftmul@f2& (0+255),w,b
  9392  002BF4  0100               	movlb	0	; () banked
  9393  002BF6  27B9               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9394  002BF8  0100               	movlb	0	; () banked
  9395  002BFA  51B3               	movf	(___ftmul@f2+1)& (0+255),w,b
  9396  002BFC  0100               	movlb	0	; () banked
  9397  002BFE  23BA               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9398  002C00  0100               	movlb	0	; () banked
  9399  002C02  51B4               	movf	(___ftmul@f2+2)& (0+255),w,b
  9400  002C04  0100               	movlb	0	; () banked
  9401  002C06  23BB               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9402  002C08                     l4226:
  9403                           
  9404                           ; BSR set to: 0
  9405  002C08  0100               	movlb	0	; () banked
  9406  002C0A  90D8               	bcf	status,0,c
  9407  002C0C  33B1               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  9408  002C0E  33B0               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  9409  002C10  33AF               	rrcf	___ftmul@f1& (0+255),f,b
  9410  002C12  0100               	movlb	0	; () banked
  9411  002C14  90D8               	bcf	status,0,c
  9412  002C16  37B2               	rlcf	___ftmul@f2& (0+255),f,b
  9413  002C18  37B3               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  9414  002C1A  37B4               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  9415                           
  9416                           ; BSR set to: 0
  9417  002C1C  0100               	movlb	0	; () banked
  9418  002C1E  2FBC               	decfsz	___ftmul@cntr& (0+255),f,b
  9419  002C20  D7E4               	goto	l4222
  9420                           
  9421                           ; BSR set to: 0
  9422                           
  9423                           ; BSR set to: 0
  9424  002C22  0E09               	movlw	9
  9425  002C24  0100               	movlb	0	; () banked
  9426  002C26  6FBC               	movwf	___ftmul@cntr& (0+255),b
  9427  002C28                     l4232:
  9428                           
  9429                           ; BSR set to: 0
  9430  002C28  0100               	movlb	0	; () banked
  9431  002C2A  A1AF               	btfss	___ftmul@f1& (0+255),0,b
  9432  002C2C  D00C               	goto	l4236
  9433                           
  9434                           ; BSR set to: 0
  9435  002C2E  0100               	movlb	0	; () banked
  9436  002C30  51B2               	movf	___ftmul@f2& (0+255),w,b
  9437  002C32  0100               	movlb	0	; () banked
  9438  002C34  27B9               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9439  002C36  0100               	movlb	0	; () banked
  9440  002C38  51B3               	movf	(___ftmul@f2+1)& (0+255),w,b
  9441  002C3A  0100               	movlb	0	; () banked
  9442  002C3C  23BA               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9443  002C3E  0100               	movlb	0	; () banked
  9444  002C40  51B4               	movf	(___ftmul@f2+2)& (0+255),w,b
  9445  002C42  0100               	movlb	0	; () banked
  9446  002C44  23BB               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9447  002C46                     l4236:
  9448                           
  9449                           ; BSR set to: 0
  9450  002C46  0100               	movlb	0	; () banked
  9451  002C48  90D8               	bcf	status,0,c
  9452  002C4A  33B1               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  9453  002C4C  33B0               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  9454  002C4E  33AF               	rrcf	___ftmul@f1& (0+255),f,b
  9455  002C50  0100               	movlb	0	; () banked
  9456  002C52  90D8               	bcf	status,0,c
  9457  002C54  33BB               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  9458  002C56  33BA               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  9459  002C58  33B9               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  9460                           
  9461                           ; BSR set to: 0
  9462  002C5A  0100               	movlb	0	; () banked
  9463  002C5C  2FBC               	decfsz	___ftmul@cntr& (0+255),f,b
  9464  002C5E  D7E4               	goto	l4232
  9465                           
  9466                           ; BSR set to: 0
  9467                           
  9468                           ; BSR set to: 0
  9469  002C60  C0B9  F08E         	movff	___ftmul@f3_as_product,___ftpack@arg
  9470  002C64  C0BA  F08F         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9471  002C68  C0BB  F090         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9472  002C6C  C0B8  F091         	movff	___ftmul@exp,___ftpack@exp
  9473  002C70  C0BD  F092         	movff	___ftmul@sign,___ftpack@sign
  9474  002C74  ECF0  F019         	call	___ftpack	;wreg free
  9475  002C78  C08E  F0AF         	movff	?___ftpack,?___ftmul
  9476  002C7C  C08F  F0B0         	movff	?___ftpack+1,?___ftmul+1
  9477  002C80  C090  F0B1         	movff	?___ftpack+2,?___ftmul+2
  9478  002C84  0012               	return	
  9479  002C86                     __end_of___ftmul:
  9480                           	opt stack 0
  9481                           tblptru	equ	0xFF8
  9482                           tblptrh	equ	0xFF7
  9483                           tblptrl	equ	0xFF6
  9484                           tablat	equ	0xFF5
  9485                           prodh	equ	0xFF4
  9486                           prodl	equ	0xFF3
  9487                           intcon	equ	0xFF2
  9488                           postinc0	equ	0xFEE
  9489                           wreg	equ	0xFE8
  9490                           postdec1	equ	0xFE5
  9491                           fsr1l	equ	0xFE1
  9492                           indf2	equ	0xFDF
  9493                           postinc2	equ	0xFDE
  9494                           postdec2	equ	0xFDD
  9495                           fsr2h	equ	0xFDA
  9496                           fsr2l	equ	0xFD9
  9497                           status	equ	0xFD8
  9498                           
  9499 ;; *************** function ___ftdiv *****************
  9500 ;; Defined at:
  9501 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  9502 ;; Parameters:    Size  Location     Type
  9503 ;;  f1              3   32[BANK0 ] float 
  9504 ;;  f2              3   35[BANK0 ] float 
  9505 ;; Auto vars:     Size  Location     Type
  9506 ;;  f3              3   42[BANK0 ] float 
  9507 ;;  sign            1   46[BANK0 ] unsigned char 
  9508 ;;  exp             1   45[BANK0 ] unsigned char 
  9509 ;;  cntr            1   41[BANK0 ] unsigned char 
  9510 ;; Return value:  Size  Location     Type
  9511 ;;                  3   32[BANK0 ] float 
  9512 ;; Registers used:
  9513 ;;		wreg, status,2, status,0, cstack
  9514 ;; Tracked objects:
  9515 ;;		On entry : 0/0
  9516 ;;		On exit  : 0/0
  9517 ;;		Unchanged: 0/0
  9518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9519 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9520 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9521 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9522 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9523 ;;Total ram usage:       15 bytes
  9524 ;; Hardware stack levels used:    1
  9525 ;; Hardware stack levels required when called:    7
  9526 ;; This function calls:
  9527 ;;		___ftpack
  9528 ;; This function is called by:
  9529 ;;		_sortBattery
  9530 ;;		_angleToPulse
  9531 ;;		_testFrequency
  9532 ;; This function uses a non-reentrant model
  9533 ;;
  9534                           
  9535                           	psect	text31
  9536  002C86                     __ptext31:
  9537                           	opt stack 0
  9538  002C86                     ___ftdiv:
  9539                           	opt stack 20
  9540                           
  9541                           ;incstack = 0
  9542  002C86  C0A2  F0A6         	movff	___ftdiv@f1+2,??___ftdiv
  9543  002C8A  0100               	movlb	0	; () banked
  9544  002C8C  6BA7               	clrf	(??___ftdiv+1)& (0+255),b
  9545  002C8E  6BA8               	clrf	(??___ftdiv+2)& (0+255),b
  9546  002C90  0100               	movlb	0	; () banked
  9547  002C92  35A1               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  9548  002C94  0100               	movlb	0	; () banked
  9549  002C96  37A6               	rlcf	??___ftdiv& (0+255),f,b
  9550  002C98  E301               	bnc	u4221
  9551  002C9A  81A7               	bsf	(??___ftdiv+1)& (0+255),0,b
  9552  002C9C                     u4221:
  9553  002C9C  0100               	movlb	0	; () banked
  9554  002C9E  51A6               	movf	??___ftdiv& (0+255),w,b
  9555  002CA0  0100               	movlb	0	; () banked
  9556  002CA2  6FAD               	movwf	___ftdiv@exp& (0+255),b
  9557  002CA4  0100               	movlb	0	; () banked
  9558  002CA6  51AD               	movf	___ftdiv@exp& (0+255),w,b
  9559  002CA8  A4D8               	btfss	status,2,c
  9560  002CAA  D00A               	goto	l4548
  9561                           
  9562                           ; BSR set to: 0
  9563  002CAC  0E00               	movlw	0
  9564  002CAE  0100               	movlb	0	; () banked
  9565  002CB0  6FA0               	movwf	?___ftdiv& (0+255),b
  9566  002CB2  0E00               	movlw	0
  9567  002CB4  0100               	movlb	0	; () banked
  9568  002CB6  6FA1               	movwf	(?___ftdiv+1)& (0+255),b
  9569  002CB8  0E00               	movlw	0
  9570  002CBA  0100               	movlb	0	; () banked
  9571  002CBC  6FA2               	movwf	(?___ftdiv+2)& (0+255),b
  9572                           
  9573                           ; BSR set to: 0
  9574  002CBE  0012               	return	
  9575  002CC0                     l4548:
  9576                           
  9577                           ; BSR set to: 0
  9578  002CC0  C0A5  F0A6         	movff	___ftdiv@f2+2,??___ftdiv
  9579  002CC4  0100               	movlb	0	; () banked
  9580  002CC6  6BA7               	clrf	(??___ftdiv+1)& (0+255),b
  9581  002CC8  6BA8               	clrf	(??___ftdiv+2)& (0+255),b
  9582  002CCA  0100               	movlb	0	; () banked
  9583  002CCC  35A4               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  9584  002CCE  0100               	movlb	0	; () banked
  9585  002CD0  37A6               	rlcf	??___ftdiv& (0+255),f,b
  9586  002CD2  E301               	bnc	u4241
  9587  002CD4  81A7               	bsf	(??___ftdiv+1)& (0+255),0,b
  9588  002CD6                     u4241:
  9589  002CD6  0100               	movlb	0	; () banked
  9590  002CD8  51A6               	movf	??___ftdiv& (0+255),w,b
  9591  002CDA  0100               	movlb	0	; () banked
  9592  002CDC  6FAE               	movwf	___ftdiv@sign& (0+255),b
  9593  002CDE  0100               	movlb	0	; () banked
  9594  002CE0  51AE               	movf	___ftdiv@sign& (0+255),w,b
  9595  002CE2  A4D8               	btfss	status,2,c
  9596  002CE4  D00A               	goto	l4554
  9597                           
  9598                           ; BSR set to: 0
  9599  002CE6  0E00               	movlw	0
  9600  002CE8  0100               	movlb	0	; () banked
  9601  002CEA  6FA0               	movwf	?___ftdiv& (0+255),b
  9602  002CEC  0E00               	movlw	0
  9603  002CEE  0100               	movlb	0	; () banked
  9604  002CF0  6FA1               	movwf	(?___ftdiv+1)& (0+255),b
  9605  002CF2  0E00               	movlw	0
  9606  002CF4  0100               	movlb	0	; () banked
  9607  002CF6  6FA2               	movwf	(?___ftdiv+2)& (0+255),b
  9608                           
  9609                           ; BSR set to: 0
  9610  002CF8  0012               	return	
  9611  002CFA                     l4554:
  9612                           
  9613                           ; BSR set to: 0
  9614  002CFA  0E00               	movlw	0
  9615  002CFC  0100               	movlb	0	; () banked
  9616  002CFE  6FAA               	movwf	___ftdiv@f3& (0+255),b
  9617  002D00  0E00               	movlw	0
  9618  002D02  0100               	movlb	0	; () banked
  9619  002D04  6FAB               	movwf	(___ftdiv@f3+1)& (0+255),b
  9620  002D06  0E00               	movlw	0
  9621  002D08  0100               	movlb	0	; () banked
  9622  002D0A  6FAC               	movwf	(___ftdiv@f3+2)& (0+255),b
  9623                           
  9624                           ; BSR set to: 0
  9625  002D0C  0100               	movlb	0	; () banked
  9626  002D0E  51AE               	movf	___ftdiv@sign& (0+255),w,b
  9627  002D10  0F89               	addlw	137
  9628  002D12  0100               	movlb	0	; () banked
  9629  002D14  5FAD               	subwf	___ftdiv@exp& (0+255),f,b
  9630                           
  9631                           ; BSR set to: 0
  9632  002D16  C0A2  F0AE         	movff	___ftdiv@f1+2,___ftdiv@sign
  9633                           
  9634                           ; BSR set to: 0
  9635  002D1A  0100               	movlb	0	; () banked
  9636  002D1C  51A5               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9637  002D1E  0100               	movlb	0	; () banked
  9638  002D20  1BAE               	xorwf	___ftdiv@sign& (0+255),f,b
  9639                           
  9640                           ; BSR set to: 0
  9641  002D22  0E80               	movlw	128
  9642  002D24  0100               	movlb	0	; () banked
  9643  002D26  17AE               	andwf	___ftdiv@sign& (0+255),f,b
  9644                           
  9645                           ; BSR set to: 0
  9646  002D28  0100               	movlb	0	; () banked
  9647  002D2A  8FA1               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  9648                           
  9649                           ; BSR set to: 0
  9650  002D2C  0EFF               	movlw	255
  9651  002D2E  0100               	movlb	0	; () banked
  9652  002D30  17A0               	andwf	___ftdiv@f1& (0+255),f,b
  9653  002D32  0EFF               	movlw	255
  9654  002D34  0100               	movlb	0	; () banked
  9655  002D36  17A1               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  9656  002D38  0E00               	movlw	0
  9657  002D3A  0100               	movlb	0	; () banked
  9658  002D3C  17A2               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  9659                           
  9660                           ; BSR set to: 0
  9661  002D3E  0100               	movlb	0	; () banked
  9662  002D40  8FA4               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  9663                           
  9664                           ; BSR set to: 0
  9665  002D42  0EFF               	movlw	255
  9666  002D44  0100               	movlb	0	; () banked
  9667  002D46  17A3               	andwf	___ftdiv@f2& (0+255),f,b
  9668  002D48  0EFF               	movlw	255
  9669  002D4A  0100               	movlb	0	; () banked
  9670  002D4C  17A4               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  9671  002D4E  0E00               	movlw	0
  9672  002D50  0100               	movlb	0	; () banked
  9673  002D52  17A5               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  9674                           
  9675                           ; BSR set to: 0
  9676  002D54  0E18               	movlw	24
  9677  002D56  0100               	movlb	0	; () banked
  9678  002D58  6FA9               	movwf	___ftdiv@cntr& (0+255),b
  9679  002D5A                     l4574:
  9680                           
  9681                           ; BSR set to: 0
  9682  002D5A  0100               	movlb	0	; () banked
  9683  002D5C  90D8               	bcf	status,0,c
  9684  002D5E  37AA               	rlcf	___ftdiv@f3& (0+255),f,b
  9685  002D60  37AB               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  9686  002D62  37AC               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  9687                           
  9688                           ; BSR set to: 0
  9689  002D64  0100               	movlb	0	; () banked
  9690  002D66  51A3               	movf	___ftdiv@f2& (0+255),w,b
  9691  002D68  0100               	movlb	0	; () banked
  9692  002D6A  5DA0               	subwf	___ftdiv@f1& (0+255),w,b
  9693  002D6C  0100               	movlb	0	; () banked
  9694  002D6E  51A4               	movf	(___ftdiv@f2+1)& (0+255),w,b
  9695  002D70  0100               	movlb	0	; () banked
  9696  002D72  59A1               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  9697  002D74  0100               	movlb	0	; () banked
  9698  002D76  51A5               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9699  002D78  0100               	movlb	0	; () banked
  9700  002D7A  59A2               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  9701  002D7C  A0D8               	btfss	status,0,c
  9702  002D7E  D00E               	goto	l1018
  9703                           
  9704                           ; BSR set to: 0
  9705  002D80  0100               	movlb	0	; () banked
  9706  002D82  51A3               	movf	___ftdiv@f2& (0+255),w,b
  9707  002D84  0100               	movlb	0	; () banked
  9708  002D86  5FA0               	subwf	___ftdiv@f1& (0+255),f,b
  9709  002D88  0100               	movlb	0	; () banked
  9710  002D8A  51A4               	movf	(___ftdiv@f2+1)& (0+255),w,b
  9711  002D8C  0100               	movlb	0	; () banked
  9712  002D8E  5BA1               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  9713  002D90  0100               	movlb	0	; () banked
  9714  002D92  51A5               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9715  002D94  0100               	movlb	0	; () banked
  9716  002D96  5BA2               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  9717                           
  9718                           ; BSR set to: 0
  9719  002D98  0100               	movlb	0	; () banked
  9720  002D9A  81AA               	bsf	___ftdiv@f3& (0+255),0,b
  9721  002D9C                     l1018:
  9722                           
  9723                           ; BSR set to: 0
  9724  002D9C  0100               	movlb	0	; () banked
  9725  002D9E  90D8               	bcf	status,0,c
  9726  002DA0  37A0               	rlcf	___ftdiv@f1& (0+255),f,b
  9727  002DA2  37A1               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  9728  002DA4  37A2               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  9729                           
  9730                           ; BSR set to: 0
  9731  002DA6  0100               	movlb	0	; () banked
  9732  002DA8  2FA9               	decfsz	___ftdiv@cntr& (0+255),f,b
  9733  002DAA  D7D7               	goto	l4574
  9734                           
  9735                           ; BSR set to: 0
  9736                           
  9737                           ; BSR set to: 0
  9738  002DAC  C0AA  F08E         	movff	___ftdiv@f3,___ftpack@arg
  9739  002DB0  C0AB  F08F         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9740  002DB4  C0AC  F090         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9741  002DB8  C0AD  F091         	movff	___ftdiv@exp,___ftpack@exp
  9742  002DBC  C0AE  F092         	movff	___ftdiv@sign,___ftpack@sign
  9743  002DC0  ECF0  F019         	call	___ftpack	;wreg free
  9744  002DC4  C08E  F0A0         	movff	?___ftpack,?___ftdiv
  9745  002DC8  C08F  F0A1         	movff	?___ftpack+1,?___ftdiv+1
  9746  002DCC  C090  F0A2         	movff	?___ftpack+2,?___ftdiv+2
  9747  002DD0  0012               	return	
  9748  002DD2                     __end_of___ftdiv:
  9749                           	opt stack 0
  9750                           tblptru	equ	0xFF8
  9751                           tblptrh	equ	0xFF7
  9752                           tblptrl	equ	0xFF6
  9753                           tablat	equ	0xFF5
  9754                           prodh	equ	0xFF4
  9755                           prodl	equ	0xFF3
  9756                           intcon	equ	0xFF2
  9757                           postinc0	equ	0xFEE
  9758                           wreg	equ	0xFE8
  9759                           postdec1	equ	0xFE5
  9760                           fsr1l	equ	0xFE1
  9761                           indf2	equ	0xFDF
  9762                           postinc2	equ	0xFDE
  9763                           postdec2	equ	0xFDD
  9764                           fsr2h	equ	0xFDA
  9765                           fsr2l	equ	0xFD9
  9766                           status	equ	0xFD8
  9767                           
  9768 ;; *************** function ___ftadd *****************
  9769 ;; Defined at:
  9770 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  9771 ;; Parameters:    Size  Location     Type
  9772 ;;  f1              3   72[BANK0 ] float 
  9773 ;;  f2              3   75[BANK0 ] float 
  9774 ;; Auto vars:     Size  Location     Type
  9775 ;;  exp1            1   83[BANK0 ] unsigned char 
  9776 ;;  exp2            1   82[BANK0 ] unsigned char 
  9777 ;;  sign            1   81[BANK0 ] unsigned char 
  9778 ;; Return value:  Size  Location     Type
  9779 ;;                  3   72[BANK0 ] float 
  9780 ;; Registers used:
  9781 ;;		wreg, status,2, status,0, cstack
  9782 ;; Tracked objects:
  9783 ;;		On entry : 0/0
  9784 ;;		On exit  : 0/0
  9785 ;;		Unchanged: 0/0
  9786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9787 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9788 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9789 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9790 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9791 ;;Total ram usage:       12 bytes
  9792 ;; Hardware stack levels used:    1
  9793 ;; Hardware stack levels required when called:    7
  9794 ;; This function calls:
  9795 ;;		___ftpack
  9796 ;; This function is called by:
  9797 ;;		_angleToPulse
  9798 ;;		_printf
  9799 ;;		___ftsub
  9800 ;; This function uses a non-reentrant model
  9801 ;;
  9802                           
  9803                           	psect	text32
  9804  002042                     __ptext32:
  9805                           	opt stack 0
  9806  002042                     ___ftadd:
  9807                           	opt stack 20
  9808                           
  9809                           ;incstack = 0
  9810  002042  C0CA  F0CE         	movff	___ftadd@f1+2,??___ftadd
  9811  002046  0100               	movlb	0	; () banked
  9812  002048  6BCF               	clrf	(??___ftadd+1)& (0+255),b
  9813  00204A  6BD0               	clrf	(??___ftadd+2)& (0+255),b
  9814  00204C  0100               	movlb	0	; () banked
  9815  00204E  35C9               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  9816  002050  0100               	movlb	0	; () banked
  9817  002052  37CE               	rlcf	??___ftadd& (0+255),f,b
  9818  002054  E301               	bnc	u3571
  9819  002056  81CF               	bsf	(??___ftadd+1)& (0+255),0,b
  9820  002058                     u3571:
  9821  002058  0100               	movlb	0	; () banked
  9822  00205A  51CE               	movf	??___ftadd& (0+255),w,b
  9823  00205C  0100               	movlb	0	; () banked
  9824  00205E  6FD3               	movwf	___ftadd@exp1& (0+255),b
  9825  002060  C0CD  F0CE         	movff	___ftadd@f2+2,??___ftadd
  9826  002064  0100               	movlb	0	; () banked
  9827  002066  6BCF               	clrf	(??___ftadd+1)& (0+255),b
  9828  002068  6BD0               	clrf	(??___ftadd+2)& (0+255),b
  9829  00206A  0100               	movlb	0	; () banked
  9830  00206C  35CC               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  9831  00206E  0100               	movlb	0	; () banked
  9832  002070  37CE               	rlcf	??___ftadd& (0+255),f,b
  9833  002072  E301               	bnc	u3581
  9834  002074  81CF               	bsf	(??___ftadd+1)& (0+255),0,b
  9835  002076                     u3581:
  9836  002076  0100               	movlb	0	; () banked
  9837  002078  51CE               	movf	??___ftadd& (0+255),w,b
  9838  00207A  0100               	movlb	0	; () banked
  9839  00207C  6FD2               	movwf	___ftadd@exp2& (0+255),b
  9840                           
  9841                           ; BSR set to: 0
  9842  00207E  0100               	movlb	0	; () banked
  9843  002080  51D3               	movf	___ftadd@exp1& (0+255),w,b
  9844  002082  0100               	movlb	0	; () banked
  9845  002084  B4D8               	btfsc	status,2,c
  9846  002086  D011               	goto	l983
  9847                           
  9848                           ; BSR set to: 0
  9849  002088  0100               	movlb	0	; () banked
  9850  00208A  51D2               	movf	___ftadd@exp2& (0+255),w,b
  9851  00208C  0100               	movlb	0	; () banked
  9852  00208E  5DD3               	subwf	___ftadd@exp1& (0+255),w,b
  9853  002090  B0D8               	btfsc	status,0,c
  9854  002092  D012               	goto	l4134
  9855                           
  9856                           ; BSR set to: 0
  9857  002094  0100               	movlb	0	; () banked
  9858  002096  51D3               	movf	___ftadd@exp1& (0+255),w,b
  9859  002098  0800               	sublw	0
  9860  00209A  0100               	movlb	0	; () banked
  9861  00209C  25D2               	addwf	___ftadd@exp2& (0+255),w,b
  9862  00209E  0100               	movlb	0	; () banked
  9863  0020A0  6FCE               	movwf	??___ftadd& (0+255),b
  9864  0020A2  0E18               	movlw	24
  9865  0020A4  0100               	movlb	0	; () banked
  9866  0020A6  65CE               	cpfsgt	??___ftadd& (0+255),b
  9867  0020A8  D007               	goto	l4134
  9868  0020AA                     l983:
  9869                           
  9870                           ; BSR set to: 0
  9871  0020AA  C0CB  F0C8         	movff	___ftadd@f2,?___ftadd
  9872  0020AE  C0CC  F0C9         	movff	___ftadd@f2+1,?___ftadd+1
  9873  0020B2  C0CD  F0CA         	movff	___ftadd@f2+2,?___ftadd+2
  9874  0020B6  0012               	return	
  9875  0020B8                     l4134:
  9876                           
  9877                           ; BSR set to: 0
  9878  0020B8  0100               	movlb	0	; () banked
  9879  0020BA  51D2               	movf	___ftadd@exp2& (0+255),w,b
  9880  0020BC  0100               	movlb	0	; () banked
  9881  0020BE  B4D8               	btfsc	status,2,c
  9882  0020C0  D011               	goto	l987
  9883                           
  9884                           ; BSR set to: 0
  9885  0020C2  0100               	movlb	0	; () banked
  9886  0020C4  51D3               	movf	___ftadd@exp1& (0+255),w,b
  9887  0020C6  0100               	movlb	0	; () banked
  9888  0020C8  5DD2               	subwf	___ftadd@exp2& (0+255),w,b
  9889  0020CA  B0D8               	btfsc	status,0,c
  9890  0020CC  D012               	goto	l4140
  9891                           
  9892                           ; BSR set to: 0
  9893  0020CE  0100               	movlb	0	; () banked
  9894  0020D0  51D2               	movf	___ftadd@exp2& (0+255),w,b
  9895  0020D2  0800               	sublw	0
  9896  0020D4  0100               	movlb	0	; () banked
  9897  0020D6  25D3               	addwf	___ftadd@exp1& (0+255),w,b
  9898  0020D8  0100               	movlb	0	; () banked
  9899  0020DA  6FCE               	movwf	??___ftadd& (0+255),b
  9900  0020DC  0E18               	movlw	24
  9901  0020DE  0100               	movlb	0	; () banked
  9902  0020E0  65CE               	cpfsgt	??___ftadd& (0+255),b
  9903  0020E2  D007               	goto	l4140
  9904  0020E4                     l987:
  9905                           
  9906                           ; BSR set to: 0
  9907  0020E4  C0C8  F0C8         	movff	___ftadd@f1,?___ftadd
  9908  0020E8  C0C9  F0C9         	movff	___ftadd@f1+1,?___ftadd+1
  9909  0020EC  C0CA  F0CA         	movff	___ftadd@f1+2,?___ftadd+2
  9910  0020F0  0012               	return	
  9911  0020F2                     l4140:
  9912                           
  9913                           ; BSR set to: 0
  9914  0020F2  0E06               	movlw	6
  9915  0020F4  0100               	movlb	0	; () banked
  9916  0020F6  6FD1               	movwf	___ftadd@sign& (0+255),b
  9917                           
  9918                           ; BSR set to: 0
  9919  0020F8  0100               	movlb	0	; () banked
  9920  0020FA  AFCA               	btfss	(___ftadd@f1+2)& (0+255),7,b
  9921  0020FC  D002               	goto	l4146
  9922                           
  9923                           ; BSR set to: 0
  9924  0020FE  0100               	movlb	0	; () banked
  9925  002100  8FD1               	bsf	___ftadd@sign& (0+255),7,b
  9926  002102                     l4146:
  9927                           
  9928                           ; BSR set to: 0
  9929  002102  0100               	movlb	0	; () banked
  9930  002104  AFCD               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9931  002106  D002               	goto	l989
  9932                           
  9933                           ; BSR set to: 0
  9934  002108  0100               	movlb	0	; () banked
  9935  00210A  8DD1               	bsf	___ftadd@sign& (0+255),6,b
  9936  00210C                     l989:
  9937                           
  9938                           ; BSR set to: 0
  9939  00210C  0100               	movlb	0	; () banked
  9940  00210E  8FC9               	bsf	(___ftadd@f1+1)& (0+255),7,b
  9941                           
  9942                           ; BSR set to: 0
  9943  002110  0EFF               	movlw	255
  9944  002112  0100               	movlb	0	; () banked
  9945  002114  17C8               	andwf	___ftadd@f1& (0+255),f,b
  9946  002116  0EFF               	movlw	255
  9947  002118  0100               	movlb	0	; () banked
  9948  00211A  17C9               	andwf	(___ftadd@f1+1)& (0+255),f,b
  9949  00211C  0E00               	movlw	0
  9950  00211E  0100               	movlb	0	; () banked
  9951  002120  17CA               	andwf	(___ftadd@f1+2)& (0+255),f,b
  9952  002122  0100               	movlb	0	; () banked
  9953  002124  8FCC               	bsf	(___ftadd@f2+1)& (0+255),7,b
  9954                           
  9955                           ; BSR set to: 0
  9956  002126  0EFF               	movlw	255
  9957  002128  0100               	movlb	0	; () banked
  9958  00212A  17CB               	andwf	___ftadd@f2& (0+255),f,b
  9959  00212C  0EFF               	movlw	255
  9960  00212E  0100               	movlb	0	; () banked
  9961  002130  17CC               	andwf	(___ftadd@f2+1)& (0+255),f,b
  9962  002132  0E00               	movlw	0
  9963  002134  0100               	movlb	0	; () banked
  9964  002136  17CD               	andwf	(___ftadd@f2+2)& (0+255),f,b
  9965                           
  9966                           ; BSR set to: 0
  9967  002138  0100               	movlb	0	; () banked
  9968  00213A  51D2               	movf	___ftadd@exp2& (0+255),w,b
  9969  00213C  0100               	movlb	0	; () banked
  9970  00213E  5DD3               	subwf	___ftadd@exp1& (0+255),w,b
  9971  002140  B0D8               	btfsc	status,0,c
  9972  002142  D025               	goto	l4166
  9973  002144                     l4156:
  9974                           
  9975                           ; BSR set to: 0
  9976  002144  0100               	movlb	0	; () banked
  9977  002146  90D8               	bcf	status,0,c
  9978  002148  37CB               	rlcf	___ftadd@f2& (0+255),f,b
  9979  00214A  37CC               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  9980  00214C  37CD               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  9981  00214E  0100               	movlb	0	; () banked
  9982  002150  07D2               	decf	___ftadd@exp2& (0+255),f,b
  9983                           
  9984                           ; BSR set to: 0
  9985  002152  0100               	movlb	0	; () banked
  9986  002154  51D3               	movf	___ftadd@exp1& (0+255),w,b
  9987  002156  0100               	movlb	0	; () banked
  9988  002158  19D2               	xorwf	___ftadd@exp2& (0+255),w,b
  9989  00215A  B4D8               	btfsc	status,2,c
  9990  00215C  D011               	goto	l4164
  9991                           
  9992                           ; BSR set to: 0
  9993  00215E  0100               	movlb	0	; () banked
  9994  002160  07D1               	decf	___ftadd@sign& (0+255),f,b
  9995  002162  C0D1  F0CE         	movff	___ftadd@sign,??___ftadd
  9996  002166  0E07               	movlw	7
  9997  002168  0100               	movlb	0	; () banked
  9998  00216A  17CE               	andwf	??___ftadd& (0+255),f,b
  9999  00216C  B4D8               	btfsc	status,2,c
 10000  00216E  D008               	goto	l4164
 10001  002170  D7E9               	goto	l4156
 10002  002172                     l4162:
 10003                           
 10004                           ; BSR set to: 0
 10005  002172  0100               	movlb	0	; () banked
 10006  002174  90D8               	bcf	status,0,c
 10007  002176  33CA               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10008  002178  33C9               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10009  00217A  33C8               	rrcf	___ftadd@f1& (0+255),f,b
 10010  00217C  0100               	movlb	0	; () banked
 10011  00217E  2BD3               	incf	___ftadd@exp1& (0+255),f,b
 10012  002180                     l4164:
 10013                           
 10014                           ; BSR set to: 0
 10015  002180  0100               	movlb	0	; () banked
 10016  002182  51D2               	movf	___ftadd@exp2& (0+255),w,b
 10017  002184  0100               	movlb	0	; () banked
 10018  002186  19D3               	xorwf	___ftadd@exp1& (0+255),w,b
 10019  002188  B4D8               	btfsc	status,2,c
 10020  00218A  D02B               	goto	l998
 10021  00218C  D7F2               	goto	l4162
 10022  00218E                     l4166:
 10023                           
 10024                           ; BSR set to: 0
 10025  00218E  0100               	movlb	0	; () banked
 10026  002190  51D3               	movf	___ftadd@exp1& (0+255),w,b
 10027  002192  0100               	movlb	0	; () banked
 10028  002194  5DD2               	subwf	___ftadd@exp2& (0+255),w,b
 10029  002196  B0D8               	btfsc	status,0,c
 10030  002198  D024               	goto	l998
 10031  00219A                     l4168:
 10032                           
 10033                           ; BSR set to: 0
 10034  00219A  0100               	movlb	0	; () banked
 10035  00219C  90D8               	bcf	status,0,c
 10036  00219E  37C8               	rlcf	___ftadd@f1& (0+255),f,b
 10037  0021A0  37C9               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10038  0021A2  37CA               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10039  0021A4  0100               	movlb	0	; () banked
 10040  0021A6  07D3               	decf	___ftadd@exp1& (0+255),f,b
 10041                           
 10042                           ; BSR set to: 0
 10043  0021A8  0100               	movlb	0	; () banked
 10044  0021AA  51D3               	movf	___ftadd@exp1& (0+255),w,b
 10045  0021AC  0100               	movlb	0	; () banked
 10046  0021AE  19D2               	xorwf	___ftadd@exp2& (0+255),w,b
 10047  0021B0  B4D8               	btfsc	status,2,c
 10048  0021B2  D011               	goto	l4176
 10049                           
 10050                           ; BSR set to: 0
 10051  0021B4  0100               	movlb	0	; () banked
 10052  0021B6  07D1               	decf	___ftadd@sign& (0+255),f,b
 10053  0021B8  C0D1  F0CE         	movff	___ftadd@sign,??___ftadd
 10054  0021BC  0E07               	movlw	7
 10055  0021BE  0100               	movlb	0	; () banked
 10056  0021C0  17CE               	andwf	??___ftadd& (0+255),f,b
 10057  0021C2  B4D8               	btfsc	status,2,c
 10058  0021C4  D008               	goto	l4176
 10059  0021C6  D7E9               	goto	l4168
 10060  0021C8                     l4174:
 10061                           
 10062                           ; BSR set to: 0
 10063  0021C8  0100               	movlb	0	; () banked
 10064  0021CA  90D8               	bcf	status,0,c
 10065  0021CC  33CD               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10066  0021CE  33CC               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10067  0021D0  33CB               	rrcf	___ftadd@f2& (0+255),f,b
 10068  0021D2  0100               	movlb	0	; () banked
 10069  0021D4  2BD2               	incf	___ftadd@exp2& (0+255),f,b
 10070  0021D6                     l4176:
 10071                           
 10072                           ; BSR set to: 0
 10073  0021D6  0100               	movlb	0	; () banked
 10074  0021D8  51D2               	movf	___ftadd@exp2& (0+255),w,b
 10075  0021DA  0100               	movlb	0	; () banked
 10076  0021DC  19D3               	xorwf	___ftadd@exp1& (0+255),w,b
 10077  0021DE  A4D8               	btfss	status,2,c
 10078  0021E0  D7F3               	goto	l4174
 10079  0021E2                     l998:
 10080                           
 10081                           ; BSR set to: 0
 10082  0021E2  0100               	movlb	0	; () banked
 10083  0021E4  AFD1               	btfss	___ftadd@sign& (0+255),7,b
 10084  0021E6  D012               	goto	l1007
 10085                           
 10086                           ; BSR set to: 0
 10087  0021E8  0EFF               	movlw	255
 10088  0021EA  0100               	movlb	0	; () banked
 10089  0021EC  1BC8               	xorwf	___ftadd@f1& (0+255),f,b
 10090  0021EE  0EFF               	movlw	255
 10091  0021F0  0100               	movlb	0	; () banked
 10092  0021F2  1BC9               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 10093  0021F4  0EFF               	movlw	255
 10094  0021F6  0100               	movlb	0	; () banked
 10095  0021F8  1BCA               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 10096  0021FA  0E01               	movlw	1
 10097  0021FC  0100               	movlb	0	; () banked
 10098  0021FE  27C8               	addwf	___ftadd@f1& (0+255),f,b
 10099  002200  0E00               	movlw	0
 10100  002202  0100               	movlb	0	; () banked
 10101  002204  23C9               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10102  002206  0E00               	movlw	0
 10103  002208  0100               	movlb	0	; () banked
 10104  00220A  23CA               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10105  00220C                     l1007:
 10106                           
 10107                           ; BSR set to: 0
 10108  00220C  0100               	movlb	0	; () banked
 10109  00220E  ADD1               	btfss	___ftadd@sign& (0+255),6,b
 10110  002210  D012               	goto	l4182
 10111                           
 10112                           ; BSR set to: 0
 10113  002212  0EFF               	movlw	255
 10114  002214  0100               	movlb	0	; () banked
 10115  002216  1BCB               	xorwf	___ftadd@f2& (0+255),f,b
 10116  002218  0EFF               	movlw	255
 10117  00221A  0100               	movlb	0	; () banked
 10118  00221C  1BCC               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10119  00221E  0EFF               	movlw	255
 10120  002220  0100               	movlb	0	; () banked
 10121  002222  1BCD               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10122  002224  0E01               	movlw	1
 10123  002226  0100               	movlb	0	; () banked
 10124  002228  27CB               	addwf	___ftadd@f2& (0+255),f,b
 10125  00222A  0E00               	movlw	0
 10126  00222C  0100               	movlb	0	; () banked
 10127  00222E  23CC               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10128  002230  0E00               	movlw	0
 10129  002232  0100               	movlb	0	; () banked
 10130  002234  23CD               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10131  002236                     l4182:
 10132                           
 10133                           ; BSR set to: 0
 10134  002236  0E00               	movlw	0
 10135  002238  0100               	movlb	0	; () banked
 10136  00223A  6FD1               	movwf	___ftadd@sign& (0+255),b
 10137                           
 10138                           ; BSR set to: 0
 10139  00223C  0100               	movlb	0	; () banked
 10140  00223E  51C8               	movf	___ftadd@f1& (0+255),w,b
 10141  002240  0100               	movlb	0	; () banked
 10142  002242  27CB               	addwf	___ftadd@f2& (0+255),f,b
 10143  002244  0100               	movlb	0	; () banked
 10144  002246  51C9               	movf	(___ftadd@f1+1)& (0+255),w,b
 10145  002248  0100               	movlb	0	; () banked
 10146  00224A  23CC               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10147  00224C  0100               	movlb	0	; () banked
 10148  00224E  51CA               	movf	(___ftadd@f1+2)& (0+255),w,b
 10149  002250  0100               	movlb	0	; () banked
 10150  002252  23CD               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10151                           
 10152                           ; BSR set to: 0
 10153  002254  0100               	movlb	0	; () banked
 10154  002256  AFCD               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10155  002258  D015               	goto	l4192
 10156                           
 10157                           ; BSR set to: 0
 10158  00225A  0EFF               	movlw	255
 10159  00225C  0100               	movlb	0	; () banked
 10160  00225E  1BCB               	xorwf	___ftadd@f2& (0+255),f,b
 10161  002260  0EFF               	movlw	255
 10162  002262  0100               	movlb	0	; () banked
 10163  002264  1BCC               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10164  002266  0EFF               	movlw	255
 10165  002268  0100               	movlb	0	; () banked
 10166  00226A  1BCD               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10167  00226C  0E01               	movlw	1
 10168  00226E  0100               	movlb	0	; () banked
 10169  002270  27CB               	addwf	___ftadd@f2& (0+255),f,b
 10170  002272  0E00               	movlw	0
 10171  002274  0100               	movlb	0	; () banked
 10172  002276  23CC               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10173  002278  0E00               	movlw	0
 10174  00227A  0100               	movlb	0	; () banked
 10175  00227C  23CD               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10176                           
 10177                           ; BSR set to: 0
 10178  00227E  0E01               	movlw	1
 10179  002280  0100               	movlb	0	; () banked
 10180  002282  6FD1               	movwf	___ftadd@sign& (0+255),b
 10181  002284                     l4192:
 10182                           
 10183                           ; BSR set to: 0
 10184  002284  C0CB  F08E         	movff	___ftadd@f2,___ftpack@arg
 10185  002288  C0CC  F08F         	movff	___ftadd@f2+1,___ftpack@arg+1
 10186  00228C  C0CD  F090         	movff	___ftadd@f2+2,___ftpack@arg+2
 10187  002290  C0D3  F091         	movff	___ftadd@exp1,___ftpack@exp
 10188  002294  C0D1  F092         	movff	___ftadd@sign,___ftpack@sign
 10189  002298  ECF0  F019         	call	___ftpack	;wreg free
 10190  00229C  C08E  F0C8         	movff	?___ftpack,?___ftadd
 10191  0022A0  C08F  F0C9         	movff	?___ftpack+1,?___ftadd+1
 10192  0022A4  C090  F0CA         	movff	?___ftpack+2,?___ftadd+2
 10193  0022A8  0012               	return	
 10194  0022AA                     __end_of___ftadd:
 10195                           	opt stack 0
 10196                           tblptru	equ	0xFF8
 10197                           tblptrh	equ	0xFF7
 10198                           tblptrl	equ	0xFF6
 10199                           tablat	equ	0xFF5
 10200                           prodh	equ	0xFF4
 10201                           prodl	equ	0xFF3
 10202                           intcon	equ	0xFF2
 10203                           postinc0	equ	0xFEE
 10204                           wreg	equ	0xFE8
 10205                           postdec1	equ	0xFE5
 10206                           fsr1l	equ	0xFE1
 10207                           indf2	equ	0xFDF
 10208                           postinc2	equ	0xFDE
 10209                           postdec2	equ	0xFDD
 10210                           fsr2h	equ	0xFDA
 10211                           fsr2l	equ	0xFD9
 10212                           status	equ	0xFD8
 10213                           
 10214 ;; *************** function ___awtoft *****************
 10215 ;; Defined at:
 10216 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 10217 ;; Parameters:    Size  Location     Type
 10218 ;;  c               2   22[BANK0 ] int 
 10219 ;; Auto vars:     Size  Location     Type
 10220 ;;  sign            1   25[BANK0 ] unsigned char 
 10221 ;; Return value:  Size  Location     Type
 10222 ;;                  3   22[BANK0 ] float 
 10223 ;; Registers used:
 10224 ;;		wreg, status,2, status,0, cstack
 10225 ;; Tracked objects:
 10226 ;;		On entry : 0/0
 10227 ;;		On exit  : 0/0
 10228 ;;		Unchanged: 0/0
 10229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10230 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10231 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10233 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10234 ;;Total ram usage:        4 bytes
 10235 ;; Hardware stack levels used:    1
 10236 ;; Hardware stack levels required when called:    7
 10237 ;; This function calls:
 10238 ;;		___ftpack
 10239 ;; This function is called by:
 10240 ;;		_angleToPulse
 10241 ;; This function uses a non-reentrant model
 10242 ;;
 10243                           
 10244                           	psect	text33
 10245  004964                     __ptext33:
 10246                           	opt stack 0
 10247  004964                     ___awtoft:
 10248                           	opt stack 20
 10249                           
 10250                           ;incstack = 0
 10251  004964  0E00               	movlw	0
 10252  004966  0100               	movlb	0	; () banked
 10253  004968  6F99               	movwf	___awtoft@sign& (0+255),b
 10254                           
 10255                           ; BSR set to: 0
 10256  00496A  0100               	movlb	0	; () banked
 10257  00496C  AF97               	btfss	(___awtoft@c+1)& (0+255),7,b
 10258  00496E  D008               	goto	l4604
 10259                           
 10260                           ; BSR set to: 0
 10261  004970  0100               	movlb	0	; () banked
 10262  004972  6D96               	negf	___awtoft@c& (0+255),b
 10263  004974  1F97               	comf	(___awtoft@c+1)& (0+255),f,b
 10264  004976  B0D8               	btfsc	status,0,c
 10265  004978  2B97               	incf	(___awtoft@c+1)& (0+255),f,b
 10266                           
 10267                           ; BSR set to: 0
 10268  00497A  0E01               	movlw	1
 10269  00497C  0100               	movlb	0	; () banked
 10270  00497E  6F99               	movwf	___awtoft@sign& (0+255),b
 10271  004980                     l4604:
 10272                           
 10273                           ; BSR set to: 0
 10274  004980  C096  F08E         	movff	___awtoft@c,___ftpack@arg
 10275  004984  C097  F08F         	movff	___awtoft@c+1,___ftpack@arg+1
 10276  004988  0100               	movlb	0	; () banked
 10277  00498A  6B90               	clrf	(___ftpack@arg+2)& (0+255),b
 10278  00498C  0E8E               	movlw	142
 10279  00498E  0100               	movlb	0	; () banked
 10280  004990  6F91               	movwf	___ftpack@exp& (0+255),b
 10281  004992  C099  F092         	movff	___awtoft@sign,___ftpack@sign
 10282  004996  ECF0  F019         	call	___ftpack	;wreg free
 10283  00499A  C08E  F096         	movff	?___ftpack,?___awtoft
 10284  00499E  C08F  F097         	movff	?___ftpack+1,?___awtoft+1
 10285  0049A2  C090  F098         	movff	?___ftpack+2,?___awtoft+2
 10286  0049A6  0012               	return	
 10287  0049A8                     __end_of___awtoft:
 10288                           	opt stack 0
 10289                           tblptru	equ	0xFF8
 10290                           tblptrh	equ	0xFF7
 10291                           tblptrl	equ	0xFF6
 10292                           tablat	equ	0xFF5
 10293                           prodh	equ	0xFF4
 10294                           prodl	equ	0xFF3
 10295                           intcon	equ	0xFF2
 10296                           postinc0	equ	0xFEE
 10297                           wreg	equ	0xFE8
 10298                           postdec1	equ	0xFE5
 10299                           fsr1l	equ	0xFE1
 10300                           indf2	equ	0xFDF
 10301                           postinc2	equ	0xFDE
 10302                           postdec2	equ	0xFDD
 10303                           fsr2h	equ	0xFDA
 10304                           fsr2l	equ	0xFD9
 10305                           status	equ	0xFD8
 10306                           
 10307 ;; *************** function ___altoft *****************
 10308 ;; Defined at:
 10309 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 10310 ;; Parameters:    Size  Location     Type
 10311 ;;  c               4   22[BANK0 ] long 
 10312 ;; Auto vars:     Size  Location     Type
 10313 ;;  sign            1   31[BANK0 ] unsigned char 
 10314 ;;  exp             1   30[BANK0 ] unsigned char 
 10315 ;; Return value:  Size  Location     Type
 10316 ;;                  3   22[BANK0 ] float 
 10317 ;; Registers used:
 10318 ;;		wreg, status,2, status,0, cstack
 10319 ;; Tracked objects:
 10320 ;;		On entry : 0/0
 10321 ;;		On exit  : 0/0
 10322 ;;		Unchanged: 0/0
 10323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10324 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10325 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10326 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10327 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10328 ;;Total ram usage:       10 bytes
 10329 ;; Hardware stack levels used:    1
 10330 ;; Hardware stack levels required when called:    7
 10331 ;; This function calls:
 10332 ;;		___ftpack
 10333 ;; This function is called by:
 10334 ;;		_sortBattery
 10335 ;;		_angleToPulse
 10336 ;;		_testFrequency
 10337 ;; This function uses a non-reentrant model
 10338 ;;
 10339                           
 10340                           	psect	text34
 10341  00407C                     __ptext34:
 10342                           	opt stack 0
 10343  00407C                     ___altoft:
 10344                           	opt stack 20
 10345                           
 10346                           ;incstack = 0
 10347  00407C  0E00               	movlw	0
 10348  00407E  0100               	movlb	0	; () banked
 10349  004080  6F9F               	movwf	___altoft@sign& (0+255),b
 10350  004082  0E8E               	movlw	142
 10351  004084  0100               	movlb	0	; () banked
 10352  004086  6F9E               	movwf	___altoft@exp& (0+255),b
 10353                           
 10354                           ; BSR set to: 0
 10355  004088  0100               	movlb	0	; () banked
 10356  00408A  AF99               	btfss	(___altoft@c+3)& (0+255),7,b
 10357  00408C  D015               	goto	l4536
 10358                           
 10359                           ; BSR set to: 0
 10360  00408E  0100               	movlb	0	; () banked
 10361  004090  1F99               	comf	(___altoft@c+3)& (0+255),f,b
 10362  004092  1F98               	comf	(___altoft@c+2)& (0+255),f,b
 10363  004094  1F97               	comf	(___altoft@c+1)& (0+255),f,b
 10364  004096  6D96               	negf	___altoft@c& (0+255),b
 10365  004098  0E00               	movlw	0
 10366  00409A  2397               	addwfc	(___altoft@c+1)& (0+255),f,b
 10367  00409C  2398               	addwfc	(___altoft@c+2)& (0+255),f,b
 10368  00409E  2399               	addwfc	(___altoft@c+3)& (0+255),f,b
 10369                           
 10370                           ; BSR set to: 0
 10371  0040A0  0E01               	movlw	1
 10372  0040A2  0100               	movlb	0	; () banked
 10373  0040A4  6F9F               	movwf	___altoft@sign& (0+255),b
 10374                           
 10375                           ; BSR set to: 0
 10376  0040A6  D008               	goto	l4536
 10377  0040A8                     l4534:
 10378                           
 10379                           ; BSR set to: 0
 10380  0040A8  0100               	movlb	0	; () banked
 10381  0040AA  90D8               	bcf	status,0,c
 10382  0040AC  3399               	rrcf	(___altoft@c+3)& (0+255),f,b
 10383  0040AE  3398               	rrcf	(___altoft@c+2)& (0+255),f,b
 10384  0040B0  3397               	rrcf	(___altoft@c+1)& (0+255),f,b
 10385  0040B2  3396               	rrcf	___altoft@c& (0+255),f,b
 10386  0040B4  0100               	movlb	0	; () banked
 10387  0040B6  2B9E               	incf	___altoft@exp& (0+255),f,b
 10388  0040B8                     l4536:
 10389                           
 10390                           ; BSR set to: 0
 10391  0040B8  0E00               	movlw	0
 10392  0040BA  0100               	movlb	0	; () banked
 10393  0040BC  1596               	andwf	___altoft@c& (0+255),w,b
 10394  0040BE  0100               	movlb	0	; () banked
 10395  0040C0  6F9A               	movwf	??___altoft& (0+255),b
 10396  0040C2  0E00               	movlw	0
 10397  0040C4  0100               	movlb	0	; () banked
 10398  0040C6  1597               	andwf	(___altoft@c+1)& (0+255),w,b
 10399  0040C8  0100               	movlb	0	; () banked
 10400  0040CA  6F9B               	movwf	(??___altoft+1)& (0+255),b
 10401  0040CC  0E00               	movlw	0
 10402  0040CE  0100               	movlb	0	; () banked
 10403  0040D0  1598               	andwf	(___altoft@c+2)& (0+255),w,b
 10404  0040D2  0100               	movlb	0	; () banked
 10405  0040D4  6F9C               	movwf	(??___altoft+2)& (0+255),b
 10406  0040D6  0EFF               	movlw	255
 10407  0040D8  0100               	movlb	0	; () banked
 10408  0040DA  1599               	andwf	(___altoft@c+3)& (0+255),w,b
 10409  0040DC  0100               	movlb	0	; () banked
 10410  0040DE  6F9D               	movwf	(??___altoft+3)& (0+255),b
 10411  0040E0  0100               	movlb	0	; () banked
 10412  0040E2  519A               	movf	??___altoft& (0+255),w,b
 10413  0040E4  0100               	movlb	0	; () banked
 10414  0040E6  119B               	iorwf	(??___altoft+1)& (0+255),w,b
 10415  0040E8  0100               	movlb	0	; () banked
 10416  0040EA  119C               	iorwf	(??___altoft+2)& (0+255),w,b
 10417  0040EC  0100               	movlb	0	; () banked
 10418  0040EE  119D               	iorwf	(??___altoft+3)& (0+255),w,b
 10419  0040F0  A4D8               	btfss	status,2,c
 10420  0040F2  D7DA               	goto	l4534
 10421                           
 10422                           ; BSR set to: 0
 10423                           
 10424                           ; BSR set to: 0
 10425  0040F4  C096  F08E         	movff	___altoft@c,___ftpack@arg
 10426  0040F8  C097  F08F         	movff	___altoft@c+1,___ftpack@arg+1
 10427  0040FC  C098  F090         	movff	___altoft@c+2,___ftpack@arg+2
 10428  004100  C09E  F091         	movff	___altoft@exp,___ftpack@exp
 10429  004104  C09F  F092         	movff	___altoft@sign,___ftpack@sign
 10430  004108  ECF0  F019         	call	___ftpack	;wreg free
 10431  00410C  C08E  F096         	movff	?___ftpack,?___altoft
 10432  004110  C08F  F097         	movff	?___ftpack+1,?___altoft+1
 10433  004114  C090  F098         	movff	?___ftpack+2,?___altoft+2
 10434  004118  0012               	return	
 10435  00411A                     __end_of___altoft:
 10436                           	opt stack 0
 10437                           tblptru	equ	0xFF8
 10438                           tblptrh	equ	0xFF7
 10439                           tblptrl	equ	0xFF6
 10440                           tablat	equ	0xFF5
 10441                           prodh	equ	0xFF4
 10442                           prodl	equ	0xFF3
 10443                           intcon	equ	0xFF2
 10444                           postinc0	equ	0xFEE
 10445                           wreg	equ	0xFE8
 10446                           postdec1	equ	0xFE5
 10447                           fsr1l	equ	0xFE1
 10448                           indf2	equ	0xFDF
 10449                           postinc2	equ	0xFDE
 10450                           postdec2	equ	0xFDD
 10451                           fsr2h	equ	0xFDA
 10452                           fsr2l	equ	0xFD9
 10453                           status	equ	0xFD8
 10454                           
 10455 ;; *************** function ___ftpack *****************
 10456 ;; Defined at:
 10457 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 10458 ;; Parameters:    Size  Location     Type
 10459 ;;  arg             3   14[BANK0 ] unsigned um
 10460 ;;  exp             1   17[BANK0 ] unsigned char 
 10461 ;;  sign            1   18[BANK0 ] unsigned char 
 10462 ;; Auto vars:     Size  Location     Type
 10463 ;;		None
 10464 ;; Return value:  Size  Location     Type
 10465 ;;                  3   14[BANK0 ] float 
 10466 ;; Registers used:
 10467 ;;		wreg, status,2, status,0
 10468 ;; Tracked objects:
 10469 ;;		On entry : 0/0
 10470 ;;		On exit  : 0/0
 10471 ;;		Unchanged: 0/0
 10472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10473 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10475 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10476 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10477 ;;Total ram usage:        8 bytes
 10478 ;; Hardware stack levels used:    1
 10479 ;; Hardware stack levels required when called:    6
 10480 ;; This function calls:
 10481 ;;		Nothing
 10482 ;; This function is called by:
 10483 ;;		___altoft
 10484 ;;		___awtoft
 10485 ;;		___ftadd
 10486 ;;		___ftdiv
 10487 ;;		___ftmul
 10488 ;;		___lltoft
 10489 ;; This function uses a non-reentrant model
 10490 ;;
 10491                           
 10492                           	psect	text35
 10493  0033E0                     __ptext35:
 10494                           	opt stack 0
 10495  0033E0                     ___ftpack:
 10496                           	opt stack 20
 10497                           
 10498                           ;incstack = 0
 10499  0033E0  0100               	movlb	0	; () banked
 10500  0033E2  5191               	movf	___ftpack@exp& (0+255),w,b
 10501  0033E4  0100               	movlb	0	; () banked
 10502  0033E6  B4D8               	btfsc	status,2,c
 10503  0033E8  D008               	goto	l4086
 10504                           
 10505                           ; BSR set to: 0
 10506  0033EA  0100               	movlb	0	; () banked
 10507  0033EC  518E               	movf	___ftpack@arg& (0+255),w,b
 10508  0033EE  0100               	movlb	0	; () banked
 10509  0033F0  118F               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 10510  0033F2  0100               	movlb	0	; () banked
 10511  0033F4  1190               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 10512  0033F6  A4D8               	btfss	status,2,c
 10513  0033F8  D011               	goto	l4092
 10514  0033FA                     l4086:
 10515                           
 10516                           ; BSR set to: 0
 10517  0033FA  0E00               	movlw	0
 10518  0033FC  0100               	movlb	0	; () banked
 10519  0033FE  6F8E               	movwf	?___ftpack& (0+255),b
 10520  003400  0E00               	movlw	0
 10521  003402  0100               	movlb	0	; () banked
 10522  003404  6F8F               	movwf	(?___ftpack+1)& (0+255),b
 10523  003406  0E00               	movlw	0
 10524  003408  0100               	movlb	0	; () banked
 10525  00340A  6F90               	movwf	(?___ftpack+2)& (0+255),b
 10526                           
 10527                           ; BSR set to: 0
 10528  00340C  0012               	return	
 10529  00340E                     l4090:
 10530                           
 10531                           ; BSR set to: 0
 10532  00340E  0100               	movlb	0	; () banked
 10533  003410  2B91               	incf	___ftpack@exp& (0+255),f,b
 10534  003412  0100               	movlb	0	; () banked
 10535  003414  90D8               	bcf	status,0,c
 10536  003416  3390               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 10537  003418  338F               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 10538  00341A  338E               	rrcf	___ftpack@arg& (0+255),f,b
 10539  00341C                     l4092:
 10540                           
 10541                           ; BSR set to: 0
 10542  00341C  0E00               	movlw	0
 10543  00341E  0100               	movlb	0	; () banked
 10544  003420  158E               	andwf	___ftpack@arg& (0+255),w,b
 10545  003422  0100               	movlb	0	; () banked
 10546  003424  6F93               	movwf	??___ftpack& (0+255),b
 10547  003426  0E00               	movlw	0
 10548  003428  0100               	movlb	0	; () banked
 10549  00342A  158F               	andwf	(___ftpack@arg+1)& (0+255),w,b
 10550  00342C  0100               	movlb	0	; () banked
 10551  00342E  6F94               	movwf	(??___ftpack+1)& (0+255),b
 10552  003430  0EFE               	movlw	254
 10553  003432  0100               	movlb	0	; () banked
 10554  003434  1590               	andwf	(___ftpack@arg+2)& (0+255),w,b
 10555  003436  0100               	movlb	0	; () banked
 10556  003438  6F95               	movwf	(??___ftpack+2)& (0+255),b
 10557  00343A  0100               	movlb	0	; () banked
 10558  00343C  5193               	movf	??___ftpack& (0+255),w,b
 10559  00343E  0100               	movlb	0	; () banked
 10560  003440  1194               	iorwf	(??___ftpack+1)& (0+255),w,b
 10561  003442  0100               	movlb	0	; () banked
 10562  003444  1195               	iorwf	(??___ftpack+2)& (0+255),w,b
 10563  003446  B4D8               	btfsc	status,2,c
 10564  003448  D011               	goto	l4098
 10565  00344A  D7E1               	goto	l4090
 10566  00344C                     l4094:
 10567                           
 10568                           ; BSR set to: 0
 10569  00344C  0100               	movlb	0	; () banked
 10570  00344E  2B91               	incf	___ftpack@exp& (0+255),f,b
 10571                           
 10572                           ; BSR set to: 0
 10573  003450  0E01               	movlw	1
 10574  003452  0100               	movlb	0	; () banked
 10575  003454  278E               	addwf	___ftpack@arg& (0+255),f,b
 10576  003456  0E00               	movlw	0
 10577  003458  0100               	movlb	0	; () banked
 10578  00345A  238F               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 10579  00345C  0E00               	movlw	0
 10580  00345E  0100               	movlb	0	; () banked
 10581  003460  2390               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 10582  003462  0100               	movlb	0	; () banked
 10583  003464  90D8               	bcf	status,0,c
 10584  003466  3390               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 10585  003468  338F               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 10586  00346A  338E               	rrcf	___ftpack@arg& (0+255),f,b
 10587  00346C                     l4098:
 10588                           
 10589                           ; BSR set to: 0
 10590  00346C  0E00               	movlw	0
 10591  00346E  0100               	movlb	0	; () banked
 10592  003470  158E               	andwf	___ftpack@arg& (0+255),w,b
 10593  003472  0100               	movlb	0	; () banked
 10594  003474  6F93               	movwf	??___ftpack& (0+255),b
 10595  003476  0E00               	movlw	0
 10596  003478  0100               	movlb	0	; () banked
 10597  00347A  158F               	andwf	(___ftpack@arg+1)& (0+255),w,b
 10598  00347C  0100               	movlb	0	; () banked
 10599  00347E  6F94               	movwf	(??___ftpack+1)& (0+255),b
 10600  003480  0EFF               	movlw	255
 10601  003482  0100               	movlb	0	; () banked
 10602  003484  1590               	andwf	(___ftpack@arg+2)& (0+255),w,b
 10603  003486  0100               	movlb	0	; () banked
 10604  003488  6F95               	movwf	(??___ftpack+2)& (0+255),b
 10605  00348A  0100               	movlb	0	; () banked
 10606  00348C  5193               	movf	??___ftpack& (0+255),w,b
 10607  00348E  0100               	movlb	0	; () banked
 10608  003490  1194               	iorwf	(??___ftpack+1)& (0+255),w,b
 10609  003492  0100               	movlb	0	; () banked
 10610  003494  1195               	iorwf	(??___ftpack+2)& (0+255),w,b
 10611  003496  B4D8               	btfsc	status,2,c
 10612  003498  D008               	goto	l4102
 10613  00349A  D7D8               	goto	l4094
 10614  00349C                     l4100:
 10615                           
 10616                           ; BSR set to: 0
 10617  00349C  0100               	movlb	0	; () banked
 10618  00349E  0791               	decf	___ftpack@exp& (0+255),f,b
 10619  0034A0  0100               	movlb	0	; () banked
 10620  0034A2  90D8               	bcf	status,0,c
 10621  0034A4  378E               	rlcf	___ftpack@arg& (0+255),f,b
 10622  0034A6  378F               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 10623  0034A8  3790               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 10624  0034AA                     l4102:
 10625                           
 10626                           ; BSR set to: 0
 10627  0034AA  0100               	movlb	0	; () banked
 10628  0034AC  BF8F               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 10629  0034AE  D004               	goto	l960
 10630                           
 10631                           ; BSR set to: 0
 10632  0034B0  0E02               	movlw	2
 10633  0034B2  0100               	movlb	0	; () banked
 10634  0034B4  6191               	cpfslt	___ftpack@exp& (0+255),b
 10635  0034B6  D7F2               	goto	l4100
 10636  0034B8                     l960:
 10637                           
 10638                           ; BSR set to: 0
 10639  0034B8  0100               	movlb	0	; () banked
 10640  0034BA  B191               	btfsc	___ftpack@exp& (0+255),0,b
 10641  0034BC  D002               	goto	l4108
 10642                           
 10643                           ; BSR set to: 0
 10644  0034BE  0100               	movlb	0	; () banked
 10645  0034C0  9F8F               	bcf	(___ftpack@arg+1)& (0+255),7,b
 10646  0034C2                     l4108:
 10647                           
 10648                           ; BSR set to: 0
 10649  0034C2  0100               	movlb	0	; () banked
 10650  0034C4  90D8               	bcf	status,0,c
 10651  0034C6  3391               	rrcf	___ftpack@exp& (0+255),f,b
 10652  0034C8  0100               	movlb	0	; () banked
 10653  0034CA  5191               	movf	___ftpack@exp& (0+255),w,b
 10654  0034CC  0100               	movlb	0	; () banked
 10655  0034CE  1390               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 10656                           
 10657                           ; BSR set to: 0
 10658  0034D0  0100               	movlb	0	; () banked
 10659  0034D2  5192               	movf	___ftpack@sign& (0+255),w,b
 10660  0034D4  0100               	movlb	0	; () banked
 10661  0034D6  B4D8               	btfsc	status,2,c
 10662  0034D8  D002               	goto	l4114
 10663                           
 10664                           ; BSR set to: 0
 10665  0034DA  0100               	movlb	0	; () banked
 10666  0034DC  8F90               	bsf	(___ftpack@arg+2)& (0+255),7,b
 10667  0034DE                     l4114:
 10668                           
 10669                           ; BSR set to: 0
 10670  0034DE  C08E  F08E         	movff	___ftpack@arg,?___ftpack
 10671  0034E2  C08F  F08F         	movff	___ftpack@arg+1,?___ftpack+1
 10672  0034E6  C090  F090         	movff	___ftpack@arg+2,?___ftpack+2
 10673  0034EA  0012               	return	
 10674  0034EC                     __end_of___ftpack:
 10675                           	opt stack 0
 10676                           tblptru	equ	0xFF8
 10677                           tblptrh	equ	0xFF7
 10678                           tblptrl	equ	0xFF6
 10679                           tablat	equ	0xFF5
 10680                           prodh	equ	0xFF4
 10681                           prodl	equ	0xFF3
 10682                           intcon	equ	0xFF2
 10683                           postinc0	equ	0xFEE
 10684                           wreg	equ	0xFE8
 10685                           postdec1	equ	0xFE5
 10686                           fsr1l	equ	0xFE1
 10687                           indf2	equ	0xFDF
 10688                           postinc2	equ	0xFDE
 10689                           postdec2	equ	0xFDD
 10690                           fsr2h	equ	0xFDA
 10691                           fsr2l	equ	0xFD9
 10692                           status	equ	0xFD8
 10693                           
 10694 ;; *************** function _initTimer *****************
 10695 ;; Defined at:
 10696 ;;		line 52 in file "timer.c"
 10697 ;; Parameters:    Size  Location     Type
 10698 ;;  timer           2   14[BANK0 ] int 
 10699 ;; Auto vars:     Size  Location     Type
 10700 ;;		None
 10701 ;; Return value:  Size  Location     Type
 10702 ;;                  1    wreg      void 
 10703 ;; Registers used:
 10704 ;;		wreg, status,2, status,0
 10705 ;; Tracked objects:
 10706 ;;		On entry : 0/0
 10707 ;;		On exit  : 0/0
 10708 ;;		Unchanged: 0/0
 10709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10710 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10712 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10713 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10714 ;;Total ram usage:        4 bytes
 10715 ;; Hardware stack levels used:    1
 10716 ;; Hardware stack levels required when called:    6
 10717 ;; This function calls:
 10718 ;;		Nothing
 10719 ;; This function is called by:
 10720 ;;		_initServo
 10721 ;;		_testFrequency
 10722 ;; This function uses a non-reentrant model
 10723 ;;
 10724                           
 10725                           	psect	text36
 10726  0048D0                     __ptext36:
 10727                           	opt stack 0
 10728  0048D0                     _initTimer:
 10729                           	opt stack 23
 10730                           
 10731                           ;timer.c: 53: switch(timer){
 10732                           
 10733                           ; BSR set to: 0
 10734                           ;incstack = 0
 10735  0048D0  D00D               	goto	l5446
 10736  0048D2                     l5430:
 10737                           
 10738                           ;timer.c: 55: T0CON = 0;
 10739  0048D2  0E00               	movlw	0
 10740  0048D4  6ED5               	movwf	4053,c	;volatile
 10741                           
 10742                           ;timer.c: 56: T0CON |= 1<<3;
 10743  0048D6  86D5               	bsf	4053,3,c	;volatile
 10744                           
 10745                           ;timer.c: 58: TMR0IE = 1;
 10746  0048D8  8AF2               	bsf	intcon,5,c	;volatile
 10747                           
 10748                           ;timer.c: 59: break;
 10749  0048DA  D01C               	goto	l378
 10750  0048DC                     l5436:
 10751                           
 10752                           ;timer.c: 61: T1CON = 0;
 10753  0048DC  0E00               	movlw	0
 10754  0048DE  6ECD               	movwf	4045,c	;volatile
 10755                           
 10756                           ;timer.c: 63: TMR1IE = 1;
 10757  0048E0  809D               	bsf	3997,0,c	;volatile
 10758                           
 10759                           ;timer.c: 64: break;
 10760  0048E2  D018               	goto	l378
 10761  0048E4                     l5440:
 10762                           
 10763                           ;timer.c: 66: T3CON = 0;
 10764  0048E4  0E00               	movlw	0
 10765  0048E6  6EB1               	movwf	4017,c	;volatile
 10766                           
 10767                           ;timer.c: 67: TMR3IE = 1;
 10768  0048E8  82A0               	bsf	4000,1,c	;volatile
 10769                           
 10770                           ;timer.c: 69: }
 10771                           
 10772                           ;timer.c: 68: break;
 10773  0048EA  D014               	goto	l378
 10774  0048EC                     l5446:
 10775  0048EC  C08E  F090         	movff	initTimer@timer,??_initTimer
 10776  0048F0  C08F  F091         	movff	initTimer@timer+1,??_initTimer+1
 10777                           
 10778                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10779                           ; Switch size 1, requested type "space"
 10780                           ; Number of cases is 1, Range of values is 0 to 0
 10781                           ; switch strategies available:
 10782                           ; Name         Instructions Cycles
 10783                           ; simple_byte            4     3 (average)
 10784                           ;	Chosen strategy is simple_byte
 10785  0048F4  0100               	movlb	0	; () banked
 10786  0048F6  5191               	movf	(??_initTimer+1)& (0+255),w,b
 10787  0048F8  0A00               	xorlw	0	; case 0
 10788  0048FA  A4D8               	btfss	status,2,c
 10789  0048FC  D00B               	goto	l378
 10790                           
 10791                           ; BSR set to: 0
 10792                           ; Switch size 1, requested type "space"
 10793                           ; Number of cases is 3, Range of values is 0 to 3
 10794                           ; switch strategies available:
 10795                           ; Name         Instructions Cycles
 10796                           ; simple_byte           10     6 (average)
 10797                           ;	Chosen strategy is simple_byte
 10798  0048FE  0100               	movlb	0	; () banked
 10799  004900  5190               	movf	??_initTimer& (0+255),w,b
 10800  004902  0A00               	xorlw	0	; case 0
 10801  004904  B4D8               	btfsc	status,2,c
 10802  004906  D7E5               	goto	l5430
 10803  004908  0A01               	xorlw	1	; case 1
 10804  00490A  B4D8               	btfsc	status,2,c
 10805  00490C  D7E7               	goto	l5436
 10806  00490E  0A02               	xorlw	2	; case 3
 10807  004910  B4D8               	btfsc	status,2,c
 10808  004912  D7E8               	goto	l5440
 10809  004914                     l378:
 10810                           
 10811                           ;timer.c: 70: PEIE = 1;
 10812  004914  8CF2               	bsf	intcon,6,c	;volatile
 10813                           
 10814                           ;timer.c: 71: (INTCONbits.GIE = 1);
 10815  004916  8EF2               	bsf	intcon,7,c	;volatile
 10816  004918  0012               	return		;funcret
 10817  00491A                     __end_of_initTimer:
 10818                           	opt stack 0
 10819                           tblptru	equ	0xFF8
 10820                           tblptrh	equ	0xFF7
 10821                           tblptrl	equ	0xFF6
 10822                           tablat	equ	0xFF5
 10823                           prodh	equ	0xFF4
 10824                           prodl	equ	0xFF3
 10825                           intcon	equ	0xFF2
 10826                           postinc0	equ	0xFEE
 10827                           wreg	equ	0xFE8
 10828                           postdec1	equ	0xFE5
 10829                           fsr1l	equ	0xFE1
 10830                           indf2	equ	0xFDF
 10831                           postinc2	equ	0xFDE
 10832                           postdec2	equ	0xFDD
 10833                           fsr2h	equ	0xFDA
 10834                           fsr2l	equ	0xFD9
 10835                           status	equ	0xFD8
 10836                           
 10837 ;; *************** function _initLCD *****************
 10838 ;; Defined at:
 10839 ;;		line 15 in file "lcd.c"
 10840 ;; Parameters:    Size  Location     Type
 10841 ;;		None
 10842 ;; Auto vars:     Size  Location     Type
 10843 ;;		None
 10844 ;; Return value:  Size  Location     Type
 10845 ;;                  1    wreg      void 
 10846 ;; Registers used:
 10847 ;;		wreg, status,2, status,0, cstack
 10848 ;; Tracked objects:
 10849 ;;		On entry : 0/0
 10850 ;;		On exit  : 0/0
 10851 ;;		Unchanged: 0/0
 10852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10855 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10856 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10857 ;;Total ram usage:        1 bytes
 10858 ;; Hardware stack levels used:    1
 10859 ;; Hardware stack levels required when called:    8
 10860 ;; This function calls:
 10861 ;;		_lcdInst
 10862 ;; This function is called by:
 10863 ;;		_main
 10864 ;; This function uses a non-reentrant model
 10865 ;;
 10866                           
 10867                           	psect	text37
 10868  00491A                     __ptext37:
 10869                           	opt stack 0
 10870  00491A                     _initLCD:
 10871                           	opt stack 22
 10872                           
 10873                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 10874                           
 10875                           ;incstack = 0
 10876  00491A  0E31               	movlw	49
 10877  00491C  0100               	movlb	0	; () banked
 10878  00491E  6F92               	movwf	??_initLCD& (0+255),b
 10879  004920  0EB2               	movlw	178
 10880  004922                     u7467:
 10881  004922  2EE8               	decfsz	wreg,f,c
 10882  004924  D7FE               	bra	u7467
 10883  004926  2F92               	decfsz	??_initLCD& (0+255),f,b
 10884  004928  D7FC               	bra	u7467
 10885  00492A  F000               	nop	
 10886                           
 10887                           ;lcd.c: 18: lcdInst(0b00110011);
 10888  00492C  0E33               	movlw	51
 10889  00492E  ECAF  F025         	call	_lcdInst
 10890                           
 10891                           ;lcd.c: 19: lcdInst(0b00110010);
 10892  004932  0E32               	movlw	50
 10893  004934  ECAF  F025         	call	_lcdInst
 10894                           
 10895                           ;lcd.c: 20: lcdInst(0b00101000);
 10896  004938  0E28               	movlw	40
 10897  00493A  ECAF  F025         	call	_lcdInst
 10898                           
 10899                           ;lcd.c: 21: lcdInst(0b00001111);
 10900  00493E  0E0F               	movlw	15
 10901  004940  ECAF  F025         	call	_lcdInst
 10902                           
 10903                           ;lcd.c: 22: lcdInst(0b00000110);
 10904  004944  0E06               	movlw	6
 10905  004946  ECAF  F025         	call	_lcdInst
 10906                           
 10907                           ;lcd.c: 23: lcdInst(0b00000001);
 10908  00494A  0E01               	movlw	1
 10909  00494C  ECAF  F025         	call	_lcdInst
 10910                           
 10911                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 10912  004950  0E31               	movlw	49
 10913  004952  0100               	movlb	0	; () banked
 10914  004954  6F92               	movwf	??_initLCD& (0+255),b
 10915  004956  0EB2               	movlw	178
 10916  004958                     u7477:
 10917  004958  2EE8               	decfsz	wreg,f,c
 10918  00495A  D7FE               	bra	u7477
 10919  00495C  2F92               	decfsz	??_initLCD& (0+255),f,b
 10920  00495E  D7FC               	bra	u7477
 10921  004960  F000               	nop	
 10922  004962  0012               	return		;funcret
 10923  004964                     __end_of_initLCD:
 10924                           	opt stack 0
 10925                           tblptru	equ	0xFF8
 10926                           tblptrh	equ	0xFF7
 10927                           tblptrl	equ	0xFF6
 10928                           tablat	equ	0xFF5
 10929                           prodh	equ	0xFF4
 10930                           prodl	equ	0xFF3
 10931                           intcon	equ	0xFF2
 10932                           postinc0	equ	0xFEE
 10933                           wreg	equ	0xFE8
 10934                           postdec1	equ	0xFE5
 10935                           fsr1l	equ	0xFE1
 10936                           indf2	equ	0xFDF
 10937                           postinc2	equ	0xFDE
 10938                           postdec2	equ	0xFDD
 10939                           fsr2h	equ	0xFDA
 10940                           fsr2l	equ	0xFD9
 10941                           status	equ	0xFD8
 10942                           
 10943 ;; *************** function _lcdInst *****************
 10944 ;; Defined at:
 10945 ;;		line 27 in file "lcd.c"
 10946 ;; Parameters:    Size  Location     Type
 10947 ;;  data            1    wreg     unsigned char 
 10948 ;; Auto vars:     Size  Location     Type
 10949 ;;  data            1   17[BANK0 ] unsigned char 
 10950 ;; Return value:  Size  Location     Type
 10951 ;;                  1    wreg      void 
 10952 ;; Registers used:
 10953 ;;		wreg, status,2, status,0, cstack
 10954 ;; Tracked objects:
 10955 ;;		On entry : 0/0
 10956 ;;		On exit  : 0/0
 10957 ;;		Unchanged: 0/0
 10958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10960 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10961 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10962 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10963 ;;Total ram usage:        2 bytes
 10964 ;; Hardware stack levels used:    1
 10965 ;; Hardware stack levels required when called:    7
 10966 ;; This function calls:
 10967 ;;		_lcdNibble
 10968 ;; This function is called by:
 10969 ;;		_initLCD
 10970 ;;		_lcdClear
 10971 ;;		_lcdNewline
 10972 ;;		_lcdHome
 10973 ;; This function uses a non-reentrant model
 10974 ;;
 10975                           
 10976                           	psect	text38
 10977  004B5E                     __ptext38:
 10978                           	opt stack 0
 10979  004B5E                     _lcdInst:
 10980                           	opt stack 19
 10981                           
 10982                           ;incstack = 0
 10983                           ;lcdInst@data stored from wreg
 10984  004B5E  0100               	movlb	0	; () banked
 10985  004B60  6F91               	movwf	lcdInst@data& (0+255),b
 10986                           
 10987                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 10988  004B62  948C               	bcf	3980,2,c	;volatile
 10989                           
 10990                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 10991  004B64  0E74               	movlw	116
 10992  004B66                     u7487:
 10993  004B66  2EE8               	decfsz	wreg,f,c
 10994  004B68  D7FE               	bra	u7487
 10995  004B6A  D000               	nop2	
 10996                           
 10997                           ;lcd.c: 30: lcdNibble(data);
 10998  004B6C  0100               	movlb	0	; () banked
 10999  004B6E  5191               	movf	lcdInst@data& (0+255),w,b
 11000  004B70  EC77  F022         	call	_lcdNibble
 11001                           
 11002                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 11003  004B74  0E04               	movlw	4
 11004  004B76  0100               	movlb	0	; () banked
 11005  004B78  6F90               	movwf	??_lcdInst& (0+255),b
 11006  004B7A  0E3D               	movlw	61
 11007  004B7C                     u7497:
 11008  004B7C  2EE8               	decfsz	wreg,f,c
 11009  004B7E  D7FE               	bra	u7497
 11010  004B80  2F90               	decfsz	??_lcdInst& (0+255),f,b
 11011  004B82  D7FC               	bra	u7497
 11012  004B84  D000               	nop2	
 11013  004B86  0012               	return		;funcret
 11014  004B88                     __end_of_lcdInst:
 11015                           	opt stack 0
 11016                           tblptru	equ	0xFF8
 11017                           tblptrh	equ	0xFF7
 11018                           tblptrl	equ	0xFF6
 11019                           tablat	equ	0xFF5
 11020                           prodh	equ	0xFF4
 11021                           prodl	equ	0xFF3
 11022                           intcon	equ	0xFF2
 11023                           postinc0	equ	0xFEE
 11024                           wreg	equ	0xFE8
 11025                           postdec1	equ	0xFE5
 11026                           fsr1l	equ	0xFE1
 11027                           indf2	equ	0xFDF
 11028                           postinc2	equ	0xFDE
 11029                           postdec2	equ	0xFDD
 11030                           fsr2h	equ	0xFDA
 11031                           fsr2l	equ	0xFD9
 11032                           status	equ	0xFD8
 11033                           
 11034 ;; *************** function _lcdNibble *****************
 11035 ;; Defined at:
 11036 ;;		line 46 in file "lcd.c"
 11037 ;; Parameters:    Size  Location     Type
 11038 ;;  data            1    wreg     unsigned char 
 11039 ;; Auto vars:     Size  Location     Type
 11040 ;;  data            1   15[BANK0 ] unsigned char 
 11041 ;;  temp            1   14[BANK0 ] unsigned char 
 11042 ;; Return value:  Size  Location     Type
 11043 ;;                  1    wreg      void 
 11044 ;; Registers used:
 11045 ;;		wreg, status,2, status,0
 11046 ;; Tracked objects:
 11047 ;;		On entry : 0/0
 11048 ;;		On exit  : 0/0
 11049 ;;		Unchanged: 0/0
 11050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11052 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11054 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11055 ;;Total ram usage:        2 bytes
 11056 ;; Hardware stack levels used:    1
 11057 ;; Hardware stack levels required when called:    6
 11058 ;; This function calls:
 11059 ;;		Nothing
 11060 ;; This function is called by:
 11061 ;;		_lcdInst
 11062 ;;		_putch
 11063 ;; This function uses a non-reentrant model
 11064 ;;
 11065                           
 11066                           	psect	text39
 11067  0044EE                     __ptext39:
 11068                           	opt stack 0
 11069  0044EE                     _lcdNibble:
 11070                           	opt stack 21
 11071                           
 11072                           ;incstack = 0
 11073                           ;lcdNibble@data stored from wreg
 11074  0044EE  0100               	movlb	0	; () banked
 11075  0044F0  6F8F               	movwf	lcdNibble@data& (0+255),b
 11076                           
 11077                           ;lcd.c: 48: char temp = data & 0xF0;
 11078  0044F2  0100               	movlb	0	; () banked
 11079  0044F4  518F               	movf	lcdNibble@data& (0+255),w,b
 11080  0044F6  0BF0               	andlw	240
 11081  0044F8  0100               	movlb	0	; () banked
 11082  0044FA  6F8E               	movwf	lcdNibble@temp& (0+255),b
 11083                           
 11084                           ;lcd.c: 49: LATD = LATD & 0x0F;
 11085  0044FC  508C               	movf	3980,w,c	;volatile
 11086  0044FE  0B0F               	andlw	15
 11087  004500  6E8C               	movwf	3980,c	;volatile
 11088                           
 11089                           ;lcd.c: 50: LATD = temp | LATD;
 11090  004502  0100               	movlb	0	; () banked
 11091  004504  518E               	movf	lcdNibble@temp& (0+255),w,b
 11092  004506  108C               	iorwf	3980,w,c	;volatile
 11093  004508  6E8C               	movwf	3980,c	;volatile
 11094                           
 11095                           ; BSR set to: 0
 11096                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 11097  00450A  968C               	bcf	3980,3,c	;volatile
 11098                           
 11099                           ; BSR set to: 0
 11100                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 11101  00450C  0ED6               	movlw	214
 11102  00450E                     u7507:
 11103  00450E  D000               	nop2	
 11104  004510  D000               	nop2	
 11105  004512  2EE8               	decfsz	wreg,f,c
 11106  004514  D7FC               	bra	u7507
 11107  004516  D000               	nop2	
 11108                           
 11109                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 11110  004518  868C               	bsf	3980,3,c	;volatile
 11111                           
 11112                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 11113  00451A  0ED6               	movlw	214
 11114  00451C                     u7517:
 11115  00451C  D000               	nop2	
 11116  00451E  D000               	nop2	
 11117  004520  2EE8               	decfsz	wreg,f,c
 11118  004522  D7FC               	bra	u7517
 11119  004524  D000               	nop2	
 11120                           
 11121                           ;lcd.c: 58: data = data << 4;
 11122  004526  0100               	movlb	0	; () banked
 11123  004528  398F               	swapf	lcdNibble@data& (0+255),w,b
 11124  00452A  0BF0               	andlw	240
 11125  00452C  0100               	movlb	0	; () banked
 11126  00452E  6F8F               	movwf	lcdNibble@data& (0+255),b
 11127                           
 11128                           ;lcd.c: 60: temp = data & 0xF0;
 11129  004530  0100               	movlb	0	; () banked
 11130  004532  518F               	movf	lcdNibble@data& (0+255),w,b
 11131  004534  0BF0               	andlw	240
 11132  004536  0100               	movlb	0	; () banked
 11133  004538  6F8E               	movwf	lcdNibble@temp& (0+255),b
 11134                           
 11135                           ;lcd.c: 61: LATD = LATD & 0x0F;
 11136  00453A  508C               	movf	3980,w,c	;volatile
 11137  00453C  0B0F               	andlw	15
 11138  00453E  6E8C               	movwf	3980,c	;volatile
 11139                           
 11140                           ;lcd.c: 62: LATD = temp | LATD;
 11141  004540  0100               	movlb	0	; () banked
 11142  004542  518E               	movf	lcdNibble@temp& (0+255),w,b
 11143  004544  108C               	iorwf	3980,w,c	;volatile
 11144  004546  6E8C               	movwf	3980,c	;volatile
 11145                           
 11146                           ; BSR set to: 0
 11147                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 11148  004548  968C               	bcf	3980,3,c	;volatile
 11149                           
 11150                           ; BSR set to: 0
 11151                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 11152  00454A  0ED6               	movlw	214
 11153  00454C                     u7527:
 11154  00454C  D000               	nop2	
 11155  00454E  D000               	nop2	
 11156  004550  2EE8               	decfsz	wreg,f,c
 11157  004552  D7FC               	bra	u7527
 11158  004554  D000               	nop2	
 11159                           
 11160                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 11161  004556  868C               	bsf	3980,3,c	;volatile
 11162                           
 11163                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 11164  004558  0ED6               	movlw	214
 11165  00455A                     u7537:
 11166  00455A  D000               	nop2	
 11167  00455C  D000               	nop2	
 11168  00455E  2EE8               	decfsz	wreg,f,c
 11169  004560  D7FC               	bra	u7537
 11170  004562  D000               	nop2	
 11171  004564  0012               	return		;funcret
 11172  004566                     __end_of_lcdNibble:
 11173                           	opt stack 0
 11174                           tblptru	equ	0xFF8
 11175                           tblptrh	equ	0xFF7
 11176                           tblptrl	equ	0xFF6
 11177                           tablat	equ	0xFF5
 11178                           prodh	equ	0xFF4
 11179                           prodl	equ	0xFF3
 11180                           intcon	equ	0xFF2
 11181                           postinc0	equ	0xFEE
 11182                           wreg	equ	0xFE8
 11183                           postdec1	equ	0xFE5
 11184                           fsr1l	equ	0xFE1
 11185                           indf2	equ	0xFDF
 11186                           postinc2	equ	0xFDE
 11187                           postdec2	equ	0xFDD
 11188                           fsr2h	equ	0xFDA
 11189                           fsr2l	equ	0xFD9
 11190                           status	equ	0xFD8
 11191                           
 11192 ;; *************** function _service *****************
 11193 ;; Defined at:
 11194 ;;		line 230 in file "main.c"
 11195 ;; Parameters:    Size  Location     Type
 11196 ;;		None
 11197 ;; Auto vars:     Size  Location     Type
 11198 ;;  key             1  113[COMRAM] unsigned char 
 11199 ;; Return value:  Size  Location     Type
 11200 ;;                  1    wreg      void 
 11201 ;; Registers used:
 11202 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11203 ;; Tracked objects:
 11204 ;;		On entry : 0/0
 11205 ;;		On exit  : 0/0
 11206 ;;		Unchanged: 0/0
 11207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11209 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11210 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11211 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11212 ;;Total ram usage:       15 bytes
 11213 ;; Hardware stack levels used:    1
 11214 ;; Hardware stack levels required when called:    5
 11215 ;; This function calls:
 11216 ;;		_servoInterruptService
 11217 ;;		i2_lcdClear
 11218 ;;		i2_printf
 11219 ;;		i2_setAngle
 11220 ;; This function is called by:
 11221 ;;		Interrupt level 2
 11222 ;; This function uses a non-reentrant model
 11223 ;;
 11224                           
 11225                           	psect	intcode
 11226  000008                     __pintcode:
 11227                           	opt stack 0
 11228  000008                     _service:
 11229                           	opt stack 18
 11230                           
 11231                           ;incstack = 0
 11232  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11233  00000A  EDE2  F01C         	call	int_func,f	;refresh shadow registers
 11234                           tblptru	equ	0xFF8
 11235                           tblptrh	equ	0xFF7
 11236                           tblptrl	equ	0xFF6
 11237                           tablat	equ	0xFF5
 11238                           prodh	equ	0xFF4
 11239                           prodl	equ	0xFF3
 11240                           intcon	equ	0xFF2
 11241                           postinc0	equ	0xFEE
 11242                           wreg	equ	0xFE8
 11243                           postdec1	equ	0xFE5
 11244                           fsr1l	equ	0xFE1
 11245                           indf2	equ	0xFDF
 11246                           postinc2	equ	0xFDE
 11247                           postdec2	equ	0xFDD
 11248                           fsr2h	equ	0xFDA
 11249                           fsr2l	equ	0xFD9
 11250                           status	equ	0xFD8
 11251                           
 11252                           	psect	intcode_body
 11253  0039C4                     __pintcode_body:
 11254                           	opt stack 18
 11255  0039C4                     int_func:
 11256                           	opt stack 18
 11257  0039C4  0006               	pop		; remove dummy address from shadow register refresh
 11258  0039C6  CFFA F080          	movff	pclath,??_service
 11259  0039CA  CFFB F081          	movff	pclatu,??_service+1
 11260  0039CE  CFE9 F082          	movff	fsr0l,??_service+2
 11261  0039D2  CFEA F083          	movff	fsr0h,??_service+3
 11262  0039D6  CFE1 F084          	movff	fsr1l,??_service+4
 11263  0039DA  CFE2 F085          	movff	fsr1h,??_service+5
 11264  0039DE  CFD9 F086          	movff	fsr2l,??_service+6
 11265  0039E2  CFDA F087          	movff	fsr2h,??_service+7
 11266  0039E6  CFF3 F088          	movff	prodl,??_service+8
 11267  0039EA  CFF4 F089          	movff	prodh,??_service+9
 11268  0039EE  CFF6 F08A          	movff	tblptrl,??_service+10
 11269  0039F2  CFF7 F08B          	movff	tblptrh,??_service+11
 11270  0039F6  CFF8 F08C          	movff	tblptru,??_service+12
 11271  0039FA  CFF5 F08D          	movff	tablat,??_service+13
 11272                           
 11273                           ;main.c: 232: servoInterruptService();
 11274  0039FE  EC76  F01A         	call	_servoInterruptService	;wreg free
 11275                           
 11276                           ;main.c: 235: if(INT0IF){ INT0IF = 0;
 11277  003A02  A2F2               	btfss	intcon,1,c	;volatile
 11278  003A04  D006               	goto	i2l6174
 11279  003A06  92F2               	bcf	intcon,1,c	;volatile
 11280                           
 11281                           ;main.c: 236: batteryDetected = 1;
 11282  003A08  0E00               	movlw	0
 11283  003A0A  0101               	movlb	1	; () banked
 11284  003A0C  6F76               	movwf	(_batteryDetected+1)& (0+255),b
 11285  003A0E  0E01               	movlw	1
 11286  003A10  6F75               	movwf	_batteryDetected& (0+255),b
 11287  003A12                     i2l6174:
 11288                           
 11289                           ;main.c: 237: }
 11290                           ;main.c: 240: if(INT1IF && INT1IE){INT1IF = 0;
 11291  003A12  B0F0               	btfsc	intcon3,0,c	;volatile
 11292  003A14  A6F0               	btfss	intcon3,3,c	;volatile
 11293  003A16  D026               	goto	i2l146
 11294  003A18  90F0               	bcf	intcon3,0,c	;volatile
 11295                           
 11296                           ;main.c: 243: char key = (PORTB & 0xF0) >> 4;
 11297  003A1A  3881               	swapf	3969,w,c	;volatile
 11298  003A1C  0B0F               	andlw	15
 11299  003A1E  0B0F               	andlw	15
 11300  003A20  6E72               	movwf	service@key,c
 11301                           
 11302                           ;main.c: 244: if(key == 0)angle+=1;
 11303  003A22  5072               	movf	service@key,w,c
 11304  003A24  A4D8               	btfss	status,2,c
 11305  003A26  D002               	goto	i2l6186
 11306  003A28  4A7A               	infsnz	_angle,f,c
 11307  003A2A  2A7B               	incf	_angle+1,f,c
 11308  003A2C                     i2l6186:
 11309                           
 11310                           ;main.c: 245: if(key == 1)angle-=1;
 11311  003A2C  0472               	decf	service@key,w,c
 11312  003A2E  A4D8               	btfss	status,2,c
 11313  003A30  D003               	goto	i2l6190
 11314  003A32  067A               	decf	_angle,f,c
 11315  003A34  A0D8               	btfss	status,0,c
 11316  003A36  067B               	decf	_angle+1,f,c
 11317  003A38                     i2l6190:
 11318                           
 11319                           ;main.c: 246: lcdClear();
 11320  003A38  EC36  F026         	call	i2_lcdClear	;wreg free
 11321                           
 11322                           ;main.c: 247: printf("angle: %d",angle);
 11323  003A3C  0EDC               	movlw	low STR_9
 11324  003A3E  6E50               	movwf	i2printf@f,c
 11325  003A40  0EFF               	movlw	high STR_9
 11326  003A42  6E51               	movwf	i2printf@f+1,c
 11327  003A44  C07A  F052         	movff	_angle,?i2_printf+2
 11328  003A48  C07B  F053         	movff	_angle+1,?i2_printf+3
 11329  003A4C  ECB2  F004         	call	i2_printf	;wreg free
 11330                           
 11331                           ;main.c: 248: setAngle(padServo, angle);
 11332  003A50  0E44               	movlw	low _padServo
 11333  003A52  6E67               	movwf	i2setAngle@motor,c
 11334  003A54  0E01               	movlw	high _padServo
 11335  003A56  6E68               	movwf	i2setAngle@motor+1,c
 11336  003A58  C07A  F069         	movff	_angle,i2setAngle@angle
 11337  003A5C  C07B  F06A         	movff	_angle+1,i2setAngle@angle+1
 11338  003A60  EC3F  F01F         	call	i2_setAngle	;wreg free
 11339  003A64                     i2l146:
 11340  003A64  C08D  FFF5         	movff	??_service+13,tablat
 11341  003A68  C08C  FFF8         	movff	??_service+12,tblptru
 11342  003A6C  C08B  FFF7         	movff	??_service+11,tblptrh
 11343  003A70  C08A  FFF6         	movff	??_service+10,tblptrl
 11344  003A74  C089  FFF4         	movff	??_service+9,prodh
 11345  003A78  C088  FFF3         	movff	??_service+8,prodl
 11346  003A7C  C087  FFDA         	movff	??_service+7,fsr2h
 11347  003A80  C086  FFD9         	movff	??_service+6,fsr2l
 11348  003A84  C085  FFE2         	movff	??_service+5,fsr1h
 11349  003A88  C084  FFE1         	movff	??_service+4,fsr1l
 11350  003A8C  C083  FFEA         	movff	??_service+3,fsr0h
 11351  003A90  C082  FFE9         	movff	??_service+2,fsr0l
 11352  003A94  C081  FFFB         	movff	??_service+1,pclatu
 11353  003A98  C080  FFFA         	movff	??_service,pclath
 11354  003A9C  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11355  003A9E  0011               	retfie		f
 11356  003AA0                     __end_of_service:
 11357                           	opt stack 0
 11358                           pclatu	equ	0xFFB
 11359                           pclath	equ	0xFFA
 11360                           tblptru	equ	0xFF8
 11361                           tblptrh	equ	0xFF7
 11362                           tblptrl	equ	0xFF6
 11363                           tablat	equ	0xFF5
 11364                           prodh	equ	0xFF4
 11365                           prodl	equ	0xFF3
 11366                           intcon	equ	0xFF2
 11367                           intcon3	equ	0xFF0
 11368                           postinc0	equ	0xFEE
 11369                           fsr0h	equ	0xFEA
 11370                           fsr0l	equ	0xFE9
 11371                           wreg	equ	0xFE8
 11372                           postdec1	equ	0xFE5
 11373                           fsr1h	equ	0xFE2
 11374                           fsr1l	equ	0xFE1
 11375                           indf2	equ	0xFDF
 11376                           postinc2	equ	0xFDE
 11377                           postdec2	equ	0xFDD
 11378                           fsr2h	equ	0xFDA
 11379                           fsr2l	equ	0xFD9
 11380                           status	equ	0xFD8
 11381                           
 11382 ;; *************** function i2_setAngle *****************
 11383 ;; Defined at:
 11384 ;;		line 41 in file "servo.c"
 11385 ;; Parameters:    Size  Location     Type
 11386 ;;  motor           2  102[COMRAM] PTR int 
 11387 ;;		 -> redirectingServo(6), padServo(6), conveyorServo(6), 
 11388 ;;  angle           2  104[COMRAM] int 
 11389 ;; Auto vars:     Size  Location     Type
 11390 ;;  setAngle        2  110[COMRAM] int 
 11391 ;;  setAngle        2  108[COMRAM] unsigned int 
 11392 ;; Return value:  Size  Location     Type
 11393 ;;                  1    wreg      void 
 11394 ;; Registers used:
 11395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11396 ;; Tracked objects:
 11397 ;;		On entry : 0/0
 11398 ;;		On exit  : 0/0
 11399 ;;		Unchanged: 0/0
 11400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11401 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11402 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11403 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11404 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11405 ;;Total ram usage:       10 bytes
 11406 ;; Hardware stack levels used:    1
 11407 ;; Hardware stack levels required when called:    3
 11408 ;; This function calls:
 11409 ;;		i2_angleToPulse
 11410 ;; This function is called by:
 11411 ;;		_service
 11412 ;; This function uses a non-reentrant model
 11413 ;;
 11414                           
 11415                           	psect	text41
 11416  003E7E                     __ptext41:
 11417                           	opt stack 0
 11418  003E7E                     i2_setAngle:
 11419                           	opt stack 19
 11420                           
 11421                           ;servo.c: 42: unsigned int period = 50000;
 11422                           
 11423                           ;incstack = 0
 11424  003E7E  0EC3               	movlw	195
 11425  003E80  6E6E               	movwf	i2setAngle@period+1,c
 11426  003E82  0E50               	movlw	80
 11427  003E84  6E6D               	movwf	i2setAngle@period,c
 11428                           
 11429                           ;servo.c: 43: for(int i = 0; i < n; i++){
 11430  003E86  0E00               	movlw	0
 11431  003E88  6E70               	movwf	i2setAngle@i+1,c
 11432  003E8A  0E00               	movlw	0
 11433  003E8C  6E6F               	movwf	i2setAngle@i,c
 11434  003E8E  D032               	goto	i2l5922
 11435  003E90                     i2l5914:
 11436                           
 11437                           ;servo.c: 44: if(servos[i] == motor){
 11438  003E90  90D8               	bcf	status,0,c
 11439  003E92  346F               	rlcf	i2setAngle@i,w,c
 11440  003E94  6ED9               	movwf	fsr2l,c
 11441  003E96  3470               	rlcf	i2setAngle@i+1,w,c
 11442  003E98  6EDA               	movwf	fsr2h,c
 11443  003E9A  0E60               	movlw	low _servos
 11444  003E9C  26D9               	addwf	fsr2l,f,c
 11445  003E9E  0E01               	movlw	high _servos
 11446  003EA0  22DA               	addwfc	fsr2h,f,c
 11447  003EA2  5067               	movf	i2setAngle@motor,w,c
 11448  003EA4  18DE               	xorwf	postinc2,w,c
 11449  003EA6  E117               	bnz	i2l5918
 11450  003EA8  5068               	movf	i2setAngle@motor+1,w,c
 11451  003EAA  18DE               	xorwf	postinc2,w,c
 11452  003EAC  A4D8               	btfss	status,2,c
 11453  003EAE  D013               	goto	i2l5918
 11454                           
 11455                           ;servo.c: 45: pulse[i] = angleToPulse(angle);
 11456  003EB0  C069  F050         	movff	i2setAngle@angle,i2angleToPulse@angle
 11457  003EB4  C06A  F051         	movff	i2setAngle@angle+1,i2angleToPulse@angle+1
 11458  003EB8  EC8B  F017         	call	i2_angleToPulse	;wreg free
 11459  003EBC  90D8               	bcf	status,0,c
 11460  003EBE  346F               	rlcf	i2setAngle@i,w,c
 11461  003EC0  6ED9               	movwf	fsr2l,c
 11462  003EC2  3470               	rlcf	i2setAngle@i+1,w,c
 11463  003EC4  6EDA               	movwf	fsr2h,c
 11464  003EC6  0EEA               	movlw	low _pulse
 11465  003EC8  26D9               	addwf	fsr2l,f,c
 11466  003ECA  0E00               	movlw	high _pulse
 11467  003ECC  22DA               	addwfc	fsr2h,f,c
 11468  003ECE  C050  FFDE         	movff	?i2_angleToPulse,postinc2
 11469  003ED2  C051  FFDD         	movff	?i2_angleToPulse+1,postdec2
 11470  003ED6                     i2l5918:
 11471                           
 11472                           ;servo.c: 46: }
 11473                           ;servo.c: 47: period-=pulse[i];
 11474  003ED6  90D8               	bcf	status,0,c
 11475  003ED8  346F               	rlcf	i2setAngle@i,w,c
 11476  003EDA  6ED9               	movwf	fsr2l,c
 11477  003EDC  3470               	rlcf	i2setAngle@i+1,w,c
 11478  003EDE  6EDA               	movwf	fsr2h,c
 11479  003EE0  0EEA               	movlw	low _pulse
 11480  003EE2  26D9               	addwf	fsr2l,f,c
 11481  003EE4  0E00               	movlw	high _pulse
 11482  003EE6  22DA               	addwfc	fsr2h,f,c
 11483  003EE8  50DE               	movf	postinc2,w,c
 11484  003EEA  5E6D               	subwf	i2setAngle@period,f,c
 11485  003EEC  50DD               	movf	postdec2,w,c
 11486  003EEE  5A6E               	subwfb	i2setAngle@period+1,f,c
 11487  003EF0  4A6F               	infsnz	i2setAngle@i,f,c
 11488  003EF2  2A70               	incf	i2setAngle@i+1,f,c
 11489  003EF4                     i2l5922:
 11490  003EF4  0101               	movlb	1	; () banked
 11491  003EF6  5177               	movf	_n& (0+255),w,b
 11492  003EF8  5C6F               	subwf	i2setAngle@i,w,c
 11493  003EFA  5070               	movf	i2setAngle@i+1,w,c
 11494  003EFC  0A80               	xorlw	128
 11495  003EFE  6E6B               	movwf	??i2_setAngle& (0+255),c
 11496  003F00  0101               	movlb	1	; () banked
 11497  003F02  5178               	movf	(_n+1)& (0+255),w,b
 11498  003F04  0A80               	xorlw	128
 11499  003F06  586B               	subwfb	??i2_setAngle& (0+255),w,c
 11500  003F08  A0D8               	btfss	status,0,c
 11501  003F0A  D7C2               	goto	i2l5914
 11502                           
 11503                           ; BSR set to: 1
 11504                           ;servo.c: 48: }
 11505                           ;servo.c: 49: pulse[n] = period;
 11506                           
 11507                           ; BSR set to: 1
 11508  003F0C  90D8               	bcf	status,0,c
 11509  003F0E  0101               	movlb	1	; () banked
 11510  003F10  3577               	rlcf	_n& (0+255),w,b
 11511  003F12  6ED9               	movwf	fsr2l,c
 11512  003F14  0101               	movlb	1	; () banked
 11513  003F16  3578               	rlcf	(_n+1)& (0+255),w,b
 11514  003F18  6EDA               	movwf	fsr2h,c
 11515  003F1A  0EEA               	movlw	low _pulse
 11516  003F1C  26D9               	addwf	fsr2l,f,c
 11517  003F1E  0E00               	movlw	high _pulse
 11518  003F20  22DA               	addwfc	fsr2h,f,c
 11519  003F22  C06D  FFDE         	movff	i2setAngle@period,postinc2
 11520  003F26  C06E  FFDD         	movff	i2setAngle@period+1,postdec2
 11521                           
 11522                           ; BSR set to: 1
 11523  003F2A  0012               	return		;funcret
 11524  003F2C                     __end_ofi2_setAngle:
 11525                           	opt stack 0
 11526                           pclatu	equ	0xFFB
 11527                           pclath	equ	0xFFA
 11528                           tblptru	equ	0xFF8
 11529                           tblptrh	equ	0xFF7
 11530                           tblptrl	equ	0xFF6
 11531                           tablat	equ	0xFF5
 11532                           prodh	equ	0xFF4
 11533                           prodl	equ	0xFF3
 11534                           intcon	equ	0xFF2
 11535                           intcon3	equ	0xFF0
 11536                           postinc0	equ	0xFEE
 11537                           fsr0h	equ	0xFEA
 11538                           fsr0l	equ	0xFE9
 11539                           wreg	equ	0xFE8
 11540                           postdec1	equ	0xFE5
 11541                           fsr1h	equ	0xFE2
 11542                           fsr1l	equ	0xFE1
 11543                           indf2	equ	0xFDF
 11544                           postinc2	equ	0xFDE
 11545                           postdec2	equ	0xFDD
 11546                           fsr2h	equ	0xFDA
 11547                           fsr2l	equ	0xFD9
 11548                           status	equ	0xFD8
 11549                           
 11550 ;; *************** function i2_angleToPulse *****************
 11551 ;; Defined at:
 11552 ;;		line 33 in file "servo.c"
 11553 ;; Parameters:    Size  Location     Type
 11554 ;;  angle           2   79[COMRAM] int 
 11555 ;; Auto vars:     Size  Location     Type
 11556 ;;  angleToPulse    4   98[COMRAM] long 
 11557 ;;  angleToPulse    4   91[COMRAM] long 
 11558 ;;  angleToPulse    4   87[COMRAM] long 
 11559 ;; Return value:  Size  Location     Type
 11560 ;;                  4   79[COMRAM] long 
 11561 ;; Registers used:
 11562 ;;		wreg, status,2, status,0, cstack
 11563 ;; Tracked objects:
 11564 ;;		On entry : 0/0
 11565 ;;		On exit  : 0/0
 11566 ;;		Unchanged: 0/0
 11567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11568 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11569 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11570 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11571 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11572 ;;Total ram usage:       23 bytes
 11573 ;; Hardware stack levels used:    1
 11574 ;; Hardware stack levels required when called:    2
 11575 ;; This function calls:
 11576 ;;		i2___altoft
 11577 ;;		i2___awtoft
 11578 ;;		i2___ftadd
 11579 ;;		i2___ftdiv
 11580 ;;		i2___ftmul
 11581 ;;		i2___fttol
 11582 ;; This function is called by:
 11583 ;;		i2_setAngle
 11584 ;; This function uses a non-reentrant model
 11585 ;;
 11586                           
 11587                           	psect	text42
 11588  002F16                     __ptext42:
 11589                           	opt stack 0
 11590  002F16                     i2_angleToPulse:
 11591                           	opt stack 19
 11592                           
 11593                           ;servo.c: 34: long offset = -600;
 11594                           
 11595                           ; BSR set to: 1
 11596                           ;incstack = 0
 11597  002F16  0EA8               	movlw	168
 11598  002F18  6E58               	movwf	i2angleToPulse@offset,c
 11599  002F1A  0EFD               	movlw	253
 11600  002F1C  6E59               	movwf	i2angleToPulse@offset+1,c
 11601  002F1E  0EFF               	movlw	255
 11602  002F20  6E5A               	movwf	i2angleToPulse@offset+2,c
 11603  002F22  0EFF               	movlw	255
 11604  002F24  6E5B               	movwf	i2angleToPulse@offset+3,c
 11605                           
 11606                           ;servo.c: 35: long a000 = 1250;
 11607  002F26  0EE2               	movlw	226
 11608  002F28  6E63               	movwf	i2angleToPulse@a000,c
 11609  002F2A  0E04               	movlw	4
 11610  002F2C  6E64               	movwf	i2angleToPulse@a000+1,c
 11611  002F2E  0E00               	movlw	0
 11612  002F30  6E65               	movwf	i2angleToPulse@a000+2,c
 11613  002F32  0E00               	movlw	0
 11614  002F34  6E66               	movwf	i2angleToPulse@a000+3,c
 11615                           
 11616                           ;servo.c: 36: long a180 = 6250;
 11617  002F36  0E6A               	movlw	106
 11618  002F38  6E5C               	movwf	i2angleToPulse@a180,c
 11619  002F3A  0E18               	movlw	24
 11620  002F3C  6E5D               	movwf	i2angleToPulse@a180+1,c
 11621  002F3E  0E00               	movlw	0
 11622  002F40  6E5E               	movwf	i2angleToPulse@a180+2,c
 11623  002F42  0E00               	movlw	0
 11624  002F44  6E5F               	movwf	i2angleToPulse@a180+3,c
 11625                           
 11626                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
 11627  002F46  C063  F054         	movff	i2angleToPulse@a000,??i2_angleToPulse
 11628  002F4A  C064  F055         	movff	i2angleToPulse@a000+1,??i2_angleToPulse+1
 11629  002F4E  C065  F056         	movff	i2angleToPulse@a000+2,??i2_angleToPulse+2
 11630  002F52  C066  F057         	movff	i2angleToPulse@a000+3,??i2_angleToPulse+3
 11631  002F56  1E54               	comf	??i2_angleToPulse,f,c
 11632  002F58  1E55               	comf	??i2_angleToPulse+1,f,c
 11633  002F5A  1E56               	comf	??i2_angleToPulse+2,f,c
 11634  002F5C  1E57               	comf	??i2_angleToPulse+3,f,c
 11635  002F5E  2A54               	incf	??i2_angleToPulse,f,c
 11636  002F60  0E00               	movlw	0
 11637  002F62  2255               	addwfc	??i2_angleToPulse+1,f,c
 11638  002F64  2256               	addwfc	??i2_angleToPulse+2,f,c
 11639  002F66  2257               	addwfc	??i2_angleToPulse+3,f,c
 11640  002F68  505C               	movf	i2angleToPulse@a180,w,c
 11641  002F6A  2454               	addwf	??i2_angleToPulse,w,c
 11642  002F6C  6E09               	movwf	i2___altoft@c,c
 11643  002F6E  505D               	movf	i2angleToPulse@a180+1,w,c
 11644  002F70  2055               	addwfc	??i2_angleToPulse+1,w,c
 11645  002F72  6E0A               	movwf	i2___altoft@c+1,c
 11646  002F74  505E               	movf	i2angleToPulse@a180+2,w,c
 11647  002F76  2056               	addwfc	??i2_angleToPulse+2,w,c
 11648  002F78  6E0B               	movwf	i2___altoft@c+2,c
 11649  002F7A  505F               	movf	i2angleToPulse@a180+3,w,c
 11650  002F7C  2057               	addwfc	??i2_angleToPulse+3,w,c
 11651  002F7E  6E0C               	movwf	i2___altoft@c+3,c
 11652  002F80  ECB3  F022         	call	i2___altoft	;wreg free
 11653  002F84  C009  F01F         	movff	?i2___altoft,i2___ftmul@f2
 11654  002F88  C00A  F020         	movff	?i2___altoft+1,i2___ftmul@f2+1
 11655  002F8C  C00B  F021         	movff	?i2___altoft+2,i2___ftmul@f2+2
 11656  002F90  0E00               	movlw	0
 11657  002F92  6E10               	movwf	i2___ftdiv@f2,c
 11658  002F94  0E34               	movlw	52
 11659  002F96  6E11               	movwf	i2___ftdiv@f2+1,c
 11660  002F98  0E43               	movlw	67
 11661  002F9A  6E12               	movwf	i2___ftdiv@f2+2,c
 11662  002F9C  C050  F009         	movff	i2angleToPulse@angle,i2___awtoft@c
 11663  002FA0  C051  F00A         	movff	i2angleToPulse@angle+1,i2___awtoft@c+1
 11664  002FA4  EC34  F025         	call	i2___awtoft	;wreg free
 11665  002FA8  C009  F00D         	movff	?i2___awtoft,i2___ftdiv@f1
 11666  002FAC  C00A  F00E         	movff	?i2___awtoft+1,i2___ftdiv@f1+1
 11667  002FB0  C00B  F00F         	movff	?i2___awtoft+2,i2___ftdiv@f1+2
 11668  002FB4  EC6F  F01C         	call	i2___ftdiv	;wreg free
 11669  002FB8  C00D  F01C         	movff	?i2___ftdiv,i2___ftmul@f1
 11670  002FBC  C00E  F01D         	movff	?i2___ftdiv+1,i2___ftmul@f1+1
 11671  002FC0  C00F  F01E         	movff	?i2___ftdiv+2,i2___ftmul@f1+2
 11672  002FC4  EC7B  F01B         	call	i2___ftmul	;wreg free
 11673  002FC8  C01C  F038         	movff	?i2___ftmul,i2___ftadd@f2
 11674  002FCC  C01D  F039         	movff	?i2___ftmul+1,i2___ftadd@f2+1
 11675  002FD0  C01E  F03A         	movff	?i2___ftmul+2,i2___ftadd@f2+2
 11676  002FD4  C063  F009         	movff	i2angleToPulse@a000,i2___altoft@c
 11677  002FD8  C064  F00A         	movff	i2angleToPulse@a000+1,i2___altoft@c+1
 11678  002FDC  C065  F00B         	movff	i2angleToPulse@a000+2,i2___altoft@c+2
 11679  002FE0  C066  F00C         	movff	i2angleToPulse@a000+3,i2___altoft@c+3
 11680  002FE4  ECB3  F022         	call	i2___altoft	;wreg free
 11681  002FE8  C009  F035         	movff	?i2___altoft,i2___ftadd@f1
 11682  002FEC  C00A  F036         	movff	?i2___altoft+1,i2___ftadd@f1+1
 11683  002FF0  C00B  F037         	movff	?i2___altoft+2,i2___ftadd@f1+2
 11684  002FF4  EC78  F012         	call	i2___ftadd	;wreg free
 11685  002FF8  C035  F060         	movff	?i2___ftadd,i2_angleToPulse$1549
 11686  002FFC  C036  F061         	movff	?i2___ftadd+1,i2_angleToPulse$1549+1
 11687  003000  C037  F062         	movff	?i2___ftadd+2,i2_angleToPulse$1549+2
 11688                           
 11689                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
 11690  003004  C058  F009         	movff	i2angleToPulse@offset,i2___altoft@c
 11691  003008  C059  F00A         	movff	i2angleToPulse@offset+1,i2___altoft@c+1
 11692  00300C  C05A  F00B         	movff	i2angleToPulse@offset+2,i2___altoft@c+2
 11693  003010  C05B  F00C         	movff	i2angleToPulse@offset+3,i2___altoft@c+3
 11694  003014  ECB3  F022         	call	i2___altoft	;wreg free
 11695  003018  C009  F038         	movff	?i2___altoft,i2___ftadd@f2
 11696  00301C  C00A  F039         	movff	?i2___altoft+1,i2___ftadd@f2+1
 11697  003020  C00B  F03A         	movff	?i2___altoft+2,i2___ftadd@f2+2
 11698  003024  C060  F035         	movff	i2_angleToPulse$1549,i2___ftadd@f1
 11699  003028  C061  F036         	movff	i2_angleToPulse$1549+1,i2___ftadd@f1+1
 11700  00302C  C062  F037         	movff	i2_angleToPulse$1549+2,i2___ftadd@f1+2
 11701  003030  EC78  F012         	call	i2___ftadd	;wreg free
 11702  003034  C035  F041         	movff	?i2___ftadd,i2___fttol@f1
 11703  003038  C036  F042         	movff	?i2___ftadd+1,i2___fttol@f1+1
 11704  00303C  C037  F043         	movff	?i2___ftadd+2,i2___fttol@f1+2
 11705  003040  ECF5  F01B         	call	i2___fttol	;wreg free
 11706  003044  C041  F050         	movff	?i2___fttol,?i2_angleToPulse
 11707  003048  C042  F051         	movff	?i2___fttol+1,?i2_angleToPulse+1
 11708  00304C  C043  F052         	movff	?i2___fttol+2,?i2_angleToPulse+2
 11709  003050  C044  F053         	movff	?i2___fttol+3,?i2_angleToPulse+3
 11710  003054  0012               	return	
 11711  003056                     __end_ofi2_angleToPulse:
 11712                           	opt stack 0
 11713                           pclatu	equ	0xFFB
 11714                           pclath	equ	0xFFA
 11715                           tblptru	equ	0xFF8
 11716                           tblptrh	equ	0xFF7
 11717                           tblptrl	equ	0xFF6
 11718                           tablat	equ	0xFF5
 11719                           prodh	equ	0xFF4
 11720                           prodl	equ	0xFF3
 11721                           intcon	equ	0xFF2
 11722                           intcon3	equ	0xFF0
 11723                           postinc0	equ	0xFEE
 11724                           fsr0h	equ	0xFEA
 11725                           fsr0l	equ	0xFE9
 11726                           wreg	equ	0xFE8
 11727                           postdec1	equ	0xFE5
 11728                           fsr1h	equ	0xFE2
 11729                           fsr1l	equ	0xFE1
 11730                           indf2	equ	0xFDF
 11731                           postinc2	equ	0xFDE
 11732                           postdec2	equ	0xFDD
 11733                           fsr2h	equ	0xFDA
 11734                           fsr2l	equ	0xFD9
 11735                           status	equ	0xFD8
 11736                           
 11737 ;; *************** function i2___ftdiv *****************
 11738 ;; Defined at:
 11739 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 11740 ;; Parameters:    Size  Location     Type
 11741 ;;  f1              3   12[COMRAM] float 
 11742 ;;  f2              3   15[COMRAM] float 
 11743 ;; Auto vars:     Size  Location     Type
 11744 ;;  __ftdiv         3   22[COMRAM] float 
 11745 ;;  __ftdiv         1   26[COMRAM] unsigned char 
 11746 ;;  __ftdiv         1   25[COMRAM] unsigned char 
 11747 ;;  __ftdiv         1   21[COMRAM] unsigned char 
 11748 ;; Return value:  Size  Location     Type
 11749 ;;                  3   12[COMRAM] float 
 11750 ;; Registers used:
 11751 ;;		wreg, status,2, status,0, cstack
 11752 ;; Tracked objects:
 11753 ;;		On entry : 0/0
 11754 ;;		On exit  : 0/0
 11755 ;;		Unchanged: 0/0
 11756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11757 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11758 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11759 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11760 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11761 ;;Total ram usage:       15 bytes
 11762 ;; Hardware stack levels used:    1
 11763 ;; Hardware stack levels required when called:    1
 11764 ;; This function calls:
 11765 ;;		i2___ftpack
 11766 ;; This function is called by:
 11767 ;;		i2_angleToPulse
 11768 ;; This function uses a non-reentrant model
 11769 ;;
 11770                           
 11771                           	psect	text43
 11772  0038DE                     __ptext43:
 11773                           	opt stack 0
 11774  0038DE                     i2___ftdiv:
 11775                           	opt stack 19
 11776                           
 11777                           ;incstack = 0
 11778  0038DE  C00F  F013         	movff	i2___ftdiv@f1+2,??i2___ftdiv
 11779  0038E2  6A14               	clrf	(??i2___ftdiv+1)& (0+255),c
 11780  0038E4  6A15               	clrf	(??i2___ftdiv+2)& (0+255),c
 11781  0038E6  340E               	rlcf	i2___ftdiv@f1+1,w,c
 11782  0038E8  3613               	rlcf	??i2___ftdiv& (0+255),f,c
 11783  0038EA  E301               	bnc	u529_41
 11784  0038EC  8014               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 11785  0038EE                     u529_41:
 11786  0038EE  5013               	movf	??i2___ftdiv,w,c
 11787  0038F0  6E1A               	movwf	i2___ftdiv@exp,c
 11788  0038F2  501A               	movf	i2___ftdiv@exp,w,c
 11789  0038F4  A4D8               	btfss	status,2,c
 11790  0038F6  D007               	goto	i2l5200
 11791  0038F8  0E00               	movlw	0
 11792  0038FA  6E0D               	movwf	?i2___ftdiv,c
 11793  0038FC  0E00               	movlw	0
 11794  0038FE  6E0E               	movwf	?i2___ftdiv+1,c
 11795  003900  0E00               	movlw	0
 11796  003902  6E0F               	movwf	?i2___ftdiv+2,c
 11797  003904  0012               	return	
 11798  003906                     i2l5200:
 11799  003906  C012  F013         	movff	i2___ftdiv@f2+2,??i2___ftdiv
 11800  00390A  6A14               	clrf	(??i2___ftdiv+1)& (0+255),c
 11801  00390C  6A15               	clrf	(??i2___ftdiv+2)& (0+255),c
 11802  00390E  3411               	rlcf	i2___ftdiv@f2+1,w,c
 11803  003910  3613               	rlcf	??i2___ftdiv& (0+255),f,c
 11804  003912  E301               	bnc	u531_41
 11805  003914  8014               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 11806  003916                     u531_41:
 11807  003916  5013               	movf	??i2___ftdiv,w,c
 11808  003918  6E1B               	movwf	i2___ftdiv@sign,c
 11809  00391A  501B               	movf	i2___ftdiv@sign,w,c
 11810  00391C  A4D8               	btfss	status,2,c
 11811  00391E  D007               	goto	i2l5206
 11812  003920  0E00               	movlw	0
 11813  003922  6E0D               	movwf	?i2___ftdiv,c
 11814  003924  0E00               	movlw	0
 11815  003926  6E0E               	movwf	?i2___ftdiv+1,c
 11816  003928  0E00               	movlw	0
 11817  00392A  6E0F               	movwf	?i2___ftdiv+2,c
 11818  00392C  0012               	return	
 11819  00392E                     i2l5206:
 11820  00392E  0E00               	movlw	0
 11821  003930  6E17               	movwf	i2___ftdiv@f3,c
 11822  003932  0E00               	movlw	0
 11823  003934  6E18               	movwf	i2___ftdiv@f3+1,c
 11824  003936  0E00               	movlw	0
 11825  003938  6E19               	movwf	i2___ftdiv@f3+2,c
 11826  00393A  501B               	movf	i2___ftdiv@sign,w,c
 11827  00393C  0F89               	addlw	137
 11828  00393E  5E1A               	subwf	i2___ftdiv@exp,f,c
 11829  003940  C00F  F01B         	movff	i2___ftdiv@f1+2,i2___ftdiv@sign
 11830  003944  5012               	movf	i2___ftdiv@f2+2,w,c
 11831  003946  1A1B               	xorwf	i2___ftdiv@sign,f,c
 11832  003948  0E80               	movlw	128
 11833  00394A  161B               	andwf	i2___ftdiv@sign,f,c
 11834  00394C  8E0E               	bsf	i2___ftdiv@f1+1,7,c
 11835  00394E  0EFF               	movlw	255
 11836  003950  160D               	andwf	i2___ftdiv@f1,f,c
 11837  003952  0EFF               	movlw	255
 11838  003954  160E               	andwf	i2___ftdiv@f1+1,f,c
 11839  003956  0E00               	movlw	0
 11840  003958  160F               	andwf	i2___ftdiv@f1+2,f,c
 11841  00395A  8E11               	bsf	i2___ftdiv@f2+1,7,c
 11842  00395C  0EFF               	movlw	255
 11843  00395E  1610               	andwf	i2___ftdiv@f2,f,c
 11844  003960  0EFF               	movlw	255
 11845  003962  1611               	andwf	i2___ftdiv@f2+1,f,c
 11846  003964  0E00               	movlw	0
 11847  003966  1612               	andwf	i2___ftdiv@f2+2,f,c
 11848  003968  0E18               	movlw	24
 11849  00396A  6E16               	movwf	i2___ftdiv@cntr,c
 11850  00396C                     i2l5226:
 11851  00396C  90D8               	bcf	status,0,c
 11852  00396E  3617               	rlcf	i2___ftdiv@f3,f,c
 11853  003970  3618               	rlcf	i2___ftdiv@f3+1,f,c
 11854  003972  3619               	rlcf	i2___ftdiv@f3+2,f,c
 11855  003974  5010               	movf	i2___ftdiv@f2,w,c
 11856  003976  5C0D               	subwf	i2___ftdiv@f1,w,c
 11857  003978  5011               	movf	i2___ftdiv@f2+1,w,c
 11858  00397A  580E               	subwfb	i2___ftdiv@f1+1,w,c
 11859  00397C  5012               	movf	i2___ftdiv@f2+2,w,c
 11860  00397E  580F               	subwfb	i2___ftdiv@f1+2,w,c
 11861  003980  A0D8               	btfss	status,0,c
 11862  003982  D007               	goto	i2l1018
 11863  003984  5010               	movf	i2___ftdiv@f2,w,c
 11864  003986  5E0D               	subwf	i2___ftdiv@f1,f,c
 11865  003988  5011               	movf	i2___ftdiv@f2+1,w,c
 11866  00398A  5A0E               	subwfb	i2___ftdiv@f1+1,f,c
 11867  00398C  5012               	movf	i2___ftdiv@f2+2,w,c
 11868  00398E  5A0F               	subwfb	i2___ftdiv@f1+2,f,c
 11869  003990  8017               	bsf	i2___ftdiv@f3,0,c
 11870  003992                     i2l1018:
 11871  003992  90D8               	bcf	status,0,c
 11872  003994  360D               	rlcf	i2___ftdiv@f1,f,c
 11873  003996  360E               	rlcf	i2___ftdiv@f1+1,f,c
 11874  003998  360F               	rlcf	i2___ftdiv@f1+2,f,c
 11875  00399A  2E16               	decfsz	i2___ftdiv@cntr,f,c
 11876  00399C  D7E7               	goto	i2l5226
 11877  00399E  C017  F001         	movff	i2___ftdiv@f3,i2___ftpack@arg
 11878  0039A2  C018  F002         	movff	i2___ftdiv@f3+1,i2___ftpack@arg+1
 11879  0039A6  C019  F003         	movff	i2___ftdiv@f3+2,i2___ftpack@arg+2
 11880  0039AA  C01A  F004         	movff	i2___ftdiv@exp,i2___ftpack@exp
 11881  0039AE  C01B  F005         	movff	i2___ftdiv@sign,i2___ftpack@sign
 11882  0039B2  EC96  F01F         	call	i2___ftpack	;wreg free
 11883  0039B6  C001  F00D         	movff	?i2___ftpack,?i2___ftdiv
 11884  0039BA  C002  F00E         	movff	?i2___ftpack+1,?i2___ftdiv+1
 11885  0039BE  C003  F00F         	movff	?i2___ftpack+2,?i2___ftdiv+2
 11886  0039C2  0012               	return	
 11887  0039C4                     __end_ofi2___ftdiv:
 11888                           	opt stack 0
 11889                           pclatu	equ	0xFFB
 11890                           pclath	equ	0xFFA
 11891                           tblptru	equ	0xFF8
 11892                           tblptrh	equ	0xFF7
 11893                           tblptrl	equ	0xFF6
 11894                           tablat	equ	0xFF5
 11895                           prodh	equ	0xFF4
 11896                           prodl	equ	0xFF3
 11897                           intcon	equ	0xFF2
 11898                           intcon3	equ	0xFF0
 11899                           postinc0	equ	0xFEE
 11900                           fsr0h	equ	0xFEA
 11901                           fsr0l	equ	0xFE9
 11902                           wreg	equ	0xFE8
 11903                           postdec1	equ	0xFE5
 11904                           fsr1h	equ	0xFE2
 11905                           fsr1l	equ	0xFE1
 11906                           indf2	equ	0xFDF
 11907                           postinc2	equ	0xFDE
 11908                           postdec2	equ	0xFDD
 11909                           fsr2h	equ	0xFDA
 11910                           fsr2l	equ	0xFD9
 11911                           status	equ	0xFD8
 11912                           
 11913 ;; *************** function i2___awtoft *****************
 11914 ;; Defined at:
 11915 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 11916 ;; Parameters:    Size  Location     Type
 11917 ;;  c               2    8[COMRAM] int 
 11918 ;; Auto vars:     Size  Location     Type
 11919 ;;  __awtoft        1   11[COMRAM] unsigned char 
 11920 ;; Return value:  Size  Location     Type
 11921 ;;                  3    8[COMRAM] float 
 11922 ;; Registers used:
 11923 ;;		wreg, status,2, status,0, cstack
 11924 ;; Tracked objects:
 11925 ;;		On entry : 0/0
 11926 ;;		On exit  : 0/0
 11927 ;;		Unchanged: 0/0
 11928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11929 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11930 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11932 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11933 ;;Total ram usage:        4 bytes
 11934 ;; Hardware stack levels used:    1
 11935 ;; Hardware stack levels required when called:    1
 11936 ;; This function calls:
 11937 ;;		i2___ftpack
 11938 ;; This function is called by:
 11939 ;;		i2_angleToPulse
 11940 ;; This function uses a non-reentrant model
 11941 ;;
 11942                           
 11943                           	psect	text44
 11944  004A68                     __ptext44:
 11945                           	opt stack 0
 11946  004A68                     i2___awtoft:
 11947                           	opt stack 19
 11948                           
 11949                           ;incstack = 0
 11950  004A68  0E00               	movlw	0
 11951  004A6A  6E0C               	movwf	i2___awtoft@sign,c
 11952  004A6C  AE0A               	btfss	i2___awtoft@c+1,7,c
 11953  004A6E  D006               	goto	i2l5120
 11954  004A70  6C09               	negf	i2___awtoft@c,c
 11955  004A72  1E0A               	comf	i2___awtoft@c+1,f,c
 11956  004A74  B0D8               	btfsc	status,0,c
 11957  004A76  2A0A               	incf	i2___awtoft@c+1,f,c
 11958  004A78  0E01               	movlw	1
 11959  004A7A  6E0C               	movwf	i2___awtoft@sign,c
 11960  004A7C                     i2l5120:
 11961  004A7C  C009  F001         	movff	i2___awtoft@c,i2___ftpack@arg
 11962  004A80  C00A  F002         	movff	i2___awtoft@c+1,i2___ftpack@arg+1
 11963  004A84  6A03               	clrf	i2___ftpack@arg+2,c
 11964  004A86  0E8E               	movlw	142
 11965  004A88  6E04               	movwf	i2___ftpack@exp,c
 11966  004A8A  C00C  F005         	movff	i2___awtoft@sign,i2___ftpack@sign
 11967  004A8E  EC96  F01F         	call	i2___ftpack	;wreg free
 11968  004A92  C001  F009         	movff	?i2___ftpack,?i2___awtoft
 11969  004A96  C002  F00A         	movff	?i2___ftpack+1,?i2___awtoft+1
 11970  004A9A  C003  F00B         	movff	?i2___ftpack+2,?i2___awtoft+2
 11971  004A9E  0012               	return	
 11972  004AA0                     __end_ofi2___awtoft:
 11973                           	opt stack 0
 11974                           pclatu	equ	0xFFB
 11975                           pclath	equ	0xFFA
 11976                           tblptru	equ	0xFF8
 11977                           tblptrh	equ	0xFF7
 11978                           tblptrl	equ	0xFF6
 11979                           tablat	equ	0xFF5
 11980                           prodh	equ	0xFF4
 11981                           prodl	equ	0xFF3
 11982                           intcon	equ	0xFF2
 11983                           intcon3	equ	0xFF0
 11984                           postinc0	equ	0xFEE
 11985                           fsr0h	equ	0xFEA
 11986                           fsr0l	equ	0xFE9
 11987                           wreg	equ	0xFE8
 11988                           postdec1	equ	0xFE5
 11989                           fsr1h	equ	0xFE2
 11990                           fsr1l	equ	0xFE1
 11991                           indf2	equ	0xFDF
 11992                           postinc2	equ	0xFDE
 11993                           postdec2	equ	0xFDD
 11994                           fsr2h	equ	0xFDA
 11995                           fsr2l	equ	0xFD9
 11996                           status	equ	0xFD8
 11997                           
 11998 ;; *************** function i2___altoft *****************
 11999 ;; Defined at:
 12000 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 12001 ;; Parameters:    Size  Location     Type
 12002 ;;  c               4    8[COMRAM] long 
 12003 ;; Auto vars:     Size  Location     Type
 12004 ;;  __altoft        1   17[COMRAM] unsigned char 
 12005 ;;  __altoft        1   16[COMRAM] unsigned char 
 12006 ;; Return value:  Size  Location     Type
 12007 ;;                  3    8[COMRAM] float 
 12008 ;; Registers used:
 12009 ;;		wreg, status,2, status,0, cstack
 12010 ;; Tracked objects:
 12011 ;;		On entry : 0/0
 12012 ;;		On exit  : 0/0
 12013 ;;		Unchanged: 0/0
 12014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12015 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12016 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12017 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12018 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12019 ;;Total ram usage:       10 bytes
 12020 ;; Hardware stack levels used:    1
 12021 ;; Hardware stack levels required when called:    1
 12022 ;; This function calls:
 12023 ;;		i2___ftpack
 12024 ;; This function is called by:
 12025 ;;		i2_angleToPulse
 12026 ;; This function uses a non-reentrant model
 12027 ;;
 12028                           
 12029                           	psect	text45
 12030  004566                     __ptext45:
 12031                           	opt stack 0
 12032  004566                     i2___altoft:
 12033                           	opt stack 19
 12034                           
 12035                           ;incstack = 0
 12036  004566  0E00               	movlw	0
 12037  004568  6E12               	movwf	i2___altoft@sign,c
 12038  00456A  0E8E               	movlw	142
 12039  00456C  6E11               	movwf	i2___altoft@exp,c
 12040  00456E  AE0C               	btfss	i2___altoft@c+3,7,c
 12041  004570  D011               	goto	i2l5026
 12042  004572  1E0C               	comf	i2___altoft@c+3,f,c
 12043  004574  1E0B               	comf	i2___altoft@c+2,f,c
 12044  004576  1E0A               	comf	i2___altoft@c+1,f,c
 12045  004578  6C09               	negf	i2___altoft@c,c
 12046  00457A  0E00               	movlw	0
 12047  00457C  220A               	addwfc	i2___altoft@c+1,f,c
 12048  00457E  220B               	addwfc	i2___altoft@c+2,f,c
 12049  004580  220C               	addwfc	i2___altoft@c+3,f,c
 12050  004582  0E01               	movlw	1
 12051  004584  6E12               	movwf	i2___altoft@sign,c
 12052  004586  D006               	goto	i2l5026
 12053  004588                     i2l5024:
 12054  004588  90D8               	bcf	status,0,c
 12055  00458A  320C               	rrcf	i2___altoft@c+3,f,c
 12056  00458C  320B               	rrcf	i2___altoft@c+2,f,c
 12057  00458E  320A               	rrcf	i2___altoft@c+1,f,c
 12058  004590  3209               	rrcf	i2___altoft@c,f,c
 12059  004592  2A11               	incf	i2___altoft@exp,f,c
 12060  004594                     i2l5026:
 12061  004594  0E00               	movlw	0
 12062  004596  1409               	andwf	i2___altoft@c,w,c
 12063  004598  6E0D               	movwf	??i2___altoft& (0+255),c
 12064  00459A  0E00               	movlw	0
 12065  00459C  140A               	andwf	i2___altoft@c+1,w,c
 12066  00459E  6E0E               	movwf	(??i2___altoft+1)& (0+255),c
 12067  0045A0  0E00               	movlw	0
 12068  0045A2  140B               	andwf	i2___altoft@c+2,w,c
 12069  0045A4  6E0F               	movwf	(??i2___altoft+2)& (0+255),c
 12070  0045A6  0EFF               	movlw	255
 12071  0045A8  140C               	andwf	i2___altoft@c+3,w,c
 12072  0045AA  6E10               	movwf	(??i2___altoft+3)& (0+255),c
 12073  0045AC  500D               	movf	??i2___altoft,w,c
 12074  0045AE  100E               	iorwf	??i2___altoft+1,w,c
 12075  0045B0  100F               	iorwf	??i2___altoft+2,w,c
 12076  0045B2  1010               	iorwf	??i2___altoft+3,w,c
 12077  0045B4  A4D8               	btfss	status,2,c
 12078  0045B6  D7E8               	goto	i2l5024
 12079  0045B8  C009  F001         	movff	i2___altoft@c,i2___ftpack@arg
 12080  0045BC  C00A  F002         	movff	i2___altoft@c+1,i2___ftpack@arg+1
 12081  0045C0  C00B  F003         	movff	i2___altoft@c+2,i2___ftpack@arg+2
 12082  0045C4  C011  F004         	movff	i2___altoft@exp,i2___ftpack@exp
 12083  0045C8  C012  F005         	movff	i2___altoft@sign,i2___ftpack@sign
 12084  0045CC  EC96  F01F         	call	i2___ftpack	;wreg free
 12085  0045D0  C001  F009         	movff	?i2___ftpack,?i2___altoft
 12086  0045D4  C002  F00A         	movff	?i2___ftpack+1,?i2___altoft+1
 12087  0045D8  C003  F00B         	movff	?i2___ftpack+2,?i2___altoft+2
 12088  0045DC  0012               	return	
 12089  0045DE                     __end_ofi2___altoft:
 12090                           	opt stack 0
 12091                           pclatu	equ	0xFFB
 12092                           pclath	equ	0xFFA
 12093                           tblptru	equ	0xFF8
 12094                           tblptrh	equ	0xFF7
 12095                           tblptrl	equ	0xFF6
 12096                           tablat	equ	0xFF5
 12097                           prodh	equ	0xFF4
 12098                           prodl	equ	0xFF3
 12099                           intcon	equ	0xFF2
 12100                           intcon3	equ	0xFF0
 12101                           postinc0	equ	0xFEE
 12102                           fsr0h	equ	0xFEA
 12103                           fsr0l	equ	0xFE9
 12104                           wreg	equ	0xFE8
 12105                           postdec1	equ	0xFE5
 12106                           fsr1h	equ	0xFE2
 12107                           fsr1l	equ	0xFE1
 12108                           indf2	equ	0xFDF
 12109                           postinc2	equ	0xFDE
 12110                           postdec2	equ	0xFDD
 12111                           fsr2h	equ	0xFDA
 12112                           fsr2l	equ	0xFD9
 12113                           status	equ	0xFD8
 12114                           
 12115 ;; *************** function i2_printf *****************
 12116 ;; Defined at:
 12117 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12118 ;; Parameters:    Size  Location     Type
 12119 ;;  f               2   79[COMRAM] PTR const unsigned char 
 12120 ;;		 -> STR_23(17), STR_22(18), STR_21(17), STR_20(18), 
 12121 ;;		 -> STR_19(17), STR_18(19), STR_17(17), STR_16(18), 
 12122 ;;		 -> STR_15(17), STR_14(18), STR_13(17), STR_12(18), 
 12123 ;;		 -> STR_11(9), STR_10(8), STR_9(10), STR_8(25), 
 12124 ;;		 -> STR_7(15), STR_6(17), STR_5(20), STR_4(24), 
 12125 ;;		 -> STR_3(14), STR_2(20), STR_1(8), 
 12126 ;; Auto vars:     Size  Location     Type
 12127 ;;  printf          4  105[COMRAM] unsigned long 
 12128 ;;  printf          4  101[COMRAM] struct .
 12129 ;;  printf          3  109[COMRAM] struct .
 12130 ;;  printf          3    0        PTR const unsigned char 
 12131 ;;  printf          2   99[COMRAM] int 
 12132 ;;  printf          2   97[COMRAM] int 
 12133 ;;  printf          2   95[COMRAM] unsigned short 
 12134 ;;  printf          2   93[COMRAM] PTR void [1]
 12135 ;;		 -> ?i2_printf(2), ?_printf(2), 
 12136 ;;  printf          2    0        unsigned int 
 12137 ;;  printf          2    0        int 
 12138 ;;  printf          1  112[COMRAM] char 
 12139 ;;  printf          1   92[COMRAM] unsigned char 
 12140 ;;  printf          1    0        unsigned char 
 12141 ;; Return value:  Size  Location     Type
 12142 ;;                  2   79[COMRAM] int 
 12143 ;; Registers used:
 12144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12145 ;; Tracked objects:
 12146 ;;		On entry : 0/0
 12147 ;;		On exit  : 0/0
 12148 ;;		Unchanged: 0/0
 12149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12150 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12151 ;;      Locals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12152 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12153 ;;      Totals:        34       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12154 ;;Total ram usage:       34 bytes
 12155 ;; Hardware stack levels used:    1
 12156 ;; Hardware stack levels required when called:    4
 12157 ;; This function calls:
 12158 ;;		i2___awdiv
 12159 ;;		i2___ftadd
 12160 ;;		i2___ftge
 12161 ;;		i2___ftmul
 12162 ;;		i2___ftneg
 12163 ;;		i2___ftsub
 12164 ;;		i2___fttol
 12165 ;;		i2___lldiv
 12166 ;;		i2___llmod
 12167 ;;		i2___lltoft
 12168 ;;		i2___wmul
 12169 ;;		i2__div_to_l_
 12170 ;;		i2__tdiv_to_l_
 12171 ;;		i2_fround
 12172 ;;		i2_putch
 12173 ;;		i2_scale
 12174 ;; This function is called by:
 12175 ;;		_service
 12176 ;; This function uses a non-reentrant model
 12177 ;;
 12178                           
 12179                           	psect	text46
 12180  000964                     __ptext46:
 12181                           	opt stack 0
 12182  000964                     i2_printf:
 12183                           	opt stack 18
 12184                           
 12185                           ;doprnt.c: 466: va_list ap;
 12186                           ;doprnt.c: 499: signed char c;
 12187                           ;doprnt.c: 501: int width;
 12188                           ;doprnt.c: 504: int prec;
 12189                           ;doprnt.c: 508: unsigned short flag;
 12190                           ;doprnt.c: 515: char d;
 12191                           ;doprnt.c: 516: double fval;
 12192                           ;doprnt.c: 517: int exp;
 12193                           ;doprnt.c: 523: union {
 12194                           ;doprnt.c: 524: unsigned long vd;
 12195                           ;doprnt.c: 525: double integ;
 12196                           ;doprnt.c: 526: } tmpval;
 12197                           ;doprnt.c: 528: unsigned long val;
 12198                           ;doprnt.c: 529: unsigned len;
 12199                           ;doprnt.c: 530: const char * cp;
 12200                           ;doprnt.c: 533: *ap = __va_start();
 12201                           
 12202                           ;incstack = 0
 12203  000964  0E52               	movlw	low (?i2_printf+2)
 12204  000966  6E5E               	movwf	i2printf@ap,c
 12205  000968  0E00               	movlw	high (?i2_printf+2)
 12206  00096A  6E5F               	movwf	i2printf@ap+1,c
 12207                           
 12208                           ;doprnt.c: 536: while(c = *f++) {
 12209  00096C  D3EA               	goto	i2l6146
 12210  00096E                     i2l5928:
 12211                           
 12212                           ;doprnt.c: 538: if(c != '%')
 12213  00096E  0E25               	movlw	37
 12214  000970  1871               	xorwf	i2printf@c,w,c
 12215  000972  B4D8               	btfsc	status,2,c
 12216  000974  D004               	goto	i2l5932
 12217                           
 12218                           ;doprnt.c: 540: {
 12219                           ;doprnt.c: 541: (putch(c) );
 12220  000976  5071               	movf	i2printf@c,w,c
 12221  000978  ECFD  F025         	call	i2_putch
 12222                           
 12223                           ;doprnt.c: 542: continue;
 12224  00097C  D3E2               	goto	i2l6146
 12225  00097E                     i2l5932:
 12226                           
 12227                           ;doprnt.c: 543: }
 12228                           ;doprnt.c: 548: flag = 0;
 12229  00097E  0E00               	movlw	0
 12230  000980  6E61               	movwf	i2printf@flag+1,c
 12231  000982  0E00               	movlw	0
 12232  000984  6E60               	movwf	i2printf@flag,c
 12233                           
 12234                           ;doprnt.c: 635: switch(c = *f++) {
 12235  000986  D012               	goto	i2l5946
 12236  000988                     i2l5934:
 12237                           
 12238                           ;doprnt.c: 663: flag |= 0x400;
 12239  000988  8461               	bsf	i2printf@flag+1,2,c
 12240                           
 12241                           ;doprnt.c: 698: case 'i':
 12242                           ;doprnt.c: 699: break;
 12243                           
 12244                           ;doprnt.c: 697: case 'd':
 12245                           
 12246                           ;doprnt.c: 664: break;
 12247  00098A  D02D               	goto	i2l5948
 12248  00098C                     i2l5936:
 12249                           
 12250                           ;doprnt.c: 721: flag |= 0x80;
 12251  00098C  8E60               	bsf	i2printf@flag,7,c
 12252                           
 12253                           ;doprnt.c: 723: break;
 12254  00098E  D02B               	goto	i2l5948
 12255  000990                     i2l5938:
 12256                           
 12257                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 12258  000990  C05E  FFD9         	movff	i2printf@ap,fsr2l
 12259  000994  C05F  FFDA         	movff	i2printf@ap+1,fsr2h
 12260  000998  50DF               	movf	indf2,w,c
 12261  00099A  6E71               	movwf	i2printf@c,c
 12262  00099C  0E02               	movlw	2
 12263  00099E  265E               	addwf	i2printf@ap,f,c
 12264  0009A0  0E00               	movlw	0
 12265  0009A2  225F               	addwfc	i2printf@ap+1,f,c
 12266  0009A4                     i2l5942:
 12267                           
 12268                           ;doprnt.c: 809: (putch(c) );
 12269  0009A4  5071               	movf	i2printf@c,w,c
 12270  0009A6  ECFD  F025         	call	i2_putch
 12271                           
 12272                           ;doprnt.c: 810: continue;
 12273  0009AA  D3CB               	goto	i2l6146
 12274  0009AC                     i2l5946:
 12275  0009AC  C050  FFF6         	movff	i2printf@f,tblptrl
 12276  0009B0  C051  FFF7         	movff	i2printf@f+1,tblptrh
 12277  0009B4  4A50               	infsnz	i2printf@f,f,c
 12278  0009B6  2A51               	incf	i2printf@f+1,f,c
 12279  0009B8                     	if	0	;tblptru may be non-zero
 12280  0009B8                     	endif
 12281  0009B8                     	if	0	;tblptru may be non-zero
 12282  0009B8                     	endif
 12283  0009B8  0008               	tblrd		*
 12284  0009BA  CFF5 F071          	movff	tablat,i2printf@c
 12285  0009BE  5071               	movf	i2printf@c,w,c
 12286                           
 12287                           ; Switch size 1, requested type "space"
 12288                           ; Number of cases is 6, Range of values is 0 to 120
 12289                           ; switch strategies available:
 12290                           ; Name         Instructions Cycles
 12291                           ; simple_byte           19    10 (average)
 12292                           ;	Chosen strategy is simple_byte
 12293  0009C0  0A00               	xorlw	0	; case 0
 12294  0009C2  B4D8               	btfsc	status,2,c
 12295  0009C4  0012               	return	
 12296  0009C6  0A63               	xorlw	99	; case 99
 12297  0009C8  B4D8               	btfsc	status,2,c
 12298  0009CA  D7E2               	goto	i2l5938
 12299  0009CC  0A07               	xorlw	7	; case 100
 12300  0009CE  B4D8               	btfsc	status,2,c
 12301  0009D0  D00A               	goto	i2l5948
 12302  0009D2  0A02               	xorlw	2	; case 102
 12303  0009D4  B4D8               	btfsc	status,2,c
 12304  0009D6  D7D8               	goto	i2l5934
 12305  0009D8  0A0F               	xorlw	15	; case 105
 12306  0009DA  B4D8               	btfsc	status,2,c
 12307  0009DC  D004               	goto	i2l5948
 12308  0009DE  0A11               	xorlw	17	; case 120
 12309  0009E0  B4D8               	btfsc	status,2,c
 12310  0009E2  D7D4               	goto	i2l5936
 12311  0009E4  D7DF               	goto	i2l5942
 12312  0009E6                     i2l5948:
 12313                           
 12314                           ;doprnt.c: 825: if(flag & (0x700)) {
 12315  0009E6  0E07               	movlw	7
 12316  0009E8  1461               	andwf	i2printf@flag+1,w,c
 12317  0009EA  B4D8               	btfsc	status,2,c
 12318  0009EC  D29C               	goto	i2l659
 12319                           
 12320                           ;doprnt.c: 829: prec = 6;
 12321  0009EE  0E00               	movlw	0
 12322  0009F0  6E63               	movwf	i2printf@prec+1,c
 12323  0009F2  0E06               	movlw	6
 12324  0009F4  6E62               	movwf	i2printf@prec,c
 12325                           
 12326                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 12327  0009F6  C05E  FFD9         	movff	i2printf@ap,fsr2l
 12328  0009FA  C05F  FFDA         	movff	i2printf@ap+1,fsr2h
 12329  0009FE  CFDE F06E          	movff	postinc2,i2printf@fval
 12330  000A02  CFDE F06F          	movff	postinc2,i2printf@fval+1
 12331  000A06  CFDD F070          	movff	postdec2,i2printf@fval+2
 12332  000A0A  0E03               	movlw	3
 12333  000A0C  265E               	addwf	i2printf@ap,f,c
 12334  000A0E  0E00               	movlw	0
 12335  000A10  225F               	addwfc	i2printf@ap+1,f,c
 12336                           
 12337                           ;doprnt.c: 831: if(fval < 0.0) {
 12338  000A12  AE70               	btfss	i2printf@fval+2,7,c
 12339  000A14  D010               	goto	i2l5962
 12340                           
 12341                           ;doprnt.c: 832: fval = -fval;
 12342  000A16  C06E  F001         	movff	i2printf@fval,i2___ftneg@f1
 12343  000A1A  C06F  F002         	movff	i2printf@fval+1,i2___ftneg@f1+1
 12344  000A1E  C070  F003         	movff	i2printf@fval+2,i2___ftneg@f1+2
 12345  000A22  ECEB  F025         	call	i2___ftneg	;wreg free
 12346  000A26  C001  F06E         	movff	?i2___ftneg,i2printf@fval
 12347  000A2A  C002  F06F         	movff	?i2___ftneg+1,i2printf@fval+1
 12348  000A2E  C003  F070         	movff	?i2___ftneg+2,i2printf@fval+2
 12349                           
 12350                           ;doprnt.c: 833: flag |= 0x03;
 12351  000A32  0E03               	movlw	3
 12352  000A34  1260               	iorwf	i2printf@flag,f,c
 12353  000A36                     i2l5962:
 12354                           
 12355                           ;doprnt.c: 834: }
 12356                           ;doprnt.c: 835: exp = 0;
 12357  000A36  0E00               	movlw	0
 12358  000A38  6E65               	movwf	i2printf@exp+1,c
 12359  000A3A  0E00               	movlw	0
 12360  000A3C  6E64               	movwf	i2printf@exp,c
 12361                           
 12362                           ;doprnt.c: 836: if( fval!=0) {
 12363  000A3E  506E               	movf	i2printf@fval,w,c
 12364  000A40  106F               	iorwf	i2printf@fval+1,w,c
 12365  000A42  1070               	iorwf	i2printf@fval+2,w,c
 12366  000A44  B4D8               	btfsc	status,2,c
 12367  000A46  D083               	goto	i2l5990
 12368                           
 12369                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 12370  000A48  0E82               	movlw	130
 12371  000A4A  6E54               	movwf	??i2_printf& (0+255),c
 12372  000A4C  0EFF               	movlw	255
 12373  000A4E  6E55               	movwf	(??i2_printf+1)& (0+255),c
 12374  000A50  C06E  F056         	movff	i2printf@fval,??i2_printf+2
 12375  000A54  C06F  F057         	movff	i2printf@fval+1,??i2_printf+3
 12376  000A58  C070  F058         	movff	i2printf@fval+2,??i2_printf+4
 12377  000A5C  C071  F059         	movff	i2printf@fval+3,??i2_printf+5
 12378  000A60  0E10               	movlw	16
 12379  000A62  D005               	goto	i2u617_40
 12380  000A64                     i2u617_45:
 12381  000A64  90D8               	bcf	status,0,c
 12382  000A66  3259               	rrcf	??i2_printf+5,f,c
 12383  000A68  3258               	rrcf	??i2_printf+4,f,c
 12384  000A6A  3257               	rrcf	??i2_printf+3,f,c
 12385  000A6C  3256               	rrcf	??i2_printf+2,f,c
 12386  000A6E                     i2u617_40:
 12387  000A6E  2EE8               	decfsz	wreg,f,c
 12388  000A70  D7F9               	goto	i2u617_45
 12389  000A72  5056               	movf	??i2_printf+2,w,c
 12390  000A74  2454               	addwf	??i2_printf,w,c
 12391  000A76  6E64               	movwf	i2printf@exp,c
 12392  000A78  0E00               	movlw	0
 12393  000A7A  2055               	addwfc	??i2_printf+1,w,c
 12394  000A7C  6E65               	movwf	i2printf@exp+1,c
 12395                           
 12396                           ;doprnt.c: 838: exp--;
 12397  000A7E  0664               	decf	i2printf@exp,f,c
 12398  000A80  A0D8               	btfss	status,0,c
 12399  000A82  0665               	decf	i2printf@exp+1,f,c
 12400                           
 12401                           ;doprnt.c: 839: exp *= 3;
 12402  000A84  C064  F00F         	movff	i2printf@exp,i2___wmul@multiplier
 12403  000A88  C065  F010         	movff	i2printf@exp+1,i2___wmul@multiplier+1
 12404  000A8C  0E00               	movlw	0
 12405  000A8E  6E12               	movwf	i2___wmul@multiplicand+1,c
 12406  000A90  0E03               	movlw	3
 12407  000A92  6E11               	movwf	i2___wmul@multiplicand,c
 12408  000A94  ECD8  F025         	call	i2___wmul	;wreg free
 12409  000A98  C00F  F064         	movff	?i2___wmul,i2printf@exp
 12410  000A9C  C010  F065         	movff	?i2___wmul+1,i2printf@exp+1
 12411                           
 12412                           ;doprnt.c: 840: exp /= 10;
 12413  000AA0  C064  F007         	movff	i2printf@exp,i2___awdiv@dividend
 12414  000AA4  C065  F008         	movff	i2printf@exp+1,i2___awdiv@dividend+1
 12415  000AA8  0E00               	movlw	0
 12416  000AAA  6E0A               	movwf	i2___awdiv@divisor+1,c
 12417  000AAC  0E0A               	movlw	10
 12418  000AAE  6E09               	movwf	i2___awdiv@divisor,c
 12419  000AB0  ECB6  F021         	call	i2___awdiv	;wreg free
 12420  000AB4  C007  F064         	movff	?i2___awdiv,i2printf@exp
 12421  000AB8  C008  F065         	movff	?i2___awdiv+1,i2printf@exp+1
 12422                           
 12423                           ;doprnt.c: 841: if(exp < 0)
 12424  000ABC  AE65               	btfss	i2printf@exp+1,7,c
 12425  000ABE  D003               	goto	i2l5978
 12426                           
 12427                           ;doprnt.c: 842: exp--;
 12428  000AC0  0664               	decf	i2printf@exp,f,c
 12429  000AC2  A0D8               	btfss	status,0,c
 12430  000AC4  0665               	decf	i2printf@exp+1,f,c
 12431  000AC6                     i2l5978:
 12432                           
 12433                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 12434  000AC6  5064               	movf	i2printf@exp,w,c
 12435  000AC8  0800               	sublw	0
 12436  000ACA  EC05  F00B         	call	i2_scale
 12437  000ACE  C02B  F066         	movff	?i2_scale,i2printf@tmpval
 12438  000AD2  C02C  F067         	movff	?i2_scale+1,i2printf@tmpval+1
 12439  000AD6  C02D  F068         	movff	?i2_scale+2,i2printf@tmpval+2
 12440                           
 12441                           ;doprnt.c: 847: tmpval.integ *= fval;
 12442  000ADA  C066  F01C         	movff	i2printf@tmpval,i2___ftmul@f1
 12443  000ADE  C067  F01D         	movff	i2printf@tmpval+1,i2___ftmul@f1+1
 12444  000AE2  C068  F01E         	movff	i2printf@tmpval+2,i2___ftmul@f1+2
 12445  000AE6  C06E  F01F         	movff	i2printf@fval,i2___ftmul@f2
 12446  000AEA  C06F  F020         	movff	i2printf@fval+1,i2___ftmul@f2+1
 12447  000AEE  C070  F021         	movff	i2printf@fval+2,i2___ftmul@f2+2
 12448  000AF2  EC7B  F01B         	call	i2___ftmul	;wreg free
 12449  000AF6  C01C  F066         	movff	?i2___ftmul,i2printf@tmpval
 12450  000AFA  C01D  F067         	movff	?i2___ftmul+1,i2printf@tmpval+1
 12451  000AFE  C01E  F068         	movff	?i2___ftmul+2,i2printf@tmpval+2
 12452                           
 12453                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 12454  000B02  C066  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 12455  000B06  C067  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 12456  000B0A  C068  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 12457  000B0E  0E00               	movlw	0
 12458  000B10  6E04               	movwf	i2___ftge@ff2,c
 12459  000B12  0E80               	movlw	128
 12460  000B14  6E05               	movwf	i2___ftge@ff2+1,c
 12461  000B16  0E3F               	movlw	63
 12462  000B18  6E06               	movwf	i2___ftge@ff2+2,c
 12463  000B1A  EC27  F021         	call	i2___ftge	;wreg free
 12464  000B1E  B0D8               	btfsc	status,0,c
 12465  000B20  D004               	goto	i2l5986
 12466                           
 12467                           ;doprnt.c: 849: exp--;
 12468  000B22  0664               	decf	i2printf@exp,f,c
 12469  000B24  A0D8               	btfss	status,0,c
 12470  000B26  0665               	decf	i2printf@exp+1,f,c
 12471  000B28  D012               	goto	i2l5990
 12472  000B2A                     i2l5986:
 12473                           
 12474                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 12475  000B2A  C066  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 12476  000B2E  C067  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 12477  000B32  C068  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 12478  000B36  0E00               	movlw	0
 12479  000B38  6E04               	movwf	i2___ftge@ff2,c
 12480  000B3A  0E20               	movlw	32
 12481  000B3C  6E05               	movwf	i2___ftge@ff2+1,c
 12482  000B3E  0E41               	movlw	65
 12483  000B40  6E06               	movwf	i2___ftge@ff2+2,c
 12484  000B42  EC27  F021         	call	i2___ftge	;wreg free
 12485  000B46  A0D8               	btfss	status,0,c
 12486  000B48  D002               	goto	i2l5990
 12487                           
 12488                           ;doprnt.c: 851: exp++;
 12489  000B4A  4A64               	infsnz	i2printf@exp,f,c
 12490  000B4C  2A65               	incf	i2printf@exp+1,f,c
 12491  000B4E                     i2l5990:
 12492                           
 12493                           ;doprnt.c: 852: }
 12494                           ;doprnt.c: 1112: if(prec <= 12)
 12495  000B4E  BE63               	btfsc	i2printf@prec+1,7,c
 12496  000B50  D006               	goto	i2l5992
 12497  000B52  5063               	movf	i2printf@prec+1,w,c
 12498  000B54  E11B               	bnz	i2l5994
 12499  000B56  0E0D               	movlw	13
 12500  000B58  5C62               	subwf	i2printf@prec,w,c
 12501  000B5A  B0D8               	btfsc	status,0,c
 12502  000B5C  D017               	goto	i2l5994
 12503  000B5E                     i2l5992:
 12504                           
 12505                           ;doprnt.c: 1113: fval += fround(prec);
 12506  000B5E  C06E  F035         	movff	i2printf@fval,i2___ftadd@f1
 12507  000B62  C06F  F036         	movff	i2printf@fval+1,i2___ftadd@f1+1
 12508  000B66  C070  F037         	movff	i2printf@fval+2,i2___ftadd@f1+2
 12509  000B6A  5062               	movf	i2printf@prec,w,c
 12510  000B6C  EC55  F011         	call	i2_fround
 12511  000B70  C02B  F038         	movff	?i2_fround,i2___ftadd@f2
 12512  000B74  C02C  F039         	movff	?i2_fround+1,i2___ftadd@f2+1
 12513  000B78  C02D  F03A         	movff	?i2_fround+2,i2___ftadd@f2+2
 12514  000B7C  EC78  F012         	call	i2___ftadd	;wreg free
 12515  000B80  C035  F06E         	movff	?i2___ftadd,i2printf@fval
 12516  000B84  C036  F06F         	movff	?i2___ftadd+1,i2printf@fval+1
 12517  000B88  C037  F070         	movff	?i2___ftadd+2,i2printf@fval+2
 12518  000B8C                     i2l5994:
 12519                           
 12520                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 12521  000B8C  BE65               	btfsc	i2printf@exp+1,7,c
 12522  000B8E  D006               	goto	i2l5996
 12523  000B90  5065               	movf	i2printf@exp+1,w,c
 12524  000B92  E11E               	bnz	i2l6002
 12525  000B94  0E0A               	movlw	10
 12526  000B96  5C64               	subwf	i2printf@exp,w,c
 12527  000B98  B0D8               	btfsc	status,0,c
 12528  000B9A  D01A               	goto	i2l6002
 12529  000B9C                     i2l5996:
 12530  000B9C  506E               	movf	i2printf@fval,w,c
 12531  000B9E  106F               	iorwf	i2printf@fval+1,w,c
 12532  000BA0  1070               	iorwf	i2printf@fval+2,w,c
 12533  000BA2  B4D8               	btfsc	status,2,c
 12534  000BA4  D051               	goto	i2l6016
 12535  000BA6  C06E  F041         	movff	i2printf@fval,i2___fttol@f1
 12536  000BAA  C06F  F042         	movff	i2printf@fval+1,i2___fttol@f1+1
 12537  000BAE  C070  F043         	movff	i2printf@fval+2,i2___fttol@f1+2
 12538  000BB2  ECF5  F01B         	call	i2___fttol	;wreg free
 12539  000BB6  5041               	movf	?i2___fttol,w,c
 12540  000BB8  1042               	iorwf	?i2___fttol+1,w,c
 12541  000BBA  1043               	iorwf	?i2___fttol+2,w,c
 12542  000BBC  1044               	iorwf	?i2___fttol+3,w,c
 12543  000BBE  B4D8               	btfsc	status,2,c
 12544  000BC0  BE65               	btfsc	i2printf@exp+1,7,c
 12545  000BC2  D042               	goto	i2l6016
 12546  000BC4  5065               	movf	i2printf@exp+1,w,c
 12547  000BC6  E104               	bnz	i2l6002
 12548  000BC8  0E02               	movlw	2
 12549  000BCA  5C64               	subwf	i2printf@exp,w,c
 12550  000BCC  A0D8               	btfss	status,0,c
 12551  000BCE  D03C               	goto	i2l6016
 12552  000BD0                     i2l6002:
 12553                           
 12554                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 12555  000BD0  C066  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 12556  000BD4  C067  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 12557  000BD8  C068  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 12558  000BDC  0E70               	movlw	112
 12559  000BDE  6E04               	movwf	i2___ftge@ff2,c
 12560  000BE0  0E89               	movlw	137
 12561  000BE2  6E05               	movwf	i2___ftge@ff2+1,c
 12562  000BE4  0E40               	movlw	64
 12563  000BE6  6E06               	movwf	i2___ftge@ff2+2,c
 12564  000BE8  EC27  F021         	call	i2___ftge	;wreg free
 12565  000BEC  B0D8               	btfsc	status,0,c
 12566  000BEE  D002               	goto	i2l6006
 12567                           
 12568                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 12569  000BF0  0EF7               	movlw	247
 12570  000BF2  D001               	goto	L5
 12571  000BF4                     i2l6006:
 12572                           
 12573                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 12574  000BF4  0EF8               	movlw	248
 12575  000BF6                     L5:
 12576  000BF6  2664               	addwf	i2printf@exp,f,c
 12577  000BF8  0EFF               	movlw	255
 12578  000BFA  2265               	addwfc	i2printf@exp+1,f,c
 12579                           
 12580                           ;doprnt.c: 1124: }
 12581                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 12582  000BFC  5064               	movf	i2printf@exp,w,c
 12583  000BFE  EC05  F00B         	call	i2_scale
 12584  000C02  C02B  F066         	movff	?i2_scale,i2printf@tmpval
 12585  000C06  C02C  F067         	movff	?i2_scale+1,i2printf@tmpval+1
 12586  000C0A  C02D  F068         	movff	?i2_scale+2,i2printf@tmpval+2
 12587                           
 12588                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 12589  000C0E  C06E  F001         	movff	i2printf@fval,i2__tdiv_to_l_@f1
 12590  000C12  C06F  F002         	movff	i2printf@fval+1,i2__tdiv_to_l_@f1+1
 12591  000C16  C070  F003         	movff	i2printf@fval+2,i2__tdiv_to_l_@f1+2
 12592  000C1A  C066  F004         	movff	i2printf@tmpval,i2__tdiv_to_l_@f2
 12593  000C1E  C067  F005         	movff	i2printf@tmpval+1,i2__tdiv_to_l_@f2+1
 12594  000C22  C068  F006         	movff	i2printf@tmpval+2,i2__tdiv_to_l_@f2+2
 12595  000C26  EC2B  F018         	call	i2__tdiv_to_l_	;wreg free
 12596  000C2A  C001  F06A         	movff	?i2__tdiv_to_l_,i2printf@val
 12597  000C2E  C002  F06B         	movff	?i2__tdiv_to_l_+1,i2printf@val+1
 12598  000C32  C003  F06C         	movff	?i2__tdiv_to_l_+2,i2printf@val+2
 12599  000C36  C004  F06D         	movff	?i2__tdiv_to_l_+3,i2printf@val+3
 12600                           
 12601                           ;doprnt.c: 1129: fval = 0.0;
 12602  000C3A  0E00               	movlw	0
 12603  000C3C  6E6E               	movwf	i2printf@fval,c
 12604  000C3E  0E00               	movlw	0
 12605  000C40  6E6F               	movwf	i2printf@fval+1,c
 12606  000C42  0E00               	movlw	0
 12607  000C44  6E70               	movwf	i2printf@fval+2,c
 12608                           
 12609                           ;doprnt.c: 1130: } else {
 12610  000C46  D032               	goto	i2l6020
 12611  000C48                     i2l6016:
 12612                           
 12613                           ;doprnt.c: 1131: val = (unsigned long)fval;
 12614  000C48  C06E  F041         	movff	i2printf@fval,i2___fttol@f1
 12615  000C4C  C06F  F042         	movff	i2printf@fval+1,i2___fttol@f1+1
 12616  000C50  C070  F043         	movff	i2printf@fval+2,i2___fttol@f1+2
 12617  000C54  ECF5  F01B         	call	i2___fttol	;wreg free
 12618  000C58  C041  F06A         	movff	?i2___fttol,i2printf@val
 12619  000C5C  C042  F06B         	movff	?i2___fttol+1,i2printf@val+1
 12620  000C60  C043  F06C         	movff	?i2___fttol+2,i2printf@val+2
 12621  000C64  C044  F06D         	movff	?i2___fttol+3,i2printf@val+3
 12622                           
 12623                           ;doprnt.c: 1132: fval -= (double)val;
 12624  000C68  C06E  F041         	movff	i2printf@fval,i2___ftsub@f1
 12625  000C6C  C06F  F042         	movff	i2printf@fval+1,i2___ftsub@f1+1
 12626  000C70  C070  F043         	movff	i2printf@fval+2,i2___ftsub@f1+2
 12627  000C74  C06A  F009         	movff	i2printf@val,i2___lltoft@c
 12628  000C78  C06B  F00A         	movff	i2printf@val+1,i2___lltoft@c+1
 12629  000C7C  C06C  F00B         	movff	i2printf@val+2,i2___lltoft@c+2
 12630  000C80  C06D  F00C         	movff	i2printf@val+3,i2___lltoft@c+3
 12631  000C84  ECC6  F023         	call	i2___lltoft	;wreg free
 12632  000C88  C009  F044         	movff	?i2___lltoft,i2___ftsub@f2
 12633  000C8C  C00A  F045         	movff	?i2___lltoft+1,i2___ftsub@f2+1
 12634  000C90  C00B  F046         	movff	?i2___lltoft+2,i2___ftsub@f2+2
 12635  000C94  ECF5  F024         	call	i2___ftsub	;wreg free
 12636  000C98  C041  F06E         	movff	?i2___ftsub,i2printf@fval
 12637  000C9C  C042  F06F         	movff	?i2___ftsub+1,i2printf@fval+1
 12638  000CA0  C043  F070         	movff	?i2___ftsub+2,i2printf@fval+2
 12639                           
 12640                           ;doprnt.c: 1133: exp = 0;
 12641  000CA4  0E00               	movlw	0
 12642  000CA6  6E65               	movwf	i2printf@exp+1,c
 12643  000CA8  0E00               	movlw	0
 12644  000CAA  6E64               	movwf	i2printf@exp,c
 12645  000CAC                     i2l6020:
 12646                           
 12647                           ;doprnt.c: 1134: }
 12648                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 12649  000CAC  0E01               	movlw	1
 12650  000CAE  6E71               	movwf	i2printf@c,c
 12651  000CB0                     i2l6022:
 12652  000CB0  0E0A               	movlw	10
 12653  000CB2  1871               	xorwf	i2printf@c,w,c
 12654  000CB4  B4D8               	btfsc	status,2,c
 12655  000CB6  D018               	goto	i2l6034
 12656                           
 12657                           ;doprnt.c: 1137: if(val < dpowers[c])
 12658  000CB8  5071               	movf	i2printf@c,w,c
 12659  000CBA  0D04               	mullw	4
 12660  000CBC  0EC3               	movlw	low _dpowers
 12661  000CBE  24F3               	addwf	prodl,w,c
 12662  000CC0  6EF6               	movwf	tblptrl,c
 12663  000CC2  0EFD               	movlw	high _dpowers
 12664  000CC4  20F4               	addwfc	prodh,w,c
 12665  000CC6  6EF7               	movwf	tblptrh,c
 12666  000CC8                     	if	0	;There are less than 3 active tblptr bytes
 12667  000CC8                     	endif
 12668  000CC8  0009               	tblrd		*+
 12669  000CCA  50F5               	movf	tablat,w,c
 12670  000CCC  5C6A               	subwf	i2printf@val,w,c
 12671  000CCE  0009               	tblrd		*+
 12672  000CD0  50F5               	movf	tablat,w,c
 12673  000CD2  586B               	subwfb	i2printf@val+1,w,c
 12674  000CD4  0009               	tblrd		*+
 12675  000CD6  50F5               	movf	tablat,w,c
 12676  000CD8  586C               	subwfb	i2printf@val+2,w,c
 12677  000CDA  0009               	tblrd		*+
 12678  000CDC  50F5               	movf	tablat,w,c
 12679  000CDE  586D               	subwfb	i2printf@val+3,w,c
 12680  000CE0  A0D8               	btfss	status,0,c
 12681  000CE2  D002               	goto	i2l6034
 12682                           
 12683                           ;doprnt.c: 1138: break;
 12684  000CE4  2A71               	incf	i2printf@c,f,c
 12685  000CE6  D7E4               	goto	i2l6022
 12686  000CE8                     i2l6034:
 12687                           
 12688                           ;doprnt.c: 1175: {
 12689                           ;doprnt.c: 1188: if(flag & 0x03)
 12690  000CE8  0E03               	movlw	3
 12691  000CEA  1460               	andwf	i2printf@flag,w,c
 12692  000CEC  6E54               	movwf	??i2_printf& (0+255),c
 12693  000CEE  0E00               	movlw	0
 12694  000CF0  1461               	andwf	i2printf@flag+1,w,c
 12695  000CF2  6E55               	movwf	(??i2_printf+1)& (0+255),c
 12696  000CF4  5054               	movf	??i2_printf,w,c
 12697  000CF6  1055               	iorwf	??i2_printf+1,w,c
 12698  000CF8  B4D8               	btfsc	status,2,c
 12699  000CFA  D048               	goto	i2l6044
 12700                           
 12701                           ;doprnt.c: 1190: (putch('-') );
 12702  000CFC  0E2D               	movlw	45
 12703  000CFE  ECFD  F025         	call	i2_putch
 12704                           
 12705                           ;doprnt.c: 1195: }
 12706                           ;doprnt.c: 1196: while(c--) {
 12707  000D02  D044               	goto	i2l6044
 12708  000D04                     i2l6038:
 12709                           
 12710                           ;doprnt.c: 1200: {
 12711                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 12712  000D04  C06A  F001         	movff	i2printf@val,i2___lldiv@dividend
 12713  000D08  C06B  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 12714  000D0C  C06C  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 12715  000D10  C06D  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 12716  000D14  5071               	movf	i2printf@c,w,c
 12717  000D16  0D04               	mullw	4
 12718  000D18  0EC3               	movlw	low _dpowers
 12719  000D1A  24F3               	addwf	prodl,w,c
 12720  000D1C  6EF6               	movwf	tblptrl,c
 12721  000D1E  0EFD               	movlw	high _dpowers
 12722  000D20  20F4               	addwfc	prodh,w,c
 12723  000D22  6EF7               	movwf	tblptrh,c
 12724  000D24                     	if	0	;There are less than 3 active tblptr bytes
 12725  000D24                     	endif
 12726  000D24  0009               	tblrd		*+
 12727  000D26  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 12728  000D2A  0009               	tblrd		*+
 12729  000D2C  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 12730  000D30  0009               	tblrd		*+
 12731  000D32  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 12732  000D36  000A               	tblrd		*-
 12733  000D38  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 12734  000D3C  ECF8  F021         	call	i2___lldiv	;wreg free
 12735  000D40  C001  F066         	movff	?i2___lldiv,i2printf@tmpval
 12736  000D44  C002  F067         	movff	?i2___lldiv+1,i2printf@tmpval+1
 12737  000D48  C003  F068         	movff	?i2___lldiv+2,i2printf@tmpval+2
 12738  000D4C  C004  F069         	movff	?i2___lldiv+3,i2printf@tmpval+3
 12739                           
 12740                           ;doprnt.c: 1202: tmpval.vd %= 10;
 12741  000D50  C066  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 12742  000D54  C067  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 12743  000D58  C068  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 12744  000D5C  C069  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 12745  000D60  0E0A               	movlw	10
 12746  000D62  6E12               	movwf	i2___llmod@divisor,c
 12747  000D64  0E00               	movlw	0
 12748  000D66  6E13               	movwf	i2___llmod@divisor+1,c
 12749  000D68  0E00               	movlw	0
 12750  000D6A  6E14               	movwf	i2___llmod@divisor+2,c
 12751  000D6C  0E00               	movlw	0
 12752  000D6E  6E15               	movwf	i2___llmod@divisor+3,c
 12753  000D70  EC60  F023         	call	i2___llmod	;wreg free
 12754  000D74  C00E  F066         	movff	?i2___llmod,i2printf@tmpval
 12755  000D78  C00F  F067         	movff	?i2___llmod+1,i2printf@tmpval+1
 12756  000D7C  C010  F068         	movff	?i2___llmod+2,i2printf@tmpval+2
 12757  000D80  C011  F069         	movff	?i2___llmod+3,i2printf@tmpval+3
 12758                           
 12759                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 12760  000D84  5066               	movf	i2printf@tmpval,w,c
 12761  000D86  0F30               	addlw	48
 12762  000D88  ECFD  F025         	call	i2_putch
 12763  000D8C                     i2l6044:
 12764  000D8C  0671               	decf	i2printf@c,f,c
 12765  000D8E  2871               	incf	i2printf@c,w,c
 12766  000D90  B4D8               	btfsc	status,2,c
 12767  000D92  D007               	goto	i2l6050
 12768  000D94  D7B7               	goto	i2l6038
 12769  000D96                     i2l6046:
 12770                           
 12771                           ;doprnt.c: 1208: (putch('0') );
 12772  000D96  0E30               	movlw	48
 12773  000D98  ECFD  F025         	call	i2_putch
 12774                           
 12775                           ;doprnt.c: 1209: exp--;
 12776  000D9C  0664               	decf	i2printf@exp,f,c
 12777  000D9E  A0D8               	btfss	status,0,c
 12778  000DA0  0665               	decf	i2printf@exp+1,f,c
 12779  000DA2                     i2l6050:
 12780  000DA2  BE65               	btfsc	i2printf@exp+1,7,c
 12781  000DA4  D005               	goto	i2l6052
 12782  000DA6  5065               	movf	i2printf@exp+1,w,c
 12783  000DA8  E1F6               	bnz	i2l6046
 12784  000DAA  0464               	decf	i2printf@exp,w,c
 12785  000DAC  B0D8               	btfsc	status,0,c
 12786  000DAE  D7F3               	goto	i2l6046
 12787  000DB0                     i2l6052:
 12788                           
 12789                           ;doprnt.c: 1210: }
 12790                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 12791  000DB0  BE63               	btfsc	i2printf@prec+1,7,c
 12792  000DB2  D009               	goto	i2l687
 12793  000DB4  5063               	movf	i2printf@prec+1,w,c
 12794  000DB6  E104               	bnz	i2u633_40
 12795  000DB8  0E09               	movlw	9
 12796  000DBA  5C62               	subwf	i2printf@prec,w,c
 12797  000DBC  A0D8               	btfss	status,0,c
 12798  000DBE  D003               	goto	i2l687
 12799  000DC0                     i2u633_40:
 12800                           
 12801                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 12802  000DC0  0E08               	movlw	8
 12803  000DC2  6E71               	movwf	i2printf@c,c
 12804  000DC4  D002               	goto	i2l6056
 12805  000DC6                     i2l687:
 12806                           
 12807                           ;doprnt.c: 1213: else
 12808                           ;doprnt.c: 1214: c = prec;
 12809  000DC6  C062  F071         	movff	i2printf@prec,i2printf@c
 12810  000DCA                     i2l6056:
 12811                           
 12812                           ;doprnt.c: 1215: prec -= c;
 12813  000DCA  5071               	movf	i2printf@c,w,c
 12814  000DCC  5E62               	subwf	i2printf@prec,f,c
 12815  000DCE  0E00               	movlw	0
 12816  000DD0  BE71               	btfsc	i2printf@c,7,c
 12817  000DD2  0EFF               	movlw	255
 12818  000DD4  5A63               	subwfb	i2printf@prec+1,f,c
 12819                           
 12820                           ;doprnt.c: 1219: if(c)
 12821  000DD6  5071               	movf	i2printf@c,w,c
 12822  000DD8  B4D8               	btfsc	status,2,c
 12823  000DDA  D003               	goto	i2l6062
 12824                           
 12825                           ;doprnt.c: 1221: (putch('.') );
 12826  000DDC  0E2E               	movlw	46
 12827  000DDE  ECFD  F025         	call	i2_putch
 12828  000DE2                     i2l6062:
 12829                           
 12830                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 12831  000DE2  5071               	movf	i2printf@c,w,c
 12832  000DE4  EC05  F00B         	call	i2_scale
 12833  000DE8  C02B  F05A         	movff	?i2_scale,i2_printf$1553
 12834  000DEC  C02C  F05B         	movff	?i2_scale+1,i2_printf$1553+1
 12835  000DF0  C02D  F05C         	movff	?i2_scale+2,i2_printf$1553+2
 12836                           
 12837                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 12838  000DF4  C06E  F01F         	movff	i2printf@fval,i2___ftmul@f2
 12839  000DF8  C06F  F020         	movff	i2printf@fval+1,i2___ftmul@f2+1
 12840  000DFC  C070  F021         	movff	i2printf@fval+2,i2___ftmul@f2+2
 12841  000E00  C05A  F01C         	movff	i2_printf$1553,i2___ftmul@f1
 12842  000E04  C05B  F01D         	movff	i2_printf$1553+1,i2___ftmul@f1+1
 12843  000E08  C05C  F01E         	movff	i2_printf$1553+2,i2___ftmul@f1+2
 12844  000E0C  EC7B  F01B         	call	i2___ftmul	;wreg free
 12845  000E10  C01C  F041         	movff	?i2___ftmul,i2___fttol@f1
 12846  000E14  C01D  F042         	movff	?i2___ftmul+1,i2___fttol@f1+1
 12847  000E18  C01E  F043         	movff	?i2___ftmul+2,i2___fttol@f1+2
 12848  000E1C  ECF5  F01B         	call	i2___fttol	;wreg free
 12849  000E20  C041  F06A         	movff	?i2___fttol,i2printf@val
 12850  000E24  C042  F06B         	movff	?i2___fttol+1,i2printf@val+1
 12851  000E28  C043  F06C         	movff	?i2___fttol+2,i2printf@val+2
 12852  000E2C  C044  F06D         	movff	?i2___fttol+3,i2printf@val+3
 12853                           
 12854                           ;doprnt.c: 1228: while(c--) {
 12855  000E30  D06A               	goto	i2l6072
 12856  000E32                     i2l6066:
 12857                           
 12858                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 12859  000E32  C06A  F001         	movff	i2printf@val,i2___lldiv@dividend
 12860  000E36  C06B  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 12861  000E3A  C06C  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 12862  000E3E  C06D  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 12863  000E42  5071               	movf	i2printf@c,w,c
 12864  000E44  0D04               	mullw	4
 12865  000E46  0EC3               	movlw	low _dpowers
 12866  000E48  24F3               	addwf	prodl,w,c
 12867  000E4A  6EF6               	movwf	tblptrl,c
 12868  000E4C  0EFD               	movlw	high _dpowers
 12869  000E4E  20F4               	addwfc	prodh,w,c
 12870  000E50  6EF7               	movwf	tblptrh,c
 12871  000E52                     	if	0	;There are less than 3 active tblptr bytes
 12872  000E52                     	endif
 12873  000E52  0009               	tblrd		*+
 12874  000E54  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 12875  000E58  0009               	tblrd		*+
 12876  000E5A  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 12877  000E5E  0009               	tblrd		*+
 12878  000E60  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 12879  000E64  000A               	tblrd		*-
 12880  000E66  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 12881  000E6A  ECF8  F021         	call	i2___lldiv	;wreg free
 12882  000E6E  C001  F066         	movff	?i2___lldiv,i2printf@tmpval
 12883  000E72  C002  F067         	movff	?i2___lldiv+1,i2printf@tmpval+1
 12884  000E76  C003  F068         	movff	?i2___lldiv+2,i2printf@tmpval+2
 12885  000E7A  C004  F069         	movff	?i2___lldiv+3,i2printf@tmpval+3
 12886                           
 12887                           ;doprnt.c: 1230: tmpval.vd %= 10;
 12888  000E7E  C066  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 12889  000E82  C067  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 12890  000E86  C068  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 12891  000E8A  C069  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 12892  000E8E  0E0A               	movlw	10
 12893  000E90  6E12               	movwf	i2___llmod@divisor,c
 12894  000E92  0E00               	movlw	0
 12895  000E94  6E13               	movwf	i2___llmod@divisor+1,c
 12896  000E96  0E00               	movlw	0
 12897  000E98  6E14               	movwf	i2___llmod@divisor+2,c
 12898  000E9A  0E00               	movlw	0
 12899  000E9C  6E15               	movwf	i2___llmod@divisor+3,c
 12900  000E9E  EC60  F023         	call	i2___llmod	;wreg free
 12901  000EA2  C00E  F066         	movff	?i2___llmod,i2printf@tmpval
 12902  000EA6  C00F  F067         	movff	?i2___llmod+1,i2printf@tmpval+1
 12903  000EAA  C010  F068         	movff	?i2___llmod+2,i2printf@tmpval+2
 12904  000EAE  C011  F069         	movff	?i2___llmod+3,i2printf@tmpval+3
 12905                           
 12906                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 12907  000EB2  5066               	movf	i2printf@tmpval,w,c
 12908  000EB4  0F30               	addlw	48
 12909  000EB6  ECFD  F025         	call	i2_putch
 12910                           
 12911                           ;doprnt.c: 1232: val %= dpowers[c];
 12912  000EBA  C06A  F00E         	movff	i2printf@val,i2___llmod@dividend
 12913  000EBE  C06B  F00F         	movff	i2printf@val+1,i2___llmod@dividend+1
 12914  000EC2  C06C  F010         	movff	i2printf@val+2,i2___llmod@dividend+2
 12915  000EC6  C06D  F011         	movff	i2printf@val+3,i2___llmod@dividend+3
 12916  000ECA  5071               	movf	i2printf@c,w,c
 12917  000ECC  0D04               	mullw	4
 12918  000ECE  0EC3               	movlw	low _dpowers
 12919  000ED0  24F3               	addwf	prodl,w,c
 12920  000ED2  6EF6               	movwf	tblptrl,c
 12921  000ED4  0EFD               	movlw	high _dpowers
 12922  000ED6  20F4               	addwfc	prodh,w,c
 12923  000ED8  6EF7               	movwf	tblptrh,c
 12924  000EDA                     	if	0	;There are less than 3 active tblptr bytes
 12925  000EDA                     	endif
 12926  000EDA  0009               	tblrd		*+
 12927  000EDC  CFF5 F012          	movff	tablat,i2___llmod@divisor
 12928  000EE0  0009               	tblrd		*+
 12929  000EE2  CFF5 F013          	movff	tablat,i2___llmod@divisor+1
 12930  000EE6  0009               	tblrd		*+
 12931  000EE8  CFF5 F014          	movff	tablat,i2___llmod@divisor+2
 12932  000EEC  000A               	tblrd		*-
 12933  000EEE  CFF5 F015          	movff	tablat,i2___llmod@divisor+3
 12934  000EF2  EC60  F023         	call	i2___llmod	;wreg free
 12935  000EF6  C00E  F06A         	movff	?i2___llmod,i2printf@val
 12936  000EFA  C00F  F06B         	movff	?i2___llmod+1,i2printf@val+1
 12937  000EFE  C010  F06C         	movff	?i2___llmod+2,i2printf@val+2
 12938  000F02  C011  F06D         	movff	?i2___llmod+3,i2printf@val+3
 12939  000F06                     i2l6072:
 12940  000F06  0671               	decf	i2printf@c,f,c
 12941  000F08  2871               	incf	i2printf@c,w,c
 12942  000F0A  B4D8               	btfsc	status,2,c
 12943  000F0C  D007               	goto	i2l6078
 12944  000F0E  D791               	goto	i2l6066
 12945  000F10                     i2l6074:
 12946                           
 12947                           ;doprnt.c: 1236: (putch('0') );
 12948  000F10  0E30               	movlw	48
 12949  000F12  ECFD  F025         	call	i2_putch
 12950                           
 12951                           ;doprnt.c: 1237: prec--;
 12952  000F16  0662               	decf	i2printf@prec,f,c
 12953  000F18  A0D8               	btfss	status,0,c
 12954  000F1A  0663               	decf	i2printf@prec+1,f,c
 12955  000F1C                     i2l6078:
 12956  000F1C  5062               	movf	i2printf@prec,w,c
 12957  000F1E  1063               	iorwf	i2printf@prec+1,w,c
 12958  000F20  B4D8               	btfsc	status,2,c
 12959  000F22  D10F               	goto	i2l6146
 12960  000F24  D7F5               	goto	i2l6074
 12961  000F26                     i2l659:
 12962                           
 12963                           ;doprnt.c: 1246: }
 12964                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 12965  000F26  BE60               	btfsc	i2printf@flag,7,c
 12966  000F28  D01E               	goto	i2l6090
 12967                           
 12968                           ;doprnt.c: 1253: {
 12969                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 12970  000F2A  C05E  FFD9         	movff	i2printf@ap,fsr2l
 12971  000F2E  C05F  FFDA         	movff	i2printf@ap+1,fsr2h
 12972  000F32  CFDE F06A          	movff	postinc2,i2printf@val
 12973  000F36  CFDD F06B          	movff	postdec2,i2printf@val+1
 12974  000F3A  0E00               	movlw	0
 12975  000F3C  BE6B               	btfsc	i2printf@val+1,7,c
 12976  000F3E  0EFF               	movlw	-1
 12977  000F40  6E6C               	movwf	i2printf@val+2,c
 12978  000F42  6E6D               	movwf	i2printf@val+3,c
 12979  000F44  0E02               	movlw	2
 12980  000F46  265E               	addwf	i2printf@ap,f,c
 12981  000F48  0E00               	movlw	0
 12982  000F4A  225F               	addwfc	i2printf@ap+1,f,c
 12983                           
 12984                           ;doprnt.c: 1261: if((long)val < 0) {
 12985  000F4C  AE6D               	btfss	i2printf@val+3,7,c
 12986  000F4E  D05A               	goto	i2l6124
 12987                           
 12988                           ;doprnt.c: 1262: flag |= 0x03;
 12989  000F50  0E03               	movlw	3
 12990  000F52  1260               	iorwf	i2printf@flag,f,c
 12991                           
 12992                           ;doprnt.c: 1263: val = -val;
 12993  000F54  1E6D               	comf	i2printf@val+3,f,c
 12994  000F56  1E6C               	comf	i2printf@val+2,f,c
 12995  000F58  1E6B               	comf	i2printf@val+1,f,c
 12996  000F5A  6C6A               	negf	i2printf@val,c
 12997  000F5C  0E00               	movlw	0
 12998  000F5E  226B               	addwfc	i2printf@val+1,f,c
 12999  000F60  226C               	addwfc	i2printf@val+2,f,c
 13000  000F62  226D               	addwfc	i2printf@val+3,f,c
 13001                           
 13002                           ;doprnt.c: 1264: }
 13003                           ;doprnt.c: 1266: }
 13004  000F64  D04F               	goto	i2l6124
 13005  000F66                     i2l6090:
 13006                           
 13007                           ;doprnt.c: 1268: else
 13008                           ;doprnt.c: 1273: {
 13009                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13010  000F66  C05E  FFD9         	movff	i2printf@ap,fsr2l
 13011  000F6A  C05F  FFDA         	movff	i2printf@ap+1,fsr2h
 13012  000F6E  CFDE F054          	movff	postinc2,??i2_printf
 13013  000F72  CFDD F055          	movff	postdec2,??i2_printf+1
 13014  000F76  C054  F06A         	movff	??i2_printf,i2printf@val
 13015  000F7A  C055  F06B         	movff	??i2_printf+1,i2printf@val+1
 13016  000F7E  6A6C               	clrf	i2printf@val+2,c
 13017  000F80  6A6D               	clrf	i2printf@val+3,c
 13018  000F82  0E02               	movlw	2
 13019  000F84  265E               	addwf	i2printf@ap,f,c
 13020  000F86  0E00               	movlw	0
 13021  000F88  225F               	addwfc	i2printf@ap+1,f,c
 13022                           
 13023                           ;doprnt.c: 1287: }
 13024                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 13025  000F8A  D03C               	goto	i2l6124
 13026  000F8C                     i2l6094:
 13027                           
 13028                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13029  000F8C  0E01               	movlw	1
 13030  000F8E  6E71               	movwf	i2printf@c,c
 13031  000F90                     i2l6096:
 13032  000F90  0E0A               	movlw	10
 13033  000F92  1871               	xorwf	i2printf@c,w,c
 13034  000F94  B4D8               	btfsc	status,2,c
 13035  000F96  D03E               	goto	i2l6126
 13036                           
 13037                           ;doprnt.c: 1306: if(val < dpowers[c])
 13038  000F98  5071               	movf	i2printf@c,w,c
 13039  000F9A  0D04               	mullw	4
 13040  000F9C  0EC3               	movlw	low _dpowers
 13041  000F9E  24F3               	addwf	prodl,w,c
 13042  000FA0  6EF6               	movwf	tblptrl,c
 13043  000FA2  0EFD               	movlw	high _dpowers
 13044  000FA4  20F4               	addwfc	prodh,w,c
 13045  000FA6  6EF7               	movwf	tblptrh,c
 13046  000FA8                     	if	0	;There are less than 3 active tblptr bytes
 13047  000FA8                     	endif
 13048  000FA8  0009               	tblrd		*+
 13049  000FAA  50F5               	movf	tablat,w,c
 13050  000FAC  5C6A               	subwf	i2printf@val,w,c
 13051  000FAE  0009               	tblrd		*+
 13052  000FB0  50F5               	movf	tablat,w,c
 13053  000FB2  586B               	subwfb	i2printf@val+1,w,c
 13054  000FB4  0009               	tblrd		*+
 13055  000FB6  50F5               	movf	tablat,w,c
 13056  000FB8  586C               	subwfb	i2printf@val+2,w,c
 13057  000FBA  0009               	tblrd		*+
 13058  000FBC  50F5               	movf	tablat,w,c
 13059  000FBE  586D               	subwfb	i2printf@val+3,w,c
 13060  000FC0  A0D8               	btfss	status,0,c
 13061  000FC2  D028               	goto	i2l6126
 13062                           
 13063                           ;doprnt.c: 1307: break;
 13064  000FC4  2A71               	incf	i2printf@c,f,c
 13065  000FC6  D7E4               	goto	i2l6096
 13066  000FC8                     i2l6108:
 13067                           
 13068                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 13069  000FC8  0E01               	movlw	1
 13070  000FCA  6E71               	movwf	i2printf@c,c
 13071  000FCC                     i2l6110:
 13072  000FCC  0E08               	movlw	8
 13073  000FCE  1871               	xorwf	i2printf@c,w,c
 13074  000FD0  B4D8               	btfsc	status,2,c
 13075  000FD2  D020               	goto	i2l6126
 13076                           
 13077                           ;doprnt.c: 1317: if(val < hexpowers[c])
 13078  000FD4  5071               	movf	i2printf@c,w,c
 13079  000FD6  0D04               	mullw	4
 13080  000FD8  0E39               	movlw	low _hexpowers
 13081  000FDA  24F3               	addwf	prodl,w,c
 13082  000FDC  6EF6               	movwf	tblptrl,c
 13083  000FDE  0EFE               	movlw	high _hexpowers
 13084  000FE0  20F4               	addwfc	prodh,w,c
 13085  000FE2  6EF7               	movwf	tblptrh,c
 13086  000FE4                     	if	0	;There are less than 3 active tblptr bytes
 13087  000FE4                     	endif
 13088  000FE4  0009               	tblrd		*+
 13089  000FE6  50F5               	movf	tablat,w,c
 13090  000FE8  5C6A               	subwf	i2printf@val,w,c
 13091  000FEA  0009               	tblrd		*+
 13092  000FEC  50F5               	movf	tablat,w,c
 13093  000FEE  586B               	subwfb	i2printf@val+1,w,c
 13094  000FF0  0009               	tblrd		*+
 13095  000FF2  50F5               	movf	tablat,w,c
 13096  000FF4  586C               	subwfb	i2printf@val+2,w,c
 13097  000FF6  0009               	tblrd		*+
 13098  000FF8  50F5               	movf	tablat,w,c
 13099  000FFA  586D               	subwfb	i2printf@val+3,w,c
 13100  000FFC  A0D8               	btfss	status,0,c
 13101  000FFE  D00A               	goto	i2l6126
 13102                           
 13103                           ;doprnt.c: 1318: break;
 13104  001000  2A71               	incf	i2printf@c,f,c
 13105  001002  D7E4               	goto	i2l6110
 13106  001004                     i2l6124:
 13107  001004  5060               	movf	i2printf@flag,w,c
 13108  001006  0B80               	andlw	128
 13109                           
 13110                           ; Switch size 1, requested type "space"
 13111                           ; Number of cases is 2, Range of values is 0 to 128
 13112                           ; switch strategies available:
 13113                           ; Name         Instructions Cycles
 13114                           ; simple_byte            7     4 (average)
 13115                           ;	Chosen strategy is simple_byte
 13116  001008  0A00               	xorlw	0	; case 0
 13117  00100A  B4D8               	btfsc	status,2,c
 13118  00100C  D7BF               	goto	i2l6094
 13119  00100E  0A80               	xorlw	128	; case 128
 13120  001010  B4D8               	btfsc	status,2,c
 13121  001012  D7DA               	goto	i2l6108
 13122  001014                     i2l6126:
 13123                           
 13124                           ;doprnt.c: 1422: {
 13125                           ;doprnt.c: 1438: if(flag & 0x03)
 13126  001014  0E03               	movlw	3
 13127  001016  1460               	andwf	i2printf@flag,w,c
 13128  001018  6E54               	movwf	??i2_printf& (0+255),c
 13129  00101A  0E00               	movlw	0
 13130  00101C  1461               	andwf	i2printf@flag+1,w,c
 13131  00101E  6E55               	movwf	(??i2_printf+1)& (0+255),c
 13132  001020  5054               	movf	??i2_printf,w,c
 13133  001022  1055               	iorwf	??i2_printf+1,w,c
 13134  001024  B4D8               	btfsc	status,2,c
 13135  001026  D003               	goto	i2l6130
 13136                           
 13137                           ;doprnt.c: 1439: (putch('-') );
 13138  001028  0E2D               	movlw	45
 13139  00102A  ECFD  F025         	call	i2_putch
 13140  00102E                     i2l6130:
 13141                           
 13142                           ;doprnt.c: 1469: }
 13143                           ;doprnt.c: 1472: prec = c;
 13144  00102E  5071               	movf	i2printf@c,w,c
 13145  001030  6E62               	movwf	i2printf@prec,c
 13146  001032  6A63               	clrf	i2printf@prec+1,c
 13147  001034  BE62               	btfsc	i2printf@prec,7,c
 13148  001036  0663               	decf	i2printf@prec+1,f,c
 13149                           
 13150                           ;doprnt.c: 1474: while(prec--) {
 13151  001038  D07C               	goto	i2l6144
 13152  00103A                     i2l6132:
 13153                           
 13154                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13155  00103A  C062  F054         	movff	i2printf@prec,??i2_printf
 13156  00103E  C063  F055         	movff	i2printf@prec+1,??i2_printf+1
 13157  001042  90D8               	bcf	status,0,c
 13158  001044  3654               	rlcf	??i2_printf,f,c
 13159  001046  3655               	rlcf	??i2_printf+1,f,c
 13160  001048  90D8               	bcf	status,0,c
 13161  00104A  3654               	rlcf	??i2_printf,f,c
 13162  00104C  3655               	rlcf	??i2_printf+1,f,c
 13163  00104E  0EC3               	movlw	low _dpowers
 13164  001050  2454               	addwf	??i2_printf,w,c
 13165  001052  6EF6               	movwf	tblptrl,c
 13166  001054  0EFD               	movlw	high _dpowers
 13167  001056  2055               	addwfc	??i2_printf+1,w,c
 13168  001058  6EF7               	movwf	tblptrh,c
 13169  00105A                     	if	0	;There are less than 3 active tblptr bytes
 13170  00105A                     	endif
 13171  00105A  0009               	tblrd		*+
 13172  00105C  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 13173  001060  0009               	tblrd		*+
 13174  001062  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 13175  001066  0009               	tblrd		*+
 13176  001068  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 13177  00106C  000A               	tblrd		*-
 13178  00106E  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 13179  001072  C06A  F001         	movff	i2printf@val,i2___lldiv@dividend
 13180  001076  C06B  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 13181  00107A  C06C  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 13182  00107E  C06D  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 13183  001082  ECF8  F021         	call	i2___lldiv	;wreg free
 13184  001086  C001  F00E         	movff	?i2___lldiv,i2___llmod@dividend
 13185  00108A  C002  F00F         	movff	?i2___lldiv+1,i2___llmod@dividend+1
 13186  00108E  C003  F010         	movff	?i2___lldiv+2,i2___llmod@dividend+2
 13187  001092  C004  F011         	movff	?i2___lldiv+3,i2___llmod@dividend+3
 13188  001096  0E0A               	movlw	10
 13189  001098  6E12               	movwf	i2___llmod@divisor,c
 13190  00109A  0E00               	movlw	0
 13191  00109C  6E13               	movwf	i2___llmod@divisor+1,c
 13192  00109E  0E00               	movlw	0
 13193  0010A0  6E14               	movwf	i2___llmod@divisor+2,c
 13194  0010A2  0E00               	movlw	0
 13195  0010A4  6E15               	movwf	i2___llmod@divisor+3,c
 13196  0010A6  EC60  F023         	call	i2___llmod	;wreg free
 13197  0010AA  500E               	movf	?i2___llmod,w,c
 13198  0010AC  0F30               	addlw	48
 13199  0010AE  6E71               	movwf	i2printf@c,c
 13200                           
 13201                           ;doprnt.c: 1491: break;
 13202  0010B0  D03D               	goto	i2l6142
 13203  0010B2                     i2l6134:
 13204                           
 13205                           ;doprnt.c: 1499: {
 13206                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 13207  0010B2  C06A  F001         	movff	i2printf@val,i2___lldiv@dividend
 13208  0010B6  C06B  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 13209  0010BA  C06C  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 13210  0010BE  C06D  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 13211  0010C2  C062  F054         	movff	i2printf@prec,??i2_printf
 13212  0010C6  C063  F055         	movff	i2printf@prec+1,??i2_printf+1
 13213  0010CA  90D8               	bcf	status,0,c
 13214  0010CC  3654               	rlcf	??i2_printf,f,c
 13215  0010CE  3655               	rlcf	??i2_printf+1,f,c
 13216  0010D0  90D8               	bcf	status,0,c
 13217  0010D2  3654               	rlcf	??i2_printf,f,c
 13218  0010D4  3655               	rlcf	??i2_printf+1,f,c
 13219  0010D6  0E39               	movlw	low _hexpowers
 13220  0010D8  2454               	addwf	??i2_printf,w,c
 13221  0010DA  6EF6               	movwf	tblptrl,c
 13222  0010DC  0EFE               	movlw	high _hexpowers
 13223  0010DE  2055               	addwfc	??i2_printf+1,w,c
 13224  0010E0  6EF7               	movwf	tblptrh,c
 13225  0010E2                     	if	0	;There are less than 3 active tblptr bytes
 13226  0010E2                     	endif
 13227  0010E2  0009               	tblrd		*+
 13228  0010E4  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 13229  0010E8  0009               	tblrd		*+
 13230  0010EA  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 13231  0010EE  0009               	tblrd		*+
 13232  0010F0  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 13233  0010F4  000A               	tblrd		*-
 13234  0010F6  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 13235  0010FA  ECF8  F021         	call	i2___lldiv	;wreg free
 13236  0010FE  5001               	movf	?i2___lldiv,w,c
 13237  001100  0B0F               	andlw	15
 13238  001102  6E5D               	movwf	i2printf@idx,c
 13239                           
 13240                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 13241  001104  505D               	movf	i2printf@idx,w,c
 13242  001106  0D01               	mullw	1
 13243  001108  0E37               	movlw	low STR_24
 13244  00110A  24F3               	addwf	prodl,w,c
 13245  00110C  6EF6               	movwf	tblptrl,c
 13246  00110E  0EFF               	movlw	high STR_24
 13247  001110  20F4               	addwfc	prodh,w,c
 13248  001112  6EF7               	movwf	tblptrh,c
 13249  001114                     	if	0	;There are less than 3 active tblptr bytes
 13250  001114                     	endif
 13251  001114  0008               	tblrd		*
 13252  001116  CFF5 F071          	movff	tablat,i2printf@c
 13253                           
 13254                           ;doprnt.c: 1523: }
 13255                           
 13256                           ;doprnt.c: 1508: }
 13257                           ;doprnt.c: 1510: break;
 13258  00111A  D008               	goto	i2l6142
 13259  00111C                     i2l6140:
 13260  00111C  5060               	movf	i2printf@flag,w,c
 13261  00111E  0B80               	andlw	128
 13262                           
 13263                           ; Switch size 1, requested type "space"
 13264                           ; Number of cases is 2, Range of values is 0 to 128
 13265                           ; switch strategies available:
 13266                           ; Name         Instructions Cycles
 13267                           ; simple_byte            7     4 (average)
 13268                           ;	Chosen strategy is simple_byte
 13269  001120  0A00               	xorlw	0	; case 0
 13270  001122  B4D8               	btfsc	status,2,c
 13271  001124  D78A               	goto	i2l6132
 13272  001126  0A80               	xorlw	128	; case 128
 13273  001128  B4D8               	btfsc	status,2,c
 13274  00112A  D7C3               	goto	i2l6134
 13275  00112C                     i2l6142:
 13276                           
 13277                           ;doprnt.c: 1524: (putch(c) );
 13278  00112C  5071               	movf	i2printf@c,w,c
 13279  00112E  ECFD  F025         	call	i2_putch
 13280  001132                     i2l6144:
 13281  001132  0662               	decf	i2printf@prec,f,c
 13282  001134  A0D8               	btfss	status,0,c
 13283  001136  0663               	decf	i2printf@prec+1,f,c
 13284  001138  2862               	incf	i2printf@prec,w,c
 13285  00113A  E1F0               	bnz	i2l6140
 13286  00113C  2863               	incf	i2printf@prec+1,w,c
 13287  00113E  A4D8               	btfss	status,2,c
 13288  001140  D7ED               	goto	i2l6140
 13289  001142                     i2l6146:
 13290  001142  C050  FFF6         	movff	i2printf@f,tblptrl
 13291  001146  C051  FFF7         	movff	i2printf@f+1,tblptrh
 13292  00114A  4A50               	infsnz	i2printf@f,f,c
 13293  00114C  2A51               	incf	i2printf@f+1,f,c
 13294  00114E                     	if	0	;tblptru may be non-zero
 13295  00114E                     	endif
 13296  00114E                     	if	0	;tblptru may be non-zero
 13297  00114E                     	endif
 13298  00114E  0008               	tblrd		*
 13299  001150  CFF5 F071          	movff	tablat,i2printf@c
 13300  001154  5071               	movf	i2printf@c,w,c
 13301  001156  B4D8               	btfsc	status,2,c
 13302  001158  0012               	return	
 13303  00115A  D409               	goto	i2l5928
 13304  00115C                     __end_ofi2_printf:
 13305                           	opt stack 0
 13306                           pclatu	equ	0xFFB
 13307                           pclath	equ	0xFFA
 13308                           tblptru	equ	0xFF8
 13309                           tblptrh	equ	0xFF7
 13310                           tblptrl	equ	0xFF6
 13311                           tablat	equ	0xFF5
 13312                           prodh	equ	0xFF4
 13313                           prodl	equ	0xFF3
 13314                           intcon	equ	0xFF2
 13315                           intcon3	equ	0xFF0
 13316                           postinc0	equ	0xFEE
 13317                           fsr0h	equ	0xFEA
 13318                           fsr0l	equ	0xFE9
 13319                           wreg	equ	0xFE8
 13320                           postdec1	equ	0xFE5
 13321                           fsr1h	equ	0xFE2
 13322                           fsr1l	equ	0xFE1
 13323                           indf2	equ	0xFDF
 13324                           postinc2	equ	0xFDE
 13325                           postdec2	equ	0xFDD
 13326                           fsr2h	equ	0xFDA
 13327                           fsr2l	equ	0xFD9
 13328                           status	equ	0xFD8
 13329                           
 13330 ;; *************** function i2_scale *****************
 13331 ;; Defined at:
 13332 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 13333 ;; Parameters:    Size  Location     Type
 13334 ;;  scl             1    wreg     char 
 13335 ;; Auto vars:     Size  Location     Type
 13336 ;;  scl             1   48[COMRAM] char 
 13337 ;; Return value:  Size  Location     Type
 13338 ;;                  3   42[COMRAM] char 
 13339 ;; Registers used:
 13340 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13341 ;; Tracked objects:
 13342 ;;		On entry : 0/0
 13343 ;;		On exit  : 0/0
 13344 ;;		Unchanged: 0/0
 13345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13346 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13347 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13349 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13350 ;;Total ram usage:        7 bytes
 13351 ;; Hardware stack levels used:    1
 13352 ;; Hardware stack levels required when called:    2
 13353 ;; This function calls:
 13354 ;;		i2___awdiv
 13355 ;;		i2___awmod
 13356 ;;		i2___ftmul
 13357 ;;		i2___wmul
 13358 ;; This function is called by:
 13359 ;;		i2_printf
 13360 ;; This function uses a non-reentrant model
 13361 ;;
 13362                           
 13363                           	psect	text47
 13364  00160A                     __ptext47:
 13365                           	opt stack 0
 13366  00160A                     i2_scale:
 13367                           	opt stack 19
 13368                           
 13369                           ;incstack = 0
 13370                           ;i2scale@scl stored from wreg
 13371  00160A  6E31               	movwf	i2scale@scl,c
 13372                           
 13373                           ;doprnt.c: 428: if(scl < 0) {
 13374  00160C  AE31               	btfss	i2scale@scl,7,c
 13375  00160E  D0FB               	goto	i2l5578
 13376                           
 13377                           ;doprnt.c: 429: scl = -scl;
 13378  001610  6C31               	negf	i2scale@scl,c
 13379                           
 13380                           ;doprnt.c: 430: if(scl>=110)
 13381  001612  5031               	movf	i2scale@scl,w,c
 13382  001614  0A80               	xorlw	128
 13383  001616  0F12               	addlw	-238
 13384  001618  A0D8               	btfss	status,0,c
 13385  00161A  D091               	goto	i2l5568
 13386                           
 13387                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 13388  00161C  0E00               	movlw	0
 13389  00161E  6E12               	movwf	i2___wmul@multiplicand+1,c
 13390  001620  0E03               	movlw	3
 13391  001622  6E11               	movwf	i2___wmul@multiplicand,c
 13392  001624  0E00               	movlw	0
 13393  001626  6E0A               	movwf	i2___awdiv@divisor+1,c
 13394  001628  0E0A               	movlw	10
 13395  00162A  6E09               	movwf	i2___awdiv@divisor,c
 13396  00162C  0E00               	movlw	0
 13397  00162E  6E04               	movwf	i2___awmod@divisor+1,c
 13398  001630  0E64               	movlw	100
 13399  001632  6E03               	movwf	i2___awmod@divisor,c
 13400  001634  5031               	movf	i2scale@scl,w,c
 13401  001636  6E01               	movwf	i2___awmod@dividend,c
 13402  001638  6A02               	clrf	i2___awmod@dividend+1,c
 13403  00163A  BE01               	btfsc	i2___awmod@dividend,7,c
 13404  00163C  0602               	decf	i2___awmod@dividend+1,f,c
 13405  00163E  EC28  F023         	call	i2___awmod	;wreg free
 13406  001642  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 13407  001646  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 13408  00164A  ECB6  F021         	call	i2___awdiv	;wreg free
 13409  00164E  0E09               	movlw	9
 13410  001650  2407               	addwf	?i2___awdiv,w,c
 13411  001652  6E0F               	movwf	i2___wmul@multiplier,c
 13412  001654  0E00               	movlw	0
 13413  001656  2008               	addwfc	?i2___awdiv+1,w,c
 13414  001658  6E10               	movwf	i2___wmul@multiplier+1,c
 13415  00165A  ECD8  F025         	call	i2___wmul	;wreg free
 13416  00165E  0EEB               	movlw	low __npowers_
 13417  001660  240F               	addwf	?i2___wmul,w,c
 13418  001662  6EF6               	movwf	tblptrl,c
 13419  001664  0EFD               	movlw	high __npowers_
 13420  001666  2010               	addwfc	?i2___wmul+1,w,c
 13421  001668  6EF7               	movwf	tblptrh,c
 13422  00166A                     	if	0	;There are less than 3 active tblptr bytes
 13423  00166A                     	endif
 13424  00166A  0009               	tblrd		*+
 13425  00166C  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 13426  001670  0009               	tblrd		*+
 13427  001672  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 13428  001676  000A               	tblrd		*-
 13429  001678  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 13430  00167C  0E00               	movlw	0
 13431  00167E  6E0A               	movwf	i2___awdiv@divisor+1,c
 13432  001680  0E64               	movlw	100
 13433  001682  6E09               	movwf	i2___awdiv@divisor,c
 13434  001684  5031               	movf	i2scale@scl,w,c
 13435  001686  6E07               	movwf	i2___awdiv@dividend,c
 13436  001688  6A08               	clrf	i2___awdiv@dividend+1,c
 13437  00168A  BE07               	btfsc	i2___awdiv@dividend,7,c
 13438  00168C  0608               	decf	i2___awdiv@dividend+1,f,c
 13439  00168E  ECB6  F021         	call	i2___awdiv	;wreg free
 13440  001692  0E12               	movlw	18
 13441  001694  2407               	addwf	?i2___awdiv,w,c
 13442  001696  6E0F               	movwf	i2___wmul@multiplier,c
 13443  001698  0E00               	movlw	0
 13444  00169A  2008               	addwfc	?i2___awdiv+1,w,c
 13445  00169C  6E10               	movwf	i2___wmul@multiplier+1,c
 13446  00169E  0E00               	movlw	0
 13447  0016A0  6E12               	movwf	i2___wmul@multiplicand+1,c
 13448  0016A2  0E03               	movlw	3
 13449  0016A4  6E11               	movwf	i2___wmul@multiplicand,c
 13450  0016A6  ECD8  F025         	call	i2___wmul	;wreg free
 13451  0016AA  0EEB               	movlw	low __npowers_
 13452  0016AC  240F               	addwf	?i2___wmul,w,c
 13453  0016AE  6EF6               	movwf	tblptrl,c
 13454  0016B0  0EFD               	movlw	high __npowers_
 13455  0016B2  2010               	addwfc	?i2___wmul+1,w,c
 13456  0016B4  6EF7               	movwf	tblptrh,c
 13457  0016B6                     	if	0	;There are less than 3 active tblptr bytes
 13458  0016B6                     	endif
 13459  0016B6  0009               	tblrd		*+
 13460  0016B8  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 13461  0016BC  0009               	tblrd		*+
 13462  0016BE  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 13463  0016C2  000A               	tblrd		*-
 13464  0016C4  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 13465  0016C8  EC7B  F01B         	call	i2___ftmul	;wreg free
 13466  0016CC  C01C  F02E         	movff	?i2___ftmul,i2_scale$1552
 13467  0016D0  C01D  F02F         	movff	?i2___ftmul+1,i2_scale$1552+1
 13468  0016D4  C01E  F030         	movff	?i2___ftmul+2,i2_scale$1552+2
 13469                           
 13470                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 13471  0016D8  C02E  F01C         	movff	i2_scale$1552,i2___ftmul@f1
 13472  0016DC  C02F  F01D         	movff	i2_scale$1552+1,i2___ftmul@f1+1
 13473  0016E0  C030  F01E         	movff	i2_scale$1552+2,i2___ftmul@f1+2
 13474  0016E4  0E00               	movlw	0
 13475  0016E6  6E12               	movwf	i2___wmul@multiplicand+1,c
 13476  0016E8  0E03               	movlw	3
 13477  0016EA  6E11               	movwf	i2___wmul@multiplicand,c
 13478  0016EC  0E00               	movlw	0
 13479  0016EE  6E04               	movwf	i2___awmod@divisor+1,c
 13480  0016F0  0E0A               	movlw	10
 13481  0016F2  6E03               	movwf	i2___awmod@divisor,c
 13482  0016F4  5031               	movf	i2scale@scl,w,c
 13483  0016F6  6E01               	movwf	i2___awmod@dividend,c
 13484  0016F8  6A02               	clrf	i2___awmod@dividend+1,c
 13485  0016FA  BE01               	btfsc	i2___awmod@dividend,7,c
 13486  0016FC  0602               	decf	i2___awmod@dividend+1,f,c
 13487  0016FE  EC28  F023         	call	i2___awmod	;wreg free
 13488  001702  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 13489  001706  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 13490  00170A  ECD8  F025         	call	i2___wmul	;wreg free
 13491  00170E  0EEB               	movlw	low __npowers_
 13492  001710  240F               	addwf	?i2___wmul,w,c
 13493  001712  6EF6               	movwf	tblptrl,c
 13494  001714  0EFD               	movlw	high __npowers_
 13495  001716  2010               	addwfc	?i2___wmul+1,w,c
 13496  001718  6EF7               	movwf	tblptrh,c
 13497  00171A                     	if	0	;There are less than 3 active tblptr bytes
 13498  00171A                     	endif
 13499  00171A  0009               	tblrd		*+
 13500  00171C  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 13501  001720  0009               	tblrd		*+
 13502  001722  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 13503  001726  000A               	tblrd		*-
 13504  001728  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 13505  00172C  EC7B  F01B         	call	i2___ftmul	;wreg free
 13506  001730  C01C  F02B         	movff	?i2___ftmul,?i2_scale
 13507  001734  C01D  F02C         	movff	?i2___ftmul+1,?i2_scale+1
 13508  001738  C01E  F02D         	movff	?i2___ftmul+2,?i2_scale+2
 13509  00173C  0012               	return	
 13510  00173E                     i2l5568:
 13511                           
 13512                           ;doprnt.c: 432: else if(scl > 10)
 13513  00173E  5031               	movf	i2scale@scl,w,c
 13514  001740  0A80               	xorlw	128
 13515  001742  0F75               	addlw	-139
 13516  001744  A0D8               	btfss	status,0,c
 13517  001746  D04D               	goto	i2l5574
 13518                           
 13519                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 13520  001748  0E00               	movlw	0
 13521  00174A  6E0A               	movwf	i2___awdiv@divisor+1,c
 13522  00174C  0E0A               	movlw	10
 13523  00174E  6E09               	movwf	i2___awdiv@divisor,c
 13524  001750  5031               	movf	i2scale@scl,w,c
 13525  001752  6E07               	movwf	i2___awdiv@dividend,c
 13526  001754  6A08               	clrf	i2___awdiv@dividend+1,c
 13527  001756  BE07               	btfsc	i2___awdiv@dividend,7,c
 13528  001758  0608               	decf	i2___awdiv@dividend+1,f,c
 13529  00175A  ECB6  F021         	call	i2___awdiv	;wreg free
 13530  00175E  0E09               	movlw	9
 13531  001760  2407               	addwf	?i2___awdiv,w,c
 13532  001762  6E0F               	movwf	i2___wmul@multiplier,c
 13533  001764  0E00               	movlw	0
 13534  001766  2008               	addwfc	?i2___awdiv+1,w,c
 13535  001768  6E10               	movwf	i2___wmul@multiplier+1,c
 13536  00176A  0E00               	movlw	0
 13537  00176C  6E12               	movwf	i2___wmul@multiplicand+1,c
 13538  00176E  0E03               	movlw	3
 13539  001770  6E11               	movwf	i2___wmul@multiplicand,c
 13540  001772  ECD8  F025         	call	i2___wmul	;wreg free
 13541  001776  0EEB               	movlw	low __npowers_
 13542  001778  240F               	addwf	?i2___wmul,w,c
 13543  00177A  6EF6               	movwf	tblptrl,c
 13544  00177C  0EFD               	movlw	high __npowers_
 13545  00177E  2010               	addwfc	?i2___wmul+1,w,c
 13546  001780  6EF7               	movwf	tblptrh,c
 13547  001782                     	if	0	;There are less than 3 active tblptr bytes
 13548  001782                     	endif
 13549  001782  0009               	tblrd		*+
 13550  001784  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 13551  001788  0009               	tblrd		*+
 13552  00178A  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 13553  00178E  000A               	tblrd		*-
 13554  001790  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 13555  001794  0E00               	movlw	0
 13556  001796  6E12               	movwf	i2___wmul@multiplicand+1,c
 13557  001798  0E03               	movlw	3
 13558  00179A  6E11               	movwf	i2___wmul@multiplicand,c
 13559  00179C  0E00               	movlw	0
 13560  00179E  6E04               	movwf	i2___awmod@divisor+1,c
 13561  0017A0  0E0A               	movlw	10
 13562  0017A2  6E03               	movwf	i2___awmod@divisor,c
 13563  0017A4  5031               	movf	i2scale@scl,w,c
 13564  0017A6  6E01               	movwf	i2___awmod@dividend,c
 13565  0017A8  6A02               	clrf	i2___awmod@dividend+1,c
 13566  0017AA  BE01               	btfsc	i2___awmod@dividend,7,c
 13567  0017AC  0602               	decf	i2___awmod@dividend+1,f,c
 13568  0017AE  EC28  F023         	call	i2___awmod	;wreg free
 13569  0017B2  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 13570  0017B6  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 13571  0017BA  ECD8  F025         	call	i2___wmul	;wreg free
 13572  0017BE  0EEB               	movlw	low __npowers_
 13573  0017C0  240F               	addwf	?i2___wmul,w,c
 13574  0017C2  6EF6               	movwf	tblptrl,c
 13575  0017C4  0EFD               	movlw	high __npowers_
 13576  0017C6  2010               	addwfc	?i2___wmul+1,w,c
 13577  0017C8  6EF7               	movwf	tblptrh,c
 13578  0017CA                     	if	0	;There are less than 3 active tblptr bytes
 13579  0017CA                     	endif
 13580  0017CA  0009               	tblrd		*+
 13581  0017CC  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 13582  0017D0  0009               	tblrd		*+
 13583  0017D2  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 13584  0017D6  000A               	tblrd		*-
 13585  0017D8  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 13586  0017DC  EC7B  F01B         	call	i2___ftmul	;wreg free
 13587  0017E0  D7A7               	goto	L6
 13588  0017E2                     i2l5574:
 13589                           
 13590                           ;doprnt.c: 434: return _npowers_[scl];
 13591  0017E2  5031               	movf	i2scale@scl,w,c
 13592  0017E4  0D03               	mullw	3
 13593  0017E6  0EEB               	movlw	low __npowers_
 13594  0017E8  24F3               	addwf	prodl,w,c
 13595  0017EA  6EF6               	movwf	tblptrl,c
 13596  0017EC  0EFD               	movlw	high __npowers_
 13597  0017EE  20F4               	addwfc	prodh,w,c
 13598  0017F0  6EF7               	movwf	tblptrh,c
 13599  0017F2                     	if	0	;There are less than 3 active tblptr bytes
 13600  0017F2                     	endif
 13601  0017F2  0009               	tblrd		*+
 13602  0017F4  CFF5 F02B          	movff	tablat,?i2_scale
 13603  0017F8  0009               	tblrd		*+
 13604  0017FA  CFF5 F02C          	movff	tablat,?i2_scale+1
 13605  0017FE  000A               	tblrd		*-
 13606  001800  CFF5 F02D          	movff	tablat,?i2_scale+2
 13607  001804  0012               	return	
 13608  001806                     i2l5578:
 13609                           
 13610                           ;doprnt.c: 435: }
 13611                           ;doprnt.c: 436: if(scl>=110)
 13612  001806  5031               	movf	i2scale@scl,w,c
 13613  001808  0A80               	xorlw	128
 13614  00180A  0F12               	addlw	-238
 13615  00180C  A0D8               	btfss	status,0,c
 13616  00180E  D091               	goto	i2l5586
 13617                           
 13618                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 13619  001810  0E00               	movlw	0
 13620  001812  6E12               	movwf	i2___wmul@multiplicand+1,c
 13621  001814  0E03               	movlw	3
 13622  001816  6E11               	movwf	i2___wmul@multiplicand,c
 13623  001818  0E00               	movlw	0
 13624  00181A  6E0A               	movwf	i2___awdiv@divisor+1,c
 13625  00181C  0E0A               	movlw	10
 13626  00181E  6E09               	movwf	i2___awdiv@divisor,c
 13627  001820  0E00               	movlw	0
 13628  001822  6E04               	movwf	i2___awmod@divisor+1,c
 13629  001824  0E64               	movlw	100
 13630  001826  6E03               	movwf	i2___awmod@divisor,c
 13631  001828  5031               	movf	i2scale@scl,w,c
 13632  00182A  6E01               	movwf	i2___awmod@dividend,c
 13633  00182C  6A02               	clrf	i2___awmod@dividend+1,c
 13634  00182E  BE01               	btfsc	i2___awmod@dividend,7,c
 13635  001830  0602               	decf	i2___awmod@dividend+1,f,c
 13636  001832  EC28  F023         	call	i2___awmod	;wreg free
 13637  001836  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 13638  00183A  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 13639  00183E  ECB6  F021         	call	i2___awdiv	;wreg free
 13640  001842  0E09               	movlw	9
 13641  001844  2407               	addwf	?i2___awdiv,w,c
 13642  001846  6E0F               	movwf	i2___wmul@multiplier,c
 13643  001848  0E00               	movlw	0
 13644  00184A  2008               	addwfc	?i2___awdiv+1,w,c
 13645  00184C  6E10               	movwf	i2___wmul@multiplier+1,c
 13646  00184E  ECD8  F025         	call	i2___wmul	;wreg free
 13647  001852  0E12               	movlw	low __powers_
 13648  001854  240F               	addwf	?i2___wmul,w,c
 13649  001856  6EF6               	movwf	tblptrl,c
 13650  001858  0EFE               	movlw	high __powers_
 13651  00185A  2010               	addwfc	?i2___wmul+1,w,c
 13652  00185C  6EF7               	movwf	tblptrh,c
 13653  00185E                     	if	0	;There are less than 3 active tblptr bytes
 13654  00185E                     	endif
 13655  00185E  0009               	tblrd		*+
 13656  001860  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 13657  001864  0009               	tblrd		*+
 13658  001866  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 13659  00186A  000A               	tblrd		*-
 13660  00186C  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 13661  001870  0E00               	movlw	0
 13662  001872  6E0A               	movwf	i2___awdiv@divisor+1,c
 13663  001874  0E64               	movlw	100
 13664  001876  6E09               	movwf	i2___awdiv@divisor,c
 13665  001878  5031               	movf	i2scale@scl,w,c
 13666  00187A  6E07               	movwf	i2___awdiv@dividend,c
 13667  00187C  6A08               	clrf	i2___awdiv@dividend+1,c
 13668  00187E  BE07               	btfsc	i2___awdiv@dividend,7,c
 13669  001880  0608               	decf	i2___awdiv@dividend+1,f,c
 13670  001882  ECB6  F021         	call	i2___awdiv	;wreg free
 13671  001886  0E12               	movlw	18
 13672  001888  2407               	addwf	?i2___awdiv,w,c
 13673  00188A  6E0F               	movwf	i2___wmul@multiplier,c
 13674  00188C  0E00               	movlw	0
 13675  00188E  2008               	addwfc	?i2___awdiv+1,w,c
 13676  001890  6E10               	movwf	i2___wmul@multiplier+1,c
 13677  001892  0E00               	movlw	0
 13678  001894  6E12               	movwf	i2___wmul@multiplicand+1,c
 13679  001896  0E03               	movlw	3
 13680  001898  6E11               	movwf	i2___wmul@multiplicand,c
 13681  00189A  ECD8  F025         	call	i2___wmul	;wreg free
 13682  00189E  0E12               	movlw	low __powers_
 13683  0018A0  240F               	addwf	?i2___wmul,w,c
 13684  0018A2  6EF6               	movwf	tblptrl,c
 13685  0018A4  0EFE               	movlw	high __powers_
 13686  0018A6  2010               	addwfc	?i2___wmul+1,w,c
 13687  0018A8  6EF7               	movwf	tblptrh,c
 13688  0018AA                     	if	0	;There are less than 3 active tblptr bytes
 13689  0018AA                     	endif
 13690  0018AA  0009               	tblrd		*+
 13691  0018AC  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 13692  0018B0  0009               	tblrd		*+
 13693  0018B2  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 13694  0018B6  000A               	tblrd		*-
 13695  0018B8  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 13696  0018BC  EC7B  F01B         	call	i2___ftmul	;wreg free
 13697  0018C0  C01C  F02E         	movff	?i2___ftmul,i2_scale$1552
 13698  0018C4  C01D  F02F         	movff	?i2___ftmul+1,i2_scale$1552+1
 13699  0018C8  C01E  F030         	movff	?i2___ftmul+2,i2_scale$1552+2
 13700                           
 13701                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 13702  0018CC  C02E  F01C         	movff	i2_scale$1552,i2___ftmul@f1
 13703  0018D0  C02F  F01D         	movff	i2_scale$1552+1,i2___ftmul@f1+1
 13704  0018D4  C030  F01E         	movff	i2_scale$1552+2,i2___ftmul@f1+2
 13705  0018D8  0E00               	movlw	0
 13706  0018DA  6E12               	movwf	i2___wmul@multiplicand+1,c
 13707  0018DC  0E03               	movlw	3
 13708  0018DE  6E11               	movwf	i2___wmul@multiplicand,c
 13709  0018E0  0E00               	movlw	0
 13710  0018E2  6E04               	movwf	i2___awmod@divisor+1,c
 13711  0018E4  0E0A               	movlw	10
 13712  0018E6  6E03               	movwf	i2___awmod@divisor,c
 13713  0018E8  5031               	movf	i2scale@scl,w,c
 13714  0018EA  6E01               	movwf	i2___awmod@dividend,c
 13715  0018EC  6A02               	clrf	i2___awmod@dividend+1,c
 13716  0018EE  BE01               	btfsc	i2___awmod@dividend,7,c
 13717  0018F0  0602               	decf	i2___awmod@dividend+1,f,c
 13718  0018F2  EC28  F023         	call	i2___awmod	;wreg free
 13719  0018F6  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 13720  0018FA  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 13721  0018FE  ECD8  F025         	call	i2___wmul	;wreg free
 13722  001902  0E12               	movlw	low __powers_
 13723  001904  240F               	addwf	?i2___wmul,w,c
 13724  001906  6EF6               	movwf	tblptrl,c
 13725  001908  0EFE               	movlw	high __powers_
 13726  00190A  2010               	addwfc	?i2___wmul+1,w,c
 13727  00190C  6EF7               	movwf	tblptrh,c
 13728  00190E                     	if	0	;There are less than 3 active tblptr bytes
 13729  00190E                     	endif
 13730  00190E  0009               	tblrd		*+
 13731  001910  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 13732  001914  0009               	tblrd		*+
 13733  001916  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 13734  00191A  000A               	tblrd		*-
 13735  00191C  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 13736  001920  EC7B  F01B         	call	i2___ftmul	;wreg free
 13737  001924  C01C  F02B         	movff	?i2___ftmul,?i2_scale
 13738  001928  C01D  F02C         	movff	?i2___ftmul+1,?i2_scale+1
 13739  00192C  C01E  F02D         	movff	?i2___ftmul+2,?i2_scale+2
 13740  001930  0012               	return	
 13741  001932                     i2l5586:
 13742                           
 13743                           ;doprnt.c: 438: else if(scl > 10)
 13744  001932  5031               	movf	i2scale@scl,w,c
 13745  001934  0A80               	xorlw	128
 13746  001936  0F75               	addlw	-139
 13747  001938  A0D8               	btfss	status,0,c
 13748  00193A  D04D               	goto	i2l5592
 13749                           
 13750                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 13751  00193C  0E00               	movlw	0
 13752  00193E  6E0A               	movwf	i2___awdiv@divisor+1,c
 13753  001940  0E0A               	movlw	10
 13754  001942  6E09               	movwf	i2___awdiv@divisor,c
 13755  001944  5031               	movf	i2scale@scl,w,c
 13756  001946  6E07               	movwf	i2___awdiv@dividend,c
 13757  001948  6A08               	clrf	i2___awdiv@dividend+1,c
 13758  00194A  BE07               	btfsc	i2___awdiv@dividend,7,c
 13759  00194C  0608               	decf	i2___awdiv@dividend+1,f,c
 13760  00194E  ECB6  F021         	call	i2___awdiv	;wreg free
 13761  001952  0E09               	movlw	9
 13762  001954  2407               	addwf	?i2___awdiv,w,c
 13763  001956  6E0F               	movwf	i2___wmul@multiplier,c
 13764  001958  0E00               	movlw	0
 13765  00195A  2008               	addwfc	?i2___awdiv+1,w,c
 13766  00195C  6E10               	movwf	i2___wmul@multiplier+1,c
 13767  00195E  0E00               	movlw	0
 13768  001960  6E12               	movwf	i2___wmul@multiplicand+1,c
 13769  001962  0E03               	movlw	3
 13770  001964  6E11               	movwf	i2___wmul@multiplicand,c
 13771  001966  ECD8  F025         	call	i2___wmul	;wreg free
 13772  00196A  0E12               	movlw	low __powers_
 13773  00196C  240F               	addwf	?i2___wmul,w,c
 13774  00196E  6EF6               	movwf	tblptrl,c
 13775  001970  0EFE               	movlw	high __powers_
 13776  001972  2010               	addwfc	?i2___wmul+1,w,c
 13777  001974  6EF7               	movwf	tblptrh,c
 13778  001976                     	if	0	;There are less than 3 active tblptr bytes
 13779  001976                     	endif
 13780  001976  0009               	tblrd		*+
 13781  001978  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 13782  00197C  0009               	tblrd		*+
 13783  00197E  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 13784  001982  000A               	tblrd		*-
 13785  001984  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 13786  001988  0E00               	movlw	0
 13787  00198A  6E12               	movwf	i2___wmul@multiplicand+1,c
 13788  00198C  0E03               	movlw	3
 13789  00198E  6E11               	movwf	i2___wmul@multiplicand,c
 13790  001990  0E00               	movlw	0
 13791  001992  6E04               	movwf	i2___awmod@divisor+1,c
 13792  001994  0E0A               	movlw	10
 13793  001996  6E03               	movwf	i2___awmod@divisor,c
 13794  001998  5031               	movf	i2scale@scl,w,c
 13795  00199A  6E01               	movwf	i2___awmod@dividend,c
 13796  00199C  6A02               	clrf	i2___awmod@dividend+1,c
 13797  00199E  BE01               	btfsc	i2___awmod@dividend,7,c
 13798  0019A0  0602               	decf	i2___awmod@dividend+1,f,c
 13799  0019A2  EC28  F023         	call	i2___awmod	;wreg free
 13800  0019A6  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 13801  0019AA  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 13802  0019AE  ECD8  F025         	call	i2___wmul	;wreg free
 13803  0019B2  0E12               	movlw	low __powers_
 13804  0019B4  240F               	addwf	?i2___wmul,w,c
 13805  0019B6  6EF6               	movwf	tblptrl,c
 13806  0019B8  0EFE               	movlw	high __powers_
 13807  0019BA  2010               	addwfc	?i2___wmul+1,w,c
 13808  0019BC  6EF7               	movwf	tblptrh,c
 13809  0019BE                     	if	0	;There are less than 3 active tblptr bytes
 13810  0019BE                     	endif
 13811  0019BE  0009               	tblrd		*+
 13812  0019C0  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 13813  0019C4  0009               	tblrd		*+
 13814  0019C6  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 13815  0019CA  000A               	tblrd		*-
 13816  0019CC  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 13817  0019D0  EC7B  F01B         	call	i2___ftmul	;wreg free
 13818  0019D4  D7A7               	goto	L7
 13819  0019D6                     i2l5592:
 13820                           
 13821                           ;doprnt.c: 440: return _powers_[scl];
 13822  0019D6  5031               	movf	i2scale@scl,w,c
 13823  0019D8  0D03               	mullw	3
 13824  0019DA  0E12               	movlw	low __powers_
 13825  0019DC  24F3               	addwf	prodl,w,c
 13826  0019DE  6EF6               	movwf	tblptrl,c
 13827  0019E0  0EFE               	movlw	high __powers_
 13828  0019E2  20F4               	addwfc	prodh,w,c
 13829  0019E4  6EF7               	movwf	tblptrh,c
 13830  0019E6                     	if	0	;There are less than 3 active tblptr bytes
 13831  0019E6                     	endif
 13832  0019E6  0009               	tblrd		*+
 13833  0019E8  CFF5 F02B          	movff	tablat,?i2_scale
 13834  0019EC  0009               	tblrd		*+
 13835  0019EE  CFF5 F02C          	movff	tablat,?i2_scale+1
 13836  0019F2  000A               	tblrd		*-
 13837  0019F4  CFF5 F02D          	movff	tablat,?i2_scale+2
 13838  0019F8  0012               	return	
 13839  0019FA                     __end_ofi2_scale:
 13840                           	opt stack 0
 13841                           pclatu	equ	0xFFB
 13842                           pclath	equ	0xFFA
 13843                           tblptru	equ	0xFF8
 13844                           tblptrh	equ	0xFF7
 13845                           tblptrl	equ	0xFF6
 13846                           tablat	equ	0xFF5
 13847                           prodh	equ	0xFF4
 13848                           prodl	equ	0xFF3
 13849                           intcon	equ	0xFF2
 13850                           intcon3	equ	0xFF0
 13851                           postinc0	equ	0xFEE
 13852                           fsr0h	equ	0xFEA
 13853                           fsr0l	equ	0xFE9
 13854                           wreg	equ	0xFE8
 13855                           postdec1	equ	0xFE5
 13856                           fsr1h	equ	0xFE2
 13857                           fsr1l	equ	0xFE1
 13858                           indf2	equ	0xFDF
 13859                           postinc2	equ	0xFDE
 13860                           postdec2	equ	0xFDD
 13861                           fsr2h	equ	0xFDA
 13862                           fsr2l	equ	0xFD9
 13863                           status	equ	0xFD8
 13864                           
 13865 ;; *************** function i2_putch *****************
 13866 ;; Defined at:
 13867 ;;		line 35 in file "lcd.c"
 13868 ;; Parameters:    Size  Location     Type
 13869 ;;  data            1    wreg     unsigned char 
 13870 ;; Auto vars:     Size  Location     Type
 13871 ;;  data            1    4[COMRAM] unsigned char 
 13872 ;; Return value:  Size  Location     Type
 13873 ;;                  1    wreg      void 
 13874 ;; Registers used:
 13875 ;;		wreg, status,2, status,0, cstack
 13876 ;; Tracked objects:
 13877 ;;		On entry : 0/0
 13878 ;;		On exit  : 0/0
 13879 ;;		Unchanged: 0/0
 13880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13882 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13884 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13885 ;;Total ram usage:        1 bytes
 13886 ;; Hardware stack levels used:    1
 13887 ;; Hardware stack levels required when called:    3
 13888 ;; This function calls:
 13889 ;;		i2_lcdNewline
 13890 ;;		i2_lcdNibble
 13891 ;; This function is called by:
 13892 ;;		i2_printf
 13893 ;; This function uses a non-reentrant model
 13894 ;;
 13895                           
 13896                           	psect	text48
 13897  004BFA                     __ptext48:
 13898                           	opt stack 0
 13899  004BFA                     i2_putch:
 13900                           	opt stack 18
 13901                           
 13902                           ;incstack = 0
 13903                           ;i2putch@data stored from wreg
 13904  004BFA  6E05               	movwf	i2putch@data,c
 13905                           
 13906                           ;lcd.c: 36: if(data == '\n')lcdNewline();
 13907  004BFC  0E0A               	movlw	10
 13908  004BFE  1805               	xorwf	i2putch@data,w,c
 13909  004C00  A4D8               	btfss	status,2,c
 13910  004C02  D003               	goto	i2l170
 13911  004C04  EC32  F026         	call	i2_lcdNewline	;wreg free
 13912  004C08  0012               	return	
 13913  004C0A                     i2l170:
 13914                           
 13915                           ;lcd.c: 37: else
 13916                           ;lcd.c: 38: {
 13917                           ;lcd.c: 39: LATDbits.LATD2 = 1;
 13918  004C0A  848C               	bsf	3980,2,c	;volatile
 13919                           
 13920                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
 13921  004C0C  0E74               	movlw	116
 13922  004C0E                     i2u754_47:
 13923  004C0E  2EE8               	decfsz	wreg,f,c
 13924  004C10  D7FE               	bra	i2u754_47
 13925  004C12  D000               	nop2	
 13926                           
 13927                           ;lcd.c: 41: lcdNibble(data);
 13928  004C14  5005               	movf	i2putch@data,w,c
 13929  004C16  EC93  F023         	call	i2_lcdNibble
 13930  004C1A  0012               	return	
 13931  004C1C                     __end_ofi2_putch:
 13932                           	opt stack 0
 13933                           pclatu	equ	0xFFB
 13934                           pclath	equ	0xFFA
 13935                           tblptru	equ	0xFF8
 13936                           tblptrh	equ	0xFF7
 13937                           tblptrl	equ	0xFF6
 13938                           tablat	equ	0xFF5
 13939                           prodh	equ	0xFF4
 13940                           prodl	equ	0xFF3
 13941                           intcon	equ	0xFF2
 13942                           intcon3	equ	0xFF0
 13943                           postinc0	equ	0xFEE
 13944                           fsr0h	equ	0xFEA
 13945                           fsr0l	equ	0xFE9
 13946                           wreg	equ	0xFE8
 13947                           postdec1	equ	0xFE5
 13948                           fsr1h	equ	0xFE2
 13949                           fsr1l	equ	0xFE1
 13950                           indf2	equ	0xFDF
 13951                           postinc2	equ	0xFDE
 13952                           postdec2	equ	0xFDD
 13953                           fsr2h	equ	0xFDA
 13954                           fsr2l	equ	0xFD9
 13955                           status	equ	0xFD8
 13956                           
 13957 ;; *************** function i2_lcdNewline *****************
 13958 ;; Defined at:
 13959 ;;		line 78 in file "lcd.c"
 13960 ;; Parameters:    Size  Location     Type
 13961 ;;		None
 13962 ;; Auto vars:     Size  Location     Type
 13963 ;;		None
 13964 ;; Return value:  Size  Location     Type
 13965 ;;                  1    wreg      void 
 13966 ;; Registers used:
 13967 ;;		wreg, status,2, status,0, cstack
 13968 ;; Tracked objects:
 13969 ;;		On entry : 0/0
 13970 ;;		On exit  : 0/0
 13971 ;;		Unchanged: 0/0
 13972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13977 ;;Total ram usage:        0 bytes
 13978 ;; Hardware stack levels used:    1
 13979 ;; Hardware stack levels required when called:    2
 13980 ;; This function calls:
 13981 ;;		i2_lcdInst
 13982 ;; This function is called by:
 13983 ;;		i2_putch
 13984 ;; This function uses a non-reentrant model
 13985 ;;
 13986                           
 13987                           	psect	text49
 13988  004C64                     __ptext49:
 13989                           	opt stack 0
 13990  004C64                     i2_lcdNewline:
 13991                           	opt stack 18
 13992                           
 13993                           ;lcd.c: 79: lcdInst(0b11000000);
 13994                           
 13995                           ;incstack = 0
 13996  004C64  0EC0               	movlw	192
 13997  004C66  EC0E  F026         	call	i2_lcdInst
 13998  004C6A  0012               	return		;funcret
 13999  004C6C                     __end_ofi2_lcdNewline:
 14000                           	opt stack 0
 14001                           pclatu	equ	0xFFB
 14002                           pclath	equ	0xFFA
 14003                           tblptru	equ	0xFF8
 14004                           tblptrh	equ	0xFF7
 14005                           tblptrl	equ	0xFF6
 14006                           tablat	equ	0xFF5
 14007                           prodh	equ	0xFF4
 14008                           prodl	equ	0xFF3
 14009                           intcon	equ	0xFF2
 14010                           intcon3	equ	0xFF0
 14011                           postinc0	equ	0xFEE
 14012                           fsr0h	equ	0xFEA
 14013                           fsr0l	equ	0xFE9
 14014                           wreg	equ	0xFE8
 14015                           postdec1	equ	0xFE5
 14016                           fsr1h	equ	0xFE2
 14017                           fsr1l	equ	0xFE1
 14018                           indf2	equ	0xFDF
 14019                           postinc2	equ	0xFDE
 14020                           postdec2	equ	0xFDD
 14021                           fsr2h	equ	0xFDA
 14022                           fsr2l	equ	0xFD9
 14023                           status	equ	0xFD8
 14024                           
 14025 ;; *************** function i2_fround *****************
 14026 ;; Defined at:
 14027 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 14028 ;; Parameters:    Size  Location     Type
 14029 ;;  prec            1    wreg     unsigned char 
 14030 ;; Auto vars:     Size  Location     Type
 14031 ;;  prec            1   51[COMRAM] unsigned char 
 14032 ;; Return value:  Size  Location     Type
 14033 ;;                  3   42[COMRAM] unsigned char 
 14034 ;; Registers used:
 14035 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14036 ;; Tracked objects:
 14037 ;;		On entry : 0/0
 14038 ;;		On exit  : 0/0
 14039 ;;		Unchanged: 0/0
 14040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14041 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14042 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14044 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14045 ;;Total ram usage:       10 bytes
 14046 ;; Hardware stack levels used:    1
 14047 ;; Hardware stack levels required when called:    2
 14048 ;; This function calls:
 14049 ;;		i2___awdiv
 14050 ;;		i2___awmod
 14051 ;;		i2___ftmul
 14052 ;;		i2___wmul
 14053 ;; This function is called by:
 14054 ;;		i2_printf
 14055 ;; This function uses a non-reentrant model
 14056 ;;
 14057                           
 14058                           	psect	text50
 14059  0022AA                     __ptext50:
 14060                           	opt stack 0
 14061  0022AA                     i2_fround:
 14062                           	opt stack 19
 14063                           
 14064                           ;incstack = 0
 14065                           ;i2fround@prec stored from wreg
 14066  0022AA  6E34               	movwf	i2fround@prec,c
 14067                           
 14068                           ;doprnt.c: 413: if(prec>=110)
 14069  0022AC  0E6D               	movlw	109
 14070  0022AE  6434               	cpfsgt	i2fround@prec,c
 14071  0022B0  D09F               	goto	i2l5546
 14072                           
 14073                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 14074  0022B2  0E00               	movlw	0
 14075  0022B4  6E12               	movwf	i2___wmul@multiplicand+1,c
 14076  0022B6  0E03               	movlw	3
 14077  0022B8  6E11               	movwf	i2___wmul@multiplicand,c
 14078  0022BA  0E00               	movlw	0
 14079  0022BC  6E0A               	movwf	i2___awdiv@divisor+1,c
 14080  0022BE  0E0A               	movlw	10
 14081  0022C0  6E09               	movwf	i2___awdiv@divisor,c
 14082  0022C2  0E00               	movlw	0
 14083  0022C4  6E04               	movwf	i2___awmod@divisor+1,c
 14084  0022C6  0E64               	movlw	100
 14085  0022C8  6E03               	movwf	i2___awmod@divisor,c
 14086  0022CA  C034  F001         	movff	i2fround@prec,i2___awmod@dividend
 14087  0022CE  6A02               	clrf	i2___awmod@dividend+1,c
 14088  0022D0  EC28  F023         	call	i2___awmod	;wreg free
 14089  0022D4  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 14090  0022D8  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 14091  0022DC  ECB6  F021         	call	i2___awdiv	;wreg free
 14092  0022E0  0E09               	movlw	9
 14093  0022E2  2407               	addwf	?i2___awdiv,w,c
 14094  0022E4  6E0F               	movwf	i2___wmul@multiplier,c
 14095  0022E6  0E00               	movlw	0
 14096  0022E8  2008               	addwfc	?i2___awdiv+1,w,c
 14097  0022EA  6E10               	movwf	i2___wmul@multiplier+1,c
 14098  0022EC  ECD8  F025         	call	i2___wmul	;wreg free
 14099  0022F0  0EEB               	movlw	low __npowers_
 14100  0022F2  240F               	addwf	?i2___wmul,w,c
 14101  0022F4  6EF6               	movwf	tblptrl,c
 14102  0022F6  0EFD               	movlw	high __npowers_
 14103  0022F8  2010               	addwfc	?i2___wmul+1,w,c
 14104  0022FA  6EF7               	movwf	tblptrh,c
 14105  0022FC                     	if	0	;There are less than 3 active tblptr bytes
 14106  0022FC                     	endif
 14107  0022FC  0009               	tblrd		*+
 14108  0022FE  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 14109  002302  0009               	tblrd		*+
 14110  002304  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 14111  002308  000A               	tblrd		*-
 14112  00230A  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 14113  00230E  0E00               	movlw	0
 14114  002310  6E0A               	movwf	i2___awdiv@divisor+1,c
 14115  002312  0E64               	movlw	100
 14116  002314  6E09               	movwf	i2___awdiv@divisor,c
 14117  002316  C034  F007         	movff	i2fround@prec,i2___awdiv@dividend
 14118  00231A  6A08               	clrf	i2___awdiv@dividend+1,c
 14119  00231C  ECB6  F021         	call	i2___awdiv	;wreg free
 14120  002320  0E12               	movlw	18
 14121  002322  2407               	addwf	?i2___awdiv,w,c
 14122  002324  6E0F               	movwf	i2___wmul@multiplier,c
 14123  002326  0E00               	movlw	0
 14124  002328  2008               	addwfc	?i2___awdiv+1,w,c
 14125  00232A  6E10               	movwf	i2___wmul@multiplier+1,c
 14126  00232C  0E00               	movlw	0
 14127  00232E  6E12               	movwf	i2___wmul@multiplicand+1,c
 14128  002330  0E03               	movlw	3
 14129  002332  6E11               	movwf	i2___wmul@multiplicand,c
 14130  002334  ECD8  F025         	call	i2___wmul	;wreg free
 14131  002338  0EEB               	movlw	low __npowers_
 14132  00233A  240F               	addwf	?i2___wmul,w,c
 14133  00233C  6EF6               	movwf	tblptrl,c
 14134  00233E  0EFD               	movlw	high __npowers_
 14135  002340  2010               	addwfc	?i2___wmul+1,w,c
 14136  002342  6EF7               	movwf	tblptrh,c
 14137  002344                     	if	0	;There are less than 3 active tblptr bytes
 14138  002344                     	endif
 14139  002344  0009               	tblrd		*+
 14140  002346  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 14141  00234A  0009               	tblrd		*+
 14142  00234C  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 14143  002350  000A               	tblrd		*-
 14144  002352  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 14145  002356  EC7B  F01B         	call	i2___ftmul	;wreg free
 14146  00235A  C01C  F031         	movff	?i2___ftmul,i2_fround$1550
 14147  00235E  C01D  F032         	movff	?i2___ftmul+1,i2_fround$1550+1
 14148  002362  C01E  F033         	movff	?i2___ftmul+2,i2_fround$1550+2
 14149                           
 14150                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 14151  002366  0E00               	movlw	0
 14152  002368  6E12               	movwf	i2___wmul@multiplicand+1,c
 14153  00236A  0E03               	movlw	3
 14154  00236C  6E11               	movwf	i2___wmul@multiplicand,c
 14155  00236E  0E00               	movlw	0
 14156  002370  6E04               	movwf	i2___awmod@divisor+1,c
 14157  002372  0E0A               	movlw	10
 14158  002374  6E03               	movwf	i2___awmod@divisor,c
 14159  002376  C034  F001         	movff	i2fround@prec,i2___awmod@dividend
 14160  00237A  6A02               	clrf	i2___awmod@dividend+1,c
 14161  00237C  EC28  F023         	call	i2___awmod	;wreg free
 14162  002380  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14163  002384  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14164  002388  ECD8  F025         	call	i2___wmul	;wreg free
 14165  00238C  0EEB               	movlw	low __npowers_
 14166  00238E  240F               	addwf	?i2___wmul,w,c
 14167  002390  6EF6               	movwf	tblptrl,c
 14168  002392  0EFD               	movlw	high __npowers_
 14169  002394  2010               	addwfc	?i2___wmul+1,w,c
 14170  002396  6EF7               	movwf	tblptrh,c
 14171  002398                     	if	0	;There are less than 3 active tblptr bytes
 14172  002398                     	endif
 14173  002398  0009               	tblrd		*+
 14174  00239A  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 14175  00239E  0009               	tblrd		*+
 14176  0023A0  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 14177  0023A4  000A               	tblrd		*-
 14178  0023A6  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 14179  0023AA  C031  F01C         	movff	i2_fround$1550,i2___ftmul@f1
 14180  0023AE  C032  F01D         	movff	i2_fround$1550+1,i2___ftmul@f1+1
 14181  0023B2  C033  F01E         	movff	i2_fround$1550+2,i2___ftmul@f1+2
 14182  0023B6  EC7B  F01B         	call	i2___ftmul	;wreg free
 14183  0023BA  C01C  F02E         	movff	?i2___ftmul,i2_fround$1551
 14184  0023BE  C01D  F02F         	movff	?i2___ftmul+1,i2_fround$1551+1
 14185  0023C2  C01E  F030         	movff	?i2___ftmul+2,i2_fround$1551+2
 14186                           
 14187                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 14188  0023C6  C02E  F01C         	movff	i2_fround$1551,i2___ftmul@f1
 14189  0023CA  C02F  F01D         	movff	i2_fround$1551+1,i2___ftmul@f1+1
 14190  0023CE  C030  F01E         	movff	i2_fround$1551+2,i2___ftmul@f1+2
 14191  0023D2  0E00               	movlw	0
 14192  0023D4  6E1F               	movwf	i2___ftmul@f2,c
 14193  0023D6  0E00               	movlw	0
 14194  0023D8  6E20               	movwf	i2___ftmul@f2+1,c
 14195  0023DA  0E3F               	movlw	63
 14196  0023DC  6E21               	movwf	i2___ftmul@f2+2,c
 14197  0023DE  EC7B  F01B         	call	i2___ftmul	;wreg free
 14198  0023E2  C01C  F02B         	movff	?i2___ftmul,?i2_fround
 14199  0023E6  C01D  F02C         	movff	?i2___ftmul+1,?i2_fround+1
 14200  0023EA  C01E  F02D         	movff	?i2___ftmul+2,?i2_fround+2
 14201  0023EE  0012               	return	
 14202  0023F0                     i2l5546:
 14203                           
 14204                           ;doprnt.c: 415: else if(prec > 10)
 14205  0023F0  0E0A               	movlw	10
 14206  0023F2  6434               	cpfsgt	i2fround@prec,c
 14207  0023F4  D05D               	goto	i2l5554
 14208                           
 14209                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 14210  0023F6  0E00               	movlw	0
 14211  0023F8  6E12               	movwf	i2___wmul@multiplicand+1,c
 14212  0023FA  0E03               	movlw	3
 14213  0023FC  6E11               	movwf	i2___wmul@multiplicand,c
 14214  0023FE  0E00               	movlw	0
 14215  002400  6E04               	movwf	i2___awmod@divisor+1,c
 14216  002402  0E0A               	movlw	10
 14217  002404  6E03               	movwf	i2___awmod@divisor,c
 14218  002406  C034  F001         	movff	i2fround@prec,i2___awmod@dividend
 14219  00240A  6A02               	clrf	i2___awmod@dividend+1,c
 14220  00240C  EC28  F023         	call	i2___awmod	;wreg free
 14221  002410  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14222  002414  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14223  002418  ECD8  F025         	call	i2___wmul	;wreg free
 14224  00241C  0EEB               	movlw	low __npowers_
 14225  00241E  240F               	addwf	?i2___wmul,w,c
 14226  002420  6EF6               	movwf	tblptrl,c
 14227  002422  0EFD               	movlw	high __npowers_
 14228  002424  2010               	addwfc	?i2___wmul+1,w,c
 14229  002426  6EF7               	movwf	tblptrh,c
 14230  002428                     	if	0	;There are less than 3 active tblptr bytes
 14231  002428                     	endif
 14232  002428  0009               	tblrd		*+
 14233  00242A  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 14234  00242E  0009               	tblrd		*+
 14235  002430  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 14236  002434  000A               	tblrd		*-
 14237  002436  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 14238  00243A  0E00               	movlw	0
 14239  00243C  6E0A               	movwf	i2___awdiv@divisor+1,c
 14240  00243E  0E0A               	movlw	10
 14241  002440  6E09               	movwf	i2___awdiv@divisor,c
 14242  002442  C034  F007         	movff	i2fround@prec,i2___awdiv@dividend
 14243  002446  6A08               	clrf	i2___awdiv@dividend+1,c
 14244  002448  ECB6  F021         	call	i2___awdiv	;wreg free
 14245  00244C  0E09               	movlw	9
 14246  00244E  2407               	addwf	?i2___awdiv,w,c
 14247  002450  6E0F               	movwf	i2___wmul@multiplier,c
 14248  002452  0E00               	movlw	0
 14249  002454  2008               	addwfc	?i2___awdiv+1,w,c
 14250  002456  6E10               	movwf	i2___wmul@multiplier+1,c
 14251  002458  0E00               	movlw	0
 14252  00245A  6E12               	movwf	i2___wmul@multiplicand+1,c
 14253  00245C  0E03               	movlw	3
 14254  00245E  6E11               	movwf	i2___wmul@multiplicand,c
 14255  002460  ECD8  F025         	call	i2___wmul	;wreg free
 14256  002464  0EEB               	movlw	low __npowers_
 14257  002466  240F               	addwf	?i2___wmul,w,c
 14258  002468  6EF6               	movwf	tblptrl,c
 14259  00246A  0EFD               	movlw	high __npowers_
 14260  00246C  2010               	addwfc	?i2___wmul+1,w,c
 14261  00246E  6EF7               	movwf	tblptrh,c
 14262  002470                     	if	0	;There are less than 3 active tblptr bytes
 14263  002470                     	endif
 14264  002470  0009               	tblrd		*+
 14265  002472  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 14266  002476  0009               	tblrd		*+
 14267  002478  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 14268  00247C  000A               	tblrd		*-
 14269  00247E  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 14270  002482  EC7B  F01B         	call	i2___ftmul	;wreg free
 14271  002486  C01C  F031         	movff	?i2___ftmul,i2_fround$1550
 14272  00248A  C01D  F032         	movff	?i2___ftmul+1,i2_fround$1550+1
 14273  00248E  C01E  F033         	movff	?i2___ftmul+2,i2_fround$1550+2
 14274                           
 14275                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 14276  002492  C031  F01C         	movff	i2_fround$1550,i2___ftmul@f1
 14277  002496  C032  F01D         	movff	i2_fround$1550+1,i2___ftmul@f1+1
 14278  00249A  C033  F01E         	movff	i2_fround$1550+2,i2___ftmul@f1+2
 14279  00249E  0E00               	movlw	0
 14280  0024A0  6E1F               	movwf	i2___ftmul@f2,c
 14281  0024A2  0E00               	movlw	0
 14282  0024A4  6E20               	movwf	i2___ftmul@f2+1,c
 14283  0024A6  0E3F               	movlw	63
 14284  0024A8  6E21               	movwf	i2___ftmul@f2+2,c
 14285  0024AA  EC7B  F01B         	call	i2___ftmul	;wreg free
 14286  0024AE  D799               	goto	L8
 14287  0024B0                     i2l5554:
 14288                           
 14289                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 14290  0024B0  5034               	movf	i2fround@prec,w,c
 14291  0024B2  0D03               	mullw	3
 14292  0024B4  0EEB               	movlw	low __npowers_
 14293  0024B6  24F3               	addwf	prodl,w,c
 14294  0024B8  6EF6               	movwf	tblptrl,c
 14295  0024BA  0EFD               	movlw	high __npowers_
 14296  0024BC  20F4               	addwfc	prodh,w,c
 14297  0024BE  6EF7               	movwf	tblptrh,c
 14298  0024C0                     	if	0	;There are less than 3 active tblptr bytes
 14299  0024C0                     	endif
 14300  0024C0  0009               	tblrd		*+
 14301  0024C2  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 14302  0024C6  0009               	tblrd		*+
 14303  0024C8  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 14304  0024CC  000A               	tblrd		*-
 14305  0024CE  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 14306  0024D2  0E00               	movlw	0
 14307  0024D4  6E1F               	movwf	i2___ftmul@f2,c
 14308  0024D6  0E00               	movlw	0
 14309  0024D8  6E20               	movwf	i2___ftmul@f2+1,c
 14310  0024DA  0E3F               	movlw	63
 14311  0024DC  6E21               	movwf	i2___ftmul@f2+2,c
 14312  0024DE  EC7B  F01B         	call	i2___ftmul	;wreg free
 14313  0024E2  C01C  F02B         	movff	?i2___ftmul,?i2_fround
 14314  0024E6  C01D  F02C         	movff	?i2___ftmul+1,?i2_fround+1
 14315  0024EA  C01E  F02D         	movff	?i2___ftmul+2,?i2_fround+2
 14316  0024EE  0012               	return	
 14317  0024F0                     __end_ofi2_fround:
 14318                           	opt stack 0
 14319                           pclatu	equ	0xFFB
 14320                           pclath	equ	0xFFA
 14321                           tblptru	equ	0xFF8
 14322                           tblptrh	equ	0xFF7
 14323                           tblptrl	equ	0xFF6
 14324                           tablat	equ	0xFF5
 14325                           prodh	equ	0xFF4
 14326                           prodl	equ	0xFF3
 14327                           intcon	equ	0xFF2
 14328                           intcon3	equ	0xFF0
 14329                           postinc0	equ	0xFEE
 14330                           fsr0h	equ	0xFEA
 14331                           fsr0l	equ	0xFE9
 14332                           wreg	equ	0xFE8
 14333                           postdec1	equ	0xFE5
 14334                           fsr1h	equ	0xFE2
 14335                           fsr1l	equ	0xFE1
 14336                           indf2	equ	0xFDF
 14337                           postinc2	equ	0xFDE
 14338                           postdec2	equ	0xFDD
 14339                           fsr2h	equ	0xFDA
 14340                           fsr2l	equ	0xFD9
 14341                           status	equ	0xFD8
 14342                           
 14343 ;; *************** function i2___wmul *****************
 14344 ;; Defined at:
 14345 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 14346 ;; Parameters:    Size  Location     Type
 14347 ;;  multiplier      2   14[COMRAM] unsigned int 
 14348 ;;  multiplicand    2   16[COMRAM] unsigned int 
 14349 ;; Auto vars:     Size  Location     Type
 14350 ;;  __wmul          2   18[COMRAM] unsigned int 
 14351 ;; Return value:  Size  Location     Type
 14352 ;;                  2   14[COMRAM] unsigned int 
 14353 ;; Registers used:
 14354 ;;		wreg, status,2, status,0, prodl, prodh
 14355 ;; Tracked objects:
 14356 ;;		On entry : 0/0
 14357 ;;		On exit  : 0/0
 14358 ;;		Unchanged: 0/0
 14359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14360 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14361 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14363 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14364 ;;Total ram usage:        6 bytes
 14365 ;; Hardware stack levels used:    1
 14366 ;; This function calls:
 14367 ;;		Nothing
 14368 ;; This function is called by:
 14369 ;;		i2_fround
 14370 ;;		i2_scale
 14371 ;;		i2_printf
 14372 ;; This function uses a non-reentrant model
 14373 ;;
 14374                           
 14375                           	psect	text51
 14376  004BB0                     __ptext51:
 14377                           	opt stack 0
 14378  004BB0                     i2___wmul:
 14379                           	opt stack 20
 14380                           
 14381                           ;incstack = 0
 14382  004BB0  500F               	movf	i2___wmul@multiplier,w,c
 14383  004BB2  0211               	mulwf	i2___wmul@multiplicand,c
 14384  004BB4  CFF3 F013          	movff	prodl,i2___wmul@product
 14385  004BB8  CFF4 F014          	movff	prodh,i2___wmul@product+1
 14386  004BBC  500F               	movf	i2___wmul@multiplier,w,c
 14387  004BBE  0212               	mulwf	i2___wmul@multiplicand+1,c
 14388  004BC0  50F3               	movf	prodl,w,c
 14389  004BC2  2614               	addwf	i2___wmul@product+1,f,c
 14390  004BC4  5010               	movf	i2___wmul@multiplier+1,w,c
 14391  004BC6  0211               	mulwf	i2___wmul@multiplicand,c
 14392  004BC8  50F3               	movf	prodl,w,c
 14393  004BCA  2614               	addwf	i2___wmul@product+1,f,c
 14394  004BCC  C013  F00F         	movff	i2___wmul@product,?i2___wmul
 14395  004BD0  C014  F010         	movff	i2___wmul@product+1,?i2___wmul+1
 14396  004BD4  0012               	return	
 14397  004BD6                     __end_ofi2___wmul:
 14398                           	opt stack 0
 14399                           pclatu	equ	0xFFB
 14400                           pclath	equ	0xFFA
 14401                           tblptru	equ	0xFF8
 14402                           tblptrh	equ	0xFF7
 14403                           tblptrl	equ	0xFF6
 14404                           tablat	equ	0xFF5
 14405                           prodh	equ	0xFF4
 14406                           prodl	equ	0xFF3
 14407                           intcon	equ	0xFF2
 14408                           intcon3	equ	0xFF0
 14409                           postinc0	equ	0xFEE
 14410                           fsr0h	equ	0xFEA
 14411                           fsr0l	equ	0xFE9
 14412                           wreg	equ	0xFE8
 14413                           postdec1	equ	0xFE5
 14414                           fsr1h	equ	0xFE2
 14415                           fsr1l	equ	0xFE1
 14416                           indf2	equ	0xFDF
 14417                           postinc2	equ	0xFDE
 14418                           postdec2	equ	0xFDD
 14419                           fsr2h	equ	0xFDA
 14420                           fsr2l	equ	0xFD9
 14421                           status	equ	0xFD8
 14422                           
 14423 ;; *************** function i2___ftmul *****************
 14424 ;; Defined at:
 14425 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 14426 ;; Parameters:    Size  Location     Type
 14427 ;;  f1              3   27[COMRAM] float 
 14428 ;;  f2              3   30[COMRAM] float 
 14429 ;; Auto vars:     Size  Location     Type
 14430 ;;  __ftmul         3   37[COMRAM] unsigned um
 14431 ;;  __ftmul         1   41[COMRAM] unsigned char 
 14432 ;;  __ftmul         1   40[COMRAM] unsigned char 
 14433 ;;  __ftmul         1   36[COMRAM] unsigned char 
 14434 ;; Return value:  Size  Location     Type
 14435 ;;                  3   27[COMRAM] float 
 14436 ;; Registers used:
 14437 ;;		wreg, status,2, status,0, cstack
 14438 ;; Tracked objects:
 14439 ;;		On entry : 0/0
 14440 ;;		On exit  : 0/0
 14441 ;;		Unchanged: 0/0
 14442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14443 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14444 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14445 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14446 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14447 ;;Total ram usage:       15 bytes
 14448 ;; Hardware stack levels used:    1
 14449 ;; Hardware stack levels required when called:    1
 14450 ;; This function calls:
 14451 ;;		i2___ftpack
 14452 ;; This function is called by:
 14453 ;;		i2_angleToPulse
 14454 ;;		i2_fround
 14455 ;;		i2_scale
 14456 ;;		i2_printf
 14457 ;; This function uses a non-reentrant model
 14458 ;;
 14459                           
 14460                           	psect	text52
 14461  0036F6                     __ptext52:
 14462                           	opt stack 0
 14463  0036F6                     i2___ftmul:
 14464                           	opt stack 19
 14465                           
 14466                           ;incstack = 0
 14467  0036F6  C01E  F022         	movff	i2___ftmul@f1+2,??i2___ftmul
 14468  0036FA  6A23               	clrf	(??i2___ftmul+1)& (0+255),c
 14469  0036FC  6A24               	clrf	(??i2___ftmul+2)& (0+255),c
 14470  0036FE  341D               	rlcf	i2___ftmul@f1+1,w,c
 14471  003700  3622               	rlcf	??i2___ftmul& (0+255),f,c
 14472  003702  E301               	bnc	u534_41
 14473  003704  8023               	bsf	(??i2___ftmul+1)& (0+255),0,c
 14474  003706                     u534_41:
 14475  003706  5022               	movf	??i2___ftmul,w,c
 14476  003708  6E25               	movwf	i2___ftmul@exp,c
 14477  00370A  5025               	movf	i2___ftmul@exp,w,c
 14478  00370C  A4D8               	btfss	status,2,c
 14479  00370E  D007               	goto	i2l5246
 14480  003710  0E00               	movlw	0
 14481  003712  6E1C               	movwf	?i2___ftmul,c
 14482  003714  0E00               	movlw	0
 14483  003716  6E1D               	movwf	?i2___ftmul+1,c
 14484  003718  0E00               	movlw	0
 14485  00371A  6E1E               	movwf	?i2___ftmul+2,c
 14486  00371C  0012               	return	
 14487  00371E                     i2l5246:
 14488  00371E  C021  F022         	movff	i2___ftmul@f2+2,??i2___ftmul
 14489  003722  6A23               	clrf	(??i2___ftmul+1)& (0+255),c
 14490  003724  6A24               	clrf	(??i2___ftmul+2)& (0+255),c
 14491  003726  3420               	rlcf	i2___ftmul@f2+1,w,c
 14492  003728  3622               	rlcf	??i2___ftmul& (0+255),f,c
 14493  00372A  E301               	bnc	u536_41
 14494  00372C  8023               	bsf	(??i2___ftmul+1)& (0+255),0,c
 14495  00372E                     u536_41:
 14496  00372E  5022               	movf	??i2___ftmul,w,c
 14497  003730  6E2A               	movwf	i2___ftmul@sign,c
 14498  003732  502A               	movf	i2___ftmul@sign,w,c
 14499  003734  A4D8               	btfss	status,2,c
 14500  003736  D007               	goto	i2l5252
 14501  003738  0E00               	movlw	0
 14502  00373A  6E1C               	movwf	?i2___ftmul,c
 14503  00373C  0E00               	movlw	0
 14504  00373E  6E1D               	movwf	?i2___ftmul+1,c
 14505  003740  0E00               	movlw	0
 14506  003742  6E1E               	movwf	?i2___ftmul+2,c
 14507  003744  0012               	return	
 14508  003746                     i2l5252:
 14509  003746  502A               	movf	i2___ftmul@sign,w,c
 14510  003748  0F7B               	addlw	123
 14511  00374A  2625               	addwf	i2___ftmul@exp,f,c
 14512  00374C  C01E  F02A         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 14513  003750  5021               	movf	i2___ftmul@f2+2,w,c
 14514  003752  1A2A               	xorwf	i2___ftmul@sign,f,c
 14515  003754  0E80               	movlw	128
 14516  003756  162A               	andwf	i2___ftmul@sign,f,c
 14517  003758  8E1D               	bsf	i2___ftmul@f1+1,7,c
 14518  00375A  8E20               	bsf	i2___ftmul@f2+1,7,c
 14519  00375C  0EFF               	movlw	255
 14520  00375E  161F               	andwf	i2___ftmul@f2,f,c
 14521  003760  0EFF               	movlw	255
 14522  003762  1620               	andwf	i2___ftmul@f2+1,f,c
 14523  003764  0E00               	movlw	0
 14524  003766  1621               	andwf	i2___ftmul@f2+2,f,c
 14525  003768  0E00               	movlw	0
 14526  00376A  6E26               	movwf	i2___ftmul@f3_as_product,c
 14527  00376C  0E00               	movlw	0
 14528  00376E  6E27               	movwf	i2___ftmul@f3_as_product+1,c
 14529  003770  0E00               	movlw	0
 14530  003772  6E28               	movwf	i2___ftmul@f3_as_product+2,c
 14531  003774  0E07               	movlw	7
 14532  003776  6E29               	movwf	i2___ftmul@cntr,c
 14533  003778                     i2l5266:
 14534  003778  A01C               	btfss	i2___ftmul@f1,0,c
 14535  00377A  D006               	goto	i2l5270
 14536  00377C  501F               	movf	i2___ftmul@f2,w,c
 14537  00377E  2626               	addwf	i2___ftmul@f3_as_product,f,c
 14538  003780  5020               	movf	i2___ftmul@f2+1,w,c
 14539  003782  2227               	addwfc	i2___ftmul@f3_as_product+1,f,c
 14540  003784  5021               	movf	i2___ftmul@f2+2,w,c
 14541  003786  2228               	addwfc	i2___ftmul@f3_as_product+2,f,c
 14542  003788                     i2l5270:
 14543  003788  90D8               	bcf	status,0,c
 14544  00378A  321E               	rrcf	i2___ftmul@f1+2,f,c
 14545  00378C  321D               	rrcf	i2___ftmul@f1+1,f,c
 14546  00378E  321C               	rrcf	i2___ftmul@f1,f,c
 14547  003790  90D8               	bcf	status,0,c
 14548  003792  361F               	rlcf	i2___ftmul@f2,f,c
 14549  003794  3620               	rlcf	i2___ftmul@f2+1,f,c
 14550  003796  3621               	rlcf	i2___ftmul@f2+2,f,c
 14551  003798  2E29               	decfsz	i2___ftmul@cntr,f,c
 14552  00379A  D7EE               	goto	i2l5266
 14553  00379C  0E09               	movlw	9
 14554  00379E  6E29               	movwf	i2___ftmul@cntr,c
 14555  0037A0                     i2l5276:
 14556  0037A0  A01C               	btfss	i2___ftmul@f1,0,c
 14557  0037A2  D006               	goto	i2l5280
 14558  0037A4  501F               	movf	i2___ftmul@f2,w,c
 14559  0037A6  2626               	addwf	i2___ftmul@f3_as_product,f,c
 14560  0037A8  5020               	movf	i2___ftmul@f2+1,w,c
 14561  0037AA  2227               	addwfc	i2___ftmul@f3_as_product+1,f,c
 14562  0037AC  5021               	movf	i2___ftmul@f2+2,w,c
 14563  0037AE  2228               	addwfc	i2___ftmul@f3_as_product+2,f,c
 14564  0037B0                     i2l5280:
 14565  0037B0  90D8               	bcf	status,0,c
 14566  0037B2  321E               	rrcf	i2___ftmul@f1+2,f,c
 14567  0037B4  321D               	rrcf	i2___ftmul@f1+1,f,c
 14568  0037B6  321C               	rrcf	i2___ftmul@f1,f,c
 14569  0037B8  90D8               	bcf	status,0,c
 14570  0037BA  3228               	rrcf	i2___ftmul@f3_as_product+2,f,c
 14571  0037BC  3227               	rrcf	i2___ftmul@f3_as_product+1,f,c
 14572  0037BE  3226               	rrcf	i2___ftmul@f3_as_product,f,c
 14573  0037C0  2E29               	decfsz	i2___ftmul@cntr,f,c
 14574  0037C2  D7EE               	goto	i2l5276
 14575  0037C4  C026  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 14576  0037C8  C027  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 14577  0037CC  C028  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 14578  0037D0  C025  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 14579  0037D4  C02A  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 14580  0037D8  EC96  F01F         	call	i2___ftpack	;wreg free
 14581  0037DC  C001  F01C         	movff	?i2___ftpack,?i2___ftmul
 14582  0037E0  C002  F01D         	movff	?i2___ftpack+1,?i2___ftmul+1
 14583  0037E4  C003  F01E         	movff	?i2___ftpack+2,?i2___ftmul+2
 14584  0037E8  0012               	return	
 14585  0037EA                     __end_ofi2___ftmul:
 14586                           	opt stack 0
 14587                           pclatu	equ	0xFFB
 14588                           pclath	equ	0xFFA
 14589                           tblptru	equ	0xFF8
 14590                           tblptrh	equ	0xFF7
 14591                           tblptrl	equ	0xFF6
 14592                           tablat	equ	0xFF5
 14593                           prodh	equ	0xFF4
 14594                           prodl	equ	0xFF3
 14595                           intcon	equ	0xFF2
 14596                           intcon3	equ	0xFF0
 14597                           postinc0	equ	0xFEE
 14598                           fsr0h	equ	0xFEA
 14599                           fsr0l	equ	0xFE9
 14600                           wreg	equ	0xFE8
 14601                           postdec1	equ	0xFE5
 14602                           fsr1h	equ	0xFE2
 14603                           fsr1l	equ	0xFE1
 14604                           indf2	equ	0xFDF
 14605                           postinc2	equ	0xFDE
 14606                           postdec2	equ	0xFDD
 14607                           fsr2h	equ	0xFDA
 14608                           fsr2l	equ	0xFD9
 14609                           status	equ	0xFD8
 14610                           
 14611 ;; *************** function i2___awdiv *****************
 14612 ;; Defined at:
 14613 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 14614 ;; Parameters:    Size  Location     Type
 14615 ;;  dividend        2    6[COMRAM] int 
 14616 ;;  divisor         2    8[COMRAM] int 
 14617 ;; Auto vars:     Size  Location     Type
 14618 ;;  __awdiv         2   12[COMRAM] int 
 14619 ;;  __awdiv         1   11[COMRAM] unsigned char 
 14620 ;;  __awdiv         1   10[COMRAM] unsigned char 
 14621 ;; Return value:  Size  Location     Type
 14622 ;;                  2    6[COMRAM] int 
 14623 ;; Registers used:
 14624 ;;		wreg, status,2, status,0
 14625 ;; Tracked objects:
 14626 ;;		On entry : 0/0
 14627 ;;		On exit  : 0/0
 14628 ;;		Unchanged: 0/0
 14629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14630 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14631 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14633 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14634 ;;Total ram usage:        8 bytes
 14635 ;; Hardware stack levels used:    1
 14636 ;; This function calls:
 14637 ;;		Nothing
 14638 ;; This function is called by:
 14639 ;;		i2_fround
 14640 ;;		i2_scale
 14641 ;;		i2_printf
 14642 ;; This function uses a non-reentrant model
 14643 ;;
 14644                           
 14645                           	psect	text53
 14646  00436C                     __ptext53:
 14647                           	opt stack 0
 14648  00436C                     i2___awdiv:
 14649                           	opt stack 20
 14650                           
 14651                           ;incstack = 0
 14652  00436C  0E00               	movlw	0
 14653  00436E  6E0C               	movwf	i2___awdiv@sign,c
 14654  004370  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 14655  004372  D006               	goto	i2l5040
 14656  004374  6C09               	negf	i2___awdiv@divisor,c
 14657  004376  1E0A               	comf	i2___awdiv@divisor+1,f,c
 14658  004378  B0D8               	btfsc	status,0,c
 14659  00437A  2A0A               	incf	i2___awdiv@divisor+1,f,c
 14660  00437C  0E01               	movlw	1
 14661  00437E  6E0C               	movwf	i2___awdiv@sign,c
 14662  004380                     i2l5040:
 14663  004380  AE08               	btfss	i2___awdiv@dividend+1,7,c
 14664  004382  D006               	goto	i2l5046
 14665  004384  6C07               	negf	i2___awdiv@dividend,c
 14666  004386  1E08               	comf	i2___awdiv@dividend+1,f,c
 14667  004388  B0D8               	btfsc	status,0,c
 14668  00438A  2A08               	incf	i2___awdiv@dividend+1,f,c
 14669  00438C  0E01               	movlw	1
 14670  00438E  1A0C               	xorwf	i2___awdiv@sign,f,c
 14671  004390                     i2l5046:
 14672  004390  0E00               	movlw	0
 14673  004392  6E0E               	movwf	i2___awdiv@quotient+1,c
 14674  004394  0E00               	movlw	0
 14675  004396  6E0D               	movwf	i2___awdiv@quotient,c
 14676  004398  5009               	movf	i2___awdiv@divisor,w,c
 14677  00439A  100A               	iorwf	i2___awdiv@divisor+1,w,c
 14678  00439C  B4D8               	btfsc	status,2,c
 14679  00439E  D01C               	goto	i2l5068
 14680  0043A0  0E01               	movlw	1
 14681  0043A2  6E0B               	movwf	i2___awdiv@counter,c
 14682  0043A4  D004               	goto	i2l5054
 14683  0043A6                     i2l5052:
 14684  0043A6  90D8               	bcf	status,0,c
 14685  0043A8  3609               	rlcf	i2___awdiv@divisor,f,c
 14686  0043AA  360A               	rlcf	i2___awdiv@divisor+1,f,c
 14687  0043AC  2A0B               	incf	i2___awdiv@counter,f,c
 14688  0043AE                     i2l5054:
 14689  0043AE  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 14690  0043B0  D7FA               	goto	i2l5052
 14691  0043B2                     i2l5056:
 14692  0043B2  90D8               	bcf	status,0,c
 14693  0043B4  360D               	rlcf	i2___awdiv@quotient,f,c
 14694  0043B6  360E               	rlcf	i2___awdiv@quotient+1,f,c
 14695  0043B8  5009               	movf	i2___awdiv@divisor,w,c
 14696  0043BA  5C07               	subwf	i2___awdiv@dividend,w,c
 14697  0043BC  500A               	movf	i2___awdiv@divisor+1,w,c
 14698  0043BE  5808               	subwfb	i2___awdiv@dividend+1,w,c
 14699  0043C0  A0D8               	btfss	status,0,c
 14700  0043C2  D005               	goto	i2l5064
 14701  0043C4  5009               	movf	i2___awdiv@divisor,w,c
 14702  0043C6  5E07               	subwf	i2___awdiv@dividend,f,c
 14703  0043C8  500A               	movf	i2___awdiv@divisor+1,w,c
 14704  0043CA  5A08               	subwfb	i2___awdiv@dividend+1,f,c
 14705  0043CC  800D               	bsf	i2___awdiv@quotient,0,c
 14706  0043CE                     i2l5064:
 14707  0043CE  90D8               	bcf	status,0,c
 14708  0043D0  320A               	rrcf	i2___awdiv@divisor+1,f,c
 14709  0043D2  3209               	rrcf	i2___awdiv@divisor,f,c
 14710  0043D4  2E0B               	decfsz	i2___awdiv@counter,f,c
 14711  0043D6  D7ED               	goto	i2l5056
 14712  0043D8                     i2l5068:
 14713  0043D8  500C               	movf	i2___awdiv@sign,w,c
 14714  0043DA  B4D8               	btfsc	status,2,c
 14715  0043DC  D004               	goto	i2l5072
 14716  0043DE  6C0D               	negf	i2___awdiv@quotient,c
 14717  0043E0  1E0E               	comf	i2___awdiv@quotient+1,f,c
 14718  0043E2  B0D8               	btfsc	status,0,c
 14719  0043E4  2A0E               	incf	i2___awdiv@quotient+1,f,c
 14720  0043E6                     i2l5072:
 14721  0043E6  C00D  F007         	movff	i2___awdiv@quotient,?i2___awdiv
 14722  0043EA  C00E  F008         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 14723  0043EE  0012               	return	
 14724  0043F0                     __end_ofi2___awdiv:
 14725                           	opt stack 0
 14726                           pclatu	equ	0xFFB
 14727                           pclath	equ	0xFFA
 14728                           tblptru	equ	0xFF8
 14729                           tblptrh	equ	0xFF7
 14730                           tblptrl	equ	0xFF6
 14731                           tablat	equ	0xFF5
 14732                           prodh	equ	0xFF4
 14733                           prodl	equ	0xFF3
 14734                           intcon	equ	0xFF2
 14735                           intcon3	equ	0xFF0
 14736                           postinc0	equ	0xFEE
 14737                           fsr0h	equ	0xFEA
 14738                           fsr0l	equ	0xFE9
 14739                           wreg	equ	0xFE8
 14740                           postdec1	equ	0xFE5
 14741                           fsr1h	equ	0xFE2
 14742                           fsr1l	equ	0xFE1
 14743                           indf2	equ	0xFDF
 14744                           postinc2	equ	0xFDE
 14745                           postdec2	equ	0xFDD
 14746                           fsr2h	equ	0xFDA
 14747                           fsr2l	equ	0xFD9
 14748                           status	equ	0xFD8
 14749                           
 14750 ;; *************** function i2__tdiv_to_l_ *****************
 14751 ;; Defined at:
 14752 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
 14753 ;; Parameters:    Size  Location     Type
 14754 ;;  f1              3    0[COMRAM] float 
 14755 ;;  f2              3    3[COMRAM] float 
 14756 ;; Auto vars:     Size  Location     Type
 14757 ;;  _tdiv_to_l_     4    9[COMRAM] unsigned long 
 14758 ;;  _tdiv_to_l_     1   14[COMRAM] unsigned char 
 14759 ;;  _tdiv_to_l_     1   13[COMRAM] unsigned char 
 14760 ;; Return value:  Size  Location     Type
 14761 ;;                  4    0[COMRAM] unsigned long 
 14762 ;; Registers used:
 14763 ;;		wreg, status,2, status,0
 14764 ;; Tracked objects:
 14765 ;;		On entry : 0/0
 14766 ;;		On exit  : 0/0
 14767 ;;		Unchanged: 0/0
 14768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14769 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14770 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14771 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14772 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14773 ;;Total ram usage:       15 bytes
 14774 ;; Hardware stack levels used:    1
 14775 ;; This function calls:
 14776 ;;		Nothing
 14777 ;; This function is called by:
 14778 ;;		i2_printf
 14779 ;; This function uses a non-reentrant model
 14780 ;;
 14781                           
 14782                           	psect	text54
 14783  003056                     __ptext54:
 14784                           	opt stack 0
 14785  003056                     i2__tdiv_to_l_:
 14786                           	opt stack 21
 14787                           
 14788                           ;incstack = 0
 14789  003056  C003  F007         	movff	i2__tdiv_to_l_@f1+2,??i2__tdiv_to_l_
 14790  00305A  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 14791  00305C  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 14792  00305E  3402               	rlcf	i2__tdiv_to_l_@f1+1,w,c
 14793  003060  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 14794  003062  E301               	bnc	u584_41
 14795  003064  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 14796  003066                     u584_41:
 14797  003066  5007               	movf	??i2__tdiv_to_l_,w,c
 14798  003068  6E0F               	movwf	i2__tdiv_to_l_@exp1,c
 14799  00306A  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 14800  00306C  A4D8               	btfss	status,2,c
 14801  00306E  D009               	goto	i2l5662
 14802  003070  0E00               	movlw	0
 14803  003072  6E01               	movwf	?i2__tdiv_to_l_,c
 14804  003074  0E00               	movlw	0
 14805  003076  6E02               	movwf	?i2__tdiv_to_l_+1,c
 14806  003078  0E00               	movlw	0
 14807  00307A  6E03               	movwf	?i2__tdiv_to_l_+2,c
 14808  00307C  0E00               	movlw	0
 14809  00307E  6E04               	movwf	?i2__tdiv_to_l_+3,c
 14810  003080  0012               	return	
 14811  003082                     i2l5662:
 14812  003082  C006  F007         	movff	i2__tdiv_to_l_@f2+2,??i2__tdiv_to_l_
 14813  003086  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 14814  003088  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 14815  00308A  3405               	rlcf	i2__tdiv_to_l_@f2+1,w,c
 14816  00308C  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 14817  00308E  E301               	bnc	u586_41
 14818  003090  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 14819  003092                     u586_41:
 14820  003092  5007               	movf	??i2__tdiv_to_l_,w,c
 14821  003094  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 14822  003096  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 14823  003098  A4D8               	btfss	status,2,c
 14824  00309A  D009               	goto	i2l5668
 14825  00309C  0E00               	movlw	0
 14826  00309E  6E01               	movwf	?i2__tdiv_to_l_,c
 14827  0030A0  0E00               	movlw	0
 14828  0030A2  6E02               	movwf	?i2__tdiv_to_l_+1,c
 14829  0030A4  0E00               	movlw	0
 14830  0030A6  6E03               	movwf	?i2__tdiv_to_l_+2,c
 14831  0030A8  0E00               	movlw	0
 14832  0030AA  6E04               	movwf	?i2__tdiv_to_l_+3,c
 14833  0030AC  0012               	return	
 14834  0030AE                     i2l5668:
 14835  0030AE  8E02               	bsf	i2__tdiv_to_l_@f1+1,7,c
 14836  0030B0  0EFF               	movlw	255
 14837  0030B2  1601               	andwf	i2__tdiv_to_l_@f1,f,c
 14838  0030B4  0EFF               	movlw	255
 14839  0030B6  1602               	andwf	i2__tdiv_to_l_@f1+1,f,c
 14840  0030B8  0E00               	movlw	0
 14841  0030BA  1603               	andwf	i2__tdiv_to_l_@f1+2,f,c
 14842  0030BC  8E05               	bsf	i2__tdiv_to_l_@f2+1,7,c
 14843  0030BE  0EFF               	movlw	255
 14844  0030C0  1604               	andwf	i2__tdiv_to_l_@f2,f,c
 14845  0030C2  0EFF               	movlw	255
 14846  0030C4  1605               	andwf	i2__tdiv_to_l_@f2+1,f,c
 14847  0030C6  0E00               	movlw	0
 14848  0030C8  1606               	andwf	i2__tdiv_to_l_@f2+2,f,c
 14849  0030CA  0E00               	movlw	0
 14850  0030CC  6E0A               	movwf	i2__tdiv_to_l_@quot,c
 14851  0030CE  0E00               	movlw	0
 14852  0030D0  6E0B               	movwf	i2__tdiv_to_l_@quot+1,c
 14853  0030D2  0E00               	movlw	0
 14854  0030D4  6E0C               	movwf	i2__tdiv_to_l_@quot+2,c
 14855  0030D6  0E00               	movlw	0
 14856  0030D8  6E0D               	movwf	i2__tdiv_to_l_@quot+3,c
 14857  0030DA  0E7F               	movlw	127
 14858  0030DC  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 14859  0030DE  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 14860  0030E0  0F98               	addlw	152
 14861  0030E2  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 14862  0030E4  0E18               	movlw	24
 14863  0030E6  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 14864  0030E8                     i2l1025:
 14865  0030E8  90D8               	bcf	status,0,c
 14866  0030EA  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 14867  0030EC  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 14868  0030EE  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 14869  0030F0  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 14870  0030F2  5004               	movf	i2__tdiv_to_l_@f2,w,c
 14871  0030F4  5C01               	subwf	i2__tdiv_to_l_@f1,w,c
 14872  0030F6  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 14873  0030F8  5802               	subwfb	i2__tdiv_to_l_@f1+1,w,c
 14874  0030FA  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 14875  0030FC  5803               	subwfb	i2__tdiv_to_l_@f1+2,w,c
 14876  0030FE  A0D8               	btfss	status,0,c
 14877  003100  D007               	goto	i2l1026
 14878  003102  5004               	movf	i2__tdiv_to_l_@f2,w,c
 14879  003104  5E01               	subwf	i2__tdiv_to_l_@f1,f,c
 14880  003106  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 14881  003108  5A02               	subwfb	i2__tdiv_to_l_@f1+1,f,c
 14882  00310A  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 14883  00310C  5A03               	subwfb	i2__tdiv_to_l_@f1+2,f,c
 14884  00310E  800A               	bsf	i2__tdiv_to_l_@quot,0,c
 14885  003110                     i2l1026:
 14886  003110  90D8               	bcf	status,0,c
 14887  003112  3601               	rlcf	i2__tdiv_to_l_@f1,f,c
 14888  003114  3602               	rlcf	i2__tdiv_to_l_@f1+1,f,c
 14889  003116  3603               	rlcf	i2__tdiv_to_l_@f1+2,f,c
 14890  003118  2E0E               	decfsz	i2__tdiv_to_l_@cntr,f,c
 14891  00311A  D7E6               	goto	i2l1025
 14892  00311C  AE0F               	btfss	i2__tdiv_to_l_@exp1,7,c
 14893  00311E  D016               	goto	i2l5702
 14894  003120  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 14895  003122  0A80               	xorlw	128
 14896  003124  0F97               	addlw	151
 14897  003126  B0D8               	btfsc	status,0,c
 14898  003128  D009               	goto	i2l5698
 14899  00312A  0E00               	movlw	0
 14900  00312C  6E01               	movwf	?i2__tdiv_to_l_,c
 14901  00312E  0E00               	movlw	0
 14902  003130  6E02               	movwf	?i2__tdiv_to_l_+1,c
 14903  003132  0E00               	movlw	0
 14904  003134  6E03               	movwf	?i2__tdiv_to_l_+2,c
 14905  003136  0E00               	movlw	0
 14906  003138  6E04               	movwf	?i2__tdiv_to_l_+3,c
 14907  00313A  0012               	return	
 14908  00313C                     i2l5698:
 14909  00313C  90D8               	bcf	status,0,c
 14910  00313E  320D               	rrcf	i2__tdiv_to_l_@quot+3,f,c
 14911  003140  320C               	rrcf	i2__tdiv_to_l_@quot+2,f,c
 14912  003142  320B               	rrcf	i2__tdiv_to_l_@quot+1,f,c
 14913  003144  320A               	rrcf	i2__tdiv_to_l_@quot,f,c
 14914  003146  3E0F               	incfsz	i2__tdiv_to_l_@exp1,f,c
 14915  003148  D7F9               	goto	i2l5698
 14916  00314A  D015               	goto	i2l1032
 14917  00314C                     i2l5702:
 14918  00314C  0E17               	movlw	23
 14919  00314E  640F               	cpfsgt	i2__tdiv_to_l_@exp1,c
 14920  003150  D00F               	goto	i2l5710
 14921  003152  0E00               	movlw	0
 14922  003154  6E01               	movwf	?i2__tdiv_to_l_,c
 14923  003156  0E00               	movlw	0
 14924  003158  6E02               	movwf	?i2__tdiv_to_l_+1,c
 14925  00315A  0E00               	movlw	0
 14926  00315C  6E03               	movwf	?i2__tdiv_to_l_+2,c
 14927  00315E  0E00               	movlw	0
 14928  003160  6E04               	movwf	?i2__tdiv_to_l_+3,c
 14929  003162  0012               	return	
 14930  003164                     i2l5708:
 14931  003164  90D8               	bcf	status,0,c
 14932  003166  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 14933  003168  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 14934  00316A  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 14935  00316C  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 14936  00316E  060F               	decf	i2__tdiv_to_l_@exp1,f,c
 14937  003170                     i2l5710:
 14938  003170  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 14939  003172  A4D8               	btfss	status,2,c
 14940  003174  D7F7               	goto	i2l5708
 14941  003176                     i2l1032:
 14942  003176  C00A  F001         	movff	i2__tdiv_to_l_@quot,?i2__tdiv_to_l_
 14943  00317A  C00B  F002         	movff	i2__tdiv_to_l_@quot+1,?i2__tdiv_to_l_+1
 14944  00317E  C00C  F003         	movff	i2__tdiv_to_l_@quot+2,?i2__tdiv_to_l_+2
 14945  003182  C00D  F004         	movff	i2__tdiv_to_l_@quot+3,?i2__tdiv_to_l_+3
 14946  003186  0012               	return		;funcret
 14947  003188                     __end_ofi2__tdiv_to_l_:
 14948                           	opt stack 0
 14949                           pclatu	equ	0xFFB
 14950                           pclath	equ	0xFFA
 14951                           tblptru	equ	0xFF8
 14952                           tblptrh	equ	0xFF7
 14953                           tblptrl	equ	0xFF6
 14954                           tablat	equ	0xFF5
 14955                           prodh	equ	0xFF4
 14956                           prodl	equ	0xFF3
 14957                           intcon	equ	0xFF2
 14958                           intcon3	equ	0xFF0
 14959                           postinc0	equ	0xFEE
 14960                           fsr0h	equ	0xFEA
 14961                           fsr0l	equ	0xFE9
 14962                           wreg	equ	0xFE8
 14963                           postdec1	equ	0xFE5
 14964                           fsr1h	equ	0xFE2
 14965                           fsr1l	equ	0xFE1
 14966                           indf2	equ	0xFDF
 14967                           postinc2	equ	0xFDE
 14968                           postdec2	equ	0xFDD
 14969                           fsr2h	equ	0xFDA
 14970                           fsr2l	equ	0xFD9
 14971                           status	equ	0xFD8
 14972                           
 14973 ;; *************** function i2__div_to_l_ *****************
 14974 ;; Defined at:
 14975 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
 14976 ;; Parameters:    Size  Location     Type
 14977 ;;  f1              3    0[COMRAM] unsigned long 
 14978 ;;  f2              3    3[COMRAM] unsigned long 
 14979 ;; Auto vars:     Size  Location     Type
 14980 ;;  _div_to_l_      4    6[COMRAM] unsigned long 
 14981 ;;  _div_to_l_      1   11[COMRAM] unsigned char 
 14982 ;;  _div_to_l_      1   10[COMRAM] unsigned char 
 14983 ;; Return value:  Size  Location     Type
 14984 ;;                  4    0[COMRAM] unsigned long 
 14985 ;; Registers used:
 14986 ;;		wreg, status,2, status,0
 14987 ;; Tracked objects:
 14988 ;;		On entry : 0/0
 14989 ;;		On exit  : 0/0
 14990 ;;		Unchanged: 0/0
 14991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14992 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14993 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14995 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14996 ;;Total ram usage:       12 bytes
 14997 ;; Hardware stack levels used:    1
 14998 ;; This function calls:
 14999 ;;		Nothing
 15000 ;; This function is called by:
 15001 ;;		i2_printf
 15002 ;; This function uses a non-reentrant model
 15003 ;;
 15004                           
 15005                           	psect	text55
 15006  0032B8                     __ptext55:
 15007                           	opt stack 0
 15008  0032B8                     i2__div_to_l_:
 15009                           	opt stack 21
 15010                           
 15011                           ;incstack = 0
 15012  0032B8  3403               	rlcf	i2__div_to_l_@f1+2,w,c
 15013  0032BA  3404               	rlcf	i2__div_to_l_@f1+3,w,c
 15014  0032BC  6E0C               	movwf	i2__div_to_l_@exp1,c
 15015  0032BE  500C               	movf	i2__div_to_l_@exp1,w,c
 15016  0032C0  A4D8               	btfss	status,2,c
 15017  0032C2  D009               	goto	i2l5602
 15018  0032C4  0E00               	movlw	0
 15019  0032C6  6E01               	movwf	?i2__div_to_l_,c
 15020  0032C8  0E00               	movlw	0
 15021  0032CA  6E02               	movwf	?i2__div_to_l_+1,c
 15022  0032CC  0E00               	movlw	0
 15023  0032CE  6E03               	movwf	?i2__div_to_l_+2,c
 15024  0032D0  0E00               	movlw	0
 15025  0032D2  6E04               	movwf	?i2__div_to_l_+3,c
 15026  0032D4  0012               	return	
 15027  0032D6                     i2l5602:
 15028  0032D6  3406               	rlcf	i2__div_to_l_@f2+2,w,c
 15029  0032D8  3407               	rlcf	i2__div_to_l_@f2+3,w,c
 15030  0032DA  6E0B               	movwf	i2__div_to_l_@cntr,c
 15031  0032DC  500B               	movf	i2__div_to_l_@cntr,w,c
 15032  0032DE  A4D8               	btfss	status,2,c
 15033  0032E0  D009               	goto	i2l5608
 15034  0032E2  0E00               	movlw	0
 15035  0032E4  6E01               	movwf	?i2__div_to_l_,c
 15036  0032E6  0E00               	movlw	0
 15037  0032E8  6E02               	movwf	?i2__div_to_l_+1,c
 15038  0032EA  0E00               	movlw	0
 15039  0032EC  6E03               	movwf	?i2__div_to_l_+2,c
 15040  0032EE  0E00               	movlw	0
 15041  0032F0  6E04               	movwf	?i2__div_to_l_+3,c
 15042  0032F2  0012               	return	
 15043  0032F4                     i2l5608:
 15044  0032F4  8E03               	bsf	i2__div_to_l_@f1+2,7,c
 15045  0032F6  0EFF               	movlw	255
 15046  0032F8  1601               	andwf	i2__div_to_l_@f1,f,c
 15047  0032FA  0EFF               	movlw	255
 15048  0032FC  1602               	andwf	i2__div_to_l_@f1+1,f,c
 15049  0032FE  0EFF               	movlw	255
 15050  003300  1603               	andwf	i2__div_to_l_@f1+2,f,c
 15051  003302  0E00               	movlw	0
 15052  003304  1604               	andwf	i2__div_to_l_@f1+3,f,c
 15053  003306  8E06               	bsf	i2__div_to_l_@f2+2,7,c
 15054  003308  0EFF               	movlw	255
 15055  00330A  1604               	andwf	i2__div_to_l_@f2,f,c
 15056  00330C  0EFF               	movlw	255
 15057  00330E  1605               	andwf	i2__div_to_l_@f2+1,f,c
 15058  003310  0EFF               	movlw	255
 15059  003312  1606               	andwf	i2__div_to_l_@f2+2,f,c
 15060  003314  0E00               	movlw	0
 15061  003316  1607               	andwf	i2__div_to_l_@f2+3,f,c
 15062  003318  0E00               	movlw	0
 15063  00331A  6E07               	movwf	i2__div_to_l_@quot,c
 15064  00331C  0E00               	movlw	0
 15065  00331E  6E08               	movwf	i2__div_to_l_@quot+1,c
 15066  003320  0E00               	movlw	0
 15067  003322  6E09               	movwf	i2__div_to_l_@quot+2,c
 15068  003324  0E00               	movlw	0
 15069  003326  6E0A               	movwf	i2__div_to_l_@quot+3,c
 15070  003328  0E7F               	movlw	127
 15071  00332A  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 15072  00332C  500B               	movf	i2__div_to_l_@cntr,w,c
 15073  00332E  0FA0               	addlw	160
 15074  003330  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 15075  003332  0E20               	movlw	32
 15076  003334  6E0B               	movwf	i2__div_to_l_@cntr,c
 15077  003336                     i2l5622:
 15078  003336  90D8               	bcf	status,0,c
 15079  003338  3607               	rlcf	i2__div_to_l_@quot,f,c
 15080  00333A  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 15081  00333C  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 15082  00333E  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 15083  003340  5004               	movf	i2__div_to_l_@f2,w,c
 15084  003342  5C01               	subwf	i2__div_to_l_@f1,w,c
 15085  003344  5005               	movf	i2__div_to_l_@f2+1,w,c
 15086  003346  5802               	subwfb	i2__div_to_l_@f1+1,w,c
 15087  003348  5006               	movf	i2__div_to_l_@f2+2,w,c
 15088  00334A  5803               	subwfb	i2__div_to_l_@f1+2,w,c
 15089  00334C  5007               	movf	i2__div_to_l_@f2+3,w,c
 15090  00334E  5804               	subwfb	i2__div_to_l_@f1+3,w,c
 15091  003350  A0D8               	btfss	status,0,c
 15092  003352  D009               	goto	i2l5630
 15093  003354  5004               	movf	i2__div_to_l_@f2,w,c
 15094  003356  5E01               	subwf	i2__div_to_l_@f1,f,c
 15095  003358  5005               	movf	i2__div_to_l_@f2+1,w,c
 15096  00335A  5A02               	subwfb	i2__div_to_l_@f1+1,f,c
 15097  00335C  5006               	movf	i2__div_to_l_@f2+2,w,c
 15098  00335E  5A03               	subwfb	i2__div_to_l_@f1+2,f,c
 15099  003360  5007               	movf	i2__div_to_l_@f2+3,w,c
 15100  003362  5A04               	subwfb	i2__div_to_l_@f1+3,f,c
 15101  003364  8007               	bsf	i2__div_to_l_@quot,0,c
 15102  003366                     i2l5630:
 15103  003366  90D8               	bcf	status,0,c
 15104  003368  3601               	rlcf	i2__div_to_l_@f1,f,c
 15105  00336A  3602               	rlcf	i2__div_to_l_@f1+1,f,c
 15106  00336C  3603               	rlcf	i2__div_to_l_@f1+2,f,c
 15107  00336E  3604               	rlcf	i2__div_to_l_@f1+3,f,c
 15108  003370  2E0B               	decfsz	i2__div_to_l_@cntr,f,c
 15109  003372  D7E1               	goto	i2l5622
 15110  003374  AE0C               	btfss	i2__div_to_l_@exp1,7,c
 15111  003376  D016               	goto	i2l5646
 15112  003378  500C               	movf	i2__div_to_l_@exp1,w,c
 15113  00337A  0A80               	xorlw	128
 15114  00337C  0F9F               	addlw	159
 15115  00337E  B0D8               	btfsc	status,0,c
 15116  003380  D009               	goto	i2l5642
 15117  003382  0E00               	movlw	0
 15118  003384  6E01               	movwf	?i2__div_to_l_,c
 15119  003386  0E00               	movlw	0
 15120  003388  6E02               	movwf	?i2__div_to_l_+1,c
 15121  00338A  0E00               	movlw	0
 15122  00338C  6E03               	movwf	?i2__div_to_l_+2,c
 15123  00338E  0E00               	movlw	0
 15124  003390  6E04               	movwf	?i2__div_to_l_+3,c
 15125  003392  0012               	return	
 15126  003394                     i2l5642:
 15127  003394  90D8               	bcf	status,0,c
 15128  003396  320A               	rrcf	i2__div_to_l_@quot+3,f,c
 15129  003398  3209               	rrcf	i2__div_to_l_@quot+2,f,c
 15130  00339A  3208               	rrcf	i2__div_to_l_@quot+1,f,c
 15131  00339C  3207               	rrcf	i2__div_to_l_@quot,f,c
 15132  00339E  3E0C               	incfsz	i2__div_to_l_@exp1,f,c
 15133  0033A0  D7F9               	goto	i2l5642
 15134  0033A2  D015               	goto	i2l928
 15135  0033A4                     i2l5646:
 15136  0033A4  0E1F               	movlw	31
 15137  0033A6  640C               	cpfsgt	i2__div_to_l_@exp1,c
 15138  0033A8  D00F               	goto	i2l5654
 15139  0033AA  0E00               	movlw	0
 15140  0033AC  6E01               	movwf	?i2__div_to_l_,c
 15141  0033AE  0E00               	movlw	0
 15142  0033B0  6E02               	movwf	?i2__div_to_l_+1,c
 15143  0033B2  0E00               	movlw	0
 15144  0033B4  6E03               	movwf	?i2__div_to_l_+2,c
 15145  0033B6  0E00               	movlw	0
 15146  0033B8  6E04               	movwf	?i2__div_to_l_+3,c
 15147  0033BA  0012               	return	
 15148  0033BC                     i2l5652:
 15149  0033BC  90D8               	bcf	status,0,c
 15150  0033BE  3607               	rlcf	i2__div_to_l_@quot,f,c
 15151  0033C0  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 15152  0033C2  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 15153  0033C4  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 15154  0033C6  060C               	decf	i2__div_to_l_@exp1,f,c
 15155  0033C8                     i2l5654:
 15156  0033C8  500C               	movf	i2__div_to_l_@exp1,w,c
 15157  0033CA  A4D8               	btfss	status,2,c
 15158  0033CC  D7F7               	goto	i2l5652
 15159  0033CE                     i2l928:
 15160  0033CE  C007  F001         	movff	i2__div_to_l_@quot,?i2__div_to_l_
 15161  0033D2  C008  F002         	movff	i2__div_to_l_@quot+1,?i2__div_to_l_+1
 15162  0033D6  C009  F003         	movff	i2__div_to_l_@quot+2,?i2__div_to_l_+2
 15163  0033DA  C00A  F004         	movff	i2__div_to_l_@quot+3,?i2__div_to_l_+3
 15164  0033DE  0012               	return		;funcret
 15165  0033E0                     __end_ofi2__div_to_l_:
 15166                           	opt stack 0
 15167                           pclatu	equ	0xFFB
 15168                           pclath	equ	0xFFA
 15169                           tblptru	equ	0xFF8
 15170                           tblptrh	equ	0xFF7
 15171                           tblptrl	equ	0xFF6
 15172                           tablat	equ	0xFF5
 15173                           prodh	equ	0xFF4
 15174                           prodl	equ	0xFF3
 15175                           intcon	equ	0xFF2
 15176                           intcon3	equ	0xFF0
 15177                           postinc0	equ	0xFEE
 15178                           fsr0h	equ	0xFEA
 15179                           fsr0l	equ	0xFE9
 15180                           wreg	equ	0xFE8
 15181                           postdec1	equ	0xFE5
 15182                           fsr1h	equ	0xFE2
 15183                           fsr1l	equ	0xFE1
 15184                           indf2	equ	0xFDF
 15185                           postinc2	equ	0xFDE
 15186                           postdec2	equ	0xFDD
 15187                           fsr2h	equ	0xFDA
 15188                           fsr2l	equ	0xFD9
 15189                           status	equ	0xFD8
 15190                           
 15191 ;; *************** function i2___lltoft *****************
 15192 ;; Defined at:
 15193 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 15194 ;; Parameters:    Size  Location     Type
 15195 ;;  c               4    8[COMRAM] unsigned long 
 15196 ;; Auto vars:     Size  Location     Type
 15197 ;;  __lltoft        1   16[COMRAM] unsigned char 
 15198 ;; Return value:  Size  Location     Type
 15199 ;;                  3    8[COMRAM] float 
 15200 ;; Registers used:
 15201 ;;		wreg, status,2, status,0, cstack
 15202 ;; Tracked objects:
 15203 ;;		On entry : 0/0
 15204 ;;		On exit  : 0/0
 15205 ;;		Unchanged: 0/0
 15206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15207 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15208 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15209 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15210 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15211 ;;Total ram usage:        9 bytes
 15212 ;; Hardware stack levels used:    1
 15213 ;; Hardware stack levels required when called:    1
 15214 ;; This function calls:
 15215 ;;		i2___ftpack
 15216 ;; This function is called by:
 15217 ;;		i2_printf
 15218 ;; This function uses a non-reentrant model
 15219 ;;
 15220                           
 15221                           	psect	text56
 15222  00478C                     __ptext56:
 15223                           	opt stack 0
 15224  00478C                     i2___lltoft:
 15225                           	opt stack 20
 15226                           
 15227                           ;incstack = 0
 15228  00478C  0E8E               	movlw	142
 15229  00478E  6E11               	movwf	i2___lltoft@exp,c
 15230  004790  D006               	goto	i2l5784
 15231  004792                     i2l5782:
 15232  004792  90D8               	bcf	status,0,c
 15233  004794  320C               	rrcf	i2___lltoft@c+3,f,c
 15234  004796  320B               	rrcf	i2___lltoft@c+2,f,c
 15235  004798  320A               	rrcf	i2___lltoft@c+1,f,c
 15236  00479A  3209               	rrcf	i2___lltoft@c,f,c
 15237  00479C  2A11               	incf	i2___lltoft@exp,f,c
 15238  00479E                     i2l5784:
 15239  00479E  0E00               	movlw	0
 15240  0047A0  1409               	andwf	i2___lltoft@c,w,c
 15241  0047A2  6E0D               	movwf	??i2___lltoft& (0+255),c
 15242  0047A4  0E00               	movlw	0
 15243  0047A6  140A               	andwf	i2___lltoft@c+1,w,c
 15244  0047A8  6E0E               	movwf	(??i2___lltoft+1)& (0+255),c
 15245  0047AA  0E00               	movlw	0
 15246  0047AC  140B               	andwf	i2___lltoft@c+2,w,c
 15247  0047AE  6E0F               	movwf	(??i2___lltoft+2)& (0+255),c
 15248  0047B0  0EFF               	movlw	255
 15249  0047B2  140C               	andwf	i2___lltoft@c+3,w,c
 15250  0047B4  6E10               	movwf	(??i2___lltoft+3)& (0+255),c
 15251  0047B6  500D               	movf	??i2___lltoft,w,c
 15252  0047B8  100E               	iorwf	??i2___lltoft+1,w,c
 15253  0047BA  100F               	iorwf	??i2___lltoft+2,w,c
 15254  0047BC  1010               	iorwf	??i2___lltoft+3,w,c
 15255  0047BE  A4D8               	btfss	status,2,c
 15256  0047C0  D7E8               	goto	i2l5782
 15257  0047C2  C009  F001         	movff	i2___lltoft@c,i2___ftpack@arg
 15258  0047C6  C00A  F002         	movff	i2___lltoft@c+1,i2___ftpack@arg+1
 15259  0047CA  C00B  F003         	movff	i2___lltoft@c+2,i2___ftpack@arg+2
 15260  0047CE  C011  F004         	movff	i2___lltoft@exp,i2___ftpack@exp
 15261  0047D2  0E00               	movlw	0
 15262  0047D4  6E05               	movwf	i2___ftpack@sign,c
 15263  0047D6  EC96  F01F         	call	i2___ftpack	;wreg free
 15264  0047DA  C001  F009         	movff	?i2___ftpack,?i2___lltoft
 15265  0047DE  C002  F00A         	movff	?i2___ftpack+1,?i2___lltoft+1
 15266  0047E2  C003  F00B         	movff	?i2___ftpack+2,?i2___lltoft+2
 15267  0047E6  0012               	return	
 15268  0047E8                     __end_ofi2___lltoft:
 15269                           	opt stack 0
 15270                           pclatu	equ	0xFFB
 15271                           pclath	equ	0xFFA
 15272                           tblptru	equ	0xFF8
 15273                           tblptrh	equ	0xFF7
 15274                           tblptrl	equ	0xFF6
 15275                           tablat	equ	0xFF5
 15276                           prodh	equ	0xFF4
 15277                           prodl	equ	0xFF3
 15278                           intcon	equ	0xFF2
 15279                           intcon3	equ	0xFF0
 15280                           postinc0	equ	0xFEE
 15281                           fsr0h	equ	0xFEA
 15282                           fsr0l	equ	0xFE9
 15283                           wreg	equ	0xFE8
 15284                           postdec1	equ	0xFE5
 15285                           fsr1h	equ	0xFE2
 15286                           fsr1l	equ	0xFE1
 15287                           indf2	equ	0xFDF
 15288                           postinc2	equ	0xFDE
 15289                           postdec2	equ	0xFDD
 15290                           fsr2h	equ	0xFDA
 15291                           fsr2l	equ	0xFD9
 15292                           status	equ	0xFD8
 15293                           
 15294 ;; *************** function i2___llmod *****************
 15295 ;; Defined at:
 15296 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
 15297 ;; Parameters:    Size  Location     Type
 15298 ;;  dividend        4   13[COMRAM] unsigned long 
 15299 ;;  divisor         4   17[COMRAM] unsigned long 
 15300 ;; Auto vars:     Size  Location     Type
 15301 ;;  __llmod         1   21[COMRAM] unsigned char 
 15302 ;; Return value:  Size  Location     Type
 15303 ;;                  4   13[COMRAM] unsigned long 
 15304 ;; Registers used:
 15305 ;;		wreg, status,2, status,0
 15306 ;; Tracked objects:
 15307 ;;		On entry : 0/0
 15308 ;;		On exit  : 0/0
 15309 ;;		Unchanged: 0/0
 15310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15311 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15312 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15314 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15315 ;;Total ram usage:        9 bytes
 15316 ;; Hardware stack levels used:    1
 15317 ;; This function calls:
 15318 ;;		Nothing
 15319 ;; This function is called by:
 15320 ;;		i2_printf
 15321 ;; This function uses a non-reentrant model
 15322 ;;
 15323                           
 15324                           	psect	text57
 15325  0046C0                     __ptext57:
 15326                           	opt stack 0
 15327  0046C0                     i2___llmod:
 15328                           	opt stack 21
 15329                           
 15330                           ;incstack = 0
 15331  0046C0  5012               	movf	i2___llmod@divisor,w,c
 15332  0046C2  1013               	iorwf	i2___llmod@divisor+1,w,c
 15333  0046C4  1014               	iorwf	i2___llmod@divisor+2,w,c
 15334  0046C6  1015               	iorwf	i2___llmod@divisor+3,w,c
 15335  0046C8  B4D8               	btfsc	status,2,c
 15336  0046CA  D024               	goto	i2l1112
 15337  0046CC  0E01               	movlw	1
 15338  0046CE  6E16               	movwf	i2___llmod@counter,c
 15339  0046D0  D006               	goto	i2l5770
 15340  0046D2                     i2l5768:
 15341  0046D2  90D8               	bcf	status,0,c
 15342  0046D4  3612               	rlcf	i2___llmod@divisor,f,c
 15343  0046D6  3613               	rlcf	i2___llmod@divisor+1,f,c
 15344  0046D8  3614               	rlcf	i2___llmod@divisor+2,f,c
 15345  0046DA  3615               	rlcf	i2___llmod@divisor+3,f,c
 15346  0046DC  2A16               	incf	i2___llmod@counter,f,c
 15347  0046DE                     i2l5770:
 15348  0046DE  AE15               	btfss	i2___llmod@divisor+3,7,c
 15349  0046E0  D7F8               	goto	i2l5768
 15350  0046E2                     i2l5772:
 15351  0046E2  5012               	movf	i2___llmod@divisor,w,c
 15352  0046E4  5C0E               	subwf	i2___llmod@dividend,w,c
 15353  0046E6  5013               	movf	i2___llmod@divisor+1,w,c
 15354  0046E8  580F               	subwfb	i2___llmod@dividend+1,w,c
 15355  0046EA  5014               	movf	i2___llmod@divisor+2,w,c
 15356  0046EC  5810               	subwfb	i2___llmod@dividend+2,w,c
 15357  0046EE  5015               	movf	i2___llmod@divisor+3,w,c
 15358  0046F0  5811               	subwfb	i2___llmod@dividend+3,w,c
 15359  0046F2  A0D8               	btfss	status,0,c
 15360  0046F4  D008               	goto	i2l5776
 15361  0046F6  5012               	movf	i2___llmod@divisor,w,c
 15362  0046F8  5E0E               	subwf	i2___llmod@dividend,f,c
 15363  0046FA  5013               	movf	i2___llmod@divisor+1,w,c
 15364  0046FC  5A0F               	subwfb	i2___llmod@dividend+1,f,c
 15365  0046FE  5014               	movf	i2___llmod@divisor+2,w,c
 15366  004700  5A10               	subwfb	i2___llmod@dividend+2,f,c
 15367  004702  5015               	movf	i2___llmod@divisor+3,w,c
 15368  004704  5A11               	subwfb	i2___llmod@dividend+3,f,c
 15369  004706                     i2l5776:
 15370  004706  90D8               	bcf	status,0,c
 15371  004708  3215               	rrcf	i2___llmod@divisor+3,f,c
 15372  00470A  3214               	rrcf	i2___llmod@divisor+2,f,c
 15373  00470C  3213               	rrcf	i2___llmod@divisor+1,f,c
 15374  00470E  3212               	rrcf	i2___llmod@divisor,f,c
 15375  004710  2E16               	decfsz	i2___llmod@counter,f,c
 15376  004712  D7E7               	goto	i2l5772
 15377  004714                     i2l1112:
 15378  004714  C00E  F00E         	movff	i2___llmod@dividend,?i2___llmod
 15379  004718  C00F  F00F         	movff	i2___llmod@dividend+1,?i2___llmod+1
 15380  00471C  C010  F010         	movff	i2___llmod@dividend+2,?i2___llmod+2
 15381  004720  C011  F011         	movff	i2___llmod@dividend+3,?i2___llmod+3
 15382  004724  0012               	return		;funcret
 15383  004726                     __end_ofi2___llmod:
 15384                           	opt stack 0
 15385                           pclatu	equ	0xFFB
 15386                           pclath	equ	0xFFA
 15387                           tblptru	equ	0xFF8
 15388                           tblptrh	equ	0xFF7
 15389                           tblptrl	equ	0xFF6
 15390                           tablat	equ	0xFF5
 15391                           prodh	equ	0xFF4
 15392                           prodl	equ	0xFF3
 15393                           intcon	equ	0xFF2
 15394                           intcon3	equ	0xFF0
 15395                           postinc0	equ	0xFEE
 15396                           fsr0h	equ	0xFEA
 15397                           fsr0l	equ	0xFE9
 15398                           wreg	equ	0xFE8
 15399                           postdec1	equ	0xFE5
 15400                           fsr1h	equ	0xFE2
 15401                           fsr1l	equ	0xFE1
 15402                           indf2	equ	0xFDF
 15403                           postinc2	equ	0xFDE
 15404                           postdec2	equ	0xFDD
 15405                           fsr2h	equ	0xFDA
 15406                           fsr2l	equ	0xFD9
 15407                           status	equ	0xFD8
 15408                           
 15409 ;; *************** function i2___lldiv *****************
 15410 ;; Defined at:
 15411 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 15412 ;; Parameters:    Size  Location     Type
 15413 ;;  dividend        4    0[COMRAM] unsigned long 
 15414 ;;  divisor         4    4[COMRAM] unsigned long 
 15415 ;; Auto vars:     Size  Location     Type
 15416 ;;  __lldiv         4    8[COMRAM] unsigned long 
 15417 ;;  __lldiv         1   12[COMRAM] unsigned char 
 15418 ;; Return value:  Size  Location     Type
 15419 ;;                  4    0[COMRAM] unsigned long 
 15420 ;; Registers used:
 15421 ;;		wreg, status,2, status,0
 15422 ;; Tracked objects:
 15423 ;;		On entry : 0/0
 15424 ;;		On exit  : 0/0
 15425 ;;		Unchanged: 0/0
 15426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15427 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15428 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15430 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15431 ;;Total ram usage:       13 bytes
 15432 ;; Hardware stack levels used:    1
 15433 ;; This function calls:
 15434 ;;		Nothing
 15435 ;; This function is called by:
 15436 ;;		i2_printf
 15437 ;; This function uses a non-reentrant model
 15438 ;;
 15439                           
 15440                           	psect	text58
 15441  0043F0                     __ptext58:
 15442                           	opt stack 0
 15443  0043F0                     i2___lldiv:
 15444                           	opt stack 21
 15445                           
 15446                           ;incstack = 0
 15447  0043F0  0E00               	movlw	0
 15448  0043F2  6E09               	movwf	i2___lldiv@quotient,c
 15449  0043F4  0E00               	movlw	0
 15450  0043F6  6E0A               	movwf	i2___lldiv@quotient+1,c
 15451  0043F8  0E00               	movlw	0
 15452  0043FA  6E0B               	movwf	i2___lldiv@quotient+2,c
 15453  0043FC  0E00               	movlw	0
 15454  0043FE  6E0C               	movwf	i2___lldiv@quotient+3,c
 15455  004400  5005               	movf	i2___lldiv@divisor,w,c
 15456  004402  1006               	iorwf	i2___lldiv@divisor+1,w,c
 15457  004404  1007               	iorwf	i2___lldiv@divisor+2,w,c
 15458  004406  1008               	iorwf	i2___lldiv@divisor+3,w,c
 15459  004408  B4D8               	btfsc	status,2,c
 15460  00440A  D02A               	goto	i2l1102
 15461  00440C  0E01               	movlw	1
 15462  00440E  6E0D               	movwf	i2___lldiv@counter,c
 15463  004410  D006               	goto	i2l5750
 15464  004412                     i2l5748:
 15465  004412  90D8               	bcf	status,0,c
 15466  004414  3605               	rlcf	i2___lldiv@divisor,f,c
 15467  004416  3606               	rlcf	i2___lldiv@divisor+1,f,c
 15468  004418  3607               	rlcf	i2___lldiv@divisor+2,f,c
 15469  00441A  3608               	rlcf	i2___lldiv@divisor+3,f,c
 15470  00441C  2A0D               	incf	i2___lldiv@counter,f,c
 15471  00441E                     i2l5750:
 15472  00441E  AE08               	btfss	i2___lldiv@divisor+3,7,c
 15473  004420  D7F8               	goto	i2l5748
 15474  004422                     i2l5752:
 15475  004422  90D8               	bcf	status,0,c
 15476  004424  3609               	rlcf	i2___lldiv@quotient,f,c
 15477  004426  360A               	rlcf	i2___lldiv@quotient+1,f,c
 15478  004428  360B               	rlcf	i2___lldiv@quotient+2,f,c
 15479  00442A  360C               	rlcf	i2___lldiv@quotient+3,f,c
 15480  00442C  5005               	movf	i2___lldiv@divisor,w,c
 15481  00442E  5C01               	subwf	i2___lldiv@dividend,w,c
 15482  004430  5006               	movf	i2___lldiv@divisor+1,w,c
 15483  004432  5802               	subwfb	i2___lldiv@dividend+1,w,c
 15484  004434  5007               	movf	i2___lldiv@divisor+2,w,c
 15485  004436  5803               	subwfb	i2___lldiv@dividend+2,w,c
 15486  004438  5008               	movf	i2___lldiv@divisor+3,w,c
 15487  00443A  5804               	subwfb	i2___lldiv@dividend+3,w,c
 15488  00443C  A0D8               	btfss	status,0,c
 15489  00443E  D009               	goto	i2l5760
 15490  004440  5005               	movf	i2___lldiv@divisor,w,c
 15491  004442  5E01               	subwf	i2___lldiv@dividend,f,c
 15492  004444  5006               	movf	i2___lldiv@divisor+1,w,c
 15493  004446  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 15494  004448  5007               	movf	i2___lldiv@divisor+2,w,c
 15495  00444A  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 15496  00444C  5008               	movf	i2___lldiv@divisor+3,w,c
 15497  00444E  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 15498  004450  8009               	bsf	i2___lldiv@quotient,0,c
 15499  004452                     i2l5760:
 15500  004452  90D8               	bcf	status,0,c
 15501  004454  3208               	rrcf	i2___lldiv@divisor+3,f,c
 15502  004456  3207               	rrcf	i2___lldiv@divisor+2,f,c
 15503  004458  3206               	rrcf	i2___lldiv@divisor+1,f,c
 15504  00445A  3205               	rrcf	i2___lldiv@divisor,f,c
 15505  00445C  2E0D               	decfsz	i2___lldiv@counter,f,c
 15506  00445E  D7E1               	goto	i2l5752
 15507  004460                     i2l1102:
 15508  004460  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 15509  004464  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 15510  004468  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 15511  00446C  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 15512  004470  0012               	return		;funcret
 15513  004472                     __end_ofi2___lldiv:
 15514                           	opt stack 0
 15515                           pclatu	equ	0xFFB
 15516                           pclath	equ	0xFFA
 15517                           tblptru	equ	0xFF8
 15518                           tblptrh	equ	0xFF7
 15519                           tblptrl	equ	0xFF6
 15520                           tablat	equ	0xFF5
 15521                           prodh	equ	0xFF4
 15522                           prodl	equ	0xFF3
 15523                           intcon	equ	0xFF2
 15524                           intcon3	equ	0xFF0
 15525                           postinc0	equ	0xFEE
 15526                           fsr0h	equ	0xFEA
 15527                           fsr0l	equ	0xFE9
 15528                           wreg	equ	0xFE8
 15529                           postdec1	equ	0xFE5
 15530                           fsr1h	equ	0xFE2
 15531                           fsr1l	equ	0xFE1
 15532                           indf2	equ	0xFDF
 15533                           postinc2	equ	0xFDE
 15534                           postdec2	equ	0xFDD
 15535                           fsr2h	equ	0xFDA
 15536                           fsr2l	equ	0xFD9
 15537                           status	equ	0xFD8
 15538                           
 15539 ;; *************** function i2___fttol *****************
 15540 ;; Defined at:
 15541 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 15542 ;; Parameters:    Size  Location     Type
 15543 ;;  f1              3   64[COMRAM] float 
 15544 ;; Auto vars:     Size  Location     Type
 15545 ;;  __fttol         4   74[COMRAM] unsigned long 
 15546 ;;  __fttol         1   78[COMRAM] unsigned char 
 15547 ;;  __fttol         1   73[COMRAM] unsigned char 
 15548 ;; Return value:  Size  Location     Type
 15549 ;;                  4   64[COMRAM] long 
 15550 ;; Registers used:
 15551 ;;		wreg, status,2, status,0
 15552 ;; Tracked objects:
 15553 ;;		On entry : 0/0
 15554 ;;		On exit  : 0/0
 15555 ;;		Unchanged: 0/0
 15556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15557 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15558 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15559 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15560 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15561 ;;Total ram usage:       15 bytes
 15562 ;; Hardware stack levels used:    1
 15563 ;; This function calls:
 15564 ;;		Nothing
 15565 ;; This function is called by:
 15566 ;;		i2_angleToPulse
 15567 ;;		i2_printf
 15568 ;; This function uses a non-reentrant model
 15569 ;;
 15570                           
 15571                           	psect	text59
 15572  0037EA                     __ptext59:
 15573                           	opt stack 0
 15574  0037EA                     i2___fttol:
 15575                           	opt stack 20
 15576                           
 15577                           ;incstack = 0
 15578  0037EA  C043  F045         	movff	i2___fttol@f1+2,??i2___fttol
 15579  0037EE  6A46               	clrf	(??i2___fttol+1)& (0+255),c
 15580  0037F0  6A47               	clrf	(??i2___fttol+2)& (0+255),c
 15581  0037F2  3442               	rlcf	i2___fttol@f1+1,w,c
 15582  0037F4  3645               	rlcf	??i2___fttol& (0+255),f,c
 15583  0037F6  E301               	bnc	u540_41
 15584  0037F8  8046               	bsf	(??i2___fttol+1)& (0+255),0,c
 15585  0037FA                     u540_41:
 15586  0037FA  5045               	movf	??i2___fttol,w,c
 15587  0037FC  6E4F               	movwf	i2___fttol@exp1,c
 15588  0037FE  504F               	movf	i2___fttol@exp1,w,c
 15589  003800  A4D8               	btfss	status,2,c
 15590  003802  D009               	goto	i2l5294
 15591  003804  0E00               	movlw	0
 15592  003806  6E41               	movwf	?i2___fttol,c
 15593  003808  0E00               	movlw	0
 15594  00380A  6E42               	movwf	?i2___fttol+1,c
 15595  00380C  0E00               	movlw	0
 15596  00380E  6E43               	movwf	?i2___fttol+2,c
 15597  003810  0E00               	movlw	0
 15598  003812  6E44               	movwf	?i2___fttol+3,c
 15599  003814  0012               	return	
 15600  003816                     i2l5294:
 15601  003816  0E17               	movlw	23
 15602  003818  6E45               	movwf	??i2___fttol& (0+255),c
 15603  00381A  C041  F046         	movff	i2___fttol@f1,??i2___fttol+1
 15604  00381E  C042  F047         	movff	i2___fttol@f1+1,??i2___fttol+2
 15605  003822  C043  F048         	movff	i2___fttol@f1+2,??i2___fttol+3
 15606  003826  2845               	incf	??i2___fttol,w,c
 15607  003828  6E49               	movwf	(??i2___fttol+4)& (0+255),c
 15608  00382A  D004               	goto	i2u542_40
 15609  00382C                     i2u542_45:
 15610  00382C  90D8               	bcf	status,0,c
 15611  00382E  3248               	rrcf	??i2___fttol+3,f,c
 15612  003830  3247               	rrcf	??i2___fttol+2,f,c
 15613  003832  3246               	rrcf	??i2___fttol+1,f,c
 15614  003834                     i2u542_40:
 15615  003834  2E49               	decfsz	(??i2___fttol+4)& (0+255),f,c
 15616  003836  D7FA               	goto	i2u542_45
 15617  003838  5046               	movf	??i2___fttol+1,w,c
 15618  00383A  6E4A               	movwf	i2___fttol@sign1,c
 15619  00383C  8E42               	bsf	i2___fttol@f1+1,7,c
 15620  00383E  0EFF               	movlw	255
 15621  003840  1641               	andwf	i2___fttol@f1,f,c
 15622  003842  0EFF               	movlw	255
 15623  003844  1642               	andwf	i2___fttol@f1+1,f,c
 15624  003846  0E00               	movlw	0
 15625  003848  1643               	andwf	i2___fttol@f1+2,f,c
 15626  00384A  5041               	movf	i2___fttol@f1,w,c
 15627  00384C  6E4B               	movwf	i2___fttol@lval,c
 15628  00384E  5042               	movf	i2___fttol@f1+1,w,c
 15629  003850  6E4C               	movwf	i2___fttol@lval+1,c
 15630  003852  5043               	movf	i2___fttol@f1+2,w,c
 15631  003854  6E4D               	movwf	i2___fttol@lval+2,c
 15632  003856  6A4E               	clrf	i2___fttol@lval+3,c
 15633  003858  0E8E               	movlw	142
 15634  00385A  5E4F               	subwf	i2___fttol@exp1,f,c
 15635  00385C  AE4F               	btfss	i2___fttol@exp1,7,c
 15636  00385E  D016               	goto	i2l5316
 15637  003860  504F               	movf	i2___fttol@exp1,w,c
 15638  003862  0A80               	xorlw	128
 15639  003864  0F8F               	addlw	143
 15640  003866  B0D8               	btfsc	status,0,c
 15641  003868  D009               	goto	i2l5312
 15642  00386A  0E00               	movlw	0
 15643  00386C  6E41               	movwf	?i2___fttol,c
 15644  00386E  0E00               	movlw	0
 15645  003870  6E42               	movwf	?i2___fttol+1,c
 15646  003872  0E00               	movlw	0
 15647  003874  6E43               	movwf	?i2___fttol+2,c
 15648  003876  0E00               	movlw	0
 15649  003878  6E44               	movwf	?i2___fttol+3,c
 15650  00387A  0012               	return	
 15651  00387C                     i2l5312:
 15652  00387C  90D8               	bcf	status,0,c
 15653  00387E  324E               	rrcf	i2___fttol@lval+3,f,c
 15654  003880  324D               	rrcf	i2___fttol@lval+2,f,c
 15655  003882  324C               	rrcf	i2___fttol@lval+1,f,c
 15656  003884  324B               	rrcf	i2___fttol@lval,f,c
 15657  003886  3E4F               	incfsz	i2___fttol@exp1,f,c
 15658  003888  D7F9               	goto	i2l5312
 15659  00388A  D015               	goto	i2l5326
 15660  00388C                     i2l5316:
 15661  00388C  0E17               	movlw	23
 15662  00388E  644F               	cpfsgt	i2___fttol@exp1,c
 15663  003890  D00F               	goto	i2l5324
 15664  003892  0E00               	movlw	0
 15665  003894  6E41               	movwf	?i2___fttol,c
 15666  003896  0E00               	movlw	0
 15667  003898  6E42               	movwf	?i2___fttol+1,c
 15668  00389A  0E00               	movlw	0
 15669  00389C  6E43               	movwf	?i2___fttol+2,c
 15670  00389E  0E00               	movlw	0
 15671  0038A0  6E44               	movwf	?i2___fttol+3,c
 15672  0038A2  0012               	return	
 15673  0038A4                     i2l5322:
 15674  0038A4  90D8               	bcf	status,0,c
 15675  0038A6  364B               	rlcf	i2___fttol@lval,f,c
 15676  0038A8  364C               	rlcf	i2___fttol@lval+1,f,c
 15677  0038AA  364D               	rlcf	i2___fttol@lval+2,f,c
 15678  0038AC  364E               	rlcf	i2___fttol@lval+3,f,c
 15679  0038AE  064F               	decf	i2___fttol@exp1,f,c
 15680  0038B0                     i2l5324:
 15681  0038B0  504F               	movf	i2___fttol@exp1,w,c
 15682  0038B2  A4D8               	btfss	status,2,c
 15683  0038B4  D7F7               	goto	i2l5322
 15684  0038B6                     i2l5326:
 15685  0038B6  504A               	movf	i2___fttol@sign1,w,c
 15686  0038B8  B4D8               	btfsc	status,2,c
 15687  0038BA  D008               	goto	i2l5330
 15688  0038BC  1E4E               	comf	i2___fttol@lval+3,f,c
 15689  0038BE  1E4D               	comf	i2___fttol@lval+2,f,c
 15690  0038C0  1E4C               	comf	i2___fttol@lval+1,f,c
 15691  0038C2  6C4B               	negf	i2___fttol@lval,c
 15692  0038C4  0E00               	movlw	0
 15693  0038C6  224C               	addwfc	i2___fttol@lval+1,f,c
 15694  0038C8  224D               	addwfc	i2___fttol@lval+2,f,c
 15695  0038CA  224E               	addwfc	i2___fttol@lval+3,f,c
 15696  0038CC                     i2l5330:
 15697  0038CC  C04B  F041         	movff	i2___fttol@lval,?i2___fttol
 15698  0038D0  C04C  F042         	movff	i2___fttol@lval+1,?i2___fttol+1
 15699  0038D4  C04D  F043         	movff	i2___fttol@lval+2,?i2___fttol+2
 15700  0038D8  C04E  F044         	movff	i2___fttol@lval+3,?i2___fttol+3
 15701  0038DC  0012               	return	
 15702  0038DE                     __end_ofi2___fttol:
 15703                           	opt stack 0
 15704                           pclatu	equ	0xFFB
 15705                           pclath	equ	0xFFA
 15706                           tblptru	equ	0xFF8
 15707                           tblptrh	equ	0xFF7
 15708                           tblptrl	equ	0xFF6
 15709                           tablat	equ	0xFF5
 15710                           prodh	equ	0xFF4
 15711                           prodl	equ	0xFF3
 15712                           intcon	equ	0xFF2
 15713                           intcon3	equ	0xFF0
 15714                           postinc0	equ	0xFEE
 15715                           fsr0h	equ	0xFEA
 15716                           fsr0l	equ	0xFE9
 15717                           wreg	equ	0xFE8
 15718                           postdec1	equ	0xFE5
 15719                           fsr1h	equ	0xFE2
 15720                           fsr1l	equ	0xFE1
 15721                           indf2	equ	0xFDF
 15722                           postinc2	equ	0xFDE
 15723                           postdec2	equ	0xFDD
 15724                           fsr2h	equ	0xFDA
 15725                           fsr2l	equ	0xFD9
 15726                           status	equ	0xFD8
 15727                           
 15728 ;; *************** function i2___ftsub *****************
 15729 ;; Defined at:
 15730 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 15731 ;; Parameters:    Size  Location     Type
 15732 ;;  f1              3   64[COMRAM] float 
 15733 ;;  f2              3   67[COMRAM] float 
 15734 ;; Auto vars:     Size  Location     Type
 15735 ;;		None
 15736 ;; Return value:  Size  Location     Type
 15737 ;;                  3   64[COMRAM] float 
 15738 ;; Registers used:
 15739 ;;		wreg, status,2, status,0, cstack
 15740 ;; Tracked objects:
 15741 ;;		On entry : 0/0
 15742 ;;		On exit  : 0/0
 15743 ;;		Unchanged: 0/0
 15744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15745 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15748 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15749 ;;Total ram usage:        6 bytes
 15750 ;; Hardware stack levels used:    1
 15751 ;; Hardware stack levels required when called:    2
 15752 ;; This function calls:
 15753 ;;		i2___ftadd
 15754 ;; This function is called by:
 15755 ;;		i2_printf
 15756 ;; This function uses a non-reentrant model
 15757 ;;
 15758                           
 15759                           	psect	text60
 15760  0049EA                     __ptext60:
 15761                           	opt stack 0
 15762  0049EA                     i2___ftsub:
 15763                           	opt stack 19
 15764                           
 15765                           ;incstack = 0
 15766  0049EA  5044               	movf	i2___ftsub@f2,w,c
 15767  0049EC  1045               	iorwf	i2___ftsub@f2+1,w,c
 15768  0049EE  1046               	iorwf	i2___ftsub@f2+2,w,c
 15769  0049F0  B4D8               	btfsc	status,2,c
 15770  0049F2  D006               	goto	i2l5738
 15771  0049F4  0E00               	movlw	0
 15772  0049F6  1A44               	xorwf	i2___ftsub@f2,f,c
 15773  0049F8  0E00               	movlw	0
 15774  0049FA  1A45               	xorwf	i2___ftsub@f2+1,f,c
 15775  0049FC  0E80               	movlw	128
 15776  0049FE  1A46               	xorwf	i2___ftsub@f2+2,f,c
 15777  004A00                     i2l5738:
 15778  004A00  C041  F035         	movff	i2___ftsub@f1,i2___ftadd@f1
 15779  004A04  C042  F036         	movff	i2___ftsub@f1+1,i2___ftadd@f1+1
 15780  004A08  C043  F037         	movff	i2___ftsub@f1+2,i2___ftadd@f1+2
 15781  004A0C  C044  F038         	movff	i2___ftsub@f2,i2___ftadd@f2
 15782  004A10  C045  F039         	movff	i2___ftsub@f2+1,i2___ftadd@f2+1
 15783  004A14  C046  F03A         	movff	i2___ftsub@f2+2,i2___ftadd@f2+2
 15784  004A18  EC78  F012         	call	i2___ftadd	;wreg free
 15785  004A1C  C035  F041         	movff	?i2___ftadd,?i2___ftsub
 15786  004A20  C036  F042         	movff	?i2___ftadd+1,?i2___ftsub+1
 15787  004A24  C037  F043         	movff	?i2___ftadd+2,?i2___ftsub+2
 15788  004A28  0012               	return	
 15789  004A2A                     __end_ofi2___ftsub:
 15790                           	opt stack 0
 15791                           pclatu	equ	0xFFB
 15792                           pclath	equ	0xFFA
 15793                           tblptru	equ	0xFF8
 15794                           tblptrh	equ	0xFF7
 15795                           tblptrl	equ	0xFF6
 15796                           tablat	equ	0xFF5
 15797                           prodh	equ	0xFF4
 15798                           prodl	equ	0xFF3
 15799                           intcon	equ	0xFF2
 15800                           intcon3	equ	0xFF0
 15801                           postinc0	equ	0xFEE
 15802                           fsr0h	equ	0xFEA
 15803                           fsr0l	equ	0xFE9
 15804                           wreg	equ	0xFE8
 15805                           postdec1	equ	0xFE5
 15806                           fsr1h	equ	0xFE2
 15807                           fsr1l	equ	0xFE1
 15808                           indf2	equ	0xFDF
 15809                           postinc2	equ	0xFDE
 15810                           postdec2	equ	0xFDD
 15811                           fsr2h	equ	0xFDA
 15812                           fsr2l	equ	0xFD9
 15813                           status	equ	0xFD8
 15814                           
 15815 ;; *************** function i2___ftadd *****************
 15816 ;; Defined at:
 15817 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 15818 ;; Parameters:    Size  Location     Type
 15819 ;;  f1              3   52[COMRAM] float 
 15820 ;;  f2              3   55[COMRAM] float 
 15821 ;; Auto vars:     Size  Location     Type
 15822 ;;  __ftadd         1   63[COMRAM] unsigned char 
 15823 ;;  __ftadd         1   62[COMRAM] unsigned char 
 15824 ;;  __ftadd         1   61[COMRAM] unsigned char 
 15825 ;; Return value:  Size  Location     Type
 15826 ;;                  3   52[COMRAM] float 
 15827 ;; Registers used:
 15828 ;;		wreg, status,2, status,0, cstack
 15829 ;; Tracked objects:
 15830 ;;		On entry : 0/0
 15831 ;;		On exit  : 0/0
 15832 ;;		Unchanged: 0/0
 15833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15834 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15835 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15836 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15837 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15838 ;;Total ram usage:       12 bytes
 15839 ;; Hardware stack levels used:    1
 15840 ;; Hardware stack levels required when called:    1
 15841 ;; This function calls:
 15842 ;;		i2___ftpack
 15843 ;; This function is called by:
 15844 ;;		i2_angleToPulse
 15845 ;;		i2_printf
 15846 ;;		i2___ftsub
 15847 ;; This function uses a non-reentrant model
 15848 ;;
 15849                           
 15850                           	psect	text61
 15851  0024F0                     __ptext61:
 15852                           	opt stack 0
 15853  0024F0                     i2___ftadd:
 15854                           	opt stack 19
 15855                           
 15856                           ;incstack = 0
 15857  0024F0  C037  F03B         	movff	i2___ftadd@f1+2,??i2___ftadd
 15858  0024F4  6A3C               	clrf	(??i2___ftadd+1)& (0+255),c
 15859  0024F6  6A3D               	clrf	(??i2___ftadd+2)& (0+255),c
 15860  0024F8  3436               	rlcf	i2___ftadd@f1+1,w,c
 15861  0024FA  363B               	rlcf	??i2___ftadd& (0+255),f,c
 15862  0024FC  E301               	bnc	u508_41
 15863  0024FE  803C               	bsf	(??i2___ftadd+1)& (0+255),0,c
 15864  002500                     u508_41:
 15865  002500  503B               	movf	??i2___ftadd,w,c
 15866  002502  6E40               	movwf	i2___ftadd@exp1,c
 15867  002504  C03A  F03B         	movff	i2___ftadd@f2+2,??i2___ftadd
 15868  002508  6A3C               	clrf	(??i2___ftadd+1)& (0+255),c
 15869  00250A  6A3D               	clrf	(??i2___ftadd+2)& (0+255),c
 15870  00250C  3439               	rlcf	i2___ftadd@f2+1,w,c
 15871  00250E  363B               	rlcf	??i2___ftadd& (0+255),f,c
 15872  002510  E301               	bnc	u509_41
 15873  002512  803C               	bsf	(??i2___ftadd+1)& (0+255),0,c
 15874  002514                     u509_41:
 15875  002514  503B               	movf	??i2___ftadd,w,c
 15876  002516  6E3F               	movwf	i2___ftadd@exp2,c
 15877  002518  5040               	movf	i2___ftadd@exp1,w,c
 15878  00251A  B4D8               	btfsc	status,2,c
 15879  00251C  D00B               	goto	i2l983
 15880  00251E  503F               	movf	i2___ftadd@exp2,w,c
 15881  002520  5C40               	subwf	i2___ftadd@exp1,w,c
 15882  002522  B0D8               	btfsc	status,0,c
 15883  002524  D00E               	goto	i2l5132
 15884  002526  5040               	movf	i2___ftadd@exp1,w,c
 15885  002528  0800               	sublw	0
 15886  00252A  243F               	addwf	i2___ftadd@exp2,w,c
 15887  00252C  6E3B               	movwf	??i2___ftadd& (0+255),c
 15888  00252E  0E18               	movlw	24
 15889  002530  643B               	cpfsgt	??i2___ftadd,c
 15890  002532  D007               	goto	i2l5132
 15891  002534                     i2l983:
 15892  002534  C038  F035         	movff	i2___ftadd@f2,?i2___ftadd
 15893  002538  C039  F036         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 15894  00253C  C03A  F037         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 15895  002540  0012               	return	
 15896  002542                     i2l5132:
 15897  002542  503F               	movf	i2___ftadd@exp2,w,c
 15898  002544  B4D8               	btfsc	status,2,c
 15899  002546  D00B               	goto	i2l987
 15900  002548  5040               	movf	i2___ftadd@exp1,w,c
 15901  00254A  5C3F               	subwf	i2___ftadd@exp2,w,c
 15902  00254C  B0D8               	btfsc	status,0,c
 15903  00254E  D00E               	goto	i2l5138
 15904  002550  503F               	movf	i2___ftadd@exp2,w,c
 15905  002552  0800               	sublw	0
 15906  002554  2440               	addwf	i2___ftadd@exp1,w,c
 15907  002556  6E3B               	movwf	??i2___ftadd& (0+255),c
 15908  002558  0E18               	movlw	24
 15909  00255A  643B               	cpfsgt	??i2___ftadd,c
 15910  00255C  D007               	goto	i2l5138
 15911  00255E                     i2l987:
 15912  00255E  C035  F035         	movff	i2___ftadd@f1,?i2___ftadd
 15913  002562  C036  F036         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 15914  002566  C037  F037         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 15915  00256A  0012               	return	
 15916  00256C                     i2l5138:
 15917  00256C  0E06               	movlw	6
 15918  00256E  6E3E               	movwf	i2___ftadd@sign,c
 15919  002570  BE37               	btfsc	i2___ftadd@f1+2,7,c
 15920  002572  8E3E               	bsf	i2___ftadd@sign,7,c
 15921  002574  BE3A               	btfsc	i2___ftadd@f2+2,7,c
 15922  002576  8C3E               	bsf	i2___ftadd@sign,6,c
 15923  002578  8E36               	bsf	i2___ftadd@f1+1,7,c
 15924  00257A  0EFF               	movlw	255
 15925  00257C  1635               	andwf	i2___ftadd@f1,f,c
 15926  00257E  0EFF               	movlw	255
 15927  002580  1636               	andwf	i2___ftadd@f1+1,f,c
 15928  002582  0E00               	movlw	0
 15929  002584  1637               	andwf	i2___ftadd@f1+2,f,c
 15930  002586  8E39               	bsf	i2___ftadd@f2+1,7,c
 15931  002588  0EFF               	movlw	255
 15932  00258A  1638               	andwf	i2___ftadd@f2,f,c
 15933  00258C  0EFF               	movlw	255
 15934  00258E  1639               	andwf	i2___ftadd@f2+1,f,c
 15935  002590  0E00               	movlw	0
 15936  002592  163A               	andwf	i2___ftadd@f2+2,f,c
 15937  002594  503F               	movf	i2___ftadd@exp2,w,c
 15938  002596  5C40               	subwf	i2___ftadd@exp1,w,c
 15939  002598  B0D8               	btfsc	status,0,c
 15940  00259A  D01B               	goto	i2l5164
 15941  00259C                     i2l5154:
 15942  00259C  90D8               	bcf	status,0,c
 15943  00259E  3638               	rlcf	i2___ftadd@f2,f,c
 15944  0025A0  3639               	rlcf	i2___ftadd@f2+1,f,c
 15945  0025A2  363A               	rlcf	i2___ftadd@f2+2,f,c
 15946  0025A4  063F               	decf	i2___ftadd@exp2,f,c
 15947  0025A6  5040               	movf	i2___ftadd@exp1,w,c
 15948  0025A8  183F               	xorwf	i2___ftadd@exp2,w,c
 15949  0025AA  B4D8               	btfsc	status,2,c
 15950  0025AC  D00D               	goto	i2l5162
 15951  0025AE  063E               	decf	i2___ftadd@sign,f,c
 15952  0025B0  C03E  F03B         	movff	i2___ftadd@sign,??i2___ftadd
 15953  0025B4  0E07               	movlw	7
 15954  0025B6  163B               	andwf	??i2___ftadd,f,c
 15955  0025B8  B4D8               	btfsc	status,2,c
 15956  0025BA  D006               	goto	i2l5162
 15957  0025BC  D7EF               	goto	i2l5154
 15958  0025BE                     i2l5160:
 15959  0025BE  90D8               	bcf	status,0,c
 15960  0025C0  3237               	rrcf	i2___ftadd@f1+2,f,c
 15961  0025C2  3236               	rrcf	i2___ftadd@f1+1,f,c
 15962  0025C4  3235               	rrcf	i2___ftadd@f1,f,c
 15963  0025C6  2A40               	incf	i2___ftadd@exp1,f,c
 15964  0025C8                     i2l5162:
 15965  0025C8  503F               	movf	i2___ftadd@exp2,w,c
 15966  0025CA  1840               	xorwf	i2___ftadd@exp1,w,c
 15967  0025CC  B4D8               	btfsc	status,2,c
 15968  0025CE  D01F               	goto	i2l998
 15969  0025D0  D7F6               	goto	i2l5160
 15970  0025D2                     i2l5164:
 15971  0025D2  5040               	movf	i2___ftadd@exp1,w,c
 15972  0025D4  5C3F               	subwf	i2___ftadd@exp2,w,c
 15973  0025D6  B0D8               	btfsc	status,0,c
 15974  0025D8  D01A               	goto	i2l998
 15975  0025DA                     i2l5166:
 15976  0025DA  90D8               	bcf	status,0,c
 15977  0025DC  3635               	rlcf	i2___ftadd@f1,f,c
 15978  0025DE  3636               	rlcf	i2___ftadd@f1+1,f,c
 15979  0025E0  3637               	rlcf	i2___ftadd@f1+2,f,c
 15980  0025E2  0640               	decf	i2___ftadd@exp1,f,c
 15981  0025E4  5040               	movf	i2___ftadd@exp1,w,c
 15982  0025E6  183F               	xorwf	i2___ftadd@exp2,w,c
 15983  0025E8  B4D8               	btfsc	status,2,c
 15984  0025EA  D00D               	goto	i2l5174
 15985  0025EC  063E               	decf	i2___ftadd@sign,f,c
 15986  0025EE  C03E  F03B         	movff	i2___ftadd@sign,??i2___ftadd
 15987  0025F2  0E07               	movlw	7
 15988  0025F4  163B               	andwf	??i2___ftadd,f,c
 15989  0025F6  B4D8               	btfsc	status,2,c
 15990  0025F8  D006               	goto	i2l5174
 15991  0025FA  D7EF               	goto	i2l5166
 15992  0025FC                     i2l5172:
 15993  0025FC  90D8               	bcf	status,0,c
 15994  0025FE  323A               	rrcf	i2___ftadd@f2+2,f,c
 15995  002600  3239               	rrcf	i2___ftadd@f2+1,f,c
 15996  002602  3238               	rrcf	i2___ftadd@f2,f,c
 15997  002604  2A3F               	incf	i2___ftadd@exp2,f,c
 15998  002606                     i2l5174:
 15999  002606  503F               	movf	i2___ftadd@exp2,w,c
 16000  002608  1840               	xorwf	i2___ftadd@exp1,w,c
 16001  00260A  A4D8               	btfss	status,2,c
 16002  00260C  D7F7               	goto	i2l5172
 16003  00260E                     i2l998:
 16004  00260E  AE3E               	btfss	i2___ftadd@sign,7,c
 16005  002610  D00C               	goto	i2l1007
 16006  002612  0EFF               	movlw	255
 16007  002614  1A35               	xorwf	i2___ftadd@f1,f,c
 16008  002616  0EFF               	movlw	255
 16009  002618  1A36               	xorwf	i2___ftadd@f1+1,f,c
 16010  00261A  0EFF               	movlw	255
 16011  00261C  1A37               	xorwf	i2___ftadd@f1+2,f,c
 16012  00261E  0E01               	movlw	1
 16013  002620  2635               	addwf	i2___ftadd@f1,f,c
 16014  002622  0E00               	movlw	0
 16015  002624  2236               	addwfc	i2___ftadd@f1+1,f,c
 16016  002626  0E00               	movlw	0
 16017  002628  2237               	addwfc	i2___ftadd@f1+2,f,c
 16018  00262A                     i2l1007:
 16019  00262A  AC3E               	btfss	i2___ftadd@sign,6,c
 16020  00262C  D00C               	goto	i2l5180
 16021  00262E  0EFF               	movlw	255
 16022  002630  1A38               	xorwf	i2___ftadd@f2,f,c
 16023  002632  0EFF               	movlw	255
 16024  002634  1A39               	xorwf	i2___ftadd@f2+1,f,c
 16025  002636  0EFF               	movlw	255
 16026  002638  1A3A               	xorwf	i2___ftadd@f2+2,f,c
 16027  00263A  0E01               	movlw	1
 16028  00263C  2638               	addwf	i2___ftadd@f2,f,c
 16029  00263E  0E00               	movlw	0
 16030  002640  2239               	addwfc	i2___ftadd@f2+1,f,c
 16031  002642  0E00               	movlw	0
 16032  002644  223A               	addwfc	i2___ftadd@f2+2,f,c
 16033  002646                     i2l5180:
 16034  002646  0E00               	movlw	0
 16035  002648  6E3E               	movwf	i2___ftadd@sign,c
 16036  00264A  5035               	movf	i2___ftadd@f1,w,c
 16037  00264C  2638               	addwf	i2___ftadd@f2,f,c
 16038  00264E  5036               	movf	i2___ftadd@f1+1,w,c
 16039  002650  2239               	addwfc	i2___ftadd@f2+1,f,c
 16040  002652  5037               	movf	i2___ftadd@f1+2,w,c
 16041  002654  223A               	addwfc	i2___ftadd@f2+2,f,c
 16042  002656  AE3A               	btfss	i2___ftadd@f2+2,7,c
 16043  002658  D00E               	goto	i2l5190
 16044  00265A  0EFF               	movlw	255
 16045  00265C  1A38               	xorwf	i2___ftadd@f2,f,c
 16046  00265E  0EFF               	movlw	255
 16047  002660  1A39               	xorwf	i2___ftadd@f2+1,f,c
 16048  002662  0EFF               	movlw	255
 16049  002664  1A3A               	xorwf	i2___ftadd@f2+2,f,c
 16050  002666  0E01               	movlw	1
 16051  002668  2638               	addwf	i2___ftadd@f2,f,c
 16052  00266A  0E00               	movlw	0
 16053  00266C  2239               	addwfc	i2___ftadd@f2+1,f,c
 16054  00266E  0E00               	movlw	0
 16055  002670  223A               	addwfc	i2___ftadd@f2+2,f,c
 16056  002672  0E01               	movlw	1
 16057  002674  6E3E               	movwf	i2___ftadd@sign,c
 16058  002676                     i2l5190:
 16059  002676  C038  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 16060  00267A  C039  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 16061  00267E  C03A  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 16062  002682  C040  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 16063  002686  C03E  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 16064  00268A  EC96  F01F         	call	i2___ftpack	;wreg free
 16065  00268E  C001  F035         	movff	?i2___ftpack,?i2___ftadd
 16066  002692  C002  F036         	movff	?i2___ftpack+1,?i2___ftadd+1
 16067  002696  C003  F037         	movff	?i2___ftpack+2,?i2___ftadd+2
 16068  00269A  0012               	return	
 16069  00269C                     __end_ofi2___ftadd:
 16070                           	opt stack 0
 16071                           pclatu	equ	0xFFB
 16072                           pclath	equ	0xFFA
 16073                           tblptru	equ	0xFF8
 16074                           tblptrh	equ	0xFF7
 16075                           tblptrl	equ	0xFF6
 16076                           tablat	equ	0xFF5
 16077                           prodh	equ	0xFF4
 16078                           prodl	equ	0xFF3
 16079                           intcon	equ	0xFF2
 16080                           intcon3	equ	0xFF0
 16081                           postinc0	equ	0xFEE
 16082                           fsr0h	equ	0xFEA
 16083                           fsr0l	equ	0xFE9
 16084                           wreg	equ	0xFE8
 16085                           postdec1	equ	0xFE5
 16086                           fsr1h	equ	0xFE2
 16087                           fsr1l	equ	0xFE1
 16088                           indf2	equ	0xFDF
 16089                           postinc2	equ	0xFDE
 16090                           postdec2	equ	0xFDD
 16091                           fsr2h	equ	0xFDA
 16092                           fsr2l	equ	0xFD9
 16093                           status	equ	0xFD8
 16094                           
 16095 ;; *************** function i2___ftpack *****************
 16096 ;; Defined at:
 16097 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 16098 ;; Parameters:    Size  Location     Type
 16099 ;;  arg             3    0[COMRAM] unsigned um
 16100 ;;  exp             1    3[COMRAM] unsigned char 
 16101 ;;  sign            1    4[COMRAM] unsigned char 
 16102 ;; Auto vars:     Size  Location     Type
 16103 ;;		None
 16104 ;; Return value:  Size  Location     Type
 16105 ;;                  3    0[COMRAM] float 
 16106 ;; Registers used:
 16107 ;;		wreg, status,2, status,0
 16108 ;; Tracked objects:
 16109 ;;		On entry : 0/0
 16110 ;;		On exit  : 0/0
 16111 ;;		Unchanged: 0/0
 16112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16113 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16115 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16116 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16117 ;;Total ram usage:        8 bytes
 16118 ;; Hardware stack levels used:    1
 16119 ;; This function calls:
 16120 ;;		Nothing
 16121 ;; This function is called by:
 16122 ;;		i2___altoft
 16123 ;;		i2___awtoft
 16124 ;;		i2___ftadd
 16125 ;;		i2___ftdiv
 16126 ;;		i2___ftmul
 16127 ;;		i2___lltoft
 16128 ;; This function uses a non-reentrant model
 16129 ;;
 16130                           
 16131                           	psect	text62
 16132  003F2C                     __ptext62:
 16133                           	opt stack 0
 16134  003F2C                     i2___ftpack:
 16135                           	opt stack 19
 16136                           
 16137                           ;incstack = 0
 16138  003F2C  5004               	movf	i2___ftpack@exp,w,c
 16139  003F2E  B4D8               	btfsc	status,2,c
 16140  003F30  D005               	goto	i2l4736
 16141  003F32  5001               	movf	i2___ftpack@arg,w,c
 16142  003F34  1002               	iorwf	i2___ftpack@arg+1,w,c
 16143  003F36  1003               	iorwf	i2___ftpack@arg+2,w,c
 16144  003F38  A4D8               	btfss	status,2,c
 16145  003F3A  D00C               	goto	i2l4742
 16146  003F3C                     i2l4736:
 16147  003F3C  0E00               	movlw	0
 16148  003F3E  6E01               	movwf	?i2___ftpack,c
 16149  003F40  0E00               	movlw	0
 16150  003F42  6E02               	movwf	?i2___ftpack+1,c
 16151  003F44  0E00               	movlw	0
 16152  003F46  6E03               	movwf	?i2___ftpack+2,c
 16153  003F48  0012               	return	
 16154  003F4A                     i2l4740:
 16155  003F4A  2A04               	incf	i2___ftpack@exp,f,c
 16156  003F4C  90D8               	bcf	status,0,c
 16157  003F4E  3203               	rrcf	i2___ftpack@arg+2,f,c
 16158  003F50  3202               	rrcf	i2___ftpack@arg+1,f,c
 16159  003F52  3201               	rrcf	i2___ftpack@arg,f,c
 16160  003F54                     i2l4742:
 16161  003F54  0E00               	movlw	0
 16162  003F56  1401               	andwf	i2___ftpack@arg,w,c
 16163  003F58  6E06               	movwf	??i2___ftpack& (0+255),c
 16164  003F5A  0E00               	movlw	0
 16165  003F5C  1402               	andwf	i2___ftpack@arg+1,w,c
 16166  003F5E  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 16167  003F60  0EFE               	movlw	254
 16168  003F62  1403               	andwf	i2___ftpack@arg+2,w,c
 16169  003F64  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 16170  003F66  5006               	movf	??i2___ftpack,w,c
 16171  003F68  1007               	iorwf	??i2___ftpack+1,w,c
 16172  003F6A  1008               	iorwf	??i2___ftpack+2,w,c
 16173  003F6C  B4D8               	btfsc	status,2,c
 16174  003F6E  D00C               	goto	i2l4748
 16175  003F70  D7EC               	goto	i2l4740
 16176  003F72                     i2l4744:
 16177  003F72  2A04               	incf	i2___ftpack@exp,f,c
 16178  003F74  0E01               	movlw	1
 16179  003F76  2601               	addwf	i2___ftpack@arg,f,c
 16180  003F78  0E00               	movlw	0
 16181  003F7A  2202               	addwfc	i2___ftpack@arg+1,f,c
 16182  003F7C  0E00               	movlw	0
 16183  003F7E  2203               	addwfc	i2___ftpack@arg+2,f,c
 16184  003F80  90D8               	bcf	status,0,c
 16185  003F82  3203               	rrcf	i2___ftpack@arg+2,f,c
 16186  003F84  3202               	rrcf	i2___ftpack@arg+1,f,c
 16187  003F86  3201               	rrcf	i2___ftpack@arg,f,c
 16188  003F88                     i2l4748:
 16189  003F88  0E00               	movlw	0
 16190  003F8A  1401               	andwf	i2___ftpack@arg,w,c
 16191  003F8C  6E06               	movwf	??i2___ftpack& (0+255),c
 16192  003F8E  0E00               	movlw	0
 16193  003F90  1402               	andwf	i2___ftpack@arg+1,w,c
 16194  003F92  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 16195  003F94  0EFF               	movlw	255
 16196  003F96  1403               	andwf	i2___ftpack@arg+2,w,c
 16197  003F98  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 16198  003F9A  5006               	movf	??i2___ftpack,w,c
 16199  003F9C  1007               	iorwf	??i2___ftpack+1,w,c
 16200  003F9E  1008               	iorwf	??i2___ftpack+2,w,c
 16201  003FA0  B4D8               	btfsc	status,2,c
 16202  003FA2  D006               	goto	i2l4752
 16203  003FA4  D7E6               	goto	i2l4744
 16204  003FA6                     i2l4750:
 16205  003FA6  0604               	decf	i2___ftpack@exp,f,c
 16206  003FA8  90D8               	bcf	status,0,c
 16207  003FAA  3601               	rlcf	i2___ftpack@arg,f,c
 16208  003FAC  3602               	rlcf	i2___ftpack@arg+1,f,c
 16209  003FAE  3603               	rlcf	i2___ftpack@arg+2,f,c
 16210  003FB0                     i2l4752:
 16211  003FB0  BE02               	btfsc	i2___ftpack@arg+1,7,c
 16212  003FB2  D003               	goto	i2l960
 16213  003FB4  0E02               	movlw	2
 16214  003FB6  6004               	cpfslt	i2___ftpack@exp,c
 16215  003FB8  D7F6               	goto	i2l4750
 16216  003FBA                     i2l960:
 16217  003FBA  A004               	btfss	i2___ftpack@exp,0,c
 16218  003FBC  9E02               	bcf	i2___ftpack@arg+1,7,c
 16219  003FBE  90D8               	bcf	status,0,c
 16220  003FC0  3204               	rrcf	i2___ftpack@exp,f,c
 16221  003FC2  5004               	movf	i2___ftpack@exp,w,c
 16222  003FC4  1203               	iorwf	i2___ftpack@arg+2,f,c
 16223  003FC6  5005               	movf	i2___ftpack@sign,w,c
 16224  003FC8  A4D8               	btfss	status,2,c
 16225  003FCA  8E03               	bsf	i2___ftpack@arg+2,7,c
 16226  003FCC  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 16227  003FD0  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 16228  003FD4  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 16229  003FD8  0012               	return	
 16230  003FDA                     __end_ofi2___ftpack:
 16231                           	opt stack 0
 16232                           pclatu	equ	0xFFB
 16233                           pclath	equ	0xFFA
 16234                           tblptru	equ	0xFF8
 16235                           tblptrh	equ	0xFF7
 16236                           tblptrl	equ	0xFF6
 16237                           tablat	equ	0xFF5
 16238                           prodh	equ	0xFF4
 16239                           prodl	equ	0xFF3
 16240                           intcon	equ	0xFF2
 16241                           intcon3	equ	0xFF0
 16242                           postinc0	equ	0xFEE
 16243                           fsr0h	equ	0xFEA
 16244                           fsr0l	equ	0xFE9
 16245                           wreg	equ	0xFE8
 16246                           postdec1	equ	0xFE5
 16247                           fsr1h	equ	0xFE2
 16248                           fsr1l	equ	0xFE1
 16249                           indf2	equ	0xFDF
 16250                           postinc2	equ	0xFDE
 16251                           postdec2	equ	0xFDD
 16252                           fsr2h	equ	0xFDA
 16253                           fsr2l	equ	0xFD9
 16254                           status	equ	0xFD8
 16255                           
 16256 ;; *************** function i2___ftneg *****************
 16257 ;; Defined at:
 16258 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 16259 ;; Parameters:    Size  Location     Type
 16260 ;;  f1              3    0[COMRAM] float 
 16261 ;; Auto vars:     Size  Location     Type
 16262 ;;		None
 16263 ;; Return value:  Size  Location     Type
 16264 ;;                  3    0[COMRAM] float 
 16265 ;; Registers used:
 16266 ;;		wreg, status,2, status,0
 16267 ;; Tracked objects:
 16268 ;;		On entry : 0/0
 16269 ;;		On exit  : 0/0
 16270 ;;		Unchanged: 0/0
 16271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16272 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16275 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16276 ;;Total ram usage:        3 bytes
 16277 ;; Hardware stack levels used:    1
 16278 ;; This function calls:
 16279 ;;		Nothing
 16280 ;; This function is called by:
 16281 ;;		i2_printf
 16282 ;; This function uses a non-reentrant model
 16283 ;;
 16284                           
 16285                           	psect	text63
 16286  004BD6                     __ptext63:
 16287                           	opt stack 0
 16288  004BD6                     i2___ftneg:
 16289                           	opt stack 21
 16290                           
 16291                           ;incstack = 0
 16292  004BD6  5001               	movf	i2___ftneg@f1,w,c
 16293  004BD8  1002               	iorwf	i2___ftneg@f1+1,w,c
 16294  004BDA  1003               	iorwf	i2___ftneg@f1+2,w,c
 16295  004BDC  B4D8               	btfsc	status,2,c
 16296  004BDE  D006               	goto	i2l1057
 16297  004BE0  0E00               	movlw	0
 16298  004BE2  1A01               	xorwf	i2___ftneg@f1,f,c
 16299  004BE4  0E00               	movlw	0
 16300  004BE6  1A02               	xorwf	i2___ftneg@f1+1,f,c
 16301  004BE8  0E80               	movlw	128
 16302  004BEA  1A03               	xorwf	i2___ftneg@f1+2,f,c
 16303  004BEC                     i2l1057:
 16304  004BEC  C001  F001         	movff	i2___ftneg@f1,?i2___ftneg
 16305  004BF0  C002  F002         	movff	i2___ftneg@f1+1,?i2___ftneg+1
 16306  004BF4  C003  F003         	movff	i2___ftneg@f1+2,?i2___ftneg+2
 16307  004BF8  0012               	return		;funcret
 16308  004BFA                     __end_ofi2___ftneg:
 16309                           	opt stack 0
 16310                           pclatu	equ	0xFFB
 16311                           pclath	equ	0xFFA
 16312                           tblptru	equ	0xFF8
 16313                           tblptrh	equ	0xFF7
 16314                           tblptrl	equ	0xFF6
 16315                           tablat	equ	0xFF5
 16316                           prodh	equ	0xFF4
 16317                           prodl	equ	0xFF3
 16318                           intcon	equ	0xFF2
 16319                           intcon3	equ	0xFF0
 16320                           postinc0	equ	0xFEE
 16321                           fsr0h	equ	0xFEA
 16322                           fsr0l	equ	0xFE9
 16323                           wreg	equ	0xFE8
 16324                           postdec1	equ	0xFE5
 16325                           fsr1h	equ	0xFE2
 16326                           fsr1l	equ	0xFE1
 16327                           indf2	equ	0xFDF
 16328                           postinc2	equ	0xFDE
 16329                           postdec2	equ	0xFDD
 16330                           fsr2h	equ	0xFDA
 16331                           fsr2l	equ	0xFD9
 16332                           status	equ	0xFD8
 16333                           
 16334 ;; *************** function i2___ftge *****************
 16335 ;; Defined at:
 16336 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 16337 ;; Parameters:    Size  Location     Type
 16338 ;;  ff1             3    0[COMRAM] float 
 16339 ;;  ff2             3    3[COMRAM] float 
 16340 ;; Auto vars:     Size  Location     Type
 16341 ;;		None
 16342 ;; Return value:  Size  Location     Type
 16343 ;;		None               void
 16344 ;; Registers used:
 16345 ;;		wreg, status,2, status,0
 16346 ;; Tracked objects:
 16347 ;;		On entry : 0/0
 16348 ;;		On exit  : 0/0
 16349 ;;		Unchanged: 0/0
 16350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16351 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16353 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16354 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16355 ;;Total ram usage:        9 bytes
 16356 ;; Hardware stack levels used:    1
 16357 ;; This function calls:
 16358 ;;		Nothing
 16359 ;; This function is called by:
 16360 ;;		i2_printf
 16361 ;; This function uses a non-reentrant model
 16362 ;;
 16363                           
 16364                           	psect	text64
 16365  00424E                     __ptext64:
 16366                           	opt stack 0
 16367  00424E                     i2___ftge:
 16368                           	opt stack 21
 16369                           
 16370                           ;incstack = 0
 16371  00424E  AE03               	btfss	i2___ftge@ff1+2,7,c
 16372  004250  D016               	goto	i2l5716
 16373  004252  C001  F007         	movff	i2___ftge@ff1,??i2___ftge
 16374  004256  C002  F008         	movff	i2___ftge@ff1+1,??i2___ftge+1
 16375  00425A  C003  F009         	movff	i2___ftge@ff1+2,??i2___ftge+2
 16376  00425E  1E07               	comf	??i2___ftge,f,c
 16377  004260  1E08               	comf	??i2___ftge+1,f,c
 16378  004262  1E09               	comf	??i2___ftge+2,f,c
 16379  004264  2A07               	incf	??i2___ftge,f,c
 16380  004266  0E00               	movlw	0
 16381  004268  2208               	addwfc	??i2___ftge+1,f,c
 16382  00426A  2209               	addwfc	??i2___ftge+2,f,c
 16383  00426C  0E00               	movlw	0
 16384  00426E  2407               	addwf	??i2___ftge,w,c
 16385  004270  6E01               	movwf	i2___ftge@ff1,c
 16386  004272  0E00               	movlw	0
 16387  004274  2008               	addwfc	??i2___ftge+1,w,c
 16388  004276  6E02               	movwf	i2___ftge@ff1+1,c
 16389  004278  0E80               	movlw	128
 16390  00427A  2009               	addwfc	??i2___ftge+2,w,c
 16391  00427C  6E03               	movwf	i2___ftge@ff1+2,c
 16392  00427E                     i2l5716:
 16393  00427E  AE06               	btfss	i2___ftge@ff2+2,7,c
 16394  004280  D016               	goto	i2l5720
 16395  004282  C004  F007         	movff	i2___ftge@ff2,??i2___ftge
 16396  004286  C005  F008         	movff	i2___ftge@ff2+1,??i2___ftge+1
 16397  00428A  C006  F009         	movff	i2___ftge@ff2+2,??i2___ftge+2
 16398  00428E  1E07               	comf	??i2___ftge,f,c
 16399  004290  1E08               	comf	??i2___ftge+1,f,c
 16400  004292  1E09               	comf	??i2___ftge+2,f,c
 16401  004294  2A07               	incf	??i2___ftge,f,c
 16402  004296  0E00               	movlw	0
 16403  004298  2208               	addwfc	??i2___ftge+1,f,c
 16404  00429A  2209               	addwfc	??i2___ftge+2,f,c
 16405  00429C  0E00               	movlw	0
 16406  00429E  2407               	addwf	??i2___ftge,w,c
 16407  0042A0  6E04               	movwf	i2___ftge@ff2,c
 16408  0042A2  0E00               	movlw	0
 16409  0042A4  2008               	addwfc	??i2___ftge+1,w,c
 16410  0042A6  6E05               	movwf	i2___ftge@ff2+1,c
 16411  0042A8  0E80               	movlw	128
 16412  0042AA  2009               	addwfc	??i2___ftge+2,w,c
 16413  0042AC  6E06               	movwf	i2___ftge@ff2+2,c
 16414  0042AE                     i2l5720:
 16415  0042AE  0E00               	movlw	0
 16416  0042B0  1A01               	xorwf	i2___ftge@ff1,f,c
 16417  0042B2  0E00               	movlw	0
 16418  0042B4  1A02               	xorwf	i2___ftge@ff1+1,f,c
 16419  0042B6  0E80               	movlw	128
 16420  0042B8  1A03               	xorwf	i2___ftge@ff1+2,f,c
 16421  0042BA  0E00               	movlw	0
 16422  0042BC  1A04               	xorwf	i2___ftge@ff2,f,c
 16423  0042BE  0E00               	movlw	0
 16424  0042C0  1A05               	xorwf	i2___ftge@ff2+1,f,c
 16425  0042C2  0E80               	movlw	128
 16426  0042C4  1A06               	xorwf	i2___ftge@ff2+2,f,c
 16427  0042C6  5004               	movf	i2___ftge@ff2,w,c
 16428  0042C8  5C01               	subwf	i2___ftge@ff1,w,c
 16429  0042CA  5005               	movf	i2___ftge@ff2+1,w,c
 16430  0042CC  5802               	subwfb	i2___ftge@ff1+1,w,c
 16431  0042CE  5006               	movf	i2___ftge@ff2+2,w,c
 16432  0042D0  5803               	subwfb	i2___ftge@ff1+2,w,c
 16433  0042D2  B0D8               	btfsc	status,0,c
 16434  0042D4  D002               	goto	i2l5726
 16435  0042D6  90D8               	bcf	status,0,c
 16436  0042D8  0012               	return	
 16437  0042DA                     i2l5726:
 16438  0042DA  80D8               	bsf	status,0,c
 16439  0042DC  0012               	return	
 16440  0042DE                     __end_ofi2___ftge:
 16441                           	opt stack 0
 16442                           pclatu	equ	0xFFB
 16443                           pclath	equ	0xFFA
 16444                           tblptru	equ	0xFF8
 16445                           tblptrh	equ	0xFF7
 16446                           tblptrl	equ	0xFF6
 16447                           tablat	equ	0xFF5
 16448                           prodh	equ	0xFF4
 16449                           prodl	equ	0xFF3
 16450                           intcon	equ	0xFF2
 16451                           intcon3	equ	0xFF0
 16452                           postinc0	equ	0xFEE
 16453                           fsr0h	equ	0xFEA
 16454                           fsr0l	equ	0xFE9
 16455                           wreg	equ	0xFE8
 16456                           postdec1	equ	0xFE5
 16457                           fsr1h	equ	0xFE2
 16458                           fsr1l	equ	0xFE1
 16459                           indf2	equ	0xFDF
 16460                           postinc2	equ	0xFDE
 16461                           postdec2	equ	0xFDD
 16462                           fsr2h	equ	0xFDA
 16463                           fsr2l	equ	0xFD9
 16464                           status	equ	0xFD8
 16465                           
 16466 ;; *************** function i2_lcdClear *****************
 16467 ;; Defined at:
 16468 ;;		line 74 in file "lcd.c"
 16469 ;; Parameters:    Size  Location     Type
 16470 ;;		None
 16471 ;; Auto vars:     Size  Location     Type
 16472 ;;		None
 16473 ;; Return value:  Size  Location     Type
 16474 ;;                  1    wreg      void 
 16475 ;; Registers used:
 16476 ;;		wreg, status,2, status,0, cstack
 16477 ;; Tracked objects:
 16478 ;;		On entry : 0/0
 16479 ;;		On exit  : 0/0
 16480 ;;		Unchanged: 0/0
 16481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16486 ;;Total ram usage:        0 bytes
 16487 ;; Hardware stack levels used:    1
 16488 ;; Hardware stack levels required when called:    2
 16489 ;; This function calls:
 16490 ;;		i2_lcdInst
 16491 ;; This function is called by:
 16492 ;;		_service
 16493 ;; This function uses a non-reentrant model
 16494 ;;
 16495                           
 16496                           	psect	text65
 16497  004C6C                     __ptext65:
 16498                           	opt stack 0
 16499  004C6C                     i2_lcdClear:
 16500                           	opt stack 20
 16501                           
 16502                           ;lcd.c: 75: lcdInst(0b00000001);
 16503                           
 16504                           ;incstack = 0
 16505  004C6C  0E01               	movlw	1
 16506  004C6E  EC0E  F026         	call	i2_lcdInst
 16507  004C72  0012               	return		;funcret
 16508  004C74                     __end_ofi2_lcdClear:
 16509                           	opt stack 0
 16510                           pclatu	equ	0xFFB
 16511                           pclath	equ	0xFFA
 16512                           tblptru	equ	0xFF8
 16513                           tblptrh	equ	0xFF7
 16514                           tblptrl	equ	0xFF6
 16515                           tablat	equ	0xFF5
 16516                           prodh	equ	0xFF4
 16517                           prodl	equ	0xFF3
 16518                           intcon	equ	0xFF2
 16519                           intcon3	equ	0xFF0
 16520                           postinc0	equ	0xFEE
 16521                           fsr0h	equ	0xFEA
 16522                           fsr0l	equ	0xFE9
 16523                           wreg	equ	0xFE8
 16524                           postdec1	equ	0xFE5
 16525                           fsr1h	equ	0xFE2
 16526                           fsr1l	equ	0xFE1
 16527                           indf2	equ	0xFDF
 16528                           postinc2	equ	0xFDE
 16529                           postdec2	equ	0xFDD
 16530                           fsr2h	equ	0xFDA
 16531                           fsr2l	equ	0xFD9
 16532                           status	equ	0xFD8
 16533                           
 16534 ;; *************** function i2_lcdInst *****************
 16535 ;; Defined at:
 16536 ;;		line 27 in file "lcd.c"
 16537 ;; Parameters:    Size  Location     Type
 16538 ;;  data            1    wreg     unsigned char 
 16539 ;; Auto vars:     Size  Location     Type
 16540 ;;  data            1    3[COMRAM] unsigned char 
 16541 ;; Return value:  Size  Location     Type
 16542 ;;                  1    wreg      void 
 16543 ;; Registers used:
 16544 ;;		wreg, status,2, status,0, cstack
 16545 ;; Tracked objects:
 16546 ;;		On entry : 0/0
 16547 ;;		On exit  : 0/0
 16548 ;;		Unchanged: 0/0
 16549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16551 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16552 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16553 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16554 ;;Total ram usage:        2 bytes
 16555 ;; Hardware stack levels used:    1
 16556 ;; Hardware stack levels required when called:    1
 16557 ;; This function calls:
 16558 ;;		i2_lcdNibble
 16559 ;; This function is called by:
 16560 ;;		i2_lcdClear
 16561 ;;		i2_lcdNewline
 16562 ;; This function uses a non-reentrant model
 16563 ;;
 16564                           
 16565                           	psect	text66
 16566  004C1C                     __ptext66:
 16567                           	opt stack 0
 16568  004C1C                     i2_lcdInst:
 16569                           	opt stack 18
 16570                           
 16571                           ;incstack = 0
 16572                           ;i2lcdInst@data stored from wreg
 16573  004C1C  6E04               	movwf	i2lcdInst@data,c
 16574                           
 16575                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 16576  004C1E  948C               	bcf	3980,2,c	;volatile
 16577                           
 16578                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 16579  004C20  0E74               	movlw	116
 16580  004C22                     i2u755_47:
 16581  004C22  2EE8               	decfsz	wreg,f,c
 16582  004C24  D7FE               	bra	i2u755_47
 16583  004C26  D000               	nop2	
 16584                           
 16585                           ;lcd.c: 30: lcdNibble(data);
 16586  004C28  5004               	movf	i2lcdInst@data,w,c
 16587  004C2A  EC93  F023         	call	i2_lcdNibble
 16588                           
 16589                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 16590  004C2E  0E04               	movlw	4
 16591  004C30  6E03               	movwf	??i2_lcdInst& (0+255),c
 16592  004C32  0E3E               	movlw	62
 16593  004C34                     i2u756_47:
 16594  004C34  2EE8               	decfsz	wreg,f,c
 16595  004C36  D7FE               	bra	i2u756_47
 16596  004C38  2E03               	decfsz	??i2_lcdInst& (0+255),f,c
 16597  004C3A  D7FC               	bra	i2u756_47
 16598  004C3C  0012               	return		;funcret
 16599  004C3E                     __end_ofi2_lcdInst:
 16600                           	opt stack 0
 16601                           pclatu	equ	0xFFB
 16602                           pclath	equ	0xFFA
 16603                           tblptru	equ	0xFF8
 16604                           tblptrh	equ	0xFF7
 16605                           tblptrl	equ	0xFF6
 16606                           tablat	equ	0xFF5
 16607                           prodh	equ	0xFF4
 16608                           prodl	equ	0xFF3
 16609                           intcon	equ	0xFF2
 16610                           intcon3	equ	0xFF0
 16611                           postinc0	equ	0xFEE
 16612                           fsr0h	equ	0xFEA
 16613                           fsr0l	equ	0xFE9
 16614                           wreg	equ	0xFE8
 16615                           postdec1	equ	0xFE5
 16616                           fsr1h	equ	0xFE2
 16617                           fsr1l	equ	0xFE1
 16618                           indf2	equ	0xFDF
 16619                           postinc2	equ	0xFDE
 16620                           postdec2	equ	0xFDD
 16621                           fsr2h	equ	0xFDA
 16622                           fsr2l	equ	0xFD9
 16623                           status	equ	0xFD8
 16624                           
 16625 ;; *************** function i2_lcdNibble *****************
 16626 ;; Defined at:
 16627 ;;		line 46 in file "lcd.c"
 16628 ;; Parameters:    Size  Location     Type
 16629 ;;  data            1    wreg     unsigned char 
 16630 ;; Auto vars:     Size  Location     Type
 16631 ;;  data            1    1[COMRAM] unsigned char 
 16632 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 16633 ;; Return value:  Size  Location     Type
 16634 ;;                  1    wreg      void 
 16635 ;; Registers used:
 16636 ;;		wreg, status,2, status,0
 16637 ;; Tracked objects:
 16638 ;;		On entry : 0/0
 16639 ;;		On exit  : 0/0
 16640 ;;		Unchanged: 0/0
 16641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16643 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16645 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16646 ;;Total ram usage:        2 bytes
 16647 ;; Hardware stack levels used:    1
 16648 ;; This function calls:
 16649 ;;		Nothing
 16650 ;; This function is called by:
 16651 ;;		i2_lcdInst
 16652 ;;		i2_putch
 16653 ;; This function uses a non-reentrant model
 16654 ;;
 16655                           
 16656                           	psect	text67
 16657  004726                     __ptext67:
 16658                           	opt stack 0
 16659  004726                     i2_lcdNibble:
 16660                           	opt stack 20
 16661                           
 16662                           ;incstack = 0
 16663                           ;i2lcdNibble@data stored from wreg
 16664  004726  6E02               	movwf	i2lcdNibble@data,c
 16665                           
 16666                           ;lcd.c: 48: char temp = data & 0xF0;
 16667  004728  5002               	movf	i2lcdNibble@data,w,c
 16668  00472A  0BF0               	andlw	240
 16669  00472C  6E01               	movwf	i2lcdNibble@temp,c
 16670                           
 16671                           ;lcd.c: 49: LATD = LATD & 0x0F;
 16672  00472E  508C               	movf	3980,w,c	;volatile
 16673  004730  0B0F               	andlw	15
 16674  004732  6E8C               	movwf	3980,c	;volatile
 16675                           
 16676                           ;lcd.c: 50: LATD = temp | LATD;
 16677  004734  5001               	movf	i2lcdNibble@temp,w,c
 16678  004736  108C               	iorwf	3980,w,c	;volatile
 16679  004738  6E8C               	movwf	3980,c	;volatile
 16680                           
 16681                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 16682  00473A  968C               	bcf	3980,3,c	;volatile
 16683                           
 16684                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 16685  00473C  0ED6               	movlw	214
 16686  00473E                     i2u757_47:
 16687  00473E  D000               	nop2	
 16688  004740  D000               	nop2	
 16689  004742  2EE8               	decfsz	wreg,f,c
 16690  004744  D7FC               	bra	i2u757_47
 16691  004746  D000               	nop2	
 16692                           
 16693                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 16694  004748  868C               	bsf	3980,3,c	;volatile
 16695                           
 16696                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 16697  00474A  0ED6               	movlw	214
 16698  00474C                     i2u758_47:
 16699  00474C  D000               	nop2	
 16700  00474E  D000               	nop2	
 16701  004750  2EE8               	decfsz	wreg,f,c
 16702  004752  D7FC               	bra	i2u758_47
 16703  004754  D000               	nop2	
 16704                           
 16705                           ;lcd.c: 58: data = data << 4;
 16706  004756  3802               	swapf	i2lcdNibble@data,w,c
 16707  004758  0BF0               	andlw	240
 16708  00475A  6E02               	movwf	i2lcdNibble@data,c
 16709                           
 16710                           ;lcd.c: 60: temp = data & 0xF0;
 16711  00475C  5002               	movf	i2lcdNibble@data,w,c
 16712  00475E  0BF0               	andlw	240
 16713  004760  6E01               	movwf	i2lcdNibble@temp,c
 16714                           
 16715                           ;lcd.c: 61: LATD = LATD & 0x0F;
 16716  004762  508C               	movf	3980,w,c	;volatile
 16717  004764  0B0F               	andlw	15
 16718  004766  6E8C               	movwf	3980,c	;volatile
 16719                           
 16720                           ;lcd.c: 62: LATD = temp | LATD;
 16721  004768  5001               	movf	i2lcdNibble@temp,w,c
 16722  00476A  108C               	iorwf	3980,w,c	;volatile
 16723  00476C  6E8C               	movwf	3980,c	;volatile
 16724                           
 16725                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 16726  00476E  968C               	bcf	3980,3,c	;volatile
 16727                           
 16728                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 16729  004770  0ED6               	movlw	214
 16730  004772                     i2u759_47:
 16731  004772  D000               	nop2	
 16732  004774  D000               	nop2	
 16733  004776  2EE8               	decfsz	wreg,f,c
 16734  004778  D7FC               	bra	i2u759_47
 16735  00477A  D000               	nop2	
 16736                           
 16737                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 16738  00477C  868C               	bsf	3980,3,c	;volatile
 16739                           
 16740                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 16741  00477E  0ED6               	movlw	214
 16742  004780                     i2u760_47:
 16743  004780  D000               	nop2	
 16744  004782  D000               	nop2	
 16745  004784  2EE8               	decfsz	wreg,f,c
 16746  004786  D7FC               	bra	i2u760_47
 16747  004788  D000               	nop2	
 16748  00478A  0012               	return		;funcret
 16749  00478C                     __end_ofi2_lcdNibble:
 16750                           	opt stack 0
 16751                           pclatu	equ	0xFFB
 16752                           pclath	equ	0xFFA
 16753                           tblptru	equ	0xFF8
 16754                           tblptrh	equ	0xFF7
 16755                           tblptrl	equ	0xFF6
 16756                           tablat	equ	0xFF5
 16757                           prodh	equ	0xFF4
 16758                           prodl	equ	0xFF3
 16759                           intcon	equ	0xFF2
 16760                           intcon3	equ	0xFF0
 16761                           postinc0	equ	0xFEE
 16762                           fsr0h	equ	0xFEA
 16763                           fsr0l	equ	0xFE9
 16764                           wreg	equ	0xFE8
 16765                           postdec1	equ	0xFE5
 16766                           fsr1h	equ	0xFE2
 16767                           fsr1l	equ	0xFE1
 16768                           indf2	equ	0xFDF
 16769                           postinc2	equ	0xFDE
 16770                           postdec2	equ	0xFDD
 16771                           fsr2h	equ	0xFDA
 16772                           fsr2l	equ	0xFD9
 16773                           status	equ	0xFD8
 16774                           
 16775 ;; *************** function _servoInterruptService *****************
 16776 ;; Defined at:
 16777 ;;		line 52 in file "servo.c"
 16778 ;; Parameters:    Size  Location     Type
 16779 ;;		None
 16780 ;; Auto vars:     Size  Location     Type
 16781 ;;		None
 16782 ;; Return value:  Size  Location     Type
 16783 ;;                  1    wreg      void 
 16784 ;; Registers used:
 16785 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16786 ;; Tracked objects:
 16787 ;;		On entry : 0/0
 16788 ;;		On exit  : 0/0
 16789 ;;		Unchanged: 0/0
 16790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16793 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16794 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16795 ;;Total ram usage:        4 bytes
 16796 ;; Hardware stack levels used:    1
 16797 ;; Hardware stack levels required when called:    1
 16798 ;; This function calls:
 16799 ;;		i2___awmod
 16800 ;;		i2_digitalWrite
 16801 ;;		i2_startTimer
 16802 ;; This function is called by:
 16803 ;;		_service
 16804 ;; This function uses a non-reentrant model
 16805 ;;
 16806                           
 16807                           	psect	text68
 16808  0034EC                     __ptext68:
 16809                           	opt stack 0
 16810  0034EC                     _servoInterruptService:
 16811                           	opt stack 21
 16812                           
 16813                           ;servo.c: 54: if(TMR0IF){TMR0IF = 0;
 16814                           
 16815                           ;incstack = 0
 16816  0034EC  A4F2               	btfss	intcon,2,c	;volatile
 16817  0034EE  0012               	return	
 16818  0034F0  94F2               	bcf	intcon,2,c	;volatile
 16819                           
 16820                           ;servo.c: 55: digitalWrite(servos[curr],0);
 16821  0034F2  90D8               	bcf	status,0,c
 16822  0034F4  3475               	rlcf	_curr,w,c
 16823  0034F6  6ED9               	movwf	fsr2l,c
 16824  0034F8  3476               	rlcf	_curr+1,w,c
 16825  0034FA  6EDA               	movwf	fsr2h,c
 16826  0034FC  0E60               	movlw	low _servos
 16827  0034FE  26D9               	addwf	fsr2l,f,c
 16828  003500  0E01               	movlw	high _servos
 16829  003502  22DA               	addwfc	fsr2h,f,c
 16830  003504  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 16831  003508  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 16832  00350C  0E00               	movlw	0
 16833  00350E  6E0A               	movwf	i2digitalWrite@val+1,c
 16834  003510  0E00               	movlw	0
 16835  003512  6E09               	movwf	i2digitalWrite@val,c
 16836  003514  EC1E  F01E         	call	i2_digitalWrite	;wreg free
 16837                           
 16838                           ;servo.c: 56: digitalWrite(servos[ (curr+1)%(n+1) ],1);
 16839  003518  0E01               	movlw	1
 16840  00351A  2475               	addwf	_curr,w,c
 16841  00351C  6E01               	movwf	i2___awmod@dividend,c
 16842  00351E  0E00               	movlw	0
 16843  003520  2076               	addwfc	_curr+1,w,c
 16844  003522  6E02               	movwf	i2___awmod@dividend+1,c
 16845  003524  0E01               	movlw	1
 16846  003526  0101               	movlb	1	; () banked
 16847  003528  2577               	addwf	_n& (0+255),w,b
 16848  00352A  6E03               	movwf	i2___awmod@divisor,c
 16849  00352C  0E00               	movlw	0
 16850  00352E  0101               	movlb	1	; () banked
 16851  003530  2178               	addwfc	(_n+1)& (0+255),w,b
 16852  003532  6E04               	movwf	i2___awmod@divisor+1,c
 16853  003534  EC28  F023         	call	i2___awmod	;wreg free
 16854  003538  90D8               	bcf	status,0,c
 16855  00353A  3601               	rlcf	?i2___awmod,f,c
 16856  00353C  3602               	rlcf	?i2___awmod+1,f,c
 16857  00353E  0E60               	movlw	low _servos
 16858  003540  2401               	addwf	?i2___awmod,w,c
 16859  003542  6ED9               	movwf	fsr2l,c
 16860  003544  0E01               	movlw	high _servos
 16861  003546  2002               	addwfc	?i2___awmod+1,w,c
 16862  003548  6EDA               	movwf	fsr2h,c
 16863  00354A  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 16864  00354E  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 16865  003552  0E00               	movlw	0
 16866  003554  6E0A               	movwf	i2digitalWrite@val+1,c
 16867  003556  0E01               	movlw	1
 16868  003558  6E09               	movwf	i2digitalWrite@val,c
 16869  00355A  EC1E  F01E         	call	i2_digitalWrite	;wreg free
 16870                           
 16871                           ;servo.c: 57: startTimer(0, 0xFFFF - pulse[ (curr+1)%(n+1) ]);
 16872  00355E  0E00               	movlw	0
 16873  003560  6E08               	movwf	i2startTimer@timer+1,c
 16874  003562  0E00               	movlw	0
 16875  003564  6E07               	movwf	i2startTimer@timer,c
 16876  003566  0EFF               	movlw	255
 16877  003568  6E10               	movwf	??_servoInterruptService& (0+255),c
 16878  00356A  0EFF               	movlw	255
 16879  00356C  6E11               	movwf	(??_servoInterruptService+1)& (0+255),c
 16880  00356E  0E01               	movlw	1
 16881  003570  2475               	addwf	_curr,w,c
 16882  003572  6E01               	movwf	i2___awmod@dividend,c
 16883  003574  0E00               	movlw	0
 16884  003576  2076               	addwfc	_curr+1,w,c
 16885  003578  6E02               	movwf	i2___awmod@dividend+1,c
 16886  00357A  0E01               	movlw	1
 16887  00357C  0101               	movlb	1	; () banked
 16888  00357E  2577               	addwf	_n& (0+255),w,b
 16889  003580  6E03               	movwf	i2___awmod@divisor,c
 16890  003582  0E00               	movlw	0
 16891  003584  0101               	movlb	1	; () banked
 16892  003586  2178               	addwfc	(_n+1)& (0+255),w,b
 16893  003588  6E04               	movwf	i2___awmod@divisor+1,c
 16894  00358A  EC28  F023         	call	i2___awmod	;wreg free
 16895  00358E  90D8               	bcf	status,0,c
 16896  003590  3601               	rlcf	?i2___awmod,f,c
 16897  003592  3602               	rlcf	?i2___awmod+1,f,c
 16898  003594  0EEA               	movlw	low _pulse
 16899  003596  2401               	addwf	?i2___awmod,w,c
 16900  003598  6ED9               	movwf	fsr2l,c
 16901  00359A  0E00               	movlw	high _pulse
 16902  00359C  2002               	addwfc	?i2___awmod+1,w,c
 16903  00359E  6EDA               	movwf	fsr2h,c
 16904  0035A0  CFDE F012          	movff	postinc2,??_servoInterruptService+2
 16905  0035A4  CFDD F013          	movff	postdec2,??_servoInterruptService+3
 16906  0035A8  1E12               	comf	??_servoInterruptService+2,f,c
 16907  0035AA  1E13               	comf	??_servoInterruptService+3,f,c
 16908  0035AC  4A12               	infsnz	??_servoInterruptService+2,f,c
 16909  0035AE  2A13               	incf	??_servoInterruptService+3,f,c
 16910  0035B0  5010               	movf	??_servoInterruptService,w,c
 16911  0035B2  2612               	addwf	??_servoInterruptService+2,f,c
 16912  0035B4  5011               	movf	??_servoInterruptService+1,w,c
 16913  0035B6  2213               	addwfc	??_servoInterruptService+3,f,c
 16914  0035B8  C012  F009         	movff	??_servoInterruptService+2,i2startTimer@val
 16915  0035BC  C013  F00A         	movff	??_servoInterruptService+3,i2startTimer@val+1
 16916  0035C0  6A0B               	clrf	i2startTimer@val+2,c
 16917  0035C2  6A0C               	clrf	i2startTimer@val+3,c
 16918  0035C4  EC42  F024         	call	i2_startTimer	;wreg free
 16919                           
 16920                           ;servo.c: 59: curr = (curr+1)%(n+1);
 16921  0035C8  0E01               	movlw	1
 16922  0035CA  2475               	addwf	_curr,w,c
 16923  0035CC  6E01               	movwf	i2___awmod@dividend,c
 16924  0035CE  0E00               	movlw	0
 16925  0035D0  2076               	addwfc	_curr+1,w,c
 16926  0035D2  6E02               	movwf	i2___awmod@dividend+1,c
 16927  0035D4  0E01               	movlw	1
 16928  0035D6  0101               	movlb	1	; () banked
 16929  0035D8  2577               	addwf	_n& (0+255),w,b
 16930  0035DA  6E03               	movwf	i2___awmod@divisor,c
 16931  0035DC  0E00               	movlw	0
 16932  0035DE  0101               	movlb	1	; () banked
 16933  0035E0  2178               	addwfc	(_n+1)& (0+255),w,b
 16934  0035E2  6E04               	movwf	i2___awmod@divisor+1,c
 16935  0035E4  EC28  F023         	call	i2___awmod	;wreg free
 16936  0035E8  C001  F075         	movff	?i2___awmod,_curr
 16937  0035EC  C002  F076         	movff	?i2___awmod+1,_curr+1
 16938  0035F0  0012               	return	
 16939  0035F2                     __end_of_servoInterruptService:
 16940                           	opt stack 0
 16941                           pclatu	equ	0xFFB
 16942                           pclath	equ	0xFFA
 16943                           tblptru	equ	0xFF8
 16944                           tblptrh	equ	0xFF7
 16945                           tblptrl	equ	0xFF6
 16946                           tablat	equ	0xFF5
 16947                           prodh	equ	0xFF4
 16948                           prodl	equ	0xFF3
 16949                           intcon	equ	0xFF2
 16950                           intcon3	equ	0xFF0
 16951                           postinc0	equ	0xFEE
 16952                           fsr0h	equ	0xFEA
 16953                           fsr0l	equ	0xFE9
 16954                           wreg	equ	0xFE8
 16955                           postdec1	equ	0xFE5
 16956                           fsr1h	equ	0xFE2
 16957                           fsr1l	equ	0xFE1
 16958                           indf2	equ	0xFDF
 16959                           postinc2	equ	0xFDE
 16960                           postdec2	equ	0xFDD
 16961                           fsr2h	equ	0xFDA
 16962                           fsr2l	equ	0xFD9
 16963                           status	equ	0xFD8
 16964                           
 16965 ;; *************** function i2_startTimer *****************
 16966 ;; Defined at:
 16967 ;;		line 75 in file "timer.c"
 16968 ;; Parameters:    Size  Location     Type
 16969 ;;  timer           2    6[COMRAM] int 
 16970 ;;  val             4    8[COMRAM] long 
 16971 ;; Auto vars:     Size  Location     Type
 16972 ;;		None
 16973 ;; Return value:  Size  Location     Type
 16974 ;;                  1    wreg      void 
 16975 ;; Registers used:
 16976 ;;		wreg, status,2, status,0
 16977 ;; Tracked objects:
 16978 ;;		On entry : 0/0
 16979 ;;		On exit  : 0/0
 16980 ;;		Unchanged: 0/0
 16981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16982 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16984 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16985 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16986 ;;Total ram usage:        8 bytes
 16987 ;; Hardware stack levels used:    1
 16988 ;; This function calls:
 16989 ;;		Nothing
 16990 ;; This function is called by:
 16991 ;;		_servoInterruptService
 16992 ;; This function uses a non-reentrant model
 16993 ;;
 16994                           
 16995                           	psect	text69
 16996  004884                     __ptext69:
 16997                           	opt stack 0
 16998  004884                     i2_startTimer:
 16999                           	opt stack 21
 17000                           
 17001                           ;timer.c: 76: switch(timer){
 17002                           
 17003                           ;incstack = 0
 17004  004884  D012               	goto	i2l5522
 17005  004886                     i2l385:
 17006                           
 17007                           ;timer.c: 78: TMR0H = val>>8;
 17008  004886  C00A  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 17009                           
 17010                           ;timer.c: 79: TMR0L = val;
 17011  00488A  C009  FFD6         	movff	i2startTimer@val,4054	;volatile
 17012                           
 17013                           ;timer.c: 80: T0CON |= 1<<7;
 17014  00488E  8ED5               	bsf	4053,7,c	;volatile
 17015                           
 17016                           ;timer.c: 81: break;
 17017  004890  0012               	return	
 17018  004892                     i2l387:
 17019                           
 17020                           ;timer.c: 83: TMR1H = val>>8;
 17021  004892  C00A  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 17022                           
 17023                           ;timer.c: 84: TMR1L = val;
 17024  004896  C009  FFCE         	movff	i2startTimer@val,4046	;volatile
 17025                           
 17026                           ;timer.c: 85: T1CON |= 1<<0;
 17027  00489A  80CD               	bsf	4045,0,c	;volatile
 17028                           
 17029                           ;timer.c: 86: break;
 17030  00489C  0012               	return	
 17031  00489E                     i2l388:
 17032                           
 17033                           ;timer.c: 88: TMR3H = val>>8;
 17034  00489E  C00A  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 17035                           
 17036                           ;timer.c: 89: TMR3L = val;
 17037  0048A2  C009  FFB2         	movff	i2startTimer@val,4018	;volatile
 17038                           
 17039                           ;timer.c: 90: T3CON |= 1<<0;
 17040  0048A6  80B1               	bsf	4017,0,c	;volatile
 17041                           
 17042                           ;timer.c: 91: }
 17043  0048A8  0012               	return	
 17044  0048AA                     i2l5522:
 17045  0048AA  C007  F00D         	movff	i2startTimer@timer,??i2_startTimer
 17046  0048AE  C008  F00E         	movff	i2startTimer@timer+1,??i2_startTimer+1
 17047                           
 17048                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17049                           ; Switch size 1, requested type "space"
 17050                           ; Number of cases is 1, Range of values is 0 to 0
 17051                           ; switch strategies available:
 17052                           ; Name         Instructions Cycles
 17053                           ; simple_byte            4     3 (average)
 17054                           ;	Chosen strategy is simple_byte
 17055  0048B2  500E               	movf	??i2_startTimer+1,w,c
 17056  0048B4  0A00               	xorlw	0	; case 0
 17057  0048B6  A4D8               	btfss	status,2,c
 17058  0048B8  0012               	return	
 17059                           
 17060                           ; Switch size 1, requested type "space"
 17061                           ; Number of cases is 3, Range of values is 0 to 3
 17062                           ; switch strategies available:
 17063                           ; Name         Instructions Cycles
 17064                           ; simple_byte           10     6 (average)
 17065                           ;	Chosen strategy is simple_byte
 17066  0048BA  500D               	movf	??i2_startTimer,w,c
 17067  0048BC  0A00               	xorlw	0	; case 0
 17068  0048BE  B4D8               	btfsc	status,2,c
 17069  0048C0  D7E2               	goto	i2l385
 17070  0048C2  0A01               	xorlw	1	; case 1
 17071  0048C4  B4D8               	btfsc	status,2,c
 17072  0048C6  D7E5               	goto	i2l387
 17073  0048C8  0A02               	xorlw	2	; case 3
 17074  0048CA  A4D8               	btfss	status,2,c
 17075  0048CC  0012               	return	
 17076  0048CE  D7E7               	goto	i2l388
 17077  0048D0                     __end_ofi2_startTimer:
 17078                           	opt stack 0
 17079                           pclatu	equ	0xFFB
 17080                           pclath	equ	0xFFA
 17081                           tblptru	equ	0xFF8
 17082                           tblptrh	equ	0xFF7
 17083                           tblptrl	equ	0xFF6
 17084                           tablat	equ	0xFF5
 17085                           prodh	equ	0xFF4
 17086                           prodl	equ	0xFF3
 17087                           intcon	equ	0xFF2
 17088                           intcon3	equ	0xFF0
 17089                           postinc0	equ	0xFEE
 17090                           fsr0h	equ	0xFEA
 17091                           fsr0l	equ	0xFE9
 17092                           wreg	equ	0xFE8
 17093                           postdec1	equ	0xFE5
 17094                           fsr1h	equ	0xFE2
 17095                           fsr1l	equ	0xFE1
 17096                           indf2	equ	0xFDF
 17097                           postinc2	equ	0xFDE
 17098                           postdec2	equ	0xFDD
 17099                           fsr2h	equ	0xFDA
 17100                           fsr2l	equ	0xFD9
 17101                           status	equ	0xFD8
 17102                           
 17103 ;; *************** function i2_digitalWrite *****************
 17104 ;; Defined at:
 17105 ;;		line 53 in file "iopin.c"
 17106 ;; Parameters:    Size  Location     Type
 17107 ;;  pin             2    6[COMRAM] PTR int 
 17108 ;;		 -> AA_float(4), redirectingServo(6), padServo(6), conveyorServo(6), 
 17109 ;;		 -> cylinderMotor(4), 
 17110 ;;  val             2    8[COMRAM] int 
 17111 ;; Auto vars:     Size  Location     Type
 17112 ;;  digitalWrite    2   13[COMRAM] int 
 17113 ;; Return value:  Size  Location     Type
 17114 ;;                  1    wreg      void 
 17115 ;; Registers used:
 17116 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17117 ;; Tracked objects:
 17118 ;;		On entry : 0/0
 17119 ;;		On exit  : 0/0
 17120 ;;		Unchanged: 0/0
 17121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17122 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17123 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17124 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17125 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17126 ;;Total ram usage:        9 bytes
 17127 ;; Hardware stack levels used:    1
 17128 ;; This function calls:
 17129 ;;		Nothing
 17130 ;; This function is called by:
 17131 ;;		_servoInterruptService
 17132 ;; This function uses a non-reentrant model
 17133 ;;
 17134                           
 17135                           	psect	text70
 17136  003C3C                     __ptext70:
 17137                           	opt stack 0
 17138  003C3C                     i2_digitalWrite:
 17139                           	opt stack 21
 17140                           
 17141                           ;iopin.c: 54: if(pin){
 17142                           
 17143                           ;incstack = 0
 17144  003C3C  5007               	movf	i2digitalWrite@pin,w,c
 17145  003C3E  1008               	iorwf	i2digitalWrite@pin+1,w,c
 17146  003C40  B4D8               	btfsc	status,2,c
 17147  003C42  0012               	return	
 17148                           
 17149                           ;iopin.c: 55: int p = 1 << pin[1];
 17150  003C44  EE20 F002          	lfsr	2,2
 17151  003C48  5007               	movf	i2digitalWrite@pin,w,c
 17152  003C4A  26D9               	addwf	fsr2l,f,c
 17153  003C4C  5008               	movf	i2digitalWrite@pin+1,w,c
 17154  003C4E  22DA               	addwfc	fsr2h,f,c
 17155  003C50  50DF               	movf	indf2,w,c
 17156  003C52  6E0B               	movwf	??i2_digitalWrite& (0+255),c
 17157  003C54  0E01               	movlw	1
 17158  003C56  6E0C               	movwf	(??i2_digitalWrite+1)& (0+255),c
 17159  003C58  0E00               	movlw	0
 17160  003C5A  6E0D               	movwf	(??i2_digitalWrite+2)& (0+255),c
 17161  003C5C  2A0B               	incf	??i2_digitalWrite,f,c
 17162  003C5E  D003               	goto	i2u564_44
 17163  003C60                     i2u564_45:
 17164  003C60  90D8               	bcf	status,0,c
 17165  003C62  360C               	rlcf	??i2_digitalWrite+1,f,c
 17166  003C64  360D               	rlcf	??i2_digitalWrite+2,f,c
 17167  003C66                     i2u564_44:
 17168  003C66  2E0B               	decfsz	??i2_digitalWrite,f,c
 17169  003C68  D7FB               	goto	i2u564_45
 17170  003C6A  C00C  F00E         	movff	??i2_digitalWrite+1,i2digitalWrite@p
 17171  003C6E  C00D  F00F         	movff	??i2_digitalWrite+2,i2digitalWrite@p+1
 17172                           
 17173                           ;iopin.c: 56: if(val == 0){
 17174  003C72  5009               	movf	i2digitalWrite@val,w,c
 17175  003C74  100A               	iorwf	i2digitalWrite@val+1,w,c
 17176  003C76  A4D8               	btfss	status,2,c
 17177  003C78  D02B               	goto	i2l5508
 17178                           
 17179                           ;iopin.c: 57: p ^= 0xff;
 17180  003C7A  0EFF               	movlw	255
 17181  003C7C  1A0E               	xorwf	i2digitalWrite@p,f,c
 17182                           
 17183                           ;iopin.c: 58: }
 17184                           ;iopin.c: 60: switch(pin[0]){
 17185  003C7E  D028               	goto	i2l5508
 17186  003C80                     i2l5484:
 17187  003C80  0409               	decf	i2digitalWrite@val,w,c
 17188  003C82  100A               	iorwf	i2digitalWrite@val+1,w,c
 17189  003C84  A4D8               	btfss	status,2,c
 17190  003C86  D003               	goto	i2l5488
 17191  003C88  500E               	movf	i2digitalWrite@p,w,c
 17192  003C8A  1289               	iorwf	3977,f,c	;volatile
 17193  003C8C  0012               	return	
 17194  003C8E                     i2l5488:
 17195                           
 17196                           ;iopin.c: 62: else LATA &= p;
 17197  003C8E  500E               	movf	i2digitalWrite@p,w,c
 17198  003C90  1689               	andwf	3977,f,c	;volatile
 17199                           
 17200                           ;iopin.c: 63: break;
 17201  003C92  0012               	return	
 17202  003C94                     i2l5490:
 17203  003C94  0409               	decf	i2digitalWrite@val,w,c
 17204  003C96  100A               	iorwf	i2digitalWrite@val+1,w,c
 17205  003C98  A4D8               	btfss	status,2,c
 17206  003C9A  D003               	goto	i2l5494
 17207  003C9C  500E               	movf	i2digitalWrite@p,w,c
 17208  003C9E  128A               	iorwf	3978,f,c	;volatile
 17209  003CA0  0012               	return	
 17210  003CA2                     i2l5494:
 17211                           
 17212                           ;iopin.c: 65: else LATB &= p;
 17213  003CA2  500E               	movf	i2digitalWrite@p,w,c
 17214  003CA4  168A               	andwf	3978,f,c	;volatile
 17215                           
 17216                           ;iopin.c: 66: break;
 17217  003CA6  0012               	return	
 17218  003CA8                     i2l5496:
 17219  003CA8  0409               	decf	i2digitalWrite@val,w,c
 17220  003CAA  100A               	iorwf	i2digitalWrite@val+1,w,c
 17221  003CAC  A4D8               	btfss	status,2,c
 17222  003CAE  D003               	goto	i2l5500
 17223  003CB0  500E               	movf	i2digitalWrite@p,w,c
 17224  003CB2  128B               	iorwf	3979,f,c	;volatile
 17225  003CB4  0012               	return	
 17226  003CB6                     i2l5500:
 17227                           
 17228                           ;iopin.c: 68: else LATC &= p;
 17229  003CB6  500E               	movf	i2digitalWrite@p,w,c
 17230  003CB8  168B               	andwf	3979,f,c	;volatile
 17231                           
 17232                           ;iopin.c: 69: break;
 17233  003CBA  0012               	return	
 17234  003CBC                     i2l5502:
 17235  003CBC  0409               	decf	i2digitalWrite@val,w,c
 17236  003CBE  100A               	iorwf	i2digitalWrite@val+1,w,c
 17237  003CC0  A4D8               	btfss	status,2,c
 17238  003CC2  D003               	goto	i2l5506
 17239  003CC4  500E               	movf	i2digitalWrite@p,w,c
 17240  003CC6  128C               	iorwf	3980,f,c	;volatile
 17241  003CC8  0012               	return	
 17242  003CCA                     i2l5506:
 17243                           
 17244                           ;iopin.c: 71: else LATD &= p;
 17245  003CCA  500E               	movf	i2digitalWrite@p,w,c
 17246  003CCC  168C               	andwf	3980,f,c	;volatile
 17247                           
 17248                           ;iopin.c: 72: }
 17249  003CCE  0012               	return	
 17250  003CD0                     i2l5508:
 17251  003CD0  C007  FFD9         	movff	i2digitalWrite@pin,fsr2l
 17252  003CD4  C008  FFDA         	movff	i2digitalWrite@pin+1,fsr2h
 17253  003CD8  CFDE F00B          	movff	postinc2,??i2_digitalWrite
 17254  003CDC  CFDD F00C          	movff	postdec2,??i2_digitalWrite+1
 17255                           
 17256                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17257                           ; Switch size 1, requested type "space"
 17258                           ; Number of cases is 1, Range of values is 0 to 0
 17259                           ; switch strategies available:
 17260                           ; Name         Instructions Cycles
 17261                           ; simple_byte            4     3 (average)
 17262                           ;	Chosen strategy is simple_byte
 17263  003CE0  500C               	movf	??i2_digitalWrite+1,w,c
 17264  003CE2  0A00               	xorlw	0	; case 0
 17265  003CE4  A4D8               	btfss	status,2,c
 17266  003CE6  0012               	return	
 17267                           
 17268                           ; Switch size 1, requested type "space"
 17269                           ; Number of cases is 4, Range of values is 0 to 3
 17270                           ; switch strategies available:
 17271                           ; Name         Instructions Cycles
 17272                           ; simple_byte           13     7 (average)
 17273                           ;	Chosen strategy is simple_byte
 17274  003CE8  500B               	movf	??i2_digitalWrite,w,c
 17275  003CEA  0A00               	xorlw	0	; case 0
 17276  003CEC  B4D8               	btfsc	status,2,c
 17277  003CEE  D7C8               	goto	i2l5484
 17278  003CF0  0A01               	xorlw	1	; case 1
 17279  003CF2  B4D8               	btfsc	status,2,c
 17280  003CF4  D7CF               	goto	i2l5490
 17281  003CF6  0A03               	xorlw	3	; case 2
 17282  003CF8  B4D8               	btfsc	status,2,c
 17283  003CFA  D7D6               	goto	i2l5496
 17284  003CFC  0A01               	xorlw	1	; case 3
 17285  003CFE  A4D8               	btfss	status,2,c
 17286  003D00  0012               	return	
 17287  003D02  D7DC               	goto	i2l5502
 17288  003D04                     __end_ofi2_digitalWrite:
 17289                           	opt stack 0
 17290                           pclatu	equ	0xFFB
 17291                           pclath	equ	0xFFA
 17292                           tblptru	equ	0xFF8
 17293                           tblptrh	equ	0xFF7
 17294                           tblptrl	equ	0xFF6
 17295                           tablat	equ	0xFF5
 17296                           prodh	equ	0xFF4
 17297                           prodl	equ	0xFF3
 17298                           intcon	equ	0xFF2
 17299                           intcon3	equ	0xFF0
 17300                           postinc0	equ	0xFEE
 17301                           fsr0h	equ	0xFEA
 17302                           fsr0l	equ	0xFE9
 17303                           wreg	equ	0xFE8
 17304                           postdec1	equ	0xFE5
 17305                           fsr1h	equ	0xFE2
 17306                           fsr1l	equ	0xFE1
 17307                           indf2	equ	0xFDF
 17308                           postinc2	equ	0xFDE
 17309                           postdec2	equ	0xFDD
 17310                           fsr2h	equ	0xFDA
 17311                           fsr2l	equ	0xFD9
 17312                           status	equ	0xFD8
 17313                           
 17314 ;; *************** function i2___awmod *****************
 17315 ;; Defined at:
 17316 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 17317 ;; Parameters:    Size  Location     Type
 17318 ;;  dividend        2    0[COMRAM] int 
 17319 ;;  divisor         2    2[COMRAM] int 
 17320 ;; Auto vars:     Size  Location     Type
 17321 ;;  __awmod         1    5[COMRAM] unsigned char 
 17322 ;;  __awmod         1    4[COMRAM] unsigned char 
 17323 ;; Return value:  Size  Location     Type
 17324 ;;                  2    0[COMRAM] int 
 17325 ;; Registers used:
 17326 ;;		wreg, status,2, status,0
 17327 ;; Tracked objects:
 17328 ;;		On entry : 0/0
 17329 ;;		On exit  : 0/0
 17330 ;;		Unchanged: 0/0
 17331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17332 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17333 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17335 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17336 ;;Total ram usage:        6 bytes
 17337 ;; Hardware stack levels used:    1
 17338 ;; This function calls:
 17339 ;;		Nothing
 17340 ;; This function is called by:
 17341 ;;		_servoInterruptService
 17342 ;;		i2_fround
 17343 ;;		i2_scale
 17344 ;; This function uses a non-reentrant model
 17345 ;;
 17346                           
 17347                           	psect	text71
 17348  004650                     __ptext71:
 17349                           	opt stack 0
 17350  004650                     i2___awmod:
 17351                           	opt stack 20
 17352                           
 17353                           ;incstack = 0
 17354  004650  0E00               	movlw	0
 17355  004652  6E06               	movwf	i2___awmod@sign,c
 17356  004654  AE02               	btfss	i2___awmod@dividend+1,7,c
 17357  004656  D006               	goto	i2l5084
 17358  004658  6C01               	negf	i2___awmod@dividend,c
 17359  00465A  1E02               	comf	i2___awmod@dividend+1,f,c
 17360  00465C  B0D8               	btfsc	status,0,c
 17361  00465E  2A02               	incf	i2___awmod@dividend+1,f,c
 17362  004660  0E01               	movlw	1
 17363  004662  6E06               	movwf	i2___awmod@sign,c
 17364  004664                     i2l5084:
 17365  004664  AE04               	btfss	i2___awmod@divisor+1,7,c
 17366  004666  D004               	goto	i2l5088
 17367  004668  6C03               	negf	i2___awmod@divisor,c
 17368  00466A  1E04               	comf	i2___awmod@divisor+1,f,c
 17369  00466C  B0D8               	btfsc	status,0,c
 17370  00466E  2A04               	incf	i2___awmod@divisor+1,f,c
 17371  004670                     i2l5088:
 17372  004670  5003               	movf	i2___awmod@divisor,w,c
 17373  004672  1004               	iorwf	i2___awmod@divisor+1,w,c
 17374  004674  B4D8               	btfsc	status,2,c
 17375  004676  D018               	goto	i2l5104
 17376  004678  0E01               	movlw	1
 17377  00467A  6E05               	movwf	i2___awmod@counter,c
 17378  00467C  D004               	goto	i2l5094
 17379  00467E                     i2l5092:
 17380  00467E  90D8               	bcf	status,0,c
 17381  004680  3603               	rlcf	i2___awmod@divisor,f,c
 17382  004682  3604               	rlcf	i2___awmod@divisor+1,f,c
 17383  004684  2A05               	incf	i2___awmod@counter,f,c
 17384  004686                     i2l5094:
 17385  004686  AE04               	btfss	i2___awmod@divisor+1,7,c
 17386  004688  D7FA               	goto	i2l5092
 17387  00468A                     i2l5096:
 17388  00468A  5003               	movf	i2___awmod@divisor,w,c
 17389  00468C  5C01               	subwf	i2___awmod@dividend,w,c
 17390  00468E  5004               	movf	i2___awmod@divisor+1,w,c
 17391  004690  5802               	subwfb	i2___awmod@dividend+1,w,c
 17392  004692  A0D8               	btfss	status,0,c
 17393  004694  D004               	goto	i2l5100
 17394  004696  5003               	movf	i2___awmod@divisor,w,c
 17395  004698  5E01               	subwf	i2___awmod@dividend,f,c
 17396  00469A  5004               	movf	i2___awmod@divisor+1,w,c
 17397  00469C  5A02               	subwfb	i2___awmod@dividend+1,f,c
 17398  00469E                     i2l5100:
 17399  00469E  90D8               	bcf	status,0,c
 17400  0046A0  3204               	rrcf	i2___awmod@divisor+1,f,c
 17401  0046A2  3203               	rrcf	i2___awmod@divisor,f,c
 17402  0046A4  2E05               	decfsz	i2___awmod@counter,f,c
 17403  0046A6  D7F1               	goto	i2l5096
 17404  0046A8                     i2l5104:
 17405  0046A8  5006               	movf	i2___awmod@sign,w,c
 17406  0046AA  B4D8               	btfsc	status,2,c
 17407  0046AC  D004               	goto	i2l5108
 17408  0046AE  6C01               	negf	i2___awmod@dividend,c
 17409  0046B0  1E02               	comf	i2___awmod@dividend+1,f,c
 17410  0046B2  B0D8               	btfsc	status,0,c
 17411  0046B4  2A02               	incf	i2___awmod@dividend+1,f,c
 17412  0046B6                     i2l5108:
 17413  0046B6  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 17414  0046BA  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 17415  0046BE  0012               	return	
 17416  0046C0                     __end_ofi2___awmod:
 17417                           	opt stack 0
 17418                           pclatu	equ	0xFFB
 17419                           pclath	equ	0xFFA
 17420                           tblptru	equ	0xFF8
 17421                           tblptrh	equ	0xFF7
 17422                           tblptrl	equ	0xFF6
 17423                           tablat	equ	0xFF5
 17424                           prodh	equ	0xFF4
 17425                           prodl	equ	0xFF3
 17426                           intcon	equ	0xFF2
 17427                           intcon3	equ	0xFF0
 17428                           postinc0	equ	0xFEE
 17429                           fsr0h	equ	0xFEA
 17430                           fsr0l	equ	0xFE9
 17431                           wreg	equ	0xFE8
 17432                           postdec1	equ	0xFE5
 17433                           fsr1h	equ	0xFE2
 17434                           fsr1l	equ	0xFE1
 17435                           indf2	equ	0xFDF
 17436                           postinc2	equ	0xFDE
 17437                           postdec2	equ	0xFDD
 17438                           fsr2h	equ	0xFDA
 17439                           fsr2l	equ	0xFD9
 17440                           status	equ	0xFD8
 17441                           pclatu	equ	0xFFB
 17442                           pclath	equ	0xFFA
 17443                           tblptru	equ	0xFF8
 17444                           tblptrh	equ	0xFF7
 17445                           tblptrl	equ	0xFF6
 17446                           tablat	equ	0xFF5
 17447                           prodh	equ	0xFF4
 17448                           prodl	equ	0xFF3
 17449                           intcon	equ	0xFF2
 17450                           intcon3	equ	0xFF0
 17451                           postinc0	equ	0xFEE
 17452                           fsr0h	equ	0xFEA
 17453                           fsr0l	equ	0xFE9
 17454                           wreg	equ	0xFE8
 17455                           postdec1	equ	0xFE5
 17456                           fsr1h	equ	0xFE2
 17457                           fsr1l	equ	0xFE1
 17458                           indf2	equ	0xFDF
 17459                           postinc2	equ	0xFDE
 17460                           postdec2	equ	0xFDD
 17461                           fsr2h	equ	0xFDA
 17462                           fsr2l	equ	0xFD9
 17463                           status	equ	0xFD8
 17464                           
 17465                           	psect	rparam
 17466  0000                     pclatu	equ	0xFFB
 17467                           pclath	equ	0xFFA
 17468                           tblptru	equ	0xFF8
 17469                           tblptrh	equ	0xFF7
 17470                           tblptrl	equ	0xFF6
 17471                           tablat	equ	0xFF5
 17472                           prodh	equ	0xFF4
 17473                           prodl	equ	0xFF3
 17474                           intcon	equ	0xFF2
 17475                           intcon3	equ	0xFF0
 17476                           postinc0	equ	0xFEE
 17477                           fsr0h	equ	0xFEA
 17478                           fsr0l	equ	0xFE9
 17479                           wreg	equ	0xFE8
 17480                           postdec1	equ	0xFE5
 17481                           fsr1h	equ	0xFE2
 17482                           fsr1l	equ	0xFE1
 17483                           indf2	equ	0xFDF
 17484                           postinc2	equ	0xFDE
 17485                           postdec2	equ	0xFDD
 17486                           fsr2h	equ	0xFDA
 17487                           fsr2l	equ	0xFD9
 17488                           status	equ	0xFD8
 17489                           
 17490                           	psect	temp
 17491  00007E                     btemp:
 17492                           	opt stack 0
 17493  00007E                     	ds	1
 17494  0000                     int$flags	set	btemp
 17495                           pclatu	equ	0xFFB
 17496                           pclath	equ	0xFFA
 17497                           tblptru	equ	0xFF8
 17498                           tblptrh	equ	0xFF7
 17499                           tblptrl	equ	0xFF6
 17500                           tablat	equ	0xFF5
 17501                           prodh	equ	0xFF4
 17502                           prodl	equ	0xFF3
 17503                           intcon	equ	0xFF2
 17504                           intcon3	equ	0xFF0
 17505                           postinc0	equ	0xFEE
 17506                           fsr0h	equ	0xFEA
 17507                           fsr0l	equ	0xFE9
 17508                           wreg	equ	0xFE8
 17509                           postdec1	equ	0xFE5
 17510                           fsr1h	equ	0xFE2
 17511                           fsr1l	equ	0xFE1
 17512                           indf2	equ	0xFDF
 17513                           postinc2	equ	0xFDE
 17514                           postdec2	equ	0xFDD
 17515                           fsr2h	equ	0xFDA
 17516                           fsr2l	equ	0xFD9
 17517                           status	equ	0xFD8


Data Sizes:
    Strings     398
    Constant    174
    Data        50
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    114     125
    BANK0           128    106     114
    BANK1           256     50     121
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_23(CODE[17]), STR_22(CODE[18]), STR_21(CODE[17]), STR_20(CODE[18]), 
		 -> STR_19(CODE[17]), STR_18(CODE[19]), STR_17(CODE[17]), STR_16(CODE[18]), 
		 -> STR_15(CODE[17]), STR_14(CODE[18]), STR_13(CODE[17]), STR_12(CODE[18]), 
		 -> STR_11(CODE[9]), STR_10(CODE[8]), STR_9(CODE[10]), STR_8(CODE[25]), 
		 -> STR_7(CODE[15]), STR_6(CODE[17]), STR_5(CODE[20]), STR_4(CODE[24]), 
		 -> STR_3(CODE[14]), STR_2(CODE[20]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 6
		 -> redirectingServo(BANK1[6]), padServo(BANK1[6]), conveyorServo(BANK1[6]), 

    initServo@motor	PTR int  size(2) Largest target is 6
		 -> redirectingServo(BANK1[6]), padServo(BANK1[6]), conveyorServo(BANK1[6]), 

    servos	PTR int [4] size(2) Largest target is 6
		 -> redirectingServo(BANK1[6]), padServo(BANK1[6]), conveyorServo(BANK1[6]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 6
		 -> AA_float(BANK1[4]), redirectingServo(BANK1[6]), padServo(BANK1[6]), conveyorServo(BANK1[6]), 
		 -> cylinderMotor(BANK1[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 4
		 -> padPin2(BANK1[4]), padPin1(BANK1[4]), 

    pause@message	PTR unsigned char  size(2) Largest target is 25
		 -> STR_8(CODE[25]), STR_7(CODE[15]), STR_6(CODE[17]), STR_5(CODE[20]), 
		 -> STR_3(CODE[14]), STR_2(CODE[20]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _service in COMRAM

    _service->i2_printf
    i2_setAngle->i2_angleToPulse
    i2_angleToPulse->i2___fttol
    i2___ftdiv->i2___awtoft
    i2___awtoft->i2___ftpack
    i2___altoft->i2___ftpack
    i2_printf->i2___fttol
    i2_scale->i2___ftmul
    i2_lcdNewline->i2_lcdInst
    i2_fround->i2___ftmul
    i2___wmul->i2___awdiv
    i2___ftmul->i2___ftdiv
    i2___awdiv->i2___awmod
    i2___lltoft->i2___ftpack
    i2___llmod->i2___lldiv
    i2___fttol->i2___ftadd
    i2___ftsub->i2___ftadd
    i2___ftadd->i2_fround
    i2_lcdClear->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    _servoInterruptService->i2_digitalWrite
    i2_startTimer->i2___awmod
    i2_digitalWrite->i2___awmod

Critical Paths under _main in BANK0

    _main->_printf
    _sortBattery->_printf
    _pause->_printf
    _printf->___fttol
    _scale->___ftmul
    _lcdNewline->_lcdInst
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___ftadd
    _lcdClear->_lcdInst
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftdiv->___altoft
    ___ftadd->_fround
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery
    _sortBattery->_pause
    _pause->_printf
    _initServo->_setAngle
    _setAngle->_angleToPulse

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  201078
                       _digitalWrite
                            _initLCD
                          _initServo
                           _pinSetup
                             _printf
                        _sortBattery
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         18    18      0  130972
                                             32 BANK1     18    18      0
                           ___altoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                         _analogRead
                        _digitalRead
                       _digitalWrite
                           _lcdClear
                              _pause
                             _printf
                         _readKeypad
                           _setAngle
 ---------------------------------------------------------------------------------
 (2) _pause                                                2     0      2   49742
                                             30 BANK1      2     0      2
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      23
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _printf                                              45    38      7   49091
                                             99 BANK0      7     0      7
                                              0 BANK1     30    30      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   11010
                                             62 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     292
                                             18 BANK0      1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   10812
                                             62 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2513
                                             28 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1676
                                             14 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1580
                                             20 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     431
                                             14 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     591
                                             14 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2281
                                             22 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     671
                                             27 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     802
                                             14 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3899
                                             84 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     109
                                             14 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1032
                                             14 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (3) _lcdClear                                             0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     5      4    1146
                                             14 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          4     2      2     238
                                             14 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     150
                                             14 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initServo                                            8     4      4   19734
                                             27 BANK1      8     4      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (2) _startTimer                                           8     2      6     486
                                             14 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   18543
                                            103 BANK0      2     2      0
                                             19 BANK1      8     4      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   17152
                                             99 BANK0      4     0      4
                                              0 BANK1     19    19      0
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     508
                                             84 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4752
                                             47 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3042
                                             32 BANK0     15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3602
                                             72 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2303
                                             22 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2670
                                             22 BANK0     10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2148
                                             14 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _initTimer                                            4     2      2     150
                                             14 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             18 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     135
                                             16 BANK0      2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             14 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             15    15      0   31238
                                            113 COMRAM     1     1      0
                                              0 BANK0     14    14      0
              _servoInterruptService
                         i2_lcdClear
                           i2_printf
                         i2_setAngle
 ---------------------------------------------------------------------------------
 (9) i2_setAngle                                          10     6      4    7042
                                            102 COMRAM    10     6      4
                     i2_angleToPulse
 ---------------------------------------------------------------------------------
 (10) i2_angleToPulse                                     23    19      4    6832
                                             79 COMRAM    23    19      4
                         i2___altoft
                         i2___awtoft
                          i2___ftadd
                          i2___ftdiv
                          i2___ftmul
                          i2___fttol
 ---------------------------------------------------------------------------------
 (11) i2___ftdiv                                          15     9      6    1031
                                             12 COMRAM    15     9      6
                         i2___awtoft (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___awtoft                                          4     1      3     816
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___altoft                                         10     6      4     915
                                              8 COMRAM    10     6      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            42    38      4   22432
                                             79 COMRAM    34    30      4
                          i2___awdiv
                          i2___ftadd
                           i2___ftge
                          i2___ftmul
                          i2___ftneg
                          i2___ftsub
                          i2___fttol
                          i2___lldiv
                          i2___llmod
                         i2___lltoft
                           i2___wmul
                       i2__div_to_l_
                      i2__tdiv_to_l_
                           i2_fround
                            i2_putch
                            i2_scale
 ---------------------------------------------------------------------------------
 (10) i2_scale                                            13    10      3    5023
                                             42 COMRAM     7     4      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     292
                                              4 COMRAM     1     1      0
                       i2_lcdNewline
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNewline                                        0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (10) i2_fround                                           16    13      3    4825
                                             42 COMRAM    10     7      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     989
                                             14 COMRAM     6     2      4
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftmul                                          15     9      6    1805
                                             27 COMRAM    15     9      6
                         i2___altoft (ARG)
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
                         i2___awtoft (ARG)
                          i2___ftdiv (ARG)
                         i2___ftpack
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___awdiv                                           8     4      4     820
                                              6 COMRAM     8     4      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2__tdiv_to_l_                                      15     9      6     355
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (10) i2__div_to_l_                                       12     6      6     481
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (10) i2___lltoft                                          9     5      4     794
                                              8 COMRAM     9     5      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (10) i2___llmod                                           9     1      8     367
                                             13 COMRAM     9     1      8
                          i2___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___lldiv                                          13     5      8     370
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (11) i2___fttol                                          15    11      4     356
                                             64 COMRAM    15    11      4
                         i2___altoft (ARG)
                          i2___ftadd (ARG)
                          i2___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___ftsub                                           6     0      6    1866
                                             64 COMRAM     6     0      6
                          i2___ftadd
                         i2___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftadd                                          12     6      6    1747
                                             52 COMRAM    12     6      6
                         i2___altoft (ARG)
                         i2___awtoft (ARG)
                          i2___ftdiv (ARG)
                          i2___ftmul (ARG)
                         i2___ftpack
                           i2_fround (ARG)
 ---------------------------------------------------------------------------------
 (12) i2___ftpack                                          8     3      5     699
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (10) i2___ftneg                                           3     0      3      71
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (10) i2___ftge                                            9     3      6     292
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (9) i2_lcdClear                                           0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (12) i2_lcdInst                                           2     2      0     135
                                              2 COMRAM     2     2      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                                4     4      0    1584
                                             15 COMRAM     4     4      0
                          i2___awmod
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (10) i2_startTimer                                        8     2      6     206
                                              6 COMRAM     8     2      6
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     5      4     458
                                              6 COMRAM     9     5      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___awmod                                           6     2      4     920
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _pinSetup
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _lcdClear
       _lcdInst
         _lcdNibble
     _pause
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _putch
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)

 _service (ROOT)
   _servoInterruptService
     i2___awmod
     i2_digitalWrite
       i2___awmod (ARG)
     i2_startTimer
       i2___awmod (ARG)
   i2_lcdClear
     i2_lcdInst
       i2_lcdNibble
   i2_printf
     i2___awdiv
       i2___awmod (ARG)
     i2___ftadd
       i2___altoft (ARG)
         i2___ftpack
       i2___awtoft (ARG)
         i2___ftpack
       i2___ftdiv (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
       i2___ftmul (ARG)
         i2___altoft (ARG)
           i2___ftpack
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___ftpack (ARG)
       i2_fround (ARG)
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           i2___altoft (ARG)
             i2___ftpack
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
     i2___ftge
     i2___ftmul
       i2___altoft (ARG)
         i2___ftpack
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
       i2___awtoft (ARG)
         i2___ftpack
       i2___ftdiv (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
       i2___ftpack (ARG)
       i2___wmul (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     i2___ftneg
     i2___ftsub
       i2___ftadd
         i2___altoft (ARG)
           i2___ftpack
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftmul (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftpack (ARG)
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             i2___altoft (ARG)
               i2___ftpack
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftdiv (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___lltoft (ARG)
         i2___ftpack
     i2___fttol
       i2___altoft (ARG)
         i2___ftpack
       i2___ftadd (ARG)
         i2___altoft (ARG)
           i2___ftpack
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftmul (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftpack (ARG)
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             i2___altoft (ARG)
               i2___ftpack
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftdiv (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___ftmul (ARG)
         i2___altoft (ARG)
           i2___ftpack
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
     i2___lldiv
     i2___llmod
       i2___lldiv (ARG)
     i2___lltoft
       i2___ftpack
     i2___wmul
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
     i2__div_to_l_
     i2__tdiv_to_l_
     i2_fround
       i2___awdiv
         i2___awmod (ARG)
       i2___awmod
       i2___ftmul
         i2___altoft (ARG)
           i2___ftpack
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     i2_putch
       i2_lcdNewline
         i2_lcdInst
           i2_lcdNibble
       i2_lcdNibble
     i2_scale
       i2___awdiv
         i2___awmod (ARG)
       i2___awmod
       i2___ftmul
         i2___altoft (ARG)
           i2___ftpack
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
   i2_setAngle
     i2_angleToPulse
       i2___altoft
         i2___ftpack
       i2___awtoft
         i2___ftpack
       i2___ftadd
         i2___altoft (ARG)
           i2___ftpack
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftmul (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftpack (ARG)
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             i2___altoft (ARG)
               i2___ftpack
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftdiv (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___ftdiv
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
       i2___ftmul
         i2___altoft (ARG)
           i2___ftpack
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___fttol
         i2___altoft (ARG)
           i2___ftpack
         i2___ftadd (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             i2___altoft (ARG)
               i2___ftpack
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftdiv (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___ftpack (ARG)
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               i2___altoft (ARG)
                 i2___ftpack
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftdiv (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul (ARG)
           i2___altoft (ARG)
             i2___ftpack
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftdiv (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     32      79       7       47.3%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     6A      72       5       89.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     72      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     168      34        0.0%
DATA                 0      0     168       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Mar 24 17:00:53 2017

                  ___altoft@exp 009E                               _n 0177                   ___altoft@sign 009F  
                   _sortBattery 19FA                    ___awdiv@sign 0099                      i2___altoft 4566  
           ___wmul@multiplicand 009E                     __CFG_BORV$3 000000                      i2___awtoft 4A68  
                    i2___ftpack 3F2C                    __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000  
                  __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000                     __CFG_OSC$HS 000000  
              _redirectingServo 014A                    ___ftadd@exp1 00D3                    ___ftadd@exp2 00D2  
                    i2___lltoft 478C                    ___ftadd@sign 00D1                             l132 1CB6  
                           l116 41B2                             l206 4B34                             l304 49B6  
                           l209 4B42                             l170 4B9C                             l279 32B0  
                           l385 47EA                             l378 4914                             l387 47F6  
                           l388 4802                             l659 06C4                             l687 0544  
                           l960 34B8                             l928 29B0                             l983 20AA  
                           l987 20E4                             l989 210C                             l998 21E2  
                  __CFG_CPB$OFF 000000                             _PEN 007E2A                    __CFG_CPD$OFF 000000  
                           _SEN 007E28                    ___awmod@sign 0093                             wreg 000FE8  
                    i2_lcdClear 4C6C                    __CFG_LVP$OFF 000000                    ___ftdiv@cntr 00A9  
                  ___ftdiv@sign 00AE                    __CFG_WDT$OFF 000000                            l1102 3E6C  
                          l1007 220C                            l1112 423C                            l1032 2828  
                          l1025 2764                            l1018 2D9C                            l1026 27A8  
                          l1057 4AF8                            l4100 349C                            l4102 34AA  
                          l4114 34DE                            l4202 2B62                            l4108 34C2  
                          l4140 20F2                            l4300 4006                            l4134 20B8  
                          l4222 2BEA                            l4232 2C28                            l4208 2B9C  
                          l4320 4072                            l4312 4050                            l4304 401A  
                          l4400 151E                            l4090 340E                            l4162 2172  
                          l4146 2102                            l4226 2C08                            l4306 4026  
                          l4092 341C                            l4164 2180                            l4156 2144  
                          l4236 2C46                            l4500 292E                            l4252 3D20  
                          l4308 402C                            l4316 405E                            l4094 344C  
                          l4086 33FA                            l4182 2236                            l4174 21C8  
                          l4166 218E                            l4422 2710                            l4406 15E4  
                          l4192 2284                            l4176 21D6                            l4168 219A  
                          l4512 2966                            l4416 26D6                            l4264 3D54  
                          l4280 3DA4                            l4360 1F16                            l4098 346C  
                          l5402 3202                            l4522 2996                            l4266 3D60  
                          l4258 3D36                            l4604 4980                            l5412 327A  
                          l4612 3BB4                            l4524 29A6                            l4516 297A  
                          l4452 27DE                            l4284 3DB8                            l4276 3D96  
                          l4268 3D66                            l5430 48D2                            l4534 40A8  
                          l5406 323E                            l5342 364E                            l4622 3C38  
                          l4710 422A                            l4702 41D0                            l4462 280E  
                          l4382 12CE                            l5440 48E4                            l4536 40B8  
                          l5360 36A2                            l5352 367E                            l4616 3BF4  
                          l4704 41E0                            l4472 2860                            l4464 281E  
                          l4456 27F2                            l4296 3FF6                            l4368 1FFA  
                          l4392 13BA                            l4554 2CFA                            l5354 3686  
                          l5346 3662                            l4706 41E6                            l5436 48DC  
                          l4548 2CC0                            l4636 2E0C                            l5460 480E  
                          l5364 36B6                            l5348 366A                            l4716 447A  
                          l4492 28DA                            l4388 1394                            l5446 48EC  
                          l4574 2D5A                            l4654 2E9E                            l5358 369A  
                          l5366 36BE                            l4718 448A                            l4478 2886  
                          l6510 0038                            l4672 2F04                            l4664 2ECE  
                          l4592 485A                            l6600 03FA                            l6520 0068  
                          l6512 0044                            l4666 2EDE                            l4658 2EB2  
                          l5394 318A                            l4682 3DF0                            l6514 004A  
                          l6506 0022                            l4668 2EE8                            l4684 3E00  
                          l6612 0440                            l6540 010C                            l6516 0050  
                          l6524 0074                            l5398 31C6                            l4694 3E5A  
                          l4686 3E06                            l6710 081A                            l6702 07D2  
                          l6630 0526                            l6622 04F6                            l6526 00B2  
                          l6712 089E                            l6720 0926                            l6704 07E4  
                          l6640 056C                            l6624 0504                            l6616 0468  
                          l6722 092E                            l6650 069A                            l6634 0548  
                          l6570 0272                            l6802 1C5E                            l6740 3B0C  
                          l6708 080A                            l6652 06A8                            l6644 05BE  
                          l6628 0512                            l6580 0302                            l6572 02A2  
                          l6564 022E                            l6556 01BE                            l6724 0944  
                          l6812 1CC0                            l6718 0914                            l6574 02B8  
                          l6806 1C8A                            l6814 1CE8                            l6736 3AB6  
                          l6744 3B34                            l6672 073A                            l6656 06B6  
                          l6584 0330                            l6568 025C                            l6840 4196  
                          l6674 0740                            l6594 038E                            l6668 0710  
                          l6686 0786                            l6598 03F4                            l6790 1B88  
                          l6838 4186                            l6688 078C                            _EEIF 007D0C  
         __size_ofi2__div_to_l_ 0128                            STR_1 FFF7                            STR_2 FEB6  
                          STR_3 FFCE                            STR_4 FE8A                            STR_5 FEA2  
                          STR_6 FFAE                            STR_7 FFBF                            STR_8 FE71  
                          STR_9 FFDC                            _LATA 000F89                            _LATB 000F8A  
                          _LATC 000F8B                            _LATD 000F8C                            _LATE 000F8D  
                          u4041 26B2                            u4221 2C9C                            u4061 26EC  
                          u4241 2CD6                            u4331 2DE8                    printf@tmpval 0112  
                          u4350 2E32                            u3801 2B78                            u3571 2058  
                          u4355 2E28                            _PEIE 007F96                            u3581 2076  
                          u5604 3262                            _RCEN 007E2B                            u3781 2B3E  
                          u5605 325C                            u5574 31AE                            u5494 362C  
                          u5575 31A8                            u5495 3624                            u5584 31EA  
                          u5585 31E4                            u5594 3226                            u7507 450E  
                          u5595 3220                            u6820 0152                            u7517 451C  
                          u7527 454C                            u7447 1BAA                            u7537 455A  
                          u7457 4BA0                            u6825 0146                            u7467 4922  
                          u7477 4958                            u7487 4B66                            u7497 4B7C  
                          u6980 053C                            _RSEN 007E29                            _main 411A  
                          _curr 0075                    ___ftpack@arg 008E                    i2___altoft@c 0009  
                          _keys FE59                    ___ftpack@exp 0091                            fsr0h 000FEA  
                          fsr1h 000FE2                            fsr2h 000FDA                            fsr0l 000FE9  
                          indf2 000FDF                            fsr1l 000FE1                            fsr2l 000FD9  
                          btemp 007E                    i2___ftadd@f1 0035                    i2___ftadd@f2 0038  
                  i2___ftge@ff1 0001                    i2___ftge@ff2 0004                            prodh 000FF4  
                          prodl 000FF3                            start 000E                      i2_setAngle 3E7E  
                 __CFG_IESO$OFF 000000                    i2___ftdiv@f1 000D                    i2___ftdiv@f2 0010  
                  i2___ftdiv@f3 0017                 __end_ofi2_scale 19FA                    i2___ftneg@f1 0001  
               __end_ofi2_putch 4C1C                    i2___awtoft@c 0009                   __CFG_MCLRE$ON 000000  
                  ___ftmul@cntr 00BC                    i2___ftmul@f1 001C                    i2___ftmul@f2 001F  
                  ___param_bank 000000                    ___ftmul@sign 00BD                    i2___ftsub@f1 0041  
                  i2___ftsub@f2 0044                    i2___fttol@f1 0041                     i2_lcdNibble 4726  
                  ___fttol@exp1 00E2                    i2___lltoft@c 0009                    ___fttol@lval 00DE  
          __end_ofi2_startTimer 48D0            __end_of_angleToPulse 2B28                           ?_main 0001  
                         _ACKEN 007E2C                           _ACKDT 007E2D                 __end_of___awdiv 3DC2  
                         _EEADR 000FA9                 __end_of___ftadd 22AA                           STR_10 FFEF  
                         STR_11 FFE6                           STR_20 FF13                           STR_12 FEEF  
                         STR_13 FF9D                           STR_21 FF48                           STR_22 FF25  
                         STR_14 FEDD                           STR_23 FF8C                           STR_15 FF6A  
                         STR_24 FF37                           STR_16 FF01                           STR_17 FF59  
                         STR_18 FECA                           STR_19 FF7B                 __end_of___awmod 407C  
               __end_of___ftdiv 2DD2         ??_servoInterruptService 0010                 __end_of___ftneg 4B06  
               __end_of___lldiv 3E7E                 __end_of___ftmul 2C86                           _T0CON 000FD5  
               ___awdiv@divisor 0096                           _T1CON 000FCD                 __end_of___llmod 424E  
               __end_of___ftsub 4884                 __end_of___fttol 2F16                           _T3CON 000FB1  
                         i2l170 4C0A                           i2l146 3A64                           i2l385 4886  
                         i2l387 4892                           i2l388 489E                           i2l659 0F26  
                         i2l687 0DC6                           i2l960 3FBA                           i2l928 33CE  
               ___awdiv@counter 0098                           i2l983 2534                           i2l987 255E  
                         i2l998 260E                           _TMR0H 000FD7                           _TMR1H 000FCF  
                         _TMR0L 000FD6                           _TMR3H 000FB3                           _TMR1L 000FCE  
                         _TMR3L 000FB2                           _PORTA 000F80                           _PORTB 000F81  
                         _PORTC 000F82                           _PORTD 000F83                    i2__div_to_l_ 32B8  
                         _TRISA 000F92                           _TRISB 000F93                           _TRISC 000F94  
                         _TRISD 000F95                           _TRISE 000F96                   __CFG_PWRT$OFF 000000  
                 __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000  
                 __CFG_WRT3$OFF 000000                    ___lltoft@exp 009E                   _conveyorServo 013E  
               __end_of_lcdInst 4B88                  __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000  
                __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000  
         __size_ofi2_lcdNewline 0008                   __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000  
                 __CFG_WRTD$OFF 000000                 __end_of_initLCD 4964                  __CFG_EBTRB$OFF 000000  
                 ___awtoft@sign 0099                           _angle 007A                 __end_of_dpowers FDEB  
                    i2scale@scl 0031                           _count 0073                           _scale 115C  
                         _pause 4C3E                   ___ftpack@sign 0092                           _pulse 00EA  
                         _putch 4B88                           pclath 000FFA                           tablat 000FF5  
              __end_ofi2___ftge 42DE                 __end_of_service 3AA0                __end_ofi2___wmul 4BD6  
                         status 000FD8                __end_ofi2_fround 24F0                   i2___ftdiv@exp 001A  
            __size_ofi2___awdiv 0084              __size_ofi2___ftadd 01AC              __size_ofi2___awmod 0070  
                __CFG_PBADEN$ON 000000              __size_ofi2___ftdiv 00E6              __size_ofi2___ftneg 0024  
            __size_ofi2___lldiv 0082              __size_ofi2___ftmul 00F4              __size_ofi2___llmod 0066  
            __size_ofi2___ftsub 0040              __size_ofi2___fttol 00F4                __end_ofi2_printf 115C  
          __end_of_digitalWrite 36F6                 __initialization 45DE               i2___lldiv@divisor 0005  
            __size_ofi2_lcdInst 0022                    __end_of_main 41B4               i2___lldiv@counter 000D  
                  __end_of_keys FE6A                   i2___ftmul@exp 0025                      i2printf@ap 005E  
                   ?i2___altoft 0009                     ?i2___awtoft 0009                     ?i2___ftpack 0001  
                  i2_lcdNewline 4C64                     ?i2___lltoft 0009                          ??_main 00EA  
                 ___fttol@sign1 00DD                   __activetblptr 000002            __size_of_digitalRead 0130  
          __size_of__tdiv_to_l_ 019E                 i2digitalWrite@p 000E                     ?i2_lcdClear 0001  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
              __end_of___altoft 411A                ___llmod@dividend 009B                          ?_scale 00BE  
                        _ADRESH 000FC4                          _EEADRH 000FAA                          _ADRESL 000FC3  
                        _EEDATA 000FA8                          ?_pause 011E                          _EECON1 000FA6  
                        _EECON2 000FA7                ___awdiv@dividend 0094                 i2lcdNibble@data 0002  
              __end_of___awtoft 49A8                          ?_putch 0001                __end_of___ftpack 34EC  
               i2lcdNibble@temp 0001                __end_of___lltoft 44EE                          _INT0IE 007F94  
                        _INT0IF 007F91                          _INT1IE 007F83                          _INT1IF 007F80  
                  sortBattery@V 012F                          i2l1102 4460                          i2l1007 262A  
                        i2l1112 4714                          i2l1032 3176                          i2l1025 30E8  
                        i2l1026 3110                          i2l1018 3992                          i2l1057 4BEC  
                        i2l5100 469E                          i2l5104 46A8                          i2l5040 4380  
                        i2l5024 4588                          i2l5120 4A7C                          i2l5200 3906  
                        i2l6002 0BD0                          i2l5026 4594                          i2l5108 46B6  
                        i2l5132 2542                          i2l5052 43A6                          i2l6020 0CAC  
                        i2l5054 43AE                          i2l5046 4390                          i2l6110 0FCC  
                        i2l6022 0CB0                          i2l6006 0BF4                          i2l5206 392E  
                        i2l5160 25BE                          i2l5312 387C                          i2l5072 43E6  
                        i2l5064 43CE                          i2l5056 43B2                          i2l6016 0C48  
                        i2l5162 25C8                          i2l5154 259C                          i2l5138 256C  
                        i2l5330 38CC                          i2l5322 38A4                          i2l6130 102E  
                        i2l6050 0DA2                          i2l6034 0CE8                          i2l5226 396C  
                        i2l5092 467E                          i2l5084 4664                          i2l5500 3CB6  
                        i2l5180 2646                          i2l5172 25FC                          i2l5164 25D2  
                        i2l5324 38B0                          i2l5316 388C                          i2l5068 43D8  
                        i2l5252 3746                          i2l6132 103A                          i2l6140 111C  
                        i2l6108 0FC8                          i2l6124 1004                          i2l6052 0DB0  
                        i2l6044 0D8C                          i2l5094 4686                          i2l5502 3CBC  
                        i2l5190 2676                          i2l5174 2606                          i2l5166 25DA  
                        i2l5326 38B6                          i2l5270 3788                          i2l5246 371E  
                        i2l6134 10B2                          i2l6142 112C                          i2l6126 1014  
                        i2l6062 0DE2                          i2l6046 0D96                          i2l6038 0D04  
                        i2l5096 468A                          i2l5088 4670                          i2l5280 37B0  
                        i2l6144 1132                          i2l6072 0F06                          i2l6056 0DCA  
                        i2l5506 3CCA                          i2l5522 48AA                          i2l5602 32D6  
                        i2l5266 3778                          i2l6090 0F66                          i2l6074 0F10  
                        i2l6066 0E32                          i2l6146 1142                          i2l5508 3CD0  
                        i2l4740 3F4A                          i2l5276 37A0                          i2l4750 3FA6  
                        i2l4742 3F54                          i2l5294 3816                          i2l5630 3366  
                        i2l5622 3336                          i2l5710 3170                          i2l5702 314C  
                        i2l6094 0F8C                          i2l6078 0F1C                          i2l6190 3A38  
                        i2l6174 3A12                          i2l5720 42AE                          i2l4752 3FB0  
                        i2l4744 3F72                          i2l4736 3F3C                          i2l5608 32F4  
                        i2l6096 0F90                          i2l5490 3C94                          i2l5642 3394  
                        i2l5554 24B0                          i2l5546 23F0                          i2l6186 3A2C  
                        i2l5484 3C80                          i2l5716 427E                          i2l4748 3F88  
                        i2l5652 33BC                          i2l5708 3164                          i2l5494 3CA2  
                        i2l5726 42DA                          i2l5750 441E                          i2l5654 33C8  
                        i2l5646 33A4                          i2l5662 3082                          i2l5574 17E2  
                        i2l5496 3CA8                          i2l5488 3C8E                          i2l5760 4452  
                        i2l5752 4422                          i2l5592 19D6                          i2l5568 173E  
                        i2l5738 4A00                          i2l5770 46DE                          i2l5586 1932  
                        i2l5578 1806                          i2l5914 3E90                          i2l5922 3EF4  
                        i2l5748 4412                          i2l5772 46E2                          i2l5668 30AE  
                        i2l5932 097E                          i2l5782 4792                          i2l5942 09A4  
                        i2l5934 0988                          i2l5918 3ED6                          i2l5776 4706  
                        i2l5768 46D2                          i2l5784 479E                          i2l5936 098C  
                        i2l5928 096E                          i2l5698 313C                          i2l5962 0A36  
                        i2l5938 0990                          i2l5946 09AC                          i2l5948 09E6  
                        i2l5990 0B4E                          i2l5992 0B5E                          i2l5994 0B8C  
                        i2l5986 0B2A                          i2l5978 0AC6                          i2l5996 0B9C  
                     ??i2_scale 002E                          u531_41 3916                          u508_41 2500  
                        u540_41 37FA                          u509_41 2514                          u534_41 3706  
                        u536_41 372E                          u529_41 38EE                          u584_41 3066  
                        u586_41 3092                          _TMR0IE 007F95                          _TMR0IF 007F92  
                     ??i2_putch 0005                          _TMR1IE 007CE8                          _TMR3IE 007D01  
                        _SSPADD 000FC8                          _TRISC3 007CA3                          _TRISC4 007CA4  
                        _SSPBUF 000FC9          __size_ofi2__tdiv_to_l_ 0132                     ?i2_setAngle 0067  
             _angleToPulse$1319 010C                __end_of_lcdClear 4C64                  __CFG_XINST$OFF 000000  
                  i2_scale$1552 002E                __end_of__powers_ FE39                          ___ftge 3B74  
                        ___wmul 4AA0                       ??___awdiv 0098                       ??___ftadd 00CE  
                __CFG_STVREN$ON 000000                       ??___awmod 0092                       ??___ftdiv 00A6  
                     ??___ftneg 0091                       ??___lldiv 0096                       ??___ftmul 00B5  
                     ??___llmod 00A3                       ??___ftsub 00DA                       ??___fttol 00D8  
                        _fround 1D96                  i2___altoft@exp 0011                          clear_0 4624  
                        clear_1 4630                          clear_2 463C                ___awdiv@quotient 009A  
               ___awmod@divisor 0090                 ___awmod@counter 0092                          _servos 0160  
                     ??_lcdInst 0090                          _printf 0012                __end_of_pinSetup 4A68  
              __end_of_setAngle 3B74                  i2___awdiv@sign 000C               analogRead@channel 008E  
         ___ftmul@f3_as_product 00B9                       ??_initLCD 0092                    __pdataCOMRAM 007A  
             __end_ofi2___awdiv 43F0               __end_ofi2___ftadd 269C                     i2setAngle@i 006F  
             __end_ofi2___awmod 46C0               __end_ofi2___ftdiv 39C4                  i2___ftadd@exp1 0040  
                i2___ftadd@exp2 003F               __end_ofi2___ftneg 4BFA               __end_ofi2___lldiv 4472  
             __end_ofi2___ftmul 37EA                   setAngle@angle 0115               __end_ofi2___llmod 4726  
             __end_ofi2___ftsub 4A2A               __end_ofi2___fttol 38DE                  i2___ftadd@sign 003E  
                  __mediumconst FDC2                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8                   setAngle@motor 0113                       ??_service 0080  
                i2___awmod@sign 0006               __end_ofi2_lcdInst 4C3E                  i2___ftdiv@cntr 0016  
                    __accesstop 0080         __end_of__initialization 4642                      ___altoft@c 0096  
           __size_ofi2___altoft 0078                  i2___ftdiv@sign 001B                      ___ftadd@f1 00C8  
                    ___ftadd@f2 00CB             __size_ofi2___awtoft 0038             __size_ofi2___ftpack 00AE  
                i2printf@tmpval 0066                      ___ftge@ff1 008E                      ___ftge@ff2 0091  
           __size_ofi2___lltoft 005C                   ___rparam_used 000001                      ___ftdiv@f1 00A0  
                    ___ftdiv@f2 00A3                      ___ftdiv@f3 00AA                      ___ftneg@f1 008E  
                    ___awtoft@c 0096                  i2___ftpack@arg 0001           __size_ofi2_startTimer 004C  
            i2__tdiv_to_l_@exp1 000F               i2___llmod@divisor 0012                  i2___ftpack@exp 0004  
            i2__tdiv_to_l_@cntr 000E               i2___llmod@counter 0016              i2__tdiv_to_l_@quot 000A  
                    ___ftmul@f1 00AF                      ___ftmul@f2 00B2                      ___ftsub@f1 00D4  
                    ___ftsub@f2 00D7                      ___fttol@f1 00D4            __end_of_happynewyear FE71  
                __pcstackCOMRAM 0001              i2___lldiv@dividend 0001           __size_of_angleToPulse 0166  
           __size_ofi2_lcdClear 0008                    __pidataBANK1 4B06                      ___lltoft@c 0096  
                 _cylinderMotor 0154                  i2___ftmul@cntr 0029                   __end_of_scale 160A  
                  ?_sortBattery 0001                   __end_of_pause 4C54                  i2___ftmul@sign 002A  
                 __end_of_putch 4BB0                     i2printf@idx 005D                     i2printf@exp 0064  
                   i2printf@val 006A                  i2___fttol@exp1 004F                  i2___fttol@lval 004B  
                     ?i2___ftge 0001                       ?i2___wmul 000F                   i2__tdiv_to_l_ 3056  
            __size_of_lcdNibble 0078                      __div_to_l_ 283A                     i2putch@data 0005  
           __size_ofi2_setAngle 00AE                       ?i2_fround 002B                       ?i2_printf 0050  
              i2setAngle@period 006D                 __div_to_l_@exp1 0099                 __div_to_l_@cntr 0098  
                       ??_scale 00C1                  i2___lltoft@exp 0011                         ??_pause 00EA  
               __div_to_l_@quot 0094                         ??_putch 0092              i2___lldiv@quotient 0009  
                  i2_startTimer 4884                      __pbssBANK0 00EA                      __pbssBANK1 0160  
              i2__tdiv_to_l_@f1 0001                i2__tdiv_to_l_@f2 0004                    _angleToPulse 29C2  
         __size_of_digitalWrite 0104              __size_of_initTimer 004A              __size_of_initServo 008E  
                    _analogRead 49A8                   __div_to_l_@f1 008E                   __div_to_l_@f2 0091  
       __size_ofi2_angleToPulse 0140                         ?___ftge 008E                    ?i2_lcdNibble 0001  
                       ?___wmul 009C           sortBattery@resolution 0128                       ?___altoft 0096  
                       ?_fround 00BE                      _lcdNewline 4C54                       ?___awtoft 0096  
                     ?___ftpack 008E                         ?_printf 00E3                       ?___lltoft 0096  
                ?i2__tdiv_to_l_ 0001                      ??i2___ftge 0007                      ??i2___wmul 0013  
__size_of_servoInterruptService 0106   __end_of_servoInterruptService 35F2                      ??i2_fround 002E  
             i2startTimer@timer 0007                       ?_lcdClear 0001                angleToPulse@a000 010F  
                    ??i2_printf 0054                angleToPulse@a180 0108                    _digitalWrite 35F2  
                       _SSPCON1 000FC6                         _SSPCON2 000FC5                         _SSPSTAT 000FC7  
       __size_ofi2_digitalWrite 00C8                         i2_scale 160A                         _V_LIM_C 0172  
                       i2_putch 4BFA                       ?_pinSetup 0001                       ?_setAngle 0113  
             __end_of_lcdNibble 4566               __end_of__npowers_ FE12                         __Hparam 0000  
                    _scale$1322 00C1                         __Lparam 0000                 __size_of___ftge 00C8  
                       ___awdiv 3D04                         ___ftadd 2042                         ___awmod 3FDA  
                    _readKeypad 4B34                         ___ftdiv 2C86                         ___ftneg 4AD6  
                       ___lldiv 3DC2                 __size_of___wmul 0036                         ___ftmul 2B28  
                       ___llmod 41B4                         ___ftsub 4838                         ___fttol 2DD2  
                  ??i2___altoft 000D                      ??___altoft 009A                         __pcinit 45DE  
                  ??i2___awtoft 000C                    ??i2___ftpack 0006                      ??___awtoft 0099  
                    ??___ftpack 0093                 __size_of_fround 02AC         i2___ftmul@f3_as_product 0026  
                       __ramtop 1000                    ??i2___lltoft 000D                         _lcdInst 4B5E  
                    ??___lltoft 009A                         __ptext0 411A                         __ptext1 19FA  
                       __ptext2 4C3E                         __ptext3 4B34                         __ptext4 0012  
                       __ptext5 115C                         __ptext6 4B88                         __ptext7 4C54  
                       __ptext8 1D96                         __ptext9 4AA0                 __size_of_printf 0952  
                       _padPin1 0158                         _padPin2 015C                         _padPin3 0168  
                 i2_fround$1550 0031                   i2_fround$1551 002E                   startTimer@val 0090  
                       _initLCD 491A               __end_of_hexpowers FE59                     ?__div_to_l_ 008E  
                       _lastKey 0079               __end_of_initTimer 491A               __end_of_initServo 436C  
                       _dpowers FDC3                    i2fround@prec 0034                ___awmod@dividend 008E  
               i2___altoft@sign 0012                    ??i2_lcdClear 0005                      ??_lcdClear 0092  
                       _service 0008                  __pintcode_body 39C4            end_of_initialization 4642  
           i2angleToPulse@angle 0050                   __Lmediumconst FDC2                         int_func 39C4  
           i2___wmul@multiplier 000F              __end_ofi2___altoft 45DE                  digitalRead@pin 008E  
                   ?_analogRead 008E              __end_ofi2___awtoft 4AA0              __end_ofi2___ftpack 3FDA  
                  ??i2_setAngle 006B                      ??_pinSetup 008E                      ??_setAngle 00E7  
            __end_ofi2___lltoft 47E8                 ___lldiv@divisor 0092                 ___lldiv@counter 009A  
                setAngle@period 0117                         printf@c 011D                         printf@f 00E3  
                       postdec1 000FE5                         postdec2 000FDD                 _batteryDetected 0175  
                       postinc0 000FEE                         postinc2 000FDE              __end_ofi2_lcdClear 4C74  
                __tdiv_to_l_@f1 008E                  __tdiv_to_l_@f2 0091                 ??i2__tdiv_to_l_ 0007  
                 ??_digitalRead 0090                     ?_lcdNewline 0001                   ??__tdiv_to_l_ 0094  
                     _PORTBbits 000F81            __size_of_sortBattery 039C              __end_ofi2_setAngle 3F2C  
           _redirectAngle_OTHER 013C                    _happynewyear FE6A              angleToPulse@offset 0104  
            sortBattery@V_float 0122                       i2___awdiv 436C                       i2___ftadd 24F0  
                     i2___awmod 4650                       i2___ftdiv 38DE                       i2___ftneg 4BD6  
                     i2___lldiv 43F0                       i2___ftmul 36F6                       i2___llmod 46C0  
                     i2___ftsub 49EA                       i2___fttol 37EA                      _startTimer 47E8  
                     i2_lcdInst 4C1C                     ___ftdiv@exp 00AD                 i2___awtoft@sign 000C  
            i2___llmod@dividend 000E              i2___awdiv@dividend 0007                 i2___ftpack@sign 0005  
           __size_of__div_to_l_ 0188                  i2_angleToPulse 2F16                     ___ftmul@exp 00B8  
                   ?_readKeypad 0001                  __end_of___ftge 3C3C                  __end_of___wmul 4AD6  
          __size_ofi2_lcdNibble 0066                   __pidataCOMRAM 4C74                   i2lcdInst@data 0004  
                __end_of_fround 2042                i2___wmul@product 0013                  __end_of_printf 0964  
                 i2_printf$1553 005A                    i2printf@flag 0060                    i2printf@fval 006E  
           __size_of_analogRead 0042                    i2printf@prec 0062             start_initialization 45DE  
             __size_ofi2___ftge 0090             __end_of_digitalRead 32B8              i2___awdiv@quotient 000D  
             __size_ofi2___wmul 0026             __end_of__tdiv_to_l_ 283A                  initServo@angle 011D  
                     i2printf@c 0071                       i2printf@f 0050                  initTimer@timer 008E  
               i2___fttol@sign1 004A                  initServo@motor 011B               __size_ofi2_fround 0246  
                    ?i2___awdiv 0007                      ?i2___ftadd 0035                      ?i2___awmod 0001  
                    ?i2___ftdiv 000D                      ?i2___ftneg 0001                      ?i2___lldiv 0001  
                    ?i2___ftmul 001C                      ?i2___llmod 000E                      ?i2___ftsub 0041  
                    ?i2___fttol 0041               __size_ofi2_printf 07F8                  i2_digitalWrite 3C3C  
                    ?i2_lcdInst 0001             __size_of_lcdNewline 0008          __end_ofi2_angleToPulse 3056  
               ___llmod@divisor 009F                 ___llmod@counter 00A3                        ??___ftge 0094  
                      ??___wmul 00A0                     __pdataBANK1 0132                    pause@message 011E  
              __CFG_LPT1OSC$OFF 000000                        ??_fround 00C1                        ??_printf 0100  
             __size_of___altoft 009E                      fround@prec 00C7                   ?i2__div_to_l_ 0001  
             __size_of___awtoft 0044               __size_of___ftpack 010C               __size_of___lltoft 007C  
                   __pbssCOMRAM 0073                   __pcstackBANK0 0080                   __pcstackBANK1 0100  
        __end_ofi2_digitalWrite 3D04          sortBattery@targetAngle 012D                     ?_startTimer 008E  
             __size_of_lcdClear 0008             __size_of_readKeypad 002A                 i2setAngle@angle 0069  
                      ?i2_scale 002B                        ?i2_putch 0001                 i2setAngle@motor 0067  
             i2digitalWrite@pin 0007               i2digitalWrite@val 0009                 ?i2_angleToPulse 0050  
             __CFG_CCP2MX$PORTC 000000               __size_of_pinSetup 003E               __size_of_setAngle 00D4  
                     __pintcode 0008                   __pmediumconst FDC2                       _lcdNibble 44EE  
                      ?___awdiv 0094                        ?___ftadd 00C8                        ?___awmod 008E  
                      ?___ftdiv 00A0                        ?___ftneg 008E                        ?___lldiv 008E  
                      ?___ftmul 00AF                        ?___llmod 009B                        ?___ftsub 00D4  
                     __npowers_ FDEB                        ?___fttol 00D4                   ?i2_lcdNewline 0001  
                   _digitalRead 3188                        ?_lcdInst 0001                     __tdiv_to_l_ 269C  
                ??i2__div_to_l_ 0007                    ??__div_to_l_ 0094                        ?_initLCD 0001  
               startTimer@timer 008E                        ?_service 0001                       _hexpowers FE39  
                     _initTimer 48D0                       _initServo 42DE                 ?i2_digitalWrite 0007  
         _servoInterruptService 34EC                     ??i2___awdiv 000B                     ??i2___ftadd 003B  
                   ??i2___awmod 0005                     ??i2___ftdiv 0013                     ??i2___ftneg 0004  
                   ??i2___lldiv 0009                     ??i2___ftmul 0022                  __size_of_scale 04AE  
                   ??i2___llmod 0016                     ??i2___ftsub 0047                     ??i2___fttol 0045  
                __size_of_pause 0016                  __size_of_putch 0028                        _AA_float 0150  
            i2angleToPulse@a000 0063                     ??i2_lcdInst 0003              i2angleToPulse@a180 005C  
                sortBattery@Vcc 0125                  ___wmul@product 00A0                        _LATDbits 000F8C  
                  ??_analogRead 0092              __end_of__div_to_l_ 29C2                        i2u542_40 3834  
                      i2u542_45 382C                        i2u633_40 0DC0                        i2u617_40 0A6E  
                      i2u617_45 0A64                        i2u564_44 3C66                        i2u564_45 3C60  
                      i2u760_47 4780                        i2u754_47 4C0E                        i2u755_47 4C22  
                      i2u756_47 4C34                        i2u757_47 473E                        i2u758_47 474C  
                      i2u759_47 4772                __CFG_WDTPS$32768 000000                      ?_lcdNibble 0001  
                _padAngle_CLOSE 0132                 i2__div_to_l_@f1 0001                 i2__div_to_l_@f2 0004  
                 digitalWrite@p 0095                  ??i2_lcdNewline 0005                      service@key 0072  
                  ??_lcdNewline 0092             __size_of_startTimer 0050               angleToPulse@angle 00E3  
             ___wmul@multiplier 009C                        i2___ftge 424E                        i2___wmul 4BB0  
                 lcdNibble@data 008F                      printf@flag 010C                   lcdNibble@temp 008E  
                    printf@fval 011A                      printf@prec 010E               i2___awdiv@divisor 0009  
                      i2_fround 22AA              __end_of_analogRead 49EA                        _V_LIM_AA 016F  
                      _V_LIM_9V 016C               i2___awdiv@counter 000B                        i2_printf 0964  
                    ?_initTimer 008E                      ?_initServo 011B               sortBattery@signal 012B  
                     copy_data0 45F2                       copy_data1 4612              i2___awmod@dividend 0001  
              __size_ofi2_scale 03F0                __size_ofi2_putch 0022              __end_of_lcdNewline 4C5C  
                 readKeypad@key 008E                        __Hrparam 0000                        __Lrparam 0000  
            __CFG_BOREN$SBORDIS 000000                    ??_readKeypad 008E                   ??_sortBattery 0120  
              __size_of___awdiv 00BE                __size_of___ftadd 0268                __size_of___awmod 00A2  
              __size_of___ftdiv 014C                __size_of___ftneg 0030           i2___wmul@multiplicand 0011  
              __size_of___lldiv 00BC                        ___altoft 407C                __size_of___ftmul 015E  
              __size_of___llmod 009A                __size_of___ftsub 004C                __size_of___fttol 0144  
                      ___awtoft 4964                        ___ftpack 33E0                     _fround$1320 00C4  
                   _fround$1321 00C1                        ___lltoft 4472           __end_ofi2__tdiv_to_l_ 3188  
              __size_of_lcdInst 002A                       setAngle@i 0119                __size_of_initLCD 004A  
        ?_servoInterruptService 0001                        _lcdClear 4C5C                        __ptext10 3FDA  
                      __ptext11 3D04                        __ptext20 4C5C                        __ptext12 269C  
                      __ptext21 35F2                        __ptext13 283A                        __ptext30 2B28  
                      __ptext22 3188                        __ptext14 4472                        __ptext31 2C86  
                      __ptext23 49A8                        __ptext15 41B4                        __ptext32 2042  
                      __ptext24 4A2A                        __ptext16 3DC2                        __ptext41 3E7E  
                      __ptext33 4964                        __ptext25 42DE                        __ptext17 4838  
                      __ptext50 22AA                        __ptext42 2F16                        __ptext34 407C  
                      __ptext26 47E8                        __ptext18 4AD6                        __ptext51 4BB0  
                      __ptext43 38DE                        __ptext35 33E0                        __ptext27 3AA0  
                      __ptext19 3B74                        __ptext60 49EA                        __ptext52 36F6  
                      __ptext44 4A68                        __ptext36 48D0                        __ptext28 29C2  
                      __ptext61 24F0                        __ptext53 436C                        __ptext45 4566  
                      __ptext37 491A                        __ptext29 2DD2                        __ptext70 3C3C  
                      __ptext62 3F2C                        __ptext54 3056                        __ptext46 0964  
                      __ptext38 4B5E                        __ptext71 4650                        __ptext63 4BD6  
                      __ptext55 32B8                        __ptext47 160A                        __ptext39 44EE  
                      __ptext64 424E                        __ptext56 478C                        __ptext48 4BFA  
                      __ptext65 4C6C                        __ptext57 46C0                        __ptext49 4C64  
                      __ptext66 4C1C                        __ptext58 43F0                        __ptext67 4726  
                      __ptext59 37EA                        __ptext68 34EC                        __ptext69 4884  
                      __powers_ FE12                __size_of_service 3A98                 i2startTimer@val 0009  
                 ?i2_startTimer 0007                        _padServo 0144              __end_of_readKeypad 4B5E  
                 ?_angleToPulse 00E3                   __size_of_main 009A            __end_ofi2__div_to_l_ 33E0  
                      _pinSetup 4A2A                        _setAngle 3AA0                        _prevTime 0077  
                 ??i2_lcdNibble 0001                     ??_lcdNibble 008E                   _padAngle_OPEN 0136  
                      int$flags 007E                       printf@idx 0109                       printf@exp 0110  
                     printf@val 0116               i2___awmod@divisor 0003                       putch@data 0092  
             i2___awmod@counter 0005             i2_angleToPulse$1549 0060             __end_of_sortBattery 1D96  
                    _INTCONbits 000FF2                   ?_digitalWrite 008E                     ??_initTimer 0090  
                   ??_initServo 011F            i2angleToPulse@offset 0058                        scale@scl 00C4  
                ??i2_startTimer 000D                ??i2_angleToPulse 0054                    ??_startTimer 0094  
                      intlevel2 0000                __tdiv_to_l_@exp1 009C                __tdiv_to_l_@cntr 009B  
                ??_angleToPulse 0100            __end_ofi2_lcdNewline 4C6C                __tdiv_to_l_@quot 0097  
              ___lldiv@dividend 008E                _redirectAngle_AA 013A                _redirectAngle_9V 0138  
                      printf@ap 010A                     lcdInst@data 0091                    ?_digitalRead 008E  
                  ?__tdiv_to_l_ 008E              __end_of_startTimer 4838                     _printf$1323 0106  
           __end_ofi2_lcdNibble 478C                ??i2_digitalWrite 000B                ___lldiv@quotient 0096  
                ??_digitalWrite 0092                 _redirectAngle_C 007C                _padAngle_NEUTRAL 0134  
               digitalWrite@pin 008E                 digitalWrite@val 0090               i2__div_to_l_@exp1 000C  
             i2__div_to_l_@cntr 000B               i2__div_to_l_@quot 0007  
