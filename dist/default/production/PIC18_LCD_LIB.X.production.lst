

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Thu Mar 30 23:05:23 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    68                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    74                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    75                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    76  0000                     
    77                           ; Version 1.40
    78                           ; Generated 01/12/2016 GMT
    79                           ; 
    80                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    81                           ; All rights reserved.
    82                           ; 
    83                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    84                           ; 
    85                           ; Redistribution and use in source and binary forms, with or without modification, are
    86                           ; permitted provided that the following conditions are met:
    87                           ; 
    88                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    89                           ;        conditions and the following disclaimer.
    90                           ; 
    91                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    92                           ;        of conditions and the following disclaimer in the documentation and/or other
    93                           ;        materials provided with the distribution.
    94                           ; 
    95                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    96                           ;        software without specific prior written permission.
    97                           ; 
    98                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    99                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   100                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   101                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   102                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   103                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   104                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   105                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   106                           ; 
   107                           ; 
   108                           ; Code-generator required, PIC18F4620 Definitions
   109                           ; 
   110                           ; SFR Addresses
   111  0000                     
   112                           	psect	idataCOMRAM
   113  003B24                     __pidataCOMRAM:
   114                           	opt stack 0
   115                           
   116                           ;initializer for _padAngle_CLOSE
   117  003B24  001E               	dw	30
   118                           
   119                           ;initializer for _padAngle_NEUTRAL
   120  003B26  004C               	dw	76
   121                           
   122                           ;initializer for _redirectAngle_AA
   123  003B28  008A               	dw	138
   124                           
   125                           ;initializer for _redirectAngle_C
   126  003B2A  00A6               	dw	166
   127                           
   128                           ;initializer for _redirectAngle_OTHER
   129  003B2C  0099               	dw	153
   130                           
   131                           ;initializer for _stoppingTime
   132  003B2E  2710               	dw	10000
   133                           
   134                           ;initializer for _padServo
   135  003B30  0002               	dw	2
   136  003B32  0001               	dw	1
   137                           
   138                           	psect	idataBANK1
   139  00398C                     __pidataBANK1:
   140                           	opt stack 0
   141                           
   142                           ;initializer for _V_LIM_9V
   143  00398C  77                 	db	119
   144  00398D  EE                 	db	238
   145  00398E  3F                 	db	63
   146                           
   147                           ;initializer for _V_LIM_AA
   148  00398F  C1                 	db	193
   149  003990  4A                 	db	74
   150  003991  3E                 	db	62
   151                           
   152                           ;initializer for _V_LIM_C
   153  003992  A7                 	db	167
   154  003993  A9                 	db	169
   155  003994  3F                 	db	63
   156                           
   157                           ;initializer for _angle
   158  003995  005A               	dw	90
   159                           
   160                           ;initializer for _padAngle_OPEN
   161  003997  00B4               	dw	180
   162                           
   163                           ;initializer for _period
   164  003999  797C               	dw	31100
   165                           
   166                           ;initializer for _redirectAngle_9V
   167  00399B  0076               	dw	118
   168                           
   169                           ;initializer for _AA_float
   170  00399D  0002               	dw	2
   171  00399F  0005               	dw	5
   172                           
   173                           ;initializer for _conveyorServo
   174  0039A1  0002               	dw	2
   175  0039A3  0002               	dw	2
   176                           
   177                           ;initializer for _cylinderDir
   178  0039A5  0003               	dw	3
   179  0039A7  0001               	dw	1
   180                           
   181                           ;initializer for _cylinderMotor
   182  0039A9  0002               	dw	2
   183  0039AB  0000               	dw	0
   184                           
   185                           ;initializer for _padPin1
   186  0039AD  0002               	dw	2
   187  0039AF  0006               	dw	6
   188                           
   189                           ;initializer for _padPin2
   190  0039B1  0002               	dw	2
   191  0039B3  0007               	dw	7
   192                           
   193                           ;initializer for _redirectingServo
   194  0039B5  0003               	dw	3
   195  0039B7  0000               	dw	0
   196                           
   197                           	psect	mediumconst
   198  00FE1C                     __pmediumconst:
   199                           	opt stack 0
   200  00FE1C  00                 	db	0
   201  00FE1D                     _dpowers:
   202                           	opt stack 0
   203  00FE1D  0001               	dw	1
   204  00FE1F  0000               	dw	0
   205  00FE21  000A               	dw	10
   206  00FE23  0000               	dw	0
   207  00FE25  0064               	dw	100
   208  00FE27  0000               	dw	0
   209  00FE29  03E8               	dw	1000
   210  00FE2B  0000               	dw	0
   211  00FE2D  2710               	dw	10000
   212  00FE2F  0000               	dw	0
   213  00FE31  86A0               	dw	34464
   214  00FE33  0001               	dw	1
   215  00FE35  4240               	dw	16960
   216  00FE37  000F               	dw	15
   217  00FE39  9680               	dw	38528
   218  00FE3B  0098               	dw	152
   219  00FE3D  E100               	dw	57600
   220  00FE3F  05F5               	dw	1525
   221  00FE41  CA00               	dw	51712
   222  00FE43  3B9A               	dw	15258
   223  00FE45                     __end_of_dpowers:
   224                           	opt stack 0
   225  00FE45                     __npowers_:
   226                           	opt stack 0
   227  00FE45  00                 	db	0
   228  00FE46  80                 	db	128
   229  00FE47  3F                 	db	63
   230  00FE48  CD                 	db	205
   231  00FE49  CC                 	db	204
   232  00FE4A  3D                 	db	61
   233  00FE4B  D7                 	db	215
   234  00FE4C  23                 	db	35
   235  00FE4D  3C                 	db	60
   236  00FE4E  12                 	db	18
   237  00FE4F  83                 	db	131
   238  00FE50  3A                 	db	58
   239  00FE51  B7                 	db	183
   240  00FE52  D1                 	db	209
   241  00FE53  38                 	db	56
   242  00FE54  C6                 	db	198
   243  00FE55  27                 	db	39
   244  00FE56  37                 	db	55
   245  00FE57  38                 	db	56
   246  00FE58  86                 	db	134
   247  00FE59  35                 	db	53
   248  00FE5A  C0                 	db	192
   249  00FE5B  D6                 	db	214
   250  00FE5C  33                 	db	51
   251  00FE5D  CC                 	db	204
   252  00FE5E  2B                 	db	43
   253  00FE5F  32                 	db	50
   254  00FE60  70                 	db	112
   255  00FE61  89                 	db	137
   256  00FE62  30                 	db	48
   257  00FE63  E7                 	db	231
   258  00FE64  DB                 	db	219
   259  00FE65  2E                 	db	46
   260  00FE66  E5                 	db	229
   261  00FE67  3C                 	db	60
   262  00FE68  1E                 	db	30
   263  00FE69  42                 	db	66
   264  00FE6A  A2                 	db	162
   265  00FE6B  0D                 	db	13
   266  00FE6C                     __end_of__npowers_:
   267                           	opt stack 0
   268  00FE6C                     __powers_:
   269                           	opt stack 0
   270  00FE6C  00                 	db	0
   271  00FE6D  80                 	db	128
   272  00FE6E  3F                 	db	63
   273  00FE6F  00                 	db	0
   274  00FE70  20                 	db	32
   275  00FE71  41                 	db	65
   276  00FE72  00                 	db	0
   277  00FE73  C8                 	db	200
   278  00FE74  42                 	db	66
   279  00FE75  00                 	db	0
   280  00FE76  7A                 	db	122
   281  00FE77  44                 	db	68
   282  00FE78  40                 	db	64
   283  00FE79  1C                 	db	28
   284  00FE7A  46                 	db	70
   285  00FE7B  50                 	db	80
   286  00FE7C  C3                 	db	195
   287  00FE7D  47                 	db	71
   288  00FE7E  24                 	db	36
   289  00FE7F  74                 	db	116
   290  00FE80  49                 	db	73
   291  00FE81  97                 	db	151
   292  00FE82  18                 	db	24
   293  00FE83  4B                 	db	75
   294  00FE84  BC                 	db	188
   295  00FE85  BE                 	db	190
   296  00FE86  4C                 	db	76
   297  00FE87  6B                 	db	107
   298  00FE88  6E                 	db	110
   299  00FE89  4E                 	db	78
   300  00FE8A  03                 	db	3
   301  00FE8B  15                 	db	21
   302  00FE8C  50                 	db	80
   303  00FE8D  79                 	db	121
   304  00FE8E  AD                 	db	173
   305  00FE8F  60                 	db	96
   306  00FE90  F3                 	db	243
   307  00FE91  49                 	db	73
   308  00FE92  71                 	db	113
   309  00FE93                     __end_of__powers_:
   310                           	opt stack 0
   311  00FE93                     _hexpowers:
   312                           	opt stack 0
   313  00FE93  0001               	dw	1
   314  00FE95  0000               	dw	0
   315  00FE97  0010               	dw	16
   316  00FE99  0000               	dw	0
   317  00FE9B  0100               	dw	256
   318  00FE9D  0000               	dw	0
   319  00FE9F  1000               	dw	4096
   320  00FEA1  0000               	dw	0
   321  00FEA3  0000               	dw	0
   322  00FEA5  0001               	dw	1
   323  00FEA7  0000               	dw	0
   324  00FEA9  0010               	dw	16
   325  00FEAB  0000               	dw	0
   326  00FEAD  0100               	dw	256
   327  00FEAF  0000               	dw	0
   328  00FEB1  1000               	dw	4096
   329  00FEB3                     __end_of_hexpowers:
   330                           	opt stack 0
   331  00FEB3                     _keys:
   332                           	opt stack 0
   333  00FEB3  31                 	db	49
   334  00FEB4  32                 	db	50
   335  00FEB5  33                 	db	51
   336  00FEB6  41                 	db	65
   337  00FEB7  34                 	db	52
   338  00FEB8  35                 	db	53
   339  00FEB9  36                 	db	54
   340  00FEBA  42                 	db	66
   341  00FEBB  37                 	db	55
   342  00FEBC  38                 	db	56
   343  00FEBD  39                 	db	57
   344  00FEBE  43                 	db	67
   345  00FEBF  2A                 	db	42
   346  00FEC0  30                 	db	48
   347  00FEC1  23                 	db	35
   348  00FEC2  44                 	db	68
   349  00FEC3  00                 	db	0
   350  00FEC4                     __end_of_keys:
   351                           	opt stack 0
   352  00FEC4                     _happynewyear:
   353                           	opt stack 0
   354  00FEC4  00                 	db	0
   355  00FEC5  59                 	db	89
   356  00FEC6  03                 	db	3
   357  00FEC7  01                 	db	1
   358  00FEC8  13                 	db	19
   359  00FEC9  04                 	db	4
   360  00FECA  17                 	db	23
   361  00FECB                     __end_of_happynewyear:
   362                           	opt stack 0
   363  0000                     _ADCON0	set	4034
   364  0000                     _ADCON1	set	4033
   365  0000                     _ADCON2	set	4032
   366  0000                     _ADRESH	set	4036
   367  0000                     _ADRESL	set	4035
   368  0000                     _EEADR	set	4009
   369  0000                     _EEADRH	set	4010
   370  0000                     _EECON1	set	4006
   371  0000                     _EECON2	set	4007
   372  0000                     _EEDATA	set	4008
   373  0000                     _INTCONbits	set	4082
   374  0000                     _LATA	set	3977
   375  0000                     _LATB	set	3978
   376  0000                     _LATC	set	3979
   377  0000                     _LATD	set	3980
   378  0000                     _LATDbits	set	3980
   379  0000                     _LATE	set	3981
   380  0000                     _PORTA	set	3968
   381  0000                     _PORTB	set	3969
   382  0000                     _PORTBbits	set	3969
   383  0000                     _PORTC	set	3970
   384  0000                     _PORTD	set	3971
   385  0000                     _SSPADD	set	4040
   386  0000                     _SSPBUF	set	4041
   387  0000                     _SSPCON1	set	4038
   388  0000                     _SSPCON2	set	4037
   389  0000                     _SSPSTAT	set	4039
   390  0000                     _T0CON	set	4053
   391  0000                     _T1CON	set	4045
   392  0000                     _T3CON	set	4017
   393  0000                     _TMR0H	set	4055
   394  0000                     _TMR0L	set	4054
   395  0000                     _TMR1H	set	4047
   396  0000                     _TMR1L	set	4046
   397  0000                     _TMR3H	set	4019
   398  0000                     _TMR3L	set	4018
   399  0000                     _TRISA	set	3986
   400  0000                     _TRISB	set	3987
   401  0000                     _TRISC	set	3988
   402  0000                     _TRISD	set	3989
   403  0000                     _TRISE	set	3990
   404  0000                     _ACKDT	set	32301
   405  0000                     _ACKEN	set	32300
   406  0000                     _EEIF	set	32012
   407  0000                     _INT0IE	set	32660
   408  0000                     _INT0IF	set	32657
   409  0000                     _INT1IE	set	32643
   410  0000                     _INT1IF	set	32640
   411  0000                     _PEIE	set	32662
   412  0000                     _PEN	set	32298
   413  0000                     _RCEN	set	32299
   414  0000                     _RSEN	set	32297
   415  0000                     _SEN	set	32296
   416  0000                     _TMR0IE	set	32661
   417  0000                     _TMR0IF	set	32658
   418  0000                     _TMR1IE	set	31976
   419  0000                     _TMR1IF	set	31984
   420  0000                     _TMR3IE	set	32001
   421  0000                     _TRISC3	set	31907
   422  0000                     _TRISC4	set	31908
   423  00FECB                     STR_13:
   424  00FECB  25                 	db	37
   425  00FECC  63                 	db	99	;'c'
   426  00FECD  29                 	db	41
   427  00FECE  20                 	db	32
   428  00FECF  74                 	db	116	;'t'
   429  00FED0  69                 	db	105	;'i'
   430  00FED1  6D                 	db	109	;'m'
   431  00FED2  65                 	db	101	;'e'
   432  00FED3  20                 	db	32
   433  00FED4  20                 	db	32
   434  00FED5  3C                 	db	60	;'<'
   435  00FED6  41                 	db	65	;'A'
   436  00FED7  20                 	db	32
   437  00FED8  20                 	db	32
   438  00FED9  20                 	db	32
   439  00FEDA  20                 	db	32
   440  00FEDB  20                 	db	32
   441  00FEDC  0A                 	db	10
   442  00FEDD  00                 	db	0
   443  00FEDE                     STR_9:
   444  00FEDE  73                 	db	115	;'s'
   445  00FEDF  74                 	db	116	;'t'
   446  00FEE0  61                 	db	97	;'a'
   447  00FEE1  72                 	db	114	;'r'
   448  00FEE2  74                 	db	116	;'t'
   449  00FEE3  20                 	db	32
   450  00FEE4  20                 	db	32
   451  00FEE5  20                 	db	32
   452  00FEE6  3C                 	db	60	;'<'
   453  00FEE7  42                 	db	66	;'B'
   454  00FEE8  20                 	db	32
   455  00FEE9  20                 	db	32
   456  00FEEA  20                 	db	32
   457  00FEEB  20                 	db	32
   458  00FEEC  20                 	db	32
   459  00FEED  20                 	db	32
   460  00FEEE  0A                 	db	10
   461  00FEEF  00                 	db	0
   462  00FEF0                     STR_7:
   463  00FEF0  20                 	db	32
   464  00FEF1  20                 	db	32
   465  00FEF2  68                 	db	104	;'h'
   466  00FEF3  68                 	db	104	;'h'
   467  00FEF4  3A                 	db	58	;':'
   468  00FEF5  6D                 	db	109	;'m'
   469  00FEF6  6D                 	db	109	;'m'
   470  00FEF7  3A                 	db	58	;':'
   471  00FEF8  73                 	db	115	;'s'
   472  00FEF9  73                 	db	115	;'s'
   473  00FEFA  20                 	db	32
   474  00FEFB  20                 	db	32
   475  00FEFC  20                 	db	32
   476  00FEFD  20                 	db	32
   477  00FEFE  20                 	db	32
   478  00FEFF  20                 	db	32
   479  00FF00  0A                 	db	10
   480  00FF01  00                 	db	0
   481  00FF02                     STR_11:
   482  00FF02  73                 	db	115	;'s'
   483  00FF03  65                 	db	101	;'e'
   484  00FF04  6C                 	db	108	;'l'
   485  00FF05  65                 	db	101	;'e'
   486  00FF06  63                 	db	99	;'c'
   487  00FF07  74                 	db	116	;'t'
   488  00FF08  20                 	db	32
   489  00FF09  72                 	db	114	;'r'
   490  00FF0A  75                 	db	117	;'u'
   491  00FF0B  6E                 	db	110	;'n'
   492  00FF0C  3A                 	db	58	;':'
   493  00FF0D  20                 	db	32
   494  00FF0E  20                 	db	32
   495  00FF0F  20                 	db	32
   496  00FF10  20                 	db	32
   497  00FF11  20                 	db	32
   498  00FF12  0A                 	db	10
   499  00FF13  00                 	db	0
   500  00FF14                     STR_15:
   501  00FF14  74                 	db	116	;'t'
   502  00FF15  69                 	db	105	;'i'
   503  00FF16  6D                 	db	109	;'m'
   504  00FF17  65                 	db	101	;'e'
   505  00FF18  3A                 	db	58	;':'
   506  00FF19  20                 	db	32
   507  00FF1A  6E                 	db	110	;'n'
   508  00FF1B  6E                 	db	110	;'n'
   509  00FF1C  6E                 	db	110	;'n'
   510  00FF1D  20                 	db	32
   511  00FF1E  73                 	db	115	;'s'
   512  00FF1F  65                 	db	101	;'e'
   513  00FF20  63                 	db	99	;'c'
   514  00FF21  20                 	db	32
   515  00FF22  20                 	db	32
   516  00FF23  20                 	db	32
   517  00FF24  0A                 	db	10
   518  00FF25  00                 	db	0
   519  00FF26                     STR_17:
   520  00FF26  5B                 	db	91	;'['
   521  00FF27  41                 	db	65	;'A'
   522  00FF28  41                 	db	65	;'A'
   523  00FF29  2C                 	db	44
   524  00FF2A  39                 	db	57	;'9'
   525  00FF2B  56                 	db	86	;'V'
   526  00FF2C  2C                 	db	44
   527  00FF2D  43                 	db	67	;'C'
   528  00FF2E  2C                 	db	44
   529  00FF2F  6F                 	db	111	;'o'
   530  00FF30  74                 	db	116	;'t'
   531  00FF31  68                 	db	104	;'h'
   532  00FF32  65                 	db	101	;'e'
   533  00FF33  72                 	db	114	;'r'
   534  00FF34  5D                 	db	93	;']'
   535  00FF35  20                 	db	32
   536  00FF36  0A                 	db	10
   537  00FF37  00                 	db	0
   538  00FF38                     STR_19:
   539  00FF38  30                 	db	48	;'0'
   540  00FF39  31                 	db	49	;'1'
   541  00FF3A  32                 	db	50	;'2'
   542  00FF3B  33                 	db	51	;'3'
   543  00FF3C  34                 	db	52	;'4'
   544  00FF3D  35                 	db	53	;'5'
   545  00FF3E  36                 	db	54	;'6'
   546  00FF3F  37                 	db	55	;'7'
   547  00FF40  38                 	db	56	;'8'
   548  00FF41  39                 	db	57	;'9'
   549  00FF42  61                 	db	97	;'a'
   550  00FF43  62                 	db	98	;'b'
   551  00FF44  63                 	db	99	;'c'
   552  00FF45  64                 	db	100	;'d'
   553  00FF46  65                 	db	101	;'e'
   554  00FF47  66                 	db	102	;'f'
   555  00FF48  00                 	db	0
   556  00FF49                     STR_16:
   557  00FF49  20                 	db	32
   558  00FF4A  20                 	db	32
   559  00FF4B  20                 	db	32
   560  00FF4C  20                 	db	32
   561  00FF4D  20                 	db	32
   562  00FF4E  20                 	db	32
   563  00FF4F  20                 	db	32
   564  00FF50  20                 	db	32
   565  00FF51  20                 	db	32
   566  00FF52  20                 	db	32
   567  00FF53  20                 	db	32
   568  00FF54  20                 	db	32
   569  00FF55  20                 	db	32
   570  00FF56  20                 	db	32
   571  00FF57  2A                 	db	42
   572  00FF58  3E                 	db	62	;'>'
   573  00FF59  00                 	db	0
   574  00FF5A                     STR_12:
   575  00FF5A  5B                 	db	91	;'['
   576  00FF5B  31                 	db	49	;'1'
   577  00FF5C  2C                 	db	44
   578  00FF5D  32                 	db	50	;'2'
   579  00FF5E  2C                 	db	44
   580  00FF5F  33                 	db	51	;'3'
   581  00FF60  2C                 	db	44
   582  00FF61  34                 	db	52	;'4'
   583  00FF62  5D                 	db	93	;']'
   584  00FF63  20                 	db	32
   585  00FF64  20                 	db	32
   586  00FF65  20                 	db	32
   587  00FF66  20                 	db	32
   588  00FF67  20                 	db	32
   589  00FF68  2A                 	db	42
   590  00FF69  3E                 	db	62	;'>'
   591  00FF6A  00                 	db	0
   592  00FF6B                     STR_10:
   593  00FF6B  68                 	db	104	;'h'
   594  00FF6C  69                 	db	105	;'i'
   595  00FF6D  73                 	db	115	;'s'
   596  00FF6E  74                 	db	116	;'t'
   597  00FF6F  6F                 	db	111	;'o'
   598  00FF70  72                 	db	114	;'r'
   599  00FF71  79                 	db	121	;'y'
   600  00FF72  20                 	db	32
   601  00FF73  3C                 	db	60	;'<'
   602  00FF74  43                 	db	67	;'C'
   603  00FF75  20                 	db	32
   604  00FF76  20                 	db	32
   605  00FF77  20                 	db	32
   606  00FF78  20                 	db	32
   607  00FF79  2A                 	db	42
   608  00FF7A  3E                 	db	62	;'>'
   609  00FF7B  00                 	db	0
   610  00FF7C                     STR_14:
   611  00FF7C  20                 	db	32
   612  00FF7D  20                 	db	32
   613  00FF7E  20                 	db	32
   614  00FF7F  73                 	db	115	;'s'
   615  00FF80  74                 	db	116	;'t'
   616  00FF81  61                 	db	97	;'a'
   617  00FF82  74                 	db	116	;'t'
   618  00FF83  73                 	db	115	;'s'
   619  00FF84  20                 	db	32
   620  00FF85  3C                 	db	60	;'<'
   621  00FF86  42                 	db	66	;'B'
   622  00FF87  20                 	db	32
   623  00FF88  20                 	db	32
   624  00FF89  20                 	db	32
   625  00FF8A  2A                 	db	42
   626  00FF8B  3E                 	db	62	;'>'
   627  00FF8C  00                 	db	0
   628  00FF8D                     STR_18:
   629  00FF8D  5B                 	db	91	;'['
   630  00FF8E  6E                 	db	110	;'n'
   631  00FF8F  6E                 	db	110	;'n'
   632  00FF90  2C                 	db	44
   633  00FF91  6E                 	db	110	;'n'
   634  00FF92  2C                 	db	44
   635  00FF93  6E                 	db	110	;'n'
   636  00FF94  2C                 	db	44
   637  00FF95  6E                 	db	110	;'n'
   638  00FF96  6E                 	db	110	;'n'
   639  00FF97  5D                 	db	93	;']'
   640  00FF98  20                 	db	32
   641  00FF99  20                 	db	32
   642  00FF9A  20                 	db	32
   643  00FF9B  2A                 	db	42
   644  00FF9C  3E                 	db	62	;'>'
   645  00FF9D  00                 	db	0
   646  00FF9E                     STR_8:
   647  00FF9E  20                 	db	32
   648  00FF9F  20                 	db	32
   649  00FFA0  6D                 	db	109	;'m'
   650  00FFA1  6D                 	db	109	;'m'
   651  00FFA2  3A                 	db	58	;':'
   652  00FFA3  64                 	db	100	;'d'
   653  00FFA4  64                 	db	100	;'d'
   654  00FFA5  3A                 	db	58	;':'
   655  00FFA6  79                 	db	121	;'y'
   656  00FFA7  79                 	db	121	;'y'
   657  00FFA8  20                 	db	32
   658  00FFA9  20                 	db	32
   659  00FFAA  20                 	db	32
   660  00FFAB  20                 	db	32
   661  00FFAC  41                 	db	65	;'A'
   662  00FFAD  3E                 	db	62	;'>'
   663  00FFAE  00                 	db	0
   664  00FFAF                     STR_3:
   665  00FFAF  5B                 	db	91	;'['
   666  00FFB0  41                 	db	65	;'A'
   667  00FFB1  41                 	db	65	;'A'
   668  00FFB2  2C                 	db	44
   669  00FFB3  43                 	db	67	;'C'
   670  00FFB4  2C                 	db	44
   671  00FFB5  39                 	db	57	;'9'
   672  00FFB6  56                 	db	86	;'V'
   673  00FFB7  2C                 	db	44
   674  00FFB8  4F                 	db	79	;'O'
   675  00FFB9  54                 	db	84	;'T'
   676  00FFBA  48                 	db	72	;'H'
   677  00FFBB  45                 	db	69	;'E'
   678  00FFBC  52                 	db	82	;'R'
   679  00FFBD  5D                 	db	93	;']'
   680  00FFBE  0A                 	db	10
   681  00FFBF  00                 	db	0
   682  00FFC0                     STR_2:
   683  00FFC0  74                 	db	116	;'t'
   684  00FFC1  69                 	db	105	;'i'
   685  00FFC2  6D                 	db	109	;'m'
   686  00FFC3  65                 	db	101	;'e'
   687  00FFC4  20                 	db	32
   688  00FFC5  25                 	db	37
   689  00FFC6  30                 	db	48	;'0'
   690  00FFC7  32                 	db	50	;'2'
   691  00FFC8  6C                 	db	108	;'l'
   692  00FFC9  64                 	db	100	;'d'
   693  00FFCA  3A                 	db	58	;':'
   694  00FFCB  25                 	db	37
   695  00FFCC  30                 	db	48	;'0'
   696  00FFCD  32                 	db	50	;'2'
   697  00FFCE  6C                 	db	108	;'l'
   698  00FFCF  64                 	db	100	;'d'
   699  00FFD0  00                 	db	0
   700  00FFD1                     STR_5:
   701  00FFD1  4E                 	db	78	;'N'
   702  00FFD2  3A                 	db	58	;':'
   703  00FFD3  20                 	db	32
   704  00FFD4  25                 	db	37
   705  00FFD5  64                 	db	100	;'d'
   706  00FFD6  2C                 	db	44
   707  00FFD7  0A                 	db	10
   708  00FFD8  56                 	db	86	;'V'
   709  00FFD9  3A                 	db	58	;':'
   710  00FFDA  20                 	db	32
   711  00FFDB  25                 	db	37
   712  00FFDC  2E                 	db	46
   713  00FFDD  33                 	db	51	;'3'
   714  00FFDE  66                 	db	102	;'f'
   715  00FFDF  00                 	db	0
   716  00FFE0                     STR_4:
   717  00FFE0  5B                 	db	91	;'['
   718  00FFE1  25                 	db	37
   719  00FFE2  64                 	db	100	;'d'
   720  00FFE3  2C                 	db	44
   721  00FFE4  25                 	db	37
   722  00FFE5  64                 	db	100	;'d'
   723  00FFE6  2C                 	db	44
   724  00FFE7  25                 	db	37
   725  00FFE8  64                 	db	100	;'d'
   726  00FFE9  2C                 	db	44
   727  00FFEA  25                 	db	37
   728  00FFEB  64                 	db	100	;'d'
   729  00FFEC  5D                 	db	93	;']'
   730  00FFED  00                 	db	0
   731  00FFEE  74                 	db	116	;'t'
   732  00FFEF  31                 	db	49	;'1'
   733  00FFF0  3A                 	db	58	;':'
   734  00FFF1  20                 	db	32
   735  00FFF2  25                 	db	37
   736  00FFF3  78                 	db	120	;'x'
   737  00FFF4  20                 	db	32
   738  00FFF5  00                 	db	0
   739  00FFF6                     STR_1:
   740  00FFF6  72                 	db	114	;'r'
   741  00FFF7  75                 	db	117	;'u'
   742  00FFF8  6E                 	db	110	;'n'
   743  00FFF9  6E                 	db	110	;'n'
   744  00FFFA  69                 	db	105	;'i'
   745  00FFFB  6E                 	db	110	;'n'
   746  00FFFC  67                 	db	103	;'g'
   747  00FFFD  00                 	db	0
   748                           
   749                           ; #config settings
   750  00FFFE  00                 	db	0	; dummy byte at the end
   751  0000                     
   752                           	psect	cinit
   753  0035FA                     __pcinit:
   754                           	opt stack 0
   755  0035FA                     start_initialization:
   756                           	opt stack 0
   757  0035FA                     __initialization:
   758                           	opt stack 0
   759                           
   760                           ; Initialize objects allocated to BANK1 (45 bytes)
   761                           ; load TBLPTR registers with __pidataBANK1
   762  0035FA  0E8C               	movlw	low __pidataBANK1
   763  0035FC  6EF6               	movwf	tblptrl,c
   764  0035FE  0E39               	movlw	high __pidataBANK1
   765  003600  6EF7               	movwf	tblptrh,c
   766  003602  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   767  003604  6EF8               	movwf	tblptru,c
   768  003606  EE01  F038         	lfsr	0,__pdataBANK1
   769  00360A  EE10 F02D          	lfsr	1,45
   770  00360E                     copy_data0:
   771  00360E  0009               	tblrd		*+
   772  003610  CFF5 FFEE          	movff	tablat,postinc0
   773  003614  50E5               	movf	postdec1,w,c
   774  003616  50E1               	movf	fsr1l,w,c
   775  003618  E1FA               	bnz	copy_data0
   776                           
   777                           ; Initialize objects allocated to COMRAM (16 bytes)
   778                           ; load TBLPTR registers with __pidataCOMRAM
   779  00361A  0E24               	movlw	low __pidataCOMRAM
   780  00361C  6EF6               	movwf	tblptrl,c
   781  00361E  0E3B               	movlw	high __pidataCOMRAM
   782  003620  6EF7               	movwf	tblptrh,c
   783  003622  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   784  003624  6EF8               	movwf	tblptru,c
   785  003626  EE00  F049         	lfsr	0,__pdataCOMRAM
   786  00362A  EE10 F010          	lfsr	1,16
   787  00362E                     copy_data1:
   788  00362E  0009               	tblrd		*+
   789  003630  CFF5 FFEE          	movff	tablat,postinc0
   790  003634  50E5               	movf	postdec1,w,c
   791  003636  50E1               	movf	fsr1l,w,c
   792  003638  E1FA               	bnz	copy_data1
   793                           
   794                           ; Clear objects allocated to BANK1 (24 bytes)
   795  00363A  EE01  F065         	lfsr	0,__pbssBANK1
   796  00363E  0E18               	movlw	24
   797  003640                     clear_0:
   798  003640  6AEE               	clrf	postinc0,c
   799  003642  06E8               	decf	wreg,f,c
   800  003644  E1FD               	bnz	clear_0
   801                           
   802                           ; Clear objects allocated to COMRAM (21 bytes)
   803  003646  EE00  F034         	lfsr	0,__pbssCOMRAM
   804  00364A  0E15               	movlw	21
   805  00364C                     clear_1:
   806  00364C  6AEE               	clrf	postinc0,c
   807  00364E  06E8               	decf	wreg,f,c
   808  003650  E1FD               	bnz	clear_1
   809  003652                     end_of_initialization:
   810                           	opt stack 0
   811  003652                     __end_of__initialization:
   812                           	opt stack 0
   813  003652  9059               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   814  003654  9259               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   815  003656  0E00               	movlw	low (__Lmediumconst shr (0+16))
   816  003658  6EF8               	movwf	tblptru,c
   817  00365A  0100               	movlb	0
   818  00365C  EFD0  F00B         	goto	_main	;jump to C main() function
   819                           tblptru	equ	0xFF8
   820                           tblptrh	equ	0xFF7
   821                           tblptrl	equ	0xFF6
   822                           tablat	equ	0xFF5
   823                           postinc0	equ	0xFEE
   824                           wreg	equ	0xFE8
   825                           postdec1	equ	0xFE5
   826                           fsr1l	equ	0xFE1
   827                           
   828                           	psect	bssCOMRAM
   829  000034                     __pbssCOMRAM:
   830                           	opt stack 0
   831  000034                     _time:
   832                           	opt stack 0
   833  000034                     	ds	4
   834  000038                     _batteryDetected:
   835                           	opt stack 0
   836  000038                     	ds	2
   837  00003A                     _curr:
   838                           	opt stack 0
   839  00003A                     	ds	2
   840  00003C                     _n:
   841                           	opt stack 0
   842  00003C                     	ds	2
   843  00003E                     _n_9V:
   844                           	opt stack 0
   845  00003E                     	ds	2
   846  000040                     _n_AA:
   847                           	opt stack 0
   848  000040                     	ds	2
   849  000042                     _n_C:
   850                           	opt stack 0
   851  000042                     	ds	2
   852  000044                     _n_OTHER:
   853                           	opt stack 0
   854  000044                     	ds	2
   855  000046                     _terminate:
   856                           	opt stack 0
   857  000046                     	ds	2
   858  000048                     _lastKey:
   859                           	opt stack 0
   860  000048                     	ds	1
   861                           tblptru	equ	0xFF8
   862                           tblptrh	equ	0xFF7
   863                           tblptrl	equ	0xFF6
   864                           tablat	equ	0xFF5
   865                           postinc0	equ	0xFEE
   866                           wreg	equ	0xFE8
   867                           postdec1	equ	0xFE5
   868                           fsr1l	equ	0xFE1
   869                           
   870                           	psect	dataCOMRAM
   871  000049                     __pdataCOMRAM:
   872                           	opt stack 0
   873  000049                     _padAngle_CLOSE:
   874                           	opt stack 0
   875  000049                     	ds	2
   876  00004B                     _padAngle_NEUTRAL:
   877                           	opt stack 0
   878  00004B                     	ds	2
   879  00004D                     _redirectAngle_AA:
   880                           	opt stack 0
   881  00004D                     	ds	2
   882  00004F                     _redirectAngle_C:
   883                           	opt stack 0
   884  00004F                     	ds	2
   885  000051                     _redirectAngle_OTHER:
   886                           	opt stack 0
   887  000051                     	ds	2
   888  000053                     _stoppingTime:
   889                           	opt stack 0
   890  000053                     	ds	2
   891  000055                     _padServo:
   892                           	opt stack 0
   893  000055                     	ds	4
   894                           tblptru	equ	0xFF8
   895                           tblptrh	equ	0xFF7
   896                           tblptrl	equ	0xFF6
   897                           tablat	equ	0xFF5
   898                           postinc0	equ	0xFEE
   899                           wreg	equ	0xFE8
   900                           postdec1	equ	0xFE5
   901                           fsr1l	equ	0xFE1
   902                           
   903                           	psect	bssBANK1
   904  000165                     __pbssBANK1:
   905                           	opt stack 0
   906  000165                     _pulse:
   907                           	opt stack 0
   908  000165                     	ds	8
   909  00016D                     _servos:
   910                           	opt stack 0
   911  00016D                     	ds	8
   912  000175                     _padPin3:
   913                           	opt stack 0
   914  000175                     	ds	4
   915  000179                     _count:
   916                           	opt stack 0
   917  000179                     	ds	2
   918  00017B                     _prevTime:
   919                           	opt stack 0
   920  00017B                     	ds	2
   921                           tblptru	equ	0xFF8
   922                           tblptrh	equ	0xFF7
   923                           tblptrl	equ	0xFF6
   924                           tablat	equ	0xFF5
   925                           postinc0	equ	0xFEE
   926                           wreg	equ	0xFE8
   927                           postdec1	equ	0xFE5
   928                           fsr1l	equ	0xFE1
   929                           
   930                           	psect	dataBANK1
   931  000138                     __pdataBANK1:
   932                           	opt stack 0
   933  000138                     _V_LIM_9V:
   934                           	opt stack 0
   935  000138                     	ds	3
   936  00013B                     _V_LIM_AA:
   937                           	opt stack 0
   938  00013B                     	ds	3
   939  00013E                     _V_LIM_C:
   940                           	opt stack 0
   941  00013E                     	ds	3
   942  000141                     _angle:
   943                           	opt stack 0
   944  000141                     	ds	2
   945  000143                     _padAngle_OPEN:
   946                           	opt stack 0
   947  000143                     	ds	2
   948  000145                     _period:
   949                           	opt stack 0
   950  000145                     	ds	2
   951  000147                     _redirectAngle_9V:
   952                           	opt stack 0
   953  000147                     	ds	2
   954  000149                     _AA_float:
   955                           	opt stack 0
   956  000149                     	ds	4
   957  00014D                     _conveyorServo:
   958                           	opt stack 0
   959  00014D                     	ds	4
   960  000151                     _cylinderDir:
   961                           	opt stack 0
   962  000151                     	ds	4
   963  000155                     _cylinderMotor:
   964                           	opt stack 0
   965  000155                     	ds	4
   966  000159                     _padPin1:
   967                           	opt stack 0
   968  000159                     	ds	4
   969  00015D                     _padPin2:
   970                           	opt stack 0
   971  00015D                     	ds	4
   972  000161                     _redirectingServo:
   973                           	opt stack 0
   974  000161                     	ds	4
   975                           tblptru	equ	0xFF8
   976                           tblptrh	equ	0xFF7
   977                           tblptrl	equ	0xFF6
   978                           tablat	equ	0xFF5
   979                           postinc0	equ	0xFEE
   980                           wreg	equ	0xFE8
   981                           postdec1	equ	0xFE5
   982                           fsr1l	equ	0xFE1
   983                           
   984                           	psect	cstackBANK1
   985  000100                     __pcstackBANK1:
   986                           	opt stack 0
   987  000100                     _sortBattery$1352:
   988                           	opt stack 0
   989                           
   990                           ; 2 bytes @ 0x0
   991  000100                     	ds	2
   992  000102                     sortBattery@V_float:
   993                           	opt stack 0
   994                           
   995                           ; 3 bytes @ 0x2
   996  000102                     	ds	3
   997  000105                     sortBattery@pos_v_counter:
   998                           	opt stack 0
   999                           
  1000                           ; 2 bytes @ 0x5
  1001  000105                     	ds	2
  1002  000107                     sortBattery@signal:
  1003                           	opt stack 0
  1004                           
  1005                           ; 2 bytes @ 0x7
  1006  000107                     	ds	2
  1007  000109                     sortBattery@Vcc:
  1008                           	opt stack 0
  1009                           
  1010                           ; 3 bytes @ 0x9
  1011  000109                     	ds	3
  1012  00010C                     sortBattery@resolution:
  1013                           	opt stack 0
  1014                           
  1015                           ; 3 bytes @ 0xC
  1016  00010C                     	ds	3
  1017  00010F                     sortBattery@V_max:
  1018                           	opt stack 0
  1019                           
  1020                           ; 3 bytes @ 0xF
  1021  00010F                     	ds	3
  1022  000112                     sortBattery@i_223:
  1023                           	opt stack 0
  1024                           
  1025                           ; 2 bytes @ 0x12
  1026  000112                     	ds	2
  1027  000114                     sortBattery@targetAngle:
  1028                           	opt stack 0
  1029                           
  1030                           ; 2 bytes @ 0x14
  1031  000114                     	ds	2
  1032  000116                     sortBattery@V:
  1033                           	opt stack 0
  1034                           
  1035                           ; 3 bytes @ 0x16
  1036  000116                     	ds	3
  1037  000119                     sortBattery@i:
  1038                           	opt stack 0
  1039                           
  1040                           ; 3 bytes @ 0x19
  1041  000119                     	ds	3
  1042  00011C                     sortBattery@V_221:
  1043                           	opt stack 0
  1044                           
  1045                           ; 3 bytes @ 0x1C
  1046  00011C                     	ds	3
  1047  00011F                     ??_main:
  1048                           
  1049                           ; 1 bytes @ 0x1F
  1050  00011F                     	ds	13
  1051  00012C                     main@cylinderForward:
  1052                           	opt stack 0
  1053                           
  1054                           ; 2 bytes @ 0x2C
  1055  00012C                     	ds	2
  1056  00012E                     main@cylinderBackward:
  1057                           	opt stack 0
  1058                           
  1059                           ; 2 bytes @ 0x2E
  1060  00012E                     	ds	2
  1061  000130                     main@lastBatteryTime:
  1062                           	opt stack 0
  1063                           
  1064                           ; 2 bytes @ 0x30
  1065  000130                     	ds	2
  1066  000132                     main@cylinderStart:
  1067                           	opt stack 0
  1068                           
  1069                           ; 2 bytes @ 0x32
  1070  000132                     	ds	2
  1071  000134                     main@cylinderDur:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x34
  1075  000134                     	ds	2
  1076  000136                     main@prev:
  1077                           	opt stack 0
  1078                           
  1079                           ; 2 bytes @ 0x36
  1080  000136                     	ds	2
  1081                           tblptru	equ	0xFF8
  1082                           tblptrh	equ	0xFF7
  1083                           tblptrl	equ	0xFF6
  1084                           tablat	equ	0xFF5
  1085                           postinc0	equ	0xFEE
  1086                           wreg	equ	0xFE8
  1087                           postdec1	equ	0xFE5
  1088                           fsr1l	equ	0xFE1
  1089                           
  1090                           	psect	cstackBANK0
  1091  000080                     __pcstackBANK0:
  1092                           	opt stack 0
  1093  000080                     ??___altoft:
  1094  000080                     ??___lltoft:
  1095  000080                     ?___llmod:
  1096                           	opt stack 0
  1097  000080                     ___aldiv@counter:
  1098                           	opt stack 0
  1099  000080                     ___awdiv@counter:
  1100                           	opt stack 0
  1101  000080                     ___ftge@ff1:
  1102                           	opt stack 0
  1103  000080                     __tdiv_to_l_@quot:
  1104                           	opt stack 0
  1105  000080                     ___llmod@dividend:
  1106                           	opt stack 0
  1107                           
  1108                           ; 4 bytes @ 0x0
  1109  000080                     	ds	1
  1110  000081                     ___aldiv@sign:
  1111                           	opt stack 0
  1112  000081                     ___awdiv@sign:
  1113                           	opt stack 0
  1114                           
  1115                           ; 1 bytes @ 0x1
  1116  000081                     	ds	1
  1117  000082                     ___awdiv@quotient:
  1118                           	opt stack 0
  1119  000082                     ___aldiv@quotient:
  1120                           	opt stack 0
  1121                           
  1122                           ; 4 bytes @ 0x2
  1123  000082                     	ds	1
  1124  000083                     ___ftge@ff2:
  1125                           	opt stack 0
  1126                           
  1127                           ; 3 bytes @ 0x3
  1128  000083                     	ds	1
  1129  000084                     ?___wmul:
  1130                           	opt stack 0
  1131  000084                     ___altoft@exp:
  1132                           	opt stack 0
  1133  000084                     __tdiv_to_l_@cntr:
  1134                           	opt stack 0
  1135  000084                     ___wmul@multiplier:
  1136                           	opt stack 0
  1137  000084                     ___llmod@divisor:
  1138                           	opt stack 0
  1139                           
  1140                           ; 4 bytes @ 0x4
  1141  000084                     	ds	1
  1142  000085                     ___altoft@sign:
  1143                           	opt stack 0
  1144  000085                     __tdiv_to_l_@exp1:
  1145                           	opt stack 0
  1146                           
  1147                           ; 1 bytes @ 0x5
  1148  000085                     	ds	1
  1149  000086                     ??___ftge:
  1150  000086                     ?___ftdiv:
  1151                           	opt stack 0
  1152  000086                     ?___almod:
  1153                           	opt stack 0
  1154  000086                     ___wmul@multiplicand:
  1155                           	opt stack 0
  1156  000086                     ___ftdiv@f1:
  1157                           	opt stack 0
  1158  000086                     ___almod@dividend:
  1159                           	opt stack 0
  1160                           
  1161                           ; 4 bytes @ 0x6
  1162  000086                     	ds	2
  1163  000088                     ___llmod@counter:
  1164                           	opt stack 0
  1165                           
  1166                           ; 1 bytes @ 0x8
  1167  000088                     	ds	1
  1168  000089                     ___ftdiv@f2:
  1169                           	opt stack 0
  1170                           
  1171                           ; 3 bytes @ 0x9
  1172  000089                     	ds	1
  1173  00008A                     ___almod@divisor:
  1174                           	opt stack 0
  1175                           
  1176                           ; 4 bytes @ 0xA
  1177  00008A                     	ds	2
  1178  00008C                     ??___ftdiv:
  1179                           
  1180                           ; 1 bytes @ 0xC
  1181  00008C                     	ds	3
  1182  00008F                     ___ftdiv@cntr:
  1183                           	opt stack 0
  1184                           
  1185                           ; 1 bytes @ 0xF
  1186  00008F                     	ds	1
  1187  000090                     ___ftdiv@f3:
  1188                           	opt stack 0
  1189                           
  1190                           ; 3 bytes @ 0x10
  1191  000090                     	ds	3
  1192  000093                     ___ftdiv@exp:
  1193                           	opt stack 0
  1194                           
  1195                           ; 1 bytes @ 0x13
  1196  000093                     	ds	1
  1197  000094                     ___ftdiv@sign:
  1198                           	opt stack 0
  1199                           
  1200                           ; 1 bytes @ 0x14
  1201  000094                     	ds	1
  1202  000095                     ?___ftmul:
  1203                           	opt stack 0
  1204  000095                     ___ftmul@f1:
  1205                           	opt stack 0
  1206                           
  1207                           ; 3 bytes @ 0x15
  1208  000095                     	ds	3
  1209  000098                     ___ftmul@f2:
  1210                           	opt stack 0
  1211                           
  1212                           ; 3 bytes @ 0x18
  1213  000098                     	ds	3
  1214  00009B                     ??___ftmul:
  1215                           
  1216                           ; 1 bytes @ 0x1B
  1217  00009B                     	ds	3
  1218  00009E                     ___ftmul@exp:
  1219                           	opt stack 0
  1220                           
  1221                           ; 1 bytes @ 0x1E
  1222  00009E                     	ds	1
  1223  00009F                     ___ftmul@f3_as_product:
  1224                           	opt stack 0
  1225                           
  1226                           ; 3 bytes @ 0x1F
  1227  00009F                     	ds	3
  1228  0000A2                     ___ftmul@cntr:
  1229                           	opt stack 0
  1230                           
  1231                           ; 1 bytes @ 0x22
  1232  0000A2                     	ds	1
  1233  0000A3                     ___ftmul@sign:
  1234                           	opt stack 0
  1235                           
  1236                           ; 1 bytes @ 0x23
  1237  0000A3                     	ds	1
  1238  0000A4                     ?_fround:
  1239                           	opt stack 0
  1240  0000A4                     ?_scale:
  1241                           	opt stack 0
  1242                           
  1243                           ; 3 bytes @ 0x24
  1244  0000A4                     	ds	3
  1245  0000A7                     _fround$1355:
  1246                           	opt stack 0
  1247  0000A7                     _scale$1356:
  1248                           	opt stack 0
  1249                           
  1250                           ; 3 bytes @ 0x27
  1251  0000A7                     	ds	3
  1252  0000AA                     scale@scl:
  1253                           	opt stack 0
  1254  0000AA                     _fround$1354:
  1255                           	opt stack 0
  1256                           
  1257                           ; 3 bytes @ 0x2A
  1258  0000AA                     	ds	3
  1259  0000AD                     fround@prec:
  1260                           	opt stack 0
  1261                           
  1262                           ; 1 bytes @ 0x2D
  1263  0000AD                     	ds	1
  1264  0000AE                     ?___ftadd:
  1265                           	opt stack 0
  1266  0000AE                     ___ftadd@f1:
  1267                           	opt stack 0
  1268                           
  1269                           ; 3 bytes @ 0x2E
  1270  0000AE                     	ds	3
  1271  0000B1                     ___ftadd@f2:
  1272                           	opt stack 0
  1273                           
  1274                           ; 3 bytes @ 0x31
  1275  0000B1                     	ds	3
  1276  0000B4                     ??___ftadd:
  1277                           
  1278                           ; 1 bytes @ 0x34
  1279  0000B4                     	ds	3
  1280  0000B7                     ___ftadd@sign:
  1281                           	opt stack 0
  1282                           
  1283                           ; 1 bytes @ 0x37
  1284  0000B7                     	ds	1
  1285  0000B8                     ___ftadd@exp2:
  1286                           	opt stack 0
  1287                           
  1288                           ; 1 bytes @ 0x38
  1289  0000B8                     	ds	1
  1290  0000B9                     ___ftadd@exp1:
  1291                           	opt stack 0
  1292                           
  1293                           ; 1 bytes @ 0x39
  1294  0000B9                     	ds	1
  1295  0000BA                     ?___ftsub:
  1296                           	opt stack 0
  1297  0000BA                     ?___fttol:
  1298                           	opt stack 0
  1299  0000BA                     ___ftsub@f1:
  1300                           	opt stack 0
  1301  0000BA                     ___fttol@f1:
  1302                           	opt stack 0
  1303                           
  1304                           ; 3 bytes @ 0x3A
  1305  0000BA                     	ds	3
  1306  0000BD                     ___ftsub@f2:
  1307                           	opt stack 0
  1308                           
  1309                           ; 3 bytes @ 0x3D
  1310  0000BD                     	ds	1
  1311  0000BE                     ??___fttol:
  1312                           
  1313                           ; 1 bytes @ 0x3E
  1314  0000BE                     	ds	5
  1315  0000C3                     ___fttol@sign1:
  1316                           	opt stack 0
  1317                           
  1318                           ; 1 bytes @ 0x43
  1319  0000C3                     	ds	1
  1320  0000C4                     ___fttol@lval:
  1321                           	opt stack 0
  1322                           
  1323                           ; 4 bytes @ 0x44
  1324  0000C4                     	ds	4
  1325  0000C8                     ___fttol@exp1:
  1326                           	opt stack 0
  1327                           
  1328                           ; 1 bytes @ 0x48
  1329  0000C8                     	ds	1
  1330  0000C9                     ?_printf:
  1331                           	opt stack 0
  1332  0000C9                     ?_angleToPulse:
  1333                           	opt stack 0
  1334  0000C9                     angleToPulse@angle:
  1335                           	opt stack 0
  1336  0000C9                     printf@f:
  1337                           	opt stack 0
  1338                           
  1339                           ; 2 bytes @ 0x49
  1340  0000C9                     	ds	4
  1341  0000CD                     ??_angleToPulse:
  1342                           
  1343                           ; 1 bytes @ 0x4D
  1344  0000CD                     	ds	4
  1345  0000D1                     angleToPulse@offset:
  1346                           	opt stack 0
  1347                           
  1348                           ; 4 bytes @ 0x51
  1349  0000D1                     	ds	2
  1350  0000D3                     ??_printf:
  1351                           
  1352                           ; 1 bytes @ 0x53
  1353  0000D3                     	ds	2
  1354  0000D5                     angleToPulse@a180:
  1355                           	opt stack 0
  1356                           
  1357                           ; 4 bytes @ 0x55
  1358  0000D5                     	ds	4
  1359  0000D9                     _angleToPulse$1353:
  1360                           	opt stack 0
  1361  0000D9                     _printf$1357:
  1362                           	opt stack 0
  1363                           
  1364                           ; 3 bytes @ 0x59
  1365  0000D9                     	ds	3
  1366  0000DC                     printf@idx:
  1367                           	opt stack 0
  1368  0000DC                     angleToPulse@a000:
  1369                           	opt stack 0
  1370                           
  1371                           ; 4 bytes @ 0x5C
  1372  0000DC                     	ds	1
  1373  0000DD                     printf@cp:
  1374                           	opt stack 0
  1375                           
  1376                           ; 2 bytes @ 0x5D
  1377  0000DD                     	ds	2
  1378  0000DF                     printf@len:
  1379                           	opt stack 0
  1380                           
  1381                           ; 2 bytes @ 0x5F
  1382  0000DF                     	ds	1
  1383  0000E0                     setAngle@motor:
  1384                           	opt stack 0
  1385                           
  1386                           ; 2 bytes @ 0x60
  1387  0000E0                     	ds	1
  1388  0000E1                     printf@ap:
  1389                           	opt stack 0
  1390                           
  1391                           ; 2 bytes @ 0x61
  1392  0000E1                     	ds	1
  1393  0000E2                     setAngle@angle:
  1394                           	opt stack 0
  1395                           
  1396                           ; 2 bytes @ 0x62
  1397  0000E2                     	ds	1
  1398  0000E3                     printf@tmpval:
  1399                           	opt stack 0
  1400                           
  1401                           ; 4 bytes @ 0x63
  1402  0000E3                     	ds	1
  1403  0000E4                     ??_setAngle:
  1404                           
  1405                           ; 1 bytes @ 0x64
  1406  0000E4                     	ds	2
  1407  0000E6                     setAngle@period:
  1408                           	opt stack 0
  1409                           
  1410                           ; 2 bytes @ 0x66
  1411  0000E6                     	ds	1
  1412  0000E7                     printf@exp:
  1413                           	opt stack 0
  1414                           
  1415                           ; 2 bytes @ 0x67
  1416  0000E7                     	ds	1
  1417  0000E8                     setAngle@i:
  1418                           	opt stack 0
  1419                           
  1420                           ; 2 bytes @ 0x68
  1421  0000E8                     	ds	1
  1422  0000E9                     printf@fval:
  1423                           	opt stack 0
  1424                           
  1425                           ; 3 bytes @ 0x69
  1426  0000E9                     	ds	1
  1427  0000EA                     initServo@motor:
  1428                           	opt stack 0
  1429                           
  1430                           ; 2 bytes @ 0x6A
  1431  0000EA                     	ds	2
  1432  0000EC                     initServo@angle:
  1433                           	opt stack 0
  1434  0000EC                     printf@val:
  1435                           	opt stack 0
  1436                           
  1437                           ; 4 bytes @ 0x6C
  1438  0000EC                     	ds	2
  1439  0000EE                     ??_initServo:
  1440                           
  1441                           ; 1 bytes @ 0x6E
  1442  0000EE                     	ds	2
  1443  0000F0                     printf@width:
  1444                           	opt stack 0
  1445                           
  1446                           ; 2 bytes @ 0x70
  1447  0000F0                     	ds	2
  1448  0000F2                     initServo@i:
  1449                           	opt stack 0
  1450  0000F2                     printf@flag:
  1451                           	opt stack 0
  1452                           
  1453                           ; 2 bytes @ 0x72
  1454  0000F2                     	ds	2
  1455  0000F4                     printf@prec:
  1456                           	opt stack 0
  1457                           
  1458                           ; 2 bytes @ 0x74
  1459  0000F4                     	ds	2
  1460  0000F6                     printf@c:
  1461                           	opt stack 0
  1462                           
  1463                           ; 1 bytes @ 0x76
  1464  0000F6                     	ds	1
  1465  0000F7                     ??_sortBattery:
  1466  0000F7                     runMenu@key:
  1467                           	opt stack 0
  1468                           
  1469                           ; 1 bytes @ 0x77
  1470  0000F7                     	ds	1
  1471  0000F8                     showInterface@key:
  1472                           	opt stack 0
  1473                           
  1474                           ; 1 bytes @ 0x78
  1475  0000F8                     	ds	1
  1476                           tblptru	equ	0xFF8
  1477                           tblptrh	equ	0xFF7
  1478                           tblptrl	equ	0xFF6
  1479                           tablat	equ	0xFF5
  1480                           postinc0	equ	0xFEE
  1481                           wreg	equ	0xFE8
  1482                           postdec1	equ	0xFE5
  1483                           fsr1l	equ	0xFE1
  1484                           
  1485                           	psect	cstackCOMRAM
  1486  000001                     __pcstackCOMRAM:
  1487                           	opt stack 0
  1488  000001                     ?i2___awmod:
  1489                           	opt stack 0
  1490  000001                     i2___awmod@dividend:
  1491                           	opt stack 0
  1492                           
  1493                           ; 2 bytes @ 0x0
  1494  000001                     	ds	2
  1495  000003                     i2___awmod@divisor:
  1496                           	opt stack 0
  1497                           
  1498                           ; 2 bytes @ 0x2
  1499  000003                     	ds	2
  1500  000005                     i2___awmod@counter:
  1501                           	opt stack 0
  1502                           
  1503                           ; 1 bytes @ 0x4
  1504  000005                     	ds	1
  1505  000006                     i2___awmod@sign:
  1506                           	opt stack 0
  1507                           
  1508                           ; 1 bytes @ 0x5
  1509  000006                     	ds	1
  1510  000007                     i2digitalWrite@pin:
  1511                           	opt stack 0
  1512  000007                     i2startTimer@timer:
  1513                           	opt stack 0
  1514                           
  1515                           ; 2 bytes @ 0x6
  1516  000007                     	ds	2
  1517  000009                     i2digitalWrite@val:
  1518                           	opt stack 0
  1519  000009                     i2startTimer@val:
  1520                           	opt stack 0
  1521                           
  1522                           ; 4 bytes @ 0x8
  1523  000009                     	ds	2
  1524  00000B                     ??i2_digitalWrite:
  1525                           
  1526                           ; 1 bytes @ 0xA
  1527  00000B                     	ds	2
  1528  00000D                     ??i2_startTimer:
  1529                           
  1530                           ; 1 bytes @ 0xC
  1531  00000D                     	ds	1
  1532  00000E                     i2digitalWrite@p:
  1533                           	opt stack 0
  1534                           
  1535                           ; 2 bytes @ 0xD
  1536  00000E                     	ds	2
  1537  000010                     ??_servoInterruptService:
  1538                           
  1539                           ; 1 bytes @ 0xF
  1540  000010                     	ds	4
  1541  000014                     ??_service:
  1542                           
  1543                           ; 1 bytes @ 0x13
  1544  000014                     	ds	18
  1545  000026                     service@key:
  1546                           	opt stack 0
  1547                           
  1548                           ; 1 bytes @ 0x25
  1549  000026                     	ds	1
  1550  000027                     ??_isdigit:
  1551  000027                     ?_digitalRead:
  1552                           	opt stack 0
  1553  000027                     ?___awmod:
  1554                           	opt stack 0
  1555  000027                     ?___ftpack:
  1556                           	opt stack 0
  1557  000027                     ?___ftneg:
  1558                           	opt stack 0
  1559  000027                     ?_analogRead:
  1560                           	opt stack 0
  1561  000027                     ?__tdiv_to_l_:
  1562                           	opt stack 0
  1563  000027                     ?__div_to_l_:
  1564                           	opt stack 0
  1565  000027                     ?___aldiv:
  1566                           	opt stack 0
  1567  000027                     ?___lldiv:
  1568                           	opt stack 0
  1569  000027                     lcdNibble@temp:
  1570                           	opt stack 0
  1571  000027                     readKeypad@key:
  1572                           	opt stack 0
  1573  000027                     digitalRead@pin:
  1574                           	opt stack 0
  1575  000027                     digitalWrite@pin:
  1576                           	opt stack 0
  1577  000027                     analogRead@channel:
  1578                           	opt stack 0
  1579  000027                     initTimer@timer:
  1580                           	opt stack 0
  1581  000027                     startTimer@timer:
  1582                           	opt stack 0
  1583  000027                     ___awmod@dividend:
  1584                           	opt stack 0
  1585  000027                     __div_to_l_@f1:
  1586                           	opt stack 0
  1587  000027                     ___ftpack@arg:
  1588                           	opt stack 0
  1589  000027                     __tdiv_to_l_@f1:
  1590                           	opt stack 0
  1591  000027                     ___ftneg@f1:
  1592                           	opt stack 0
  1593  000027                     ___aldiv@dividend:
  1594                           	opt stack 0
  1595  000027                     ___lldiv@dividend:
  1596                           	opt stack 0
  1597                           
  1598                           ; 4 bytes @ 0x26
  1599  000027                     	ds	1
  1600  000028                     lcdNibble@data:
  1601                           	opt stack 0
  1602  000028                     _isdigit$980:
  1603                           	opt stack 0
  1604                           
  1605                           ; 1 bytes @ 0x27
  1606  000028                     	ds	1
  1607  000029                     ??_initTimer:
  1608  000029                     ??_digitalRead:
  1609  000029                     ??_lcdInst:
  1610  000029                     isdigit@c:
  1611                           	opt stack 0
  1612  000029                     digitalWrite@val:
  1613                           	opt stack 0
  1614  000029                     ___awmod@divisor:
  1615                           	opt stack 0
  1616  000029                     startTimer@val:
  1617                           	opt stack 0
  1618                           
  1619                           ; 4 bytes @ 0x28
  1620  000029                     	ds	1
  1621  00002A                     lcdInst@data:
  1622                           	opt stack 0
  1623  00002A                     ___ftpack@exp:
  1624                           	opt stack 0
  1625  00002A                     __div_to_l_@f2:
  1626                           	opt stack 0
  1627  00002A                     __tdiv_to_l_@f2:
  1628                           	opt stack 0
  1629                           
  1630                           ; 3 bytes @ 0x29
  1631  00002A                     	ds	1
  1632  00002B                     ??_initLCD:
  1633  00002B                     ??_digitalWrite:
  1634  00002B                     ??_analogRead:
  1635  00002B                     putch@data:
  1636                           	opt stack 0
  1637  00002B                     ___awmod@counter:
  1638                           	opt stack 0
  1639  00002B                     ___ftpack@sign:
  1640                           	opt stack 0
  1641  00002B                     ___aldiv@divisor:
  1642                           	opt stack 0
  1643  00002B                     ___lldiv@divisor:
  1644                           	opt stack 0
  1645                           
  1646                           ; 4 bytes @ 0x2A
  1647  00002B                     	ds	1
  1648  00002C                     ??___ftpack:
  1649  00002C                     ___awmod@sign:
  1650                           	opt stack 0
  1651                           
  1652                           ; 1 bytes @ 0x2B
  1653  00002C                     	ds	1
  1654  00002D                     ??_startTimer:
  1655  00002D                     ??__tdiv_to_l_:
  1656  00002D                     ?___awdiv:
  1657                           	opt stack 0
  1658  00002D                     ___awdiv@dividend:
  1659                           	opt stack 0
  1660  00002D                     __div_to_l_@quot:
  1661                           	opt stack 0
  1662                           
  1663                           ; 4 bytes @ 0x2C
  1664  00002D                     	ds	1
  1665  00002E                     digitalWrite@p:
  1666                           	opt stack 0
  1667                           
  1668                           ; 2 bytes @ 0x2D
  1669  00002E                     	ds	1
  1670  00002F                     ?___altoft:
  1671                           	opt stack 0
  1672  00002F                     ?___awtoft:
  1673                           	opt stack 0
  1674  00002F                     ?___lltoft:
  1675                           	opt stack 0
  1676  00002F                     ___almod@counter:
  1677                           	opt stack 0
  1678  00002F                     ___awdiv@divisor:
  1679                           	opt stack 0
  1680  00002F                     ___awtoft@c:
  1681                           	opt stack 0
  1682  00002F                     ___altoft@c:
  1683                           	opt stack 0
  1684  00002F                     ___lldiv@quotient:
  1685                           	opt stack 0
  1686  00002F                     ___lltoft@c:
  1687                           	opt stack 0
  1688                           
  1689                           ; 4 bytes @ 0x2E
  1690  00002F                     	ds	1
  1691  000030                     ___almod@sign:
  1692                           	opt stack 0
  1693                           
  1694                           ; 1 bytes @ 0x2F
  1695  000030                     	ds	1
  1696  000031                     __div_to_l_@cntr:
  1697                           	opt stack 0
  1698  000031                     ___wmul@product:
  1699                           	opt stack 0
  1700                           
  1701                           ; 2 bytes @ 0x30
  1702  000031                     	ds	1
  1703  000032                     ___awtoft@sign:
  1704                           	opt stack 0
  1705  000032                     __div_to_l_@exp1:
  1706                           	opt stack 0
  1707                           
  1708                           ; 1 bytes @ 0x31
  1709  000032                     	ds	1
  1710  000033                     ___lldiv@counter:
  1711                           	opt stack 0
  1712  000033                     ___lltoft@exp:
  1713                           	opt stack 0
  1714                           
  1715                           ; 1 bytes @ 0x32
  1716  000033                     	ds	1
  1717  000034                     tblptru	equ	0xFF8
  1718                           tblptrh	equ	0xFF7
  1719                           tblptrl	equ	0xFF6
  1720                           tablat	equ	0xFF5
  1721                           postinc0	equ	0xFEE
  1722                           wreg	equ	0xFE8
  1723                           postdec1	equ	0xFE5
  1724                           fsr1l	equ	0xFE1
  1725                           
  1726                           ; 1 bytes @ 0x33
  1727 ;;
  1728 ;;Main: autosize = 0, tempsize = 13, incstack = 0, save=0
  1729 ;;
  1730 ;; *************** function _main *****************
  1731 ;; Defined at:
  1732 ;;		line 113 in file "main.c"
  1733 ;; Parameters:    Size  Location     Type
  1734 ;;		None
  1735 ;; Auto vars:     Size  Location     Type
  1736 ;;  prev            2   54[BANK1 ] int 
  1737 ;;  cylinderDur     2   52[BANK1 ] int 
  1738 ;;  cylinderStar    2   50[BANK1 ] int 
  1739 ;;  lastBatteryT    2   48[BANK1 ] int 
  1740 ;;  cylinderBack    2   46[BANK1 ] int 
  1741 ;;  cylinderForw    2   44[BANK1 ] int 
  1742 ;; Return value:  Size  Location     Type
  1743 ;;                  1    wreg      void 
  1744 ;; Registers used:
  1745 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1746 ;; Tracked objects:
  1747 ;;		On entry : 0/0
  1748 ;;		On exit  : 0/0
  1749 ;;		Unchanged: 0/0
  1750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1752 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1753 ;;      Temps:          0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1754 ;;      Totals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1755 ;;Total ram usage:       25 bytes
  1756 ;; Hardware stack levels required when called:   10
  1757 ;; This function calls:
  1758 ;;		___aldiv
  1759 ;;		___almod
  1760 ;;		_debug
  1761 ;;		_digitalRead
  1762 ;;		_digitalWrite
  1763 ;;		_initLCD
  1764 ;;		_initServo
  1765 ;;		_initTimer
  1766 ;;		_lcdClear
  1767 ;;		_lcdHome
  1768 ;;		_pinSetup
  1769 ;;		_printf
  1770 ;;		_readKeypad
  1771 ;;		_showInterface
  1772 ;;		_sortBattery
  1773 ;;		_startTimer
  1774 ;; This function is called by:
  1775 ;;		Startup code after reset
  1776 ;; This function uses a non-reentrant model
  1777 ;;
  1778                           
  1779                           	psect	text0
  1780  0017A0                     __ptext0:
  1781                           	opt stack 0
  1782  0017A0                     _main:
  1783                           	opt stack 21
  1784                           
  1785                           ;main.c: 115: debug();
  1786                           
  1787                           ;incstack = 0
  1788  0017A0  EC3D  F01C         	call	_debug	;wreg free
  1789                           
  1790                           ;main.c: 117: pinSetup();
  1791  0017A4  EC1D  F01C         	call	_pinSetup	;wreg free
  1792                           
  1793                           ;main.c: 118: initLCD();
  1794  0017A8  ECFA  F01B         	call	_initLCD	;wreg free
  1795  0017AC                     l137:
  1796                           
  1797                           ;main.c: 121: showInterface();
  1798  0017AC  EC03  F014         	call	_showInterface	;wreg free
  1799                           
  1800                           ;main.c: 126: time = 0;
  1801  0017B0  0E00               	movlw	0
  1802  0017B2  6E34               	movwf	_time,c
  1803  0017B4  0E00               	movlw	0
  1804  0017B6  6E35               	movwf	_time+1,c
  1805  0017B8  0E00               	movlw	0
  1806  0017BA  6E36               	movwf	_time+2,c
  1807  0017BC  0E00               	movlw	0
  1808  0017BE  6E37               	movwf	_time+3,c
  1809                           
  1810                           ;main.c: 127: initTimer(1);
  1811  0017C0  0E00               	movlw	0
  1812  0017C2  6E28               	movwf	initTimer@timer+1,c
  1813  0017C4  0E01               	movlw	1
  1814  0017C6  6E27               	movwf	initTimer@timer,c
  1815  0017C8  ECD5  F01B         	call	_initTimer	;wreg free
  1816                           
  1817                           ;main.c: 128: startTimer(1,0);
  1818  0017CC  0E00               	movlw	0
  1819  0017CE  6E28               	movwf	startTimer@timer+1,c
  1820  0017D0  0E01               	movlw	1
  1821  0017D2  6E27               	movwf	startTimer@timer,c
  1822  0017D4  0E00               	movlw	0
  1823  0017D6  6E29               	movwf	startTimer@val,c
  1824  0017D8  0E00               	movlw	0
  1825  0017DA  6E2A               	movwf	startTimer@val+1,c
  1826  0017DC  0E00               	movlw	0
  1827  0017DE  6E2B               	movwf	startTimer@val+2,c
  1828  0017E0  0E00               	movlw	0
  1829  0017E2  6E2C               	movwf	startTimer@val+3,c
  1830  0017E4  EC89  F01B         	call	_startTimer	;wreg free
  1831                           
  1832                           ;main.c: 131: digitalWrite(cylinderMotor, 1);
  1833  0017E8  0E55               	movlw	low _cylinderMotor
  1834  0017EA  6E27               	movwf	digitalWrite@pin,c
  1835  0017EC  0E01               	movlw	high _cylinderMotor
  1836  0017EE  6E28               	movwf	digitalWrite@pin+1,c
  1837  0017F0  0E00               	movlw	0
  1838  0017F2  6E2A               	movwf	digitalWrite@val+1,c
  1839  0017F4  0E01               	movlw	1
  1840  0017F6  6E29               	movwf	digitalWrite@val,c
  1841  0017F8  ECB0  F017         	call	_digitalWrite	;wreg free
  1842                           
  1843                           ;main.c: 132: initServo(conveyorServo, 130);
  1844  0017FC  0E4D               	movlw	low _conveyorServo
  1845  0017FE  0100               	movlb	0	; () banked
  1846  001800  6FEA               	movwf	initServo@motor& (0+255),b
  1847  001802  0E01               	movlw	high _conveyorServo
  1848  001804  0100               	movlb	0	; () banked
  1849  001806  6FEB               	movwf	(initServo@motor+1)& (0+255),b
  1850  001808  0E00               	movlw	0
  1851  00180A  0100               	movlb	0	; () banked
  1852  00180C  6FED               	movwf	(initServo@angle+1)& (0+255),b
  1853  00180E  0E82               	movlw	130
  1854  001810  6FEC               	movwf	initServo@angle& (0+255),b
  1855  001812  ECDC  F016         	call	_initServo	;wreg free
  1856                           
  1857                           ;main.c: 133: initServo(padServo, padAngle_NEUTRAL);
  1858  001816  0E55               	movlw	low _padServo
  1859  001818  0100               	movlb	0	; () banked
  1860  00181A  6FEA               	movwf	initServo@motor& (0+255),b
  1861  00181C  0E00               	movlw	high _padServo
  1862  00181E  0100               	movlb	0	; () banked
  1863  001820  6FEB               	movwf	(initServo@motor+1)& (0+255),b
  1864  001822  C04B  F0EC         	movff	_padAngle_NEUTRAL,initServo@angle
  1865  001826  C04C  F0ED         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  1866  00182A  ECDC  F016         	call	_initServo	;wreg free
  1867                           
  1868                           ;main.c: 134: initServo(redirectingServo, redirectAngle_AA);
  1869  00182E  0E61               	movlw	low _redirectingServo
  1870  001830  0100               	movlb	0	; () banked
  1871  001832  6FEA               	movwf	initServo@motor& (0+255),b
  1872  001834  0E01               	movlw	high _redirectingServo
  1873  001836  0100               	movlb	0	; () banked
  1874  001838  6FEB               	movwf	(initServo@motor+1)& (0+255),b
  1875  00183A  C04D  F0EC         	movff	_redirectAngle_AA,initServo@angle
  1876  00183E  C04E  F0ED         	movff	_redirectAngle_AA+1,initServo@angle+1
  1877  001842  ECDC  F016         	call	_initServo	;wreg free
  1878  001846                     l7152:
  1879                           
  1880                           ;main.c: 138: lcdClear();
  1881  001846  EC9E  F01D         	call	_lcdClear	;wreg free
  1882                           
  1883                           ;main.c: 139: printf("running");
  1884  00184A  0EF6               	movlw	low STR_1
  1885  00184C  0100               	movlb	0	; () banked
  1886  00184E  6FC9               	movwf	printf@f& (0+255),b
  1887  001850  0EFF               	movlw	high STR_1
  1888  001852  0100               	movlb	0	; () banked
  1889  001854  6FCA               	movwf	(printf@f+1)& (0+255),b
  1890  001856  EC09  F000         	call	_printf	;wreg free
  1891                           
  1892                           ;main.c: 141: int lastBatteryTime = time;
  1893  00185A  C034  F130         	movff	_time,main@lastBatteryTime
  1894  00185E  C035  F131         	movff	_time+1,main@lastBatteryTime+1
  1895                           
  1896                           ;main.c: 143: int cylinderStart = time;
  1897  001862  C034  F132         	movff	_time,main@cylinderStart
  1898  001866  C035  F133         	movff	_time+1,main@cylinderStart+1
  1899                           
  1900                           ;main.c: 144: int cylinderDur = 0;
  1901  00186A  0E00               	movlw	0
  1902  00186C  0101               	movlb	1	; () banked
  1903  00186E  6F35               	movwf	(main@cylinderDur+1)& (0+255),b
  1904  001870  0E00               	movlw	0
  1905  001872  6F34               	movwf	main@cylinderDur& (0+255),b
  1906                           
  1907                           ; BSR set to: 1
  1908                           ;main.c: 145: int cylinderForward = 10;
  1909  001874  0E00               	movlw	0
  1910  001876  0101               	movlb	1	; () banked
  1911  001878  6F2D               	movwf	(main@cylinderForward+1)& (0+255),b
  1912  00187A  0E0A               	movlw	10
  1913  00187C  6F2C               	movwf	main@cylinderForward& (0+255),b
  1914                           
  1915                           ; BSR set to: 1
  1916                           ;main.c: 146: int cylinderBackward = 10;
  1917  00187E  0E00               	movlw	0
  1918  001880  0101               	movlb	1	; () banked
  1919  001882  6F2F               	movwf	(main@cylinderBackward+1)& (0+255),b
  1920  001884  0E0A               	movlw	10
  1921  001886  6F2E               	movwf	main@cylinderBackward& (0+255),b
  1922                           
  1923                           ;main.c: 148: while(!batteryDetected && !terminate){
  1924  001888  D116               	goto	l7184
  1925  00188A                     l7166:
  1926                           
  1927                           ; BSR set to: 1
  1928                           ;main.c: 150: lcdHome();
  1929  00188A  ECA2  F01D         	call	_lcdHome	;wreg free
  1930                           
  1931                           ;main.c: 151: printf("time %02ld:%02ld",time/600,(time/10)%60);
  1932  00188E  0EC0               	movlw	low STR_2
  1933  001890  0100               	movlb	0	; () banked
  1934  001892  6FC9               	movwf	printf@f& (0+255),b
  1935  001894  0EFF               	movlw	high STR_2
  1936  001896  0100               	movlb	0	; () banked
  1937  001898  6FCA               	movwf	(printf@f+1)& (0+255),b
  1938  00189A  C034  F027         	movff	_time,___aldiv@dividend
  1939  00189E  C035  F028         	movff	_time+1,___aldiv@dividend+1
  1940  0018A2  C036  F029         	movff	_time+2,___aldiv@dividend+2
  1941  0018A6  C037  F02A         	movff	_time+3,___aldiv@dividend+3
  1942  0018AA  0E58               	movlw	88
  1943  0018AC  6E2B               	movwf	___aldiv@divisor,c
  1944  0018AE  0E02               	movlw	2
  1945  0018B0  6E2C               	movwf	___aldiv@divisor+1,c
  1946  0018B2  0E00               	movlw	0
  1947  0018B4  6E2D               	movwf	___aldiv@divisor+2,c
  1948  0018B6  0E00               	movlw	0
  1949  0018B8  6E2E               	movwf	___aldiv@divisor+3,c
  1950  0018BA  EC6A  F016         	call	___aldiv	;wreg free
  1951  0018BE  C027  F0CB         	movff	?___aldiv,?_printf+2
  1952  0018C2  C028  F0CC         	movff	?___aldiv+1,?_printf+3
  1953  0018C6  C029  F0CD         	movff	?___aldiv+2,?_printf+4
  1954  0018CA  C02A  F0CE         	movff	?___aldiv+3,?_printf+5
  1955  0018CE  0E0A               	movlw	10
  1956  0018D0  6E2B               	movwf	___aldiv@divisor,c
  1957  0018D2  0E00               	movlw	0
  1958  0018D4  6E2C               	movwf	___aldiv@divisor+1,c
  1959  0018D6  0E00               	movlw	0
  1960  0018D8  6E2D               	movwf	___aldiv@divisor+2,c
  1961  0018DA  0E00               	movlw	0
  1962  0018DC  6E2E               	movwf	___aldiv@divisor+3,c
  1963  0018DE  C034  F027         	movff	_time,___aldiv@dividend
  1964  0018E2  C035  F028         	movff	_time+1,___aldiv@dividend+1
  1965  0018E6  C036  F029         	movff	_time+2,___aldiv@dividend+2
  1966  0018EA  C037  F02A         	movff	_time+3,___aldiv@dividend+3
  1967  0018EE  EC6A  F016         	call	___aldiv	;wreg free
  1968  0018F2  C027  F086         	movff	?___aldiv,___almod@dividend
  1969  0018F6  C028  F087         	movff	?___aldiv+1,___almod@dividend+1
  1970  0018FA  C029  F088         	movff	?___aldiv+2,___almod@dividend+2
  1971  0018FE  C02A  F089         	movff	?___aldiv+3,___almod@dividend+3
  1972  001902  0E3C               	movlw	60
  1973  001904  0100               	movlb	0	; () banked
  1974  001906  6F8A               	movwf	___almod@divisor& (0+255),b
  1975  001908  0E00               	movlw	0
  1976  00190A  6F8B               	movwf	(___almod@divisor+1)& (0+255),b
  1977  00190C  0E00               	movlw	0
  1978  00190E  6F8C               	movwf	(___almod@divisor+2)& (0+255),b
  1979  001910  0E00               	movlw	0
  1980  001912  6F8D               	movwf	(___almod@divisor+3)& (0+255),b
  1981  001914  ECF8  F015         	call	___almod	;wreg free
  1982  001918  C086  F0CF         	movff	?___almod,?_printf+6
  1983  00191C  C087  F0D0         	movff	?___almod+1,?_printf+7
  1984  001920  C088  F0D1         	movff	?___almod+2,?_printf+8
  1985  001924  C089  F0D2         	movff	?___almod+3,?_printf+9
  1986  001928  EC09  F000         	call	_printf	;wreg free
  1987                           
  1988                           ;main.c: 152: _delay((unsigned long)((77)*(10000000/4000.0)));
  1989  00192C  0EFA               	movlw	250
  1990  00192E  0101               	movlb	1	; () banked
  1991  001930  6F1F               	movwf	??_main& (0+255),b
  1992  001932  0EFF               	movlw	255
  1993  001934                     u7747:
  1994  001934  2EE8               	decfsz	wreg,f,c
  1995  001936  D7FE               	bra	u7747
  1996  001938  2F1F               	decfsz	??_main& (0+255),f,b
  1997  00193A  D7FC               	bra	u7747
  1998                           
  1999                           ;main.c: 155: if(time - cylinderStart >= cylinderDur)
  2000  00193C  C134  F11F         	movff	main@cylinderDur,??_main
  2001  001940  C135  F120         	movff	main@cylinderDur+1,??_main+1
  2002  001944  0E00               	movlw	0
  2003  001946  0101               	movlb	1	; () banked
  2004  001948  BF20               	btfsc	(??_main+1)& (0+255),7,b
  2005  00194A  0EFF               	movlw	255
  2006  00194C  6F21               	movwf	(??_main+2)& (0+255),b
  2007  00194E  6F22               	movwf	(??_main+3)& (0+255),b
  2008  001950  C132  F123         	movff	main@cylinderStart,??_main+4
  2009  001954  C133  F124         	movff	main@cylinderStart+1,??_main+5
  2010  001958  0E00               	movlw	0
  2011  00195A  0101               	movlb	1	; () banked
  2012  00195C  BF24               	btfsc	(??_main+5)& (0+255),7,b
  2013  00195E  0EFF               	movlw	255
  2014  001960  6F25               	movwf	(??_main+6)& (0+255),b
  2015  001962  6F26               	movwf	(??_main+7)& (0+255),b
  2016  001964  0101               	movlb	1	; () banked
  2017  001966  1F23               	comf	(??_main+4)& (0+255),f,b
  2018  001968  1F24               	comf	(??_main+5)& (0+255),f,b
  2019  00196A  1F25               	comf	(??_main+6)& (0+255),f,b
  2020  00196C  1F26               	comf	(??_main+7)& (0+255),f,b
  2021  00196E  2B23               	incf	(??_main+4)& (0+255),f,b
  2022  001970  0E00               	movlw	0
  2023  001972  2324               	addwfc	(??_main+5)& (0+255),f,b
  2024  001974  2325               	addwfc	(??_main+6)& (0+255),f,b
  2025  001976  2326               	addwfc	(??_main+7)& (0+255),f,b
  2026  001978  5034               	movf	_time,w,c
  2027  00197A  0101               	movlb	1	; () banked
  2028  00197C  2523               	addwf	(??_main+4)& (0+255),w,b
  2029  00197E  0101               	movlb	1	; () banked
  2030  001980  6F27               	movwf	(??_main+8)& (0+255),b
  2031  001982  5035               	movf	_time+1,w,c
  2032  001984  0101               	movlb	1	; () banked
  2033  001986  2124               	addwfc	(??_main+5)& (0+255),w,b
  2034  001988  0101               	movlb	1	; () banked
  2035  00198A  6F28               	movwf	(??_main+9)& (0+255),b
  2036  00198C  5036               	movf	_time+2,w,c
  2037  00198E  0101               	movlb	1	; () banked
  2038  001990  2125               	addwfc	(??_main+6)& (0+255),w,b
  2039  001992  0101               	movlb	1	; () banked
  2040  001994  6F29               	movwf	(??_main+10)& (0+255),b
  2041  001996  5037               	movf	_time+3,w,c
  2042  001998  0101               	movlb	1	; () banked
  2043  00199A  2126               	addwfc	(??_main+7)& (0+255),w,b
  2044  00199C  0101               	movlb	1	; () banked
  2045  00199E  6F2A               	movwf	(??_main+11)& (0+255),b
  2046  0019A0  0101               	movlb	1	; () banked
  2047  0019A2  511F               	movf	??_main& (0+255),w,b
  2048  0019A4  0101               	movlb	1	; () banked
  2049  0019A6  5D27               	subwf	(??_main+8)& (0+255),w,b
  2050  0019A8  0101               	movlb	1	; () banked
  2051  0019AA  5120               	movf	(??_main+1)& (0+255),w,b
  2052  0019AC  0101               	movlb	1	; () banked
  2053  0019AE  5928               	subwfb	(??_main+9)& (0+255),w,b
  2054  0019B0  0101               	movlb	1	; () banked
  2055  0019B2  5121               	movf	(??_main+2)& (0+255),w,b
  2056  0019B4  0101               	movlb	1	; () banked
  2057  0019B6  5929               	subwfb	(??_main+10)& (0+255),w,b
  2058  0019B8  0101               	movlb	1	; () banked
  2059  0019BA  512A               	movf	(??_main+11)& (0+255),w,b
  2060  0019BC  0A80               	xorlw	128
  2061  0019BE  0101               	movlb	1	; () banked
  2062  0019C0  6F2B               	movwf	(??_main+12)& (0+255),b
  2063  0019C2  0101               	movlb	1	; () banked
  2064  0019C4  5122               	movf	(??_main+3)& (0+255),w,b
  2065  0019C6  0A80               	xorlw	128
  2066  0019C8  0101               	movlb	1	; () banked
  2067  0019CA  592B               	subwfb	(??_main+12)& (0+255),w,b
  2068  0019CC  A0D8               	btfss	status,0,c
  2069  0019CE  D02E               	goto	l7180
  2070                           
  2071                           ; BSR set to: 1
  2072                           ;main.c: 156: {
  2073                           ;main.c: 157: int prev = digitalRead(cylinderDir);
  2074  0019D0  0E51               	movlw	low _cylinderDir
  2075  0019D2  6E27               	movwf	digitalRead@pin,c
  2076  0019D4  0E01               	movlw	high _cylinderDir
  2077  0019D6  6E28               	movwf	digitalRead@pin+1,c
  2078  0019D8  EC83  F015         	call	_digitalRead	;wreg free
  2079  0019DC  C027  F136         	movff	?_digitalRead,main@prev
  2080  0019E0  C028  F137         	movff	?_digitalRead+1,main@prev+1
  2081                           
  2082                           ;main.c: 158: digitalWrite(cylinderDir, !prev);
  2083  0019E4  0E51               	movlw	low _cylinderDir
  2084  0019E6  6E27               	movwf	digitalWrite@pin,c
  2085  0019E8  0E01               	movlw	high _cylinderDir
  2086  0019EA  6E28               	movwf	digitalWrite@pin+1,c
  2087  0019EC  0101               	movlb	1	; () banked
  2088  0019EE  5136               	movf	main@prev& (0+255),w,b
  2089  0019F0  0101               	movlb	1	; () banked
  2090  0019F2  1137               	iorwf	(main@prev+1)& (0+255),w,b
  2091  0019F4  A4D8               	btfss	status,2,c
  2092  0019F6  D002               	goto	u7650
  2093  0019F8  0E01               	movlw	1
  2094  0019FA  D001               	goto	u7660
  2095  0019FC                     u7650:
  2096  0019FC  0E00               	movlw	0
  2097  0019FE                     u7660:
  2098  0019FE  6E29               	movwf	digitalWrite@val,c
  2099  001A00  6A2A               	clrf	digitalWrite@val+1,c
  2100  001A02  ECB0  F017         	call	_digitalWrite	;wreg free
  2101                           
  2102                           ;main.c: 159: if(prev)cylinderDur = cylinderBackward;
  2103  001A06  0101               	movlb	1	; () banked
  2104  001A08  5136               	movf	main@prev& (0+255),w,b
  2105  001A0A  0101               	movlb	1	; () banked
  2106  001A0C  1137               	iorwf	(main@prev+1)& (0+255),w,b
  2107  001A0E  B4D8               	btfsc	status,2,c
  2108  001A10  D005               	goto	l142
  2109                           
  2110                           ; BSR set to: 1
  2111  001A12  C12E  F134         	movff	main@cylinderBackward,main@cylinderDur
  2112  001A16  C12F  F135         	movff	main@cylinderBackward+1,main@cylinderDur+1
  2113  001A1A  D004               	goto	l143
  2114  001A1C                     l142:
  2115                           
  2116                           ; BSR set to: 1
  2117                           ;main.c: 160: else cylinderDur = cylinderForward;
  2118  001A1C  C12C  F134         	movff	main@cylinderForward,main@cylinderDur
  2119  001A20  C12D  F135         	movff	main@cylinderForward+1,main@cylinderDur+1
  2120  001A24                     l143:
  2121                           
  2122                           ; BSR set to: 1
  2123                           ;main.c: 161: cylinderStart = time;
  2124  001A24  C034  F132         	movff	_time,main@cylinderStart
  2125  001A28  C035  F133         	movff	_time+1,main@cylinderStart+1
  2126  001A2C                     l7180:
  2127                           
  2128                           ; BSR set to: 1
  2129                           ;main.c: 162: }
  2130                           ;main.c: 164: if(time - lastBatteryTime > stoppingTime)
  2131  001A2C  C130  F11F         	movff	main@lastBatteryTime,??_main
  2132  001A30  C131  F120         	movff	main@lastBatteryTime+1,??_main+1
  2133  001A34  0E00               	movlw	0
  2134  001A36  0101               	movlb	1	; () banked
  2135  001A38  BF20               	btfsc	(??_main+1)& (0+255),7,b
  2136  001A3A  0EFF               	movlw	255
  2137  001A3C  6F21               	movwf	(??_main+2)& (0+255),b
  2138  001A3E  6F22               	movwf	(??_main+3)& (0+255),b
  2139  001A40  0101               	movlb	1	; () banked
  2140  001A42  1F1F               	comf	??_main& (0+255),f,b
  2141  001A44  1F20               	comf	(??_main+1)& (0+255),f,b
  2142  001A46  1F21               	comf	(??_main+2)& (0+255),f,b
  2143  001A48  1F22               	comf	(??_main+3)& (0+255),f,b
  2144  001A4A  2B1F               	incf	??_main& (0+255),f,b
  2145  001A4C  0E00               	movlw	0
  2146  001A4E  2320               	addwfc	(??_main+1)& (0+255),f,b
  2147  001A50  2321               	addwfc	(??_main+2)& (0+255),f,b
  2148  001A52  2322               	addwfc	(??_main+3)& (0+255),f,b
  2149  001A54  5034               	movf	_time,w,c
  2150  001A56  0101               	movlb	1	; () banked
  2151  001A58  251F               	addwf	??_main& (0+255),w,b
  2152  001A5A  0101               	movlb	1	; () banked
  2153  001A5C  6F23               	movwf	(??_main+4)& (0+255),b
  2154  001A5E  5035               	movf	_time+1,w,c
  2155  001A60  0101               	movlb	1	; () banked
  2156  001A62  2120               	addwfc	(??_main+1)& (0+255),w,b
  2157  001A64  0101               	movlb	1	; () banked
  2158  001A66  6F24               	movwf	(??_main+5)& (0+255),b
  2159  001A68  5036               	movf	_time+2,w,c
  2160  001A6A  0101               	movlb	1	; () banked
  2161  001A6C  2121               	addwfc	(??_main+2)& (0+255),w,b
  2162  001A6E  0101               	movlb	1	; () banked
  2163  001A70  6F25               	movwf	(??_main+6)& (0+255),b
  2164  001A72  5037               	movf	_time+3,w,c
  2165  001A74  0101               	movlb	1	; () banked
  2166  001A76  2122               	addwfc	(??_main+3)& (0+255),w,b
  2167  001A78  0101               	movlb	1	; () banked
  2168  001A7A  6F26               	movwf	(??_main+7)& (0+255),b
  2169  001A7C  0E00               	movlw	0
  2170  001A7E  BE54               	btfsc	_stoppingTime+1,7,c
  2171  001A80  0EFF               	movlw	255
  2172  001A82  0101               	movlb	1	; () banked
  2173  001A84  6F28               	movwf	(??_main+9)& (0+255),b
  2174  001A86  0A80               	xorlw	128
  2175  001A88  6F27               	movwf	(??_main+8)& (0+255),b
  2176  001A8A  0101               	movlb	1	; () banked
  2177  001A8C  5123               	movf	(??_main+4)& (0+255),w,b
  2178  001A8E  5C53               	subwf	_stoppingTime,w,c
  2179  001A90  0101               	movlb	1	; () banked
  2180  001A92  5124               	movf	(??_main+5)& (0+255),w,b
  2181  001A94  5854               	subwfb	_stoppingTime+1,w,c
  2182  001A96  0101               	movlb	1	; () banked
  2183  001A98  5125               	movf	(??_main+6)& (0+255),w,b
  2184  001A9A  0101               	movlb	1	; () banked
  2185  001A9C  5928               	subwfb	(??_main+9)& (0+255),w,b
  2186  001A9E  0101               	movlb	1	; () banked
  2187  001AA0  5126               	movf	(??_main+7)& (0+255),w,b
  2188  001AA2  0A80               	xorlw	128
  2189  001AA4  0101               	movlb	1	; () banked
  2190  001AA6  5927               	subwfb	(??_main+8)& (0+255),w,b
  2191  001AA8  B0D8               	btfsc	status,0,c
  2192  001AAA  D005               	goto	l7184
  2193                           
  2194                           ; BSR set to: 1
  2195                           ;main.c: 165: {
  2196                           ;main.c: 166: terminate = 1;
  2197  001AAC  0E00               	movlw	0
  2198  001AAE  6E47               	movwf	_terminate+1,c
  2199  001AB0  0E01               	movlw	1
  2200  001AB2  6E46               	movwf	_terminate,c
  2201                           
  2202                           ;main.c: 167: break;
  2203  001AB4  D008               	goto	l7188
  2204  001AB6                     l7184:
  2205                           
  2206                           ; BSR set to: 1
  2207  001AB6  5038               	movf	_batteryDetected,w,c
  2208  001AB8  1039               	iorwf	_batteryDetected+1,w,c
  2209  001ABA  A4D8               	btfss	status,2,c
  2210  001ABC  D004               	goto	l7188
  2211                           
  2212                           ; BSR set to: 1
  2213  001ABE  5046               	movf	_terminate,w,c
  2214  001AC0  1047               	iorwf	_terminate+1,w,c
  2215  001AC2  B4D8               	btfsc	status,2,c
  2216  001AC4  D6E2               	goto	l7166
  2217  001AC6                     l7188:
  2218                           
  2219                           ; BSR set to: 1
  2220                           ;main.c: 168: }
  2221                           ;main.c: 169: }
  2222                           ;main.c: 171: if(terminate)break;
  2223  001AC6  5046               	movf	_terminate,w,c
  2224  001AC8  1047               	iorwf	_terminate+1,w,c
  2225  001ACA  A4D8               	btfss	status,2,c
  2226  001ACC  D00B               	goto	l7198
  2227                           
  2228                           ; BSR set to: 1
  2229                           ;main.c: 173: sortBattery();
  2230                           
  2231                           ; BSR set to: 1
  2232                           
  2233                           ; BSR set to: 1
  2234  001ACE  EC1C  F007         	call	_sortBattery	;wreg free
  2235                           
  2236                           ;main.c: 176: lastBatteryTime = time;
  2237  001AD2  C034  F130         	movff	_time,main@lastBatteryTime
  2238  001AD6  C035  F131         	movff	_time+1,main@lastBatteryTime+1
  2239                           
  2240                           ;main.c: 177: batteryDetected = 0;
  2241  001ADA  0E00               	movlw	0
  2242  001ADC  6E39               	movwf	_batteryDetected+1,c
  2243  001ADE  0E00               	movlw	0
  2244  001AE0  6E38               	movwf	_batteryDetected,c
  2245  001AE2  D6B1               	goto	l7152
  2246  001AE4                     l7198:
  2247                           
  2248                           ;main.c: 178: }
  2249                           ;main.c: 181: digitalWrite(cylinderMotor, 0);
  2250  001AE4  0E55               	movlw	low _cylinderMotor
  2251  001AE6  6E27               	movwf	digitalWrite@pin,c
  2252  001AE8  0E01               	movlw	high _cylinderMotor
  2253  001AEA  6E28               	movwf	digitalWrite@pin+1,c
  2254  001AEC  0E00               	movlw	0
  2255  001AEE  6E2A               	movwf	digitalWrite@val+1,c
  2256  001AF0  0E00               	movlw	0
  2257  001AF2  6E29               	movwf	digitalWrite@val,c
  2258  001AF4  ECB0  F017         	call	_digitalWrite	;wreg free
  2259                           
  2260                           ;main.c: 184: lcdClear();
  2261  001AF8  EC9E  F01D         	call	_lcdClear	;wreg free
  2262                           
  2263                           ;main.c: 185: printf("[AA,C,9V,OTHER]\n");
  2264  001AFC  0EAF               	movlw	low STR_3
  2265  001AFE  0100               	movlb	0	; () banked
  2266  001B00  6FC9               	movwf	printf@f& (0+255),b
  2267  001B02  0EFF               	movlw	high STR_3
  2268  001B04  0100               	movlb	0	; () banked
  2269  001B06  6FCA               	movwf	(printf@f+1)& (0+255),b
  2270  001B08  EC09  F000         	call	_printf	;wreg free
  2271                           
  2272                           ;main.c: 186: printf("[%d,%d,%d,%d]",n_AA,n_C,n_9V,n_OTHER);
  2273  001B0C  0EE0               	movlw	low STR_4
  2274  001B0E  0100               	movlb	0	; () banked
  2275  001B10  6FC9               	movwf	printf@f& (0+255),b
  2276  001B12  0EFF               	movlw	high STR_4
  2277  001B14  0100               	movlb	0	; () banked
  2278  001B16  6FCA               	movwf	(printf@f+1)& (0+255),b
  2279  001B18  C040  F0CB         	movff	_n_AA,?_printf+2
  2280  001B1C  C041  F0CC         	movff	_n_AA+1,?_printf+3
  2281  001B20  C042  F0CD         	movff	_n_C,?_printf+4
  2282  001B24  C043  F0CE         	movff	_n_C+1,?_printf+5
  2283  001B28  C03E  F0CF         	movff	_n_9V,?_printf+6
  2284  001B2C  C03F  F0D0         	movff	_n_9V+1,?_printf+7
  2285  001B30  C044  F0D1         	movff	_n_OTHER,?_printf+8
  2286  001B34  C045  F0D2         	movff	_n_OTHER+1,?_printf+9
  2287  001B38  EC09  F000         	call	_printf	;wreg free
  2288                           
  2289                           ;main.c: 187: readKeypad();
  2290  001B3C  EC3C  F01D         	call	_readKeypad	;wreg free
  2291  001B40  D635               	goto	l137
  2292  001B42                     l153:
  2293  001B42  D7FF               	goto	l153
  2294  001B44                     __end_of_main:
  2295                           	opt stack 0
  2296                           tblptru	equ	0xFF8
  2297                           tblptrh	equ	0xFF7
  2298                           tblptrl	equ	0xFF6
  2299                           tablat	equ	0xFF5
  2300                           postinc0	equ	0xFEE
  2301                           wreg	equ	0xFE8
  2302                           postdec1	equ	0xFE5
  2303                           fsr1l	equ	0xFE1
  2304                           status	equ	0xFD8
  2305                           
  2306 ;; *************** function _sortBattery *****************
  2307 ;; Defined at:
  2308 ;;		line 195 in file "main.c"
  2309 ;; Parameters:    Size  Location     Type
  2310 ;;		None
  2311 ;; Auto vars:     Size  Location     Type
  2312 ;;  V               3   22[BANK1 ] float 
  2313 ;;  i               2   18[BANK1 ] int 
  2314 ;;  i               3   25[BANK1 ] float 
  2315 ;;  V               3   28[BANK1 ] float 
  2316 ;;  V_max           3   15[BANK1 ] float 
  2317 ;;  resolution      3   12[BANK1 ] float 
  2318 ;;  Vcc             3    9[BANK1 ] float 
  2319 ;;  V_float         3    2[BANK1 ] float 
  2320 ;;  targetAngle     2   20[BANK1 ] int 
  2321 ;;  signal          2    7[BANK1 ] int 
  2322 ;;  pos_v_counte    2    5[BANK1 ] int 
  2323 ;; Return value:  Size  Location     Type
  2324 ;;                  1    wreg      void 
  2325 ;; Registers used:
  2326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2327 ;; Tracked objects:
  2328 ;;		On entry : 0/0
  2329 ;;		On exit  : 0/0
  2330 ;;		Unchanged: 0/0
  2331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2333 ;;      Locals:         0       0      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2334 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2335 ;;      Totals:         0       2      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2336 ;;Total ram usage:       33 bytes
  2337 ;; Hardware stack levels used:    1
  2338 ;; Hardware stack levels required when called:    8
  2339 ;; This function calls:
  2340 ;;		___altoft
  2341 ;;		___awtoft
  2342 ;;		___ftdiv
  2343 ;;		___ftge
  2344 ;;		___ftmul
  2345 ;;		___ftsub
  2346 ;;		___fttol
  2347 ;;		_analogRead
  2348 ;;		_digitalRead
  2349 ;;		_digitalWrite
  2350 ;;		_lcdClear
  2351 ;;		_printf
  2352 ;;		_readKeypad
  2353 ;;		_setAngle
  2354 ;; This function is called by:
  2355 ;;		_main
  2356 ;; This function uses a non-reentrant model
  2357 ;;
  2358                           
  2359                           	psect	text1
  2360  000E38                     __ptext1:
  2361                           	opt stack 0
  2362  000E38                     _sortBattery:
  2363                           	opt stack 22
  2364                           
  2365                           ;main.c: 198: setAngle(conveyorServo, 90);
  2366                           
  2367                           ;incstack = 0
  2368  000E38  0E4D               	movlw	low _conveyorServo
  2369  000E3A  0100               	movlb	0	; () banked
  2370  000E3C  6FE0               	movwf	setAngle@motor& (0+255),b
  2371  000E3E  0E01               	movlw	high _conveyorServo
  2372  000E40  0100               	movlb	0	; () banked
  2373  000E42  6FE1               	movwf	(setAngle@motor+1)& (0+255),b
  2374  000E44  0E00               	movlw	0
  2375  000E46  0100               	movlb	0	; () banked
  2376  000E48  6FE3               	movwf	(setAngle@angle+1)& (0+255),b
  2377  000E4A  0E5A               	movlw	90
  2378  000E4C  6FE2               	movwf	setAngle@angle& (0+255),b
  2379  000E4E  EC4A  F017         	call	_setAngle	;wreg free
  2380                           
  2381                           ;main.c: 199: digitalWrite(cylinderMotor, 0);
  2382  000E52  0E55               	movlw	low _cylinderMotor
  2383  000E54  6E27               	movwf	digitalWrite@pin,c
  2384  000E56  0E01               	movlw	high _cylinderMotor
  2385  000E58  6E28               	movwf	digitalWrite@pin+1,c
  2386  000E5A  0E00               	movlw	0
  2387  000E5C  6E2A               	movwf	digitalWrite@val+1,c
  2388  000E5E  0E00               	movlw	0
  2389  000E60  6E29               	movwf	digitalWrite@val,c
  2390  000E62  ECB0  F017         	call	_digitalWrite	;wreg free
  2391                           
  2392                           ;main.c: 202: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2393  000E66  0E0D               	movlw	13
  2394  000E68  0100               	movlb	0	; () banked
  2395  000E6A  6FF8               	movwf	(??_sortBattery+1)& (0+255),b
  2396  000E6C  0EAF               	movlw	175
  2397  000E6E  0100               	movlb	0	; () banked
  2398  000E70  6FF7               	movwf	??_sortBattery& (0+255),b
  2399  000E72  0EB6               	movlw	182
  2400  000E74                     u7757:
  2401  000E74  2EE8               	decfsz	wreg,f,c
  2402  000E76  D7FE               	bra	u7757
  2403  000E78  2FF7               	decfsz	??_sortBattery& (0+255),f,b
  2404  000E7A  D7FC               	bra	u7757
  2405  000E7C  2FF8               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2406  000E7E  D7FA               	bra	u7757
  2407  000E80  F000               	nop	
  2408                           
  2409                           ;main.c: 204: float Vcc = 5.00;
  2410  000E82  0E00               	movlw	0
  2411  000E84  0101               	movlb	1	; () banked
  2412  000E86  6F09               	movwf	sortBattery@Vcc& (0+255),b
  2413  000E88  0EA0               	movlw	160
  2414  000E8A  0101               	movlb	1	; () banked
  2415  000E8C  6F0A               	movwf	(sortBattery@Vcc+1)& (0+255),b
  2416  000E8E  0E40               	movlw	64
  2417  000E90  0101               	movlb	1	; () banked
  2418  000E92  6F0B               	movwf	(sortBattery@Vcc+2)& (0+255),b
  2419                           
  2420                           ; BSR set to: 1
  2421                           ;main.c: 205: float resolution = (1<<10) - 1;
  2422  000E94  0EC0               	movlw	192
  2423  000E96  0101               	movlb	1	; () banked
  2424  000E98  6F0C               	movwf	sortBattery@resolution& (0+255),b
  2425  000E9A  0E7F               	movlw	127
  2426  000E9C  0101               	movlb	1	; () banked
  2427  000E9E  6F0D               	movwf	(sortBattery@resolution+1)& (0+255),b
  2428  000EA0  0E44               	movlw	68
  2429  000EA2  0101               	movlb	1	; () banked
  2430  000EA4  6F0E               	movwf	(sortBattery@resolution+2)& (0+255),b
  2431                           
  2432                           ; BSR set to: 1
  2433                           ;main.c: 206: float V_max = 0;
  2434  000EA6  0E00               	movlw	0
  2435  000EA8  0101               	movlb	1	; () banked
  2436  000EAA  6F0F               	movwf	sortBattery@V_max& (0+255),b
  2437  000EAC  0E00               	movlw	0
  2438  000EAE  0101               	movlb	1	; () banked
  2439  000EB0  6F10               	movwf	(sortBattery@V_max+1)& (0+255),b
  2440  000EB2  0E00               	movlw	0
  2441  000EB4  0101               	movlb	1	; () banked
  2442  000EB6  6F11               	movwf	(sortBattery@V_max+2)& (0+255),b
  2443                           
  2444                           ; BSR set to: 1
  2445                           ;main.c: 207: float V_float = 0;
  2446  000EB8  0E00               	movlw	0
  2447  000EBA  0101               	movlb	1	; () banked
  2448  000EBC  6F02               	movwf	sortBattery@V_float& (0+255),b
  2449  000EBE  0E00               	movlw	0
  2450  000EC0  0101               	movlb	1	; () banked
  2451  000EC2  6F03               	movwf	(sortBattery@V_float+1)& (0+255),b
  2452  000EC4  0E00               	movlw	0
  2453  000EC6  0101               	movlb	1	; () banked
  2454  000EC8  6F04               	movwf	(sortBattery@V_float+2)& (0+255),b
  2455                           
  2456                           ; BSR set to: 1
  2457                           ;main.c: 208: int pos_v_counter = 1;
  2458  000ECA  0E00               	movlw	0
  2459  000ECC  0101               	movlb	1	; () banked
  2460  000ECE  6F06               	movwf	(sortBattery@pos_v_counter+1)& (0+255),b
  2461  000ED0  0E01               	movlw	1
  2462  000ED2  6F05               	movwf	sortBattery@pos_v_counter& (0+255),b
  2463                           
  2464                           ; BSR set to: 1
  2465                           ;main.c: 209: int signal = 0;
  2466  000ED4  0E00               	movlw	0
  2467  000ED6  0101               	movlb	1	; () banked
  2468  000ED8  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2469  000EDA  0E00               	movlw	0
  2470  000EDC  6F07               	movwf	sortBattery@signal& (0+255),b
  2471                           
  2472                           ; BSR set to: 1
  2473                           ;main.c: 213: for(float i = (float)padAngle_NEUTRAL; i > padAngle_CLOSE; i -= 0.1) {
  2474  000EDE  C04B  F02F         	movff	_padAngle_NEUTRAL,___awtoft@c
  2475  000EE2  C04C  F030         	movff	_padAngle_NEUTRAL+1,___awtoft@c+1
  2476  000EE6  EC78  F01C         	call	___awtoft	;wreg free
  2477  000EEA  C02F  F119         	movff	?___awtoft,sortBattery@i
  2478  000EEE  C030  F11A         	movff	?___awtoft+1,sortBattery@i+1
  2479  000EF2  C031  F11B         	movff	?___awtoft+2,sortBattery@i+2
  2480  000EF6  D0FB               	goto	l6980
  2481  000EF8                     l6954:
  2482                           
  2483                           ;main.c: 214: setAngle(padServo, i);
  2484  000EF8  C119  F0BA         	movff	sortBattery@i,___fttol@f1
  2485  000EFC  C11A  F0BB         	movff	sortBattery@i+1,___fttol@f1+1
  2486  000F00  C11B  F0BC         	movff	sortBattery@i+2,___fttol@f1+2
  2487  000F04  ECCD  F012         	call	___fttol	;wreg free
  2488  000F08  C0BA  F100         	movff	?___fttol,_sortBattery$1352
  2489  000F0C  C0BB  F101         	movff	?___fttol+1,_sortBattery$1352+1
  2490                           
  2491                           ;main.c: 214: setAngle(padServo, i);
  2492  000F10  0E55               	movlw	low _padServo
  2493  000F12  0100               	movlb	0	; () banked
  2494  000F14  6FE0               	movwf	setAngle@motor& (0+255),b
  2495  000F16  0E00               	movlw	high _padServo
  2496  000F18  0100               	movlb	0	; () banked
  2497  000F1A  6FE1               	movwf	(setAngle@motor+1)& (0+255),b
  2498  000F1C  C100  F0E2         	movff	_sortBattery$1352,setAngle@angle
  2499  000F20  C101  F0E3         	movff	_sortBattery$1352+1,setAngle@angle+1
  2500  000F24  EC4A  F017         	call	_setAngle	;wreg free
  2501                           
  2502                           ;main.c: 215: _delay((unsigned long)((100)*(10000000/4000000.0)));
  2503  000F28  0E53               	movlw	83
  2504  000F2A                     u7767:
  2505  000F2A  2EE8               	decfsz	wreg,f,c
  2506  000F2C  D7FE               	bra	u7767
  2507  000F2E  F000               	nop	
  2508                           
  2509                           ;main.c: 216: digitalWrite(AA_float, 1);
  2510  000F30  0E49               	movlw	low _AA_float
  2511  000F32  6E27               	movwf	digitalWrite@pin,c
  2512  000F34  0E01               	movlw	high _AA_float
  2513  000F36  6E28               	movwf	digitalWrite@pin+1,c
  2514  000F38  0E00               	movlw	0
  2515  000F3A  6E2A               	movwf	digitalWrite@val+1,c
  2516  000F3C  0E01               	movlw	1
  2517  000F3E  6E29               	movwf	digitalWrite@val,c
  2518  000F40  ECB0  F017         	call	_digitalWrite	;wreg free
  2519                           
  2520                           ;main.c: 217: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2521  000F44  C10C  F089         	movff	sortBattery@resolution,___ftdiv@f2
  2522  000F48  C10D  F08A         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2523  000F4C  C10E  F08B         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2524  000F50  C177  F027         	movff	_padPin3+2,analogRead@channel
  2525  000F54  C178  F028         	movff	_padPin3+3,analogRead@channel+1
  2526  000F58  EC5C  F01C         	call	_analogRead	;wreg free
  2527  000F5C  C027  F02F         	movff	?_analogRead,___altoft@c
  2528  000F60  C028  F030         	movff	?_analogRead+1,___altoft@c+1
  2529  000F64  C029  F031         	movff	?_analogRead+2,___altoft@c+2
  2530  000F68  C02A  F032         	movff	?_analogRead+3,___altoft@c+3
  2531  000F6C  ECCE  F019         	call	___altoft	;wreg free
  2532  000F70  C02F  F086         	movff	?___altoft,___ftdiv@f1
  2533  000F74  C030  F087         	movff	?___altoft+1,___ftdiv@f1+1
  2534  000F78  C031  F088         	movff	?___altoft+2,___ftdiv@f1+2
  2535  000F7C  EC27  F012         	call	___ftdiv	;wreg free
  2536  000F80  C086  F095         	movff	?___ftdiv,___ftmul@f1
  2537  000F84  C087  F096         	movff	?___ftdiv+1,___ftmul@f1+1
  2538  000F88  C088  F097         	movff	?___ftdiv+2,___ftmul@f1+2
  2539  000F8C  C109  F098         	movff	sortBattery@Vcc,___ftmul@f2
  2540  000F90  C10A  F099         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2541  000F94  C10B  F09A         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2542  000F98  ECCA  F010         	call	___ftmul	;wreg free
  2543  000F9C  C095  F116         	movff	?___ftmul,sortBattery@V
  2544  000FA0  C096  F117         	movff	?___ftmul+1,sortBattery@V+1
  2545  000FA4  C097  F118         	movff	?___ftmul+2,sortBattery@V+2
  2546                           
  2547                           ;main.c: 219: if(V > 0.1)pos_v_counter++;
  2548  000FA8  0ECD               	movlw	205
  2549  000FAA  0100               	movlb	0	; () banked
  2550  000FAC  6F80               	movwf	___ftge@ff1& (0+255),b
  2551  000FAE  0ECC               	movlw	204
  2552  000FB0  0100               	movlb	0	; () banked
  2553  000FB2  6F81               	movwf	(___ftge@ff1+1)& (0+255),b
  2554  000FB4  0E3D               	movlw	61
  2555  000FB6  0100               	movlb	0	; () banked
  2556  000FB8  6F82               	movwf	(___ftge@ff1+2)& (0+255),b
  2557  000FBA  C116  F083         	movff	sortBattery@V,___ftge@ff2
  2558  000FBE  C117  F084         	movff	sortBattery@V+1,___ftge@ff2+1
  2559  000FC2  C118  F085         	movff	sortBattery@V+2,___ftge@ff2+2
  2560  000FC6  EC14  F018         	call	___ftge	;wreg free
  2561  000FCA  0100               	movlb	0	; () banked
  2562  000FCC  B0D8               	btfsc	status,0,c
  2563  000FCE  D003               	goto	l6968
  2564                           
  2565                           ; BSR set to: 0
  2566  000FD0  0101               	movlb	1	; () banked
  2567  000FD2  4B05               	infsnz	sortBattery@pos_v_counter& (0+255),f,b
  2568  000FD4  2B06               	incf	(sortBattery@pos_v_counter+1)& (0+255),f,b
  2569  000FD6                     l6968:
  2570                           
  2571                           ;main.c: 221: if(V > V_max) {
  2572  000FD6  C10F  F080         	movff	sortBattery@V_max,___ftge@ff1
  2573  000FDA  C110  F081         	movff	sortBattery@V_max+1,___ftge@ff1+1
  2574  000FDE  C111  F082         	movff	sortBattery@V_max+2,___ftge@ff1+2
  2575  000FE2  C116  F083         	movff	sortBattery@V,___ftge@ff2
  2576  000FE6  C117  F084         	movff	sortBattery@V+1,___ftge@ff2+1
  2577  000FEA  C118  F085         	movff	sortBattery@V+2,___ftge@ff2+2
  2578  000FEE  EC14  F018         	call	___ftge	;wreg free
  2579  000FF2  0100               	movlb	0	; () banked
  2580  000FF4  B0D8               	btfsc	status,0,c
  2581  000FF6  D064               	goto	l6978
  2582                           
  2583                           ; BSR set to: 0
  2584                           ;main.c: 222: signal = digitalRead(padPin1)<<1;
  2585  000FF8  0E59               	movlw	low _padPin1
  2586  000FFA  6E27               	movwf	digitalRead@pin,c
  2587  000FFC  0E01               	movlw	high _padPin1
  2588  000FFE  6E28               	movwf	digitalRead@pin+1,c
  2589  001000  EC83  F015         	call	_digitalRead	;wreg free
  2590  001004  90D8               	bcf	status,0,c
  2591  001006  3427               	rlcf	?_digitalRead,w,c
  2592  001008  0101               	movlb	1	; () banked
  2593  00100A  6F07               	movwf	sortBattery@signal& (0+255),b
  2594  00100C  3428               	rlcf	?_digitalRead+1,w,c
  2595  00100E  0101               	movlb	1	; () banked
  2596  001010  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2597                           
  2598                           ;main.c: 223: signal |= digitalRead(padPin2)<<0;
  2599  001012  0E5D               	movlw	low _padPin2
  2600  001014  6E27               	movwf	digitalRead@pin,c
  2601  001016  0E01               	movlw	high _padPin2
  2602  001018  6E28               	movwf	digitalRead@pin+1,c
  2603  00101A  EC83  F015         	call	_digitalRead	;wreg free
  2604  00101E  5027               	movf	?_digitalRead,w,c
  2605  001020  0101               	movlb	1	; () banked
  2606  001022  1307               	iorwf	sortBattery@signal& (0+255),f,b
  2607  001024  5028               	movf	?_digitalRead+1,w,c
  2608  001026  0101               	movlb	1	; () banked
  2609  001028  1308               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  2610                           
  2611                           ; BSR set to: 1
  2612                           ;main.c: 225: V_max = V;
  2613  00102A  C116  F10F         	movff	sortBattery@V,sortBattery@V_max
  2614  00102E  C117  F110         	movff	sortBattery@V+1,sortBattery@V_max+1
  2615  001032  C118  F111         	movff	sortBattery@V+2,sortBattery@V_max+2
  2616                           
  2617                           ;main.c: 228: digitalWrite(AA_float, 0);
  2618  001036  0E49               	movlw	low _AA_float
  2619  001038  6E27               	movwf	digitalWrite@pin,c
  2620  00103A  0E01               	movlw	high _AA_float
  2621  00103C  6E28               	movwf	digitalWrite@pin+1,c
  2622  00103E  0E00               	movlw	0
  2623  001040  6E2A               	movwf	digitalWrite@val+1,c
  2624  001042  0E00               	movlw	0
  2625  001044  6E29               	movwf	digitalWrite@val,c
  2626  001046  ECB0  F017         	call	_digitalWrite	;wreg free
  2627                           
  2628                           ;main.c: 229: _delay((unsigned long)((1)*(10000000/4000.0)));
  2629  00104A  0E04               	movlw	4
  2630  00104C  0100               	movlb	0	; () banked
  2631  00104E  6FF7               	movwf	??_sortBattery& (0+255),b
  2632  001050  0E3D               	movlw	61
  2633  001052                     u7777:
  2634  001052  2EE8               	decfsz	wreg,f,c
  2635  001054  D7FE               	bra	u7777
  2636  001056  2FF7               	decfsz	??_sortBattery& (0+255),f,b
  2637  001058  D7FC               	bra	u7777
  2638  00105A  D000               	nop2	
  2639                           
  2640                           ;main.c: 230: V_float = analogRead(padPin3[1]) / resolution * Vcc;
  2641  00105C  C10C  F089         	movff	sortBattery@resolution,___ftdiv@f2
  2642  001060  C10D  F08A         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2643  001064  C10E  F08B         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2644  001068  C177  F027         	movff	_padPin3+2,analogRead@channel
  2645  00106C  C178  F028         	movff	_padPin3+3,analogRead@channel+1
  2646  001070  EC5C  F01C         	call	_analogRead	;wreg free
  2647  001074  C027  F02F         	movff	?_analogRead,___altoft@c
  2648  001078  C028  F030         	movff	?_analogRead+1,___altoft@c+1
  2649  00107C  C029  F031         	movff	?_analogRead+2,___altoft@c+2
  2650  001080  C02A  F032         	movff	?_analogRead+3,___altoft@c+3
  2651  001084  ECCE  F019         	call	___altoft	;wreg free
  2652  001088  C02F  F086         	movff	?___altoft,___ftdiv@f1
  2653  00108C  C030  F087         	movff	?___altoft+1,___ftdiv@f1+1
  2654  001090  C031  F088         	movff	?___altoft+2,___ftdiv@f1+2
  2655  001094  EC27  F012         	call	___ftdiv	;wreg free
  2656  001098  C086  F095         	movff	?___ftdiv,___ftmul@f1
  2657  00109C  C087  F096         	movff	?___ftdiv+1,___ftmul@f1+1
  2658  0010A0  C088  F097         	movff	?___ftdiv+2,___ftmul@f1+2
  2659  0010A4  C109  F098         	movff	sortBattery@Vcc,___ftmul@f2
  2660  0010A8  C10A  F099         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2661  0010AC  C10B  F09A         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2662  0010B0  ECCA  F010         	call	___ftmul	;wreg free
  2663  0010B4  C095  F102         	movff	?___ftmul,sortBattery@V_float
  2664  0010B8  C096  F103         	movff	?___ftmul+1,sortBattery@V_float+1
  2665  0010BC  C097  F104         	movff	?___ftmul+2,sortBattery@V_float+2
  2666  0010C0                     l6978:
  2667  0010C0  C119  F0BA         	movff	sortBattery@i,___ftsub@f1
  2668  0010C4  C11A  F0BB         	movff	sortBattery@i+1,___ftsub@f1+1
  2669  0010C8  C11B  F0BC         	movff	sortBattery@i+2,___ftsub@f1+2
  2670  0010CC  0ECD               	movlw	205
  2671  0010CE  0100               	movlb	0	; () banked
  2672  0010D0  6FBD               	movwf	___ftsub@f2& (0+255),b
  2673  0010D2  0ECC               	movlw	204
  2674  0010D4  0100               	movlb	0	; () banked
  2675  0010D6  6FBE               	movwf	(___ftsub@f2+1)& (0+255),b
  2676  0010D8  0E3D               	movlw	61
  2677  0010DA  0100               	movlb	0	; () banked
  2678  0010DC  6FBF               	movwf	(___ftsub@f2+2)& (0+255),b
  2679  0010DE  EC63  F01B         	call	___ftsub	;wreg free
  2680  0010E2  C0BA  F119         	movff	?___ftsub,sortBattery@i
  2681  0010E6  C0BB  F11A         	movff	?___ftsub+1,sortBattery@i+1
  2682  0010EA  C0BC  F11B         	movff	?___ftsub+2,sortBattery@i+2
  2683  0010EE                     l6980:
  2684  0010EE  C049  F02F         	movff	_padAngle_CLOSE,___awtoft@c
  2685  0010F2  C04A  F030         	movff	_padAngle_CLOSE+1,___awtoft@c+1
  2686  0010F6  EC78  F01C         	call	___awtoft	;wreg free
  2687  0010FA  C02F  F080         	movff	?___awtoft,___ftge@ff1
  2688  0010FE  C030  F081         	movff	?___awtoft+1,___ftge@ff1+1
  2689  001102  C031  F082         	movff	?___awtoft+2,___ftge@ff1+2
  2690  001106  C119  F083         	movff	sortBattery@i,___ftge@ff2
  2691  00110A  C11A  F084         	movff	sortBattery@i+1,___ftge@ff2+1
  2692  00110E  C11B  F085         	movff	sortBattery@i+2,___ftge@ff2+2
  2693  001112  EC14  F018         	call	___ftge	;wreg free
  2694  001116  0100               	movlb	0	; () banked
  2695  001118  A0D8               	btfss	status,0,c
  2696  00111A  D6EE               	goto	l6954
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;main.c: 232: }
  2700                           ;main.c: 233: }
  2701                           ;main.c: 235: int targetAngle;
  2702                           ;main.c: 236: float V = V_max;
  2703  00111C  C10F  F11C         	movff	sortBattery@V_max,sortBattery@V_221
  2704  001120  C110  F11D         	movff	sortBattery@V_max+1,sortBattery@V_221+1
  2705  001124  C111  F11E         	movff	sortBattery@V_max+2,sortBattery@V_221+2
  2706                           
  2707                           ; BSR set to: 0
  2708                           ;main.c: 238: lcdClear();
  2709  001128  EC9E  F01D         	call	_lcdClear	;wreg free
  2710                           
  2711                           ;main.c: 239: printf("N: %d,\nV: %.3f",pos_v_counter, V);
  2712  00112C  0ED1               	movlw	low STR_5
  2713  00112E  0100               	movlb	0	; () banked
  2714  001130  6FC9               	movwf	printf@f& (0+255),b
  2715  001132  0EFF               	movlw	high STR_5
  2716  001134  0100               	movlb	0	; () banked
  2717  001136  6FCA               	movwf	(printf@f+1)& (0+255),b
  2718  001138  C105  F0CB         	movff	sortBattery@pos_v_counter,?_printf+2
  2719  00113C  C106  F0CC         	movff	sortBattery@pos_v_counter+1,?_printf+3
  2720  001140  C11C  F0CD         	movff	sortBattery@V_221,?_printf+4
  2721  001144  C11D  F0CE         	movff	sortBattery@V_221+1,?_printf+5
  2722  001148  C11E  F0CF         	movff	sortBattery@V_221+2,?_printf+6
  2723  00114C  EC09  F000         	call	_printf	;wreg free
  2724                           
  2725                           ;main.c: 241: readKeypad();
  2726  001150  EC3C  F01D         	call	_readKeypad	;wreg free
  2727                           
  2728                           ;main.c: 245: switch(signal){
  2729  001154  D063               	goto	l7016
  2730  001156                     l6988:
  2731                           
  2732                           ;main.c: 247: if(V_float < 0.1){
  2733  001156  C102  F080         	movff	sortBattery@V_float,___ftge@ff1
  2734  00115A  C103  F081         	movff	sortBattery@V_float+1,___ftge@ff1+1
  2735  00115E  C104  F082         	movff	sortBattery@V_float+2,___ftge@ff1+2
  2736  001162  0ECD               	movlw	205
  2737  001164  0100               	movlb	0	; () banked
  2738  001166  6F83               	movwf	___ftge@ff2& (0+255),b
  2739  001168  0ECC               	movlw	204
  2740  00116A  0100               	movlb	0	; () banked
  2741  00116C  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  2742  00116E  0E3D               	movlw	61
  2743  001170  0100               	movlb	0	; () banked
  2744  001172  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  2745  001174  EC14  F018         	call	___ftge	;wreg free
  2746  001178  0100               	movlb	0	; () banked
  2747  00117A  B0D8               	btfsc	status,0,c
  2748  00117C  D018               	goto	l6998
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;main.c: 248: if(V > V_LIM_AA){ targetAngle = redirectAngle_AA; n_AA+=1;}
  2752  00117E  C13B  F080         	movff	_V_LIM_AA,___ftge@ff1
  2753  001182  C13C  F081         	movff	_V_LIM_AA+1,___ftge@ff1+1
  2754  001186  C13D  F082         	movff	_V_LIM_AA+2,___ftge@ff1+2
  2755  00118A  C11C  F083         	movff	sortBattery@V_221,___ftge@ff2
  2756  00118E  C11D  F084         	movff	sortBattery@V_221+1,___ftge@ff2+1
  2757  001192  C11E  F085         	movff	sortBattery@V_221+2,___ftge@ff2+2
  2758  001196  EC14  F018         	call	___ftge	;wreg free
  2759  00119A  0100               	movlb	0	; () banked
  2760  00119C  B0D8               	btfsc	status,0,c
  2761  00119E  D037               	goto	l174
  2762                           
  2763                           ; BSR set to: 0
  2764  0011A0  C04D  F114         	movff	_redirectAngle_AA,sortBattery@targetAngle
  2765  0011A4  C04E  F115         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  2766                           
  2767                           ; BSR set to: 0
  2768  0011A8  4A40               	infsnz	_n_AA,f,c
  2769  0011AA  2A41               	incf	_n_AA+1,f,c
  2770  0011AC  D04B               	goto	l7018
  2771  0011AE                     l6998:
  2772                           
  2773                           ; BSR set to: 0
  2774                           ;main.c: 254: if(V > V_LIM_9V) {targetAngle = redirectAngle_9V; n_9V+=1;}
  2775  0011AE  C138  F080         	movff	_V_LIM_9V,___ftge@ff1
  2776  0011B2  C139  F081         	movff	_V_LIM_9V+1,___ftge@ff1+1
  2777  0011B6  C13A  F082         	movff	_V_LIM_9V+2,___ftge@ff1+2
  2778  0011BA  C11C  F083         	movff	sortBattery@V_221,___ftge@ff2
  2779  0011BE  C11D  F084         	movff	sortBattery@V_221+1,___ftge@ff2+1
  2780  0011C2  C11E  F085         	movff	sortBattery@V_221+2,___ftge@ff2+2
  2781  0011C6  EC14  F018         	call	___ftge	;wreg free
  2782  0011CA  0100               	movlb	0	; () banked
  2783  0011CC  B0D8               	btfsc	status,0,c
  2784  0011CE  D01F               	goto	l174
  2785                           
  2786                           ; BSR set to: 0
  2787  0011D0  C147  F114         	movff	_redirectAngle_9V,sortBattery@targetAngle
  2788  0011D4  C148  F115         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  2789                           
  2790                           ; BSR set to: 0
  2791  0011D8  4A3E               	infsnz	_n_9V,f,c
  2792  0011DA  2A3F               	incf	_n_9V+1,f,c
  2793  0011DC  D033               	goto	l7018
  2794  0011DE                     l7006:
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;main.c: 258: if(V > V_LIM_C) {targetAngle = redirectAngle_C; n_C+=1;}
  2798  0011DE  C13E  F080         	movff	_V_LIM_C,___ftge@ff1
  2799  0011E2  C13F  F081         	movff	_V_LIM_C+1,___ftge@ff1+1
  2800  0011E6  C140  F082         	movff	_V_LIM_C+2,___ftge@ff1+2
  2801  0011EA  C11C  F083         	movff	sortBattery@V_221,___ftge@ff2
  2802  0011EE  C11D  F084         	movff	sortBattery@V_221+1,___ftge@ff2+1
  2803  0011F2  C11E  F085         	movff	sortBattery@V_221+2,___ftge@ff2+2
  2804  0011F6  EC14  F018         	call	___ftge	;wreg free
  2805  0011FA  0100               	movlb	0	; () banked
  2806  0011FC  B0D8               	btfsc	status,0,c
  2807  0011FE  D007               	goto	l174
  2808                           
  2809                           ; BSR set to: 0
  2810  001200  C04F  F114         	movff	_redirectAngle_C,sortBattery@targetAngle
  2811  001204  C050  F115         	movff	_redirectAngle_C+1,sortBattery@targetAngle+1
  2812                           
  2813                           ; BSR set to: 0
  2814  001208  4A42               	infsnz	_n_C,f,c
  2815  00120A  2A43               	incf	_n_C+1,f,c
  2816  00120C  D01B               	goto	l7018
  2817  00120E                     l174:
  2818                           
  2819                           ; BSR set to: 0
  2820                           ;main.c: 259: else {targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  2821  00120E  C051  F114         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  2822  001212  C052  F115         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  2823                           
  2824                           ; BSR set to: 0
  2825  001216  4A44               	infsnz	_n_OTHER,f,c
  2826  001218  2A45               	incf	_n_OTHER+1,f,c
  2827                           
  2828                           ; BSR set to: 0
  2829                           ;main.c: 261: }
  2830                           
  2831                           ; BSR set to: 0
  2832                           ;main.c: 260: break;
  2833  00121A  D014               	goto	l7018
  2834  00121C                     l7016:
  2835  00121C  C107  F0F7         	movff	sortBattery@signal,??_sortBattery
  2836  001220  C108  F0F8         	movff	sortBattery@signal+1,??_sortBattery+1
  2837                           
  2838                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2839                           ; Switch size 1, requested type "space"
  2840                           ; Number of cases is 1, Range of values is 0 to 0
  2841                           ; switch strategies available:
  2842                           ; Name         Instructions Cycles
  2843                           ; simple_byte            4     3 (average)
  2844                           ;	Chosen strategy is simple_byte
  2845  001224  0100               	movlb	0	; () banked
  2846  001226  51F8               	movf	(??_sortBattery+1)& (0+255),w,b
  2847  001228  0A00               	xorlw	0	; case 0
  2848  00122A  A4D8               	btfss	status,2,c
  2849  00122C  D00B               	goto	l7018
  2850                           
  2851                           ; BSR set to: 0
  2852                           ; Switch size 1, requested type "space"
  2853                           ; Number of cases is 3, Range of values is 0 to 2
  2854                           ; switch strategies available:
  2855                           ; Name         Instructions Cycles
  2856                           ; simple_byte           10     6 (average)
  2857                           ;	Chosen strategy is simple_byte
  2858  00122E  0100               	movlb	0	; () banked
  2859  001230  51F7               	movf	??_sortBattery& (0+255),w,b
  2860  001232  0A00               	xorlw	0	; case 0
  2861  001234  B4D8               	btfsc	status,2,c
  2862  001236  D78F               	goto	l6988
  2863  001238  0A01               	xorlw	1	; case 1
  2864  00123A  B4D8               	btfsc	status,2,c
  2865  00123C  D7D0               	goto	l7006
  2866  00123E  0A03               	xorlw	3	; case 2
  2867  001240  B4D8               	btfsc	status,2,c
  2868  001242  D7B5               	goto	l6998
  2869  001244                     l7018:
  2870                           
  2871                           ; BSR set to: 0
  2872                           ;main.c: 263: setAngle(redirectingServo, targetAngle);
  2873  001244  0E61               	movlw	low _redirectingServo
  2874  001246  0100               	movlb	0	; () banked
  2875  001248  6FE0               	movwf	setAngle@motor& (0+255),b
  2876  00124A  0E01               	movlw	high _redirectingServo
  2877  00124C  0100               	movlb	0	; () banked
  2878  00124E  6FE1               	movwf	(setAngle@motor+1)& (0+255),b
  2879  001250  C114  F0E2         	movff	sortBattery@targetAngle,setAngle@angle
  2880  001254  C115  F0E3         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  2881  001258  EC4A  F017         	call	_setAngle	;wreg free
  2882                           
  2883                           ;main.c: 264: _delay((unsigned long)((500)*(10000000/4000.0)));
  2884  00125C  0E07               	movlw	7
  2885  00125E  0100               	movlb	0	; () banked
  2886  001260  6FF8               	movwf	(??_sortBattery+1)& (0+255),b
  2887  001262  0E58               	movlw	88
  2888  001264  0100               	movlb	0	; () banked
  2889  001266  6FF7               	movwf	??_sortBattery& (0+255),b
  2890  001268  0E59               	movlw	89
  2891  00126A                     u7787:
  2892  00126A  2EE8               	decfsz	wreg,f,c
  2893  00126C  D7FE               	bra	u7787
  2894  00126E  2FF7               	decfsz	??_sortBattery& (0+255),f,b
  2895  001270  D7FC               	bra	u7787
  2896  001272  2FF8               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2897  001274  D7FA               	bra	u7787
  2898  001276  D000               	nop2	
  2899                           
  2900                           ;main.c: 268: for(int i = padAngle_CLOSE; i < padAngle_OPEN; i++) {
  2901  001278  C049  F112         	movff	_padAngle_CLOSE,sortBattery@i_223
  2902  00127C  C04A  F113         	movff	_padAngle_CLOSE+1,sortBattery@i_223+1
  2903  001280  D018               	goto	l7030
  2904  001282                     l7024:
  2905                           
  2906                           ;main.c: 269: setAngle(padServo, i);
  2907  001282  0E55               	movlw	low _padServo
  2908  001284  0100               	movlb	0	; () banked
  2909  001286  6FE0               	movwf	setAngle@motor& (0+255),b
  2910  001288  0E00               	movlw	high _padServo
  2911  00128A  0100               	movlb	0	; () banked
  2912  00128C  6FE1               	movwf	(setAngle@motor+1)& (0+255),b
  2913  00128E  C112  F0E2         	movff	sortBattery@i_223,setAngle@angle
  2914  001292  C113  F0E3         	movff	sortBattery@i_223+1,setAngle@angle+1
  2915  001296  EC4A  F017         	call	_setAngle	;wreg free
  2916                           
  2917                           ;main.c: 270: _delay((unsigned long)((3)*(10000000/4000.0)));
  2918  00129A  0E0A               	movlw	10
  2919  00129C  0100               	movlb	0	; () banked
  2920  00129E  6FF7               	movwf	??_sortBattery& (0+255),b
  2921  0012A0  0EBC               	movlw	188
  2922  0012A2                     u7797:
  2923  0012A2  2EE8               	decfsz	wreg,f,c
  2924  0012A4  D7FE               	bra	u7797
  2925  0012A6  2FF7               	decfsz	??_sortBattery& (0+255),f,b
  2926  0012A8  D7FC               	bra	u7797
  2927  0012AA  F000               	nop	
  2928  0012AC  0101               	movlb	1	; () banked
  2929  0012AE  4B12               	infsnz	sortBattery@i_223& (0+255),f,b
  2930  0012B0  2B13               	incf	(sortBattery@i_223+1)& (0+255),f,b
  2931  0012B2                     l7030:
  2932  0012B2  0101               	movlb	1	; () banked
  2933  0012B4  5143               	movf	_padAngle_OPEN& (0+255),w,b
  2934  0012B6  0101               	movlb	1	; () banked
  2935  0012B8  5D12               	subwf	sortBattery@i_223& (0+255),w,b
  2936  0012BA  0101               	movlb	1	; () banked
  2937  0012BC  5113               	movf	(sortBattery@i_223+1)& (0+255),w,b
  2938  0012BE  0A80               	xorlw	128
  2939  0012C0  0100               	movlb	0	; () banked
  2940  0012C2  6FF7               	movwf	??_sortBattery& (0+255),b
  2941  0012C4  0101               	movlb	1	; () banked
  2942  0012C6  5144               	movf	(_padAngle_OPEN+1)& (0+255),w,b
  2943  0012C8  0A80               	xorlw	128
  2944  0012CA  0100               	movlb	0	; () banked
  2945  0012CC  59F7               	subwfb	??_sortBattery& (0+255),w,b
  2946  0012CE  A0D8               	btfss	status,0,c
  2947  0012D0  D7D8               	goto	l7024
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;main.c: 271: }
  2951                           ;main.c: 273: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2952                           
  2953                           ; BSR set to: 0
  2954  0012D2  0E0D               	movlw	13
  2955  0012D4  0100               	movlb	0	; () banked
  2956  0012D6  6FF8               	movwf	(??_sortBattery+1)& (0+255),b
  2957  0012D8  0EAF               	movlw	175
  2958  0012DA  0100               	movlb	0	; () banked
  2959  0012DC  6FF7               	movwf	??_sortBattery& (0+255),b
  2960  0012DE  0EB6               	movlw	182
  2961  0012E0                     u7807:
  2962  0012E0  2EE8               	decfsz	wreg,f,c
  2963  0012E2  D7FE               	bra	u7807
  2964  0012E4  2FF7               	decfsz	??_sortBattery& (0+255),f,b
  2965  0012E6  D7FC               	bra	u7807
  2966  0012E8  2FF8               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2967  0012EA  D7FA               	bra	u7807
  2968  0012EC  F000               	nop	
  2969                           
  2970                           ;main.c: 277: setAngle(padServo, padAngle_NEUTRAL);
  2971  0012EE  0E55               	movlw	low _padServo
  2972  0012F0  0100               	movlb	0	; () banked
  2973  0012F2  6FE0               	movwf	setAngle@motor& (0+255),b
  2974  0012F4  0E00               	movlw	high _padServo
  2975  0012F6  0100               	movlb	0	; () banked
  2976  0012F8  6FE1               	movwf	(setAngle@motor+1)& (0+255),b
  2977  0012FA  C04B  F0E2         	movff	_padAngle_NEUTRAL,setAngle@angle
  2978  0012FE  C04C  F0E3         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  2979  001302  EC4A  F017         	call	_setAngle	;wreg free
  2980                           
  2981                           ;main.c: 281: setAngle(conveyorServo, 130);
  2982  001306  0E4D               	movlw	low _conveyorServo
  2983  001308  0100               	movlb	0	; () banked
  2984  00130A  6FE0               	movwf	setAngle@motor& (0+255),b
  2985  00130C  0E01               	movlw	high _conveyorServo
  2986  00130E  0100               	movlb	0	; () banked
  2987  001310  6FE1               	movwf	(setAngle@motor+1)& (0+255),b
  2988  001312  0E00               	movlw	0
  2989  001314  0100               	movlb	0	; () banked
  2990  001316  6FE3               	movwf	(setAngle@angle+1)& (0+255),b
  2991  001318  0E82               	movlw	130
  2992  00131A  6FE2               	movwf	setAngle@angle& (0+255),b
  2993  00131C  EC4A  F017         	call	_setAngle	;wreg free
  2994                           
  2995                           ;main.c: 282: digitalWrite(cylinderMotor, 1);
  2996  001320  0E55               	movlw	low _cylinderMotor
  2997  001322  6E27               	movwf	digitalWrite@pin,c
  2998  001324  0E01               	movlw	high _cylinderMotor
  2999  001326  6E28               	movwf	digitalWrite@pin+1,c
  3000  001328  0E00               	movlw	0
  3001  00132A  6E2A               	movwf	digitalWrite@val+1,c
  3002  00132C  0E01               	movlw	1
  3003  00132E  6E29               	movwf	digitalWrite@val,c
  3004  001330  ECB0  F017         	call	_digitalWrite	;wreg free
  3005  001334  0012               	return		;funcret
  3006  001336                     __end_of_sortBattery:
  3007                           	opt stack 0
  3008                           tblptru	equ	0xFF8
  3009                           tblptrh	equ	0xFF7
  3010                           tblptrl	equ	0xFF6
  3011                           tablat	equ	0xFF5
  3012                           postinc0	equ	0xFEE
  3013                           wreg	equ	0xFE8
  3014                           postdec1	equ	0xFE5
  3015                           fsr1l	equ	0xFE1
  3016                           status	equ	0xFD8
  3017                           
  3018 ;; *************** function _digitalWrite *****************
  3019 ;; Defined at:
  3020 ;;		line 53 in file "iopin.c"
  3021 ;; Parameters:    Size  Location     Type
  3022 ;;  pin             2   38[COMRAM] PTR int 
  3023 ;;		 -> AA_float(4), cylinderDir(4), redirectingServo(4), conveyorServo(4), 
  3024 ;;		 -> cylinderMotor(4), padServo(4), 
  3025 ;;  val             2   40[COMRAM] int 
  3026 ;; Auto vars:     Size  Location     Type
  3027 ;;  p               2   45[COMRAM] int 
  3028 ;; Return value:  Size  Location     Type
  3029 ;;                  1    wreg      void 
  3030 ;; Registers used:
  3031 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3032 ;; Tracked objects:
  3033 ;;		On entry : 0/0
  3034 ;;		On exit  : 0/0
  3035 ;;		Unchanged: 0/0
  3036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3037 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3038 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3039 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3040 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3041 ;;Total ram usage:        9 bytes
  3042 ;; Hardware stack levels used:    1
  3043 ;; Hardware stack levels required when called:    3
  3044 ;; This function calls:
  3045 ;;		Nothing
  3046 ;; This function is called by:
  3047 ;;		_main
  3048 ;;		_sortBattery
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           	psect	text2
  3053  002F60                     __ptext2:
  3054                           	opt stack 0
  3055  002F60                     _digitalWrite:
  3056                           	opt stack 26
  3057                           
  3058                           ;iopin.c: 54: if(pin){
  3059                           
  3060                           ;incstack = 0
  3061  002F60  5027               	movf	digitalWrite@pin,w,c
  3062  002F62  1028               	iorwf	digitalWrite@pin+1,w,c
  3063  002F64  B4D8               	btfsc	status,2,c
  3064  002F66  0012               	return	
  3065                           
  3066                           ;iopin.c: 55: int p = 1 << pin[1];
  3067  002F68  EE20 F002          	lfsr	2,2
  3068  002F6C  5027               	movf	digitalWrite@pin,w,c
  3069  002F6E  26D9               	addwf	fsr2l,f,c
  3070  002F70  5028               	movf	digitalWrite@pin+1,w,c
  3071  002F72  22DA               	addwfc	fsr2h,f,c
  3072  002F74  50DF               	movf	indf2,w,c
  3073  002F76  6E2B               	movwf	??_digitalWrite& (0+255),c
  3074  002F78  0E01               	movlw	1
  3075  002F7A  6E2C               	movwf	(??_digitalWrite+1)& (0+255),c
  3076  002F7C  0E00               	movlw	0
  3077  002F7E  6E2D               	movwf	(??_digitalWrite+2)& (0+255),c
  3078  002F80  2A2B               	incf	??_digitalWrite,f,c
  3079  002F82  D003               	goto	u7124
  3080  002F84                     u7125:
  3081  002F84  90D8               	bcf	status,0,c
  3082  002F86  362C               	rlcf	??_digitalWrite+1,f,c
  3083  002F88  362D               	rlcf	??_digitalWrite+2,f,c
  3084  002F8A                     u7124:
  3085  002F8A  2E2B               	decfsz	??_digitalWrite,f,c
  3086  002F8C  D7FB               	goto	u7125
  3087  002F8E  C02C  F02E         	movff	??_digitalWrite+1,digitalWrite@p
  3088  002F92  C02D  F02F         	movff	??_digitalWrite+2,digitalWrite@p+1
  3089                           
  3090                           ;iopin.c: 56: if(val == 0){
  3091  002F96  5029               	movf	digitalWrite@val,w,c
  3092  002F98  102A               	iorwf	digitalWrite@val+1,w,c
  3093  002F9A  A4D8               	btfss	status,2,c
  3094  002F9C  D02B               	goto	l6766
  3095                           
  3096                           ;iopin.c: 57: p ^= 0xff;
  3097  002F9E  0EFF               	movlw	255
  3098  002FA0  1A2E               	xorwf	digitalWrite@p,f,c
  3099                           
  3100                           ;iopin.c: 58: }
  3101                           ;iopin.c: 60: switch(pin[0]){
  3102  002FA2  D028               	goto	l6766
  3103  002FA4                     l6742:
  3104  002FA4  0429               	decf	digitalWrite@val,w,c
  3105  002FA6  102A               	iorwf	digitalWrite@val+1,w,c
  3106  002FA8  A4D8               	btfss	status,2,c
  3107  002FAA  D003               	goto	l6746
  3108  002FAC  502E               	movf	digitalWrite@p,w,c
  3109  002FAE  1289               	iorwf	3977,f,c	;volatile
  3110  002FB0  0012               	return	
  3111  002FB2                     l6746:
  3112                           
  3113                           ;iopin.c: 62: else LATA &= p;
  3114  002FB2  502E               	movf	digitalWrite@p,w,c
  3115  002FB4  1689               	andwf	3977,f,c	;volatile
  3116                           
  3117                           ;iopin.c: 63: break;
  3118  002FB6  0012               	return	
  3119  002FB8                     l6748:
  3120  002FB8  0429               	decf	digitalWrite@val,w,c
  3121  002FBA  102A               	iorwf	digitalWrite@val+1,w,c
  3122  002FBC  A4D8               	btfss	status,2,c
  3123  002FBE  D003               	goto	l6752
  3124  002FC0  502E               	movf	digitalWrite@p,w,c
  3125  002FC2  128A               	iorwf	3978,f,c	;volatile
  3126  002FC4  0012               	return	
  3127  002FC6                     l6752:
  3128                           
  3129                           ;iopin.c: 65: else LATB &= p;
  3130  002FC6  502E               	movf	digitalWrite@p,w,c
  3131  002FC8  168A               	andwf	3978,f,c	;volatile
  3132                           
  3133                           ;iopin.c: 66: break;
  3134  002FCA  0012               	return	
  3135  002FCC                     l6754:
  3136  002FCC  0429               	decf	digitalWrite@val,w,c
  3137  002FCE  102A               	iorwf	digitalWrite@val+1,w,c
  3138  002FD0  A4D8               	btfss	status,2,c
  3139  002FD2  D003               	goto	l6758
  3140  002FD4  502E               	movf	digitalWrite@p,w,c
  3141  002FD6  128B               	iorwf	3979,f,c	;volatile
  3142  002FD8  0012               	return	
  3143  002FDA                     l6758:
  3144                           
  3145                           ;iopin.c: 68: else LATC &= p;
  3146  002FDA  502E               	movf	digitalWrite@p,w,c
  3147  002FDC  168B               	andwf	3979,f,c	;volatile
  3148                           
  3149                           ;iopin.c: 69: break;
  3150  002FDE  0012               	return	
  3151  002FE0                     l6760:
  3152  002FE0  0429               	decf	digitalWrite@val,w,c
  3153  002FE2  102A               	iorwf	digitalWrite@val+1,w,c
  3154  002FE4  A4D8               	btfss	status,2,c
  3155  002FE6  D003               	goto	l6764
  3156  002FE8  502E               	movf	digitalWrite@p,w,c
  3157  002FEA  128C               	iorwf	3980,f,c	;volatile
  3158  002FEC  0012               	return	
  3159  002FEE                     l6764:
  3160                           
  3161                           ;iopin.c: 71: else LATD &= p;
  3162  002FEE  502E               	movf	digitalWrite@p,w,c
  3163  002FF0  168C               	andwf	3980,f,c	;volatile
  3164                           
  3165                           ;iopin.c: 72: }
  3166  002FF2  0012               	return	
  3167  002FF4                     l6766:
  3168  002FF4  C027  FFD9         	movff	digitalWrite@pin,fsr2l
  3169  002FF8  C028  FFDA         	movff	digitalWrite@pin+1,fsr2h
  3170  002FFC  CFDE F02B          	movff	postinc2,??_digitalWrite
  3171  003000  CFDD F02C          	movff	postdec2,??_digitalWrite+1
  3172                           
  3173                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3174                           ; Switch size 1, requested type "space"
  3175                           ; Number of cases is 1, Range of values is 0 to 0
  3176                           ; switch strategies available:
  3177                           ; Name         Instructions Cycles
  3178                           ; simple_byte            4     3 (average)
  3179                           ;	Chosen strategy is simple_byte
  3180  003004  502C               	movf	??_digitalWrite+1,w,c
  3181  003006  0A00               	xorlw	0	; case 0
  3182  003008  A4D8               	btfss	status,2,c
  3183  00300A  0012               	return	
  3184                           
  3185                           ; Switch size 1, requested type "space"
  3186                           ; Number of cases is 4, Range of values is 0 to 3
  3187                           ; switch strategies available:
  3188                           ; Name         Instructions Cycles
  3189                           ; simple_byte           13     7 (average)
  3190                           ;	Chosen strategy is simple_byte
  3191  00300C  502B               	movf	??_digitalWrite,w,c
  3192  00300E  0A00               	xorlw	0	; case 0
  3193  003010  B4D8               	btfsc	status,2,c
  3194  003012  D7C8               	goto	l6742
  3195  003014  0A01               	xorlw	1	; case 1
  3196  003016  B4D8               	btfsc	status,2,c
  3197  003018  D7CF               	goto	l6748
  3198  00301A  0A03               	xorlw	3	; case 2
  3199  00301C  B4D8               	btfsc	status,2,c
  3200  00301E  D7D6               	goto	l6754
  3201  003020  0A01               	xorlw	1	; case 3
  3202  003022  A4D8               	btfss	status,2,c
  3203  003024  0012               	return	
  3204  003026  D7DC               	goto	l6760
  3205  003028                     __end_of_digitalWrite:
  3206                           	opt stack 0
  3207                           tblptru	equ	0xFF8
  3208                           tblptrh	equ	0xFF7
  3209                           tblptrl	equ	0xFF6
  3210                           tablat	equ	0xFF5
  3211                           postinc0	equ	0xFEE
  3212                           wreg	equ	0xFE8
  3213                           postdec1	equ	0xFE5
  3214                           fsr1l	equ	0xFE1
  3215                           indf2	equ	0xFDF
  3216                           postinc2	equ	0xFDE
  3217                           postdec2	equ	0xFDD
  3218                           fsr2h	equ	0xFDA
  3219                           fsr2l	equ	0xFD9
  3220                           status	equ	0xFD8
  3221                           
  3222 ;; *************** function _digitalRead *****************
  3223 ;; Defined at:
  3224 ;;		line 43 in file "iopin.c"
  3225 ;; Parameters:    Size  Location     Type
  3226 ;;  pin             2   38[COMRAM] PTR int 
  3227 ;;		 -> padPin2(4), padPin1(4), cylinderDir(4), 
  3228 ;; Auto vars:     Size  Location     Type
  3229 ;;		None
  3230 ;; Return value:  Size  Location     Type
  3231 ;;                  2   38[COMRAM] int 
  3232 ;; Registers used:
  3233 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3234 ;; Tracked objects:
  3235 ;;		On entry : 0/0
  3236 ;;		On exit  : 0/0
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3239 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3241 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3242 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3243 ;;Total ram usage:        4 bytes
  3244 ;; Hardware stack levels used:    1
  3245 ;; Hardware stack levels required when called:    3
  3246 ;; This function calls:
  3247 ;;		Nothing
  3248 ;; This function is called by:
  3249 ;;		_main
  3250 ;;		_sortBattery
  3251 ;; This function uses a non-reentrant model
  3252 ;;
  3253                           
  3254                           	psect	text3
  3255  002B06                     __ptext3:
  3256                           	opt stack 0
  3257  002B06                     _digitalRead:
  3258                           	opt stack 26
  3259                           
  3260                           ;iopin.c: 44: switch(pin[0]){
  3261                           
  3262                           ;incstack = 0
  3263  002B06  D058               	goto	l6792
  3264  002B08                     l6774:
  3265  002B08  EE20 F002          	lfsr	2,2
  3266  002B0C  5027               	movf	digitalRead@pin,w,c
  3267  002B0E  26D9               	addwf	fsr2l,f,c
  3268  002B10  5028               	movf	digitalRead@pin+1,w,c
  3269  002B12  22DA               	addwfc	fsr2h,f,c
  3270  002B14  50DF               	movf	indf2,w,c
  3271  002B16  6E29               	movwf	??_digitalRead& (0+255),c
  3272  002B18  CF80 F02A          	movff	3968,??_digitalRead+1	;volatile
  3273  002B1C  2A29               	incf	??_digitalRead,f,c
  3274  002B1E  D002               	goto	u7184
  3275  002B20                     u7185:
  3276  002B20  90D8               	bcf	status,0,c
  3277  002B22  322A               	rrcf	??_digitalRead+1,f,c
  3278  002B24                     u7184:
  3279  002B24  2E29               	decfsz	??_digitalRead,f,c
  3280  002B26  D7FC               	goto	u7185
  3281  002B28  0E01               	movlw	1
  3282  002B2A  162A               	andwf	??_digitalRead+1,f,c
  3283  002B2C  502A               	movf	??_digitalRead+1,w,c
  3284  002B2E  6E27               	movwf	?_digitalRead,c
  3285  002B30  6A28               	clrf	?_digitalRead+1,c
  3286  002B32  0012               	return	
  3287  002B34                     l6778:
  3288  002B34  EE20 F002          	lfsr	2,2
  3289  002B38  5027               	movf	digitalRead@pin,w,c
  3290  002B3A  26D9               	addwf	fsr2l,f,c
  3291  002B3C  5028               	movf	digitalRead@pin+1,w,c
  3292  002B3E  22DA               	addwfc	fsr2h,f,c
  3293  002B40  50DF               	movf	indf2,w,c
  3294  002B42  6E29               	movwf	??_digitalRead& (0+255),c
  3295  002B44  CF81 F02A          	movff	3969,??_digitalRead+1	;volatile
  3296  002B48  2A29               	incf	??_digitalRead,f,c
  3297  002B4A  D002               	goto	u7194
  3298  002B4C                     u7195:
  3299  002B4C  90D8               	bcf	status,0,c
  3300  002B4E  322A               	rrcf	??_digitalRead+1,f,c
  3301  002B50                     u7194:
  3302  002B50  2E29               	decfsz	??_digitalRead,f,c
  3303  002B52  D7FC               	goto	u7195
  3304  002B54  0E01               	movlw	1
  3305  002B56  162A               	andwf	??_digitalRead+1,f,c
  3306  002B58  502A               	movf	??_digitalRead+1,w,c
  3307  002B5A  6E27               	movwf	?_digitalRead,c
  3308  002B5C  6A28               	clrf	?_digitalRead+1,c
  3309  002B5E  0012               	return	
  3310  002B60                     l6782:
  3311  002B60  EE20 F002          	lfsr	2,2
  3312  002B64  5027               	movf	digitalRead@pin,w,c
  3313  002B66  26D9               	addwf	fsr2l,f,c
  3314  002B68  5028               	movf	digitalRead@pin+1,w,c
  3315  002B6A  22DA               	addwfc	fsr2h,f,c
  3316  002B6C  50DF               	movf	indf2,w,c
  3317  002B6E  6E29               	movwf	??_digitalRead& (0+255),c
  3318  002B70  CF82 F02A          	movff	3970,??_digitalRead+1	;volatile
  3319  002B74  2A29               	incf	??_digitalRead,f,c
  3320  002B76  D002               	goto	u7204
  3321  002B78                     u7205:
  3322  002B78  90D8               	bcf	status,0,c
  3323  002B7A  322A               	rrcf	??_digitalRead+1,f,c
  3324  002B7C                     u7204:
  3325  002B7C  2E29               	decfsz	??_digitalRead,f,c
  3326  002B7E  D7FC               	goto	u7205
  3327  002B80  0E01               	movlw	1
  3328  002B82  162A               	andwf	??_digitalRead+1,f,c
  3329  002B84  502A               	movf	??_digitalRead+1,w,c
  3330  002B86  6E27               	movwf	?_digitalRead,c
  3331  002B88  6A28               	clrf	?_digitalRead+1,c
  3332  002B8A  0012               	return	
  3333  002B8C                     l6786:
  3334  002B8C  EE20 F002          	lfsr	2,2
  3335  002B90  5027               	movf	digitalRead@pin,w,c
  3336  002B92  26D9               	addwf	fsr2l,f,c
  3337  002B94  5028               	movf	digitalRead@pin+1,w,c
  3338  002B96  22DA               	addwfc	fsr2h,f,c
  3339  002B98  50DF               	movf	indf2,w,c
  3340  002B9A  6E29               	movwf	??_digitalRead& (0+255),c
  3341  002B9C  CF83 F02A          	movff	3971,??_digitalRead+1	;volatile
  3342  002BA0  2A29               	incf	??_digitalRead,f,c
  3343  002BA2  D002               	goto	u7214
  3344  002BA4                     u7215:
  3345  002BA4  90D8               	bcf	status,0,c
  3346  002BA6  322A               	rrcf	??_digitalRead+1,f,c
  3347  002BA8                     u7214:
  3348  002BA8  2E29               	decfsz	??_digitalRead,f,c
  3349  002BAA  D7FC               	goto	u7215
  3350  002BAC  0E01               	movlw	1
  3351  002BAE  162A               	andwf	??_digitalRead+1,f,c
  3352  002BB0  502A               	movf	??_digitalRead+1,w,c
  3353  002BB2  6E27               	movwf	?_digitalRead,c
  3354  002BB4  6A28               	clrf	?_digitalRead+1,c
  3355  002BB6  0012               	return	
  3356  002BB8                     l6792:
  3357  002BB8  C027  FFD9         	movff	digitalRead@pin,fsr2l
  3358  002BBC  C028  FFDA         	movff	digitalRead@pin+1,fsr2h
  3359  002BC0  CFDE F029          	movff	postinc2,??_digitalRead
  3360  002BC4  CFDD F02A          	movff	postdec2,??_digitalRead+1
  3361                           
  3362                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3363                           ; Switch size 1, requested type "space"
  3364                           ; Number of cases is 1, Range of values is 0 to 0
  3365                           ; switch strategies available:
  3366                           ; Name         Instructions Cycles
  3367                           ; simple_byte            4     3 (average)
  3368                           ;	Chosen strategy is simple_byte
  3369  002BC8  502A               	movf	??_digitalRead+1,w,c
  3370  002BCA  0A00               	xorlw	0	; case 0
  3371  002BCC  A4D8               	btfss	status,2,c
  3372  002BCE  D00D               	goto	l327
  3373                           
  3374                           ; Switch size 1, requested type "space"
  3375                           ; Number of cases is 4, Range of values is 0 to 3
  3376                           ; switch strategies available:
  3377                           ; Name         Instructions Cycles
  3378                           ; simple_byte           13     7 (average)
  3379                           ;	Chosen strategy is simple_byte
  3380  002BD0  5029               	movf	??_digitalRead,w,c
  3381  002BD2  0A00               	xorlw	0	; case 0
  3382  002BD4  B4D8               	btfsc	status,2,c
  3383  002BD6  D798               	goto	l6774
  3384  002BD8  0A01               	xorlw	1	; case 1
  3385  002BDA  B4D8               	btfsc	status,2,c
  3386  002BDC  D7AB               	goto	l6778
  3387  002BDE  0A03               	xorlw	3	; case 2
  3388  002BE0  B4D8               	btfsc	status,2,c
  3389  002BE2  D7BE               	goto	l6782
  3390  002BE4  0A01               	xorlw	1	; case 3
  3391  002BE6  B4D8               	btfsc	status,2,c
  3392  002BE8  D7D1               	goto	l6786
  3393  002BEA                     l327:
  3394                           
  3395                           ;iopin.c: 50: return -1;
  3396  002BEA  6827               	setf	?_digitalRead,c
  3397  002BEC  6828               	setf	?_digitalRead+1,c
  3398  002BEE  0012               	return		;funcret
  3399  002BF0                     __end_of_digitalRead:
  3400                           	opt stack 0
  3401                           tblptru	equ	0xFF8
  3402                           tblptrh	equ	0xFF7
  3403                           tblptrl	equ	0xFF6
  3404                           tablat	equ	0xFF5
  3405                           postinc0	equ	0xFEE
  3406                           wreg	equ	0xFE8
  3407                           postdec1	equ	0xFE5
  3408                           fsr1l	equ	0xFE1
  3409                           indf2	equ	0xFDF
  3410                           postinc2	equ	0xFDE
  3411                           postdec2	equ	0xFDD
  3412                           fsr2h	equ	0xFDA
  3413                           fsr2l	equ	0xFD9
  3414                           status	equ	0xFD8
  3415                           
  3416 ;; *************** function _analogRead *****************
  3417 ;; Defined at:
  3418 ;;		line 90 in file "iopin.c"
  3419 ;; Parameters:    Size  Location     Type
  3420 ;;  channel         2   38[COMRAM] int 
  3421 ;; Auto vars:     Size  Location     Type
  3422 ;;		None
  3423 ;; Return value:  Size  Location     Type
  3424 ;;                  4   38[COMRAM] long 
  3425 ;; Registers used:
  3426 ;;		wreg, status,2, status,0
  3427 ;; Tracked objects:
  3428 ;;		On entry : 0/0
  3429 ;;		On exit  : 0/0
  3430 ;;		Unchanged: 0/0
  3431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3432 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3434 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3435 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3436 ;;Total ram usage:        6 bytes
  3437 ;; Hardware stack levels used:    1
  3438 ;; Hardware stack levels required when called:    3
  3439 ;; This function calls:
  3440 ;;		Nothing
  3441 ;; This function is called by:
  3442 ;;		_sortBattery
  3443 ;; This function uses a non-reentrant model
  3444 ;;
  3445                           
  3446                           	psect	text4
  3447  0038B8                     __ptext4:
  3448                           	opt stack 0
  3449  0038B8                     _analogRead:
  3450                           	opt stack 26
  3451                           
  3452                           ;iopin.c: 91: ADCON0 = channel<<2;
  3453                           
  3454                           ;incstack = 0
  3455  0038B8  4427               	rlncf	analogRead@channel,w,c
  3456  0038BA  46E8               	rlncf	wreg,f,c
  3457  0038BC  0BFC               	andlw	252
  3458  0038BE  6EC2               	movwf	4034,c	;volatile
  3459                           
  3460                           ;iopin.c: 92: ADCON0 |= 1<<0;
  3461  0038C0  80C2               	bsf	4034,0,c	;volatile
  3462                           
  3463                           ;iopin.c: 93: ADCON0 |= 1<<1;
  3464  0038C2  82C2               	bsf	4034,1,c	;volatile
  3465  0038C4                     l352:
  3466  0038C4  B2C2               	btfsc	4034,1,c	;volatile
  3467  0038C6  D7FE               	goto	l352
  3468                           
  3469                           ;iopin.c: 97: return (ADRESH<<8) + ADRESL;
  3470  0038C8  50C3               	movf	4035,w,c	;volatile
  3471  0038CA  CFC4 F02B          	movff	4036,??_analogRead	;volatile
  3472  0038CE  6A2C               	clrf	(??_analogRead+1)& (0+255),c
  3473  0038D0  C02B  F02C         	movff	??_analogRead,??_analogRead+1
  3474  0038D4  6A2B               	clrf	??_analogRead,c
  3475  0038D6  262B               	addwf	??_analogRead,f,c
  3476  0038D8  0E00               	movlw	0
  3477  0038DA  222C               	addwfc	??_analogRead+1,f,c
  3478  0038DC  C02B  F027         	movff	??_analogRead,?_analogRead
  3479  0038E0  C02C  F028         	movff	??_analogRead+1,?_analogRead+1
  3480  0038E4  0E00               	movlw	0
  3481  0038E6  BE28               	btfsc	?_analogRead+1,7,c
  3482  0038E8  0EFF               	movlw	-1
  3483  0038EA  6E29               	movwf	?_analogRead+2,c
  3484  0038EC  6E2A               	movwf	?_analogRead+3,c
  3485  0038EE  0012               	return	
  3486  0038F0                     __end_of_analogRead:
  3487                           	opt stack 0
  3488                           tblptru	equ	0xFF8
  3489                           tblptrh	equ	0xFF7
  3490                           tblptrl	equ	0xFF6
  3491                           tablat	equ	0xFF5
  3492                           postinc0	equ	0xFEE
  3493                           wreg	equ	0xFE8
  3494                           postdec1	equ	0xFE5
  3495                           fsr1l	equ	0xFE1
  3496                           indf2	equ	0xFDF
  3497                           postinc2	equ	0xFDE
  3498                           postdec2	equ	0xFDD
  3499                           fsr2h	equ	0xFDA
  3500                           fsr2l	equ	0xFD9
  3501                           status	equ	0xFD8
  3502                           
  3503 ;; *************** function _showInterface *****************
  3504 ;; Defined at:
  3505 ;;		line 16 in file "interface.c"
  3506 ;; Parameters:    Size  Location     Type
  3507 ;;		None
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;  key             1  120[BANK0 ] unsigned char 
  3510 ;; Return value:  Size  Location     Type
  3511 ;;                  1    wreg      void 
  3512 ;; Registers used:
  3513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3514 ;; Tracked objects:
  3515 ;;		On entry : 0/0
  3516 ;;		On exit  : 0/0
  3517 ;;		Unchanged: 0/0
  3518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3520 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3522 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3523 ;;Total ram usage:        1 bytes
  3524 ;; Hardware stack levels used:    1
  3525 ;; Hardware stack levels required when called:    9
  3526 ;; This function calls:
  3527 ;;		_dateTime
  3528 ;;		_mainMenu
  3529 ;;		_readKeypad
  3530 ;;		_runMenu
  3531 ;;		_runSelect
  3532 ;;		_runStats
  3533 ;;		_runTime
  3534 ;; This function is called by:
  3535 ;;		_main
  3536 ;; This function uses a non-reentrant model
  3537 ;;
  3538                           
  3539                           	psect	text5
  3540  002806                     __ptext5:
  3541                           	opt stack 0
  3542  002806                     _showInterface:
  3543                           	opt stack 21
  3544  002806                     
  3545                           ;interface.c: 23: dateTime();
  3546  002806  EC29  F01D         	call	_dateTime	;wreg free
  3547  00280A                     l6868:
  3548  00280A  EC3C  F01D         	call	_readKeypad	;wreg free
  3549  00280E  0A41               	xorlw	65
  3550  002810  A4D8               	btfss	status,2,c
  3551  002812  D7FB               	goto	l6868
  3552  002814                     l6870:
  3553                           
  3554                           ;interface.c: 28: mainMenu();
  3555  002814  EC16  F01D         	call	_mainMenu	;wreg free
  3556  002818                     l6872:
  3557  002818  EC3C  F01D         	call	_readKeypad	;wreg free
  3558  00281C  0100               	movlb	0	; () banked
  3559  00281E  6FF8               	movwf	showInterface@key& (0+255),b
  3560                           
  3561                           ; BSR set to: 0
  3562                           ;interface.c: 32: while(key != 'B' && key != 'C' && key != '*');
  3563  002820  0E42               	movlw	66
  3564  002822  0100               	movlb	0	; () banked
  3565  002824  19F8               	xorwf	showInterface@key& (0+255),w,b
  3566  002826  B4D8               	btfsc	status,2,c
  3567  002828  D00A               	goto	l6880
  3568                           
  3569                           ; BSR set to: 0
  3570  00282A  0E43               	movlw	67
  3571  00282C  0100               	movlb	0	; () banked
  3572  00282E  19F8               	xorwf	showInterface@key& (0+255),w,b
  3573  002830  B4D8               	btfsc	status,2,c
  3574  002832  D005               	goto	l6880
  3575                           
  3576                           ; BSR set to: 0
  3577  002834  0E2A               	movlw	42
  3578  002836  0100               	movlb	0	; () banked
  3579  002838  19F8               	xorwf	showInterface@key& (0+255),w,b
  3580  00283A  A4D8               	btfss	status,2,c
  3581  00283C  D7ED               	goto	l6872
  3582  00283E                     l6880:
  3583                           
  3584                           ; BSR set to: 0
  3585                           ;interface.c: 34: if(key == 'C'){
  3586  00283E  0E43               	movlw	67
  3587  002840  0100               	movlb	0	; () banked
  3588  002842  19F8               	xorwf	showInterface@key& (0+255),w,b
  3589  002844  A4D8               	btfss	status,2,c
  3590  002846  D056               	goto	l6924
  3591                           
  3592                           ; BSR set to: 0
  3593                           ;interface.c: 36: runSelect();
  3594  002848  EC03  F01D         	call	_runSelect	;wreg free
  3595  00284C                     l6884:
  3596  00284C  EC3C  F01D         	call	_readKeypad	;wreg free
  3597  002850  0100               	movlb	0	; () banked
  3598  002852  6FF8               	movwf	showInterface@key& (0+255),b
  3599                           
  3600                           ; BSR set to: 0
  3601                           ;interface.c: 42: while(key != '1' && key != '2' && key != '3' && key != '4' && key != '
      +                          *');
  3602  002854  0E31               	movlw	49
  3603  002856  0100               	movlb	0	; () banked
  3604  002858  19F8               	xorwf	showInterface@key& (0+255),w,b
  3605  00285A  B4D8               	btfsc	status,2,c
  3606  00285C  D014               	goto	l6896
  3607                           
  3608                           ; BSR set to: 0
  3609  00285E  0E32               	movlw	50
  3610  002860  0100               	movlb	0	; () banked
  3611  002862  19F8               	xorwf	showInterface@key& (0+255),w,b
  3612  002864  B4D8               	btfsc	status,2,c
  3613  002866  D00F               	goto	l6896
  3614                           
  3615                           ; BSR set to: 0
  3616  002868  0E33               	movlw	51
  3617  00286A  0100               	movlb	0	; () banked
  3618  00286C  19F8               	xorwf	showInterface@key& (0+255),w,b
  3619  00286E  B4D8               	btfsc	status,2,c
  3620  002870  D00A               	goto	l6896
  3621                           
  3622                           ; BSR set to: 0
  3623  002872  0E34               	movlw	52
  3624  002874  0100               	movlb	0	; () banked
  3625  002876  19F8               	xorwf	showInterface@key& (0+255),w,b
  3626  002878  B4D8               	btfsc	status,2,c
  3627  00287A  D005               	goto	l6896
  3628                           
  3629                           ; BSR set to: 0
  3630  00287C  0E2A               	movlw	42
  3631  00287E  0100               	movlb	0	; () banked
  3632  002880  19F8               	xorwf	showInterface@key& (0+255),w,b
  3633  002882  A4D8               	btfss	status,2,c
  3634  002884  D7E3               	goto	l6884
  3635  002886                     l6896:
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;interface.c: 44: if(key == '*')continue;
  3639  002886  0E2A               	movlw	42
  3640  002888  0100               	movlb	0	; () banked
  3641  00288A  19F8               	xorwf	showInterface@key& (0+255),w,b
  3642  00288C  B4D8               	btfsc	status,2,c
  3643  00288E  D7C2               	goto	l6870
  3644  002890                     l6900:
  3645                           
  3646                           ;interface.c: 50: runMenu(key);
  3647  002890  0100               	movlb	0	; () banked
  3648  002892  51F8               	movf	showInterface@key& (0+255),w,b
  3649  002894  EC94  F01C         	call	_runMenu
  3650  002898                     l6902:
  3651  002898  EC3C  F01D         	call	_readKeypad	;wreg free
  3652  00289C  0100               	movlb	0	; () banked
  3653  00289E  6FF8               	movwf	showInterface@key& (0+255),b
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;interface.c: 54: while(key != 'A' && key != 'B' && key != '*');
  3657  0028A0  0E41               	movlw	65
  3658  0028A2  0100               	movlb	0	; () banked
  3659  0028A4  19F8               	xorwf	showInterface@key& (0+255),w,b
  3660  0028A6  B4D8               	btfsc	status,2,c
  3661  0028A8  D00A               	goto	l6910
  3662                           
  3663                           ; BSR set to: 0
  3664  0028AA  0E42               	movlw	66
  3665  0028AC  0100               	movlb	0	; () banked
  3666  0028AE  19F8               	xorwf	showInterface@key& (0+255),w,b
  3667  0028B0  B4D8               	btfsc	status,2,c
  3668  0028B2  D005               	goto	l6910
  3669                           
  3670                           ; BSR set to: 0
  3671  0028B4  0E2A               	movlw	42
  3672  0028B6  0100               	movlb	0	; () banked
  3673  0028B8  19F8               	xorwf	showInterface@key& (0+255),w,b
  3674  0028BA  A4D8               	btfss	status,2,c
  3675  0028BC  D7ED               	goto	l6902
  3676  0028BE                     l6910:
  3677                           
  3678                           ; BSR set to: 0
  3679                           ;interface.c: 56: if(key == 'A'){
  3680  0028BE  0E41               	movlw	65
  3681  0028C0  0100               	movlb	0	; () banked
  3682  0028C2  19F8               	xorwf	showInterface@key& (0+255),w,b
  3683  0028C4  A4D8               	btfss	status,2,c
  3684  0028C6  D003               	goto	l6914
  3685                           
  3686                           ; BSR set to: 0
  3687                           ;interface.c: 58: runTime();
  3688  0028C8  ECDD  F01C         	call	_runTime	;wreg free
  3689                           
  3690                           ;interface.c: 60: }
  3691  0028CC  D00D               	goto	l6922
  3692  0028CE                     l6914:
  3693                           
  3694                           ;interface.c: 61: else if(key == 'B'){
  3695  0028CE  0E42               	movlw	66
  3696  0028D0  0100               	movlb	0	; () banked
  3697  0028D2  19F8               	xorwf	showInterface@key& (0+255),w,b
  3698  0028D4  A4D8               	btfss	status,2,c
  3699  0028D6  D003               	goto	l6918
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;interface.c: 63: runStats();
  3703  0028D8  ECF0  F01C         	call	_runStats	;wreg free
  3704                           
  3705                           ;interface.c: 65: }
  3706  0028DC  D005               	goto	l6922
  3707  0028DE                     l6918:
  3708                           
  3709                           ;interface.c: 66: else if(key == '*')break;
  3710  0028DE  0E2A               	movlw	42
  3711  0028E0  0100               	movlb	0	; () banked
  3712  0028E2  19F8               	xorwf	showInterface@key& (0+255),w,b
  3713  0028E4  B4D8               	btfsc	status,2,c
  3714  0028E6  D796               	goto	l6870
  3715  0028E8                     l6922:
  3716  0028E8  EC3C  F01D         	call	_readKeypad	;wreg free
  3717  0028EC  0A2A               	xorlw	42
  3718  0028EE  B4D8               	btfsc	status,2,c
  3719  0028F0  D7CF               	goto	l6900
  3720  0028F2  D7FA               	goto	l6922
  3721  0028F4                     l6924:
  3722                           
  3723                           ;interface.c: 72: else if(key == 'B'){
  3724  0028F4  0E42               	movlw	66
  3725  0028F6  0100               	movlb	0	; () banked
  3726  0028F8  19F8               	xorwf	showInterface@key& (0+255),w,b
  3727  0028FA  B4D8               	btfsc	status,2,c
  3728  0028FC  0012               	return	
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;interface.c: 75: else if(key == '*')
  3732                           
  3733                           ; BSR set to: 0
  3734                           
  3735                           ; BSR set to: 0
  3736                           ;interface.c: 74: }
  3737                           
  3738                           ; BSR set to: 0
  3739                           ;interface.c: 73: return;
  3740  0028FE  0E2A               	movlw	42
  3741  002900  0100               	movlb	0	; () banked
  3742  002902  19F8               	xorwf	showInterface@key& (0+255),w,b
  3743  002904  B4D8               	btfsc	status,2,c
  3744  002906  D77F               	goto	l6866
  3745  002908  D785               	goto	l6870
  3746  00290A                     __end_of_showInterface:
  3747                           	opt stack 0
  3748                           tblptru	equ	0xFF8
  3749                           tblptrh	equ	0xFF7
  3750                           tblptrl	equ	0xFF6
  3751                           tablat	equ	0xFF5
  3752                           postinc0	equ	0xFEE
  3753                           wreg	equ	0xFE8
  3754                           postdec1	equ	0xFE5
  3755                           fsr1l	equ	0xFE1
  3756                           indf2	equ	0xFDF
  3757                           postinc2	equ	0xFDE
  3758                           postdec2	equ	0xFDD
  3759                           fsr2h	equ	0xFDA
  3760                           fsr2l	equ	0xFD9
  3761                           status	equ	0xFD8
  3762                           
  3763 ;; *************** function _runTime *****************
  3764 ;; Defined at:
  3765 ;;		line 117 in file "interface.c"
  3766 ;; Parameters:    Size  Location     Type
  3767 ;;		None
  3768 ;; Auto vars:     Size  Location     Type
  3769 ;;		None
  3770 ;; Return value:  Size  Location     Type
  3771 ;;                  1    wreg      void 
  3772 ;; Registers used:
  3773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3774 ;; Tracked objects:
  3775 ;;		On entry : 0/0
  3776 ;;		On exit  : 0/0
  3777 ;;		Unchanged: 0/0
  3778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3783 ;;Total ram usage:        0 bytes
  3784 ;; Hardware stack levels used:    1
  3785 ;; Hardware stack levels required when called:    8
  3786 ;; This function calls:
  3787 ;;		_lcdClear
  3788 ;;		_printf
  3789 ;; This function is called by:
  3790 ;;		_showInterface
  3791 ;; This function uses a non-reentrant model
  3792 ;;
  3793                           
  3794                           	psect	text6
  3795  0039BA                     __ptext6:
  3796                           	opt stack 0
  3797  0039BA                     _runTime:
  3798                           	opt stack 21
  3799                           
  3800                           ;interface.c: 118: lcdClear();
  3801                           
  3802                           ; BSR set to: 0
  3803                           ;incstack = 0
  3804  0039BA  EC9E  F01D         	call	_lcdClear	;wreg free
  3805                           
  3806                           ;interface.c: 119: printf("time: nnn sec   \n");
  3807  0039BE  0E14               	movlw	low STR_15
  3808  0039C0  0100               	movlb	0	; () banked
  3809  0039C2  6FC9               	movwf	printf@f& (0+255),b
  3810  0039C4  0EFF               	movlw	high STR_15
  3811  0039C6  0100               	movlb	0	; () banked
  3812  0039C8  6FCA               	movwf	(printf@f+1)& (0+255),b
  3813  0039CA  EC09  F000         	call	_printf	;wreg free
  3814                           
  3815                           ;interface.c: 120: printf("              *>");
  3816  0039CE  0E49               	movlw	low STR_16
  3817  0039D0  0100               	movlb	0	; () banked
  3818  0039D2  6FC9               	movwf	printf@f& (0+255),b
  3819  0039D4  0EFF               	movlw	high STR_16
  3820  0039D6  0100               	movlb	0	; () banked
  3821  0039D8  6FCA               	movwf	(printf@f+1)& (0+255),b
  3822  0039DA  EC09  F000         	call	_printf	;wreg free
  3823  0039DE  0012               	return		;funcret
  3824  0039E0                     __end_of_runTime:
  3825                           	opt stack 0
  3826                           tblptru	equ	0xFF8
  3827                           tblptrh	equ	0xFF7
  3828                           tblptrl	equ	0xFF6
  3829                           tablat	equ	0xFF5
  3830                           postinc0	equ	0xFEE
  3831                           wreg	equ	0xFE8
  3832                           postdec1	equ	0xFE5
  3833                           fsr1l	equ	0xFE1
  3834                           indf2	equ	0xFDF
  3835                           postinc2	equ	0xFDE
  3836                           postdec2	equ	0xFDD
  3837                           fsr2h	equ	0xFDA
  3838                           fsr2l	equ	0xFD9
  3839                           status	equ	0xFD8
  3840                           
  3841 ;; *************** function _runStats *****************
  3842 ;; Defined at:
  3843 ;;		line 123 in file "interface.c"
  3844 ;; Parameters:    Size  Location     Type
  3845 ;;		None
  3846 ;; Auto vars:     Size  Location     Type
  3847 ;;		None
  3848 ;; Return value:  Size  Location     Type
  3849 ;;                  1    wreg      void 
  3850 ;; Registers used:
  3851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3852 ;; Tracked objects:
  3853 ;;		On entry : 0/0
  3854 ;;		On exit  : 0/0
  3855 ;;		Unchanged: 0/0
  3856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3860 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3861 ;;Total ram usage:        0 bytes
  3862 ;; Hardware stack levels used:    1
  3863 ;; Hardware stack levels required when called:    8
  3864 ;; This function calls:
  3865 ;;		_lcdClear
  3866 ;;		_printf
  3867 ;; This function is called by:
  3868 ;;		_showInterface
  3869 ;; This function uses a non-reentrant model
  3870 ;;
  3871                           
  3872                           	psect	text7
  3873  0039E0                     __ptext7:
  3874                           	opt stack 0
  3875  0039E0                     _runStats:
  3876                           	opt stack 21
  3877                           
  3878                           ;interface.c: 124: lcdClear();
  3879                           
  3880                           ;incstack = 0
  3881  0039E0  EC9E  F01D         	call	_lcdClear	;wreg free
  3882                           
  3883                           ;interface.c: 125: printf("[AA,9V,C,other] \n");
  3884  0039E4  0E26               	movlw	low STR_17
  3885  0039E6  0100               	movlb	0	; () banked
  3886  0039E8  6FC9               	movwf	printf@f& (0+255),b
  3887  0039EA  0EFF               	movlw	high STR_17
  3888  0039EC  0100               	movlb	0	; () banked
  3889  0039EE  6FCA               	movwf	(printf@f+1)& (0+255),b
  3890  0039F0  EC09  F000         	call	_printf	;wreg free
  3891                           
  3892                           ;interface.c: 126: printf("[nn,n,n,nn]   *>");
  3893  0039F4  0E8D               	movlw	low STR_18
  3894  0039F6  0100               	movlb	0	; () banked
  3895  0039F8  6FC9               	movwf	printf@f& (0+255),b
  3896  0039FA  0EFF               	movlw	high STR_18
  3897  0039FC  0100               	movlb	0	; () banked
  3898  0039FE  6FCA               	movwf	(printf@f+1)& (0+255),b
  3899  003A00  EC09  F000         	call	_printf	;wreg free
  3900  003A04  0012               	return		;funcret
  3901  003A06                     __end_of_runStats:
  3902                           	opt stack 0
  3903                           tblptru	equ	0xFF8
  3904                           tblptrh	equ	0xFF7
  3905                           tblptrl	equ	0xFF6
  3906                           tablat	equ	0xFF5
  3907                           postinc0	equ	0xFEE
  3908                           wreg	equ	0xFE8
  3909                           postdec1	equ	0xFE5
  3910                           fsr1l	equ	0xFE1
  3911                           indf2	equ	0xFDF
  3912                           postinc2	equ	0xFDE
  3913                           postdec2	equ	0xFDD
  3914                           fsr2h	equ	0xFDA
  3915                           fsr2l	equ	0xFD9
  3916                           status	equ	0xFD8
  3917                           
  3918 ;; *************** function _runSelect *****************
  3919 ;; Defined at:
  3920 ;;		line 105 in file "interface.c"
  3921 ;; Parameters:    Size  Location     Type
  3922 ;;		None
  3923 ;; Auto vars:     Size  Location     Type
  3924 ;;		None
  3925 ;; Return value:  Size  Location     Type
  3926 ;;                  1    wreg      void 
  3927 ;; Registers used:
  3928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3929 ;; Tracked objects:
  3930 ;;		On entry : 0/0
  3931 ;;		On exit  : 0/0
  3932 ;;		Unchanged: 0/0
  3933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3938 ;;Total ram usage:        0 bytes
  3939 ;; Hardware stack levels used:    1
  3940 ;; Hardware stack levels required when called:    8
  3941 ;; This function calls:
  3942 ;;		_lcdClear
  3943 ;;		_printf
  3944 ;; This function is called by:
  3945 ;;		_showInterface
  3946 ;; This function uses a non-reentrant model
  3947 ;;
  3948                           
  3949                           	psect	text8
  3950  003A06                     __ptext8:
  3951                           	opt stack 0
  3952  003A06                     _runSelect:
  3953                           	opt stack 21
  3954                           
  3955                           ;interface.c: 106: lcdClear();
  3956                           
  3957                           ;incstack = 0
  3958  003A06  EC9E  F01D         	call	_lcdClear	;wreg free
  3959                           
  3960                           ;interface.c: 107: printf("select run:     \n");
  3961  003A0A  0E02               	movlw	low STR_11
  3962  003A0C  0100               	movlb	0	; () banked
  3963  003A0E  6FC9               	movwf	printf@f& (0+255),b
  3964  003A10  0EFF               	movlw	high STR_11
  3965  003A12  0100               	movlb	0	; () banked
  3966  003A14  6FCA               	movwf	(printf@f+1)& (0+255),b
  3967  003A16  EC09  F000         	call	_printf	;wreg free
  3968                           
  3969                           ;interface.c: 108: printf("[1,2,3,4]     *>");
  3970  003A1A  0E5A               	movlw	low STR_12
  3971  003A1C  0100               	movlb	0	; () banked
  3972  003A1E  6FC9               	movwf	printf@f& (0+255),b
  3973  003A20  0EFF               	movlw	high STR_12
  3974  003A22  0100               	movlb	0	; () banked
  3975  003A24  6FCA               	movwf	(printf@f+1)& (0+255),b
  3976  003A26  EC09  F000         	call	_printf	;wreg free
  3977  003A2A  0012               	return		;funcret
  3978  003A2C                     __end_of_runSelect:
  3979                           	opt stack 0
  3980                           tblptru	equ	0xFF8
  3981                           tblptrh	equ	0xFF7
  3982                           tblptrl	equ	0xFF6
  3983                           tablat	equ	0xFF5
  3984                           postinc0	equ	0xFEE
  3985                           wreg	equ	0xFE8
  3986                           postdec1	equ	0xFE5
  3987                           fsr1l	equ	0xFE1
  3988                           indf2	equ	0xFDF
  3989                           postinc2	equ	0xFDE
  3990                           postdec2	equ	0xFDD
  3991                           fsr2h	equ	0xFDA
  3992                           fsr2l	equ	0xFD9
  3993                           status	equ	0xFD8
  3994                           
  3995 ;; *************** function _runMenu *****************
  3996 ;; Defined at:
  3997 ;;		line 111 in file "interface.c"
  3998 ;; Parameters:    Size  Location     Type
  3999 ;;  key             1    wreg     unsigned char 
  4000 ;; Auto vars:     Size  Location     Type
  4001 ;;  key             1  119[BANK0 ] unsigned char 
  4002 ;; Return value:  Size  Location     Type
  4003 ;;                  1    wreg      void 
  4004 ;; Registers used:
  4005 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4006 ;; Tracked objects:
  4007 ;;		On entry : 0/0
  4008 ;;		On exit  : 0/0
  4009 ;;		Unchanged: 0/0
  4010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4012 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4014 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4015 ;;Total ram usage:        1 bytes
  4016 ;; Hardware stack levels used:    1
  4017 ;; Hardware stack levels required when called:    8
  4018 ;; This function calls:
  4019 ;;		_lcdClear
  4020 ;;		_printf
  4021 ;; This function is called by:
  4022 ;;		_showInterface
  4023 ;; This function uses a non-reentrant model
  4024 ;;
  4025                           
  4026                           	psect	text9
  4027  003928                     __ptext9:
  4028                           	opt stack 0
  4029  003928                     _runMenu:
  4030                           	opt stack 21
  4031                           
  4032                           ;incstack = 0
  4033                           ;runMenu@key stored from wreg
  4034  003928  0100               	movlb	0	; () banked
  4035  00392A  6FF7               	movwf	runMenu@key& (0+255),b
  4036                           
  4037                           ;interface.c: 112: lcdClear();
  4038  00392C  EC9E  F01D         	call	_lcdClear	;wreg free
  4039                           
  4040                           ;interface.c: 113: printf("%c) time  <A     \n",key);
  4041  003930  0ECB               	movlw	low STR_13
  4042  003932  0100               	movlb	0	; () banked
  4043  003934  6FC9               	movwf	printf@f& (0+255),b
  4044  003936  0EFE               	movlw	high STR_13
  4045  003938  0100               	movlb	0	; () banked
  4046  00393A  6FCA               	movwf	(printf@f+1)& (0+255),b
  4047  00393C  C0F7  F0CB         	movff	runMenu@key,?_printf+2
  4048  003940  0100               	movlb	0	; () banked
  4049  003942  6BCC               	clrf	(?_printf+3)& (0+255),b
  4050  003944  EC09  F000         	call	_printf	;wreg free
  4051                           
  4052                           ;interface.c: 114: printf( "   stats <B   *>");
  4053  003948  0E7C               	movlw	low STR_14
  4054  00394A  0100               	movlb	0	; () banked
  4055  00394C  6FC9               	movwf	printf@f& (0+255),b
  4056  00394E  0EFF               	movlw	high STR_14
  4057  003950  0100               	movlb	0	; () banked
  4058  003952  6FCA               	movwf	(printf@f+1)& (0+255),b
  4059  003954  EC09  F000         	call	_printf	;wreg free
  4060  003958  0012               	return		;funcret
  4061  00395A                     __end_of_runMenu:
  4062                           	opt stack 0
  4063                           tblptru	equ	0xFF8
  4064                           tblptrh	equ	0xFF7
  4065                           tblptrl	equ	0xFF6
  4066                           tablat	equ	0xFF5
  4067                           postinc0	equ	0xFEE
  4068                           wreg	equ	0xFE8
  4069                           postdec1	equ	0xFE5
  4070                           fsr1l	equ	0xFE1
  4071                           indf2	equ	0xFDF
  4072                           postinc2	equ	0xFDE
  4073                           postdec2	equ	0xFDD
  4074                           fsr2h	equ	0xFDA
  4075                           fsr2l	equ	0xFD9
  4076                           status	equ	0xFD8
  4077                           
  4078 ;; *************** function _mainMenu *****************
  4079 ;; Defined at:
  4080 ;;		line 99 in file "interface.c"
  4081 ;; Parameters:    Size  Location     Type
  4082 ;;		None
  4083 ;; Auto vars:     Size  Location     Type
  4084 ;;		None
  4085 ;; Return value:  Size  Location     Type
  4086 ;;                  1    wreg      void 
  4087 ;; Registers used:
  4088 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4089 ;; Tracked objects:
  4090 ;;		On entry : 0/0
  4091 ;;		On exit  : 0/0
  4092 ;;		Unchanged: 0/0
  4093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4098 ;;Total ram usage:        0 bytes
  4099 ;; Hardware stack levels used:    1
  4100 ;; Hardware stack levels required when called:    8
  4101 ;; This function calls:
  4102 ;;		_lcdClear
  4103 ;;		_printf
  4104 ;; This function is called by:
  4105 ;;		_showInterface
  4106 ;; This function uses a non-reentrant model
  4107 ;;
  4108                           
  4109                           	psect	text10
  4110  003A2C                     __ptext10:
  4111                           	opt stack 0
  4112  003A2C                     _mainMenu:
  4113                           	opt stack 21
  4114                           
  4115                           ;interface.c: 100: lcdClear();
  4116                           
  4117                           ;incstack = 0
  4118  003A2C  EC9E  F01D         	call	_lcdClear	;wreg free
  4119                           
  4120                           ;interface.c: 101: printf("start   <B      \n");
  4121  003A30  0EDE               	movlw	low STR_9
  4122  003A32  0100               	movlb	0	; () banked
  4123  003A34  6FC9               	movwf	printf@f& (0+255),b
  4124  003A36  0EFE               	movlw	high STR_9
  4125  003A38  0100               	movlb	0	; () banked
  4126  003A3A  6FCA               	movwf	(printf@f+1)& (0+255),b
  4127  003A3C  EC09  F000         	call	_printf	;wreg free
  4128                           
  4129                           ;interface.c: 102: printf("history <C    *>");
  4130  003A40  0E6B               	movlw	low STR_10
  4131  003A42  0100               	movlb	0	; () banked
  4132  003A44  6FC9               	movwf	printf@f& (0+255),b
  4133  003A46  0EFF               	movlw	high STR_10
  4134  003A48  0100               	movlb	0	; () banked
  4135  003A4A  6FCA               	movwf	(printf@f+1)& (0+255),b
  4136  003A4C  EC09  F000         	call	_printf	;wreg free
  4137  003A50  0012               	return		;funcret
  4138  003A52                     __end_of_mainMenu:
  4139                           	opt stack 0
  4140                           tblptru	equ	0xFF8
  4141                           tblptrh	equ	0xFF7
  4142                           tblptrl	equ	0xFF6
  4143                           tablat	equ	0xFF5
  4144                           postinc0	equ	0xFEE
  4145                           wreg	equ	0xFE8
  4146                           postdec1	equ	0xFE5
  4147                           fsr1l	equ	0xFE1
  4148                           indf2	equ	0xFDF
  4149                           postinc2	equ	0xFDE
  4150                           postdec2	equ	0xFDD
  4151                           fsr2h	equ	0xFDA
  4152                           fsr2l	equ	0xFD9
  4153                           status	equ	0xFD8
  4154                           
  4155 ;; *************** function _dateTime *****************
  4156 ;; Defined at:
  4157 ;;		line 84 in file "interface.c"
  4158 ;; Parameters:    Size  Location     Type
  4159 ;;		None
  4160 ;; Auto vars:     Size  Location     Type
  4161 ;;		None
  4162 ;; Return value:  Size  Location     Type
  4163 ;;                  1    wreg      void 
  4164 ;; Registers used:
  4165 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4166 ;; Tracked objects:
  4167 ;;		On entry : 0/0
  4168 ;;		On exit  : 0/0
  4169 ;;		Unchanged: 0/0
  4170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4175 ;;Total ram usage:        0 bytes
  4176 ;; Hardware stack levels used:    1
  4177 ;; Hardware stack levels required when called:    8
  4178 ;; This function calls:
  4179 ;;		_lcdClear
  4180 ;;		_printf
  4181 ;; This function is called by:
  4182 ;;		_showInterface
  4183 ;; This function uses a non-reentrant model
  4184 ;;
  4185                           
  4186                           	psect	text11
  4187  003A52                     __ptext11:
  4188                           	opt stack 0
  4189  003A52                     _dateTime:
  4190                           	opt stack 21
  4191                           
  4192                           ;interface.c: 94: lcdClear();
  4193                           
  4194                           ;incstack = 0
  4195  003A52  EC9E  F01D         	call	_lcdClear	;wreg free
  4196                           
  4197                           ;interface.c: 95: printf("  hh:mm:ss      \n");
  4198  003A56  0EF0               	movlw	low STR_7
  4199  003A58  0100               	movlb	0	; () banked
  4200  003A5A  6FC9               	movwf	printf@f& (0+255),b
  4201  003A5C  0EFE               	movlw	high STR_7
  4202  003A5E  0100               	movlb	0	; () banked
  4203  003A60  6FCA               	movwf	(printf@f+1)& (0+255),b
  4204  003A62  EC09  F000         	call	_printf	;wreg free
  4205                           
  4206                           ;interface.c: 96: printf("  mm:dd:yy    A>");
  4207  003A66  0E9E               	movlw	low STR_8
  4208  003A68  0100               	movlb	0	; () banked
  4209  003A6A  6FC9               	movwf	printf@f& (0+255),b
  4210  003A6C  0EFF               	movlw	high STR_8
  4211  003A6E  0100               	movlb	0	; () banked
  4212  003A70  6FCA               	movwf	(printf@f+1)& (0+255),b
  4213  003A72  EC09  F000         	call	_printf	;wreg free
  4214  003A76  0012               	return		;funcret
  4215  003A78                     __end_of_dateTime:
  4216                           	opt stack 0
  4217                           tblptru	equ	0xFF8
  4218                           tblptrh	equ	0xFF7
  4219                           tblptrl	equ	0xFF6
  4220                           tablat	equ	0xFF5
  4221                           postinc0	equ	0xFEE
  4222                           wreg	equ	0xFE8
  4223                           postdec1	equ	0xFE5
  4224                           fsr1l	equ	0xFE1
  4225                           indf2	equ	0xFDF
  4226                           postinc2	equ	0xFDE
  4227                           postdec2	equ	0xFDD
  4228                           fsr2h	equ	0xFDA
  4229                           fsr2l	equ	0xFD9
  4230                           status	equ	0xFD8
  4231                           
  4232 ;; *************** function _printf *****************
  4233 ;; Defined at:
  4234 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4235 ;; Parameters:    Size  Location     Type
  4236 ;;  f               2   73[BANK0 ] PTR const unsigned char 
  4237 ;;		 -> STR_18(17), STR_17(18), STR_16(17), STR_15(18), 
  4238 ;;		 -> STR_14(17), STR_13(19), STR_12(17), STR_11(18), 
  4239 ;;		 -> STR_10(17), STR_9(18), STR_8(17), STR_7(18), 
  4240 ;;		 -> STR_6(8), STR_5(15), STR_4(14), STR_3(17), 
  4241 ;;		 -> STR_2(17), STR_1(8), 
  4242 ;; Auto vars:     Size  Location     Type
  4243 ;;  idx             1   92[BANK0 ] unsigned char 
  4244 ;;  val             4  108[BANK0 ] unsigned long 
  4245 ;;  tmpval          4   99[BANK0 ] struct .
  4246 ;;  fval            3  105[BANK0 ] struct .
  4247 ;;  prec            2  116[BANK0 ] int 
  4248 ;;  flag            2  114[BANK0 ] unsigned short 
  4249 ;;  width           2  112[BANK0 ] int 
  4250 ;;  exp             2  103[BANK0 ] int 
  4251 ;;  ap              2   97[BANK0 ] PTR void [1]
  4252 ;;		 -> ?_printf(2), 
  4253 ;;  len             2   95[BANK0 ] unsigned int 
  4254 ;;  cp              2   93[BANK0 ] PTR const unsigned char 
  4255 ;;		 -> printf@c(1), 
  4256 ;;  c               1  118[BANK0 ] char 
  4257 ;;  d               1    0        unsigned char 
  4258 ;; Return value:  Size  Location     Type
  4259 ;;                  2   73[BANK0 ] int 
  4260 ;; Registers used:
  4261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4262 ;; Tracked objects:
  4263 ;;		On entry : 0/0
  4264 ;;		On exit  : 0/0
  4265 ;;		Unchanged: 0/0
  4266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4267 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4268 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4269 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4270 ;;      Totals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4271 ;;Total ram usage:       46 bytes
  4272 ;; Hardware stack levels used:    1
  4273 ;; Hardware stack levels required when called:    7
  4274 ;; This function calls:
  4275 ;;		___awdiv
  4276 ;;		___ftadd
  4277 ;;		___ftge
  4278 ;;		___ftmul
  4279 ;;		___ftneg
  4280 ;;		___ftsub
  4281 ;;		___fttol
  4282 ;;		___lldiv
  4283 ;;		___llmod
  4284 ;;		___lltoft
  4285 ;;		___wmul
  4286 ;;		__div_to_l_
  4287 ;;		__tdiv_to_l_
  4288 ;;		_fround
  4289 ;;		_isdigit
  4290 ;;		_putch
  4291 ;;		_scale
  4292 ;; This function is called by:
  4293 ;;		_main
  4294 ;;		_sortBattery
  4295 ;;		_dateTime
  4296 ;;		_mainMenu
  4297 ;;		_runSelect
  4298 ;;		_runMenu
  4299 ;;		_runTime
  4300 ;;		_runStats
  4301 ;;		_pause
  4302 ;;		_testFrequency
  4303 ;; This function uses a non-reentrant model
  4304 ;;
  4305                           
  4306                           	psect	text12
  4307  000012                     __ptext12:
  4308                           	opt stack 0
  4309  000012                     _printf:
  4310                           	opt stack 22
  4311                           
  4312                           ;doprnt.c: 466: va_list ap;
  4313                           ;doprnt.c: 499: signed char c;
  4314                           ;doprnt.c: 501: int width;
  4315                           ;doprnt.c: 504: int prec;
  4316                           ;doprnt.c: 508: unsigned short flag;
  4317                           ;doprnt.c: 515: char d;
  4318                           ;doprnt.c: 516: double fval;
  4319                           ;doprnt.c: 517: int exp;
  4320                           ;doprnt.c: 523: union {
  4321                           ;doprnt.c: 524: unsigned long vd;
  4322                           ;doprnt.c: 525: double integ;
  4323                           ;doprnt.c: 526: } tmpval;
  4324                           ;doprnt.c: 528: unsigned long val;
  4325                           ;doprnt.c: 529: unsigned len;
  4326                           ;doprnt.c: 530: const char * cp;
  4327                           ;doprnt.c: 533: *ap = __va_start();
  4328                           
  4329                           ;incstack = 0
  4330  000012  0ECB               	movlw	low (?_printf+2)
  4331  000014  0100               	movlb	0	; () banked
  4332  000016  6FE1               	movwf	printf@ap& (0+255),b
  4333  000018  0E00               	movlw	high (?_printf+2)
  4334  00001A  0100               	movlb	0	; () banked
  4335  00001C  6FE2               	movwf	(printf@ap+1)& (0+255),b
  4336                           
  4337                           ;doprnt.c: 536: while(c = *f++) {
  4338  00001E  EF0C  F007         	goto	l6672
  4339  000022                     l6306:
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;doprnt.c: 538: if(c != '%')
  4343  000022  0E25               	movlw	37
  4344  000024  0100               	movlb	0	; () banked
  4345  000026  19F6               	xorwf	printf@c& (0+255),w,b
  4346  000028  B4D8               	btfsc	status,2,c
  4347  00002A  D006               	goto	l6310
  4348                           
  4349                           ; BSR set to: 0
  4350                           ;doprnt.c: 540: {
  4351                           ;doprnt.c: 541: (putch(c) );
  4352  00002C  0100               	movlb	0	; () banked
  4353  00002E  51F6               	movf	printf@c& (0+255),w,b
  4354  000030  EC61  F01D         	call	_putch
  4355                           
  4356                           ;doprnt.c: 542: continue;
  4357  000034  EF0C  F007         	goto	l6672
  4358  000038                     l6310:
  4359                           
  4360                           ;doprnt.c: 543: }
  4361                           ;doprnt.c: 546: width = 0;
  4362  000038  0E00               	movlw	0
  4363  00003A  0100               	movlb	0	; () banked
  4364  00003C  6FF1               	movwf	(printf@width+1)& (0+255),b
  4365  00003E  0E00               	movlw	0
  4366  000040  6FF0               	movwf	printf@width& (0+255),b
  4367                           
  4368                           ;doprnt.c: 548: flag = 0;
  4369  000042  0E00               	movlw	0
  4370  000044  0100               	movlb	0	; () banked
  4371  000046  6FF3               	movwf	(printf@flag+1)& (0+255),b
  4372  000048  0E00               	movlw	0
  4373  00004A  6FF2               	movwf	printf@flag& (0+255),b
  4374                           
  4375                           ; BSR set to: 0
  4376                           ;doprnt.c: 551: switch(*f) {
  4377                           
  4378                           ;doprnt.c: 550: for(;;) {
  4379  00004C  D005               	goto	l6316
  4380  00004E                     l6312:
  4381                           
  4382                           ;doprnt.c: 580: flag |= 0x04;
  4383  00004E  0100               	movlb	0	; () banked
  4384  000050  85F2               	bsf	printf@flag& (0+255),2,b
  4385                           
  4386                           ;doprnt.c: 581: f++;
  4387  000052  0100               	movlb	0	; () banked
  4388  000054  4BC9               	infsnz	printf@f& (0+255),f,b
  4389  000056  2BCA               	incf	(printf@f+1)& (0+255),f,b
  4390  000058                     l6316:
  4391  000058  C0C9  FFF6         	movff	printf@f,tblptrl
  4392  00005C  C0CA  FFF7         	movff	printf@f+1,tblptrh
  4393  000060                     	if	0	;tblptru may be non-zero
  4394  000060                     	endif
  4395  000060                     	if	0	;tblptru may be non-zero
  4396  000060                     	endif
  4397  000060  0008               	tblrd		*
  4398  000062  50F5               	movf	tablat,w,c
  4399                           
  4400                           ; Switch size 1, requested type "space"
  4401                           ; Number of cases is 1, Range of values is 48 to 48
  4402                           ; switch strategies available:
  4403                           ; Name         Instructions Cycles
  4404                           ; simple_byte            4     3 (average)
  4405                           ;	Chosen strategy is simple_byte
  4406  000064  0A30               	xorlw	48	; case 48
  4407  000066  B4D8               	btfsc	status,2,c
  4408  000068  D7F2               	goto	l6312
  4409                           
  4410                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4411                           
  4412                           ;doprnt.c: 586: }
  4413                           
  4414                           ;doprnt.c: 585: break;
  4415  00006A  C0C9  FFF6         	movff	printf@f,tblptrl
  4416  00006E  C0CA  FFF7         	movff	printf@f+1,tblptrh
  4417  000072                     	if	0	;tblptru may be non-zero
  4418  000072                     	endif
  4419  000072                     	if	0	;tblptru may be non-zero
  4420  000072                     	endif
  4421  000072  0008               	tblrd		*
  4422  000074  50F5               	movf	tablat,w,c
  4423  000076  EC83  F01D         	call	_isdigit
  4424  00007A  A0D8               	btfss	status,0,c
  4425  00007C  D040               	goto	l6330
  4426                           
  4427                           ;doprnt.c: 598: width = 0;
  4428  00007E  0E00               	movlw	0
  4429  000080  0100               	movlb	0	; () banked
  4430  000082  6FF1               	movwf	(printf@width+1)& (0+255),b
  4431  000084  0E00               	movlw	0
  4432  000086  6FF0               	movwf	printf@width& (0+255),b
  4433  000088                     l6322:
  4434                           
  4435                           ;doprnt.c: 600: width *= 10;
  4436  000088  C0F0  F084         	movff	printf@width,___wmul@multiplier
  4437  00008C  C0F1  F085         	movff	printf@width+1,___wmul@multiplier+1
  4438  000090  0E00               	movlw	0
  4439  000092  0100               	movlb	0	; () banked
  4440  000094  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4441  000096  0E0A               	movlw	10
  4442  000098  6F86               	movwf	___wmul@multiplicand& (0+255),b
  4443  00009A  ECAD  F01C         	call	___wmul	;wreg free
  4444  00009E  C084  F0F0         	movff	?___wmul,printf@width
  4445  0000A2  C085  F0F1         	movff	?___wmul+1,printf@width+1
  4446                           
  4447                           ;doprnt.c: 601: width += *f++ - '0';
  4448  0000A6  0ED0               	movlw	208
  4449  0000A8  0100               	movlb	0	; () banked
  4450  0000AA  6FD3               	movwf	??_printf& (0+255),b
  4451  0000AC  0EFF               	movlw	255
  4452  0000AE  0100               	movlb	0	; () banked
  4453  0000B0  6FD4               	movwf	(??_printf+1)& (0+255),b
  4454  0000B2  C0C9  FFF6         	movff	printf@f,tblptrl
  4455  0000B6  C0CA  FFF7         	movff	printf@f+1,tblptrh
  4456  0000BA                     	if	0	;tblptru may be non-zero
  4457  0000BA                     	endif
  4458  0000BA                     	if	0	;tblptru may be non-zero
  4459  0000BA                     	endif
  4460  0000BA  0008               	tblrd		*
  4461  0000BC  50F5               	movf	tablat,w,c
  4462  0000BE  0100               	movlb	0	; () banked
  4463  0000C0  6FD5               	movwf	(??_printf+2)& (0+255),b
  4464  0000C2  6BD6               	clrf	(??_printf+3)& (0+255),b
  4465  0000C4  0100               	movlb	0	; () banked
  4466  0000C6  51D3               	movf	??_printf& (0+255),w,b
  4467  0000C8  0100               	movlb	0	; () banked
  4468  0000CA  27D5               	addwf	(??_printf+2)& (0+255),f,b
  4469  0000CC  0100               	movlb	0	; () banked
  4470  0000CE  51D4               	movf	(??_printf+1)& (0+255),w,b
  4471  0000D0  0100               	movlb	0	; () banked
  4472  0000D2  23D6               	addwfc	(??_printf+3)& (0+255),f,b
  4473  0000D4  0100               	movlb	0	; () banked
  4474  0000D6  51D5               	movf	(??_printf+2)& (0+255),w,b
  4475  0000D8  0100               	movlb	0	; () banked
  4476  0000DA  27F0               	addwf	printf@width& (0+255),f,b
  4477  0000DC  0100               	movlb	0	; () banked
  4478  0000DE  51D6               	movf	(??_printf+3)& (0+255),w,b
  4479  0000E0  0100               	movlb	0	; () banked
  4480  0000E2  23F1               	addwfc	(printf@width+1)& (0+255),f,b
  4481                           
  4482                           ; BSR set to: 0
  4483  0000E4  0100               	movlb	0	; () banked
  4484  0000E6  4BC9               	infsnz	printf@f& (0+255),f,b
  4485  0000E8  2BCA               	incf	(printf@f+1)& (0+255),f,b
  4486                           
  4487                           ; BSR set to: 0
  4488                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4489  0000EA  C0C9  FFF6         	movff	printf@f,tblptrl
  4490  0000EE  C0CA  FFF7         	movff	printf@f+1,tblptrh
  4491  0000F2                     	if	0	;tblptru may be non-zero
  4492  0000F2                     	endif
  4493  0000F2                     	if	0	;tblptru may be non-zero
  4494  0000F2                     	endif
  4495  0000F2  0008               	tblrd		*
  4496  0000F4  50F5               	movf	tablat,w,c
  4497  0000F6  EC83  F01D         	call	_isdigit
  4498  0000FA  B0D8               	btfsc	status,0,c
  4499  0000FC  D7C5               	goto	l6322
  4500  0000FE                     l6330:
  4501                           
  4502                           ;doprnt.c: 608: }
  4503                           ;doprnt.c: 611: if(*f == '.') {
  4504  0000FE  C0C9  FFF6         	movff	printf@f,tblptrl
  4505  000102  C0CA  FFF7         	movff	printf@f+1,tblptrh
  4506  000106                     	if	0	;tblptru may be non-zero
  4507  000106                     	endif
  4508  000106                     	if	0	;tblptru may be non-zero
  4509  000106                     	endif
  4510  000106  0008               	tblrd		*
  4511  000108  50F5               	movf	tablat,w,c
  4512  00010A  0A2E               	xorlw	46
  4513  00010C  A4D8               	btfss	status,2,c
  4514  00010E  D039               	goto	l6342
  4515                           
  4516                           ;doprnt.c: 612: flag |= 0x4000;
  4517  000110  0100               	movlb	0	; () banked
  4518  000112  8DF3               	bsf	(printf@flag+1)& (0+255),6,b
  4519                           
  4520                           ;doprnt.c: 613: f++;
  4521  000114  0100               	movlb	0	; () banked
  4522  000116  4BC9               	infsnz	printf@f& (0+255),f,b
  4523  000118  2BCA               	incf	(printf@f+1)& (0+255),f,b
  4524                           
  4525                           ; BSR set to: 0
  4526                           ;doprnt.c: 620: {
  4527                           ;doprnt.c: 621: prec = 0;
  4528  00011A  0E00               	movlw	0
  4529  00011C  0100               	movlb	0	; () banked
  4530  00011E  6FF5               	movwf	(printf@prec+1)& (0+255),b
  4531  000120  0E00               	movlw	0
  4532  000122  6FF4               	movwf	printf@prec& (0+255),b
  4533                           
  4534                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  4535  000124  D023               	goto	l6340
  4536  000126                     l6336:
  4537                           
  4538                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  4539  000126  C0F4  F084         	movff	printf@prec,___wmul@multiplier
  4540  00012A  C0F5  F085         	movff	printf@prec+1,___wmul@multiplier+1
  4541  00012E  0E00               	movlw	0
  4542  000130  0100               	movlb	0	; () banked
  4543  000132  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4544  000134  0E0A               	movlw	10
  4545  000136  6F86               	movwf	___wmul@multiplicand& (0+255),b
  4546  000138  ECAD  F01C         	call	___wmul	;wreg free
  4547  00013C  C0C9  FFF6         	movff	printf@f,tblptrl
  4548  000140  C0CA  FFF7         	movff	printf@f+1,tblptrh
  4549  000144                     	if	0	;tblptru may be non-zero
  4550  000144                     	endif
  4551  000144                     	if	0	;tblptru may be non-zero
  4552  000144                     	endif
  4553  000144  0008               	tblrd		*
  4554  000146  50F5               	movf	tablat,w,c
  4555  000148  0100               	movlb	0	; () banked
  4556  00014A  2784               	addwf	?___wmul& (0+255),f,b
  4557  00014C  0E00               	movlw	0
  4558  00014E  0100               	movlb	0	; () banked
  4559  000150  2385               	addwfc	(?___wmul+1)& (0+255),f,b
  4560  000152  0ED0               	movlw	208
  4561  000154  0100               	movlb	0	; () banked
  4562  000156  2584               	addwf	?___wmul& (0+255),w,b
  4563  000158  0100               	movlb	0	; () banked
  4564  00015A  6FF4               	movwf	printf@prec& (0+255),b
  4565  00015C  0EFF               	movlw	255
  4566  00015E  0100               	movlb	0	; () banked
  4567  000160  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  4568  000162  0100               	movlb	0	; () banked
  4569  000164  6FF5               	movwf	(printf@prec+1)& (0+255),b
  4570                           
  4571                           ; BSR set to: 0
  4572  000166  0100               	movlb	0	; () banked
  4573  000168  4BC9               	infsnz	printf@f& (0+255),f,b
  4574  00016A  2BCA               	incf	(printf@f+1)& (0+255),f,b
  4575  00016C                     l6340:
  4576                           
  4577                           ; BSR set to: 0
  4578  00016C  C0C9  FFF6         	movff	printf@f,tblptrl
  4579  000170  C0CA  FFF7         	movff	printf@f+1,tblptrh
  4580  000174                     	if	0	;tblptru may be non-zero
  4581  000174                     	endif
  4582  000174                     	if	0	;tblptru may be non-zero
  4583  000174                     	endif
  4584  000174  0008               	tblrd		*
  4585  000176  50F5               	movf	tablat,w,c
  4586  000178  EC83  F01D         	call	_isdigit
  4587  00017C  A0D8               	btfss	status,0,c
  4588  00017E  D07D               	goto	l6384
  4589  000180  D7D2               	goto	l6336
  4590  000182                     l6342:
  4591                           
  4592                           ;doprnt.c: 626: prec = 0;
  4593  000182  0E00               	movlw	0
  4594  000184  0100               	movlb	0	; () banked
  4595  000186  6FF5               	movwf	(printf@prec+1)& (0+255),b
  4596  000188  0E00               	movlw	0
  4597  00018A  6FF4               	movwf	printf@prec& (0+255),b
  4598                           
  4599                           ; BSR set to: 0
  4600                           ;doprnt.c: 628: flag |= 0x1000;
  4601  00018C  0100               	movlb	0	; () banked
  4602  00018E  89F3               	bsf	(printf@flag+1)& (0+255),4,b
  4603                           
  4604                           ; BSR set to: 0
  4605                           ;doprnt.c: 635: switch(c = *f++) {
  4606                           
  4607                           ;doprnt.c: 630: }
  4608                           ;doprnt.c: 633: loop:
  4609                           
  4610                           ; BSR set to: 0
  4611  000190  D074               	goto	l6384
  4612  000192                     l6346:
  4613                           
  4614                           ; BSR set to: 0
  4615                           ;doprnt.c: 643: flag |= 0x10;
  4616  000192  0100               	movlb	0	; () banked
  4617  000194  89F2               	bsf	printf@flag& (0+255),4,b
  4618                           
  4619                           ;doprnt.c: 644: goto loop;
  4620  000196  D071               	goto	l6384
  4621  000198                     l6348:
  4622                           
  4623                           ; BSR set to: 0
  4624                           ;doprnt.c: 663: flag |= 0x400;
  4625  000198  0100               	movlb	0	; () banked
  4626  00019A  85F3               	bsf	(printf@flag+1)& (0+255),2,b
  4627                           
  4628                           ; BSR set to: 0
  4629                           ;doprnt.c: 698: case 'i':
  4630                           ;doprnt.c: 699: break;
  4631                           
  4632                           ; BSR set to: 0
  4633                           
  4634                           ;doprnt.c: 697: case 'd':
  4635                           
  4636                           ;doprnt.c: 664: break;
  4637  00019C  D090               	goto	l6386
  4638  00019E                     l6350:
  4639                           
  4640                           ; BSR set to: 0
  4641                           ;doprnt.c: 721: flag |= 0x80;
  4642  00019E  0100               	movlb	0	; () banked
  4643  0001A0  8FF2               	bsf	printf@flag& (0+255),7,b
  4644                           
  4645                           ;doprnt.c: 723: break;
  4646  0001A2  D08D               	goto	l6386
  4647  0001A4                     l6352:
  4648                           
  4649                           ; BSR set to: 0
  4650                           ;doprnt.c: 753: if(prec && prec < len)
  4651  0001A4  0100               	movlb	0	; () banked
  4652  0001A6  51F4               	movf	printf@prec& (0+255),w,b
  4653  0001A8  0100               	movlb	0	; () banked
  4654  0001AA  11F5               	iorwf	(printf@prec+1)& (0+255),w,b
  4655  0001AC  B4D8               	btfsc	status,2,c
  4656  0001AE  D00E               	goto	l6358
  4657                           
  4658                           ; BSR set to: 0
  4659  0001B0  0100               	movlb	0	; () banked
  4660  0001B2  51DF               	movf	printf@len& (0+255),w,b
  4661  0001B4  0100               	movlb	0	; () banked
  4662  0001B6  5DF4               	subwf	printf@prec& (0+255),w,b
  4663  0001B8  0100               	movlb	0	; () banked
  4664  0001BA  51E0               	movf	(printf@len+1)& (0+255),w,b
  4665  0001BC  0100               	movlb	0	; () banked
  4666  0001BE  59F5               	subwfb	(printf@prec+1)& (0+255),w,b
  4667  0001C0  B0D8               	btfsc	status,0,c
  4668  0001C2  D004               	goto	l6358
  4669                           
  4670                           ; BSR set to: 0
  4671                           ;doprnt.c: 754: len = prec;
  4672  0001C4  C0F4  F0DF         	movff	printf@prec,printf@len
  4673  0001C8  C0F5  F0E0         	movff	printf@prec+1,printf@len+1
  4674  0001CC                     l6358:
  4675                           
  4676                           ; BSR set to: 0
  4677                           ;doprnt.c: 757: if(width > len)
  4678  0001CC  0100               	movlb	0	; () banked
  4679  0001CE  51F0               	movf	printf@width& (0+255),w,b
  4680  0001D0  0100               	movlb	0	; () banked
  4681  0001D2  5DDF               	subwf	printf@len& (0+255),w,b
  4682  0001D4  0100               	movlb	0	; () banked
  4683  0001D6  51F1               	movf	(printf@width+1)& (0+255),w,b
  4684  0001D8  0100               	movlb	0	; () banked
  4685  0001DA  59E0               	subwfb	(printf@len+1)& (0+255),w,b
  4686  0001DC  B0D8               	btfsc	status,0,c
  4687  0001DE  D009               	goto	l6362
  4688                           
  4689                           ; BSR set to: 0
  4690                           ;doprnt.c: 758: width -= len;
  4691  0001E0  0100               	movlb	0	; () banked
  4692  0001E2  51DF               	movf	printf@len& (0+255),w,b
  4693  0001E4  0100               	movlb	0	; () banked
  4694  0001E6  5FF0               	subwf	printf@width& (0+255),f,b
  4695  0001E8  0100               	movlb	0	; () banked
  4696  0001EA  51E0               	movf	(printf@len+1)& (0+255),w,b
  4697  0001EC  0100               	movlb	0	; () banked
  4698  0001EE  5BF1               	subwfb	(printf@width+1)& (0+255),f,b
  4699  0001F0  D009               	goto	l6366
  4700  0001F2                     l6362:
  4701                           
  4702                           ; BSR set to: 0
  4703                           ;doprnt.c: 759: else
  4704                           ;doprnt.c: 760: width = 0;
  4705  0001F2  0E00               	movlw	0
  4706  0001F4  0100               	movlb	0	; () banked
  4707  0001F6  6FF1               	movwf	(printf@width+1)& (0+255),b
  4708  0001F8  0E00               	movlw	0
  4709  0001FA  6FF0               	movwf	printf@width& (0+255),b
  4710                           
  4711                           ; BSR set to: 0
  4712                           ;doprnt.c: 764: while(width--)
  4713  0001FC  D003               	goto	l6366
  4714  0001FE                     l6364:
  4715                           
  4716                           ; BSR set to: 0
  4717                           ;doprnt.c: 765: (putch(' ') );
  4718  0001FE  0E20               	movlw	32
  4719  000200  EC61  F01D         	call	_putch
  4720  000204                     l6366:
  4721  000204  0100               	movlb	0	; () banked
  4722  000206  07F0               	decf	printf@width& (0+255),f,b
  4723  000208  A0D8               	btfss	status,0,c
  4724  00020A  07F1               	decf	(printf@width+1)& (0+255),f,b
  4725  00020C  0100               	movlb	0	; () banked
  4726  00020E  29F0               	incf	printf@width& (0+255),w,b
  4727  000210  E1F6               	bnz	l6364
  4728  000212  0100               	movlb	0	; () banked
  4729  000214  29F1               	incf	(printf@width+1)& (0+255),w,b
  4730  000216  B4D8               	btfsc	status,2,c
  4731  000218  D00B               	goto	l6372
  4732  00021A  D7F1               	goto	l6364
  4733  00021C                     l6368:
  4734                           
  4735                           ; BSR set to: 0
  4736                           ;doprnt.c: 768: (putch(*cp++) );
  4737  00021C  C0DD  FFD9         	movff	printf@cp,fsr2l
  4738  000220  C0DE  FFDA         	movff	printf@cp+1,fsr2h
  4739  000224  50DF               	movf	indf2,w,c
  4740  000226  EC61  F01D         	call	_putch
  4741  00022A  0100               	movlb	0	; () banked
  4742  00022C  4BDD               	infsnz	printf@cp& (0+255),f,b
  4743  00022E  2BDE               	incf	(printf@cp+1)& (0+255),f,b
  4744  000230                     l6372:
  4745                           
  4746                           ; BSR set to: 0
  4747  000230  0100               	movlb	0	; () banked
  4748  000232  07DF               	decf	printf@len& (0+255),f,b
  4749  000234  A0D8               	btfss	status,0,c
  4750  000236  07E0               	decf	(printf@len+1)& (0+255),f,b
  4751  000238  0100               	movlb	0	; () banked
  4752  00023A  29DF               	incf	printf@len& (0+255),w,b
  4753  00023C  E1EF               	bnz	l6368
  4754  00023E  0100               	movlb	0	; () banked
  4755  000240  29E0               	incf	(printf@len+1)& (0+255),w,b
  4756  000242  B4D8               	btfsc	status,2,c
  4757  000244  EF0C  F007         	goto	l6672
  4758  000248  D7E9               	goto	l6368
  4759  00024A                     l6374:
  4760                           
  4761                           ; BSR set to: 0
  4762                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4763  00024A  C0E1  FFD9         	movff	printf@ap,fsr2l
  4764  00024E  C0E2  FFDA         	movff	printf@ap+1,fsr2h
  4765  000252  50DF               	movf	indf2,w,c
  4766  000254  0100               	movlb	0	; () banked
  4767  000256  6FF6               	movwf	printf@c& (0+255),b
  4768                           
  4769                           ; BSR set to: 0
  4770  000258  0E02               	movlw	2
  4771  00025A  0100               	movlb	0	; () banked
  4772  00025C  27E1               	addwf	printf@ap& (0+255),f,b
  4773  00025E  0E00               	movlw	0
  4774  000260  23E2               	addwfc	(printf@ap+1)& (0+255),f,b
  4775  000262                     l6378:
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;doprnt.c: 805: cp = (char *)&c;
  4779  000262  0EF6               	movlw	low printf@c
  4780  000264  0100               	movlb	0	; () banked
  4781  000266  6FDD               	movwf	printf@cp& (0+255),b
  4782  000268  0E00               	movlw	high printf@c
  4783  00026A  0100               	movlb	0	; () banked
  4784  00026C  6FDE               	movwf	(printf@cp+1)& (0+255),b
  4785                           
  4786                           ; BSR set to: 0
  4787                           ;doprnt.c: 806: len = 1;
  4788  00026E  0E00               	movlw	0
  4789  000270  0100               	movlb	0	; () banked
  4790  000272  6FE0               	movwf	(printf@len+1)& (0+255),b
  4791  000274  0E01               	movlw	1
  4792  000276  6FDF               	movwf	printf@len& (0+255),b
  4793                           
  4794                           ;doprnt.c: 807: goto dostring;
  4795  000278  D795               	goto	l6352
  4796  00027A                     l6384:
  4797  00027A  C0C9  FFF6         	movff	printf@f,tblptrl
  4798  00027E  C0CA  FFF7         	movff	printf@f+1,tblptrh
  4799  000282  0100               	movlb	0	; () banked
  4800  000284  4BC9               	infsnz	printf@f& (0+255),f,b
  4801  000286  2BCA               	incf	(printf@f+1)& (0+255),f,b
  4802  000288                     	if	0	;tblptru may be non-zero
  4803  000288                     	endif
  4804  000288                     	if	0	;tblptru may be non-zero
  4805  000288                     	endif
  4806  000288  0008               	tblrd		*
  4807  00028A  CFF5 F0F6          	movff	tablat,printf@c
  4808  00028E  0100               	movlb	0	; () banked
  4809  000290  51F6               	movf	printf@c& (0+255),w,b
  4810                           
  4811                           ; Switch size 1, requested type "space"
  4812                           ; Number of cases is 7, Range of values is 0 to 120
  4813                           ; switch strategies available:
  4814                           ; Name         Instructions Cycles
  4815                           ; simple_byte           22    12 (average)
  4816                           ;	Chosen strategy is simple_byte
  4817  000292  0A00               	xorlw	0	; case 0
  4818  000294  B4D8               	btfsc	status,2,c
  4819  000296  0012               	return	
  4820  000298  0A63               	xorlw	99	; case 99
  4821  00029A  B4D8               	btfsc	status,2,c
  4822  00029C  D7D6               	goto	l6374
  4823  00029E  0A07               	xorlw	7	; case 100
  4824  0002A0  B4D8               	btfsc	status,2,c
  4825  0002A2  D00D               	goto	l6386
  4826  0002A4  0A02               	xorlw	2	; case 102
  4827  0002A6  B4D8               	btfsc	status,2,c
  4828  0002A8  D777               	goto	l6348
  4829  0002AA  0A0F               	xorlw	15	; case 105
  4830  0002AC  B4D8               	btfsc	status,2,c
  4831  0002AE  D007               	goto	l6386
  4832  0002B0  0A05               	xorlw	5	; case 108
  4833  0002B2  B4D8               	btfsc	status,2,c
  4834  0002B4  D76E               	goto	l6346
  4835  0002B6  0A14               	xorlw	20	; case 120
  4836  0002B8  B4D8               	btfsc	status,2,c
  4837  0002BA  D771               	goto	l6350
  4838  0002BC  D7D2               	goto	l6378
  4839  0002BE                     l6386:
  4840                           
  4841                           ; BSR set to: 0
  4842                           ;doprnt.c: 825: if(flag & (0x700)) {
  4843  0002BE  0E07               	movlw	7
  4844  0002C0  0100               	movlb	0	; () banked
  4845  0002C2  15F3               	andwf	(printf@flag+1)& (0+255),w,b
  4846  0002C4  B4D8               	btfsc	status,2,c
  4847  0002C6  D37C               	goto	l737
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;doprnt.c: 827: if(flag & 0x1000)
  4851  0002C8  0100               	movlb	0	; () banked
  4852  0002CA  A9F3               	btfss	(printf@flag+1)& (0+255),4,b
  4853  0002CC  D005               	goto	l6392
  4854                           
  4855                           ; BSR set to: 0
  4856                           ;doprnt.c: 829: prec = 6;
  4857  0002CE  0E00               	movlw	0
  4858  0002D0  0100               	movlb	0	; () banked
  4859  0002D2  6FF5               	movwf	(printf@prec+1)& (0+255),b
  4860  0002D4  0E06               	movlw	6
  4861  0002D6  6FF4               	movwf	printf@prec& (0+255),b
  4862  0002D8                     l6392:
  4863                           
  4864                           ; BSR set to: 0
  4865                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4866  0002D8  C0E1  FFD9         	movff	printf@ap,fsr2l
  4867  0002DC  C0E2  FFDA         	movff	printf@ap+1,fsr2h
  4868  0002E0  CFDE F0E9          	movff	postinc2,printf@fval
  4869  0002E4  CFDE F0EA          	movff	postinc2,printf@fval+1
  4870  0002E8  CFDD F0EB          	movff	postdec2,printf@fval+2
  4871                           
  4872                           ; BSR set to: 0
  4873  0002EC  0E03               	movlw	3
  4874  0002EE  0100               	movlb	0	; () banked
  4875  0002F0  27E1               	addwf	printf@ap& (0+255),f,b
  4876  0002F2  0E00               	movlw	0
  4877  0002F4  23E2               	addwfc	(printf@ap+1)& (0+255),f,b
  4878                           
  4879                           ; BSR set to: 0
  4880                           ;doprnt.c: 831: if(fval < 0.0) {
  4881  0002F6  0100               	movlb	0	; () banked
  4882  0002F8  AFEB               	btfss	(printf@fval+2)& (0+255),7,b
  4883  0002FA  D011               	goto	l6402
  4884                           
  4885                           ; BSR set to: 0
  4886                           ;doprnt.c: 832: fval = -fval;
  4887  0002FC  C0E9  F027         	movff	printf@fval,___ftneg@f1
  4888  000300  C0EA  F028         	movff	printf@fval+1,___ftneg@f1+1
  4889  000304  C0EB  F029         	movff	printf@fval+2,___ftneg@f1+2
  4890  000308  EC4F  F01D         	call	___ftneg	;wreg free
  4891  00030C  C027  F0E9         	movff	?___ftneg,printf@fval
  4892  000310  C028  F0EA         	movff	?___ftneg+1,printf@fval+1
  4893  000314  C029  F0EB         	movff	?___ftneg+2,printf@fval+2
  4894                           
  4895                           ;doprnt.c: 833: flag |= 0x03;
  4896  000318  0E03               	movlw	3
  4897  00031A  0100               	movlb	0	; () banked
  4898  00031C  13F2               	iorwf	printf@flag& (0+255),f,b
  4899  00031E                     l6402:
  4900                           
  4901                           ; BSR set to: 0
  4902                           ;doprnt.c: 834: }
  4903                           ;doprnt.c: 835: exp = 0;
  4904  00031E  0E00               	movlw	0
  4905  000320  0100               	movlb	0	; () banked
  4906  000322  6FE8               	movwf	(printf@exp+1)& (0+255),b
  4907  000324  0E00               	movlw	0
  4908  000326  6FE7               	movwf	printf@exp& (0+255),b
  4909                           
  4910                           ; BSR set to: 0
  4911                           ;doprnt.c: 836: if( fval!=0) {
  4912  000328  0100               	movlb	0	; () banked
  4913  00032A  51E9               	movf	printf@fval& (0+255),w,b
  4914  00032C  0100               	movlb	0	; () banked
  4915  00032E  11EA               	iorwf	(printf@fval+1)& (0+255),w,b
  4916  000330  0100               	movlb	0	; () banked
  4917  000332  11EB               	iorwf	(printf@fval+2)& (0+255),w,b
  4918  000334  B4D8               	btfsc	status,2,c
  4919  000336  D09A               	goto	l6430
  4920                           
  4921                           ; BSR set to: 0
  4922                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4923  000338  0E82               	movlw	130
  4924  00033A  0100               	movlb	0	; () banked
  4925  00033C  6FD3               	movwf	??_printf& (0+255),b
  4926  00033E  0EFF               	movlw	255
  4927  000340  0100               	movlb	0	; () banked
  4928  000342  6FD4               	movwf	(??_printf+1)& (0+255),b
  4929  000344  C0E9  F0D5         	movff	printf@fval,??_printf+2
  4930  000348  C0EA  F0D6         	movff	printf@fval+1,??_printf+3
  4931  00034C  C0EB  F0D7         	movff	printf@fval+2,??_printf+4
  4932  000350  C0EC  F0D8         	movff	printf@fval+3,??_printf+5
  4933  000354  0E10               	movlw	16
  4934  000356  D006               	goto	u6510
  4935  000358                     u6515:
  4936  000358  0100               	movlb	0	; () banked
  4937  00035A  90D8               	bcf	status,0,c
  4938  00035C  33D8               	rrcf	(??_printf+5)& (0+255),f,b
  4939  00035E  33D7               	rrcf	(??_printf+4)& (0+255),f,b
  4940  000360  33D6               	rrcf	(??_printf+3)& (0+255),f,b
  4941  000362  33D5               	rrcf	(??_printf+2)& (0+255),f,b
  4942  000364                     u6510:
  4943  000364  2EE8               	decfsz	wreg,f,c
  4944  000366  D7F8               	goto	u6515
  4945  000368  0100               	movlb	0	; () banked
  4946  00036A  51D5               	movf	(??_printf+2)& (0+255),w,b
  4947  00036C  0100               	movlb	0	; () banked
  4948  00036E  25D3               	addwf	??_printf& (0+255),w,b
  4949  000370  0100               	movlb	0	; () banked
  4950  000372  6FE7               	movwf	printf@exp& (0+255),b
  4951  000374  0E00               	movlw	0
  4952  000376  0100               	movlb	0	; () banked
  4953  000378  21D4               	addwfc	(??_printf+1)& (0+255),w,b
  4954  00037A  0100               	movlb	0	; () banked
  4955  00037C  6FE8               	movwf	(printf@exp+1)& (0+255),b
  4956                           
  4957                           ; BSR set to: 0
  4958                           ;doprnt.c: 838: exp--;
  4959  00037E  0100               	movlb	0	; () banked
  4960  000380  07E7               	decf	printf@exp& (0+255),f,b
  4961  000382  A0D8               	btfss	status,0,c
  4962  000384  07E8               	decf	(printf@exp+1)& (0+255),f,b
  4963                           
  4964                           ; BSR set to: 0
  4965                           ;doprnt.c: 839: exp *= 3;
  4966  000386  C0E7  F084         	movff	printf@exp,___wmul@multiplier
  4967  00038A  C0E8  F085         	movff	printf@exp+1,___wmul@multiplier+1
  4968  00038E  0E00               	movlw	0
  4969  000390  0100               	movlb	0	; () banked
  4970  000392  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4971  000394  0E03               	movlw	3
  4972  000396  6F86               	movwf	___wmul@multiplicand& (0+255),b
  4973  000398  ECAD  F01C         	call	___wmul	;wreg free
  4974  00039C  C084  F0E7         	movff	?___wmul,printf@exp
  4975  0003A0  C085  F0E8         	movff	?___wmul+1,printf@exp+1
  4976                           
  4977                           ;doprnt.c: 840: exp /= 10;
  4978  0003A4  C0E7  F02D         	movff	printf@exp,___awdiv@dividend
  4979  0003A8  C0E8  F02E         	movff	printf@exp+1,___awdiv@dividend+1
  4980  0003AC  0E00               	movlw	0
  4981  0003AE  6E30               	movwf	___awdiv@divisor+1,c
  4982  0003B0  0E0A               	movlw	10
  4983  0003B2  6E2F               	movwf	___awdiv@divisor,c
  4984  0003B4  EC33  F019         	call	___awdiv	;wreg free
  4985  0003B8  C02D  F0E7         	movff	?___awdiv,printf@exp
  4986  0003BC  C02E  F0E8         	movff	?___awdiv+1,printf@exp+1
  4987                           
  4988                           ;doprnt.c: 841: if(exp < 0)
  4989  0003C0  0100               	movlb	0	; () banked
  4990  0003C2  AFE8               	btfss	(printf@exp+1)& (0+255),7,b
  4991  0003C4  D004               	goto	l6418
  4992                           
  4993                           ; BSR set to: 0
  4994                           ;doprnt.c: 842: exp--;
  4995  0003C6  0100               	movlb	0	; () banked
  4996  0003C8  07E7               	decf	printf@exp& (0+255),f,b
  4997  0003CA  A0D8               	btfss	status,0,c
  4998  0003CC  07E8               	decf	(printf@exp+1)& (0+255),f,b
  4999  0003CE                     l6418:
  5000                           
  5001                           ; BSR set to: 0
  5002                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5003  0003CE  0100               	movlb	0	; () banked
  5004  0003D0  51E7               	movf	printf@exp& (0+255),w,b
  5005  0003D2  0800               	sublw	0
  5006  0003D4  EC9B  F009         	call	_scale
  5007  0003D8  C0A4  F0E3         	movff	?_scale,printf@tmpval
  5008  0003DC  C0A5  F0E4         	movff	?_scale+1,printf@tmpval+1
  5009  0003E0  C0A6  F0E5         	movff	?_scale+2,printf@tmpval+2
  5010                           
  5011                           ;doprnt.c: 847: tmpval.integ *= fval;
  5012  0003E4  C0E3  F095         	movff	printf@tmpval,___ftmul@f1
  5013  0003E8  C0E4  F096         	movff	printf@tmpval+1,___ftmul@f1+1
  5014  0003EC  C0E5  F097         	movff	printf@tmpval+2,___ftmul@f1+2
  5015  0003F0  C0E9  F098         	movff	printf@fval,___ftmul@f2
  5016  0003F4  C0EA  F099         	movff	printf@fval+1,___ftmul@f2+1
  5017  0003F8  C0EB  F09A         	movff	printf@fval+2,___ftmul@f2+2
  5018  0003FC  ECCA  F010         	call	___ftmul	;wreg free
  5019  000400  C095  F0E3         	movff	?___ftmul,printf@tmpval
  5020  000404  C096  F0E4         	movff	?___ftmul+1,printf@tmpval+1
  5021  000408  C097  F0E5         	movff	?___ftmul+2,printf@tmpval+2
  5022                           
  5023                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5024  00040C  C0E3  F080         	movff	printf@tmpval,___ftge@ff1
  5025  000410  C0E4  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  5026  000414  C0E5  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  5027  000418  0E00               	movlw	0
  5028  00041A  0100               	movlb	0	; () banked
  5029  00041C  6F83               	movwf	___ftge@ff2& (0+255),b
  5030  00041E  0E80               	movlw	128
  5031  000420  0100               	movlb	0	; () banked
  5032  000422  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  5033  000424  0E3F               	movlw	63
  5034  000426  0100               	movlb	0	; () banked
  5035  000428  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  5036  00042A  EC14  F018         	call	___ftge	;wreg free
  5037  00042E  0100               	movlb	0	; () banked
  5038  000430  B0D8               	btfsc	status,0,c
  5039  000432  D005               	goto	l6426
  5040                           
  5041                           ; BSR set to: 0
  5042                           ;doprnt.c: 849: exp--;
  5043  000434  0100               	movlb	0	; () banked
  5044  000436  07E7               	decf	printf@exp& (0+255),f,b
  5045  000438  A0D8               	btfss	status,0,c
  5046  00043A  07E8               	decf	(printf@exp+1)& (0+255),f,b
  5047  00043C  D017               	goto	l6430
  5048  00043E                     l6426:
  5049                           
  5050                           ; BSR set to: 0
  5051                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5052  00043E  C0E3  F080         	movff	printf@tmpval,___ftge@ff1
  5053  000442  C0E4  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  5054  000446  C0E5  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  5055  00044A  0E00               	movlw	0
  5056  00044C  0100               	movlb	0	; () banked
  5057  00044E  6F83               	movwf	___ftge@ff2& (0+255),b
  5058  000450  0E20               	movlw	32
  5059  000452  0100               	movlb	0	; () banked
  5060  000454  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  5061  000456  0E41               	movlw	65
  5062  000458  0100               	movlb	0	; () banked
  5063  00045A  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  5064  00045C  EC14  F018         	call	___ftge	;wreg free
  5065  000460  0100               	movlb	0	; () banked
  5066  000462  A0D8               	btfss	status,0,c
  5067  000464  D003               	goto	l6430
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;doprnt.c: 851: exp++;
  5071  000466  0100               	movlb	0	; () banked
  5072  000468  4BE7               	infsnz	printf@exp& (0+255),f,b
  5073  00046A  2BE8               	incf	(printf@exp+1)& (0+255),f,b
  5074  00046C                     l6430:
  5075                           
  5076                           ; BSR set to: 0
  5077                           ;doprnt.c: 852: }
  5078                           ;doprnt.c: 1112: if(prec <= 12)
  5079  00046C  0100               	movlb	0	; () banked
  5080  00046E  BFF5               	btfsc	(printf@prec+1)& (0+255),7,b
  5081  000470  D008               	goto	l6432
  5082  000472  0100               	movlb	0	; () banked
  5083  000474  51F5               	movf	(printf@prec+1)& (0+255),w,b
  5084  000476  E11D               	bnz	l6434
  5085  000478  0E0D               	movlw	13
  5086  00047A  0100               	movlb	0	; () banked
  5087  00047C  5DF4               	subwf	printf@prec& (0+255),w,b
  5088  00047E  B0D8               	btfsc	status,0,c
  5089  000480  D018               	goto	l6434
  5090  000482                     l6432:
  5091                           
  5092                           ; BSR set to: 0
  5093                           ;doprnt.c: 1113: fval += fround(prec);
  5094  000482  C0E9  F0AE         	movff	printf@fval,___ftadd@f1
  5095  000486  C0EA  F0AF         	movff	printf@fval+1,___ftadd@f1+1
  5096  00048A  C0EB  F0B0         	movff	printf@fval+2,___ftadd@f1+2
  5097  00048E  0100               	movlb	0	; () banked
  5098  000490  51F4               	movf	printf@prec& (0+255),w,b
  5099  000492  ECA2  F00D         	call	_fround
  5100  000496  C0A4  F0B1         	movff	?_fround,___ftadd@f2
  5101  00049A  C0A5  F0B2         	movff	?_fround+1,___ftadd@f2+1
  5102  00049E  C0A6  F0B3         	movff	?_fround+2,___ftadd@f2+2
  5103  0004A2  ECE7  F00E         	call	___ftadd	;wreg free
  5104  0004A6  C0AE  F0E9         	movff	?___ftadd,printf@fval
  5105  0004AA  C0AF  F0EA         	movff	?___ftadd+1,printf@fval+1
  5106  0004AE  C0B0  F0EB         	movff	?___ftadd+2,printf@fval+2
  5107  0004B2                     l6434:
  5108                           
  5109                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5110  0004B2  0100               	movlb	0	; () banked
  5111  0004B4  BFE8               	btfsc	(printf@exp+1)& (0+255),7,b
  5112  0004B6  D008               	goto	l6436
  5113  0004B8  0100               	movlb	0	; () banked
  5114  0004BA  51E8               	movf	(printf@exp+1)& (0+255),w,b
  5115  0004BC  E12A               	bnz	l6442
  5116  0004BE  0E0A               	movlw	10
  5117  0004C0  0100               	movlb	0	; () banked
  5118  0004C2  5DE7               	subwf	printf@exp& (0+255),w,b
  5119  0004C4  B0D8               	btfsc	status,0,c
  5120  0004C6  D025               	goto	l6442
  5121  0004C8                     l6436:
  5122                           
  5123                           ; BSR set to: 0
  5124  0004C8  0100               	movlb	0	; () banked
  5125  0004CA  51E9               	movf	printf@fval& (0+255),w,b
  5126  0004CC  0100               	movlb	0	; () banked
  5127  0004CE  11EA               	iorwf	(printf@fval+1)& (0+255),w,b
  5128  0004D0  0100               	movlb	0	; () banked
  5129  0004D2  11EB               	iorwf	(printf@fval+2)& (0+255),w,b
  5130  0004D4  B4D8               	btfsc	status,2,c
  5131  0004D6  D063               	goto	l6456
  5132                           
  5133                           ; BSR set to: 0
  5134  0004D8  C0E9  F0BA         	movff	printf@fval,___fttol@f1
  5135  0004DC  C0EA  F0BB         	movff	printf@fval+1,___fttol@f1+1
  5136  0004E0  C0EB  F0BC         	movff	printf@fval+2,___fttol@f1+2
  5137  0004E4  ECCD  F012         	call	___fttol	;wreg free
  5138  0004E8  0100               	movlb	0	; () banked
  5139  0004EA  51BA               	movf	?___fttol& (0+255),w,b
  5140  0004EC  0100               	movlb	0	; () banked
  5141  0004EE  11BB               	iorwf	(?___fttol+1)& (0+255),w,b
  5142  0004F0  0100               	movlb	0	; () banked
  5143  0004F2  11BC               	iorwf	(?___fttol+2)& (0+255),w,b
  5144  0004F4  0100               	movlb	0	; () banked
  5145  0004F6  11BD               	iorwf	(?___fttol+3)& (0+255),w,b
  5146  0004F8  A4D8               	btfss	status,2,c
  5147  0004FA  D051               	goto	l6456
  5148                           
  5149                           ; BSR set to: 0
  5150  0004FC  0100               	movlb	0	; () banked
  5151  0004FE  BFE8               	btfsc	(printf@exp+1)& (0+255),7,b
  5152  000500  D04E               	goto	l6456
  5153  000502  0100               	movlb	0	; () banked
  5154  000504  51E8               	movf	(printf@exp+1)& (0+255),w,b
  5155  000506  E105               	bnz	l6442
  5156  000508  0E02               	movlw	2
  5157  00050A  0100               	movlb	0	; () banked
  5158  00050C  5DE7               	subwf	printf@exp& (0+255),w,b
  5159  00050E  A0D8               	btfss	status,0,c
  5160  000510  D046               	goto	l6456
  5161  000512                     l6442:
  5162                           
  5163                           ; BSR set to: 0
  5164                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5165  000512  C0E3  F080         	movff	printf@tmpval,___ftge@ff1
  5166  000516  C0E4  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  5167  00051A  C0E5  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  5168  00051E  0E70               	movlw	112
  5169  000520  0100               	movlb	0	; () banked
  5170  000522  6F83               	movwf	___ftge@ff2& (0+255),b
  5171  000524  0E89               	movlw	137
  5172  000526  0100               	movlb	0	; () banked
  5173  000528  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  5174  00052A  0E40               	movlw	64
  5175  00052C  0100               	movlb	0	; () banked
  5176  00052E  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  5177  000530  EC14  F018         	call	___ftge	;wreg free
  5178  000534  0100               	movlb	0	; () banked
  5179  000536  B0D8               	btfsc	status,0,c
  5180  000538  D003               	goto	l6446
  5181                           
  5182                           ; BSR set to: 0
  5183                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5184  00053A  0100               	movlb	0	; () banked
  5185  00053C  0EF7               	movlw	247
  5186  00053E  D002               	goto	L1
  5187  000540                     l6446:
  5188                           
  5189                           ; BSR set to: 0
  5190                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5191  000540  0100               	movlb	0	; () banked
  5192  000542  0EF8               	movlw	248
  5193  000544                     L1:
  5194  000544  27E7               	addwf	printf@exp& (0+255),f,b
  5195  000546  0EFF               	movlw	255
  5196  000548  23E8               	addwfc	(printf@exp+1)& (0+255),f,b
  5197                           
  5198                           ; BSR set to: 0
  5199                           ;doprnt.c: 1124: }
  5200                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5201                           
  5202                           ; BSR set to: 0
  5203  00054A  0100               	movlb	0	; () banked
  5204  00054C  51E7               	movf	printf@exp& (0+255),w,b
  5205  00054E  EC9B  F009         	call	_scale
  5206  000552  C0A4  F0E3         	movff	?_scale,printf@tmpval
  5207  000556  C0A5  F0E4         	movff	?_scale+1,printf@tmpval+1
  5208  00055A  C0A6  F0E5         	movff	?_scale+2,printf@tmpval+2
  5209                           
  5210                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5211  00055E  C0E9  F027         	movff	printf@fval,__tdiv_to_l_@f1
  5212  000562  C0EA  F028         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  5213  000566  C0EB  F029         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  5214  00056A  C0E3  F02A         	movff	printf@tmpval,__tdiv_to_l_@f2
  5215  00056E  C0E4  F02B         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  5216  000572  C0E5  F02C         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  5217  000576  EC79  F011         	call	__tdiv_to_l_	;wreg free
  5218  00057A  C027  F0EC         	movff	?__tdiv_to_l_,printf@val
  5219  00057E  C028  F0ED         	movff	?__tdiv_to_l_+1,printf@val+1
  5220  000582  C029  F0EE         	movff	?__tdiv_to_l_+2,printf@val+2
  5221  000586  C02A  F0EF         	movff	?__tdiv_to_l_+3,printf@val+3
  5222                           
  5223                           ;doprnt.c: 1129: fval = 0.0;
  5224  00058A  0E00               	movlw	0
  5225  00058C  0100               	movlb	0	; () banked
  5226  00058E  6FE9               	movwf	printf@fval& (0+255),b
  5227  000590  0E00               	movlw	0
  5228  000592  0100               	movlb	0	; () banked
  5229  000594  6FEA               	movwf	(printf@fval+1)& (0+255),b
  5230  000596  0E00               	movlw	0
  5231  000598  0100               	movlb	0	; () banked
  5232  00059A  6FEB               	movwf	(printf@fval+2)& (0+255),b
  5233                           
  5234                           ;doprnt.c: 1130: } else {
  5235  00059C  D033               	goto	l6460
  5236  00059E                     l6456:
  5237                           
  5238                           ; BSR set to: 0
  5239                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5240  00059E  C0E9  F0BA         	movff	printf@fval,___fttol@f1
  5241  0005A2  C0EA  F0BB         	movff	printf@fval+1,___fttol@f1+1
  5242  0005A6  C0EB  F0BC         	movff	printf@fval+2,___fttol@f1+2
  5243  0005AA  ECCD  F012         	call	___fttol	;wreg free
  5244  0005AE  C0BA  F0EC         	movff	?___fttol,printf@val
  5245  0005B2  C0BB  F0ED         	movff	?___fttol+1,printf@val+1
  5246  0005B6  C0BC  F0EE         	movff	?___fttol+2,printf@val+2
  5247  0005BA  C0BD  F0EF         	movff	?___fttol+3,printf@val+3
  5248                           
  5249                           ;doprnt.c: 1132: fval -= (double)val;
  5250  0005BE  C0E9  F0BA         	movff	printf@fval,___ftsub@f1
  5251  0005C2  C0EA  F0BB         	movff	printf@fval+1,___ftsub@f1+1
  5252  0005C6  C0EB  F0BC         	movff	printf@fval+2,___ftsub@f1+2
  5253  0005CA  C0EC  F02F         	movff	printf@val,___lltoft@c
  5254  0005CE  C0ED  F030         	movff	printf@val+1,___lltoft@c+1
  5255  0005D2  C0EE  F031         	movff	printf@val+2,___lltoft@c+2
  5256  0005D6  C0EF  F032         	movff	printf@val+3,___lltoft@c+3
  5257  0005DA  ECC7  F01A         	call	___lltoft	;wreg free
  5258  0005DE  C02F  F0BD         	movff	?___lltoft,___ftsub@f2
  5259  0005E2  C030  F0BE         	movff	?___lltoft+1,___ftsub@f2+1
  5260  0005E6  C031  F0BF         	movff	?___lltoft+2,___ftsub@f2+2
  5261  0005EA  EC63  F01B         	call	___ftsub	;wreg free
  5262  0005EE  C0BA  F0E9         	movff	?___ftsub,printf@fval
  5263  0005F2  C0BB  F0EA         	movff	?___ftsub+1,printf@fval+1
  5264  0005F6  C0BC  F0EB         	movff	?___ftsub+2,printf@fval+2
  5265                           
  5266                           ;doprnt.c: 1133: exp = 0;
  5267  0005FA  0E00               	movlw	0
  5268  0005FC  0100               	movlb	0	; () banked
  5269  0005FE  6FE8               	movwf	(printf@exp+1)& (0+255),b
  5270  000600  0E00               	movlw	0
  5271  000602  6FE7               	movwf	printf@exp& (0+255),b
  5272  000604                     l6460:
  5273                           
  5274                           ; BSR set to: 0
  5275                           ;doprnt.c: 1134: }
  5276                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5277  000604  0E01               	movlw	1
  5278  000606  0100               	movlb	0	; () banked
  5279  000608  6FF6               	movwf	printf@c& (0+255),b
  5280  00060A                     l6462:
  5281                           
  5282                           ; BSR set to: 0
  5283  00060A  0E0A               	movlw	10
  5284  00060C  0100               	movlb	0	; () banked
  5285  00060E  19F6               	xorwf	printf@c& (0+255),w,b
  5286  000610  B4D8               	btfsc	status,2,c
  5287  000612  D01E               	goto	l6474
  5288                           
  5289                           ; BSR set to: 0
  5290                           ;doprnt.c: 1137: if(val < dpowers[c])
  5291                           
  5292                           ; BSR set to: 0
  5293                           
  5294                           ; BSR set to: 0
  5295  000614  0100               	movlb	0	; () banked
  5296  000616  51F6               	movf	printf@c& (0+255),w,b
  5297  000618  0D04               	mullw	4
  5298  00061A  0E1D               	movlw	low _dpowers
  5299  00061C  24F3               	addwf	prodl,w,c
  5300  00061E  6EF6               	movwf	tblptrl,c
  5301  000620  0EFE               	movlw	high _dpowers
  5302  000622  20F4               	addwfc	prodh,w,c
  5303  000624  6EF7               	movwf	tblptrh,c
  5304  000626                     	if	0	;There are less than 3 active tblptr bytes
  5305  000626                     	endif
  5306  000626  0009               	tblrd		*+
  5307  000628  50F5               	movf	tablat,w,c
  5308  00062A  0100               	movlb	0	; () banked
  5309  00062C  5DEC               	subwf	printf@val& (0+255),w,b
  5310  00062E  0009               	tblrd		*+
  5311  000630  50F5               	movf	tablat,w,c
  5312  000632  0100               	movlb	0	; () banked
  5313  000634  59ED               	subwfb	(printf@val+1)& (0+255),w,b
  5314  000636  0009               	tblrd		*+
  5315  000638  50F5               	movf	tablat,w,c
  5316  00063A  0100               	movlb	0	; () banked
  5317  00063C  59EE               	subwfb	(printf@val+2)& (0+255),w,b
  5318  00063E  0009               	tblrd		*+
  5319  000640  50F5               	movf	tablat,w,c
  5320  000642  0100               	movlb	0	; () banked
  5321  000644  59EF               	subwfb	(printf@val+3)& (0+255),w,b
  5322  000646  A0D8               	btfss	status,0,c
  5323  000648  D003               	goto	l6474
  5324                           
  5325                           ; BSR set to: 0
  5326                           
  5327                           ; BSR set to: 0
  5328                           
  5329                           ; BSR set to: 0
  5330                           ;doprnt.c: 1138: break;
  5331  00064A  0100               	movlb	0	; () banked
  5332  00064C  2BF6               	incf	printf@c& (0+255),f,b
  5333  00064E  D7DD               	goto	l6462
  5334  000650                     l6474:
  5335                           
  5336                           ; BSR set to: 0
  5337                           ;doprnt.c: 1142: width -= prec + c + exp;
  5338  000650  C0F6  F0D3         	movff	printf@c,??_printf
  5339  000654  0100               	movlb	0	; () banked
  5340  000656  6BD4               	clrf	(??_printf+1)& (0+255),b
  5341  000658  BFD3               	btfsc	??_printf& (0+255),7,b
  5342  00065A  07D4               	decf	(??_printf+1)& (0+255),f,b
  5343  00065C  0100               	movlb	0	; () banked
  5344  00065E  51F4               	movf	printf@prec& (0+255),w,b
  5345  000660  0100               	movlb	0	; () banked
  5346  000662  27D3               	addwf	??_printf& (0+255),f,b
  5347  000664  0100               	movlb	0	; () banked
  5348  000666  51F5               	movf	(printf@prec+1)& (0+255),w,b
  5349  000668  0100               	movlb	0	; () banked
  5350  00066A  23D4               	addwfc	(??_printf+1)& (0+255),f,b
  5351  00066C  0100               	movlb	0	; () banked
  5352  00066E  51E7               	movf	printf@exp& (0+255),w,b
  5353  000670  0100               	movlb	0	; () banked
  5354  000672  27D3               	addwf	??_printf& (0+255),f,b
  5355  000674  0100               	movlb	0	; () banked
  5356  000676  51E8               	movf	(printf@exp+1)& (0+255),w,b
  5357  000678  0100               	movlb	0	; () banked
  5358  00067A  23D4               	addwfc	(??_printf+1)& (0+255),f,b
  5359  00067C  0100               	movlb	0	; () banked
  5360  00067E  51D3               	movf	??_printf& (0+255),w,b
  5361  000680  0100               	movlb	0	; () banked
  5362  000682  5FF0               	subwf	printf@width& (0+255),f,b
  5363  000684  0100               	movlb	0	; () banked
  5364  000686  51D4               	movf	(??_printf+1)& (0+255),w,b
  5365  000688  0100               	movlb	0	; () banked
  5366  00068A  5BF1               	subwfb	(printf@width+1)& (0+255),f,b
  5367                           
  5368                           ;doprnt.c: 1143: if(
  5369                           ;doprnt.c: 1147: prec)
  5370  00068C  0100               	movlb	0	; () banked
  5371  00068E  51F4               	movf	printf@prec& (0+255),w,b
  5372  000690  0100               	movlb	0	; () banked
  5373  000692  11F5               	iorwf	(printf@prec+1)& (0+255),w,b
  5374  000694  B4D8               	btfsc	status,2,c
  5375  000696  D004               	goto	l6478
  5376                           
  5377                           ; BSR set to: 0
  5378                           ;doprnt.c: 1148: width--;
  5379  000698  0100               	movlb	0	; () banked
  5380  00069A  07F0               	decf	printf@width& (0+255),f,b
  5381  00069C  A0D8               	btfss	status,0,c
  5382  00069E  07F1               	decf	(printf@width+1)& (0+255),f,b
  5383  0006A0                     l6478:
  5384                           
  5385                           ; BSR set to: 0
  5386                           ;doprnt.c: 1149: if(flag & 0x03)
  5387  0006A0  0E03               	movlw	3
  5388  0006A2  0100               	movlb	0	; () banked
  5389  0006A4  15F2               	andwf	printf@flag& (0+255),w,b
  5390  0006A6  0100               	movlb	0	; () banked
  5391  0006A8  6FD3               	movwf	??_printf& (0+255),b
  5392  0006AA  0E00               	movlw	0
  5393  0006AC  0100               	movlb	0	; () banked
  5394  0006AE  15F3               	andwf	(printf@flag+1)& (0+255),w,b
  5395  0006B0  0100               	movlb	0	; () banked
  5396  0006B2  6FD4               	movwf	(??_printf+1)& (0+255),b
  5397  0006B4  0100               	movlb	0	; () banked
  5398  0006B6  51D3               	movf	??_printf& (0+255),w,b
  5399  0006B8  0100               	movlb	0	; () banked
  5400  0006BA  11D4               	iorwf	(??_printf+1)& (0+255),w,b
  5401  0006BC  B4D8               	btfsc	status,2,c
  5402  0006BE  D004               	goto	l6482
  5403                           
  5404                           ; BSR set to: 0
  5405                           ;doprnt.c: 1150: width--;
  5406  0006C0  0100               	movlb	0	; () banked
  5407  0006C2  07F0               	decf	printf@width& (0+255),f,b
  5408  0006C4  A0D8               	btfss	status,0,c
  5409  0006C6  07F1               	decf	(printf@width+1)& (0+255),f,b
  5410  0006C8                     l6482:
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;doprnt.c: 1153: if(flag & 0x04) {
  5414  0006C8  0100               	movlb	0	; () banked
  5415  0006CA  A5F2               	btfss	printf@flag& (0+255),2,b
  5416  0006CC  D02D               	goto	l6498
  5417                           
  5418                           ; BSR set to: 0
  5419                           ;doprnt.c: 1157: if(flag & 0x03)
  5420  0006CE  0E03               	movlw	3
  5421  0006D0  0100               	movlb	0	; () banked
  5422  0006D2  15F2               	andwf	printf@flag& (0+255),w,b
  5423  0006D4  0100               	movlb	0	; () banked
  5424  0006D6  6FD3               	movwf	??_printf& (0+255),b
  5425  0006D8  0E00               	movlw	0
  5426  0006DA  0100               	movlb	0	; () banked
  5427  0006DC  15F3               	andwf	(printf@flag+1)& (0+255),w,b
  5428  0006DE  0100               	movlb	0	; () banked
  5429  0006E0  6FD4               	movwf	(??_printf+1)& (0+255),b
  5430  0006E2  0100               	movlb	0	; () banked
  5431  0006E4  51D3               	movf	??_printf& (0+255),w,b
  5432  0006E6  0100               	movlb	0	; () banked
  5433  0006E8  11D4               	iorwf	(??_printf+1)& (0+255),w,b
  5434  0006EA  B4D8               	btfsc	status,2,c
  5435  0006EC  D00B               	goto	l6492
  5436                           
  5437                           ; BSR set to: 0
  5438                           ;doprnt.c: 1159: (putch('-') );
  5439  0006EE  0E2D               	movlw	45
  5440  0006F0  EC61  F01D         	call	_putch
  5441                           
  5442                           ;doprnt.c: 1168: while(width > 0) {
  5443  0006F4  D007               	goto	l6492
  5444  0006F6                     l6488:
  5445                           
  5446                           ;doprnt.c: 1169: (putch('0') );
  5447  0006F6  0E30               	movlw	48
  5448  0006F8  EC61  F01D         	call	_putch
  5449                           
  5450                           ;doprnt.c: 1170: width--;
  5451  0006FC  0100               	movlb	0	; () banked
  5452  0006FE  07F0               	decf	printf@width& (0+255),f,b
  5453  000700  A0D8               	btfss	status,0,c
  5454  000702  07F1               	decf	(printf@width+1)& (0+255),f,b
  5455  000704                     l6492:
  5456  000704  0100               	movlb	0	; () banked
  5457  000706  BFF1               	btfsc	(printf@width+1)& (0+255),7,b
  5458  000708  D074               	goto	l6510
  5459  00070A  0100               	movlb	0	; () banked
  5460  00070C  51F1               	movf	(printf@width+1)& (0+255),w,b
  5461  00070E  E1F3               	bnz	l6488
  5462  000710  0100               	movlb	0	; () banked
  5463  000712  05F0               	decf	printf@width& (0+255),w,b
  5464  000714  A0D8               	btfss	status,0,c
  5465  000716  D06D               	goto	l6510
  5466  000718  D7EE               	goto	l6488
  5467  00071A                     l6494:
  5468                           
  5469                           ; BSR set to: 0
  5470                           ;doprnt.c: 1181: (putch(' ') );
  5471  00071A  0E20               	movlw	32
  5472  00071C  EC61  F01D         	call	_putch
  5473                           
  5474                           ;doprnt.c: 1182: width--;
  5475  000720  0100               	movlb	0	; () banked
  5476  000722  07F0               	decf	printf@width& (0+255),f,b
  5477  000724  A0D8               	btfss	status,0,c
  5478  000726  07F1               	decf	(printf@width+1)& (0+255),f,b
  5479  000728                     l6498:
  5480                           
  5481                           ; BSR set to: 0
  5482  000728  0100               	movlb	0	; () banked
  5483  00072A  BFF1               	btfsc	(printf@width+1)& (0+255),7,b
  5484  00072C  D007               	goto	l6500
  5485  00072E  0100               	movlb	0	; () banked
  5486  000730  51F1               	movf	(printf@width+1)& (0+255),w,b
  5487  000732  E1F3               	bnz	l6494
  5488  000734  0100               	movlb	0	; () banked
  5489  000736  05F0               	decf	printf@width& (0+255),w,b
  5490  000738  B0D8               	btfsc	status,0,c
  5491  00073A  D7EF               	goto	l6494
  5492  00073C                     l6500:
  5493                           
  5494                           ; BSR set to: 0
  5495                           ;doprnt.c: 1183: }
  5496                           ;doprnt.c: 1188: if(flag & 0x03)
  5497  00073C  0E03               	movlw	3
  5498  00073E  0100               	movlb	0	; () banked
  5499  000740  15F2               	andwf	printf@flag& (0+255),w,b
  5500  000742  0100               	movlb	0	; () banked
  5501  000744  6FD3               	movwf	??_printf& (0+255),b
  5502  000746  0E00               	movlw	0
  5503  000748  0100               	movlb	0	; () banked
  5504  00074A  15F3               	andwf	(printf@flag+1)& (0+255),w,b
  5505  00074C  0100               	movlb	0	; () banked
  5506  00074E  6FD4               	movwf	(??_printf+1)& (0+255),b
  5507  000750  0100               	movlb	0	; () banked
  5508  000752  51D3               	movf	??_printf& (0+255),w,b
  5509  000754  0100               	movlb	0	; () banked
  5510  000756  11D4               	iorwf	(??_printf+1)& (0+255),w,b
  5511  000758  B4D8               	btfsc	status,2,c
  5512  00075A  D04B               	goto	l6510
  5513                           
  5514                           ; BSR set to: 0
  5515                           ;doprnt.c: 1190: (putch('-') );
  5516  00075C  0E2D               	movlw	45
  5517  00075E  EC61  F01D         	call	_putch
  5518                           
  5519                           ;doprnt.c: 1195: }
  5520                           ;doprnt.c: 1196: while(c--) {
  5521  000762  D047               	goto	l6510
  5522  000764                     l6504:
  5523                           
  5524                           ;doprnt.c: 1200: {
  5525                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5526  000764  C0EC  F027         	movff	printf@val,___lldiv@dividend
  5527  000768  C0ED  F028         	movff	printf@val+1,___lldiv@dividend+1
  5528  00076C  C0EE  F029         	movff	printf@val+2,___lldiv@dividend+2
  5529  000770  C0EF  F02A         	movff	printf@val+3,___lldiv@dividend+3
  5530  000774  0100               	movlb	0	; () banked
  5531  000776  51F6               	movf	printf@c& (0+255),w,b
  5532  000778  0D04               	mullw	4
  5533  00077A  0E1D               	movlw	low _dpowers
  5534  00077C  24F3               	addwf	prodl,w,c
  5535  00077E  6EF6               	movwf	tblptrl,c
  5536  000780  0EFE               	movlw	high _dpowers
  5537  000782  20F4               	addwfc	prodh,w,c
  5538  000784  6EF7               	movwf	tblptrh,c
  5539  000786                     	if	0	;There are less than 3 active tblptr bytes
  5540  000786                     	endif
  5541  000786  0009               	tblrd		*+
  5542  000788  CFF5 F02B          	movff	tablat,___lldiv@divisor
  5543  00078C  0009               	tblrd		*+
  5544  00078E  CFF5 F02C          	movff	tablat,___lldiv@divisor+1
  5545  000792  0009               	tblrd		*+
  5546  000794  CFF5 F02D          	movff	tablat,___lldiv@divisor+2
  5547  000798  000A               	tblrd		*-
  5548  00079A  CFF5 F02E          	movff	tablat,___lldiv@divisor+3
  5549  00079E  EC16  F01A         	call	___lldiv	;wreg free
  5550  0007A2  C027  F0E3         	movff	?___lldiv,printf@tmpval
  5551  0007A6  C028  F0E4         	movff	?___lldiv+1,printf@tmpval+1
  5552  0007AA  C029  F0E5         	movff	?___lldiv+2,printf@tmpval+2
  5553  0007AE  C02A  F0E6         	movff	?___lldiv+3,printf@tmpval+3
  5554                           
  5555                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5556  0007B2  C0E3  F080         	movff	printf@tmpval,___llmod@dividend
  5557  0007B6  C0E4  F081         	movff	printf@tmpval+1,___llmod@dividend+1
  5558  0007BA  C0E5  F082         	movff	printf@tmpval+2,___llmod@dividend+2
  5559  0007BE  C0E6  F083         	movff	printf@tmpval+3,___llmod@dividend+3
  5560  0007C2  0E0A               	movlw	10
  5561  0007C4  0100               	movlb	0	; () banked
  5562  0007C6  6F84               	movwf	___llmod@divisor& (0+255),b
  5563  0007C8  0E00               	movlw	0
  5564  0007CA  6F85               	movwf	(___llmod@divisor+1)& (0+255),b
  5565  0007CC  0E00               	movlw	0
  5566  0007CE  6F86               	movwf	(___llmod@divisor+2)& (0+255),b
  5567  0007D0  0E00               	movlw	0
  5568  0007D2  6F87               	movwf	(___llmod@divisor+3)& (0+255),b
  5569  0007D4  EC81  F019         	call	___llmod	;wreg free
  5570  0007D8  C080  F0E3         	movff	?___llmod,printf@tmpval
  5571  0007DC  C081  F0E4         	movff	?___llmod+1,printf@tmpval+1
  5572  0007E0  C082  F0E5         	movff	?___llmod+2,printf@tmpval+2
  5573  0007E4  C083  F0E6         	movff	?___llmod+3,printf@tmpval+3
  5574                           
  5575                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  5576  0007E8  0100               	movlb	0	; () banked
  5577  0007EA  51E3               	movf	printf@tmpval& (0+255),w,b
  5578  0007EC  0F30               	addlw	48
  5579  0007EE  EC61  F01D         	call	_putch
  5580  0007F2                     l6510:
  5581  0007F2  0100               	movlb	0	; () banked
  5582  0007F4  07F6               	decf	printf@c& (0+255),f,b
  5583  0007F6  0100               	movlb	0	; () banked
  5584  0007F8  29F6               	incf	printf@c& (0+255),w,b
  5585  0007FA  B4D8               	btfsc	status,2,c
  5586  0007FC  D008               	goto	l6516
  5587  0007FE  D7B2               	goto	l6504
  5588  000800                     l6512:
  5589                           
  5590                           ; BSR set to: 0
  5591                           ;doprnt.c: 1208: (putch('0') );
  5592  000800  0E30               	movlw	48
  5593  000802  EC61  F01D         	call	_putch
  5594                           
  5595                           ;doprnt.c: 1209: exp--;
  5596  000806  0100               	movlb	0	; () banked
  5597  000808  07E7               	decf	printf@exp& (0+255),f,b
  5598  00080A  A0D8               	btfss	status,0,c
  5599  00080C  07E8               	decf	(printf@exp+1)& (0+255),f,b
  5600  00080E                     l6516:
  5601                           
  5602                           ; BSR set to: 0
  5603  00080E  0100               	movlb	0	; () banked
  5604  000810  BFE8               	btfsc	(printf@exp+1)& (0+255),7,b
  5605  000812  D007               	goto	l6518
  5606  000814  0100               	movlb	0	; () banked
  5607  000816  51E8               	movf	(printf@exp+1)& (0+255),w,b
  5608  000818  E1F3               	bnz	l6512
  5609  00081A  0100               	movlb	0	; () banked
  5610  00081C  05E7               	decf	printf@exp& (0+255),w,b
  5611  00081E  B0D8               	btfsc	status,0,c
  5612  000820  D7EF               	goto	l6512
  5613  000822                     l6518:
  5614                           
  5615                           ; BSR set to: 0
  5616                           ;doprnt.c: 1210: }
  5617                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5618  000822  0100               	movlb	0	; () banked
  5619  000824  BFF5               	btfsc	(printf@prec+1)& (0+255),7,b
  5620  000826  D00C               	goto	l777
  5621  000828  0100               	movlb	0	; () banked
  5622  00082A  51F5               	movf	(printf@prec+1)& (0+255),w,b
  5623  00082C  E105               	bnz	u6730
  5624  00082E  0E09               	movlw	9
  5625  000830  0100               	movlb	0	; () banked
  5626  000832  5DF4               	subwf	printf@prec& (0+255),w,b
  5627  000834  A0D8               	btfss	status,0,c
  5628  000836  D004               	goto	l777
  5629  000838                     u6730:
  5630                           
  5631                           ; BSR set to: 0
  5632                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5633  000838  0E08               	movlw	8
  5634  00083A  0100               	movlb	0	; () banked
  5635  00083C  6FF6               	movwf	printf@c& (0+255),b
  5636  00083E  D002               	goto	l6522
  5637  000840                     l777:
  5638                           
  5639                           ; BSR set to: 0
  5640                           ;doprnt.c: 1213: else
  5641                           ;doprnt.c: 1214: c = prec;
  5642  000840  C0F4  F0F6         	movff	printf@prec,printf@c
  5643  000844                     l6522:
  5644                           
  5645                           ; BSR set to: 0
  5646                           ;doprnt.c: 1215: prec -= c;
  5647  000844  0100               	movlb	0	; () banked
  5648  000846  51F6               	movf	printf@c& (0+255),w,b
  5649  000848  0100               	movlb	0	; () banked
  5650  00084A  5FF4               	subwf	printf@prec& (0+255),f,b
  5651  00084C  0E00               	movlw	0
  5652  00084E  0100               	movlb	0	; () banked
  5653  000850  BFF6               	btfsc	printf@c& (0+255),7,b
  5654  000852  0EFF               	movlw	255
  5655  000854  0100               	movlb	0	; () banked
  5656  000856  5BF5               	subwfb	(printf@prec+1)& (0+255),f,b
  5657                           
  5658                           ; BSR set to: 0
  5659                           ;doprnt.c: 1219: if(c)
  5660  000858  0100               	movlb	0	; () banked
  5661  00085A  51F6               	movf	printf@c& (0+255),w,b
  5662  00085C  0100               	movlb	0	; () banked
  5663  00085E  B4D8               	btfsc	status,2,c
  5664  000860  D003               	goto	l6528
  5665                           
  5666                           ; BSR set to: 0
  5667                           ;doprnt.c: 1221: (putch('.') );
  5668  000862  0E2E               	movlw	46
  5669  000864  EC61  F01D         	call	_putch
  5670  000868                     l6528:
  5671                           
  5672                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5673  000868  0100               	movlb	0	; () banked
  5674  00086A  51F6               	movf	printf@c& (0+255),w,b
  5675  00086C  EC9B  F009         	call	_scale
  5676  000870  C0A4  F0D9         	movff	?_scale,_printf$1357
  5677  000874  C0A5  F0DA         	movff	?_scale+1,_printf$1357+1
  5678  000878  C0A6  F0DB         	movff	?_scale+2,_printf$1357+2
  5679                           
  5680                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5681  00087C  C0E9  F098         	movff	printf@fval,___ftmul@f2
  5682  000880  C0EA  F099         	movff	printf@fval+1,___ftmul@f2+1
  5683  000884  C0EB  F09A         	movff	printf@fval+2,___ftmul@f2+2
  5684  000888  C0D9  F095         	movff	_printf$1357,___ftmul@f1
  5685  00088C  C0DA  F096         	movff	_printf$1357+1,___ftmul@f1+1
  5686  000890  C0DB  F097         	movff	_printf$1357+2,___ftmul@f1+2
  5687  000894  ECCA  F010         	call	___ftmul	;wreg free
  5688  000898  C095  F0BA         	movff	?___ftmul,___fttol@f1
  5689  00089C  C096  F0BB         	movff	?___ftmul+1,___fttol@f1+1
  5690  0008A0  C097  F0BC         	movff	?___ftmul+2,___fttol@f1+2
  5691  0008A4  ECCD  F012         	call	___fttol	;wreg free
  5692  0008A8  C0BA  F0EC         	movff	?___fttol,printf@val
  5693  0008AC  C0BB  F0ED         	movff	?___fttol+1,printf@val+1
  5694  0008B0  C0BC  F0EE         	movff	?___fttol+2,printf@val+2
  5695  0008B4  C0BD  F0EF         	movff	?___fttol+3,printf@val+3
  5696                           
  5697                           ;doprnt.c: 1228: while(c--) {
  5698  0008B8  D06E               	goto	l6538
  5699  0008BA                     l6532:
  5700                           
  5701                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5702  0008BA  C0EC  F027         	movff	printf@val,___lldiv@dividend
  5703  0008BE  C0ED  F028         	movff	printf@val+1,___lldiv@dividend+1
  5704  0008C2  C0EE  F029         	movff	printf@val+2,___lldiv@dividend+2
  5705  0008C6  C0EF  F02A         	movff	printf@val+3,___lldiv@dividend+3
  5706  0008CA  0100               	movlb	0	; () banked
  5707  0008CC  51F6               	movf	printf@c& (0+255),w,b
  5708  0008CE  0D04               	mullw	4
  5709  0008D0  0E1D               	movlw	low _dpowers
  5710  0008D2  24F3               	addwf	prodl,w,c
  5711  0008D4  6EF6               	movwf	tblptrl,c
  5712  0008D6  0EFE               	movlw	high _dpowers
  5713  0008D8  20F4               	addwfc	prodh,w,c
  5714  0008DA  6EF7               	movwf	tblptrh,c
  5715  0008DC                     	if	0	;There are less than 3 active tblptr bytes
  5716  0008DC                     	endif
  5717  0008DC  0009               	tblrd		*+
  5718  0008DE  CFF5 F02B          	movff	tablat,___lldiv@divisor
  5719  0008E2  0009               	tblrd		*+
  5720  0008E4  CFF5 F02C          	movff	tablat,___lldiv@divisor+1
  5721  0008E8  0009               	tblrd		*+
  5722  0008EA  CFF5 F02D          	movff	tablat,___lldiv@divisor+2
  5723  0008EE  000A               	tblrd		*-
  5724  0008F0  CFF5 F02E          	movff	tablat,___lldiv@divisor+3
  5725  0008F4  EC16  F01A         	call	___lldiv	;wreg free
  5726  0008F8  C027  F0E3         	movff	?___lldiv,printf@tmpval
  5727  0008FC  C028  F0E4         	movff	?___lldiv+1,printf@tmpval+1
  5728  000900  C029  F0E5         	movff	?___lldiv+2,printf@tmpval+2
  5729  000904  C02A  F0E6         	movff	?___lldiv+3,printf@tmpval+3
  5730                           
  5731                           ;doprnt.c: 1230: tmpval.vd %= 10;
  5732  000908  C0E3  F080         	movff	printf@tmpval,___llmod@dividend
  5733  00090C  C0E4  F081         	movff	printf@tmpval+1,___llmod@dividend+1
  5734  000910  C0E5  F082         	movff	printf@tmpval+2,___llmod@dividend+2
  5735  000914  C0E6  F083         	movff	printf@tmpval+3,___llmod@dividend+3
  5736  000918  0E0A               	movlw	10
  5737  00091A  0100               	movlb	0	; () banked
  5738  00091C  6F84               	movwf	___llmod@divisor& (0+255),b
  5739  00091E  0E00               	movlw	0
  5740  000920  6F85               	movwf	(___llmod@divisor+1)& (0+255),b
  5741  000922  0E00               	movlw	0
  5742  000924  6F86               	movwf	(___llmod@divisor+2)& (0+255),b
  5743  000926  0E00               	movlw	0
  5744  000928  6F87               	movwf	(___llmod@divisor+3)& (0+255),b
  5745  00092A  EC81  F019         	call	___llmod	;wreg free
  5746  00092E  C080  F0E3         	movff	?___llmod,printf@tmpval
  5747  000932  C081  F0E4         	movff	?___llmod+1,printf@tmpval+1
  5748  000936  C082  F0E5         	movff	?___llmod+2,printf@tmpval+2
  5749  00093A  C083  F0E6         	movff	?___llmod+3,printf@tmpval+3
  5750                           
  5751                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  5752  00093E  0100               	movlb	0	; () banked
  5753  000940  51E3               	movf	printf@tmpval& (0+255),w,b
  5754  000942  0F30               	addlw	48
  5755  000944  EC61  F01D         	call	_putch
  5756                           
  5757                           ;doprnt.c: 1232: val %= dpowers[c];
  5758  000948  C0EC  F080         	movff	printf@val,___llmod@dividend
  5759  00094C  C0ED  F081         	movff	printf@val+1,___llmod@dividend+1
  5760  000950  C0EE  F082         	movff	printf@val+2,___llmod@dividend+2
  5761  000954  C0EF  F083         	movff	printf@val+3,___llmod@dividend+3
  5762  000958  0100               	movlb	0	; () banked
  5763  00095A  51F6               	movf	printf@c& (0+255),w,b
  5764  00095C  0D04               	mullw	4
  5765  00095E  0E1D               	movlw	low _dpowers
  5766  000960  24F3               	addwf	prodl,w,c
  5767  000962  6EF6               	movwf	tblptrl,c
  5768  000964  0EFE               	movlw	high _dpowers
  5769  000966  20F4               	addwfc	prodh,w,c
  5770  000968  6EF7               	movwf	tblptrh,c
  5771  00096A                     	if	0	;There are less than 3 active tblptr bytes
  5772  00096A                     	endif
  5773  00096A  0009               	tblrd		*+
  5774  00096C  CFF5 F084          	movff	tablat,___llmod@divisor
  5775  000970  0009               	tblrd		*+
  5776  000972  CFF5 F085          	movff	tablat,___llmod@divisor+1
  5777  000976  0009               	tblrd		*+
  5778  000978  CFF5 F086          	movff	tablat,___llmod@divisor+2
  5779  00097C  000A               	tblrd		*-
  5780  00097E  CFF5 F087          	movff	tablat,___llmod@divisor+3
  5781  000982  EC81  F019         	call	___llmod	;wreg free
  5782  000986  C080  F0EC         	movff	?___llmod,printf@val
  5783  00098A  C081  F0ED         	movff	?___llmod+1,printf@val+1
  5784  00098E  C082  F0EE         	movff	?___llmod+2,printf@val+2
  5785  000992  C083  F0EF         	movff	?___llmod+3,printf@val+3
  5786  000996                     l6538:
  5787  000996  0100               	movlb	0	; () banked
  5788  000998  07F6               	decf	printf@c& (0+255),f,b
  5789  00099A  0100               	movlb	0	; () banked
  5790  00099C  29F6               	incf	printf@c& (0+255),w,b
  5791  00099E  B4D8               	btfsc	status,2,c
  5792  0009A0  D008               	goto	l6544
  5793  0009A2  D78B               	goto	l6532
  5794  0009A4                     l6540:
  5795                           
  5796                           ; BSR set to: 0
  5797                           ;doprnt.c: 1236: (putch('0') );
  5798  0009A4  0E30               	movlw	48
  5799  0009A6  EC61  F01D         	call	_putch
  5800                           
  5801                           ;doprnt.c: 1237: prec--;
  5802  0009AA  0100               	movlb	0	; () banked
  5803  0009AC  07F4               	decf	printf@prec& (0+255),f,b
  5804  0009AE  A0D8               	btfss	status,0,c
  5805  0009B0  07F5               	decf	(printf@prec+1)& (0+255),f,b
  5806  0009B2                     l6544:
  5807                           
  5808                           ; BSR set to: 0
  5809  0009B2  0100               	movlb	0	; () banked
  5810  0009B4  51F4               	movf	printf@prec& (0+255),w,b
  5811  0009B6  0100               	movlb	0	; () banked
  5812  0009B8  11F5               	iorwf	(printf@prec+1)& (0+255),w,b
  5813  0009BA  B4D8               	btfsc	status,2,c
  5814  0009BC  D22D               	goto	l6672
  5815  0009BE  D7F2               	goto	l6540
  5816  0009C0                     l737:
  5817                           
  5818                           ; BSR set to: 0
  5819                           ;doprnt.c: 1246: }
  5820                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5821  0009C0  0100               	movlb	0	; () banked
  5822  0009C2  BFF2               	btfsc	printf@flag& (0+255),7,b
  5823  0009C4  D034               	goto	l786
  5824                           
  5825                           ; BSR set to: 0
  5826                           ;doprnt.c: 1253: {
  5827                           ;doprnt.c: 1255: if(flag & 0x10)
  5828  0009C6  0100               	movlb	0	; () banked
  5829  0009C8  A9F2               	btfss	printf@flag& (0+255),4,b
  5830  0009CA  D00E               	goto	l6552
  5831                           
  5832                           ; BSR set to: 0
  5833                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  5834  0009CC  C0E1  FFD9         	movff	printf@ap,fsr2l
  5835  0009D0  C0E2  FFDA         	movff	printf@ap+1,fsr2h
  5836  0009D4  CFDE F0EC          	movff	postinc2,printf@val
  5837  0009D8  CFDE F0ED          	movff	postinc2,printf@val+1
  5838  0009DC  CFDE F0EE          	movff	postinc2,printf@val+2
  5839  0009E0  CFDE F0EF          	movff	postinc2,printf@val+3
  5840                           
  5841                           ; BSR set to: 0
  5842  0009E4  0E04               	movlw	4
  5843  0009E6  D00F               	goto	L2
  5844  0009E8                     l6552:
  5845                           
  5846                           ; BSR set to: 0
  5847                           ;doprnt.c: 1257: else
  5848                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5849  0009E8  C0E1  FFD9         	movff	printf@ap,fsr2l
  5850  0009EC  C0E2  FFDA         	movff	printf@ap+1,fsr2h
  5851  0009F0  CFDE F0EC          	movff	postinc2,printf@val
  5852  0009F4  CFDD F0ED          	movff	postdec2,printf@val+1
  5853  0009F8  0100               	movlb	0	; () banked
  5854  0009FA  0E00               	movlw	0
  5855  0009FC  BFED               	btfsc	(printf@val+1)& (0+255),7,b
  5856  0009FE  0EFF               	movlw	-1
  5857  000A00  6FEE               	movwf	(printf@val+2)& (0+255),b
  5858  000A02  6FEF               	movwf	(printf@val+3)& (0+255),b
  5859                           
  5860                           ; BSR set to: 0
  5861  000A04  0E02               	movlw	2
  5862  000A06                     L2:
  5863  000A06  0100               	movlb	0	; () banked
  5864  000A08  27E1               	addwf	printf@ap& (0+255),f,b
  5865  000A0A  0E00               	movlw	0
  5866  000A0C  23E2               	addwfc	(printf@ap+1)& (0+255),f,b
  5867                           
  5868                           ; BSR set to: 0
  5869                           ;doprnt.c: 1261: if((long)val < 0) {
  5870                           
  5871                           ; BSR set to: 0
  5872  000A0E  0100               	movlb	0	; () banked
  5873  000A10  AFEF               	btfss	(printf@val+3)& (0+255),7,b
  5874  000A12  D032               	goto	l6570
  5875                           
  5876                           ; BSR set to: 0
  5877                           ;doprnt.c: 1262: flag |= 0x03;
  5878  000A14  0E03               	movlw	3
  5879  000A16  0100               	movlb	0	; () banked
  5880  000A18  13F2               	iorwf	printf@flag& (0+255),f,b
  5881                           
  5882                           ; BSR set to: 0
  5883                           ;doprnt.c: 1263: val = -val;
  5884  000A1A  0100               	movlb	0	; () banked
  5885  000A1C  1FEF               	comf	(printf@val+3)& (0+255),f,b
  5886  000A1E  1FEE               	comf	(printf@val+2)& (0+255),f,b
  5887  000A20  1FED               	comf	(printf@val+1)& (0+255),f,b
  5888  000A22  6DEC               	negf	printf@val& (0+255),b
  5889  000A24  0E00               	movlw	0
  5890  000A26  23ED               	addwfc	(printf@val+1)& (0+255),f,b
  5891  000A28  23EE               	addwfc	(printf@val+2)& (0+255),f,b
  5892  000A2A  23EF               	addwfc	(printf@val+3)& (0+255),f,b
  5893                           
  5894                           ; BSR set to: 0
  5895                           ;doprnt.c: 1264: }
  5896                           ;doprnt.c: 1266: }
  5897  000A2C  D025               	goto	l6570
  5898  000A2E                     l786:
  5899                           
  5900                           ; BSR set to: 0
  5901                           ;doprnt.c: 1268: else
  5902                           ;doprnt.c: 1273: {
  5903                           ;doprnt.c: 1281: if(flag & 0x10)
  5904  000A2E  0100               	movlb	0	; () banked
  5905  000A30  A9F2               	btfss	printf@flag& (0+255),4,b
  5906  000A32  D00E               	goto	l6566
  5907                           
  5908                           ; BSR set to: 0
  5909                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  5910  000A34  C0E1  FFD9         	movff	printf@ap,fsr2l
  5911  000A38  C0E2  FFDA         	movff	printf@ap+1,fsr2h
  5912  000A3C  CFDE F0EC          	movff	postinc2,printf@val
  5913  000A40  CFDE F0ED          	movff	postinc2,printf@val+1
  5914  000A44  CFDE F0EE          	movff	postinc2,printf@val+2
  5915  000A48  CFDE F0EF          	movff	postinc2,printf@val+3
  5916                           
  5917                           ; BSR set to: 0
  5918  000A4C  0E04               	movlw	4
  5919  000A4E  D010               	goto	L3
  5920  000A50                     l6566:
  5921                           
  5922                           ; BSR set to: 0
  5923                           ;doprnt.c: 1283: else
  5924                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5925  000A50  C0E1  FFD9         	movff	printf@ap,fsr2l
  5926  000A54  C0E2  FFDA         	movff	printf@ap+1,fsr2h
  5927  000A58  CFDE F0D3          	movff	postinc2,??_printf
  5928  000A5C  CFDD F0D4          	movff	postdec2,??_printf+1
  5929  000A60  C0D3  F0EC         	movff	??_printf,printf@val
  5930  000A64  C0D4  F0ED         	movff	??_printf+1,printf@val+1
  5931  000A68  0100               	movlb	0	; () banked
  5932  000A6A  6BEE               	clrf	(printf@val+2)& (0+255),b
  5933  000A6C  6BEF               	clrf	(printf@val+3)& (0+255),b
  5934                           
  5935                           ; BSR set to: 0
  5936  000A6E  0E02               	movlw	2
  5937  000A70                     L3:
  5938  000A70  0100               	movlb	0	; () banked
  5939  000A72  27E1               	addwf	printf@ap& (0+255),f,b
  5940  000A74  0E00               	movlw	0
  5941  000A76  23E2               	addwfc	(printf@ap+1)& (0+255),f,b
  5942  000A78                     l6570:
  5943                           
  5944                           ; BSR set to: 0
  5945                           ;doprnt.c: 1287: }
  5946                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  5947  000A78  0100               	movlb	0	; () banked
  5948  000A7A  51F4               	movf	printf@prec& (0+255),w,b
  5949  000A7C  0100               	movlb	0	; () banked
  5950  000A7E  11F5               	iorwf	(printf@prec+1)& (0+255),w,b
  5951  000A80  A4D8               	btfss	status,2,c
  5952  000A82  D05A               	goto	l6606
  5953                           
  5954                           ; BSR set to: 0
  5955  000A84  0100               	movlb	0	; () banked
  5956  000A86  51EC               	movf	printf@val& (0+255),w,b
  5957  000A88  0100               	movlb	0	; () banked
  5958  000A8A  11ED               	iorwf	(printf@val+1)& (0+255),w,b
  5959  000A8C  0100               	movlb	0	; () banked
  5960  000A8E  11EE               	iorwf	(printf@val+2)& (0+255),w,b
  5961  000A90  0100               	movlb	0	; () banked
  5962  000A92  11EF               	iorwf	(printf@val+3)& (0+255),w,b
  5963  000A94  A4D8               	btfss	status,2,c
  5964  000A96  D050               	goto	l6606
  5965                           
  5966                           ; BSR set to: 0
  5967                           ;doprnt.c: 1291: prec++;
  5968  000A98  0100               	movlb	0	; () banked
  5969  000A9A  4BF4               	infsnz	printf@prec& (0+255),f,b
  5970  000A9C  2BF5               	incf	(printf@prec+1)& (0+255),f,b
  5971                           
  5972                           ; BSR set to: 0
  5973                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5974  000A9E  D04C               	goto	l6606
  5975  000AA0                     l6576:
  5976                           
  5977                           ; BSR set to: 0
  5978                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5979  000AA0  0E01               	movlw	1
  5980  000AA2  0100               	movlb	0	; () banked
  5981  000AA4  6FF6               	movwf	printf@c& (0+255),b
  5982  000AA6                     l6578:
  5983                           
  5984                           ; BSR set to: 0
  5985  000AA6  0E0A               	movlw	10
  5986  000AA8  0100               	movlb	0	; () banked
  5987  000AAA  19F6               	xorwf	printf@c& (0+255),w,b
  5988  000AAC  B4D8               	btfsc	status,2,c
  5989  000AAE  D04D               	goto	l6608
  5990                           
  5991                           ; BSR set to: 0
  5992                           ;doprnt.c: 1306: if(val < dpowers[c])
  5993                           
  5994                           ; BSR set to: 0
  5995                           
  5996                           ; BSR set to: 0
  5997  000AB0  0100               	movlb	0	; () banked
  5998  000AB2  51F6               	movf	printf@c& (0+255),w,b
  5999  000AB4  0D04               	mullw	4
  6000  000AB6  0E1D               	movlw	low _dpowers
  6001  000AB8  24F3               	addwf	prodl,w,c
  6002  000ABA  6EF6               	movwf	tblptrl,c
  6003  000ABC  0EFE               	movlw	high _dpowers
  6004  000ABE  20F4               	addwfc	prodh,w,c
  6005  000AC0  6EF7               	movwf	tblptrh,c
  6006  000AC2                     	if	0	;There are less than 3 active tblptr bytes
  6007  000AC2                     	endif
  6008  000AC2  0009               	tblrd		*+
  6009  000AC4  50F5               	movf	tablat,w,c
  6010  000AC6  0100               	movlb	0	; () banked
  6011  000AC8  5DEC               	subwf	printf@val& (0+255),w,b
  6012  000ACA  0009               	tblrd		*+
  6013  000ACC  50F5               	movf	tablat,w,c
  6014  000ACE  0100               	movlb	0	; () banked
  6015  000AD0  59ED               	subwfb	(printf@val+1)& (0+255),w,b
  6016  000AD2  0009               	tblrd		*+
  6017  000AD4  50F5               	movf	tablat,w,c
  6018  000AD6  0100               	movlb	0	; () banked
  6019  000AD8  59EE               	subwfb	(printf@val+2)& (0+255),w,b
  6020  000ADA  0009               	tblrd		*+
  6021  000ADC  50F5               	movf	tablat,w,c
  6022  000ADE  0100               	movlb	0	; () banked
  6023  000AE0  59EF               	subwfb	(printf@val+3)& (0+255),w,b
  6024  000AE2  A0D8               	btfss	status,0,c
  6025  000AE4  D032               	goto	l6608
  6026                           
  6027                           ; BSR set to: 0
  6028                           
  6029                           ; BSR set to: 0
  6030                           
  6031                           ; BSR set to: 0
  6032                           ;doprnt.c: 1307: break;
  6033  000AE6  0100               	movlb	0	; () banked
  6034  000AE8  2BF6               	incf	printf@c& (0+255),f,b
  6035  000AEA  D7DD               	goto	l6578
  6036  000AEC                     l6590:
  6037                           
  6038                           ; BSR set to: 0
  6039                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6040  000AEC  0E01               	movlw	1
  6041  000AEE  0100               	movlb	0	; () banked
  6042  000AF0  6FF6               	movwf	printf@c& (0+255),b
  6043  000AF2                     l6592:
  6044                           
  6045                           ; BSR set to: 0
  6046  000AF2  0E08               	movlw	8
  6047  000AF4  0100               	movlb	0	; () banked
  6048  000AF6  19F6               	xorwf	printf@c& (0+255),w,b
  6049  000AF8  B4D8               	btfsc	status,2,c
  6050  000AFA  D027               	goto	l6608
  6051                           
  6052                           ; BSR set to: 0
  6053                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6054                           
  6055                           ; BSR set to: 0
  6056                           
  6057                           ; BSR set to: 0
  6058  000AFC  0100               	movlb	0	; () banked
  6059  000AFE  51F6               	movf	printf@c& (0+255),w,b
  6060  000B00  0D04               	mullw	4
  6061  000B02  0E93               	movlw	low _hexpowers
  6062  000B04  24F3               	addwf	prodl,w,c
  6063  000B06  6EF6               	movwf	tblptrl,c
  6064  000B08  0EFE               	movlw	high _hexpowers
  6065  000B0A  20F4               	addwfc	prodh,w,c
  6066  000B0C  6EF7               	movwf	tblptrh,c
  6067  000B0E                     	if	0	;There are less than 3 active tblptr bytes
  6068  000B0E                     	endif
  6069  000B0E  0009               	tblrd		*+
  6070  000B10  50F5               	movf	tablat,w,c
  6071  000B12  0100               	movlb	0	; () banked
  6072  000B14  5DEC               	subwf	printf@val& (0+255),w,b
  6073  000B16  0009               	tblrd		*+
  6074  000B18  50F5               	movf	tablat,w,c
  6075  000B1A  0100               	movlb	0	; () banked
  6076  000B1C  59ED               	subwfb	(printf@val+1)& (0+255),w,b
  6077  000B1E  0009               	tblrd		*+
  6078  000B20  50F5               	movf	tablat,w,c
  6079  000B22  0100               	movlb	0	; () banked
  6080  000B24  59EE               	subwfb	(printf@val+2)& (0+255),w,b
  6081  000B26  0009               	tblrd		*+
  6082  000B28  50F5               	movf	tablat,w,c
  6083  000B2A  0100               	movlb	0	; () banked
  6084  000B2C  59EF               	subwfb	(printf@val+3)& (0+255),w,b
  6085  000B2E  A0D8               	btfss	status,0,c
  6086  000B30  D00C               	goto	l6608
  6087                           
  6088                           ; BSR set to: 0
  6089                           
  6090                           ; BSR set to: 0
  6091                           
  6092                           ; BSR set to: 0
  6093                           ;doprnt.c: 1318: break;
  6094  000B32  0100               	movlb	0	; () banked
  6095  000B34  2BF6               	incf	printf@c& (0+255),f,b
  6096  000B36  D7DD               	goto	l6592
  6097  000B38                     l6606:
  6098                           
  6099                           ; BSR set to: 0
  6100  000B38  0100               	movlb	0	; () banked
  6101  000B3A  51F2               	movf	printf@flag& (0+255),w,b
  6102  000B3C  0B80               	andlw	128
  6103                           
  6104                           ; Switch size 1, requested type "space"
  6105                           ; Number of cases is 2, Range of values is 0 to 128
  6106                           ; switch strategies available:
  6107                           ; Name         Instructions Cycles
  6108                           ; simple_byte            7     4 (average)
  6109                           ;	Chosen strategy is simple_byte
  6110  000B3E  0A00               	xorlw	0	; case 0
  6111  000B40  B4D8               	btfsc	status,2,c
  6112  000B42  D7AE               	goto	l6576
  6113  000B44  0A80               	xorlw	128	; case 128
  6114  000B46  B4D8               	btfsc	status,2,c
  6115  000B48  D7D1               	goto	l6590
  6116  000B4A                     l6608:
  6117                           
  6118                           ; BSR set to: 0
  6119                           ;doprnt.c: 1339: if(c < prec)
  6120  000B4A  0E80               	movlw	128
  6121  000B4C  0100               	movlb	0	; () banked
  6122  000B4E  BFF6               	btfsc	printf@c& (0+255),7,b
  6123  000B50  0E7F               	movlw	127
  6124  000B52  0100               	movlb	0	; () banked
  6125  000B54  6FD3               	movwf	??_printf& (0+255),b
  6126  000B56  0100               	movlb	0	; () banked
  6127  000B58  51F4               	movf	printf@prec& (0+255),w,b
  6128  000B5A  0100               	movlb	0	; () banked
  6129  000B5C  5DF6               	subwf	printf@c& (0+255),w,b
  6130  000B5E  0100               	movlb	0	; () banked
  6131  000B60  51F5               	movf	(printf@prec+1)& (0+255),w,b
  6132  000B62  0A80               	xorlw	128
  6133  000B64  0100               	movlb	0	; () banked
  6134  000B66  59D3               	subwfb	??_printf& (0+255),w,b
  6135  000B68  B0D8               	btfsc	status,0,c
  6136  000B6A  D003               	goto	l6612
  6137                           
  6138                           ; BSR set to: 0
  6139                           ;doprnt.c: 1340: c = prec;
  6140  000B6C  C0F4  F0F6         	movff	printf@prec,printf@c
  6141  000B70  D018               	goto	l6616
  6142  000B72                     l6612:
  6143                           
  6144                           ; BSR set to: 0
  6145                           ;doprnt.c: 1341: else if(prec < c)
  6146  000B72  0100               	movlb	0	; () banked
  6147  000B74  51F5               	movf	(printf@prec+1)& (0+255),w,b
  6148  000B76  0A80               	xorlw	128
  6149  000B78  0100               	movlb	0	; () banked
  6150  000B7A  6FD3               	movwf	??_printf& (0+255),b
  6151  000B7C  0100               	movlb	0	; () banked
  6152  000B7E  51F6               	movf	printf@c& (0+255),w,b
  6153  000B80  0100               	movlb	0	; () banked
  6154  000B82  5DF4               	subwf	printf@prec& (0+255),w,b
  6155  000B84  0E80               	movlw	128
  6156  000B86  0100               	movlb	0	; () banked
  6157  000B88  BFF6               	btfsc	printf@c& (0+255),7,b
  6158  000B8A  0E7F               	movlw	127
  6159  000B8C  0100               	movlb	0	; () banked
  6160  000B8E  59D3               	subwfb	??_printf& (0+255),w,b
  6161  000B90  B0D8               	btfsc	status,0,c
  6162  000B92  D007               	goto	l6616
  6163                           
  6164                           ; BSR set to: 0
  6165                           ;doprnt.c: 1342: prec = c;
  6166  000B94  0100               	movlb	0	; () banked
  6167  000B96  51F6               	movf	printf@c& (0+255),w,b
  6168  000B98  0100               	movlb	0	; () banked
  6169  000B9A  6FF4               	movwf	printf@prec& (0+255),b
  6170  000B9C  6BF5               	clrf	(printf@prec+1)& (0+255),b
  6171  000B9E  BFF4               	btfsc	printf@prec& (0+255),7,b
  6172  000BA0  07F5               	decf	(printf@prec+1)& (0+255),f,b
  6173  000BA2                     l6616:
  6174                           
  6175                           ; BSR set to: 0
  6176                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6177  000BA2  0100               	movlb	0	; () banked
  6178  000BA4  51F0               	movf	printf@width& (0+255),w,b
  6179  000BA6  0100               	movlb	0	; () banked
  6180  000BA8  11F1               	iorwf	(printf@width+1)& (0+255),w,b
  6181  000BAA  B4D8               	btfsc	status,2,c
  6182  000BAC  D014               	goto	l6622
  6183                           
  6184                           ; BSR set to: 0
  6185  000BAE  0E03               	movlw	3
  6186  000BB0  0100               	movlb	0	; () banked
  6187  000BB2  15F2               	andwf	printf@flag& (0+255),w,b
  6188  000BB4  0100               	movlb	0	; () banked
  6189  000BB6  6FD3               	movwf	??_printf& (0+255),b
  6190  000BB8  0E00               	movlw	0
  6191  000BBA  0100               	movlb	0	; () banked
  6192  000BBC  15F3               	andwf	(printf@flag+1)& (0+255),w,b
  6193  000BBE  0100               	movlb	0	; () banked
  6194  000BC0  6FD4               	movwf	(??_printf+1)& (0+255),b
  6195  000BC2  0100               	movlb	0	; () banked
  6196  000BC4  51D3               	movf	??_printf& (0+255),w,b
  6197  000BC6  0100               	movlb	0	; () banked
  6198  000BC8  11D4               	iorwf	(??_printf+1)& (0+255),w,b
  6199  000BCA  B4D8               	btfsc	status,2,c
  6200  000BCC  D004               	goto	l6622
  6201                           
  6202                           ; BSR set to: 0
  6203                           ;doprnt.c: 1346: width--;
  6204  000BCE  0100               	movlb	0	; () banked
  6205  000BD0  07F0               	decf	printf@width& (0+255),f,b
  6206  000BD2  A0D8               	btfss	status,0,c
  6207  000BD4  07F1               	decf	(printf@width+1)& (0+255),f,b
  6208  000BD6                     l6622:
  6209                           
  6210                           ; BSR set to: 0
  6211                           ;doprnt.c: 1348: if(flag & 0x4000) {
  6212  000BD6  0100               	movlb	0	; () banked
  6213  000BD8  ADF3               	btfss	(printf@flag+1)& (0+255),6,b
  6214  000BDA  D01E               	goto	l6630
  6215                           
  6216                           ; BSR set to: 0
  6217                           ;doprnt.c: 1349: if(width > prec)
  6218  000BDC  0100               	movlb	0	; () banked
  6219  000BDE  51F0               	movf	printf@width& (0+255),w,b
  6220  000BE0  0100               	movlb	0	; () banked
  6221  000BE2  5DF4               	subwf	printf@prec& (0+255),w,b
  6222  000BE4  0100               	movlb	0	; () banked
  6223  000BE6  51F5               	movf	(printf@prec+1)& (0+255),w,b
  6224  000BE8  0A80               	xorlw	128
  6225  000BEA  0100               	movlb	0	; () banked
  6226  000BEC  6FD3               	movwf	??_printf& (0+255),b
  6227  000BEE  0100               	movlb	0	; () banked
  6228  000BF0  51F1               	movf	(printf@width+1)& (0+255),w,b
  6229  000BF2  0A80               	xorlw	128
  6230  000BF4  0100               	movlb	0	; () banked
  6231  000BF6  59D3               	subwfb	??_printf& (0+255),w,b
  6232  000BF8  B0D8               	btfsc	status,0,c
  6233  000BFA  D009               	goto	l6628
  6234                           
  6235                           ; BSR set to: 0
  6236                           ;doprnt.c: 1350: width -= prec;
  6237  000BFC  0100               	movlb	0	; () banked
  6238  000BFE  51F4               	movf	printf@prec& (0+255),w,b
  6239  000C00  0100               	movlb	0	; () banked
  6240  000C02  5FF0               	subwf	printf@width& (0+255),f,b
  6241  000C04  0100               	movlb	0	; () banked
  6242  000C06  51F5               	movf	(printf@prec+1)& (0+255),w,b
  6243  000C08  0100               	movlb	0	; () banked
  6244  000C0A  5BF1               	subwfb	(printf@width+1)& (0+255),f,b
  6245  000C0C  D005               	goto	l6630
  6246  000C0E                     l6628:
  6247                           
  6248                           ; BSR set to: 0
  6249                           ;doprnt.c: 1351: else
  6250                           ;doprnt.c: 1352: width = 0;
  6251  000C0E  0E00               	movlw	0
  6252  000C10  0100               	movlb	0	; () banked
  6253  000C12  6FF1               	movwf	(printf@width+1)& (0+255),b
  6254  000C14  0E00               	movlw	0
  6255  000C16  6FF0               	movwf	printf@width& (0+255),b
  6256  000C18                     l6630:
  6257                           
  6258                           ; BSR set to: 0
  6259                           ;doprnt.c: 1353: }
  6260                           ;doprnt.c: 1381: if(width > c)
  6261  000C18  0E80               	movlw	128
  6262  000C1A  0100               	movlb	0	; () banked
  6263  000C1C  BFF6               	btfsc	printf@c& (0+255),7,b
  6264  000C1E  0E7F               	movlw	127
  6265  000C20  0100               	movlb	0	; () banked
  6266  000C22  6FD3               	movwf	??_printf& (0+255),b
  6267  000C24  0100               	movlb	0	; () banked
  6268  000C26  51F0               	movf	printf@width& (0+255),w,b
  6269  000C28  0100               	movlb	0	; () banked
  6270  000C2A  5DF6               	subwf	printf@c& (0+255),w,b
  6271  000C2C  0100               	movlb	0	; () banked
  6272  000C2E  51F1               	movf	(printf@width+1)& (0+255),w,b
  6273  000C30  0A80               	xorlw	128
  6274  000C32  0100               	movlb	0	; () banked
  6275  000C34  59D3               	subwfb	??_printf& (0+255),w,b
  6276  000C36  B0D8               	btfsc	status,0,c
  6277  000C38  D00B               	goto	l6634
  6278                           
  6279                           ; BSR set to: 0
  6280                           ;doprnt.c: 1382: width -= c;
  6281  000C3A  0100               	movlb	0	; () banked
  6282  000C3C  51F6               	movf	printf@c& (0+255),w,b
  6283  000C3E  0100               	movlb	0	; () banked
  6284  000C40  5FF0               	subwf	printf@width& (0+255),f,b
  6285  000C42  0E00               	movlw	0
  6286  000C44  0100               	movlb	0	; () banked
  6287  000C46  BFF6               	btfsc	printf@c& (0+255),7,b
  6288  000C48  0EFF               	movlw	255
  6289  000C4A  0100               	movlb	0	; () banked
  6290  000C4C  5BF1               	subwfb	(printf@width+1)& (0+255),f,b
  6291  000C4E  D005               	goto	l6636
  6292  000C50                     l6634:
  6293                           
  6294                           ; BSR set to: 0
  6295                           ;doprnt.c: 1383: else
  6296                           ;doprnt.c: 1384: width = 0;
  6297  000C50  0E00               	movlw	0
  6298  000C52  0100               	movlb	0	; () banked
  6299  000C54  6FF1               	movwf	(printf@width+1)& (0+255),b
  6300  000C56  0E00               	movlw	0
  6301  000C58  6FF0               	movwf	printf@width& (0+255),b
  6302  000C5A                     l6636:
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;doprnt.c: 1387: if(flag & 0x04) {
  6306  000C5A  0100               	movlb	0	; () banked
  6307  000C5C  A5F2               	btfss	printf@flag& (0+255),2,b
  6308  000C5E  D021               	goto	l6648
  6309                           
  6310                           ; BSR set to: 0
  6311                           ;doprnt.c: 1392: if(flag & 0x03)
  6312  000C60  0E03               	movlw	3
  6313  000C62  0100               	movlb	0	; () banked
  6314  000C64  15F2               	andwf	printf@flag& (0+255),w,b
  6315  000C66  0100               	movlb	0	; () banked
  6316  000C68  6FD3               	movwf	??_printf& (0+255),b
  6317  000C6A  0E00               	movlw	0
  6318  000C6C  0100               	movlb	0	; () banked
  6319  000C6E  15F3               	andwf	(printf@flag+1)& (0+255),w,b
  6320  000C70  0100               	movlb	0	; () banked
  6321  000C72  6FD4               	movwf	(??_printf+1)& (0+255),b
  6322  000C74  0100               	movlb	0	; () banked
  6323  000C76  51D3               	movf	??_printf& (0+255),w,b
  6324  000C78  0100               	movlb	0	; () banked
  6325  000C7A  11D4               	iorwf	(??_printf+1)& (0+255),w,b
  6326  000C7C  B4D8               	btfsc	status,2,c
  6327  000C7E  D003               	goto	l6642
  6328                           
  6329                           ; BSR set to: 0
  6330                           ;doprnt.c: 1393: (putch('-') );
  6331  000C80  0E2D               	movlw	45
  6332  000C82  EC61  F01D         	call	_putch
  6333  000C86                     l6642:
  6334                           
  6335                           ;doprnt.c: 1415: if(width)
  6336  000C86  0100               	movlb	0	; () banked
  6337  000C88  51F0               	movf	printf@width& (0+255),w,b
  6338  000C8A  0100               	movlb	0	; () banked
  6339  000C8C  11F1               	iorwf	(printf@width+1)& (0+255),w,b
  6340  000C8E  B4D8               	btfsc	status,2,c
  6341  000C90  D0B8               	goto	l6670
  6342                           
  6343                           ; BSR set to: 0
  6344                           ;doprnt.c: 1417: (putch('0') );
  6345                           
  6346                           ; BSR set to: 0
  6347                           
  6348                           ;doprnt.c: 1416: do
  6349  000C92  0E30               	movlw	48
  6350  000C94  EC61  F01D         	call	_putch
  6351                           
  6352                           ;doprnt.c: 1418: while(--width);
  6353  000C98  0100               	movlb	0	; () banked
  6354  000C9A  07F0               	decf	printf@width& (0+255),f,b
  6355  000C9C  A0D8               	btfss	status,0,c
  6356  000C9E  07F1               	decf	(printf@width+1)& (0+255),f,b
  6357  000CA0  D7F2               	goto	l6642
  6358  000CA2                     l6648:
  6359                           
  6360                           ; BSR set to: 0
  6361                           ;doprnt.c: 1422: {
  6362                           ;doprnt.c: 1424: if(width
  6363                           ;doprnt.c: 1428: )
  6364  000CA2  0100               	movlb	0	; () banked
  6365  000CA4  51F0               	movf	printf@width& (0+255),w,b
  6366  000CA6  0100               	movlb	0	; () banked
  6367  000CA8  11F1               	iorwf	(printf@width+1)& (0+255),w,b
  6368  000CAA  B4D8               	btfsc	status,2,c
  6369  000CAC  D00D               	goto	l6654
  6370  000CAE                     l6650:
  6371                           
  6372                           ; BSR set to: 0
  6373                           ;doprnt.c: 1430: (putch(' ') );
  6374  000CAE  0E20               	movlw	32
  6375  000CB0  EC61  F01D         	call	_putch
  6376                           
  6377                           ;doprnt.c: 1431: while(--width);
  6378  000CB4  0100               	movlb	0	; () banked
  6379  000CB6  07F0               	decf	printf@width& (0+255),f,b
  6380  000CB8  A0D8               	btfss	status,0,c
  6381  000CBA  07F1               	decf	(printf@width+1)& (0+255),f,b
  6382  000CBC  0100               	movlb	0	; () banked
  6383  000CBE  51F0               	movf	printf@width& (0+255),w,b
  6384  000CC0  0100               	movlb	0	; () banked
  6385  000CC2  11F1               	iorwf	(printf@width+1)& (0+255),w,b
  6386  000CC4  A4D8               	btfss	status,2,c
  6387  000CC6  D7F3               	goto	l6650
  6388  000CC8                     l6654:
  6389                           
  6390                           ; BSR set to: 0
  6391                           ;doprnt.c: 1438: if(flag & 0x03)
  6392  000CC8  0E03               	movlw	3
  6393  000CCA  0100               	movlb	0	; () banked
  6394  000CCC  15F2               	andwf	printf@flag& (0+255),w,b
  6395  000CCE  0100               	movlb	0	; () banked
  6396  000CD0  6FD3               	movwf	??_printf& (0+255),b
  6397  000CD2  0E00               	movlw	0
  6398  000CD4  0100               	movlb	0	; () banked
  6399  000CD6  15F3               	andwf	(printf@flag+1)& (0+255),w,b
  6400  000CD8  0100               	movlb	0	; () banked
  6401  000CDA  6FD4               	movwf	(??_printf+1)& (0+255),b
  6402  000CDC  0100               	movlb	0	; () banked
  6403  000CDE  51D3               	movf	??_printf& (0+255),w,b
  6404  000CE0  0100               	movlb	0	; () banked
  6405  000CE2  11D4               	iorwf	(??_printf+1)& (0+255),w,b
  6406  000CE4  B4D8               	btfsc	status,2,c
  6407  000CE6  D08D               	goto	l6670
  6408                           
  6409                           ; BSR set to: 0
  6410                           ;doprnt.c: 1439: (putch('-') );
  6411  000CE8  0E2D               	movlw	45
  6412  000CEA  EC61  F01D         	call	_putch
  6413                           
  6414                           ;doprnt.c: 1469: }
  6415                           ;doprnt.c: 1474: while(prec--) {
  6416  000CEE  D089               	goto	l6670
  6417  000CF0                     l6658:
  6418                           
  6419                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6420  000CF0  C0F4  F0D3         	movff	printf@prec,??_printf
  6421  000CF4  C0F5  F0D4         	movff	printf@prec+1,??_printf+1
  6422  000CF8  0100               	movlb	0	; () banked
  6423  000CFA  90D8               	bcf	status,0,c
  6424  000CFC  37D3               	rlcf	??_printf& (0+255),f,b
  6425  000CFE  37D4               	rlcf	(??_printf+1)& (0+255),f,b
  6426  000D00  0100               	movlb	0	; () banked
  6427  000D02  90D8               	bcf	status,0,c
  6428  000D04  37D3               	rlcf	??_printf& (0+255),f,b
  6429  000D06  37D4               	rlcf	(??_printf+1)& (0+255),f,b
  6430  000D08  0E1D               	movlw	low _dpowers
  6431  000D0A  0100               	movlb	0	; () banked
  6432  000D0C  25D3               	addwf	??_printf& (0+255),w,b
  6433  000D0E  6EF6               	movwf	tblptrl,c
  6434  000D10  0EFE               	movlw	high _dpowers
  6435  000D12  21D4               	addwfc	(??_printf+1)& (0+255),w,b
  6436  000D14  6EF7               	movwf	tblptrh,c
  6437  000D16                     	if	0	;There are less than 3 active tblptr bytes
  6438  000D16                     	endif
  6439  000D16  0009               	tblrd		*+
  6440  000D18  CFF5 F02B          	movff	tablat,___lldiv@divisor
  6441  000D1C  0009               	tblrd		*+
  6442  000D1E  CFF5 F02C          	movff	tablat,___lldiv@divisor+1
  6443  000D22  0009               	tblrd		*+
  6444  000D24  CFF5 F02D          	movff	tablat,___lldiv@divisor+2
  6445  000D28  000A               	tblrd		*-
  6446  000D2A  CFF5 F02E          	movff	tablat,___lldiv@divisor+3
  6447  000D2E  C0EC  F027         	movff	printf@val,___lldiv@dividend
  6448  000D32  C0ED  F028         	movff	printf@val+1,___lldiv@dividend+1
  6449  000D36  C0EE  F029         	movff	printf@val+2,___lldiv@dividend+2
  6450  000D3A  C0EF  F02A         	movff	printf@val+3,___lldiv@dividend+3
  6451  000D3E  EC16  F01A         	call	___lldiv	;wreg free
  6452  000D42  C027  F080         	movff	?___lldiv,___llmod@dividend
  6453  000D46  C028  F081         	movff	?___lldiv+1,___llmod@dividend+1
  6454  000D4A  C029  F082         	movff	?___lldiv+2,___llmod@dividend+2
  6455  000D4E  C02A  F083         	movff	?___lldiv+3,___llmod@dividend+3
  6456  000D52  0E0A               	movlw	10
  6457  000D54  0100               	movlb	0	; () banked
  6458  000D56  6F84               	movwf	___llmod@divisor& (0+255),b
  6459  000D58  0E00               	movlw	0
  6460  000D5A  6F85               	movwf	(___llmod@divisor+1)& (0+255),b
  6461  000D5C  0E00               	movlw	0
  6462  000D5E  6F86               	movwf	(___llmod@divisor+2)& (0+255),b
  6463  000D60  0E00               	movlw	0
  6464  000D62  6F87               	movwf	(___llmod@divisor+3)& (0+255),b
  6465  000D64  EC81  F019         	call	___llmod	;wreg free
  6466  000D68  0100               	movlb	0	; () banked
  6467  000D6A  5180               	movf	?___llmod& (0+255),w,b
  6468  000D6C  0F30               	addlw	48
  6469  000D6E  0100               	movlb	0	; () banked
  6470  000D70  6FF6               	movwf	printf@c& (0+255),b
  6471                           
  6472                           ;doprnt.c: 1491: break;
  6473  000D72  D043               	goto	l6668
  6474  000D74                     l6660:
  6475                           
  6476                           ; BSR set to: 0
  6477                           ;doprnt.c: 1499: {
  6478                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6479  000D74  C0EC  F027         	movff	printf@val,___lldiv@dividend
  6480  000D78  C0ED  F028         	movff	printf@val+1,___lldiv@dividend+1
  6481  000D7C  C0EE  F029         	movff	printf@val+2,___lldiv@dividend+2
  6482  000D80  C0EF  F02A         	movff	printf@val+3,___lldiv@dividend+3
  6483  000D84  C0F4  F0D3         	movff	printf@prec,??_printf
  6484  000D88  C0F5  F0D4         	movff	printf@prec+1,??_printf+1
  6485  000D8C  0100               	movlb	0	; () banked
  6486  000D8E  90D8               	bcf	status,0,c
  6487  000D90  37D3               	rlcf	??_printf& (0+255),f,b
  6488  000D92  37D4               	rlcf	(??_printf+1)& (0+255),f,b
  6489  000D94  0100               	movlb	0	; () banked
  6490  000D96  90D8               	bcf	status,0,c
  6491  000D98  37D3               	rlcf	??_printf& (0+255),f,b
  6492  000D9A  37D4               	rlcf	(??_printf+1)& (0+255),f,b
  6493  000D9C  0E93               	movlw	low _hexpowers
  6494  000D9E  0100               	movlb	0	; () banked
  6495  000DA0  25D3               	addwf	??_printf& (0+255),w,b
  6496  000DA2  6EF6               	movwf	tblptrl,c
  6497  000DA4  0EFE               	movlw	high _hexpowers
  6498  000DA6  21D4               	addwfc	(??_printf+1)& (0+255),w,b
  6499  000DA8  6EF7               	movwf	tblptrh,c
  6500  000DAA                     	if	0	;There are less than 3 active tblptr bytes
  6501  000DAA                     	endif
  6502  000DAA  0009               	tblrd		*+
  6503  000DAC  CFF5 F02B          	movff	tablat,___lldiv@divisor
  6504  000DB0  0009               	tblrd		*+
  6505  000DB2  CFF5 F02C          	movff	tablat,___lldiv@divisor+1
  6506  000DB6  0009               	tblrd		*+
  6507  000DB8  CFF5 F02D          	movff	tablat,___lldiv@divisor+2
  6508  000DBC  000A               	tblrd		*-
  6509  000DBE  CFF5 F02E          	movff	tablat,___lldiv@divisor+3
  6510  000DC2  EC16  F01A         	call	___lldiv	;wreg free
  6511  000DC6  5027               	movf	?___lldiv,w,c
  6512  000DC8  0B0F               	andlw	15
  6513  000DCA  0100               	movlb	0	; () banked
  6514  000DCC  6FDC               	movwf	printf@idx& (0+255),b
  6515                           
  6516                           ; BSR set to: 0
  6517                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6518  000DCE  0100               	movlb	0	; () banked
  6519  000DD0  51DC               	movf	printf@idx& (0+255),w,b
  6520  000DD2  0D01               	mullw	1
  6521  000DD4  0E38               	movlw	low STR_19
  6522  000DD6  24F3               	addwf	prodl,w,c
  6523  000DD8  6EF6               	movwf	tblptrl,c
  6524  000DDA  0EFF               	movlw	high STR_19
  6525  000DDC  20F4               	addwfc	prodh,w,c
  6526  000DDE  6EF7               	movwf	tblptrh,c
  6527  000DE0                     	if	0	;There are less than 3 active tblptr bytes
  6528  000DE0                     	endif
  6529  000DE0  0008               	tblrd		*
  6530  000DE2  CFF5 F0F6          	movff	tablat,printf@c
  6531                           
  6532                           ; BSR set to: 0
  6533                           ;doprnt.c: 1523: }
  6534                           
  6535                           ;doprnt.c: 1508: }
  6536                           ;doprnt.c: 1510: break;
  6537  000DE6  D009               	goto	l6668
  6538  000DE8                     l6666:
  6539  000DE8  0100               	movlb	0	; () banked
  6540  000DEA  51F2               	movf	printf@flag& (0+255),w,b
  6541  000DEC  0B80               	andlw	128
  6542                           
  6543                           ; Switch size 1, requested type "space"
  6544                           ; Number of cases is 2, Range of values is 0 to 128
  6545                           ; switch strategies available:
  6546                           ; Name         Instructions Cycles
  6547                           ; simple_byte            7     4 (average)
  6548                           ;	Chosen strategy is simple_byte
  6549  000DEE  0A00               	xorlw	0	; case 0
  6550  000DF0  B4D8               	btfsc	status,2,c
  6551  000DF2  D77E               	goto	l6658
  6552  000DF4  0A80               	xorlw	128	; case 128
  6553  000DF6  B4D8               	btfsc	status,2,c
  6554  000DF8  D7BD               	goto	l6660
  6555  000DFA                     l6668:
  6556                           
  6557                           ; BSR set to: 0
  6558                           ;doprnt.c: 1524: (putch(c) );
  6559  000DFA  0100               	movlb	0	; () banked
  6560  000DFC  51F6               	movf	printf@c& (0+255),w,b
  6561  000DFE  EC61  F01D         	call	_putch
  6562  000E02                     l6670:
  6563  000E02  0100               	movlb	0	; () banked
  6564  000E04  07F4               	decf	printf@prec& (0+255),f,b
  6565  000E06  A0D8               	btfss	status,0,c
  6566  000E08  07F5               	decf	(printf@prec+1)& (0+255),f,b
  6567  000E0A  0100               	movlb	0	; () banked
  6568  000E0C  29F4               	incf	printf@prec& (0+255),w,b
  6569  000E0E  E1EC               	bnz	l6666
  6570  000E10  0100               	movlb	0	; () banked
  6571  000E12  29F5               	incf	(printf@prec+1)& (0+255),w,b
  6572  000E14  A4D8               	btfss	status,2,c
  6573  000E16  D7E8               	goto	l6666
  6574  000E18                     l6672:
  6575  000E18  C0C9  FFF6         	movff	printf@f,tblptrl
  6576  000E1C  C0CA  FFF7         	movff	printf@f+1,tblptrh
  6577  000E20  0100               	movlb	0	; () banked
  6578  000E22  4BC9               	infsnz	printf@f& (0+255),f,b
  6579  000E24  2BCA               	incf	(printf@f+1)& (0+255),f,b
  6580  000E26                     	if	0	;tblptru may be non-zero
  6581  000E26                     	endif
  6582  000E26                     	if	0	;tblptru may be non-zero
  6583  000E26                     	endif
  6584  000E26  0008               	tblrd		*
  6585  000E28  CFF5 F0F6          	movff	tablat,printf@c
  6586  000E2C  0100               	movlb	0	; () banked
  6587  000E2E  51F6               	movf	printf@c& (0+255),w,b
  6588  000E30  B4D8               	btfsc	status,2,c
  6589  000E32  0012               	return	
  6590  000E34  EF11  F000         	goto	l6306
  6591  000E38                     __end_of_printf:
  6592                           	opt stack 0
  6593                           tblptru	equ	0xFF8
  6594                           tblptrh	equ	0xFF7
  6595                           tblptrl	equ	0xFF6
  6596                           tablat	equ	0xFF5
  6597                           prodh	equ	0xFF4
  6598                           prodl	equ	0xFF3
  6599                           postinc0	equ	0xFEE
  6600                           wreg	equ	0xFE8
  6601                           postdec1	equ	0xFE5
  6602                           fsr1l	equ	0xFE1
  6603                           indf2	equ	0xFDF
  6604                           postinc2	equ	0xFDE
  6605                           postdec2	equ	0xFDD
  6606                           fsr2h	equ	0xFDA
  6607                           fsr2l	equ	0xFD9
  6608                           status	equ	0xFD8
  6609                           
  6610 ;; *************** function _scale *****************
  6611 ;; Defined at:
  6612 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6613 ;; Parameters:    Size  Location     Type
  6614 ;;  scl             1    wreg     char 
  6615 ;; Auto vars:     Size  Location     Type
  6616 ;;  scl             1   42[BANK0 ] char 
  6617 ;; Return value:  Size  Location     Type
  6618 ;;                  3   36[BANK0 ] char 
  6619 ;; Registers used:
  6620 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6621 ;; Tracked objects:
  6622 ;;		On entry : 0/0
  6623 ;;		On exit  : 0/0
  6624 ;;		Unchanged: 0/0
  6625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6626 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6627 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6629 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6630 ;;Total ram usage:        7 bytes
  6631 ;; Hardware stack levels used:    1
  6632 ;; Hardware stack levels required when called:    5
  6633 ;; This function calls:
  6634 ;;		___awdiv
  6635 ;;		___awmod
  6636 ;;		___ftmul
  6637 ;;		___wmul
  6638 ;; This function is called by:
  6639 ;;		_printf
  6640 ;; This function uses a non-reentrant model
  6641 ;;
  6642                           
  6643                           	psect	text13
  6644  001336                     __ptext13:
  6645                           	opt stack 0
  6646  001336                     _scale:
  6647                           	opt stack 23
  6648                           
  6649                           ; BSR set to: 0
  6650                           ;incstack = 0
  6651                           ;scale@scl stored from wreg
  6652  001336  0100               	movlb	0	; () banked
  6653  001338  6FAA               	movwf	scale@scl& (0+255),b
  6654                           
  6655                           ;doprnt.c: 428: if(scl < 0) {
  6656  00133A  0100               	movlb	0	; () banked
  6657  00133C  AFAA               	btfss	scale@scl& (0+255),7,b
  6658  00133E  D119               	goto	l6038
  6659                           
  6660                           ; BSR set to: 0
  6661                           ;doprnt.c: 429: scl = -scl;
  6662  001340  0100               	movlb	0	; () banked
  6663  001342  6DAA               	negf	scale@scl& (0+255),b
  6664                           
  6665                           ;doprnt.c: 430: if(scl>=110)
  6666  001344  0100               	movlb	0	; () banked
  6667  001346  51AA               	movf	scale@scl& (0+255),w,b
  6668  001348  0A80               	xorlw	128
  6669  00134A  0F12               	addlw	-238
  6670  00134C  A0D8               	btfss	status,0,c
  6671  00134E  D0A1               	goto	l6028
  6672                           
  6673                           ; BSR set to: 0
  6674                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6675  001350  0E00               	movlw	0
  6676  001352  0100               	movlb	0	; () banked
  6677  001354  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6678  001356  0E03               	movlw	3
  6679  001358  6F86               	movwf	___wmul@multiplicand& (0+255),b
  6680  00135A  0E00               	movlw	0
  6681  00135C  6E30               	movwf	___awdiv@divisor+1,c
  6682  00135E  0E0A               	movlw	10
  6683  001360  6E2F               	movwf	___awdiv@divisor,c
  6684  001362  0E00               	movlw	0
  6685  001364  6E2A               	movwf	___awmod@divisor+1,c
  6686  001366  0E64               	movlw	100
  6687  001368  6E29               	movwf	___awmod@divisor,c
  6688  00136A  0100               	movlb	0	; () banked
  6689  00136C  51AA               	movf	scale@scl& (0+255),w,b
  6690  00136E  6E27               	movwf	___awmod@dividend,c
  6691  001370  6A28               	clrf	___awmod@dividend+1,c
  6692  001372  BE27               	btfsc	___awmod@dividend,7,c
  6693  001374  0628               	decf	___awmod@dividend+1,f,c
  6694  001376  EC57  F01A         	call	___awmod	;wreg free
  6695  00137A  C027  F02D         	movff	?___awmod,___awdiv@dividend
  6696  00137E  C028  F02E         	movff	?___awmod+1,___awdiv@dividend+1
  6697  001382  EC33  F019         	call	___awdiv	;wreg free
  6698  001386  0E09               	movlw	9
  6699  001388  242D               	addwf	?___awdiv,w,c
  6700  00138A  0100               	movlb	0	; () banked
  6701  00138C  6F84               	movwf	___wmul@multiplier& (0+255),b
  6702  00138E  0E00               	movlw	0
  6703  001390  202E               	addwfc	?___awdiv+1,w,c
  6704  001392  0100               	movlb	0	; () banked
  6705  001394  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  6706  001396  ECAD  F01C         	call	___wmul	;wreg free
  6707  00139A  0E45               	movlw	low __npowers_
  6708  00139C  0100               	movlb	0	; () banked
  6709  00139E  2584               	addwf	?___wmul& (0+255),w,b
  6710  0013A0  6EF6               	movwf	tblptrl,c
  6711  0013A2  0EFE               	movlw	high __npowers_
  6712  0013A4  0100               	movlb	0	; () banked
  6713  0013A6  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  6714  0013A8  6EF7               	movwf	tblptrh,c
  6715  0013AA                     	if	0	;There are less than 3 active tblptr bytes
  6716  0013AA                     	endif
  6717  0013AA  0009               	tblrd		*+
  6718  0013AC  CFF5 F098          	movff	tablat,___ftmul@f2
  6719  0013B0  0009               	tblrd		*+
  6720  0013B2  CFF5 F099          	movff	tablat,___ftmul@f2+1
  6721  0013B6  000A               	tblrd		*-
  6722  0013B8  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  6723  0013BC  0E00               	movlw	0
  6724  0013BE  6E30               	movwf	___awdiv@divisor+1,c
  6725  0013C0  0E64               	movlw	100
  6726  0013C2  6E2F               	movwf	___awdiv@divisor,c
  6727  0013C4  0100               	movlb	0	; () banked
  6728  0013C6  51AA               	movf	scale@scl& (0+255),w,b
  6729  0013C8  6E2D               	movwf	___awdiv@dividend,c
  6730  0013CA  6A2E               	clrf	___awdiv@dividend+1,c
  6731  0013CC  BE2D               	btfsc	___awdiv@dividend,7,c
  6732  0013CE  062E               	decf	___awdiv@dividend+1,f,c
  6733  0013D0  EC33  F019         	call	___awdiv	;wreg free
  6734  0013D4  0E12               	movlw	18
  6735  0013D6  242D               	addwf	?___awdiv,w,c
  6736  0013D8  0100               	movlb	0	; () banked
  6737  0013DA  6F84               	movwf	___wmul@multiplier& (0+255),b
  6738  0013DC  0E00               	movlw	0
  6739  0013DE  202E               	addwfc	?___awdiv+1,w,c
  6740  0013E0  0100               	movlb	0	; () banked
  6741  0013E2  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  6742  0013E4  0E00               	movlw	0
  6743  0013E6  0100               	movlb	0	; () banked
  6744  0013E8  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6745  0013EA  0E03               	movlw	3
  6746  0013EC  6F86               	movwf	___wmul@multiplicand& (0+255),b
  6747  0013EE  ECAD  F01C         	call	___wmul	;wreg free
  6748  0013F2  0E45               	movlw	low __npowers_
  6749  0013F4  0100               	movlb	0	; () banked
  6750  0013F6  2584               	addwf	?___wmul& (0+255),w,b
  6751  0013F8  6EF6               	movwf	tblptrl,c
  6752  0013FA  0EFE               	movlw	high __npowers_
  6753  0013FC  0100               	movlb	0	; () banked
  6754  0013FE  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  6755  001400  6EF7               	movwf	tblptrh,c
  6756  001402                     	if	0	;There are less than 3 active tblptr bytes
  6757  001402                     	endif
  6758  001402  0009               	tblrd		*+
  6759  001404  CFF5 F095          	movff	tablat,___ftmul@f1
  6760  001408  0009               	tblrd		*+
  6761  00140A  CFF5 F096          	movff	tablat,___ftmul@f1+1
  6762  00140E  000A               	tblrd		*-
  6763  001410  CFF5 F097          	movff	tablat,___ftmul@f1+2
  6764  001414  ECCA  F010         	call	___ftmul	;wreg free
  6765  001418  C095  F0A7         	movff	?___ftmul,_scale$1356
  6766  00141C  C096  F0A8         	movff	?___ftmul+1,_scale$1356+1
  6767  001420  C097  F0A9         	movff	?___ftmul+2,_scale$1356+2
  6768                           
  6769                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6770  001424  C0A7  F095         	movff	_scale$1356,___ftmul@f1
  6771  001428  C0A8  F096         	movff	_scale$1356+1,___ftmul@f1+1
  6772  00142C  C0A9  F097         	movff	_scale$1356+2,___ftmul@f1+2
  6773  001430  0E00               	movlw	0
  6774  001432  0100               	movlb	0	; () banked
  6775  001434  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6776  001436  0E03               	movlw	3
  6777  001438  6F86               	movwf	___wmul@multiplicand& (0+255),b
  6778  00143A  0E00               	movlw	0
  6779  00143C  6E2A               	movwf	___awmod@divisor+1,c
  6780  00143E  0E0A               	movlw	10
  6781  001440  6E29               	movwf	___awmod@divisor,c
  6782  001442  0100               	movlb	0	; () banked
  6783  001444  51AA               	movf	scale@scl& (0+255),w,b
  6784  001446  6E27               	movwf	___awmod@dividend,c
  6785  001448  6A28               	clrf	___awmod@dividend+1,c
  6786  00144A  BE27               	btfsc	___awmod@dividend,7,c
  6787  00144C  0628               	decf	___awmod@dividend+1,f,c
  6788  00144E  EC57  F01A         	call	___awmod	;wreg free
  6789  001452  C027  F084         	movff	?___awmod,___wmul@multiplier
  6790  001456  C028  F085         	movff	?___awmod+1,___wmul@multiplier+1
  6791  00145A  ECAD  F01C         	call	___wmul	;wreg free
  6792  00145E  0E45               	movlw	low __npowers_
  6793  001460  0100               	movlb	0	; () banked
  6794  001462  2584               	addwf	?___wmul& (0+255),w,b
  6795  001464  6EF6               	movwf	tblptrl,c
  6796  001466  0EFE               	movlw	high __npowers_
  6797  001468  0100               	movlb	0	; () banked
  6798  00146A  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  6799  00146C  6EF7               	movwf	tblptrh,c
  6800  00146E                     	if	0	;There are less than 3 active tblptr bytes
  6801  00146E                     	endif
  6802  00146E  0009               	tblrd		*+
  6803  001470  CFF5 F098          	movff	tablat,___ftmul@f2
  6804  001474  0009               	tblrd		*+
  6805  001476  CFF5 F099          	movff	tablat,___ftmul@f2+1
  6806  00147A  000A               	tblrd		*-
  6807  00147C  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  6808  001480  ECCA  F010         	call	___ftmul	;wreg free
  6809  001484  C095  F0A4         	movff	?___ftmul,?_scale
  6810  001488  C096  F0A5         	movff	?___ftmul+1,?_scale+1
  6811  00148C  C097  F0A6         	movff	?___ftmul+2,?_scale+2
  6812  001490  0012               	return	
  6813  001492                     l6028:
  6814                           
  6815                           ;doprnt.c: 432: else if(scl > 10)
  6816  001492  0100               	movlb	0	; () banked
  6817  001494  51AA               	movf	scale@scl& (0+255),w,b
  6818  001496  0A80               	xorlw	128
  6819  001498  0F75               	addlw	-139
  6820  00149A  A0D8               	btfss	status,0,c
  6821  00149C  D057               	goto	l6034
  6822                           
  6823                           ; BSR set to: 0
  6824                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6825  00149E  0E00               	movlw	0
  6826  0014A0  6E30               	movwf	___awdiv@divisor+1,c
  6827  0014A2  0E0A               	movlw	10
  6828  0014A4  6E2F               	movwf	___awdiv@divisor,c
  6829  0014A6  0100               	movlb	0	; () banked
  6830  0014A8  51AA               	movf	scale@scl& (0+255),w,b
  6831  0014AA  6E2D               	movwf	___awdiv@dividend,c
  6832  0014AC  6A2E               	clrf	___awdiv@dividend+1,c
  6833  0014AE  BE2D               	btfsc	___awdiv@dividend,7,c
  6834  0014B0  062E               	decf	___awdiv@dividend+1,f,c
  6835  0014B2  EC33  F019         	call	___awdiv	;wreg free
  6836  0014B6  0E09               	movlw	9
  6837  0014B8  242D               	addwf	?___awdiv,w,c
  6838  0014BA  0100               	movlb	0	; () banked
  6839  0014BC  6F84               	movwf	___wmul@multiplier& (0+255),b
  6840  0014BE  0E00               	movlw	0
  6841  0014C0  202E               	addwfc	?___awdiv+1,w,c
  6842  0014C2  0100               	movlb	0	; () banked
  6843  0014C4  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  6844  0014C6  0E00               	movlw	0
  6845  0014C8  0100               	movlb	0	; () banked
  6846  0014CA  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6847  0014CC  0E03               	movlw	3
  6848  0014CE  6F86               	movwf	___wmul@multiplicand& (0+255),b
  6849  0014D0  ECAD  F01C         	call	___wmul	;wreg free
  6850  0014D4  0E45               	movlw	low __npowers_
  6851  0014D6  0100               	movlb	0	; () banked
  6852  0014D8  2584               	addwf	?___wmul& (0+255),w,b
  6853  0014DA  6EF6               	movwf	tblptrl,c
  6854  0014DC  0EFE               	movlw	high __npowers_
  6855  0014DE  0100               	movlb	0	; () banked
  6856  0014E0  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  6857  0014E2  6EF7               	movwf	tblptrh,c
  6858  0014E4                     	if	0	;There are less than 3 active tblptr bytes
  6859  0014E4                     	endif
  6860  0014E4  0009               	tblrd		*+
  6861  0014E6  CFF5 F095          	movff	tablat,___ftmul@f1
  6862  0014EA  0009               	tblrd		*+
  6863  0014EC  CFF5 F096          	movff	tablat,___ftmul@f1+1
  6864  0014F0  000A               	tblrd		*-
  6865  0014F2  CFF5 F097          	movff	tablat,___ftmul@f1+2
  6866  0014F6  0E00               	movlw	0
  6867  0014F8  0100               	movlb	0	; () banked
  6868  0014FA  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6869  0014FC  0E03               	movlw	3
  6870  0014FE  6F86               	movwf	___wmul@multiplicand& (0+255),b
  6871  001500  0E00               	movlw	0
  6872  001502  6E2A               	movwf	___awmod@divisor+1,c
  6873  001504  0E0A               	movlw	10
  6874  001506  6E29               	movwf	___awmod@divisor,c
  6875  001508  0100               	movlb	0	; () banked
  6876  00150A  51AA               	movf	scale@scl& (0+255),w,b
  6877  00150C  6E27               	movwf	___awmod@dividend,c
  6878  00150E  6A28               	clrf	___awmod@dividend+1,c
  6879  001510  BE27               	btfsc	___awmod@dividend,7,c
  6880  001512  0628               	decf	___awmod@dividend+1,f,c
  6881  001514  EC57  F01A         	call	___awmod	;wreg free
  6882  001518  C027  F084         	movff	?___awmod,___wmul@multiplier
  6883  00151C  C028  F085         	movff	?___awmod+1,___wmul@multiplier+1
  6884  001520  ECAD  F01C         	call	___wmul	;wreg free
  6885  001524  0E45               	movlw	low __npowers_
  6886  001526  0100               	movlb	0	; () banked
  6887  001528  2584               	addwf	?___wmul& (0+255),w,b
  6888  00152A  6EF6               	movwf	tblptrl,c
  6889  00152C  0EFE               	movlw	high __npowers_
  6890  00152E  0100               	movlb	0	; () banked
  6891  001530  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  6892  001532  6EF7               	movwf	tblptrh,c
  6893  001534                     	if	0	;There are less than 3 active tblptr bytes
  6894  001534                     	endif
  6895  001534  0009               	tblrd		*+
  6896  001536  CFF5 F098          	movff	tablat,___ftmul@f2
  6897  00153A  0009               	tblrd		*+
  6898  00153C  CFF5 F099          	movff	tablat,___ftmul@f2+1
  6899  001540  000A               	tblrd		*-
  6900  001542  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  6901  001546  ECCA  F010         	call	___ftmul	;wreg free
  6902  00154A  D79C               	goto	L4
  6903  00154C                     l6034:
  6904                           
  6905                           ;doprnt.c: 434: return _npowers_[scl];
  6906  00154C  0100               	movlb	0	; () banked
  6907  00154E  51AA               	movf	scale@scl& (0+255),w,b
  6908  001550  0D03               	mullw	3
  6909  001552  0E45               	movlw	low __npowers_
  6910  001554  24F3               	addwf	prodl,w,c
  6911  001556  6EF6               	movwf	tblptrl,c
  6912  001558  0EFE               	movlw	high __npowers_
  6913  00155A  20F4               	addwfc	prodh,w,c
  6914  00155C  6EF7               	movwf	tblptrh,c
  6915  00155E                     	if	0	;There are less than 3 active tblptr bytes
  6916  00155E                     	endif
  6917  00155E  0009               	tblrd		*+
  6918  001560  CFF5 F0A4          	movff	tablat,?_scale
  6919  001564  0009               	tblrd		*+
  6920  001566  CFF5 F0A5          	movff	tablat,?_scale+1
  6921  00156A  000A               	tblrd		*-
  6922  00156C  CFF5 F0A6          	movff	tablat,?_scale+2
  6923                           
  6924                           ; BSR set to: 0
  6925  001570  0012               	return	
  6926  001572                     l6038:
  6927                           
  6928                           ; BSR set to: 0
  6929                           ;doprnt.c: 435: }
  6930                           ;doprnt.c: 436: if(scl>=110)
  6931  001572  0100               	movlb	0	; () banked
  6932  001574  51AA               	movf	scale@scl& (0+255),w,b
  6933  001576  0A80               	xorlw	128
  6934  001578  0F12               	addlw	-238
  6935  00157A  A0D8               	btfss	status,0,c
  6936  00157C  D0A1               	goto	l6046
  6937                           
  6938                           ; BSR set to: 0
  6939                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6940  00157E  0E00               	movlw	0
  6941  001580  0100               	movlb	0	; () banked
  6942  001582  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6943  001584  0E03               	movlw	3
  6944  001586  6F86               	movwf	___wmul@multiplicand& (0+255),b
  6945  001588  0E00               	movlw	0
  6946  00158A  6E30               	movwf	___awdiv@divisor+1,c
  6947  00158C  0E0A               	movlw	10
  6948  00158E  6E2F               	movwf	___awdiv@divisor,c
  6949  001590  0E00               	movlw	0
  6950  001592  6E2A               	movwf	___awmod@divisor+1,c
  6951  001594  0E64               	movlw	100
  6952  001596  6E29               	movwf	___awmod@divisor,c
  6953  001598  0100               	movlb	0	; () banked
  6954  00159A  51AA               	movf	scale@scl& (0+255),w,b
  6955  00159C  6E27               	movwf	___awmod@dividend,c
  6956  00159E  6A28               	clrf	___awmod@dividend+1,c
  6957  0015A0  BE27               	btfsc	___awmod@dividend,7,c
  6958  0015A2  0628               	decf	___awmod@dividend+1,f,c
  6959  0015A4  EC57  F01A         	call	___awmod	;wreg free
  6960  0015A8  C027  F02D         	movff	?___awmod,___awdiv@dividend
  6961  0015AC  C028  F02E         	movff	?___awmod+1,___awdiv@dividend+1
  6962  0015B0  EC33  F019         	call	___awdiv	;wreg free
  6963  0015B4  0E09               	movlw	9
  6964  0015B6  242D               	addwf	?___awdiv,w,c
  6965  0015B8  0100               	movlb	0	; () banked
  6966  0015BA  6F84               	movwf	___wmul@multiplier& (0+255),b
  6967  0015BC  0E00               	movlw	0
  6968  0015BE  202E               	addwfc	?___awdiv+1,w,c
  6969  0015C0  0100               	movlb	0	; () banked
  6970  0015C2  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  6971  0015C4  ECAD  F01C         	call	___wmul	;wreg free
  6972  0015C8  0E6C               	movlw	low __powers_
  6973  0015CA  0100               	movlb	0	; () banked
  6974  0015CC  2584               	addwf	?___wmul& (0+255),w,b
  6975  0015CE  6EF6               	movwf	tblptrl,c
  6976  0015D0  0EFE               	movlw	high __powers_
  6977  0015D2  0100               	movlb	0	; () banked
  6978  0015D4  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  6979  0015D6  6EF7               	movwf	tblptrh,c
  6980  0015D8                     	if	0	;There are less than 3 active tblptr bytes
  6981  0015D8                     	endif
  6982  0015D8  0009               	tblrd		*+
  6983  0015DA  CFF5 F098          	movff	tablat,___ftmul@f2
  6984  0015DE  0009               	tblrd		*+
  6985  0015E0  CFF5 F099          	movff	tablat,___ftmul@f2+1
  6986  0015E4  000A               	tblrd		*-
  6987  0015E6  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  6988  0015EA  0E00               	movlw	0
  6989  0015EC  6E30               	movwf	___awdiv@divisor+1,c
  6990  0015EE  0E64               	movlw	100
  6991  0015F0  6E2F               	movwf	___awdiv@divisor,c
  6992  0015F2  0100               	movlb	0	; () banked
  6993  0015F4  51AA               	movf	scale@scl& (0+255),w,b
  6994  0015F6  6E2D               	movwf	___awdiv@dividend,c
  6995  0015F8  6A2E               	clrf	___awdiv@dividend+1,c
  6996  0015FA  BE2D               	btfsc	___awdiv@dividend,7,c
  6997  0015FC  062E               	decf	___awdiv@dividend+1,f,c
  6998  0015FE  EC33  F019         	call	___awdiv	;wreg free
  6999  001602  0E12               	movlw	18
  7000  001604  242D               	addwf	?___awdiv,w,c
  7001  001606  0100               	movlb	0	; () banked
  7002  001608  6F84               	movwf	___wmul@multiplier& (0+255),b
  7003  00160A  0E00               	movlw	0
  7004  00160C  202E               	addwfc	?___awdiv+1,w,c
  7005  00160E  0100               	movlb	0	; () banked
  7006  001610  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  7007  001612  0E00               	movlw	0
  7008  001614  0100               	movlb	0	; () banked
  7009  001616  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7010  001618  0E03               	movlw	3
  7011  00161A  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7012  00161C  ECAD  F01C         	call	___wmul	;wreg free
  7013  001620  0E6C               	movlw	low __powers_
  7014  001622  0100               	movlb	0	; () banked
  7015  001624  2584               	addwf	?___wmul& (0+255),w,b
  7016  001626  6EF6               	movwf	tblptrl,c
  7017  001628  0EFE               	movlw	high __powers_
  7018  00162A  0100               	movlb	0	; () banked
  7019  00162C  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7020  00162E  6EF7               	movwf	tblptrh,c
  7021  001630                     	if	0	;There are less than 3 active tblptr bytes
  7022  001630                     	endif
  7023  001630  0009               	tblrd		*+
  7024  001632  CFF5 F095          	movff	tablat,___ftmul@f1
  7025  001636  0009               	tblrd		*+
  7026  001638  CFF5 F096          	movff	tablat,___ftmul@f1+1
  7027  00163C  000A               	tblrd		*-
  7028  00163E  CFF5 F097          	movff	tablat,___ftmul@f1+2
  7029  001642  ECCA  F010         	call	___ftmul	;wreg free
  7030  001646  C095  F0A7         	movff	?___ftmul,_scale$1356
  7031  00164A  C096  F0A8         	movff	?___ftmul+1,_scale$1356+1
  7032  00164E  C097  F0A9         	movff	?___ftmul+2,_scale$1356+2
  7033                           
  7034                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7035  001652  C0A7  F095         	movff	_scale$1356,___ftmul@f1
  7036  001656  C0A8  F096         	movff	_scale$1356+1,___ftmul@f1+1
  7037  00165A  C0A9  F097         	movff	_scale$1356+2,___ftmul@f1+2
  7038  00165E  0E00               	movlw	0
  7039  001660  0100               	movlb	0	; () banked
  7040  001662  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7041  001664  0E03               	movlw	3
  7042  001666  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7043  001668  0E00               	movlw	0
  7044  00166A  6E2A               	movwf	___awmod@divisor+1,c
  7045  00166C  0E0A               	movlw	10
  7046  00166E  6E29               	movwf	___awmod@divisor,c
  7047  001670  0100               	movlb	0	; () banked
  7048  001672  51AA               	movf	scale@scl& (0+255),w,b
  7049  001674  6E27               	movwf	___awmod@dividend,c
  7050  001676  6A28               	clrf	___awmod@dividend+1,c
  7051  001678  BE27               	btfsc	___awmod@dividend,7,c
  7052  00167A  0628               	decf	___awmod@dividend+1,f,c
  7053  00167C  EC57  F01A         	call	___awmod	;wreg free
  7054  001680  C027  F084         	movff	?___awmod,___wmul@multiplier
  7055  001684  C028  F085         	movff	?___awmod+1,___wmul@multiplier+1
  7056  001688  ECAD  F01C         	call	___wmul	;wreg free
  7057  00168C  0E6C               	movlw	low __powers_
  7058  00168E  0100               	movlb	0	; () banked
  7059  001690  2584               	addwf	?___wmul& (0+255),w,b
  7060  001692  6EF6               	movwf	tblptrl,c
  7061  001694  0EFE               	movlw	high __powers_
  7062  001696  0100               	movlb	0	; () banked
  7063  001698  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7064  00169A  6EF7               	movwf	tblptrh,c
  7065  00169C                     	if	0	;There are less than 3 active tblptr bytes
  7066  00169C                     	endif
  7067  00169C  0009               	tblrd		*+
  7068  00169E  CFF5 F098          	movff	tablat,___ftmul@f2
  7069  0016A2  0009               	tblrd		*+
  7070  0016A4  CFF5 F099          	movff	tablat,___ftmul@f2+1
  7071  0016A8  000A               	tblrd		*-
  7072  0016AA  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  7073  0016AE  ECCA  F010         	call	___ftmul	;wreg free
  7074  0016B2  C095  F0A4         	movff	?___ftmul,?_scale
  7075  0016B6  C096  F0A5         	movff	?___ftmul+1,?_scale+1
  7076  0016BA  C097  F0A6         	movff	?___ftmul+2,?_scale+2
  7077  0016BE  0012               	return	
  7078  0016C0                     l6046:
  7079                           
  7080                           ;doprnt.c: 438: else if(scl > 10)
  7081  0016C0  0100               	movlb	0	; () banked
  7082  0016C2  51AA               	movf	scale@scl& (0+255),w,b
  7083  0016C4  0A80               	xorlw	128
  7084  0016C6  0F75               	addlw	-139
  7085  0016C8  A0D8               	btfss	status,0,c
  7086  0016CA  D057               	goto	l6052
  7087                           
  7088                           ; BSR set to: 0
  7089                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7090  0016CC  0E00               	movlw	0
  7091  0016CE  6E30               	movwf	___awdiv@divisor+1,c
  7092  0016D0  0E0A               	movlw	10
  7093  0016D2  6E2F               	movwf	___awdiv@divisor,c
  7094  0016D4  0100               	movlb	0	; () banked
  7095  0016D6  51AA               	movf	scale@scl& (0+255),w,b
  7096  0016D8  6E2D               	movwf	___awdiv@dividend,c
  7097  0016DA  6A2E               	clrf	___awdiv@dividend+1,c
  7098  0016DC  BE2D               	btfsc	___awdiv@dividend,7,c
  7099  0016DE  062E               	decf	___awdiv@dividend+1,f,c
  7100  0016E0  EC33  F019         	call	___awdiv	;wreg free
  7101  0016E4  0E09               	movlw	9
  7102  0016E6  242D               	addwf	?___awdiv,w,c
  7103  0016E8  0100               	movlb	0	; () banked
  7104  0016EA  6F84               	movwf	___wmul@multiplier& (0+255),b
  7105  0016EC  0E00               	movlw	0
  7106  0016EE  202E               	addwfc	?___awdiv+1,w,c
  7107  0016F0  0100               	movlb	0	; () banked
  7108  0016F2  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  7109  0016F4  0E00               	movlw	0
  7110  0016F6  0100               	movlb	0	; () banked
  7111  0016F8  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7112  0016FA  0E03               	movlw	3
  7113  0016FC  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7114  0016FE  ECAD  F01C         	call	___wmul	;wreg free
  7115  001702  0E6C               	movlw	low __powers_
  7116  001704  0100               	movlb	0	; () banked
  7117  001706  2584               	addwf	?___wmul& (0+255),w,b
  7118  001708  6EF6               	movwf	tblptrl,c
  7119  00170A  0EFE               	movlw	high __powers_
  7120  00170C  0100               	movlb	0	; () banked
  7121  00170E  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7122  001710  6EF7               	movwf	tblptrh,c
  7123  001712                     	if	0	;There are less than 3 active tblptr bytes
  7124  001712                     	endif
  7125  001712  0009               	tblrd		*+
  7126  001714  CFF5 F095          	movff	tablat,___ftmul@f1
  7127  001718  0009               	tblrd		*+
  7128  00171A  CFF5 F096          	movff	tablat,___ftmul@f1+1
  7129  00171E  000A               	tblrd		*-
  7130  001720  CFF5 F097          	movff	tablat,___ftmul@f1+2
  7131  001724  0E00               	movlw	0
  7132  001726  0100               	movlb	0	; () banked
  7133  001728  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7134  00172A  0E03               	movlw	3
  7135  00172C  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7136  00172E  0E00               	movlw	0
  7137  001730  6E2A               	movwf	___awmod@divisor+1,c
  7138  001732  0E0A               	movlw	10
  7139  001734  6E29               	movwf	___awmod@divisor,c
  7140  001736  0100               	movlb	0	; () banked
  7141  001738  51AA               	movf	scale@scl& (0+255),w,b
  7142  00173A  6E27               	movwf	___awmod@dividend,c
  7143  00173C  6A28               	clrf	___awmod@dividend+1,c
  7144  00173E  BE27               	btfsc	___awmod@dividend,7,c
  7145  001740  0628               	decf	___awmod@dividend+1,f,c
  7146  001742  EC57  F01A         	call	___awmod	;wreg free
  7147  001746  C027  F084         	movff	?___awmod,___wmul@multiplier
  7148  00174A  C028  F085         	movff	?___awmod+1,___wmul@multiplier+1
  7149  00174E  ECAD  F01C         	call	___wmul	;wreg free
  7150  001752  0E6C               	movlw	low __powers_
  7151  001754  0100               	movlb	0	; () banked
  7152  001756  2584               	addwf	?___wmul& (0+255),w,b
  7153  001758  6EF6               	movwf	tblptrl,c
  7154  00175A  0EFE               	movlw	high __powers_
  7155  00175C  0100               	movlb	0	; () banked
  7156  00175E  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7157  001760  6EF7               	movwf	tblptrh,c
  7158  001762                     	if	0	;There are less than 3 active tblptr bytes
  7159  001762                     	endif
  7160  001762  0009               	tblrd		*+
  7161  001764  CFF5 F098          	movff	tablat,___ftmul@f2
  7162  001768  0009               	tblrd		*+
  7163  00176A  CFF5 F099          	movff	tablat,___ftmul@f2+1
  7164  00176E  000A               	tblrd		*-
  7165  001770  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  7166  001774  ECCA  F010         	call	___ftmul	;wreg free
  7167  001778  D79C               	goto	L5
  7168  00177A                     l6052:
  7169                           
  7170                           ;doprnt.c: 440: return _powers_[scl];
  7171  00177A  0100               	movlb	0	; () banked
  7172  00177C  51AA               	movf	scale@scl& (0+255),w,b
  7173  00177E  0D03               	mullw	3
  7174  001780  0E6C               	movlw	low __powers_
  7175  001782  24F3               	addwf	prodl,w,c
  7176  001784  6EF6               	movwf	tblptrl,c
  7177  001786  0EFE               	movlw	high __powers_
  7178  001788  20F4               	addwfc	prodh,w,c
  7179  00178A  6EF7               	movwf	tblptrh,c
  7180  00178C                     	if	0	;There are less than 3 active tblptr bytes
  7181  00178C                     	endif
  7182  00178C  0009               	tblrd		*+
  7183  00178E  CFF5 F0A4          	movff	tablat,?_scale
  7184  001792  0009               	tblrd		*+
  7185  001794  CFF5 F0A5          	movff	tablat,?_scale+1
  7186  001798  000A               	tblrd		*-
  7187  00179A  CFF5 F0A6          	movff	tablat,?_scale+2
  7188  00179E  0012               	return	
  7189  0017A0                     __end_of_scale:
  7190                           	opt stack 0
  7191                           tblptru	equ	0xFF8
  7192                           tblptrh	equ	0xFF7
  7193                           tblptrl	equ	0xFF6
  7194                           tablat	equ	0xFF5
  7195                           prodh	equ	0xFF4
  7196                           prodl	equ	0xFF3
  7197                           postinc0	equ	0xFEE
  7198                           wreg	equ	0xFE8
  7199                           postdec1	equ	0xFE5
  7200                           fsr1l	equ	0xFE1
  7201                           indf2	equ	0xFDF
  7202                           postinc2	equ	0xFDE
  7203                           postdec2	equ	0xFDD
  7204                           fsr2h	equ	0xFDA
  7205                           fsr2l	equ	0xFD9
  7206                           status	equ	0xFD8
  7207                           
  7208 ;; *************** function _putch *****************
  7209 ;; Defined at:
  7210 ;;		line 35 in file "lcd.c"
  7211 ;; Parameters:    Size  Location     Type
  7212 ;;  data            1    wreg     unsigned char 
  7213 ;; Auto vars:     Size  Location     Type
  7214 ;;  data            1   42[COMRAM] unsigned char 
  7215 ;; Return value:  Size  Location     Type
  7216 ;;                  1    wreg      void 
  7217 ;; Registers used:
  7218 ;;		wreg, status,2, status,0, cstack
  7219 ;; Tracked objects:
  7220 ;;		On entry : 0/0
  7221 ;;		On exit  : 0/0
  7222 ;;		Unchanged: 0/0
  7223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7225 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7227 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7228 ;;Total ram usage:        1 bytes
  7229 ;; Hardware stack levels used:    1
  7230 ;; Hardware stack levels required when called:    6
  7231 ;; This function calls:
  7232 ;;		_lcdNewline
  7233 ;;		_lcdNibble
  7234 ;; This function is called by:
  7235 ;;		_printf
  7236 ;; This function uses a non-reentrant model
  7237 ;;
  7238                           
  7239                           	psect	text14
  7240  003AC2                     __ptext14:
  7241                           	opt stack 0
  7242  003AC2                     _putch:
  7243                           	opt stack 22
  7244                           
  7245                           ;incstack = 0
  7246                           ;putch@data stored from wreg
  7247  003AC2  6E2B               	movwf	putch@data,c
  7248                           
  7249                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  7250  003AC4  0E0A               	movlw	10
  7251  003AC6  182B               	xorwf	putch@data,w,c
  7252  003AC8  A4D8               	btfss	status,2,c
  7253  003ACA  D003               	goto	l218
  7254  003ACC  EC9A  F01D         	call	_lcdNewline	;wreg free
  7255  003AD0  0012               	return	
  7256  003AD2                     l218:
  7257                           
  7258                           ;lcd.c: 37: else
  7259                           ;lcd.c: 38: {
  7260                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  7261  003AD2  848C               	bsf	3980,2,c	;volatile
  7262                           
  7263                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  7264  003AD4  0E74               	movlw	116
  7265  003AD6                     u7817:
  7266  003AD6  2EE8               	decfsz	wreg,f,c
  7267  003AD8  D7FE               	bra	u7817
  7268  003ADA  D000               	nop2	
  7269                           
  7270                           ;lcd.c: 41: lcdNibble(data);
  7271  003ADC  502B               	movf	putch@data,w,c
  7272  003ADE  EC30  F01B         	call	_lcdNibble
  7273  003AE2  0012               	return	
  7274  003AE4                     __end_of_putch:
  7275                           	opt stack 0
  7276                           tblptru	equ	0xFF8
  7277                           tblptrh	equ	0xFF7
  7278                           tblptrl	equ	0xFF6
  7279                           tablat	equ	0xFF5
  7280                           prodh	equ	0xFF4
  7281                           prodl	equ	0xFF3
  7282                           postinc0	equ	0xFEE
  7283                           wreg	equ	0xFE8
  7284                           postdec1	equ	0xFE5
  7285                           fsr1l	equ	0xFE1
  7286                           indf2	equ	0xFDF
  7287                           postinc2	equ	0xFDE
  7288                           postdec2	equ	0xFDD
  7289                           fsr2h	equ	0xFDA
  7290                           fsr2l	equ	0xFD9
  7291                           status	equ	0xFD8
  7292                           
  7293 ;; *************** function _lcdNewline *****************
  7294 ;; Defined at:
  7295 ;;		line 78 in file "lcd.c"
  7296 ;; Parameters:    Size  Location     Type
  7297 ;;		None
  7298 ;; Auto vars:     Size  Location     Type
  7299 ;;		None
  7300 ;; Return value:  Size  Location     Type
  7301 ;;                  1    wreg      void 
  7302 ;; Registers used:
  7303 ;;		wreg, status,2, status,0, cstack
  7304 ;; Tracked objects:
  7305 ;;		On entry : 0/0
  7306 ;;		On exit  : 0/0
  7307 ;;		Unchanged: 0/0
  7308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7313 ;;Total ram usage:        0 bytes
  7314 ;; Hardware stack levels used:    1
  7315 ;; Hardware stack levels required when called:    5
  7316 ;; This function calls:
  7317 ;;		_lcdInst
  7318 ;; This function is called by:
  7319 ;;		_putch
  7320 ;; This function uses a non-reentrant model
  7321 ;;
  7322                           
  7323                           	psect	text15
  7324  003B34                     __ptext15:
  7325                           	opt stack 0
  7326  003B34                     _lcdNewline:
  7327                           	opt stack 22
  7328                           
  7329                           ;lcd.c: 79: lcdInst(0b11000000);
  7330                           
  7331                           ;incstack = 0
  7332  003B34  0EC0               	movlw	192
  7333  003B36  EC72  F01D         	call	_lcdInst
  7334  003B3A  0012               	return		;funcret
  7335  003B3C                     __end_of_lcdNewline:
  7336                           	opt stack 0
  7337                           tblptru	equ	0xFF8
  7338                           tblptrh	equ	0xFF7
  7339                           tblptrl	equ	0xFF6
  7340                           tablat	equ	0xFF5
  7341                           prodh	equ	0xFF4
  7342                           prodl	equ	0xFF3
  7343                           postinc0	equ	0xFEE
  7344                           wreg	equ	0xFE8
  7345                           postdec1	equ	0xFE5
  7346                           fsr1l	equ	0xFE1
  7347                           indf2	equ	0xFDF
  7348                           postinc2	equ	0xFDE
  7349                           postdec2	equ	0xFDD
  7350                           fsr2h	equ	0xFDA
  7351                           fsr2l	equ	0xFD9
  7352                           status	equ	0xFD8
  7353                           
  7354 ;; *************** function _isdigit *****************
  7355 ;; Defined at:
  7356 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7357 ;; Parameters:    Size  Location     Type
  7358 ;;  c               1    wreg     unsigned char 
  7359 ;; Auto vars:     Size  Location     Type
  7360 ;;  c               1   40[COMRAM] unsigned char 
  7361 ;; Return value:  Size  Location     Type
  7362 ;;		None               void
  7363 ;; Registers used:
  7364 ;;		wreg, status,2, status,0
  7365 ;; Tracked objects:
  7366 ;;		On entry : 0/0
  7367 ;;		On exit  : 0/0
  7368 ;;		Unchanged: 0/0
  7369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7371 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7372 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7373 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7374 ;;Total ram usage:        3 bytes
  7375 ;; Hardware stack levels used:    1
  7376 ;; Hardware stack levels required when called:    3
  7377 ;; This function calls:
  7378 ;;		Nothing
  7379 ;; This function is called by:
  7380 ;;		_printf
  7381 ;; This function uses a non-reentrant model
  7382 ;;
  7383                           
  7384                           	psect	text16
  7385  003B06                     __ptext16:
  7386                           	opt stack 0
  7387  003B06                     _isdigit:
  7388                           	opt stack 25
  7389                           
  7390                           ;incstack = 0
  7391                           ;isdigit@c stored from wreg
  7392  003B06  6E29               	movwf	isdigit@c,c
  7393  003B08  0E00               	movlw	0
  7394  003B0A  6E28               	movwf	_isdigit$980,c
  7395  003B0C  0E3A               	movlw	58
  7396  003B0E  6029               	cpfslt	isdigit@c,c
  7397  003B10  D005               	goto	l6064
  7398  003B12  0E2F               	movlw	47
  7399  003B14  6429               	cpfsgt	isdigit@c,c
  7400  003B16  D002               	goto	l6064
  7401  003B18  0E01               	movlw	1
  7402  003B1A  6E28               	movwf	_isdigit$980,c
  7403  003B1C                     l6064:
  7404  003B1C  C028  F027         	movff	_isdigit$980,??_isdigit
  7405  003B20  3027               	rrcf	??_isdigit,w,c
  7406  003B22  0012               	return	
  7407  003B24                     __end_of_isdigit:
  7408                           	opt stack 0
  7409                           tblptru	equ	0xFF8
  7410                           tblptrh	equ	0xFF7
  7411                           tblptrl	equ	0xFF6
  7412                           tablat	equ	0xFF5
  7413                           prodh	equ	0xFF4
  7414                           prodl	equ	0xFF3
  7415                           postinc0	equ	0xFEE
  7416                           wreg	equ	0xFE8
  7417                           postdec1	equ	0xFE5
  7418                           fsr1l	equ	0xFE1
  7419                           indf2	equ	0xFDF
  7420                           postinc2	equ	0xFDE
  7421                           postdec2	equ	0xFDD
  7422                           fsr2h	equ	0xFDA
  7423                           fsr2l	equ	0xFD9
  7424                           status	equ	0xFD8
  7425                           
  7426 ;; *************** function _fround *****************
  7427 ;; Defined at:
  7428 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7429 ;; Parameters:    Size  Location     Type
  7430 ;;  prec            1    wreg     unsigned char 
  7431 ;; Auto vars:     Size  Location     Type
  7432 ;;  prec            1   45[BANK0 ] unsigned char 
  7433 ;; Return value:  Size  Location     Type
  7434 ;;                  3   36[BANK0 ] unsigned char 
  7435 ;; Registers used:
  7436 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7437 ;; Tracked objects:
  7438 ;;		On entry : 0/0
  7439 ;;		On exit  : 0/0
  7440 ;;		Unchanged: 0/0
  7441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7442 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7443 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7445 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7446 ;;Total ram usage:       10 bytes
  7447 ;; Hardware stack levels used:    1
  7448 ;; Hardware stack levels required when called:    5
  7449 ;; This function calls:
  7450 ;;		___awdiv
  7451 ;;		___awmod
  7452 ;;		___ftmul
  7453 ;;		___wmul
  7454 ;; This function is called by:
  7455 ;;		_printf
  7456 ;; This function uses a non-reentrant model
  7457 ;;
  7458                           
  7459                           	psect	text17
  7460  001B44                     __ptext17:
  7461                           	opt stack 0
  7462  001B44                     _fround:
  7463                           	opt stack 23
  7464                           
  7465                           ;incstack = 0
  7466                           ;fround@prec stored from wreg
  7467  001B44  0100               	movlb	0	; () banked
  7468  001B46  6FAD               	movwf	fround@prec& (0+255),b
  7469                           
  7470                           ;doprnt.c: 413: if(prec>=110)
  7471  001B48  0E6D               	movlw	109
  7472  001B4A  0100               	movlb	0	; () banked
  7473  001B4C  65AD               	cpfsgt	fround@prec& (0+255),b
  7474  001B4E  D0AF               	goto	l6006
  7475                           
  7476                           ; BSR set to: 0
  7477                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7478  001B50  0E00               	movlw	0
  7479  001B52  0100               	movlb	0	; () banked
  7480  001B54  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7481  001B56  0E03               	movlw	3
  7482  001B58  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7483  001B5A  0E00               	movlw	0
  7484  001B5C  6E30               	movwf	___awdiv@divisor+1,c
  7485  001B5E  0E0A               	movlw	10
  7486  001B60  6E2F               	movwf	___awdiv@divisor,c
  7487  001B62  0E00               	movlw	0
  7488  001B64  6E2A               	movwf	___awmod@divisor+1,c
  7489  001B66  0E64               	movlw	100
  7490  001B68  6E29               	movwf	___awmod@divisor,c
  7491  001B6A  C0AD  F027         	movff	fround@prec,___awmod@dividend
  7492  001B6E  6A28               	clrf	___awmod@dividend+1,c
  7493  001B70  EC57  F01A         	call	___awmod	;wreg free
  7494  001B74  C027  F02D         	movff	?___awmod,___awdiv@dividend
  7495  001B78  C028  F02E         	movff	?___awmod+1,___awdiv@dividend+1
  7496  001B7C  EC33  F019         	call	___awdiv	;wreg free
  7497  001B80  0E09               	movlw	9
  7498  001B82  242D               	addwf	?___awdiv,w,c
  7499  001B84  0100               	movlb	0	; () banked
  7500  001B86  6F84               	movwf	___wmul@multiplier& (0+255),b
  7501  001B88  0E00               	movlw	0
  7502  001B8A  202E               	addwfc	?___awdiv+1,w,c
  7503  001B8C  0100               	movlb	0	; () banked
  7504  001B8E  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  7505  001B90  ECAD  F01C         	call	___wmul	;wreg free
  7506  001B94  0E45               	movlw	low __npowers_
  7507  001B96  0100               	movlb	0	; () banked
  7508  001B98  2584               	addwf	?___wmul& (0+255),w,b
  7509  001B9A  6EF6               	movwf	tblptrl,c
  7510  001B9C  0EFE               	movlw	high __npowers_
  7511  001B9E  0100               	movlb	0	; () banked
  7512  001BA0  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7513  001BA2  6EF7               	movwf	tblptrh,c
  7514  001BA4                     	if	0	;There are less than 3 active tblptr bytes
  7515  001BA4                     	endif
  7516  001BA4  0009               	tblrd		*+
  7517  001BA6  CFF5 F098          	movff	tablat,___ftmul@f2
  7518  001BAA  0009               	tblrd		*+
  7519  001BAC  CFF5 F099          	movff	tablat,___ftmul@f2+1
  7520  001BB0  000A               	tblrd		*-
  7521  001BB2  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  7522  001BB6  0E00               	movlw	0
  7523  001BB8  6E30               	movwf	___awdiv@divisor+1,c
  7524  001BBA  0E64               	movlw	100
  7525  001BBC  6E2F               	movwf	___awdiv@divisor,c
  7526  001BBE  C0AD  F02D         	movff	fround@prec,___awdiv@dividend
  7527  001BC2  6A2E               	clrf	___awdiv@dividend+1,c
  7528  001BC4  EC33  F019         	call	___awdiv	;wreg free
  7529  001BC8  0E12               	movlw	18
  7530  001BCA  242D               	addwf	?___awdiv,w,c
  7531  001BCC  0100               	movlb	0	; () banked
  7532  001BCE  6F84               	movwf	___wmul@multiplier& (0+255),b
  7533  001BD0  0E00               	movlw	0
  7534  001BD2  202E               	addwfc	?___awdiv+1,w,c
  7535  001BD4  0100               	movlb	0	; () banked
  7536  001BD6  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  7537  001BD8  0E00               	movlw	0
  7538  001BDA  0100               	movlb	0	; () banked
  7539  001BDC  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7540  001BDE  0E03               	movlw	3
  7541  001BE0  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7542  001BE2  ECAD  F01C         	call	___wmul	;wreg free
  7543  001BE6  0E45               	movlw	low __npowers_
  7544  001BE8  0100               	movlb	0	; () banked
  7545  001BEA  2584               	addwf	?___wmul& (0+255),w,b
  7546  001BEC  6EF6               	movwf	tblptrl,c
  7547  001BEE  0EFE               	movlw	high __npowers_
  7548  001BF0  0100               	movlb	0	; () banked
  7549  001BF2  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7550  001BF4  6EF7               	movwf	tblptrh,c
  7551  001BF6                     	if	0	;There are less than 3 active tblptr bytes
  7552  001BF6                     	endif
  7553  001BF6  0009               	tblrd		*+
  7554  001BF8  CFF5 F095          	movff	tablat,___ftmul@f1
  7555  001BFC  0009               	tblrd		*+
  7556  001BFE  CFF5 F096          	movff	tablat,___ftmul@f1+1
  7557  001C02  000A               	tblrd		*-
  7558  001C04  CFF5 F097          	movff	tablat,___ftmul@f1+2
  7559  001C08  ECCA  F010         	call	___ftmul	;wreg free
  7560  001C0C  C095  F0AA         	movff	?___ftmul,_fround$1354
  7561  001C10  C096  F0AB         	movff	?___ftmul+1,_fround$1354+1
  7562  001C14  C097  F0AC         	movff	?___ftmul+2,_fround$1354+2
  7563                           
  7564                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7565  001C18  0E00               	movlw	0
  7566  001C1A  0100               	movlb	0	; () banked
  7567  001C1C  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7568  001C1E  0E03               	movlw	3
  7569  001C20  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7570  001C22  0E00               	movlw	0
  7571  001C24  6E2A               	movwf	___awmod@divisor+1,c
  7572  001C26  0E0A               	movlw	10
  7573  001C28  6E29               	movwf	___awmod@divisor,c
  7574  001C2A  C0AD  F027         	movff	fround@prec,___awmod@dividend
  7575  001C2E  6A28               	clrf	___awmod@dividend+1,c
  7576  001C30  EC57  F01A         	call	___awmod	;wreg free
  7577  001C34  C027  F084         	movff	?___awmod,___wmul@multiplier
  7578  001C38  C028  F085         	movff	?___awmod+1,___wmul@multiplier+1
  7579  001C3C  ECAD  F01C         	call	___wmul	;wreg free
  7580  001C40  0E45               	movlw	low __npowers_
  7581  001C42  0100               	movlb	0	; () banked
  7582  001C44  2584               	addwf	?___wmul& (0+255),w,b
  7583  001C46  6EF6               	movwf	tblptrl,c
  7584  001C48  0EFE               	movlw	high __npowers_
  7585  001C4A  0100               	movlb	0	; () banked
  7586  001C4C  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7587  001C4E  6EF7               	movwf	tblptrh,c
  7588  001C50                     	if	0	;There are less than 3 active tblptr bytes
  7589  001C50                     	endif
  7590  001C50  0009               	tblrd		*+
  7591  001C52  CFF5 F098          	movff	tablat,___ftmul@f2
  7592  001C56  0009               	tblrd		*+
  7593  001C58  CFF5 F099          	movff	tablat,___ftmul@f2+1
  7594  001C5C  000A               	tblrd		*-
  7595  001C5E  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  7596  001C62  C0AA  F095         	movff	_fround$1354,___ftmul@f1
  7597  001C66  C0AB  F096         	movff	_fround$1354+1,___ftmul@f1+1
  7598  001C6A  C0AC  F097         	movff	_fround$1354+2,___ftmul@f1+2
  7599  001C6E  ECCA  F010         	call	___ftmul	;wreg free
  7600  001C72  C095  F0A7         	movff	?___ftmul,_fround$1355
  7601  001C76  C096  F0A8         	movff	?___ftmul+1,_fround$1355+1
  7602  001C7A  C097  F0A9         	movff	?___ftmul+2,_fround$1355+2
  7603                           
  7604                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7605  001C7E  C0A7  F095         	movff	_fround$1355,___ftmul@f1
  7606  001C82  C0A8  F096         	movff	_fround$1355+1,___ftmul@f1+1
  7607  001C86  C0A9  F097         	movff	_fround$1355+2,___ftmul@f1+2
  7608  001C8A  0E00               	movlw	0
  7609  001C8C  0100               	movlb	0	; () banked
  7610  001C8E  6F98               	movwf	___ftmul@f2& (0+255),b
  7611  001C90  0E00               	movlw	0
  7612  001C92  0100               	movlb	0	; () banked
  7613  001C94  6F99               	movwf	(___ftmul@f2+1)& (0+255),b
  7614  001C96  0E3F               	movlw	63
  7615  001C98  0100               	movlb	0	; () banked
  7616  001C9A  6F9A               	movwf	(___ftmul@f2+2)& (0+255),b
  7617  001C9C  ECCA  F010         	call	___ftmul	;wreg free
  7618  001CA0  C095  F0A4         	movff	?___ftmul,?_fround
  7619  001CA4  C096  F0A5         	movff	?___ftmul+1,?_fround+1
  7620  001CA8  C097  F0A6         	movff	?___ftmul+2,?_fround+2
  7621  001CAC  0012               	return	
  7622  001CAE                     l6006:
  7623                           
  7624                           ;doprnt.c: 415: else if(prec > 10)
  7625  001CAE  0E0A               	movlw	10
  7626  001CB0  0100               	movlb	0	; () banked
  7627  001CB2  65AD               	cpfsgt	fround@prec& (0+255),b
  7628  001CB4  D068               	goto	l6014
  7629                           
  7630                           ; BSR set to: 0
  7631                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7632  001CB6  0E00               	movlw	0
  7633  001CB8  0100               	movlb	0	; () banked
  7634  001CBA  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7635  001CBC  0E03               	movlw	3
  7636  001CBE  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7637  001CC0  0E00               	movlw	0
  7638  001CC2  6E2A               	movwf	___awmod@divisor+1,c
  7639  001CC4  0E0A               	movlw	10
  7640  001CC6  6E29               	movwf	___awmod@divisor,c
  7641  001CC8  C0AD  F027         	movff	fround@prec,___awmod@dividend
  7642  001CCC  6A28               	clrf	___awmod@dividend+1,c
  7643  001CCE  EC57  F01A         	call	___awmod	;wreg free
  7644  001CD2  C027  F084         	movff	?___awmod,___wmul@multiplier
  7645  001CD6  C028  F085         	movff	?___awmod+1,___wmul@multiplier+1
  7646  001CDA  ECAD  F01C         	call	___wmul	;wreg free
  7647  001CDE  0E45               	movlw	low __npowers_
  7648  001CE0  0100               	movlb	0	; () banked
  7649  001CE2  2584               	addwf	?___wmul& (0+255),w,b
  7650  001CE4  6EF6               	movwf	tblptrl,c
  7651  001CE6  0EFE               	movlw	high __npowers_
  7652  001CE8  0100               	movlb	0	; () banked
  7653  001CEA  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7654  001CEC  6EF7               	movwf	tblptrh,c
  7655  001CEE                     	if	0	;There are less than 3 active tblptr bytes
  7656  001CEE                     	endif
  7657  001CEE  0009               	tblrd		*+
  7658  001CF0  CFF5 F098          	movff	tablat,___ftmul@f2
  7659  001CF4  0009               	tblrd		*+
  7660  001CF6  CFF5 F099          	movff	tablat,___ftmul@f2+1
  7661  001CFA  000A               	tblrd		*-
  7662  001CFC  CFF5 F09A          	movff	tablat,___ftmul@f2+2
  7663  001D00  0E00               	movlw	0
  7664  001D02  6E30               	movwf	___awdiv@divisor+1,c
  7665  001D04  0E0A               	movlw	10
  7666  001D06  6E2F               	movwf	___awdiv@divisor,c
  7667  001D08  C0AD  F02D         	movff	fround@prec,___awdiv@dividend
  7668  001D0C  6A2E               	clrf	___awdiv@dividend+1,c
  7669  001D0E  EC33  F019         	call	___awdiv	;wreg free
  7670  001D12  0E09               	movlw	9
  7671  001D14  242D               	addwf	?___awdiv,w,c
  7672  001D16  0100               	movlb	0	; () banked
  7673  001D18  6F84               	movwf	___wmul@multiplier& (0+255),b
  7674  001D1A  0E00               	movlw	0
  7675  001D1C  202E               	addwfc	?___awdiv+1,w,c
  7676  001D1E  0100               	movlb	0	; () banked
  7677  001D20  6F85               	movwf	(___wmul@multiplier+1)& (0+255),b
  7678  001D22  0E00               	movlw	0
  7679  001D24  0100               	movlb	0	; () banked
  7680  001D26  6F87               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7681  001D28  0E03               	movlw	3
  7682  001D2A  6F86               	movwf	___wmul@multiplicand& (0+255),b
  7683  001D2C  ECAD  F01C         	call	___wmul	;wreg free
  7684  001D30  0E45               	movlw	low __npowers_
  7685  001D32  0100               	movlb	0	; () banked
  7686  001D34  2584               	addwf	?___wmul& (0+255),w,b
  7687  001D36  6EF6               	movwf	tblptrl,c
  7688  001D38  0EFE               	movlw	high __npowers_
  7689  001D3A  0100               	movlb	0	; () banked
  7690  001D3C  2185               	addwfc	(?___wmul+1)& (0+255),w,b
  7691  001D3E  6EF7               	movwf	tblptrh,c
  7692  001D40                     	if	0	;There are less than 3 active tblptr bytes
  7693  001D40                     	endif
  7694  001D40  0009               	tblrd		*+
  7695  001D42  CFF5 F095          	movff	tablat,___ftmul@f1
  7696  001D46  0009               	tblrd		*+
  7697  001D48  CFF5 F096          	movff	tablat,___ftmul@f1+1
  7698  001D4C  000A               	tblrd		*-
  7699  001D4E  CFF5 F097          	movff	tablat,___ftmul@f1+2
  7700  001D52  ECCA  F010         	call	___ftmul	;wreg free
  7701  001D56  C095  F0AA         	movff	?___ftmul,_fround$1354
  7702  001D5A  C096  F0AB         	movff	?___ftmul+1,_fround$1354+1
  7703  001D5E  C097  F0AC         	movff	?___ftmul+2,_fround$1354+2
  7704                           
  7705                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7706  001D62  C0AA  F095         	movff	_fround$1354,___ftmul@f1
  7707  001D66  C0AB  F096         	movff	_fround$1354+1,___ftmul@f1+1
  7708  001D6A  C0AC  F097         	movff	_fround$1354+2,___ftmul@f1+2
  7709  001D6E  0E00               	movlw	0
  7710  001D70  0100               	movlb	0	; () banked
  7711  001D72  6F98               	movwf	___ftmul@f2& (0+255),b
  7712  001D74  0E00               	movlw	0
  7713  001D76  0100               	movlb	0	; () banked
  7714  001D78  6F99               	movwf	(___ftmul@f2+1)& (0+255),b
  7715  001D7A  0E3F               	movlw	63
  7716  001D7C  0100               	movlb	0	; () banked
  7717  001D7E  6F9A               	movwf	(___ftmul@f2+2)& (0+255),b
  7718  001D80  ECCA  F010         	call	___ftmul	;wreg free
  7719  001D84  D78D               	goto	L6
  7720  001D86                     l6014:
  7721                           
  7722                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7723  001D86  0100               	movlb	0	; () banked
  7724  001D88  51AD               	movf	fround@prec& (0+255),w,b
  7725  001D8A  0D03               	mullw	3
  7726  001D8C  0E45               	movlw	low __npowers_
  7727  001D8E  24F3               	addwf	prodl,w,c
  7728  001D90  6EF6               	movwf	tblptrl,c
  7729  001D92  0EFE               	movlw	high __npowers_
  7730  001D94  20F4               	addwfc	prodh,w,c
  7731  001D96  6EF7               	movwf	tblptrh,c
  7732  001D98                     	if	0	;There are less than 3 active tblptr bytes
  7733  001D98                     	endif
  7734  001D98  0009               	tblrd		*+
  7735  001D9A  CFF5 F095          	movff	tablat,___ftmul@f1
  7736  001D9E  0009               	tblrd		*+
  7737  001DA0  CFF5 F096          	movff	tablat,___ftmul@f1+1
  7738  001DA4  000A               	tblrd		*-
  7739  001DA6  CFF5 F097          	movff	tablat,___ftmul@f1+2
  7740  001DAA  0E00               	movlw	0
  7741  001DAC  0100               	movlb	0	; () banked
  7742  001DAE  6F98               	movwf	___ftmul@f2& (0+255),b
  7743  001DB0  0E00               	movlw	0
  7744  001DB2  0100               	movlb	0	; () banked
  7745  001DB4  6F99               	movwf	(___ftmul@f2+1)& (0+255),b
  7746  001DB6  0E3F               	movlw	63
  7747  001DB8  0100               	movlb	0	; () banked
  7748  001DBA  6F9A               	movwf	(___ftmul@f2+2)& (0+255),b
  7749  001DBC  ECCA  F010         	call	___ftmul	;wreg free
  7750  001DC0  C095  F0A4         	movff	?___ftmul,?_fround
  7751  001DC4  C096  F0A5         	movff	?___ftmul+1,?_fround+1
  7752  001DC8  C097  F0A6         	movff	?___ftmul+2,?_fround+2
  7753  001DCC  0012               	return	
  7754  001DCE                     __end_of_fround:
  7755                           	opt stack 0
  7756                           tblptru	equ	0xFF8
  7757                           tblptrh	equ	0xFF7
  7758                           tblptrl	equ	0xFF6
  7759                           tablat	equ	0xFF5
  7760                           prodh	equ	0xFF4
  7761                           prodl	equ	0xFF3
  7762                           postinc0	equ	0xFEE
  7763                           wreg	equ	0xFE8
  7764                           postdec1	equ	0xFE5
  7765                           fsr1l	equ	0xFE1
  7766                           indf2	equ	0xFDF
  7767                           postinc2	equ	0xFDE
  7768                           postdec2	equ	0xFDD
  7769                           fsr2h	equ	0xFDA
  7770                           fsr2l	equ	0xFD9
  7771                           status	equ	0xFD8
  7772                           
  7773 ;; *************** function ___wmul *****************
  7774 ;; Defined at:
  7775 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7776 ;; Parameters:    Size  Location     Type
  7777 ;;  multiplier      2    4[BANK0 ] unsigned int 
  7778 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  7779 ;; Auto vars:     Size  Location     Type
  7780 ;;  product         2   48[COMRAM] unsigned int 
  7781 ;; Return value:  Size  Location     Type
  7782 ;;                  2    4[BANK0 ] unsigned int 
  7783 ;; Registers used:
  7784 ;;		wreg, status,2, status,0, prodl, prodh
  7785 ;; Tracked objects:
  7786 ;;		On entry : 0/0
  7787 ;;		On exit  : 0/0
  7788 ;;		Unchanged: 0/0
  7789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7790 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7791 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7793 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7794 ;;Total ram usage:        6 bytes
  7795 ;; Hardware stack levels used:    1
  7796 ;; Hardware stack levels required when called:    3
  7797 ;; This function calls:
  7798 ;;		Nothing
  7799 ;; This function is called by:
  7800 ;;		_fround
  7801 ;;		_scale
  7802 ;;		_printf
  7803 ;; This function uses a non-reentrant model
  7804 ;;
  7805                           
  7806                           	psect	text18
  7807  00395A                     __ptext18:
  7808                           	opt stack 0
  7809  00395A                     ___wmul:
  7810                           	opt stack 24
  7811                           
  7812                           ;incstack = 0
  7813  00395A  0100               	movlb	0	; () banked
  7814  00395C  5184               	movf	___wmul@multiplier& (0+255),w,b
  7815  00395E  0100               	movlb	0	; () banked
  7816  003960  0386               	mulwf	___wmul@multiplicand& (0+255),b
  7817  003962  CFF3 F031          	movff	prodl,___wmul@product
  7818  003966  CFF4 F032          	movff	prodh,___wmul@product+1
  7819  00396A  0100               	movlb	0	; () banked
  7820  00396C  5184               	movf	___wmul@multiplier& (0+255),w,b
  7821  00396E  0100               	movlb	0	; () banked
  7822  003970  0387               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7823  003972  50F3               	movf	prodl,w,c
  7824  003974  2632               	addwf	___wmul@product+1,f,c
  7825  003976  0100               	movlb	0	; () banked
  7826  003978  5185               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7827  00397A  0100               	movlb	0	; () banked
  7828  00397C  0386               	mulwf	___wmul@multiplicand& (0+255),b
  7829  00397E  50F3               	movf	prodl,w,c
  7830  003980  2632               	addwf	___wmul@product+1,f,c
  7831                           
  7832                           ; BSR set to: 0
  7833  003982  C031  F084         	movff	___wmul@product,?___wmul
  7834  003986  C032  F085         	movff	___wmul@product+1,?___wmul+1
  7835  00398A  0012               	return	
  7836  00398C                     __end_of___wmul:
  7837                           	opt stack 0
  7838                           tblptru	equ	0xFF8
  7839                           tblptrh	equ	0xFF7
  7840                           tblptrl	equ	0xFF6
  7841                           tablat	equ	0xFF5
  7842                           prodh	equ	0xFF4
  7843                           prodl	equ	0xFF3
  7844                           postinc0	equ	0xFEE
  7845                           wreg	equ	0xFE8
  7846                           postdec1	equ	0xFE5
  7847                           fsr1l	equ	0xFE1
  7848                           indf2	equ	0xFDF
  7849                           postinc2	equ	0xFDE
  7850                           postdec2	equ	0xFDD
  7851                           fsr2h	equ	0xFDA
  7852                           fsr2l	equ	0xFD9
  7853                           status	equ	0xFD8
  7854                           
  7855 ;; *************** function ___awmod *****************
  7856 ;; Defined at:
  7857 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7858 ;; Parameters:    Size  Location     Type
  7859 ;;  dividend        2   38[COMRAM] int 
  7860 ;;  divisor         2   40[COMRAM] int 
  7861 ;; Auto vars:     Size  Location     Type
  7862 ;;  sign            1   43[COMRAM] unsigned char 
  7863 ;;  counter         1   42[COMRAM] unsigned char 
  7864 ;; Return value:  Size  Location     Type
  7865 ;;                  2   38[COMRAM] int 
  7866 ;; Registers used:
  7867 ;;		wreg, status,2, status,0
  7868 ;; Tracked objects:
  7869 ;;		On entry : 0/0
  7870 ;;		On exit  : 0/0
  7871 ;;		Unchanged: 0/0
  7872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7873 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7874 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7876 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7877 ;;Total ram usage:        6 bytes
  7878 ;; Hardware stack levels used:    1
  7879 ;; Hardware stack levels required when called:    3
  7880 ;; This function calls:
  7881 ;;		Nothing
  7882 ;; This function is called by:
  7883 ;;		_fround
  7884 ;;		_scale
  7885 ;; This function uses a non-reentrant model
  7886 ;;
  7887                           
  7888                           	psect	text19
  7889  0034AE                     __ptext19:
  7890                           	opt stack 0
  7891  0034AE                     ___awmod:
  7892                           	opt stack 24
  7893                           
  7894                           ; BSR set to: 0
  7895                           ;incstack = 0
  7896  0034AE  0E00               	movlw	0
  7897  0034B0  6E2C               	movwf	___awmod@sign,c
  7898  0034B2  AE28               	btfss	___awmod@dividend+1,7,c
  7899  0034B4  D006               	goto	l5894
  7900  0034B6  6C27               	negf	___awmod@dividend,c
  7901  0034B8  1E28               	comf	___awmod@dividend+1,f,c
  7902  0034BA  B0D8               	btfsc	status,0,c
  7903  0034BC  2A28               	incf	___awmod@dividend+1,f,c
  7904  0034BE  0E01               	movlw	1
  7905  0034C0  6E2C               	movwf	___awmod@sign,c
  7906  0034C2                     l5894:
  7907  0034C2  AE2A               	btfss	___awmod@divisor+1,7,c
  7908  0034C4  D004               	goto	l5898
  7909  0034C6  6C29               	negf	___awmod@divisor,c
  7910  0034C8  1E2A               	comf	___awmod@divisor+1,f,c
  7911  0034CA  B0D8               	btfsc	status,0,c
  7912  0034CC  2A2A               	incf	___awmod@divisor+1,f,c
  7913  0034CE                     l5898:
  7914  0034CE  5029               	movf	___awmod@divisor,w,c
  7915  0034D0  102A               	iorwf	___awmod@divisor+1,w,c
  7916  0034D2  B4D8               	btfsc	status,2,c
  7917  0034D4  D018               	goto	l5914
  7918  0034D6  0E01               	movlw	1
  7919  0034D8  6E2B               	movwf	___awmod@counter,c
  7920  0034DA  D004               	goto	l5904
  7921  0034DC                     l5902:
  7922  0034DC  90D8               	bcf	status,0,c
  7923  0034DE  3629               	rlcf	___awmod@divisor,f,c
  7924  0034E0  362A               	rlcf	___awmod@divisor+1,f,c
  7925  0034E2  2A2B               	incf	___awmod@counter,f,c
  7926  0034E4                     l5904:
  7927  0034E4  AE2A               	btfss	___awmod@divisor+1,7,c
  7928  0034E6  D7FA               	goto	l5902
  7929  0034E8                     l5906:
  7930  0034E8  5029               	movf	___awmod@divisor,w,c
  7931  0034EA  5C27               	subwf	___awmod@dividend,w,c
  7932  0034EC  502A               	movf	___awmod@divisor+1,w,c
  7933  0034EE  5828               	subwfb	___awmod@dividend+1,w,c
  7934  0034F0  A0D8               	btfss	status,0,c
  7935  0034F2  D004               	goto	l5910
  7936  0034F4  5029               	movf	___awmod@divisor,w,c
  7937  0034F6  5E27               	subwf	___awmod@dividend,f,c
  7938  0034F8  502A               	movf	___awmod@divisor+1,w,c
  7939  0034FA  5A28               	subwfb	___awmod@dividend+1,f,c
  7940  0034FC                     l5910:
  7941  0034FC  90D8               	bcf	status,0,c
  7942  0034FE  322A               	rrcf	___awmod@divisor+1,f,c
  7943  003500  3229               	rrcf	___awmod@divisor,f,c
  7944  003502  2E2B               	decfsz	___awmod@counter,f,c
  7945  003504  D7F1               	goto	l5906
  7946  003506                     l5914:
  7947  003506  502C               	movf	___awmod@sign,w,c
  7948  003508  B4D8               	btfsc	status,2,c
  7949  00350A  D004               	goto	l5918
  7950  00350C  6C27               	negf	___awmod@dividend,c
  7951  00350E  1E28               	comf	___awmod@dividend+1,f,c
  7952  003510  B0D8               	btfsc	status,0,c
  7953  003512  2A28               	incf	___awmod@dividend+1,f,c
  7954  003514                     l5918:
  7955  003514  C027  F027         	movff	___awmod@dividend,?___awmod
  7956  003518  C028  F028         	movff	___awmod@dividend+1,?___awmod+1
  7957  00351C  0012               	return	
  7958  00351E                     __end_of___awmod:
  7959                           	opt stack 0
  7960                           tblptru	equ	0xFF8
  7961                           tblptrh	equ	0xFF7
  7962                           tblptrl	equ	0xFF6
  7963                           tablat	equ	0xFF5
  7964                           prodh	equ	0xFF4
  7965                           prodl	equ	0xFF3
  7966                           postinc0	equ	0xFEE
  7967                           wreg	equ	0xFE8
  7968                           postdec1	equ	0xFE5
  7969                           fsr1l	equ	0xFE1
  7970                           indf2	equ	0xFDF
  7971                           postinc2	equ	0xFDE
  7972                           postdec2	equ	0xFDD
  7973                           fsr2h	equ	0xFDA
  7974                           fsr2l	equ	0xFD9
  7975                           status	equ	0xFD8
  7976                           
  7977 ;; *************** function ___awdiv *****************
  7978 ;; Defined at:
  7979 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  7980 ;; Parameters:    Size  Location     Type
  7981 ;;  dividend        2   44[COMRAM] int 
  7982 ;;  divisor         2   46[COMRAM] int 
  7983 ;; Auto vars:     Size  Location     Type
  7984 ;;  quotient        2    2[BANK0 ] int 
  7985 ;;  sign            1    1[BANK0 ] unsigned char 
  7986 ;;  counter         1    0[BANK0 ] unsigned char 
  7987 ;; Return value:  Size  Location     Type
  7988 ;;                  2   44[COMRAM] int 
  7989 ;; Registers used:
  7990 ;;		wreg, status,2, status,0
  7991 ;; Tracked objects:
  7992 ;;		On entry : 0/0
  7993 ;;		On exit  : 0/0
  7994 ;;		Unchanged: 0/0
  7995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7996 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7997 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7999 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8000 ;;Total ram usage:        8 bytes
  8001 ;; Hardware stack levels used:    1
  8002 ;; Hardware stack levels required when called:    3
  8003 ;; This function calls:
  8004 ;;		Nothing
  8005 ;; This function is called by:
  8006 ;;		_fround
  8007 ;;		_scale
  8008 ;;		_printf
  8009 ;; This function uses a non-reentrant model
  8010 ;;
  8011                           
  8012                           	psect	text20
  8013  003266                     __ptext20:
  8014                           	opt stack 0
  8015  003266                     ___awdiv:
  8016                           	opt stack 24
  8017                           
  8018                           ;incstack = 0
  8019  003266  0E00               	movlw	0
  8020  003268  0100               	movlb	0	; () banked
  8021  00326A  6F81               	movwf	___awdiv@sign& (0+255),b
  8022                           
  8023                           ; BSR set to: 0
  8024  00326C  AE30               	btfss	___awdiv@divisor+1,7,c
  8025  00326E  D007               	goto	l5850
  8026                           
  8027                           ; BSR set to: 0
  8028  003270  6C2F               	negf	___awdiv@divisor,c
  8029  003272  1E30               	comf	___awdiv@divisor+1,f,c
  8030  003274  B0D8               	btfsc	status,0,c
  8031  003276  2A30               	incf	___awdiv@divisor+1,f,c
  8032                           
  8033                           ; BSR set to: 0
  8034  003278  0E01               	movlw	1
  8035  00327A  0100               	movlb	0	; () banked
  8036  00327C  6F81               	movwf	___awdiv@sign& (0+255),b
  8037  00327E                     l5850:
  8038                           
  8039                           ; BSR set to: 0
  8040  00327E  AE2E               	btfss	___awdiv@dividend+1,7,c
  8041  003280  D007               	goto	l5856
  8042                           
  8043                           ; BSR set to: 0
  8044  003282  6C2D               	negf	___awdiv@dividend,c
  8045  003284  1E2E               	comf	___awdiv@dividend+1,f,c
  8046  003286  B0D8               	btfsc	status,0,c
  8047  003288  2A2E               	incf	___awdiv@dividend+1,f,c
  8048                           
  8049                           ; BSR set to: 0
  8050  00328A  0E01               	movlw	1
  8051  00328C  0100               	movlb	0	; () banked
  8052  00328E  1B81               	xorwf	___awdiv@sign& (0+255),f,b
  8053  003290                     l5856:
  8054                           
  8055                           ; BSR set to: 0
  8056  003290  0E00               	movlw	0
  8057  003292  0100               	movlb	0	; () banked
  8058  003294  6F83               	movwf	(___awdiv@quotient+1)& (0+255),b
  8059  003296  0E00               	movlw	0
  8060  003298  6F82               	movwf	___awdiv@quotient& (0+255),b
  8061                           
  8062                           ; BSR set to: 0
  8063  00329A  502F               	movf	___awdiv@divisor,w,c
  8064  00329C  1030               	iorwf	___awdiv@divisor+1,w,c
  8065  00329E  B4D8               	btfsc	status,2,c
  8066  0032A0  D021               	goto	l5878
  8067                           
  8068                           ; BSR set to: 0
  8069  0032A2  0E01               	movlw	1
  8070  0032A4  0100               	movlb	0	; () banked
  8071  0032A6  6F80               	movwf	___awdiv@counter& (0+255),b
  8072  0032A8  D005               	goto	l5864
  8073  0032AA                     l5862:
  8074                           
  8075                           ; BSR set to: 0
  8076  0032AA  90D8               	bcf	status,0,c
  8077  0032AC  362F               	rlcf	___awdiv@divisor,f,c
  8078  0032AE  3630               	rlcf	___awdiv@divisor+1,f,c
  8079  0032B0  0100               	movlb	0	; () banked
  8080  0032B2  2B80               	incf	___awdiv@counter& (0+255),f,b
  8081  0032B4                     l5864:
  8082                           
  8083                           ; BSR set to: 0
  8084  0032B4  AE30               	btfss	___awdiv@divisor+1,7,c
  8085  0032B6  D7F9               	goto	l5862
  8086  0032B8                     l5866:
  8087                           
  8088                           ; BSR set to: 0
  8089  0032B8  0100               	movlb	0	; () banked
  8090  0032BA  90D8               	bcf	status,0,c
  8091  0032BC  3782               	rlcf	___awdiv@quotient& (0+255),f,b
  8092  0032BE  3783               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8093                           
  8094                           ; BSR set to: 0
  8095  0032C0  502F               	movf	___awdiv@divisor,w,c
  8096  0032C2  5C2D               	subwf	___awdiv@dividend,w,c
  8097  0032C4  5030               	movf	___awdiv@divisor+1,w,c
  8098  0032C6  582E               	subwfb	___awdiv@dividend+1,w,c
  8099  0032C8  A0D8               	btfss	status,0,c
  8100  0032CA  D006               	goto	l5874
  8101                           
  8102                           ; BSR set to: 0
  8103  0032CC  502F               	movf	___awdiv@divisor,w,c
  8104  0032CE  5E2D               	subwf	___awdiv@dividend,f,c
  8105  0032D0  5030               	movf	___awdiv@divisor+1,w,c
  8106  0032D2  5A2E               	subwfb	___awdiv@dividend+1,f,c
  8107                           
  8108                           ; BSR set to: 0
  8109  0032D4  0100               	movlb	0	; () banked
  8110  0032D6  8182               	bsf	___awdiv@quotient& (0+255),0,b
  8111  0032D8                     l5874:
  8112                           
  8113                           ; BSR set to: 0
  8114  0032D8  90D8               	bcf	status,0,c
  8115  0032DA  3230               	rrcf	___awdiv@divisor+1,f,c
  8116  0032DC  322F               	rrcf	___awdiv@divisor,f,c
  8117                           
  8118                           ; BSR set to: 0
  8119  0032DE  0100               	movlb	0	; () banked
  8120  0032E0  2F80               	decfsz	___awdiv@counter& (0+255),f,b
  8121  0032E2  D7EA               	goto	l5866
  8122  0032E4                     l5878:
  8123                           
  8124                           ; BSR set to: 0
  8125  0032E4  0100               	movlb	0	; () banked
  8126  0032E6  5181               	movf	___awdiv@sign& (0+255),w,b
  8127  0032E8  0100               	movlb	0	; () banked
  8128  0032EA  B4D8               	btfsc	status,2,c
  8129  0032EC  D005               	goto	l5882
  8130                           
  8131                           ; BSR set to: 0
  8132  0032EE  0100               	movlb	0	; () banked
  8133  0032F0  6D82               	negf	___awdiv@quotient& (0+255),b
  8134  0032F2  1F83               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8135  0032F4  B0D8               	btfsc	status,0,c
  8136  0032F6  2B83               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8137  0032F8                     l5882:
  8138                           
  8139                           ; BSR set to: 0
  8140  0032F8  C082  F02D         	movff	___awdiv@quotient,?___awdiv
  8141  0032FC  C083  F02E         	movff	___awdiv@quotient+1,?___awdiv+1
  8142  003300  0012               	return	
  8143  003302                     __end_of___awdiv:
  8144                           	opt stack 0
  8145                           tblptru	equ	0xFF8
  8146                           tblptrh	equ	0xFF7
  8147                           tblptrl	equ	0xFF6
  8148                           tablat	equ	0xFF5
  8149                           prodh	equ	0xFF4
  8150                           prodl	equ	0xFF3
  8151                           postinc0	equ	0xFEE
  8152                           wreg	equ	0xFE8
  8153                           postdec1	equ	0xFE5
  8154                           fsr1l	equ	0xFE1
  8155                           indf2	equ	0xFDF
  8156                           postinc2	equ	0xFDE
  8157                           postdec2	equ	0xFDD
  8158                           fsr2h	equ	0xFDA
  8159                           fsr2l	equ	0xFD9
  8160                           status	equ	0xFD8
  8161                           
  8162 ;; *************** function __tdiv_to_l_ *****************
  8163 ;; Defined at:
  8164 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  8165 ;; Parameters:    Size  Location     Type
  8166 ;;  f1              3   38[COMRAM] float 
  8167 ;;  f2              3   41[COMRAM] float 
  8168 ;; Auto vars:     Size  Location     Type
  8169 ;;  quot            4    0[BANK0 ] unsigned long 
  8170 ;;  exp1            1    5[BANK0 ] unsigned char 
  8171 ;;  cntr            1    4[BANK0 ] unsigned char 
  8172 ;; Return value:  Size  Location     Type
  8173 ;;                  4   38[COMRAM] unsigned long 
  8174 ;; Registers used:
  8175 ;;		wreg, status,2, status,0
  8176 ;; Tracked objects:
  8177 ;;		On entry : 0/0
  8178 ;;		On exit  : 0/0
  8179 ;;		Unchanged: 0/0
  8180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8181 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8182 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8183 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8184 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8185 ;;Total ram usage:       15 bytes
  8186 ;; Hardware stack levels used:    1
  8187 ;; Hardware stack levels required when called:    3
  8188 ;; This function calls:
  8189 ;;		Nothing
  8190 ;; This function is called by:
  8191 ;;		_printf
  8192 ;; This function uses a non-reentrant model
  8193 ;;
  8194                           
  8195                           	psect	text21
  8196  0022F2                     __ptext21:
  8197                           	opt stack 0
  8198  0022F2                     __tdiv_to_l_:
  8199                           	opt stack 25
  8200                           
  8201                           ; BSR set to: 0
  8202                           ;incstack = 0
  8203  0022F2  C029  F02D         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8204  0022F6  6A2E               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8205  0022F8  6A2F               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8206  0022FA  3428               	rlcf	__tdiv_to_l_@f1+1,w,c
  8207  0022FC  362D               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8208  0022FE  E301               	bnc	u6091
  8209  002300  802E               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8210  002302                     u6091:
  8211  002302  502D               	movf	??__tdiv_to_l_,w,c
  8212  002304  0100               	movlb	0	; () banked
  8213  002306  6F85               	movwf	__tdiv_to_l_@exp1& (0+255),b
  8214  002308  0100               	movlb	0	; () banked
  8215  00230A  5185               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  8216  00230C  A4D8               	btfss	status,2,c
  8217  00230E  D009               	goto	l6074
  8218                           
  8219                           ; BSR set to: 0
  8220  002310  0E00               	movlw	0
  8221  002312  6E27               	movwf	?__tdiv_to_l_,c
  8222  002314  0E00               	movlw	0
  8223  002316  6E28               	movwf	?__tdiv_to_l_+1,c
  8224  002318  0E00               	movlw	0
  8225  00231A  6E29               	movwf	?__tdiv_to_l_+2,c
  8226  00231C  0E00               	movlw	0
  8227  00231E  6E2A               	movwf	?__tdiv_to_l_+3,c
  8228                           
  8229                           ; BSR set to: 0
  8230  002320  0012               	return	
  8231  002322                     l6074:
  8232                           
  8233                           ; BSR set to: 0
  8234  002322  C02C  F02D         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8235  002326  6A2E               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8236  002328  6A2F               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8237  00232A  342B               	rlcf	__tdiv_to_l_@f2+1,w,c
  8238  00232C  362D               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8239  00232E  E301               	bnc	u6111
  8240  002330  802E               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8241  002332                     u6111:
  8242  002332  502D               	movf	??__tdiv_to_l_,w,c
  8243  002334  0100               	movlb	0	; () banked
  8244  002336  6F84               	movwf	__tdiv_to_l_@cntr& (0+255),b
  8245  002338  0100               	movlb	0	; () banked
  8246  00233A  5184               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  8247  00233C  A4D8               	btfss	status,2,c
  8248  00233E  D009               	goto	l6080
  8249                           
  8250                           ; BSR set to: 0
  8251  002340  0E00               	movlw	0
  8252  002342  6E27               	movwf	?__tdiv_to_l_,c
  8253  002344  0E00               	movlw	0
  8254  002346  6E28               	movwf	?__tdiv_to_l_+1,c
  8255  002348  0E00               	movlw	0
  8256  00234A  6E29               	movwf	?__tdiv_to_l_+2,c
  8257  00234C  0E00               	movlw	0
  8258  00234E  6E2A               	movwf	?__tdiv_to_l_+3,c
  8259                           
  8260                           ; BSR set to: 0
  8261  002350  0012               	return	
  8262  002352                     l6080:
  8263                           
  8264                           ; BSR set to: 0
  8265  002352  8E28               	bsf	__tdiv_to_l_@f1+1,7,c
  8266                           
  8267                           ; BSR set to: 0
  8268  002354  0EFF               	movlw	255
  8269  002356  1627               	andwf	__tdiv_to_l_@f1,f,c
  8270  002358  0EFF               	movlw	255
  8271  00235A  1628               	andwf	__tdiv_to_l_@f1+1,f,c
  8272  00235C  0E00               	movlw	0
  8273  00235E  1629               	andwf	__tdiv_to_l_@f1+2,f,c
  8274  002360  8E2B               	bsf	__tdiv_to_l_@f2+1,7,c
  8275                           
  8276                           ; BSR set to: 0
  8277  002362  0EFF               	movlw	255
  8278  002364  162A               	andwf	__tdiv_to_l_@f2,f,c
  8279  002366  0EFF               	movlw	255
  8280  002368  162B               	andwf	__tdiv_to_l_@f2+1,f,c
  8281  00236A  0E00               	movlw	0
  8282  00236C  162C               	andwf	__tdiv_to_l_@f2+2,f,c
  8283                           
  8284                           ; BSR set to: 0
  8285  00236E  0E00               	movlw	0
  8286  002370  0100               	movlb	0	; () banked
  8287  002372  6F80               	movwf	__tdiv_to_l_@quot& (0+255),b
  8288  002374  0E00               	movlw	0
  8289  002376  6F81               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  8290  002378  0E00               	movlw	0
  8291  00237A  6F82               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  8292  00237C  0E00               	movlw	0
  8293  00237E  6F83               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  8294                           
  8295                           ; BSR set to: 0
  8296  002380  0E7F               	movlw	127
  8297  002382  0100               	movlb	0	; () banked
  8298  002384  5F85               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  8299                           
  8300                           ; BSR set to: 0
  8301  002386  0100               	movlb	0	; () banked
  8302  002388  5184               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  8303  00238A  0F98               	addlw	152
  8304  00238C  0100               	movlb	0	; () banked
  8305  00238E  5F85               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  8306                           
  8307                           ; BSR set to: 0
  8308  002390  0E18               	movlw	24
  8309  002392  0100               	movlb	0	; () banked
  8310  002394  6F84               	movwf	__tdiv_to_l_@cntr& (0+255),b
  8311  002396                     l1138:
  8312                           
  8313                           ; BSR set to: 0
  8314  002396  0100               	movlb	0	; () banked
  8315  002398  90D8               	bcf	status,0,c
  8316  00239A  3780               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  8317  00239C  3781               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8318  00239E  3782               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8319  0023A0  3783               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8320                           
  8321                           ; BSR set to: 0
  8322  0023A2  502A               	movf	__tdiv_to_l_@f2,w,c
  8323  0023A4  5C27               	subwf	__tdiv_to_l_@f1,w,c
  8324  0023A6  502B               	movf	__tdiv_to_l_@f2+1,w,c
  8325  0023A8  5828               	subwfb	__tdiv_to_l_@f1+1,w,c
  8326  0023AA  502C               	movf	__tdiv_to_l_@f2+2,w,c
  8327  0023AC  5829               	subwfb	__tdiv_to_l_@f1+2,w,c
  8328  0023AE  A0D8               	btfss	status,0,c
  8329  0023B0  D008               	goto	l1139
  8330                           
  8331                           ; BSR set to: 0
  8332  0023B2  502A               	movf	__tdiv_to_l_@f2,w,c
  8333  0023B4  5E27               	subwf	__tdiv_to_l_@f1,f,c
  8334  0023B6  502B               	movf	__tdiv_to_l_@f2+1,w,c
  8335  0023B8  5A28               	subwfb	__tdiv_to_l_@f1+1,f,c
  8336  0023BA  502C               	movf	__tdiv_to_l_@f2+2,w,c
  8337  0023BC  5A29               	subwfb	__tdiv_to_l_@f1+2,f,c
  8338                           
  8339                           ; BSR set to: 0
  8340  0023BE  0100               	movlb	0	; () banked
  8341  0023C0  8180               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  8342  0023C2                     l1139:
  8343                           
  8344                           ; BSR set to: 0
  8345  0023C2  90D8               	bcf	status,0,c
  8346  0023C4  3627               	rlcf	__tdiv_to_l_@f1,f,c
  8347  0023C6  3628               	rlcf	__tdiv_to_l_@f1+1,f,c
  8348  0023C8  3629               	rlcf	__tdiv_to_l_@f1+2,f,c
  8349                           
  8350                           ; BSR set to: 0
  8351  0023CA  0100               	movlb	0	; () banked
  8352  0023CC  2F84               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  8353  0023CE  D7E3               	goto	l1138
  8354                           
  8355                           ; BSR set to: 0
  8356                           
  8357                           ; BSR set to: 0
  8358  0023D0  0100               	movlb	0	; () banked
  8359  0023D2  AF85               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  8360  0023D4  D019               	goto	l6114
  8361                           
  8362                           ; BSR set to: 0
  8363  0023D6  0100               	movlb	0	; () banked
  8364  0023D8  5185               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  8365  0023DA  0A80               	xorlw	128
  8366  0023DC  0F97               	addlw	151
  8367  0023DE  B0D8               	btfsc	status,0,c
  8368  0023E0  D009               	goto	l6110
  8369                           
  8370                           ; BSR set to: 0
  8371  0023E2  0E00               	movlw	0
  8372  0023E4  6E27               	movwf	?__tdiv_to_l_,c
  8373  0023E6  0E00               	movlw	0
  8374  0023E8  6E28               	movwf	?__tdiv_to_l_+1,c
  8375  0023EA  0E00               	movlw	0
  8376  0023EC  6E29               	movwf	?__tdiv_to_l_+2,c
  8377  0023EE  0E00               	movlw	0
  8378  0023F0  6E2A               	movwf	?__tdiv_to_l_+3,c
  8379                           
  8380                           ; BSR set to: 0
  8381  0023F2  0012               	return	
  8382  0023F4                     l6110:
  8383                           
  8384                           ; BSR set to: 0
  8385  0023F4  0100               	movlb	0	; () banked
  8386  0023F6  90D8               	bcf	status,0,c
  8387  0023F8  3383               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8388  0023FA  3382               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8389  0023FC  3381               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8390  0023FE  3380               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  8391                           
  8392                           ; BSR set to: 0
  8393  002400  0100               	movlb	0	; () banked
  8394  002402  3F85               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  8395  002404  D7F7               	goto	l6110
  8396                           
  8397                           ; BSR set to: 0
  8398  002406  D01A               	goto	l1145
  8399  002408                     l6114:
  8400                           
  8401                           ; BSR set to: 0
  8402  002408  0E17               	movlw	23
  8403  00240A  0100               	movlb	0	; () banked
  8404  00240C  6585               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  8405  00240E  D011               	goto	l6122
  8406                           
  8407                           ; BSR set to: 0
  8408  002410  0E00               	movlw	0
  8409  002412  6E27               	movwf	?__tdiv_to_l_,c
  8410  002414  0E00               	movlw	0
  8411  002416  6E28               	movwf	?__tdiv_to_l_+1,c
  8412  002418  0E00               	movlw	0
  8413  00241A  6E29               	movwf	?__tdiv_to_l_+2,c
  8414  00241C  0E00               	movlw	0
  8415  00241E  6E2A               	movwf	?__tdiv_to_l_+3,c
  8416                           
  8417                           ; BSR set to: 0
  8418  002420  0012               	return	
  8419  002422                     l6120:
  8420                           
  8421                           ; BSR set to: 0
  8422  002422  0100               	movlb	0	; () banked
  8423  002424  90D8               	bcf	status,0,c
  8424  002426  3780               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  8425  002428  3781               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8426  00242A  3782               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8427  00242C  3783               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8428  00242E  0100               	movlb	0	; () banked
  8429  002430  0785               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  8430  002432                     l6122:
  8431                           
  8432                           ; BSR set to: 0
  8433  002432  0100               	movlb	0	; () banked
  8434  002434  5185               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  8435  002436  0100               	movlb	0	; () banked
  8436  002438  A4D8               	btfss	status,2,c
  8437  00243A  D7F3               	goto	l6120
  8438  00243C                     l1145:
  8439                           
  8440                           ; BSR set to: 0
  8441  00243C  C080  F027         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  8442  002440  C081  F028         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  8443  002444  C082  F029         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  8444  002448  C083  F02A         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  8445                           
  8446                           ; BSR set to: 0
  8447  00244C  0012               	return		;funcret
  8448  00244E                     __end_of__tdiv_to_l_:
  8449                           	opt stack 0
  8450                           tblptru	equ	0xFF8
  8451                           tblptrh	equ	0xFF7
  8452                           tblptrl	equ	0xFF6
  8453                           tablat	equ	0xFF5
  8454                           prodh	equ	0xFF4
  8455                           prodl	equ	0xFF3
  8456                           postinc0	equ	0xFEE
  8457                           wreg	equ	0xFE8
  8458                           postdec1	equ	0xFE5
  8459                           fsr1l	equ	0xFE1
  8460                           indf2	equ	0xFDF
  8461                           postinc2	equ	0xFDE
  8462                           postdec2	equ	0xFDD
  8463                           fsr2h	equ	0xFDA
  8464                           fsr2l	equ	0xFD9
  8465                           status	equ	0xFD8
  8466                           
  8467 ;; *************** function __div_to_l_ *****************
  8468 ;; Defined at:
  8469 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  8470 ;; Parameters:    Size  Location     Type
  8471 ;;  f1              3   38[COMRAM] unsigned long 
  8472 ;;  f2              3   41[COMRAM] unsigned long 
  8473 ;; Auto vars:     Size  Location     Type
  8474 ;;  quot            4   44[COMRAM] unsigned long 
  8475 ;;  exp1            1   49[COMRAM] unsigned char 
  8476 ;;  cntr            1   48[COMRAM] unsigned char 
  8477 ;; Return value:  Size  Location     Type
  8478 ;;                  4   38[COMRAM] unsigned long 
  8479 ;; Registers used:
  8480 ;;		wreg, status,2, status,0
  8481 ;; Tracked objects:
  8482 ;;		On entry : 0/0
  8483 ;;		On exit  : 0/0
  8484 ;;		Unchanged: 0/0
  8485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8486 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8487 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8489 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8490 ;;Total ram usage:       12 bytes
  8491 ;; Hardware stack levels used:    1
  8492 ;; Hardware stack levels required when called:    3
  8493 ;; This function calls:
  8494 ;;		Nothing
  8495 ;; This function is called by:
  8496 ;;		_printf
  8497 ;; This function uses a non-reentrant model
  8498 ;;
  8499                           
  8500                           	psect	text22
  8501  0026DE                     __ptext22:
  8502                           	opt stack 0
  8503  0026DE                     __div_to_l_:
  8504                           	opt stack 25
  8505                           
  8506                           ; BSR set to: 0
  8507                           ;incstack = 0
  8508  0026DE  3429               	rlcf	__div_to_l_@f1+2,w,c
  8509  0026E0  342A               	rlcf	__div_to_l_@f1+3,w,c
  8510  0026E2  6E32               	movwf	__div_to_l_@exp1,c
  8511  0026E4  5032               	movf	__div_to_l_@exp1,w,c
  8512  0026E6  A4D8               	btfss	status,2,c
  8513  0026E8  D009               	goto	l6130
  8514  0026EA  0E00               	movlw	0
  8515  0026EC  6E27               	movwf	?__div_to_l_,c
  8516  0026EE  0E00               	movlw	0
  8517  0026F0  6E28               	movwf	?__div_to_l_+1,c
  8518  0026F2  0E00               	movlw	0
  8519  0026F4  6E29               	movwf	?__div_to_l_+2,c
  8520  0026F6  0E00               	movlw	0
  8521  0026F8  6E2A               	movwf	?__div_to_l_+3,c
  8522  0026FA  0012               	return	
  8523  0026FC                     l6130:
  8524  0026FC  342C               	rlcf	__div_to_l_@f2+2,w,c
  8525  0026FE  342D               	rlcf	__div_to_l_@f2+3,w,c
  8526  002700  6E31               	movwf	__div_to_l_@cntr,c
  8527  002702  5031               	movf	__div_to_l_@cntr,w,c
  8528  002704  A4D8               	btfss	status,2,c
  8529  002706  D009               	goto	l6136
  8530  002708  0E00               	movlw	0
  8531  00270A  6E27               	movwf	?__div_to_l_,c
  8532  00270C  0E00               	movlw	0
  8533  00270E  6E28               	movwf	?__div_to_l_+1,c
  8534  002710  0E00               	movlw	0
  8535  002712  6E29               	movwf	?__div_to_l_+2,c
  8536  002714  0E00               	movlw	0
  8537  002716  6E2A               	movwf	?__div_to_l_+3,c
  8538  002718  0012               	return	
  8539  00271A                     l6136:
  8540  00271A  8E29               	bsf	__div_to_l_@f1+2,7,c
  8541  00271C  0EFF               	movlw	255
  8542  00271E  1627               	andwf	__div_to_l_@f1,f,c
  8543  002720  0EFF               	movlw	255
  8544  002722  1628               	andwf	__div_to_l_@f1+1,f,c
  8545  002724  0EFF               	movlw	255
  8546  002726  1629               	andwf	__div_to_l_@f1+2,f,c
  8547  002728  0E00               	movlw	0
  8548  00272A  162A               	andwf	__div_to_l_@f1+3,f,c
  8549  00272C  8E2C               	bsf	__div_to_l_@f2+2,7,c
  8550  00272E  0EFF               	movlw	255
  8551  002730  162A               	andwf	__div_to_l_@f2,f,c
  8552  002732  0EFF               	movlw	255
  8553  002734  162B               	andwf	__div_to_l_@f2+1,f,c
  8554  002736  0EFF               	movlw	255
  8555  002738  162C               	andwf	__div_to_l_@f2+2,f,c
  8556  00273A  0E00               	movlw	0
  8557  00273C  162D               	andwf	__div_to_l_@f2+3,f,c
  8558  00273E  0E00               	movlw	0
  8559  002740  6E2D               	movwf	__div_to_l_@quot,c
  8560  002742  0E00               	movlw	0
  8561  002744  6E2E               	movwf	__div_to_l_@quot+1,c
  8562  002746  0E00               	movlw	0
  8563  002748  6E2F               	movwf	__div_to_l_@quot+2,c
  8564  00274A  0E00               	movlw	0
  8565  00274C  6E30               	movwf	__div_to_l_@quot+3,c
  8566  00274E  0E7F               	movlw	127
  8567  002750  5E32               	subwf	__div_to_l_@exp1,f,c
  8568  002752  5031               	movf	__div_to_l_@cntr,w,c
  8569  002754  0FA0               	addlw	160
  8570  002756  5E32               	subwf	__div_to_l_@exp1,f,c
  8571  002758  0E20               	movlw	32
  8572  00275A  6E31               	movwf	__div_to_l_@cntr,c
  8573  00275C                     l6150:
  8574  00275C  90D8               	bcf	status,0,c
  8575  00275E  362D               	rlcf	__div_to_l_@quot,f,c
  8576  002760  362E               	rlcf	__div_to_l_@quot+1,f,c
  8577  002762  362F               	rlcf	__div_to_l_@quot+2,f,c
  8578  002764  3630               	rlcf	__div_to_l_@quot+3,f,c
  8579  002766  502A               	movf	__div_to_l_@f2,w,c
  8580  002768  5C27               	subwf	__div_to_l_@f1,w,c
  8581  00276A  502B               	movf	__div_to_l_@f2+1,w,c
  8582  00276C  5828               	subwfb	__div_to_l_@f1+1,w,c
  8583  00276E  502C               	movf	__div_to_l_@f2+2,w,c
  8584  002770  5829               	subwfb	__div_to_l_@f1+2,w,c
  8585  002772  502D               	movf	__div_to_l_@f2+3,w,c
  8586  002774  582A               	subwfb	__div_to_l_@f1+3,w,c
  8587  002776  A0D8               	btfss	status,0,c
  8588  002778  D009               	goto	l6158
  8589  00277A  502A               	movf	__div_to_l_@f2,w,c
  8590  00277C  5E27               	subwf	__div_to_l_@f1,f,c
  8591  00277E  502B               	movf	__div_to_l_@f2+1,w,c
  8592  002780  5A28               	subwfb	__div_to_l_@f1+1,f,c
  8593  002782  502C               	movf	__div_to_l_@f2+2,w,c
  8594  002784  5A29               	subwfb	__div_to_l_@f1+2,f,c
  8595  002786  502D               	movf	__div_to_l_@f2+3,w,c
  8596  002788  5A2A               	subwfb	__div_to_l_@f1+3,f,c
  8597  00278A  802D               	bsf	__div_to_l_@quot,0,c
  8598  00278C                     l6158:
  8599  00278C  90D8               	bcf	status,0,c
  8600  00278E  3627               	rlcf	__div_to_l_@f1,f,c
  8601  002790  3628               	rlcf	__div_to_l_@f1+1,f,c
  8602  002792  3629               	rlcf	__div_to_l_@f1+2,f,c
  8603  002794  362A               	rlcf	__div_to_l_@f1+3,f,c
  8604  002796  2E31               	decfsz	__div_to_l_@cntr,f,c
  8605  002798  D7E1               	goto	l6150
  8606  00279A  AE32               	btfss	__div_to_l_@exp1,7,c
  8607  00279C  D016               	goto	l6174
  8608  00279E  5032               	movf	__div_to_l_@exp1,w,c
  8609  0027A0  0A80               	xorlw	128
  8610  0027A2  0F9F               	addlw	159
  8611  0027A4  B0D8               	btfsc	status,0,c
  8612  0027A6  D009               	goto	l6170
  8613  0027A8  0E00               	movlw	0
  8614  0027AA  6E27               	movwf	?__div_to_l_,c
  8615  0027AC  0E00               	movlw	0
  8616  0027AE  6E28               	movwf	?__div_to_l_+1,c
  8617  0027B0  0E00               	movlw	0
  8618  0027B2  6E29               	movwf	?__div_to_l_+2,c
  8619  0027B4  0E00               	movlw	0
  8620  0027B6  6E2A               	movwf	?__div_to_l_+3,c
  8621  0027B8  0012               	return	
  8622  0027BA                     l6170:
  8623  0027BA  90D8               	bcf	status,0,c
  8624  0027BC  3230               	rrcf	__div_to_l_@quot+3,f,c
  8625  0027BE  322F               	rrcf	__div_to_l_@quot+2,f,c
  8626  0027C0  322E               	rrcf	__div_to_l_@quot+1,f,c
  8627  0027C2  322D               	rrcf	__div_to_l_@quot,f,c
  8628  0027C4  3E32               	incfsz	__div_to_l_@exp1,f,c
  8629  0027C6  D7F9               	goto	l6170
  8630  0027C8  D015               	goto	l1041
  8631  0027CA                     l6174:
  8632  0027CA  0E1F               	movlw	31
  8633  0027CC  6432               	cpfsgt	__div_to_l_@exp1,c
  8634  0027CE  D00F               	goto	l6182
  8635  0027D0  0E00               	movlw	0
  8636  0027D2  6E27               	movwf	?__div_to_l_,c
  8637  0027D4  0E00               	movlw	0
  8638  0027D6  6E28               	movwf	?__div_to_l_+1,c
  8639  0027D8  0E00               	movlw	0
  8640  0027DA  6E29               	movwf	?__div_to_l_+2,c
  8641  0027DC  0E00               	movlw	0
  8642  0027DE  6E2A               	movwf	?__div_to_l_+3,c
  8643  0027E0  0012               	return	
  8644  0027E2                     l6180:
  8645  0027E2  90D8               	bcf	status,0,c
  8646  0027E4  362D               	rlcf	__div_to_l_@quot,f,c
  8647  0027E6  362E               	rlcf	__div_to_l_@quot+1,f,c
  8648  0027E8  362F               	rlcf	__div_to_l_@quot+2,f,c
  8649  0027EA  3630               	rlcf	__div_to_l_@quot+3,f,c
  8650  0027EC  0632               	decf	__div_to_l_@exp1,f,c
  8651  0027EE                     l6182:
  8652  0027EE  5032               	movf	__div_to_l_@exp1,w,c
  8653  0027F0  A4D8               	btfss	status,2,c
  8654  0027F2  D7F7               	goto	l6180
  8655  0027F4                     l1041:
  8656  0027F4  C02D  F027         	movff	__div_to_l_@quot,?__div_to_l_
  8657  0027F8  C02E  F028         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  8658  0027FC  C02F  F029         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  8659  002800  C030  F02A         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  8660  002804  0012               	return		;funcret
  8661  002806                     __end_of__div_to_l_:
  8662                           	opt stack 0
  8663                           tblptru	equ	0xFF8
  8664                           tblptrh	equ	0xFF7
  8665                           tblptrl	equ	0xFF6
  8666                           tablat	equ	0xFF5
  8667                           prodh	equ	0xFF4
  8668                           prodl	equ	0xFF3
  8669                           postinc0	equ	0xFEE
  8670                           wreg	equ	0xFE8
  8671                           postdec1	equ	0xFE5
  8672                           fsr1l	equ	0xFE1
  8673                           indf2	equ	0xFDF
  8674                           postinc2	equ	0xFDE
  8675                           postdec2	equ	0xFDD
  8676                           fsr2h	equ	0xFDA
  8677                           fsr2l	equ	0xFD9
  8678                           status	equ	0xFD8
  8679                           
  8680 ;; *************** function ___lltoft *****************
  8681 ;; Defined at:
  8682 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  8683 ;; Parameters:    Size  Location     Type
  8684 ;;  c               4   46[COMRAM] unsigned long 
  8685 ;; Auto vars:     Size  Location     Type
  8686 ;;  exp             1   50[COMRAM] unsigned char 
  8687 ;; Return value:  Size  Location     Type
  8688 ;;                  3   46[COMRAM] float 
  8689 ;; Registers used:
  8690 ;;		wreg, status,2, status,0, cstack
  8691 ;; Tracked objects:
  8692 ;;		On entry : 0/0
  8693 ;;		On exit  : 0/0
  8694 ;;		Unchanged: 0/0
  8695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8696 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8697 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8698 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8699 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8700 ;;Total ram usage:        9 bytes
  8701 ;; Hardware stack levels used:    1
  8702 ;; Hardware stack levels required when called:    4
  8703 ;; This function calls:
  8704 ;;		___ftpack
  8705 ;; This function is called by:
  8706 ;;		_printf
  8707 ;; This function uses a non-reentrant model
  8708 ;;
  8709                           
  8710                           	psect	text23
  8711  00358E                     __ptext23:
  8712                           	opt stack 0
  8713  00358E                     ___lltoft:
  8714                           	opt stack 24
  8715                           
  8716                           ;incstack = 0
  8717  00358E  0E8E               	movlw	142
  8718  003590  6E33               	movwf	___lltoft@exp,c
  8719  003592  D006               	goto	l6256
  8720  003594                     l6254:
  8721  003594  90D8               	bcf	status,0,c
  8722  003596  3232               	rrcf	___lltoft@c+3,f,c
  8723  003598  3231               	rrcf	___lltoft@c+2,f,c
  8724  00359A  3230               	rrcf	___lltoft@c+1,f,c
  8725  00359C  322F               	rrcf	___lltoft@c,f,c
  8726  00359E  2A33               	incf	___lltoft@exp,f,c
  8727  0035A0                     l6256:
  8728  0035A0  0E00               	movlw	0
  8729  0035A2  142F               	andwf	___lltoft@c,w,c
  8730  0035A4  0100               	movlb	0	; () banked
  8731  0035A6  6F80               	movwf	??___lltoft& (0+255),b
  8732  0035A8  0E00               	movlw	0
  8733  0035AA  1430               	andwf	___lltoft@c+1,w,c
  8734  0035AC  0100               	movlb	0	; () banked
  8735  0035AE  6F81               	movwf	(??___lltoft+1)& (0+255),b
  8736  0035B0  0E00               	movlw	0
  8737  0035B2  1431               	andwf	___lltoft@c+2,w,c
  8738  0035B4  0100               	movlb	0	; () banked
  8739  0035B6  6F82               	movwf	(??___lltoft+2)& (0+255),b
  8740  0035B8  0EFF               	movlw	255
  8741  0035BA  1432               	andwf	___lltoft@c+3,w,c
  8742  0035BC  0100               	movlb	0	; () banked
  8743  0035BE  6F83               	movwf	(??___lltoft+3)& (0+255),b
  8744  0035C0  0100               	movlb	0	; () banked
  8745  0035C2  5180               	movf	??___lltoft& (0+255),w,b
  8746  0035C4  0100               	movlb	0	; () banked
  8747  0035C6  1181               	iorwf	(??___lltoft+1)& (0+255),w,b
  8748  0035C8  0100               	movlb	0	; () banked
  8749  0035CA  1182               	iorwf	(??___lltoft+2)& (0+255),w,b
  8750  0035CC  0100               	movlb	0	; () banked
  8751  0035CE  1183               	iorwf	(??___lltoft+3)& (0+255),w,b
  8752  0035D0  A4D8               	btfss	status,2,c
  8753  0035D2  D7E0               	goto	l6254
  8754                           
  8755                           ; BSR set to: 0
  8756                           
  8757                           ; BSR set to: 0
  8758  0035D4  C02F  F027         	movff	___lltoft@c,___ftpack@arg
  8759  0035D8  C030  F028         	movff	___lltoft@c+1,___ftpack@arg+1
  8760  0035DC  C031  F029         	movff	___lltoft@c+2,___ftpack@arg+2
  8761  0035E0  C033  F02A         	movff	___lltoft@exp,___ftpack@exp
  8762  0035E4  0E00               	movlw	0
  8763  0035E6  6E2B               	movwf	___ftpack@sign,c
  8764  0035E8  ECDC  F018         	call	___ftpack	;wreg free
  8765  0035EC  C027  F02F         	movff	?___ftpack,?___lltoft
  8766  0035F0  C028  F030         	movff	?___ftpack+1,?___lltoft+1
  8767  0035F4  C029  F031         	movff	?___ftpack+2,?___lltoft+2
  8768  0035F8  0012               	return	
  8769  0035FA                     __end_of___lltoft:
  8770                           	opt stack 0
  8771                           tblptru	equ	0xFF8
  8772                           tblptrh	equ	0xFF7
  8773                           tblptrl	equ	0xFF6
  8774                           tablat	equ	0xFF5
  8775                           prodh	equ	0xFF4
  8776                           prodl	equ	0xFF3
  8777                           postinc0	equ	0xFEE
  8778                           wreg	equ	0xFE8
  8779                           postdec1	equ	0xFE5
  8780                           fsr1l	equ	0xFE1
  8781                           indf2	equ	0xFDF
  8782                           postinc2	equ	0xFDE
  8783                           postdec2	equ	0xFDD
  8784                           fsr2h	equ	0xFDA
  8785                           fsr2l	equ	0xFD9
  8786                           status	equ	0xFD8
  8787                           
  8788 ;; *************** function ___llmod *****************
  8789 ;; Defined at:
  8790 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  8791 ;; Parameters:    Size  Location     Type
  8792 ;;  dividend        4    0[BANK0 ] unsigned long 
  8793 ;;  divisor         4    4[BANK0 ] unsigned long 
  8794 ;; Auto vars:     Size  Location     Type
  8795 ;;  counter         1    8[BANK0 ] unsigned char 
  8796 ;; Return value:  Size  Location     Type
  8797 ;;                  4    0[BANK0 ] unsigned long 
  8798 ;; Registers used:
  8799 ;;		wreg, status,2, status,0
  8800 ;; Tracked objects:
  8801 ;;		On entry : 0/0
  8802 ;;		On exit  : 0/0
  8803 ;;		Unchanged: 0/0
  8804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8805 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8806 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8808 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8809 ;;Total ram usage:        9 bytes
  8810 ;; Hardware stack levels used:    1
  8811 ;; Hardware stack levels required when called:    3
  8812 ;; This function calls:
  8813 ;;		Nothing
  8814 ;; This function is called by:
  8815 ;;		_printf
  8816 ;; This function uses a non-reentrant model
  8817 ;;
  8818                           
  8819                           	psect	text24
  8820  003302                     __ptext24:
  8821                           	opt stack 0
  8822  003302                     ___llmod:
  8823                           	opt stack 25
  8824                           
  8825                           ;incstack = 0
  8826  003302  0100               	movlb	0	; () banked
  8827  003304  5184               	movf	___llmod@divisor& (0+255),w,b
  8828  003306  0100               	movlb	0	; () banked
  8829  003308  1185               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  8830  00330A  0100               	movlb	0	; () banked
  8831  00330C  1186               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  8832  00330E  0100               	movlb	0	; () banked
  8833  003310  1187               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  8834  003312  B4D8               	btfsc	status,2,c
  8835  003314  D03A               	goto	l1230
  8836                           
  8837                           ; BSR set to: 0
  8838  003316  0E01               	movlw	1
  8839  003318  0100               	movlb	0	; () banked
  8840  00331A  6F88               	movwf	___llmod@counter& (0+255),b
  8841  00331C  D008               	goto	l6242
  8842  00331E                     l6240:
  8843                           
  8844                           ; BSR set to: 0
  8845  00331E  0100               	movlb	0	; () banked
  8846  003320  90D8               	bcf	status,0,c
  8847  003322  3784               	rlcf	___llmod@divisor& (0+255),f,b
  8848  003324  3785               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  8849  003326  3786               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  8850  003328  3787               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  8851  00332A  0100               	movlb	0	; () banked
  8852  00332C  2B88               	incf	___llmod@counter& (0+255),f,b
  8853  00332E                     l6242:
  8854                           
  8855                           ; BSR set to: 0
  8856  00332E  0100               	movlb	0	; () banked
  8857  003330  AF87               	btfss	(___llmod@divisor+3)& (0+255),7,b
  8858  003332  D7F5               	goto	l6240
  8859  003334                     l6244:
  8860                           
  8861                           ; BSR set to: 0
  8862  003334  0100               	movlb	0	; () banked
  8863  003336  5184               	movf	___llmod@divisor& (0+255),w,b
  8864  003338  0100               	movlb	0	; () banked
  8865  00333A  5D80               	subwf	___llmod@dividend& (0+255),w,b
  8866  00333C  0100               	movlb	0	; () banked
  8867  00333E  5185               	movf	(___llmod@divisor+1)& (0+255),w,b
  8868  003340  0100               	movlb	0	; () banked
  8869  003342  5981               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  8870  003344  0100               	movlb	0	; () banked
  8871  003346  5186               	movf	(___llmod@divisor+2)& (0+255),w,b
  8872  003348  0100               	movlb	0	; () banked
  8873  00334A  5982               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  8874  00334C  0100               	movlb	0	; () banked
  8875  00334E  5187               	movf	(___llmod@divisor+3)& (0+255),w,b
  8876  003350  0100               	movlb	0	; () banked
  8877  003352  5983               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  8878  003354  A0D8               	btfss	status,0,c
  8879  003356  D010               	goto	l6248
  8880                           
  8881                           ; BSR set to: 0
  8882  003358  0100               	movlb	0	; () banked
  8883  00335A  5184               	movf	___llmod@divisor& (0+255),w,b
  8884  00335C  0100               	movlb	0	; () banked
  8885  00335E  5F80               	subwf	___llmod@dividend& (0+255),f,b
  8886  003360  0100               	movlb	0	; () banked
  8887  003362  5185               	movf	(___llmod@divisor+1)& (0+255),w,b
  8888  003364  0100               	movlb	0	; () banked
  8889  003366  5B81               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  8890  003368  0100               	movlb	0	; () banked
  8891  00336A  5186               	movf	(___llmod@divisor+2)& (0+255),w,b
  8892  00336C  0100               	movlb	0	; () banked
  8893  00336E  5B82               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  8894  003370  0100               	movlb	0	; () banked
  8895  003372  5187               	movf	(___llmod@divisor+3)& (0+255),w,b
  8896  003374  0100               	movlb	0	; () banked
  8897  003376  5B83               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  8898  003378                     l6248:
  8899                           
  8900                           ; BSR set to: 0
  8901  003378  0100               	movlb	0	; () banked
  8902  00337A  90D8               	bcf	status,0,c
  8903  00337C  3387               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  8904  00337E  3386               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  8905  003380  3385               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  8906  003382  3384               	rrcf	___llmod@divisor& (0+255),f,b
  8907                           
  8908                           ; BSR set to: 0
  8909  003384  0100               	movlb	0	; () banked
  8910  003386  2F88               	decfsz	___llmod@counter& (0+255),f,b
  8911  003388  D7D5               	goto	l6244
  8912  00338A                     l1230:
  8913                           
  8914                           ; BSR set to: 0
  8915  00338A  C080  F080         	movff	___llmod@dividend,?___llmod
  8916  00338E  C081  F081         	movff	___llmod@dividend+1,?___llmod+1
  8917  003392  C082  F082         	movff	___llmod@dividend+2,?___llmod+2
  8918  003396  C083  F083         	movff	___llmod@dividend+3,?___llmod+3
  8919                           
  8920                           ; BSR set to: 0
  8921  00339A  0012               	return		;funcret
  8922  00339C                     __end_of___llmod:
  8923                           	opt stack 0
  8924                           tblptru	equ	0xFF8
  8925                           tblptrh	equ	0xFF7
  8926                           tblptrl	equ	0xFF6
  8927                           tablat	equ	0xFF5
  8928                           prodh	equ	0xFF4
  8929                           prodl	equ	0xFF3
  8930                           postinc0	equ	0xFEE
  8931                           wreg	equ	0xFE8
  8932                           postdec1	equ	0xFE5
  8933                           fsr1l	equ	0xFE1
  8934                           indf2	equ	0xFDF
  8935                           postinc2	equ	0xFDE
  8936                           postdec2	equ	0xFDD
  8937                           fsr2h	equ	0xFDA
  8938                           fsr2l	equ	0xFD9
  8939                           status	equ	0xFD8
  8940                           
  8941 ;; *************** function ___lldiv *****************
  8942 ;; Defined at:
  8943 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  8944 ;; Parameters:    Size  Location     Type
  8945 ;;  dividend        4   38[COMRAM] unsigned long 
  8946 ;;  divisor         4   42[COMRAM] unsigned long 
  8947 ;; Auto vars:     Size  Location     Type
  8948 ;;  quotient        4   46[COMRAM] unsigned long 
  8949 ;;  counter         1   50[COMRAM] unsigned char 
  8950 ;; Return value:  Size  Location     Type
  8951 ;;                  4   38[COMRAM] unsigned long 
  8952 ;; Registers used:
  8953 ;;		wreg, status,2, status,0
  8954 ;; Tracked objects:
  8955 ;;		On entry : 0/0
  8956 ;;		On exit  : 0/0
  8957 ;;		Unchanged: 0/0
  8958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8959 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8960 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8962 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8963 ;;Total ram usage:       13 bytes
  8964 ;; Hardware stack levels used:    1
  8965 ;; Hardware stack levels required when called:    3
  8966 ;; This function calls:
  8967 ;;		Nothing
  8968 ;; This function is called by:
  8969 ;;		_printf
  8970 ;;		_I2C_Master_Init
  8971 ;; This function uses a non-reentrant model
  8972 ;;
  8973                           
  8974                           	psect	text25
  8975  00342C                     __ptext25:
  8976                           	opt stack 0
  8977  00342C                     ___lldiv:
  8978                           	opt stack 25
  8979                           
  8980                           ; BSR set to: 0
  8981                           ;incstack = 0
  8982  00342C  0E00               	movlw	0
  8983  00342E  6E2F               	movwf	___lldiv@quotient,c
  8984  003430  0E00               	movlw	0
  8985  003432  6E30               	movwf	___lldiv@quotient+1,c
  8986  003434  0E00               	movlw	0
  8987  003436  6E31               	movwf	___lldiv@quotient+2,c
  8988  003438  0E00               	movlw	0
  8989  00343A  6E32               	movwf	___lldiv@quotient+3,c
  8990  00343C  502B               	movf	___lldiv@divisor,w,c
  8991  00343E  102C               	iorwf	___lldiv@divisor+1,w,c
  8992  003440  102D               	iorwf	___lldiv@divisor+2,w,c
  8993  003442  102E               	iorwf	___lldiv@divisor+3,w,c
  8994  003444  B4D8               	btfsc	status,2,c
  8995  003446  D02A               	goto	l1220
  8996  003448  0E01               	movlw	1
  8997  00344A  6E33               	movwf	___lldiv@counter,c
  8998  00344C  D006               	goto	l6222
  8999  00344E                     l6220:
  9000  00344E  90D8               	bcf	status,0,c
  9001  003450  362B               	rlcf	___lldiv@divisor,f,c
  9002  003452  362C               	rlcf	___lldiv@divisor+1,f,c
  9003  003454  362D               	rlcf	___lldiv@divisor+2,f,c
  9004  003456  362E               	rlcf	___lldiv@divisor+3,f,c
  9005  003458  2A33               	incf	___lldiv@counter,f,c
  9006  00345A                     l6222:
  9007  00345A  AE2E               	btfss	___lldiv@divisor+3,7,c
  9008  00345C  D7F8               	goto	l6220
  9009  00345E                     l6224:
  9010  00345E  90D8               	bcf	status,0,c
  9011  003460  362F               	rlcf	___lldiv@quotient,f,c
  9012  003462  3630               	rlcf	___lldiv@quotient+1,f,c
  9013  003464  3631               	rlcf	___lldiv@quotient+2,f,c
  9014  003466  3632               	rlcf	___lldiv@quotient+3,f,c
  9015  003468  502B               	movf	___lldiv@divisor,w,c
  9016  00346A  5C27               	subwf	___lldiv@dividend,w,c
  9017  00346C  502C               	movf	___lldiv@divisor+1,w,c
  9018  00346E  5828               	subwfb	___lldiv@dividend+1,w,c
  9019  003470  502D               	movf	___lldiv@divisor+2,w,c
  9020  003472  5829               	subwfb	___lldiv@dividend+2,w,c
  9021  003474  502E               	movf	___lldiv@divisor+3,w,c
  9022  003476  582A               	subwfb	___lldiv@dividend+3,w,c
  9023  003478  A0D8               	btfss	status,0,c
  9024  00347A  D009               	goto	l6232
  9025  00347C  502B               	movf	___lldiv@divisor,w,c
  9026  00347E  5E27               	subwf	___lldiv@dividend,f,c
  9027  003480  502C               	movf	___lldiv@divisor+1,w,c
  9028  003482  5A28               	subwfb	___lldiv@dividend+1,f,c
  9029  003484  502D               	movf	___lldiv@divisor+2,w,c
  9030  003486  5A29               	subwfb	___lldiv@dividend+2,f,c
  9031  003488  502E               	movf	___lldiv@divisor+3,w,c
  9032  00348A  5A2A               	subwfb	___lldiv@dividend+3,f,c
  9033  00348C  802F               	bsf	___lldiv@quotient,0,c
  9034  00348E                     l6232:
  9035  00348E  90D8               	bcf	status,0,c
  9036  003490  322E               	rrcf	___lldiv@divisor+3,f,c
  9037  003492  322D               	rrcf	___lldiv@divisor+2,f,c
  9038  003494  322C               	rrcf	___lldiv@divisor+1,f,c
  9039  003496  322B               	rrcf	___lldiv@divisor,f,c
  9040  003498  2E33               	decfsz	___lldiv@counter,f,c
  9041  00349A  D7E1               	goto	l6224
  9042  00349C                     l1220:
  9043  00349C  C02F  F027         	movff	___lldiv@quotient,?___lldiv
  9044  0034A0  C030  F028         	movff	___lldiv@quotient+1,?___lldiv+1
  9045  0034A4  C031  F029         	movff	___lldiv@quotient+2,?___lldiv+2
  9046  0034A8  C032  F02A         	movff	___lldiv@quotient+3,?___lldiv+3
  9047  0034AC  0012               	return		;funcret
  9048  0034AE                     __end_of___lldiv:
  9049                           	opt stack 0
  9050                           tblptru	equ	0xFF8
  9051                           tblptrh	equ	0xFF7
  9052                           tblptrl	equ	0xFF6
  9053                           tablat	equ	0xFF5
  9054                           prodh	equ	0xFF4
  9055                           prodl	equ	0xFF3
  9056                           postinc0	equ	0xFEE
  9057                           wreg	equ	0xFE8
  9058                           postdec1	equ	0xFE5
  9059                           fsr1l	equ	0xFE1
  9060                           indf2	equ	0xFDF
  9061                           postinc2	equ	0xFDE
  9062                           postdec2	equ	0xFDD
  9063                           fsr2h	equ	0xFDA
  9064                           fsr2l	equ	0xFD9
  9065                           status	equ	0xFD8
  9066                           
  9067 ;; *************** function ___ftsub *****************
  9068 ;; Defined at:
  9069 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  9070 ;; Parameters:    Size  Location     Type
  9071 ;;  f1              3   58[BANK0 ] float 
  9072 ;;  f2              3   61[BANK0 ] float 
  9073 ;; Auto vars:     Size  Location     Type
  9074 ;;		None
  9075 ;; Return value:  Size  Location     Type
  9076 ;;                  3   58[BANK0 ] float 
  9077 ;; Registers used:
  9078 ;;		wreg, status,2, status,0, cstack
  9079 ;; Tracked objects:
  9080 ;;		On entry : 0/0
  9081 ;;		On exit  : 0/0
  9082 ;;		Unchanged: 0/0
  9083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9084 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9087 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9088 ;;Total ram usage:        6 bytes
  9089 ;; Hardware stack levels used:    1
  9090 ;; Hardware stack levels required when called:    5
  9091 ;; This function calls:
  9092 ;;		___ftadd
  9093 ;; This function is called by:
  9094 ;;		_sortBattery
  9095 ;;		_printf
  9096 ;; This function uses a non-reentrant model
  9097 ;;
  9098                           
  9099                           	psect	text26
  9100  0036C6                     __ptext26:
  9101                           	opt stack 0
  9102  0036C6                     ___ftsub:
  9103                           	opt stack 23
  9104                           
  9105                           ;incstack = 0
  9106  0036C6  0100               	movlb	0	; () banked
  9107  0036C8  51BD               	movf	___ftsub@f2& (0+255),w,b
  9108  0036CA  0100               	movlb	0	; () banked
  9109  0036CC  11BE               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  9110  0036CE  0100               	movlb	0	; () banked
  9111  0036D0  11BF               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  9112  0036D2  B4D8               	btfsc	status,2,c
  9113  0036D4  D009               	goto	l6188
  9114                           
  9115                           ; BSR set to: 0
  9116  0036D6  0E00               	movlw	0
  9117  0036D8  0100               	movlb	0	; () banked
  9118  0036DA  1BBD               	xorwf	___ftsub@f2& (0+255),f,b
  9119  0036DC  0E00               	movlw	0
  9120  0036DE  0100               	movlb	0	; () banked
  9121  0036E0  1BBE               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  9122  0036E2  0E80               	movlw	128
  9123  0036E4  0100               	movlb	0	; () banked
  9124  0036E6  1BBF               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  9125  0036E8                     l6188:
  9126                           
  9127                           ; BSR set to: 0
  9128  0036E8  C0BA  F0AE         	movff	___ftsub@f1,___ftadd@f1
  9129  0036EC  C0BB  F0AF         	movff	___ftsub@f1+1,___ftadd@f1+1
  9130  0036F0  C0BC  F0B0         	movff	___ftsub@f1+2,___ftadd@f1+2
  9131  0036F4  C0BD  F0B1         	movff	___ftsub@f2,___ftadd@f2
  9132  0036F8  C0BE  F0B2         	movff	___ftsub@f2+1,___ftadd@f2+1
  9133  0036FC  C0BF  F0B3         	movff	___ftsub@f2+2,___ftadd@f2+2
  9134  003700  ECE7  F00E         	call	___ftadd	;wreg free
  9135  003704  C0AE  F0BA         	movff	?___ftadd,?___ftsub
  9136  003708  C0AF  F0BB         	movff	?___ftadd+1,?___ftsub+1
  9137  00370C  C0B0  F0BC         	movff	?___ftadd+2,?___ftsub+2
  9138  003710  0012               	return	
  9139  003712                     __end_of___ftsub:
  9140                           	opt stack 0
  9141                           tblptru	equ	0xFF8
  9142                           tblptrh	equ	0xFF7
  9143                           tblptrl	equ	0xFF6
  9144                           tablat	equ	0xFF5
  9145                           prodh	equ	0xFF4
  9146                           prodl	equ	0xFF3
  9147                           postinc0	equ	0xFEE
  9148                           wreg	equ	0xFE8
  9149                           postdec1	equ	0xFE5
  9150                           fsr1l	equ	0xFE1
  9151                           indf2	equ	0xFDF
  9152                           postinc2	equ	0xFDE
  9153                           postdec2	equ	0xFDD
  9154                           fsr2h	equ	0xFDA
  9155                           fsr2l	equ	0xFD9
  9156                           status	equ	0xFD8
  9157                           
  9158 ;; *************** function ___ftneg *****************
  9159 ;; Defined at:
  9160 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  9161 ;; Parameters:    Size  Location     Type
  9162 ;;  f1              3   38[COMRAM] float 
  9163 ;; Auto vars:     Size  Location     Type
  9164 ;;		None
  9165 ;; Return value:  Size  Location     Type
  9166 ;;                  3   38[COMRAM] float 
  9167 ;; Registers used:
  9168 ;;		wreg, status,2, status,0
  9169 ;; Tracked objects:
  9170 ;;		On entry : 0/0
  9171 ;;		On exit  : 0/0
  9172 ;;		Unchanged: 0/0
  9173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9174 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9177 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9178 ;;Total ram usage:        3 bytes
  9179 ;; Hardware stack levels used:    1
  9180 ;; Hardware stack levels required when called:    3
  9181 ;; This function calls:
  9182 ;;		Nothing
  9183 ;; This function is called by:
  9184 ;;		_printf
  9185 ;; This function uses a non-reentrant model
  9186 ;;
  9187                           
  9188                           	psect	text27
  9189  003A9E                     __ptext27:
  9190                           	opt stack 0
  9191  003A9E                     ___ftneg:
  9192                           	opt stack 25
  9193                           
  9194                           ;incstack = 0
  9195  003A9E  5027               	movf	___ftneg@f1,w,c
  9196  003AA0  1028               	iorwf	___ftneg@f1+1,w,c
  9197  003AA2  1029               	iorwf	___ftneg@f1+2,w,c
  9198  003AA4  B4D8               	btfsc	status,2,c
  9199  003AA6  D006               	goto	l1170
  9200  003AA8  0E00               	movlw	0
  9201  003AAA  1A27               	xorwf	___ftneg@f1,f,c
  9202  003AAC  0E00               	movlw	0
  9203  003AAE  1A28               	xorwf	___ftneg@f1+1,f,c
  9204  003AB0  0E80               	movlw	128
  9205  003AB2  1A29               	xorwf	___ftneg@f1+2,f,c
  9206  003AB4                     l1170:
  9207  003AB4  C027  F027         	movff	___ftneg@f1,?___ftneg
  9208  003AB8  C028  F028         	movff	___ftneg@f1+1,?___ftneg+1
  9209  003ABC  C029  F029         	movff	___ftneg@f1+2,?___ftneg+2
  9210  003AC0  0012               	return		;funcret
  9211  003AC2                     __end_of___ftneg:
  9212                           	opt stack 0
  9213                           tblptru	equ	0xFF8
  9214                           tblptrh	equ	0xFF7
  9215                           tblptrl	equ	0xFF6
  9216                           tablat	equ	0xFF5
  9217                           prodh	equ	0xFF4
  9218                           prodl	equ	0xFF3
  9219                           postinc0	equ	0xFEE
  9220                           wreg	equ	0xFE8
  9221                           postdec1	equ	0xFE5
  9222                           fsr1l	equ	0xFE1
  9223                           indf2	equ	0xFDF
  9224                           postinc2	equ	0xFDE
  9225                           postdec2	equ	0xFDD
  9226                           fsr2h	equ	0xFDA
  9227                           fsr2l	equ	0xFD9
  9228                           status	equ	0xFD8
  9229                           
  9230 ;; *************** function ___ftge *****************
  9231 ;; Defined at:
  9232 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  9233 ;; Parameters:    Size  Location     Type
  9234 ;;  ff1             3    0[BANK0 ] float 
  9235 ;;  ff2             3    3[BANK0 ] float 
  9236 ;; Auto vars:     Size  Location     Type
  9237 ;;		None
  9238 ;; Return value:  Size  Location     Type
  9239 ;;		None               void
  9240 ;; Registers used:
  9241 ;;		wreg, status,2, status,0
  9242 ;; Tracked objects:
  9243 ;;		On entry : 0/0
  9244 ;;		On exit  : 0/0
  9245 ;;		Unchanged: 0/0
  9246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9247 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9249 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9250 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9251 ;;Total ram usage:        9 bytes
  9252 ;; Hardware stack levels used:    1
  9253 ;; Hardware stack levels required when called:    3
  9254 ;; This function calls:
  9255 ;;		Nothing
  9256 ;; This function is called by:
  9257 ;;		_sortBattery
  9258 ;;		_printf
  9259 ;; This function uses a non-reentrant model
  9260 ;;
  9261                           
  9262                           	psect	text28
  9263  003028                     __ptext28:
  9264                           	opt stack 0
  9265  003028                     ___ftge:
  9266                           	opt stack 25
  9267                           
  9268                           ;incstack = 0
  9269  003028  0100               	movlb	0	; () banked
  9270  00302A  AF82               	btfss	(___ftge@ff1+2)& (0+255),7,b
  9271  00302C  D01D               	goto	l6196
  9272                           
  9273                           ; BSR set to: 0
  9274  00302E  C080  F086         	movff	___ftge@ff1,??___ftge
  9275  003032  C081  F087         	movff	___ftge@ff1+1,??___ftge+1
  9276  003036  C082  F088         	movff	___ftge@ff1+2,??___ftge+2
  9277  00303A  0100               	movlb	0	; () banked
  9278  00303C  1F86               	comf	??___ftge& (0+255),f,b
  9279  00303E  1F87               	comf	(??___ftge+1)& (0+255),f,b
  9280  003040  1F88               	comf	(??___ftge+2)& (0+255),f,b
  9281  003042  2B86               	incf	??___ftge& (0+255),f,b
  9282  003044  0E00               	movlw	0
  9283  003046  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  9284  003048  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  9285  00304A  0E00               	movlw	0
  9286  00304C  0100               	movlb	0	; () banked
  9287  00304E  2586               	addwf	??___ftge& (0+255),w,b
  9288  003050  0100               	movlb	0	; () banked
  9289  003052  6F80               	movwf	___ftge@ff1& (0+255),b
  9290  003054  0E00               	movlw	0
  9291  003056  0100               	movlb	0	; () banked
  9292  003058  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  9293  00305A  0100               	movlb	0	; () banked
  9294  00305C  6F81               	movwf	(___ftge@ff1+1)& (0+255),b
  9295  00305E  0E80               	movlw	128
  9296  003060  0100               	movlb	0	; () banked
  9297  003062  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  9298  003064  0100               	movlb	0	; () banked
  9299  003066  6F82               	movwf	(___ftge@ff1+2)& (0+255),b
  9300  003068                     l6196:
  9301                           
  9302                           ; BSR set to: 0
  9303  003068  0100               	movlb	0	; () banked
  9304  00306A  AF85               	btfss	(___ftge@ff2+2)& (0+255),7,b
  9305  00306C  D01D               	goto	l6200
  9306                           
  9307                           ; BSR set to: 0
  9308  00306E  C083  F086         	movff	___ftge@ff2,??___ftge
  9309  003072  C084  F087         	movff	___ftge@ff2+1,??___ftge+1
  9310  003076  C085  F088         	movff	___ftge@ff2+2,??___ftge+2
  9311  00307A  0100               	movlb	0	; () banked
  9312  00307C  1F86               	comf	??___ftge& (0+255),f,b
  9313  00307E  1F87               	comf	(??___ftge+1)& (0+255),f,b
  9314  003080  1F88               	comf	(??___ftge+2)& (0+255),f,b
  9315  003082  2B86               	incf	??___ftge& (0+255),f,b
  9316  003084  0E00               	movlw	0
  9317  003086  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  9318  003088  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  9319  00308A  0E00               	movlw	0
  9320  00308C  0100               	movlb	0	; () banked
  9321  00308E  2586               	addwf	??___ftge& (0+255),w,b
  9322  003090  0100               	movlb	0	; () banked
  9323  003092  6F83               	movwf	___ftge@ff2& (0+255),b
  9324  003094  0E00               	movlw	0
  9325  003096  0100               	movlb	0	; () banked
  9326  003098  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  9327  00309A  0100               	movlb	0	; () banked
  9328  00309C  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  9329  00309E  0E80               	movlw	128
  9330  0030A0  0100               	movlb	0	; () banked
  9331  0030A2  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  9332  0030A4  0100               	movlb	0	; () banked
  9333  0030A6  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  9334  0030A8                     l6200:
  9335                           
  9336                           ; BSR set to: 0
  9337  0030A8  0E00               	movlw	0
  9338  0030AA  0100               	movlb	0	; () banked
  9339  0030AC  1B80               	xorwf	___ftge@ff1& (0+255),f,b
  9340  0030AE  0E00               	movlw	0
  9341  0030B0  0100               	movlb	0	; () banked
  9342  0030B2  1B81               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  9343  0030B4  0E80               	movlw	128
  9344  0030B6  0100               	movlb	0	; () banked
  9345  0030B8  1B82               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  9346                           
  9347                           ; BSR set to: 0
  9348  0030BA  0E00               	movlw	0
  9349  0030BC  0100               	movlb	0	; () banked
  9350  0030BE  1B83               	xorwf	___ftge@ff2& (0+255),f,b
  9351  0030C0  0E00               	movlw	0
  9352  0030C2  0100               	movlb	0	; () banked
  9353  0030C4  1B84               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  9354  0030C6  0E80               	movlw	128
  9355  0030C8  0100               	movlb	0	; () banked
  9356  0030CA  1B85               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  9357  0030CC  0100               	movlb	0	; () banked
  9358  0030CE  5183               	movf	___ftge@ff2& (0+255),w,b
  9359  0030D0  0100               	movlb	0	; () banked
  9360  0030D2  5D80               	subwf	___ftge@ff1& (0+255),w,b
  9361  0030D4  0100               	movlb	0	; () banked
  9362  0030D6  5184               	movf	(___ftge@ff2+1)& (0+255),w,b
  9363  0030D8  0100               	movlb	0	; () banked
  9364  0030DA  5981               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  9365  0030DC  0100               	movlb	0	; () banked
  9366  0030DE  5185               	movf	(___ftge@ff2+2)& (0+255),w,b
  9367  0030E0  0100               	movlb	0	; () banked
  9368  0030E2  5982               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  9369  0030E4  B0D8               	btfsc	status,0,c
  9370  0030E6  D002               	goto	l6206
  9371                           
  9372                           ; BSR set to: 0
  9373  0030E8  90D8               	bcf	status,0,c
  9374  0030EA  0012               	return	
  9375  0030EC                     l6206:
  9376                           
  9377                           ; BSR set to: 0
  9378  0030EC  80D8               	bsf	status,0,c
  9379                           
  9380                           ; BSR set to: 0
  9381  0030EE  0012               	return	
  9382  0030F0                     __end_of___ftge:
  9383                           	opt stack 0
  9384                           tblptru	equ	0xFF8
  9385                           tblptrh	equ	0xFF7
  9386                           tblptrl	equ	0xFF6
  9387                           tablat	equ	0xFF5
  9388                           prodh	equ	0xFF4
  9389                           prodl	equ	0xFF3
  9390                           postinc0	equ	0xFEE
  9391                           wreg	equ	0xFE8
  9392                           postdec1	equ	0xFE5
  9393                           fsr1l	equ	0xFE1
  9394                           indf2	equ	0xFDF
  9395                           postinc2	equ	0xFDE
  9396                           postdec2	equ	0xFDD
  9397                           fsr2h	equ	0xFDA
  9398                           fsr2l	equ	0xFD9
  9399                           status	equ	0xFD8
  9400                           
  9401 ;; *************** function _lcdClear *****************
  9402 ;; Defined at:
  9403 ;;		line 74 in file "lcd.c"
  9404 ;; Parameters:    Size  Location     Type
  9405 ;;		None
  9406 ;; Auto vars:     Size  Location     Type
  9407 ;;		None
  9408 ;; Return value:  Size  Location     Type
  9409 ;;                  1    wreg      void 
  9410 ;; Registers used:
  9411 ;;		wreg, status,2, status,0, cstack
  9412 ;; Tracked objects:
  9413 ;;		On entry : 0/0
  9414 ;;		On exit  : 0/0
  9415 ;;		Unchanged: 0/0
  9416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9421 ;;Total ram usage:        0 bytes
  9422 ;; Hardware stack levels used:    1
  9423 ;; Hardware stack levels required when called:    5
  9424 ;; This function calls:
  9425 ;;		_lcdInst
  9426 ;; This function is called by:
  9427 ;;		_main
  9428 ;;		_sortBattery
  9429 ;;		_dateTime
  9430 ;;		_mainMenu
  9431 ;;		_runSelect
  9432 ;;		_runMenu
  9433 ;;		_runTime
  9434 ;;		_runStats
  9435 ;;		_pause
  9436 ;; This function uses a non-reentrant model
  9437 ;;
  9438                           
  9439                           	psect	text29
  9440  003B3C                     __ptext29:
  9441                           	opt stack 0
  9442  003B3C                     _lcdClear:
  9443                           	opt stack 24
  9444                           
  9445                           ;lcd.c: 75: lcdInst(0b00000001);
  9446                           
  9447                           ; BSR set to: 0
  9448                           ;incstack = 0
  9449  003B3C  0E01               	movlw	1
  9450  003B3E  EC72  F01D         	call	_lcdInst
  9451  003B42  0012               	return		;funcret
  9452  003B44                     __end_of_lcdClear:
  9453                           	opt stack 0
  9454                           tblptru	equ	0xFF8
  9455                           tblptrh	equ	0xFF7
  9456                           tblptrl	equ	0xFF6
  9457                           tablat	equ	0xFF5
  9458                           prodh	equ	0xFF4
  9459                           prodl	equ	0xFF3
  9460                           postinc0	equ	0xFEE
  9461                           wreg	equ	0xFE8
  9462                           postdec1	equ	0xFE5
  9463                           fsr1l	equ	0xFE1
  9464                           indf2	equ	0xFDF
  9465                           postinc2	equ	0xFDE
  9466                           postdec2	equ	0xFDD
  9467                           fsr2h	equ	0xFDA
  9468                           fsr2l	equ	0xFD9
  9469                           status	equ	0xFD8
  9470                           
  9471 ;; *************** function _lcdHome *****************
  9472 ;; Defined at:
  9473 ;;		line 70 in file "lcd.c"
  9474 ;; Parameters:    Size  Location     Type
  9475 ;;		None
  9476 ;; Auto vars:     Size  Location     Type
  9477 ;;		None
  9478 ;; Return value:  Size  Location     Type
  9479 ;;                  2   22[None  ] int 
  9480 ;; Registers used:
  9481 ;;		wreg, status,2, status,0, cstack
  9482 ;; Tracked objects:
  9483 ;;		On entry : 0/0
  9484 ;;		On exit  : 0/0
  9485 ;;		Unchanged: 0/0
  9486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9490 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9491 ;;Total ram usage:        0 bytes
  9492 ;; Hardware stack levels used:    1
  9493 ;; Hardware stack levels required when called:    5
  9494 ;; This function calls:
  9495 ;;		_lcdInst
  9496 ;; This function is called by:
  9497 ;;		_main
  9498 ;; This function uses a non-reentrant model
  9499 ;;
  9500                           
  9501                           	psect	text30
  9502  003B44                     __ptext30:
  9503                           	opt stack 0
  9504  003B44                     _lcdHome:
  9505                           	opt stack 25
  9506                           
  9507                           ;lcd.c: 71: lcdInst(0b11000000);
  9508                           
  9509                           ;incstack = 0
  9510  003B44  0EC0               	movlw	192
  9511  003B46  EC72  F01D         	call	_lcdInst
  9512  003B4A  0012               	return		;funcret
  9513  003B4C                     __end_of_lcdHome:
  9514                           	opt stack 0
  9515                           tblptru	equ	0xFF8
  9516                           tblptrh	equ	0xFF7
  9517                           tblptrl	equ	0xFF6
  9518                           tablat	equ	0xFF5
  9519                           prodh	equ	0xFF4
  9520                           prodl	equ	0xFF3
  9521                           postinc0	equ	0xFEE
  9522                           wreg	equ	0xFE8
  9523                           postdec1	equ	0xFE5
  9524                           fsr1l	equ	0xFE1
  9525                           indf2	equ	0xFDF
  9526                           postinc2	equ	0xFDE
  9527                           postdec2	equ	0xFDD
  9528                           fsr2h	equ	0xFDA
  9529                           fsr2l	equ	0xFD9
  9530                           status	equ	0xFD8
  9531                           
  9532 ;; *************** function _initLCD *****************
  9533 ;; Defined at:
  9534 ;;		line 15 in file "lcd.c"
  9535 ;; Parameters:    Size  Location     Type
  9536 ;;		None
  9537 ;; Auto vars:     Size  Location     Type
  9538 ;;		None
  9539 ;; Return value:  Size  Location     Type
  9540 ;;                  1    wreg      void 
  9541 ;; Registers used:
  9542 ;;		wreg, status,2, status,0, cstack
  9543 ;; Tracked objects:
  9544 ;;		On entry : 0/0
  9545 ;;		On exit  : 0/0
  9546 ;;		Unchanged: 0/0
  9547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9550 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9551 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9552 ;;Total ram usage:        1 bytes
  9553 ;; Hardware stack levels used:    1
  9554 ;; Hardware stack levels required when called:    5
  9555 ;; This function calls:
  9556 ;;		_lcdInst
  9557 ;; This function is called by:
  9558 ;;		_main
  9559 ;; This function uses a non-reentrant model
  9560 ;;
  9561                           
  9562                           	psect	text31
  9563  0037F4                     __ptext31:
  9564                           	opt stack 0
  9565  0037F4                     _initLCD:
  9566                           	opt stack 25
  9567                           
  9568                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
  9569                           
  9570                           ;incstack = 0
  9571  0037F4  0E31               	movlw	49
  9572  0037F6  6E2B               	movwf	??_initLCD& (0+255),c
  9573  0037F8  0EB2               	movlw	178
  9574  0037FA                     u7827:
  9575  0037FA  2EE8               	decfsz	wreg,f,c
  9576  0037FC  D7FE               	bra	u7827
  9577  0037FE  2E2B               	decfsz	??_initLCD& (0+255),f,c
  9578  003800  D7FC               	bra	u7827
  9579  003802  D000               	nop2	
  9580                           
  9581                           ;lcd.c: 18: lcdInst(0b00110011);
  9582  003804  0E33               	movlw	51
  9583  003806  EC72  F01D         	call	_lcdInst
  9584                           
  9585                           ;lcd.c: 19: lcdInst(0b00110010);
  9586  00380A  0E32               	movlw	50
  9587  00380C  EC72  F01D         	call	_lcdInst
  9588                           
  9589                           ;lcd.c: 20: lcdInst(0b00101000);
  9590  003810  0E28               	movlw	40
  9591  003812  EC72  F01D         	call	_lcdInst
  9592                           
  9593                           ;lcd.c: 21: lcdInst(0b00001111);
  9594  003816  0E0F               	movlw	15
  9595  003818  EC72  F01D         	call	_lcdInst
  9596                           
  9597                           ;lcd.c: 22: lcdInst(0b00000110);
  9598  00381C  0E06               	movlw	6
  9599  00381E  EC72  F01D         	call	_lcdInst
  9600                           
  9601                           ;lcd.c: 23: lcdInst(0b00000001);
  9602  003822  0E01               	movlw	1
  9603  003824  EC72  F01D         	call	_lcdInst
  9604                           
  9605                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
  9606  003828  0E31               	movlw	49
  9607  00382A  6E2B               	movwf	??_initLCD& (0+255),c
  9608  00382C  0EB2               	movlw	178
  9609  00382E                     u7837:
  9610  00382E  2EE8               	decfsz	wreg,f,c
  9611  003830  D7FE               	bra	u7837
  9612  003832  2E2B               	decfsz	??_initLCD& (0+255),f,c
  9613  003834  D7FC               	bra	u7837
  9614  003836  D000               	nop2	
  9615  003838  0012               	return		;funcret
  9616  00383A                     __end_of_initLCD:
  9617                           	opt stack 0
  9618                           tblptru	equ	0xFF8
  9619                           tblptrh	equ	0xFF7
  9620                           tblptrl	equ	0xFF6
  9621                           tablat	equ	0xFF5
  9622                           prodh	equ	0xFF4
  9623                           prodl	equ	0xFF3
  9624                           postinc0	equ	0xFEE
  9625                           wreg	equ	0xFE8
  9626                           postdec1	equ	0xFE5
  9627                           fsr1l	equ	0xFE1
  9628                           indf2	equ	0xFDF
  9629                           postinc2	equ	0xFDE
  9630                           postdec2	equ	0xFDD
  9631                           fsr2h	equ	0xFDA
  9632                           fsr2l	equ	0xFD9
  9633                           status	equ	0xFD8
  9634                           
  9635 ;; *************** function _lcdInst *****************
  9636 ;; Defined at:
  9637 ;;		line 27 in file "lcd.c"
  9638 ;; Parameters:    Size  Location     Type
  9639 ;;  data            1    wreg     unsigned char 
  9640 ;; Auto vars:     Size  Location     Type
  9641 ;;  data            1   41[COMRAM] unsigned char 
  9642 ;; Return value:  Size  Location     Type
  9643 ;;                  1    wreg      void 
  9644 ;; Registers used:
  9645 ;;		wreg, status,2, status,0, cstack
  9646 ;; Tracked objects:
  9647 ;;		On entry : 0/0
  9648 ;;		On exit  : 0/0
  9649 ;;		Unchanged: 0/0
  9650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9652 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9653 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9654 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9655 ;;Total ram usage:        2 bytes
  9656 ;; Hardware stack levels used:    1
  9657 ;; Hardware stack levels required when called:    4
  9658 ;; This function calls:
  9659 ;;		_lcdNibble
  9660 ;; This function is called by:
  9661 ;;		_initLCD
  9662 ;;		_lcdHome
  9663 ;;		_lcdClear
  9664 ;;		_lcdNewline
  9665 ;; This function uses a non-reentrant model
  9666 ;;
  9667                           
  9668                           	psect	text32
  9669  003AE4                     __ptext32:
  9670                           	opt stack 0
  9671  003AE4                     _lcdInst:
  9672                           	opt stack 22
  9673                           
  9674                           ;incstack = 0
  9675                           ;lcdInst@data stored from wreg
  9676  003AE4  6E2A               	movwf	lcdInst@data,c
  9677                           
  9678                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  9679  003AE6  948C               	bcf	3980,2,c	;volatile
  9680                           
  9681                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
  9682  003AE8  0E74               	movlw	116
  9683  003AEA                     u7847:
  9684  003AEA  2EE8               	decfsz	wreg,f,c
  9685  003AEC  D7FE               	bra	u7847
  9686  003AEE  D000               	nop2	
  9687                           
  9688                           ;lcd.c: 30: lcdNibble(data);
  9689  003AF0  502A               	movf	lcdInst@data,w,c
  9690  003AF2  EC30  F01B         	call	_lcdNibble
  9691                           
  9692                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
  9693  003AF6  0E04               	movlw	4
  9694  003AF8  6E29               	movwf	??_lcdInst& (0+255),c
  9695  003AFA  0E3E               	movlw	62
  9696  003AFC                     u7857:
  9697  003AFC  2EE8               	decfsz	wreg,f,c
  9698  003AFE  D7FE               	bra	u7857
  9699  003B00  2E29               	decfsz	??_lcdInst& (0+255),f,c
  9700  003B02  D7FC               	bra	u7857
  9701  003B04  0012               	return		;funcret
  9702  003B06                     __end_of_lcdInst:
  9703                           	opt stack 0
  9704                           tblptru	equ	0xFF8
  9705                           tblptrh	equ	0xFF7
  9706                           tblptrl	equ	0xFF6
  9707                           tablat	equ	0xFF5
  9708                           prodh	equ	0xFF4
  9709                           prodl	equ	0xFF3
  9710                           postinc0	equ	0xFEE
  9711                           wreg	equ	0xFE8
  9712                           postdec1	equ	0xFE5
  9713                           fsr1l	equ	0xFE1
  9714                           indf2	equ	0xFDF
  9715                           postinc2	equ	0xFDE
  9716                           postdec2	equ	0xFDD
  9717                           fsr2h	equ	0xFDA
  9718                           fsr2l	equ	0xFD9
  9719                           status	equ	0xFD8
  9720                           
  9721 ;; *************** function _lcdNibble *****************
  9722 ;; Defined at:
  9723 ;;		line 46 in file "lcd.c"
  9724 ;; Parameters:    Size  Location     Type
  9725 ;;  data            1    wreg     unsigned char 
  9726 ;; Auto vars:     Size  Location     Type
  9727 ;;  data            1   39[COMRAM] unsigned char 
  9728 ;;  temp            1   38[COMRAM] unsigned char 
  9729 ;; Return value:  Size  Location     Type
  9730 ;;                  1    wreg      void 
  9731 ;; Registers used:
  9732 ;;		wreg, status,2, status,0
  9733 ;; Tracked objects:
  9734 ;;		On entry : 0/0
  9735 ;;		On exit  : 0/0
  9736 ;;		Unchanged: 0/0
  9737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9739 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9741 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9742 ;;Total ram usage:        2 bytes
  9743 ;; Hardware stack levels used:    1
  9744 ;; Hardware stack levels required when called:    3
  9745 ;; This function calls:
  9746 ;;		Nothing
  9747 ;; This function is called by:
  9748 ;;		_lcdInst
  9749 ;;		_putch
  9750 ;; This function uses a non-reentrant model
  9751 ;;
  9752                           
  9753                           	psect	text33
  9754  003660                     __ptext33:
  9755                           	opt stack 0
  9756  003660                     _lcdNibble:
  9757                           	opt stack 24
  9758                           
  9759                           ;incstack = 0
  9760                           ;lcdNibble@data stored from wreg
  9761  003660  6E28               	movwf	lcdNibble@data,c
  9762                           
  9763                           ;lcd.c: 48: char temp = data & 0xF0;
  9764  003662  5028               	movf	lcdNibble@data,w,c
  9765  003664  0BF0               	andlw	240
  9766  003666  6E27               	movwf	lcdNibble@temp,c
  9767                           
  9768                           ;lcd.c: 49: LATD = LATD & 0x0F;
  9769  003668  508C               	movf	3980,w,c	;volatile
  9770  00366A  0B0F               	andlw	15
  9771  00366C  6E8C               	movwf	3980,c	;volatile
  9772                           
  9773                           ;lcd.c: 50: LATD = temp | LATD;
  9774  00366E  5027               	movf	lcdNibble@temp,w,c
  9775  003670  108C               	iorwf	3980,w,c	;volatile
  9776  003672  6E8C               	movwf	3980,c	;volatile
  9777                           
  9778                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  9779  003674  968C               	bcf	3980,3,c	;volatile
  9780                           
  9781                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
  9782  003676  0ED6               	movlw	214
  9783  003678                     u7867:
  9784  003678  D000               	nop2	
  9785  00367A  D000               	nop2	
  9786  00367C  2EE8               	decfsz	wreg,f,c
  9787  00367E  D7FC               	bra	u7867
  9788  003680  D000               	nop2	
  9789                           
  9790                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  9791  003682  868C               	bsf	3980,3,c	;volatile
  9792                           
  9793                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
  9794  003684  0ED6               	movlw	214
  9795  003686                     u7877:
  9796  003686  D000               	nop2	
  9797  003688  D000               	nop2	
  9798  00368A  2EE8               	decfsz	wreg,f,c
  9799  00368C  D7FC               	bra	u7877
  9800  00368E  D000               	nop2	
  9801                           
  9802                           ;lcd.c: 58: data = data << 4;
  9803  003690  3828               	swapf	lcdNibble@data,w,c
  9804  003692  0BF0               	andlw	240
  9805  003694  6E28               	movwf	lcdNibble@data,c
  9806                           
  9807                           ;lcd.c: 60: temp = data & 0xF0;
  9808  003696  5028               	movf	lcdNibble@data,w,c
  9809  003698  0BF0               	andlw	240
  9810  00369A  6E27               	movwf	lcdNibble@temp,c
  9811                           
  9812                           ;lcd.c: 61: LATD = LATD & 0x0F;
  9813  00369C  508C               	movf	3980,w,c	;volatile
  9814  00369E  0B0F               	andlw	15
  9815  0036A0  6E8C               	movwf	3980,c	;volatile
  9816                           
  9817                           ;lcd.c: 62: LATD = temp | LATD;
  9818  0036A2  5027               	movf	lcdNibble@temp,w,c
  9819  0036A4  108C               	iorwf	3980,w,c	;volatile
  9820  0036A6  6E8C               	movwf	3980,c	;volatile
  9821                           
  9822                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  9823  0036A8  968C               	bcf	3980,3,c	;volatile
  9824                           
  9825                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
  9826  0036AA  0ED6               	movlw	214
  9827  0036AC                     u7887:
  9828  0036AC  D000               	nop2	
  9829  0036AE  D000               	nop2	
  9830  0036B0  2EE8               	decfsz	wreg,f,c
  9831  0036B2  D7FC               	bra	u7887
  9832  0036B4  D000               	nop2	
  9833                           
  9834                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  9835  0036B6  868C               	bsf	3980,3,c	;volatile
  9836                           
  9837                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
  9838  0036B8  0ED6               	movlw	214
  9839  0036BA                     u7897:
  9840  0036BA  D000               	nop2	
  9841  0036BC  D000               	nop2	
  9842  0036BE  2EE8               	decfsz	wreg,f,c
  9843  0036C0  D7FC               	bra	u7897
  9844  0036C2  D000               	nop2	
  9845  0036C4  0012               	return		;funcret
  9846  0036C6                     __end_of_lcdNibble:
  9847                           	opt stack 0
  9848                           tblptru	equ	0xFF8
  9849                           tblptrh	equ	0xFF7
  9850                           tblptrl	equ	0xFF6
  9851                           tablat	equ	0xFF5
  9852                           prodh	equ	0xFF4
  9853                           prodl	equ	0xFF3
  9854                           postinc0	equ	0xFEE
  9855                           wreg	equ	0xFE8
  9856                           postdec1	equ	0xFE5
  9857                           fsr1l	equ	0xFE1
  9858                           indf2	equ	0xFDF
  9859                           postinc2	equ	0xFDE
  9860                           postdec2	equ	0xFDD
  9861                           fsr2h	equ	0xFDA
  9862                           fsr2l	equ	0xFD9
  9863                           status	equ	0xFD8
  9864                           
  9865 ;; *************** function _debug *****************
  9866 ;; Defined at:
  9867 ;;		line 102 in file "main.c"
  9868 ;; Parameters:    Size  Location     Type
  9869 ;;		None
  9870 ;; Auto vars:     Size  Location     Type
  9871 ;;		None
  9872 ;; Return value:  Size  Location     Type
  9873 ;;                  1    wreg      void 
  9874 ;; Registers used:
  9875 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9876 ;; Tracked objects:
  9877 ;;		On entry : 0/0
  9878 ;;		On exit  : 0/0
  9879 ;;		Unchanged: 0/0
  9880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9885 ;;Total ram usage:        0 bytes
  9886 ;; Hardware stack levels used:    1
  9887 ;; Hardware stack levels required when called:    8
  9888 ;; This function calls:
  9889 ;;		_initServo
  9890 ;;		_pinSetup
  9891 ;;		_readKeypad
  9892 ;; This function is called by:
  9893 ;;		_main
  9894 ;; This function uses a non-reentrant model
  9895 ;;
  9896                           
  9897                           	psect	text34
  9898  00387A                     __ptext34:
  9899                           	opt stack 0
  9900  00387A                     _debug:
  9901                           	opt stack 22
  9902                           
  9903                           ;main.c: 104: pinSetup();
  9904                           
  9905                           ;incstack = 0
  9906  00387A  EC1D  F01C         	call	_pinSetup	;wreg free
  9907                           
  9908                           ;main.c: 106: initServo(padServo, 90);
  9909  00387E  0E55               	movlw	low _padServo
  9910  003880  0100               	movlb	0	; () banked
  9911  003882  6FEA               	movwf	initServo@motor& (0+255),b
  9912  003884  0E00               	movlw	high _padServo
  9913  003886  0100               	movlb	0	; () banked
  9914  003888  6FEB               	movwf	(initServo@motor+1)& (0+255),b
  9915  00388A  0E00               	movlw	0
  9916  00388C  0100               	movlb	0	; () banked
  9917  00388E  6FED               	movwf	(initServo@angle+1)& (0+255),b
  9918  003890  0E5A               	movlw	90
  9919  003892  6FEC               	movwf	initServo@angle& (0+255),b
  9920  003894  ECDC  F016         	call	_initServo	;wreg free
  9921                           
  9922                           ;main.c: 107: readKeypad();
  9923  003898  EC3C  F01D         	call	_readKeypad	;wreg free
  9924                           
  9925                           ;main.c: 108: initServo(padServo, 0);
  9926  00389C  0E55               	movlw	low _padServo
  9927  00389E  0100               	movlb	0	; () banked
  9928  0038A0  6FEA               	movwf	initServo@motor& (0+255),b
  9929  0038A2  0E00               	movlw	high _padServo
  9930  0038A4  0100               	movlb	0	; () banked
  9931  0038A6  6FEB               	movwf	(initServo@motor+1)& (0+255),b
  9932  0038A8  0E00               	movlw	0
  9933  0038AA  0100               	movlb	0	; () banked
  9934  0038AC  6FED               	movwf	(initServo@angle+1)& (0+255),b
  9935  0038AE  0E00               	movlw	0
  9936  0038B0  6FEC               	movwf	initServo@angle& (0+255),b
  9937  0038B2  ECDC  F016         	call	_initServo	;wreg free
  9938  0038B6                     l131:
  9939  0038B6  D7FF               	goto	l131
  9940  0038B8                     __end_of_debug:
  9941                           	opt stack 0
  9942                           tblptru	equ	0xFF8
  9943                           tblptrh	equ	0xFF7
  9944                           tblptrl	equ	0xFF6
  9945                           tablat	equ	0xFF5
  9946                           prodh	equ	0xFF4
  9947                           prodl	equ	0xFF3
  9948                           postinc0	equ	0xFEE
  9949                           wreg	equ	0xFE8
  9950                           postdec1	equ	0xFE5
  9951                           fsr1l	equ	0xFE1
  9952                           indf2	equ	0xFDF
  9953                           postinc2	equ	0xFDE
  9954                           postdec2	equ	0xFDD
  9955                           fsr2h	equ	0xFDA
  9956                           fsr2l	equ	0xFD9
  9957                           status	equ	0xFD8
  9958                           
  9959 ;; *************** function _readKeypad *****************
  9960 ;; Defined at:
  9961 ;;		line 36 in file "keypad.c"
  9962 ;; Parameters:    Size  Location     Type
  9963 ;;		None
  9964 ;; Auto vars:     Size  Location     Type
  9965 ;;  key             1   38[COMRAM] unsigned char 
  9966 ;; Return value:  Size  Location     Type
  9967 ;;                  1    wreg      unsigned char 
  9968 ;; Registers used:
  9969 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  9970 ;; Tracked objects:
  9971 ;;		On entry : 0/0
  9972 ;;		On exit  : 0/0
  9973 ;;		Unchanged: 0/0
  9974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9976 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9978 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9979 ;;Total ram usage:        1 bytes
  9980 ;; Hardware stack levels used:    1
  9981 ;; Hardware stack levels required when called:    3
  9982 ;; This function calls:
  9983 ;;		Nothing
  9984 ;; This function is called by:
  9985 ;;		_debug
  9986 ;;		_main
  9987 ;;		_sortBattery
  9988 ;;		_showInterface
  9989 ;;		_pause
  9990 ;; This function uses a non-reentrant model
  9991 ;;
  9992                           
  9993                           	psect	text35
  9994  003A78                     __ptext35:
  9995                           	opt stack 0
  9996  003A78                     _readKeypad:
  9997                           	opt stack 26
  9998  003A78                     l254:
  9999  003A78  A281               	btfss	3969,1,c	;volatile
 10000  003A7A  D7FE               	goto	l254
 10001                           
 10002                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
 10003  003A7C  3881               	swapf	3969,w,c	;volatile
 10004  003A7E  0B0F               	andlw	15
 10005  003A80  0B0F               	andlw	15
 10006  003A82  6E27               	movwf	readKeypad@key,c
 10007  003A84                     l257:
 10008  003A84  B281               	btfsc	3969,1,c	;volatile
 10009  003A86  D7FE               	goto	l257
 10010                           
 10011                           ;keypad.c: 40: return keys[key];
 10012  003A88  5027               	movf	readKeypad@key,w,c
 10013  003A8A  0D01               	mullw	1
 10014  003A8C  0EB3               	movlw	low _keys
 10015  003A8E  24F3               	addwf	prodl,w,c
 10016  003A90  6EF6               	movwf	tblptrl,c
 10017  003A92  0EFE               	movlw	high _keys
 10018  003A94  20F4               	addwfc	prodh,w,c
 10019  003A96  6EF7               	movwf	tblptrh,c
 10020  003A98                     	if	0	;There are less than 3 active tblptr bytes
 10021  003A98                     	endif
 10022  003A98  0008               	tblrd		*
 10023  003A9A  50F5               	movf	tablat,w,c
 10024  003A9C  0012               	return	
 10025  003A9E                     __end_of_readKeypad:
 10026                           	opt stack 0
 10027                           tblptru	equ	0xFF8
 10028                           tblptrh	equ	0xFF7
 10029                           tblptrl	equ	0xFF6
 10030                           tablat	equ	0xFF5
 10031                           prodh	equ	0xFF4
 10032                           prodl	equ	0xFF3
 10033                           postinc0	equ	0xFEE
 10034                           wreg	equ	0xFE8
 10035                           postdec1	equ	0xFE5
 10036                           fsr1l	equ	0xFE1
 10037                           indf2	equ	0xFDF
 10038                           postinc2	equ	0xFDE
 10039                           postdec2	equ	0xFDD
 10040                           fsr2h	equ	0xFDA
 10041                           fsr2l	equ	0xFD9
 10042                           status	equ	0xFD8
 10043                           
 10044 ;; *************** function _pinSetup *****************
 10045 ;; Defined at:
 10046 ;;		line 285 in file "main.c"
 10047 ;; Parameters:    Size  Location     Type
 10048 ;;		None
 10049 ;; Auto vars:     Size  Location     Type
 10050 ;;		None
 10051 ;; Return value:  Size  Location     Type
 10052 ;;                  1    wreg      void 
 10053 ;; Registers used:
 10054 ;;		wreg, status,2, status,0
 10055 ;; Tracked objects:
 10056 ;;		On entry : 0/0
 10057 ;;		On exit  : 0/0
 10058 ;;		Unchanged: 0/0
 10059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10064 ;;Total ram usage:        0 bytes
 10065 ;; Hardware stack levels used:    1
 10066 ;; Hardware stack levels required when called:    3
 10067 ;; This function calls:
 10068 ;;		Nothing
 10069 ;; This function is called by:
 10070 ;;		_debug
 10071 ;;		_main
 10072 ;; This function uses a non-reentrant model
 10073 ;;
 10074                           
 10075                           	psect	text36
 10076  00383A                     __ptext36:
 10077                           	opt stack 0
 10078  00383A                     _pinSetup:
 10079                           	opt stack 27
 10080                           
 10081                           ;main.c: 291: TRISA = 0xFF;
 10082                           
 10083                           ;incstack = 0
 10084  00383A  6892               	setf	3986,c	;volatile
 10085                           
 10086                           ;main.c: 292: TRISB = 0xFF;
 10087  00383C  6893               	setf	3987,c	;volatile
 10088                           
 10089                           ;main.c: 293: TRISC = 0b11000000;
 10090  00383E  0EC0               	movlw	192
 10091  003840  6E94               	movwf	3988,c	;volatile
 10092                           
 10093                           ;main.c: 294: TRISD = 0x00;
 10094  003842  0E00               	movlw	0
 10095  003844  6E95               	movwf	3989,c	;volatile
 10096                           
 10097                           ;main.c: 295: TRISE = 0x00;
 10098  003846  0E00               	movlw	0
 10099  003848  6E96               	movwf	3990,c	;volatile
 10100                           
 10101                           ;main.c: 297: LATA = 0x00;
 10102  00384A  0E00               	movlw	0
 10103  00384C  6E89               	movwf	3977,c	;volatile
 10104                           
 10105                           ;main.c: 298: LATB = 0x00;
 10106  00384E  0E00               	movlw	0
 10107  003850  6E8A               	movwf	3978,c	;volatile
 10108                           
 10109                           ;main.c: 299: LATC = 0x00;
 10110  003852  0E00               	movlw	0
 10111  003854  6E8B               	movwf	3979,c	;volatile
 10112                           
 10113                           ;main.c: 300: LATD = 0x00;
 10114  003856  0E00               	movlw	0
 10115  003858  6E8C               	movwf	3980,c	;volatile
 10116                           
 10117                           ;main.c: 301: LATE = 0x00;
 10118  00385A  0E00               	movlw	0
 10119  00385C  6E8D               	movwf	3981,c	;volatile
 10120                           
 10121                           ;main.c: 303: ADCON0 = 0x00;
 10122  00385E  0E00               	movlw	0
 10123  003860  6EC2               	movwf	4034,c	;volatile
 10124                           
 10125                           ;main.c: 305: ADCON1 |= 0x0B;
 10126  003862  0E0B               	movlw	11
 10127  003864  12C1               	iorwf	4033,f,c	;volatile
 10128                           
 10129                           ;main.c: 310: ADCON2 = 0;
 10130  003866  0E00               	movlw	0
 10131  003868  6EC0               	movwf	4032,c	;volatile
 10132                           
 10133                           ;main.c: 311: ADCON2 |= 0b010;
 10134  00386A  82C0               	bsf	4032,1,c	;volatile
 10135                           
 10136                           ;main.c: 312: ADCON2 |= 0b110<<3;
 10137  00386C  0E30               	movlw	48
 10138  00386E  12C0               	iorwf	4032,f,c	;volatile
 10139                           
 10140                           ;main.c: 313: ADCON2 |= 1<<7;
 10141  003870  8EC0               	bsf	4032,7,c	;volatile
 10142                           
 10143                           ;main.c: 316: INT1IE = 1;
 10144  003872  86F0               	bsf	intcon3,3,c	;volatile
 10145                           
 10146                           ;main.c: 317: INT0IE = 1;
 10147  003874  88F2               	bsf	intcon,4,c	;volatile
 10148                           
 10149                           ;main.c: 318: (INTCONbits.GIE = 1);
 10150  003876  8EF2               	bsf	intcon,7,c	;volatile
 10151  003878  0012               	return		;funcret
 10152  00387A                     __end_of_pinSetup:
 10153                           	opt stack 0
 10154                           tblptru	equ	0xFF8
 10155                           tblptrh	equ	0xFF7
 10156                           tblptrl	equ	0xFF6
 10157                           tablat	equ	0xFF5
 10158                           prodh	equ	0xFF4
 10159                           prodl	equ	0xFF3
 10160                           intcon	equ	0xFF2
 10161                           intcon3	equ	0xFF0
 10162                           postinc0	equ	0xFEE
 10163                           wreg	equ	0xFE8
 10164                           postdec1	equ	0xFE5
 10165                           fsr1l	equ	0xFE1
 10166                           indf2	equ	0xFDF
 10167                           postinc2	equ	0xFDE
 10168                           postdec2	equ	0xFDD
 10169                           fsr2h	equ	0xFDA
 10170                           fsr2l	equ	0xFD9
 10171                           status	equ	0xFD8
 10172                           
 10173 ;; *************** function _initServo *****************
 10174 ;; Defined at:
 10175 ;;		line 21 in file "servo.c"
 10176 ;; Parameters:    Size  Location     Type
 10177 ;;  motor           2  106[BANK0 ] PTR int 
 10178 ;;		 -> redirectingServo(4), conveyorServo(4), padServo(4), 
 10179 ;;  angle           2  108[BANK0 ] int 
 10180 ;; Auto vars:     Size  Location     Type
 10181 ;;  i               2  114[BANK0 ] int 
 10182 ;; Return value:  Size  Location     Type
 10183 ;;                  1    wreg      void 
 10184 ;; Registers used:
 10185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10186 ;; Tracked objects:
 10187 ;;		On entry : 0/0
 10188 ;;		On exit  : 0/0
 10189 ;;		Unchanged: 0/0
 10190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10191 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10192 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10193 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10194 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10195 ;;Total ram usage:       10 bytes
 10196 ;; Hardware stack levels used:    1
 10197 ;; Hardware stack levels required when called:    7
 10198 ;; This function calls:
 10199 ;;		_initTimer
 10200 ;;		_setAngle
 10201 ;;		_startTimer
 10202 ;; This function is called by:
 10203 ;;		_debug
 10204 ;;		_main
 10205 ;; This function uses a non-reentrant model
 10206 ;;
 10207                           
 10208                           	psect	text37
 10209  002DB8                     __ptext37:
 10210                           	opt stack 0
 10211  002DB8                     _initServo:
 10212                           	opt stack 23
 10213                           
 10214                           ;servo.c: 24: for(int i = 0; i < n; i++){
 10215                           
 10216                           ;incstack = 0
 10217  002DB8  0E00               	movlw	0
 10218  002DBA  0100               	movlb	0	; () banked
 10219  002DBC  6FF3               	movwf	(initServo@i+1)& (0+255),b
 10220  002DBE  0E00               	movlw	0
 10221  002DC0  6FF2               	movwf	initServo@i& (0+255),b
 10222  002DC2  D017               	goto	l6714
 10223  002DC4                     l6708:
 10224                           
 10225                           ; BSR set to: 0
 10226                           ;servo.c: 25: if(servos[i] == motor)return;
 10227  002DC4  90D8               	bcf	status,0,c
 10228  002DC6  0100               	movlb	0	; () banked
 10229  002DC8  35F2               	rlcf	initServo@i& (0+255),w,b
 10230  002DCA  6ED9               	movwf	fsr2l,c
 10231  002DCC  0100               	movlb	0	; () banked
 10232  002DCE  35F3               	rlcf	(initServo@i+1)& (0+255),w,b
 10233  002DD0  6EDA               	movwf	fsr2h,c
 10234  002DD2  0E6D               	movlw	low _servos
 10235  002DD4  26D9               	addwf	fsr2l,f,c
 10236  002DD6  0E01               	movlw	high _servos
 10237  002DD8  22DA               	addwfc	fsr2h,f,c
 10238  002DDA  0100               	movlb	0	; () banked
 10239  002DDC  51EA               	movf	initServo@motor& (0+255),w,b
 10240  002DDE  18DE               	xorwf	postinc2,w,c
 10241  002DE0  E105               	bnz	l6712
 10242  002DE2  0100               	movlb	0	; () banked
 10243  002DE4  51EB               	movf	(initServo@motor+1)& (0+255),w,b
 10244  002DE6  18DE               	xorwf	postinc2,w,c
 10245  002DE8  B4D8               	btfsc	status,2,c
 10246  002DEA  0012               	return	
 10247  002DEC                     l6712:
 10248                           
 10249                           ; BSR set to: 0
 10250  002DEC  0100               	movlb	0	; () banked
 10251  002DEE  4BF2               	infsnz	initServo@i& (0+255),f,b
 10252  002DF0  2BF3               	incf	(initServo@i+1)& (0+255),f,b
 10253  002DF2                     l6714:
 10254                           
 10255                           ; BSR set to: 0
 10256  002DF2  503C               	movf	_n,w,c
 10257  002DF4  0100               	movlb	0	; () banked
 10258  002DF6  5DF2               	subwf	initServo@i& (0+255),w,b
 10259  002DF8  0100               	movlb	0	; () banked
 10260  002DFA  51F3               	movf	(initServo@i+1)& (0+255),w,b
 10261  002DFC  0A80               	xorlw	128
 10262  002DFE  0100               	movlb	0	; () banked
 10263  002E00  6FEE               	movwf	??_initServo& (0+255),b
 10264  002E02  503D               	movf	_n+1,w,c
 10265  002E04  0A80               	xorlw	128
 10266  002E06  0100               	movlb	0	; () banked
 10267  002E08  59EE               	subwfb	??_initServo& (0+255),w,b
 10268  002E0A  A0D8               	btfss	status,0,c
 10269  002E0C  D7DB               	goto	l6708
 10270                           
 10271                           ; BSR set to: 0
 10272                           ;servo.c: 26: }
 10273                           ;servo.c: 28: n++;
 10274                           
 10275                           ; BSR set to: 0
 10276  002E0E  4A3C               	infsnz	_n,f,c
 10277  002E10  2A3D               	incf	_n+1,f,c
 10278                           
 10279                           ; BSR set to: 0
 10280                           ;servo.c: 29: servos[n-1] = motor;
 10281  002E12  0EFE               	movlw	254
 10282  002E14  0100               	movlb	0	; () banked
 10283  002E16  6FEE               	movwf	??_initServo& (0+255),b
 10284  002E18  0EFF               	movlw	255
 10285  002E1A  0100               	movlb	0	; () banked
 10286  002E1C  6FEF               	movwf	(??_initServo+1)& (0+255),b
 10287  002E1E  C03C  F0F0         	movff	_n,??_initServo+2
 10288  002E22  C03D  F0F1         	movff	_n+1,??_initServo+3
 10289  002E26  90D8               	bcf	status,0,c
 10290  002E28  0100               	movlb	0	; () banked
 10291  002E2A  37F0               	rlcf	(??_initServo+2)& (0+255),f,b
 10292  002E2C  37F1               	rlcf	(??_initServo+3)& (0+255),f,b
 10293  002E2E  0100               	movlb	0	; () banked
 10294  002E30  51EE               	movf	??_initServo& (0+255),w,b
 10295  002E32  0100               	movlb	0	; () banked
 10296  002E34  27F0               	addwf	(??_initServo+2)& (0+255),f,b
 10297  002E36  0100               	movlb	0	; () banked
 10298  002E38  51EF               	movf	(??_initServo+1)& (0+255),w,b
 10299  002E3A  0100               	movlb	0	; () banked
 10300  002E3C  23F1               	addwfc	(??_initServo+3)& (0+255),f,b
 10301  002E3E  0E6D               	movlw	low _servos
 10302  002E40  0100               	movlb	0	; () banked
 10303  002E42  25F0               	addwf	(??_initServo+2)& (0+255),w,b
 10304  002E44  6ED9               	movwf	fsr2l,c
 10305  002E46  0E01               	movlw	high _servos
 10306  002E48  0100               	movlb	0	; () banked
 10307  002E4A  21F1               	addwfc	(??_initServo+3)& (0+255),w,b
 10308  002E4C  6EDA               	movwf	fsr2h,c
 10309  002E4E  C0EA  FFDE         	movff	initServo@motor,postinc2
 10310  002E52  C0EB  FFDD         	movff	initServo@motor+1,postdec2
 10311                           
 10312                           ; BSR set to: 0
 10313                           ;servo.c: 30: setAngle(motor, angle);
 10314  002E56  C0EA  F0E0         	movff	initServo@motor,setAngle@motor
 10315  002E5A  C0EB  F0E1         	movff	initServo@motor+1,setAngle@motor+1
 10316  002E5E  C0EC  F0E2         	movff	initServo@angle,setAngle@angle
 10317  002E62  C0ED  F0E3         	movff	initServo@angle+1,setAngle@angle+1
 10318  002E66  EC4A  F017         	call	_setAngle	;wreg free
 10319                           
 10320                           ;servo.c: 32: initTimer(0);
 10321  002E6A  0E00               	movlw	0
 10322  002E6C  6E28               	movwf	initTimer@timer+1,c
 10323  002E6E  0E00               	movlw	0
 10324  002E70  6E27               	movwf	initTimer@timer,c
 10325  002E72  ECD5  F01B         	call	_initTimer	;wreg free
 10326                           
 10327                           ;servo.c: 33: startTimer(0,0);
 10328  002E76  0E00               	movlw	0
 10329  002E78  6E28               	movwf	startTimer@timer+1,c
 10330  002E7A  0E00               	movlw	0
 10331  002E7C  6E27               	movwf	startTimer@timer,c
 10332  002E7E  0E00               	movlw	0
 10333  002E80  6E29               	movwf	startTimer@val,c
 10334  002E82  0E00               	movlw	0
 10335  002E84  6E2A               	movwf	startTimer@val+1,c
 10336  002E86  0E00               	movlw	0
 10337  002E88  6E2B               	movwf	startTimer@val+2,c
 10338  002E8A  0E00               	movlw	0
 10339  002E8C  6E2C               	movwf	startTimer@val+3,c
 10340  002E8E  EC89  F01B         	call	_startTimer	;wreg free
 10341  002E92  0012               	return		;funcret
 10342  002E94                     __end_of_initServo:
 10343                           	opt stack 0
 10344                           tblptru	equ	0xFF8
 10345                           tblptrh	equ	0xFF7
 10346                           tblptrl	equ	0xFF6
 10347                           tablat	equ	0xFF5
 10348                           prodh	equ	0xFF4
 10349                           prodl	equ	0xFF3
 10350                           intcon	equ	0xFF2
 10351                           intcon3	equ	0xFF0
 10352                           postinc0	equ	0xFEE
 10353                           wreg	equ	0xFE8
 10354                           postdec1	equ	0xFE5
 10355                           fsr1l	equ	0xFE1
 10356                           indf2	equ	0xFDF
 10357                           postinc2	equ	0xFDE
 10358                           postdec2	equ	0xFDD
 10359                           fsr2h	equ	0xFDA
 10360                           fsr2l	equ	0xFD9
 10361                           status	equ	0xFD8
 10362                           
 10363 ;; *************** function _startTimer *****************
 10364 ;; Defined at:
 10365 ;;		line 76 in file "timer.c"
 10366 ;; Parameters:    Size  Location     Type
 10367 ;;  timer           2   38[COMRAM] int 
 10368 ;;  val             4   40[COMRAM] long 
 10369 ;; Auto vars:     Size  Location     Type
 10370 ;;		None
 10371 ;; Return value:  Size  Location     Type
 10372 ;;                  1    wreg      void 
 10373 ;; Registers used:
 10374 ;;		wreg, status,2, status,0
 10375 ;; Tracked objects:
 10376 ;;		On entry : 0/0
 10377 ;;		On exit  : 0/0
 10378 ;;		Unchanged: 0/0
 10379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10380 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10382 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10383 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10384 ;;Total ram usage:        8 bytes
 10385 ;; Hardware stack levels used:    1
 10386 ;; Hardware stack levels required when called:    3
 10387 ;; This function calls:
 10388 ;;		Nothing
 10389 ;; This function is called by:
 10390 ;;		_main
 10391 ;;		_initServo
 10392 ;;		_testFrequency
 10393 ;; This function uses a non-reentrant model
 10394 ;;
 10395                           
 10396                           	psect	text38
 10397  003712                     __ptext38:
 10398                           	opt stack 0
 10399  003712                     _startTimer:
 10400                           	opt stack 27
 10401                           
 10402                           ;timer.c: 77: switch(timer){
 10403                           
 10404                           ;incstack = 0
 10405  003712  D012               	goto	l6296
 10406  003714                     l433:
 10407                           
 10408                           ;timer.c: 79: TMR0H = val>>8;
 10409  003714  C02A  FFD7         	movff	startTimer@val+1,4055	;volatile
 10410                           
 10411                           ;timer.c: 80: TMR0L = val;
 10412  003718  C029  FFD6         	movff	startTimer@val,4054	;volatile
 10413                           
 10414                           ;timer.c: 81: T0CON |= 1<<7;
 10415  00371C  8ED5               	bsf	4053,7,c	;volatile
 10416                           
 10417                           ;timer.c: 82: break;
 10418  00371E  0012               	return	
 10419  003720                     l435:
 10420                           
 10421                           ;timer.c: 84: TMR1H = val>>8;
 10422  003720  C02A  FFCF         	movff	startTimer@val+1,4047	;volatile
 10423                           
 10424                           ;timer.c: 85: TMR1L = val;
 10425  003724  C029  FFCE         	movff	startTimer@val,4046	;volatile
 10426                           
 10427                           ;timer.c: 86: T1CON |= 1<<0;
 10428  003728  80CD               	bsf	4045,0,c	;volatile
 10429                           
 10430                           ;timer.c: 87: break;
 10431  00372A  0012               	return	
 10432  00372C                     l436:
 10433                           
 10434                           ;timer.c: 89: TMR3H = val>>8;
 10435  00372C  C02A  FFB3         	movff	startTimer@val+1,4019	;volatile
 10436                           
 10437                           ;timer.c: 90: TMR3L = val;
 10438  003730  C029  FFB2         	movff	startTimer@val,4018	;volatile
 10439                           
 10440                           ;timer.c: 91: T3CON |= 1<<0;
 10441  003734  80B1               	bsf	4017,0,c	;volatile
 10442                           
 10443                           ;timer.c: 92: }
 10444  003736  0012               	return	
 10445  003738                     l6296:
 10446  003738  C027  F02D         	movff	startTimer@timer,??_startTimer
 10447  00373C  C028  F02E         	movff	startTimer@timer+1,??_startTimer+1
 10448                           
 10449                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10450                           ; Switch size 1, requested type "space"
 10451                           ; Number of cases is 1, Range of values is 0 to 0
 10452                           ; switch strategies available:
 10453                           ; Name         Instructions Cycles
 10454                           ; simple_byte            4     3 (average)
 10455                           ;	Chosen strategy is simple_byte
 10456  003740  502E               	movf	??_startTimer+1,w,c
 10457  003742  0A00               	xorlw	0	; case 0
 10458  003744  A4D8               	btfss	status,2,c
 10459  003746  0012               	return	
 10460                           
 10461                           ; Switch size 1, requested type "space"
 10462                           ; Number of cases is 3, Range of values is 0 to 3
 10463                           ; switch strategies available:
 10464                           ; Name         Instructions Cycles
 10465                           ; simple_byte           10     6 (average)
 10466                           ;	Chosen strategy is simple_byte
 10467  003748  502D               	movf	??_startTimer,w,c
 10468  00374A  0A00               	xorlw	0	; case 0
 10469  00374C  B4D8               	btfsc	status,2,c
 10470  00374E  D7E2               	goto	l433
 10471  003750  0A01               	xorlw	1	; case 1
 10472  003752  B4D8               	btfsc	status,2,c
 10473  003754  D7E5               	goto	l435
 10474  003756  0A02               	xorlw	2	; case 3
 10475  003758  A4D8               	btfss	status,2,c
 10476  00375A  0012               	return	
 10477  00375C  D7E7               	goto	l436
 10478  00375E                     __end_of_startTimer:
 10479                           	opt stack 0
 10480                           tblptru	equ	0xFF8
 10481                           tblptrh	equ	0xFF7
 10482                           tblptrl	equ	0xFF6
 10483                           tablat	equ	0xFF5
 10484                           prodh	equ	0xFF4
 10485                           prodl	equ	0xFF3
 10486                           intcon	equ	0xFF2
 10487                           intcon3	equ	0xFF0
 10488                           postinc0	equ	0xFEE
 10489                           wreg	equ	0xFE8
 10490                           postdec1	equ	0xFE5
 10491                           fsr1l	equ	0xFE1
 10492                           indf2	equ	0xFDF
 10493                           postinc2	equ	0xFDE
 10494                           postdec2	equ	0xFDD
 10495                           fsr2h	equ	0xFDA
 10496                           fsr2l	equ	0xFD9
 10497                           status	equ	0xFD8
 10498                           
 10499 ;; *************** function _setAngle *****************
 10500 ;; Defined at:
 10501 ;;		line 44 in file "servo.c"
 10502 ;; Parameters:    Size  Location     Type
 10503 ;;  motor           2   96[BANK0 ] PTR int 
 10504 ;;		 -> redirectingServo(4), conveyorServo(4), padServo(4), 
 10505 ;;  angle           2   98[BANK0 ] int 
 10506 ;; Auto vars:     Size  Location     Type
 10507 ;;  i               2  104[BANK0 ] int 
 10508 ;;  period          2  102[BANK0 ] unsigned int 
 10509 ;; Return value:  Size  Location     Type
 10510 ;;                  1    wreg      void 
 10511 ;; Registers used:
 10512 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10513 ;; Tracked objects:
 10514 ;;		On entry : 0/0
 10515 ;;		On exit  : 0/0
 10516 ;;		Unchanged: 0/0
 10517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10518 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10519 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10520 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10521 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10522 ;;Total ram usage:       10 bytes
 10523 ;; Hardware stack levels used:    1
 10524 ;; Hardware stack levels required when called:    6
 10525 ;; This function calls:
 10526 ;;		_angleToPulse
 10527 ;; This function is called by:
 10528 ;;		_sortBattery
 10529 ;;		_initServo
 10530 ;; This function uses a non-reentrant model
 10531 ;;
 10532                           
 10533                           	psect	text39
 10534  002E94                     __ptext39:
 10535                           	opt stack 0
 10536  002E94                     _setAngle:
 10537                           	opt stack 23
 10538                           
 10539                           ;servo.c: 45: unsigned int period = 50000;
 10540                           
 10541                           ;incstack = 0
 10542  002E94  0EC3               	movlw	195
 10543  002E96  0100               	movlb	0	; () banked
 10544  002E98  6FE7               	movwf	(setAngle@period+1)& (0+255),b
 10545  002E9A  0E50               	movlw	80
 10546  002E9C  6FE6               	movwf	setAngle@period& (0+255),b
 10547                           
 10548                           ;servo.c: 46: for(int i = 0; i < n; i++){
 10549  002E9E  0E00               	movlw	0
 10550  002EA0  0100               	movlb	0	; () banked
 10551  002EA2  6FE9               	movwf	(setAngle@i+1)& (0+255),b
 10552  002EA4  0E00               	movlw	0
 10553  002EA6  6FE8               	movwf	setAngle@i& (0+255),b
 10554  002EA8  D03F               	goto	l6684
 10555  002EAA                     l6676:
 10556                           
 10557                           ; BSR set to: 0
 10558                           ;servo.c: 47: if(servos[i] == motor){
 10559  002EAA  90D8               	bcf	status,0,c
 10560  002EAC  0100               	movlb	0	; () banked
 10561  002EAE  35E8               	rlcf	setAngle@i& (0+255),w,b
 10562  002EB0  6ED9               	movwf	fsr2l,c
 10563  002EB2  0100               	movlb	0	; () banked
 10564  002EB4  35E9               	rlcf	(setAngle@i+1)& (0+255),w,b
 10565  002EB6  6EDA               	movwf	fsr2h,c
 10566  002EB8  0E6D               	movlw	low _servos
 10567  002EBA  26D9               	addwf	fsr2l,f,c
 10568  002EBC  0E01               	movlw	high _servos
 10569  002EBE  22DA               	addwfc	fsr2h,f,c
 10570  002EC0  0100               	movlb	0	; () banked
 10571  002EC2  51E0               	movf	setAngle@motor& (0+255),w,b
 10572  002EC4  18DE               	xorwf	postinc2,w,c
 10573  002EC6  E11C               	bnz	l6680
 10574  002EC8  0100               	movlb	0	; () banked
 10575  002ECA  51E1               	movf	(setAngle@motor+1)& (0+255),w,b
 10576  002ECC  18DE               	xorwf	postinc2,w,c
 10577  002ECE  A4D8               	btfss	status,2,c
 10578  002ED0  D017               	goto	l6680
 10579                           
 10580                           ; BSR set to: 0
 10581                           ;servo.c: 48: pulse[i] = angleToPulse(angle);
 10582  002ED2  C0E2  F0C9         	movff	setAngle@angle,angleToPulse@angle
 10583  002ED6  C0E3  F0CA         	movff	setAngle@angle+1,angleToPulse@angle+1
 10584  002EDA  EC1B  F010         	call	_angleToPulse	;wreg free
 10585  002EDE  90D8               	bcf	status,0,c
 10586  002EE0  0100               	movlb	0	; () banked
 10587  002EE2  35E8               	rlcf	setAngle@i& (0+255),w,b
 10588  002EE4  6ED9               	movwf	fsr2l,c
 10589  002EE6  0100               	movlb	0	; () banked
 10590  002EE8  35E9               	rlcf	(setAngle@i+1)& (0+255),w,b
 10591  002EEA  6EDA               	movwf	fsr2h,c
 10592  002EEC  0E65               	movlw	low _pulse
 10593  002EEE  26D9               	addwf	fsr2l,f,c
 10594  002EF0  0E01               	movlw	high _pulse
 10595  002EF2  22DA               	addwfc	fsr2h,f,c
 10596  002EF4  0100               	movlb	0	; () banked
 10597  002EF6  C0C9  FFDE         	movff	?_angleToPulse,postinc2
 10598  002EFA  0100               	movlb	0	; () banked
 10599  002EFC  C0CA  FFDD         	movff	?_angleToPulse+1,postdec2
 10600  002F00                     l6680:
 10601                           
 10602                           ; BSR set to: 0
 10603                           ;servo.c: 49: }
 10604                           ;servo.c: 50: period-=pulse[i];
 10605  002F00  90D8               	bcf	status,0,c
 10606  002F02  0100               	movlb	0	; () banked
 10607  002F04  35E8               	rlcf	setAngle@i& (0+255),w,b
 10608  002F06  6ED9               	movwf	fsr2l,c
 10609  002F08  0100               	movlb	0	; () banked
 10610  002F0A  35E9               	rlcf	(setAngle@i+1)& (0+255),w,b
 10611  002F0C  6EDA               	movwf	fsr2h,c
 10612  002F0E  0E65               	movlw	low _pulse
 10613  002F10  26D9               	addwf	fsr2l,f,c
 10614  002F12  0E01               	movlw	high _pulse
 10615  002F14  22DA               	addwfc	fsr2h,f,c
 10616  002F16  50DE               	movf	postinc2,w,c
 10617  002F18  0100               	movlb	0	; () banked
 10618  002F1A  5FE6               	subwf	setAngle@period& (0+255),f,b
 10619  002F1C  50DD               	movf	postdec2,w,c
 10620  002F1E  0100               	movlb	0	; () banked
 10621  002F20  5BE7               	subwfb	(setAngle@period+1)& (0+255),f,b
 10622                           
 10623                           ; BSR set to: 0
 10624  002F22  0100               	movlb	0	; () banked
 10625  002F24  4BE8               	infsnz	setAngle@i& (0+255),f,b
 10626  002F26  2BE9               	incf	(setAngle@i+1)& (0+255),f,b
 10627  002F28                     l6684:
 10628                           
 10629                           ; BSR set to: 0
 10630  002F28  503C               	movf	_n,w,c
 10631  002F2A  0100               	movlb	0	; () banked
 10632  002F2C  5DE8               	subwf	setAngle@i& (0+255),w,b
 10633  002F2E  0100               	movlb	0	; () banked
 10634  002F30  51E9               	movf	(setAngle@i+1)& (0+255),w,b
 10635  002F32  0A80               	xorlw	128
 10636  002F34  0100               	movlb	0	; () banked
 10637  002F36  6FE4               	movwf	??_setAngle& (0+255),b
 10638  002F38  503D               	movf	_n+1,w,c
 10639  002F3A  0A80               	xorlw	128
 10640  002F3C  0100               	movlb	0	; () banked
 10641  002F3E  59E4               	subwfb	??_setAngle& (0+255),w,b
 10642  002F40  A0D8               	btfss	status,0,c
 10643  002F42  D7B3               	goto	l6676
 10644                           
 10645                           ; BSR set to: 0
 10646                           ;servo.c: 51: }
 10647                           ;servo.c: 52: pulse[n] = period;
 10648                           
 10649                           ; BSR set to: 0
 10650  002F44  90D8               	bcf	status,0,c
 10651  002F46  343C               	rlcf	_n,w,c
 10652  002F48  6ED9               	movwf	fsr2l,c
 10653  002F4A  343D               	rlcf	_n+1,w,c
 10654  002F4C  6EDA               	movwf	fsr2h,c
 10655  002F4E  0E65               	movlw	low _pulse
 10656  002F50  26D9               	addwf	fsr2l,f,c
 10657  002F52  0E01               	movlw	high _pulse
 10658  002F54  22DA               	addwfc	fsr2h,f,c
 10659  002F56  C0E6  FFDE         	movff	setAngle@period,postinc2
 10660  002F5A  C0E7  FFDD         	movff	setAngle@period+1,postdec2
 10661                           
 10662                           ; BSR set to: 0
 10663  002F5E  0012               	return		;funcret
 10664  002F60                     __end_of_setAngle:
 10665                           	opt stack 0
 10666                           tblptru	equ	0xFF8
 10667                           tblptrh	equ	0xFF7
 10668                           tblptrl	equ	0xFF6
 10669                           tablat	equ	0xFF5
 10670                           prodh	equ	0xFF4
 10671                           prodl	equ	0xFF3
 10672                           intcon	equ	0xFF2
 10673                           intcon3	equ	0xFF0
 10674                           postinc0	equ	0xFEE
 10675                           wreg	equ	0xFE8
 10676                           postdec1	equ	0xFE5
 10677                           fsr1l	equ	0xFE1
 10678                           indf2	equ	0xFDF
 10679                           postinc2	equ	0xFDE
 10680                           postdec2	equ	0xFDD
 10681                           fsr2h	equ	0xFDA
 10682                           fsr2l	equ	0xFD9
 10683                           status	equ	0xFD8
 10684                           
 10685 ;; *************** function _angleToPulse *****************
 10686 ;; Defined at:
 10687 ;;		line 36 in file "servo.c"
 10688 ;; Parameters:    Size  Location     Type
 10689 ;;  angle           2   73[BANK0 ] int 
 10690 ;; Auto vars:     Size  Location     Type
 10691 ;;  a000            4   92[BANK0 ] long 
 10692 ;;  a180            4   85[BANK0 ] long 
 10693 ;;  offset          4   81[BANK0 ] long 
 10694 ;; Return value:  Size  Location     Type
 10695 ;;                  4   73[BANK0 ] long 
 10696 ;; Registers used:
 10697 ;;		wreg, status,2, status,0, cstack
 10698 ;; Tracked objects:
 10699 ;;		On entry : 0/0
 10700 ;;		On exit  : 0/0
 10701 ;;		Unchanged: 0/0
 10702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10703 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10704 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10705 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10706 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10707 ;;Total ram usage:       23 bytes
 10708 ;; Hardware stack levels used:    1
 10709 ;; Hardware stack levels required when called:    5
 10710 ;; This function calls:
 10711 ;;		___altoft
 10712 ;;		___awtoft
 10713 ;;		___ftadd
 10714 ;;		___ftdiv
 10715 ;;		___ftmul
 10716 ;;		___fttol
 10717 ;; This function is called by:
 10718 ;;		_setAngle
 10719 ;; This function uses a non-reentrant model
 10720 ;;
 10721                           
 10722                           	psect	text40
 10723  002036                     __ptext40:
 10724                           	opt stack 0
 10725  002036                     _angleToPulse:
 10726                           	opt stack 23
 10727                           
 10728                           ;servo.c: 37: long offset = -600;
 10729                           
 10730                           ; BSR set to: 0
 10731                           ;incstack = 0
 10732  002036  0EA8               	movlw	168
 10733  002038  0100               	movlb	0	; () banked
 10734  00203A  6FD1               	movwf	angleToPulse@offset& (0+255),b
 10735  00203C  0EFD               	movlw	253
 10736  00203E  6FD2               	movwf	(angleToPulse@offset+1)& (0+255),b
 10737  002040  0EFF               	movlw	255
 10738  002042  6FD3               	movwf	(angleToPulse@offset+2)& (0+255),b
 10739  002044  0EFF               	movlw	255
 10740  002046  6FD4               	movwf	(angleToPulse@offset+3)& (0+255),b
 10741                           
 10742                           ;servo.c: 38: long a000 = 1250;
 10743  002048  0EE2               	movlw	226
 10744  00204A  0100               	movlb	0	; () banked
 10745  00204C  6FDC               	movwf	angleToPulse@a000& (0+255),b
 10746  00204E  0E04               	movlw	4
 10747  002050  6FDD               	movwf	(angleToPulse@a000+1)& (0+255),b
 10748  002052  0E00               	movlw	0
 10749  002054  6FDE               	movwf	(angleToPulse@a000+2)& (0+255),b
 10750  002056  0E00               	movlw	0
 10751  002058  6FDF               	movwf	(angleToPulse@a000+3)& (0+255),b
 10752                           
 10753                           ;servo.c: 39: long a180 = 6250;
 10754  00205A  0E6A               	movlw	106
 10755  00205C  0100               	movlb	0	; () banked
 10756  00205E  6FD5               	movwf	angleToPulse@a180& (0+255),b
 10757  002060  0E18               	movlw	24
 10758  002062  6FD6               	movwf	(angleToPulse@a180+1)& (0+255),b
 10759  002064  0E00               	movlw	0
 10760  002066  6FD7               	movwf	(angleToPulse@a180+2)& (0+255),b
 10761  002068  0E00               	movlw	0
 10762  00206A  6FD8               	movwf	(angleToPulse@a180+3)& (0+255),b
 10763                           
 10764                           ; BSR set to: 0
 10765                           ;servo.c: 41: return a000 + angle/180.0*(a180-a000) + offset;
 10766  00206C  C0DC  F0CD         	movff	angleToPulse@a000,??_angleToPulse
 10767  002070  C0DD  F0CE         	movff	angleToPulse@a000+1,??_angleToPulse+1
 10768  002074  C0DE  F0CF         	movff	angleToPulse@a000+2,??_angleToPulse+2
 10769  002078  C0DF  F0D0         	movff	angleToPulse@a000+3,??_angleToPulse+3
 10770  00207C  0100               	movlb	0	; () banked
 10771  00207E  1FCD               	comf	??_angleToPulse& (0+255),f,b
 10772  002080  1FCE               	comf	(??_angleToPulse+1)& (0+255),f,b
 10773  002082  1FCF               	comf	(??_angleToPulse+2)& (0+255),f,b
 10774  002084  1FD0               	comf	(??_angleToPulse+3)& (0+255),f,b
 10775  002086  2BCD               	incf	??_angleToPulse& (0+255),f,b
 10776  002088  0E00               	movlw	0
 10777  00208A  23CE               	addwfc	(??_angleToPulse+1)& (0+255),f,b
 10778  00208C  23CF               	addwfc	(??_angleToPulse+2)& (0+255),f,b
 10779  00208E  23D0               	addwfc	(??_angleToPulse+3)& (0+255),f,b
 10780  002090  0100               	movlb	0	; () banked
 10781  002092  51D5               	movf	angleToPulse@a180& (0+255),w,b
 10782  002094  0100               	movlb	0	; () banked
 10783  002096  25CD               	addwf	??_angleToPulse& (0+255),w,b
 10784  002098  6E2F               	movwf	___altoft@c,c
 10785  00209A  0100               	movlb	0	; () banked
 10786  00209C  51D6               	movf	(angleToPulse@a180+1)& (0+255),w,b
 10787  00209E  0100               	movlb	0	; () banked
 10788  0020A0  21CE               	addwfc	(??_angleToPulse+1)& (0+255),w,b
 10789  0020A2  6E30               	movwf	___altoft@c+1,c
 10790  0020A4  0100               	movlb	0	; () banked
 10791  0020A6  51D7               	movf	(angleToPulse@a180+2)& (0+255),w,b
 10792  0020A8  0100               	movlb	0	; () banked
 10793  0020AA  21CF               	addwfc	(??_angleToPulse+2)& (0+255),w,b
 10794  0020AC  6E31               	movwf	___altoft@c+2,c
 10795  0020AE  0100               	movlb	0	; () banked
 10796  0020B0  51D8               	movf	(angleToPulse@a180+3)& (0+255),w,b
 10797  0020B2  0100               	movlb	0	; () banked
 10798  0020B4  21D0               	addwfc	(??_angleToPulse+3)& (0+255),w,b
 10799  0020B6  6E32               	movwf	___altoft@c+3,c
 10800  0020B8  ECCE  F019         	call	___altoft	;wreg free
 10801  0020BC  C02F  F098         	movff	?___altoft,___ftmul@f2
 10802  0020C0  C030  F099         	movff	?___altoft+1,___ftmul@f2+1
 10803  0020C4  C031  F09A         	movff	?___altoft+2,___ftmul@f2+2
 10804  0020C8  0E00               	movlw	0
 10805  0020CA  0100               	movlb	0	; () banked
 10806  0020CC  6F89               	movwf	___ftdiv@f2& (0+255),b
 10807  0020CE  0E34               	movlw	52
 10808  0020D0  0100               	movlb	0	; () banked
 10809  0020D2  6F8A               	movwf	(___ftdiv@f2+1)& (0+255),b
 10810  0020D4  0E43               	movlw	67
 10811  0020D6  0100               	movlb	0	; () banked
 10812  0020D8  6F8B               	movwf	(___ftdiv@f2+2)& (0+255),b
 10813  0020DA  C0C9  F02F         	movff	angleToPulse@angle,___awtoft@c
 10814  0020DE  C0CA  F030         	movff	angleToPulse@angle+1,___awtoft@c+1
 10815  0020E2  EC78  F01C         	call	___awtoft	;wreg free
 10816  0020E6  C02F  F086         	movff	?___awtoft,___ftdiv@f1
 10817  0020EA  C030  F087         	movff	?___awtoft+1,___ftdiv@f1+1
 10818  0020EE  C031  F088         	movff	?___awtoft+2,___ftdiv@f1+2
 10819  0020F2  EC27  F012         	call	___ftdiv	;wreg free
 10820  0020F6  C086  F095         	movff	?___ftdiv,___ftmul@f1
 10821  0020FA  C087  F096         	movff	?___ftdiv+1,___ftmul@f1+1
 10822  0020FE  C088  F097         	movff	?___ftdiv+2,___ftmul@f1+2
 10823  002102  ECCA  F010         	call	___ftmul	;wreg free
 10824  002106  C095  F0B1         	movff	?___ftmul,___ftadd@f2
 10825  00210A  C096  F0B2         	movff	?___ftmul+1,___ftadd@f2+1
 10826  00210E  C097  F0B3         	movff	?___ftmul+2,___ftadd@f2+2
 10827  002112  C0DC  F02F         	movff	angleToPulse@a000,___altoft@c
 10828  002116  C0DD  F030         	movff	angleToPulse@a000+1,___altoft@c+1
 10829  00211A  C0DE  F031         	movff	angleToPulse@a000+2,___altoft@c+2
 10830  00211E  C0DF  F032         	movff	angleToPulse@a000+3,___altoft@c+3
 10831  002122  ECCE  F019         	call	___altoft	;wreg free
 10832  002126  C02F  F0AE         	movff	?___altoft,___ftadd@f1
 10833  00212A  C030  F0AF         	movff	?___altoft+1,___ftadd@f1+1
 10834  00212E  C031  F0B0         	movff	?___altoft+2,___ftadd@f1+2
 10835  002132  ECE7  F00E         	call	___ftadd	;wreg free
 10836  002136  C0AE  F0D9         	movff	?___ftadd,_angleToPulse$1353
 10837  00213A  C0AF  F0DA         	movff	?___ftadd+1,_angleToPulse$1353+1
 10838  00213E  C0B0  F0DB         	movff	?___ftadd+2,_angleToPulse$1353+2
 10839                           
 10840                           ;servo.c: 41: return a000 + angle/180.0*(a180-a000) + offset;
 10841  002142  C0D1  F02F         	movff	angleToPulse@offset,___altoft@c
 10842  002146  C0D2  F030         	movff	angleToPulse@offset+1,___altoft@c+1
 10843  00214A  C0D3  F031         	movff	angleToPulse@offset+2,___altoft@c+2
 10844  00214E  C0D4  F032         	movff	angleToPulse@offset+3,___altoft@c+3
 10845  002152  ECCE  F019         	call	___altoft	;wreg free
 10846  002156  C02F  F0B1         	movff	?___altoft,___ftadd@f2
 10847  00215A  C030  F0B2         	movff	?___altoft+1,___ftadd@f2+1
 10848  00215E  C031  F0B3         	movff	?___altoft+2,___ftadd@f2+2
 10849  002162  C0D9  F0AE         	movff	_angleToPulse$1353,___ftadd@f1
 10850  002166  C0DA  F0AF         	movff	_angleToPulse$1353+1,___ftadd@f1+1
 10851  00216A  C0DB  F0B0         	movff	_angleToPulse$1353+2,___ftadd@f1+2
 10852  00216E  ECE7  F00E         	call	___ftadd	;wreg free
 10853  002172  C0AE  F0BA         	movff	?___ftadd,___fttol@f1
 10854  002176  C0AF  F0BB         	movff	?___ftadd+1,___fttol@f1+1
 10855  00217A  C0B0  F0BC         	movff	?___ftadd+2,___fttol@f1+2
 10856  00217E  ECCD  F012         	call	___fttol	;wreg free
 10857  002182  C0BA  F0C9         	movff	?___fttol,?_angleToPulse
 10858  002186  C0BB  F0CA         	movff	?___fttol+1,?_angleToPulse+1
 10859  00218A  C0BC  F0CB         	movff	?___fttol+2,?_angleToPulse+2
 10860  00218E  C0BD  F0CC         	movff	?___fttol+3,?_angleToPulse+3
 10861  002192  0012               	return	
 10862  002194                     __end_of_angleToPulse:
 10863                           	opt stack 0
 10864                           tblptru	equ	0xFF8
 10865                           tblptrh	equ	0xFF7
 10866                           tblptrl	equ	0xFF6
 10867                           tablat	equ	0xFF5
 10868                           prodh	equ	0xFF4
 10869                           prodl	equ	0xFF3
 10870                           intcon	equ	0xFF2
 10871                           intcon3	equ	0xFF0
 10872                           postinc0	equ	0xFEE
 10873                           wreg	equ	0xFE8
 10874                           postdec1	equ	0xFE5
 10875                           fsr1l	equ	0xFE1
 10876                           indf2	equ	0xFDF
 10877                           postinc2	equ	0xFDE
 10878                           postdec2	equ	0xFDD
 10879                           fsr2h	equ	0xFDA
 10880                           fsr2l	equ	0xFD9
 10881                           status	equ	0xFD8
 10882                           
 10883 ;; *************** function ___fttol *****************
 10884 ;; Defined at:
 10885 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 10886 ;; Parameters:    Size  Location     Type
 10887 ;;  f1              3   58[BANK0 ] float 
 10888 ;; Auto vars:     Size  Location     Type
 10889 ;;  lval            4   68[BANK0 ] unsigned long 
 10890 ;;  exp1            1   72[BANK0 ] unsigned char 
 10891 ;;  sign1           1   67[BANK0 ] unsigned char 
 10892 ;; Return value:  Size  Location     Type
 10893 ;;                  4   58[BANK0 ] long 
 10894 ;; Registers used:
 10895 ;;		wreg, status,2, status,0
 10896 ;; Tracked objects:
 10897 ;;		On entry : 0/0
 10898 ;;		On exit  : 0/0
 10899 ;;		Unchanged: 0/0
 10900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10901 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10902 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10903 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10904 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10905 ;;Total ram usage:       15 bytes
 10906 ;; Hardware stack levels used:    1
 10907 ;; Hardware stack levels required when called:    3
 10908 ;; This function calls:
 10909 ;;		Nothing
 10910 ;; This function is called by:
 10911 ;;		_sortBattery
 10912 ;;		_angleToPulse
 10913 ;;		_printf
 10914 ;; This function uses a non-reentrant model
 10915 ;;
 10916                           
 10917                           	psect	text41
 10918  00259A                     __ptext41:
 10919                           	opt stack 0
 10920  00259A                     ___fttol:
 10921                           	opt stack 24
 10922                           
 10923                           ;incstack = 0
 10924  00259A  C0BC  F0BE         	movff	___fttol@f1+2,??___fttol
 10925  00259E  0100               	movlb	0	; () banked
 10926  0025A0  6BBF               	clrf	(??___fttol+1)& (0+255),b
 10927  0025A2  6BC0               	clrf	(??___fttol+2)& (0+255),b
 10928  0025A4  0100               	movlb	0	; () banked
 10929  0025A6  35BB               	rlcf	(___fttol@f1+1)& (0+255),w,b
 10930  0025A8  0100               	movlb	0	; () banked
 10931  0025AA  37BE               	rlcf	??___fttol& (0+255),f,b
 10932  0025AC  E301               	bnc	u5911
 10933  0025AE  81BF               	bsf	(??___fttol+1)& (0+255),0,b
 10934  0025B0                     u5911:
 10935  0025B0  0100               	movlb	0	; () banked
 10936  0025B2  51BE               	movf	??___fttol& (0+255),w,b
 10937  0025B4  0100               	movlb	0	; () banked
 10938  0025B6  6FC8               	movwf	___fttol@exp1& (0+255),b
 10939  0025B8  0100               	movlb	0	; () banked
 10940  0025BA  51C8               	movf	___fttol@exp1& (0+255),w,b
 10941  0025BC  A4D8               	btfss	status,2,c
 10942  0025BE  D00A               	goto	l5940
 10943                           
 10944                           ; BSR set to: 0
 10945  0025C0  0E00               	movlw	0
 10946  0025C2  0100               	movlb	0	; () banked
 10947  0025C4  6FBA               	movwf	?___fttol& (0+255),b
 10948  0025C6  0E00               	movlw	0
 10949  0025C8  6FBB               	movwf	(?___fttol+1)& (0+255),b
 10950  0025CA  0E00               	movlw	0
 10951  0025CC  6FBC               	movwf	(?___fttol+2)& (0+255),b
 10952  0025CE  0E00               	movlw	0
 10953  0025D0  6FBD               	movwf	(?___fttol+3)& (0+255),b
 10954                           
 10955                           ; BSR set to: 0
 10956  0025D2  0012               	return	
 10957  0025D4                     l5940:
 10958                           
 10959                           ; BSR set to: 0
 10960  0025D4  0E17               	movlw	23
 10961  0025D6  0100               	movlb	0	; () banked
 10962  0025D8  6FBE               	movwf	??___fttol& (0+255),b
 10963  0025DA  C0BA  F0BF         	movff	___fttol@f1,??___fttol+1
 10964  0025DE  C0BB  F0C0         	movff	___fttol@f1+1,??___fttol+2
 10965  0025E2  C0BC  F0C1         	movff	___fttol@f1+2,??___fttol+3
 10966  0025E6  0100               	movlb	0	; () banked
 10967  0025E8  29BE               	incf	??___fttol& (0+255),w,b
 10968  0025EA  0100               	movlb	0	; () banked
 10969  0025EC  6FC2               	movwf	(??___fttol+4)& (0+255),b
 10970  0025EE  D005               	goto	u5930
 10971  0025F0                     u5935:
 10972  0025F0  0100               	movlb	0	; () banked
 10973  0025F2  90D8               	bcf	status,0,c
 10974  0025F4  33C1               	rrcf	(??___fttol+3)& (0+255),f,b
 10975  0025F6  33C0               	rrcf	(??___fttol+2)& (0+255),f,b
 10976  0025F8  33BF               	rrcf	(??___fttol+1)& (0+255),f,b
 10977  0025FA                     u5930:
 10978  0025FA  0100               	movlb	0	; () banked
 10979  0025FC  2FC2               	decfsz	(??___fttol+4)& (0+255),f,b
 10980  0025FE  D7F8               	goto	u5935
 10981  002600  0100               	movlb	0	; () banked
 10982  002602  51BF               	movf	(??___fttol+1)& (0+255),w,b
 10983  002604  0100               	movlb	0	; () banked
 10984  002606  6FC3               	movwf	___fttol@sign1& (0+255),b
 10985                           
 10986                           ; BSR set to: 0
 10987  002608  0100               	movlb	0	; () banked
 10988  00260A  8FBB               	bsf	(___fttol@f1+1)& (0+255),7,b
 10989                           
 10990                           ; BSR set to: 0
 10991  00260C  0EFF               	movlw	255
 10992  00260E  0100               	movlb	0	; () banked
 10993  002610  17BA               	andwf	___fttol@f1& (0+255),f,b
 10994  002612  0EFF               	movlw	255
 10995  002614  0100               	movlb	0	; () banked
 10996  002616  17BB               	andwf	(___fttol@f1+1)& (0+255),f,b
 10997  002618  0E00               	movlw	0
 10998  00261A  0100               	movlb	0	; () banked
 10999  00261C  17BC               	andwf	(___fttol@f1+2)& (0+255),f,b
 11000                           
 11001                           ; BSR set to: 0
 11002  00261E  0100               	movlb	0	; () banked
 11003  002620  51BA               	movf	___fttol@f1& (0+255),w,b
 11004  002622  0100               	movlb	0	; () banked
 11005  002624  6FC4               	movwf	___fttol@lval& (0+255),b
 11006  002626  0100               	movlb	0	; () banked
 11007  002628  51BB               	movf	(___fttol@f1+1)& (0+255),w,b
 11008  00262A  0100               	movlb	0	; () banked
 11009  00262C  6FC5               	movwf	(___fttol@lval+1)& (0+255),b
 11010  00262E  0100               	movlb	0	; () banked
 11011  002630  51BC               	movf	(___fttol@f1+2)& (0+255),w,b
 11012  002632  0100               	movlb	0	; () banked
 11013  002634  6FC6               	movwf	(___fttol@lval+2)& (0+255),b
 11014  002636  0100               	movlb	0	; () banked
 11015  002638  6BC7               	clrf	(___fttol@lval+3)& (0+255),b
 11016                           
 11017                           ; BSR set to: 0
 11018  00263A  0E8E               	movlw	142
 11019  00263C  0100               	movlb	0	; () banked
 11020  00263E  5FC8               	subwf	___fttol@exp1& (0+255),f,b
 11021                           
 11022                           ; BSR set to: 0
 11023  002640  0100               	movlb	0	; () banked
 11024  002642  AFC8               	btfss	___fttol@exp1& (0+255),7,b
 11025  002644  D01A               	goto	l5962
 11026                           
 11027                           ; BSR set to: 0
 11028  002646  0100               	movlb	0	; () banked
 11029  002648  51C8               	movf	___fttol@exp1& (0+255),w,b
 11030  00264A  0A80               	xorlw	128
 11031  00264C  0F8F               	addlw	143
 11032  00264E  B0D8               	btfsc	status,0,c
 11033  002650  D00A               	goto	l5958
 11034                           
 11035                           ; BSR set to: 0
 11036  002652  0E00               	movlw	0
 11037  002654  0100               	movlb	0	; () banked
 11038  002656  6FBA               	movwf	?___fttol& (0+255),b
 11039  002658  0E00               	movlw	0
 11040  00265A  6FBB               	movwf	(?___fttol+1)& (0+255),b
 11041  00265C  0E00               	movlw	0
 11042  00265E  6FBC               	movwf	(?___fttol+2)& (0+255),b
 11043  002660  0E00               	movlw	0
 11044  002662  6FBD               	movwf	(?___fttol+3)& (0+255),b
 11045                           
 11046                           ; BSR set to: 0
 11047  002664  0012               	return	
 11048  002666                     l5958:
 11049                           
 11050                           ; BSR set to: 0
 11051  002666  0100               	movlb	0	; () banked
 11052  002668  90D8               	bcf	status,0,c
 11053  00266A  33C7               	rrcf	(___fttol@lval+3)& (0+255),f,b
 11054  00266C  33C6               	rrcf	(___fttol@lval+2)& (0+255),f,b
 11055  00266E  33C5               	rrcf	(___fttol@lval+1)& (0+255),f,b
 11056  002670  33C4               	rrcf	___fttol@lval& (0+255),f,b
 11057                           
 11058                           ; BSR set to: 0
 11059  002672  0100               	movlb	0	; () banked
 11060  002674  3FC8               	incfsz	___fttol@exp1& (0+255),f,b
 11061  002676  D7F7               	goto	l5958
 11062                           
 11063                           ; BSR set to: 0
 11064  002678  D01B               	goto	l5972
 11065  00267A                     l5962:
 11066                           
 11067                           ; BSR set to: 0
 11068  00267A  0E17               	movlw	23
 11069  00267C  0100               	movlb	0	; () banked
 11070  00267E  65C8               	cpfsgt	___fttol@exp1& (0+255),b
 11071  002680  D012               	goto	l5970
 11072                           
 11073                           ; BSR set to: 0
 11074  002682  0E00               	movlw	0
 11075  002684  0100               	movlb	0	; () banked
 11076  002686  6FBA               	movwf	?___fttol& (0+255),b
 11077  002688  0E00               	movlw	0
 11078  00268A  6FBB               	movwf	(?___fttol+1)& (0+255),b
 11079  00268C  0E00               	movlw	0
 11080  00268E  6FBC               	movwf	(?___fttol+2)& (0+255),b
 11081  002690  0E00               	movlw	0
 11082  002692  6FBD               	movwf	(?___fttol+3)& (0+255),b
 11083                           
 11084                           ; BSR set to: 0
 11085  002694  0012               	return	
 11086  002696                     l5968:
 11087                           
 11088                           ; BSR set to: 0
 11089  002696  0100               	movlb	0	; () banked
 11090  002698  90D8               	bcf	status,0,c
 11091  00269A  37C4               	rlcf	___fttol@lval& (0+255),f,b
 11092  00269C  37C5               	rlcf	(___fttol@lval+1)& (0+255),f,b
 11093  00269E  37C6               	rlcf	(___fttol@lval+2)& (0+255),f,b
 11094  0026A0  37C7               	rlcf	(___fttol@lval+3)& (0+255),f,b
 11095  0026A2  0100               	movlb	0	; () banked
 11096  0026A4  07C8               	decf	___fttol@exp1& (0+255),f,b
 11097  0026A6                     l5970:
 11098                           
 11099                           ; BSR set to: 0
 11100  0026A6  0100               	movlb	0	; () banked
 11101  0026A8  51C8               	movf	___fttol@exp1& (0+255),w,b
 11102  0026AA  0100               	movlb	0	; () banked
 11103  0026AC  A4D8               	btfss	status,2,c
 11104  0026AE  D7F3               	goto	l5968
 11105  0026B0                     l5972:
 11106                           
 11107                           ; BSR set to: 0
 11108  0026B0  0100               	movlb	0	; () banked
 11109  0026B2  51C3               	movf	___fttol@sign1& (0+255),w,b
 11110  0026B4  0100               	movlb	0	; () banked
 11111  0026B6  B4D8               	btfsc	status,2,c
 11112  0026B8  D009               	goto	l5976
 11113                           
 11114                           ; BSR set to: 0
 11115  0026BA  0100               	movlb	0	; () banked
 11116  0026BC  1FC7               	comf	(___fttol@lval+3)& (0+255),f,b
 11117  0026BE  1FC6               	comf	(___fttol@lval+2)& (0+255),f,b
 11118  0026C0  1FC5               	comf	(___fttol@lval+1)& (0+255),f,b
 11119  0026C2  6DC4               	negf	___fttol@lval& (0+255),b
 11120  0026C4  0E00               	movlw	0
 11121  0026C6  23C5               	addwfc	(___fttol@lval+1)& (0+255),f,b
 11122  0026C8  23C6               	addwfc	(___fttol@lval+2)& (0+255),f,b
 11123  0026CA  23C7               	addwfc	(___fttol@lval+3)& (0+255),f,b
 11124  0026CC                     l5976:
 11125                           
 11126                           ; BSR set to: 0
 11127  0026CC  C0C4  F0BA         	movff	___fttol@lval,?___fttol
 11128  0026D0  C0C5  F0BB         	movff	___fttol@lval+1,?___fttol+1
 11129  0026D4  C0C6  F0BC         	movff	___fttol@lval+2,?___fttol+2
 11130  0026D8  C0C7  F0BD         	movff	___fttol@lval+3,?___fttol+3
 11131  0026DC  0012               	return	
 11132  0026DE                     __end_of___fttol:
 11133                           	opt stack 0
 11134                           tblptru	equ	0xFF8
 11135                           tblptrh	equ	0xFF7
 11136                           tblptrl	equ	0xFF6
 11137                           tablat	equ	0xFF5
 11138                           prodh	equ	0xFF4
 11139                           prodl	equ	0xFF3
 11140                           intcon	equ	0xFF2
 11141                           intcon3	equ	0xFF0
 11142                           postinc0	equ	0xFEE
 11143                           wreg	equ	0xFE8
 11144                           postdec1	equ	0xFE5
 11145                           fsr1l	equ	0xFE1
 11146                           indf2	equ	0xFDF
 11147                           postinc2	equ	0xFDE
 11148                           postdec2	equ	0xFDD
 11149                           fsr2h	equ	0xFDA
 11150                           fsr2l	equ	0xFD9
 11151                           status	equ	0xFD8
 11152                           
 11153 ;; *************** function ___ftmul *****************
 11154 ;; Defined at:
 11155 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 11156 ;; Parameters:    Size  Location     Type
 11157 ;;  f1              3   21[BANK0 ] float 
 11158 ;;  f2              3   24[BANK0 ] float 
 11159 ;; Auto vars:     Size  Location     Type
 11160 ;;  f3_as_produc    3   31[BANK0 ] unsigned um
 11161 ;;  sign            1   35[BANK0 ] unsigned char 
 11162 ;;  cntr            1   34[BANK0 ] unsigned char 
 11163 ;;  exp             1   30[BANK0 ] unsigned char 
 11164 ;; Return value:  Size  Location     Type
 11165 ;;                  3   21[BANK0 ] float 
 11166 ;; Registers used:
 11167 ;;		wreg, status,2, status,0, cstack
 11168 ;; Tracked objects:
 11169 ;;		On entry : 0/0
 11170 ;;		On exit  : 0/0
 11171 ;;		Unchanged: 0/0
 11172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11173 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11174 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11175 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11176 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11177 ;;Total ram usage:       15 bytes
 11178 ;; Hardware stack levels used:    1
 11179 ;; Hardware stack levels required when called:    4
 11180 ;; This function calls:
 11181 ;;		___ftpack
 11182 ;; This function is called by:
 11183 ;;		_sortBattery
 11184 ;;		_angleToPulse
 11185 ;;		_fround
 11186 ;;		_scale
 11187 ;;		_printf
 11188 ;; This function uses a non-reentrant model
 11189 ;;
 11190                           
 11191                           	psect	text42
 11192  002194                     __ptext42:
 11193                           	opt stack 0
 11194  002194                     ___ftmul:
 11195                           	opt stack 23
 11196                           
 11197                           ; BSR set to: 0
 11198                           ;incstack = 0
 11199  002194  C097  F09B         	movff	___ftmul@f1+2,??___ftmul
 11200  002198  0100               	movlb	0	; () banked
 11201  00219A  6B9C               	clrf	(??___ftmul+1)& (0+255),b
 11202  00219C  6B9D               	clrf	(??___ftmul+2)& (0+255),b
 11203  00219E  0100               	movlb	0	; () banked
 11204  0021A0  3596               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 11205  0021A2  0100               	movlb	0	; () banked
 11206  0021A4  379B               	rlcf	??___ftmul& (0+255),f,b
 11207  0021A6  E301               	bnc	u5721
 11208  0021A8  819C               	bsf	(??___ftmul+1)& (0+255),0,b
 11209  0021AA                     u5721:
 11210  0021AA  0100               	movlb	0	; () banked
 11211  0021AC  519B               	movf	??___ftmul& (0+255),w,b
 11212  0021AE  0100               	movlb	0	; () banked
 11213  0021B0  6F9E               	movwf	___ftmul@exp& (0+255),b
 11214  0021B2  0100               	movlb	0	; () banked
 11215  0021B4  519E               	movf	___ftmul@exp& (0+255),w,b
 11216  0021B6  A4D8               	btfss	status,2,c
 11217  0021B8  D00A               	goto	l5800
 11218                           
 11219                           ; BSR set to: 0
 11220  0021BA  0E00               	movlw	0
 11221  0021BC  0100               	movlb	0	; () banked
 11222  0021BE  6F95               	movwf	?___ftmul& (0+255),b
 11223  0021C0  0E00               	movlw	0
 11224  0021C2  0100               	movlb	0	; () banked
 11225  0021C4  6F96               	movwf	(?___ftmul+1)& (0+255),b
 11226  0021C6  0E00               	movlw	0
 11227  0021C8  0100               	movlb	0	; () banked
 11228  0021CA  6F97               	movwf	(?___ftmul+2)& (0+255),b
 11229                           
 11230                           ; BSR set to: 0
 11231  0021CC  0012               	return	
 11232  0021CE                     l5800:
 11233                           
 11234                           ; BSR set to: 0
 11235  0021CE  C09A  F09B         	movff	___ftmul@f2+2,??___ftmul
 11236  0021D2  0100               	movlb	0	; () banked
 11237  0021D4  6B9C               	clrf	(??___ftmul+1)& (0+255),b
 11238  0021D6  6B9D               	clrf	(??___ftmul+2)& (0+255),b
 11239  0021D8  0100               	movlb	0	; () banked
 11240  0021DA  3599               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 11241  0021DC  0100               	movlb	0	; () banked
 11242  0021DE  379B               	rlcf	??___ftmul& (0+255),f,b
 11243  0021E0  E301               	bnc	u5741
 11244  0021E2  819C               	bsf	(??___ftmul+1)& (0+255),0,b
 11245  0021E4                     u5741:
 11246  0021E4  0100               	movlb	0	; () banked
 11247  0021E6  519B               	movf	??___ftmul& (0+255),w,b
 11248  0021E8  0100               	movlb	0	; () banked
 11249  0021EA  6FA3               	movwf	___ftmul@sign& (0+255),b
 11250  0021EC  0100               	movlb	0	; () banked
 11251  0021EE  51A3               	movf	___ftmul@sign& (0+255),w,b
 11252  0021F0  A4D8               	btfss	status,2,c
 11253  0021F2  D00A               	goto	l5806
 11254                           
 11255                           ; BSR set to: 0
 11256  0021F4  0E00               	movlw	0
 11257  0021F6  0100               	movlb	0	; () banked
 11258  0021F8  6F95               	movwf	?___ftmul& (0+255),b
 11259  0021FA  0E00               	movlw	0
 11260  0021FC  0100               	movlb	0	; () banked
 11261  0021FE  6F96               	movwf	(?___ftmul+1)& (0+255),b
 11262  002200  0E00               	movlw	0
 11263  002202  0100               	movlb	0	; () banked
 11264  002204  6F97               	movwf	(?___ftmul+2)& (0+255),b
 11265                           
 11266                           ; BSR set to: 0
 11267  002206  0012               	return	
 11268  002208                     l5806:
 11269                           
 11270                           ; BSR set to: 0
 11271  002208  0100               	movlb	0	; () banked
 11272  00220A  51A3               	movf	___ftmul@sign& (0+255),w,b
 11273  00220C  0F7B               	addlw	123
 11274  00220E  0100               	movlb	0	; () banked
 11275  002210  279E               	addwf	___ftmul@exp& (0+255),f,b
 11276                           
 11277                           ; BSR set to: 0
 11278  002212  C097  F0A3         	movff	___ftmul@f1+2,___ftmul@sign
 11279  002216  0100               	movlb	0	; () banked
 11280  002218  519A               	movf	(___ftmul@f2+2)& (0+255),w,b
 11281  00221A  0100               	movlb	0	; () banked
 11282  00221C  1BA3               	xorwf	___ftmul@sign& (0+255),f,b
 11283  00221E  0E80               	movlw	128
 11284  002220  0100               	movlb	0	; () banked
 11285  002222  17A3               	andwf	___ftmul@sign& (0+255),f,b
 11286                           
 11287                           ; BSR set to: 0
 11288  002224  0100               	movlb	0	; () banked
 11289  002226  8F96               	bsf	(___ftmul@f1+1)& (0+255),7,b
 11290                           
 11291                           ; BSR set to: 0
 11292  002228  0100               	movlb	0	; () banked
 11293  00222A  8F99               	bsf	(___ftmul@f2+1)& (0+255),7,b
 11294                           
 11295                           ; BSR set to: 0
 11296  00222C  0EFF               	movlw	255
 11297  00222E  0100               	movlb	0	; () banked
 11298  002230  1798               	andwf	___ftmul@f2& (0+255),f,b
 11299  002232  0EFF               	movlw	255
 11300  002234  0100               	movlb	0	; () banked
 11301  002236  1799               	andwf	(___ftmul@f2+1)& (0+255),f,b
 11302  002238  0E00               	movlw	0
 11303  00223A  0100               	movlb	0	; () banked
 11304  00223C  179A               	andwf	(___ftmul@f2+2)& (0+255),f,b
 11305                           
 11306                           ; BSR set to: 0
 11307  00223E  0E00               	movlw	0
 11308  002240  0100               	movlb	0	; () banked
 11309  002242  6F9F               	movwf	___ftmul@f3_as_product& (0+255),b
 11310  002244  0E00               	movlw	0
 11311  002246  0100               	movlb	0	; () banked
 11312  002248  6FA0               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 11313  00224A  0E00               	movlw	0
 11314  00224C  0100               	movlb	0	; () banked
 11315  00224E  6FA1               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 11316                           
 11317                           ; BSR set to: 0
 11318  002250  0E07               	movlw	7
 11319  002252  0100               	movlb	0	; () banked
 11320  002254  6FA2               	movwf	___ftmul@cntr& (0+255),b
 11321  002256                     l5820:
 11322                           
 11323                           ; BSR set to: 0
 11324  002256  0100               	movlb	0	; () banked
 11325  002258  A195               	btfss	___ftmul@f1& (0+255),0,b
 11326  00225A  D00C               	goto	l5824
 11327                           
 11328                           ; BSR set to: 0
 11329  00225C  0100               	movlb	0	; () banked
 11330  00225E  5198               	movf	___ftmul@f2& (0+255),w,b
 11331  002260  0100               	movlb	0	; () banked
 11332  002262  279F               	addwf	___ftmul@f3_as_product& (0+255),f,b
 11333  002264  0100               	movlb	0	; () banked
 11334  002266  5199               	movf	(___ftmul@f2+1)& (0+255),w,b
 11335  002268  0100               	movlb	0	; () banked
 11336  00226A  23A0               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 11337  00226C  0100               	movlb	0	; () banked
 11338  00226E  519A               	movf	(___ftmul@f2+2)& (0+255),w,b
 11339  002270  0100               	movlb	0	; () banked
 11340  002272  23A1               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 11341  002274                     l5824:
 11342                           
 11343                           ; BSR set to: 0
 11344  002274  0100               	movlb	0	; () banked
 11345  002276  90D8               	bcf	status,0,c
 11346  002278  3397               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 11347  00227A  3396               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 11348  00227C  3395               	rrcf	___ftmul@f1& (0+255),f,b
 11349  00227E  0100               	movlb	0	; () banked
 11350  002280  90D8               	bcf	status,0,c
 11351  002282  3798               	rlcf	___ftmul@f2& (0+255),f,b
 11352  002284  3799               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 11353  002286  379A               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 11354                           
 11355                           ; BSR set to: 0
 11356  002288  0100               	movlb	0	; () banked
 11357  00228A  2FA2               	decfsz	___ftmul@cntr& (0+255),f,b
 11358  00228C  D7E4               	goto	l5820
 11359                           
 11360                           ; BSR set to: 0
 11361                           
 11362                           ; BSR set to: 0
 11363  00228E  0E09               	movlw	9
 11364  002290  0100               	movlb	0	; () banked
 11365  002292  6FA2               	movwf	___ftmul@cntr& (0+255),b
 11366  002294                     l5830:
 11367                           
 11368                           ; BSR set to: 0
 11369  002294  0100               	movlb	0	; () banked
 11370  002296  A195               	btfss	___ftmul@f1& (0+255),0,b
 11371  002298  D00C               	goto	l5834
 11372                           
 11373                           ; BSR set to: 0
 11374  00229A  0100               	movlb	0	; () banked
 11375  00229C  5198               	movf	___ftmul@f2& (0+255),w,b
 11376  00229E  0100               	movlb	0	; () banked
 11377  0022A0  279F               	addwf	___ftmul@f3_as_product& (0+255),f,b
 11378  0022A2  0100               	movlb	0	; () banked
 11379  0022A4  5199               	movf	(___ftmul@f2+1)& (0+255),w,b
 11380  0022A6  0100               	movlb	0	; () banked
 11381  0022A8  23A0               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 11382  0022AA  0100               	movlb	0	; () banked
 11383  0022AC  519A               	movf	(___ftmul@f2+2)& (0+255),w,b
 11384  0022AE  0100               	movlb	0	; () banked
 11385  0022B0  23A1               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 11386  0022B2                     l5834:
 11387                           
 11388                           ; BSR set to: 0
 11389  0022B2  0100               	movlb	0	; () banked
 11390  0022B4  90D8               	bcf	status,0,c
 11391  0022B6  3397               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 11392  0022B8  3396               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 11393  0022BA  3395               	rrcf	___ftmul@f1& (0+255),f,b
 11394  0022BC  0100               	movlb	0	; () banked
 11395  0022BE  90D8               	bcf	status,0,c
 11396  0022C0  33A1               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 11397  0022C2  33A0               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 11398  0022C4  339F               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 11399                           
 11400                           ; BSR set to: 0
 11401  0022C6  0100               	movlb	0	; () banked
 11402  0022C8  2FA2               	decfsz	___ftmul@cntr& (0+255),f,b
 11403  0022CA  D7E4               	goto	l5830
 11404                           
 11405                           ; BSR set to: 0
 11406                           
 11407                           ; BSR set to: 0
 11408  0022CC  C09F  F027         	movff	___ftmul@f3_as_product,___ftpack@arg
 11409  0022D0  C0A0  F028         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 11410  0022D4  C0A1  F029         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 11411  0022D8  C09E  F02A         	movff	___ftmul@exp,___ftpack@exp
 11412  0022DC  C0A3  F02B         	movff	___ftmul@sign,___ftpack@sign
 11413  0022E0  ECDC  F018         	call	___ftpack	;wreg free
 11414  0022E4  C027  F095         	movff	?___ftpack,?___ftmul
 11415  0022E8  C028  F096         	movff	?___ftpack+1,?___ftmul+1
 11416  0022EC  C029  F097         	movff	?___ftpack+2,?___ftmul+2
 11417  0022F0  0012               	return	
 11418  0022F2                     __end_of___ftmul:
 11419                           	opt stack 0
 11420                           tblptru	equ	0xFF8
 11421                           tblptrh	equ	0xFF7
 11422                           tblptrl	equ	0xFF6
 11423                           tablat	equ	0xFF5
 11424                           prodh	equ	0xFF4
 11425                           prodl	equ	0xFF3
 11426                           intcon	equ	0xFF2
 11427                           intcon3	equ	0xFF0
 11428                           postinc0	equ	0xFEE
 11429                           wreg	equ	0xFE8
 11430                           postdec1	equ	0xFE5
 11431                           fsr1l	equ	0xFE1
 11432                           indf2	equ	0xFDF
 11433                           postinc2	equ	0xFDE
 11434                           postdec2	equ	0xFDD
 11435                           fsr2h	equ	0xFDA
 11436                           fsr2l	equ	0xFD9
 11437                           status	equ	0xFD8
 11438                           
 11439 ;; *************** function ___ftdiv *****************
 11440 ;; Defined at:
 11441 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 11442 ;; Parameters:    Size  Location     Type
 11443 ;;  f1              3    6[BANK0 ] float 
 11444 ;;  f2              3    9[BANK0 ] float 
 11445 ;; Auto vars:     Size  Location     Type
 11446 ;;  f3              3   16[BANK0 ] float 
 11447 ;;  sign            1   20[BANK0 ] unsigned char 
 11448 ;;  exp             1   19[BANK0 ] unsigned char 
 11449 ;;  cntr            1   15[BANK0 ] unsigned char 
 11450 ;; Return value:  Size  Location     Type
 11451 ;;                  3    6[BANK0 ] float 
 11452 ;; Registers used:
 11453 ;;		wreg, status,2, status,0, cstack
 11454 ;; Tracked objects:
 11455 ;;		On entry : 0/0
 11456 ;;		On exit  : 0/0
 11457 ;;		Unchanged: 0/0
 11458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11459 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11460 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11461 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11462 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11463 ;;Total ram usage:       15 bytes
 11464 ;; Hardware stack levels used:    1
 11465 ;; Hardware stack levels required when called:    4
 11466 ;; This function calls:
 11467 ;;		___ftpack
 11468 ;; This function is called by:
 11469 ;;		_sortBattery
 11470 ;;		_angleToPulse
 11471 ;; This function uses a non-reentrant model
 11472 ;;
 11473                           
 11474                           	psect	text43
 11475  00244E                     __ptext43:
 11476                           	opt stack 0
 11477  00244E                     ___ftdiv:
 11478                           	opt stack 23
 11479                           
 11480                           ;incstack = 0
 11481  00244E  C088  F08C         	movff	___ftdiv@f1+2,??___ftdiv
 11482  002452  0100               	movlb	0	; () banked
 11483  002454  6B8D               	clrf	(??___ftdiv+1)& (0+255),b
 11484  002456  6B8E               	clrf	(??___ftdiv+2)& (0+255),b
 11485  002458  0100               	movlb	0	; () banked
 11486  00245A  3587               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 11487  00245C  0100               	movlb	0	; () banked
 11488  00245E  378C               	rlcf	??___ftdiv& (0+255),f,b
 11489  002460  E301               	bnc	u5671
 11490  002462  818D               	bsf	(??___ftdiv+1)& (0+255),0,b
 11491  002464                     u5671:
 11492  002464  0100               	movlb	0	; () banked
 11493  002466  518C               	movf	??___ftdiv& (0+255),w,b
 11494  002468  0100               	movlb	0	; () banked
 11495  00246A  6F93               	movwf	___ftdiv@exp& (0+255),b
 11496  00246C  0100               	movlb	0	; () banked
 11497  00246E  5193               	movf	___ftdiv@exp& (0+255),w,b
 11498  002470  A4D8               	btfss	status,2,c
 11499  002472  D00A               	goto	l5754
 11500                           
 11501                           ; BSR set to: 0
 11502  002474  0E00               	movlw	0
 11503  002476  0100               	movlb	0	; () banked
 11504  002478  6F86               	movwf	?___ftdiv& (0+255),b
 11505  00247A  0E00               	movlw	0
 11506  00247C  0100               	movlb	0	; () banked
 11507  00247E  6F87               	movwf	(?___ftdiv+1)& (0+255),b
 11508  002480  0E00               	movlw	0
 11509  002482  0100               	movlb	0	; () banked
 11510  002484  6F88               	movwf	(?___ftdiv+2)& (0+255),b
 11511                           
 11512                           ; BSR set to: 0
 11513  002486  0012               	return	
 11514  002488                     l5754:
 11515                           
 11516                           ; BSR set to: 0
 11517  002488  C08B  F08C         	movff	___ftdiv@f2+2,??___ftdiv
 11518  00248C  0100               	movlb	0	; () banked
 11519  00248E  6B8D               	clrf	(??___ftdiv+1)& (0+255),b
 11520  002490  6B8E               	clrf	(??___ftdiv+2)& (0+255),b
 11521  002492  0100               	movlb	0	; () banked
 11522  002494  358A               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 11523  002496  0100               	movlb	0	; () banked
 11524  002498  378C               	rlcf	??___ftdiv& (0+255),f,b
 11525  00249A  E301               	bnc	u5691
 11526  00249C  818D               	bsf	(??___ftdiv+1)& (0+255),0,b
 11527  00249E                     u5691:
 11528  00249E  0100               	movlb	0	; () banked
 11529  0024A0  518C               	movf	??___ftdiv& (0+255),w,b
 11530  0024A2  0100               	movlb	0	; () banked
 11531  0024A4  6F94               	movwf	___ftdiv@sign& (0+255),b
 11532  0024A6  0100               	movlb	0	; () banked
 11533  0024A8  5194               	movf	___ftdiv@sign& (0+255),w,b
 11534  0024AA  A4D8               	btfss	status,2,c
 11535  0024AC  D00A               	goto	l5760
 11536                           
 11537                           ; BSR set to: 0
 11538  0024AE  0E00               	movlw	0
 11539  0024B0  0100               	movlb	0	; () banked
 11540  0024B2  6F86               	movwf	?___ftdiv& (0+255),b
 11541  0024B4  0E00               	movlw	0
 11542  0024B6  0100               	movlb	0	; () banked
 11543  0024B8  6F87               	movwf	(?___ftdiv+1)& (0+255),b
 11544  0024BA  0E00               	movlw	0
 11545  0024BC  0100               	movlb	0	; () banked
 11546  0024BE  6F88               	movwf	(?___ftdiv+2)& (0+255),b
 11547                           
 11548                           ; BSR set to: 0
 11549  0024C0  0012               	return	
 11550  0024C2                     l5760:
 11551                           
 11552                           ; BSR set to: 0
 11553  0024C2  0E00               	movlw	0
 11554  0024C4  0100               	movlb	0	; () banked
 11555  0024C6  6F90               	movwf	___ftdiv@f3& (0+255),b
 11556  0024C8  0E00               	movlw	0
 11557  0024CA  0100               	movlb	0	; () banked
 11558  0024CC  6F91               	movwf	(___ftdiv@f3+1)& (0+255),b
 11559  0024CE  0E00               	movlw	0
 11560  0024D0  0100               	movlb	0	; () banked
 11561  0024D2  6F92               	movwf	(___ftdiv@f3+2)& (0+255),b
 11562                           
 11563                           ; BSR set to: 0
 11564  0024D4  0100               	movlb	0	; () banked
 11565  0024D6  5194               	movf	___ftdiv@sign& (0+255),w,b
 11566  0024D8  0F89               	addlw	137
 11567  0024DA  0100               	movlb	0	; () banked
 11568  0024DC  5F93               	subwf	___ftdiv@exp& (0+255),f,b
 11569                           
 11570                           ; BSR set to: 0
 11571  0024DE  C088  F094         	movff	___ftdiv@f1+2,___ftdiv@sign
 11572                           
 11573                           ; BSR set to: 0
 11574  0024E2  0100               	movlb	0	; () banked
 11575  0024E4  518B               	movf	(___ftdiv@f2+2)& (0+255),w,b
 11576  0024E6  0100               	movlb	0	; () banked
 11577  0024E8  1B94               	xorwf	___ftdiv@sign& (0+255),f,b
 11578                           
 11579                           ; BSR set to: 0
 11580  0024EA  0E80               	movlw	128
 11581  0024EC  0100               	movlb	0	; () banked
 11582  0024EE  1794               	andwf	___ftdiv@sign& (0+255),f,b
 11583                           
 11584                           ; BSR set to: 0
 11585  0024F0  0100               	movlb	0	; () banked
 11586  0024F2  8F87               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 11587                           
 11588                           ; BSR set to: 0
 11589  0024F4  0EFF               	movlw	255
 11590  0024F6  0100               	movlb	0	; () banked
 11591  0024F8  1786               	andwf	___ftdiv@f1& (0+255),f,b
 11592  0024FA  0EFF               	movlw	255
 11593  0024FC  0100               	movlb	0	; () banked
 11594  0024FE  1787               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 11595  002500  0E00               	movlw	0
 11596  002502  0100               	movlb	0	; () banked
 11597  002504  1788               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 11598                           
 11599                           ; BSR set to: 0
 11600  002506  0100               	movlb	0	; () banked
 11601  002508  8F8A               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 11602                           
 11603                           ; BSR set to: 0
 11604  00250A  0EFF               	movlw	255
 11605  00250C  0100               	movlb	0	; () banked
 11606  00250E  1789               	andwf	___ftdiv@f2& (0+255),f,b
 11607  002510  0EFF               	movlw	255
 11608  002512  0100               	movlb	0	; () banked
 11609  002514  178A               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 11610  002516  0E00               	movlw	0
 11611  002518  0100               	movlb	0	; () banked
 11612  00251A  178B               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 11613                           
 11614                           ; BSR set to: 0
 11615  00251C  0E18               	movlw	24
 11616  00251E  0100               	movlb	0	; () banked
 11617  002520  6F8F               	movwf	___ftdiv@cntr& (0+255),b
 11618  002522                     l5780:
 11619                           
 11620                           ; BSR set to: 0
 11621  002522  0100               	movlb	0	; () banked
 11622  002524  90D8               	bcf	status,0,c
 11623  002526  3790               	rlcf	___ftdiv@f3& (0+255),f,b
 11624  002528  3791               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 11625  00252A  3792               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 11626                           
 11627                           ; BSR set to: 0
 11628  00252C  0100               	movlb	0	; () banked
 11629  00252E  5189               	movf	___ftdiv@f2& (0+255),w,b
 11630  002530  0100               	movlb	0	; () banked
 11631  002532  5D86               	subwf	___ftdiv@f1& (0+255),w,b
 11632  002534  0100               	movlb	0	; () banked
 11633  002536  518A               	movf	(___ftdiv@f2+1)& (0+255),w,b
 11634  002538  0100               	movlb	0	; () banked
 11635  00253A  5987               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 11636  00253C  0100               	movlb	0	; () banked
 11637  00253E  518B               	movf	(___ftdiv@f2+2)& (0+255),w,b
 11638  002540  0100               	movlb	0	; () banked
 11639  002542  5988               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 11640  002544  A0D8               	btfss	status,0,c
 11641  002546  D00E               	goto	l1131
 11642                           
 11643                           ; BSR set to: 0
 11644  002548  0100               	movlb	0	; () banked
 11645  00254A  5189               	movf	___ftdiv@f2& (0+255),w,b
 11646  00254C  0100               	movlb	0	; () banked
 11647  00254E  5F86               	subwf	___ftdiv@f1& (0+255),f,b
 11648  002550  0100               	movlb	0	; () banked
 11649  002552  518A               	movf	(___ftdiv@f2+1)& (0+255),w,b
 11650  002554  0100               	movlb	0	; () banked
 11651  002556  5B87               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 11652  002558  0100               	movlb	0	; () banked
 11653  00255A  518B               	movf	(___ftdiv@f2+2)& (0+255),w,b
 11654  00255C  0100               	movlb	0	; () banked
 11655  00255E  5B88               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 11656                           
 11657                           ; BSR set to: 0
 11658  002560  0100               	movlb	0	; () banked
 11659  002562  8190               	bsf	___ftdiv@f3& (0+255),0,b
 11660  002564                     l1131:
 11661                           
 11662                           ; BSR set to: 0
 11663  002564  0100               	movlb	0	; () banked
 11664  002566  90D8               	bcf	status,0,c
 11665  002568  3786               	rlcf	___ftdiv@f1& (0+255),f,b
 11666  00256A  3787               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 11667  00256C  3788               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 11668                           
 11669                           ; BSR set to: 0
 11670  00256E  0100               	movlb	0	; () banked
 11671  002570  2F8F               	decfsz	___ftdiv@cntr& (0+255),f,b
 11672  002572  D7D7               	goto	l5780
 11673                           
 11674                           ; BSR set to: 0
 11675                           
 11676                           ; BSR set to: 0
 11677  002574  C090  F027         	movff	___ftdiv@f3,___ftpack@arg
 11678  002578  C091  F028         	movff	___ftdiv@f3+1,___ftpack@arg+1
 11679  00257C  C092  F029         	movff	___ftdiv@f3+2,___ftpack@arg+2
 11680  002580  C093  F02A         	movff	___ftdiv@exp,___ftpack@exp
 11681  002584  C094  F02B         	movff	___ftdiv@sign,___ftpack@sign
 11682  002588  ECDC  F018         	call	___ftpack	;wreg free
 11683  00258C  C027  F086         	movff	?___ftpack,?___ftdiv
 11684  002590  C028  F087         	movff	?___ftpack+1,?___ftdiv+1
 11685  002594  C029  F088         	movff	?___ftpack+2,?___ftdiv+2
 11686  002598  0012               	return	
 11687  00259A                     __end_of___ftdiv:
 11688                           	opt stack 0
 11689                           tblptru	equ	0xFF8
 11690                           tblptrh	equ	0xFF7
 11691                           tblptrl	equ	0xFF6
 11692                           tablat	equ	0xFF5
 11693                           prodh	equ	0xFF4
 11694                           prodl	equ	0xFF3
 11695                           intcon	equ	0xFF2
 11696                           intcon3	equ	0xFF0
 11697                           postinc0	equ	0xFEE
 11698                           wreg	equ	0xFE8
 11699                           postdec1	equ	0xFE5
 11700                           fsr1l	equ	0xFE1
 11701                           indf2	equ	0xFDF
 11702                           postinc2	equ	0xFDE
 11703                           postdec2	equ	0xFDD
 11704                           fsr2h	equ	0xFDA
 11705                           fsr2l	equ	0xFD9
 11706                           status	equ	0xFD8
 11707                           
 11708 ;; *************** function ___ftadd *****************
 11709 ;; Defined at:
 11710 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 11711 ;; Parameters:    Size  Location     Type
 11712 ;;  f1              3   46[BANK0 ] float 
 11713 ;;  f2              3   49[BANK0 ] float 
 11714 ;; Auto vars:     Size  Location     Type
 11715 ;;  exp1            1   57[BANK0 ] unsigned char 
 11716 ;;  exp2            1   56[BANK0 ] unsigned char 
 11717 ;;  sign            1   55[BANK0 ] unsigned char 
 11718 ;; Return value:  Size  Location     Type
 11719 ;;                  3   46[BANK0 ] float 
 11720 ;; Registers used:
 11721 ;;		wreg, status,2, status,0, cstack
 11722 ;; Tracked objects:
 11723 ;;		On entry : 0/0
 11724 ;;		On exit  : 0/0
 11725 ;;		Unchanged: 0/0
 11726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11727 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11728 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11729 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11730 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11731 ;;Total ram usage:       12 bytes
 11732 ;; Hardware stack levels used:    1
 11733 ;; Hardware stack levels required when called:    4
 11734 ;; This function calls:
 11735 ;;		___ftpack
 11736 ;; This function is called by:
 11737 ;;		_angleToPulse
 11738 ;;		_printf
 11739 ;;		___ftsub
 11740 ;; This function uses a non-reentrant model
 11741 ;;
 11742                           
 11743                           	psect	text44
 11744  001DCE                     __ptext44:
 11745                           	opt stack 0
 11746  001DCE                     ___ftadd:
 11747                           	opt stack 23
 11748                           
 11749                           ;incstack = 0
 11750  001DCE  C0B0  F0B4         	movff	___ftadd@f1+2,??___ftadd
 11751  001DD2  0100               	movlb	0	; () banked
 11752  001DD4  6BB5               	clrf	(??___ftadd+1)& (0+255),b
 11753  001DD6  6BB6               	clrf	(??___ftadd+2)& (0+255),b
 11754  001DD8  0100               	movlb	0	; () banked
 11755  001DDA  35AF               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 11756  001DDC  0100               	movlb	0	; () banked
 11757  001DDE  37B4               	rlcf	??___ftadd& (0+255),f,b
 11758  001DE0  E301               	bnc	u5461
 11759  001DE2  81B5               	bsf	(??___ftadd+1)& (0+255),0,b
 11760  001DE4                     u5461:
 11761  001DE4  0100               	movlb	0	; () banked
 11762  001DE6  51B4               	movf	??___ftadd& (0+255),w,b
 11763  001DE8  0100               	movlb	0	; () banked
 11764  001DEA  6FB9               	movwf	___ftadd@exp1& (0+255),b
 11765  001DEC  C0B3  F0B4         	movff	___ftadd@f2+2,??___ftadd
 11766  001DF0  0100               	movlb	0	; () banked
 11767  001DF2  6BB5               	clrf	(??___ftadd+1)& (0+255),b
 11768  001DF4  6BB6               	clrf	(??___ftadd+2)& (0+255),b
 11769  001DF6  0100               	movlb	0	; () banked
 11770  001DF8  35B2               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 11771  001DFA  0100               	movlb	0	; () banked
 11772  001DFC  37B4               	rlcf	??___ftadd& (0+255),f,b
 11773  001DFE  E301               	bnc	u5471
 11774  001E00  81B5               	bsf	(??___ftadd+1)& (0+255),0,b
 11775  001E02                     u5471:
 11776  001E02  0100               	movlb	0	; () banked
 11777  001E04  51B4               	movf	??___ftadd& (0+255),w,b
 11778  001E06  0100               	movlb	0	; () banked
 11779  001E08  6FB8               	movwf	___ftadd@exp2& (0+255),b
 11780                           
 11781                           ; BSR set to: 0
 11782  001E0A  0100               	movlb	0	; () banked
 11783  001E0C  51B9               	movf	___ftadd@exp1& (0+255),w,b
 11784  001E0E  0100               	movlb	0	; () banked
 11785  001E10  B4D8               	btfsc	status,2,c
 11786  001E12  D011               	goto	l1096
 11787                           
 11788                           ; BSR set to: 0
 11789  001E14  0100               	movlb	0	; () banked
 11790  001E16  51B8               	movf	___ftadd@exp2& (0+255),w,b
 11791  001E18  0100               	movlb	0	; () banked
 11792  001E1A  5DB9               	subwf	___ftadd@exp1& (0+255),w,b
 11793  001E1C  B0D8               	btfsc	status,0,c
 11794  001E1E  D012               	goto	l5686
 11795                           
 11796                           ; BSR set to: 0
 11797  001E20  0100               	movlb	0	; () banked
 11798  001E22  51B9               	movf	___ftadd@exp1& (0+255),w,b
 11799  001E24  0800               	sublw	0
 11800  001E26  0100               	movlb	0	; () banked
 11801  001E28  25B8               	addwf	___ftadd@exp2& (0+255),w,b
 11802  001E2A  0100               	movlb	0	; () banked
 11803  001E2C  6FB4               	movwf	??___ftadd& (0+255),b
 11804  001E2E  0E18               	movlw	24
 11805  001E30  0100               	movlb	0	; () banked
 11806  001E32  65B4               	cpfsgt	??___ftadd& (0+255),b
 11807  001E34  D007               	goto	l5686
 11808  001E36                     l1096:
 11809                           
 11810                           ; BSR set to: 0
 11811  001E36  C0B1  F0AE         	movff	___ftadd@f2,?___ftadd
 11812  001E3A  C0B2  F0AF         	movff	___ftadd@f2+1,?___ftadd+1
 11813  001E3E  C0B3  F0B0         	movff	___ftadd@f2+2,?___ftadd+2
 11814  001E42  0012               	return	
 11815  001E44                     l5686:
 11816                           
 11817                           ; BSR set to: 0
 11818  001E44  0100               	movlb	0	; () banked
 11819  001E46  51B8               	movf	___ftadd@exp2& (0+255),w,b
 11820  001E48  0100               	movlb	0	; () banked
 11821  001E4A  B4D8               	btfsc	status,2,c
 11822  001E4C  D011               	goto	l1100
 11823                           
 11824                           ; BSR set to: 0
 11825  001E4E  0100               	movlb	0	; () banked
 11826  001E50  51B9               	movf	___ftadd@exp1& (0+255),w,b
 11827  001E52  0100               	movlb	0	; () banked
 11828  001E54  5DB8               	subwf	___ftadd@exp2& (0+255),w,b
 11829  001E56  B0D8               	btfsc	status,0,c
 11830  001E58  D012               	goto	l5692
 11831                           
 11832                           ; BSR set to: 0
 11833  001E5A  0100               	movlb	0	; () banked
 11834  001E5C  51B8               	movf	___ftadd@exp2& (0+255),w,b
 11835  001E5E  0800               	sublw	0
 11836  001E60  0100               	movlb	0	; () banked
 11837  001E62  25B9               	addwf	___ftadd@exp1& (0+255),w,b
 11838  001E64  0100               	movlb	0	; () banked
 11839  001E66  6FB4               	movwf	??___ftadd& (0+255),b
 11840  001E68  0E18               	movlw	24
 11841  001E6A  0100               	movlb	0	; () banked
 11842  001E6C  65B4               	cpfsgt	??___ftadd& (0+255),b
 11843  001E6E  D007               	goto	l5692
 11844  001E70                     l1100:
 11845                           
 11846                           ; BSR set to: 0
 11847  001E70  C0AE  F0AE         	movff	___ftadd@f1,?___ftadd
 11848  001E74  C0AF  F0AF         	movff	___ftadd@f1+1,?___ftadd+1
 11849  001E78  C0B0  F0B0         	movff	___ftadd@f1+2,?___ftadd+2
 11850  001E7C  0012               	return	
 11851  001E7E                     l5692:
 11852                           
 11853                           ; BSR set to: 0
 11854  001E7E  0E06               	movlw	6
 11855  001E80  0100               	movlb	0	; () banked
 11856  001E82  6FB7               	movwf	___ftadd@sign& (0+255),b
 11857                           
 11858                           ; BSR set to: 0
 11859  001E84  0100               	movlb	0	; () banked
 11860  001E86  AFB0               	btfss	(___ftadd@f1+2)& (0+255),7,b
 11861  001E88  D002               	goto	l5698
 11862                           
 11863                           ; BSR set to: 0
 11864  001E8A  0100               	movlb	0	; () banked
 11865  001E8C  8FB7               	bsf	___ftadd@sign& (0+255),7,b
 11866  001E8E                     l5698:
 11867                           
 11868                           ; BSR set to: 0
 11869  001E8E  0100               	movlb	0	; () banked
 11870  001E90  AFB3               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11871  001E92  D002               	goto	l1102
 11872                           
 11873                           ; BSR set to: 0
 11874  001E94  0100               	movlb	0	; () banked
 11875  001E96  8DB7               	bsf	___ftadd@sign& (0+255),6,b
 11876  001E98                     l1102:
 11877                           
 11878                           ; BSR set to: 0
 11879  001E98  0100               	movlb	0	; () banked
 11880  001E9A  8FAF               	bsf	(___ftadd@f1+1)& (0+255),7,b
 11881                           
 11882                           ; BSR set to: 0
 11883  001E9C  0EFF               	movlw	255
 11884  001E9E  0100               	movlb	0	; () banked
 11885  001EA0  17AE               	andwf	___ftadd@f1& (0+255),f,b
 11886  001EA2  0EFF               	movlw	255
 11887  001EA4  0100               	movlb	0	; () banked
 11888  001EA6  17AF               	andwf	(___ftadd@f1+1)& (0+255),f,b
 11889  001EA8  0E00               	movlw	0
 11890  001EAA  0100               	movlb	0	; () banked
 11891  001EAC  17B0               	andwf	(___ftadd@f1+2)& (0+255),f,b
 11892  001EAE  0100               	movlb	0	; () banked
 11893  001EB0  8FB2               	bsf	(___ftadd@f2+1)& (0+255),7,b
 11894                           
 11895                           ; BSR set to: 0
 11896  001EB2  0EFF               	movlw	255
 11897  001EB4  0100               	movlb	0	; () banked
 11898  001EB6  17B1               	andwf	___ftadd@f2& (0+255),f,b
 11899  001EB8  0EFF               	movlw	255
 11900  001EBA  0100               	movlb	0	; () banked
 11901  001EBC  17B2               	andwf	(___ftadd@f2+1)& (0+255),f,b
 11902  001EBE  0E00               	movlw	0
 11903  001EC0  0100               	movlb	0	; () banked
 11904  001EC2  17B3               	andwf	(___ftadd@f2+2)& (0+255),f,b
 11905                           
 11906                           ; BSR set to: 0
 11907  001EC4  0100               	movlb	0	; () banked
 11908  001EC6  51B8               	movf	___ftadd@exp2& (0+255),w,b
 11909  001EC8  0100               	movlb	0	; () banked
 11910  001ECA  5DB9               	subwf	___ftadd@exp1& (0+255),w,b
 11911  001ECC  B0D8               	btfsc	status,0,c
 11912  001ECE  D025               	goto	l5718
 11913  001ED0                     l5708:
 11914                           
 11915                           ; BSR set to: 0
 11916  001ED0  0100               	movlb	0	; () banked
 11917  001ED2  90D8               	bcf	status,0,c
 11918  001ED4  37B1               	rlcf	___ftadd@f2& (0+255),f,b
 11919  001ED6  37B2               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 11920  001ED8  37B3               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 11921  001EDA  0100               	movlb	0	; () banked
 11922  001EDC  07B8               	decf	___ftadd@exp2& (0+255),f,b
 11923                           
 11924                           ; BSR set to: 0
 11925  001EDE  0100               	movlb	0	; () banked
 11926  001EE0  51B9               	movf	___ftadd@exp1& (0+255),w,b
 11927  001EE2  0100               	movlb	0	; () banked
 11928  001EE4  19B8               	xorwf	___ftadd@exp2& (0+255),w,b
 11929  001EE6  B4D8               	btfsc	status,2,c
 11930  001EE8  D011               	goto	l5716
 11931                           
 11932                           ; BSR set to: 0
 11933  001EEA  0100               	movlb	0	; () banked
 11934  001EEC  07B7               	decf	___ftadd@sign& (0+255),f,b
 11935  001EEE  C0B7  F0B4         	movff	___ftadd@sign,??___ftadd
 11936  001EF2  0E07               	movlw	7
 11937  001EF4  0100               	movlb	0	; () banked
 11938  001EF6  17B4               	andwf	??___ftadd& (0+255),f,b
 11939  001EF8  B4D8               	btfsc	status,2,c
 11940  001EFA  D008               	goto	l5716
 11941  001EFC  D7E9               	goto	l5708
 11942  001EFE                     l5714:
 11943                           
 11944                           ; BSR set to: 0
 11945  001EFE  0100               	movlb	0	; () banked
 11946  001F00  90D8               	bcf	status,0,c
 11947  001F02  33B0               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 11948  001F04  33AF               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 11949  001F06  33AE               	rrcf	___ftadd@f1& (0+255),f,b
 11950  001F08  0100               	movlb	0	; () banked
 11951  001F0A  2BB9               	incf	___ftadd@exp1& (0+255),f,b
 11952  001F0C                     l5716:
 11953                           
 11954                           ; BSR set to: 0
 11955  001F0C  0100               	movlb	0	; () banked
 11956  001F0E  51B8               	movf	___ftadd@exp2& (0+255),w,b
 11957  001F10  0100               	movlb	0	; () banked
 11958  001F12  19B9               	xorwf	___ftadd@exp1& (0+255),w,b
 11959  001F14  B4D8               	btfsc	status,2,c
 11960  001F16  D02B               	goto	l1111
 11961  001F18  D7F2               	goto	l5714
 11962  001F1A                     l5718:
 11963                           
 11964                           ; BSR set to: 0
 11965  001F1A  0100               	movlb	0	; () banked
 11966  001F1C  51B9               	movf	___ftadd@exp1& (0+255),w,b
 11967  001F1E  0100               	movlb	0	; () banked
 11968  001F20  5DB8               	subwf	___ftadd@exp2& (0+255),w,b
 11969  001F22  B0D8               	btfsc	status,0,c
 11970  001F24  D024               	goto	l1111
 11971  001F26                     l5720:
 11972                           
 11973                           ; BSR set to: 0
 11974  001F26  0100               	movlb	0	; () banked
 11975  001F28  90D8               	bcf	status,0,c
 11976  001F2A  37AE               	rlcf	___ftadd@f1& (0+255),f,b
 11977  001F2C  37AF               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 11978  001F2E  37B0               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 11979  001F30  0100               	movlb	0	; () banked
 11980  001F32  07B9               	decf	___ftadd@exp1& (0+255),f,b
 11981                           
 11982                           ; BSR set to: 0
 11983  001F34  0100               	movlb	0	; () banked
 11984  001F36  51B9               	movf	___ftadd@exp1& (0+255),w,b
 11985  001F38  0100               	movlb	0	; () banked
 11986  001F3A  19B8               	xorwf	___ftadd@exp2& (0+255),w,b
 11987  001F3C  B4D8               	btfsc	status,2,c
 11988  001F3E  D011               	goto	l5728
 11989                           
 11990                           ; BSR set to: 0
 11991  001F40  0100               	movlb	0	; () banked
 11992  001F42  07B7               	decf	___ftadd@sign& (0+255),f,b
 11993  001F44  C0B7  F0B4         	movff	___ftadd@sign,??___ftadd
 11994  001F48  0E07               	movlw	7
 11995  001F4A  0100               	movlb	0	; () banked
 11996  001F4C  17B4               	andwf	??___ftadd& (0+255),f,b
 11997  001F4E  B4D8               	btfsc	status,2,c
 11998  001F50  D008               	goto	l5728
 11999  001F52  D7E9               	goto	l5720
 12000  001F54                     l5726:
 12001                           
 12002                           ; BSR set to: 0
 12003  001F54  0100               	movlb	0	; () banked
 12004  001F56  90D8               	bcf	status,0,c
 12005  001F58  33B3               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 12006  001F5A  33B2               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 12007  001F5C  33B1               	rrcf	___ftadd@f2& (0+255),f,b
 12008  001F5E  0100               	movlb	0	; () banked
 12009  001F60  2BB8               	incf	___ftadd@exp2& (0+255),f,b
 12010  001F62                     l5728:
 12011                           
 12012                           ; BSR set to: 0
 12013  001F62  0100               	movlb	0	; () banked
 12014  001F64  51B8               	movf	___ftadd@exp2& (0+255),w,b
 12015  001F66  0100               	movlb	0	; () banked
 12016  001F68  19B9               	xorwf	___ftadd@exp1& (0+255),w,b
 12017  001F6A  A4D8               	btfss	status,2,c
 12018  001F6C  D7F3               	goto	l5726
 12019  001F6E                     l1111:
 12020                           
 12021                           ; BSR set to: 0
 12022  001F6E  0100               	movlb	0	; () banked
 12023  001F70  AFB7               	btfss	___ftadd@sign& (0+255),7,b
 12024  001F72  D012               	goto	l1120
 12025                           
 12026                           ; BSR set to: 0
 12027  001F74  0EFF               	movlw	255
 12028  001F76  0100               	movlb	0	; () banked
 12029  001F78  1BAE               	xorwf	___ftadd@f1& (0+255),f,b
 12030  001F7A  0EFF               	movlw	255
 12031  001F7C  0100               	movlb	0	; () banked
 12032  001F7E  1BAF               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 12033  001F80  0EFF               	movlw	255
 12034  001F82  0100               	movlb	0	; () banked
 12035  001F84  1BB0               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 12036  001F86  0E01               	movlw	1
 12037  001F88  0100               	movlb	0	; () banked
 12038  001F8A  27AE               	addwf	___ftadd@f1& (0+255),f,b
 12039  001F8C  0E00               	movlw	0
 12040  001F8E  0100               	movlb	0	; () banked
 12041  001F90  23AF               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 12042  001F92  0E00               	movlw	0
 12043  001F94  0100               	movlb	0	; () banked
 12044  001F96  23B0               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 12045  001F98                     l1120:
 12046                           
 12047                           ; BSR set to: 0
 12048  001F98  0100               	movlb	0	; () banked
 12049  001F9A  ADB7               	btfss	___ftadd@sign& (0+255),6,b
 12050  001F9C  D012               	goto	l5734
 12051                           
 12052                           ; BSR set to: 0
 12053  001F9E  0EFF               	movlw	255
 12054  001FA0  0100               	movlb	0	; () banked
 12055  001FA2  1BB1               	xorwf	___ftadd@f2& (0+255),f,b
 12056  001FA4  0EFF               	movlw	255
 12057  001FA6  0100               	movlb	0	; () banked
 12058  001FA8  1BB2               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 12059  001FAA  0EFF               	movlw	255
 12060  001FAC  0100               	movlb	0	; () banked
 12061  001FAE  1BB3               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 12062  001FB0  0E01               	movlw	1
 12063  001FB2  0100               	movlb	0	; () banked
 12064  001FB4  27B1               	addwf	___ftadd@f2& (0+255),f,b
 12065  001FB6  0E00               	movlw	0
 12066  001FB8  0100               	movlb	0	; () banked
 12067  001FBA  23B2               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 12068  001FBC  0E00               	movlw	0
 12069  001FBE  0100               	movlb	0	; () banked
 12070  001FC0  23B3               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 12071  001FC2                     l5734:
 12072                           
 12073                           ; BSR set to: 0
 12074  001FC2  0E00               	movlw	0
 12075  001FC4  0100               	movlb	0	; () banked
 12076  001FC6  6FB7               	movwf	___ftadd@sign& (0+255),b
 12077                           
 12078                           ; BSR set to: 0
 12079  001FC8  0100               	movlb	0	; () banked
 12080  001FCA  51AE               	movf	___ftadd@f1& (0+255),w,b
 12081  001FCC  0100               	movlb	0	; () banked
 12082  001FCE  27B1               	addwf	___ftadd@f2& (0+255),f,b
 12083  001FD0  0100               	movlb	0	; () banked
 12084  001FD2  51AF               	movf	(___ftadd@f1+1)& (0+255),w,b
 12085  001FD4  0100               	movlb	0	; () banked
 12086  001FD6  23B2               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 12087  001FD8  0100               	movlb	0	; () banked
 12088  001FDA  51B0               	movf	(___ftadd@f1+2)& (0+255),w,b
 12089  001FDC  0100               	movlb	0	; () banked
 12090  001FDE  23B3               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 12091                           
 12092                           ; BSR set to: 0
 12093  001FE0  0100               	movlb	0	; () banked
 12094  001FE2  AFB3               	btfss	(___ftadd@f2+2)& (0+255),7,b
 12095  001FE4  D015               	goto	l5744
 12096                           
 12097                           ; BSR set to: 0
 12098  001FE6  0EFF               	movlw	255
 12099  001FE8  0100               	movlb	0	; () banked
 12100  001FEA  1BB1               	xorwf	___ftadd@f2& (0+255),f,b
 12101  001FEC  0EFF               	movlw	255
 12102  001FEE  0100               	movlb	0	; () banked
 12103  001FF0  1BB2               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 12104  001FF2  0EFF               	movlw	255
 12105  001FF4  0100               	movlb	0	; () banked
 12106  001FF6  1BB3               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 12107  001FF8  0E01               	movlw	1
 12108  001FFA  0100               	movlb	0	; () banked
 12109  001FFC  27B1               	addwf	___ftadd@f2& (0+255),f,b
 12110  001FFE  0E00               	movlw	0
 12111  002000  0100               	movlb	0	; () banked
 12112  002002  23B2               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 12113  002004  0E00               	movlw	0
 12114  002006  0100               	movlb	0	; () banked
 12115  002008  23B3               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 12116                           
 12117                           ; BSR set to: 0
 12118  00200A  0E01               	movlw	1
 12119  00200C  0100               	movlb	0	; () banked
 12120  00200E  6FB7               	movwf	___ftadd@sign& (0+255),b
 12121  002010                     l5744:
 12122                           
 12123                           ; BSR set to: 0
 12124  002010  C0B1  F027         	movff	___ftadd@f2,___ftpack@arg
 12125  002014  C0B2  F028         	movff	___ftadd@f2+1,___ftpack@arg+1
 12126  002018  C0B3  F029         	movff	___ftadd@f2+2,___ftpack@arg+2
 12127  00201C  C0B9  F02A         	movff	___ftadd@exp1,___ftpack@exp
 12128  002020  C0B7  F02B         	movff	___ftadd@sign,___ftpack@sign
 12129  002024  ECDC  F018         	call	___ftpack	;wreg free
 12130  002028  C027  F0AE         	movff	?___ftpack,?___ftadd
 12131  00202C  C028  F0AF         	movff	?___ftpack+1,?___ftadd+1
 12132  002030  C029  F0B0         	movff	?___ftpack+2,?___ftadd+2
 12133  002034  0012               	return	
 12134  002036                     __end_of___ftadd:
 12135                           	opt stack 0
 12136                           tblptru	equ	0xFF8
 12137                           tblptrh	equ	0xFF7
 12138                           tblptrl	equ	0xFF6
 12139                           tablat	equ	0xFF5
 12140                           prodh	equ	0xFF4
 12141                           prodl	equ	0xFF3
 12142                           intcon	equ	0xFF2
 12143                           intcon3	equ	0xFF0
 12144                           postinc0	equ	0xFEE
 12145                           wreg	equ	0xFE8
 12146                           postdec1	equ	0xFE5
 12147                           fsr1l	equ	0xFE1
 12148                           indf2	equ	0xFDF
 12149                           postinc2	equ	0xFDE
 12150                           postdec2	equ	0xFDD
 12151                           fsr2h	equ	0xFDA
 12152                           fsr2l	equ	0xFD9
 12153                           status	equ	0xFD8
 12154                           
 12155 ;; *************** function ___awtoft *****************
 12156 ;; Defined at:
 12157 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 12158 ;; Parameters:    Size  Location     Type
 12159 ;;  c               2   46[COMRAM] int 
 12160 ;; Auto vars:     Size  Location     Type
 12161 ;;  sign            1   49[COMRAM] unsigned char 
 12162 ;; Return value:  Size  Location     Type
 12163 ;;                  3   46[COMRAM] float 
 12164 ;; Registers used:
 12165 ;;		wreg, status,2, status,0, cstack
 12166 ;; Tracked objects:
 12167 ;;		On entry : 0/0
 12168 ;;		On exit  : 0/0
 12169 ;;		Unchanged: 0/0
 12170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12171 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12172 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12174 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12175 ;;Total ram usage:        4 bytes
 12176 ;; Hardware stack levels used:    1
 12177 ;; Hardware stack levels required when called:    4
 12178 ;; This function calls:
 12179 ;;		___ftpack
 12180 ;; This function is called by:
 12181 ;;		_sortBattery
 12182 ;;		_angleToPulse
 12183 ;;		_testFrequency
 12184 ;; This function uses a non-reentrant model
 12185 ;;
 12186                           
 12187                           	psect	text45
 12188  0038F0                     __ptext45:
 12189                           	opt stack 0
 12190  0038F0                     ___awtoft:
 12191                           	opt stack 23
 12192                           
 12193                           ;incstack = 0
 12194  0038F0  0E00               	movlw	0
 12195  0038F2  6E32               	movwf	___awtoft@sign,c
 12196  0038F4  AE30               	btfss	___awtoft@c+1,7,c
 12197  0038F6  D006               	goto	l5930
 12198  0038F8  6C2F               	negf	___awtoft@c,c
 12199  0038FA  1E30               	comf	___awtoft@c+1,f,c
 12200  0038FC  B0D8               	btfsc	status,0,c
 12201  0038FE  2A30               	incf	___awtoft@c+1,f,c
 12202  003900  0E01               	movlw	1
 12203  003902  6E32               	movwf	___awtoft@sign,c
 12204  003904                     l5930:
 12205  003904  C02F  F027         	movff	___awtoft@c,___ftpack@arg
 12206  003908  C030  F028         	movff	___awtoft@c+1,___ftpack@arg+1
 12207  00390C  6A29               	clrf	___ftpack@arg+2,c
 12208  00390E  0E8E               	movlw	142
 12209  003910  6E2A               	movwf	___ftpack@exp,c
 12210  003912  C032  F02B         	movff	___awtoft@sign,___ftpack@sign
 12211  003916  ECDC  F018         	call	___ftpack	;wreg free
 12212  00391A  C027  F02F         	movff	?___ftpack,?___awtoft
 12213  00391E  C028  F030         	movff	?___ftpack+1,?___awtoft+1
 12214  003922  C029  F031         	movff	?___ftpack+2,?___awtoft+2
 12215  003926  0012               	return	
 12216  003928                     __end_of___awtoft:
 12217                           	opt stack 0
 12218                           tblptru	equ	0xFF8
 12219                           tblptrh	equ	0xFF7
 12220                           tblptrl	equ	0xFF6
 12221                           tablat	equ	0xFF5
 12222                           prodh	equ	0xFF4
 12223                           prodl	equ	0xFF3
 12224                           intcon	equ	0xFF2
 12225                           intcon3	equ	0xFF0
 12226                           postinc0	equ	0xFEE
 12227                           wreg	equ	0xFE8
 12228                           postdec1	equ	0xFE5
 12229                           fsr1l	equ	0xFE1
 12230                           indf2	equ	0xFDF
 12231                           postinc2	equ	0xFDE
 12232                           postdec2	equ	0xFDD
 12233                           fsr2h	equ	0xFDA
 12234                           fsr2l	equ	0xFD9
 12235                           status	equ	0xFD8
 12236                           
 12237 ;; *************** function ___altoft *****************
 12238 ;; Defined at:
 12239 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 12240 ;; Parameters:    Size  Location     Type
 12241 ;;  c               4   46[COMRAM] long 
 12242 ;; Auto vars:     Size  Location     Type
 12243 ;;  sign            1    5[BANK0 ] unsigned char 
 12244 ;;  exp             1    4[BANK0 ] unsigned char 
 12245 ;; Return value:  Size  Location     Type
 12246 ;;                  3   46[COMRAM] float 
 12247 ;; Registers used:
 12248 ;;		wreg, status,2, status,0, cstack
 12249 ;; Tracked objects:
 12250 ;;		On entry : 0/0
 12251 ;;		On exit  : 0/0
 12252 ;;		Unchanged: 0/0
 12253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12254 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12255 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12256 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12257 ;;      Totals:         4       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12258 ;;Total ram usage:       10 bytes
 12259 ;; Hardware stack levels used:    1
 12260 ;; Hardware stack levels required when called:    4
 12261 ;; This function calls:
 12262 ;;		___ftpack
 12263 ;; This function is called by:
 12264 ;;		_sortBattery
 12265 ;;		_angleToPulse
 12266 ;; This function uses a non-reentrant model
 12267 ;;
 12268                           
 12269                           	psect	text46
 12270  00339C                     __ptext46:
 12271                           	opt stack 0
 12272  00339C                     ___altoft:
 12273                           	opt stack 23
 12274                           
 12275                           ;incstack = 0
 12276  00339C  0E00               	movlw	0
 12277  00339E  0100               	movlb	0	; () banked
 12278  0033A0  6F85               	movwf	___altoft@sign& (0+255),b
 12279  0033A2  0E8E               	movlw	142
 12280  0033A4  0100               	movlb	0	; () banked
 12281  0033A6  6F84               	movwf	___altoft@exp& (0+255),b
 12282                           
 12283                           ; BSR set to: 0
 12284  0033A8  AE32               	btfss	___altoft@c+3,7,c
 12285  0033AA  D013               	goto	l5672
 12286                           
 12287                           ; BSR set to: 0
 12288  0033AC  1E32               	comf	___altoft@c+3,f,c
 12289  0033AE  1E31               	comf	___altoft@c+2,f,c
 12290  0033B0  1E30               	comf	___altoft@c+1,f,c
 12291  0033B2  6C2F               	negf	___altoft@c,c
 12292  0033B4  0E00               	movlw	0
 12293  0033B6  2230               	addwfc	___altoft@c+1,f,c
 12294  0033B8  2231               	addwfc	___altoft@c+2,f,c
 12295  0033BA  2232               	addwfc	___altoft@c+3,f,c
 12296                           
 12297                           ; BSR set to: 0
 12298  0033BC  0E01               	movlw	1
 12299  0033BE  0100               	movlb	0	; () banked
 12300  0033C0  6F85               	movwf	___altoft@sign& (0+255),b
 12301                           
 12302                           ; BSR set to: 0
 12303  0033C2  D007               	goto	l5672
 12304  0033C4                     l5670:
 12305                           
 12306                           ; BSR set to: 0
 12307  0033C4  90D8               	bcf	status,0,c
 12308  0033C6  3232               	rrcf	___altoft@c+3,f,c
 12309  0033C8  3231               	rrcf	___altoft@c+2,f,c
 12310  0033CA  3230               	rrcf	___altoft@c+1,f,c
 12311  0033CC  322F               	rrcf	___altoft@c,f,c
 12312  0033CE  0100               	movlb	0	; () banked
 12313  0033D0  2B84               	incf	___altoft@exp& (0+255),f,b
 12314  0033D2                     l5672:
 12315                           
 12316                           ; BSR set to: 0
 12317  0033D2  0E00               	movlw	0
 12318  0033D4  142F               	andwf	___altoft@c,w,c
 12319  0033D6  0100               	movlb	0	; () banked
 12320  0033D8  6F80               	movwf	??___altoft& (0+255),b
 12321  0033DA  0E00               	movlw	0
 12322  0033DC  1430               	andwf	___altoft@c+1,w,c
 12323  0033DE  0100               	movlb	0	; () banked
 12324  0033E0  6F81               	movwf	(??___altoft+1)& (0+255),b
 12325  0033E2  0E00               	movlw	0
 12326  0033E4  1431               	andwf	___altoft@c+2,w,c
 12327  0033E6  0100               	movlb	0	; () banked
 12328  0033E8  6F82               	movwf	(??___altoft+2)& (0+255),b
 12329  0033EA  0EFF               	movlw	255
 12330  0033EC  1432               	andwf	___altoft@c+3,w,c
 12331  0033EE  0100               	movlb	0	; () banked
 12332  0033F0  6F83               	movwf	(??___altoft+3)& (0+255),b
 12333  0033F2  0100               	movlb	0	; () banked
 12334  0033F4  5180               	movf	??___altoft& (0+255),w,b
 12335  0033F6  0100               	movlb	0	; () banked
 12336  0033F8  1181               	iorwf	(??___altoft+1)& (0+255),w,b
 12337  0033FA  0100               	movlb	0	; () banked
 12338  0033FC  1182               	iorwf	(??___altoft+2)& (0+255),w,b
 12339  0033FE  0100               	movlb	0	; () banked
 12340  003400  1183               	iorwf	(??___altoft+3)& (0+255),w,b
 12341  003402  A4D8               	btfss	status,2,c
 12342  003404  D7DF               	goto	l5670
 12343                           
 12344                           ; BSR set to: 0
 12345                           
 12346                           ; BSR set to: 0
 12347  003406  C02F  F027         	movff	___altoft@c,___ftpack@arg
 12348  00340A  C030  F028         	movff	___altoft@c+1,___ftpack@arg+1
 12349  00340E  C031  F029         	movff	___altoft@c+2,___ftpack@arg+2
 12350  003412  C084  F02A         	movff	___altoft@exp,___ftpack@exp
 12351  003416  C085  F02B         	movff	___altoft@sign,___ftpack@sign
 12352  00341A  ECDC  F018         	call	___ftpack	;wreg free
 12353  00341E  C027  F02F         	movff	?___ftpack,?___altoft
 12354  003422  C028  F030         	movff	?___ftpack+1,?___altoft+1
 12355  003426  C029  F031         	movff	?___ftpack+2,?___altoft+2
 12356  00342A  0012               	return	
 12357  00342C                     __end_of___altoft:
 12358                           	opt stack 0
 12359                           tblptru	equ	0xFF8
 12360                           tblptrh	equ	0xFF7
 12361                           tblptrl	equ	0xFF6
 12362                           tablat	equ	0xFF5
 12363                           prodh	equ	0xFF4
 12364                           prodl	equ	0xFF3
 12365                           intcon	equ	0xFF2
 12366                           intcon3	equ	0xFF0
 12367                           postinc0	equ	0xFEE
 12368                           wreg	equ	0xFE8
 12369                           postdec1	equ	0xFE5
 12370                           fsr1l	equ	0xFE1
 12371                           indf2	equ	0xFDF
 12372                           postinc2	equ	0xFDE
 12373                           postdec2	equ	0xFDD
 12374                           fsr2h	equ	0xFDA
 12375                           fsr2l	equ	0xFD9
 12376                           status	equ	0xFD8
 12377                           
 12378 ;; *************** function ___ftpack *****************
 12379 ;; Defined at:
 12380 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 12381 ;; Parameters:    Size  Location     Type
 12382 ;;  arg             3   38[COMRAM] unsigned um
 12383 ;;  exp             1   41[COMRAM] unsigned char 
 12384 ;;  sign            1   42[COMRAM] unsigned char 
 12385 ;; Auto vars:     Size  Location     Type
 12386 ;;		None
 12387 ;; Return value:  Size  Location     Type
 12388 ;;                  3   38[COMRAM] float 
 12389 ;; Registers used:
 12390 ;;		wreg, status,2, status,0
 12391 ;; Tracked objects:
 12392 ;;		On entry : 0/0
 12393 ;;		On exit  : 0/0
 12394 ;;		Unchanged: 0/0
 12395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12396 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12398 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12399 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12400 ;;Total ram usage:        8 bytes
 12401 ;; Hardware stack levels used:    1
 12402 ;; Hardware stack levels required when called:    3
 12403 ;; This function calls:
 12404 ;;		Nothing
 12405 ;; This function is called by:
 12406 ;;		___altoft
 12407 ;;		___awtoft
 12408 ;;		___ftadd
 12409 ;;		___ftdiv
 12410 ;;		___ftmul
 12411 ;;		___lltoft
 12412 ;; This function uses a non-reentrant model
 12413 ;;
 12414                           
 12415                           	psect	text47
 12416  0031B8                     __ptext47:
 12417                           	opt stack 0
 12418  0031B8                     ___ftpack:
 12419                           	opt stack 23
 12420                           
 12421                           ;incstack = 0
 12422  0031B8  502A               	movf	___ftpack@exp,w,c
 12423  0031BA  B4D8               	btfsc	status,2,c
 12424  0031BC  D005               	goto	l5622
 12425  0031BE  5027               	movf	___ftpack@arg,w,c
 12426  0031C0  1028               	iorwf	___ftpack@arg+1,w,c
 12427  0031C2  1029               	iorwf	___ftpack@arg+2,w,c
 12428  0031C4  A4D8               	btfss	status,2,c
 12429  0031C6  D00C               	goto	l5628
 12430  0031C8                     l5622:
 12431  0031C8  0E00               	movlw	0
 12432  0031CA  6E27               	movwf	?___ftpack,c
 12433  0031CC  0E00               	movlw	0
 12434  0031CE  6E28               	movwf	?___ftpack+1,c
 12435  0031D0  0E00               	movlw	0
 12436  0031D2  6E29               	movwf	?___ftpack+2,c
 12437  0031D4  0012               	return	
 12438  0031D6                     l5626:
 12439  0031D6  2A2A               	incf	___ftpack@exp,f,c
 12440  0031D8  90D8               	bcf	status,0,c
 12441  0031DA  3229               	rrcf	___ftpack@arg+2,f,c
 12442  0031DC  3228               	rrcf	___ftpack@arg+1,f,c
 12443  0031DE  3227               	rrcf	___ftpack@arg,f,c
 12444  0031E0                     l5628:
 12445  0031E0  0E00               	movlw	0
 12446  0031E2  1427               	andwf	___ftpack@arg,w,c
 12447  0031E4  6E2C               	movwf	??___ftpack& (0+255),c
 12448  0031E6  0E00               	movlw	0
 12449  0031E8  1428               	andwf	___ftpack@arg+1,w,c
 12450  0031EA  6E2D               	movwf	(??___ftpack+1)& (0+255),c
 12451  0031EC  0EFE               	movlw	254
 12452  0031EE  1429               	andwf	___ftpack@arg+2,w,c
 12453  0031F0  6E2E               	movwf	(??___ftpack+2)& (0+255),c
 12454  0031F2  502C               	movf	??___ftpack,w,c
 12455  0031F4  102D               	iorwf	??___ftpack+1,w,c
 12456  0031F6  102E               	iorwf	??___ftpack+2,w,c
 12457  0031F8  B4D8               	btfsc	status,2,c
 12458  0031FA  D00C               	goto	l5634
 12459  0031FC  D7EC               	goto	l5626
 12460  0031FE                     l5630:
 12461  0031FE  2A2A               	incf	___ftpack@exp,f,c
 12462  003200  0E01               	movlw	1
 12463  003202  2627               	addwf	___ftpack@arg,f,c
 12464  003204  0E00               	movlw	0
 12465  003206  2228               	addwfc	___ftpack@arg+1,f,c
 12466  003208  0E00               	movlw	0
 12467  00320A  2229               	addwfc	___ftpack@arg+2,f,c
 12468  00320C  90D8               	bcf	status,0,c
 12469  00320E  3229               	rrcf	___ftpack@arg+2,f,c
 12470  003210  3228               	rrcf	___ftpack@arg+1,f,c
 12471  003212  3227               	rrcf	___ftpack@arg,f,c
 12472  003214                     l5634:
 12473  003214  0E00               	movlw	0
 12474  003216  1427               	andwf	___ftpack@arg,w,c
 12475  003218  6E2C               	movwf	??___ftpack& (0+255),c
 12476  00321A  0E00               	movlw	0
 12477  00321C  1428               	andwf	___ftpack@arg+1,w,c
 12478  00321E  6E2D               	movwf	(??___ftpack+1)& (0+255),c
 12479  003220  0EFF               	movlw	255
 12480  003222  1429               	andwf	___ftpack@arg+2,w,c
 12481  003224  6E2E               	movwf	(??___ftpack+2)& (0+255),c
 12482  003226  502C               	movf	??___ftpack,w,c
 12483  003228  102D               	iorwf	??___ftpack+1,w,c
 12484  00322A  102E               	iorwf	??___ftpack+2,w,c
 12485  00322C  B4D8               	btfsc	status,2,c
 12486  00322E  D006               	goto	l5638
 12487  003230  D7E6               	goto	l5630
 12488  003232                     l5636:
 12489  003232  062A               	decf	___ftpack@exp,f,c
 12490  003234  90D8               	bcf	status,0,c
 12491  003236  3627               	rlcf	___ftpack@arg,f,c
 12492  003238  3628               	rlcf	___ftpack@arg+1,f,c
 12493  00323A  3629               	rlcf	___ftpack@arg+2,f,c
 12494  00323C                     l5638:
 12495  00323C  BE28               	btfsc	___ftpack@arg+1,7,c
 12496  00323E  D003               	goto	l1073
 12497  003240  0E02               	movlw	2
 12498  003242  602A               	cpfslt	___ftpack@exp,c
 12499  003244  D7F6               	goto	l5636
 12500  003246                     l1073:
 12501  003246  A02A               	btfss	___ftpack@exp,0,c
 12502  003248  9E28               	bcf	___ftpack@arg+1,7,c
 12503  00324A  90D8               	bcf	status,0,c
 12504  00324C  322A               	rrcf	___ftpack@exp,f,c
 12505  00324E  502A               	movf	___ftpack@exp,w,c
 12506  003250  1229               	iorwf	___ftpack@arg+2,f,c
 12507  003252  502B               	movf	___ftpack@sign,w,c
 12508  003254  A4D8               	btfss	status,2,c
 12509  003256  8E29               	bsf	___ftpack@arg+2,7,c
 12510  003258  C027  F027         	movff	___ftpack@arg,?___ftpack
 12511  00325C  C028  F028         	movff	___ftpack@arg+1,?___ftpack+1
 12512  003260  C029  F029         	movff	___ftpack@arg+2,?___ftpack+2
 12513  003264  0012               	return	
 12514  003266                     __end_of___ftpack:
 12515                           	opt stack 0
 12516                           tblptru	equ	0xFF8
 12517                           tblptrh	equ	0xFF7
 12518                           tblptrl	equ	0xFF6
 12519                           tablat	equ	0xFF5
 12520                           prodh	equ	0xFF4
 12521                           prodl	equ	0xFF3
 12522                           intcon	equ	0xFF2
 12523                           intcon3	equ	0xFF0
 12524                           postinc0	equ	0xFEE
 12525                           wreg	equ	0xFE8
 12526                           postdec1	equ	0xFE5
 12527                           fsr1l	equ	0xFE1
 12528                           indf2	equ	0xFDF
 12529                           postinc2	equ	0xFDE
 12530                           postdec2	equ	0xFDD
 12531                           fsr2h	equ	0xFDA
 12532                           fsr2l	equ	0xFD9
 12533                           status	equ	0xFD8
 12534                           
 12535 ;; *************** function _initTimer *****************
 12536 ;; Defined at:
 12537 ;;		line 52 in file "timer.c"
 12538 ;; Parameters:    Size  Location     Type
 12539 ;;  timer           2   38[COMRAM] int 
 12540 ;; Auto vars:     Size  Location     Type
 12541 ;;		None
 12542 ;; Return value:  Size  Location     Type
 12543 ;;                  1    wreg      void 
 12544 ;; Registers used:
 12545 ;;		wreg, status,2, status,0
 12546 ;; Tracked objects:
 12547 ;;		On entry : 0/0
 12548 ;;		On exit  : 0/0
 12549 ;;		Unchanged: 0/0
 12550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12551 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12553 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12554 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12555 ;;Total ram usage:        4 bytes
 12556 ;; Hardware stack levels used:    1
 12557 ;; Hardware stack levels required when called:    3
 12558 ;; This function calls:
 12559 ;;		Nothing
 12560 ;; This function is called by:
 12561 ;;		_main
 12562 ;;		_initServo
 12563 ;;		_testFrequency
 12564 ;; This function uses a non-reentrant model
 12565 ;;
 12566                           
 12567                           	psect	text48
 12568  0037AA                     __ptext48:
 12569                           	opt stack 0
 12570  0037AA                     _initTimer:
 12571                           	opt stack 27
 12572                           
 12573                           ;timer.c: 53: switch(timer){
 12574                           
 12575                           ;incstack = 0
 12576  0037AA  D00F               	goto	l6282
 12577  0037AC                     l6264:
 12578                           
 12579                           ;timer.c: 55: T0CON = 0;
 12580  0037AC  0E00               	movlw	0
 12581  0037AE  6ED5               	movwf	4053,c	;volatile
 12582                           
 12583                           ;timer.c: 56: T0CON |= 1<<3;
 12584  0037B0  86D5               	bsf	4053,3,c	;volatile
 12585                           
 12586                           ;timer.c: 58: TMR0IE = 1;
 12587  0037B2  8AF2               	bsf	intcon,5,c	;volatile
 12588                           
 12589                           ;timer.c: 59: break;
 12590  0037B4  D01C               	goto	l426
 12591  0037B6                     l6270:
 12592                           
 12593                           ;timer.c: 61: T1CON = 0;
 12594  0037B6  0E00               	movlw	0
 12595  0037B8  6ECD               	movwf	4045,c	;volatile
 12596                           
 12597                           ;timer.c: 63: T1CON |= 0b11<<4;
 12598  0037BA  0E30               	movlw	48
 12599  0037BC  12CD               	iorwf	4045,f,c	;volatile
 12600                           
 12601                           ;timer.c: 64: TMR1IE = 1;
 12602  0037BE  809D               	bsf	3997,0,c	;volatile
 12603                           
 12604                           ;timer.c: 65: break;
 12605  0037C0  D016               	goto	l426
 12606  0037C2                     l6276:
 12607                           
 12608                           ;timer.c: 67: T3CON = 0;
 12609  0037C2  0E00               	movlw	0
 12610  0037C4  6EB1               	movwf	4017,c	;volatile
 12611                           
 12612                           ;timer.c: 68: TMR3IE = 1;
 12613  0037C6  82A0               	bsf	4000,1,c	;volatile
 12614                           
 12615                           ;timer.c: 70: }
 12616                           
 12617                           ;timer.c: 69: break;
 12618  0037C8  D012               	goto	l426
 12619  0037CA                     l6282:
 12620  0037CA  C027  F029         	movff	initTimer@timer,??_initTimer
 12621  0037CE  C028  F02A         	movff	initTimer@timer+1,??_initTimer+1
 12622                           
 12623                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12624                           ; Switch size 1, requested type "space"
 12625                           ; Number of cases is 1, Range of values is 0 to 0
 12626                           ; switch strategies available:
 12627                           ; Name         Instructions Cycles
 12628                           ; simple_byte            4     3 (average)
 12629                           ;	Chosen strategy is simple_byte
 12630  0037D2  502A               	movf	??_initTimer+1,w,c
 12631  0037D4  0A00               	xorlw	0	; case 0
 12632  0037D6  A4D8               	btfss	status,2,c
 12633  0037D8  D00A               	goto	l426
 12634                           
 12635                           ; Switch size 1, requested type "space"
 12636                           ; Number of cases is 3, Range of values is 0 to 3
 12637                           ; switch strategies available:
 12638                           ; Name         Instructions Cycles
 12639                           ; simple_byte           10     6 (average)
 12640                           ;	Chosen strategy is simple_byte
 12641  0037DA  5029               	movf	??_initTimer,w,c
 12642  0037DC  0A00               	xorlw	0	; case 0
 12643  0037DE  B4D8               	btfsc	status,2,c
 12644  0037E0  D7E5               	goto	l6264
 12645  0037E2  0A01               	xorlw	1	; case 1
 12646  0037E4  B4D8               	btfsc	status,2,c
 12647  0037E6  D7E7               	goto	l6270
 12648  0037E8  0A02               	xorlw	2	; case 3
 12649  0037EA  B4D8               	btfsc	status,2,c
 12650  0037EC  D7EA               	goto	l6276
 12651  0037EE                     l426:
 12652                           
 12653                           ;timer.c: 71: PEIE = 1;
 12654  0037EE  8CF2               	bsf	intcon,6,c	;volatile
 12655                           
 12656                           ;timer.c: 72: (INTCONbits.GIE = 1);
 12657  0037F0  8EF2               	bsf	intcon,7,c	;volatile
 12658  0037F2  0012               	return		;funcret
 12659  0037F4                     __end_of_initTimer:
 12660                           	opt stack 0
 12661                           tblptru	equ	0xFF8
 12662                           tblptrh	equ	0xFF7
 12663                           tblptrl	equ	0xFF6
 12664                           tablat	equ	0xFF5
 12665                           prodh	equ	0xFF4
 12666                           prodl	equ	0xFF3
 12667                           intcon	equ	0xFF2
 12668                           intcon3	equ	0xFF0
 12669                           postinc0	equ	0xFEE
 12670                           wreg	equ	0xFE8
 12671                           postdec1	equ	0xFE5
 12672                           fsr1l	equ	0xFE1
 12673                           indf2	equ	0xFDF
 12674                           postinc2	equ	0xFDE
 12675                           postdec2	equ	0xFDD
 12676                           fsr2h	equ	0xFDA
 12677                           fsr2l	equ	0xFD9
 12678                           status	equ	0xFD8
 12679                           
 12680 ;; *************** function ___almod *****************
 12681 ;; Defined at:
 12682 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\almod.c"
 12683 ;; Parameters:    Size  Location     Type
 12684 ;;  dividend        4    6[BANK0 ] long 
 12685 ;;  divisor         4   10[BANK0 ] long 
 12686 ;; Auto vars:     Size  Location     Type
 12687 ;;  sign            1   47[COMRAM] unsigned char 
 12688 ;;  counter         1   46[COMRAM] unsigned char 
 12689 ;; Return value:  Size  Location     Type
 12690 ;;                  4    6[BANK0 ] long 
 12691 ;; Registers used:
 12692 ;;		wreg, status,2, status,0
 12693 ;; Tracked objects:
 12694 ;;		On entry : 0/0
 12695 ;;		On exit  : 0/0
 12696 ;;		Unchanged: 0/0
 12697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12698 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12699 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12701 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12702 ;;Total ram usage:       10 bytes
 12703 ;; Hardware stack levels used:    1
 12704 ;; Hardware stack levels required when called:    3
 12705 ;; This function calls:
 12706 ;;		Nothing
 12707 ;; This function is called by:
 12708 ;;		_main
 12709 ;; This function uses a non-reentrant model
 12710 ;;
 12711                           
 12712                           	psect	text49
 12713  002BF0                     __ptext49:
 12714                           	opt stack 0
 12715  002BF0                     ___almod:
 12716                           	opt stack 27
 12717                           
 12718                           ;incstack = 0
 12719  002BF0  0E00               	movlw	0
 12720  002BF2  6E30               	movwf	___almod@sign,c
 12721  002BF4  0100               	movlb	0	; () banked
 12722  002BF6  AF89               	btfss	(___almod@dividend+3)& (0+255),7,b
 12723  002BF8  D00B               	goto	l7104
 12724                           
 12725                           ; BSR set to: 0
 12726  002BFA  0100               	movlb	0	; () banked
 12727  002BFC  1F89               	comf	(___almod@dividend+3)& (0+255),f,b
 12728  002BFE  1F88               	comf	(___almod@dividend+2)& (0+255),f,b
 12729  002C00  1F87               	comf	(___almod@dividend+1)& (0+255),f,b
 12730  002C02  6D86               	negf	___almod@dividend& (0+255),b
 12731  002C04  0E00               	movlw	0
 12732  002C06  2387               	addwfc	(___almod@dividend+1)& (0+255),f,b
 12733  002C08  2388               	addwfc	(___almod@dividend+2)& (0+255),f,b
 12734  002C0A  2389               	addwfc	(___almod@dividend+3)& (0+255),f,b
 12735                           
 12736                           ; BSR set to: 0
 12737  002C0C  0E01               	movlw	1
 12738  002C0E  6E30               	movwf	___almod@sign,c
 12739  002C10                     l7104:
 12740                           
 12741                           ; BSR set to: 0
 12742  002C10  0100               	movlb	0	; () banked
 12743  002C12  AF8D               	btfss	(___almod@divisor+3)& (0+255),7,b
 12744  002C14  D009               	goto	l7108
 12745                           
 12746                           ; BSR set to: 0
 12747  002C16  0100               	movlb	0	; () banked
 12748  002C18  1F8D               	comf	(___almod@divisor+3)& (0+255),f,b
 12749  002C1A  1F8C               	comf	(___almod@divisor+2)& (0+255),f,b
 12750  002C1C  1F8B               	comf	(___almod@divisor+1)& (0+255),f,b
 12751  002C1E  6D8A               	negf	___almod@divisor& (0+255),b
 12752  002C20  0E00               	movlw	0
 12753  002C22  238B               	addwfc	(___almod@divisor+1)& (0+255),f,b
 12754  002C24  238C               	addwfc	(___almod@divisor+2)& (0+255),f,b
 12755  002C26  238D               	addwfc	(___almod@divisor+3)& (0+255),f,b
 12756  002C28                     l7108:
 12757                           
 12758                           ; BSR set to: 0
 12759  002C28  0100               	movlb	0	; () banked
 12760  002C2A  518A               	movf	___almod@divisor& (0+255),w,b
 12761  002C2C  0100               	movlb	0	; () banked
 12762  002C2E  118B               	iorwf	(___almod@divisor+1)& (0+255),w,b
 12763  002C30  0100               	movlb	0	; () banked
 12764  002C32  118C               	iorwf	(___almod@divisor+2)& (0+255),w,b
 12765  002C34  0100               	movlb	0	; () banked
 12766  002C36  118D               	iorwf	(___almod@divisor+3)& (0+255),w,b
 12767  002C38  B4D8               	btfsc	status,2,c
 12768  002C3A  D037               	goto	l7124
 12769                           
 12770                           ; BSR set to: 0
 12771  002C3C  0E01               	movlw	1
 12772  002C3E  6E2F               	movwf	___almod@counter,c
 12773  002C40  D007               	goto	l7114
 12774  002C42                     l7112:
 12775                           
 12776                           ; BSR set to: 0
 12777  002C42  0100               	movlb	0	; () banked
 12778  002C44  90D8               	bcf	status,0,c
 12779  002C46  378A               	rlcf	___almod@divisor& (0+255),f,b
 12780  002C48  378B               	rlcf	(___almod@divisor+1)& (0+255),f,b
 12781  002C4A  378C               	rlcf	(___almod@divisor+2)& (0+255),f,b
 12782  002C4C  378D               	rlcf	(___almod@divisor+3)& (0+255),f,b
 12783  002C4E  2A2F               	incf	___almod@counter,f,c
 12784  002C50                     l7114:
 12785                           
 12786                           ; BSR set to: 0
 12787  002C50  0100               	movlb	0	; () banked
 12788  002C52  AF8D               	btfss	(___almod@divisor+3)& (0+255),7,b
 12789  002C54  D7F6               	goto	l7112
 12790  002C56                     l7116:
 12791                           
 12792                           ; BSR set to: 0
 12793  002C56  0100               	movlb	0	; () banked
 12794  002C58  518A               	movf	___almod@divisor& (0+255),w,b
 12795  002C5A  0100               	movlb	0	; () banked
 12796  002C5C  5D86               	subwf	___almod@dividend& (0+255),w,b
 12797  002C5E  0100               	movlb	0	; () banked
 12798  002C60  518B               	movf	(___almod@divisor+1)& (0+255),w,b
 12799  002C62  0100               	movlb	0	; () banked
 12800  002C64  5987               	subwfb	(___almod@dividend+1)& (0+255),w,b
 12801  002C66  0100               	movlb	0	; () banked
 12802  002C68  518C               	movf	(___almod@divisor+2)& (0+255),w,b
 12803  002C6A  0100               	movlb	0	; () banked
 12804  002C6C  5988               	subwfb	(___almod@dividend+2)& (0+255),w,b
 12805  002C6E  0100               	movlb	0	; () banked
 12806  002C70  518D               	movf	(___almod@divisor+3)& (0+255),w,b
 12807  002C72  0100               	movlb	0	; () banked
 12808  002C74  5989               	subwfb	(___almod@dividend+3)& (0+255),w,b
 12809  002C76  A0D8               	btfss	status,0,c
 12810  002C78  D010               	goto	l7120
 12811                           
 12812                           ; BSR set to: 0
 12813  002C7A  0100               	movlb	0	; () banked
 12814  002C7C  518A               	movf	___almod@divisor& (0+255),w,b
 12815  002C7E  0100               	movlb	0	; () banked
 12816  002C80  5F86               	subwf	___almod@dividend& (0+255),f,b
 12817  002C82  0100               	movlb	0	; () banked
 12818  002C84  518B               	movf	(___almod@divisor+1)& (0+255),w,b
 12819  002C86  0100               	movlb	0	; () banked
 12820  002C88  5B87               	subwfb	(___almod@dividend+1)& (0+255),f,b
 12821  002C8A  0100               	movlb	0	; () banked
 12822  002C8C  518C               	movf	(___almod@divisor+2)& (0+255),w,b
 12823  002C8E  0100               	movlb	0	; () banked
 12824  002C90  5B88               	subwfb	(___almod@dividend+2)& (0+255),f,b
 12825  002C92  0100               	movlb	0	; () banked
 12826  002C94  518D               	movf	(___almod@divisor+3)& (0+255),w,b
 12827  002C96  0100               	movlb	0	; () banked
 12828  002C98  5B89               	subwfb	(___almod@dividend+3)& (0+255),f,b
 12829  002C9A                     l7120:
 12830                           
 12831                           ; BSR set to: 0
 12832  002C9A  0100               	movlb	0	; () banked
 12833  002C9C  90D8               	bcf	status,0,c
 12834  002C9E  338D               	rrcf	(___almod@divisor+3)& (0+255),f,b
 12835  002CA0  338C               	rrcf	(___almod@divisor+2)& (0+255),f,b
 12836  002CA2  338B               	rrcf	(___almod@divisor+1)& (0+255),f,b
 12837  002CA4  338A               	rrcf	___almod@divisor& (0+255),f,b
 12838                           
 12839                           ; BSR set to: 0
 12840  002CA6  2E2F               	decfsz	___almod@counter,f,c
 12841  002CA8  D7D6               	goto	l7116
 12842  002CAA                     l7124:
 12843                           
 12844                           ; BSR set to: 0
 12845  002CAA  5030               	movf	___almod@sign,w,c
 12846  002CAC  B4D8               	btfsc	status,2,c
 12847  002CAE  D009               	goto	l7128
 12848                           
 12849                           ; BSR set to: 0
 12850  002CB0  0100               	movlb	0	; () banked
 12851  002CB2  1F89               	comf	(___almod@dividend+3)& (0+255),f,b
 12852  002CB4  1F88               	comf	(___almod@dividend+2)& (0+255),f,b
 12853  002CB6  1F87               	comf	(___almod@dividend+1)& (0+255),f,b
 12854  002CB8  6D86               	negf	___almod@dividend& (0+255),b
 12855  002CBA  0E00               	movlw	0
 12856  002CBC  2387               	addwfc	(___almod@dividend+1)& (0+255),f,b
 12857  002CBE  2388               	addwfc	(___almod@dividend+2)& (0+255),f,b
 12858  002CC0  2389               	addwfc	(___almod@dividend+3)& (0+255),f,b
 12859  002CC2                     l7128:
 12860                           
 12861                           ; BSR set to: 0
 12862  002CC2  C086  F086         	movff	___almod@dividend,?___almod
 12863  002CC6  C087  F087         	movff	___almod@dividend+1,?___almod+1
 12864  002CCA  C088  F088         	movff	___almod@dividend+2,?___almod+2
 12865  002CCE  C089  F089         	movff	___almod@dividend+3,?___almod+3
 12866  002CD2  0012               	return	
 12867  002CD4                     __end_of___almod:
 12868                           	opt stack 0
 12869                           tblptru	equ	0xFF8
 12870                           tblptrh	equ	0xFF7
 12871                           tblptrl	equ	0xFF6
 12872                           tablat	equ	0xFF5
 12873                           prodh	equ	0xFF4
 12874                           prodl	equ	0xFF3
 12875                           intcon	equ	0xFF2
 12876                           intcon3	equ	0xFF0
 12877                           postinc0	equ	0xFEE
 12878                           wreg	equ	0xFE8
 12879                           postdec1	equ	0xFE5
 12880                           fsr1l	equ	0xFE1
 12881                           indf2	equ	0xFDF
 12882                           postinc2	equ	0xFDE
 12883                           postdec2	equ	0xFDD
 12884                           fsr2h	equ	0xFDA
 12885                           fsr2l	equ	0xFD9
 12886                           status	equ	0xFD8
 12887                           
 12888 ;; *************** function ___aldiv *****************
 12889 ;; Defined at:
 12890 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
 12891 ;; Parameters:    Size  Location     Type
 12892 ;;  dividend        4   38[COMRAM] long 
 12893 ;;  divisor         4   42[COMRAM] long 
 12894 ;; Auto vars:     Size  Location     Type
 12895 ;;  quotient        4    2[BANK0 ] long 
 12896 ;;  sign            1    1[BANK0 ] unsigned char 
 12897 ;;  counter         1    0[BANK0 ] unsigned char 
 12898 ;; Return value:  Size  Location     Type
 12899 ;;                  4   38[COMRAM] long 
 12900 ;; Registers used:
 12901 ;;		wreg, status,2, status,0
 12902 ;; Tracked objects:
 12903 ;;		On entry : 0/0
 12904 ;;		On exit  : 0/0
 12905 ;;		Unchanged: 0/0
 12906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12907 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12908 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12910 ;;      Totals:         8       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12911 ;;Total ram usage:       14 bytes
 12912 ;; Hardware stack levels used:    1
 12913 ;; Hardware stack levels required when called:    3
 12914 ;; This function calls:
 12915 ;;		Nothing
 12916 ;; This function is called by:
 12917 ;;		_main
 12918 ;; This function uses a non-reentrant model
 12919 ;;
 12920                           
 12921                           	psect	text50
 12922  002CD4                     __ptext50:
 12923                           	opt stack 0
 12924  002CD4                     ___aldiv:
 12925                           	opt stack 27
 12926                           
 12927                           ; BSR set to: 0
 12928                           ;incstack = 0
 12929  002CD4  0E00               	movlw	0
 12930  002CD6  0100               	movlb	0	; () banked
 12931  002CD8  6F81               	movwf	___aldiv@sign& (0+255),b
 12932                           
 12933                           ; BSR set to: 0
 12934  002CDA  AE2E               	btfss	___aldiv@divisor+3,7,c
 12935  002CDC  D00B               	goto	l7060
 12936                           
 12937                           ; BSR set to: 0
 12938  002CDE  1E2E               	comf	___aldiv@divisor+3,f,c
 12939  002CE0  1E2D               	comf	___aldiv@divisor+2,f,c
 12940  002CE2  1E2C               	comf	___aldiv@divisor+1,f,c
 12941  002CE4  6C2B               	negf	___aldiv@divisor,c
 12942  002CE6  0E00               	movlw	0
 12943  002CE8  222C               	addwfc	___aldiv@divisor+1,f,c
 12944  002CEA  222D               	addwfc	___aldiv@divisor+2,f,c
 12945  002CEC  222E               	addwfc	___aldiv@divisor+3,f,c
 12946                           
 12947                           ; BSR set to: 0
 12948  002CEE  0E01               	movlw	1
 12949  002CF0  0100               	movlb	0	; () banked
 12950  002CF2  6F81               	movwf	___aldiv@sign& (0+255),b
 12951  002CF4                     l7060:
 12952                           
 12953                           ; BSR set to: 0
 12954  002CF4  AE2A               	btfss	___aldiv@dividend+3,7,c
 12955  002CF6  D00B               	goto	l7066
 12956                           
 12957                           ; BSR set to: 0
 12958  002CF8  1E2A               	comf	___aldiv@dividend+3,f,c
 12959  002CFA  1E29               	comf	___aldiv@dividend+2,f,c
 12960  002CFC  1E28               	comf	___aldiv@dividend+1,f,c
 12961  002CFE  6C27               	negf	___aldiv@dividend,c
 12962  002D00  0E00               	movlw	0
 12963  002D02  2228               	addwfc	___aldiv@dividend+1,f,c
 12964  002D04  2229               	addwfc	___aldiv@dividend+2,f,c
 12965  002D06  222A               	addwfc	___aldiv@dividend+3,f,c
 12966                           
 12967                           ; BSR set to: 0
 12968  002D08  0E01               	movlw	1
 12969  002D0A  0100               	movlb	0	; () banked
 12970  002D0C  1B81               	xorwf	___aldiv@sign& (0+255),f,b
 12971  002D0E                     l7066:
 12972                           
 12973                           ; BSR set to: 0
 12974  002D0E  0E00               	movlw	0
 12975  002D10  0100               	movlb	0	; () banked
 12976  002D12  6F82               	movwf	___aldiv@quotient& (0+255),b
 12977  002D14  0E00               	movlw	0
 12978  002D16  6F83               	movwf	(___aldiv@quotient+1)& (0+255),b
 12979  002D18  0E00               	movlw	0
 12980  002D1A  6F84               	movwf	(___aldiv@quotient+2)& (0+255),b
 12981  002D1C  0E00               	movlw	0
 12982  002D1E  6F85               	movwf	(___aldiv@quotient+3)& (0+255),b
 12983                           
 12984                           ; BSR set to: 0
 12985  002D20  502B               	movf	___aldiv@divisor,w,c
 12986  002D22  102C               	iorwf	___aldiv@divisor+1,w,c
 12987  002D24  102D               	iorwf	___aldiv@divisor+2,w,c
 12988  002D26  102E               	iorwf	___aldiv@divisor+3,w,c
 12989  002D28  B4D8               	btfsc	status,2,c
 12990  002D2A  D02F               	goto	l7088
 12991                           
 12992                           ; BSR set to: 0
 12993  002D2C  0E01               	movlw	1
 12994  002D2E  0100               	movlb	0	; () banked
 12995  002D30  6F80               	movwf	___aldiv@counter& (0+255),b
 12996  002D32  D007               	goto	l7074
 12997  002D34                     l7072:
 12998                           
 12999                           ; BSR set to: 0
 13000  002D34  90D8               	bcf	status,0,c
 13001  002D36  362B               	rlcf	___aldiv@divisor,f,c
 13002  002D38  362C               	rlcf	___aldiv@divisor+1,f,c
 13003  002D3A  362D               	rlcf	___aldiv@divisor+2,f,c
 13004  002D3C  362E               	rlcf	___aldiv@divisor+3,f,c
 13005  002D3E  0100               	movlb	0	; () banked
 13006  002D40  2B80               	incf	___aldiv@counter& (0+255),f,b
 13007  002D42                     l7074:
 13008                           
 13009                           ; BSR set to: 0
 13010  002D42  AE2E               	btfss	___aldiv@divisor+3,7,c
 13011  002D44  D7F7               	goto	l7072
 13012  002D46                     l7076:
 13013                           
 13014                           ; BSR set to: 0
 13015  002D46  0100               	movlb	0	; () banked
 13016  002D48  90D8               	bcf	status,0,c
 13017  002D4A  3782               	rlcf	___aldiv@quotient& (0+255),f,b
 13018  002D4C  3783               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 13019  002D4E  3784               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 13020  002D50  3785               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 13021                           
 13022                           ; BSR set to: 0
 13023  002D52  502B               	movf	___aldiv@divisor,w,c
 13024  002D54  5C27               	subwf	___aldiv@dividend,w,c
 13025  002D56  502C               	movf	___aldiv@divisor+1,w,c
 13026  002D58  5828               	subwfb	___aldiv@dividend+1,w,c
 13027  002D5A  502D               	movf	___aldiv@divisor+2,w,c
 13028  002D5C  5829               	subwfb	___aldiv@dividend+2,w,c
 13029  002D5E  502E               	movf	___aldiv@divisor+3,w,c
 13030  002D60  582A               	subwfb	___aldiv@dividend+3,w,c
 13031  002D62  A0D8               	btfss	status,0,c
 13032  002D64  D00A               	goto	l7084
 13033                           
 13034                           ; BSR set to: 0
 13035  002D66  502B               	movf	___aldiv@divisor,w,c
 13036  002D68  5E27               	subwf	___aldiv@dividend,f,c
 13037  002D6A  502C               	movf	___aldiv@divisor+1,w,c
 13038  002D6C  5A28               	subwfb	___aldiv@dividend+1,f,c
 13039  002D6E  502D               	movf	___aldiv@divisor+2,w,c
 13040  002D70  5A29               	subwfb	___aldiv@dividend+2,f,c
 13041  002D72  502E               	movf	___aldiv@divisor+3,w,c
 13042  002D74  5A2A               	subwfb	___aldiv@dividend+3,f,c
 13043                           
 13044                           ; BSR set to: 0
 13045  002D76  0100               	movlb	0	; () banked
 13046  002D78  8182               	bsf	___aldiv@quotient& (0+255),0,b
 13047  002D7A                     l7084:
 13048                           
 13049                           ; BSR set to: 0
 13050  002D7A  90D8               	bcf	status,0,c
 13051  002D7C  322E               	rrcf	___aldiv@divisor+3,f,c
 13052  002D7E  322D               	rrcf	___aldiv@divisor+2,f,c
 13053  002D80  322C               	rrcf	___aldiv@divisor+1,f,c
 13054  002D82  322B               	rrcf	___aldiv@divisor,f,c
 13055                           
 13056                           ; BSR set to: 0
 13057  002D84  0100               	movlb	0	; () banked
 13058  002D86  2F80               	decfsz	___aldiv@counter& (0+255),f,b
 13059  002D88  D7DE               	goto	l7076
 13060  002D8A                     l7088:
 13061                           
 13062                           ; BSR set to: 0
 13063  002D8A  0100               	movlb	0	; () banked
 13064  002D8C  5181               	movf	___aldiv@sign& (0+255),w,b
 13065  002D8E  0100               	movlb	0	; () banked
 13066  002D90  B4D8               	btfsc	status,2,c
 13067  002D92  D009               	goto	l7092
 13068                           
 13069                           ; BSR set to: 0
 13070  002D94  0100               	movlb	0	; () banked
 13071  002D96  1F85               	comf	(___aldiv@quotient+3)& (0+255),f,b
 13072  002D98  1F84               	comf	(___aldiv@quotient+2)& (0+255),f,b
 13073  002D9A  1F83               	comf	(___aldiv@quotient+1)& (0+255),f,b
 13074  002D9C  6D82               	negf	___aldiv@quotient& (0+255),b
 13075  002D9E  0E00               	movlw	0
 13076  002DA0  2383               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 13077  002DA2  2384               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 13078  002DA4  2385               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 13079  002DA6                     l7092:
 13080                           
 13081                           ; BSR set to: 0
 13082  002DA6  C082  F027         	movff	___aldiv@quotient,?___aldiv
 13083  002DAA  C083  F028         	movff	___aldiv@quotient+1,?___aldiv+1
 13084  002DAE  C084  F029         	movff	___aldiv@quotient+2,?___aldiv+2
 13085  002DB2  C085  F02A         	movff	___aldiv@quotient+3,?___aldiv+3
 13086  002DB6  0012               	return	
 13087  002DB8                     __end_of___aldiv:
 13088                           	opt stack 0
 13089                           tblptru	equ	0xFF8
 13090                           tblptrh	equ	0xFF7
 13091                           tblptrl	equ	0xFF6
 13092                           tablat	equ	0xFF5
 13093                           prodh	equ	0xFF4
 13094                           prodl	equ	0xFF3
 13095                           intcon	equ	0xFF2
 13096                           intcon3	equ	0xFF0
 13097                           postinc0	equ	0xFEE
 13098                           wreg	equ	0xFE8
 13099                           postdec1	equ	0xFE5
 13100                           fsr1l	equ	0xFE1
 13101                           indf2	equ	0xFDF
 13102                           postinc2	equ	0xFDE
 13103                           postdec2	equ	0xFDD
 13104                           fsr2h	equ	0xFDA
 13105                           fsr2l	equ	0xFD9
 13106                           status	equ	0xFD8
 13107                           
 13108 ;; *************** function _service *****************
 13109 ;; Defined at:
 13110 ;;		line 325 in file "main.c"
 13111 ;; Parameters:    Size  Location     Type
 13112 ;;		None
 13113 ;; Auto vars:     Size  Location     Type
 13114 ;;  key             1   37[COMRAM] unsigned char 
 13115 ;; Return value:  Size  Location     Type
 13116 ;;                  1    wreg      void 
 13117 ;; Registers used:
 13118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13119 ;; Tracked objects:
 13120 ;;		On entry : 0/0
 13121 ;;		On exit  : 0/0
 13122 ;;		Unchanged: 0/0
 13123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13125 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13126 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13127 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13128 ;;Total ram usage:       19 bytes
 13129 ;; Hardware stack levels used:    1
 13130 ;; Hardware stack levels required when called:    2
 13131 ;; This function calls:
 13132 ;;		_servoInterruptService
 13133 ;;		i2_startTimer
 13134 ;; This function is called by:
 13135 ;;		Interrupt level 2
 13136 ;; This function uses a non-reentrant model
 13137 ;;
 13138                           
 13139                           	psect	intcode
 13140  000008                     __pintcode:
 13141                           	opt stack 0
 13142  000008                     _service:
 13143                           	opt stack 21
 13144                           
 13145                           ; BSR set to: 0
 13146                           ;incstack = 0
 13147  000008  8259               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13148  00000A  ED05  F015         	call	int_func,f	;refresh shadow registers
 13149                           tblptru	equ	0xFF8
 13150                           tblptrh	equ	0xFF7
 13151                           tblptrl	equ	0xFF6
 13152                           tablat	equ	0xFF5
 13153                           prodh	equ	0xFF4
 13154                           prodl	equ	0xFF3
 13155                           intcon	equ	0xFF2
 13156                           intcon3	equ	0xFF0
 13157                           postinc0	equ	0xFEE
 13158                           wreg	equ	0xFE8
 13159                           postdec1	equ	0xFE5
 13160                           fsr1l	equ	0xFE1
 13161                           indf2	equ	0xFDF
 13162                           postinc2	equ	0xFDE
 13163                           postdec2	equ	0xFDD
 13164                           fsr2h	equ	0xFDA
 13165                           fsr2l	equ	0xFD9
 13166                           status	equ	0xFD8
 13167                           
 13168                           	psect	intcode_body
 13169  002A0A                     __pintcode_body:
 13170                           	opt stack 21
 13171  002A0A                     int_func:
 13172                           	opt stack 21
 13173  002A0A  0006               	pop		; remove dummy address from shadow register refresh
 13174  002A0C  CFFA F018          	movff	pclath,??_service+4
 13175  002A10  CFFB F019          	movff	pclatu,??_service+5
 13176  002A14  CFE9 F01A          	movff	fsr0l,??_service+6
 13177  002A18  CFEA F01B          	movff	fsr0h,??_service+7
 13178  002A1C  CFE1 F01C          	movff	fsr1l,??_service+8
 13179  002A20  CFE2 F01D          	movff	fsr1h,??_service+9
 13180  002A24  CFD9 F01E          	movff	fsr2l,??_service+10
 13181  002A28  CFDA F01F          	movff	fsr2h,??_service+11
 13182  002A2C  CFF3 F020          	movff	prodl,??_service+12
 13183  002A30  CFF4 F021          	movff	prodh,??_service+13
 13184  002A34  CFF6 F022          	movff	tblptrl,??_service+14
 13185  002A38  CFF7 F023          	movff	tblptrh,??_service+15
 13186  002A3C  CFF8 F024          	movff	tblptru,??_service+16
 13187  002A40  CFF5 F025          	movff	tablat,??_service+17
 13188                           
 13189                           ;main.c: 327: if( servoInterruptService() )return;
 13190  002A44  EC85  F014         	call	_servoInterruptService	;wreg free
 13191  002A48  0900               	iorlw	0
 13192  002A4A  A4D8               	btfss	status,2,c
 13193  002A4C  D03E               	goto	i2l190
 13194                           
 13195                           ;main.c: 329: if(TMR1IF){
 13196  002A4E  A09E               	btfss	3998,0,c	;volatile
 13197  002A50  D024               	goto	i2l191
 13198                           
 13199                           ;main.c: 330: startTimer(1,0xffff - period);
 13200  002A52  0E00               	movlw	0
 13201  002A54  6E08               	movwf	i2startTimer@timer+1,c
 13202  002A56  0E01               	movlw	1
 13203  002A58  6E07               	movwf	i2startTimer@timer,c
 13204  002A5A  0EFF               	movlw	255
 13205  002A5C  6E14               	movwf	??_service& (0+255),c
 13206  002A5E  0EFF               	movlw	255
 13207  002A60  6E15               	movwf	(??_service+1)& (0+255),c
 13208  002A62  C145  F016         	movff	_period,??_service+2
 13209  002A66  C146  F017         	movff	_period+1,??_service+3
 13210  002A6A  1E16               	comf	??_service+2,f,c
 13211  002A6C  1E17               	comf	??_service+3,f,c
 13212  002A6E  4A16               	infsnz	??_service+2,f,c
 13213  002A70  2A17               	incf	??_service+3,f,c
 13214  002A72  5014               	movf	??_service,w,c
 13215  002A74  2616               	addwf	??_service+2,f,c
 13216  002A76  5015               	movf	??_service+1,w,c
 13217  002A78  2217               	addwfc	??_service+3,f,c
 13218  002A7A  C016  F009         	movff	??_service+2,i2startTimer@val
 13219  002A7E  C017  F00A         	movff	??_service+3,i2startTimer@val+1
 13220  002A82  6A0B               	clrf	i2startTimer@val+2,c
 13221  002A84  6A0C               	clrf	i2startTimer@val+3,c
 13222  002A86  ECAF  F01B         	call	i2_startTimer	;wreg free
 13223                           
 13224                           ;main.c: 331: time+=1;
 13225  002A8A  0E01               	movlw	1
 13226  002A8C  2634               	addwf	_time,f,c
 13227  002A8E  0E00               	movlw	0
 13228  002A90  2235               	addwfc	_time+1,f,c
 13229  002A92  2236               	addwfc	_time+2,f,c
 13230  002A94  2237               	addwfc	_time+3,f,c
 13231                           
 13232                           ;main.c: 332: TMR1IF = 0;
 13233  002A96  909E               	bcf	3998,0,c	;volatile
 13234                           
 13235                           ;main.c: 333: return;
 13236  002A98  D018               	goto	i2l190
 13237  002A9A                     i2l191:
 13238                           
 13239                           ;main.c: 334: }
 13240                           ;main.c: 337: if(INT0IF){ INT0IF = 0;
 13241  002A9A  A2F2               	btfss	intcon,1,c	;volatile
 13242  002A9C  D006               	goto	i2l192
 13243  002A9E  92F2               	bcf	intcon,1,c	;volatile
 13244                           
 13245                           ;main.c: 338: batteryDetected = 1;
 13246  002AA0  0E00               	movlw	0
 13247  002AA2  6E39               	movwf	_batteryDetected+1,c
 13248  002AA4  0E01               	movlw	1
 13249  002AA6  6E38               	movwf	_batteryDetected,c
 13250                           
 13251                           ;main.c: 339: return;
 13252  002AA8  D010               	goto	i2l190
 13253  002AAA                     i2l192:
 13254                           
 13255                           ;main.c: 340: }
 13256                           ;main.c: 343: if(INT1IF && INT1IE){INT1IF = 0;
 13257  002AAA  B0F0               	btfsc	intcon3,0,c	;volatile
 13258  002AAC  A6F0               	btfss	intcon3,3,c	;volatile
 13259  002AAE  D00D               	goto	i2l190
 13260  002AB0  90F0               	bcf	intcon3,0,c	;volatile
 13261                           
 13262                           ;main.c: 344: char key = (PORTB & 0xF0) >> 4;
 13263  002AB2  3881               	swapf	3969,w,c	;volatile
 13264  002AB4  0B0F               	andlw	15
 13265  002AB6  0B0F               	andlw	15
 13266  002AB8  6E26               	movwf	service@key,c
 13267                           
 13268                           ;main.c: 345: if(key == 12)terminate = 1;
 13269  002ABA  0E0C               	movlw	12
 13270  002ABC  1826               	xorwf	service@key,w,c
 13271  002ABE  A4D8               	btfss	status,2,c
 13272  002AC0  D004               	goto	i2l190
 13273  002AC2  0E00               	movlw	0
 13274  002AC4  6E47               	movwf	_terminate+1,c
 13275  002AC6  0E01               	movlw	1
 13276  002AC8  6E46               	movwf	_terminate,c
 13277  002ACA                     i2l190:
 13278  002ACA  C025  FFF5         	movff	??_service+17,tablat
 13279  002ACE  C024  FFF8         	movff	??_service+16,tblptru
 13280  002AD2  C023  FFF7         	movff	??_service+15,tblptrh
 13281  002AD6  C022  FFF6         	movff	??_service+14,tblptrl
 13282  002ADA  C021  FFF4         	movff	??_service+13,prodh
 13283  002ADE  C020  FFF3         	movff	??_service+12,prodl
 13284  002AE2  C01F  FFDA         	movff	??_service+11,fsr2h
 13285  002AE6  C01E  FFD9         	movff	??_service+10,fsr2l
 13286  002AEA  C01D  FFE2         	movff	??_service+9,fsr1h
 13287  002AEE  C01C  FFE1         	movff	??_service+8,fsr1l
 13288  002AF2  C01B  FFEA         	movff	??_service+7,fsr0h
 13289  002AF6  C01A  FFE9         	movff	??_service+6,fsr0l
 13290  002AFA  C019  FFFB         	movff	??_service+5,pclatu
 13291  002AFE  C018  FFFA         	movff	??_service+4,pclath
 13292  002B02  9259               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13293  002B04  0011               	retfie		f
 13294  002B06                     __end_of_service:
 13295                           	opt stack 0
 13296                           pclatu	equ	0xFFB
 13297                           pclath	equ	0xFFA
 13298                           tblptru	equ	0xFF8
 13299                           tblptrh	equ	0xFF7
 13300                           tblptrl	equ	0xFF6
 13301                           tablat	equ	0xFF5
 13302                           prodh	equ	0xFF4
 13303                           prodl	equ	0xFF3
 13304                           intcon	equ	0xFF2
 13305                           intcon3	equ	0xFF0
 13306                           postinc0	equ	0xFEE
 13307                           fsr0h	equ	0xFEA
 13308                           fsr0l	equ	0xFE9
 13309                           wreg	equ	0xFE8
 13310                           postdec1	equ	0xFE5
 13311                           fsr1h	equ	0xFE2
 13312                           fsr1l	equ	0xFE1
 13313                           indf2	equ	0xFDF
 13314                           postinc2	equ	0xFDE
 13315                           postdec2	equ	0xFDD
 13316                           fsr2h	equ	0xFDA
 13317                           fsr2l	equ	0xFD9
 13318                           status	equ	0xFD8
 13319                           
 13320 ;; *************** function _servoInterruptService *****************
 13321 ;; Defined at:
 13322 ;;		line 55 in file "servo.c"
 13323 ;; Parameters:    Size  Location     Type
 13324 ;;		None
 13325 ;; Auto vars:     Size  Location     Type
 13326 ;;		None
 13327 ;; Return value:  Size  Location     Type
 13328 ;;                  1    wreg      unsigned char 
 13329 ;; Registers used:
 13330 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13331 ;; Tracked objects:
 13332 ;;		On entry : 0/0
 13333 ;;		On exit  : 0/0
 13334 ;;		Unchanged: 0/0
 13335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13338 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13339 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13340 ;;Total ram usage:        4 bytes
 13341 ;; Hardware stack levels used:    1
 13342 ;; Hardware stack levels required when called:    1
 13343 ;; This function calls:
 13344 ;;		i2___awmod
 13345 ;;		i2_digitalWrite
 13346 ;;		i2_startTimer
 13347 ;; This function is called by:
 13348 ;;		_service
 13349 ;; This function uses a non-reentrant model
 13350 ;;
 13351                           
 13352                           	psect	text52
 13353  00290A                     __ptext52:
 13354                           	opt stack 0
 13355  00290A                     _servoInterruptService:
 13356                           	opt stack 21
 13357                           
 13358                           ;servo.c: 57: if(TMR0IF){TMR0IF = 0;
 13359                           
 13360                           ;incstack = 0
 13361  00290A  A4F2               	btfss	intcon,2,c	;volatile
 13362  00290C  D07C               	goto	i2l5200
 13363  00290E  94F2               	bcf	intcon,2,c	;volatile
 13364                           
 13365                           ;servo.c: 58: digitalWrite(servos[curr],0);
 13366  002910  90D8               	bcf	status,0,c
 13367  002912  343A               	rlcf	_curr,w,c
 13368  002914  6ED9               	movwf	fsr2l,c
 13369  002916  343B               	rlcf	_curr+1,w,c
 13370  002918  6EDA               	movwf	fsr2h,c
 13371  00291A  0E6D               	movlw	low _servos
 13372  00291C  26D9               	addwf	fsr2l,f,c
 13373  00291E  0E01               	movlw	high _servos
 13374  002920  22DA               	addwfc	fsr2h,f,c
 13375  002922  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 13376  002926  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 13377  00292A  0E00               	movlw	0
 13378  00292C  6E0A               	movwf	i2digitalWrite@val+1,c
 13379  00292E  0E00               	movlw	0
 13380  002930  6E09               	movwf	i2digitalWrite@val,c
 13381  002932  EC78  F018         	call	i2_digitalWrite	;wreg free
 13382                           
 13383                           ;servo.c: 59: digitalWrite(servos[ (curr+1)%(n+1) ],1);
 13384  002936  0E01               	movlw	1
 13385  002938  243A               	addwf	_curr,w,c
 13386  00293A  6E01               	movwf	i2___awmod@dividend,c
 13387  00293C  0E00               	movlw	0
 13388  00293E  203B               	addwfc	_curr+1,w,c
 13389  002940  6E02               	movwf	i2___awmod@dividend+1,c
 13390  002942  0E01               	movlw	1
 13391  002944  243C               	addwf	_n,w,c
 13392  002946  6E03               	movwf	i2___awmod@divisor,c
 13393  002948  0E00               	movlw	0
 13394  00294A  203D               	addwfc	_n+1,w,c
 13395  00294C  6E04               	movwf	i2___awmod@divisor+1,c
 13396  00294E  EC8F  F01A         	call	i2___awmod	;wreg free
 13397  002952  90D8               	bcf	status,0,c
 13398  002954  3601               	rlcf	?i2___awmod,f,c
 13399  002956  3602               	rlcf	?i2___awmod+1,f,c
 13400  002958  0E6D               	movlw	low _servos
 13401  00295A  2401               	addwf	?i2___awmod,w,c
 13402  00295C  6ED9               	movwf	fsr2l,c
 13403  00295E  0E01               	movlw	high _servos
 13404  002960  2002               	addwfc	?i2___awmod+1,w,c
 13405  002962  6EDA               	movwf	fsr2h,c
 13406  002964  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 13407  002968  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 13408  00296C  0E00               	movlw	0
 13409  00296E  6E0A               	movwf	i2digitalWrite@val+1,c
 13410  002970  0E01               	movlw	1
 13411  002972  6E09               	movwf	i2digitalWrite@val,c
 13412  002974  EC78  F018         	call	i2_digitalWrite	;wreg free
 13413                           
 13414                           ;servo.c: 60: startTimer(0, 0xFFFF - pulse[ (curr+1)%(n+1) ]);
 13415  002978  0E00               	movlw	0
 13416  00297A  6E08               	movwf	i2startTimer@timer+1,c
 13417  00297C  0E00               	movlw	0
 13418  00297E  6E07               	movwf	i2startTimer@timer,c
 13419  002980  0EFF               	movlw	255
 13420  002982  6E10               	movwf	??_servoInterruptService& (0+255),c
 13421  002984  0EFF               	movlw	255
 13422  002986  6E11               	movwf	(??_servoInterruptService+1)& (0+255),c
 13423  002988  0E01               	movlw	1
 13424  00298A  243A               	addwf	_curr,w,c
 13425  00298C  6E01               	movwf	i2___awmod@dividend,c
 13426  00298E  0E00               	movlw	0
 13427  002990  203B               	addwfc	_curr+1,w,c
 13428  002992  6E02               	movwf	i2___awmod@dividend+1,c
 13429  002994  0E01               	movlw	1
 13430  002996  243C               	addwf	_n,w,c
 13431  002998  6E03               	movwf	i2___awmod@divisor,c
 13432  00299A  0E00               	movlw	0
 13433  00299C  203D               	addwfc	_n+1,w,c
 13434  00299E  6E04               	movwf	i2___awmod@divisor+1,c
 13435  0029A0  EC8F  F01A         	call	i2___awmod	;wreg free
 13436  0029A4  90D8               	bcf	status,0,c
 13437  0029A6  3601               	rlcf	?i2___awmod,f,c
 13438  0029A8  3602               	rlcf	?i2___awmod+1,f,c
 13439  0029AA  0E65               	movlw	low _pulse
 13440  0029AC  2401               	addwf	?i2___awmod,w,c
 13441  0029AE  6ED9               	movwf	fsr2l,c
 13442  0029B0  0E01               	movlw	high _pulse
 13443  0029B2  2002               	addwfc	?i2___awmod+1,w,c
 13444  0029B4  6EDA               	movwf	fsr2h,c
 13445  0029B6  CFDE F012          	movff	postinc2,??_servoInterruptService+2
 13446  0029BA  CFDD F013          	movff	postdec2,??_servoInterruptService+3
 13447  0029BE  1E12               	comf	??_servoInterruptService+2,f,c
 13448  0029C0  1E13               	comf	??_servoInterruptService+3,f,c
 13449  0029C2  4A12               	infsnz	??_servoInterruptService+2,f,c
 13450  0029C4  2A13               	incf	??_servoInterruptService+3,f,c
 13451  0029C6  5010               	movf	??_servoInterruptService,w,c
 13452  0029C8  2612               	addwf	??_servoInterruptService+2,f,c
 13453  0029CA  5011               	movf	??_servoInterruptService+1,w,c
 13454  0029CC  2213               	addwfc	??_servoInterruptService+3,f,c
 13455  0029CE  C012  F009         	movff	??_servoInterruptService+2,i2startTimer@val
 13456  0029D2  C013  F00A         	movff	??_servoInterruptService+3,i2startTimer@val+1
 13457  0029D6  6A0B               	clrf	i2startTimer@val+2,c
 13458  0029D8  6A0C               	clrf	i2startTimer@val+3,c
 13459  0029DA  ECAF  F01B         	call	i2_startTimer	;wreg free
 13460                           
 13461                           ;servo.c: 62: curr = (curr+1)%(n+1);
 13462  0029DE  0E01               	movlw	1
 13463  0029E0  243A               	addwf	_curr,w,c
 13464  0029E2  6E01               	movwf	i2___awmod@dividend,c
 13465  0029E4  0E00               	movlw	0
 13466  0029E6  203B               	addwfc	_curr+1,w,c
 13467  0029E8  6E02               	movwf	i2___awmod@dividend+1,c
 13468  0029EA  0E01               	movlw	1
 13469  0029EC  243C               	addwf	_n,w,c
 13470  0029EE  6E03               	movwf	i2___awmod@divisor,c
 13471  0029F0  0E00               	movlw	0
 13472  0029F2  203D               	addwfc	_n+1,w,c
 13473  0029F4  6E04               	movwf	i2___awmod@divisor+1,c
 13474  0029F6  EC8F  F01A         	call	i2___awmod	;wreg free
 13475  0029FA  C001  F03A         	movff	?i2___awmod,_curr
 13476  0029FE  C002  F03B         	movff	?i2___awmod+1,_curr+1
 13477                           
 13478                           ;servo.c: 63: return 1;
 13479  002A02  0E01               	movlw	1
 13480  002A04  0012               	return	
 13481  002A06                     i2l5200:
 13482                           
 13483                           ;servo.c: 64: }
 13484                           ;servo.c: 65: return 0;
 13485  002A06  0E00               	movlw	0
 13486  002A08  0012               	return	
 13487  002A0A                     __end_of_servoInterruptService:
 13488                           	opt stack 0
 13489                           pclatu	equ	0xFFB
 13490                           pclath	equ	0xFFA
 13491                           tblptru	equ	0xFF8
 13492                           tblptrh	equ	0xFF7
 13493                           tblptrl	equ	0xFF6
 13494                           tablat	equ	0xFF5
 13495                           prodh	equ	0xFF4
 13496                           prodl	equ	0xFF3
 13497                           intcon	equ	0xFF2
 13498                           intcon3	equ	0xFF0
 13499                           postinc0	equ	0xFEE
 13500                           fsr0h	equ	0xFEA
 13501                           fsr0l	equ	0xFE9
 13502                           wreg	equ	0xFE8
 13503                           postdec1	equ	0xFE5
 13504                           fsr1h	equ	0xFE2
 13505                           fsr1l	equ	0xFE1
 13506                           indf2	equ	0xFDF
 13507                           postinc2	equ	0xFDE
 13508                           postdec2	equ	0xFDD
 13509                           fsr2h	equ	0xFDA
 13510                           fsr2l	equ	0xFD9
 13511                           status	equ	0xFD8
 13512                           
 13513 ;; *************** function i2_startTimer *****************
 13514 ;; Defined at:
 13515 ;;		line 76 in file "timer.c"
 13516 ;; Parameters:    Size  Location     Type
 13517 ;;  timer           2    6[COMRAM] int 
 13518 ;;  val             4    8[COMRAM] long 
 13519 ;; Auto vars:     Size  Location     Type
 13520 ;;		None
 13521 ;; Return value:  Size  Location     Type
 13522 ;;                  1    wreg      void 
 13523 ;; Registers used:
 13524 ;;		wreg, status,2, status,0
 13525 ;; Tracked objects:
 13526 ;;		On entry : 0/0
 13527 ;;		On exit  : 0/0
 13528 ;;		Unchanged: 0/0
 13529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13530 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13532 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13533 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13534 ;;Total ram usage:        8 bytes
 13535 ;; Hardware stack levels used:    1
 13536 ;; This function calls:
 13537 ;;		Nothing
 13538 ;; This function is called by:
 13539 ;;		_service
 13540 ;;		_servoInterruptService
 13541 ;; This function uses a non-reentrant model
 13542 ;;
 13543                           
 13544                           	psect	text53
 13545  00375E                     __ptext53:
 13546                           	opt stack 0
 13547  00375E                     i2_startTimer:
 13548                           	opt stack 22
 13549                           
 13550                           ;timer.c: 77: switch(timer){
 13551                           
 13552                           ;incstack = 0
 13553  00375E  D012               	goto	i2l4946
 13554  003760                     i2l433:
 13555                           
 13556                           ;timer.c: 79: TMR0H = val>>8;
 13557  003760  C00A  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 13558                           
 13559                           ;timer.c: 80: TMR0L = val;
 13560  003764  C009  FFD6         	movff	i2startTimer@val,4054	;volatile
 13561                           
 13562                           ;timer.c: 81: T0CON |= 1<<7;
 13563  003768  8ED5               	bsf	4053,7,c	;volatile
 13564                           
 13565                           ;timer.c: 82: break;
 13566  00376A  0012               	return	
 13567  00376C                     i2l435:
 13568                           
 13569                           ;timer.c: 84: TMR1H = val>>8;
 13570  00376C  C00A  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 13571                           
 13572                           ;timer.c: 85: TMR1L = val;
 13573  003770  C009  FFCE         	movff	i2startTimer@val,4046	;volatile
 13574                           
 13575                           ;timer.c: 86: T1CON |= 1<<0;
 13576  003774  80CD               	bsf	4045,0,c	;volatile
 13577                           
 13578                           ;timer.c: 87: break;
 13579  003776  0012               	return	
 13580  003778                     i2l436:
 13581                           
 13582                           ;timer.c: 89: TMR3H = val>>8;
 13583  003778  C00A  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 13584                           
 13585                           ;timer.c: 90: TMR3L = val;
 13586  00377C  C009  FFB2         	movff	i2startTimer@val,4018	;volatile
 13587                           
 13588                           ;timer.c: 91: T3CON |= 1<<0;
 13589  003780  80B1               	bsf	4017,0,c	;volatile
 13590                           
 13591                           ;timer.c: 92: }
 13592  003782  0012               	return	
 13593  003784                     i2l4946:
 13594  003784  C007  F00D         	movff	i2startTimer@timer,??i2_startTimer
 13595  003788  C008  F00E         	movff	i2startTimer@timer+1,??i2_startTimer+1
 13596                           
 13597                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13598                           ; Switch size 1, requested type "space"
 13599                           ; Number of cases is 1, Range of values is 0 to 0
 13600                           ; switch strategies available:
 13601                           ; Name         Instructions Cycles
 13602                           ; simple_byte            4     3 (average)
 13603                           ;	Chosen strategy is simple_byte
 13604  00378C  500E               	movf	??i2_startTimer+1,w,c
 13605  00378E  0A00               	xorlw	0	; case 0
 13606  003790  A4D8               	btfss	status,2,c
 13607  003792  0012               	return	
 13608                           
 13609                           ; Switch size 1, requested type "space"
 13610                           ; Number of cases is 3, Range of values is 0 to 3
 13611                           ; switch strategies available:
 13612                           ; Name         Instructions Cycles
 13613                           ; simple_byte           10     6 (average)
 13614                           ;	Chosen strategy is simple_byte
 13615  003794  500D               	movf	??i2_startTimer,w,c
 13616  003796  0A00               	xorlw	0	; case 0
 13617  003798  B4D8               	btfsc	status,2,c
 13618  00379A  D7E2               	goto	i2l433
 13619  00379C  0A01               	xorlw	1	; case 1
 13620  00379E  B4D8               	btfsc	status,2,c
 13621  0037A0  D7E5               	goto	i2l435
 13622  0037A2  0A02               	xorlw	2	; case 3
 13623  0037A4  A4D8               	btfss	status,2,c
 13624  0037A6  0012               	return	
 13625  0037A8  D7E7               	goto	i2l436
 13626  0037AA                     __end_ofi2_startTimer:
 13627                           	opt stack 0
 13628                           pclatu	equ	0xFFB
 13629                           pclath	equ	0xFFA
 13630                           tblptru	equ	0xFF8
 13631                           tblptrh	equ	0xFF7
 13632                           tblptrl	equ	0xFF6
 13633                           tablat	equ	0xFF5
 13634                           prodh	equ	0xFF4
 13635                           prodl	equ	0xFF3
 13636                           intcon	equ	0xFF2
 13637                           intcon3	equ	0xFF0
 13638                           postinc0	equ	0xFEE
 13639                           fsr0h	equ	0xFEA
 13640                           fsr0l	equ	0xFE9
 13641                           wreg	equ	0xFE8
 13642                           postdec1	equ	0xFE5
 13643                           fsr1h	equ	0xFE2
 13644                           fsr1l	equ	0xFE1
 13645                           indf2	equ	0xFDF
 13646                           postinc2	equ	0xFDE
 13647                           postdec2	equ	0xFDD
 13648                           fsr2h	equ	0xFDA
 13649                           fsr2l	equ	0xFD9
 13650                           status	equ	0xFD8
 13651                           
 13652 ;; *************** function i2_digitalWrite *****************
 13653 ;; Defined at:
 13654 ;;		line 53 in file "iopin.c"
 13655 ;; Parameters:    Size  Location     Type
 13656 ;;  pin             2    6[COMRAM] PTR int 
 13657 ;;		 -> AA_float(4), cylinderDir(4), redirectingServo(4), conveyorServo(4), 
 13658 ;;		 -> cylinderMotor(4), padServo(4), 
 13659 ;;  val             2    8[COMRAM] int 
 13660 ;; Auto vars:     Size  Location     Type
 13661 ;;  digitalWrite    2   13[COMRAM] int 
 13662 ;; Return value:  Size  Location     Type
 13663 ;;                  1    wreg      void 
 13664 ;; Registers used:
 13665 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13666 ;; Tracked objects:
 13667 ;;		On entry : 0/0
 13668 ;;		On exit  : 0/0
 13669 ;;		Unchanged: 0/0
 13670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13671 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13672 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13673 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13674 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13675 ;;Total ram usage:        9 bytes
 13676 ;; Hardware stack levels used:    1
 13677 ;; This function calls:
 13678 ;;		Nothing
 13679 ;; This function is called by:
 13680 ;;		_servoInterruptService
 13681 ;; This function uses a non-reentrant model
 13682 ;;
 13683                           
 13684                           	psect	text54
 13685  0030F0                     __ptext54:
 13686                           	opt stack 0
 13687  0030F0                     i2_digitalWrite:
 13688                           	opt stack 21
 13689                           
 13690                           ;iopin.c: 54: if(pin){
 13691                           
 13692                           ;incstack = 0
 13693  0030F0  5007               	movf	i2digitalWrite@pin,w,c
 13694  0030F2  1008               	iorwf	i2digitalWrite@pin+1,w,c
 13695  0030F4  B4D8               	btfsc	status,2,c
 13696  0030F6  0012               	return	
 13697                           
 13698                           ;iopin.c: 55: int p = 1 << pin[1];
 13699  0030F8  EE20 F002          	lfsr	2,2
 13700  0030FC  5007               	movf	i2digitalWrite@pin,w,c
 13701  0030FE  26D9               	addwf	fsr2l,f,c
 13702  003100  5008               	movf	i2digitalWrite@pin+1,w,c
 13703  003102  22DA               	addwfc	fsr2h,f,c
 13704  003104  50DF               	movf	indf2,w,c
 13705  003106  6E0B               	movwf	??i2_digitalWrite& (0+255),c
 13706  003108  0E01               	movlw	1
 13707  00310A  6E0C               	movwf	(??i2_digitalWrite+1)& (0+255),c
 13708  00310C  0E00               	movlw	0
 13709  00310E  6E0D               	movwf	(??i2_digitalWrite+2)& (0+255),c
 13710  003110  2A0B               	incf	??i2_digitalWrite,f,c
 13711  003112  D003               	goto	i2u466_44
 13712  003114                     i2u466_45:
 13713  003114  90D8               	bcf	status,0,c
 13714  003116  360C               	rlcf	??i2_digitalWrite+1,f,c
 13715  003118  360D               	rlcf	??i2_digitalWrite+2,f,c
 13716  00311A                     i2u466_44:
 13717  00311A  2E0B               	decfsz	??i2_digitalWrite,f,c
 13718  00311C  D7FB               	goto	i2u466_45
 13719  00311E  C00C  F00E         	movff	??i2_digitalWrite+1,i2digitalWrite@p
 13720  003122  C00D  F00F         	movff	??i2_digitalWrite+2,i2digitalWrite@p+1
 13721                           
 13722                           ;iopin.c: 56: if(val == 0){
 13723  003126  5009               	movf	i2digitalWrite@val,w,c
 13724  003128  100A               	iorwf	i2digitalWrite@val+1,w,c
 13725  00312A  A4D8               	btfss	status,2,c
 13726  00312C  D02B               	goto	i2l4932
 13727                           
 13728                           ;iopin.c: 57: p ^= 0xff;
 13729  00312E  0EFF               	movlw	255
 13730  003130  1A0E               	xorwf	i2digitalWrite@p,f,c
 13731                           
 13732                           ;iopin.c: 58: }
 13733                           ;iopin.c: 60: switch(pin[0]){
 13734  003132  D028               	goto	i2l4932
 13735  003134                     i2l4908:
 13736  003134  0409               	decf	i2digitalWrite@val,w,c
 13737  003136  100A               	iorwf	i2digitalWrite@val+1,w,c
 13738  003138  A4D8               	btfss	status,2,c
 13739  00313A  D003               	goto	i2l4912
 13740  00313C  500E               	movf	i2digitalWrite@p,w,c
 13741  00313E  1289               	iorwf	3977,f,c	;volatile
 13742  003140  0012               	return	
 13743  003142                     i2l4912:
 13744                           
 13745                           ;iopin.c: 62: else LATA &= p;
 13746  003142  500E               	movf	i2digitalWrite@p,w,c
 13747  003144  1689               	andwf	3977,f,c	;volatile
 13748                           
 13749                           ;iopin.c: 63: break;
 13750  003146  0012               	return	
 13751  003148                     i2l4914:
 13752  003148  0409               	decf	i2digitalWrite@val,w,c
 13753  00314A  100A               	iorwf	i2digitalWrite@val+1,w,c
 13754  00314C  A4D8               	btfss	status,2,c
 13755  00314E  D003               	goto	i2l4918
 13756  003150  500E               	movf	i2digitalWrite@p,w,c
 13757  003152  128A               	iorwf	3978,f,c	;volatile
 13758  003154  0012               	return	
 13759  003156                     i2l4918:
 13760                           
 13761                           ;iopin.c: 65: else LATB &= p;
 13762  003156  500E               	movf	i2digitalWrite@p,w,c
 13763  003158  168A               	andwf	3978,f,c	;volatile
 13764                           
 13765                           ;iopin.c: 66: break;
 13766  00315A  0012               	return	
 13767  00315C                     i2l4920:
 13768  00315C  0409               	decf	i2digitalWrite@val,w,c
 13769  00315E  100A               	iorwf	i2digitalWrite@val+1,w,c
 13770  003160  A4D8               	btfss	status,2,c
 13771  003162  D003               	goto	i2l4924
 13772  003164  500E               	movf	i2digitalWrite@p,w,c
 13773  003166  128B               	iorwf	3979,f,c	;volatile
 13774  003168  0012               	return	
 13775  00316A                     i2l4924:
 13776                           
 13777                           ;iopin.c: 68: else LATC &= p;
 13778  00316A  500E               	movf	i2digitalWrite@p,w,c
 13779  00316C  168B               	andwf	3979,f,c	;volatile
 13780                           
 13781                           ;iopin.c: 69: break;
 13782  00316E  0012               	return	
 13783  003170                     i2l4926:
 13784  003170  0409               	decf	i2digitalWrite@val,w,c
 13785  003172  100A               	iorwf	i2digitalWrite@val+1,w,c
 13786  003174  A4D8               	btfss	status,2,c
 13787  003176  D003               	goto	i2l4930
 13788  003178  500E               	movf	i2digitalWrite@p,w,c
 13789  00317A  128C               	iorwf	3980,f,c	;volatile
 13790  00317C  0012               	return	
 13791  00317E                     i2l4930:
 13792                           
 13793                           ;iopin.c: 71: else LATD &= p;
 13794  00317E  500E               	movf	i2digitalWrite@p,w,c
 13795  003180  168C               	andwf	3980,f,c	;volatile
 13796                           
 13797                           ;iopin.c: 72: }
 13798  003182  0012               	return	
 13799  003184                     i2l4932:
 13800  003184  C007  FFD9         	movff	i2digitalWrite@pin,fsr2l
 13801  003188  C008  FFDA         	movff	i2digitalWrite@pin+1,fsr2h
 13802  00318C  CFDE F00B          	movff	postinc2,??i2_digitalWrite
 13803  003190  CFDD F00C          	movff	postdec2,??i2_digitalWrite+1
 13804                           
 13805                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13806                           ; Switch size 1, requested type "space"
 13807                           ; Number of cases is 1, Range of values is 0 to 0
 13808                           ; switch strategies available:
 13809                           ; Name         Instructions Cycles
 13810                           ; simple_byte            4     3 (average)
 13811                           ;	Chosen strategy is simple_byte
 13812  003194  500C               	movf	??i2_digitalWrite+1,w,c
 13813  003196  0A00               	xorlw	0	; case 0
 13814  003198  A4D8               	btfss	status,2,c
 13815  00319A  0012               	return	
 13816                           
 13817                           ; Switch size 1, requested type "space"
 13818                           ; Number of cases is 4, Range of values is 0 to 3
 13819                           ; switch strategies available:
 13820                           ; Name         Instructions Cycles
 13821                           ; simple_byte           13     7 (average)
 13822                           ;	Chosen strategy is simple_byte
 13823  00319C  500B               	movf	??i2_digitalWrite,w,c
 13824  00319E  0A00               	xorlw	0	; case 0
 13825  0031A0  B4D8               	btfsc	status,2,c
 13826  0031A2  D7C8               	goto	i2l4908
 13827  0031A4  0A01               	xorlw	1	; case 1
 13828  0031A6  B4D8               	btfsc	status,2,c
 13829  0031A8  D7CF               	goto	i2l4914
 13830  0031AA  0A03               	xorlw	3	; case 2
 13831  0031AC  B4D8               	btfsc	status,2,c
 13832  0031AE  D7D6               	goto	i2l4920
 13833  0031B0  0A01               	xorlw	1	; case 3
 13834  0031B2  A4D8               	btfss	status,2,c
 13835  0031B4  0012               	return	
 13836  0031B6  D7DC               	goto	i2l4926
 13837  0031B8                     __end_ofi2_digitalWrite:
 13838                           	opt stack 0
 13839                           pclatu	equ	0xFFB
 13840                           pclath	equ	0xFFA
 13841                           tblptru	equ	0xFF8
 13842                           tblptrh	equ	0xFF7
 13843                           tblptrl	equ	0xFF6
 13844                           tablat	equ	0xFF5
 13845                           prodh	equ	0xFF4
 13846                           prodl	equ	0xFF3
 13847                           intcon	equ	0xFF2
 13848                           intcon3	equ	0xFF0
 13849                           postinc0	equ	0xFEE
 13850                           fsr0h	equ	0xFEA
 13851                           fsr0l	equ	0xFE9
 13852                           wreg	equ	0xFE8
 13853                           postdec1	equ	0xFE5
 13854                           fsr1h	equ	0xFE2
 13855                           fsr1l	equ	0xFE1
 13856                           indf2	equ	0xFDF
 13857                           postinc2	equ	0xFDE
 13858                           postdec2	equ	0xFDD
 13859                           fsr2h	equ	0xFDA
 13860                           fsr2l	equ	0xFD9
 13861                           status	equ	0xFD8
 13862                           
 13863 ;; *************** function i2___awmod *****************
 13864 ;; Defined at:
 13865 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 13866 ;; Parameters:    Size  Location     Type
 13867 ;;  dividend        2    0[COMRAM] int 
 13868 ;;  divisor         2    2[COMRAM] int 
 13869 ;; Auto vars:     Size  Location     Type
 13870 ;;  __awmod         1    5[COMRAM] unsigned char 
 13871 ;;  __awmod         1    4[COMRAM] unsigned char 
 13872 ;; Return value:  Size  Location     Type
 13873 ;;                  2    0[COMRAM] int 
 13874 ;; Registers used:
 13875 ;;		wreg, status,2, status,0
 13876 ;; Tracked objects:
 13877 ;;		On entry : 0/0
 13878 ;;		On exit  : 0/0
 13879 ;;		Unchanged: 0/0
 13880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13881 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13882 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13884 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13885 ;;Total ram usage:        6 bytes
 13886 ;; Hardware stack levels used:    1
 13887 ;; This function calls:
 13888 ;;		Nothing
 13889 ;; This function is called by:
 13890 ;;		_servoInterruptService
 13891 ;; This function uses a non-reentrant model
 13892 ;;
 13893                           
 13894                           	psect	text55
 13895  00351E                     __ptext55:
 13896                           	opt stack 0
 13897  00351E                     i2___awmod:
 13898                           	opt stack 21
 13899                           
 13900                           ;incstack = 0
 13901  00351E  0E00               	movlw	0
 13902  003520  6E06               	movwf	i2___awmod@sign,c
 13903  003522  AE02               	btfss	i2___awmod@dividend+1,7,c
 13904  003524  D006               	goto	i2l4960
 13905  003526  6C01               	negf	i2___awmod@dividend,c
 13906  003528  1E02               	comf	i2___awmod@dividend+1,f,c
 13907  00352A  B0D8               	btfsc	status,0,c
 13908  00352C  2A02               	incf	i2___awmod@dividend+1,f,c
 13909  00352E  0E01               	movlw	1
 13910  003530  6E06               	movwf	i2___awmod@sign,c
 13911  003532                     i2l4960:
 13912  003532  AE04               	btfss	i2___awmod@divisor+1,7,c
 13913  003534  D004               	goto	i2l4964
 13914  003536  6C03               	negf	i2___awmod@divisor,c
 13915  003538  1E04               	comf	i2___awmod@divisor+1,f,c
 13916  00353A  B0D8               	btfsc	status,0,c
 13917  00353C  2A04               	incf	i2___awmod@divisor+1,f,c
 13918  00353E                     i2l4964:
 13919  00353E  5003               	movf	i2___awmod@divisor,w,c
 13920  003540  1004               	iorwf	i2___awmod@divisor+1,w,c
 13921  003542  B4D8               	btfsc	status,2,c
 13922  003544  D018               	goto	i2l4980
 13923  003546  0E01               	movlw	1
 13924  003548  6E05               	movwf	i2___awmod@counter,c
 13925  00354A  D004               	goto	i2l4970
 13926  00354C                     i2l4968:
 13927  00354C  90D8               	bcf	status,0,c
 13928  00354E  3603               	rlcf	i2___awmod@divisor,f,c
 13929  003550  3604               	rlcf	i2___awmod@divisor+1,f,c
 13930  003552  2A05               	incf	i2___awmod@counter,f,c
 13931  003554                     i2l4970:
 13932  003554  AE04               	btfss	i2___awmod@divisor+1,7,c
 13933  003556  D7FA               	goto	i2l4968
 13934  003558                     i2l4972:
 13935  003558  5003               	movf	i2___awmod@divisor,w,c
 13936  00355A  5C01               	subwf	i2___awmod@dividend,w,c
 13937  00355C  5004               	movf	i2___awmod@divisor+1,w,c
 13938  00355E  5802               	subwfb	i2___awmod@dividend+1,w,c
 13939  003560  A0D8               	btfss	status,0,c
 13940  003562  D004               	goto	i2l4976
 13941  003564  5003               	movf	i2___awmod@divisor,w,c
 13942  003566  5E01               	subwf	i2___awmod@dividend,f,c
 13943  003568  5004               	movf	i2___awmod@divisor+1,w,c
 13944  00356A  5A02               	subwfb	i2___awmod@dividend+1,f,c
 13945  00356C                     i2l4976:
 13946  00356C  90D8               	bcf	status,0,c
 13947  00356E  3204               	rrcf	i2___awmod@divisor+1,f,c
 13948  003570  3203               	rrcf	i2___awmod@divisor,f,c
 13949  003572  2E05               	decfsz	i2___awmod@counter,f,c
 13950  003574  D7F1               	goto	i2l4972
 13951  003576                     i2l4980:
 13952  003576  5006               	movf	i2___awmod@sign,w,c
 13953  003578  B4D8               	btfsc	status,2,c
 13954  00357A  D004               	goto	i2l4984
 13955  00357C  6C01               	negf	i2___awmod@dividend,c
 13956  00357E  1E02               	comf	i2___awmod@dividend+1,f,c
 13957  003580  B0D8               	btfsc	status,0,c
 13958  003582  2A02               	incf	i2___awmod@dividend+1,f,c
 13959  003584                     i2l4984:
 13960  003584  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 13961  003588  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 13962  00358C  0012               	return	
 13963  00358E                     __end_ofi2___awmod:
 13964                           	opt stack 0
 13965                           pclatu	equ	0xFFB
 13966                           pclath	equ	0xFFA
 13967                           tblptru	equ	0xFF8
 13968                           tblptrh	equ	0xFF7
 13969                           tblptrl	equ	0xFF6
 13970                           tablat	equ	0xFF5
 13971                           prodh	equ	0xFF4
 13972                           prodl	equ	0xFF3
 13973                           intcon	equ	0xFF2
 13974                           intcon3	equ	0xFF0
 13975                           postinc0	equ	0xFEE
 13976                           fsr0h	equ	0xFEA
 13977                           fsr0l	equ	0xFE9
 13978                           wreg	equ	0xFE8
 13979                           postdec1	equ	0xFE5
 13980                           fsr1h	equ	0xFE2
 13981                           fsr1l	equ	0xFE1
 13982                           indf2	equ	0xFDF
 13983                           postinc2	equ	0xFDE
 13984                           postdec2	equ	0xFDD
 13985                           fsr2h	equ	0xFDA
 13986                           fsr2l	equ	0xFD9
 13987                           status	equ	0xFD8
 13988                           pclatu	equ	0xFFB
 13989                           pclath	equ	0xFFA
 13990                           tblptru	equ	0xFF8
 13991                           tblptrh	equ	0xFF7
 13992                           tblptrl	equ	0xFF6
 13993                           tablat	equ	0xFF5
 13994                           prodh	equ	0xFF4
 13995                           prodl	equ	0xFF3
 13996                           intcon	equ	0xFF2
 13997                           intcon3	equ	0xFF0
 13998                           postinc0	equ	0xFEE
 13999                           fsr0h	equ	0xFEA
 14000                           fsr0l	equ	0xFE9
 14001                           wreg	equ	0xFE8
 14002                           postdec1	equ	0xFE5
 14003                           fsr1h	equ	0xFE2
 14004                           fsr1l	equ	0xFE1
 14005                           indf2	equ	0xFDF
 14006                           postinc2	equ	0xFDE
 14007                           postdec2	equ	0xFDD
 14008                           fsr2h	equ	0xFDA
 14009                           fsr2l	equ	0xFD9
 14010                           status	equ	0xFD8
 14011                           
 14012                           	psect	rparam
 14013  0000                     pclatu	equ	0xFFB
 14014                           pclath	equ	0xFFA
 14015                           tblptru	equ	0xFF8
 14016                           tblptrh	equ	0xFF7
 14017                           tblptrl	equ	0xFF6
 14018                           tablat	equ	0xFF5
 14019                           prodh	equ	0xFF4
 14020                           prodl	equ	0xFF3
 14021                           intcon	equ	0xFF2
 14022                           intcon3	equ	0xFF0
 14023                           postinc0	equ	0xFEE
 14024                           fsr0h	equ	0xFEA
 14025                           fsr0l	equ	0xFE9
 14026                           wreg	equ	0xFE8
 14027                           postdec1	equ	0xFE5
 14028                           fsr1h	equ	0xFE2
 14029                           fsr1l	equ	0xFE1
 14030                           indf2	equ	0xFDF
 14031                           postinc2	equ	0xFDE
 14032                           postdec2	equ	0xFDD
 14033                           fsr2h	equ	0xFDA
 14034                           fsr2l	equ	0xFD9
 14035                           status	equ	0xFD8
 14036                           
 14037                           	psect	temp
 14038  000059                     btemp:
 14039                           	opt stack 0
 14040  000059                     	ds	1
 14041  0000                     int$flags	set	btemp
 14042                           pclatu	equ	0xFFB
 14043                           pclath	equ	0xFFA
 14044                           tblptru	equ	0xFF8
 14045                           tblptrh	equ	0xFF7
 14046                           tblptrl	equ	0xFF6
 14047                           tablat	equ	0xFF5
 14048                           prodh	equ	0xFF4
 14049                           prodl	equ	0xFF3
 14050                           intcon	equ	0xFF2
 14051                           intcon3	equ	0xFF0
 14052                           postinc0	equ	0xFEE
 14053                           fsr0h	equ	0xFEA
 14054                           fsr0l	equ	0xFE9
 14055                           wreg	equ	0xFE8
 14056                           postdec1	equ	0xFE5
 14057                           fsr1h	equ	0xFE2
 14058                           fsr1l	equ	0xFE1
 14059                           indf2	equ	0xFDF
 14060                           postinc2	equ	0xFDE
 14061                           postdec2	equ	0xFDD
 14062                           fsr2h	equ	0xFDA
 14063                           fsr2l	equ	0xFD9
 14064                           status	equ	0xFD8


Data Sizes:
    Strings     307
    Constant    174
    Data        61
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     51      88
    BANK0           128    121     121
    BANK1           256     56     125
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_18(CODE[17]), STR_17(CODE[18]), STR_16(CODE[17]), STR_15(CODE[18]), 
		 -> STR_14(CODE[17]), STR_13(CODE[19]), STR_12(CODE[17]), STR_11(CODE[18]), 
		 -> STR_10(CODE[17]), STR_9(CODE[18]), STR_8(CODE[17]), STR_7(CODE[18]), 
		 -> STR_6(CODE[8]), STR_5(CODE[15]), STR_4(CODE[14]), STR_3(CODE[17]), 
		 -> STR_2(CODE[17]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), conveyorServo(BANK1[4]), padServo(COMRAM[4]), 

    initServo@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), conveyorServo(BANK1[4]), padServo(COMRAM[4]), 

    servos	PTR int [4] size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), conveyorServo(BANK1[4]), padServo(COMRAM[4]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 4
		 -> AA_float(BANK1[4]), cylinderDir(BANK1[4]), redirectingServo(BANK1[4]), conveyorServo(BANK1[4]), 
		 -> cylinderMotor(BANK1[4]), padServo(COMRAM[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 4
		 -> padPin2(BANK1[4]), padPin1(BANK1[4]), cylinderDir(BANK1[4]), 


Critical Paths under _main in COMRAM

    _printf->___lldiv
    _printf->___lltoft
    _scale->___wmul
    _lcdNewline->_lcdInst
    _fround->___wmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___lltoft
    ___ftge->___awtoft
    _lcdClear->_lcdInst
    _lcdHome->_lcdInst
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _angleToPulse->___altoft
    _angleToPulse->___awtoft
    ___fttol->___altoft
    ___fttol->___awtoft
    ___ftmul->___altoft
    ___ftmul->___awtoft
    ___ftmul->___wmul
    ___ftdiv->___altoft
    ___ftdiv->___awtoft
    ___ftadd->___altoft
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    ___altoft->___ftpack
    ___almod->___aldiv

Critical Paths under _service in COMRAM

    _service->_servoInterruptService
    _servoInterruptService->i2_digitalWrite
    i2_startTimer->i2___awmod
    i2_digitalWrite->i2___awmod

Critical Paths under _main in BANK0

    _main->_showInterface
    _main->_sortBattery
    _sortBattery->_printf
    _showInterface->_runMenu
    _runTime->_printf
    _runStats->_printf
    _runSelect->_printf
    _runMenu->_printf
    _mainMenu->_printf
    _dateTime->_printf
    _printf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftsub->___ftadd
    _debug->_initServo
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftdiv->___altoft
    ___ftadd->_fround
    ___almod->___aldiv

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0  616109
                                             31 BANK1     25    25      0
                            ___aldiv
                            ___almod
                              _debug
                        _digitalRead
                       _digitalWrite
                            _initLCD
                          _initServo
                          _initTimer
                           _lcdClear
                            _lcdHome
                           _pinSetup
                             _printf
                         _readKeypad
                      _showInterface
                        _sortBattery
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         33    33      0  112776
                                            119 BANK0      2     2      0
                                              0 BANK1     31    31      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                         _analogRead
                        _digitalRead
                       _digitalWrite
                           _lcdClear
                             _printf
                         _readKeypad
                           _setAngle
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     5      4    1748
                                             38 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          4     2      2     386
                                             38 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     185
                                             38 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        1     1      0  384939
                                            120 BANK0      1     1      0
                           _dateTime
                           _mainMenu
                         _readKeypad
                            _runMenu
                          _runSelect
                           _runStats
                            _runTime
 ---------------------------------------------------------------------------------
 (2) _runTime                                              0     0      0   64046
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runStats                                             0     0      0   64046
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runSelect                                            0     0      0   64046
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runMenu                                              1     1      0   64077
                                            119 BANK0      1     1      0
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _mainMenu                                             0     0      0   64046
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _dateTime                                             0     0      0   64046
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              47    37     10   63851
                                             73 BANK0     46    36     10
                            ___aldiv (ARG)
                            ___almod (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   13985
                                             36 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     421
                                             42 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             38 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   13706
                                             36 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3428
                                             48 COMRAM     2     2      0
                                              4 BANK0      4     0      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2071
                                             38 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1985
                                             44 COMRAM     4     0      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                             38 COMRAM     9     3      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     827
                                             38 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2763
                                             46 COMRAM     5     1      4
                                              0 BANK0      4     4      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                              0 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1011
                                             38 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5057
                                             58 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     142
                                             38 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1738
                                              0 BANK0      9     3      6
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _lcdClear                                             0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdHome                                              0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             42 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     195
                                             40 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             38 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _debug                                                0     0      0   24564
                          _initServo
                           _pinSetup
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      34
                                             38 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initServo                                           10     6      4   24530
                                            106 BANK0     10     6      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _startTimer                                           8     2      6     847
                                             38 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   22459
                                             96 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   21152
                                             73 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     756
                                             58 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5804
                                             21 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3580
                                              6 BANK0     15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4539
                                             46 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3025
                                             46 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    3173
                                             46 COMRAM     4     0      4
                                              0 BANK0      6     6      0
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2584
                                             38 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            4     2      2     262
                                             38 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     587
                                             46 COMRAM     2     2      0
                                              6 BANK0      8     0      8
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     753
                                             38 COMRAM     8     0      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             19    19      0    1449
                                             19 COMRAM    19    19      0
              _servoInterruptService
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                                4     4      0    1168
                                             15 COMRAM     4     4      0
                          i2___awmod
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) i2_startTimer                                         8     2      6     258
                                              6 COMRAM     8     2      6
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     5      4     458
                                              6 COMRAM     9     5      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     452
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
   ___almod
     ___aldiv (ARG)
   _debug
     _initServo
       _initTimer
       _setAngle
         _angleToPulse
           ___altoft
             ___ftpack
             _analogRead (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___fttol
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                       _analogRead (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _analogRead (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _analogRead (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       _startTimer
     _pinSetup
     _readKeypad
   _digitalRead
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _initTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _lcdHome
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___aldiv (ARG)
     ___almod (ARG)
       ___aldiv (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___awtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _readKeypad
   _showInterface
     _dateTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _mainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _readKeypad
     _runMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
       ___awtoft (ARG)
         ___ftpack
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
       ___almod (ARG)
         ___aldiv (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _startTimer

 _service (ROOT)
   _servoInterruptService
     i2___awmod
     i2_digitalWrite
       i2___awmod (ARG)
     i2_startTimer
       i2___awmod (ARG)
   i2_startTimer
     i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     38      7D       7       48.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     79      79       5       94.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     33      58       1       69.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14E      34        0.0%
DATA                 0      0     14E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Thu Mar 30 23:05:23 2017

                  ___altoft@exp 0084                               _n 003C               main@cylinderStart 0132  
          main@cylinderBackward 012E                   ___altoft@sign 0085                     _sortBattery 0E38  
                  ___awdiv@sign 0081             ___wmul@multiplicand 0086                     __CFG_BORV$3 000000  
                  __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000  
                  __CFG_CP3$OFF 000000                     __CFG_OSC$HS 000000                _redirectingServo 0161  
                  ___ftadd@exp1 00B9                    ___ftadd@exp2 00B8             main@cylinderForward 012C  
                  ___ftadd@sign 00B7                             l131 38B6                             l142 1A1C  
                           l143 1A24                             l153 1B42                             l137 17AC  
                           l218 3AD2                             l254 3A78                             l174 120E  
                           l327 2BEA                             l352 38C4                             l433 3714  
                           l257 3A84                             l426 37EE                             l435 3720  
                           l436 372C                             l737 09C0                 ??_showInterface 0034  
                           l777 0840                             l786 0A2E                    __CFG_CPB$OFF 000000  
                           _PEN 007E2A                    __CFG_CPD$OFF 000000                             _SEN 007E28  
                           _n_C 0042                    ___awmod@sign 002C                             wreg 000FE8  
                  __CFG_LVP$OFF 000000                    ___ftdiv@cntr 008F                    ___ftdiv@sign 0094  
                  __CFG_WDT$OFF 000000                            l1100 1E70                            l1102 1E98  
                          l1111 1F6E                            l1120 1F98                            l1041 27F4  
                          l1131 2564                            l1220 349C                            l1230 338A  
                          l1073 3246                            l1145 243C                            l1170 3AB4  
                          l1138 2396                            l1139 23C2                            l1096 1E36  
                          l6110 23F4                            l6014 1D86                            l6006 1CAE  
                          l6200 30A8                            l6120 2422                            l6130 26FC  
                          l6122 2432                            l6114 2408                            l6034 154C  
                          l6220 344E                            l6052 177A                            l6028 1492  
                          l6206 30EC                            l6222 345A                            l6150 275C  
                          l6046 16C0                            l6038 1572                            l6310 0038  
                          l7030 12B2                            l7006 11DE                            l7120 2C9A  
                          l7112 2C42                            l7104 2C10                            l6232 348E  
                          l6224 345E                            l6240 331E                            l6136 271A  
                          l6080 2352                            l6064 3B1C                            l6312 004E  
                          l7024 1282                            l7016 121C                            l7114 2C50  
                          l6242 332E                            l6170 27BA                            l6074 2322  
                          l6402 031E                            l6322 0088                            l6330 00FE  
                          l6306 0022                            l7018 1244                            l7060 2CF4  
                          l7116 2C56                            l7124 2CAA                            l7108 2C28  
                          l6244 3334                            l6180 27E2                            l6500 073C  
                          l6340 016C                            l6316 0058                            l6270 37B6  
                          l5630 31FE                            l5622 31C8                            l6254 3594  
                          l6182 27EE                            l6174 27CA                            l6158 278C  
                          l6510 07F2                            l6430 046C                            l6350 019E  
                          l6342 0182                            l7072 2D34                            l7128 2CC2  
                          l6264 37AC                            l5720 1F26                            l5800 21CE  
                          l6248 3378                            l6256 35A0                            l6512 0800  
                          l6504 0764                            l6432 0482                            l6352 01A4  
                          l6336 0126                            l7152 1846                            l7074 2D42  
                          l7066 2D0E                            l6282 37CA                            l5634 3214  
                          l5626 31D6                            l5714 1EFE                            l6522 0844  
                          l6442 0512                            l6434 04B2                            l6426 043E  
                          l6418 03CE                            l6362 01F2                            l6346 0192  
                          l7092 2DA6                            l7084 2D7A                            l7076 2D46  
                          l6276 37C2                            l5636 3232                            l5628 31E0  
                          l5716 1F0C                            l5708 1ED0                            l5820 2256  
                          l6196 3068                            l6188 36E8                            l6612 0B72  
                          l6540 09A4                            l6532 08BA                            l6516 080E  
                          l6460 0604                            l6436 04C8                            l6372 0230  
                          l6364 01FE                            l6348 0198                            l7180 1A2C  
                          l5638 323C                            l5670 33C4                            l5734 1FC2  
                          l5726 1F54                            l5718 1F1A                            l5830 2294  
                          l5806 2208                            l5910 34FC                            l5902 34DC  
                          l6630 0C18                            l6622 0BD6                            l6606 0B38  
                          l6518 0822                            l6462 060A                            l6446 0540  
                          l6374 024A                            l6366 0204                            l6358 01CC  
                          l7166 188A                            l7088 2D8A                            l5672 33D2  
                          l5744 2010                            l5728 1F62                            l5760 24C2  
                          l5824 2274                            l6296 3738                            l6712 2DEC  
                          l5904 34E4                            l6616 0BA2                            l6608 0B4A  
                          l6552 09E8                            l6544 09B2                            l6528 0868  
                          l6456 059E                            l6392 02D8                            l6368 021C  
                          l6384 027A                            l7184 1AB6                            l5930 3904  
                          l5754 2488                            l5834 22B2                            l6714 2DF2  
                          l5850 327E                            l5906 34E8                            l5914 3506  
                          l6650 0CAE                            l6642 0C86                            l6634 0C50  
                          l6570 0A78                            l6538 0996                            l6482 06C8  
                          l6474 0650                            l6378 0262                            l6386 02BE  
                          l5692 1E7E                            l5780 2522                            l5940 25D4  
                          l6708 2DC4                            l6660 0D74                            l6636 0C5A  
                          l6628 0C0E                            l6492 0704                            l6900 2890  
                          l7188 1AC6                            l5686 1E44                            l5862 32AA  
                          l5918 3514                            l6654 0CC8                            l6670 0E02  
                          l6590 0AEC                            l6566 0A50                            l6494 071A  
                          l6478 06A0                            l6910 28BE                            l6902 2898  
                          l6742 2FA4                            l7198 1AE4                            l6680 2F00  
                          l5864 32B4                            l5856 3290                            l6648 0CA2  
                          l6592 0AF2                            l6576 0AA0                            l6488 06F6  
                          l6672 0E18                            l6760 2FE0                            l6752 2FC6  
                          l5698 1E8E                            l5970 26A6                            l5962 267A  
                          l5882 32F8                            l5874 32D8                            l5866 32B8  
                          l6658 0CF0                            l6666 0DE8                            l6578 0AA6  
                          l6498 0728                            l6922 28E8                            l6914 28CE  
                          l6754 2FCC                            l6746 2FB2                            l5972 26B0  
                          l6676 2EAA                            l6684 2F28                            l6668 0DFA  
                          l6924 28F4                            l6764 2FEE                            l6748 2FB8  
                          l5958 2666                            l5878 32E4                            l5894 34C2  
                          l6918 28DE                            l6870 2814                            l6782 2B60  
                          l6774 2B08                            l6758 2FDA                            l6766 2FF4  
                          l5976 26CC                            l5968 2696                            l6880 283E  
                          l6872 2818                            l6792 2BB8                            l5898 34CE  
                          l6866 2806                            l6786 2B8C                            l6778 2B34  
                          l6954 0EF8                            l6884 284C                            l6868 280A  
                          l6980 10EE                            l6896 2886                            l6968 0FD6  
                          l6978 10C0                            l6988 1156                            l6998 11AE  
                          _EEIF 007D0C                            STR_1 FFF6                            STR_2 FFC0  
                          STR_3 FFAF                            STR_4 FFE0                            STR_5 FFD1  
                          STR_6 FFEE                            STR_7 FEF0                            STR_8 FF9E  
                          STR_9 FEDE                            _LATA 000F89                            _LATB 000F8A  
                          _LATC 000F8B                            _LATD 000F8C                            _LATE 000F8D  
                  printf@tmpval 00E3                            u6111 2332                            _PEIE 007F96  
                          u6091 2302                            u7204 2B7C                            u7124 2F8A  
                          _RCEN 007E2B                            u5461 1DE4                            u7205 2B78  
                          u7125 2F84                            u6510 0364                            u7214 2BA8  
                          u5471 1E02                            u7215 2BA4                            u5721 21AA  
                          u6515 0358                            u5741 21E4                            u5671 2464  
                          u5911 25B0                            u7184 2B24                            u7185 2B20  
                          u5930 25FA                            u6730 0838                            u7194 2B50  
                          u5691 249E                            u7195 2B4C                            u5935 25F0  
                          u7650 19FC                            u7660 19FE                            u7807 12E0  
                          u7817 3AD6                            u7827 37FA                            u7747 1934  
                          u7837 382E                            u7757 0E74                            u7847 3AEA  
                          u7767 0F2A                            u7857 3AFC                            u7777 1052  
                          u7867 3678                            u7787 126A                            u7877 3686  
                          u7797 12A2                            u7887 36AC                            u7897 36BA  
                          _RSEN 007E29                            _n_AA 0040                            _n_9V 003E  
                          _main 17A0                            _curr 003A                    ___ftpack@arg 0027  
                          _keys FEB3                    ___ftpack@exp 002A                            _time 0034  
                          fsr0h 000FEA                            fsr1h 000FE2                            fsr2h 000FDA  
                          fsr0l 000FE9                            indf2 000FDF                            fsr1l 000FE1  
                          fsr2l 000FD9                            btemp 0059                            prodh 000FF4  
                          prodl 000FF3                            start 000E                   __CFG_IESO$OFF 000000  
                 __CFG_MCLRE$ON 000000                    ___ftmul@cntr 00A2                    ___param_bank 000000  
                  ___ftmul@sign 00A3                    ___fttol@exp1 00C8                    ___fttol@lval 00C4  
          __end_ofi2_startTimer 37AA            __end_of_angleToPulse 2194                 __end_of___aldiv 2DB8  
               __end_of___almod 2CD4                           ?_main 0001                           _ACKEN 007E2C  
                         _ACKDT 007E2D                 __end_of___awdiv 3302                           _EEADR 000FA9  
               __end_of___ftadd 2036                           STR_10 FF6B                           STR_11 FF02  
                         STR_12 FF5A                           STR_13 FECB                           STR_14 FF7C  
                         STR_15 FF14                           STR_16 FF49                           STR_17 FF26  
                         STR_18 FF8D                           STR_19 FF38                 __end_of___awmod 351E  
               __end_of___ftdiv 259A         ??_servoInterruptService 0010                 __end_of___ftneg 3AC2  
               __end_of___lldiv 34AE                 __end_of___ftmul 22F2                           _T0CON 000FD5  
               ___awdiv@divisor 002F                           _T1CON 000FCD                 __end_of___llmod 339C  
               __end_of___ftsub 3712                 __end_of___fttol 26DE                           _T3CON 000FB1  
                         i2l190 2ACA                           i2l191 2A9A                           i2l192 2AAA  
                         i2l433 3760                           i2l435 376C                           i2l436 3778  
               ___awdiv@counter 0080                           _TMR0H 000FD7                           _TMR1H 000FCF  
                         _TMR0L 000FD6                           _TMR3H 000FB3                           _TMR1L 000FCE  
                         _TMR3L 000FB2                           _PORTA 000F80                           _PORTB 000F81  
                         _PORTC 000F82                           _PORTD 000F83                           _TRISA 000F92  
                         _TRISB 000F93                           _TRISC 000F94                           _TRISD 000F95  
                         _TRISE 000F96                   __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000  
                 __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000  
               __end_of_lcdHome 3B4C                    ___lltoft@exp 0033                   _conveyorServo 014D  
               __end_of_lcdInst 3B06                  __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000  
                __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000  
                 __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000  
               __end_of_initLCD 383A                  __CFG_EBTRB$OFF 000000                           _debug 387A  
                 ___awtoft@sign 0032                           _angle 0141                 __end_of_dpowers FE45  
                         _count 0179                           _scale 1336                 __end_of_isdigit 3B24  
                 ___ftpack@sign 002B                           _pulse 0165                           _putch 3AC2  
                         pclath 000FFA                           tablat 000FF5                 __end_of_service 2B06  
               __end_of_runMenu 395A                 __end_of_runTime 39E0                           status 000FD8  
            __size_ofi2___awmod 0070                  __CFG_PBADEN$ON 000000            __end_of_digitalWrite 3028  
               __initialization 35FA                    __end_of_main 1B44                    __end_of_keys FEC4  
                        ??_main 011F                   ___fttol@sign1 00C3                   __activetblptr 000002  
          __size_of_digitalRead 00EA            __size_of__tdiv_to_l_ 015C                    _stoppingTime 0053  
               i2digitalWrite@p 000E                          ?_debug 0001                          _ADCON0 000FC2  
                        _ADCON1 000FC1                          _ADCON2 000FC0                __end_of___altoft 342C  
              ___llmod@dividend 0080                          ?_scale 00A4                          _ADRESH 000FC4  
                        _EEADRH 000FAA                          _ADRESL 000FC3                          _EEDATA 000FA8  
                        _EECON1 000FA6                          _EECON2 000FA7                ___awdiv@dividend 002D  
              __end_of___awtoft 3928                          ?_putch 0001                __end_of___ftpack 3266  
              __end_of___lltoft 35FA                          _INT0IE 007F94                          _INT0IF 007F91  
                        _INT1IE 007F83                          _INT1IF 007F80                    sortBattery@V 0116  
                  sortBattery@i 0119                          i2l5200 2A06                          i2l4920 315C  
                        i2l4912 3142                          i2l4930 317E                          i2l4914 3148  
                        i2l4924 316A                          i2l4908 3134                          i2l4932 3184  
                        i2l4926 3170                          i2l4918 3156                          i2l4960 3532  
                        i2l4970 3554                          i2l4946 3784                          i2l4972 3558  
                        i2l4980 3576                          i2l4964 353E                          i2l4984 3584  
                        i2l4976 356C                          i2l4968 354C                          _TMR0IE 007F95  
                        _TMR0IF 007F92                          _TMR1IE 007CE8                          _TMR1IF 007CF0  
                        _TMR3IE 007D01                          _SSPADD 000FC8                          _TRISC3 007CA3  
                        _TRISC4 007CA4                          _SSPBUF 000FC9                __end_of_dateTime 3A78  
              __end_of_lcdClear 3B44               _angleToPulse$1353 00D9                  __CFG_XINST$OFF 000000  
              __end_of__powers_ FE93                          ___ftge 3028                __end_of_mainMenu 3A52  
                     ??___aldiv 002F                       ??___almod 002F                          ___wmul 395A  
                     ??___awdiv 0031                       ??___ftadd 00B4                  __CFG_STVREN$ON 000000  
                     ??___awmod 002B                       ??___ftdiv 008C                       ??___ftneg 002A  
                     ??___lldiv 002F                       ??___ftmul 009B                       ??___llmod 0034  
                     ??___ftsub 0034                       ??___fttol 00BE                          _fround 1B44  
                        clear_0 3640                          clear_1 364C                ___awdiv@quotient 0082  
                        _period 0145                 ___awmod@divisor 0029                       ??_lcdHome 002B  
               ___awmod@counter 002B                          _servos 016D                       ??_lcdInst 0029  
                        _printf 0012                __end_of_pinSetup 387A                __end_of_setAngle 2F60  
             analogRead@channel 0027           ___ftmul@f3_as_product 009F                       ??_initLCD 002B  
                  __pdataCOMRAM 0049                       ??_isdigit 0027               __end_ofi2___awmod 358E  
                 setAngle@angle 00E2                    __mediumconst FE1C                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                   setAngle@motor 00E0  
                     ??_service 0014                       ??_runMenu 0034                __end_of_runStats 3A06  
                     ??_runTime 0034                  i2___awmod@sign 0006                      __accesstop 0080  
       __end_of__initialization 3652                      ___altoft@c 002F                      ___ftadd@f1 00AE  
                    ___ftadd@f2 00B1                      ___ftge@ff1 0080                      ___ftge@ff2 0083  
                 ___rparam_used 000001                      ___ftdiv@f1 0086                      ___ftdiv@f2 0089  
                    ___ftdiv@f3 0090                      ___ftneg@f1 0027                      ___awtoft@c 002F  
         __size_ofi2_startTimer 004C                      ___ftmul@f1 0095                      ___ftmul@f2 0098  
                    ___ftsub@f1 00BA                      ___ftsub@f2 00BD                      ___fttol@f1 00BA  
          __end_of_happynewyear FECB                  __pcstackCOMRAM 0001           __size_of_angleToPulse 015E  
                  __pidataBANK1 398C                   __end_of_debug 38B8                      ___lltoft@c 002F  
                 _cylinderMotor 0155                   __end_of_scale 17A0                    ?_sortBattery 0001  
                 __end_of_putch 3AE4              __size_of_lcdNibble 0066                      __div_to_l_ 26DE  
                       ??_debug 0033                 __div_to_l_@exp1 0032                 __div_to_l_@cntr 0031  
                       ??_scale 0033                 __div_to_l_@quot 002D                         ??_putch 002B  
                  i2_startTimer 375E                      __pbssBANK1 0165                    _angleToPulse 2036  
         __size_of_digitalWrite 00C8              __size_of_initTimer 004A              __size_of_initServo 00DC  
                    _analogRead 38B8                   __div_to_l_@f1 0027                   __div_to_l_@f2 002A  
                       ?___ftge 0080                         ?___wmul 0084                _sortBattery$1352 0100  
         sortBattery@resolution 010C                       ?___altoft 002F                         ?_fround 00A4  
                    _lcdNewline 3B34                       ?___awtoft 002F                       ?___ftpack 0027  
                       ?_printf 00C9                       ?___lltoft 002F  __size_of_servoInterruptService 0100  
 __end_of_servoInterruptService 2A0A           __end_of_showInterface 290A                       ?_dateTime 0001  
             i2startTimer@timer 0007                       ?_lcdClear 0001              __size_of_runSelect 0026  
              angleToPulse@a000 00DC                angleToPulse@a180 00D5                    _digitalWrite 2F60  
                       _SSPCON1 000FC6                         _SSPCON2 000FC5                         _SSPSTAT 000FC7  
                     ?_mainMenu 0001         __size_ofi2_digitalWrite 00C8                         _V_LIM_C 013E  
           main@lastBatteryTime 0130                       ?_pinSetup 0001                       ?_setAngle 00E0  
             __end_of_lcdNibble 36C6               __end_of__npowers_ FE6C                         __Hparam 0000  
                    _scale$1356 00A7                         __Lparam 0000                         ___aldiv 2CD4  
                       ___almod 2BF0                 __size_of___ftge 00C8                         ___awdiv 3266  
                       ___ftadd 1DCE                         ___awmod 34AE                      _readKeypad 3A78  
                       ___ftdiv 244E                         ___ftneg 3A9E                         ___lldiv 342C  
               __size_of___wmul 0032                         ___ftmul 2194                         ___llmod 3302  
                       ___ftsub 36C6                         ___fttol 259A                       ?_runStats 0001  
                       _n_OTHER 0044                      ??___altoft 0080                         __pcinit 35FA  
                    ??___awtoft 0032                      ??___ftpack 002C                 __size_of_fround 028A  
                       __ramtop 1000                         _lcdHome 3B44                         _lcdInst 3AE4  
                    ??___lltoft 0080                         __ptext0 17A0                         __ptext1 0E38  
                       __ptext2 2F60                         __ptext3 2B06                         __ptext4 38B8  
                       __ptext5 2806                         __ptext6 39BA                         __ptext7 39E0  
                       __ptext8 3A06                         __ptext9 3928                 __size_of_printf 0E26  
                       _padPin1 0159                         _padPin2 015D                         _padPin3 0175  
                 startTimer@val 0029                         _initLCD 37F4               __end_of_hexpowers FEB3  
                   ?__div_to_l_ 0027                         _lastKey 0048               __end_of_initTimer 37F4  
             __end_of_initServo 2E94                         _dpowers FE1D                         _isdigit 3B06  
              ___awmod@dividend 0027                      ??_dateTime 0034                ___aldiv@dividend 0027  
                    ??_lcdClear 002B                         _service 0008                         _runMenu 3928  
                       _runTime 39BA                  __pintcode_body 2A0A            end_of_initialization 3652  
                    ??_mainMenu 0034                   __Lmediumconst FE1C                         int_func 2A0A  
                digitalRead@pin 0027                     ?_analogRead 0027                      ??_pinSetup 0027  
                    ??_setAngle 00E4                 ___lldiv@divisor 002B                 ___lldiv@counter 0033  
                setAngle@period 00E6               __end_of_runSelect 3A2C                         printf@c 00F6  
                       printf@f 00C9                ___aldiv@quotient 0082                         postdec1 000FE5  
                       postdec2 000FDD                 _batteryDetected 0038                         postinc0 000FEE  
                       postinc2 000FDE                      ??_runStats 0034                  __tdiv_to_l_@f1 0027  
                __tdiv_to_l_@f2 002A                   ??_digitalRead 0029                     ?_lcdNewline 0001  
                 ??__tdiv_to_l_ 002D                       _PORTBbits 000F81            __size_of_sortBattery 04FE  
              showInterface@key 00F8             _redirectAngle_OTHER 0051                    _happynewyear FEC4  
            angleToPulse@offset 00D1              sortBattery@V_float 0102                       i2___awmod 351E  
                    _startTimer 3712                     ___ftdiv@exp 0093                     printf@width 00F0  
           __size_of__div_to_l_ 0128                     ___ftmul@exp 009E                     ?_readKeypad 0001  
                __end_of___ftge 30F0                  __end_of___wmul 398C                   __pidataCOMRAM 3B24  
                __end_of_fround 1DCE                  __end_of_printf 0E38             __size_of_analogRead 0038  
           start_initialization 35FA             __end_of_digitalRead 2BF0             __end_of__tdiv_to_l_ 244E  
                initServo@angle 00EC                  initTimer@timer 0027                  initServo@motor 00EA  
                    ?i2___awmod 0001                  i2_digitalWrite 30F0             __size_of_lcdNewline 0008  
               ___llmod@divisor 0084                 ___llmod@counter 0088                      initServo@i 00F2  
                      ??___ftge 0086                        ??___wmul 0031                     __pdataBANK1 0138  
              __CFG_LPT1OSC$OFF 000000                        ??_fround 0033                        ??_printf 00D3  
             __size_of___altoft 0090                      fround@prec 00AD               __size_of___awtoft 0038  
             __size_of___ftpack 00AE               __size_of___lltoft 006C                     __pbssCOMRAM 0034  
                 __pcstackBANK0 0080                   __pcstackBANK1 0100          __end_ofi2_digitalWrite 31B8  
        sortBattery@targetAngle 0114               __size_of_dateTime 0026                     ?_startTimer 0027  
             __size_of_lcdClear 0008             __size_of_readKeypad 0026               __size_of_mainMenu 0026  
             i2digitalWrite@pin 0007               i2digitalWrite@val 0009               __CFG_CCP2MX$PORTC 000000  
             __size_of_pinSetup 0040               __size_of_setAngle 00CC                       __pintcode 0008  
                 __pmediumconst FE1C                       _lcdNibble 3660                        ?___aldiv 0027  
                      ?___almod 0086                        ?___awdiv 002D                        ?___ftadd 00AE  
                      ?___awmod 0027                        ?___ftdiv 0086                        ?___ftneg 0027  
                      ?___lldiv 0027                        ?___ftmul 0095                        ?___llmod 0080  
                      ?___ftsub 00BA                       __npowers_ FE45                        ?___fttol 00BA  
                   _digitalRead 2B06                ___almod@dividend 0086                        ?_lcdHome 0001  
                      ?_lcdInst 0001                     __tdiv_to_l_ 22F2               __size_of_runStats 0026  
                  ??__div_to_l_ 002D                        ?_initLCD 0001                 startTimer@timer 0027  
                      ?_isdigit 0001                        ?_service 0001                       _hexpowers FE93  
                      ?_runMenu 0001                       _initTimer 37AA                       _initServo 2DB8  
                      ?_runTime 0001                 ?i2_digitalWrite 0007           _servoInterruptService 290A  
                __size_of_debug 003E                     ??i2___awmod 0005                  __size_of_scale 046A  
                __size_of_putch 0022                        _AA_float 0149                 ___aldiv@divisor 002B  
               ___aldiv@counter 0080                  sortBattery@Vcc 0109                  ___wmul@product 0031  
                      _LATDbits 000F8C                    ??_analogRead 002B              __end_of__div_to_l_ 2806  
                      i2u466_44 311A                        i2u466_45 3114          __size_of_showInterface 0104  
              __CFG_WDTPS$32768 000000                      ?_lcdNibble 0001                  _padAngle_CLOSE 0049  
                     _terminate 0046                   digitalWrite@p 002E                      service@key 0026  
                  ??_lcdNewline 002B             __size_of_startTimer 004C                       _runSelect 3A06  
             angleToPulse@angle 00C9                 main@cylinderDur 0134               ___wmul@multiplier 0084  
                 lcdNibble@data 0028                      printf@flag 00F2                   lcdNibble@temp 0027  
                    printf@fval 00E9                      printf@prec 00F4              __end_of_analogRead 38F0  
                      _V_LIM_AA 013B                        _V_LIM_9V 0138                      runMenu@key 00F7  
                    ?_initTimer 0027                      ?_initServo 00EA               sortBattery@signal 0107  
      sortBattery@pos_v_counter 0105                       copy_data0 360E                       copy_data1 362E  
            i2___awmod@dividend 0001              __end_of_lcdNewline 3B3C                   readKeypad@key 0027  
                      __Hrparam 0000                        __Lrparam 0000              __CFG_BOREN$SBORDIS 000000  
                  ??_readKeypad 0027                   ??_sortBattery 00F7                __size_of___aldiv 00E4  
              __size_of___almod 00E4                __size_of___awdiv 009C                __size_of___ftadd 0268  
              __size_of___awmod 0070                __size_of___ftdiv 014C                __size_of___ftneg 0024  
              __size_of___lldiv 0082                        ___altoft 339C                __size_of___ftmul 015E  
              __size_of___llmod 009A                __size_of___ftsub 004C                __size_of___fttol 0144  
                    ?_runSelect 0001                        ___awtoft 38F0                        ___ftpack 31B8  
                   _fround$1354 00AA                     _fround$1355 00A7                     _cylinderDir 0151  
                      ___lltoft 358E                     _isdigit$980 0028                __size_of_lcdHome 0008  
              __size_of_lcdInst 0022                       setAngle@i 00E8                __size_of_initLCD 0046  
                      _dateTime 3A52                __size_of_isdigit 001E          ?_servoInterruptService 0001  
                 _showInterface 2806                        _lcdClear 3B3C                        __ptext10 3A2C  
                      __ptext11 3A52                        __ptext20 3266                        __ptext12 0012  
                      __ptext21 22F2                        __ptext13 1336                        __ptext30 3B44  
                      __ptext22 26DE                        __ptext14 3AC2                        __ptext31 37F4  
                      __ptext23 358E                        __ptext15 3B34                        __ptext40 2036  
                      __ptext32 3AE4                        __ptext24 3302                        __ptext16 3B06  
                      __ptext41 259A                        __ptext33 3660                        __ptext25 342C  
                      __ptext17 1B44                        __ptext50 2CD4                        __ptext42 2194  
                      __ptext34 387A                        __ptext26 36C6                        __ptext18 395A  
                      __ptext43 244E                        __ptext35 3A78                        __ptext27 3A9E  
                      __ptext19 34AE                        __ptext52 290A                        __ptext44 1DCE  
                      __ptext36 383A                        __ptext28 3028                        __ptext53 375E  
                      __ptext45 38F0                        __ptext37 2DB8                        __ptext29 3B3C  
                      __ptext54 30F0                        __ptext46 339C                        __ptext38 3712  
                      __ptext55 351E                        __ptext47 31B8                        __ptext39 2E94  
                      __ptext48 37AA                        __ptext49 2BF0                        __powers_ FE6C  
              __size_of_service 2AFE                __size_of_runMenu 0032                 i2startTimer@val 0009  
              __size_of_runTime 0026                 ___almod@divisor 008A                   ?i2_startTimer 0007  
                      _mainMenu 3A2C                        _padServo 0055                 ___almod@counter 002F  
            __end_of_readKeypad 3A9E                   ?_angleToPulse 00C9                   __size_of_main 03A4  
                      _pinSetup 383A                        _setAngle 2E94                        _prevTime 017B  
              sortBattery@V_221 011C                     ??_lcdNibble 0027                   _padAngle_OPEN 0143  
                      int$flags 0059                sortBattery@i_223 0112                        _runStats 39E0  
              sortBattery@V_max 010F                       printf@idx 00DC                       printf@len 00DF  
                     printf@exp 00E7                       printf@val 00EC                        main@prev 0136  
             i2___awmod@divisor 0003                       putch@data 002B               i2___awmod@counter 0005  
           __end_of_sortBattery 1336                      _INTCONbits 000FF2                  ?_showInterface 0001  
                 ?_digitalWrite 0027                     ??_initTimer 0029                     ??_initServo 00EE  
                      isdigit@c 0029                        scale@scl 00AA                  ??i2_startTimer 000D  
                  ??_startTimer 002D                        intlevel2 0000                __tdiv_to_l_@exp1 0085  
              __tdiv_to_l_@cntr 0084                  ??_angleToPulse 00CD                __tdiv_to_l_@quot 0080  
              ___lldiv@dividend 0027                _redirectAngle_AA 004D                _redirectAngle_9V 0147  
                      printf@ap 00E1                        printf@cp 00DD                     lcdInst@data 002A  
                  ?_digitalRead 0027                     ??_runSelect 0034                    ?__tdiv_to_l_ 0027  
            __end_of_startTimer 375E                     _printf$1357 00D9                ??i2_digitalWrite 000B  
              ___lldiv@quotient 002F                  ??_digitalWrite 002B                    ___aldiv@sign 0081  
               _redirectAngle_C 004F                _padAngle_NEUTRAL 004B                 digitalWrite@pin 0027  
               digitalWrite@val 0029                    ___almod@sign 0030  
