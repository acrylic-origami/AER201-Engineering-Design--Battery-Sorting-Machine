

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Mar 31 16:03:13 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    79                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    80                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    81  0000                     
    82                           ; Version 1.40
    83                           ; Generated 01/12/2016 GMT
    84                           ; 
    85                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC18F4620 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116  0000                     
   117                           	psect	idataCOMRAM
   118  003DF4                     __pidataCOMRAM:
   119                           	opt stack 0
   120                           
   121                           ;initializer for _V_LIM_9V
   122  003DF4  77                 	db	119
   123  003DF5  EE                 	db	238
   124  003DF6  3F                 	db	63
   125                           
   126                           ;initializer for _V_LIM_AA
   127  003DF7  C1                 	db	193
   128  003DF8  4A                 	db	74
   129  003DF9  3E                 	db	62
   130                           
   131                           ;initializer for _V_LIM_C
   132  003DFA  A7                 	db	167
   133  003DFB  A9                 	db	169
   134  003DFC  3F                 	db	63
   135                           
   136                           ;initializer for _angle
   137  003DFD  005A               	dw	90
   138                           
   139                           ;initializer for _padAngle_CLOSE
   140  003DFF  001E               	dw	30
   141                           
   142                           ;initializer for _padAngle_OPEN
   143  003E01  00B4               	dw	180
   144                           
   145                           ;initializer for _redirectAngle_9V
   146  003E03  0076               	dw	118
   147                           
   148                           ;initializer for _redirectAngle_C
   149  003E05  00A6               	dw	166
   150                           
   151                           ;initializer for _redirectAngle_OTHER
   152  003E07  0099               	dw	153
   153                           
   154                           ;initializer for _AA_float
   155  003E09  0002               	dw	2
   156  003E0B  0005               	dw	5
   157                           
   158                           	psect	idataBANK1
   159  003D56                     __pidataBANK1:
   160                           	opt stack 0
   161                           
   162                           ;initializer for _padAngle_NEUTRAL
   163  003D56  004C               	dw	76
   164                           
   165                           ;initializer for _redirectAngle_AA
   166  003D58  008A               	dw	138
   167                           
   168                           ;initializer for _stoppingTime
   169  003D5A  2710               	dw	10000
   170                           
   171                           ;initializer for _conveyorServo
   172  003D5C  0002               	dw	2
   173  003D5E  0002               	dw	2
   174                           
   175                           ;initializer for _cylinderDir
   176  003D60  0003               	dw	3
   177  003D62  0001               	dw	1
   178                           
   179                           ;initializer for _cylinderMotor
   180  003D64  0002               	dw	2
   181  003D66  0000               	dw	0
   182                           
   183                           ;initializer for _padPin1
   184  003D68  0002               	dw	2
   185  003D6A  0006               	dw	6
   186                           
   187                           ;initializer for _padPin2
   188  003D6C  0002               	dw	2
   189  003D6E  0007               	dw	7
   190                           
   191                           ;initializer for _padServo
   192  003D70  0002               	dw	2
   193  003D72  0001               	dw	1
   194                           
   195                           ;initializer for _redirectingServo
   196  003D74  0003               	dw	3
   197  003D76  0000               	dw	0
   198                           
   199                           	psect	mediumconst
   200  00FE0E                     __pmediumconst:
   201                           	opt stack 0
   202  00FE0E  00                 	db	0
   203  00FE0F                     _dpowers:
   204                           	opt stack 0
   205  00FE0F  0001               	dw	1
   206  00FE11  0000               	dw	0
   207  00FE13  000A               	dw	10
   208  00FE15  0000               	dw	0
   209  00FE17  0064               	dw	100
   210  00FE19  0000               	dw	0
   211  00FE1B  03E8               	dw	1000
   212  00FE1D  0000               	dw	0
   213  00FE1F  2710               	dw	10000
   214  00FE21  0000               	dw	0
   215  00FE23  86A0               	dw	34464
   216  00FE25  0001               	dw	1
   217  00FE27  4240               	dw	16960
   218  00FE29  000F               	dw	15
   219  00FE2B  9680               	dw	38528
   220  00FE2D  0098               	dw	152
   221  00FE2F  E100               	dw	57600
   222  00FE31  05F5               	dw	1525
   223  00FE33  CA00               	dw	51712
   224  00FE35  3B9A               	dw	15258
   225  00FE37                     __end_of_dpowers:
   226                           	opt stack 0
   227  00FE37                     __npowers_:
   228                           	opt stack 0
   229  00FE37  00                 	db	0
   230  00FE38  80                 	db	128
   231  00FE39  3F                 	db	63
   232  00FE3A  CD                 	db	205
   233  00FE3B  CC                 	db	204
   234  00FE3C  3D                 	db	61
   235  00FE3D  D7                 	db	215
   236  00FE3E  23                 	db	35
   237  00FE3F  3C                 	db	60
   238  00FE40  12                 	db	18
   239  00FE41  83                 	db	131
   240  00FE42  3A                 	db	58
   241  00FE43  B7                 	db	183
   242  00FE44  D1                 	db	209
   243  00FE45  38                 	db	56
   244  00FE46  C6                 	db	198
   245  00FE47  27                 	db	39
   246  00FE48  37                 	db	55
   247  00FE49  38                 	db	56
   248  00FE4A  86                 	db	134
   249  00FE4B  35                 	db	53
   250  00FE4C  C0                 	db	192
   251  00FE4D  D6                 	db	214
   252  00FE4E  33                 	db	51
   253  00FE4F  CC                 	db	204
   254  00FE50  2B                 	db	43
   255  00FE51  32                 	db	50
   256  00FE52  70                 	db	112
   257  00FE53  89                 	db	137
   258  00FE54  30                 	db	48
   259  00FE55  E7                 	db	231
   260  00FE56  DB                 	db	219
   261  00FE57  2E                 	db	46
   262  00FE58  E5                 	db	229
   263  00FE59  3C                 	db	60
   264  00FE5A  1E                 	db	30
   265  00FE5B  42                 	db	66
   266  00FE5C  A2                 	db	162
   267  00FE5D  0D                 	db	13
   268  00FE5E                     __end_of__npowers_:
   269                           	opt stack 0
   270  00FE5E                     __powers_:
   271                           	opt stack 0
   272  00FE5E  00                 	db	0
   273  00FE5F  80                 	db	128
   274  00FE60  3F                 	db	63
   275  00FE61  00                 	db	0
   276  00FE62  20                 	db	32
   277  00FE63  41                 	db	65
   278  00FE64  00                 	db	0
   279  00FE65  C8                 	db	200
   280  00FE66  42                 	db	66
   281  00FE67  00                 	db	0
   282  00FE68  7A                 	db	122
   283  00FE69  44                 	db	68
   284  00FE6A  40                 	db	64
   285  00FE6B  1C                 	db	28
   286  00FE6C  46                 	db	70
   287  00FE6D  50                 	db	80
   288  00FE6E  C3                 	db	195
   289  00FE6F  47                 	db	71
   290  00FE70  24                 	db	36
   291  00FE71  74                 	db	116
   292  00FE72  49                 	db	73
   293  00FE73  97                 	db	151
   294  00FE74  18                 	db	24
   295  00FE75  4B                 	db	75
   296  00FE76  BC                 	db	188
   297  00FE77  BE                 	db	190
   298  00FE78  4C                 	db	76
   299  00FE79  6B                 	db	107
   300  00FE7A  6E                 	db	110
   301  00FE7B  4E                 	db	78
   302  00FE7C  03                 	db	3
   303  00FE7D  15                 	db	21
   304  00FE7E  50                 	db	80
   305  00FE7F  79                 	db	121
   306  00FE80  AD                 	db	173
   307  00FE81  60                 	db	96
   308  00FE82  F3                 	db	243
   309  00FE83  49                 	db	73
   310  00FE84  71                 	db	113
   311  00FE85                     __end_of__powers_:
   312                           	opt stack 0
   313  00FE85                     _hexpowers:
   314                           	opt stack 0
   315  00FE85  0001               	dw	1
   316  00FE87  0000               	dw	0
   317  00FE89  0010               	dw	16
   318  00FE8B  0000               	dw	0
   319  00FE8D  0100               	dw	256
   320  00FE8F  0000               	dw	0
   321  00FE91  1000               	dw	4096
   322  00FE93  0000               	dw	0
   323  00FE95  0000               	dw	0
   324  00FE97  0001               	dw	1
   325  00FE99  0000               	dw	0
   326  00FE9B  0010               	dw	16
   327  00FE9D  0000               	dw	0
   328  00FE9F  0100               	dw	256
   329  00FEA1  0000               	dw	0
   330  00FEA3  1000               	dw	4096
   331  00FEA5                     __end_of_hexpowers:
   332                           	opt stack 0
   333  00FEA5                     _keys:
   334                           	opt stack 0
   335  00FEA5  31                 	db	49
   336  00FEA6  32                 	db	50
   337  00FEA7  33                 	db	51
   338  00FEA8  41                 	db	65
   339  00FEA9  34                 	db	52
   340  00FEAA  35                 	db	53
   341  00FEAB  36                 	db	54
   342  00FEAC  42                 	db	66
   343  00FEAD  37                 	db	55
   344  00FEAE  38                 	db	56
   345  00FEAF  39                 	db	57
   346  00FEB0  43                 	db	67
   347  00FEB1  2A                 	db	42
   348  00FEB2  30                 	db	48
   349  00FEB3  23                 	db	35
   350  00FEB4  44                 	db	68
   351  00FEB5  00                 	db	0
   352  00FEB6                     __end_of_keys:
   353                           	opt stack 0
   354  00FEB6                     _happynewyear:
   355                           	opt stack 0
   356  00FEB6  00                 	db	0
   357  00FEB7  59                 	db	89
   358  00FEB8  03                 	db	3
   359  00FEB9  01                 	db	1
   360  00FEBA  13                 	db	19
   361  00FEBB  04                 	db	4
   362  00FEBC  17                 	db	23
   363  00FEBD                     __end_of_happynewyear:
   364                           	opt stack 0
   365  0000                     _ADCON0	set	4034
   366  0000                     _ADCON1	set	4033
   367  0000                     _ADCON2	set	4032
   368  0000                     _ADRESH	set	4036
   369  0000                     _ADRESL	set	4035
   370  0000                     _EEADR	set	4009
   371  0000                     _EEADRH	set	4010
   372  0000                     _EECON1	set	4006
   373  0000                     _EECON2	set	4007
   374  0000                     _EEDATA	set	4008
   375  0000                     _INTCONbits	set	4082
   376  0000                     _LATA	set	3977
   377  0000                     _LATB	set	3978
   378  0000                     _LATC	set	3979
   379  0000                     _LATD	set	3980
   380  0000                     _LATDbits	set	3980
   381  0000                     _LATE	set	3981
   382  0000                     _PORTA	set	3968
   383  0000                     _PORTB	set	3969
   384  0000                     _PORTBbits	set	3969
   385  0000                     _PORTC	set	3970
   386  0000                     _PORTD	set	3971
   387  0000                     _SSPADD	set	4040
   388  0000                     _SSPBUF	set	4041
   389  0000                     _SSPCON1	set	4038
   390  0000                     _SSPCON2	set	4037
   391  0000                     _SSPSTAT	set	4039
   392  0000                     _T0CON	set	4053
   393  0000                     _T1CON	set	4045
   394  0000                     _T3CON	set	4017
   395  0000                     _TMR0H	set	4055
   396  0000                     _TMR0L	set	4054
   397  0000                     _TMR1H	set	4047
   398  0000                     _TMR1L	set	4046
   399  0000                     _TMR3H	set	4019
   400  0000                     _TMR3L	set	4018
   401  0000                     _TRISA	set	3986
   402  0000                     _TRISB	set	3987
   403  0000                     _TRISC	set	3988
   404  0000                     _TRISD	set	3989
   405  0000                     _TRISE	set	3990
   406  0000                     _ACKDT	set	32301
   407  0000                     _ACKEN	set	32300
   408  0000                     _EEIF	set	32012
   409  0000                     _INT0IE	set	32660
   410  0000                     _INT0IF	set	32657
   411  0000                     _INT1IE	set	32643
   412  0000                     _INT1IF	set	32640
   413  0000                     _PEIE	set	32662
   414  0000                     _PEN	set	32298
   415  0000                     _RCEN	set	32299
   416  0000                     _RSEN	set	32297
   417  0000                     _SEN	set	32296
   418  0000                     _TMR0IE	set	32661
   419  0000                     _TMR0IF	set	32658
   420  0000                     _TMR1IE	set	31976
   421  0000                     _TMR1IF	set	31984
   422  0000                     _TMR3IE	set	32001
   423  0000                     _TRISC3	set	31907
   424  0000                     _TRISC4	set	31908
   425  00FEBD                     STR_17:
   426  00FEBD  25                 	db	37
   427  00FEBE  63                 	db	99	;'c'
   428  00FEBF  29                 	db	41
   429  00FEC0  20                 	db	32
   430  00FEC1  74                 	db	116	;'t'
   431  00FEC2  69                 	db	105	;'i'
   432  00FEC3  6D                 	db	109	;'m'
   433  00FEC4  65                 	db	101	;'e'
   434  00FEC5  20                 	db	32
   435  00FEC6  20                 	db	32
   436  00FEC7  3C                 	db	60	;'<'
   437  00FEC8  41                 	db	65	;'A'
   438  00FEC9  20                 	db	32
   439  00FECA  20                 	db	32
   440  00FECB  20                 	db	32
   441  00FECC  20                 	db	32
   442  00FECD  20                 	db	32
   443  00FECE  0A                 	db	10
   444  00FECF  00                 	db	0
   445  00FED0                     STR_19:
   446  00FED0  74                 	db	116	;'t'
   447  00FED1  69                 	db	105	;'i'
   448  00FED2  6D                 	db	109	;'m'
   449  00FED3  65                 	db	101	;'e'
   450  00FED4  3A                 	db	58	;':'
   451  00FED5  20                 	db	32
   452  00FED6  25                 	db	37
   453  00FED7  2E                 	db	46
   454  00FED8  31                 	db	49	;'1'
   455  00FED9  66                 	db	102	;'f'
   456  00FEDA  20                 	db	32
   457  00FEDB  73                 	db	115	;'s'
   458  00FEDC  65                 	db	101	;'e'
   459  00FEDD  63                 	db	99	;'c'
   460  00FEDE  20                 	db	32
   461  00FEDF  20                 	db	32
   462  00FEE0  20                 	db	32
   463  00FEE1  0A                 	db	10
   464  00FEE2  00                 	db	0
   465  00FEE3                     STR_22:
   466  00FEE3  5B                 	db	91	;'['
   467  00FEE4  25                 	db	37
   468  00FEE5  64                 	db	100	;'d'
   469  00FEE6  2C                 	db	44
   470  00FEE7  25                 	db	37
   471  00FEE8  64                 	db	100	;'d'
   472  00FEE9  2C                 	db	44
   473  00FEEA  25                 	db	37
   474  00FEEB  64                 	db	100	;'d'
   475  00FEEC  2C                 	db	44
   476  00FEED  25                 	db	37
   477  00FEEE  64                 	db	100	;'d'
   478  00FEEF  5D                 	db	93	;']'
   479  00FEF0  20                 	db	32
   480  00FEF1  20                 	db	32
   481  00FEF2  20                 	db	32
   482  00FEF3  2A                 	db	42
   483  00FEF4  3E                 	db	62	;'>'
   484  00FEF5  00                 	db	0
   485  00FEF6                     STR_13:
   486  00FEF6  73                 	db	115	;'s'
   487  00FEF7  74                 	db	116	;'t'
   488  00FEF8  61                 	db	97	;'a'
   489  00FEF9  72                 	db	114	;'r'
   490  00FEFA  74                 	db	116	;'t'
   491  00FEFB  20                 	db	32
   492  00FEFC  20                 	db	32
   493  00FEFD  20                 	db	32
   494  00FEFE  3C                 	db	60	;'<'
   495  00FEFF  42                 	db	66	;'B'
   496  00FF00  20                 	db	32
   497  00FF01  20                 	db	32
   498  00FF02  20                 	db	32
   499  00FF03  20                 	db	32
   500  00FF04  20                 	db	32
   501  00FF05  20                 	db	32
   502  00FF06  0A                 	db	10
   503  00FF07  00                 	db	0
   504  00FF08                     STR_11:
   505  00FF08  20                 	db	32
   506  00FF09  20                 	db	32
   507  00FF0A  68                 	db	104	;'h'
   508  00FF0B  68                 	db	104	;'h'
   509  00FF0C  3A                 	db	58	;':'
   510  00FF0D  6D                 	db	109	;'m'
   511  00FF0E  6D                 	db	109	;'m'
   512  00FF0F  3A                 	db	58	;':'
   513  00FF10  73                 	db	115	;'s'
   514  00FF11  73                 	db	115	;'s'
   515  00FF12  20                 	db	32
   516  00FF13  20                 	db	32
   517  00FF14  20                 	db	32
   518  00FF15  20                 	db	32
   519  00FF16  20                 	db	32
   520  00FF17  20                 	db	32
   521  00FF18  0A                 	db	10
   522  00FF19  00                 	db	0
   523  00FF1A                     STR_15:
   524  00FF1A  73                 	db	115	;'s'
   525  00FF1B  65                 	db	101	;'e'
   526  00FF1C  6C                 	db	108	;'l'
   527  00FF1D  65                 	db	101	;'e'
   528  00FF1E  63                 	db	99	;'c'
   529  00FF1F  74                 	db	116	;'t'
   530  00FF20  20                 	db	32
   531  00FF21  72                 	db	114	;'r'
   532  00FF22  75                 	db	117	;'u'
   533  00FF23  6E                 	db	110	;'n'
   534  00FF24  3A                 	db	58	;':'
   535  00FF25  20                 	db	32
   536  00FF26  20                 	db	32
   537  00FF27  20                 	db	32
   538  00FF28  20                 	db	32
   539  00FF29  20                 	db	32
   540  00FF2A  0A                 	db	10
   541  00FF2B  00                 	db	0
   542  00FF2C                     STR_21:
   543  00FF2C  5B                 	db	91	;'['
   544  00FF2D  41                 	db	65	;'A'
   545  00FF2E  41                 	db	65	;'A'
   546  00FF2F  2C                 	db	44
   547  00FF30  39                 	db	57	;'9'
   548  00FF31  56                 	db	86	;'V'
   549  00FF32  2C                 	db	44
   550  00FF33  43                 	db	67	;'C'
   551  00FF34  2C                 	db	44
   552  00FF35  6F                 	db	111	;'o'
   553  00FF36  74                 	db	116	;'t'
   554  00FF37  68                 	db	104	;'h'
   555  00FF38  65                 	db	101	;'e'
   556  00FF39  72                 	db	114	;'r'
   557  00FF3A  5D                 	db	93	;']'
   558  00FF3B  20                 	db	32
   559  00FF3C  0A                 	db	10
   560  00FF3D  00                 	db	0
   561  00FF3E                     STR_23:
   562  00FF3E  30                 	db	48	;'0'
   563  00FF3F  31                 	db	49	;'1'
   564  00FF40  32                 	db	50	;'2'
   565  00FF41  33                 	db	51	;'3'
   566  00FF42  34                 	db	52	;'4'
   567  00FF43  35                 	db	53	;'5'
   568  00FF44  36                 	db	54	;'6'
   569  00FF45  37                 	db	55	;'7'
   570  00FF46  38                 	db	56	;'8'
   571  00FF47  39                 	db	57	;'9'
   572  00FF48  61                 	db	97	;'a'
   573  00FF49  62                 	db	98	;'b'
   574  00FF4A  63                 	db	99	;'c'
   575  00FF4B  64                 	db	100	;'d'
   576  00FF4C  65                 	db	101	;'e'
   577  00FF4D  66                 	db	102	;'f'
   578  00FF4E  00                 	db	0
   579  00FF4F                     STR_20:
   580  00FF4F  20                 	db	32
   581  00FF50  20                 	db	32
   582  00FF51  20                 	db	32
   583  00FF52  20                 	db	32
   584  00FF53  20                 	db	32
   585  00FF54  20                 	db	32
   586  00FF55  20                 	db	32
   587  00FF56  20                 	db	32
   588  00FF57  20                 	db	32
   589  00FF58  20                 	db	32
   590  00FF59  20                 	db	32
   591  00FF5A  20                 	db	32
   592  00FF5B  20                 	db	32
   593  00FF5C  20                 	db	32
   594  00FF5D  2A                 	db	42
   595  00FF5E  3E                 	db	62	;'>'
   596  00FF5F  00                 	db	0
   597  00FF60                     STR_16:
   598  00FF60  5B                 	db	91	;'['
   599  00FF61  31                 	db	49	;'1'
   600  00FF62  2C                 	db	44
   601  00FF63  32                 	db	50	;'2'
   602  00FF64  2C                 	db	44
   603  00FF65  33                 	db	51	;'3'
   604  00FF66  2C                 	db	44
   605  00FF67  34                 	db	52	;'4'
   606  00FF68  5D                 	db	93	;']'
   607  00FF69  20                 	db	32
   608  00FF6A  20                 	db	32
   609  00FF6B  20                 	db	32
   610  00FF6C  20                 	db	32
   611  00FF6D  20                 	db	32
   612  00FF6E  2A                 	db	42
   613  00FF6F  3E                 	db	62	;'>'
   614  00FF70  00                 	db	0
   615  00FF71                     STR_14:
   616  00FF71  68                 	db	104	;'h'
   617  00FF72  69                 	db	105	;'i'
   618  00FF73  73                 	db	115	;'s'
   619  00FF74  74                 	db	116	;'t'
   620  00FF75  6F                 	db	111	;'o'
   621  00FF76  72                 	db	114	;'r'
   622  00FF77  79                 	db	121	;'y'
   623  00FF78  20                 	db	32
   624  00FF79  3C                 	db	60	;'<'
   625  00FF7A  43                 	db	67	;'C'
   626  00FF7B  20                 	db	32
   627  00FF7C  20                 	db	32
   628  00FF7D  20                 	db	32
   629  00FF7E  20                 	db	32
   630  00FF7F  2A                 	db	42
   631  00FF80  3E                 	db	62	;'>'
   632  00FF81  00                 	db	0
   633  00FF82                     STR_18:
   634  00FF82  20                 	db	32
   635  00FF83  20                 	db	32
   636  00FF84  20                 	db	32
   637  00FF85  73                 	db	115	;'s'
   638  00FF86  74                 	db	116	;'t'
   639  00FF87  61                 	db	97	;'a'
   640  00FF88  74                 	db	116	;'t'
   641  00FF89  73                 	db	115	;'s'
   642  00FF8A  20                 	db	32
   643  00FF8B  3C                 	db	60	;'<'
   644  00FF8C  42                 	db	66	;'B'
   645  00FF8D  20                 	db	32
   646  00FF8E  20                 	db	32
   647  00FF8F  20                 	db	32
   648  00FF90  2A                 	db	42
   649  00FF91  3E                 	db	62	;'>'
   650  00FF92  00                 	db	0
   651  00FF93                     STR_12:
   652  00FF93  20                 	db	32
   653  00FF94  20                 	db	32
   654  00FF95  6D                 	db	109	;'m'
   655  00FF96  6D                 	db	109	;'m'
   656  00FF97  3A                 	db	58	;':'
   657  00FF98  64                 	db	100	;'d'
   658  00FF99  64                 	db	100	;'d'
   659  00FF9A  3A                 	db	58	;':'
   660  00FF9B  79                 	db	121	;'y'
   661  00FF9C  79                 	db	121	;'y'
   662  00FF9D  20                 	db	32
   663  00FF9E  20                 	db	32
   664  00FF9F  20                 	db	32
   665  00FFA0  20                 	db	32
   666  00FFA1  41                 	db	65	;'A'
   667  00FFA2  3E                 	db	62	;'>'
   668  00FFA3  00                 	db	0
   669  00FFA4                     STR_7:
   670  00FFA4  5B                 	db	91	;'['
   671  00FFA5  41                 	db	65	;'A'
   672  00FFA6  41                 	db	65	;'A'
   673  00FFA7  2C                 	db	44
   674  00FFA8  43                 	db	67	;'C'
   675  00FFA9  2C                 	db	44
   676  00FFAA  39                 	db	57	;'9'
   677  00FFAB  56                 	db	86	;'V'
   678  00FFAC  2C                 	db	44
   679  00FFAD  4F                 	db	79	;'O'
   680  00FFAE  54                 	db	84	;'T'
   681  00FFAF  48                 	db	72	;'H'
   682  00FFB0  45                 	db	69	;'E'
   683  00FFB1  52                 	db	82	;'R'
   684  00FFB2  5D                 	db	93	;']'
   685  00FFB3  0A                 	db	10
   686  00FFB4  00                 	db	0
   687  00FFB5                     STR_6:
   688  00FFB5  74                 	db	116	;'t'
   689  00FFB6  69                 	db	105	;'i'
   690  00FFB7  6D                 	db	109	;'m'
   691  00FFB8  65                 	db	101	;'e'
   692  00FFB9  20                 	db	32
   693  00FFBA  25                 	db	37
   694  00FFBB  30                 	db	48	;'0'
   695  00FFBC  32                 	db	50	;'2'
   696  00FFBD  6C                 	db	108	;'l'
   697  00FFBE  64                 	db	100	;'d'
   698  00FFBF  3A                 	db	58	;':'
   699  00FFC0  25                 	db	37
   700  00FFC1  30                 	db	48	;'0'
   701  00FFC2  32                 	db	50	;'2'
   702  00FFC3  6C                 	db	108	;'l'
   703  00FFC4  64                 	db	100	;'d'
   704  00FFC5  00                 	db	0
   705  00FFC6                     STR_9:
   706  00FFC6  4E                 	db	78	;'N'
   707  00FFC7  3A                 	db	58	;':'
   708  00FFC8  20                 	db	32
   709  00FFC9  25                 	db	37
   710  00FFCA  64                 	db	100	;'d'
   711  00FFCB  2C                 	db	44
   712  00FFCC  0A                 	db	10
   713  00FFCD  56                 	db	86	;'V'
   714  00FFCE  3A                 	db	58	;':'
   715  00FFCF  20                 	db	32
   716  00FFD0  25                 	db	37
   717  00FFD1  2E                 	db	46
   718  00FFD2  33                 	db	51	;'3'
   719  00FFD3  66                 	db	102	;'f'
   720  00FFD4  00                 	db	0
   721  00FFD5                     STR_8:
   722  00FFD5  5B                 	db	91	;'['
   723  00FFD6  25                 	db	37
   724  00FFD7  64                 	db	100	;'d'
   725  00FFD8  2C                 	db	44
   726  00FFD9  25                 	db	37
   727  00FFDA  64                 	db	100	;'d'
   728  00FFDB  2C                 	db	44
   729  00FFDC  25                 	db	37
   730  00FFDD  64                 	db	100	;'d'
   731  00FFDE  2C                 	db	44
   732  00FFDF  25                 	db	37
   733  00FFE0  64                 	db	100	;'d'
   734  00FFE1  5D                 	db	93	;']'
   735  00FFE2  00                 	db	0
   736  00FFE3  74                 	db	116	;'t'
   737  00FFE4  31                 	db	49	;'1'
   738  00FFE5  3A                 	db	58	;':'
   739  00FFE6  20                 	db	32
   740  00FFE7  25                 	db	37
   741  00FFE8  78                 	db	120	;'x'
   742  00FFE9  20                 	db	32
   743  00FFEA  00                 	db	0
   744  00FFEB                     STR_5:
   745  00FFEB  72                 	db	114	;'r'
   746  00FFEC  75                 	db	117	;'u'
   747  00FFED  6E                 	db	110	;'n'
   748  00FFEE  6E                 	db	110	;'n'
   749  00FFEF  69                 	db	105	;'i'
   750  00FFF0  6E                 	db	110	;'n'
   751  00FFF1  67                 	db	103	;'g'
   752  00FFF2  00                 	db	0
   753  00FFF3                     STR_2:
   754  00FFF3  6E                 	db	110	;'n'
   755  00FFF4  3A                 	db	58	;':'
   756  00FFF5  20                 	db	32
   757  00FFF6  25                 	db	37
   758  00FFF7  64                 	db	100	;'d'
   759  00FFF8  00                 	db	0
   760  00FFF9                     STR_3:
   761  00FFF9  25                 	db	37
   762  00FFFA  64                 	db	100	;'d'
   763  00FFFB  2C                 	db	44
   764  00FFFC  00                 	db	0
   765  00FFFD                     STR_1:
   766  00FFFD  73                 	db	115	;'s'
   767  00FFFE  00                 	db	0
   768  0000                     
   769                           ; #config settings
   770  00FFFF  00                 	db	0	; dummy byte at the end
   771  0000                     
   772                           	psect	cinit
   773  00373C                     __pcinit:
   774                           	opt stack 0
   775  00373C                     start_initialization:
   776                           	opt stack 0
   777  00373C                     __initialization:
   778                           	opt stack 0
   779                           
   780                           ; Initialize objects allocated to BANK1 (34 bytes)
   781                           ; load TBLPTR registers with __pidataBANK1
   782  00373C  0E56               	movlw	low __pidataBANK1
   783  00373E  6EF6               	movwf	tblptrl,c
   784  003740  0E3D               	movlw	high __pidataBANK1
   785  003742  6EF7               	movwf	tblptrh,c
   786  003744  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   787  003746  6EF8               	movwf	tblptru,c
   788  003748  EE01  F05C         	lfsr	0,__pdataBANK1
   789  00374C  EE10 F022          	lfsr	1,34
   790  003750                     copy_data0:
   791  003750  0009               	tblrd		*+
   792  003752  CFF5 FFEE          	movff	tablat,postinc0
   793  003756  50E5               	movf	postdec1,w,c
   794  003758  50E1               	movf	fsr1l,w,c
   795  00375A  E1FA               	bnz	copy_data0
   796                           
   797                           ; Initialize objects allocated to COMRAM (25 bytes)
   798                           ; load TBLPTR registers with __pidataCOMRAM
   799  00375C  0EF4               	movlw	low __pidataCOMRAM
   800  00375E  6EF6               	movwf	tblptrl,c
   801  003760  0E3D               	movlw	high __pidataCOMRAM
   802  003762  6EF7               	movwf	tblptrh,c
   803  003764  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   804  003766  6EF8               	movwf	tblptru,c
   805  003768  EE00  F03B         	lfsr	0,__pdataCOMRAM
   806  00376C  EE10 F019          	lfsr	1,25
   807  003770                     copy_data1:
   808  003770  0009               	tblrd		*+
   809  003772  CFF5 FFEE          	movff	tablat,postinc0
   810  003776  50E5               	movf	postdec1,w,c
   811  003778  50E1               	movf	fsr1l,w,c
   812  00377A  E1FA               	bnz	copy_data1
   813                           
   814                           ; Clear objects allocated to BANK1 (36 bytes)
   815  00377C  EE01  F038         	lfsr	0,__pbssBANK1
   816  003780  0E24               	movlw	36
   817  003782                     clear_0:
   818  003782  6AEE               	clrf	postinc0,c
   819  003784  06E8               	decf	wreg,f,c
   820  003786  E1FD               	bnz	clear_0
   821                           
   822                           ; Clear objects allocated to COMRAM (9 bytes)
   823  003788  EE00  F054         	lfsr	0,__pbssCOMRAM
   824  00378C  0E09               	movlw	9
   825  00378E                     clear_1:
   826  00378E  6AEE               	clrf	postinc0,c
   827  003790  06E8               	decf	wreg,f,c
   828  003792  E1FD               	bnz	clear_1
   829  003794                     end_of_initialization:
   830                           	opt stack 0
   831  003794                     __end_of__initialization:
   832                           	opt stack 0
   833  003794  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   834  003796  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   835  003798  0E00               	movlw	low (__Lmediumconst shr (0+16))
   836  00379A  6EF8               	movwf	tblptru,c
   837  00379C  0100               	movlb	0
   838  00379E  EF84  F00B         	goto	_main	;jump to C main() function
   839                           tblptru	equ	0xFF8
   840                           tblptrh	equ	0xFF7
   841                           tblptrl	equ	0xFF6
   842                           tablat	equ	0xFF5
   843                           postinc0	equ	0xFEE
   844                           wreg	equ	0xFE8
   845                           postdec1	equ	0xFE5
   846                           fsr1l	equ	0xFE1
   847                           
   848                           	psect	bssCOMRAM
   849  000054                     __pbssCOMRAM:
   850                           	opt stack 0
   851  000054                     _count:
   852                           	opt stack 0
   853  000054                     	ds	2
   854  000056                     _curr:
   855                           	opt stack 0
   856  000056                     	ds	2
   857  000058                     _n:
   858                           	opt stack 0
   859  000058                     	ds	2
   860  00005A                     _prevTime:
   861                           	opt stack 0
   862  00005A                     	ds	2
   863  00005C                     _lastKey:
   864                           	opt stack 0
   865  00005C                     	ds	1
   866                           tblptru	equ	0xFF8
   867                           tblptrh	equ	0xFF7
   868                           tblptrl	equ	0xFF6
   869                           tablat	equ	0xFF5
   870                           postinc0	equ	0xFEE
   871                           wreg	equ	0xFE8
   872                           postdec1	equ	0xFE5
   873                           fsr1l	equ	0xFE1
   874                           
   875                           	psect	dataCOMRAM
   876  00003B                     __pdataCOMRAM:
   877                           	opt stack 0
   878  00003B                     _V_LIM_9V:
   879                           	opt stack 0
   880  00003B                     	ds	3
   881  00003E                     _V_LIM_AA:
   882                           	opt stack 0
   883  00003E                     	ds	3
   884  000041                     _V_LIM_C:
   885                           	opt stack 0
   886  000041                     	ds	3
   887  000044                     _angle:
   888                           	opt stack 0
   889  000044                     	ds	2
   890  000046                     _padAngle_CLOSE:
   891                           	opt stack 0
   892  000046                     	ds	2
   893  000048                     _padAngle_OPEN:
   894                           	opt stack 0
   895  000048                     	ds	2
   896  00004A                     _redirectAngle_9V:
   897                           	opt stack 0
   898  00004A                     	ds	2
   899  00004C                     _redirectAngle_C:
   900                           	opt stack 0
   901  00004C                     	ds	2
   902  00004E                     _redirectAngle_OTHER:
   903                           	opt stack 0
   904  00004E                     	ds	2
   905  000050                     _AA_float:
   906                           	opt stack 0
   907  000050                     	ds	4
   908                           tblptru	equ	0xFF8
   909                           tblptrh	equ	0xFF7
   910                           tblptrl	equ	0xFF6
   911                           tablat	equ	0xFF5
   912                           postinc0	equ	0xFEE
   913                           wreg	equ	0xFE8
   914                           postdec1	equ	0xFE5
   915                           fsr1l	equ	0xFE1
   916                           
   917                           	psect	bssBANK1
   918  000138                     __pbssBANK1:
   919                           	opt stack 0
   920  000138                     _pulse:
   921                           	opt stack 0
   922  000138                     	ds	8
   923  000140                     _servos:
   924                           	opt stack 0
   925  000140                     	ds	8
   926  000148                     _padPin3:
   927                           	opt stack 0
   928  000148                     	ds	4
   929  00014C                     _time:
   930                           	opt stack 0
   931  00014C                     	ds	4
   932  000150                     _batteryDetected:
   933                           	opt stack 0
   934  000150                     	ds	2
   935  000152                     _n_9V:
   936                           	opt stack 0
   937  000152                     	ds	2
   938  000154                     _n_AA:
   939                           	opt stack 0
   940  000154                     	ds	2
   941  000156                     _n_C:
   942                           	opt stack 0
   943  000156                     	ds	2
   944  000158                     _n_OTHER:
   945                           	opt stack 0
   946  000158                     	ds	2
   947  00015A                     _terminate:
   948                           	opt stack 0
   949  00015A                     	ds	2
   950                           tblptru	equ	0xFF8
   951                           tblptrh	equ	0xFF7
   952                           tblptrl	equ	0xFF6
   953                           tablat	equ	0xFF5
   954                           postinc0	equ	0xFEE
   955                           wreg	equ	0xFE8
   956                           postdec1	equ	0xFE5
   957                           fsr1l	equ	0xFE1
   958                           
   959                           	psect	dataBANK1
   960  00015C                     __pdataBANK1:
   961                           	opt stack 0
   962  00015C                     _padAngle_NEUTRAL:
   963                           	opt stack 0
   964  00015C                     	ds	2
   965  00015E                     _redirectAngle_AA:
   966                           	opt stack 0
   967  00015E                     	ds	2
   968  000160                     _stoppingTime:
   969                           	opt stack 0
   970  000160                     	ds	2
   971  000162                     _conveyorServo:
   972                           	opt stack 0
   973  000162                     	ds	4
   974  000166                     _cylinderDir:
   975                           	opt stack 0
   976  000166                     	ds	4
   977  00016A                     _cylinderMotor:
   978                           	opt stack 0
   979  00016A                     	ds	4
   980  00016E                     _padPin1:
   981                           	opt stack 0
   982  00016E                     	ds	4
   983  000172                     _padPin2:
   984                           	opt stack 0
   985  000172                     	ds	4
   986  000176                     _padServo:
   987                           	opt stack 0
   988  000176                     	ds	4
   989  00017A                     _redirectingServo:
   990                           	opt stack 0
   991  00017A                     	ds	4
   992                           tblptru	equ	0xFF8
   993                           tblptrh	equ	0xFF7
   994                           tblptrl	equ	0xFF6
   995                           tablat	equ	0xFF5
   996                           postinc0	equ	0xFEE
   997                           wreg	equ	0xFE8
   998                           postdec1	equ	0xFE5
   999                           fsr1l	equ	0xFE1
  1000                           
  1001                           	psect	cstackBANK1
  1002  000100                     __pcstackBANK1:
  1003                           	opt stack 0
  1004  000100                     _sortBattery$1433:
  1005                           	opt stack 0
  1006  000100                     debug@run:
  1007                           	opt stack 0
  1008                           
  1009                           ; 14 bytes @ 0x0
  1010  000100                     	ds	2
  1011  000102                     sortBattery@V_float:
  1012                           	opt stack 0
  1013                           
  1014                           ; 3 bytes @ 0x2
  1015  000102                     	ds	3
  1016  000105                     sortBattery@pos_v_counter:
  1017                           	opt stack 0
  1018                           
  1019                           ; 2 bytes @ 0x5
  1020  000105                     	ds	2
  1021  000107                     sortBattery@signal:
  1022                           	opt stack 0
  1023                           
  1024                           ; 2 bytes @ 0x7
  1025  000107                     	ds	2
  1026  000109                     sortBattery@Vcc:
  1027                           	opt stack 0
  1028                           
  1029                           ; 3 bytes @ 0x9
  1030  000109                     	ds	3
  1031  00010C                     sortBattery@resolution:
  1032                           	opt stack 0
  1033                           
  1034                           ; 3 bytes @ 0xC
  1035  00010C                     	ds	2
  1036  00010E                     debug@n:
  1037                           	opt stack 0
  1038                           
  1039                           ; 2 bytes @ 0xE
  1040  00010E                     	ds	1
  1041  00010F                     sortBattery@V_max:
  1042                           	opt stack 0
  1043                           
  1044                           ; 3 bytes @ 0xF
  1045  00010F                     	ds	1
  1046  000110                     debug@run_286:
  1047                           	opt stack 0
  1048                           
  1049                           ; 2 bytes @ 0x10
  1050  000110                     	ds	2
  1051  000112                     sortBattery@i_314:
  1052                           	opt stack 0
  1053  000112                     _debug$1432:
  1054                           	opt stack 0
  1055                           
  1056                           ; 2 bytes @ 0x12
  1057  000112                     	ds	2
  1058  000114                     debug@key:
  1059                           	opt stack 0
  1060  000114                     sortBattery@targetAngle:
  1061                           	opt stack 0
  1062                           
  1063                           ; 2 bytes @ 0x14
  1064  000114                     	ds	1
  1065  000115                     debug@i_287:
  1066                           	opt stack 0
  1067                           
  1068                           ; 2 bytes @ 0x15
  1069  000115                     	ds	1
  1070  000116                     sortBattery@V:
  1071                           	opt stack 0
  1072                           
  1073                           ; 3 bytes @ 0x16
  1074  000116                     	ds	1
  1075  000117                     debug@i:
  1076                           	opt stack 0
  1077                           
  1078                           ; 2 bytes @ 0x17
  1079  000117                     	ds	2
  1080  000119                     sortBattery@i:
  1081                           	opt stack 0
  1082                           
  1083                           ; 3 bytes @ 0x19
  1084  000119                     	ds	3
  1085  00011C                     sortBattery@V_312:
  1086                           	opt stack 0
  1087                           
  1088                           ; 3 bytes @ 0x1C
  1089  00011C                     	ds	3
  1090  00011F                     ??_main:
  1091                           
  1092                           ; 1 bytes @ 0x1F
  1093  00011F                     	ds	13
  1094  00012C                     main@cylinderForward:
  1095                           	opt stack 0
  1096                           
  1097                           ; 2 bytes @ 0x2C
  1098  00012C                     	ds	2
  1099  00012E                     main@cylinderBackward:
  1100                           	opt stack 0
  1101                           
  1102                           ; 2 bytes @ 0x2E
  1103  00012E                     	ds	2
  1104  000130                     main@lastBatteryTime:
  1105                           	opt stack 0
  1106                           
  1107                           ; 2 bytes @ 0x30
  1108  000130                     	ds	2
  1109  000132                     main@cylinderStart:
  1110                           	opt stack 0
  1111                           
  1112                           ; 2 bytes @ 0x32
  1113  000132                     	ds	2
  1114  000134                     main@cylinderDur:
  1115                           	opt stack 0
  1116                           
  1117                           ; 2 bytes @ 0x34
  1118  000134                     	ds	2
  1119  000136                     main@prev:
  1120                           	opt stack 0
  1121                           
  1122                           ; 2 bytes @ 0x36
  1123  000136                     	ds	2
  1124                           tblptru	equ	0xFF8
  1125                           tblptrh	equ	0xFF7
  1126                           tblptrl	equ	0xFF6
  1127                           tablat	equ	0xFF5
  1128                           postinc0	equ	0xFEE
  1129                           wreg	equ	0xFE8
  1130                           postdec1	equ	0xFE5
  1131                           fsr1l	equ	0xFE1
  1132                           
  1133                           	psect	cstackBANK0
  1134  000080                     __pcstackBANK0:
  1135                           	opt stack 0
  1136  000080                     ??___ftdiv:
  1137  000080                     ?_readPastRun:
  1138                           	opt stack 0
  1139  000080                     ?___lwmod:
  1140                           	opt stack 0
  1141  000080                     readPastRun@run:
  1142                           	opt stack 0
  1143  000080                     eepromWrite@data:
  1144                           	opt stack 0
  1145  000080                     ___lwmod@dividend:
  1146                           	opt stack 0
  1147                           
  1148                           ; 2 bytes @ 0x0
  1149  000080                     	ds	2
  1150  000082                     ___lwmod@divisor:
  1151                           	opt stack 0
  1152  000082                     eepromWrite@address:
  1153                           	opt stack 0
  1154  000082                     readPastRun@data:
  1155                           	opt stack 0
  1156                           
  1157                           ; 14 bytes @ 0x2
  1158  000082                     	ds	1
  1159  000083                     ___ftdiv@cntr:
  1160                           	opt stack 0
  1161                           
  1162                           ; 1 bytes @ 0x3
  1163  000083                     	ds	1
  1164  000084                     ___lwmod@counter:
  1165                           	opt stack 0
  1166  000084                     ___ftdiv@f3:
  1167                           	opt stack 0
  1168                           
  1169                           ; 3 bytes @ 0x4
  1170  000084                     	ds	2
  1171  000086                     ??_eepromWrite:
  1172                           
  1173                           ; 1 bytes @ 0x6
  1174  000086                     	ds	1
  1175  000087                     ___ftdiv@exp:
  1176                           	opt stack 0
  1177  000087                     eepromWrite@ien:
  1178                           	opt stack 0
  1179                           
  1180                           ; 2 bytes @ 0x7
  1181  000087                     	ds	1
  1182  000088                     ___ftdiv@sign:
  1183                           	opt stack 0
  1184                           
  1185                           ; 1 bytes @ 0x8
  1186  000088                     	ds	1
  1187  000089                     ?___ftmul:
  1188                           	opt stack 0
  1189  000089                     saveNewRun@data:
  1190                           	opt stack 0
  1191  000089                     ___ftmul@f1:
  1192                           	opt stack 0
  1193                           
  1194                           ; 3 bytes @ 0x9
  1195  000089                     	ds	2
  1196  00008B                     saveNewRun@n:
  1197                           	opt stack 0
  1198                           
  1199                           ; 2 bytes @ 0xB
  1200  00008B                     	ds	1
  1201  00008C                     ___ftmul@f2:
  1202                           	opt stack 0
  1203                           
  1204                           ; 3 bytes @ 0xC
  1205  00008C                     	ds	1
  1206  00008D                     saveNewRun@i:
  1207                           	opt stack 0
  1208                           
  1209                           ; 2 bytes @ 0xD
  1210  00008D                     	ds	2
  1211  00008F                     ??___ftmul:
  1212                           
  1213                           ; 1 bytes @ 0xF
  1214  00008F                     	ds	1
  1215  000090                     readPastRun@i:
  1216                           	opt stack 0
  1217                           
  1218                           ; 2 bytes @ 0x10
  1219  000090                     	ds	2
  1220  000092                     ___ftmul@exp:
  1221                           	opt stack 0
  1222                           
  1223                           ; 1 bytes @ 0x12
  1224  000092                     	ds	1
  1225  000093                     ___ftmul@f3_as_product:
  1226                           	opt stack 0
  1227                           
  1228                           ; 3 bytes @ 0x13
  1229  000093                     	ds	3
  1230  000096                     ___ftmul@cntr:
  1231                           	opt stack 0
  1232                           
  1233                           ; 1 bytes @ 0x16
  1234  000096                     	ds	1
  1235  000097                     ___ftmul@sign:
  1236                           	opt stack 0
  1237                           
  1238                           ; 1 bytes @ 0x17
  1239  000097                     	ds	1
  1240  000098                     ?_fround:
  1241                           	opt stack 0
  1242  000098                     ?_scale:
  1243                           	opt stack 0
  1244                           
  1245                           ; 3 bytes @ 0x18
  1246  000098                     	ds	3
  1247  00009B                     _fround$1436:
  1248                           	opt stack 0
  1249  00009B                     _scale$1437:
  1250                           	opt stack 0
  1251                           
  1252                           ; 3 bytes @ 0x1B
  1253  00009B                     	ds	3
  1254  00009E                     scale@scl:
  1255                           	opt stack 0
  1256  00009E                     _fround$1435:
  1257                           	opt stack 0
  1258                           
  1259                           ; 3 bytes @ 0x1E
  1260  00009E                     	ds	3
  1261  0000A1                     fround@prec:
  1262                           	opt stack 0
  1263                           
  1264                           ; 1 bytes @ 0x21
  1265  0000A1                     	ds	1
  1266  0000A2                     ?___ftadd:
  1267                           	opt stack 0
  1268  0000A2                     ___ftadd@f1:
  1269                           	opt stack 0
  1270                           
  1271                           ; 3 bytes @ 0x22
  1272  0000A2                     	ds	3
  1273  0000A5                     ___ftadd@f2:
  1274                           	opt stack 0
  1275                           
  1276                           ; 3 bytes @ 0x25
  1277  0000A5                     	ds	3
  1278  0000A8                     ??___ftadd:
  1279                           
  1280                           ; 1 bytes @ 0x28
  1281  0000A8                     	ds	3
  1282  0000AB                     ___ftadd@sign:
  1283                           	opt stack 0
  1284                           
  1285                           ; 1 bytes @ 0x2B
  1286  0000AB                     	ds	1
  1287  0000AC                     ___ftadd@exp2:
  1288                           	opt stack 0
  1289                           
  1290                           ; 1 bytes @ 0x2C
  1291  0000AC                     	ds	1
  1292  0000AD                     ___ftadd@exp1:
  1293                           	opt stack 0
  1294                           
  1295                           ; 1 bytes @ 0x2D
  1296  0000AD                     	ds	1
  1297  0000AE                     ?___ftsub:
  1298                           	opt stack 0
  1299  0000AE                     ?___fttol:
  1300                           	opt stack 0
  1301  0000AE                     ___ftsub@f1:
  1302                           	opt stack 0
  1303  0000AE                     ___fttol@f1:
  1304                           	opt stack 0
  1305                           
  1306                           ; 3 bytes @ 0x2E
  1307  0000AE                     	ds	3
  1308  0000B1                     ___ftsub@f2:
  1309                           	opt stack 0
  1310                           
  1311                           ; 3 bytes @ 0x31
  1312  0000B1                     	ds	1
  1313  0000B2                     ??___fttol:
  1314                           
  1315                           ; 1 bytes @ 0x32
  1316  0000B2                     	ds	5
  1317  0000B7                     ___fttol@sign1:
  1318                           	opt stack 0
  1319                           
  1320                           ; 1 bytes @ 0x37
  1321  0000B7                     	ds	1
  1322  0000B8                     ___fttol@lval:
  1323                           	opt stack 0
  1324                           
  1325                           ; 4 bytes @ 0x38
  1326  0000B8                     	ds	4
  1327  0000BC                     ___fttol@exp1:
  1328                           	opt stack 0
  1329                           
  1330                           ; 1 bytes @ 0x3C
  1331  0000BC                     	ds	1
  1332  0000BD                     ?_printf:
  1333                           	opt stack 0
  1334  0000BD                     ?_angleToPulse:
  1335                           	opt stack 0
  1336  0000BD                     angleToPulse@angle:
  1337                           	opt stack 0
  1338  0000BD                     printf@f:
  1339                           	opt stack 0
  1340                           
  1341                           ; 2 bytes @ 0x3D
  1342  0000BD                     	ds	4
  1343  0000C1                     ??_angleToPulse:
  1344                           
  1345                           ; 1 bytes @ 0x41
  1346  0000C1                     	ds	4
  1347  0000C5                     angleToPulse@offset:
  1348                           	opt stack 0
  1349                           
  1350                           ; 4 bytes @ 0x45
  1351  0000C5                     	ds	2
  1352  0000C7                     ??_printf:
  1353                           
  1354                           ; 1 bytes @ 0x47
  1355  0000C7                     	ds	2
  1356  0000C9                     angleToPulse@a180:
  1357                           	opt stack 0
  1358                           
  1359                           ; 4 bytes @ 0x49
  1360  0000C9                     	ds	4
  1361  0000CD                     _angleToPulse$1434:
  1362                           	opt stack 0
  1363  0000CD                     _printf$1438:
  1364                           	opt stack 0
  1365                           
  1366                           ; 3 bytes @ 0x4D
  1367  0000CD                     	ds	3
  1368  0000D0                     printf@idx:
  1369                           	opt stack 0
  1370  0000D0                     angleToPulse@a000:
  1371                           	opt stack 0
  1372                           
  1373                           ; 4 bytes @ 0x50
  1374  0000D0                     	ds	1
  1375  0000D1                     printf@cp:
  1376                           	opt stack 0
  1377                           
  1378                           ; 2 bytes @ 0x51
  1379  0000D1                     	ds	2
  1380  0000D3                     printf@len:
  1381                           	opt stack 0
  1382                           
  1383                           ; 2 bytes @ 0x53
  1384  0000D3                     	ds	1
  1385  0000D4                     setAngle@motor:
  1386                           	opt stack 0
  1387                           
  1388                           ; 2 bytes @ 0x54
  1389  0000D4                     	ds	1
  1390  0000D5                     printf@ap:
  1391                           	opt stack 0
  1392                           
  1393                           ; 2 bytes @ 0x55
  1394  0000D5                     	ds	1
  1395  0000D6                     setAngle@angle:
  1396                           	opt stack 0
  1397                           
  1398                           ; 2 bytes @ 0x56
  1399  0000D6                     	ds	1
  1400  0000D7                     printf@tmpval:
  1401                           	opt stack 0
  1402                           
  1403                           ; 4 bytes @ 0x57
  1404  0000D7                     	ds	1
  1405  0000D8                     ??_setAngle:
  1406                           
  1407                           ; 1 bytes @ 0x58
  1408  0000D8                     	ds	2
  1409  0000DA                     setAngle@period:
  1410                           	opt stack 0
  1411                           
  1412                           ; 2 bytes @ 0x5A
  1413  0000DA                     	ds	1
  1414  0000DB                     printf@exp:
  1415                           	opt stack 0
  1416                           
  1417                           ; 2 bytes @ 0x5B
  1418  0000DB                     	ds	1
  1419  0000DC                     setAngle@i:
  1420                           	opt stack 0
  1421                           
  1422                           ; 2 bytes @ 0x5C
  1423  0000DC                     	ds	1
  1424  0000DD                     printf@fval:
  1425                           	opt stack 0
  1426                           
  1427                           ; 3 bytes @ 0x5D
  1428  0000DD                     	ds	1
  1429  0000DE                     initServo@motor:
  1430                           	opt stack 0
  1431                           
  1432                           ; 2 bytes @ 0x5E
  1433  0000DE                     	ds	2
  1434  0000E0                     initServo@angle:
  1435                           	opt stack 0
  1436  0000E0                     printf@val:
  1437                           	opt stack 0
  1438                           
  1439                           ; 4 bytes @ 0x60
  1440  0000E0                     	ds	2
  1441  0000E2                     ??_initServo:
  1442                           
  1443                           ; 1 bytes @ 0x62
  1444  0000E2                     	ds	2
  1445  0000E4                     printf@width:
  1446                           	opt stack 0
  1447                           
  1448                           ; 2 bytes @ 0x64
  1449  0000E4                     	ds	2
  1450  0000E6                     initServo@i:
  1451                           	opt stack 0
  1452  0000E6                     printf@flag:
  1453                           	opt stack 0
  1454                           
  1455                           ; 2 bytes @ 0x66
  1456  0000E6                     	ds	2
  1457  0000E8                     printf@prec:
  1458                           	opt stack 0
  1459                           
  1460                           ; 2 bytes @ 0x68
  1461  0000E8                     	ds	2
  1462  0000EA                     printf@c:
  1463                           	opt stack 0
  1464                           
  1465                           ; 1 bytes @ 0x6A
  1466  0000EA                     	ds	1
  1467  0000EB                     ??_sortBattery:
  1468  0000EB                     showMainMenu@k:
  1469                           	opt stack 0
  1470  0000EB                     showRunSelect@k:
  1471                           	opt stack 0
  1472  0000EB                     showRunMenu@key:
  1473                           	opt stack 0
  1474  0000EB                     showRunTime@run:
  1475                           	opt stack 0
  1476  0000EB                     showRunStats@run:
  1477                           	opt stack 0
  1478                           
  1479                           ; 2 bytes @ 0x6B
  1480  0000EB                     	ds	1
  1481  0000EC                     showRunMenu@k:
  1482                           	opt stack 0
  1483                           
  1484                           ; 1 bytes @ 0x6C
  1485  0000EC                     	ds	1
  1486  0000ED                     ??_showRunTime:
  1487                           
  1488                           ; 1 bytes @ 0x6D
  1489  0000ED                     	ds	3
  1490  0000F0                     showRunTime@time:
  1491                           	opt stack 0
  1492                           
  1493                           ; 3 bytes @ 0x70
  1494  0000F0                     	ds	3
  1495  0000F3                     ??_showInterface:
  1496                           
  1497                           ; 1 bytes @ 0x73
  1498  0000F3                     	ds	1
  1499  0000F4                     showInterface@n:
  1500                           	opt stack 0
  1501                           
  1502                           ; 2 bytes @ 0x74
  1503  0000F4                     	ds	2
  1504  0000F6                     showInterface@run:
  1505                           	opt stack 0
  1506                           
  1507                           ; 2 bytes @ 0x76
  1508  0000F6                     	ds	2
  1509  0000F8                     showInterface@key:
  1510                           	opt stack 0
  1511                           
  1512                           ; 1 bytes @ 0x78
  1513  0000F8                     	ds	1
  1514  0000F9                     ??_debug:
  1515                           
  1516                           ; 1 bytes @ 0x79
  1517  0000F9                     	ds	2
  1518                           tblptru	equ	0xFF8
  1519                           tblptrh	equ	0xFF7
  1520                           tblptrl	equ	0xFF6
  1521                           tablat	equ	0xFF5
  1522                           postinc0	equ	0xFEE
  1523                           wreg	equ	0xFE8
  1524                           postdec1	equ	0xFE5
  1525                           fsr1l	equ	0xFE1
  1526                           
  1527                           	psect	cstackCOMRAM
  1528  000001                     __pcstackCOMRAM:
  1529                           	opt stack 0
  1530  000001                     ?i2___awmod:
  1531                           	opt stack 0
  1532  000001                     i2___awmod@dividend:
  1533                           	opt stack 0
  1534                           
  1535                           ; 2 bytes @ 0x0
  1536  000001                     	ds	2
  1537  000003                     i2___awmod@divisor:
  1538                           	opt stack 0
  1539                           
  1540                           ; 2 bytes @ 0x2
  1541  000003                     	ds	2
  1542  000005                     i2___awmod@counter:
  1543                           	opt stack 0
  1544                           
  1545                           ; 1 bytes @ 0x4
  1546  000005                     	ds	1
  1547  000006                     i2___awmod@sign:
  1548                           	opt stack 0
  1549                           
  1550                           ; 1 bytes @ 0x5
  1551  000006                     	ds	1
  1552  000007                     i2digitalWrite@pin:
  1553                           	opt stack 0
  1554  000007                     i2startTimer@timer:
  1555                           	opt stack 0
  1556                           
  1557                           ; 2 bytes @ 0x6
  1558  000007                     	ds	2
  1559  000009                     i2digitalWrite@val:
  1560                           	opt stack 0
  1561  000009                     i2startTimer@val:
  1562                           	opt stack 0
  1563                           
  1564                           ; 4 bytes @ 0x8
  1565  000009                     	ds	2
  1566  00000B                     ??i2_digitalWrite:
  1567                           
  1568                           ; 1 bytes @ 0xA
  1569  00000B                     	ds	2
  1570  00000D                     ??i2_startTimer:
  1571                           
  1572                           ; 1 bytes @ 0xC
  1573  00000D                     	ds	1
  1574  00000E                     i2digitalWrite@p:
  1575                           	opt stack 0
  1576                           
  1577                           ; 2 bytes @ 0xD
  1578  00000E                     	ds	2
  1579  000010                     ??_servoInterruptService:
  1580                           
  1581                           ; 1 bytes @ 0xF
  1582  000010                     	ds	4
  1583  000014                     ??_service:
  1584                           
  1585                           ; 1 bytes @ 0x13
  1586  000014                     	ds	14
  1587  000022                     service@key:
  1588                           	opt stack 0
  1589                           
  1590                           ; 1 bytes @ 0x21
  1591  000022                     	ds	1
  1592  000023                     ??_isdigit:
  1593  000023                     ?_digitalRead:
  1594                           	opt stack 0
  1595  000023                     ?___awmod:
  1596                           	opt stack 0
  1597  000023                     ?___ftpack:
  1598                           	opt stack 0
  1599  000023                     ?___ftneg:
  1600                           	opt stack 0
  1601  000023                     ?_analogRead:
  1602                           	opt stack 0
  1603  000023                     ?__tdiv_to_l_:
  1604                           	opt stack 0
  1605  000023                     ?__div_to_l_:
  1606                           	opt stack 0
  1607  000023                     ?___aldiv:
  1608                           	opt stack 0
  1609  000023                     ?___lldiv:
  1610                           	opt stack 0
  1611  000023                     lcdNibble@temp:
  1612                           	opt stack 0
  1613  000023                     readKeypad@key:
  1614                           	opt stack 0
  1615  000023                     digitalRead@pin:
  1616                           	opt stack 0
  1617  000023                     digitalWrite@pin:
  1618                           	opt stack 0
  1619  000023                     analogRead@channel:
  1620                           	opt stack 0
  1621  000023                     initTimer@timer:
  1622                           	opt stack 0
  1623  000023                     startTimer@timer:
  1624                           	opt stack 0
  1625  000023                     ___awmod@dividend:
  1626                           	opt stack 0
  1627  000023                     __div_to_l_@f1:
  1628                           	opt stack 0
  1629  000023                     ___ftpack@arg:
  1630                           	opt stack 0
  1631  000023                     __tdiv_to_l_@f1:
  1632                           	opt stack 0
  1633  000023                     ___ftneg@f1:
  1634                           	opt stack 0
  1635  000023                     ___aldiv@dividend:
  1636                           	opt stack 0
  1637  000023                     ___lldiv@dividend:
  1638                           	opt stack 0
  1639                           
  1640                           ; 4 bytes @ 0x22
  1641  000023                     	ds	1
  1642  000024                     lcdNibble@data:
  1643                           	opt stack 0
  1644  000024                     _isdigit$1066:
  1645                           	opt stack 0
  1646                           
  1647                           ; 1 bytes @ 0x23
  1648  000024                     	ds	1
  1649  000025                     ??_initTimer:
  1650  000025                     ??_digitalRead:
  1651  000025                     ??_lcdInst:
  1652  000025                     isdigit@c:
  1653                           	opt stack 0
  1654  000025                     digitalWrite@val:
  1655                           	opt stack 0
  1656  000025                     ___awmod@divisor:
  1657                           	opt stack 0
  1658  000025                     startTimer@val:
  1659                           	opt stack 0
  1660                           
  1661                           ; 4 bytes @ 0x24
  1662  000025                     	ds	1
  1663  000026                     lcdInst@data:
  1664                           	opt stack 0
  1665  000026                     ___ftpack@exp:
  1666                           	opt stack 0
  1667  000026                     __div_to_l_@f2:
  1668                           	opt stack 0
  1669  000026                     __tdiv_to_l_@f2:
  1670                           	opt stack 0
  1671                           
  1672                           ; 3 bytes @ 0x25
  1673  000026                     	ds	1
  1674  000027                     ??_initLCD:
  1675  000027                     ??_digitalWrite:
  1676  000027                     ??_analogRead:
  1677  000027                     putch@data:
  1678                           	opt stack 0
  1679  000027                     ___awmod@counter:
  1680                           	opt stack 0
  1681  000027                     ___ftpack@sign:
  1682                           	opt stack 0
  1683  000027                     ___aldiv@divisor:
  1684                           	opt stack 0
  1685  000027                     ___lldiv@divisor:
  1686                           	opt stack 0
  1687                           
  1688                           ; 4 bytes @ 0x26
  1689  000027                     	ds	1
  1690  000028                     ??___ftpack:
  1691  000028                     ___awmod@sign:
  1692                           	opt stack 0
  1693                           
  1694                           ; 1 bytes @ 0x27
  1695  000028                     	ds	1
  1696  000029                     ??_startTimer:
  1697  000029                     ??__tdiv_to_l_:
  1698  000029                     ?___awdiv:
  1699                           	opt stack 0
  1700  000029                     ___awdiv@dividend:
  1701                           	opt stack 0
  1702  000029                     __div_to_l_@quot:
  1703                           	opt stack 0
  1704                           
  1705                           ; 4 bytes @ 0x28
  1706  000029                     	ds	1
  1707  00002A                     digitalWrite@p:
  1708                           	opt stack 0
  1709                           
  1710                           ; 2 bytes @ 0x29
  1711  00002A                     	ds	1
  1712  00002B                     ?___altoft:
  1713                           	opt stack 0
  1714  00002B                     ?___awtoft:
  1715                           	opt stack 0
  1716  00002B                     ?___lltoft:
  1717                           	opt stack 0
  1718  00002B                     ___aldiv@counter:
  1719                           	opt stack 0
  1720  00002B                     ___awdiv@divisor:
  1721                           	opt stack 0
  1722  00002B                     ___awtoft@c:
  1723                           	opt stack 0
  1724  00002B                     ___altoft@c:
  1725                           	opt stack 0
  1726  00002B                     ___lldiv@quotient:
  1727                           	opt stack 0
  1728  00002B                     ___lltoft@c:
  1729                           	opt stack 0
  1730                           
  1731                           ; 4 bytes @ 0x2A
  1732  00002B                     	ds	1
  1733  00002C                     ___aldiv@sign:
  1734                           	opt stack 0
  1735  00002C                     __tdiv_to_l_@quot:
  1736                           	opt stack 0
  1737                           
  1738                           ; 4 bytes @ 0x2B
  1739  00002C                     	ds	1
  1740  00002D                     ___awdiv@counter:
  1741                           	opt stack 0
  1742  00002D                     __div_to_l_@cntr:
  1743                           	opt stack 0
  1744  00002D                     ___aldiv@quotient:
  1745                           	opt stack 0
  1746                           
  1747                           ; 4 bytes @ 0x2C
  1748  00002D                     	ds	1
  1749  00002E                     ___awdiv@sign:
  1750                           	opt stack 0
  1751  00002E                     ___awtoft@sign:
  1752                           	opt stack 0
  1753  00002E                     __div_to_l_@exp1:
  1754                           	opt stack 0
  1755                           
  1756                           ; 1 bytes @ 0x2D
  1757  00002E                     	ds	1
  1758  00002F                     ??___altoft:
  1759  00002F                     ??___lltoft:
  1760  00002F                     ___lldiv@counter:
  1761                           	opt stack 0
  1762  00002F                     ___awdiv@quotient:
  1763                           	opt stack 0
  1764  00002F                     ___ftge@ff1:
  1765                           	opt stack 0
  1766                           
  1767                           ; 3 bytes @ 0x2E
  1768  00002F                     	ds	1
  1769  000030                     ?___llmod:
  1770                           	opt stack 0
  1771  000030                     __tdiv_to_l_@cntr:
  1772                           	opt stack 0
  1773  000030                     ___llmod@dividend:
  1774                           	opt stack 0
  1775                           
  1776                           ; 4 bytes @ 0x2F
  1777  000030                     	ds	1
  1778  000031                     ?___wmul:
  1779                           	opt stack 0
  1780  000031                     ?___almod:
  1781                           	opt stack 0
  1782  000031                     __tdiv_to_l_@exp1:
  1783                           	opt stack 0
  1784  000031                     ___wmul@multiplier:
  1785                           	opt stack 0
  1786  000031                     ___almod@dividend:
  1787                           	opt stack 0
  1788                           
  1789                           ; 4 bytes @ 0x30
  1790  000031                     	ds	1
  1791  000032                     ___ftge@ff2:
  1792                           	opt stack 0
  1793                           
  1794                           ; 3 bytes @ 0x31
  1795  000032                     	ds	1
  1796  000033                     ___altoft@exp:
  1797                           	opt stack 0
  1798  000033                     ___lltoft@exp:
  1799                           	opt stack 0
  1800  000033                     ___wmul@multiplicand:
  1801                           	opt stack 0
  1802                           
  1803                           ; 2 bytes @ 0x32
  1804  000033                     	ds	1
  1805  000034                     ___altoft@sign:
  1806                           	opt stack 0
  1807  000034                     ___llmod@divisor:
  1808                           	opt stack 0
  1809                           
  1810                           ; 4 bytes @ 0x33
  1811  000034                     	ds	1
  1812  000035                     ??___ftge:
  1813  000035                     ?___ftdiv:
  1814                           	opt stack 0
  1815  000035                     ___wmul@product:
  1816                           	opt stack 0
  1817  000035                     ___ftdiv@f1:
  1818                           	opt stack 0
  1819  000035                     ___almod@divisor:
  1820                           	opt stack 0
  1821                           
  1822                           ; 4 bytes @ 0x34
  1823  000035                     	ds	2
  1824  000037                     ?_eepromRead:
  1825                           	opt stack 0
  1826  000037                     eepromRead@address:
  1827                           	opt stack 0
  1828                           
  1829                           ; 4 bytes @ 0x36
  1830  000037                     	ds	1
  1831  000038                     ___llmod@counter:
  1832                           	opt stack 0
  1833  000038                     ___ftdiv@f2:
  1834                           	opt stack 0
  1835                           
  1836                           ; 3 bytes @ 0x37
  1837  000038                     	ds	1
  1838  000039                     ___almod@counter:
  1839                           	opt stack 0
  1840                           
  1841                           ; 1 bytes @ 0x38
  1842  000039                     	ds	1
  1843  00003A                     ___almod@sign:
  1844                           	opt stack 0
  1845                           
  1846                           ; 1 bytes @ 0x39
  1847  00003A                     	ds	1
  1848  00003B                     tblptru	equ	0xFF8
  1849                           tblptrh	equ	0xFF7
  1850                           tblptrl	equ	0xFF6
  1851                           tablat	equ	0xFF5
  1852                           postinc0	equ	0xFEE
  1853                           wreg	equ	0xFE8
  1854                           postdec1	equ	0xFE5
  1855                           fsr1l	equ	0xFE1
  1856                           
  1857                           ; 1 bytes @ 0x3A
  1858 ;;
  1859 ;;Main: autosize = 0, tempsize = 13, incstack = 0, save=0
  1860 ;;
  1861 ;; *************** function _main *****************
  1862 ;; Defined at:
  1863 ;;		line 133 in file "main.c"
  1864 ;; Parameters:    Size  Location     Type
  1865 ;;		None
  1866 ;; Auto vars:     Size  Location     Type
  1867 ;;  prev            2   54[BANK1 ] int 
  1868 ;;  cylinderDur     2   52[BANK1 ] int 
  1869 ;;  cylinderStar    2   50[BANK1 ] int 
  1870 ;;  lastBatteryT    2   48[BANK1 ] int 
  1871 ;;  cylinderBack    2   46[BANK1 ] int 
  1872 ;;  cylinderForw    2   44[BANK1 ] int 
  1873 ;; Return value:  Size  Location     Type
  1874 ;;                  1    wreg      void 
  1875 ;; Registers used:
  1876 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1877 ;; Tracked objects:
  1878 ;;		On entry : 0/0
  1879 ;;		On exit  : 0/0
  1880 ;;		Unchanged: 0/0
  1881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1883 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1884 ;;      Temps:          0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1885 ;;      Totals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1886 ;;Total ram usage:       25 bytes
  1887 ;; Hardware stack levels required when called:   11
  1888 ;; This function calls:
  1889 ;;		___aldiv
  1890 ;;		___almod
  1891 ;;		_debug
  1892 ;;		_digitalRead
  1893 ;;		_digitalWrite
  1894 ;;		_initLCD
  1895 ;;		_initServo
  1896 ;;		_initTimer
  1897 ;;		_lcdClear
  1898 ;;		_lcdHome
  1899 ;;		_pinSetup
  1900 ;;		_printf
  1901 ;;		_readKeypad
  1902 ;;		_showInterface
  1903 ;;		_sortBattery
  1904 ;;		_startTimer
  1905 ;; This function is called by:
  1906 ;;		Startup code after reset
  1907 ;; This function uses a non-reentrant model
  1908 ;;
  1909                           
  1910                           	psect	text0
  1911  001708                     __ptext0:
  1912                           	opt stack 0
  1913  001708                     _main:
  1914                           	opt stack 20
  1915                           
  1916                           ;main.c: 135: debug();
  1917                           
  1918                           ;incstack = 0
  1919  001708  ECD2  F00F         	call	_debug	;wreg free
  1920                           
  1921                           ;main.c: 137: pinSetup();
  1922  00170C  EC03  F01E         	call	_pinSetup	;wreg free
  1923                           
  1924                           ;main.c: 138: initLCD();
  1925  001710  ECE0  F01D         	call	_initLCD	;wreg free
  1926  001714                     l155:
  1927                           
  1928                           ;main.c: 141: showInterface();
  1929  001714  EC3E  F018         	call	_showInterface	;wreg free
  1930                           
  1931                           ;main.c: 145: terminate = 0;
  1932  001718  0E00               	movlw	0
  1933  00171A  0101               	movlb	1	; () banked
  1934  00171C  6F5B               	movwf	(_terminate+1)& (0+255),b
  1935  00171E  0E00               	movlw	0
  1936  001720  6F5A               	movwf	_terminate& (0+255),b
  1937                           
  1938                           ; BSR set to: 1
  1939                           ;main.c: 146: time = 0;
  1940  001722  0E00               	movlw	0
  1941  001724  0101               	movlb	1	; () banked
  1942  001726  6F4C               	movwf	_time& (0+255),b
  1943  001728  0E00               	movlw	0
  1944  00172A  6F4D               	movwf	(_time+1)& (0+255),b
  1945  00172C  0E00               	movlw	0
  1946  00172E  6F4E               	movwf	(_time+2)& (0+255),b
  1947  001730  0E00               	movlw	0
  1948  001732  6F4F               	movwf	(_time+3)& (0+255),b
  1949                           
  1950                           ; BSR set to: 1
  1951                           ;main.c: 147: initTimer(1);
  1952  001734  0E00               	movlw	0
  1953  001736  6E24               	movwf	initTimer@timer+1,c
  1954  001738  0E01               	movlw	1
  1955  00173A  6E23               	movwf	initTimer@timer,c
  1956  00173C  ECBB  F01D         	call	_initTimer	;wreg free
  1957                           
  1958                           ;main.c: 148: startTimer(1,0);
  1959  001740  0E00               	movlw	0
  1960  001742  6E24               	movwf	startTimer@timer+1,c
  1961  001744  0E01               	movlw	1
  1962  001746  6E23               	movwf	startTimer@timer,c
  1963  001748  0E00               	movlw	0
  1964  00174A  6E25               	movwf	startTimer@val,c
  1965  00174C  0E00               	movlw	0
  1966  00174E  6E26               	movwf	startTimer@val+1,c
  1967  001750  0E00               	movlw	0
  1968  001752  6E27               	movwf	startTimer@val+2,c
  1969  001754  0E00               	movlw	0
  1970  001756  6E28               	movwf	startTimer@val+3,c
  1971  001758  EC49  F01D         	call	_startTimer	;wreg free
  1972                           
  1973                           ;main.c: 151: digitalWrite(cylinderMotor, 1);
  1974  00175C  0E6A               	movlw	low _cylinderMotor
  1975  00175E  6E23               	movwf	digitalWrite@pin,c
  1976  001760  0E01               	movlw	high _cylinderMotor
  1977  001762  6E24               	movwf	digitalWrite@pin+1,c
  1978  001764  0E00               	movlw	0
  1979  001766  6E26               	movwf	digitalWrite@val+1,c
  1980  001768  0E01               	movlw	1
  1981  00176A  6E25               	movwf	digitalWrite@val,c
  1982  00176C  EC76  F017         	call	_digitalWrite	;wreg free
  1983                           
  1984                           ;main.c: 152: initServo(conveyorServo, 130);
  1985  001770  0E62               	movlw	low _conveyorServo
  1986  001772  0100               	movlb	0	; () banked
  1987  001774  6FDE               	movwf	initServo@motor& (0+255),b
  1988  001776  0E01               	movlw	high _conveyorServo
  1989  001778  0100               	movlb	0	; () banked
  1990  00177A  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  1991  00177C  0E00               	movlw	0
  1992  00177E  0100               	movlb	0	; () banked
  1993  001780  6FE1               	movwf	(initServo@angle+1)& (0+255),b
  1994  001782  0E82               	movlw	130
  1995  001784  6FE0               	movwf	initServo@angle& (0+255),b
  1996  001786  EC3C  F016         	call	_initServo	;wreg free
  1997                           
  1998                           ;main.c: 153: initServo(padServo, padAngle_NEUTRAL);
  1999  00178A  0E76               	movlw	low _padServo
  2000  00178C  0100               	movlb	0	; () banked
  2001  00178E  6FDE               	movwf	initServo@motor& (0+255),b
  2002  001790  0E01               	movlw	high _padServo
  2003  001792  0100               	movlb	0	; () banked
  2004  001794  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  2005  001796  C15C  F0E0         	movff	_padAngle_NEUTRAL,initServo@angle
  2006  00179A  C15D  F0E1         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  2007  00179E  EC3C  F016         	call	_initServo	;wreg free
  2008                           
  2009                           ;main.c: 154: initServo(redirectingServo, redirectAngle_AA);
  2010  0017A2  0E7A               	movlw	low _redirectingServo
  2011  0017A4  0100               	movlb	0	; () banked
  2012  0017A6  6FDE               	movwf	initServo@motor& (0+255),b
  2013  0017A8  0E01               	movlw	high _redirectingServo
  2014  0017AA  0100               	movlb	0	; () banked
  2015  0017AC  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  2016  0017AE  C15E  F0E0         	movff	_redirectAngle_AA,initServo@angle
  2017  0017B2  C15F  F0E1         	movff	_redirectAngle_AA+1,initServo@angle+1
  2018  0017B6  EC3C  F016         	call	_initServo	;wreg free
  2019  0017BA                     l7474:
  2020                           
  2021                           ;main.c: 158: lcdClear();
  2022  0017BA  EC0F  F01F         	call	_lcdClear	;wreg free
  2023                           
  2024                           ;main.c: 159: printf("running");
  2025  0017BE  0EEB               	movlw	low STR_5
  2026  0017C0  0100               	movlb	0	; () banked
  2027  0017C2  6FBD               	movwf	printf@f& (0+255),b
  2028  0017C4  0EFF               	movlw	high STR_5
  2029  0017C6  0100               	movlb	0	; () banked
  2030  0017C8  6FBE               	movwf	(printf@f+1)& (0+255),b
  2031  0017CA  EC09  F000         	call	_printf	;wreg free
  2032                           
  2033                           ;main.c: 161: int lastBatteryTime = time;
  2034  0017CE  C14C  F130         	movff	_time,main@lastBatteryTime
  2035  0017D2  C14D  F131         	movff	_time+1,main@lastBatteryTime+1
  2036                           
  2037                           ;main.c: 163: int cylinderStart = time;
  2038  0017D6  C14C  F132         	movff	_time,main@cylinderStart
  2039  0017DA  C14D  F133         	movff	_time+1,main@cylinderStart+1
  2040                           
  2041                           ;main.c: 164: int cylinderDur = 0;
  2042  0017DE  0E00               	movlw	0
  2043  0017E0  0101               	movlb	1	; () banked
  2044  0017E2  6F35               	movwf	(main@cylinderDur+1)& (0+255),b
  2045  0017E4  0E00               	movlw	0
  2046  0017E6  6F34               	movwf	main@cylinderDur& (0+255),b
  2047                           
  2048                           ; BSR set to: 1
  2049                           ;main.c: 165: int cylinderForward = 10;
  2050  0017E8  0E00               	movlw	0
  2051  0017EA  0101               	movlb	1	; () banked
  2052  0017EC  6F2D               	movwf	(main@cylinderForward+1)& (0+255),b
  2053  0017EE  0E0A               	movlw	10
  2054  0017F0  6F2C               	movwf	main@cylinderForward& (0+255),b
  2055                           
  2056                           ; BSR set to: 1
  2057                           ;main.c: 166: int cylinderBackward = 10;
  2058  0017F2  0E00               	movlw	0
  2059  0017F4  0101               	movlb	1	; () banked
  2060  0017F6  6F2F               	movwf	(main@cylinderBackward+1)& (0+255),b
  2061  0017F8  0E0A               	movlw	10
  2062  0017FA  6F2E               	movwf	main@cylinderBackward& (0+255),b
  2063                           
  2064                           ;main.c: 168: while(!batteryDetected && !terminate){
  2065  0017FC  D121               	goto	l7506
  2066  0017FE                     l7488:
  2067                           
  2068                           ; BSR set to: 1
  2069                           ;main.c: 170: lcdHome();
  2070  0017FE  EC07  F01F         	call	_lcdHome	;wreg free
  2071                           
  2072                           ;main.c: 171: printf("time %02ld:%02ld",time/600,(time/10)%60);
  2073  001802  0EB5               	movlw	low STR_6
  2074  001804  0100               	movlb	0	; () banked
  2075  001806  6FBD               	movwf	printf@f& (0+255),b
  2076  001808  0EFF               	movlw	high STR_6
  2077  00180A  0100               	movlb	0	; () banked
  2078  00180C  6FBE               	movwf	(printf@f+1)& (0+255),b
  2079  00180E  C14C  F023         	movff	_time,___aldiv@dividend
  2080  001812  C14D  F024         	movff	_time+1,___aldiv@dividend+1
  2081  001816  C14E  F025         	movff	_time+2,___aldiv@dividend+2
  2082  00181A  C14F  F026         	movff	_time+3,___aldiv@dividend+3
  2083  00181E  0E58               	movlw	88
  2084  001820  6E27               	movwf	___aldiv@divisor,c
  2085  001822  0E02               	movlw	2
  2086  001824  6E28               	movwf	___aldiv@divisor+1,c
  2087  001826  0E00               	movlw	0
  2088  001828  6E29               	movwf	___aldiv@divisor+2,c
  2089  00182A  0E00               	movlw	0
  2090  00182C  6E2A               	movwf	___aldiv@divisor+3,c
  2091  00182E  EC10  F017         	call	___aldiv	;wreg free
  2092  001832  C023  F0BF         	movff	?___aldiv,?_printf+2
  2093  001836  C024  F0C0         	movff	?___aldiv+1,?_printf+3
  2094  00183A  C025  F0C1         	movff	?___aldiv+2,?_printf+4
  2095  00183E  C026  F0C2         	movff	?___aldiv+3,?_printf+5
  2096  001842  0E0A               	movlw	10
  2097  001844  6E27               	movwf	___aldiv@divisor,c
  2098  001846  0E00               	movlw	0
  2099  001848  6E28               	movwf	___aldiv@divisor+1,c
  2100  00184A  0E00               	movlw	0
  2101  00184C  6E29               	movwf	___aldiv@divisor+2,c
  2102  00184E  0E00               	movlw	0
  2103  001850  6E2A               	movwf	___aldiv@divisor+3,c
  2104  001852  C14C  F023         	movff	_time,___aldiv@dividend
  2105  001856  C14D  F024         	movff	_time+1,___aldiv@dividend+1
  2106  00185A  C14E  F025         	movff	_time+2,___aldiv@dividend+2
  2107  00185E  C14F  F026         	movff	_time+3,___aldiv@dividend+3
  2108  001862  EC10  F017         	call	___aldiv	;wreg free
  2109  001866  C023  F031         	movff	?___aldiv,___almod@dividend
  2110  00186A  C024  F032         	movff	?___aldiv+1,___almod@dividend+1
  2111  00186E  C025  F033         	movff	?___aldiv+2,___almod@dividend+2
  2112  001872  C026  F034         	movff	?___aldiv+3,___almod@dividend+3
  2113  001876  0E3C               	movlw	60
  2114  001878  6E35               	movwf	___almod@divisor,c
  2115  00187A  0E00               	movlw	0
  2116  00187C  6E36               	movwf	___almod@divisor+1,c
  2117  00187E  0E00               	movlw	0
  2118  001880  6E37               	movwf	___almod@divisor+2,c
  2119  001882  0E00               	movlw	0
  2120  001884  6E38               	movwf	___almod@divisor+3,c
  2121  001886  EC44  F019         	call	___almod	;wreg free
  2122  00188A  C031  F0C3         	movff	?___almod,?_printf+6
  2123  00188E  C032  F0C4         	movff	?___almod+1,?_printf+7
  2124  001892  C033  F0C5         	movff	?___almod+2,?_printf+8
  2125  001896  C034  F0C6         	movff	?___almod+3,?_printf+9
  2126  00189A  EC09  F000         	call	_printf	;wreg free
  2127                           
  2128                           ;main.c: 172: _delay((unsigned long)((77)*(10000000/4000.0)));
  2129  00189E  0EFA               	movlw	250
  2130  0018A0  0101               	movlb	1	; () banked
  2131  0018A2  6F1F               	movwf	??_main& (0+255),b
  2132  0018A4  0EFF               	movlw	255
  2133  0018A6                     u8207:
  2134  0018A6  2EE8               	decfsz	wreg,f,c
  2135  0018A8  D7FE               	bra	u8207
  2136  0018AA  2F1F               	decfsz	??_main& (0+255),f,b
  2137  0018AC  D7FC               	bra	u8207
  2138                           
  2139                           ;main.c: 175: if(time - cylinderStart >= cylinderDur)
  2140  0018AE  C134  F11F         	movff	main@cylinderDur,??_main
  2141  0018B2  C135  F120         	movff	main@cylinderDur+1,??_main+1
  2142  0018B6  0E00               	movlw	0
  2143  0018B8  0101               	movlb	1	; () banked
  2144  0018BA  BF20               	btfsc	(??_main+1)& (0+255),7,b
  2145  0018BC  0EFF               	movlw	255
  2146  0018BE  6F21               	movwf	(??_main+2)& (0+255),b
  2147  0018C0  6F22               	movwf	(??_main+3)& (0+255),b
  2148  0018C2  C132  F123         	movff	main@cylinderStart,??_main+4
  2149  0018C6  C133  F124         	movff	main@cylinderStart+1,??_main+5
  2150  0018CA  0E00               	movlw	0
  2151  0018CC  0101               	movlb	1	; () banked
  2152  0018CE  BF24               	btfsc	(??_main+5)& (0+255),7,b
  2153  0018D0  0EFF               	movlw	255
  2154  0018D2  6F25               	movwf	(??_main+6)& (0+255),b
  2155  0018D4  6F26               	movwf	(??_main+7)& (0+255),b
  2156  0018D6  0101               	movlb	1	; () banked
  2157  0018D8  1F23               	comf	(??_main+4)& (0+255),f,b
  2158  0018DA  1F24               	comf	(??_main+5)& (0+255),f,b
  2159  0018DC  1F25               	comf	(??_main+6)& (0+255),f,b
  2160  0018DE  1F26               	comf	(??_main+7)& (0+255),f,b
  2161  0018E0  2B23               	incf	(??_main+4)& (0+255),f,b
  2162  0018E2  0E00               	movlw	0
  2163  0018E4  2324               	addwfc	(??_main+5)& (0+255),f,b
  2164  0018E6  2325               	addwfc	(??_main+6)& (0+255),f,b
  2165  0018E8  2326               	addwfc	(??_main+7)& (0+255),f,b
  2166  0018EA  0101               	movlb	1	; () banked
  2167  0018EC  514C               	movf	_time& (0+255),w,b
  2168  0018EE  0101               	movlb	1	; () banked
  2169  0018F0  2523               	addwf	(??_main+4)& (0+255),w,b
  2170  0018F2  0101               	movlb	1	; () banked
  2171  0018F4  6F27               	movwf	(??_main+8)& (0+255),b
  2172  0018F6  0101               	movlb	1	; () banked
  2173  0018F8  514D               	movf	(_time+1)& (0+255),w,b
  2174  0018FA  0101               	movlb	1	; () banked
  2175  0018FC  2124               	addwfc	(??_main+5)& (0+255),w,b
  2176  0018FE  0101               	movlb	1	; () banked
  2177  001900  6F28               	movwf	(??_main+9)& (0+255),b
  2178  001902  0101               	movlb	1	; () banked
  2179  001904  514E               	movf	(_time+2)& (0+255),w,b
  2180  001906  0101               	movlb	1	; () banked
  2181  001908  2125               	addwfc	(??_main+6)& (0+255),w,b
  2182  00190A  0101               	movlb	1	; () banked
  2183  00190C  6F29               	movwf	(??_main+10)& (0+255),b
  2184  00190E  0101               	movlb	1	; () banked
  2185  001910  514F               	movf	(_time+3)& (0+255),w,b
  2186  001912  0101               	movlb	1	; () banked
  2187  001914  2126               	addwfc	(??_main+7)& (0+255),w,b
  2188  001916  0101               	movlb	1	; () banked
  2189  001918  6F2A               	movwf	(??_main+11)& (0+255),b
  2190  00191A  0101               	movlb	1	; () banked
  2191  00191C  511F               	movf	??_main& (0+255),w,b
  2192  00191E  0101               	movlb	1	; () banked
  2193  001920  5D27               	subwf	(??_main+8)& (0+255),w,b
  2194  001922  0101               	movlb	1	; () banked
  2195  001924  5120               	movf	(??_main+1)& (0+255),w,b
  2196  001926  0101               	movlb	1	; () banked
  2197  001928  5928               	subwfb	(??_main+9)& (0+255),w,b
  2198  00192A  0101               	movlb	1	; () banked
  2199  00192C  5121               	movf	(??_main+2)& (0+255),w,b
  2200  00192E  0101               	movlb	1	; () banked
  2201  001930  5929               	subwfb	(??_main+10)& (0+255),w,b
  2202  001932  0101               	movlb	1	; () banked
  2203  001934  512A               	movf	(??_main+11)& (0+255),w,b
  2204  001936  0A80               	xorlw	128
  2205  001938  0101               	movlb	1	; () banked
  2206  00193A  6F2B               	movwf	(??_main+12)& (0+255),b
  2207  00193C  0101               	movlb	1	; () banked
  2208  00193E  5122               	movf	(??_main+3)& (0+255),w,b
  2209  001940  0A80               	xorlw	128
  2210  001942  0101               	movlb	1	; () banked
  2211  001944  592B               	subwfb	(??_main+12)& (0+255),w,b
  2212  001946  A0D8               	btfss	status,0,c
  2213  001948  D02E               	goto	l7502
  2214                           
  2215                           ; BSR set to: 1
  2216                           ;main.c: 176: {
  2217                           ;main.c: 177: int prev = digitalRead(cylinderDir);
  2218  00194A  0E66               	movlw	low _cylinderDir
  2219  00194C  6E23               	movwf	digitalRead@pin,c
  2220  00194E  0E01               	movlw	high _cylinderDir
  2221  001950  6E24               	movwf	digitalRead@pin+1,c
  2222  001952  ECE1  F014         	call	_digitalRead	;wreg free
  2223  001956  C023  F136         	movff	?_digitalRead,main@prev
  2224  00195A  C024  F137         	movff	?_digitalRead+1,main@prev+1
  2225                           
  2226                           ;main.c: 178: digitalWrite(cylinderDir, !prev);
  2227  00195E  0E66               	movlw	low _cylinderDir
  2228  001960  6E23               	movwf	digitalWrite@pin,c
  2229  001962  0E01               	movlw	high _cylinderDir
  2230  001964  6E24               	movwf	digitalWrite@pin+1,c
  2231  001966  0101               	movlb	1	; () banked
  2232  001968  5136               	movf	main@prev& (0+255),w,b
  2233  00196A  0101               	movlb	1	; () banked
  2234  00196C  1137               	iorwf	(main@prev+1)& (0+255),w,b
  2235  00196E  A4D8               	btfss	status,2,c
  2236  001970  D002               	goto	u8110
  2237  001972  0E01               	movlw	1
  2238  001974  D001               	goto	u8120
  2239  001976                     u8110:
  2240  001976  0E00               	movlw	0
  2241  001978                     u8120:
  2242  001978  6E25               	movwf	digitalWrite@val,c
  2243  00197A  6A26               	clrf	digitalWrite@val+1,c
  2244  00197C  EC76  F017         	call	_digitalWrite	;wreg free
  2245                           
  2246                           ;main.c: 179: if(prev)cylinderDur = cylinderBackward;
  2247  001980  0101               	movlb	1	; () banked
  2248  001982  5136               	movf	main@prev& (0+255),w,b
  2249  001984  0101               	movlb	1	; () banked
  2250  001986  1137               	iorwf	(main@prev+1)& (0+255),w,b
  2251  001988  B4D8               	btfsc	status,2,c
  2252  00198A  D005               	goto	l160
  2253                           
  2254                           ; BSR set to: 1
  2255  00198C  C12E  F134         	movff	main@cylinderBackward,main@cylinderDur
  2256  001990  C12F  F135         	movff	main@cylinderBackward+1,main@cylinderDur+1
  2257  001994  D004               	goto	l161
  2258  001996                     l160:
  2259                           
  2260                           ; BSR set to: 1
  2261                           ;main.c: 180: else cylinderDur = cylinderForward;
  2262  001996  C12C  F134         	movff	main@cylinderForward,main@cylinderDur
  2263  00199A  C12D  F135         	movff	main@cylinderForward+1,main@cylinderDur+1
  2264  00199E                     l161:
  2265                           
  2266                           ; BSR set to: 1
  2267                           ;main.c: 181: cylinderStart = time;
  2268  00199E  C14C  F132         	movff	_time,main@cylinderStart
  2269  0019A2  C14D  F133         	movff	_time+1,main@cylinderStart+1
  2270  0019A6                     l7502:
  2271                           
  2272                           ; BSR set to: 1
  2273                           ;main.c: 182: }
  2274                           ;main.c: 184: if(time - lastBatteryTime > stoppingTime)
  2275  0019A6  C130  F11F         	movff	main@lastBatteryTime,??_main
  2276  0019AA  C131  F120         	movff	main@lastBatteryTime+1,??_main+1
  2277  0019AE  0E00               	movlw	0
  2278  0019B0  0101               	movlb	1	; () banked
  2279  0019B2  BF20               	btfsc	(??_main+1)& (0+255),7,b
  2280  0019B4  0EFF               	movlw	255
  2281  0019B6  6F21               	movwf	(??_main+2)& (0+255),b
  2282  0019B8  6F22               	movwf	(??_main+3)& (0+255),b
  2283  0019BA  0101               	movlb	1	; () banked
  2284  0019BC  1F1F               	comf	??_main& (0+255),f,b
  2285  0019BE  1F20               	comf	(??_main+1)& (0+255),f,b
  2286  0019C0  1F21               	comf	(??_main+2)& (0+255),f,b
  2287  0019C2  1F22               	comf	(??_main+3)& (0+255),f,b
  2288  0019C4  2B1F               	incf	??_main& (0+255),f,b
  2289  0019C6  0E00               	movlw	0
  2290  0019C8  2320               	addwfc	(??_main+1)& (0+255),f,b
  2291  0019CA  2321               	addwfc	(??_main+2)& (0+255),f,b
  2292  0019CC  2322               	addwfc	(??_main+3)& (0+255),f,b
  2293  0019CE  0101               	movlb	1	; () banked
  2294  0019D0  514C               	movf	_time& (0+255),w,b
  2295  0019D2  0101               	movlb	1	; () banked
  2296  0019D4  251F               	addwf	??_main& (0+255),w,b
  2297  0019D6  0101               	movlb	1	; () banked
  2298  0019D8  6F23               	movwf	(??_main+4)& (0+255),b
  2299  0019DA  0101               	movlb	1	; () banked
  2300  0019DC  514D               	movf	(_time+1)& (0+255),w,b
  2301  0019DE  0101               	movlb	1	; () banked
  2302  0019E0  2120               	addwfc	(??_main+1)& (0+255),w,b
  2303  0019E2  0101               	movlb	1	; () banked
  2304  0019E4  6F24               	movwf	(??_main+5)& (0+255),b
  2305  0019E6  0101               	movlb	1	; () banked
  2306  0019E8  514E               	movf	(_time+2)& (0+255),w,b
  2307  0019EA  0101               	movlb	1	; () banked
  2308  0019EC  2121               	addwfc	(??_main+2)& (0+255),w,b
  2309  0019EE  0101               	movlb	1	; () banked
  2310  0019F0  6F25               	movwf	(??_main+6)& (0+255),b
  2311  0019F2  0101               	movlb	1	; () banked
  2312  0019F4  514F               	movf	(_time+3)& (0+255),w,b
  2313  0019F6  0101               	movlb	1	; () banked
  2314  0019F8  2122               	addwfc	(??_main+3)& (0+255),w,b
  2315  0019FA  0101               	movlb	1	; () banked
  2316  0019FC  6F26               	movwf	(??_main+7)& (0+255),b
  2317  0019FE  0E00               	movlw	0
  2318  001A00  0101               	movlb	1	; () banked
  2319  001A02  BF61               	btfsc	(_stoppingTime+1)& (0+255),7,b
  2320  001A04  0EFF               	movlw	255
  2321  001A06  0101               	movlb	1	; () banked
  2322  001A08  6F28               	movwf	(??_main+9)& (0+255),b
  2323  001A0A  0A80               	xorlw	128
  2324  001A0C  6F27               	movwf	(??_main+8)& (0+255),b
  2325  001A0E  0101               	movlb	1	; () banked
  2326  001A10  5123               	movf	(??_main+4)& (0+255),w,b
  2327  001A12  0101               	movlb	1	; () banked
  2328  001A14  5D60               	subwf	_stoppingTime& (0+255),w,b
  2329  001A16  0101               	movlb	1	; () banked
  2330  001A18  5124               	movf	(??_main+5)& (0+255),w,b
  2331  001A1A  0101               	movlb	1	; () banked
  2332  001A1C  5961               	subwfb	(_stoppingTime+1)& (0+255),w,b
  2333  001A1E  0101               	movlb	1	; () banked
  2334  001A20  5125               	movf	(??_main+6)& (0+255),w,b
  2335  001A22  0101               	movlb	1	; () banked
  2336  001A24  5928               	subwfb	(??_main+9)& (0+255),w,b
  2337  001A26  0101               	movlb	1	; () banked
  2338  001A28  5126               	movf	(??_main+7)& (0+255),w,b
  2339  001A2A  0A80               	xorlw	128
  2340  001A2C  0101               	movlb	1	; () banked
  2341  001A2E  5927               	subwfb	(??_main+8)& (0+255),w,b
  2342  001A30  B0D8               	btfsc	status,0,c
  2343  001A32  D006               	goto	l7506
  2344                           
  2345                           ; BSR set to: 1
  2346                           ;main.c: 185: {
  2347                           ;main.c: 186: terminate = 1;
  2348  001A34  0E00               	movlw	0
  2349  001A36  0101               	movlb	1	; () banked
  2350  001A38  6F5B               	movwf	(_terminate+1)& (0+255),b
  2351  001A3A  0E01               	movlw	1
  2352  001A3C  6F5A               	movwf	_terminate& (0+255),b
  2353                           
  2354                           ;main.c: 187: break;
  2355  001A3E  D00C               	goto	l7510
  2356  001A40                     l7506:
  2357                           
  2358                           ; BSR set to: 1
  2359  001A40  0101               	movlb	1	; () banked
  2360  001A42  5150               	movf	_batteryDetected& (0+255),w,b
  2361  001A44  0101               	movlb	1	; () banked
  2362  001A46  1151               	iorwf	(_batteryDetected+1)& (0+255),w,b
  2363  001A48  A4D8               	btfss	status,2,c
  2364  001A4A  D006               	goto	l7510
  2365                           
  2366                           ; BSR set to: 1
  2367  001A4C  0101               	movlb	1	; () banked
  2368  001A4E  515A               	movf	_terminate& (0+255),w,b
  2369  001A50  0101               	movlb	1	; () banked
  2370  001A52  115B               	iorwf	(_terminate+1)& (0+255),w,b
  2371  001A54  B4D8               	btfsc	status,2,c
  2372  001A56  D6D3               	goto	l7488
  2373  001A58                     l7510:
  2374                           
  2375                           ; BSR set to: 1
  2376                           ;main.c: 188: }
  2377                           ;main.c: 189: }
  2378                           ;main.c: 191: if(terminate)break;
  2379  001A58  0101               	movlb	1	; () banked
  2380  001A5A  515A               	movf	_terminate& (0+255),w,b
  2381  001A5C  0101               	movlb	1	; () banked
  2382  001A5E  115B               	iorwf	(_terminate+1)& (0+255),w,b
  2383  001A60  A4D8               	btfss	status,2,c
  2384  001A62  D00C               	goto	l7520
  2385                           
  2386                           ; BSR set to: 1
  2387                           ;main.c: 193: sortBattery();
  2388                           
  2389                           ; BSR set to: 1
  2390                           
  2391                           ; BSR set to: 1
  2392  001A64  EC05  F007         	call	_sortBattery	;wreg free
  2393                           
  2394                           ;main.c: 196: lastBatteryTime = time;
  2395  001A68  C14C  F130         	movff	_time,main@lastBatteryTime
  2396  001A6C  C14D  F131         	movff	_time+1,main@lastBatteryTime+1
  2397                           
  2398                           ;main.c: 197: batteryDetected = 0;
  2399  001A70  0E00               	movlw	0
  2400  001A72  0101               	movlb	1	; () banked
  2401  001A74  6F51               	movwf	(_batteryDetected+1)& (0+255),b
  2402  001A76  0E00               	movlw	0
  2403  001A78  6F50               	movwf	_batteryDetected& (0+255),b
  2404                           
  2405                           ; BSR set to: 1
  2406  001A7A  D69F               	goto	l7474
  2407  001A7C                     l7520:
  2408                           
  2409                           ; BSR set to: 1
  2410                           ;main.c: 198: }
  2411                           ;main.c: 201: digitalWrite(cylinderMotor, 0);
  2412  001A7C  0E6A               	movlw	low _cylinderMotor
  2413  001A7E  6E23               	movwf	digitalWrite@pin,c
  2414  001A80  0E01               	movlw	high _cylinderMotor
  2415  001A82  6E24               	movwf	digitalWrite@pin+1,c
  2416  001A84  0E00               	movlw	0
  2417  001A86  6E26               	movwf	digitalWrite@val+1,c
  2418  001A88  0E00               	movlw	0
  2419  001A8A  6E25               	movwf	digitalWrite@val,c
  2420  001A8C  EC76  F017         	call	_digitalWrite	;wreg free
  2421                           
  2422                           ;main.c: 204: lcdClear();
  2423  001A90  EC0F  F01F         	call	_lcdClear	;wreg free
  2424                           
  2425                           ;main.c: 205: printf("[AA,C,9V,OTHER]\n");
  2426  001A94  0EA4               	movlw	low STR_7
  2427  001A96  0100               	movlb	0	; () banked
  2428  001A98  6FBD               	movwf	printf@f& (0+255),b
  2429  001A9A  0EFF               	movlw	high STR_7
  2430  001A9C  0100               	movlb	0	; () banked
  2431  001A9E  6FBE               	movwf	(printf@f+1)& (0+255),b
  2432  001AA0  EC09  F000         	call	_printf	;wreg free
  2433                           
  2434                           ;main.c: 206: printf("[%d,%d,%d,%d]",n_AA,n_C,n_9V,n_OTHER);
  2435  001AA4  0ED5               	movlw	low STR_8
  2436  001AA6  0100               	movlb	0	; () banked
  2437  001AA8  6FBD               	movwf	printf@f& (0+255),b
  2438  001AAA  0EFF               	movlw	high STR_8
  2439  001AAC  0100               	movlb	0	; () banked
  2440  001AAE  6FBE               	movwf	(printf@f+1)& (0+255),b
  2441  001AB0  C154  F0BF         	movff	_n_AA,?_printf+2
  2442  001AB4  C155  F0C0         	movff	_n_AA+1,?_printf+3
  2443  001AB8  C156  F0C1         	movff	_n_C,?_printf+4
  2444  001ABC  C157  F0C2         	movff	_n_C+1,?_printf+5
  2445  001AC0  C152  F0C3         	movff	_n_9V,?_printf+6
  2446  001AC4  C153  F0C4         	movff	_n_9V+1,?_printf+7
  2447  001AC8  C158  F0C5         	movff	_n_OTHER,?_printf+8
  2448  001ACC  C159  F0C6         	movff	_n_OTHER+1,?_printf+9
  2449  001AD0  EC09  F000         	call	_printf	;wreg free
  2450                           
  2451                           ;main.c: 207: readKeypad();
  2452  001AD4  EC73  F01E         	call	_readKeypad	;wreg free
  2453  001AD8  D61D               	goto	l155
  2454  001ADA                     l171:
  2455  001ADA  D7FF               	goto	l171
  2456  001ADC                     __end_of_main:
  2457                           	opt stack 0
  2458                           tblptru	equ	0xFF8
  2459                           tblptrh	equ	0xFF7
  2460                           tblptrl	equ	0xFF6
  2461                           tablat	equ	0xFF5
  2462                           postinc0	equ	0xFEE
  2463                           wreg	equ	0xFE8
  2464                           postdec1	equ	0xFE5
  2465                           fsr1l	equ	0xFE1
  2466                           status	equ	0xFD8
  2467                           
  2468 ;; *************** function _sortBattery *****************
  2469 ;; Defined at:
  2470 ;;		line 215 in file "main.c"
  2471 ;; Parameters:    Size  Location     Type
  2472 ;;		None
  2473 ;; Auto vars:     Size  Location     Type
  2474 ;;  V               3   22[BANK1 ] float 
  2475 ;;  i               2   18[BANK1 ] int 
  2476 ;;  i               3   25[BANK1 ] float 
  2477 ;;  V               3   28[BANK1 ] float 
  2478 ;;  V_max           3   15[BANK1 ] float 
  2479 ;;  resolution      3   12[BANK1 ] float 
  2480 ;;  Vcc             3    9[BANK1 ] float 
  2481 ;;  V_float         3    2[BANK1 ] float 
  2482 ;;  targetAngle     2   20[BANK1 ] int 
  2483 ;;  signal          2    7[BANK1 ] int 
  2484 ;;  pos_v_counte    2    5[BANK1 ] int 
  2485 ;; Return value:  Size  Location     Type
  2486 ;;                  1    wreg      void 
  2487 ;; Registers used:
  2488 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2489 ;; Tracked objects:
  2490 ;;		On entry : 0/0
  2491 ;;		On exit  : 0/0
  2492 ;;		Unchanged: 0/0
  2493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2495 ;;      Locals:         0       0      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2496 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2497 ;;      Totals:         0       2      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2498 ;;Total ram usage:       33 bytes
  2499 ;; Hardware stack levels used:    1
  2500 ;; Hardware stack levels required when called:    8
  2501 ;; This function calls:
  2502 ;;		___altoft
  2503 ;;		___awtoft
  2504 ;;		___ftdiv
  2505 ;;		___ftge
  2506 ;;		___ftmul
  2507 ;;		___ftsub
  2508 ;;		___fttol
  2509 ;;		_analogRead
  2510 ;;		_digitalRead
  2511 ;;		_digitalWrite
  2512 ;;		_lcdClear
  2513 ;;		_printf
  2514 ;;		_readKeypad
  2515 ;;		_setAngle
  2516 ;; This function is called by:
  2517 ;;		_main
  2518 ;; This function uses a non-reentrant model
  2519 ;;
  2520                           
  2521                           	psect	text1
  2522  000E0A                     __ptext1:
  2523                           	opt stack 0
  2524  000E0A                     _sortBattery:
  2525                           	opt stack 22
  2526                           
  2527                           ;main.c: 218: setAngle(conveyorServo, 90);
  2528                           
  2529                           ;incstack = 0
  2530  000E0A  0E62               	movlw	low _conveyorServo
  2531  000E0C  0100               	movlb	0	; () banked
  2532  000E0E  6FD4               	movwf	setAngle@motor& (0+255),b
  2533  000E10  0E01               	movlw	high _conveyorServo
  2534  000E12  0100               	movlb	0	; () banked
  2535  000E14  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2536  000E16  0E00               	movlw	0
  2537  000E18  0100               	movlb	0	; () banked
  2538  000E1A  6FD7               	movwf	(setAngle@angle+1)& (0+255),b
  2539  000E1C  0E5A               	movlw	90
  2540  000E1E  6FD6               	movwf	setAngle@angle& (0+255),b
  2541  000E20  ECAA  F016         	call	_setAngle	;wreg free
  2542                           
  2543                           ;main.c: 219: digitalWrite(cylinderMotor, 0);
  2544  000E24  0E6A               	movlw	low _cylinderMotor
  2545  000E26  6E23               	movwf	digitalWrite@pin,c
  2546  000E28  0E01               	movlw	high _cylinderMotor
  2547  000E2A  6E24               	movwf	digitalWrite@pin+1,c
  2548  000E2C  0E00               	movlw	0
  2549  000E2E  6E26               	movwf	digitalWrite@val+1,c
  2550  000E30  0E00               	movlw	0
  2551  000E32  6E25               	movwf	digitalWrite@val,c
  2552  000E34  EC76  F017         	call	_digitalWrite	;wreg free
  2553                           
  2554                           ;main.c: 222: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2555  000E38  0E0D               	movlw	13
  2556  000E3A  0100               	movlb	0	; () banked
  2557  000E3C  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  2558  000E3E  0EAF               	movlw	175
  2559  000E40  0100               	movlb	0	; () banked
  2560  000E42  6FEB               	movwf	??_sortBattery& (0+255),b
  2561  000E44  0EB6               	movlw	182
  2562  000E46                     u8217:
  2563  000E46  2EE8               	decfsz	wreg,f,c
  2564  000E48  D7FE               	bra	u8217
  2565  000E4A  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  2566  000E4C  D7FC               	bra	u8217
  2567  000E4E  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2568  000E50  D7FA               	bra	u8217
  2569  000E52  F000               	nop	
  2570                           
  2571                           ;main.c: 224: float Vcc = 5.00;
  2572  000E54  0E00               	movlw	0
  2573  000E56  0101               	movlb	1	; () banked
  2574  000E58  6F09               	movwf	sortBattery@Vcc& (0+255),b
  2575  000E5A  0EA0               	movlw	160
  2576  000E5C  0101               	movlb	1	; () banked
  2577  000E5E  6F0A               	movwf	(sortBattery@Vcc+1)& (0+255),b
  2578  000E60  0E40               	movlw	64
  2579  000E62  0101               	movlb	1	; () banked
  2580  000E64  6F0B               	movwf	(sortBattery@Vcc+2)& (0+255),b
  2581                           
  2582                           ; BSR set to: 1
  2583                           ;main.c: 225: float resolution = (1<<10) - 1;
  2584  000E66  0EC0               	movlw	192
  2585  000E68  0101               	movlb	1	; () banked
  2586  000E6A  6F0C               	movwf	sortBattery@resolution& (0+255),b
  2587  000E6C  0E7F               	movlw	127
  2588  000E6E  0101               	movlb	1	; () banked
  2589  000E70  6F0D               	movwf	(sortBattery@resolution+1)& (0+255),b
  2590  000E72  0E44               	movlw	68
  2591  000E74  0101               	movlb	1	; () banked
  2592  000E76  6F0E               	movwf	(sortBattery@resolution+2)& (0+255),b
  2593                           
  2594                           ; BSR set to: 1
  2595                           ;main.c: 226: float V_max = 0;
  2596  000E78  0E00               	movlw	0
  2597  000E7A  0101               	movlb	1	; () banked
  2598  000E7C  6F0F               	movwf	sortBattery@V_max& (0+255),b
  2599  000E7E  0E00               	movlw	0
  2600  000E80  0101               	movlb	1	; () banked
  2601  000E82  6F10               	movwf	(sortBattery@V_max+1)& (0+255),b
  2602  000E84  0E00               	movlw	0
  2603  000E86  0101               	movlb	1	; () banked
  2604  000E88  6F11               	movwf	(sortBattery@V_max+2)& (0+255),b
  2605                           
  2606                           ; BSR set to: 1
  2607                           ;main.c: 227: float V_float = 0;
  2608  000E8A  0E00               	movlw	0
  2609  000E8C  0101               	movlb	1	; () banked
  2610  000E8E  6F02               	movwf	sortBattery@V_float& (0+255),b
  2611  000E90  0E00               	movlw	0
  2612  000E92  0101               	movlb	1	; () banked
  2613  000E94  6F03               	movwf	(sortBattery@V_float+1)& (0+255),b
  2614  000E96  0E00               	movlw	0
  2615  000E98  0101               	movlb	1	; () banked
  2616  000E9A  6F04               	movwf	(sortBattery@V_float+2)& (0+255),b
  2617                           
  2618                           ; BSR set to: 1
  2619                           ;main.c: 228: int pos_v_counter = 1;
  2620  000E9C  0E00               	movlw	0
  2621  000E9E  0101               	movlb	1	; () banked
  2622  000EA0  6F06               	movwf	(sortBattery@pos_v_counter+1)& (0+255),b
  2623  000EA2  0E01               	movlw	1
  2624  000EA4  6F05               	movwf	sortBattery@pos_v_counter& (0+255),b
  2625                           
  2626                           ; BSR set to: 1
  2627                           ;main.c: 229: int signal = 0;
  2628  000EA6  0E00               	movlw	0
  2629  000EA8  0101               	movlb	1	; () banked
  2630  000EAA  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2631  000EAC  0E00               	movlw	0
  2632  000EAE  6F07               	movwf	sortBattery@signal& (0+255),b
  2633                           
  2634                           ; BSR set to: 1
  2635                           ;main.c: 233: for(float i = (float)padAngle_NEUTRAL; i > padAngle_CLOSE; i -= 0.1) {
  2636  000EB0  C15C  F02B         	movff	_padAngle_NEUTRAL,___awtoft@c
  2637  000EB4  C15D  F02C         	movff	_padAngle_NEUTRAL+1,___awtoft@c+1
  2638  000EB8  EC3F  F01E         	call	___awtoft	;wreg free
  2639  000EBC  C02B  F119         	movff	?___awtoft,sortBattery@i
  2640  000EC0  C02C  F11A         	movff	?___awtoft+1,sortBattery@i+1
  2641  000EC4  C02D  F11B         	movff	?___awtoft+2,sortBattery@i+2
  2642  000EC8  D0F6               	goto	l7380
  2643  000ECA                     l7354:
  2644                           
  2645                           ;main.c: 234: setAngle(padServo, i);
  2646  000ECA  C119  F0AE         	movff	sortBattery@i,___fttol@f1
  2647  000ECE  C11A  F0AF         	movff	sortBattery@i+1,___fttol@f1+1
  2648  000ED2  C11B  F0B0         	movff	sortBattery@i+2,___fttol@f1+2
  2649  000ED6  EC0A  F012         	call	___fttol	;wreg free
  2650  000EDA  C0AE  F100         	movff	?___fttol,_sortBattery$1433
  2651  000EDE  C0AF  F101         	movff	?___fttol+1,_sortBattery$1433+1
  2652                           
  2653                           ;main.c: 234: setAngle(padServo, i);
  2654  000EE2  0E76               	movlw	low _padServo
  2655  000EE4  0100               	movlb	0	; () banked
  2656  000EE6  6FD4               	movwf	setAngle@motor& (0+255),b
  2657  000EE8  0E01               	movlw	high _padServo
  2658  000EEA  0100               	movlb	0	; () banked
  2659  000EEC  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2660  000EEE  C100  F0D6         	movff	_sortBattery$1433,setAngle@angle
  2661  000EF2  C101  F0D7         	movff	_sortBattery$1433+1,setAngle@angle+1
  2662  000EF6  ECAA  F016         	call	_setAngle	;wreg free
  2663                           
  2664                           ;main.c: 235: _delay((unsigned long)((100)*(10000000/4000000.0)));
  2665  000EFA  0E53               	movlw	83
  2666  000EFC                     u8227:
  2667  000EFC  2EE8               	decfsz	wreg,f,c
  2668  000EFE  D7FE               	bra	u8227
  2669  000F00  F000               	nop	
  2670                           
  2671                           ;main.c: 236: digitalWrite(AA_float, 1);
  2672  000F02  0E50               	movlw	low _AA_float
  2673  000F04  6E23               	movwf	digitalWrite@pin,c
  2674  000F06  0E00               	movlw	high _AA_float
  2675  000F08  6E24               	movwf	digitalWrite@pin+1,c
  2676  000F0A  0E00               	movlw	0
  2677  000F0C  6E26               	movwf	digitalWrite@val+1,c
  2678  000F0E  0E01               	movlw	1
  2679  000F10  6E25               	movwf	digitalWrite@val,c
  2680  000F12  EC76  F017         	call	_digitalWrite	;wreg free
  2681                           
  2682                           ;main.c: 237: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2683  000F16  C10C  F038         	movff	sortBattery@resolution,___ftdiv@f2
  2684  000F1A  C10D  F039         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2685  000F1E  C10E  F03A         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2686  000F22  C14A  F023         	movff	_padPin3+2,analogRead@channel
  2687  000F26  C14B  F024         	movff	_padPin3+3,analogRead@channel+1
  2688  000F2A  EC23  F01E         	call	_analogRead	;wreg free
  2689  000F2E  C023  F02B         	movff	?_analogRead,___altoft@c
  2690  000F32  C024  F02C         	movff	?_analogRead+1,___altoft@c+1
  2691  000F36  C025  F02D         	movff	?_analogRead+2,___altoft@c+2
  2692  000F3A  C026  F02E         	movff	?_analogRead+3,___altoft@c+3
  2693  000F3E  ECF2  F01A         	call	___altoft	;wreg free
  2694  000F42  C02B  F035         	movff	?___altoft,___ftdiv@f1
  2695  000F46  C02C  F036         	movff	?___altoft+1,___ftdiv@f1+1
  2696  000F4A  C02D  F037         	movff	?___altoft+2,___ftdiv@f1+2
  2697  000F4E  ECD9  F013         	call	___ftdiv	;wreg free
  2698  000F52  C035  F089         	movff	?___ftdiv,___ftmul@f1
  2699  000F56  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
  2700  000F5A  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
  2701  000F5E  C109  F08C         	movff	sortBattery@Vcc,___ftmul@f2
  2702  000F62  C10A  F08D         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2703  000F66  C10B  F08E         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2704  000F6A  ECAF  F010         	call	___ftmul	;wreg free
  2705  000F6E  C089  F116         	movff	?___ftmul,sortBattery@V
  2706  000F72  C08A  F117         	movff	?___ftmul+1,sortBattery@V+1
  2707  000F76  C08B  F118         	movff	?___ftmul+2,sortBattery@V+2
  2708                           
  2709                           ;main.c: 239: if(V > 0.1)pos_v_counter++;
  2710  000F7A  0ECD               	movlw	205
  2711  000F7C  6E2F               	movwf	___ftge@ff1,c
  2712  000F7E  0ECC               	movlw	204
  2713  000F80  6E30               	movwf	___ftge@ff1+1,c
  2714  000F82  0E3D               	movlw	61
  2715  000F84  6E31               	movwf	___ftge@ff1+2,c
  2716  000F86  C116  F032         	movff	sortBattery@V,___ftge@ff2
  2717  000F8A  C117  F033         	movff	sortBattery@V+1,___ftge@ff2+1
  2718  000F8E  C118  F034         	movff	sortBattery@V+2,___ftge@ff2+2
  2719  000F92  ECE3  F019         	call	___ftge	;wreg free
  2720  000F96  B0D8               	btfsc	status,0,c
  2721  000F98  D003               	goto	l7368
  2722  000F9A  0101               	movlb	1	; () banked
  2723  000F9C  4B05               	infsnz	sortBattery@pos_v_counter& (0+255),f,b
  2724  000F9E  2B06               	incf	(sortBattery@pos_v_counter+1)& (0+255),f,b
  2725  000FA0                     l7368:
  2726                           
  2727                           ;main.c: 241: if(V > V_max) {
  2728  000FA0  C10F  F02F         	movff	sortBattery@V_max,___ftge@ff1
  2729  000FA4  C110  F030         	movff	sortBattery@V_max+1,___ftge@ff1+1
  2730  000FA8  C111  F031         	movff	sortBattery@V_max+2,___ftge@ff1+2
  2731  000FAC  C116  F032         	movff	sortBattery@V,___ftge@ff2
  2732  000FB0  C117  F033         	movff	sortBattery@V+1,___ftge@ff2+1
  2733  000FB4  C118  F034         	movff	sortBattery@V+2,___ftge@ff2+2
  2734  000FB8  ECE3  F019         	call	___ftge	;wreg free
  2735  000FBC  B0D8               	btfsc	status,0,c
  2736  000FBE  D064               	goto	l7378
  2737                           
  2738                           ;main.c: 242: signal = digitalRead(padPin1)<<1;
  2739  000FC0  0E6E               	movlw	low _padPin1
  2740  000FC2  6E23               	movwf	digitalRead@pin,c
  2741  000FC4  0E01               	movlw	high _padPin1
  2742  000FC6  6E24               	movwf	digitalRead@pin+1,c
  2743  000FC8  ECE1  F014         	call	_digitalRead	;wreg free
  2744  000FCC  90D8               	bcf	status,0,c
  2745  000FCE  3423               	rlcf	?_digitalRead,w,c
  2746  000FD0  0101               	movlb	1	; () banked
  2747  000FD2  6F07               	movwf	sortBattery@signal& (0+255),b
  2748  000FD4  3424               	rlcf	?_digitalRead+1,w,c
  2749  000FD6  0101               	movlb	1	; () banked
  2750  000FD8  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2751                           
  2752                           ;main.c: 243: signal |= digitalRead(padPin2)<<0;
  2753  000FDA  0E72               	movlw	low _padPin2
  2754  000FDC  6E23               	movwf	digitalRead@pin,c
  2755  000FDE  0E01               	movlw	high _padPin2
  2756  000FE0  6E24               	movwf	digitalRead@pin+1,c
  2757  000FE2  ECE1  F014         	call	_digitalRead	;wreg free
  2758  000FE6  5023               	movf	?_digitalRead,w,c
  2759  000FE8  0101               	movlb	1	; () banked
  2760  000FEA  1307               	iorwf	sortBattery@signal& (0+255),f,b
  2761  000FEC  5024               	movf	?_digitalRead+1,w,c
  2762  000FEE  0101               	movlb	1	; () banked
  2763  000FF0  1308               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  2764                           
  2765                           ; BSR set to: 1
  2766                           ;main.c: 245: V_max = V;
  2767  000FF2  C116  F10F         	movff	sortBattery@V,sortBattery@V_max
  2768  000FF6  C117  F110         	movff	sortBattery@V+1,sortBattery@V_max+1
  2769  000FFA  C118  F111         	movff	sortBattery@V+2,sortBattery@V_max+2
  2770                           
  2771                           ;main.c: 248: digitalWrite(AA_float, 0);
  2772  000FFE  0E50               	movlw	low _AA_float
  2773  001000  6E23               	movwf	digitalWrite@pin,c
  2774  001002  0E00               	movlw	high _AA_float
  2775  001004  6E24               	movwf	digitalWrite@pin+1,c
  2776  001006  0E00               	movlw	0
  2777  001008  6E26               	movwf	digitalWrite@val+1,c
  2778  00100A  0E00               	movlw	0
  2779  00100C  6E25               	movwf	digitalWrite@val,c
  2780  00100E  EC76  F017         	call	_digitalWrite	;wreg free
  2781                           
  2782                           ;main.c: 249: _delay((unsigned long)((1)*(10000000/4000.0)));
  2783  001012  0E04               	movlw	4
  2784  001014  0100               	movlb	0	; () banked
  2785  001016  6FEB               	movwf	??_sortBattery& (0+255),b
  2786  001018  0E3D               	movlw	61
  2787  00101A                     u8237:
  2788  00101A  2EE8               	decfsz	wreg,f,c
  2789  00101C  D7FE               	bra	u8237
  2790  00101E  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  2791  001020  D7FC               	bra	u8237
  2792  001022  D000               	nop2	
  2793                           
  2794                           ;main.c: 250: V_float = analogRead(padPin3[1]) / resolution * Vcc;
  2795  001024  C10C  F038         	movff	sortBattery@resolution,___ftdiv@f2
  2796  001028  C10D  F039         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2797  00102C  C10E  F03A         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2798  001030  C14A  F023         	movff	_padPin3+2,analogRead@channel
  2799  001034  C14B  F024         	movff	_padPin3+3,analogRead@channel+1
  2800  001038  EC23  F01E         	call	_analogRead	;wreg free
  2801  00103C  C023  F02B         	movff	?_analogRead,___altoft@c
  2802  001040  C024  F02C         	movff	?_analogRead+1,___altoft@c+1
  2803  001044  C025  F02D         	movff	?_analogRead+2,___altoft@c+2
  2804  001048  C026  F02E         	movff	?_analogRead+3,___altoft@c+3
  2805  00104C  ECF2  F01A         	call	___altoft	;wreg free
  2806  001050  C02B  F035         	movff	?___altoft,___ftdiv@f1
  2807  001054  C02C  F036         	movff	?___altoft+1,___ftdiv@f1+1
  2808  001058  C02D  F037         	movff	?___altoft+2,___ftdiv@f1+2
  2809  00105C  ECD9  F013         	call	___ftdiv	;wreg free
  2810  001060  C035  F089         	movff	?___ftdiv,___ftmul@f1
  2811  001064  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
  2812  001068  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
  2813  00106C  C109  F08C         	movff	sortBattery@Vcc,___ftmul@f2
  2814  001070  C10A  F08D         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2815  001074  C10B  F08E         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2816  001078  ECAF  F010         	call	___ftmul	;wreg free
  2817  00107C  C089  F102         	movff	?___ftmul,sortBattery@V_float
  2818  001080  C08A  F103         	movff	?___ftmul+1,sortBattery@V_float+1
  2819  001084  C08B  F104         	movff	?___ftmul+2,sortBattery@V_float+2
  2820  001088                     l7378:
  2821  001088  C119  F0AE         	movff	sortBattery@i,___ftsub@f1
  2822  00108C  C11A  F0AF         	movff	sortBattery@i+1,___ftsub@f1+1
  2823  001090  C11B  F0B0         	movff	sortBattery@i+2,___ftsub@f1+2
  2824  001094  0ECD               	movlw	205
  2825  001096  0100               	movlb	0	; () banked
  2826  001098  6FB1               	movwf	___ftsub@f2& (0+255),b
  2827  00109A  0ECC               	movlw	204
  2828  00109C  0100               	movlb	0	; () banked
  2829  00109E  6FB2               	movwf	(___ftsub@f2+1)& (0+255),b
  2830  0010A0  0E3D               	movlw	61
  2831  0010A2  0100               	movlb	0	; () banked
  2832  0010A4  6FB3               	movwf	(___ftsub@f2+2)& (0+255),b
  2833  0010A6  EC6F  F01D         	call	___ftsub	;wreg free
  2834  0010AA  C0AE  F119         	movff	?___ftsub,sortBattery@i
  2835  0010AE  C0AF  F11A         	movff	?___ftsub+1,sortBattery@i+1
  2836  0010B2  C0B0  F11B         	movff	?___ftsub+2,sortBattery@i+2
  2837  0010B6                     l7380:
  2838  0010B6  C046  F02B         	movff	_padAngle_CLOSE,___awtoft@c
  2839  0010BA  C047  F02C         	movff	_padAngle_CLOSE+1,___awtoft@c+1
  2840  0010BE  EC3F  F01E         	call	___awtoft	;wreg free
  2841  0010C2  C02B  F02F         	movff	?___awtoft,___ftge@ff1
  2842  0010C6  C02C  F030         	movff	?___awtoft+1,___ftge@ff1+1
  2843  0010CA  C02D  F031         	movff	?___awtoft+2,___ftge@ff1+2
  2844  0010CE  C119  F032         	movff	sortBattery@i,___ftge@ff2
  2845  0010D2  C11A  F033         	movff	sortBattery@i+1,___ftge@ff2+1
  2846  0010D6  C11B  F034         	movff	sortBattery@i+2,___ftge@ff2+2
  2847  0010DA  ECE3  F019         	call	___ftge	;wreg free
  2848  0010DE  A0D8               	btfss	status,0,c
  2849  0010E0  D6F4               	goto	l7354
  2850                           
  2851                           ;main.c: 252: }
  2852                           ;main.c: 253: }
  2853                           ;main.c: 255: int targetAngle;
  2854                           ;main.c: 256: float V = V_max;
  2855  0010E2  C10F  F11C         	movff	sortBattery@V_max,sortBattery@V_312
  2856  0010E6  C110  F11D         	movff	sortBattery@V_max+1,sortBattery@V_312+1
  2857  0010EA  C111  F11E         	movff	sortBattery@V_max+2,sortBattery@V_312+2
  2858                           
  2859                           ;main.c: 258: lcdClear();
  2860  0010EE  EC0F  F01F         	call	_lcdClear	;wreg free
  2861                           
  2862                           ;main.c: 259: printf("N: %d,\nV: %.3f",pos_v_counter, V);
  2863  0010F2  0EC6               	movlw	low STR_9
  2864  0010F4  0100               	movlb	0	; () banked
  2865  0010F6  6FBD               	movwf	printf@f& (0+255),b
  2866  0010F8  0EFF               	movlw	high STR_9
  2867  0010FA  0100               	movlb	0	; () banked
  2868  0010FC  6FBE               	movwf	(printf@f+1)& (0+255),b
  2869  0010FE  C105  F0BF         	movff	sortBattery@pos_v_counter,?_printf+2
  2870  001102  C106  F0C0         	movff	sortBattery@pos_v_counter+1,?_printf+3
  2871  001106  C11C  F0C1         	movff	sortBattery@V_312,?_printf+4
  2872  00110A  C11D  F0C2         	movff	sortBattery@V_312+1,?_printf+5
  2873  00110E  C11E  F0C3         	movff	sortBattery@V_312+2,?_printf+6
  2874  001112  EC09  F000         	call	_printf	;wreg free
  2875                           
  2876                           ;main.c: 261: readKeypad();
  2877  001116  EC73  F01E         	call	_readKeypad	;wreg free
  2878                           
  2879                           ;main.c: 265: switch(signal){
  2880  00111A  D060               	goto	l7416
  2881  00111C                     l7388:
  2882                           
  2883                           ;main.c: 267: if(V_float < 0.1){
  2884  00111C  C102  F02F         	movff	sortBattery@V_float,___ftge@ff1
  2885  001120  C103  F030         	movff	sortBattery@V_float+1,___ftge@ff1+1
  2886  001124  C104  F031         	movff	sortBattery@V_float+2,___ftge@ff1+2
  2887  001128  0ECD               	movlw	205
  2888  00112A  6E32               	movwf	___ftge@ff2,c
  2889  00112C  0ECC               	movlw	204
  2890  00112E  6E33               	movwf	___ftge@ff2+1,c
  2891  001130  0E3D               	movlw	61
  2892  001132  6E34               	movwf	___ftge@ff2+2,c
  2893  001134  ECE3  F019         	call	___ftge	;wreg free
  2894  001138  B0D8               	btfsc	status,0,c
  2895  00113A  D018               	goto	l7398
  2896                           
  2897                           ;main.c: 268: if(V > V_LIM_AA){ targetAngle = redirectAngle_AA; n_AA+=1;}
  2898  00113C  C03E  F02F         	movff	_V_LIM_AA,___ftge@ff1
  2899  001140  C03F  F030         	movff	_V_LIM_AA+1,___ftge@ff1+1
  2900  001144  C040  F031         	movff	_V_LIM_AA+2,___ftge@ff1+2
  2901  001148  C11C  F032         	movff	sortBattery@V_312,___ftge@ff2
  2902  00114C  C11D  F033         	movff	sortBattery@V_312+1,___ftge@ff2+1
  2903  001150  C11E  F034         	movff	sortBattery@V_312+2,___ftge@ff2+2
  2904  001154  ECE3  F019         	call	___ftge	;wreg free
  2905  001158  B0D8               	btfsc	status,0,c
  2906  00115A  D038               	goto	l192
  2907  00115C  C15E  F114         	movff	_redirectAngle_AA,sortBattery@targetAngle
  2908  001160  C15F  F115         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  2909  001164  0101               	movlb	1	; () banked
  2910  001166  4B54               	infsnz	_n_AA& (0+255),f,b
  2911  001168  2B55               	incf	(_n_AA+1)& (0+255),f,b
  2912  00116A  D04C               	goto	l7418
  2913  00116C                     l7398:
  2914                           
  2915                           ;main.c: 274: if(V > V_LIM_9V) {targetAngle = redirectAngle_9V; n_9V+=1;}
  2916  00116C  C03B  F02F         	movff	_V_LIM_9V,___ftge@ff1
  2917  001170  C03C  F030         	movff	_V_LIM_9V+1,___ftge@ff1+1
  2918  001174  C03D  F031         	movff	_V_LIM_9V+2,___ftge@ff1+2
  2919  001178  C11C  F032         	movff	sortBattery@V_312,___ftge@ff2
  2920  00117C  C11D  F033         	movff	sortBattery@V_312+1,___ftge@ff2+1
  2921  001180  C11E  F034         	movff	sortBattery@V_312+2,___ftge@ff2+2
  2922  001184  ECE3  F019         	call	___ftge	;wreg free
  2923  001188  B0D8               	btfsc	status,0,c
  2924  00118A  D020               	goto	l192
  2925  00118C  C04A  F114         	movff	_redirectAngle_9V,sortBattery@targetAngle
  2926  001190  C04B  F115         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  2927  001194  0101               	movlb	1	; () banked
  2928  001196  4B52               	infsnz	_n_9V& (0+255),f,b
  2929  001198  2B53               	incf	(_n_9V+1)& (0+255),f,b
  2930  00119A  D034               	goto	l7418
  2931  00119C                     l7406:
  2932                           
  2933                           ;main.c: 278: if(V > V_LIM_C) {targetAngle = redirectAngle_C; n_C+=1;}
  2934  00119C  C041  F02F         	movff	_V_LIM_C,___ftge@ff1
  2935  0011A0  C042  F030         	movff	_V_LIM_C+1,___ftge@ff1+1
  2936  0011A4  C043  F031         	movff	_V_LIM_C+2,___ftge@ff1+2
  2937  0011A8  C11C  F032         	movff	sortBattery@V_312,___ftge@ff2
  2938  0011AC  C11D  F033         	movff	sortBattery@V_312+1,___ftge@ff2+1
  2939  0011B0  C11E  F034         	movff	sortBattery@V_312+2,___ftge@ff2+2
  2940  0011B4  ECE3  F019         	call	___ftge	;wreg free
  2941  0011B8  B0D8               	btfsc	status,0,c
  2942  0011BA  D008               	goto	l192
  2943  0011BC  C04C  F114         	movff	_redirectAngle_C,sortBattery@targetAngle
  2944  0011C0  C04D  F115         	movff	_redirectAngle_C+1,sortBattery@targetAngle+1
  2945  0011C4  0101               	movlb	1	; () banked
  2946  0011C6  4B56               	infsnz	_n_C& (0+255),f,b
  2947  0011C8  2B57               	incf	(_n_C+1)& (0+255),f,b
  2948  0011CA  D01C               	goto	l7418
  2949  0011CC                     l192:
  2950                           
  2951                           ;main.c: 279: else {targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  2952  0011CC  C04E  F114         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  2953  0011D0  C04F  F115         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  2954  0011D4  0101               	movlb	1	; () banked
  2955  0011D6  4B58               	infsnz	_n_OTHER& (0+255),f,b
  2956  0011D8  2B59               	incf	(_n_OTHER+1)& (0+255),f,b
  2957                           
  2958                           ; BSR set to: 1
  2959                           ;main.c: 281: }
  2960                           
  2961                           ; BSR set to: 1
  2962                           ;main.c: 280: break;
  2963  0011DA  D014               	goto	l7418
  2964  0011DC                     l7416:
  2965  0011DC  C107  F0EB         	movff	sortBattery@signal,??_sortBattery
  2966  0011E0  C108  F0EC         	movff	sortBattery@signal+1,??_sortBattery+1
  2967                           
  2968                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2969                           ; Switch size 1, requested type "space"
  2970                           ; Number of cases is 1, Range of values is 0 to 0
  2971                           ; switch strategies available:
  2972                           ; Name         Instructions Cycles
  2973                           ; simple_byte            4     3 (average)
  2974                           ;	Chosen strategy is simple_byte
  2975  0011E4  0100               	movlb	0	; () banked
  2976  0011E6  51EC               	movf	(??_sortBattery+1)& (0+255),w,b
  2977  0011E8  0A00               	xorlw	0	; case 0
  2978  0011EA  A4D8               	btfss	status,2,c
  2979  0011EC  D00B               	goto	l7418
  2980                           
  2981                           ; BSR set to: 0
  2982                           ; Switch size 1, requested type "space"
  2983                           ; Number of cases is 3, Range of values is 0 to 2
  2984                           ; switch strategies available:
  2985                           ; Name         Instructions Cycles
  2986                           ; simple_byte           10     6 (average)
  2987                           ;	Chosen strategy is simple_byte
  2988  0011EE  0100               	movlb	0	; () banked
  2989  0011F0  51EB               	movf	??_sortBattery& (0+255),w,b
  2990  0011F2  0A00               	xorlw	0	; case 0
  2991  0011F4  B4D8               	btfsc	status,2,c
  2992  0011F6  D792               	goto	l7388
  2993  0011F8  0A01               	xorlw	1	; case 1
  2994  0011FA  B4D8               	btfsc	status,2,c
  2995  0011FC  D7CF               	goto	l7406
  2996  0011FE  0A03               	xorlw	3	; case 2
  2997  001200  B4D8               	btfsc	status,2,c
  2998  001202  D7B4               	goto	l7398
  2999  001204                     l7418:
  3000                           
  3001                           ;main.c: 283: setAngle(redirectingServo, targetAngle);
  3002  001204  0E7A               	movlw	low _redirectingServo
  3003  001206  0100               	movlb	0	; () banked
  3004  001208  6FD4               	movwf	setAngle@motor& (0+255),b
  3005  00120A  0E01               	movlw	high _redirectingServo
  3006  00120C  0100               	movlb	0	; () banked
  3007  00120E  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3008  001210  C114  F0D6         	movff	sortBattery@targetAngle,setAngle@angle
  3009  001214  C115  F0D7         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  3010  001218  ECAA  F016         	call	_setAngle	;wreg free
  3011                           
  3012                           ;main.c: 284: _delay((unsigned long)((500)*(10000000/4000.0)));
  3013  00121C  0E07               	movlw	7
  3014  00121E  0100               	movlb	0	; () banked
  3015  001220  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  3016  001222  0E58               	movlw	88
  3017  001224  0100               	movlb	0	; () banked
  3018  001226  6FEB               	movwf	??_sortBattery& (0+255),b
  3019  001228  0E59               	movlw	89
  3020  00122A                     u8247:
  3021  00122A  2EE8               	decfsz	wreg,f,c
  3022  00122C  D7FE               	bra	u8247
  3023  00122E  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  3024  001230  D7FC               	bra	u8247
  3025  001232  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  3026  001234  D7FA               	bra	u8247
  3027  001236  D000               	nop2	
  3028                           
  3029                           ;main.c: 288: for(int i = padAngle_CLOSE; i < padAngle_OPEN; i++) {
  3030  001238  C046  F112         	movff	_padAngle_CLOSE,sortBattery@i_314
  3031  00123C  C047  F113         	movff	_padAngle_CLOSE+1,sortBattery@i_314+1
  3032  001240  D018               	goto	l7430
  3033  001242                     l7424:
  3034                           
  3035                           ;main.c: 289: setAngle(padServo, i);
  3036  001242  0E76               	movlw	low _padServo
  3037  001244  0100               	movlb	0	; () banked
  3038  001246  6FD4               	movwf	setAngle@motor& (0+255),b
  3039  001248  0E01               	movlw	high _padServo
  3040  00124A  0100               	movlb	0	; () banked
  3041  00124C  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3042  00124E  C112  F0D6         	movff	sortBattery@i_314,setAngle@angle
  3043  001252  C113  F0D7         	movff	sortBattery@i_314+1,setAngle@angle+1
  3044  001256  ECAA  F016         	call	_setAngle	;wreg free
  3045                           
  3046                           ;main.c: 290: _delay((unsigned long)((3)*(10000000/4000.0)));
  3047  00125A  0E0A               	movlw	10
  3048  00125C  0100               	movlb	0	; () banked
  3049  00125E  6FEB               	movwf	??_sortBattery& (0+255),b
  3050  001260  0EBC               	movlw	188
  3051  001262                     u8257:
  3052  001262  2EE8               	decfsz	wreg,f,c
  3053  001264  D7FE               	bra	u8257
  3054  001266  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  3055  001268  D7FC               	bra	u8257
  3056  00126A  F000               	nop	
  3057  00126C  0101               	movlb	1	; () banked
  3058  00126E  4B12               	infsnz	sortBattery@i_314& (0+255),f,b
  3059  001270  2B13               	incf	(sortBattery@i_314+1)& (0+255),f,b
  3060  001272                     l7430:
  3061  001272  5048               	movf	_padAngle_OPEN,w,c
  3062  001274  0101               	movlb	1	; () banked
  3063  001276  5D12               	subwf	sortBattery@i_314& (0+255),w,b
  3064  001278  0101               	movlb	1	; () banked
  3065  00127A  5113               	movf	(sortBattery@i_314+1)& (0+255),w,b
  3066  00127C  0A80               	xorlw	128
  3067  00127E  0100               	movlb	0	; () banked
  3068  001280  6FEB               	movwf	??_sortBattery& (0+255),b
  3069  001282  5049               	movf	_padAngle_OPEN+1,w,c
  3070  001284  0A80               	xorlw	128
  3071  001286  0100               	movlb	0	; () banked
  3072  001288  59EB               	subwfb	??_sortBattery& (0+255),w,b
  3073  00128A  A0D8               	btfss	status,0,c
  3074  00128C  D7DA               	goto	l7424
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;main.c: 291: }
  3078                           ;main.c: 293: _delay((unsigned long)((1000)*(10000000/4000.0)));
  3079                           
  3080                           ; BSR set to: 0
  3081  00128E  0E0D               	movlw	13
  3082  001290  0100               	movlb	0	; () banked
  3083  001292  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  3084  001294  0EAF               	movlw	175
  3085  001296  0100               	movlb	0	; () banked
  3086  001298  6FEB               	movwf	??_sortBattery& (0+255),b
  3087  00129A  0EB6               	movlw	182
  3088  00129C                     u8267:
  3089  00129C  2EE8               	decfsz	wreg,f,c
  3090  00129E  D7FE               	bra	u8267
  3091  0012A0  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  3092  0012A2  D7FC               	bra	u8267
  3093  0012A4  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  3094  0012A6  D7FA               	bra	u8267
  3095  0012A8  F000               	nop	
  3096                           
  3097                           ;main.c: 297: setAngle(padServo, padAngle_NEUTRAL);
  3098  0012AA  0E76               	movlw	low _padServo
  3099  0012AC  0100               	movlb	0	; () banked
  3100  0012AE  6FD4               	movwf	setAngle@motor& (0+255),b
  3101  0012B0  0E01               	movlw	high _padServo
  3102  0012B2  0100               	movlb	0	; () banked
  3103  0012B4  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3104  0012B6  C15C  F0D6         	movff	_padAngle_NEUTRAL,setAngle@angle
  3105  0012BA  C15D  F0D7         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  3106  0012BE  ECAA  F016         	call	_setAngle	;wreg free
  3107                           
  3108                           ;main.c: 301: setAngle(conveyorServo, 130);
  3109  0012C2  0E62               	movlw	low _conveyorServo
  3110  0012C4  0100               	movlb	0	; () banked
  3111  0012C6  6FD4               	movwf	setAngle@motor& (0+255),b
  3112  0012C8  0E01               	movlw	high _conveyorServo
  3113  0012CA  0100               	movlb	0	; () banked
  3114  0012CC  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3115  0012CE  0E00               	movlw	0
  3116  0012D0  0100               	movlb	0	; () banked
  3117  0012D2  6FD7               	movwf	(setAngle@angle+1)& (0+255),b
  3118  0012D4  0E82               	movlw	130
  3119  0012D6  6FD6               	movwf	setAngle@angle& (0+255),b
  3120  0012D8  ECAA  F016         	call	_setAngle	;wreg free
  3121                           
  3122                           ;main.c: 302: digitalWrite(cylinderMotor, 1);
  3123  0012DC  0E6A               	movlw	low _cylinderMotor
  3124  0012DE  6E23               	movwf	digitalWrite@pin,c
  3125  0012E0  0E01               	movlw	high _cylinderMotor
  3126  0012E2  6E24               	movwf	digitalWrite@pin+1,c
  3127  0012E4  0E00               	movlw	0
  3128  0012E6  6E26               	movwf	digitalWrite@val+1,c
  3129  0012E8  0E01               	movlw	1
  3130  0012EA  6E25               	movwf	digitalWrite@val,c
  3131  0012EC  EC76  F017         	call	_digitalWrite	;wreg free
  3132  0012F0  0012               	return		;funcret
  3133  0012F2                     __end_of_sortBattery:
  3134                           	opt stack 0
  3135                           tblptru	equ	0xFF8
  3136                           tblptrh	equ	0xFF7
  3137                           tblptrl	equ	0xFF6
  3138                           tablat	equ	0xFF5
  3139                           postinc0	equ	0xFEE
  3140                           wreg	equ	0xFE8
  3141                           postdec1	equ	0xFE5
  3142                           fsr1l	equ	0xFE1
  3143                           status	equ	0xFD8
  3144                           
  3145 ;; *************** function _digitalWrite *****************
  3146 ;; Defined at:
  3147 ;;		line 53 in file "iopin.c"
  3148 ;; Parameters:    Size  Location     Type
  3149 ;;  pin             2   34[COMRAM] PTR int 
  3150 ;;		 -> AA_float(4), cylinderDir(4), redirectingServo(4), padServo(4), 
  3151 ;;		 -> conveyorServo(4), cylinderMotor(4), 
  3152 ;;  val             2   36[COMRAM] int 
  3153 ;; Auto vars:     Size  Location     Type
  3154 ;;  p               2   41[COMRAM] int 
  3155 ;; Return value:  Size  Location     Type
  3156 ;;                  1    wreg      void 
  3157 ;; Registers used:
  3158 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3159 ;; Tracked objects:
  3160 ;;		On entry : 0/0
  3161 ;;		On exit  : 0/0
  3162 ;;		Unchanged: 0/0
  3163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3164 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3165 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3166 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3167 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3168 ;;Total ram usage:        9 bytes
  3169 ;; Hardware stack levels used:    1
  3170 ;; Hardware stack levels required when called:    3
  3171 ;; This function calls:
  3172 ;;		Nothing
  3173 ;; This function is called by:
  3174 ;;		_main
  3175 ;;		_sortBattery
  3176 ;; This function uses a non-reentrant model
  3177 ;;
  3178                           
  3179                           	psect	text2
  3180  002EEC                     __ptext2:
  3181                           	opt stack 0
  3182  002EEC                     _digitalWrite:
  3183                           	opt stack 26
  3184                           
  3185                           ;iopin.c: 54: if(pin){
  3186                           
  3187                           ;incstack = 0
  3188  002EEC  5023               	movf	digitalWrite@pin,w,c
  3189  002EEE  1024               	iorwf	digitalWrite@pin+1,w,c
  3190  002EF0  B4D8               	btfsc	status,2,c
  3191  002EF2  0012               	return	
  3192                           
  3193                           ;iopin.c: 55: int p = 1 << pin[1];
  3194  002EF4  EE20 F002          	lfsr	2,2
  3195  002EF8  5023               	movf	digitalWrite@pin,w,c
  3196  002EFA  26D9               	addwf	fsr2l,f,c
  3197  002EFC  5024               	movf	digitalWrite@pin+1,w,c
  3198  002EFE  22DA               	addwfc	fsr2h,f,c
  3199  002F00  50DF               	movf	indf2,w,c
  3200  002F02  6E27               	movwf	??_digitalWrite& (0+255),c
  3201  002F04  0E01               	movlw	1
  3202  002F06  6E28               	movwf	(??_digitalWrite+1)& (0+255),c
  3203  002F08  0E00               	movlw	0
  3204  002F0A  6E29               	movwf	(??_digitalWrite+2)& (0+255),c
  3205  002F0C  2A27               	incf	??_digitalWrite,f,c
  3206  002F0E  D003               	goto	u7764
  3207  002F10                     u7765:
  3208  002F10  90D8               	bcf	status,0,c
  3209  002F12  3628               	rlcf	??_digitalWrite+1,f,c
  3210  002F14  3629               	rlcf	??_digitalWrite+2,f,c
  3211  002F16                     u7764:
  3212  002F16  2E27               	decfsz	??_digitalWrite,f,c
  3213  002F18  D7FB               	goto	u7765
  3214  002F1A  C028  F02A         	movff	??_digitalWrite+1,digitalWrite@p
  3215  002F1E  C029  F02B         	movff	??_digitalWrite+2,digitalWrite@p+1
  3216                           
  3217                           ;iopin.c: 56: if(val == 0){
  3218  002F22  5025               	movf	digitalWrite@val,w,c
  3219  002F24  1026               	iorwf	digitalWrite@val+1,w,c
  3220  002F26  A4D8               	btfss	status,2,c
  3221  002F28  D02B               	goto	l7186
  3222                           
  3223                           ;iopin.c: 57: p ^= 0xff;
  3224  002F2A  0EFF               	movlw	255
  3225  002F2C  1A2A               	xorwf	digitalWrite@p,f,c
  3226                           
  3227                           ;iopin.c: 58: }
  3228                           ;iopin.c: 60: switch(pin[0]){
  3229  002F2E  D028               	goto	l7186
  3230  002F30                     l7162:
  3231  002F30  0425               	decf	digitalWrite@val,w,c
  3232  002F32  1026               	iorwf	digitalWrite@val+1,w,c
  3233  002F34  A4D8               	btfss	status,2,c
  3234  002F36  D003               	goto	l7166
  3235  002F38  502A               	movf	digitalWrite@p,w,c
  3236  002F3A  1289               	iorwf	3977,f,c	;volatile
  3237  002F3C  0012               	return	
  3238  002F3E                     l7166:
  3239                           
  3240                           ;iopin.c: 62: else LATA &= p;
  3241  002F3E  502A               	movf	digitalWrite@p,w,c
  3242  002F40  1689               	andwf	3977,f,c	;volatile
  3243                           
  3244                           ;iopin.c: 63: break;
  3245  002F42  0012               	return	
  3246  002F44                     l7168:
  3247  002F44  0425               	decf	digitalWrite@val,w,c
  3248  002F46  1026               	iorwf	digitalWrite@val+1,w,c
  3249  002F48  A4D8               	btfss	status,2,c
  3250  002F4A  D003               	goto	l7172
  3251  002F4C  502A               	movf	digitalWrite@p,w,c
  3252  002F4E  128A               	iorwf	3978,f,c	;volatile
  3253  002F50  0012               	return	
  3254  002F52                     l7172:
  3255                           
  3256                           ;iopin.c: 65: else LATB &= p;
  3257  002F52  502A               	movf	digitalWrite@p,w,c
  3258  002F54  168A               	andwf	3978,f,c	;volatile
  3259                           
  3260                           ;iopin.c: 66: break;
  3261  002F56  0012               	return	
  3262  002F58                     l7174:
  3263  002F58  0425               	decf	digitalWrite@val,w,c
  3264  002F5A  1026               	iorwf	digitalWrite@val+1,w,c
  3265  002F5C  A4D8               	btfss	status,2,c
  3266  002F5E  D003               	goto	l7178
  3267  002F60  502A               	movf	digitalWrite@p,w,c
  3268  002F62  128B               	iorwf	3979,f,c	;volatile
  3269  002F64  0012               	return	
  3270  002F66                     l7178:
  3271                           
  3272                           ;iopin.c: 68: else LATC &= p;
  3273  002F66  502A               	movf	digitalWrite@p,w,c
  3274  002F68  168B               	andwf	3979,f,c	;volatile
  3275                           
  3276                           ;iopin.c: 69: break;
  3277  002F6A  0012               	return	
  3278  002F6C                     l7180:
  3279  002F6C  0425               	decf	digitalWrite@val,w,c
  3280  002F6E  1026               	iorwf	digitalWrite@val+1,w,c
  3281  002F70  A4D8               	btfss	status,2,c
  3282  002F72  D003               	goto	l7184
  3283  002F74  502A               	movf	digitalWrite@p,w,c
  3284  002F76  128C               	iorwf	3980,f,c	;volatile
  3285  002F78  0012               	return	
  3286  002F7A                     l7184:
  3287                           
  3288                           ;iopin.c: 71: else LATD &= p;
  3289  002F7A  502A               	movf	digitalWrite@p,w,c
  3290  002F7C  168C               	andwf	3980,f,c	;volatile
  3291                           
  3292                           ;iopin.c: 72: }
  3293  002F7E  0012               	return	
  3294  002F80                     l7186:
  3295  002F80  C023  FFD9         	movff	digitalWrite@pin,fsr2l
  3296  002F84  C024  FFDA         	movff	digitalWrite@pin+1,fsr2h
  3297  002F88  CFDE F027          	movff	postinc2,??_digitalWrite
  3298  002F8C  CFDD F028          	movff	postdec2,??_digitalWrite+1
  3299                           
  3300                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3301                           ; Switch size 1, requested type "space"
  3302                           ; Number of cases is 1, Range of values is 0 to 0
  3303                           ; switch strategies available:
  3304                           ; Name         Instructions Cycles
  3305                           ; simple_byte            4     3 (average)
  3306                           ;	Chosen strategy is simple_byte
  3307  002F90  5028               	movf	??_digitalWrite+1,w,c
  3308  002F92  0A00               	xorlw	0	; case 0
  3309  002F94  A4D8               	btfss	status,2,c
  3310  002F96  0012               	return	
  3311                           
  3312                           ; Switch size 1, requested type "space"
  3313                           ; Number of cases is 4, Range of values is 0 to 3
  3314                           ; switch strategies available:
  3315                           ; Name         Instructions Cycles
  3316                           ; simple_byte           13     7 (average)
  3317                           ;	Chosen strategy is simple_byte
  3318  002F98  5027               	movf	??_digitalWrite,w,c
  3319  002F9A  0A00               	xorlw	0	; case 0
  3320  002F9C  B4D8               	btfsc	status,2,c
  3321  002F9E  D7C8               	goto	l7162
  3322  002FA0  0A01               	xorlw	1	; case 1
  3323  002FA2  B4D8               	btfsc	status,2,c
  3324  002FA4  D7CF               	goto	l7168
  3325  002FA6  0A03               	xorlw	3	; case 2
  3326  002FA8  B4D8               	btfsc	status,2,c
  3327  002FAA  D7D6               	goto	l7174
  3328  002FAC  0A01               	xorlw	1	; case 3
  3329  002FAE  A4D8               	btfss	status,2,c
  3330  002FB0  0012               	return	
  3331  002FB2  D7DC               	goto	l7180
  3332  002FB4                     __end_of_digitalWrite:
  3333                           	opt stack 0
  3334                           tblptru	equ	0xFF8
  3335                           tblptrh	equ	0xFF7
  3336                           tblptrl	equ	0xFF6
  3337                           tablat	equ	0xFF5
  3338                           postinc0	equ	0xFEE
  3339                           wreg	equ	0xFE8
  3340                           postdec1	equ	0xFE5
  3341                           fsr1l	equ	0xFE1
  3342                           indf2	equ	0xFDF
  3343                           postinc2	equ	0xFDE
  3344                           postdec2	equ	0xFDD
  3345                           fsr2h	equ	0xFDA
  3346                           fsr2l	equ	0xFD9
  3347                           status	equ	0xFD8
  3348                           
  3349 ;; *************** function _digitalRead *****************
  3350 ;; Defined at:
  3351 ;;		line 43 in file "iopin.c"
  3352 ;; Parameters:    Size  Location     Type
  3353 ;;  pin             2   34[COMRAM] PTR int 
  3354 ;;		 -> padPin2(4), padPin1(4), cylinderDir(4), 
  3355 ;; Auto vars:     Size  Location     Type
  3356 ;;		None
  3357 ;; Return value:  Size  Location     Type
  3358 ;;                  2   34[COMRAM] int 
  3359 ;; Registers used:
  3360 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3361 ;; Tracked objects:
  3362 ;;		On entry : 0/0
  3363 ;;		On exit  : 0/0
  3364 ;;		Unchanged: 0/0
  3365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3366 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3368 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3369 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3370 ;;Total ram usage:        4 bytes
  3371 ;; Hardware stack levels used:    1
  3372 ;; Hardware stack levels required when called:    3
  3373 ;; This function calls:
  3374 ;;		Nothing
  3375 ;; This function is called by:
  3376 ;;		_main
  3377 ;;		_sortBattery
  3378 ;; This function uses a non-reentrant model
  3379 ;;
  3380                           
  3381                           	psect	text3
  3382  0029C2                     __ptext3:
  3383                           	opt stack 0
  3384  0029C2                     _digitalRead:
  3385                           	opt stack 26
  3386                           
  3387                           ;iopin.c: 44: switch(pin[0]){
  3388                           
  3389                           ;incstack = 0
  3390  0029C2  D058               	goto	l7212
  3391  0029C4                     l7194:
  3392  0029C4  EE20 F002          	lfsr	2,2
  3393  0029C8  5023               	movf	digitalRead@pin,w,c
  3394  0029CA  26D9               	addwf	fsr2l,f,c
  3395  0029CC  5024               	movf	digitalRead@pin+1,w,c
  3396  0029CE  22DA               	addwfc	fsr2h,f,c
  3397  0029D0  50DF               	movf	indf2,w,c
  3398  0029D2  6E25               	movwf	??_digitalRead& (0+255),c
  3399  0029D4  CF80 F026          	movff	3968,??_digitalRead+1	;volatile
  3400  0029D8  2A25               	incf	??_digitalRead,f,c
  3401  0029DA  D002               	goto	u7824
  3402  0029DC                     u7825:
  3403  0029DC  90D8               	bcf	status,0,c
  3404  0029DE  3226               	rrcf	??_digitalRead+1,f,c
  3405  0029E0                     u7824:
  3406  0029E0  2E25               	decfsz	??_digitalRead,f,c
  3407  0029E2  D7FC               	goto	u7825
  3408  0029E4  0E01               	movlw	1
  3409  0029E6  1626               	andwf	??_digitalRead+1,f,c
  3410  0029E8  5026               	movf	??_digitalRead+1,w,c
  3411  0029EA  6E23               	movwf	?_digitalRead,c
  3412  0029EC  6A24               	clrf	?_digitalRead+1,c
  3413  0029EE  0012               	return	
  3414  0029F0                     l7198:
  3415  0029F0  EE20 F002          	lfsr	2,2
  3416  0029F4  5023               	movf	digitalRead@pin,w,c
  3417  0029F6  26D9               	addwf	fsr2l,f,c
  3418  0029F8  5024               	movf	digitalRead@pin+1,w,c
  3419  0029FA  22DA               	addwfc	fsr2h,f,c
  3420  0029FC  50DF               	movf	indf2,w,c
  3421  0029FE  6E25               	movwf	??_digitalRead& (0+255),c
  3422  002A00  CF81 F026          	movff	3969,??_digitalRead+1	;volatile
  3423  002A04  2A25               	incf	??_digitalRead,f,c
  3424  002A06  D002               	goto	u7834
  3425  002A08                     u7835:
  3426  002A08  90D8               	bcf	status,0,c
  3427  002A0A  3226               	rrcf	??_digitalRead+1,f,c
  3428  002A0C                     u7834:
  3429  002A0C  2E25               	decfsz	??_digitalRead,f,c
  3430  002A0E  D7FC               	goto	u7835
  3431  002A10  0E01               	movlw	1
  3432  002A12  1626               	andwf	??_digitalRead+1,f,c
  3433  002A14  5026               	movf	??_digitalRead+1,w,c
  3434  002A16  6E23               	movwf	?_digitalRead,c
  3435  002A18  6A24               	clrf	?_digitalRead+1,c
  3436  002A1A  0012               	return	
  3437  002A1C                     l7202:
  3438  002A1C  EE20 F002          	lfsr	2,2
  3439  002A20  5023               	movf	digitalRead@pin,w,c
  3440  002A22  26D9               	addwf	fsr2l,f,c
  3441  002A24  5024               	movf	digitalRead@pin+1,w,c
  3442  002A26  22DA               	addwfc	fsr2h,f,c
  3443  002A28  50DF               	movf	indf2,w,c
  3444  002A2A  6E25               	movwf	??_digitalRead& (0+255),c
  3445  002A2C  CF82 F026          	movff	3970,??_digitalRead+1	;volatile
  3446  002A30  2A25               	incf	??_digitalRead,f,c
  3447  002A32  D002               	goto	u7844
  3448  002A34                     u7845:
  3449  002A34  90D8               	bcf	status,0,c
  3450  002A36  3226               	rrcf	??_digitalRead+1,f,c
  3451  002A38                     u7844:
  3452  002A38  2E25               	decfsz	??_digitalRead,f,c
  3453  002A3A  D7FC               	goto	u7845
  3454  002A3C  0E01               	movlw	1
  3455  002A3E  1626               	andwf	??_digitalRead+1,f,c
  3456  002A40  5026               	movf	??_digitalRead+1,w,c
  3457  002A42  6E23               	movwf	?_digitalRead,c
  3458  002A44  6A24               	clrf	?_digitalRead+1,c
  3459  002A46  0012               	return	
  3460  002A48                     l7206:
  3461  002A48  EE20 F002          	lfsr	2,2
  3462  002A4C  5023               	movf	digitalRead@pin,w,c
  3463  002A4E  26D9               	addwf	fsr2l,f,c
  3464  002A50  5024               	movf	digitalRead@pin+1,w,c
  3465  002A52  22DA               	addwfc	fsr2h,f,c
  3466  002A54  50DF               	movf	indf2,w,c
  3467  002A56  6E25               	movwf	??_digitalRead& (0+255),c
  3468  002A58  CF83 F026          	movff	3971,??_digitalRead+1	;volatile
  3469  002A5C  2A25               	incf	??_digitalRead,f,c
  3470  002A5E  D002               	goto	u7854
  3471  002A60                     u7855:
  3472  002A60  90D8               	bcf	status,0,c
  3473  002A62  3226               	rrcf	??_digitalRead+1,f,c
  3474  002A64                     u7854:
  3475  002A64  2E25               	decfsz	??_digitalRead,f,c
  3476  002A66  D7FC               	goto	u7855
  3477  002A68  0E01               	movlw	1
  3478  002A6A  1626               	andwf	??_digitalRead+1,f,c
  3479  002A6C  5026               	movf	??_digitalRead+1,w,c
  3480  002A6E  6E23               	movwf	?_digitalRead,c
  3481  002A70  6A24               	clrf	?_digitalRead+1,c
  3482  002A72  0012               	return	
  3483  002A74                     l7212:
  3484  002A74  C023  FFD9         	movff	digitalRead@pin,fsr2l
  3485  002A78  C024  FFDA         	movff	digitalRead@pin+1,fsr2h
  3486  002A7C  CFDE F025          	movff	postinc2,??_digitalRead
  3487  002A80  CFDD F026          	movff	postdec2,??_digitalRead+1
  3488                           
  3489                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3490                           ; Switch size 1, requested type "space"
  3491                           ; Number of cases is 1, Range of values is 0 to 0
  3492                           ; switch strategies available:
  3493                           ; Name         Instructions Cycles
  3494                           ; simple_byte            4     3 (average)
  3495                           ;	Chosen strategy is simple_byte
  3496  002A84  5026               	movf	??_digitalRead+1,w,c
  3497  002A86  0A00               	xorlw	0	; case 0
  3498  002A88  A4D8               	btfss	status,2,c
  3499  002A8A  D00D               	goto	l346
  3500                           
  3501                           ; Switch size 1, requested type "space"
  3502                           ; Number of cases is 4, Range of values is 0 to 3
  3503                           ; switch strategies available:
  3504                           ; Name         Instructions Cycles
  3505                           ; simple_byte           13     7 (average)
  3506                           ;	Chosen strategy is simple_byte
  3507  002A8C  5025               	movf	??_digitalRead,w,c
  3508  002A8E  0A00               	xorlw	0	; case 0
  3509  002A90  B4D8               	btfsc	status,2,c
  3510  002A92  D798               	goto	l7194
  3511  002A94  0A01               	xorlw	1	; case 1
  3512  002A96  B4D8               	btfsc	status,2,c
  3513  002A98  D7AB               	goto	l7198
  3514  002A9A  0A03               	xorlw	3	; case 2
  3515  002A9C  B4D8               	btfsc	status,2,c
  3516  002A9E  D7BE               	goto	l7202
  3517  002AA0  0A01               	xorlw	1	; case 3
  3518  002AA2  B4D8               	btfsc	status,2,c
  3519  002AA4  D7D1               	goto	l7206
  3520  002AA6                     l346:
  3521                           
  3522                           ;iopin.c: 50: return -1;
  3523  002AA6  6823               	setf	?_digitalRead,c
  3524  002AA8  6824               	setf	?_digitalRead+1,c
  3525  002AAA  0012               	return		;funcret
  3526  002AAC                     __end_of_digitalRead:
  3527                           	opt stack 0
  3528                           tblptru	equ	0xFF8
  3529                           tblptrh	equ	0xFF7
  3530                           tblptrl	equ	0xFF6
  3531                           tablat	equ	0xFF5
  3532                           postinc0	equ	0xFEE
  3533                           wreg	equ	0xFE8
  3534                           postdec1	equ	0xFE5
  3535                           fsr1l	equ	0xFE1
  3536                           indf2	equ	0xFDF
  3537                           postinc2	equ	0xFDE
  3538                           postdec2	equ	0xFDD
  3539                           fsr2h	equ	0xFDA
  3540                           fsr2l	equ	0xFD9
  3541                           status	equ	0xFD8
  3542                           
  3543 ;; *************** function _analogRead *****************
  3544 ;; Defined at:
  3545 ;;		line 90 in file "iopin.c"
  3546 ;; Parameters:    Size  Location     Type
  3547 ;;  channel         2   34[COMRAM] int 
  3548 ;; Auto vars:     Size  Location     Type
  3549 ;;		None
  3550 ;; Return value:  Size  Location     Type
  3551 ;;                  4   34[COMRAM] long 
  3552 ;; Registers used:
  3553 ;;		wreg, status,2, status,0
  3554 ;; Tracked objects:
  3555 ;;		On entry : 0/0
  3556 ;;		On exit  : 0/0
  3557 ;;		Unchanged: 0/0
  3558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3559 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3561 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3562 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3563 ;;Total ram usage:        6 bytes
  3564 ;; Hardware stack levels used:    1
  3565 ;; Hardware stack levels required when called:    3
  3566 ;; This function calls:
  3567 ;;		Nothing
  3568 ;; This function is called by:
  3569 ;;		_sortBattery
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           	psect	text4
  3574  003C46                     __ptext4:
  3575                           	opt stack 0
  3576  003C46                     _analogRead:
  3577                           	opt stack 26
  3578                           
  3579                           ;iopin.c: 91: ADCON0 = channel<<2;
  3580                           
  3581                           ;incstack = 0
  3582  003C46  4423               	rlncf	analogRead@channel,w,c
  3583  003C48  46E8               	rlncf	wreg,f,c
  3584  003C4A  0BFC               	andlw	252
  3585  003C4C  6EC2               	movwf	4034,c	;volatile
  3586                           
  3587                           ;iopin.c: 92: ADCON0 |= 1<<0;
  3588  003C4E  80C2               	bsf	4034,0,c	;volatile
  3589                           
  3590                           ;iopin.c: 93: ADCON0 |= 1<<1;
  3591  003C50  82C2               	bsf	4034,1,c	;volatile
  3592  003C52                     l371:
  3593  003C52  B2C2               	btfsc	4034,1,c	;volatile
  3594  003C54  D7FE               	goto	l371
  3595                           
  3596                           ;iopin.c: 97: return (ADRESH<<8) + ADRESL;
  3597  003C56  50C3               	movf	4035,w,c	;volatile
  3598  003C58  CFC4 F027          	movff	4036,??_analogRead	;volatile
  3599  003C5C  6A28               	clrf	(??_analogRead+1)& (0+255),c
  3600  003C5E  C027  F028         	movff	??_analogRead,??_analogRead+1
  3601  003C62  6A27               	clrf	??_analogRead,c
  3602  003C64  2627               	addwf	??_analogRead,f,c
  3603  003C66  0E00               	movlw	0
  3604  003C68  2228               	addwfc	??_analogRead+1,f,c
  3605  003C6A  C027  F023         	movff	??_analogRead,?_analogRead
  3606  003C6E  C028  F024         	movff	??_analogRead+1,?_analogRead+1
  3607  003C72  0E00               	movlw	0
  3608  003C74  BE24               	btfsc	?_analogRead+1,7,c
  3609  003C76  0EFF               	movlw	-1
  3610  003C78  6E25               	movwf	?_analogRead+2,c
  3611  003C7A  6E26               	movwf	?_analogRead+3,c
  3612  003C7C  0012               	return	
  3613  003C7E                     __end_of_analogRead:
  3614                           	opt stack 0
  3615                           tblptru	equ	0xFF8
  3616                           tblptrh	equ	0xFF7
  3617                           tblptrl	equ	0xFF6
  3618                           tablat	equ	0xFF5
  3619                           postinc0	equ	0xFEE
  3620                           wreg	equ	0xFE8
  3621                           postdec1	equ	0xFE5
  3622                           fsr1l	equ	0xFE1
  3623                           indf2	equ	0xFDF
  3624                           postinc2	equ	0xFDE
  3625                           postdec2	equ	0xFDD
  3626                           fsr2h	equ	0xFDA
  3627                           fsr2l	equ	0xFD9
  3628                           status	equ	0xFD8
  3629                           
  3630 ;; *************** function _lcdHome *****************
  3631 ;; Defined at:
  3632 ;;		line 70 in file "lcd.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;		None
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;		None
  3637 ;; Return value:  Size  Location     Type
  3638 ;;                  2   28[None  ] int 
  3639 ;; Registers used:
  3640 ;;		wreg, status,2, status,0, cstack
  3641 ;; Tracked objects:
  3642 ;;		On entry : 0/0
  3643 ;;		On exit  : 0/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3650 ;;Total ram usage:        0 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; Hardware stack levels required when called:    5
  3653 ;; This function calls:
  3654 ;;		_lcdInst
  3655 ;; This function is called by:
  3656 ;;		_main
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660                           	psect	text5
  3661  003E0E                     __ptext5:
  3662                           	opt stack 0
  3663  003E0E                     _lcdHome:
  3664                           	opt stack 25
  3665                           
  3666                           ;lcd.c: 71: lcdInst(0b11000000);
  3667                           
  3668                           ;incstack = 0
  3669  003E0E  0EC0               	movlw	192
  3670  003E10  ECCD  F01E         	call	_lcdInst
  3671  003E14  0012               	return		;funcret
  3672  003E16                     __end_of_lcdHome:
  3673                           	opt stack 0
  3674                           tblptru	equ	0xFF8
  3675                           tblptrh	equ	0xFF7
  3676                           tblptrl	equ	0xFF6
  3677                           tablat	equ	0xFF5
  3678                           postinc0	equ	0xFEE
  3679                           wreg	equ	0xFE8
  3680                           postdec1	equ	0xFE5
  3681                           fsr1l	equ	0xFE1
  3682                           indf2	equ	0xFDF
  3683                           postinc2	equ	0xFDE
  3684                           postdec2	equ	0xFDD
  3685                           fsr2h	equ	0xFDA
  3686                           fsr2l	equ	0xFD9
  3687                           status	equ	0xFD8
  3688                           
  3689 ;; *************** function _initServo *****************
  3690 ;; Defined at:
  3691 ;;		line 21 in file "servo.c"
  3692 ;; Parameters:    Size  Location     Type
  3693 ;;  motor           2   94[BANK0 ] PTR int 
  3694 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
  3695 ;;  angle           2   96[BANK0 ] int 
  3696 ;; Auto vars:     Size  Location     Type
  3697 ;;  i               2  102[BANK0 ] int 
  3698 ;; Return value:  Size  Location     Type
  3699 ;;                  1    wreg      void 
  3700 ;; Registers used:
  3701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3702 ;; Tracked objects:
  3703 ;;		On entry : 0/0
  3704 ;;		On exit  : 0/0
  3705 ;;		Unchanged: 0/0
  3706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3707 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3708 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3709 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3710 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3711 ;;Total ram usage:       10 bytes
  3712 ;; Hardware stack levels used:    1
  3713 ;; Hardware stack levels required when called:    7
  3714 ;; This function calls:
  3715 ;;		_initTimer
  3716 ;;		_setAngle
  3717 ;;		_startTimer
  3718 ;; This function is called by:
  3719 ;;		_main
  3720 ;; This function uses a non-reentrant model
  3721 ;;
  3722                           
  3723                           	psect	text6
  3724  002C78                     __ptext6:
  3725                           	opt stack 0
  3726  002C78                     _initServo:
  3727                           	opt stack 23
  3728                           
  3729                           ;servo.c: 24: for(int i = 0; i < n; i++){
  3730                           
  3731                           ;incstack = 0
  3732  002C78  0E00               	movlw	0
  3733  002C7A  0100               	movlb	0	; () banked
  3734  002C7C  6FE7               	movwf	(initServo@i+1)& (0+255),b
  3735  002C7E  0E00               	movlw	0
  3736  002C80  6FE6               	movwf	initServo@i& (0+255),b
  3737  002C82  D017               	goto	l7322
  3738  002C84                     l7316:
  3739                           
  3740                           ; BSR set to: 0
  3741                           ;servo.c: 25: if(servos[i] == motor)return;
  3742  002C84  90D8               	bcf	status,0,c
  3743  002C86  0100               	movlb	0	; () banked
  3744  002C88  35E6               	rlcf	initServo@i& (0+255),w,b
  3745  002C8A  6ED9               	movwf	fsr2l,c
  3746  002C8C  0100               	movlb	0	; () banked
  3747  002C8E  35E7               	rlcf	(initServo@i+1)& (0+255),w,b
  3748  002C90  6EDA               	movwf	fsr2h,c
  3749  002C92  0E40               	movlw	low _servos
  3750  002C94  26D9               	addwf	fsr2l,f,c
  3751  002C96  0E01               	movlw	high _servos
  3752  002C98  22DA               	addwfc	fsr2h,f,c
  3753  002C9A  0100               	movlb	0	; () banked
  3754  002C9C  51DE               	movf	initServo@motor& (0+255),w,b
  3755  002C9E  18DE               	xorwf	postinc2,w,c
  3756  002CA0  E105               	bnz	l7320
  3757  002CA2  0100               	movlb	0	; () banked
  3758  002CA4  51DF               	movf	(initServo@motor+1)& (0+255),w,b
  3759  002CA6  18DE               	xorwf	postinc2,w,c
  3760  002CA8  B4D8               	btfsc	status,2,c
  3761  002CAA  0012               	return	
  3762  002CAC                     l7320:
  3763                           
  3764                           ; BSR set to: 0
  3765  002CAC  0100               	movlb	0	; () banked
  3766  002CAE  4BE6               	infsnz	initServo@i& (0+255),f,b
  3767  002CB0  2BE7               	incf	(initServo@i+1)& (0+255),f,b
  3768  002CB2                     l7322:
  3769                           
  3770                           ; BSR set to: 0
  3771  002CB2  5058               	movf	_n,w,c
  3772  002CB4  0100               	movlb	0	; () banked
  3773  002CB6  5DE6               	subwf	initServo@i& (0+255),w,b
  3774  002CB8  0100               	movlb	0	; () banked
  3775  002CBA  51E7               	movf	(initServo@i+1)& (0+255),w,b
  3776  002CBC  0A80               	xorlw	128
  3777  002CBE  0100               	movlb	0	; () banked
  3778  002CC0  6FE2               	movwf	??_initServo& (0+255),b
  3779  002CC2  5059               	movf	_n+1,w,c
  3780  002CC4  0A80               	xorlw	128
  3781  002CC6  0100               	movlb	0	; () banked
  3782  002CC8  59E2               	subwfb	??_initServo& (0+255),w,b
  3783  002CCA  A0D8               	btfss	status,0,c
  3784  002CCC  D7DB               	goto	l7316
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;servo.c: 26: }
  3788                           ;servo.c: 28: n++;
  3789                           
  3790                           ; BSR set to: 0
  3791  002CCE  4A58               	infsnz	_n,f,c
  3792  002CD0  2A59               	incf	_n+1,f,c
  3793                           
  3794                           ; BSR set to: 0
  3795                           ;servo.c: 29: servos[n-1] = motor;
  3796  002CD2  0EFE               	movlw	254
  3797  002CD4  0100               	movlb	0	; () banked
  3798  002CD6  6FE2               	movwf	??_initServo& (0+255),b
  3799  002CD8  0EFF               	movlw	255
  3800  002CDA  0100               	movlb	0	; () banked
  3801  002CDC  6FE3               	movwf	(??_initServo+1)& (0+255),b
  3802  002CDE  C058  F0E4         	movff	_n,??_initServo+2
  3803  002CE2  C059  F0E5         	movff	_n+1,??_initServo+3
  3804  002CE6  90D8               	bcf	status,0,c
  3805  002CE8  0100               	movlb	0	; () banked
  3806  002CEA  37E4               	rlcf	(??_initServo+2)& (0+255),f,b
  3807  002CEC  37E5               	rlcf	(??_initServo+3)& (0+255),f,b
  3808  002CEE  0100               	movlb	0	; () banked
  3809  002CF0  51E2               	movf	??_initServo& (0+255),w,b
  3810  002CF2  0100               	movlb	0	; () banked
  3811  002CF4  27E4               	addwf	(??_initServo+2)& (0+255),f,b
  3812  002CF6  0100               	movlb	0	; () banked
  3813  002CF8  51E3               	movf	(??_initServo+1)& (0+255),w,b
  3814  002CFA  0100               	movlb	0	; () banked
  3815  002CFC  23E5               	addwfc	(??_initServo+3)& (0+255),f,b
  3816  002CFE  0E40               	movlw	low _servos
  3817  002D00  0100               	movlb	0	; () banked
  3818  002D02  25E4               	addwf	(??_initServo+2)& (0+255),w,b
  3819  002D04  6ED9               	movwf	fsr2l,c
  3820  002D06  0E01               	movlw	high _servos
  3821  002D08  0100               	movlb	0	; () banked
  3822  002D0A  21E5               	addwfc	(??_initServo+3)& (0+255),w,b
  3823  002D0C  6EDA               	movwf	fsr2h,c
  3824  002D0E  C0DE  FFDE         	movff	initServo@motor,postinc2
  3825  002D12  C0DF  FFDD         	movff	initServo@motor+1,postdec2
  3826                           
  3827                           ; BSR set to: 0
  3828                           ;servo.c: 30: setAngle(motor, angle);
  3829  002D16  C0DE  F0D4         	movff	initServo@motor,setAngle@motor
  3830  002D1A  C0DF  F0D5         	movff	initServo@motor+1,setAngle@motor+1
  3831  002D1E  C0E0  F0D6         	movff	initServo@angle,setAngle@angle
  3832  002D22  C0E1  F0D7         	movff	initServo@angle+1,setAngle@angle+1
  3833  002D26  ECAA  F016         	call	_setAngle	;wreg free
  3834                           
  3835                           ;servo.c: 32: initTimer(0);
  3836  002D2A  0E00               	movlw	0
  3837  002D2C  6E24               	movwf	initTimer@timer+1,c
  3838  002D2E  0E00               	movlw	0
  3839  002D30  6E23               	movwf	initTimer@timer,c
  3840  002D32  ECBB  F01D         	call	_initTimer	;wreg free
  3841                           
  3842                           ;servo.c: 33: startTimer(0,0);
  3843  002D36  0E00               	movlw	0
  3844  002D38  6E24               	movwf	startTimer@timer+1,c
  3845  002D3A  0E00               	movlw	0
  3846  002D3C  6E23               	movwf	startTimer@timer,c
  3847  002D3E  0E00               	movlw	0
  3848  002D40  6E25               	movwf	startTimer@val,c
  3849  002D42  0E00               	movlw	0
  3850  002D44  6E26               	movwf	startTimer@val+1,c
  3851  002D46  0E00               	movlw	0
  3852  002D48  6E27               	movwf	startTimer@val+2,c
  3853  002D4A  0E00               	movlw	0
  3854  002D4C  6E28               	movwf	startTimer@val+3,c
  3855  002D4E  EC49  F01D         	call	_startTimer	;wreg free
  3856  002D52  0012               	return		;funcret
  3857  002D54                     __end_of_initServo:
  3858                           	opt stack 0
  3859                           tblptru	equ	0xFF8
  3860                           tblptrh	equ	0xFF7
  3861                           tblptrl	equ	0xFF6
  3862                           tablat	equ	0xFF5
  3863                           postinc0	equ	0xFEE
  3864                           wreg	equ	0xFE8
  3865                           postdec1	equ	0xFE5
  3866                           fsr1l	equ	0xFE1
  3867                           indf2	equ	0xFDF
  3868                           postinc2	equ	0xFDE
  3869                           postdec2	equ	0xFDD
  3870                           fsr2h	equ	0xFDA
  3871                           fsr2l	equ	0xFD9
  3872                           status	equ	0xFD8
  3873                           
  3874 ;; *************** function _startTimer *****************
  3875 ;; Defined at:
  3876 ;;		line 76 in file "timer.c"
  3877 ;; Parameters:    Size  Location     Type
  3878 ;;  timer           2   34[COMRAM] int 
  3879 ;;  val             4   36[COMRAM] long 
  3880 ;; Auto vars:     Size  Location     Type
  3881 ;;		None
  3882 ;; Return value:  Size  Location     Type
  3883 ;;                  1    wreg      void 
  3884 ;; Registers used:
  3885 ;;		wreg, status,2, status,0
  3886 ;; Tracked objects:
  3887 ;;		On entry : 0/0
  3888 ;;		On exit  : 0/0
  3889 ;;		Unchanged: 0/0
  3890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3891 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3893 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3894 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3895 ;;Total ram usage:        8 bytes
  3896 ;; Hardware stack levels used:    1
  3897 ;; Hardware stack levels required when called:    3
  3898 ;; This function calls:
  3899 ;;		Nothing
  3900 ;; This function is called by:
  3901 ;;		_main
  3902 ;;		_initServo
  3903 ;;		_testFrequency
  3904 ;; This function uses a non-reentrant model
  3905 ;;
  3906                           
  3907                           	psect	text7
  3908  003A92                     __ptext7:
  3909                           	opt stack 0
  3910  003A92                     _startTimer:
  3911                           	opt stack 27
  3912                           
  3913                           ;timer.c: 77: switch(timer){
  3914                           
  3915                           ;incstack = 0
  3916  003A92  D012               	goto	l5098
  3917  003A94                     l466:
  3918                           
  3919                           ;timer.c: 79: TMR0H = val>>8;
  3920  003A94  C026  FFD7         	movff	startTimer@val+1,4055	;volatile
  3921                           
  3922                           ;timer.c: 80: TMR0L = val;
  3923  003A98  C025  FFD6         	movff	startTimer@val,4054	;volatile
  3924                           
  3925                           ;timer.c: 81: T0CON |= 1<<7;
  3926  003A9C  8ED5               	bsf	4053,7,c	;volatile
  3927                           
  3928                           ;timer.c: 82: break;
  3929  003A9E  0012               	return	
  3930  003AA0                     l468:
  3931                           
  3932                           ;timer.c: 84: TMR1H = val>>8;
  3933  003AA0  C026  FFCF         	movff	startTimer@val+1,4047	;volatile
  3934                           
  3935                           ;timer.c: 85: TMR1L = val;
  3936  003AA4  C025  FFCE         	movff	startTimer@val,4046	;volatile
  3937                           
  3938                           ;timer.c: 86: T1CON |= 1<<0;
  3939  003AA8  80CD               	bsf	4045,0,c	;volatile
  3940                           
  3941                           ;timer.c: 87: break;
  3942  003AAA  0012               	return	
  3943  003AAC                     l469:
  3944                           
  3945                           ;timer.c: 89: TMR3H = val>>8;
  3946  003AAC  C026  FFB3         	movff	startTimer@val+1,4019	;volatile
  3947                           
  3948                           ;timer.c: 90: TMR3L = val;
  3949  003AB0  C025  FFB2         	movff	startTimer@val,4018	;volatile
  3950                           
  3951                           ;timer.c: 91: T3CON |= 1<<0;
  3952  003AB4  80B1               	bsf	4017,0,c	;volatile
  3953                           
  3954                           ;timer.c: 92: }
  3955  003AB6  0012               	return	
  3956  003AB8                     l5098:
  3957  003AB8  C023  F029         	movff	startTimer@timer,??_startTimer
  3958  003ABC  C024  F02A         	movff	startTimer@timer+1,??_startTimer+1
  3959                           
  3960                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3961                           ; Switch size 1, requested type "space"
  3962                           ; Number of cases is 1, Range of values is 0 to 0
  3963                           ; switch strategies available:
  3964                           ; Name         Instructions Cycles
  3965                           ; simple_byte            4     3 (average)
  3966                           ;	Chosen strategy is simple_byte
  3967  003AC0  502A               	movf	??_startTimer+1,w,c
  3968  003AC2  0A00               	xorlw	0	; case 0
  3969  003AC4  A4D8               	btfss	status,2,c
  3970  003AC6  0012               	return	
  3971                           
  3972                           ; Switch size 1, requested type "space"
  3973                           ; Number of cases is 3, Range of values is 0 to 3
  3974                           ; switch strategies available:
  3975                           ; Name         Instructions Cycles
  3976                           ; simple_byte           10     6 (average)
  3977                           ;	Chosen strategy is simple_byte
  3978  003AC8  5029               	movf	??_startTimer,w,c
  3979  003ACA  0A00               	xorlw	0	; case 0
  3980  003ACC  B4D8               	btfsc	status,2,c
  3981  003ACE  D7E2               	goto	l466
  3982  003AD0  0A01               	xorlw	1	; case 1
  3983  003AD2  B4D8               	btfsc	status,2,c
  3984  003AD4  D7E5               	goto	l468
  3985  003AD6  0A02               	xorlw	2	; case 3
  3986  003AD8  A4D8               	btfss	status,2,c
  3987  003ADA  0012               	return	
  3988  003ADC  D7E7               	goto	l469
  3989  003ADE                     __end_of_startTimer:
  3990                           	opt stack 0
  3991                           tblptru	equ	0xFF8
  3992                           tblptrh	equ	0xFF7
  3993                           tblptrl	equ	0xFF6
  3994                           tablat	equ	0xFF5
  3995                           postinc0	equ	0xFEE
  3996                           wreg	equ	0xFE8
  3997                           postdec1	equ	0xFE5
  3998                           fsr1l	equ	0xFE1
  3999                           indf2	equ	0xFDF
  4000                           postinc2	equ	0xFDE
  4001                           postdec2	equ	0xFDD
  4002                           fsr2h	equ	0xFDA
  4003                           fsr2l	equ	0xFD9
  4004                           status	equ	0xFD8
  4005                           
  4006 ;; *************** function _setAngle *****************
  4007 ;; Defined at:
  4008 ;;		line 44 in file "servo.c"
  4009 ;; Parameters:    Size  Location     Type
  4010 ;;  motor           2   84[BANK0 ] PTR int 
  4011 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
  4012 ;;  angle           2   86[BANK0 ] int 
  4013 ;; Auto vars:     Size  Location     Type
  4014 ;;  i               2   92[BANK0 ] int 
  4015 ;;  period          2   90[BANK0 ] unsigned int 
  4016 ;; Return value:  Size  Location     Type
  4017 ;;                  1    wreg      void 
  4018 ;; Registers used:
  4019 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4020 ;; Tracked objects:
  4021 ;;		On entry : 0/0
  4022 ;;		On exit  : 0/0
  4023 ;;		Unchanged: 0/0
  4024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4025 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4026 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4027 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4028 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4029 ;;Total ram usage:       10 bytes
  4030 ;; Hardware stack levels used:    1
  4031 ;; Hardware stack levels required when called:    6
  4032 ;; This function calls:
  4033 ;;		_angleToPulse
  4034 ;; This function is called by:
  4035 ;;		_sortBattery
  4036 ;;		_initServo
  4037 ;; This function uses a non-reentrant model
  4038 ;;
  4039                           
  4040                           	psect	text8
  4041  002D54                     __ptext8:
  4042                           	opt stack 0
  4043  002D54                     _setAngle:
  4044                           	opt stack 23
  4045                           
  4046                           ;servo.c: 45: unsigned int period = 50000;
  4047                           
  4048                           ;incstack = 0
  4049  002D54  0EC3               	movlw	195
  4050  002D56  0100               	movlb	0	; () banked
  4051  002D58  6FDB               	movwf	(setAngle@period+1)& (0+255),b
  4052  002D5A  0E50               	movlw	80
  4053  002D5C  6FDA               	movwf	setAngle@period& (0+255),b
  4054                           
  4055                           ;servo.c: 46: for(int i = 0; i < n; i++){
  4056  002D5E  0E00               	movlw	0
  4057  002D60  0100               	movlb	0	; () banked
  4058  002D62  6FDD               	movwf	(setAngle@i+1)& (0+255),b
  4059  002D64  0E00               	movlw	0
  4060  002D66  6FDC               	movwf	setAngle@i& (0+255),b
  4061  002D68  D03F               	goto	l7228
  4062  002D6A                     l7220:
  4063                           
  4064                           ; BSR set to: 0
  4065                           ;servo.c: 47: if(servos[i] == motor){
  4066  002D6A  90D8               	bcf	status,0,c
  4067  002D6C  0100               	movlb	0	; () banked
  4068  002D6E  35DC               	rlcf	setAngle@i& (0+255),w,b
  4069  002D70  6ED9               	movwf	fsr2l,c
  4070  002D72  0100               	movlb	0	; () banked
  4071  002D74  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
  4072  002D76  6EDA               	movwf	fsr2h,c
  4073  002D78  0E40               	movlw	low _servos
  4074  002D7A  26D9               	addwf	fsr2l,f,c
  4075  002D7C  0E01               	movlw	high _servos
  4076  002D7E  22DA               	addwfc	fsr2h,f,c
  4077  002D80  0100               	movlb	0	; () banked
  4078  002D82  51D4               	movf	setAngle@motor& (0+255),w,b
  4079  002D84  18DE               	xorwf	postinc2,w,c
  4080  002D86  E11C               	bnz	l7224
  4081  002D88  0100               	movlb	0	; () banked
  4082  002D8A  51D5               	movf	(setAngle@motor+1)& (0+255),w,b
  4083  002D8C  18DE               	xorwf	postinc2,w,c
  4084  002D8E  A4D8               	btfss	status,2,c
  4085  002D90  D017               	goto	l7224
  4086                           
  4087                           ; BSR set to: 0
  4088                           ;servo.c: 48: pulse[i] = angleToPulse(angle);
  4089  002D92  C0D6  F0BD         	movff	setAngle@angle,angleToPulse@angle
  4090  002D96  C0D7  F0BE         	movff	setAngle@angle+1,angleToPulse@angle+1
  4091  002D9A  EC5E  F011         	call	_angleToPulse	;wreg free
  4092  002D9E  90D8               	bcf	status,0,c
  4093  002DA0  0100               	movlb	0	; () banked
  4094  002DA2  35DC               	rlcf	setAngle@i& (0+255),w,b
  4095  002DA4  6ED9               	movwf	fsr2l,c
  4096  002DA6  0100               	movlb	0	; () banked
  4097  002DA8  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
  4098  002DAA  6EDA               	movwf	fsr2h,c
  4099  002DAC  0E38               	movlw	low _pulse
  4100  002DAE  26D9               	addwf	fsr2l,f,c
  4101  002DB0  0E01               	movlw	high _pulse
  4102  002DB2  22DA               	addwfc	fsr2h,f,c
  4103  002DB4  0100               	movlb	0	; () banked
  4104  002DB6  C0BD  FFDE         	movff	?_angleToPulse,postinc2
  4105  002DBA  0100               	movlb	0	; () banked
  4106  002DBC  C0BE  FFDD         	movff	?_angleToPulse+1,postdec2
  4107  002DC0                     l7224:
  4108                           
  4109                           ; BSR set to: 0
  4110                           ;servo.c: 49: }
  4111                           ;servo.c: 50: period-=pulse[i];
  4112  002DC0  90D8               	bcf	status,0,c
  4113  002DC2  0100               	movlb	0	; () banked
  4114  002DC4  35DC               	rlcf	setAngle@i& (0+255),w,b
  4115  002DC6  6ED9               	movwf	fsr2l,c
  4116  002DC8  0100               	movlb	0	; () banked
  4117  002DCA  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
  4118  002DCC  6EDA               	movwf	fsr2h,c
  4119  002DCE  0E38               	movlw	low _pulse
  4120  002DD0  26D9               	addwf	fsr2l,f,c
  4121  002DD2  0E01               	movlw	high _pulse
  4122  002DD4  22DA               	addwfc	fsr2h,f,c
  4123  002DD6  50DE               	movf	postinc2,w,c
  4124  002DD8  0100               	movlb	0	; () banked
  4125  002DDA  5FDA               	subwf	setAngle@period& (0+255),f,b
  4126  002DDC  50DD               	movf	postdec2,w,c
  4127  002DDE  0100               	movlb	0	; () banked
  4128  002DE0  5BDB               	subwfb	(setAngle@period+1)& (0+255),f,b
  4129                           
  4130                           ; BSR set to: 0
  4131  002DE2  0100               	movlb	0	; () banked
  4132  002DE4  4BDC               	infsnz	setAngle@i& (0+255),f,b
  4133  002DE6  2BDD               	incf	(setAngle@i+1)& (0+255),f,b
  4134  002DE8                     l7228:
  4135                           
  4136                           ; BSR set to: 0
  4137  002DE8  5058               	movf	_n,w,c
  4138  002DEA  0100               	movlb	0	; () banked
  4139  002DEC  5DDC               	subwf	setAngle@i& (0+255),w,b
  4140  002DEE  0100               	movlb	0	; () banked
  4141  002DF0  51DD               	movf	(setAngle@i+1)& (0+255),w,b
  4142  002DF2  0A80               	xorlw	128
  4143  002DF4  0100               	movlb	0	; () banked
  4144  002DF6  6FD8               	movwf	??_setAngle& (0+255),b
  4145  002DF8  5059               	movf	_n+1,w,c
  4146  002DFA  0A80               	xorlw	128
  4147  002DFC  0100               	movlb	0	; () banked
  4148  002DFE  59D8               	subwfb	??_setAngle& (0+255),w,b
  4149  002E00  A0D8               	btfss	status,0,c
  4150  002E02  D7B3               	goto	l7220
  4151                           
  4152                           ; BSR set to: 0
  4153                           ;servo.c: 51: }
  4154                           ;servo.c: 52: pulse[n] = period;
  4155                           
  4156                           ; BSR set to: 0
  4157  002E04  90D8               	bcf	status,0,c
  4158  002E06  3458               	rlcf	_n,w,c
  4159  002E08  6ED9               	movwf	fsr2l,c
  4160  002E0A  3459               	rlcf	_n+1,w,c
  4161  002E0C  6EDA               	movwf	fsr2h,c
  4162  002E0E  0E38               	movlw	low _pulse
  4163  002E10  26D9               	addwf	fsr2l,f,c
  4164  002E12  0E01               	movlw	high _pulse
  4165  002E14  22DA               	addwfc	fsr2h,f,c
  4166  002E16  C0DA  FFDE         	movff	setAngle@period,postinc2
  4167  002E1A  C0DB  FFDD         	movff	setAngle@period+1,postdec2
  4168                           
  4169                           ; BSR set to: 0
  4170  002E1E  0012               	return		;funcret
  4171  002E20                     __end_of_setAngle:
  4172                           	opt stack 0
  4173                           tblptru	equ	0xFF8
  4174                           tblptrh	equ	0xFF7
  4175                           tblptrl	equ	0xFF6
  4176                           tablat	equ	0xFF5
  4177                           postinc0	equ	0xFEE
  4178                           wreg	equ	0xFE8
  4179                           postdec1	equ	0xFE5
  4180                           fsr1l	equ	0xFE1
  4181                           indf2	equ	0xFDF
  4182                           postinc2	equ	0xFDE
  4183                           postdec2	equ	0xFDD
  4184                           fsr2h	equ	0xFDA
  4185                           fsr2l	equ	0xFD9
  4186                           status	equ	0xFD8
  4187                           
  4188 ;; *************** function _angleToPulse *****************
  4189 ;; Defined at:
  4190 ;;		line 36 in file "servo.c"
  4191 ;; Parameters:    Size  Location     Type
  4192 ;;  angle           2   61[BANK0 ] int 
  4193 ;; Auto vars:     Size  Location     Type
  4194 ;;  a000            4   80[BANK0 ] long 
  4195 ;;  a180            4   73[BANK0 ] long 
  4196 ;;  offset          4   69[BANK0 ] long 
  4197 ;; Return value:  Size  Location     Type
  4198 ;;                  4   61[BANK0 ] long 
  4199 ;; Registers used:
  4200 ;;		wreg, status,2, status,0, cstack
  4201 ;; Tracked objects:
  4202 ;;		On entry : 0/0
  4203 ;;		On exit  : 0/0
  4204 ;;		Unchanged: 0/0
  4205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4206 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4207 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4208 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4209 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4210 ;;Total ram usage:       23 bytes
  4211 ;; Hardware stack levels used:    1
  4212 ;; Hardware stack levels required when called:    5
  4213 ;; This function calls:
  4214 ;;		___altoft
  4215 ;;		___awtoft
  4216 ;;		___ftadd
  4217 ;;		___ftdiv
  4218 ;;		___ftmul
  4219 ;;		___fttol
  4220 ;; This function is called by:
  4221 ;;		_setAngle
  4222 ;; This function uses a non-reentrant model
  4223 ;;
  4224                           
  4225                           	psect	text9
  4226  0022BC                     __ptext9:
  4227                           	opt stack 0
  4228  0022BC                     _angleToPulse:
  4229                           	opt stack 23
  4230                           
  4231                           ;servo.c: 37: long offset = -600;
  4232                           
  4233                           ; BSR set to: 0
  4234                           ;incstack = 0
  4235  0022BC  0EA8               	movlw	168
  4236  0022BE  0100               	movlb	0	; () banked
  4237  0022C0  6FC5               	movwf	angleToPulse@offset& (0+255),b
  4238  0022C2  0EFD               	movlw	253
  4239  0022C4  6FC6               	movwf	(angleToPulse@offset+1)& (0+255),b
  4240  0022C6  0EFF               	movlw	255
  4241  0022C8  6FC7               	movwf	(angleToPulse@offset+2)& (0+255),b
  4242  0022CA  0EFF               	movlw	255
  4243  0022CC  6FC8               	movwf	(angleToPulse@offset+3)& (0+255),b
  4244                           
  4245                           ;servo.c: 38: long a000 = 1250;
  4246  0022CE  0EE2               	movlw	226
  4247  0022D0  0100               	movlb	0	; () banked
  4248  0022D2  6FD0               	movwf	angleToPulse@a000& (0+255),b
  4249  0022D4  0E04               	movlw	4
  4250  0022D6  6FD1               	movwf	(angleToPulse@a000+1)& (0+255),b
  4251  0022D8  0E00               	movlw	0
  4252  0022DA  6FD2               	movwf	(angleToPulse@a000+2)& (0+255),b
  4253  0022DC  0E00               	movlw	0
  4254  0022DE  6FD3               	movwf	(angleToPulse@a000+3)& (0+255),b
  4255                           
  4256                           ;servo.c: 39: long a180 = 6250;
  4257  0022E0  0E6A               	movlw	106
  4258  0022E2  0100               	movlb	0	; () banked
  4259  0022E4  6FC9               	movwf	angleToPulse@a180& (0+255),b
  4260  0022E6  0E18               	movlw	24
  4261  0022E8  6FCA               	movwf	(angleToPulse@a180+1)& (0+255),b
  4262  0022EA  0E00               	movlw	0
  4263  0022EC  6FCB               	movwf	(angleToPulse@a180+2)& (0+255),b
  4264  0022EE  0E00               	movlw	0
  4265  0022F0  6FCC               	movwf	(angleToPulse@a180+3)& (0+255),b
  4266                           
  4267                           ; BSR set to: 0
  4268                           ;servo.c: 41: return a000 + angle/180.0*(a180-a000) + offset;
  4269  0022F2  C0D0  F0C1         	movff	angleToPulse@a000,??_angleToPulse
  4270  0022F6  C0D1  F0C2         	movff	angleToPulse@a000+1,??_angleToPulse+1
  4271  0022FA  C0D2  F0C3         	movff	angleToPulse@a000+2,??_angleToPulse+2
  4272  0022FE  C0D3  F0C4         	movff	angleToPulse@a000+3,??_angleToPulse+3
  4273  002302  0100               	movlb	0	; () banked
  4274  002304  1FC1               	comf	??_angleToPulse& (0+255),f,b
  4275  002306  1FC2               	comf	(??_angleToPulse+1)& (0+255),f,b
  4276  002308  1FC3               	comf	(??_angleToPulse+2)& (0+255),f,b
  4277  00230A  1FC4               	comf	(??_angleToPulse+3)& (0+255),f,b
  4278  00230C  2BC1               	incf	??_angleToPulse& (0+255),f,b
  4279  00230E  0E00               	movlw	0
  4280  002310  23C2               	addwfc	(??_angleToPulse+1)& (0+255),f,b
  4281  002312  23C3               	addwfc	(??_angleToPulse+2)& (0+255),f,b
  4282  002314  23C4               	addwfc	(??_angleToPulse+3)& (0+255),f,b
  4283  002316  0100               	movlb	0	; () banked
  4284  002318  51C9               	movf	angleToPulse@a180& (0+255),w,b
  4285  00231A  0100               	movlb	0	; () banked
  4286  00231C  25C1               	addwf	??_angleToPulse& (0+255),w,b
  4287  00231E  6E2B               	movwf	___altoft@c,c
  4288  002320  0100               	movlb	0	; () banked
  4289  002322  51CA               	movf	(angleToPulse@a180+1)& (0+255),w,b
  4290  002324  0100               	movlb	0	; () banked
  4291  002326  21C2               	addwfc	(??_angleToPulse+1)& (0+255),w,b
  4292  002328  6E2C               	movwf	___altoft@c+1,c
  4293  00232A  0100               	movlb	0	; () banked
  4294  00232C  51CB               	movf	(angleToPulse@a180+2)& (0+255),w,b
  4295  00232E  0100               	movlb	0	; () banked
  4296  002330  21C3               	addwfc	(??_angleToPulse+2)& (0+255),w,b
  4297  002332  6E2D               	movwf	___altoft@c+2,c
  4298  002334  0100               	movlb	0	; () banked
  4299  002336  51CC               	movf	(angleToPulse@a180+3)& (0+255),w,b
  4300  002338  0100               	movlb	0	; () banked
  4301  00233A  21C4               	addwfc	(??_angleToPulse+3)& (0+255),w,b
  4302  00233C  6E2E               	movwf	___altoft@c+3,c
  4303  00233E  ECF2  F01A         	call	___altoft	;wreg free
  4304  002342  C02B  F08C         	movff	?___altoft,___ftmul@f2
  4305  002346  C02C  F08D         	movff	?___altoft+1,___ftmul@f2+1
  4306  00234A  C02D  F08E         	movff	?___altoft+2,___ftmul@f2+2
  4307  00234E  0E00               	movlw	0
  4308  002350  6E38               	movwf	___ftdiv@f2,c
  4309  002352  0E34               	movlw	52
  4310  002354  6E39               	movwf	___ftdiv@f2+1,c
  4311  002356  0E43               	movlw	67
  4312  002358  6E3A               	movwf	___ftdiv@f2+2,c
  4313  00235A  C0BD  F02B         	movff	angleToPulse@angle,___awtoft@c
  4314  00235E  C0BE  F02C         	movff	angleToPulse@angle+1,___awtoft@c+1
  4315  002362  EC3F  F01E         	call	___awtoft	;wreg free
  4316  002366  C02B  F035         	movff	?___awtoft,___ftdiv@f1
  4317  00236A  C02C  F036         	movff	?___awtoft+1,___ftdiv@f1+1
  4318  00236E  C02D  F037         	movff	?___awtoft+2,___ftdiv@f1+2
  4319  002372  ECD9  F013         	call	___ftdiv	;wreg free
  4320  002376  C035  F089         	movff	?___ftdiv,___ftmul@f1
  4321  00237A  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
  4322  00237E  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
  4323  002382  ECAF  F010         	call	___ftmul	;wreg free
  4324  002386  C089  F0A5         	movff	?___ftmul,___ftadd@f2
  4325  00238A  C08A  F0A6         	movff	?___ftmul+1,___ftadd@f2+1
  4326  00238E  C08B  F0A7         	movff	?___ftmul+2,___ftadd@f2+2
  4327  002392  C0D0  F02B         	movff	angleToPulse@a000,___altoft@c
  4328  002396  C0D1  F02C         	movff	angleToPulse@a000+1,___altoft@c+1
  4329  00239A  C0D2  F02D         	movff	angleToPulse@a000+2,___altoft@c+2
  4330  00239E  C0D3  F02E         	movff	angleToPulse@a000+3,___altoft@c+3
  4331  0023A2  ECF2  F01A         	call	___altoft	;wreg free
  4332  0023A6  C02B  F0A2         	movff	?___altoft,___ftadd@f1
  4333  0023AA  C02C  F0A3         	movff	?___altoft+1,___ftadd@f1+1
  4334  0023AE  C02D  F0A4         	movff	?___altoft+2,___ftadd@f1+2
  4335  0023B2  EC6E  F00D         	call	___ftadd	;wreg free
  4336  0023B6  C0A2  F0CD         	movff	?___ftadd,_angleToPulse$1434
  4337  0023BA  C0A3  F0CE         	movff	?___ftadd+1,_angleToPulse$1434+1
  4338  0023BE  C0A4  F0CF         	movff	?___ftadd+2,_angleToPulse$1434+2
  4339                           
  4340                           ;servo.c: 41: return a000 + angle/180.0*(a180-a000) + offset;
  4341  0023C2  C0C5  F02B         	movff	angleToPulse@offset,___altoft@c
  4342  0023C6  C0C6  F02C         	movff	angleToPulse@offset+1,___altoft@c+1
  4343  0023CA  C0C7  F02D         	movff	angleToPulse@offset+2,___altoft@c+2
  4344  0023CE  C0C8  F02E         	movff	angleToPulse@offset+3,___altoft@c+3
  4345  0023D2  ECF2  F01A         	call	___altoft	;wreg free
  4346  0023D6  C02B  F0A5         	movff	?___altoft,___ftadd@f2
  4347  0023DA  C02C  F0A6         	movff	?___altoft+1,___ftadd@f2+1
  4348  0023DE  C02D  F0A7         	movff	?___altoft+2,___ftadd@f2+2
  4349  0023E2  C0CD  F0A2         	movff	_angleToPulse$1434,___ftadd@f1
  4350  0023E6  C0CE  F0A3         	movff	_angleToPulse$1434+1,___ftadd@f1+1
  4351  0023EA  C0CF  F0A4         	movff	_angleToPulse$1434+2,___ftadd@f1+2
  4352  0023EE  EC6E  F00D         	call	___ftadd	;wreg free
  4353  0023F2  C0A2  F0AE         	movff	?___ftadd,___fttol@f1
  4354  0023F6  C0A3  F0AF         	movff	?___ftadd+1,___fttol@f1+1
  4355  0023FA  C0A4  F0B0         	movff	?___ftadd+2,___fttol@f1+2
  4356  0023FE  EC0A  F012         	call	___fttol	;wreg free
  4357  002402  C0AE  F0BD         	movff	?___fttol,?_angleToPulse
  4358  002406  C0AF  F0BE         	movff	?___fttol+1,?_angleToPulse+1
  4359  00240A  C0B0  F0BF         	movff	?___fttol+2,?_angleToPulse+2
  4360  00240E  C0B1  F0C0         	movff	?___fttol+3,?_angleToPulse+3
  4361  002412  0012               	return	
  4362  002414                     __end_of_angleToPulse:
  4363                           	opt stack 0
  4364                           tblptru	equ	0xFF8
  4365                           tblptrh	equ	0xFF7
  4366                           tblptrl	equ	0xFF6
  4367                           tablat	equ	0xFF5
  4368                           postinc0	equ	0xFEE
  4369                           wreg	equ	0xFE8
  4370                           postdec1	equ	0xFE5
  4371                           fsr1l	equ	0xFE1
  4372                           indf2	equ	0xFDF
  4373                           postinc2	equ	0xFDE
  4374                           postdec2	equ	0xFDD
  4375                           fsr2h	equ	0xFDA
  4376                           fsr2l	equ	0xFD9
  4377                           status	equ	0xFD8
  4378                           
  4379 ;; *************** function ___altoft *****************
  4380 ;; Defined at:
  4381 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  4382 ;; Parameters:    Size  Location     Type
  4383 ;;  c               4   42[COMRAM] long 
  4384 ;; Auto vars:     Size  Location     Type
  4385 ;;  sign            1   51[COMRAM] unsigned char 
  4386 ;;  exp             1   50[COMRAM] unsigned char 
  4387 ;; Return value:  Size  Location     Type
  4388 ;;                  3   42[COMRAM] float 
  4389 ;; Registers used:
  4390 ;;		wreg, status,2, status,0, cstack
  4391 ;; Tracked objects:
  4392 ;;		On entry : 0/0
  4393 ;;		On exit  : 0/0
  4394 ;;		Unchanged: 0/0
  4395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4396 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4397 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4398 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4399 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4400 ;;Total ram usage:       10 bytes
  4401 ;; Hardware stack levels used:    1
  4402 ;; Hardware stack levels required when called:    4
  4403 ;; This function calls:
  4404 ;;		___ftpack
  4405 ;; This function is called by:
  4406 ;;		_sortBattery
  4407 ;;		_angleToPulse
  4408 ;; This function uses a non-reentrant model
  4409 ;;
  4410                           
  4411                           	psect	text10
  4412  0035E4                     __ptext10:
  4413                           	opt stack 0
  4414  0035E4                     ___altoft:
  4415                           	opt stack 23
  4416                           
  4417                           ;incstack = 0
  4418  0035E4  0E00               	movlw	0
  4419  0035E6  6E34               	movwf	___altoft@sign,c
  4420  0035E8  0E8E               	movlw	142
  4421  0035EA  6E33               	movwf	___altoft@exp,c
  4422  0035EC  AE2E               	btfss	___altoft@c+3,7,c
  4423  0035EE  D011               	goto	l6876
  4424  0035F0  1E2E               	comf	___altoft@c+3,f,c
  4425  0035F2  1E2D               	comf	___altoft@c+2,f,c
  4426  0035F4  1E2C               	comf	___altoft@c+1,f,c
  4427  0035F6  6C2B               	negf	___altoft@c,c
  4428  0035F8  0E00               	movlw	0
  4429  0035FA  222C               	addwfc	___altoft@c+1,f,c
  4430  0035FC  222D               	addwfc	___altoft@c+2,f,c
  4431  0035FE  222E               	addwfc	___altoft@c+3,f,c
  4432  003600  0E01               	movlw	1
  4433  003602  6E34               	movwf	___altoft@sign,c
  4434  003604  D006               	goto	l6876
  4435  003606                     l6874:
  4436  003606  90D8               	bcf	status,0,c
  4437  003608  322E               	rrcf	___altoft@c+3,f,c
  4438  00360A  322D               	rrcf	___altoft@c+2,f,c
  4439  00360C  322C               	rrcf	___altoft@c+1,f,c
  4440  00360E  322B               	rrcf	___altoft@c,f,c
  4441  003610  2A33               	incf	___altoft@exp,f,c
  4442  003612                     l6876:
  4443  003612  0E00               	movlw	0
  4444  003614  142B               	andwf	___altoft@c,w,c
  4445  003616  6E2F               	movwf	??___altoft& (0+255),c
  4446  003618  0E00               	movlw	0
  4447  00361A  142C               	andwf	___altoft@c+1,w,c
  4448  00361C  6E30               	movwf	(??___altoft+1)& (0+255),c
  4449  00361E  0E00               	movlw	0
  4450  003620  142D               	andwf	___altoft@c+2,w,c
  4451  003622  6E31               	movwf	(??___altoft+2)& (0+255),c
  4452  003624  0EFF               	movlw	255
  4453  003626  142E               	andwf	___altoft@c+3,w,c
  4454  003628  6E32               	movwf	(??___altoft+3)& (0+255),c
  4455  00362A  502F               	movf	??___altoft,w,c
  4456  00362C  1030               	iorwf	??___altoft+1,w,c
  4457  00362E  1031               	iorwf	??___altoft+2,w,c
  4458  003630  1032               	iorwf	??___altoft+3,w,c
  4459  003632  A4D8               	btfss	status,2,c
  4460  003634  D7E8               	goto	l6874
  4461  003636  C02B  F023         	movff	___altoft@c,___ftpack@arg
  4462  00363A  C02C  F024         	movff	___altoft@c+1,___ftpack@arg+1
  4463  00363E  C02D  F025         	movff	___altoft@c+2,___ftpack@arg+2
  4464  003642  C033  F026         	movff	___altoft@exp,___ftpack@exp
  4465  003646  C034  F027         	movff	___altoft@sign,___ftpack@sign
  4466  00364A  ECED  F018         	call	___ftpack	;wreg free
  4467  00364E  C023  F02B         	movff	?___ftpack,?___altoft
  4468  003652  C024  F02C         	movff	?___ftpack+1,?___altoft+1
  4469  003656  C025  F02D         	movff	?___ftpack+2,?___altoft+2
  4470  00365A  0012               	return	
  4471  00365C                     __end_of___altoft:
  4472                           	opt stack 0
  4473                           tblptru	equ	0xFF8
  4474                           tblptrh	equ	0xFF7
  4475                           tblptrl	equ	0xFF6
  4476                           tablat	equ	0xFF5
  4477                           postinc0	equ	0xFEE
  4478                           wreg	equ	0xFE8
  4479                           postdec1	equ	0xFE5
  4480                           fsr1l	equ	0xFE1
  4481                           indf2	equ	0xFDF
  4482                           postinc2	equ	0xFDE
  4483                           postdec2	equ	0xFDD
  4484                           fsr2h	equ	0xFDA
  4485                           fsr2l	equ	0xFD9
  4486                           status	equ	0xFD8
  4487                           
  4488 ;; *************** function _initTimer *****************
  4489 ;; Defined at:
  4490 ;;		line 52 in file "timer.c"
  4491 ;; Parameters:    Size  Location     Type
  4492 ;;  timer           2   34[COMRAM] int 
  4493 ;; Auto vars:     Size  Location     Type
  4494 ;;		None
  4495 ;; Return value:  Size  Location     Type
  4496 ;;                  1    wreg      void 
  4497 ;; Registers used:
  4498 ;;		wreg, status,2, status,0
  4499 ;; Tracked objects:
  4500 ;;		On entry : 0/0
  4501 ;;		On exit  : 0/0
  4502 ;;		Unchanged: 0/0
  4503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4504 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4506 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4507 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4508 ;;Total ram usage:        4 bytes
  4509 ;; Hardware stack levels used:    1
  4510 ;; Hardware stack levels required when called:    3
  4511 ;; This function calls:
  4512 ;;		Nothing
  4513 ;; This function is called by:
  4514 ;;		_main
  4515 ;;		_initServo
  4516 ;;		_testFrequency
  4517 ;; This function uses a non-reentrant model
  4518 ;;
  4519                           
  4520                           	psect	text11
  4521  003B76                     __ptext11:
  4522                           	opt stack 0
  4523  003B76                     _initTimer:
  4524                           	opt stack 27
  4525                           
  4526                           ;timer.c: 53: switch(timer){
  4527                           
  4528                           ;incstack = 0
  4529  003B76  D00F               	goto	l5084
  4530  003B78                     l5066:
  4531                           
  4532                           ;timer.c: 55: T0CON = 0;
  4533  003B78  0E00               	movlw	0
  4534  003B7A  6ED5               	movwf	4053,c	;volatile
  4535                           
  4536                           ;timer.c: 56: T0CON |= 1<<3;
  4537  003B7C  86D5               	bsf	4053,3,c	;volatile
  4538                           
  4539                           ;timer.c: 58: TMR0IE = 1;
  4540  003B7E  8AF2               	bsf	intcon,5,c	;volatile
  4541                           
  4542                           ;timer.c: 59: break;
  4543  003B80  D01C               	goto	l459
  4544  003B82                     l5072:
  4545                           
  4546                           ;timer.c: 61: T1CON = 0;
  4547  003B82  0E00               	movlw	0
  4548  003B84  6ECD               	movwf	4045,c	;volatile
  4549                           
  4550                           ;timer.c: 63: T1CON |= 0b11<<4;
  4551  003B86  0E30               	movlw	48
  4552  003B88  12CD               	iorwf	4045,f,c	;volatile
  4553                           
  4554                           ;timer.c: 64: TMR1IE = 1;
  4555  003B8A  809D               	bsf	3997,0,c	;volatile
  4556                           
  4557                           ;timer.c: 65: break;
  4558  003B8C  D016               	goto	l459
  4559  003B8E                     l5078:
  4560                           
  4561                           ;timer.c: 67: T3CON = 0;
  4562  003B8E  0E00               	movlw	0
  4563  003B90  6EB1               	movwf	4017,c	;volatile
  4564                           
  4565                           ;timer.c: 68: TMR3IE = 1;
  4566  003B92  82A0               	bsf	4000,1,c	;volatile
  4567                           
  4568                           ;timer.c: 70: }
  4569                           
  4570                           ;timer.c: 69: break;
  4571  003B94  D012               	goto	l459
  4572  003B96                     l5084:
  4573  003B96  C023  F025         	movff	initTimer@timer,??_initTimer
  4574  003B9A  C024  F026         	movff	initTimer@timer+1,??_initTimer+1
  4575                           
  4576                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4577                           ; Switch size 1, requested type "space"
  4578                           ; Number of cases is 1, Range of values is 0 to 0
  4579                           ; switch strategies available:
  4580                           ; Name         Instructions Cycles
  4581                           ; simple_byte            4     3 (average)
  4582                           ;	Chosen strategy is simple_byte
  4583  003B9E  5026               	movf	??_initTimer+1,w,c
  4584  003BA0  0A00               	xorlw	0	; case 0
  4585  003BA2  A4D8               	btfss	status,2,c
  4586  003BA4  D00A               	goto	l459
  4587                           
  4588                           ; Switch size 1, requested type "space"
  4589                           ; Number of cases is 3, Range of values is 0 to 3
  4590                           ; switch strategies available:
  4591                           ; Name         Instructions Cycles
  4592                           ; simple_byte           10     6 (average)
  4593                           ;	Chosen strategy is simple_byte
  4594  003BA6  5025               	movf	??_initTimer,w,c
  4595  003BA8  0A00               	xorlw	0	; case 0
  4596  003BAA  B4D8               	btfsc	status,2,c
  4597  003BAC  D7E5               	goto	l5066
  4598  003BAE  0A01               	xorlw	1	; case 1
  4599  003BB0  B4D8               	btfsc	status,2,c
  4600  003BB2  D7E7               	goto	l5072
  4601  003BB4  0A02               	xorlw	2	; case 3
  4602  003BB6  B4D8               	btfsc	status,2,c
  4603  003BB8  D7EA               	goto	l5078
  4604  003BBA                     l459:
  4605                           
  4606                           ;timer.c: 71: PEIE = 1;
  4607  003BBA  8CF2               	bsf	intcon,6,c	;volatile
  4608                           
  4609                           ;timer.c: 72: (INTCONbits.GIE = 1);
  4610  003BBC  8EF2               	bsf	intcon,7,c	;volatile
  4611  003BBE  0012               	return		;funcret
  4612  003BC0                     __end_of_initTimer:
  4613                           	opt stack 0
  4614                           tblptru	equ	0xFF8
  4615                           tblptrh	equ	0xFF7
  4616                           tblptrl	equ	0xFF6
  4617                           tablat	equ	0xFF5
  4618                           intcon	equ	0xFF2
  4619                           postinc0	equ	0xFEE
  4620                           wreg	equ	0xFE8
  4621                           postdec1	equ	0xFE5
  4622                           fsr1l	equ	0xFE1
  4623                           indf2	equ	0xFDF
  4624                           postinc2	equ	0xFDE
  4625                           postdec2	equ	0xFDD
  4626                           fsr2h	equ	0xFDA
  4627                           fsr2l	equ	0xFD9
  4628                           status	equ	0xFD8
  4629                           
  4630 ;; *************** function _debug *****************
  4631 ;; Defined at:
  4632 ;;		line 102 in file "main.c"
  4633 ;; Parameters:    Size  Location     Type
  4634 ;;		None
  4635 ;; Auto vars:     Size  Location     Type
  4636 ;;  i               2   21[BANK1 ] int 
  4637 ;;  i               2   23[BANK1 ] int 
  4638 ;;  run             2   16[BANK1 ] PTR int 
  4639 ;;		 -> readPastRun@data(14), 
  4640 ;;  run            14    0[BANK1 ] int [7]
  4641 ;;  n               2   14[BANK1 ] int 
  4642 ;;  key             1   20[BANK1 ] unsigned char 
  4643 ;; Return value:  Size  Location     Type
  4644 ;;                  1    wreg      void 
  4645 ;; Registers used:
  4646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4647 ;; Tracked objects:
  4648 ;;		On entry : 0/0
  4649 ;;		On exit  : 0/0
  4650 ;;		Unchanged: 0/0
  4651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4653 ;;      Locals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4654 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4655 ;;      Totals:         0       2      25       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4656 ;;Total ram usage:       27 bytes
  4657 ;; Hardware stack levels used:    1
  4658 ;; Hardware stack levels required when called:   10
  4659 ;; This function calls:
  4660 ;;		___lwmod
  4661 ;;		_eepromRead
  4662 ;;		_initLCD
  4663 ;;		_lcdClear
  4664 ;;		_pinSetup
  4665 ;;		_printf
  4666 ;;		_readKeypad
  4667 ;;		_readPastRun
  4668 ;;		_saveNewRun
  4669 ;;		_showInterface
  4670 ;; This function is called by:
  4671 ;;		_main
  4672 ;; This function uses a non-reentrant model
  4673 ;;
  4674                           
  4675                           	psect	text12
  4676  001FA4                     __ptext12:
  4677                           	opt stack 0
  4678  001FA4                     _debug:
  4679                           	opt stack 20
  4680                           
  4681                           ;main.c: 104: pinSetup();
  4682                           
  4683                           ;incstack = 0
  4684  001FA4  EC03  F01E         	call	_pinSetup	;wreg free
  4685                           
  4686                           ;main.c: 105: initLCD();
  4687  001FA8  ECE0  F01D         	call	_initLCD	;wreg free
  4688  001FAC                     l7260:
  4689                           
  4690                           ;main.c: 108: char key = readKeypad();
  4691  001FAC  EC73  F01E         	call	_readKeypad	;wreg free
  4692  001FB0  0101               	movlb	1	; () banked
  4693  001FB2  6F14               	movwf	debug@key& (0+255),b
  4694                           
  4695                           ; BSR set to: 1
  4696                           ;main.c: 109: printf("s");
  4697  001FB4  0EFD               	movlw	low STR_1
  4698  001FB6  0100               	movlb	0	; () banked
  4699  001FB8  6FBD               	movwf	printf@f& (0+255),b
  4700  001FBA  0EFF               	movlw	high STR_1
  4701  001FBC  0100               	movlb	0	; () banked
  4702  001FBE  6FBE               	movwf	(printf@f+1)& (0+255),b
  4703  001FC0  EC09  F000         	call	_printf	;wreg free
  4704                           
  4705                           ;main.c: 110: if(key == '1'){
  4706  001FC4  0E31               	movlw	49
  4707  001FC6  0101               	movlb	1	; () banked
  4708  001FC8  1914               	xorwf	debug@key& (0+255),w,b
  4709  001FCA  A4D8               	btfss	status,2,c
  4710  001FCC  D06B               	goto	l7286
  4711                           
  4712                           ; BSR set to: 1
  4713                           ;main.c: 111: int n = (eepromRead(0)+1)%0xffff;
  4714  001FCE  0E00               	movlw	0
  4715  001FD0  6E37               	movwf	eepromRead@address,c
  4716  001FD2  0E00               	movlw	0
  4717  001FD4  6E38               	movwf	eepromRead@address+1,c
  4718  001FD6  0E00               	movlw	0
  4719  001FD8  6E39               	movwf	eepromRead@address+2,c
  4720  001FDA  0E00               	movlw	0
  4721  001FDC  6E3A               	movwf	eepromRead@address+3,c
  4722  001FDE  ECED  F01E         	call	_eepromRead	;wreg free
  4723  001FE2  0E01               	movlw	1
  4724  001FE4  2437               	addwf	?_eepromRead,w,c
  4725  001FE6  0100               	movlb	0	; () banked
  4726  001FE8  6F80               	movwf	___lwmod@dividend& (0+255),b
  4727  001FEA  0E00               	movlw	0
  4728  001FEC  2038               	addwfc	?_eepromRead+1,w,c
  4729  001FEE  0100               	movlb	0	; () banked
  4730  001FF0  6F81               	movwf	(___lwmod@dividend+1)& (0+255),b
  4731  001FF2  0EFF               	movlw	255
  4732  001FF4  0100               	movlb	0	; () banked
  4733  001FF6  6F83               	movwf	(___lwmod@divisor+1)& (0+255),b
  4734  001FF8  6982               	setf	___lwmod@divisor& (0+255),b
  4735  001FFA  EC69  F01C         	call	___lwmod	;wreg free
  4736  001FFE  C080  F10E         	movff	?___lwmod,debug@n
  4737  002002  C081  F10F         	movff	?___lwmod+1,debug@n+1
  4738                           
  4739                           ;main.c: 112: int run[7];
  4740                           ;main.c: 113: for(int i = 0; i < 7; i++)run[i] = i+n;
  4741  002006  0E00               	movlw	0
  4742  002008  0101               	movlb	1	; () banked
  4743  00200A  6F18               	movwf	(debug@i+1)& (0+255),b
  4744  00200C  0E00               	movlw	0
  4745  00200E  6F17               	movwf	debug@i& (0+255),b
  4746  002010                     l7270:
  4747                           
  4748                           ; BSR set to: 1
  4749  002010  0101               	movlb	1	; () banked
  4750  002012  BF18               	btfsc	(debug@i+1)& (0+255),7,b
  4751  002014  D008               	goto	l7274
  4752  002016  0101               	movlb	1	; () banked
  4753  002018  5118               	movf	(debug@i+1)& (0+255),w,b
  4754  00201A  E124               	bnz	l7280
  4755  00201C  0E07               	movlw	7
  4756  00201E  0101               	movlb	1	; () banked
  4757  002020  5D17               	subwf	debug@i& (0+255),w,b
  4758  002022  B0D8               	btfsc	status,0,c
  4759  002024  D01F               	goto	l7280
  4760  002026                     l7274:
  4761                           
  4762                           ; BSR set to: 1
  4763  002026  0101               	movlb	1	; () banked
  4764  002028  510E               	movf	debug@n& (0+255),w,b
  4765  00202A  0101               	movlb	1	; () banked
  4766  00202C  2517               	addwf	debug@i& (0+255),w,b
  4767  00202E  0100               	movlb	0	; () banked
  4768  002030  6FF9               	movwf	??_debug& (0+255),b
  4769  002032  0101               	movlb	1	; () banked
  4770  002034  510F               	movf	(debug@n+1)& (0+255),w,b
  4771  002036  0101               	movlb	1	; () banked
  4772  002038  2118               	addwfc	(debug@i+1)& (0+255),w,b
  4773  00203A  0100               	movlb	0	; () banked
  4774  00203C  6FFA               	movwf	(??_debug+1)& (0+255),b
  4775  00203E  90D8               	bcf	status,0,c
  4776  002040  0101               	movlb	1	; () banked
  4777  002042  3517               	rlcf	debug@i& (0+255),w,b
  4778  002044  6ED9               	movwf	fsr2l,c
  4779  002046  0101               	movlb	1	; () banked
  4780  002048  3518               	rlcf	(debug@i+1)& (0+255),w,b
  4781  00204A  6EDA               	movwf	fsr2h,c
  4782  00204C  0E00               	movlw	low debug@run
  4783  00204E  26D9               	addwf	fsr2l,f,c
  4784  002050  0E01               	movlw	high debug@run
  4785  002052  22DA               	addwfc	fsr2h,f,c
  4786  002054  C0F9  FFDE         	movff	??_debug,postinc2
  4787  002058  C0FA  FFDD         	movff	??_debug+1,postdec2
  4788                           
  4789                           ; BSR set to: 1
  4790  00205C  0101               	movlb	1	; () banked
  4791  00205E  4B17               	infsnz	debug@i& (0+255),f,b
  4792  002060  2B18               	incf	(debug@i+1)& (0+255),f,b
  4793  002062  D7D6               	goto	l7270
  4794  002064                     l7280:
  4795                           
  4796                           ; BSR set to: 1
  4797                           ;main.c: 114: saveNewRun(run);
  4798  002064  0E00               	movlw	low debug@run
  4799  002066  0100               	movlb	0	; () banked
  4800  002068  6F89               	movwf	saveNewRun@data& (0+255),b
  4801  00206A  0E01               	movlw	high debug@run
  4802  00206C  0100               	movlb	0	; () banked
  4803  00206E  6F8A               	movwf	(saveNewRun@data+1)& (0+255),b
  4804  002070  ECCB  F015         	call	_saveNewRun	;wreg free
  4805                           
  4806                           ;main.c: 115: lcdClear();
  4807  002074  EC0F  F01F         	call	_lcdClear	;wreg free
  4808                           
  4809                           ;main.c: 116: printf("n: %d",eepromRead(0));
  4810  002078  0EF3               	movlw	low STR_2
  4811  00207A  0100               	movlb	0	; () banked
  4812  00207C  6FBD               	movwf	printf@f& (0+255),b
  4813  00207E  0EFF               	movlw	high STR_2
  4814  002080  0100               	movlb	0	; () banked
  4815  002082  6FBE               	movwf	(printf@f+1)& (0+255),b
  4816  002084  0E00               	movlw	0
  4817  002086  6E37               	movwf	eepromRead@address,c
  4818  002088  0E00               	movlw	0
  4819  00208A  6E38               	movwf	eepromRead@address+1,c
  4820  00208C  0E00               	movlw	0
  4821  00208E  6E39               	movwf	eepromRead@address+2,c
  4822  002090  0E00               	movlw	0
  4823  002092  6E3A               	movwf	eepromRead@address+3,c
  4824  002094  ECED  F01E         	call	_eepromRead	;wreg free
  4825  002098  C037  F0BF         	movff	?_eepromRead,?_printf+2
  4826  00209C  C038  F0C0         	movff	?_eepromRead+1,?_printf+3
  4827  0020A0  EC09  F000         	call	_printf	;wreg free
  4828  0020A4                     l7286:
  4829                           
  4830                           ;main.c: 117: }
  4831                           ;main.c: 118: if(key == '2'){
  4832  0020A4  0E32               	movlw	50
  4833  0020A6  0101               	movlb	1	; () banked
  4834  0020A8  1914               	xorwf	debug@key& (0+255),w,b
  4835  0020AA  A4D8               	btfss	status,2,c
  4836  0020AC  D047               	goto	l7306
  4837                           
  4838                           ; BSR set to: 1
  4839                           ;main.c: 119: int* run = readPastRun(eepromRead(0));
  4840  0020AE  0E00               	movlw	0
  4841  0020B0  6E37               	movwf	eepromRead@address,c
  4842  0020B2  0E00               	movlw	0
  4843  0020B4  6E38               	movwf	eepromRead@address+1,c
  4844  0020B6  0E00               	movlw	0
  4845  0020B8  6E39               	movwf	eepromRead@address+2,c
  4846  0020BA  0E00               	movlw	0
  4847  0020BC  6E3A               	movwf	eepromRead@address+3,c
  4848  0020BE  ECED  F01E         	call	_eepromRead	;wreg free
  4849  0020C2  C037  F112         	movff	?_eepromRead,_debug$1432
  4850  0020C6  C038  F113         	movff	?_eepromRead+1,_debug$1432+1
  4851                           
  4852                           ;main.c: 119: int* run = readPastRun(eepromRead(0));
  4853  0020CA  C112  F080         	movff	_debug$1432,readPastRun@run
  4854  0020CE  C113  F081         	movff	_debug$1432+1,readPastRun@run+1
  4855  0020D2  EC9A  F019         	call	_readPastRun	;wreg free
  4856  0020D6  C080  F110         	movff	?_readPastRun,debug@run_286
  4857  0020DA  C081  F111         	movff	?_readPastRun+1,debug@run_286+1
  4858                           
  4859                           ;main.c: 120: lcdClear();
  4860  0020DE  EC0F  F01F         	call	_lcdClear	;wreg free
  4861                           
  4862                           ;main.c: 121: for(int i = 0; i < 7; i ++)
  4863  0020E2  0E00               	movlw	0
  4864  0020E4  0101               	movlb	1	; () banked
  4865  0020E6  6F16               	movwf	(debug@i_287+1)& (0+255),b
  4866  0020E8  0E00               	movlw	0
  4867  0020EA  6F15               	movwf	debug@i_287& (0+255),b
  4868  0020EC                     l7296:
  4869                           
  4870                           ; BSR set to: 1
  4871  0020EC  0101               	movlb	1	; () banked
  4872  0020EE  BF16               	btfsc	(debug@i_287+1)& (0+255),7,b
  4873  0020F0  D008               	goto	l7300
  4874  0020F2  0101               	movlb	1	; () banked
  4875  0020F4  5116               	movf	(debug@i_287+1)& (0+255),w,b
  4876  0020F6  E122               	bnz	l7306
  4877  0020F8  0E07               	movlw	7
  4878  0020FA  0101               	movlb	1	; () banked
  4879  0020FC  5D15               	subwf	debug@i_287& (0+255),w,b
  4880  0020FE  B0D8               	btfsc	status,0,c
  4881  002100  D01D               	goto	l7306
  4882  002102                     l7300:
  4883                           
  4884                           ; BSR set to: 1
  4885                           ;main.c: 122: printf("%d,",run[i]);
  4886  002102  0EF9               	movlw	low STR_3
  4887  002104  0100               	movlb	0	; () banked
  4888  002106  6FBD               	movwf	printf@f& (0+255),b
  4889  002108  0EFF               	movlw	high STR_3
  4890  00210A  0100               	movlb	0	; () banked
  4891  00210C  6FBE               	movwf	(printf@f+1)& (0+255),b
  4892  00210E  90D8               	bcf	status,0,c
  4893  002110  0101               	movlb	1	; () banked
  4894  002112  3515               	rlcf	debug@i_287& (0+255),w,b
  4895  002114  6ED9               	movwf	fsr2l,c
  4896  002116  0101               	movlb	1	; () banked
  4897  002118  3516               	rlcf	(debug@i_287+1)& (0+255),w,b
  4898  00211A  6EDA               	movwf	fsr2h,c
  4899  00211C  0101               	movlb	1	; () banked
  4900  00211E  5110               	movf	debug@run_286& (0+255),w,b
  4901  002120  26D9               	addwf	fsr2l,f,c
  4902  002122  0101               	movlb	1	; () banked
  4903  002124  5111               	movf	(debug@run_286+1)& (0+255),w,b
  4904  002126  22DA               	addwfc	fsr2h,f,c
  4905  002128  CFDE F0BF          	movff	postinc2,?_printf+2
  4906  00212C  CFDD F0C0          	movff	postdec2,?_printf+3
  4907  002130  EC09  F000         	call	_printf	;wreg free
  4908  002134  0101               	movlb	1	; () banked
  4909  002136  4B15               	infsnz	debug@i_287& (0+255),f,b
  4910  002138  2B16               	incf	(debug@i_287+1)& (0+255),f,b
  4911  00213A  D7D8               	goto	l7296
  4912  00213C                     l7306:
  4913                           
  4914                           ; BSR set to: 1
  4915                           ;main.c: 124: }
  4916                           ;main.c: 125: if(key == '3')break;
  4917  00213C  0E33               	movlw	51
  4918  00213E  0101               	movlb	1	; () banked
  4919  002140  1914               	xorwf	debug@key& (0+255),w,b
  4920  002142  B4D8               	btfsc	status,2,c
  4921  002144  D009               	goto	l7312
  4922                           
  4923                           ; BSR set to: 1
  4924                           ;main.c: 126: printf("f");
  4925                           
  4926                           ; BSR set to: 1
  4927                           
  4928                           ; BSR set to: 1
  4929  002146  0ED3               	movlw	low (STR_9+13)
  4930  002148  0100               	movlb	0	; () banked
  4931  00214A  6FBD               	movwf	printf@f& (0+255),b
  4932  00214C  0EFF               	movlw	high (STR_9+13)
  4933  00214E  0100               	movlb	0	; () banked
  4934  002150  6FBE               	movwf	(printf@f+1)& (0+255),b
  4935  002152  EC09  F000         	call	_printf	;wreg free
  4936  002156  D72A               	goto	l7260
  4937  002158                     l7312:
  4938                           
  4939                           ;main.c: 127: }
  4940                           ;main.c: 129: showInterface();
  4941  002158  EC3E  F018         	call	_showInterface	;wreg free
  4942  00215C                     l149:
  4943  00215C  D7FF               	goto	l149
  4944  00215E                     __end_of_debug:
  4945                           	opt stack 0
  4946                           tblptru	equ	0xFF8
  4947                           tblptrh	equ	0xFF7
  4948                           tblptrl	equ	0xFF6
  4949                           tablat	equ	0xFF5
  4950                           intcon	equ	0xFF2
  4951                           postinc0	equ	0xFEE
  4952                           wreg	equ	0xFE8
  4953                           postdec1	equ	0xFE5
  4954                           fsr1l	equ	0xFE1
  4955                           indf2	equ	0xFDF
  4956                           postinc2	equ	0xFDE
  4957                           postdec2	equ	0xFDD
  4958                           fsr2h	equ	0xFDA
  4959                           fsr2l	equ	0xFD9
  4960                           status	equ	0xFD8
  4961                           
  4962 ;; *************** function _showInterface *****************
  4963 ;; Defined at:
  4964 ;;		line 17 in file "interface.c"
  4965 ;; Parameters:    Size  Location     Type
  4966 ;;		None
  4967 ;; Auto vars:     Size  Location     Type
  4968 ;;  run             2  118[BANK0 ] PTR int 
  4969 ;;		 -> readPastRun@data(14), 
  4970 ;;  n               2  116[BANK0 ] int 
  4971 ;;  key             1  120[BANK0 ] unsigned char 
  4972 ;; Return value:  Size  Location     Type
  4973 ;;                  1    wreg      void 
  4974 ;; Registers used:
  4975 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4976 ;; Tracked objects:
  4977 ;;		On entry : 0/0
  4978 ;;		On exit  : 0/0
  4979 ;;		Unchanged: 0/0
  4980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4982 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4983 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4984 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4985 ;;Total ram usage:        6 bytes
  4986 ;; Hardware stack levels used:    1
  4987 ;; Hardware stack levels required when called:    9
  4988 ;; This function calls:
  4989 ;;		_readPastRun
  4990 ;;		_showDateTime
  4991 ;;		_showMainMenu
  4992 ;;		_showRunMenu
  4993 ;;		_showRunSelect
  4994 ;;		_showRunStats
  4995 ;;		_showRunTime
  4996 ;; This function is called by:
  4997 ;;		_debug
  4998 ;;		_main
  4999 ;; This function uses a non-reentrant model
  5000 ;;
  5001                           
  5002                           	psect	text13
  5003  00307C                     __ptext13:
  5004                           	opt stack 0
  5005  00307C                     _showInterface:
  5006                           	opt stack 21
  5007  00307C                     
  5008                           ;interface.c: 23: showDateTime();
  5009  00307C  EC5B  F01E         	call	_showDateTime	;wreg free
  5010  003080                     l635:
  5011                           
  5012                           ;interface.c: 26: key = showMainMenu();
  5013  003080  EC21  F01D         	call	_showMainMenu	;wreg free
  5014  003084  0100               	movlb	0	; () banked
  5015  003086  6FF8               	movwf	showInterface@key& (0+255),b
  5016                           
  5017                           ; BSR set to: 0
  5018                           ;interface.c: 28: if(key == 'C'){
  5019  003088  0E43               	movlw	67
  5020  00308A  0100               	movlb	0	; () banked
  5021  00308C  19F8               	xorwf	showInterface@key& (0+255),w,b
  5022  00308E  A4D8               	btfss	status,2,c
  5023  003090  D042               	goto	l7144
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;interface.c: 30: int n = showRunSelect();
  5027  003092  EC37  F01C         	call	_showRunSelect	;wreg free
  5028  003096  0100               	movlb	0	; () banked
  5029  003098  6FF3               	movwf	??_showInterface& (0+255),b
  5030  00309A  0100               	movlb	0	; () banked
  5031  00309C  51F3               	movf	??_showInterface& (0+255),w,b
  5032  00309E  0100               	movlb	0	; () banked
  5033  0030A0  6FF4               	movwf	showInterface@n& (0+255),b
  5034  0030A2  6BF5               	clrf	(showInterface@n+1)& (0+255),b
  5035                           
  5036                           ; BSR set to: 0
  5037                           ;interface.c: 32: if(key == '*')continue;
  5038  0030A4  0E2A               	movlw	42
  5039  0030A6  0100               	movlb	0	; () banked
  5040  0030A8  19F8               	xorwf	showInterface@key& (0+255),w,b
  5041  0030AA  B4D8               	btfsc	status,2,c
  5042  0030AC  D7E9               	goto	l635
  5043                           
  5044                           ; BSR set to: 0
  5045                           ;interface.c: 34: int* run = readPastRun( n - '1');
  5046                           
  5047                           ; BSR set to: 0
  5048                           
  5049                           ; BSR set to: 0
  5050  0030AE  0ECF               	movlw	207
  5051  0030B0  0100               	movlb	0	; () banked
  5052  0030B2  25F4               	addwf	showInterface@n& (0+255),w,b
  5053  0030B4  0100               	movlb	0	; () banked
  5054  0030B6  6F80               	movwf	readPastRun@run& (0+255),b
  5055  0030B8  0EFF               	movlw	255
  5056  0030BA  0100               	movlb	0	; () banked
  5057  0030BC  21F5               	addwfc	(showInterface@n+1)& (0+255),w,b
  5058  0030BE  0100               	movlb	0	; () banked
  5059  0030C0  6F81               	movwf	(readPastRun@run+1)& (0+255),b
  5060  0030C2  EC9A  F019         	call	_readPastRun	;wreg free
  5061  0030C6  C080  F0F6         	movff	?_readPastRun,showInterface@run
  5062  0030CA  C081  F0F7         	movff	?_readPastRun+1,showInterface@run+1
  5063  0030CE                     l7130:
  5064                           
  5065                           ;interface.c: 38: key = showRunMenu(n);
  5066  0030CE  0100               	movlb	0	; () banked
  5067  0030D0  51F4               	movf	showInterface@n& (0+255),w,b
  5068  0030D2  EC9A  F01C         	call	_showRunMenu
  5069  0030D6  0100               	movlb	0	; () banked
  5070  0030D8  6FF8               	movwf	showInterface@key& (0+255),b
  5071                           
  5072                           ; BSR set to: 0
  5073                           ;interface.c: 40: if(key == 'A') showRunTime(run);
  5074  0030DA  0E41               	movlw	65
  5075  0030DC  0100               	movlb	0	; () banked
  5076  0030DE  19F8               	xorwf	showInterface@key& (0+255),w,b
  5077  0030E0  A4D8               	btfss	status,2,c
  5078  0030E2  D007               	goto	l7136
  5079                           
  5080                           ; BSR set to: 0
  5081  0030E4  C0F6  F0EB         	movff	showInterface@run,showRunTime@run
  5082  0030E8  C0F7  F0EC         	movff	showInterface@run+1,showRunTime@run+1
  5083  0030EC  EC96  F018         	call	_showRunTime	;wreg free
  5084  0030F0  D7EE               	goto	l7130
  5085  0030F2                     l7136:
  5086                           
  5087                           ;interface.c: 41: else if(key == 'B') showRunStats(run);
  5088  0030F2  0E42               	movlw	66
  5089  0030F4  0100               	movlb	0	; () banked
  5090  0030F6  19F8               	xorwf	showInterface@key& (0+255),w,b
  5091  0030F8  A4D8               	btfss	status,2,c
  5092  0030FA  D007               	goto	l7140
  5093                           
  5094                           ; BSR set to: 0
  5095  0030FC  C0F6  F0EB         	movff	showInterface@run,showRunStats@run
  5096  003100  C0F7  F0EC         	movff	showInterface@run+1,showRunStats@run+1
  5097  003104  EC2B  F01A         	call	_showRunStats	;wreg free
  5098  003108  D7E2               	goto	l7130
  5099  00310A                     l7140:
  5100                           
  5101                           ;interface.c: 42: else if(key == '*') break;
  5102  00310A  0E2A               	movlw	42
  5103  00310C  0100               	movlb	0	; () banked
  5104  00310E  19F8               	xorwf	showInterface@key& (0+255),w,b
  5105  003110  B4D8               	btfsc	status,2,c
  5106  003112  D7B6               	goto	l635
  5107  003114  D7DC               	goto	l7130
  5108  003116                     l7144:
  5109                           
  5110                           ; BSR set to: 0
  5111                           ;interface.c: 46: else if(key == 'B') return;
  5112  003116  0E42               	movlw	66
  5113  003118  0100               	movlb	0	; () banked
  5114  00311A  19F8               	xorwf	showInterface@key& (0+255),w,b
  5115  00311C  B4D8               	btfsc	status,2,c
  5116  00311E  0012               	return	
  5117                           
  5118                           ; BSR set to: 0
  5119                           ;interface.c: 47: else if(key == '*') break;
  5120                           
  5121                           ; BSR set to: 0
  5122                           
  5123                           ; BSR set to: 0
  5124                           
  5125                           ; BSR set to: 0
  5126  003120  0E2A               	movlw	42
  5127  003122  0100               	movlb	0	; () banked
  5128  003124  19F8               	xorwf	showInterface@key& (0+255),w,b
  5129  003126  B4D8               	btfsc	status,2,c
  5130  003128  D7A9               	goto	l7118
  5131  00312A  D7AA               	goto	l635
  5132  00312C                     __end_of_showInterface:
  5133                           	opt stack 0
  5134                           tblptru	equ	0xFF8
  5135                           tblptrh	equ	0xFF7
  5136                           tblptrl	equ	0xFF6
  5137                           tablat	equ	0xFF5
  5138                           intcon	equ	0xFF2
  5139                           postinc0	equ	0xFEE
  5140                           wreg	equ	0xFE8
  5141                           postdec1	equ	0xFE5
  5142                           fsr1l	equ	0xFE1
  5143                           indf2	equ	0xFDF
  5144                           postinc2	equ	0xFDE
  5145                           postdec2	equ	0xFDD
  5146                           fsr2h	equ	0xFDA
  5147                           fsr2l	equ	0xFD9
  5148                           status	equ	0xFD8
  5149                           
  5150 ;; *************** function _showRunTime *****************
  5151 ;; Defined at:
  5152 ;;		line 106 in file "interface.c"
  5153 ;; Parameters:    Size  Location     Type
  5154 ;;  run             2  107[BANK0 ] PTR int 
  5155 ;;		 -> readPastRun@data(14), 
  5156 ;; Auto vars:     Size  Location     Type
  5157 ;;  time            3  112[BANK0 ] float 
  5158 ;; Return value:  Size  Location     Type
  5159 ;;                  1    wreg      unsigned char 
  5160 ;; Registers used:
  5161 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5162 ;; Tracked objects:
  5163 ;;		On entry : 0/0
  5164 ;;		On exit  : 0/0
  5165 ;;		Unchanged: 0/0
  5166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5167 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5168 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5169 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5170 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5171 ;;Total ram usage:        8 bytes
  5172 ;; Hardware stack levels used:    1
  5173 ;; Hardware stack levels required when called:    8
  5174 ;; This function calls:
  5175 ;;		___awtoft
  5176 ;;		___ftdiv
  5177 ;;		_lcdClear
  5178 ;;		_printf
  5179 ;;		_readKeypad
  5180 ;; This function is called by:
  5181 ;;		_showInterface
  5182 ;; This function uses a non-reentrant model
  5183 ;;
  5184                           
  5185                           	psect	text14
  5186  00312C                     __ptext14:
  5187                           	opt stack 0
  5188  00312C                     _showRunTime:
  5189                           	opt stack 21
  5190                           
  5191                           ;interface.c: 107: float time = (float)(run[0]<<8 + run[1])/10.0;
  5192                           
  5193                           ; BSR set to: 0
  5194                           ;incstack = 0
  5195  00312C  0100               	movlb	0	; () banked
  5196  00312E  EE20 F002          	lfsr	2,2
  5197  003132  51EB               	movf	showRunTime@run& (0+255),w,b
  5198  003134  26D9               	addwf	fsr2l,f,c
  5199  003136  51EC               	movf	(showRunTime@run+1)& (0+255),w,b
  5200  003138  22DA               	addwfc	fsr2h,f,c
  5201  00313A  50DF               	movf	indf2,w,c
  5202  00313C  0100               	movlb	0	; () banked
  5203  00313E  6FED               	movwf	??_showRunTime& (0+255),b
  5204  003140  0E08               	movlw	8
  5205  003142  0100               	movlb	0	; () banked
  5206  003144  27ED               	addwf	??_showRunTime& (0+255),f,b
  5207  003146  C0EB  FFD9         	movff	showRunTime@run,fsr2l
  5208  00314A  C0EC  FFDA         	movff	showRunTime@run+1,fsr2h
  5209  00314E  CFDE F0EE          	movff	postinc2,??_showRunTime+1
  5210  003152  CFDD F0EF          	movff	postdec2,??_showRunTime+2
  5211  003156  0100               	movlb	0	; () banked
  5212  003158  2BED               	incf	??_showRunTime& (0+255),f,b
  5213  00315A  D004               	goto	u7634
  5214  00315C                     u7635:
  5215  00315C  90D8               	bcf	status,0,c
  5216  00315E  0100               	movlb	0	; () banked
  5217  003160  37EE               	rlcf	(??_showRunTime+1)& (0+255),f,b
  5218  003162  37EF               	rlcf	(??_showRunTime+2)& (0+255),f,b
  5219  003164                     u7634:
  5220  003164  0100               	movlb	0	; () banked
  5221  003166  2FED               	decfsz	??_showRunTime& (0+255),f,b
  5222  003168  D7F9               	goto	u7635
  5223  00316A  C0EE  F02B         	movff	??_showRunTime+1,___awtoft@c
  5224  00316E  C0EF  F02C         	movff	??_showRunTime+2,___awtoft@c+1
  5225  003172  EC3F  F01E         	call	___awtoft	;wreg free
  5226  003176  C02B  F035         	movff	?___awtoft,___ftdiv@f1
  5227  00317A  C02C  F036         	movff	?___awtoft+1,___ftdiv@f1+1
  5228  00317E  C02D  F037         	movff	?___awtoft+2,___ftdiv@f1+2
  5229  003182  0E00               	movlw	0
  5230  003184  6E38               	movwf	___ftdiv@f2,c
  5231  003186  0E20               	movlw	32
  5232  003188  6E39               	movwf	___ftdiv@f2+1,c
  5233  00318A  0E41               	movlw	65
  5234  00318C  6E3A               	movwf	___ftdiv@f2+2,c
  5235  00318E  ECD9  F013         	call	___ftdiv	;wreg free
  5236  003192  C035  F0F0         	movff	?___ftdiv,showRunTime@time
  5237  003196  C036  F0F1         	movff	?___ftdiv+1,showRunTime@time+1
  5238  00319A  C037  F0F2         	movff	?___ftdiv+2,showRunTime@time+2
  5239                           
  5240                           ;interface.c: 109: lcdClear();
  5241  00319E  EC0F  F01F         	call	_lcdClear	;wreg free
  5242                           
  5243                           ;interface.c: 110: printf("time: %.1f sec   \n",time);
  5244  0031A2  0ED0               	movlw	low STR_19
  5245  0031A4  0100               	movlb	0	; () banked
  5246  0031A6  6FBD               	movwf	printf@f& (0+255),b
  5247  0031A8  0EFE               	movlw	high STR_19
  5248  0031AA  0100               	movlb	0	; () banked
  5249  0031AC  6FBE               	movwf	(printf@f+1)& (0+255),b
  5250  0031AE  C0F0  F0BF         	movff	showRunTime@time,?_printf+2
  5251  0031B2  C0F1  F0C0         	movff	showRunTime@time+1,?_printf+3
  5252  0031B6  C0F2  F0C1         	movff	showRunTime@time+2,?_printf+4
  5253  0031BA  EC09  F000         	call	_printf	;wreg free
  5254                           
  5255                           ;interface.c: 111: printf("              *>");
  5256  0031BE  0E4F               	movlw	low STR_20
  5257  0031C0  0100               	movlb	0	; () banked
  5258  0031C2  6FBD               	movwf	printf@f& (0+255),b
  5259  0031C4  0EFF               	movlw	high STR_20
  5260  0031C6  0100               	movlb	0	; () banked
  5261  0031C8  6FBE               	movwf	(printf@f+1)& (0+255),b
  5262  0031CA  EC09  F000         	call	_printf	;wreg free
  5263  0031CE                     l7062:
  5264  0031CE  EC73  F01E         	call	_readKeypad	;wreg free
  5265  0031D2  0A2A               	xorlw	42
  5266  0031D4  B4D8               	btfsc	status,2,c
  5267  0031D6  0012               	return	
  5268  0031D8  D7FA               	goto	l7062
  5269  0031DA                     __end_of_showRunTime:
  5270                           	opt stack 0
  5271                           tblptru	equ	0xFF8
  5272                           tblptrh	equ	0xFF7
  5273                           tblptrl	equ	0xFF6
  5274                           tablat	equ	0xFF5
  5275                           intcon	equ	0xFF2
  5276                           postinc0	equ	0xFEE
  5277                           wreg	equ	0xFE8
  5278                           postdec1	equ	0xFE5
  5279                           fsr1l	equ	0xFE1
  5280                           indf2	equ	0xFDF
  5281                           postinc2	equ	0xFDE
  5282                           postdec2	equ	0xFDD
  5283                           fsr2h	equ	0xFDA
  5284                           fsr2l	equ	0xFD9
  5285                           status	equ	0xFD8
  5286                           
  5287 ;; *************** function ___ftdiv *****************
  5288 ;; Defined at:
  5289 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  5290 ;; Parameters:    Size  Location     Type
  5291 ;;  f1              3   52[COMRAM] float 
  5292 ;;  f2              3   55[COMRAM] float 
  5293 ;; Auto vars:     Size  Location     Type
  5294 ;;  f3              3    4[BANK0 ] float 
  5295 ;;  sign            1    8[BANK0 ] unsigned char 
  5296 ;;  exp             1    7[BANK0 ] unsigned char 
  5297 ;;  cntr            1    3[BANK0 ] unsigned char 
  5298 ;; Return value:  Size  Location     Type
  5299 ;;                  3   52[COMRAM] float 
  5300 ;; Registers used:
  5301 ;;		wreg, status,2, status,0, cstack
  5302 ;; Tracked objects:
  5303 ;;		On entry : 0/0
  5304 ;;		On exit  : 0/0
  5305 ;;		Unchanged: 0/0
  5306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5307 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5308 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5309 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5310 ;;      Totals:         6       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5311 ;;Total ram usage:       15 bytes
  5312 ;; Hardware stack levels used:    1
  5313 ;; Hardware stack levels required when called:    4
  5314 ;; This function calls:
  5315 ;;		___ftpack
  5316 ;; This function is called by:
  5317 ;;		_sortBattery
  5318 ;;		_angleToPulse
  5319 ;;		_showRunTime
  5320 ;; This function uses a non-reentrant model
  5321 ;;
  5322                           
  5323                           	psect	text15
  5324  0027B2                     __ptext15:
  5325                           	opt stack 0
  5326  0027B2                     ___ftdiv:
  5327                           	opt stack 23
  5328                           
  5329                           ;incstack = 0
  5330  0027B2  C037  F080         	movff	___ftdiv@f1+2,??___ftdiv
  5331  0027B6  0100               	movlb	0	; () banked
  5332  0027B8  6B81               	clrf	(??___ftdiv+1)& (0+255),b
  5333  0027BA  6B82               	clrf	(??___ftdiv+2)& (0+255),b
  5334  0027BC  3436               	rlcf	___ftdiv@f1+1,w,c
  5335  0027BE  0100               	movlb	0	; () banked
  5336  0027C0  3780               	rlcf	??___ftdiv& (0+255),f,b
  5337  0027C2  E301               	bnc	u7391
  5338  0027C4  8181               	bsf	(??___ftdiv+1)& (0+255),0,b
  5339  0027C6                     u7391:
  5340  0027C6  0100               	movlb	0	; () banked
  5341  0027C8  5180               	movf	??___ftdiv& (0+255),w,b
  5342  0027CA  0100               	movlb	0	; () banked
  5343  0027CC  6F87               	movwf	___ftdiv@exp& (0+255),b
  5344  0027CE  0100               	movlb	0	; () banked
  5345  0027D0  5187               	movf	___ftdiv@exp& (0+255),w,b
  5346  0027D2  A4D8               	btfss	status,2,c
  5347  0027D4  D007               	goto	l6888
  5348                           
  5349                           ; BSR set to: 0
  5350  0027D6  0E00               	movlw	0
  5351  0027D8  6E35               	movwf	?___ftdiv,c
  5352  0027DA  0E00               	movlw	0
  5353  0027DC  6E36               	movwf	?___ftdiv+1,c
  5354  0027DE  0E00               	movlw	0
  5355  0027E0  6E37               	movwf	?___ftdiv+2,c
  5356                           
  5357                           ; BSR set to: 0
  5358  0027E2  0012               	return	
  5359  0027E4                     l6888:
  5360                           
  5361                           ; BSR set to: 0
  5362  0027E4  C03A  F080         	movff	___ftdiv@f2+2,??___ftdiv
  5363  0027E8  0100               	movlb	0	; () banked
  5364  0027EA  6B81               	clrf	(??___ftdiv+1)& (0+255),b
  5365  0027EC  6B82               	clrf	(??___ftdiv+2)& (0+255),b
  5366  0027EE  3439               	rlcf	___ftdiv@f2+1,w,c
  5367  0027F0  0100               	movlb	0	; () banked
  5368  0027F2  3780               	rlcf	??___ftdiv& (0+255),f,b
  5369  0027F4  E301               	bnc	u7411
  5370  0027F6  8181               	bsf	(??___ftdiv+1)& (0+255),0,b
  5371  0027F8                     u7411:
  5372  0027F8  0100               	movlb	0	; () banked
  5373  0027FA  5180               	movf	??___ftdiv& (0+255),w,b
  5374  0027FC  0100               	movlb	0	; () banked
  5375  0027FE  6F88               	movwf	___ftdiv@sign& (0+255),b
  5376  002800  0100               	movlb	0	; () banked
  5377  002802  5188               	movf	___ftdiv@sign& (0+255),w,b
  5378  002804  A4D8               	btfss	status,2,c
  5379  002806  D007               	goto	l6894
  5380                           
  5381                           ; BSR set to: 0
  5382  002808  0E00               	movlw	0
  5383  00280A  6E35               	movwf	?___ftdiv,c
  5384  00280C  0E00               	movlw	0
  5385  00280E  6E36               	movwf	?___ftdiv+1,c
  5386  002810  0E00               	movlw	0
  5387  002812  6E37               	movwf	?___ftdiv+2,c
  5388                           
  5389                           ; BSR set to: 0
  5390  002814  0012               	return	
  5391  002816                     l6894:
  5392                           
  5393                           ; BSR set to: 0
  5394  002816  0E00               	movlw	0
  5395  002818  0100               	movlb	0	; () banked
  5396  00281A  6F84               	movwf	___ftdiv@f3& (0+255),b
  5397  00281C  0E00               	movlw	0
  5398  00281E  0100               	movlb	0	; () banked
  5399  002820  6F85               	movwf	(___ftdiv@f3+1)& (0+255),b
  5400  002822  0E00               	movlw	0
  5401  002824  0100               	movlb	0	; () banked
  5402  002826  6F86               	movwf	(___ftdiv@f3+2)& (0+255),b
  5403                           
  5404                           ; BSR set to: 0
  5405  002828  0100               	movlb	0	; () banked
  5406  00282A  5188               	movf	___ftdiv@sign& (0+255),w,b
  5407  00282C  0F89               	addlw	137
  5408  00282E  0100               	movlb	0	; () banked
  5409  002830  5F87               	subwf	___ftdiv@exp& (0+255),f,b
  5410                           
  5411                           ; BSR set to: 0
  5412  002832  C037  F088         	movff	___ftdiv@f1+2,___ftdiv@sign
  5413                           
  5414                           ; BSR set to: 0
  5415  002836  503A               	movf	___ftdiv@f2+2,w,c
  5416  002838  0100               	movlb	0	; () banked
  5417  00283A  1B88               	xorwf	___ftdiv@sign& (0+255),f,b
  5418                           
  5419                           ; BSR set to: 0
  5420  00283C  0E80               	movlw	128
  5421  00283E  0100               	movlb	0	; () banked
  5422  002840  1788               	andwf	___ftdiv@sign& (0+255),f,b
  5423                           
  5424                           ; BSR set to: 0
  5425  002842  8E36               	bsf	___ftdiv@f1+1,7,c
  5426                           
  5427                           ; BSR set to: 0
  5428  002844  0EFF               	movlw	255
  5429  002846  1635               	andwf	___ftdiv@f1,f,c
  5430  002848  0EFF               	movlw	255
  5431  00284A  1636               	andwf	___ftdiv@f1+1,f,c
  5432  00284C  0E00               	movlw	0
  5433  00284E  1637               	andwf	___ftdiv@f1+2,f,c
  5434                           
  5435                           ; BSR set to: 0
  5436  002850  8E39               	bsf	___ftdiv@f2+1,7,c
  5437                           
  5438                           ; BSR set to: 0
  5439  002852  0EFF               	movlw	255
  5440  002854  1638               	andwf	___ftdiv@f2,f,c
  5441  002856  0EFF               	movlw	255
  5442  002858  1639               	andwf	___ftdiv@f2+1,f,c
  5443  00285A  0E00               	movlw	0
  5444  00285C  163A               	andwf	___ftdiv@f2+2,f,c
  5445                           
  5446                           ; BSR set to: 0
  5447  00285E  0E18               	movlw	24
  5448  002860  0100               	movlb	0	; () banked
  5449  002862  6F83               	movwf	___ftdiv@cntr& (0+255),b
  5450  002864                     l6914:
  5451                           
  5452                           ; BSR set to: 0
  5453  002864  0100               	movlb	0	; () banked
  5454  002866  90D8               	bcf	status,0,c
  5455  002868  3784               	rlcf	___ftdiv@f3& (0+255),f,b
  5456  00286A  3785               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  5457  00286C  3786               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  5458                           
  5459                           ; BSR set to: 0
  5460  00286E  5038               	movf	___ftdiv@f2,w,c
  5461  002870  5C35               	subwf	___ftdiv@f1,w,c
  5462  002872  5039               	movf	___ftdiv@f2+1,w,c
  5463  002874  5836               	subwfb	___ftdiv@f1+1,w,c
  5464  002876  503A               	movf	___ftdiv@f2+2,w,c
  5465  002878  5837               	subwfb	___ftdiv@f1+2,w,c
  5466  00287A  A0D8               	btfss	status,0,c
  5467  00287C  D008               	goto	l1169
  5468                           
  5469                           ; BSR set to: 0
  5470  00287E  5038               	movf	___ftdiv@f2,w,c
  5471  002880  5E35               	subwf	___ftdiv@f1,f,c
  5472  002882  5039               	movf	___ftdiv@f2+1,w,c
  5473  002884  5A36               	subwfb	___ftdiv@f1+1,f,c
  5474  002886  503A               	movf	___ftdiv@f2+2,w,c
  5475  002888  5A37               	subwfb	___ftdiv@f1+2,f,c
  5476                           
  5477                           ; BSR set to: 0
  5478  00288A  0100               	movlb	0	; () banked
  5479  00288C  8184               	bsf	___ftdiv@f3& (0+255),0,b
  5480  00288E                     l1169:
  5481                           
  5482                           ; BSR set to: 0
  5483  00288E  90D8               	bcf	status,0,c
  5484  002890  3635               	rlcf	___ftdiv@f1,f,c
  5485  002892  3636               	rlcf	___ftdiv@f1+1,f,c
  5486  002894  3637               	rlcf	___ftdiv@f1+2,f,c
  5487                           
  5488                           ; BSR set to: 0
  5489  002896  0100               	movlb	0	; () banked
  5490  002898  2F83               	decfsz	___ftdiv@cntr& (0+255),f,b
  5491  00289A  D7E4               	goto	l6914
  5492                           
  5493                           ; BSR set to: 0
  5494                           
  5495                           ; BSR set to: 0
  5496  00289C  C084  F023         	movff	___ftdiv@f3,___ftpack@arg
  5497  0028A0  C085  F024         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5498  0028A4  C086  F025         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5499  0028A8  C087  F026         	movff	___ftdiv@exp,___ftpack@exp
  5500  0028AC  C088  F027         	movff	___ftdiv@sign,___ftpack@sign
  5501  0028B0  ECED  F018         	call	___ftpack	;wreg free
  5502  0028B4  C023  F035         	movff	?___ftpack,?___ftdiv
  5503  0028B8  C024  F036         	movff	?___ftpack+1,?___ftdiv+1
  5504  0028BC  C025  F037         	movff	?___ftpack+2,?___ftdiv+2
  5505  0028C0  0012               	return	
  5506  0028C2                     __end_of___ftdiv:
  5507                           	opt stack 0
  5508                           tblptru	equ	0xFF8
  5509                           tblptrh	equ	0xFF7
  5510                           tblptrl	equ	0xFF6
  5511                           tablat	equ	0xFF5
  5512                           intcon	equ	0xFF2
  5513                           postinc0	equ	0xFEE
  5514                           wreg	equ	0xFE8
  5515                           postdec1	equ	0xFE5
  5516                           fsr1l	equ	0xFE1
  5517                           indf2	equ	0xFDF
  5518                           postinc2	equ	0xFDE
  5519                           postdec2	equ	0xFDD
  5520                           fsr2h	equ	0xFDA
  5521                           fsr2l	equ	0xFD9
  5522                           status	equ	0xFD8
  5523                           
  5524 ;; *************** function ___awtoft *****************
  5525 ;; Defined at:
  5526 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  5527 ;; Parameters:    Size  Location     Type
  5528 ;;  c               2   42[COMRAM] int 
  5529 ;; Auto vars:     Size  Location     Type
  5530 ;;  sign            1   45[COMRAM] unsigned char 
  5531 ;; Return value:  Size  Location     Type
  5532 ;;                  3   42[COMRAM] float 
  5533 ;; Registers used:
  5534 ;;		wreg, status,2, status,0, cstack
  5535 ;; Tracked objects:
  5536 ;;		On entry : 0/0
  5537 ;;		On exit  : 0/0
  5538 ;;		Unchanged: 0/0
  5539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5540 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5541 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5543 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5544 ;;Total ram usage:        4 bytes
  5545 ;; Hardware stack levels used:    1
  5546 ;; Hardware stack levels required when called:    4
  5547 ;; This function calls:
  5548 ;;		___ftpack
  5549 ;; This function is called by:
  5550 ;;		_sortBattery
  5551 ;;		_angleToPulse
  5552 ;;		_showRunTime
  5553 ;;		_testFrequency
  5554 ;; This function uses a non-reentrant model
  5555 ;;
  5556                           
  5557                           	psect	text16
  5558  003C7E                     __ptext16:
  5559                           	opt stack 0
  5560  003C7E                     ___awtoft:
  5561                           	opt stack 23
  5562                           
  5563                           ;incstack = 0
  5564  003C7E  0E00               	movlw	0
  5565  003C80  6E2E               	movwf	___awtoft@sign,c
  5566  003C82  AE2C               	btfss	___awtoft@c+1,7,c
  5567  003C84  D006               	goto	l6936
  5568  003C86  6C2B               	negf	___awtoft@c,c
  5569  003C88  1E2C               	comf	___awtoft@c+1,f,c
  5570  003C8A  B0D8               	btfsc	status,0,c
  5571  003C8C  2A2C               	incf	___awtoft@c+1,f,c
  5572  003C8E  0E01               	movlw	1
  5573  003C90  6E2E               	movwf	___awtoft@sign,c
  5574  003C92                     l6936:
  5575  003C92  C02B  F023         	movff	___awtoft@c,___ftpack@arg
  5576  003C96  C02C  F024         	movff	___awtoft@c+1,___ftpack@arg+1
  5577  003C9A  6A25               	clrf	___ftpack@arg+2,c
  5578  003C9C  0E8E               	movlw	142
  5579  003C9E  6E26               	movwf	___ftpack@exp,c
  5580  003CA0  C02E  F027         	movff	___awtoft@sign,___ftpack@sign
  5581  003CA4  ECED  F018         	call	___ftpack	;wreg free
  5582  003CA8  C023  F02B         	movff	?___ftpack,?___awtoft
  5583  003CAC  C024  F02C         	movff	?___ftpack+1,?___awtoft+1
  5584  003CB0  C025  F02D         	movff	?___ftpack+2,?___awtoft+2
  5585  003CB4  0012               	return	
  5586  003CB6                     __end_of___awtoft:
  5587                           	opt stack 0
  5588                           tblptru	equ	0xFF8
  5589                           tblptrh	equ	0xFF7
  5590                           tblptrl	equ	0xFF6
  5591                           tablat	equ	0xFF5
  5592                           intcon	equ	0xFF2
  5593                           postinc0	equ	0xFEE
  5594                           wreg	equ	0xFE8
  5595                           postdec1	equ	0xFE5
  5596                           fsr1l	equ	0xFE1
  5597                           indf2	equ	0xFDF
  5598                           postinc2	equ	0xFDE
  5599                           postdec2	equ	0xFDD
  5600                           fsr2h	equ	0xFDA
  5601                           fsr2l	equ	0xFD9
  5602                           status	equ	0xFD8
  5603                           
  5604 ;; *************** function _showRunStats *****************
  5605 ;; Defined at:
  5606 ;;		line 116 in file "interface.c"
  5607 ;; Parameters:    Size  Location     Type
  5608 ;;  run             2  107[BANK0 ] PTR int 
  5609 ;;		 -> readPastRun@data(14), 
  5610 ;; Auto vars:     Size  Location     Type
  5611 ;;		None
  5612 ;; Return value:  Size  Location     Type
  5613 ;;                  1    wreg      unsigned char 
  5614 ;; Registers used:
  5615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5616 ;; Tracked objects:
  5617 ;;		On entry : 0/0
  5618 ;;		On exit  : 0/0
  5619 ;;		Unchanged: 0/0
  5620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5621 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5624 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5625 ;;Total ram usage:        2 bytes
  5626 ;; Hardware stack levels used:    1
  5627 ;; Hardware stack levels required when called:    8
  5628 ;; This function calls:
  5629 ;;		_lcdClear
  5630 ;;		_printf
  5631 ;;		_readKeypad
  5632 ;; This function is called by:
  5633 ;;		_showInterface
  5634 ;; This function uses a non-reentrant model
  5635 ;;
  5636                           
  5637                           	psect	text17
  5638  003456                     __ptext17:
  5639                           	opt stack 0
  5640  003456                     _showRunStats:
  5641                           	opt stack 21
  5642                           
  5643                           ;interface.c: 117: lcdClear();
  5644                           
  5645                           ;incstack = 0
  5646  003456  EC0F  F01F         	call	_lcdClear	;wreg free
  5647                           
  5648                           ;interface.c: 118: printf("[AA,9V,C,other] \n");
  5649  00345A  0E2C               	movlw	low STR_21
  5650  00345C  0100               	movlb	0	; () banked
  5651  00345E  6FBD               	movwf	printf@f& (0+255),b
  5652  003460  0EFF               	movlw	high STR_21
  5653  003462  0100               	movlb	0	; () banked
  5654  003464  6FBE               	movwf	(printf@f+1)& (0+255),b
  5655  003466  EC09  F000         	call	_printf	;wreg free
  5656                           
  5657                           ;interface.c: 119: printf("[%d,%d,%d,%d]   *>",run[2],run[3],run[4],run[5]);
  5658  00346A  0EE3               	movlw	low STR_22
  5659  00346C  0100               	movlb	0	; () banked
  5660  00346E  6FBD               	movwf	printf@f& (0+255),b
  5661  003470  0EFE               	movlw	high STR_22
  5662  003472  0100               	movlb	0	; () banked
  5663  003474  6FBE               	movwf	(printf@f+1)& (0+255),b
  5664  003476  0100               	movlb	0	; () banked
  5665  003478  EE20 F004          	lfsr	2,4
  5666  00347C  51EB               	movf	showRunStats@run& (0+255),w,b
  5667  00347E  26D9               	addwf	fsr2l,f,c
  5668  003480  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  5669  003482  22DA               	addwfc	fsr2h,f,c
  5670  003484  CFDE F0BF          	movff	postinc2,?_printf+2
  5671  003488  CFDD F0C0          	movff	postdec2,?_printf+3
  5672  00348C  0100               	movlb	0	; () banked
  5673  00348E  EE20 F006          	lfsr	2,6
  5674  003492  51EB               	movf	showRunStats@run& (0+255),w,b
  5675  003494  26D9               	addwf	fsr2l,f,c
  5676  003496  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  5677  003498  22DA               	addwfc	fsr2h,f,c
  5678  00349A  CFDE F0C1          	movff	postinc2,?_printf+4
  5679  00349E  CFDD F0C2          	movff	postdec2,?_printf+5
  5680  0034A2  0100               	movlb	0	; () banked
  5681  0034A4  EE20 F008          	lfsr	2,8
  5682  0034A8  51EB               	movf	showRunStats@run& (0+255),w,b
  5683  0034AA  26D9               	addwf	fsr2l,f,c
  5684  0034AC  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  5685  0034AE  22DA               	addwfc	fsr2h,f,c
  5686  0034B0  CFDE F0C3          	movff	postinc2,?_printf+6
  5687  0034B4  CFDD F0C4          	movff	postdec2,?_printf+7
  5688  0034B8  0100               	movlb	0	; () banked
  5689  0034BA  EE20 F00A          	lfsr	2,10
  5690  0034BE  51EB               	movf	showRunStats@run& (0+255),w,b
  5691  0034C0  26D9               	addwf	fsr2l,f,c
  5692  0034C2  51EC               	movf	(showRunStats@run+1)& (0+255),w,b
  5693  0034C4  22DA               	addwfc	fsr2h,f,c
  5694  0034C6  CFDE F0C5          	movff	postinc2,?_printf+8
  5695  0034CA  CFDD F0C6          	movff	postdec2,?_printf+9
  5696  0034CE  EC09  F000         	call	_printf	;wreg free
  5697  0034D2                     l7070:
  5698  0034D2  EC73  F01E         	call	_readKeypad	;wreg free
  5699  0034D6  0A2A               	xorlw	42
  5700  0034D8  B4D8               	btfsc	status,2,c
  5701  0034DA  0012               	return	
  5702  0034DC  D7FA               	goto	l7070
  5703  0034DE                     __end_of_showRunStats:
  5704                           	opt stack 0
  5705                           tblptru	equ	0xFF8
  5706                           tblptrh	equ	0xFF7
  5707                           tblptrl	equ	0xFF6
  5708                           tablat	equ	0xFF5
  5709                           intcon	equ	0xFF2
  5710                           postinc0	equ	0xFEE
  5711                           wreg	equ	0xFE8
  5712                           postdec1	equ	0xFE5
  5713                           fsr1l	equ	0xFE1
  5714                           indf2	equ	0xFDF
  5715                           postinc2	equ	0xFDE
  5716                           postdec2	equ	0xFDD
  5717                           fsr2h	equ	0xFDA
  5718                           fsr2l	equ	0xFD9
  5719                           status	equ	0xFD8
  5720                           
  5721 ;; *************** function _showRunSelect *****************
  5722 ;; Defined at:
  5723 ;;		line 84 in file "interface.c"
  5724 ;; Parameters:    Size  Location     Type
  5725 ;;		None
  5726 ;; Auto vars:     Size  Location     Type
  5727 ;;  k               1  107[BANK0 ] unsigned char 
  5728 ;; Return value:  Size  Location     Type
  5729 ;;                  1    wreg      unsigned char 
  5730 ;; Registers used:
  5731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5732 ;; Tracked objects:
  5733 ;;		On entry : 0/0
  5734 ;;		On exit  : 0/0
  5735 ;;		Unchanged: 0/0
  5736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5738 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5740 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5741 ;;Total ram usage:        1 bytes
  5742 ;; Hardware stack levels used:    1
  5743 ;; Hardware stack levels required when called:    8
  5744 ;; This function calls:
  5745 ;;		_lcdClear
  5746 ;;		_printf
  5747 ;;		_readKeypad
  5748 ;; This function is called by:
  5749 ;;		_showInterface
  5750 ;; This function uses a non-reentrant model
  5751 ;;
  5752                           
  5753                           	psect	text18
  5754  00386E                     __ptext18:
  5755                           	opt stack 0
  5756  00386E                     _showRunSelect:
  5757                           	opt stack 21
  5758                           
  5759                           ;interface.c: 85: lcdClear();
  5760                           
  5761                           ;incstack = 0
  5762  00386E  EC0F  F01F         	call	_lcdClear	;wreg free
  5763                           
  5764                           ;interface.c: 86: printf("select run:     \n");
  5765  003872  0E1A               	movlw	low STR_15
  5766  003874  0100               	movlb	0	; () banked
  5767  003876  6FBD               	movwf	printf@f& (0+255),b
  5768  003878  0EFF               	movlw	high STR_15
  5769  00387A  0100               	movlb	0	; () banked
  5770  00387C  6FBE               	movwf	(printf@f+1)& (0+255),b
  5771  00387E  EC09  F000         	call	_printf	;wreg free
  5772                           
  5773                           ;interface.c: 87: printf("[1,2,3,4]     *>");
  5774  003882  0E60               	movlw	low STR_16
  5775  003884  0100               	movlb	0	; () banked
  5776  003886  6FBD               	movwf	printf@f& (0+255),b
  5777  003888  0EFF               	movlw	high STR_16
  5778  00388A  0100               	movlb	0	; () banked
  5779  00388C  6FBE               	movwf	(printf@f+1)& (0+255),b
  5780  00388E  EC09  F000         	call	_printf	;wreg free
  5781  003892                     l7020:
  5782  003892  EC73  F01E         	call	_readKeypad	;wreg free
  5783  003896  0100               	movlb	0	; () banked
  5784  003898  6FEB               	movwf	showRunSelect@k& (0+255),b
  5785                           
  5786                           ; BSR set to: 0
  5787                           ;interface.c: 91: while(k != '1' && k != '2' && k != '3' && k != '4' && k != '*');
  5788  00389A  0E31               	movlw	49
  5789  00389C  0100               	movlb	0	; () banked
  5790  00389E  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  5791  0038A0  B4D8               	btfsc	status,2,c
  5792  0038A2  D014               	goto	l7032
  5793                           
  5794                           ; BSR set to: 0
  5795  0038A4  0E32               	movlw	50
  5796  0038A6  0100               	movlb	0	; () banked
  5797  0038A8  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  5798  0038AA  B4D8               	btfsc	status,2,c
  5799  0038AC  D00F               	goto	l7032
  5800                           
  5801                           ; BSR set to: 0
  5802  0038AE  0E33               	movlw	51
  5803  0038B0  0100               	movlb	0	; () banked
  5804  0038B2  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  5805  0038B4  B4D8               	btfsc	status,2,c
  5806  0038B6  D00A               	goto	l7032
  5807                           
  5808                           ; BSR set to: 0
  5809  0038B8  0E34               	movlw	52
  5810  0038BA  0100               	movlb	0	; () banked
  5811  0038BC  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  5812  0038BE  B4D8               	btfsc	status,2,c
  5813  0038C0  D005               	goto	l7032
  5814                           
  5815                           ; BSR set to: 0
  5816  0038C2  0E2A               	movlw	42
  5817  0038C4  0100               	movlb	0	; () banked
  5818  0038C6  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  5819  0038C8  A4D8               	btfss	status,2,c
  5820  0038CA  D7E3               	goto	l7020
  5821  0038CC                     l7032:
  5822                           
  5823                           ; BSR set to: 0
  5824                           ;interface.c: 92: return k;
  5825  0038CC  0100               	movlb	0	; () banked
  5826  0038CE  51EB               	movf	showRunSelect@k& (0+255),w,b
  5827  0038D0  0012               	return	
  5828  0038D2                     __end_of_showRunSelect:
  5829                           	opt stack 0
  5830                           tblptru	equ	0xFF8
  5831                           tblptrh	equ	0xFF7
  5832                           tblptrl	equ	0xFF6
  5833                           tablat	equ	0xFF5
  5834                           intcon	equ	0xFF2
  5835                           postinc0	equ	0xFEE
  5836                           wreg	equ	0xFE8
  5837                           postdec1	equ	0xFE5
  5838                           fsr1l	equ	0xFE1
  5839                           indf2	equ	0xFDF
  5840                           postinc2	equ	0xFDE
  5841                           postdec2	equ	0xFDD
  5842                           fsr2h	equ	0xFDA
  5843                           fsr2l	equ	0xFD9
  5844                           status	equ	0xFD8
  5845                           
  5846 ;; *************** function _showRunMenu *****************
  5847 ;; Defined at:
  5848 ;;		line 95 in file "interface.c"
  5849 ;; Parameters:    Size  Location     Type
  5850 ;;  key             1    wreg     unsigned char 
  5851 ;; Auto vars:     Size  Location     Type
  5852 ;;  key             1  107[BANK0 ] unsigned char 
  5853 ;;  k               1  108[BANK0 ] unsigned char 
  5854 ;; Return value:  Size  Location     Type
  5855 ;;                  1    wreg      unsigned char 
  5856 ;; Registers used:
  5857 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5858 ;; Tracked objects:
  5859 ;;		On entry : 0/0
  5860 ;;		On exit  : 0/0
  5861 ;;		Unchanged: 0/0
  5862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5864 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5866 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5867 ;;Total ram usage:        2 bytes
  5868 ;; Hardware stack levels used:    1
  5869 ;; Hardware stack levels required when called:    8
  5870 ;; This function calls:
  5871 ;;		_lcdClear
  5872 ;;		_printf
  5873 ;;		_readKeypad
  5874 ;; This function is called by:
  5875 ;;		_showInterface
  5876 ;; This function uses a non-reentrant model
  5877 ;;
  5878                           
  5879                           	psect	text19
  5880  003934                     __ptext19:
  5881                           	opt stack 0
  5882  003934                     _showRunMenu:
  5883                           	opt stack 21
  5884                           
  5885                           ; BSR set to: 0
  5886                           ;incstack = 0
  5887                           ;showRunMenu@key stored from wreg
  5888  003934  0100               	movlb	0	; () banked
  5889  003936  6FEB               	movwf	showRunMenu@key& (0+255),b
  5890                           
  5891                           ;interface.c: 96: lcdClear();
  5892  003938  EC0F  F01F         	call	_lcdClear	;wreg free
  5893                           
  5894                           ;interface.c: 97: printf("%c) time  <A     \n",key);
  5895  00393C  0EBD               	movlw	low STR_17
  5896  00393E  0100               	movlb	0	; () banked
  5897  003940  6FBD               	movwf	printf@f& (0+255),b
  5898  003942  0EFE               	movlw	high STR_17
  5899  003944  0100               	movlb	0	; () banked
  5900  003946  6FBE               	movwf	(printf@f+1)& (0+255),b
  5901  003948  C0EB  F0BF         	movff	showRunMenu@key,?_printf+2
  5902  00394C  0100               	movlb	0	; () banked
  5903  00394E  6BC0               	clrf	(?_printf+3)& (0+255),b
  5904  003950  EC09  F000         	call	_printf	;wreg free
  5905                           
  5906                           ;interface.c: 98: printf( "   stats <B   *>");
  5907  003954  0E82               	movlw	low STR_18
  5908  003956  0100               	movlb	0	; () banked
  5909  003958  6FBD               	movwf	printf@f& (0+255),b
  5910  00395A  0EFF               	movlw	high STR_18
  5911  00395C  0100               	movlb	0	; () banked
  5912  00395E  6FBE               	movwf	(printf@f+1)& (0+255),b
  5913  003960  EC09  F000         	call	_printf	;wreg free
  5914  003964                     l7042:
  5915  003964  EC73  F01E         	call	_readKeypad	;wreg free
  5916  003968  0100               	movlb	0	; () banked
  5917  00396A  6FEC               	movwf	showRunMenu@k& (0+255),b
  5918                           
  5919                           ; BSR set to: 0
  5920                           ;interface.c: 102: while(k != 'A' && k != 'B' && k != '*');
  5921  00396C  0E41               	movlw	65
  5922  00396E  0100               	movlb	0	; () banked
  5923  003970  19EC               	xorwf	showRunMenu@k& (0+255),w,b
  5924  003972  B4D8               	btfsc	status,2,c
  5925  003974  D00A               	goto	l7050
  5926                           
  5927                           ; BSR set to: 0
  5928  003976  0E42               	movlw	66
  5929  003978  0100               	movlb	0	; () banked
  5930  00397A  19EC               	xorwf	showRunMenu@k& (0+255),w,b
  5931  00397C  B4D8               	btfsc	status,2,c
  5932  00397E  D005               	goto	l7050
  5933                           
  5934                           ; BSR set to: 0
  5935  003980  0E2A               	movlw	42
  5936  003982  0100               	movlb	0	; () banked
  5937  003984  19EC               	xorwf	showRunMenu@k& (0+255),w,b
  5938  003986  A4D8               	btfss	status,2,c
  5939  003988  D7ED               	goto	l7042
  5940  00398A                     l7050:
  5941                           
  5942                           ; BSR set to: 0
  5943                           ;interface.c: 103: return k;
  5944  00398A  0100               	movlb	0	; () banked
  5945  00398C  51EC               	movf	showRunMenu@k& (0+255),w,b
  5946  00398E  0012               	return	
  5947  003990                     __end_of_showRunMenu:
  5948                           	opt stack 0
  5949                           tblptru	equ	0xFF8
  5950                           tblptrh	equ	0xFF7
  5951                           tblptrl	equ	0xFF6
  5952                           tablat	equ	0xFF5
  5953                           intcon	equ	0xFF2
  5954                           postinc0	equ	0xFEE
  5955                           wreg	equ	0xFE8
  5956                           postdec1	equ	0xFE5
  5957                           fsr1l	equ	0xFE1
  5958                           indf2	equ	0xFDF
  5959                           postinc2	equ	0xFDE
  5960                           postdec2	equ	0xFDD
  5961                           fsr2h	equ	0xFDA
  5962                           fsr2l	equ	0xFD9
  5963                           status	equ	0xFD8
  5964                           
  5965 ;; *************** function _showMainMenu *****************
  5966 ;; Defined at:
  5967 ;;		line 73 in file "interface.c"
  5968 ;; Parameters:    Size  Location     Type
  5969 ;;		None
  5970 ;; Auto vars:     Size  Location     Type
  5971 ;;  k               1  107[BANK0 ] unsigned char 
  5972 ;; Return value:  Size  Location     Type
  5973 ;;                  1    wreg      unsigned char 
  5974 ;; Registers used:
  5975 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5976 ;; Tracked objects:
  5977 ;;		On entry : 0/0
  5978 ;;		On exit  : 0/0
  5979 ;;		Unchanged: 0/0
  5980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5982 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5984 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5985 ;;Total ram usage:        1 bytes
  5986 ;; Hardware stack levels used:    1
  5987 ;; Hardware stack levels required when called:    8
  5988 ;; This function calls:
  5989 ;;		_lcdClear
  5990 ;;		_printf
  5991 ;;		_readKeypad
  5992 ;; This function is called by:
  5993 ;;		_showInterface
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           	psect	text20
  5998  003A42                     __ptext20:
  5999                           	opt stack 0
  6000  003A42                     _showMainMenu:
  6001                           	opt stack 21
  6002                           
  6003                           ;interface.c: 74: lcdClear();
  6004                           
  6005                           ; BSR set to: 0
  6006                           ;incstack = 0
  6007  003A42  EC0F  F01F         	call	_lcdClear	;wreg free
  6008                           
  6009                           ;interface.c: 75: printf("start   <B      \n");
  6010  003A46  0EF6               	movlw	low STR_13
  6011  003A48  0100               	movlb	0	; () banked
  6012  003A4A  6FBD               	movwf	printf@f& (0+255),b
  6013  003A4C  0EFE               	movlw	high STR_13
  6014  003A4E  0100               	movlb	0	; () banked
  6015  003A50  6FBE               	movwf	(printf@f+1)& (0+255),b
  6016  003A52  EC09  F000         	call	_printf	;wreg free
  6017                           
  6018                           ;interface.c: 76: printf("history <C    *>");
  6019  003A56  0E71               	movlw	low STR_14
  6020  003A58  0100               	movlb	0	; () banked
  6021  003A5A  6FBD               	movwf	printf@f& (0+255),b
  6022  003A5C  0EFF               	movlw	high STR_14
  6023  003A5E  0100               	movlb	0	; () banked
  6024  003A60  6FBE               	movwf	(printf@f+1)& (0+255),b
  6025  003A62  EC09  F000         	call	_printf	;wreg free
  6026  003A66                     l7002:
  6027  003A66  EC73  F01E         	call	_readKeypad	;wreg free
  6028  003A6A  0100               	movlb	0	; () banked
  6029  003A6C  6FEB               	movwf	showMainMenu@k& (0+255),b
  6030                           
  6031                           ; BSR set to: 0
  6032                           ;interface.c: 80: while(k != 'B' && k != 'C' && k != '*');
  6033  003A6E  0E42               	movlw	66
  6034  003A70  0100               	movlb	0	; () banked
  6035  003A72  19EB               	xorwf	showMainMenu@k& (0+255),w,b
  6036  003A74  B4D8               	btfsc	status,2,c
  6037  003A76  D00A               	goto	l7010
  6038                           
  6039                           ; BSR set to: 0
  6040  003A78  0E43               	movlw	67
  6041  003A7A  0100               	movlb	0	; () banked
  6042  003A7C  19EB               	xorwf	showMainMenu@k& (0+255),w,b
  6043  003A7E  B4D8               	btfsc	status,2,c
  6044  003A80  D005               	goto	l7010
  6045                           
  6046                           ; BSR set to: 0
  6047  003A82  0E2A               	movlw	42
  6048  003A84  0100               	movlb	0	; () banked
  6049  003A86  19EB               	xorwf	showMainMenu@k& (0+255),w,b
  6050  003A88  A4D8               	btfss	status,2,c
  6051  003A8A  D7ED               	goto	l7002
  6052  003A8C                     l7010:
  6053                           
  6054                           ; BSR set to: 0
  6055                           ;interface.c: 81: return k;
  6056  003A8C  0100               	movlb	0	; () banked
  6057  003A8E  51EB               	movf	showMainMenu@k& (0+255),w,b
  6058  003A90  0012               	return	
  6059  003A92                     __end_of_showMainMenu:
  6060                           	opt stack 0
  6061                           tblptru	equ	0xFF8
  6062                           tblptrh	equ	0xFF7
  6063                           tblptrl	equ	0xFF6
  6064                           tablat	equ	0xFF5
  6065                           intcon	equ	0xFF2
  6066                           postinc0	equ	0xFEE
  6067                           wreg	equ	0xFE8
  6068                           postdec1	equ	0xFE5
  6069                           fsr1l	equ	0xFE1
  6070                           indf2	equ	0xFDF
  6071                           postinc2	equ	0xFDE
  6072                           postdec2	equ	0xFDD
  6073                           fsr2h	equ	0xFDA
  6074                           fsr2l	equ	0xFD9
  6075                           status	equ	0xFD8
  6076                           
  6077 ;; *************** function _showDateTime *****************
  6078 ;; Defined at:
  6079 ;;		line 56 in file "interface.c"
  6080 ;; Parameters:    Size  Location     Type
  6081 ;;		None
  6082 ;; Auto vars:     Size  Location     Type
  6083 ;;		None
  6084 ;; Return value:  Size  Location     Type
  6085 ;;                  1    wreg      void 
  6086 ;; Registers used:
  6087 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6088 ;; Tracked objects:
  6089 ;;		On entry : 0/0
  6090 ;;		On exit  : 0/0
  6091 ;;		Unchanged: 0/0
  6092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6097 ;;Total ram usage:        0 bytes
  6098 ;; Hardware stack levels used:    1
  6099 ;; Hardware stack levels required when called:    8
  6100 ;; This function calls:
  6101 ;;		_lcdClear
  6102 ;;		_printf
  6103 ;;		_readKeypad
  6104 ;; This function is called by:
  6105 ;;		_showInterface
  6106 ;; This function uses a non-reentrant model
  6107 ;;
  6108                           
  6109                           	psect	text21
  6110  003CB6                     __ptext21:
  6111                           	opt stack 0
  6112  003CB6                     _showDateTime:
  6113                           	opt stack 21
  6114                           
  6115                           ;interface.c: 66: lcdClear();
  6116                           
  6117                           ; BSR set to: 0
  6118                           ;incstack = 0
  6119  003CB6  EC0F  F01F         	call	_lcdClear	;wreg free
  6120                           
  6121                           ;interface.c: 67: printf("  hh:mm:ss      \n");
  6122  003CBA  0E08               	movlw	low STR_11
  6123  003CBC  0100               	movlb	0	; () banked
  6124  003CBE  6FBD               	movwf	printf@f& (0+255),b
  6125  003CC0  0EFF               	movlw	high STR_11
  6126  003CC2  0100               	movlb	0	; () banked
  6127  003CC4  6FBE               	movwf	(printf@f+1)& (0+255),b
  6128  003CC6  EC09  F000         	call	_printf	;wreg free
  6129                           
  6130                           ;interface.c: 68: printf("  mm:dd:yy    A>");
  6131  003CCA  0E93               	movlw	low STR_12
  6132  003CCC  0100               	movlb	0	; () banked
  6133  003CCE  6FBD               	movwf	printf@f& (0+255),b
  6134  003CD0  0EFF               	movlw	high STR_12
  6135  003CD2  0100               	movlb	0	; () banked
  6136  003CD4  6FBE               	movwf	(printf@f+1)& (0+255),b
  6137  003CD6  EC09  F000         	call	_printf	;wreg free
  6138  003CDA                     l6994:
  6139  003CDA  EC73  F01E         	call	_readKeypad	;wreg free
  6140  003CDE  0A41               	xorlw	65
  6141  003CE0  B4D8               	btfsc	status,2,c
  6142  003CE2  0012               	return	
  6143  003CE4  D7FA               	goto	l6994
  6144  003CE6                     __end_of_showDateTime:
  6145                           	opt stack 0
  6146                           tblptru	equ	0xFF8
  6147                           tblptrh	equ	0xFF7
  6148                           tblptrl	equ	0xFF6
  6149                           tablat	equ	0xFF5
  6150                           intcon	equ	0xFF2
  6151                           postinc0	equ	0xFEE
  6152                           wreg	equ	0xFE8
  6153                           postdec1	equ	0xFE5
  6154                           fsr1l	equ	0xFE1
  6155                           indf2	equ	0xFDF
  6156                           postinc2	equ	0xFDE
  6157                           postdec2	equ	0xFDD
  6158                           fsr2h	equ	0xFDA
  6159                           fsr2l	equ	0xFD9
  6160                           status	equ	0xFD8
  6161                           
  6162 ;; *************** function _readKeypad *****************
  6163 ;; Defined at:
  6164 ;;		line 36 in file "keypad.c"
  6165 ;; Parameters:    Size  Location     Type
  6166 ;;		None
  6167 ;; Auto vars:     Size  Location     Type
  6168 ;;  key             1   34[COMRAM] unsigned char 
  6169 ;; Return value:  Size  Location     Type
  6170 ;;                  1    wreg      unsigned char 
  6171 ;; Registers used:
  6172 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  6173 ;; Tracked objects:
  6174 ;;		On entry : 0/0
  6175 ;;		On exit  : 0/0
  6176 ;;		Unchanged: 0/0
  6177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6179 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6181 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6182 ;;Total ram usage:        1 bytes
  6183 ;; Hardware stack levels used:    1
  6184 ;; Hardware stack levels required when called:    3
  6185 ;; This function calls:
  6186 ;;		Nothing
  6187 ;; This function is called by:
  6188 ;;		_debug
  6189 ;;		_main
  6190 ;;		_sortBattery
  6191 ;;		_showDateTime
  6192 ;;		_showMainMenu
  6193 ;;		_showRunSelect
  6194 ;;		_showRunMenu
  6195 ;;		_showRunTime
  6196 ;;		_showRunStats
  6197 ;;		_pause
  6198 ;; This function uses a non-reentrant model
  6199 ;;
  6200                           
  6201                           	psect	text22
  6202  003CE6                     __ptext22:
  6203                           	opt stack 0
  6204  003CE6                     _readKeypad:
  6205                           	opt stack 26
  6206  003CE6                     l273:
  6207  003CE6  A281               	btfss	3969,1,c	;volatile
  6208  003CE8  D7FE               	goto	l273
  6209                           
  6210                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  6211  003CEA  3881               	swapf	3969,w,c	;volatile
  6212  003CEC  0B0F               	andlw	15
  6213  003CEE  0B0F               	andlw	15
  6214  003CF0  6E23               	movwf	readKeypad@key,c
  6215  003CF2                     l276:
  6216  003CF2  B281               	btfsc	3969,1,c	;volatile
  6217  003CF4  D7FE               	goto	l276
  6218                           
  6219                           ;keypad.c: 40: return keys[key];
  6220  003CF6  5023               	movf	readKeypad@key,w,c
  6221  003CF8  0D01               	mullw	1
  6222  003CFA  0EA5               	movlw	low _keys
  6223  003CFC  24F3               	addwf	prodl,w,c
  6224  003CFE  6EF6               	movwf	tblptrl,c
  6225  003D00  0EFE               	movlw	high _keys
  6226  003D02  20F4               	addwfc	prodh,w,c
  6227  003D04  6EF7               	movwf	tblptrh,c
  6228  003D06                     	if	0	;There are less than 3 active tblptr bytes
  6229  003D06                     	endif
  6230  003D06  0008               	tblrd		*
  6231  003D08  50F5               	movf	tablat,w,c
  6232  003D0A  0012               	return	
  6233  003D0C                     __end_of_readKeypad:
  6234                           	opt stack 0
  6235                           tblptru	equ	0xFF8
  6236                           tblptrh	equ	0xFF7
  6237                           tblptrl	equ	0xFF6
  6238                           tablat	equ	0xFF5
  6239                           prodh	equ	0xFF4
  6240                           prodl	equ	0xFF3
  6241                           intcon	equ	0xFF2
  6242                           postinc0	equ	0xFEE
  6243                           wreg	equ	0xFE8
  6244                           postdec1	equ	0xFE5
  6245                           fsr1l	equ	0xFE1
  6246                           indf2	equ	0xFDF
  6247                           postinc2	equ	0xFDE
  6248                           postdec2	equ	0xFDD
  6249                           fsr2h	equ	0xFDA
  6250                           fsr2l	equ	0xFD9
  6251                           status	equ	0xFD8
  6252                           
  6253 ;; *************** function _printf *****************
  6254 ;; Defined at:
  6255 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6256 ;; Parameters:    Size  Location     Type
  6257 ;;  f               2   61[BANK0 ] PTR const unsigned char 
  6258 ;;		 -> STR_22(19), STR_21(18), STR_20(17), STR_19(19), 
  6259 ;;		 -> STR_18(17), STR_17(19), STR_16(17), STR_15(18), 
  6260 ;;		 -> STR_14(17), STR_13(18), STR_12(17), STR_11(18), 
  6261 ;;		 -> STR_10(8), STR_9(15), STR_8(14), STR_7(17), 
  6262 ;;		 -> STR_6(17), STR_5(8), STR_4(2), STR_3(4), 
  6263 ;;		 -> STR_2(6), STR_1(2), 
  6264 ;; Auto vars:     Size  Location     Type
  6265 ;;  idx             1   80[BANK0 ] unsigned char 
  6266 ;;  val             4   96[BANK0 ] unsigned long 
  6267 ;;  tmpval          4   87[BANK0 ] struct .
  6268 ;;  fval            3   93[BANK0 ] struct .
  6269 ;;  prec            2  104[BANK0 ] int 
  6270 ;;  flag            2  102[BANK0 ] unsigned short 
  6271 ;;  width           2  100[BANK0 ] int 
  6272 ;;  exp             2   91[BANK0 ] int 
  6273 ;;  ap              2   85[BANK0 ] PTR void [1]
  6274 ;;		 -> ?_printf(2), 
  6275 ;;  len             2   83[BANK0 ] unsigned int 
  6276 ;;  cp              2   81[BANK0 ] PTR const unsigned char 
  6277 ;;		 -> printf@c(1), 
  6278 ;;  c               1  106[BANK0 ] char 
  6279 ;;  d               1    0        unsigned char 
  6280 ;; Return value:  Size  Location     Type
  6281 ;;                  2   61[BANK0 ] int 
  6282 ;; Registers used:
  6283 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6284 ;; Tracked objects:
  6285 ;;		On entry : 0/0
  6286 ;;		On exit  : 0/0
  6287 ;;		Unchanged: 0/0
  6288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6289 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6290 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6291 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6292 ;;      Totals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6293 ;;Total ram usage:       46 bytes
  6294 ;; Hardware stack levels used:    1
  6295 ;; Hardware stack levels required when called:    7
  6296 ;; This function calls:
  6297 ;;		___awdiv
  6298 ;;		___ftadd
  6299 ;;		___ftge
  6300 ;;		___ftmul
  6301 ;;		___ftneg
  6302 ;;		___ftsub
  6303 ;;		___fttol
  6304 ;;		___lldiv
  6305 ;;		___llmod
  6306 ;;		___lltoft
  6307 ;;		___wmul
  6308 ;;		__div_to_l_
  6309 ;;		__tdiv_to_l_
  6310 ;;		_fround
  6311 ;;		_isdigit
  6312 ;;		_putch
  6313 ;;		_scale
  6314 ;; This function is called by:
  6315 ;;		_debug
  6316 ;;		_main
  6317 ;;		_sortBattery
  6318 ;;		_showDateTime
  6319 ;;		_showMainMenu
  6320 ;;		_showRunSelect
  6321 ;;		_showRunMenu
  6322 ;;		_showRunTime
  6323 ;;		_showRunStats
  6324 ;;		_pause
  6325 ;;		_testFrequency
  6326 ;; This function uses a non-reentrant model
  6327 ;;
  6328                           
  6329                           	psect	text23
  6330  000012                     __ptext23:
  6331                           	opt stack 0
  6332  000012                     _printf:
  6333                           	opt stack 22
  6334                           
  6335                           ;doprnt.c: 466: va_list ap;
  6336                           ;doprnt.c: 499: signed char c;
  6337                           ;doprnt.c: 501: int width;
  6338                           ;doprnt.c: 504: int prec;
  6339                           ;doprnt.c: 508: unsigned short flag;
  6340                           ;doprnt.c: 515: char d;
  6341                           ;doprnt.c: 516: double fval;
  6342                           ;doprnt.c: 517: int exp;
  6343                           ;doprnt.c: 523: union {
  6344                           ;doprnt.c: 524: unsigned long vd;
  6345                           ;doprnt.c: 525: double integ;
  6346                           ;doprnt.c: 526: } tmpval;
  6347                           ;doprnt.c: 528: unsigned long val;
  6348                           ;doprnt.c: 529: unsigned len;
  6349                           ;doprnt.c: 530: const char * cp;
  6350                           ;doprnt.c: 533: *ap = __va_start();
  6351                           
  6352                           ;incstack = 0
  6353  000012  0EBF               	movlw	low (?_printf+2)
  6354  000014  0100               	movlb	0	; () banked
  6355  000016  6FD5               	movwf	printf@ap& (0+255),b
  6356  000018  0E00               	movlw	high (?_printf+2)
  6357  00001A  0100               	movlb	0	; () banked
  6358  00001C  6FD6               	movwf	(printf@ap+1)& (0+255),b
  6359                           
  6360                           ;doprnt.c: 536: while(c = *f++) {
  6361  00001E  EFF5  F006         	goto	l6850
  6362  000022                     l6484:
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;doprnt.c: 538: if(c != '%')
  6366  000022  0E25               	movlw	37
  6367  000024  0100               	movlb	0	; () banked
  6368  000026  19EA               	xorwf	printf@c& (0+255),w,b
  6369  000028  B4D8               	btfsc	status,2,c
  6370  00002A  D006               	goto	l6488
  6371                           
  6372                           ; BSR set to: 0
  6373                           ;doprnt.c: 540: {
  6374                           ;doprnt.c: 541: (putch(c) );
  6375  00002C  0100               	movlb	0	; () banked
  6376  00002E  51EA               	movf	printf@c& (0+255),w,b
  6377  000030  ECBC  F01E         	call	_putch
  6378                           
  6379                           ;doprnt.c: 542: continue;
  6380  000034  EFF5  F006         	goto	l6850
  6381  000038                     l6488:
  6382                           
  6383                           ;doprnt.c: 543: }
  6384                           ;doprnt.c: 546: width = 0;
  6385  000038  0E00               	movlw	0
  6386  00003A  0100               	movlb	0	; () banked
  6387  00003C  6FE5               	movwf	(printf@width+1)& (0+255),b
  6388  00003E  0E00               	movlw	0
  6389  000040  6FE4               	movwf	printf@width& (0+255),b
  6390                           
  6391                           ;doprnt.c: 548: flag = 0;
  6392  000042  0E00               	movlw	0
  6393  000044  0100               	movlb	0	; () banked
  6394  000046  6FE7               	movwf	(printf@flag+1)& (0+255),b
  6395  000048  0E00               	movlw	0
  6396  00004A  6FE6               	movwf	printf@flag& (0+255),b
  6397                           
  6398                           ; BSR set to: 0
  6399                           ;doprnt.c: 551: switch(*f) {
  6400                           
  6401                           ;doprnt.c: 550: for(;;) {
  6402  00004C  D005               	goto	l6494
  6403  00004E                     l6490:
  6404                           
  6405                           ;doprnt.c: 580: flag |= 0x04;
  6406  00004E  0100               	movlb	0	; () banked
  6407  000050  85E6               	bsf	printf@flag& (0+255),2,b
  6408                           
  6409                           ;doprnt.c: 581: f++;
  6410  000052  0100               	movlb	0	; () banked
  6411  000054  4BBD               	infsnz	printf@f& (0+255),f,b
  6412  000056  2BBE               	incf	(printf@f+1)& (0+255),f,b
  6413  000058                     l6494:
  6414  000058  C0BD  FFF6         	movff	printf@f,tblptrl
  6415  00005C  C0BE  FFF7         	movff	printf@f+1,tblptrh
  6416  000060                     	if	0	;tblptru may be non-zero
  6417  000060                     	endif
  6418  000060                     	if	0	;tblptru may be non-zero
  6419  000060                     	endif
  6420  000060  0008               	tblrd		*
  6421  000062  50F5               	movf	tablat,w,c
  6422                           
  6423                           ; Switch size 1, requested type "space"
  6424                           ; Number of cases is 1, Range of values is 48 to 48
  6425                           ; switch strategies available:
  6426                           ; Name         Instructions Cycles
  6427                           ; simple_byte            4     3 (average)
  6428                           ;	Chosen strategy is simple_byte
  6429  000064  0A30               	xorlw	48	; case 48
  6430  000066  B4D8               	btfsc	status,2,c
  6431  000068  D7F2               	goto	l6490
  6432                           
  6433                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6434                           
  6435                           ;doprnt.c: 586: }
  6436                           
  6437                           ;doprnt.c: 585: break;
  6438  00006A  C0BD  FFF6         	movff	printf@f,tblptrl
  6439  00006E  C0BE  FFF7         	movff	printf@f+1,tblptrh
  6440  000072                     	if	0	;tblptru may be non-zero
  6441  000072                     	endif
  6442  000072                     	if	0	;tblptru may be non-zero
  6443  000072                     	endif
  6444  000072  0008               	tblrd		*
  6445  000074  50F5               	movf	tablat,w,c
  6446  000076  ECDE  F01E         	call	_isdigit
  6447  00007A  A0D8               	btfss	status,0,c
  6448  00007C  D03F               	goto	l6508
  6449                           
  6450                           ;doprnt.c: 598: width = 0;
  6451  00007E  0E00               	movlw	0
  6452  000080  0100               	movlb	0	; () banked
  6453  000082  6FE5               	movwf	(printf@width+1)& (0+255),b
  6454  000084  0E00               	movlw	0
  6455  000086  6FE4               	movwf	printf@width& (0+255),b
  6456  000088                     l6500:
  6457                           
  6458                           ;doprnt.c: 600: width *= 10;
  6459  000088  C0E4  F031         	movff	printf@width,___wmul@multiplier
  6460  00008C  C0E5  F032         	movff	printf@width+1,___wmul@multiplier+1
  6461  000090  0E00               	movlw	0
  6462  000092  6E34               	movwf	___wmul@multiplicand+1,c
  6463  000094  0E0A               	movlw	10
  6464  000096  6E33               	movwf	___wmul@multiplicand,c
  6465  000098  EC86  F01E         	call	___wmul	;wreg free
  6466  00009C  C031  F0E4         	movff	?___wmul,printf@width
  6467  0000A0  C032  F0E5         	movff	?___wmul+1,printf@width+1
  6468                           
  6469                           ;doprnt.c: 601: width += *f++ - '0';
  6470  0000A4  0ED0               	movlw	208
  6471  0000A6  0100               	movlb	0	; () banked
  6472  0000A8  6FC7               	movwf	??_printf& (0+255),b
  6473  0000AA  0EFF               	movlw	255
  6474  0000AC  0100               	movlb	0	; () banked
  6475  0000AE  6FC8               	movwf	(??_printf+1)& (0+255),b
  6476  0000B0  C0BD  FFF6         	movff	printf@f,tblptrl
  6477  0000B4  C0BE  FFF7         	movff	printf@f+1,tblptrh
  6478  0000B8                     	if	0	;tblptru may be non-zero
  6479  0000B8                     	endif
  6480  0000B8                     	if	0	;tblptru may be non-zero
  6481  0000B8                     	endif
  6482  0000B8  0008               	tblrd		*
  6483  0000BA  50F5               	movf	tablat,w,c
  6484  0000BC  0100               	movlb	0	; () banked
  6485  0000BE  6FC9               	movwf	(??_printf+2)& (0+255),b
  6486  0000C0  6BCA               	clrf	(??_printf+3)& (0+255),b
  6487  0000C2  0100               	movlb	0	; () banked
  6488  0000C4  51C7               	movf	??_printf& (0+255),w,b
  6489  0000C6  0100               	movlb	0	; () banked
  6490  0000C8  27C9               	addwf	(??_printf+2)& (0+255),f,b
  6491  0000CA  0100               	movlb	0	; () banked
  6492  0000CC  51C8               	movf	(??_printf+1)& (0+255),w,b
  6493  0000CE  0100               	movlb	0	; () banked
  6494  0000D0  23CA               	addwfc	(??_printf+3)& (0+255),f,b
  6495  0000D2  0100               	movlb	0	; () banked
  6496  0000D4  51C9               	movf	(??_printf+2)& (0+255),w,b
  6497  0000D6  0100               	movlb	0	; () banked
  6498  0000D8  27E4               	addwf	printf@width& (0+255),f,b
  6499  0000DA  0100               	movlb	0	; () banked
  6500  0000DC  51CA               	movf	(??_printf+3)& (0+255),w,b
  6501  0000DE  0100               	movlb	0	; () banked
  6502  0000E0  23E5               	addwfc	(printf@width+1)& (0+255),f,b
  6503                           
  6504                           ; BSR set to: 0
  6505  0000E2  0100               	movlb	0	; () banked
  6506  0000E4  4BBD               	infsnz	printf@f& (0+255),f,b
  6507  0000E6  2BBE               	incf	(printf@f+1)& (0+255),f,b
  6508                           
  6509                           ; BSR set to: 0
  6510                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6511  0000E8  C0BD  FFF6         	movff	printf@f,tblptrl
  6512  0000EC  C0BE  FFF7         	movff	printf@f+1,tblptrh
  6513  0000F0                     	if	0	;tblptru may be non-zero
  6514  0000F0                     	endif
  6515  0000F0                     	if	0	;tblptru may be non-zero
  6516  0000F0                     	endif
  6517  0000F0  0008               	tblrd		*
  6518  0000F2  50F5               	movf	tablat,w,c
  6519  0000F4  ECDE  F01E         	call	_isdigit
  6520  0000F8  B0D8               	btfsc	status,0,c
  6521  0000FA  D7C6               	goto	l6500
  6522  0000FC                     l6508:
  6523                           
  6524                           ;doprnt.c: 608: }
  6525                           ;doprnt.c: 611: if(*f == '.') {
  6526  0000FC  C0BD  FFF6         	movff	printf@f,tblptrl
  6527  000100  C0BE  FFF7         	movff	printf@f+1,tblptrh
  6528  000104                     	if	0	;tblptru may be non-zero
  6529  000104                     	endif
  6530  000104                     	if	0	;tblptru may be non-zero
  6531  000104                     	endif
  6532  000104  0008               	tblrd		*
  6533  000106  50F5               	movf	tablat,w,c
  6534  000108  0A2E               	xorlw	46
  6535  00010A  A4D8               	btfss	status,2,c
  6536  00010C  D034               	goto	l6520
  6537                           
  6538                           ;doprnt.c: 612: flag |= 0x4000;
  6539  00010E  0100               	movlb	0	; () banked
  6540  000110  8DE7               	bsf	(printf@flag+1)& (0+255),6,b
  6541                           
  6542                           ;doprnt.c: 613: f++;
  6543  000112  0100               	movlb	0	; () banked
  6544  000114  4BBD               	infsnz	printf@f& (0+255),f,b
  6545  000116  2BBE               	incf	(printf@f+1)& (0+255),f,b
  6546                           
  6547                           ; BSR set to: 0
  6548                           ;doprnt.c: 620: {
  6549                           ;doprnt.c: 621: prec = 0;
  6550  000118  0E00               	movlw	0
  6551  00011A  0100               	movlb	0	; () banked
  6552  00011C  6FE9               	movwf	(printf@prec+1)& (0+255),b
  6553  00011E  0E00               	movlw	0
  6554  000120  6FE8               	movwf	printf@prec& (0+255),b
  6555                           
  6556                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  6557  000122  D01E               	goto	l6518
  6558  000124                     l6514:
  6559                           
  6560                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  6561  000124  C0E8  F031         	movff	printf@prec,___wmul@multiplier
  6562  000128  C0E9  F032         	movff	printf@prec+1,___wmul@multiplier+1
  6563  00012C  0E00               	movlw	0
  6564  00012E  6E34               	movwf	___wmul@multiplicand+1,c
  6565  000130  0E0A               	movlw	10
  6566  000132  6E33               	movwf	___wmul@multiplicand,c
  6567  000134  EC86  F01E         	call	___wmul	;wreg free
  6568  000138  C0BD  FFF6         	movff	printf@f,tblptrl
  6569  00013C  C0BE  FFF7         	movff	printf@f+1,tblptrh
  6570  000140                     	if	0	;tblptru may be non-zero
  6571  000140                     	endif
  6572  000140                     	if	0	;tblptru may be non-zero
  6573  000140                     	endif
  6574  000140  0008               	tblrd		*
  6575  000142  50F5               	movf	tablat,w,c
  6576  000144  2631               	addwf	?___wmul,f,c
  6577  000146  0E00               	movlw	0
  6578  000148  2232               	addwfc	?___wmul+1,f,c
  6579  00014A  0ED0               	movlw	208
  6580  00014C  2431               	addwf	?___wmul,w,c
  6581  00014E  0100               	movlb	0	; () banked
  6582  000150  6FE8               	movwf	printf@prec& (0+255),b
  6583  000152  0EFF               	movlw	255
  6584  000154  2032               	addwfc	?___wmul+1,w,c
  6585  000156  0100               	movlb	0	; () banked
  6586  000158  6FE9               	movwf	(printf@prec+1)& (0+255),b
  6587                           
  6588                           ; BSR set to: 0
  6589  00015A  0100               	movlb	0	; () banked
  6590  00015C  4BBD               	infsnz	printf@f& (0+255),f,b
  6591  00015E  2BBE               	incf	(printf@f+1)& (0+255),f,b
  6592  000160                     l6518:
  6593                           
  6594                           ; BSR set to: 0
  6595  000160  C0BD  FFF6         	movff	printf@f,tblptrl
  6596  000164  C0BE  FFF7         	movff	printf@f+1,tblptrh
  6597  000168                     	if	0	;tblptru may be non-zero
  6598  000168                     	endif
  6599  000168                     	if	0	;tblptru may be non-zero
  6600  000168                     	endif
  6601  000168  0008               	tblrd		*
  6602  00016A  50F5               	movf	tablat,w,c
  6603  00016C  ECDE  F01E         	call	_isdigit
  6604  000170  A0D8               	btfss	status,0,c
  6605  000172  D07D               	goto	l6562
  6606  000174  D7D7               	goto	l6514
  6607  000176                     l6520:
  6608                           
  6609                           ;doprnt.c: 626: prec = 0;
  6610  000176  0E00               	movlw	0
  6611  000178  0100               	movlb	0	; () banked
  6612  00017A  6FE9               	movwf	(printf@prec+1)& (0+255),b
  6613  00017C  0E00               	movlw	0
  6614  00017E  6FE8               	movwf	printf@prec& (0+255),b
  6615                           
  6616                           ; BSR set to: 0
  6617                           ;doprnt.c: 628: flag |= 0x1000;
  6618  000180  0100               	movlb	0	; () banked
  6619  000182  89E7               	bsf	(printf@flag+1)& (0+255),4,b
  6620                           
  6621                           ; BSR set to: 0
  6622                           ;doprnt.c: 635: switch(c = *f++) {
  6623                           
  6624                           ;doprnt.c: 630: }
  6625                           ;doprnt.c: 633: loop:
  6626                           
  6627                           ; BSR set to: 0
  6628  000184  D074               	goto	l6562
  6629  000186                     l6524:
  6630                           
  6631                           ; BSR set to: 0
  6632                           ;doprnt.c: 643: flag |= 0x10;
  6633  000186  0100               	movlb	0	; () banked
  6634  000188  89E6               	bsf	printf@flag& (0+255),4,b
  6635                           
  6636                           ;doprnt.c: 644: goto loop;
  6637  00018A  D071               	goto	l6562
  6638  00018C                     l6526:
  6639                           
  6640                           ; BSR set to: 0
  6641                           ;doprnt.c: 663: flag |= 0x400;
  6642  00018C  0100               	movlb	0	; () banked
  6643  00018E  85E7               	bsf	(printf@flag+1)& (0+255),2,b
  6644                           
  6645                           ; BSR set to: 0
  6646                           ;doprnt.c: 698: case 'i':
  6647                           ;doprnt.c: 699: break;
  6648                           
  6649                           ; BSR set to: 0
  6650                           
  6651                           ;doprnt.c: 697: case 'd':
  6652                           
  6653                           ;doprnt.c: 664: break;
  6654  000190  D090               	goto	l6564
  6655  000192                     l6528:
  6656                           
  6657                           ; BSR set to: 0
  6658                           ;doprnt.c: 721: flag |= 0x80;
  6659  000192  0100               	movlb	0	; () banked
  6660  000194  8FE6               	bsf	printf@flag& (0+255),7,b
  6661                           
  6662                           ;doprnt.c: 723: break;
  6663  000196  D08D               	goto	l6564
  6664  000198                     l6530:
  6665                           
  6666                           ; BSR set to: 0
  6667                           ;doprnt.c: 753: if(prec && prec < len)
  6668  000198  0100               	movlb	0	; () banked
  6669  00019A  51E8               	movf	printf@prec& (0+255),w,b
  6670  00019C  0100               	movlb	0	; () banked
  6671  00019E  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  6672  0001A0  B4D8               	btfsc	status,2,c
  6673  0001A2  D00E               	goto	l6536
  6674                           
  6675                           ; BSR set to: 0
  6676  0001A4  0100               	movlb	0	; () banked
  6677  0001A6  51D3               	movf	printf@len& (0+255),w,b
  6678  0001A8  0100               	movlb	0	; () banked
  6679  0001AA  5DE8               	subwf	printf@prec& (0+255),w,b
  6680  0001AC  0100               	movlb	0	; () banked
  6681  0001AE  51D4               	movf	(printf@len+1)& (0+255),w,b
  6682  0001B0  0100               	movlb	0	; () banked
  6683  0001B2  59E9               	subwfb	(printf@prec+1)& (0+255),w,b
  6684  0001B4  B0D8               	btfsc	status,0,c
  6685  0001B6  D004               	goto	l6536
  6686                           
  6687                           ; BSR set to: 0
  6688                           ;doprnt.c: 754: len = prec;
  6689  0001B8  C0E8  F0D3         	movff	printf@prec,printf@len
  6690  0001BC  C0E9  F0D4         	movff	printf@prec+1,printf@len+1
  6691  0001C0                     l6536:
  6692                           
  6693                           ; BSR set to: 0
  6694                           ;doprnt.c: 757: if(width > len)
  6695  0001C0  0100               	movlb	0	; () banked
  6696  0001C2  51E4               	movf	printf@width& (0+255),w,b
  6697  0001C4  0100               	movlb	0	; () banked
  6698  0001C6  5DD3               	subwf	printf@len& (0+255),w,b
  6699  0001C8  0100               	movlb	0	; () banked
  6700  0001CA  51E5               	movf	(printf@width+1)& (0+255),w,b
  6701  0001CC  0100               	movlb	0	; () banked
  6702  0001CE  59D4               	subwfb	(printf@len+1)& (0+255),w,b
  6703  0001D0  B0D8               	btfsc	status,0,c
  6704  0001D2  D009               	goto	l6540
  6705                           
  6706                           ; BSR set to: 0
  6707                           ;doprnt.c: 758: width -= len;
  6708  0001D4  0100               	movlb	0	; () banked
  6709  0001D6  51D3               	movf	printf@len& (0+255),w,b
  6710  0001D8  0100               	movlb	0	; () banked
  6711  0001DA  5FE4               	subwf	printf@width& (0+255),f,b
  6712  0001DC  0100               	movlb	0	; () banked
  6713  0001DE  51D4               	movf	(printf@len+1)& (0+255),w,b
  6714  0001E0  0100               	movlb	0	; () banked
  6715  0001E2  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  6716  0001E4  D009               	goto	l6544
  6717  0001E6                     l6540:
  6718                           
  6719                           ; BSR set to: 0
  6720                           ;doprnt.c: 759: else
  6721                           ;doprnt.c: 760: width = 0;
  6722  0001E6  0E00               	movlw	0
  6723  0001E8  0100               	movlb	0	; () banked
  6724  0001EA  6FE5               	movwf	(printf@width+1)& (0+255),b
  6725  0001EC  0E00               	movlw	0
  6726  0001EE  6FE4               	movwf	printf@width& (0+255),b
  6727                           
  6728                           ; BSR set to: 0
  6729                           ;doprnt.c: 764: while(width--)
  6730  0001F0  D003               	goto	l6544
  6731  0001F2                     l6542:
  6732                           
  6733                           ; BSR set to: 0
  6734                           ;doprnt.c: 765: (putch(' ') );
  6735  0001F2  0E20               	movlw	32
  6736  0001F4  ECBC  F01E         	call	_putch
  6737  0001F8                     l6544:
  6738  0001F8  0100               	movlb	0	; () banked
  6739  0001FA  07E4               	decf	printf@width& (0+255),f,b
  6740  0001FC  A0D8               	btfss	status,0,c
  6741  0001FE  07E5               	decf	(printf@width+1)& (0+255),f,b
  6742  000200  0100               	movlb	0	; () banked
  6743  000202  29E4               	incf	printf@width& (0+255),w,b
  6744  000204  E1F6               	bnz	l6542
  6745  000206  0100               	movlb	0	; () banked
  6746  000208  29E5               	incf	(printf@width+1)& (0+255),w,b
  6747  00020A  B4D8               	btfsc	status,2,c
  6748  00020C  D00B               	goto	l6550
  6749  00020E  D7F1               	goto	l6542
  6750  000210                     l6546:
  6751                           
  6752                           ; BSR set to: 0
  6753                           ;doprnt.c: 768: (putch(*cp++) );
  6754  000210  C0D1  FFD9         	movff	printf@cp,fsr2l
  6755  000214  C0D2  FFDA         	movff	printf@cp+1,fsr2h
  6756  000218  50DF               	movf	indf2,w,c
  6757  00021A  ECBC  F01E         	call	_putch
  6758  00021E  0100               	movlb	0	; () banked
  6759  000220  4BD1               	infsnz	printf@cp& (0+255),f,b
  6760  000222  2BD2               	incf	(printf@cp+1)& (0+255),f,b
  6761  000224                     l6550:
  6762                           
  6763                           ; BSR set to: 0
  6764  000224  0100               	movlb	0	; () banked
  6765  000226  07D3               	decf	printf@len& (0+255),f,b
  6766  000228  A0D8               	btfss	status,0,c
  6767  00022A  07D4               	decf	(printf@len+1)& (0+255),f,b
  6768  00022C  0100               	movlb	0	; () banked
  6769  00022E  29D3               	incf	printf@len& (0+255),w,b
  6770  000230  E1EF               	bnz	l6546
  6771  000232  0100               	movlb	0	; () banked
  6772  000234  29D4               	incf	(printf@len+1)& (0+255),w,b
  6773  000236  B4D8               	btfsc	status,2,c
  6774  000238  EFF5  F006         	goto	l6850
  6775  00023C  D7E9               	goto	l6546
  6776  00023E                     l6552:
  6777                           
  6778                           ; BSR set to: 0
  6779                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6780  00023E  C0D5  FFD9         	movff	printf@ap,fsr2l
  6781  000242  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  6782  000246  50DF               	movf	indf2,w,c
  6783  000248  0100               	movlb	0	; () banked
  6784  00024A  6FEA               	movwf	printf@c& (0+255),b
  6785                           
  6786                           ; BSR set to: 0
  6787  00024C  0E02               	movlw	2
  6788  00024E  0100               	movlb	0	; () banked
  6789  000250  27D5               	addwf	printf@ap& (0+255),f,b
  6790  000252  0E00               	movlw	0
  6791  000254  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  6792  000256                     l6556:
  6793                           
  6794                           ; BSR set to: 0
  6795                           ;doprnt.c: 805: cp = (char *)&c;
  6796  000256  0EEA               	movlw	low printf@c
  6797  000258  0100               	movlb	0	; () banked
  6798  00025A  6FD1               	movwf	printf@cp& (0+255),b
  6799  00025C  0E00               	movlw	high printf@c
  6800  00025E  0100               	movlb	0	; () banked
  6801  000260  6FD2               	movwf	(printf@cp+1)& (0+255),b
  6802                           
  6803                           ; BSR set to: 0
  6804                           ;doprnt.c: 806: len = 1;
  6805  000262  0E00               	movlw	0
  6806  000264  0100               	movlb	0	; () banked
  6807  000266  6FD4               	movwf	(printf@len+1)& (0+255),b
  6808  000268  0E01               	movlw	1
  6809  00026A  6FD3               	movwf	printf@len& (0+255),b
  6810                           
  6811                           ;doprnt.c: 807: goto dostring;
  6812  00026C  D795               	goto	l6530
  6813  00026E                     l6562:
  6814  00026E  C0BD  FFF6         	movff	printf@f,tblptrl
  6815  000272  C0BE  FFF7         	movff	printf@f+1,tblptrh
  6816  000276  0100               	movlb	0	; () banked
  6817  000278  4BBD               	infsnz	printf@f& (0+255),f,b
  6818  00027A  2BBE               	incf	(printf@f+1)& (0+255),f,b
  6819  00027C                     	if	0	;tblptru may be non-zero
  6820  00027C                     	endif
  6821  00027C                     	if	0	;tblptru may be non-zero
  6822  00027C                     	endif
  6823  00027C  0008               	tblrd		*
  6824  00027E  CFF5 F0EA          	movff	tablat,printf@c
  6825  000282  0100               	movlb	0	; () banked
  6826  000284  51EA               	movf	printf@c& (0+255),w,b
  6827                           
  6828                           ; Switch size 1, requested type "space"
  6829                           ; Number of cases is 7, Range of values is 0 to 120
  6830                           ; switch strategies available:
  6831                           ; Name         Instructions Cycles
  6832                           ; simple_byte           22    12 (average)
  6833                           ;	Chosen strategy is simple_byte
  6834  000286  0A00               	xorlw	0	; case 0
  6835  000288  B4D8               	btfsc	status,2,c
  6836  00028A  0012               	return	
  6837  00028C  0A63               	xorlw	99	; case 99
  6838  00028E  B4D8               	btfsc	status,2,c
  6839  000290  D7D6               	goto	l6552
  6840  000292  0A07               	xorlw	7	; case 100
  6841  000294  B4D8               	btfsc	status,2,c
  6842  000296  D00D               	goto	l6564
  6843  000298  0A02               	xorlw	2	; case 102
  6844  00029A  B4D8               	btfsc	status,2,c
  6845  00029C  D777               	goto	l6526
  6846  00029E  0A0F               	xorlw	15	; case 105
  6847  0002A0  B4D8               	btfsc	status,2,c
  6848  0002A2  D007               	goto	l6564
  6849  0002A4  0A05               	xorlw	5	; case 108
  6850  0002A6  B4D8               	btfsc	status,2,c
  6851  0002A8  D76E               	goto	l6524
  6852  0002AA  0A14               	xorlw	20	; case 120
  6853  0002AC  B4D8               	btfsc	status,2,c
  6854  0002AE  D771               	goto	l6528
  6855  0002B0  D7D2               	goto	l6556
  6856  0002B2                     l6564:
  6857                           
  6858                           ; BSR set to: 0
  6859                           ;doprnt.c: 825: if(flag & (0x700)) {
  6860  0002B2  0E07               	movlw	7
  6861  0002B4  0100               	movlb	0	; () banked
  6862  0002B6  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  6863  0002B8  B4D8               	btfsc	status,2,c
  6864  0002BA  D36D               	goto	l775
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;doprnt.c: 827: if(flag & 0x1000)
  6868  0002BC  0100               	movlb	0	; () banked
  6869  0002BE  A9E7               	btfss	(printf@flag+1)& (0+255),4,b
  6870  0002C0  D005               	goto	l6570
  6871                           
  6872                           ; BSR set to: 0
  6873                           ;doprnt.c: 829: prec = 6;
  6874  0002C2  0E00               	movlw	0
  6875  0002C4  0100               	movlb	0	; () banked
  6876  0002C6  6FE9               	movwf	(printf@prec+1)& (0+255),b
  6877  0002C8  0E06               	movlw	6
  6878  0002CA  6FE8               	movwf	printf@prec& (0+255),b
  6879  0002CC                     l6570:
  6880                           
  6881                           ; BSR set to: 0
  6882                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  6883  0002CC  C0D5  FFD9         	movff	printf@ap,fsr2l
  6884  0002D0  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  6885  0002D4  CFDE F0DD          	movff	postinc2,printf@fval
  6886  0002D8  CFDE F0DE          	movff	postinc2,printf@fval+1
  6887  0002DC  CFDD F0DF          	movff	postdec2,printf@fval+2
  6888                           
  6889                           ; BSR set to: 0
  6890  0002E0  0E03               	movlw	3
  6891  0002E2  0100               	movlb	0	; () banked
  6892  0002E4  27D5               	addwf	printf@ap& (0+255),f,b
  6893  0002E6  0E00               	movlw	0
  6894  0002E8  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  6895                           
  6896                           ; BSR set to: 0
  6897                           ;doprnt.c: 831: if(fval < 0.0) {
  6898  0002EA  0100               	movlb	0	; () banked
  6899  0002EC  AFDF               	btfss	(printf@fval+2)& (0+255),7,b
  6900  0002EE  D011               	goto	l6580
  6901                           
  6902                           ; BSR set to: 0
  6903                           ;doprnt.c: 832: fval = -fval;
  6904  0002F0  C0DD  F023         	movff	printf@fval,___ftneg@f1
  6905  0002F4  C0DE  F024         	movff	printf@fval+1,___ftneg@f1+1
  6906  0002F8  C0DF  F025         	movff	printf@fval+2,___ftneg@f1+2
  6907  0002FC  EC99  F01E         	call	___ftneg	;wreg free
  6908  000300  C023  F0DD         	movff	?___ftneg,printf@fval
  6909  000304  C024  F0DE         	movff	?___ftneg+1,printf@fval+1
  6910  000308  C025  F0DF         	movff	?___ftneg+2,printf@fval+2
  6911                           
  6912                           ;doprnt.c: 833: flag |= 0x03;
  6913  00030C  0E03               	movlw	3
  6914  00030E  0100               	movlb	0	; () banked
  6915  000310  13E6               	iorwf	printf@flag& (0+255),f,b
  6916  000312                     l6580:
  6917                           
  6918                           ; BSR set to: 0
  6919                           ;doprnt.c: 834: }
  6920                           ;doprnt.c: 835: exp = 0;
  6921  000312  0E00               	movlw	0
  6922  000314  0100               	movlb	0	; () banked
  6923  000316  6FDC               	movwf	(printf@exp+1)& (0+255),b
  6924  000318  0E00               	movlw	0
  6925  00031A  6FDB               	movwf	printf@exp& (0+255),b
  6926                           
  6927                           ; BSR set to: 0
  6928                           ;doprnt.c: 836: if( fval!=0) {
  6929  00031C  0100               	movlb	0	; () banked
  6930  00031E  51DD               	movf	printf@fval& (0+255),w,b
  6931  000320  0100               	movlb	0	; () banked
  6932  000322  11DE               	iorwf	(printf@fval+1)& (0+255),w,b
  6933  000324  0100               	movlb	0	; () banked
  6934  000326  11DF               	iorwf	(printf@fval+2)& (0+255),w,b
  6935  000328  B4D8               	btfsc	status,2,c
  6936  00032A  D091               	goto	l6608
  6937                           
  6938                           ; BSR set to: 0
  6939                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6940  00032C  0E82               	movlw	130
  6941  00032E  0100               	movlb	0	; () banked
  6942  000330  6FC7               	movwf	??_printf& (0+255),b
  6943  000332  0EFF               	movlw	255
  6944  000334  0100               	movlb	0	; () banked
  6945  000336  6FC8               	movwf	(??_printf+1)& (0+255),b
  6946  000338  C0DD  F0C9         	movff	printf@fval,??_printf+2
  6947  00033C  C0DE  F0CA         	movff	printf@fval+1,??_printf+3
  6948  000340  C0DF  F0CB         	movff	printf@fval+2,??_printf+4
  6949  000344  C0E0  F0CC         	movff	printf@fval+3,??_printf+5
  6950  000348  0E10               	movlw	16
  6951  00034A  D006               	goto	u6830
  6952  00034C                     u6835:
  6953  00034C  0100               	movlb	0	; () banked
  6954  00034E  90D8               	bcf	status,0,c
  6955  000350  33CC               	rrcf	(??_printf+5)& (0+255),f,b
  6956  000352  33CB               	rrcf	(??_printf+4)& (0+255),f,b
  6957  000354  33CA               	rrcf	(??_printf+3)& (0+255),f,b
  6958  000356  33C9               	rrcf	(??_printf+2)& (0+255),f,b
  6959  000358                     u6830:
  6960  000358  2EE8               	decfsz	wreg,f,c
  6961  00035A  D7F8               	goto	u6835
  6962  00035C  0100               	movlb	0	; () banked
  6963  00035E  51C9               	movf	(??_printf+2)& (0+255),w,b
  6964  000360  0100               	movlb	0	; () banked
  6965  000362  25C7               	addwf	??_printf& (0+255),w,b
  6966  000364  0100               	movlb	0	; () banked
  6967  000366  6FDB               	movwf	printf@exp& (0+255),b
  6968  000368  0E00               	movlw	0
  6969  00036A  0100               	movlb	0	; () banked
  6970  00036C  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  6971  00036E  0100               	movlb	0	; () banked
  6972  000370  6FDC               	movwf	(printf@exp+1)& (0+255),b
  6973                           
  6974                           ; BSR set to: 0
  6975                           ;doprnt.c: 838: exp--;
  6976  000372  0100               	movlb	0	; () banked
  6977  000374  07DB               	decf	printf@exp& (0+255),f,b
  6978  000376  A0D8               	btfss	status,0,c
  6979  000378  07DC               	decf	(printf@exp+1)& (0+255),f,b
  6980                           
  6981                           ; BSR set to: 0
  6982                           ;doprnt.c: 839: exp *= 3;
  6983  00037A  C0DB  F031         	movff	printf@exp,___wmul@multiplier
  6984  00037E  C0DC  F032         	movff	printf@exp+1,___wmul@multiplier+1
  6985  000382  0E00               	movlw	0
  6986  000384  6E34               	movwf	___wmul@multiplicand+1,c
  6987  000386  0E03               	movlw	3
  6988  000388  6E33               	movwf	___wmul@multiplicand,c
  6989  00038A  EC86  F01E         	call	___wmul	;wreg free
  6990  00038E  C031  F0DB         	movff	?___wmul,printf@exp
  6991  000392  C032  F0DC         	movff	?___wmul+1,printf@exp+1
  6992                           
  6993                           ;doprnt.c: 840: exp /= 10;
  6994  000396  C0DB  F029         	movff	printf@exp,___awdiv@dividend
  6995  00039A  C0DC  F02A         	movff	printf@exp+1,___awdiv@dividend+1
  6996  00039E  0E00               	movlw	0
  6997  0003A0  6E2C               	movwf	___awdiv@divisor+1,c
  6998  0003A2  0E0A               	movlw	10
  6999  0003A4  6E2B               	movwf	___awdiv@divisor,c
  7000  0003A6  EC6F  F01A         	call	___awdiv	;wreg free
  7001  0003AA  C029  F0DB         	movff	?___awdiv,printf@exp
  7002  0003AE  C02A  F0DC         	movff	?___awdiv+1,printf@exp+1
  7003                           
  7004                           ;doprnt.c: 841: if(exp < 0)
  7005  0003B2  0100               	movlb	0	; () banked
  7006  0003B4  AFDC               	btfss	(printf@exp+1)& (0+255),7,b
  7007  0003B6  D004               	goto	l6596
  7008                           
  7009                           ; BSR set to: 0
  7010                           ;doprnt.c: 842: exp--;
  7011  0003B8  0100               	movlb	0	; () banked
  7012  0003BA  07DB               	decf	printf@exp& (0+255),f,b
  7013  0003BC  A0D8               	btfss	status,0,c
  7014  0003BE  07DC               	decf	(printf@exp+1)& (0+255),f,b
  7015  0003C0                     l6596:
  7016                           
  7017                           ; BSR set to: 0
  7018                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  7019  0003C0  0100               	movlb	0	; () banked
  7020  0003C2  51DB               	movf	printf@exp& (0+255),w,b
  7021  0003C4  0800               	sublw	0
  7022  0003C6  EC79  F009         	call	_scale
  7023  0003CA  C098  F0D7         	movff	?_scale,printf@tmpval
  7024  0003CE  C099  F0D8         	movff	?_scale+1,printf@tmpval+1
  7025  0003D2  C09A  F0D9         	movff	?_scale+2,printf@tmpval+2
  7026                           
  7027                           ;doprnt.c: 847: tmpval.integ *= fval;
  7028  0003D6  C0D7  F089         	movff	printf@tmpval,___ftmul@f1
  7029  0003DA  C0D8  F08A         	movff	printf@tmpval+1,___ftmul@f1+1
  7030  0003DE  C0D9  F08B         	movff	printf@tmpval+2,___ftmul@f1+2
  7031  0003E2  C0DD  F08C         	movff	printf@fval,___ftmul@f2
  7032  0003E6  C0DE  F08D         	movff	printf@fval+1,___ftmul@f2+1
  7033  0003EA  C0DF  F08E         	movff	printf@fval+2,___ftmul@f2+2
  7034  0003EE  ECAF  F010         	call	___ftmul	;wreg free
  7035  0003F2  C089  F0D7         	movff	?___ftmul,printf@tmpval
  7036  0003F6  C08A  F0D8         	movff	?___ftmul+1,printf@tmpval+1
  7037  0003FA  C08B  F0D9         	movff	?___ftmul+2,printf@tmpval+2
  7038                           
  7039                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  7040  0003FE  C0D7  F02F         	movff	printf@tmpval,___ftge@ff1
  7041  000402  C0D8  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  7042  000406  C0D9  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  7043  00040A  0E00               	movlw	0
  7044  00040C  6E32               	movwf	___ftge@ff2,c
  7045  00040E  0E80               	movlw	128
  7046  000410  6E33               	movwf	___ftge@ff2+1,c
  7047  000412  0E3F               	movlw	63
  7048  000414  6E34               	movwf	___ftge@ff2+2,c
  7049  000416  ECE3  F019         	call	___ftge	;wreg free
  7050  00041A  B0D8               	btfsc	status,0,c
  7051  00041C  D005               	goto	l6604
  7052                           
  7053                           ;doprnt.c: 849: exp--;
  7054  00041E  0100               	movlb	0	; () banked
  7055  000420  07DB               	decf	printf@exp& (0+255),f,b
  7056  000422  A0D8               	btfss	status,0,c
  7057  000424  07DC               	decf	(printf@exp+1)& (0+255),f,b
  7058  000426  D013               	goto	l6608
  7059  000428                     l6604:
  7060                           
  7061                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  7062  000428  C0D7  F02F         	movff	printf@tmpval,___ftge@ff1
  7063  00042C  C0D8  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  7064  000430  C0D9  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  7065  000434  0E00               	movlw	0
  7066  000436  6E32               	movwf	___ftge@ff2,c
  7067  000438  0E20               	movlw	32
  7068  00043A  6E33               	movwf	___ftge@ff2+1,c
  7069  00043C  0E41               	movlw	65
  7070  00043E  6E34               	movwf	___ftge@ff2+2,c
  7071  000440  ECE3  F019         	call	___ftge	;wreg free
  7072  000444  A0D8               	btfss	status,0,c
  7073  000446  D003               	goto	l6608
  7074                           
  7075                           ;doprnt.c: 851: exp++;
  7076  000448  0100               	movlb	0	; () banked
  7077  00044A  4BDB               	infsnz	printf@exp& (0+255),f,b
  7078  00044C  2BDC               	incf	(printf@exp+1)& (0+255),f,b
  7079  00044E                     l6608:
  7080                           
  7081                           ;doprnt.c: 852: }
  7082                           ;doprnt.c: 1112: if(prec <= 12)
  7083  00044E  0100               	movlb	0	; () banked
  7084  000450  BFE9               	btfsc	(printf@prec+1)& (0+255),7,b
  7085  000452  D008               	goto	l6610
  7086  000454  0100               	movlb	0	; () banked
  7087  000456  51E9               	movf	(printf@prec+1)& (0+255),w,b
  7088  000458  E11D               	bnz	l6612
  7089  00045A  0E0D               	movlw	13
  7090  00045C  0100               	movlb	0	; () banked
  7091  00045E  5DE8               	subwf	printf@prec& (0+255),w,b
  7092  000460  B0D8               	btfsc	status,0,c
  7093  000462  D018               	goto	l6612
  7094  000464                     l6610:
  7095                           
  7096                           ; BSR set to: 0
  7097                           ;doprnt.c: 1113: fval += fround(prec);
  7098  000464  C0DD  F0A2         	movff	printf@fval,___ftadd@f1
  7099  000468  C0DE  F0A3         	movff	printf@fval+1,___ftadd@f1+1
  7100  00046C  C0DF  F0A4         	movff	printf@fval+2,___ftadd@f1+2
  7101  000470  0100               	movlb	0	; () banked
  7102  000472  51E8               	movf	printf@prec& (0+255),w,b
  7103  000474  ECA2  F00E         	call	_fround
  7104  000478  C098  F0A5         	movff	?_fround,___ftadd@f2
  7105  00047C  C099  F0A6         	movff	?_fround+1,___ftadd@f2+1
  7106  000480  C09A  F0A7         	movff	?_fround+2,___ftadd@f2+2
  7107  000484  EC6E  F00D         	call	___ftadd	;wreg free
  7108  000488  C0A2  F0DD         	movff	?___ftadd,printf@fval
  7109  00048C  C0A3  F0DE         	movff	?___ftadd+1,printf@fval+1
  7110  000490  C0A4  F0DF         	movff	?___ftadd+2,printf@fval+2
  7111  000494                     l6612:
  7112                           
  7113                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  7114  000494  0100               	movlb	0	; () banked
  7115  000496  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  7116  000498  D008               	goto	l6614
  7117  00049A  0100               	movlb	0	; () banked
  7118  00049C  51DC               	movf	(printf@exp+1)& (0+255),w,b
  7119  00049E  E12A               	bnz	l6620
  7120  0004A0  0E0A               	movlw	10
  7121  0004A2  0100               	movlb	0	; () banked
  7122  0004A4  5DDB               	subwf	printf@exp& (0+255),w,b
  7123  0004A6  B0D8               	btfsc	status,0,c
  7124  0004A8  D025               	goto	l6620
  7125  0004AA                     l6614:
  7126                           
  7127                           ; BSR set to: 0
  7128  0004AA  0100               	movlb	0	; () banked
  7129  0004AC  51DD               	movf	printf@fval& (0+255),w,b
  7130  0004AE  0100               	movlb	0	; () banked
  7131  0004B0  11DE               	iorwf	(printf@fval+1)& (0+255),w,b
  7132  0004B2  0100               	movlb	0	; () banked
  7133  0004B4  11DF               	iorwf	(printf@fval+2)& (0+255),w,b
  7134  0004B6  B4D8               	btfsc	status,2,c
  7135  0004B8  D05F               	goto	l6634
  7136                           
  7137                           ; BSR set to: 0
  7138  0004BA  C0DD  F0AE         	movff	printf@fval,___fttol@f1
  7139  0004BE  C0DE  F0AF         	movff	printf@fval+1,___fttol@f1+1
  7140  0004C2  C0DF  F0B0         	movff	printf@fval+2,___fttol@f1+2
  7141  0004C6  EC0A  F012         	call	___fttol	;wreg free
  7142  0004CA  0100               	movlb	0	; () banked
  7143  0004CC  51AE               	movf	?___fttol& (0+255),w,b
  7144  0004CE  0100               	movlb	0	; () banked
  7145  0004D0  11AF               	iorwf	(?___fttol+1)& (0+255),w,b
  7146  0004D2  0100               	movlb	0	; () banked
  7147  0004D4  11B0               	iorwf	(?___fttol+2)& (0+255),w,b
  7148  0004D6  0100               	movlb	0	; () banked
  7149  0004D8  11B1               	iorwf	(?___fttol+3)& (0+255),w,b
  7150  0004DA  A4D8               	btfss	status,2,c
  7151  0004DC  D04D               	goto	l6634
  7152                           
  7153                           ; BSR set to: 0
  7154  0004DE  0100               	movlb	0	; () banked
  7155  0004E0  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  7156  0004E2  D04A               	goto	l6634
  7157  0004E4  0100               	movlb	0	; () banked
  7158  0004E6  51DC               	movf	(printf@exp+1)& (0+255),w,b
  7159  0004E8  E105               	bnz	l6620
  7160  0004EA  0E02               	movlw	2
  7161  0004EC  0100               	movlb	0	; () banked
  7162  0004EE  5DDB               	subwf	printf@exp& (0+255),w,b
  7163  0004F0  A0D8               	btfss	status,0,c
  7164  0004F2  D042               	goto	l6634
  7165  0004F4                     l6620:
  7166                           
  7167                           ; BSR set to: 0
  7168                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  7169  0004F4  C0D7  F02F         	movff	printf@tmpval,___ftge@ff1
  7170  0004F8  C0D8  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  7171  0004FC  C0D9  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  7172  000500  0E70               	movlw	112
  7173  000502  6E32               	movwf	___ftge@ff2,c
  7174  000504  0E89               	movlw	137
  7175  000506  6E33               	movwf	___ftge@ff2+1,c
  7176  000508  0E40               	movlw	64
  7177  00050A  6E34               	movwf	___ftge@ff2+2,c
  7178  00050C  ECE3  F019         	call	___ftge	;wreg free
  7179  000510  B0D8               	btfsc	status,0,c
  7180  000512  D003               	goto	l6624
  7181                           
  7182                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  7183  000514  0100               	movlb	0	; () banked
  7184  000516  0EF7               	movlw	247
  7185  000518  D002               	goto	L1
  7186  00051A                     l6624:
  7187                           
  7188                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  7189  00051A  0100               	movlb	0	; () banked
  7190  00051C  0EF8               	movlw	248
  7191  00051E                     L1:
  7192  00051E  27DB               	addwf	printf@exp& (0+255),f,b
  7193  000520  0EFF               	movlw	255
  7194  000522  23DC               	addwfc	(printf@exp+1)& (0+255),f,b
  7195                           
  7196                           ; BSR set to: 0
  7197                           ;doprnt.c: 1124: }
  7198                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  7199                           
  7200                           ; BSR set to: 0
  7201  000524  0100               	movlb	0	; () banked
  7202  000526  51DB               	movf	printf@exp& (0+255),w,b
  7203  000528  EC79  F009         	call	_scale
  7204  00052C  C098  F0D7         	movff	?_scale,printf@tmpval
  7205  000530  C099  F0D8         	movff	?_scale+1,printf@tmpval+1
  7206  000534  C09A  F0D9         	movff	?_scale+2,printf@tmpval+2
  7207                           
  7208                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  7209  000538  C0DD  F023         	movff	printf@fval,__tdiv_to_l_@f1
  7210  00053C  C0DE  F024         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  7211  000540  C0DF  F025         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  7212  000544  C0D7  F026         	movff	printf@tmpval,__tdiv_to_l_@f2
  7213  000548  C0D8  F027         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  7214  00054C  C0D9  F028         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  7215  000550  ECAC  F012         	call	__tdiv_to_l_	;wreg free
  7216  000554  C023  F0E0         	movff	?__tdiv_to_l_,printf@val
  7217  000558  C024  F0E1         	movff	?__tdiv_to_l_+1,printf@val+1
  7218  00055C  C025  F0E2         	movff	?__tdiv_to_l_+2,printf@val+2
  7219  000560  C026  F0E3         	movff	?__tdiv_to_l_+3,printf@val+3
  7220                           
  7221                           ;doprnt.c: 1129: fval = 0.0;
  7222  000564  0E00               	movlw	0
  7223  000566  0100               	movlb	0	; () banked
  7224  000568  6FDD               	movwf	printf@fval& (0+255),b
  7225  00056A  0E00               	movlw	0
  7226  00056C  0100               	movlb	0	; () banked
  7227  00056E  6FDE               	movwf	(printf@fval+1)& (0+255),b
  7228  000570  0E00               	movlw	0
  7229  000572  0100               	movlb	0	; () banked
  7230  000574  6FDF               	movwf	(printf@fval+2)& (0+255),b
  7231                           
  7232                           ;doprnt.c: 1130: } else {
  7233  000576  D033               	goto	l6638
  7234  000578                     l6634:
  7235                           
  7236                           ; BSR set to: 0
  7237                           ;doprnt.c: 1131: val = (unsigned long)fval;
  7238  000578  C0DD  F0AE         	movff	printf@fval,___fttol@f1
  7239  00057C  C0DE  F0AF         	movff	printf@fval+1,___fttol@f1+1
  7240  000580  C0DF  F0B0         	movff	printf@fval+2,___fttol@f1+2
  7241  000584  EC0A  F012         	call	___fttol	;wreg free
  7242  000588  C0AE  F0E0         	movff	?___fttol,printf@val
  7243  00058C  C0AF  F0E1         	movff	?___fttol+1,printf@val+1
  7244  000590  C0B0  F0E2         	movff	?___fttol+2,printf@val+2
  7245  000594  C0B1  F0E3         	movff	?___fttol+3,printf@val+3
  7246                           
  7247                           ;doprnt.c: 1132: fval -= (double)val;
  7248  000598  C0DD  F0AE         	movff	printf@fval,___ftsub@f1
  7249  00059C  C0DE  F0AF         	movff	printf@fval+1,___ftsub@f1+1
  7250  0005A0  C0DF  F0B0         	movff	printf@fval+2,___ftsub@f1+2
  7251  0005A4  C0E0  F02B         	movff	printf@val,___lltoft@c
  7252  0005A8  C0E1  F02C         	movff	printf@val+1,___lltoft@c+1
  7253  0005AC  C0E2  F02D         	movff	printf@val+2,___lltoft@c+2
  7254  0005B0  C0E3  F02E         	movff	printf@val+3,___lltoft@c+3
  7255  0005B4  ECC8  F01C         	call	___lltoft	;wreg free
  7256  0005B8  C02B  F0B1         	movff	?___lltoft,___ftsub@f2
  7257  0005BC  C02C  F0B2         	movff	?___lltoft+1,___ftsub@f2+1
  7258  0005C0  C02D  F0B3         	movff	?___lltoft+2,___ftsub@f2+2
  7259  0005C4  EC6F  F01D         	call	___ftsub	;wreg free
  7260  0005C8  C0AE  F0DD         	movff	?___ftsub,printf@fval
  7261  0005CC  C0AF  F0DE         	movff	?___ftsub+1,printf@fval+1
  7262  0005D0  C0B0  F0DF         	movff	?___ftsub+2,printf@fval+2
  7263                           
  7264                           ;doprnt.c: 1133: exp = 0;
  7265  0005D4  0E00               	movlw	0
  7266  0005D6  0100               	movlb	0	; () banked
  7267  0005D8  6FDC               	movwf	(printf@exp+1)& (0+255),b
  7268  0005DA  0E00               	movlw	0
  7269  0005DC  6FDB               	movwf	printf@exp& (0+255),b
  7270  0005DE                     l6638:
  7271                           
  7272                           ; BSR set to: 0
  7273                           ;doprnt.c: 1134: }
  7274                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  7275  0005DE  0E01               	movlw	1
  7276  0005E0  0100               	movlb	0	; () banked
  7277  0005E2  6FEA               	movwf	printf@c& (0+255),b
  7278  0005E4                     l6640:
  7279                           
  7280                           ; BSR set to: 0
  7281  0005E4  0E0A               	movlw	10
  7282  0005E6  0100               	movlb	0	; () banked
  7283  0005E8  19EA               	xorwf	printf@c& (0+255),w,b
  7284  0005EA  B4D8               	btfsc	status,2,c
  7285  0005EC  D01E               	goto	l6652
  7286                           
  7287                           ; BSR set to: 0
  7288                           ;doprnt.c: 1137: if(val < dpowers[c])
  7289                           
  7290                           ; BSR set to: 0
  7291                           
  7292                           ; BSR set to: 0
  7293  0005EE  0100               	movlb	0	; () banked
  7294  0005F0  51EA               	movf	printf@c& (0+255),w,b
  7295  0005F2  0D04               	mullw	4
  7296  0005F4  0E0F               	movlw	low _dpowers
  7297  0005F6  24F3               	addwf	prodl,w,c
  7298  0005F8  6EF6               	movwf	tblptrl,c
  7299  0005FA  0EFE               	movlw	high _dpowers
  7300  0005FC  20F4               	addwfc	prodh,w,c
  7301  0005FE  6EF7               	movwf	tblptrh,c
  7302  000600                     	if	0	;There are less than 3 active tblptr bytes
  7303  000600                     	endif
  7304  000600  0009               	tblrd		*+
  7305  000602  50F5               	movf	tablat,w,c
  7306  000604  0100               	movlb	0	; () banked
  7307  000606  5DE0               	subwf	printf@val& (0+255),w,b
  7308  000608  0009               	tblrd		*+
  7309  00060A  50F5               	movf	tablat,w,c
  7310  00060C  0100               	movlb	0	; () banked
  7311  00060E  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  7312  000610  0009               	tblrd		*+
  7313  000612  50F5               	movf	tablat,w,c
  7314  000614  0100               	movlb	0	; () banked
  7315  000616  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  7316  000618  0009               	tblrd		*+
  7317  00061A  50F5               	movf	tablat,w,c
  7318  00061C  0100               	movlb	0	; () banked
  7319  00061E  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  7320  000620  A0D8               	btfss	status,0,c
  7321  000622  D003               	goto	l6652
  7322                           
  7323                           ; BSR set to: 0
  7324                           
  7325                           ; BSR set to: 0
  7326                           
  7327                           ; BSR set to: 0
  7328                           ;doprnt.c: 1138: break;
  7329  000624  0100               	movlb	0	; () banked
  7330  000626  2BEA               	incf	printf@c& (0+255),f,b
  7331  000628  D7DD               	goto	l6640
  7332  00062A                     l6652:
  7333                           
  7334                           ; BSR set to: 0
  7335                           ;doprnt.c: 1142: width -= prec + c + exp;
  7336  00062A  C0EA  F0C7         	movff	printf@c,??_printf
  7337  00062E  0100               	movlb	0	; () banked
  7338  000630  6BC8               	clrf	(??_printf+1)& (0+255),b
  7339  000632  BFC7               	btfsc	??_printf& (0+255),7,b
  7340  000634  07C8               	decf	(??_printf+1)& (0+255),f,b
  7341  000636  0100               	movlb	0	; () banked
  7342  000638  51E8               	movf	printf@prec& (0+255),w,b
  7343  00063A  0100               	movlb	0	; () banked
  7344  00063C  27C7               	addwf	??_printf& (0+255),f,b
  7345  00063E  0100               	movlb	0	; () banked
  7346  000640  51E9               	movf	(printf@prec+1)& (0+255),w,b
  7347  000642  0100               	movlb	0	; () banked
  7348  000644  23C8               	addwfc	(??_printf+1)& (0+255),f,b
  7349  000646  0100               	movlb	0	; () banked
  7350  000648  51DB               	movf	printf@exp& (0+255),w,b
  7351  00064A  0100               	movlb	0	; () banked
  7352  00064C  27C7               	addwf	??_printf& (0+255),f,b
  7353  00064E  0100               	movlb	0	; () banked
  7354  000650  51DC               	movf	(printf@exp+1)& (0+255),w,b
  7355  000652  0100               	movlb	0	; () banked
  7356  000654  23C8               	addwfc	(??_printf+1)& (0+255),f,b
  7357  000656  0100               	movlb	0	; () banked
  7358  000658  51C7               	movf	??_printf& (0+255),w,b
  7359  00065A  0100               	movlb	0	; () banked
  7360  00065C  5FE4               	subwf	printf@width& (0+255),f,b
  7361  00065E  0100               	movlb	0	; () banked
  7362  000660  51C8               	movf	(??_printf+1)& (0+255),w,b
  7363  000662  0100               	movlb	0	; () banked
  7364  000664  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  7365                           
  7366                           ;doprnt.c: 1143: if(
  7367                           ;doprnt.c: 1147: prec)
  7368  000666  0100               	movlb	0	; () banked
  7369  000668  51E8               	movf	printf@prec& (0+255),w,b
  7370  00066A  0100               	movlb	0	; () banked
  7371  00066C  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  7372  00066E  B4D8               	btfsc	status,2,c
  7373  000670  D004               	goto	l6656
  7374                           
  7375                           ; BSR set to: 0
  7376                           ;doprnt.c: 1148: width--;
  7377  000672  0100               	movlb	0	; () banked
  7378  000674  07E4               	decf	printf@width& (0+255),f,b
  7379  000676  A0D8               	btfss	status,0,c
  7380  000678  07E5               	decf	(printf@width+1)& (0+255),f,b
  7381  00067A                     l6656:
  7382                           
  7383                           ; BSR set to: 0
  7384                           ;doprnt.c: 1149: if(flag & 0x03)
  7385  00067A  0E03               	movlw	3
  7386  00067C  0100               	movlb	0	; () banked
  7387  00067E  15E6               	andwf	printf@flag& (0+255),w,b
  7388  000680  0100               	movlb	0	; () banked
  7389  000682  6FC7               	movwf	??_printf& (0+255),b
  7390  000684  0E00               	movlw	0
  7391  000686  0100               	movlb	0	; () banked
  7392  000688  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  7393  00068A  0100               	movlb	0	; () banked
  7394  00068C  6FC8               	movwf	(??_printf+1)& (0+255),b
  7395  00068E  0100               	movlb	0	; () banked
  7396  000690  51C7               	movf	??_printf& (0+255),w,b
  7397  000692  0100               	movlb	0	; () banked
  7398  000694  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  7399  000696  B4D8               	btfsc	status,2,c
  7400  000698  D004               	goto	l6660
  7401                           
  7402                           ; BSR set to: 0
  7403                           ;doprnt.c: 1150: width--;
  7404  00069A  0100               	movlb	0	; () banked
  7405  00069C  07E4               	decf	printf@width& (0+255),f,b
  7406  00069E  A0D8               	btfss	status,0,c
  7407  0006A0  07E5               	decf	(printf@width+1)& (0+255),f,b
  7408  0006A2                     l6660:
  7409                           
  7410                           ; BSR set to: 0
  7411                           ;doprnt.c: 1153: if(flag & 0x04) {
  7412  0006A2  0100               	movlb	0	; () banked
  7413  0006A4  A5E6               	btfss	printf@flag& (0+255),2,b
  7414  0006A6  D02D               	goto	l6676
  7415                           
  7416                           ; BSR set to: 0
  7417                           ;doprnt.c: 1157: if(flag & 0x03)
  7418  0006A8  0E03               	movlw	3
  7419  0006AA  0100               	movlb	0	; () banked
  7420  0006AC  15E6               	andwf	printf@flag& (0+255),w,b
  7421  0006AE  0100               	movlb	0	; () banked
  7422  0006B0  6FC7               	movwf	??_printf& (0+255),b
  7423  0006B2  0E00               	movlw	0
  7424  0006B4  0100               	movlb	0	; () banked
  7425  0006B6  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  7426  0006B8  0100               	movlb	0	; () banked
  7427  0006BA  6FC8               	movwf	(??_printf+1)& (0+255),b
  7428  0006BC  0100               	movlb	0	; () banked
  7429  0006BE  51C7               	movf	??_printf& (0+255),w,b
  7430  0006C0  0100               	movlb	0	; () banked
  7431  0006C2  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  7432  0006C4  B4D8               	btfsc	status,2,c
  7433  0006C6  D00B               	goto	l6670
  7434                           
  7435                           ; BSR set to: 0
  7436                           ;doprnt.c: 1159: (putch('-') );
  7437  0006C8  0E2D               	movlw	45
  7438  0006CA  ECBC  F01E         	call	_putch
  7439                           
  7440                           ;doprnt.c: 1168: while(width > 0) {
  7441  0006CE  D007               	goto	l6670
  7442  0006D0                     l6666:
  7443                           
  7444                           ;doprnt.c: 1169: (putch('0') );
  7445  0006D0  0E30               	movlw	48
  7446  0006D2  ECBC  F01E         	call	_putch
  7447                           
  7448                           ;doprnt.c: 1170: width--;
  7449  0006D6  0100               	movlb	0	; () banked
  7450  0006D8  07E4               	decf	printf@width& (0+255),f,b
  7451  0006DA  A0D8               	btfss	status,0,c
  7452  0006DC  07E5               	decf	(printf@width+1)& (0+255),f,b
  7453  0006DE                     l6670:
  7454  0006DE  0100               	movlb	0	; () banked
  7455  0006E0  BFE5               	btfsc	(printf@width+1)& (0+255),7,b
  7456  0006E2  D073               	goto	l6688
  7457  0006E4  0100               	movlb	0	; () banked
  7458  0006E6  51E5               	movf	(printf@width+1)& (0+255),w,b
  7459  0006E8  E1F3               	bnz	l6666
  7460  0006EA  0100               	movlb	0	; () banked
  7461  0006EC  05E4               	decf	printf@width& (0+255),w,b
  7462  0006EE  A0D8               	btfss	status,0,c
  7463  0006F0  D06C               	goto	l6688
  7464  0006F2  D7EE               	goto	l6666
  7465  0006F4                     l6672:
  7466                           
  7467                           ; BSR set to: 0
  7468                           ;doprnt.c: 1181: (putch(' ') );
  7469  0006F4  0E20               	movlw	32
  7470  0006F6  ECBC  F01E         	call	_putch
  7471                           
  7472                           ;doprnt.c: 1182: width--;
  7473  0006FA  0100               	movlb	0	; () banked
  7474  0006FC  07E4               	decf	printf@width& (0+255),f,b
  7475  0006FE  A0D8               	btfss	status,0,c
  7476  000700  07E5               	decf	(printf@width+1)& (0+255),f,b
  7477  000702                     l6676:
  7478                           
  7479                           ; BSR set to: 0
  7480  000702  0100               	movlb	0	; () banked
  7481  000704  BFE5               	btfsc	(printf@width+1)& (0+255),7,b
  7482  000706  D007               	goto	l6678
  7483  000708  0100               	movlb	0	; () banked
  7484  00070A  51E5               	movf	(printf@width+1)& (0+255),w,b
  7485  00070C  E1F3               	bnz	l6672
  7486  00070E  0100               	movlb	0	; () banked
  7487  000710  05E4               	decf	printf@width& (0+255),w,b
  7488  000712  B0D8               	btfsc	status,0,c
  7489  000714  D7EF               	goto	l6672
  7490  000716                     l6678:
  7491                           
  7492                           ; BSR set to: 0
  7493                           ;doprnt.c: 1183: }
  7494                           ;doprnt.c: 1188: if(flag & 0x03)
  7495  000716  0E03               	movlw	3
  7496  000718  0100               	movlb	0	; () banked
  7497  00071A  15E6               	andwf	printf@flag& (0+255),w,b
  7498  00071C  0100               	movlb	0	; () banked
  7499  00071E  6FC7               	movwf	??_printf& (0+255),b
  7500  000720  0E00               	movlw	0
  7501  000722  0100               	movlb	0	; () banked
  7502  000724  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  7503  000726  0100               	movlb	0	; () banked
  7504  000728  6FC8               	movwf	(??_printf+1)& (0+255),b
  7505  00072A  0100               	movlb	0	; () banked
  7506  00072C  51C7               	movf	??_printf& (0+255),w,b
  7507  00072E  0100               	movlb	0	; () banked
  7508  000730  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  7509  000732  B4D8               	btfsc	status,2,c
  7510  000734  D04A               	goto	l6688
  7511                           
  7512                           ; BSR set to: 0
  7513                           ;doprnt.c: 1190: (putch('-') );
  7514  000736  0E2D               	movlw	45
  7515  000738  ECBC  F01E         	call	_putch
  7516                           
  7517                           ;doprnt.c: 1195: }
  7518                           ;doprnt.c: 1196: while(c--) {
  7519  00073C  D046               	goto	l6688
  7520  00073E                     l6682:
  7521                           
  7522                           ;doprnt.c: 1200: {
  7523                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  7524  00073E  C0E0  F023         	movff	printf@val,___lldiv@dividend
  7525  000742  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  7526  000746  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  7527  00074A  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  7528  00074E  0100               	movlb	0	; () banked
  7529  000750  51EA               	movf	printf@c& (0+255),w,b
  7530  000752  0D04               	mullw	4
  7531  000754  0E0F               	movlw	low _dpowers
  7532  000756  24F3               	addwf	prodl,w,c
  7533  000758  6EF6               	movwf	tblptrl,c
  7534  00075A  0EFE               	movlw	high _dpowers
  7535  00075C  20F4               	addwfc	prodh,w,c
  7536  00075E  6EF7               	movwf	tblptrh,c
  7537  000760                     	if	0	;There are less than 3 active tblptr bytes
  7538  000760                     	endif
  7539  000760  0009               	tblrd		*+
  7540  000762  CFF5 F027          	movff	tablat,___lldiv@divisor
  7541  000766  0009               	tblrd		*+
  7542  000768  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  7543  00076C  0009               	tblrd		*+
  7544  00076E  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  7545  000772  000A               	tblrd		*-
  7546  000774  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  7547  000778  ECB1  F01A         	call	___lldiv	;wreg free
  7548  00077C  C023  F0D7         	movff	?___lldiv,printf@tmpval
  7549  000780  C024  F0D8         	movff	?___lldiv+1,printf@tmpval+1
  7550  000784  C025  F0D9         	movff	?___lldiv+2,printf@tmpval+2
  7551  000788  C026  F0DA         	movff	?___lldiv+3,printf@tmpval+3
  7552                           
  7553                           ;doprnt.c: 1202: tmpval.vd %= 10;
  7554  00078C  C0D7  F030         	movff	printf@tmpval,___llmod@dividend
  7555  000790  C0D8  F031         	movff	printf@tmpval+1,___llmod@dividend+1
  7556  000794  C0D9  F032         	movff	printf@tmpval+2,___llmod@dividend+2
  7557  000798  C0DA  F033         	movff	printf@tmpval+3,___llmod@dividend+3
  7558  00079C  0E0A               	movlw	10
  7559  00079E  6E34               	movwf	___llmod@divisor,c
  7560  0007A0  0E00               	movlw	0
  7561  0007A2  6E35               	movwf	___llmod@divisor+1,c
  7562  0007A4  0E00               	movlw	0
  7563  0007A6  6E36               	movwf	___llmod@divisor+2,c
  7564  0007A8  0E00               	movlw	0
  7565  0007AA  6E37               	movwf	___llmod@divisor+3,c
  7566  0007AC  ECD1  F01B         	call	___llmod	;wreg free
  7567  0007B0  C030  F0D7         	movff	?___llmod,printf@tmpval
  7568  0007B4  C031  F0D8         	movff	?___llmod+1,printf@tmpval+1
  7569  0007B8  C032  F0D9         	movff	?___llmod+2,printf@tmpval+2
  7570  0007BC  C033  F0DA         	movff	?___llmod+3,printf@tmpval+3
  7571                           
  7572                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  7573  0007C0  0100               	movlb	0	; () banked
  7574  0007C2  51D7               	movf	printf@tmpval& (0+255),w,b
  7575  0007C4  0F30               	addlw	48
  7576  0007C6  ECBC  F01E         	call	_putch
  7577  0007CA                     l6688:
  7578  0007CA  0100               	movlb	0	; () banked
  7579  0007CC  07EA               	decf	printf@c& (0+255),f,b
  7580  0007CE  0100               	movlb	0	; () banked
  7581  0007D0  29EA               	incf	printf@c& (0+255),w,b
  7582  0007D2  B4D8               	btfsc	status,2,c
  7583  0007D4  D008               	goto	l6694
  7584  0007D6  D7B3               	goto	l6682
  7585  0007D8                     l6690:
  7586                           
  7587                           ; BSR set to: 0
  7588                           ;doprnt.c: 1208: (putch('0') );
  7589  0007D8  0E30               	movlw	48
  7590  0007DA  ECBC  F01E         	call	_putch
  7591                           
  7592                           ;doprnt.c: 1209: exp--;
  7593  0007DE  0100               	movlb	0	; () banked
  7594  0007E0  07DB               	decf	printf@exp& (0+255),f,b
  7595  0007E2  A0D8               	btfss	status,0,c
  7596  0007E4  07DC               	decf	(printf@exp+1)& (0+255),f,b
  7597  0007E6                     l6694:
  7598                           
  7599                           ; BSR set to: 0
  7600  0007E6  0100               	movlb	0	; () banked
  7601  0007E8  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  7602  0007EA  D007               	goto	l6696
  7603  0007EC  0100               	movlb	0	; () banked
  7604  0007EE  51DC               	movf	(printf@exp+1)& (0+255),w,b
  7605  0007F0  E1F3               	bnz	l6690
  7606  0007F2  0100               	movlb	0	; () banked
  7607  0007F4  05DB               	decf	printf@exp& (0+255),w,b
  7608  0007F6  B0D8               	btfsc	status,0,c
  7609  0007F8  D7EF               	goto	l6690
  7610  0007FA                     l6696:
  7611                           
  7612                           ; BSR set to: 0
  7613                           ;doprnt.c: 1210: }
  7614                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  7615  0007FA  0100               	movlb	0	; () banked
  7616  0007FC  BFE9               	btfsc	(printf@prec+1)& (0+255),7,b
  7617  0007FE  D00C               	goto	l815
  7618  000800  0100               	movlb	0	; () banked
  7619  000802  51E9               	movf	(printf@prec+1)& (0+255),w,b
  7620  000804  E105               	bnz	u7050
  7621  000806  0E09               	movlw	9
  7622  000808  0100               	movlb	0	; () banked
  7623  00080A  5DE8               	subwf	printf@prec& (0+255),w,b
  7624  00080C  A0D8               	btfss	status,0,c
  7625  00080E  D004               	goto	l815
  7626  000810                     u7050:
  7627                           
  7628                           ; BSR set to: 0
  7629                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  7630  000810  0E08               	movlw	8
  7631  000812  0100               	movlb	0	; () banked
  7632  000814  6FEA               	movwf	printf@c& (0+255),b
  7633  000816  D002               	goto	l6700
  7634  000818                     l815:
  7635                           
  7636                           ; BSR set to: 0
  7637                           ;doprnt.c: 1213: else
  7638                           ;doprnt.c: 1214: c = prec;
  7639  000818  C0E8  F0EA         	movff	printf@prec,printf@c
  7640  00081C                     l6700:
  7641                           
  7642                           ; BSR set to: 0
  7643                           ;doprnt.c: 1215: prec -= c;
  7644  00081C  0100               	movlb	0	; () banked
  7645  00081E  51EA               	movf	printf@c& (0+255),w,b
  7646  000820  0100               	movlb	0	; () banked
  7647  000822  5FE8               	subwf	printf@prec& (0+255),f,b
  7648  000824  0E00               	movlw	0
  7649  000826  0100               	movlb	0	; () banked
  7650  000828  BFEA               	btfsc	printf@c& (0+255),7,b
  7651  00082A  0EFF               	movlw	255
  7652  00082C  0100               	movlb	0	; () banked
  7653  00082E  5BE9               	subwfb	(printf@prec+1)& (0+255),f,b
  7654                           
  7655                           ; BSR set to: 0
  7656                           ;doprnt.c: 1219: if(c)
  7657  000830  0100               	movlb	0	; () banked
  7658  000832  51EA               	movf	printf@c& (0+255),w,b
  7659  000834  0100               	movlb	0	; () banked
  7660  000836  B4D8               	btfsc	status,2,c
  7661  000838  D003               	goto	l6706
  7662                           
  7663                           ; BSR set to: 0
  7664                           ;doprnt.c: 1221: (putch('.') );
  7665  00083A  0E2E               	movlw	46
  7666  00083C  ECBC  F01E         	call	_putch
  7667  000840                     l6706:
  7668                           
  7669                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7670  000840  0100               	movlb	0	; () banked
  7671  000842  51EA               	movf	printf@c& (0+255),w,b
  7672  000844  EC79  F009         	call	_scale
  7673  000848  C098  F0CD         	movff	?_scale,_printf$1438
  7674  00084C  C099  F0CE         	movff	?_scale+1,_printf$1438+1
  7675  000850  C09A  F0CF         	movff	?_scale+2,_printf$1438+2
  7676                           
  7677                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7678  000854  C0DD  F08C         	movff	printf@fval,___ftmul@f2
  7679  000858  C0DE  F08D         	movff	printf@fval+1,___ftmul@f2+1
  7680  00085C  C0DF  F08E         	movff	printf@fval+2,___ftmul@f2+2
  7681  000860  C0CD  F089         	movff	_printf$1438,___ftmul@f1
  7682  000864  C0CE  F08A         	movff	_printf$1438+1,___ftmul@f1+1
  7683  000868  C0CF  F08B         	movff	_printf$1438+2,___ftmul@f1+2
  7684  00086C  ECAF  F010         	call	___ftmul	;wreg free
  7685  000870  C089  F0AE         	movff	?___ftmul,___fttol@f1
  7686  000874  C08A  F0AF         	movff	?___ftmul+1,___fttol@f1+1
  7687  000878  C08B  F0B0         	movff	?___ftmul+2,___fttol@f1+2
  7688  00087C  EC0A  F012         	call	___fttol	;wreg free
  7689  000880  C0AE  F0E0         	movff	?___fttol,printf@val
  7690  000884  C0AF  F0E1         	movff	?___fttol+1,printf@val+1
  7691  000888  C0B0  F0E2         	movff	?___fttol+2,printf@val+2
  7692  00088C  C0B1  F0E3         	movff	?___fttol+3,printf@val+3
  7693                           
  7694                           ;doprnt.c: 1228: while(c--) {
  7695  000890  D06D               	goto	l6716
  7696  000892                     l6710:
  7697                           
  7698                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  7699  000892  C0E0  F023         	movff	printf@val,___lldiv@dividend
  7700  000896  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  7701  00089A  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  7702  00089E  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  7703  0008A2  0100               	movlb	0	; () banked
  7704  0008A4  51EA               	movf	printf@c& (0+255),w,b
  7705  0008A6  0D04               	mullw	4
  7706  0008A8  0E0F               	movlw	low _dpowers
  7707  0008AA  24F3               	addwf	prodl,w,c
  7708  0008AC  6EF6               	movwf	tblptrl,c
  7709  0008AE  0EFE               	movlw	high _dpowers
  7710  0008B0  20F4               	addwfc	prodh,w,c
  7711  0008B2  6EF7               	movwf	tblptrh,c
  7712  0008B4                     	if	0	;There are less than 3 active tblptr bytes
  7713  0008B4                     	endif
  7714  0008B4  0009               	tblrd		*+
  7715  0008B6  CFF5 F027          	movff	tablat,___lldiv@divisor
  7716  0008BA  0009               	tblrd		*+
  7717  0008BC  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  7718  0008C0  0009               	tblrd		*+
  7719  0008C2  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  7720  0008C6  000A               	tblrd		*-
  7721  0008C8  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  7722  0008CC  ECB1  F01A         	call	___lldiv	;wreg free
  7723  0008D0  C023  F0D7         	movff	?___lldiv,printf@tmpval
  7724  0008D4  C024  F0D8         	movff	?___lldiv+1,printf@tmpval+1
  7725  0008D8  C025  F0D9         	movff	?___lldiv+2,printf@tmpval+2
  7726  0008DC  C026  F0DA         	movff	?___lldiv+3,printf@tmpval+3
  7727                           
  7728                           ;doprnt.c: 1230: tmpval.vd %= 10;
  7729  0008E0  C0D7  F030         	movff	printf@tmpval,___llmod@dividend
  7730  0008E4  C0D8  F031         	movff	printf@tmpval+1,___llmod@dividend+1
  7731  0008E8  C0D9  F032         	movff	printf@tmpval+2,___llmod@dividend+2
  7732  0008EC  C0DA  F033         	movff	printf@tmpval+3,___llmod@dividend+3
  7733  0008F0  0E0A               	movlw	10
  7734  0008F2  6E34               	movwf	___llmod@divisor,c
  7735  0008F4  0E00               	movlw	0
  7736  0008F6  6E35               	movwf	___llmod@divisor+1,c
  7737  0008F8  0E00               	movlw	0
  7738  0008FA  6E36               	movwf	___llmod@divisor+2,c
  7739  0008FC  0E00               	movlw	0
  7740  0008FE  6E37               	movwf	___llmod@divisor+3,c
  7741  000900  ECD1  F01B         	call	___llmod	;wreg free
  7742  000904  C030  F0D7         	movff	?___llmod,printf@tmpval
  7743  000908  C031  F0D8         	movff	?___llmod+1,printf@tmpval+1
  7744  00090C  C032  F0D9         	movff	?___llmod+2,printf@tmpval+2
  7745  000910  C033  F0DA         	movff	?___llmod+3,printf@tmpval+3
  7746                           
  7747                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  7748  000914  0100               	movlb	0	; () banked
  7749  000916  51D7               	movf	printf@tmpval& (0+255),w,b
  7750  000918  0F30               	addlw	48
  7751  00091A  ECBC  F01E         	call	_putch
  7752                           
  7753                           ;doprnt.c: 1232: val %= dpowers[c];
  7754  00091E  C0E0  F030         	movff	printf@val,___llmod@dividend
  7755  000922  C0E1  F031         	movff	printf@val+1,___llmod@dividend+1
  7756  000926  C0E2  F032         	movff	printf@val+2,___llmod@dividend+2
  7757  00092A  C0E3  F033         	movff	printf@val+3,___llmod@dividend+3
  7758  00092E  0100               	movlb	0	; () banked
  7759  000930  51EA               	movf	printf@c& (0+255),w,b
  7760  000932  0D04               	mullw	4
  7761  000934  0E0F               	movlw	low _dpowers
  7762  000936  24F3               	addwf	prodl,w,c
  7763  000938  6EF6               	movwf	tblptrl,c
  7764  00093A  0EFE               	movlw	high _dpowers
  7765  00093C  20F4               	addwfc	prodh,w,c
  7766  00093E  6EF7               	movwf	tblptrh,c
  7767  000940                     	if	0	;There are less than 3 active tblptr bytes
  7768  000940                     	endif
  7769  000940  0009               	tblrd		*+
  7770  000942  CFF5 F034          	movff	tablat,___llmod@divisor
  7771  000946  0009               	tblrd		*+
  7772  000948  CFF5 F035          	movff	tablat,___llmod@divisor+1
  7773  00094C  0009               	tblrd		*+
  7774  00094E  CFF5 F036          	movff	tablat,___llmod@divisor+2
  7775  000952  000A               	tblrd		*-
  7776  000954  CFF5 F037          	movff	tablat,___llmod@divisor+3
  7777  000958  ECD1  F01B         	call	___llmod	;wreg free
  7778  00095C  C030  F0E0         	movff	?___llmod,printf@val
  7779  000960  C031  F0E1         	movff	?___llmod+1,printf@val+1
  7780  000964  C032  F0E2         	movff	?___llmod+2,printf@val+2
  7781  000968  C033  F0E3         	movff	?___llmod+3,printf@val+3
  7782  00096C                     l6716:
  7783  00096C  0100               	movlb	0	; () banked
  7784  00096E  07EA               	decf	printf@c& (0+255),f,b
  7785  000970  0100               	movlb	0	; () banked
  7786  000972  29EA               	incf	printf@c& (0+255),w,b
  7787  000974  B4D8               	btfsc	status,2,c
  7788  000976  D008               	goto	l6722
  7789  000978  D78C               	goto	l6710
  7790  00097A                     l6718:
  7791                           
  7792                           ; BSR set to: 0
  7793                           ;doprnt.c: 1236: (putch('0') );
  7794  00097A  0E30               	movlw	48
  7795  00097C  ECBC  F01E         	call	_putch
  7796                           
  7797                           ;doprnt.c: 1237: prec--;
  7798  000980  0100               	movlb	0	; () banked
  7799  000982  07E8               	decf	printf@prec& (0+255),f,b
  7800  000984  A0D8               	btfss	status,0,c
  7801  000986  07E9               	decf	(printf@prec+1)& (0+255),f,b
  7802  000988                     l6722:
  7803                           
  7804                           ; BSR set to: 0
  7805  000988  0100               	movlb	0	; () banked
  7806  00098A  51E8               	movf	printf@prec& (0+255),w,b
  7807  00098C  0100               	movlb	0	; () banked
  7808  00098E  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  7809  000990  B4D8               	btfsc	status,2,c
  7810  000992  D22B               	goto	l6850
  7811  000994  D7F2               	goto	l6718
  7812  000996                     l775:
  7813                           
  7814                           ; BSR set to: 0
  7815                           ;doprnt.c: 1246: }
  7816                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7817  000996  0100               	movlb	0	; () banked
  7818  000998  BFE6               	btfsc	printf@flag& (0+255),7,b
  7819  00099A  D034               	goto	l824
  7820                           
  7821                           ; BSR set to: 0
  7822                           ;doprnt.c: 1253: {
  7823                           ;doprnt.c: 1255: if(flag & 0x10)
  7824  00099C  0100               	movlb	0	; () banked
  7825  00099E  A9E6               	btfss	printf@flag& (0+255),4,b
  7826  0009A0  D00E               	goto	l6730
  7827                           
  7828                           ; BSR set to: 0
  7829                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  7830  0009A2  C0D5  FFD9         	movff	printf@ap,fsr2l
  7831  0009A6  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  7832  0009AA  CFDE F0E0          	movff	postinc2,printf@val
  7833  0009AE  CFDE F0E1          	movff	postinc2,printf@val+1
  7834  0009B2  CFDE F0E2          	movff	postinc2,printf@val+2
  7835  0009B6  CFDE F0E3          	movff	postinc2,printf@val+3
  7836                           
  7837                           ; BSR set to: 0
  7838  0009BA  0E04               	movlw	4
  7839  0009BC  D00F               	goto	L2
  7840  0009BE                     l6730:
  7841                           
  7842                           ; BSR set to: 0
  7843                           ;doprnt.c: 1257: else
  7844                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  7845  0009BE  C0D5  FFD9         	movff	printf@ap,fsr2l
  7846  0009C2  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  7847  0009C6  CFDE F0E0          	movff	postinc2,printf@val
  7848  0009CA  CFDD F0E1          	movff	postdec2,printf@val+1
  7849  0009CE  0100               	movlb	0	; () banked
  7850  0009D0  0E00               	movlw	0
  7851  0009D2  BFE1               	btfsc	(printf@val+1)& (0+255),7,b
  7852  0009D4  0EFF               	movlw	-1
  7853  0009D6  6FE2               	movwf	(printf@val+2)& (0+255),b
  7854  0009D8  6FE3               	movwf	(printf@val+3)& (0+255),b
  7855                           
  7856                           ; BSR set to: 0
  7857  0009DA  0E02               	movlw	2
  7858  0009DC                     L2:
  7859  0009DC  0100               	movlb	0	; () banked
  7860  0009DE  27D5               	addwf	printf@ap& (0+255),f,b
  7861  0009E0  0E00               	movlw	0
  7862  0009E2  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  7863                           
  7864                           ; BSR set to: 0
  7865                           ;doprnt.c: 1261: if((long)val < 0) {
  7866                           
  7867                           ; BSR set to: 0
  7868  0009E4  0100               	movlb	0	; () banked
  7869  0009E6  AFE3               	btfss	(printf@val+3)& (0+255),7,b
  7870  0009E8  D032               	goto	l6748
  7871                           
  7872                           ; BSR set to: 0
  7873                           ;doprnt.c: 1262: flag |= 0x03;
  7874  0009EA  0E03               	movlw	3
  7875  0009EC  0100               	movlb	0	; () banked
  7876  0009EE  13E6               	iorwf	printf@flag& (0+255),f,b
  7877                           
  7878                           ; BSR set to: 0
  7879                           ;doprnt.c: 1263: val = -val;
  7880  0009F0  0100               	movlb	0	; () banked
  7881  0009F2  1FE3               	comf	(printf@val+3)& (0+255),f,b
  7882  0009F4  1FE2               	comf	(printf@val+2)& (0+255),f,b
  7883  0009F6  1FE1               	comf	(printf@val+1)& (0+255),f,b
  7884  0009F8  6DE0               	negf	printf@val& (0+255),b
  7885  0009FA  0E00               	movlw	0
  7886  0009FC  23E1               	addwfc	(printf@val+1)& (0+255),f,b
  7887  0009FE  23E2               	addwfc	(printf@val+2)& (0+255),f,b
  7888  000A00  23E3               	addwfc	(printf@val+3)& (0+255),f,b
  7889                           
  7890                           ; BSR set to: 0
  7891                           ;doprnt.c: 1264: }
  7892                           ;doprnt.c: 1266: }
  7893  000A02  D025               	goto	l6748
  7894  000A04                     l824:
  7895                           
  7896                           ; BSR set to: 0
  7897                           ;doprnt.c: 1268: else
  7898                           ;doprnt.c: 1273: {
  7899                           ;doprnt.c: 1281: if(flag & 0x10)
  7900  000A04  0100               	movlb	0	; () banked
  7901  000A06  A9E6               	btfss	printf@flag& (0+255),4,b
  7902  000A08  D00E               	goto	l6744
  7903                           
  7904                           ; BSR set to: 0
  7905                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  7906  000A0A  C0D5  FFD9         	movff	printf@ap,fsr2l
  7907  000A0E  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  7908  000A12  CFDE F0E0          	movff	postinc2,printf@val
  7909  000A16  CFDE F0E1          	movff	postinc2,printf@val+1
  7910  000A1A  CFDE F0E2          	movff	postinc2,printf@val+2
  7911  000A1E  CFDE F0E3          	movff	postinc2,printf@val+3
  7912                           
  7913                           ; BSR set to: 0
  7914  000A22  0E04               	movlw	4
  7915  000A24  D010               	goto	L3
  7916  000A26                     l6744:
  7917                           
  7918                           ; BSR set to: 0
  7919                           ;doprnt.c: 1283: else
  7920                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7921  000A26  C0D5  FFD9         	movff	printf@ap,fsr2l
  7922  000A2A  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  7923  000A2E  CFDE F0C7          	movff	postinc2,??_printf
  7924  000A32  CFDD F0C8          	movff	postdec2,??_printf+1
  7925  000A36  C0C7  F0E0         	movff	??_printf,printf@val
  7926  000A3A  C0C8  F0E1         	movff	??_printf+1,printf@val+1
  7927  000A3E  0100               	movlb	0	; () banked
  7928  000A40  6BE2               	clrf	(printf@val+2)& (0+255),b
  7929  000A42  6BE3               	clrf	(printf@val+3)& (0+255),b
  7930                           
  7931                           ; BSR set to: 0
  7932  000A44  0E02               	movlw	2
  7933  000A46                     L3:
  7934  000A46  0100               	movlb	0	; () banked
  7935  000A48  27D5               	addwf	printf@ap& (0+255),f,b
  7936  000A4A  0E00               	movlw	0
  7937  000A4C  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  7938  000A4E                     l6748:
  7939                           
  7940                           ; BSR set to: 0
  7941                           ;doprnt.c: 1287: }
  7942                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7943  000A4E  0100               	movlb	0	; () banked
  7944  000A50  51E8               	movf	printf@prec& (0+255),w,b
  7945  000A52  0100               	movlb	0	; () banked
  7946  000A54  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  7947  000A56  A4D8               	btfss	status,2,c
  7948  000A58  D05A               	goto	l6784
  7949                           
  7950                           ; BSR set to: 0
  7951  000A5A  0100               	movlb	0	; () banked
  7952  000A5C  51E0               	movf	printf@val& (0+255),w,b
  7953  000A5E  0100               	movlb	0	; () banked
  7954  000A60  11E1               	iorwf	(printf@val+1)& (0+255),w,b
  7955  000A62  0100               	movlb	0	; () banked
  7956  000A64  11E2               	iorwf	(printf@val+2)& (0+255),w,b
  7957  000A66  0100               	movlb	0	; () banked
  7958  000A68  11E3               	iorwf	(printf@val+3)& (0+255),w,b
  7959  000A6A  A4D8               	btfss	status,2,c
  7960  000A6C  D050               	goto	l6784
  7961                           
  7962                           ; BSR set to: 0
  7963                           ;doprnt.c: 1291: prec++;
  7964  000A6E  0100               	movlb	0	; () banked
  7965  000A70  4BE8               	infsnz	printf@prec& (0+255),f,b
  7966  000A72  2BE9               	incf	(printf@prec+1)& (0+255),f,b
  7967                           
  7968                           ; BSR set to: 0
  7969                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7970  000A74  D04C               	goto	l6784
  7971  000A76                     l6754:
  7972                           
  7973                           ; BSR set to: 0
  7974                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7975  000A76  0E01               	movlw	1
  7976  000A78  0100               	movlb	0	; () banked
  7977  000A7A  6FEA               	movwf	printf@c& (0+255),b
  7978  000A7C                     l6756:
  7979                           
  7980                           ; BSR set to: 0
  7981  000A7C  0E0A               	movlw	10
  7982  000A7E  0100               	movlb	0	; () banked
  7983  000A80  19EA               	xorwf	printf@c& (0+255),w,b
  7984  000A82  B4D8               	btfsc	status,2,c
  7985  000A84  D04D               	goto	l6786
  7986                           
  7987                           ; BSR set to: 0
  7988                           ;doprnt.c: 1306: if(val < dpowers[c])
  7989                           
  7990                           ; BSR set to: 0
  7991                           
  7992                           ; BSR set to: 0
  7993  000A86  0100               	movlb	0	; () banked
  7994  000A88  51EA               	movf	printf@c& (0+255),w,b
  7995  000A8A  0D04               	mullw	4
  7996  000A8C  0E0F               	movlw	low _dpowers
  7997  000A8E  24F3               	addwf	prodl,w,c
  7998  000A90  6EF6               	movwf	tblptrl,c
  7999  000A92  0EFE               	movlw	high _dpowers
  8000  000A94  20F4               	addwfc	prodh,w,c
  8001  000A96  6EF7               	movwf	tblptrh,c
  8002  000A98                     	if	0	;There are less than 3 active tblptr bytes
  8003  000A98                     	endif
  8004  000A98  0009               	tblrd		*+
  8005  000A9A  50F5               	movf	tablat,w,c
  8006  000A9C  0100               	movlb	0	; () banked
  8007  000A9E  5DE0               	subwf	printf@val& (0+255),w,b
  8008  000AA0  0009               	tblrd		*+
  8009  000AA2  50F5               	movf	tablat,w,c
  8010  000AA4  0100               	movlb	0	; () banked
  8011  000AA6  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  8012  000AA8  0009               	tblrd		*+
  8013  000AAA  50F5               	movf	tablat,w,c
  8014  000AAC  0100               	movlb	0	; () banked
  8015  000AAE  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  8016  000AB0  0009               	tblrd		*+
  8017  000AB2  50F5               	movf	tablat,w,c
  8018  000AB4  0100               	movlb	0	; () banked
  8019  000AB6  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  8020  000AB8  A0D8               	btfss	status,0,c
  8021  000ABA  D032               	goto	l6786
  8022                           
  8023                           ; BSR set to: 0
  8024                           
  8025                           ; BSR set to: 0
  8026                           
  8027                           ; BSR set to: 0
  8028                           ;doprnt.c: 1307: break;
  8029  000ABC  0100               	movlb	0	; () banked
  8030  000ABE  2BEA               	incf	printf@c& (0+255),f,b
  8031  000AC0  D7DD               	goto	l6756
  8032  000AC2                     l6768:
  8033                           
  8034                           ; BSR set to: 0
  8035                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8036  000AC2  0E01               	movlw	1
  8037  000AC4  0100               	movlb	0	; () banked
  8038  000AC6  6FEA               	movwf	printf@c& (0+255),b
  8039  000AC8                     l6770:
  8040                           
  8041                           ; BSR set to: 0
  8042  000AC8  0E08               	movlw	8
  8043  000ACA  0100               	movlb	0	; () banked
  8044  000ACC  19EA               	xorwf	printf@c& (0+255),w,b
  8045  000ACE  B4D8               	btfsc	status,2,c
  8046  000AD0  D027               	goto	l6786
  8047                           
  8048                           ; BSR set to: 0
  8049                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8050                           
  8051                           ; BSR set to: 0
  8052                           
  8053                           ; BSR set to: 0
  8054  000AD2  0100               	movlb	0	; () banked
  8055  000AD4  51EA               	movf	printf@c& (0+255),w,b
  8056  000AD6  0D04               	mullw	4
  8057  000AD8  0E85               	movlw	low _hexpowers
  8058  000ADA  24F3               	addwf	prodl,w,c
  8059  000ADC  6EF6               	movwf	tblptrl,c
  8060  000ADE  0EFE               	movlw	high _hexpowers
  8061  000AE0  20F4               	addwfc	prodh,w,c
  8062  000AE2  6EF7               	movwf	tblptrh,c
  8063  000AE4                     	if	0	;There are less than 3 active tblptr bytes
  8064  000AE4                     	endif
  8065  000AE4  0009               	tblrd		*+
  8066  000AE6  50F5               	movf	tablat,w,c
  8067  000AE8  0100               	movlb	0	; () banked
  8068  000AEA  5DE0               	subwf	printf@val& (0+255),w,b
  8069  000AEC  0009               	tblrd		*+
  8070  000AEE  50F5               	movf	tablat,w,c
  8071  000AF0  0100               	movlb	0	; () banked
  8072  000AF2  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  8073  000AF4  0009               	tblrd		*+
  8074  000AF6  50F5               	movf	tablat,w,c
  8075  000AF8  0100               	movlb	0	; () banked
  8076  000AFA  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  8077  000AFC  0009               	tblrd		*+
  8078  000AFE  50F5               	movf	tablat,w,c
  8079  000B00  0100               	movlb	0	; () banked
  8080  000B02  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  8081  000B04  A0D8               	btfss	status,0,c
  8082  000B06  D00C               	goto	l6786
  8083                           
  8084                           ; BSR set to: 0
  8085                           
  8086                           ; BSR set to: 0
  8087                           
  8088                           ; BSR set to: 0
  8089                           ;doprnt.c: 1318: break;
  8090  000B08  0100               	movlb	0	; () banked
  8091  000B0A  2BEA               	incf	printf@c& (0+255),f,b
  8092  000B0C  D7DD               	goto	l6770
  8093  000B0E                     l6784:
  8094                           
  8095                           ; BSR set to: 0
  8096  000B0E  0100               	movlb	0	; () banked
  8097  000B10  51E6               	movf	printf@flag& (0+255),w,b
  8098  000B12  0B80               	andlw	128
  8099                           
  8100                           ; Switch size 1, requested type "space"
  8101                           ; Number of cases is 2, Range of values is 0 to 128
  8102                           ; switch strategies available:
  8103                           ; Name         Instructions Cycles
  8104                           ; simple_byte            7     4 (average)
  8105                           ;	Chosen strategy is simple_byte
  8106  000B14  0A00               	xorlw	0	; case 0
  8107  000B16  B4D8               	btfsc	status,2,c
  8108  000B18  D7AE               	goto	l6754
  8109  000B1A  0A80               	xorlw	128	; case 128
  8110  000B1C  B4D8               	btfsc	status,2,c
  8111  000B1E  D7D1               	goto	l6768
  8112  000B20                     l6786:
  8113                           
  8114                           ; BSR set to: 0
  8115                           ;doprnt.c: 1339: if(c < prec)
  8116  000B20  0E80               	movlw	128
  8117  000B22  0100               	movlb	0	; () banked
  8118  000B24  BFEA               	btfsc	printf@c& (0+255),7,b
  8119  000B26  0E7F               	movlw	127
  8120  000B28  0100               	movlb	0	; () banked
  8121  000B2A  6FC7               	movwf	??_printf& (0+255),b
  8122  000B2C  0100               	movlb	0	; () banked
  8123  000B2E  51E8               	movf	printf@prec& (0+255),w,b
  8124  000B30  0100               	movlb	0	; () banked
  8125  000B32  5DEA               	subwf	printf@c& (0+255),w,b
  8126  000B34  0100               	movlb	0	; () banked
  8127  000B36  51E9               	movf	(printf@prec+1)& (0+255),w,b
  8128  000B38  0A80               	xorlw	128
  8129  000B3A  0100               	movlb	0	; () banked
  8130  000B3C  59C7               	subwfb	??_printf& (0+255),w,b
  8131  000B3E  B0D8               	btfsc	status,0,c
  8132  000B40  D003               	goto	l6790
  8133                           
  8134                           ; BSR set to: 0
  8135                           ;doprnt.c: 1340: c = prec;
  8136  000B42  C0E8  F0EA         	movff	printf@prec,printf@c
  8137  000B46  D018               	goto	l6794
  8138  000B48                     l6790:
  8139                           
  8140                           ; BSR set to: 0
  8141                           ;doprnt.c: 1341: else if(prec < c)
  8142  000B48  0100               	movlb	0	; () banked
  8143  000B4A  51E9               	movf	(printf@prec+1)& (0+255),w,b
  8144  000B4C  0A80               	xorlw	128
  8145  000B4E  0100               	movlb	0	; () banked
  8146  000B50  6FC7               	movwf	??_printf& (0+255),b
  8147  000B52  0100               	movlb	0	; () banked
  8148  000B54  51EA               	movf	printf@c& (0+255),w,b
  8149  000B56  0100               	movlb	0	; () banked
  8150  000B58  5DE8               	subwf	printf@prec& (0+255),w,b
  8151  000B5A  0E80               	movlw	128
  8152  000B5C  0100               	movlb	0	; () banked
  8153  000B5E  BFEA               	btfsc	printf@c& (0+255),7,b
  8154  000B60  0E7F               	movlw	127
  8155  000B62  0100               	movlb	0	; () banked
  8156  000B64  59C7               	subwfb	??_printf& (0+255),w,b
  8157  000B66  B0D8               	btfsc	status,0,c
  8158  000B68  D007               	goto	l6794
  8159                           
  8160                           ; BSR set to: 0
  8161                           ;doprnt.c: 1342: prec = c;
  8162  000B6A  0100               	movlb	0	; () banked
  8163  000B6C  51EA               	movf	printf@c& (0+255),w,b
  8164  000B6E  0100               	movlb	0	; () banked
  8165  000B70  6FE8               	movwf	printf@prec& (0+255),b
  8166  000B72  6BE9               	clrf	(printf@prec+1)& (0+255),b
  8167  000B74  BFE8               	btfsc	printf@prec& (0+255),7,b
  8168  000B76  07E9               	decf	(printf@prec+1)& (0+255),f,b
  8169  000B78                     l6794:
  8170                           
  8171                           ; BSR set to: 0
  8172                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8173  000B78  0100               	movlb	0	; () banked
  8174  000B7A  51E4               	movf	printf@width& (0+255),w,b
  8175  000B7C  0100               	movlb	0	; () banked
  8176  000B7E  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  8177  000B80  B4D8               	btfsc	status,2,c
  8178  000B82  D014               	goto	l6800
  8179                           
  8180                           ; BSR set to: 0
  8181  000B84  0E03               	movlw	3
  8182  000B86  0100               	movlb	0	; () banked
  8183  000B88  15E6               	andwf	printf@flag& (0+255),w,b
  8184  000B8A  0100               	movlb	0	; () banked
  8185  000B8C  6FC7               	movwf	??_printf& (0+255),b
  8186  000B8E  0E00               	movlw	0
  8187  000B90  0100               	movlb	0	; () banked
  8188  000B92  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  8189  000B94  0100               	movlb	0	; () banked
  8190  000B96  6FC8               	movwf	(??_printf+1)& (0+255),b
  8191  000B98  0100               	movlb	0	; () banked
  8192  000B9A  51C7               	movf	??_printf& (0+255),w,b
  8193  000B9C  0100               	movlb	0	; () banked
  8194  000B9E  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  8195  000BA0  B4D8               	btfsc	status,2,c
  8196  000BA2  D004               	goto	l6800
  8197                           
  8198                           ; BSR set to: 0
  8199                           ;doprnt.c: 1346: width--;
  8200  000BA4  0100               	movlb	0	; () banked
  8201  000BA6  07E4               	decf	printf@width& (0+255),f,b
  8202  000BA8  A0D8               	btfss	status,0,c
  8203  000BAA  07E5               	decf	(printf@width+1)& (0+255),f,b
  8204  000BAC                     l6800:
  8205                           
  8206                           ; BSR set to: 0
  8207                           ;doprnt.c: 1348: if(flag & 0x4000) {
  8208  000BAC  0100               	movlb	0	; () banked
  8209  000BAE  ADE7               	btfss	(printf@flag+1)& (0+255),6,b
  8210  000BB0  D01E               	goto	l6808
  8211                           
  8212                           ; BSR set to: 0
  8213                           ;doprnt.c: 1349: if(width > prec)
  8214  000BB2  0100               	movlb	0	; () banked
  8215  000BB4  51E4               	movf	printf@width& (0+255),w,b
  8216  000BB6  0100               	movlb	0	; () banked
  8217  000BB8  5DE8               	subwf	printf@prec& (0+255),w,b
  8218  000BBA  0100               	movlb	0	; () banked
  8219  000BBC  51E9               	movf	(printf@prec+1)& (0+255),w,b
  8220  000BBE  0A80               	xorlw	128
  8221  000BC0  0100               	movlb	0	; () banked
  8222  000BC2  6FC7               	movwf	??_printf& (0+255),b
  8223  000BC4  0100               	movlb	0	; () banked
  8224  000BC6  51E5               	movf	(printf@width+1)& (0+255),w,b
  8225  000BC8  0A80               	xorlw	128
  8226  000BCA  0100               	movlb	0	; () banked
  8227  000BCC  59C7               	subwfb	??_printf& (0+255),w,b
  8228  000BCE  B0D8               	btfsc	status,0,c
  8229  000BD0  D009               	goto	l6806
  8230                           
  8231                           ; BSR set to: 0
  8232                           ;doprnt.c: 1350: width -= prec;
  8233  000BD2  0100               	movlb	0	; () banked
  8234  000BD4  51E8               	movf	printf@prec& (0+255),w,b
  8235  000BD6  0100               	movlb	0	; () banked
  8236  000BD8  5FE4               	subwf	printf@width& (0+255),f,b
  8237  000BDA  0100               	movlb	0	; () banked
  8238  000BDC  51E9               	movf	(printf@prec+1)& (0+255),w,b
  8239  000BDE  0100               	movlb	0	; () banked
  8240  000BE0  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  8241  000BE2  D005               	goto	l6808
  8242  000BE4                     l6806:
  8243                           
  8244                           ; BSR set to: 0
  8245                           ;doprnt.c: 1351: else
  8246                           ;doprnt.c: 1352: width = 0;
  8247  000BE4  0E00               	movlw	0
  8248  000BE6  0100               	movlb	0	; () banked
  8249  000BE8  6FE5               	movwf	(printf@width+1)& (0+255),b
  8250  000BEA  0E00               	movlw	0
  8251  000BEC  6FE4               	movwf	printf@width& (0+255),b
  8252  000BEE                     l6808:
  8253                           
  8254                           ; BSR set to: 0
  8255                           ;doprnt.c: 1353: }
  8256                           ;doprnt.c: 1381: if(width > c)
  8257  000BEE  0E80               	movlw	128
  8258  000BF0  0100               	movlb	0	; () banked
  8259  000BF2  BFEA               	btfsc	printf@c& (0+255),7,b
  8260  000BF4  0E7F               	movlw	127
  8261  000BF6  0100               	movlb	0	; () banked
  8262  000BF8  6FC7               	movwf	??_printf& (0+255),b
  8263  000BFA  0100               	movlb	0	; () banked
  8264  000BFC  51E4               	movf	printf@width& (0+255),w,b
  8265  000BFE  0100               	movlb	0	; () banked
  8266  000C00  5DEA               	subwf	printf@c& (0+255),w,b
  8267  000C02  0100               	movlb	0	; () banked
  8268  000C04  51E5               	movf	(printf@width+1)& (0+255),w,b
  8269  000C06  0A80               	xorlw	128
  8270  000C08  0100               	movlb	0	; () banked
  8271  000C0A  59C7               	subwfb	??_printf& (0+255),w,b
  8272  000C0C  B0D8               	btfsc	status,0,c
  8273  000C0E  D00B               	goto	l6812
  8274                           
  8275                           ; BSR set to: 0
  8276                           ;doprnt.c: 1382: width -= c;
  8277  000C10  0100               	movlb	0	; () banked
  8278  000C12  51EA               	movf	printf@c& (0+255),w,b
  8279  000C14  0100               	movlb	0	; () banked
  8280  000C16  5FE4               	subwf	printf@width& (0+255),f,b
  8281  000C18  0E00               	movlw	0
  8282  000C1A  0100               	movlb	0	; () banked
  8283  000C1C  BFEA               	btfsc	printf@c& (0+255),7,b
  8284  000C1E  0EFF               	movlw	255
  8285  000C20  0100               	movlb	0	; () banked
  8286  000C22  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  8287  000C24  D005               	goto	l6814
  8288  000C26                     l6812:
  8289                           
  8290                           ; BSR set to: 0
  8291                           ;doprnt.c: 1383: else
  8292                           ;doprnt.c: 1384: width = 0;
  8293  000C26  0E00               	movlw	0
  8294  000C28  0100               	movlb	0	; () banked
  8295  000C2A  6FE5               	movwf	(printf@width+1)& (0+255),b
  8296  000C2C  0E00               	movlw	0
  8297  000C2E  6FE4               	movwf	printf@width& (0+255),b
  8298  000C30                     l6814:
  8299                           
  8300                           ; BSR set to: 0
  8301                           ;doprnt.c: 1387: if(flag & 0x04) {
  8302  000C30  0100               	movlb	0	; () banked
  8303  000C32  A5E6               	btfss	printf@flag& (0+255),2,b
  8304  000C34  D021               	goto	l6826
  8305                           
  8306                           ; BSR set to: 0
  8307                           ;doprnt.c: 1392: if(flag & 0x03)
  8308  000C36  0E03               	movlw	3
  8309  000C38  0100               	movlb	0	; () banked
  8310  000C3A  15E6               	andwf	printf@flag& (0+255),w,b
  8311  000C3C  0100               	movlb	0	; () banked
  8312  000C3E  6FC7               	movwf	??_printf& (0+255),b
  8313  000C40  0E00               	movlw	0
  8314  000C42  0100               	movlb	0	; () banked
  8315  000C44  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  8316  000C46  0100               	movlb	0	; () banked
  8317  000C48  6FC8               	movwf	(??_printf+1)& (0+255),b
  8318  000C4A  0100               	movlb	0	; () banked
  8319  000C4C  51C7               	movf	??_printf& (0+255),w,b
  8320  000C4E  0100               	movlb	0	; () banked
  8321  000C50  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  8322  000C52  B4D8               	btfsc	status,2,c
  8323  000C54  D003               	goto	l6820
  8324                           
  8325                           ; BSR set to: 0
  8326                           ;doprnt.c: 1393: (putch('-') );
  8327  000C56  0E2D               	movlw	45
  8328  000C58  ECBC  F01E         	call	_putch
  8329  000C5C                     l6820:
  8330                           
  8331                           ;doprnt.c: 1415: if(width)
  8332  000C5C  0100               	movlb	0	; () banked
  8333  000C5E  51E4               	movf	printf@width& (0+255),w,b
  8334  000C60  0100               	movlb	0	; () banked
  8335  000C62  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  8336  000C64  B4D8               	btfsc	status,2,c
  8337  000C66  D0B6               	goto	l6848
  8338                           
  8339                           ; BSR set to: 0
  8340                           ;doprnt.c: 1417: (putch('0') );
  8341                           
  8342                           ; BSR set to: 0
  8343                           
  8344                           ;doprnt.c: 1416: do
  8345  000C68  0E30               	movlw	48
  8346  000C6A  ECBC  F01E         	call	_putch
  8347                           
  8348                           ;doprnt.c: 1418: while(--width);
  8349  000C6E  0100               	movlb	0	; () banked
  8350  000C70  07E4               	decf	printf@width& (0+255),f,b
  8351  000C72  A0D8               	btfss	status,0,c
  8352  000C74  07E5               	decf	(printf@width+1)& (0+255),f,b
  8353  000C76  D7F2               	goto	l6820
  8354  000C78                     l6826:
  8355                           
  8356                           ; BSR set to: 0
  8357                           ;doprnt.c: 1422: {
  8358                           ;doprnt.c: 1424: if(width
  8359                           ;doprnt.c: 1428: )
  8360  000C78  0100               	movlb	0	; () banked
  8361  000C7A  51E4               	movf	printf@width& (0+255),w,b
  8362  000C7C  0100               	movlb	0	; () banked
  8363  000C7E  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  8364  000C80  B4D8               	btfsc	status,2,c
  8365  000C82  D00D               	goto	l6832
  8366  000C84                     l6828:
  8367                           
  8368                           ; BSR set to: 0
  8369                           ;doprnt.c: 1430: (putch(' ') );
  8370  000C84  0E20               	movlw	32
  8371  000C86  ECBC  F01E         	call	_putch
  8372                           
  8373                           ;doprnt.c: 1431: while(--width);
  8374  000C8A  0100               	movlb	0	; () banked
  8375  000C8C  07E4               	decf	printf@width& (0+255),f,b
  8376  000C8E  A0D8               	btfss	status,0,c
  8377  000C90  07E5               	decf	(printf@width+1)& (0+255),f,b
  8378  000C92  0100               	movlb	0	; () banked
  8379  000C94  51E4               	movf	printf@width& (0+255),w,b
  8380  000C96  0100               	movlb	0	; () banked
  8381  000C98  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  8382  000C9A  A4D8               	btfss	status,2,c
  8383  000C9C  D7F3               	goto	l6828
  8384  000C9E                     l6832:
  8385                           
  8386                           ; BSR set to: 0
  8387                           ;doprnt.c: 1438: if(flag & 0x03)
  8388  000C9E  0E03               	movlw	3
  8389  000CA0  0100               	movlb	0	; () banked
  8390  000CA2  15E6               	andwf	printf@flag& (0+255),w,b
  8391  000CA4  0100               	movlb	0	; () banked
  8392  000CA6  6FC7               	movwf	??_printf& (0+255),b
  8393  000CA8  0E00               	movlw	0
  8394  000CAA  0100               	movlb	0	; () banked
  8395  000CAC  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  8396  000CAE  0100               	movlb	0	; () banked
  8397  000CB0  6FC8               	movwf	(??_printf+1)& (0+255),b
  8398  000CB2  0100               	movlb	0	; () banked
  8399  000CB4  51C7               	movf	??_printf& (0+255),w,b
  8400  000CB6  0100               	movlb	0	; () banked
  8401  000CB8  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  8402  000CBA  B4D8               	btfsc	status,2,c
  8403  000CBC  D08B               	goto	l6848
  8404                           
  8405                           ; BSR set to: 0
  8406                           ;doprnt.c: 1439: (putch('-') );
  8407  000CBE  0E2D               	movlw	45
  8408  000CC0  ECBC  F01E         	call	_putch
  8409                           
  8410                           ;doprnt.c: 1469: }
  8411                           ;doprnt.c: 1474: while(prec--) {
  8412  000CC4  D087               	goto	l6848
  8413  000CC6                     l6836:
  8414                           
  8415                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8416  000CC6  C0E8  F0C7         	movff	printf@prec,??_printf
  8417  000CCA  C0E9  F0C8         	movff	printf@prec+1,??_printf+1
  8418  000CCE  0100               	movlb	0	; () banked
  8419  000CD0  90D8               	bcf	status,0,c
  8420  000CD2  37C7               	rlcf	??_printf& (0+255),f,b
  8421  000CD4  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  8422  000CD6  0100               	movlb	0	; () banked
  8423  000CD8  90D8               	bcf	status,0,c
  8424  000CDA  37C7               	rlcf	??_printf& (0+255),f,b
  8425  000CDC  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  8426  000CDE  0E0F               	movlw	low _dpowers
  8427  000CE0  0100               	movlb	0	; () banked
  8428  000CE2  25C7               	addwf	??_printf& (0+255),w,b
  8429  000CE4  6EF6               	movwf	tblptrl,c
  8430  000CE6  0EFE               	movlw	high _dpowers
  8431  000CE8  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  8432  000CEA  6EF7               	movwf	tblptrh,c
  8433  000CEC                     	if	0	;There are less than 3 active tblptr bytes
  8434  000CEC                     	endif
  8435  000CEC  0009               	tblrd		*+
  8436  000CEE  CFF5 F027          	movff	tablat,___lldiv@divisor
  8437  000CF2  0009               	tblrd		*+
  8438  000CF4  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  8439  000CF8  0009               	tblrd		*+
  8440  000CFA  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  8441  000CFE  000A               	tblrd		*-
  8442  000D00  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  8443  000D04  C0E0  F023         	movff	printf@val,___lldiv@dividend
  8444  000D08  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  8445  000D0C  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  8446  000D10  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  8447  000D14  ECB1  F01A         	call	___lldiv	;wreg free
  8448  000D18  C023  F030         	movff	?___lldiv,___llmod@dividend
  8449  000D1C  C024  F031         	movff	?___lldiv+1,___llmod@dividend+1
  8450  000D20  C025  F032         	movff	?___lldiv+2,___llmod@dividend+2
  8451  000D24  C026  F033         	movff	?___lldiv+3,___llmod@dividend+3
  8452  000D28  0E0A               	movlw	10
  8453  000D2A  6E34               	movwf	___llmod@divisor,c
  8454  000D2C  0E00               	movlw	0
  8455  000D2E  6E35               	movwf	___llmod@divisor+1,c
  8456  000D30  0E00               	movlw	0
  8457  000D32  6E36               	movwf	___llmod@divisor+2,c
  8458  000D34  0E00               	movlw	0
  8459  000D36  6E37               	movwf	___llmod@divisor+3,c
  8460  000D38  ECD1  F01B         	call	___llmod	;wreg free
  8461  000D3C  5030               	movf	?___llmod,w,c
  8462  000D3E  0F30               	addlw	48
  8463  000D40  0100               	movlb	0	; () banked
  8464  000D42  6FEA               	movwf	printf@c& (0+255),b
  8465                           
  8466                           ;doprnt.c: 1491: break;
  8467  000D44  D043               	goto	l6846
  8468  000D46                     l6838:
  8469                           
  8470                           ; BSR set to: 0
  8471                           ;doprnt.c: 1499: {
  8472                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8473  000D46  C0E0  F023         	movff	printf@val,___lldiv@dividend
  8474  000D4A  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  8475  000D4E  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  8476  000D52  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  8477  000D56  C0E8  F0C7         	movff	printf@prec,??_printf
  8478  000D5A  C0E9  F0C8         	movff	printf@prec+1,??_printf+1
  8479  000D5E  0100               	movlb	0	; () banked
  8480  000D60  90D8               	bcf	status,0,c
  8481  000D62  37C7               	rlcf	??_printf& (0+255),f,b
  8482  000D64  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  8483  000D66  0100               	movlb	0	; () banked
  8484  000D68  90D8               	bcf	status,0,c
  8485  000D6A  37C7               	rlcf	??_printf& (0+255),f,b
  8486  000D6C  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  8487  000D6E  0E85               	movlw	low _hexpowers
  8488  000D70  0100               	movlb	0	; () banked
  8489  000D72  25C7               	addwf	??_printf& (0+255),w,b
  8490  000D74  6EF6               	movwf	tblptrl,c
  8491  000D76  0EFE               	movlw	high _hexpowers
  8492  000D78  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  8493  000D7A  6EF7               	movwf	tblptrh,c
  8494  000D7C                     	if	0	;There are less than 3 active tblptr bytes
  8495  000D7C                     	endif
  8496  000D7C  0009               	tblrd		*+
  8497  000D7E  CFF5 F027          	movff	tablat,___lldiv@divisor
  8498  000D82  0009               	tblrd		*+
  8499  000D84  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  8500  000D88  0009               	tblrd		*+
  8501  000D8A  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  8502  000D8E  000A               	tblrd		*-
  8503  000D90  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  8504  000D94  ECB1  F01A         	call	___lldiv	;wreg free
  8505  000D98  5023               	movf	?___lldiv,w,c
  8506  000D9A  0B0F               	andlw	15
  8507  000D9C  0100               	movlb	0	; () banked
  8508  000D9E  6FD0               	movwf	printf@idx& (0+255),b
  8509                           
  8510                           ; BSR set to: 0
  8511                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  8512  000DA0  0100               	movlb	0	; () banked
  8513  000DA2  51D0               	movf	printf@idx& (0+255),w,b
  8514  000DA4  0D01               	mullw	1
  8515  000DA6  0E3E               	movlw	low STR_23
  8516  000DA8  24F3               	addwf	prodl,w,c
  8517  000DAA  6EF6               	movwf	tblptrl,c
  8518  000DAC  0EFF               	movlw	high STR_23
  8519  000DAE  20F4               	addwfc	prodh,w,c
  8520  000DB0  6EF7               	movwf	tblptrh,c
  8521  000DB2                     	if	0	;There are less than 3 active tblptr bytes
  8522  000DB2                     	endif
  8523  000DB2  0008               	tblrd		*
  8524  000DB4  CFF5 F0EA          	movff	tablat,printf@c
  8525                           
  8526                           ; BSR set to: 0
  8527                           ;doprnt.c: 1523: }
  8528                           
  8529                           ;doprnt.c: 1508: }
  8530                           ;doprnt.c: 1510: break;
  8531  000DB8  D009               	goto	l6846
  8532  000DBA                     l6844:
  8533  000DBA  0100               	movlb	0	; () banked
  8534  000DBC  51E6               	movf	printf@flag& (0+255),w,b
  8535  000DBE  0B80               	andlw	128
  8536                           
  8537                           ; Switch size 1, requested type "space"
  8538                           ; Number of cases is 2, Range of values is 0 to 128
  8539                           ; switch strategies available:
  8540                           ; Name         Instructions Cycles
  8541                           ; simple_byte            7     4 (average)
  8542                           ;	Chosen strategy is simple_byte
  8543  000DC0  0A00               	xorlw	0	; case 0
  8544  000DC2  B4D8               	btfsc	status,2,c
  8545  000DC4  D780               	goto	l6836
  8546  000DC6  0A80               	xorlw	128	; case 128
  8547  000DC8  B4D8               	btfsc	status,2,c
  8548  000DCA  D7BD               	goto	l6838
  8549  000DCC                     l6846:
  8550                           
  8551                           ; BSR set to: 0
  8552                           ;doprnt.c: 1524: (putch(c) );
  8553  000DCC  0100               	movlb	0	; () banked
  8554  000DCE  51EA               	movf	printf@c& (0+255),w,b
  8555  000DD0  ECBC  F01E         	call	_putch
  8556  000DD4                     l6848:
  8557  000DD4  0100               	movlb	0	; () banked
  8558  000DD6  07E8               	decf	printf@prec& (0+255),f,b
  8559  000DD8  A0D8               	btfss	status,0,c
  8560  000DDA  07E9               	decf	(printf@prec+1)& (0+255),f,b
  8561  000DDC  0100               	movlb	0	; () banked
  8562  000DDE  29E8               	incf	printf@prec& (0+255),w,b
  8563  000DE0  E1EC               	bnz	l6844
  8564  000DE2  0100               	movlb	0	; () banked
  8565  000DE4  29E9               	incf	(printf@prec+1)& (0+255),w,b
  8566  000DE6  A4D8               	btfss	status,2,c
  8567  000DE8  D7E8               	goto	l6844
  8568  000DEA                     l6850:
  8569  000DEA  C0BD  FFF6         	movff	printf@f,tblptrl
  8570  000DEE  C0BE  FFF7         	movff	printf@f+1,tblptrh
  8571  000DF2  0100               	movlb	0	; () banked
  8572  000DF4  4BBD               	infsnz	printf@f& (0+255),f,b
  8573  000DF6  2BBE               	incf	(printf@f+1)& (0+255),f,b
  8574  000DF8                     	if	0	;tblptru may be non-zero
  8575  000DF8                     	endif
  8576  000DF8                     	if	0	;tblptru may be non-zero
  8577  000DF8                     	endif
  8578  000DF8  0008               	tblrd		*
  8579  000DFA  CFF5 F0EA          	movff	tablat,printf@c
  8580  000DFE  0100               	movlb	0	; () banked
  8581  000E00  51EA               	movf	printf@c& (0+255),w,b
  8582  000E02  B4D8               	btfsc	status,2,c
  8583  000E04  0012               	return	
  8584  000E06  EF11  F000         	goto	l6484
  8585  000E0A                     __end_of_printf:
  8586                           	opt stack 0
  8587                           tblptru	equ	0xFF8
  8588                           tblptrh	equ	0xFF7
  8589                           tblptrl	equ	0xFF6
  8590                           tablat	equ	0xFF5
  8591                           prodh	equ	0xFF4
  8592                           prodl	equ	0xFF3
  8593                           intcon	equ	0xFF2
  8594                           postinc0	equ	0xFEE
  8595                           wreg	equ	0xFE8
  8596                           postdec1	equ	0xFE5
  8597                           fsr1l	equ	0xFE1
  8598                           indf2	equ	0xFDF
  8599                           postinc2	equ	0xFDE
  8600                           postdec2	equ	0xFDD
  8601                           fsr2h	equ	0xFDA
  8602                           fsr2l	equ	0xFD9
  8603                           status	equ	0xFD8
  8604                           
  8605 ;; *************** function _scale *****************
  8606 ;; Defined at:
  8607 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  8608 ;; Parameters:    Size  Location     Type
  8609 ;;  scl             1    wreg     char 
  8610 ;; Auto vars:     Size  Location     Type
  8611 ;;  scl             1   30[BANK0 ] char 
  8612 ;; Return value:  Size  Location     Type
  8613 ;;                  3   24[BANK0 ] char 
  8614 ;; Registers used:
  8615 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8616 ;; Tracked objects:
  8617 ;;		On entry : 0/0
  8618 ;;		On exit  : 0/0
  8619 ;;		Unchanged: 0/0
  8620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8621 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8622 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8624 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8625 ;;Total ram usage:        7 bytes
  8626 ;; Hardware stack levels used:    1
  8627 ;; Hardware stack levels required when called:    5
  8628 ;; This function calls:
  8629 ;;		___awdiv
  8630 ;;		___awmod
  8631 ;;		___ftmul
  8632 ;;		___wmul
  8633 ;; This function is called by:
  8634 ;;		_printf
  8635 ;; This function uses a non-reentrant model
  8636 ;;
  8637                           
  8638                           	psect	text24
  8639  0012F2                     __ptext24:
  8640                           	opt stack 0
  8641  0012F2                     _scale:
  8642                           	opt stack 23
  8643                           
  8644                           ; BSR set to: 0
  8645                           ;incstack = 0
  8646                           ;scale@scl stored from wreg
  8647  0012F2  0100               	movlb	0	; () banked
  8648  0012F4  6F9E               	movwf	scale@scl& (0+255),b
  8649                           
  8650                           ;doprnt.c: 428: if(scl < 0) {
  8651  0012F6  0100               	movlb	0	; () banked
  8652  0012F8  AF9E               	btfss	scale@scl& (0+255),7,b
  8653  0012FA  D104               	goto	l6204
  8654                           
  8655                           ; BSR set to: 0
  8656                           ;doprnt.c: 429: scl = -scl;
  8657  0012FC  0100               	movlb	0	; () banked
  8658  0012FE  6D9E               	negf	scale@scl& (0+255),b
  8659                           
  8660                           ;doprnt.c: 430: if(scl>=110)
  8661  001300  0100               	movlb	0	; () banked
  8662  001302  519E               	movf	scale@scl& (0+255),w,b
  8663  001304  0A80               	xorlw	128
  8664  001306  0F12               	addlw	-238
  8665  001308  A0D8               	btfss	status,0,c
  8666  00130A  D094               	goto	l6194
  8667                           
  8668                           ; BSR set to: 0
  8669                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8670  00130C  0E00               	movlw	0
  8671  00130E  6E34               	movwf	___wmul@multiplicand+1,c
  8672  001310  0E03               	movlw	3
  8673  001312  6E33               	movwf	___wmul@multiplicand,c
  8674  001314  0E00               	movlw	0
  8675  001316  6E2C               	movwf	___awdiv@divisor+1,c
  8676  001318  0E0A               	movlw	10
  8677  00131A  6E2B               	movwf	___awdiv@divisor,c
  8678  00131C  0E00               	movlw	0
  8679  00131E  6E26               	movwf	___awmod@divisor+1,c
  8680  001320  0E64               	movlw	100
  8681  001322  6E25               	movwf	___awmod@divisor,c
  8682  001324  0100               	movlb	0	; () banked
  8683  001326  519E               	movf	scale@scl& (0+255),w,b
  8684  001328  6E23               	movwf	___awmod@dividend,c
  8685  00132A  6A24               	clrf	___awmod@dividend+1,c
  8686  00132C  BE23               	btfsc	___awmod@dividend,7,c
  8687  00132E  0624               	decf	___awmod@dividend+1,f,c
  8688  001330  EC2E  F01B         	call	___awmod	;wreg free
  8689  001334  C023  F029         	movff	?___awmod,___awdiv@dividend
  8690  001338  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  8691  00133C  EC6F  F01A         	call	___awdiv	;wreg free
  8692  001340  0E09               	movlw	9
  8693  001342  2429               	addwf	?___awdiv,w,c
  8694  001344  6E31               	movwf	___wmul@multiplier,c
  8695  001346  0E00               	movlw	0
  8696  001348  202A               	addwfc	?___awdiv+1,w,c
  8697  00134A  6E32               	movwf	___wmul@multiplier+1,c
  8698  00134C  EC86  F01E         	call	___wmul	;wreg free
  8699  001350  0E37               	movlw	low __npowers_
  8700  001352  2431               	addwf	?___wmul,w,c
  8701  001354  6EF6               	movwf	tblptrl,c
  8702  001356  0EFE               	movlw	high __npowers_
  8703  001358  2032               	addwfc	?___wmul+1,w,c
  8704  00135A  6EF7               	movwf	tblptrh,c
  8705  00135C                     	if	0	;There are less than 3 active tblptr bytes
  8706  00135C                     	endif
  8707  00135C  0009               	tblrd		*+
  8708  00135E  CFF5 F08C          	movff	tablat,___ftmul@f2
  8709  001362  0009               	tblrd		*+
  8710  001364  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8711  001368  000A               	tblrd		*-
  8712  00136A  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8713  00136E  0E00               	movlw	0
  8714  001370  6E2C               	movwf	___awdiv@divisor+1,c
  8715  001372  0E64               	movlw	100
  8716  001374  6E2B               	movwf	___awdiv@divisor,c
  8717  001376  0100               	movlb	0	; () banked
  8718  001378  519E               	movf	scale@scl& (0+255),w,b
  8719  00137A  6E29               	movwf	___awdiv@dividend,c
  8720  00137C  6A2A               	clrf	___awdiv@dividend+1,c
  8721  00137E  BE29               	btfsc	___awdiv@dividend,7,c
  8722  001380  062A               	decf	___awdiv@dividend+1,f,c
  8723  001382  EC6F  F01A         	call	___awdiv	;wreg free
  8724  001386  0E12               	movlw	18
  8725  001388  2429               	addwf	?___awdiv,w,c
  8726  00138A  6E31               	movwf	___wmul@multiplier,c
  8727  00138C  0E00               	movlw	0
  8728  00138E  202A               	addwfc	?___awdiv+1,w,c
  8729  001390  6E32               	movwf	___wmul@multiplier+1,c
  8730  001392  0E00               	movlw	0
  8731  001394  6E34               	movwf	___wmul@multiplicand+1,c
  8732  001396  0E03               	movlw	3
  8733  001398  6E33               	movwf	___wmul@multiplicand,c
  8734  00139A  EC86  F01E         	call	___wmul	;wreg free
  8735  00139E  0E37               	movlw	low __npowers_
  8736  0013A0  2431               	addwf	?___wmul,w,c
  8737  0013A2  6EF6               	movwf	tblptrl,c
  8738  0013A4  0EFE               	movlw	high __npowers_
  8739  0013A6  2032               	addwfc	?___wmul+1,w,c
  8740  0013A8  6EF7               	movwf	tblptrh,c
  8741  0013AA                     	if	0	;There are less than 3 active tblptr bytes
  8742  0013AA                     	endif
  8743  0013AA  0009               	tblrd		*+
  8744  0013AC  CFF5 F089          	movff	tablat,___ftmul@f1
  8745  0013B0  0009               	tblrd		*+
  8746  0013B2  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8747  0013B6  000A               	tblrd		*-
  8748  0013B8  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8749  0013BC  ECAF  F010         	call	___ftmul	;wreg free
  8750  0013C0  C089  F09B         	movff	?___ftmul,_scale$1437
  8751  0013C4  C08A  F09C         	movff	?___ftmul+1,_scale$1437+1
  8752  0013C8  C08B  F09D         	movff	?___ftmul+2,_scale$1437+2
  8753                           
  8754                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8755  0013CC  C09B  F089         	movff	_scale$1437,___ftmul@f1
  8756  0013D0  C09C  F08A         	movff	_scale$1437+1,___ftmul@f1+1
  8757  0013D4  C09D  F08B         	movff	_scale$1437+2,___ftmul@f1+2
  8758  0013D8  0E00               	movlw	0
  8759  0013DA  6E34               	movwf	___wmul@multiplicand+1,c
  8760  0013DC  0E03               	movlw	3
  8761  0013DE  6E33               	movwf	___wmul@multiplicand,c
  8762  0013E0  0E00               	movlw	0
  8763  0013E2  6E26               	movwf	___awmod@divisor+1,c
  8764  0013E4  0E0A               	movlw	10
  8765  0013E6  6E25               	movwf	___awmod@divisor,c
  8766  0013E8  0100               	movlb	0	; () banked
  8767  0013EA  519E               	movf	scale@scl& (0+255),w,b
  8768  0013EC  6E23               	movwf	___awmod@dividend,c
  8769  0013EE  6A24               	clrf	___awmod@dividend+1,c
  8770  0013F0  BE23               	btfsc	___awmod@dividend,7,c
  8771  0013F2  0624               	decf	___awmod@dividend+1,f,c
  8772  0013F4  EC2E  F01B         	call	___awmod	;wreg free
  8773  0013F8  C023  F031         	movff	?___awmod,___wmul@multiplier
  8774  0013FC  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  8775  001400  EC86  F01E         	call	___wmul	;wreg free
  8776  001404  0E37               	movlw	low __npowers_
  8777  001406  2431               	addwf	?___wmul,w,c
  8778  001408  6EF6               	movwf	tblptrl,c
  8779  00140A  0EFE               	movlw	high __npowers_
  8780  00140C  2032               	addwfc	?___wmul+1,w,c
  8781  00140E  6EF7               	movwf	tblptrh,c
  8782  001410                     	if	0	;There are less than 3 active tblptr bytes
  8783  001410                     	endif
  8784  001410  0009               	tblrd		*+
  8785  001412  CFF5 F08C          	movff	tablat,___ftmul@f2
  8786  001416  0009               	tblrd		*+
  8787  001418  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8788  00141C  000A               	tblrd		*-
  8789  00141E  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8790  001422  ECAF  F010         	call	___ftmul	;wreg free
  8791  001426  C089  F098         	movff	?___ftmul,?_scale
  8792  00142A  C08A  F099         	movff	?___ftmul+1,?_scale+1
  8793  00142E  C08B  F09A         	movff	?___ftmul+2,?_scale+2
  8794  001432  0012               	return	
  8795  001434                     l6194:
  8796                           
  8797                           ;doprnt.c: 432: else if(scl > 10)
  8798  001434  0100               	movlb	0	; () banked
  8799  001436  519E               	movf	scale@scl& (0+255),w,b
  8800  001438  0A80               	xorlw	128
  8801  00143A  0F75               	addlw	-139
  8802  00143C  A0D8               	btfss	status,0,c
  8803  00143E  D04F               	goto	l6200
  8804                           
  8805                           ; BSR set to: 0
  8806                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  8807  001440  0E00               	movlw	0
  8808  001442  6E2C               	movwf	___awdiv@divisor+1,c
  8809  001444  0E0A               	movlw	10
  8810  001446  6E2B               	movwf	___awdiv@divisor,c
  8811  001448  0100               	movlb	0	; () banked
  8812  00144A  519E               	movf	scale@scl& (0+255),w,b
  8813  00144C  6E29               	movwf	___awdiv@dividend,c
  8814  00144E  6A2A               	clrf	___awdiv@dividend+1,c
  8815  001450  BE29               	btfsc	___awdiv@dividend,7,c
  8816  001452  062A               	decf	___awdiv@dividend+1,f,c
  8817  001454  EC6F  F01A         	call	___awdiv	;wreg free
  8818  001458  0E09               	movlw	9
  8819  00145A  2429               	addwf	?___awdiv,w,c
  8820  00145C  6E31               	movwf	___wmul@multiplier,c
  8821  00145E  0E00               	movlw	0
  8822  001460  202A               	addwfc	?___awdiv+1,w,c
  8823  001462  6E32               	movwf	___wmul@multiplier+1,c
  8824  001464  0E00               	movlw	0
  8825  001466  6E34               	movwf	___wmul@multiplicand+1,c
  8826  001468  0E03               	movlw	3
  8827  00146A  6E33               	movwf	___wmul@multiplicand,c
  8828  00146C  EC86  F01E         	call	___wmul	;wreg free
  8829  001470  0E37               	movlw	low __npowers_
  8830  001472  2431               	addwf	?___wmul,w,c
  8831  001474  6EF6               	movwf	tblptrl,c
  8832  001476  0EFE               	movlw	high __npowers_
  8833  001478  2032               	addwfc	?___wmul+1,w,c
  8834  00147A  6EF7               	movwf	tblptrh,c
  8835  00147C                     	if	0	;There are less than 3 active tblptr bytes
  8836  00147C                     	endif
  8837  00147C  0009               	tblrd		*+
  8838  00147E  CFF5 F089          	movff	tablat,___ftmul@f1
  8839  001482  0009               	tblrd		*+
  8840  001484  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8841  001488  000A               	tblrd		*-
  8842  00148A  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8843  00148E  0E00               	movlw	0
  8844  001490  6E34               	movwf	___wmul@multiplicand+1,c
  8845  001492  0E03               	movlw	3
  8846  001494  6E33               	movwf	___wmul@multiplicand,c
  8847  001496  0E00               	movlw	0
  8848  001498  6E26               	movwf	___awmod@divisor+1,c
  8849  00149A  0E0A               	movlw	10
  8850  00149C  6E25               	movwf	___awmod@divisor,c
  8851  00149E  0100               	movlb	0	; () banked
  8852  0014A0  519E               	movf	scale@scl& (0+255),w,b
  8853  0014A2  6E23               	movwf	___awmod@dividend,c
  8854  0014A4  6A24               	clrf	___awmod@dividend+1,c
  8855  0014A6  BE23               	btfsc	___awmod@dividend,7,c
  8856  0014A8  0624               	decf	___awmod@dividend+1,f,c
  8857  0014AA  EC2E  F01B         	call	___awmod	;wreg free
  8858  0014AE  C023  F031         	movff	?___awmod,___wmul@multiplier
  8859  0014B2  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  8860  0014B6  EC86  F01E         	call	___wmul	;wreg free
  8861  0014BA  0E37               	movlw	low __npowers_
  8862  0014BC  2431               	addwf	?___wmul,w,c
  8863  0014BE  6EF6               	movwf	tblptrl,c
  8864  0014C0  0EFE               	movlw	high __npowers_
  8865  0014C2  2032               	addwfc	?___wmul+1,w,c
  8866  0014C4  6EF7               	movwf	tblptrh,c
  8867  0014C6                     	if	0	;There are less than 3 active tblptr bytes
  8868  0014C6                     	endif
  8869  0014C6  0009               	tblrd		*+
  8870  0014C8  CFF5 F08C          	movff	tablat,___ftmul@f2
  8871  0014CC  0009               	tblrd		*+
  8872  0014CE  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8873  0014D2  000A               	tblrd		*-
  8874  0014D4  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8875  0014D8  ECAF  F010         	call	___ftmul	;wreg free
  8876  0014DC  D7A4               	goto	L4
  8877  0014DE                     l6200:
  8878                           
  8879                           ;doprnt.c: 434: return _npowers_[scl];
  8880  0014DE  0100               	movlb	0	; () banked
  8881  0014E0  519E               	movf	scale@scl& (0+255),w,b
  8882  0014E2  0D03               	mullw	3
  8883  0014E4  0E37               	movlw	low __npowers_
  8884  0014E6  24F3               	addwf	prodl,w,c
  8885  0014E8  6EF6               	movwf	tblptrl,c
  8886  0014EA  0EFE               	movlw	high __npowers_
  8887  0014EC  20F4               	addwfc	prodh,w,c
  8888  0014EE  6EF7               	movwf	tblptrh,c
  8889  0014F0                     	if	0	;There are less than 3 active tblptr bytes
  8890  0014F0                     	endif
  8891  0014F0  0009               	tblrd		*+
  8892  0014F2  CFF5 F098          	movff	tablat,?_scale
  8893  0014F6  0009               	tblrd		*+
  8894  0014F8  CFF5 F099          	movff	tablat,?_scale+1
  8895  0014FC  000A               	tblrd		*-
  8896  0014FE  CFF5 F09A          	movff	tablat,?_scale+2
  8897                           
  8898                           ; BSR set to: 0
  8899  001502  0012               	return	
  8900  001504                     l6204:
  8901                           
  8902                           ; BSR set to: 0
  8903                           ;doprnt.c: 435: }
  8904                           ;doprnt.c: 436: if(scl>=110)
  8905  001504  0100               	movlb	0	; () banked
  8906  001506  519E               	movf	scale@scl& (0+255),w,b
  8907  001508  0A80               	xorlw	128
  8908  00150A  0F12               	addlw	-238
  8909  00150C  A0D8               	btfss	status,0,c
  8910  00150E  D094               	goto	l6212
  8911                           
  8912                           ; BSR set to: 0
  8913                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8914  001510  0E00               	movlw	0
  8915  001512  6E34               	movwf	___wmul@multiplicand+1,c
  8916  001514  0E03               	movlw	3
  8917  001516  6E33               	movwf	___wmul@multiplicand,c
  8918  001518  0E00               	movlw	0
  8919  00151A  6E2C               	movwf	___awdiv@divisor+1,c
  8920  00151C  0E0A               	movlw	10
  8921  00151E  6E2B               	movwf	___awdiv@divisor,c
  8922  001520  0E00               	movlw	0
  8923  001522  6E26               	movwf	___awmod@divisor+1,c
  8924  001524  0E64               	movlw	100
  8925  001526  6E25               	movwf	___awmod@divisor,c
  8926  001528  0100               	movlb	0	; () banked
  8927  00152A  519E               	movf	scale@scl& (0+255),w,b
  8928  00152C  6E23               	movwf	___awmod@dividend,c
  8929  00152E  6A24               	clrf	___awmod@dividend+1,c
  8930  001530  BE23               	btfsc	___awmod@dividend,7,c
  8931  001532  0624               	decf	___awmod@dividend+1,f,c
  8932  001534  EC2E  F01B         	call	___awmod	;wreg free
  8933  001538  C023  F029         	movff	?___awmod,___awdiv@dividend
  8934  00153C  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  8935  001540  EC6F  F01A         	call	___awdiv	;wreg free
  8936  001544  0E09               	movlw	9
  8937  001546  2429               	addwf	?___awdiv,w,c
  8938  001548  6E31               	movwf	___wmul@multiplier,c
  8939  00154A  0E00               	movlw	0
  8940  00154C  202A               	addwfc	?___awdiv+1,w,c
  8941  00154E  6E32               	movwf	___wmul@multiplier+1,c
  8942  001550  EC86  F01E         	call	___wmul	;wreg free
  8943  001554  0E5E               	movlw	low __powers_
  8944  001556  2431               	addwf	?___wmul,w,c
  8945  001558  6EF6               	movwf	tblptrl,c
  8946  00155A  0EFE               	movlw	high __powers_
  8947  00155C  2032               	addwfc	?___wmul+1,w,c
  8948  00155E  6EF7               	movwf	tblptrh,c
  8949  001560                     	if	0	;There are less than 3 active tblptr bytes
  8950  001560                     	endif
  8951  001560  0009               	tblrd		*+
  8952  001562  CFF5 F08C          	movff	tablat,___ftmul@f2
  8953  001566  0009               	tblrd		*+
  8954  001568  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8955  00156C  000A               	tblrd		*-
  8956  00156E  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8957  001572  0E00               	movlw	0
  8958  001574  6E2C               	movwf	___awdiv@divisor+1,c
  8959  001576  0E64               	movlw	100
  8960  001578  6E2B               	movwf	___awdiv@divisor,c
  8961  00157A  0100               	movlb	0	; () banked
  8962  00157C  519E               	movf	scale@scl& (0+255),w,b
  8963  00157E  6E29               	movwf	___awdiv@dividend,c
  8964  001580  6A2A               	clrf	___awdiv@dividend+1,c
  8965  001582  BE29               	btfsc	___awdiv@dividend,7,c
  8966  001584  062A               	decf	___awdiv@dividend+1,f,c
  8967  001586  EC6F  F01A         	call	___awdiv	;wreg free
  8968  00158A  0E12               	movlw	18
  8969  00158C  2429               	addwf	?___awdiv,w,c
  8970  00158E  6E31               	movwf	___wmul@multiplier,c
  8971  001590  0E00               	movlw	0
  8972  001592  202A               	addwfc	?___awdiv+1,w,c
  8973  001594  6E32               	movwf	___wmul@multiplier+1,c
  8974  001596  0E00               	movlw	0
  8975  001598  6E34               	movwf	___wmul@multiplicand+1,c
  8976  00159A  0E03               	movlw	3
  8977  00159C  6E33               	movwf	___wmul@multiplicand,c
  8978  00159E  EC86  F01E         	call	___wmul	;wreg free
  8979  0015A2  0E5E               	movlw	low __powers_
  8980  0015A4  2431               	addwf	?___wmul,w,c
  8981  0015A6  6EF6               	movwf	tblptrl,c
  8982  0015A8  0EFE               	movlw	high __powers_
  8983  0015AA  2032               	addwfc	?___wmul+1,w,c
  8984  0015AC  6EF7               	movwf	tblptrh,c
  8985  0015AE                     	if	0	;There are less than 3 active tblptr bytes
  8986  0015AE                     	endif
  8987  0015AE  0009               	tblrd		*+
  8988  0015B0  CFF5 F089          	movff	tablat,___ftmul@f1
  8989  0015B4  0009               	tblrd		*+
  8990  0015B6  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8991  0015BA  000A               	tblrd		*-
  8992  0015BC  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8993  0015C0  ECAF  F010         	call	___ftmul	;wreg free
  8994  0015C4  C089  F09B         	movff	?___ftmul,_scale$1437
  8995  0015C8  C08A  F09C         	movff	?___ftmul+1,_scale$1437+1
  8996  0015CC  C08B  F09D         	movff	?___ftmul+2,_scale$1437+2
  8997                           
  8998                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8999  0015D0  C09B  F089         	movff	_scale$1437,___ftmul@f1
  9000  0015D4  C09C  F08A         	movff	_scale$1437+1,___ftmul@f1+1
  9001  0015D8  C09D  F08B         	movff	_scale$1437+2,___ftmul@f1+2
  9002  0015DC  0E00               	movlw	0
  9003  0015DE  6E34               	movwf	___wmul@multiplicand+1,c
  9004  0015E0  0E03               	movlw	3
  9005  0015E2  6E33               	movwf	___wmul@multiplicand,c
  9006  0015E4  0E00               	movlw	0
  9007  0015E6  6E26               	movwf	___awmod@divisor+1,c
  9008  0015E8  0E0A               	movlw	10
  9009  0015EA  6E25               	movwf	___awmod@divisor,c
  9010  0015EC  0100               	movlb	0	; () banked
  9011  0015EE  519E               	movf	scale@scl& (0+255),w,b
  9012  0015F0  6E23               	movwf	___awmod@dividend,c
  9013  0015F2  6A24               	clrf	___awmod@dividend+1,c
  9014  0015F4  BE23               	btfsc	___awmod@dividend,7,c
  9015  0015F6  0624               	decf	___awmod@dividend+1,f,c
  9016  0015F8  EC2E  F01B         	call	___awmod	;wreg free
  9017  0015FC  C023  F031         	movff	?___awmod,___wmul@multiplier
  9018  001600  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  9019  001604  EC86  F01E         	call	___wmul	;wreg free
  9020  001608  0E5E               	movlw	low __powers_
  9021  00160A  2431               	addwf	?___wmul,w,c
  9022  00160C  6EF6               	movwf	tblptrl,c
  9023  00160E  0EFE               	movlw	high __powers_
  9024  001610  2032               	addwfc	?___wmul+1,w,c
  9025  001612  6EF7               	movwf	tblptrh,c
  9026  001614                     	if	0	;There are less than 3 active tblptr bytes
  9027  001614                     	endif
  9028  001614  0009               	tblrd		*+
  9029  001616  CFF5 F08C          	movff	tablat,___ftmul@f2
  9030  00161A  0009               	tblrd		*+
  9031  00161C  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  9032  001620  000A               	tblrd		*-
  9033  001622  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  9034  001626  ECAF  F010         	call	___ftmul	;wreg free
  9035  00162A  C089  F098         	movff	?___ftmul,?_scale
  9036  00162E  C08A  F099         	movff	?___ftmul+1,?_scale+1
  9037  001632  C08B  F09A         	movff	?___ftmul+2,?_scale+2
  9038  001636  0012               	return	
  9039  001638                     l6212:
  9040                           
  9041                           ;doprnt.c: 438: else if(scl > 10)
  9042  001638  0100               	movlb	0	; () banked
  9043  00163A  519E               	movf	scale@scl& (0+255),w,b
  9044  00163C  0A80               	xorlw	128
  9045  00163E  0F75               	addlw	-139
  9046  001640  A0D8               	btfss	status,0,c
  9047  001642  D04F               	goto	l6218
  9048                           
  9049                           ; BSR set to: 0
  9050                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  9051  001644  0E00               	movlw	0
  9052  001646  6E2C               	movwf	___awdiv@divisor+1,c
  9053  001648  0E0A               	movlw	10
  9054  00164A  6E2B               	movwf	___awdiv@divisor,c
  9055  00164C  0100               	movlb	0	; () banked
  9056  00164E  519E               	movf	scale@scl& (0+255),w,b
  9057  001650  6E29               	movwf	___awdiv@dividend,c
  9058  001652  6A2A               	clrf	___awdiv@dividend+1,c
  9059  001654  BE29               	btfsc	___awdiv@dividend,7,c
  9060  001656  062A               	decf	___awdiv@dividend+1,f,c
  9061  001658  EC6F  F01A         	call	___awdiv	;wreg free
  9062  00165C  0E09               	movlw	9
  9063  00165E  2429               	addwf	?___awdiv,w,c
  9064  001660  6E31               	movwf	___wmul@multiplier,c
  9065  001662  0E00               	movlw	0
  9066  001664  202A               	addwfc	?___awdiv+1,w,c
  9067  001666  6E32               	movwf	___wmul@multiplier+1,c
  9068  001668  0E00               	movlw	0
  9069  00166A  6E34               	movwf	___wmul@multiplicand+1,c
  9070  00166C  0E03               	movlw	3
  9071  00166E  6E33               	movwf	___wmul@multiplicand,c
  9072  001670  EC86  F01E         	call	___wmul	;wreg free
  9073  001674  0E5E               	movlw	low __powers_
  9074  001676  2431               	addwf	?___wmul,w,c
  9075  001678  6EF6               	movwf	tblptrl,c
  9076  00167A  0EFE               	movlw	high __powers_
  9077  00167C  2032               	addwfc	?___wmul+1,w,c
  9078  00167E  6EF7               	movwf	tblptrh,c
  9079  001680                     	if	0	;There are less than 3 active tblptr bytes
  9080  001680                     	endif
  9081  001680  0009               	tblrd		*+
  9082  001682  CFF5 F089          	movff	tablat,___ftmul@f1
  9083  001686  0009               	tblrd		*+
  9084  001688  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  9085  00168C  000A               	tblrd		*-
  9086  00168E  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  9087  001692  0E00               	movlw	0
  9088  001694  6E34               	movwf	___wmul@multiplicand+1,c
  9089  001696  0E03               	movlw	3
  9090  001698  6E33               	movwf	___wmul@multiplicand,c
  9091  00169A  0E00               	movlw	0
  9092  00169C  6E26               	movwf	___awmod@divisor+1,c
  9093  00169E  0E0A               	movlw	10
  9094  0016A0  6E25               	movwf	___awmod@divisor,c
  9095  0016A2  0100               	movlb	0	; () banked
  9096  0016A4  519E               	movf	scale@scl& (0+255),w,b
  9097  0016A6  6E23               	movwf	___awmod@dividend,c
  9098  0016A8  6A24               	clrf	___awmod@dividend+1,c
  9099  0016AA  BE23               	btfsc	___awmod@dividend,7,c
  9100  0016AC  0624               	decf	___awmod@dividend+1,f,c
  9101  0016AE  EC2E  F01B         	call	___awmod	;wreg free
  9102  0016B2  C023  F031         	movff	?___awmod,___wmul@multiplier
  9103  0016B6  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  9104  0016BA  EC86  F01E         	call	___wmul	;wreg free
  9105  0016BE  0E5E               	movlw	low __powers_
  9106  0016C0  2431               	addwf	?___wmul,w,c
  9107  0016C2  6EF6               	movwf	tblptrl,c
  9108  0016C4  0EFE               	movlw	high __powers_
  9109  0016C6  2032               	addwfc	?___wmul+1,w,c
  9110  0016C8  6EF7               	movwf	tblptrh,c
  9111  0016CA                     	if	0	;There are less than 3 active tblptr bytes
  9112  0016CA                     	endif
  9113  0016CA  0009               	tblrd		*+
  9114  0016CC  CFF5 F08C          	movff	tablat,___ftmul@f2
  9115  0016D0  0009               	tblrd		*+
  9116  0016D2  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  9117  0016D6  000A               	tblrd		*-
  9118  0016D8  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  9119  0016DC  ECAF  F010         	call	___ftmul	;wreg free
  9120  0016E0  D7A4               	goto	L5
  9121  0016E2                     l6218:
  9122                           
  9123                           ;doprnt.c: 440: return _powers_[scl];
  9124  0016E2  0100               	movlb	0	; () banked
  9125  0016E4  519E               	movf	scale@scl& (0+255),w,b
  9126  0016E6  0D03               	mullw	3
  9127  0016E8  0E5E               	movlw	low __powers_
  9128  0016EA  24F3               	addwf	prodl,w,c
  9129  0016EC  6EF6               	movwf	tblptrl,c
  9130  0016EE  0EFE               	movlw	high __powers_
  9131  0016F0  20F4               	addwfc	prodh,w,c
  9132  0016F2  6EF7               	movwf	tblptrh,c
  9133  0016F4                     	if	0	;There are less than 3 active tblptr bytes
  9134  0016F4                     	endif
  9135  0016F4  0009               	tblrd		*+
  9136  0016F6  CFF5 F098          	movff	tablat,?_scale
  9137  0016FA  0009               	tblrd		*+
  9138  0016FC  CFF5 F099          	movff	tablat,?_scale+1
  9139  001700  000A               	tblrd		*-
  9140  001702  CFF5 F09A          	movff	tablat,?_scale+2
  9141  001706  0012               	return	
  9142  001708                     __end_of_scale:
  9143                           	opt stack 0
  9144                           tblptru	equ	0xFF8
  9145                           tblptrh	equ	0xFF7
  9146                           tblptrl	equ	0xFF6
  9147                           tablat	equ	0xFF5
  9148                           prodh	equ	0xFF4
  9149                           prodl	equ	0xFF3
  9150                           intcon	equ	0xFF2
  9151                           postinc0	equ	0xFEE
  9152                           wreg	equ	0xFE8
  9153                           postdec1	equ	0xFE5
  9154                           fsr1l	equ	0xFE1
  9155                           indf2	equ	0xFDF
  9156                           postinc2	equ	0xFDE
  9157                           postdec2	equ	0xFDD
  9158                           fsr2h	equ	0xFDA
  9159                           fsr2l	equ	0xFD9
  9160                           status	equ	0xFD8
  9161                           
  9162 ;; *************** function _putch *****************
  9163 ;; Defined at:
  9164 ;;		line 35 in file "lcd.c"
  9165 ;; Parameters:    Size  Location     Type
  9166 ;;  data            1    wreg     unsigned char 
  9167 ;; Auto vars:     Size  Location     Type
  9168 ;;  data            1   38[COMRAM] unsigned char 
  9169 ;; Return value:  Size  Location     Type
  9170 ;;                  1    wreg      void 
  9171 ;; Registers used:
  9172 ;;		wreg, status,2, status,0, cstack
  9173 ;; Tracked objects:
  9174 ;;		On entry : 0/0
  9175 ;;		On exit  : 0/0
  9176 ;;		Unchanged: 0/0
  9177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9179 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9181 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9182 ;;Total ram usage:        1 bytes
  9183 ;; Hardware stack levels used:    1
  9184 ;; Hardware stack levels required when called:    6
  9185 ;; This function calls:
  9186 ;;		_lcdNewline
  9187 ;;		_lcdNibble
  9188 ;; This function is called by:
  9189 ;;		_printf
  9190 ;; This function uses a non-reentrant model
  9191 ;;
  9192                           
  9193                           	psect	text25
  9194  003D78                     __ptext25:
  9195                           	opt stack 0
  9196  003D78                     _putch:
  9197                           	opt stack 22
  9198                           
  9199                           ;incstack = 0
  9200                           ;putch@data stored from wreg
  9201  003D78  6E27               	movwf	putch@data,c
  9202                           
  9203                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  9204  003D7A  0E0A               	movlw	10
  9205  003D7C  1827               	xorwf	putch@data,w,c
  9206  003D7E  A4D8               	btfss	status,2,c
  9207  003D80  D003               	goto	l237
  9208  003D82  EC0B  F01F         	call	_lcdNewline	;wreg free
  9209  003D86  0012               	return	
  9210  003D88                     l237:
  9211                           
  9212                           ;lcd.c: 37: else
  9213                           ;lcd.c: 38: {
  9214                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  9215  003D88  848C               	bsf	3980,2,c	;volatile
  9216                           
  9217                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  9218  003D8A  0E74               	movlw	116
  9219  003D8C                     u8277:
  9220  003D8C  2EE8               	decfsz	wreg,f,c
  9221  003D8E  D7FE               	bra	u8277
  9222  003D90  D000               	nop2	
  9223                           
  9224                           ;lcd.c: 41: lcdNibble(data);
  9225  003D92  5027               	movf	putch@data,w,c
  9226  003D94  EC04  F01C         	call	_lcdNibble
  9227  003D98  0012               	return	
  9228  003D9A                     __end_of_putch:
  9229                           	opt stack 0
  9230                           tblptru	equ	0xFF8
  9231                           tblptrh	equ	0xFF7
  9232                           tblptrl	equ	0xFF6
  9233                           tablat	equ	0xFF5
  9234                           prodh	equ	0xFF4
  9235                           prodl	equ	0xFF3
  9236                           intcon	equ	0xFF2
  9237                           postinc0	equ	0xFEE
  9238                           wreg	equ	0xFE8
  9239                           postdec1	equ	0xFE5
  9240                           fsr1l	equ	0xFE1
  9241                           indf2	equ	0xFDF
  9242                           postinc2	equ	0xFDE
  9243                           postdec2	equ	0xFDD
  9244                           fsr2h	equ	0xFDA
  9245                           fsr2l	equ	0xFD9
  9246                           status	equ	0xFD8
  9247                           
  9248 ;; *************** function _lcdNewline *****************
  9249 ;; Defined at:
  9250 ;;		line 78 in file "lcd.c"
  9251 ;; Parameters:    Size  Location     Type
  9252 ;;		None
  9253 ;; Auto vars:     Size  Location     Type
  9254 ;;		None
  9255 ;; Return value:  Size  Location     Type
  9256 ;;                  1    wreg      void 
  9257 ;; Registers used:
  9258 ;;		wreg, status,2, status,0, cstack
  9259 ;; Tracked objects:
  9260 ;;		On entry : 0/0
  9261 ;;		On exit  : 0/0
  9262 ;;		Unchanged: 0/0
  9263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9268 ;;Total ram usage:        0 bytes
  9269 ;; Hardware stack levels used:    1
  9270 ;; Hardware stack levels required when called:    5
  9271 ;; This function calls:
  9272 ;;		_lcdInst
  9273 ;; This function is called by:
  9274 ;;		_putch
  9275 ;; This function uses a non-reentrant model
  9276 ;;
  9277                           
  9278                           	psect	text26
  9279  003E16                     __ptext26:
  9280                           	opt stack 0
  9281  003E16                     _lcdNewline:
  9282                           	opt stack 22
  9283                           
  9284                           ;lcd.c: 79: lcdInst(0b11000000);
  9285                           
  9286                           ;incstack = 0
  9287  003E16  0EC0               	movlw	192
  9288  003E18  ECCD  F01E         	call	_lcdInst
  9289  003E1C  0012               	return		;funcret
  9290  003E1E                     __end_of_lcdNewline:
  9291                           	opt stack 0
  9292                           tblptru	equ	0xFF8
  9293                           tblptrh	equ	0xFF7
  9294                           tblptrl	equ	0xFF6
  9295                           tablat	equ	0xFF5
  9296                           prodh	equ	0xFF4
  9297                           prodl	equ	0xFF3
  9298                           intcon	equ	0xFF2
  9299                           postinc0	equ	0xFEE
  9300                           wreg	equ	0xFE8
  9301                           postdec1	equ	0xFE5
  9302                           fsr1l	equ	0xFE1
  9303                           indf2	equ	0xFDF
  9304                           postinc2	equ	0xFDE
  9305                           postdec2	equ	0xFDD
  9306                           fsr2h	equ	0xFDA
  9307                           fsr2l	equ	0xFD9
  9308                           status	equ	0xFD8
  9309                           
  9310 ;; *************** function _isdigit *****************
  9311 ;; Defined at:
  9312 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  9313 ;; Parameters:    Size  Location     Type
  9314 ;;  c               1    wreg     unsigned char 
  9315 ;; Auto vars:     Size  Location     Type
  9316 ;;  c               1   36[COMRAM] unsigned char 
  9317 ;; Return value:  Size  Location     Type
  9318 ;;		None               void
  9319 ;; Registers used:
  9320 ;;		wreg, status,2, status,0
  9321 ;; Tracked objects:
  9322 ;;		On entry : 0/0
  9323 ;;		On exit  : 0/0
  9324 ;;		Unchanged: 0/0
  9325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9327 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9328 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9329 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9330 ;;Total ram usage:        3 bytes
  9331 ;; Hardware stack levels used:    1
  9332 ;; Hardware stack levels required when called:    3
  9333 ;; This function calls:
  9334 ;;		Nothing
  9335 ;; This function is called by:
  9336 ;;		_printf
  9337 ;; This function uses a non-reentrant model
  9338 ;;
  9339                           
  9340                           	psect	text27
  9341  003DBC                     __ptext27:
  9342                           	opt stack 0
  9343  003DBC                     _isdigit:
  9344                           	opt stack 25
  9345                           
  9346                           ;incstack = 0
  9347                           ;isdigit@c stored from wreg
  9348  003DBC  6E25               	movwf	isdigit@c,c
  9349  003DBE  0E00               	movlw	0
  9350  003DC0  6E24               	movwf	_isdigit$1066,c
  9351  003DC2  0E3A               	movlw	58
  9352  003DC4  6025               	cpfslt	isdigit@c,c
  9353  003DC6  D005               	goto	l6230
  9354  003DC8  0E2F               	movlw	47
  9355  003DCA  6425               	cpfsgt	isdigit@c,c
  9356  003DCC  D002               	goto	l6230
  9357  003DCE  0E01               	movlw	1
  9358  003DD0  6E24               	movwf	_isdigit$1066,c
  9359  003DD2                     l6230:
  9360  003DD2  C024  F023         	movff	_isdigit$1066,??_isdigit
  9361  003DD6  3023               	rrcf	??_isdigit,w,c
  9362  003DD8  0012               	return	
  9363  003DDA                     __end_of_isdigit:
  9364                           	opt stack 0
  9365                           tblptru	equ	0xFF8
  9366                           tblptrh	equ	0xFF7
  9367                           tblptrl	equ	0xFF6
  9368                           tablat	equ	0xFF5
  9369                           prodh	equ	0xFF4
  9370                           prodl	equ	0xFF3
  9371                           intcon	equ	0xFF2
  9372                           postinc0	equ	0xFEE
  9373                           wreg	equ	0xFE8
  9374                           postdec1	equ	0xFE5
  9375                           fsr1l	equ	0xFE1
  9376                           indf2	equ	0xFDF
  9377                           postinc2	equ	0xFDE
  9378                           postdec2	equ	0xFDD
  9379                           fsr2h	equ	0xFDA
  9380                           fsr2l	equ	0xFD9
  9381                           status	equ	0xFD8
  9382                           
  9383 ;; *************** function _fround *****************
  9384 ;; Defined at:
  9385 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  9386 ;; Parameters:    Size  Location     Type
  9387 ;;  prec            1    wreg     unsigned char 
  9388 ;; Auto vars:     Size  Location     Type
  9389 ;;  prec            1   33[BANK0 ] unsigned char 
  9390 ;; Return value:  Size  Location     Type
  9391 ;;                  3   24[BANK0 ] unsigned char 
  9392 ;; Registers used:
  9393 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9394 ;; Tracked objects:
  9395 ;;		On entry : 0/0
  9396 ;;		On exit  : 0/0
  9397 ;;		Unchanged: 0/0
  9398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9399 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9400 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9402 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9403 ;;Total ram usage:       10 bytes
  9404 ;; Hardware stack levels used:    1
  9405 ;; Hardware stack levels required when called:    5
  9406 ;; This function calls:
  9407 ;;		___awdiv
  9408 ;;		___awmod
  9409 ;;		___ftmul
  9410 ;;		___wmul
  9411 ;; This function is called by:
  9412 ;;		_printf
  9413 ;; This function uses a non-reentrant model
  9414 ;;
  9415                           
  9416                           	psect	text28
  9417  001D44                     __ptext28:
  9418                           	opt stack 0
  9419  001D44                     _fround:
  9420                           	opt stack 23
  9421                           
  9422                           ;incstack = 0
  9423                           ;fround@prec stored from wreg
  9424  001D44  0100               	movlb	0	; () banked
  9425  001D46  6FA1               	movwf	fround@prec& (0+255),b
  9426                           
  9427                           ;doprnt.c: 413: if(prec>=110)
  9428  001D48  0E6D               	movlw	109
  9429  001D4A  0100               	movlb	0	; () banked
  9430  001D4C  65A1               	cpfsgt	fround@prec& (0+255),b
  9431  001D4E  D0A2               	goto	l6172
  9432                           
  9433                           ; BSR set to: 0
  9434                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9435  001D50  0E00               	movlw	0
  9436  001D52  6E34               	movwf	___wmul@multiplicand+1,c
  9437  001D54  0E03               	movlw	3
  9438  001D56  6E33               	movwf	___wmul@multiplicand,c
  9439  001D58  0E00               	movlw	0
  9440  001D5A  6E2C               	movwf	___awdiv@divisor+1,c
  9441  001D5C  0E0A               	movlw	10
  9442  001D5E  6E2B               	movwf	___awdiv@divisor,c
  9443  001D60  0E00               	movlw	0
  9444  001D62  6E26               	movwf	___awmod@divisor+1,c
  9445  001D64  0E64               	movlw	100
  9446  001D66  6E25               	movwf	___awmod@divisor,c
  9447  001D68  C0A1  F023         	movff	fround@prec,___awmod@dividend
  9448  001D6C  6A24               	clrf	___awmod@dividend+1,c
  9449  001D6E  EC2E  F01B         	call	___awmod	;wreg free
  9450  001D72  C023  F029         	movff	?___awmod,___awdiv@dividend
  9451  001D76  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  9452  001D7A  EC6F  F01A         	call	___awdiv	;wreg free
  9453  001D7E  0E09               	movlw	9
  9454  001D80  2429               	addwf	?___awdiv,w,c
  9455  001D82  6E31               	movwf	___wmul@multiplier,c
  9456  001D84  0E00               	movlw	0
  9457  001D86  202A               	addwfc	?___awdiv+1,w,c
  9458  001D88  6E32               	movwf	___wmul@multiplier+1,c
  9459  001D8A  EC86  F01E         	call	___wmul	;wreg free
  9460  001D8E  0E37               	movlw	low __npowers_
  9461  001D90  2431               	addwf	?___wmul,w,c
  9462  001D92  6EF6               	movwf	tblptrl,c
  9463  001D94  0EFE               	movlw	high __npowers_
  9464  001D96  2032               	addwfc	?___wmul+1,w,c
  9465  001D98  6EF7               	movwf	tblptrh,c
  9466  001D9A                     	if	0	;There are less than 3 active tblptr bytes
  9467  001D9A                     	endif
  9468  001D9A  0009               	tblrd		*+
  9469  001D9C  CFF5 F08C          	movff	tablat,___ftmul@f2
  9470  001DA0  0009               	tblrd		*+
  9471  001DA2  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  9472  001DA6  000A               	tblrd		*-
  9473  001DA8  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  9474  001DAC  0E00               	movlw	0
  9475  001DAE  6E2C               	movwf	___awdiv@divisor+1,c
  9476  001DB0  0E64               	movlw	100
  9477  001DB2  6E2B               	movwf	___awdiv@divisor,c
  9478  001DB4  C0A1  F029         	movff	fround@prec,___awdiv@dividend
  9479  001DB8  6A2A               	clrf	___awdiv@dividend+1,c
  9480  001DBA  EC6F  F01A         	call	___awdiv	;wreg free
  9481  001DBE  0E12               	movlw	18
  9482  001DC0  2429               	addwf	?___awdiv,w,c
  9483  001DC2  6E31               	movwf	___wmul@multiplier,c
  9484  001DC4  0E00               	movlw	0
  9485  001DC6  202A               	addwfc	?___awdiv+1,w,c
  9486  001DC8  6E32               	movwf	___wmul@multiplier+1,c
  9487  001DCA  0E00               	movlw	0
  9488  001DCC  6E34               	movwf	___wmul@multiplicand+1,c
  9489  001DCE  0E03               	movlw	3
  9490  001DD0  6E33               	movwf	___wmul@multiplicand,c
  9491  001DD2  EC86  F01E         	call	___wmul	;wreg free
  9492  001DD6  0E37               	movlw	low __npowers_
  9493  001DD8  2431               	addwf	?___wmul,w,c
  9494  001DDA  6EF6               	movwf	tblptrl,c
  9495  001DDC  0EFE               	movlw	high __npowers_
  9496  001DDE  2032               	addwfc	?___wmul+1,w,c
  9497  001DE0  6EF7               	movwf	tblptrh,c
  9498  001DE2                     	if	0	;There are less than 3 active tblptr bytes
  9499  001DE2                     	endif
  9500  001DE2  0009               	tblrd		*+
  9501  001DE4  CFF5 F089          	movff	tablat,___ftmul@f1
  9502  001DE8  0009               	tblrd		*+
  9503  001DEA  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  9504  001DEE  000A               	tblrd		*-
  9505  001DF0  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  9506  001DF4  ECAF  F010         	call	___ftmul	;wreg free
  9507  001DF8  C089  F09E         	movff	?___ftmul,_fround$1435
  9508  001DFC  C08A  F09F         	movff	?___ftmul+1,_fround$1435+1
  9509  001E00  C08B  F0A0         	movff	?___ftmul+2,_fround$1435+2
  9510                           
  9511                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9512  001E04  0E00               	movlw	0
  9513  001E06  6E34               	movwf	___wmul@multiplicand+1,c
  9514  001E08  0E03               	movlw	3
  9515  001E0A  6E33               	movwf	___wmul@multiplicand,c
  9516  001E0C  0E00               	movlw	0
  9517  001E0E  6E26               	movwf	___awmod@divisor+1,c
  9518  001E10  0E0A               	movlw	10
  9519  001E12  6E25               	movwf	___awmod@divisor,c
  9520  001E14  C0A1  F023         	movff	fround@prec,___awmod@dividend
  9521  001E18  6A24               	clrf	___awmod@dividend+1,c
  9522  001E1A  EC2E  F01B         	call	___awmod	;wreg free
  9523  001E1E  C023  F031         	movff	?___awmod,___wmul@multiplier
  9524  001E22  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  9525  001E26  EC86  F01E         	call	___wmul	;wreg free
  9526  001E2A  0E37               	movlw	low __npowers_
  9527  001E2C  2431               	addwf	?___wmul,w,c
  9528  001E2E  6EF6               	movwf	tblptrl,c
  9529  001E30  0EFE               	movlw	high __npowers_
  9530  001E32  2032               	addwfc	?___wmul+1,w,c
  9531  001E34  6EF7               	movwf	tblptrh,c
  9532  001E36                     	if	0	;There are less than 3 active tblptr bytes
  9533  001E36                     	endif
  9534  001E36  0009               	tblrd		*+
  9535  001E38  CFF5 F08C          	movff	tablat,___ftmul@f2
  9536  001E3C  0009               	tblrd		*+
  9537  001E3E  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  9538  001E42  000A               	tblrd		*-
  9539  001E44  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  9540  001E48  C09E  F089         	movff	_fround$1435,___ftmul@f1
  9541  001E4C  C09F  F08A         	movff	_fround$1435+1,___ftmul@f1+1
  9542  001E50  C0A0  F08B         	movff	_fround$1435+2,___ftmul@f1+2
  9543  001E54  ECAF  F010         	call	___ftmul	;wreg free
  9544  001E58  C089  F09B         	movff	?___ftmul,_fround$1436
  9545  001E5C  C08A  F09C         	movff	?___ftmul+1,_fround$1436+1
  9546  001E60  C08B  F09D         	movff	?___ftmul+2,_fround$1436+2
  9547                           
  9548                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9549  001E64  C09B  F089         	movff	_fround$1436,___ftmul@f1
  9550  001E68  C09C  F08A         	movff	_fround$1436+1,___ftmul@f1+1
  9551  001E6C  C09D  F08B         	movff	_fround$1436+2,___ftmul@f1+2
  9552  001E70  0E00               	movlw	0
  9553  001E72  0100               	movlb	0	; () banked
  9554  001E74  6F8C               	movwf	___ftmul@f2& (0+255),b
  9555  001E76  0E00               	movlw	0
  9556  001E78  0100               	movlb	0	; () banked
  9557  001E7A  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  9558  001E7C  0E3F               	movlw	63
  9559  001E7E  0100               	movlb	0	; () banked
  9560  001E80  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  9561  001E82  ECAF  F010         	call	___ftmul	;wreg free
  9562  001E86  C089  F098         	movff	?___ftmul,?_fround
  9563  001E8A  C08A  F099         	movff	?___ftmul+1,?_fround+1
  9564  001E8E  C08B  F09A         	movff	?___ftmul+2,?_fround+2
  9565  001E92  0012               	return	
  9566  001E94                     l6172:
  9567                           
  9568                           ;doprnt.c: 415: else if(prec > 10)
  9569  001E94  0E0A               	movlw	10
  9570  001E96  0100               	movlb	0	; () banked
  9571  001E98  65A1               	cpfsgt	fround@prec& (0+255),b
  9572  001E9A  D060               	goto	l6180
  9573                           
  9574                           ; BSR set to: 0
  9575                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9576  001E9C  0E00               	movlw	0
  9577  001E9E  6E34               	movwf	___wmul@multiplicand+1,c
  9578  001EA0  0E03               	movlw	3
  9579  001EA2  6E33               	movwf	___wmul@multiplicand,c
  9580  001EA4  0E00               	movlw	0
  9581  001EA6  6E26               	movwf	___awmod@divisor+1,c
  9582  001EA8  0E0A               	movlw	10
  9583  001EAA  6E25               	movwf	___awmod@divisor,c
  9584  001EAC  C0A1  F023         	movff	fround@prec,___awmod@dividend
  9585  001EB0  6A24               	clrf	___awmod@dividend+1,c
  9586  001EB2  EC2E  F01B         	call	___awmod	;wreg free
  9587  001EB6  C023  F031         	movff	?___awmod,___wmul@multiplier
  9588  001EBA  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  9589  001EBE  EC86  F01E         	call	___wmul	;wreg free
  9590  001EC2  0E37               	movlw	low __npowers_
  9591  001EC4  2431               	addwf	?___wmul,w,c
  9592  001EC6  6EF6               	movwf	tblptrl,c
  9593  001EC8  0EFE               	movlw	high __npowers_
  9594  001ECA  2032               	addwfc	?___wmul+1,w,c
  9595  001ECC  6EF7               	movwf	tblptrh,c
  9596  001ECE                     	if	0	;There are less than 3 active tblptr bytes
  9597  001ECE                     	endif
  9598  001ECE  0009               	tblrd		*+
  9599  001ED0  CFF5 F08C          	movff	tablat,___ftmul@f2
  9600  001ED4  0009               	tblrd		*+
  9601  001ED6  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  9602  001EDA  000A               	tblrd		*-
  9603  001EDC  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  9604  001EE0  0E00               	movlw	0
  9605  001EE2  6E2C               	movwf	___awdiv@divisor+1,c
  9606  001EE4  0E0A               	movlw	10
  9607  001EE6  6E2B               	movwf	___awdiv@divisor,c
  9608  001EE8  C0A1  F029         	movff	fround@prec,___awdiv@dividend
  9609  001EEC  6A2A               	clrf	___awdiv@dividend+1,c
  9610  001EEE  EC6F  F01A         	call	___awdiv	;wreg free
  9611  001EF2  0E09               	movlw	9
  9612  001EF4  2429               	addwf	?___awdiv,w,c
  9613  001EF6  6E31               	movwf	___wmul@multiplier,c
  9614  001EF8  0E00               	movlw	0
  9615  001EFA  202A               	addwfc	?___awdiv+1,w,c
  9616  001EFC  6E32               	movwf	___wmul@multiplier+1,c
  9617  001EFE  0E00               	movlw	0
  9618  001F00  6E34               	movwf	___wmul@multiplicand+1,c
  9619  001F02  0E03               	movlw	3
  9620  001F04  6E33               	movwf	___wmul@multiplicand,c
  9621  001F06  EC86  F01E         	call	___wmul	;wreg free
  9622  001F0A  0E37               	movlw	low __npowers_
  9623  001F0C  2431               	addwf	?___wmul,w,c
  9624  001F0E  6EF6               	movwf	tblptrl,c
  9625  001F10  0EFE               	movlw	high __npowers_
  9626  001F12  2032               	addwfc	?___wmul+1,w,c
  9627  001F14  6EF7               	movwf	tblptrh,c
  9628  001F16                     	if	0	;There are less than 3 active tblptr bytes
  9629  001F16                     	endif
  9630  001F16  0009               	tblrd		*+
  9631  001F18  CFF5 F089          	movff	tablat,___ftmul@f1
  9632  001F1C  0009               	tblrd		*+
  9633  001F1E  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  9634  001F22  000A               	tblrd		*-
  9635  001F24  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  9636  001F28  ECAF  F010         	call	___ftmul	;wreg free
  9637  001F2C  C089  F09E         	movff	?___ftmul,_fround$1435
  9638  001F30  C08A  F09F         	movff	?___ftmul+1,_fround$1435+1
  9639  001F34  C08B  F0A0         	movff	?___ftmul+2,_fround$1435+2
  9640                           
  9641                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9642  001F38  C09E  F089         	movff	_fround$1435,___ftmul@f1
  9643  001F3C  C09F  F08A         	movff	_fround$1435+1,___ftmul@f1+1
  9644  001F40  C0A0  F08B         	movff	_fround$1435+2,___ftmul@f1+2
  9645  001F44  0E00               	movlw	0
  9646  001F46  0100               	movlb	0	; () banked
  9647  001F48  6F8C               	movwf	___ftmul@f2& (0+255),b
  9648  001F4A  0E00               	movlw	0
  9649  001F4C  0100               	movlb	0	; () banked
  9650  001F4E  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  9651  001F50  0E3F               	movlw	63
  9652  001F52  0100               	movlb	0	; () banked
  9653  001F54  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  9654  001F56  ECAF  F010         	call	___ftmul	;wreg free
  9655  001F5A  D795               	goto	L6
  9656  001F5C                     l6180:
  9657                           
  9658                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  9659  001F5C  0100               	movlb	0	; () banked
  9660  001F5E  51A1               	movf	fround@prec& (0+255),w,b
  9661  001F60  0D03               	mullw	3
  9662  001F62  0E37               	movlw	low __npowers_
  9663  001F64  24F3               	addwf	prodl,w,c
  9664  001F66  6EF6               	movwf	tblptrl,c
  9665  001F68  0EFE               	movlw	high __npowers_
  9666  001F6A  20F4               	addwfc	prodh,w,c
  9667  001F6C  6EF7               	movwf	tblptrh,c
  9668  001F6E                     	if	0	;There are less than 3 active tblptr bytes
  9669  001F6E                     	endif
  9670  001F6E  0009               	tblrd		*+
  9671  001F70  CFF5 F089          	movff	tablat,___ftmul@f1
  9672  001F74  0009               	tblrd		*+
  9673  001F76  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  9674  001F7A  000A               	tblrd		*-
  9675  001F7C  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  9676  001F80  0E00               	movlw	0
  9677  001F82  0100               	movlb	0	; () banked
  9678  001F84  6F8C               	movwf	___ftmul@f2& (0+255),b
  9679  001F86  0E00               	movlw	0
  9680  001F88  0100               	movlb	0	; () banked
  9681  001F8A  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  9682  001F8C  0E3F               	movlw	63
  9683  001F8E  0100               	movlb	0	; () banked
  9684  001F90  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  9685  001F92  ECAF  F010         	call	___ftmul	;wreg free
  9686  001F96  C089  F098         	movff	?___ftmul,?_fround
  9687  001F9A  C08A  F099         	movff	?___ftmul+1,?_fround+1
  9688  001F9E  C08B  F09A         	movff	?___ftmul+2,?_fround+2
  9689  001FA2  0012               	return	
  9690  001FA4                     __end_of_fround:
  9691                           	opt stack 0
  9692                           tblptru	equ	0xFF8
  9693                           tblptrh	equ	0xFF7
  9694                           tblptrl	equ	0xFF6
  9695                           tablat	equ	0xFF5
  9696                           prodh	equ	0xFF4
  9697                           prodl	equ	0xFF3
  9698                           intcon	equ	0xFF2
  9699                           postinc0	equ	0xFEE
  9700                           wreg	equ	0xFE8
  9701                           postdec1	equ	0xFE5
  9702                           fsr1l	equ	0xFE1
  9703                           indf2	equ	0xFDF
  9704                           postinc2	equ	0xFDE
  9705                           postdec2	equ	0xFDD
  9706                           fsr2h	equ	0xFDA
  9707                           fsr2l	equ	0xFD9
  9708                           status	equ	0xFD8
  9709                           
  9710 ;; *************** function ___ftmul *****************
  9711 ;; Defined at:
  9712 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  9713 ;; Parameters:    Size  Location     Type
  9714 ;;  f1              3    9[BANK0 ] float 
  9715 ;;  f2              3   12[BANK0 ] float 
  9716 ;; Auto vars:     Size  Location     Type
  9717 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
  9718 ;;  sign            1   23[BANK0 ] unsigned char 
  9719 ;;  cntr            1   22[BANK0 ] unsigned char 
  9720 ;;  exp             1   18[BANK0 ] unsigned char 
  9721 ;; Return value:  Size  Location     Type
  9722 ;;                  3    9[BANK0 ] float 
  9723 ;; Registers used:
  9724 ;;		wreg, status,2, status,0, cstack
  9725 ;; Tracked objects:
  9726 ;;		On entry : 0/0
  9727 ;;		On exit  : 0/0
  9728 ;;		Unchanged: 0/0
  9729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9730 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9731 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9732 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9733 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9734 ;;Total ram usage:       15 bytes
  9735 ;; Hardware stack levels used:    1
  9736 ;; Hardware stack levels required when called:    4
  9737 ;; This function calls:
  9738 ;;		___ftpack
  9739 ;; This function is called by:
  9740 ;;		_sortBattery
  9741 ;;		_angleToPulse
  9742 ;;		_fround
  9743 ;;		_scale
  9744 ;;		_printf
  9745 ;; This function uses a non-reentrant model
  9746 ;;
  9747                           
  9748                           	psect	text29
  9749  00215E                     __ptext29:
  9750                           	opt stack 0
  9751  00215E                     ___ftmul:
  9752                           	opt stack 23
  9753                           
  9754                           ;incstack = 0
  9755  00215E  C08B  F08F         	movff	___ftmul@f1+2,??___ftmul
  9756  002162  0100               	movlb	0	; () banked
  9757  002164  6B90               	clrf	(??___ftmul+1)& (0+255),b
  9758  002166  6B91               	clrf	(??___ftmul+2)& (0+255),b
  9759  002168  0100               	movlb	0	; () banked
  9760  00216A  358A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  9761  00216C  0100               	movlb	0	; () banked
  9762  00216E  378F               	rlcf	??___ftmul& (0+255),f,b
  9763  002170  E301               	bnc	u6031
  9764  002172  8190               	bsf	(??___ftmul+1)& (0+255),0,b
  9765  002174                     u6031:
  9766  002174  0100               	movlb	0	; () banked
  9767  002176  518F               	movf	??___ftmul& (0+255),w,b
  9768  002178  0100               	movlb	0	; () banked
  9769  00217A  6F92               	movwf	___ftmul@exp& (0+255),b
  9770  00217C  0100               	movlb	0	; () banked
  9771  00217E  5192               	movf	___ftmul@exp& (0+255),w,b
  9772  002180  A4D8               	btfss	status,2,c
  9773  002182  D00A               	goto	l6032
  9774                           
  9775                           ; BSR set to: 0
  9776  002184  0E00               	movlw	0
  9777  002186  0100               	movlb	0	; () banked
  9778  002188  6F89               	movwf	?___ftmul& (0+255),b
  9779  00218A  0E00               	movlw	0
  9780  00218C  0100               	movlb	0	; () banked
  9781  00218E  6F8A               	movwf	(?___ftmul+1)& (0+255),b
  9782  002190  0E00               	movlw	0
  9783  002192  0100               	movlb	0	; () banked
  9784  002194  6F8B               	movwf	(?___ftmul+2)& (0+255),b
  9785                           
  9786                           ; BSR set to: 0
  9787  002196  0012               	return	
  9788  002198                     l6032:
  9789                           
  9790                           ; BSR set to: 0
  9791  002198  C08E  F08F         	movff	___ftmul@f2+2,??___ftmul
  9792  00219C  0100               	movlb	0	; () banked
  9793  00219E  6B90               	clrf	(??___ftmul+1)& (0+255),b
  9794  0021A0  6B91               	clrf	(??___ftmul+2)& (0+255),b
  9795  0021A2  0100               	movlb	0	; () banked
  9796  0021A4  358D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  9797  0021A6  0100               	movlb	0	; () banked
  9798  0021A8  378F               	rlcf	??___ftmul& (0+255),f,b
  9799  0021AA  E301               	bnc	u6051
  9800  0021AC  8190               	bsf	(??___ftmul+1)& (0+255),0,b
  9801  0021AE                     u6051:
  9802  0021AE  0100               	movlb	0	; () banked
  9803  0021B0  518F               	movf	??___ftmul& (0+255),w,b
  9804  0021B2  0100               	movlb	0	; () banked
  9805  0021B4  6F97               	movwf	___ftmul@sign& (0+255),b
  9806  0021B6  0100               	movlb	0	; () banked
  9807  0021B8  5197               	movf	___ftmul@sign& (0+255),w,b
  9808  0021BA  A4D8               	btfss	status,2,c
  9809  0021BC  D00A               	goto	l6038
  9810                           
  9811                           ; BSR set to: 0
  9812  0021BE  0E00               	movlw	0
  9813  0021C0  0100               	movlb	0	; () banked
  9814  0021C2  6F89               	movwf	?___ftmul& (0+255),b
  9815  0021C4  0E00               	movlw	0
  9816  0021C6  0100               	movlb	0	; () banked
  9817  0021C8  6F8A               	movwf	(?___ftmul+1)& (0+255),b
  9818  0021CA  0E00               	movlw	0
  9819  0021CC  0100               	movlb	0	; () banked
  9820  0021CE  6F8B               	movwf	(?___ftmul+2)& (0+255),b
  9821                           
  9822                           ; BSR set to: 0
  9823  0021D0  0012               	return	
  9824  0021D2                     l6038:
  9825                           
  9826                           ; BSR set to: 0
  9827  0021D2  0100               	movlb	0	; () banked
  9828  0021D4  5197               	movf	___ftmul@sign& (0+255),w,b
  9829  0021D6  0F7B               	addlw	123
  9830  0021D8  0100               	movlb	0	; () banked
  9831  0021DA  2792               	addwf	___ftmul@exp& (0+255),f,b
  9832                           
  9833                           ; BSR set to: 0
  9834  0021DC  C08B  F097         	movff	___ftmul@f1+2,___ftmul@sign
  9835  0021E0  0100               	movlb	0	; () banked
  9836  0021E2  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
  9837  0021E4  0100               	movlb	0	; () banked
  9838  0021E6  1B97               	xorwf	___ftmul@sign& (0+255),f,b
  9839  0021E8  0E80               	movlw	128
  9840  0021EA  0100               	movlb	0	; () banked
  9841  0021EC  1797               	andwf	___ftmul@sign& (0+255),f,b
  9842                           
  9843                           ; BSR set to: 0
  9844  0021EE  0100               	movlb	0	; () banked
  9845  0021F0  8F8A               	bsf	(___ftmul@f1+1)& (0+255),7,b
  9846                           
  9847                           ; BSR set to: 0
  9848  0021F2  0100               	movlb	0	; () banked
  9849  0021F4  8F8D               	bsf	(___ftmul@f2+1)& (0+255),7,b
  9850                           
  9851                           ; BSR set to: 0
  9852  0021F6  0EFF               	movlw	255
  9853  0021F8  0100               	movlb	0	; () banked
  9854  0021FA  178C               	andwf	___ftmul@f2& (0+255),f,b
  9855  0021FC  0EFF               	movlw	255
  9856  0021FE  0100               	movlb	0	; () banked
  9857  002200  178D               	andwf	(___ftmul@f2+1)& (0+255),f,b
  9858  002202  0E00               	movlw	0
  9859  002204  0100               	movlb	0	; () banked
  9860  002206  178E               	andwf	(___ftmul@f2+2)& (0+255),f,b
  9861                           
  9862                           ; BSR set to: 0
  9863  002208  0E00               	movlw	0
  9864  00220A  0100               	movlb	0	; () banked
  9865  00220C  6F93               	movwf	___ftmul@f3_as_product& (0+255),b
  9866  00220E  0E00               	movlw	0
  9867  002210  0100               	movlb	0	; () banked
  9868  002212  6F94               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  9869  002214  0E00               	movlw	0
  9870  002216  0100               	movlb	0	; () banked
  9871  002218  6F95               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  9872                           
  9873                           ; BSR set to: 0
  9874  00221A  0E07               	movlw	7
  9875  00221C  0100               	movlb	0	; () banked
  9876  00221E  6F96               	movwf	___ftmul@cntr& (0+255),b
  9877  002220                     l6052:
  9878                           
  9879                           ; BSR set to: 0
  9880  002220  0100               	movlb	0	; () banked
  9881  002222  A189               	btfss	___ftmul@f1& (0+255),0,b
  9882  002224  D00C               	goto	l6056
  9883                           
  9884                           ; BSR set to: 0
  9885  002226  0100               	movlb	0	; () banked
  9886  002228  518C               	movf	___ftmul@f2& (0+255),w,b
  9887  00222A  0100               	movlb	0	; () banked
  9888  00222C  2793               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9889  00222E  0100               	movlb	0	; () banked
  9890  002230  518D               	movf	(___ftmul@f2+1)& (0+255),w,b
  9891  002232  0100               	movlb	0	; () banked
  9892  002234  2394               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9893  002236  0100               	movlb	0	; () banked
  9894  002238  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
  9895  00223A  0100               	movlb	0	; () banked
  9896  00223C  2395               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9897  00223E                     l6056:
  9898                           
  9899                           ; BSR set to: 0
  9900  00223E  0100               	movlb	0	; () banked
  9901  002240  90D8               	bcf	status,0,c
  9902  002242  338B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  9903  002244  338A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  9904  002246  3389               	rrcf	___ftmul@f1& (0+255),f,b
  9905  002248  0100               	movlb	0	; () banked
  9906  00224A  90D8               	bcf	status,0,c
  9907  00224C  378C               	rlcf	___ftmul@f2& (0+255),f,b
  9908  00224E  378D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  9909  002250  378E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  9910                           
  9911                           ; BSR set to: 0
  9912  002252  0100               	movlb	0	; () banked
  9913  002254  2F96               	decfsz	___ftmul@cntr& (0+255),f,b
  9914  002256  D7E4               	goto	l6052
  9915                           
  9916                           ; BSR set to: 0
  9917                           
  9918                           ; BSR set to: 0
  9919  002258  0E09               	movlw	9
  9920  00225A  0100               	movlb	0	; () banked
  9921  00225C  6F96               	movwf	___ftmul@cntr& (0+255),b
  9922  00225E                     l6062:
  9923                           
  9924                           ; BSR set to: 0
  9925  00225E  0100               	movlb	0	; () banked
  9926  002260  A189               	btfss	___ftmul@f1& (0+255),0,b
  9927  002262  D00C               	goto	l6066
  9928                           
  9929                           ; BSR set to: 0
  9930  002264  0100               	movlb	0	; () banked
  9931  002266  518C               	movf	___ftmul@f2& (0+255),w,b
  9932  002268  0100               	movlb	0	; () banked
  9933  00226A  2793               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9934  00226C  0100               	movlb	0	; () banked
  9935  00226E  518D               	movf	(___ftmul@f2+1)& (0+255),w,b
  9936  002270  0100               	movlb	0	; () banked
  9937  002272  2394               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9938  002274  0100               	movlb	0	; () banked
  9939  002276  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
  9940  002278  0100               	movlb	0	; () banked
  9941  00227A  2395               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9942  00227C                     l6066:
  9943                           
  9944                           ; BSR set to: 0
  9945  00227C  0100               	movlb	0	; () banked
  9946  00227E  90D8               	bcf	status,0,c
  9947  002280  338B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  9948  002282  338A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  9949  002284  3389               	rrcf	___ftmul@f1& (0+255),f,b
  9950  002286  0100               	movlb	0	; () banked
  9951  002288  90D8               	bcf	status,0,c
  9952  00228A  3395               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  9953  00228C  3394               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  9954  00228E  3393               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  9955                           
  9956                           ; BSR set to: 0
  9957  002290  0100               	movlb	0	; () banked
  9958  002292  2F96               	decfsz	___ftmul@cntr& (0+255),f,b
  9959  002294  D7E4               	goto	l6062
  9960                           
  9961                           ; BSR set to: 0
  9962                           
  9963                           ; BSR set to: 0
  9964  002296  C093  F023         	movff	___ftmul@f3_as_product,___ftpack@arg
  9965  00229A  C094  F024         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9966  00229E  C095  F025         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9967  0022A2  C092  F026         	movff	___ftmul@exp,___ftpack@exp
  9968  0022A6  C097  F027         	movff	___ftmul@sign,___ftpack@sign
  9969  0022AA  ECED  F018         	call	___ftpack	;wreg free
  9970  0022AE  C023  F089         	movff	?___ftpack,?___ftmul
  9971  0022B2  C024  F08A         	movff	?___ftpack+1,?___ftmul+1
  9972  0022B6  C025  F08B         	movff	?___ftpack+2,?___ftmul+2
  9973  0022BA  0012               	return	
  9974  0022BC                     __end_of___ftmul:
  9975                           	opt stack 0
  9976                           tblptru	equ	0xFF8
  9977                           tblptrh	equ	0xFF7
  9978                           tblptrl	equ	0xFF6
  9979                           tablat	equ	0xFF5
  9980                           prodh	equ	0xFF4
  9981                           prodl	equ	0xFF3
  9982                           intcon	equ	0xFF2
  9983                           postinc0	equ	0xFEE
  9984                           wreg	equ	0xFE8
  9985                           postdec1	equ	0xFE5
  9986                           fsr1l	equ	0xFE1
  9987                           indf2	equ	0xFDF
  9988                           postinc2	equ	0xFDE
  9989                           postdec2	equ	0xFDD
  9990                           fsr2h	equ	0xFDA
  9991                           fsr2l	equ	0xFD9
  9992                           status	equ	0xFD8
  9993                           
  9994 ;; *************** function ___awmod *****************
  9995 ;; Defined at:
  9996 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9997 ;; Parameters:    Size  Location     Type
  9998 ;;  dividend        2   34[COMRAM] int 
  9999 ;;  divisor         2   36[COMRAM] int 
 10000 ;; Auto vars:     Size  Location     Type
 10001 ;;  sign            1   39[COMRAM] unsigned char 
 10002 ;;  counter         1   38[COMRAM] unsigned char 
 10003 ;; Return value:  Size  Location     Type
 10004 ;;                  2   34[COMRAM] int 
 10005 ;; Registers used:
 10006 ;;		wreg, status,2, status,0
 10007 ;; Tracked objects:
 10008 ;;		On entry : 0/0
 10009 ;;		On exit  : 0/0
 10010 ;;		Unchanged: 0/0
 10011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10012 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10013 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10015 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10016 ;;Total ram usage:        6 bytes
 10017 ;; Hardware stack levels used:    1
 10018 ;; Hardware stack levels required when called:    3
 10019 ;; This function calls:
 10020 ;;		Nothing
 10021 ;; This function is called by:
 10022 ;;		_fround
 10023 ;;		_scale
 10024 ;; This function uses a non-reentrant model
 10025 ;;
 10026                           
 10027                           	psect	text30
 10028  00365C                     __ptext30:
 10029                           	opt stack 0
 10030  00365C                     ___awmod:
 10031                           	opt stack 24
 10032                           
 10033                           ;incstack = 0
 10034  00365C  0E00               	movlw	0
 10035  00365E  6E28               	movwf	___awmod@sign,c
 10036  003660  AE24               	btfss	___awmod@dividend+1,7,c
 10037  003662  D006               	goto	l6126
 10038  003664  6C23               	negf	___awmod@dividend,c
 10039  003666  1E24               	comf	___awmod@dividend+1,f,c
 10040  003668  B0D8               	btfsc	status,0,c
 10041  00366A  2A24               	incf	___awmod@dividend+1,f,c
 10042  00366C  0E01               	movlw	1
 10043  00366E  6E28               	movwf	___awmod@sign,c
 10044  003670                     l6126:
 10045  003670  AE26               	btfss	___awmod@divisor+1,7,c
 10046  003672  D004               	goto	l6130
 10047  003674  6C25               	negf	___awmod@divisor,c
 10048  003676  1E26               	comf	___awmod@divisor+1,f,c
 10049  003678  B0D8               	btfsc	status,0,c
 10050  00367A  2A26               	incf	___awmod@divisor+1,f,c
 10051  00367C                     l6130:
 10052  00367C  5025               	movf	___awmod@divisor,w,c
 10053  00367E  1026               	iorwf	___awmod@divisor+1,w,c
 10054  003680  B4D8               	btfsc	status,2,c
 10055  003682  D018               	goto	l6146
 10056  003684  0E01               	movlw	1
 10057  003686  6E27               	movwf	___awmod@counter,c
 10058  003688  D004               	goto	l6136
 10059  00368A                     l6134:
 10060  00368A  90D8               	bcf	status,0,c
 10061  00368C  3625               	rlcf	___awmod@divisor,f,c
 10062  00368E  3626               	rlcf	___awmod@divisor+1,f,c
 10063  003690  2A27               	incf	___awmod@counter,f,c
 10064  003692                     l6136:
 10065  003692  AE26               	btfss	___awmod@divisor+1,7,c
 10066  003694  D7FA               	goto	l6134
 10067  003696                     l6138:
 10068  003696  5025               	movf	___awmod@divisor,w,c
 10069  003698  5C23               	subwf	___awmod@dividend,w,c
 10070  00369A  5026               	movf	___awmod@divisor+1,w,c
 10071  00369C  5824               	subwfb	___awmod@dividend+1,w,c
 10072  00369E  A0D8               	btfss	status,0,c
 10073  0036A0  D004               	goto	l6142
 10074  0036A2  5025               	movf	___awmod@divisor,w,c
 10075  0036A4  5E23               	subwf	___awmod@dividend,f,c
 10076  0036A6  5026               	movf	___awmod@divisor+1,w,c
 10077  0036A8  5A24               	subwfb	___awmod@dividend+1,f,c
 10078  0036AA                     l6142:
 10079  0036AA  90D8               	bcf	status,0,c
 10080  0036AC  3226               	rrcf	___awmod@divisor+1,f,c
 10081  0036AE  3225               	rrcf	___awmod@divisor,f,c
 10082  0036B0  2E27               	decfsz	___awmod@counter,f,c
 10083  0036B2  D7F1               	goto	l6138
 10084  0036B4                     l6146:
 10085  0036B4  5028               	movf	___awmod@sign,w,c
 10086  0036B6  B4D8               	btfsc	status,2,c
 10087  0036B8  D004               	goto	l6150
 10088  0036BA  6C23               	negf	___awmod@dividend,c
 10089  0036BC  1E24               	comf	___awmod@dividend+1,f,c
 10090  0036BE  B0D8               	btfsc	status,0,c
 10091  0036C0  2A24               	incf	___awmod@dividend+1,f,c
 10092  0036C2                     l6150:
 10093  0036C2  C023  F023         	movff	___awmod@dividend,?___awmod
 10094  0036C6  C024  F024         	movff	___awmod@dividend+1,?___awmod+1
 10095  0036CA  0012               	return	
 10096  0036CC                     __end_of___awmod:
 10097                           	opt stack 0
 10098                           tblptru	equ	0xFF8
 10099                           tblptrh	equ	0xFF7
 10100                           tblptrl	equ	0xFF6
 10101                           tablat	equ	0xFF5
 10102                           prodh	equ	0xFF4
 10103                           prodl	equ	0xFF3
 10104                           intcon	equ	0xFF2
 10105                           postinc0	equ	0xFEE
 10106                           wreg	equ	0xFE8
 10107                           postdec1	equ	0xFE5
 10108                           fsr1l	equ	0xFE1
 10109                           indf2	equ	0xFDF
 10110                           postinc2	equ	0xFDE
 10111                           postdec2	equ	0xFDD
 10112                           fsr2h	equ	0xFDA
 10113                           fsr2l	equ	0xFD9
 10114                           status	equ	0xFD8
 10115                           
 10116 ;; *************** function ___awdiv *****************
 10117 ;; Defined at:
 10118 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10119 ;; Parameters:    Size  Location     Type
 10120 ;;  dividend        2   40[COMRAM] int 
 10121 ;;  divisor         2   42[COMRAM] int 
 10122 ;; Auto vars:     Size  Location     Type
 10123 ;;  quotient        2   46[COMRAM] int 
 10124 ;;  sign            1   45[COMRAM] unsigned char 
 10125 ;;  counter         1   44[COMRAM] unsigned char 
 10126 ;; Return value:  Size  Location     Type
 10127 ;;                  2   40[COMRAM] int 
 10128 ;; Registers used:
 10129 ;;		wreg, status,2, status,0
 10130 ;; Tracked objects:
 10131 ;;		On entry : 0/0
 10132 ;;		On exit  : 0/0
 10133 ;;		Unchanged: 0/0
 10134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10135 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10136 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10138 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10139 ;;Total ram usage:        8 bytes
 10140 ;; Hardware stack levels used:    1
 10141 ;; Hardware stack levels required when called:    3
 10142 ;; This function calls:
 10143 ;;		Nothing
 10144 ;; This function is called by:
 10145 ;;		_fround
 10146 ;;		_scale
 10147 ;;		_printf
 10148 ;; This function uses a non-reentrant model
 10149 ;;
 10150                           
 10151                           	psect	text31
 10152  0034DE                     __ptext31:
 10153                           	opt stack 0
 10154  0034DE                     ___awdiv:
 10155                           	opt stack 24
 10156                           
 10157                           ;incstack = 0
 10158  0034DE  0E00               	movlw	0
 10159  0034E0  6E2E               	movwf	___awdiv@sign,c
 10160  0034E2  AE2C               	btfss	___awdiv@divisor+1,7,c
 10161  0034E4  D006               	goto	l6082
 10162  0034E6  6C2B               	negf	___awdiv@divisor,c
 10163  0034E8  1E2C               	comf	___awdiv@divisor+1,f,c
 10164  0034EA  B0D8               	btfsc	status,0,c
 10165  0034EC  2A2C               	incf	___awdiv@divisor+1,f,c
 10166  0034EE  0E01               	movlw	1
 10167  0034F0  6E2E               	movwf	___awdiv@sign,c
 10168  0034F2                     l6082:
 10169  0034F2  AE2A               	btfss	___awdiv@dividend+1,7,c
 10170  0034F4  D006               	goto	l6088
 10171  0034F6  6C29               	negf	___awdiv@dividend,c
 10172  0034F8  1E2A               	comf	___awdiv@dividend+1,f,c
 10173  0034FA  B0D8               	btfsc	status,0,c
 10174  0034FC  2A2A               	incf	___awdiv@dividend+1,f,c
 10175  0034FE  0E01               	movlw	1
 10176  003500  1A2E               	xorwf	___awdiv@sign,f,c
 10177  003502                     l6088:
 10178  003502  0E00               	movlw	0
 10179  003504  6E30               	movwf	___awdiv@quotient+1,c
 10180  003506  0E00               	movlw	0
 10181  003508  6E2F               	movwf	___awdiv@quotient,c
 10182  00350A  502B               	movf	___awdiv@divisor,w,c
 10183  00350C  102C               	iorwf	___awdiv@divisor+1,w,c
 10184  00350E  B4D8               	btfsc	status,2,c
 10185  003510  D01C               	goto	l6110
 10186  003512  0E01               	movlw	1
 10187  003514  6E2D               	movwf	___awdiv@counter,c
 10188  003516  D004               	goto	l6096
 10189  003518                     l6094:
 10190  003518  90D8               	bcf	status,0,c
 10191  00351A  362B               	rlcf	___awdiv@divisor,f,c
 10192  00351C  362C               	rlcf	___awdiv@divisor+1,f,c
 10193  00351E  2A2D               	incf	___awdiv@counter,f,c
 10194  003520                     l6096:
 10195  003520  AE2C               	btfss	___awdiv@divisor+1,7,c
 10196  003522  D7FA               	goto	l6094
 10197  003524                     l6098:
 10198  003524  90D8               	bcf	status,0,c
 10199  003526  362F               	rlcf	___awdiv@quotient,f,c
 10200  003528  3630               	rlcf	___awdiv@quotient+1,f,c
 10201  00352A  502B               	movf	___awdiv@divisor,w,c
 10202  00352C  5C29               	subwf	___awdiv@dividend,w,c
 10203  00352E  502C               	movf	___awdiv@divisor+1,w,c
 10204  003530  582A               	subwfb	___awdiv@dividend+1,w,c
 10205  003532  A0D8               	btfss	status,0,c
 10206  003534  D005               	goto	l6106
 10207  003536  502B               	movf	___awdiv@divisor,w,c
 10208  003538  5E29               	subwf	___awdiv@dividend,f,c
 10209  00353A  502C               	movf	___awdiv@divisor+1,w,c
 10210  00353C  5A2A               	subwfb	___awdiv@dividend+1,f,c
 10211  00353E  802F               	bsf	___awdiv@quotient,0,c
 10212  003540                     l6106:
 10213  003540  90D8               	bcf	status,0,c
 10214  003542  322C               	rrcf	___awdiv@divisor+1,f,c
 10215  003544  322B               	rrcf	___awdiv@divisor,f,c
 10216  003546  2E2D               	decfsz	___awdiv@counter,f,c
 10217  003548  D7ED               	goto	l6098
 10218  00354A                     l6110:
 10219  00354A  502E               	movf	___awdiv@sign,w,c
 10220  00354C  B4D8               	btfsc	status,2,c
 10221  00354E  D004               	goto	l6114
 10222  003550  6C2F               	negf	___awdiv@quotient,c
 10223  003552  1E30               	comf	___awdiv@quotient+1,f,c
 10224  003554  B0D8               	btfsc	status,0,c
 10225  003556  2A30               	incf	___awdiv@quotient+1,f,c
 10226  003558                     l6114:
 10227  003558  C02F  F029         	movff	___awdiv@quotient,?___awdiv
 10228  00355C  C030  F02A         	movff	___awdiv@quotient+1,?___awdiv+1
 10229  003560  0012               	return	
 10230  003562                     __end_of___awdiv:
 10231                           	opt stack 0
 10232                           tblptru	equ	0xFF8
 10233                           tblptrh	equ	0xFF7
 10234                           tblptrl	equ	0xFF6
 10235                           tablat	equ	0xFF5
 10236                           prodh	equ	0xFF4
 10237                           prodl	equ	0xFF3
 10238                           intcon	equ	0xFF2
 10239                           postinc0	equ	0xFEE
 10240                           wreg	equ	0xFE8
 10241                           postdec1	equ	0xFE5
 10242                           fsr1l	equ	0xFE1
 10243                           indf2	equ	0xFDF
 10244                           postinc2	equ	0xFDE
 10245                           postdec2	equ	0xFDD
 10246                           fsr2h	equ	0xFDA
 10247                           fsr2l	equ	0xFD9
 10248                           status	equ	0xFD8
 10249                           
 10250 ;; *************** function __tdiv_to_l_ *****************
 10251 ;; Defined at:
 10252 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
 10253 ;; Parameters:    Size  Location     Type
 10254 ;;  f1              3   34[COMRAM] float 
 10255 ;;  f2              3   37[COMRAM] float 
 10256 ;; Auto vars:     Size  Location     Type
 10257 ;;  quot            4   43[COMRAM] unsigned long 
 10258 ;;  exp1            1   48[COMRAM] unsigned char 
 10259 ;;  cntr            1   47[COMRAM] unsigned char 
 10260 ;; Return value:  Size  Location     Type
 10261 ;;                  4   34[COMRAM] unsigned long 
 10262 ;; Registers used:
 10263 ;;		wreg, status,2, status,0
 10264 ;; Tracked objects:
 10265 ;;		On entry : 0/0
 10266 ;;		On exit  : 0/0
 10267 ;;		Unchanged: 0/0
 10268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10269 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10270 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10271 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10272 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10273 ;;Total ram usage:       15 bytes
 10274 ;; Hardware stack levels used:    1
 10275 ;; Hardware stack levels required when called:    3
 10276 ;; This function calls:
 10277 ;;		Nothing
 10278 ;; This function is called by:
 10279 ;;		_printf
 10280 ;; This function uses a non-reentrant model
 10281 ;;
 10282                           
 10283                           	psect	text32
 10284  002558                     __ptext32:
 10285                           	opt stack 0
 10286  002558                     __tdiv_to_l_:
 10287                           	opt stack 25
 10288                           
 10289                           ;incstack = 0
 10290  002558  C025  F029         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 10291  00255C  6A2A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 10292  00255E  6A2B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 10293  002560  3424               	rlcf	__tdiv_to_l_@f1+1,w,c
 10294  002562  3629               	rlcf	??__tdiv_to_l_& (0+255),f,c
 10295  002564  E301               	bnc	u6311
 10296  002566  802A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 10297  002568                     u6311:
 10298  002568  5029               	movf	??__tdiv_to_l_,w,c
 10299  00256A  6E31               	movwf	__tdiv_to_l_@exp1,c
 10300  00256C  5031               	movf	__tdiv_to_l_@exp1,w,c
 10301  00256E  A4D8               	btfss	status,2,c
 10302  002570  D009               	goto	l6240
 10303  002572  0E00               	movlw	0
 10304  002574  6E23               	movwf	?__tdiv_to_l_,c
 10305  002576  0E00               	movlw	0
 10306  002578  6E24               	movwf	?__tdiv_to_l_+1,c
 10307  00257A  0E00               	movlw	0
 10308  00257C  6E25               	movwf	?__tdiv_to_l_+2,c
 10309  00257E  0E00               	movlw	0
 10310  002580  6E26               	movwf	?__tdiv_to_l_+3,c
 10311  002582  0012               	return	
 10312  002584                     l6240:
 10313  002584  C028  F029         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 10314  002588  6A2A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 10315  00258A  6A2B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 10316  00258C  3427               	rlcf	__tdiv_to_l_@f2+1,w,c
 10317  00258E  3629               	rlcf	??__tdiv_to_l_& (0+255),f,c
 10318  002590  E301               	bnc	u6331
 10319  002592  802A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 10320  002594                     u6331:
 10321  002594  5029               	movf	??__tdiv_to_l_,w,c
 10322  002596  6E30               	movwf	__tdiv_to_l_@cntr,c
 10323  002598  5030               	movf	__tdiv_to_l_@cntr,w,c
 10324  00259A  A4D8               	btfss	status,2,c
 10325  00259C  D009               	goto	l6246
 10326  00259E  0E00               	movlw	0
 10327  0025A0  6E23               	movwf	?__tdiv_to_l_,c
 10328  0025A2  0E00               	movlw	0
 10329  0025A4  6E24               	movwf	?__tdiv_to_l_+1,c
 10330  0025A6  0E00               	movlw	0
 10331  0025A8  6E25               	movwf	?__tdiv_to_l_+2,c
 10332  0025AA  0E00               	movlw	0
 10333  0025AC  6E26               	movwf	?__tdiv_to_l_+3,c
 10334  0025AE  0012               	return	
 10335  0025B0                     l6246:
 10336  0025B0  8E24               	bsf	__tdiv_to_l_@f1+1,7,c
 10337  0025B2  0EFF               	movlw	255
 10338  0025B4  1623               	andwf	__tdiv_to_l_@f1,f,c
 10339  0025B6  0EFF               	movlw	255
 10340  0025B8  1624               	andwf	__tdiv_to_l_@f1+1,f,c
 10341  0025BA  0E00               	movlw	0
 10342  0025BC  1625               	andwf	__tdiv_to_l_@f1+2,f,c
 10343  0025BE  8E27               	bsf	__tdiv_to_l_@f2+1,7,c
 10344  0025C0  0EFF               	movlw	255
 10345  0025C2  1626               	andwf	__tdiv_to_l_@f2,f,c
 10346  0025C4  0EFF               	movlw	255
 10347  0025C6  1627               	andwf	__tdiv_to_l_@f2+1,f,c
 10348  0025C8  0E00               	movlw	0
 10349  0025CA  1628               	andwf	__tdiv_to_l_@f2+2,f,c
 10350  0025CC  0E00               	movlw	0
 10351  0025CE  6E2C               	movwf	__tdiv_to_l_@quot,c
 10352  0025D0  0E00               	movlw	0
 10353  0025D2  6E2D               	movwf	__tdiv_to_l_@quot+1,c
 10354  0025D4  0E00               	movlw	0
 10355  0025D6  6E2E               	movwf	__tdiv_to_l_@quot+2,c
 10356  0025D8  0E00               	movlw	0
 10357  0025DA  6E2F               	movwf	__tdiv_to_l_@quot+3,c
 10358  0025DC  0E7F               	movlw	127
 10359  0025DE  5E31               	subwf	__tdiv_to_l_@exp1,f,c
 10360  0025E0  5030               	movf	__tdiv_to_l_@cntr,w,c
 10361  0025E2  0F98               	addlw	152
 10362  0025E4  5E31               	subwf	__tdiv_to_l_@exp1,f,c
 10363  0025E6  0E18               	movlw	24
 10364  0025E8  6E30               	movwf	__tdiv_to_l_@cntr,c
 10365  0025EA                     l1176:
 10366  0025EA  90D8               	bcf	status,0,c
 10367  0025EC  362C               	rlcf	__tdiv_to_l_@quot,f,c
 10368  0025EE  362D               	rlcf	__tdiv_to_l_@quot+1,f,c
 10369  0025F0  362E               	rlcf	__tdiv_to_l_@quot+2,f,c
 10370  0025F2  362F               	rlcf	__tdiv_to_l_@quot+3,f,c
 10371  0025F4  5026               	movf	__tdiv_to_l_@f2,w,c
 10372  0025F6  5C23               	subwf	__tdiv_to_l_@f1,w,c
 10373  0025F8  5027               	movf	__tdiv_to_l_@f2+1,w,c
 10374  0025FA  5824               	subwfb	__tdiv_to_l_@f1+1,w,c
 10375  0025FC  5028               	movf	__tdiv_to_l_@f2+2,w,c
 10376  0025FE  5825               	subwfb	__tdiv_to_l_@f1+2,w,c
 10377  002600  A0D8               	btfss	status,0,c
 10378  002602  D007               	goto	l1177
 10379  002604  5026               	movf	__tdiv_to_l_@f2,w,c
 10380  002606  5E23               	subwf	__tdiv_to_l_@f1,f,c
 10381  002608  5027               	movf	__tdiv_to_l_@f2+1,w,c
 10382  00260A  5A24               	subwfb	__tdiv_to_l_@f1+1,f,c
 10383  00260C  5028               	movf	__tdiv_to_l_@f2+2,w,c
 10384  00260E  5A25               	subwfb	__tdiv_to_l_@f1+2,f,c
 10385  002610  802C               	bsf	__tdiv_to_l_@quot,0,c
 10386  002612                     l1177:
 10387  002612  90D8               	bcf	status,0,c
 10388  002614  3623               	rlcf	__tdiv_to_l_@f1,f,c
 10389  002616  3624               	rlcf	__tdiv_to_l_@f1+1,f,c
 10390  002618  3625               	rlcf	__tdiv_to_l_@f1+2,f,c
 10391  00261A  2E30               	decfsz	__tdiv_to_l_@cntr,f,c
 10392  00261C  D7E6               	goto	l1176
 10393  00261E  AE31               	btfss	__tdiv_to_l_@exp1,7,c
 10394  002620  D016               	goto	l6280
 10395  002622  5031               	movf	__tdiv_to_l_@exp1,w,c
 10396  002624  0A80               	xorlw	128
 10397  002626  0F97               	addlw	151
 10398  002628  B0D8               	btfsc	status,0,c
 10399  00262A  D009               	goto	l6276
 10400  00262C  0E00               	movlw	0
 10401  00262E  6E23               	movwf	?__tdiv_to_l_,c
 10402  002630  0E00               	movlw	0
 10403  002632  6E24               	movwf	?__tdiv_to_l_+1,c
 10404  002634  0E00               	movlw	0
 10405  002636  6E25               	movwf	?__tdiv_to_l_+2,c
 10406  002638  0E00               	movlw	0
 10407  00263A  6E26               	movwf	?__tdiv_to_l_+3,c
 10408  00263C  0012               	return	
 10409  00263E                     l6276:
 10410  00263E  90D8               	bcf	status,0,c
 10411  002640  322F               	rrcf	__tdiv_to_l_@quot+3,f,c
 10412  002642  322E               	rrcf	__tdiv_to_l_@quot+2,f,c
 10413  002644  322D               	rrcf	__tdiv_to_l_@quot+1,f,c
 10414  002646  322C               	rrcf	__tdiv_to_l_@quot,f,c
 10415  002648  3E31               	incfsz	__tdiv_to_l_@exp1,f,c
 10416  00264A  D7F9               	goto	l6276
 10417  00264C  D015               	goto	l1183
 10418  00264E                     l6280:
 10419  00264E  0E17               	movlw	23
 10420  002650  6431               	cpfsgt	__tdiv_to_l_@exp1,c
 10421  002652  D00F               	goto	l6288
 10422  002654  0E00               	movlw	0
 10423  002656  6E23               	movwf	?__tdiv_to_l_,c
 10424  002658  0E00               	movlw	0
 10425  00265A  6E24               	movwf	?__tdiv_to_l_+1,c
 10426  00265C  0E00               	movlw	0
 10427  00265E  6E25               	movwf	?__tdiv_to_l_+2,c
 10428  002660  0E00               	movlw	0
 10429  002662  6E26               	movwf	?__tdiv_to_l_+3,c
 10430  002664  0012               	return	
 10431  002666                     l6286:
 10432  002666  90D8               	bcf	status,0,c
 10433  002668  362C               	rlcf	__tdiv_to_l_@quot,f,c
 10434  00266A  362D               	rlcf	__tdiv_to_l_@quot+1,f,c
 10435  00266C  362E               	rlcf	__tdiv_to_l_@quot+2,f,c
 10436  00266E  362F               	rlcf	__tdiv_to_l_@quot+3,f,c
 10437  002670  0631               	decf	__tdiv_to_l_@exp1,f,c
 10438  002672                     l6288:
 10439  002672  5031               	movf	__tdiv_to_l_@exp1,w,c
 10440  002674  A4D8               	btfss	status,2,c
 10441  002676  D7F7               	goto	l6286
 10442  002678                     l1183:
 10443  002678  C02C  F023         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 10444  00267C  C02D  F024         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 10445  002680  C02E  F025         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 10446  002684  C02F  F026         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 10447  002688  0012               	return		;funcret
 10448  00268A                     __end_of__tdiv_to_l_:
 10449                           	opt stack 0
 10450                           tblptru	equ	0xFF8
 10451                           tblptrh	equ	0xFF7
 10452                           tblptrl	equ	0xFF6
 10453                           tablat	equ	0xFF5
 10454                           prodh	equ	0xFF4
 10455                           prodl	equ	0xFF3
 10456                           intcon	equ	0xFF2
 10457                           postinc0	equ	0xFEE
 10458                           wreg	equ	0xFE8
 10459                           postdec1	equ	0xFE5
 10460                           fsr1l	equ	0xFE1
 10461                           indf2	equ	0xFDF
 10462                           postinc2	equ	0xFDE
 10463                           postdec2	equ	0xFDD
 10464                           fsr2h	equ	0xFDA
 10465                           fsr2l	equ	0xFD9
 10466                           status	equ	0xFD8
 10467                           
 10468 ;; *************** function __div_to_l_ *****************
 10469 ;; Defined at:
 10470 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
 10471 ;; Parameters:    Size  Location     Type
 10472 ;;  f1              3   34[COMRAM] unsigned long 
 10473 ;;  f2              3   37[COMRAM] unsigned long 
 10474 ;; Auto vars:     Size  Location     Type
 10475 ;;  quot            4   40[COMRAM] unsigned long 
 10476 ;;  exp1            1   45[COMRAM] unsigned char 
 10477 ;;  cntr            1   44[COMRAM] unsigned char 
 10478 ;; Return value:  Size  Location     Type
 10479 ;;                  4   34[COMRAM] unsigned long 
 10480 ;; Registers used:
 10481 ;;		wreg, status,2, status,0
 10482 ;; Tracked objects:
 10483 ;;		On entry : 0/0
 10484 ;;		On exit  : 0/0
 10485 ;;		Unchanged: 0/0
 10486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10487 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10488 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10490 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10491 ;;Total ram usage:       12 bytes
 10492 ;; Hardware stack levels used:    1
 10493 ;; Hardware stack levels required when called:    3
 10494 ;; This function calls:
 10495 ;;		Nothing
 10496 ;; This function is called by:
 10497 ;;		_printf
 10498 ;; This function uses a non-reentrant model
 10499 ;;
 10500                           
 10501                           	psect	text33
 10502  00268A                     __ptext33:
 10503                           	opt stack 0
 10504  00268A                     __div_to_l_:
 10505                           	opt stack 25
 10506                           
 10507                           ;incstack = 0
 10508  00268A  3425               	rlcf	__div_to_l_@f1+2,w,c
 10509  00268C  3426               	rlcf	__div_to_l_@f1+3,w,c
 10510  00268E  6E2E               	movwf	__div_to_l_@exp1,c
 10511  002690  502E               	movf	__div_to_l_@exp1,w,c
 10512  002692  A4D8               	btfss	status,2,c
 10513  002694  D009               	goto	l6296
 10514  002696  0E00               	movlw	0
 10515  002698  6E23               	movwf	?__div_to_l_,c
 10516  00269A  0E00               	movlw	0
 10517  00269C  6E24               	movwf	?__div_to_l_+1,c
 10518  00269E  0E00               	movlw	0
 10519  0026A0  6E25               	movwf	?__div_to_l_+2,c
 10520  0026A2  0E00               	movlw	0
 10521  0026A4  6E26               	movwf	?__div_to_l_+3,c
 10522  0026A6  0012               	return	
 10523  0026A8                     l6296:
 10524  0026A8  3428               	rlcf	__div_to_l_@f2+2,w,c
 10525  0026AA  3429               	rlcf	__div_to_l_@f2+3,w,c
 10526  0026AC  6E2D               	movwf	__div_to_l_@cntr,c
 10527  0026AE  502D               	movf	__div_to_l_@cntr,w,c
 10528  0026B0  A4D8               	btfss	status,2,c
 10529  0026B2  D009               	goto	l6302
 10530  0026B4  0E00               	movlw	0
 10531  0026B6  6E23               	movwf	?__div_to_l_,c
 10532  0026B8  0E00               	movlw	0
 10533  0026BA  6E24               	movwf	?__div_to_l_+1,c
 10534  0026BC  0E00               	movlw	0
 10535  0026BE  6E25               	movwf	?__div_to_l_+2,c
 10536  0026C0  0E00               	movlw	0
 10537  0026C2  6E26               	movwf	?__div_to_l_+3,c
 10538  0026C4  0012               	return	
 10539  0026C6                     l6302:
 10540  0026C6  8E25               	bsf	__div_to_l_@f1+2,7,c
 10541  0026C8  0EFF               	movlw	255
 10542  0026CA  1623               	andwf	__div_to_l_@f1,f,c
 10543  0026CC  0EFF               	movlw	255
 10544  0026CE  1624               	andwf	__div_to_l_@f1+1,f,c
 10545  0026D0  0EFF               	movlw	255
 10546  0026D2  1625               	andwf	__div_to_l_@f1+2,f,c
 10547  0026D4  0E00               	movlw	0
 10548  0026D6  1626               	andwf	__div_to_l_@f1+3,f,c
 10549  0026D8  8E28               	bsf	__div_to_l_@f2+2,7,c
 10550  0026DA  0EFF               	movlw	255
 10551  0026DC  1626               	andwf	__div_to_l_@f2,f,c
 10552  0026DE  0EFF               	movlw	255
 10553  0026E0  1627               	andwf	__div_to_l_@f2+1,f,c
 10554  0026E2  0EFF               	movlw	255
 10555  0026E4  1628               	andwf	__div_to_l_@f2+2,f,c
 10556  0026E6  0E00               	movlw	0
 10557  0026E8  1629               	andwf	__div_to_l_@f2+3,f,c
 10558  0026EA  0E00               	movlw	0
 10559  0026EC  6E29               	movwf	__div_to_l_@quot,c
 10560  0026EE  0E00               	movlw	0
 10561  0026F0  6E2A               	movwf	__div_to_l_@quot+1,c
 10562  0026F2  0E00               	movlw	0
 10563  0026F4  6E2B               	movwf	__div_to_l_@quot+2,c
 10564  0026F6  0E00               	movlw	0
 10565  0026F8  6E2C               	movwf	__div_to_l_@quot+3,c
 10566  0026FA  0E7F               	movlw	127
 10567  0026FC  5E2E               	subwf	__div_to_l_@exp1,f,c
 10568  0026FE  502D               	movf	__div_to_l_@cntr,w,c
 10569  002700  0FA0               	addlw	160
 10570  002702  5E2E               	subwf	__div_to_l_@exp1,f,c
 10571  002704  0E20               	movlw	32
 10572  002706  6E2D               	movwf	__div_to_l_@cntr,c
 10573  002708                     l6316:
 10574  002708  90D8               	bcf	status,0,c
 10575  00270A  3629               	rlcf	__div_to_l_@quot,f,c
 10576  00270C  362A               	rlcf	__div_to_l_@quot+1,f,c
 10577  00270E  362B               	rlcf	__div_to_l_@quot+2,f,c
 10578  002710  362C               	rlcf	__div_to_l_@quot+3,f,c
 10579  002712  5026               	movf	__div_to_l_@f2,w,c
 10580  002714  5C23               	subwf	__div_to_l_@f1,w,c
 10581  002716  5027               	movf	__div_to_l_@f2+1,w,c
 10582  002718  5824               	subwfb	__div_to_l_@f1+1,w,c
 10583  00271A  5028               	movf	__div_to_l_@f2+2,w,c
 10584  00271C  5825               	subwfb	__div_to_l_@f1+2,w,c
 10585  00271E  5029               	movf	__div_to_l_@f2+3,w,c
 10586  002720  5826               	subwfb	__div_to_l_@f1+3,w,c
 10587  002722  A0D8               	btfss	status,0,c
 10588  002724  D009               	goto	l6324
 10589  002726  5026               	movf	__div_to_l_@f2,w,c
 10590  002728  5E23               	subwf	__div_to_l_@f1,f,c
 10591  00272A  5027               	movf	__div_to_l_@f2+1,w,c
 10592  00272C  5A24               	subwfb	__div_to_l_@f1+1,f,c
 10593  00272E  5028               	movf	__div_to_l_@f2+2,w,c
 10594  002730  5A25               	subwfb	__div_to_l_@f1+2,f,c
 10595  002732  5029               	movf	__div_to_l_@f2+3,w,c
 10596  002734  5A26               	subwfb	__div_to_l_@f1+3,f,c
 10597  002736  8029               	bsf	__div_to_l_@quot,0,c
 10598  002738                     l6324:
 10599  002738  90D8               	bcf	status,0,c
 10600  00273A  3623               	rlcf	__div_to_l_@f1,f,c
 10601  00273C  3624               	rlcf	__div_to_l_@f1+1,f,c
 10602  00273E  3625               	rlcf	__div_to_l_@f1+2,f,c
 10603  002740  3626               	rlcf	__div_to_l_@f1+3,f,c
 10604  002742  2E2D               	decfsz	__div_to_l_@cntr,f,c
 10605  002744  D7E1               	goto	l6316
 10606  002746  AE2E               	btfss	__div_to_l_@exp1,7,c
 10607  002748  D016               	goto	l6340
 10608  00274A  502E               	movf	__div_to_l_@exp1,w,c
 10609  00274C  0A80               	xorlw	128
 10610  00274E  0F9F               	addlw	159
 10611  002750  B0D8               	btfsc	status,0,c
 10612  002752  D009               	goto	l6336
 10613  002754  0E00               	movlw	0
 10614  002756  6E23               	movwf	?__div_to_l_,c
 10615  002758  0E00               	movlw	0
 10616  00275A  6E24               	movwf	?__div_to_l_+1,c
 10617  00275C  0E00               	movlw	0
 10618  00275E  6E25               	movwf	?__div_to_l_+2,c
 10619  002760  0E00               	movlw	0
 10620  002762  6E26               	movwf	?__div_to_l_+3,c
 10621  002764  0012               	return	
 10622  002766                     l6336:
 10623  002766  90D8               	bcf	status,0,c
 10624  002768  322C               	rrcf	__div_to_l_@quot+3,f,c
 10625  00276A  322B               	rrcf	__div_to_l_@quot+2,f,c
 10626  00276C  322A               	rrcf	__div_to_l_@quot+1,f,c
 10627  00276E  3229               	rrcf	__div_to_l_@quot,f,c
 10628  002770  3E2E               	incfsz	__div_to_l_@exp1,f,c
 10629  002772  D7F9               	goto	l6336
 10630  002774  D015               	goto	l1079
 10631  002776                     l6340:
 10632  002776  0E1F               	movlw	31
 10633  002778  642E               	cpfsgt	__div_to_l_@exp1,c
 10634  00277A  D00F               	goto	l6348
 10635  00277C  0E00               	movlw	0
 10636  00277E  6E23               	movwf	?__div_to_l_,c
 10637  002780  0E00               	movlw	0
 10638  002782  6E24               	movwf	?__div_to_l_+1,c
 10639  002784  0E00               	movlw	0
 10640  002786  6E25               	movwf	?__div_to_l_+2,c
 10641  002788  0E00               	movlw	0
 10642  00278A  6E26               	movwf	?__div_to_l_+3,c
 10643  00278C  0012               	return	
 10644  00278E                     l6346:
 10645  00278E  90D8               	bcf	status,0,c
 10646  002790  3629               	rlcf	__div_to_l_@quot,f,c
 10647  002792  362A               	rlcf	__div_to_l_@quot+1,f,c
 10648  002794  362B               	rlcf	__div_to_l_@quot+2,f,c
 10649  002796  362C               	rlcf	__div_to_l_@quot+3,f,c
 10650  002798  062E               	decf	__div_to_l_@exp1,f,c
 10651  00279A                     l6348:
 10652  00279A  502E               	movf	__div_to_l_@exp1,w,c
 10653  00279C  A4D8               	btfss	status,2,c
 10654  00279E  D7F7               	goto	l6346
 10655  0027A0                     l1079:
 10656  0027A0  C029  F023         	movff	__div_to_l_@quot,?__div_to_l_
 10657  0027A4  C02A  F024         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 10658  0027A8  C02B  F025         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 10659  0027AC  C02C  F026         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 10660  0027B0  0012               	return		;funcret
 10661  0027B2                     __end_of__div_to_l_:
 10662                           	opt stack 0
 10663                           tblptru	equ	0xFF8
 10664                           tblptrh	equ	0xFF7
 10665                           tblptrl	equ	0xFF6
 10666                           tablat	equ	0xFF5
 10667                           prodh	equ	0xFF4
 10668                           prodl	equ	0xFF3
 10669                           intcon	equ	0xFF2
 10670                           postinc0	equ	0xFEE
 10671                           wreg	equ	0xFE8
 10672                           postdec1	equ	0xFE5
 10673                           fsr1l	equ	0xFE1
 10674                           indf2	equ	0xFDF
 10675                           postinc2	equ	0xFDE
 10676                           postdec2	equ	0xFDD
 10677                           fsr2h	equ	0xFDA
 10678                           fsr2l	equ	0xFD9
 10679                           status	equ	0xFD8
 10680                           
 10681 ;; *************** function ___lltoft *****************
 10682 ;; Defined at:
 10683 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 10684 ;; Parameters:    Size  Location     Type
 10685 ;;  c               4   42[COMRAM] unsigned long 
 10686 ;; Auto vars:     Size  Location     Type
 10687 ;;  exp             1   50[COMRAM] unsigned char 
 10688 ;; Return value:  Size  Location     Type
 10689 ;;                  3   42[COMRAM] float 
 10690 ;; Registers used:
 10691 ;;		wreg, status,2, status,0, cstack
 10692 ;; Tracked objects:
 10693 ;;		On entry : 0/0
 10694 ;;		On exit  : 0/0
 10695 ;;		Unchanged: 0/0
 10696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10697 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10698 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10699 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10700 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10701 ;;Total ram usage:        9 bytes
 10702 ;; Hardware stack levels used:    1
 10703 ;; Hardware stack levels required when called:    4
 10704 ;; This function calls:
 10705 ;;		___ftpack
 10706 ;; This function is called by:
 10707 ;;		_printf
 10708 ;; This function uses a non-reentrant model
 10709 ;;
 10710                           
 10711                           	psect	text34
 10712  003990                     __ptext34:
 10713                           	opt stack 0
 10714  003990                     ___lltoft:
 10715                           	opt stack 24
 10716                           
 10717                           ;incstack = 0
 10718  003990  0E8E               	movlw	142
 10719  003992  6E33               	movwf	___lltoft@exp,c
 10720  003994  D006               	goto	l6468
 10721  003996                     l6466:
 10722  003996  90D8               	bcf	status,0,c
 10723  003998  322E               	rrcf	___lltoft@c+3,f,c
 10724  00399A  322D               	rrcf	___lltoft@c+2,f,c
 10725  00399C  322C               	rrcf	___lltoft@c+1,f,c
 10726  00399E  322B               	rrcf	___lltoft@c,f,c
 10727  0039A0  2A33               	incf	___lltoft@exp,f,c
 10728  0039A2                     l6468:
 10729  0039A2  0E00               	movlw	0
 10730  0039A4  142B               	andwf	___lltoft@c,w,c
 10731  0039A6  6E2F               	movwf	??___lltoft& (0+255),c
 10732  0039A8  0E00               	movlw	0
 10733  0039AA  142C               	andwf	___lltoft@c+1,w,c
 10734  0039AC  6E30               	movwf	(??___lltoft+1)& (0+255),c
 10735  0039AE  0E00               	movlw	0
 10736  0039B0  142D               	andwf	___lltoft@c+2,w,c
 10737  0039B2  6E31               	movwf	(??___lltoft+2)& (0+255),c
 10738  0039B4  0EFF               	movlw	255
 10739  0039B6  142E               	andwf	___lltoft@c+3,w,c
 10740  0039B8  6E32               	movwf	(??___lltoft+3)& (0+255),c
 10741  0039BA  502F               	movf	??___lltoft,w,c
 10742  0039BC  1030               	iorwf	??___lltoft+1,w,c
 10743  0039BE  1031               	iorwf	??___lltoft+2,w,c
 10744  0039C0  1032               	iorwf	??___lltoft+3,w,c
 10745  0039C2  A4D8               	btfss	status,2,c
 10746  0039C4  D7E8               	goto	l6466
 10747  0039C6  C02B  F023         	movff	___lltoft@c,___ftpack@arg
 10748  0039CA  C02C  F024         	movff	___lltoft@c+1,___ftpack@arg+1
 10749  0039CE  C02D  F025         	movff	___lltoft@c+2,___ftpack@arg+2
 10750  0039D2  C033  F026         	movff	___lltoft@exp,___ftpack@exp
 10751  0039D6  0E00               	movlw	0
 10752  0039D8  6E27               	movwf	___ftpack@sign,c
 10753  0039DA  ECED  F018         	call	___ftpack	;wreg free
 10754  0039DE  C023  F02B         	movff	?___ftpack,?___lltoft
 10755  0039E2  C024  F02C         	movff	?___ftpack+1,?___lltoft+1
 10756  0039E6  C025  F02D         	movff	?___ftpack+2,?___lltoft+2
 10757  0039EA  0012               	return	
 10758  0039EC                     __end_of___lltoft:
 10759                           	opt stack 0
 10760                           tblptru	equ	0xFF8
 10761                           tblptrh	equ	0xFF7
 10762                           tblptrl	equ	0xFF6
 10763                           tablat	equ	0xFF5
 10764                           prodh	equ	0xFF4
 10765                           prodl	equ	0xFF3
 10766                           intcon	equ	0xFF2
 10767                           postinc0	equ	0xFEE
 10768                           wreg	equ	0xFE8
 10769                           postdec1	equ	0xFE5
 10770                           fsr1l	equ	0xFE1
 10771                           indf2	equ	0xFDF
 10772                           postinc2	equ	0xFDE
 10773                           postdec2	equ	0xFDD
 10774                           fsr2h	equ	0xFDA
 10775                           fsr2l	equ	0xFD9
 10776                           status	equ	0xFD8
 10777                           
 10778 ;; *************** function ___llmod *****************
 10779 ;; Defined at:
 10780 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
 10781 ;; Parameters:    Size  Location     Type
 10782 ;;  dividend        4   47[COMRAM] unsigned long 
 10783 ;;  divisor         4   51[COMRAM] unsigned long 
 10784 ;; Auto vars:     Size  Location     Type
 10785 ;;  counter         1   55[COMRAM] unsigned char 
 10786 ;; Return value:  Size  Location     Type
 10787 ;;                  4   47[COMRAM] unsigned long 
 10788 ;; Registers used:
 10789 ;;		wreg, status,2, status,0
 10790 ;; Tracked objects:
 10791 ;;		On entry : 0/0
 10792 ;;		On exit  : 0/0
 10793 ;;		Unchanged: 0/0
 10794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10795 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10796 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10798 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10799 ;;Total ram usage:        9 bytes
 10800 ;; Hardware stack levels used:    1
 10801 ;; Hardware stack levels required when called:    3
 10802 ;; This function calls:
 10803 ;;		Nothing
 10804 ;; This function is called by:
 10805 ;;		_printf
 10806 ;; This function uses a non-reentrant model
 10807 ;;
 10808                           
 10809                           	psect	text35
 10810  0037A2                     __ptext35:
 10811                           	opt stack 0
 10812  0037A2                     ___llmod:
 10813                           	opt stack 25
 10814                           
 10815                           ;incstack = 0
 10816  0037A2  5034               	movf	___llmod@divisor,w,c
 10817  0037A4  1035               	iorwf	___llmod@divisor+1,w,c
 10818  0037A6  1036               	iorwf	___llmod@divisor+2,w,c
 10819  0037A8  1037               	iorwf	___llmod@divisor+3,w,c
 10820  0037AA  B4D8               	btfsc	status,2,c
 10821  0037AC  D024               	goto	l1268
 10822  0037AE  0E01               	movlw	1
 10823  0037B0  6E38               	movwf	___llmod@counter,c
 10824  0037B2  D006               	goto	l6454
 10825  0037B4                     l6452:
 10826  0037B4  90D8               	bcf	status,0,c
 10827  0037B6  3634               	rlcf	___llmod@divisor,f,c
 10828  0037B8  3635               	rlcf	___llmod@divisor+1,f,c
 10829  0037BA  3636               	rlcf	___llmod@divisor+2,f,c
 10830  0037BC  3637               	rlcf	___llmod@divisor+3,f,c
 10831  0037BE  2A38               	incf	___llmod@counter,f,c
 10832  0037C0                     l6454:
 10833  0037C0  AE37               	btfss	___llmod@divisor+3,7,c
 10834  0037C2  D7F8               	goto	l6452
 10835  0037C4                     l6456:
 10836  0037C4  5034               	movf	___llmod@divisor,w,c
 10837  0037C6  5C30               	subwf	___llmod@dividend,w,c
 10838  0037C8  5035               	movf	___llmod@divisor+1,w,c
 10839  0037CA  5831               	subwfb	___llmod@dividend+1,w,c
 10840  0037CC  5036               	movf	___llmod@divisor+2,w,c
 10841  0037CE  5832               	subwfb	___llmod@dividend+2,w,c
 10842  0037D0  5037               	movf	___llmod@divisor+3,w,c
 10843  0037D2  5833               	subwfb	___llmod@dividend+3,w,c
 10844  0037D4  A0D8               	btfss	status,0,c
 10845  0037D6  D008               	goto	l6460
 10846  0037D8  5034               	movf	___llmod@divisor,w,c
 10847  0037DA  5E30               	subwf	___llmod@dividend,f,c
 10848  0037DC  5035               	movf	___llmod@divisor+1,w,c
 10849  0037DE  5A31               	subwfb	___llmod@dividend+1,f,c
 10850  0037E0  5036               	movf	___llmod@divisor+2,w,c
 10851  0037E2  5A32               	subwfb	___llmod@dividend+2,f,c
 10852  0037E4  5037               	movf	___llmod@divisor+3,w,c
 10853  0037E6  5A33               	subwfb	___llmod@dividend+3,f,c
 10854  0037E8                     l6460:
 10855  0037E8  90D8               	bcf	status,0,c
 10856  0037EA  3237               	rrcf	___llmod@divisor+3,f,c
 10857  0037EC  3236               	rrcf	___llmod@divisor+2,f,c
 10858  0037EE  3235               	rrcf	___llmod@divisor+1,f,c
 10859  0037F0  3234               	rrcf	___llmod@divisor,f,c
 10860  0037F2  2E38               	decfsz	___llmod@counter,f,c
 10861  0037F4  D7E7               	goto	l6456
 10862  0037F6                     l1268:
 10863  0037F6  C030  F030         	movff	___llmod@dividend,?___llmod
 10864  0037FA  C031  F031         	movff	___llmod@dividend+1,?___llmod+1
 10865  0037FE  C032  F032         	movff	___llmod@dividend+2,?___llmod+2
 10866  003802  C033  F033         	movff	___llmod@dividend+3,?___llmod+3
 10867  003806  0012               	return		;funcret
 10868  003808                     __end_of___llmod:
 10869                           	opt stack 0
 10870                           tblptru	equ	0xFF8
 10871                           tblptrh	equ	0xFF7
 10872                           tblptrl	equ	0xFF6
 10873                           tablat	equ	0xFF5
 10874                           prodh	equ	0xFF4
 10875                           prodl	equ	0xFF3
 10876                           intcon	equ	0xFF2
 10877                           postinc0	equ	0xFEE
 10878                           wreg	equ	0xFE8
 10879                           postdec1	equ	0xFE5
 10880                           fsr1l	equ	0xFE1
 10881                           indf2	equ	0xFDF
 10882                           postinc2	equ	0xFDE
 10883                           postdec2	equ	0xFDD
 10884                           fsr2h	equ	0xFDA
 10885                           fsr2l	equ	0xFD9
 10886                           status	equ	0xFD8
 10887                           
 10888 ;; *************** function ___lldiv *****************
 10889 ;; Defined at:
 10890 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 10891 ;; Parameters:    Size  Location     Type
 10892 ;;  dividend        4   34[COMRAM] unsigned long 
 10893 ;;  divisor         4   38[COMRAM] unsigned long 
 10894 ;; Auto vars:     Size  Location     Type
 10895 ;;  quotient        4   42[COMRAM] unsigned long 
 10896 ;;  counter         1   46[COMRAM] unsigned char 
 10897 ;; Return value:  Size  Location     Type
 10898 ;;                  4   34[COMRAM] unsigned long 
 10899 ;; Registers used:
 10900 ;;		wreg, status,2, status,0
 10901 ;; Tracked objects:
 10902 ;;		On entry : 0/0
 10903 ;;		On exit  : 0/0
 10904 ;;		Unchanged: 0/0
 10905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10906 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10907 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10909 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10910 ;;Total ram usage:       13 bytes
 10911 ;; Hardware stack levels used:    1
 10912 ;; Hardware stack levels required when called:    3
 10913 ;; This function calls:
 10914 ;;		Nothing
 10915 ;; This function is called by:
 10916 ;;		_printf
 10917 ;;		_I2C_Master_Init
 10918 ;; This function uses a non-reentrant model
 10919 ;;
 10920                           
 10921                           	psect	text36
 10922  003562                     __ptext36:
 10923                           	opt stack 0
 10924  003562                     ___lldiv:
 10925                           	opt stack 25
 10926                           
 10927                           ;incstack = 0
 10928  003562  0E00               	movlw	0
 10929  003564  6E2B               	movwf	___lldiv@quotient,c
 10930  003566  0E00               	movlw	0
 10931  003568  6E2C               	movwf	___lldiv@quotient+1,c
 10932  00356A  0E00               	movlw	0
 10933  00356C  6E2D               	movwf	___lldiv@quotient+2,c
 10934  00356E  0E00               	movlw	0
 10935  003570  6E2E               	movwf	___lldiv@quotient+3,c
 10936  003572  5027               	movf	___lldiv@divisor,w,c
 10937  003574  1028               	iorwf	___lldiv@divisor+1,w,c
 10938  003576  1029               	iorwf	___lldiv@divisor+2,w,c
 10939  003578  102A               	iorwf	___lldiv@divisor+3,w,c
 10940  00357A  B4D8               	btfsc	status,2,c
 10941  00357C  D02A               	goto	l1258
 10942  00357E  0E01               	movlw	1
 10943  003580  6E2F               	movwf	___lldiv@counter,c
 10944  003582  D006               	goto	l6434
 10945  003584                     l6432:
 10946  003584  90D8               	bcf	status,0,c
 10947  003586  3627               	rlcf	___lldiv@divisor,f,c
 10948  003588  3628               	rlcf	___lldiv@divisor+1,f,c
 10949  00358A  3629               	rlcf	___lldiv@divisor+2,f,c
 10950  00358C  362A               	rlcf	___lldiv@divisor+3,f,c
 10951  00358E  2A2F               	incf	___lldiv@counter,f,c
 10952  003590                     l6434:
 10953  003590  AE2A               	btfss	___lldiv@divisor+3,7,c
 10954  003592  D7F8               	goto	l6432
 10955  003594                     l6436:
 10956  003594  90D8               	bcf	status,0,c
 10957  003596  362B               	rlcf	___lldiv@quotient,f,c
 10958  003598  362C               	rlcf	___lldiv@quotient+1,f,c
 10959  00359A  362D               	rlcf	___lldiv@quotient+2,f,c
 10960  00359C  362E               	rlcf	___lldiv@quotient+3,f,c
 10961  00359E  5027               	movf	___lldiv@divisor,w,c
 10962  0035A0  5C23               	subwf	___lldiv@dividend,w,c
 10963  0035A2  5028               	movf	___lldiv@divisor+1,w,c
 10964  0035A4  5824               	subwfb	___lldiv@dividend+1,w,c
 10965  0035A6  5029               	movf	___lldiv@divisor+2,w,c
 10966  0035A8  5825               	subwfb	___lldiv@dividend+2,w,c
 10967  0035AA  502A               	movf	___lldiv@divisor+3,w,c
 10968  0035AC  5826               	subwfb	___lldiv@dividend+3,w,c
 10969  0035AE  A0D8               	btfss	status,0,c
 10970  0035B0  D009               	goto	l6444
 10971  0035B2  5027               	movf	___lldiv@divisor,w,c
 10972  0035B4  5E23               	subwf	___lldiv@dividend,f,c
 10973  0035B6  5028               	movf	___lldiv@divisor+1,w,c
 10974  0035B8  5A24               	subwfb	___lldiv@dividend+1,f,c
 10975  0035BA  5029               	movf	___lldiv@divisor+2,w,c
 10976  0035BC  5A25               	subwfb	___lldiv@dividend+2,f,c
 10977  0035BE  502A               	movf	___lldiv@divisor+3,w,c
 10978  0035C0  5A26               	subwfb	___lldiv@dividend+3,f,c
 10979  0035C2  802B               	bsf	___lldiv@quotient,0,c
 10980  0035C4                     l6444:
 10981  0035C4  90D8               	bcf	status,0,c
 10982  0035C6  322A               	rrcf	___lldiv@divisor+3,f,c
 10983  0035C8  3229               	rrcf	___lldiv@divisor+2,f,c
 10984  0035CA  3228               	rrcf	___lldiv@divisor+1,f,c
 10985  0035CC  3227               	rrcf	___lldiv@divisor,f,c
 10986  0035CE  2E2F               	decfsz	___lldiv@counter,f,c
 10987  0035D0  D7E1               	goto	l6436
 10988  0035D2                     l1258:
 10989  0035D2  C02B  F023         	movff	___lldiv@quotient,?___lldiv
 10990  0035D6  C02C  F024         	movff	___lldiv@quotient+1,?___lldiv+1
 10991  0035DA  C02D  F025         	movff	___lldiv@quotient+2,?___lldiv+2
 10992  0035DE  C02E  F026         	movff	___lldiv@quotient+3,?___lldiv+3
 10993  0035E2  0012               	return		;funcret
 10994  0035E4                     __end_of___lldiv:
 10995                           	opt stack 0
 10996                           tblptru	equ	0xFF8
 10997                           tblptrh	equ	0xFF7
 10998                           tblptrl	equ	0xFF6
 10999                           tablat	equ	0xFF5
 11000                           prodh	equ	0xFF4
 11001                           prodl	equ	0xFF3
 11002                           intcon	equ	0xFF2
 11003                           postinc0	equ	0xFEE
 11004                           wreg	equ	0xFE8
 11005                           postdec1	equ	0xFE5
 11006                           fsr1l	equ	0xFE1
 11007                           indf2	equ	0xFDF
 11008                           postinc2	equ	0xFDE
 11009                           postdec2	equ	0xFDD
 11010                           fsr2h	equ	0xFDA
 11011                           fsr2l	equ	0xFD9
 11012                           status	equ	0xFD8
 11013                           
 11014 ;; *************** function ___fttol *****************
 11015 ;; Defined at:
 11016 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 11017 ;; Parameters:    Size  Location     Type
 11018 ;;  f1              3   46[BANK0 ] float 
 11019 ;; Auto vars:     Size  Location     Type
 11020 ;;  lval            4   56[BANK0 ] unsigned long 
 11021 ;;  exp1            1   60[BANK0 ] unsigned char 
 11022 ;;  sign1           1   55[BANK0 ] unsigned char 
 11023 ;; Return value:  Size  Location     Type
 11024 ;;                  4   46[BANK0 ] long 
 11025 ;; Registers used:
 11026 ;;		wreg, status,2, status,0
 11027 ;; Tracked objects:
 11028 ;;		On entry : 0/0
 11029 ;;		On exit  : 0/0
 11030 ;;		Unchanged: 0/0
 11031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11032 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11033 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11034 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11035 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11036 ;;Total ram usage:       15 bytes
 11037 ;; Hardware stack levels used:    1
 11038 ;; Hardware stack levels required when called:    3
 11039 ;; This function calls:
 11040 ;;		Nothing
 11041 ;; This function is called by:
 11042 ;;		_sortBattery
 11043 ;;		_angleToPulse
 11044 ;;		_printf
 11045 ;; This function uses a non-reentrant model
 11046 ;;
 11047                           
 11048                           	psect	text37
 11049  002414                     __ptext37:
 11050                           	opt stack 0
 11051  002414                     ___fttol:
 11052                           	opt stack 24
 11053                           
 11054                           ;incstack = 0
 11055  002414  C0B0  F0B2         	movff	___fttol@f1+2,??___fttol
 11056  002418  0100               	movlb	0	; () banked
 11057  00241A  6BB3               	clrf	(??___fttol+1)& (0+255),b
 11058  00241C  6BB4               	clrf	(??___fttol+2)& (0+255),b
 11059  00241E  0100               	movlb	0	; () banked
 11060  002420  35AF               	rlcf	(___fttol@f1+1)& (0+255),w,b
 11061  002422  0100               	movlb	0	; () banked
 11062  002424  37B2               	rlcf	??___fttol& (0+255),f,b
 11063  002426  E301               	bnc	u6521
 11064  002428  81B3               	bsf	(??___fttol+1)& (0+255),0,b
 11065  00242A                     u6521:
 11066  00242A  0100               	movlb	0	; () banked
 11067  00242C  51B2               	movf	??___fttol& (0+255),w,b
 11068  00242E  0100               	movlb	0	; () banked
 11069  002430  6FBC               	movwf	___fttol@exp1& (0+255),b
 11070  002432  0100               	movlb	0	; () banked
 11071  002434  51BC               	movf	___fttol@exp1& (0+255),w,b
 11072  002436  A4D8               	btfss	status,2,c
 11073  002438  D00A               	goto	l6386
 11074                           
 11075                           ; BSR set to: 0
 11076  00243A  0E00               	movlw	0
 11077  00243C  0100               	movlb	0	; () banked
 11078  00243E  6FAE               	movwf	?___fttol& (0+255),b
 11079  002440  0E00               	movlw	0
 11080  002442  6FAF               	movwf	(?___fttol+1)& (0+255),b
 11081  002444  0E00               	movlw	0
 11082  002446  6FB0               	movwf	(?___fttol+2)& (0+255),b
 11083  002448  0E00               	movlw	0
 11084  00244A  6FB1               	movwf	(?___fttol+3)& (0+255),b
 11085                           
 11086                           ; BSR set to: 0
 11087  00244C  0012               	return	
 11088  00244E                     l6386:
 11089                           
 11090                           ; BSR set to: 0
 11091  00244E  0E17               	movlw	23
 11092  002450  0100               	movlb	0	; () banked
 11093  002452  6FB2               	movwf	??___fttol& (0+255),b
 11094  002454  C0AE  F0B3         	movff	___fttol@f1,??___fttol+1
 11095  002458  C0AF  F0B4         	movff	___fttol@f1+1,??___fttol+2
 11096  00245C  C0B0  F0B5         	movff	___fttol@f1+2,??___fttol+3
 11097  002460  0100               	movlb	0	; () banked
 11098  002462  29B2               	incf	??___fttol& (0+255),w,b
 11099  002464  0100               	movlb	0	; () banked
 11100  002466  6FB6               	movwf	(??___fttol+4)& (0+255),b
 11101  002468  D005               	goto	u6540
 11102  00246A                     u6545:
 11103  00246A  0100               	movlb	0	; () banked
 11104  00246C  90D8               	bcf	status,0,c
 11105  00246E  33B5               	rrcf	(??___fttol+3)& (0+255),f,b
 11106  002470  33B4               	rrcf	(??___fttol+2)& (0+255),f,b
 11107  002472  33B3               	rrcf	(??___fttol+1)& (0+255),f,b
 11108  002474                     u6540:
 11109  002474  0100               	movlb	0	; () banked
 11110  002476  2FB6               	decfsz	(??___fttol+4)& (0+255),f,b
 11111  002478  D7F8               	goto	u6545
 11112  00247A  0100               	movlb	0	; () banked
 11113  00247C  51B3               	movf	(??___fttol+1)& (0+255),w,b
 11114  00247E  0100               	movlb	0	; () banked
 11115  002480  6FB7               	movwf	___fttol@sign1& (0+255),b
 11116                           
 11117                           ; BSR set to: 0
 11118  002482  0100               	movlb	0	; () banked
 11119  002484  8FAF               	bsf	(___fttol@f1+1)& (0+255),7,b
 11120                           
 11121                           ; BSR set to: 0
 11122  002486  0EFF               	movlw	255
 11123  002488  0100               	movlb	0	; () banked
 11124  00248A  17AE               	andwf	___fttol@f1& (0+255),f,b
 11125  00248C  0EFF               	movlw	255
 11126  00248E  0100               	movlb	0	; () banked
 11127  002490  17AF               	andwf	(___fttol@f1+1)& (0+255),f,b
 11128  002492  0E00               	movlw	0
 11129  002494  0100               	movlb	0	; () banked
 11130  002496  17B0               	andwf	(___fttol@f1+2)& (0+255),f,b
 11131                           
 11132                           ; BSR set to: 0
 11133  002498  0100               	movlb	0	; () banked
 11134  00249A  51AE               	movf	___fttol@f1& (0+255),w,b
 11135  00249C  0100               	movlb	0	; () banked
 11136  00249E  6FB8               	movwf	___fttol@lval& (0+255),b
 11137  0024A0  0100               	movlb	0	; () banked
 11138  0024A2  51AF               	movf	(___fttol@f1+1)& (0+255),w,b
 11139  0024A4  0100               	movlb	0	; () banked
 11140  0024A6  6FB9               	movwf	(___fttol@lval+1)& (0+255),b
 11141  0024A8  0100               	movlb	0	; () banked
 11142  0024AA  51B0               	movf	(___fttol@f1+2)& (0+255),w,b
 11143  0024AC  0100               	movlb	0	; () banked
 11144  0024AE  6FBA               	movwf	(___fttol@lval+2)& (0+255),b
 11145  0024B0  0100               	movlb	0	; () banked
 11146  0024B2  6BBB               	clrf	(___fttol@lval+3)& (0+255),b
 11147                           
 11148                           ; BSR set to: 0
 11149  0024B4  0E8E               	movlw	142
 11150  0024B6  0100               	movlb	0	; () banked
 11151  0024B8  5FBC               	subwf	___fttol@exp1& (0+255),f,b
 11152                           
 11153                           ; BSR set to: 0
 11154  0024BA  0100               	movlb	0	; () banked
 11155  0024BC  AFBC               	btfss	___fttol@exp1& (0+255),7,b
 11156  0024BE  D01A               	goto	l6408
 11157                           
 11158                           ; BSR set to: 0
 11159  0024C0  0100               	movlb	0	; () banked
 11160  0024C2  51BC               	movf	___fttol@exp1& (0+255),w,b
 11161  0024C4  0A80               	xorlw	128
 11162  0024C6  0F8F               	addlw	143
 11163  0024C8  B0D8               	btfsc	status,0,c
 11164  0024CA  D00A               	goto	l6404
 11165                           
 11166                           ; BSR set to: 0
 11167  0024CC  0E00               	movlw	0
 11168  0024CE  0100               	movlb	0	; () banked
 11169  0024D0  6FAE               	movwf	?___fttol& (0+255),b
 11170  0024D2  0E00               	movlw	0
 11171  0024D4  6FAF               	movwf	(?___fttol+1)& (0+255),b
 11172  0024D6  0E00               	movlw	0
 11173  0024D8  6FB0               	movwf	(?___fttol+2)& (0+255),b
 11174  0024DA  0E00               	movlw	0
 11175  0024DC  6FB1               	movwf	(?___fttol+3)& (0+255),b
 11176                           
 11177                           ; BSR set to: 0
 11178  0024DE  0012               	return	
 11179  0024E0                     l6404:
 11180                           
 11181                           ; BSR set to: 0
 11182  0024E0  0100               	movlb	0	; () banked
 11183  0024E2  90D8               	bcf	status,0,c
 11184  0024E4  33BB               	rrcf	(___fttol@lval+3)& (0+255),f,b
 11185  0024E6  33BA               	rrcf	(___fttol@lval+2)& (0+255),f,b
 11186  0024E8  33B9               	rrcf	(___fttol@lval+1)& (0+255),f,b
 11187  0024EA  33B8               	rrcf	___fttol@lval& (0+255),f,b
 11188                           
 11189                           ; BSR set to: 0
 11190  0024EC  0100               	movlb	0	; () banked
 11191  0024EE  3FBC               	incfsz	___fttol@exp1& (0+255),f,b
 11192  0024F0  D7F7               	goto	l6404
 11193                           
 11194                           ; BSR set to: 0
 11195  0024F2  D01B               	goto	l6418
 11196  0024F4                     l6408:
 11197                           
 11198                           ; BSR set to: 0
 11199  0024F4  0E17               	movlw	23
 11200  0024F6  0100               	movlb	0	; () banked
 11201  0024F8  65BC               	cpfsgt	___fttol@exp1& (0+255),b
 11202  0024FA  D012               	goto	l6416
 11203                           
 11204                           ; BSR set to: 0
 11205  0024FC  0E00               	movlw	0
 11206  0024FE  0100               	movlb	0	; () banked
 11207  002500  6FAE               	movwf	?___fttol& (0+255),b
 11208  002502  0E00               	movlw	0
 11209  002504  6FAF               	movwf	(?___fttol+1)& (0+255),b
 11210  002506  0E00               	movlw	0
 11211  002508  6FB0               	movwf	(?___fttol+2)& (0+255),b
 11212  00250A  0E00               	movlw	0
 11213  00250C  6FB1               	movwf	(?___fttol+3)& (0+255),b
 11214                           
 11215                           ; BSR set to: 0
 11216  00250E  0012               	return	
 11217  002510                     l6414:
 11218                           
 11219                           ; BSR set to: 0
 11220  002510  0100               	movlb	0	; () banked
 11221  002512  90D8               	bcf	status,0,c
 11222  002514  37B8               	rlcf	___fttol@lval& (0+255),f,b
 11223  002516  37B9               	rlcf	(___fttol@lval+1)& (0+255),f,b
 11224  002518  37BA               	rlcf	(___fttol@lval+2)& (0+255),f,b
 11225  00251A  37BB               	rlcf	(___fttol@lval+3)& (0+255),f,b
 11226  00251C  0100               	movlb	0	; () banked
 11227  00251E  07BC               	decf	___fttol@exp1& (0+255),f,b
 11228  002520                     l6416:
 11229                           
 11230                           ; BSR set to: 0
 11231  002520  0100               	movlb	0	; () banked
 11232  002522  51BC               	movf	___fttol@exp1& (0+255),w,b
 11233  002524  0100               	movlb	0	; () banked
 11234  002526  A4D8               	btfss	status,2,c
 11235  002528  D7F3               	goto	l6414
 11236  00252A                     l6418:
 11237                           
 11238                           ; BSR set to: 0
 11239  00252A  0100               	movlb	0	; () banked
 11240  00252C  51B7               	movf	___fttol@sign1& (0+255),w,b
 11241  00252E  0100               	movlb	0	; () banked
 11242  002530  B4D8               	btfsc	status,2,c
 11243  002532  D009               	goto	l6422
 11244                           
 11245                           ; BSR set to: 0
 11246  002534  0100               	movlb	0	; () banked
 11247  002536  1FBB               	comf	(___fttol@lval+3)& (0+255),f,b
 11248  002538  1FBA               	comf	(___fttol@lval+2)& (0+255),f,b
 11249  00253A  1FB9               	comf	(___fttol@lval+1)& (0+255),f,b
 11250  00253C  6DB8               	negf	___fttol@lval& (0+255),b
 11251  00253E  0E00               	movlw	0
 11252  002540  23B9               	addwfc	(___fttol@lval+1)& (0+255),f,b
 11253  002542  23BA               	addwfc	(___fttol@lval+2)& (0+255),f,b
 11254  002544  23BB               	addwfc	(___fttol@lval+3)& (0+255),f,b
 11255  002546                     l6422:
 11256                           
 11257                           ; BSR set to: 0
 11258  002546  C0B8  F0AE         	movff	___fttol@lval,?___fttol
 11259  00254A  C0B9  F0AF         	movff	___fttol@lval+1,?___fttol+1
 11260  00254E  C0BA  F0B0         	movff	___fttol@lval+2,?___fttol+2
 11261  002552  C0BB  F0B1         	movff	___fttol@lval+3,?___fttol+3
 11262  002556  0012               	return	
 11263  002558                     __end_of___fttol:
 11264                           	opt stack 0
 11265                           tblptru	equ	0xFF8
 11266                           tblptrh	equ	0xFF7
 11267                           tblptrl	equ	0xFF6
 11268                           tablat	equ	0xFF5
 11269                           prodh	equ	0xFF4
 11270                           prodl	equ	0xFF3
 11271                           intcon	equ	0xFF2
 11272                           postinc0	equ	0xFEE
 11273                           wreg	equ	0xFE8
 11274                           postdec1	equ	0xFE5
 11275                           fsr1l	equ	0xFE1
 11276                           indf2	equ	0xFDF
 11277                           postinc2	equ	0xFDE
 11278                           postdec2	equ	0xFDD
 11279                           fsr2h	equ	0xFDA
 11280                           fsr2l	equ	0xFD9
 11281                           status	equ	0xFD8
 11282                           
 11283 ;; *************** function ___ftsub *****************
 11284 ;; Defined at:
 11285 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 11286 ;; Parameters:    Size  Location     Type
 11287 ;;  f1              3   46[BANK0 ] float 
 11288 ;;  f2              3   49[BANK0 ] float 
 11289 ;; Auto vars:     Size  Location     Type
 11290 ;;		None
 11291 ;; Return value:  Size  Location     Type
 11292 ;;                  3   46[BANK0 ] float 
 11293 ;; Registers used:
 11294 ;;		wreg, status,2, status,0, cstack
 11295 ;; Tracked objects:
 11296 ;;		On entry : 0/0
 11297 ;;		On exit  : 0/0
 11298 ;;		Unchanged: 0/0
 11299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11300 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11303 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11304 ;;Total ram usage:        6 bytes
 11305 ;; Hardware stack levels used:    1
 11306 ;; Hardware stack levels required when called:    5
 11307 ;; This function calls:
 11308 ;;		___ftadd
 11309 ;; This function is called by:
 11310 ;;		_sortBattery
 11311 ;;		_printf
 11312 ;; This function uses a non-reentrant model
 11313 ;;
 11314                           
 11315                           	psect	text38
 11316  003ADE                     __ptext38:
 11317                           	opt stack 0
 11318  003ADE                     ___ftsub:
 11319                           	opt stack 23
 11320                           
 11321                           ; BSR set to: 0
 11322                           ;incstack = 0
 11323  003ADE  0100               	movlb	0	; () banked
 11324  003AE0  51B1               	movf	___ftsub@f2& (0+255),w,b
 11325  003AE2  0100               	movlb	0	; () banked
 11326  003AE4  11B2               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 11327  003AE6  0100               	movlb	0	; () banked
 11328  003AE8  11B3               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 11329  003AEA  B4D8               	btfsc	status,2,c
 11330  003AEC  D009               	goto	l6354
 11331                           
 11332                           ; BSR set to: 0
 11333  003AEE  0E00               	movlw	0
 11334  003AF0  0100               	movlb	0	; () banked
 11335  003AF2  1BB1               	xorwf	___ftsub@f2& (0+255),f,b
 11336  003AF4  0E00               	movlw	0
 11337  003AF6  0100               	movlb	0	; () banked
 11338  003AF8  1BB2               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 11339  003AFA  0E80               	movlw	128
 11340  003AFC  0100               	movlb	0	; () banked
 11341  003AFE  1BB3               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 11342  003B00                     l6354:
 11343                           
 11344                           ; BSR set to: 0
 11345  003B00  C0AE  F0A2         	movff	___ftsub@f1,___ftadd@f1
 11346  003B04  C0AF  F0A3         	movff	___ftsub@f1+1,___ftadd@f1+1
 11347  003B08  C0B0  F0A4         	movff	___ftsub@f1+2,___ftadd@f1+2
 11348  003B0C  C0B1  F0A5         	movff	___ftsub@f2,___ftadd@f2
 11349  003B10  C0B2  F0A6         	movff	___ftsub@f2+1,___ftadd@f2+1
 11350  003B14  C0B3  F0A7         	movff	___ftsub@f2+2,___ftadd@f2+2
 11351  003B18  EC6E  F00D         	call	___ftadd	;wreg free
 11352  003B1C  C0A2  F0AE         	movff	?___ftadd,?___ftsub
 11353  003B20  C0A3  F0AF         	movff	?___ftadd+1,?___ftsub+1
 11354  003B24  C0A4  F0B0         	movff	?___ftadd+2,?___ftsub+2
 11355  003B28  0012               	return	
 11356  003B2A                     __end_of___ftsub:
 11357                           	opt stack 0
 11358                           tblptru	equ	0xFF8
 11359                           tblptrh	equ	0xFF7
 11360                           tblptrl	equ	0xFF6
 11361                           tablat	equ	0xFF5
 11362                           prodh	equ	0xFF4
 11363                           prodl	equ	0xFF3
 11364                           intcon	equ	0xFF2
 11365                           postinc0	equ	0xFEE
 11366                           wreg	equ	0xFE8
 11367                           postdec1	equ	0xFE5
 11368                           fsr1l	equ	0xFE1
 11369                           indf2	equ	0xFDF
 11370                           postinc2	equ	0xFDE
 11371                           postdec2	equ	0xFDD
 11372                           fsr2h	equ	0xFDA
 11373                           fsr2l	equ	0xFD9
 11374                           status	equ	0xFD8
 11375                           
 11376 ;; *************** function ___ftadd *****************
 11377 ;; Defined at:
 11378 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 11379 ;; Parameters:    Size  Location     Type
 11380 ;;  f1              3   34[BANK0 ] float 
 11381 ;;  f2              3   37[BANK0 ] float 
 11382 ;; Auto vars:     Size  Location     Type
 11383 ;;  exp1            1   45[BANK0 ] unsigned char 
 11384 ;;  exp2            1   44[BANK0 ] unsigned char 
 11385 ;;  sign            1   43[BANK0 ] unsigned char 
 11386 ;; Return value:  Size  Location     Type
 11387 ;;                  3   34[BANK0 ] float 
 11388 ;; Registers used:
 11389 ;;		wreg, status,2, status,0, cstack
 11390 ;; Tracked objects:
 11391 ;;		On entry : 0/0
 11392 ;;		On exit  : 0/0
 11393 ;;		Unchanged: 0/0
 11394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11395 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11396 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11397 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11398 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11399 ;;Total ram usage:       12 bytes
 11400 ;; Hardware stack levels used:    1
 11401 ;; Hardware stack levels required when called:    4
 11402 ;; This function calls:
 11403 ;;		___ftpack
 11404 ;; This function is called by:
 11405 ;;		_angleToPulse
 11406 ;;		_printf
 11407 ;;		___ftsub
 11408 ;; This function uses a non-reentrant model
 11409 ;;
 11410                           
 11411                           	psect	text39
 11412  001ADC                     __ptext39:
 11413                           	opt stack 0
 11414  001ADC                     ___ftadd:
 11415                           	opt stack 23
 11416                           
 11417                           ;incstack = 0
 11418  001ADC  C0A4  F0A8         	movff	___ftadd@f1+2,??___ftadd
 11419  001AE0  0100               	movlb	0	; () banked
 11420  001AE2  6BA9               	clrf	(??___ftadd+1)& (0+255),b
 11421  001AE4  6BAA               	clrf	(??___ftadd+2)& (0+255),b
 11422  001AE6  0100               	movlb	0	; () banked
 11423  001AE8  35A3               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 11424  001AEA  0100               	movlb	0	; () banked
 11425  001AEC  37A8               	rlcf	??___ftadd& (0+255),f,b
 11426  001AEE  E301               	bnc	u5821
 11427  001AF0  81A9               	bsf	(??___ftadd+1)& (0+255),0,b
 11428  001AF2                     u5821:
 11429  001AF2  0100               	movlb	0	; () banked
 11430  001AF4  51A8               	movf	??___ftadd& (0+255),w,b
 11431  001AF6  0100               	movlb	0	; () banked
 11432  001AF8  6FAD               	movwf	___ftadd@exp1& (0+255),b
 11433  001AFA  C0A7  F0A8         	movff	___ftadd@f2+2,??___ftadd
 11434  001AFE  0100               	movlb	0	; () banked
 11435  001B00  6BA9               	clrf	(??___ftadd+1)& (0+255),b
 11436  001B02  6BAA               	clrf	(??___ftadd+2)& (0+255),b
 11437  001B04  0100               	movlb	0	; () banked
 11438  001B06  35A6               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 11439  001B08  0100               	movlb	0	; () banked
 11440  001B0A  37A8               	rlcf	??___ftadd& (0+255),f,b
 11441  001B0C  E301               	bnc	u5831
 11442  001B0E  81A9               	bsf	(??___ftadd+1)& (0+255),0,b
 11443  001B10                     u5831:
 11444  001B10  0100               	movlb	0	; () banked
 11445  001B12  51A8               	movf	??___ftadd& (0+255),w,b
 11446  001B14  0100               	movlb	0	; () banked
 11447  001B16  6FAC               	movwf	___ftadd@exp2& (0+255),b
 11448                           
 11449                           ; BSR set to: 0
 11450  001B18  0100               	movlb	0	; () banked
 11451  001B1A  51AD               	movf	___ftadd@exp1& (0+255),w,b
 11452  001B1C  0100               	movlb	0	; () banked
 11453  001B1E  B4D8               	btfsc	status,2,c
 11454  001B20  D011               	goto	l1134
 11455                           
 11456                           ; BSR set to: 0
 11457  001B22  0100               	movlb	0	; () banked
 11458  001B24  51AC               	movf	___ftadd@exp2& (0+255),w,b
 11459  001B26  0100               	movlb	0	; () banked
 11460  001B28  5DAD               	subwf	___ftadd@exp1& (0+255),w,b
 11461  001B2A  B0D8               	btfsc	status,0,c
 11462  001B2C  D012               	goto	l5964
 11463                           
 11464                           ; BSR set to: 0
 11465  001B2E  0100               	movlb	0	; () banked
 11466  001B30  51AD               	movf	___ftadd@exp1& (0+255),w,b
 11467  001B32  0800               	sublw	0
 11468  001B34  0100               	movlb	0	; () banked
 11469  001B36  25AC               	addwf	___ftadd@exp2& (0+255),w,b
 11470  001B38  0100               	movlb	0	; () banked
 11471  001B3A  6FA8               	movwf	??___ftadd& (0+255),b
 11472  001B3C  0E18               	movlw	24
 11473  001B3E  0100               	movlb	0	; () banked
 11474  001B40  65A8               	cpfsgt	??___ftadd& (0+255),b
 11475  001B42  D007               	goto	l5964
 11476  001B44                     l1134:
 11477                           
 11478                           ; BSR set to: 0
 11479  001B44  C0A5  F0A2         	movff	___ftadd@f2,?___ftadd
 11480  001B48  C0A6  F0A3         	movff	___ftadd@f2+1,?___ftadd+1
 11481  001B4C  C0A7  F0A4         	movff	___ftadd@f2+2,?___ftadd+2
 11482  001B50  0012               	return	
 11483  001B52                     l5964:
 11484                           
 11485                           ; BSR set to: 0
 11486  001B52  0100               	movlb	0	; () banked
 11487  001B54  51AC               	movf	___ftadd@exp2& (0+255),w,b
 11488  001B56  0100               	movlb	0	; () banked
 11489  001B58  B4D8               	btfsc	status,2,c
 11490  001B5A  D011               	goto	l1138
 11491                           
 11492                           ; BSR set to: 0
 11493  001B5C  0100               	movlb	0	; () banked
 11494  001B5E  51AD               	movf	___ftadd@exp1& (0+255),w,b
 11495  001B60  0100               	movlb	0	; () banked
 11496  001B62  5DAC               	subwf	___ftadd@exp2& (0+255),w,b
 11497  001B64  B0D8               	btfsc	status,0,c
 11498  001B66  D012               	goto	l5970
 11499                           
 11500                           ; BSR set to: 0
 11501  001B68  0100               	movlb	0	; () banked
 11502  001B6A  51AC               	movf	___ftadd@exp2& (0+255),w,b
 11503  001B6C  0800               	sublw	0
 11504  001B6E  0100               	movlb	0	; () banked
 11505  001B70  25AD               	addwf	___ftadd@exp1& (0+255),w,b
 11506  001B72  0100               	movlb	0	; () banked
 11507  001B74  6FA8               	movwf	??___ftadd& (0+255),b
 11508  001B76  0E18               	movlw	24
 11509  001B78  0100               	movlb	0	; () banked
 11510  001B7A  65A8               	cpfsgt	??___ftadd& (0+255),b
 11511  001B7C  D007               	goto	l5970
 11512  001B7E                     l1138:
 11513                           
 11514                           ; BSR set to: 0
 11515  001B7E  C0A2  F0A2         	movff	___ftadd@f1,?___ftadd
 11516  001B82  C0A3  F0A3         	movff	___ftadd@f1+1,?___ftadd+1
 11517  001B86  C0A4  F0A4         	movff	___ftadd@f1+2,?___ftadd+2
 11518  001B8A  0012               	return	
 11519  001B8C                     l5970:
 11520                           
 11521                           ; BSR set to: 0
 11522  001B8C  0E06               	movlw	6
 11523  001B8E  0100               	movlb	0	; () banked
 11524  001B90  6FAB               	movwf	___ftadd@sign& (0+255),b
 11525                           
 11526                           ; BSR set to: 0
 11527  001B92  0100               	movlb	0	; () banked
 11528  001B94  AFA4               	btfss	(___ftadd@f1+2)& (0+255),7,b
 11529  001B96  D002               	goto	l5976
 11530                           
 11531                           ; BSR set to: 0
 11532  001B98  0100               	movlb	0	; () banked
 11533  001B9A  8FAB               	bsf	___ftadd@sign& (0+255),7,b
 11534  001B9C                     l5976:
 11535                           
 11536                           ; BSR set to: 0
 11537  001B9C  0100               	movlb	0	; () banked
 11538  001B9E  AFA7               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11539  001BA0  D002               	goto	l1140
 11540                           
 11541                           ; BSR set to: 0
 11542  001BA2  0100               	movlb	0	; () banked
 11543  001BA4  8DAB               	bsf	___ftadd@sign& (0+255),6,b
 11544  001BA6                     l1140:
 11545                           
 11546                           ; BSR set to: 0
 11547  001BA6  0100               	movlb	0	; () banked
 11548  001BA8  8FA3               	bsf	(___ftadd@f1+1)& (0+255),7,b
 11549                           
 11550                           ; BSR set to: 0
 11551  001BAA  0EFF               	movlw	255
 11552  001BAC  0100               	movlb	0	; () banked
 11553  001BAE  17A2               	andwf	___ftadd@f1& (0+255),f,b
 11554  001BB0  0EFF               	movlw	255
 11555  001BB2  0100               	movlb	0	; () banked
 11556  001BB4  17A3               	andwf	(___ftadd@f1+1)& (0+255),f,b
 11557  001BB6  0E00               	movlw	0
 11558  001BB8  0100               	movlb	0	; () banked
 11559  001BBA  17A4               	andwf	(___ftadd@f1+2)& (0+255),f,b
 11560  001BBC  0100               	movlb	0	; () banked
 11561  001BBE  8FA6               	bsf	(___ftadd@f2+1)& (0+255),7,b
 11562                           
 11563                           ; BSR set to: 0
 11564  001BC0  0EFF               	movlw	255
 11565  001BC2  0100               	movlb	0	; () banked
 11566  001BC4  17A5               	andwf	___ftadd@f2& (0+255),f,b
 11567  001BC6  0EFF               	movlw	255
 11568  001BC8  0100               	movlb	0	; () banked
 11569  001BCA  17A6               	andwf	(___ftadd@f2+1)& (0+255),f,b
 11570  001BCC  0E00               	movlw	0
 11571  001BCE  0100               	movlb	0	; () banked
 11572  001BD0  17A7               	andwf	(___ftadd@f2+2)& (0+255),f,b
 11573                           
 11574                           ; BSR set to: 0
 11575  001BD2  0100               	movlb	0	; () banked
 11576  001BD4  51AC               	movf	___ftadd@exp2& (0+255),w,b
 11577  001BD6  0100               	movlb	0	; () banked
 11578  001BD8  5DAD               	subwf	___ftadd@exp1& (0+255),w,b
 11579  001BDA  B0D8               	btfsc	status,0,c
 11580  001BDC  D025               	goto	l5996
 11581  001BDE                     l5986:
 11582                           
 11583                           ; BSR set to: 0
 11584  001BDE  0100               	movlb	0	; () banked
 11585  001BE0  90D8               	bcf	status,0,c
 11586  001BE2  37A5               	rlcf	___ftadd@f2& (0+255),f,b
 11587  001BE4  37A6               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 11588  001BE6  37A7               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 11589  001BE8  0100               	movlb	0	; () banked
 11590  001BEA  07AC               	decf	___ftadd@exp2& (0+255),f,b
 11591                           
 11592                           ; BSR set to: 0
 11593  001BEC  0100               	movlb	0	; () banked
 11594  001BEE  51AD               	movf	___ftadd@exp1& (0+255),w,b
 11595  001BF0  0100               	movlb	0	; () banked
 11596  001BF2  19AC               	xorwf	___ftadd@exp2& (0+255),w,b
 11597  001BF4  B4D8               	btfsc	status,2,c
 11598  001BF6  D011               	goto	l5994
 11599                           
 11600                           ; BSR set to: 0
 11601  001BF8  0100               	movlb	0	; () banked
 11602  001BFA  07AB               	decf	___ftadd@sign& (0+255),f,b
 11603  001BFC  C0AB  F0A8         	movff	___ftadd@sign,??___ftadd
 11604  001C00  0E07               	movlw	7
 11605  001C02  0100               	movlb	0	; () banked
 11606  001C04  17A8               	andwf	??___ftadd& (0+255),f,b
 11607  001C06  B4D8               	btfsc	status,2,c
 11608  001C08  D008               	goto	l5994
 11609  001C0A  D7E9               	goto	l5986
 11610  001C0C                     l5992:
 11611                           
 11612                           ; BSR set to: 0
 11613  001C0C  0100               	movlb	0	; () banked
 11614  001C0E  90D8               	bcf	status,0,c
 11615  001C10  33A4               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 11616  001C12  33A3               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 11617  001C14  33A2               	rrcf	___ftadd@f1& (0+255),f,b
 11618  001C16  0100               	movlb	0	; () banked
 11619  001C18  2BAD               	incf	___ftadd@exp1& (0+255),f,b
 11620  001C1A                     l5994:
 11621                           
 11622                           ; BSR set to: 0
 11623  001C1A  0100               	movlb	0	; () banked
 11624  001C1C  51AC               	movf	___ftadd@exp2& (0+255),w,b
 11625  001C1E  0100               	movlb	0	; () banked
 11626  001C20  19AD               	xorwf	___ftadd@exp1& (0+255),w,b
 11627  001C22  B4D8               	btfsc	status,2,c
 11628  001C24  D02B               	goto	l1149
 11629  001C26  D7F2               	goto	l5992
 11630  001C28                     l5996:
 11631                           
 11632                           ; BSR set to: 0
 11633  001C28  0100               	movlb	0	; () banked
 11634  001C2A  51AD               	movf	___ftadd@exp1& (0+255),w,b
 11635  001C2C  0100               	movlb	0	; () banked
 11636  001C2E  5DAC               	subwf	___ftadd@exp2& (0+255),w,b
 11637  001C30  B0D8               	btfsc	status,0,c
 11638  001C32  D024               	goto	l1149
 11639  001C34                     l5998:
 11640                           
 11641                           ; BSR set to: 0
 11642  001C34  0100               	movlb	0	; () banked
 11643  001C36  90D8               	bcf	status,0,c
 11644  001C38  37A2               	rlcf	___ftadd@f1& (0+255),f,b
 11645  001C3A  37A3               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 11646  001C3C  37A4               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 11647  001C3E  0100               	movlb	0	; () banked
 11648  001C40  07AD               	decf	___ftadd@exp1& (0+255),f,b
 11649                           
 11650                           ; BSR set to: 0
 11651  001C42  0100               	movlb	0	; () banked
 11652  001C44  51AD               	movf	___ftadd@exp1& (0+255),w,b
 11653  001C46  0100               	movlb	0	; () banked
 11654  001C48  19AC               	xorwf	___ftadd@exp2& (0+255),w,b
 11655  001C4A  B4D8               	btfsc	status,2,c
 11656  001C4C  D011               	goto	l6006
 11657                           
 11658                           ; BSR set to: 0
 11659  001C4E  0100               	movlb	0	; () banked
 11660  001C50  07AB               	decf	___ftadd@sign& (0+255),f,b
 11661  001C52  C0AB  F0A8         	movff	___ftadd@sign,??___ftadd
 11662  001C56  0E07               	movlw	7
 11663  001C58  0100               	movlb	0	; () banked
 11664  001C5A  17A8               	andwf	??___ftadd& (0+255),f,b
 11665  001C5C  B4D8               	btfsc	status,2,c
 11666  001C5E  D008               	goto	l6006
 11667  001C60  D7E9               	goto	l5998
 11668  001C62                     l6004:
 11669                           
 11670                           ; BSR set to: 0
 11671  001C62  0100               	movlb	0	; () banked
 11672  001C64  90D8               	bcf	status,0,c
 11673  001C66  33A7               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 11674  001C68  33A6               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 11675  001C6A  33A5               	rrcf	___ftadd@f2& (0+255),f,b
 11676  001C6C  0100               	movlb	0	; () banked
 11677  001C6E  2BAC               	incf	___ftadd@exp2& (0+255),f,b
 11678  001C70                     l6006:
 11679                           
 11680                           ; BSR set to: 0
 11681  001C70  0100               	movlb	0	; () banked
 11682  001C72  51AC               	movf	___ftadd@exp2& (0+255),w,b
 11683  001C74  0100               	movlb	0	; () banked
 11684  001C76  19AD               	xorwf	___ftadd@exp1& (0+255),w,b
 11685  001C78  A4D8               	btfss	status,2,c
 11686  001C7A  D7F3               	goto	l6004
 11687  001C7C                     l1149:
 11688                           
 11689                           ; BSR set to: 0
 11690  001C7C  0100               	movlb	0	; () banked
 11691  001C7E  AFAB               	btfss	___ftadd@sign& (0+255),7,b
 11692  001C80  D012               	goto	l1158
 11693                           
 11694                           ; BSR set to: 0
 11695  001C82  0EFF               	movlw	255
 11696  001C84  0100               	movlb	0	; () banked
 11697  001C86  1BA2               	xorwf	___ftadd@f1& (0+255),f,b
 11698  001C88  0EFF               	movlw	255
 11699  001C8A  0100               	movlb	0	; () banked
 11700  001C8C  1BA3               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 11701  001C8E  0EFF               	movlw	255
 11702  001C90  0100               	movlb	0	; () banked
 11703  001C92  1BA4               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 11704  001C94  0E01               	movlw	1
 11705  001C96  0100               	movlb	0	; () banked
 11706  001C98  27A2               	addwf	___ftadd@f1& (0+255),f,b
 11707  001C9A  0E00               	movlw	0
 11708  001C9C  0100               	movlb	0	; () banked
 11709  001C9E  23A3               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 11710  001CA0  0E00               	movlw	0
 11711  001CA2  0100               	movlb	0	; () banked
 11712  001CA4  23A4               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 11713  001CA6                     l1158:
 11714                           
 11715                           ; BSR set to: 0
 11716  001CA6  0100               	movlb	0	; () banked
 11717  001CA8  ADAB               	btfss	___ftadd@sign& (0+255),6,b
 11718  001CAA  D012               	goto	l6012
 11719                           
 11720                           ; BSR set to: 0
 11721  001CAC  0EFF               	movlw	255
 11722  001CAE  0100               	movlb	0	; () banked
 11723  001CB0  1BA5               	xorwf	___ftadd@f2& (0+255),f,b
 11724  001CB2  0EFF               	movlw	255
 11725  001CB4  0100               	movlb	0	; () banked
 11726  001CB6  1BA6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11727  001CB8  0EFF               	movlw	255
 11728  001CBA  0100               	movlb	0	; () banked
 11729  001CBC  1BA7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11730  001CBE  0E01               	movlw	1
 11731  001CC0  0100               	movlb	0	; () banked
 11732  001CC2  27A5               	addwf	___ftadd@f2& (0+255),f,b
 11733  001CC4  0E00               	movlw	0
 11734  001CC6  0100               	movlb	0	; () banked
 11735  001CC8  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11736  001CCA  0E00               	movlw	0
 11737  001CCC  0100               	movlb	0	; () banked
 11738  001CCE  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11739  001CD0                     l6012:
 11740                           
 11741                           ; BSR set to: 0
 11742  001CD0  0E00               	movlw	0
 11743  001CD2  0100               	movlb	0	; () banked
 11744  001CD4  6FAB               	movwf	___ftadd@sign& (0+255),b
 11745                           
 11746                           ; BSR set to: 0
 11747  001CD6  0100               	movlb	0	; () banked
 11748  001CD8  51A2               	movf	___ftadd@f1& (0+255),w,b
 11749  001CDA  0100               	movlb	0	; () banked
 11750  001CDC  27A5               	addwf	___ftadd@f2& (0+255),f,b
 11751  001CDE  0100               	movlb	0	; () banked
 11752  001CE0  51A3               	movf	(___ftadd@f1+1)& (0+255),w,b
 11753  001CE2  0100               	movlb	0	; () banked
 11754  001CE4  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11755  001CE6  0100               	movlb	0	; () banked
 11756  001CE8  51A4               	movf	(___ftadd@f1+2)& (0+255),w,b
 11757  001CEA  0100               	movlb	0	; () banked
 11758  001CEC  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11759                           
 11760                           ; BSR set to: 0
 11761  001CEE  0100               	movlb	0	; () banked
 11762  001CF0  AFA7               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11763  001CF2  D015               	goto	l6022
 11764                           
 11765                           ; BSR set to: 0
 11766  001CF4  0EFF               	movlw	255
 11767  001CF6  0100               	movlb	0	; () banked
 11768  001CF8  1BA5               	xorwf	___ftadd@f2& (0+255),f,b
 11769  001CFA  0EFF               	movlw	255
 11770  001CFC  0100               	movlb	0	; () banked
 11771  001CFE  1BA6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11772  001D00  0EFF               	movlw	255
 11773  001D02  0100               	movlb	0	; () banked
 11774  001D04  1BA7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11775  001D06  0E01               	movlw	1
 11776  001D08  0100               	movlb	0	; () banked
 11777  001D0A  27A5               	addwf	___ftadd@f2& (0+255),f,b
 11778  001D0C  0E00               	movlw	0
 11779  001D0E  0100               	movlb	0	; () banked
 11780  001D10  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11781  001D12  0E00               	movlw	0
 11782  001D14  0100               	movlb	0	; () banked
 11783  001D16  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11784                           
 11785                           ; BSR set to: 0
 11786  001D18  0E01               	movlw	1
 11787  001D1A  0100               	movlb	0	; () banked
 11788  001D1C  6FAB               	movwf	___ftadd@sign& (0+255),b
 11789  001D1E                     l6022:
 11790                           
 11791                           ; BSR set to: 0
 11792  001D1E  C0A5  F023         	movff	___ftadd@f2,___ftpack@arg
 11793  001D22  C0A6  F024         	movff	___ftadd@f2+1,___ftpack@arg+1
 11794  001D26  C0A7  F025         	movff	___ftadd@f2+2,___ftpack@arg+2
 11795  001D2A  C0AD  F026         	movff	___ftadd@exp1,___ftpack@exp
 11796  001D2E  C0AB  F027         	movff	___ftadd@sign,___ftpack@sign
 11797  001D32  ECED  F018         	call	___ftpack	;wreg free
 11798  001D36  C023  F0A2         	movff	?___ftpack,?___ftadd
 11799  001D3A  C024  F0A3         	movff	?___ftpack+1,?___ftadd+1
 11800  001D3E  C025  F0A4         	movff	?___ftpack+2,?___ftadd+2
 11801  001D42  0012               	return	
 11802  001D44                     __end_of___ftadd:
 11803                           	opt stack 0
 11804                           tblptru	equ	0xFF8
 11805                           tblptrh	equ	0xFF7
 11806                           tblptrl	equ	0xFF6
 11807                           tablat	equ	0xFF5
 11808                           prodh	equ	0xFF4
 11809                           prodl	equ	0xFF3
 11810                           intcon	equ	0xFF2
 11811                           postinc0	equ	0xFEE
 11812                           wreg	equ	0xFE8
 11813                           postdec1	equ	0xFE5
 11814                           fsr1l	equ	0xFE1
 11815                           indf2	equ	0xFDF
 11816                           postinc2	equ	0xFDE
 11817                           postdec2	equ	0xFDD
 11818                           fsr2h	equ	0xFDA
 11819                           fsr2l	equ	0xFD9
 11820                           status	equ	0xFD8
 11821                           
 11822 ;; *************** function ___ftpack *****************
 11823 ;; Defined at:
 11824 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 11825 ;; Parameters:    Size  Location     Type
 11826 ;;  arg             3   34[COMRAM] unsigned um
 11827 ;;  exp             1   37[COMRAM] unsigned char 
 11828 ;;  sign            1   38[COMRAM] unsigned char 
 11829 ;; Auto vars:     Size  Location     Type
 11830 ;;		None
 11831 ;; Return value:  Size  Location     Type
 11832 ;;                  3   34[COMRAM] float 
 11833 ;; Registers used:
 11834 ;;		wreg, status,2, status,0
 11835 ;; Tracked objects:
 11836 ;;		On entry : 0/0
 11837 ;;		On exit  : 0/0
 11838 ;;		Unchanged: 0/0
 11839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11840 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11842 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11843 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11844 ;;Total ram usage:        8 bytes
 11845 ;; Hardware stack levels used:    1
 11846 ;; Hardware stack levels required when called:    3
 11847 ;; This function calls:
 11848 ;;		Nothing
 11849 ;; This function is called by:
 11850 ;;		___altoft
 11851 ;;		___awtoft
 11852 ;;		___ftadd
 11853 ;;		___ftdiv
 11854 ;;		___ftmul
 11855 ;;		___lltoft
 11856 ;; This function uses a non-reentrant model
 11857 ;;
 11858                           
 11859                           	psect	text40
 11860  0031DA                     __ptext40:
 11861                           	opt stack 0
 11862  0031DA                     ___ftpack:
 11863                           	opt stack 23
 11864                           
 11865                           ;incstack = 0
 11866  0031DA  5026               	movf	___ftpack@exp,w,c
 11867  0031DC  B4D8               	btfsc	status,2,c
 11868  0031DE  D005               	goto	l5916
 11869  0031E0  5023               	movf	___ftpack@arg,w,c
 11870  0031E2  1024               	iorwf	___ftpack@arg+1,w,c
 11871  0031E4  1025               	iorwf	___ftpack@arg+2,w,c
 11872  0031E6  A4D8               	btfss	status,2,c
 11873  0031E8  D00C               	goto	l5922
 11874  0031EA                     l5916:
 11875  0031EA  0E00               	movlw	0
 11876  0031EC  6E23               	movwf	?___ftpack,c
 11877  0031EE  0E00               	movlw	0
 11878  0031F0  6E24               	movwf	?___ftpack+1,c
 11879  0031F2  0E00               	movlw	0
 11880  0031F4  6E25               	movwf	?___ftpack+2,c
 11881  0031F6  0012               	return	
 11882  0031F8                     l5920:
 11883  0031F8  2A26               	incf	___ftpack@exp,f,c
 11884  0031FA  90D8               	bcf	status,0,c
 11885  0031FC  3225               	rrcf	___ftpack@arg+2,f,c
 11886  0031FE  3224               	rrcf	___ftpack@arg+1,f,c
 11887  003200  3223               	rrcf	___ftpack@arg,f,c
 11888  003202                     l5922:
 11889  003202  0E00               	movlw	0
 11890  003204  1423               	andwf	___ftpack@arg,w,c
 11891  003206  6E28               	movwf	??___ftpack& (0+255),c
 11892  003208  0E00               	movlw	0
 11893  00320A  1424               	andwf	___ftpack@arg+1,w,c
 11894  00320C  6E29               	movwf	(??___ftpack+1)& (0+255),c
 11895  00320E  0EFE               	movlw	254
 11896  003210  1425               	andwf	___ftpack@arg+2,w,c
 11897  003212  6E2A               	movwf	(??___ftpack+2)& (0+255),c
 11898  003214  5028               	movf	??___ftpack,w,c
 11899  003216  1029               	iorwf	??___ftpack+1,w,c
 11900  003218  102A               	iorwf	??___ftpack+2,w,c
 11901  00321A  B4D8               	btfsc	status,2,c
 11902  00321C  D00C               	goto	l5928
 11903  00321E  D7EC               	goto	l5920
 11904  003220                     l5924:
 11905  003220  2A26               	incf	___ftpack@exp,f,c
 11906  003222  0E01               	movlw	1
 11907  003224  2623               	addwf	___ftpack@arg,f,c
 11908  003226  0E00               	movlw	0
 11909  003228  2224               	addwfc	___ftpack@arg+1,f,c
 11910  00322A  0E00               	movlw	0
 11911  00322C  2225               	addwfc	___ftpack@arg+2,f,c
 11912  00322E  90D8               	bcf	status,0,c
 11913  003230  3225               	rrcf	___ftpack@arg+2,f,c
 11914  003232  3224               	rrcf	___ftpack@arg+1,f,c
 11915  003234  3223               	rrcf	___ftpack@arg,f,c
 11916  003236                     l5928:
 11917  003236  0E00               	movlw	0
 11918  003238  1423               	andwf	___ftpack@arg,w,c
 11919  00323A  6E28               	movwf	??___ftpack& (0+255),c
 11920  00323C  0E00               	movlw	0
 11921  00323E  1424               	andwf	___ftpack@arg+1,w,c
 11922  003240  6E29               	movwf	(??___ftpack+1)& (0+255),c
 11923  003242  0EFF               	movlw	255
 11924  003244  1425               	andwf	___ftpack@arg+2,w,c
 11925  003246  6E2A               	movwf	(??___ftpack+2)& (0+255),c
 11926  003248  5028               	movf	??___ftpack,w,c
 11927  00324A  1029               	iorwf	??___ftpack+1,w,c
 11928  00324C  102A               	iorwf	??___ftpack+2,w,c
 11929  00324E  B4D8               	btfsc	status,2,c
 11930  003250  D006               	goto	l5932
 11931  003252  D7E6               	goto	l5924
 11932  003254                     l5930:
 11933  003254  0626               	decf	___ftpack@exp,f,c
 11934  003256  90D8               	bcf	status,0,c
 11935  003258  3623               	rlcf	___ftpack@arg,f,c
 11936  00325A  3624               	rlcf	___ftpack@arg+1,f,c
 11937  00325C  3625               	rlcf	___ftpack@arg+2,f,c
 11938  00325E                     l5932:
 11939  00325E  BE24               	btfsc	___ftpack@arg+1,7,c
 11940  003260  D003               	goto	l1111
 11941  003262  0E02               	movlw	2
 11942  003264  6026               	cpfslt	___ftpack@exp,c
 11943  003266  D7F6               	goto	l5930
 11944  003268                     l1111:
 11945  003268  A026               	btfss	___ftpack@exp,0,c
 11946  00326A  9E24               	bcf	___ftpack@arg+1,7,c
 11947  00326C  90D8               	bcf	status,0,c
 11948  00326E  3226               	rrcf	___ftpack@exp,f,c
 11949  003270  5026               	movf	___ftpack@exp,w,c
 11950  003272  1225               	iorwf	___ftpack@arg+2,f,c
 11951  003274  5027               	movf	___ftpack@sign,w,c
 11952  003276  A4D8               	btfss	status,2,c
 11953  003278  8E25               	bsf	___ftpack@arg+2,7,c
 11954  00327A  C023  F023         	movff	___ftpack@arg,?___ftpack
 11955  00327E  C024  F024         	movff	___ftpack@arg+1,?___ftpack+1
 11956  003282  C025  F025         	movff	___ftpack@arg+2,?___ftpack+2
 11957  003286  0012               	return	
 11958  003288                     __end_of___ftpack:
 11959                           	opt stack 0
 11960                           tblptru	equ	0xFF8
 11961                           tblptrh	equ	0xFF7
 11962                           tblptrl	equ	0xFF6
 11963                           tablat	equ	0xFF5
 11964                           prodh	equ	0xFF4
 11965                           prodl	equ	0xFF3
 11966                           intcon	equ	0xFF2
 11967                           postinc0	equ	0xFEE
 11968                           wreg	equ	0xFE8
 11969                           postdec1	equ	0xFE5
 11970                           fsr1l	equ	0xFE1
 11971                           indf2	equ	0xFDF
 11972                           postinc2	equ	0xFDE
 11973                           postdec2	equ	0xFDD
 11974                           fsr2h	equ	0xFDA
 11975                           fsr2l	equ	0xFD9
 11976                           status	equ	0xFD8
 11977                           
 11978 ;; *************** function ___ftneg *****************
 11979 ;; Defined at:
 11980 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 11981 ;; Parameters:    Size  Location     Type
 11982 ;;  f1              3   34[COMRAM] float 
 11983 ;; Auto vars:     Size  Location     Type
 11984 ;;		None
 11985 ;; Return value:  Size  Location     Type
 11986 ;;                  3   34[COMRAM] float 
 11987 ;; Registers used:
 11988 ;;		wreg, status,2, status,0
 11989 ;; Tracked objects:
 11990 ;;		On entry : 0/0
 11991 ;;		On exit  : 0/0
 11992 ;;		Unchanged: 0/0
 11993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11994 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11997 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11998 ;;Total ram usage:        3 bytes
 11999 ;; Hardware stack levels used:    1
 12000 ;; Hardware stack levels required when called:    3
 12001 ;; This function calls:
 12002 ;;		Nothing
 12003 ;; This function is called by:
 12004 ;;		_printf
 12005 ;; This function uses a non-reentrant model
 12006 ;;
 12007                           
 12008                           	psect	text41
 12009  003D32                     __ptext41:
 12010                           	opt stack 0
 12011  003D32                     ___ftneg:
 12012                           	opt stack 25
 12013                           
 12014                           ;incstack = 0
 12015  003D32  5023               	movf	___ftneg@f1,w,c
 12016  003D34  1024               	iorwf	___ftneg@f1+1,w,c
 12017  003D36  1025               	iorwf	___ftneg@f1+2,w,c
 12018  003D38  B4D8               	btfsc	status,2,c
 12019  003D3A  D006               	goto	l1208
 12020  003D3C  0E00               	movlw	0
 12021  003D3E  1A23               	xorwf	___ftneg@f1,f,c
 12022  003D40  0E00               	movlw	0
 12023  003D42  1A24               	xorwf	___ftneg@f1+1,f,c
 12024  003D44  0E80               	movlw	128
 12025  003D46  1A25               	xorwf	___ftneg@f1+2,f,c
 12026  003D48                     l1208:
 12027  003D48  C023  F023         	movff	___ftneg@f1,?___ftneg
 12028  003D4C  C024  F024         	movff	___ftneg@f1+1,?___ftneg+1
 12029  003D50  C025  F025         	movff	___ftneg@f1+2,?___ftneg+2
 12030  003D54  0012               	return		;funcret
 12031  003D56                     __end_of___ftneg:
 12032                           	opt stack 0
 12033                           tblptru	equ	0xFF8
 12034                           tblptrh	equ	0xFF7
 12035                           tblptrl	equ	0xFF6
 12036                           tablat	equ	0xFF5
 12037                           prodh	equ	0xFF4
 12038                           prodl	equ	0xFF3
 12039                           intcon	equ	0xFF2
 12040                           postinc0	equ	0xFEE
 12041                           wreg	equ	0xFE8
 12042                           postdec1	equ	0xFE5
 12043                           fsr1l	equ	0xFE1
 12044                           indf2	equ	0xFDF
 12045                           postinc2	equ	0xFDE
 12046                           postdec2	equ	0xFDD
 12047                           fsr2h	equ	0xFDA
 12048                           fsr2l	equ	0xFD9
 12049                           status	equ	0xFD8
 12050                           
 12051 ;; *************** function ___ftge *****************
 12052 ;; Defined at:
 12053 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 12054 ;; Parameters:    Size  Location     Type
 12055 ;;  ff1             3   46[COMRAM] float 
 12056 ;;  ff2             3   49[COMRAM] float 
 12057 ;; Auto vars:     Size  Location     Type
 12058 ;;		None
 12059 ;; Return value:  Size  Location     Type
 12060 ;;		None               void
 12061 ;; Registers used:
 12062 ;;		wreg, status,2, status,0
 12063 ;; Tracked objects:
 12064 ;;		On entry : 0/0
 12065 ;;		On exit  : 0/0
 12066 ;;		Unchanged: 0/0
 12067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12068 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12070 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12071 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12072 ;;Total ram usage:        9 bytes
 12073 ;; Hardware stack levels used:    1
 12074 ;; Hardware stack levels required when called:    3
 12075 ;; This function calls:
 12076 ;;		Nothing
 12077 ;; This function is called by:
 12078 ;;		_sortBattery
 12079 ;;		_printf
 12080 ;; This function uses a non-reentrant model
 12081 ;;
 12082                           
 12083                           	psect	text42
 12084  0033C6                     __ptext42:
 12085                           	opt stack 0
 12086  0033C6                     ___ftge:
 12087                           	opt stack 25
 12088                           
 12089                           ;incstack = 0
 12090  0033C6  AE31               	btfss	___ftge@ff1+2,7,c
 12091  0033C8  D016               	goto	l6362
 12092  0033CA  C02F  F035         	movff	___ftge@ff1,??___ftge
 12093  0033CE  C030  F036         	movff	___ftge@ff1+1,??___ftge+1
 12094  0033D2  C031  F037         	movff	___ftge@ff1+2,??___ftge+2
 12095  0033D6  1E35               	comf	??___ftge,f,c
 12096  0033D8  1E36               	comf	??___ftge+1,f,c
 12097  0033DA  1E37               	comf	??___ftge+2,f,c
 12098  0033DC  2A35               	incf	??___ftge,f,c
 12099  0033DE  0E00               	movlw	0
 12100  0033E0  2236               	addwfc	??___ftge+1,f,c
 12101  0033E2  2237               	addwfc	??___ftge+2,f,c
 12102  0033E4  0E00               	movlw	0
 12103  0033E6  2435               	addwf	??___ftge,w,c
 12104  0033E8  6E2F               	movwf	___ftge@ff1,c
 12105  0033EA  0E00               	movlw	0
 12106  0033EC  2036               	addwfc	??___ftge+1,w,c
 12107  0033EE  6E30               	movwf	___ftge@ff1+1,c
 12108  0033F0  0E80               	movlw	128
 12109  0033F2  2037               	addwfc	??___ftge+2,w,c
 12110  0033F4  6E31               	movwf	___ftge@ff1+2,c
 12111  0033F6                     l6362:
 12112  0033F6  AE34               	btfss	___ftge@ff2+2,7,c
 12113  0033F8  D016               	goto	l6366
 12114  0033FA  C032  F035         	movff	___ftge@ff2,??___ftge
 12115  0033FE  C033  F036         	movff	___ftge@ff2+1,??___ftge+1
 12116  003402  C034  F037         	movff	___ftge@ff2+2,??___ftge+2
 12117  003406  1E35               	comf	??___ftge,f,c
 12118  003408  1E36               	comf	??___ftge+1,f,c
 12119  00340A  1E37               	comf	??___ftge+2,f,c
 12120  00340C  2A35               	incf	??___ftge,f,c
 12121  00340E  0E00               	movlw	0
 12122  003410  2236               	addwfc	??___ftge+1,f,c
 12123  003412  2237               	addwfc	??___ftge+2,f,c
 12124  003414  0E00               	movlw	0
 12125  003416  2435               	addwf	??___ftge,w,c
 12126  003418  6E32               	movwf	___ftge@ff2,c
 12127  00341A  0E00               	movlw	0
 12128  00341C  2036               	addwfc	??___ftge+1,w,c
 12129  00341E  6E33               	movwf	___ftge@ff2+1,c
 12130  003420  0E80               	movlw	128
 12131  003422  2037               	addwfc	??___ftge+2,w,c
 12132  003424  6E34               	movwf	___ftge@ff2+2,c
 12133  003426                     l6366:
 12134  003426  0E00               	movlw	0
 12135  003428  1A2F               	xorwf	___ftge@ff1,f,c
 12136  00342A  0E00               	movlw	0
 12137  00342C  1A30               	xorwf	___ftge@ff1+1,f,c
 12138  00342E  0E80               	movlw	128
 12139  003430  1A31               	xorwf	___ftge@ff1+2,f,c
 12140  003432  0E00               	movlw	0
 12141  003434  1A32               	xorwf	___ftge@ff2,f,c
 12142  003436  0E00               	movlw	0
 12143  003438  1A33               	xorwf	___ftge@ff2+1,f,c
 12144  00343A  0E80               	movlw	128
 12145  00343C  1A34               	xorwf	___ftge@ff2+2,f,c
 12146  00343E  5032               	movf	___ftge@ff2,w,c
 12147  003440  5C2F               	subwf	___ftge@ff1,w,c
 12148  003442  5033               	movf	___ftge@ff2+1,w,c
 12149  003444  5830               	subwfb	___ftge@ff1+1,w,c
 12150  003446  5034               	movf	___ftge@ff2+2,w,c
 12151  003448  5831               	subwfb	___ftge@ff1+2,w,c
 12152  00344A  B0D8               	btfsc	status,0,c
 12153  00344C  D002               	goto	l6372
 12154  00344E  90D8               	bcf	status,0,c
 12155  003450  0012               	return	
 12156  003452                     l6372:
 12157  003452  80D8               	bsf	status,0,c
 12158  003454  0012               	return	
 12159  003456                     __end_of___ftge:
 12160                           	opt stack 0
 12161                           tblptru	equ	0xFF8
 12162                           tblptrh	equ	0xFF7
 12163                           tblptrl	equ	0xFF6
 12164                           tablat	equ	0xFF5
 12165                           prodh	equ	0xFF4
 12166                           prodl	equ	0xFF3
 12167                           intcon	equ	0xFF2
 12168                           postinc0	equ	0xFEE
 12169                           wreg	equ	0xFE8
 12170                           postdec1	equ	0xFE5
 12171                           fsr1l	equ	0xFE1
 12172                           indf2	equ	0xFDF
 12173                           postinc2	equ	0xFDE
 12174                           postdec2	equ	0xFDD
 12175                           fsr2h	equ	0xFDA
 12176                           fsr2l	equ	0xFD9
 12177                           status	equ	0xFD8
 12178                           
 12179 ;; *************** function _lcdClear *****************
 12180 ;; Defined at:
 12181 ;;		line 74 in file "lcd.c"
 12182 ;; Parameters:    Size  Location     Type
 12183 ;;		None
 12184 ;; Auto vars:     Size  Location     Type
 12185 ;;		None
 12186 ;; Return value:  Size  Location     Type
 12187 ;;                  1    wreg      void 
 12188 ;; Registers used:
 12189 ;;		wreg, status,2, status,0, cstack
 12190 ;; Tracked objects:
 12191 ;;		On entry : 0/0
 12192 ;;		On exit  : 0/0
 12193 ;;		Unchanged: 0/0
 12194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12199 ;;Total ram usage:        0 bytes
 12200 ;; Hardware stack levels used:    1
 12201 ;; Hardware stack levels required when called:    5
 12202 ;; This function calls:
 12203 ;;		_lcdInst
 12204 ;; This function is called by:
 12205 ;;		_debug
 12206 ;;		_main
 12207 ;;		_sortBattery
 12208 ;;		_showDateTime
 12209 ;;		_showMainMenu
 12210 ;;		_showRunSelect
 12211 ;;		_showRunMenu
 12212 ;;		_showRunTime
 12213 ;;		_showRunStats
 12214 ;;		_pause
 12215 ;; This function uses a non-reentrant model
 12216 ;;
 12217                           
 12218                           	psect	text43
 12219  003E1E                     __ptext43:
 12220                           	opt stack 0
 12221  003E1E                     _lcdClear:
 12222                           	opt stack 24
 12223                           
 12224                           ;lcd.c: 75: lcdInst(0b00000001);
 12225                           
 12226                           ;incstack = 0
 12227  003E1E  0E01               	movlw	1
 12228  003E20  ECCD  F01E         	call	_lcdInst
 12229  003E24  0012               	return		;funcret
 12230  003E26                     __end_of_lcdClear:
 12231                           	opt stack 0
 12232                           tblptru	equ	0xFF8
 12233                           tblptrh	equ	0xFF7
 12234                           tblptrl	equ	0xFF6
 12235                           tablat	equ	0xFF5
 12236                           prodh	equ	0xFF4
 12237                           prodl	equ	0xFF3
 12238                           intcon	equ	0xFF2
 12239                           postinc0	equ	0xFEE
 12240                           wreg	equ	0xFE8
 12241                           postdec1	equ	0xFE5
 12242                           fsr1l	equ	0xFE1
 12243                           indf2	equ	0xFDF
 12244                           postinc2	equ	0xFDE
 12245                           postdec2	equ	0xFDD
 12246                           fsr2h	equ	0xFDA
 12247                           fsr2l	equ	0xFD9
 12248                           status	equ	0xFD8
 12249                           
 12250 ;; *************** function _readPastRun *****************
 12251 ;; Defined at:
 12252 ;;		line 23 in file "eeprom.c"
 12253 ;; Parameters:    Size  Location     Type
 12254 ;;  run             2    0[BANK0 ] int 
 12255 ;; Auto vars:     Size  Location     Type
 12256 ;;  i               2   16[BANK0 ] int 
 12257 ;;  data           14    2[BANK0 ] int [7]
 12258 ;; Return value:  Size  Location     Type
 12259 ;;                  2    0[BANK0 ] PTR int 
 12260 ;; Registers used:
 12261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12262 ;; Tracked objects:
 12263 ;;		On entry : 0/0
 12264 ;;		On exit  : 0/0
 12265 ;;		Unchanged: 0/0
 12266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12267 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12268 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12270 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12271 ;;Total ram usage:       18 bytes
 12272 ;; Hardware stack levels used:    1
 12273 ;; Hardware stack levels required when called:    4
 12274 ;; This function calls:
 12275 ;;		___wmul
 12276 ;;		_eepromRead
 12277 ;; This function is called by:
 12278 ;;		_debug
 12279 ;;		_showInterface
 12280 ;; This function uses a non-reentrant model
 12281 ;;
 12282                           
 12283                           	psect	text44
 12284  003334                     __ptext44:
 12285                           	opt stack 0
 12286  003334                     _readPastRun:
 12287                           	opt stack 25
 12288                           
 12289                           ;eeprom.c: 24: int data[7];
 12290                           ;eeprom.c: 25: for(int i = 0; i < 7; i++){
 12291                           
 12292                           ;incstack = 0
 12293  003334  0E00               	movlw	0
 12294  003336  0100               	movlb	0	; () banked
 12295  003338  6F91               	movwf	(readPastRun@i+1)& (0+255),b
 12296  00333A  0E00               	movlw	0
 12297  00333C  6F90               	movwf	readPastRun@i& (0+255),b
 12298  00333E                     l6942:
 12299                           
 12300                           ; BSR set to: 0
 12301  00333E  0100               	movlb	0	; () banked
 12302  003340  BF91               	btfsc	(readPastRun@i+1)& (0+255),7,b
 12303  003342  D008               	goto	l6946
 12304  003344  0100               	movlb	0	; () banked
 12305  003346  5191               	movf	(readPastRun@i+1)& (0+255),w,b
 12306  003348  E137               	bnz	l6952
 12307  00334A  0E07               	movlw	7
 12308  00334C  0100               	movlb	0	; () banked
 12309  00334E  5D90               	subwf	readPastRun@i& (0+255),w,b
 12310  003350  B0D8               	btfsc	status,0,c
 12311  003352  D032               	goto	l6952
 12312  003354                     l6946:
 12313                           
 12314                           ; BSR set to: 0
 12315                           ;eeprom.c: 26: data[i] = eepromRead((run*7+1) + i);
 12316  003354  C080  F031         	movff	readPastRun@run,___wmul@multiplier
 12317  003358  C081  F032         	movff	readPastRun@run+1,___wmul@multiplier+1
 12318  00335C  0E00               	movlw	0
 12319  00335E  6E34               	movwf	___wmul@multiplicand+1,c
 12320  003360  0E07               	movlw	7
 12321  003362  6E33               	movwf	___wmul@multiplicand,c
 12322  003364  EC86  F01E         	call	___wmul	;wreg free
 12323  003368  0100               	movlb	0	; () banked
 12324  00336A  5190               	movf	readPastRun@i& (0+255),w,b
 12325  00336C  2631               	addwf	?___wmul,f,c
 12326  00336E  0100               	movlb	0	; () banked
 12327  003370  5191               	movf	(readPastRun@i+1)& (0+255),w,b
 12328  003372  2232               	addwfc	?___wmul+1,f,c
 12329  003374  0E01               	movlw	1
 12330  003376  2631               	addwf	?___wmul,f,c
 12331  003378  0E00               	movlw	0
 12332  00337A  2232               	addwfc	?___wmul+1,f,c
 12333  00337C  C031  F037         	movff	?___wmul,eepromRead@address
 12334  003380  C032  F038         	movff	?___wmul+1,eepromRead@address+1
 12335  003384  0E00               	movlw	0
 12336  003386  BE38               	btfsc	eepromRead@address+1,7,c
 12337  003388  0EFF               	movlw	-1
 12338  00338A  6E39               	movwf	eepromRead@address+2,c
 12339  00338C  6E3A               	movwf	eepromRead@address+3,c
 12340  00338E  ECED  F01E         	call	_eepromRead	;wreg free
 12341  003392  90D8               	bcf	status,0,c
 12342  003394  0100               	movlb	0	; () banked
 12343  003396  3590               	rlcf	readPastRun@i& (0+255),w,b
 12344  003398  6ED9               	movwf	fsr2l,c
 12345  00339A  0100               	movlb	0	; () banked
 12346  00339C  3591               	rlcf	(readPastRun@i+1)& (0+255),w,b
 12347  00339E  6EDA               	movwf	fsr2h,c
 12348  0033A0  0E82               	movlw	low readPastRun@data
 12349  0033A2  26D9               	addwf	fsr2l,f,c
 12350  0033A4  0E00               	movlw	high readPastRun@data
 12351  0033A6  22DA               	addwfc	fsr2h,f,c
 12352  0033A8  C037  FFDE         	movff	?_eepromRead,postinc2
 12353  0033AC  C038  FFDD         	movff	?_eepromRead+1,postdec2
 12354                           
 12355                           ; BSR set to: 0
 12356  0033B0  0100               	movlb	0	; () banked
 12357  0033B2  4B90               	infsnz	readPastRun@i& (0+255),f,b
 12358  0033B4  2B91               	incf	(readPastRun@i+1)& (0+255),f,b
 12359  0033B6  D7C3               	goto	l6942
 12360  0033B8                     l6952:
 12361                           
 12362                           ; BSR set to: 0
 12363                           ;eeprom.c: 27: }
 12364                           ;eeprom.c: 28: return data;
 12365  0033B8  0E82               	movlw	low readPastRun@data
 12366  0033BA  0100               	movlb	0	; () banked
 12367  0033BC  6F80               	movwf	?_readPastRun& (0+255),b
 12368  0033BE  0E00               	movlw	high readPastRun@data
 12369  0033C0  0100               	movlb	0	; () banked
 12370  0033C2  6F81               	movwf	(?_readPastRun+1)& (0+255),b
 12371  0033C4  0012               	return	
 12372  0033C6                     __end_of_readPastRun:
 12373                           	opt stack 0
 12374                           tblptru	equ	0xFF8
 12375                           tblptrh	equ	0xFF7
 12376                           tblptrl	equ	0xFF6
 12377                           tablat	equ	0xFF5
 12378                           prodh	equ	0xFF4
 12379                           prodl	equ	0xFF3
 12380                           intcon	equ	0xFF2
 12381                           postinc0	equ	0xFEE
 12382                           wreg	equ	0xFE8
 12383                           postdec1	equ	0xFE5
 12384                           fsr1l	equ	0xFE1
 12385                           indf2	equ	0xFDF
 12386                           postinc2	equ	0xFDE
 12387                           postdec2	equ	0xFDD
 12388                           fsr2h	equ	0xFDA
 12389                           fsr2l	equ	0xFD9
 12390                           status	equ	0xFD8
 12391                           
 12392 ;; *************** function _saveNewRun *****************
 12393 ;; Defined at:
 12394 ;;		line 31 in file "eeprom.c"
 12395 ;; Parameters:    Size  Location     Type
 12396 ;;  data            2    9[BANK0 ] PTR int 
 12397 ;;		 -> debug@run(14), 
 12398 ;; Auto vars:     Size  Location     Type
 12399 ;;  i               2   13[BANK0 ] int 
 12400 ;;  n               2   11[BANK0 ] int 
 12401 ;; Return value:  Size  Location     Type
 12402 ;;                  1    wreg      void 
 12403 ;; Registers used:
 12404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12405 ;; Tracked objects:
 12406 ;;		On entry : 0/0
 12407 ;;		On exit  : 0/0
 12408 ;;		Unchanged: 0/0
 12409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12410 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12411 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12413 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12414 ;;Total ram usage:        6 bytes
 12415 ;; Hardware stack levels used:    1
 12416 ;; Hardware stack levels required when called:    4
 12417 ;; This function calls:
 12418 ;;		___wmul
 12419 ;;		_eepromRead
 12420 ;;		_eepromWrite
 12421 ;; This function is called by:
 12422 ;;		_debug
 12423 ;; This function uses a non-reentrant model
 12424 ;;
 12425                           
 12426                           	psect	text45
 12427  002B96                     __ptext45:
 12428                           	opt stack 0
 12429  002B96                     _saveNewRun:
 12430                           	opt stack 25
 12431                           
 12432                           ;eeprom.c: 33: eepromWrite(eepromRead(0)+1,0);
 12433                           
 12434                           ; BSR set to: 0
 12435                           ;incstack = 0
 12436  002B96  0E00               	movlw	0
 12437  002B98  6E37               	movwf	eepromRead@address,c
 12438  002B9A  0E00               	movlw	0
 12439  002B9C  6E38               	movwf	eepromRead@address+1,c
 12440  002B9E  0E00               	movlw	0
 12441  002BA0  6E39               	movwf	eepromRead@address+2,c
 12442  002BA2  0E00               	movlw	0
 12443  002BA4  6E3A               	movwf	eepromRead@address+3,c
 12444  002BA6  ECED  F01E         	call	_eepromRead	;wreg free
 12445  002BAA  0E01               	movlw	1
 12446  002BAC  2437               	addwf	?_eepromRead,w,c
 12447  002BAE  0100               	movlb	0	; () banked
 12448  002BB0  6F80               	movwf	eepromWrite@data& (0+255),b
 12449  002BB2  0E00               	movlw	0
 12450  002BB4  2038               	addwfc	?_eepromRead+1,w,c
 12451  002BB6  0100               	movlb	0	; () banked
 12452  002BB8  6F81               	movwf	(eepromWrite@data+1)& (0+255),b
 12453  002BBA  0E00               	movlw	0
 12454  002BBC  0100               	movlb	0	; () banked
 12455  002BBE  6F82               	movwf	eepromWrite@address& (0+255),b
 12456  002BC0  0E00               	movlw	0
 12457  002BC2  6F83               	movwf	(eepromWrite@address+1)& (0+255),b
 12458  002BC4  0E00               	movlw	0
 12459  002BC6  6F84               	movwf	(eepromWrite@address+2)& (0+255),b
 12460  002BC8  0E00               	movlw	0
 12461  002BCA  6F85               	movwf	(eepromWrite@address+3)& (0+255),b
 12462  002BCC  ECF6  F01C         	call	_eepromWrite	;wreg free
 12463                           
 12464                           ;eeprom.c: 34: int n = eepromRead(0);
 12465  002BD0  0E00               	movlw	0
 12466  002BD2  6E37               	movwf	eepromRead@address,c
 12467  002BD4  0E00               	movlw	0
 12468  002BD6  6E38               	movwf	eepromRead@address+1,c
 12469  002BD8  0E00               	movlw	0
 12470  002BDA  6E39               	movwf	eepromRead@address+2,c
 12471  002BDC  0E00               	movlw	0
 12472  002BDE  6E3A               	movwf	eepromRead@address+3,c
 12473  002BE0  ECED  F01E         	call	_eepromRead	;wreg free
 12474  002BE4  C037  F08B         	movff	?_eepromRead,saveNewRun@n
 12475  002BE8  C038  F08C         	movff	?_eepromRead+1,saveNewRun@n+1
 12476                           
 12477                           ;eeprom.c: 36: for(int i = 0; i < 7; i++){
 12478  002BEC  0E00               	movlw	0
 12479  002BEE  0100               	movlb	0	; () banked
 12480  002BF0  6F8E               	movwf	(saveNewRun@i+1)& (0+255),b
 12481  002BF2  0E00               	movlw	0
 12482  002BF4  6F8D               	movwf	saveNewRun@i& (0+255),b
 12483  002BF6                     l7108:
 12484                           
 12485                           ; BSR set to: 0
 12486  002BF6  0100               	movlb	0	; () banked
 12487  002BF8  BF8E               	btfsc	(saveNewRun@i+1)& (0+255),7,b
 12488  002BFA  D008               	goto	l7112
 12489  002BFC  0100               	movlb	0	; () banked
 12490  002BFE  518E               	movf	(saveNewRun@i+1)& (0+255),w,b
 12491  002C00  E13A               	bnz	l402
 12492  002C02  0E07               	movlw	7
 12493  002C04  0100               	movlb	0	; () banked
 12494  002C06  5D8D               	subwf	saveNewRun@i& (0+255),w,b
 12495  002C08  B0D8               	btfsc	status,0,c
 12496  002C0A  0012               	return	
 12497  002C0C                     l7112:
 12498                           
 12499                           ; BSR set to: 0
 12500                           ;eeprom.c: 37: eepromWrite(data[i], (n*7+1) + i);
 12501  002C0C  90D8               	bcf	status,0,c
 12502  002C0E  0100               	movlb	0	; () banked
 12503  002C10  358D               	rlcf	saveNewRun@i& (0+255),w,b
 12504  002C12  6ED9               	movwf	fsr2l,c
 12505  002C14  0100               	movlb	0	; () banked
 12506  002C16  358E               	rlcf	(saveNewRun@i+1)& (0+255),w,b
 12507  002C18  6EDA               	movwf	fsr2h,c
 12508  002C1A  0100               	movlb	0	; () banked
 12509  002C1C  5189               	movf	saveNewRun@data& (0+255),w,b
 12510  002C1E  26D9               	addwf	fsr2l,f,c
 12511  002C20  0100               	movlb	0	; () banked
 12512  002C22  518A               	movf	(saveNewRun@data+1)& (0+255),w,b
 12513  002C24  22DA               	addwfc	fsr2h,f,c
 12514  002C26  CFDE F080          	movff	postinc2,eepromWrite@data
 12515  002C2A  CFDD F081          	movff	postdec2,eepromWrite@data+1
 12516  002C2E  C08B  F031         	movff	saveNewRun@n,___wmul@multiplier
 12517  002C32  C08C  F032         	movff	saveNewRun@n+1,___wmul@multiplier+1
 12518  002C36  0E00               	movlw	0
 12519  002C38  6E34               	movwf	___wmul@multiplicand+1,c
 12520  002C3A  0E07               	movlw	7
 12521  002C3C  6E33               	movwf	___wmul@multiplicand,c
 12522  002C3E  EC86  F01E         	call	___wmul	;wreg free
 12523  002C42  0100               	movlb	0	; () banked
 12524  002C44  518D               	movf	saveNewRun@i& (0+255),w,b
 12525  002C46  2631               	addwf	?___wmul,f,c
 12526  002C48  0100               	movlb	0	; () banked
 12527  002C4A  518E               	movf	(saveNewRun@i+1)& (0+255),w,b
 12528  002C4C  2232               	addwfc	?___wmul+1,f,c
 12529  002C4E  0E01               	movlw	1
 12530  002C50  2631               	addwf	?___wmul,f,c
 12531  002C52  0E00               	movlw	0
 12532  002C54  2232               	addwfc	?___wmul+1,f,c
 12533  002C56  C031  F082         	movff	?___wmul,eepromWrite@address
 12534  002C5A  C032  F083         	movff	?___wmul+1,eepromWrite@address+1
 12535  002C5E  0100               	movlb	0	; () banked
 12536  002C60  0E00               	movlw	0
 12537  002C62  BF83               	btfsc	(eepromWrite@address+1)& (0+255),7,b
 12538  002C64  0EFF               	movlw	-1
 12539  002C66  6F84               	movwf	(eepromWrite@address+2)& (0+255),b
 12540  002C68  6F85               	movwf	(eepromWrite@address+3)& (0+255),b
 12541  002C6A  ECF6  F01C         	call	_eepromWrite	;wreg free
 12542  002C6E  0100               	movlb	0	; () banked
 12543  002C70  4B8D               	infsnz	saveNewRun@i& (0+255),f,b
 12544  002C72  2B8E               	incf	(saveNewRun@i+1)& (0+255),f,b
 12545  002C74  D7C0               	goto	l7108
 12546  002C76                     l402:
 12547                           
 12548                           ; BSR set to: 0
 12549  002C76  0012               	return		;funcret
 12550  002C78                     __end_of_saveNewRun:
 12551                           	opt stack 0
 12552                           tblptru	equ	0xFF8
 12553                           tblptrh	equ	0xFF7
 12554                           tblptrl	equ	0xFF6
 12555                           tablat	equ	0xFF5
 12556                           prodh	equ	0xFF4
 12557                           prodl	equ	0xFF3
 12558                           intcon	equ	0xFF2
 12559                           postinc0	equ	0xFEE
 12560                           wreg	equ	0xFE8
 12561                           postdec1	equ	0xFE5
 12562                           fsr1l	equ	0xFE1
 12563                           indf2	equ	0xFDF
 12564                           postinc2	equ	0xFDE
 12565                           postdec2	equ	0xFDD
 12566                           fsr2h	equ	0xFDA
 12567                           fsr2l	equ	0xFD9
 12568                           status	equ	0xFD8
 12569                           
 12570 ;; *************** function _eepromWrite *****************
 12571 ;; Defined at:
 12572 ;;		line 41 in file "eeprom.c"
 12573 ;; Parameters:    Size  Location     Type
 12574 ;;  data            2    0[BANK0 ] int 
 12575 ;;  address         4    2[BANK0 ] long 
 12576 ;; Auto vars:     Size  Location     Type
 12577 ;;  ien             2    7[BANK0 ] int 
 12578 ;; Return value:  Size  Location     Type
 12579 ;;                  1    wreg      void 
 12580 ;; Registers used:
 12581 ;;		wreg, status,2, status,0
 12582 ;; Tracked objects:
 12583 ;;		On entry : 0/0
 12584 ;;		On exit  : 0/0
 12585 ;;		Unchanged: 0/0
 12586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12587 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12588 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12589 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12590 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12591 ;;Total ram usage:        9 bytes
 12592 ;; Hardware stack levels used:    1
 12593 ;; Hardware stack levels required when called:    3
 12594 ;; This function calls:
 12595 ;;		Nothing
 12596 ;; This function is called by:
 12597 ;;		_saveNewRun
 12598 ;; This function uses a non-reentrant model
 12599 ;;
 12600                           
 12601                           	psect	text46
 12602  0039EC                     __ptext46:
 12603                           	opt stack 0
 12604  0039EC                     _eepromWrite:
 12605                           	opt stack 25
 12606  0039EC                     l405:
 12607  0039EC  B2A6               	btfsc	4006,1,c	;volatile
 12608  0039EE  D7FE               	goto	l405
 12609                           
 12610                           ;eeprom.c: 45: int ien = INTCONbits.GIE;
 12611  0039F0  AEF2               	btfss	intcon,7,c	;volatile
 12612  0039F2  D004               	goto	u7480
 12613  0039F4  0100               	movlb	0	; () banked
 12614  0039F6  6B86               	clrf	??_eepromWrite& (0+255),b
 12615  0039F8  2B86               	incf	??_eepromWrite& (0+255),f,b
 12616  0039FA  D002               	goto	u7488
 12617  0039FC                     u7480:
 12618  0039FC  0100               	movlb	0	; () banked
 12619  0039FE  6B86               	clrf	??_eepromWrite& (0+255),b
 12620  003A00                     u7488:
 12621  003A00  0100               	movlb	0	; () banked
 12622  003A02  5186               	movf	??_eepromWrite& (0+255),w,b
 12623  003A04  0100               	movlb	0	; () banked
 12624  003A06  6F87               	movwf	eepromWrite@ien& (0+255),b
 12625  003A08  6B88               	clrf	(eepromWrite@ien+1)& (0+255),b
 12626                           
 12627                           ; BSR set to: 0
 12628                           ;eeprom.c: 46: (INTCONbits.GIE = 0);
 12629  003A0A  9EF2               	bcf	intcon,7,c	;volatile
 12630                           
 12631                           ; BSR set to: 0
 12632                           ;eeprom.c: 47: EEADR = address;
 12633  003A0C  C082  FFA9         	movff	eepromWrite@address,4009	;volatile
 12634                           
 12635                           ; BSR set to: 0
 12636                           ;eeprom.c: 48: EEADRH = (address>>8) & 0b11;
 12637  003A10  0100               	movlb	0	; () banked
 12638  003A12  5183               	movf	(eepromWrite@address+1)& (0+255),w,b
 12639  003A14  0B03               	andlw	3
 12640  003A16  6EAA               	movwf	4010,c	;volatile
 12641                           
 12642                           ; BSR set to: 0
 12643                           ;eeprom.c: 49: EEDATA = data;
 12644  003A18  C080  FFA8         	movff	eepromWrite@data,4008	;volatile
 12645                           
 12646                           ; BSR set to: 0
 12647                           ;eeprom.c: 50: EECON1 = 0b100;
 12648  003A1C  0E04               	movlw	4
 12649  003A1E  6EA6               	movwf	4006,c	;volatile
 12650                           
 12651                           ; BSR set to: 0
 12652                           ;eeprom.c: 52: EECON2 = 0x55;
 12653  003A20  0E55               	movlw	85
 12654  003A22  6EA7               	movwf	4007,c	;volatile
 12655                           
 12656                           ; BSR set to: 0
 12657                           ;eeprom.c: 53: EECON2 = 0xaa;
 12658  003A24  0EAA               	movlw	170
 12659  003A26  6EA7               	movwf	4007,c	;volatile
 12660                           
 12661                           ; BSR set to: 0
 12662                           ;eeprom.c: 57: EECON1 |= 0b10;
 12663  003A28  82A6               	bsf	4006,1,c	;volatile
 12664  003A2A                     l408:
 12665  003A2A  B2A6               	btfsc	4006,1,c	;volatile
 12666  003A2C  D7FE               	goto	l408
 12667                           
 12668                           ;eeprom.c: 60: EEIF = 0;
 12669  003A2E  98A1               	bcf	4001,4,c	;volatile
 12670                           
 12671                           ;eeprom.c: 62: EECON1 = 0;
 12672  003A30  0E00               	movlw	0
 12673  003A32  6EA6               	movwf	4006,c	;volatile
 12674                           
 12675                           ;eeprom.c: 63: INTCONbits.GIE = ien;
 12676  003A34  0100               	movlb	0	; () banked
 12677  003A36  B187               	btfsc	eepromWrite@ien& (0+255),0,b
 12678  003A38  D002               	bra	u7505
 12679  003A3A  9EF2               	bcf	intcon,7,c	;volatile
 12680  003A3C  D001               	bra	u7506
 12681  003A3E                     u7505:
 12682  003A3E  8EF2               	bsf	intcon,7,c	;volatile
 12683  003A40                     u7506:
 12684  003A40  0012               	return		;funcret
 12685  003A42                     __end_of_eepromWrite:
 12686                           	opt stack 0
 12687                           tblptru	equ	0xFF8
 12688                           tblptrh	equ	0xFF7
 12689                           tblptrl	equ	0xFF6
 12690                           tablat	equ	0xFF5
 12691                           prodh	equ	0xFF4
 12692                           prodl	equ	0xFF3
 12693                           intcon	equ	0xFF2
 12694                           postinc0	equ	0xFEE
 12695                           wreg	equ	0xFE8
 12696                           postdec1	equ	0xFE5
 12697                           fsr1l	equ	0xFE1
 12698                           indf2	equ	0xFDF
 12699                           postinc2	equ	0xFDE
 12700                           postdec2	equ	0xFDD
 12701                           fsr2h	equ	0xFDA
 12702                           fsr2l	equ	0xFD9
 12703                           status	equ	0xFD8
 12704                           
 12705 ;; *************** function _eepromRead *****************
 12706 ;; Defined at:
 12707 ;;		line 66 in file "eeprom.c"
 12708 ;; Parameters:    Size  Location     Type
 12709 ;;  address         4   54[COMRAM] long 
 12710 ;; Auto vars:     Size  Location     Type
 12711 ;;		None
 12712 ;; Return value:  Size  Location     Type
 12713 ;;                  2   54[COMRAM] int 
 12714 ;; Registers used:
 12715 ;;		wreg, status,2, status,0
 12716 ;; Tracked objects:
 12717 ;;		On entry : 0/0
 12718 ;;		On exit  : 0/0
 12719 ;;		Unchanged: 0/0
 12720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12721 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12724 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12725 ;;Total ram usage:        4 bytes
 12726 ;; Hardware stack levels used:    1
 12727 ;; Hardware stack levels required when called:    3
 12728 ;; This function calls:
 12729 ;;		Nothing
 12730 ;; This function is called by:
 12731 ;;		_debug
 12732 ;;		_readPastRun
 12733 ;;		_saveNewRun
 12734 ;; This function uses a non-reentrant model
 12735 ;;
 12736                           
 12737                           	psect	text47
 12738  003DDA                     __ptext47:
 12739                           	opt stack 0
 12740  003DDA                     _eepromRead:
 12741                           	opt stack 25
 12742                           
 12743                           ;eeprom.c: 67: EEADR = address;
 12744                           
 12745                           ;incstack = 0
 12746  003DDA  C037  FFA9         	movff	eepromRead@address,4009	;volatile
 12747                           
 12748                           ;eeprom.c: 68: EEADRH = (address>>8) & 0b11;
 12749  003DDE  5038               	movf	eepromRead@address+1,w,c
 12750  003DE0  0B03               	andlw	3
 12751  003DE2  6EAA               	movwf	4010,c	;volatile
 12752                           
 12753                           ;eeprom.c: 69: EECON1 = 0;
 12754  003DE4  0E00               	movlw	0
 12755  003DE6  6EA6               	movwf	4006,c	;volatile
 12756                           
 12757                           ;eeprom.c: 70: EECON1 = 1;
 12758  003DE8  0E01               	movlw	1
 12759  003DEA  6EA6               	movwf	4006,c	;volatile
 12760                           
 12761                           ;eeprom.c: 71: return EEDATA;
 12762  003DEC  CFA8 F037          	movff	4008,?_eepromRead	;volatile
 12763  003DF0  6A38               	clrf	?_eepromRead+1,c
 12764  003DF2  0012               	return	
 12765  003DF4                     __end_of_eepromRead:
 12766                           	opt stack 0
 12767                           tblptru	equ	0xFF8
 12768                           tblptrh	equ	0xFF7
 12769                           tblptrl	equ	0xFF6
 12770                           tablat	equ	0xFF5
 12771                           prodh	equ	0xFF4
 12772                           prodl	equ	0xFF3
 12773                           intcon	equ	0xFF2
 12774                           postinc0	equ	0xFEE
 12775                           wreg	equ	0xFE8
 12776                           postdec1	equ	0xFE5
 12777                           fsr1l	equ	0xFE1
 12778                           indf2	equ	0xFDF
 12779                           postinc2	equ	0xFDE
 12780                           postdec2	equ	0xFDD
 12781                           fsr2h	equ	0xFDA
 12782                           fsr2l	equ	0xFD9
 12783                           status	equ	0xFD8
 12784                           
 12785 ;; *************** function ___wmul *****************
 12786 ;; Defined at:
 12787 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 12788 ;; Parameters:    Size  Location     Type
 12789 ;;  multiplier      2   48[COMRAM] unsigned int 
 12790 ;;  multiplicand    2   50[COMRAM] unsigned int 
 12791 ;; Auto vars:     Size  Location     Type
 12792 ;;  product         2   52[COMRAM] unsigned int 
 12793 ;; Return value:  Size  Location     Type
 12794 ;;                  2   48[COMRAM] unsigned int 
 12795 ;; Registers used:
 12796 ;;		wreg, status,2, status,0, prodl, prodh
 12797 ;; Tracked objects:
 12798 ;;		On entry : 0/0
 12799 ;;		On exit  : 0/0
 12800 ;;		Unchanged: 0/0
 12801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12802 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12803 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12805 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12806 ;;Total ram usage:        6 bytes
 12807 ;; Hardware stack levels used:    1
 12808 ;; Hardware stack levels required when called:    3
 12809 ;; This function calls:
 12810 ;;		Nothing
 12811 ;; This function is called by:
 12812 ;;		_readPastRun
 12813 ;;		_saveNewRun
 12814 ;;		_fround
 12815 ;;		_scale
 12816 ;;		_printf
 12817 ;; This function uses a non-reentrant model
 12818 ;;
 12819                           
 12820                           	psect	text48
 12821  003D0C                     __ptext48:
 12822                           	opt stack 0
 12823  003D0C                     ___wmul:
 12824                           	opt stack 24
 12825                           
 12826                           ;incstack = 0
 12827  003D0C  5031               	movf	___wmul@multiplier,w,c
 12828  003D0E  0233               	mulwf	___wmul@multiplicand,c
 12829  003D10  CFF3 F035          	movff	prodl,___wmul@product
 12830  003D14  CFF4 F036          	movff	prodh,___wmul@product+1
 12831  003D18  5031               	movf	___wmul@multiplier,w,c
 12832  003D1A  0234               	mulwf	___wmul@multiplicand+1,c
 12833  003D1C  50F3               	movf	prodl,w,c
 12834  003D1E  2636               	addwf	___wmul@product+1,f,c
 12835  003D20  5032               	movf	___wmul@multiplier+1,w,c
 12836  003D22  0233               	mulwf	___wmul@multiplicand,c
 12837  003D24  50F3               	movf	prodl,w,c
 12838  003D26  2636               	addwf	___wmul@product+1,f,c
 12839  003D28  C035  F031         	movff	___wmul@product,?___wmul
 12840  003D2C  C036  F032         	movff	___wmul@product+1,?___wmul+1
 12841  003D30  0012               	return	
 12842  003D32                     __end_of___wmul:
 12843                           	opt stack 0
 12844                           tblptru	equ	0xFF8
 12845                           tblptrh	equ	0xFF7
 12846                           tblptrl	equ	0xFF6
 12847                           tablat	equ	0xFF5
 12848                           prodh	equ	0xFF4
 12849                           prodl	equ	0xFF3
 12850                           intcon	equ	0xFF2
 12851                           postinc0	equ	0xFEE
 12852                           wreg	equ	0xFE8
 12853                           postdec1	equ	0xFE5
 12854                           fsr1l	equ	0xFE1
 12855                           indf2	equ	0xFDF
 12856                           postinc2	equ	0xFDE
 12857                           postdec2	equ	0xFDD
 12858                           fsr2h	equ	0xFDA
 12859                           fsr2l	equ	0xFD9
 12860                           status	equ	0xFD8
 12861                           
 12862 ;; *************** function _pinSetup *****************
 12863 ;; Defined at:
 12864 ;;		line 305 in file "main.c"
 12865 ;; Parameters:    Size  Location     Type
 12866 ;;		None
 12867 ;; Auto vars:     Size  Location     Type
 12868 ;;		None
 12869 ;; Return value:  Size  Location     Type
 12870 ;;                  1    wreg      void 
 12871 ;; Registers used:
 12872 ;;		wreg, status,2, status,0
 12873 ;; Tracked objects:
 12874 ;;		On entry : 0/0
 12875 ;;		On exit  : 0/0
 12876 ;;		Unchanged: 0/0
 12877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12882 ;;Total ram usage:        0 bytes
 12883 ;; Hardware stack levels used:    1
 12884 ;; Hardware stack levels required when called:    3
 12885 ;; This function calls:
 12886 ;;		Nothing
 12887 ;; This function is called by:
 12888 ;;		_debug
 12889 ;;		_main
 12890 ;; This function uses a non-reentrant model
 12891 ;;
 12892                           
 12893                           	psect	text49
 12894  003C06                     __ptext49:
 12895                           	opt stack 0
 12896  003C06                     _pinSetup:
 12897                           	opt stack 27
 12898                           
 12899                           ;main.c: 311: TRISA = 0xFF;
 12900                           
 12901                           ;incstack = 0
 12902  003C06  6892               	setf	3986,c	;volatile
 12903                           
 12904                           ;main.c: 312: TRISB = 0xFF;
 12905  003C08  6893               	setf	3987,c	;volatile
 12906                           
 12907                           ;main.c: 313: TRISC = 0b11000000;
 12908  003C0A  0EC0               	movlw	192
 12909  003C0C  6E94               	movwf	3988,c	;volatile
 12910                           
 12911                           ;main.c: 314: TRISD = 0x00;
 12912  003C0E  0E00               	movlw	0
 12913  003C10  6E95               	movwf	3989,c	;volatile
 12914                           
 12915                           ;main.c: 315: TRISE = 0x00;
 12916  003C12  0E00               	movlw	0
 12917  003C14  6E96               	movwf	3990,c	;volatile
 12918                           
 12919                           ;main.c: 317: LATA = 0x00;
 12920  003C16  0E00               	movlw	0
 12921  003C18  6E89               	movwf	3977,c	;volatile
 12922                           
 12923                           ;main.c: 318: LATB = 0x00;
 12924  003C1A  0E00               	movlw	0
 12925  003C1C  6E8A               	movwf	3978,c	;volatile
 12926                           
 12927                           ;main.c: 319: LATC = 0x00;
 12928  003C1E  0E00               	movlw	0
 12929  003C20  6E8B               	movwf	3979,c	;volatile
 12930                           
 12931                           ;main.c: 320: LATD = 0x00;
 12932  003C22  0E00               	movlw	0
 12933  003C24  6E8C               	movwf	3980,c	;volatile
 12934                           
 12935                           ;main.c: 321: LATE = 0x00;
 12936  003C26  0E00               	movlw	0
 12937  003C28  6E8D               	movwf	3981,c	;volatile
 12938                           
 12939                           ;main.c: 323: ADCON0 = 0x00;
 12940  003C2A  0E00               	movlw	0
 12941  003C2C  6EC2               	movwf	4034,c	;volatile
 12942                           
 12943                           ;main.c: 325: ADCON1 |= 0x0B;
 12944  003C2E  0E0B               	movlw	11
 12945  003C30  12C1               	iorwf	4033,f,c	;volatile
 12946                           
 12947                           ;main.c: 330: ADCON2 = 0;
 12948  003C32  0E00               	movlw	0
 12949  003C34  6EC0               	movwf	4032,c	;volatile
 12950                           
 12951                           ;main.c: 331: ADCON2 |= 0b010;
 12952  003C36  82C0               	bsf	4032,1,c	;volatile
 12953                           
 12954                           ;main.c: 332: ADCON2 |= 0b110<<3;
 12955  003C38  0E30               	movlw	48
 12956  003C3A  12C0               	iorwf	4032,f,c	;volatile
 12957                           
 12958                           ;main.c: 333: ADCON2 |= 1<<7;
 12959  003C3C  8EC0               	bsf	4032,7,c	;volatile
 12960                           
 12961                           ;main.c: 336: INT1IE = 1;
 12962  003C3E  86F0               	bsf	intcon3,3,c	;volatile
 12963                           
 12964                           ;main.c: 337: INT0IE = 1;
 12965  003C40  88F2               	bsf	intcon,4,c	;volatile
 12966                           
 12967                           ;main.c: 338: (INTCONbits.GIE = 1);
 12968  003C42  8EF2               	bsf	intcon,7,c	;volatile
 12969  003C44  0012               	return		;funcret
 12970  003C46                     __end_of_pinSetup:
 12971                           	opt stack 0
 12972                           tblptru	equ	0xFF8
 12973                           tblptrh	equ	0xFF7
 12974                           tblptrl	equ	0xFF6
 12975                           tablat	equ	0xFF5
 12976                           prodh	equ	0xFF4
 12977                           prodl	equ	0xFF3
 12978                           intcon	equ	0xFF2
 12979                           intcon3	equ	0xFF0
 12980                           postinc0	equ	0xFEE
 12981                           wreg	equ	0xFE8
 12982                           postdec1	equ	0xFE5
 12983                           fsr1l	equ	0xFE1
 12984                           indf2	equ	0xFDF
 12985                           postinc2	equ	0xFDE
 12986                           postdec2	equ	0xFDD
 12987                           fsr2h	equ	0xFDA
 12988                           fsr2l	equ	0xFD9
 12989                           status	equ	0xFD8
 12990                           
 12991 ;; *************** function _initLCD *****************
 12992 ;; Defined at:
 12993 ;;		line 15 in file "lcd.c"
 12994 ;; Parameters:    Size  Location     Type
 12995 ;;		None
 12996 ;; Auto vars:     Size  Location     Type
 12997 ;;		None
 12998 ;; Return value:  Size  Location     Type
 12999 ;;                  1    wreg      void 
 13000 ;; Registers used:
 13001 ;;		wreg, status,2, status,0, cstack
 13002 ;; Tracked objects:
 13003 ;;		On entry : 0/0
 13004 ;;		On exit  : 0/0
 13005 ;;		Unchanged: 0/0
 13006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13009 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13010 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13011 ;;Total ram usage:        1 bytes
 13012 ;; Hardware stack levels used:    1
 13013 ;; Hardware stack levels required when called:    5
 13014 ;; This function calls:
 13015 ;;		_lcdInst
 13016 ;; This function is called by:
 13017 ;;		_debug
 13018 ;;		_main
 13019 ;; This function uses a non-reentrant model
 13020 ;;
 13021                           
 13022                           	psect	text50
 13023  003BC0                     __ptext50:
 13024                           	opt stack 0
 13025  003BC0                     _initLCD:
 13026                           	opt stack 25
 13027                           
 13028                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 13029                           
 13030                           ;incstack = 0
 13031  003BC0  0E31               	movlw	49
 13032  003BC2  6E27               	movwf	??_initLCD& (0+255),c
 13033  003BC4  0EB2               	movlw	178
 13034  003BC6                     u8287:
 13035  003BC6  2EE8               	decfsz	wreg,f,c
 13036  003BC8  D7FE               	bra	u8287
 13037  003BCA  2E27               	decfsz	??_initLCD& (0+255),f,c
 13038  003BCC  D7FC               	bra	u8287
 13039  003BCE  D000               	nop2	
 13040                           
 13041                           ;lcd.c: 18: lcdInst(0b00110011);
 13042  003BD0  0E33               	movlw	51
 13043  003BD2  ECCD  F01E         	call	_lcdInst
 13044                           
 13045                           ;lcd.c: 19: lcdInst(0b00110010);
 13046  003BD6  0E32               	movlw	50
 13047  003BD8  ECCD  F01E         	call	_lcdInst
 13048                           
 13049                           ;lcd.c: 20: lcdInst(0b00101000);
 13050  003BDC  0E28               	movlw	40
 13051  003BDE  ECCD  F01E         	call	_lcdInst
 13052                           
 13053                           ;lcd.c: 21: lcdInst(0b00001111);
 13054  003BE2  0E0F               	movlw	15
 13055  003BE4  ECCD  F01E         	call	_lcdInst
 13056                           
 13057                           ;lcd.c: 22: lcdInst(0b00000110);
 13058  003BE8  0E06               	movlw	6
 13059  003BEA  ECCD  F01E         	call	_lcdInst
 13060                           
 13061                           ;lcd.c: 23: lcdInst(0b00000001);
 13062  003BEE  0E01               	movlw	1
 13063  003BF0  ECCD  F01E         	call	_lcdInst
 13064                           
 13065                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 13066  003BF4  0E31               	movlw	49
 13067  003BF6  6E27               	movwf	??_initLCD& (0+255),c
 13068  003BF8  0EB2               	movlw	178
 13069  003BFA                     u8297:
 13070  003BFA  2EE8               	decfsz	wreg,f,c
 13071  003BFC  D7FE               	bra	u8297
 13072  003BFE  2E27               	decfsz	??_initLCD& (0+255),f,c
 13073  003C00  D7FC               	bra	u8297
 13074  003C02  D000               	nop2	
 13075  003C04  0012               	return		;funcret
 13076  003C06                     __end_of_initLCD:
 13077                           	opt stack 0
 13078                           tblptru	equ	0xFF8
 13079                           tblptrh	equ	0xFF7
 13080                           tblptrl	equ	0xFF6
 13081                           tablat	equ	0xFF5
 13082                           prodh	equ	0xFF4
 13083                           prodl	equ	0xFF3
 13084                           intcon	equ	0xFF2
 13085                           intcon3	equ	0xFF0
 13086                           postinc0	equ	0xFEE
 13087                           wreg	equ	0xFE8
 13088                           postdec1	equ	0xFE5
 13089                           fsr1l	equ	0xFE1
 13090                           indf2	equ	0xFDF
 13091                           postinc2	equ	0xFDE
 13092                           postdec2	equ	0xFDD
 13093                           fsr2h	equ	0xFDA
 13094                           fsr2l	equ	0xFD9
 13095                           status	equ	0xFD8
 13096                           
 13097 ;; *************** function _lcdInst *****************
 13098 ;; Defined at:
 13099 ;;		line 27 in file "lcd.c"
 13100 ;; Parameters:    Size  Location     Type
 13101 ;;  data            1    wreg     unsigned char 
 13102 ;; Auto vars:     Size  Location     Type
 13103 ;;  data            1   37[COMRAM] unsigned char 
 13104 ;; Return value:  Size  Location     Type
 13105 ;;                  1    wreg      void 
 13106 ;; Registers used:
 13107 ;;		wreg, status,2, status,0, cstack
 13108 ;; Tracked objects:
 13109 ;;		On entry : 0/0
 13110 ;;		On exit  : 0/0
 13111 ;;		Unchanged: 0/0
 13112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13114 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13115 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13116 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13117 ;;Total ram usage:        2 bytes
 13118 ;; Hardware stack levels used:    1
 13119 ;; Hardware stack levels required when called:    4
 13120 ;; This function calls:
 13121 ;;		_lcdNibble
 13122 ;; This function is called by:
 13123 ;;		_initLCD
 13124 ;;		_lcdHome
 13125 ;;		_lcdClear
 13126 ;;		_lcdNewline
 13127 ;; This function uses a non-reentrant model
 13128 ;;
 13129                           
 13130                           	psect	text51
 13131  003D9A                     __ptext51:
 13132                           	opt stack 0
 13133  003D9A                     _lcdInst:
 13134                           	opt stack 22
 13135                           
 13136                           ;incstack = 0
 13137                           ;lcdInst@data stored from wreg
 13138  003D9A  6E26               	movwf	lcdInst@data,c
 13139                           
 13140                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 13141  003D9C  948C               	bcf	3980,2,c	;volatile
 13142                           
 13143                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 13144  003D9E  0E74               	movlw	116
 13145  003DA0                     u8307:
 13146  003DA0  2EE8               	decfsz	wreg,f,c
 13147  003DA2  D7FE               	bra	u8307
 13148  003DA4  D000               	nop2	
 13149                           
 13150                           ;lcd.c: 30: lcdNibble(data);
 13151  003DA6  5026               	movf	lcdInst@data,w,c
 13152  003DA8  EC04  F01C         	call	_lcdNibble
 13153                           
 13154                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 13155  003DAC  0E04               	movlw	4
 13156  003DAE  6E25               	movwf	??_lcdInst& (0+255),c
 13157  003DB0  0E3E               	movlw	62
 13158  003DB2                     u8317:
 13159  003DB2  2EE8               	decfsz	wreg,f,c
 13160  003DB4  D7FE               	bra	u8317
 13161  003DB6  2E25               	decfsz	??_lcdInst& (0+255),f,c
 13162  003DB8  D7FC               	bra	u8317
 13163  003DBA  0012               	return		;funcret
 13164  003DBC                     __end_of_lcdInst:
 13165                           	opt stack 0
 13166                           tblptru	equ	0xFF8
 13167                           tblptrh	equ	0xFF7
 13168                           tblptrl	equ	0xFF6
 13169                           tablat	equ	0xFF5
 13170                           prodh	equ	0xFF4
 13171                           prodl	equ	0xFF3
 13172                           intcon	equ	0xFF2
 13173                           intcon3	equ	0xFF0
 13174                           postinc0	equ	0xFEE
 13175                           wreg	equ	0xFE8
 13176                           postdec1	equ	0xFE5
 13177                           fsr1l	equ	0xFE1
 13178                           indf2	equ	0xFDF
 13179                           postinc2	equ	0xFDE
 13180                           postdec2	equ	0xFDD
 13181                           fsr2h	equ	0xFDA
 13182                           fsr2l	equ	0xFD9
 13183                           status	equ	0xFD8
 13184                           
 13185 ;; *************** function _lcdNibble *****************
 13186 ;; Defined at:
 13187 ;;		line 46 in file "lcd.c"
 13188 ;; Parameters:    Size  Location     Type
 13189 ;;  data            1    wreg     unsigned char 
 13190 ;; Auto vars:     Size  Location     Type
 13191 ;;  data            1   35[COMRAM] unsigned char 
 13192 ;;  temp            1   34[COMRAM] unsigned char 
 13193 ;; Return value:  Size  Location     Type
 13194 ;;                  1    wreg      void 
 13195 ;; Registers used:
 13196 ;;		wreg, status,2, status,0
 13197 ;; Tracked objects:
 13198 ;;		On entry : 0/0
 13199 ;;		On exit  : 0/0
 13200 ;;		Unchanged: 0/0
 13201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13203 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13205 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13206 ;;Total ram usage:        2 bytes
 13207 ;; Hardware stack levels used:    1
 13208 ;; Hardware stack levels required when called:    3
 13209 ;; This function calls:
 13210 ;;		Nothing
 13211 ;; This function is called by:
 13212 ;;		_lcdInst
 13213 ;;		_putch
 13214 ;; This function uses a non-reentrant model
 13215 ;;
 13216                           
 13217                           	psect	text52
 13218  003808                     __ptext52:
 13219                           	opt stack 0
 13220  003808                     _lcdNibble:
 13221                           	opt stack 24
 13222                           
 13223                           ;incstack = 0
 13224                           ;lcdNibble@data stored from wreg
 13225  003808  6E24               	movwf	lcdNibble@data,c
 13226                           
 13227                           ;lcd.c: 48: char temp = data & 0xF0;
 13228  00380A  5024               	movf	lcdNibble@data,w,c
 13229  00380C  0BF0               	andlw	240
 13230  00380E  6E23               	movwf	lcdNibble@temp,c
 13231                           
 13232                           ;lcd.c: 49: LATD = LATD & 0x0F;
 13233  003810  508C               	movf	3980,w,c	;volatile
 13234  003812  0B0F               	andlw	15
 13235  003814  6E8C               	movwf	3980,c	;volatile
 13236                           
 13237                           ;lcd.c: 50: LATD = temp | LATD;
 13238  003816  5023               	movf	lcdNibble@temp,w,c
 13239  003818  108C               	iorwf	3980,w,c	;volatile
 13240  00381A  6E8C               	movwf	3980,c	;volatile
 13241                           
 13242                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 13243  00381C  968C               	bcf	3980,3,c	;volatile
 13244                           
 13245                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 13246  00381E  0ED6               	movlw	214
 13247  003820                     u8327:
 13248  003820  D000               	nop2	
 13249  003822  D000               	nop2	
 13250  003824  2EE8               	decfsz	wreg,f,c
 13251  003826  D7FC               	bra	u8327
 13252  003828  D000               	nop2	
 13253                           
 13254                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 13255  00382A  868C               	bsf	3980,3,c	;volatile
 13256                           
 13257                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 13258  00382C  0ED6               	movlw	214
 13259  00382E                     u8337:
 13260  00382E  D000               	nop2	
 13261  003830  D000               	nop2	
 13262  003832  2EE8               	decfsz	wreg,f,c
 13263  003834  D7FC               	bra	u8337
 13264  003836  D000               	nop2	
 13265                           
 13266                           ;lcd.c: 58: data = data << 4;
 13267  003838  3824               	swapf	lcdNibble@data,w,c
 13268  00383A  0BF0               	andlw	240
 13269  00383C  6E24               	movwf	lcdNibble@data,c
 13270                           
 13271                           ;lcd.c: 60: temp = data & 0xF0;
 13272  00383E  5024               	movf	lcdNibble@data,w,c
 13273  003840  0BF0               	andlw	240
 13274  003842  6E23               	movwf	lcdNibble@temp,c
 13275                           
 13276                           ;lcd.c: 61: LATD = LATD & 0x0F;
 13277  003844  508C               	movf	3980,w,c	;volatile
 13278  003846  0B0F               	andlw	15
 13279  003848  6E8C               	movwf	3980,c	;volatile
 13280                           
 13281                           ;lcd.c: 62: LATD = temp | LATD;
 13282  00384A  5023               	movf	lcdNibble@temp,w,c
 13283  00384C  108C               	iorwf	3980,w,c	;volatile
 13284  00384E  6E8C               	movwf	3980,c	;volatile
 13285                           
 13286                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 13287  003850  968C               	bcf	3980,3,c	;volatile
 13288                           
 13289                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 13290  003852  0ED6               	movlw	214
 13291  003854                     u8347:
 13292  003854  D000               	nop2	
 13293  003856  D000               	nop2	
 13294  003858  2EE8               	decfsz	wreg,f,c
 13295  00385A  D7FC               	bra	u8347
 13296  00385C  D000               	nop2	
 13297                           
 13298                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 13299  00385E  868C               	bsf	3980,3,c	;volatile
 13300                           
 13301                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 13302  003860  0ED6               	movlw	214
 13303  003862                     u8357:
 13304  003862  D000               	nop2	
 13305  003864  D000               	nop2	
 13306  003866  2EE8               	decfsz	wreg,f,c
 13307  003868  D7FC               	bra	u8357
 13308  00386A  D000               	nop2	
 13309  00386C  0012               	return		;funcret
 13310  00386E                     __end_of_lcdNibble:
 13311                           	opt stack 0
 13312                           tblptru	equ	0xFF8
 13313                           tblptrh	equ	0xFF7
 13314                           tblptrl	equ	0xFF6
 13315                           tablat	equ	0xFF5
 13316                           prodh	equ	0xFF4
 13317                           prodl	equ	0xFF3
 13318                           intcon	equ	0xFF2
 13319                           intcon3	equ	0xFF0
 13320                           postinc0	equ	0xFEE
 13321                           wreg	equ	0xFE8
 13322                           postdec1	equ	0xFE5
 13323                           fsr1l	equ	0xFE1
 13324                           indf2	equ	0xFDF
 13325                           postinc2	equ	0xFDE
 13326                           postdec2	equ	0xFDD
 13327                           fsr2h	equ	0xFDA
 13328                           fsr2l	equ	0xFD9
 13329                           status	equ	0xFD8
 13330                           
 13331 ;; *************** function ___lwmod *****************
 13332 ;; Defined at:
 13333 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 13334 ;; Parameters:    Size  Location     Type
 13335 ;;  dividend        2    0[BANK0 ] unsigned int 
 13336 ;;  divisor         2    2[BANK0 ] unsigned int 
 13337 ;; Auto vars:     Size  Location     Type
 13338 ;;  counter         1    4[BANK0 ] unsigned char 
 13339 ;; Return value:  Size  Location     Type
 13340 ;;                  2    0[BANK0 ] unsigned int 
 13341 ;; Registers used:
 13342 ;;		wreg, status,2, status,0
 13343 ;; Tracked objects:
 13344 ;;		On entry : 0/0
 13345 ;;		On exit  : 0/0
 13346 ;;		Unchanged: 0/0
 13347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13348 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13349 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13351 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13352 ;;Total ram usage:        5 bytes
 13353 ;; Hardware stack levels used:    1
 13354 ;; Hardware stack levels required when called:    3
 13355 ;; This function calls:
 13356 ;;		Nothing
 13357 ;; This function is called by:
 13358 ;;		_debug
 13359 ;; This function uses a non-reentrant model
 13360 ;;
 13361                           
 13362                           	psect	text53
 13363  0038D2                     __ptext53:
 13364                           	opt stack 0
 13365  0038D2                     ___lwmod:
 13366                           	opt stack 26
 13367                           
 13368                           ;incstack = 0
 13369  0038D2  0100               	movlb	0	; () banked
 13370  0038D4  5182               	movf	___lwmod@divisor& (0+255),w,b
 13371  0038D6  0100               	movlb	0	; () banked
 13372  0038D8  1183               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 13373  0038DA  B4D8               	btfsc	status,2,c
 13374  0038DC  D026               	goto	l1321
 13375                           
 13376                           ; BSR set to: 0
 13377  0038DE  0E01               	movlw	1
 13378  0038E0  0100               	movlb	0	; () banked
 13379  0038E2  6F84               	movwf	___lwmod@counter& (0+255),b
 13380  0038E4  D006               	goto	l7248
 13381  0038E6                     l7246:
 13382                           
 13383                           ; BSR set to: 0
 13384  0038E6  0100               	movlb	0	; () banked
 13385  0038E8  90D8               	bcf	status,0,c
 13386  0038EA  3782               	rlcf	___lwmod@divisor& (0+255),f,b
 13387  0038EC  3783               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 13388  0038EE  0100               	movlb	0	; () banked
 13389  0038F0  2B84               	incf	___lwmod@counter& (0+255),f,b
 13390  0038F2                     l7248:
 13391                           
 13392                           ; BSR set to: 0
 13393  0038F2  0100               	movlb	0	; () banked
 13394  0038F4  AF83               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 13395  0038F6  D7F7               	goto	l7246
 13396  0038F8                     l7250:
 13397                           
 13398                           ; BSR set to: 0
 13399  0038F8  0100               	movlb	0	; () banked
 13400  0038FA  5182               	movf	___lwmod@divisor& (0+255),w,b
 13401  0038FC  0100               	movlb	0	; () banked
 13402  0038FE  5D80               	subwf	___lwmod@dividend& (0+255),w,b
 13403  003900  0100               	movlb	0	; () banked
 13404  003902  5183               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13405  003904  0100               	movlb	0	; () banked
 13406  003906  5981               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 13407  003908  A0D8               	btfss	status,0,c
 13408  00390A  D008               	goto	l7254
 13409                           
 13410                           ; BSR set to: 0
 13411  00390C  0100               	movlb	0	; () banked
 13412  00390E  5182               	movf	___lwmod@divisor& (0+255),w,b
 13413  003910  0100               	movlb	0	; () banked
 13414  003912  5F80               	subwf	___lwmod@dividend& (0+255),f,b
 13415  003914  0100               	movlb	0	; () banked
 13416  003916  5183               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13417  003918  0100               	movlb	0	; () banked
 13418  00391A  5B81               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 13419  00391C                     l7254:
 13420                           
 13421                           ; BSR set to: 0
 13422  00391C  0100               	movlb	0	; () banked
 13423  00391E  90D8               	bcf	status,0,c
 13424  003920  3383               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 13425  003922  3382               	rrcf	___lwmod@divisor& (0+255),f,b
 13426                           
 13427                           ; BSR set to: 0
 13428  003924  0100               	movlb	0	; () banked
 13429  003926  2F84               	decfsz	___lwmod@counter& (0+255),f,b
 13430  003928  D7E7               	goto	l7250
 13431  00392A                     l1321:
 13432                           
 13433                           ; BSR set to: 0
 13434  00392A  C080  F080         	movff	___lwmod@dividend,?___lwmod
 13435  00392E  C081  F081         	movff	___lwmod@dividend+1,?___lwmod+1
 13436                           
 13437                           ; BSR set to: 0
 13438  003932  0012               	return		;funcret
 13439  003934                     __end_of___lwmod:
 13440                           	opt stack 0
 13441                           tblptru	equ	0xFF8
 13442                           tblptrh	equ	0xFF7
 13443                           tblptrl	equ	0xFF6
 13444                           tablat	equ	0xFF5
 13445                           prodh	equ	0xFF4
 13446                           prodl	equ	0xFF3
 13447                           intcon	equ	0xFF2
 13448                           intcon3	equ	0xFF0
 13449                           postinc0	equ	0xFEE
 13450                           wreg	equ	0xFE8
 13451                           postdec1	equ	0xFE5
 13452                           fsr1l	equ	0xFE1
 13453                           indf2	equ	0xFDF
 13454                           postinc2	equ	0xFDE
 13455                           postdec2	equ	0xFDD
 13456                           fsr2h	equ	0xFDA
 13457                           fsr2l	equ	0xFD9
 13458                           status	equ	0xFD8
 13459                           
 13460 ;; *************** function ___almod *****************
 13461 ;; Defined at:
 13462 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\almod.c"
 13463 ;; Parameters:    Size  Location     Type
 13464 ;;  dividend        4   48[COMRAM] long 
 13465 ;;  divisor         4   52[COMRAM] long 
 13466 ;; Auto vars:     Size  Location     Type
 13467 ;;  sign            1   57[COMRAM] unsigned char 
 13468 ;;  counter         1   56[COMRAM] unsigned char 
 13469 ;; Return value:  Size  Location     Type
 13470 ;;                  4   48[COMRAM] long 
 13471 ;; Registers used:
 13472 ;;		wreg, status,2, status,0
 13473 ;; Tracked objects:
 13474 ;;		On entry : 0/0
 13475 ;;		On exit  : 0/0
 13476 ;;		Unchanged: 0/0
 13477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13478 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13479 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13481 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13482 ;;Total ram usage:       10 bytes
 13483 ;; Hardware stack levels used:    1
 13484 ;; Hardware stack levels required when called:    3
 13485 ;; This function calls:
 13486 ;;		Nothing
 13487 ;; This function is called by:
 13488 ;;		_main
 13489 ;; This function uses a non-reentrant model
 13490 ;;
 13491                           
 13492                           	psect	text54
 13493  003288                     __ptext54:
 13494                           	opt stack 0
 13495  003288                     ___almod:
 13496                           	opt stack 27
 13497                           
 13498                           ; BSR set to: 0
 13499                           ;incstack = 0
 13500  003288  0E00               	movlw	0
 13501  00328A  6E3A               	movwf	___almod@sign,c
 13502  00328C  AE34               	btfss	___almod@dividend+3,7,c
 13503  00328E  D00A               	goto	l5558
 13504  003290  1E34               	comf	___almod@dividend+3,f,c
 13505  003292  1E33               	comf	___almod@dividend+2,f,c
 13506  003294  1E32               	comf	___almod@dividend+1,f,c
 13507  003296  6C31               	negf	___almod@dividend,c
 13508  003298  0E00               	movlw	0
 13509  00329A  2232               	addwfc	___almod@dividend+1,f,c
 13510  00329C  2233               	addwfc	___almod@dividend+2,f,c
 13511  00329E  2234               	addwfc	___almod@dividend+3,f,c
 13512  0032A0  0E01               	movlw	1
 13513  0032A2  6E3A               	movwf	___almod@sign,c
 13514  0032A4                     l5558:
 13515  0032A4  AE38               	btfss	___almod@divisor+3,7,c
 13516  0032A6  D008               	goto	l5562
 13517  0032A8  1E38               	comf	___almod@divisor+3,f,c
 13518  0032AA  1E37               	comf	___almod@divisor+2,f,c
 13519  0032AC  1E36               	comf	___almod@divisor+1,f,c
 13520  0032AE  6C35               	negf	___almod@divisor,c
 13521  0032B0  0E00               	movlw	0
 13522  0032B2  2236               	addwfc	___almod@divisor+1,f,c
 13523  0032B4  2237               	addwfc	___almod@divisor+2,f,c
 13524  0032B6  2238               	addwfc	___almod@divisor+3,f,c
 13525  0032B8                     l5562:
 13526  0032B8  5035               	movf	___almod@divisor,w,c
 13527  0032BA  1036               	iorwf	___almod@divisor+1,w,c
 13528  0032BC  1037               	iorwf	___almod@divisor+2,w,c
 13529  0032BE  1038               	iorwf	___almod@divisor+3,w,c
 13530  0032C0  B4D8               	btfsc	status,2,c
 13531  0032C2  D024               	goto	l5578
 13532  0032C4  0E01               	movlw	1
 13533  0032C6  6E39               	movwf	___almod@counter,c
 13534  0032C8  D006               	goto	l5568
 13535  0032CA                     l5566:
 13536  0032CA  90D8               	bcf	status,0,c
 13537  0032CC  3635               	rlcf	___almod@divisor,f,c
 13538  0032CE  3636               	rlcf	___almod@divisor+1,f,c
 13539  0032D0  3637               	rlcf	___almod@divisor+2,f,c
 13540  0032D2  3638               	rlcf	___almod@divisor+3,f,c
 13541  0032D4  2A39               	incf	___almod@counter,f,c
 13542  0032D6                     l5568:
 13543  0032D6  AE38               	btfss	___almod@divisor+3,7,c
 13544  0032D8  D7F8               	goto	l5566
 13545  0032DA                     l5570:
 13546  0032DA  5035               	movf	___almod@divisor,w,c
 13547  0032DC  5C31               	subwf	___almod@dividend,w,c
 13548  0032DE  5036               	movf	___almod@divisor+1,w,c
 13549  0032E0  5832               	subwfb	___almod@dividend+1,w,c
 13550  0032E2  5037               	movf	___almod@divisor+2,w,c
 13551  0032E4  5833               	subwfb	___almod@dividend+2,w,c
 13552  0032E6  5038               	movf	___almod@divisor+3,w,c
 13553  0032E8  5834               	subwfb	___almod@dividend+3,w,c
 13554  0032EA  A0D8               	btfss	status,0,c
 13555  0032EC  D008               	goto	l5574
 13556  0032EE  5035               	movf	___almod@divisor,w,c
 13557  0032F0  5E31               	subwf	___almod@dividend,f,c
 13558  0032F2  5036               	movf	___almod@divisor+1,w,c
 13559  0032F4  5A32               	subwfb	___almod@dividend+1,f,c
 13560  0032F6  5037               	movf	___almod@divisor+2,w,c
 13561  0032F8  5A33               	subwfb	___almod@dividend+2,f,c
 13562  0032FA  5038               	movf	___almod@divisor+3,w,c
 13563  0032FC  5A34               	subwfb	___almod@dividend+3,f,c
 13564  0032FE                     l5574:
 13565  0032FE  90D8               	bcf	status,0,c
 13566  003300  3238               	rrcf	___almod@divisor+3,f,c
 13567  003302  3237               	rrcf	___almod@divisor+2,f,c
 13568  003304  3236               	rrcf	___almod@divisor+1,f,c
 13569  003306  3235               	rrcf	___almod@divisor,f,c
 13570  003308  2E39               	decfsz	___almod@counter,f,c
 13571  00330A  D7E7               	goto	l5570
 13572  00330C                     l5578:
 13573  00330C  503A               	movf	___almod@sign,w,c
 13574  00330E  B4D8               	btfsc	status,2,c
 13575  003310  D008               	goto	l5582
 13576  003312  1E34               	comf	___almod@dividend+3,f,c
 13577  003314  1E33               	comf	___almod@dividend+2,f,c
 13578  003316  1E32               	comf	___almod@dividend+1,f,c
 13579  003318  6C31               	negf	___almod@dividend,c
 13580  00331A  0E00               	movlw	0
 13581  00331C  2232               	addwfc	___almod@dividend+1,f,c
 13582  00331E  2233               	addwfc	___almod@dividend+2,f,c
 13583  003320  2234               	addwfc	___almod@dividend+3,f,c
 13584  003322                     l5582:
 13585  003322  C031  F031         	movff	___almod@dividend,?___almod
 13586  003326  C032  F032         	movff	___almod@dividend+1,?___almod+1
 13587  00332A  C033  F033         	movff	___almod@dividend+2,?___almod+2
 13588  00332E  C034  F034         	movff	___almod@dividend+3,?___almod+3
 13589  003332  0012               	return	
 13590  003334                     __end_of___almod:
 13591                           	opt stack 0
 13592                           tblptru	equ	0xFF8
 13593                           tblptrh	equ	0xFF7
 13594                           tblptrl	equ	0xFF6
 13595                           tablat	equ	0xFF5
 13596                           prodh	equ	0xFF4
 13597                           prodl	equ	0xFF3
 13598                           intcon	equ	0xFF2
 13599                           intcon3	equ	0xFF0
 13600                           postinc0	equ	0xFEE
 13601                           wreg	equ	0xFE8
 13602                           postdec1	equ	0xFE5
 13603                           fsr1l	equ	0xFE1
 13604                           indf2	equ	0xFDF
 13605                           postinc2	equ	0xFDE
 13606                           postdec2	equ	0xFDD
 13607                           fsr2h	equ	0xFDA
 13608                           fsr2l	equ	0xFD9
 13609                           status	equ	0xFD8
 13610                           
 13611 ;; *************** function ___aldiv *****************
 13612 ;; Defined at:
 13613 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
 13614 ;; Parameters:    Size  Location     Type
 13615 ;;  dividend        4   34[COMRAM] long 
 13616 ;;  divisor         4   38[COMRAM] long 
 13617 ;; Auto vars:     Size  Location     Type
 13618 ;;  quotient        4   44[COMRAM] long 
 13619 ;;  sign            1   43[COMRAM] unsigned char 
 13620 ;;  counter         1   42[COMRAM] unsigned char 
 13621 ;; Return value:  Size  Location     Type
 13622 ;;                  4   34[COMRAM] long 
 13623 ;; Registers used:
 13624 ;;		wreg, status,2, status,0
 13625 ;; Tracked objects:
 13626 ;;		On entry : 0/0
 13627 ;;		On exit  : 0/0
 13628 ;;		Unchanged: 0/0
 13629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13630 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13631 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13633 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13634 ;;Total ram usage:       14 bytes
 13635 ;; Hardware stack levels used:    1
 13636 ;; Hardware stack levels required when called:    3
 13637 ;; This function calls:
 13638 ;;		Nothing
 13639 ;; This function is called by:
 13640 ;;		_main
 13641 ;; This function uses a non-reentrant model
 13642 ;;
 13643                           
 13644                           	psect	text55
 13645  002E20                     __ptext55:
 13646                           	opt stack 0
 13647  002E20                     ___aldiv:
 13648                           	opt stack 27
 13649                           
 13650                           ;incstack = 0
 13651  002E20  0E00               	movlw	0
 13652  002E22  6E2C               	movwf	___aldiv@sign,c
 13653  002E24  AE2A               	btfss	___aldiv@divisor+3,7,c
 13654  002E26  D00A               	goto	l5514
 13655  002E28  1E2A               	comf	___aldiv@divisor+3,f,c
 13656  002E2A  1E29               	comf	___aldiv@divisor+2,f,c
 13657  002E2C  1E28               	comf	___aldiv@divisor+1,f,c
 13658  002E2E  6C27               	negf	___aldiv@divisor,c
 13659  002E30  0E00               	movlw	0
 13660  002E32  2228               	addwfc	___aldiv@divisor+1,f,c
 13661  002E34  2229               	addwfc	___aldiv@divisor+2,f,c
 13662  002E36  222A               	addwfc	___aldiv@divisor+3,f,c
 13663  002E38  0E01               	movlw	1
 13664  002E3A  6E2C               	movwf	___aldiv@sign,c
 13665  002E3C                     l5514:
 13666  002E3C  AE26               	btfss	___aldiv@dividend+3,7,c
 13667  002E3E  D00A               	goto	l5520
 13668  002E40  1E26               	comf	___aldiv@dividend+3,f,c
 13669  002E42  1E25               	comf	___aldiv@dividend+2,f,c
 13670  002E44  1E24               	comf	___aldiv@dividend+1,f,c
 13671  002E46  6C23               	negf	___aldiv@dividend,c
 13672  002E48  0E00               	movlw	0
 13673  002E4A  2224               	addwfc	___aldiv@dividend+1,f,c
 13674  002E4C  2225               	addwfc	___aldiv@dividend+2,f,c
 13675  002E4E  2226               	addwfc	___aldiv@dividend+3,f,c
 13676  002E50  0E01               	movlw	1
 13677  002E52  1A2C               	xorwf	___aldiv@sign,f,c
 13678  002E54                     l5520:
 13679  002E54  0E00               	movlw	0
 13680  002E56  6E2D               	movwf	___aldiv@quotient,c
 13681  002E58  0E00               	movlw	0
 13682  002E5A  6E2E               	movwf	___aldiv@quotient+1,c
 13683  002E5C  0E00               	movlw	0
 13684  002E5E  6E2F               	movwf	___aldiv@quotient+2,c
 13685  002E60  0E00               	movlw	0
 13686  002E62  6E30               	movwf	___aldiv@quotient+3,c
 13687  002E64  5027               	movf	___aldiv@divisor,w,c
 13688  002E66  1028               	iorwf	___aldiv@divisor+1,w,c
 13689  002E68  1029               	iorwf	___aldiv@divisor+2,w,c
 13690  002E6A  102A               	iorwf	___aldiv@divisor+3,w,c
 13691  002E6C  B4D8               	btfsc	status,2,c
 13692  002E6E  D02A               	goto	l5542
 13693  002E70  0E01               	movlw	1
 13694  002E72  6E2B               	movwf	___aldiv@counter,c
 13695  002E74  D006               	goto	l5528
 13696  002E76                     l5526:
 13697  002E76  90D8               	bcf	status,0,c
 13698  002E78  3627               	rlcf	___aldiv@divisor,f,c
 13699  002E7A  3628               	rlcf	___aldiv@divisor+1,f,c
 13700  002E7C  3629               	rlcf	___aldiv@divisor+2,f,c
 13701  002E7E  362A               	rlcf	___aldiv@divisor+3,f,c
 13702  002E80  2A2B               	incf	___aldiv@counter,f,c
 13703  002E82                     l5528:
 13704  002E82  AE2A               	btfss	___aldiv@divisor+3,7,c
 13705  002E84  D7F8               	goto	l5526
 13706  002E86                     l5530:
 13707  002E86  90D8               	bcf	status,0,c
 13708  002E88  362D               	rlcf	___aldiv@quotient,f,c
 13709  002E8A  362E               	rlcf	___aldiv@quotient+1,f,c
 13710  002E8C  362F               	rlcf	___aldiv@quotient+2,f,c
 13711  002E8E  3630               	rlcf	___aldiv@quotient+3,f,c
 13712  002E90  5027               	movf	___aldiv@divisor,w,c
 13713  002E92  5C23               	subwf	___aldiv@dividend,w,c
 13714  002E94  5028               	movf	___aldiv@divisor+1,w,c
 13715  002E96  5824               	subwfb	___aldiv@dividend+1,w,c
 13716  002E98  5029               	movf	___aldiv@divisor+2,w,c
 13717  002E9A  5825               	subwfb	___aldiv@dividend+2,w,c
 13718  002E9C  502A               	movf	___aldiv@divisor+3,w,c
 13719  002E9E  5826               	subwfb	___aldiv@dividend+3,w,c
 13720  002EA0  A0D8               	btfss	status,0,c
 13721  002EA2  D009               	goto	l5538
 13722  002EA4  5027               	movf	___aldiv@divisor,w,c
 13723  002EA6  5E23               	subwf	___aldiv@dividend,f,c
 13724  002EA8  5028               	movf	___aldiv@divisor+1,w,c
 13725  002EAA  5A24               	subwfb	___aldiv@dividend+1,f,c
 13726  002EAC  5029               	movf	___aldiv@divisor+2,w,c
 13727  002EAE  5A25               	subwfb	___aldiv@dividend+2,f,c
 13728  002EB0  502A               	movf	___aldiv@divisor+3,w,c
 13729  002EB2  5A26               	subwfb	___aldiv@dividend+3,f,c
 13730  002EB4  802D               	bsf	___aldiv@quotient,0,c
 13731  002EB6                     l5538:
 13732  002EB6  90D8               	bcf	status,0,c
 13733  002EB8  322A               	rrcf	___aldiv@divisor+3,f,c
 13734  002EBA  3229               	rrcf	___aldiv@divisor+2,f,c
 13735  002EBC  3228               	rrcf	___aldiv@divisor+1,f,c
 13736  002EBE  3227               	rrcf	___aldiv@divisor,f,c
 13737  002EC0  2E2B               	decfsz	___aldiv@counter,f,c
 13738  002EC2  D7E1               	goto	l5530
 13739  002EC4                     l5542:
 13740  002EC4  502C               	movf	___aldiv@sign,w,c
 13741  002EC6  B4D8               	btfsc	status,2,c
 13742  002EC8  D008               	goto	l5546
 13743  002ECA  1E30               	comf	___aldiv@quotient+3,f,c
 13744  002ECC  1E2F               	comf	___aldiv@quotient+2,f,c
 13745  002ECE  1E2E               	comf	___aldiv@quotient+1,f,c
 13746  002ED0  6C2D               	negf	___aldiv@quotient,c
 13747  002ED2  0E00               	movlw	0
 13748  002ED4  222E               	addwfc	___aldiv@quotient+1,f,c
 13749  002ED6  222F               	addwfc	___aldiv@quotient+2,f,c
 13750  002ED8  2230               	addwfc	___aldiv@quotient+3,f,c
 13751  002EDA                     l5546:
 13752  002EDA  C02D  F023         	movff	___aldiv@quotient,?___aldiv
 13753  002EDE  C02E  F024         	movff	___aldiv@quotient+1,?___aldiv+1
 13754  002EE2  C02F  F025         	movff	___aldiv@quotient+2,?___aldiv+2
 13755  002EE6  C030  F026         	movff	___aldiv@quotient+3,?___aldiv+3
 13756  002EEA  0012               	return	
 13757  002EEC                     __end_of___aldiv:
 13758                           	opt stack 0
 13759                           tblptru	equ	0xFF8
 13760                           tblptrh	equ	0xFF7
 13761                           tblptrl	equ	0xFF6
 13762                           tablat	equ	0xFF5
 13763                           prodh	equ	0xFF4
 13764                           prodl	equ	0xFF3
 13765                           intcon	equ	0xFF2
 13766                           intcon3	equ	0xFF0
 13767                           postinc0	equ	0xFEE
 13768                           wreg	equ	0xFE8
 13769                           postdec1	equ	0xFE5
 13770                           fsr1l	equ	0xFE1
 13771                           indf2	equ	0xFDF
 13772                           postinc2	equ	0xFDE
 13773                           postdec2	equ	0xFDD
 13774                           fsr2h	equ	0xFDA
 13775                           fsr2l	equ	0xFD9
 13776                           status	equ	0xFD8
 13777                           
 13778 ;; *************** function _service *****************
 13779 ;; Defined at:
 13780 ;;		line 345 in file "main.c"
 13781 ;; Parameters:    Size  Location     Type
 13782 ;;		None
 13783 ;; Auto vars:     Size  Location     Type
 13784 ;;  key             1   33[COMRAM] unsigned char 
 13785 ;; Return value:  Size  Location     Type
 13786 ;;                  1    wreg      void 
 13787 ;; Registers used:
 13788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13789 ;; Tracked objects:
 13790 ;;		On entry : 0/0
 13791 ;;		On exit  : 0/0
 13792 ;;		Unchanged: 0/0
 13793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13795 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13796 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13797 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13798 ;;Total ram usage:       15 bytes
 13799 ;; Hardware stack levels used:    1
 13800 ;; Hardware stack levels required when called:    2
 13801 ;; This function calls:
 13802 ;;		_servoInterruptService
 13803 ;;		i2_startTimer
 13804 ;; This function is called by:
 13805 ;;		Interrupt level 2
 13806 ;; This function uses a non-reentrant model
 13807 ;;
 13808                           
 13809                           	psect	intcode
 13810  000008                     __pintcode:
 13811                           	opt stack 0
 13812  000008                     _service:
 13813                           	opt stack 20
 13814                           
 13815                           ;incstack = 0
 13816  000008  825D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13817  00000A  ED56  F015         	call	int_func,f	;refresh shadow registers
 13818                           tblptru	equ	0xFF8
 13819                           tblptrh	equ	0xFF7
 13820                           tblptrl	equ	0xFF6
 13821                           tablat	equ	0xFF5
 13822                           prodh	equ	0xFF4
 13823                           prodl	equ	0xFF3
 13824                           intcon	equ	0xFF2
 13825                           intcon3	equ	0xFF0
 13826                           postinc0	equ	0xFEE
 13827                           wreg	equ	0xFE8
 13828                           postdec1	equ	0xFE5
 13829                           fsr1l	equ	0xFE1
 13830                           indf2	equ	0xFDF
 13831                           postinc2	equ	0xFDE
 13832                           postdec2	equ	0xFDD
 13833                           fsr2h	equ	0xFDA
 13834                           fsr2l	equ	0xFD9
 13835                           status	equ	0xFD8
 13836                           
 13837                           	psect	intcode_body
 13838  002AAC                     __pintcode_body:
 13839                           	opt stack 20
 13840  002AAC                     int_func:
 13841                           	opt stack 20
 13842  002AAC  0006               	pop		; remove dummy address from shadow register refresh
 13843  002AAE  CFFA F014          	movff	pclath,??_service
 13844  002AB2  CFFB F015          	movff	pclatu,??_service+1
 13845  002AB6  CFE9 F016          	movff	fsr0l,??_service+2
 13846  002ABA  CFEA F017          	movff	fsr0h,??_service+3
 13847  002ABE  CFE1 F018          	movff	fsr1l,??_service+4
 13848  002AC2  CFE2 F019          	movff	fsr1h,??_service+5
 13849  002AC6  CFD9 F01A          	movff	fsr2l,??_service+6
 13850  002ACA  CFDA F01B          	movff	fsr2h,??_service+7
 13851  002ACE  CFF3 F01C          	movff	prodl,??_service+8
 13852  002AD2  CFF4 F01D          	movff	prodh,??_service+9
 13853  002AD6  CFF6 F01E          	movff	tblptrl,??_service+10
 13854  002ADA  CFF7 F01F          	movff	tblptrh,??_service+11
 13855  002ADE  CFF8 F020          	movff	tblptru,??_service+12
 13856  002AE2  CFF5 F021          	movff	tablat,??_service+13
 13857                           
 13858                           ;main.c: 347: if( servoInterruptService() )return;
 13859  002AE6  EC61  F014         	call	_servoInterruptService	;wreg free
 13860  002AEA  0900               	iorlw	0
 13861  002AEC  A4D8               	btfss	status,2,c
 13862  002AEE  D035               	goto	i2l206
 13863                           
 13864                           ;main.c: 349: if(TMR1IF){
 13865  002AF0  A09E               	btfss	3998,0,c	;volatile
 13866  002AF2  D017               	goto	i2l207
 13867                           
 13868                           ;main.c: 353: startTimer(1,0x8683);
 13869  002AF4  0E00               	movlw	0
 13870  002AF6  6E08               	movwf	i2startTimer@timer+1,c
 13871  002AF8  0E01               	movlw	1
 13872  002AFA  6E07               	movwf	i2startTimer@timer,c
 13873  002AFC  0E83               	movlw	131
 13874  002AFE  6E09               	movwf	i2startTimer@val,c
 13875  002B00  0E86               	movlw	134
 13876  002B02  6E0A               	movwf	i2startTimer@val+1,c
 13877  002B04  0E00               	movlw	0
 13878  002B06  6E0B               	movwf	i2startTimer@val+2,c
 13879  002B08  0E00               	movlw	0
 13880  002B0A  6E0C               	movwf	i2startTimer@val+3,c
 13881  002B0C  EC95  F01D         	call	i2_startTimer	;wreg free
 13882                           
 13883                           ;main.c: 354: time+=1;
 13884  002B10  0E01               	movlw	1
 13885  002B12  0101               	movlb	1	; () banked
 13886  002B14  274C               	addwf	_time& (0+255),f,b
 13887  002B16  0E00               	movlw	0
 13888  002B18  234D               	addwfc	(_time+1)& (0+255),f,b
 13889  002B1A  234E               	addwfc	(_time+2)& (0+255),f,b
 13890  002B1C  234F               	addwfc	(_time+3)& (0+255),f,b
 13891                           
 13892                           ; BSR set to: 1
 13893                           ;main.c: 355: TMR1IF = 0;
 13894  002B1E  909E               	bcf	3998,0,c	;volatile
 13895                           
 13896                           ; BSR set to: 1
 13897                           ;main.c: 356: return;
 13898  002B20  D01C               	goto	i2l206
 13899  002B22                     i2l207:
 13900                           
 13901                           ;main.c: 357: }
 13902                           ;main.c: 360: if(INT0IF){ INT0IF = 0;
 13903  002B22  A2F2               	btfss	intcon,1,c	;volatile
 13904  002B24  D007               	goto	i2l208
 13905  002B26  92F2               	bcf	intcon,1,c	;volatile
 13906                           
 13907                           ;main.c: 361: batteryDetected = 1;
 13908  002B28  0E00               	movlw	0
 13909  002B2A  0101               	movlb	1	; () banked
 13910  002B2C  6F51               	movwf	(_batteryDetected+1)& (0+255),b
 13911  002B2E  0E01               	movlw	1
 13912  002B30  6F50               	movwf	_batteryDetected& (0+255),b
 13913                           
 13914                           ; BSR set to: 1
 13915                           ;main.c: 362: return;
 13916  002B32  D013               	goto	i2l206
 13917  002B34                     i2l208:
 13918                           
 13919                           ;main.c: 363: }
 13920                           ;main.c: 366: if(INT1IF && INT1IE){INT1IF = 0;
 13921  002B34  B0F0               	btfsc	intcon3,0,c	;volatile
 13922  002B36  A6F0               	btfss	intcon3,3,c	;volatile
 13923  002B38  D010               	goto	i2l206
 13924  002B3A  90F0               	bcf	intcon3,0,c	;volatile
 13925                           
 13926                           ;main.c: 367: char key = (PORTB & 0xF0) >> 4;
 13927  002B3C  3881               	swapf	3969,w,c	;volatile
 13928  002B3E  0B0F               	andlw	15
 13929  002B40  0B0F               	andlw	15
 13930  002B42  6E22               	movwf	service@key,c
 13931                           
 13932                           ;main.c: 368: if(key == 12)terminate = 1;
 13933  002B44  0E0C               	movlw	12
 13934  002B46  1822               	xorwf	service@key,w,c
 13935  002B48  A4D8               	btfss	status,2,c
 13936  002B4A  D005               	goto	i2l211
 13937  002B4C  0E00               	movlw	0
 13938  002B4E  0101               	movlb	1	; () banked
 13939  002B50  6F5B               	movwf	(_terminate+1)& (0+255),b
 13940  002B52  0E01               	movlw	1
 13941  002B54  6F5A               	movwf	_terminate& (0+255),b
 13942  002B56                     i2l211:
 13943  002B56  B281               	btfsc	3969,1,c	;volatile
 13944  002B58  D7FE               	goto	i2l211
 13945  002B5A                     i2l206:
 13946  002B5A  C021  FFF5         	movff	??_service+13,tablat
 13947  002B5E  C020  FFF8         	movff	??_service+12,tblptru
 13948  002B62  C01F  FFF7         	movff	??_service+11,tblptrh
 13949  002B66  C01E  FFF6         	movff	??_service+10,tblptrl
 13950  002B6A  C01D  FFF4         	movff	??_service+9,prodh
 13951  002B6E  C01C  FFF3         	movff	??_service+8,prodl
 13952  002B72  C01B  FFDA         	movff	??_service+7,fsr2h
 13953  002B76  C01A  FFD9         	movff	??_service+6,fsr2l
 13954  002B7A  C019  FFE2         	movff	??_service+5,fsr1h
 13955  002B7E  C018  FFE1         	movff	??_service+4,fsr1l
 13956  002B82  C017  FFEA         	movff	??_service+3,fsr0h
 13957  002B86  C016  FFE9         	movff	??_service+2,fsr0l
 13958  002B8A  C015  FFFB         	movff	??_service+1,pclatu
 13959  002B8E  C014  FFFA         	movff	??_service,pclath
 13960  002B92  925D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13961  002B94  0011               	retfie		f
 13962  002B96                     __end_of_service:
 13963                           	opt stack 0
 13964                           pclatu	equ	0xFFB
 13965                           pclath	equ	0xFFA
 13966                           tblptru	equ	0xFF8
 13967                           tblptrh	equ	0xFF7
 13968                           tblptrl	equ	0xFF6
 13969                           tablat	equ	0xFF5
 13970                           prodh	equ	0xFF4
 13971                           prodl	equ	0xFF3
 13972                           intcon	equ	0xFF2
 13973                           intcon3	equ	0xFF0
 13974                           postinc0	equ	0xFEE
 13975                           fsr0h	equ	0xFEA
 13976                           fsr0l	equ	0xFE9
 13977                           wreg	equ	0xFE8
 13978                           postdec1	equ	0xFE5
 13979                           fsr1h	equ	0xFE2
 13980                           fsr1l	equ	0xFE1
 13981                           indf2	equ	0xFDF
 13982                           postinc2	equ	0xFDE
 13983                           postdec2	equ	0xFDD
 13984                           fsr2h	equ	0xFDA
 13985                           fsr2l	equ	0xFD9
 13986                           status	equ	0xFD8
 13987                           
 13988 ;; *************** function _servoInterruptService *****************
 13989 ;; Defined at:
 13990 ;;		line 55 in file "servo.c"
 13991 ;; Parameters:    Size  Location     Type
 13992 ;;		None
 13993 ;; Auto vars:     Size  Location     Type
 13994 ;;		None
 13995 ;; Return value:  Size  Location     Type
 13996 ;;                  1    wreg      unsigned char 
 13997 ;; Registers used:
 13998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13999 ;; Tracked objects:
 14000 ;;		On entry : 0/0
 14001 ;;		On exit  : 0/0
 14002 ;;		Unchanged: 0/0
 14003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14006 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14007 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14008 ;;Total ram usage:        4 bytes
 14009 ;; Hardware stack levels used:    1
 14010 ;; Hardware stack levels required when called:    1
 14011 ;; This function calls:
 14012 ;;		i2___awmod
 14013 ;;		i2_digitalWrite
 14014 ;;		i2_startTimer
 14015 ;; This function is called by:
 14016 ;;		_service
 14017 ;; This function uses a non-reentrant model
 14018 ;;
 14019                           
 14020                           	psect	text57
 14021  0028C2                     __ptext57:
 14022                           	opt stack 0
 14023  0028C2                     _servoInterruptService:
 14024                           	opt stack 20
 14025                           
 14026                           ;servo.c: 57: if(TMR0IF){TMR0IF = 0;
 14027                           
 14028                           ;incstack = 0
 14029  0028C2  A4F2               	btfss	intcon,2,c	;volatile
 14030  0028C4  D07C               	goto	i2l5494
 14031  0028C6  94F2               	bcf	intcon,2,c	;volatile
 14032                           
 14033                           ;servo.c: 58: digitalWrite(servos[curr],0);
 14034  0028C8  90D8               	bcf	status,0,c
 14035  0028CA  3456               	rlcf	_curr,w,c
 14036  0028CC  6ED9               	movwf	fsr2l,c
 14037  0028CE  3457               	rlcf	_curr+1,w,c
 14038  0028D0  6EDA               	movwf	fsr2h,c
 14039  0028D2  0E40               	movlw	low _servos
 14040  0028D4  26D9               	addwf	fsr2l,f,c
 14041  0028D6  0E01               	movlw	high _servos
 14042  0028D8  22DA               	addwfc	fsr2h,f,c
 14043  0028DA  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 14044  0028DE  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 14045  0028E2  0E00               	movlw	0
 14046  0028E4  6E0A               	movwf	i2digitalWrite@val+1,c
 14047  0028E6  0E00               	movlw	0
 14048  0028E8  6E09               	movwf	i2digitalWrite@val,c
 14049  0028EA  ECDA  F017         	call	i2_digitalWrite	;wreg free
 14050                           
 14051                           ;servo.c: 59: digitalWrite(servos[ (curr+1)%(n+1) ],1);
 14052  0028EE  0E01               	movlw	1
 14053  0028F0  2456               	addwf	_curr,w,c
 14054  0028F2  6E01               	movwf	i2___awmod@dividend,c
 14055  0028F4  0E00               	movlw	0
 14056  0028F6  2057               	addwfc	_curr+1,w,c
 14057  0028F8  6E02               	movwf	i2___awmod@dividend+1,c
 14058  0028FA  0E01               	movlw	1
 14059  0028FC  2458               	addwf	_n,w,c
 14060  0028FE  6E03               	movwf	i2___awmod@divisor,c
 14061  002900  0E00               	movlw	0
 14062  002902  2059               	addwfc	_n+1,w,c
 14063  002904  6E04               	movwf	i2___awmod@divisor+1,c
 14064  002906  EC66  F01B         	call	i2___awmod	;wreg free
 14065  00290A  90D8               	bcf	status,0,c
 14066  00290C  3601               	rlcf	?i2___awmod,f,c
 14067  00290E  3602               	rlcf	?i2___awmod+1,f,c
 14068  002910  0E40               	movlw	low _servos
 14069  002912  2401               	addwf	?i2___awmod,w,c
 14070  002914  6ED9               	movwf	fsr2l,c
 14071  002916  0E01               	movlw	high _servos
 14072  002918  2002               	addwfc	?i2___awmod+1,w,c
 14073  00291A  6EDA               	movwf	fsr2h,c
 14074  00291C  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 14075  002920  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 14076  002924  0E00               	movlw	0
 14077  002926  6E0A               	movwf	i2digitalWrite@val+1,c
 14078  002928  0E01               	movlw	1
 14079  00292A  6E09               	movwf	i2digitalWrite@val,c
 14080  00292C  ECDA  F017         	call	i2_digitalWrite	;wreg free
 14081                           
 14082                           ;servo.c: 60: startTimer(0, 0xFFFF - pulse[ (curr+1)%(n+1) ]);
 14083  002930  0E00               	movlw	0
 14084  002932  6E08               	movwf	i2startTimer@timer+1,c
 14085  002934  0E00               	movlw	0
 14086  002936  6E07               	movwf	i2startTimer@timer,c
 14087  002938  0EFF               	movlw	255
 14088  00293A  6E10               	movwf	??_servoInterruptService& (0+255),c
 14089  00293C  0EFF               	movlw	255
 14090  00293E  6E11               	movwf	(??_servoInterruptService+1)& (0+255),c
 14091  002940  0E01               	movlw	1
 14092  002942  2456               	addwf	_curr,w,c
 14093  002944  6E01               	movwf	i2___awmod@dividend,c
 14094  002946  0E00               	movlw	0
 14095  002948  2057               	addwfc	_curr+1,w,c
 14096  00294A  6E02               	movwf	i2___awmod@dividend+1,c
 14097  00294C  0E01               	movlw	1
 14098  00294E  2458               	addwf	_n,w,c
 14099  002950  6E03               	movwf	i2___awmod@divisor,c
 14100  002952  0E00               	movlw	0
 14101  002954  2059               	addwfc	_n+1,w,c
 14102  002956  6E04               	movwf	i2___awmod@divisor+1,c
 14103  002958  EC66  F01B         	call	i2___awmod	;wreg free
 14104  00295C  90D8               	bcf	status,0,c
 14105  00295E  3601               	rlcf	?i2___awmod,f,c
 14106  002960  3602               	rlcf	?i2___awmod+1,f,c
 14107  002962  0E38               	movlw	low _pulse
 14108  002964  2401               	addwf	?i2___awmod,w,c
 14109  002966  6ED9               	movwf	fsr2l,c
 14110  002968  0E01               	movlw	high _pulse
 14111  00296A  2002               	addwfc	?i2___awmod+1,w,c
 14112  00296C  6EDA               	movwf	fsr2h,c
 14113  00296E  CFDE F012          	movff	postinc2,??_servoInterruptService+2
 14114  002972  CFDD F013          	movff	postdec2,??_servoInterruptService+3
 14115  002976  1E12               	comf	??_servoInterruptService+2,f,c
 14116  002978  1E13               	comf	??_servoInterruptService+3,f,c
 14117  00297A  4A12               	infsnz	??_servoInterruptService+2,f,c
 14118  00297C  2A13               	incf	??_servoInterruptService+3,f,c
 14119  00297E  5010               	movf	??_servoInterruptService,w,c
 14120  002980  2612               	addwf	??_servoInterruptService+2,f,c
 14121  002982  5011               	movf	??_servoInterruptService+1,w,c
 14122  002984  2213               	addwfc	??_servoInterruptService+3,f,c
 14123  002986  C012  F009         	movff	??_servoInterruptService+2,i2startTimer@val
 14124  00298A  C013  F00A         	movff	??_servoInterruptService+3,i2startTimer@val+1
 14125  00298E  6A0B               	clrf	i2startTimer@val+2,c
 14126  002990  6A0C               	clrf	i2startTimer@val+3,c
 14127  002992  EC95  F01D         	call	i2_startTimer	;wreg free
 14128                           
 14129                           ;servo.c: 62: curr = (curr+1)%(n+1);
 14130  002996  0E01               	movlw	1
 14131  002998  2456               	addwf	_curr,w,c
 14132  00299A  6E01               	movwf	i2___awmod@dividend,c
 14133  00299C  0E00               	movlw	0
 14134  00299E  2057               	addwfc	_curr+1,w,c
 14135  0029A0  6E02               	movwf	i2___awmod@dividend+1,c
 14136  0029A2  0E01               	movlw	1
 14137  0029A4  2458               	addwf	_n,w,c
 14138  0029A6  6E03               	movwf	i2___awmod@divisor,c
 14139  0029A8  0E00               	movlw	0
 14140  0029AA  2059               	addwfc	_n+1,w,c
 14141  0029AC  6E04               	movwf	i2___awmod@divisor+1,c
 14142  0029AE  EC66  F01B         	call	i2___awmod	;wreg free
 14143  0029B2  C001  F056         	movff	?i2___awmod,_curr
 14144  0029B6  C002  F057         	movff	?i2___awmod+1,_curr+1
 14145                           
 14146                           ;servo.c: 63: return 1;
 14147  0029BA  0E01               	movlw	1
 14148  0029BC  0012               	return	
 14149  0029BE                     i2l5494:
 14150                           
 14151                           ;servo.c: 64: }
 14152                           ;servo.c: 65: return 0;
 14153  0029BE  0E00               	movlw	0
 14154  0029C0  0012               	return	
 14155  0029C2                     __end_of_servoInterruptService:
 14156                           	opt stack 0
 14157                           pclatu	equ	0xFFB
 14158                           pclath	equ	0xFFA
 14159                           tblptru	equ	0xFF8
 14160                           tblptrh	equ	0xFF7
 14161                           tblptrl	equ	0xFF6
 14162                           tablat	equ	0xFF5
 14163                           prodh	equ	0xFF4
 14164                           prodl	equ	0xFF3
 14165                           intcon	equ	0xFF2
 14166                           intcon3	equ	0xFF0
 14167                           postinc0	equ	0xFEE
 14168                           fsr0h	equ	0xFEA
 14169                           fsr0l	equ	0xFE9
 14170                           wreg	equ	0xFE8
 14171                           postdec1	equ	0xFE5
 14172                           fsr1h	equ	0xFE2
 14173                           fsr1l	equ	0xFE1
 14174                           indf2	equ	0xFDF
 14175                           postinc2	equ	0xFDE
 14176                           postdec2	equ	0xFDD
 14177                           fsr2h	equ	0xFDA
 14178                           fsr2l	equ	0xFD9
 14179                           status	equ	0xFD8
 14180                           
 14181 ;; *************** function i2_startTimer *****************
 14182 ;; Defined at:
 14183 ;;		line 76 in file "timer.c"
 14184 ;; Parameters:    Size  Location     Type
 14185 ;;  timer           2    6[COMRAM] int 
 14186 ;;  val             4    8[COMRAM] long 
 14187 ;; Auto vars:     Size  Location     Type
 14188 ;;		None
 14189 ;; Return value:  Size  Location     Type
 14190 ;;                  1    wreg      void 
 14191 ;; Registers used:
 14192 ;;		wreg, status,2, status,0
 14193 ;; Tracked objects:
 14194 ;;		On entry : 0/0
 14195 ;;		On exit  : 0/0
 14196 ;;		Unchanged: 0/0
 14197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14198 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14200 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14201 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14202 ;;Total ram usage:        8 bytes
 14203 ;; Hardware stack levels used:    1
 14204 ;; This function calls:
 14205 ;;		Nothing
 14206 ;; This function is called by:
 14207 ;;		_service
 14208 ;;		_servoInterruptService
 14209 ;; This function uses a non-reentrant model
 14210 ;;
 14211                           
 14212                           	psect	text58
 14213  003B2A                     __ptext58:
 14214                           	opt stack 0
 14215  003B2A                     i2_startTimer:
 14216                           	opt stack 21
 14217                           
 14218                           ;timer.c: 77: switch(timer){
 14219                           
 14220                           ;incstack = 0
 14221  003B2A  D012               	goto	i2l5254
 14222  003B2C                     i2l466:
 14223                           
 14224                           ;timer.c: 79: TMR0H = val>>8;
 14225  003B2C  C00A  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 14226                           
 14227                           ;timer.c: 80: TMR0L = val;
 14228  003B30  C009  FFD6         	movff	i2startTimer@val,4054	;volatile
 14229                           
 14230                           ;timer.c: 81: T0CON |= 1<<7;
 14231  003B34  8ED5               	bsf	4053,7,c	;volatile
 14232                           
 14233                           ;timer.c: 82: break;
 14234  003B36  0012               	return	
 14235  003B38                     i2l468:
 14236                           
 14237                           ;timer.c: 84: TMR1H = val>>8;
 14238  003B38  C00A  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 14239                           
 14240                           ;timer.c: 85: TMR1L = val;
 14241  003B3C  C009  FFCE         	movff	i2startTimer@val,4046	;volatile
 14242                           
 14243                           ;timer.c: 86: T1CON |= 1<<0;
 14244  003B40  80CD               	bsf	4045,0,c	;volatile
 14245                           
 14246                           ;timer.c: 87: break;
 14247  003B42  0012               	return	
 14248  003B44                     i2l469:
 14249                           
 14250                           ;timer.c: 89: TMR3H = val>>8;
 14251  003B44  C00A  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 14252                           
 14253                           ;timer.c: 90: TMR3L = val;
 14254  003B48  C009  FFB2         	movff	i2startTimer@val,4018	;volatile
 14255                           
 14256                           ;timer.c: 91: T3CON |= 1<<0;
 14257  003B4C  80B1               	bsf	4017,0,c	;volatile
 14258                           
 14259                           ;timer.c: 92: }
 14260  003B4E  0012               	return	
 14261  003B50                     i2l5254:
 14262  003B50  C007  F00D         	movff	i2startTimer@timer,??i2_startTimer
 14263  003B54  C008  F00E         	movff	i2startTimer@timer+1,??i2_startTimer+1
 14264                           
 14265                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14266                           ; Switch size 1, requested type "space"
 14267                           ; Number of cases is 1, Range of values is 0 to 0
 14268                           ; switch strategies available:
 14269                           ; Name         Instructions Cycles
 14270                           ; simple_byte            4     3 (average)
 14271                           ;	Chosen strategy is simple_byte
 14272  003B58  500E               	movf	??i2_startTimer+1,w,c
 14273  003B5A  0A00               	xorlw	0	; case 0
 14274  003B5C  A4D8               	btfss	status,2,c
 14275  003B5E  0012               	return	
 14276                           
 14277                           ; Switch size 1, requested type "space"
 14278                           ; Number of cases is 3, Range of values is 0 to 3
 14279                           ; switch strategies available:
 14280                           ; Name         Instructions Cycles
 14281                           ; simple_byte           10     6 (average)
 14282                           ;	Chosen strategy is simple_byte
 14283  003B60  500D               	movf	??i2_startTimer,w,c
 14284  003B62  0A00               	xorlw	0	; case 0
 14285  003B64  B4D8               	btfsc	status,2,c
 14286  003B66  D7E2               	goto	i2l466
 14287  003B68  0A01               	xorlw	1	; case 1
 14288  003B6A  B4D8               	btfsc	status,2,c
 14289  003B6C  D7E5               	goto	i2l468
 14290  003B6E  0A02               	xorlw	2	; case 3
 14291  003B70  A4D8               	btfss	status,2,c
 14292  003B72  0012               	return	
 14293  003B74  D7E7               	goto	i2l469
 14294  003B76                     __end_ofi2_startTimer:
 14295                           	opt stack 0
 14296                           pclatu	equ	0xFFB
 14297                           pclath	equ	0xFFA
 14298                           tblptru	equ	0xFF8
 14299                           tblptrh	equ	0xFF7
 14300                           tblptrl	equ	0xFF6
 14301                           tablat	equ	0xFF5
 14302                           prodh	equ	0xFF4
 14303                           prodl	equ	0xFF3
 14304                           intcon	equ	0xFF2
 14305                           intcon3	equ	0xFF0
 14306                           postinc0	equ	0xFEE
 14307                           fsr0h	equ	0xFEA
 14308                           fsr0l	equ	0xFE9
 14309                           wreg	equ	0xFE8
 14310                           postdec1	equ	0xFE5
 14311                           fsr1h	equ	0xFE2
 14312                           fsr1l	equ	0xFE1
 14313                           indf2	equ	0xFDF
 14314                           postinc2	equ	0xFDE
 14315                           postdec2	equ	0xFDD
 14316                           fsr2h	equ	0xFDA
 14317                           fsr2l	equ	0xFD9
 14318                           status	equ	0xFD8
 14319                           
 14320 ;; *************** function i2_digitalWrite *****************
 14321 ;; Defined at:
 14322 ;;		line 53 in file "iopin.c"
 14323 ;; Parameters:    Size  Location     Type
 14324 ;;  pin             2    6[COMRAM] PTR int 
 14325 ;;		 -> AA_float(4), cylinderDir(4), redirectingServo(4), padServo(4), 
 14326 ;;		 -> conveyorServo(4), cylinderMotor(4), 
 14327 ;;  val             2    8[COMRAM] int 
 14328 ;; Auto vars:     Size  Location     Type
 14329 ;;  digitalWrite    2   13[COMRAM] int 
 14330 ;; Return value:  Size  Location     Type
 14331 ;;                  1    wreg      void 
 14332 ;; Registers used:
 14333 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14334 ;; Tracked objects:
 14335 ;;		On entry : 0/0
 14336 ;;		On exit  : 0/0
 14337 ;;		Unchanged: 0/0
 14338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14339 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14340 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14341 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14342 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14343 ;;Total ram usage:        9 bytes
 14344 ;; Hardware stack levels used:    1
 14345 ;; This function calls:
 14346 ;;		Nothing
 14347 ;; This function is called by:
 14348 ;;		_servoInterruptService
 14349 ;; This function uses a non-reentrant model
 14350 ;;
 14351                           
 14352                           	psect	text59
 14353  002FB4                     __ptext59:
 14354                           	opt stack 0
 14355  002FB4                     i2_digitalWrite:
 14356                           	opt stack 20
 14357                           
 14358                           ;iopin.c: 54: if(pin){
 14359                           
 14360                           ;incstack = 0
 14361  002FB4  5007               	movf	i2digitalWrite@pin,w,c
 14362  002FB6  1008               	iorwf	i2digitalWrite@pin+1,w,c
 14363  002FB8  B4D8               	btfsc	status,2,c
 14364  002FBA  0012               	return	
 14365                           
 14366                           ;iopin.c: 55: int p = 1 << pin[1];
 14367  002FBC  EE20 F002          	lfsr	2,2
 14368  002FC0  5007               	movf	i2digitalWrite@pin,w,c
 14369  002FC2  26D9               	addwf	fsr2l,f,c
 14370  002FC4  5008               	movf	i2digitalWrite@pin+1,w,c
 14371  002FC6  22DA               	addwfc	fsr2h,f,c
 14372  002FC8  50DF               	movf	indf2,w,c
 14373  002FCA  6E0B               	movwf	??i2_digitalWrite& (0+255),c
 14374  002FCC  0E01               	movlw	1
 14375  002FCE  6E0C               	movwf	(??i2_digitalWrite+1)& (0+255),c
 14376  002FD0  0E00               	movlw	0
 14377  002FD2  6E0D               	movwf	(??i2_digitalWrite+2)& (0+255),c
 14378  002FD4  2A0B               	incf	??i2_digitalWrite,f,c
 14379  002FD6  D003               	goto	i2u514_44
 14380  002FD8                     i2u514_45:
 14381  002FD8  90D8               	bcf	status,0,c
 14382  002FDA  360C               	rlcf	??i2_digitalWrite+1,f,c
 14383  002FDC  360D               	rlcf	??i2_digitalWrite+2,f,c
 14384  002FDE                     i2u514_44:
 14385  002FDE  2E0B               	decfsz	??i2_digitalWrite,f,c
 14386  002FE0  D7FB               	goto	i2u514_45
 14387  002FE2  C00C  F00E         	movff	??i2_digitalWrite+1,i2digitalWrite@p
 14388  002FE6  C00D  F00F         	movff	??i2_digitalWrite+2,i2digitalWrite@p+1
 14389                           
 14390                           ;iopin.c: 56: if(val == 0){
 14391  002FEA  5009               	movf	i2digitalWrite@val,w,c
 14392  002FEC  100A               	iorwf	i2digitalWrite@val+1,w,c
 14393  002FEE  A4D8               	btfss	status,2,c
 14394  002FF0  D02B               	goto	i2l5240
 14395                           
 14396                           ;iopin.c: 57: p ^= 0xff;
 14397  002FF2  0EFF               	movlw	255
 14398  002FF4  1A0E               	xorwf	i2digitalWrite@p,f,c
 14399                           
 14400                           ;iopin.c: 58: }
 14401                           ;iopin.c: 60: switch(pin[0]){
 14402  002FF6  D028               	goto	i2l5240
 14403  002FF8                     i2l5216:
 14404  002FF8  0409               	decf	i2digitalWrite@val,w,c
 14405  002FFA  100A               	iorwf	i2digitalWrite@val+1,w,c
 14406  002FFC  A4D8               	btfss	status,2,c
 14407  002FFE  D003               	goto	i2l5220
 14408  003000  500E               	movf	i2digitalWrite@p,w,c
 14409  003002  1289               	iorwf	3977,f,c	;volatile
 14410  003004  0012               	return	
 14411  003006                     i2l5220:
 14412                           
 14413                           ;iopin.c: 62: else LATA &= p;
 14414  003006  500E               	movf	i2digitalWrite@p,w,c
 14415  003008  1689               	andwf	3977,f,c	;volatile
 14416                           
 14417                           ;iopin.c: 63: break;
 14418  00300A  0012               	return	
 14419  00300C                     i2l5222:
 14420  00300C  0409               	decf	i2digitalWrite@val,w,c
 14421  00300E  100A               	iorwf	i2digitalWrite@val+1,w,c
 14422  003010  A4D8               	btfss	status,2,c
 14423  003012  D003               	goto	i2l5226
 14424  003014  500E               	movf	i2digitalWrite@p,w,c
 14425  003016  128A               	iorwf	3978,f,c	;volatile
 14426  003018  0012               	return	
 14427  00301A                     i2l5226:
 14428                           
 14429                           ;iopin.c: 65: else LATB &= p;
 14430  00301A  500E               	movf	i2digitalWrite@p,w,c
 14431  00301C  168A               	andwf	3978,f,c	;volatile
 14432                           
 14433                           ;iopin.c: 66: break;
 14434  00301E  0012               	return	
 14435  003020                     i2l5228:
 14436  003020  0409               	decf	i2digitalWrite@val,w,c
 14437  003022  100A               	iorwf	i2digitalWrite@val+1,w,c
 14438  003024  A4D8               	btfss	status,2,c
 14439  003026  D003               	goto	i2l5232
 14440  003028  500E               	movf	i2digitalWrite@p,w,c
 14441  00302A  128B               	iorwf	3979,f,c	;volatile
 14442  00302C  0012               	return	
 14443  00302E                     i2l5232:
 14444                           
 14445                           ;iopin.c: 68: else LATC &= p;
 14446  00302E  500E               	movf	i2digitalWrite@p,w,c
 14447  003030  168B               	andwf	3979,f,c	;volatile
 14448                           
 14449                           ;iopin.c: 69: break;
 14450  003032  0012               	return	
 14451  003034                     i2l5234:
 14452  003034  0409               	decf	i2digitalWrite@val,w,c
 14453  003036  100A               	iorwf	i2digitalWrite@val+1,w,c
 14454  003038  A4D8               	btfss	status,2,c
 14455  00303A  D003               	goto	i2l5238
 14456  00303C  500E               	movf	i2digitalWrite@p,w,c
 14457  00303E  128C               	iorwf	3980,f,c	;volatile
 14458  003040  0012               	return	
 14459  003042                     i2l5238:
 14460                           
 14461                           ;iopin.c: 71: else LATD &= p;
 14462  003042  500E               	movf	i2digitalWrite@p,w,c
 14463  003044  168C               	andwf	3980,f,c	;volatile
 14464                           
 14465                           ;iopin.c: 72: }
 14466  003046  0012               	return	
 14467  003048                     i2l5240:
 14468  003048  C007  FFD9         	movff	i2digitalWrite@pin,fsr2l
 14469  00304C  C008  FFDA         	movff	i2digitalWrite@pin+1,fsr2h
 14470  003050  CFDE F00B          	movff	postinc2,??i2_digitalWrite
 14471  003054  CFDD F00C          	movff	postdec2,??i2_digitalWrite+1
 14472                           
 14473                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14474                           ; Switch size 1, requested type "space"
 14475                           ; Number of cases is 1, Range of values is 0 to 0
 14476                           ; switch strategies available:
 14477                           ; Name         Instructions Cycles
 14478                           ; simple_byte            4     3 (average)
 14479                           ;	Chosen strategy is simple_byte
 14480  003058  500C               	movf	??i2_digitalWrite+1,w,c
 14481  00305A  0A00               	xorlw	0	; case 0
 14482  00305C  A4D8               	btfss	status,2,c
 14483  00305E  0012               	return	
 14484                           
 14485                           ; Switch size 1, requested type "space"
 14486                           ; Number of cases is 4, Range of values is 0 to 3
 14487                           ; switch strategies available:
 14488                           ; Name         Instructions Cycles
 14489                           ; simple_byte           13     7 (average)
 14490                           ;	Chosen strategy is simple_byte
 14491  003060  500B               	movf	??i2_digitalWrite,w,c
 14492  003062  0A00               	xorlw	0	; case 0
 14493  003064  B4D8               	btfsc	status,2,c
 14494  003066  D7C8               	goto	i2l5216
 14495  003068  0A01               	xorlw	1	; case 1
 14496  00306A  B4D8               	btfsc	status,2,c
 14497  00306C  D7CF               	goto	i2l5222
 14498  00306E  0A03               	xorlw	3	; case 2
 14499  003070  B4D8               	btfsc	status,2,c
 14500  003072  D7D6               	goto	i2l5228
 14501  003074  0A01               	xorlw	1	; case 3
 14502  003076  A4D8               	btfss	status,2,c
 14503  003078  0012               	return	
 14504  00307A  D7DC               	goto	i2l5234
 14505  00307C                     __end_ofi2_digitalWrite:
 14506                           	opt stack 0
 14507                           pclatu	equ	0xFFB
 14508                           pclath	equ	0xFFA
 14509                           tblptru	equ	0xFF8
 14510                           tblptrh	equ	0xFF7
 14511                           tblptrl	equ	0xFF6
 14512                           tablat	equ	0xFF5
 14513                           prodh	equ	0xFF4
 14514                           prodl	equ	0xFF3
 14515                           intcon	equ	0xFF2
 14516                           intcon3	equ	0xFF0
 14517                           postinc0	equ	0xFEE
 14518                           fsr0h	equ	0xFEA
 14519                           fsr0l	equ	0xFE9
 14520                           wreg	equ	0xFE8
 14521                           postdec1	equ	0xFE5
 14522                           fsr1h	equ	0xFE2
 14523                           fsr1l	equ	0xFE1
 14524                           indf2	equ	0xFDF
 14525                           postinc2	equ	0xFDE
 14526                           postdec2	equ	0xFDD
 14527                           fsr2h	equ	0xFDA
 14528                           fsr2l	equ	0xFD9
 14529                           status	equ	0xFD8
 14530                           
 14531 ;; *************** function i2___awmod *****************
 14532 ;; Defined at:
 14533 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 14534 ;; Parameters:    Size  Location     Type
 14535 ;;  dividend        2    0[COMRAM] int 
 14536 ;;  divisor         2    2[COMRAM] int 
 14537 ;; Auto vars:     Size  Location     Type
 14538 ;;  __awmod         1    5[COMRAM] unsigned char 
 14539 ;;  __awmod         1    4[COMRAM] unsigned char 
 14540 ;; Return value:  Size  Location     Type
 14541 ;;                  2    0[COMRAM] int 
 14542 ;; Registers used:
 14543 ;;		wreg, status,2, status,0
 14544 ;; Tracked objects:
 14545 ;;		On entry : 0/0
 14546 ;;		On exit  : 0/0
 14547 ;;		Unchanged: 0/0
 14548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14549 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14550 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14552 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14553 ;;Total ram usage:        6 bytes
 14554 ;; Hardware stack levels used:    1
 14555 ;; This function calls:
 14556 ;;		Nothing
 14557 ;; This function is called by:
 14558 ;;		_servoInterruptService
 14559 ;; This function uses a non-reentrant model
 14560 ;;
 14561                           
 14562                           	psect	text60
 14563  0036CC                     __ptext60:
 14564                           	opt stack 0
 14565  0036CC                     i2___awmod:
 14566                           	opt stack 20
 14567                           
 14568                           ;incstack = 0
 14569  0036CC  0E00               	movlw	0
 14570  0036CE  6E06               	movwf	i2___awmod@sign,c
 14571  0036D0  AE02               	btfss	i2___awmod@dividend+1,7,c
 14572  0036D2  D006               	goto	i2l5268
 14573  0036D4  6C01               	negf	i2___awmod@dividend,c
 14574  0036D6  1E02               	comf	i2___awmod@dividend+1,f,c
 14575  0036D8  B0D8               	btfsc	status,0,c
 14576  0036DA  2A02               	incf	i2___awmod@dividend+1,f,c
 14577  0036DC  0E01               	movlw	1
 14578  0036DE  6E06               	movwf	i2___awmod@sign,c
 14579  0036E0                     i2l5268:
 14580  0036E0  AE04               	btfss	i2___awmod@divisor+1,7,c
 14581  0036E2  D004               	goto	i2l5272
 14582  0036E4  6C03               	negf	i2___awmod@divisor,c
 14583  0036E6  1E04               	comf	i2___awmod@divisor+1,f,c
 14584  0036E8  B0D8               	btfsc	status,0,c
 14585  0036EA  2A04               	incf	i2___awmod@divisor+1,f,c
 14586  0036EC                     i2l5272:
 14587  0036EC  5003               	movf	i2___awmod@divisor,w,c
 14588  0036EE  1004               	iorwf	i2___awmod@divisor+1,w,c
 14589  0036F0  B4D8               	btfsc	status,2,c
 14590  0036F2  D018               	goto	i2l5288
 14591  0036F4  0E01               	movlw	1
 14592  0036F6  6E05               	movwf	i2___awmod@counter,c
 14593  0036F8  D004               	goto	i2l5278
 14594  0036FA                     i2l5276:
 14595  0036FA  90D8               	bcf	status,0,c
 14596  0036FC  3603               	rlcf	i2___awmod@divisor,f,c
 14597  0036FE  3604               	rlcf	i2___awmod@divisor+1,f,c
 14598  003700  2A05               	incf	i2___awmod@counter,f,c
 14599  003702                     i2l5278:
 14600  003702  AE04               	btfss	i2___awmod@divisor+1,7,c
 14601  003704  D7FA               	goto	i2l5276
 14602  003706                     i2l5280:
 14603  003706  5003               	movf	i2___awmod@divisor,w,c
 14604  003708  5C01               	subwf	i2___awmod@dividend,w,c
 14605  00370A  5004               	movf	i2___awmod@divisor+1,w,c
 14606  00370C  5802               	subwfb	i2___awmod@dividend+1,w,c
 14607  00370E  A0D8               	btfss	status,0,c
 14608  003710  D004               	goto	i2l5284
 14609  003712  5003               	movf	i2___awmod@divisor,w,c
 14610  003714  5E01               	subwf	i2___awmod@dividend,f,c
 14611  003716  5004               	movf	i2___awmod@divisor+1,w,c
 14612  003718  5A02               	subwfb	i2___awmod@dividend+1,f,c
 14613  00371A                     i2l5284:
 14614  00371A  90D8               	bcf	status,0,c
 14615  00371C  3204               	rrcf	i2___awmod@divisor+1,f,c
 14616  00371E  3203               	rrcf	i2___awmod@divisor,f,c
 14617  003720  2E05               	decfsz	i2___awmod@counter,f,c
 14618  003722  D7F1               	goto	i2l5280
 14619  003724                     i2l5288:
 14620  003724  5006               	movf	i2___awmod@sign,w,c
 14621  003726  B4D8               	btfsc	status,2,c
 14622  003728  D004               	goto	i2l5292
 14623  00372A  6C01               	negf	i2___awmod@dividend,c
 14624  00372C  1E02               	comf	i2___awmod@dividend+1,f,c
 14625  00372E  B0D8               	btfsc	status,0,c
 14626  003730  2A02               	incf	i2___awmod@dividend+1,f,c
 14627  003732                     i2l5292:
 14628  003732  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 14629  003736  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 14630  00373A  0012               	return	
 14631  00373C                     __end_ofi2___awmod:
 14632                           	opt stack 0
 14633                           pclatu	equ	0xFFB
 14634                           pclath	equ	0xFFA
 14635                           tblptru	equ	0xFF8
 14636                           tblptrh	equ	0xFF7
 14637                           tblptrl	equ	0xFF6
 14638                           tablat	equ	0xFF5
 14639                           prodh	equ	0xFF4
 14640                           prodl	equ	0xFF3
 14641                           intcon	equ	0xFF2
 14642                           intcon3	equ	0xFF0
 14643                           postinc0	equ	0xFEE
 14644                           fsr0h	equ	0xFEA
 14645                           fsr0l	equ	0xFE9
 14646                           wreg	equ	0xFE8
 14647                           postdec1	equ	0xFE5
 14648                           fsr1h	equ	0xFE2
 14649                           fsr1l	equ	0xFE1
 14650                           indf2	equ	0xFDF
 14651                           postinc2	equ	0xFDE
 14652                           postdec2	equ	0xFDD
 14653                           fsr2h	equ	0xFDA
 14654                           fsr2l	equ	0xFD9
 14655                           status	equ	0xFD8
 14656                           pclatu	equ	0xFFB
 14657                           pclath	equ	0xFFA
 14658                           tblptru	equ	0xFF8
 14659                           tblptrh	equ	0xFF7
 14660                           tblptrl	equ	0xFF6
 14661                           tablat	equ	0xFF5
 14662                           prodh	equ	0xFF4
 14663                           prodl	equ	0xFF3
 14664                           intcon	equ	0xFF2
 14665                           intcon3	equ	0xFF0
 14666                           postinc0	equ	0xFEE
 14667                           fsr0h	equ	0xFEA
 14668                           fsr0l	equ	0xFE9
 14669                           wreg	equ	0xFE8
 14670                           postdec1	equ	0xFE5
 14671                           fsr1h	equ	0xFE2
 14672                           fsr1l	equ	0xFE1
 14673                           indf2	equ	0xFDF
 14674                           postinc2	equ	0xFDE
 14675                           postdec2	equ	0xFDD
 14676                           fsr2h	equ	0xFDA
 14677                           fsr2l	equ	0xFD9
 14678                           status	equ	0xFD8
 14679                           
 14680                           	psect	rparam
 14681  0000                     pclatu	equ	0xFFB
 14682                           pclath	equ	0xFFA
 14683                           tblptru	equ	0xFF8
 14684                           tblptrh	equ	0xFF7
 14685                           tblptrl	equ	0xFF6
 14686                           tablat	equ	0xFF5
 14687                           prodh	equ	0xFF4
 14688                           prodl	equ	0xFF3
 14689                           intcon	equ	0xFF2
 14690                           intcon3	equ	0xFF0
 14691                           postinc0	equ	0xFEE
 14692                           fsr0h	equ	0xFEA
 14693                           fsr0l	equ	0xFE9
 14694                           wreg	equ	0xFE8
 14695                           postdec1	equ	0xFE5
 14696                           fsr1h	equ	0xFE2
 14697                           fsr1l	equ	0xFE1
 14698                           indf2	equ	0xFDF
 14699                           postinc2	equ	0xFDE
 14700                           postdec2	equ	0xFDD
 14701                           fsr2h	equ	0xFDA
 14702                           fsr2l	equ	0xFD9
 14703                           status	equ	0xFD8
 14704                           
 14705                           	psect	temp
 14706  00005D                     btemp:
 14707                           	opt stack 0
 14708  00005D                     	ds	1
 14709  0000                     int$flags	set	btemp
 14710                           pclatu	equ	0xFFB
 14711                           pclath	equ	0xFFA
 14712                           tblptru	equ	0xFF8
 14713                           tblptrh	equ	0xFF7
 14714                           tblptrl	equ	0xFF6
 14715                           tablat	equ	0xFF5
 14716                           prodh	equ	0xFF4
 14717                           prodl	equ	0xFF3
 14718                           intcon	equ	0xFF2
 14719                           intcon3	equ	0xFF0
 14720                           postinc0	equ	0xFEE
 14721                           fsr0h	equ	0xFEA
 14722                           fsr0l	equ	0xFE9
 14723                           wreg	equ	0xFE8
 14724                           postdec1	equ	0xFE5
 14725                           fsr1h	equ	0xFE2
 14726                           fsr1l	equ	0xFE1
 14727                           indf2	equ	0xFDF
 14728                           postinc2	equ	0xFDE
 14729                           postdec2	equ	0xFDD
 14730                           fsr2h	equ	0xFDA
 14731                           fsr2l	equ	0xFD9
 14732                           status	equ	0xFD8


Data Sizes:
    Strings     322
    Constant    174
    Data        59
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     58      92
    BANK0           128    123     123
    BANK1           256     56     126
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_22(CODE[19]), STR_21(CODE[18]), STR_20(CODE[17]), STR_19(CODE[19]), 
		 -> STR_18(CODE[17]), STR_17(CODE[19]), STR_16(CODE[17]), STR_15(CODE[18]), 
		 -> STR_14(CODE[17]), STR_13(CODE[18]), STR_12(CODE[17]), STR_11(CODE[18]), 
		 -> STR_10(CODE[8]), STR_9(CODE[15]), STR_8(CODE[14]), STR_7(CODE[17]), 
		 -> STR_6(CODE[17]), STR_5(CODE[8]), STR_4(CODE[2]), STR_3(CODE[4]), 
		 -> STR_2(CODE[6]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    showRunStats@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    showRunTime@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    showInterface@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    initServo@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    servos	PTR int [4] size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    saveNewRun@data	PTR int  size(2) Largest target is 14
		 -> debug@run(BANK1[14]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 4
		 -> AA_float(COMRAM[4]), cylinderDir(BANK1[4]), redirectingServo(BANK1[4]), padServo(BANK1[4]), 
		 -> conveyorServo(BANK1[4]), cylinderMotor(BANK1[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 4
		 -> padPin2(BANK1[4]), padPin1(BANK1[4]), cylinderDir(BANK1[4]), 

    sp__readPastRun	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    debug@run_286	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 


Critical Paths under _main in COMRAM

    _main->___almod
    _sortBattery->___ftdiv
    _lcdHome->_lcdInst
    _angleToPulse->___ftdiv
    ___altoft->___ftpack
    _debug->_eepromRead
    _showRunTime->___ftdiv
    ___ftdiv->___altoft
    ___awtoft->___ftpack
    _printf->___almod
    _printf->_eepromRead
    _lcdNewline->_lcdInst
    ___ftmul->___ftdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftdiv
    ___ftadd->___ftdiv
    ___ftge->___awtoft
    _lcdClear->_lcdInst
    _readPastRun->_eepromRead
    _saveNewRun->_eepromRead
    _eepromWrite->_eepromRead
    _eepromRead->___wmul
    ___wmul->___awdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    ___lwmod->_eepromRead
    ___almod->___aldiv

Critical Paths under _service in COMRAM

    _service->_servoInterruptService
    _servoInterruptService->i2_digitalWrite
    i2_startTimer->i2___awmod
    i2_digitalWrite->i2___awmod

Critical Paths under _main in BANK0

    _main->_debug
    _sortBattery->_printf
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    _debug->_showInterface
    _showInterface->_showRunTime
    _showRunTime->_printf
    _showRunStats->_printf
    _showRunSelect->_printf
    _showRunMenu->_printf
    _showMainMenu->_printf
    _showDateTime->_printf
    _printf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___ftdiv
    ___fttol->___ftadd
    ___ftsub->___ftadd
    ___ftadd->_fround
    _saveNewRun->_eepromWrite

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0 1094377
                                             31 BANK1     25    25      0
                            ___aldiv
                            ___almod
                              _debug
                        _digitalRead
                       _digitalWrite
                            _initLCD
                          _initServo
                          _initTimer
                           _lcdClear
                            _lcdHome
                           _pinSetup
                             _printf
                         _readKeypad
                      _showInterface
                        _sortBattery
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         33    33      0  114470
                                            107 BANK0      2     2      0
                                              0 BANK1     31    31      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                         _analogRead
                        _digitalRead
                       _digitalWrite
                           _lcdClear
                             _printf
                         _readKeypad
                           _setAngle
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     5      4    1748
                                             34 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          4     2      2     386
                                             34 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     185
                                             34 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcdHome                                              0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initServo                                           10     6      4   24248
                                             94 BANK0     10     6      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _startTimer                                           8     2      6     690
                                             34 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   22690
                                             84 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   21383
                                             61 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    3173
                                             42 COMRAM    10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            4     2      2     214
                                             34 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _debug                                               27    27      0  481119
                                            121 BANK0      2     2      0
                                              0 BANK1     25    25      0
                            ___lwmod
                         _eepromRead
                            _initLCD
                           _lcdClear
                           _pinSetup
                             _printf
                         _readKeypad
                        _readPastRun
                         _saveNewRun
                      _showInterface
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        6     6      0  404573
                                            115 BANK0      6     6      0
                        _readPastRun
                       _showDateTime
                       _showMainMenu
                        _showRunMenu
                      _showRunSelect
                       _showRunStats
                        _showRunTime
 ---------------------------------------------------------------------------------
 (2) _showRunTime                                          8     6      2   72321
                                            107 BANK0      8     6      2
                           ___awtoft
                            ___ftdiv
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3734
                                             52 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3102
                                             42 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _showRunStats                                         2     0      2   65513
                                            107 BANK0      2     0      2
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunSelect                                        1     1      0   65501
                                            107 BANK0      1     1      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunMenu                                          2     2      0   65470
                                            107 BANK0      2     2      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showMainMenu                                         1     1      0   65439
                                            107 BANK0      1     1      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showDateTime                                         0     0      0   65312
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      34
                                             34 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _printf                                              47    37     10   65083
                                             61 BANK0     46    36     10
                            ___aldiv (ARG)
                            ___almod (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                         _eepromRead (ARG)
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   14293
                                             24 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     421
                                             38 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             34 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   14014
                                             24 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5804
                                              9 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2071
                                             34 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1985
                                             40 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                             34 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     827
                                             34 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2763
                                             42 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                             47 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1011
                                             34 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     756
                                             46 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5057
                                             46 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4539
                                             34 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2584
                                             34 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     142
                                             34 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1738
                                             46 COMRAM     9     3      6
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _lcdClear                                             0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _readPastRun                                         18    16      2    4664
                                              0 BANK0     18    16      2
                             ___wmul
                         _eepromRead
 ---------------------------------------------------------------------------------
 (2) _saveNewRun                                           6     4      2    4967
                                              9 BANK0      6     4      2
                             ___wmul
                         _eepromRead
                        _eepromWrite
 ---------------------------------------------------------------------------------
 (3) _eepromWrite                                          9     3      6     435
                                              0 BANK0      9     3      6
                             ___wmul (ARG)
                         _eepromRead (ARG)
 ---------------------------------------------------------------------------------
 (3) _eepromRead                                           4     0      4     524
                                             54 COMRAM     4     0      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3736
                                             48 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             38 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     195
                                             36 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             34 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                              0 BANK0      5     1      4
                         _eepromRead (ARG)
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     424
                                             48 COMRAM    10     2      8
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     556
                                             34 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _service                                             15    15      0    1449
                                             19 COMRAM    15    15      0
              _servoInterruptService
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (10) _servoInterruptService                               4     4      0    1168
                                             15 COMRAM     4     4      0
                          i2___awmod
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (10) i2_startTimer                                        8     2      6     258
                                              6 COMRAM     8     2      6
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_digitalWrite                                      9     5      4     458
                                              6 COMRAM     9     5      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___awmod                                           6     2      4     452
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
   ___almod
     ___aldiv (ARG)
   _debug
     ___lwmod
       _eepromRead (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _eepromRead
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdClear
       _lcdInst
         _lcdNibble
     _pinSetup
     _printf
       ___aldiv (ARG)
       ___almod (ARG)
         ___aldiv (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _eepromRead (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _readPastRun
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _eepromRead
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _saveNewRun
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _eepromRead
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _eepromWrite
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _eepromRead (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _showInterface
       _readPastRun
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _eepromRead
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _showDateTime
         _lcdClear
           _lcdInst
             _lcdNibble
         _printf
           ___aldiv (ARG)
           ___almod (ARG)
             ___aldiv (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftneg (ARG)
           ___ftsub (ARG)
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                       _analogRead (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _analogRead (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _analogRead (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                       _analogRead (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _analogRead (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _analogRead (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv (ARG)
           ___llmod (ARG)
             ___lldiv (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_ (ARG)
           __tdiv_to_l_ (ARG)
           _eepromRead (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNewline
               _lcdInst
                 _lcdNibble
             _lcdNibble
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _readKeypad
       _showMainMenu
         _lcdClear
           _lcdInst
             _lcdNibble
         _printf
           ___aldiv (ARG)
           ___almod (ARG)
             ___aldiv (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftneg (ARG)
           ___ftsub (ARG)
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                       _analogRead (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _analogRead (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _analogRead (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                       _analogRead (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _analogRead (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _analogRead (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv (ARG)
           ___llmod (ARG)
             ___lldiv (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_ (ARG)
           __tdiv_to_l_ (ARG)
           _eepromRead (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNewline
               _lcdInst
                 _lcdNibble
             _lcdNibble
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _readKeypad
       _showRunMenu
         _lcdClear
           _lcdInst
             _lcdNibble
         _printf
           ___aldiv (ARG)
           ___almod (ARG)
             ___aldiv (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftneg (ARG)
           ___ftsub (ARG)
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                       _analogRead (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _analogRead (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _analogRead (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                       _analogRead (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _analogRead (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _analogRead (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv (ARG)
           ___llmod (ARG)
             ___lldiv (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_ (ARG)
           __tdiv_to_l_ (ARG)
           _eepromRead (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNewline
               _lcdInst
                 _lcdNibble
             _lcdNibble
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _readKeypad
       _showRunSelect
         _lcdClear
           _lcdInst
             _lcdNibble
         _printf
           ___aldiv (ARG)
           ___almod (ARG)
             ___aldiv (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftneg (ARG)
           ___ftsub (ARG)
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                       _analogRead (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _analogRead (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _analogRead (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                       _analogRead (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _analogRead (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _analogRead (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv (ARG)
           ___llmod (ARG)
             ___lldiv (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_ (ARG)
           __tdiv_to_l_ (ARG)
           _eepromRead (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNewline
               _lcdInst
                 _lcdNibble
             _lcdNibble
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _readKeypad
       _showRunStats
         _lcdClear
           _lcdInst
             _lcdNibble
         _printf
           ___aldiv (ARG)
           ___almod (ARG)
             ___aldiv (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftneg (ARG)
           ___ftsub (ARG)
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                       _analogRead (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _analogRead (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _analogRead (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                       _analogRead (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _analogRead (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _analogRead (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv (ARG)
           ___llmod (ARG)
             ___lldiv (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_ (ARG)
           __tdiv_to_l_ (ARG)
           _eepromRead (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNewline
               _lcdInst
                 _lcdNibble
             _lcdNibble
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _readKeypad
       _showRunTime
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         _lcdClear
           _lcdInst
             _lcdNibble
         _printf
           ___aldiv (ARG)
           ___almod (ARG)
             ___aldiv (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge (ARG)
             ___awtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftneg (ARG)
           ___ftsub (ARG)
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                       _analogRead (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _analogRead (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _analogRead (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                       _analogRead (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _analogRead (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _analogRead (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv (ARG)
           ___llmod (ARG)
             ___lldiv (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_ (ARG)
           __tdiv_to_l_ (ARG)
           _eepromRead (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNewline
               _lcdInst
                 _lcdNibble
             _lcdNibble
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _readKeypad
   _digitalRead
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _initTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _lcdHome
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___aldiv (ARG)
     ___almod (ARG)
       ___aldiv (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___awtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _eepromRead (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _readKeypad
   _showInterface
     _readPastRun
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _eepromRead
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _showDateTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _eepromRead (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showMainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _eepromRead (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _eepromRead (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _eepromRead (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _eepromRead (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunTime
       ___awtoft
         ___ftpack
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _eepromRead (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
       ___awtoft (ARG)
         ___ftpack
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
       ___almod (ARG)
         ___aldiv (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _eepromRead (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _startTimer

 _service (ROOT)
   _servoInterruptService
     i2___awmod
     i2_digitalWrite
       i2___awmod (ARG)
     i2_startTimer
       i2___awmod (ARG)
   i2_startTimer
     i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     38      7E       7       49.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     7B      7B       5       96.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3A      5C       1       73.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     155      34        0.0%
DATA                 0      0     155       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Mar 31 16:03:13 2017

                  ___altoft@exp 0033                               _n 0058               main@cylinderStart 0132  
          main@cylinderBackward 012E                   ___altoft@sign 0034                     _sortBattery 0E0A  
                showRunSelect@k 00EB                    ___awdiv@sign 002E             ___wmul@multiplicand 0033  
                   __CFG_BORV$3 000000                  showRunTime@run 00EB                    __CFG_CP0$OFF 000000  
                  __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000  
                   __CFG_OSC$HS 000000                _redirectingServo 017A                    ___ftadd@exp1 00AD  
                  ___ftadd@exp2 00AC             main@cylinderForward 012C                    ___ftadd@sign 00AB  
                           l160 1996                             l161 199E                             l402 2C76  
                           l171 1ADA                             l155 1714                             l405 39EC  
                           l237 3D88                             l149 215C                             l408 3A2A  
                           l192 11CC                             l273 3CE6                             l346 2AA6  
                           l371 3C52                             l276 3CF2                             l466 3A94  
                           l635 3080                             l459 3BBA                             l468 3AA0  
                           l469 3AAC                             l815 0818                             l824 0A04  
               ??_showInterface 00F3                             l775 0996                    __CFG_CPB$OFF 000000  
                           _PEN 007E2A                    __CFG_CPD$OFF 000000                             _SEN 007E28  
                           _n_C 0156                    ___awmod@sign 0028                             wreg 000FE8  
               showRunTime@time 00F0                    __CFG_LVP$OFF 000000                    ___ftdiv@cntr 0083  
                  ___ftdiv@sign 0088                    __CFG_WDT$OFF 000000                            l1111 3268  
                          l1140 1BA6                            l1134 1B44                            l1208 3D48  
                          l1321 392A                            l1138 1B7E                            l1149 1C7C  
                          l1158 1CA6                            l1079 27A0                            l1183 2678  
                          l1176 25EA                            l1177 2612                            l1169 288E  
                          l1258 35D2                            l1268 37F6                            l6012 1CD0  
                          l6004 1C62                            l6022 1D1E                            l6006 1C70  
                          l6110 354A                            l6032 2198                            l6200 14DE  
                          l5072 3B82                            l6114 3558                            l6106 3540  
                          l6130 367C                            l7010 3A8C                            l7002 3A66  
                          l5066 3B78                            l6052 2220                            l6212 1638  
                          l6204 1504                            l7020 3892                            l5084 3B96  
                          l6302 26C6                            l6150 36C2                            l6142 36AA  
                          l6134 368A                            l6126 3670                            l6062 225E  
                          l6038 21D2                            l6230 3DD2                            l5078 3B8E  
                          l5520 2E54                            l7112 2C0C                            l6240 2584  
                          l6136 3692                            l6056 223E                            l7032 38CC  
                          l5530 2E86                            l5514 2E3C                            l6082 34F2  
                          l6138 3696                            l6146 36B4                            l6066 227C  
                          l6218 16E2                            l7050 398A                            l7042 3964  
                          l7130 30CE                            l5098 3AB8                            l7202 2A1C  
                          l7108 2BF6                            l6404 24E0                            l6340 2776  
                          l6324 2738                            l6316 2708                            l6180 1F5C  
                          l6172 1E94                            l6500 0088                            l7140 310A  
                          l7300 2102                            l7220 2D6A                            l7212 2A74  
                          l5526 2E76                            l5542 2EC4                            l6422 2546  
                          l6414 2510                            l6246 25B0                            l6094 3518  
                          l7070 34D2                            l7062 31CE                            l7118 307C  
                          l7206 2A48                            l5528 2E82                            l6416 2520  
                          l6408 24F4                            l6432 3584                            l6336 2766  
                          l6280 264E                            l6096 3520                            l6088 3502  
                          l6520 0176                            l7136 30F2                            l7144 3116  
                          l7312 2158                            l7224 2DC0                            l7320 2CAC  
                          l5546 2EDA                            l5538 2EB6                            l5570 32DA  
                          l5562 32B8                            l7250 38F8                            l6362 33F6  
                          l6354 3B00                            l6418 252A                            l6434 3590  
                          l6346 278E                            l6098 3524                            l6194 1434  
                          l6610 0464                            l6530 0198                            l6514 0124  
                          l7306 213C                            l7322 2CB2                            l7162 2F30  
                          l6372 3452                            l6444 35C4                            l6436 3594  
                          l6460 37E8                            l6452 37B4                            l6348 279A  
                          l6276 263E                            l6700 081C                            l6620 04F4  
                          l6612 0494                            l6604 0428                            l6540 01E6  
                          l6524 0186                            l6508 00FC                            l7260 1FAC  
                          l7228 2DE8                            l7316 2C84                            l7180 2F6C  
                          l7172 2F52                            l5582 3322                            l5574 32FE  
                          l5566 32CA                            l5558 32A4                            l7254 391C  
                          l7246 38E6                            l6366 3426                            l6454 37C0  
                          l6286 2666                            l6710 0892                            l6614 04AA  
                          l6550 0224                            l6542 01F2                            l6526 018C  
                          l6518 0160                            l7270 2010                            l7174 2F58  
                          l7166 2F3E                            l7430 1272                            l7406 119C  
                          l7510 1A58                            l7502 19A6                            l5568 32D6  
                          l7248 38F2                            l5920 31F8                            l6456 37C4  
                          l6296 26A8                            l6288 2672                            l6800 0BAC  
                          l6640 05E4                            l6624 051A                            l6608 044E  
                          l6552 023E                            l6544 01F8                            l6536 01C0  
                          l6528 0192                            l7280 2064                            l7184 2F7A  
                          l7168 2F44                            l7424 1242                            l7416 11DC  
                          l7520 1A7C                            l5578 330C                            l5930 3254  
                          l5922 3202                            l6386 244E                            l6466 3996  
                          l6730 09BE                            l6722 0988                            l6706 0840  
                          l6634 0578                            l6570 02CC                            l6546 0210  
                          l6562 026E                            l6490 004E                            l7274 2026  
                          l7194 29C4                            l7178 2F66                            l7186 2F80  
                          l7418 1204                            l7354 0ECA                            l7506 1A40  
                          l5932 325E                            l5924 3220                            l5916 31EA  
                          l6468 39A2                            l6820 0C5C                            l6812 0C26  
                          l6716 096C                            l6660 06A2                            l6652 062A  
                          l6580 0312                            l6556 0256                            l6564 02B2  
                          l6484 0022                            l7380 10B6                            l6814 0C30  
                          l6806 0BE4                            l6718 097A                            l6670 06DE  
                          l6638 05DE                            l6494 0058                            l7286 20A4  
                          l7198 29F0                            l5928 3236                            l6832 0C9E  
                          l6808 0BEE                            l6744 0A26                            l6672 06F4  
                          l6656 067A                            l6488 0038                            l7296 20EC  
                          l7368 0FA0                            l5970 1B8C                            l6826 0C78  
                          l6770 0AC8                            l6754 0A76                            l6690 07D8  
                          l6682 073E                            l6666 06D0                            l6850 0DEA  
                          l6914 2864                            l7378 1088                            l7474 17BA  
                          l5964 1B52                            l6836 0CC6                            l6844 0DBA  
                          l6828 0C84                            l6756 0A7C                            l6748 0A4E  
                          l6676 0702                            l6596 03C0                            l7388 111C  
                          l6942 333E                            l6838 0D46                            l6846 0DCC  
                          l6790 0B48                            l6694 07E6                            l6678 0716  
                          l7398 116C                            l6952 33B8                            l5992 1C0C  
                          l5976 1B9C                            l6848 0DD4                            l6768 0AC2  
                          l6784 0B0E                            l6696 07FA                            l6688 07CA  
                          l6936 3C92                            l7488 17FE                            l6946 3354  
                          l5994 1C1A                            l5986 1BDE                            l6794 0B78  
                          l6786 0B20                            l6874 3606                            l5996 1C28  
                          l6876 3612                            l5998 1C34                            l6894 2816  
                          l6888 27E4                            l6994 3CDA                            _EEIF 007D0C  
                          STR_1 FFFD                            STR_2 FFF3                            STR_3 FFF9  
                          STR_4 FFD3                            STR_5 FFEB                            STR_6 FFB5  
                          STR_7 FFA4                            STR_8 FFD5                            STR_9 FFC6  
                          _LATA 000F89                            _LATB 000F8A                            _LATC 000F8B  
                          _LATD 000F8C                            _LATE 000F8D                    printf@tmpval 00D7  
                          u6031 2174                            u6051 21AE                            _PEIE 007F96  
                          u6311 2568                            u7050 0810                            u6331 2594  
                          _RCEN 007E2B                            u8110 1976                            u8120 1978  
                          u6521 242A                            u7411 27F8                            u6540 2474  
                          u5821 1AF2                            u5831 1B10                            u8207 18A6  
                          u7505 3A3E                            u6545 246A                            u8217 0E46  
                          u7506 3A40                            u8307 3DA0                            u8227 0EFC  
                          u8317 3DB2                            u8237 101A                            u6830 0358  
                          u8327 3820                            u7391 27C6                            u8247 122A  
                          u7480 39FC                            u8337 382E                            u8257 1262  
                          u7634 3164                            u8347 3854                            u6835 034C  
                          u7635 315C                            u8267 129C                            u8357 3862  
                          u8277 3D8C                            u8287 3BC6                            u7488 3A00  
                          u7824 29E0                            u8297 3BFA                            u7825 29DC  
                          u7834 2A0C                            u7835 2A08                            u7844 2A38  
                          u7764 2F16                            u7845 2A34                            u7765 2F10  
                          u7854 2A64                            u7855 2A60                            _RSEN 007E29  
                          _n_AA 0154                            _n_9V 0152                 showRunStats@run 00EB  
                          _main 1708                            _curr 0056                    ___ftpack@arg 0023  
                          _keys FEA5                    ___ftpack@exp 0026                            _time 014C  
                          fsr0h 000FEA                            fsr1h 000FE2                            fsr2h 000FDA  
                          fsr0l 000FE9                            indf2 000FDF                            fsr1l 000FE1  
                          fsr2l 000FD9                            btemp 005D                 ??_showRunSelect 003B  
                          prodh 000FF4                            prodl 000FF3                            start 000E  
                 __CFG_IESO$OFF 000000                   __CFG_MCLRE$ON 000000                    ___ftmul@cntr 0096  
                  ___param_bank 000000                    ___ftmul@sign 0097                    ___fttol@exp1 00BC  
                  ___fttol@lval 00B8            __end_ofi2_startTimer 3B76                    ?_readPastRun 0080  
          __end_of_angleToPulse 2414                 __end_of___aldiv 2EEC                 __end_of___almod 3334  
                         ?_main 0001                           _ACKEN 007E2C                           _ACKDT 007E2D  
               __end_of___awdiv 3562                           _EEADR 000FA9                 __end_of___ftadd 1D44  
                         STR_10 FFE3                           STR_11 FF08                           STR_12 FF93  
                         STR_20 FF4F                           STR_21 FF2C                           STR_13 FEF6  
                         STR_14 FF71                           STR_22 FEE3                           STR_23 FF3E  
                         STR_15 FF1A                           STR_16 FF60                           STR_17 FEBD  
                         STR_18 FF82                           STR_19 FED0                 __end_of___awmod 36CC  
               __end_of___ftdiv 28C2         ??_servoInterruptService 0010                 __end_of___ftneg 3D56  
               __end_of___lldiv 35E4                 __end_of___ftmul 22BC                           _T0CON 000FD5  
               ___awdiv@divisor 002B                           _T1CON 000FCD                 __end_of___llmod 3808  
               __end_of___ftsub 3B2A                 __end_of___fttol 2558                           _T3CON 000FB1  
               __end_of___lwmod 3934                           i2l211 2B56                           i2l206 2B5A  
                         i2l207 2B22                           i2l208 2B34                           i2l466 3B2C  
                         i2l468 3B38                           i2l469 3B44                 ___awdiv@counter 002D  
                         _TMR0H 000FD7                           _TMR1H 000FCF                           _TMR0L 000FD6  
                         _TMR3H 000FB3                           _TMR1L 000FCE                           _TMR3L 000FB2  
                         _PORTA 000F80                           _PORTB 000F81                           _PORTC 000F82  
                         _PORTD 000F83                           _TRISA 000F92                           _TRISB 000F93  
                         _TRISC 000F94                           _TRISD 000F95                           _TRISE 000F96  
                 __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                 __end_of_lcdHome 3E16  
                  ___lltoft@exp 0033                   _conveyorServo 0162                 __end_of_lcdInst 3DBC  
                __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000  
                __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                 __end_of_initLCD 3C06  
                __CFG_EBTRB$OFF 000000                           _debug 1FA4                   ___awtoft@sign 002E  
                         _angle 0044                 __end_of_dpowers FE37                           _count 0054  
                         _scale 12F2                 __end_of_isdigit 3DDA                  eepromWrite@ien 0087  
                 ___ftpack@sign 0027                           _pulse 0138                           _putch 3D78  
                         pclath 000FFA                           tablat 000FF5                 __end_of_service 2B96  
                         status 000FD8              __size_ofi2___awmod 0070                  __CFG_PBADEN$ON 000000  
          __end_of_digitalWrite 2FB4                 __initialization 373C                    __end_of_main 1ADC  
                  __end_of_keys FEB6                          ??_main 011F                   ___fttol@sign1 00B7  
                 __activetblptr 000002            __size_of_digitalRead 00EA            __size_of__tdiv_to_l_ 0132  
                  _stoppingTime 0160                 i2digitalWrite@p 000E                          ?_debug 0001  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
              __end_of___altoft 365C                ___llmod@dividend 0030                          ?_scale 0098  
                        _ADRESH 000FC4                          _EEADRH 000FAA                          _ADRESL 000FC3  
                        _EEDATA 000FA8                          _EECON1 000FA6                          _EECON2 000FA7  
              ___awdiv@dividend 0029                __end_of___awtoft 3CB6                          ?_putch 0001  
              __end_of___ftpack 3288                __end_of___lltoft 39EC                          _INT0IE 007F94  
                        _INT0IF 007F91                          _INT1IE 007F83                          _INT1IF 007F80  
                  sortBattery@V 0116                    sortBattery@i 0119                          i2l5220 3006  
                        i2l5222 300C                          i2l5232 302E                          i2l5216 2FF8  
                        i2l5240 3048                          i2l5234 3034                          i2l5226 301A  
                        i2l5228 3020                          i2l5238 3042                          i2l5254 3B50  
                        i2l5280 3706                          i2l5272 36EC                          i2l5292 3732  
                        i2l5284 371A                          i2l5276 36FA                          i2l5268 36E0  
                        i2l5278 3702                          i2l5288 3724                          i2l5494 29BE  
                        _TMR0IE 007F95                          _TMR0IF 007F92                          _TMR1IE 007CE8  
                        _TMR1IF 007CF0                          _TMR3IE 007D01                          _SSPADD 000FC8  
                        _TRISC3 007CA3                          _TRISC4 007CA4                          _SSPBUF 000FC9  
              __end_of_lcdClear 3E26               _angleToPulse$1434 00CD                  __CFG_XINST$OFF 000000  
          __size_of_eepromWrite 0056                __end_of__powers_ FE85                          ___ftge 33C6  
                     ??___aldiv 002B                       ??___almod 0039                          ___wmul 3D0C  
                     ??___awdiv 002D                       ??___ftadd 00A8                  __CFG_STVREN$ON 000000  
                     ??___awmod 0027                       ??___ftdiv 0080                       ??___ftneg 0026  
                     ??___lldiv 002B                       ??___ftmul 008F                       ??___llmod 0038  
                     ??___ftsub 003B                       ??___fttol 00B2                       ??___lwmod 003B  
                        debug@i 0117                          debug@n 010E                          _fround 1D44  
                        clear_0 3782                          clear_1 378E                 eepromWrite@data 0080  
              ___awdiv@quotient 002F                 ___awmod@divisor 0025                       ??_lcdHome 0027  
               ___awmod@counter 0027                          _servos 0140                       ??_lcdInst 0025  
                        _printf 0012                __end_of_pinSetup 3C46                __end_of_setAngle 2E20  
             analogRead@channel 0023           ___ftmul@f3_as_product 0093                       ??_initLCD 0027  
                  __pdataCOMRAM 003B                       ??_isdigit 0023                 readPastRun@data 0082  
             __end_ofi2___awmod 373C                   setAngle@angle 00D6                    __mediumconst FE0E  
                  ?_showRunMenu 0001                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8                    ?_showRunTime 00EB                   setAngle@motor 00D4  
                     ??_service 0014                  i2___awmod@sign 0006                      __accesstop 0080  
       __end_of__initialization 3794                      ___altoft@c 002B                      ___ftadd@f1 00A2  
                    ___ftadd@f2 00A5                      ___ftge@ff1 002F                      ___ftge@ff2 0032  
                 ___rparam_used 000001                      ___ftdiv@f1 0035                      ___ftdiv@f2 0038  
                    ___ftdiv@f3 0084                      ___ftneg@f1 0023                      ___awtoft@c 002B  
         __size_ofi2_startTimer 004C                      ___ftmul@f1 0089                      ___ftmul@f2 008C  
                    ___ftsub@f1 00AE                      ___ftsub@f2 00B1                      ___fttol@f1 00AE  
          __end_of_happynewyear FEBD                  __pcstackCOMRAM 0001           __size_of_angleToPulse 0158  
                  __pidataBANK1 3D56                   __end_of_debug 215E                      ___lltoft@c 002B  
                 _cylinderMotor 016A                   __end_of_scale 1708                    ?_sortBattery 0001  
                 __end_of_putch 3D9A              __size_of_lcdNibble 0066                      __div_to_l_ 268A  
                    _debug$1432 0112               eepromRead@address 0037            __size_of_readPastRun 0092  
                       ??_debug 00F9                 __div_to_l_@exp1 002E                 __div_to_l_@cntr 002D  
                       ??_scale 003B                 __div_to_l_@quot 0029                         ??_putch 0027  
                  i2_startTimer 3B2A                      __pbssBANK1 0138                    _angleToPulse 22BC  
         __size_of_digitalWrite 00C8              __size_of_initTimer 004A              __size_of_initServo 00DC  
                    _analogRead 3C46                   __div_to_l_@f1 0023                   __div_to_l_@f2 0026  
                       ?___ftge 002F                         ?___wmul 0031                _sortBattery$1433 0100  
         sortBattery@resolution 010C                     saveNewRun@i 008D                       ?___altoft 002B  
                   saveNewRun@n 008B                         ?_fround 0098                      _lcdNewline 3E16  
                     ?___awtoft 002B                       ?___ftpack 0023                         ?_printf 00BD  
                     ?___lltoft 002B                      _eepromRead 3DDA  __size_of_servoInterruptService 0100  
 __end_of_servoInterruptService 29C2           __end_of_showInterface 312C               i2startTimer@timer 0007  
                     ?_lcdClear 0001                angleToPulse@a000 00D0                angleToPulse@a180 00C9  
                  _digitalWrite 2EEC                         _SSPCON1 000FC6                         _SSPCON2 000FC5  
                       _SSPSTAT 000FC7         __size_ofi2_digitalWrite 00C8                         _V_LIM_C 0041  
           main@lastBatteryTime 0130                       ?_pinSetup 0001                       ?_setAngle 00D4  
             __end_of_lcdNibble 386E               __end_of__npowers_ FE5E                         __Hparam 0000  
                    _scale$1437 009B           __end_of_showRunSelect 38D2                         __Lparam 0000  
                    debug@i_287 0115                    readPastRun@i 0090                         ___aldiv 2E20  
                       ___almod 3288                 __size_of___ftge 0090                         ___awdiv 34DE  
                       ___ftadd 1ADC                         ___awmod 365C                      _readKeypad 3CE6  
                       ___ftdiv 27B2                         ___ftneg 3D32                         ___lldiv 3562  
               __size_of___wmul 0026                         ___ftmul 215E                         ___llmod 37A2  
                       ___ftsub 3ADE                         ___fttol 2414                         _n_OTHER 0158  
                       ___lwmod 38D2                      ??___altoft 002F                         __pcinit 373C  
                    ??___awtoft 002E                      ??___ftpack 0028                 __size_of_fround 0260  
                       __ramtop 1000                         _lcdHome 3E0E                         _lcdInst 3D9A  
                    ??___lltoft 002F                         __ptext0 1708                         __ptext1 0E0A  
                       __ptext2 2EEC                         __ptext3 29C2                         __ptext4 3C46  
                       __ptext5 3E0E                         __ptext6 2C78                         __ptext7 3A92  
                       __ptext8 2D54                         __ptext9 22BC                   ?_showDateTime 0001  
               __size_of_printf 0DF8                         _padPin1 016E                         _padPin2 0172  
                       _padPin3 0148                   startTimer@val 0025                         _initLCD 3BC0  
             __end_of_hexpowers FEA5                     ?__div_to_l_ 0023                         _lastKey 005C  
             __end_of_initTimer 3BC0               __end_of_initServo 2D54                         _dpowers FE0F  
                       _isdigit 3DBC                ___awmod@dividend 0023                ___aldiv@dividend 0023  
                    ??_lcdClear 0027                   ?_showMainMenu 0001                         _service 0008  
          __size_of_showRunMenu 005C                  __pintcode_body 2AAC            __size_of_showRunTime 00AE  
          end_of_initialization 3794                      _saveNewRun 2B96                   __Lmediumconst FE0E  
                       int_func 2AAC                  digitalRead@pin 0023                     ?_analogRead 0023  
                    ??_pinSetup 0023                      ??_setAngle 00D8                 ___lldiv@divisor 0027  
               ___lldiv@counter 002F                  setAngle@period 00DA                   ?_showRunStats 00EB  
                       printf@c 00EA                         printf@f 00BD                ___aldiv@quotient 002D  
                       postdec1 000FE5                         postdec2 000FDD                 _batteryDetected 0150  
                       postinc0 000FEE                         postinc2 000FDE                  __tdiv_to_l_@f1 0023  
                __tdiv_to_l_@f2 0026                   ??_digitalRead 0025                     ?_lcdNewline 0001  
                 ??__tdiv_to_l_ 0029                  ??_showDateTime 003B                       _PORTBbits 000F81  
          __size_of_sortBattery 04E8                showInterface@key 00F8                showInterface@run 00F6  
                   ?_eepromRead 0037                  ??_showMainMenu 003B             _redirectAngle_OTHER 004E  
                  _happynewyear FEB6              angleToPulse@offset 00C5              sortBattery@V_float 0102  
                     i2___awmod 36CC                      _startTimer 3A92                   ??_eepromWrite 0086  
                   ___ftdiv@exp 0087                     printf@width 00E4             __size_of__div_to_l_ 0128  
                ??_showRunStats 003B                     ___ftmul@exp 0092                     ?_readKeypad 0001  
                __end_of___ftge 3456                  __end_of___wmul 3D32                   __pidataCOMRAM 3DF4  
                __end_of_fround 1FA4                  __end_of_printf 0E0A             __size_of_analogRead 0038  
           start_initialization 373C             __end_of_digitalRead 2AAC             __end_of__tdiv_to_l_ 268A  
                initServo@angle 00E0                  initTimer@timer 0023                  initServo@motor 00DE  
                    ?i2___awmod 0001                     ?_saveNewRun 0089                  i2_digitalWrite 2FB4  
           __size_of_lcdNewline 0008                 ___llmod@divisor 0034                 ___llmod@counter 0038  
           __size_of_eepromRead 001A                      initServo@i 00E6                        ??___ftge 0035  
           __end_of_eepromWrite 3A42                        ??___wmul 0035                     __pdataBANK1 015C  
              __CFG_LPT1OSC$OFF 000000                        ??_fround 003B                   ??_readPastRun 003B  
                readPastRun@run 0080                        ??_printf 00C7               __size_of___altoft 0078  
                    fround@prec 00A1               __size_of___awtoft 0038               __size_of___ftpack 00AE  
             __size_of___lltoft 005C                     __pbssCOMRAM 0054                   __pcstackBANK0 0080  
                 __pcstackBANK1 0100          __end_ofi2_digitalWrite 307C          sortBattery@targetAngle 0114  
                  _isdigit$1066 0024                     ?_startTimer 0023                    debug@run_286 0110  
             __size_of_lcdClear 0008             __size_of_readKeypad 0026            __end_of_showDateTime 3CE6  
             i2digitalWrite@pin 0007               i2digitalWrite@val 0009               __CFG_CCP2MX$PORTC 000000  
             __size_of_pinSetup 0040            __end_of_showMainMenu 3A92               __size_of_setAngle 00CC  
                     __pintcode 0008                   __pmediumconst FE0E                       _lcdNibble 3808  
                      ?___aldiv 0023                        ?___almod 0031                        ?___awdiv 0029  
                      ?___ftadd 00A2                        ?___awmod 0023                        ?___ftdiv 0035  
                      ?___ftneg 0023                        ?___lldiv 0023                        ?___ftmul 0089  
                      ?___llmod 0030                        ?___ftsub 00AE                       __npowers_ FE37  
                      ?___fttol 00AE                        ?___lwmod 0080                     _digitalRead 29C2  
           __size_of_saveNewRun 00E2                ___almod@dividend 0031                        ?_lcdHome 0001  
                      ?_lcdInst 0001                     __tdiv_to_l_ 2558                    ??__div_to_l_ 0029  
                      ?_initLCD 0001                 startTimer@timer 0023                        ?_isdigit 0001  
           __end_of_readPastRun 33C6            __end_of_showRunStats 34DE                        ?_service 0001  
                     _hexpowers FE85                       _initTimer 3B76                       _initServo 2C78  
               ?i2_digitalWrite 0007           _servoInterruptService 28C2                  __size_of_debug 01BA  
                   ??i2___awmod 0005                  __size_of_scale 0416                  __size_of_putch 0022  
                      _AA_float 0050              eepromWrite@address 0082                 ___aldiv@divisor 0027  
               ___aldiv@counter 002B                  sortBattery@Vcc 0109                  ___wmul@product 0035  
                      _LATDbits 000F8C                    ??_analogRead 0027                     _eepromWrite 39EC  
            __end_of__div_to_l_ 27B2                        i2u514_44 2FDE                        i2u514_45 2FD8  
        __size_of_showInterface 00B0                __CFG_WDTPS$32768 000000                      ?_lcdNibble 0001  
                _padAngle_CLOSE 0046                       _terminate 015A                   digitalWrite@p 002A  
                    service@key 0022                    ??_lcdNewline 0027             __size_of_startTimer 004C  
             angleToPulse@angle 00BD                 main@cylinderDur 0134               ___wmul@multiplier 0031  
                 lcdNibble@data 0024                    ??_eepromRead 003B                      printf@flag 00E6  
                 lcdNibble@temp 0023                      printf@fval 00DD                      printf@prec 00E8  
                 ??_showRunMenu 003B                   ??_showRunTime 00ED              __end_of_analogRead 3C7E  
                      _V_LIM_AA 003E                        _V_LIM_9V 003B          __size_of_showRunSelect 0064  
                saveNewRun@data 0089                      ?_initTimer 0023                      ?_initServo 00DE  
             sortBattery@signal 0107        sortBattery@pos_v_counter 0105                       copy_data0 3750  
                     copy_data1 3770              i2___awmod@dividend 0001              __end_of_lcdNewline 3E1E  
                 readKeypad@key 0023                        __Hrparam 0000                        __Lrparam 0000  
            __end_of_eepromRead 3DF4              __CFG_BOREN$SBORDIS 000000                    ??_readKeypad 0023  
                 ??_sortBattery 00EB                __size_of___aldiv 00CC                __size_of___almod 00AC  
              __size_of___awdiv 0084                __size_of___ftadd 0268                __size_of___awmod 0070  
              __size_of___ftdiv 0110                __size_of___ftneg 0024                __size_of___lldiv 0082  
                      ___altoft 35E4                __size_of___ftmul 015E                __size_of___llmod 0066  
              __size_of___ftsub 004C                __size_of___fttol 0144                __size_of___lwmod 0062  
                      ___awtoft 3C7E                        ___ftpack 31DA                     _readPastRun 3334  
                   _fround$1435 009E                     _fround$1436 009B                     _cylinderDir 0166  
                      ___lltoft 3990                __size_of_lcdHome 0008                __size_of_lcdInst 0022  
                     setAngle@i 00DC                __size_of_initLCD 0046                __size_of_isdigit 001E  
        ?_servoInterruptService 0001                   _showInterface 307C                        _lcdClear 3E1E  
                      __ptext10 35E4                        __ptext11 3B76                        __ptext20 3A42  
                      __ptext12 1FA4                        __ptext21 3CB6                        __ptext13 307C  
                      __ptext30 365C                        __ptext22 3CE6                        __ptext14 312C  
                      __ptext31 34DE                        __ptext23 0012                        __ptext15 27B2  
                      __ptext40 31DA                        __ptext32 2558                        __ptext24 12F2  
                      __ptext16 3C7E                        __ptext41 3D32                        __ptext33 268A  
                      __ptext25 3D78                        __ptext17 3456                        __ptext50 3BC0  
                      __ptext42 33C6                        __ptext34 3990                        __ptext26 3E16  
                      __ptext18 386E                        __ptext51 3D9A                        __ptext43 3E1E  
                      __ptext35 37A2                        __ptext27 3DBC                        __ptext19 3934  
                      __ptext60 36CC                        __ptext52 3808                        __ptext44 3334  
                      __ptext36 3562                        __ptext28 1D44                        __ptext53 38D2  
                      __ptext45 2B96                        __ptext37 2414                        __ptext29 215E  
                      __ptext54 3288                        __ptext46 39EC                        __ptext38 3ADE  
                      __ptext55 2E20                        __ptext47 3DDA                        __ptext39 1ADC  
                      __ptext48 3D0C                        __ptext57 28C2                        __ptext49 3C06  
                      __ptext58 3B2A                        __ptext59 2FB4           __size_of_showDateTime 0030  
                      __powers_ FE5E                __size_of_service 2B8E                 i2startTimer@val 0009  
               ___almod@divisor 0035                    ??_saveNewRun 003B                   ?i2_startTimer 0007  
                      _padServo 0176                 ___almod@counter 0039             __end_of_showRunMenu 3990  
            __end_of_readKeypad 3D0C             __end_of_showRunTime 31DA                   ?_angleToPulse 00BD  
                      debug@key 0114                        debug@run 0100                   __size_of_main 03D4  
         __size_of_showMainMenu 0050                        _pinSetup 3C06                        _setAngle 2D54  
                 _showRunSelect 386E                        _prevTime 005A                sortBattery@V_312 011C  
                   ??_lcdNibble 0023                  showInterface@n 00F4                   _padAngle_OPEN 0048  
                      int$flags 005D                sortBattery@i_314 0112                sortBattery@V_max 010F  
                     printf@idx 00D0                       printf@len 00D3                       printf@exp 00DB  
                     printf@val 00E0                        main@prev 0136                   showMainMenu@k 00EB  
            __end_of_saveNewRun 2C78           __size_of_showRunStats 0088                    _showDateTime 3CB6  
             i2___awmod@divisor 0003                       putch@data 0027               i2___awmod@counter 0005  
           __end_of_sortBattery 12F2                      _INTCONbits 000FF2                  ?_showInterface 0001  
                 ?_digitalWrite 0023                     ??_initTimer 0025                     ??_initServo 00E2  
                      isdigit@c 0025                    _showMainMenu 3A42                        scale@scl 009E  
                ??i2_startTimer 000D                    ??_startTimer 0029                        intlevel2 0000  
              __tdiv_to_l_@exp1 0031                __tdiv_to_l_@cntr 0030                  ??_angleToPulse 00C1  
              __tdiv_to_l_@quot 002C                ___lwmod@dividend 0080                ___lldiv@dividend 0023  
                ?_showRunSelect 0001                    _showRunStats 3456                _redirectAngle_AA 015E  
              _redirectAngle_9V 004A                        printf@ap 00D5                        printf@cp 00D1  
                   lcdInst@data 0026                    ?_digitalRead 0023                    ?__tdiv_to_l_ 0023  
            __end_of_startTimer 3ADE                     _printf$1438 00CD                ??i2_digitalWrite 000B  
              ___lldiv@quotient 002B                 ___lwmod@divisor 0082                 ___lwmod@counter 0084  
                ??_digitalWrite 0027                    ___aldiv@sign 002C                     _showRunMenu 3934  
                   _showRunTime 312C                 _redirectAngle_C 004C                _padAngle_NEUTRAL 015C  
               digitalWrite@pin 0023                 digitalWrite@val 0025                    ___almod@sign 003A  
                  ?_eepromWrite 0080                    showRunMenu@k 00EC                  showRunMenu@key 00EB  
