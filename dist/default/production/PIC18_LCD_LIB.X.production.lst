

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Mar 26 12:59:24 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    88                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    89                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    90  0000                     
    91                           ; Version 1.40
    92                           ; Generated 01/12/2016 GMT
    93                           ; 
    94                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    95                           ; All rights reserved.
    96                           ; 
    97                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    98                           ; 
    99                           ; Redistribution and use in source and binary forms, with or without modification, are
   100                           ; permitted provided that the following conditions are met:
   101                           ; 
   102                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   103                           ;        conditions and the following disclaimer.
   104                           ; 
   105                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   106                           ;        of conditions and the following disclaimer in the documentation and/or other
   107                           ;        materials provided with the distribution.
   108                           ; 
   109                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   110                           ;        software without specific prior written permission.
   111                           ; 
   112                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   113                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   114                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   115                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   116                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   117                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   118                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   119                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   120                           ; 
   121                           ; 
   122                           ; Code-generator required, PIC18F4620 Definitions
   123                           ; 
   124                           ; SFR Addresses
   125  0000                     
   126                           	psect	idataBANK1
   127  00506A                     __pidataBANK1:
   128                           	opt stack 0
   129                           
   130                           ;initializer for _V_LIM_9V
   131  00506A  E1                 	db	225
   132  00506B  FA                 	db	250
   133  00506C  3F                 	db	63
   134                           
   135                           ;initializer for _V_LIM_AA
   136  00506D  E9                 	db	233
   137  00506E  A6                 	db	166
   138  00506F  3E                 	db	62
   139                           
   140                           ;initializer for _V_LIM_C
   141  005070  33                 	db	51
   142  005071  A3                 	db	163
   143  005072  3F                 	db	63
   144                           
   145                           ;initializer for _angle
   146  005073  005A               	dw	90
   147                           
   148                           ;initializer for _nothingImportant
   149  005075  FFFF               	dw	65535
   150                           
   151                           ;initializer for _padAngle_CLOSE
   152  005077  001E               	dw	30
   153                           
   154                           ;initializer for _padAngle_NEUTRAL
   155  005079  003C               	dw	60
   156                           
   157                           ;initializer for _padAngle_OPEN
   158  00507B  00B4               	dw	180
   159                           
   160                           ;initializer for _period
   161  00507D  797C               	dw	31100
   162                           
   163                           ;initializer for _redirectAngle_9V
   164  00507F  0076               	dw	118
   165                           
   166                           ;initializer for _redirectAngle_AA
   167  005081  008A               	dw	138
   168                           
   169                           ;initializer for _redirectAngle_C
   170  005083  00A6               	dw	166
   171                           
   172                           ;initializer for _redirectAngle_OTHER
   173  005085  0099               	dw	153
   174                           
   175                           ;initializer for _AA_float
   176  005087  0002               	dw	2
   177  005089  0005               	dw	5
   178                           
   179                           ;initializer for _conveyorServo
   180  00508B  0002               	dw	2
   181  00508D  0002               	dw	2
   182                           
   183                           ;initializer for _cylinderMotor
   184  00508F  0002               	dw	2
   185  005091  0000               	dw	0
   186                           
   187                           ;initializer for _padPin1
   188  005093  0002               	dw	2
   189  005095  0006               	dw	6
   190                           
   191                           ;initializer for _padPin2
   192  005097  0002               	dw	2
   193  005099  0007               	dw	7
   194                           
   195                           ;initializer for _padServo
   196  00509B  0002               	dw	2
   197  00509D  0001               	dw	1
   198                           
   199                           ;initializer for _redirectingServo
   200  00509F  0003               	dw	3
   201  0050A1  0000               	dw	0
   202                           
   203                           	psect	mediumconst
   204  00FE30                     __pmediumconst:
   205                           	opt stack 0
   206  00FE30  00                 	db	0
   207  00FE31                     _dpowers:
   208                           	opt stack 0
   209  00FE31  0001               	dw	1
   210  00FE33  0000               	dw	0
   211  00FE35  000A               	dw	10
   212  00FE37  0000               	dw	0
   213  00FE39  0064               	dw	100
   214  00FE3B  0000               	dw	0
   215  00FE3D  03E8               	dw	1000
   216  00FE3F  0000               	dw	0
   217  00FE41  2710               	dw	10000
   218  00FE43  0000               	dw	0
   219  00FE45  86A0               	dw	34464
   220  00FE47  0001               	dw	1
   221  00FE49  4240               	dw	16960
   222  00FE4B  000F               	dw	15
   223  00FE4D  9680               	dw	38528
   224  00FE4F  0098               	dw	152
   225  00FE51  E100               	dw	57600
   226  00FE53  05F5               	dw	1525
   227  00FE55  CA00               	dw	51712
   228  00FE57  3B9A               	dw	15258
   229  00FE59                     __end_of_dpowers:
   230                           	opt stack 0
   231  00FE59                     __npowers_:
   232                           	opt stack 0
   233  00FE59  00                 	db	0
   234  00FE5A  80                 	db	128
   235  00FE5B  3F                 	db	63
   236  00FE5C  CD                 	db	205
   237  00FE5D  CC                 	db	204
   238  00FE5E  3D                 	db	61
   239  00FE5F  D7                 	db	215
   240  00FE60  23                 	db	35
   241  00FE61  3C                 	db	60
   242  00FE62  12                 	db	18
   243  00FE63  83                 	db	131
   244  00FE64  3A                 	db	58
   245  00FE65  B7                 	db	183
   246  00FE66  D1                 	db	209
   247  00FE67  38                 	db	56
   248  00FE68  C6                 	db	198
   249  00FE69  27                 	db	39
   250  00FE6A  37                 	db	55
   251  00FE6B  38                 	db	56
   252  00FE6C  86                 	db	134
   253  00FE6D  35                 	db	53
   254  00FE6E  C0                 	db	192
   255  00FE6F  D6                 	db	214
   256  00FE70  33                 	db	51
   257  00FE71  CC                 	db	204
   258  00FE72  2B                 	db	43
   259  00FE73  32                 	db	50
   260  00FE74  70                 	db	112
   261  00FE75  89                 	db	137
   262  00FE76  30                 	db	48
   263  00FE77  E7                 	db	231
   264  00FE78  DB                 	db	219
   265  00FE79  2E                 	db	46
   266  00FE7A  E5                 	db	229
   267  00FE7B  3C                 	db	60
   268  00FE7C  1E                 	db	30
   269  00FE7D  42                 	db	66
   270  00FE7E  A2                 	db	162
   271  00FE7F  0D                 	db	13
   272  00FE80                     __end_of__npowers_:
   273                           	opt stack 0
   274  00FE80                     __powers_:
   275                           	opt stack 0
   276  00FE80  00                 	db	0
   277  00FE81  80                 	db	128
   278  00FE82  3F                 	db	63
   279  00FE83  00                 	db	0
   280  00FE84  20                 	db	32
   281  00FE85  41                 	db	65
   282  00FE86  00                 	db	0
   283  00FE87  C8                 	db	200
   284  00FE88  42                 	db	66
   285  00FE89  00                 	db	0
   286  00FE8A  7A                 	db	122
   287  00FE8B  44                 	db	68
   288  00FE8C  40                 	db	64
   289  00FE8D  1C                 	db	28
   290  00FE8E  46                 	db	70
   291  00FE8F  50                 	db	80
   292  00FE90  C3                 	db	195
   293  00FE91  47                 	db	71
   294  00FE92  24                 	db	36
   295  00FE93  74                 	db	116
   296  00FE94  49                 	db	73
   297  00FE95  97                 	db	151
   298  00FE96  18                 	db	24
   299  00FE97  4B                 	db	75
   300  00FE98  BC                 	db	188
   301  00FE99  BE                 	db	190
   302  00FE9A  4C                 	db	76
   303  00FE9B  6B                 	db	107
   304  00FE9C  6E                 	db	110
   305  00FE9D  4E                 	db	78
   306  00FE9E  03                 	db	3
   307  00FE9F  15                 	db	21
   308  00FEA0  50                 	db	80
   309  00FEA1  79                 	db	121
   310  00FEA2  AD                 	db	173
   311  00FEA3  60                 	db	96
   312  00FEA4  F3                 	db	243
   313  00FEA5  49                 	db	73
   314  00FEA6  71                 	db	113
   315  00FEA7                     __end_of__powers_:
   316                           	opt stack 0
   317  00FEA7                     _hexpowers:
   318                           	opt stack 0
   319  00FEA7  0001               	dw	1
   320  00FEA9  0000               	dw	0
   321  00FEAB  0010               	dw	16
   322  00FEAD  0000               	dw	0
   323  00FEAF  0100               	dw	256
   324  00FEB1  0000               	dw	0
   325  00FEB3  1000               	dw	4096
   326  00FEB5  0000               	dw	0
   327  00FEB7  0000               	dw	0
   328  00FEB9  0001               	dw	1
   329  00FEBB  0000               	dw	0
   330  00FEBD  0010               	dw	16
   331  00FEBF  0000               	dw	0
   332  00FEC1  0100               	dw	256
   333  00FEC3  0000               	dw	0
   334  00FEC5  1000               	dw	4096
   335  00FEC7                     __end_of_hexpowers:
   336                           	opt stack 0
   337  00FEC7                     _keys:
   338                           	opt stack 0
   339  00FEC7  31                 	db	49
   340  00FEC8  32                 	db	50
   341  00FEC9  33                 	db	51
   342  00FECA  41                 	db	65
   343  00FECB  34                 	db	52
   344  00FECC  35                 	db	53
   345  00FECD  36                 	db	54
   346  00FECE  42                 	db	66
   347  00FECF  37                 	db	55
   348  00FED0  38                 	db	56
   349  00FED1  39                 	db	57
   350  00FED2  43                 	db	67
   351  00FED3  2A                 	db	42
   352  00FED4  30                 	db	48
   353  00FED5  23                 	db	35
   354  00FED6  44                 	db	68
   355  00FED7  00                 	db	0
   356  00FED8                     __end_of_keys:
   357                           	opt stack 0
   358  00FED8                     _happynewyear:
   359                           	opt stack 0
   360  00FED8  00                 	db	0
   361  00FED9  59                 	db	89
   362  00FEDA  03                 	db	3
   363  00FEDB  01                 	db	1
   364  00FEDC  13                 	db	19
   365  00FEDD  04                 	db	4
   366  00FEDE  17                 	db	23
   367  00FEDF                     __end_of_happynewyear:
   368                           	opt stack 0
   369  0000                     _ADCON0	set	4034
   370  0000                     _ADCON1	set	4033
   371  0000                     _ADCON2	set	4032
   372  0000                     _ADRESH	set	4036
   373  0000                     _ADRESL	set	4035
   374  0000                     _EEADR	set	4009
   375  0000                     _EEADRH	set	4010
   376  0000                     _EECON1	set	4006
   377  0000                     _EECON2	set	4007
   378  0000                     _EEDATA	set	4008
   379  0000                     _INTCONbits	set	4082
   380  0000                     _LATA	set	3977
   381  0000                     _LATB	set	3978
   382  0000                     _LATC	set	3979
   383  0000                     _LATD	set	3980
   384  0000                     _LATDbits	set	3980
   385  0000                     _LATE	set	3981
   386  0000                     _PORTA	set	3968
   387  0000                     _PORTB	set	3969
   388  0000                     _PORTBbits	set	3969
   389  0000                     _PORTC	set	3970
   390  0000                     _PORTD	set	3971
   391  0000                     _SSPADD	set	4040
   392  0000                     _SSPBUF	set	4041
   393  0000                     _SSPCON1	set	4038
   394  0000                     _SSPCON2	set	4037
   395  0000                     _SSPSTAT	set	4039
   396  0000                     _T0CON	set	4053
   397  0000                     _T1CON	set	4045
   398  0000                     _T3CON	set	4017
   399  0000                     _TMR0H	set	4055
   400  0000                     _TMR0L	set	4054
   401  0000                     _TMR1H	set	4047
   402  0000                     _TMR1L	set	4046
   403  0000                     _TMR3H	set	4019
   404  0000                     _TMR3L	set	4018
   405  0000                     _TRISA	set	3986
   406  0000                     _TRISB	set	3987
   407  0000                     _TRISC	set	3988
   408  0000                     _TRISD	set	3989
   409  0000                     _TRISE	set	3990
   410  0000                     _ACKDT	set	32301
   411  0000                     _ACKEN	set	32300
   412  0000                     _EEIF	set	32012
   413  0000                     _INT0IE	set	32660
   414  0000                     _INT0IF	set	32657
   415  0000                     _INT1IE	set	32643
   416  0000                     _INT1IF	set	32640
   417  0000                     _PEIE	set	32662
   418  0000                     _PEN	set	32298
   419  0000                     _RCEN	set	32299
   420  0000                     _RSEN	set	32297
   421  0000                     _SEN	set	32296
   422  0000                     _TMR0IE	set	32661
   423  0000                     _TMR0IF	set	32658
   424  0000                     _TMR1IE	set	31976
   425  0000                     _TMR1IF	set	31984
   426  0000                     _TMR3IE	set	32001
   427  0000                     _TRISC3	set	31907
   428  0000                     _TRISC4	set	31908
   429  00FEDF  25                 	db	37
   430  00FEE0  63                 	db	99	;'c'
   431  00FEE1  29                 	db	41
   432  00FEE2  20                 	db	32
   433  00FEE3  74                 	db	116	;'t'
   434  00FEE4  69                 	db	105	;'i'
   435  00FEE5  6D                 	db	109	;'m'
   436  00FEE6  65                 	db	101	;'e'
   437  00FEE7  20                 	db	32
   438  00FEE8  20                 	db	32
   439  00FEE9  3C                 	db	60	;'<'
   440  00FEEA  41                 	db	65	;'A'
   441  00FEEB  20                 	db	32
   442  00FEEC  20                 	db	32
   443  00FEED  20                 	db	32
   444  00FEEE  20                 	db	32
   445  00FEEF  20                 	db	32
   446  00FEF0  0A                 	db	10
   447  00FEF1  00                 	db	0
   448  00FEF2  73                 	db	115	;'s'
   449  00FEF3  74                 	db	116	;'t'
   450  00FEF4  61                 	db	97	;'a'
   451  00FEF5  72                 	db	114	;'r'
   452  00FEF6  74                 	db	116	;'t'
   453  00FEF7  20                 	db	32
   454  00FEF8  20                 	db	32
   455  00FEF9  20                 	db	32
   456  00FEFA  3C                 	db	60	;'<'
   457  00FEFB  42                 	db	66	;'B'
   458  00FEFC  20                 	db	32
   459  00FEFD  20                 	db	32
   460  00FEFE  20                 	db	32
   461  00FEFF  20                 	db	32
   462  00FF00  20                 	db	32
   463  00FF01  20                 	db	32
   464  00FF02  0A                 	db	10
   465  00FF03  00                 	db	0
   466  00FF04  20                 	db	32
   467  00FF05  20                 	db	32
   468  00FF06  68                 	db	104	;'h'
   469  00FF07  68                 	db	104	;'h'
   470  00FF08  3A                 	db	58	;':'
   471  00FF09  6D                 	db	109	;'m'
   472  00FF0A  6D                 	db	109	;'m'
   473  00FF0B  3A                 	db	58	;':'
   474  00FF0C  73                 	db	115	;'s'
   475  00FF0D  73                 	db	115	;'s'
   476  00FF0E  20                 	db	32
   477  00FF0F  20                 	db	32
   478  00FF10  20                 	db	32
   479  00FF11  20                 	db	32
   480  00FF12  20                 	db	32
   481  00FF13  20                 	db	32
   482  00FF14  0A                 	db	10
   483  00FF15  00                 	db	0
   484  00FF16  73                 	db	115	;'s'
   485  00FF17  65                 	db	101	;'e'
   486  00FF18  6C                 	db	108	;'l'
   487  00FF19  65                 	db	101	;'e'
   488  00FF1A  63                 	db	99	;'c'
   489  00FF1B  74                 	db	116	;'t'
   490  00FF1C  20                 	db	32
   491  00FF1D  72                 	db	114	;'r'
   492  00FF1E  75                 	db	117	;'u'
   493  00FF1F  6E                 	db	110	;'n'
   494  00FF20  3A                 	db	58	;':'
   495  00FF21  20                 	db	32
   496  00FF22  20                 	db	32
   497  00FF23  20                 	db	32
   498  00FF24  20                 	db	32
   499  00FF25  20                 	db	32
   500  00FF26  0A                 	db	10
   501  00FF27  00                 	db	0
   502  00FF28  74                 	db	116	;'t'
   503  00FF29  69                 	db	105	;'i'
   504  00FF2A  6D                 	db	109	;'m'
   505  00FF2B  65                 	db	101	;'e'
   506  00FF2C  3A                 	db	58	;':'
   507  00FF2D  20                 	db	32
   508  00FF2E  6E                 	db	110	;'n'
   509  00FF2F  6E                 	db	110	;'n'
   510  00FF30  6E                 	db	110	;'n'
   511  00FF31  20                 	db	32
   512  00FF32  73                 	db	115	;'s'
   513  00FF33  65                 	db	101	;'e'
   514  00FF34  63                 	db	99	;'c'
   515  00FF35  20                 	db	32
   516  00FF36  20                 	db	32
   517  00FF37  20                 	db	32
   518  00FF38  0A                 	db	10
   519  00FF39  00                 	db	0
   520  00FF3A  5B                 	db	91	;'['
   521  00FF3B  41                 	db	65	;'A'
   522  00FF3C  41                 	db	65	;'A'
   523  00FF3D  2C                 	db	44
   524  00FF3E  39                 	db	57	;'9'
   525  00FF3F  56                 	db	86	;'V'
   526  00FF40  2C                 	db	44
   527  00FF41  43                 	db	67	;'C'
   528  00FF42  2C                 	db	44
   529  00FF43  6F                 	db	111	;'o'
   530  00FF44  74                 	db	116	;'t'
   531  00FF45  68                 	db	104	;'h'
   532  00FF46  65                 	db	101	;'e'
   533  00FF47  72                 	db	114	;'r'
   534  00FF48  5D                 	db	93	;']'
   535  00FF49  20                 	db	32
   536  00FF4A  0A                 	db	10
   537  00FF4B  00                 	db	0
   538  00FF4C                     STR_18:
   539  00FF4C  30                 	db	48	;'0'
   540  00FF4D  31                 	db	49	;'1'
   541  00FF4E  32                 	db	50	;'2'
   542  00FF4F  33                 	db	51	;'3'
   543  00FF50  34                 	db	52	;'4'
   544  00FF51  35                 	db	53	;'5'
   545  00FF52  36                 	db	54	;'6'
   546  00FF53  37                 	db	55	;'7'
   547  00FF54  38                 	db	56	;'8'
   548  00FF55  39                 	db	57	;'9'
   549  00FF56  61                 	db	97	;'a'
   550  00FF57  62                 	db	98	;'b'
   551  00FF58  63                 	db	99	;'c'
   552  00FF59  64                 	db	100	;'d'
   553  00FF5A  65                 	db	101	;'e'
   554  00FF5B  66                 	db	102	;'f'
   555  00FF5C  00                 	db	0
   556  00FF5D  20                 	db	32
   557  00FF5E  20                 	db	32
   558  00FF5F  20                 	db	32
   559  00FF60  20                 	db	32
   560  00FF61  20                 	db	32
   561  00FF62  20                 	db	32
   562  00FF63  20                 	db	32
   563  00FF64  20                 	db	32
   564  00FF65  20                 	db	32
   565  00FF66  20                 	db	32
   566  00FF67  20                 	db	32
   567  00FF68  20                 	db	32
   568  00FF69  20                 	db	32
   569  00FF6A  20                 	db	32
   570  00FF6B  2A                 	db	42
   571  00FF6C  3E                 	db	62	;'>'
   572  00FF6D  00                 	db	0
   573  00FF6E  5B                 	db	91	;'['
   574  00FF6F  31                 	db	49	;'1'
   575  00FF70  2C                 	db	44
   576  00FF71  32                 	db	50	;'2'
   577  00FF72  2C                 	db	44
   578  00FF73  33                 	db	51	;'3'
   579  00FF74  2C                 	db	44
   580  00FF75  34                 	db	52	;'4'
   581  00FF76  5D                 	db	93	;']'
   582  00FF77  20                 	db	32
   583  00FF78  20                 	db	32
   584  00FF79  20                 	db	32
   585  00FF7A  20                 	db	32
   586  00FF7B  20                 	db	32
   587  00FF7C  2A                 	db	42
   588  00FF7D  3E                 	db	62	;'>'
   589  00FF7E  00                 	db	0
   590  00FF7F  68                 	db	104	;'h'
   591  00FF80  69                 	db	105	;'i'
   592  00FF81  73                 	db	115	;'s'
   593  00FF82  74                 	db	116	;'t'
   594  00FF83  6F                 	db	111	;'o'
   595  00FF84  72                 	db	114	;'r'
   596  00FF85  79                 	db	121	;'y'
   597  00FF86  20                 	db	32
   598  00FF87  3C                 	db	60	;'<'
   599  00FF88  43                 	db	67	;'C'
   600  00FF89  20                 	db	32
   601  00FF8A  20                 	db	32
   602  00FF8B  20                 	db	32
   603  00FF8C  20                 	db	32
   604  00FF8D  2A                 	db	42
   605  00FF8E  3E                 	db	62	;'>'
   606  00FF8F  00                 	db	0
   607  00FF90  20                 	db	32
   608  00FF91  20                 	db	32
   609  00FF92  20                 	db	32
   610  00FF93  73                 	db	115	;'s'
   611  00FF94  74                 	db	116	;'t'
   612  00FF95  61                 	db	97	;'a'
   613  00FF96  74                 	db	116	;'t'
   614  00FF97  73                 	db	115	;'s'
   615  00FF98  20                 	db	32
   616  00FF99  3C                 	db	60	;'<'
   617  00FF9A  42                 	db	66	;'B'
   618  00FF9B  20                 	db	32
   619  00FF9C  20                 	db	32
   620  00FF9D  20                 	db	32
   621  00FF9E  2A                 	db	42
   622  00FF9F  3E                 	db	62	;'>'
   623  00FFA0  00                 	db	0
   624  00FFA1  5B                 	db	91	;'['
   625  00FFA2  6E                 	db	110	;'n'
   626  00FFA3  6E                 	db	110	;'n'
   627  00FFA4  2C                 	db	44
   628  00FFA5  6E                 	db	110	;'n'
   629  00FFA6  2C                 	db	44
   630  00FFA7  6E                 	db	110	;'n'
   631  00FFA8  2C                 	db	44
   632  00FFA9  6E                 	db	110	;'n'
   633  00FFAA  6E                 	db	110	;'n'
   634  00FFAB  5D                 	db	93	;']'
   635  00FFAC  20                 	db	32
   636  00FFAD  20                 	db	32
   637  00FFAE  20                 	db	32
   638  00FFAF  2A                 	db	42
   639  00FFB0  3E                 	db	62	;'>'
   640  00FFB1  00                 	db	0
   641  00FFB2  20                 	db	32
   642  00FFB3  20                 	db	32
   643  00FFB4  6D                 	db	109	;'m'
   644  00FFB5  6D                 	db	109	;'m'
   645  00FFB6  3A                 	db	58	;':'
   646  00FFB7  64                 	db	100	;'d'
   647  00FFB8  64                 	db	100	;'d'
   648  00FFB9  3A                 	db	58	;':'
   649  00FFBA  79                 	db	121	;'y'
   650  00FFBB  79                 	db	121	;'y'
   651  00FFBC  20                 	db	32
   652  00FFBD  20                 	db	32
   653  00FFBE  20                 	db	32
   654  00FFBF  20                 	db	32
   655  00FFC0  41                 	db	65	;'A'
   656  00FFC1  3E                 	db	62	;'>'
   657  00FFC2  00                 	db	0
   658  00FFC3                     STR_2:
   659  00FFC3  74                 	db	116	;'t'
   660  00FFC4  69                 	db	105	;'i'
   661  00FFC5  6D                 	db	109	;'m'
   662  00FFC6  65                 	db	101	;'e'
   663  00FFC7  20                 	db	32
   664  00FFC8  25                 	db	37
   665  00FFC9  30                 	db	48	;'0'
   666  00FFCA  32                 	db	50	;'2'
   667  00FFCB  6C                 	db	108	;'l'
   668  00FFCC  64                 	db	100	;'d'
   669  00FFCD  3A                 	db	58	;':'
   670  00FFCE  25                 	db	37
   671  00FFCF  30                 	db	48	;'0'
   672  00FFD0  32                 	db	50	;'2'
   673  00FFD1  6C                 	db	108	;'l'
   674  00FFD2  64                 	db	100	;'d'
   675  00FFD3  00                 	db	0
   676  00FFD4                     STR_3:
   677  00FFD4  73                 	db	115	;'s'
   678  00FFD5  69                 	db	105	;'i'
   679  00FFD6  67                 	db	103	;'g'
   680  00FFD7  3A                 	db	58	;':'
   681  00FFD8  20                 	db	32
   682  00FFD9  25                 	db	37
   683  00FFDA  64                 	db	100	;'d'
   684  00FFDB  20                 	db	32
   685  00FFDC  0A                 	db	10
   686  00FFDD  56                 	db	86	;'V'
   687  00FFDE  3A                 	db	58	;':'
   688  00FFDF  20                 	db	32
   689  00FFE0  25                 	db	37
   690  00FFE1  66                 	db	102	;'f'
   691  00FFE2  00                 	db	0
   692  00FFE3                     STR_4:
   693  00FFE3  70                 	db	112	;'p'
   694  00FFE4  65                 	db	101	;'e'
   695  00FFE5  72                 	db	114	;'r'
   696  00FFE6  69                 	db	105	;'i'
   697  00FFE7  6F                 	db	111	;'o'
   698  00FFE8  64                 	db	100	;'d'
   699  00FFE9  20                 	db	32
   700  00FFEA  25                 	db	37
   701  00FFEB  6C                 	db	108	;'l'
   702  00FFEC  64                 	db	100	;'d'
   703  00FFED  00                 	db	0
   704  00FFEE  74                 	db	116	;'t'
   705  00FFEF  31                 	db	49	;'1'
   706  00FFF0  3A                 	db	58	;':'
   707  00FFF1  20                 	db	32
   708  00FFF2  25                 	db	37
   709  00FFF3  78                 	db	120	;'x'
   710  00FFF4  20                 	db	32
   711  00FFF5  00                 	db	0
   712  00FFF6                     STR_1:
   713  00FFF6  72                 	db	114	;'r'
   714  00FFF7  75                 	db	117	;'u'
   715  00FFF8  6E                 	db	110	;'n'
   716  00FFF9  6E                 	db	110	;'n'
   717  00FFFA  69                 	db	105	;'i'
   718  00FFFB  6E                 	db	110	;'n'
   719  00FFFC  67                 	db	103	;'g'
   720  00FFFD  00                 	db	0
   721                           
   722                           ; #config settings
   723  00FFFE  00                 	db	0	; dummy byte at the end
   724  0000                     
   725                           	psect	cinit
   726  004F20                     __pcinit:
   727                           	opt stack 0
   728  004F20                     start_initialization:
   729                           	opt stack 0
   730  004F20                     __initialization:
   731                           	opt stack 0
   732                           
   733                           ; Initialize objects allocated to BANK1 (57 bytes)
   734                           ; load TBLPTR registers with __pidataBANK1
   735  004F20  0E6A               	movlw	low __pidataBANK1
   736  004F22  6EF6               	movwf	tblptrl,c
   737  004F24  0E50               	movlw	high __pidataBANK1
   738  004F26  6EF7               	movwf	tblptrh,c
   739  004F28  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   740  004F2A  6EF8               	movwf	tblptru,c
   741  004F2C  EE01  F000         	lfsr	0,__pdataBANK1
   742  004F30  EE10 F039          	lfsr	1,57
   743  004F34                     copy_data0:
   744  004F34  0009               	tblrd		*+
   745  004F36  CFF5 FFEE          	movff	tablat,postinc0
   746  004F3A  50E5               	movf	postdec1,w,c
   747  004F3C  50E1               	movf	fsr1l,w,c
   748  004F3E  E1FA               	bnz	copy_data0
   749                           
   750                           ; Clear objects allocated to BANK1 (30 bytes)
   751  004F40  EE01  F06B         	lfsr	0,__pbssBANK1
   752  004F44  0E1E               	movlw	30
   753  004F46                     clear_0:
   754  004F46  6AEE               	clrf	postinc0,c
   755  004F48  06E8               	decf	wreg,f,c
   756  004F4A  E1FD               	bnz	clear_0
   757                           
   758                           ; Clear objects allocated to BANK0 (1 bytes)
   759  004F4C  0100               	movlb	0
   760  004F4E  6BFF               	clrf	__pbssBANK0& (0+255),b
   761                           
   762                           ; Clear objects allocated to COMRAM (4 bytes)
   763  004F50  6A7E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   764  004F52  6A7D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   765  004F54  6A7C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   766  004F56  6A7B               	clrf	__pbssCOMRAM& (0+255),c
   767  004F58                     end_of_initialization:
   768                           	opt stack 0
   769  004F58                     __end_of__initialization:
   770                           	opt stack 0
   771  004F58  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   772  004F5A  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   773  004F5C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   774  004F5E  6EF8               	movwf	tblptru,c
   775  004F60  0100               	movlb	0
   776  004F62  EF58  F016         	goto	_main	;jump to C main() function
   777                           tblptru	equ	0xFF8
   778                           tblptrh	equ	0xFF7
   779                           tblptrl	equ	0xFF6
   780                           tablat	equ	0xFF5
   781                           postinc0	equ	0xFEE
   782                           wreg	equ	0xFE8
   783                           postdec1	equ	0xFE5
   784                           fsr1l	equ	0xFE1
   785                           
   786                           	psect	bssCOMRAM
   787  00007B                     __pbssCOMRAM:
   788                           	opt stack 0
   789  00007B                     _curr:
   790                           	opt stack 0
   791  00007B                     	ds	2
   792  00007D                     _n:
   793                           	opt stack 0
   794  00007D                     	ds	2
   795                           tblptru	equ	0xFF8
   796                           tblptrh	equ	0xFF7
   797                           tblptrl	equ	0xFF6
   798                           tablat	equ	0xFF5
   799                           postinc0	equ	0xFEE
   800                           wreg	equ	0xFE8
   801                           postdec1	equ	0xFE5
   802                           fsr1l	equ	0xFE1
   803                           
   804                           	psect	bssBANK0
   805  0000FF                     __pbssBANK0:
   806                           	opt stack 0
   807  0000FF                     _lastKey:
   808                           	opt stack 0
   809  0000FF                     	ds	1
   810                           tblptru	equ	0xFF8
   811                           tblptrh	equ	0xFF7
   812                           tblptrl	equ	0xFF6
   813                           tablat	equ	0xFF5
   814                           postinc0	equ	0xFEE
   815                           wreg	equ	0xFE8
   816                           postdec1	equ	0xFE5
   817                           fsr1l	equ	0xFE1
   818                           
   819                           	psect	bssBANK1
   820  00016B                     __pbssBANK1:
   821                           	opt stack 0
   822  00016B                     _pulse:
   823                           	opt stack 0
   824  00016B                     	ds	8
   825  000173                     _servos:
   826                           	opt stack 0
   827  000173                     	ds	8
   828  00017B                     _padPin3:
   829                           	opt stack 0
   830  00017B                     	ds	4
   831  00017F                     _time:
   832                           	opt stack 0
   833  00017F                     	ds	4
   834  000183                     _batteryDetected:
   835                           	opt stack 0
   836  000183                     	ds	2
   837  000185                     _count:
   838                           	opt stack 0
   839  000185                     	ds	2
   840  000187                     _prevTime:
   841                           	opt stack 0
   842  000187                     	ds	2
   843                           tblptru	equ	0xFF8
   844                           tblptrh	equ	0xFF7
   845                           tblptrl	equ	0xFF6
   846                           tablat	equ	0xFF5
   847                           postinc0	equ	0xFEE
   848                           wreg	equ	0xFE8
   849                           postdec1	equ	0xFE5
   850                           fsr1l	equ	0xFE1
   851                           
   852                           	psect	dataBANK1
   853  000100                     __pdataBANK1:
   854                           	opt stack 0
   855  000100                     _V_LIM_9V:
   856                           	opt stack 0
   857  000100                     	ds	3
   858  000103                     _V_LIM_AA:
   859                           	opt stack 0
   860  000103                     	ds	3
   861  000106                     _V_LIM_C:
   862                           	opt stack 0
   863  000106                     	ds	3
   864  000109                     _angle:
   865                           	opt stack 0
   866  000109                     	ds	2
   867  00010B                     _nothingImportant:
   868                           	opt stack 0
   869  00010B                     	ds	2
   870  00010D                     _padAngle_CLOSE:
   871                           	opt stack 0
   872  00010D                     	ds	2
   873  00010F                     _padAngle_NEUTRAL:
   874                           	opt stack 0
   875  00010F                     	ds	2
   876  000111                     _padAngle_OPEN:
   877                           	opt stack 0
   878  000111                     	ds	2
   879  000113                     _period:
   880                           	opt stack 0
   881  000113                     	ds	2
   882  000115                     _redirectAngle_9V:
   883                           	opt stack 0
   884  000115                     	ds	2
   885  000117                     _redirectAngle_AA:
   886                           	opt stack 0
   887  000117                     	ds	2
   888  000119                     _redirectAngle_C:
   889                           	opt stack 0
   890  000119                     	ds	2
   891  00011B                     _redirectAngle_OTHER:
   892                           	opt stack 0
   893  00011B                     	ds	2
   894  00011D                     _AA_float:
   895                           	opt stack 0
   896  00011D                     	ds	4
   897  000121                     _conveyorServo:
   898                           	opt stack 0
   899  000121                     	ds	4
   900  000125                     _cylinderMotor:
   901                           	opt stack 0
   902  000125                     	ds	4
   903  000129                     _padPin1:
   904                           	opt stack 0
   905  000129                     	ds	4
   906  00012D                     _padPin2:
   907                           	opt stack 0
   908  00012D                     	ds	4
   909  000131                     _padServo:
   910                           	opt stack 0
   911  000131                     	ds	4
   912  000135                     _redirectingServo:
   913                           	opt stack 0
   914  000135                     	ds	4
   915                           tblptru	equ	0xFF8
   916                           tblptrh	equ	0xFF7
   917                           tblptrl	equ	0xFF6
   918                           tablat	equ	0xFF5
   919                           postinc0	equ	0xFEE
   920                           wreg	equ	0xFE8
   921                           postdec1	equ	0xFE5
   922                           fsr1l	equ	0xFE1
   923                           
   924                           	psect	cstackBANK1
   925  000139                     __pcstackBANK1:
   926                           	opt stack 0
   927  000139                     _printf$1333:
   928                           	opt stack 0
   929                           
   930                           ; 3 bytes @ 0x0
   931  000139                     	ds	3
   932  00013C                     printf@cp:
   933                           	opt stack 0
   934                           
   935                           ; 2 bytes @ 0x3
   936  00013C                     	ds	2
   937  00013E                     printf@idx:
   938                           	opt stack 0
   939                           
   940                           ; 1 bytes @ 0x5
   941  00013E                     	ds	1
   942  00013F                     printf@len:
   943                           	opt stack 0
   944                           
   945                           ; 2 bytes @ 0x6
   946  00013F                     	ds	2
   947  000141                     printf@ap:
   948                           	opt stack 0
   949                           
   950                           ; 2 bytes @ 0x8
   951  000141                     	ds	2
   952  000143                     printf@prec:
   953                           	opt stack 0
   954                           
   955                           ; 2 bytes @ 0xA
   956  000143                     	ds	2
   957  000145                     printf@tmpval:
   958                           	opt stack 0
   959                           
   960                           ; 4 bytes @ 0xC
   961  000145                     	ds	4
   962  000149                     printf@exp:
   963                           	opt stack 0
   964                           
   965                           ; 2 bytes @ 0x10
   966  000149                     	ds	2
   967  00014B                     printf@val:
   968                           	opt stack 0
   969                           
   970                           ; 4 bytes @ 0x12
   971  00014B                     	ds	4
   972  00014F                     printf@width:
   973                           	opt stack 0
   974                           
   975                           ; 2 bytes @ 0x16
   976  00014F                     	ds	2
   977  000151                     printf@fval:
   978                           	opt stack 0
   979                           
   980                           ; 3 bytes @ 0x18
   981  000151                     	ds	3
   982  000154                     printf@flag:
   983                           	opt stack 0
   984                           
   985                           ; 2 bytes @ 0x1B
   986  000154                     	ds	2
   987  000156                     printf@c:
   988                           	opt stack 0
   989                           
   990                           ; 1 bytes @ 0x1D
   991  000156                     	ds	1
   992  000157                     sortBattery@V_float:
   993                           	opt stack 0
   994                           
   995                           ; 3 bytes @ 0x1E
   996  000157                     	ds	3
   997  00015A                     sortBattery@Vcc:
   998                           	opt stack 0
   999                           
  1000                           ; 3 bytes @ 0x21
  1001  00015A                     	ds	3
  1002  00015D                     sortBattery@resolution:
  1003                           	opt stack 0
  1004                           
  1005                           ; 3 bytes @ 0x24
  1006  00015D                     	ds	3
  1007  000160                     sortBattery@targetAngle:
  1008                           	opt stack 0
  1009                           
  1010                           ; 2 bytes @ 0x27
  1011  000160                     	ds	2
  1012  000162                     sortBattery@signal:
  1013                           	opt stack 0
  1014                           
  1015                           ; 2 bytes @ 0x29
  1016  000162                     	ds	2
  1017  000164                     sortBattery@V:
  1018                           	opt stack 0
  1019                           
  1020                           ; 3 bytes @ 0x2B
  1021  000164                     	ds	3
  1022  000167                     main@prevTime:
  1023                           	opt stack 0
  1024                           
  1025                           ; 4 bytes @ 0x2E
  1026  000167                     	ds	4
  1027                           tblptru	equ	0xFF8
  1028                           tblptrh	equ	0xFF7
  1029                           tblptrl	equ	0xFF6
  1030                           tablat	equ	0xFF5
  1031                           postinc0	equ	0xFEE
  1032                           wreg	equ	0xFE8
  1033                           postdec1	equ	0xFE5
  1034                           fsr1l	equ	0xFE1
  1035                           
  1036                           	psect	cstackBANK0
  1037  000080                     __pcstackBANK0:
  1038                           	opt stack 0
  1039  000080                     ??_isdigit:
  1040  000080                     ?_digitalRead:
  1041                           	opt stack 0
  1042  000080                     ?___awmod:
  1043                           	opt stack 0
  1044  000080                     ?___ftpack:
  1045                           	opt stack 0
  1046  000080                     ?___ftneg:
  1047                           	opt stack 0
  1048  000080                     ?_analogRead:
  1049                           	opt stack 0
  1050  000080                     ?__tdiv_to_l_:
  1051                           	opt stack 0
  1052  000080                     ?__div_to_l_:
  1053                           	opt stack 0
  1054  000080                     ?___aldiv:
  1055                           	opt stack 0
  1056  000080                     ?___lldiv:
  1057                           	opt stack 0
  1058  000080                     lcdNibble@temp:
  1059                           	opt stack 0
  1060  000080                     readKeypad@key:
  1061                           	opt stack 0
  1062  000080                     digitalRead@pin:
  1063                           	opt stack 0
  1064  000080                     digitalWrite@pin:
  1065                           	opt stack 0
  1066  000080                     analogRead@channel:
  1067                           	opt stack 0
  1068  000080                     initTimer@timer:
  1069                           	opt stack 0
  1070  000080                     startTimer@timer:
  1071                           	opt stack 0
  1072  000080                     ___awmod@dividend:
  1073                           	opt stack 0
  1074  000080                     __div_to_l_@f1:
  1075                           	opt stack 0
  1076  000080                     ___ftpack@arg:
  1077                           	opt stack 0
  1078  000080                     __tdiv_to_l_@f1:
  1079                           	opt stack 0
  1080  000080                     ___ftge@ff1:
  1081                           	opt stack 0
  1082  000080                     ___ftneg@f1:
  1083                           	opt stack 0
  1084  000080                     ___aldiv@dividend:
  1085                           	opt stack 0
  1086  000080                     ___lldiv@dividend:
  1087                           	opt stack 0
  1088                           
  1089                           ; 4 bytes @ 0x0
  1090  000080                     	ds	1
  1091  000081                     lcdNibble@data:
  1092                           	opt stack 0
  1093  000081                     _isdigit$956:
  1094                           	opt stack 0
  1095                           
  1096                           ; 1 bytes @ 0x1
  1097  000081                     	ds	1
  1098  000082                     ??_initTimer:
  1099  000082                     ??_digitalRead:
  1100  000082                     ??_lcdInst:
  1101  000082                     isdigit@c:
  1102                           	opt stack 0
  1103  000082                     digitalWrite@val:
  1104                           	opt stack 0
  1105  000082                     ___awmod@divisor:
  1106                           	opt stack 0
  1107  000082                     startTimer@val:
  1108                           	opt stack 0
  1109                           
  1110                           ; 4 bytes @ 0x2
  1111  000082                     	ds	1
  1112  000083                     lcdInst@data:
  1113                           	opt stack 0
  1114  000083                     ___ftpack@exp:
  1115                           	opt stack 0
  1116  000083                     __div_to_l_@f2:
  1117                           	opt stack 0
  1118  000083                     __tdiv_to_l_@f2:
  1119                           	opt stack 0
  1120  000083                     ___ftge@ff2:
  1121                           	opt stack 0
  1122                           
  1123                           ; 3 bytes @ 0x3
  1124  000083                     	ds	1
  1125  000084                     ??_initLCD:
  1126  000084                     ??_digitalWrite:
  1127  000084                     ??_analogRead:
  1128  000084                     putch@data:
  1129                           	opt stack 0
  1130  000084                     ___awmod@counter:
  1131                           	opt stack 0
  1132  000084                     ___ftpack@sign:
  1133                           	opt stack 0
  1134  000084                     ___aldiv@divisor:
  1135                           	opt stack 0
  1136  000084                     ___lldiv@divisor:
  1137                           	opt stack 0
  1138                           
  1139                           ; 4 bytes @ 0x4
  1140  000084                     	ds	1
  1141  000085                     ??___ftpack:
  1142  000085                     ___awmod@sign:
  1143                           	opt stack 0
  1144                           
  1145                           ; 1 bytes @ 0x5
  1146  000085                     	ds	1
  1147  000086                     ??_startTimer:
  1148  000086                     ??__tdiv_to_l_:
  1149  000086                     ??___ftge:
  1150  000086                     ?___awdiv:
  1151                           	opt stack 0
  1152  000086                     ___awdiv@dividend:
  1153                           	opt stack 0
  1154  000086                     __div_to_l_@quot:
  1155                           	opt stack 0
  1156                           
  1157                           ; 4 bytes @ 0x6
  1158  000086                     	ds	1
  1159  000087                     digitalWrite@p:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x7
  1163  000087                     	ds	1
  1164  000088                     ?___altoft:
  1165                           	opt stack 0
  1166  000088                     ?___awtoft:
  1167                           	opt stack 0
  1168  000088                     ?___lltoft:
  1169                           	opt stack 0
  1170  000088                     ___aldiv@counter:
  1171                           	opt stack 0
  1172  000088                     ___awdiv@divisor:
  1173                           	opt stack 0
  1174  000088                     ___awtoft@c:
  1175                           	opt stack 0
  1176  000088                     ___altoft@c:
  1177                           	opt stack 0
  1178  000088                     ___lldiv@quotient:
  1179                           	opt stack 0
  1180  000088                     ___lltoft@c:
  1181                           	opt stack 0
  1182                           
  1183                           ; 4 bytes @ 0x8
  1184  000088                     	ds	1
  1185  000089                     ___aldiv@sign:
  1186                           	opt stack 0
  1187  000089                     __tdiv_to_l_@quot:
  1188                           	opt stack 0
  1189                           
  1190                           ; 4 bytes @ 0x9
  1191  000089                     	ds	1
  1192  00008A                     ___awdiv@counter:
  1193                           	opt stack 0
  1194  00008A                     __div_to_l_@cntr:
  1195                           	opt stack 0
  1196  00008A                     ___aldiv@quotient:
  1197                           	opt stack 0
  1198                           
  1199                           ; 4 bytes @ 0xA
  1200  00008A                     	ds	1
  1201  00008B                     ___awdiv@sign:
  1202                           	opt stack 0
  1203  00008B                     ___awtoft@sign:
  1204                           	opt stack 0
  1205  00008B                     __div_to_l_@exp1:
  1206                           	opt stack 0
  1207                           
  1208                           ; 1 bytes @ 0xB
  1209  00008B                     	ds	1
  1210  00008C                     ??___altoft:
  1211  00008C                     ??___lltoft:
  1212  00008C                     ___lldiv@counter:
  1213                           	opt stack 0
  1214  00008C                     ___awdiv@quotient:
  1215                           	opt stack 0
  1216                           
  1217                           ; 2 bytes @ 0xC
  1218  00008C                     	ds	1
  1219  00008D                     ?___llmod:
  1220                           	opt stack 0
  1221  00008D                     __tdiv_to_l_@cntr:
  1222                           	opt stack 0
  1223  00008D                     ___llmod@dividend:
  1224                           	opt stack 0
  1225                           
  1226                           ; 4 bytes @ 0xD
  1227  00008D                     	ds	1
  1228  00008E                     ?___wmul:
  1229                           	opt stack 0
  1230  00008E                     ?___almod:
  1231                           	opt stack 0
  1232  00008E                     __tdiv_to_l_@exp1:
  1233                           	opt stack 0
  1234  00008E                     ___wmul@multiplier:
  1235                           	opt stack 0
  1236  00008E                     ___almod@dividend:
  1237                           	opt stack 0
  1238                           
  1239                           ; 4 bytes @ 0xE
  1240  00008E                     	ds	2
  1241  000090                     ___altoft@exp:
  1242                           	opt stack 0
  1243  000090                     ___lltoft@exp:
  1244                           	opt stack 0
  1245  000090                     ___wmul@multiplicand:
  1246                           	opt stack 0
  1247                           
  1248                           ; 2 bytes @ 0x10
  1249  000090                     	ds	1
  1250  000091                     ___altoft@sign:
  1251                           	opt stack 0
  1252  000091                     ___llmod@divisor:
  1253                           	opt stack 0
  1254                           
  1255                           ; 4 bytes @ 0x11
  1256  000091                     	ds	1
  1257  000092                     ?___ftdiv:
  1258                           	opt stack 0
  1259  000092                     ___wmul@product:
  1260                           	opt stack 0
  1261  000092                     ___ftdiv@f1:
  1262                           	opt stack 0
  1263  000092                     ___almod@divisor:
  1264                           	opt stack 0
  1265                           
  1266                           ; 4 bytes @ 0x12
  1267  000092                     	ds	3
  1268  000095                     ___llmod@counter:
  1269                           	opt stack 0
  1270  000095                     ___ftdiv@f2:
  1271                           	opt stack 0
  1272                           
  1273                           ; 3 bytes @ 0x15
  1274  000095                     	ds	1
  1275  000096                     ___almod@counter:
  1276                           	opt stack 0
  1277                           
  1278                           ; 1 bytes @ 0x16
  1279  000096                     	ds	1
  1280  000097                     ___almod@sign:
  1281                           	opt stack 0
  1282                           
  1283                           ; 1 bytes @ 0x17
  1284  000097                     	ds	1
  1285  000098                     ??___ftdiv:
  1286                           
  1287                           ; 1 bytes @ 0x18
  1288  000098                     	ds	3
  1289  00009B                     ___ftdiv@cntr:
  1290                           	opt stack 0
  1291                           
  1292                           ; 1 bytes @ 0x1B
  1293  00009B                     	ds	1
  1294  00009C                     ___ftdiv@f3:
  1295                           	opt stack 0
  1296                           
  1297                           ; 3 bytes @ 0x1C
  1298  00009C                     	ds	3
  1299  00009F                     ___ftdiv@exp:
  1300                           	opt stack 0
  1301                           
  1302                           ; 1 bytes @ 0x1F
  1303  00009F                     	ds	1
  1304  0000A0                     ___ftdiv@sign:
  1305                           	opt stack 0
  1306                           
  1307                           ; 1 bytes @ 0x20
  1308  0000A0                     	ds	1
  1309  0000A1                     ?___ftmul:
  1310                           	opt stack 0
  1311  0000A1                     ___ftmul@f1:
  1312                           	opt stack 0
  1313                           
  1314                           ; 3 bytes @ 0x21
  1315  0000A1                     	ds	3
  1316  0000A4                     ___ftmul@f2:
  1317                           	opt stack 0
  1318                           
  1319                           ; 3 bytes @ 0x24
  1320  0000A4                     	ds	3
  1321  0000A7                     ??___ftmul:
  1322                           
  1323                           ; 1 bytes @ 0x27
  1324  0000A7                     	ds	3
  1325  0000AA                     ___ftmul@exp:
  1326                           	opt stack 0
  1327                           
  1328                           ; 1 bytes @ 0x2A
  1329  0000AA                     	ds	1
  1330  0000AB                     ___ftmul@f3_as_product:
  1331                           	opt stack 0
  1332                           
  1333                           ; 3 bytes @ 0x2B
  1334  0000AB                     	ds	3
  1335  0000AE                     ___ftmul@cntr:
  1336                           	opt stack 0
  1337                           
  1338                           ; 1 bytes @ 0x2E
  1339  0000AE                     	ds	1
  1340  0000AF                     ___ftmul@sign:
  1341                           	opt stack 0
  1342                           
  1343                           ; 1 bytes @ 0x2F
  1344  0000AF                     	ds	1
  1345  0000B0                     ?_fround:
  1346                           	opt stack 0
  1347  0000B0                     ?_scale:
  1348                           	opt stack 0
  1349                           
  1350                           ; 3 bytes @ 0x30
  1351  0000B0                     	ds	3
  1352  0000B3                     _fround$1331:
  1353                           	opt stack 0
  1354  0000B3                     _scale$1332:
  1355                           	opt stack 0
  1356                           
  1357                           ; 3 bytes @ 0x33
  1358  0000B3                     	ds	3
  1359  0000B6                     scale@scl:
  1360                           	opt stack 0
  1361  0000B6                     _fround$1330:
  1362                           	opt stack 0
  1363                           
  1364                           ; 3 bytes @ 0x36
  1365  0000B6                     	ds	3
  1366  0000B9                     fround@prec:
  1367                           	opt stack 0
  1368                           
  1369                           ; 1 bytes @ 0x39
  1370  0000B9                     	ds	1
  1371  0000BA                     ?___ftadd:
  1372                           	opt stack 0
  1373  0000BA                     ___ftadd@f1:
  1374                           	opt stack 0
  1375                           
  1376                           ; 3 bytes @ 0x3A
  1377  0000BA                     	ds	3
  1378  0000BD                     ___ftadd@f2:
  1379                           	opt stack 0
  1380                           
  1381                           ; 3 bytes @ 0x3D
  1382  0000BD                     	ds	3
  1383  0000C0                     ??___ftadd:
  1384                           
  1385                           ; 1 bytes @ 0x40
  1386  0000C0                     	ds	3
  1387  0000C3                     ___ftadd@sign:
  1388                           	opt stack 0
  1389                           
  1390                           ; 1 bytes @ 0x43
  1391  0000C3                     	ds	1
  1392  0000C4                     ___ftadd@exp2:
  1393                           	opt stack 0
  1394                           
  1395                           ; 1 bytes @ 0x44
  1396  0000C4                     	ds	1
  1397  0000C5                     ___ftadd@exp1:
  1398                           	opt stack 0
  1399                           
  1400                           ; 1 bytes @ 0x45
  1401  0000C5                     	ds	1
  1402  0000C6                     ?___ftsub:
  1403                           	opt stack 0
  1404  0000C6                     ?___fttol:
  1405                           	opt stack 0
  1406  0000C6                     ___ftsub@f1:
  1407                           	opt stack 0
  1408  0000C6                     ___fttol@f1:
  1409                           	opt stack 0
  1410                           
  1411                           ; 3 bytes @ 0x46
  1412  0000C6                     	ds	3
  1413  0000C9                     ___ftsub@f2:
  1414                           	opt stack 0
  1415                           
  1416                           ; 3 bytes @ 0x49
  1417  0000C9                     	ds	1
  1418  0000CA                     ??___fttol:
  1419                           
  1420                           ; 1 bytes @ 0x4A
  1421  0000CA                     	ds	2
  1422  0000CC                     
  1423                           ; 1 bytes @ 0x4C
  1424  0000CC                     	ds	3
  1425  0000CF                     ___fttol@sign1:
  1426                           	opt stack 0
  1427                           
  1428                           ; 1 bytes @ 0x4F
  1429  0000CF                     	ds	1
  1430  0000D0                     ___fttol@lval:
  1431                           	opt stack 0
  1432                           
  1433                           ; 4 bytes @ 0x50
  1434  0000D0                     	ds	4
  1435  0000D4                     ___fttol@exp1:
  1436                           	opt stack 0
  1437                           
  1438                           ; 1 bytes @ 0x54
  1439  0000D4                     	ds	1
  1440  0000D5                     ?_printf:
  1441                           	opt stack 0
  1442  0000D5                     ?_angleToPulse:
  1443                           	opt stack 0
  1444  0000D5                     angleToPulse@angle:
  1445                           	opt stack 0
  1446  0000D5                     printf@f:
  1447                           	opt stack 0
  1448                           
  1449                           ; 2 bytes @ 0x55
  1450  0000D5                     	ds	4
  1451  0000D9                     ??_angleToPulse:
  1452                           
  1453                           ; 1 bytes @ 0x59
  1454  0000D9                     	ds	4
  1455  0000DD                     angleToPulse@offset:
  1456                           	opt stack 0
  1457                           
  1458                           ; 4 bytes @ 0x5D
  1459  0000DD                     	ds	2
  1460  0000DF                     ??_printf:
  1461                           
  1462                           ; 1 bytes @ 0x5F
  1463  0000DF                     	ds	2
  1464  0000E1                     angleToPulse@a180:
  1465                           	opt stack 0
  1466                           
  1467                           ; 4 bytes @ 0x61
  1468  0000E1                     	ds	4
  1469  0000E5                     _angleToPulse$1329:
  1470                           	opt stack 0
  1471                           
  1472                           ; 3 bytes @ 0x65
  1473  0000E5                     	ds	3
  1474  0000E8                     angleToPulse@a000:
  1475                           	opt stack 0
  1476                           
  1477                           ; 4 bytes @ 0x68
  1478  0000E8                     	ds	4
  1479  0000EC                     setAngle@motor:
  1480                           	opt stack 0
  1481                           
  1482                           ; 2 bytes @ 0x6C
  1483  0000EC                     	ds	2
  1484  0000EE                     setAngle@angle:
  1485                           	opt stack 0
  1486                           
  1487                           ; 2 bytes @ 0x6E
  1488  0000EE                     	ds	2
  1489  0000F0                     ??_setAngle:
  1490                           
  1491                           ; 1 bytes @ 0x70
  1492  0000F0                     	ds	2
  1493  0000F2                     setAngle@period:
  1494                           	opt stack 0
  1495                           
  1496                           ; 2 bytes @ 0x72
  1497  0000F2                     	ds	2
  1498  0000F4                     setAngle@i:
  1499                           	opt stack 0
  1500                           
  1501                           ; 2 bytes @ 0x74
  1502  0000F4                     	ds	2
  1503  0000F6                     ??_sortBattery:
  1504  0000F6                     initServo@motor:
  1505                           	opt stack 0
  1506                           
  1507                           ; 2 bytes @ 0x76
  1508  0000F6                     	ds	2
  1509  0000F8                     initServo@angle:
  1510                           	opt stack 0
  1511                           
  1512                           ; 2 bytes @ 0x78
  1513  0000F8                     	ds	2
  1514  0000FA                     ??_initServo:
  1515                           
  1516                           ; 1 bytes @ 0x7A
  1517  0000FA                     	ds	4
  1518  0000FE                     ??_main:
  1519                           
  1520                           ; 1 bytes @ 0x7E
  1521  0000FE                     	ds	1
  1522                           tblptru	equ	0xFF8
  1523                           tblptrh	equ	0xFF7
  1524                           tblptrl	equ	0xFF6
  1525                           tablat	equ	0xFF5
  1526                           postinc0	equ	0xFEE
  1527                           wreg	equ	0xFE8
  1528                           postdec1	equ	0xFE5
  1529                           fsr1l	equ	0xFE1
  1530                           
  1531                           	psect	cstackCOMRAM
  1532  000001                     __pcstackCOMRAM:
  1533                           	opt stack 0
  1534  000001                     ??i2_isdigit:
  1535  000001                     ?i2___awmod:
  1536                           	opt stack 0
  1537  000001                     ?i2___ftpack:
  1538                           	opt stack 0
  1539  000001                     ?i2___ftneg:
  1540                           	opt stack 0
  1541  000001                     ?i2__div_to_l_:
  1542                           	opt stack 0
  1543  000001                     ?i2__tdiv_to_l_:
  1544                           	opt stack 0
  1545  000001                     ?i2___lldiv:
  1546                           	opt stack 0
  1547  000001                     i2lcdNibble@temp:
  1548                           	opt stack 0
  1549  000001                     i2___awmod@dividend:
  1550                           	opt stack 0
  1551  000001                     i2__div_to_l_@f1:
  1552                           	opt stack 0
  1553  000001                     i2___ftpack@arg:
  1554                           	opt stack 0
  1555  000001                     i2__tdiv_to_l_@f1:
  1556                           	opt stack 0
  1557  000001                     i2___ftge@ff1:
  1558                           	opt stack 0
  1559  000001                     i2___ftneg@f1:
  1560                           	opt stack 0
  1561  000001                     i2___lldiv@dividend:
  1562                           	opt stack 0
  1563                           
  1564                           ; 4 bytes @ 0x0
  1565  000001                     	ds	1
  1566  000002                     i2lcdNibble@data:
  1567                           	opt stack 0
  1568  000002                     i2_isdigit$956:
  1569                           	opt stack 0
  1570                           
  1571                           ; 1 bytes @ 0x1
  1572  000002                     	ds	1
  1573  000003                     ??i2_lcdInst:
  1574  000003                     i2isdigit@c:
  1575                           	opt stack 0
  1576  000003                     i2___awmod@divisor:
  1577                           	opt stack 0
  1578                           
  1579                           ; 2 bytes @ 0x2
  1580  000003                     	ds	1
  1581  000004                     i2lcdInst@data:
  1582                           	opt stack 0
  1583  000004                     i2___ftpack@exp:
  1584                           	opt stack 0
  1585  000004                     i2__div_to_l_@f2:
  1586                           	opt stack 0
  1587  000004                     i2__tdiv_to_l_@f2:
  1588                           	opt stack 0
  1589  000004                     i2___ftge@ff2:
  1590                           	opt stack 0
  1591                           
  1592                           ; 3 bytes @ 0x3
  1593  000004                     	ds	1
  1594  000005                     i2putch@data:
  1595                           	opt stack 0
  1596  000005                     i2___awmod@counter:
  1597                           	opt stack 0
  1598  000005                     i2___ftpack@sign:
  1599                           	opt stack 0
  1600  000005                     i2___lldiv@divisor:
  1601                           	opt stack 0
  1602                           
  1603                           ; 4 bytes @ 0x4
  1604  000005                     	ds	1
  1605  000006                     ??i2___ftpack:
  1606  000006                     i2___awmod@sign:
  1607                           	opt stack 0
  1608                           
  1609                           ; 1 bytes @ 0x5
  1610  000006                     	ds	1
  1611  000007                     ??i2__tdiv_to_l_:
  1612  000007                     ??i2___ftge:
  1613  000007                     ?i2___awdiv:
  1614                           	opt stack 0
  1615  000007                     i2digitalWrite@pin:
  1616                           	opt stack 0
  1617  000007                     i2startTimer@timer:
  1618                           	opt stack 0
  1619  000007                     i2___awdiv@dividend:
  1620                           	opt stack 0
  1621  000007                     i2__div_to_l_@quot:
  1622                           	opt stack 0
  1623                           
  1624                           ; 4 bytes @ 0x6
  1625  000007                     	ds	2
  1626  000009                     ?i2___lltoft:
  1627                           	opt stack 0
  1628  000009                     i2digitalWrite@val:
  1629                           	opt stack 0
  1630  000009                     i2___awdiv@divisor:
  1631                           	opt stack 0
  1632  000009                     i2startTimer@val:
  1633                           	opt stack 0
  1634  000009                     i2___lldiv@quotient:
  1635                           	opt stack 0
  1636  000009                     i2___lltoft@c:
  1637                           	opt stack 0
  1638                           
  1639                           ; 4 bytes @ 0x8
  1640  000009                     	ds	1
  1641  00000A                     i2__tdiv_to_l_@quot:
  1642                           	opt stack 0
  1643                           
  1644                           ; 4 bytes @ 0x9
  1645  00000A                     	ds	1
  1646  00000B                     ??i2_digitalWrite:
  1647  00000B                     i2___awdiv@counter:
  1648                           	opt stack 0
  1649  00000B                     i2__div_to_l_@cntr:
  1650                           	opt stack 0
  1651                           
  1652                           ; 1 bytes @ 0xA
  1653  00000B                     	ds	1
  1654  00000C                     i2___awdiv@sign:
  1655                           	opt stack 0
  1656  00000C                     i2__div_to_l_@exp1:
  1657                           	opt stack 0
  1658                           
  1659                           ; 1 bytes @ 0xB
  1660  00000C                     	ds	1
  1661  00000D                     ??i2_startTimer:
  1662  00000D                     ??i2___lltoft:
  1663  00000D                     i2___lldiv@counter:
  1664                           	opt stack 0
  1665  00000D                     i2___awdiv@quotient:
  1666                           	opt stack 0
  1667                           
  1668                           ; 2 bytes @ 0xC
  1669  00000D                     	ds	1
  1670  00000E                     ?i2___llmod:
  1671                           	opt stack 0
  1672  00000E                     i2__tdiv_to_l_@cntr:
  1673                           	opt stack 0
  1674  00000E                     i2digitalWrite@p:
  1675                           	opt stack 0
  1676  00000E                     i2___llmod@dividend:
  1677                           	opt stack 0
  1678                           
  1679                           ; 4 bytes @ 0xD
  1680  00000E                     	ds	1
  1681  00000F                     ?i2___wmul:
  1682                           	opt stack 0
  1683  00000F                     i2__tdiv_to_l_@exp1:
  1684                           	opt stack 0
  1685  00000F                     i2___wmul@multiplier:
  1686                           	opt stack 0
  1687                           
  1688                           ; 2 bytes @ 0xE
  1689  00000F                     	ds	1
  1690  000010                     ??_servoInterruptService:
  1691                           
  1692                           ; 1 bytes @ 0xF
  1693  000010                     	ds	1
  1694  000011                     i2___lltoft@exp:
  1695                           	opt stack 0
  1696  000011                     i2___wmul@multiplicand:
  1697                           	opt stack 0
  1698                           
  1699                           ; 2 bytes @ 0x10
  1700  000011                     	ds	1
  1701  000012                     i2___llmod@divisor:
  1702                           	opt stack 0
  1703                           
  1704                           ; 4 bytes @ 0x11
  1705  000012                     	ds	1
  1706  000013                     i2___wmul@product:
  1707                           	opt stack 0
  1708                           
  1709                           ; 2 bytes @ 0x12
  1710  000013                     	ds	2
  1711  000015                     ?i2___ftmul:
  1712                           	opt stack 0
  1713  000015                     i2___ftmul@f1:
  1714                           	opt stack 0
  1715                           
  1716                           ; 3 bytes @ 0x14
  1717  000015                     	ds	1
  1718  000016                     i2___llmod@counter:
  1719                           	opt stack 0
  1720                           
  1721                           ; 1 bytes @ 0x15
  1722  000016                     	ds	2
  1723  000018                     i2___ftmul@f2:
  1724                           	opt stack 0
  1725                           
  1726                           ; 3 bytes @ 0x17
  1727  000018                     	ds	3
  1728  00001B                     ??i2___ftmul:
  1729                           
  1730                           ; 1 bytes @ 0x1A
  1731  00001B                     	ds	3
  1732  00001E                     i2___ftmul@exp:
  1733                           	opt stack 0
  1734                           
  1735                           ; 1 bytes @ 0x1D
  1736  00001E                     	ds	1
  1737  00001F                     i2___ftmul@f3_as_product:
  1738                           	opt stack 0
  1739                           
  1740                           ; 3 bytes @ 0x1E
  1741  00001F                     	ds	3
  1742  000022                     i2___ftmul@cntr:
  1743                           	opt stack 0
  1744                           
  1745                           ; 1 bytes @ 0x21
  1746  000022                     	ds	1
  1747  000023                     i2___ftmul@sign:
  1748                           	opt stack 0
  1749                           
  1750                           ; 1 bytes @ 0x22
  1751  000023                     	ds	1
  1752  000024                     ?i2_fround:
  1753                           	opt stack 0
  1754  000024                     ?i2_scale:
  1755                           	opt stack 0
  1756                           
  1757                           ; 3 bytes @ 0x23
  1758  000024                     	ds	3
  1759  000027                     i2_fround$1526:
  1760                           	opt stack 0
  1761  000027                     i2_scale$1527:
  1762                           	opt stack 0
  1763                           
  1764                           ; 3 bytes @ 0x26
  1765  000027                     	ds	3
  1766  00002A                     i2scale@scl:
  1767                           	opt stack 0
  1768  00002A                     i2_fround$1525:
  1769                           	opt stack 0
  1770                           
  1771                           ; 3 bytes @ 0x29
  1772  00002A                     	ds	1
  1773  00002B                     ?i2___fttol:
  1774                           	opt stack 0
  1775  00002B                     i2___fttol@f1:
  1776                           	opt stack 0
  1777                           
  1778                           ; 3 bytes @ 0x2A
  1779  00002B                     	ds	2
  1780  00002D                     i2fround@prec:
  1781                           	opt stack 0
  1782                           
  1783                           ; 1 bytes @ 0x2C
  1784  00002D                     	ds	1
  1785  00002E                     ?i2___ftadd:
  1786                           	opt stack 0
  1787  00002E                     i2___ftadd@f1:
  1788                           	opt stack 0
  1789                           
  1790                           ; 3 bytes @ 0x2D
  1791  00002E                     	ds	1
  1792  00002F                     ??i2___fttol:
  1793                           
  1794                           ; 1 bytes @ 0x2E
  1795  00002F                     	ds	2
  1796  000031                     i2___ftadd@f2:
  1797                           	opt stack 0
  1798                           
  1799                           ; 3 bytes @ 0x30
  1800  000031                     	ds	3
  1801  000034                     ??i2___ftadd:
  1802  000034                     i2___fttol@sign1:
  1803                           	opt stack 0
  1804                           
  1805                           ; 1 bytes @ 0x33
  1806  000034                     	ds	1
  1807  000035                     i2___fttol@lval:
  1808                           	opt stack 0
  1809                           
  1810                           ; 4 bytes @ 0x34
  1811  000035                     	ds	2
  1812  000037                     i2___ftadd@sign:
  1813                           	opt stack 0
  1814                           
  1815                           ; 1 bytes @ 0x36
  1816  000037                     	ds	1
  1817  000038                     i2___ftadd@exp2:
  1818                           	opt stack 0
  1819                           
  1820                           ; 1 bytes @ 0x37
  1821  000038                     	ds	1
  1822  000039                     i2___ftadd@exp1:
  1823                           	opt stack 0
  1824  000039                     i2___fttol@exp1:
  1825                           	opt stack 0
  1826                           
  1827                           ; 1 bytes @ 0x38
  1828  000039                     	ds	1
  1829  00003A                     ?i2___ftsub:
  1830                           	opt stack 0
  1831  00003A                     i2___ftsub@f1:
  1832                           	opt stack 0
  1833                           
  1834                           ; 3 bytes @ 0x39
  1835  00003A                     	ds	3
  1836  00003D                     i2___ftsub@f2:
  1837                           	opt stack 0
  1838                           
  1839                           ; 3 bytes @ 0x3C
  1840  00003D                     	ds	3
  1841  000040                     ?i2_printf:
  1842                           	opt stack 0
  1843  000040                     i2printf@f:
  1844                           	opt stack 0
  1845                           
  1846                           ; 2 bytes @ 0x3F
  1847  000040                     	ds	4
  1848  000044                     ??i2_printf:
  1849                           
  1850                           ; 1 bytes @ 0x43
  1851  000044                     	ds	6
  1852  00004A                     i2_printf$1528:
  1853                           	opt stack 0
  1854                           
  1855                           ; 3 bytes @ 0x49
  1856  00004A                     	ds	3
  1857  00004D                     i2printf@idx:
  1858                           	opt stack 0
  1859                           
  1860                           ; 1 bytes @ 0x4C
  1861  00004D                     	ds	1
  1862  00004E                     i2printf@cp:
  1863                           	opt stack 0
  1864                           
  1865                           ; 2 bytes @ 0x4D
  1866  00004E                     	ds	2
  1867  000050                     i2printf@len:
  1868                           	opt stack 0
  1869                           
  1870                           ; 2 bytes @ 0x4F
  1871  000050                     	ds	2
  1872  000052                     i2printf@ap:
  1873                           	opt stack 0
  1874                           
  1875                           ; 2 bytes @ 0x51
  1876  000052                     	ds	2
  1877  000054                     i2printf@prec:
  1878                           	opt stack 0
  1879                           
  1880                           ; 2 bytes @ 0x53
  1881  000054                     	ds	2
  1882  000056                     i2printf@tmpval:
  1883                           	opt stack 0
  1884                           
  1885                           ; 4 bytes @ 0x55
  1886  000056                     	ds	4
  1887  00005A                     i2printf@exp:
  1888                           	opt stack 0
  1889                           
  1890                           ; 2 bytes @ 0x59
  1891  00005A                     	ds	2
  1892  00005C                     i2printf@val:
  1893                           	opt stack 0
  1894                           
  1895                           ; 4 bytes @ 0x5B
  1896  00005C                     	ds	4
  1897  000060                     i2printf@fval:
  1898                           	opt stack 0
  1899                           
  1900                           ; 3 bytes @ 0x5F
  1901  000060                     	ds	3
  1902  000063                     i2printf@width:
  1903                           	opt stack 0
  1904                           
  1905                           ; 2 bytes @ 0x62
  1906  000063                     	ds	2
  1907  000065                     i2printf@flag:
  1908                           	opt stack 0
  1909                           
  1910                           ; 2 bytes @ 0x64
  1911  000065                     	ds	2
  1912  000067                     i2printf@c:
  1913                           	opt stack 0
  1914                           
  1915                           ; 1 bytes @ 0x66
  1916  000067                     	ds	1
  1917  000068                     ??_service:
  1918                           
  1919                           ; 1 bytes @ 0x67
  1920  000068                     	ds	18
  1921  00007A                     service@key:
  1922                           	opt stack 0
  1923                           
  1924                           ; 1 bytes @ 0x79
  1925  00007A                     	ds	1
  1926                           tblptru	equ	0xFF8
  1927                           tblptrh	equ	0xFF7
  1928                           tblptrl	equ	0xFF6
  1929                           tablat	equ	0xFF5
  1930                           postinc0	equ	0xFEE
  1931                           wreg	equ	0xFE8
  1932                           postdec1	equ	0xFE5
  1933                           fsr1l	equ	0xFE1
  1934                           
  1935 ;;
  1936 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1937 ;;
  1938 ;; *************** function _main *****************
  1939 ;; Defined at:
  1940 ;;		line 93 in file "main.c"
  1941 ;; Parameters:    Size  Location     Type
  1942 ;;		None
  1943 ;; Auto vars:     Size  Location     Type
  1944 ;;  prevTime        4   46[BANK1 ] long 
  1945 ;; Return value:  Size  Location     Type
  1946 ;;                  1    wreg      void 
  1947 ;; Registers used:
  1948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1949 ;; Tracked objects:
  1950 ;;		On entry : 0/0
  1951 ;;		On exit  : 0/0
  1952 ;;		Unchanged: 0/0
  1953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1955 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1956 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1957 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1958 ;;Total ram usage:        5 bytes
  1959 ;; Hardware stack levels required when called:   12
  1960 ;; This function calls:
  1961 ;;		___aldiv
  1962 ;;		___almod
  1963 ;;		_digitalWrite
  1964 ;;		_initLCD
  1965 ;;		_initServo
  1966 ;;		_initTimer
  1967 ;;		_lcdClear
  1968 ;;		_lcdHome
  1969 ;;		_pinSetup
  1970 ;;		_printf
  1971 ;;		_sortBattery
  1972 ;;		_startTimer
  1973 ;; This function is called by:
  1974 ;;		Startup code after reset
  1975 ;; This function uses a non-reentrant model
  1976 ;;
  1977                           
  1978                           	psect	text0
  1979  002CB0                     __ptext0:
  1980                           	opt stack 0
  1981  002CB0                     _main:
  1982                           	opt stack 19
  1983                           
  1984                           ;main.c: 94: pinSetup();
  1985                           
  1986                           ;incstack = 0
  1987  002CB0  EC16  F028         	call	_pinSetup	;wreg free
  1988                           
  1989                           ;main.c: 95: initLCD();
  1990  002CB4  EC6B  F027         	call	_initLCD	;wreg free
  1991                           
  1992                           ;main.c: 103: long prevTime = 0;
  1993                           
  1994                           ;main.c: 97: while(1){
  1995  002CB8  0E00               	movlw	0
  1996  002CBA  0101               	movlb	1	; () banked
  1997  002CBC  6F67               	movwf	main@prevTime& (0+255),b
  1998  002CBE  0E00               	movlw	0
  1999  002CC0  6F68               	movwf	(main@prevTime+1)& (0+255),b
  2000  002CC2  0E00               	movlw	0
  2001  002CC4  6F69               	movwf	(main@prevTime+2)& (0+255),b
  2002  002CC6  0E00               	movlw	0
  2003  002CC8  6F6A               	movwf	(main@prevTime+3)& (0+255),b
  2004                           
  2005                           ; BSR set to: 1
  2006                           ;main.c: 104: time = 0;
  2007  002CCA  0E00               	movlw	0
  2008  002CCC  0101               	movlb	1	; () banked
  2009  002CCE  6F7F               	movwf	_time& (0+255),b
  2010  002CD0  0E00               	movlw	0
  2011  002CD2  6F80               	movwf	(_time+1)& (0+255),b
  2012  002CD4  0E00               	movlw	0
  2013  002CD6  6F81               	movwf	(_time+2)& (0+255),b
  2014  002CD8  0E00               	movlw	0
  2015  002CDA  6F82               	movwf	(_time+3)& (0+255),b
  2016                           
  2017                           ;main.c: 105: initTimer(1);
  2018  002CDC  0E00               	movlw	0
  2019  002CDE  0100               	movlb	0	; () banked
  2020  002CE0  6F81               	movwf	(initTimer@timer+1)& (0+255),b
  2021  002CE2  0E01               	movlw	1
  2022  002CE4  6F80               	movwf	initTimer@timer& (0+255),b
  2023  002CE6  ECF8  F026         	call	_initTimer	;wreg free
  2024                           
  2025                           ;main.c: 106: startTimer(1,0);
  2026  002CEA  0E00               	movlw	0
  2027  002CEC  0100               	movlb	0	; () banked
  2028  002CEE  6F81               	movwf	(startTimer@timer+1)& (0+255),b
  2029  002CF0  0E01               	movlw	1
  2030  002CF2  6F80               	movwf	startTimer@timer& (0+255),b
  2031  002CF4  0E00               	movlw	0
  2032  002CF6  0100               	movlb	0	; () banked
  2033  002CF8  6F82               	movwf	startTimer@val& (0+255),b
  2034  002CFA  0E00               	movlw	0
  2035  002CFC  6F83               	movwf	(startTimer@val+1)& (0+255),b
  2036  002CFE  0E00               	movlw	0
  2037  002D00  6F84               	movwf	(startTimer@val+2)& (0+255),b
  2038  002D02  0E00               	movlw	0
  2039  002D04  6F85               	movwf	(startTimer@val+3)& (0+255),b
  2040  002D06  ECD0  F026         	call	_startTimer	;wreg free
  2041                           
  2042                           ;main.c: 109: digitalWrite(cylinderMotor, 1);
  2043  002D0A  0E25               	movlw	low _cylinderMotor
  2044  002D0C  0100               	movlb	0	; () banked
  2045  002D0E  6F80               	movwf	digitalWrite@pin& (0+255),b
  2046  002D10  0E01               	movlw	high _cylinderMotor
  2047  002D12  0100               	movlb	0	; () banked
  2048  002D14  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2049  002D16  0E00               	movlw	0
  2050  002D18  0100               	movlb	0	; () banked
  2051  002D1A  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2052  002D1C  0E01               	movlw	1
  2053  002D1E  6F82               	movwf	digitalWrite@val& (0+255),b
  2054  002D20  ECDE  F01E         	call	_digitalWrite	;wreg free
  2055                           
  2056                           ;main.c: 110: initServo(conveyorServo, 0);
  2057  002D24  0E21               	movlw	low _conveyorServo
  2058  002D26  0100               	movlb	0	; () banked
  2059  002D28  6FF6               	movwf	initServo@motor& (0+255),b
  2060  002D2A  0E01               	movlw	high _conveyorServo
  2061  002D2C  0100               	movlb	0	; () banked
  2062  002D2E  6FF7               	movwf	(initServo@motor+1)& (0+255),b
  2063  002D30  0E00               	movlw	0
  2064  002D32  0100               	movlb	0	; () banked
  2065  002D34  6FF9               	movwf	(initServo@angle+1)& (0+255),b
  2066  002D36  0E00               	movlw	0
  2067  002D38  6FF8               	movwf	initServo@angle& (0+255),b
  2068  002D3A  ECC1  F024         	call	_initServo	;wreg free
  2069                           
  2070                           ;main.c: 111: initServo(padServo, padAngle_NEUTRAL);
  2071  002D3E  0E31               	movlw	low _padServo
  2072  002D40  0100               	movlb	0	; () banked
  2073  002D42  6FF6               	movwf	initServo@motor& (0+255),b
  2074  002D44  0E01               	movlw	high _padServo
  2075  002D46  0100               	movlb	0	; () banked
  2076  002D48  6FF7               	movwf	(initServo@motor+1)& (0+255),b
  2077  002D4A  C10F  F0F8         	movff	_padAngle_NEUTRAL,initServo@angle
  2078  002D4E  C110  F0F9         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  2079  002D52  ECC1  F024         	call	_initServo	;wreg free
  2080                           
  2081                           ;main.c: 112: initServo(redirectingServo, redirectAngle_AA);
  2082  002D56  0E35               	movlw	low _redirectingServo
  2083  002D58  0100               	movlb	0	; () banked
  2084  002D5A  6FF6               	movwf	initServo@motor& (0+255),b
  2085  002D5C  0E01               	movlw	high _redirectingServo
  2086  002D5E  0100               	movlb	0	; () banked
  2087  002D60  6FF7               	movwf	(initServo@motor+1)& (0+255),b
  2088  002D62  C117  F0F8         	movff	_redirectAngle_AA,initServo@angle
  2089  002D66  C118  F0F9         	movff	_redirectAngle_AA+1,initServo@angle+1
  2090  002D6A  ECC1  F024         	call	_initServo	;wreg free
  2091  002D6E                     l116:
  2092                           
  2093                           ;main.c: 116: lcdClear();
  2094  002D6E  EC32  F029         	call	_lcdClear	;wreg free
  2095                           
  2096                           ;main.c: 117: printf("running");
  2097  002D72  0EF6               	movlw	low STR_1
  2098  002D74  0100               	movlb	0	; () banked
  2099  002D76  6FD5               	movwf	printf@f& (0+255),b
  2100  002D78  0EFF               	movlw	high STR_1
  2101  002D7A  0100               	movlb	0	; () banked
  2102  002D7C  6FD6               	movwf	(printf@f+1)& (0+255),b
  2103  002D7E  EC09  F000         	call	_printf	;wreg free
  2104                           
  2105                           ;main.c: 119: while(!batteryDetected){
  2106  002D82  D05B               	goto	l6684
  2107  002D84                     l6678:
  2108                           
  2109                           ;main.c: 121: lcdHome();
  2110  002D84  EC36  F029         	call	_lcdHome	;wreg free
  2111                           
  2112                           ;main.c: 122: printf("time %02ld:%02ld",time/600,(time/10)%60);
  2113  002D88  0EC3               	movlw	low STR_2
  2114  002D8A  0100               	movlb	0	; () banked
  2115  002D8C  6FD5               	movwf	printf@f& (0+255),b
  2116  002D8E  0EFF               	movlw	high STR_2
  2117  002D90  0100               	movlb	0	; () banked
  2118  002D92  6FD6               	movwf	(printf@f+1)& (0+255),b
  2119  002D94  C17F  F080         	movff	_time,___aldiv@dividend
  2120  002D98  C180  F081         	movff	_time+1,___aldiv@dividend+1
  2121  002D9C  C181  F082         	movff	_time+2,___aldiv@dividend+2
  2122  002DA0  C182  F083         	movff	_time+3,___aldiv@dividend+3
  2123  002DA4  0E58               	movlw	88
  2124  002DA6  0100               	movlb	0	; () banked
  2125  002DA8  6F84               	movwf	___aldiv@divisor& (0+255),b
  2126  002DAA  0E02               	movlw	2
  2127  002DAC  6F85               	movwf	(___aldiv@divisor+1)& (0+255),b
  2128  002DAE  0E00               	movlw	0
  2129  002DB0  6F86               	movwf	(___aldiv@divisor+2)& (0+255),b
  2130  002DB2  0E00               	movlw	0
  2131  002DB4  6F87               	movwf	(___aldiv@divisor+3)& (0+255),b
  2132  002DB6  ECCB  F01D         	call	___aldiv	;wreg free
  2133  002DBA  C080  F0D7         	movff	?___aldiv,?_printf+2
  2134  002DBE  C081  F0D8         	movff	?___aldiv+1,?_printf+3
  2135  002DC2  C082  F0D9         	movff	?___aldiv+2,?_printf+4
  2136  002DC6  C083  F0DA         	movff	?___aldiv+3,?_printf+5
  2137  002DCA  0E0A               	movlw	10
  2138  002DCC  0100               	movlb	0	; () banked
  2139  002DCE  6F84               	movwf	___aldiv@divisor& (0+255),b
  2140  002DD0  0E00               	movlw	0
  2141  002DD2  6F85               	movwf	(___aldiv@divisor+1)& (0+255),b
  2142  002DD4  0E00               	movlw	0
  2143  002DD6  6F86               	movwf	(___aldiv@divisor+2)& (0+255),b
  2144  002DD8  0E00               	movlw	0
  2145  002DDA  6F87               	movwf	(___aldiv@divisor+3)& (0+255),b
  2146  002DDC  C17F  F080         	movff	_time,___aldiv@dividend
  2147  002DE0  C180  F081         	movff	_time+1,___aldiv@dividend+1
  2148  002DE4  C181  F082         	movff	_time+2,___aldiv@dividend+2
  2149  002DE8  C182  F083         	movff	_time+3,___aldiv@dividend+3
  2150  002DEC  ECCB  F01D         	call	___aldiv	;wreg free
  2151  002DF0  C080  F08E         	movff	?___aldiv,___almod@dividend
  2152  002DF4  C081  F08F         	movff	?___aldiv+1,___almod@dividend+1
  2153  002DF8  C082  F090         	movff	?___aldiv+2,___almod@dividend+2
  2154  002DFC  C083  F091         	movff	?___aldiv+3,___almod@dividend+3
  2155  002E00  0E3C               	movlw	60
  2156  002E02  0100               	movlb	0	; () banked
  2157  002E04  6F92               	movwf	___almod@divisor& (0+255),b
  2158  002E06  0E00               	movlw	0
  2159  002E08  6F93               	movwf	(___almod@divisor+1)& (0+255),b
  2160  002E0A  0E00               	movlw	0
  2161  002E0C  6F94               	movwf	(___almod@divisor+2)& (0+255),b
  2162  002E0E  0E00               	movlw	0
  2163  002E10  6F95               	movwf	(___almod@divisor+3)& (0+255),b
  2164  002E12  ECD1  F020         	call	___almod	;wreg free
  2165  002E16  C08E  F0DB         	movff	?___almod,?_printf+6
  2166  002E1A  C08F  F0DC         	movff	?___almod+1,?_printf+7
  2167  002E1E  C090  F0DD         	movff	?___almod+2,?_printf+8
  2168  002E22  C091  F0DE         	movff	?___almod+3,?_printf+9
  2169  002E26  EC09  F000         	call	_printf	;wreg free
  2170                           
  2171                           ;main.c: 123: _delay((unsigned long)((77)*(10000000/4000.0)));
  2172  002E2A  0EFA               	movlw	250
  2173  002E2C  0100               	movlb	0	; () banked
  2174  002E2E  6FFE               	movwf	??_main& (0+255),b
  2175  002E30  0EFF               	movlw	255
  2176  002E32                     u7787:
  2177  002E32  2EE8               	decfsz	wreg,f,c
  2178  002E34  D7FE               	bra	u7787
  2179  002E36  2FFE               	decfsz	??_main& (0+255),f,b
  2180  002E38  D7FC               	bra	u7787
  2181  002E3A                     l6684:
  2182  002E3A  0101               	movlb	1	; () banked
  2183  002E3C  5183               	movf	_batteryDetected& (0+255),w,b
  2184  002E3E  0101               	movlb	1	; () banked
  2185  002E40  1184               	iorwf	(_batteryDetected+1)& (0+255),w,b
  2186  002E42  B4D8               	btfsc	status,2,c
  2187  002E44  D79F               	goto	l6678
  2188                           
  2189                           ; BSR set to: 1
  2190                           ;main.c: 126: }
  2191                           ;main.c: 128: sortBattery();
  2192                           
  2193                           ; BSR set to: 1
  2194  002E46  ECF8  F00F         	call	_sortBattery	;wreg free
  2195                           
  2196                           ;main.c: 131: batteryDetected = 0;
  2197  002E4A  0E00               	movlw	0
  2198  002E4C  0101               	movlb	1	; () banked
  2199  002E4E  6F84               	movwf	(_batteryDetected+1)& (0+255),b
  2200  002E50  0E00               	movlw	0
  2201  002E52  6F83               	movwf	_batteryDetected& (0+255),b
  2202                           
  2203                           ; BSR set to: 1
  2204  002E54  D78C               	goto	l116
  2205  002E56                     l124:
  2206  002E56  D7FF               	goto	l124
  2207  002E58                     __end_of_main:
  2208                           	opt stack 0
  2209                           tblptru	equ	0xFF8
  2210                           tblptrh	equ	0xFF7
  2211                           tblptrl	equ	0xFF6
  2212                           tablat	equ	0xFF5
  2213                           postinc0	equ	0xFEE
  2214                           wreg	equ	0xFE8
  2215                           postdec1	equ	0xFE5
  2216                           fsr1l	equ	0xFE1
  2217                           status	equ	0xFD8
  2218                           
  2219 ;; *************** function _sortBattery *****************
  2220 ;; Defined at:
  2221 ;;		line 143 in file "main.c"
  2222 ;; Parameters:    Size  Location     Type
  2223 ;;		None
  2224 ;; Auto vars:     Size  Location     Type
  2225 ;;  V_float         3   30[BANK1 ] float 
  2226 ;;  V               3   43[BANK1 ] float 
  2227 ;;  resolution      3   36[BANK1 ] float 
  2228 ;;  Vcc             3   33[BANK1 ] float 
  2229 ;;  signal          2   41[BANK1 ] int 
  2230 ;;  targetAngle     2   39[BANK1 ] int 
  2231 ;; Return value:  Size  Location     Type
  2232 ;;                  1    wreg      void 
  2233 ;; Registers used:
  2234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2235 ;; Tracked objects:
  2236 ;;		On entry : 0/0
  2237 ;;		On exit  : 0/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2241 ;;      Locals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2242 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2243 ;;      Totals:         0       2      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2244 ;;Total ram usage:       18 bytes
  2245 ;; Hardware stack levels used:    1
  2246 ;; Hardware stack levels required when called:   11
  2247 ;; This function calls:
  2248 ;;		___altoft
  2249 ;;		___ftdiv
  2250 ;;		___ftge
  2251 ;;		___ftmul
  2252 ;;		_analogRead
  2253 ;;		_digitalRead
  2254 ;;		_digitalWrite
  2255 ;;		_lcdClear
  2256 ;;		_printf
  2257 ;;		_readKeypad
  2258 ;;		_setAngle
  2259 ;; This function is called by:
  2260 ;;		_main
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           	psect	text1
  2265  001FF0                     __ptext1:
  2266                           	opt stack 0
  2267  001FF0                     _sortBattery:
  2268                           	opt stack 19
  2269                           
  2270                           ;main.c: 146: setAngle(conveyorServo, 90);
  2271                           
  2272                           ;incstack = 0
  2273  001FF0  0E21               	movlw	low _conveyorServo
  2274  001FF2  0100               	movlb	0	; () banked
  2275  001FF4  6FEC               	movwf	setAngle@motor& (0+255),b
  2276  001FF6  0E01               	movlw	high _conveyorServo
  2277  001FF8  0100               	movlb	0	; () banked
  2278  001FFA  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2279  001FFC  0E00               	movlw	0
  2280  001FFE  0100               	movlb	0	; () banked
  2281  002000  6FEF               	movwf	(setAngle@angle+1)& (0+255),b
  2282  002002  0E5A               	movlw	90
  2283  002004  6FEE               	movwf	setAngle@angle& (0+255),b
  2284  002006  EC4A  F021         	call	_setAngle	;wreg free
  2285                           
  2286                           ;main.c: 147: digitalWrite(cylinderMotor, 0);
  2287  00200A  0E25               	movlw	low _cylinderMotor
  2288  00200C  0100               	movlb	0	; () banked
  2289  00200E  6F80               	movwf	digitalWrite@pin& (0+255),b
  2290  002010  0E01               	movlw	high _cylinderMotor
  2291  002012  0100               	movlb	0	; () banked
  2292  002014  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2293  002016  0E00               	movlw	0
  2294  002018  0100               	movlb	0	; () banked
  2295  00201A  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2296  00201C  0E00               	movlw	0
  2297  00201E  6F82               	movwf	digitalWrite@val& (0+255),b
  2298  002020  ECDE  F01E         	call	_digitalWrite	;wreg free
  2299                           
  2300                           ;main.c: 150: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2301  002024  0E0D               	movlw	13
  2302  002026  0100               	movlb	0	; () banked
  2303  002028  6FF7               	movwf	(??_sortBattery+1)& (0+255),b
  2304  00202A  0EAF               	movlw	175
  2305  00202C  0100               	movlb	0	; () banked
  2306  00202E  6FF6               	movwf	??_sortBattery& (0+255),b
  2307  002030  0EB6               	movlw	182
  2308  002032                     u7797:
  2309  002032  2EE8               	decfsz	wreg,f,c
  2310  002034  D7FE               	bra	u7797
  2311  002036  2FF6               	decfsz	??_sortBattery& (0+255),f,b
  2312  002038  D7FC               	bra	u7797
  2313  00203A  2FF7               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2314  00203C  D7FA               	bra	u7797
  2315  00203E  F000               	nop	
  2316                           
  2317                           ;main.c: 154: setAngle(padServo, padAngle_CLOSE);
  2318  002040  0E31               	movlw	low _padServo
  2319  002042  0100               	movlb	0	; () banked
  2320  002044  6FEC               	movwf	setAngle@motor& (0+255),b
  2321  002046  0E01               	movlw	high _padServo
  2322  002048  0100               	movlb	0	; () banked
  2323  00204A  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2324  00204C  C10D  F0EE         	movff	_padAngle_CLOSE,setAngle@angle
  2325  002050  C10E  F0EF         	movff	_padAngle_CLOSE+1,setAngle@angle+1
  2326  002054  EC4A  F021         	call	_setAngle	;wreg free
  2327                           
  2328                           ;main.c: 155: _delay((unsigned long)((500)*(10000000/4000.0)));
  2329  002058  0E07               	movlw	7
  2330  00205A  0100               	movlb	0	; () banked
  2331  00205C  6FF7               	movwf	(??_sortBattery+1)& (0+255),b
  2332  00205E  0E58               	movlw	88
  2333  002060  0100               	movlb	0	; () banked
  2334  002062  6FF6               	movwf	??_sortBattery& (0+255),b
  2335  002064  0E59               	movlw	89
  2336  002066                     u7807:
  2337  002066  2EE8               	decfsz	wreg,f,c
  2338  002068  D7FE               	bra	u7807
  2339  00206A  2FF6               	decfsz	??_sortBattery& (0+255),f,b
  2340  00206C  D7FC               	bra	u7807
  2341  00206E  2FF7               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2342  002070  D7FA               	bra	u7807
  2343  002072  D000               	nop2	
  2344                           
  2345                           ;main.c: 159: float Vcc = 4.61;
  2346  002074  0E85               	movlw	133
  2347  002076  0101               	movlb	1	; () banked
  2348  002078  6F5A               	movwf	sortBattery@Vcc& (0+255),b
  2349  00207A  0E93               	movlw	147
  2350  00207C  0101               	movlb	1	; () banked
  2351  00207E  6F5B               	movwf	(sortBattery@Vcc+1)& (0+255),b
  2352  002080  0E40               	movlw	64
  2353  002082  0101               	movlb	1	; () banked
  2354  002084  6F5C               	movwf	(sortBattery@Vcc+2)& (0+255),b
  2355                           
  2356                           ; BSR set to: 1
  2357                           ;main.c: 160: float resolution = (1<<10) - 1;
  2358  002086  0EC0               	movlw	192
  2359  002088  0101               	movlb	1	; () banked
  2360  00208A  6F5D               	movwf	sortBattery@resolution& (0+255),b
  2361  00208C  0E7F               	movlw	127
  2362  00208E  0101               	movlb	1	; () banked
  2363  002090  6F5E               	movwf	(sortBattery@resolution+1)& (0+255),b
  2364  002092  0E44               	movlw	68
  2365  002094  0101               	movlb	1	; () banked
  2366  002096  6F5F               	movwf	(sortBattery@resolution+2)& (0+255),b
  2367                           
  2368                           ; BSR set to: 1
  2369                           ;main.c: 162: int targetAngle;
  2370                           ;main.c: 163: int signal = digitalRead(padPin1)<<1;
  2371  002098  0E29               	movlw	low _padPin1
  2372  00209A  0100               	movlb	0	; () banked
  2373  00209C  6F80               	movwf	digitalRead@pin& (0+255),b
  2374  00209E  0E01               	movlw	high _padPin1
  2375  0020A0  0100               	movlb	0	; () banked
  2376  0020A2  6F81               	movwf	(digitalRead@pin+1)& (0+255),b
  2377  0020A4  EC9F  F01C         	call	_digitalRead	;wreg free
  2378  0020A8  90D8               	bcf	status,0,c
  2379  0020AA  0100               	movlb	0	; () banked
  2380  0020AC  3580               	rlcf	?_digitalRead& (0+255),w,b
  2381  0020AE  0101               	movlb	1	; () banked
  2382  0020B0  6F62               	movwf	sortBattery@signal& (0+255),b
  2383  0020B2  0100               	movlb	0	; () banked
  2384  0020B4  3581               	rlcf	(?_digitalRead+1)& (0+255),w,b
  2385  0020B6  0101               	movlb	1	; () banked
  2386  0020B8  6F63               	movwf	(sortBattery@signal+1)& (0+255),b
  2387                           
  2388                           ; BSR set to: 1
  2389                           ;main.c: 164: signal |= digitalRead(padPin2);
  2390  0020BA  0E2D               	movlw	low _padPin2
  2391  0020BC  0100               	movlb	0	; () banked
  2392  0020BE  6F80               	movwf	digitalRead@pin& (0+255),b
  2393  0020C0  0E01               	movlw	high _padPin2
  2394  0020C2  0100               	movlb	0	; () banked
  2395  0020C4  6F81               	movwf	(digitalRead@pin+1)& (0+255),b
  2396  0020C6  EC9F  F01C         	call	_digitalRead	;wreg free
  2397  0020CA  0100               	movlb	0	; () banked
  2398  0020CC  5180               	movf	?_digitalRead& (0+255),w,b
  2399  0020CE  0101               	movlb	1	; () banked
  2400  0020D0  1362               	iorwf	sortBattery@signal& (0+255),f,b
  2401  0020D2  0100               	movlb	0	; () banked
  2402  0020D4  5181               	movf	(?_digitalRead+1)& (0+255),w,b
  2403  0020D6  0101               	movlb	1	; () banked
  2404  0020D8  1363               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  2405                           
  2406                           ; BSR set to: 1
  2407                           ;main.c: 166: digitalWrite(AA_float, 1);
  2408  0020DA  0E1D               	movlw	low _AA_float
  2409  0020DC  0100               	movlb	0	; () banked
  2410  0020DE  6F80               	movwf	digitalWrite@pin& (0+255),b
  2411  0020E0  0E01               	movlw	high _AA_float
  2412  0020E2  0100               	movlb	0	; () banked
  2413  0020E4  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2414  0020E6  0E00               	movlw	0
  2415  0020E8  0100               	movlb	0	; () banked
  2416  0020EA  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2417  0020EC  0E01               	movlw	1
  2418  0020EE  6F82               	movwf	digitalWrite@val& (0+255),b
  2419  0020F0  ECDE  F01E         	call	_digitalWrite	;wreg free
  2420                           
  2421                           ;main.c: 167: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2422  0020F4  C15D  F095         	movff	sortBattery@resolution,___ftdiv@f2
  2423  0020F8  C15E  F096         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2424  0020FC  C15F  F097         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2425  002100  C17D  F080         	movff	_padPin3+2,analogRead@channel
  2426  002104  C17E  F081         	movff	_padPin3+3,analogRead@channel+1
  2427  002108  ECD5  F027         	call	_analogRead	;wreg free
  2428  00210C  C080  F088         	movff	?_analogRead,___altoft@c
  2429  002110  C081  F089         	movff	?_analogRead+1,___altoft@c+1
  2430  002114  C082  F08A         	movff	?_analogRead+2,___altoft@c+2
  2431  002118  C083  F08B         	movff	?_analogRead+3,___altoft@c+3
  2432  00211C  ECDD  F023         	call	___altoft	;wreg free
  2433  002120  C088  F092         	movff	?___altoft,___ftdiv@f1
  2434  002124  C089  F093         	movff	?___altoft+1,___ftdiv@f1+1
  2435  002128  C08A  F094         	movff	?___altoft+2,___ftdiv@f1+2
  2436  00212C  EC21  F01A         	call	___ftdiv	;wreg free
  2437  002130  C092  F0A1         	movff	?___ftdiv,___ftmul@f1
  2438  002134  C093  F0A2         	movff	?___ftdiv+1,___ftmul@f1+1
  2439  002138  C094  F0A3         	movff	?___ftdiv+2,___ftmul@f1+2
  2440  00213C  C15A  F0A4         	movff	sortBattery@Vcc,___ftmul@f2
  2441  002140  C15B  F0A5         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2442  002144  C15C  F0A6         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2443  002148  EC72  F019         	call	___ftmul	;wreg free
  2444  00214C  C0A1  F164         	movff	?___ftmul,sortBattery@V
  2445  002150  C0A2  F165         	movff	?___ftmul+1,sortBattery@V+1
  2446  002154  C0A3  F166         	movff	?___ftmul+2,sortBattery@V+2
  2447                           
  2448                           ;main.c: 169: lcdClear();
  2449  002158  EC32  F029         	call	_lcdClear	;wreg free
  2450                           
  2451                           ;main.c: 170: printf("sig: %d \nV: %f",signal,V);
  2452  00215C  0ED4               	movlw	low STR_3
  2453  00215E  0100               	movlb	0	; () banked
  2454  002160  6FD5               	movwf	printf@f& (0+255),b
  2455  002162  0EFF               	movlw	high STR_3
  2456  002164  0100               	movlb	0	; () banked
  2457  002166  6FD6               	movwf	(printf@f+1)& (0+255),b
  2458  002168  C162  F0D7         	movff	sortBattery@signal,?_printf+2
  2459  00216C  C163  F0D8         	movff	sortBattery@signal+1,?_printf+3
  2460  002170  C164  F0D9         	movff	sortBattery@V,?_printf+4
  2461  002174  C165  F0DA         	movff	sortBattery@V+1,?_printf+5
  2462  002178  C166  F0DB         	movff	sortBattery@V+2,?_printf+6
  2463  00217C  EC09  F000         	call	_printf	;wreg free
  2464                           
  2465                           ;main.c: 171: readKeypad();
  2466  002180  EC85  F028         	call	_readKeypad	;wreg free
  2467                           
  2468                           ;main.c: 175: switch(signal){
  2469  002184  D0A3               	goto	l6220
  2470  002186                     l6198:
  2471                           
  2472                           ;main.c: 178: digitalWrite(AA_float, 0);
  2473  002186  0E1D               	movlw	low _AA_float
  2474  002188  0100               	movlb	0	; () banked
  2475  00218A  6F80               	movwf	digitalWrite@pin& (0+255),b
  2476  00218C  0E01               	movlw	high _AA_float
  2477  00218E  0100               	movlb	0	; () banked
  2478  002190  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2479  002192  0E00               	movlw	0
  2480  002194  0100               	movlb	0	; () banked
  2481  002196  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2482  002198  0E00               	movlw	0
  2483  00219A  6F82               	movwf	digitalWrite@val& (0+255),b
  2484  00219C  ECDE  F01E         	call	_digitalWrite	;wreg free
  2485                           
  2486                           ;main.c: 179: _delay((unsigned long)((1)*(10000000/4000.0)));
  2487  0021A0  0E04               	movlw	4
  2488  0021A2  0100               	movlb	0	; () banked
  2489  0021A4  6FF6               	movwf	??_sortBattery& (0+255),b
  2490  0021A6  0E3D               	movlw	61
  2491  0021A8                     u7817:
  2492  0021A8  2EE8               	decfsz	wreg,f,c
  2493  0021AA  D7FE               	bra	u7817
  2494  0021AC  2FF6               	decfsz	??_sortBattery& (0+255),f,b
  2495  0021AE  D7FC               	bra	u7817
  2496  0021B0  D000               	nop2	
  2497                           
  2498                           ;main.c: 180: float V_float = analogRead(padPin3[1]) / resolution * Vcc;
  2499  0021B2  C15D  F095         	movff	sortBattery@resolution,___ftdiv@f2
  2500  0021B6  C15E  F096         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2501  0021BA  C15F  F097         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2502  0021BE  C17D  F080         	movff	_padPin3+2,analogRead@channel
  2503  0021C2  C17E  F081         	movff	_padPin3+3,analogRead@channel+1
  2504  0021C6  ECD5  F027         	call	_analogRead	;wreg free
  2505  0021CA  C080  F088         	movff	?_analogRead,___altoft@c
  2506  0021CE  C081  F089         	movff	?_analogRead+1,___altoft@c+1
  2507  0021D2  C082  F08A         	movff	?_analogRead+2,___altoft@c+2
  2508  0021D6  C083  F08B         	movff	?_analogRead+3,___altoft@c+3
  2509  0021DA  ECDD  F023         	call	___altoft	;wreg free
  2510  0021DE  C088  F092         	movff	?___altoft,___ftdiv@f1
  2511  0021E2  C089  F093         	movff	?___altoft+1,___ftdiv@f1+1
  2512  0021E6  C08A  F094         	movff	?___altoft+2,___ftdiv@f1+2
  2513  0021EA  EC21  F01A         	call	___ftdiv	;wreg free
  2514  0021EE  C092  F0A1         	movff	?___ftdiv,___ftmul@f1
  2515  0021F2  C093  F0A2         	movff	?___ftdiv+1,___ftmul@f1+1
  2516  0021F6  C094  F0A3         	movff	?___ftdiv+2,___ftmul@f1+2
  2517  0021FA  C15A  F0A4         	movff	sortBattery@Vcc,___ftmul@f2
  2518  0021FE  C15B  F0A5         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2519  002202  C15C  F0A6         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2520  002206  EC72  F019         	call	___ftmul	;wreg free
  2521  00220A  C0A1  F157         	movff	?___ftmul,sortBattery@V_float
  2522  00220E  C0A2  F158         	movff	?___ftmul+1,sortBattery@V_float+1
  2523  002212  C0A3  F159         	movff	?___ftmul+2,sortBattery@V_float+2
  2524                           
  2525                           ;main.c: 181: if(V_float < 0.1){
  2526  002216  C157  F080         	movff	sortBattery@V_float,___ftge@ff1
  2527  00221A  C158  F081         	movff	sortBattery@V_float+1,___ftge@ff1+1
  2528  00221E  C159  F082         	movff	sortBattery@V_float+2,___ftge@ff1+2
  2529  002222  0ECD               	movlw	205
  2530  002224  0100               	movlb	0	; () banked
  2531  002226  6F83               	movwf	___ftge@ff2& (0+255),b
  2532  002228  0ECC               	movlw	204
  2533  00222A  0100               	movlb	0	; () banked
  2534  00222C  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  2535  00222E  0E3D               	movlw	61
  2536  002230  0100               	movlb	0	; () banked
  2537  002232  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  2538  002234  ECB0  F021         	call	___ftge	;wreg free
  2539  002238  0100               	movlb	0	; () banked
  2540  00223A  B0D8               	btfsc	status,0,c
  2541  00223C  D016               	goto	l6210
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;main.c: 182: if(V > V_LIM_AA) targetAngle = redirectAngle_AA;
  2545  00223E  C103  F080         	movff	_V_LIM_AA,___ftge@ff1
  2546  002242  C104  F081         	movff	_V_LIM_AA+1,___ftge@ff1+1
  2547  002246  C105  F082         	movff	_V_LIM_AA+2,___ftge@ff1+2
  2548  00224A  C164  F083         	movff	sortBattery@V,___ftge@ff2
  2549  00224E  C165  F084         	movff	sortBattery@V+1,___ftge@ff2+1
  2550  002252  C166  F085         	movff	sortBattery@V+2,___ftge@ff2+2
  2551  002256  ECB0  F021         	call	___ftge	;wreg free
  2552  00225A  0100               	movlb	0	; () banked
  2553  00225C  B0D8               	btfsc	status,0,c
  2554  00225E  D031               	goto	l140
  2555                           
  2556                           ; BSR set to: 0
  2557  002260  C117  F160         	movff	_redirectAngle_AA,sortBattery@targetAngle
  2558  002264  C118  F161         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  2559  002268  D045               	goto	l6222
  2560  00226A                     l6210:
  2561                           
  2562                           ; BSR set to: 0
  2563                           ;main.c: 188: if(V > V_LIM_9V) targetAngle = redirectAngle_9V;
  2564  00226A  C100  F080         	movff	_V_LIM_9V,___ftge@ff1
  2565  00226E  C101  F081         	movff	_V_LIM_9V+1,___ftge@ff1+1
  2566  002272  C102  F082         	movff	_V_LIM_9V+2,___ftge@ff1+2
  2567  002276  C164  F083         	movff	sortBattery@V,___ftge@ff2
  2568  00227A  C165  F084         	movff	sortBattery@V+1,___ftge@ff2+1
  2569  00227E  C166  F085         	movff	sortBattery@V+2,___ftge@ff2+2
  2570  002282  ECB0  F021         	call	___ftge	;wreg free
  2571  002286  0100               	movlb	0	; () banked
  2572  002288  B0D8               	btfsc	status,0,c
  2573  00228A  D01B               	goto	l140
  2574                           
  2575                           ; BSR set to: 0
  2576  00228C  C115  F160         	movff	_redirectAngle_9V,sortBattery@targetAngle
  2577  002290  C116  F161         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  2578  002294  D02F               	goto	l6222
  2579  002296                     l6214:
  2580                           
  2581                           ; BSR set to: 0
  2582                           ;main.c: 192: if(V > V_LIM_C) targetAngle = redirectAngle_C;
  2583  002296  C106  F080         	movff	_V_LIM_C,___ftge@ff1
  2584  00229A  C107  F081         	movff	_V_LIM_C+1,___ftge@ff1+1
  2585  00229E  C108  F082         	movff	_V_LIM_C+2,___ftge@ff1+2
  2586  0022A2  C164  F083         	movff	sortBattery@V,___ftge@ff2
  2587  0022A6  C165  F084         	movff	sortBattery@V+1,___ftge@ff2+1
  2588  0022AA  C166  F085         	movff	sortBattery@V+2,___ftge@ff2+2
  2589  0022AE  ECB0  F021         	call	___ftge	;wreg free
  2590  0022B2  0100               	movlb	0	; () banked
  2591  0022B4  B0D8               	btfsc	status,0,c
  2592  0022B6  D005               	goto	l140
  2593                           
  2594                           ; BSR set to: 0
  2595  0022B8  C119  F160         	movff	_redirectAngle_C,sortBattery@targetAngle
  2596  0022BC  C11A  F161         	movff	_redirectAngle_C+1,sortBattery@targetAngle+1
  2597  0022C0  D019               	goto	l6222
  2598  0022C2                     l140:
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;main.c: 193: else targetAngle = redirectAngle_OTHER;
  2602  0022C2  C11B  F160         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  2603  0022C6  C11C  F161         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  2604                           
  2605                           ; BSR set to: 0
  2606                           ;main.c: 195: }
  2607                           
  2608                           ; BSR set to: 0
  2609                           ;main.c: 194: break;
  2610  0022CA  D014               	goto	l6222
  2611  0022CC                     l6220:
  2612  0022CC  C162  F0F6         	movff	sortBattery@signal,??_sortBattery
  2613  0022D0  C163  F0F7         	movff	sortBattery@signal+1,??_sortBattery+1
  2614                           
  2615                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2616                           ; Switch size 1, requested type "space"
  2617                           ; Number of cases is 1, Range of values is 0 to 0
  2618                           ; switch strategies available:
  2619                           ; Name         Instructions Cycles
  2620                           ; simple_byte            4     3 (average)
  2621                           ;	Chosen strategy is simple_byte
  2622  0022D4  0100               	movlb	0	; () banked
  2623  0022D6  51F7               	movf	(??_sortBattery+1)& (0+255),w,b
  2624  0022D8  0A00               	xorlw	0	; case 0
  2625  0022DA  A4D8               	btfss	status,2,c
  2626  0022DC  D00B               	goto	l6222
  2627                           
  2628                           ; BSR set to: 0
  2629                           ; Switch size 1, requested type "space"
  2630                           ; Number of cases is 3, Range of values is 0 to 2
  2631                           ; switch strategies available:
  2632                           ; Name         Instructions Cycles
  2633                           ; simple_byte           10     6 (average)
  2634                           ;	Chosen strategy is simple_byte
  2635  0022DE  0100               	movlb	0	; () banked
  2636  0022E0  51F6               	movf	??_sortBattery& (0+255),w,b
  2637  0022E2  0A00               	xorlw	0	; case 0
  2638  0022E4  B4D8               	btfsc	status,2,c
  2639  0022E6  D74F               	goto	l6198
  2640  0022E8  0A01               	xorlw	1	; case 1
  2641  0022EA  B4D8               	btfsc	status,2,c
  2642  0022EC  D7D4               	goto	l6214
  2643  0022EE  0A03               	xorlw	3	; case 2
  2644  0022F0  B4D8               	btfsc	status,2,c
  2645  0022F2  D7BB               	goto	l6210
  2646  0022F4                     l6222:
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;main.c: 197: setAngle(redirectingServo, targetAngle);
  2650  0022F4  0E35               	movlw	low _redirectingServo
  2651  0022F6  0100               	movlb	0	; () banked
  2652  0022F8  6FEC               	movwf	setAngle@motor& (0+255),b
  2653  0022FA  0E01               	movlw	high _redirectingServo
  2654  0022FC  0100               	movlb	0	; () banked
  2655  0022FE  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2656  002300  C160  F0EE         	movff	sortBattery@targetAngle,setAngle@angle
  2657  002304  C161  F0EF         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  2658  002308  EC4A  F021         	call	_setAngle	;wreg free
  2659                           
  2660                           ;main.c: 198: _delay((unsigned long)((500)*(10000000/4000.0)));
  2661  00230C  0E07               	movlw	7
  2662  00230E  0100               	movlb	0	; () banked
  2663  002310  6FF7               	movwf	(??_sortBattery+1)& (0+255),b
  2664  002312  0E58               	movlw	88
  2665  002314  0100               	movlb	0	; () banked
  2666  002316  6FF6               	movwf	??_sortBattery& (0+255),b
  2667  002318  0E59               	movlw	89
  2668  00231A                     u7827:
  2669  00231A  2EE8               	decfsz	wreg,f,c
  2670  00231C  D7FE               	bra	u7827
  2671  00231E  2FF6               	decfsz	??_sortBattery& (0+255),f,b
  2672  002320  D7FC               	bra	u7827
  2673  002322  2FF7               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2674  002324  D7FA               	bra	u7827
  2675  002326  D000               	nop2	
  2676                           
  2677                           ;main.c: 202: setAngle(padServo, padAngle_OPEN);
  2678  002328  0E31               	movlw	low _padServo
  2679  00232A  0100               	movlb	0	; () banked
  2680  00232C  6FEC               	movwf	setAngle@motor& (0+255),b
  2681  00232E  0E01               	movlw	high _padServo
  2682  002330  0100               	movlb	0	; () banked
  2683  002332  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2684  002334  C111  F0EE         	movff	_padAngle_OPEN,setAngle@angle
  2685  002338  C112  F0EF         	movff	_padAngle_OPEN+1,setAngle@angle+1
  2686  00233C  EC4A  F021         	call	_setAngle	;wreg free
  2687                           
  2688                           ;main.c: 203: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2689  002340  0E0D               	movlw	13
  2690  002342  0100               	movlb	0	; () banked
  2691  002344  6FF7               	movwf	(??_sortBattery+1)& (0+255),b
  2692  002346  0EAF               	movlw	175
  2693  002348  0100               	movlb	0	; () banked
  2694  00234A  6FF6               	movwf	??_sortBattery& (0+255),b
  2695  00234C  0EB6               	movlw	182
  2696  00234E                     u7837:
  2697  00234E  2EE8               	decfsz	wreg,f,c
  2698  002350  D7FE               	bra	u7837
  2699  002352  2FF6               	decfsz	??_sortBattery& (0+255),f,b
  2700  002354  D7FC               	bra	u7837
  2701  002356  2FF7               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2702  002358  D7FA               	bra	u7837
  2703  00235A  F000               	nop	
  2704                           
  2705                           ;main.c: 207: setAngle(padServo, padAngle_NEUTRAL);
  2706  00235C  0E31               	movlw	low _padServo
  2707  00235E  0100               	movlb	0	; () banked
  2708  002360  6FEC               	movwf	setAngle@motor& (0+255),b
  2709  002362  0E01               	movlw	high _padServo
  2710  002364  0100               	movlb	0	; () banked
  2711  002366  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2712  002368  C10F  F0EE         	movff	_padAngle_NEUTRAL,setAngle@angle
  2713  00236C  C110  F0EF         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  2714  002370  EC4A  F021         	call	_setAngle	;wreg free
  2715                           
  2716                           ;main.c: 211: setAngle(conveyorServo, 0);
  2717  002374  0E21               	movlw	low _conveyorServo
  2718  002376  0100               	movlb	0	; () banked
  2719  002378  6FEC               	movwf	setAngle@motor& (0+255),b
  2720  00237A  0E01               	movlw	high _conveyorServo
  2721  00237C  0100               	movlb	0	; () banked
  2722  00237E  6FED               	movwf	(setAngle@motor+1)& (0+255),b
  2723  002380  0E00               	movlw	0
  2724  002382  0100               	movlb	0	; () banked
  2725  002384  6FEF               	movwf	(setAngle@angle+1)& (0+255),b
  2726  002386  0E00               	movlw	0
  2727  002388  6FEE               	movwf	setAngle@angle& (0+255),b
  2728  00238A  EC4A  F021         	call	_setAngle	;wreg free
  2729                           
  2730                           ;main.c: 212: digitalWrite(cylinderMotor, 1);
  2731  00238E  0E25               	movlw	low _cylinderMotor
  2732  002390  0100               	movlb	0	; () banked
  2733  002392  6F80               	movwf	digitalWrite@pin& (0+255),b
  2734  002394  0E01               	movlw	high _cylinderMotor
  2735  002396  0100               	movlb	0	; () banked
  2736  002398  6F81               	movwf	(digitalWrite@pin+1)& (0+255),b
  2737  00239A  0E00               	movlw	0
  2738  00239C  0100               	movlb	0	; () banked
  2739  00239E  6F83               	movwf	(digitalWrite@val+1)& (0+255),b
  2740  0023A0  0E01               	movlw	1
  2741  0023A2  6F82               	movwf	digitalWrite@val& (0+255),b
  2742  0023A4  ECDE  F01E         	call	_digitalWrite	;wreg free
  2743  0023A8  0012               	return		;funcret
  2744  0023AA                     __end_of_sortBattery:
  2745                           	opt stack 0
  2746                           tblptru	equ	0xFF8
  2747                           tblptrh	equ	0xFF7
  2748                           tblptrl	equ	0xFF6
  2749                           tablat	equ	0xFF5
  2750                           postinc0	equ	0xFEE
  2751                           wreg	equ	0xFE8
  2752                           postdec1	equ	0xFE5
  2753                           fsr1l	equ	0xFE1
  2754                           status	equ	0xFD8
  2755                           
  2756 ;; *************** function _readKeypad *****************
  2757 ;; Defined at:
  2758 ;;		line 36 in file "keypad.c"
  2759 ;; Parameters:    Size  Location     Type
  2760 ;;		None
  2761 ;; Auto vars:     Size  Location     Type
  2762 ;;  key             1    0[BANK0 ] unsigned char 
  2763 ;; Return value:  Size  Location     Type
  2764 ;;                  1    wreg      unsigned char 
  2765 ;; Registers used:
  2766 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2767 ;; Tracked objects:
  2768 ;;		On entry : 0/0
  2769 ;;		On exit  : 0/0
  2770 ;;		Unchanged: 0/0
  2771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2773 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2775 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2776 ;;Total ram usage:        1 bytes
  2777 ;; Hardware stack levels used:    1
  2778 ;; Hardware stack levels required when called:    6
  2779 ;; This function calls:
  2780 ;;		Nothing
  2781 ;; This function is called by:
  2782 ;;		_sortBattery
  2783 ;;		_pause
  2784 ;;		_showInterface
  2785 ;; This function uses a non-reentrant model
  2786 ;;
  2787                           
  2788                           	psect	text2
  2789  00510A                     __ptext2:
  2790                           	opt stack 0
  2791  00510A                     _readKeypad:
  2792                           	opt stack 23
  2793  00510A                     l222:
  2794  00510A  A281               	btfss	3969,1,c	;volatile
  2795  00510C  D7FE               	goto	l222
  2796                           
  2797                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  2798  00510E  3881               	swapf	3969,w,c	;volatile
  2799  005110  0B0F               	andlw	15
  2800  005112  0B0F               	andlw	15
  2801  005114  0100               	movlb	0	; () banked
  2802  005116  6F80               	movwf	readKeypad@key& (0+255),b
  2803  005118                     l225:
  2804  005118  B281               	btfsc	3969,1,c	;volatile
  2805  00511A  D7FE               	goto	l225
  2806                           
  2807                           ;keypad.c: 40: return keys[key];
  2808  00511C  0100               	movlb	0	; () banked
  2809  00511E  5180               	movf	readKeypad@key& (0+255),w,b
  2810  005120  0D01               	mullw	1
  2811  005122  0EC7               	movlw	low _keys
  2812  005124  24F3               	addwf	prodl,w,c
  2813  005126  6EF6               	movwf	tblptrl,c
  2814  005128  0EFE               	movlw	high _keys
  2815  00512A  20F4               	addwfc	prodh,w,c
  2816  00512C  6EF7               	movwf	tblptrh,c
  2817  00512E                     	if	0	;There are less than 3 active tblptr bytes
  2818  00512E                     	endif
  2819  00512E  0008               	tblrd		*
  2820  005130  50F5               	movf	tablat,w,c
  2821  005132  0012               	return	
  2822  005134                     __end_of_readKeypad:
  2823                           	opt stack 0
  2824                           tblptru	equ	0xFF8
  2825                           tblptrh	equ	0xFF7
  2826                           tblptrl	equ	0xFF6
  2827                           tablat	equ	0xFF5
  2828                           prodh	equ	0xFF4
  2829                           prodl	equ	0xFF3
  2830                           postinc0	equ	0xFEE
  2831                           wreg	equ	0xFE8
  2832                           postdec1	equ	0xFE5
  2833                           fsr1l	equ	0xFE1
  2834                           status	equ	0xFD8
  2835                           
  2836 ;; *************** function _printf *****************
  2837 ;; Defined at:
  2838 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2839 ;; Parameters:    Size  Location     Type
  2840 ;;  f               2   85[BANK0 ] PTR const unsigned char 
  2841 ;;		 -> STR_17(17), STR_16(18), STR_15(17), STR_14(18), 
  2842 ;;		 -> STR_13(17), STR_12(19), STR_11(17), STR_10(18), 
  2843 ;;		 -> STR_9(17), STR_8(18), STR_7(17), STR_6(18), 
  2844 ;;		 -> STR_5(8), STR_4(11), STR_3(15), STR_2(17), 
  2845 ;;		 -> STR_1(8), 
  2846 ;; Auto vars:     Size  Location     Type
  2847 ;;  idx             1    5[BANK1 ] unsigned char 
  2848 ;;  val             4   18[BANK1 ] unsigned long 
  2849 ;;  tmpval          4   12[BANK1 ] struct .
  2850 ;;  fval            3   24[BANK1 ] struct .
  2851 ;;  flag            2   27[BANK1 ] unsigned short 
  2852 ;;  width           2   22[BANK1 ] int 
  2853 ;;  exp             2   16[BANK1 ] int 
  2854 ;;  prec            2   10[BANK1 ] int 
  2855 ;;  ap              2    8[BANK1 ] PTR void [1]
  2856 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2857 ;;  len             2    6[BANK1 ] unsigned int 
  2858 ;;  cp              2    3[BANK1 ] PTR const unsigned char 
  2859 ;;		 -> printf@c(1), 
  2860 ;;  c               1   29[BANK1 ] char 
  2861 ;;  d               1    0        unsigned char 
  2862 ;; Return value:  Size  Location     Type
  2863 ;;                  2   85[BANK0 ] int 
  2864 ;; Registers used:
  2865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2866 ;; Tracked objects:
  2867 ;;		On entry : 0/0
  2868 ;;		On exit  : 0/0
  2869 ;;		Unchanged: 0/0
  2870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2871 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2872 ;;      Locals:         0       0      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2873 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2874 ;;      Totals:         0      16      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2875 ;;Total ram usage:       46 bytes
  2876 ;; Hardware stack levels used:    1
  2877 ;; Hardware stack levels required when called:   10
  2878 ;; This function calls:
  2879 ;;		___awdiv
  2880 ;;		___ftadd
  2881 ;;		___ftge
  2882 ;;		___ftmul
  2883 ;;		___ftneg
  2884 ;;		___ftsub
  2885 ;;		___fttol
  2886 ;;		___lldiv
  2887 ;;		___llmod
  2888 ;;		___lltoft
  2889 ;;		___wmul
  2890 ;;		__div_to_l_
  2891 ;;		__tdiv_to_l_
  2892 ;;		_fround
  2893 ;;		_isdigit
  2894 ;;		_putch
  2895 ;;		_scale
  2896 ;; This function is called by:
  2897 ;;		_main
  2898 ;;		_sortBattery
  2899 ;;		_pause
  2900 ;;		_testFrequency
  2901 ;;		_dateTime
  2902 ;;		_mainMenu
  2903 ;;		_runSelect
  2904 ;;		_runMenu
  2905 ;;		_runTime
  2906 ;;		_runStats
  2907 ;; This function uses a non-reentrant model
  2908 ;;
  2909                           
  2910                           	psect	text3
  2911  000012                     __ptext3:
  2912                           	opt stack 0
  2913  000012                     _printf:
  2914                           	opt stack 19
  2915                           
  2916                           ;doprnt.c: 466: va_list ap;
  2917                           ;doprnt.c: 499: signed char c;
  2918                           ;doprnt.c: 501: int width;
  2919                           ;doprnt.c: 504: int prec;
  2920                           ;doprnt.c: 508: unsigned short flag;
  2921                           ;doprnt.c: 515: char d;
  2922                           ;doprnt.c: 516: double fval;
  2923                           ;doprnt.c: 517: int exp;
  2924                           ;doprnt.c: 523: union {
  2925                           ;doprnt.c: 524: unsigned long vd;
  2926                           ;doprnt.c: 525: double integ;
  2927                           ;doprnt.c: 526: } tmpval;
  2928                           ;doprnt.c: 528: unsigned long val;
  2929                           ;doprnt.c: 529: unsigned len;
  2930                           ;doprnt.c: 530: const char * cp;
  2931                           ;doprnt.c: 533: *ap = __va_start();
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;incstack = 0
  2935  000012  0ED7               	movlw	low (?_printf+2)
  2936  000014  0101               	movlb	1	; () banked
  2937  000016  6F41               	movwf	printf@ap& (0+255),b
  2938  000018  0E00               	movlw	high (?_printf+2)
  2939  00001A  0101               	movlb	1	; () banked
  2940  00001C  6F42               	movwf	(printf@ap+1)& (0+255),b
  2941                           
  2942                           ;doprnt.c: 536: while(c = *f++) {
  2943  00001E  EF55  F006         	goto	l5700
  2944  000022                     l5378:
  2945                           
  2946                           ; BSR set to: 1
  2947                           ;doprnt.c: 538: if(c != '%')
  2948  000022  0E25               	movlw	37
  2949  000024  0101               	movlb	1	; () banked
  2950  000026  1956               	xorwf	printf@c& (0+255),w,b
  2951  000028  B4D8               	btfsc	status,2,c
  2952  00002A  D006               	goto	l5382
  2953                           
  2954                           ; BSR set to: 1
  2955                           ;doprnt.c: 540: {
  2956                           ;doprnt.c: 541: (putch(c) );
  2957  00002C  0101               	movlb	1	; () banked
  2958  00002E  5156               	movf	printf@c& (0+255),w,b
  2959  000030  ECC4  F028         	call	_putch
  2960                           
  2961                           ;doprnt.c: 542: continue;
  2962  000034  EF55  F006         	goto	l5700
  2963  000038                     l5382:
  2964                           
  2965                           ;doprnt.c: 543: }
  2966                           ;doprnt.c: 546: width = 0;
  2967  000038  0E00               	movlw	0
  2968  00003A  0101               	movlb	1	; () banked
  2969  00003C  6F50               	movwf	(printf@width+1)& (0+255),b
  2970  00003E  0E00               	movlw	0
  2971  000040  6F4F               	movwf	printf@width& (0+255),b
  2972                           
  2973                           ;doprnt.c: 548: flag = 0;
  2974  000042  0E00               	movlw	0
  2975  000044  0101               	movlb	1	; () banked
  2976  000046  6F55               	movwf	(printf@flag+1)& (0+255),b
  2977  000048  0E00               	movlw	0
  2978  00004A  6F54               	movwf	printf@flag& (0+255),b
  2979                           
  2980                           ; BSR set to: 1
  2981                           ;doprnt.c: 551: switch(*f) {
  2982                           
  2983                           ;doprnt.c: 550: for(;;) {
  2984  00004C  D005               	goto	l5388
  2985  00004E                     l5384:
  2986                           
  2987                           ;doprnt.c: 580: flag |= 0x04;
  2988  00004E  0101               	movlb	1	; () banked
  2989  000050  8554               	bsf	printf@flag& (0+255),2,b
  2990                           
  2991                           ;doprnt.c: 581: f++;
  2992  000052  0100               	movlb	0	; () banked
  2993  000054  4BD5               	infsnz	printf@f& (0+255),f,b
  2994  000056  2BD6               	incf	(printf@f+1)& (0+255),f,b
  2995  000058                     l5388:
  2996  000058  C0D5  FFF6         	movff	printf@f,tblptrl
  2997  00005C  C0D6  FFF7         	movff	printf@f+1,tblptrh
  2998  000060                     	if	0	;tblptru may be non-zero
  2999  000060                     	endif
  3000  000060                     	if	0	;tblptru may be non-zero
  3001  000060                     	endif
  3002  000060  0008               	tblrd		*
  3003  000062  50F5               	movf	tablat,w,c
  3004                           
  3005                           ; Switch size 1, requested type "space"
  3006                           ; Number of cases is 1, Range of values is 48 to 48
  3007                           ; switch strategies available:
  3008                           ; Name         Instructions Cycles
  3009                           ; simple_byte            4     3 (average)
  3010                           ;	Chosen strategy is simple_byte
  3011  000064  0A30               	xorlw	48	; case 48
  3012  000066  B4D8               	btfsc	status,2,c
  3013  000068  D7F2               	goto	l5384
  3014                           
  3015                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3016                           
  3017                           ;doprnt.c: 586: }
  3018                           
  3019                           ;doprnt.c: 585: break;
  3020  00006A  C0D5  FFF6         	movff	printf@f,tblptrl
  3021  00006E  C0D6  FFF7         	movff	printf@f+1,tblptrh
  3022  000072                     	if	0	;tblptru may be non-zero
  3023  000072                     	endif
  3024  000072                     	if	0	;tblptru may be non-zero
  3025  000072                     	endif
  3026  000072  0008               	tblrd		*
  3027  000074  50F5               	movf	tablat,w,c
  3028  000076  EC9A  F028         	call	_isdigit
  3029  00007A  A0D8               	btfss	status,0,c
  3030  00007C  D0A1               	goto	l5434
  3031                           
  3032                           ;doprnt.c: 598: width = 0;
  3033  00007E  0E00               	movlw	0
  3034  000080  0101               	movlb	1	; () banked
  3035  000082  6F50               	movwf	(printf@width+1)& (0+255),b
  3036  000084  0E00               	movlw	0
  3037  000086  6F4F               	movwf	printf@width& (0+255),b
  3038  000088                     l5394:
  3039                           
  3040                           ;doprnt.c: 600: width *= 10;
  3041  000088  C14F  F08E         	movff	printf@width,___wmul@multiplier
  3042  00008C  C150  F08F         	movff	printf@width+1,___wmul@multiplier+1
  3043  000090  0E00               	movlw	0
  3044  000092  0100               	movlb	0	; () banked
  3045  000094  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3046  000096  0E0A               	movlw	10
  3047  000098  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3048  00009A  EC52  F028         	call	___wmul	;wreg free
  3049  00009E  C08E  F14F         	movff	?___wmul,printf@width
  3050  0000A2  C08F  F150         	movff	?___wmul+1,printf@width+1
  3051                           
  3052                           ;doprnt.c: 601: width += *f++ - '0';
  3053  0000A6  0ED0               	movlw	208
  3054  0000A8  0100               	movlb	0	; () banked
  3055  0000AA  6FDF               	movwf	??_printf& (0+255),b
  3056  0000AC  0EFF               	movlw	255
  3057  0000AE  0100               	movlb	0	; () banked
  3058  0000B0  6FE0               	movwf	(??_printf+1)& (0+255),b
  3059  0000B2  C0D5  FFF6         	movff	printf@f,tblptrl
  3060  0000B6  C0D6  FFF7         	movff	printf@f+1,tblptrh
  3061  0000BA                     	if	0	;tblptru may be non-zero
  3062  0000BA                     	endif
  3063  0000BA                     	if	0	;tblptru may be non-zero
  3064  0000BA                     	endif
  3065  0000BA  0008               	tblrd		*
  3066  0000BC  50F5               	movf	tablat,w,c
  3067  0000BE  0100               	movlb	0	; () banked
  3068  0000C0  6FE1               	movwf	(??_printf+2)& (0+255),b
  3069  0000C2  6BE2               	clrf	(??_printf+3)& (0+255),b
  3070  0000C4  0100               	movlb	0	; () banked
  3071  0000C6  51DF               	movf	??_printf& (0+255),w,b
  3072  0000C8  0100               	movlb	0	; () banked
  3073  0000CA  27E1               	addwf	(??_printf+2)& (0+255),f,b
  3074  0000CC  0100               	movlb	0	; () banked
  3075  0000CE  51E0               	movf	(??_printf+1)& (0+255),w,b
  3076  0000D0  0100               	movlb	0	; () banked
  3077  0000D2  23E2               	addwfc	(??_printf+3)& (0+255),f,b
  3078  0000D4  0100               	movlb	0	; () banked
  3079  0000D6  51E1               	movf	(??_printf+2)& (0+255),w,b
  3080  0000D8  0101               	movlb	1	; () banked
  3081  0000DA  274F               	addwf	printf@width& (0+255),f,b
  3082  0000DC  0100               	movlb	0	; () banked
  3083  0000DE  51E2               	movf	(??_printf+3)& (0+255),w,b
  3084  0000E0  0101               	movlb	1	; () banked
  3085  0000E2  2350               	addwfc	(printf@width+1)& (0+255),f,b
  3086                           
  3087                           ; BSR set to: 1
  3088  0000E4  0100               	movlb	0	; () banked
  3089  0000E6  4BD5               	infsnz	printf@f& (0+255),f,b
  3090  0000E8  2BD6               	incf	(printf@f+1)& (0+255),f,b
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3094  0000EA  C0D5  FFF6         	movff	printf@f,tblptrl
  3095  0000EE  C0D6  FFF7         	movff	printf@f+1,tblptrh
  3096  0000F2                     	if	0	;tblptru may be non-zero
  3097  0000F2                     	endif
  3098  0000F2                     	if	0	;tblptru may be non-zero
  3099  0000F2                     	endif
  3100  0000F2  0008               	tblrd		*
  3101  0000F4  50F5               	movf	tablat,w,c
  3102  0000F6  EC9A  F028         	call	_isdigit
  3103  0000FA  A0D8               	btfss	status,0,c
  3104  0000FC  D061               	goto	l5434
  3105  0000FE  D7C4               	goto	l5394
  3106  000100                     l5402:
  3107                           
  3108                           ;doprnt.c: 643: flag |= 0x10;
  3109  000100  0101               	movlb	1	; () banked
  3110  000102  8954               	bsf	printf@flag& (0+255),4,b
  3111                           
  3112                           ;doprnt.c: 644: goto loop;
  3113  000104  D05D               	goto	l5434
  3114  000106                     l5404:
  3115                           
  3116                           ; BSR set to: 1
  3117                           ;doprnt.c: 663: flag |= 0x400;
  3118  000106  0101               	movlb	1	; () banked
  3119  000108  8555               	bsf	(printf@flag+1)& (0+255),2,b
  3120                           
  3121                           ; BSR set to: 1
  3122                           ;doprnt.c: 698: case 'i':
  3123                           ;doprnt.c: 699: break;
  3124                           
  3125                           ; BSR set to: 1
  3126                           
  3127                           ;doprnt.c: 697: case 'd':
  3128                           
  3129                           ;doprnt.c: 664: break;
  3130  00010A  D07C               	goto	l5436
  3131  00010C                     l5406:
  3132                           
  3133                           ; BSR set to: 1
  3134                           ;doprnt.c: 721: flag |= 0x80;
  3135  00010C  0101               	movlb	1	; () banked
  3136  00010E  8F54               	bsf	printf@flag& (0+255),7,b
  3137                           
  3138                           ;doprnt.c: 723: break;
  3139  000110  D079               	goto	l5436
  3140  000112                     l5408:
  3141                           
  3142                           ; BSR set to: 1
  3143                           ;doprnt.c: 757: if(width > len)
  3144  000112  0101               	movlb	1	; () banked
  3145  000114  514F               	movf	printf@width& (0+255),w,b
  3146  000116  0101               	movlb	1	; () banked
  3147  000118  5D3F               	subwf	printf@len& (0+255),w,b
  3148  00011A  0101               	movlb	1	; () banked
  3149  00011C  5150               	movf	(printf@width+1)& (0+255),w,b
  3150  00011E  0101               	movlb	1	; () banked
  3151  000120  5940               	subwfb	(printf@len+1)& (0+255),w,b
  3152  000122  B0D8               	btfsc	status,0,c
  3153  000124  D009               	goto	l5412
  3154                           
  3155                           ; BSR set to: 1
  3156                           ;doprnt.c: 758: width -= len;
  3157  000126  0101               	movlb	1	; () banked
  3158  000128  513F               	movf	printf@len& (0+255),w,b
  3159  00012A  0101               	movlb	1	; () banked
  3160  00012C  5F4F               	subwf	printf@width& (0+255),f,b
  3161  00012E  0101               	movlb	1	; () banked
  3162  000130  5140               	movf	(printf@len+1)& (0+255),w,b
  3163  000132  0101               	movlb	1	; () banked
  3164  000134  5B50               	subwfb	(printf@width+1)& (0+255),f,b
  3165  000136  D009               	goto	l5416
  3166  000138                     l5412:
  3167                           
  3168                           ; BSR set to: 1
  3169                           ;doprnt.c: 759: else
  3170                           ;doprnt.c: 760: width = 0;
  3171  000138  0E00               	movlw	0
  3172  00013A  0101               	movlb	1	; () banked
  3173  00013C  6F50               	movwf	(printf@width+1)& (0+255),b
  3174  00013E  0E00               	movlw	0
  3175  000140  6F4F               	movwf	printf@width& (0+255),b
  3176                           
  3177                           ; BSR set to: 1
  3178                           ;doprnt.c: 764: while(width--)
  3179  000142  D003               	goto	l5416
  3180  000144                     l5414:
  3181                           
  3182                           ; BSR set to: 1
  3183                           ;doprnt.c: 765: (putch(' ') );
  3184  000144  0E20               	movlw	32
  3185  000146  ECC4  F028         	call	_putch
  3186  00014A                     l5416:
  3187  00014A  0101               	movlb	1	; () banked
  3188  00014C  074F               	decf	printf@width& (0+255),f,b
  3189  00014E  A0D8               	btfss	status,0,c
  3190  000150  0750               	decf	(printf@width+1)& (0+255),f,b
  3191  000152  0101               	movlb	1	; () banked
  3192  000154  294F               	incf	printf@width& (0+255),w,b
  3193  000156  E1F6               	bnz	l5414
  3194  000158  0101               	movlb	1	; () banked
  3195  00015A  2950               	incf	(printf@width+1)& (0+255),w,b
  3196  00015C  B4D8               	btfsc	status,2,c
  3197  00015E  D00B               	goto	l5422
  3198  000160  D7F1               	goto	l5414
  3199  000162                     l5418:
  3200                           
  3201                           ; BSR set to: 1
  3202                           ;doprnt.c: 768: (putch(*cp++) );
  3203  000162  C13C  FFD9         	movff	printf@cp,fsr2l
  3204  000166  C13D  FFDA         	movff	printf@cp+1,fsr2h
  3205  00016A  50DF               	movf	indf2,w,c
  3206  00016C  ECC4  F028         	call	_putch
  3207  000170  0101               	movlb	1	; () banked
  3208  000172  4B3C               	infsnz	printf@cp& (0+255),f,b
  3209  000174  2B3D               	incf	(printf@cp+1)& (0+255),f,b
  3210  000176                     l5422:
  3211                           
  3212                           ; BSR set to: 1
  3213  000176  0101               	movlb	1	; () banked
  3214  000178  073F               	decf	printf@len& (0+255),f,b
  3215  00017A  A0D8               	btfss	status,0,c
  3216  00017C  0740               	decf	(printf@len+1)& (0+255),f,b
  3217  00017E  0101               	movlb	1	; () banked
  3218  000180  293F               	incf	printf@len& (0+255),w,b
  3219  000182  E1EF               	bnz	l5418
  3220  000184  0101               	movlb	1	; () banked
  3221  000186  2940               	incf	(printf@len+1)& (0+255),w,b
  3222  000188  B4D8               	btfsc	status,2,c
  3223  00018A  EF55  F006         	goto	l5700
  3224  00018E  D7E9               	goto	l5418
  3225  000190                     l5424:
  3226                           
  3227                           ; BSR set to: 1
  3228                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3229  000190  C141  FFD9         	movff	printf@ap,fsr2l
  3230  000194  C142  FFDA         	movff	printf@ap+1,fsr2h
  3231  000198  50DF               	movf	indf2,w,c
  3232  00019A  0101               	movlb	1	; () banked
  3233  00019C  6F56               	movwf	printf@c& (0+255),b
  3234                           
  3235                           ; BSR set to: 1
  3236  00019E  0E02               	movlw	2
  3237  0001A0  0101               	movlb	1	; () banked
  3238  0001A2  2741               	addwf	printf@ap& (0+255),f,b
  3239  0001A4  0E00               	movlw	0
  3240  0001A6  2342               	addwfc	(printf@ap+1)& (0+255),f,b
  3241  0001A8                     l5428:
  3242                           
  3243                           ; BSR set to: 1
  3244                           ;doprnt.c: 805: cp = (char *)&c;
  3245  0001A8  0E56               	movlw	low printf@c
  3246  0001AA  0101               	movlb	1	; () banked
  3247  0001AC  6F3C               	movwf	printf@cp& (0+255),b
  3248  0001AE  0E01               	movlw	high printf@c
  3249  0001B0  0101               	movlb	1	; () banked
  3250  0001B2  6F3D               	movwf	(printf@cp+1)& (0+255),b
  3251                           
  3252                           ; BSR set to: 1
  3253                           ;doprnt.c: 806: len = 1;
  3254  0001B4  0E00               	movlw	0
  3255  0001B6  0101               	movlb	1	; () banked
  3256  0001B8  6F40               	movwf	(printf@len+1)& (0+255),b
  3257  0001BA  0E01               	movlw	1
  3258  0001BC  6F3F               	movwf	printf@len& (0+255),b
  3259                           
  3260                           ;doprnt.c: 807: goto dostring;
  3261  0001BE  D7A9               	goto	l5408
  3262  0001C0                     l5434:
  3263  0001C0  C0D5  FFF6         	movff	printf@f,tblptrl
  3264  0001C4  C0D6  FFF7         	movff	printf@f+1,tblptrh
  3265  0001C8  0100               	movlb	0	; () banked
  3266  0001CA  4BD5               	infsnz	printf@f& (0+255),f,b
  3267  0001CC  2BD6               	incf	(printf@f+1)& (0+255),f,b
  3268  0001CE                     	if	0	;tblptru may be non-zero
  3269  0001CE                     	endif
  3270  0001CE                     	if	0	;tblptru may be non-zero
  3271  0001CE                     	endif
  3272  0001CE  0008               	tblrd		*
  3273  0001D0  CFF5 F156          	movff	tablat,printf@c
  3274  0001D4  0101               	movlb	1	; () banked
  3275  0001D6  5156               	movf	printf@c& (0+255),w,b
  3276                           
  3277                           ; Switch size 1, requested type "space"
  3278                           ; Number of cases is 7, Range of values is 0 to 120
  3279                           ; switch strategies available:
  3280                           ; Name         Instructions Cycles
  3281                           ; simple_byte           22    12 (average)
  3282                           ;	Chosen strategy is simple_byte
  3283  0001D8  0A00               	xorlw	0	; case 0
  3284  0001DA  B4D8               	btfsc	status,2,c
  3285  0001DC  0012               	return	
  3286  0001DE  0A63               	xorlw	99	; case 99
  3287  0001E0  B4D8               	btfsc	status,2,c
  3288  0001E2  D7D6               	goto	l5424
  3289  0001E4  0A07               	xorlw	7	; case 100
  3290  0001E6  B4D8               	btfsc	status,2,c
  3291  0001E8  D00D               	goto	l5436
  3292  0001EA  0A02               	xorlw	2	; case 102
  3293  0001EC  B4D8               	btfsc	status,2,c
  3294  0001EE  D78B               	goto	l5404
  3295  0001F0  0A0F               	xorlw	15	; case 105
  3296  0001F2  B4D8               	btfsc	status,2,c
  3297  0001F4  D007               	goto	l5436
  3298  0001F6  0A05               	xorlw	5	; case 108
  3299  0001F8  B4D8               	btfsc	status,2,c
  3300  0001FA  D782               	goto	l5402
  3301  0001FC  0A14               	xorlw	20	; case 120
  3302  0001FE  B4D8               	btfsc	status,2,c
  3303  000200  D785               	goto	l5406
  3304  000202  D7D2               	goto	l5428
  3305  000204                     l5436:
  3306                           
  3307                           ; BSR set to: 1
  3308                           ;doprnt.c: 825: if(flag & (0x700)) {
  3309  000204  0E07               	movlw	7
  3310  000206  0101               	movlb	1	; () banked
  3311  000208  1555               	andwf	(printf@flag+1)& (0+255),w,b
  3312  00020A  B4D8               	btfsc	status,2,c
  3313  00020C  D37A               	goto	l695
  3314                           
  3315                           ; BSR set to: 1
  3316                           ;doprnt.c: 829: prec = 6;
  3317  00020E  0E00               	movlw	0
  3318  000210  0101               	movlb	1	; () banked
  3319  000212  6F44               	movwf	(printf@prec+1)& (0+255),b
  3320  000214  0E06               	movlw	6
  3321  000216  6F43               	movwf	printf@prec& (0+255),b
  3322                           
  3323                           ; BSR set to: 1
  3324                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3325  000218  C141  FFD9         	movff	printf@ap,fsr2l
  3326  00021C  C142  FFDA         	movff	printf@ap+1,fsr2h
  3327  000220  CFDE F151          	movff	postinc2,printf@fval
  3328  000224  CFDE F152          	movff	postinc2,printf@fval+1
  3329  000228  CFDD F153          	movff	postdec2,printf@fval+2
  3330                           
  3331                           ; BSR set to: 1
  3332  00022C  0E03               	movlw	3
  3333  00022E  0101               	movlb	1	; () banked
  3334  000230  2741               	addwf	printf@ap& (0+255),f,b
  3335  000232  0E00               	movlw	0
  3336  000234  2342               	addwfc	(printf@ap+1)& (0+255),f,b
  3337                           
  3338                           ; BSR set to: 1
  3339                           ;doprnt.c: 831: if(fval < 0.0) {
  3340  000236  0101               	movlb	1	; () banked
  3341  000238  AF53               	btfss	(printf@fval+2)& (0+255),7,b
  3342  00023A  D011               	goto	l5450
  3343                           
  3344                           ; BSR set to: 1
  3345                           ;doprnt.c: 832: fval = -fval;
  3346  00023C  C151  F080         	movff	printf@fval,___ftneg@f1
  3347  000240  C152  F081         	movff	printf@fval+1,___ftneg@f1+1
  3348  000244  C153  F082         	movff	printf@fval+2,___ftneg@f1+2
  3349  000248  EC6D  F028         	call	___ftneg	;wreg free
  3350  00024C  C080  F151         	movff	?___ftneg,printf@fval
  3351  000250  C081  F152         	movff	?___ftneg+1,printf@fval+1
  3352  000254  C082  F153         	movff	?___ftneg+2,printf@fval+2
  3353                           
  3354                           ;doprnt.c: 833: flag |= 0x03;
  3355  000258  0E03               	movlw	3
  3356  00025A  0101               	movlb	1	; () banked
  3357  00025C  1354               	iorwf	printf@flag& (0+255),f,b
  3358  00025E                     l5450:
  3359                           
  3360                           ; BSR set to: 1
  3361                           ;doprnt.c: 834: }
  3362                           ;doprnt.c: 835: exp = 0;
  3363  00025E  0E00               	movlw	0
  3364  000260  0101               	movlb	1	; () banked
  3365  000262  6F4A               	movwf	(printf@exp+1)& (0+255),b
  3366  000264  0E00               	movlw	0
  3367  000266  6F49               	movwf	printf@exp& (0+255),b
  3368                           
  3369                           ; BSR set to: 1
  3370                           ;doprnt.c: 836: if( fval!=0) {
  3371  000268  0101               	movlb	1	; () banked
  3372  00026A  5151               	movf	printf@fval& (0+255),w,b
  3373  00026C  0101               	movlb	1	; () banked
  3374  00026E  1152               	iorwf	(printf@fval+1)& (0+255),w,b
  3375  000270  0101               	movlb	1	; () banked
  3376  000272  1153               	iorwf	(printf@fval+2)& (0+255),w,b
  3377  000274  B4D8               	btfsc	status,2,c
  3378  000276  D09B               	goto	l5478
  3379                           
  3380                           ; BSR set to: 1
  3381                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3382  000278  0E82               	movlw	130
  3383  00027A  0100               	movlb	0	; () banked
  3384  00027C  6FDF               	movwf	??_printf& (0+255),b
  3385  00027E  0EFF               	movlw	255
  3386  000280  0100               	movlb	0	; () banked
  3387  000282  6FE0               	movwf	(??_printf+1)& (0+255),b
  3388  000284  C151  F0E1         	movff	printf@fval,??_printf+2
  3389  000288  C152  F0E2         	movff	printf@fval+1,??_printf+3
  3390  00028C  C153  F0E3         	movff	printf@fval+2,??_printf+4
  3391  000290  C154  F0E4         	movff	printf@fval+3,??_printf+5
  3392  000294  0E10               	movlw	16
  3393  000296  D006               	goto	u5630
  3394  000298                     u5635:
  3395  000298  0100               	movlb	0	; () banked
  3396  00029A  90D8               	bcf	status,0,c
  3397  00029C  33E4               	rrcf	(??_printf+5)& (0+255),f,b
  3398  00029E  33E3               	rrcf	(??_printf+4)& (0+255),f,b
  3399  0002A0  33E2               	rrcf	(??_printf+3)& (0+255),f,b
  3400  0002A2  33E1               	rrcf	(??_printf+2)& (0+255),f,b
  3401  0002A4                     u5630:
  3402  0002A4  2EE8               	decfsz	wreg,f,c
  3403  0002A6  D7F8               	goto	u5635
  3404  0002A8  0100               	movlb	0	; () banked
  3405  0002AA  51E1               	movf	(??_printf+2)& (0+255),w,b
  3406  0002AC  0100               	movlb	0	; () banked
  3407  0002AE  25DF               	addwf	??_printf& (0+255),w,b
  3408  0002B0  0101               	movlb	1	; () banked
  3409  0002B2  6F49               	movwf	printf@exp& (0+255),b
  3410  0002B4  0E00               	movlw	0
  3411  0002B6  0100               	movlb	0	; () banked
  3412  0002B8  21E0               	addwfc	(??_printf+1)& (0+255),w,b
  3413  0002BA  0101               	movlb	1	; () banked
  3414  0002BC  6F4A               	movwf	(printf@exp+1)& (0+255),b
  3415                           
  3416                           ; BSR set to: 1
  3417                           ;doprnt.c: 838: exp--;
  3418  0002BE  0101               	movlb	1	; () banked
  3419  0002C0  0749               	decf	printf@exp& (0+255),f,b
  3420  0002C2  A0D8               	btfss	status,0,c
  3421  0002C4  074A               	decf	(printf@exp+1)& (0+255),f,b
  3422                           
  3423                           ; BSR set to: 1
  3424                           ;doprnt.c: 839: exp *= 3;
  3425  0002C6  C149  F08E         	movff	printf@exp,___wmul@multiplier
  3426  0002CA  C14A  F08F         	movff	printf@exp+1,___wmul@multiplier+1
  3427  0002CE  0E00               	movlw	0
  3428  0002D0  0100               	movlb	0	; () banked
  3429  0002D2  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3430  0002D4  0E03               	movlw	3
  3431  0002D6  6F90               	movwf	___wmul@multiplicand& (0+255),b
  3432  0002D8  EC52  F028         	call	___wmul	;wreg free
  3433  0002DC  C08E  F149         	movff	?___wmul,printf@exp
  3434  0002E0  C08F  F14A         	movff	?___wmul+1,printf@exp+1
  3435                           
  3436                           ;doprnt.c: 840: exp /= 10;
  3437  0002E4  C149  F086         	movff	printf@exp,___awdiv@dividend
  3438  0002E8  C14A  F087         	movff	printf@exp+1,___awdiv@dividend+1
  3439  0002EC  0E00               	movlw	0
  3440  0002EE  0100               	movlb	0	; () banked
  3441  0002F0  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  3442  0002F2  0E0A               	movlw	10
  3443  0002F4  6F88               	movwf	___awdiv@divisor& (0+255),b
  3444  0002F6  EC78  F022         	call	___awdiv	;wreg free
  3445  0002FA  C086  F149         	movff	?___awdiv,printf@exp
  3446  0002FE  C087  F14A         	movff	?___awdiv+1,printf@exp+1
  3447                           
  3448                           ;doprnt.c: 841: if(exp < 0)
  3449  000302  0101               	movlb	1	; () banked
  3450  000304  AF4A               	btfss	(printf@exp+1)& (0+255),7,b
  3451  000306  D004               	goto	l5466
  3452                           
  3453                           ; BSR set to: 1
  3454                           ;doprnt.c: 842: exp--;
  3455  000308  0101               	movlb	1	; () banked
  3456  00030A  0749               	decf	printf@exp& (0+255),f,b
  3457  00030C  A0D8               	btfss	status,0,c
  3458  00030E  074A               	decf	(printf@exp+1)& (0+255),f,b
  3459  000310                     l5466:
  3460                           
  3461                           ; BSR set to: 1
  3462                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3463  000310  0101               	movlb	1	; () banked
  3464  000312  5149               	movf	printf@exp& (0+255),w,b
  3465  000314  0800               	sublw	0
  3466  000316  ECA9  F00B         	call	_scale
  3467  00031A  C0B0  F145         	movff	?_scale,printf@tmpval
  3468  00031E  C0B1  F146         	movff	?_scale+1,printf@tmpval+1
  3469  000322  C0B2  F147         	movff	?_scale+2,printf@tmpval+2
  3470                           
  3471                           ;doprnt.c: 847: tmpval.integ *= fval;
  3472  000326  C145  F0A1         	movff	printf@tmpval,___ftmul@f1
  3473  00032A  C146  F0A2         	movff	printf@tmpval+1,___ftmul@f1+1
  3474  00032E  C147  F0A3         	movff	printf@tmpval+2,___ftmul@f1+2
  3475  000332  C151  F0A4         	movff	printf@fval,___ftmul@f2
  3476  000336  C152  F0A5         	movff	printf@fval+1,___ftmul@f2+1
  3477  00033A  C153  F0A6         	movff	printf@fval+2,___ftmul@f2+2
  3478  00033E  EC72  F019         	call	___ftmul	;wreg free
  3479  000342  C0A1  F145         	movff	?___ftmul,printf@tmpval
  3480  000346  C0A2  F146         	movff	?___ftmul+1,printf@tmpval+1
  3481  00034A  C0A3  F147         	movff	?___ftmul+2,printf@tmpval+2
  3482                           
  3483                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3484  00034E  C145  F080         	movff	printf@tmpval,___ftge@ff1
  3485  000352  C146  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  3486  000356  C147  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  3487  00035A  0E00               	movlw	0
  3488  00035C  0100               	movlb	0	; () banked
  3489  00035E  6F83               	movwf	___ftge@ff2& (0+255),b
  3490  000360  0E80               	movlw	128
  3491  000362  0100               	movlb	0	; () banked
  3492  000364  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  3493  000366  0E3F               	movlw	63
  3494  000368  0100               	movlb	0	; () banked
  3495  00036A  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  3496  00036C  ECB0  F021         	call	___ftge	;wreg free
  3497  000370  0100               	movlb	0	; () banked
  3498  000372  B0D8               	btfsc	status,0,c
  3499  000374  D005               	goto	l5474
  3500                           
  3501                           ; BSR set to: 0
  3502                           ;doprnt.c: 849: exp--;
  3503  000376  0101               	movlb	1	; () banked
  3504  000378  0749               	decf	printf@exp& (0+255),f,b
  3505  00037A  A0D8               	btfss	status,0,c
  3506  00037C  074A               	decf	(printf@exp+1)& (0+255),f,b
  3507  00037E  D017               	goto	l5478
  3508  000380                     l5474:
  3509                           
  3510                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3511  000380  C145  F080         	movff	printf@tmpval,___ftge@ff1
  3512  000384  C146  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  3513  000388  C147  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  3514  00038C  0E00               	movlw	0
  3515  00038E  0100               	movlb	0	; () banked
  3516  000390  6F83               	movwf	___ftge@ff2& (0+255),b
  3517  000392  0E20               	movlw	32
  3518  000394  0100               	movlb	0	; () banked
  3519  000396  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  3520  000398  0E41               	movlw	65
  3521  00039A  0100               	movlb	0	; () banked
  3522  00039C  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  3523  00039E  ECB0  F021         	call	___ftge	;wreg free
  3524  0003A2  0100               	movlb	0	; () banked
  3525  0003A4  A0D8               	btfss	status,0,c
  3526  0003A6  D003               	goto	l5478
  3527                           
  3528                           ; BSR set to: 0
  3529                           ;doprnt.c: 851: exp++;
  3530  0003A8  0101               	movlb	1	; () banked
  3531  0003AA  4B49               	infsnz	printf@exp& (0+255),f,b
  3532  0003AC  2B4A               	incf	(printf@exp+1)& (0+255),f,b
  3533  0003AE                     l5478:
  3534                           
  3535                           ;doprnt.c: 852: }
  3536                           ;doprnt.c: 1112: if(prec <= 12)
  3537  0003AE  0101               	movlb	1	; () banked
  3538  0003B0  BF44               	btfsc	(printf@prec+1)& (0+255),7,b
  3539  0003B2  D008               	goto	l5480
  3540  0003B4  0101               	movlb	1	; () banked
  3541  0003B6  5144               	movf	(printf@prec+1)& (0+255),w,b
  3542  0003B8  E11D               	bnz	l5482
  3543  0003BA  0E0D               	movlw	13
  3544  0003BC  0101               	movlb	1	; () banked
  3545  0003BE  5D43               	subwf	printf@prec& (0+255),w,b
  3546  0003C0  B0D8               	btfsc	status,0,c
  3547  0003C2  D018               	goto	l5482
  3548  0003C4                     l5480:
  3549                           
  3550                           ; BSR set to: 1
  3551                           ;doprnt.c: 1113: fval += fround(prec);
  3552  0003C4  C151  F0BA         	movff	printf@fval,___ftadd@f1
  3553  0003C8  C152  F0BB         	movff	printf@fval+1,___ftadd@f1+1
  3554  0003CC  C153  F0BC         	movff	printf@fval+2,___ftadd@f1+2
  3555  0003D0  0101               	movlb	1	; () banked
  3556  0003D2  5143               	movf	printf@prec& (0+255),w,b
  3557  0003D4  ECD5  F011         	call	_fround
  3558  0003D8  C0B0  F0BD         	movff	?_fround,___ftadd@f2
  3559  0003DC  C0B1  F0BE         	movff	?_fround+1,___ftadd@f2+1
  3560  0003E0  C0B2  F0BF         	movff	?_fround+2,___ftadd@f2+2
  3561  0003E4  EC2B  F013         	call	___ftadd	;wreg free
  3562  0003E8  C0BA  F151         	movff	?___ftadd,printf@fval
  3563  0003EC  C0BB  F152         	movff	?___ftadd+1,printf@fval+1
  3564  0003F0  C0BC  F153         	movff	?___ftadd+2,printf@fval+2
  3565  0003F4                     l5482:
  3566                           
  3567                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3568  0003F4  0101               	movlb	1	; () banked
  3569  0003F6  BF4A               	btfsc	(printf@exp+1)& (0+255),7,b
  3570  0003F8  D008               	goto	l5484
  3571  0003FA  0101               	movlb	1	; () banked
  3572  0003FC  514A               	movf	(printf@exp+1)& (0+255),w,b
  3573  0003FE  E12A               	bnz	l5490
  3574  000400  0E0A               	movlw	10
  3575  000402  0101               	movlb	1	; () banked
  3576  000404  5D49               	subwf	printf@exp& (0+255),w,b
  3577  000406  B0D8               	btfsc	status,0,c
  3578  000408  D025               	goto	l5490
  3579  00040A                     l5484:
  3580                           
  3581                           ; BSR set to: 1
  3582  00040A  0101               	movlb	1	; () banked
  3583  00040C  5151               	movf	printf@fval& (0+255),w,b
  3584  00040E  0101               	movlb	1	; () banked
  3585  000410  1152               	iorwf	(printf@fval+1)& (0+255),w,b
  3586  000412  0101               	movlb	1	; () banked
  3587  000414  1153               	iorwf	(printf@fval+2)& (0+255),w,b
  3588  000416  B4D8               	btfsc	status,2,c
  3589  000418  D063               	goto	l5504
  3590                           
  3591                           ; BSR set to: 1
  3592  00041A  C151  F0C6         	movff	printf@fval,___fttol@f1
  3593  00041E  C152  F0C7         	movff	printf@fval+1,___fttol@f1+1
  3594  000422  C153  F0C8         	movff	printf@fval+2,___fttol@f1+2
  3595  000426  ECC7  F01A         	call	___fttol	;wreg free
  3596  00042A  0100               	movlb	0	; () banked
  3597  00042C  51C6               	movf	?___fttol& (0+255),w,b
  3598  00042E  0100               	movlb	0	; () banked
  3599  000430  11C7               	iorwf	(?___fttol+1)& (0+255),w,b
  3600  000432  0100               	movlb	0	; () banked
  3601  000434  11C8               	iorwf	(?___fttol+2)& (0+255),w,b
  3602  000436  0100               	movlb	0	; () banked
  3603  000438  11C9               	iorwf	(?___fttol+3)& (0+255),w,b
  3604  00043A  A4D8               	btfss	status,2,c
  3605  00043C  D051               	goto	l5504
  3606                           
  3607                           ; BSR set to: 0
  3608  00043E  0101               	movlb	1	; () banked
  3609  000440  BF4A               	btfsc	(printf@exp+1)& (0+255),7,b
  3610  000442  D04E               	goto	l5504
  3611  000444  0101               	movlb	1	; () banked
  3612  000446  514A               	movf	(printf@exp+1)& (0+255),w,b
  3613  000448  E105               	bnz	l5490
  3614  00044A  0E02               	movlw	2
  3615  00044C  0101               	movlb	1	; () banked
  3616  00044E  5D49               	subwf	printf@exp& (0+255),w,b
  3617  000450  A0D8               	btfss	status,0,c
  3618  000452  D046               	goto	l5504
  3619  000454                     l5490:
  3620                           
  3621                           ; BSR set to: 1
  3622                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3623  000454  C145  F080         	movff	printf@tmpval,___ftge@ff1
  3624  000458  C146  F081         	movff	printf@tmpval+1,___ftge@ff1+1
  3625  00045C  C147  F082         	movff	printf@tmpval+2,___ftge@ff1+2
  3626  000460  0E70               	movlw	112
  3627  000462  0100               	movlb	0	; () banked
  3628  000464  6F83               	movwf	___ftge@ff2& (0+255),b
  3629  000466  0E89               	movlw	137
  3630  000468  0100               	movlb	0	; () banked
  3631  00046A  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  3632  00046C  0E40               	movlw	64
  3633  00046E  0100               	movlb	0	; () banked
  3634  000470  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  3635  000472  ECB0  F021         	call	___ftge	;wreg free
  3636  000476  0100               	movlb	0	; () banked
  3637  000478  B0D8               	btfsc	status,0,c
  3638  00047A  D003               	goto	l5494
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3642  00047C  0101               	movlb	1	; () banked
  3643  00047E  0EF7               	movlw	247
  3644  000480  D002               	goto	L1
  3645  000482                     l5494:
  3646                           
  3647                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3648  000482  0101               	movlb	1	; () banked
  3649  000484  0EF8               	movlw	248
  3650  000486                     L1:
  3651  000486  2749               	addwf	printf@exp& (0+255),f,b
  3652  000488  0EFF               	movlw	255
  3653  00048A  234A               	addwfc	(printf@exp+1)& (0+255),f,b
  3654                           
  3655                           ; BSR set to: 1
  3656                           ;doprnt.c: 1124: }
  3657                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3658                           
  3659                           ; BSR set to: 1
  3660  00048C  0101               	movlb	1	; () banked
  3661  00048E  5149               	movf	printf@exp& (0+255),w,b
  3662  000490  ECA9  F00B         	call	_scale
  3663  000494  C0B0  F145         	movff	?_scale,printf@tmpval
  3664  000498  C0B1  F146         	movff	?_scale+1,printf@tmpval+1
  3665  00049C  C0B2  F147         	movff	?_scale+2,printf@tmpval+2
  3666                           
  3667                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3668  0004A0  C151  F080         	movff	printf@fval,__tdiv_to_l_@f1
  3669  0004A4  C152  F081         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  3670  0004A8  C153  F082         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  3671  0004AC  C145  F083         	movff	printf@tmpval,__tdiv_to_l_@f2
  3672  0004B0  C146  F084         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  3673  0004B4  C147  F085         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  3674  0004B8  EC2C  F017         	call	__tdiv_to_l_	;wreg free
  3675  0004BC  C080  F14B         	movff	?__tdiv_to_l_,printf@val
  3676  0004C0  C081  F14C         	movff	?__tdiv_to_l_+1,printf@val+1
  3677  0004C4  C082  F14D         	movff	?__tdiv_to_l_+2,printf@val+2
  3678  0004C8  C083  F14E         	movff	?__tdiv_to_l_+3,printf@val+3
  3679                           
  3680                           ;doprnt.c: 1129: fval = 0.0;
  3681  0004CC  0E00               	movlw	0
  3682  0004CE  0101               	movlb	1	; () banked
  3683  0004D0  6F51               	movwf	printf@fval& (0+255),b
  3684  0004D2  0E00               	movlw	0
  3685  0004D4  0101               	movlb	1	; () banked
  3686  0004D6  6F52               	movwf	(printf@fval+1)& (0+255),b
  3687  0004D8  0E00               	movlw	0
  3688  0004DA  0101               	movlb	1	; () banked
  3689  0004DC  6F53               	movwf	(printf@fval+2)& (0+255),b
  3690                           
  3691                           ;doprnt.c: 1130: } else {
  3692  0004DE  D033               	goto	l5508
  3693  0004E0                     l5504:
  3694                           
  3695                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3696  0004E0  C151  F0C6         	movff	printf@fval,___fttol@f1
  3697  0004E4  C152  F0C7         	movff	printf@fval+1,___fttol@f1+1
  3698  0004E8  C153  F0C8         	movff	printf@fval+2,___fttol@f1+2
  3699  0004EC  ECC7  F01A         	call	___fttol	;wreg free
  3700  0004F0  C0C6  F14B         	movff	?___fttol,printf@val
  3701  0004F4  C0C7  F14C         	movff	?___fttol+1,printf@val+1
  3702  0004F8  C0C8  F14D         	movff	?___fttol+2,printf@val+2
  3703  0004FC  C0C9  F14E         	movff	?___fttol+3,printf@val+3
  3704                           
  3705                           ;doprnt.c: 1132: fval -= (double)val;
  3706  000500  C151  F0C6         	movff	printf@fval,___ftsub@f1
  3707  000504  C152  F0C7         	movff	printf@fval+1,___ftsub@f1+1
  3708  000508  C153  F0C8         	movff	printf@fval+2,___ftsub@f1+2
  3709  00050C  C14B  F088         	movff	printf@val,___lltoft@c
  3710  000510  C14C  F089         	movff	printf@val+1,___lltoft@c+1
  3711  000514  C14D  F08A         	movff	printf@val+2,___lltoft@c+2
  3712  000518  C14E  F08B         	movff	printf@val+3,___lltoft@c+3
  3713  00051C  EC8A  F025         	call	___lltoft	;wreg free
  3714  000520  C088  F0C9         	movff	?___lltoft,___ftsub@f2
  3715  000524  C089  F0CA         	movff	?___lltoft+1,___ftsub@f2+1
  3716  000528  C08A  F0CB         	movff	?___lltoft+2,___ftsub@f2+2
  3717  00052C  EC1F  F027         	call	___ftsub	;wreg free
  3718  000530  C0C6  F151         	movff	?___ftsub,printf@fval
  3719  000534  C0C7  F152         	movff	?___ftsub+1,printf@fval+1
  3720  000538  C0C8  F153         	movff	?___ftsub+2,printf@fval+2
  3721                           
  3722                           ;doprnt.c: 1133: exp = 0;
  3723  00053C  0E00               	movlw	0
  3724  00053E  0101               	movlb	1	; () banked
  3725  000540  6F4A               	movwf	(printf@exp+1)& (0+255),b
  3726  000542  0E00               	movlw	0
  3727  000544  6F49               	movwf	printf@exp& (0+255),b
  3728  000546                     l5508:
  3729                           
  3730                           ; BSR set to: 1
  3731                           ;doprnt.c: 1134: }
  3732                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3733  000546  0E01               	movlw	1
  3734  000548  0101               	movlb	1	; () banked
  3735  00054A  6F56               	movwf	printf@c& (0+255),b
  3736  00054C                     l5510:
  3737                           
  3738                           ; BSR set to: 1
  3739  00054C  0E0A               	movlw	10
  3740  00054E  0101               	movlb	1	; () banked
  3741  000550  1956               	xorwf	printf@c& (0+255),w,b
  3742  000552  B4D8               	btfsc	status,2,c
  3743  000554  D01E               	goto	l5522
  3744                           
  3745                           ; BSR set to: 1
  3746                           ;doprnt.c: 1137: if(val < dpowers[c])
  3747                           
  3748                           ; BSR set to: 1
  3749                           
  3750                           ; BSR set to: 1
  3751  000556  0101               	movlb	1	; () banked
  3752  000558  5156               	movf	printf@c& (0+255),w,b
  3753  00055A  0D04               	mullw	4
  3754  00055C  0E31               	movlw	low _dpowers
  3755  00055E  24F3               	addwf	prodl,w,c
  3756  000560  6EF6               	movwf	tblptrl,c
  3757  000562  0EFE               	movlw	high _dpowers
  3758  000564  20F4               	addwfc	prodh,w,c
  3759  000566  6EF7               	movwf	tblptrh,c
  3760  000568                     	if	0	;There are less than 3 active tblptr bytes
  3761  000568                     	endif
  3762  000568  0009               	tblrd		*+
  3763  00056A  50F5               	movf	tablat,w,c
  3764  00056C  0101               	movlb	1	; () banked
  3765  00056E  5D4B               	subwf	printf@val& (0+255),w,b
  3766  000570  0009               	tblrd		*+
  3767  000572  50F5               	movf	tablat,w,c
  3768  000574  0101               	movlb	1	; () banked
  3769  000576  594C               	subwfb	(printf@val+1)& (0+255),w,b
  3770  000578  0009               	tblrd		*+
  3771  00057A  50F5               	movf	tablat,w,c
  3772  00057C  0101               	movlb	1	; () banked
  3773  00057E  594D               	subwfb	(printf@val+2)& (0+255),w,b
  3774  000580  0009               	tblrd		*+
  3775  000582  50F5               	movf	tablat,w,c
  3776  000584  0101               	movlb	1	; () banked
  3777  000586  594E               	subwfb	(printf@val+3)& (0+255),w,b
  3778  000588  A0D8               	btfss	status,0,c
  3779  00058A  D003               	goto	l5522
  3780                           
  3781                           ; BSR set to: 1
  3782                           
  3783                           ; BSR set to: 1
  3784                           
  3785                           ; BSR set to: 1
  3786                           ;doprnt.c: 1138: break;
  3787  00058C  0101               	movlb	1	; () banked
  3788  00058E  2B56               	incf	printf@c& (0+255),f,b
  3789  000590  D7DD               	goto	l5510
  3790  000592                     l5522:
  3791                           
  3792                           ; BSR set to: 1
  3793                           ;doprnt.c: 1142: width -= prec + c + exp;
  3794  000592  C156  F0DF         	movff	printf@c,??_printf
  3795  000596  0100               	movlb	0	; () banked
  3796  000598  6BE0               	clrf	(??_printf+1)& (0+255),b
  3797  00059A  BFDF               	btfsc	??_printf& (0+255),7,b
  3798  00059C  07E0               	decf	(??_printf+1)& (0+255),f,b
  3799  00059E  0101               	movlb	1	; () banked
  3800  0005A0  5143               	movf	printf@prec& (0+255),w,b
  3801  0005A2  0100               	movlb	0	; () banked
  3802  0005A4  27DF               	addwf	??_printf& (0+255),f,b
  3803  0005A6  0101               	movlb	1	; () banked
  3804  0005A8  5144               	movf	(printf@prec+1)& (0+255),w,b
  3805  0005AA  0100               	movlb	0	; () banked
  3806  0005AC  23E0               	addwfc	(??_printf+1)& (0+255),f,b
  3807  0005AE  0101               	movlb	1	; () banked
  3808  0005B0  5149               	movf	printf@exp& (0+255),w,b
  3809  0005B2  0100               	movlb	0	; () banked
  3810  0005B4  27DF               	addwf	??_printf& (0+255),f,b
  3811  0005B6  0101               	movlb	1	; () banked
  3812  0005B8  514A               	movf	(printf@exp+1)& (0+255),w,b
  3813  0005BA  0100               	movlb	0	; () banked
  3814  0005BC  23E0               	addwfc	(??_printf+1)& (0+255),f,b
  3815  0005BE  0100               	movlb	0	; () banked
  3816  0005C0  51DF               	movf	??_printf& (0+255),w,b
  3817  0005C2  0101               	movlb	1	; () banked
  3818  0005C4  5F4F               	subwf	printf@width& (0+255),f,b
  3819  0005C6  0100               	movlb	0	; () banked
  3820  0005C8  51E0               	movf	(??_printf+1)& (0+255),w,b
  3821  0005CA  0101               	movlb	1	; () banked
  3822  0005CC  5B50               	subwfb	(printf@width+1)& (0+255),f,b
  3823                           
  3824                           ;doprnt.c: 1143: if(
  3825                           ;doprnt.c: 1147: prec)
  3826  0005CE  0101               	movlb	1	; () banked
  3827  0005D0  5143               	movf	printf@prec& (0+255),w,b
  3828  0005D2  0101               	movlb	1	; () banked
  3829  0005D4  1144               	iorwf	(printf@prec+1)& (0+255),w,b
  3830  0005D6  B4D8               	btfsc	status,2,c
  3831  0005D8  D004               	goto	l5526
  3832                           
  3833                           ; BSR set to: 1
  3834                           ;doprnt.c: 1148: width--;
  3835  0005DA  0101               	movlb	1	; () banked
  3836  0005DC  074F               	decf	printf@width& (0+255),f,b
  3837  0005DE  A0D8               	btfss	status,0,c
  3838  0005E0  0750               	decf	(printf@width+1)& (0+255),f,b
  3839  0005E2                     l5526:
  3840                           
  3841                           ; BSR set to: 1
  3842                           ;doprnt.c: 1149: if(flag & 0x03)
  3843  0005E2  0E03               	movlw	3
  3844  0005E4  0101               	movlb	1	; () banked
  3845  0005E6  1554               	andwf	printf@flag& (0+255),w,b
  3846  0005E8  0100               	movlb	0	; () banked
  3847  0005EA  6FDF               	movwf	??_printf& (0+255),b
  3848  0005EC  0E00               	movlw	0
  3849  0005EE  0101               	movlb	1	; () banked
  3850  0005F0  1555               	andwf	(printf@flag+1)& (0+255),w,b
  3851  0005F2  0100               	movlb	0	; () banked
  3852  0005F4  6FE0               	movwf	(??_printf+1)& (0+255),b
  3853  0005F6  0100               	movlb	0	; () banked
  3854  0005F8  51DF               	movf	??_printf& (0+255),w,b
  3855  0005FA  0100               	movlb	0	; () banked
  3856  0005FC  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  3857  0005FE  B4D8               	btfsc	status,2,c
  3858  000600  D004               	goto	l5530
  3859                           
  3860                           ; BSR set to: 0
  3861                           ;doprnt.c: 1150: width--;
  3862  000602  0101               	movlb	1	; () banked
  3863  000604  074F               	decf	printf@width& (0+255),f,b
  3864  000606  A0D8               	btfss	status,0,c
  3865  000608  0750               	decf	(printf@width+1)& (0+255),f,b
  3866  00060A                     l5530:
  3867                           
  3868                           ;doprnt.c: 1153: if(flag & 0x04) {
  3869  00060A  0101               	movlb	1	; () banked
  3870  00060C  A554               	btfss	printf@flag& (0+255),2,b
  3871  00060E  D02D               	goto	l5546
  3872                           
  3873                           ; BSR set to: 1
  3874                           ;doprnt.c: 1157: if(flag & 0x03)
  3875  000610  0E03               	movlw	3
  3876  000612  0101               	movlb	1	; () banked
  3877  000614  1554               	andwf	printf@flag& (0+255),w,b
  3878  000616  0100               	movlb	0	; () banked
  3879  000618  6FDF               	movwf	??_printf& (0+255),b
  3880  00061A  0E00               	movlw	0
  3881  00061C  0101               	movlb	1	; () banked
  3882  00061E  1555               	andwf	(printf@flag+1)& (0+255),w,b
  3883  000620  0100               	movlb	0	; () banked
  3884  000622  6FE0               	movwf	(??_printf+1)& (0+255),b
  3885  000624  0100               	movlb	0	; () banked
  3886  000626  51DF               	movf	??_printf& (0+255),w,b
  3887  000628  0100               	movlb	0	; () banked
  3888  00062A  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  3889  00062C  B4D8               	btfsc	status,2,c
  3890  00062E  D00B               	goto	l5540
  3891                           
  3892                           ; BSR set to: 0
  3893                           ;doprnt.c: 1159: (putch('-') );
  3894  000630  0E2D               	movlw	45
  3895  000632  ECC4  F028         	call	_putch
  3896                           
  3897                           ;doprnt.c: 1168: while(width > 0) {
  3898  000636  D007               	goto	l5540
  3899  000638                     l5536:
  3900                           
  3901                           ;doprnt.c: 1169: (putch('0') );
  3902  000638  0E30               	movlw	48
  3903  00063A  ECC4  F028         	call	_putch
  3904                           
  3905                           ;doprnt.c: 1170: width--;
  3906  00063E  0101               	movlb	1	; () banked
  3907  000640  074F               	decf	printf@width& (0+255),f,b
  3908  000642  A0D8               	btfss	status,0,c
  3909  000644  0750               	decf	(printf@width+1)& (0+255),f,b
  3910  000646                     l5540:
  3911  000646  0101               	movlb	1	; () banked
  3912  000648  BF50               	btfsc	(printf@width+1)& (0+255),7,b
  3913  00064A  D074               	goto	l5558
  3914  00064C  0101               	movlb	1	; () banked
  3915  00064E  5150               	movf	(printf@width+1)& (0+255),w,b
  3916  000650  E1F3               	bnz	l5536
  3917  000652  0101               	movlb	1	; () banked
  3918  000654  054F               	decf	printf@width& (0+255),w,b
  3919  000656  A0D8               	btfss	status,0,c
  3920  000658  D06D               	goto	l5558
  3921  00065A  D7EE               	goto	l5536
  3922  00065C                     l5542:
  3923                           
  3924                           ; BSR set to: 1
  3925                           ;doprnt.c: 1181: (putch(' ') );
  3926  00065C  0E20               	movlw	32
  3927  00065E  ECC4  F028         	call	_putch
  3928                           
  3929                           ;doprnt.c: 1182: width--;
  3930  000662  0101               	movlb	1	; () banked
  3931  000664  074F               	decf	printf@width& (0+255),f,b
  3932  000666  A0D8               	btfss	status,0,c
  3933  000668  0750               	decf	(printf@width+1)& (0+255),f,b
  3934  00066A                     l5546:
  3935                           
  3936                           ; BSR set to: 1
  3937  00066A  0101               	movlb	1	; () banked
  3938  00066C  BF50               	btfsc	(printf@width+1)& (0+255),7,b
  3939  00066E  D007               	goto	l5548
  3940  000670  0101               	movlb	1	; () banked
  3941  000672  5150               	movf	(printf@width+1)& (0+255),w,b
  3942  000674  E1F3               	bnz	l5542
  3943  000676  0101               	movlb	1	; () banked
  3944  000678  054F               	decf	printf@width& (0+255),w,b
  3945  00067A  B0D8               	btfsc	status,0,c
  3946  00067C  D7EF               	goto	l5542
  3947  00067E                     l5548:
  3948                           
  3949                           ; BSR set to: 1
  3950                           ;doprnt.c: 1183: }
  3951                           ;doprnt.c: 1188: if(flag & 0x03)
  3952  00067E  0E03               	movlw	3
  3953  000680  0101               	movlb	1	; () banked
  3954  000682  1554               	andwf	printf@flag& (0+255),w,b
  3955  000684  0100               	movlb	0	; () banked
  3956  000686  6FDF               	movwf	??_printf& (0+255),b
  3957  000688  0E00               	movlw	0
  3958  00068A  0101               	movlb	1	; () banked
  3959  00068C  1555               	andwf	(printf@flag+1)& (0+255),w,b
  3960  00068E  0100               	movlb	0	; () banked
  3961  000690  6FE0               	movwf	(??_printf+1)& (0+255),b
  3962  000692  0100               	movlb	0	; () banked
  3963  000694  51DF               	movf	??_printf& (0+255),w,b
  3964  000696  0100               	movlb	0	; () banked
  3965  000698  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  3966  00069A  B4D8               	btfsc	status,2,c
  3967  00069C  D04B               	goto	l5558
  3968                           
  3969                           ; BSR set to: 0
  3970                           ;doprnt.c: 1190: (putch('-') );
  3971  00069E  0E2D               	movlw	45
  3972  0006A0  ECC4  F028         	call	_putch
  3973                           
  3974                           ;doprnt.c: 1195: }
  3975                           ;doprnt.c: 1196: while(c--) {
  3976  0006A4  D047               	goto	l5558
  3977  0006A6                     l5552:
  3978                           
  3979                           ;doprnt.c: 1200: {
  3980                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3981  0006A6  C14B  F080         	movff	printf@val,___lldiv@dividend
  3982  0006AA  C14C  F081         	movff	printf@val+1,___lldiv@dividend+1
  3983  0006AE  C14D  F082         	movff	printf@val+2,___lldiv@dividend+2
  3984  0006B2  C14E  F083         	movff	printf@val+3,___lldiv@dividend+3
  3985  0006B6  0101               	movlb	1	; () banked
  3986  0006B8  5156               	movf	printf@c& (0+255),w,b
  3987  0006BA  0D04               	mullw	4
  3988  0006BC  0E31               	movlw	low _dpowers
  3989  0006BE  24F3               	addwf	prodl,w,c
  3990  0006C0  6EF6               	movwf	tblptrl,c
  3991  0006C2  0EFE               	movlw	high _dpowers
  3992  0006C4  20F4               	addwfc	prodh,w,c
  3993  0006C6  6EF7               	movwf	tblptrh,c
  3994  0006C8                     	if	0	;There are less than 3 active tblptr bytes
  3995  0006C8                     	endif
  3996  0006C8  0009               	tblrd		*+
  3997  0006CA  CFF5 F084          	movff	tablat,___lldiv@divisor
  3998  0006CE  0009               	tblrd		*+
  3999  0006D0  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  4000  0006D4  0009               	tblrd		*+
  4001  0006D6  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  4002  0006DA  000A               	tblrd		*-
  4003  0006DC  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  4004  0006E0  ECD7  F022         	call	___lldiv	;wreg free
  4005  0006E4  C080  F145         	movff	?___lldiv,printf@tmpval
  4006  0006E8  C081  F146         	movff	?___lldiv+1,printf@tmpval+1
  4007  0006EC  C082  F147         	movff	?___lldiv+2,printf@tmpval+2
  4008  0006F0  C083  F148         	movff	?___lldiv+3,printf@tmpval+3
  4009                           
  4010                           ;doprnt.c: 1202: tmpval.vd %= 10;
  4011  0006F4  C145  F08D         	movff	printf@tmpval,___llmod@dividend
  4012  0006F8  C146  F08E         	movff	printf@tmpval+1,___llmod@dividend+1
  4013  0006FC  C147  F08F         	movff	printf@tmpval+2,___llmod@dividend+2
  4014  000700  C148  F090         	movff	printf@tmpval+3,___llmod@dividend+3
  4015  000704  0E0A               	movlw	10
  4016  000706  0100               	movlb	0	; () banked
  4017  000708  6F91               	movwf	___llmod@divisor& (0+255),b
  4018  00070A  0E00               	movlw	0
  4019  00070C  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  4020  00070E  0E00               	movlw	0
  4021  000710  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  4022  000712  0E00               	movlw	0
  4023  000714  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  4024  000716  EC2C  F024         	call	___llmod	;wreg free
  4025  00071A  C08D  F145         	movff	?___llmod,printf@tmpval
  4026  00071E  C08E  F146         	movff	?___llmod+1,printf@tmpval+1
  4027  000722  C08F  F147         	movff	?___llmod+2,printf@tmpval+2
  4028  000726  C090  F148         	movff	?___llmod+3,printf@tmpval+3
  4029                           
  4030                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  4031  00072A  0101               	movlb	1	; () banked
  4032  00072C  5145               	movf	printf@tmpval& (0+255),w,b
  4033  00072E  0F30               	addlw	48
  4034  000730  ECC4  F028         	call	_putch
  4035  000734                     l5558:
  4036  000734  0101               	movlb	1	; () banked
  4037  000736  0756               	decf	printf@c& (0+255),f,b
  4038  000738  0101               	movlb	1	; () banked
  4039  00073A  2956               	incf	printf@c& (0+255),w,b
  4040  00073C  B4D8               	btfsc	status,2,c
  4041  00073E  D008               	goto	l5564
  4042  000740  D7B2               	goto	l5552
  4043  000742                     l5560:
  4044                           
  4045                           ; BSR set to: 1
  4046                           ;doprnt.c: 1208: (putch('0') );
  4047  000742  0E30               	movlw	48
  4048  000744  ECC4  F028         	call	_putch
  4049                           
  4050                           ;doprnt.c: 1209: exp--;
  4051  000748  0101               	movlb	1	; () banked
  4052  00074A  0749               	decf	printf@exp& (0+255),f,b
  4053  00074C  A0D8               	btfss	status,0,c
  4054  00074E  074A               	decf	(printf@exp+1)& (0+255),f,b
  4055  000750                     l5564:
  4056                           
  4057                           ; BSR set to: 1
  4058  000750  0101               	movlb	1	; () banked
  4059  000752  BF4A               	btfsc	(printf@exp+1)& (0+255),7,b
  4060  000754  D007               	goto	l5566
  4061  000756  0101               	movlb	1	; () banked
  4062  000758  514A               	movf	(printf@exp+1)& (0+255),w,b
  4063  00075A  E1F3               	bnz	l5560
  4064  00075C  0101               	movlb	1	; () banked
  4065  00075E  0549               	decf	printf@exp& (0+255),w,b
  4066  000760  B0D8               	btfsc	status,0,c
  4067  000762  D7EF               	goto	l5560
  4068  000764                     l5566:
  4069                           
  4070                           ; BSR set to: 1
  4071                           ;doprnt.c: 1210: }
  4072                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4073  000764  0101               	movlb	1	; () banked
  4074  000766  BF44               	btfsc	(printf@prec+1)& (0+255),7,b
  4075  000768  D00C               	goto	l734
  4076  00076A  0101               	movlb	1	; () banked
  4077  00076C  5144               	movf	(printf@prec+1)& (0+255),w,b
  4078  00076E  E105               	bnz	u5850
  4079  000770  0E09               	movlw	9
  4080  000772  0101               	movlb	1	; () banked
  4081  000774  5D43               	subwf	printf@prec& (0+255),w,b
  4082  000776  A0D8               	btfss	status,0,c
  4083  000778  D004               	goto	l734
  4084  00077A                     u5850:
  4085                           
  4086                           ; BSR set to: 1
  4087                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4088  00077A  0E08               	movlw	8
  4089  00077C  0101               	movlb	1	; () banked
  4090  00077E  6F56               	movwf	printf@c& (0+255),b
  4091  000780  D002               	goto	l5570
  4092  000782                     l734:
  4093                           
  4094                           ; BSR set to: 1
  4095                           ;doprnt.c: 1213: else
  4096                           ;doprnt.c: 1214: c = prec;
  4097  000782  C143  F156         	movff	printf@prec,printf@c
  4098  000786                     l5570:
  4099                           
  4100                           ; BSR set to: 1
  4101                           ;doprnt.c: 1215: prec -= c;
  4102  000786  0101               	movlb	1	; () banked
  4103  000788  5156               	movf	printf@c& (0+255),w,b
  4104  00078A  0101               	movlb	1	; () banked
  4105  00078C  5F43               	subwf	printf@prec& (0+255),f,b
  4106  00078E  0E00               	movlw	0
  4107  000790  0101               	movlb	1	; () banked
  4108  000792  BF56               	btfsc	printf@c& (0+255),7,b
  4109  000794  0EFF               	movlw	255
  4110  000796  0101               	movlb	1	; () banked
  4111  000798  5B44               	subwfb	(printf@prec+1)& (0+255),f,b
  4112                           
  4113                           ; BSR set to: 1
  4114                           ;doprnt.c: 1219: if(c)
  4115  00079A  0101               	movlb	1	; () banked
  4116  00079C  5156               	movf	printf@c& (0+255),w,b
  4117  00079E  0101               	movlb	1	; () banked
  4118  0007A0  B4D8               	btfsc	status,2,c
  4119  0007A2  D003               	goto	l5576
  4120                           
  4121                           ; BSR set to: 1
  4122                           ;doprnt.c: 1221: (putch('.') );
  4123  0007A4  0E2E               	movlw	46
  4124  0007A6  ECC4  F028         	call	_putch
  4125  0007AA                     l5576:
  4126                           
  4127                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4128  0007AA  0101               	movlb	1	; () banked
  4129  0007AC  5156               	movf	printf@c& (0+255),w,b
  4130  0007AE  ECA9  F00B         	call	_scale
  4131  0007B2  C0B0  F139         	movff	?_scale,_printf$1333
  4132  0007B6  C0B1  F13A         	movff	?_scale+1,_printf$1333+1
  4133  0007BA  C0B2  F13B         	movff	?_scale+2,_printf$1333+2
  4134                           
  4135                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4136  0007BE  C151  F0A4         	movff	printf@fval,___ftmul@f2
  4137  0007C2  C152  F0A5         	movff	printf@fval+1,___ftmul@f2+1
  4138  0007C6  C153  F0A6         	movff	printf@fval+2,___ftmul@f2+2
  4139  0007CA  C139  F0A1         	movff	_printf$1333,___ftmul@f1
  4140  0007CE  C13A  F0A2         	movff	_printf$1333+1,___ftmul@f1+1
  4141  0007D2  C13B  F0A3         	movff	_printf$1333+2,___ftmul@f1+2
  4142  0007D6  EC72  F019         	call	___ftmul	;wreg free
  4143  0007DA  C0A1  F0C6         	movff	?___ftmul,___fttol@f1
  4144  0007DE  C0A2  F0C7         	movff	?___ftmul+1,___fttol@f1+1
  4145  0007E2  C0A3  F0C8         	movff	?___ftmul+2,___fttol@f1+2
  4146  0007E6  ECC7  F01A         	call	___fttol	;wreg free
  4147  0007EA  C0C6  F14B         	movff	?___fttol,printf@val
  4148  0007EE  C0C7  F14C         	movff	?___fttol+1,printf@val+1
  4149  0007F2  C0C8  F14D         	movff	?___fttol+2,printf@val+2
  4150  0007F6  C0C9  F14E         	movff	?___fttol+3,printf@val+3
  4151                           
  4152                           ;doprnt.c: 1228: while(c--) {
  4153  0007FA  D06E               	goto	l5586
  4154  0007FC                     l5580:
  4155                           
  4156                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4157  0007FC  C14B  F080         	movff	printf@val,___lldiv@dividend
  4158  000800  C14C  F081         	movff	printf@val+1,___lldiv@dividend+1
  4159  000804  C14D  F082         	movff	printf@val+2,___lldiv@dividend+2
  4160  000808  C14E  F083         	movff	printf@val+3,___lldiv@dividend+3
  4161  00080C  0101               	movlb	1	; () banked
  4162  00080E  5156               	movf	printf@c& (0+255),w,b
  4163  000810  0D04               	mullw	4
  4164  000812  0E31               	movlw	low _dpowers
  4165  000814  24F3               	addwf	prodl,w,c
  4166  000816  6EF6               	movwf	tblptrl,c
  4167  000818  0EFE               	movlw	high _dpowers
  4168  00081A  20F4               	addwfc	prodh,w,c
  4169  00081C  6EF7               	movwf	tblptrh,c
  4170  00081E                     	if	0	;There are less than 3 active tblptr bytes
  4171  00081E                     	endif
  4172  00081E  0009               	tblrd		*+
  4173  000820  CFF5 F084          	movff	tablat,___lldiv@divisor
  4174  000824  0009               	tblrd		*+
  4175  000826  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  4176  00082A  0009               	tblrd		*+
  4177  00082C  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  4178  000830  000A               	tblrd		*-
  4179  000832  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  4180  000836  ECD7  F022         	call	___lldiv	;wreg free
  4181  00083A  C080  F145         	movff	?___lldiv,printf@tmpval
  4182  00083E  C081  F146         	movff	?___lldiv+1,printf@tmpval+1
  4183  000842  C082  F147         	movff	?___lldiv+2,printf@tmpval+2
  4184  000846  C083  F148         	movff	?___lldiv+3,printf@tmpval+3
  4185                           
  4186                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4187  00084A  C145  F08D         	movff	printf@tmpval,___llmod@dividend
  4188  00084E  C146  F08E         	movff	printf@tmpval+1,___llmod@dividend+1
  4189  000852  C147  F08F         	movff	printf@tmpval+2,___llmod@dividend+2
  4190  000856  C148  F090         	movff	printf@tmpval+3,___llmod@dividend+3
  4191  00085A  0E0A               	movlw	10
  4192  00085C  0100               	movlb	0	; () banked
  4193  00085E  6F91               	movwf	___llmod@divisor& (0+255),b
  4194  000860  0E00               	movlw	0
  4195  000862  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  4196  000864  0E00               	movlw	0
  4197  000866  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  4198  000868  0E00               	movlw	0
  4199  00086A  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  4200  00086C  EC2C  F024         	call	___llmod	;wreg free
  4201  000870  C08D  F145         	movff	?___llmod,printf@tmpval
  4202  000874  C08E  F146         	movff	?___llmod+1,printf@tmpval+1
  4203  000878  C08F  F147         	movff	?___llmod+2,printf@tmpval+2
  4204  00087C  C090  F148         	movff	?___llmod+3,printf@tmpval+3
  4205                           
  4206                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  4207  000880  0101               	movlb	1	; () banked
  4208  000882  5145               	movf	printf@tmpval& (0+255),w,b
  4209  000884  0F30               	addlw	48
  4210  000886  ECC4  F028         	call	_putch
  4211                           
  4212                           ;doprnt.c: 1232: val %= dpowers[c];
  4213  00088A  C14B  F08D         	movff	printf@val,___llmod@dividend
  4214  00088E  C14C  F08E         	movff	printf@val+1,___llmod@dividend+1
  4215  000892  C14D  F08F         	movff	printf@val+2,___llmod@dividend+2
  4216  000896  C14E  F090         	movff	printf@val+3,___llmod@dividend+3
  4217  00089A  0101               	movlb	1	; () banked
  4218  00089C  5156               	movf	printf@c& (0+255),w,b
  4219  00089E  0D04               	mullw	4
  4220  0008A0  0E31               	movlw	low _dpowers
  4221  0008A2  24F3               	addwf	prodl,w,c
  4222  0008A4  6EF6               	movwf	tblptrl,c
  4223  0008A6  0EFE               	movlw	high _dpowers
  4224  0008A8  20F4               	addwfc	prodh,w,c
  4225  0008AA  6EF7               	movwf	tblptrh,c
  4226  0008AC                     	if	0	;There are less than 3 active tblptr bytes
  4227  0008AC                     	endif
  4228  0008AC  0009               	tblrd		*+
  4229  0008AE  CFF5 F091          	movff	tablat,___llmod@divisor
  4230  0008B2  0009               	tblrd		*+
  4231  0008B4  CFF5 F092          	movff	tablat,___llmod@divisor+1
  4232  0008B8  0009               	tblrd		*+
  4233  0008BA  CFF5 F093          	movff	tablat,___llmod@divisor+2
  4234  0008BE  000A               	tblrd		*-
  4235  0008C0  CFF5 F094          	movff	tablat,___llmod@divisor+3
  4236  0008C4  EC2C  F024         	call	___llmod	;wreg free
  4237  0008C8  C08D  F14B         	movff	?___llmod,printf@val
  4238  0008CC  C08E  F14C         	movff	?___llmod+1,printf@val+1
  4239  0008D0  C08F  F14D         	movff	?___llmod+2,printf@val+2
  4240  0008D4  C090  F14E         	movff	?___llmod+3,printf@val+3
  4241  0008D8                     l5586:
  4242  0008D8  0101               	movlb	1	; () banked
  4243  0008DA  0756               	decf	printf@c& (0+255),f,b
  4244  0008DC  0101               	movlb	1	; () banked
  4245  0008DE  2956               	incf	printf@c& (0+255),w,b
  4246  0008E0  B4D8               	btfsc	status,2,c
  4247  0008E2  D008               	goto	l5592
  4248  0008E4  D78B               	goto	l5580
  4249  0008E6                     l5588:
  4250                           
  4251                           ; BSR set to: 1
  4252                           ;doprnt.c: 1236: (putch('0') );
  4253  0008E6  0E30               	movlw	48
  4254  0008E8  ECC4  F028         	call	_putch
  4255                           
  4256                           ;doprnt.c: 1237: prec--;
  4257  0008EC  0101               	movlb	1	; () banked
  4258  0008EE  0743               	decf	printf@prec& (0+255),f,b
  4259  0008F0  A0D8               	btfss	status,0,c
  4260  0008F2  0744               	decf	(printf@prec+1)& (0+255),f,b
  4261  0008F4                     l5592:
  4262                           
  4263                           ; BSR set to: 1
  4264  0008F4  0101               	movlb	1	; () banked
  4265  0008F6  5143               	movf	printf@prec& (0+255),w,b
  4266  0008F8  0101               	movlb	1	; () banked
  4267  0008FA  1144               	iorwf	(printf@prec+1)& (0+255),w,b
  4268  0008FC  B4D8               	btfsc	status,2,c
  4269  0008FE  D1D5               	goto	l5700
  4270  000900  D7F2               	goto	l5588
  4271  000902                     l695:
  4272                           
  4273                           ; BSR set to: 1
  4274                           ;doprnt.c: 1246: }
  4275                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4276  000902  0101               	movlb	1	; () banked
  4277  000904  BF54               	btfsc	printf@flag& (0+255),7,b
  4278  000906  D034               	goto	l743
  4279                           
  4280                           ; BSR set to: 1
  4281                           ;doprnt.c: 1253: {
  4282                           ;doprnt.c: 1255: if(flag & 0x10)
  4283  000908  0101               	movlb	1	; () banked
  4284  00090A  A954               	btfss	printf@flag& (0+255),4,b
  4285  00090C  D00E               	goto	l5600
  4286                           
  4287                           ; BSR set to: 1
  4288                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  4289  00090E  C141  FFD9         	movff	printf@ap,fsr2l
  4290  000912  C142  FFDA         	movff	printf@ap+1,fsr2h
  4291  000916  CFDE F14B          	movff	postinc2,printf@val
  4292  00091A  CFDE F14C          	movff	postinc2,printf@val+1
  4293  00091E  CFDE F14D          	movff	postinc2,printf@val+2
  4294  000922  CFDE F14E          	movff	postinc2,printf@val+3
  4295                           
  4296                           ; BSR set to: 1
  4297  000926  0E04               	movlw	4
  4298  000928  D00F               	goto	L2
  4299  00092A                     l5600:
  4300                           
  4301                           ; BSR set to: 1
  4302                           ;doprnt.c: 1257: else
  4303                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4304  00092A  C141  FFD9         	movff	printf@ap,fsr2l
  4305  00092E  C142  FFDA         	movff	printf@ap+1,fsr2h
  4306  000932  CFDE F14B          	movff	postinc2,printf@val
  4307  000936  CFDD F14C          	movff	postdec2,printf@val+1
  4308  00093A  0101               	movlb	1	; () banked
  4309  00093C  0E00               	movlw	0
  4310  00093E  BF4C               	btfsc	(printf@val+1)& (0+255),7,b
  4311  000940  0EFF               	movlw	-1
  4312  000942  6F4D               	movwf	(printf@val+2)& (0+255),b
  4313  000944  6F4E               	movwf	(printf@val+3)& (0+255),b
  4314                           
  4315                           ; BSR set to: 1
  4316  000946  0E02               	movlw	2
  4317  000948                     L2:
  4318  000948  0101               	movlb	1	; () banked
  4319  00094A  2741               	addwf	printf@ap& (0+255),f,b
  4320  00094C  0E00               	movlw	0
  4321  00094E  2342               	addwfc	(printf@ap+1)& (0+255),f,b
  4322                           
  4323                           ; BSR set to: 1
  4324                           ;doprnt.c: 1261: if((long)val < 0) {
  4325                           
  4326                           ; BSR set to: 1
  4327  000950  0101               	movlb	1	; () banked
  4328  000952  AF4E               	btfss	(printf@val+3)& (0+255),7,b
  4329  000954  D07F               	goto	l5648
  4330                           
  4331                           ; BSR set to: 1
  4332                           ;doprnt.c: 1262: flag |= 0x03;
  4333  000956  0E03               	movlw	3
  4334  000958  0101               	movlb	1	; () banked
  4335  00095A  1354               	iorwf	printf@flag& (0+255),f,b
  4336                           
  4337                           ; BSR set to: 1
  4338                           ;doprnt.c: 1263: val = -val;
  4339  00095C  0101               	movlb	1	; () banked
  4340  00095E  1F4E               	comf	(printf@val+3)& (0+255),f,b
  4341  000960  1F4D               	comf	(printf@val+2)& (0+255),f,b
  4342  000962  1F4C               	comf	(printf@val+1)& (0+255),f,b
  4343  000964  6D4B               	negf	printf@val& (0+255),b
  4344  000966  0E00               	movlw	0
  4345  000968  234C               	addwfc	(printf@val+1)& (0+255),f,b
  4346  00096A  234D               	addwfc	(printf@val+2)& (0+255),f,b
  4347  00096C  234E               	addwfc	(printf@val+3)& (0+255),f,b
  4348                           
  4349                           ; BSR set to: 1
  4350                           ;doprnt.c: 1264: }
  4351                           ;doprnt.c: 1266: }
  4352  00096E  D072               	goto	l5648
  4353  000970                     l743:
  4354                           
  4355                           ; BSR set to: 1
  4356                           ;doprnt.c: 1268: else
  4357                           ;doprnt.c: 1273: {
  4358                           ;doprnt.c: 1281: if(flag & 0x10)
  4359  000970  0101               	movlb	1	; () banked
  4360  000972  A954               	btfss	printf@flag& (0+255),4,b
  4361  000974  D00E               	goto	l5614
  4362                           
  4363                           ; BSR set to: 1
  4364                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  4365  000976  C141  FFD9         	movff	printf@ap,fsr2l
  4366  00097A  C142  FFDA         	movff	printf@ap+1,fsr2h
  4367  00097E  CFDE F14B          	movff	postinc2,printf@val
  4368  000982  CFDE F14C          	movff	postinc2,printf@val+1
  4369  000986  CFDE F14D          	movff	postinc2,printf@val+2
  4370  00098A  CFDE F14E          	movff	postinc2,printf@val+3
  4371                           
  4372                           ; BSR set to: 1
  4373  00098E  0E04               	movlw	4
  4374  000990  D010               	goto	L3
  4375  000992                     l5614:
  4376                           
  4377                           ; BSR set to: 1
  4378                           ;doprnt.c: 1283: else
  4379                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4380  000992  C141  FFD9         	movff	printf@ap,fsr2l
  4381  000996  C142  FFDA         	movff	printf@ap+1,fsr2h
  4382  00099A  CFDE F0DF          	movff	postinc2,??_printf
  4383  00099E  CFDD F0E0          	movff	postdec2,??_printf+1
  4384  0009A2  C0DF  F14B         	movff	??_printf,printf@val
  4385  0009A6  C0E0  F14C         	movff	??_printf+1,printf@val+1
  4386  0009AA  0101               	movlb	1	; () banked
  4387  0009AC  6B4D               	clrf	(printf@val+2)& (0+255),b
  4388  0009AE  6B4E               	clrf	(printf@val+3)& (0+255),b
  4389                           
  4390                           ; BSR set to: 1
  4391  0009B0  0E02               	movlw	2
  4392  0009B2                     L3:
  4393  0009B2  0101               	movlb	1	; () banked
  4394  0009B4  2741               	addwf	printf@ap& (0+255),f,b
  4395  0009B6  0E00               	movlw	0
  4396  0009B8  2342               	addwfc	(printf@ap+1)& (0+255),f,b
  4397                           
  4398                           ; BSR set to: 1
  4399                           ;doprnt.c: 1287: }
  4400                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4401                           
  4402                           ; BSR set to: 1
  4403  0009BA  D04C               	goto	l5648
  4404  0009BC                     l5618:
  4405                           
  4406                           ; BSR set to: 1
  4407                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4408  0009BC  0E01               	movlw	1
  4409  0009BE  0101               	movlb	1	; () banked
  4410  0009C0  6F56               	movwf	printf@c& (0+255),b
  4411  0009C2                     l5620:
  4412                           
  4413                           ; BSR set to: 1
  4414  0009C2  0E0A               	movlw	10
  4415  0009C4  0101               	movlb	1	; () banked
  4416  0009C6  1956               	xorwf	printf@c& (0+255),w,b
  4417  0009C8  B4D8               	btfsc	status,2,c
  4418  0009CA  D04D               	goto	l5650
  4419                           
  4420                           ; BSR set to: 1
  4421                           ;doprnt.c: 1306: if(val < dpowers[c])
  4422                           
  4423                           ; BSR set to: 1
  4424                           
  4425                           ; BSR set to: 1
  4426  0009CC  0101               	movlb	1	; () banked
  4427  0009CE  5156               	movf	printf@c& (0+255),w,b
  4428  0009D0  0D04               	mullw	4
  4429  0009D2  0E31               	movlw	low _dpowers
  4430  0009D4  24F3               	addwf	prodl,w,c
  4431  0009D6  6EF6               	movwf	tblptrl,c
  4432  0009D8  0EFE               	movlw	high _dpowers
  4433  0009DA  20F4               	addwfc	prodh,w,c
  4434  0009DC  6EF7               	movwf	tblptrh,c
  4435  0009DE                     	if	0	;There are less than 3 active tblptr bytes
  4436  0009DE                     	endif
  4437  0009DE  0009               	tblrd		*+
  4438  0009E0  50F5               	movf	tablat,w,c
  4439  0009E2  0101               	movlb	1	; () banked
  4440  0009E4  5D4B               	subwf	printf@val& (0+255),w,b
  4441  0009E6  0009               	tblrd		*+
  4442  0009E8  50F5               	movf	tablat,w,c
  4443  0009EA  0101               	movlb	1	; () banked
  4444  0009EC  594C               	subwfb	(printf@val+1)& (0+255),w,b
  4445  0009EE  0009               	tblrd		*+
  4446  0009F0  50F5               	movf	tablat,w,c
  4447  0009F2  0101               	movlb	1	; () banked
  4448  0009F4  594D               	subwfb	(printf@val+2)& (0+255),w,b
  4449  0009F6  0009               	tblrd		*+
  4450  0009F8  50F5               	movf	tablat,w,c
  4451  0009FA  0101               	movlb	1	; () banked
  4452  0009FC  594E               	subwfb	(printf@val+3)& (0+255),w,b
  4453  0009FE  A0D8               	btfss	status,0,c
  4454  000A00  D032               	goto	l5650
  4455                           
  4456                           ; BSR set to: 1
  4457                           
  4458                           ; BSR set to: 1
  4459                           
  4460                           ; BSR set to: 1
  4461                           ;doprnt.c: 1307: break;
  4462  000A02  0101               	movlb	1	; () banked
  4463  000A04  2B56               	incf	printf@c& (0+255),f,b
  4464  000A06  D7DD               	goto	l5620
  4465  000A08                     l5632:
  4466                           
  4467                           ; BSR set to: 1
  4468                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4469  000A08  0E01               	movlw	1
  4470  000A0A  0101               	movlb	1	; () banked
  4471  000A0C  6F56               	movwf	printf@c& (0+255),b
  4472  000A0E                     l5634:
  4473                           
  4474                           ; BSR set to: 1
  4475  000A0E  0E08               	movlw	8
  4476  000A10  0101               	movlb	1	; () banked
  4477  000A12  1956               	xorwf	printf@c& (0+255),w,b
  4478  000A14  B4D8               	btfsc	status,2,c
  4479  000A16  D027               	goto	l5650
  4480                           
  4481                           ; BSR set to: 1
  4482                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4483                           
  4484                           ; BSR set to: 1
  4485                           
  4486                           ; BSR set to: 1
  4487  000A18  0101               	movlb	1	; () banked
  4488  000A1A  5156               	movf	printf@c& (0+255),w,b
  4489  000A1C  0D04               	mullw	4
  4490  000A1E  0EA7               	movlw	low _hexpowers
  4491  000A20  24F3               	addwf	prodl,w,c
  4492  000A22  6EF6               	movwf	tblptrl,c
  4493  000A24  0EFE               	movlw	high _hexpowers
  4494  000A26  20F4               	addwfc	prodh,w,c
  4495  000A28  6EF7               	movwf	tblptrh,c
  4496  000A2A                     	if	0	;There are less than 3 active tblptr bytes
  4497  000A2A                     	endif
  4498  000A2A  0009               	tblrd		*+
  4499  000A2C  50F5               	movf	tablat,w,c
  4500  000A2E  0101               	movlb	1	; () banked
  4501  000A30  5D4B               	subwf	printf@val& (0+255),w,b
  4502  000A32  0009               	tblrd		*+
  4503  000A34  50F5               	movf	tablat,w,c
  4504  000A36  0101               	movlb	1	; () banked
  4505  000A38  594C               	subwfb	(printf@val+1)& (0+255),w,b
  4506  000A3A  0009               	tblrd		*+
  4507  000A3C  50F5               	movf	tablat,w,c
  4508  000A3E  0101               	movlb	1	; () banked
  4509  000A40  594D               	subwfb	(printf@val+2)& (0+255),w,b
  4510  000A42  0009               	tblrd		*+
  4511  000A44  50F5               	movf	tablat,w,c
  4512  000A46  0101               	movlb	1	; () banked
  4513  000A48  594E               	subwfb	(printf@val+3)& (0+255),w,b
  4514  000A4A  A0D8               	btfss	status,0,c
  4515  000A4C  D00C               	goto	l5650
  4516                           
  4517                           ; BSR set to: 1
  4518                           
  4519                           ; BSR set to: 1
  4520                           
  4521                           ; BSR set to: 1
  4522                           ;doprnt.c: 1318: break;
  4523  000A4E  0101               	movlb	1	; () banked
  4524  000A50  2B56               	incf	printf@c& (0+255),f,b
  4525  000A52  D7DD               	goto	l5634
  4526  000A54                     l5648:
  4527                           
  4528                           ; BSR set to: 1
  4529  000A54  0101               	movlb	1	; () banked
  4530  000A56  5154               	movf	printf@flag& (0+255),w,b
  4531  000A58  0B80               	andlw	128
  4532                           
  4533                           ; Switch size 1, requested type "space"
  4534                           ; Number of cases is 2, Range of values is 0 to 128
  4535                           ; switch strategies available:
  4536                           ; Name         Instructions Cycles
  4537                           ; simple_byte            7     4 (average)
  4538                           ;	Chosen strategy is simple_byte
  4539  000A5A  0A00               	xorlw	0	; case 0
  4540  000A5C  B4D8               	btfsc	status,2,c
  4541  000A5E  D7AE               	goto	l5618
  4542  000A60  0A80               	xorlw	128	; case 128
  4543  000A62  B4D8               	btfsc	status,2,c
  4544  000A64  D7D1               	goto	l5632
  4545  000A66                     l5650:
  4546                           
  4547                           ; BSR set to: 1
  4548                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4549  000A66  0101               	movlb	1	; () banked
  4550  000A68  514F               	movf	printf@width& (0+255),w,b
  4551  000A6A  0101               	movlb	1	; () banked
  4552  000A6C  1150               	iorwf	(printf@width+1)& (0+255),w,b
  4553  000A6E  B4D8               	btfsc	status,2,c
  4554  000A70  D014               	goto	l5656
  4555                           
  4556                           ; BSR set to: 1
  4557  000A72  0E03               	movlw	3
  4558  000A74  0101               	movlb	1	; () banked
  4559  000A76  1554               	andwf	printf@flag& (0+255),w,b
  4560  000A78  0100               	movlb	0	; () banked
  4561  000A7A  6FDF               	movwf	??_printf& (0+255),b
  4562  000A7C  0E00               	movlw	0
  4563  000A7E  0101               	movlb	1	; () banked
  4564  000A80  1555               	andwf	(printf@flag+1)& (0+255),w,b
  4565  000A82  0100               	movlb	0	; () banked
  4566  000A84  6FE0               	movwf	(??_printf+1)& (0+255),b
  4567  000A86  0100               	movlb	0	; () banked
  4568  000A88  51DF               	movf	??_printf& (0+255),w,b
  4569  000A8A  0100               	movlb	0	; () banked
  4570  000A8C  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  4571  000A8E  B4D8               	btfsc	status,2,c
  4572  000A90  D004               	goto	l5656
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;doprnt.c: 1346: width--;
  4576  000A92  0101               	movlb	1	; () banked
  4577  000A94  074F               	decf	printf@width& (0+255),f,b
  4578  000A96  A0D8               	btfss	status,0,c
  4579  000A98  0750               	decf	(printf@width+1)& (0+255),f,b
  4580  000A9A                     l5656:
  4581                           
  4582                           ;doprnt.c: 1381: if(width > c)
  4583  000A9A  0E80               	movlw	128
  4584  000A9C  0101               	movlb	1	; () banked
  4585  000A9E  BF56               	btfsc	printf@c& (0+255),7,b
  4586  000AA0  0E7F               	movlw	127
  4587  000AA2  0100               	movlb	0	; () banked
  4588  000AA4  6FDF               	movwf	??_printf& (0+255),b
  4589  000AA6  0101               	movlb	1	; () banked
  4590  000AA8  514F               	movf	printf@width& (0+255),w,b
  4591  000AAA  0101               	movlb	1	; () banked
  4592  000AAC  5D56               	subwf	printf@c& (0+255),w,b
  4593  000AAE  0101               	movlb	1	; () banked
  4594  000AB0  5150               	movf	(printf@width+1)& (0+255),w,b
  4595  000AB2  0A80               	xorlw	128
  4596  000AB4  0100               	movlb	0	; () banked
  4597  000AB6  59DF               	subwfb	??_printf& (0+255),w,b
  4598  000AB8  B0D8               	btfsc	status,0,c
  4599  000ABA  D00B               	goto	l5660
  4600                           
  4601                           ; BSR set to: 0
  4602                           ;doprnt.c: 1382: width -= c;
  4603  000ABC  0101               	movlb	1	; () banked
  4604  000ABE  5156               	movf	printf@c& (0+255),w,b
  4605  000AC0  0101               	movlb	1	; () banked
  4606  000AC2  5F4F               	subwf	printf@width& (0+255),f,b
  4607  000AC4  0E00               	movlw	0
  4608  000AC6  0101               	movlb	1	; () banked
  4609  000AC8  BF56               	btfsc	printf@c& (0+255),7,b
  4610  000ACA  0EFF               	movlw	255
  4611  000ACC  0101               	movlb	1	; () banked
  4612  000ACE  5B50               	subwfb	(printf@width+1)& (0+255),f,b
  4613  000AD0  D005               	goto	l5662
  4614  000AD2                     l5660:
  4615                           
  4616                           ;doprnt.c: 1383: else
  4617                           ;doprnt.c: 1384: width = 0;
  4618  000AD2  0E00               	movlw	0
  4619  000AD4  0101               	movlb	1	; () banked
  4620  000AD6  6F50               	movwf	(printf@width+1)& (0+255),b
  4621  000AD8  0E00               	movlw	0
  4622  000ADA  6F4F               	movwf	printf@width& (0+255),b
  4623  000ADC                     l5662:
  4624                           
  4625                           ; BSR set to: 1
  4626                           ;doprnt.c: 1387: if(flag & 0x04) {
  4627  000ADC  0101               	movlb	1	; () banked
  4628  000ADE  A554               	btfss	printf@flag& (0+255),2,b
  4629  000AE0  D021               	goto	l5674
  4630                           
  4631                           ; BSR set to: 1
  4632                           ;doprnt.c: 1392: if(flag & 0x03)
  4633  000AE2  0E03               	movlw	3
  4634  000AE4  0101               	movlb	1	; () banked
  4635  000AE6  1554               	andwf	printf@flag& (0+255),w,b
  4636  000AE8  0100               	movlb	0	; () banked
  4637  000AEA  6FDF               	movwf	??_printf& (0+255),b
  4638  000AEC  0E00               	movlw	0
  4639  000AEE  0101               	movlb	1	; () banked
  4640  000AF0  1555               	andwf	(printf@flag+1)& (0+255),w,b
  4641  000AF2  0100               	movlb	0	; () banked
  4642  000AF4  6FE0               	movwf	(??_printf+1)& (0+255),b
  4643  000AF6  0100               	movlb	0	; () banked
  4644  000AF8  51DF               	movf	??_printf& (0+255),w,b
  4645  000AFA  0100               	movlb	0	; () banked
  4646  000AFC  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  4647  000AFE  B4D8               	btfsc	status,2,c
  4648  000B00  D003               	goto	l5668
  4649                           
  4650                           ; BSR set to: 0
  4651                           ;doprnt.c: 1393: (putch('-') );
  4652  000B02  0E2D               	movlw	45
  4653  000B04  ECC4  F028         	call	_putch
  4654  000B08                     l5668:
  4655                           
  4656                           ;doprnt.c: 1415: if(width)
  4657  000B08  0101               	movlb	1	; () banked
  4658  000B0A  514F               	movf	printf@width& (0+255),w,b
  4659  000B0C  0101               	movlb	1	; () banked
  4660  000B0E  1150               	iorwf	(printf@width+1)& (0+255),w,b
  4661  000B10  B4D8               	btfsc	status,2,c
  4662  000B12  D02E               	goto	l5684
  4663                           
  4664                           ; BSR set to: 1
  4665                           ;doprnt.c: 1417: (putch('0') );
  4666                           
  4667                           ; BSR set to: 1
  4668                           
  4669                           ;doprnt.c: 1416: do
  4670  000B14  0E30               	movlw	48
  4671  000B16  ECC4  F028         	call	_putch
  4672                           
  4673                           ;doprnt.c: 1418: while(--width);
  4674  000B1A  0101               	movlb	1	; () banked
  4675  000B1C  074F               	decf	printf@width& (0+255),f,b
  4676  000B1E  A0D8               	btfss	status,0,c
  4677  000B20  0750               	decf	(printf@width+1)& (0+255),f,b
  4678  000B22  D7F2               	goto	l5668
  4679  000B24                     l5674:
  4680                           
  4681                           ; BSR set to: 1
  4682                           ;doprnt.c: 1422: {
  4683                           ;doprnt.c: 1424: if(width
  4684                           ;doprnt.c: 1428: )
  4685  000B24  0101               	movlb	1	; () banked
  4686  000B26  514F               	movf	printf@width& (0+255),w,b
  4687  000B28  0101               	movlb	1	; () banked
  4688  000B2A  1150               	iorwf	(printf@width+1)& (0+255),w,b
  4689  000B2C  B4D8               	btfsc	status,2,c
  4690  000B2E  D00D               	goto	l5680
  4691  000B30                     l5676:
  4692                           
  4693                           ; BSR set to: 1
  4694                           ;doprnt.c: 1430: (putch(' ') );
  4695  000B30  0E20               	movlw	32
  4696  000B32  ECC4  F028         	call	_putch
  4697                           
  4698                           ;doprnt.c: 1431: while(--width);
  4699  000B36  0101               	movlb	1	; () banked
  4700  000B38  074F               	decf	printf@width& (0+255),f,b
  4701  000B3A  A0D8               	btfss	status,0,c
  4702  000B3C  0750               	decf	(printf@width+1)& (0+255),f,b
  4703  000B3E  0101               	movlb	1	; () banked
  4704  000B40  514F               	movf	printf@width& (0+255),w,b
  4705  000B42  0101               	movlb	1	; () banked
  4706  000B44  1150               	iorwf	(printf@width+1)& (0+255),w,b
  4707  000B46  A4D8               	btfss	status,2,c
  4708  000B48  D7F3               	goto	l5676
  4709  000B4A                     l5680:
  4710                           
  4711                           ; BSR set to: 1
  4712                           ;doprnt.c: 1438: if(flag & 0x03)
  4713  000B4A  0E03               	movlw	3
  4714  000B4C  0101               	movlb	1	; () banked
  4715  000B4E  1554               	andwf	printf@flag& (0+255),w,b
  4716  000B50  0100               	movlb	0	; () banked
  4717  000B52  6FDF               	movwf	??_printf& (0+255),b
  4718  000B54  0E00               	movlw	0
  4719  000B56  0101               	movlb	1	; () banked
  4720  000B58  1555               	andwf	(printf@flag+1)& (0+255),w,b
  4721  000B5A  0100               	movlb	0	; () banked
  4722  000B5C  6FE0               	movwf	(??_printf+1)& (0+255),b
  4723  000B5E  0100               	movlb	0	; () banked
  4724  000B60  51DF               	movf	??_printf& (0+255),w,b
  4725  000B62  0100               	movlb	0	; () banked
  4726  000B64  11E0               	iorwf	(??_printf+1)& (0+255),w,b
  4727  000B66  B4D8               	btfsc	status,2,c
  4728  000B68  D003               	goto	l5684
  4729                           
  4730                           ; BSR set to: 0
  4731                           ;doprnt.c: 1439: (putch('-') );
  4732  000B6A  0E2D               	movlw	45
  4733  000B6C  ECC4  F028         	call	_putch
  4734  000B70                     l5684:
  4735                           
  4736                           ;doprnt.c: 1469: }
  4737                           ;doprnt.c: 1472: prec = c;
  4738  000B70  0101               	movlb	1	; () banked
  4739  000B72  5156               	movf	printf@c& (0+255),w,b
  4740  000B74  0101               	movlb	1	; () banked
  4741  000B76  6F43               	movwf	printf@prec& (0+255),b
  4742  000B78  6B44               	clrf	(printf@prec+1)& (0+255),b
  4743  000B7A  BF43               	btfsc	printf@prec& (0+255),7,b
  4744  000B7C  0744               	decf	(printf@prec+1)& (0+255),f,b
  4745                           
  4746                           ;doprnt.c: 1474: while(prec--) {
  4747  000B7E  D08A               	goto	l5698
  4748  000B80                     l5686:
  4749                           
  4750                           ; BSR set to: 1
  4751                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4752  000B80  C143  F0DF         	movff	printf@prec,??_printf
  4753  000B84  C144  F0E0         	movff	printf@prec+1,??_printf+1
  4754  000B88  0100               	movlb	0	; () banked
  4755  000B8A  90D8               	bcf	status,0,c
  4756  000B8C  37DF               	rlcf	??_printf& (0+255),f,b
  4757  000B8E  37E0               	rlcf	(??_printf+1)& (0+255),f,b
  4758  000B90  0100               	movlb	0	; () banked
  4759  000B92  90D8               	bcf	status,0,c
  4760  000B94  37DF               	rlcf	??_printf& (0+255),f,b
  4761  000B96  37E0               	rlcf	(??_printf+1)& (0+255),f,b
  4762  000B98  0E31               	movlw	low _dpowers
  4763  000B9A  0100               	movlb	0	; () banked
  4764  000B9C  25DF               	addwf	??_printf& (0+255),w,b
  4765  000B9E  6EF6               	movwf	tblptrl,c
  4766  000BA0  0EFE               	movlw	high _dpowers
  4767  000BA2  21E0               	addwfc	(??_printf+1)& (0+255),w,b
  4768  000BA4  6EF7               	movwf	tblptrh,c
  4769  000BA6                     	if	0	;There are less than 3 active tblptr bytes
  4770  000BA6                     	endif
  4771  000BA6  0009               	tblrd		*+
  4772  000BA8  CFF5 F084          	movff	tablat,___lldiv@divisor
  4773  000BAC  0009               	tblrd		*+
  4774  000BAE  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  4775  000BB2  0009               	tblrd		*+
  4776  000BB4  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  4777  000BB8  000A               	tblrd		*-
  4778  000BBA  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  4779  000BBE  C14B  F080         	movff	printf@val,___lldiv@dividend
  4780  000BC2  C14C  F081         	movff	printf@val+1,___lldiv@dividend+1
  4781  000BC6  C14D  F082         	movff	printf@val+2,___lldiv@dividend+2
  4782  000BCA  C14E  F083         	movff	printf@val+3,___lldiv@dividend+3
  4783  000BCE  ECD7  F022         	call	___lldiv	;wreg free
  4784  000BD2  C080  F08D         	movff	?___lldiv,___llmod@dividend
  4785  000BD6  C081  F08E         	movff	?___lldiv+1,___llmod@dividend+1
  4786  000BDA  C082  F08F         	movff	?___lldiv+2,___llmod@dividend+2
  4787  000BDE  C083  F090         	movff	?___lldiv+3,___llmod@dividend+3
  4788  000BE2  0E0A               	movlw	10
  4789  000BE4  0100               	movlb	0	; () banked
  4790  000BE6  6F91               	movwf	___llmod@divisor& (0+255),b
  4791  000BE8  0E00               	movlw	0
  4792  000BEA  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  4793  000BEC  0E00               	movlw	0
  4794  000BEE  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  4795  000BF0  0E00               	movlw	0
  4796  000BF2  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  4797  000BF4  EC2C  F024         	call	___llmod	;wreg free
  4798  000BF8  0100               	movlb	0	; () banked
  4799  000BFA  518D               	movf	?___llmod& (0+255),w,b
  4800  000BFC  0F30               	addlw	48
  4801  000BFE  0101               	movlb	1	; () banked
  4802  000C00  6F56               	movwf	printf@c& (0+255),b
  4803                           
  4804                           ;doprnt.c: 1491: break;
  4805  000C02  D044               	goto	l5696
  4806  000C04                     l5688:
  4807                           
  4808                           ; BSR set to: 1
  4809                           ;doprnt.c: 1499: {
  4810                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4811  000C04  C14B  F080         	movff	printf@val,___lldiv@dividend
  4812  000C08  C14C  F081         	movff	printf@val+1,___lldiv@dividend+1
  4813  000C0C  C14D  F082         	movff	printf@val+2,___lldiv@dividend+2
  4814  000C10  C14E  F083         	movff	printf@val+3,___lldiv@dividend+3
  4815  000C14  C143  F0DF         	movff	printf@prec,??_printf
  4816  000C18  C144  F0E0         	movff	printf@prec+1,??_printf+1
  4817  000C1C  0100               	movlb	0	; () banked
  4818  000C1E  90D8               	bcf	status,0,c
  4819  000C20  37DF               	rlcf	??_printf& (0+255),f,b
  4820  000C22  37E0               	rlcf	(??_printf+1)& (0+255),f,b
  4821  000C24  0100               	movlb	0	; () banked
  4822  000C26  90D8               	bcf	status,0,c
  4823  000C28  37DF               	rlcf	??_printf& (0+255),f,b
  4824  000C2A  37E0               	rlcf	(??_printf+1)& (0+255),f,b
  4825  000C2C  0EA7               	movlw	low _hexpowers
  4826  000C2E  0100               	movlb	0	; () banked
  4827  000C30  25DF               	addwf	??_printf& (0+255),w,b
  4828  000C32  6EF6               	movwf	tblptrl,c
  4829  000C34  0EFE               	movlw	high _hexpowers
  4830  000C36  21E0               	addwfc	(??_printf+1)& (0+255),w,b
  4831  000C38  6EF7               	movwf	tblptrh,c
  4832  000C3A                     	if	0	;There are less than 3 active tblptr bytes
  4833  000C3A                     	endif
  4834  000C3A  0009               	tblrd		*+
  4835  000C3C  CFF5 F084          	movff	tablat,___lldiv@divisor
  4836  000C40  0009               	tblrd		*+
  4837  000C42  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  4838  000C46  0009               	tblrd		*+
  4839  000C48  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  4840  000C4C  000A               	tblrd		*-
  4841  000C4E  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  4842  000C52  ECD7  F022         	call	___lldiv	;wreg free
  4843  000C56  0100               	movlb	0	; () banked
  4844  000C58  5180               	movf	?___lldiv& (0+255),w,b
  4845  000C5A  0B0F               	andlw	15
  4846  000C5C  0101               	movlb	1	; () banked
  4847  000C5E  6F3E               	movwf	printf@idx& (0+255),b
  4848                           
  4849                           ; BSR set to: 1
  4850                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4851  000C60  0101               	movlb	1	; () banked
  4852  000C62  513E               	movf	printf@idx& (0+255),w,b
  4853  000C64  0D01               	mullw	1
  4854  000C66  0E4C               	movlw	low STR_18
  4855  000C68  24F3               	addwf	prodl,w,c
  4856  000C6A  6EF6               	movwf	tblptrl,c
  4857  000C6C  0EFF               	movlw	high STR_18
  4858  000C6E  20F4               	addwfc	prodh,w,c
  4859  000C70  6EF7               	movwf	tblptrh,c
  4860  000C72                     	if	0	;There are less than 3 active tblptr bytes
  4861  000C72                     	endif
  4862  000C72  0008               	tblrd		*
  4863  000C74  CFF5 F156          	movff	tablat,printf@c
  4864                           
  4865                           ; BSR set to: 1
  4866                           ;doprnt.c: 1523: }
  4867                           
  4868                           ;doprnt.c: 1508: }
  4869                           ;doprnt.c: 1510: break;
  4870  000C78  D009               	goto	l5696
  4871  000C7A                     l5694:
  4872                           
  4873                           ; BSR set to: 1
  4874  000C7A  0101               	movlb	1	; () banked
  4875  000C7C  5154               	movf	printf@flag& (0+255),w,b
  4876  000C7E  0B80               	andlw	128
  4877                           
  4878                           ; Switch size 1, requested type "space"
  4879                           ; Number of cases is 2, Range of values is 0 to 128
  4880                           ; switch strategies available:
  4881                           ; Name         Instructions Cycles
  4882                           ; simple_byte            7     4 (average)
  4883                           ;	Chosen strategy is simple_byte
  4884  000C80  0A00               	xorlw	0	; case 0
  4885  000C82  B4D8               	btfsc	status,2,c
  4886  000C84  D77D               	goto	l5686
  4887  000C86  0A80               	xorlw	128	; case 128
  4888  000C88  B4D8               	btfsc	status,2,c
  4889  000C8A  D7BC               	goto	l5688
  4890  000C8C                     l5696:
  4891                           
  4892                           ; BSR set to: 1
  4893                           ;doprnt.c: 1524: (putch(c) );
  4894  000C8C  0101               	movlb	1	; () banked
  4895  000C8E  5156               	movf	printf@c& (0+255),w,b
  4896  000C90  ECC4  F028         	call	_putch
  4897  000C94                     l5698:
  4898  000C94  0101               	movlb	1	; () banked
  4899  000C96  0743               	decf	printf@prec& (0+255),f,b
  4900  000C98  A0D8               	btfss	status,0,c
  4901  000C9A  0744               	decf	(printf@prec+1)& (0+255),f,b
  4902  000C9C  0101               	movlb	1	; () banked
  4903  000C9E  2943               	incf	printf@prec& (0+255),w,b
  4904  000CA0  E1EC               	bnz	l5694
  4905  000CA2  0101               	movlb	1	; () banked
  4906  000CA4  2944               	incf	(printf@prec+1)& (0+255),w,b
  4907  000CA6  A4D8               	btfss	status,2,c
  4908  000CA8  D7E8               	goto	l5694
  4909  000CAA                     l5700:
  4910  000CAA  C0D5  FFF6         	movff	printf@f,tblptrl
  4911  000CAE  C0D6  FFF7         	movff	printf@f+1,tblptrh
  4912  000CB2  0100               	movlb	0	; () banked
  4913  000CB4  4BD5               	infsnz	printf@f& (0+255),f,b
  4914  000CB6  2BD6               	incf	(printf@f+1)& (0+255),f,b
  4915  000CB8                     	if	0	;tblptru may be non-zero
  4916  000CB8                     	endif
  4917  000CB8                     	if	0	;tblptru may be non-zero
  4918  000CB8                     	endif
  4919  000CB8  0008               	tblrd		*
  4920  000CBA  CFF5 F156          	movff	tablat,printf@c
  4921  000CBE  0101               	movlb	1	; () banked
  4922  000CC0  5156               	movf	printf@c& (0+255),w,b
  4923  000CC2  B4D8               	btfsc	status,2,c
  4924  000CC4  0012               	return	
  4925  000CC6  EF11  F000         	goto	l5378
  4926  000CCA                     __end_of_printf:
  4927                           	opt stack 0
  4928                           tblptru	equ	0xFF8
  4929                           tblptrh	equ	0xFF7
  4930                           tblptrl	equ	0xFF6
  4931                           tablat	equ	0xFF5
  4932                           prodh	equ	0xFF4
  4933                           prodl	equ	0xFF3
  4934                           postinc0	equ	0xFEE
  4935                           wreg	equ	0xFE8
  4936                           postdec1	equ	0xFE5
  4937                           fsr1l	equ	0xFE1
  4938                           indf2	equ	0xFDF
  4939                           postinc2	equ	0xFDE
  4940                           postdec2	equ	0xFDD
  4941                           fsr2h	equ	0xFDA
  4942                           fsr2l	equ	0xFD9
  4943                           status	equ	0xFD8
  4944                           
  4945 ;; *************** function _scale *****************
  4946 ;; Defined at:
  4947 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4948 ;; Parameters:    Size  Location     Type
  4949 ;;  scl             1    wreg     char 
  4950 ;; Auto vars:     Size  Location     Type
  4951 ;;  scl             1   54[BANK0 ] char 
  4952 ;; Return value:  Size  Location     Type
  4953 ;;                  3   48[BANK0 ] char 
  4954 ;; Registers used:
  4955 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4956 ;; Tracked objects:
  4957 ;;		On entry : 0/0
  4958 ;;		On exit  : 0/0
  4959 ;;		Unchanged: 0/0
  4960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4961 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4962 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4964 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4965 ;;Total ram usage:        7 bytes
  4966 ;; Hardware stack levels used:    1
  4967 ;; Hardware stack levels required when called:    8
  4968 ;; This function calls:
  4969 ;;		___awdiv
  4970 ;;		___awmod
  4971 ;;		___ftmul
  4972 ;;		___wmul
  4973 ;; This function is called by:
  4974 ;;		_printf
  4975 ;; This function uses a non-reentrant model
  4976 ;;
  4977                           
  4978                           	psect	text4
  4979  001752                     __ptext4:
  4980                           	opt stack 0
  4981  001752                     _scale:
  4982                           	opt stack 20
  4983                           
  4984                           ;incstack = 0
  4985                           ;scale@scl stored from wreg
  4986  001752  0100               	movlb	0	; () banked
  4987  001754  6FB6               	movwf	scale@scl& (0+255),b
  4988                           
  4989                           ;doprnt.c: 428: if(scl < 0) {
  4990  001756  0100               	movlb	0	; () banked
  4991  001758  AFB6               	btfss	scale@scl& (0+255),7,b
  4992  00175A  D12A               	goto	l4864
  4993                           
  4994                           ; BSR set to: 0
  4995                           ;doprnt.c: 429: scl = -scl;
  4996  00175C  0100               	movlb	0	; () banked
  4997  00175E  6DB6               	negf	scale@scl& (0+255),b
  4998                           
  4999                           ;doprnt.c: 430: if(scl>=110)
  5000  001760  0100               	movlb	0	; () banked
  5001  001762  51B6               	movf	scale@scl& (0+255),w,b
  5002  001764  0A80               	xorlw	128
  5003  001766  0F12               	addlw	-238
  5004  001768  A0D8               	btfss	status,0,c
  5005  00176A  D0AC               	goto	l4854
  5006                           
  5007                           ; BSR set to: 0
  5008                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5009  00176C  0E00               	movlw	0
  5010  00176E  0100               	movlb	0	; () banked
  5011  001770  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5012  001772  0E03               	movlw	3
  5013  001774  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5014  001776  0E00               	movlw	0
  5015  001778  0100               	movlb	0	; () banked
  5016  00177A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5017  00177C  0E0A               	movlw	10
  5018  00177E  6F88               	movwf	___awdiv@divisor& (0+255),b
  5019  001780  0E00               	movlw	0
  5020  001782  0100               	movlb	0	; () banked
  5021  001784  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5022  001786  0E64               	movlw	100
  5023  001788  6F82               	movwf	___awmod@divisor& (0+255),b
  5024  00178A  0100               	movlb	0	; () banked
  5025  00178C  51B6               	movf	scale@scl& (0+255),w,b
  5026  00178E  0100               	movlb	0	; () banked
  5027  001790  6F80               	movwf	___awmod@dividend& (0+255),b
  5028  001792  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5029  001794  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  5030  001796  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  5031  001798  EC8C  F023         	call	___awmod	;wreg free
  5032  00179C  C080  F086         	movff	?___awmod,___awdiv@dividend
  5033  0017A0  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  5034  0017A4  EC78  F022         	call	___awdiv	;wreg free
  5035  0017A8  0E09               	movlw	9
  5036  0017AA  0100               	movlb	0	; () banked
  5037  0017AC  2586               	addwf	?___awdiv& (0+255),w,b
  5038  0017AE  0100               	movlb	0	; () banked
  5039  0017B0  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5040  0017B2  0E00               	movlw	0
  5041  0017B4  0100               	movlb	0	; () banked
  5042  0017B6  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5043  0017B8  0100               	movlb	0	; () banked
  5044  0017BA  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5045  0017BC  EC52  F028         	call	___wmul	;wreg free
  5046  0017C0  0E59               	movlw	low __npowers_
  5047  0017C2  0100               	movlb	0	; () banked
  5048  0017C4  258E               	addwf	?___wmul& (0+255),w,b
  5049  0017C6  6EF6               	movwf	tblptrl,c
  5050  0017C8  0EFE               	movlw	high __npowers_
  5051  0017CA  0100               	movlb	0	; () banked
  5052  0017CC  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5053  0017CE  6EF7               	movwf	tblptrh,c
  5054  0017D0                     	if	0	;There are less than 3 active tblptr bytes
  5055  0017D0                     	endif
  5056  0017D0  0009               	tblrd		*+
  5057  0017D2  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5058  0017D6  0009               	tblrd		*+
  5059  0017D8  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5060  0017DC  000A               	tblrd		*-
  5061  0017DE  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5062  0017E2  0E00               	movlw	0
  5063  0017E4  0100               	movlb	0	; () banked
  5064  0017E6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5065  0017E8  0E64               	movlw	100
  5066  0017EA  6F88               	movwf	___awdiv@divisor& (0+255),b
  5067  0017EC  0100               	movlb	0	; () banked
  5068  0017EE  51B6               	movf	scale@scl& (0+255),w,b
  5069  0017F0  0100               	movlb	0	; () banked
  5070  0017F2  6F86               	movwf	___awdiv@dividend& (0+255),b
  5071  0017F4  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  5072  0017F6  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  5073  0017F8  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  5074  0017FA  EC78  F022         	call	___awdiv	;wreg free
  5075  0017FE  0E12               	movlw	18
  5076  001800  0100               	movlb	0	; () banked
  5077  001802  2586               	addwf	?___awdiv& (0+255),w,b
  5078  001804  0100               	movlb	0	; () banked
  5079  001806  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5080  001808  0E00               	movlw	0
  5081  00180A  0100               	movlb	0	; () banked
  5082  00180C  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5083  00180E  0100               	movlb	0	; () banked
  5084  001810  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5085  001812  0E00               	movlw	0
  5086  001814  0100               	movlb	0	; () banked
  5087  001816  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5088  001818  0E03               	movlw	3
  5089  00181A  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5090  00181C  EC52  F028         	call	___wmul	;wreg free
  5091  001820  0E59               	movlw	low __npowers_
  5092  001822  0100               	movlb	0	; () banked
  5093  001824  258E               	addwf	?___wmul& (0+255),w,b
  5094  001826  6EF6               	movwf	tblptrl,c
  5095  001828  0EFE               	movlw	high __npowers_
  5096  00182A  0100               	movlb	0	; () banked
  5097  00182C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5098  00182E  6EF7               	movwf	tblptrh,c
  5099  001830                     	if	0	;There are less than 3 active tblptr bytes
  5100  001830                     	endif
  5101  001830  0009               	tblrd		*+
  5102  001832  CFF5 F0A1          	movff	tablat,___ftmul@f1
  5103  001836  0009               	tblrd		*+
  5104  001838  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  5105  00183C  000A               	tblrd		*-
  5106  00183E  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  5107  001842  EC72  F019         	call	___ftmul	;wreg free
  5108  001846  C0A1  F0B3         	movff	?___ftmul,_scale$1332
  5109  00184A  C0A2  F0B4         	movff	?___ftmul+1,_scale$1332+1
  5110  00184E  C0A3  F0B5         	movff	?___ftmul+2,_scale$1332+2
  5111                           
  5112                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5113  001852  C0B3  F0A1         	movff	_scale$1332,___ftmul@f1
  5114  001856  C0B4  F0A2         	movff	_scale$1332+1,___ftmul@f1+1
  5115  00185A  C0B5  F0A3         	movff	_scale$1332+2,___ftmul@f1+2
  5116  00185E  0E00               	movlw	0
  5117  001860  0100               	movlb	0	; () banked
  5118  001862  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5119  001864  0E03               	movlw	3
  5120  001866  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5121  001868  0E00               	movlw	0
  5122  00186A  0100               	movlb	0	; () banked
  5123  00186C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5124  00186E  0E0A               	movlw	10
  5125  001870  6F82               	movwf	___awmod@divisor& (0+255),b
  5126  001872  0100               	movlb	0	; () banked
  5127  001874  51B6               	movf	scale@scl& (0+255),w,b
  5128  001876  0100               	movlb	0	; () banked
  5129  001878  6F80               	movwf	___awmod@dividend& (0+255),b
  5130  00187A  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5131  00187C  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  5132  00187E  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  5133  001880  EC8C  F023         	call	___awmod	;wreg free
  5134  001884  C080  F08E         	movff	?___awmod,___wmul@multiplier
  5135  001888  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  5136  00188C  EC52  F028         	call	___wmul	;wreg free
  5137  001890  0E59               	movlw	low __npowers_
  5138  001892  0100               	movlb	0	; () banked
  5139  001894  258E               	addwf	?___wmul& (0+255),w,b
  5140  001896  6EF6               	movwf	tblptrl,c
  5141  001898  0EFE               	movlw	high __npowers_
  5142  00189A  0100               	movlb	0	; () banked
  5143  00189C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5144  00189E  6EF7               	movwf	tblptrh,c
  5145  0018A0                     	if	0	;There are less than 3 active tblptr bytes
  5146  0018A0                     	endif
  5147  0018A0  0009               	tblrd		*+
  5148  0018A2  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5149  0018A6  0009               	tblrd		*+
  5150  0018A8  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5151  0018AC  000A               	tblrd		*-
  5152  0018AE  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5153  0018B2  EC72  F019         	call	___ftmul	;wreg free
  5154  0018B6  C0A1  F0B0         	movff	?___ftmul,?_scale
  5155  0018BA  C0A2  F0B1         	movff	?___ftmul+1,?_scale+1
  5156  0018BE  C0A3  F0B2         	movff	?___ftmul+2,?_scale+2
  5157  0018C2  0012               	return	
  5158  0018C4                     l4854:
  5159                           
  5160                           ;doprnt.c: 432: else if(scl > 10)
  5161  0018C4  0100               	movlb	0	; () banked
  5162  0018C6  51B6               	movf	scale@scl& (0+255),w,b
  5163  0018C8  0A80               	xorlw	128
  5164  0018CA  0F75               	addlw	-139
  5165  0018CC  A0D8               	btfss	status,0,c
  5166  0018CE  D05D               	goto	l4860
  5167                           
  5168                           ; BSR set to: 0
  5169                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5170  0018D0  0E00               	movlw	0
  5171  0018D2  0100               	movlb	0	; () banked
  5172  0018D4  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5173  0018D6  0E0A               	movlw	10
  5174  0018D8  6F88               	movwf	___awdiv@divisor& (0+255),b
  5175  0018DA  0100               	movlb	0	; () banked
  5176  0018DC  51B6               	movf	scale@scl& (0+255),w,b
  5177  0018DE  0100               	movlb	0	; () banked
  5178  0018E0  6F86               	movwf	___awdiv@dividend& (0+255),b
  5179  0018E2  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  5180  0018E4  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  5181  0018E6  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  5182  0018E8  EC78  F022         	call	___awdiv	;wreg free
  5183  0018EC  0E09               	movlw	9
  5184  0018EE  0100               	movlb	0	; () banked
  5185  0018F0  2586               	addwf	?___awdiv& (0+255),w,b
  5186  0018F2  0100               	movlb	0	; () banked
  5187  0018F4  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5188  0018F6  0E00               	movlw	0
  5189  0018F8  0100               	movlb	0	; () banked
  5190  0018FA  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5191  0018FC  0100               	movlb	0	; () banked
  5192  0018FE  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5193  001900  0E00               	movlw	0
  5194  001902  0100               	movlb	0	; () banked
  5195  001904  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5196  001906  0E03               	movlw	3
  5197  001908  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5198  00190A  EC52  F028         	call	___wmul	;wreg free
  5199  00190E  0E59               	movlw	low __npowers_
  5200  001910  0100               	movlb	0	; () banked
  5201  001912  258E               	addwf	?___wmul& (0+255),w,b
  5202  001914  6EF6               	movwf	tblptrl,c
  5203  001916  0EFE               	movlw	high __npowers_
  5204  001918  0100               	movlb	0	; () banked
  5205  00191A  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5206  00191C  6EF7               	movwf	tblptrh,c
  5207  00191E                     	if	0	;There are less than 3 active tblptr bytes
  5208  00191E                     	endif
  5209  00191E  0009               	tblrd		*+
  5210  001920  CFF5 F0A1          	movff	tablat,___ftmul@f1
  5211  001924  0009               	tblrd		*+
  5212  001926  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  5213  00192A  000A               	tblrd		*-
  5214  00192C  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  5215  001930  0E00               	movlw	0
  5216  001932  0100               	movlb	0	; () banked
  5217  001934  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5218  001936  0E03               	movlw	3
  5219  001938  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5220  00193A  0E00               	movlw	0
  5221  00193C  0100               	movlb	0	; () banked
  5222  00193E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5223  001940  0E0A               	movlw	10
  5224  001942  6F82               	movwf	___awmod@divisor& (0+255),b
  5225  001944  0100               	movlb	0	; () banked
  5226  001946  51B6               	movf	scale@scl& (0+255),w,b
  5227  001948  0100               	movlb	0	; () banked
  5228  00194A  6F80               	movwf	___awmod@dividend& (0+255),b
  5229  00194C  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5230  00194E  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  5231  001950  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  5232  001952  EC8C  F023         	call	___awmod	;wreg free
  5233  001956  C080  F08E         	movff	?___awmod,___wmul@multiplier
  5234  00195A  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  5235  00195E  EC52  F028         	call	___wmul	;wreg free
  5236  001962  0E59               	movlw	low __npowers_
  5237  001964  0100               	movlb	0	; () banked
  5238  001966  258E               	addwf	?___wmul& (0+255),w,b
  5239  001968  6EF6               	movwf	tblptrl,c
  5240  00196A  0EFE               	movlw	high __npowers_
  5241  00196C  0100               	movlb	0	; () banked
  5242  00196E  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5243  001970  6EF7               	movwf	tblptrh,c
  5244  001972                     	if	0	;There are less than 3 active tblptr bytes
  5245  001972                     	endif
  5246  001972  0009               	tblrd		*+
  5247  001974  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5248  001978  0009               	tblrd		*+
  5249  00197A  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5250  00197E  000A               	tblrd		*-
  5251  001980  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5252  001984  EC72  F019         	call	___ftmul	;wreg free
  5253  001988  D796               	goto	L4
  5254  00198A                     l4860:
  5255                           
  5256                           ;doprnt.c: 434: return _npowers_[scl];
  5257  00198A  0100               	movlb	0	; () banked
  5258  00198C  51B6               	movf	scale@scl& (0+255),w,b
  5259  00198E  0D03               	mullw	3
  5260  001990  0E59               	movlw	low __npowers_
  5261  001992  24F3               	addwf	prodl,w,c
  5262  001994  6EF6               	movwf	tblptrl,c
  5263  001996  0EFE               	movlw	high __npowers_
  5264  001998  20F4               	addwfc	prodh,w,c
  5265  00199A  6EF7               	movwf	tblptrh,c
  5266  00199C                     	if	0	;There are less than 3 active tblptr bytes
  5267  00199C                     	endif
  5268  00199C  0009               	tblrd		*+
  5269  00199E  CFF5 F0B0          	movff	tablat,?_scale
  5270  0019A2  0009               	tblrd		*+
  5271  0019A4  CFF5 F0B1          	movff	tablat,?_scale+1
  5272  0019A8  000A               	tblrd		*-
  5273  0019AA  CFF5 F0B2          	movff	tablat,?_scale+2
  5274                           
  5275                           ; BSR set to: 0
  5276  0019AE  0012               	return	
  5277  0019B0                     l4864:
  5278                           
  5279                           ; BSR set to: 0
  5280                           ;doprnt.c: 435: }
  5281                           ;doprnt.c: 436: if(scl>=110)
  5282  0019B0  0100               	movlb	0	; () banked
  5283  0019B2  51B6               	movf	scale@scl& (0+255),w,b
  5284  0019B4  0A80               	xorlw	128
  5285  0019B6  0F12               	addlw	-238
  5286  0019B8  A0D8               	btfss	status,0,c
  5287  0019BA  D0AC               	goto	l4872
  5288                           
  5289                           ; BSR set to: 0
  5290                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5291  0019BC  0E00               	movlw	0
  5292  0019BE  0100               	movlb	0	; () banked
  5293  0019C0  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5294  0019C2  0E03               	movlw	3
  5295  0019C4  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5296  0019C6  0E00               	movlw	0
  5297  0019C8  0100               	movlb	0	; () banked
  5298  0019CA  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5299  0019CC  0E0A               	movlw	10
  5300  0019CE  6F88               	movwf	___awdiv@divisor& (0+255),b
  5301  0019D0  0E00               	movlw	0
  5302  0019D2  0100               	movlb	0	; () banked
  5303  0019D4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5304  0019D6  0E64               	movlw	100
  5305  0019D8  6F82               	movwf	___awmod@divisor& (0+255),b
  5306  0019DA  0100               	movlb	0	; () banked
  5307  0019DC  51B6               	movf	scale@scl& (0+255),w,b
  5308  0019DE  0100               	movlb	0	; () banked
  5309  0019E0  6F80               	movwf	___awmod@dividend& (0+255),b
  5310  0019E2  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5311  0019E4  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  5312  0019E6  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  5313  0019E8  EC8C  F023         	call	___awmod	;wreg free
  5314  0019EC  C080  F086         	movff	?___awmod,___awdiv@dividend
  5315  0019F0  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  5316  0019F4  EC78  F022         	call	___awdiv	;wreg free
  5317  0019F8  0E09               	movlw	9
  5318  0019FA  0100               	movlb	0	; () banked
  5319  0019FC  2586               	addwf	?___awdiv& (0+255),w,b
  5320  0019FE  0100               	movlb	0	; () banked
  5321  001A00  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5322  001A02  0E00               	movlw	0
  5323  001A04  0100               	movlb	0	; () banked
  5324  001A06  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5325  001A08  0100               	movlb	0	; () banked
  5326  001A0A  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5327  001A0C  EC52  F028         	call	___wmul	;wreg free
  5328  001A10  0E80               	movlw	low __powers_
  5329  001A12  0100               	movlb	0	; () banked
  5330  001A14  258E               	addwf	?___wmul& (0+255),w,b
  5331  001A16  6EF6               	movwf	tblptrl,c
  5332  001A18  0EFE               	movlw	high __powers_
  5333  001A1A  0100               	movlb	0	; () banked
  5334  001A1C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5335  001A1E  6EF7               	movwf	tblptrh,c
  5336  001A20                     	if	0	;There are less than 3 active tblptr bytes
  5337  001A20                     	endif
  5338  001A20  0009               	tblrd		*+
  5339  001A22  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5340  001A26  0009               	tblrd		*+
  5341  001A28  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5342  001A2C  000A               	tblrd		*-
  5343  001A2E  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5344  001A32  0E00               	movlw	0
  5345  001A34  0100               	movlb	0	; () banked
  5346  001A36  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5347  001A38  0E64               	movlw	100
  5348  001A3A  6F88               	movwf	___awdiv@divisor& (0+255),b
  5349  001A3C  0100               	movlb	0	; () banked
  5350  001A3E  51B6               	movf	scale@scl& (0+255),w,b
  5351  001A40  0100               	movlb	0	; () banked
  5352  001A42  6F86               	movwf	___awdiv@dividend& (0+255),b
  5353  001A44  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  5354  001A46  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  5355  001A48  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  5356  001A4A  EC78  F022         	call	___awdiv	;wreg free
  5357  001A4E  0E12               	movlw	18
  5358  001A50  0100               	movlb	0	; () banked
  5359  001A52  2586               	addwf	?___awdiv& (0+255),w,b
  5360  001A54  0100               	movlb	0	; () banked
  5361  001A56  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5362  001A58  0E00               	movlw	0
  5363  001A5A  0100               	movlb	0	; () banked
  5364  001A5C  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5365  001A5E  0100               	movlb	0	; () banked
  5366  001A60  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5367  001A62  0E00               	movlw	0
  5368  001A64  0100               	movlb	0	; () banked
  5369  001A66  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5370  001A68  0E03               	movlw	3
  5371  001A6A  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5372  001A6C  EC52  F028         	call	___wmul	;wreg free
  5373  001A70  0E80               	movlw	low __powers_
  5374  001A72  0100               	movlb	0	; () banked
  5375  001A74  258E               	addwf	?___wmul& (0+255),w,b
  5376  001A76  6EF6               	movwf	tblptrl,c
  5377  001A78  0EFE               	movlw	high __powers_
  5378  001A7A  0100               	movlb	0	; () banked
  5379  001A7C  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5380  001A7E  6EF7               	movwf	tblptrh,c
  5381  001A80                     	if	0	;There are less than 3 active tblptr bytes
  5382  001A80                     	endif
  5383  001A80  0009               	tblrd		*+
  5384  001A82  CFF5 F0A1          	movff	tablat,___ftmul@f1
  5385  001A86  0009               	tblrd		*+
  5386  001A88  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  5387  001A8C  000A               	tblrd		*-
  5388  001A8E  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  5389  001A92  EC72  F019         	call	___ftmul	;wreg free
  5390  001A96  C0A1  F0B3         	movff	?___ftmul,_scale$1332
  5391  001A9A  C0A2  F0B4         	movff	?___ftmul+1,_scale$1332+1
  5392  001A9E  C0A3  F0B5         	movff	?___ftmul+2,_scale$1332+2
  5393                           
  5394                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5395  001AA2  C0B3  F0A1         	movff	_scale$1332,___ftmul@f1
  5396  001AA6  C0B4  F0A2         	movff	_scale$1332+1,___ftmul@f1+1
  5397  001AAA  C0B5  F0A3         	movff	_scale$1332+2,___ftmul@f1+2
  5398  001AAE  0E00               	movlw	0
  5399  001AB0  0100               	movlb	0	; () banked
  5400  001AB2  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5401  001AB4  0E03               	movlw	3
  5402  001AB6  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5403  001AB8  0E00               	movlw	0
  5404  001ABA  0100               	movlb	0	; () banked
  5405  001ABC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5406  001ABE  0E0A               	movlw	10
  5407  001AC0  6F82               	movwf	___awmod@divisor& (0+255),b
  5408  001AC2  0100               	movlb	0	; () banked
  5409  001AC4  51B6               	movf	scale@scl& (0+255),w,b
  5410  001AC6  0100               	movlb	0	; () banked
  5411  001AC8  6F80               	movwf	___awmod@dividend& (0+255),b
  5412  001ACA  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5413  001ACC  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  5414  001ACE  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  5415  001AD0  EC8C  F023         	call	___awmod	;wreg free
  5416  001AD4  C080  F08E         	movff	?___awmod,___wmul@multiplier
  5417  001AD8  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  5418  001ADC  EC52  F028         	call	___wmul	;wreg free
  5419  001AE0  0E80               	movlw	low __powers_
  5420  001AE2  0100               	movlb	0	; () banked
  5421  001AE4  258E               	addwf	?___wmul& (0+255),w,b
  5422  001AE6  6EF6               	movwf	tblptrl,c
  5423  001AE8  0EFE               	movlw	high __powers_
  5424  001AEA  0100               	movlb	0	; () banked
  5425  001AEC  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5426  001AEE  6EF7               	movwf	tblptrh,c
  5427  001AF0                     	if	0	;There are less than 3 active tblptr bytes
  5428  001AF0                     	endif
  5429  001AF0  0009               	tblrd		*+
  5430  001AF2  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5431  001AF6  0009               	tblrd		*+
  5432  001AF8  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5433  001AFC  000A               	tblrd		*-
  5434  001AFE  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5435  001B02  EC72  F019         	call	___ftmul	;wreg free
  5436  001B06  C0A1  F0B0         	movff	?___ftmul,?_scale
  5437  001B0A  C0A2  F0B1         	movff	?___ftmul+1,?_scale+1
  5438  001B0E  C0A3  F0B2         	movff	?___ftmul+2,?_scale+2
  5439  001B12  0012               	return	
  5440  001B14                     l4872:
  5441                           
  5442                           ;doprnt.c: 438: else if(scl > 10)
  5443  001B14  0100               	movlb	0	; () banked
  5444  001B16  51B6               	movf	scale@scl& (0+255),w,b
  5445  001B18  0A80               	xorlw	128
  5446  001B1A  0F75               	addlw	-139
  5447  001B1C  A0D8               	btfss	status,0,c
  5448  001B1E  D05D               	goto	l4878
  5449                           
  5450                           ; BSR set to: 0
  5451                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5452  001B20  0E00               	movlw	0
  5453  001B22  0100               	movlb	0	; () banked
  5454  001B24  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5455  001B26  0E0A               	movlw	10
  5456  001B28  6F88               	movwf	___awdiv@divisor& (0+255),b
  5457  001B2A  0100               	movlb	0	; () banked
  5458  001B2C  51B6               	movf	scale@scl& (0+255),w,b
  5459  001B2E  0100               	movlb	0	; () banked
  5460  001B30  6F86               	movwf	___awdiv@dividend& (0+255),b
  5461  001B32  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  5462  001B34  BF86               	btfsc	___awdiv@dividend& (0+255),7,b
  5463  001B36  0787               	decf	(___awdiv@dividend+1)& (0+255),f,b
  5464  001B38  EC78  F022         	call	___awdiv	;wreg free
  5465  001B3C  0E09               	movlw	9
  5466  001B3E  0100               	movlb	0	; () banked
  5467  001B40  2586               	addwf	?___awdiv& (0+255),w,b
  5468  001B42  0100               	movlb	0	; () banked
  5469  001B44  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5470  001B46  0E00               	movlw	0
  5471  001B48  0100               	movlb	0	; () banked
  5472  001B4A  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5473  001B4C  0100               	movlb	0	; () banked
  5474  001B4E  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5475  001B50  0E00               	movlw	0
  5476  001B52  0100               	movlb	0	; () banked
  5477  001B54  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5478  001B56  0E03               	movlw	3
  5479  001B58  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5480  001B5A  EC52  F028         	call	___wmul	;wreg free
  5481  001B5E  0E80               	movlw	low __powers_
  5482  001B60  0100               	movlb	0	; () banked
  5483  001B62  258E               	addwf	?___wmul& (0+255),w,b
  5484  001B64  6EF6               	movwf	tblptrl,c
  5485  001B66  0EFE               	movlw	high __powers_
  5486  001B68  0100               	movlb	0	; () banked
  5487  001B6A  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5488  001B6C  6EF7               	movwf	tblptrh,c
  5489  001B6E                     	if	0	;There are less than 3 active tblptr bytes
  5490  001B6E                     	endif
  5491  001B6E  0009               	tblrd		*+
  5492  001B70  CFF5 F0A1          	movff	tablat,___ftmul@f1
  5493  001B74  0009               	tblrd		*+
  5494  001B76  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  5495  001B7A  000A               	tblrd		*-
  5496  001B7C  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  5497  001B80  0E00               	movlw	0
  5498  001B82  0100               	movlb	0	; () banked
  5499  001B84  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5500  001B86  0E03               	movlw	3
  5501  001B88  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5502  001B8A  0E00               	movlw	0
  5503  001B8C  0100               	movlb	0	; () banked
  5504  001B8E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5505  001B90  0E0A               	movlw	10
  5506  001B92  6F82               	movwf	___awmod@divisor& (0+255),b
  5507  001B94  0100               	movlb	0	; () banked
  5508  001B96  51B6               	movf	scale@scl& (0+255),w,b
  5509  001B98  0100               	movlb	0	; () banked
  5510  001B9A  6F80               	movwf	___awmod@dividend& (0+255),b
  5511  001B9C  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5512  001B9E  BF80               	btfsc	___awmod@dividend& (0+255),7,b
  5513  001BA0  0781               	decf	(___awmod@dividend+1)& (0+255),f,b
  5514  001BA2  EC8C  F023         	call	___awmod	;wreg free
  5515  001BA6  C080  F08E         	movff	?___awmod,___wmul@multiplier
  5516  001BAA  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  5517  001BAE  EC52  F028         	call	___wmul	;wreg free
  5518  001BB2  0E80               	movlw	low __powers_
  5519  001BB4  0100               	movlb	0	; () banked
  5520  001BB6  258E               	addwf	?___wmul& (0+255),w,b
  5521  001BB8  6EF6               	movwf	tblptrl,c
  5522  001BBA  0EFE               	movlw	high __powers_
  5523  001BBC  0100               	movlb	0	; () banked
  5524  001BBE  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5525  001BC0  6EF7               	movwf	tblptrh,c
  5526  001BC2                     	if	0	;There are less than 3 active tblptr bytes
  5527  001BC2                     	endif
  5528  001BC2  0009               	tblrd		*+
  5529  001BC4  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5530  001BC8  0009               	tblrd		*+
  5531  001BCA  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5532  001BCE  000A               	tblrd		*-
  5533  001BD0  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5534  001BD4  EC72  F019         	call	___ftmul	;wreg free
  5535  001BD8  D796               	goto	L5
  5536  001BDA                     l4878:
  5537                           
  5538                           ;doprnt.c: 440: return _powers_[scl];
  5539  001BDA  0100               	movlb	0	; () banked
  5540  001BDC  51B6               	movf	scale@scl& (0+255),w,b
  5541  001BDE  0D03               	mullw	3
  5542  001BE0  0E80               	movlw	low __powers_
  5543  001BE2  24F3               	addwf	prodl,w,c
  5544  001BE4  6EF6               	movwf	tblptrl,c
  5545  001BE6  0EFE               	movlw	high __powers_
  5546  001BE8  20F4               	addwfc	prodh,w,c
  5547  001BEA  6EF7               	movwf	tblptrh,c
  5548  001BEC                     	if	0	;There are less than 3 active tblptr bytes
  5549  001BEC                     	endif
  5550  001BEC  0009               	tblrd		*+
  5551  001BEE  CFF5 F0B0          	movff	tablat,?_scale
  5552  001BF2  0009               	tblrd		*+
  5553  001BF4  CFF5 F0B1          	movff	tablat,?_scale+1
  5554  001BF8  000A               	tblrd		*-
  5555  001BFA  CFF5 F0B2          	movff	tablat,?_scale+2
  5556  001BFE  0012               	return	
  5557  001C00                     __end_of_scale:
  5558                           	opt stack 0
  5559                           tblptru	equ	0xFF8
  5560                           tblptrh	equ	0xFF7
  5561                           tblptrl	equ	0xFF6
  5562                           tablat	equ	0xFF5
  5563                           prodh	equ	0xFF4
  5564                           prodl	equ	0xFF3
  5565                           postinc0	equ	0xFEE
  5566                           wreg	equ	0xFE8
  5567                           postdec1	equ	0xFE5
  5568                           fsr1l	equ	0xFE1
  5569                           indf2	equ	0xFDF
  5570                           postinc2	equ	0xFDE
  5571                           postdec2	equ	0xFDD
  5572                           fsr2h	equ	0xFDA
  5573                           fsr2l	equ	0xFD9
  5574                           status	equ	0xFD8
  5575                           
  5576 ;; *************** function _putch *****************
  5577 ;; Defined at:
  5578 ;;		line 35 in file "lcd.c"
  5579 ;; Parameters:    Size  Location     Type
  5580 ;;  data            1    wreg     unsigned char 
  5581 ;; Auto vars:     Size  Location     Type
  5582 ;;  data            1    4[BANK0 ] unsigned char 
  5583 ;; Return value:  Size  Location     Type
  5584 ;;                  1    wreg      void 
  5585 ;; Registers used:
  5586 ;;		wreg, status,2, status,0, cstack
  5587 ;; Tracked objects:
  5588 ;;		On entry : 0/0
  5589 ;;		On exit  : 0/0
  5590 ;;		Unchanged: 0/0
  5591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5593 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5595 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5596 ;;Total ram usage:        1 bytes
  5597 ;; Hardware stack levels used:    1
  5598 ;; Hardware stack levels required when called:    9
  5599 ;; This function calls:
  5600 ;;		_lcdNewline
  5601 ;;		_lcdNibble
  5602 ;; This function is called by:
  5603 ;;		_printf
  5604 ;; This function uses a non-reentrant model
  5605 ;;
  5606                           
  5607                           	psect	text5
  5608  005188                     __ptext5:
  5609                           	opt stack 0
  5610  005188                     _putch:
  5611                           	opt stack 19
  5612                           
  5613                           ;incstack = 0
  5614                           ;putch@data stored from wreg
  5615  005188  0100               	movlb	0	; () banked
  5616  00518A  6F84               	movwf	putch@data& (0+255),b
  5617                           
  5618                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  5619  00518C  0E0A               	movlw	10
  5620  00518E  0100               	movlb	0	; () banked
  5621  005190  1984               	xorwf	putch@data& (0+255),w,b
  5622  005192  A4D8               	btfss	status,2,c
  5623  005194  D003               	goto	l186
  5624                           
  5625                           ; BSR set to: 0
  5626  005196  EC2E  F029         	call	_lcdNewline	;wreg free
  5627  00519A  0012               	return	
  5628  00519C                     l186:
  5629                           
  5630                           ; BSR set to: 0
  5631                           ;lcd.c: 37: else
  5632                           ;lcd.c: 38: {
  5633                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  5634  00519C  848C               	bsf	3980,2,c	;volatile
  5635                           
  5636                           ; BSR set to: 0
  5637                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  5638  00519E  0E74               	movlw	116
  5639  0051A0                     u7847:
  5640  0051A0  2EE8               	decfsz	wreg,f,c
  5641  0051A2  D7FE               	bra	u7847
  5642  0051A4  D000               	nop2	
  5643                           
  5644                           ;lcd.c: 41: lcdNibble(data);
  5645  0051A6  0100               	movlb	0	; () banked
  5646  0051A8  5184               	movf	putch@data& (0+255),w,b
  5647  0051AA  ECC8  F025         	call	_lcdNibble
  5648  0051AE  0012               	return	
  5649  0051B0                     __end_of_putch:
  5650                           	opt stack 0
  5651                           tblptru	equ	0xFF8
  5652                           tblptrh	equ	0xFF7
  5653                           tblptrl	equ	0xFF6
  5654                           tablat	equ	0xFF5
  5655                           prodh	equ	0xFF4
  5656                           prodl	equ	0xFF3
  5657                           postinc0	equ	0xFEE
  5658                           wreg	equ	0xFE8
  5659                           postdec1	equ	0xFE5
  5660                           fsr1l	equ	0xFE1
  5661                           indf2	equ	0xFDF
  5662                           postinc2	equ	0xFDE
  5663                           postdec2	equ	0xFDD
  5664                           fsr2h	equ	0xFDA
  5665                           fsr2l	equ	0xFD9
  5666                           status	equ	0xFD8
  5667                           
  5668 ;; *************** function _lcdNewline *****************
  5669 ;; Defined at:
  5670 ;;		line 78 in file "lcd.c"
  5671 ;; Parameters:    Size  Location     Type
  5672 ;;		None
  5673 ;; Auto vars:     Size  Location     Type
  5674 ;;		None
  5675 ;; Return value:  Size  Location     Type
  5676 ;;                  1    wreg      void 
  5677 ;; Registers used:
  5678 ;;		wreg, status,2, status,0, cstack
  5679 ;; Tracked objects:
  5680 ;;		On entry : 0/0
  5681 ;;		On exit  : 0/0
  5682 ;;		Unchanged: 0/0
  5683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5687 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5688 ;;Total ram usage:        0 bytes
  5689 ;; Hardware stack levels used:    1
  5690 ;; Hardware stack levels required when called:    8
  5691 ;; This function calls:
  5692 ;;		_lcdInst
  5693 ;; This function is called by:
  5694 ;;		_putch
  5695 ;; This function uses a non-reentrant model
  5696 ;;
  5697                           
  5698                           	psect	text6
  5699  00525C                     __ptext6:
  5700                           	opt stack 0
  5701  00525C                     _lcdNewline:
  5702                           	opt stack 19
  5703                           
  5704                           ;lcd.c: 79: lcdInst(0b11000000);
  5705                           
  5706                           ;incstack = 0
  5707  00525C  0EC0               	movlw	192
  5708  00525E  ECAF  F028         	call	_lcdInst
  5709  005262  0012               	return		;funcret
  5710  005264                     __end_of_lcdNewline:
  5711                           	opt stack 0
  5712                           tblptru	equ	0xFF8
  5713                           tblptrh	equ	0xFF7
  5714                           tblptrl	equ	0xFF6
  5715                           tablat	equ	0xFF5
  5716                           prodh	equ	0xFF4
  5717                           prodl	equ	0xFF3
  5718                           postinc0	equ	0xFEE
  5719                           wreg	equ	0xFE8
  5720                           postdec1	equ	0xFE5
  5721                           fsr1l	equ	0xFE1
  5722                           indf2	equ	0xFDF
  5723                           postinc2	equ	0xFDE
  5724                           postdec2	equ	0xFDD
  5725                           fsr2h	equ	0xFDA
  5726                           fsr2l	equ	0xFD9
  5727                           status	equ	0xFD8
  5728                           
  5729 ;; *************** function _isdigit *****************
  5730 ;; Defined at:
  5731 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  5732 ;; Parameters:    Size  Location     Type
  5733 ;;  c               1    wreg     unsigned char 
  5734 ;; Auto vars:     Size  Location     Type
  5735 ;;  c               1    2[BANK0 ] unsigned char 
  5736 ;; Return value:  Size  Location     Type
  5737 ;;		None               void
  5738 ;; Registers used:
  5739 ;;		wreg, status,2, status,0
  5740 ;; Tracked objects:
  5741 ;;		On entry : 0/0
  5742 ;;		On exit  : 0/0
  5743 ;;		Unchanged: 0/0
  5744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5746 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5747 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5748 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5749 ;;Total ram usage:        3 bytes
  5750 ;; Hardware stack levels used:    1
  5751 ;; Hardware stack levels required when called:    6
  5752 ;; This function calls:
  5753 ;;		Nothing
  5754 ;; This function is called by:
  5755 ;;		_printf
  5756 ;; This function uses a non-reentrant model
  5757 ;;
  5758                           
  5759                           	psect	text7
  5760  005134                     __ptext7:
  5761                           	opt stack 0
  5762  005134                     _isdigit:
  5763                           	opt stack 22
  5764                           
  5765                           ;incstack = 0
  5766                           ;isdigit@c stored from wreg
  5767  005134  0100               	movlb	0	; () banked
  5768  005136  6F82               	movwf	isdigit@c& (0+255),b
  5769  005138  0E00               	movlw	0
  5770  00513A  0100               	movlb	0	; () banked
  5771  00513C  6F81               	movwf	_isdigit$956& (0+255),b
  5772                           
  5773                           ; BSR set to: 0
  5774  00513E  0E3A               	movlw	58
  5775  005140  0100               	movlb	0	; () banked
  5776  005142  6182               	cpfslt	isdigit@c& (0+255),b
  5777  005144  D007               	goto	l4890
  5778                           
  5779                           ; BSR set to: 0
  5780  005146  0E2F               	movlw	47
  5781  005148  0100               	movlb	0	; () banked
  5782  00514A  6582               	cpfsgt	isdigit@c& (0+255),b
  5783  00514C  D003               	goto	l4890
  5784                           
  5785                           ; BSR set to: 0
  5786  00514E  0E01               	movlw	1
  5787  005150  0100               	movlb	0	; () banked
  5788  005152  6F81               	movwf	_isdigit$956& (0+255),b
  5789  005154                     l4890:
  5790                           
  5791                           ; BSR set to: 0
  5792  005154  C081  F080         	movff	_isdigit$956,??_isdigit
  5793  005158  0100               	movlb	0	; () banked
  5794  00515A  3180               	rrcf	??_isdigit& (0+255),w,b
  5795  00515C  0012               	return	
  5796  00515E                     __end_of_isdigit:
  5797                           	opt stack 0
  5798                           tblptru	equ	0xFF8
  5799                           tblptrh	equ	0xFF7
  5800                           tblptrl	equ	0xFF6
  5801                           tablat	equ	0xFF5
  5802                           prodh	equ	0xFF4
  5803                           prodl	equ	0xFF3
  5804                           postinc0	equ	0xFEE
  5805                           wreg	equ	0xFE8
  5806                           postdec1	equ	0xFE5
  5807                           fsr1l	equ	0xFE1
  5808                           indf2	equ	0xFDF
  5809                           postinc2	equ	0xFDE
  5810                           postdec2	equ	0xFDD
  5811                           fsr2h	equ	0xFDA
  5812                           fsr2l	equ	0xFD9
  5813                           status	equ	0xFD8
  5814                           
  5815 ;; *************** function _fround *****************
  5816 ;; Defined at:
  5817 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5818 ;; Parameters:    Size  Location     Type
  5819 ;;  prec            1    wreg     unsigned char 
  5820 ;; Auto vars:     Size  Location     Type
  5821 ;;  prec            1   57[BANK0 ] unsigned char 
  5822 ;; Return value:  Size  Location     Type
  5823 ;;                  3   48[BANK0 ] unsigned char 
  5824 ;; Registers used:
  5825 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5826 ;; Tracked objects:
  5827 ;;		On entry : 0/0
  5828 ;;		On exit  : 0/0
  5829 ;;		Unchanged: 0/0
  5830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5831 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5832 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5834 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5835 ;;Total ram usage:       10 bytes
  5836 ;; Hardware stack levels used:    1
  5837 ;; Hardware stack levels required when called:    8
  5838 ;; This function calls:
  5839 ;;		___awdiv
  5840 ;;		___awmod
  5841 ;;		___ftmul
  5842 ;;		___wmul
  5843 ;; This function is called by:
  5844 ;;		_printf
  5845 ;; This function uses a non-reentrant model
  5846 ;;
  5847                           
  5848                           	psect	text8
  5849  0023AA                     __ptext8:
  5850                           	opt stack 0
  5851  0023AA                     _fround:
  5852                           	opt stack 20
  5853                           
  5854                           ; BSR set to: 0
  5855                           ;incstack = 0
  5856                           ;fround@prec stored from wreg
  5857  0023AA  0100               	movlb	0	; () banked
  5858  0023AC  6FB9               	movwf	fround@prec& (0+255),b
  5859                           
  5860                           ;doprnt.c: 413: if(prec>=110)
  5861  0023AE  0E6D               	movlw	109
  5862  0023B0  0100               	movlb	0	; () banked
  5863  0023B2  65B9               	cpfsgt	fround@prec& (0+255),b
  5864  0023B4  D0BA               	goto	l4832
  5865                           
  5866                           ; BSR set to: 0
  5867                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5868  0023B6  0E00               	movlw	0
  5869  0023B8  0100               	movlb	0	; () banked
  5870  0023BA  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5871  0023BC  0E03               	movlw	3
  5872  0023BE  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5873  0023C0  0E00               	movlw	0
  5874  0023C2  0100               	movlb	0	; () banked
  5875  0023C4  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5876  0023C6  0E0A               	movlw	10
  5877  0023C8  6F88               	movwf	___awdiv@divisor& (0+255),b
  5878  0023CA  0E00               	movlw	0
  5879  0023CC  0100               	movlb	0	; () banked
  5880  0023CE  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5881  0023D0  0E64               	movlw	100
  5882  0023D2  6F82               	movwf	___awmod@divisor& (0+255),b
  5883  0023D4  C0B9  F080         	movff	fround@prec,___awmod@dividend
  5884  0023D8  0100               	movlb	0	; () banked
  5885  0023DA  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5886  0023DC  EC8C  F023         	call	___awmod	;wreg free
  5887  0023E0  C080  F086         	movff	?___awmod,___awdiv@dividend
  5888  0023E4  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  5889  0023E8  EC78  F022         	call	___awdiv	;wreg free
  5890  0023EC  0E09               	movlw	9
  5891  0023EE  0100               	movlb	0	; () banked
  5892  0023F0  2586               	addwf	?___awdiv& (0+255),w,b
  5893  0023F2  0100               	movlb	0	; () banked
  5894  0023F4  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5895  0023F6  0E00               	movlw	0
  5896  0023F8  0100               	movlb	0	; () banked
  5897  0023FA  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5898  0023FC  0100               	movlb	0	; () banked
  5899  0023FE  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5900  002400  EC52  F028         	call	___wmul	;wreg free
  5901  002404  0E59               	movlw	low __npowers_
  5902  002406  0100               	movlb	0	; () banked
  5903  002408  258E               	addwf	?___wmul& (0+255),w,b
  5904  00240A  6EF6               	movwf	tblptrl,c
  5905  00240C  0EFE               	movlw	high __npowers_
  5906  00240E  0100               	movlb	0	; () banked
  5907  002410  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5908  002412  6EF7               	movwf	tblptrh,c
  5909  002414                     	if	0	;There are less than 3 active tblptr bytes
  5910  002414                     	endif
  5911  002414  0009               	tblrd		*+
  5912  002416  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5913  00241A  0009               	tblrd		*+
  5914  00241C  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5915  002420  000A               	tblrd		*-
  5916  002422  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5917  002426  0E00               	movlw	0
  5918  002428  0100               	movlb	0	; () banked
  5919  00242A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5920  00242C  0E64               	movlw	100
  5921  00242E  6F88               	movwf	___awdiv@divisor& (0+255),b
  5922  002430  C0B9  F086         	movff	fround@prec,___awdiv@dividend
  5923  002434  0100               	movlb	0	; () banked
  5924  002436  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  5925  002438  EC78  F022         	call	___awdiv	;wreg free
  5926  00243C  0E12               	movlw	18
  5927  00243E  0100               	movlb	0	; () banked
  5928  002440  2586               	addwf	?___awdiv& (0+255),w,b
  5929  002442  0100               	movlb	0	; () banked
  5930  002444  6F8E               	movwf	___wmul@multiplier& (0+255),b
  5931  002446  0E00               	movlw	0
  5932  002448  0100               	movlb	0	; () banked
  5933  00244A  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  5934  00244C  0100               	movlb	0	; () banked
  5935  00244E  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5936  002450  0E00               	movlw	0
  5937  002452  0100               	movlb	0	; () banked
  5938  002454  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5939  002456  0E03               	movlw	3
  5940  002458  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5941  00245A  EC52  F028         	call	___wmul	;wreg free
  5942  00245E  0E59               	movlw	low __npowers_
  5943  002460  0100               	movlb	0	; () banked
  5944  002462  258E               	addwf	?___wmul& (0+255),w,b
  5945  002464  6EF6               	movwf	tblptrl,c
  5946  002466  0EFE               	movlw	high __npowers_
  5947  002468  0100               	movlb	0	; () banked
  5948  00246A  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5949  00246C  6EF7               	movwf	tblptrh,c
  5950  00246E                     	if	0	;There are less than 3 active tblptr bytes
  5951  00246E                     	endif
  5952  00246E  0009               	tblrd		*+
  5953  002470  CFF5 F0A1          	movff	tablat,___ftmul@f1
  5954  002474  0009               	tblrd		*+
  5955  002476  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  5956  00247A  000A               	tblrd		*-
  5957  00247C  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  5958  002480  EC72  F019         	call	___ftmul	;wreg free
  5959  002484  C0A1  F0B6         	movff	?___ftmul,_fround$1330
  5960  002488  C0A2  F0B7         	movff	?___ftmul+1,_fround$1330+1
  5961  00248C  C0A3  F0B8         	movff	?___ftmul+2,_fround$1330+2
  5962                           
  5963                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5964  002490  0E00               	movlw	0
  5965  002492  0100               	movlb	0	; () banked
  5966  002494  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5967  002496  0E03               	movlw	3
  5968  002498  6F90               	movwf	___wmul@multiplicand& (0+255),b
  5969  00249A  0E00               	movlw	0
  5970  00249C  0100               	movlb	0	; () banked
  5971  00249E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5972  0024A0  0E0A               	movlw	10
  5973  0024A2  6F82               	movwf	___awmod@divisor& (0+255),b
  5974  0024A4  C0B9  F080         	movff	fround@prec,___awmod@dividend
  5975  0024A8  0100               	movlb	0	; () banked
  5976  0024AA  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5977  0024AC  EC8C  F023         	call	___awmod	;wreg free
  5978  0024B0  C080  F08E         	movff	?___awmod,___wmul@multiplier
  5979  0024B4  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  5980  0024B8  EC52  F028         	call	___wmul	;wreg free
  5981  0024BC  0E59               	movlw	low __npowers_
  5982  0024BE  0100               	movlb	0	; () banked
  5983  0024C0  258E               	addwf	?___wmul& (0+255),w,b
  5984  0024C2  6EF6               	movwf	tblptrl,c
  5985  0024C4  0EFE               	movlw	high __npowers_
  5986  0024C6  0100               	movlb	0	; () banked
  5987  0024C8  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  5988  0024CA  6EF7               	movwf	tblptrh,c
  5989  0024CC                     	if	0	;There are less than 3 active tblptr bytes
  5990  0024CC                     	endif
  5991  0024CC  0009               	tblrd		*+
  5992  0024CE  CFF5 F0A4          	movff	tablat,___ftmul@f2
  5993  0024D2  0009               	tblrd		*+
  5994  0024D4  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  5995  0024D8  000A               	tblrd		*-
  5996  0024DA  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  5997  0024DE  C0B6  F0A1         	movff	_fround$1330,___ftmul@f1
  5998  0024E2  C0B7  F0A2         	movff	_fround$1330+1,___ftmul@f1+1
  5999  0024E6  C0B8  F0A3         	movff	_fround$1330+2,___ftmul@f1+2
  6000  0024EA  EC72  F019         	call	___ftmul	;wreg free
  6001  0024EE  C0A1  F0B3         	movff	?___ftmul,_fround$1331
  6002  0024F2  C0A2  F0B4         	movff	?___ftmul+1,_fround$1331+1
  6003  0024F6  C0A3  F0B5         	movff	?___ftmul+2,_fround$1331+2
  6004                           
  6005                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6006  0024FA  C0B3  F0A1         	movff	_fround$1331,___ftmul@f1
  6007  0024FE  C0B4  F0A2         	movff	_fround$1331+1,___ftmul@f1+1
  6008  002502  C0B5  F0A3         	movff	_fround$1331+2,___ftmul@f1+2
  6009  002506  0E00               	movlw	0
  6010  002508  0100               	movlb	0	; () banked
  6011  00250A  6FA4               	movwf	___ftmul@f2& (0+255),b
  6012  00250C  0E00               	movlw	0
  6013  00250E  0100               	movlb	0	; () banked
  6014  002510  6FA5               	movwf	(___ftmul@f2+1)& (0+255),b
  6015  002512  0E3F               	movlw	63
  6016  002514  0100               	movlb	0	; () banked
  6017  002516  6FA6               	movwf	(___ftmul@f2+2)& (0+255),b
  6018  002518  EC72  F019         	call	___ftmul	;wreg free
  6019  00251C  C0A1  F0B0         	movff	?___ftmul,?_fround
  6020  002520  C0A2  F0B1         	movff	?___ftmul+1,?_fround+1
  6021  002524  C0A3  F0B2         	movff	?___ftmul+2,?_fround+2
  6022  002528  0012               	return	
  6023  00252A                     l4832:
  6024                           
  6025                           ;doprnt.c: 415: else if(prec > 10)
  6026  00252A  0E0A               	movlw	10
  6027  00252C  0100               	movlb	0	; () banked
  6028  00252E  65B9               	cpfsgt	fround@prec& (0+255),b
  6029  002530  D06E               	goto	l4840
  6030                           
  6031                           ; BSR set to: 0
  6032                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6033  002532  0E00               	movlw	0
  6034  002534  0100               	movlb	0	; () banked
  6035  002536  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6036  002538  0E03               	movlw	3
  6037  00253A  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6038  00253C  0E00               	movlw	0
  6039  00253E  0100               	movlb	0	; () banked
  6040  002540  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6041  002542  0E0A               	movlw	10
  6042  002544  6F82               	movwf	___awmod@divisor& (0+255),b
  6043  002546  C0B9  F080         	movff	fround@prec,___awmod@dividend
  6044  00254A  0100               	movlb	0	; () banked
  6045  00254C  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  6046  00254E  EC8C  F023         	call	___awmod	;wreg free
  6047  002552  C080  F08E         	movff	?___awmod,___wmul@multiplier
  6048  002556  C081  F08F         	movff	?___awmod+1,___wmul@multiplier+1
  6049  00255A  EC52  F028         	call	___wmul	;wreg free
  6050  00255E  0E59               	movlw	low __npowers_
  6051  002560  0100               	movlb	0	; () banked
  6052  002562  258E               	addwf	?___wmul& (0+255),w,b
  6053  002564  6EF6               	movwf	tblptrl,c
  6054  002566  0EFE               	movlw	high __npowers_
  6055  002568  0100               	movlb	0	; () banked
  6056  00256A  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6057  00256C  6EF7               	movwf	tblptrh,c
  6058  00256E                     	if	0	;There are less than 3 active tblptr bytes
  6059  00256E                     	endif
  6060  00256E  0009               	tblrd		*+
  6061  002570  CFF5 F0A4          	movff	tablat,___ftmul@f2
  6062  002574  0009               	tblrd		*+
  6063  002576  CFF5 F0A5          	movff	tablat,___ftmul@f2+1
  6064  00257A  000A               	tblrd		*-
  6065  00257C  CFF5 F0A6          	movff	tablat,___ftmul@f2+2
  6066  002580  0E00               	movlw	0
  6067  002582  0100               	movlb	0	; () banked
  6068  002584  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6069  002586  0E0A               	movlw	10
  6070  002588  6F88               	movwf	___awdiv@divisor& (0+255),b
  6071  00258A  C0B9  F086         	movff	fround@prec,___awdiv@dividend
  6072  00258E  0100               	movlb	0	; () banked
  6073  002590  6B87               	clrf	(___awdiv@dividend+1)& (0+255),b
  6074  002592  EC78  F022         	call	___awdiv	;wreg free
  6075  002596  0E09               	movlw	9
  6076  002598  0100               	movlb	0	; () banked
  6077  00259A  2586               	addwf	?___awdiv& (0+255),w,b
  6078  00259C  0100               	movlb	0	; () banked
  6079  00259E  6F8E               	movwf	___wmul@multiplier& (0+255),b
  6080  0025A0  0E00               	movlw	0
  6081  0025A2  0100               	movlb	0	; () banked
  6082  0025A4  2187               	addwfc	(?___awdiv+1)& (0+255),w,b
  6083  0025A6  0100               	movlb	0	; () banked
  6084  0025A8  6F8F               	movwf	(___wmul@multiplier+1)& (0+255),b
  6085  0025AA  0E00               	movlw	0
  6086  0025AC  0100               	movlb	0	; () banked
  6087  0025AE  6F91               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6088  0025B0  0E03               	movlw	3
  6089  0025B2  6F90               	movwf	___wmul@multiplicand& (0+255),b
  6090  0025B4  EC52  F028         	call	___wmul	;wreg free
  6091  0025B8  0E59               	movlw	low __npowers_
  6092  0025BA  0100               	movlb	0	; () banked
  6093  0025BC  258E               	addwf	?___wmul& (0+255),w,b
  6094  0025BE  6EF6               	movwf	tblptrl,c
  6095  0025C0  0EFE               	movlw	high __npowers_
  6096  0025C2  0100               	movlb	0	; () banked
  6097  0025C4  218F               	addwfc	(?___wmul+1)& (0+255),w,b
  6098  0025C6  6EF7               	movwf	tblptrh,c
  6099  0025C8                     	if	0	;There are less than 3 active tblptr bytes
  6100  0025C8                     	endif
  6101  0025C8  0009               	tblrd		*+
  6102  0025CA  CFF5 F0A1          	movff	tablat,___ftmul@f1
  6103  0025CE  0009               	tblrd		*+
  6104  0025D0  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  6105  0025D4  000A               	tblrd		*-
  6106  0025D6  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  6107  0025DA  EC72  F019         	call	___ftmul	;wreg free
  6108  0025DE  C0A1  F0B6         	movff	?___ftmul,_fround$1330
  6109  0025E2  C0A2  F0B7         	movff	?___ftmul+1,_fround$1330+1
  6110  0025E6  C0A3  F0B8         	movff	?___ftmul+2,_fround$1330+2
  6111                           
  6112                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6113  0025EA  C0B6  F0A1         	movff	_fround$1330,___ftmul@f1
  6114  0025EE  C0B7  F0A2         	movff	_fround$1330+1,___ftmul@f1+1
  6115  0025F2  C0B8  F0A3         	movff	_fround$1330+2,___ftmul@f1+2
  6116  0025F6  0E00               	movlw	0
  6117  0025F8  0100               	movlb	0	; () banked
  6118  0025FA  6FA4               	movwf	___ftmul@f2& (0+255),b
  6119  0025FC  0E00               	movlw	0
  6120  0025FE  0100               	movlb	0	; () banked
  6121  002600  6FA5               	movwf	(___ftmul@f2+1)& (0+255),b
  6122  002602  0E3F               	movlw	63
  6123  002604  0100               	movlb	0	; () banked
  6124  002606  6FA6               	movwf	(___ftmul@f2+2)& (0+255),b
  6125  002608  EC72  F019         	call	___ftmul	;wreg free
  6126  00260C  D787               	goto	L6
  6127  00260E                     l4840:
  6128                           
  6129                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6130  00260E  0100               	movlb	0	; () banked
  6131  002610  51B9               	movf	fround@prec& (0+255),w,b
  6132  002612  0D03               	mullw	3
  6133  002614  0E59               	movlw	low __npowers_
  6134  002616  24F3               	addwf	prodl,w,c
  6135  002618  6EF6               	movwf	tblptrl,c
  6136  00261A  0EFE               	movlw	high __npowers_
  6137  00261C  20F4               	addwfc	prodh,w,c
  6138  00261E  6EF7               	movwf	tblptrh,c
  6139  002620                     	if	0	;There are less than 3 active tblptr bytes
  6140  002620                     	endif
  6141  002620  0009               	tblrd		*+
  6142  002622  CFF5 F0A1          	movff	tablat,___ftmul@f1
  6143  002626  0009               	tblrd		*+
  6144  002628  CFF5 F0A2          	movff	tablat,___ftmul@f1+1
  6145  00262C  000A               	tblrd		*-
  6146  00262E  CFF5 F0A3          	movff	tablat,___ftmul@f1+2
  6147  002632  0E00               	movlw	0
  6148  002634  0100               	movlb	0	; () banked
  6149  002636  6FA4               	movwf	___ftmul@f2& (0+255),b
  6150  002638  0E00               	movlw	0
  6151  00263A  0100               	movlb	0	; () banked
  6152  00263C  6FA5               	movwf	(___ftmul@f2+1)& (0+255),b
  6153  00263E  0E3F               	movlw	63
  6154  002640  0100               	movlb	0	; () banked
  6155  002642  6FA6               	movwf	(___ftmul@f2+2)& (0+255),b
  6156  002644  EC72  F019         	call	___ftmul	;wreg free
  6157  002648  C0A1  F0B0         	movff	?___ftmul,?_fround
  6158  00264C  C0A2  F0B1         	movff	?___ftmul+1,?_fround+1
  6159  002650  C0A3  F0B2         	movff	?___ftmul+2,?_fround+2
  6160  002654  0012               	return	
  6161  002656                     __end_of_fround:
  6162                           	opt stack 0
  6163                           tblptru	equ	0xFF8
  6164                           tblptrh	equ	0xFF7
  6165                           tblptrl	equ	0xFF6
  6166                           tablat	equ	0xFF5
  6167                           prodh	equ	0xFF4
  6168                           prodl	equ	0xFF3
  6169                           postinc0	equ	0xFEE
  6170                           wreg	equ	0xFE8
  6171                           postdec1	equ	0xFE5
  6172                           fsr1l	equ	0xFE1
  6173                           indf2	equ	0xFDF
  6174                           postinc2	equ	0xFDE
  6175                           postdec2	equ	0xFDD
  6176                           fsr2h	equ	0xFDA
  6177                           fsr2l	equ	0xFD9
  6178                           status	equ	0xFD8
  6179                           
  6180 ;; *************** function ___wmul *****************
  6181 ;; Defined at:
  6182 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  6183 ;; Parameters:    Size  Location     Type
  6184 ;;  multiplier      2   14[BANK0 ] unsigned int 
  6185 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  6186 ;; Auto vars:     Size  Location     Type
  6187 ;;  product         2   18[BANK0 ] unsigned int 
  6188 ;; Return value:  Size  Location     Type
  6189 ;;                  2   14[BANK0 ] unsigned int 
  6190 ;; Registers used:
  6191 ;;		wreg, status,2, status,0, prodl, prodh
  6192 ;; Tracked objects:
  6193 ;;		On entry : 0/0
  6194 ;;		On exit  : 0/0
  6195 ;;		Unchanged: 0/0
  6196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6197 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6198 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6200 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6201 ;;Total ram usage:        6 bytes
  6202 ;; Hardware stack levels used:    1
  6203 ;; Hardware stack levels required when called:    6
  6204 ;; This function calls:
  6205 ;;		Nothing
  6206 ;; This function is called by:
  6207 ;;		_fround
  6208 ;;		_scale
  6209 ;;		_printf
  6210 ;; This function uses a non-reentrant model
  6211 ;;
  6212                           
  6213                           	psect	text9
  6214  0050A4                     __ptext9:
  6215                           	opt stack 0
  6216  0050A4                     ___wmul:
  6217                           	opt stack 21
  6218                           
  6219                           ;incstack = 0
  6220  0050A4  0100               	movlb	0	; () banked
  6221  0050A6  518E               	movf	___wmul@multiplier& (0+255),w,b
  6222  0050A8  0100               	movlb	0	; () banked
  6223  0050AA  0390               	mulwf	___wmul@multiplicand& (0+255),b
  6224  0050AC  CFF3 F092          	movff	prodl,___wmul@product
  6225  0050B0  CFF4 F093          	movff	prodh,___wmul@product+1
  6226  0050B4  0100               	movlb	0	; () banked
  6227  0050B6  518E               	movf	___wmul@multiplier& (0+255),w,b
  6228  0050B8  0100               	movlb	0	; () banked
  6229  0050BA  0391               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  6230  0050BC  50F3               	movf	prodl,w,c
  6231  0050BE  0100               	movlb	0	; () banked
  6232  0050C0  2793               	addwf	(___wmul@product+1)& (0+255),f,b
  6233  0050C2  0100               	movlb	0	; () banked
  6234  0050C4  518F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  6235  0050C6  0100               	movlb	0	; () banked
  6236  0050C8  0390               	mulwf	___wmul@multiplicand& (0+255),b
  6237  0050CA  50F3               	movf	prodl,w,c
  6238  0050CC  0100               	movlb	0	; () banked
  6239  0050CE  2793               	addwf	(___wmul@product+1)& (0+255),f,b
  6240                           
  6241                           ; BSR set to: 0
  6242  0050D0  C092  F08E         	movff	___wmul@product,?___wmul
  6243  0050D4  C093  F08F         	movff	___wmul@product+1,?___wmul+1
  6244  0050D8  0012               	return	
  6245  0050DA                     __end_of___wmul:
  6246                           	opt stack 0
  6247                           tblptru	equ	0xFF8
  6248                           tblptrh	equ	0xFF7
  6249                           tblptrl	equ	0xFF6
  6250                           tablat	equ	0xFF5
  6251                           prodh	equ	0xFF4
  6252                           prodl	equ	0xFF3
  6253                           postinc0	equ	0xFEE
  6254                           wreg	equ	0xFE8
  6255                           postdec1	equ	0xFE5
  6256                           fsr1l	equ	0xFE1
  6257                           indf2	equ	0xFDF
  6258                           postinc2	equ	0xFDE
  6259                           postdec2	equ	0xFDD
  6260                           fsr2h	equ	0xFDA
  6261                           fsr2l	equ	0xFD9
  6262                           status	equ	0xFD8
  6263                           
  6264 ;; *************** function ___awmod *****************
  6265 ;; Defined at:
  6266 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  6267 ;; Parameters:    Size  Location     Type
  6268 ;;  dividend        2    0[BANK0 ] int 
  6269 ;;  divisor         2    2[BANK0 ] int 
  6270 ;; Auto vars:     Size  Location     Type
  6271 ;;  sign            1    5[BANK0 ] unsigned char 
  6272 ;;  counter         1    4[BANK0 ] unsigned char 
  6273 ;; Return value:  Size  Location     Type
  6274 ;;                  2    0[BANK0 ] int 
  6275 ;; Registers used:
  6276 ;;		wreg, status,2, status,0
  6277 ;; Tracked objects:
  6278 ;;		On entry : 0/0
  6279 ;;		On exit  : 0/0
  6280 ;;		Unchanged: 0/0
  6281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6282 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6283 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6285 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6286 ;;Total ram usage:        6 bytes
  6287 ;; Hardware stack levels used:    1
  6288 ;; Hardware stack levels required when called:    6
  6289 ;; This function calls:
  6290 ;;		Nothing
  6291 ;; This function is called by:
  6292 ;;		_fround
  6293 ;;		_scale
  6294 ;; This function uses a non-reentrant model
  6295 ;;
  6296                           
  6297                           	psect	text10
  6298  004718                     __ptext10:
  6299                           	opt stack 0
  6300  004718                     ___awmod:
  6301                           	opt stack 21
  6302                           
  6303                           ; BSR set to: 0
  6304                           ;incstack = 0
  6305  004718  0E00               	movlw	0
  6306  00471A  0100               	movlb	0	; () banked
  6307  00471C  6F85               	movwf	___awmod@sign& (0+255),b
  6308                           
  6309                           ; BSR set to: 0
  6310  00471E  0100               	movlb	0	; () banked
  6311  004720  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  6312  004722  D008               	goto	l4676
  6313                           
  6314                           ; BSR set to: 0
  6315  004724  0100               	movlb	0	; () banked
  6316  004726  6D80               	negf	___awmod@dividend& (0+255),b
  6317  004728  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  6318  00472A  B0D8               	btfsc	status,0,c
  6319  00472C  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  6320                           
  6321                           ; BSR set to: 0
  6322  00472E  0E01               	movlw	1
  6323  004730  0100               	movlb	0	; () banked
  6324  004732  6F85               	movwf	___awmod@sign& (0+255),b
  6325  004734                     l4676:
  6326                           
  6327                           ; BSR set to: 0
  6328  004734  0100               	movlb	0	; () banked
  6329  004736  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6330  004738  D005               	goto	l4680
  6331                           
  6332                           ; BSR set to: 0
  6333  00473A  0100               	movlb	0	; () banked
  6334  00473C  6D82               	negf	___awmod@divisor& (0+255),b
  6335  00473E  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  6336  004740  B0D8               	btfsc	status,0,c
  6337  004742  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  6338  004744                     l4680:
  6339                           
  6340                           ; BSR set to: 0
  6341  004744  0100               	movlb	0	; () banked
  6342  004746  5182               	movf	___awmod@divisor& (0+255),w,b
  6343  004748  0100               	movlb	0	; () banked
  6344  00474A  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6345  00474C  B4D8               	btfsc	status,2,c
  6346  00474E  D026               	goto	l4696
  6347                           
  6348                           ; BSR set to: 0
  6349  004750  0E01               	movlw	1
  6350  004752  0100               	movlb	0	; () banked
  6351  004754  6F84               	movwf	___awmod@counter& (0+255),b
  6352  004756  D006               	goto	l4686
  6353  004758                     l4684:
  6354                           
  6355                           ; BSR set to: 0
  6356  004758  0100               	movlb	0	; () banked
  6357  00475A  90D8               	bcf	status,0,c
  6358  00475C  3782               	rlcf	___awmod@divisor& (0+255),f,b
  6359  00475E  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6360  004760  0100               	movlb	0	; () banked
  6361  004762  2B84               	incf	___awmod@counter& (0+255),f,b
  6362  004764                     l4686:
  6363                           
  6364                           ; BSR set to: 0
  6365  004764  0100               	movlb	0	; () banked
  6366  004766  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6367  004768  D7F7               	goto	l4684
  6368  00476A                     l4688:
  6369                           
  6370                           ; BSR set to: 0
  6371  00476A  0100               	movlb	0	; () banked
  6372  00476C  5182               	movf	___awmod@divisor& (0+255),w,b
  6373  00476E  0100               	movlb	0	; () banked
  6374  004770  5D80               	subwf	___awmod@dividend& (0+255),w,b
  6375  004772  0100               	movlb	0	; () banked
  6376  004774  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  6377  004776  0100               	movlb	0	; () banked
  6378  004778  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6379  00477A  A0D8               	btfss	status,0,c
  6380  00477C  D008               	goto	l4692
  6381                           
  6382                           ; BSR set to: 0
  6383  00477E  0100               	movlb	0	; () banked
  6384  004780  5182               	movf	___awmod@divisor& (0+255),w,b
  6385  004782  0100               	movlb	0	; () banked
  6386  004784  5F80               	subwf	___awmod@dividend& (0+255),f,b
  6387  004786  0100               	movlb	0	; () banked
  6388  004788  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  6389  00478A  0100               	movlb	0	; () banked
  6390  00478C  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6391  00478E                     l4692:
  6392                           
  6393                           ; BSR set to: 0
  6394  00478E  0100               	movlb	0	; () banked
  6395  004790  90D8               	bcf	status,0,c
  6396  004792  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6397  004794  3382               	rrcf	___awmod@divisor& (0+255),f,b
  6398                           
  6399                           ; BSR set to: 0
  6400  004796  0100               	movlb	0	; () banked
  6401  004798  2F84               	decfsz	___awmod@counter& (0+255),f,b
  6402  00479A  D7E7               	goto	l4688
  6403  00479C                     l4696:
  6404                           
  6405                           ; BSR set to: 0
  6406  00479C  0100               	movlb	0	; () banked
  6407  00479E  5185               	movf	___awmod@sign& (0+255),w,b
  6408  0047A0  0100               	movlb	0	; () banked
  6409  0047A2  B4D8               	btfsc	status,2,c
  6410  0047A4  D005               	goto	l4700
  6411                           
  6412                           ; BSR set to: 0
  6413  0047A6  0100               	movlb	0	; () banked
  6414  0047A8  6D80               	negf	___awmod@dividend& (0+255),b
  6415  0047AA  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  6416  0047AC  B0D8               	btfsc	status,0,c
  6417  0047AE  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  6418  0047B0                     l4700:
  6419                           
  6420                           ; BSR set to: 0
  6421  0047B0  C080  F080         	movff	___awmod@dividend,?___awmod
  6422  0047B4  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  6423  0047B8  0012               	return	
  6424  0047BA                     __end_of___awmod:
  6425                           	opt stack 0
  6426                           tblptru	equ	0xFF8
  6427                           tblptrh	equ	0xFF7
  6428                           tblptrl	equ	0xFF6
  6429                           tablat	equ	0xFF5
  6430                           prodh	equ	0xFF4
  6431                           prodl	equ	0xFF3
  6432                           postinc0	equ	0xFEE
  6433                           wreg	equ	0xFE8
  6434                           postdec1	equ	0xFE5
  6435                           fsr1l	equ	0xFE1
  6436                           indf2	equ	0xFDF
  6437                           postinc2	equ	0xFDE
  6438                           postdec2	equ	0xFDD
  6439                           fsr2h	equ	0xFDA
  6440                           fsr2l	equ	0xFD9
  6441                           status	equ	0xFD8
  6442                           
  6443 ;; *************** function ___awdiv *****************
  6444 ;; Defined at:
  6445 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  6446 ;; Parameters:    Size  Location     Type
  6447 ;;  dividend        2    6[BANK0 ] int 
  6448 ;;  divisor         2    8[BANK0 ] int 
  6449 ;; Auto vars:     Size  Location     Type
  6450 ;;  quotient        2   12[BANK0 ] int 
  6451 ;;  sign            1   11[BANK0 ] unsigned char 
  6452 ;;  counter         1   10[BANK0 ] unsigned char 
  6453 ;; Return value:  Size  Location     Type
  6454 ;;                  2    6[BANK0 ] int 
  6455 ;; Registers used:
  6456 ;;		wreg, status,2, status,0
  6457 ;; Tracked objects:
  6458 ;;		On entry : 0/0
  6459 ;;		On exit  : 0/0
  6460 ;;		Unchanged: 0/0
  6461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6462 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6463 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6465 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6466 ;;Total ram usage:        8 bytes
  6467 ;; Hardware stack levels used:    1
  6468 ;; Hardware stack levels required when called:    6
  6469 ;; This function calls:
  6470 ;;		Nothing
  6471 ;; This function is called by:
  6472 ;;		_fround
  6473 ;;		_scale
  6474 ;;		_printf
  6475 ;; This function uses a non-reentrant model
  6476 ;;
  6477                           
  6478                           	psect	text11
  6479  0044F0                     __ptext11:
  6480                           	opt stack 0
  6481  0044F0                     ___awdiv:
  6482                           	opt stack 21
  6483                           
  6484                           ; BSR set to: 0
  6485                           ;incstack = 0
  6486  0044F0  0E00               	movlw	0
  6487  0044F2  0100               	movlb	0	; () banked
  6488  0044F4  6F8B               	movwf	___awdiv@sign& (0+255),b
  6489                           
  6490                           ; BSR set to: 0
  6491  0044F6  0100               	movlb	0	; () banked
  6492  0044F8  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6493  0044FA  D008               	goto	l4632
  6494                           
  6495                           ; BSR set to: 0
  6496  0044FC  0100               	movlb	0	; () banked
  6497  0044FE  6D88               	negf	___awdiv@divisor& (0+255),b
  6498  004500  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6499  004502  B0D8               	btfsc	status,0,c
  6500  004504  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6501                           
  6502                           ; BSR set to: 0
  6503  004506  0E01               	movlw	1
  6504  004508  0100               	movlb	0	; () banked
  6505  00450A  6F8B               	movwf	___awdiv@sign& (0+255),b
  6506  00450C                     l4632:
  6507                           
  6508                           ; BSR set to: 0
  6509  00450C  0100               	movlb	0	; () banked
  6510  00450E  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6511  004510  D008               	goto	l4638
  6512                           
  6513                           ; BSR set to: 0
  6514  004512  0100               	movlb	0	; () banked
  6515  004514  6D86               	negf	___awdiv@dividend& (0+255),b
  6516  004516  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6517  004518  B0D8               	btfsc	status,0,c
  6518  00451A  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6519                           
  6520                           ; BSR set to: 0
  6521  00451C  0E01               	movlw	1
  6522  00451E  0100               	movlb	0	; () banked
  6523  004520  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  6524  004522                     l4638:
  6525                           
  6526                           ; BSR set to: 0
  6527  004522  0E00               	movlw	0
  6528  004524  0100               	movlb	0	; () banked
  6529  004526  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  6530  004528  0E00               	movlw	0
  6531  00452A  6F8C               	movwf	___awdiv@quotient& (0+255),b
  6532                           
  6533                           ; BSR set to: 0
  6534  00452C  0100               	movlb	0	; () banked
  6535  00452E  5188               	movf	___awdiv@divisor& (0+255),w,b
  6536  004530  0100               	movlb	0	; () banked
  6537  004532  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6538  004534  B4D8               	btfsc	status,2,c
  6539  004536  D02C               	goto	l4660
  6540                           
  6541                           ; BSR set to: 0
  6542  004538  0E01               	movlw	1
  6543  00453A  0100               	movlb	0	; () banked
  6544  00453C  6F8A               	movwf	___awdiv@counter& (0+255),b
  6545  00453E  D006               	goto	l4646
  6546  004540                     l4644:
  6547                           
  6548                           ; BSR set to: 0
  6549  004540  0100               	movlb	0	; () banked
  6550  004542  90D8               	bcf	status,0,c
  6551  004544  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  6552  004546  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6553  004548  0100               	movlb	0	; () banked
  6554  00454A  2B8A               	incf	___awdiv@counter& (0+255),f,b
  6555  00454C                     l4646:
  6556                           
  6557                           ; BSR set to: 0
  6558  00454C  0100               	movlb	0	; () banked
  6559  00454E  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6560  004550  D7F7               	goto	l4644
  6561  004552                     l4648:
  6562                           
  6563                           ; BSR set to: 0
  6564  004552  0100               	movlb	0	; () banked
  6565  004554  90D8               	bcf	status,0,c
  6566  004556  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  6567  004558  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6568                           
  6569                           ; BSR set to: 0
  6570  00455A  0100               	movlb	0	; () banked
  6571  00455C  5188               	movf	___awdiv@divisor& (0+255),w,b
  6572  00455E  0100               	movlb	0	; () banked
  6573  004560  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  6574  004562  0100               	movlb	0	; () banked
  6575  004564  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6576  004566  0100               	movlb	0	; () banked
  6577  004568  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6578  00456A  A0D8               	btfss	status,0,c
  6579  00456C  D00A               	goto	l4656
  6580                           
  6581                           ; BSR set to: 0
  6582  00456E  0100               	movlb	0	; () banked
  6583  004570  5188               	movf	___awdiv@divisor& (0+255),w,b
  6584  004572  0100               	movlb	0	; () banked
  6585  004574  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  6586  004576  0100               	movlb	0	; () banked
  6587  004578  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6588  00457A  0100               	movlb	0	; () banked
  6589  00457C  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6590                           
  6591                           ; BSR set to: 0
  6592  00457E  0100               	movlb	0	; () banked
  6593  004580  818C               	bsf	___awdiv@quotient& (0+255),0,b
  6594  004582                     l4656:
  6595                           
  6596                           ; BSR set to: 0
  6597  004582  0100               	movlb	0	; () banked
  6598  004584  90D8               	bcf	status,0,c
  6599  004586  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6600  004588  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  6601                           
  6602                           ; BSR set to: 0
  6603  00458A  0100               	movlb	0	; () banked
  6604  00458C  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  6605  00458E  D7E1               	goto	l4648
  6606  004590                     l4660:
  6607                           
  6608                           ; BSR set to: 0
  6609  004590  0100               	movlb	0	; () banked
  6610  004592  518B               	movf	___awdiv@sign& (0+255),w,b
  6611  004594  0100               	movlb	0	; () banked
  6612  004596  B4D8               	btfsc	status,2,c
  6613  004598  D005               	goto	l4664
  6614                           
  6615                           ; BSR set to: 0
  6616  00459A  0100               	movlb	0	; () banked
  6617  00459C  6D8C               	negf	___awdiv@quotient& (0+255),b
  6618  00459E  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6619  0045A0  B0D8               	btfsc	status,0,c
  6620  0045A2  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  6621  0045A4                     l4664:
  6622                           
  6623                           ; BSR set to: 0
  6624  0045A4  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  6625  0045A8  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  6626  0045AC  0012               	return	
  6627  0045AE                     __end_of___awdiv:
  6628                           	opt stack 0
  6629                           tblptru	equ	0xFF8
  6630                           tblptrh	equ	0xFF7
  6631                           tblptrl	equ	0xFF6
  6632                           tablat	equ	0xFF5
  6633                           prodh	equ	0xFF4
  6634                           prodl	equ	0xFF3
  6635                           postinc0	equ	0xFEE
  6636                           wreg	equ	0xFE8
  6637                           postdec1	equ	0xFE5
  6638                           fsr1l	equ	0xFE1
  6639                           indf2	equ	0xFDF
  6640                           postinc2	equ	0xFDE
  6641                           postdec2	equ	0xFDD
  6642                           fsr2h	equ	0xFDA
  6643                           fsr2l	equ	0xFD9
  6644                           status	equ	0xFD8
  6645                           
  6646 ;; *************** function __tdiv_to_l_ *****************
  6647 ;; Defined at:
  6648 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  6649 ;; Parameters:    Size  Location     Type
  6650 ;;  f1              3    0[BANK0 ] float 
  6651 ;;  f2              3    3[BANK0 ] float 
  6652 ;; Auto vars:     Size  Location     Type
  6653 ;;  quot            4    9[BANK0 ] unsigned long 
  6654 ;;  exp1            1   14[BANK0 ] unsigned char 
  6655 ;;  cntr            1   13[BANK0 ] unsigned char 
  6656 ;; Return value:  Size  Location     Type
  6657 ;;                  4    0[BANK0 ] unsigned long 
  6658 ;; Registers used:
  6659 ;;		wreg, status,2, status,0
  6660 ;; Tracked objects:
  6661 ;;		On entry : 0/0
  6662 ;;		On exit  : 0/0
  6663 ;;		Unchanged: 0/0
  6664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6665 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6666 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6667 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6668 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6669 ;;Total ram usage:       15 bytes
  6670 ;; Hardware stack levels used:    1
  6671 ;; Hardware stack levels required when called:    6
  6672 ;; This function calls:
  6673 ;;		Nothing
  6674 ;; This function is called by:
  6675 ;;		_printf
  6676 ;; This function uses a non-reentrant model
  6677 ;;
  6678                           
  6679                           	psect	text12
  6680  002E58                     __ptext12:
  6681                           	opt stack 0
  6682  002E58                     __tdiv_to_l_:
  6683                           	opt stack 22
  6684                           
  6685                           ; BSR set to: 0
  6686                           ;incstack = 0
  6687  002E58  C082  F086         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6688  002E5C  0100               	movlb	0	; () banked
  6689  002E5E  6B87               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  6690  002E60  6B88               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  6691  002E62  0100               	movlb	0	; () banked
  6692  002E64  3581               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  6693  002E66  0100               	movlb	0	; () banked
  6694  002E68  3786               	rlcf	??__tdiv_to_l_& (0+255),f,b
  6695  002E6A  E301               	bnc	u4801
  6696  002E6C  8187               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  6697  002E6E                     u4801:
  6698  002E6E  0100               	movlb	0	; () banked
  6699  002E70  5186               	movf	??__tdiv_to_l_& (0+255),w,b
  6700  002E72  0100               	movlb	0	; () banked
  6701  002E74  6F8E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  6702  002E76  0100               	movlb	0	; () banked
  6703  002E78  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6704  002E7A  A4D8               	btfss	status,2,c
  6705  002E7C  D00A               	goto	l4900
  6706                           
  6707                           ; BSR set to: 0
  6708  002E7E  0E00               	movlw	0
  6709  002E80  0100               	movlb	0	; () banked
  6710  002E82  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  6711  002E84  0E00               	movlw	0
  6712  002E86  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6713  002E88  0E00               	movlw	0
  6714  002E8A  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6715  002E8C  0E00               	movlw	0
  6716  002E8E  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6717                           
  6718                           ; BSR set to: 0
  6719  002E90  0012               	return	
  6720  002E92                     l4900:
  6721                           
  6722                           ; BSR set to: 0
  6723  002E92  C085  F086         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6724  002E96  0100               	movlb	0	; () banked
  6725  002E98  6B87               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  6726  002E9A  6B88               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  6727  002E9C  0100               	movlb	0	; () banked
  6728  002E9E  3584               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6729  002EA0  0100               	movlb	0	; () banked
  6730  002EA2  3786               	rlcf	??__tdiv_to_l_& (0+255),f,b
  6731  002EA4  E301               	bnc	u4821
  6732  002EA6  8187               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  6733  002EA8                     u4821:
  6734  002EA8  0100               	movlb	0	; () banked
  6735  002EAA  5186               	movf	??__tdiv_to_l_& (0+255),w,b
  6736  002EAC  0100               	movlb	0	; () banked
  6737  002EAE  6F8D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  6738  002EB0  0100               	movlb	0	; () banked
  6739  002EB2  518D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  6740  002EB4  A4D8               	btfss	status,2,c
  6741  002EB6  D00A               	goto	l4906
  6742                           
  6743                           ; BSR set to: 0
  6744  002EB8  0E00               	movlw	0
  6745  002EBA  0100               	movlb	0	; () banked
  6746  002EBC  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  6747  002EBE  0E00               	movlw	0
  6748  002EC0  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6749  002EC2  0E00               	movlw	0
  6750  002EC4  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6751  002EC6  0E00               	movlw	0
  6752  002EC8  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6753                           
  6754                           ; BSR set to: 0
  6755  002ECA  0012               	return	
  6756  002ECC                     l4906:
  6757                           
  6758                           ; BSR set to: 0
  6759  002ECC  0100               	movlb	0	; () banked
  6760  002ECE  8F81               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  6761                           
  6762                           ; BSR set to: 0
  6763  002ED0  0EFF               	movlw	255
  6764  002ED2  0100               	movlb	0	; () banked
  6765  002ED4  1780               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  6766  002ED6  0EFF               	movlw	255
  6767  002ED8  0100               	movlb	0	; () banked
  6768  002EDA  1781               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6769  002EDC  0E00               	movlw	0
  6770  002EDE  0100               	movlb	0	; () banked
  6771  002EE0  1782               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6772  002EE2  0100               	movlb	0	; () banked
  6773  002EE4  8F84               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  6774                           
  6775                           ; BSR set to: 0
  6776  002EE6  0EFF               	movlw	255
  6777  002EE8  0100               	movlb	0	; () banked
  6778  002EEA  1783               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  6779  002EEC  0EFF               	movlw	255
  6780  002EEE  0100               	movlb	0	; () banked
  6781  002EF0  1784               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  6782  002EF2  0E00               	movlw	0
  6783  002EF4  0100               	movlb	0	; () banked
  6784  002EF6  1785               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  6785                           
  6786                           ; BSR set to: 0
  6787  002EF8  0E00               	movlw	0
  6788  002EFA  0100               	movlb	0	; () banked
  6789  002EFC  6F89               	movwf	__tdiv_to_l_@quot& (0+255),b
  6790  002EFE  0E00               	movlw	0
  6791  002F00  6F8A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  6792  002F02  0E00               	movlw	0
  6793  002F04  6F8B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  6794  002F06  0E00               	movlw	0
  6795  002F08  6F8C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  6796                           
  6797                           ; BSR set to: 0
  6798  002F0A  0E7F               	movlw	127
  6799  002F0C  0100               	movlb	0	; () banked
  6800  002F0E  5F8E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  6801                           
  6802                           ; BSR set to: 0
  6803  002F10  0100               	movlb	0	; () banked
  6804  002F12  518D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  6805  002F14  0F98               	addlw	152
  6806  002F16  0100               	movlb	0	; () banked
  6807  002F18  5F8E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  6808                           
  6809                           ; BSR set to: 0
  6810  002F1A  0E18               	movlw	24
  6811  002F1C  0100               	movlb	0	; () banked
  6812  002F1E  6F8D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  6813  002F20                     l1088:
  6814                           
  6815                           ; BSR set to: 0
  6816  002F20  0100               	movlb	0	; () banked
  6817  002F22  90D8               	bcf	status,0,c
  6818  002F24  3789               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  6819  002F26  378A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6820  002F28  378B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6821  002F2A  378C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6822                           
  6823                           ; BSR set to: 0
  6824  002F2C  0100               	movlb	0	; () banked
  6825  002F2E  5183               	movf	__tdiv_to_l_@f2& (0+255),w,b
  6826  002F30  0100               	movlb	0	; () banked
  6827  002F32  5D80               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  6828  002F34  0100               	movlb	0	; () banked
  6829  002F36  5184               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6830  002F38  0100               	movlb	0	; () banked
  6831  002F3A  5981               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  6832  002F3C  0100               	movlb	0	; () banked
  6833  002F3E  5185               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  6834  002F40  0100               	movlb	0	; () banked
  6835  002F42  5982               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  6836  002F44  A0D8               	btfss	status,0,c
  6837  002F46  D00E               	goto	l1089
  6838                           
  6839                           ; BSR set to: 0
  6840  002F48  0100               	movlb	0	; () banked
  6841  002F4A  5183               	movf	__tdiv_to_l_@f2& (0+255),w,b
  6842  002F4C  0100               	movlb	0	; () banked
  6843  002F4E  5F80               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  6844  002F50  0100               	movlb	0	; () banked
  6845  002F52  5184               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6846  002F54  0100               	movlb	0	; () banked
  6847  002F56  5B81               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6848  002F58  0100               	movlb	0	; () banked
  6849  002F5A  5185               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  6850  002F5C  0100               	movlb	0	; () banked
  6851  002F5E  5B82               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6852                           
  6853                           ; BSR set to: 0
  6854  002F60  0100               	movlb	0	; () banked
  6855  002F62  8189               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  6856  002F64                     l1089:
  6857                           
  6858                           ; BSR set to: 0
  6859  002F64  0100               	movlb	0	; () banked
  6860  002F66  90D8               	bcf	status,0,c
  6861  002F68  3780               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  6862  002F6A  3781               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6863  002F6C  3782               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6864                           
  6865                           ; BSR set to: 0
  6866  002F6E  0100               	movlb	0	; () banked
  6867  002F70  2F8D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  6868  002F72  D7D6               	goto	l1088
  6869                           
  6870                           ; BSR set to: 0
  6871                           
  6872                           ; BSR set to: 0
  6873  002F74  0100               	movlb	0	; () banked
  6874  002F76  AF8E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  6875  002F78  D01A               	goto	l4940
  6876                           
  6877                           ; BSR set to: 0
  6878  002F7A  0100               	movlb	0	; () banked
  6879  002F7C  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6880  002F7E  0A80               	xorlw	128
  6881  002F80  0F97               	addlw	151
  6882  002F82  B0D8               	btfsc	status,0,c
  6883  002F84  D00A               	goto	l4936
  6884                           
  6885                           ; BSR set to: 0
  6886  002F86  0E00               	movlw	0
  6887  002F88  0100               	movlb	0	; () banked
  6888  002F8A  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  6889  002F8C  0E00               	movlw	0
  6890  002F8E  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6891  002F90  0E00               	movlw	0
  6892  002F92  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6893  002F94  0E00               	movlw	0
  6894  002F96  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6895                           
  6896                           ; BSR set to: 0
  6897  002F98  0012               	return	
  6898  002F9A                     l4936:
  6899                           
  6900                           ; BSR set to: 0
  6901  002F9A  0100               	movlb	0	; () banked
  6902  002F9C  90D8               	bcf	status,0,c
  6903  002F9E  338C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6904  002FA0  338B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6905  002FA2  338A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6906  002FA4  3389               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  6907                           
  6908                           ; BSR set to: 0
  6909  002FA6  0100               	movlb	0	; () banked
  6910  002FA8  3F8E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  6911  002FAA  D7F7               	goto	l4936
  6912                           
  6913                           ; BSR set to: 0
  6914  002FAC  D01B               	goto	l1095
  6915  002FAE                     l4940:
  6916                           
  6917                           ; BSR set to: 0
  6918  002FAE  0E17               	movlw	23
  6919  002FB0  0100               	movlb	0	; () banked
  6920  002FB2  658E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  6921  002FB4  D012               	goto	l4948
  6922                           
  6923                           ; BSR set to: 0
  6924  002FB6  0E00               	movlw	0
  6925  002FB8  0100               	movlb	0	; () banked
  6926  002FBA  6F80               	movwf	?__tdiv_to_l_& (0+255),b
  6927  002FBC  0E00               	movlw	0
  6928  002FBE  6F81               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6929  002FC0  0E00               	movlw	0
  6930  002FC2  6F82               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6931  002FC4  0E00               	movlw	0
  6932  002FC6  6F83               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6933                           
  6934                           ; BSR set to: 0
  6935  002FC8  0012               	return	
  6936  002FCA                     l4946:
  6937                           
  6938                           ; BSR set to: 0
  6939  002FCA  0100               	movlb	0	; () banked
  6940  002FCC  90D8               	bcf	status,0,c
  6941  002FCE  3789               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  6942  002FD0  378A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6943  002FD2  378B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6944  002FD4  378C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6945  002FD6  0100               	movlb	0	; () banked
  6946  002FD8  078E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  6947  002FDA                     l4948:
  6948                           
  6949                           ; BSR set to: 0
  6950  002FDA  0100               	movlb	0	; () banked
  6951  002FDC  518E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6952  002FDE  0100               	movlb	0	; () banked
  6953  002FE0  A4D8               	btfss	status,2,c
  6954  002FE2  D7F3               	goto	l4946
  6955  002FE4                     l1095:
  6956                           
  6957                           ; BSR set to: 0
  6958  002FE4  C089  F080         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6959  002FE8  C08A  F081         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6960  002FEC  C08B  F082         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6961  002FF0  C08C  F083         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6962                           
  6963                           ; BSR set to: 0
  6964  002FF4  0012               	return		;funcret
  6965  002FF6                     __end_of__tdiv_to_l_:
  6966                           	opt stack 0
  6967                           tblptru	equ	0xFF8
  6968                           tblptrh	equ	0xFF7
  6969                           tblptrl	equ	0xFF6
  6970                           tablat	equ	0xFF5
  6971                           prodh	equ	0xFF4
  6972                           prodl	equ	0xFF3
  6973                           postinc0	equ	0xFEE
  6974                           wreg	equ	0xFE8
  6975                           postdec1	equ	0xFE5
  6976                           fsr1l	equ	0xFE1
  6977                           indf2	equ	0xFDF
  6978                           postinc2	equ	0xFDE
  6979                           postdec2	equ	0xFDD
  6980                           fsr2h	equ	0xFDA
  6981                           fsr2l	equ	0xFD9
  6982                           status	equ	0xFD8
  6983                           
  6984 ;; *************** function __div_to_l_ *****************
  6985 ;; Defined at:
  6986 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  6987 ;; Parameters:    Size  Location     Type
  6988 ;;  f1              3    0[BANK0 ] unsigned long 
  6989 ;;  f2              3    3[BANK0 ] unsigned long 
  6990 ;; Auto vars:     Size  Location     Type
  6991 ;;  quot            4    6[BANK0 ] unsigned long 
  6992 ;;  exp1            1   11[BANK0 ] unsigned char 
  6993 ;;  cntr            1   10[BANK0 ] unsigned char 
  6994 ;; Return value:  Size  Location     Type
  6995 ;;                  4    0[BANK0 ] unsigned long 
  6996 ;; Registers used:
  6997 ;;		wreg, status,2, status,0
  6998 ;; Tracked objects:
  6999 ;;		On entry : 0/0
  7000 ;;		On exit  : 0/0
  7001 ;;		Unchanged: 0/0
  7002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7003 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7004 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7006 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7007 ;;Total ram usage:       12 bytes
  7008 ;; Hardware stack levels used:    1
  7009 ;; Hardware stack levels required when called:    6
  7010 ;; This function calls:
  7011 ;;		Nothing
  7012 ;; This function is called by:
  7013 ;;		_printf
  7014 ;; This function uses a non-reentrant model
  7015 ;;
  7016                           
  7017                           	psect	text13
  7018  002FF6                     __ptext13:
  7019                           	opt stack 0
  7020  002FF6                     __div_to_l_:
  7021                           	opt stack 22
  7022                           
  7023                           ; BSR set to: 0
  7024                           ;incstack = 0
  7025  002FF6  0100               	movlb	0	; () banked
  7026  002FF8  3582               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  7027  002FFA  3583               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  7028  002FFC  0100               	movlb	0	; () banked
  7029  002FFE  6F8B               	movwf	__div_to_l_@exp1& (0+255),b
  7030  003000  0100               	movlb	0	; () banked
  7031  003002  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  7032  003004  A4D8               	btfss	status,2,c
  7033  003006  D00A               	goto	l4956
  7034                           
  7035                           ; BSR set to: 0
  7036  003008  0E00               	movlw	0
  7037  00300A  0100               	movlb	0	; () banked
  7038  00300C  6F80               	movwf	?__div_to_l_& (0+255),b
  7039  00300E  0E00               	movlw	0
  7040  003010  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  7041  003012  0E00               	movlw	0
  7042  003014  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  7043  003016  0E00               	movlw	0
  7044  003018  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  7045                           
  7046                           ; BSR set to: 0
  7047  00301A  0012               	return	
  7048  00301C                     l4956:
  7049                           
  7050                           ; BSR set to: 0
  7051  00301C  0100               	movlb	0	; () banked
  7052  00301E  3585               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  7053  003020  3586               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  7054  003022  0100               	movlb	0	; () banked
  7055  003024  6F8A               	movwf	__div_to_l_@cntr& (0+255),b
  7056  003026  0100               	movlb	0	; () banked
  7057  003028  518A               	movf	__div_to_l_@cntr& (0+255),w,b
  7058  00302A  A4D8               	btfss	status,2,c
  7059  00302C  D00A               	goto	l4962
  7060                           
  7061                           ; BSR set to: 0
  7062  00302E  0E00               	movlw	0
  7063  003030  0100               	movlb	0	; () banked
  7064  003032  6F80               	movwf	?__div_to_l_& (0+255),b
  7065  003034  0E00               	movlw	0
  7066  003036  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  7067  003038  0E00               	movlw	0
  7068  00303A  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  7069  00303C  0E00               	movlw	0
  7070  00303E  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  7071                           
  7072                           ; BSR set to: 0
  7073  003040  0012               	return	
  7074  003042                     l4962:
  7075                           
  7076                           ; BSR set to: 0
  7077  003042  0100               	movlb	0	; () banked
  7078  003044  8F82               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  7079                           
  7080                           ; BSR set to: 0
  7081  003046  0EFF               	movlw	255
  7082  003048  0100               	movlb	0	; () banked
  7083  00304A  1780               	andwf	__div_to_l_@f1& (0+255),f,b
  7084  00304C  0EFF               	movlw	255
  7085  00304E  1781               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  7086  003050  0EFF               	movlw	255
  7087  003052  1782               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  7088  003054  0E00               	movlw	0
  7089  003056  1783               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  7090                           
  7091                           ; BSR set to: 0
  7092  003058  0100               	movlb	0	; () banked
  7093  00305A  8F85               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  7094  00305C  0EFF               	movlw	255
  7095  00305E  0100               	movlb	0	; () banked
  7096  003060  1783               	andwf	__div_to_l_@f2& (0+255),f,b
  7097  003062  0EFF               	movlw	255
  7098  003064  1784               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  7099  003066  0EFF               	movlw	255
  7100  003068  1785               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  7101  00306A  0E00               	movlw	0
  7102  00306C  1786               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  7103                           
  7104                           ; BSR set to: 0
  7105  00306E  0E00               	movlw	0
  7106  003070  0100               	movlb	0	; () banked
  7107  003072  6F86               	movwf	__div_to_l_@quot& (0+255),b
  7108  003074  0E00               	movlw	0
  7109  003076  6F87               	movwf	(__div_to_l_@quot+1)& (0+255),b
  7110  003078  0E00               	movlw	0
  7111  00307A  6F88               	movwf	(__div_to_l_@quot+2)& (0+255),b
  7112  00307C  0E00               	movlw	0
  7113  00307E  6F89               	movwf	(__div_to_l_@quot+3)& (0+255),b
  7114                           
  7115                           ; BSR set to: 0
  7116  003080  0E7F               	movlw	127
  7117  003082  0100               	movlb	0	; () banked
  7118  003084  5F8B               	subwf	__div_to_l_@exp1& (0+255),f,b
  7119                           
  7120                           ; BSR set to: 0
  7121  003086  0100               	movlb	0	; () banked
  7122  003088  518A               	movf	__div_to_l_@cntr& (0+255),w,b
  7123  00308A  0FA0               	addlw	160
  7124  00308C  0100               	movlb	0	; () banked
  7125  00308E  5F8B               	subwf	__div_to_l_@exp1& (0+255),f,b
  7126                           
  7127                           ; BSR set to: 0
  7128  003090  0E20               	movlw	32
  7129  003092  0100               	movlb	0	; () banked
  7130  003094  6F8A               	movwf	__div_to_l_@cntr& (0+255),b
  7131  003096                     l4976:
  7132                           
  7133                           ; BSR set to: 0
  7134  003096  0100               	movlb	0	; () banked
  7135  003098  90D8               	bcf	status,0,c
  7136  00309A  3786               	rlcf	__div_to_l_@quot& (0+255),f,b
  7137  00309C  3787               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  7138  00309E  3788               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  7139  0030A0  3789               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  7140                           
  7141                           ; BSR set to: 0
  7142  0030A2  0100               	movlb	0	; () banked
  7143  0030A4  5183               	movf	__div_to_l_@f2& (0+255),w,b
  7144  0030A6  0100               	movlb	0	; () banked
  7145  0030A8  5D80               	subwf	__div_to_l_@f1& (0+255),w,b
  7146  0030AA  0100               	movlb	0	; () banked
  7147  0030AC  5184               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  7148  0030AE  0100               	movlb	0	; () banked
  7149  0030B0  5981               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  7150  0030B2  0100               	movlb	0	; () banked
  7151  0030B4  5185               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  7152  0030B6  0100               	movlb	0	; () banked
  7153  0030B8  5982               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  7154  0030BA  0100               	movlb	0	; () banked
  7155  0030BC  5186               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  7156  0030BE  0100               	movlb	0	; () banked
  7157  0030C0  5983               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  7158  0030C2  A0D8               	btfss	status,0,c
  7159  0030C4  D012               	goto	l4984
  7160                           
  7161                           ; BSR set to: 0
  7162  0030C6  0100               	movlb	0	; () banked
  7163  0030C8  5183               	movf	__div_to_l_@f2& (0+255),w,b
  7164  0030CA  0100               	movlb	0	; () banked
  7165  0030CC  5F80               	subwf	__div_to_l_@f1& (0+255),f,b
  7166  0030CE  0100               	movlb	0	; () banked
  7167  0030D0  5184               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  7168  0030D2  0100               	movlb	0	; () banked
  7169  0030D4  5B81               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  7170  0030D6  0100               	movlb	0	; () banked
  7171  0030D8  5185               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  7172  0030DA  0100               	movlb	0	; () banked
  7173  0030DC  5B82               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  7174  0030DE  0100               	movlb	0	; () banked
  7175  0030E0  5186               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  7176  0030E2  0100               	movlb	0	; () banked
  7177  0030E4  5B83               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  7178                           
  7179                           ; BSR set to: 0
  7180  0030E6  0100               	movlb	0	; () banked
  7181  0030E8  8186               	bsf	__div_to_l_@quot& (0+255),0,b
  7182  0030EA                     l4984:
  7183                           
  7184                           ; BSR set to: 0
  7185  0030EA  0100               	movlb	0	; () banked
  7186  0030EC  90D8               	bcf	status,0,c
  7187  0030EE  3780               	rlcf	__div_to_l_@f1& (0+255),f,b
  7188  0030F0  3781               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  7189  0030F2  3782               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  7190  0030F4  3783               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  7191                           
  7192                           ; BSR set to: 0
  7193  0030F6  0100               	movlb	0	; () banked
  7194  0030F8  2F8A               	decfsz	__div_to_l_@cntr& (0+255),f,b
  7195  0030FA  D7CD               	goto	l4976
  7196                           
  7197                           ; BSR set to: 0
  7198                           
  7199                           ; BSR set to: 0
  7200  0030FC  0100               	movlb	0	; () banked
  7201  0030FE  AF8B               	btfss	__div_to_l_@exp1& (0+255),7,b
  7202  003100  D01A               	goto	l5000
  7203                           
  7204                           ; BSR set to: 0
  7205  003102  0100               	movlb	0	; () banked
  7206  003104  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  7207  003106  0A80               	xorlw	128
  7208  003108  0F9F               	addlw	159
  7209  00310A  B0D8               	btfsc	status,0,c
  7210  00310C  D00A               	goto	l4996
  7211                           
  7212                           ; BSR set to: 0
  7213  00310E  0E00               	movlw	0
  7214  003110  0100               	movlb	0	; () banked
  7215  003112  6F80               	movwf	?__div_to_l_& (0+255),b
  7216  003114  0E00               	movlw	0
  7217  003116  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  7218  003118  0E00               	movlw	0
  7219  00311A  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  7220  00311C  0E00               	movlw	0
  7221  00311E  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  7222                           
  7223                           ; BSR set to: 0
  7224  003120  0012               	return	
  7225  003122                     l4996:
  7226                           
  7227                           ; BSR set to: 0
  7228  003122  0100               	movlb	0	; () banked
  7229  003124  90D8               	bcf	status,0,c
  7230  003126  3389               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  7231  003128  3388               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  7232  00312A  3387               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  7233  00312C  3386               	rrcf	__div_to_l_@quot& (0+255),f,b
  7234                           
  7235                           ; BSR set to: 0
  7236  00312E  0100               	movlb	0	; () banked
  7237  003130  3F8B               	incfsz	__div_to_l_@exp1& (0+255),f,b
  7238  003132  D7F7               	goto	l4996
  7239                           
  7240                           ; BSR set to: 0
  7241  003134  D01B               	goto	l991
  7242  003136                     l5000:
  7243                           
  7244                           ; BSR set to: 0
  7245  003136  0E1F               	movlw	31
  7246  003138  0100               	movlb	0	; () banked
  7247  00313A  658B               	cpfsgt	__div_to_l_@exp1& (0+255),b
  7248  00313C  D012               	goto	l5008
  7249                           
  7250                           ; BSR set to: 0
  7251  00313E  0E00               	movlw	0
  7252  003140  0100               	movlb	0	; () banked
  7253  003142  6F80               	movwf	?__div_to_l_& (0+255),b
  7254  003144  0E00               	movlw	0
  7255  003146  6F81               	movwf	(?__div_to_l_+1)& (0+255),b
  7256  003148  0E00               	movlw	0
  7257  00314A  6F82               	movwf	(?__div_to_l_+2)& (0+255),b
  7258  00314C  0E00               	movlw	0
  7259  00314E  6F83               	movwf	(?__div_to_l_+3)& (0+255),b
  7260                           
  7261                           ; BSR set to: 0
  7262  003150  0012               	return	
  7263  003152                     l5006:
  7264                           
  7265                           ; BSR set to: 0
  7266  003152  0100               	movlb	0	; () banked
  7267  003154  90D8               	bcf	status,0,c
  7268  003156  3786               	rlcf	__div_to_l_@quot& (0+255),f,b
  7269  003158  3787               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  7270  00315A  3788               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  7271  00315C  3789               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  7272  00315E  0100               	movlb	0	; () banked
  7273  003160  078B               	decf	__div_to_l_@exp1& (0+255),f,b
  7274  003162                     l5008:
  7275                           
  7276                           ; BSR set to: 0
  7277  003162  0100               	movlb	0	; () banked
  7278  003164  518B               	movf	__div_to_l_@exp1& (0+255),w,b
  7279  003166  0100               	movlb	0	; () banked
  7280  003168  A4D8               	btfss	status,2,c
  7281  00316A  D7F3               	goto	l5006
  7282  00316C                     l991:
  7283                           
  7284                           ; BSR set to: 0
  7285  00316C  C086  F080         	movff	__div_to_l_@quot,?__div_to_l_
  7286  003170  C087  F081         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7287  003174  C088  F082         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7288  003178  C089  F083         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7289                           
  7290                           ; BSR set to: 0
  7291  00317C  0012               	return		;funcret
  7292  00317E                     __end_of__div_to_l_:
  7293                           	opt stack 0
  7294                           tblptru	equ	0xFF8
  7295                           tblptrh	equ	0xFF7
  7296                           tblptrl	equ	0xFF6
  7297                           tablat	equ	0xFF5
  7298                           prodh	equ	0xFF4
  7299                           prodl	equ	0xFF3
  7300                           postinc0	equ	0xFEE
  7301                           wreg	equ	0xFE8
  7302                           postdec1	equ	0xFE5
  7303                           fsr1l	equ	0xFE1
  7304                           indf2	equ	0xFDF
  7305                           postinc2	equ	0xFDE
  7306                           postdec2	equ	0xFDD
  7307                           fsr2h	equ	0xFDA
  7308                           fsr2l	equ	0xFD9
  7309                           status	equ	0xFD8
  7310                           
  7311 ;; *************** function ___lltoft *****************
  7312 ;; Defined at:
  7313 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  7314 ;; Parameters:    Size  Location     Type
  7315 ;;  c               4    8[BANK0 ] unsigned long 
  7316 ;; Auto vars:     Size  Location     Type
  7317 ;;  exp             1   16[BANK0 ] unsigned char 
  7318 ;; Return value:  Size  Location     Type
  7319 ;;                  3    8[BANK0 ] float 
  7320 ;; Registers used:
  7321 ;;		wreg, status,2, status,0, cstack
  7322 ;; Tracked objects:
  7323 ;;		On entry : 0/0
  7324 ;;		On exit  : 0/0
  7325 ;;		Unchanged: 0/0
  7326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7327 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7328 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7329 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7330 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7331 ;;Total ram usage:        9 bytes
  7332 ;; Hardware stack levels used:    1
  7333 ;; Hardware stack levels required when called:    7
  7334 ;; This function calls:
  7335 ;;		___ftpack
  7336 ;; This function is called by:
  7337 ;;		_printf
  7338 ;; This function uses a non-reentrant model
  7339 ;;
  7340                           
  7341                           	psect	text14
  7342  004B14                     __ptext14:
  7343                           	opt stack 0
  7344  004B14                     ___lltoft:
  7345                           	opt stack 21
  7346                           
  7347                           ; BSR set to: 0
  7348                           ;incstack = 0
  7349  004B14  0E8E               	movlw	142
  7350  004B16  0100               	movlb	0	; () banked
  7351  004B18  6F90               	movwf	___lltoft@exp& (0+255),b
  7352  004B1A  D008               	goto	l5082
  7353  004B1C                     l5080:
  7354                           
  7355                           ; BSR set to: 0
  7356  004B1C  0100               	movlb	0	; () banked
  7357  004B1E  90D8               	bcf	status,0,c
  7358  004B20  338B               	rrcf	(___lltoft@c+3)& (0+255),f,b
  7359  004B22  338A               	rrcf	(___lltoft@c+2)& (0+255),f,b
  7360  004B24  3389               	rrcf	(___lltoft@c+1)& (0+255),f,b
  7361  004B26  3388               	rrcf	___lltoft@c& (0+255),f,b
  7362  004B28  0100               	movlb	0	; () banked
  7363  004B2A  2B90               	incf	___lltoft@exp& (0+255),f,b
  7364  004B2C                     l5082:
  7365                           
  7366                           ; BSR set to: 0
  7367  004B2C  0E00               	movlw	0
  7368  004B2E  0100               	movlb	0	; () banked
  7369  004B30  1588               	andwf	___lltoft@c& (0+255),w,b
  7370  004B32  0100               	movlb	0	; () banked
  7371  004B34  6F8C               	movwf	??___lltoft& (0+255),b
  7372  004B36  0E00               	movlw	0
  7373  004B38  0100               	movlb	0	; () banked
  7374  004B3A  1589               	andwf	(___lltoft@c+1)& (0+255),w,b
  7375  004B3C  0100               	movlb	0	; () banked
  7376  004B3E  6F8D               	movwf	(??___lltoft+1)& (0+255),b
  7377  004B40  0E00               	movlw	0
  7378  004B42  0100               	movlb	0	; () banked
  7379  004B44  158A               	andwf	(___lltoft@c+2)& (0+255),w,b
  7380  004B46  0100               	movlb	0	; () banked
  7381  004B48  6F8E               	movwf	(??___lltoft+2)& (0+255),b
  7382  004B4A  0EFF               	movlw	255
  7383  004B4C  0100               	movlb	0	; () banked
  7384  004B4E  158B               	andwf	(___lltoft@c+3)& (0+255),w,b
  7385  004B50  0100               	movlb	0	; () banked
  7386  004B52  6F8F               	movwf	(??___lltoft+3)& (0+255),b
  7387  004B54  0100               	movlb	0	; () banked
  7388  004B56  518C               	movf	??___lltoft& (0+255),w,b
  7389  004B58  0100               	movlb	0	; () banked
  7390  004B5A  118D               	iorwf	(??___lltoft+1)& (0+255),w,b
  7391  004B5C  0100               	movlb	0	; () banked
  7392  004B5E  118E               	iorwf	(??___lltoft+2)& (0+255),w,b
  7393  004B60  0100               	movlb	0	; () banked
  7394  004B62  118F               	iorwf	(??___lltoft+3)& (0+255),w,b
  7395  004B64  A4D8               	btfss	status,2,c
  7396  004B66  D7DA               	goto	l5080
  7397                           
  7398                           ; BSR set to: 0
  7399                           
  7400                           ; BSR set to: 0
  7401  004B68  C088  F080         	movff	___lltoft@c,___ftpack@arg
  7402  004B6C  C089  F081         	movff	___lltoft@c+1,___ftpack@arg+1
  7403  004B70  C08A  F082         	movff	___lltoft@c+2,___ftpack@arg+2
  7404  004B74  C090  F083         	movff	___lltoft@exp,___ftpack@exp
  7405  004B78  0E00               	movlw	0
  7406  004B7A  0100               	movlb	0	; () banked
  7407  004B7C  6F84               	movwf	___ftpack@sign& (0+255),b
  7408  004B7E  EC58  F01E         	call	___ftpack	;wreg free
  7409  004B82  C080  F088         	movff	?___ftpack,?___lltoft
  7410  004B86  C081  F089         	movff	?___ftpack+1,?___lltoft+1
  7411  004B8A  C082  F08A         	movff	?___ftpack+2,?___lltoft+2
  7412  004B8E  0012               	return	
  7413  004B90                     __end_of___lltoft:
  7414                           	opt stack 0
  7415                           tblptru	equ	0xFF8
  7416                           tblptrh	equ	0xFF7
  7417                           tblptrl	equ	0xFF6
  7418                           tablat	equ	0xFF5
  7419                           prodh	equ	0xFF4
  7420                           prodl	equ	0xFF3
  7421                           postinc0	equ	0xFEE
  7422                           wreg	equ	0xFE8
  7423                           postdec1	equ	0xFE5
  7424                           fsr1l	equ	0xFE1
  7425                           indf2	equ	0xFDF
  7426                           postinc2	equ	0xFDE
  7427                           postdec2	equ	0xFDD
  7428                           fsr2h	equ	0xFDA
  7429                           fsr2l	equ	0xFD9
  7430                           status	equ	0xFD8
  7431                           
  7432 ;; *************** function ___llmod *****************
  7433 ;; Defined at:
  7434 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  7435 ;; Parameters:    Size  Location     Type
  7436 ;;  dividend        4   13[BANK0 ] unsigned long 
  7437 ;;  divisor         4   17[BANK0 ] unsigned long 
  7438 ;; Auto vars:     Size  Location     Type
  7439 ;;  counter         1   21[BANK0 ] unsigned char 
  7440 ;; Return value:  Size  Location     Type
  7441 ;;                  4   13[BANK0 ] unsigned long 
  7442 ;; Registers used:
  7443 ;;		wreg, status,2, status,0
  7444 ;; Tracked objects:
  7445 ;;		On entry : 0/0
  7446 ;;		On exit  : 0/0
  7447 ;;		Unchanged: 0/0
  7448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7449 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7450 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7452 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7453 ;;Total ram usage:        9 bytes
  7454 ;; Hardware stack levels used:    1
  7455 ;; Hardware stack levels required when called:    6
  7456 ;; This function calls:
  7457 ;;		Nothing
  7458 ;; This function is called by:
  7459 ;;		_printf
  7460 ;; This function uses a non-reentrant model
  7461 ;;
  7462                           
  7463                           	psect	text15
  7464  004858                     __ptext15:
  7465                           	opt stack 0
  7466  004858                     ___llmod:
  7467                           	opt stack 22
  7468                           
  7469                           ;incstack = 0
  7470  004858  0100               	movlb	0	; () banked
  7471  00485A  5191               	movf	___llmod@divisor& (0+255),w,b
  7472  00485C  0100               	movlb	0	; () banked
  7473  00485E  1192               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  7474  004860  0100               	movlb	0	; () banked
  7475  004862  1193               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  7476  004864  0100               	movlb	0	; () banked
  7477  004866  1194               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  7478  004868  B4D8               	btfsc	status,2,c
  7479  00486A  D03A               	goto	l1180
  7480                           
  7481                           ; BSR set to: 0
  7482  00486C  0E01               	movlw	1
  7483  00486E  0100               	movlb	0	; () banked
  7484  004870  6F95               	movwf	___llmod@counter& (0+255),b
  7485  004872  D008               	goto	l5068
  7486  004874                     l5066:
  7487                           
  7488                           ; BSR set to: 0
  7489  004874  0100               	movlb	0	; () banked
  7490  004876  90D8               	bcf	status,0,c
  7491  004878  3791               	rlcf	___llmod@divisor& (0+255),f,b
  7492  00487A  3792               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  7493  00487C  3793               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  7494  00487E  3794               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  7495  004880  0100               	movlb	0	; () banked
  7496  004882  2B95               	incf	___llmod@counter& (0+255),f,b
  7497  004884                     l5068:
  7498                           
  7499                           ; BSR set to: 0
  7500  004884  0100               	movlb	0	; () banked
  7501  004886  AF94               	btfss	(___llmod@divisor+3)& (0+255),7,b
  7502  004888  D7F5               	goto	l5066
  7503  00488A                     l5070:
  7504                           
  7505                           ; BSR set to: 0
  7506  00488A  0100               	movlb	0	; () banked
  7507  00488C  5191               	movf	___llmod@divisor& (0+255),w,b
  7508  00488E  0100               	movlb	0	; () banked
  7509  004890  5D8D               	subwf	___llmod@dividend& (0+255),w,b
  7510  004892  0100               	movlb	0	; () banked
  7511  004894  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  7512  004896  0100               	movlb	0	; () banked
  7513  004898  598E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  7514  00489A  0100               	movlb	0	; () banked
  7515  00489C  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  7516  00489E  0100               	movlb	0	; () banked
  7517  0048A0  598F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  7518  0048A2  0100               	movlb	0	; () banked
  7519  0048A4  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  7520  0048A6  0100               	movlb	0	; () banked
  7521  0048A8  5990               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  7522  0048AA  A0D8               	btfss	status,0,c
  7523  0048AC  D010               	goto	l5074
  7524                           
  7525                           ; BSR set to: 0
  7526  0048AE  0100               	movlb	0	; () banked
  7527  0048B0  5191               	movf	___llmod@divisor& (0+255),w,b
  7528  0048B2  0100               	movlb	0	; () banked
  7529  0048B4  5F8D               	subwf	___llmod@dividend& (0+255),f,b
  7530  0048B6  0100               	movlb	0	; () banked
  7531  0048B8  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  7532  0048BA  0100               	movlb	0	; () banked
  7533  0048BC  5B8E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  7534  0048BE  0100               	movlb	0	; () banked
  7535  0048C0  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  7536  0048C2  0100               	movlb	0	; () banked
  7537  0048C4  5B8F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  7538  0048C6  0100               	movlb	0	; () banked
  7539  0048C8  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  7540  0048CA  0100               	movlb	0	; () banked
  7541  0048CC  5B90               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  7542  0048CE                     l5074:
  7543                           
  7544                           ; BSR set to: 0
  7545  0048CE  0100               	movlb	0	; () banked
  7546  0048D0  90D8               	bcf	status,0,c
  7547  0048D2  3394               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  7548  0048D4  3393               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  7549  0048D6  3392               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  7550  0048D8  3391               	rrcf	___llmod@divisor& (0+255),f,b
  7551                           
  7552                           ; BSR set to: 0
  7553  0048DA  0100               	movlb	0	; () banked
  7554  0048DC  2F95               	decfsz	___llmod@counter& (0+255),f,b
  7555  0048DE  D7D5               	goto	l5070
  7556  0048E0                     l1180:
  7557                           
  7558                           ; BSR set to: 0
  7559  0048E0  C08D  F08D         	movff	___llmod@dividend,?___llmod
  7560  0048E4  C08E  F08E         	movff	___llmod@dividend+1,?___llmod+1
  7561  0048E8  C08F  F08F         	movff	___llmod@dividend+2,?___llmod+2
  7562  0048EC  C090  F090         	movff	___llmod@dividend+3,?___llmod+3
  7563                           
  7564                           ; BSR set to: 0
  7565  0048F0  0012               	return		;funcret
  7566  0048F2                     __end_of___llmod:
  7567                           	opt stack 0
  7568                           tblptru	equ	0xFF8
  7569                           tblptrh	equ	0xFF7
  7570                           tblptrl	equ	0xFF6
  7571                           tablat	equ	0xFF5
  7572                           prodh	equ	0xFF4
  7573                           prodl	equ	0xFF3
  7574                           postinc0	equ	0xFEE
  7575                           wreg	equ	0xFE8
  7576                           postdec1	equ	0xFE5
  7577                           fsr1l	equ	0xFE1
  7578                           indf2	equ	0xFDF
  7579                           postinc2	equ	0xFDE
  7580                           postdec2	equ	0xFDD
  7581                           fsr2h	equ	0xFDA
  7582                           fsr2l	equ	0xFD9
  7583                           status	equ	0xFD8
  7584                           
  7585 ;; *************** function ___lldiv *****************
  7586 ;; Defined at:
  7587 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  7588 ;; Parameters:    Size  Location     Type
  7589 ;;  dividend        4    0[BANK0 ] unsigned long 
  7590 ;;  divisor         4    4[BANK0 ] unsigned long 
  7591 ;; Auto vars:     Size  Location     Type
  7592 ;;  quotient        4    8[BANK0 ] unsigned long 
  7593 ;;  counter         1   12[BANK0 ] unsigned char 
  7594 ;; Return value:  Size  Location     Type
  7595 ;;                  4    0[BANK0 ] unsigned long 
  7596 ;; Registers used:
  7597 ;;		wreg, status,2, status,0
  7598 ;; Tracked objects:
  7599 ;;		On entry : 0/0
  7600 ;;		On exit  : 0/0
  7601 ;;		Unchanged: 0/0
  7602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7603 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7604 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7606 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7607 ;;Total ram usage:       13 bytes
  7608 ;; Hardware stack levels used:    1
  7609 ;; Hardware stack levels required when called:    6
  7610 ;; This function calls:
  7611 ;;		Nothing
  7612 ;; This function is called by:
  7613 ;;		_printf
  7614 ;;		_I2C_Master_Init
  7615 ;; This function uses a non-reentrant model
  7616 ;;
  7617                           
  7618                           	psect	text16
  7619  0045AE                     __ptext16:
  7620                           	opt stack 0
  7621  0045AE                     ___lldiv:
  7622                           	opt stack 22
  7623                           
  7624                           ; BSR set to: 0
  7625                           ;incstack = 0
  7626  0045AE  0E00               	movlw	0
  7627  0045B0  0100               	movlb	0	; () banked
  7628  0045B2  6F88               	movwf	___lldiv@quotient& (0+255),b
  7629  0045B4  0E00               	movlw	0
  7630  0045B6  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  7631  0045B8  0E00               	movlw	0
  7632  0045BA  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  7633  0045BC  0E00               	movlw	0
  7634  0045BE  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7635                           
  7636                           ; BSR set to: 0
  7637  0045C0  0100               	movlb	0	; () banked
  7638  0045C2  5184               	movf	___lldiv@divisor& (0+255),w,b
  7639  0045C4  0100               	movlb	0	; () banked
  7640  0045C6  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7641  0045C8  0100               	movlb	0	; () banked
  7642  0045CA  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7643  0045CC  0100               	movlb	0	; () banked
  7644  0045CE  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7645  0045D0  B4D8               	btfsc	status,2,c
  7646  0045D2  D042               	goto	l1170
  7647                           
  7648                           ; BSR set to: 0
  7649  0045D4  0E01               	movlw	1
  7650  0045D6  0100               	movlb	0	; () banked
  7651  0045D8  6F8C               	movwf	___lldiv@counter& (0+255),b
  7652  0045DA  D008               	goto	l5048
  7653  0045DC                     l5046:
  7654                           
  7655                           ; BSR set to: 0
  7656  0045DC  0100               	movlb	0	; () banked
  7657  0045DE  90D8               	bcf	status,0,c
  7658  0045E0  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  7659  0045E2  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7660  0045E4  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7661  0045E6  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7662  0045E8  0100               	movlb	0	; () banked
  7663  0045EA  2B8C               	incf	___lldiv@counter& (0+255),f,b
  7664  0045EC                     l5048:
  7665                           
  7666                           ; BSR set to: 0
  7667  0045EC  0100               	movlb	0	; () banked
  7668  0045EE  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7669  0045F0  D7F5               	goto	l5046
  7670  0045F2                     l5050:
  7671                           
  7672                           ; BSR set to: 0
  7673  0045F2  0100               	movlb	0	; () banked
  7674  0045F4  90D8               	bcf	status,0,c
  7675  0045F6  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  7676  0045F8  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7677  0045FA  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7678  0045FC  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7679                           
  7680                           ; BSR set to: 0
  7681  0045FE  0100               	movlb	0	; () banked
  7682  004600  5184               	movf	___lldiv@divisor& (0+255),w,b
  7683  004602  0100               	movlb	0	; () banked
  7684  004604  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  7685  004606  0100               	movlb	0	; () banked
  7686  004608  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7687  00460A  0100               	movlb	0	; () banked
  7688  00460C  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7689  00460E  0100               	movlb	0	; () banked
  7690  004610  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7691  004612  0100               	movlb	0	; () banked
  7692  004614  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7693  004616  0100               	movlb	0	; () banked
  7694  004618  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7695  00461A  0100               	movlb	0	; () banked
  7696  00461C  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7697  00461E  A0D8               	btfss	status,0,c
  7698  004620  D012               	goto	l5058
  7699                           
  7700                           ; BSR set to: 0
  7701  004622  0100               	movlb	0	; () banked
  7702  004624  5184               	movf	___lldiv@divisor& (0+255),w,b
  7703  004626  0100               	movlb	0	; () banked
  7704  004628  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  7705  00462A  0100               	movlb	0	; () banked
  7706  00462C  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7707  00462E  0100               	movlb	0	; () banked
  7708  004630  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7709  004632  0100               	movlb	0	; () banked
  7710  004634  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7711  004636  0100               	movlb	0	; () banked
  7712  004638  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7713  00463A  0100               	movlb	0	; () banked
  7714  00463C  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7715  00463E  0100               	movlb	0	; () banked
  7716  004640  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7717                           
  7718                           ; BSR set to: 0
  7719  004642  0100               	movlb	0	; () banked
  7720  004644  8188               	bsf	___lldiv@quotient& (0+255),0,b
  7721  004646                     l5058:
  7722                           
  7723                           ; BSR set to: 0
  7724  004646  0100               	movlb	0	; () banked
  7725  004648  90D8               	bcf	status,0,c
  7726  00464A  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7727  00464C  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7728  00464E  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7729  004650  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7730                           
  7731                           ; BSR set to: 0
  7732  004652  0100               	movlb	0	; () banked
  7733  004654  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7734  004656  D7CD               	goto	l5050
  7735  004658                     l1170:
  7736                           
  7737                           ; BSR set to: 0
  7738  004658  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7739  00465C  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7740  004660  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7741  004664  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7742                           
  7743                           ; BSR set to: 0
  7744  004668  0012               	return		;funcret
  7745  00466A                     __end_of___lldiv:
  7746                           	opt stack 0
  7747                           tblptru	equ	0xFF8
  7748                           tblptrh	equ	0xFF7
  7749                           tblptrl	equ	0xFF6
  7750                           tablat	equ	0xFF5
  7751                           prodh	equ	0xFF4
  7752                           prodl	equ	0xFF3
  7753                           postinc0	equ	0xFEE
  7754                           wreg	equ	0xFE8
  7755                           postdec1	equ	0xFE5
  7756                           fsr1l	equ	0xFE1
  7757                           indf2	equ	0xFDF
  7758                           postinc2	equ	0xFDE
  7759                           postdec2	equ	0xFDD
  7760                           fsr2h	equ	0xFDA
  7761                           fsr2l	equ	0xFD9
  7762                           status	equ	0xFD8
  7763                           
  7764 ;; *************** function ___ftsub *****************
  7765 ;; Defined at:
  7766 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  7767 ;; Parameters:    Size  Location     Type
  7768 ;;  f1              3   70[BANK0 ] float 
  7769 ;;  f2              3   73[BANK0 ] float 
  7770 ;; Auto vars:     Size  Location     Type
  7771 ;;		None
  7772 ;; Return value:  Size  Location     Type
  7773 ;;                  3   70[BANK0 ] float 
  7774 ;; Registers used:
  7775 ;;		wreg, status,2, status,0, cstack
  7776 ;; Tracked objects:
  7777 ;;		On entry : 0/0
  7778 ;;		On exit  : 0/0
  7779 ;;		Unchanged: 0/0
  7780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7781 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7784 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7785 ;;Total ram usage:        6 bytes
  7786 ;; Hardware stack levels used:    1
  7787 ;; Hardware stack levels required when called:    8
  7788 ;; This function calls:
  7789 ;;		___ftadd
  7790 ;; This function is called by:
  7791 ;;		_printf
  7792 ;; This function uses a non-reentrant model
  7793 ;;
  7794                           
  7795                           	psect	text17
  7796  004E3E                     __ptext17:
  7797                           	opt stack 0
  7798  004E3E                     ___ftsub:
  7799                           	opt stack 20
  7800                           
  7801                           ; BSR set to: 0
  7802                           ;incstack = 0
  7803  004E3E  0100               	movlb	0	; () banked
  7804  004E40  51C9               	movf	___ftsub@f2& (0+255),w,b
  7805  004E42  0100               	movlb	0	; () banked
  7806  004E44  11CA               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7807  004E46  0100               	movlb	0	; () banked
  7808  004E48  11CB               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7809  004E4A  B4D8               	btfsc	status,2,c
  7810  004E4C  D009               	goto	l5014
  7811                           
  7812                           ; BSR set to: 0
  7813  004E4E  0E00               	movlw	0
  7814  004E50  0100               	movlb	0	; () banked
  7815  004E52  1BC9               	xorwf	___ftsub@f2& (0+255),f,b
  7816  004E54  0E00               	movlw	0
  7817  004E56  0100               	movlb	0	; () banked
  7818  004E58  1BCA               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7819  004E5A  0E80               	movlw	128
  7820  004E5C  0100               	movlb	0	; () banked
  7821  004E5E  1BCB               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7822  004E60                     l5014:
  7823                           
  7824                           ; BSR set to: 0
  7825  004E60  C0C6  F0BA         	movff	___ftsub@f1,___ftadd@f1
  7826  004E64  C0C7  F0BB         	movff	___ftsub@f1+1,___ftadd@f1+1
  7827  004E68  C0C8  F0BC         	movff	___ftsub@f1+2,___ftadd@f1+2
  7828  004E6C  C0C9  F0BD         	movff	___ftsub@f2,___ftadd@f2
  7829  004E70  C0CA  F0BE         	movff	___ftsub@f2+1,___ftadd@f2+1
  7830  004E74  C0CB  F0BF         	movff	___ftsub@f2+2,___ftadd@f2+2
  7831  004E78  EC2B  F013         	call	___ftadd	;wreg free
  7832  004E7C  C0BA  F0C6         	movff	?___ftadd,?___ftsub
  7833  004E80  C0BB  F0C7         	movff	?___ftadd+1,?___ftsub+1
  7834  004E84  C0BC  F0C8         	movff	?___ftadd+2,?___ftsub+2
  7835  004E88  0012               	return	
  7836  004E8A                     __end_of___ftsub:
  7837                           	opt stack 0
  7838                           tblptru	equ	0xFF8
  7839                           tblptrh	equ	0xFF7
  7840                           tblptrl	equ	0xFF6
  7841                           tablat	equ	0xFF5
  7842                           prodh	equ	0xFF4
  7843                           prodl	equ	0xFF3
  7844                           postinc0	equ	0xFEE
  7845                           wreg	equ	0xFE8
  7846                           postdec1	equ	0xFE5
  7847                           fsr1l	equ	0xFE1
  7848                           indf2	equ	0xFDF
  7849                           postinc2	equ	0xFDE
  7850                           postdec2	equ	0xFDD
  7851                           fsr2h	equ	0xFDA
  7852                           fsr2l	equ	0xFD9
  7853                           status	equ	0xFD8
  7854                           
  7855 ;; *************** function ___ftneg *****************
  7856 ;; Defined at:
  7857 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  7858 ;; Parameters:    Size  Location     Type
  7859 ;;  f1              3    0[BANK0 ] float 
  7860 ;; Auto vars:     Size  Location     Type
  7861 ;;		None
  7862 ;; Return value:  Size  Location     Type
  7863 ;;                  3    0[BANK0 ] float 
  7864 ;; Registers used:
  7865 ;;		wreg, status,2, status,0
  7866 ;; Tracked objects:
  7867 ;;		On entry : 0/0
  7868 ;;		On exit  : 0/0
  7869 ;;		Unchanged: 0/0
  7870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7871 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7874 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7875 ;;Total ram usage:        3 bytes
  7876 ;; Hardware stack levels used:    1
  7877 ;; Hardware stack levels required when called:    6
  7878 ;; This function calls:
  7879 ;;		Nothing
  7880 ;; This function is called by:
  7881 ;;		_printf
  7882 ;; This function uses a non-reentrant model
  7883 ;;
  7884                           
  7885                           	psect	text18
  7886  0050DA                     __ptext18:
  7887                           	opt stack 0
  7888  0050DA                     ___ftneg:
  7889                           	opt stack 22
  7890                           
  7891                           ;incstack = 0
  7892  0050DA  0100               	movlb	0	; () banked
  7893  0050DC  5180               	movf	___ftneg@f1& (0+255),w,b
  7894  0050DE  0100               	movlb	0	; () banked
  7895  0050E0  1181               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  7896  0050E2  0100               	movlb	0	; () banked
  7897  0050E4  1182               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  7898  0050E6  B4D8               	btfsc	status,2,c
  7899  0050E8  D009               	goto	l1120
  7900                           
  7901                           ; BSR set to: 0
  7902  0050EA  0E00               	movlw	0
  7903  0050EC  0100               	movlb	0	; () banked
  7904  0050EE  1B80               	xorwf	___ftneg@f1& (0+255),f,b
  7905  0050F0  0E00               	movlw	0
  7906  0050F2  0100               	movlb	0	; () banked
  7907  0050F4  1B81               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  7908  0050F6  0E80               	movlw	128
  7909  0050F8  0100               	movlb	0	; () banked
  7910  0050FA  1B82               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  7911  0050FC                     l1120:
  7912                           
  7913                           ; BSR set to: 0
  7914  0050FC  C080  F080         	movff	___ftneg@f1,?___ftneg
  7915  005100  C081  F081         	movff	___ftneg@f1+1,?___ftneg+1
  7916  005104  C082  F082         	movff	___ftneg@f1+2,?___ftneg+2
  7917                           
  7918                           ; BSR set to: 0
  7919  005108  0012               	return		;funcret
  7920  00510A                     __end_of___ftneg:
  7921                           	opt stack 0
  7922                           tblptru	equ	0xFF8
  7923                           tblptrh	equ	0xFF7
  7924                           tblptrl	equ	0xFF6
  7925                           tablat	equ	0xFF5
  7926                           prodh	equ	0xFF4
  7927                           prodl	equ	0xFF3
  7928                           postinc0	equ	0xFEE
  7929                           wreg	equ	0xFE8
  7930                           postdec1	equ	0xFE5
  7931                           fsr1l	equ	0xFE1
  7932                           indf2	equ	0xFDF
  7933                           postinc2	equ	0xFDE
  7934                           postdec2	equ	0xFDD
  7935                           fsr2h	equ	0xFDA
  7936                           fsr2l	equ	0xFD9
  7937                           status	equ	0xFD8
  7938                           
  7939 ;; *************** function ___ftge *****************
  7940 ;; Defined at:
  7941 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  7942 ;; Parameters:    Size  Location     Type
  7943 ;;  ff1             3    0[BANK0 ] float 
  7944 ;;  ff2             3    3[BANK0 ] float 
  7945 ;; Auto vars:     Size  Location     Type
  7946 ;;		None
  7947 ;; Return value:  Size  Location     Type
  7948 ;;		None               void
  7949 ;; Registers used:
  7950 ;;		wreg, status,2, status,0
  7951 ;; Tracked objects:
  7952 ;;		On entry : 0/0
  7953 ;;		On exit  : 0/0
  7954 ;;		Unchanged: 0/0
  7955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7956 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7958 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7959 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7960 ;;Total ram usage:        9 bytes
  7961 ;; Hardware stack levels used:    1
  7962 ;; Hardware stack levels required when called:    6
  7963 ;; This function calls:
  7964 ;;		Nothing
  7965 ;; This function is called by:
  7966 ;;		_sortBattery
  7967 ;;		_printf
  7968 ;; This function uses a non-reentrant model
  7969 ;;
  7970                           
  7971                           	psect	text19
  7972  004360                     __ptext19:
  7973                           	opt stack 0
  7974  004360                     ___ftge:
  7975                           	opt stack 22
  7976                           
  7977                           ; BSR set to: 0
  7978                           ;incstack = 0
  7979  004360  0100               	movlb	0	; () banked
  7980  004362  AF82               	btfss	(___ftge@ff1+2)& (0+255),7,b
  7981  004364  D01D               	goto	l5022
  7982                           
  7983                           ; BSR set to: 0
  7984  004366  C080  F086         	movff	___ftge@ff1,??___ftge
  7985  00436A  C081  F087         	movff	___ftge@ff1+1,??___ftge+1
  7986  00436E  C082  F088         	movff	___ftge@ff1+2,??___ftge+2
  7987  004372  0100               	movlb	0	; () banked
  7988  004374  1F86               	comf	??___ftge& (0+255),f,b
  7989  004376  1F87               	comf	(??___ftge+1)& (0+255),f,b
  7990  004378  1F88               	comf	(??___ftge+2)& (0+255),f,b
  7991  00437A  2B86               	incf	??___ftge& (0+255),f,b
  7992  00437C  0E00               	movlw	0
  7993  00437E  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  7994  004380  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  7995  004382  0E00               	movlw	0
  7996  004384  0100               	movlb	0	; () banked
  7997  004386  2586               	addwf	??___ftge& (0+255),w,b
  7998  004388  0100               	movlb	0	; () banked
  7999  00438A  6F80               	movwf	___ftge@ff1& (0+255),b
  8000  00438C  0E00               	movlw	0
  8001  00438E  0100               	movlb	0	; () banked
  8002  004390  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  8003  004392  0100               	movlb	0	; () banked
  8004  004394  6F81               	movwf	(___ftge@ff1+1)& (0+255),b
  8005  004396  0E80               	movlw	128
  8006  004398  0100               	movlb	0	; () banked
  8007  00439A  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  8008  00439C  0100               	movlb	0	; () banked
  8009  00439E  6F82               	movwf	(___ftge@ff1+2)& (0+255),b
  8010  0043A0                     l5022:
  8011                           
  8012                           ; BSR set to: 0
  8013  0043A0  0100               	movlb	0	; () banked
  8014  0043A2  AF85               	btfss	(___ftge@ff2+2)& (0+255),7,b
  8015  0043A4  D01D               	goto	l5026
  8016                           
  8017                           ; BSR set to: 0
  8018  0043A6  C083  F086         	movff	___ftge@ff2,??___ftge
  8019  0043AA  C084  F087         	movff	___ftge@ff2+1,??___ftge+1
  8020  0043AE  C085  F088         	movff	___ftge@ff2+2,??___ftge+2
  8021  0043B2  0100               	movlb	0	; () banked
  8022  0043B4  1F86               	comf	??___ftge& (0+255),f,b
  8023  0043B6  1F87               	comf	(??___ftge+1)& (0+255),f,b
  8024  0043B8  1F88               	comf	(??___ftge+2)& (0+255),f,b
  8025  0043BA  2B86               	incf	??___ftge& (0+255),f,b
  8026  0043BC  0E00               	movlw	0
  8027  0043BE  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  8028  0043C0  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  8029  0043C2  0E00               	movlw	0
  8030  0043C4  0100               	movlb	0	; () banked
  8031  0043C6  2586               	addwf	??___ftge& (0+255),w,b
  8032  0043C8  0100               	movlb	0	; () banked
  8033  0043CA  6F83               	movwf	___ftge@ff2& (0+255),b
  8034  0043CC  0E00               	movlw	0
  8035  0043CE  0100               	movlb	0	; () banked
  8036  0043D0  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  8037  0043D2  0100               	movlb	0	; () banked
  8038  0043D4  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  8039  0043D6  0E80               	movlw	128
  8040  0043D8  0100               	movlb	0	; () banked
  8041  0043DA  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  8042  0043DC  0100               	movlb	0	; () banked
  8043  0043DE  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  8044  0043E0                     l5026:
  8045                           
  8046                           ; BSR set to: 0
  8047  0043E0  0E00               	movlw	0
  8048  0043E2  0100               	movlb	0	; () banked
  8049  0043E4  1B80               	xorwf	___ftge@ff1& (0+255),f,b
  8050  0043E6  0E00               	movlw	0
  8051  0043E8  0100               	movlb	0	; () banked
  8052  0043EA  1B81               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  8053  0043EC  0E80               	movlw	128
  8054  0043EE  0100               	movlb	0	; () banked
  8055  0043F0  1B82               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  8056                           
  8057                           ; BSR set to: 0
  8058  0043F2  0E00               	movlw	0
  8059  0043F4  0100               	movlb	0	; () banked
  8060  0043F6  1B83               	xorwf	___ftge@ff2& (0+255),f,b
  8061  0043F8  0E00               	movlw	0
  8062  0043FA  0100               	movlb	0	; () banked
  8063  0043FC  1B84               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  8064  0043FE  0E80               	movlw	128
  8065  004400  0100               	movlb	0	; () banked
  8066  004402  1B85               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  8067  004404  0100               	movlb	0	; () banked
  8068  004406  5183               	movf	___ftge@ff2& (0+255),w,b
  8069  004408  0100               	movlb	0	; () banked
  8070  00440A  5D80               	subwf	___ftge@ff1& (0+255),w,b
  8071  00440C  0100               	movlb	0	; () banked
  8072  00440E  5184               	movf	(___ftge@ff2+1)& (0+255),w,b
  8073  004410  0100               	movlb	0	; () banked
  8074  004412  5981               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  8075  004414  0100               	movlb	0	; () banked
  8076  004416  5185               	movf	(___ftge@ff2+2)& (0+255),w,b
  8077  004418  0100               	movlb	0	; () banked
  8078  00441A  5982               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  8079  00441C  B0D8               	btfsc	status,0,c
  8080  00441E  D002               	goto	l5032
  8081                           
  8082                           ; BSR set to: 0
  8083  004420  90D8               	bcf	status,0,c
  8084  004422  0012               	return	
  8085  004424                     l5032:
  8086                           
  8087                           ; BSR set to: 0
  8088  004424  80D8               	bsf	status,0,c
  8089                           
  8090                           ; BSR set to: 0
  8091  004426  0012               	return	
  8092  004428                     __end_of___ftge:
  8093                           	opt stack 0
  8094                           tblptru	equ	0xFF8
  8095                           tblptrh	equ	0xFF7
  8096                           tblptrl	equ	0xFF6
  8097                           tablat	equ	0xFF5
  8098                           prodh	equ	0xFF4
  8099                           prodl	equ	0xFF3
  8100                           postinc0	equ	0xFEE
  8101                           wreg	equ	0xFE8
  8102                           postdec1	equ	0xFE5
  8103                           fsr1l	equ	0xFE1
  8104                           indf2	equ	0xFDF
  8105                           postinc2	equ	0xFDE
  8106                           postdec2	equ	0xFDD
  8107                           fsr2h	equ	0xFDA
  8108                           fsr2l	equ	0xFD9
  8109                           status	equ	0xFD8
  8110                           
  8111 ;; *************** function _lcdClear *****************
  8112 ;; Defined at:
  8113 ;;		line 74 in file "lcd.c"
  8114 ;; Parameters:    Size  Location     Type
  8115 ;;		None
  8116 ;; Auto vars:     Size  Location     Type
  8117 ;;		None
  8118 ;; Return value:  Size  Location     Type
  8119 ;;                  1    wreg      void 
  8120 ;; Registers used:
  8121 ;;		wreg, status,2, status,0, cstack
  8122 ;; Tracked objects:
  8123 ;;		On entry : 0/0
  8124 ;;		On exit  : 0/0
  8125 ;;		Unchanged: 0/0
  8126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8131 ;;Total ram usage:        0 bytes
  8132 ;; Hardware stack levels used:    1
  8133 ;; Hardware stack levels required when called:    8
  8134 ;; This function calls:
  8135 ;;		_lcdInst
  8136 ;; This function is called by:
  8137 ;;		_main
  8138 ;;		_sortBattery
  8139 ;;		_pause
  8140 ;;		_dateTime
  8141 ;;		_mainMenu
  8142 ;;		_runSelect
  8143 ;;		_runMenu
  8144 ;;		_runTime
  8145 ;;		_runStats
  8146 ;; This function uses a non-reentrant model
  8147 ;;
  8148                           
  8149                           	psect	text20
  8150  005264                     __ptext20:
  8151                           	opt stack 0
  8152  005264                     _lcdClear:
  8153                           	opt stack 21
  8154                           
  8155                           ;lcd.c: 75: lcdInst(0b00000001);
  8156                           
  8157                           ; BSR set to: 0
  8158                           ;incstack = 0
  8159  005264  0E01               	movlw	1
  8160  005266  ECAF  F028         	call	_lcdInst
  8161  00526A  0012               	return		;funcret
  8162  00526C                     __end_of_lcdClear:
  8163                           	opt stack 0
  8164                           tblptru	equ	0xFF8
  8165                           tblptrh	equ	0xFF7
  8166                           tblptrl	equ	0xFF6
  8167                           tablat	equ	0xFF5
  8168                           prodh	equ	0xFF4
  8169                           prodl	equ	0xFF3
  8170                           postinc0	equ	0xFEE
  8171                           wreg	equ	0xFE8
  8172                           postdec1	equ	0xFE5
  8173                           fsr1l	equ	0xFE1
  8174                           indf2	equ	0xFDF
  8175                           postinc2	equ	0xFDE
  8176                           postdec2	equ	0xFDD
  8177                           fsr2h	equ	0xFDA
  8178                           fsr2l	equ	0xFD9
  8179                           status	equ	0xFD8
  8180                           
  8181 ;; *************** function _digitalWrite *****************
  8182 ;; Defined at:
  8183 ;;		line 53 in file "iopin.c"
  8184 ;; Parameters:    Size  Location     Type
  8185 ;;  pin             2    0[BANK0 ] PTR int 
  8186 ;;		 -> AA_float(4), redirectingServo(4), padServo(4), conveyorServo(4), 
  8187 ;;		 -> cylinderMotor(4), 
  8188 ;;  val             2    2[BANK0 ] int 
  8189 ;; Auto vars:     Size  Location     Type
  8190 ;;  p               2    7[BANK0 ] int 
  8191 ;; Return value:  Size  Location     Type
  8192 ;;                  1    wreg      void 
  8193 ;; Registers used:
  8194 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8195 ;; Tracked objects:
  8196 ;;		On entry : 0/0
  8197 ;;		On exit  : 0/0
  8198 ;;		Unchanged: 0/0
  8199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8200 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8201 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8202 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8203 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8204 ;;Total ram usage:        9 bytes
  8205 ;; Hardware stack levels used:    1
  8206 ;; Hardware stack levels required when called:    6
  8207 ;; This function calls:
  8208 ;;		Nothing
  8209 ;; This function is called by:
  8210 ;;		_main
  8211 ;;		_sortBattery
  8212 ;; This function uses a non-reentrant model
  8213 ;;
  8214                           
  8215                           	psect	text21
  8216  003DBC                     __ptext21:
  8217                           	opt stack 0
  8218  003DBC                     _digitalWrite:
  8219                           	opt stack 23
  8220                           
  8221                           ;iopin.c: 54: if(pin){
  8222                           
  8223                           ;incstack = 0
  8224  003DBC  0100               	movlb	0	; () banked
  8225  003DBE  5180               	movf	digitalWrite@pin& (0+255),w,b
  8226  003DC0  0100               	movlb	0	; () banked
  8227  003DC2  1181               	iorwf	(digitalWrite@pin+1)& (0+255),w,b
  8228  003DC4  B4D8               	btfsc	status,2,c
  8229  003DC6  0012               	return	
  8230                           
  8231                           ; BSR set to: 0
  8232                           ;iopin.c: 55: int p = 1 << pin[1];
  8233  003DC8  0100               	movlb	0	; () banked
  8234  003DCA  EE20 F002          	lfsr	2,2
  8235  003DCE  5180               	movf	digitalWrite@pin& (0+255),w,b
  8236  003DD0  26D9               	addwf	fsr2l,f,c
  8237  003DD2  5181               	movf	(digitalWrite@pin+1)& (0+255),w,b
  8238  003DD4  22DA               	addwfc	fsr2h,f,c
  8239  003DD6  50DF               	movf	indf2,w,c
  8240  003DD8  0100               	movlb	0	; () banked
  8241  003DDA  6F84               	movwf	??_digitalWrite& (0+255),b
  8242  003DDC  0E01               	movlw	1
  8243  003DDE  0100               	movlb	0	; () banked
  8244  003DE0  6F85               	movwf	(??_digitalWrite+1)& (0+255),b
  8245  003DE2  0E00               	movlw	0
  8246  003DE4  0100               	movlb	0	; () banked
  8247  003DE6  6F86               	movwf	(??_digitalWrite+2)& (0+255),b
  8248  003DE8  0100               	movlb	0	; () banked
  8249  003DEA  2B84               	incf	??_digitalWrite& (0+255),f,b
  8250  003DEC  D004               	goto	u5484
  8251  003DEE                     u5485:
  8252  003DEE  90D8               	bcf	status,0,c
  8253  003DF0  0100               	movlb	0	; () banked
  8254  003DF2  3785               	rlcf	(??_digitalWrite+1)& (0+255),f,b
  8255  003DF4  3786               	rlcf	(??_digitalWrite+2)& (0+255),f,b
  8256  003DF6                     u5484:
  8257  003DF6  0100               	movlb	0	; () banked
  8258  003DF8  2F84               	decfsz	??_digitalWrite& (0+255),f,b
  8259  003DFA  D7F9               	goto	u5485
  8260  003DFC  C085  F087         	movff	??_digitalWrite+1,digitalWrite@p
  8261  003E00  C086  F088         	movff	??_digitalWrite+2,digitalWrite@p+1
  8262                           
  8263                           ;iopin.c: 56: if(val == 0){
  8264  003E04  0100               	movlb	0	; () banked
  8265  003E06  5182               	movf	digitalWrite@val& (0+255),w,b
  8266  003E08  0100               	movlb	0	; () banked
  8267  003E0A  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  8268  003E0C  A4D8               	btfss	status,2,c
  8269  003E0E  D03C               	goto	l5368
  8270                           
  8271                           ; BSR set to: 0
  8272                           ;iopin.c: 57: p ^= 0xff;
  8273  003E10  0EFF               	movlw	255
  8274  003E12  0100               	movlb	0	; () banked
  8275  003E14  1B87               	xorwf	digitalWrite@p& (0+255),f,b
  8276                           
  8277                           ; BSR set to: 0
  8278                           ;iopin.c: 58: }
  8279                           ;iopin.c: 60: switch(pin[0]){
  8280  003E16  D038               	goto	l5368
  8281  003E18                     l5344:
  8282                           
  8283                           ; BSR set to: 0
  8284  003E18  0100               	movlb	0	; () banked
  8285  003E1A  0582               	decf	digitalWrite@val& (0+255),w,b
  8286  003E1C  0100               	movlb	0	; () banked
  8287  003E1E  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  8288  003E20  A4D8               	btfss	status,2,c
  8289  003E22  D004               	goto	l5348
  8290                           
  8291                           ; BSR set to: 0
  8292  003E24  0100               	movlb	0	; () banked
  8293  003E26  5187               	movf	digitalWrite@p& (0+255),w,b
  8294  003E28  1289               	iorwf	3977,f,c	;volatile
  8295  003E2A  0012               	return	
  8296  003E2C                     l5348:
  8297                           
  8298                           ; BSR set to: 0
  8299                           ;iopin.c: 62: else LATA &= p;
  8300  003E2C  0100               	movlb	0	; () banked
  8301  003E2E  5187               	movf	digitalWrite@p& (0+255),w,b
  8302  003E30  1689               	andwf	3977,f,c	;volatile
  8303                           
  8304                           ; BSR set to: 0
  8305                           ;iopin.c: 63: break;
  8306  003E32  0012               	return	
  8307  003E34                     l5350:
  8308                           
  8309                           ; BSR set to: 0
  8310  003E34  0100               	movlb	0	; () banked
  8311  003E36  0582               	decf	digitalWrite@val& (0+255),w,b
  8312  003E38  0100               	movlb	0	; () banked
  8313  003E3A  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  8314  003E3C  A4D8               	btfss	status,2,c
  8315  003E3E  D004               	goto	l5354
  8316                           
  8317                           ; BSR set to: 0
  8318  003E40  0100               	movlb	0	; () banked
  8319  003E42  5187               	movf	digitalWrite@p& (0+255),w,b
  8320  003E44  128A               	iorwf	3978,f,c	;volatile
  8321  003E46  0012               	return	
  8322  003E48                     l5354:
  8323                           
  8324                           ; BSR set to: 0
  8325                           ;iopin.c: 65: else LATB &= p;
  8326  003E48  0100               	movlb	0	; () banked
  8327  003E4A  5187               	movf	digitalWrite@p& (0+255),w,b
  8328  003E4C  168A               	andwf	3978,f,c	;volatile
  8329                           
  8330                           ; BSR set to: 0
  8331                           ;iopin.c: 66: break;
  8332  003E4E  0012               	return	
  8333  003E50                     l5356:
  8334                           
  8335                           ; BSR set to: 0
  8336  003E50  0100               	movlb	0	; () banked
  8337  003E52  0582               	decf	digitalWrite@val& (0+255),w,b
  8338  003E54  0100               	movlb	0	; () banked
  8339  003E56  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  8340  003E58  A4D8               	btfss	status,2,c
  8341  003E5A  D004               	goto	l5360
  8342                           
  8343                           ; BSR set to: 0
  8344  003E5C  0100               	movlb	0	; () banked
  8345  003E5E  5187               	movf	digitalWrite@p& (0+255),w,b
  8346  003E60  128B               	iorwf	3979,f,c	;volatile
  8347  003E62  0012               	return	
  8348  003E64                     l5360:
  8349                           
  8350                           ; BSR set to: 0
  8351                           ;iopin.c: 68: else LATC &= p;
  8352  003E64  0100               	movlb	0	; () banked
  8353  003E66  5187               	movf	digitalWrite@p& (0+255),w,b
  8354  003E68  168B               	andwf	3979,f,c	;volatile
  8355                           
  8356                           ; BSR set to: 0
  8357                           ;iopin.c: 69: break;
  8358  003E6A  0012               	return	
  8359  003E6C                     l5362:
  8360                           
  8361                           ; BSR set to: 0
  8362  003E6C  0100               	movlb	0	; () banked
  8363  003E6E  0582               	decf	digitalWrite@val& (0+255),w,b
  8364  003E70  0100               	movlb	0	; () banked
  8365  003E72  1183               	iorwf	(digitalWrite@val+1)& (0+255),w,b
  8366  003E74  A4D8               	btfss	status,2,c
  8367  003E76  D004               	goto	l5366
  8368                           
  8369                           ; BSR set to: 0
  8370  003E78  0100               	movlb	0	; () banked
  8371  003E7A  5187               	movf	digitalWrite@p& (0+255),w,b
  8372  003E7C  128C               	iorwf	3980,f,c	;volatile
  8373  003E7E  0012               	return	
  8374  003E80                     l5366:
  8375                           
  8376                           ; BSR set to: 0
  8377                           ;iopin.c: 71: else LATD &= p;
  8378  003E80  0100               	movlb	0	; () banked
  8379  003E82  5187               	movf	digitalWrite@p& (0+255),w,b
  8380  003E84  168C               	andwf	3980,f,c	;volatile
  8381                           
  8382                           ; BSR set to: 0
  8383                           ;iopin.c: 72: }
  8384  003E86  0012               	return	
  8385  003E88                     l5368:
  8386                           
  8387                           ; BSR set to: 0
  8388  003E88  C080  FFD9         	movff	digitalWrite@pin,fsr2l
  8389  003E8C  C081  FFDA         	movff	digitalWrite@pin+1,fsr2h
  8390  003E90  CFDE F084          	movff	postinc2,??_digitalWrite
  8391  003E94  CFDD F085          	movff	postdec2,??_digitalWrite+1
  8392                           
  8393                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8394                           ; Switch size 1, requested type "space"
  8395                           ; Number of cases is 1, Range of values is 0 to 0
  8396                           ; switch strategies available:
  8397                           ; Name         Instructions Cycles
  8398                           ; simple_byte            4     3 (average)
  8399                           ;	Chosen strategy is simple_byte
  8400  003E98  0100               	movlb	0	; () banked
  8401  003E9A  5185               	movf	(??_digitalWrite+1)& (0+255),w,b
  8402  003E9C  0A00               	xorlw	0	; case 0
  8403  003E9E  A4D8               	btfss	status,2,c
  8404  003EA0  0012               	return	
  8405                           
  8406                           ; BSR set to: 0
  8407                           ; Switch size 1, requested type "space"
  8408                           ; Number of cases is 4, Range of values is 0 to 3
  8409                           ; switch strategies available:
  8410                           ; Name         Instructions Cycles
  8411                           ; simple_byte           13     7 (average)
  8412                           ;	Chosen strategy is simple_byte
  8413  003EA2  0100               	movlb	0	; () banked
  8414  003EA4  5184               	movf	??_digitalWrite& (0+255),w,b
  8415  003EA6  0A00               	xorlw	0	; case 0
  8416  003EA8  B4D8               	btfsc	status,2,c
  8417  003EAA  D7B6               	goto	l5344
  8418  003EAC  0A01               	xorlw	1	; case 1
  8419  003EAE  B4D8               	btfsc	status,2,c
  8420  003EB0  D7C1               	goto	l5350
  8421  003EB2  0A03               	xorlw	3	; case 2
  8422  003EB4  B4D8               	btfsc	status,2,c
  8423  003EB6  D7CC               	goto	l5356
  8424  003EB8  0A01               	xorlw	1	; case 3
  8425  003EBA  A4D8               	btfss	status,2,c
  8426                           
  8427                           ; BSR set to: 0
  8428  003EBC  0012               	return	
  8429  003EBE  D7D6               	goto	l5362
  8430  003EC0                     __end_of_digitalWrite:
  8431                           	opt stack 0
  8432                           tblptru	equ	0xFF8
  8433                           tblptrh	equ	0xFF7
  8434                           tblptrl	equ	0xFF6
  8435                           tablat	equ	0xFF5
  8436                           prodh	equ	0xFF4
  8437                           prodl	equ	0xFF3
  8438                           postinc0	equ	0xFEE
  8439                           wreg	equ	0xFE8
  8440                           postdec1	equ	0xFE5
  8441                           fsr1l	equ	0xFE1
  8442                           indf2	equ	0xFDF
  8443                           postinc2	equ	0xFDE
  8444                           postdec2	equ	0xFDD
  8445                           fsr2h	equ	0xFDA
  8446                           fsr2l	equ	0xFD9
  8447                           status	equ	0xFD8
  8448                           
  8449 ;; *************** function _digitalRead *****************
  8450 ;; Defined at:
  8451 ;;		line 43 in file "iopin.c"
  8452 ;; Parameters:    Size  Location     Type
  8453 ;;  pin             2    0[BANK0 ] PTR int 
  8454 ;;		 -> padPin2(4), padPin1(4), 
  8455 ;; Auto vars:     Size  Location     Type
  8456 ;;		None
  8457 ;; Return value:  Size  Location     Type
  8458 ;;                  2    0[BANK0 ] int 
  8459 ;; Registers used:
  8460 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8461 ;; Tracked objects:
  8462 ;;		On entry : 0/0
  8463 ;;		On exit  : 0/0
  8464 ;;		Unchanged: 0/0
  8465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8466 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8468 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8469 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8470 ;;Total ram usage:        4 bytes
  8471 ;; Hardware stack levels used:    1
  8472 ;; Hardware stack levels required when called:    6
  8473 ;; This function calls:
  8474 ;;		Nothing
  8475 ;; This function is called by:
  8476 ;;		_sortBattery
  8477 ;; This function uses a non-reentrant model
  8478 ;;
  8479                           
  8480                           	psect	text22
  8481  00393E                     __ptext22:
  8482                           	opt stack 0
  8483  00393E                     _digitalRead:
  8484                           	opt stack 23
  8485                           
  8486                           ;iopin.c: 44: switch(pin[0]){
  8487                           
  8488                           ; BSR set to: 0
  8489                           ;incstack = 0
  8490  00393E  D078               	goto	l5736
  8491  003940                     l5718:
  8492  003940  0100               	movlb	0	; () banked
  8493  003942  EE20 F002          	lfsr	2,2
  8494  003946  5180               	movf	digitalRead@pin& (0+255),w,b
  8495  003948  26D9               	addwf	fsr2l,f,c
  8496  00394A  5181               	movf	(digitalRead@pin+1)& (0+255),w,b
  8497  00394C  22DA               	addwfc	fsr2h,f,c
  8498  00394E  50DF               	movf	indf2,w,c
  8499  003950  0100               	movlb	0	; () banked
  8500  003952  6F82               	movwf	??_digitalRead& (0+255),b
  8501  003954  CF80 F083          	movff	3968,??_digitalRead+1	;volatile
  8502  003958  0100               	movlb	0	; () banked
  8503  00395A  2B82               	incf	??_digitalRead& (0+255),f,b
  8504  00395C  D003               	goto	u6134
  8505  00395E                     u6135:
  8506  00395E  0100               	movlb	0	; () banked
  8507  003960  90D8               	bcf	status,0,c
  8508  003962  3383               	rrcf	(??_digitalRead+1)& (0+255),f,b
  8509  003964                     u6134:
  8510  003964  0100               	movlb	0	; () banked
  8511  003966  2F82               	decfsz	??_digitalRead& (0+255),f,b
  8512  003968  D7FA               	goto	u6135
  8513  00396A  0E01               	movlw	1
  8514  00396C  0100               	movlb	0	; () banked
  8515  00396E  1783               	andwf	(??_digitalRead+1)& (0+255),f,b
  8516  003970  0100               	movlb	0	; () banked
  8517  003972  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  8518  003974  0100               	movlb	0	; () banked
  8519  003976  6F80               	movwf	?_digitalRead& (0+255),b
  8520  003978  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  8521                           
  8522                           ; BSR set to: 0
  8523  00397A  0012               	return	
  8524  00397C                     l5722:
  8525                           
  8526                           ; BSR set to: 0
  8527  00397C  0100               	movlb	0	; () banked
  8528  00397E  EE20 F002          	lfsr	2,2
  8529  003982  5180               	movf	digitalRead@pin& (0+255),w,b
  8530  003984  26D9               	addwf	fsr2l,f,c
  8531  003986  5181               	movf	(digitalRead@pin+1)& (0+255),w,b
  8532  003988  22DA               	addwfc	fsr2h,f,c
  8533  00398A  50DF               	movf	indf2,w,c
  8534  00398C  0100               	movlb	0	; () banked
  8535  00398E  6F82               	movwf	??_digitalRead& (0+255),b
  8536  003990  CF81 F083          	movff	3969,??_digitalRead+1	;volatile
  8537  003994  0100               	movlb	0	; () banked
  8538  003996  2B82               	incf	??_digitalRead& (0+255),f,b
  8539  003998  D003               	goto	u6144
  8540  00399A                     u6145:
  8541  00399A  0100               	movlb	0	; () banked
  8542  00399C  90D8               	bcf	status,0,c
  8543  00399E  3383               	rrcf	(??_digitalRead+1)& (0+255),f,b
  8544  0039A0                     u6144:
  8545  0039A0  0100               	movlb	0	; () banked
  8546  0039A2  2F82               	decfsz	??_digitalRead& (0+255),f,b
  8547  0039A4  D7FA               	goto	u6145
  8548  0039A6  0E01               	movlw	1
  8549  0039A8  0100               	movlb	0	; () banked
  8550  0039AA  1783               	andwf	(??_digitalRead+1)& (0+255),f,b
  8551  0039AC  0100               	movlb	0	; () banked
  8552  0039AE  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  8553  0039B0  0100               	movlb	0	; () banked
  8554  0039B2  6F80               	movwf	?_digitalRead& (0+255),b
  8555  0039B4  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  8556                           
  8557                           ; BSR set to: 0
  8558  0039B6  0012               	return	
  8559  0039B8                     l5726:
  8560                           
  8561                           ; BSR set to: 0
  8562  0039B8  0100               	movlb	0	; () banked
  8563  0039BA  EE20 F002          	lfsr	2,2
  8564  0039BE  5180               	movf	digitalRead@pin& (0+255),w,b
  8565  0039C0  26D9               	addwf	fsr2l,f,c
  8566  0039C2  5181               	movf	(digitalRead@pin+1)& (0+255),w,b
  8567  0039C4  22DA               	addwfc	fsr2h,f,c
  8568  0039C6  50DF               	movf	indf2,w,c
  8569  0039C8  0100               	movlb	0	; () banked
  8570  0039CA  6F82               	movwf	??_digitalRead& (0+255),b
  8571  0039CC  CF82 F083          	movff	3970,??_digitalRead+1	;volatile
  8572  0039D0  0100               	movlb	0	; () banked
  8573  0039D2  2B82               	incf	??_digitalRead& (0+255),f,b
  8574  0039D4  D003               	goto	u6154
  8575  0039D6                     u6155:
  8576  0039D6  0100               	movlb	0	; () banked
  8577  0039D8  90D8               	bcf	status,0,c
  8578  0039DA  3383               	rrcf	(??_digitalRead+1)& (0+255),f,b
  8579  0039DC                     u6154:
  8580  0039DC  0100               	movlb	0	; () banked
  8581  0039DE  2F82               	decfsz	??_digitalRead& (0+255),f,b
  8582  0039E0  D7FA               	goto	u6155
  8583  0039E2  0E01               	movlw	1
  8584  0039E4  0100               	movlb	0	; () banked
  8585  0039E6  1783               	andwf	(??_digitalRead+1)& (0+255),f,b
  8586  0039E8  0100               	movlb	0	; () banked
  8587  0039EA  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  8588  0039EC  0100               	movlb	0	; () banked
  8589  0039EE  6F80               	movwf	?_digitalRead& (0+255),b
  8590  0039F0  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  8591                           
  8592                           ; BSR set to: 0
  8593  0039F2  0012               	return	
  8594  0039F4                     l5730:
  8595                           
  8596                           ; BSR set to: 0
  8597  0039F4  0100               	movlb	0	; () banked
  8598  0039F6  EE20 F002          	lfsr	2,2
  8599  0039FA  5180               	movf	digitalRead@pin& (0+255),w,b
  8600  0039FC  26D9               	addwf	fsr2l,f,c
  8601  0039FE  5181               	movf	(digitalRead@pin+1)& (0+255),w,b
  8602  003A00  22DA               	addwfc	fsr2h,f,c
  8603  003A02  50DF               	movf	indf2,w,c
  8604  003A04  0100               	movlb	0	; () banked
  8605  003A06  6F82               	movwf	??_digitalRead& (0+255),b
  8606  003A08  CF83 F083          	movff	3971,??_digitalRead+1	;volatile
  8607  003A0C  0100               	movlb	0	; () banked
  8608  003A0E  2B82               	incf	??_digitalRead& (0+255),f,b
  8609  003A10  D003               	goto	u6164
  8610  003A12                     u6165:
  8611  003A12  0100               	movlb	0	; () banked
  8612  003A14  90D8               	bcf	status,0,c
  8613  003A16  3383               	rrcf	(??_digitalRead+1)& (0+255),f,b
  8614  003A18                     u6164:
  8615  003A18  0100               	movlb	0	; () banked
  8616  003A1A  2F82               	decfsz	??_digitalRead& (0+255),f,b
  8617  003A1C  D7FA               	goto	u6165
  8618  003A1E  0E01               	movlw	1
  8619  003A20  0100               	movlb	0	; () banked
  8620  003A22  1783               	andwf	(??_digitalRead+1)& (0+255),f,b
  8621  003A24  0100               	movlb	0	; () banked
  8622  003A26  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  8623  003A28  0100               	movlb	0	; () banked
  8624  003A2A  6F80               	movwf	?_digitalRead& (0+255),b
  8625  003A2C  6B81               	clrf	(?_digitalRead+1)& (0+255),b
  8626                           
  8627                           ; BSR set to: 0
  8628  003A2E  0012               	return	
  8629  003A30                     l5736:
  8630  003A30  C080  FFD9         	movff	digitalRead@pin,fsr2l
  8631  003A34  C081  FFDA         	movff	digitalRead@pin+1,fsr2h
  8632  003A38  CFDE F082          	movff	postinc2,??_digitalRead
  8633  003A3C  CFDD F083          	movff	postdec2,??_digitalRead+1
  8634                           
  8635                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8636                           ; Switch size 1, requested type "space"
  8637                           ; Number of cases is 1, Range of values is 0 to 0
  8638                           ; switch strategies available:
  8639                           ; Name         Instructions Cycles
  8640                           ; simple_byte            4     3 (average)
  8641                           ;	Chosen strategy is simple_byte
  8642  003A40  0100               	movlb	0	; () banked
  8643  003A42  5183               	movf	(??_digitalRead+1)& (0+255),w,b
  8644  003A44  0A00               	xorlw	0	; case 0
  8645  003A46  A4D8               	btfss	status,2,c
  8646  003A48  D00E               	goto	l295
  8647                           
  8648                           ; BSR set to: 0
  8649                           ; Switch size 1, requested type "space"
  8650                           ; Number of cases is 4, Range of values is 0 to 3
  8651                           ; switch strategies available:
  8652                           ; Name         Instructions Cycles
  8653                           ; simple_byte           13     7 (average)
  8654                           ;	Chosen strategy is simple_byte
  8655  003A4A  0100               	movlb	0	; () banked
  8656  003A4C  5182               	movf	??_digitalRead& (0+255),w,b
  8657  003A4E  0A00               	xorlw	0	; case 0
  8658  003A50  B4D8               	btfsc	status,2,c
  8659  003A52  D776               	goto	l5718
  8660  003A54  0A01               	xorlw	1	; case 1
  8661  003A56  B4D8               	btfsc	status,2,c
  8662  003A58  D791               	goto	l5722
  8663  003A5A  0A03               	xorlw	3	; case 2
  8664  003A5C  B4D8               	btfsc	status,2,c
  8665  003A5E  D7AC               	goto	l5726
  8666  003A60  0A01               	xorlw	1	; case 3
  8667  003A62  B4D8               	btfsc	status,2,c
  8668  003A64  D7C7               	goto	l5730
  8669  003A66                     l295:
  8670                           
  8671                           ; BSR set to: 0
  8672                           ;iopin.c: 50: return -1;
  8673  003A66  0100               	movlb	0	; () banked
  8674  003A68  6980               	setf	?_digitalRead& (0+255),b
  8675  003A6A  6981               	setf	(?_digitalRead+1)& (0+255),b
  8676                           
  8677                           ; BSR set to: 0
  8678  003A6C  0012               	return		;funcret
  8679  003A6E                     __end_of_digitalRead:
  8680                           	opt stack 0
  8681                           tblptru	equ	0xFF8
  8682                           tblptrh	equ	0xFF7
  8683                           tblptrl	equ	0xFF6
  8684                           tablat	equ	0xFF5
  8685                           prodh	equ	0xFF4
  8686                           prodl	equ	0xFF3
  8687                           postinc0	equ	0xFEE
  8688                           wreg	equ	0xFE8
  8689                           postdec1	equ	0xFE5
  8690                           fsr1l	equ	0xFE1
  8691                           indf2	equ	0xFDF
  8692                           postinc2	equ	0xFDE
  8693                           postdec2	equ	0xFDD
  8694                           fsr2h	equ	0xFDA
  8695                           fsr2l	equ	0xFD9
  8696                           status	equ	0xFD8
  8697                           
  8698 ;; *************** function _analogRead *****************
  8699 ;; Defined at:
  8700 ;;		line 90 in file "iopin.c"
  8701 ;; Parameters:    Size  Location     Type
  8702 ;;  channel         2    0[BANK0 ] int 
  8703 ;; Auto vars:     Size  Location     Type
  8704 ;;		None
  8705 ;; Return value:  Size  Location     Type
  8706 ;;                  4    0[BANK0 ] long 
  8707 ;; Registers used:
  8708 ;;		wreg, status,2, status,0
  8709 ;; Tracked objects:
  8710 ;;		On entry : 0/0
  8711 ;;		On exit  : 0/0
  8712 ;;		Unchanged: 0/0
  8713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8714 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8716 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8717 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8718 ;;Total ram usage:        6 bytes
  8719 ;; Hardware stack levels used:    1
  8720 ;; Hardware stack levels required when called:    6
  8721 ;; This function calls:
  8722 ;;		Nothing
  8723 ;; This function is called by:
  8724 ;;		_sortBattery
  8725 ;; This function uses a non-reentrant model
  8726 ;;
  8727                           
  8728                           	psect	text23
  8729  004FAA                     __ptext23:
  8730                           	opt stack 0
  8731  004FAA                     _analogRead:
  8732                           	opt stack 23
  8733                           
  8734                           ;iopin.c: 91: ADCON0 = channel<<2;
  8735                           
  8736                           ; BSR set to: 0
  8737                           ;incstack = 0
  8738  004FAA  0100               	movlb	0	; () banked
  8739  004FAC  4580               	rlncf	analogRead@channel& (0+255),w,b
  8740  004FAE  46E8               	rlncf	wreg,f,c
  8741  004FB0  0BFC               	andlw	252
  8742  004FB2  6EC2               	movwf	4034,c	;volatile
  8743                           
  8744                           ; BSR set to: 0
  8745                           ;iopin.c: 92: ADCON0 |= 1<<0;
  8746  004FB4  80C2               	bsf	4034,0,c	;volatile
  8747                           
  8748                           ; BSR set to: 0
  8749                           ;iopin.c: 93: ADCON0 |= 1<<1;
  8750  004FB6  82C2               	bsf	4034,1,c	;volatile
  8751  004FB8                     l320:
  8752  004FB8  B2C2               	btfsc	4034,1,c	;volatile
  8753  004FBA  D7FE               	goto	l320
  8754                           
  8755                           ;iopin.c: 97: return (ADRESH<<8) + ADRESL;
  8756  004FBC  50C3               	movf	4035,w,c	;volatile
  8757  004FBE  CFC4 F084          	movff	4036,??_analogRead	;volatile
  8758  004FC2  0100               	movlb	0	; () banked
  8759  004FC4  6B85               	clrf	(??_analogRead+1)& (0+255),b
  8760  004FC6  C084  F085         	movff	??_analogRead,??_analogRead+1
  8761  004FCA  0100               	movlb	0	; () banked
  8762  004FCC  6B84               	clrf	??_analogRead& (0+255),b
  8763  004FCE  0100               	movlb	0	; () banked
  8764  004FD0  2784               	addwf	??_analogRead& (0+255),f,b
  8765  004FD2  0E00               	movlw	0
  8766  004FD4  2385               	addwfc	(??_analogRead+1)& (0+255),f,b
  8767  004FD6  C084  F080         	movff	??_analogRead,?_analogRead
  8768  004FDA  C085  F081         	movff	??_analogRead+1,?_analogRead+1
  8769  004FDE  0100               	movlb	0	; () banked
  8770  004FE0  0E00               	movlw	0
  8771  004FE2  BF81               	btfsc	(?_analogRead+1)& (0+255),7,b
  8772  004FE4  0EFF               	movlw	-1
  8773  004FE6  6F82               	movwf	(?_analogRead+2)& (0+255),b
  8774  004FE8  6F83               	movwf	(?_analogRead+3)& (0+255),b
  8775  004FEA  0012               	return	
  8776  004FEC                     __end_of_analogRead:
  8777                           	opt stack 0
  8778                           tblptru	equ	0xFF8
  8779                           tblptrh	equ	0xFF7
  8780                           tblptrl	equ	0xFF6
  8781                           tablat	equ	0xFF5
  8782                           prodh	equ	0xFF4
  8783                           prodl	equ	0xFF3
  8784                           postinc0	equ	0xFEE
  8785                           wreg	equ	0xFE8
  8786                           postdec1	equ	0xFE5
  8787                           fsr1l	equ	0xFE1
  8788                           indf2	equ	0xFDF
  8789                           postinc2	equ	0xFDE
  8790                           postdec2	equ	0xFDD
  8791                           fsr2h	equ	0xFDA
  8792                           fsr2l	equ	0xFD9
  8793                           status	equ	0xFD8
  8794                           
  8795 ;; *************** function _pinSetup *****************
  8796 ;; Defined at:
  8797 ;;		line 215 in file "main.c"
  8798 ;; Parameters:    Size  Location     Type
  8799 ;;		None
  8800 ;; Auto vars:     Size  Location     Type
  8801 ;;		None
  8802 ;; Return value:  Size  Location     Type
  8803 ;;                  1    wreg      void 
  8804 ;; Registers used:
  8805 ;;		wreg, status,2, status,0
  8806 ;; Tracked objects:
  8807 ;;		On entry : 0/0
  8808 ;;		On exit  : 0/0
  8809 ;;		Unchanged: 0/0
  8810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8815 ;;Total ram usage:        0 bytes
  8816 ;; Hardware stack levels used:    1
  8817 ;; Hardware stack levels required when called:    6
  8818 ;; This function calls:
  8819 ;;		Nothing
  8820 ;; This function is called by:
  8821 ;;		_main
  8822 ;; This function uses a non-reentrant model
  8823 ;;
  8824                           
  8825                           	psect	text24
  8826  00502C                     __ptext24:
  8827                           	opt stack 0
  8828  00502C                     _pinSetup:
  8829                           	opt stack 24
  8830                           
  8831                           ;main.c: 221: TRISA = 0xFF;
  8832                           
  8833                           ; BSR set to: 0
  8834                           ;incstack = 0
  8835  00502C  6892               	setf	3986,c	;volatile
  8836                           
  8837                           ;main.c: 222: TRISB = 0xFF;
  8838  00502E  6893               	setf	3987,c	;volatile
  8839                           
  8840                           ;main.c: 223: TRISC = 0b11000000;
  8841  005030  0EC0               	movlw	192
  8842  005032  6E94               	movwf	3988,c	;volatile
  8843                           
  8844                           ;main.c: 224: TRISD = 0x00;
  8845  005034  0E00               	movlw	0
  8846  005036  6E95               	movwf	3989,c	;volatile
  8847                           
  8848                           ;main.c: 225: TRISE = 0x00;
  8849  005038  0E00               	movlw	0
  8850  00503A  6E96               	movwf	3990,c	;volatile
  8851                           
  8852                           ;main.c: 227: LATA = 0x00;
  8853  00503C  0E00               	movlw	0
  8854  00503E  6E89               	movwf	3977,c	;volatile
  8855                           
  8856                           ;main.c: 228: LATB = 0x00;
  8857  005040  0E00               	movlw	0
  8858  005042  6E8A               	movwf	3978,c	;volatile
  8859                           
  8860                           ;main.c: 229: LATC = 0x00;
  8861  005044  0E00               	movlw	0
  8862  005046  6E8B               	movwf	3979,c	;volatile
  8863                           
  8864                           ;main.c: 230: LATD = 0x00;
  8865  005048  0E00               	movlw	0
  8866  00504A  6E8C               	movwf	3980,c	;volatile
  8867                           
  8868                           ;main.c: 231: LATE = 0x00;
  8869  00504C  0E00               	movlw	0
  8870  00504E  6E8D               	movwf	3981,c	;volatile
  8871                           
  8872                           ;main.c: 233: ADCON0 = 0x00;
  8873  005050  0E00               	movlw	0
  8874  005052  6EC2               	movwf	4034,c	;volatile
  8875                           
  8876                           ;main.c: 235: ADCON1 |= 0x0B;
  8877  005054  0E0B               	movlw	11
  8878  005056  12C1               	iorwf	4033,f,c	;volatile
  8879                           
  8880                           ;main.c: 240: ADCON2 = 0;
  8881  005058  0E00               	movlw	0
  8882  00505A  6EC0               	movwf	4032,c	;volatile
  8883                           
  8884                           ;main.c: 241: ADCON2 |= 0b010;
  8885  00505C  82C0               	bsf	4032,1,c	;volatile
  8886                           
  8887                           ;main.c: 242: ADCON2 |= 0b110<<3;
  8888  00505E  0E30               	movlw	48
  8889  005060  12C0               	iorwf	4032,f,c	;volatile
  8890                           
  8891                           ;main.c: 243: ADCON2 |= 1<<7;
  8892  005062  8EC0               	bsf	4032,7,c	;volatile
  8893                           
  8894                           ;main.c: 247: INT0IE = 1;
  8895  005064  88F2               	bsf	intcon,4,c	;volatile
  8896                           
  8897                           ;main.c: 248: (INTCONbits.GIE = 1);
  8898  005066  8EF2               	bsf	intcon,7,c	;volatile
  8899  005068  0012               	return		;funcret
  8900  00506A                     __end_of_pinSetup:
  8901                           	opt stack 0
  8902                           tblptru	equ	0xFF8
  8903                           tblptrh	equ	0xFF7
  8904                           tblptrl	equ	0xFF6
  8905                           tablat	equ	0xFF5
  8906                           prodh	equ	0xFF4
  8907                           prodl	equ	0xFF3
  8908                           intcon	equ	0xFF2
  8909                           postinc0	equ	0xFEE
  8910                           wreg	equ	0xFE8
  8911                           postdec1	equ	0xFE5
  8912                           fsr1l	equ	0xFE1
  8913                           indf2	equ	0xFDF
  8914                           postinc2	equ	0xFDE
  8915                           postdec2	equ	0xFDD
  8916                           fsr2h	equ	0xFDA
  8917                           fsr2l	equ	0xFD9
  8918                           status	equ	0xFD8
  8919                           
  8920 ;; *************** function _lcdHome *****************
  8921 ;; Defined at:
  8922 ;;		line 70 in file "lcd.c"
  8923 ;; Parameters:    Size  Location     Type
  8924 ;;		None
  8925 ;; Auto vars:     Size  Location     Type
  8926 ;;		None
  8927 ;; Return value:  Size  Location     Type
  8928 ;;                  2   18[None  ] int 
  8929 ;; Registers used:
  8930 ;;		wreg, status,2, status,0, cstack
  8931 ;; Tracked objects:
  8932 ;;		On entry : 0/0
  8933 ;;		On exit  : 0/0
  8934 ;;		Unchanged: 0/0
  8935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8940 ;;Total ram usage:        0 bytes
  8941 ;; Hardware stack levels used:    1
  8942 ;; Hardware stack levels required when called:    8
  8943 ;; This function calls:
  8944 ;;		_lcdInst
  8945 ;; This function is called by:
  8946 ;;		_main
  8947 ;; This function uses a non-reentrant model
  8948 ;;
  8949                           
  8950                           	psect	text25
  8951  00526C                     __ptext25:
  8952                           	opt stack 0
  8953  00526C                     _lcdHome:
  8954                           	opt stack 22
  8955                           
  8956                           ;lcd.c: 71: lcdInst(0b11000000);
  8957                           
  8958                           ;incstack = 0
  8959  00526C  0EC0               	movlw	192
  8960  00526E  ECAF  F028         	call	_lcdInst
  8961  005272  0012               	return		;funcret
  8962  005274                     __end_of_lcdHome:
  8963                           	opt stack 0
  8964                           tblptru	equ	0xFF8
  8965                           tblptrh	equ	0xFF7
  8966                           tblptrl	equ	0xFF6
  8967                           tablat	equ	0xFF5
  8968                           prodh	equ	0xFF4
  8969                           prodl	equ	0xFF3
  8970                           intcon	equ	0xFF2
  8971                           postinc0	equ	0xFEE
  8972                           wreg	equ	0xFE8
  8973                           postdec1	equ	0xFE5
  8974                           fsr1l	equ	0xFE1
  8975                           indf2	equ	0xFDF
  8976                           postinc2	equ	0xFDE
  8977                           postdec2	equ	0xFDD
  8978                           fsr2h	equ	0xFDA
  8979                           fsr2l	equ	0xFD9
  8980                           status	equ	0xFD8
  8981                           
  8982 ;; *************** function _initServo *****************
  8983 ;; Defined at:
  8984 ;;		line 21 in file "servo.c"
  8985 ;; Parameters:    Size  Location     Type
  8986 ;;  motor           2  118[BANK0 ] PTR int 
  8987 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
  8988 ;;  angle           2  120[BANK0 ] int 
  8989 ;; Auto vars:     Size  Location     Type
  8990 ;;		None
  8991 ;; Return value:  Size  Location     Type
  8992 ;;                  1    wreg      void 
  8993 ;; Registers used:
  8994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8995 ;; Tracked objects:
  8996 ;;		On entry : 0/0
  8997 ;;		On exit  : 0/0
  8998 ;;		Unchanged: 0/0
  8999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9000 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9002 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9003 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9004 ;;Total ram usage:        8 bytes
  9005 ;; Hardware stack levels used:    1
  9006 ;; Hardware stack levels required when called:   10
  9007 ;; This function calls:
  9008 ;;		_initTimer
  9009 ;;		_setAngle
  9010 ;;		_startTimer
  9011 ;; This function is called by:
  9012 ;;		_main
  9013 ;; This function uses a non-reentrant model
  9014 ;;
  9015                           
  9016                           	psect	text26
  9017  004982                     __ptext26:
  9018                           	opt stack 0
  9019  004982                     _initServo:
  9020                           	opt stack 20
  9021                           
  9022                           ;servo.c: 22: n++;
  9023                           
  9024                           ;incstack = 0
  9025  004982  4A7D               	infsnz	_n,f,c
  9026  004984  2A7E               	incf	_n+1,f,c
  9027                           
  9028                           ;servo.c: 23: servos[n-1] = motor;
  9029  004986  0EFE               	movlw	254
  9030  004988  0100               	movlb	0	; () banked
  9031  00498A  6FFA               	movwf	??_initServo& (0+255),b
  9032  00498C  0EFF               	movlw	255
  9033  00498E  0100               	movlb	0	; () banked
  9034  004990  6FFB               	movwf	(??_initServo+1)& (0+255),b
  9035  004992  C07D  F0FC         	movff	_n,??_initServo+2
  9036  004996  C07E  F0FD         	movff	_n+1,??_initServo+3
  9037  00499A  90D8               	bcf	status,0,c
  9038  00499C  0100               	movlb	0	; () banked
  9039  00499E  37FC               	rlcf	(??_initServo+2)& (0+255),f,b
  9040  0049A0  37FD               	rlcf	(??_initServo+3)& (0+255),f,b
  9041  0049A2  0100               	movlb	0	; () banked
  9042  0049A4  51FA               	movf	??_initServo& (0+255),w,b
  9043  0049A6  0100               	movlb	0	; () banked
  9044  0049A8  27FC               	addwf	(??_initServo+2)& (0+255),f,b
  9045  0049AA  0100               	movlb	0	; () banked
  9046  0049AC  51FB               	movf	(??_initServo+1)& (0+255),w,b
  9047  0049AE  0100               	movlb	0	; () banked
  9048  0049B0  23FD               	addwfc	(??_initServo+3)& (0+255),f,b
  9049  0049B2  0E73               	movlw	low _servos
  9050  0049B4  0100               	movlb	0	; () banked
  9051  0049B6  25FC               	addwf	(??_initServo+2)& (0+255),w,b
  9052  0049B8  6ED9               	movwf	fsr2l,c
  9053  0049BA  0E01               	movlw	high _servos
  9054  0049BC  0100               	movlb	0	; () banked
  9055  0049BE  21FD               	addwfc	(??_initServo+3)& (0+255),w,b
  9056  0049C0  6EDA               	movwf	fsr2h,c
  9057  0049C2  C0F6  FFDE         	movff	initServo@motor,postinc2
  9058  0049C6  C0F7  FFDD         	movff	initServo@motor+1,postdec2
  9059                           
  9060                           ; BSR set to: 0
  9061                           ;servo.c: 24: setAngle(motor, angle);
  9062  0049CA  C0F6  F0EC         	movff	initServo@motor,setAngle@motor
  9063  0049CE  C0F7  F0ED         	movff	initServo@motor+1,setAngle@motor+1
  9064  0049D2  C0F8  F0EE         	movff	initServo@angle,setAngle@angle
  9065  0049D6  C0F9  F0EF         	movff	initServo@angle+1,setAngle@angle+1
  9066  0049DA  EC4A  F021         	call	_setAngle	;wreg free
  9067                           
  9068                           ;servo.c: 26: initTimer(0);
  9069  0049DE  0E00               	movlw	0
  9070  0049E0  0100               	movlb	0	; () banked
  9071  0049E2  6F81               	movwf	(initTimer@timer+1)& (0+255),b
  9072  0049E4  0E00               	movlw	0
  9073  0049E6  6F80               	movwf	initTimer@timer& (0+255),b
  9074  0049E8  ECF8  F026         	call	_initTimer	;wreg free
  9075                           
  9076                           ;servo.c: 27: startTimer(0,0);
  9077  0049EC  0E00               	movlw	0
  9078  0049EE  0100               	movlb	0	; () banked
  9079  0049F0  6F81               	movwf	(startTimer@timer+1)& (0+255),b
  9080  0049F2  0E00               	movlw	0
  9081  0049F4  6F80               	movwf	startTimer@timer& (0+255),b
  9082  0049F6  0E00               	movlw	0
  9083  0049F8  0100               	movlb	0	; () banked
  9084  0049FA  6F82               	movwf	startTimer@val& (0+255),b
  9085  0049FC  0E00               	movlw	0
  9086  0049FE  6F83               	movwf	(startTimer@val+1)& (0+255),b
  9087  004A00  0E00               	movlw	0
  9088  004A02  6F84               	movwf	(startTimer@val+2)& (0+255),b
  9089  004A04  0E00               	movlw	0
  9090  004A06  6F85               	movwf	(startTimer@val+3)& (0+255),b
  9091  004A08  ECD0  F026         	call	_startTimer	;wreg free
  9092  004A0C  0012               	return		;funcret
  9093  004A0E                     __end_of_initServo:
  9094                           	opt stack 0
  9095                           tblptru	equ	0xFF8
  9096                           tblptrh	equ	0xFF7
  9097                           tblptrl	equ	0xFF6
  9098                           tablat	equ	0xFF5
  9099                           prodh	equ	0xFF4
  9100                           prodl	equ	0xFF3
  9101                           intcon	equ	0xFF2
  9102                           postinc0	equ	0xFEE
  9103                           wreg	equ	0xFE8
  9104                           postdec1	equ	0xFE5
  9105                           fsr1l	equ	0xFE1
  9106                           indf2	equ	0xFDF
  9107                           postinc2	equ	0xFDE
  9108                           postdec2	equ	0xFDD
  9109                           fsr2h	equ	0xFDA
  9110                           fsr2l	equ	0xFD9
  9111                           status	equ	0xFD8
  9112                           
  9113 ;; *************** function _startTimer *****************
  9114 ;; Defined at:
  9115 ;;		line 76 in file "timer.c"
  9116 ;; Parameters:    Size  Location     Type
  9117 ;;  timer           2    0[BANK0 ] int 
  9118 ;;  val             4    2[BANK0 ] long 
  9119 ;; Auto vars:     Size  Location     Type
  9120 ;;		None
  9121 ;; Return value:  Size  Location     Type
  9122 ;;                  1    wreg      void 
  9123 ;; Registers used:
  9124 ;;		wreg, status,2, status,0
  9125 ;; Tracked objects:
  9126 ;;		On entry : 0/0
  9127 ;;		On exit  : 0/0
  9128 ;;		Unchanged: 0/0
  9129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9130 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9132 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9133 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9134 ;;Total ram usage:        8 bytes
  9135 ;; Hardware stack levels used:    1
  9136 ;; Hardware stack levels required when called:    6
  9137 ;; This function calls:
  9138 ;;		Nothing
  9139 ;; This function is called by:
  9140 ;;		_main
  9141 ;;		_initServo
  9142 ;;		_testFrequency
  9143 ;; This function uses a non-reentrant model
  9144 ;;
  9145                           
  9146                           	psect	text27
  9147  004DA0                     __ptext27:
  9148                           	opt stack 0
  9149  004DA0                     _startTimer:
  9150                           	opt stack 24
  9151                           
  9152                           ;timer.c: 77: switch(timer){
  9153                           
  9154                           ;incstack = 0
  9155  004DA0  D012               	goto	l5328
  9156  004DA2                     l401:
  9157                           
  9158                           ; BSR set to: 0
  9159                           ;timer.c: 79: TMR0H = val>>8;
  9160  004DA2  C083  FFD7         	movff	startTimer@val+1,4055	;volatile
  9161                           
  9162                           ;timer.c: 80: TMR0L = val;
  9163  004DA6  C082  FFD6         	movff	startTimer@val,4054	;volatile
  9164                           
  9165                           ; BSR set to: 0
  9166                           ;timer.c: 81: T0CON |= 1<<7;
  9167  004DAA  8ED5               	bsf	4053,7,c	;volatile
  9168                           
  9169                           ;timer.c: 82: break;
  9170  004DAC  0012               	return	
  9171  004DAE                     l403:
  9172                           
  9173                           ; BSR set to: 0
  9174                           ;timer.c: 84: TMR1H = val>>8;
  9175  004DAE  C083  FFCF         	movff	startTimer@val+1,4047	;volatile
  9176                           
  9177                           ;timer.c: 85: TMR1L = val;
  9178  004DB2  C082  FFCE         	movff	startTimer@val,4046	;volatile
  9179                           
  9180                           ; BSR set to: 0
  9181                           ;timer.c: 86: T1CON |= 1<<0;
  9182  004DB6  80CD               	bsf	4045,0,c	;volatile
  9183                           
  9184                           ;timer.c: 87: break;
  9185  004DB8  0012               	return	
  9186  004DBA                     l404:
  9187                           
  9188                           ; BSR set to: 0
  9189                           ;timer.c: 89: TMR3H = val>>8;
  9190  004DBA  C083  FFB3         	movff	startTimer@val+1,4019	;volatile
  9191                           
  9192                           ;timer.c: 90: TMR3L = val;
  9193  004DBE  C082  FFB2         	movff	startTimer@val,4018	;volatile
  9194                           
  9195                           ; BSR set to: 0
  9196                           ;timer.c: 91: T3CON |= 1<<0;
  9197  004DC2  80B1               	bsf	4017,0,c	;volatile
  9198                           
  9199                           ;timer.c: 92: }
  9200  004DC4  0012               	return	
  9201  004DC6                     l5328:
  9202  004DC6  C080  F086         	movff	startTimer@timer,??_startTimer
  9203  004DCA  C081  F087         	movff	startTimer@timer+1,??_startTimer+1
  9204                           
  9205                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9206                           ; Switch size 1, requested type "space"
  9207                           ; Number of cases is 1, Range of values is 0 to 0
  9208                           ; switch strategies available:
  9209                           ; Name         Instructions Cycles
  9210                           ; simple_byte            4     3 (average)
  9211                           ;	Chosen strategy is simple_byte
  9212  004DCE  0100               	movlb	0	; () banked
  9213  004DD0  5187               	movf	(??_startTimer+1)& (0+255),w,b
  9214  004DD2  0A00               	xorlw	0	; case 0
  9215  004DD4  A4D8               	btfss	status,2,c
  9216  004DD6  0012               	return	
  9217                           
  9218                           ; BSR set to: 0
  9219                           ; Switch size 1, requested type "space"
  9220                           ; Number of cases is 3, Range of values is 0 to 3
  9221                           ; switch strategies available:
  9222                           ; Name         Instructions Cycles
  9223                           ; simple_byte           10     6 (average)
  9224                           ;	Chosen strategy is simple_byte
  9225  004DD8  0100               	movlb	0	; () banked
  9226  004DDA  5186               	movf	??_startTimer& (0+255),w,b
  9227  004DDC  0A00               	xorlw	0	; case 0
  9228  004DDE  B4D8               	btfsc	status,2,c
  9229  004DE0  D7E0               	goto	l401
  9230  004DE2  0A01               	xorlw	1	; case 1
  9231  004DE4  B4D8               	btfsc	status,2,c
  9232  004DE6  D7E3               	goto	l403
  9233  004DE8  0A02               	xorlw	2	; case 3
  9234  004DEA  A4D8               	btfss	status,2,c
  9235  004DEC  0012               	return	
  9236  004DEE  D7E5               	goto	l404
  9237  004DF0                     __end_of_startTimer:
  9238                           	opt stack 0
  9239                           tblptru	equ	0xFF8
  9240                           tblptrh	equ	0xFF7
  9241                           tblptrl	equ	0xFF6
  9242                           tablat	equ	0xFF5
  9243                           prodh	equ	0xFF4
  9244                           prodl	equ	0xFF3
  9245                           intcon	equ	0xFF2
  9246                           postinc0	equ	0xFEE
  9247                           wreg	equ	0xFE8
  9248                           postdec1	equ	0xFE5
  9249                           fsr1l	equ	0xFE1
  9250                           indf2	equ	0xFDF
  9251                           postinc2	equ	0xFDE
  9252                           postdec2	equ	0xFDD
  9253                           fsr2h	equ	0xFDA
  9254                           fsr2l	equ	0xFD9
  9255                           status	equ	0xFD8
  9256                           
  9257 ;; *************** function _setAngle *****************
  9258 ;; Defined at:
  9259 ;;		line 41 in file "servo.c"
  9260 ;; Parameters:    Size  Location     Type
  9261 ;;  motor           2  108[BANK0 ] PTR int 
  9262 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
  9263 ;;  angle           2  110[BANK0 ] int 
  9264 ;; Auto vars:     Size  Location     Type
  9265 ;;  i               2  116[BANK0 ] int 
  9266 ;;  period          2  114[BANK0 ] unsigned int 
  9267 ;; Return value:  Size  Location     Type
  9268 ;;                  1    wreg      void 
  9269 ;; Registers used:
  9270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9271 ;; Tracked objects:
  9272 ;;		On entry : 0/0
  9273 ;;		On exit  : 0/0
  9274 ;;		Unchanged: 0/0
  9275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9276 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9277 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9278 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9279 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9280 ;;Total ram usage:       10 bytes
  9281 ;; Hardware stack levels used:    1
  9282 ;; Hardware stack levels required when called:    9
  9283 ;; This function calls:
  9284 ;;		_angleToPulse
  9285 ;; This function is called by:
  9286 ;;		_sortBattery
  9287 ;;		_initServo
  9288 ;; This function uses a non-reentrant model
  9289 ;;
  9290                           
  9291                           	psect	text28
  9292  004294                     __ptext28:
  9293                           	opt stack 0
  9294  004294                     _setAngle:
  9295                           	opt stack 20
  9296                           
  9297                           ;servo.c: 42: unsigned int period = 50000;
  9298                           
  9299                           ; BSR set to: 0
  9300                           ;incstack = 0
  9301  004294  0EC3               	movlw	195
  9302  004296  0100               	movlb	0	; () banked
  9303  004298  6FF3               	movwf	(setAngle@period+1)& (0+255),b
  9304  00429A  0E50               	movlw	80
  9305  00429C  6FF2               	movwf	setAngle@period& (0+255),b
  9306                           
  9307                           ;servo.c: 43: for(int i = 0; i < n; i++){
  9308  00429E  0E00               	movlw	0
  9309  0042A0  0100               	movlb	0	; () banked
  9310  0042A2  6FF5               	movwf	(setAngle@i+1)& (0+255),b
  9311  0042A4  0E00               	movlw	0
  9312  0042A6  6FF4               	movwf	setAngle@i& (0+255),b
  9313  0042A8  D03F               	goto	l5712
  9314  0042AA                     l5704:
  9315                           
  9316                           ; BSR set to: 0
  9317                           ;servo.c: 44: if(servos[i] == motor){
  9318  0042AA  90D8               	bcf	status,0,c
  9319  0042AC  0100               	movlb	0	; () banked
  9320  0042AE  35F4               	rlcf	setAngle@i& (0+255),w,b
  9321  0042B0  6ED9               	movwf	fsr2l,c
  9322  0042B2  0100               	movlb	0	; () banked
  9323  0042B4  35F5               	rlcf	(setAngle@i+1)& (0+255),w,b
  9324  0042B6  6EDA               	movwf	fsr2h,c
  9325  0042B8  0E73               	movlw	low _servos
  9326  0042BA  26D9               	addwf	fsr2l,f,c
  9327  0042BC  0E01               	movlw	high _servos
  9328  0042BE  22DA               	addwfc	fsr2h,f,c
  9329  0042C0  0100               	movlb	0	; () banked
  9330  0042C2  51EC               	movf	setAngle@motor& (0+255),w,b
  9331  0042C4  18DE               	xorwf	postinc2,w,c
  9332  0042C6  E11C               	bnz	l5708
  9333  0042C8  0100               	movlb	0	; () banked
  9334  0042CA  51ED               	movf	(setAngle@motor+1)& (0+255),w,b
  9335  0042CC  18DE               	xorwf	postinc2,w,c
  9336  0042CE  A4D8               	btfss	status,2,c
  9337  0042D0  D017               	goto	l5708
  9338                           
  9339                           ; BSR set to: 0
  9340                           ;servo.c: 45: pulse[i] = angleToPulse(angle);
  9341  0042D2  C0EE  F0D5         	movff	setAngle@angle,angleToPulse@angle
  9342  0042D6  C0EF  F0D6         	movff	setAngle@angle+1,angleToPulse@angle+1
  9343  0042DA  ECBF  F018         	call	_angleToPulse	;wreg free
  9344  0042DE  90D8               	bcf	status,0,c
  9345  0042E0  0100               	movlb	0	; () banked
  9346  0042E2  35F4               	rlcf	setAngle@i& (0+255),w,b
  9347  0042E4  6ED9               	movwf	fsr2l,c
  9348  0042E6  0100               	movlb	0	; () banked
  9349  0042E8  35F5               	rlcf	(setAngle@i+1)& (0+255),w,b
  9350  0042EA  6EDA               	movwf	fsr2h,c
  9351  0042EC  0E6B               	movlw	low _pulse
  9352  0042EE  26D9               	addwf	fsr2l,f,c
  9353  0042F0  0E01               	movlw	high _pulse
  9354  0042F2  22DA               	addwfc	fsr2h,f,c
  9355  0042F4  0100               	movlb	0	; () banked
  9356  0042F6  C0D5  FFDE         	movff	?_angleToPulse,postinc2
  9357  0042FA  0100               	movlb	0	; () banked
  9358  0042FC  C0D6  FFDD         	movff	?_angleToPulse+1,postdec2
  9359  004300                     l5708:
  9360                           
  9361                           ; BSR set to: 0
  9362                           ;servo.c: 46: }
  9363                           ;servo.c: 47: period-=pulse[i];
  9364  004300  90D8               	bcf	status,0,c
  9365  004302  0100               	movlb	0	; () banked
  9366  004304  35F4               	rlcf	setAngle@i& (0+255),w,b
  9367  004306  6ED9               	movwf	fsr2l,c
  9368  004308  0100               	movlb	0	; () banked
  9369  00430A  35F5               	rlcf	(setAngle@i+1)& (0+255),w,b
  9370  00430C  6EDA               	movwf	fsr2h,c
  9371  00430E  0E6B               	movlw	low _pulse
  9372  004310  26D9               	addwf	fsr2l,f,c
  9373  004312  0E01               	movlw	high _pulse
  9374  004314  22DA               	addwfc	fsr2h,f,c
  9375  004316  50DE               	movf	postinc2,w,c
  9376  004318  0100               	movlb	0	; () banked
  9377  00431A  5FF2               	subwf	setAngle@period& (0+255),f,b
  9378  00431C  50DD               	movf	postdec2,w,c
  9379  00431E  0100               	movlb	0	; () banked
  9380  004320  5BF3               	subwfb	(setAngle@period+1)& (0+255),f,b
  9381                           
  9382                           ; BSR set to: 0
  9383  004322  0100               	movlb	0	; () banked
  9384  004324  4BF4               	infsnz	setAngle@i& (0+255),f,b
  9385  004326  2BF5               	incf	(setAngle@i+1)& (0+255),f,b
  9386  004328                     l5712:
  9387                           
  9388                           ; BSR set to: 0
  9389  004328  507D               	movf	_n,w,c
  9390  00432A  0100               	movlb	0	; () banked
  9391  00432C  5DF4               	subwf	setAngle@i& (0+255),w,b
  9392  00432E  0100               	movlb	0	; () banked
  9393  004330  51F5               	movf	(setAngle@i+1)& (0+255),w,b
  9394  004332  0A80               	xorlw	128
  9395  004334  0100               	movlb	0	; () banked
  9396  004336  6FF0               	movwf	??_setAngle& (0+255),b
  9397  004338  507E               	movf	_n+1,w,c
  9398  00433A  0A80               	xorlw	128
  9399  00433C  0100               	movlb	0	; () banked
  9400  00433E  59F0               	subwfb	??_setAngle& (0+255),w,b
  9401  004340  A0D8               	btfss	status,0,c
  9402  004342  D7B3               	goto	l5704
  9403                           
  9404                           ; BSR set to: 0
  9405                           ;servo.c: 48: }
  9406                           ;servo.c: 49: pulse[n] = period;
  9407                           
  9408                           ; BSR set to: 0
  9409  004344  90D8               	bcf	status,0,c
  9410  004346  347D               	rlcf	_n,w,c
  9411  004348  6ED9               	movwf	fsr2l,c
  9412  00434A  347E               	rlcf	_n+1,w,c
  9413  00434C  6EDA               	movwf	fsr2h,c
  9414  00434E  0E6B               	movlw	low _pulse
  9415  004350  26D9               	addwf	fsr2l,f,c
  9416  004352  0E01               	movlw	high _pulse
  9417  004354  22DA               	addwfc	fsr2h,f,c
  9418  004356  C0F2  FFDE         	movff	setAngle@period,postinc2
  9419  00435A  C0F3  FFDD         	movff	setAngle@period+1,postdec2
  9420                           
  9421                           ; BSR set to: 0
  9422  00435E  0012               	return		;funcret
  9423  004360                     __end_of_setAngle:
  9424                           	opt stack 0
  9425                           tblptru	equ	0xFF8
  9426                           tblptrh	equ	0xFF7
  9427                           tblptrl	equ	0xFF6
  9428                           tablat	equ	0xFF5
  9429                           prodh	equ	0xFF4
  9430                           prodl	equ	0xFF3
  9431                           intcon	equ	0xFF2
  9432                           postinc0	equ	0xFEE
  9433                           wreg	equ	0xFE8
  9434                           postdec1	equ	0xFE5
  9435                           fsr1l	equ	0xFE1
  9436                           indf2	equ	0xFDF
  9437                           postinc2	equ	0xFDE
  9438                           postdec2	equ	0xFDD
  9439                           fsr2h	equ	0xFDA
  9440                           fsr2l	equ	0xFD9
  9441                           status	equ	0xFD8
  9442                           
  9443 ;; *************** function _angleToPulse *****************
  9444 ;; Defined at:
  9445 ;;		line 33 in file "servo.c"
  9446 ;; Parameters:    Size  Location     Type
  9447 ;;  angle           2   85[BANK0 ] int 
  9448 ;; Auto vars:     Size  Location     Type
  9449 ;;  a000            4  104[BANK0 ] long 
  9450 ;;  a180            4   97[BANK0 ] long 
  9451 ;;  offset          4   93[BANK0 ] long 
  9452 ;; Return value:  Size  Location     Type
  9453 ;;                  4   85[BANK0 ] long 
  9454 ;; Registers used:
  9455 ;;		wreg, status,2, status,0, cstack
  9456 ;; Tracked objects:
  9457 ;;		On entry : 0/0
  9458 ;;		On exit  : 0/0
  9459 ;;		Unchanged: 0/0
  9460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9461 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9462 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9463 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9464 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9465 ;;Total ram usage:       23 bytes
  9466 ;; Hardware stack levels used:    1
  9467 ;; Hardware stack levels required when called:    8
  9468 ;; This function calls:
  9469 ;;		___altoft
  9470 ;;		___awtoft
  9471 ;;		___ftadd
  9472 ;;		___ftdiv
  9473 ;;		___ftmul
  9474 ;;		___fttol
  9475 ;; This function is called by:
  9476 ;;		_setAngle
  9477 ;; This function uses a non-reentrant model
  9478 ;;
  9479                           
  9480                           	psect	text29
  9481  00317E                     __ptext29:
  9482                           	opt stack 0
  9483  00317E                     _angleToPulse:
  9484                           	opt stack 20
  9485                           
  9486                           ;servo.c: 34: long offset = -600;
  9487                           
  9488                           ; BSR set to: 0
  9489                           ;incstack = 0
  9490  00317E  0EA8               	movlw	168
  9491  003180  0100               	movlb	0	; () banked
  9492  003182  6FDD               	movwf	angleToPulse@offset& (0+255),b
  9493  003184  0EFD               	movlw	253
  9494  003186  6FDE               	movwf	(angleToPulse@offset+1)& (0+255),b
  9495  003188  0EFF               	movlw	255
  9496  00318A  6FDF               	movwf	(angleToPulse@offset+2)& (0+255),b
  9497  00318C  0EFF               	movlw	255
  9498  00318E  6FE0               	movwf	(angleToPulse@offset+3)& (0+255),b
  9499                           
  9500                           ;servo.c: 35: long a000 = 1250;
  9501  003190  0EE2               	movlw	226
  9502  003192  0100               	movlb	0	; () banked
  9503  003194  6FE8               	movwf	angleToPulse@a000& (0+255),b
  9504  003196  0E04               	movlw	4
  9505  003198  6FE9               	movwf	(angleToPulse@a000+1)& (0+255),b
  9506  00319A  0E00               	movlw	0
  9507  00319C  6FEA               	movwf	(angleToPulse@a000+2)& (0+255),b
  9508  00319E  0E00               	movlw	0
  9509  0031A0  6FEB               	movwf	(angleToPulse@a000+3)& (0+255),b
  9510                           
  9511                           ;servo.c: 36: long a180 = 6250;
  9512  0031A2  0E6A               	movlw	106
  9513  0031A4  0100               	movlb	0	; () banked
  9514  0031A6  6FE1               	movwf	angleToPulse@a180& (0+255),b
  9515  0031A8  0E18               	movlw	24
  9516  0031AA  6FE2               	movwf	(angleToPulse@a180+1)& (0+255),b
  9517  0031AC  0E00               	movlw	0
  9518  0031AE  6FE3               	movwf	(angleToPulse@a180+2)& (0+255),b
  9519  0031B0  0E00               	movlw	0
  9520  0031B2  6FE4               	movwf	(angleToPulse@a180+3)& (0+255),b
  9521                           
  9522                           ; BSR set to: 0
  9523                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
  9524  0031B4  C0E8  F0D9         	movff	angleToPulse@a000,??_angleToPulse
  9525  0031B8  C0E9  F0DA         	movff	angleToPulse@a000+1,??_angleToPulse+1
  9526  0031BC  C0EA  F0DB         	movff	angleToPulse@a000+2,??_angleToPulse+2
  9527  0031C0  C0EB  F0DC         	movff	angleToPulse@a000+3,??_angleToPulse+3
  9528  0031C4  0100               	movlb	0	; () banked
  9529  0031C6  1FD9               	comf	??_angleToPulse& (0+255),f,b
  9530  0031C8  1FDA               	comf	(??_angleToPulse+1)& (0+255),f,b
  9531  0031CA  1FDB               	comf	(??_angleToPulse+2)& (0+255),f,b
  9532  0031CC  1FDC               	comf	(??_angleToPulse+3)& (0+255),f,b
  9533  0031CE  2BD9               	incf	??_angleToPulse& (0+255),f,b
  9534  0031D0  0E00               	movlw	0
  9535  0031D2  23DA               	addwfc	(??_angleToPulse+1)& (0+255),f,b
  9536  0031D4  23DB               	addwfc	(??_angleToPulse+2)& (0+255),f,b
  9537  0031D6  23DC               	addwfc	(??_angleToPulse+3)& (0+255),f,b
  9538  0031D8  0100               	movlb	0	; () banked
  9539  0031DA  51E1               	movf	angleToPulse@a180& (0+255),w,b
  9540  0031DC  0100               	movlb	0	; () banked
  9541  0031DE  25D9               	addwf	??_angleToPulse& (0+255),w,b
  9542  0031E0  0100               	movlb	0	; () banked
  9543  0031E2  6F88               	movwf	___altoft@c& (0+255),b
  9544  0031E4  0100               	movlb	0	; () banked
  9545  0031E6  51E2               	movf	(angleToPulse@a180+1)& (0+255),w,b
  9546  0031E8  0100               	movlb	0	; () banked
  9547  0031EA  21DA               	addwfc	(??_angleToPulse+1)& (0+255),w,b
  9548  0031EC  0100               	movlb	0	; () banked
  9549  0031EE  6F89               	movwf	(___altoft@c+1)& (0+255),b
  9550  0031F0  0100               	movlb	0	; () banked
  9551  0031F2  51E3               	movf	(angleToPulse@a180+2)& (0+255),w,b
  9552  0031F4  0100               	movlb	0	; () banked
  9553  0031F6  21DB               	addwfc	(??_angleToPulse+2)& (0+255),w,b
  9554  0031F8  0100               	movlb	0	; () banked
  9555  0031FA  6F8A               	movwf	(___altoft@c+2)& (0+255),b
  9556  0031FC  0100               	movlb	0	; () banked
  9557  0031FE  51E4               	movf	(angleToPulse@a180+3)& (0+255),w,b
  9558  003200  0100               	movlb	0	; () banked
  9559  003202  21DC               	addwfc	(??_angleToPulse+3)& (0+255),w,b
  9560  003204  0100               	movlb	0	; () banked
  9561  003206  6F8B               	movwf	(___altoft@c+3)& (0+255),b
  9562  003208  ECDD  F023         	call	___altoft	;wreg free
  9563  00320C  C088  F0A4         	movff	?___altoft,___ftmul@f2
  9564  003210  C089  F0A5         	movff	?___altoft+1,___ftmul@f2+1
  9565  003214  C08A  F0A6         	movff	?___altoft+2,___ftmul@f2+2
  9566  003218  0E00               	movlw	0
  9567  00321A  0100               	movlb	0	; () banked
  9568  00321C  6F95               	movwf	___ftdiv@f2& (0+255),b
  9569  00321E  0E34               	movlw	52
  9570  003220  0100               	movlb	0	; () banked
  9571  003222  6F96               	movwf	(___ftdiv@f2+1)& (0+255),b
  9572  003224  0E43               	movlw	67
  9573  003226  0100               	movlb	0	; () banked
  9574  003228  6F97               	movwf	(___ftdiv@f2+2)& (0+255),b
  9575  00322A  C0D5  F088         	movff	angleToPulse@angle,___awtoft@c
  9576  00322E  C0D6  F089         	movff	angleToPulse@angle+1,___awtoft@c+1
  9577  003232  ECB3  F027         	call	___awtoft	;wreg free
  9578  003236  C088  F092         	movff	?___awtoft,___ftdiv@f1
  9579  00323A  C089  F093         	movff	?___awtoft+1,___ftdiv@f1+1
  9580  00323E  C08A  F094         	movff	?___awtoft+2,___ftdiv@f1+2
  9581  003242  EC21  F01A         	call	___ftdiv	;wreg free
  9582  003246  C092  F0A1         	movff	?___ftdiv,___ftmul@f1
  9583  00324A  C093  F0A2         	movff	?___ftdiv+1,___ftmul@f1+1
  9584  00324E  C094  F0A3         	movff	?___ftdiv+2,___ftmul@f1+2
  9585  003252  EC72  F019         	call	___ftmul	;wreg free
  9586  003256  C0A1  F0BD         	movff	?___ftmul,___ftadd@f2
  9587  00325A  C0A2  F0BE         	movff	?___ftmul+1,___ftadd@f2+1
  9588  00325E  C0A3  F0BF         	movff	?___ftmul+2,___ftadd@f2+2
  9589  003262  C0E8  F088         	movff	angleToPulse@a000,___altoft@c
  9590  003266  C0E9  F089         	movff	angleToPulse@a000+1,___altoft@c+1
  9591  00326A  C0EA  F08A         	movff	angleToPulse@a000+2,___altoft@c+2
  9592  00326E  C0EB  F08B         	movff	angleToPulse@a000+3,___altoft@c+3
  9593  003272  ECDD  F023         	call	___altoft	;wreg free
  9594  003276  C088  F0BA         	movff	?___altoft,___ftadd@f1
  9595  00327A  C089  F0BB         	movff	?___altoft+1,___ftadd@f1+1
  9596  00327E  C08A  F0BC         	movff	?___altoft+2,___ftadd@f1+2
  9597  003282  EC2B  F013         	call	___ftadd	;wreg free
  9598  003286  C0BA  F0E5         	movff	?___ftadd,_angleToPulse$1329
  9599  00328A  C0BB  F0E6         	movff	?___ftadd+1,_angleToPulse$1329+1
  9600  00328E  C0BC  F0E7         	movff	?___ftadd+2,_angleToPulse$1329+2
  9601                           
  9602                           ;servo.c: 38: return a000 + angle/180.0*(a180-a000) + offset;
  9603  003292  C0DD  F088         	movff	angleToPulse@offset,___altoft@c
  9604  003296  C0DE  F089         	movff	angleToPulse@offset+1,___altoft@c+1
  9605  00329A  C0DF  F08A         	movff	angleToPulse@offset+2,___altoft@c+2
  9606  00329E  C0E0  F08B         	movff	angleToPulse@offset+3,___altoft@c+3
  9607  0032A2  ECDD  F023         	call	___altoft	;wreg free
  9608  0032A6  C088  F0BD         	movff	?___altoft,___ftadd@f2
  9609  0032AA  C089  F0BE         	movff	?___altoft+1,___ftadd@f2+1
  9610  0032AE  C08A  F0BF         	movff	?___altoft+2,___ftadd@f2+2
  9611  0032B2  C0E5  F0BA         	movff	_angleToPulse$1329,___ftadd@f1
  9612  0032B6  C0E6  F0BB         	movff	_angleToPulse$1329+1,___ftadd@f1+1
  9613  0032BA  C0E7  F0BC         	movff	_angleToPulse$1329+2,___ftadd@f1+2
  9614  0032BE  EC2B  F013         	call	___ftadd	;wreg free
  9615  0032C2  C0BA  F0C6         	movff	?___ftadd,___fttol@f1
  9616  0032C6  C0BB  F0C7         	movff	?___ftadd+1,___fttol@f1+1
  9617  0032CA  C0BC  F0C8         	movff	?___ftadd+2,___fttol@f1+2
  9618  0032CE  ECC7  F01A         	call	___fttol	;wreg free
  9619  0032D2  C0C6  F0D5         	movff	?___fttol,?_angleToPulse
  9620  0032D6  C0C7  F0D6         	movff	?___fttol+1,?_angleToPulse+1
  9621  0032DA  C0C8  F0D7         	movff	?___fttol+2,?_angleToPulse+2
  9622  0032DE  C0C9  F0D8         	movff	?___fttol+3,?_angleToPulse+3
  9623  0032E2  0012               	return	
  9624  0032E4                     __end_of_angleToPulse:
  9625                           	opt stack 0
  9626                           tblptru	equ	0xFF8
  9627                           tblptrh	equ	0xFF7
  9628                           tblptrl	equ	0xFF6
  9629                           tablat	equ	0xFF5
  9630                           prodh	equ	0xFF4
  9631                           prodl	equ	0xFF3
  9632                           intcon	equ	0xFF2
  9633                           postinc0	equ	0xFEE
  9634                           wreg	equ	0xFE8
  9635                           postdec1	equ	0xFE5
  9636                           fsr1l	equ	0xFE1
  9637                           indf2	equ	0xFDF
  9638                           postinc2	equ	0xFDE
  9639                           postdec2	equ	0xFDD
  9640                           fsr2h	equ	0xFDA
  9641                           fsr2l	equ	0xFD9
  9642                           status	equ	0xFD8
  9643                           
  9644 ;; *************** function ___fttol *****************
  9645 ;; Defined at:
  9646 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  9647 ;; Parameters:    Size  Location     Type
  9648 ;;  f1              3   70[BANK0 ] float 
  9649 ;; Auto vars:     Size  Location     Type
  9650 ;;  lval            4   80[BANK0 ] unsigned long 
  9651 ;;  exp1            1   84[BANK0 ] unsigned char 
  9652 ;;  sign1           1   79[BANK0 ] unsigned char 
  9653 ;; Return value:  Size  Location     Type
  9654 ;;                  4   70[BANK0 ] long 
  9655 ;; Registers used:
  9656 ;;		wreg, status,2, status,0
  9657 ;; Tracked objects:
  9658 ;;		On entry : 0/0
  9659 ;;		On exit  : 0/0
  9660 ;;		Unchanged: 0/0
  9661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9662 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9663 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9664 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9665 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9666 ;;Total ram usage:       15 bytes
  9667 ;; Hardware stack levels used:    1
  9668 ;; Hardware stack levels required when called:    6
  9669 ;; This function calls:
  9670 ;;		Nothing
  9671 ;; This function is called by:
  9672 ;;		_angleToPulse
  9673 ;;		_printf
  9674 ;; This function uses a non-reentrant model
  9675 ;;
  9676                           
  9677                           	psect	text30
  9678  00358E                     __ptext30:
  9679                           	opt stack 0
  9680  00358E                     ___fttol:
  9681                           	opt stack 21
  9682                           
  9683                           ;incstack = 0
  9684  00358E  C0C8  F0CA         	movff	___fttol@f1+2,??___fttol
  9685  003592  0100               	movlb	0	; () banked
  9686  003594  6BCB               	clrf	(??___fttol+1)& (0+255),b
  9687  003596  6BCC               	clrf	(??___fttol+2)& (0+255),b
  9688  003598  0100               	movlb	0	; () banked
  9689  00359A  35C7               	rlcf	(___fttol@f1+1)& (0+255),w,b
  9690  00359C  0100               	movlb	0	; () banked
  9691  00359E  37CA               	rlcf	??___fttol& (0+255),f,b
  9692  0035A0  E301               	bnc	u4541
  9693  0035A2  81CB               	bsf	(??___fttol+1)& (0+255),0,b
  9694  0035A4                     u4541:
  9695  0035A4  0100               	movlb	0	; () banked
  9696  0035A6  51CA               	movf	??___fttol& (0+255),w,b
  9697  0035A8  0100               	movlb	0	; () banked
  9698  0035AA  6FD4               	movwf	___fttol@exp1& (0+255),b
  9699  0035AC  0100               	movlb	0	; () banked
  9700  0035AE  51D4               	movf	___fttol@exp1& (0+255),w,b
  9701  0035B0  A4D8               	btfss	status,2,c
  9702  0035B2  D00A               	goto	l4722
  9703                           
  9704                           ; BSR set to: 0
  9705  0035B4  0E00               	movlw	0
  9706  0035B6  0100               	movlb	0	; () banked
  9707  0035B8  6FC6               	movwf	?___fttol& (0+255),b
  9708  0035BA  0E00               	movlw	0
  9709  0035BC  6FC7               	movwf	(?___fttol+1)& (0+255),b
  9710  0035BE  0E00               	movlw	0
  9711  0035C0  6FC8               	movwf	(?___fttol+2)& (0+255),b
  9712  0035C2  0E00               	movlw	0
  9713  0035C4  6FC9               	movwf	(?___fttol+3)& (0+255),b
  9714                           
  9715                           ; BSR set to: 0
  9716  0035C6  0012               	return	
  9717  0035C8                     l4722:
  9718                           
  9719                           ; BSR set to: 0
  9720  0035C8  0E17               	movlw	23
  9721  0035CA  0100               	movlb	0	; () banked
  9722  0035CC  6FCA               	movwf	??___fttol& (0+255),b
  9723  0035CE  C0C6  F0CB         	movff	___fttol@f1,??___fttol+1
  9724  0035D2  C0C7  F0CC         	movff	___fttol@f1+1,??___fttol+2
  9725  0035D6  C0C8  F0CD         	movff	___fttol@f1+2,??___fttol+3
  9726  0035DA  0100               	movlb	0	; () banked
  9727  0035DC  29CA               	incf	??___fttol& (0+255),w,b
  9728  0035DE  0100               	movlb	0	; () banked
  9729  0035E0  6FCE               	movwf	(??___fttol+4)& (0+255),b
  9730  0035E2  D005               	goto	u4560
  9731  0035E4                     u4565:
  9732  0035E4  0100               	movlb	0	; () banked
  9733  0035E6  90D8               	bcf	status,0,c
  9734  0035E8  33CD               	rrcf	(??___fttol+3)& (0+255),f,b
  9735  0035EA  33CC               	rrcf	(??___fttol+2)& (0+255),f,b
  9736  0035EC  33CB               	rrcf	(??___fttol+1)& (0+255),f,b
  9737  0035EE                     u4560:
  9738  0035EE  0100               	movlb	0	; () banked
  9739  0035F0  2FCE               	decfsz	(??___fttol+4)& (0+255),f,b
  9740  0035F2  D7F8               	goto	u4565
  9741  0035F4  0100               	movlb	0	; () banked
  9742  0035F6  51CB               	movf	(??___fttol+1)& (0+255),w,b
  9743  0035F8  0100               	movlb	0	; () banked
  9744  0035FA  6FCF               	movwf	___fttol@sign1& (0+255),b
  9745                           
  9746                           ; BSR set to: 0
  9747  0035FC  0100               	movlb	0	; () banked
  9748  0035FE  8FC7               	bsf	(___fttol@f1+1)& (0+255),7,b
  9749                           
  9750                           ; BSR set to: 0
  9751  003600  0EFF               	movlw	255
  9752  003602  0100               	movlb	0	; () banked
  9753  003604  17C6               	andwf	___fttol@f1& (0+255),f,b
  9754  003606  0EFF               	movlw	255
  9755  003608  0100               	movlb	0	; () banked
  9756  00360A  17C7               	andwf	(___fttol@f1+1)& (0+255),f,b
  9757  00360C  0E00               	movlw	0
  9758  00360E  0100               	movlb	0	; () banked
  9759  003610  17C8               	andwf	(___fttol@f1+2)& (0+255),f,b
  9760                           
  9761                           ; BSR set to: 0
  9762  003612  0100               	movlb	0	; () banked
  9763  003614  51C6               	movf	___fttol@f1& (0+255),w,b
  9764  003616  0100               	movlb	0	; () banked
  9765  003618  6FD0               	movwf	___fttol@lval& (0+255),b
  9766  00361A  0100               	movlb	0	; () banked
  9767  00361C  51C7               	movf	(___fttol@f1+1)& (0+255),w,b
  9768  00361E  0100               	movlb	0	; () banked
  9769  003620  6FD1               	movwf	(___fttol@lval+1)& (0+255),b
  9770  003622  0100               	movlb	0	; () banked
  9771  003624  51C8               	movf	(___fttol@f1+2)& (0+255),w,b
  9772  003626  0100               	movlb	0	; () banked
  9773  003628  6FD2               	movwf	(___fttol@lval+2)& (0+255),b
  9774  00362A  0100               	movlb	0	; () banked
  9775  00362C  6BD3               	clrf	(___fttol@lval+3)& (0+255),b
  9776                           
  9777                           ; BSR set to: 0
  9778  00362E  0E8E               	movlw	142
  9779  003630  0100               	movlb	0	; () banked
  9780  003632  5FD4               	subwf	___fttol@exp1& (0+255),f,b
  9781                           
  9782                           ; BSR set to: 0
  9783  003634  0100               	movlb	0	; () banked
  9784  003636  AFD4               	btfss	___fttol@exp1& (0+255),7,b
  9785  003638  D01A               	goto	l4744
  9786                           
  9787                           ; BSR set to: 0
  9788  00363A  0100               	movlb	0	; () banked
  9789  00363C  51D4               	movf	___fttol@exp1& (0+255),w,b
  9790  00363E  0A80               	xorlw	128
  9791  003640  0F8F               	addlw	143
  9792  003642  B0D8               	btfsc	status,0,c
  9793  003644  D00A               	goto	l4740
  9794                           
  9795                           ; BSR set to: 0
  9796  003646  0E00               	movlw	0
  9797  003648  0100               	movlb	0	; () banked
  9798  00364A  6FC6               	movwf	?___fttol& (0+255),b
  9799  00364C  0E00               	movlw	0
  9800  00364E  6FC7               	movwf	(?___fttol+1)& (0+255),b
  9801  003650  0E00               	movlw	0
  9802  003652  6FC8               	movwf	(?___fttol+2)& (0+255),b
  9803  003654  0E00               	movlw	0
  9804  003656  6FC9               	movwf	(?___fttol+3)& (0+255),b
  9805                           
  9806                           ; BSR set to: 0
  9807  003658  0012               	return	
  9808  00365A                     l4740:
  9809                           
  9810                           ; BSR set to: 0
  9811  00365A  0100               	movlb	0	; () banked
  9812  00365C  90D8               	bcf	status,0,c
  9813  00365E  33D3               	rrcf	(___fttol@lval+3)& (0+255),f,b
  9814  003660  33D2               	rrcf	(___fttol@lval+2)& (0+255),f,b
  9815  003662  33D1               	rrcf	(___fttol@lval+1)& (0+255),f,b
  9816  003664  33D0               	rrcf	___fttol@lval& (0+255),f,b
  9817                           
  9818                           ; BSR set to: 0
  9819  003666  0100               	movlb	0	; () banked
  9820  003668  3FD4               	incfsz	___fttol@exp1& (0+255),f,b
  9821  00366A  D7F7               	goto	l4740
  9822                           
  9823                           ; BSR set to: 0
  9824  00366C  D01B               	goto	l4754
  9825  00366E                     l4744:
  9826                           
  9827                           ; BSR set to: 0
  9828  00366E  0E17               	movlw	23
  9829  003670  0100               	movlb	0	; () banked
  9830  003672  65D4               	cpfsgt	___fttol@exp1& (0+255),b
  9831  003674  D012               	goto	l4752
  9832                           
  9833                           ; BSR set to: 0
  9834  003676  0E00               	movlw	0
  9835  003678  0100               	movlb	0	; () banked
  9836  00367A  6FC6               	movwf	?___fttol& (0+255),b
  9837  00367C  0E00               	movlw	0
  9838  00367E  6FC7               	movwf	(?___fttol+1)& (0+255),b
  9839  003680  0E00               	movlw	0
  9840  003682  6FC8               	movwf	(?___fttol+2)& (0+255),b
  9841  003684  0E00               	movlw	0
  9842  003686  6FC9               	movwf	(?___fttol+3)& (0+255),b
  9843                           
  9844                           ; BSR set to: 0
  9845  003688  0012               	return	
  9846  00368A                     l4750:
  9847                           
  9848                           ; BSR set to: 0
  9849  00368A  0100               	movlb	0	; () banked
  9850  00368C  90D8               	bcf	status,0,c
  9851  00368E  37D0               	rlcf	___fttol@lval& (0+255),f,b
  9852  003690  37D1               	rlcf	(___fttol@lval+1)& (0+255),f,b
  9853  003692  37D2               	rlcf	(___fttol@lval+2)& (0+255),f,b
  9854  003694  37D3               	rlcf	(___fttol@lval+3)& (0+255),f,b
  9855  003696  0100               	movlb	0	; () banked
  9856  003698  07D4               	decf	___fttol@exp1& (0+255),f,b
  9857  00369A                     l4752:
  9858                           
  9859                           ; BSR set to: 0
  9860  00369A  0100               	movlb	0	; () banked
  9861  00369C  51D4               	movf	___fttol@exp1& (0+255),w,b
  9862  00369E  0100               	movlb	0	; () banked
  9863  0036A0  A4D8               	btfss	status,2,c
  9864  0036A2  D7F3               	goto	l4750
  9865  0036A4                     l4754:
  9866                           
  9867                           ; BSR set to: 0
  9868  0036A4  0100               	movlb	0	; () banked
  9869  0036A6  51CF               	movf	___fttol@sign1& (0+255),w,b
  9870  0036A8  0100               	movlb	0	; () banked
  9871  0036AA  B4D8               	btfsc	status,2,c
  9872  0036AC  D009               	goto	l4758
  9873                           
  9874                           ; BSR set to: 0
  9875  0036AE  0100               	movlb	0	; () banked
  9876  0036B0  1FD3               	comf	(___fttol@lval+3)& (0+255),f,b
  9877  0036B2  1FD2               	comf	(___fttol@lval+2)& (0+255),f,b
  9878  0036B4  1FD1               	comf	(___fttol@lval+1)& (0+255),f,b
  9879  0036B6  6DD0               	negf	___fttol@lval& (0+255),b
  9880  0036B8  0E00               	movlw	0
  9881  0036BA  23D1               	addwfc	(___fttol@lval+1)& (0+255),f,b
  9882  0036BC  23D2               	addwfc	(___fttol@lval+2)& (0+255),f,b
  9883  0036BE  23D3               	addwfc	(___fttol@lval+3)& (0+255),f,b
  9884  0036C0                     l4758:
  9885                           
  9886                           ; BSR set to: 0
  9887  0036C0  C0D0  F0C6         	movff	___fttol@lval,?___fttol
  9888  0036C4  C0D1  F0C7         	movff	___fttol@lval+1,?___fttol+1
  9889  0036C8  C0D2  F0C8         	movff	___fttol@lval+2,?___fttol+2
  9890  0036CC  C0D3  F0C9         	movff	___fttol@lval+3,?___fttol+3
  9891  0036D0  0012               	return	
  9892  0036D2                     __end_of___fttol:
  9893                           	opt stack 0
  9894                           tblptru	equ	0xFF8
  9895                           tblptrh	equ	0xFF7
  9896                           tblptrl	equ	0xFF6
  9897                           tablat	equ	0xFF5
  9898                           prodh	equ	0xFF4
  9899                           prodl	equ	0xFF3
  9900                           intcon	equ	0xFF2
  9901                           postinc0	equ	0xFEE
  9902                           wreg	equ	0xFE8
  9903                           postdec1	equ	0xFE5
  9904                           fsr1l	equ	0xFE1
  9905                           indf2	equ	0xFDF
  9906                           postinc2	equ	0xFDE
  9907                           postdec2	equ	0xFDD
  9908                           fsr2h	equ	0xFDA
  9909                           fsr2l	equ	0xFD9
  9910                           status	equ	0xFD8
  9911                           
  9912 ;; *************** function ___ftmul *****************
  9913 ;; Defined at:
  9914 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  9915 ;; Parameters:    Size  Location     Type
  9916 ;;  f1              3   33[BANK0 ] float 
  9917 ;;  f2              3   36[BANK0 ] float 
  9918 ;; Auto vars:     Size  Location     Type
  9919 ;;  f3_as_produc    3   43[BANK0 ] unsigned um
  9920 ;;  sign            1   47[BANK0 ] unsigned char 
  9921 ;;  cntr            1   46[BANK0 ] unsigned char 
  9922 ;;  exp             1   42[BANK0 ] unsigned char 
  9923 ;; Return value:  Size  Location     Type
  9924 ;;                  3   33[BANK0 ] float 
  9925 ;; Registers used:
  9926 ;;		wreg, status,2, status,0, cstack
  9927 ;; Tracked objects:
  9928 ;;		On entry : 0/0
  9929 ;;		On exit  : 0/0
  9930 ;;		Unchanged: 0/0
  9931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9932 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9933 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9934 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9935 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9936 ;;Total ram usage:       15 bytes
  9937 ;; Hardware stack levels used:    1
  9938 ;; Hardware stack levels required when called:    7
  9939 ;; This function calls:
  9940 ;;		___ftpack
  9941 ;; This function is called by:
  9942 ;;		_sortBattery
  9943 ;;		_angleToPulse
  9944 ;;		_fround
  9945 ;;		_scale
  9946 ;;		_printf
  9947 ;; This function uses a non-reentrant model
  9948 ;;
  9949                           
  9950                           	psect	text31
  9951  0032E4                     __ptext31:
  9952                           	opt stack 0
  9953  0032E4                     ___ftmul:
  9954                           	opt stack 20
  9955                           
  9956                           ; BSR set to: 0
  9957                           ;incstack = 0
  9958  0032E4  C0A3  F0A7         	movff	___ftmul@f1+2,??___ftmul
  9959  0032E8  0100               	movlb	0	; () banked
  9960  0032EA  6BA8               	clrf	(??___ftmul+1)& (0+255),b
  9961  0032EC  6BA9               	clrf	(??___ftmul+2)& (0+255),b
  9962  0032EE  0100               	movlb	0	; () banked
  9963  0032F0  35A2               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  9964  0032F2  0100               	movlb	0	; () banked
  9965  0032F4  37A7               	rlcf	??___ftmul& (0+255),f,b
  9966  0032F6  E301               	bnc	u4351
  9967  0032F8  81A8               	bsf	(??___ftmul+1)& (0+255),0,b
  9968  0032FA                     u4351:
  9969  0032FA  0100               	movlb	0	; () banked
  9970  0032FC  51A7               	movf	??___ftmul& (0+255),w,b
  9971  0032FE  0100               	movlb	0	; () banked
  9972  003300  6FAA               	movwf	___ftmul@exp& (0+255),b
  9973  003302  0100               	movlb	0	; () banked
  9974  003304  51AA               	movf	___ftmul@exp& (0+255),w,b
  9975  003306  A4D8               	btfss	status,2,c
  9976  003308  D00A               	goto	l4582
  9977                           
  9978                           ; BSR set to: 0
  9979  00330A  0E00               	movlw	0
  9980  00330C  0100               	movlb	0	; () banked
  9981  00330E  6FA1               	movwf	?___ftmul& (0+255),b
  9982  003310  0E00               	movlw	0
  9983  003312  0100               	movlb	0	; () banked
  9984  003314  6FA2               	movwf	(?___ftmul+1)& (0+255),b
  9985  003316  0E00               	movlw	0
  9986  003318  0100               	movlb	0	; () banked
  9987  00331A  6FA3               	movwf	(?___ftmul+2)& (0+255),b
  9988                           
  9989                           ; BSR set to: 0
  9990  00331C  0012               	return	
  9991  00331E                     l4582:
  9992                           
  9993                           ; BSR set to: 0
  9994  00331E  C0A6  F0A7         	movff	___ftmul@f2+2,??___ftmul
  9995  003322  0100               	movlb	0	; () banked
  9996  003324  6BA8               	clrf	(??___ftmul+1)& (0+255),b
  9997  003326  6BA9               	clrf	(??___ftmul+2)& (0+255),b
  9998  003328  0100               	movlb	0	; () banked
  9999  00332A  35A5               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 10000  00332C  0100               	movlb	0	; () banked
 10001  00332E  37A7               	rlcf	??___ftmul& (0+255),f,b
 10002  003330  E301               	bnc	u4371
 10003  003332  81A8               	bsf	(??___ftmul+1)& (0+255),0,b
 10004  003334                     u4371:
 10005  003334  0100               	movlb	0	; () banked
 10006  003336  51A7               	movf	??___ftmul& (0+255),w,b
 10007  003338  0100               	movlb	0	; () banked
 10008  00333A  6FAF               	movwf	___ftmul@sign& (0+255),b
 10009  00333C  0100               	movlb	0	; () banked
 10010  00333E  51AF               	movf	___ftmul@sign& (0+255),w,b
 10011  003340  A4D8               	btfss	status,2,c
 10012  003342  D00A               	goto	l4588
 10013                           
 10014                           ; BSR set to: 0
 10015  003344  0E00               	movlw	0
 10016  003346  0100               	movlb	0	; () banked
 10017  003348  6FA1               	movwf	?___ftmul& (0+255),b
 10018  00334A  0E00               	movlw	0
 10019  00334C  0100               	movlb	0	; () banked
 10020  00334E  6FA2               	movwf	(?___ftmul+1)& (0+255),b
 10021  003350  0E00               	movlw	0
 10022  003352  0100               	movlb	0	; () banked
 10023  003354  6FA3               	movwf	(?___ftmul+2)& (0+255),b
 10024                           
 10025                           ; BSR set to: 0
 10026  003356  0012               	return	
 10027  003358                     l4588:
 10028                           
 10029                           ; BSR set to: 0
 10030  003358  0100               	movlb	0	; () banked
 10031  00335A  51AF               	movf	___ftmul@sign& (0+255),w,b
 10032  00335C  0F7B               	addlw	123
 10033  00335E  0100               	movlb	0	; () banked
 10034  003360  27AA               	addwf	___ftmul@exp& (0+255),f,b
 10035                           
 10036                           ; BSR set to: 0
 10037  003362  C0A3  F0AF         	movff	___ftmul@f1+2,___ftmul@sign
 10038  003366  0100               	movlb	0	; () banked
 10039  003368  51A6               	movf	(___ftmul@f2+2)& (0+255),w,b
 10040  00336A  0100               	movlb	0	; () banked
 10041  00336C  1BAF               	xorwf	___ftmul@sign& (0+255),f,b
 10042  00336E  0E80               	movlw	128
 10043  003370  0100               	movlb	0	; () banked
 10044  003372  17AF               	andwf	___ftmul@sign& (0+255),f,b
 10045                           
 10046                           ; BSR set to: 0
 10047  003374  0100               	movlb	0	; () banked
 10048  003376  8FA2               	bsf	(___ftmul@f1+1)& (0+255),7,b
 10049                           
 10050                           ; BSR set to: 0
 10051  003378  0100               	movlb	0	; () banked
 10052  00337A  8FA5               	bsf	(___ftmul@f2+1)& (0+255),7,b
 10053                           
 10054                           ; BSR set to: 0
 10055  00337C  0EFF               	movlw	255
 10056  00337E  0100               	movlb	0	; () banked
 10057  003380  17A4               	andwf	___ftmul@f2& (0+255),f,b
 10058  003382  0EFF               	movlw	255
 10059  003384  0100               	movlb	0	; () banked
 10060  003386  17A5               	andwf	(___ftmul@f2+1)& (0+255),f,b
 10061  003388  0E00               	movlw	0
 10062  00338A  0100               	movlb	0	; () banked
 10063  00338C  17A6               	andwf	(___ftmul@f2+2)& (0+255),f,b
 10064                           
 10065                           ; BSR set to: 0
 10066  00338E  0E00               	movlw	0
 10067  003390  0100               	movlb	0	; () banked
 10068  003392  6FAB               	movwf	___ftmul@f3_as_product& (0+255),b
 10069  003394  0E00               	movlw	0
 10070  003396  0100               	movlb	0	; () banked
 10071  003398  6FAC               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 10072  00339A  0E00               	movlw	0
 10073  00339C  0100               	movlb	0	; () banked
 10074  00339E  6FAD               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 10075                           
 10076                           ; BSR set to: 0
 10077  0033A0  0E07               	movlw	7
 10078  0033A2  0100               	movlb	0	; () banked
 10079  0033A4  6FAE               	movwf	___ftmul@cntr& (0+255),b
 10080  0033A6                     l4602:
 10081                           
 10082                           ; BSR set to: 0
 10083  0033A6  0100               	movlb	0	; () banked
 10084  0033A8  A1A1               	btfss	___ftmul@f1& (0+255),0,b
 10085  0033AA  D00C               	goto	l4606
 10086                           
 10087                           ; BSR set to: 0
 10088  0033AC  0100               	movlb	0	; () banked
 10089  0033AE  51A4               	movf	___ftmul@f2& (0+255),w,b
 10090  0033B0  0100               	movlb	0	; () banked
 10091  0033B2  27AB               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10092  0033B4  0100               	movlb	0	; () banked
 10093  0033B6  51A5               	movf	(___ftmul@f2+1)& (0+255),w,b
 10094  0033B8  0100               	movlb	0	; () banked
 10095  0033BA  23AC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10096  0033BC  0100               	movlb	0	; () banked
 10097  0033BE  51A6               	movf	(___ftmul@f2+2)& (0+255),w,b
 10098  0033C0  0100               	movlb	0	; () banked
 10099  0033C2  23AD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10100  0033C4                     l4606:
 10101                           
 10102                           ; BSR set to: 0
 10103  0033C4  0100               	movlb	0	; () banked
 10104  0033C6  90D8               	bcf	status,0,c
 10105  0033C8  33A3               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10106  0033CA  33A2               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10107  0033CC  33A1               	rrcf	___ftmul@f1& (0+255),f,b
 10108  0033CE  0100               	movlb	0	; () banked
 10109  0033D0  90D8               	bcf	status,0,c
 10110  0033D2  37A4               	rlcf	___ftmul@f2& (0+255),f,b
 10111  0033D4  37A5               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 10112  0033D6  37A6               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 10113                           
 10114                           ; BSR set to: 0
 10115  0033D8  0100               	movlb	0	; () banked
 10116  0033DA  2FAE               	decfsz	___ftmul@cntr& (0+255),f,b
 10117  0033DC  D7E4               	goto	l4602
 10118                           
 10119                           ; BSR set to: 0
 10120                           
 10121                           ; BSR set to: 0
 10122  0033DE  0E09               	movlw	9
 10123  0033E0  0100               	movlb	0	; () banked
 10124  0033E2  6FAE               	movwf	___ftmul@cntr& (0+255),b
 10125  0033E4                     l4612:
 10126                           
 10127                           ; BSR set to: 0
 10128  0033E4  0100               	movlb	0	; () banked
 10129  0033E6  A1A1               	btfss	___ftmul@f1& (0+255),0,b
 10130  0033E8  D00C               	goto	l4616
 10131                           
 10132                           ; BSR set to: 0
 10133  0033EA  0100               	movlb	0	; () banked
 10134  0033EC  51A4               	movf	___ftmul@f2& (0+255),w,b
 10135  0033EE  0100               	movlb	0	; () banked
 10136  0033F0  27AB               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10137  0033F2  0100               	movlb	0	; () banked
 10138  0033F4  51A5               	movf	(___ftmul@f2+1)& (0+255),w,b
 10139  0033F6  0100               	movlb	0	; () banked
 10140  0033F8  23AC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10141  0033FA  0100               	movlb	0	; () banked
 10142  0033FC  51A6               	movf	(___ftmul@f2+2)& (0+255),w,b
 10143  0033FE  0100               	movlb	0	; () banked
 10144  003400  23AD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10145  003402                     l4616:
 10146                           
 10147                           ; BSR set to: 0
 10148  003402  0100               	movlb	0	; () banked
 10149  003404  90D8               	bcf	status,0,c
 10150  003406  33A3               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10151  003408  33A2               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10152  00340A  33A1               	rrcf	___ftmul@f1& (0+255),f,b
 10153  00340C  0100               	movlb	0	; () banked
 10154  00340E  90D8               	bcf	status,0,c
 10155  003410  33AD               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10156  003412  33AC               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10157  003414  33AB               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10158                           
 10159                           ; BSR set to: 0
 10160  003416  0100               	movlb	0	; () banked
 10161  003418  2FAE               	decfsz	___ftmul@cntr& (0+255),f,b
 10162  00341A  D7E4               	goto	l4612
 10163                           
 10164                           ; BSR set to: 0
 10165                           
 10166                           ; BSR set to: 0
 10167  00341C  C0AB  F080         	movff	___ftmul@f3_as_product,___ftpack@arg
 10168  003420  C0AC  F081         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10169  003424  C0AD  F082         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10170  003428  C0AA  F083         	movff	___ftmul@exp,___ftpack@exp
 10171  00342C  C0AF  F084         	movff	___ftmul@sign,___ftpack@sign
 10172  003430  EC58  F01E         	call	___ftpack	;wreg free
 10173  003434  C080  F0A1         	movff	?___ftpack,?___ftmul
 10174  003438  C081  F0A2         	movff	?___ftpack+1,?___ftmul+1
 10175  00343C  C082  F0A3         	movff	?___ftpack+2,?___ftmul+2
 10176  003440  0012               	return	
 10177  003442                     __end_of___ftmul:
 10178                           	opt stack 0
 10179                           tblptru	equ	0xFF8
 10180                           tblptrh	equ	0xFF7
 10181                           tblptrl	equ	0xFF6
 10182                           tablat	equ	0xFF5
 10183                           prodh	equ	0xFF4
 10184                           prodl	equ	0xFF3
 10185                           intcon	equ	0xFF2
 10186                           postinc0	equ	0xFEE
 10187                           wreg	equ	0xFE8
 10188                           postdec1	equ	0xFE5
 10189                           fsr1l	equ	0xFE1
 10190                           indf2	equ	0xFDF
 10191                           postinc2	equ	0xFDE
 10192                           postdec2	equ	0xFDD
 10193                           fsr2h	equ	0xFDA
 10194                           fsr2l	equ	0xFD9
 10195                           status	equ	0xFD8
 10196                           
 10197 ;; *************** function ___ftdiv *****************
 10198 ;; Defined at:
 10199 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 10200 ;; Parameters:    Size  Location     Type
 10201 ;;  f1              3   18[BANK0 ] float 
 10202 ;;  f2              3   21[BANK0 ] float 
 10203 ;; Auto vars:     Size  Location     Type
 10204 ;;  f3              3   28[BANK0 ] float 
 10205 ;;  sign            1   32[BANK0 ] unsigned char 
 10206 ;;  exp             1   31[BANK0 ] unsigned char 
 10207 ;;  cntr            1   27[BANK0 ] unsigned char 
 10208 ;; Return value:  Size  Location     Type
 10209 ;;                  3   18[BANK0 ] float 
 10210 ;; Registers used:
 10211 ;;		wreg, status,2, status,0, cstack
 10212 ;; Tracked objects:
 10213 ;;		On entry : 0/0
 10214 ;;		On exit  : 0/0
 10215 ;;		Unchanged: 0/0
 10216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10217 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10218 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10219 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10220 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10221 ;;Total ram usage:       15 bytes
 10222 ;; Hardware stack levels used:    1
 10223 ;; Hardware stack levels required when called:    7
 10224 ;; This function calls:
 10225 ;;		___ftpack
 10226 ;; This function is called by:
 10227 ;;		_sortBattery
 10228 ;;		_angleToPulse
 10229 ;; This function uses a non-reentrant model
 10230 ;;
 10231                           
 10232                           	psect	text32
 10233  003442                     __ptext32:
 10234                           	opt stack 0
 10235  003442                     ___ftdiv:
 10236                           	opt stack 20
 10237                           
 10238                           ;incstack = 0
 10239  003442  C094  F098         	movff	___ftdiv@f1+2,??___ftdiv
 10240  003446  0100               	movlb	0	; () banked
 10241  003448  6B99               	clrf	(??___ftdiv+1)& (0+255),b
 10242  00344A  6B9A               	clrf	(??___ftdiv+2)& (0+255),b
 10243  00344C  0100               	movlb	0	; () banked
 10244  00344E  3593               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 10245  003450  0100               	movlb	0	; () banked
 10246  003452  3798               	rlcf	??___ftdiv& (0+255),f,b
 10247  003454  E301               	bnc	u4301
 10248  003456  8199               	bsf	(??___ftdiv+1)& (0+255),0,b
 10249  003458                     u4301:
 10250  003458  0100               	movlb	0	; () banked
 10251  00345A  5198               	movf	??___ftdiv& (0+255),w,b
 10252  00345C  0100               	movlb	0	; () banked
 10253  00345E  6F9F               	movwf	___ftdiv@exp& (0+255),b
 10254  003460  0100               	movlb	0	; () banked
 10255  003462  519F               	movf	___ftdiv@exp& (0+255),w,b
 10256  003464  A4D8               	btfss	status,2,c
 10257  003466  D00A               	goto	l4536
 10258                           
 10259                           ; BSR set to: 0
 10260  003468  0E00               	movlw	0
 10261  00346A  0100               	movlb	0	; () banked
 10262  00346C  6F92               	movwf	?___ftdiv& (0+255),b
 10263  00346E  0E00               	movlw	0
 10264  003470  0100               	movlb	0	; () banked
 10265  003472  6F93               	movwf	(?___ftdiv+1)& (0+255),b
 10266  003474  0E00               	movlw	0
 10267  003476  0100               	movlb	0	; () banked
 10268  003478  6F94               	movwf	(?___ftdiv+2)& (0+255),b
 10269                           
 10270                           ; BSR set to: 0
 10271  00347A  0012               	return	
 10272  00347C                     l4536:
 10273                           
 10274                           ; BSR set to: 0
 10275  00347C  C097  F098         	movff	___ftdiv@f2+2,??___ftdiv
 10276  003480  0100               	movlb	0	; () banked
 10277  003482  6B99               	clrf	(??___ftdiv+1)& (0+255),b
 10278  003484  6B9A               	clrf	(??___ftdiv+2)& (0+255),b
 10279  003486  0100               	movlb	0	; () banked
 10280  003488  3596               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 10281  00348A  0100               	movlb	0	; () banked
 10282  00348C  3798               	rlcf	??___ftdiv& (0+255),f,b
 10283  00348E  E301               	bnc	u4321
 10284  003490  8199               	bsf	(??___ftdiv+1)& (0+255),0,b
 10285  003492                     u4321:
 10286  003492  0100               	movlb	0	; () banked
 10287  003494  5198               	movf	??___ftdiv& (0+255),w,b
 10288  003496  0100               	movlb	0	; () banked
 10289  003498  6FA0               	movwf	___ftdiv@sign& (0+255),b
 10290  00349A  0100               	movlb	0	; () banked
 10291  00349C  51A0               	movf	___ftdiv@sign& (0+255),w,b
 10292  00349E  A4D8               	btfss	status,2,c
 10293  0034A0  D00A               	goto	l4542
 10294                           
 10295                           ; BSR set to: 0
 10296  0034A2  0E00               	movlw	0
 10297  0034A4  0100               	movlb	0	; () banked
 10298  0034A6  6F92               	movwf	?___ftdiv& (0+255),b
 10299  0034A8  0E00               	movlw	0
 10300  0034AA  0100               	movlb	0	; () banked
 10301  0034AC  6F93               	movwf	(?___ftdiv+1)& (0+255),b
 10302  0034AE  0E00               	movlw	0
 10303  0034B0  0100               	movlb	0	; () banked
 10304  0034B2  6F94               	movwf	(?___ftdiv+2)& (0+255),b
 10305                           
 10306                           ; BSR set to: 0
 10307  0034B4  0012               	return	
 10308  0034B6                     l4542:
 10309                           
 10310                           ; BSR set to: 0
 10311  0034B6  0E00               	movlw	0
 10312  0034B8  0100               	movlb	0	; () banked
 10313  0034BA  6F9C               	movwf	___ftdiv@f3& (0+255),b
 10314  0034BC  0E00               	movlw	0
 10315  0034BE  0100               	movlb	0	; () banked
 10316  0034C0  6F9D               	movwf	(___ftdiv@f3+1)& (0+255),b
 10317  0034C2  0E00               	movlw	0
 10318  0034C4  0100               	movlb	0	; () banked
 10319  0034C6  6F9E               	movwf	(___ftdiv@f3+2)& (0+255),b
 10320                           
 10321                           ; BSR set to: 0
 10322  0034C8  0100               	movlb	0	; () banked
 10323  0034CA  51A0               	movf	___ftdiv@sign& (0+255),w,b
 10324  0034CC  0F89               	addlw	137
 10325  0034CE  0100               	movlb	0	; () banked
 10326  0034D0  5F9F               	subwf	___ftdiv@exp& (0+255),f,b
 10327                           
 10328                           ; BSR set to: 0
 10329  0034D2  C094  F0A0         	movff	___ftdiv@f1+2,___ftdiv@sign
 10330                           
 10331                           ; BSR set to: 0
 10332  0034D6  0100               	movlb	0	; () banked
 10333  0034D8  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10334  0034DA  0100               	movlb	0	; () banked
 10335  0034DC  1BA0               	xorwf	___ftdiv@sign& (0+255),f,b
 10336                           
 10337                           ; BSR set to: 0
 10338  0034DE  0E80               	movlw	128
 10339  0034E0  0100               	movlb	0	; () banked
 10340  0034E2  17A0               	andwf	___ftdiv@sign& (0+255),f,b
 10341                           
 10342                           ; BSR set to: 0
 10343  0034E4  0100               	movlb	0	; () banked
 10344  0034E6  8F93               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 10345                           
 10346                           ; BSR set to: 0
 10347  0034E8  0EFF               	movlw	255
 10348  0034EA  0100               	movlb	0	; () banked
 10349  0034EC  1792               	andwf	___ftdiv@f1& (0+255),f,b
 10350  0034EE  0EFF               	movlw	255
 10351  0034F0  0100               	movlb	0	; () banked
 10352  0034F2  1793               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 10353  0034F4  0E00               	movlw	0
 10354  0034F6  0100               	movlb	0	; () banked
 10355  0034F8  1794               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 10356                           
 10357                           ; BSR set to: 0
 10358  0034FA  0100               	movlb	0	; () banked
 10359  0034FC  8F96               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 10360                           
 10361                           ; BSR set to: 0
 10362  0034FE  0EFF               	movlw	255
 10363  003500  0100               	movlb	0	; () banked
 10364  003502  1795               	andwf	___ftdiv@f2& (0+255),f,b
 10365  003504  0EFF               	movlw	255
 10366  003506  0100               	movlb	0	; () banked
 10367  003508  1796               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 10368  00350A  0E00               	movlw	0
 10369  00350C  0100               	movlb	0	; () banked
 10370  00350E  1797               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 10371                           
 10372                           ; BSR set to: 0
 10373  003510  0E18               	movlw	24
 10374  003512  0100               	movlb	0	; () banked
 10375  003514  6F9B               	movwf	___ftdiv@cntr& (0+255),b
 10376  003516                     l4562:
 10377                           
 10378                           ; BSR set to: 0
 10379  003516  0100               	movlb	0	; () banked
 10380  003518  90D8               	bcf	status,0,c
 10381  00351A  379C               	rlcf	___ftdiv@f3& (0+255),f,b
 10382  00351C  379D               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 10383  00351E  379E               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 10384                           
 10385                           ; BSR set to: 0
 10386  003520  0100               	movlb	0	; () banked
 10387  003522  5195               	movf	___ftdiv@f2& (0+255),w,b
 10388  003524  0100               	movlb	0	; () banked
 10389  003526  5D92               	subwf	___ftdiv@f1& (0+255),w,b
 10390  003528  0100               	movlb	0	; () banked
 10391  00352A  5196               	movf	(___ftdiv@f2+1)& (0+255),w,b
 10392  00352C  0100               	movlb	0	; () banked
 10393  00352E  5993               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 10394  003530  0100               	movlb	0	; () banked
 10395  003532  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10396  003534  0100               	movlb	0	; () banked
 10397  003536  5994               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 10398  003538  A0D8               	btfss	status,0,c
 10399  00353A  D00E               	goto	l1081
 10400                           
 10401                           ; BSR set to: 0
 10402  00353C  0100               	movlb	0	; () banked
 10403  00353E  5195               	movf	___ftdiv@f2& (0+255),w,b
 10404  003540  0100               	movlb	0	; () banked
 10405  003542  5F92               	subwf	___ftdiv@f1& (0+255),f,b
 10406  003544  0100               	movlb	0	; () banked
 10407  003546  5196               	movf	(___ftdiv@f2+1)& (0+255),w,b
 10408  003548  0100               	movlb	0	; () banked
 10409  00354A  5B93               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 10410  00354C  0100               	movlb	0	; () banked
 10411  00354E  5197               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10412  003550  0100               	movlb	0	; () banked
 10413  003552  5B94               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 10414                           
 10415                           ; BSR set to: 0
 10416  003554  0100               	movlb	0	; () banked
 10417  003556  819C               	bsf	___ftdiv@f3& (0+255),0,b
 10418  003558                     l1081:
 10419                           
 10420                           ; BSR set to: 0
 10421  003558  0100               	movlb	0	; () banked
 10422  00355A  90D8               	bcf	status,0,c
 10423  00355C  3792               	rlcf	___ftdiv@f1& (0+255),f,b
 10424  00355E  3793               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 10425  003560  3794               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 10426                           
 10427                           ; BSR set to: 0
 10428  003562  0100               	movlb	0	; () banked
 10429  003564  2F9B               	decfsz	___ftdiv@cntr& (0+255),f,b
 10430  003566  D7D7               	goto	l4562
 10431                           
 10432                           ; BSR set to: 0
 10433                           
 10434                           ; BSR set to: 0
 10435  003568  C09C  F080         	movff	___ftdiv@f3,___ftpack@arg
 10436  00356C  C09D  F081         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10437  003570  C09E  F082         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10438  003574  C09F  F083         	movff	___ftdiv@exp,___ftpack@exp
 10439  003578  C0A0  F084         	movff	___ftdiv@sign,___ftpack@sign
 10440  00357C  EC58  F01E         	call	___ftpack	;wreg free
 10441  003580  C080  F092         	movff	?___ftpack,?___ftdiv
 10442  003584  C081  F093         	movff	?___ftpack+1,?___ftdiv+1
 10443  003588  C082  F094         	movff	?___ftpack+2,?___ftdiv+2
 10444  00358C  0012               	return	
 10445  00358E                     __end_of___ftdiv:
 10446                           	opt stack 0
 10447                           tblptru	equ	0xFF8
 10448                           tblptrh	equ	0xFF7
 10449                           tblptrl	equ	0xFF6
 10450                           tablat	equ	0xFF5
 10451                           prodh	equ	0xFF4
 10452                           prodl	equ	0xFF3
 10453                           intcon	equ	0xFF2
 10454                           postinc0	equ	0xFEE
 10455                           wreg	equ	0xFE8
 10456                           postdec1	equ	0xFE5
 10457                           fsr1l	equ	0xFE1
 10458                           indf2	equ	0xFDF
 10459                           postinc2	equ	0xFDE
 10460                           postdec2	equ	0xFDD
 10461                           fsr2h	equ	0xFDA
 10462                           fsr2l	equ	0xFD9
 10463                           status	equ	0xFD8
 10464                           
 10465 ;; *************** function ___ftadd *****************
 10466 ;; Defined at:
 10467 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 10468 ;; Parameters:    Size  Location     Type
 10469 ;;  f1              3   58[BANK0 ] float 
 10470 ;;  f2              3   61[BANK0 ] float 
 10471 ;; Auto vars:     Size  Location     Type
 10472 ;;  exp1            1   69[BANK0 ] unsigned char 
 10473 ;;  exp2            1   68[BANK0 ] unsigned char 
 10474 ;;  sign            1   67[BANK0 ] unsigned char 
 10475 ;; Return value:  Size  Location     Type
 10476 ;;                  3   58[BANK0 ] float 
 10477 ;; Registers used:
 10478 ;;		wreg, status,2, status,0, cstack
 10479 ;; Tracked objects:
 10480 ;;		On entry : 0/0
 10481 ;;		On exit  : 0/0
 10482 ;;		Unchanged: 0/0
 10483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10484 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10485 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10486 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10487 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10488 ;;Total ram usage:       12 bytes
 10489 ;; Hardware stack levels used:    1
 10490 ;; Hardware stack levels required when called:    7
 10491 ;; This function calls:
 10492 ;;		___ftpack
 10493 ;; This function is called by:
 10494 ;;		_angleToPulse
 10495 ;;		_printf
 10496 ;;		___ftsub
 10497 ;; This function uses a non-reentrant model
 10498 ;;
 10499                           
 10500                           	psect	text33
 10501  002656                     __ptext33:
 10502                           	opt stack 0
 10503  002656                     ___ftadd:
 10504                           	opt stack 20
 10505                           
 10506                           ;incstack = 0
 10507  002656  C0BC  F0C0         	movff	___ftadd@f1+2,??___ftadd
 10508  00265A  0100               	movlb	0	; () banked
 10509  00265C  6BC1               	clrf	(??___ftadd+1)& (0+255),b
 10510  00265E  6BC2               	clrf	(??___ftadd+2)& (0+255),b
 10511  002660  0100               	movlb	0	; () banked
 10512  002662  35BB               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10513  002664  0100               	movlb	0	; () banked
 10514  002666  37C0               	rlcf	??___ftadd& (0+255),f,b
 10515  002668  E301               	bnc	u4091
 10516  00266A  81C1               	bsf	(??___ftadd+1)& (0+255),0,b
 10517  00266C                     u4091:
 10518  00266C  0100               	movlb	0	; () banked
 10519  00266E  51C0               	movf	??___ftadd& (0+255),w,b
 10520  002670  0100               	movlb	0	; () banked
 10521  002672  6FC5               	movwf	___ftadd@exp1& (0+255),b
 10522  002674  C0BF  F0C0         	movff	___ftadd@f2+2,??___ftadd
 10523  002678  0100               	movlb	0	; () banked
 10524  00267A  6BC1               	clrf	(??___ftadd+1)& (0+255),b
 10525  00267C  6BC2               	clrf	(??___ftadd+2)& (0+255),b
 10526  00267E  0100               	movlb	0	; () banked
 10527  002680  35BE               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 10528  002682  0100               	movlb	0	; () banked
 10529  002684  37C0               	rlcf	??___ftadd& (0+255),f,b
 10530  002686  E301               	bnc	u4101
 10531  002688  81C1               	bsf	(??___ftadd+1)& (0+255),0,b
 10532  00268A                     u4101:
 10533  00268A  0100               	movlb	0	; () banked
 10534  00268C  51C0               	movf	??___ftadd& (0+255),w,b
 10535  00268E  0100               	movlb	0	; () banked
 10536  002690  6FC4               	movwf	___ftadd@exp2& (0+255),b
 10537                           
 10538                           ; BSR set to: 0
 10539  002692  0100               	movlb	0	; () banked
 10540  002694  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10541  002696  0100               	movlb	0	; () banked
 10542  002698  B4D8               	btfsc	status,2,c
 10543  00269A  D011               	goto	l1046
 10544                           
 10545                           ; BSR set to: 0
 10546  00269C  0100               	movlb	0	; () banked
 10547  00269E  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10548  0026A0  0100               	movlb	0	; () banked
 10549  0026A2  5DC5               	subwf	___ftadd@exp1& (0+255),w,b
 10550  0026A4  B0D8               	btfsc	status,0,c
 10551  0026A6  D012               	goto	l4468
 10552                           
 10553                           ; BSR set to: 0
 10554  0026A8  0100               	movlb	0	; () banked
 10555  0026AA  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10556  0026AC  0800               	sublw	0
 10557  0026AE  0100               	movlb	0	; () banked
 10558  0026B0  25C4               	addwf	___ftadd@exp2& (0+255),w,b
 10559  0026B2  0100               	movlb	0	; () banked
 10560  0026B4  6FC0               	movwf	??___ftadd& (0+255),b
 10561  0026B6  0E18               	movlw	24
 10562  0026B8  0100               	movlb	0	; () banked
 10563  0026BA  65C0               	cpfsgt	??___ftadd& (0+255),b
 10564  0026BC  D007               	goto	l4468
 10565  0026BE                     l1046:
 10566                           
 10567                           ; BSR set to: 0
 10568  0026BE  C0BD  F0BA         	movff	___ftadd@f2,?___ftadd
 10569  0026C2  C0BE  F0BB         	movff	___ftadd@f2+1,?___ftadd+1
 10570  0026C6  C0BF  F0BC         	movff	___ftadd@f2+2,?___ftadd+2
 10571  0026CA  0012               	return	
 10572  0026CC                     l4468:
 10573                           
 10574                           ; BSR set to: 0
 10575  0026CC  0100               	movlb	0	; () banked
 10576  0026CE  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10577  0026D0  0100               	movlb	0	; () banked
 10578  0026D2  B4D8               	btfsc	status,2,c
 10579  0026D4  D011               	goto	l1050
 10580                           
 10581                           ; BSR set to: 0
 10582  0026D6  0100               	movlb	0	; () banked
 10583  0026D8  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10584  0026DA  0100               	movlb	0	; () banked
 10585  0026DC  5DC4               	subwf	___ftadd@exp2& (0+255),w,b
 10586  0026DE  B0D8               	btfsc	status,0,c
 10587  0026E0  D012               	goto	l4474
 10588                           
 10589                           ; BSR set to: 0
 10590  0026E2  0100               	movlb	0	; () banked
 10591  0026E4  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10592  0026E6  0800               	sublw	0
 10593  0026E8  0100               	movlb	0	; () banked
 10594  0026EA  25C5               	addwf	___ftadd@exp1& (0+255),w,b
 10595  0026EC  0100               	movlb	0	; () banked
 10596  0026EE  6FC0               	movwf	??___ftadd& (0+255),b
 10597  0026F0  0E18               	movlw	24
 10598  0026F2  0100               	movlb	0	; () banked
 10599  0026F4  65C0               	cpfsgt	??___ftadd& (0+255),b
 10600  0026F6  D007               	goto	l4474
 10601  0026F8                     l1050:
 10602                           
 10603                           ; BSR set to: 0
 10604  0026F8  C0BA  F0BA         	movff	___ftadd@f1,?___ftadd
 10605  0026FC  C0BB  F0BB         	movff	___ftadd@f1+1,?___ftadd+1
 10606  002700  C0BC  F0BC         	movff	___ftadd@f1+2,?___ftadd+2
 10607  002704  0012               	return	
 10608  002706                     l4474:
 10609                           
 10610                           ; BSR set to: 0
 10611  002706  0E06               	movlw	6
 10612  002708  0100               	movlb	0	; () banked
 10613  00270A  6FC3               	movwf	___ftadd@sign& (0+255),b
 10614                           
 10615                           ; BSR set to: 0
 10616  00270C  0100               	movlb	0	; () banked
 10617  00270E  AFBC               	btfss	(___ftadd@f1+2)& (0+255),7,b
 10618  002710  D002               	goto	l4480
 10619                           
 10620                           ; BSR set to: 0
 10621  002712  0100               	movlb	0	; () banked
 10622  002714  8FC3               	bsf	___ftadd@sign& (0+255),7,b
 10623  002716                     l4480:
 10624                           
 10625                           ; BSR set to: 0
 10626  002716  0100               	movlb	0	; () banked
 10627  002718  AFBF               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10628  00271A  D002               	goto	l1052
 10629                           
 10630                           ; BSR set to: 0
 10631  00271C  0100               	movlb	0	; () banked
 10632  00271E  8DC3               	bsf	___ftadd@sign& (0+255),6,b
 10633  002720                     l1052:
 10634                           
 10635                           ; BSR set to: 0
 10636  002720  0100               	movlb	0	; () banked
 10637  002722  8FBB               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10638                           
 10639                           ; BSR set to: 0
 10640  002724  0EFF               	movlw	255
 10641  002726  0100               	movlb	0	; () banked
 10642  002728  17BA               	andwf	___ftadd@f1& (0+255),f,b
 10643  00272A  0EFF               	movlw	255
 10644  00272C  0100               	movlb	0	; () banked
 10645  00272E  17BB               	andwf	(___ftadd@f1+1)& (0+255),f,b
 10646  002730  0E00               	movlw	0
 10647  002732  0100               	movlb	0	; () banked
 10648  002734  17BC               	andwf	(___ftadd@f1+2)& (0+255),f,b
 10649  002736  0100               	movlb	0	; () banked
 10650  002738  8FBE               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10651                           
 10652                           ; BSR set to: 0
 10653  00273A  0EFF               	movlw	255
 10654  00273C  0100               	movlb	0	; () banked
 10655  00273E  17BD               	andwf	___ftadd@f2& (0+255),f,b
 10656  002740  0EFF               	movlw	255
 10657  002742  0100               	movlb	0	; () banked
 10658  002744  17BE               	andwf	(___ftadd@f2+1)& (0+255),f,b
 10659  002746  0E00               	movlw	0
 10660  002748  0100               	movlb	0	; () banked
 10661  00274A  17BF               	andwf	(___ftadd@f2+2)& (0+255),f,b
 10662                           
 10663                           ; BSR set to: 0
 10664  00274C  0100               	movlb	0	; () banked
 10665  00274E  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10666  002750  0100               	movlb	0	; () banked
 10667  002752  5DC5               	subwf	___ftadd@exp1& (0+255),w,b
 10668  002754  B0D8               	btfsc	status,0,c
 10669  002756  D025               	goto	l4500
 10670  002758                     l4490:
 10671                           
 10672                           ; BSR set to: 0
 10673  002758  0100               	movlb	0	; () banked
 10674  00275A  90D8               	bcf	status,0,c
 10675  00275C  37BD               	rlcf	___ftadd@f2& (0+255),f,b
 10676  00275E  37BE               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10677  002760  37BF               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10678  002762  0100               	movlb	0	; () banked
 10679  002764  07C4               	decf	___ftadd@exp2& (0+255),f,b
 10680                           
 10681                           ; BSR set to: 0
 10682  002766  0100               	movlb	0	; () banked
 10683  002768  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10684  00276A  0100               	movlb	0	; () banked
 10685  00276C  19C4               	xorwf	___ftadd@exp2& (0+255),w,b
 10686  00276E  B4D8               	btfsc	status,2,c
 10687  002770  D011               	goto	l4498
 10688                           
 10689                           ; BSR set to: 0
 10690  002772  0100               	movlb	0	; () banked
 10691  002774  07C3               	decf	___ftadd@sign& (0+255),f,b
 10692  002776  C0C3  F0C0         	movff	___ftadd@sign,??___ftadd
 10693  00277A  0E07               	movlw	7
 10694  00277C  0100               	movlb	0	; () banked
 10695  00277E  17C0               	andwf	??___ftadd& (0+255),f,b
 10696  002780  B4D8               	btfsc	status,2,c
 10697  002782  D008               	goto	l4498
 10698  002784  D7E9               	goto	l4490
 10699  002786                     l4496:
 10700                           
 10701                           ; BSR set to: 0
 10702  002786  0100               	movlb	0	; () banked
 10703  002788  90D8               	bcf	status,0,c
 10704  00278A  33BC               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10705  00278C  33BB               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10706  00278E  33BA               	rrcf	___ftadd@f1& (0+255),f,b
 10707  002790  0100               	movlb	0	; () banked
 10708  002792  2BC5               	incf	___ftadd@exp1& (0+255),f,b
 10709  002794                     l4498:
 10710                           
 10711                           ; BSR set to: 0
 10712  002794  0100               	movlb	0	; () banked
 10713  002796  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10714  002798  0100               	movlb	0	; () banked
 10715  00279A  19C5               	xorwf	___ftadd@exp1& (0+255),w,b
 10716  00279C  B4D8               	btfsc	status,2,c
 10717  00279E  D02B               	goto	l1061
 10718  0027A0  D7F2               	goto	l4496
 10719  0027A2                     l4500:
 10720                           
 10721                           ; BSR set to: 0
 10722  0027A2  0100               	movlb	0	; () banked
 10723  0027A4  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10724  0027A6  0100               	movlb	0	; () banked
 10725  0027A8  5DC4               	subwf	___ftadd@exp2& (0+255),w,b
 10726  0027AA  B0D8               	btfsc	status,0,c
 10727  0027AC  D024               	goto	l1061
 10728  0027AE                     l4502:
 10729                           
 10730                           ; BSR set to: 0
 10731  0027AE  0100               	movlb	0	; () banked
 10732  0027B0  90D8               	bcf	status,0,c
 10733  0027B2  37BA               	rlcf	___ftadd@f1& (0+255),f,b
 10734  0027B4  37BB               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10735  0027B6  37BC               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10736  0027B8  0100               	movlb	0	; () banked
 10737  0027BA  07C5               	decf	___ftadd@exp1& (0+255),f,b
 10738                           
 10739                           ; BSR set to: 0
 10740  0027BC  0100               	movlb	0	; () banked
 10741  0027BE  51C5               	movf	___ftadd@exp1& (0+255),w,b
 10742  0027C0  0100               	movlb	0	; () banked
 10743  0027C2  19C4               	xorwf	___ftadd@exp2& (0+255),w,b
 10744  0027C4  B4D8               	btfsc	status,2,c
 10745  0027C6  D011               	goto	l4510
 10746                           
 10747                           ; BSR set to: 0
 10748  0027C8  0100               	movlb	0	; () banked
 10749  0027CA  07C3               	decf	___ftadd@sign& (0+255),f,b
 10750  0027CC  C0C3  F0C0         	movff	___ftadd@sign,??___ftadd
 10751  0027D0  0E07               	movlw	7
 10752  0027D2  0100               	movlb	0	; () banked
 10753  0027D4  17C0               	andwf	??___ftadd& (0+255),f,b
 10754  0027D6  B4D8               	btfsc	status,2,c
 10755  0027D8  D008               	goto	l4510
 10756  0027DA  D7E9               	goto	l4502
 10757  0027DC                     l4508:
 10758                           
 10759                           ; BSR set to: 0
 10760  0027DC  0100               	movlb	0	; () banked
 10761  0027DE  90D8               	bcf	status,0,c
 10762  0027E0  33BF               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10763  0027E2  33BE               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10764  0027E4  33BD               	rrcf	___ftadd@f2& (0+255),f,b
 10765  0027E6  0100               	movlb	0	; () banked
 10766  0027E8  2BC4               	incf	___ftadd@exp2& (0+255),f,b
 10767  0027EA                     l4510:
 10768                           
 10769                           ; BSR set to: 0
 10770  0027EA  0100               	movlb	0	; () banked
 10771  0027EC  51C4               	movf	___ftadd@exp2& (0+255),w,b
 10772  0027EE  0100               	movlb	0	; () banked
 10773  0027F0  19C5               	xorwf	___ftadd@exp1& (0+255),w,b
 10774  0027F2  A4D8               	btfss	status,2,c
 10775  0027F4  D7F3               	goto	l4508
 10776  0027F6                     l1061:
 10777                           
 10778                           ; BSR set to: 0
 10779  0027F6  0100               	movlb	0	; () banked
 10780  0027F8  AFC3               	btfss	___ftadd@sign& (0+255),7,b
 10781  0027FA  D012               	goto	l1070
 10782                           
 10783                           ; BSR set to: 0
 10784  0027FC  0EFF               	movlw	255
 10785  0027FE  0100               	movlb	0	; () banked
 10786  002800  1BBA               	xorwf	___ftadd@f1& (0+255),f,b
 10787  002802  0EFF               	movlw	255
 10788  002804  0100               	movlb	0	; () banked
 10789  002806  1BBB               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 10790  002808  0EFF               	movlw	255
 10791  00280A  0100               	movlb	0	; () banked
 10792  00280C  1BBC               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 10793  00280E  0E01               	movlw	1
 10794  002810  0100               	movlb	0	; () banked
 10795  002812  27BA               	addwf	___ftadd@f1& (0+255),f,b
 10796  002814  0E00               	movlw	0
 10797  002816  0100               	movlb	0	; () banked
 10798  002818  23BB               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10799  00281A  0E00               	movlw	0
 10800  00281C  0100               	movlb	0	; () banked
 10801  00281E  23BC               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10802  002820                     l1070:
 10803                           
 10804                           ; BSR set to: 0
 10805  002820  0100               	movlb	0	; () banked
 10806  002822  ADC3               	btfss	___ftadd@sign& (0+255),6,b
 10807  002824  D012               	goto	l4516
 10808                           
 10809                           ; BSR set to: 0
 10810  002826  0EFF               	movlw	255
 10811  002828  0100               	movlb	0	; () banked
 10812  00282A  1BBD               	xorwf	___ftadd@f2& (0+255),f,b
 10813  00282C  0EFF               	movlw	255
 10814  00282E  0100               	movlb	0	; () banked
 10815  002830  1BBE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10816  002832  0EFF               	movlw	255
 10817  002834  0100               	movlb	0	; () banked
 10818  002836  1BBF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10819  002838  0E01               	movlw	1
 10820  00283A  0100               	movlb	0	; () banked
 10821  00283C  27BD               	addwf	___ftadd@f2& (0+255),f,b
 10822  00283E  0E00               	movlw	0
 10823  002840  0100               	movlb	0	; () banked
 10824  002842  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10825  002844  0E00               	movlw	0
 10826  002846  0100               	movlb	0	; () banked
 10827  002848  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10828  00284A                     l4516:
 10829                           
 10830                           ; BSR set to: 0
 10831  00284A  0E00               	movlw	0
 10832  00284C  0100               	movlb	0	; () banked
 10833  00284E  6FC3               	movwf	___ftadd@sign& (0+255),b
 10834                           
 10835                           ; BSR set to: 0
 10836  002850  0100               	movlb	0	; () banked
 10837  002852  51BA               	movf	___ftadd@f1& (0+255),w,b
 10838  002854  0100               	movlb	0	; () banked
 10839  002856  27BD               	addwf	___ftadd@f2& (0+255),f,b
 10840  002858  0100               	movlb	0	; () banked
 10841  00285A  51BB               	movf	(___ftadd@f1+1)& (0+255),w,b
 10842  00285C  0100               	movlb	0	; () banked
 10843  00285E  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10844  002860  0100               	movlb	0	; () banked
 10845  002862  51BC               	movf	(___ftadd@f1+2)& (0+255),w,b
 10846  002864  0100               	movlb	0	; () banked
 10847  002866  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10848                           
 10849                           ; BSR set to: 0
 10850  002868  0100               	movlb	0	; () banked
 10851  00286A  AFBF               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10852  00286C  D015               	goto	l4526
 10853                           
 10854                           ; BSR set to: 0
 10855  00286E  0EFF               	movlw	255
 10856  002870  0100               	movlb	0	; () banked
 10857  002872  1BBD               	xorwf	___ftadd@f2& (0+255),f,b
 10858  002874  0EFF               	movlw	255
 10859  002876  0100               	movlb	0	; () banked
 10860  002878  1BBE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10861  00287A  0EFF               	movlw	255
 10862  00287C  0100               	movlb	0	; () banked
 10863  00287E  1BBF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10864  002880  0E01               	movlw	1
 10865  002882  0100               	movlb	0	; () banked
 10866  002884  27BD               	addwf	___ftadd@f2& (0+255),f,b
 10867  002886  0E00               	movlw	0
 10868  002888  0100               	movlb	0	; () banked
 10869  00288A  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10870  00288C  0E00               	movlw	0
 10871  00288E  0100               	movlb	0	; () banked
 10872  002890  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10873                           
 10874                           ; BSR set to: 0
 10875  002892  0E01               	movlw	1
 10876  002894  0100               	movlb	0	; () banked
 10877  002896  6FC3               	movwf	___ftadd@sign& (0+255),b
 10878  002898                     l4526:
 10879                           
 10880                           ; BSR set to: 0
 10881  002898  C0BD  F080         	movff	___ftadd@f2,___ftpack@arg
 10882  00289C  C0BE  F081         	movff	___ftadd@f2+1,___ftpack@arg+1
 10883  0028A0  C0BF  F082         	movff	___ftadd@f2+2,___ftpack@arg+2
 10884  0028A4  C0C5  F083         	movff	___ftadd@exp1,___ftpack@exp
 10885  0028A8  C0C3  F084         	movff	___ftadd@sign,___ftpack@sign
 10886  0028AC  EC58  F01E         	call	___ftpack	;wreg free
 10887  0028B0  C080  F0BA         	movff	?___ftpack,?___ftadd
 10888  0028B4  C081  F0BB         	movff	?___ftpack+1,?___ftadd+1
 10889  0028B8  C082  F0BC         	movff	?___ftpack+2,?___ftadd+2
 10890  0028BC  0012               	return	
 10891  0028BE                     __end_of___ftadd:
 10892                           	opt stack 0
 10893                           tblptru	equ	0xFF8
 10894                           tblptrh	equ	0xFF7
 10895                           tblptrl	equ	0xFF6
 10896                           tablat	equ	0xFF5
 10897                           prodh	equ	0xFF4
 10898                           prodl	equ	0xFF3
 10899                           intcon	equ	0xFF2
 10900                           postinc0	equ	0xFEE
 10901                           wreg	equ	0xFE8
 10902                           postdec1	equ	0xFE5
 10903                           fsr1l	equ	0xFE1
 10904                           indf2	equ	0xFDF
 10905                           postinc2	equ	0xFDE
 10906                           postdec2	equ	0xFDD
 10907                           fsr2h	equ	0xFDA
 10908                           fsr2l	equ	0xFD9
 10909                           status	equ	0xFD8
 10910                           
 10911 ;; *************** function ___awtoft *****************
 10912 ;; Defined at:
 10913 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 10914 ;; Parameters:    Size  Location     Type
 10915 ;;  c               2    8[BANK0 ] int 
 10916 ;; Auto vars:     Size  Location     Type
 10917 ;;  sign            1   11[BANK0 ] unsigned char 
 10918 ;; Return value:  Size  Location     Type
 10919 ;;                  3    8[BANK0 ] float 
 10920 ;; Registers used:
 10921 ;;		wreg, status,2, status,0, cstack
 10922 ;; Tracked objects:
 10923 ;;		On entry : 0/0
 10924 ;;		On exit  : 0/0
 10925 ;;		Unchanged: 0/0
 10926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10927 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10928 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10930 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10931 ;;Total ram usage:        4 bytes
 10932 ;; Hardware stack levels used:    1
 10933 ;; Hardware stack levels required when called:    7
 10934 ;; This function calls:
 10935 ;;		___ftpack
 10936 ;; This function is called by:
 10937 ;;		_angleToPulse
 10938 ;;		_testFrequency
 10939 ;; This function uses a non-reentrant model
 10940 ;;
 10941                           
 10942                           	psect	text34
 10943  004F66                     __ptext34:
 10944                           	opt stack 0
 10945  004F66                     ___awtoft:
 10946                           	opt stack 20
 10947                           
 10948                           ;incstack = 0
 10949  004F66  0E00               	movlw	0
 10950  004F68  0100               	movlb	0	; () banked
 10951  004F6A  6F8B               	movwf	___awtoft@sign& (0+255),b
 10952                           
 10953                           ; BSR set to: 0
 10954  004F6C  0100               	movlb	0	; () banked
 10955  004F6E  AF89               	btfss	(___awtoft@c+1)& (0+255),7,b
 10956  004F70  D008               	goto	l4712
 10957                           
 10958                           ; BSR set to: 0
 10959  004F72  0100               	movlb	0	; () banked
 10960  004F74  6D88               	negf	___awtoft@c& (0+255),b
 10961  004F76  1F89               	comf	(___awtoft@c+1)& (0+255),f,b
 10962  004F78  B0D8               	btfsc	status,0,c
 10963  004F7A  2B89               	incf	(___awtoft@c+1)& (0+255),f,b
 10964                           
 10965                           ; BSR set to: 0
 10966  004F7C  0E01               	movlw	1
 10967  004F7E  0100               	movlb	0	; () banked
 10968  004F80  6F8B               	movwf	___awtoft@sign& (0+255),b
 10969  004F82                     l4712:
 10970                           
 10971                           ; BSR set to: 0
 10972  004F82  C088  F080         	movff	___awtoft@c,___ftpack@arg
 10973  004F86  C089  F081         	movff	___awtoft@c+1,___ftpack@arg+1
 10974  004F8A  0100               	movlb	0	; () banked
 10975  004F8C  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
 10976  004F8E  0E8E               	movlw	142
 10977  004F90  0100               	movlb	0	; () banked
 10978  004F92  6F83               	movwf	___ftpack@exp& (0+255),b
 10979  004F94  C08B  F084         	movff	___awtoft@sign,___ftpack@sign
 10980  004F98  EC58  F01E         	call	___ftpack	;wreg free
 10981  004F9C  C080  F088         	movff	?___ftpack,?___awtoft
 10982  004FA0  C081  F089         	movff	?___ftpack+1,?___awtoft+1
 10983  004FA4  C082  F08A         	movff	?___ftpack+2,?___awtoft+2
 10984  004FA8  0012               	return	
 10985  004FAA                     __end_of___awtoft:
 10986                           	opt stack 0
 10987                           tblptru	equ	0xFF8
 10988                           tblptrh	equ	0xFF7
 10989                           tblptrl	equ	0xFF6
 10990                           tablat	equ	0xFF5
 10991                           prodh	equ	0xFF4
 10992                           prodl	equ	0xFF3
 10993                           intcon	equ	0xFF2
 10994                           postinc0	equ	0xFEE
 10995                           wreg	equ	0xFE8
 10996                           postdec1	equ	0xFE5
 10997                           fsr1l	equ	0xFE1
 10998                           indf2	equ	0xFDF
 10999                           postinc2	equ	0xFDE
 11000                           postdec2	equ	0xFDD
 11001                           fsr2h	equ	0xFDA
 11002                           fsr2l	equ	0xFD9
 11003                           status	equ	0xFD8
 11004                           
 11005 ;; *************** function ___altoft *****************
 11006 ;; Defined at:
 11007 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 11008 ;; Parameters:    Size  Location     Type
 11009 ;;  c               4    8[BANK0 ] long 
 11010 ;; Auto vars:     Size  Location     Type
 11011 ;;  sign            1   17[BANK0 ] unsigned char 
 11012 ;;  exp             1   16[BANK0 ] unsigned char 
 11013 ;; Return value:  Size  Location     Type
 11014 ;;                  3    8[BANK0 ] float 
 11015 ;; Registers used:
 11016 ;;		wreg, status,2, status,0, cstack
 11017 ;; Tracked objects:
 11018 ;;		On entry : 0/0
 11019 ;;		On exit  : 0/0
 11020 ;;		Unchanged: 0/0
 11021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11022 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11023 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11024 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11025 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11026 ;;Total ram usage:       10 bytes
 11027 ;; Hardware stack levels used:    1
 11028 ;; Hardware stack levels required when called:    7
 11029 ;; This function calls:
 11030 ;;		___ftpack
 11031 ;; This function is called by:
 11032 ;;		_sortBattery
 11033 ;;		_angleToPulse
 11034 ;; This function uses a non-reentrant model
 11035 ;;
 11036                           
 11037                           	psect	text35
 11038  0047BA                     __ptext35:
 11039                           	opt stack 0
 11040  0047BA                     ___altoft:
 11041                           	opt stack 20
 11042                           
 11043                           ;incstack = 0
 11044  0047BA  0E00               	movlw	0
 11045  0047BC  0100               	movlb	0	; () banked
 11046  0047BE  6F91               	movwf	___altoft@sign& (0+255),b
 11047  0047C0  0E8E               	movlw	142
 11048  0047C2  0100               	movlb	0	; () banked
 11049  0047C4  6F90               	movwf	___altoft@exp& (0+255),b
 11050                           
 11051                           ; BSR set to: 0
 11052  0047C6  0100               	movlb	0	; () banked
 11053  0047C8  AF8B               	btfss	(___altoft@c+3)& (0+255),7,b
 11054  0047CA  D015               	goto	l4454
 11055                           
 11056                           ; BSR set to: 0
 11057  0047CC  0100               	movlb	0	; () banked
 11058  0047CE  1F8B               	comf	(___altoft@c+3)& (0+255),f,b
 11059  0047D0  1F8A               	comf	(___altoft@c+2)& (0+255),f,b
 11060  0047D2  1F89               	comf	(___altoft@c+1)& (0+255),f,b
 11061  0047D4  6D88               	negf	___altoft@c& (0+255),b
 11062  0047D6  0E00               	movlw	0
 11063  0047D8  2389               	addwfc	(___altoft@c+1)& (0+255),f,b
 11064  0047DA  238A               	addwfc	(___altoft@c+2)& (0+255),f,b
 11065  0047DC  238B               	addwfc	(___altoft@c+3)& (0+255),f,b
 11066                           
 11067                           ; BSR set to: 0
 11068  0047DE  0E01               	movlw	1
 11069  0047E0  0100               	movlb	0	; () banked
 11070  0047E2  6F91               	movwf	___altoft@sign& (0+255),b
 11071                           
 11072                           ; BSR set to: 0
 11073  0047E4  D008               	goto	l4454
 11074  0047E6                     l4452:
 11075                           
 11076                           ; BSR set to: 0
 11077  0047E6  0100               	movlb	0	; () banked
 11078  0047E8  90D8               	bcf	status,0,c
 11079  0047EA  338B               	rrcf	(___altoft@c+3)& (0+255),f,b
 11080  0047EC  338A               	rrcf	(___altoft@c+2)& (0+255),f,b
 11081  0047EE  3389               	rrcf	(___altoft@c+1)& (0+255),f,b
 11082  0047F0  3388               	rrcf	___altoft@c& (0+255),f,b
 11083  0047F2  0100               	movlb	0	; () banked
 11084  0047F4  2B90               	incf	___altoft@exp& (0+255),f,b
 11085  0047F6                     l4454:
 11086                           
 11087                           ; BSR set to: 0
 11088  0047F6  0E00               	movlw	0
 11089  0047F8  0100               	movlb	0	; () banked
 11090  0047FA  1588               	andwf	___altoft@c& (0+255),w,b
 11091  0047FC  0100               	movlb	0	; () banked
 11092  0047FE  6F8C               	movwf	??___altoft& (0+255),b
 11093  004800  0E00               	movlw	0
 11094  004802  0100               	movlb	0	; () banked
 11095  004804  1589               	andwf	(___altoft@c+1)& (0+255),w,b
 11096  004806  0100               	movlb	0	; () banked
 11097  004808  6F8D               	movwf	(??___altoft+1)& (0+255),b
 11098  00480A  0E00               	movlw	0
 11099  00480C  0100               	movlb	0	; () banked
 11100  00480E  158A               	andwf	(___altoft@c+2)& (0+255),w,b
 11101  004810  0100               	movlb	0	; () banked
 11102  004812  6F8E               	movwf	(??___altoft+2)& (0+255),b
 11103  004814  0EFF               	movlw	255
 11104  004816  0100               	movlb	0	; () banked
 11105  004818  158B               	andwf	(___altoft@c+3)& (0+255),w,b
 11106  00481A  0100               	movlb	0	; () banked
 11107  00481C  6F8F               	movwf	(??___altoft+3)& (0+255),b
 11108  00481E  0100               	movlb	0	; () banked
 11109  004820  518C               	movf	??___altoft& (0+255),w,b
 11110  004822  0100               	movlb	0	; () banked
 11111  004824  118D               	iorwf	(??___altoft+1)& (0+255),w,b
 11112  004826  0100               	movlb	0	; () banked
 11113  004828  118E               	iorwf	(??___altoft+2)& (0+255),w,b
 11114  00482A  0100               	movlb	0	; () banked
 11115  00482C  118F               	iorwf	(??___altoft+3)& (0+255),w,b
 11116  00482E  A4D8               	btfss	status,2,c
 11117  004830  D7DA               	goto	l4452
 11118                           
 11119                           ; BSR set to: 0
 11120                           
 11121                           ; BSR set to: 0
 11122  004832  C088  F080         	movff	___altoft@c,___ftpack@arg
 11123  004836  C089  F081         	movff	___altoft@c+1,___ftpack@arg+1
 11124  00483A  C08A  F082         	movff	___altoft@c+2,___ftpack@arg+2
 11125  00483E  C090  F083         	movff	___altoft@exp,___ftpack@exp
 11126  004842  C091  F084         	movff	___altoft@sign,___ftpack@sign
 11127  004846  EC58  F01E         	call	___ftpack	;wreg free
 11128  00484A  C080  F088         	movff	?___ftpack,?___altoft
 11129  00484E  C081  F089         	movff	?___ftpack+1,?___altoft+1
 11130  004852  C082  F08A         	movff	?___ftpack+2,?___altoft+2
 11131  004856  0012               	return	
 11132  004858                     __end_of___altoft:
 11133                           	opt stack 0
 11134                           tblptru	equ	0xFF8
 11135                           tblptrh	equ	0xFF7
 11136                           tblptrl	equ	0xFF6
 11137                           tablat	equ	0xFF5
 11138                           prodh	equ	0xFF4
 11139                           prodl	equ	0xFF3
 11140                           intcon	equ	0xFF2
 11141                           postinc0	equ	0xFEE
 11142                           wreg	equ	0xFE8
 11143                           postdec1	equ	0xFE5
 11144                           fsr1l	equ	0xFE1
 11145                           indf2	equ	0xFDF
 11146                           postinc2	equ	0xFDE
 11147                           postdec2	equ	0xFDD
 11148                           fsr2h	equ	0xFDA
 11149                           fsr2l	equ	0xFD9
 11150                           status	equ	0xFD8
 11151                           
 11152 ;; *************** function ___ftpack *****************
 11153 ;; Defined at:
 11154 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 11155 ;; Parameters:    Size  Location     Type
 11156 ;;  arg             3    0[BANK0 ] unsigned um
 11157 ;;  exp             1    3[BANK0 ] unsigned char 
 11158 ;;  sign            1    4[BANK0 ] unsigned char 
 11159 ;; Auto vars:     Size  Location     Type
 11160 ;;		None
 11161 ;; Return value:  Size  Location     Type
 11162 ;;                  3    0[BANK0 ] float 
 11163 ;; Registers used:
 11164 ;;		wreg, status,2, status,0
 11165 ;; Tracked objects:
 11166 ;;		On entry : 0/0
 11167 ;;		On exit  : 0/0
 11168 ;;		Unchanged: 0/0
 11169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11170 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11172 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11173 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11174 ;;Total ram usage:        8 bytes
 11175 ;; Hardware stack levels used:    1
 11176 ;; Hardware stack levels required when called:    6
 11177 ;; This function calls:
 11178 ;;		Nothing
 11179 ;; This function is called by:
 11180 ;;		___altoft
 11181 ;;		___awtoft
 11182 ;;		___ftadd
 11183 ;;		___ftdiv
 11184 ;;		___ftmul
 11185 ;;		___lltoft
 11186 ;; This function uses a non-reentrant model
 11187 ;;
 11188                           
 11189                           	psect	text36
 11190  003CB0                     __ptext36:
 11191                           	opt stack 0
 11192  003CB0                     ___ftpack:
 11193                           	opt stack 20
 11194                           
 11195                           ;incstack = 0
 11196  003CB0  0100               	movlb	0	; () banked
 11197  003CB2  5183               	movf	___ftpack@exp& (0+255),w,b
 11198  003CB4  0100               	movlb	0	; () banked
 11199  003CB6  B4D8               	btfsc	status,2,c
 11200  003CB8  D008               	goto	l4386
 11201                           
 11202                           ; BSR set to: 0
 11203  003CBA  0100               	movlb	0	; () banked
 11204  003CBC  5180               	movf	___ftpack@arg& (0+255),w,b
 11205  003CBE  0100               	movlb	0	; () banked
 11206  003CC0  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 11207  003CC2  0100               	movlb	0	; () banked
 11208  003CC4  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 11209  003CC6  A4D8               	btfss	status,2,c
 11210  003CC8  D011               	goto	l4392
 11211  003CCA                     l4386:
 11212                           
 11213                           ; BSR set to: 0
 11214  003CCA  0E00               	movlw	0
 11215  003CCC  0100               	movlb	0	; () banked
 11216  003CCE  6F80               	movwf	?___ftpack& (0+255),b
 11217  003CD0  0E00               	movlw	0
 11218  003CD2  0100               	movlb	0	; () banked
 11219  003CD4  6F81               	movwf	(?___ftpack+1)& (0+255),b
 11220  003CD6  0E00               	movlw	0
 11221  003CD8  0100               	movlb	0	; () banked
 11222  003CDA  6F82               	movwf	(?___ftpack+2)& (0+255),b
 11223                           
 11224                           ; BSR set to: 0
 11225  003CDC  0012               	return	
 11226  003CDE                     l4390:
 11227                           
 11228                           ; BSR set to: 0
 11229  003CDE  0100               	movlb	0	; () banked
 11230  003CE0  2B83               	incf	___ftpack@exp& (0+255),f,b
 11231  003CE2  0100               	movlb	0	; () banked
 11232  003CE4  90D8               	bcf	status,0,c
 11233  003CE6  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 11234  003CE8  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 11235  003CEA  3380               	rrcf	___ftpack@arg& (0+255),f,b
 11236  003CEC                     l4392:
 11237                           
 11238                           ; BSR set to: 0
 11239  003CEC  0E00               	movlw	0
 11240  003CEE  0100               	movlb	0	; () banked
 11241  003CF0  1580               	andwf	___ftpack@arg& (0+255),w,b
 11242  003CF2  0100               	movlb	0	; () banked
 11243  003CF4  6F85               	movwf	??___ftpack& (0+255),b
 11244  003CF6  0E00               	movlw	0
 11245  003CF8  0100               	movlb	0	; () banked
 11246  003CFA  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
 11247  003CFC  0100               	movlb	0	; () banked
 11248  003CFE  6F86               	movwf	(??___ftpack+1)& (0+255),b
 11249  003D00  0EFE               	movlw	254
 11250  003D02  0100               	movlb	0	; () banked
 11251  003D04  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
 11252  003D06  0100               	movlb	0	; () banked
 11253  003D08  6F87               	movwf	(??___ftpack+2)& (0+255),b
 11254  003D0A  0100               	movlb	0	; () banked
 11255  003D0C  5185               	movf	??___ftpack& (0+255),w,b
 11256  003D0E  0100               	movlb	0	; () banked
 11257  003D10  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
 11258  003D12  0100               	movlb	0	; () banked
 11259  003D14  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
 11260  003D16  B4D8               	btfsc	status,2,c
 11261  003D18  D011               	goto	l4398
 11262  003D1A  D7E1               	goto	l4390
 11263  003D1C                     l4394:
 11264                           
 11265                           ; BSR set to: 0
 11266  003D1C  0100               	movlb	0	; () banked
 11267  003D1E  2B83               	incf	___ftpack@exp& (0+255),f,b
 11268                           
 11269                           ; BSR set to: 0
 11270  003D20  0E01               	movlw	1
 11271  003D22  0100               	movlb	0	; () banked
 11272  003D24  2780               	addwf	___ftpack@arg& (0+255),f,b
 11273  003D26  0E00               	movlw	0
 11274  003D28  0100               	movlb	0	; () banked
 11275  003D2A  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 11276  003D2C  0E00               	movlw	0
 11277  003D2E  0100               	movlb	0	; () banked
 11278  003D30  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 11279  003D32  0100               	movlb	0	; () banked
 11280  003D34  90D8               	bcf	status,0,c
 11281  003D36  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 11282  003D38  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 11283  003D3A  3380               	rrcf	___ftpack@arg& (0+255),f,b
 11284  003D3C                     l4398:
 11285                           
 11286                           ; BSR set to: 0
 11287  003D3C  0E00               	movlw	0
 11288  003D3E  0100               	movlb	0	; () banked
 11289  003D40  1580               	andwf	___ftpack@arg& (0+255),w,b
 11290  003D42  0100               	movlb	0	; () banked
 11291  003D44  6F85               	movwf	??___ftpack& (0+255),b
 11292  003D46  0E00               	movlw	0
 11293  003D48  0100               	movlb	0	; () banked
 11294  003D4A  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
 11295  003D4C  0100               	movlb	0	; () banked
 11296  003D4E  6F86               	movwf	(??___ftpack+1)& (0+255),b
 11297  003D50  0EFF               	movlw	255
 11298  003D52  0100               	movlb	0	; () banked
 11299  003D54  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
 11300  003D56  0100               	movlb	0	; () banked
 11301  003D58  6F87               	movwf	(??___ftpack+2)& (0+255),b
 11302  003D5A  0100               	movlb	0	; () banked
 11303  003D5C  5185               	movf	??___ftpack& (0+255),w,b
 11304  003D5E  0100               	movlb	0	; () banked
 11305  003D60  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
 11306  003D62  0100               	movlb	0	; () banked
 11307  003D64  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
 11308  003D66  B4D8               	btfsc	status,2,c
 11309  003D68  D008               	goto	l4402
 11310  003D6A  D7D8               	goto	l4394
 11311  003D6C                     l4400:
 11312                           
 11313                           ; BSR set to: 0
 11314  003D6C  0100               	movlb	0	; () banked
 11315  003D6E  0783               	decf	___ftpack@exp& (0+255),f,b
 11316  003D70  0100               	movlb	0	; () banked
 11317  003D72  90D8               	bcf	status,0,c
 11318  003D74  3780               	rlcf	___ftpack@arg& (0+255),f,b
 11319  003D76  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 11320  003D78  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 11321  003D7A                     l4402:
 11322                           
 11323                           ; BSR set to: 0
 11324  003D7A  0100               	movlb	0	; () banked
 11325  003D7C  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 11326  003D7E  D004               	goto	l1023
 11327                           
 11328                           ; BSR set to: 0
 11329  003D80  0E02               	movlw	2
 11330  003D82  0100               	movlb	0	; () banked
 11331  003D84  6183               	cpfslt	___ftpack@exp& (0+255),b
 11332  003D86  D7F2               	goto	l4400
 11333  003D88                     l1023:
 11334                           
 11335                           ; BSR set to: 0
 11336  003D88  0100               	movlb	0	; () banked
 11337  003D8A  B183               	btfsc	___ftpack@exp& (0+255),0,b
 11338  003D8C  D002               	goto	l4408
 11339                           
 11340                           ; BSR set to: 0
 11341  003D8E  0100               	movlb	0	; () banked
 11342  003D90  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
 11343  003D92                     l4408:
 11344                           
 11345                           ; BSR set to: 0
 11346  003D92  0100               	movlb	0	; () banked
 11347  003D94  90D8               	bcf	status,0,c
 11348  003D96  3383               	rrcf	___ftpack@exp& (0+255),f,b
 11349  003D98  0100               	movlb	0	; () banked
 11350  003D9A  5183               	movf	___ftpack@exp& (0+255),w,b
 11351  003D9C  0100               	movlb	0	; () banked
 11352  003D9E  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 11353                           
 11354                           ; BSR set to: 0
 11355  003DA0  0100               	movlb	0	; () banked
 11356  003DA2  5184               	movf	___ftpack@sign& (0+255),w,b
 11357  003DA4  0100               	movlb	0	; () banked
 11358  003DA6  B4D8               	btfsc	status,2,c
 11359  003DA8  D002               	goto	l4414
 11360                           
 11361                           ; BSR set to: 0
 11362  003DAA  0100               	movlb	0	; () banked
 11363  003DAC  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
 11364  003DAE                     l4414:
 11365                           
 11366                           ; BSR set to: 0
 11367  003DAE  C080  F080         	movff	___ftpack@arg,?___ftpack
 11368  003DB2  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
 11369  003DB6  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
 11370  003DBA  0012               	return	
 11371  003DBC                     __end_of___ftpack:
 11372                           	opt stack 0
 11373                           tblptru	equ	0xFF8
 11374                           tblptrh	equ	0xFF7
 11375                           tblptrl	equ	0xFF6
 11376                           tablat	equ	0xFF5
 11377                           prodh	equ	0xFF4
 11378                           prodl	equ	0xFF3
 11379                           intcon	equ	0xFF2
 11380                           postinc0	equ	0xFEE
 11381                           wreg	equ	0xFE8
 11382                           postdec1	equ	0xFE5
 11383                           fsr1l	equ	0xFE1
 11384                           indf2	equ	0xFDF
 11385                           postinc2	equ	0xFDE
 11386                           postdec2	equ	0xFDD
 11387                           fsr2h	equ	0xFDA
 11388                           fsr2l	equ	0xFD9
 11389                           status	equ	0xFD8
 11390                           
 11391 ;; *************** function _initTimer *****************
 11392 ;; Defined at:
 11393 ;;		line 52 in file "timer.c"
 11394 ;; Parameters:    Size  Location     Type
 11395 ;;  timer           2    0[BANK0 ] int 
 11396 ;; Auto vars:     Size  Location     Type
 11397 ;;		None
 11398 ;; Return value:  Size  Location     Type
 11399 ;;                  1    wreg      void 
 11400 ;; Registers used:
 11401 ;;		wreg, status,2, status,0
 11402 ;; Tracked objects:
 11403 ;;		On entry : 0/0
 11404 ;;		On exit  : 0/0
 11405 ;;		Unchanged: 0/0
 11406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11407 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11409 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11410 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11411 ;;Total ram usage:        4 bytes
 11412 ;; Hardware stack levels used:    1
 11413 ;; Hardware stack levels required when called:    6
 11414 ;; This function calls:
 11415 ;;		Nothing
 11416 ;; This function is called by:
 11417 ;;		_main
 11418 ;;		_initServo
 11419 ;;		_testFrequency
 11420 ;; This function uses a non-reentrant model
 11421 ;;
 11422                           
 11423                           	psect	text37
 11424  004DF0                     __ptext37:
 11425                           	opt stack 0
 11426  004DF0                     _initTimer:
 11427                           	opt stack 24
 11428                           
 11429                           ;timer.c: 53: switch(timer){
 11430                           
 11431                           ; BSR set to: 0
 11432                           ;incstack = 0
 11433  004DF0  D00F               	goto	l5314
 11434  004DF2                     l5296:
 11435                           
 11436                           ;timer.c: 55: T0CON = 0;
 11437  004DF2  0E00               	movlw	0
 11438  004DF4  6ED5               	movwf	4053,c	;volatile
 11439                           
 11440                           ;timer.c: 56: T0CON |= 1<<3;
 11441  004DF6  86D5               	bsf	4053,3,c	;volatile
 11442                           
 11443                           ;timer.c: 58: TMR0IE = 1;
 11444  004DF8  8AF2               	bsf	intcon,5,c	;volatile
 11445                           
 11446                           ;timer.c: 59: break;
 11447  004DFA  D01E               	goto	l394
 11448  004DFC                     l5302:
 11449                           
 11450                           ;timer.c: 61: T1CON = 0;
 11451  004DFC  0E00               	movlw	0
 11452  004DFE  6ECD               	movwf	4045,c	;volatile
 11453                           
 11454                           ;timer.c: 63: T1CON |= 0b11<<4;
 11455  004E00  0E30               	movlw	48
 11456  004E02  12CD               	iorwf	4045,f,c	;volatile
 11457                           
 11458                           ;timer.c: 64: TMR1IE = 1;
 11459  004E04  809D               	bsf	3997,0,c	;volatile
 11460                           
 11461                           ;timer.c: 65: break;
 11462  004E06  D018               	goto	l394
 11463  004E08                     l5308:
 11464                           
 11465                           ;timer.c: 67: T3CON = 0;
 11466  004E08  0E00               	movlw	0
 11467  004E0A  6EB1               	movwf	4017,c	;volatile
 11468                           
 11469                           ;timer.c: 68: TMR3IE = 1;
 11470  004E0C  82A0               	bsf	4000,1,c	;volatile
 11471                           
 11472                           ;timer.c: 70: }
 11473                           
 11474                           ;timer.c: 69: break;
 11475  004E0E  D014               	goto	l394
 11476  004E10                     l5314:
 11477  004E10  C080  F082         	movff	initTimer@timer,??_initTimer
 11478  004E14  C081  F083         	movff	initTimer@timer+1,??_initTimer+1
 11479                           
 11480                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11481                           ; Switch size 1, requested type "space"
 11482                           ; Number of cases is 1, Range of values is 0 to 0
 11483                           ; switch strategies available:
 11484                           ; Name         Instructions Cycles
 11485                           ; simple_byte            4     3 (average)
 11486                           ;	Chosen strategy is simple_byte
 11487  004E18  0100               	movlb	0	; () banked
 11488  004E1A  5183               	movf	(??_initTimer+1)& (0+255),w,b
 11489  004E1C  0A00               	xorlw	0	; case 0
 11490  004E1E  A4D8               	btfss	status,2,c
 11491  004E20  D00B               	goto	l394
 11492                           
 11493                           ; BSR set to: 0
 11494                           ; Switch size 1, requested type "space"
 11495                           ; Number of cases is 3, Range of values is 0 to 3
 11496                           ; switch strategies available:
 11497                           ; Name         Instructions Cycles
 11498                           ; simple_byte           10     6 (average)
 11499                           ;	Chosen strategy is simple_byte
 11500  004E22  0100               	movlb	0	; () banked
 11501  004E24  5182               	movf	??_initTimer& (0+255),w,b
 11502  004E26  0A00               	xorlw	0	; case 0
 11503  004E28  B4D8               	btfsc	status,2,c
 11504  004E2A  D7E3               	goto	l5296
 11505  004E2C  0A01               	xorlw	1	; case 1
 11506  004E2E  B4D8               	btfsc	status,2,c
 11507  004E30  D7E5               	goto	l5302
 11508  004E32  0A02               	xorlw	2	; case 3
 11509  004E34  B4D8               	btfsc	status,2,c
 11510  004E36  D7E8               	goto	l5308
 11511  004E38                     l394:
 11512                           
 11513                           ;timer.c: 71: PEIE = 1;
 11514  004E38  8CF2               	bsf	intcon,6,c	;volatile
 11515                           
 11516                           ;timer.c: 72: (INTCONbits.GIE = 1);
 11517  004E3A  8EF2               	bsf	intcon,7,c	;volatile
 11518  004E3C  0012               	return		;funcret
 11519  004E3E                     __end_of_initTimer:
 11520                           	opt stack 0
 11521                           tblptru	equ	0xFF8
 11522                           tblptrh	equ	0xFF7
 11523                           tblptrl	equ	0xFF6
 11524                           tablat	equ	0xFF5
 11525                           prodh	equ	0xFF4
 11526                           prodl	equ	0xFF3
 11527                           intcon	equ	0xFF2
 11528                           postinc0	equ	0xFEE
 11529                           wreg	equ	0xFE8
 11530                           postdec1	equ	0xFE5
 11531                           fsr1l	equ	0xFE1
 11532                           indf2	equ	0xFDF
 11533                           postinc2	equ	0xFDE
 11534                           postdec2	equ	0xFDD
 11535                           fsr2h	equ	0xFDA
 11536                           fsr2l	equ	0xFD9
 11537                           status	equ	0xFD8
 11538                           
 11539 ;; *************** function _initLCD *****************
 11540 ;; Defined at:
 11541 ;;		line 15 in file "lcd.c"
 11542 ;; Parameters:    Size  Location     Type
 11543 ;;		None
 11544 ;; Auto vars:     Size  Location     Type
 11545 ;;		None
 11546 ;; Return value:  Size  Location     Type
 11547 ;;                  1    wreg      void 
 11548 ;; Registers used:
 11549 ;;		wreg, status,2, status,0, cstack
 11550 ;; Tracked objects:
 11551 ;;		On entry : 0/0
 11552 ;;		On exit  : 0/0
 11553 ;;		Unchanged: 0/0
 11554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11557 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11558 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11559 ;;Total ram usage:        1 bytes
 11560 ;; Hardware stack levels used:    1
 11561 ;; Hardware stack levels required when called:    8
 11562 ;; This function calls:
 11563 ;;		_lcdInst
 11564 ;; This function is called by:
 11565 ;;		_main
 11566 ;; This function uses a non-reentrant model
 11567 ;;
 11568                           
 11569                           	psect	text38
 11570  004ED6                     __ptext38:
 11571                           	opt stack 0
 11572  004ED6                     _initLCD:
 11573                           	opt stack 22
 11574                           
 11575                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 11576                           
 11577                           ;incstack = 0
 11578  004ED6  0E31               	movlw	49
 11579  004ED8  0100               	movlb	0	; () banked
 11580  004EDA  6F84               	movwf	??_initLCD& (0+255),b
 11581  004EDC  0EB2               	movlw	178
 11582  004EDE                     u7857:
 11583  004EDE  2EE8               	decfsz	wreg,f,c
 11584  004EE0  D7FE               	bra	u7857
 11585  004EE2  2F84               	decfsz	??_initLCD& (0+255),f,b
 11586  004EE4  D7FC               	bra	u7857
 11587  004EE6  F000               	nop	
 11588                           
 11589                           ;lcd.c: 18: lcdInst(0b00110011);
 11590  004EE8  0E33               	movlw	51
 11591  004EEA  ECAF  F028         	call	_lcdInst
 11592                           
 11593                           ;lcd.c: 19: lcdInst(0b00110010);
 11594  004EEE  0E32               	movlw	50
 11595  004EF0  ECAF  F028         	call	_lcdInst
 11596                           
 11597                           ;lcd.c: 20: lcdInst(0b00101000);
 11598  004EF4  0E28               	movlw	40
 11599  004EF6  ECAF  F028         	call	_lcdInst
 11600                           
 11601                           ;lcd.c: 21: lcdInst(0b00001111);
 11602  004EFA  0E0F               	movlw	15
 11603  004EFC  ECAF  F028         	call	_lcdInst
 11604                           
 11605                           ;lcd.c: 22: lcdInst(0b00000110);
 11606  004F00  0E06               	movlw	6
 11607  004F02  ECAF  F028         	call	_lcdInst
 11608                           
 11609                           ;lcd.c: 23: lcdInst(0b00000001);
 11610  004F06  0E01               	movlw	1
 11611  004F08  ECAF  F028         	call	_lcdInst
 11612                           
 11613                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 11614  004F0C  0E31               	movlw	49
 11615  004F0E  0100               	movlb	0	; () banked
 11616  004F10  6F84               	movwf	??_initLCD& (0+255),b
 11617  004F12  0EB2               	movlw	178
 11618  004F14                     u7867:
 11619  004F14  2EE8               	decfsz	wreg,f,c
 11620  004F16  D7FE               	bra	u7867
 11621  004F18  2F84               	decfsz	??_initLCD& (0+255),f,b
 11622  004F1A  D7FC               	bra	u7867
 11623  004F1C  F000               	nop	
 11624  004F1E  0012               	return		;funcret
 11625  004F20                     __end_of_initLCD:
 11626                           	opt stack 0
 11627                           tblptru	equ	0xFF8
 11628                           tblptrh	equ	0xFF7
 11629                           tblptrl	equ	0xFF6
 11630                           tablat	equ	0xFF5
 11631                           prodh	equ	0xFF4
 11632                           prodl	equ	0xFF3
 11633                           intcon	equ	0xFF2
 11634                           postinc0	equ	0xFEE
 11635                           wreg	equ	0xFE8
 11636                           postdec1	equ	0xFE5
 11637                           fsr1l	equ	0xFE1
 11638                           indf2	equ	0xFDF
 11639                           postinc2	equ	0xFDE
 11640                           postdec2	equ	0xFDD
 11641                           fsr2h	equ	0xFDA
 11642                           fsr2l	equ	0xFD9
 11643                           status	equ	0xFD8
 11644                           
 11645 ;; *************** function _lcdInst *****************
 11646 ;; Defined at:
 11647 ;;		line 27 in file "lcd.c"
 11648 ;; Parameters:    Size  Location     Type
 11649 ;;  data            1    wreg     unsigned char 
 11650 ;; Auto vars:     Size  Location     Type
 11651 ;;  data            1    3[BANK0 ] unsigned char 
 11652 ;; Return value:  Size  Location     Type
 11653 ;;                  1    wreg      void 
 11654 ;; Registers used:
 11655 ;;		wreg, status,2, status,0, cstack
 11656 ;; Tracked objects:
 11657 ;;		On entry : 0/0
 11658 ;;		On exit  : 0/0
 11659 ;;		Unchanged: 0/0
 11660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11662 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11663 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11664 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11665 ;;Total ram usage:        2 bytes
 11666 ;; Hardware stack levels used:    1
 11667 ;; Hardware stack levels required when called:    7
 11668 ;; This function calls:
 11669 ;;		_lcdNibble
 11670 ;; This function is called by:
 11671 ;;		_initLCD
 11672 ;;		_lcdHome
 11673 ;;		_lcdClear
 11674 ;;		_lcdNewline
 11675 ;; This function uses a non-reentrant model
 11676 ;;
 11677                           
 11678                           	psect	text39
 11679  00515E                     __ptext39:
 11680                           	opt stack 0
 11681  00515E                     _lcdInst:
 11682                           	opt stack 19
 11683                           
 11684                           ;incstack = 0
 11685                           ;lcdInst@data stored from wreg
 11686  00515E  0100               	movlb	0	; () banked
 11687  005160  6F83               	movwf	lcdInst@data& (0+255),b
 11688                           
 11689                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 11690  005162  948C               	bcf	3980,2,c	;volatile
 11691                           
 11692                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 11693  005164  0E74               	movlw	116
 11694  005166                     u7877:
 11695  005166  2EE8               	decfsz	wreg,f,c
 11696  005168  D7FE               	bra	u7877
 11697  00516A  D000               	nop2	
 11698                           
 11699                           ;lcd.c: 30: lcdNibble(data);
 11700  00516C  0100               	movlb	0	; () banked
 11701  00516E  5183               	movf	lcdInst@data& (0+255),w,b
 11702  005170  ECC8  F025         	call	_lcdNibble
 11703                           
 11704                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 11705  005174  0E04               	movlw	4
 11706  005176  0100               	movlb	0	; () banked
 11707  005178  6F82               	movwf	??_lcdInst& (0+255),b
 11708  00517A  0E3D               	movlw	61
 11709  00517C                     u7887:
 11710  00517C  2EE8               	decfsz	wreg,f,c
 11711  00517E  D7FE               	bra	u7887
 11712  005180  2F82               	decfsz	??_lcdInst& (0+255),f,b
 11713  005182  D7FC               	bra	u7887
 11714  005184  D000               	nop2	
 11715  005186  0012               	return		;funcret
 11716  005188                     __end_of_lcdInst:
 11717                           	opt stack 0
 11718                           tblptru	equ	0xFF8
 11719                           tblptrh	equ	0xFF7
 11720                           tblptrl	equ	0xFF6
 11721                           tablat	equ	0xFF5
 11722                           prodh	equ	0xFF4
 11723                           prodl	equ	0xFF3
 11724                           intcon	equ	0xFF2
 11725                           postinc0	equ	0xFEE
 11726                           wreg	equ	0xFE8
 11727                           postdec1	equ	0xFE5
 11728                           fsr1l	equ	0xFE1
 11729                           indf2	equ	0xFDF
 11730                           postinc2	equ	0xFDE
 11731                           postdec2	equ	0xFDD
 11732                           fsr2h	equ	0xFDA
 11733                           fsr2l	equ	0xFD9
 11734                           status	equ	0xFD8
 11735                           
 11736 ;; *************** function _lcdNibble *****************
 11737 ;; Defined at:
 11738 ;;		line 46 in file "lcd.c"
 11739 ;; Parameters:    Size  Location     Type
 11740 ;;  data            1    wreg     unsigned char 
 11741 ;; Auto vars:     Size  Location     Type
 11742 ;;  data            1    1[BANK0 ] unsigned char 
 11743 ;;  temp            1    0[BANK0 ] unsigned char 
 11744 ;; Return value:  Size  Location     Type
 11745 ;;                  1    wreg      void 
 11746 ;; Registers used:
 11747 ;;		wreg, status,2, status,0
 11748 ;; Tracked objects:
 11749 ;;		On entry : 0/0
 11750 ;;		On exit  : 0/0
 11751 ;;		Unchanged: 0/0
 11752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11754 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11756 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11757 ;;Total ram usage:        2 bytes
 11758 ;; Hardware stack levels used:    1
 11759 ;; Hardware stack levels required when called:    6
 11760 ;; This function calls:
 11761 ;;		Nothing
 11762 ;; This function is called by:
 11763 ;;		_lcdInst
 11764 ;;		_putch
 11765 ;; This function uses a non-reentrant model
 11766 ;;
 11767                           
 11768                           	psect	text40
 11769  004B90                     __ptext40:
 11770                           	opt stack 0
 11771  004B90                     _lcdNibble:
 11772                           	opt stack 21
 11773                           
 11774                           ;incstack = 0
 11775                           ;lcdNibble@data stored from wreg
 11776  004B90  0100               	movlb	0	; () banked
 11777  004B92  6F81               	movwf	lcdNibble@data& (0+255),b
 11778                           
 11779                           ;lcd.c: 48: char temp = data & 0xF0;
 11780  004B94  0100               	movlb	0	; () banked
 11781  004B96  5181               	movf	lcdNibble@data& (0+255),w,b
 11782  004B98  0BF0               	andlw	240
 11783  004B9A  0100               	movlb	0	; () banked
 11784  004B9C  6F80               	movwf	lcdNibble@temp& (0+255),b
 11785                           
 11786                           ;lcd.c: 49: LATD = LATD & 0x0F;
 11787  004B9E  508C               	movf	3980,w,c	;volatile
 11788  004BA0  0B0F               	andlw	15
 11789  004BA2  6E8C               	movwf	3980,c	;volatile
 11790                           
 11791                           ;lcd.c: 50: LATD = temp | LATD;
 11792  004BA4  0100               	movlb	0	; () banked
 11793  004BA6  5180               	movf	lcdNibble@temp& (0+255),w,b
 11794  004BA8  108C               	iorwf	3980,w,c	;volatile
 11795  004BAA  6E8C               	movwf	3980,c	;volatile
 11796                           
 11797                           ; BSR set to: 0
 11798                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 11799  004BAC  968C               	bcf	3980,3,c	;volatile
 11800                           
 11801                           ; BSR set to: 0
 11802                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 11803  004BAE  0ED6               	movlw	214
 11804  004BB0                     u7897:
 11805  004BB0  D000               	nop2	
 11806  004BB2  D000               	nop2	
 11807  004BB4  2EE8               	decfsz	wreg,f,c
 11808  004BB6  D7FC               	bra	u7897
 11809  004BB8  D000               	nop2	
 11810                           
 11811                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 11812  004BBA  868C               	bsf	3980,3,c	;volatile
 11813                           
 11814                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 11815  004BBC  0ED6               	movlw	214
 11816  004BBE                     u7907:
 11817  004BBE  D000               	nop2	
 11818  004BC0  D000               	nop2	
 11819  004BC2  2EE8               	decfsz	wreg,f,c
 11820  004BC4  D7FC               	bra	u7907
 11821  004BC6  D000               	nop2	
 11822                           
 11823                           ;lcd.c: 58: data = data << 4;
 11824  004BC8  0100               	movlb	0	; () banked
 11825  004BCA  3981               	swapf	lcdNibble@data& (0+255),w,b
 11826  004BCC  0BF0               	andlw	240
 11827  004BCE  0100               	movlb	0	; () banked
 11828  004BD0  6F81               	movwf	lcdNibble@data& (0+255),b
 11829                           
 11830                           ;lcd.c: 60: temp = data & 0xF0;
 11831  004BD2  0100               	movlb	0	; () banked
 11832  004BD4  5181               	movf	lcdNibble@data& (0+255),w,b
 11833  004BD6  0BF0               	andlw	240
 11834  004BD8  0100               	movlb	0	; () banked
 11835  004BDA  6F80               	movwf	lcdNibble@temp& (0+255),b
 11836                           
 11837                           ;lcd.c: 61: LATD = LATD & 0x0F;
 11838  004BDC  508C               	movf	3980,w,c	;volatile
 11839  004BDE  0B0F               	andlw	15
 11840  004BE0  6E8C               	movwf	3980,c	;volatile
 11841                           
 11842                           ;lcd.c: 62: LATD = temp | LATD;
 11843  004BE2  0100               	movlb	0	; () banked
 11844  004BE4  5180               	movf	lcdNibble@temp& (0+255),w,b
 11845  004BE6  108C               	iorwf	3980,w,c	;volatile
 11846  004BE8  6E8C               	movwf	3980,c	;volatile
 11847                           
 11848                           ; BSR set to: 0
 11849                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 11850  004BEA  968C               	bcf	3980,3,c	;volatile
 11851                           
 11852                           ; BSR set to: 0
 11853                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 11854  004BEC  0ED6               	movlw	214
 11855  004BEE                     u7917:
 11856  004BEE  D000               	nop2	
 11857  004BF0  D000               	nop2	
 11858  004BF2  2EE8               	decfsz	wreg,f,c
 11859  004BF4  D7FC               	bra	u7917
 11860  004BF6  D000               	nop2	
 11861                           
 11862                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 11863  004BF8  868C               	bsf	3980,3,c	;volatile
 11864                           
 11865                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 11866  004BFA  0ED6               	movlw	214
 11867  004BFC                     u7927:
 11868  004BFC  D000               	nop2	
 11869  004BFE  D000               	nop2	
 11870  004C00  2EE8               	decfsz	wreg,f,c
 11871  004C02  D7FC               	bra	u7927
 11872  004C04  D000               	nop2	
 11873  004C06  0012               	return		;funcret
 11874  004C08                     __end_of_lcdNibble:
 11875                           	opt stack 0
 11876                           tblptru	equ	0xFF8
 11877                           tblptrh	equ	0xFF7
 11878                           tblptrl	equ	0xFF6
 11879                           tablat	equ	0xFF5
 11880                           prodh	equ	0xFF4
 11881                           prodl	equ	0xFF3
 11882                           intcon	equ	0xFF2
 11883                           postinc0	equ	0xFEE
 11884                           wreg	equ	0xFE8
 11885                           postdec1	equ	0xFE5
 11886                           fsr1l	equ	0xFE1
 11887                           indf2	equ	0xFDF
 11888                           postinc2	equ	0xFDE
 11889                           postdec2	equ	0xFDD
 11890                           fsr2h	equ	0xFDA
 11891                           fsr2l	equ	0xFD9
 11892                           status	equ	0xFD8
 11893                           
 11894 ;; *************** function ___almod *****************
 11895 ;; Defined at:
 11896 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\almod.c"
 11897 ;; Parameters:    Size  Location     Type
 11898 ;;  dividend        4   14[BANK0 ] long 
 11899 ;;  divisor         4   18[BANK0 ] long 
 11900 ;; Auto vars:     Size  Location     Type
 11901 ;;  sign            1   23[BANK0 ] unsigned char 
 11902 ;;  counter         1   22[BANK0 ] unsigned char 
 11903 ;; Return value:  Size  Location     Type
 11904 ;;                  4   14[BANK0 ] long 
 11905 ;; Registers used:
 11906 ;;		wreg, status,2, status,0
 11907 ;; Tracked objects:
 11908 ;;		On entry : 0/0
 11909 ;;		On exit  : 0/0
 11910 ;;		Unchanged: 0/0
 11911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11912 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11913 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11915 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11916 ;;Total ram usage:       10 bytes
 11917 ;; Hardware stack levels used:    1
 11918 ;; Hardware stack levels required when called:    6
 11919 ;; This function calls:
 11920 ;;		Nothing
 11921 ;; This function is called by:
 11922 ;;		_main
 11923 ;; This function uses a non-reentrant model
 11924 ;;
 11925                           
 11926                           	psect	text41
 11927  0041A2                     __ptext41:
 11928                           	opt stack 0
 11929  0041A2                     ___almod:
 11930                           	opt stack 24
 11931                           
 11932                           ;incstack = 0
 11933  0041A2  0E00               	movlw	0
 11934  0041A4  0100               	movlb	0	; () banked
 11935  0041A6  6F97               	movwf	___almod@sign& (0+255),b
 11936                           
 11937                           ; BSR set to: 0
 11938  0041A8  0100               	movlb	0	; () banked
 11939  0041AA  AF91               	btfss	(___almod@dividend+3)& (0+255),7,b
 11940  0041AC  D00C               	goto	l6306
 11941                           
 11942                           ; BSR set to: 0
 11943  0041AE  0100               	movlb	0	; () banked
 11944  0041B0  1F91               	comf	(___almod@dividend+3)& (0+255),f,b
 11945  0041B2  1F90               	comf	(___almod@dividend+2)& (0+255),f,b
 11946  0041B4  1F8F               	comf	(___almod@dividend+1)& (0+255),f,b
 11947  0041B6  6D8E               	negf	___almod@dividend& (0+255),b
 11948  0041B8  0E00               	movlw	0
 11949  0041BA  238F               	addwfc	(___almod@dividend+1)& (0+255),f,b
 11950  0041BC  2390               	addwfc	(___almod@dividend+2)& (0+255),f,b
 11951  0041BE  2391               	addwfc	(___almod@dividend+3)& (0+255),f,b
 11952                           
 11953                           ; BSR set to: 0
 11954  0041C0  0E01               	movlw	1
 11955  0041C2  0100               	movlb	0	; () banked
 11956  0041C4  6F97               	movwf	___almod@sign& (0+255),b
 11957  0041C6                     l6306:
 11958                           
 11959                           ; BSR set to: 0
 11960  0041C6  0100               	movlb	0	; () banked
 11961  0041C8  AF95               	btfss	(___almod@divisor+3)& (0+255),7,b
 11962  0041CA  D009               	goto	l6310
 11963                           
 11964                           ; BSR set to: 0
 11965  0041CC  0100               	movlb	0	; () banked
 11966  0041CE  1F95               	comf	(___almod@divisor+3)& (0+255),f,b
 11967  0041D0  1F94               	comf	(___almod@divisor+2)& (0+255),f,b
 11968  0041D2  1F93               	comf	(___almod@divisor+1)& (0+255),f,b
 11969  0041D4  6D92               	negf	___almod@divisor& (0+255),b
 11970  0041D6  0E00               	movlw	0
 11971  0041D8  2393               	addwfc	(___almod@divisor+1)& (0+255),f,b
 11972  0041DA  2394               	addwfc	(___almod@divisor+2)& (0+255),f,b
 11973  0041DC  2395               	addwfc	(___almod@divisor+3)& (0+255),f,b
 11974  0041DE                     l6310:
 11975                           
 11976                           ; BSR set to: 0
 11977  0041DE  0100               	movlb	0	; () banked
 11978  0041E0  5192               	movf	___almod@divisor& (0+255),w,b
 11979  0041E2  0100               	movlb	0	; () banked
 11980  0041E4  1193               	iorwf	(___almod@divisor+1)& (0+255),w,b
 11981  0041E6  0100               	movlb	0	; () banked
 11982  0041E8  1194               	iorwf	(___almod@divisor+2)& (0+255),w,b
 11983  0041EA  0100               	movlb	0	; () banked
 11984  0041EC  1195               	iorwf	(___almod@divisor+3)& (0+255),w,b
 11985  0041EE  B4D8               	btfsc	status,2,c
 11986  0041F0  D03A               	goto	l6326
 11987                           
 11988                           ; BSR set to: 0
 11989  0041F2  0E01               	movlw	1
 11990  0041F4  0100               	movlb	0	; () banked
 11991  0041F6  6F96               	movwf	___almod@counter& (0+255),b
 11992  0041F8  D008               	goto	l6316
 11993  0041FA                     l6314:
 11994                           
 11995                           ; BSR set to: 0
 11996  0041FA  0100               	movlb	0	; () banked
 11997  0041FC  90D8               	bcf	status,0,c
 11998  0041FE  3792               	rlcf	___almod@divisor& (0+255),f,b
 11999  004200  3793               	rlcf	(___almod@divisor+1)& (0+255),f,b
 12000  004202  3794               	rlcf	(___almod@divisor+2)& (0+255),f,b
 12001  004204  3795               	rlcf	(___almod@divisor+3)& (0+255),f,b
 12002  004206  0100               	movlb	0	; () banked
 12003  004208  2B96               	incf	___almod@counter& (0+255),f,b
 12004  00420A                     l6316:
 12005                           
 12006                           ; BSR set to: 0
 12007  00420A  0100               	movlb	0	; () banked
 12008  00420C  AF95               	btfss	(___almod@divisor+3)& (0+255),7,b
 12009  00420E  D7F5               	goto	l6314
 12010  004210                     l6318:
 12011                           
 12012                           ; BSR set to: 0
 12013  004210  0100               	movlb	0	; () banked
 12014  004212  5192               	movf	___almod@divisor& (0+255),w,b
 12015  004214  0100               	movlb	0	; () banked
 12016  004216  5D8E               	subwf	___almod@dividend& (0+255),w,b
 12017  004218  0100               	movlb	0	; () banked
 12018  00421A  5193               	movf	(___almod@divisor+1)& (0+255),w,b
 12019  00421C  0100               	movlb	0	; () banked
 12020  00421E  598F               	subwfb	(___almod@dividend+1)& (0+255),w,b
 12021  004220  0100               	movlb	0	; () banked
 12022  004222  5194               	movf	(___almod@divisor+2)& (0+255),w,b
 12023  004224  0100               	movlb	0	; () banked
 12024  004226  5990               	subwfb	(___almod@dividend+2)& (0+255),w,b
 12025  004228  0100               	movlb	0	; () banked
 12026  00422A  5195               	movf	(___almod@divisor+3)& (0+255),w,b
 12027  00422C  0100               	movlb	0	; () banked
 12028  00422E  5991               	subwfb	(___almod@dividend+3)& (0+255),w,b
 12029  004230  A0D8               	btfss	status,0,c
 12030  004232  D010               	goto	l6322
 12031                           
 12032                           ; BSR set to: 0
 12033  004234  0100               	movlb	0	; () banked
 12034  004236  5192               	movf	___almod@divisor& (0+255),w,b
 12035  004238  0100               	movlb	0	; () banked
 12036  00423A  5F8E               	subwf	___almod@dividend& (0+255),f,b
 12037  00423C  0100               	movlb	0	; () banked
 12038  00423E  5193               	movf	(___almod@divisor+1)& (0+255),w,b
 12039  004240  0100               	movlb	0	; () banked
 12040  004242  5B8F               	subwfb	(___almod@dividend+1)& (0+255),f,b
 12041  004244  0100               	movlb	0	; () banked
 12042  004246  5194               	movf	(___almod@divisor+2)& (0+255),w,b
 12043  004248  0100               	movlb	0	; () banked
 12044  00424A  5B90               	subwfb	(___almod@dividend+2)& (0+255),f,b
 12045  00424C  0100               	movlb	0	; () banked
 12046  00424E  5195               	movf	(___almod@divisor+3)& (0+255),w,b
 12047  004250  0100               	movlb	0	; () banked
 12048  004252  5B91               	subwfb	(___almod@dividend+3)& (0+255),f,b
 12049  004254                     l6322:
 12050                           
 12051                           ; BSR set to: 0
 12052  004254  0100               	movlb	0	; () banked
 12053  004256  90D8               	bcf	status,0,c
 12054  004258  3395               	rrcf	(___almod@divisor+3)& (0+255),f,b
 12055  00425A  3394               	rrcf	(___almod@divisor+2)& (0+255),f,b
 12056  00425C  3393               	rrcf	(___almod@divisor+1)& (0+255),f,b
 12057  00425E  3392               	rrcf	___almod@divisor& (0+255),f,b
 12058                           
 12059                           ; BSR set to: 0
 12060  004260  0100               	movlb	0	; () banked
 12061  004262  2F96               	decfsz	___almod@counter& (0+255),f,b
 12062  004264  D7D5               	goto	l6318
 12063  004266                     l6326:
 12064                           
 12065                           ; BSR set to: 0
 12066  004266  0100               	movlb	0	; () banked
 12067  004268  5197               	movf	___almod@sign& (0+255),w,b
 12068  00426A  0100               	movlb	0	; () banked
 12069  00426C  B4D8               	btfsc	status,2,c
 12070  00426E  D009               	goto	l6330
 12071                           
 12072                           ; BSR set to: 0
 12073  004270  0100               	movlb	0	; () banked
 12074  004272  1F91               	comf	(___almod@dividend+3)& (0+255),f,b
 12075  004274  1F90               	comf	(___almod@dividend+2)& (0+255),f,b
 12076  004276  1F8F               	comf	(___almod@dividend+1)& (0+255),f,b
 12077  004278  6D8E               	negf	___almod@dividend& (0+255),b
 12078  00427A  0E00               	movlw	0
 12079  00427C  238F               	addwfc	(___almod@dividend+1)& (0+255),f,b
 12080  00427E  2390               	addwfc	(___almod@dividend+2)& (0+255),f,b
 12081  004280  2391               	addwfc	(___almod@dividend+3)& (0+255),f,b
 12082  004282                     l6330:
 12083                           
 12084                           ; BSR set to: 0
 12085  004282  C08E  F08E         	movff	___almod@dividend,?___almod
 12086  004286  C08F  F08F         	movff	___almod@dividend+1,?___almod+1
 12087  00428A  C090  F090         	movff	___almod@dividend+2,?___almod+2
 12088  00428E  C091  F091         	movff	___almod@dividend+3,?___almod+3
 12089  004292  0012               	return	
 12090  004294                     __end_of___almod:
 12091                           	opt stack 0
 12092                           tblptru	equ	0xFF8
 12093                           tblptrh	equ	0xFF7
 12094                           tblptrl	equ	0xFF6
 12095                           tablat	equ	0xFF5
 12096                           prodh	equ	0xFF4
 12097                           prodl	equ	0xFF3
 12098                           intcon	equ	0xFF2
 12099                           postinc0	equ	0xFEE
 12100                           wreg	equ	0xFE8
 12101                           postdec1	equ	0xFE5
 12102                           fsr1l	equ	0xFE1
 12103                           indf2	equ	0xFDF
 12104                           postinc2	equ	0xFDE
 12105                           postdec2	equ	0xFDD
 12106                           fsr2h	equ	0xFDA
 12107                           fsr2l	equ	0xFD9
 12108                           status	equ	0xFD8
 12109                           
 12110 ;; *************** function ___aldiv *****************
 12111 ;; Defined at:
 12112 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
 12113 ;; Parameters:    Size  Location     Type
 12114 ;;  dividend        4    0[BANK0 ] long 
 12115 ;;  divisor         4    4[BANK0 ] long 
 12116 ;; Auto vars:     Size  Location     Type
 12117 ;;  quotient        4   10[BANK0 ] long 
 12118 ;;  sign            1    9[BANK0 ] unsigned char 
 12119 ;;  counter         1    8[BANK0 ] unsigned char 
 12120 ;; Return value:  Size  Location     Type
 12121 ;;                  4    0[BANK0 ] long 
 12122 ;; Registers used:
 12123 ;;		wreg, status,2, status,0
 12124 ;; Tracked objects:
 12125 ;;		On entry : 0/0
 12126 ;;		On exit  : 0/0
 12127 ;;		Unchanged: 0/0
 12128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12129 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12130 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12132 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12133 ;;Total ram usage:       14 bytes
 12134 ;; Hardware stack levels used:    1
 12135 ;; Hardware stack levels required when called:    6
 12136 ;; This function calls:
 12137 ;;		Nothing
 12138 ;; This function is called by:
 12139 ;;		_main
 12140 ;; This function uses a non-reentrant model
 12141 ;;
 12142                           
 12143                           	psect	text42
 12144  003B96                     __ptext42:
 12145                           	opt stack 0
 12146  003B96                     ___aldiv:
 12147                           	opt stack 24
 12148                           
 12149                           ; BSR set to: 0
 12150                           ;incstack = 0
 12151  003B96  0E00               	movlw	0
 12152  003B98  0100               	movlb	0	; () banked
 12153  003B9A  6F89               	movwf	___aldiv@sign& (0+255),b
 12154                           
 12155                           ; BSR set to: 0
 12156  003B9C  0100               	movlb	0	; () banked
 12157  003B9E  AF87               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 12158  003BA0  D00C               	goto	l6262
 12159                           
 12160                           ; BSR set to: 0
 12161  003BA2  0100               	movlb	0	; () banked
 12162  003BA4  1F87               	comf	(___aldiv@divisor+3)& (0+255),f,b
 12163  003BA6  1F86               	comf	(___aldiv@divisor+2)& (0+255),f,b
 12164  003BA8  1F85               	comf	(___aldiv@divisor+1)& (0+255),f,b
 12165  003BAA  6D84               	negf	___aldiv@divisor& (0+255),b
 12166  003BAC  0E00               	movlw	0
 12167  003BAE  2385               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
 12168  003BB0  2386               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
 12169  003BB2  2387               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
 12170                           
 12171                           ; BSR set to: 0
 12172  003BB4  0E01               	movlw	1
 12173  003BB6  0100               	movlb	0	; () banked
 12174  003BB8  6F89               	movwf	___aldiv@sign& (0+255),b
 12175  003BBA                     l6262:
 12176                           
 12177                           ; BSR set to: 0
 12178  003BBA  0100               	movlb	0	; () banked
 12179  003BBC  AF83               	btfss	(___aldiv@dividend+3)& (0+255),7,b
 12180  003BBE  D00C               	goto	l6268
 12181                           
 12182                           ; BSR set to: 0
 12183  003BC0  0100               	movlb	0	; () banked
 12184  003BC2  1F83               	comf	(___aldiv@dividend+3)& (0+255),f,b
 12185  003BC4  1F82               	comf	(___aldiv@dividend+2)& (0+255),f,b
 12186  003BC6  1F81               	comf	(___aldiv@dividend+1)& (0+255),f,b
 12187  003BC8  6D80               	negf	___aldiv@dividend& (0+255),b
 12188  003BCA  0E00               	movlw	0
 12189  003BCC  2381               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
 12190  003BCE  2382               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
 12191  003BD0  2383               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
 12192                           
 12193                           ; BSR set to: 0
 12194  003BD2  0E01               	movlw	1
 12195  003BD4  0100               	movlb	0	; () banked
 12196  003BD6  1B89               	xorwf	___aldiv@sign& (0+255),f,b
 12197  003BD8                     l6268:
 12198                           
 12199                           ; BSR set to: 0
 12200  003BD8  0E00               	movlw	0
 12201  003BDA  0100               	movlb	0	; () banked
 12202  003BDC  6F8A               	movwf	___aldiv@quotient& (0+255),b
 12203  003BDE  0E00               	movlw	0
 12204  003BE0  6F8B               	movwf	(___aldiv@quotient+1)& (0+255),b
 12205  003BE2  0E00               	movlw	0
 12206  003BE4  6F8C               	movwf	(___aldiv@quotient+2)& (0+255),b
 12207  003BE6  0E00               	movlw	0
 12208  003BE8  6F8D               	movwf	(___aldiv@quotient+3)& (0+255),b
 12209                           
 12210                           ; BSR set to: 0
 12211  003BEA  0100               	movlb	0	; () banked
 12212  003BEC  5184               	movf	___aldiv@divisor& (0+255),w,b
 12213  003BEE  0100               	movlb	0	; () banked
 12214  003BF0  1185               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
 12215  003BF2  0100               	movlb	0	; () banked
 12216  003BF4  1186               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
 12217  003BF6  0100               	movlb	0	; () banked
 12218  003BF8  1187               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
 12219  003BFA  B4D8               	btfsc	status,2,c
 12220  003BFC  D042               	goto	l6290
 12221                           
 12222                           ; BSR set to: 0
 12223  003BFE  0E01               	movlw	1
 12224  003C00  0100               	movlb	0	; () banked
 12225  003C02  6F88               	movwf	___aldiv@counter& (0+255),b
 12226  003C04  D008               	goto	l6276
 12227  003C06                     l6274:
 12228                           
 12229                           ; BSR set to: 0
 12230  003C06  0100               	movlb	0	; () banked
 12231  003C08  90D8               	bcf	status,0,c
 12232  003C0A  3784               	rlcf	___aldiv@divisor& (0+255),f,b
 12233  003C0C  3785               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
 12234  003C0E  3786               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
 12235  003C10  3787               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
 12236  003C12  0100               	movlb	0	; () banked
 12237  003C14  2B88               	incf	___aldiv@counter& (0+255),f,b
 12238  003C16                     l6276:
 12239                           
 12240                           ; BSR set to: 0
 12241  003C16  0100               	movlb	0	; () banked
 12242  003C18  AF87               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 12243  003C1A  D7F5               	goto	l6274
 12244  003C1C                     l6278:
 12245                           
 12246                           ; BSR set to: 0
 12247  003C1C  0100               	movlb	0	; () banked
 12248  003C1E  90D8               	bcf	status,0,c
 12249  003C20  378A               	rlcf	___aldiv@quotient& (0+255),f,b
 12250  003C22  378B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 12251  003C24  378C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 12252  003C26  378D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 12253                           
 12254                           ; BSR set to: 0
 12255  003C28  0100               	movlb	0	; () banked
 12256  003C2A  5184               	movf	___aldiv@divisor& (0+255),w,b
 12257  003C2C  0100               	movlb	0	; () banked
 12258  003C2E  5D80               	subwf	___aldiv@dividend& (0+255),w,b
 12259  003C30  0100               	movlb	0	; () banked
 12260  003C32  5185               	movf	(___aldiv@divisor+1)& (0+255),w,b
 12261  003C34  0100               	movlb	0	; () banked
 12262  003C36  5981               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
 12263  003C38  0100               	movlb	0	; () banked
 12264  003C3A  5186               	movf	(___aldiv@divisor+2)& (0+255),w,b
 12265  003C3C  0100               	movlb	0	; () banked
 12266  003C3E  5982               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
 12267  003C40  0100               	movlb	0	; () banked
 12268  003C42  5187               	movf	(___aldiv@divisor+3)& (0+255),w,b
 12269  003C44  0100               	movlb	0	; () banked
 12270  003C46  5983               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
 12271  003C48  A0D8               	btfss	status,0,c
 12272  003C4A  D012               	goto	l6286
 12273                           
 12274                           ; BSR set to: 0
 12275  003C4C  0100               	movlb	0	; () banked
 12276  003C4E  5184               	movf	___aldiv@divisor& (0+255),w,b
 12277  003C50  0100               	movlb	0	; () banked
 12278  003C52  5F80               	subwf	___aldiv@dividend& (0+255),f,b
 12279  003C54  0100               	movlb	0	; () banked
 12280  003C56  5185               	movf	(___aldiv@divisor+1)& (0+255),w,b
 12281  003C58  0100               	movlb	0	; () banked
 12282  003C5A  5B81               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
 12283  003C5C  0100               	movlb	0	; () banked
 12284  003C5E  5186               	movf	(___aldiv@divisor+2)& (0+255),w,b
 12285  003C60  0100               	movlb	0	; () banked
 12286  003C62  5B82               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
 12287  003C64  0100               	movlb	0	; () banked
 12288  003C66  5187               	movf	(___aldiv@divisor+3)& (0+255),w,b
 12289  003C68  0100               	movlb	0	; () banked
 12290  003C6A  5B83               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
 12291                           
 12292                           ; BSR set to: 0
 12293  003C6C  0100               	movlb	0	; () banked
 12294  003C6E  818A               	bsf	___aldiv@quotient& (0+255),0,b
 12295  003C70                     l6286:
 12296                           
 12297                           ; BSR set to: 0
 12298  003C70  0100               	movlb	0	; () banked
 12299  003C72  90D8               	bcf	status,0,c
 12300  003C74  3387               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
 12301  003C76  3386               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
 12302  003C78  3385               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
 12303  003C7A  3384               	rrcf	___aldiv@divisor& (0+255),f,b
 12304                           
 12305                           ; BSR set to: 0
 12306  003C7C  0100               	movlb	0	; () banked
 12307  003C7E  2F88               	decfsz	___aldiv@counter& (0+255),f,b
 12308  003C80  D7CD               	goto	l6278
 12309  003C82                     l6290:
 12310                           
 12311                           ; BSR set to: 0
 12312  003C82  0100               	movlb	0	; () banked
 12313  003C84  5189               	movf	___aldiv@sign& (0+255),w,b
 12314  003C86  0100               	movlb	0	; () banked
 12315  003C88  B4D8               	btfsc	status,2,c
 12316  003C8A  D009               	goto	l6294
 12317                           
 12318                           ; BSR set to: 0
 12319  003C8C  0100               	movlb	0	; () banked
 12320  003C8E  1F8D               	comf	(___aldiv@quotient+3)& (0+255),f,b
 12321  003C90  1F8C               	comf	(___aldiv@quotient+2)& (0+255),f,b
 12322  003C92  1F8B               	comf	(___aldiv@quotient+1)& (0+255),f,b
 12323  003C94  6D8A               	negf	___aldiv@quotient& (0+255),b
 12324  003C96  0E00               	movlw	0
 12325  003C98  238B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 12326  003C9A  238C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 12327  003C9C  238D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 12328  003C9E                     l6294:
 12329                           
 12330                           ; BSR set to: 0
 12331  003C9E  C08A  F080         	movff	___aldiv@quotient,?___aldiv
 12332  003CA2  C08B  F081         	movff	___aldiv@quotient+1,?___aldiv+1
 12333  003CA6  C08C  F082         	movff	___aldiv@quotient+2,?___aldiv+2
 12334  003CAA  C08D  F083         	movff	___aldiv@quotient+3,?___aldiv+3
 12335  003CAE  0012               	return	
 12336  003CB0                     __end_of___aldiv:
 12337                           	opt stack 0
 12338                           tblptru	equ	0xFF8
 12339                           tblptrh	equ	0xFF7
 12340                           tblptrl	equ	0xFF6
 12341                           tablat	equ	0xFF5
 12342                           prodh	equ	0xFF4
 12343                           prodl	equ	0xFF3
 12344                           intcon	equ	0xFF2
 12345                           postinc0	equ	0xFEE
 12346                           wreg	equ	0xFE8
 12347                           postdec1	equ	0xFE5
 12348                           fsr1l	equ	0xFE1
 12349                           indf2	equ	0xFDF
 12350                           postinc2	equ	0xFDE
 12351                           postdec2	equ	0xFDD
 12352                           fsr2h	equ	0xFDA
 12353                           fsr2l	equ	0xFD9
 12354                           status	equ	0xFD8
 12355                           
 12356 ;; *************** function _service *****************
 12357 ;; Defined at:
 12358 ;;		line 255 in file "main.c"
 12359 ;; Parameters:    Size  Location     Type
 12360 ;;		None
 12361 ;; Auto vars:     Size  Location     Type
 12362 ;;  key             1  121[COMRAM] unsigned char 
 12363 ;; Return value:  Size  Location     Type
 12364 ;;                  1    wreg      void 
 12365 ;; Registers used:
 12366 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12367 ;; Tracked objects:
 12368 ;;		On entry : 0/0
 12369 ;;		On exit  : 0/0
 12370 ;;		Unchanged: 0/0
 12371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12373 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12374 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12375 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12376 ;;Total ram usage:       19 bytes
 12377 ;; Hardware stack levels used:    1
 12378 ;; Hardware stack levels required when called:    5
 12379 ;; This function calls:
 12380 ;;		_servoInterruptService
 12381 ;;		i2_lcdClear
 12382 ;;		i2_printf
 12383 ;;		i2_startTimer
 12384 ;; This function is called by:
 12385 ;;		Interrupt level 2
 12386 ;; This function uses a non-reentrant model
 12387 ;;
 12388                           
 12389                           	psect	intcode
 12390  000008                     __pintcode:
 12391                           	opt stack 0
 12392  000008                     _service:
 12393                           	opt stack 19
 12394                           
 12395                           ; BSR set to: 0
 12396                           ;incstack = 0
 12397  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 12398  00000A  ED69  F01B         	call	int_func,f	;refresh shadow registers
 12399                           tblptru	equ	0xFF8
 12400                           tblptrh	equ	0xFF7
 12401                           tblptrl	equ	0xFF6
 12402                           tablat	equ	0xFF5
 12403                           prodh	equ	0xFF4
 12404                           prodl	equ	0xFF3
 12405                           intcon	equ	0xFF2
 12406                           postinc0	equ	0xFEE
 12407                           wreg	equ	0xFE8
 12408                           postdec1	equ	0xFE5
 12409                           fsr1l	equ	0xFE1
 12410                           indf2	equ	0xFDF
 12411                           postinc2	equ	0xFDE
 12412                           postdec2	equ	0xFDD
 12413                           fsr2h	equ	0xFDA
 12414                           fsr2l	equ	0xFD9
 12415                           status	equ	0xFD8
 12416                           
 12417                           	psect	intcode_body
 12418  0036D2                     __pintcode_body:
 12419                           	opt stack 19
 12420  0036D2                     int_func:
 12421                           	opt stack 19
 12422  0036D2  0006               	pop		; remove dummy address from shadow register refresh
 12423  0036D4  CFFA F06C          	movff	pclath,??_service+4
 12424  0036D8  CFFB F06D          	movff	pclatu,??_service+5
 12425  0036DC  CFE9 F06E          	movff	fsr0l,??_service+6
 12426  0036E0  CFEA F06F          	movff	fsr0h,??_service+7
 12427  0036E4  CFE1 F070          	movff	fsr1l,??_service+8
 12428  0036E8  CFE2 F071          	movff	fsr1h,??_service+9
 12429  0036EC  CFD9 F072          	movff	fsr2l,??_service+10
 12430  0036F0  CFDA F073          	movff	fsr2h,??_service+11
 12431  0036F4  CFF3 F074          	movff	prodl,??_service+12
 12432  0036F8  CFF4 F075          	movff	prodh,??_service+13
 12433  0036FC  CFF6 F076          	movff	tblptrl,??_service+14
 12434  003700  CFF7 F077          	movff	tblptrh,??_service+15
 12435  003704  CFF8 F078          	movff	tblptru,??_service+16
 12436  003708  CFF5 F079          	movff	tablat,??_service+17
 12437                           
 12438                           ;main.c: 257: servoInterruptService();
 12439  00370C  EC60  F01F         	call	_servoInterruptService	;wreg free
 12440                           
 12441                           ;main.c: 259: if(TMR1IF){
 12442  003710  A09E               	btfss	3998,0,c	;volatile
 12443  003712  D024               	goto	i2l6700
 12444                           
 12445                           ;main.c: 260: startTimer(1,0xffff - period);
 12446  003714  0E00               	movlw	0
 12447  003716  6E08               	movwf	i2startTimer@timer+1,c
 12448  003718  0E01               	movlw	1
 12449  00371A  6E07               	movwf	i2startTimer@timer,c
 12450  00371C  0EFF               	movlw	255
 12451  00371E  6E68               	movwf	??_service& (0+255),c
 12452  003720  0EFF               	movlw	255
 12453  003722  6E69               	movwf	(??_service+1)& (0+255),c
 12454  003724  C113  F06A         	movff	_period,??_service+2
 12455  003728  C114  F06B         	movff	_period+1,??_service+3
 12456  00372C  1E6A               	comf	??_service+2,f,c
 12457  00372E  1E6B               	comf	??_service+3,f,c
 12458  003730  4A6A               	infsnz	??_service+2,f,c
 12459  003732  2A6B               	incf	??_service+3,f,c
 12460  003734  5068               	movf	??_service,w,c
 12461  003736  266A               	addwf	??_service+2,f,c
 12462  003738  5069               	movf	??_service+1,w,c
 12463  00373A  226B               	addwfc	??_service+3,f,c
 12464  00373C  C06A  F009         	movff	??_service+2,i2startTimer@val
 12465  003740  C06B  F00A         	movff	??_service+3,i2startTimer@val+1
 12466  003744  6A0B               	clrf	i2startTimer@val+2,c
 12467  003746  6A0C               	clrf	i2startTimer@val+3,c
 12468  003748  EC45  F027         	call	i2_startTimer	;wreg free
 12469                           
 12470                           ;main.c: 261: time+=1;
 12471  00374C  0E01               	movlw	1
 12472  00374E  0101               	movlb	1	; () banked
 12473  003750  277F               	addwf	_time& (0+255),f,b
 12474  003752  0E00               	movlw	0
 12475  003754  2380               	addwfc	(_time+1)& (0+255),f,b
 12476  003756  2381               	addwfc	(_time+2)& (0+255),f,b
 12477  003758  2382               	addwfc	(_time+3)& (0+255),f,b
 12478                           
 12479                           ; BSR set to: 1
 12480                           ;main.c: 262: TMR1IF = 0;
 12481  00375A  909E               	bcf	3998,0,c	;volatile
 12482  00375C                     i2l6700:
 12483                           
 12484                           ;main.c: 263: }
 12485                           ;main.c: 266: if(INT0IF){ INT0IF = 0;
 12486  00375C  A2F2               	btfss	intcon,1,c	;volatile
 12487  00375E  D006               	goto	i2l6706
 12488  003760  92F2               	bcf	intcon,1,c	;volatile
 12489                           
 12490                           ;main.c: 267: batteryDetected = 1;
 12491  003762  0E00               	movlw	0
 12492  003764  0101               	movlb	1	; () banked
 12493  003766  6F84               	movwf	(_batteryDetected+1)& (0+255),b
 12494  003768  0E01               	movlw	1
 12495  00376A  6F83               	movwf	_batteryDetected& (0+255),b
 12496  00376C                     i2l6706:
 12497                           
 12498                           ;main.c: 268: }
 12499                           ;main.c: 271: if(INT1IF && INT1IE){INT1IF = 0;
 12500  00376C  B0F0               	btfsc	intcon3,0,c	;volatile
 12501  00376E  A6F0               	btfss	intcon3,3,c	;volatile
 12502  003770  D02F               	goto	i2l162
 12503  003772  90F0               	bcf	intcon3,0,c	;volatile
 12504                           
 12505                           ;main.c: 274: char key = (PORTB & 0xF0) >> 4;
 12506  003774  3881               	swapf	3969,w,c	;volatile
 12507  003776  0B0F               	andlw	15
 12508  003778  0B0F               	andlw	15
 12509  00377A  6E7A               	movwf	service@key,c
 12510                           
 12511                           ;main.c: 275: if(key == 0)time = 0;
 12512  00377C  507A               	movf	service@key,w,c
 12513  00377E  A4D8               	btfss	status,2,c
 12514  003780  D00A               	goto	i2l6718
 12515  003782  0E00               	movlw	0
 12516  003784  0101               	movlb	1	; () banked
 12517  003786  6F7F               	movwf	_time& (0+255),b
 12518  003788  0E00               	movlw	0
 12519  00378A  6F80               	movwf	(_time+1)& (0+255),b
 12520  00378C  0E00               	movlw	0
 12521  00378E  6F81               	movwf	(_time+2)& (0+255),b
 12522  003790  0E00               	movlw	0
 12523  003792  6F82               	movwf	(_time+3)& (0+255),b
 12524  003794  D011               	goto	i2l6726
 12525  003796                     i2l6718:
 12526                           
 12527                           ;main.c: 276: else if(key == 1)period+=100;
 12528  003796  047A               	decf	service@key,w,c
 12529  003798  A4D8               	btfss	status,2,c
 12530  00379A  D005               	goto	i2l6722
 12531  00379C  0E64               	movlw	100
 12532  00379E  0101               	movlb	1	; () banked
 12533  0037A0  2713               	addwf	_period& (0+255),f,b
 12534  0037A2  0E00               	movlw	0
 12535  0037A4  D008               	goto	L7
 12536  0037A6                     i2l6722:
 12537                           
 12538                           ;main.c: 277: else if(key == 2)period-=100;
 12539  0037A6  0E02               	movlw	2
 12540  0037A8  187A               	xorwf	service@key,w,c
 12541  0037AA  A4D8               	btfss	status,2,c
 12542  0037AC  D005               	goto	i2l6726
 12543  0037AE  0101               	movlb	1	; () banked
 12544  0037B0  0E9C               	movlw	156
 12545  0037B2  2713               	addwf	_period& (0+255),f,b
 12546  0037B4  0EFF               	movlw	255
 12547  0037B6                     L7:
 12548  0037B6  2314               	addwfc	(_period+1)& (0+255),f,b
 12549  0037B8                     i2l6726:
 12550                           
 12551                           ;main.c: 278: lcdClear();
 12552  0037B8  EC3E  F029         	call	i2_lcdClear	;wreg free
 12553                           
 12554                           ;main.c: 279: printf("period %ld",period);
 12555  0037BC  0EE3               	movlw	low STR_4
 12556  0037BE  6E40               	movwf	i2printf@f,c
 12557  0037C0  0EFF               	movlw	high STR_4
 12558  0037C2  6E41               	movwf	i2printf@f+1,c
 12559  0037C4  C113  F042         	movff	_period,?i2_printf+2
 12560  0037C8  C114  F043         	movff	_period+1,?i2_printf+3
 12561  0037CC  EC65  F006         	call	i2_printf	;wreg free
 12562  0037D0                     i2l162:
 12563  0037D0  C079  FFF5         	movff	??_service+17,tablat
 12564  0037D4  C078  FFF8         	movff	??_service+16,tblptru
 12565  0037D8  C077  FFF7         	movff	??_service+15,tblptrh
 12566  0037DC  C076  FFF6         	movff	??_service+14,tblptrl
 12567  0037E0  C075  FFF4         	movff	??_service+13,prodh
 12568  0037E4  C074  FFF3         	movff	??_service+12,prodl
 12569  0037E8  C073  FFDA         	movff	??_service+11,fsr2h
 12570  0037EC  C072  FFD9         	movff	??_service+10,fsr2l
 12571  0037F0  C071  FFE2         	movff	??_service+9,fsr1h
 12572  0037F4  C070  FFE1         	movff	??_service+8,fsr1l
 12573  0037F8  C06F  FFEA         	movff	??_service+7,fsr0h
 12574  0037FC  C06E  FFE9         	movff	??_service+6,fsr0l
 12575  003800  C06D  FFFB         	movff	??_service+5,pclatu
 12576  003804  C06C  FFFA         	movff	??_service+4,pclath
 12577  003808  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12578  00380A  0011               	retfie		f
 12579  00380C                     __end_of_service:
 12580                           	opt stack 0
 12581                           pclatu	equ	0xFFB
 12582                           pclath	equ	0xFFA
 12583                           tblptru	equ	0xFF8
 12584                           tblptrh	equ	0xFF7
 12585                           tblptrl	equ	0xFF6
 12586                           tablat	equ	0xFF5
 12587                           prodh	equ	0xFF4
 12588                           prodl	equ	0xFF3
 12589                           intcon	equ	0xFF2
 12590                           intcon3	equ	0xFF0
 12591                           postinc0	equ	0xFEE
 12592                           fsr0h	equ	0xFEA
 12593                           fsr0l	equ	0xFE9
 12594                           wreg	equ	0xFE8
 12595                           postdec1	equ	0xFE5
 12596                           fsr1h	equ	0xFE2
 12597                           fsr1l	equ	0xFE1
 12598                           indf2	equ	0xFDF
 12599                           postinc2	equ	0xFDE
 12600                           postdec2	equ	0xFDD
 12601                           fsr2h	equ	0xFDA
 12602                           fsr2l	equ	0xFD9
 12603                           status	equ	0xFD8
 12604                           
 12605 ;; *************** function i2_printf *****************
 12606 ;; Defined at:
 12607 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12608 ;; Parameters:    Size  Location     Type
 12609 ;;  f               2   63[COMRAM] PTR const unsigned char 
 12610 ;;		 -> STR_17(17), STR_16(18), STR_15(17), STR_14(18), 
 12611 ;;		 -> STR_13(17), STR_12(19), STR_11(17), STR_10(18), 
 12612 ;;		 -> STR_9(17), STR_8(18), STR_7(17), STR_6(18), 
 12613 ;;		 -> STR_5(8), STR_4(11), STR_3(15), STR_2(17), 
 12614 ;;		 -> STR_1(8), 
 12615 ;; Auto vars:     Size  Location     Type
 12616 ;;  printf          4   91[COMRAM] unsigned long 
 12617 ;;  printf          4   85[COMRAM] struct .
 12618 ;;  printf          3   95[COMRAM] struct .
 12619 ;;  printf          2  100[COMRAM] unsigned short 
 12620 ;;  printf          2   98[COMRAM] int 
 12621 ;;  printf          2   89[COMRAM] int 
 12622 ;;  printf          2   83[COMRAM] int 
 12623 ;;  printf          2   81[COMRAM] PTR void [1]
 12624 ;;		 -> ?i2_printf(2), ?_printf(2), 
 12625 ;;  printf          2   79[COMRAM] unsigned int 
 12626 ;;  printf          2   77[COMRAM] PTR const unsigned char 
 12627 ;;		 -> printf@c(1), 
 12628 ;;  printf          1  102[COMRAM] char 
 12629 ;;  printf          1   76[COMRAM] unsigned char 
 12630 ;;  printf          1    0        unsigned char 
 12631 ;; Return value:  Size  Location     Type
 12632 ;;                  2   63[COMRAM] int 
 12633 ;; Registers used:
 12634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12635 ;; Tracked objects:
 12636 ;;		On entry : 0/0
 12637 ;;		On exit  : 0/0
 12638 ;;		Unchanged: 0/0
 12639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12640 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12641 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12642 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12643 ;;      Totals:        40       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12644 ;;Total ram usage:       40 bytes
 12645 ;; Hardware stack levels used:    1
 12646 ;; Hardware stack levels required when called:    4
 12647 ;; This function calls:
 12648 ;;		i2___awdiv
 12649 ;;		i2___ftadd
 12650 ;;		i2___ftge
 12651 ;;		i2___ftmul
 12652 ;;		i2___ftneg
 12653 ;;		i2___ftsub
 12654 ;;		i2___fttol
 12655 ;;		i2___lldiv
 12656 ;;		i2___llmod
 12657 ;;		i2___lltoft
 12658 ;;		i2___wmul
 12659 ;;		i2__div_to_l_
 12660 ;;		i2__tdiv_to_l_
 12661 ;;		i2_fround
 12662 ;;		i2_isdigit
 12663 ;;		i2_putch
 12664 ;;		i2_scale
 12665 ;; This function is called by:
 12666 ;;		_service
 12667 ;; This function uses a non-reentrant model
 12668 ;;
 12669                           
 12670                           	psect	text44
 12671  000CCA                     __ptext44:
 12672                           	opt stack 0
 12673  000CCA                     i2_printf:
 12674                           	opt stack 19
 12675                           
 12676                           ;doprnt.c: 466: va_list ap;
 12677                           ;doprnt.c: 499: signed char c;
 12678                           ;doprnt.c: 501: int width;
 12679                           ;doprnt.c: 504: int prec;
 12680                           ;doprnt.c: 508: unsigned short flag;
 12681                           ;doprnt.c: 515: char d;
 12682                           ;doprnt.c: 516: double fval;
 12683                           ;doprnt.c: 517: int exp;
 12684                           ;doprnt.c: 523: union {
 12685                           ;doprnt.c: 524: unsigned long vd;
 12686                           ;doprnt.c: 525: double integ;
 12687                           ;doprnt.c: 526: } tmpval;
 12688                           ;doprnt.c: 528: unsigned long val;
 12689                           ;doprnt.c: 529: unsigned len;
 12690                           ;doprnt.c: 530: const char * cp;
 12691                           ;doprnt.c: 533: *ap = __va_start();
 12692                           
 12693                           ;incstack = 0
 12694  000CCA  0E42               	movlw	low (?i2_printf+2)
 12695  000CCC  6E52               	movwf	i2printf@ap,c
 12696  000CCE  0E00               	movlw	high (?i2_printf+2)
 12697  000CD0  6E53               	movwf	i2printf@ap+1,c
 12698                           
 12699                           ;doprnt.c: 536: while(c = *f++) {
 12700  000CD2  EF9B  F00B         	goto	i2l6660
 12701  000CD6                     i2l6338:
 12702                           
 12703                           ;doprnt.c: 538: if(c != '%')
 12704  000CD6  0E25               	movlw	37
 12705  000CD8  1867               	xorwf	i2printf@c,w,c
 12706  000CDA  B4D8               	btfsc	status,2,c
 12707  000CDC  D005               	goto	i2l6342
 12708                           
 12709                           ;doprnt.c: 540: {
 12710                           ;doprnt.c: 541: (putch(c) );
 12711  000CDE  5067               	movf	i2printf@c,w,c
 12712  000CE0  ECFD  F028         	call	i2_putch
 12713                           
 12714                           ;doprnt.c: 542: continue;
 12715  000CE4  EF9B  F00B         	goto	i2l6660
 12716  000CE8                     i2l6342:
 12717                           
 12718                           ;doprnt.c: 543: }
 12719                           ;doprnt.c: 546: width = 0;
 12720  000CE8  0E00               	movlw	0
 12721  000CEA  6E64               	movwf	i2printf@width+1,c
 12722  000CEC  0E00               	movlw	0
 12723  000CEE  6E63               	movwf	i2printf@width,c
 12724                           
 12725                           ;doprnt.c: 548: flag = 0;
 12726  000CF0  0E00               	movlw	0
 12727  000CF2  6E66               	movwf	i2printf@flag+1,c
 12728  000CF4  0E00               	movlw	0
 12729  000CF6  6E65               	movwf	i2printf@flag,c
 12730                           
 12731                           ;doprnt.c: 551: switch(*f) {
 12732                           
 12733                           ;doprnt.c: 550: for(;;) {
 12734  000CF8  D003               	goto	i2l6348
 12735  000CFA                     i2l6344:
 12736                           
 12737                           ;doprnt.c: 580: flag |= 0x04;
 12738  000CFA  8465               	bsf	i2printf@flag,2,c
 12739                           
 12740                           ;doprnt.c: 581: f++;
 12741  000CFC  4A40               	infsnz	i2printf@f,f,c
 12742  000CFE  2A41               	incf	i2printf@f+1,f,c
 12743  000D00                     i2l6348:
 12744  000D00  C040  FFF6         	movff	i2printf@f,tblptrl
 12745  000D04  C041  FFF7         	movff	i2printf@f+1,tblptrh
 12746  000D08                     	if	0	;tblptru may be non-zero
 12747  000D08                     	endif
 12748  000D08                     	if	0	;tblptru may be non-zero
 12749  000D08                     	endif
 12750  000D08  0008               	tblrd		*
 12751  000D0A  50F5               	movf	tablat,w,c
 12752                           
 12753                           ; Switch size 1, requested type "space"
 12754                           ; Number of cases is 1, Range of values is 48 to 48
 12755                           ; switch strategies available:
 12756                           ; Name         Instructions Cycles
 12757                           ; simple_byte            4     3 (average)
 12758                           ;	Chosen strategy is simple_byte
 12759  000D0C  0A30               	xorlw	48	; case 48
 12760  000D0E  B4D8               	btfsc	status,2,c
 12761  000D10  D7F4               	goto	i2l6344
 12762                           
 12763                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12764                           
 12765                           ;doprnt.c: 586: }
 12766                           
 12767                           ;doprnt.c: 585: break;
 12768  000D12  C040  FFF6         	movff	i2printf@f,tblptrl
 12769  000D16  C041  FFF7         	movff	i2printf@f+1,tblptrh
 12770  000D1A                     	if	0	;tblptru may be non-zero
 12771  000D1A                     	endif
 12772  000D1A                     	if	0	;tblptru may be non-zero
 12773  000D1A                     	endif
 12774  000D1A  0008               	tblrd		*
 12775  000D1C  50F5               	movf	tablat,w,c
 12776  000D1E  EC1F  F029         	call	i2_isdigit
 12777  000D22  A0D8               	btfss	status,0,c
 12778  000D24  D07B               	goto	i2l6394
 12779                           
 12780                           ;doprnt.c: 598: width = 0;
 12781  000D26  0E00               	movlw	0
 12782  000D28  6E64               	movwf	i2printf@width+1,c
 12783  000D2A  0E00               	movlw	0
 12784  000D2C  6E63               	movwf	i2printf@width,c
 12785  000D2E                     i2l6354:
 12786                           
 12787                           ;doprnt.c: 600: width *= 10;
 12788  000D2E  C063  F00F         	movff	i2printf@width,i2___wmul@multiplier
 12789  000D32  C064  F010         	movff	i2printf@width+1,i2___wmul@multiplier+1
 12790  000D36  0E00               	movlw	0
 12791  000D38  6E12               	movwf	i2___wmul@multiplicand+1,c
 12792  000D3A  0E0A               	movlw	10
 12793  000D3C  6E11               	movwf	i2___wmul@multiplicand,c
 12794  000D3E  ECD8  F028         	call	i2___wmul	;wreg free
 12795  000D42  C00F  F063         	movff	?i2___wmul,i2printf@width
 12796  000D46  C010  F064         	movff	?i2___wmul+1,i2printf@width+1
 12797                           
 12798                           ;doprnt.c: 601: width += *f++ - '0';
 12799  000D4A  0ED0               	movlw	208
 12800  000D4C  6E44               	movwf	??i2_printf& (0+255),c
 12801  000D4E  0EFF               	movlw	255
 12802  000D50  6E45               	movwf	(??i2_printf+1)& (0+255),c
 12803  000D52  C040  FFF6         	movff	i2printf@f,tblptrl
 12804  000D56  C041  FFF7         	movff	i2printf@f+1,tblptrh
 12805  000D5A                     	if	0	;tblptru may be non-zero
 12806  000D5A                     	endif
 12807  000D5A                     	if	0	;tblptru may be non-zero
 12808  000D5A                     	endif
 12809  000D5A  0008               	tblrd		*
 12810  000D5C  50F5               	movf	tablat,w,c
 12811  000D5E  6E46               	movwf	(??i2_printf+2)& (0+255),c
 12812  000D60  6A47               	clrf	(??i2_printf+3)& (0+255),c
 12813  000D62  5044               	movf	??i2_printf,w,c
 12814  000D64  2646               	addwf	??i2_printf+2,f,c
 12815  000D66  5045               	movf	??i2_printf+1,w,c
 12816  000D68  2247               	addwfc	??i2_printf+3,f,c
 12817  000D6A  5046               	movf	??i2_printf+2,w,c
 12818  000D6C  2663               	addwf	i2printf@width,f,c
 12819  000D6E  5047               	movf	??i2_printf+3,w,c
 12820  000D70  2264               	addwfc	i2printf@width+1,f,c
 12821  000D72  4A40               	infsnz	i2printf@f,f,c
 12822  000D74  2A41               	incf	i2printf@f+1,f,c
 12823                           
 12824                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12825  000D76  C040  FFF6         	movff	i2printf@f,tblptrl
 12826  000D7A  C041  FFF7         	movff	i2printf@f+1,tblptrh
 12827  000D7E                     	if	0	;tblptru may be non-zero
 12828  000D7E                     	endif
 12829  000D7E                     	if	0	;tblptru may be non-zero
 12830  000D7E                     	endif
 12831  000D7E  0008               	tblrd		*
 12832  000D80  50F5               	movf	tablat,w,c
 12833  000D82  EC1F  F029         	call	i2_isdigit
 12834  000D86  A0D8               	btfss	status,0,c
 12835  000D88  D049               	goto	i2l6394
 12836  000D8A  D7D1               	goto	i2l6354
 12837  000D8C                     i2l6362:
 12838                           
 12839                           ;doprnt.c: 643: flag |= 0x10;
 12840  000D8C  8865               	bsf	i2printf@flag,4,c
 12841                           
 12842                           ;doprnt.c: 644: goto loop;
 12843  000D8E  D046               	goto	i2l6394
 12844  000D90                     i2l6364:
 12845                           
 12846                           ;doprnt.c: 663: flag |= 0x400;
 12847  000D90  8466               	bsf	i2printf@flag+1,2,c
 12848                           
 12849                           ;doprnt.c: 698: case 'i':
 12850                           ;doprnt.c: 699: break;
 12851                           
 12852                           ;doprnt.c: 697: case 'd':
 12853                           
 12854                           ;doprnt.c: 664: break;
 12855  000D92  D064               	goto	i2l6396
 12856  000D94                     i2l6366:
 12857                           
 12858                           ;doprnt.c: 721: flag |= 0x80;
 12859  000D94  8E65               	bsf	i2printf@flag,7,c
 12860                           
 12861                           ;doprnt.c: 723: break;
 12862  000D96  D062               	goto	i2l6396
 12863  000D98                     i2l6368:
 12864                           
 12865                           ;doprnt.c: 757: if(width > len)
 12866  000D98  5063               	movf	i2printf@width,w,c
 12867  000D9A  5C50               	subwf	i2printf@len,w,c
 12868  000D9C  5064               	movf	i2printf@width+1,w,c
 12869  000D9E  5851               	subwfb	i2printf@len+1,w,c
 12870  000DA0  B0D8               	btfsc	status,0,c
 12871  000DA2  D005               	goto	i2l6372
 12872                           
 12873                           ;doprnt.c: 758: width -= len;
 12874  000DA4  5050               	movf	i2printf@len,w,c
 12875  000DA6  5E63               	subwf	i2printf@width,f,c
 12876  000DA8  5051               	movf	i2printf@len+1,w,c
 12877  000DAA  5A64               	subwfb	i2printf@width+1,f,c
 12878  000DAC  D008               	goto	i2l6376
 12879  000DAE                     i2l6372:
 12880                           
 12881                           ;doprnt.c: 759: else
 12882                           ;doprnt.c: 760: width = 0;
 12883  000DAE  0E00               	movlw	0
 12884  000DB0  6E64               	movwf	i2printf@width+1,c
 12885  000DB2  0E00               	movlw	0
 12886  000DB4  6E63               	movwf	i2printf@width,c
 12887                           
 12888                           ;doprnt.c: 764: while(width--)
 12889  000DB6  D003               	goto	i2l6376
 12890  000DB8                     i2l6374:
 12891                           
 12892                           ;doprnt.c: 765: (putch(' ') );
 12893  000DB8  0E20               	movlw	32
 12894  000DBA  ECFD  F028         	call	i2_putch
 12895  000DBE                     i2l6376:
 12896  000DBE  0663               	decf	i2printf@width,f,c
 12897  000DC0  A0D8               	btfss	status,0,c
 12898  000DC2  0664               	decf	i2printf@width+1,f,c
 12899  000DC4  2863               	incf	i2printf@width,w,c
 12900  000DC6  E1F8               	bnz	i2l6374
 12901  000DC8  2864               	incf	i2printf@width+1,w,c
 12902  000DCA  B4D8               	btfsc	status,2,c
 12903  000DCC  D00A               	goto	i2l6382
 12904  000DCE  D7F4               	goto	i2l6374
 12905  000DD0                     i2l6378:
 12906                           
 12907                           ;doprnt.c: 768: (putch(*cp++) );
 12908  000DD0  C04E  FFD9         	movff	i2printf@cp,fsr2l
 12909  000DD4  C04F  FFDA         	movff	i2printf@cp+1,fsr2h
 12910  000DD8  50DF               	movf	indf2,w,c
 12911  000DDA  ECFD  F028         	call	i2_putch
 12912  000DDE  4A4E               	infsnz	i2printf@cp,f,c
 12913  000DE0  2A4F               	incf	i2printf@cp+1,f,c
 12914  000DE2                     i2l6382:
 12915  000DE2  0650               	decf	i2printf@len,f,c
 12916  000DE4  A0D8               	btfss	status,0,c
 12917  000DE6  0651               	decf	i2printf@len+1,f,c
 12918  000DE8  2850               	incf	i2printf@len,w,c
 12919  000DEA  E1F2               	bnz	i2l6378
 12920  000DEC  2851               	incf	i2printf@len+1,w,c
 12921  000DEE  B4D8               	btfsc	status,2,c
 12922  000DF0  EF9B  F00B         	goto	i2l6660
 12923  000DF4  D7ED               	goto	i2l6378
 12924  000DF6                     i2l6384:
 12925                           
 12926                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 12927  000DF6  C052  FFD9         	movff	i2printf@ap,fsr2l
 12928  000DFA  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 12929  000DFE  50DF               	movf	indf2,w,c
 12930  000E00  6E67               	movwf	i2printf@c,c
 12931  000E02  0E02               	movlw	2
 12932  000E04  2652               	addwf	i2printf@ap,f,c
 12933  000E06  0E00               	movlw	0
 12934  000E08  2253               	addwfc	i2printf@ap+1,f,c
 12935  000E0A                     i2l6388:
 12936                           
 12937                           ;doprnt.c: 805: cp = (char *)&c;
 12938  000E0A  0E67               	movlw	low i2printf@c
 12939  000E0C  6E4E               	movwf	i2printf@cp,c
 12940  000E0E  0E00               	movlw	high i2printf@c
 12941  000E10  6E4F               	movwf	i2printf@cp+1,c
 12942                           
 12943                           ;doprnt.c: 806: len = 1;
 12944  000E12  0E00               	movlw	0
 12945  000E14  6E51               	movwf	i2printf@len+1,c
 12946  000E16  0E01               	movlw	1
 12947  000E18  6E50               	movwf	i2printf@len,c
 12948                           
 12949                           ;doprnt.c: 807: goto dostring;
 12950  000E1A  D7BE               	goto	i2l6368
 12951  000E1C                     i2l6394:
 12952  000E1C  C040  FFF6         	movff	i2printf@f,tblptrl
 12953  000E20  C041  FFF7         	movff	i2printf@f+1,tblptrh
 12954  000E24  4A40               	infsnz	i2printf@f,f,c
 12955  000E26  2A41               	incf	i2printf@f+1,f,c
 12956  000E28                     	if	0	;tblptru may be non-zero
 12957  000E28                     	endif
 12958  000E28                     	if	0	;tblptru may be non-zero
 12959  000E28                     	endif
 12960  000E28  0008               	tblrd		*
 12961  000E2A  CFF5 F067          	movff	tablat,i2printf@c
 12962  000E2E  5067               	movf	i2printf@c,w,c
 12963                           
 12964                           ; Switch size 1, requested type "space"
 12965                           ; Number of cases is 7, Range of values is 0 to 120
 12966                           ; switch strategies available:
 12967                           ; Name         Instructions Cycles
 12968                           ; simple_byte           22    12 (average)
 12969                           ;	Chosen strategy is simple_byte
 12970  000E30  0A00               	xorlw	0	; case 0
 12971  000E32  B4D8               	btfsc	status,2,c
 12972  000E34  0012               	return	
 12973  000E36  0A63               	xorlw	99	; case 99
 12974  000E38  B4D8               	btfsc	status,2,c
 12975  000E3A  D7DD               	goto	i2l6384
 12976  000E3C  0A07               	xorlw	7	; case 100
 12977  000E3E  B4D8               	btfsc	status,2,c
 12978  000E40  D00D               	goto	i2l6396
 12979  000E42  0A02               	xorlw	2	; case 102
 12980  000E44  B4D8               	btfsc	status,2,c
 12981  000E46  D7A4               	goto	i2l6364
 12982  000E48  0A0F               	xorlw	15	; case 105
 12983  000E4A  B4D8               	btfsc	status,2,c
 12984  000E4C  D007               	goto	i2l6396
 12985  000E4E  0A05               	xorlw	5	; case 108
 12986  000E50  B4D8               	btfsc	status,2,c
 12987  000E52  D79C               	goto	i2l6362
 12988  000E54  0A14               	xorlw	20	; case 120
 12989  000E56  B4D8               	btfsc	status,2,c
 12990  000E58  D79D               	goto	i2l6366
 12991  000E5A  D7D7               	goto	i2l6388
 12992  000E5C                     i2l6396:
 12993                           
 12994                           ;doprnt.c: 825: if(flag & (0x700)) {
 12995  000E5C  0E07               	movlw	7
 12996  000E5E  1466               	andwf	i2printf@flag+1,w,c
 12997  000E60  B4D8               	btfsc	status,2,c
 12998  000E62  D2EC               	goto	i2l695
 12999                           
 13000                           ;doprnt.c: 829: prec = 6;
 13001  000E64  0E00               	movlw	0
 13002  000E66  6E55               	movwf	i2printf@prec+1,c
 13003  000E68  0E06               	movlw	6
 13004  000E6A  6E54               	movwf	i2printf@prec,c
 13005                           
 13006                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 13007  000E6C  C052  FFD9         	movff	i2printf@ap,fsr2l
 13008  000E70  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 13009  000E74  CFDE F060          	movff	postinc2,i2printf@fval
 13010  000E78  CFDE F061          	movff	postinc2,i2printf@fval+1
 13011  000E7C  CFDD F062          	movff	postdec2,i2printf@fval+2
 13012  000E80  0E03               	movlw	3
 13013  000E82  2652               	addwf	i2printf@ap,f,c
 13014  000E84  0E00               	movlw	0
 13015  000E86  2253               	addwfc	i2printf@ap+1,f,c
 13016                           
 13017                           ;doprnt.c: 831: if(fval < 0.0) {
 13018  000E88  AE62               	btfss	i2printf@fval+2,7,c
 13019  000E8A  D010               	goto	i2l6410
 13020                           
 13021                           ;doprnt.c: 832: fval = -fval;
 13022  000E8C  C060  F001         	movff	i2printf@fval,i2___ftneg@f1
 13023  000E90  C061  F002         	movff	i2printf@fval+1,i2___ftneg@f1+1
 13024  000E94  C062  F003         	movff	i2printf@fval+2,i2___ftneg@f1+2
 13025  000E98  ECEB  F028         	call	i2___ftneg	;wreg free
 13026  000E9C  C001  F060         	movff	?i2___ftneg,i2printf@fval
 13027  000EA0  C002  F061         	movff	?i2___ftneg+1,i2printf@fval+1
 13028  000EA4  C003  F062         	movff	?i2___ftneg+2,i2printf@fval+2
 13029                           
 13030                           ;doprnt.c: 833: flag |= 0x03;
 13031  000EA8  0E03               	movlw	3
 13032  000EAA  1265               	iorwf	i2printf@flag,f,c
 13033  000EAC                     i2l6410:
 13034                           
 13035                           ;doprnt.c: 834: }
 13036                           ;doprnt.c: 835: exp = 0;
 13037  000EAC  0E00               	movlw	0
 13038  000EAE  6E5B               	movwf	i2printf@exp+1,c
 13039  000EB0  0E00               	movlw	0
 13040  000EB2  6E5A               	movwf	i2printf@exp,c
 13041                           
 13042                           ;doprnt.c: 836: if( fval!=0) {
 13043  000EB4  5060               	movf	i2printf@fval,w,c
 13044  000EB6  1061               	iorwf	i2printf@fval+1,w,c
 13045  000EB8  1062               	iorwf	i2printf@fval+2,w,c
 13046  000EBA  B4D8               	btfsc	status,2,c
 13047  000EBC  D083               	goto	i2l6438
 13048                           
 13049                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 13050  000EBE  0E82               	movlw	130
 13051  000EC0  6E44               	movwf	??i2_printf& (0+255),c
 13052  000EC2  0EFF               	movlw	255
 13053  000EC4  6E45               	movwf	(??i2_printf+1)& (0+255),c
 13054  000EC6  C060  F046         	movff	i2printf@fval,??i2_printf+2
 13055  000ECA  C061  F047         	movff	i2printf@fval+1,??i2_printf+3
 13056  000ECE  C062  F048         	movff	i2printf@fval+2,??i2_printf+4
 13057  000ED2  C063  F049         	movff	i2printf@fval+3,??i2_printf+5
 13058  000ED6  0E10               	movlw	16
 13059  000ED8  D005               	goto	i2u700_40
 13060  000EDA                     i2u700_45:
 13061  000EDA  90D8               	bcf	status,0,c
 13062  000EDC  3249               	rrcf	??i2_printf+5,f,c
 13063  000EDE  3248               	rrcf	??i2_printf+4,f,c
 13064  000EE0  3247               	rrcf	??i2_printf+3,f,c
 13065  000EE2  3246               	rrcf	??i2_printf+2,f,c
 13066  000EE4                     i2u700_40:
 13067  000EE4  2EE8               	decfsz	wreg,f,c
 13068  000EE6  D7F9               	goto	i2u700_45
 13069  000EE8  5046               	movf	??i2_printf+2,w,c
 13070  000EEA  2444               	addwf	??i2_printf,w,c
 13071  000EEC  6E5A               	movwf	i2printf@exp,c
 13072  000EEE  0E00               	movlw	0
 13073  000EF0  2045               	addwfc	??i2_printf+1,w,c
 13074  000EF2  6E5B               	movwf	i2printf@exp+1,c
 13075                           
 13076                           ;doprnt.c: 838: exp--;
 13077  000EF4  065A               	decf	i2printf@exp,f,c
 13078  000EF6  A0D8               	btfss	status,0,c
 13079  000EF8  065B               	decf	i2printf@exp+1,f,c
 13080                           
 13081                           ;doprnt.c: 839: exp *= 3;
 13082  000EFA  C05A  F00F         	movff	i2printf@exp,i2___wmul@multiplier
 13083  000EFE  C05B  F010         	movff	i2printf@exp+1,i2___wmul@multiplier+1
 13084  000F02  0E00               	movlw	0
 13085  000F04  6E12               	movwf	i2___wmul@multiplicand+1,c
 13086  000F06  0E03               	movlw	3
 13087  000F08  6E11               	movwf	i2___wmul@multiplicand,c
 13088  000F0A  ECD8  F028         	call	i2___wmul	;wreg free
 13089  000F0E  C00F  F05A         	movff	?i2___wmul,i2printf@exp
 13090  000F12  C010  F05B         	movff	?i2___wmul+1,i2printf@exp+1
 13091                           
 13092                           ;doprnt.c: 840: exp /= 10;
 13093  000F16  C05A  F007         	movff	i2printf@exp,i2___awdiv@dividend
 13094  000F1A  C05B  F008         	movff	i2printf@exp+1,i2___awdiv@dividend+1
 13095  000F1E  0E00               	movlw	0
 13096  000F20  6E0A               	movwf	i2___awdiv@divisor+1,c
 13097  000F22  0E0A               	movlw	10
 13098  000F24  6E09               	movwf	i2___awdiv@divisor,c
 13099  000F26  EC07  F025         	call	i2___awdiv	;wreg free
 13100  000F2A  C007  F05A         	movff	?i2___awdiv,i2printf@exp
 13101  000F2E  C008  F05B         	movff	?i2___awdiv+1,i2printf@exp+1
 13102                           
 13103                           ;doprnt.c: 841: if(exp < 0)
 13104  000F32  AE5B               	btfss	i2printf@exp+1,7,c
 13105  000F34  D003               	goto	i2l6426
 13106                           
 13107                           ;doprnt.c: 842: exp--;
 13108  000F36  065A               	decf	i2printf@exp,f,c
 13109  000F38  A0D8               	btfss	status,0,c
 13110  000F3A  065B               	decf	i2printf@exp+1,f,c
 13111  000F3C                     i2l6426:
 13112                           
 13113                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 13114  000F3C  505A               	movf	i2printf@exp,w,c
 13115  000F3E  0800               	sublw	0
 13116  000F40  EC00  F00E         	call	i2_scale
 13117  000F44  C024  F056         	movff	?i2_scale,i2printf@tmpval
 13118  000F48  C025  F057         	movff	?i2_scale+1,i2printf@tmpval+1
 13119  000F4C  C026  F058         	movff	?i2_scale+2,i2printf@tmpval+2
 13120                           
 13121                           ;doprnt.c: 847: tmpval.integ *= fval;
 13122  000F50  C056  F015         	movff	i2printf@tmpval,i2___ftmul@f1
 13123  000F54  C057  F016         	movff	i2printf@tmpval+1,i2___ftmul@f1+1
 13124  000F58  C058  F017         	movff	i2printf@tmpval+2,i2___ftmul@f1+2
 13125  000F5C  C060  F018         	movff	i2printf@fval,i2___ftmul@f2
 13126  000F60  C061  F019         	movff	i2printf@fval+1,i2___ftmul@f2+1
 13127  000F64  C062  F01A         	movff	i2printf@fval+2,i2___ftmul@f2+2
 13128  000F68  ECDD  F01F         	call	i2___ftmul	;wreg free
 13129  000F6C  C015  F056         	movff	?i2___ftmul,i2printf@tmpval
 13130  000F70  C016  F057         	movff	?i2___ftmul+1,i2printf@tmpval+1
 13131  000F74  C017  F058         	movff	?i2___ftmul+2,i2printf@tmpval+2
 13132                           
 13133                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 13134  000F78  C056  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 13135  000F7C  C057  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 13136  000F80  C058  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 13137  000F84  0E00               	movlw	0
 13138  000F86  6E04               	movwf	i2___ftge@ff2,c
 13139  000F88  0E80               	movlw	128
 13140  000F8A  6E05               	movwf	i2___ftge@ff2+1,c
 13141  000F8C  0E3F               	movlw	63
 13142  000F8E  6E06               	movwf	i2___ftge@ff2+2,c
 13143  000F90  EC79  F024         	call	i2___ftge	;wreg free
 13144  000F94  B0D8               	btfsc	status,0,c
 13145  000F96  D004               	goto	i2l6434
 13146                           
 13147                           ;doprnt.c: 849: exp--;
 13148  000F98  065A               	decf	i2printf@exp,f,c
 13149  000F9A  A0D8               	btfss	status,0,c
 13150  000F9C  065B               	decf	i2printf@exp+1,f,c
 13151  000F9E  D012               	goto	i2l6438
 13152  000FA0                     i2l6434:
 13153                           
 13154                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 13155  000FA0  C056  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 13156  000FA4  C057  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 13157  000FA8  C058  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 13158  000FAC  0E00               	movlw	0
 13159  000FAE  6E04               	movwf	i2___ftge@ff2,c
 13160  000FB0  0E20               	movlw	32
 13161  000FB2  6E05               	movwf	i2___ftge@ff2+1,c
 13162  000FB4  0E41               	movlw	65
 13163  000FB6  6E06               	movwf	i2___ftge@ff2+2,c
 13164  000FB8  EC79  F024         	call	i2___ftge	;wreg free
 13165  000FBC  A0D8               	btfss	status,0,c
 13166  000FBE  D002               	goto	i2l6438
 13167                           
 13168                           ;doprnt.c: 851: exp++;
 13169  000FC0  4A5A               	infsnz	i2printf@exp,f,c
 13170  000FC2  2A5B               	incf	i2printf@exp+1,f,c
 13171  000FC4                     i2l6438:
 13172                           
 13173                           ;doprnt.c: 852: }
 13174                           ;doprnt.c: 1112: if(prec <= 12)
 13175  000FC4  BE55               	btfsc	i2printf@prec+1,7,c
 13176  000FC6  D006               	goto	i2l6440
 13177  000FC8  5055               	movf	i2printf@prec+1,w,c
 13178  000FCA  E11B               	bnz	i2l6442
 13179  000FCC  0E0D               	movlw	13
 13180  000FCE  5C54               	subwf	i2printf@prec,w,c
 13181  000FD0  B0D8               	btfsc	status,0,c
 13182  000FD2  D017               	goto	i2l6442
 13183  000FD4                     i2l6440:
 13184                           
 13185                           ;doprnt.c: 1113: fval += fround(prec);
 13186  000FD4  C060  F02E         	movff	i2printf@fval,i2___ftadd@f1
 13187  000FD8  C061  F02F         	movff	i2printf@fval+1,i2___ftadd@f1+1
 13188  000FDC  C062  F030         	movff	i2printf@fval+2,i2___ftadd@f1+2
 13189  000FE0  5054               	movf	i2printf@prec,w,c
 13190  000FE2  EC5F  F014         	call	i2_fround
 13191  000FE6  C024  F031         	movff	?i2_fround,i2___ftadd@f2
 13192  000FEA  C025  F032         	movff	?i2_fround+1,i2___ftadd@f2+1
 13193  000FEE  C026  F033         	movff	?i2_fround+2,i2___ftadd@f2+2
 13194  000FF2  EC82  F015         	call	i2___ftadd	;wreg free
 13195  000FF6  C02E  F060         	movff	?i2___ftadd,i2printf@fval
 13196  000FFA  C02F  F061         	movff	?i2___ftadd+1,i2printf@fval+1
 13197  000FFE  C030  F062         	movff	?i2___ftadd+2,i2printf@fval+2
 13198  001002                     i2l6442:
 13199                           
 13200                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 13201  001002  BE5B               	btfsc	i2printf@exp+1,7,c
 13202  001004  D006               	goto	i2l6444
 13203  001006  505B               	movf	i2printf@exp+1,w,c
 13204  001008  E11E               	bnz	i2l6450
 13205  00100A  0E0A               	movlw	10
 13206  00100C  5C5A               	subwf	i2printf@exp,w,c
 13207  00100E  B0D8               	btfsc	status,0,c
 13208  001010  D01A               	goto	i2l6450
 13209  001012                     i2l6444:
 13210  001012  5060               	movf	i2printf@fval,w,c
 13211  001014  1061               	iorwf	i2printf@fval+1,w,c
 13212  001016  1062               	iorwf	i2printf@fval+2,w,c
 13213  001018  B4D8               	btfsc	status,2,c
 13214  00101A  D051               	goto	i2l6464
 13215  00101C  C060  F02B         	movff	i2printf@fval,i2___fttol@f1
 13216  001020  C061  F02C         	movff	i2printf@fval+1,i2___fttol@f1+1
 13217  001024  C062  F02D         	movff	i2printf@fval+2,i2___fttol@f1+2
 13218  001028  EC57  F020         	call	i2___fttol	;wreg free
 13219  00102C  502B               	movf	?i2___fttol,w,c
 13220  00102E  102C               	iorwf	?i2___fttol+1,w,c
 13221  001030  102D               	iorwf	?i2___fttol+2,w,c
 13222  001032  102E               	iorwf	?i2___fttol+3,w,c
 13223  001034  B4D8               	btfsc	status,2,c
 13224  001036  BE5B               	btfsc	i2printf@exp+1,7,c
 13225  001038  D042               	goto	i2l6464
 13226  00103A  505B               	movf	i2printf@exp+1,w,c
 13227  00103C  E104               	bnz	i2l6450
 13228  00103E  0E02               	movlw	2
 13229  001040  5C5A               	subwf	i2printf@exp,w,c
 13230  001042  A0D8               	btfss	status,0,c
 13231  001044  D03C               	goto	i2l6464
 13232  001046                     i2l6450:
 13233                           
 13234                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 13235  001046  C056  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 13236  00104A  C057  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 13237  00104E  C058  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 13238  001052  0E70               	movlw	112
 13239  001054  6E04               	movwf	i2___ftge@ff2,c
 13240  001056  0E89               	movlw	137
 13241  001058  6E05               	movwf	i2___ftge@ff2+1,c
 13242  00105A  0E40               	movlw	64
 13243  00105C  6E06               	movwf	i2___ftge@ff2+2,c
 13244  00105E  EC79  F024         	call	i2___ftge	;wreg free
 13245  001062  B0D8               	btfsc	status,0,c
 13246  001064  D002               	goto	i2l6454
 13247                           
 13248                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 13249  001066  0EF7               	movlw	247
 13250  001068  D001               	goto	L8
 13251  00106A                     i2l6454:
 13252                           
 13253                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 13254  00106A  0EF8               	movlw	248
 13255  00106C                     L8:
 13256  00106C  265A               	addwf	i2printf@exp,f,c
 13257  00106E  0EFF               	movlw	255
 13258  001070  225B               	addwfc	i2printf@exp+1,f,c
 13259                           
 13260                           ;doprnt.c: 1124: }
 13261                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 13262  001072  505A               	movf	i2printf@exp,w,c
 13263  001074  EC00  F00E         	call	i2_scale
 13264  001078  C024  F056         	movff	?i2_scale,i2printf@tmpval
 13265  00107C  C025  F057         	movff	?i2_scale+1,i2printf@tmpval+1
 13266  001080  C026  F058         	movff	?i2_scale+2,i2printf@tmpval+2
 13267                           
 13268                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 13269  001084  C060  F001         	movff	i2printf@fval,i2__tdiv_to_l_@f1
 13270  001088  C061  F002         	movff	i2printf@fval+1,i2__tdiv_to_l_@f1+1
 13271  00108C  C062  F003         	movff	i2printf@fval+2,i2__tdiv_to_l_@f1+2
 13272  001090  C056  F004         	movff	i2printf@tmpval,i2__tdiv_to_l_@f2
 13273  001094  C057  F005         	movff	i2printf@tmpval+1,i2__tdiv_to_l_@f2+1
 13274  001098  C058  F006         	movff	i2printf@tmpval+2,i2__tdiv_to_l_@f2+2
 13275  00109C  EC06  F01C         	call	i2__tdiv_to_l_	;wreg free
 13276  0010A0  C001  F05C         	movff	?i2__tdiv_to_l_,i2printf@val
 13277  0010A4  C002  F05D         	movff	?i2__tdiv_to_l_+1,i2printf@val+1
 13278  0010A8  C003  F05E         	movff	?i2__tdiv_to_l_+2,i2printf@val+2
 13279  0010AC  C004  F05F         	movff	?i2__tdiv_to_l_+3,i2printf@val+3
 13280                           
 13281                           ;doprnt.c: 1129: fval = 0.0;
 13282  0010B0  0E00               	movlw	0
 13283  0010B2  6E60               	movwf	i2printf@fval,c
 13284  0010B4  0E00               	movlw	0
 13285  0010B6  6E61               	movwf	i2printf@fval+1,c
 13286  0010B8  0E00               	movlw	0
 13287  0010BA  6E62               	movwf	i2printf@fval+2,c
 13288                           
 13289                           ;doprnt.c: 1130: } else {
 13290  0010BC  D032               	goto	i2l6468
 13291  0010BE                     i2l6464:
 13292                           
 13293                           ;doprnt.c: 1131: val = (unsigned long)fval;
 13294  0010BE  C060  F02B         	movff	i2printf@fval,i2___fttol@f1
 13295  0010C2  C061  F02C         	movff	i2printf@fval+1,i2___fttol@f1+1
 13296  0010C6  C062  F02D         	movff	i2printf@fval+2,i2___fttol@f1+2
 13297  0010CA  EC57  F020         	call	i2___fttol	;wreg free
 13298  0010CE  C02B  F05C         	movff	?i2___fttol,i2printf@val
 13299  0010D2  C02C  F05D         	movff	?i2___fttol+1,i2printf@val+1
 13300  0010D6  C02D  F05E         	movff	?i2___fttol+2,i2printf@val+2
 13301  0010DA  C02E  F05F         	movff	?i2___fttol+3,i2printf@val+3
 13302                           
 13303                           ;doprnt.c: 1132: fval -= (double)val;
 13304  0010DE  C060  F03A         	movff	i2printf@fval,i2___ftsub@f1
 13305  0010E2  C061  F03B         	movff	i2printf@fval+1,i2___ftsub@f1+1
 13306  0010E6  C062  F03C         	movff	i2printf@fval+2,i2___ftsub@f1+2
 13307  0010EA  C05C  F009         	movff	i2printf@val,i2___lltoft@c
 13308  0010EE  C05D  F00A         	movff	i2printf@val+1,i2___lltoft@c+1
 13309  0010F2  C05E  F00B         	movff	i2printf@val+2,i2___lltoft@c+2
 13310  0010F6  C05F  F00C         	movff	i2printf@val+3,i2___lltoft@c+3
 13311  0010FA  ECA2  F026         	call	i2___lltoft	;wreg free
 13312  0010FE  C009  F03D         	movff	?i2___lltoft,i2___ftsub@f2
 13313  001102  C00A  F03E         	movff	?i2___lltoft+1,i2___ftsub@f2+1
 13314  001106  C00B  F03F         	movff	?i2___lltoft+2,i2___ftsub@f2+2
 13315  00110A  ECF6  F027         	call	i2___ftsub	;wreg free
 13316  00110E  C03A  F060         	movff	?i2___ftsub,i2printf@fval
 13317  001112  C03B  F061         	movff	?i2___ftsub+1,i2printf@fval+1
 13318  001116  C03C  F062         	movff	?i2___ftsub+2,i2printf@fval+2
 13319                           
 13320                           ;doprnt.c: 1133: exp = 0;
 13321  00111A  0E00               	movlw	0
 13322  00111C  6E5B               	movwf	i2printf@exp+1,c
 13323  00111E  0E00               	movlw	0
 13324  001120  6E5A               	movwf	i2printf@exp,c
 13325  001122                     i2l6468:
 13326                           
 13327                           ;doprnt.c: 1134: }
 13328                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 13329  001122  0E01               	movlw	1
 13330  001124  6E67               	movwf	i2printf@c,c
 13331  001126                     i2l6470:
 13332  001126  0E0A               	movlw	10
 13333  001128  1867               	xorwf	i2printf@c,w,c
 13334  00112A  B4D8               	btfsc	status,2,c
 13335  00112C  D018               	goto	i2l6482
 13336                           
 13337                           ;doprnt.c: 1137: if(val < dpowers[c])
 13338  00112E  5067               	movf	i2printf@c,w,c
 13339  001130  0D04               	mullw	4
 13340  001132  0E31               	movlw	low _dpowers
 13341  001134  24F3               	addwf	prodl,w,c
 13342  001136  6EF6               	movwf	tblptrl,c
 13343  001138  0EFE               	movlw	high _dpowers
 13344  00113A  20F4               	addwfc	prodh,w,c
 13345  00113C  6EF7               	movwf	tblptrh,c
 13346  00113E                     	if	0	;There are less than 3 active tblptr bytes
 13347  00113E                     	endif
 13348  00113E  0009               	tblrd		*+
 13349  001140  50F5               	movf	tablat,w,c
 13350  001142  5C5C               	subwf	i2printf@val,w,c
 13351  001144  0009               	tblrd		*+
 13352  001146  50F5               	movf	tablat,w,c
 13353  001148  585D               	subwfb	i2printf@val+1,w,c
 13354  00114A  0009               	tblrd		*+
 13355  00114C  50F5               	movf	tablat,w,c
 13356  00114E  585E               	subwfb	i2printf@val+2,w,c
 13357  001150  0009               	tblrd		*+
 13358  001152  50F5               	movf	tablat,w,c
 13359  001154  585F               	subwfb	i2printf@val+3,w,c
 13360  001156  A0D8               	btfss	status,0,c
 13361  001158  D002               	goto	i2l6482
 13362                           
 13363                           ;doprnt.c: 1138: break;
 13364  00115A  2A67               	incf	i2printf@c,f,c
 13365  00115C  D7E4               	goto	i2l6470
 13366  00115E                     i2l6482:
 13367                           
 13368                           ;doprnt.c: 1142: width -= prec + c + exp;
 13369  00115E  C067  F044         	movff	i2printf@c,??i2_printf
 13370  001162  6A45               	clrf	(??i2_printf+1)& (0+255),c
 13371  001164  BE44               	btfsc	??i2_printf& (0+255),7,c
 13372  001166  0645               	decf	(??i2_printf+1)& (0+255),f,c
 13373  001168  5054               	movf	i2printf@prec,w,c
 13374  00116A  2644               	addwf	??i2_printf,f,c
 13375  00116C  5055               	movf	i2printf@prec+1,w,c
 13376  00116E  2245               	addwfc	??i2_printf+1,f,c
 13377  001170  505A               	movf	i2printf@exp,w,c
 13378  001172  2644               	addwf	??i2_printf,f,c
 13379  001174  505B               	movf	i2printf@exp+1,w,c
 13380  001176  2245               	addwfc	??i2_printf+1,f,c
 13381  001178  5044               	movf	??i2_printf,w,c
 13382  00117A  5E63               	subwf	i2printf@width,f,c
 13383  00117C  5045               	movf	??i2_printf+1,w,c
 13384  00117E  5A64               	subwfb	i2printf@width+1,f,c
 13385                           
 13386                           ;doprnt.c: 1143: if(
 13387                           ;doprnt.c: 1147: prec)
 13388  001180  5054               	movf	i2printf@prec,w,c
 13389  001182  1055               	iorwf	i2printf@prec+1,w,c
 13390  001184  B4D8               	btfsc	status,2,c
 13391  001186  D003               	goto	i2l6486
 13392                           
 13393                           ;doprnt.c: 1148: width--;
 13394  001188  0663               	decf	i2printf@width,f,c
 13395  00118A  A0D8               	btfss	status,0,c
 13396  00118C  0664               	decf	i2printf@width+1,f,c
 13397  00118E                     i2l6486:
 13398                           
 13399                           ;doprnt.c: 1149: if(flag & 0x03)
 13400  00118E  0E03               	movlw	3
 13401  001190  1465               	andwf	i2printf@flag,w,c
 13402  001192  6E44               	movwf	??i2_printf& (0+255),c
 13403  001194  0E00               	movlw	0
 13404  001196  1466               	andwf	i2printf@flag+1,w,c
 13405  001198  6E45               	movwf	(??i2_printf+1)& (0+255),c
 13406  00119A  5044               	movf	??i2_printf,w,c
 13407  00119C  1045               	iorwf	??i2_printf+1,w,c
 13408  00119E  B4D8               	btfsc	status,2,c
 13409  0011A0  D003               	goto	i2l6490
 13410                           
 13411                           ;doprnt.c: 1150: width--;
 13412  0011A2  0663               	decf	i2printf@width,f,c
 13413  0011A4  A0D8               	btfss	status,0,c
 13414  0011A6  0664               	decf	i2printf@width+1,f,c
 13415  0011A8                     i2l6490:
 13416                           
 13417                           ;doprnt.c: 1153: if(flag & 0x04) {
 13418  0011A8  A465               	btfss	i2printf@flag,2,c
 13419  0011AA  D022               	goto	i2l6506
 13420                           
 13421                           ;doprnt.c: 1157: if(flag & 0x03)
 13422  0011AC  0E03               	movlw	3
 13423  0011AE  1465               	andwf	i2printf@flag,w,c
 13424  0011B0  6E44               	movwf	??i2_printf& (0+255),c
 13425  0011B2  0E00               	movlw	0
 13426  0011B4  1466               	andwf	i2printf@flag+1,w,c
 13427  0011B6  6E45               	movwf	(??i2_printf+1)& (0+255),c
 13428  0011B8  5044               	movf	??i2_printf,w,c
 13429  0011BA  1045               	iorwf	??i2_printf+1,w,c
 13430  0011BC  B4D8               	btfsc	status,2,c
 13431  0011BE  D00A               	goto	i2l6500
 13432                           
 13433                           ;doprnt.c: 1159: (putch('-') );
 13434  0011C0  0E2D               	movlw	45
 13435  0011C2  ECFD  F028         	call	i2_putch
 13436                           
 13437                           ;doprnt.c: 1168: while(width > 0) {
 13438  0011C6  D006               	goto	i2l6500
 13439  0011C8                     i2l6496:
 13440                           
 13441                           ;doprnt.c: 1169: (putch('0') );
 13442  0011C8  0E30               	movlw	48
 13443  0011CA  ECFD  F028         	call	i2_putch
 13444                           
 13445                           ;doprnt.c: 1170: width--;
 13446  0011CE  0663               	decf	i2printf@width,f,c
 13447  0011D0  A0D8               	btfss	status,0,c
 13448  0011D2  0664               	decf	i2printf@width+1,f,c
 13449  0011D4                     i2l6500:
 13450  0011D4  BE64               	btfsc	i2printf@width+1,7,c
 13451  0011D6  D065               	goto	i2l6518
 13452  0011D8  5064               	movf	i2printf@width+1,w,c
 13453  0011DA  E1F6               	bnz	i2l6496
 13454  0011DC  0463               	decf	i2printf@width,w,c
 13455  0011DE  A0D8               	btfss	status,0,c
 13456  0011E0  D060               	goto	i2l6518
 13457  0011E2  D7F2               	goto	i2l6496
 13458  0011E4                     i2l6502:
 13459                           
 13460                           ;doprnt.c: 1181: (putch(' ') );
 13461  0011E4  0E20               	movlw	32
 13462  0011E6  ECFD  F028         	call	i2_putch
 13463                           
 13464                           ;doprnt.c: 1182: width--;
 13465  0011EA  0663               	decf	i2printf@width,f,c
 13466  0011EC  A0D8               	btfss	status,0,c
 13467  0011EE  0664               	decf	i2printf@width+1,f,c
 13468  0011F0                     i2l6506:
 13469  0011F0  BE64               	btfsc	i2printf@width+1,7,c
 13470  0011F2  D005               	goto	i2l6508
 13471  0011F4  5064               	movf	i2printf@width+1,w,c
 13472  0011F6  E1F6               	bnz	i2l6502
 13473  0011F8  0463               	decf	i2printf@width,w,c
 13474  0011FA  B0D8               	btfsc	status,0,c
 13475  0011FC  D7F3               	goto	i2l6502
 13476  0011FE                     i2l6508:
 13477                           
 13478                           ;doprnt.c: 1183: }
 13479                           ;doprnt.c: 1188: if(flag & 0x03)
 13480  0011FE  0E03               	movlw	3
 13481  001200  1465               	andwf	i2printf@flag,w,c
 13482  001202  6E44               	movwf	??i2_printf& (0+255),c
 13483  001204  0E00               	movlw	0
 13484  001206  1466               	andwf	i2printf@flag+1,w,c
 13485  001208  6E45               	movwf	(??i2_printf+1)& (0+255),c
 13486  00120A  5044               	movf	??i2_printf,w,c
 13487  00120C  1045               	iorwf	??i2_printf+1,w,c
 13488  00120E  B4D8               	btfsc	status,2,c
 13489  001210  D048               	goto	i2l6518
 13490                           
 13491                           ;doprnt.c: 1190: (putch('-') );
 13492  001212  0E2D               	movlw	45
 13493  001214  ECFD  F028         	call	i2_putch
 13494                           
 13495                           ;doprnt.c: 1195: }
 13496                           ;doprnt.c: 1196: while(c--) {
 13497  001218  D044               	goto	i2l6518
 13498  00121A                     i2l6512:
 13499                           
 13500                           ;doprnt.c: 1200: {
 13501                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 13502  00121A  C05C  F001         	movff	i2printf@val,i2___lldiv@dividend
 13503  00121E  C05D  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 13504  001222  C05E  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 13505  001226  C05F  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 13506  00122A  5067               	movf	i2printf@c,w,c
 13507  00122C  0D04               	mullw	4
 13508  00122E  0E31               	movlw	low _dpowers
 13509  001230  24F3               	addwf	prodl,w,c
 13510  001232  6EF6               	movwf	tblptrl,c
 13511  001234  0EFE               	movlw	high _dpowers
 13512  001236  20F4               	addwfc	prodh,w,c
 13513  001238  6EF7               	movwf	tblptrh,c
 13514  00123A                     	if	0	;There are less than 3 active tblptr bytes
 13515  00123A                     	endif
 13516  00123A  0009               	tblrd		*+
 13517  00123C  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 13518  001240  0009               	tblrd		*+
 13519  001242  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 13520  001246  0009               	tblrd		*+
 13521  001248  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 13522  00124C  000A               	tblrd		*-
 13523  00124E  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 13524  001252  EC49  F025         	call	i2___lldiv	;wreg free
 13525  001256  C001  F056         	movff	?i2___lldiv,i2printf@tmpval
 13526  00125A  C002  F057         	movff	?i2___lldiv+1,i2printf@tmpval+1
 13527  00125E  C003  F058         	movff	?i2___lldiv+2,i2printf@tmpval+2
 13528  001262  C004  F059         	movff	?i2___lldiv+3,i2printf@tmpval+3
 13529                           
 13530                           ;doprnt.c: 1202: tmpval.vd %= 10;
 13531  001266  C056  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 13532  00126A  C057  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 13533  00126E  C058  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 13534  001272  C059  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 13535  001276  0E0A               	movlw	10
 13536  001278  6E12               	movwf	i2___llmod@divisor,c
 13537  00127A  0E00               	movlw	0
 13538  00127C  6E13               	movwf	i2___llmod@divisor+1,c
 13539  00127E  0E00               	movlw	0
 13540  001280  6E14               	movwf	i2___llmod@divisor+2,c
 13541  001282  0E00               	movlw	0
 13542  001284  6E15               	movwf	i2___llmod@divisor+3,c
 13543  001286  EC3C  F026         	call	i2___llmod	;wreg free
 13544  00128A  C00E  F056         	movff	?i2___llmod,i2printf@tmpval
 13545  00128E  C00F  F057         	movff	?i2___llmod+1,i2printf@tmpval+1
 13546  001292  C010  F058         	movff	?i2___llmod+2,i2printf@tmpval+2
 13547  001296  C011  F059         	movff	?i2___llmod+3,i2printf@tmpval+3
 13548                           
 13549                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 13550  00129A  5056               	movf	i2printf@tmpval,w,c
 13551  00129C  0F30               	addlw	48
 13552  00129E  ECFD  F028         	call	i2_putch
 13553  0012A2                     i2l6518:
 13554  0012A2  0667               	decf	i2printf@c,f,c
 13555  0012A4  2867               	incf	i2printf@c,w,c
 13556  0012A6  B4D8               	btfsc	status,2,c
 13557  0012A8  D007               	goto	i2l6524
 13558  0012AA  D7B7               	goto	i2l6512
 13559  0012AC                     i2l6520:
 13560                           
 13561                           ;doprnt.c: 1208: (putch('0') );
 13562  0012AC  0E30               	movlw	48
 13563  0012AE  ECFD  F028         	call	i2_putch
 13564                           
 13565                           ;doprnt.c: 1209: exp--;
 13566  0012B2  065A               	decf	i2printf@exp,f,c
 13567  0012B4  A0D8               	btfss	status,0,c
 13568  0012B6  065B               	decf	i2printf@exp+1,f,c
 13569  0012B8                     i2l6524:
 13570  0012B8  BE5B               	btfsc	i2printf@exp+1,7,c
 13571  0012BA  D005               	goto	i2l6526
 13572  0012BC  505B               	movf	i2printf@exp+1,w,c
 13573  0012BE  E1F6               	bnz	i2l6520
 13574  0012C0  045A               	decf	i2printf@exp,w,c
 13575  0012C2  B0D8               	btfsc	status,0,c
 13576  0012C4  D7F3               	goto	i2l6520
 13577  0012C6                     i2l6526:
 13578                           
 13579                           ;doprnt.c: 1210: }
 13580                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 13581  0012C6  BE55               	btfsc	i2printf@prec+1,7,c
 13582  0012C8  D009               	goto	i2l734
 13583  0012CA  5055               	movf	i2printf@prec+1,w,c
 13584  0012CC  E104               	bnz	i2u722_40
 13585  0012CE  0E09               	movlw	9
 13586  0012D0  5C54               	subwf	i2printf@prec,w,c
 13587  0012D2  A0D8               	btfss	status,0,c
 13588  0012D4  D003               	goto	i2l734
 13589  0012D6                     i2u722_40:
 13590                           
 13591                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 13592  0012D6  0E08               	movlw	8
 13593  0012D8  6E67               	movwf	i2printf@c,c
 13594  0012DA  D002               	goto	i2l6530
 13595  0012DC                     i2l734:
 13596                           
 13597                           ;doprnt.c: 1213: else
 13598                           ;doprnt.c: 1214: c = prec;
 13599  0012DC  C054  F067         	movff	i2printf@prec,i2printf@c
 13600  0012E0                     i2l6530:
 13601                           
 13602                           ;doprnt.c: 1215: prec -= c;
 13603  0012E0  5067               	movf	i2printf@c,w,c
 13604  0012E2  5E54               	subwf	i2printf@prec,f,c
 13605  0012E4  0E00               	movlw	0
 13606  0012E6  BE67               	btfsc	i2printf@c,7,c
 13607  0012E8  0EFF               	movlw	255
 13608  0012EA  5A55               	subwfb	i2printf@prec+1,f,c
 13609                           
 13610                           ;doprnt.c: 1219: if(c)
 13611  0012EC  5067               	movf	i2printf@c,w,c
 13612  0012EE  B4D8               	btfsc	status,2,c
 13613  0012F0  D003               	goto	i2l6536
 13614                           
 13615                           ;doprnt.c: 1221: (putch('.') );
 13616  0012F2  0E2E               	movlw	46
 13617  0012F4  ECFD  F028         	call	i2_putch
 13618  0012F8                     i2l6536:
 13619                           
 13620                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 13621  0012F8  5067               	movf	i2printf@c,w,c
 13622  0012FA  EC00  F00E         	call	i2_scale
 13623  0012FE  C024  F04A         	movff	?i2_scale,i2_printf$1528
 13624  001302  C025  F04B         	movff	?i2_scale+1,i2_printf$1528+1
 13625  001306  C026  F04C         	movff	?i2_scale+2,i2_printf$1528+2
 13626                           
 13627                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 13628  00130A  C060  F018         	movff	i2printf@fval,i2___ftmul@f2
 13629  00130E  C061  F019         	movff	i2printf@fval+1,i2___ftmul@f2+1
 13630  001312  C062  F01A         	movff	i2printf@fval+2,i2___ftmul@f2+2
 13631  001316  C04A  F015         	movff	i2_printf$1528,i2___ftmul@f1
 13632  00131A  C04B  F016         	movff	i2_printf$1528+1,i2___ftmul@f1+1
 13633  00131E  C04C  F017         	movff	i2_printf$1528+2,i2___ftmul@f1+2
 13634  001322  ECDD  F01F         	call	i2___ftmul	;wreg free
 13635  001326  C015  F02B         	movff	?i2___ftmul,i2___fttol@f1
 13636  00132A  C016  F02C         	movff	?i2___ftmul+1,i2___fttol@f1+1
 13637  00132E  C017  F02D         	movff	?i2___ftmul+2,i2___fttol@f1+2
 13638  001332  EC57  F020         	call	i2___fttol	;wreg free
 13639  001336  C02B  F05C         	movff	?i2___fttol,i2printf@val
 13640  00133A  C02C  F05D         	movff	?i2___fttol+1,i2printf@val+1
 13641  00133E  C02D  F05E         	movff	?i2___fttol+2,i2printf@val+2
 13642  001342  C02E  F05F         	movff	?i2___fttol+3,i2printf@val+3
 13643                           
 13644                           ;doprnt.c: 1228: while(c--) {
 13645  001346  D06A               	goto	i2l6546
 13646  001348                     i2l6540:
 13647                           
 13648                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 13649  001348  C05C  F001         	movff	i2printf@val,i2___lldiv@dividend
 13650  00134C  C05D  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 13651  001350  C05E  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 13652  001354  C05F  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 13653  001358  5067               	movf	i2printf@c,w,c
 13654  00135A  0D04               	mullw	4
 13655  00135C  0E31               	movlw	low _dpowers
 13656  00135E  24F3               	addwf	prodl,w,c
 13657  001360  6EF6               	movwf	tblptrl,c
 13658  001362  0EFE               	movlw	high _dpowers
 13659  001364  20F4               	addwfc	prodh,w,c
 13660  001366  6EF7               	movwf	tblptrh,c
 13661  001368                     	if	0	;There are less than 3 active tblptr bytes
 13662  001368                     	endif
 13663  001368  0009               	tblrd		*+
 13664  00136A  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 13665  00136E  0009               	tblrd		*+
 13666  001370  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 13667  001374  0009               	tblrd		*+
 13668  001376  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 13669  00137A  000A               	tblrd		*-
 13670  00137C  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 13671  001380  EC49  F025         	call	i2___lldiv	;wreg free
 13672  001384  C001  F056         	movff	?i2___lldiv,i2printf@tmpval
 13673  001388  C002  F057         	movff	?i2___lldiv+1,i2printf@tmpval+1
 13674  00138C  C003  F058         	movff	?i2___lldiv+2,i2printf@tmpval+2
 13675  001390  C004  F059         	movff	?i2___lldiv+3,i2printf@tmpval+3
 13676                           
 13677                           ;doprnt.c: 1230: tmpval.vd %= 10;
 13678  001394  C056  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 13679  001398  C057  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 13680  00139C  C058  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 13681  0013A0  C059  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 13682  0013A4  0E0A               	movlw	10
 13683  0013A6  6E12               	movwf	i2___llmod@divisor,c
 13684  0013A8  0E00               	movlw	0
 13685  0013AA  6E13               	movwf	i2___llmod@divisor+1,c
 13686  0013AC  0E00               	movlw	0
 13687  0013AE  6E14               	movwf	i2___llmod@divisor+2,c
 13688  0013B0  0E00               	movlw	0
 13689  0013B2  6E15               	movwf	i2___llmod@divisor+3,c
 13690  0013B4  EC3C  F026         	call	i2___llmod	;wreg free
 13691  0013B8  C00E  F056         	movff	?i2___llmod,i2printf@tmpval
 13692  0013BC  C00F  F057         	movff	?i2___llmod+1,i2printf@tmpval+1
 13693  0013C0  C010  F058         	movff	?i2___llmod+2,i2printf@tmpval+2
 13694  0013C4  C011  F059         	movff	?i2___llmod+3,i2printf@tmpval+3
 13695                           
 13696                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 13697  0013C8  5056               	movf	i2printf@tmpval,w,c
 13698  0013CA  0F30               	addlw	48
 13699  0013CC  ECFD  F028         	call	i2_putch
 13700                           
 13701                           ;doprnt.c: 1232: val %= dpowers[c];
 13702  0013D0  C05C  F00E         	movff	i2printf@val,i2___llmod@dividend
 13703  0013D4  C05D  F00F         	movff	i2printf@val+1,i2___llmod@dividend+1
 13704  0013D8  C05E  F010         	movff	i2printf@val+2,i2___llmod@dividend+2
 13705  0013DC  C05F  F011         	movff	i2printf@val+3,i2___llmod@dividend+3
 13706  0013E0  5067               	movf	i2printf@c,w,c
 13707  0013E2  0D04               	mullw	4
 13708  0013E4  0E31               	movlw	low _dpowers
 13709  0013E6  24F3               	addwf	prodl,w,c
 13710  0013E8  6EF6               	movwf	tblptrl,c
 13711  0013EA  0EFE               	movlw	high _dpowers
 13712  0013EC  20F4               	addwfc	prodh,w,c
 13713  0013EE  6EF7               	movwf	tblptrh,c
 13714  0013F0                     	if	0	;There are less than 3 active tblptr bytes
 13715  0013F0                     	endif
 13716  0013F0  0009               	tblrd		*+
 13717  0013F2  CFF5 F012          	movff	tablat,i2___llmod@divisor
 13718  0013F6  0009               	tblrd		*+
 13719  0013F8  CFF5 F013          	movff	tablat,i2___llmod@divisor+1
 13720  0013FC  0009               	tblrd		*+
 13721  0013FE  CFF5 F014          	movff	tablat,i2___llmod@divisor+2
 13722  001402  000A               	tblrd		*-
 13723  001404  CFF5 F015          	movff	tablat,i2___llmod@divisor+3
 13724  001408  EC3C  F026         	call	i2___llmod	;wreg free
 13725  00140C  C00E  F05C         	movff	?i2___llmod,i2printf@val
 13726  001410  C00F  F05D         	movff	?i2___llmod+1,i2printf@val+1
 13727  001414  C010  F05E         	movff	?i2___llmod+2,i2printf@val+2
 13728  001418  C011  F05F         	movff	?i2___llmod+3,i2printf@val+3
 13729  00141C                     i2l6546:
 13730  00141C  0667               	decf	i2printf@c,f,c
 13731  00141E  2867               	incf	i2printf@c,w,c
 13732  001420  B4D8               	btfsc	status,2,c
 13733  001422  D007               	goto	i2l6552
 13734  001424  D791               	goto	i2l6540
 13735  001426                     i2l6548:
 13736                           
 13737                           ;doprnt.c: 1236: (putch('0') );
 13738  001426  0E30               	movlw	48
 13739  001428  ECFD  F028         	call	i2_putch
 13740                           
 13741                           ;doprnt.c: 1237: prec--;
 13742  00142C  0654               	decf	i2printf@prec,f,c
 13743  00142E  A0D8               	btfss	status,0,c
 13744  001430  0655               	decf	i2printf@prec+1,f,c
 13745  001432                     i2l6552:
 13746  001432  5054               	movf	i2printf@prec,w,c
 13747  001434  1055               	iorwf	i2printf@prec+1,w,c
 13748  001436  B4D8               	btfsc	status,2,c
 13749  001438  D17E               	goto	i2l6660
 13750  00143A  D7F5               	goto	i2l6548
 13751  00143C                     i2l695:
 13752                           
 13753                           ;doprnt.c: 1246: }
 13754                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 13755  00143C  BE65               	btfsc	i2printf@flag,7,c
 13756  00143E  D02E               	goto	i2l743
 13757                           
 13758                           ;doprnt.c: 1253: {
 13759                           ;doprnt.c: 1255: if(flag & 0x10)
 13760  001440  A865               	btfss	i2printf@flag,4,c
 13761  001442  D00E               	goto	i2l6560
 13762                           
 13763                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
 13764  001444  C052  FFD9         	movff	i2printf@ap,fsr2l
 13765  001448  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 13766  00144C  CFDE F05C          	movff	postinc2,i2printf@val
 13767  001450  CFDE F05D          	movff	postinc2,i2printf@val+1
 13768  001454  CFDE F05E          	movff	postinc2,i2printf@val+2
 13769  001458  CFDE F05F          	movff	postinc2,i2printf@val+3
 13770  00145C  0E04               	movlw	4
 13771  00145E  D00E               	goto	L9
 13772  001460                     i2l6560:
 13773                           
 13774                           ;doprnt.c: 1257: else
 13775                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 13776  001460  C052  FFD9         	movff	i2printf@ap,fsr2l
 13777  001464  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 13778  001468  CFDE F05C          	movff	postinc2,i2printf@val
 13779  00146C  CFDD F05D          	movff	postdec2,i2printf@val+1
 13780  001470  0E00               	movlw	0
 13781  001472  BE5D               	btfsc	i2printf@val+1,7,c
 13782  001474  0EFF               	movlw	-1
 13783  001476  6E5E               	movwf	i2printf@val+2,c
 13784  001478  6E5F               	movwf	i2printf@val+3,c
 13785  00147A  0E02               	movlw	2
 13786  00147C                     L9:
 13787  00147C  2652               	addwf	i2printf@ap,f,c
 13788  00147E  0E00               	movlw	0
 13789  001480  2253               	addwfc	i2printf@ap+1,f,c
 13790                           
 13791                           ;doprnt.c: 1261: if((long)val < 0) {
 13792  001482  AE5F               	btfss	i2printf@val+3,7,c
 13793  001484  D06A               	goto	i2l6608
 13794                           
 13795                           ;doprnt.c: 1262: flag |= 0x03;
 13796  001486  0E03               	movlw	3
 13797  001488  1265               	iorwf	i2printf@flag,f,c
 13798                           
 13799                           ;doprnt.c: 1263: val = -val;
 13800  00148A  1E5F               	comf	i2printf@val+3,f,c
 13801  00148C  1E5E               	comf	i2printf@val+2,f,c
 13802  00148E  1E5D               	comf	i2printf@val+1,f,c
 13803  001490  6C5C               	negf	i2printf@val,c
 13804  001492  0E00               	movlw	0
 13805  001494  225D               	addwfc	i2printf@val+1,f,c
 13806  001496  225E               	addwfc	i2printf@val+2,f,c
 13807  001498  225F               	addwfc	i2printf@val+3,f,c
 13808                           
 13809                           ;doprnt.c: 1264: }
 13810                           ;doprnt.c: 1266: }
 13811  00149A  D05F               	goto	i2l6608
 13812  00149C                     i2l743:
 13813                           
 13814                           ;doprnt.c: 1268: else
 13815                           ;doprnt.c: 1273: {
 13816                           ;doprnt.c: 1281: if(flag & 0x10)
 13817  00149C  A865               	btfss	i2printf@flag,4,c
 13818  00149E  D00E               	goto	i2l6574
 13819                           
 13820                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
 13821  0014A0  C052  FFD9         	movff	i2printf@ap,fsr2l
 13822  0014A4  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 13823  0014A8  CFDE F05C          	movff	postinc2,i2printf@val
 13824  0014AC  CFDE F05D          	movff	postinc2,i2printf@val+1
 13825  0014B0  CFDE F05E          	movff	postinc2,i2printf@val+2
 13826  0014B4  CFDE F05F          	movff	postinc2,i2printf@val+3
 13827  0014B8  0E04               	movlw	4
 13828  0014BA  D00F               	goto	L10
 13829  0014BC                     i2l6574:
 13830                           
 13831                           ;doprnt.c: 1283: else
 13832                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13833  0014BC  C052  FFD9         	movff	i2printf@ap,fsr2l
 13834  0014C0  C053  FFDA         	movff	i2printf@ap+1,fsr2h
 13835  0014C4  CFDE F044          	movff	postinc2,??i2_printf
 13836  0014C8  CFDD F045          	movff	postdec2,??i2_printf+1
 13837  0014CC  C044  F05C         	movff	??i2_printf,i2printf@val
 13838  0014D0  C045  F05D         	movff	??i2_printf+1,i2printf@val+1
 13839  0014D4  6A5E               	clrf	i2printf@val+2,c
 13840  0014D6  6A5F               	clrf	i2printf@val+3,c
 13841  0014D8  0E02               	movlw	2
 13842  0014DA                     L10:
 13843  0014DA  2652               	addwf	i2printf@ap,f,c
 13844  0014DC  0E00               	movlw	0
 13845  0014DE  2253               	addwfc	i2printf@ap+1,f,c
 13846                           
 13847                           ;doprnt.c: 1287: }
 13848                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 13849  0014E0  D03C               	goto	i2l6608
 13850  0014E2                     i2l6578:
 13851                           
 13852                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13853  0014E2  0E01               	movlw	1
 13854  0014E4  6E67               	movwf	i2printf@c,c
 13855  0014E6                     i2l6580:
 13856  0014E6  0E0A               	movlw	10
 13857  0014E8  1867               	xorwf	i2printf@c,w,c
 13858  0014EA  B4D8               	btfsc	status,2,c
 13859  0014EC  D03E               	goto	i2l6610
 13860                           
 13861                           ;doprnt.c: 1306: if(val < dpowers[c])
 13862  0014EE  5067               	movf	i2printf@c,w,c
 13863  0014F0  0D04               	mullw	4
 13864  0014F2  0E31               	movlw	low _dpowers
 13865  0014F4  24F3               	addwf	prodl,w,c
 13866  0014F6  6EF6               	movwf	tblptrl,c
 13867  0014F8  0EFE               	movlw	high _dpowers
 13868  0014FA  20F4               	addwfc	prodh,w,c
 13869  0014FC  6EF7               	movwf	tblptrh,c
 13870  0014FE                     	if	0	;There are less than 3 active tblptr bytes
 13871  0014FE                     	endif
 13872  0014FE  0009               	tblrd		*+
 13873  001500  50F5               	movf	tablat,w,c
 13874  001502  5C5C               	subwf	i2printf@val,w,c
 13875  001504  0009               	tblrd		*+
 13876  001506  50F5               	movf	tablat,w,c
 13877  001508  585D               	subwfb	i2printf@val+1,w,c
 13878  00150A  0009               	tblrd		*+
 13879  00150C  50F5               	movf	tablat,w,c
 13880  00150E  585E               	subwfb	i2printf@val+2,w,c
 13881  001510  0009               	tblrd		*+
 13882  001512  50F5               	movf	tablat,w,c
 13883  001514  585F               	subwfb	i2printf@val+3,w,c
 13884  001516  A0D8               	btfss	status,0,c
 13885  001518  D028               	goto	i2l6610
 13886                           
 13887                           ;doprnt.c: 1307: break;
 13888  00151A  2A67               	incf	i2printf@c,f,c
 13889  00151C  D7E4               	goto	i2l6580
 13890  00151E                     i2l6592:
 13891                           
 13892                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 13893  00151E  0E01               	movlw	1
 13894  001520  6E67               	movwf	i2printf@c,c
 13895  001522                     i2l6594:
 13896  001522  0E08               	movlw	8
 13897  001524  1867               	xorwf	i2printf@c,w,c
 13898  001526  B4D8               	btfsc	status,2,c
 13899  001528  D020               	goto	i2l6610
 13900                           
 13901                           ;doprnt.c: 1317: if(val < hexpowers[c])
 13902  00152A  5067               	movf	i2printf@c,w,c
 13903  00152C  0D04               	mullw	4
 13904  00152E  0EA7               	movlw	low _hexpowers
 13905  001530  24F3               	addwf	prodl,w,c
 13906  001532  6EF6               	movwf	tblptrl,c
 13907  001534  0EFE               	movlw	high _hexpowers
 13908  001536  20F4               	addwfc	prodh,w,c
 13909  001538  6EF7               	movwf	tblptrh,c
 13910  00153A                     	if	0	;There are less than 3 active tblptr bytes
 13911  00153A                     	endif
 13912  00153A  0009               	tblrd		*+
 13913  00153C  50F5               	movf	tablat,w,c
 13914  00153E  5C5C               	subwf	i2printf@val,w,c
 13915  001540  0009               	tblrd		*+
 13916  001542  50F5               	movf	tablat,w,c
 13917  001544  585D               	subwfb	i2printf@val+1,w,c
 13918  001546  0009               	tblrd		*+
 13919  001548  50F5               	movf	tablat,w,c
 13920  00154A  585E               	subwfb	i2printf@val+2,w,c
 13921  00154C  0009               	tblrd		*+
 13922  00154E  50F5               	movf	tablat,w,c
 13923  001550  585F               	subwfb	i2printf@val+3,w,c
 13924  001552  A0D8               	btfss	status,0,c
 13925  001554  D00A               	goto	i2l6610
 13926                           
 13927                           ;doprnt.c: 1318: break;
 13928  001556  2A67               	incf	i2printf@c,f,c
 13929  001558  D7E4               	goto	i2l6594
 13930  00155A                     i2l6608:
 13931  00155A  5065               	movf	i2printf@flag,w,c
 13932  00155C  0B80               	andlw	128
 13933                           
 13934                           ; Switch size 1, requested type "space"
 13935                           ; Number of cases is 2, Range of values is 0 to 128
 13936                           ; switch strategies available:
 13937                           ; Name         Instructions Cycles
 13938                           ; simple_byte            7     4 (average)
 13939                           ;	Chosen strategy is simple_byte
 13940  00155E  0A00               	xorlw	0	; case 0
 13941  001560  B4D8               	btfsc	status,2,c
 13942  001562  D7BF               	goto	i2l6578
 13943  001564  0A80               	xorlw	128	; case 128
 13944  001566  B4D8               	btfsc	status,2,c
 13945  001568  D7DA               	goto	i2l6592
 13946  00156A                     i2l6610:
 13947                           
 13948                           ;doprnt.c: 1345: if(width && flag & 0x03)
 13949  00156A  5063               	movf	i2printf@width,w,c
 13950  00156C  1064               	iorwf	i2printf@width+1,w,c
 13951  00156E  B4D8               	btfsc	status,2,c
 13952  001570  D00D               	goto	i2l6616
 13953  001572  0E03               	movlw	3
 13954  001574  1465               	andwf	i2printf@flag,w,c
 13955  001576  6E44               	movwf	??i2_printf& (0+255),c
 13956  001578  0E00               	movlw	0
 13957  00157A  1466               	andwf	i2printf@flag+1,w,c
 13958  00157C  6E45               	movwf	(??i2_printf+1)& (0+255),c
 13959  00157E  5044               	movf	??i2_printf,w,c
 13960  001580  1045               	iorwf	??i2_printf+1,w,c
 13961  001582  B4D8               	btfsc	status,2,c
 13962  001584  D003               	goto	i2l6616
 13963                           
 13964                           ;doprnt.c: 1346: width--;
 13965  001586  0663               	decf	i2printf@width,f,c
 13966  001588  A0D8               	btfss	status,0,c
 13967  00158A  0664               	decf	i2printf@width+1,f,c
 13968  00158C                     i2l6616:
 13969                           
 13970                           ;doprnt.c: 1381: if(width > c)
 13971  00158C  0E80               	movlw	128
 13972  00158E  BE67               	btfsc	i2printf@c,7,c
 13973  001590  0E7F               	movlw	127
 13974  001592  6E44               	movwf	??i2_printf& (0+255),c
 13975  001594  5063               	movf	i2printf@width,w,c
 13976  001596  5C67               	subwf	i2printf@c,w,c
 13977  001598  5064               	movf	i2printf@width+1,w,c
 13978  00159A  0A80               	xorlw	128
 13979  00159C  5844               	subwfb	??i2_printf& (0+255),w,c
 13980  00159E  B0D8               	btfsc	status,0,c
 13981  0015A0  D007               	goto	i2l6620
 13982                           
 13983                           ;doprnt.c: 1382: width -= c;
 13984  0015A2  5067               	movf	i2printf@c,w,c
 13985  0015A4  5E63               	subwf	i2printf@width,f,c
 13986  0015A6  0E00               	movlw	0
 13987  0015A8  BE67               	btfsc	i2printf@c,7,c
 13988  0015AA  0EFF               	movlw	255
 13989  0015AC  5A64               	subwfb	i2printf@width+1,f,c
 13990  0015AE  D004               	goto	i2l6622
 13991  0015B0                     i2l6620:
 13992                           
 13993                           ;doprnt.c: 1383: else
 13994                           ;doprnt.c: 1384: width = 0;
 13995  0015B0  0E00               	movlw	0
 13996  0015B2  6E64               	movwf	i2printf@width+1,c
 13997  0015B4  0E00               	movlw	0
 13998  0015B6  6E63               	movwf	i2printf@width,c
 13999  0015B8                     i2l6622:
 14000                           
 14001                           ;doprnt.c: 1387: if(flag & 0x04) {
 14002  0015B8  A465               	btfss	i2printf@flag,2,c
 14003  0015BA  D018               	goto	i2l6634
 14004                           
 14005                           ;doprnt.c: 1392: if(flag & 0x03)
 14006  0015BC  0E03               	movlw	3
 14007  0015BE  1465               	andwf	i2printf@flag,w,c
 14008  0015C0  6E44               	movwf	??i2_printf& (0+255),c
 14009  0015C2  0E00               	movlw	0
 14010  0015C4  1466               	andwf	i2printf@flag+1,w,c
 14011  0015C6  6E45               	movwf	(??i2_printf+1)& (0+255),c
 14012  0015C8  5044               	movf	??i2_printf,w,c
 14013  0015CA  1045               	iorwf	??i2_printf+1,w,c
 14014  0015CC  B4D8               	btfsc	status,2,c
 14015  0015CE  D003               	goto	i2l6628
 14016                           
 14017                           ;doprnt.c: 1393: (putch('-') );
 14018  0015D0  0E2D               	movlw	45
 14019  0015D2  ECFD  F028         	call	i2_putch
 14020  0015D6                     i2l6628:
 14021                           
 14022                           ;doprnt.c: 1415: if(width)
 14023  0015D6  5063               	movf	i2printf@width,w,c
 14024  0015D8  1064               	iorwf	i2printf@width+1,w,c
 14025  0015DA  B4D8               	btfsc	status,2,c
 14026  0015DC  D022               	goto	i2l6644
 14027                           
 14028                           ;doprnt.c: 1417: (putch('0') );
 14029                           
 14030                           ;doprnt.c: 1416: do
 14031  0015DE  0E30               	movlw	48
 14032  0015E0  ECFD  F028         	call	i2_putch
 14033                           
 14034                           ;doprnt.c: 1418: while(--width);
 14035  0015E4  0663               	decf	i2printf@width,f,c
 14036  0015E6  A0D8               	btfss	status,0,c
 14037  0015E8  0664               	decf	i2printf@width+1,f,c
 14038  0015EA  D7F5               	goto	i2l6628
 14039  0015EC                     i2l6634:
 14040                           
 14041                           ;doprnt.c: 1422: {
 14042                           ;doprnt.c: 1424: if(width
 14043                           ;doprnt.c: 1428: )
 14044  0015EC  5063               	movf	i2printf@width,w,c
 14045  0015EE  1064               	iorwf	i2printf@width+1,w,c
 14046  0015F0  B4D8               	btfsc	status,2,c
 14047  0015F2  D00A               	goto	i2l6640
 14048  0015F4                     i2l6636:
 14049                           
 14050                           ;doprnt.c: 1430: (putch(' ') );
 14051  0015F4  0E20               	movlw	32
 14052  0015F6  ECFD  F028         	call	i2_putch
 14053                           
 14054                           ;doprnt.c: 1431: while(--width);
 14055  0015FA  0663               	decf	i2printf@width,f,c
 14056  0015FC  A0D8               	btfss	status,0,c
 14057  0015FE  0664               	decf	i2printf@width+1,f,c
 14058  001600  5063               	movf	i2printf@width,w,c
 14059  001602  1064               	iorwf	i2printf@width+1,w,c
 14060  001604  A4D8               	btfss	status,2,c
 14061  001606  D7F6               	goto	i2l6636
 14062  001608                     i2l6640:
 14063                           
 14064                           ;doprnt.c: 1438: if(flag & 0x03)
 14065  001608  0E03               	movlw	3
 14066  00160A  1465               	andwf	i2printf@flag,w,c
 14067  00160C  6E44               	movwf	??i2_printf& (0+255),c
 14068  00160E  0E00               	movlw	0
 14069  001610  1466               	andwf	i2printf@flag+1,w,c
 14070  001612  6E45               	movwf	(??i2_printf+1)& (0+255),c
 14071  001614  5044               	movf	??i2_printf,w,c
 14072  001616  1045               	iorwf	??i2_printf+1,w,c
 14073  001618  B4D8               	btfsc	status,2,c
 14074  00161A  D003               	goto	i2l6644
 14075                           
 14076                           ;doprnt.c: 1439: (putch('-') );
 14077  00161C  0E2D               	movlw	45
 14078  00161E  ECFD  F028         	call	i2_putch
 14079  001622                     i2l6644:
 14080                           
 14081                           ;doprnt.c: 1469: }
 14082                           ;doprnt.c: 1472: prec = c;
 14083  001622  5067               	movf	i2printf@c,w,c
 14084  001624  6E54               	movwf	i2printf@prec,c
 14085  001626  6A55               	clrf	i2printf@prec+1,c
 14086  001628  BE54               	btfsc	i2printf@prec,7,c
 14087  00162A  0655               	decf	i2printf@prec+1,f,c
 14088                           
 14089                           ;doprnt.c: 1474: while(prec--) {
 14090  00162C  D07C               	goto	i2l6658
 14091  00162E                     i2l6646:
 14092                           
 14093                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14094  00162E  C054  F044         	movff	i2printf@prec,??i2_printf
 14095  001632  C055  F045         	movff	i2printf@prec+1,??i2_printf+1
 14096  001636  90D8               	bcf	status,0,c
 14097  001638  3644               	rlcf	??i2_printf,f,c
 14098  00163A  3645               	rlcf	??i2_printf+1,f,c
 14099  00163C  90D8               	bcf	status,0,c
 14100  00163E  3644               	rlcf	??i2_printf,f,c
 14101  001640  3645               	rlcf	??i2_printf+1,f,c
 14102  001642  0E31               	movlw	low _dpowers
 14103  001644  2444               	addwf	??i2_printf,w,c
 14104  001646  6EF6               	movwf	tblptrl,c
 14105  001648  0EFE               	movlw	high _dpowers
 14106  00164A  2045               	addwfc	??i2_printf+1,w,c
 14107  00164C  6EF7               	movwf	tblptrh,c
 14108  00164E                     	if	0	;There are less than 3 active tblptr bytes
 14109  00164E                     	endif
 14110  00164E  0009               	tblrd		*+
 14111  001650  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 14112  001654  0009               	tblrd		*+
 14113  001656  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 14114  00165A  0009               	tblrd		*+
 14115  00165C  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 14116  001660  000A               	tblrd		*-
 14117  001662  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 14118  001666  C05C  F001         	movff	i2printf@val,i2___lldiv@dividend
 14119  00166A  C05D  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 14120  00166E  C05E  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 14121  001672  C05F  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 14122  001676  EC49  F025         	call	i2___lldiv	;wreg free
 14123  00167A  C001  F00E         	movff	?i2___lldiv,i2___llmod@dividend
 14124  00167E  C002  F00F         	movff	?i2___lldiv+1,i2___llmod@dividend+1
 14125  001682  C003  F010         	movff	?i2___lldiv+2,i2___llmod@dividend+2
 14126  001686  C004  F011         	movff	?i2___lldiv+3,i2___llmod@dividend+3
 14127  00168A  0E0A               	movlw	10
 14128  00168C  6E12               	movwf	i2___llmod@divisor,c
 14129  00168E  0E00               	movlw	0
 14130  001690  6E13               	movwf	i2___llmod@divisor+1,c
 14131  001692  0E00               	movlw	0
 14132  001694  6E14               	movwf	i2___llmod@divisor+2,c
 14133  001696  0E00               	movlw	0
 14134  001698  6E15               	movwf	i2___llmod@divisor+3,c
 14135  00169A  EC3C  F026         	call	i2___llmod	;wreg free
 14136  00169E  500E               	movf	?i2___llmod,w,c
 14137  0016A0  0F30               	addlw	48
 14138  0016A2  6E67               	movwf	i2printf@c,c
 14139                           
 14140                           ;doprnt.c: 1491: break;
 14141  0016A4  D03D               	goto	i2l6656
 14142  0016A6                     i2l6648:
 14143                           
 14144                           ;doprnt.c: 1499: {
 14145                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 14146  0016A6  C05C  F001         	movff	i2printf@val,i2___lldiv@dividend
 14147  0016AA  C05D  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 14148  0016AE  C05E  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 14149  0016B2  C05F  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 14150  0016B6  C054  F044         	movff	i2printf@prec,??i2_printf
 14151  0016BA  C055  F045         	movff	i2printf@prec+1,??i2_printf+1
 14152  0016BE  90D8               	bcf	status,0,c
 14153  0016C0  3644               	rlcf	??i2_printf,f,c
 14154  0016C2  3645               	rlcf	??i2_printf+1,f,c
 14155  0016C4  90D8               	bcf	status,0,c
 14156  0016C6  3644               	rlcf	??i2_printf,f,c
 14157  0016C8  3645               	rlcf	??i2_printf+1,f,c
 14158  0016CA  0EA7               	movlw	low _hexpowers
 14159  0016CC  2444               	addwf	??i2_printf,w,c
 14160  0016CE  6EF6               	movwf	tblptrl,c
 14161  0016D0  0EFE               	movlw	high _hexpowers
 14162  0016D2  2045               	addwfc	??i2_printf+1,w,c
 14163  0016D4  6EF7               	movwf	tblptrh,c
 14164  0016D6                     	if	0	;There are less than 3 active tblptr bytes
 14165  0016D6                     	endif
 14166  0016D6  0009               	tblrd		*+
 14167  0016D8  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 14168  0016DC  0009               	tblrd		*+
 14169  0016DE  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 14170  0016E2  0009               	tblrd		*+
 14171  0016E4  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 14172  0016E8  000A               	tblrd		*-
 14173  0016EA  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 14174  0016EE  EC49  F025         	call	i2___lldiv	;wreg free
 14175  0016F2  5001               	movf	?i2___lldiv,w,c
 14176  0016F4  0B0F               	andlw	15
 14177  0016F6  6E4D               	movwf	i2printf@idx,c
 14178                           
 14179                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 14180  0016F8  504D               	movf	i2printf@idx,w,c
 14181  0016FA  0D01               	mullw	1
 14182  0016FC  0E4C               	movlw	low STR_18
 14183  0016FE  24F3               	addwf	prodl,w,c
 14184  001700  6EF6               	movwf	tblptrl,c
 14185  001702  0EFF               	movlw	high STR_18
 14186  001704  20F4               	addwfc	prodh,w,c
 14187  001706  6EF7               	movwf	tblptrh,c
 14188  001708                     	if	0	;There are less than 3 active tblptr bytes
 14189  001708                     	endif
 14190  001708  0008               	tblrd		*
 14191  00170A  CFF5 F067          	movff	tablat,i2printf@c
 14192                           
 14193                           ;doprnt.c: 1523: }
 14194                           
 14195                           ;doprnt.c: 1508: }
 14196                           ;doprnt.c: 1510: break;
 14197  00170E  D008               	goto	i2l6656
 14198  001710                     i2l6654:
 14199  001710  5065               	movf	i2printf@flag,w,c
 14200  001712  0B80               	andlw	128
 14201                           
 14202                           ; Switch size 1, requested type "space"
 14203                           ; Number of cases is 2, Range of values is 0 to 128
 14204                           ; switch strategies available:
 14205                           ; Name         Instructions Cycles
 14206                           ; simple_byte            7     4 (average)
 14207                           ;	Chosen strategy is simple_byte
 14208  001714  0A00               	xorlw	0	; case 0
 14209  001716  B4D8               	btfsc	status,2,c
 14210  001718  D78A               	goto	i2l6646
 14211  00171A  0A80               	xorlw	128	; case 128
 14212  00171C  B4D8               	btfsc	status,2,c
 14213  00171E  D7C3               	goto	i2l6648
 14214  001720                     i2l6656:
 14215                           
 14216                           ;doprnt.c: 1524: (putch(c) );
 14217  001720  5067               	movf	i2printf@c,w,c
 14218  001722  ECFD  F028         	call	i2_putch
 14219  001726                     i2l6658:
 14220  001726  0654               	decf	i2printf@prec,f,c
 14221  001728  A0D8               	btfss	status,0,c
 14222  00172A  0655               	decf	i2printf@prec+1,f,c
 14223  00172C  2854               	incf	i2printf@prec,w,c
 14224  00172E  E1F0               	bnz	i2l6654
 14225  001730  2855               	incf	i2printf@prec+1,w,c
 14226  001732  A4D8               	btfss	status,2,c
 14227  001734  D7ED               	goto	i2l6654
 14228  001736                     i2l6660:
 14229  001736  C040  FFF6         	movff	i2printf@f,tblptrl
 14230  00173A  C041  FFF7         	movff	i2printf@f+1,tblptrh
 14231  00173E  4A40               	infsnz	i2printf@f,f,c
 14232  001740  2A41               	incf	i2printf@f+1,f,c
 14233  001742                     	if	0	;tblptru may be non-zero
 14234  001742                     	endif
 14235  001742                     	if	0	;tblptru may be non-zero
 14236  001742                     	endif
 14237  001742  0008               	tblrd		*
 14238  001744  CFF5 F067          	movff	tablat,i2printf@c
 14239  001748  5067               	movf	i2printf@c,w,c
 14240  00174A  B4D8               	btfsc	status,2,c
 14241  00174C  0012               	return	
 14242  00174E  EF6B  F006         	goto	i2l6338
 14243  001752                     __end_ofi2_printf:
 14244                           	opt stack 0
 14245                           pclatu	equ	0xFFB
 14246                           pclath	equ	0xFFA
 14247                           tblptru	equ	0xFF8
 14248                           tblptrh	equ	0xFF7
 14249                           tblptrl	equ	0xFF6
 14250                           tablat	equ	0xFF5
 14251                           prodh	equ	0xFF4
 14252                           prodl	equ	0xFF3
 14253                           intcon	equ	0xFF2
 14254                           intcon3	equ	0xFF0
 14255                           postinc0	equ	0xFEE
 14256                           fsr0h	equ	0xFEA
 14257                           fsr0l	equ	0xFE9
 14258                           wreg	equ	0xFE8
 14259                           postdec1	equ	0xFE5
 14260                           fsr1h	equ	0xFE2
 14261                           fsr1l	equ	0xFE1
 14262                           indf2	equ	0xFDF
 14263                           postinc2	equ	0xFDE
 14264                           postdec2	equ	0xFDD
 14265                           fsr2h	equ	0xFDA
 14266                           fsr2l	equ	0xFD9
 14267                           status	equ	0xFD8
 14268                           
 14269 ;; *************** function i2_scale *****************
 14270 ;; Defined at:
 14271 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 14272 ;; Parameters:    Size  Location     Type
 14273 ;;  scl             1    wreg     char 
 14274 ;; Auto vars:     Size  Location     Type
 14275 ;;  scl             1   41[COMRAM] char 
 14276 ;; Return value:  Size  Location     Type
 14277 ;;                  3   35[COMRAM] char 
 14278 ;; Registers used:
 14279 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14280 ;; Tracked objects:
 14281 ;;		On entry : 0/0
 14282 ;;		On exit  : 0/0
 14283 ;;		Unchanged: 0/0
 14284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14285 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14286 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14288 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14289 ;;Total ram usage:        7 bytes
 14290 ;; Hardware stack levels used:    1
 14291 ;; Hardware stack levels required when called:    2
 14292 ;; This function calls:
 14293 ;;		i2___awdiv
 14294 ;;		i2___awmod
 14295 ;;		i2___ftmul
 14296 ;;		i2___wmul
 14297 ;; This function is called by:
 14298 ;;		i2_printf
 14299 ;; This function uses a non-reentrant model
 14300 ;;
 14301                           
 14302                           	psect	text45
 14303  001C00                     __ptext45:
 14304                           	opt stack 0
 14305  001C00                     i2_scale:
 14306                           	opt stack 20
 14307                           
 14308                           ;incstack = 0
 14309                           ;i2scale@scl stored from wreg
 14310  001C00  6E2A               	movwf	i2scale@scl,c
 14311                           
 14312                           ;doprnt.c: 428: if(scl < 0) {
 14313  001C02  AE2A               	btfss	i2scale@scl,7,c
 14314  001C04  D0FB               	goto	i2l5862
 14315                           
 14316                           ;doprnt.c: 429: scl = -scl;
 14317  001C06  6C2A               	negf	i2scale@scl,c
 14318                           
 14319                           ;doprnt.c: 430: if(scl>=110)
 14320  001C08  502A               	movf	i2scale@scl,w,c
 14321  001C0A  0A80               	xorlw	128
 14322  001C0C  0F12               	addlw	-238
 14323  001C0E  A0D8               	btfss	status,0,c
 14324  001C10  D091               	goto	i2l5852
 14325                           
 14326                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 14327  001C12  0E00               	movlw	0
 14328  001C14  6E12               	movwf	i2___wmul@multiplicand+1,c
 14329  001C16  0E03               	movlw	3
 14330  001C18  6E11               	movwf	i2___wmul@multiplicand,c
 14331  001C1A  0E00               	movlw	0
 14332  001C1C  6E0A               	movwf	i2___awdiv@divisor+1,c
 14333  001C1E  0E0A               	movlw	10
 14334  001C20  6E09               	movwf	i2___awdiv@divisor,c
 14335  001C22  0E00               	movlw	0
 14336  001C24  6E04               	movwf	i2___awmod@divisor+1,c
 14337  001C26  0E64               	movlw	100
 14338  001C28  6E03               	movwf	i2___awmod@divisor,c
 14339  001C2A  502A               	movf	i2scale@scl,w,c
 14340  001C2C  6E01               	movwf	i2___awmod@dividend,c
 14341  001C2E  6A02               	clrf	i2___awmod@dividend+1,c
 14342  001C30  BE01               	btfsc	i2___awmod@dividend,7,c
 14343  001C32  0602               	decf	i2___awmod@dividend+1,f,c
 14344  001C34  EC04  F026         	call	i2___awmod	;wreg free
 14345  001C38  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 14346  001C3C  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 14347  001C40  EC07  F025         	call	i2___awdiv	;wreg free
 14348  001C44  0E09               	movlw	9
 14349  001C46  2407               	addwf	?i2___awdiv,w,c
 14350  001C48  6E0F               	movwf	i2___wmul@multiplier,c
 14351  001C4A  0E00               	movlw	0
 14352  001C4C  2008               	addwfc	?i2___awdiv+1,w,c
 14353  001C4E  6E10               	movwf	i2___wmul@multiplier+1,c
 14354  001C50  ECD8  F028         	call	i2___wmul	;wreg free
 14355  001C54  0E59               	movlw	low __npowers_
 14356  001C56  240F               	addwf	?i2___wmul,w,c
 14357  001C58  6EF6               	movwf	tblptrl,c
 14358  001C5A  0EFE               	movlw	high __npowers_
 14359  001C5C  2010               	addwfc	?i2___wmul+1,w,c
 14360  001C5E  6EF7               	movwf	tblptrh,c
 14361  001C60                     	if	0	;There are less than 3 active tblptr bytes
 14362  001C60                     	endif
 14363  001C60  0009               	tblrd		*+
 14364  001C62  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14365  001C66  0009               	tblrd		*+
 14366  001C68  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14367  001C6C  000A               	tblrd		*-
 14368  001C6E  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14369  001C72  0E00               	movlw	0
 14370  001C74  6E0A               	movwf	i2___awdiv@divisor+1,c
 14371  001C76  0E64               	movlw	100
 14372  001C78  6E09               	movwf	i2___awdiv@divisor,c
 14373  001C7A  502A               	movf	i2scale@scl,w,c
 14374  001C7C  6E07               	movwf	i2___awdiv@dividend,c
 14375  001C7E  6A08               	clrf	i2___awdiv@dividend+1,c
 14376  001C80  BE07               	btfsc	i2___awdiv@dividend,7,c
 14377  001C82  0608               	decf	i2___awdiv@dividend+1,f,c
 14378  001C84  EC07  F025         	call	i2___awdiv	;wreg free
 14379  001C88  0E12               	movlw	18
 14380  001C8A  2407               	addwf	?i2___awdiv,w,c
 14381  001C8C  6E0F               	movwf	i2___wmul@multiplier,c
 14382  001C8E  0E00               	movlw	0
 14383  001C90  2008               	addwfc	?i2___awdiv+1,w,c
 14384  001C92  6E10               	movwf	i2___wmul@multiplier+1,c
 14385  001C94  0E00               	movlw	0
 14386  001C96  6E12               	movwf	i2___wmul@multiplicand+1,c
 14387  001C98  0E03               	movlw	3
 14388  001C9A  6E11               	movwf	i2___wmul@multiplicand,c
 14389  001C9C  ECD8  F028         	call	i2___wmul	;wreg free
 14390  001CA0  0E59               	movlw	low __npowers_
 14391  001CA2  240F               	addwf	?i2___wmul,w,c
 14392  001CA4  6EF6               	movwf	tblptrl,c
 14393  001CA6  0EFE               	movlw	high __npowers_
 14394  001CA8  2010               	addwfc	?i2___wmul+1,w,c
 14395  001CAA  6EF7               	movwf	tblptrh,c
 14396  001CAC                     	if	0	;There are less than 3 active tblptr bytes
 14397  001CAC                     	endif
 14398  001CAC  0009               	tblrd		*+
 14399  001CAE  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14400  001CB2  0009               	tblrd		*+
 14401  001CB4  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14402  001CB8  000A               	tblrd		*-
 14403  001CBA  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14404  001CBE  ECDD  F01F         	call	i2___ftmul	;wreg free
 14405  001CC2  C015  F027         	movff	?i2___ftmul,i2_scale$1527
 14406  001CC6  C016  F028         	movff	?i2___ftmul+1,i2_scale$1527+1
 14407  001CCA  C017  F029         	movff	?i2___ftmul+2,i2_scale$1527+2
 14408                           
 14409                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 14410  001CCE  C027  F015         	movff	i2_scale$1527,i2___ftmul@f1
 14411  001CD2  C028  F016         	movff	i2_scale$1527+1,i2___ftmul@f1+1
 14412  001CD6  C029  F017         	movff	i2_scale$1527+2,i2___ftmul@f1+2
 14413  001CDA  0E00               	movlw	0
 14414  001CDC  6E12               	movwf	i2___wmul@multiplicand+1,c
 14415  001CDE  0E03               	movlw	3
 14416  001CE0  6E11               	movwf	i2___wmul@multiplicand,c
 14417  001CE2  0E00               	movlw	0
 14418  001CE4  6E04               	movwf	i2___awmod@divisor+1,c
 14419  001CE6  0E0A               	movlw	10
 14420  001CE8  6E03               	movwf	i2___awmod@divisor,c
 14421  001CEA  502A               	movf	i2scale@scl,w,c
 14422  001CEC  6E01               	movwf	i2___awmod@dividend,c
 14423  001CEE  6A02               	clrf	i2___awmod@dividend+1,c
 14424  001CF0  BE01               	btfsc	i2___awmod@dividend,7,c
 14425  001CF2  0602               	decf	i2___awmod@dividend+1,f,c
 14426  001CF4  EC04  F026         	call	i2___awmod	;wreg free
 14427  001CF8  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14428  001CFC  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14429  001D00  ECD8  F028         	call	i2___wmul	;wreg free
 14430  001D04  0E59               	movlw	low __npowers_
 14431  001D06  240F               	addwf	?i2___wmul,w,c
 14432  001D08  6EF6               	movwf	tblptrl,c
 14433  001D0A  0EFE               	movlw	high __npowers_
 14434  001D0C  2010               	addwfc	?i2___wmul+1,w,c
 14435  001D0E  6EF7               	movwf	tblptrh,c
 14436  001D10                     	if	0	;There are less than 3 active tblptr bytes
 14437  001D10                     	endif
 14438  001D10  0009               	tblrd		*+
 14439  001D12  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14440  001D16  0009               	tblrd		*+
 14441  001D18  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14442  001D1C  000A               	tblrd		*-
 14443  001D1E  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14444  001D22  ECDD  F01F         	call	i2___ftmul	;wreg free
 14445  001D26  C015  F024         	movff	?i2___ftmul,?i2_scale
 14446  001D2A  C016  F025         	movff	?i2___ftmul+1,?i2_scale+1
 14447  001D2E  C017  F026         	movff	?i2___ftmul+2,?i2_scale+2
 14448  001D32  0012               	return	
 14449  001D34                     i2l5852:
 14450                           
 14451                           ;doprnt.c: 432: else if(scl > 10)
 14452  001D34  502A               	movf	i2scale@scl,w,c
 14453  001D36  0A80               	xorlw	128
 14454  001D38  0F75               	addlw	-139
 14455  001D3A  A0D8               	btfss	status,0,c
 14456  001D3C  D04D               	goto	i2l5858
 14457                           
 14458                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 14459  001D3E  0E00               	movlw	0
 14460  001D40  6E0A               	movwf	i2___awdiv@divisor+1,c
 14461  001D42  0E0A               	movlw	10
 14462  001D44  6E09               	movwf	i2___awdiv@divisor,c
 14463  001D46  502A               	movf	i2scale@scl,w,c
 14464  001D48  6E07               	movwf	i2___awdiv@dividend,c
 14465  001D4A  6A08               	clrf	i2___awdiv@dividend+1,c
 14466  001D4C  BE07               	btfsc	i2___awdiv@dividend,7,c
 14467  001D4E  0608               	decf	i2___awdiv@dividend+1,f,c
 14468  001D50  EC07  F025         	call	i2___awdiv	;wreg free
 14469  001D54  0E09               	movlw	9
 14470  001D56  2407               	addwf	?i2___awdiv,w,c
 14471  001D58  6E0F               	movwf	i2___wmul@multiplier,c
 14472  001D5A  0E00               	movlw	0
 14473  001D5C  2008               	addwfc	?i2___awdiv+1,w,c
 14474  001D5E  6E10               	movwf	i2___wmul@multiplier+1,c
 14475  001D60  0E00               	movlw	0
 14476  001D62  6E12               	movwf	i2___wmul@multiplicand+1,c
 14477  001D64  0E03               	movlw	3
 14478  001D66  6E11               	movwf	i2___wmul@multiplicand,c
 14479  001D68  ECD8  F028         	call	i2___wmul	;wreg free
 14480  001D6C  0E59               	movlw	low __npowers_
 14481  001D6E  240F               	addwf	?i2___wmul,w,c
 14482  001D70  6EF6               	movwf	tblptrl,c
 14483  001D72  0EFE               	movlw	high __npowers_
 14484  001D74  2010               	addwfc	?i2___wmul+1,w,c
 14485  001D76  6EF7               	movwf	tblptrh,c
 14486  001D78                     	if	0	;There are less than 3 active tblptr bytes
 14487  001D78                     	endif
 14488  001D78  0009               	tblrd		*+
 14489  001D7A  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14490  001D7E  0009               	tblrd		*+
 14491  001D80  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14492  001D84  000A               	tblrd		*-
 14493  001D86  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14494  001D8A  0E00               	movlw	0
 14495  001D8C  6E12               	movwf	i2___wmul@multiplicand+1,c
 14496  001D8E  0E03               	movlw	3
 14497  001D90  6E11               	movwf	i2___wmul@multiplicand,c
 14498  001D92  0E00               	movlw	0
 14499  001D94  6E04               	movwf	i2___awmod@divisor+1,c
 14500  001D96  0E0A               	movlw	10
 14501  001D98  6E03               	movwf	i2___awmod@divisor,c
 14502  001D9A  502A               	movf	i2scale@scl,w,c
 14503  001D9C  6E01               	movwf	i2___awmod@dividend,c
 14504  001D9E  6A02               	clrf	i2___awmod@dividend+1,c
 14505  001DA0  BE01               	btfsc	i2___awmod@dividend,7,c
 14506  001DA2  0602               	decf	i2___awmod@dividend+1,f,c
 14507  001DA4  EC04  F026         	call	i2___awmod	;wreg free
 14508  001DA8  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14509  001DAC  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14510  001DB0  ECD8  F028         	call	i2___wmul	;wreg free
 14511  001DB4  0E59               	movlw	low __npowers_
 14512  001DB6  240F               	addwf	?i2___wmul,w,c
 14513  001DB8  6EF6               	movwf	tblptrl,c
 14514  001DBA  0EFE               	movlw	high __npowers_
 14515  001DBC  2010               	addwfc	?i2___wmul+1,w,c
 14516  001DBE  6EF7               	movwf	tblptrh,c
 14517  001DC0                     	if	0	;There are less than 3 active tblptr bytes
 14518  001DC0                     	endif
 14519  001DC0  0009               	tblrd		*+
 14520  001DC2  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14521  001DC6  0009               	tblrd		*+
 14522  001DC8  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14523  001DCC  000A               	tblrd		*-
 14524  001DCE  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14525  001DD2  ECDD  F01F         	call	i2___ftmul	;wreg free
 14526  001DD6  D7A7               	goto	L11
 14527  001DD8                     i2l5858:
 14528                           
 14529                           ;doprnt.c: 434: return _npowers_[scl];
 14530  001DD8  502A               	movf	i2scale@scl,w,c
 14531  001DDA  0D03               	mullw	3
 14532  001DDC  0E59               	movlw	low __npowers_
 14533  001DDE  24F3               	addwf	prodl,w,c
 14534  001DE0  6EF6               	movwf	tblptrl,c
 14535  001DE2  0EFE               	movlw	high __npowers_
 14536  001DE4  20F4               	addwfc	prodh,w,c
 14537  001DE6  6EF7               	movwf	tblptrh,c
 14538  001DE8                     	if	0	;There are less than 3 active tblptr bytes
 14539  001DE8                     	endif
 14540  001DE8  0009               	tblrd		*+
 14541  001DEA  CFF5 F024          	movff	tablat,?i2_scale
 14542  001DEE  0009               	tblrd		*+
 14543  001DF0  CFF5 F025          	movff	tablat,?i2_scale+1
 14544  001DF4  000A               	tblrd		*-
 14545  001DF6  CFF5 F026          	movff	tablat,?i2_scale+2
 14546  001DFA  0012               	return	
 14547  001DFC                     i2l5862:
 14548                           
 14549                           ;doprnt.c: 435: }
 14550                           ;doprnt.c: 436: if(scl>=110)
 14551  001DFC  502A               	movf	i2scale@scl,w,c
 14552  001DFE  0A80               	xorlw	128
 14553  001E00  0F12               	addlw	-238
 14554  001E02  A0D8               	btfss	status,0,c
 14555  001E04  D091               	goto	i2l5870
 14556                           
 14557                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 14558  001E06  0E00               	movlw	0
 14559  001E08  6E12               	movwf	i2___wmul@multiplicand+1,c
 14560  001E0A  0E03               	movlw	3
 14561  001E0C  6E11               	movwf	i2___wmul@multiplicand,c
 14562  001E0E  0E00               	movlw	0
 14563  001E10  6E0A               	movwf	i2___awdiv@divisor+1,c
 14564  001E12  0E0A               	movlw	10
 14565  001E14  6E09               	movwf	i2___awdiv@divisor,c
 14566  001E16  0E00               	movlw	0
 14567  001E18  6E04               	movwf	i2___awmod@divisor+1,c
 14568  001E1A  0E64               	movlw	100
 14569  001E1C  6E03               	movwf	i2___awmod@divisor,c
 14570  001E1E  502A               	movf	i2scale@scl,w,c
 14571  001E20  6E01               	movwf	i2___awmod@dividend,c
 14572  001E22  6A02               	clrf	i2___awmod@dividend+1,c
 14573  001E24  BE01               	btfsc	i2___awmod@dividend,7,c
 14574  001E26  0602               	decf	i2___awmod@dividend+1,f,c
 14575  001E28  EC04  F026         	call	i2___awmod	;wreg free
 14576  001E2C  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 14577  001E30  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 14578  001E34  EC07  F025         	call	i2___awdiv	;wreg free
 14579  001E38  0E09               	movlw	9
 14580  001E3A  2407               	addwf	?i2___awdiv,w,c
 14581  001E3C  6E0F               	movwf	i2___wmul@multiplier,c
 14582  001E3E  0E00               	movlw	0
 14583  001E40  2008               	addwfc	?i2___awdiv+1,w,c
 14584  001E42  6E10               	movwf	i2___wmul@multiplier+1,c
 14585  001E44  ECD8  F028         	call	i2___wmul	;wreg free
 14586  001E48  0E80               	movlw	low __powers_
 14587  001E4A  240F               	addwf	?i2___wmul,w,c
 14588  001E4C  6EF6               	movwf	tblptrl,c
 14589  001E4E  0EFE               	movlw	high __powers_
 14590  001E50  2010               	addwfc	?i2___wmul+1,w,c
 14591  001E52  6EF7               	movwf	tblptrh,c
 14592  001E54                     	if	0	;There are less than 3 active tblptr bytes
 14593  001E54                     	endif
 14594  001E54  0009               	tblrd		*+
 14595  001E56  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14596  001E5A  0009               	tblrd		*+
 14597  001E5C  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14598  001E60  000A               	tblrd		*-
 14599  001E62  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14600  001E66  0E00               	movlw	0
 14601  001E68  6E0A               	movwf	i2___awdiv@divisor+1,c
 14602  001E6A  0E64               	movlw	100
 14603  001E6C  6E09               	movwf	i2___awdiv@divisor,c
 14604  001E6E  502A               	movf	i2scale@scl,w,c
 14605  001E70  6E07               	movwf	i2___awdiv@dividend,c
 14606  001E72  6A08               	clrf	i2___awdiv@dividend+1,c
 14607  001E74  BE07               	btfsc	i2___awdiv@dividend,7,c
 14608  001E76  0608               	decf	i2___awdiv@dividend+1,f,c
 14609  001E78  EC07  F025         	call	i2___awdiv	;wreg free
 14610  001E7C  0E12               	movlw	18
 14611  001E7E  2407               	addwf	?i2___awdiv,w,c
 14612  001E80  6E0F               	movwf	i2___wmul@multiplier,c
 14613  001E82  0E00               	movlw	0
 14614  001E84  2008               	addwfc	?i2___awdiv+1,w,c
 14615  001E86  6E10               	movwf	i2___wmul@multiplier+1,c
 14616  001E88  0E00               	movlw	0
 14617  001E8A  6E12               	movwf	i2___wmul@multiplicand+1,c
 14618  001E8C  0E03               	movlw	3
 14619  001E8E  6E11               	movwf	i2___wmul@multiplicand,c
 14620  001E90  ECD8  F028         	call	i2___wmul	;wreg free
 14621  001E94  0E80               	movlw	low __powers_
 14622  001E96  240F               	addwf	?i2___wmul,w,c
 14623  001E98  6EF6               	movwf	tblptrl,c
 14624  001E9A  0EFE               	movlw	high __powers_
 14625  001E9C  2010               	addwfc	?i2___wmul+1,w,c
 14626  001E9E  6EF7               	movwf	tblptrh,c
 14627  001EA0                     	if	0	;There are less than 3 active tblptr bytes
 14628  001EA0                     	endif
 14629  001EA0  0009               	tblrd		*+
 14630  001EA2  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14631  001EA6  0009               	tblrd		*+
 14632  001EA8  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14633  001EAC  000A               	tblrd		*-
 14634  001EAE  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14635  001EB2  ECDD  F01F         	call	i2___ftmul	;wreg free
 14636  001EB6  C015  F027         	movff	?i2___ftmul,i2_scale$1527
 14637  001EBA  C016  F028         	movff	?i2___ftmul+1,i2_scale$1527+1
 14638  001EBE  C017  F029         	movff	?i2___ftmul+2,i2_scale$1527+2
 14639                           
 14640                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 14641  001EC2  C027  F015         	movff	i2_scale$1527,i2___ftmul@f1
 14642  001EC6  C028  F016         	movff	i2_scale$1527+1,i2___ftmul@f1+1
 14643  001ECA  C029  F017         	movff	i2_scale$1527+2,i2___ftmul@f1+2
 14644  001ECE  0E00               	movlw	0
 14645  001ED0  6E12               	movwf	i2___wmul@multiplicand+1,c
 14646  001ED2  0E03               	movlw	3
 14647  001ED4  6E11               	movwf	i2___wmul@multiplicand,c
 14648  001ED6  0E00               	movlw	0
 14649  001ED8  6E04               	movwf	i2___awmod@divisor+1,c
 14650  001EDA  0E0A               	movlw	10
 14651  001EDC  6E03               	movwf	i2___awmod@divisor,c
 14652  001EDE  502A               	movf	i2scale@scl,w,c
 14653  001EE0  6E01               	movwf	i2___awmod@dividend,c
 14654  001EE2  6A02               	clrf	i2___awmod@dividend+1,c
 14655  001EE4  BE01               	btfsc	i2___awmod@dividend,7,c
 14656  001EE6  0602               	decf	i2___awmod@dividend+1,f,c
 14657  001EE8  EC04  F026         	call	i2___awmod	;wreg free
 14658  001EEC  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14659  001EF0  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14660  001EF4  ECD8  F028         	call	i2___wmul	;wreg free
 14661  001EF8  0E80               	movlw	low __powers_
 14662  001EFA  240F               	addwf	?i2___wmul,w,c
 14663  001EFC  6EF6               	movwf	tblptrl,c
 14664  001EFE  0EFE               	movlw	high __powers_
 14665  001F00  2010               	addwfc	?i2___wmul+1,w,c
 14666  001F02  6EF7               	movwf	tblptrh,c
 14667  001F04                     	if	0	;There are less than 3 active tblptr bytes
 14668  001F04                     	endif
 14669  001F04  0009               	tblrd		*+
 14670  001F06  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14671  001F0A  0009               	tblrd		*+
 14672  001F0C  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14673  001F10  000A               	tblrd		*-
 14674  001F12  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14675  001F16  ECDD  F01F         	call	i2___ftmul	;wreg free
 14676  001F1A  C015  F024         	movff	?i2___ftmul,?i2_scale
 14677  001F1E  C016  F025         	movff	?i2___ftmul+1,?i2_scale+1
 14678  001F22  C017  F026         	movff	?i2___ftmul+2,?i2_scale+2
 14679  001F26  0012               	return	
 14680  001F28                     i2l5870:
 14681                           
 14682                           ;doprnt.c: 438: else if(scl > 10)
 14683  001F28  502A               	movf	i2scale@scl,w,c
 14684  001F2A  0A80               	xorlw	128
 14685  001F2C  0F75               	addlw	-139
 14686  001F2E  A0D8               	btfss	status,0,c
 14687  001F30  D04D               	goto	i2l5876
 14688                           
 14689                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 14690  001F32  0E00               	movlw	0
 14691  001F34  6E0A               	movwf	i2___awdiv@divisor+1,c
 14692  001F36  0E0A               	movlw	10
 14693  001F38  6E09               	movwf	i2___awdiv@divisor,c
 14694  001F3A  502A               	movf	i2scale@scl,w,c
 14695  001F3C  6E07               	movwf	i2___awdiv@dividend,c
 14696  001F3E  6A08               	clrf	i2___awdiv@dividend+1,c
 14697  001F40  BE07               	btfsc	i2___awdiv@dividend,7,c
 14698  001F42  0608               	decf	i2___awdiv@dividend+1,f,c
 14699  001F44  EC07  F025         	call	i2___awdiv	;wreg free
 14700  001F48  0E09               	movlw	9
 14701  001F4A  2407               	addwf	?i2___awdiv,w,c
 14702  001F4C  6E0F               	movwf	i2___wmul@multiplier,c
 14703  001F4E  0E00               	movlw	0
 14704  001F50  2008               	addwfc	?i2___awdiv+1,w,c
 14705  001F52  6E10               	movwf	i2___wmul@multiplier+1,c
 14706  001F54  0E00               	movlw	0
 14707  001F56  6E12               	movwf	i2___wmul@multiplicand+1,c
 14708  001F58  0E03               	movlw	3
 14709  001F5A  6E11               	movwf	i2___wmul@multiplicand,c
 14710  001F5C  ECD8  F028         	call	i2___wmul	;wreg free
 14711  001F60  0E80               	movlw	low __powers_
 14712  001F62  240F               	addwf	?i2___wmul,w,c
 14713  001F64  6EF6               	movwf	tblptrl,c
 14714  001F66  0EFE               	movlw	high __powers_
 14715  001F68  2010               	addwfc	?i2___wmul+1,w,c
 14716  001F6A  6EF7               	movwf	tblptrh,c
 14717  001F6C                     	if	0	;There are less than 3 active tblptr bytes
 14718  001F6C                     	endif
 14719  001F6C  0009               	tblrd		*+
 14720  001F6E  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14721  001F72  0009               	tblrd		*+
 14722  001F74  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14723  001F78  000A               	tblrd		*-
 14724  001F7A  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14725  001F7E  0E00               	movlw	0
 14726  001F80  6E12               	movwf	i2___wmul@multiplicand+1,c
 14727  001F82  0E03               	movlw	3
 14728  001F84  6E11               	movwf	i2___wmul@multiplicand,c
 14729  001F86  0E00               	movlw	0
 14730  001F88  6E04               	movwf	i2___awmod@divisor+1,c
 14731  001F8A  0E0A               	movlw	10
 14732  001F8C  6E03               	movwf	i2___awmod@divisor,c
 14733  001F8E  502A               	movf	i2scale@scl,w,c
 14734  001F90  6E01               	movwf	i2___awmod@dividend,c
 14735  001F92  6A02               	clrf	i2___awmod@dividend+1,c
 14736  001F94  BE01               	btfsc	i2___awmod@dividend,7,c
 14737  001F96  0602               	decf	i2___awmod@dividend+1,f,c
 14738  001F98  EC04  F026         	call	i2___awmod	;wreg free
 14739  001F9C  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14740  001FA0  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14741  001FA4  ECD8  F028         	call	i2___wmul	;wreg free
 14742  001FA8  0E80               	movlw	low __powers_
 14743  001FAA  240F               	addwf	?i2___wmul,w,c
 14744  001FAC  6EF6               	movwf	tblptrl,c
 14745  001FAE  0EFE               	movlw	high __powers_
 14746  001FB0  2010               	addwfc	?i2___wmul+1,w,c
 14747  001FB2  6EF7               	movwf	tblptrh,c
 14748  001FB4                     	if	0	;There are less than 3 active tblptr bytes
 14749  001FB4                     	endif
 14750  001FB4  0009               	tblrd		*+
 14751  001FB6  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14752  001FBA  0009               	tblrd		*+
 14753  001FBC  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14754  001FC0  000A               	tblrd		*-
 14755  001FC2  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14756  001FC6  ECDD  F01F         	call	i2___ftmul	;wreg free
 14757  001FCA  D7A7               	goto	L12
 14758  001FCC                     i2l5876:
 14759                           
 14760                           ;doprnt.c: 440: return _powers_[scl];
 14761  001FCC  502A               	movf	i2scale@scl,w,c
 14762  001FCE  0D03               	mullw	3
 14763  001FD0  0E80               	movlw	low __powers_
 14764  001FD2  24F3               	addwf	prodl,w,c
 14765  001FD4  6EF6               	movwf	tblptrl,c
 14766  001FD6  0EFE               	movlw	high __powers_
 14767  001FD8  20F4               	addwfc	prodh,w,c
 14768  001FDA  6EF7               	movwf	tblptrh,c
 14769  001FDC                     	if	0	;There are less than 3 active tblptr bytes
 14770  001FDC                     	endif
 14771  001FDC  0009               	tblrd		*+
 14772  001FDE  CFF5 F024          	movff	tablat,?i2_scale
 14773  001FE2  0009               	tblrd		*+
 14774  001FE4  CFF5 F025          	movff	tablat,?i2_scale+1
 14775  001FE8  000A               	tblrd		*-
 14776  001FEA  CFF5 F026          	movff	tablat,?i2_scale+2
 14777  001FEE  0012               	return	
 14778  001FF0                     __end_ofi2_scale:
 14779                           	opt stack 0
 14780                           pclatu	equ	0xFFB
 14781                           pclath	equ	0xFFA
 14782                           tblptru	equ	0xFF8
 14783                           tblptrh	equ	0xFF7
 14784                           tblptrl	equ	0xFF6
 14785                           tablat	equ	0xFF5
 14786                           prodh	equ	0xFF4
 14787                           prodl	equ	0xFF3
 14788                           intcon	equ	0xFF2
 14789                           intcon3	equ	0xFF0
 14790                           postinc0	equ	0xFEE
 14791                           fsr0h	equ	0xFEA
 14792                           fsr0l	equ	0xFE9
 14793                           wreg	equ	0xFE8
 14794                           postdec1	equ	0xFE5
 14795                           fsr1h	equ	0xFE2
 14796                           fsr1l	equ	0xFE1
 14797                           indf2	equ	0xFDF
 14798                           postinc2	equ	0xFDE
 14799                           postdec2	equ	0xFDD
 14800                           fsr2h	equ	0xFDA
 14801                           fsr2l	equ	0xFD9
 14802                           status	equ	0xFD8
 14803                           
 14804 ;; *************** function i2_putch *****************
 14805 ;; Defined at:
 14806 ;;		line 35 in file "lcd.c"
 14807 ;; Parameters:    Size  Location     Type
 14808 ;;  data            1    wreg     unsigned char 
 14809 ;; Auto vars:     Size  Location     Type
 14810 ;;  data            1    4[COMRAM] unsigned char 
 14811 ;; Return value:  Size  Location     Type
 14812 ;;                  1    wreg      void 
 14813 ;; Registers used:
 14814 ;;		wreg, status,2, status,0, cstack
 14815 ;; Tracked objects:
 14816 ;;		On entry : 0/0
 14817 ;;		On exit  : 0/0
 14818 ;;		Unchanged: 0/0
 14819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14821 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14823 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14824 ;;Total ram usage:        1 bytes
 14825 ;; Hardware stack levels used:    1
 14826 ;; Hardware stack levels required when called:    3
 14827 ;; This function calls:
 14828 ;;		i2_lcdNewline
 14829 ;;		i2_lcdNibble
 14830 ;; This function is called by:
 14831 ;;		i2_printf
 14832 ;; This function uses a non-reentrant model
 14833 ;;
 14834                           
 14835                           	psect	text46
 14836  0051FA                     __ptext46:
 14837                           	opt stack 0
 14838  0051FA                     i2_putch:
 14839                           	opt stack 19
 14840                           
 14841                           ;incstack = 0
 14842                           ;i2putch@data stored from wreg
 14843  0051FA  6E05               	movwf	i2putch@data,c
 14844                           
 14845                           ;lcd.c: 36: if(data == '\n')lcdNewline();
 14846  0051FC  0E0A               	movlw	10
 14847  0051FE  1805               	xorwf	i2putch@data,w,c
 14848  005200  A4D8               	btfss	status,2,c
 14849  005202  D003               	goto	i2l186
 14850  005204  EC3A  F029         	call	i2_lcdNewline	;wreg free
 14851  005208  0012               	return	
 14852  00520A                     i2l186:
 14853                           
 14854                           ;lcd.c: 37: else
 14855                           ;lcd.c: 38: {
 14856                           ;lcd.c: 39: LATDbits.LATD2 = 1;
 14857  00520A  848C               	bsf	3980,2,c	;volatile
 14858                           
 14859                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
 14860  00520C  0E74               	movlw	116
 14861  00520E                     i2u793_47:
 14862  00520E  2EE8               	decfsz	wreg,f,c
 14863  005210  D7FE               	bra	i2u793_47
 14864  005212  D000               	nop2	
 14865                           
 14866                           ;lcd.c: 41: lcdNibble(data);
 14867  005214  5005               	movf	i2putch@data,w,c
 14868  005216  EC6F  F026         	call	i2_lcdNibble
 14869  00521A  0012               	return	
 14870  00521C                     __end_ofi2_putch:
 14871                           	opt stack 0
 14872                           pclatu	equ	0xFFB
 14873                           pclath	equ	0xFFA
 14874                           tblptru	equ	0xFF8
 14875                           tblptrh	equ	0xFF7
 14876                           tblptrl	equ	0xFF6
 14877                           tablat	equ	0xFF5
 14878                           prodh	equ	0xFF4
 14879                           prodl	equ	0xFF3
 14880                           intcon	equ	0xFF2
 14881                           intcon3	equ	0xFF0
 14882                           postinc0	equ	0xFEE
 14883                           fsr0h	equ	0xFEA
 14884                           fsr0l	equ	0xFE9
 14885                           wreg	equ	0xFE8
 14886                           postdec1	equ	0xFE5
 14887                           fsr1h	equ	0xFE2
 14888                           fsr1l	equ	0xFE1
 14889                           indf2	equ	0xFDF
 14890                           postinc2	equ	0xFDE
 14891                           postdec2	equ	0xFDD
 14892                           fsr2h	equ	0xFDA
 14893                           fsr2l	equ	0xFD9
 14894                           status	equ	0xFD8
 14895                           
 14896 ;; *************** function i2_lcdNewline *****************
 14897 ;; Defined at:
 14898 ;;		line 78 in file "lcd.c"
 14899 ;; Parameters:    Size  Location     Type
 14900 ;;		None
 14901 ;; Auto vars:     Size  Location     Type
 14902 ;;		None
 14903 ;; Return value:  Size  Location     Type
 14904 ;;                  1    wreg      void 
 14905 ;; Registers used:
 14906 ;;		wreg, status,2, status,0, cstack
 14907 ;; Tracked objects:
 14908 ;;		On entry : 0/0
 14909 ;;		On exit  : 0/0
 14910 ;;		Unchanged: 0/0
 14911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14916 ;;Total ram usage:        0 bytes
 14917 ;; Hardware stack levels used:    1
 14918 ;; Hardware stack levels required when called:    2
 14919 ;; This function calls:
 14920 ;;		i2_lcdInst
 14921 ;; This function is called by:
 14922 ;;		i2_putch
 14923 ;; This function uses a non-reentrant model
 14924 ;;
 14925                           
 14926                           	psect	text47
 14927  005274                     __ptext47:
 14928                           	opt stack 0
 14929  005274                     i2_lcdNewline:
 14930                           	opt stack 19
 14931                           
 14932                           ;lcd.c: 79: lcdInst(0b11000000);
 14933                           
 14934                           ;incstack = 0
 14935  005274  0EC0               	movlw	192
 14936  005276  EC0E  F029         	call	i2_lcdInst
 14937  00527A  0012               	return		;funcret
 14938  00527C                     __end_ofi2_lcdNewline:
 14939                           	opt stack 0
 14940                           pclatu	equ	0xFFB
 14941                           pclath	equ	0xFFA
 14942                           tblptru	equ	0xFF8
 14943                           tblptrh	equ	0xFF7
 14944                           tblptrl	equ	0xFF6
 14945                           tablat	equ	0xFF5
 14946                           prodh	equ	0xFF4
 14947                           prodl	equ	0xFF3
 14948                           intcon	equ	0xFF2
 14949                           intcon3	equ	0xFF0
 14950                           postinc0	equ	0xFEE
 14951                           fsr0h	equ	0xFEA
 14952                           fsr0l	equ	0xFE9
 14953                           wreg	equ	0xFE8
 14954                           postdec1	equ	0xFE5
 14955                           fsr1h	equ	0xFE2
 14956                           fsr1l	equ	0xFE1
 14957                           indf2	equ	0xFDF
 14958                           postinc2	equ	0xFDE
 14959                           postdec2	equ	0xFDD
 14960                           fsr2h	equ	0xFDA
 14961                           fsr2l	equ	0xFD9
 14962                           status	equ	0xFD8
 14963                           
 14964 ;; *************** function i2_isdigit *****************
 14965 ;; Defined at:
 14966 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 14967 ;; Parameters:    Size  Location     Type
 14968 ;;  c               1    wreg     unsigned char 
 14969 ;; Auto vars:     Size  Location     Type
 14970 ;;  c               1    2[COMRAM] unsigned char 
 14971 ;; Return value:  Size  Location     Type
 14972 ;;		None               void
 14973 ;; Registers used:
 14974 ;;		wreg, status,2, status,0
 14975 ;; Tracked objects:
 14976 ;;		On entry : 0/0
 14977 ;;		On exit  : 0/0
 14978 ;;		Unchanged: 0/0
 14979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14981 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14982 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14983 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14984 ;;Total ram usage:        3 bytes
 14985 ;; Hardware stack levels used:    1
 14986 ;; This function calls:
 14987 ;;		Nothing
 14988 ;; This function is called by:
 14989 ;;		i2_printf
 14990 ;; This function uses a non-reentrant model
 14991 ;;
 14992                           
 14993                           	psect	text48
 14994  00523E                     __ptext48:
 14995                           	opt stack 0
 14996  00523E                     i2_isdigit:
 14997                           	opt stack 22
 14998                           
 14999                           ;incstack = 0
 15000                           ;i2isdigit@c stored from wreg
 15001  00523E  6E03               	movwf	i2isdigit@c,c
 15002  005240  0E00               	movlw	0
 15003  005242  6E02               	movwf	i2_isdigit$956,c
 15004  005244  0E3A               	movlw	58
 15005  005246  6003               	cpfslt	i2isdigit@c,c
 15006  005248  D005               	goto	i2l6080
 15007  00524A  0E2F               	movlw	47
 15008  00524C  6403               	cpfsgt	i2isdigit@c,c
 15009  00524E  D002               	goto	i2l6080
 15010  005250  0E01               	movlw	1
 15011  005252  6E02               	movwf	i2_isdigit$956,c
 15012  005254                     i2l6080:
 15013  005254  C002  F001         	movff	i2_isdigit$956,??i2_isdigit
 15014  005258  3001               	rrcf	??i2_isdigit,w,c
 15015  00525A  0012               	return	
 15016  00525C                     __end_ofi2_isdigit:
 15017                           	opt stack 0
 15018                           pclatu	equ	0xFFB
 15019                           pclath	equ	0xFFA
 15020                           tblptru	equ	0xFF8
 15021                           tblptrh	equ	0xFF7
 15022                           tblptrl	equ	0xFF6
 15023                           tablat	equ	0xFF5
 15024                           prodh	equ	0xFF4
 15025                           prodl	equ	0xFF3
 15026                           intcon	equ	0xFF2
 15027                           intcon3	equ	0xFF0
 15028                           postinc0	equ	0xFEE
 15029                           fsr0h	equ	0xFEA
 15030                           fsr0l	equ	0xFE9
 15031                           wreg	equ	0xFE8
 15032                           postdec1	equ	0xFE5
 15033                           fsr1h	equ	0xFE2
 15034                           fsr1l	equ	0xFE1
 15035                           indf2	equ	0xFDF
 15036                           postinc2	equ	0xFDE
 15037                           postdec2	equ	0xFDD
 15038                           fsr2h	equ	0xFDA
 15039                           fsr2l	equ	0xFD9
 15040                           status	equ	0xFD8
 15041                           
 15042 ;; *************** function i2_fround *****************
 15043 ;; Defined at:
 15044 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 15045 ;; Parameters:    Size  Location     Type
 15046 ;;  prec            1    wreg     unsigned char 
 15047 ;; Auto vars:     Size  Location     Type
 15048 ;;  prec            1   44[COMRAM] unsigned char 
 15049 ;; Return value:  Size  Location     Type
 15050 ;;                  3   35[COMRAM] unsigned char 
 15051 ;; Registers used:
 15052 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15053 ;; Tracked objects:
 15054 ;;		On entry : 0/0
 15055 ;;		On exit  : 0/0
 15056 ;;		Unchanged: 0/0
 15057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15058 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15059 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15061 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15062 ;;Total ram usage:       10 bytes
 15063 ;; Hardware stack levels used:    1
 15064 ;; Hardware stack levels required when called:    2
 15065 ;; This function calls:
 15066 ;;		i2___awdiv
 15067 ;;		i2___awmod
 15068 ;;		i2___ftmul
 15069 ;;		i2___wmul
 15070 ;; This function is called by:
 15071 ;;		i2_printf
 15072 ;; This function uses a non-reentrant model
 15073 ;;
 15074                           
 15075                           	psect	text49
 15076  0028BE                     __ptext49:
 15077                           	opt stack 0
 15078  0028BE                     i2_fround:
 15079                           	opt stack 20
 15080                           
 15081                           ;incstack = 0
 15082                           ;i2fround@prec stored from wreg
 15083  0028BE  6E2D               	movwf	i2fround@prec,c
 15084                           
 15085                           ;doprnt.c: 413: if(prec>=110)
 15086  0028C0  0E6D               	movlw	109
 15087  0028C2  642D               	cpfsgt	i2fround@prec,c
 15088  0028C4  D09F               	goto	i2l5830
 15089                           
 15090                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15091  0028C6  0E00               	movlw	0
 15092  0028C8  6E12               	movwf	i2___wmul@multiplicand+1,c
 15093  0028CA  0E03               	movlw	3
 15094  0028CC  6E11               	movwf	i2___wmul@multiplicand,c
 15095  0028CE  0E00               	movlw	0
 15096  0028D0  6E0A               	movwf	i2___awdiv@divisor+1,c
 15097  0028D2  0E0A               	movlw	10
 15098  0028D4  6E09               	movwf	i2___awdiv@divisor,c
 15099  0028D6  0E00               	movlw	0
 15100  0028D8  6E04               	movwf	i2___awmod@divisor+1,c
 15101  0028DA  0E64               	movlw	100
 15102  0028DC  6E03               	movwf	i2___awmod@divisor,c
 15103  0028DE  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 15104  0028E2  6A02               	clrf	i2___awmod@dividend+1,c
 15105  0028E4  EC04  F026         	call	i2___awmod	;wreg free
 15106  0028E8  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 15107  0028EC  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 15108  0028F0  EC07  F025         	call	i2___awdiv	;wreg free
 15109  0028F4  0E09               	movlw	9
 15110  0028F6  2407               	addwf	?i2___awdiv,w,c
 15111  0028F8  6E0F               	movwf	i2___wmul@multiplier,c
 15112  0028FA  0E00               	movlw	0
 15113  0028FC  2008               	addwfc	?i2___awdiv+1,w,c
 15114  0028FE  6E10               	movwf	i2___wmul@multiplier+1,c
 15115  002900  ECD8  F028         	call	i2___wmul	;wreg free
 15116  002904  0E59               	movlw	low __npowers_
 15117  002906  240F               	addwf	?i2___wmul,w,c
 15118  002908  6EF6               	movwf	tblptrl,c
 15119  00290A  0EFE               	movlw	high __npowers_
 15120  00290C  2010               	addwfc	?i2___wmul+1,w,c
 15121  00290E  6EF7               	movwf	tblptrh,c
 15122  002910                     	if	0	;There are less than 3 active tblptr bytes
 15123  002910                     	endif
 15124  002910  0009               	tblrd		*+
 15125  002912  CFF5 F018          	movff	tablat,i2___ftmul@f2
 15126  002916  0009               	tblrd		*+
 15127  002918  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 15128  00291C  000A               	tblrd		*-
 15129  00291E  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 15130  002922  0E00               	movlw	0
 15131  002924  6E0A               	movwf	i2___awdiv@divisor+1,c
 15132  002926  0E64               	movlw	100
 15133  002928  6E09               	movwf	i2___awdiv@divisor,c
 15134  00292A  C02D  F007         	movff	i2fround@prec,i2___awdiv@dividend
 15135  00292E  6A08               	clrf	i2___awdiv@dividend+1,c
 15136  002930  EC07  F025         	call	i2___awdiv	;wreg free
 15137  002934  0E12               	movlw	18
 15138  002936  2407               	addwf	?i2___awdiv,w,c
 15139  002938  6E0F               	movwf	i2___wmul@multiplier,c
 15140  00293A  0E00               	movlw	0
 15141  00293C  2008               	addwfc	?i2___awdiv+1,w,c
 15142  00293E  6E10               	movwf	i2___wmul@multiplier+1,c
 15143  002940  0E00               	movlw	0
 15144  002942  6E12               	movwf	i2___wmul@multiplicand+1,c
 15145  002944  0E03               	movlw	3
 15146  002946  6E11               	movwf	i2___wmul@multiplicand,c
 15147  002948  ECD8  F028         	call	i2___wmul	;wreg free
 15148  00294C  0E59               	movlw	low __npowers_
 15149  00294E  240F               	addwf	?i2___wmul,w,c
 15150  002950  6EF6               	movwf	tblptrl,c
 15151  002952  0EFE               	movlw	high __npowers_
 15152  002954  2010               	addwfc	?i2___wmul+1,w,c
 15153  002956  6EF7               	movwf	tblptrh,c
 15154  002958                     	if	0	;There are less than 3 active tblptr bytes
 15155  002958                     	endif
 15156  002958  0009               	tblrd		*+
 15157  00295A  CFF5 F015          	movff	tablat,i2___ftmul@f1
 15158  00295E  0009               	tblrd		*+
 15159  002960  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 15160  002964  000A               	tblrd		*-
 15161  002966  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 15162  00296A  ECDD  F01F         	call	i2___ftmul	;wreg free
 15163  00296E  C015  F02A         	movff	?i2___ftmul,i2_fround$1525
 15164  002972  C016  F02B         	movff	?i2___ftmul+1,i2_fround$1525+1
 15165  002976  C017  F02C         	movff	?i2___ftmul+2,i2_fround$1525+2
 15166                           
 15167                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15168  00297A  0E00               	movlw	0
 15169  00297C  6E12               	movwf	i2___wmul@multiplicand+1,c
 15170  00297E  0E03               	movlw	3
 15171  002980  6E11               	movwf	i2___wmul@multiplicand,c
 15172  002982  0E00               	movlw	0
 15173  002984  6E04               	movwf	i2___awmod@divisor+1,c
 15174  002986  0E0A               	movlw	10
 15175  002988  6E03               	movwf	i2___awmod@divisor,c
 15176  00298A  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 15177  00298E  6A02               	clrf	i2___awmod@dividend+1,c
 15178  002990  EC04  F026         	call	i2___awmod	;wreg free
 15179  002994  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 15180  002998  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 15181  00299C  ECD8  F028         	call	i2___wmul	;wreg free
 15182  0029A0  0E59               	movlw	low __npowers_
 15183  0029A2  240F               	addwf	?i2___wmul,w,c
 15184  0029A4  6EF6               	movwf	tblptrl,c
 15185  0029A6  0EFE               	movlw	high __npowers_
 15186  0029A8  2010               	addwfc	?i2___wmul+1,w,c
 15187  0029AA  6EF7               	movwf	tblptrh,c
 15188  0029AC                     	if	0	;There are less than 3 active tblptr bytes
 15189  0029AC                     	endif
 15190  0029AC  0009               	tblrd		*+
 15191  0029AE  CFF5 F018          	movff	tablat,i2___ftmul@f2
 15192  0029B2  0009               	tblrd		*+
 15193  0029B4  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 15194  0029B8  000A               	tblrd		*-
 15195  0029BA  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 15196  0029BE  C02A  F015         	movff	i2_fround$1525,i2___ftmul@f1
 15197  0029C2  C02B  F016         	movff	i2_fround$1525+1,i2___ftmul@f1+1
 15198  0029C6  C02C  F017         	movff	i2_fround$1525+2,i2___ftmul@f1+2
 15199  0029CA  ECDD  F01F         	call	i2___ftmul	;wreg free
 15200  0029CE  C015  F027         	movff	?i2___ftmul,i2_fround$1526
 15201  0029D2  C016  F028         	movff	?i2___ftmul+1,i2_fround$1526+1
 15202  0029D6  C017  F029         	movff	?i2___ftmul+2,i2_fround$1526+2
 15203                           
 15204                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15205  0029DA  C027  F015         	movff	i2_fround$1526,i2___ftmul@f1
 15206  0029DE  C028  F016         	movff	i2_fround$1526+1,i2___ftmul@f1+1
 15207  0029E2  C029  F017         	movff	i2_fround$1526+2,i2___ftmul@f1+2
 15208  0029E6  0E00               	movlw	0
 15209  0029E8  6E18               	movwf	i2___ftmul@f2,c
 15210  0029EA  0E00               	movlw	0
 15211  0029EC  6E19               	movwf	i2___ftmul@f2+1,c
 15212  0029EE  0E3F               	movlw	63
 15213  0029F0  6E1A               	movwf	i2___ftmul@f2+2,c
 15214  0029F2  ECDD  F01F         	call	i2___ftmul	;wreg free
 15215  0029F6  C015  F024         	movff	?i2___ftmul,?i2_fround
 15216  0029FA  C016  F025         	movff	?i2___ftmul+1,?i2_fround+1
 15217  0029FE  C017  F026         	movff	?i2___ftmul+2,?i2_fround+2
 15218  002A02  0012               	return	
 15219  002A04                     i2l5830:
 15220                           
 15221                           ;doprnt.c: 415: else if(prec > 10)
 15222  002A04  0E0A               	movlw	10
 15223  002A06  642D               	cpfsgt	i2fround@prec,c
 15224  002A08  D05D               	goto	i2l5838
 15225                           
 15226                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 15227  002A0A  0E00               	movlw	0
 15228  002A0C  6E12               	movwf	i2___wmul@multiplicand+1,c
 15229  002A0E  0E03               	movlw	3
 15230  002A10  6E11               	movwf	i2___wmul@multiplicand,c
 15231  002A12  0E00               	movlw	0
 15232  002A14  6E04               	movwf	i2___awmod@divisor+1,c
 15233  002A16  0E0A               	movlw	10
 15234  002A18  6E03               	movwf	i2___awmod@divisor,c
 15235  002A1A  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 15236  002A1E  6A02               	clrf	i2___awmod@dividend+1,c
 15237  002A20  EC04  F026         	call	i2___awmod	;wreg free
 15238  002A24  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 15239  002A28  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 15240  002A2C  ECD8  F028         	call	i2___wmul	;wreg free
 15241  002A30  0E59               	movlw	low __npowers_
 15242  002A32  240F               	addwf	?i2___wmul,w,c
 15243  002A34  6EF6               	movwf	tblptrl,c
 15244  002A36  0EFE               	movlw	high __npowers_
 15245  002A38  2010               	addwfc	?i2___wmul+1,w,c
 15246  002A3A  6EF7               	movwf	tblptrh,c
 15247  002A3C                     	if	0	;There are less than 3 active tblptr bytes
 15248  002A3C                     	endif
 15249  002A3C  0009               	tblrd		*+
 15250  002A3E  CFF5 F018          	movff	tablat,i2___ftmul@f2
 15251  002A42  0009               	tblrd		*+
 15252  002A44  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 15253  002A48  000A               	tblrd		*-
 15254  002A4A  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 15255  002A4E  0E00               	movlw	0
 15256  002A50  6E0A               	movwf	i2___awdiv@divisor+1,c
 15257  002A52  0E0A               	movlw	10
 15258  002A54  6E09               	movwf	i2___awdiv@divisor,c
 15259  002A56  C02D  F007         	movff	i2fround@prec,i2___awdiv@dividend
 15260  002A5A  6A08               	clrf	i2___awdiv@dividend+1,c
 15261  002A5C  EC07  F025         	call	i2___awdiv	;wreg free
 15262  002A60  0E09               	movlw	9
 15263  002A62  2407               	addwf	?i2___awdiv,w,c
 15264  002A64  6E0F               	movwf	i2___wmul@multiplier,c
 15265  002A66  0E00               	movlw	0
 15266  002A68  2008               	addwfc	?i2___awdiv+1,w,c
 15267  002A6A  6E10               	movwf	i2___wmul@multiplier+1,c
 15268  002A6C  0E00               	movlw	0
 15269  002A6E  6E12               	movwf	i2___wmul@multiplicand+1,c
 15270  002A70  0E03               	movlw	3
 15271  002A72  6E11               	movwf	i2___wmul@multiplicand,c
 15272  002A74  ECD8  F028         	call	i2___wmul	;wreg free
 15273  002A78  0E59               	movlw	low __npowers_
 15274  002A7A  240F               	addwf	?i2___wmul,w,c
 15275  002A7C  6EF6               	movwf	tblptrl,c
 15276  002A7E  0EFE               	movlw	high __npowers_
 15277  002A80  2010               	addwfc	?i2___wmul+1,w,c
 15278  002A82  6EF7               	movwf	tblptrh,c
 15279  002A84                     	if	0	;There are less than 3 active tblptr bytes
 15280  002A84                     	endif
 15281  002A84  0009               	tblrd		*+
 15282  002A86  CFF5 F015          	movff	tablat,i2___ftmul@f1
 15283  002A8A  0009               	tblrd		*+
 15284  002A8C  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 15285  002A90  000A               	tblrd		*-
 15286  002A92  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 15287  002A96  ECDD  F01F         	call	i2___ftmul	;wreg free
 15288  002A9A  C015  F02A         	movff	?i2___ftmul,i2_fround$1525
 15289  002A9E  C016  F02B         	movff	?i2___ftmul+1,i2_fround$1525+1
 15290  002AA2  C017  F02C         	movff	?i2___ftmul+2,i2_fround$1525+2
 15291                           
 15292                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 15293  002AA6  C02A  F015         	movff	i2_fround$1525,i2___ftmul@f1
 15294  002AAA  C02B  F016         	movff	i2_fround$1525+1,i2___ftmul@f1+1
 15295  002AAE  C02C  F017         	movff	i2_fround$1525+2,i2___ftmul@f1+2
 15296  002AB2  0E00               	movlw	0
 15297  002AB4  6E18               	movwf	i2___ftmul@f2,c
 15298  002AB6  0E00               	movlw	0
 15299  002AB8  6E19               	movwf	i2___ftmul@f2+1,c
 15300  002ABA  0E3F               	movlw	63
 15301  002ABC  6E1A               	movwf	i2___ftmul@f2+2,c
 15302  002ABE  ECDD  F01F         	call	i2___ftmul	;wreg free
 15303  002AC2  D799               	goto	L13
 15304  002AC4                     i2l5838:
 15305                           
 15306                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 15307  002AC4  502D               	movf	i2fround@prec,w,c
 15308  002AC6  0D03               	mullw	3
 15309  002AC8  0E59               	movlw	low __npowers_
 15310  002ACA  24F3               	addwf	prodl,w,c
 15311  002ACC  6EF6               	movwf	tblptrl,c
 15312  002ACE  0EFE               	movlw	high __npowers_
 15313  002AD0  20F4               	addwfc	prodh,w,c
 15314  002AD2  6EF7               	movwf	tblptrh,c
 15315  002AD4                     	if	0	;There are less than 3 active tblptr bytes
 15316  002AD4                     	endif
 15317  002AD4  0009               	tblrd		*+
 15318  002AD6  CFF5 F015          	movff	tablat,i2___ftmul@f1
 15319  002ADA  0009               	tblrd		*+
 15320  002ADC  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 15321  002AE0  000A               	tblrd		*-
 15322  002AE2  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 15323  002AE6  0E00               	movlw	0
 15324  002AE8  6E18               	movwf	i2___ftmul@f2,c
 15325  002AEA  0E00               	movlw	0
 15326  002AEC  6E19               	movwf	i2___ftmul@f2+1,c
 15327  002AEE  0E3F               	movlw	63
 15328  002AF0  6E1A               	movwf	i2___ftmul@f2+2,c
 15329  002AF2  ECDD  F01F         	call	i2___ftmul	;wreg free
 15330  002AF6  C015  F024         	movff	?i2___ftmul,?i2_fround
 15331  002AFA  C016  F025         	movff	?i2___ftmul+1,?i2_fround+1
 15332  002AFE  C017  F026         	movff	?i2___ftmul+2,?i2_fround+2
 15333  002B02  0012               	return	
 15334  002B04                     __end_ofi2_fround:
 15335                           	opt stack 0
 15336                           pclatu	equ	0xFFB
 15337                           pclath	equ	0xFFA
 15338                           tblptru	equ	0xFF8
 15339                           tblptrh	equ	0xFF7
 15340                           tblptrl	equ	0xFF6
 15341                           tablat	equ	0xFF5
 15342                           prodh	equ	0xFF4
 15343                           prodl	equ	0xFF3
 15344                           intcon	equ	0xFF2
 15345                           intcon3	equ	0xFF0
 15346                           postinc0	equ	0xFEE
 15347                           fsr0h	equ	0xFEA
 15348                           fsr0l	equ	0xFE9
 15349                           wreg	equ	0xFE8
 15350                           postdec1	equ	0xFE5
 15351                           fsr1h	equ	0xFE2
 15352                           fsr1l	equ	0xFE1
 15353                           indf2	equ	0xFDF
 15354                           postinc2	equ	0xFDE
 15355                           postdec2	equ	0xFDD
 15356                           fsr2h	equ	0xFDA
 15357                           fsr2l	equ	0xFD9
 15358                           status	equ	0xFD8
 15359                           
 15360 ;; *************** function i2___wmul *****************
 15361 ;; Defined at:
 15362 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 15363 ;; Parameters:    Size  Location     Type
 15364 ;;  multiplier      2   14[COMRAM] unsigned int 
 15365 ;;  multiplicand    2   16[COMRAM] unsigned int 
 15366 ;; Auto vars:     Size  Location     Type
 15367 ;;  __wmul          2   18[COMRAM] unsigned int 
 15368 ;; Return value:  Size  Location     Type
 15369 ;;                  2   14[COMRAM] unsigned int 
 15370 ;; Registers used:
 15371 ;;		wreg, status,2, status,0, prodl, prodh
 15372 ;; Tracked objects:
 15373 ;;		On entry : 0/0
 15374 ;;		On exit  : 0/0
 15375 ;;		Unchanged: 0/0
 15376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15377 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15378 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15380 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15381 ;;Total ram usage:        6 bytes
 15382 ;; Hardware stack levels used:    1
 15383 ;; This function calls:
 15384 ;;		Nothing
 15385 ;; This function is called by:
 15386 ;;		i2_fround
 15387 ;;		i2_scale
 15388 ;;		i2_printf
 15389 ;; This function uses a non-reentrant model
 15390 ;;
 15391                           
 15392                           	psect	text50
 15393  0051B0                     __ptext50:
 15394                           	opt stack 0
 15395  0051B0                     i2___wmul:
 15396                           	opt stack 21
 15397                           
 15398                           ;incstack = 0
 15399  0051B0  500F               	movf	i2___wmul@multiplier,w,c
 15400  0051B2  0211               	mulwf	i2___wmul@multiplicand,c
 15401  0051B4  CFF3 F013          	movff	prodl,i2___wmul@product
 15402  0051B8  CFF4 F014          	movff	prodh,i2___wmul@product+1
 15403  0051BC  500F               	movf	i2___wmul@multiplier,w,c
 15404  0051BE  0212               	mulwf	i2___wmul@multiplicand+1,c
 15405  0051C0  50F3               	movf	prodl,w,c
 15406  0051C2  2614               	addwf	i2___wmul@product+1,f,c
 15407  0051C4  5010               	movf	i2___wmul@multiplier+1,w,c
 15408  0051C6  0211               	mulwf	i2___wmul@multiplicand,c
 15409  0051C8  50F3               	movf	prodl,w,c
 15410  0051CA  2614               	addwf	i2___wmul@product+1,f,c
 15411  0051CC  C013  F00F         	movff	i2___wmul@product,?i2___wmul
 15412  0051D0  C014  F010         	movff	i2___wmul@product+1,?i2___wmul+1
 15413  0051D4  0012               	return	
 15414  0051D6                     __end_ofi2___wmul:
 15415                           	opt stack 0
 15416                           pclatu	equ	0xFFB
 15417                           pclath	equ	0xFFA
 15418                           tblptru	equ	0xFF8
 15419                           tblptrh	equ	0xFF7
 15420                           tblptrl	equ	0xFF6
 15421                           tablat	equ	0xFF5
 15422                           prodh	equ	0xFF4
 15423                           prodl	equ	0xFF3
 15424                           intcon	equ	0xFF2
 15425                           intcon3	equ	0xFF0
 15426                           postinc0	equ	0xFEE
 15427                           fsr0h	equ	0xFEA
 15428                           fsr0l	equ	0xFE9
 15429                           wreg	equ	0xFE8
 15430                           postdec1	equ	0xFE5
 15431                           fsr1h	equ	0xFE2
 15432                           fsr1l	equ	0xFE1
 15433                           indf2	equ	0xFDF
 15434                           postinc2	equ	0xFDE
 15435                           postdec2	equ	0xFDD
 15436                           fsr2h	equ	0xFDA
 15437                           fsr2l	equ	0xFD9
 15438                           status	equ	0xFD8
 15439                           
 15440 ;; *************** function i2___ftmul *****************
 15441 ;; Defined at:
 15442 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 15443 ;; Parameters:    Size  Location     Type
 15444 ;;  f1              3   20[COMRAM] float 
 15445 ;;  f2              3   23[COMRAM] float 
 15446 ;; Auto vars:     Size  Location     Type
 15447 ;;  __ftmul         3   30[COMRAM] unsigned um
 15448 ;;  __ftmul         1   34[COMRAM] unsigned char 
 15449 ;;  __ftmul         1   33[COMRAM] unsigned char 
 15450 ;;  __ftmul         1   29[COMRAM] unsigned char 
 15451 ;; Return value:  Size  Location     Type
 15452 ;;                  3   20[COMRAM] float 
 15453 ;; Registers used:
 15454 ;;		wreg, status,2, status,0, cstack
 15455 ;; Tracked objects:
 15456 ;;		On entry : 0/0
 15457 ;;		On exit  : 0/0
 15458 ;;		Unchanged: 0/0
 15459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15460 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15461 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15462 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15463 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15464 ;;Total ram usage:       15 bytes
 15465 ;; Hardware stack levels used:    1
 15466 ;; Hardware stack levels required when called:    1
 15467 ;; This function calls:
 15468 ;;		i2___ftpack
 15469 ;; This function is called by:
 15470 ;;		i2_fround
 15471 ;;		i2_scale
 15472 ;;		i2_printf
 15473 ;; This function uses a non-reentrant model
 15474 ;;
 15475                           
 15476                           	psect	text51
 15477  003FBA                     __ptext51:
 15478                           	opt stack 0
 15479  003FBA                     i2___ftmul:
 15480                           	opt stack 20
 15481                           
 15482                           ;incstack = 0
 15483  003FBA  C017  F01B         	movff	i2___ftmul@f1+2,??i2___ftmul
 15484  003FBE  6A1C               	clrf	(??i2___ftmul+1)& (0+255),c
 15485  003FC0  6A1D               	clrf	(??i2___ftmul+2)& (0+255),c
 15486  003FC2  3416               	rlcf	i2___ftmul@f1+1,w,c
 15487  003FC4  361B               	rlcf	??i2___ftmul& (0+255),f,c
 15488  003FC6  E301               	bnc	u541_41
 15489  003FC8  801C               	bsf	(??i2___ftmul+1)& (0+255),0,c
 15490  003FCA                     u541_41:
 15491  003FCA  501B               	movf	??i2___ftmul,w,c
 15492  003FCC  6E1E               	movwf	i2___ftmul@exp,c
 15493  003FCE  501E               	movf	i2___ftmul@exp,w,c
 15494  003FD0  A4D8               	btfss	status,2,c
 15495  003FD2  D007               	goto	i2l5252
 15496  003FD4  0E00               	movlw	0
 15497  003FD6  6E15               	movwf	?i2___ftmul,c
 15498  003FD8  0E00               	movlw	0
 15499  003FDA  6E16               	movwf	?i2___ftmul+1,c
 15500  003FDC  0E00               	movlw	0
 15501  003FDE  6E17               	movwf	?i2___ftmul+2,c
 15502  003FE0  0012               	return	
 15503  003FE2                     i2l5252:
 15504  003FE2  C01A  F01B         	movff	i2___ftmul@f2+2,??i2___ftmul
 15505  003FE6  6A1C               	clrf	(??i2___ftmul+1)& (0+255),c
 15506  003FE8  6A1D               	clrf	(??i2___ftmul+2)& (0+255),c
 15507  003FEA  3419               	rlcf	i2___ftmul@f2+1,w,c
 15508  003FEC  361B               	rlcf	??i2___ftmul& (0+255),f,c
 15509  003FEE  E301               	bnc	u543_41
 15510  003FF0  801C               	bsf	(??i2___ftmul+1)& (0+255),0,c
 15511  003FF2                     u543_41:
 15512  003FF2  501B               	movf	??i2___ftmul,w,c
 15513  003FF4  6E23               	movwf	i2___ftmul@sign,c
 15514  003FF6  5023               	movf	i2___ftmul@sign,w,c
 15515  003FF8  A4D8               	btfss	status,2,c
 15516  003FFA  D007               	goto	i2l5258
 15517  003FFC  0E00               	movlw	0
 15518  003FFE  6E15               	movwf	?i2___ftmul,c
 15519  004000  0E00               	movlw	0
 15520  004002  6E16               	movwf	?i2___ftmul+1,c
 15521  004004  0E00               	movlw	0
 15522  004006  6E17               	movwf	?i2___ftmul+2,c
 15523  004008  0012               	return	
 15524  00400A                     i2l5258:
 15525  00400A  5023               	movf	i2___ftmul@sign,w,c
 15526  00400C  0F7B               	addlw	123
 15527  00400E  261E               	addwf	i2___ftmul@exp,f,c
 15528  004010  C017  F023         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 15529  004014  501A               	movf	i2___ftmul@f2+2,w,c
 15530  004016  1A23               	xorwf	i2___ftmul@sign,f,c
 15531  004018  0E80               	movlw	128
 15532  00401A  1623               	andwf	i2___ftmul@sign,f,c
 15533  00401C  8E16               	bsf	i2___ftmul@f1+1,7,c
 15534  00401E  8E19               	bsf	i2___ftmul@f2+1,7,c
 15535  004020  0EFF               	movlw	255
 15536  004022  1618               	andwf	i2___ftmul@f2,f,c
 15537  004024  0EFF               	movlw	255
 15538  004026  1619               	andwf	i2___ftmul@f2+1,f,c
 15539  004028  0E00               	movlw	0
 15540  00402A  161A               	andwf	i2___ftmul@f2+2,f,c
 15541  00402C  0E00               	movlw	0
 15542  00402E  6E1F               	movwf	i2___ftmul@f3_as_product,c
 15543  004030  0E00               	movlw	0
 15544  004032  6E20               	movwf	i2___ftmul@f3_as_product+1,c
 15545  004034  0E00               	movlw	0
 15546  004036  6E21               	movwf	i2___ftmul@f3_as_product+2,c
 15547  004038  0E07               	movlw	7
 15548  00403A  6E22               	movwf	i2___ftmul@cntr,c
 15549  00403C                     i2l5272:
 15550  00403C  A015               	btfss	i2___ftmul@f1,0,c
 15551  00403E  D006               	goto	i2l5276
 15552  004040  5018               	movf	i2___ftmul@f2,w,c
 15553  004042  261F               	addwf	i2___ftmul@f3_as_product,f,c
 15554  004044  5019               	movf	i2___ftmul@f2+1,w,c
 15555  004046  2220               	addwfc	i2___ftmul@f3_as_product+1,f,c
 15556  004048  501A               	movf	i2___ftmul@f2+2,w,c
 15557  00404A  2221               	addwfc	i2___ftmul@f3_as_product+2,f,c
 15558  00404C                     i2l5276:
 15559  00404C  90D8               	bcf	status,0,c
 15560  00404E  3217               	rrcf	i2___ftmul@f1+2,f,c
 15561  004050  3216               	rrcf	i2___ftmul@f1+1,f,c
 15562  004052  3215               	rrcf	i2___ftmul@f1,f,c
 15563  004054  90D8               	bcf	status,0,c
 15564  004056  3618               	rlcf	i2___ftmul@f2,f,c
 15565  004058  3619               	rlcf	i2___ftmul@f2+1,f,c
 15566  00405A  361A               	rlcf	i2___ftmul@f2+2,f,c
 15567  00405C  2E22               	decfsz	i2___ftmul@cntr,f,c
 15568  00405E  D7EE               	goto	i2l5272
 15569  004060  0E09               	movlw	9
 15570  004062  6E22               	movwf	i2___ftmul@cntr,c
 15571  004064                     i2l5282:
 15572  004064  A015               	btfss	i2___ftmul@f1,0,c
 15573  004066  D006               	goto	i2l5286
 15574  004068  5018               	movf	i2___ftmul@f2,w,c
 15575  00406A  261F               	addwf	i2___ftmul@f3_as_product,f,c
 15576  00406C  5019               	movf	i2___ftmul@f2+1,w,c
 15577  00406E  2220               	addwfc	i2___ftmul@f3_as_product+1,f,c
 15578  004070  501A               	movf	i2___ftmul@f2+2,w,c
 15579  004072  2221               	addwfc	i2___ftmul@f3_as_product+2,f,c
 15580  004074                     i2l5286:
 15581  004074  90D8               	bcf	status,0,c
 15582  004076  3217               	rrcf	i2___ftmul@f1+2,f,c
 15583  004078  3216               	rrcf	i2___ftmul@f1+1,f,c
 15584  00407A  3215               	rrcf	i2___ftmul@f1,f,c
 15585  00407C  90D8               	bcf	status,0,c
 15586  00407E  3221               	rrcf	i2___ftmul@f3_as_product+2,f,c
 15587  004080  3220               	rrcf	i2___ftmul@f3_as_product+1,f,c
 15588  004082  321F               	rrcf	i2___ftmul@f3_as_product,f,c
 15589  004084  2E22               	decfsz	i2___ftmul@cntr,f,c
 15590  004086  D7EE               	goto	i2l5282
 15591  004088  C01F  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 15592  00408C  C020  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 15593  004090  C021  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 15594  004094  C01E  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 15595  004098  C023  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 15596  00409C  EC35  F023         	call	i2___ftpack	;wreg free
 15597  0040A0  C001  F015         	movff	?i2___ftpack,?i2___ftmul
 15598  0040A4  C002  F016         	movff	?i2___ftpack+1,?i2___ftmul+1
 15599  0040A8  C003  F017         	movff	?i2___ftpack+2,?i2___ftmul+2
 15600  0040AC  0012               	return	
 15601  0040AE                     __end_ofi2___ftmul:
 15602                           	opt stack 0
 15603                           pclatu	equ	0xFFB
 15604                           pclath	equ	0xFFA
 15605                           tblptru	equ	0xFF8
 15606                           tblptrh	equ	0xFF7
 15607                           tblptrl	equ	0xFF6
 15608                           tablat	equ	0xFF5
 15609                           prodh	equ	0xFF4
 15610                           prodl	equ	0xFF3
 15611                           intcon	equ	0xFF2
 15612                           intcon3	equ	0xFF0
 15613                           postinc0	equ	0xFEE
 15614                           fsr0h	equ	0xFEA
 15615                           fsr0l	equ	0xFE9
 15616                           wreg	equ	0xFE8
 15617                           postdec1	equ	0xFE5
 15618                           fsr1h	equ	0xFE2
 15619                           fsr1l	equ	0xFE1
 15620                           indf2	equ	0xFDF
 15621                           postinc2	equ	0xFDE
 15622                           postdec2	equ	0xFDD
 15623                           fsr2h	equ	0xFDA
 15624                           fsr2l	equ	0xFD9
 15625                           status	equ	0xFD8
 15626                           
 15627 ;; *************** function i2___awdiv *****************
 15628 ;; Defined at:
 15629 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 15630 ;; Parameters:    Size  Location     Type
 15631 ;;  dividend        2    6[COMRAM] int 
 15632 ;;  divisor         2    8[COMRAM] int 
 15633 ;; Auto vars:     Size  Location     Type
 15634 ;;  __awdiv         2   12[COMRAM] int 
 15635 ;;  __awdiv         1   11[COMRAM] unsigned char 
 15636 ;;  __awdiv         1   10[COMRAM] unsigned char 
 15637 ;; Return value:  Size  Location     Type
 15638 ;;                  2    6[COMRAM] int 
 15639 ;; Registers used:
 15640 ;;		wreg, status,2, status,0
 15641 ;; Tracked objects:
 15642 ;;		On entry : 0/0
 15643 ;;		On exit  : 0/0
 15644 ;;		Unchanged: 0/0
 15645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15646 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15647 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15649 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15650 ;;Total ram usage:        8 bytes
 15651 ;; Hardware stack levels used:    1
 15652 ;; This function calls:
 15653 ;;		Nothing
 15654 ;; This function is called by:
 15655 ;;		i2_fround
 15656 ;;		i2_scale
 15657 ;;		i2_printf
 15658 ;; This function uses a non-reentrant model
 15659 ;;
 15660                           
 15661                           	psect	text52
 15662  004A0E                     __ptext52:
 15663                           	opt stack 0
 15664  004A0E                     i2___awdiv:
 15665                           	opt stack 21
 15666                           
 15667                           ;incstack = 0
 15668  004A0E  0E00               	movlw	0
 15669  004A10  6E0C               	movwf	i2___awdiv@sign,c
 15670  004A12  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 15671  004A14  D006               	goto	i2l5104
 15672  004A16  6C09               	negf	i2___awdiv@divisor,c
 15673  004A18  1E0A               	comf	i2___awdiv@divisor+1,f,c
 15674  004A1A  B0D8               	btfsc	status,0,c
 15675  004A1C  2A0A               	incf	i2___awdiv@divisor+1,f,c
 15676  004A1E  0E01               	movlw	1
 15677  004A20  6E0C               	movwf	i2___awdiv@sign,c
 15678  004A22                     i2l5104:
 15679  004A22  AE08               	btfss	i2___awdiv@dividend+1,7,c
 15680  004A24  D006               	goto	i2l5110
 15681  004A26  6C07               	negf	i2___awdiv@dividend,c
 15682  004A28  1E08               	comf	i2___awdiv@dividend+1,f,c
 15683  004A2A  B0D8               	btfsc	status,0,c
 15684  004A2C  2A08               	incf	i2___awdiv@dividend+1,f,c
 15685  004A2E  0E01               	movlw	1
 15686  004A30  1A0C               	xorwf	i2___awdiv@sign,f,c
 15687  004A32                     i2l5110:
 15688  004A32  0E00               	movlw	0
 15689  004A34  6E0E               	movwf	i2___awdiv@quotient+1,c
 15690  004A36  0E00               	movlw	0
 15691  004A38  6E0D               	movwf	i2___awdiv@quotient,c
 15692  004A3A  5009               	movf	i2___awdiv@divisor,w,c
 15693  004A3C  100A               	iorwf	i2___awdiv@divisor+1,w,c
 15694  004A3E  B4D8               	btfsc	status,2,c
 15695  004A40  D01C               	goto	i2l5132
 15696  004A42  0E01               	movlw	1
 15697  004A44  6E0B               	movwf	i2___awdiv@counter,c
 15698  004A46  D004               	goto	i2l5118
 15699  004A48                     i2l5116:
 15700  004A48  90D8               	bcf	status,0,c
 15701  004A4A  3609               	rlcf	i2___awdiv@divisor,f,c
 15702  004A4C  360A               	rlcf	i2___awdiv@divisor+1,f,c
 15703  004A4E  2A0B               	incf	i2___awdiv@counter,f,c
 15704  004A50                     i2l5118:
 15705  004A50  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 15706  004A52  D7FA               	goto	i2l5116
 15707  004A54                     i2l5120:
 15708  004A54  90D8               	bcf	status,0,c
 15709  004A56  360D               	rlcf	i2___awdiv@quotient,f,c
 15710  004A58  360E               	rlcf	i2___awdiv@quotient+1,f,c
 15711  004A5A  5009               	movf	i2___awdiv@divisor,w,c
 15712  004A5C  5C07               	subwf	i2___awdiv@dividend,w,c
 15713  004A5E  500A               	movf	i2___awdiv@divisor+1,w,c
 15714  004A60  5808               	subwfb	i2___awdiv@dividend+1,w,c
 15715  004A62  A0D8               	btfss	status,0,c
 15716  004A64  D005               	goto	i2l5128
 15717  004A66  5009               	movf	i2___awdiv@divisor,w,c
 15718  004A68  5E07               	subwf	i2___awdiv@dividend,f,c
 15719  004A6A  500A               	movf	i2___awdiv@divisor+1,w,c
 15720  004A6C  5A08               	subwfb	i2___awdiv@dividend+1,f,c
 15721  004A6E  800D               	bsf	i2___awdiv@quotient,0,c
 15722  004A70                     i2l5128:
 15723  004A70  90D8               	bcf	status,0,c
 15724  004A72  320A               	rrcf	i2___awdiv@divisor+1,f,c
 15725  004A74  3209               	rrcf	i2___awdiv@divisor,f,c
 15726  004A76  2E0B               	decfsz	i2___awdiv@counter,f,c
 15727  004A78  D7ED               	goto	i2l5120
 15728  004A7A                     i2l5132:
 15729  004A7A  500C               	movf	i2___awdiv@sign,w,c
 15730  004A7C  B4D8               	btfsc	status,2,c
 15731  004A7E  D004               	goto	i2l5136
 15732  004A80  6C0D               	negf	i2___awdiv@quotient,c
 15733  004A82  1E0E               	comf	i2___awdiv@quotient+1,f,c
 15734  004A84  B0D8               	btfsc	status,0,c
 15735  004A86  2A0E               	incf	i2___awdiv@quotient+1,f,c
 15736  004A88                     i2l5136:
 15737  004A88  C00D  F007         	movff	i2___awdiv@quotient,?i2___awdiv
 15738  004A8C  C00E  F008         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 15739  004A90  0012               	return	
 15740  004A92                     __end_ofi2___awdiv:
 15741                           	opt stack 0
 15742                           pclatu	equ	0xFFB
 15743                           pclath	equ	0xFFA
 15744                           tblptru	equ	0xFF8
 15745                           tblptrh	equ	0xFF7
 15746                           tblptrl	equ	0xFF6
 15747                           tablat	equ	0xFF5
 15748                           prodh	equ	0xFF4
 15749                           prodl	equ	0xFF3
 15750                           intcon	equ	0xFF2
 15751                           intcon3	equ	0xFF0
 15752                           postinc0	equ	0xFEE
 15753                           fsr0h	equ	0xFEA
 15754                           fsr0l	equ	0xFE9
 15755                           wreg	equ	0xFE8
 15756                           postdec1	equ	0xFE5
 15757                           fsr1h	equ	0xFE2
 15758                           fsr1l	equ	0xFE1
 15759                           indf2	equ	0xFDF
 15760                           postinc2	equ	0xFDE
 15761                           postdec2	equ	0xFDD
 15762                           fsr2h	equ	0xFDA
 15763                           fsr2l	equ	0xFD9
 15764                           status	equ	0xFD8
 15765                           
 15766 ;; *************** function i2__tdiv_to_l_ *****************
 15767 ;; Defined at:
 15768 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
 15769 ;; Parameters:    Size  Location     Type
 15770 ;;  f1              3    0[COMRAM] float 
 15771 ;;  f2              3    3[COMRAM] float 
 15772 ;; Auto vars:     Size  Location     Type
 15773 ;;  _tdiv_to_l_     4    9[COMRAM] unsigned long 
 15774 ;;  _tdiv_to_l_     1   14[COMRAM] unsigned char 
 15775 ;;  _tdiv_to_l_     1   13[COMRAM] unsigned char 
 15776 ;; Return value:  Size  Location     Type
 15777 ;;                  4    0[COMRAM] unsigned long 
 15778 ;; Registers used:
 15779 ;;		wreg, status,2, status,0
 15780 ;; Tracked objects:
 15781 ;;		On entry : 0/0
 15782 ;;		On exit  : 0/0
 15783 ;;		Unchanged: 0/0
 15784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15785 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15786 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15787 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15788 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15789 ;;Total ram usage:       15 bytes
 15790 ;; Hardware stack levels used:    1
 15791 ;; This function calls:
 15792 ;;		Nothing
 15793 ;; This function is called by:
 15794 ;;		i2_printf
 15795 ;; This function uses a non-reentrant model
 15796 ;;
 15797                           
 15798                           	psect	text53
 15799  00380C                     __ptext53:
 15800                           	opt stack 0
 15801  00380C                     i2__tdiv_to_l_:
 15802                           	opt stack 22
 15803                           
 15804                           ;incstack = 0
 15805  00380C  C003  F007         	movff	i2__tdiv_to_l_@f1+2,??i2__tdiv_to_l_
 15806  003810  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 15807  003812  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 15808  003814  3402               	rlcf	i2__tdiv_to_l_@f1+1,w,c
 15809  003816  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 15810  003818  E301               	bnc	u642_41
 15811  00381A  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 15812  00381C                     u642_41:
 15813  00381C  5007               	movf	??i2__tdiv_to_l_,w,c
 15814  00381E  6E0F               	movwf	i2__tdiv_to_l_@exp1,c
 15815  003820  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 15816  003822  A4D8               	btfss	status,2,c
 15817  003824  D009               	goto	i2l5946
 15818  003826  0E00               	movlw	0
 15819  003828  6E01               	movwf	?i2__tdiv_to_l_,c
 15820  00382A  0E00               	movlw	0
 15821  00382C  6E02               	movwf	?i2__tdiv_to_l_+1,c
 15822  00382E  0E00               	movlw	0
 15823  003830  6E03               	movwf	?i2__tdiv_to_l_+2,c
 15824  003832  0E00               	movlw	0
 15825  003834  6E04               	movwf	?i2__tdiv_to_l_+3,c
 15826  003836  0012               	return	
 15827  003838                     i2l5946:
 15828  003838  C006  F007         	movff	i2__tdiv_to_l_@f2+2,??i2__tdiv_to_l_
 15829  00383C  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 15830  00383E  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 15831  003840  3405               	rlcf	i2__tdiv_to_l_@f2+1,w,c
 15832  003842  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 15833  003844  E301               	bnc	u644_41
 15834  003846  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 15835  003848                     u644_41:
 15836  003848  5007               	movf	??i2__tdiv_to_l_,w,c
 15837  00384A  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 15838  00384C  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 15839  00384E  A4D8               	btfss	status,2,c
 15840  003850  D009               	goto	i2l5952
 15841  003852  0E00               	movlw	0
 15842  003854  6E01               	movwf	?i2__tdiv_to_l_,c
 15843  003856  0E00               	movlw	0
 15844  003858  6E02               	movwf	?i2__tdiv_to_l_+1,c
 15845  00385A  0E00               	movlw	0
 15846  00385C  6E03               	movwf	?i2__tdiv_to_l_+2,c
 15847  00385E  0E00               	movlw	0
 15848  003860  6E04               	movwf	?i2__tdiv_to_l_+3,c
 15849  003862  0012               	return	
 15850  003864                     i2l5952:
 15851  003864  8E02               	bsf	i2__tdiv_to_l_@f1+1,7,c
 15852  003866  0EFF               	movlw	255
 15853  003868  1601               	andwf	i2__tdiv_to_l_@f1,f,c
 15854  00386A  0EFF               	movlw	255
 15855  00386C  1602               	andwf	i2__tdiv_to_l_@f1+1,f,c
 15856  00386E  0E00               	movlw	0
 15857  003870  1603               	andwf	i2__tdiv_to_l_@f1+2,f,c
 15858  003872  8E05               	bsf	i2__tdiv_to_l_@f2+1,7,c
 15859  003874  0EFF               	movlw	255
 15860  003876  1604               	andwf	i2__tdiv_to_l_@f2,f,c
 15861  003878  0EFF               	movlw	255
 15862  00387A  1605               	andwf	i2__tdiv_to_l_@f2+1,f,c
 15863  00387C  0E00               	movlw	0
 15864  00387E  1606               	andwf	i2__tdiv_to_l_@f2+2,f,c
 15865  003880  0E00               	movlw	0
 15866  003882  6E0A               	movwf	i2__tdiv_to_l_@quot,c
 15867  003884  0E00               	movlw	0
 15868  003886  6E0B               	movwf	i2__tdiv_to_l_@quot+1,c
 15869  003888  0E00               	movlw	0
 15870  00388A  6E0C               	movwf	i2__tdiv_to_l_@quot+2,c
 15871  00388C  0E00               	movlw	0
 15872  00388E  6E0D               	movwf	i2__tdiv_to_l_@quot+3,c
 15873  003890  0E7F               	movlw	127
 15874  003892  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 15875  003894  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 15876  003896  0F98               	addlw	152
 15877  003898  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 15878  00389A  0E18               	movlw	24
 15879  00389C  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 15880  00389E                     i2l1088:
 15881  00389E  90D8               	bcf	status,0,c
 15882  0038A0  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 15883  0038A2  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 15884  0038A4  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 15885  0038A6  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 15886  0038A8  5004               	movf	i2__tdiv_to_l_@f2,w,c
 15887  0038AA  5C01               	subwf	i2__tdiv_to_l_@f1,w,c
 15888  0038AC  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 15889  0038AE  5802               	subwfb	i2__tdiv_to_l_@f1+1,w,c
 15890  0038B0  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 15891  0038B2  5803               	subwfb	i2__tdiv_to_l_@f1+2,w,c
 15892  0038B4  A0D8               	btfss	status,0,c
 15893  0038B6  D007               	goto	i2l1089
 15894  0038B8  5004               	movf	i2__tdiv_to_l_@f2,w,c
 15895  0038BA  5E01               	subwf	i2__tdiv_to_l_@f1,f,c
 15896  0038BC  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 15897  0038BE  5A02               	subwfb	i2__tdiv_to_l_@f1+1,f,c
 15898  0038C0  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 15899  0038C2  5A03               	subwfb	i2__tdiv_to_l_@f1+2,f,c
 15900  0038C4  800A               	bsf	i2__tdiv_to_l_@quot,0,c
 15901  0038C6                     i2l1089:
 15902  0038C6  90D8               	bcf	status,0,c
 15903  0038C8  3601               	rlcf	i2__tdiv_to_l_@f1,f,c
 15904  0038CA  3602               	rlcf	i2__tdiv_to_l_@f1+1,f,c
 15905  0038CC  3603               	rlcf	i2__tdiv_to_l_@f1+2,f,c
 15906  0038CE  2E0E               	decfsz	i2__tdiv_to_l_@cntr,f,c
 15907  0038D0  D7E6               	goto	i2l1088
 15908  0038D2  AE0F               	btfss	i2__tdiv_to_l_@exp1,7,c
 15909  0038D4  D016               	goto	i2l5986
 15910  0038D6  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 15911  0038D8  0A80               	xorlw	128
 15912  0038DA  0F97               	addlw	151
 15913  0038DC  B0D8               	btfsc	status,0,c
 15914  0038DE  D009               	goto	i2l5982
 15915  0038E0  0E00               	movlw	0
 15916  0038E2  6E01               	movwf	?i2__tdiv_to_l_,c
 15917  0038E4  0E00               	movlw	0
 15918  0038E6  6E02               	movwf	?i2__tdiv_to_l_+1,c
 15919  0038E8  0E00               	movlw	0
 15920  0038EA  6E03               	movwf	?i2__tdiv_to_l_+2,c
 15921  0038EC  0E00               	movlw	0
 15922  0038EE  6E04               	movwf	?i2__tdiv_to_l_+3,c
 15923  0038F0  0012               	return	
 15924  0038F2                     i2l5982:
 15925  0038F2  90D8               	bcf	status,0,c
 15926  0038F4  320D               	rrcf	i2__tdiv_to_l_@quot+3,f,c
 15927  0038F6  320C               	rrcf	i2__tdiv_to_l_@quot+2,f,c
 15928  0038F8  320B               	rrcf	i2__tdiv_to_l_@quot+1,f,c
 15929  0038FA  320A               	rrcf	i2__tdiv_to_l_@quot,f,c
 15930  0038FC  3E0F               	incfsz	i2__tdiv_to_l_@exp1,f,c
 15931  0038FE  D7F9               	goto	i2l5982
 15932  003900  D015               	goto	i2l1095
 15933  003902                     i2l5986:
 15934  003902  0E17               	movlw	23
 15935  003904  640F               	cpfsgt	i2__tdiv_to_l_@exp1,c
 15936  003906  D00F               	goto	i2l5994
 15937  003908  0E00               	movlw	0
 15938  00390A  6E01               	movwf	?i2__tdiv_to_l_,c
 15939  00390C  0E00               	movlw	0
 15940  00390E  6E02               	movwf	?i2__tdiv_to_l_+1,c
 15941  003910  0E00               	movlw	0
 15942  003912  6E03               	movwf	?i2__tdiv_to_l_+2,c
 15943  003914  0E00               	movlw	0
 15944  003916  6E04               	movwf	?i2__tdiv_to_l_+3,c
 15945  003918  0012               	return	
 15946  00391A                     i2l5992:
 15947  00391A  90D8               	bcf	status,0,c
 15948  00391C  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 15949  00391E  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 15950  003920  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 15951  003922  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 15952  003924  060F               	decf	i2__tdiv_to_l_@exp1,f,c
 15953  003926                     i2l5994:
 15954  003926  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 15955  003928  A4D8               	btfss	status,2,c
 15956  00392A  D7F7               	goto	i2l5992
 15957  00392C                     i2l1095:
 15958  00392C  C00A  F001         	movff	i2__tdiv_to_l_@quot,?i2__tdiv_to_l_
 15959  003930  C00B  F002         	movff	i2__tdiv_to_l_@quot+1,?i2__tdiv_to_l_+1
 15960  003934  C00C  F003         	movff	i2__tdiv_to_l_@quot+2,?i2__tdiv_to_l_+2
 15961  003938  C00D  F004         	movff	i2__tdiv_to_l_@quot+3,?i2__tdiv_to_l_+3
 15962  00393C  0012               	return		;funcret
 15963  00393E                     __end_ofi2__tdiv_to_l_:
 15964                           	opt stack 0
 15965                           pclatu	equ	0xFFB
 15966                           pclath	equ	0xFFA
 15967                           tblptru	equ	0xFF8
 15968                           tblptrh	equ	0xFF7
 15969                           tblptrl	equ	0xFF6
 15970                           tablat	equ	0xFF5
 15971                           prodh	equ	0xFF4
 15972                           prodl	equ	0xFF3
 15973                           intcon	equ	0xFF2
 15974                           intcon3	equ	0xFF0
 15975                           postinc0	equ	0xFEE
 15976                           fsr0h	equ	0xFEA
 15977                           fsr0l	equ	0xFE9
 15978                           wreg	equ	0xFE8
 15979                           postdec1	equ	0xFE5
 15980                           fsr1h	equ	0xFE2
 15981                           fsr1l	equ	0xFE1
 15982                           indf2	equ	0xFDF
 15983                           postinc2	equ	0xFDE
 15984                           postdec2	equ	0xFDD
 15985                           fsr2h	equ	0xFDA
 15986                           fsr2l	equ	0xFD9
 15987                           status	equ	0xFD8
 15988                           
 15989 ;; *************** function i2__div_to_l_ *****************
 15990 ;; Defined at:
 15991 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
 15992 ;; Parameters:    Size  Location     Type
 15993 ;;  f1              3    0[COMRAM] unsigned long 
 15994 ;;  f2              3    3[COMRAM] unsigned long 
 15995 ;; Auto vars:     Size  Location     Type
 15996 ;;  _div_to_l_      4    6[COMRAM] unsigned long 
 15997 ;;  _div_to_l_      1   11[COMRAM] unsigned char 
 15998 ;;  _div_to_l_      1   10[COMRAM] unsigned char 
 15999 ;; Return value:  Size  Location     Type
 16000 ;;                  4    0[COMRAM] unsigned long 
 16001 ;; Registers used:
 16002 ;;		wreg, status,2, status,0
 16003 ;; Tracked objects:
 16004 ;;		On entry : 0/0
 16005 ;;		On exit  : 0/0
 16006 ;;		Unchanged: 0/0
 16007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16008 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16009 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16011 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16012 ;;Total ram usage:       12 bytes
 16013 ;; Hardware stack levels used:    1
 16014 ;; This function calls:
 16015 ;;		Nothing
 16016 ;; This function is called by:
 16017 ;;		i2_printf
 16018 ;; This function uses a non-reentrant model
 16019 ;;
 16020                           
 16021                           	psect	text54
 16022  003A6E                     __ptext54:
 16023                           	opt stack 0
 16024  003A6E                     i2__div_to_l_:
 16025                           	opt stack 22
 16026                           
 16027                           ;incstack = 0
 16028  003A6E  3403               	rlcf	i2__div_to_l_@f1+2,w,c
 16029  003A70  3404               	rlcf	i2__div_to_l_@f1+3,w,c
 16030  003A72  6E0C               	movwf	i2__div_to_l_@exp1,c
 16031  003A74  500C               	movf	i2__div_to_l_@exp1,w,c
 16032  003A76  A4D8               	btfss	status,2,c
 16033  003A78  D009               	goto	i2l5886
 16034  003A7A  0E00               	movlw	0
 16035  003A7C  6E01               	movwf	?i2__div_to_l_,c
 16036  003A7E  0E00               	movlw	0
 16037  003A80  6E02               	movwf	?i2__div_to_l_+1,c
 16038  003A82  0E00               	movlw	0
 16039  003A84  6E03               	movwf	?i2__div_to_l_+2,c
 16040  003A86  0E00               	movlw	0
 16041  003A88  6E04               	movwf	?i2__div_to_l_+3,c
 16042  003A8A  0012               	return	
 16043  003A8C                     i2l5886:
 16044  003A8C  3406               	rlcf	i2__div_to_l_@f2+2,w,c
 16045  003A8E  3407               	rlcf	i2__div_to_l_@f2+3,w,c
 16046  003A90  6E0B               	movwf	i2__div_to_l_@cntr,c
 16047  003A92  500B               	movf	i2__div_to_l_@cntr,w,c
 16048  003A94  A4D8               	btfss	status,2,c
 16049  003A96  D009               	goto	i2l5892
 16050  003A98  0E00               	movlw	0
 16051  003A9A  6E01               	movwf	?i2__div_to_l_,c
 16052  003A9C  0E00               	movlw	0
 16053  003A9E  6E02               	movwf	?i2__div_to_l_+1,c
 16054  003AA0  0E00               	movlw	0
 16055  003AA2  6E03               	movwf	?i2__div_to_l_+2,c
 16056  003AA4  0E00               	movlw	0
 16057  003AA6  6E04               	movwf	?i2__div_to_l_+3,c
 16058  003AA8  0012               	return	
 16059  003AAA                     i2l5892:
 16060  003AAA  8E03               	bsf	i2__div_to_l_@f1+2,7,c
 16061  003AAC  0EFF               	movlw	255
 16062  003AAE  1601               	andwf	i2__div_to_l_@f1,f,c
 16063  003AB0  0EFF               	movlw	255
 16064  003AB2  1602               	andwf	i2__div_to_l_@f1+1,f,c
 16065  003AB4  0EFF               	movlw	255
 16066  003AB6  1603               	andwf	i2__div_to_l_@f1+2,f,c
 16067  003AB8  0E00               	movlw	0
 16068  003ABA  1604               	andwf	i2__div_to_l_@f1+3,f,c
 16069  003ABC  8E06               	bsf	i2__div_to_l_@f2+2,7,c
 16070  003ABE  0EFF               	movlw	255
 16071  003AC0  1604               	andwf	i2__div_to_l_@f2,f,c
 16072  003AC2  0EFF               	movlw	255
 16073  003AC4  1605               	andwf	i2__div_to_l_@f2+1,f,c
 16074  003AC6  0EFF               	movlw	255
 16075  003AC8  1606               	andwf	i2__div_to_l_@f2+2,f,c
 16076  003ACA  0E00               	movlw	0
 16077  003ACC  1607               	andwf	i2__div_to_l_@f2+3,f,c
 16078  003ACE  0E00               	movlw	0
 16079  003AD0  6E07               	movwf	i2__div_to_l_@quot,c
 16080  003AD2  0E00               	movlw	0
 16081  003AD4  6E08               	movwf	i2__div_to_l_@quot+1,c
 16082  003AD6  0E00               	movlw	0
 16083  003AD8  6E09               	movwf	i2__div_to_l_@quot+2,c
 16084  003ADA  0E00               	movlw	0
 16085  003ADC  6E0A               	movwf	i2__div_to_l_@quot+3,c
 16086  003ADE  0E7F               	movlw	127
 16087  003AE0  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 16088  003AE2  500B               	movf	i2__div_to_l_@cntr,w,c
 16089  003AE4  0FA0               	addlw	160
 16090  003AE6  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 16091  003AE8  0E20               	movlw	32
 16092  003AEA  6E0B               	movwf	i2__div_to_l_@cntr,c
 16093  003AEC                     i2l5906:
 16094  003AEC  90D8               	bcf	status,0,c
 16095  003AEE  3607               	rlcf	i2__div_to_l_@quot,f,c
 16096  003AF0  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 16097  003AF2  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 16098  003AF4  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 16099  003AF6  5004               	movf	i2__div_to_l_@f2,w,c
 16100  003AF8  5C01               	subwf	i2__div_to_l_@f1,w,c
 16101  003AFA  5005               	movf	i2__div_to_l_@f2+1,w,c
 16102  003AFC  5802               	subwfb	i2__div_to_l_@f1+1,w,c
 16103  003AFE  5006               	movf	i2__div_to_l_@f2+2,w,c
 16104  003B00  5803               	subwfb	i2__div_to_l_@f1+2,w,c
 16105  003B02  5007               	movf	i2__div_to_l_@f2+3,w,c
 16106  003B04  5804               	subwfb	i2__div_to_l_@f1+3,w,c
 16107  003B06  A0D8               	btfss	status,0,c
 16108  003B08  D009               	goto	i2l5914
 16109  003B0A  5004               	movf	i2__div_to_l_@f2,w,c
 16110  003B0C  5E01               	subwf	i2__div_to_l_@f1,f,c
 16111  003B0E  5005               	movf	i2__div_to_l_@f2+1,w,c
 16112  003B10  5A02               	subwfb	i2__div_to_l_@f1+1,f,c
 16113  003B12  5006               	movf	i2__div_to_l_@f2+2,w,c
 16114  003B14  5A03               	subwfb	i2__div_to_l_@f1+2,f,c
 16115  003B16  5007               	movf	i2__div_to_l_@f2+3,w,c
 16116  003B18  5A04               	subwfb	i2__div_to_l_@f1+3,f,c
 16117  003B1A  8007               	bsf	i2__div_to_l_@quot,0,c
 16118  003B1C                     i2l5914:
 16119  003B1C  90D8               	bcf	status,0,c
 16120  003B1E  3601               	rlcf	i2__div_to_l_@f1,f,c
 16121  003B20  3602               	rlcf	i2__div_to_l_@f1+1,f,c
 16122  003B22  3603               	rlcf	i2__div_to_l_@f1+2,f,c
 16123  003B24  3604               	rlcf	i2__div_to_l_@f1+3,f,c
 16124  003B26  2E0B               	decfsz	i2__div_to_l_@cntr,f,c
 16125  003B28  D7E1               	goto	i2l5906
 16126  003B2A  AE0C               	btfss	i2__div_to_l_@exp1,7,c
 16127  003B2C  D016               	goto	i2l5930
 16128  003B2E  500C               	movf	i2__div_to_l_@exp1,w,c
 16129  003B30  0A80               	xorlw	128
 16130  003B32  0F9F               	addlw	159
 16131  003B34  B0D8               	btfsc	status,0,c
 16132  003B36  D009               	goto	i2l5926
 16133  003B38  0E00               	movlw	0
 16134  003B3A  6E01               	movwf	?i2__div_to_l_,c
 16135  003B3C  0E00               	movlw	0
 16136  003B3E  6E02               	movwf	?i2__div_to_l_+1,c
 16137  003B40  0E00               	movlw	0
 16138  003B42  6E03               	movwf	?i2__div_to_l_+2,c
 16139  003B44  0E00               	movlw	0
 16140  003B46  6E04               	movwf	?i2__div_to_l_+3,c
 16141  003B48  0012               	return	
 16142  003B4A                     i2l5926:
 16143  003B4A  90D8               	bcf	status,0,c
 16144  003B4C  320A               	rrcf	i2__div_to_l_@quot+3,f,c
 16145  003B4E  3209               	rrcf	i2__div_to_l_@quot+2,f,c
 16146  003B50  3208               	rrcf	i2__div_to_l_@quot+1,f,c
 16147  003B52  3207               	rrcf	i2__div_to_l_@quot,f,c
 16148  003B54  3E0C               	incfsz	i2__div_to_l_@exp1,f,c
 16149  003B56  D7F9               	goto	i2l5926
 16150  003B58  D015               	goto	i2l991
 16151  003B5A                     i2l5930:
 16152  003B5A  0E1F               	movlw	31
 16153  003B5C  640C               	cpfsgt	i2__div_to_l_@exp1,c
 16154  003B5E  D00F               	goto	i2l5938
 16155  003B60  0E00               	movlw	0
 16156  003B62  6E01               	movwf	?i2__div_to_l_,c
 16157  003B64  0E00               	movlw	0
 16158  003B66  6E02               	movwf	?i2__div_to_l_+1,c
 16159  003B68  0E00               	movlw	0
 16160  003B6A  6E03               	movwf	?i2__div_to_l_+2,c
 16161  003B6C  0E00               	movlw	0
 16162  003B6E  6E04               	movwf	?i2__div_to_l_+3,c
 16163  003B70  0012               	return	
 16164  003B72                     i2l5936:
 16165  003B72  90D8               	bcf	status,0,c
 16166  003B74  3607               	rlcf	i2__div_to_l_@quot,f,c
 16167  003B76  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 16168  003B78  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 16169  003B7A  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 16170  003B7C  060C               	decf	i2__div_to_l_@exp1,f,c
 16171  003B7E                     i2l5938:
 16172  003B7E  500C               	movf	i2__div_to_l_@exp1,w,c
 16173  003B80  A4D8               	btfss	status,2,c
 16174  003B82  D7F7               	goto	i2l5936
 16175  003B84                     i2l991:
 16176  003B84  C007  F001         	movff	i2__div_to_l_@quot,?i2__div_to_l_
 16177  003B88  C008  F002         	movff	i2__div_to_l_@quot+1,?i2__div_to_l_+1
 16178  003B8C  C009  F003         	movff	i2__div_to_l_@quot+2,?i2__div_to_l_+2
 16179  003B90  C00A  F004         	movff	i2__div_to_l_@quot+3,?i2__div_to_l_+3
 16180  003B94  0012               	return		;funcret
 16181  003B96                     __end_ofi2__div_to_l_:
 16182                           	opt stack 0
 16183                           pclatu	equ	0xFFB
 16184                           pclath	equ	0xFFA
 16185                           tblptru	equ	0xFF8
 16186                           tblptrh	equ	0xFF7
 16187                           tblptrl	equ	0xFF6
 16188                           tablat	equ	0xFF5
 16189                           prodh	equ	0xFF4
 16190                           prodl	equ	0xFF3
 16191                           intcon	equ	0xFF2
 16192                           intcon3	equ	0xFF0
 16193                           postinc0	equ	0xFEE
 16194                           fsr0h	equ	0xFEA
 16195                           fsr0l	equ	0xFE9
 16196                           wreg	equ	0xFE8
 16197                           postdec1	equ	0xFE5
 16198                           fsr1h	equ	0xFE2
 16199                           fsr1l	equ	0xFE1
 16200                           indf2	equ	0xFDF
 16201                           postinc2	equ	0xFDE
 16202                           postdec2	equ	0xFDD
 16203                           fsr2h	equ	0xFDA
 16204                           fsr2l	equ	0xFD9
 16205                           status	equ	0xFD8
 16206                           
 16207 ;; *************** function i2___lltoft *****************
 16208 ;; Defined at:
 16209 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 16210 ;; Parameters:    Size  Location     Type
 16211 ;;  c               4    8[COMRAM] unsigned long 
 16212 ;; Auto vars:     Size  Location     Type
 16213 ;;  __lltoft        1   16[COMRAM] unsigned char 
 16214 ;; Return value:  Size  Location     Type
 16215 ;;                  3    8[COMRAM] float 
 16216 ;; Registers used:
 16217 ;;		wreg, status,2, status,0, cstack
 16218 ;; Tracked objects:
 16219 ;;		On entry : 0/0
 16220 ;;		On exit  : 0/0
 16221 ;;		Unchanged: 0/0
 16222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16223 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16224 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16225 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16226 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16227 ;;Total ram usage:        9 bytes
 16228 ;; Hardware stack levels used:    1
 16229 ;; Hardware stack levels required when called:    1
 16230 ;; This function calls:
 16231 ;;		i2___ftpack
 16232 ;; This function is called by:
 16233 ;;		i2_printf
 16234 ;; This function uses a non-reentrant model
 16235 ;;
 16236                           
 16237                           	psect	text55
 16238  004D44                     __ptext55:
 16239                           	opt stack 0
 16240  004D44                     i2___lltoft:
 16241                           	opt stack 21
 16242                           
 16243                           ;incstack = 0
 16244  004D44  0E8E               	movlw	142
 16245  004D46  6E11               	movwf	i2___lltoft@exp,c
 16246  004D48  D006               	goto	i2l6126
 16247  004D4A                     i2l6124:
 16248  004D4A  90D8               	bcf	status,0,c
 16249  004D4C  320C               	rrcf	i2___lltoft@c+3,f,c
 16250  004D4E  320B               	rrcf	i2___lltoft@c+2,f,c
 16251  004D50  320A               	rrcf	i2___lltoft@c+1,f,c
 16252  004D52  3209               	rrcf	i2___lltoft@c,f,c
 16253  004D54  2A11               	incf	i2___lltoft@exp,f,c
 16254  004D56                     i2l6126:
 16255  004D56  0E00               	movlw	0
 16256  004D58  1409               	andwf	i2___lltoft@c,w,c
 16257  004D5A  6E0D               	movwf	??i2___lltoft& (0+255),c
 16258  004D5C  0E00               	movlw	0
 16259  004D5E  140A               	andwf	i2___lltoft@c+1,w,c
 16260  004D60  6E0E               	movwf	(??i2___lltoft+1)& (0+255),c
 16261  004D62  0E00               	movlw	0
 16262  004D64  140B               	andwf	i2___lltoft@c+2,w,c
 16263  004D66  6E0F               	movwf	(??i2___lltoft+2)& (0+255),c
 16264  004D68  0EFF               	movlw	255
 16265  004D6A  140C               	andwf	i2___lltoft@c+3,w,c
 16266  004D6C  6E10               	movwf	(??i2___lltoft+3)& (0+255),c
 16267  004D6E  500D               	movf	??i2___lltoft,w,c
 16268  004D70  100E               	iorwf	??i2___lltoft+1,w,c
 16269  004D72  100F               	iorwf	??i2___lltoft+2,w,c
 16270  004D74  1010               	iorwf	??i2___lltoft+3,w,c
 16271  004D76  A4D8               	btfss	status,2,c
 16272  004D78  D7E8               	goto	i2l6124
 16273  004D7A  C009  F001         	movff	i2___lltoft@c,i2___ftpack@arg
 16274  004D7E  C00A  F002         	movff	i2___lltoft@c+1,i2___ftpack@arg+1
 16275  004D82  C00B  F003         	movff	i2___lltoft@c+2,i2___ftpack@arg+2
 16276  004D86  C011  F004         	movff	i2___lltoft@exp,i2___ftpack@exp
 16277  004D8A  0E00               	movlw	0
 16278  004D8C  6E05               	movwf	i2___ftpack@sign,c
 16279  004D8E  EC35  F023         	call	i2___ftpack	;wreg free
 16280  004D92  C001  F009         	movff	?i2___ftpack,?i2___lltoft
 16281  004D96  C002  F00A         	movff	?i2___ftpack+1,?i2___lltoft+1
 16282  004D9A  C003  F00B         	movff	?i2___ftpack+2,?i2___lltoft+2
 16283  004D9E  0012               	return	
 16284  004DA0                     __end_ofi2___lltoft:
 16285                           	opt stack 0
 16286                           pclatu	equ	0xFFB
 16287                           pclath	equ	0xFFA
 16288                           tblptru	equ	0xFF8
 16289                           tblptrh	equ	0xFF7
 16290                           tblptrl	equ	0xFF6
 16291                           tablat	equ	0xFF5
 16292                           prodh	equ	0xFF4
 16293                           prodl	equ	0xFF3
 16294                           intcon	equ	0xFF2
 16295                           intcon3	equ	0xFF0
 16296                           postinc0	equ	0xFEE
 16297                           fsr0h	equ	0xFEA
 16298                           fsr0l	equ	0xFE9
 16299                           wreg	equ	0xFE8
 16300                           postdec1	equ	0xFE5
 16301                           fsr1h	equ	0xFE2
 16302                           fsr1l	equ	0xFE1
 16303                           indf2	equ	0xFDF
 16304                           postinc2	equ	0xFDE
 16305                           postdec2	equ	0xFDD
 16306                           fsr2h	equ	0xFDA
 16307                           fsr2l	equ	0xFD9
 16308                           status	equ	0xFD8
 16309                           
 16310 ;; *************** function i2___llmod *****************
 16311 ;; Defined at:
 16312 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
 16313 ;; Parameters:    Size  Location     Type
 16314 ;;  dividend        4   13[COMRAM] unsigned long 
 16315 ;;  divisor         4   17[COMRAM] unsigned long 
 16316 ;; Auto vars:     Size  Location     Type
 16317 ;;  __llmod         1   21[COMRAM] unsigned char 
 16318 ;; Return value:  Size  Location     Type
 16319 ;;                  4   13[COMRAM] unsigned long 
 16320 ;; Registers used:
 16321 ;;		wreg, status,2, status,0
 16322 ;; Tracked objects:
 16323 ;;		On entry : 0/0
 16324 ;;		On exit  : 0/0
 16325 ;;		Unchanged: 0/0
 16326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16327 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16328 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16330 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16331 ;;Total ram usage:        9 bytes
 16332 ;; Hardware stack levels used:    1
 16333 ;; This function calls:
 16334 ;;		Nothing
 16335 ;; This function is called by:
 16336 ;;		i2_printf
 16337 ;; This function uses a non-reentrant model
 16338 ;;
 16339                           
 16340                           	psect	text56
 16341  004C78                     __ptext56:
 16342                           	opt stack 0
 16343  004C78                     i2___llmod:
 16344                           	opt stack 22
 16345                           
 16346                           ;incstack = 0
 16347  004C78  5012               	movf	i2___llmod@divisor,w,c
 16348  004C7A  1013               	iorwf	i2___llmod@divisor+1,w,c
 16349  004C7C  1014               	iorwf	i2___llmod@divisor+2,w,c
 16350  004C7E  1015               	iorwf	i2___llmod@divisor+3,w,c
 16351  004C80  B4D8               	btfsc	status,2,c
 16352  004C82  D024               	goto	i2l1180
 16353  004C84  0E01               	movlw	1
 16354  004C86  6E16               	movwf	i2___llmod@counter,c
 16355  004C88  D006               	goto	i2l6112
 16356  004C8A                     i2l6110:
 16357  004C8A  90D8               	bcf	status,0,c
 16358  004C8C  3612               	rlcf	i2___llmod@divisor,f,c
 16359  004C8E  3613               	rlcf	i2___llmod@divisor+1,f,c
 16360  004C90  3614               	rlcf	i2___llmod@divisor+2,f,c
 16361  004C92  3615               	rlcf	i2___llmod@divisor+3,f,c
 16362  004C94  2A16               	incf	i2___llmod@counter,f,c
 16363  004C96                     i2l6112:
 16364  004C96  AE15               	btfss	i2___llmod@divisor+3,7,c
 16365  004C98  D7F8               	goto	i2l6110
 16366  004C9A                     i2l6114:
 16367  004C9A  5012               	movf	i2___llmod@divisor,w,c
 16368  004C9C  5C0E               	subwf	i2___llmod@dividend,w,c
 16369  004C9E  5013               	movf	i2___llmod@divisor+1,w,c
 16370  004CA0  580F               	subwfb	i2___llmod@dividend+1,w,c
 16371  004CA2  5014               	movf	i2___llmod@divisor+2,w,c
 16372  004CA4  5810               	subwfb	i2___llmod@dividend+2,w,c
 16373  004CA6  5015               	movf	i2___llmod@divisor+3,w,c
 16374  004CA8  5811               	subwfb	i2___llmod@dividend+3,w,c
 16375  004CAA  A0D8               	btfss	status,0,c
 16376  004CAC  D008               	goto	i2l6118
 16377  004CAE  5012               	movf	i2___llmod@divisor,w,c
 16378  004CB0  5E0E               	subwf	i2___llmod@dividend,f,c
 16379  004CB2  5013               	movf	i2___llmod@divisor+1,w,c
 16380  004CB4  5A0F               	subwfb	i2___llmod@dividend+1,f,c
 16381  004CB6  5014               	movf	i2___llmod@divisor+2,w,c
 16382  004CB8  5A10               	subwfb	i2___llmod@dividend+2,f,c
 16383  004CBA  5015               	movf	i2___llmod@divisor+3,w,c
 16384  004CBC  5A11               	subwfb	i2___llmod@dividend+3,f,c
 16385  004CBE                     i2l6118:
 16386  004CBE  90D8               	bcf	status,0,c
 16387  004CC0  3215               	rrcf	i2___llmod@divisor+3,f,c
 16388  004CC2  3214               	rrcf	i2___llmod@divisor+2,f,c
 16389  004CC4  3213               	rrcf	i2___llmod@divisor+1,f,c
 16390  004CC6  3212               	rrcf	i2___llmod@divisor,f,c
 16391  004CC8  2E16               	decfsz	i2___llmod@counter,f,c
 16392  004CCA  D7E7               	goto	i2l6114
 16393  004CCC                     i2l1180:
 16394  004CCC  C00E  F00E         	movff	i2___llmod@dividend,?i2___llmod
 16395  004CD0  C00F  F00F         	movff	i2___llmod@dividend+1,?i2___llmod+1
 16396  004CD4  C010  F010         	movff	i2___llmod@dividend+2,?i2___llmod+2
 16397  004CD8  C011  F011         	movff	i2___llmod@dividend+3,?i2___llmod+3
 16398  004CDC  0012               	return		;funcret
 16399  004CDE                     __end_ofi2___llmod:
 16400                           	opt stack 0
 16401                           pclatu	equ	0xFFB
 16402                           pclath	equ	0xFFA
 16403                           tblptru	equ	0xFF8
 16404                           tblptrh	equ	0xFF7
 16405                           tblptrl	equ	0xFF6
 16406                           tablat	equ	0xFF5
 16407                           prodh	equ	0xFF4
 16408                           prodl	equ	0xFF3
 16409                           intcon	equ	0xFF2
 16410                           intcon3	equ	0xFF0
 16411                           postinc0	equ	0xFEE
 16412                           fsr0h	equ	0xFEA
 16413                           fsr0l	equ	0xFE9
 16414                           wreg	equ	0xFE8
 16415                           postdec1	equ	0xFE5
 16416                           fsr1h	equ	0xFE2
 16417                           fsr1l	equ	0xFE1
 16418                           indf2	equ	0xFDF
 16419                           postinc2	equ	0xFDE
 16420                           postdec2	equ	0xFDD
 16421                           fsr2h	equ	0xFDA
 16422                           fsr2l	equ	0xFD9
 16423                           status	equ	0xFD8
 16424                           
 16425 ;; *************** function i2___lldiv *****************
 16426 ;; Defined at:
 16427 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 16428 ;; Parameters:    Size  Location     Type
 16429 ;;  dividend        4    0[COMRAM] unsigned long 
 16430 ;;  divisor         4    4[COMRAM] unsigned long 
 16431 ;; Auto vars:     Size  Location     Type
 16432 ;;  __lldiv         4    8[COMRAM] unsigned long 
 16433 ;;  __lldiv         1   12[COMRAM] unsigned char 
 16434 ;; Return value:  Size  Location     Type
 16435 ;;                  4    0[COMRAM] unsigned long 
 16436 ;; Registers used:
 16437 ;;		wreg, status,2, status,0
 16438 ;; Tracked objects:
 16439 ;;		On entry : 0/0
 16440 ;;		On exit  : 0/0
 16441 ;;		Unchanged: 0/0
 16442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16443 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16444 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16446 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16447 ;;Total ram usage:       13 bytes
 16448 ;; Hardware stack levels used:    1
 16449 ;; This function calls:
 16450 ;;		Nothing
 16451 ;; This function is called by:
 16452 ;;		i2_printf
 16453 ;; This function uses a non-reentrant model
 16454 ;;
 16455                           
 16456                           	psect	text57
 16457  004A92                     __ptext57:
 16458                           	opt stack 0
 16459  004A92                     i2___lldiv:
 16460                           	opt stack 22
 16461                           
 16462                           ;incstack = 0
 16463  004A92  0E00               	movlw	0
 16464  004A94  6E09               	movwf	i2___lldiv@quotient,c
 16465  004A96  0E00               	movlw	0
 16466  004A98  6E0A               	movwf	i2___lldiv@quotient+1,c
 16467  004A9A  0E00               	movlw	0
 16468  004A9C  6E0B               	movwf	i2___lldiv@quotient+2,c
 16469  004A9E  0E00               	movlw	0
 16470  004AA0  6E0C               	movwf	i2___lldiv@quotient+3,c
 16471  004AA2  5005               	movf	i2___lldiv@divisor,w,c
 16472  004AA4  1006               	iorwf	i2___lldiv@divisor+1,w,c
 16473  004AA6  1007               	iorwf	i2___lldiv@divisor+2,w,c
 16474  004AA8  1008               	iorwf	i2___lldiv@divisor+3,w,c
 16475  004AAA  B4D8               	btfsc	status,2,c
 16476  004AAC  D02A               	goto	i2l1170
 16477  004AAE  0E01               	movlw	1
 16478  004AB0  6E0D               	movwf	i2___lldiv@counter,c
 16479  004AB2  D006               	goto	i2l6092
 16480  004AB4                     i2l6090:
 16481  004AB4  90D8               	bcf	status,0,c
 16482  004AB6  3605               	rlcf	i2___lldiv@divisor,f,c
 16483  004AB8  3606               	rlcf	i2___lldiv@divisor+1,f,c
 16484  004ABA  3607               	rlcf	i2___lldiv@divisor+2,f,c
 16485  004ABC  3608               	rlcf	i2___lldiv@divisor+3,f,c
 16486  004ABE  2A0D               	incf	i2___lldiv@counter,f,c
 16487  004AC0                     i2l6092:
 16488  004AC0  AE08               	btfss	i2___lldiv@divisor+3,7,c
 16489  004AC2  D7F8               	goto	i2l6090
 16490  004AC4                     i2l6094:
 16491  004AC4  90D8               	bcf	status,0,c
 16492  004AC6  3609               	rlcf	i2___lldiv@quotient,f,c
 16493  004AC8  360A               	rlcf	i2___lldiv@quotient+1,f,c
 16494  004ACA  360B               	rlcf	i2___lldiv@quotient+2,f,c
 16495  004ACC  360C               	rlcf	i2___lldiv@quotient+3,f,c
 16496  004ACE  5005               	movf	i2___lldiv@divisor,w,c
 16497  004AD0  5C01               	subwf	i2___lldiv@dividend,w,c
 16498  004AD2  5006               	movf	i2___lldiv@divisor+1,w,c
 16499  004AD4  5802               	subwfb	i2___lldiv@dividend+1,w,c
 16500  004AD6  5007               	movf	i2___lldiv@divisor+2,w,c
 16501  004AD8  5803               	subwfb	i2___lldiv@dividend+2,w,c
 16502  004ADA  5008               	movf	i2___lldiv@divisor+3,w,c
 16503  004ADC  5804               	subwfb	i2___lldiv@dividend+3,w,c
 16504  004ADE  A0D8               	btfss	status,0,c
 16505  004AE0  D009               	goto	i2l6102
 16506  004AE2  5005               	movf	i2___lldiv@divisor,w,c
 16507  004AE4  5E01               	subwf	i2___lldiv@dividend,f,c
 16508  004AE6  5006               	movf	i2___lldiv@divisor+1,w,c
 16509  004AE8  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 16510  004AEA  5007               	movf	i2___lldiv@divisor+2,w,c
 16511  004AEC  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 16512  004AEE  5008               	movf	i2___lldiv@divisor+3,w,c
 16513  004AF0  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 16514  004AF2  8009               	bsf	i2___lldiv@quotient,0,c
 16515  004AF4                     i2l6102:
 16516  004AF4  90D8               	bcf	status,0,c
 16517  004AF6  3208               	rrcf	i2___lldiv@divisor+3,f,c
 16518  004AF8  3207               	rrcf	i2___lldiv@divisor+2,f,c
 16519  004AFA  3206               	rrcf	i2___lldiv@divisor+1,f,c
 16520  004AFC  3205               	rrcf	i2___lldiv@divisor,f,c
 16521  004AFE  2E0D               	decfsz	i2___lldiv@counter,f,c
 16522  004B00  D7E1               	goto	i2l6094
 16523  004B02                     i2l1170:
 16524  004B02  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 16525  004B06  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 16526  004B0A  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 16527  004B0E  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 16528  004B12  0012               	return		;funcret
 16529  004B14                     __end_ofi2___lldiv:
 16530                           	opt stack 0
 16531                           pclatu	equ	0xFFB
 16532                           pclath	equ	0xFFA
 16533                           tblptru	equ	0xFF8
 16534                           tblptrh	equ	0xFF7
 16535                           tblptrl	equ	0xFF6
 16536                           tablat	equ	0xFF5
 16537                           prodh	equ	0xFF4
 16538                           prodl	equ	0xFF3
 16539                           intcon	equ	0xFF2
 16540                           intcon3	equ	0xFF0
 16541                           postinc0	equ	0xFEE
 16542                           fsr0h	equ	0xFEA
 16543                           fsr0l	equ	0xFE9
 16544                           wreg	equ	0xFE8
 16545                           postdec1	equ	0xFE5
 16546                           fsr1h	equ	0xFE2
 16547                           fsr1l	equ	0xFE1
 16548                           indf2	equ	0xFDF
 16549                           postinc2	equ	0xFDE
 16550                           postdec2	equ	0xFDD
 16551                           fsr2h	equ	0xFDA
 16552                           fsr2l	equ	0xFD9
 16553                           status	equ	0xFD8
 16554                           
 16555 ;; *************** function i2___fttol *****************
 16556 ;; Defined at:
 16557 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 16558 ;; Parameters:    Size  Location     Type
 16559 ;;  f1              3   42[COMRAM] float 
 16560 ;; Auto vars:     Size  Location     Type
 16561 ;;  __fttol         4   52[COMRAM] unsigned long 
 16562 ;;  __fttol         1   56[COMRAM] unsigned char 
 16563 ;;  __fttol         1   51[COMRAM] unsigned char 
 16564 ;; Return value:  Size  Location     Type
 16565 ;;                  4   42[COMRAM] long 
 16566 ;; Registers used:
 16567 ;;		wreg, status,2, status,0
 16568 ;; Tracked objects:
 16569 ;;		On entry : 0/0
 16570 ;;		On exit  : 0/0
 16571 ;;		Unchanged: 0/0
 16572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16573 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16574 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16575 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16576 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16577 ;;Total ram usage:       15 bytes
 16578 ;; Hardware stack levels used:    1
 16579 ;; This function calls:
 16580 ;;		Nothing
 16581 ;; This function is called by:
 16582 ;;		i2_printf
 16583 ;; This function uses a non-reentrant model
 16584 ;;
 16585                           
 16586                           	psect	text58
 16587  0040AE                     __ptext58:
 16588                           	opt stack 0
 16589  0040AE                     i2___fttol:
 16590                           	opt stack 22
 16591                           
 16592                           ;incstack = 0
 16593  0040AE  C02D  F02F         	movff	i2___fttol@f1+2,??i2___fttol
 16594  0040B2  6A30               	clrf	(??i2___fttol+1)& (0+255),c
 16595  0040B4  6A31               	clrf	(??i2___fttol+2)& (0+255),c
 16596  0040B6  342C               	rlcf	i2___fttol@f1+1,w,c
 16597  0040B8  362F               	rlcf	??i2___fttol& (0+255),f,c
 16598  0040BA  E301               	bnc	u656_41
 16599  0040BC  8030               	bsf	(??i2___fttol+1)& (0+255),0,c
 16600  0040BE                     u656_41:
 16601  0040BE  502F               	movf	??i2___fttol,w,c
 16602  0040C0  6E39               	movwf	i2___fttol@exp1,c
 16603  0040C2  5039               	movf	i2___fttol@exp1,w,c
 16604  0040C4  A4D8               	btfss	status,2,c
 16605  0040C6  D009               	goto	i2l6032
 16606  0040C8  0E00               	movlw	0
 16607  0040CA  6E2B               	movwf	?i2___fttol,c
 16608  0040CC  0E00               	movlw	0
 16609  0040CE  6E2C               	movwf	?i2___fttol+1,c
 16610  0040D0  0E00               	movlw	0
 16611  0040D2  6E2D               	movwf	?i2___fttol+2,c
 16612  0040D4  0E00               	movlw	0
 16613  0040D6  6E2E               	movwf	?i2___fttol+3,c
 16614  0040D8  0012               	return	
 16615  0040DA                     i2l6032:
 16616  0040DA  0E17               	movlw	23
 16617  0040DC  6E2F               	movwf	??i2___fttol& (0+255),c
 16618  0040DE  C02B  F030         	movff	i2___fttol@f1,??i2___fttol+1
 16619  0040E2  C02C  F031         	movff	i2___fttol@f1+1,??i2___fttol+2
 16620  0040E6  C02D  F032         	movff	i2___fttol@f1+2,??i2___fttol+3
 16621  0040EA  282F               	incf	??i2___fttol,w,c
 16622  0040EC  6E33               	movwf	(??i2___fttol+4)& (0+255),c
 16623  0040EE  D004               	goto	i2u658_40
 16624  0040F0                     i2u658_45:
 16625  0040F0  90D8               	bcf	status,0,c
 16626  0040F2  3232               	rrcf	??i2___fttol+3,f,c
 16627  0040F4  3231               	rrcf	??i2___fttol+2,f,c
 16628  0040F6  3230               	rrcf	??i2___fttol+1,f,c
 16629  0040F8                     i2u658_40:
 16630  0040F8  2E33               	decfsz	(??i2___fttol+4)& (0+255),f,c
 16631  0040FA  D7FA               	goto	i2u658_45
 16632  0040FC  5030               	movf	??i2___fttol+1,w,c
 16633  0040FE  6E34               	movwf	i2___fttol@sign1,c
 16634  004100  8E2C               	bsf	i2___fttol@f1+1,7,c
 16635  004102  0EFF               	movlw	255
 16636  004104  162B               	andwf	i2___fttol@f1,f,c
 16637  004106  0EFF               	movlw	255
 16638  004108  162C               	andwf	i2___fttol@f1+1,f,c
 16639  00410A  0E00               	movlw	0
 16640  00410C  162D               	andwf	i2___fttol@f1+2,f,c
 16641  00410E  502B               	movf	i2___fttol@f1,w,c
 16642  004110  6E35               	movwf	i2___fttol@lval,c
 16643  004112  502C               	movf	i2___fttol@f1+1,w,c
 16644  004114  6E36               	movwf	i2___fttol@lval+1,c
 16645  004116  502D               	movf	i2___fttol@f1+2,w,c
 16646  004118  6E37               	movwf	i2___fttol@lval+2,c
 16647  00411A  6A38               	clrf	i2___fttol@lval+3,c
 16648  00411C  0E8E               	movlw	142
 16649  00411E  5E39               	subwf	i2___fttol@exp1,f,c
 16650  004120  AE39               	btfss	i2___fttol@exp1,7,c
 16651  004122  D016               	goto	i2l6054
 16652  004124  5039               	movf	i2___fttol@exp1,w,c
 16653  004126  0A80               	xorlw	128
 16654  004128  0F8F               	addlw	143
 16655  00412A  B0D8               	btfsc	status,0,c
 16656  00412C  D009               	goto	i2l6050
 16657  00412E  0E00               	movlw	0
 16658  004130  6E2B               	movwf	?i2___fttol,c
 16659  004132  0E00               	movlw	0
 16660  004134  6E2C               	movwf	?i2___fttol+1,c
 16661  004136  0E00               	movlw	0
 16662  004138  6E2D               	movwf	?i2___fttol+2,c
 16663  00413A  0E00               	movlw	0
 16664  00413C  6E2E               	movwf	?i2___fttol+3,c
 16665  00413E  0012               	return	
 16666  004140                     i2l6050:
 16667  004140  90D8               	bcf	status,0,c
 16668  004142  3238               	rrcf	i2___fttol@lval+3,f,c
 16669  004144  3237               	rrcf	i2___fttol@lval+2,f,c
 16670  004146  3236               	rrcf	i2___fttol@lval+1,f,c
 16671  004148  3235               	rrcf	i2___fttol@lval,f,c
 16672  00414A  3E39               	incfsz	i2___fttol@exp1,f,c
 16673  00414C  D7F9               	goto	i2l6050
 16674  00414E  D015               	goto	i2l6064
 16675  004150                     i2l6054:
 16676  004150  0E17               	movlw	23
 16677  004152  6439               	cpfsgt	i2___fttol@exp1,c
 16678  004154  D00F               	goto	i2l6062
 16679  004156  0E00               	movlw	0
 16680  004158  6E2B               	movwf	?i2___fttol,c
 16681  00415A  0E00               	movlw	0
 16682  00415C  6E2C               	movwf	?i2___fttol+1,c
 16683  00415E  0E00               	movlw	0
 16684  004160  6E2D               	movwf	?i2___fttol+2,c
 16685  004162  0E00               	movlw	0
 16686  004164  6E2E               	movwf	?i2___fttol+3,c
 16687  004166  0012               	return	
 16688  004168                     i2l6060:
 16689  004168  90D8               	bcf	status,0,c
 16690  00416A  3635               	rlcf	i2___fttol@lval,f,c
 16691  00416C  3636               	rlcf	i2___fttol@lval+1,f,c
 16692  00416E  3637               	rlcf	i2___fttol@lval+2,f,c
 16693  004170  3638               	rlcf	i2___fttol@lval+3,f,c
 16694  004172  0639               	decf	i2___fttol@exp1,f,c
 16695  004174                     i2l6062:
 16696  004174  5039               	movf	i2___fttol@exp1,w,c
 16697  004176  A4D8               	btfss	status,2,c
 16698  004178  D7F7               	goto	i2l6060
 16699  00417A                     i2l6064:
 16700  00417A  5034               	movf	i2___fttol@sign1,w,c
 16701  00417C  B4D8               	btfsc	status,2,c
 16702  00417E  D008               	goto	i2l6068
 16703  004180  1E38               	comf	i2___fttol@lval+3,f,c
 16704  004182  1E37               	comf	i2___fttol@lval+2,f,c
 16705  004184  1E36               	comf	i2___fttol@lval+1,f,c
 16706  004186  6C35               	negf	i2___fttol@lval,c
 16707  004188  0E00               	movlw	0
 16708  00418A  2236               	addwfc	i2___fttol@lval+1,f,c
 16709  00418C  2237               	addwfc	i2___fttol@lval+2,f,c
 16710  00418E  2238               	addwfc	i2___fttol@lval+3,f,c
 16711  004190                     i2l6068:
 16712  004190  C035  F02B         	movff	i2___fttol@lval,?i2___fttol
 16713  004194  C036  F02C         	movff	i2___fttol@lval+1,?i2___fttol+1
 16714  004198  C037  F02D         	movff	i2___fttol@lval+2,?i2___fttol+2
 16715  00419C  C038  F02E         	movff	i2___fttol@lval+3,?i2___fttol+3
 16716  0041A0  0012               	return	
 16717  0041A2                     __end_ofi2___fttol:
 16718                           	opt stack 0
 16719                           pclatu	equ	0xFFB
 16720                           pclath	equ	0xFFA
 16721                           tblptru	equ	0xFF8
 16722                           tblptrh	equ	0xFF7
 16723                           tblptrl	equ	0xFF6
 16724                           tablat	equ	0xFF5
 16725                           prodh	equ	0xFF4
 16726                           prodl	equ	0xFF3
 16727                           intcon	equ	0xFF2
 16728                           intcon3	equ	0xFF0
 16729                           postinc0	equ	0xFEE
 16730                           fsr0h	equ	0xFEA
 16731                           fsr0l	equ	0xFE9
 16732                           wreg	equ	0xFE8
 16733                           postdec1	equ	0xFE5
 16734                           fsr1h	equ	0xFE2
 16735                           fsr1l	equ	0xFE1
 16736                           indf2	equ	0xFDF
 16737                           postinc2	equ	0xFDE
 16738                           postdec2	equ	0xFDD
 16739                           fsr2h	equ	0xFDA
 16740                           fsr2l	equ	0xFD9
 16741                           status	equ	0xFD8
 16742                           
 16743 ;; *************** function i2___ftsub *****************
 16744 ;; Defined at:
 16745 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 16746 ;; Parameters:    Size  Location     Type
 16747 ;;  f1              3   57[COMRAM] float 
 16748 ;;  f2              3   60[COMRAM] float 
 16749 ;; Auto vars:     Size  Location     Type
 16750 ;;		None
 16751 ;; Return value:  Size  Location     Type
 16752 ;;                  3   57[COMRAM] float 
 16753 ;; Registers used:
 16754 ;;		wreg, status,2, status,0, cstack
 16755 ;; Tracked objects:
 16756 ;;		On entry : 0/0
 16757 ;;		On exit  : 0/0
 16758 ;;		Unchanged: 0/0
 16759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16760 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16763 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16764 ;;Total ram usage:        6 bytes
 16765 ;; Hardware stack levels used:    1
 16766 ;; Hardware stack levels required when called:    2
 16767 ;; This function calls:
 16768 ;;		i2___ftadd
 16769 ;; This function is called by:
 16770 ;;		i2_printf
 16771 ;; This function uses a non-reentrant model
 16772 ;;
 16773                           
 16774                           	psect	text59
 16775  004FEC                     __ptext59:
 16776                           	opt stack 0
 16777  004FEC                     i2___ftsub:
 16778                           	opt stack 20
 16779                           
 16780                           ;incstack = 0
 16781  004FEC  503D               	movf	i2___ftsub@f2,w,c
 16782  004FEE  103E               	iorwf	i2___ftsub@f2+1,w,c
 16783  004FF0  103F               	iorwf	i2___ftsub@f2+2,w,c
 16784  004FF2  B4D8               	btfsc	status,2,c
 16785  004FF4  D006               	goto	i2l6022
 16786  004FF6  0E00               	movlw	0
 16787  004FF8  1A3D               	xorwf	i2___ftsub@f2,f,c
 16788  004FFA  0E00               	movlw	0
 16789  004FFC  1A3E               	xorwf	i2___ftsub@f2+1,f,c
 16790  004FFE  0E80               	movlw	128
 16791  005000  1A3F               	xorwf	i2___ftsub@f2+2,f,c
 16792  005002                     i2l6022:
 16793  005002  C03A  F02E         	movff	i2___ftsub@f1,i2___ftadd@f1
 16794  005006  C03B  F02F         	movff	i2___ftsub@f1+1,i2___ftadd@f1+1
 16795  00500A  C03C  F030         	movff	i2___ftsub@f1+2,i2___ftadd@f1+2
 16796  00500E  C03D  F031         	movff	i2___ftsub@f2,i2___ftadd@f2
 16797  005012  C03E  F032         	movff	i2___ftsub@f2+1,i2___ftadd@f2+1
 16798  005016  C03F  F033         	movff	i2___ftsub@f2+2,i2___ftadd@f2+2
 16799  00501A  EC82  F015         	call	i2___ftadd	;wreg free
 16800  00501E  C02E  F03A         	movff	?i2___ftadd,?i2___ftsub
 16801  005022  C02F  F03B         	movff	?i2___ftadd+1,?i2___ftsub+1
 16802  005026  C030  F03C         	movff	?i2___ftadd+2,?i2___ftsub+2
 16803  00502A  0012               	return	
 16804  00502C                     __end_ofi2___ftsub:
 16805                           	opt stack 0
 16806                           pclatu	equ	0xFFB
 16807                           pclath	equ	0xFFA
 16808                           tblptru	equ	0xFF8
 16809                           tblptrh	equ	0xFF7
 16810                           tblptrl	equ	0xFF6
 16811                           tablat	equ	0xFF5
 16812                           prodh	equ	0xFF4
 16813                           prodl	equ	0xFF3
 16814                           intcon	equ	0xFF2
 16815                           intcon3	equ	0xFF0
 16816                           postinc0	equ	0xFEE
 16817                           fsr0h	equ	0xFEA
 16818                           fsr0l	equ	0xFE9
 16819                           wreg	equ	0xFE8
 16820                           postdec1	equ	0xFE5
 16821                           fsr1h	equ	0xFE2
 16822                           fsr1l	equ	0xFE1
 16823                           indf2	equ	0xFDF
 16824                           postinc2	equ	0xFDE
 16825                           postdec2	equ	0xFDD
 16826                           fsr2h	equ	0xFDA
 16827                           fsr2l	equ	0xFD9
 16828                           status	equ	0xFD8
 16829                           
 16830 ;; *************** function i2___ftadd *****************
 16831 ;; Defined at:
 16832 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 16833 ;; Parameters:    Size  Location     Type
 16834 ;;  f1              3   45[COMRAM] float 
 16835 ;;  f2              3   48[COMRAM] float 
 16836 ;; Auto vars:     Size  Location     Type
 16837 ;;  __ftadd         1   56[COMRAM] unsigned char 
 16838 ;;  __ftadd         1   55[COMRAM] unsigned char 
 16839 ;;  __ftadd         1   54[COMRAM] unsigned char 
 16840 ;; Return value:  Size  Location     Type
 16841 ;;                  3   45[COMRAM] float 
 16842 ;; Registers used:
 16843 ;;		wreg, status,2, status,0, cstack
 16844 ;; Tracked objects:
 16845 ;;		On entry : 0/0
 16846 ;;		On exit  : 0/0
 16847 ;;		Unchanged: 0/0
 16848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16849 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16850 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16851 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16852 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16853 ;;Total ram usage:       12 bytes
 16854 ;; Hardware stack levels used:    1
 16855 ;; Hardware stack levels required when called:    1
 16856 ;; This function calls:
 16857 ;;		i2___ftpack
 16858 ;; This function is called by:
 16859 ;;		i2_printf
 16860 ;;		i2___ftsub
 16861 ;; This function uses a non-reentrant model
 16862 ;;
 16863                           
 16864                           	psect	text60
 16865  002B04                     __ptext60:
 16866                           	opt stack 0
 16867  002B04                     i2___ftadd:
 16868                           	opt stack 20
 16869                           
 16870                           ;incstack = 0
 16871  002B04  C030  F034         	movff	i2___ftadd@f1+2,??i2___ftadd
 16872  002B08  6A35               	clrf	(??i2___ftadd+1)& (0+255),c
 16873  002B0A  6A36               	clrf	(??i2___ftadd+2)& (0+255),c
 16874  002B0C  342F               	rlcf	i2___ftadd@f1+1,w,c
 16875  002B0E  3634               	rlcf	??i2___ftadd& (0+255),f,c
 16876  002B10  E301               	bnc	u520_41
 16877  002B12  8035               	bsf	(??i2___ftadd+1)& (0+255),0,c
 16878  002B14                     u520_41:
 16879  002B14  5034               	movf	??i2___ftadd,w,c
 16880  002B16  6E39               	movwf	i2___ftadd@exp1,c
 16881  002B18  C033  F034         	movff	i2___ftadd@f2+2,??i2___ftadd
 16882  002B1C  6A35               	clrf	(??i2___ftadd+1)& (0+255),c
 16883  002B1E  6A36               	clrf	(??i2___ftadd+2)& (0+255),c
 16884  002B20  3432               	rlcf	i2___ftadd@f2+1,w,c
 16885  002B22  3634               	rlcf	??i2___ftadd& (0+255),f,c
 16886  002B24  E301               	bnc	u521_41
 16887  002B26  8035               	bsf	(??i2___ftadd+1)& (0+255),0,c
 16888  002B28                     u521_41:
 16889  002B28  5034               	movf	??i2___ftadd,w,c
 16890  002B2A  6E38               	movwf	i2___ftadd@exp2,c
 16891  002B2C  5039               	movf	i2___ftadd@exp1,w,c
 16892  002B2E  B4D8               	btfsc	status,2,c
 16893  002B30  D00B               	goto	i2l1046
 16894  002B32  5038               	movf	i2___ftadd@exp2,w,c
 16895  002B34  5C39               	subwf	i2___ftadd@exp1,w,c
 16896  002B36  B0D8               	btfsc	status,0,c
 16897  002B38  D00E               	goto	i2l5184
 16898  002B3A  5039               	movf	i2___ftadd@exp1,w,c
 16899  002B3C  0800               	sublw	0
 16900  002B3E  2438               	addwf	i2___ftadd@exp2,w,c
 16901  002B40  6E34               	movwf	??i2___ftadd& (0+255),c
 16902  002B42  0E18               	movlw	24
 16903  002B44  6434               	cpfsgt	??i2___ftadd,c
 16904  002B46  D007               	goto	i2l5184
 16905  002B48                     i2l1046:
 16906  002B48  C031  F02E         	movff	i2___ftadd@f2,?i2___ftadd
 16907  002B4C  C032  F02F         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 16908  002B50  C033  F030         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 16909  002B54  0012               	return	
 16910  002B56                     i2l5184:
 16911  002B56  5038               	movf	i2___ftadd@exp2,w,c
 16912  002B58  B4D8               	btfsc	status,2,c
 16913  002B5A  D00B               	goto	i2l1050
 16914  002B5C  5039               	movf	i2___ftadd@exp1,w,c
 16915  002B5E  5C38               	subwf	i2___ftadd@exp2,w,c
 16916  002B60  B0D8               	btfsc	status,0,c
 16917  002B62  D00E               	goto	i2l5190
 16918  002B64  5038               	movf	i2___ftadd@exp2,w,c
 16919  002B66  0800               	sublw	0
 16920  002B68  2439               	addwf	i2___ftadd@exp1,w,c
 16921  002B6A  6E34               	movwf	??i2___ftadd& (0+255),c
 16922  002B6C  0E18               	movlw	24
 16923  002B6E  6434               	cpfsgt	??i2___ftadd,c
 16924  002B70  D007               	goto	i2l5190
 16925  002B72                     i2l1050:
 16926  002B72  C02E  F02E         	movff	i2___ftadd@f1,?i2___ftadd
 16927  002B76  C02F  F02F         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 16928  002B7A  C030  F030         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 16929  002B7E  0012               	return	
 16930  002B80                     i2l5190:
 16931  002B80  0E06               	movlw	6
 16932  002B82  6E37               	movwf	i2___ftadd@sign,c
 16933  002B84  BE30               	btfsc	i2___ftadd@f1+2,7,c
 16934  002B86  8E37               	bsf	i2___ftadd@sign,7,c
 16935  002B88  BE33               	btfsc	i2___ftadd@f2+2,7,c
 16936  002B8A  8C37               	bsf	i2___ftadd@sign,6,c
 16937  002B8C  8E2F               	bsf	i2___ftadd@f1+1,7,c
 16938  002B8E  0EFF               	movlw	255
 16939  002B90  162E               	andwf	i2___ftadd@f1,f,c
 16940  002B92  0EFF               	movlw	255
 16941  002B94  162F               	andwf	i2___ftadd@f1+1,f,c
 16942  002B96  0E00               	movlw	0
 16943  002B98  1630               	andwf	i2___ftadd@f1+2,f,c
 16944  002B9A  8E32               	bsf	i2___ftadd@f2+1,7,c
 16945  002B9C  0EFF               	movlw	255
 16946  002B9E  1631               	andwf	i2___ftadd@f2,f,c
 16947  002BA0  0EFF               	movlw	255
 16948  002BA2  1632               	andwf	i2___ftadd@f2+1,f,c
 16949  002BA4  0E00               	movlw	0
 16950  002BA6  1633               	andwf	i2___ftadd@f2+2,f,c
 16951  002BA8  5038               	movf	i2___ftadd@exp2,w,c
 16952  002BAA  5C39               	subwf	i2___ftadd@exp1,w,c
 16953  002BAC  B0D8               	btfsc	status,0,c
 16954  002BAE  D01B               	goto	i2l5216
 16955  002BB0                     i2l5206:
 16956  002BB0  90D8               	bcf	status,0,c
 16957  002BB2  3631               	rlcf	i2___ftadd@f2,f,c
 16958  002BB4  3632               	rlcf	i2___ftadd@f2+1,f,c
 16959  002BB6  3633               	rlcf	i2___ftadd@f2+2,f,c
 16960  002BB8  0638               	decf	i2___ftadd@exp2,f,c
 16961  002BBA  5039               	movf	i2___ftadd@exp1,w,c
 16962  002BBC  1838               	xorwf	i2___ftadd@exp2,w,c
 16963  002BBE  B4D8               	btfsc	status,2,c
 16964  002BC0  D00D               	goto	i2l5214
 16965  002BC2  0637               	decf	i2___ftadd@sign,f,c
 16966  002BC4  C037  F034         	movff	i2___ftadd@sign,??i2___ftadd
 16967  002BC8  0E07               	movlw	7
 16968  002BCA  1634               	andwf	??i2___ftadd,f,c
 16969  002BCC  B4D8               	btfsc	status,2,c
 16970  002BCE  D006               	goto	i2l5214
 16971  002BD0  D7EF               	goto	i2l5206
 16972  002BD2                     i2l5212:
 16973  002BD2  90D8               	bcf	status,0,c
 16974  002BD4  3230               	rrcf	i2___ftadd@f1+2,f,c
 16975  002BD6  322F               	rrcf	i2___ftadd@f1+1,f,c
 16976  002BD8  322E               	rrcf	i2___ftadd@f1,f,c
 16977  002BDA  2A39               	incf	i2___ftadd@exp1,f,c
 16978  002BDC                     i2l5214:
 16979  002BDC  5038               	movf	i2___ftadd@exp2,w,c
 16980  002BDE  1839               	xorwf	i2___ftadd@exp1,w,c
 16981  002BE0  B4D8               	btfsc	status,2,c
 16982  002BE2  D01F               	goto	i2l1061
 16983  002BE4  D7F6               	goto	i2l5212
 16984  002BE6                     i2l5216:
 16985  002BE6  5039               	movf	i2___ftadd@exp1,w,c
 16986  002BE8  5C38               	subwf	i2___ftadd@exp2,w,c
 16987  002BEA  B0D8               	btfsc	status,0,c
 16988  002BEC  D01A               	goto	i2l1061
 16989  002BEE                     i2l5218:
 16990  002BEE  90D8               	bcf	status,0,c
 16991  002BF0  362E               	rlcf	i2___ftadd@f1,f,c
 16992  002BF2  362F               	rlcf	i2___ftadd@f1+1,f,c
 16993  002BF4  3630               	rlcf	i2___ftadd@f1+2,f,c
 16994  002BF6  0639               	decf	i2___ftadd@exp1,f,c
 16995  002BF8  5039               	movf	i2___ftadd@exp1,w,c
 16996  002BFA  1838               	xorwf	i2___ftadd@exp2,w,c
 16997  002BFC  B4D8               	btfsc	status,2,c
 16998  002BFE  D00D               	goto	i2l5226
 16999  002C00  0637               	decf	i2___ftadd@sign,f,c
 17000  002C02  C037  F034         	movff	i2___ftadd@sign,??i2___ftadd
 17001  002C06  0E07               	movlw	7
 17002  002C08  1634               	andwf	??i2___ftadd,f,c
 17003  002C0A  B4D8               	btfsc	status,2,c
 17004  002C0C  D006               	goto	i2l5226
 17005  002C0E  D7EF               	goto	i2l5218
 17006  002C10                     i2l5224:
 17007  002C10  90D8               	bcf	status,0,c
 17008  002C12  3233               	rrcf	i2___ftadd@f2+2,f,c
 17009  002C14  3232               	rrcf	i2___ftadd@f2+1,f,c
 17010  002C16  3231               	rrcf	i2___ftadd@f2,f,c
 17011  002C18  2A38               	incf	i2___ftadd@exp2,f,c
 17012  002C1A                     i2l5226:
 17013  002C1A  5038               	movf	i2___ftadd@exp2,w,c
 17014  002C1C  1839               	xorwf	i2___ftadd@exp1,w,c
 17015  002C1E  A4D8               	btfss	status,2,c
 17016  002C20  D7F7               	goto	i2l5224
 17017  002C22                     i2l1061:
 17018  002C22  AE37               	btfss	i2___ftadd@sign,7,c
 17019  002C24  D00C               	goto	i2l1070
 17020  002C26  0EFF               	movlw	255
 17021  002C28  1A2E               	xorwf	i2___ftadd@f1,f,c
 17022  002C2A  0EFF               	movlw	255
 17023  002C2C  1A2F               	xorwf	i2___ftadd@f1+1,f,c
 17024  002C2E  0EFF               	movlw	255
 17025  002C30  1A30               	xorwf	i2___ftadd@f1+2,f,c
 17026  002C32  0E01               	movlw	1
 17027  002C34  262E               	addwf	i2___ftadd@f1,f,c
 17028  002C36  0E00               	movlw	0
 17029  002C38  222F               	addwfc	i2___ftadd@f1+1,f,c
 17030  002C3A  0E00               	movlw	0
 17031  002C3C  2230               	addwfc	i2___ftadd@f1+2,f,c
 17032  002C3E                     i2l1070:
 17033  002C3E  AC37               	btfss	i2___ftadd@sign,6,c
 17034  002C40  D00C               	goto	i2l5232
 17035  002C42  0EFF               	movlw	255
 17036  002C44  1A31               	xorwf	i2___ftadd@f2,f,c
 17037  002C46  0EFF               	movlw	255
 17038  002C48  1A32               	xorwf	i2___ftadd@f2+1,f,c
 17039  002C4A  0EFF               	movlw	255
 17040  002C4C  1A33               	xorwf	i2___ftadd@f2+2,f,c
 17041  002C4E  0E01               	movlw	1
 17042  002C50  2631               	addwf	i2___ftadd@f2,f,c
 17043  002C52  0E00               	movlw	0
 17044  002C54  2232               	addwfc	i2___ftadd@f2+1,f,c
 17045  002C56  0E00               	movlw	0
 17046  002C58  2233               	addwfc	i2___ftadd@f2+2,f,c
 17047  002C5A                     i2l5232:
 17048  002C5A  0E00               	movlw	0
 17049  002C5C  6E37               	movwf	i2___ftadd@sign,c
 17050  002C5E  502E               	movf	i2___ftadd@f1,w,c
 17051  002C60  2631               	addwf	i2___ftadd@f2,f,c
 17052  002C62  502F               	movf	i2___ftadd@f1+1,w,c
 17053  002C64  2232               	addwfc	i2___ftadd@f2+1,f,c
 17054  002C66  5030               	movf	i2___ftadd@f1+2,w,c
 17055  002C68  2233               	addwfc	i2___ftadd@f2+2,f,c
 17056  002C6A  AE33               	btfss	i2___ftadd@f2+2,7,c
 17057  002C6C  D00E               	goto	i2l5242
 17058  002C6E  0EFF               	movlw	255
 17059  002C70  1A31               	xorwf	i2___ftadd@f2,f,c
 17060  002C72  0EFF               	movlw	255
 17061  002C74  1A32               	xorwf	i2___ftadd@f2+1,f,c
 17062  002C76  0EFF               	movlw	255
 17063  002C78  1A33               	xorwf	i2___ftadd@f2+2,f,c
 17064  002C7A  0E01               	movlw	1
 17065  002C7C  2631               	addwf	i2___ftadd@f2,f,c
 17066  002C7E  0E00               	movlw	0
 17067  002C80  2232               	addwfc	i2___ftadd@f2+1,f,c
 17068  002C82  0E00               	movlw	0
 17069  002C84  2233               	addwfc	i2___ftadd@f2+2,f,c
 17070  002C86  0E01               	movlw	1
 17071  002C88  6E37               	movwf	i2___ftadd@sign,c
 17072  002C8A                     i2l5242:
 17073  002C8A  C031  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 17074  002C8E  C032  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 17075  002C92  C033  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 17076  002C96  C039  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 17077  002C9A  C037  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 17078  002C9E  EC35  F023         	call	i2___ftpack	;wreg free
 17079  002CA2  C001  F02E         	movff	?i2___ftpack,?i2___ftadd
 17080  002CA6  C002  F02F         	movff	?i2___ftpack+1,?i2___ftadd+1
 17081  002CAA  C003  F030         	movff	?i2___ftpack+2,?i2___ftadd+2
 17082  002CAE  0012               	return	
 17083  002CB0                     __end_ofi2___ftadd:
 17084                           	opt stack 0
 17085                           pclatu	equ	0xFFB
 17086                           pclath	equ	0xFFA
 17087                           tblptru	equ	0xFF8
 17088                           tblptrh	equ	0xFF7
 17089                           tblptrl	equ	0xFF6
 17090                           tablat	equ	0xFF5
 17091                           prodh	equ	0xFF4
 17092                           prodl	equ	0xFF3
 17093                           intcon	equ	0xFF2
 17094                           intcon3	equ	0xFF0
 17095                           postinc0	equ	0xFEE
 17096                           fsr0h	equ	0xFEA
 17097                           fsr0l	equ	0xFE9
 17098                           wreg	equ	0xFE8
 17099                           postdec1	equ	0xFE5
 17100                           fsr1h	equ	0xFE2
 17101                           fsr1l	equ	0xFE1
 17102                           indf2	equ	0xFDF
 17103                           postinc2	equ	0xFDE
 17104                           postdec2	equ	0xFDD
 17105                           fsr2h	equ	0xFDA
 17106                           fsr2l	equ	0xFD9
 17107                           status	equ	0xFD8
 17108                           
 17109 ;; *************** function i2___ftpack *****************
 17110 ;; Defined at:
 17111 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 17112 ;; Parameters:    Size  Location     Type
 17113 ;;  arg             3    0[COMRAM] unsigned um
 17114 ;;  exp             1    3[COMRAM] unsigned char 
 17115 ;;  sign            1    4[COMRAM] unsigned char 
 17116 ;; Auto vars:     Size  Location     Type
 17117 ;;		None
 17118 ;; Return value:  Size  Location     Type
 17119 ;;                  3    0[COMRAM] float 
 17120 ;; Registers used:
 17121 ;;		wreg, status,2, status,0
 17122 ;; Tracked objects:
 17123 ;;		On entry : 0/0
 17124 ;;		On exit  : 0/0
 17125 ;;		Unchanged: 0/0
 17126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17127 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17129 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17130 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17131 ;;Total ram usage:        8 bytes
 17132 ;; Hardware stack levels used:    1
 17133 ;; This function calls:
 17134 ;;		Nothing
 17135 ;; This function is called by:
 17136 ;;		i2___ftadd
 17137 ;;		i2___ftmul
 17138 ;;		i2___lltoft
 17139 ;; This function uses a non-reentrant model
 17140 ;;
 17141                           
 17142                           	psect	text61
 17143  00466A                     __ptext61:
 17144                           	opt stack 0
 17145  00466A                     i2___ftpack:
 17146                           	opt stack 20
 17147                           
 17148                           ;incstack = 0
 17149  00466A  5004               	movf	i2___ftpack@exp,w,c
 17150  00466C  B4D8               	btfsc	status,2,c
 17151  00466E  D005               	goto	i2l4774
 17152  004670  5001               	movf	i2___ftpack@arg,w,c
 17153  004672  1002               	iorwf	i2___ftpack@arg+1,w,c
 17154  004674  1003               	iorwf	i2___ftpack@arg+2,w,c
 17155  004676  A4D8               	btfss	status,2,c
 17156  004678  D00C               	goto	i2l4780
 17157  00467A                     i2l4774:
 17158  00467A  0E00               	movlw	0
 17159  00467C  6E01               	movwf	?i2___ftpack,c
 17160  00467E  0E00               	movlw	0
 17161  004680  6E02               	movwf	?i2___ftpack+1,c
 17162  004682  0E00               	movlw	0
 17163  004684  6E03               	movwf	?i2___ftpack+2,c
 17164  004686  0012               	return	
 17165  004688                     i2l4778:
 17166  004688  2A04               	incf	i2___ftpack@exp,f,c
 17167  00468A  90D8               	bcf	status,0,c
 17168  00468C  3203               	rrcf	i2___ftpack@arg+2,f,c
 17169  00468E  3202               	rrcf	i2___ftpack@arg+1,f,c
 17170  004690  3201               	rrcf	i2___ftpack@arg,f,c
 17171  004692                     i2l4780:
 17172  004692  0E00               	movlw	0
 17173  004694  1401               	andwf	i2___ftpack@arg,w,c
 17174  004696  6E06               	movwf	??i2___ftpack& (0+255),c
 17175  004698  0E00               	movlw	0
 17176  00469A  1402               	andwf	i2___ftpack@arg+1,w,c
 17177  00469C  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 17178  00469E  0EFE               	movlw	254
 17179  0046A0  1403               	andwf	i2___ftpack@arg+2,w,c
 17180  0046A2  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 17181  0046A4  5006               	movf	??i2___ftpack,w,c
 17182  0046A6  1007               	iorwf	??i2___ftpack+1,w,c
 17183  0046A8  1008               	iorwf	??i2___ftpack+2,w,c
 17184  0046AA  B4D8               	btfsc	status,2,c
 17185  0046AC  D00C               	goto	i2l4786
 17186  0046AE  D7EC               	goto	i2l4778
 17187  0046B0                     i2l4782:
 17188  0046B0  2A04               	incf	i2___ftpack@exp,f,c
 17189  0046B2  0E01               	movlw	1
 17190  0046B4  2601               	addwf	i2___ftpack@arg,f,c
 17191  0046B6  0E00               	movlw	0
 17192  0046B8  2202               	addwfc	i2___ftpack@arg+1,f,c
 17193  0046BA  0E00               	movlw	0
 17194  0046BC  2203               	addwfc	i2___ftpack@arg+2,f,c
 17195  0046BE  90D8               	bcf	status,0,c
 17196  0046C0  3203               	rrcf	i2___ftpack@arg+2,f,c
 17197  0046C2  3202               	rrcf	i2___ftpack@arg+1,f,c
 17198  0046C4  3201               	rrcf	i2___ftpack@arg,f,c
 17199  0046C6                     i2l4786:
 17200  0046C6  0E00               	movlw	0
 17201  0046C8  1401               	andwf	i2___ftpack@arg,w,c
 17202  0046CA  6E06               	movwf	??i2___ftpack& (0+255),c
 17203  0046CC  0E00               	movlw	0
 17204  0046CE  1402               	andwf	i2___ftpack@arg+1,w,c
 17205  0046D0  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 17206  0046D2  0EFF               	movlw	255
 17207  0046D4  1403               	andwf	i2___ftpack@arg+2,w,c
 17208  0046D6  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 17209  0046D8  5006               	movf	??i2___ftpack,w,c
 17210  0046DA  1007               	iorwf	??i2___ftpack+1,w,c
 17211  0046DC  1008               	iorwf	??i2___ftpack+2,w,c
 17212  0046DE  B4D8               	btfsc	status,2,c
 17213  0046E0  D006               	goto	i2l4790
 17214  0046E2  D7E6               	goto	i2l4782
 17215  0046E4                     i2l4788:
 17216  0046E4  0604               	decf	i2___ftpack@exp,f,c
 17217  0046E6  90D8               	bcf	status,0,c
 17218  0046E8  3601               	rlcf	i2___ftpack@arg,f,c
 17219  0046EA  3602               	rlcf	i2___ftpack@arg+1,f,c
 17220  0046EC  3603               	rlcf	i2___ftpack@arg+2,f,c
 17221  0046EE                     i2l4790:
 17222  0046EE  BE02               	btfsc	i2___ftpack@arg+1,7,c
 17223  0046F0  D003               	goto	i2l1023
 17224  0046F2  0E02               	movlw	2
 17225  0046F4  6004               	cpfslt	i2___ftpack@exp,c
 17226  0046F6  D7F6               	goto	i2l4788
 17227  0046F8                     i2l1023:
 17228  0046F8  A004               	btfss	i2___ftpack@exp,0,c
 17229  0046FA  9E02               	bcf	i2___ftpack@arg+1,7,c
 17230  0046FC  90D8               	bcf	status,0,c
 17231  0046FE  3204               	rrcf	i2___ftpack@exp,f,c
 17232  004700  5004               	movf	i2___ftpack@exp,w,c
 17233  004702  1203               	iorwf	i2___ftpack@arg+2,f,c
 17234  004704  5005               	movf	i2___ftpack@sign,w,c
 17235  004706  A4D8               	btfss	status,2,c
 17236  004708  8E03               	bsf	i2___ftpack@arg+2,7,c
 17237  00470A  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 17238  00470E  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 17239  004712  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 17240  004716  0012               	return	
 17241  004718                     __end_ofi2___ftpack:
 17242                           	opt stack 0
 17243                           pclatu	equ	0xFFB
 17244                           pclath	equ	0xFFA
 17245                           tblptru	equ	0xFF8
 17246                           tblptrh	equ	0xFF7
 17247                           tblptrl	equ	0xFF6
 17248                           tablat	equ	0xFF5
 17249                           prodh	equ	0xFF4
 17250                           prodl	equ	0xFF3
 17251                           intcon	equ	0xFF2
 17252                           intcon3	equ	0xFF0
 17253                           postinc0	equ	0xFEE
 17254                           fsr0h	equ	0xFEA
 17255                           fsr0l	equ	0xFE9
 17256                           wreg	equ	0xFE8
 17257                           postdec1	equ	0xFE5
 17258                           fsr1h	equ	0xFE2
 17259                           fsr1l	equ	0xFE1
 17260                           indf2	equ	0xFDF
 17261                           postinc2	equ	0xFDE
 17262                           postdec2	equ	0xFDD
 17263                           fsr2h	equ	0xFDA
 17264                           fsr2l	equ	0xFD9
 17265                           status	equ	0xFD8
 17266                           
 17267 ;; *************** function i2___ftneg *****************
 17268 ;; Defined at:
 17269 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 17270 ;; Parameters:    Size  Location     Type
 17271 ;;  f1              3    0[COMRAM] float 
 17272 ;; Auto vars:     Size  Location     Type
 17273 ;;		None
 17274 ;; Return value:  Size  Location     Type
 17275 ;;                  3    0[COMRAM] float 
 17276 ;; Registers used:
 17277 ;;		wreg, status,2, status,0
 17278 ;; Tracked objects:
 17279 ;;		On entry : 0/0
 17280 ;;		On exit  : 0/0
 17281 ;;		Unchanged: 0/0
 17282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17283 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17286 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17287 ;;Total ram usage:        3 bytes
 17288 ;; Hardware stack levels used:    1
 17289 ;; This function calls:
 17290 ;;		Nothing
 17291 ;; This function is called by:
 17292 ;;		i2_printf
 17293 ;; This function uses a non-reentrant model
 17294 ;;
 17295                           
 17296                           	psect	text62
 17297  0051D6                     __ptext62:
 17298                           	opt stack 0
 17299  0051D6                     i2___ftneg:
 17300                           	opt stack 22
 17301                           
 17302                           ;incstack = 0
 17303  0051D6  5001               	movf	i2___ftneg@f1,w,c
 17304  0051D8  1002               	iorwf	i2___ftneg@f1+1,w,c
 17305  0051DA  1003               	iorwf	i2___ftneg@f1+2,w,c
 17306  0051DC  B4D8               	btfsc	status,2,c
 17307  0051DE  D006               	goto	i2l1120
 17308  0051E0  0E00               	movlw	0
 17309  0051E2  1A01               	xorwf	i2___ftneg@f1,f,c
 17310  0051E4  0E00               	movlw	0
 17311  0051E6  1A02               	xorwf	i2___ftneg@f1+1,f,c
 17312  0051E8  0E80               	movlw	128
 17313  0051EA  1A03               	xorwf	i2___ftneg@f1+2,f,c
 17314  0051EC                     i2l1120:
 17315  0051EC  C001  F001         	movff	i2___ftneg@f1,?i2___ftneg
 17316  0051F0  C002  F002         	movff	i2___ftneg@f1+1,?i2___ftneg+1
 17317  0051F4  C003  F003         	movff	i2___ftneg@f1+2,?i2___ftneg+2
 17318  0051F8  0012               	return		;funcret
 17319  0051FA                     __end_ofi2___ftneg:
 17320                           	opt stack 0
 17321                           pclatu	equ	0xFFB
 17322                           pclath	equ	0xFFA
 17323                           tblptru	equ	0xFF8
 17324                           tblptrh	equ	0xFF7
 17325                           tblptrl	equ	0xFF6
 17326                           tablat	equ	0xFF5
 17327                           prodh	equ	0xFF4
 17328                           prodl	equ	0xFF3
 17329                           intcon	equ	0xFF2
 17330                           intcon3	equ	0xFF0
 17331                           postinc0	equ	0xFEE
 17332                           fsr0h	equ	0xFEA
 17333                           fsr0l	equ	0xFE9
 17334                           wreg	equ	0xFE8
 17335                           postdec1	equ	0xFE5
 17336                           fsr1h	equ	0xFE2
 17337                           fsr1l	equ	0xFE1
 17338                           indf2	equ	0xFDF
 17339                           postinc2	equ	0xFDE
 17340                           postdec2	equ	0xFDD
 17341                           fsr2h	equ	0xFDA
 17342                           fsr2l	equ	0xFD9
 17343                           status	equ	0xFD8
 17344                           
 17345 ;; *************** function i2___ftge *****************
 17346 ;; Defined at:
 17347 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 17348 ;; Parameters:    Size  Location     Type
 17349 ;;  ff1             3    0[COMRAM] float 
 17350 ;;  ff2             3    3[COMRAM] float 
 17351 ;; Auto vars:     Size  Location     Type
 17352 ;;		None
 17353 ;; Return value:  Size  Location     Type
 17354 ;;		None               void
 17355 ;; Registers used:
 17356 ;;		wreg, status,2, status,0
 17357 ;; Tracked objects:
 17358 ;;		On entry : 0/0
 17359 ;;		On exit  : 0/0
 17360 ;;		Unchanged: 0/0
 17361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17362 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17364 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17365 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17366 ;;Total ram usage:        9 bytes
 17367 ;; Hardware stack levels used:    1
 17368 ;; This function calls:
 17369 ;;		Nothing
 17370 ;; This function is called by:
 17371 ;;		i2_printf
 17372 ;; This function uses a non-reentrant model
 17373 ;;
 17374                           
 17375                           	psect	text63
 17376  0048F2                     __ptext63:
 17377                           	opt stack 0
 17378  0048F2                     i2___ftge:
 17379                           	opt stack 22
 17380                           
 17381                           ;incstack = 0
 17382  0048F2  AE03               	btfss	i2___ftge@ff1+2,7,c
 17383  0048F4  D016               	goto	i2l6000
 17384  0048F6  C001  F007         	movff	i2___ftge@ff1,??i2___ftge
 17385  0048FA  C002  F008         	movff	i2___ftge@ff1+1,??i2___ftge+1
 17386  0048FE  C003  F009         	movff	i2___ftge@ff1+2,??i2___ftge+2
 17387  004902  1E07               	comf	??i2___ftge,f,c
 17388  004904  1E08               	comf	??i2___ftge+1,f,c
 17389  004906  1E09               	comf	??i2___ftge+2,f,c
 17390  004908  2A07               	incf	??i2___ftge,f,c
 17391  00490A  0E00               	movlw	0
 17392  00490C  2208               	addwfc	??i2___ftge+1,f,c
 17393  00490E  2209               	addwfc	??i2___ftge+2,f,c
 17394  004910  0E00               	movlw	0
 17395  004912  2407               	addwf	??i2___ftge,w,c
 17396  004914  6E01               	movwf	i2___ftge@ff1,c
 17397  004916  0E00               	movlw	0
 17398  004918  2008               	addwfc	??i2___ftge+1,w,c
 17399  00491A  6E02               	movwf	i2___ftge@ff1+1,c
 17400  00491C  0E80               	movlw	128
 17401  00491E  2009               	addwfc	??i2___ftge+2,w,c
 17402  004920  6E03               	movwf	i2___ftge@ff1+2,c
 17403  004922                     i2l6000:
 17404  004922  AE06               	btfss	i2___ftge@ff2+2,7,c
 17405  004924  D016               	goto	i2l6004
 17406  004926  C004  F007         	movff	i2___ftge@ff2,??i2___ftge
 17407  00492A  C005  F008         	movff	i2___ftge@ff2+1,??i2___ftge+1
 17408  00492E  C006  F009         	movff	i2___ftge@ff2+2,??i2___ftge+2
 17409  004932  1E07               	comf	??i2___ftge,f,c
 17410  004934  1E08               	comf	??i2___ftge+1,f,c
 17411  004936  1E09               	comf	??i2___ftge+2,f,c
 17412  004938  2A07               	incf	??i2___ftge,f,c
 17413  00493A  0E00               	movlw	0
 17414  00493C  2208               	addwfc	??i2___ftge+1,f,c
 17415  00493E  2209               	addwfc	??i2___ftge+2,f,c
 17416  004940  0E00               	movlw	0
 17417  004942  2407               	addwf	??i2___ftge,w,c
 17418  004944  6E04               	movwf	i2___ftge@ff2,c
 17419  004946  0E00               	movlw	0
 17420  004948  2008               	addwfc	??i2___ftge+1,w,c
 17421  00494A  6E05               	movwf	i2___ftge@ff2+1,c
 17422  00494C  0E80               	movlw	128
 17423  00494E  2009               	addwfc	??i2___ftge+2,w,c
 17424  004950  6E06               	movwf	i2___ftge@ff2+2,c
 17425  004952                     i2l6004:
 17426  004952  0E00               	movlw	0
 17427  004954  1A01               	xorwf	i2___ftge@ff1,f,c
 17428  004956  0E00               	movlw	0
 17429  004958  1A02               	xorwf	i2___ftge@ff1+1,f,c
 17430  00495A  0E80               	movlw	128
 17431  00495C  1A03               	xorwf	i2___ftge@ff1+2,f,c
 17432  00495E  0E00               	movlw	0
 17433  004960  1A04               	xorwf	i2___ftge@ff2,f,c
 17434  004962  0E00               	movlw	0
 17435  004964  1A05               	xorwf	i2___ftge@ff2+1,f,c
 17436  004966  0E80               	movlw	128
 17437  004968  1A06               	xorwf	i2___ftge@ff2+2,f,c
 17438  00496A  5004               	movf	i2___ftge@ff2,w,c
 17439  00496C  5C01               	subwf	i2___ftge@ff1,w,c
 17440  00496E  5005               	movf	i2___ftge@ff2+1,w,c
 17441  004970  5802               	subwfb	i2___ftge@ff1+1,w,c
 17442  004972  5006               	movf	i2___ftge@ff2+2,w,c
 17443  004974  5803               	subwfb	i2___ftge@ff1+2,w,c
 17444  004976  B0D8               	btfsc	status,0,c
 17445  004978  D002               	goto	i2l6010
 17446  00497A  90D8               	bcf	status,0,c
 17447  00497C  0012               	return	
 17448  00497E                     i2l6010:
 17449  00497E  80D8               	bsf	status,0,c
 17450  004980  0012               	return	
 17451  004982                     __end_ofi2___ftge:
 17452                           	opt stack 0
 17453                           pclatu	equ	0xFFB
 17454                           pclath	equ	0xFFA
 17455                           tblptru	equ	0xFF8
 17456                           tblptrh	equ	0xFF7
 17457                           tblptrl	equ	0xFF6
 17458                           tablat	equ	0xFF5
 17459                           prodh	equ	0xFF4
 17460                           prodl	equ	0xFF3
 17461                           intcon	equ	0xFF2
 17462                           intcon3	equ	0xFF0
 17463                           postinc0	equ	0xFEE
 17464                           fsr0h	equ	0xFEA
 17465                           fsr0l	equ	0xFE9
 17466                           wreg	equ	0xFE8
 17467                           postdec1	equ	0xFE5
 17468                           fsr1h	equ	0xFE2
 17469                           fsr1l	equ	0xFE1
 17470                           indf2	equ	0xFDF
 17471                           postinc2	equ	0xFDE
 17472                           postdec2	equ	0xFDD
 17473                           fsr2h	equ	0xFDA
 17474                           fsr2l	equ	0xFD9
 17475                           status	equ	0xFD8
 17476                           
 17477 ;; *************** function i2_lcdClear *****************
 17478 ;; Defined at:
 17479 ;;		line 74 in file "lcd.c"
 17480 ;; Parameters:    Size  Location     Type
 17481 ;;		None
 17482 ;; Auto vars:     Size  Location     Type
 17483 ;;		None
 17484 ;; Return value:  Size  Location     Type
 17485 ;;                  1    wreg      void 
 17486 ;; Registers used:
 17487 ;;		wreg, status,2, status,0, cstack
 17488 ;; Tracked objects:
 17489 ;;		On entry : 0/0
 17490 ;;		On exit  : 0/0
 17491 ;;		Unchanged: 0/0
 17492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17497 ;;Total ram usage:        0 bytes
 17498 ;; Hardware stack levels used:    1
 17499 ;; Hardware stack levels required when called:    2
 17500 ;; This function calls:
 17501 ;;		i2_lcdInst
 17502 ;; This function is called by:
 17503 ;;		_service
 17504 ;; This function uses a non-reentrant model
 17505 ;;
 17506                           
 17507                           	psect	text64
 17508  00527C                     __ptext64:
 17509                           	opt stack 0
 17510  00527C                     i2_lcdClear:
 17511                           	opt stack 21
 17512                           
 17513                           ;lcd.c: 75: lcdInst(0b00000001);
 17514                           
 17515                           ;incstack = 0
 17516  00527C  0E01               	movlw	1
 17517  00527E  EC0E  F029         	call	i2_lcdInst
 17518  005282  0012               	return		;funcret
 17519  005284                     __end_ofi2_lcdClear:
 17520                           	opt stack 0
 17521                           pclatu	equ	0xFFB
 17522                           pclath	equ	0xFFA
 17523                           tblptru	equ	0xFF8
 17524                           tblptrh	equ	0xFF7
 17525                           tblptrl	equ	0xFF6
 17526                           tablat	equ	0xFF5
 17527                           prodh	equ	0xFF4
 17528                           prodl	equ	0xFF3
 17529                           intcon	equ	0xFF2
 17530                           intcon3	equ	0xFF0
 17531                           postinc0	equ	0xFEE
 17532                           fsr0h	equ	0xFEA
 17533                           fsr0l	equ	0xFE9
 17534                           wreg	equ	0xFE8
 17535                           postdec1	equ	0xFE5
 17536                           fsr1h	equ	0xFE2
 17537                           fsr1l	equ	0xFE1
 17538                           indf2	equ	0xFDF
 17539                           postinc2	equ	0xFDE
 17540                           postdec2	equ	0xFDD
 17541                           fsr2h	equ	0xFDA
 17542                           fsr2l	equ	0xFD9
 17543                           status	equ	0xFD8
 17544                           
 17545 ;; *************** function i2_lcdInst *****************
 17546 ;; Defined at:
 17547 ;;		line 27 in file "lcd.c"
 17548 ;; Parameters:    Size  Location     Type
 17549 ;;  data            1    wreg     unsigned char 
 17550 ;; Auto vars:     Size  Location     Type
 17551 ;;  data            1    3[COMRAM] unsigned char 
 17552 ;; Return value:  Size  Location     Type
 17553 ;;                  1    wreg      void 
 17554 ;; Registers used:
 17555 ;;		wreg, status,2, status,0, cstack
 17556 ;; Tracked objects:
 17557 ;;		On entry : 0/0
 17558 ;;		On exit  : 0/0
 17559 ;;		Unchanged: 0/0
 17560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17562 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17563 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17564 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17565 ;;Total ram usage:        2 bytes
 17566 ;; Hardware stack levels used:    1
 17567 ;; Hardware stack levels required when called:    1
 17568 ;; This function calls:
 17569 ;;		i2_lcdNibble
 17570 ;; This function is called by:
 17571 ;;		i2_lcdClear
 17572 ;;		i2_lcdNewline
 17573 ;; This function uses a non-reentrant model
 17574 ;;
 17575                           
 17576                           	psect	text65
 17577  00521C                     __ptext65:
 17578                           	opt stack 0
 17579  00521C                     i2_lcdInst:
 17580                           	opt stack 19
 17581                           
 17582                           ;incstack = 0
 17583                           ;i2lcdInst@data stored from wreg
 17584  00521C  6E04               	movwf	i2lcdInst@data,c
 17585                           
 17586                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 17587  00521E  948C               	bcf	3980,2,c	;volatile
 17588                           
 17589                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 17590  005220  0E74               	movlw	116
 17591  005222                     i2u794_47:
 17592  005222  2EE8               	decfsz	wreg,f,c
 17593  005224  D7FE               	bra	i2u794_47
 17594  005226  D000               	nop2	
 17595                           
 17596                           ;lcd.c: 30: lcdNibble(data);
 17597  005228  5004               	movf	i2lcdInst@data,w,c
 17598  00522A  EC6F  F026         	call	i2_lcdNibble
 17599                           
 17600                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 17601  00522E  0E04               	movlw	4
 17602  005230  6E03               	movwf	??i2_lcdInst& (0+255),c
 17603  005232  0E3E               	movlw	62
 17604  005234                     i2u795_47:
 17605  005234  2EE8               	decfsz	wreg,f,c
 17606  005236  D7FE               	bra	i2u795_47
 17607  005238  2E03               	decfsz	??i2_lcdInst& (0+255),f,c
 17608  00523A  D7FC               	bra	i2u795_47
 17609  00523C  0012               	return		;funcret
 17610  00523E                     __end_ofi2_lcdInst:
 17611                           	opt stack 0
 17612                           pclatu	equ	0xFFB
 17613                           pclath	equ	0xFFA
 17614                           tblptru	equ	0xFF8
 17615                           tblptrh	equ	0xFF7
 17616                           tblptrl	equ	0xFF6
 17617                           tablat	equ	0xFF5
 17618                           prodh	equ	0xFF4
 17619                           prodl	equ	0xFF3
 17620                           intcon	equ	0xFF2
 17621                           intcon3	equ	0xFF0
 17622                           postinc0	equ	0xFEE
 17623                           fsr0h	equ	0xFEA
 17624                           fsr0l	equ	0xFE9
 17625                           wreg	equ	0xFE8
 17626                           postdec1	equ	0xFE5
 17627                           fsr1h	equ	0xFE2
 17628                           fsr1l	equ	0xFE1
 17629                           indf2	equ	0xFDF
 17630                           postinc2	equ	0xFDE
 17631                           postdec2	equ	0xFDD
 17632                           fsr2h	equ	0xFDA
 17633                           fsr2l	equ	0xFD9
 17634                           status	equ	0xFD8
 17635                           
 17636 ;; *************** function i2_lcdNibble *****************
 17637 ;; Defined at:
 17638 ;;		line 46 in file "lcd.c"
 17639 ;; Parameters:    Size  Location     Type
 17640 ;;  data            1    wreg     unsigned char 
 17641 ;; Auto vars:     Size  Location     Type
 17642 ;;  data            1    1[COMRAM] unsigned char 
 17643 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 17644 ;; Return value:  Size  Location     Type
 17645 ;;                  1    wreg      void 
 17646 ;; Registers used:
 17647 ;;		wreg, status,2, status,0
 17648 ;; Tracked objects:
 17649 ;;		On entry : 0/0
 17650 ;;		On exit  : 0/0
 17651 ;;		Unchanged: 0/0
 17652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17654 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17656 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17657 ;;Total ram usage:        2 bytes
 17658 ;; Hardware stack levels used:    1
 17659 ;; This function calls:
 17660 ;;		Nothing
 17661 ;; This function is called by:
 17662 ;;		i2_lcdInst
 17663 ;;		i2_putch
 17664 ;; This function uses a non-reentrant model
 17665 ;;
 17666                           
 17667                           	psect	text66
 17668  004CDE                     __ptext66:
 17669                           	opt stack 0
 17670  004CDE                     i2_lcdNibble:
 17671                           	opt stack 21
 17672                           
 17673                           ;incstack = 0
 17674                           ;i2lcdNibble@data stored from wreg
 17675  004CDE  6E02               	movwf	i2lcdNibble@data,c
 17676                           
 17677                           ;lcd.c: 48: char temp = data & 0xF0;
 17678  004CE0  5002               	movf	i2lcdNibble@data,w,c
 17679  004CE2  0BF0               	andlw	240
 17680  004CE4  6E01               	movwf	i2lcdNibble@temp,c
 17681                           
 17682                           ;lcd.c: 49: LATD = LATD & 0x0F;
 17683  004CE6  508C               	movf	3980,w,c	;volatile
 17684  004CE8  0B0F               	andlw	15
 17685  004CEA  6E8C               	movwf	3980,c	;volatile
 17686                           
 17687                           ;lcd.c: 50: LATD = temp | LATD;
 17688  004CEC  5001               	movf	i2lcdNibble@temp,w,c
 17689  004CEE  108C               	iorwf	3980,w,c	;volatile
 17690  004CF0  6E8C               	movwf	3980,c	;volatile
 17691                           
 17692                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 17693  004CF2  968C               	bcf	3980,3,c	;volatile
 17694                           
 17695                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 17696  004CF4  0ED6               	movlw	214
 17697  004CF6                     i2u796_47:
 17698  004CF6  D000               	nop2	
 17699  004CF8  D000               	nop2	
 17700  004CFA  2EE8               	decfsz	wreg,f,c
 17701  004CFC  D7FC               	bra	i2u796_47
 17702  004CFE  D000               	nop2	
 17703                           
 17704                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 17705  004D00  868C               	bsf	3980,3,c	;volatile
 17706                           
 17707                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 17708  004D02  0ED6               	movlw	214
 17709  004D04                     i2u797_47:
 17710  004D04  D000               	nop2	
 17711  004D06  D000               	nop2	
 17712  004D08  2EE8               	decfsz	wreg,f,c
 17713  004D0A  D7FC               	bra	i2u797_47
 17714  004D0C  D000               	nop2	
 17715                           
 17716                           ;lcd.c: 58: data = data << 4;
 17717  004D0E  3802               	swapf	i2lcdNibble@data,w,c
 17718  004D10  0BF0               	andlw	240
 17719  004D12  6E02               	movwf	i2lcdNibble@data,c
 17720                           
 17721                           ;lcd.c: 60: temp = data & 0xF0;
 17722  004D14  5002               	movf	i2lcdNibble@data,w,c
 17723  004D16  0BF0               	andlw	240
 17724  004D18  6E01               	movwf	i2lcdNibble@temp,c
 17725                           
 17726                           ;lcd.c: 61: LATD = LATD & 0x0F;
 17727  004D1A  508C               	movf	3980,w,c	;volatile
 17728  004D1C  0B0F               	andlw	15
 17729  004D1E  6E8C               	movwf	3980,c	;volatile
 17730                           
 17731                           ;lcd.c: 62: LATD = temp | LATD;
 17732  004D20  5001               	movf	i2lcdNibble@temp,w,c
 17733  004D22  108C               	iorwf	3980,w,c	;volatile
 17734  004D24  6E8C               	movwf	3980,c	;volatile
 17735                           
 17736                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 17737  004D26  968C               	bcf	3980,3,c	;volatile
 17738                           
 17739                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 17740  004D28  0ED6               	movlw	214
 17741  004D2A                     i2u798_47:
 17742  004D2A  D000               	nop2	
 17743  004D2C  D000               	nop2	
 17744  004D2E  2EE8               	decfsz	wreg,f,c
 17745  004D30  D7FC               	bra	i2u798_47
 17746  004D32  D000               	nop2	
 17747                           
 17748                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 17749  004D34  868C               	bsf	3980,3,c	;volatile
 17750                           
 17751                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 17752  004D36  0ED6               	movlw	214
 17753  004D38                     i2u799_47:
 17754  004D38  D000               	nop2	
 17755  004D3A  D000               	nop2	
 17756  004D3C  2EE8               	decfsz	wreg,f,c
 17757  004D3E  D7FC               	bra	i2u799_47
 17758  004D40  D000               	nop2	
 17759  004D42  0012               	return		;funcret
 17760  004D44                     __end_ofi2_lcdNibble:
 17761                           	opt stack 0
 17762                           pclatu	equ	0xFFB
 17763                           pclath	equ	0xFFA
 17764                           tblptru	equ	0xFF8
 17765                           tblptrh	equ	0xFF7
 17766                           tblptrl	equ	0xFF6
 17767                           tablat	equ	0xFF5
 17768                           prodh	equ	0xFF4
 17769                           prodl	equ	0xFF3
 17770                           intcon	equ	0xFF2
 17771                           intcon3	equ	0xFF0
 17772                           postinc0	equ	0xFEE
 17773                           fsr0h	equ	0xFEA
 17774                           fsr0l	equ	0xFE9
 17775                           wreg	equ	0xFE8
 17776                           postdec1	equ	0xFE5
 17777                           fsr1h	equ	0xFE2
 17778                           fsr1l	equ	0xFE1
 17779                           indf2	equ	0xFDF
 17780                           postinc2	equ	0xFDE
 17781                           postdec2	equ	0xFDD
 17782                           fsr2h	equ	0xFDA
 17783                           fsr2l	equ	0xFD9
 17784                           status	equ	0xFD8
 17785                           
 17786 ;; *************** function _servoInterruptService *****************
 17787 ;; Defined at:
 17788 ;;		line 52 in file "servo.c"
 17789 ;; Parameters:    Size  Location     Type
 17790 ;;		None
 17791 ;; Auto vars:     Size  Location     Type
 17792 ;;		None
 17793 ;; Return value:  Size  Location     Type
 17794 ;;                  1    wreg      void 
 17795 ;; Registers used:
 17796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17797 ;; Tracked objects:
 17798 ;;		On entry : 0/0
 17799 ;;		On exit  : 0/0
 17800 ;;		Unchanged: 0/0
 17801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17804 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17805 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17806 ;;Total ram usage:        4 bytes
 17807 ;; Hardware stack levels used:    1
 17808 ;; Hardware stack levels required when called:    1
 17809 ;; This function calls:
 17810 ;;		i2___awmod
 17811 ;;		i2_digitalWrite
 17812 ;;		i2_startTimer
 17813 ;; This function is called by:
 17814 ;;		_service
 17815 ;; This function uses a non-reentrant model
 17816 ;;
 17817                           
 17818                           	psect	text67
 17819  003EC0                     __ptext67:
 17820                           	opt stack 0
 17821  003EC0                     _servoInterruptService:
 17822                           	opt stack 22
 17823                           
 17824                           ;servo.c: 54: if(TMR0IF){TMR0IF = 0;
 17825                           
 17826                           ;incstack = 0
 17827  003EC0  A4F2               	btfss	intcon,2,c	;volatile
 17828  003EC2  0012               	return	
 17829  003EC4  94F2               	bcf	intcon,2,c	;volatile
 17830                           
 17831                           ;servo.c: 55: digitalWrite(servos[curr],0);
 17832  003EC6  90D8               	bcf	status,0,c
 17833  003EC8  347B               	rlcf	_curr,w,c
 17834  003ECA  6ED9               	movwf	fsr2l,c
 17835  003ECC  347C               	rlcf	_curr+1,w,c
 17836  003ECE  6EDA               	movwf	fsr2h,c
 17837  003ED0  0E73               	movlw	low _servos
 17838  003ED2  26D9               	addwf	fsr2l,f,c
 17839  003ED4  0E01               	movlw	high _servos
 17840  003ED6  22DA               	addwfc	fsr2h,f,c
 17841  003ED8  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 17842  003EDC  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 17843  003EE0  0E00               	movlw	0
 17844  003EE2  6E0A               	movwf	i2digitalWrite@val+1,c
 17845  003EE4  0E00               	movlw	0
 17846  003EE6  6E09               	movwf	i2digitalWrite@val,c
 17847  003EE8  EC14  F022         	call	i2_digitalWrite	;wreg free
 17848                           
 17849                           ;servo.c: 56: digitalWrite(servos[ (curr+1)%(n+1) ],1);
 17850  003EEC  0E01               	movlw	1
 17851  003EEE  247B               	addwf	_curr,w,c
 17852  003EF0  6E01               	movwf	i2___awmod@dividend,c
 17853  003EF2  0E00               	movlw	0
 17854  003EF4  207C               	addwfc	_curr+1,w,c
 17855  003EF6  6E02               	movwf	i2___awmod@dividend+1,c
 17856  003EF8  0E01               	movlw	1
 17857  003EFA  247D               	addwf	_n,w,c
 17858  003EFC  6E03               	movwf	i2___awmod@divisor,c
 17859  003EFE  0E00               	movlw	0
 17860  003F00  207E               	addwfc	_n+1,w,c
 17861  003F02  6E04               	movwf	i2___awmod@divisor+1,c
 17862  003F04  EC04  F026         	call	i2___awmod	;wreg free
 17863  003F08  90D8               	bcf	status,0,c
 17864  003F0A  3601               	rlcf	?i2___awmod,f,c
 17865  003F0C  3602               	rlcf	?i2___awmod+1,f,c
 17866  003F0E  0E73               	movlw	low _servos
 17867  003F10  2401               	addwf	?i2___awmod,w,c
 17868  003F12  6ED9               	movwf	fsr2l,c
 17869  003F14  0E01               	movlw	high _servos
 17870  003F16  2002               	addwfc	?i2___awmod+1,w,c
 17871  003F18  6EDA               	movwf	fsr2h,c
 17872  003F1A  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 17873  003F1E  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 17874  003F22  0E00               	movlw	0
 17875  003F24  6E0A               	movwf	i2digitalWrite@val+1,c
 17876  003F26  0E01               	movlw	1
 17877  003F28  6E09               	movwf	i2digitalWrite@val,c
 17878  003F2A  EC14  F022         	call	i2_digitalWrite	;wreg free
 17879                           
 17880                           ;servo.c: 57: startTimer(0, 0xFFFF - pulse[ (curr+1)%(n+1) ]);
 17881  003F2E  0E00               	movlw	0
 17882  003F30  6E08               	movwf	i2startTimer@timer+1,c
 17883  003F32  0E00               	movlw	0
 17884  003F34  6E07               	movwf	i2startTimer@timer,c
 17885  003F36  0EFF               	movlw	255
 17886  003F38  6E10               	movwf	??_servoInterruptService& (0+255),c
 17887  003F3A  0EFF               	movlw	255
 17888  003F3C  6E11               	movwf	(??_servoInterruptService+1)& (0+255),c
 17889  003F3E  0E01               	movlw	1
 17890  003F40  247B               	addwf	_curr,w,c
 17891  003F42  6E01               	movwf	i2___awmod@dividend,c
 17892  003F44  0E00               	movlw	0
 17893  003F46  207C               	addwfc	_curr+1,w,c
 17894  003F48  6E02               	movwf	i2___awmod@dividend+1,c
 17895  003F4A  0E01               	movlw	1
 17896  003F4C  247D               	addwf	_n,w,c
 17897  003F4E  6E03               	movwf	i2___awmod@divisor,c
 17898  003F50  0E00               	movlw	0
 17899  003F52  207E               	addwfc	_n+1,w,c
 17900  003F54  6E04               	movwf	i2___awmod@divisor+1,c
 17901  003F56  EC04  F026         	call	i2___awmod	;wreg free
 17902  003F5A  90D8               	bcf	status,0,c
 17903  003F5C  3601               	rlcf	?i2___awmod,f,c
 17904  003F5E  3602               	rlcf	?i2___awmod+1,f,c
 17905  003F60  0E6B               	movlw	low _pulse
 17906  003F62  2401               	addwf	?i2___awmod,w,c
 17907  003F64  6ED9               	movwf	fsr2l,c
 17908  003F66  0E01               	movlw	high _pulse
 17909  003F68  2002               	addwfc	?i2___awmod+1,w,c
 17910  003F6A  6EDA               	movwf	fsr2h,c
 17911  003F6C  CFDE F012          	movff	postinc2,??_servoInterruptService+2
 17912  003F70  CFDD F013          	movff	postdec2,??_servoInterruptService+3
 17913  003F74  1E12               	comf	??_servoInterruptService+2,f,c
 17914  003F76  1E13               	comf	??_servoInterruptService+3,f,c
 17915  003F78  4A12               	infsnz	??_servoInterruptService+2,f,c
 17916  003F7A  2A13               	incf	??_servoInterruptService+3,f,c
 17917  003F7C  5010               	movf	??_servoInterruptService,w,c
 17918  003F7E  2612               	addwf	??_servoInterruptService+2,f,c
 17919  003F80  5011               	movf	??_servoInterruptService+1,w,c
 17920  003F82  2213               	addwfc	??_servoInterruptService+3,f,c
 17921  003F84  C012  F009         	movff	??_servoInterruptService+2,i2startTimer@val
 17922  003F88  C013  F00A         	movff	??_servoInterruptService+3,i2startTimer@val+1
 17923  003F8C  6A0B               	clrf	i2startTimer@val+2,c
 17924  003F8E  6A0C               	clrf	i2startTimer@val+3,c
 17925  003F90  EC45  F027         	call	i2_startTimer	;wreg free
 17926                           
 17927                           ;servo.c: 59: curr = (curr+1)%(n+1);
 17928  003F94  0E01               	movlw	1
 17929  003F96  247B               	addwf	_curr,w,c
 17930  003F98  6E01               	movwf	i2___awmod@dividend,c
 17931  003F9A  0E00               	movlw	0
 17932  003F9C  207C               	addwfc	_curr+1,w,c
 17933  003F9E  6E02               	movwf	i2___awmod@dividend+1,c
 17934  003FA0  0E01               	movlw	1
 17935  003FA2  247D               	addwf	_n,w,c
 17936  003FA4  6E03               	movwf	i2___awmod@divisor,c
 17937  003FA6  0E00               	movlw	0
 17938  003FA8  207E               	addwfc	_n+1,w,c
 17939  003FAA  6E04               	movwf	i2___awmod@divisor+1,c
 17940  003FAC  EC04  F026         	call	i2___awmod	;wreg free
 17941  003FB0  C001  F07B         	movff	?i2___awmod,_curr
 17942  003FB4  C002  F07C         	movff	?i2___awmod+1,_curr+1
 17943  003FB8  0012               	return	
 17944  003FBA                     __end_of_servoInterruptService:
 17945                           	opt stack 0
 17946                           pclatu	equ	0xFFB
 17947                           pclath	equ	0xFFA
 17948                           tblptru	equ	0xFF8
 17949                           tblptrh	equ	0xFF7
 17950                           tblptrl	equ	0xFF6
 17951                           tablat	equ	0xFF5
 17952                           prodh	equ	0xFF4
 17953                           prodl	equ	0xFF3
 17954                           intcon	equ	0xFF2
 17955                           intcon3	equ	0xFF0
 17956                           postinc0	equ	0xFEE
 17957                           fsr0h	equ	0xFEA
 17958                           fsr0l	equ	0xFE9
 17959                           wreg	equ	0xFE8
 17960                           postdec1	equ	0xFE5
 17961                           fsr1h	equ	0xFE2
 17962                           fsr1l	equ	0xFE1
 17963                           indf2	equ	0xFDF
 17964                           postinc2	equ	0xFDE
 17965                           postdec2	equ	0xFDD
 17966                           fsr2h	equ	0xFDA
 17967                           fsr2l	equ	0xFD9
 17968                           status	equ	0xFD8
 17969                           
 17970 ;; *************** function i2_startTimer *****************
 17971 ;; Defined at:
 17972 ;;		line 76 in file "timer.c"
 17973 ;; Parameters:    Size  Location     Type
 17974 ;;  timer           2    6[COMRAM] int 
 17975 ;;  val             4    8[COMRAM] long 
 17976 ;; Auto vars:     Size  Location     Type
 17977 ;;		None
 17978 ;; Return value:  Size  Location     Type
 17979 ;;                  1    wreg      void 
 17980 ;; Registers used:
 17981 ;;		wreg, status,2, status,0
 17982 ;; Tracked objects:
 17983 ;;		On entry : 0/0
 17984 ;;		On exit  : 0/0
 17985 ;;		Unchanged: 0/0
 17986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17987 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17989 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17990 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17991 ;;Total ram usage:        8 bytes
 17992 ;; Hardware stack levels used:    1
 17993 ;; This function calls:
 17994 ;;		Nothing
 17995 ;; This function is called by:
 17996 ;;		_service
 17997 ;;		_servoInterruptService
 17998 ;; This function uses a non-reentrant model
 17999 ;;
 18000                           
 18001                           	psect	text68
 18002  004E8A                     __ptext68:
 18003                           	opt stack 0
 18004  004E8A                     i2_startTimer:
 18005                           	opt stack 23
 18006                           
 18007                           ;timer.c: 77: switch(timer){
 18008                           
 18009                           ;incstack = 0
 18010  004E8A  D012               	goto	i2l5814
 18011  004E8C                     i2l401:
 18012                           
 18013                           ;timer.c: 79: TMR0H = val>>8;
 18014  004E8C  C00A  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 18015                           
 18016                           ;timer.c: 80: TMR0L = val;
 18017  004E90  C009  FFD6         	movff	i2startTimer@val,4054	;volatile
 18018                           
 18019                           ;timer.c: 81: T0CON |= 1<<7;
 18020  004E94  8ED5               	bsf	4053,7,c	;volatile
 18021                           
 18022                           ;timer.c: 82: break;
 18023  004E96  0012               	return	
 18024  004E98                     i2l403:
 18025                           
 18026                           ;timer.c: 84: TMR1H = val>>8;
 18027  004E98  C00A  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 18028                           
 18029                           ;timer.c: 85: TMR1L = val;
 18030  004E9C  C009  FFCE         	movff	i2startTimer@val,4046	;volatile
 18031                           
 18032                           ;timer.c: 86: T1CON |= 1<<0;
 18033  004EA0  80CD               	bsf	4045,0,c	;volatile
 18034                           
 18035                           ;timer.c: 87: break;
 18036  004EA2  0012               	return	
 18037  004EA4                     i2l404:
 18038                           
 18039                           ;timer.c: 89: TMR3H = val>>8;
 18040  004EA4  C00A  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 18041                           
 18042                           ;timer.c: 90: TMR3L = val;
 18043  004EA8  C009  FFB2         	movff	i2startTimer@val,4018	;volatile
 18044                           
 18045                           ;timer.c: 91: T3CON |= 1<<0;
 18046  004EAC  80B1               	bsf	4017,0,c	;volatile
 18047                           
 18048                           ;timer.c: 92: }
 18049  004EAE  0012               	return	
 18050  004EB0                     i2l5814:
 18051  004EB0  C007  F00D         	movff	i2startTimer@timer,??i2_startTimer
 18052  004EB4  C008  F00E         	movff	i2startTimer@timer+1,??i2_startTimer+1
 18053                           
 18054                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18055                           ; Switch size 1, requested type "space"
 18056                           ; Number of cases is 1, Range of values is 0 to 0
 18057                           ; switch strategies available:
 18058                           ; Name         Instructions Cycles
 18059                           ; simple_byte            4     3 (average)
 18060                           ;	Chosen strategy is simple_byte
 18061  004EB8  500E               	movf	??i2_startTimer+1,w,c
 18062  004EBA  0A00               	xorlw	0	; case 0
 18063  004EBC  A4D8               	btfss	status,2,c
 18064  004EBE  0012               	return	
 18065                           
 18066                           ; Switch size 1, requested type "space"
 18067                           ; Number of cases is 3, Range of values is 0 to 3
 18068                           ; switch strategies available:
 18069                           ; Name         Instructions Cycles
 18070                           ; simple_byte           10     6 (average)
 18071                           ;	Chosen strategy is simple_byte
 18072  004EC0  500D               	movf	??i2_startTimer,w,c
 18073  004EC2  0A00               	xorlw	0	; case 0
 18074  004EC4  B4D8               	btfsc	status,2,c
 18075  004EC6  D7E2               	goto	i2l401
 18076  004EC8  0A01               	xorlw	1	; case 1
 18077  004ECA  B4D8               	btfsc	status,2,c
 18078  004ECC  D7E5               	goto	i2l403
 18079  004ECE  0A02               	xorlw	2	; case 3
 18080  004ED0  A4D8               	btfss	status,2,c
 18081  004ED2  0012               	return	
 18082  004ED4  D7E7               	goto	i2l404
 18083  004ED6                     __end_ofi2_startTimer:
 18084                           	opt stack 0
 18085                           pclatu	equ	0xFFB
 18086                           pclath	equ	0xFFA
 18087                           tblptru	equ	0xFF8
 18088                           tblptrh	equ	0xFF7
 18089                           tblptrl	equ	0xFF6
 18090                           tablat	equ	0xFF5
 18091                           prodh	equ	0xFF4
 18092                           prodl	equ	0xFF3
 18093                           intcon	equ	0xFF2
 18094                           intcon3	equ	0xFF0
 18095                           postinc0	equ	0xFEE
 18096                           fsr0h	equ	0xFEA
 18097                           fsr0l	equ	0xFE9
 18098                           wreg	equ	0xFE8
 18099                           postdec1	equ	0xFE5
 18100                           fsr1h	equ	0xFE2
 18101                           fsr1l	equ	0xFE1
 18102                           indf2	equ	0xFDF
 18103                           postinc2	equ	0xFDE
 18104                           postdec2	equ	0xFDD
 18105                           fsr2h	equ	0xFDA
 18106                           fsr2l	equ	0xFD9
 18107                           status	equ	0xFD8
 18108                           
 18109 ;; *************** function i2_digitalWrite *****************
 18110 ;; Defined at:
 18111 ;;		line 53 in file "iopin.c"
 18112 ;; Parameters:    Size  Location     Type
 18113 ;;  pin             2    6[COMRAM] PTR int 
 18114 ;;		 -> AA_float(4), redirectingServo(4), padServo(4), conveyorServo(4), 
 18115 ;;		 -> cylinderMotor(4), 
 18116 ;;  val             2    8[COMRAM] int 
 18117 ;; Auto vars:     Size  Location     Type
 18118 ;;  digitalWrite    2   13[COMRAM] int 
 18119 ;; Return value:  Size  Location     Type
 18120 ;;                  1    wreg      void 
 18121 ;; Registers used:
 18122 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18123 ;; Tracked objects:
 18124 ;;		On entry : 0/0
 18125 ;;		On exit  : 0/0
 18126 ;;		Unchanged: 0/0
 18127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18128 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18129 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18130 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18131 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18132 ;;Total ram usage:        9 bytes
 18133 ;; Hardware stack levels used:    1
 18134 ;; This function calls:
 18135 ;;		Nothing
 18136 ;; This function is called by:
 18137 ;;		_servoInterruptService
 18138 ;; This function uses a non-reentrant model
 18139 ;;
 18140                           
 18141                           	psect	text69
 18142  004428                     __ptext69:
 18143                           	opt stack 0
 18144  004428                     i2_digitalWrite:
 18145                           	opt stack 22
 18146                           
 18147                           ;iopin.c: 54: if(pin){
 18148                           
 18149                           ;incstack = 0
 18150  004428  5007               	movf	i2digitalWrite@pin,w,c
 18151  00442A  1008               	iorwf	i2digitalWrite@pin+1,w,c
 18152  00442C  B4D8               	btfsc	status,2,c
 18153  00442E  0012               	return	
 18154                           
 18155                           ;iopin.c: 55: int p = 1 << pin[1];
 18156  004430  EE20 F002          	lfsr	2,2
 18157  004434  5007               	movf	i2digitalWrite@pin,w,c
 18158  004436  26D9               	addwf	fsr2l,f,c
 18159  004438  5008               	movf	i2digitalWrite@pin+1,w,c
 18160  00443A  22DA               	addwfc	fsr2h,f,c
 18161  00443C  50DF               	movf	indf2,w,c
 18162  00443E  6E0B               	movwf	??i2_digitalWrite& (0+255),c
 18163  004440  0E01               	movlw	1
 18164  004442  6E0C               	movwf	(??i2_digitalWrite+1)& (0+255),c
 18165  004444  0E00               	movlw	0
 18166  004446  6E0D               	movwf	(??i2_digitalWrite+2)& (0+255),c
 18167  004448  2A0B               	incf	??i2_digitalWrite,f,c
 18168  00444A  D003               	goto	i2u622_44
 18169  00444C                     i2u622_45:
 18170  00444C  90D8               	bcf	status,0,c
 18171  00444E  360C               	rlcf	??i2_digitalWrite+1,f,c
 18172  004450  360D               	rlcf	??i2_digitalWrite+2,f,c
 18173  004452                     i2u622_44:
 18174  004452  2E0B               	decfsz	??i2_digitalWrite,f,c
 18175  004454  D7FB               	goto	i2u622_45
 18176  004456  C00C  F00E         	movff	??i2_digitalWrite+1,i2digitalWrite@p
 18177  00445A  C00D  F00F         	movff	??i2_digitalWrite+2,i2digitalWrite@p+1
 18178                           
 18179                           ;iopin.c: 56: if(val == 0){
 18180  00445E  5009               	movf	i2digitalWrite@val,w,c
 18181  004460  100A               	iorwf	i2digitalWrite@val+1,w,c
 18182  004462  A4D8               	btfss	status,2,c
 18183  004464  D02B               	goto	i2l5800
 18184                           
 18185                           ;iopin.c: 57: p ^= 0xff;
 18186  004466  0EFF               	movlw	255
 18187  004468  1A0E               	xorwf	i2digitalWrite@p,f,c
 18188                           
 18189                           ;iopin.c: 58: }
 18190                           ;iopin.c: 60: switch(pin[0]){
 18191  00446A  D028               	goto	i2l5800
 18192  00446C                     i2l5776:
 18193  00446C  0409               	decf	i2digitalWrite@val,w,c
 18194  00446E  100A               	iorwf	i2digitalWrite@val+1,w,c
 18195  004470  A4D8               	btfss	status,2,c
 18196  004472  D003               	goto	i2l5780
 18197  004474  500E               	movf	i2digitalWrite@p,w,c
 18198  004476  1289               	iorwf	3977,f,c	;volatile
 18199  004478  0012               	return	
 18200  00447A                     i2l5780:
 18201                           
 18202                           ;iopin.c: 62: else LATA &= p;
 18203  00447A  500E               	movf	i2digitalWrite@p,w,c
 18204  00447C  1689               	andwf	3977,f,c	;volatile
 18205                           
 18206                           ;iopin.c: 63: break;
 18207  00447E  0012               	return	
 18208  004480                     i2l5782:
 18209  004480  0409               	decf	i2digitalWrite@val,w,c
 18210  004482  100A               	iorwf	i2digitalWrite@val+1,w,c
 18211  004484  A4D8               	btfss	status,2,c
 18212  004486  D003               	goto	i2l5786
 18213  004488  500E               	movf	i2digitalWrite@p,w,c
 18214  00448A  128A               	iorwf	3978,f,c	;volatile
 18215  00448C  0012               	return	
 18216  00448E                     i2l5786:
 18217                           
 18218                           ;iopin.c: 65: else LATB &= p;
 18219  00448E  500E               	movf	i2digitalWrite@p,w,c
 18220  004490  168A               	andwf	3978,f,c	;volatile
 18221                           
 18222                           ;iopin.c: 66: break;
 18223  004492  0012               	return	
 18224  004494                     i2l5788:
 18225  004494  0409               	decf	i2digitalWrite@val,w,c
 18226  004496  100A               	iorwf	i2digitalWrite@val+1,w,c
 18227  004498  A4D8               	btfss	status,2,c
 18228  00449A  D003               	goto	i2l5792
 18229  00449C  500E               	movf	i2digitalWrite@p,w,c
 18230  00449E  128B               	iorwf	3979,f,c	;volatile
 18231  0044A0  0012               	return	
 18232  0044A2                     i2l5792:
 18233                           
 18234                           ;iopin.c: 68: else LATC &= p;
 18235  0044A2  500E               	movf	i2digitalWrite@p,w,c
 18236  0044A4  168B               	andwf	3979,f,c	;volatile
 18237                           
 18238                           ;iopin.c: 69: break;
 18239  0044A6  0012               	return	
 18240  0044A8                     i2l5794:
 18241  0044A8  0409               	decf	i2digitalWrite@val,w,c
 18242  0044AA  100A               	iorwf	i2digitalWrite@val+1,w,c
 18243  0044AC  A4D8               	btfss	status,2,c
 18244  0044AE  D003               	goto	i2l5798
 18245  0044B0  500E               	movf	i2digitalWrite@p,w,c
 18246  0044B2  128C               	iorwf	3980,f,c	;volatile
 18247  0044B4  0012               	return	
 18248  0044B6                     i2l5798:
 18249                           
 18250                           ;iopin.c: 71: else LATD &= p;
 18251  0044B6  500E               	movf	i2digitalWrite@p,w,c
 18252  0044B8  168C               	andwf	3980,f,c	;volatile
 18253                           
 18254                           ;iopin.c: 72: }
 18255  0044BA  0012               	return	
 18256  0044BC                     i2l5800:
 18257  0044BC  C007  FFD9         	movff	i2digitalWrite@pin,fsr2l
 18258  0044C0  C008  FFDA         	movff	i2digitalWrite@pin+1,fsr2h
 18259  0044C4  CFDE F00B          	movff	postinc2,??i2_digitalWrite
 18260  0044C8  CFDD F00C          	movff	postdec2,??i2_digitalWrite+1
 18261                           
 18262                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18263                           ; Switch size 1, requested type "space"
 18264                           ; Number of cases is 1, Range of values is 0 to 0
 18265                           ; switch strategies available:
 18266                           ; Name         Instructions Cycles
 18267                           ; simple_byte            4     3 (average)
 18268                           ;	Chosen strategy is simple_byte
 18269  0044CC  500C               	movf	??i2_digitalWrite+1,w,c
 18270  0044CE  0A00               	xorlw	0	; case 0
 18271  0044D0  A4D8               	btfss	status,2,c
 18272  0044D2  0012               	return	
 18273                           
 18274                           ; Switch size 1, requested type "space"
 18275                           ; Number of cases is 4, Range of values is 0 to 3
 18276                           ; switch strategies available:
 18277                           ; Name         Instructions Cycles
 18278                           ; simple_byte           13     7 (average)
 18279                           ;	Chosen strategy is simple_byte
 18280  0044D4  500B               	movf	??i2_digitalWrite,w,c
 18281  0044D6  0A00               	xorlw	0	; case 0
 18282  0044D8  B4D8               	btfsc	status,2,c
 18283  0044DA  D7C8               	goto	i2l5776
 18284  0044DC  0A01               	xorlw	1	; case 1
 18285  0044DE  B4D8               	btfsc	status,2,c
 18286  0044E0  D7CF               	goto	i2l5782
 18287  0044E2  0A03               	xorlw	3	; case 2
 18288  0044E4  B4D8               	btfsc	status,2,c
 18289  0044E6  D7D6               	goto	i2l5788
 18290  0044E8  0A01               	xorlw	1	; case 3
 18291  0044EA  A4D8               	btfss	status,2,c
 18292  0044EC  0012               	return	
 18293  0044EE  D7DC               	goto	i2l5794
 18294  0044F0                     __end_ofi2_digitalWrite:
 18295                           	opt stack 0
 18296                           pclatu	equ	0xFFB
 18297                           pclath	equ	0xFFA
 18298                           tblptru	equ	0xFF8
 18299                           tblptrh	equ	0xFF7
 18300                           tblptrl	equ	0xFF6
 18301                           tablat	equ	0xFF5
 18302                           prodh	equ	0xFF4
 18303                           prodl	equ	0xFF3
 18304                           intcon	equ	0xFF2
 18305                           intcon3	equ	0xFF0
 18306                           postinc0	equ	0xFEE
 18307                           fsr0h	equ	0xFEA
 18308                           fsr0l	equ	0xFE9
 18309                           wreg	equ	0xFE8
 18310                           postdec1	equ	0xFE5
 18311                           fsr1h	equ	0xFE2
 18312                           fsr1l	equ	0xFE1
 18313                           indf2	equ	0xFDF
 18314                           postinc2	equ	0xFDE
 18315                           postdec2	equ	0xFDD
 18316                           fsr2h	equ	0xFDA
 18317                           fsr2l	equ	0xFD9
 18318                           status	equ	0xFD8
 18319                           
 18320 ;; *************** function i2___awmod *****************
 18321 ;; Defined at:
 18322 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 18323 ;; Parameters:    Size  Location     Type
 18324 ;;  dividend        2    0[COMRAM] int 
 18325 ;;  divisor         2    2[COMRAM] int 
 18326 ;; Auto vars:     Size  Location     Type
 18327 ;;  __awmod         1    5[COMRAM] unsigned char 
 18328 ;;  __awmod         1    4[COMRAM] unsigned char 
 18329 ;; Return value:  Size  Location     Type
 18330 ;;                  2    0[COMRAM] int 
 18331 ;; Registers used:
 18332 ;;		wreg, status,2, status,0
 18333 ;; Tracked objects:
 18334 ;;		On entry : 0/0
 18335 ;;		On exit  : 0/0
 18336 ;;		Unchanged: 0/0
 18337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18338 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18339 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18341 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18342 ;;Total ram usage:        6 bytes
 18343 ;; Hardware stack levels used:    1
 18344 ;; This function calls:
 18345 ;;		Nothing
 18346 ;; This function is called by:
 18347 ;;		_servoInterruptService
 18348 ;;		i2_fround
 18349 ;;		i2_scale
 18350 ;; This function uses a non-reentrant model
 18351 ;;
 18352                           
 18353                           	psect	text70
 18354  004C08                     __ptext70:
 18355                           	opt stack 0
 18356  004C08                     i2___awmod:
 18357                           	opt stack 21
 18358                           
 18359                           ;incstack = 0
 18360  004C08  0E00               	movlw	0
 18361  004C0A  6E06               	movwf	i2___awmod@sign,c
 18362  004C0C  AE02               	btfss	i2___awmod@dividend+1,7,c
 18363  004C0E  D006               	goto	i2l5148
 18364  004C10  6C01               	negf	i2___awmod@dividend,c
 18365  004C12  1E02               	comf	i2___awmod@dividend+1,f,c
 18366  004C14  B0D8               	btfsc	status,0,c
 18367  004C16  2A02               	incf	i2___awmod@dividend+1,f,c
 18368  004C18  0E01               	movlw	1
 18369  004C1A  6E06               	movwf	i2___awmod@sign,c
 18370  004C1C                     i2l5148:
 18371  004C1C  AE04               	btfss	i2___awmod@divisor+1,7,c
 18372  004C1E  D004               	goto	i2l5152
 18373  004C20  6C03               	negf	i2___awmod@divisor,c
 18374  004C22  1E04               	comf	i2___awmod@divisor+1,f,c
 18375  004C24  B0D8               	btfsc	status,0,c
 18376  004C26  2A04               	incf	i2___awmod@divisor+1,f,c
 18377  004C28                     i2l5152:
 18378  004C28  5003               	movf	i2___awmod@divisor,w,c
 18379  004C2A  1004               	iorwf	i2___awmod@divisor+1,w,c
 18380  004C2C  B4D8               	btfsc	status,2,c
 18381  004C2E  D018               	goto	i2l5168
 18382  004C30  0E01               	movlw	1
 18383  004C32  6E05               	movwf	i2___awmod@counter,c
 18384  004C34  D004               	goto	i2l5158
 18385  004C36                     i2l5156:
 18386  004C36  90D8               	bcf	status,0,c
 18387  004C38  3603               	rlcf	i2___awmod@divisor,f,c
 18388  004C3A  3604               	rlcf	i2___awmod@divisor+1,f,c
 18389  004C3C  2A05               	incf	i2___awmod@counter,f,c
 18390  004C3E                     i2l5158:
 18391  004C3E  AE04               	btfss	i2___awmod@divisor+1,7,c
 18392  004C40  D7FA               	goto	i2l5156
 18393  004C42                     i2l5160:
 18394  004C42  5003               	movf	i2___awmod@divisor,w,c
 18395  004C44  5C01               	subwf	i2___awmod@dividend,w,c
 18396  004C46  5004               	movf	i2___awmod@divisor+1,w,c
 18397  004C48  5802               	subwfb	i2___awmod@dividend+1,w,c
 18398  004C4A  A0D8               	btfss	status,0,c
 18399  004C4C  D004               	goto	i2l5164
 18400  004C4E  5003               	movf	i2___awmod@divisor,w,c
 18401  004C50  5E01               	subwf	i2___awmod@dividend,f,c
 18402  004C52  5004               	movf	i2___awmod@divisor+1,w,c
 18403  004C54  5A02               	subwfb	i2___awmod@dividend+1,f,c
 18404  004C56                     i2l5164:
 18405  004C56  90D8               	bcf	status,0,c
 18406  004C58  3204               	rrcf	i2___awmod@divisor+1,f,c
 18407  004C5A  3203               	rrcf	i2___awmod@divisor,f,c
 18408  004C5C  2E05               	decfsz	i2___awmod@counter,f,c
 18409  004C5E  D7F1               	goto	i2l5160
 18410  004C60                     i2l5168:
 18411  004C60  5006               	movf	i2___awmod@sign,w,c
 18412  004C62  B4D8               	btfsc	status,2,c
 18413  004C64  D004               	goto	i2l5172
 18414  004C66  6C01               	negf	i2___awmod@dividend,c
 18415  004C68  1E02               	comf	i2___awmod@dividend+1,f,c
 18416  004C6A  B0D8               	btfsc	status,0,c
 18417  004C6C  2A02               	incf	i2___awmod@dividend+1,f,c
 18418  004C6E                     i2l5172:
 18419  004C6E  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 18420  004C72  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 18421  004C76  0012               	return	
 18422  004C78                     __end_ofi2___awmod:
 18423                           	opt stack 0
 18424                           pclatu	equ	0xFFB
 18425                           pclath	equ	0xFFA
 18426                           tblptru	equ	0xFF8
 18427                           tblptrh	equ	0xFF7
 18428                           tblptrl	equ	0xFF6
 18429                           tablat	equ	0xFF5
 18430                           prodh	equ	0xFF4
 18431                           prodl	equ	0xFF3
 18432                           intcon	equ	0xFF2
 18433                           intcon3	equ	0xFF0
 18434                           postinc0	equ	0xFEE
 18435                           fsr0h	equ	0xFEA
 18436                           fsr0l	equ	0xFE9
 18437                           wreg	equ	0xFE8
 18438                           postdec1	equ	0xFE5
 18439                           fsr1h	equ	0xFE2
 18440                           fsr1l	equ	0xFE1
 18441                           indf2	equ	0xFDF
 18442                           postinc2	equ	0xFDE
 18443                           postdec2	equ	0xFDD
 18444                           fsr2h	equ	0xFDA
 18445                           fsr2l	equ	0xFD9
 18446                           status	equ	0xFD8
 18447                           pclatu	equ	0xFFB
 18448                           pclath	equ	0xFFA
 18449                           tblptru	equ	0xFF8
 18450                           tblptrh	equ	0xFF7
 18451                           tblptrl	equ	0xFF6
 18452                           tablat	equ	0xFF5
 18453                           prodh	equ	0xFF4
 18454                           prodl	equ	0xFF3
 18455                           intcon	equ	0xFF2
 18456                           intcon3	equ	0xFF0
 18457                           postinc0	equ	0xFEE
 18458                           fsr0h	equ	0xFEA
 18459                           fsr0l	equ	0xFE9
 18460                           wreg	equ	0xFE8
 18461                           postdec1	equ	0xFE5
 18462                           fsr1h	equ	0xFE2
 18463                           fsr1l	equ	0xFE1
 18464                           indf2	equ	0xFDF
 18465                           postinc2	equ	0xFDE
 18466                           postdec2	equ	0xFDD
 18467                           fsr2h	equ	0xFDA
 18468                           fsr2l	equ	0xFD9
 18469                           status	equ	0xFD8
 18470                           
 18471                           	psect	rparam
 18472  0000                     pclatu	equ	0xFFB
 18473                           pclath	equ	0xFFA
 18474                           tblptru	equ	0xFF8
 18475                           tblptrh	equ	0xFF7
 18476                           tblptrl	equ	0xFF6
 18477                           tablat	equ	0xFF5
 18478                           prodh	equ	0xFF4
 18479                           prodl	equ	0xFF3
 18480                           intcon	equ	0xFF2
 18481                           intcon3	equ	0xFF0
 18482                           postinc0	equ	0xFEE
 18483                           fsr0h	equ	0xFEA
 18484                           fsr0l	equ	0xFE9
 18485                           wreg	equ	0xFE8
 18486                           postdec1	equ	0xFE5
 18487                           fsr1h	equ	0xFE2
 18488                           fsr1l	equ	0xFE1
 18489                           indf2	equ	0xFDF
 18490                           postinc2	equ	0xFDE
 18491                           postdec2	equ	0xFDD
 18492                           fsr2h	equ	0xFDA
 18493                           fsr2l	equ	0xFD9
 18494                           status	equ	0xFD8
 18495                           
 18496                           	psect	temp
 18497  00007F                     btemp:
 18498                           	opt stack 0
 18499  00007F                     	ds	1
 18500  0000                     int$flags	set	btemp
 18501                           pclatu	equ	0xFFB
 18502                           pclath	equ	0xFFA
 18503                           tblptru	equ	0xFF8
 18504                           tblptrh	equ	0xFF7
 18505                           tblptrl	equ	0xFF6
 18506                           tablat	equ	0xFF5
 18507                           prodh	equ	0xFF4
 18508                           prodl	equ	0xFF3
 18509                           intcon	equ	0xFF2
 18510                           intcon3	equ	0xFF0
 18511                           postinc0	equ	0xFEE
 18512                           fsr0h	equ	0xFEA
 18513                           fsr0l	equ	0xFE9
 18514                           wreg	equ	0xFE8
 18515                           postdec1	equ	0xFE5
 18516                           fsr1h	equ	0xFE2
 18517                           fsr1l	equ	0xFE1
 18518                           indf2	equ	0xFDF
 18519                           postinc2	equ	0xFDE
 18520                           postdec2	equ	0xFDD
 18521                           fsr2h	equ	0xFDA
 18522                           fsr2l	equ	0xFD9
 18523                           status	equ	0xFD8


Data Sizes:
    Strings     287
    Constant    174
    Data        57
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    122     126
    BANK0           128    127     128
    BANK1           256     50     137
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK1[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_17(CODE[17]), STR_16(CODE[18]), STR_15(CODE[17]), STR_14(CODE[18]), 
		 -> STR_13(CODE[17]), STR_12(CODE[19]), STR_11(CODE[17]), STR_10(CODE[18]), 
		 -> STR_9(CODE[17]), STR_8(CODE[18]), STR_7(CODE[17]), STR_6(CODE[18]), 
		 -> STR_5(CODE[8]), STR_4(CODE[11]), STR_3(CODE[15]), STR_2(CODE[17]), 
		 -> STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    initServo@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    servos	PTR int [4] size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 4
		 -> AA_float(BANK1[4]), redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 
		 -> cylinderMotor(BANK1[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 4
		 -> padPin2(BANK1[4]), padPin1(BANK1[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _service in COMRAM

    _service->i2_printf
    i2_printf->i2___ftsub
    i2_scale->i2___ftmul
    i2_lcdNewline->i2_lcdInst
    i2_fround->i2___ftmul
    i2___wmul->i2___awdiv
    i2___ftmul->i2___wmul
    i2___awdiv->i2___awmod
    i2___lltoft->i2___ftpack
    i2___llmod->i2___lldiv
    i2___fttol->i2_scale
    i2___ftsub->i2___ftadd
    i2___ftadd->i2_fround
    i2_lcdClear->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    _servoInterruptService->i2_digitalWrite
    i2_startTimer->i2___awmod
    i2_digitalWrite->i2___awmod

Critical Paths under _main in BANK0

    _main->_initServo
    _sortBattery->_setAngle
    _printf->___fttol
    _scale->___ftmul
    _lcdNewline->_lcdInst
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___ftadd
    _lcdClear->_lcdInst
    _lcdHome->_lcdInst
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftdiv->___altoft
    ___ftadd->_fround
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    ___almod->___aldiv

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery
    _sortBattery->_printf

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0  152498
                                            126 BANK0      1     1      0
                                             46 BANK1      4     4      0
                            ___aldiv
                            ___almod
                       _digitalWrite
                            _initLCD
                          _initServo
                          _initTimer
                           _lcdClear
                            _lcdHome
                           _pinSetup
                             _printf
                        _sortBattery
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         18    18      0   80490
                                            118 BANK0      2     2      0
                                             30 BANK1     16    16      0
                           ___altoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                         _analogRead
                        _digitalRead
                       _digitalWrite
                           _lcdClear
                             _printf
                         _readKeypad
                           _setAngle
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _printf                                              47    37     10   49215
                                             85 BANK0     16     6     10
                                              0 BANK1     30    30      0
                            ___aldiv (ARG)
                            ___almod (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   11138
                                             48 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     292
                                              4 BANK0      1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   10940
                                             48 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2641
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1676
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1580
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     431
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     591
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2281
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     671
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     802
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3899
                                             70 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     109
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1032
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _lcdClear                                             0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     5      4    1146
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          4     2      2     238
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     150
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdHome                                              0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initServo                                            8     4      4   19357
                                            118 BANK0      8     4      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _startTimer                                           8     2      6     690
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   18003
                                            108 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   16949
                                             85 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     508
                                             70 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4752
                                             33 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    2914
                                             18 BANK0     15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3602
                                             58 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2367
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2606
                                              8 BANK0     10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2148
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            4     2      2     214
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              4 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     135
                                              2 BANK0      2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     424
                                             14 BANK0     10     2      8
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     556
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _service                                             19    19      0   23753
                                            103 COMRAM    19    19      0
              _servoInterruptService
                         i2_lcdClear
                           i2_printf
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (8) i2_printf                                            41    37      4   21657
                                             63 COMRAM    40    36      4
                          i2___awdiv
                          i2___ftadd
                           i2___ftge
                          i2___ftmul
                          i2___ftneg
                          i2___ftsub
                          i2___fttol
                          i2___lldiv
                          i2___llmod
                         i2___lltoft
                           i2___wmul
                       i2__div_to_l_
                      i2__tdiv_to_l_
                           i2_fround
                          i2_isdigit
                            i2_putch
                            i2_scale
 ---------------------------------------------------------------------------------
 (9) i2_scale                                             13    10      3    4789
                                             35 COMRAM     7     4      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (9) i2_putch                                              1     1      0     292
                                              4 COMRAM     1     1      0
                       i2_lcdNewline
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_lcdNewline                                        0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (9) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) i2_fround                                            16    13      3    4591
                                             35 COMRAM    10     7      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4    1041
                                             14 COMRAM     6     2      4
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___ftmul                                          15     9      6    1519
                                             20 COMRAM    15     9      6
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
                         i2___ftpack
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awdiv                                           8     4      4     820
                                              6 COMRAM     8     4      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (9) i2__tdiv_to_l_                                       15     9      6     355
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (9) i2__div_to_l_                                        12     6      6     481
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (9) i2___lltoft                                           9     5      4     560
                                              8 COMRAM     9     5      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) i2___llmod                                            9     1      8     367
                                             13 COMRAM     9     1      8
                          i2___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___lldiv                                           13     5      8     370
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (9) i2___fttol                                           15    11      4     330
                                             42 COMRAM    15    11      4
                          i2___ftmul (ARG)
                            i2_scale (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___ftsub                                            6     0      6    1528
                                             57 COMRAM     6     0      6
                          i2___ftadd
                         i2___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___ftadd                                          12     6      6    1409
                                             45 COMRAM    12     6      6
                         i2___ftpack
                           i2_fround (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftpack                                          8     3      5     465
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) i2___ftneg                                            3     0      3      71
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) i2___ftge                                             9     3      6     292
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) i2_lcdClear                                           0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           2     2      0     135
                                              2 COMRAM     2     2      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _servoInterruptService                                4     4      0    1636
                                             15 COMRAM     4     4      0
                          i2___awmod
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (8) i2_startTimer                                         8     2      6     258
                                              6 COMRAM     8     2      6
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (9) i2_digitalWrite                                       9     5      4     458
                                              6 COMRAM     9     5      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     920
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
   ___almod
     ___aldiv (ARG)
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _initTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _lcdHome
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___aldiv (ARG)
     ___almod (ARG)
       ___aldiv (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
       ___almod (ARG)
         ___aldiv (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _startTimer

 _service (ROOT)
   _servoInterruptService
     i2___awmod
     i2_digitalWrite
       i2___awmod (ARG)
     i2_startTimer
       i2___awmod (ARG)
   i2_lcdClear
     i2_lcdInst
       i2_lcdNibble
   i2_printf
     i2___awdiv
       i2___awmod (ARG)
     i2___ftadd
       i2___ftpack
       i2_fround (ARG)
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
     i2___ftge
     i2___ftmul
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
       i2___ftpack (ARG)
       i2___wmul (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     i2___ftneg
     i2___ftsub
       i2___ftadd
         i2___ftpack
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___lltoft (ARG)
         i2___ftpack
     i2___fttol
       i2___ftmul (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2_scale (ARG)
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
     i2___lldiv
     i2___llmod
       i2___lldiv (ARG)
     i2___lltoft
       i2___ftpack
     i2___wmul
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
     i2__div_to_l_
     i2__tdiv_to_l_
     i2_fround
       i2___awdiv
         i2___awmod (ARG)
       i2___awmod
       i2___ftmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     i2_isdigit
     i2_putch
       i2_lcdNewline
         i2_lcdInst
           i2_lcdNibble
       i2_lcdNibble
     i2_scale
       i2___awdiv
         i2___awmod (ARG)
       i2___awmod
       i2___ftmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
   i2_startTimer
     i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     32      89       7       53.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     7F      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     7A      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     187      34        0.0%
DATA                 0      0     187       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Mar 26 12:59:24 2017

                  ___altoft@exp 0090                               _n 007D                   ___altoft@sign 0091  
                   _sortBattery 1FF0                    ___awdiv@sign 008B             ___wmul@multiplicand 0090  
                   __CFG_BORV$3 000000                      i2___ftpack 466A                    __CFG_CP0$OFF 000000  
                  __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000  
                   __CFG_OSC$HS 000000                _redirectingServo 0135                    ___ftadd@exp1 00C5  
                  ___ftadd@exp2 00C4                      i2___lltoft 4D44                    ___ftadd@sign 00C3  
                           l140 22C2                             l124 2E56                             l116 2D6E  
                           l222 510A                             l320 4FB8                             l401 4DA2  
                           l225 5118                             l403 4DAE                             l404 4DBA  
                           l186 519C                             l295 3A66                             l394 4E38  
                           l734 0782                             l743 0970                             l695 0902  
                           l991 316C                    __CFG_CPB$OFF 000000                             _PEN 007E2A  
                  __CFG_CPD$OFF 000000                             _SEN 007E28                    ___awmod@sign 0085  
                           wreg 000FE8                      i2_lcdClear 527C                    __CFG_LVP$OFF 000000  
                  ___ftdiv@cntr 009B                    ___ftdiv@sign 00A0                    __CFG_WDT$OFF 000000  
                          l1023 3D88                            l1120 50FC                            l1050 26F8  
                          l1052 2720                            l1061 27F6                            l1070 2820  
                          l1046 26BE                            l1081 3558                            l1170 4658  
                          l1180 48E0                            l1095 2FE4                            l1088 2F20  
                          l1089 2F64                            l5000 3136                            l5022 43A0  
                          l5014 4E60                            l5006 3152                            l4400 3D6C  
                          l5032 4424                            l5008 3162                            l4402 3D7A  
                          l5026 43E0                            l5050 45F2                            l4500 27A2  
                          l5302 4DFC                            l4414 3DAE                            l4510 27EA  
                          l4502 27AE                            l5046 45DC                            l5070 488A  
                          l4408 3D92                            l5048 45EC                            l5080 4B1C  
                          l5314 4E10                            l4602 33A6                            l5058 4646  
                          l5074 48CE                            l5066 4874                            l5082 4B2C  
                          l5402 0100                            l6210 226A                            l5308 4E08  
                          l4452 47E6                            l4516 284A                            l4508 27DC  
                          l4612 33E4                            l5068 4884                            l4700 47B0  
                          l5412 0138                            l5404 0106                            l6220 22CC  
                          l6310 41DE                            l4390 3CDE                            l4454 47F6  
                          l4526 2898                            l4542 34B6                            l4606 33C4  
                          l5350 3E34                            l5510 054C                            l5422 0176  
                          l5414 0144                            l5406 010C                            l6214 2296  
                          l6222 22F4                            l4392 3CEC                            l4712 4F82  
                          l4480 2716                            l4536 347C                            l4616 3402  
                          l5328 4DC6                            l5360 3E64                            l5344 3E18  
                          l4632 450C                            l5600 092A                            l5504 04E0  
                          l5424 0190                            l5416 014A                            l5408 0112  
                          l6330 4282                            l6322 4254                            l6314 41FA  
                          l6306 41C6                            l4394 3D1C                            l4386 3CCA  
                          l4490 2758                            l4474 2706                            l4562 3516  
                          l4722 35C8                            l5362 3E6C                            l5354 3E48  
                          l5530 060A                            l5522 0592                            l5450 025E  
                          l5418 0162                            l5434 01C0                            l6316 420A  
                          l4468 26CC                            l4740 365A                            l5356 3E50  
                          l5348 3E2C                            l4900 2E92                            l4644 4540  
                          l4660 4590                            l5620 09C2                            l5540 0646  
                          l5508 0546                            l5428 01A8                            l5436 0204  
                          l5700 0CAA                            l6262 3BBA                            l6318 4210  
                          l6326 4266                            l4398 3D3C                            l4582 331E  
                          l4750 368A                            l5366 3E80                            l4646 454C  
                          l4638 4522                            l5614 0992                            l5542 065C  
                          l5526 05E2                            l5382 0038                            l5296 4DF2  
                          l4496 2786                            l4752 369A                            l4744 366E  
                          l5704 42AA                            l5712 4328                            l5368 3E88  
                          l4664 45A4                            l4656 4582                            l4648 4552  
                          l4680 4744                            l4840 260E                            l4832 252A  
                          l5632 0A08                            l5560 0742                            l5552 06A6  
                          l5536 0638                            l5480 03C4                            l5384 004E  
                          l6274 3C06                            l6290 3C82                            l4498 2794  
                          l4754 36A4                            l5730 39F4                            l5722 397C  
                          l4906 2ECC                            l5634 0A0E                            l5650 0A66  
                          l5618 09BC                            l5570 0786                            l5546 066A  
                          l5490 0454                            l5482 03F4                            l5474 0380  
                          l5466 0310                            l5394 0088                            l5378 0022  
                          l6276 3C16                            l6268 3BD8                            l4588 3358  
                          l5708 4300                            l4940 2FAE                            l4692 478E  
                          l4684 4758                            l4676 4734                            l4860 198A  
                          l5660 0AD2                            l5580 07FC                            l5564 0750  
                          l5548 067E                            l5484 040A                            l5388 0058  
                          l6294 3C9E                            l6286 3C70                            l6278 3C1C  
                          l4758 36C0                            l5726 39B8                            l5718 3940  
                          l4686 4764                            l4854 18C4                            l5662 0ADC  
                          l5566 0764                            l5558 0734                            l5494 0482  
                          l5478 03AE                            l6198 2186                            l5736 3A30  
                          l4936 2F9A                            l4688 476A                            l4696 479C  
                          l4872 1B14                            l4864 19B0                            l5680 0B4A  
                          l5656 0A9A                            l5648 0A54                            l5592 08F4  
                          l5576 07AA                            l4962 3042                            l4946 2FCA  
                          l4890 5154                            l5674 0B24                            l5586 08D8  
                          l4956 301C                            l4948 2FDA                            l5676 0B30  
                          l5684 0B70                            l5668 0B08                            l5588 08E6  
                          l4878 1BDA                            l5686 0B80                            l5694 0C7A  
                          l4984 30EA                            l4976 3096                            l5688 0C04  
                          l5696 0C8C                            l5698 0C94                            l4996 3122  
                          l6684 2E3A                            l6678 2D84                            _EEIF 007D0C  
         __size_ofi2__div_to_l_ 0128                            STR_1 FFF6                            STR_2 FFC3  
                          STR_3 FFD4                            STR_4 FFE3                            STR_5 FFEE  
                          STR_6 FF04                            STR_7 FFB2                            STR_8 FEF2  
                          STR_9 FF7F                            _LATA 000F89                            _LATB 000F8A  
                          _LATC 000F8B                            _LATD 000F8C                            _LATE 000F8D  
                          u4101 268A                            u4301 3458                            u4321 3492  
                          u4091 266C                    printf@tmpval 0145                            u4351 32FA  
                          u4371 3334                            _PEIE 007F96                            u4541 35A4  
                          u6134 3964                            u6135 395E                            u4560 35EE  
                          u6144 39A0                            u6145 399A                            u4801 2E6E  
                          u6154 39DC                            u6155 39D6                            u6164 3A18  
                          _RCEN 007E2B                            u4565 35E4                            u6165 3A12  
                          u4821 2EA8                            u5630 02A4                            u5635 0298  
                          u5484 3DF6                            u5485 3DEE                            u5850 077A  
                          u7807 2066                            u7817 21A8                            u7907 4BBE  
                          u7827 231A                            u7917 4BEE                            u7837 234E  
                          u7927 4BFC                            u7847 51A0                            u7857 4EDE  
                          u7867 4F14                            u7787 2E32                            u7877 5166  
                          u7797 2032                            u7887 517C                            u7897 4BB0  
                          _RSEN 007E29                            _main 2CB0                            _curr 007B  
                  ___ftpack@arg 0080                            _keys FEC7                    ___ftpack@exp 0083  
                          _time 017F                            fsr0h 000FEA                            fsr1h 000FE2  
                          fsr2h 000FDA                            fsr0l 000FE9                            indf2 000FDF  
                          fsr1l 000FE1                            fsr2l 000FD9                            btemp 007F  
                  i2___ftadd@f1 002E                    i2___ftadd@f2 0031                    i2___ftge@ff1 0001  
                  i2___ftge@ff2 0004                            prodh 000FF4                            prodl 000FF3  
                          start 000E                   __CFG_IESO$OFF 000000                 __end_ofi2_scale 1FF0  
                  i2___ftneg@f1 0001                 __end_ofi2_putch 521C                   __CFG_MCLRE$ON 000000  
                  ___ftmul@cntr 00AE                    i2___ftmul@f1 0015                    i2___ftmul@f2 0018  
                  ___param_bank 000000                    ___ftmul@sign 00AF                    i2___ftsub@f1 003A  
                  i2___ftsub@f2 003D                    i2___fttol@f1 002B                     i2_lcdNibble 4CDE  
                  ___fttol@exp1 00D4                    i2___lltoft@c 0009                    ___fttol@lval 00D0  
          __end_ofi2_startTimer 4ED6            __end_of_angleToPulse 32E4                 __end_of___aldiv 3CB0  
               __end_of___almod 4294                           ?_main 0001                           _ACKEN 007E2C  
                         _ACKDT 007E2D                 __end_of___awdiv 45AE                           _EEADR 000FA9  
               __end_of___ftadd 28BE                           STR_10 FF16                           STR_11 FF6E  
                         STR_12 FEDF                           STR_13 FF90                           STR_14 FF28  
                         STR_15 FF5D                           STR_16 FF3A                           STR_17 FFA1  
                         STR_18 FF4C                 __end_of___awmod 47BA                 __end_of___ftdiv 358E  
       ??_servoInterruptService 0010                 __end_of___ftneg 510A                 __end_of___lldiv 466A  
               __end_of___ftmul 3442                           _T0CON 000FD5                 ___awdiv@divisor 0088  
                         _T1CON 000FCD                 __end_of___llmod 48F2                 __end_of___ftsub 4E8A  
               __end_of___fttol 36D2                           _T3CON 000FB1                           i2l401 4E8C  
                         i2l162 37D0                           i2l403 4E98                           i2l404 4EA4  
                         i2l186 520A                           i2l734 12DC                           i2l743 149C  
                         i2l695 143C                 ___awdiv@counter 008A                           i2l991 3B84  
                         _TMR0H 000FD7                           _TMR1H 000FCF                           _TMR0L 000FD6  
                         _TMR3H 000FB3                           _TMR1L 000FCE                           _TMR3L 000FB2  
                         _PORTA 000F80                           _PORTB 000F81                           _PORTC 000F82  
                         _PORTD 000F83                    i2__div_to_l_ 3A6E                           _TRISA 000F92  
                         _TRISB 000F93                           _TRISC 000F94                           _TRISD 000F95  
                         _TRISE 000F96                   __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000  
                 __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000  
               __end_of_lcdHome 5274                    ___lltoft@exp 0090                   _conveyorServo 0121  
               __end_of_lcdInst 5188                  __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000  
                __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000  
         __size_ofi2_lcdNewline 0008                   __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000  
                 __CFG_WRTD$OFF 000000                 __end_of_initLCD 4F20                  __CFG_EBTRB$OFF 000000  
                    i2isdigit@c 0003                   ___awtoft@sign 008B                           _angle 0109  
               __end_of_dpowers FE59                      i2scale@scl 002A                           _count 0185  
                         _scale 1752                 __end_of_isdigit 515E                   ___ftpack@sign 0084  
                         _pulse 016B                           _putch 5188                    main@prevTime 0167  
                         pclath 000FFA                           tablat 000FF5                __end_ofi2___ftge 4982  
               __end_of_service 380C                __end_ofi2___wmul 51D6                           status 000FD8  
              __end_ofi2_fround 2B04              __size_ofi2___awdiv 0084              __size_ofi2___ftadd 01AC  
            __size_ofi2___awmod 0070                  __CFG_PBADEN$ON 000000                   i2printf@width 0063  
            __size_ofi2___ftneg 0024              __size_ofi2___lldiv 0082              __size_ofi2___ftmul 00F4  
            __size_ofi2___llmod 0066              __size_ofi2___ftsub 0040              __size_ofi2___fttol 00F4  
              __end_ofi2_printf 1752            __end_of_digitalWrite 3EC0                 __initialization 4F20  
             i2___lldiv@divisor 0005              __size_ofi2_lcdInst 0022                    __end_of_main 2E58  
             i2___lldiv@counter 000D                    __end_of_keys FED8                   i2___ftmul@exp 001E  
                    i2printf@ap 0052                      i2printf@cp 004E              __size_ofi2_isdigit 001E  
                   ?i2___ftpack 0001                    i2_lcdNewline 5274                     ?i2___lltoft 0009  
                        ??_main 00FE                   ___fttol@sign1 00CF                   __activetblptr 000002  
          __size_of_digitalRead 0130            __size_of__tdiv_to_l_ 019E                 i2digitalWrite@p 000E  
                   ?i2_lcdClear 0001                          _ADCON0 000FC2                          _ADCON1 000FC1  
                        _ADCON2 000FC0                __end_of___altoft 4858                ___llmod@dividend 008D  
                        ?_scale 00B0                          _ADRESH 000FC4                          _EEADRH 000FAA  
                        _ADRESL 000FC3                          _EEDATA 000FA8                          _EECON1 000FA6  
                        _EECON2 000FA7                ___awdiv@dividend 0086                 i2lcdNibble@data 0002  
              __end_of___awtoft 4FAA                          ?_putch 0001                __end_of___ftpack 3DBC  
               i2lcdNibble@temp 0001                __end_of___lltoft 4B90                          _INT0IE 007F94  
                        _INT0IF 007F91                          _INT1IE 007F83                          _INT1IF 007F80  
                  sortBattery@V 0164                          i2l1023 46F8                          i2l1120 51EC  
                        i2l1050 2B72                          i2l1061 2C22                          i2l1070 2C3E  
                        i2l1046 2B48                          i2l1170 4B02                          i2l1180 4CCC  
                        i2l1095 392C                          i2l1088 389E                          i2l1089 38C6  
                        i2l5110 4A32                          i2l6000 4922                          i2l5120 4A54  
                        i2l5104 4A22                          i2l6010 497E                          i2l6004 4952  
                        i2l5212 2BD2                          i2l5116 4A48                          i2l5132 4A7A  
                        i2l5214 2BDC                          i2l5206 2BB0                          i2l6022 5002  
                        i2l6102 4AF4                          i2l6110 4C8A                          i2l5118 4A50  
                        i2l5160 4C42                          i2l5152 4C28                          i2l5232 2C5A  
                        i2l5224 2C10                          i2l5216 2BE6                          i2l6032 40DA  
                        i2l6112 4C96                          i2l5136 4A88                          i2l5128 4A70  
                        i2l5242 2C8A                          i2l5226 2C1A                          i2l5218 2BEE  
                        i2l6050 4140                          i2l6114 4C9A                          i2l5172 4C6E  
                        i2l5164 4C56                          i2l5156 4C36                          i2l5148 4C1C  
                        i2l6060 4168                          i2l6124 4D4A                          i2l5252 3FE2  
                        i2l5158 4C3E                          i2l5190 2B80                          i2l6062 4174  
                        i2l6054 4150                          i2l6118 4CBE                          i2l6126 4D56  
                        i2l5168 4C60                          i2l5184 2B56                          i2l6064 417A  
                        i2l5272 403C                          i2l6080 5254                          i2l6090 4AB4  
                        i2l5282 4064                          i2l5258 400A                          i2l6410 0EAC  
                        i2l6068 4190                          i2l6092 4AC0                          i2l5276 404C  
                        i2l6500 11D4                          i2l6094 4AC4                          i2l5286 4074  
                        i2l6502 11E4                          i2l6342 0CE8                          i2l5800 44BC  
                        i2l6520 12AC                          i2l6512 121A                          i2l6440 0FD4  
                        i2l6344 0CFA                          i2l6610 156A                          i2l6530 12E0  
                        i2l6506 11F0                          i2l6450 1046                          i2l6442 1002  
                        i2l6434 0FA0                          i2l6426 0F3C                          i2l6362 0D8C  
                        i2l6354 0D2E                          i2l6338 0CD6                          i2l4780 4692  
                        i2l6620 15B0                          i2l6540 1348                          i2l6524 12B8  
                        i2l6508 11FE                          i2l6444 1012                          i2l6372 0DAE  
                        i2l6364 0D90                          i2l6348 0D00                          i2l6700 375C  
                        i2l5814 4EB0                          i2l4790 46EE                          i2l4782 46B0  
                        i2l4774 467A                          i2l5830 2A04                          i2l6622 15B8  
                        i2l6526 12C6                          i2l6518 12A2                          i2l6470 1126  
                        i2l6454 106A                          i2l6438 0FC4                          i2l6382 0DE2  
                        i2l6374 0DB8                          i2l6366 0D94                          i2l6640 1608  
                        i2l6616 158C                          i2l6608 155A                          i2l6560 1460  
                        i2l6552 1432                          i2l6536 12F8                          i2l6464 10BE  
                        i2l6384 0DF6                          i2l6376 0DBE                          i2l6368 0D98  
                        i2l4786 46C6                          i2l4778 4688                          i2l5930 3B5A  
                        i2l5914 3B1C                          i2l5906 3AEC                          i2l6634 15EC  
                        i2l6546 141C                          i2l6490 11A8                          i2l6482 115E  
                        i2l6378 0DD0                          i2l6394 0E1C                          i2l6722 37A6  
                        i2l6706 376C                          i2l5780 447A                          i2l4788 46E4  
                        i2l5852 1D34                          i2l6636 15F4                          i2l6644 1622  
                        i2l6628 15D6                          i2l6580 14E6                          i2l6548 1426  
                        i2l6468 1122                          i2l6388 0E0A                          i2l6396 0E5C  
                        i2l6660 1736                          i2l5782 4480                          i2l5926 3B4A  
                        i2l5838 2AC4                          i2l5870 1F28                          i2l5862 1DFC  
                        i2l6646 162E                          i2l6654 1710                          i2l6574 14BC  
                        i2l6486 118E                          i2l6726 37B8                          i2l6718 3796  
                        i2l5792 44A2                          i2l5776 446C                          i2l5936 3B72  
                        i2l5952 3864                          i2l6648 16A6                          i2l6656 1720  
                        i2l6592 151E                          i2l6496 11C8                          i2l5794 44A8  
                        i2l5786 448E                          i2l5938 3B7E                          i2l5946 3838  
                        i2l5858 1DD8                          i2l6658 1726                          i2l6594 1522  
                        i2l6578 14E2                          i2l5788 4494                          i2l5892 3AAA  
                        i2l5876 1FCC                          i2l5798 44B6                          i2l5886 3A8C  
                        i2l5982 38F2                          i2l5992 391A                          i2l5994 3926  
                        i2l5986 3902                          u520_41 2B14                       ??i2_scale 0027  
                        u521_41 2B28                          u541_41 3FCA                          u543_41 3FF2  
                        u642_41 381C                          u644_41 3848                          u656_41 40BE  
                        _TMR0IE 007F95                          _TMR0IF 007F92                       ??i2_putch 0005  
                        _TMR1IE 007CE8                          _TMR1IF 007CF0                          _TMR3IE 007D01  
                        _SSPADD 000FC8                          _TRISC3 007CA3                          _TRISC4 007CA4  
                        _SSPBUF 000FC9          __size_ofi2__tdiv_to_l_ 0132                __end_of_lcdClear 526C  
             _angleToPulse$1329 00E5                  __CFG_XINST$OFF 000000                    i2_scale$1527 0027  
              __end_of__powers_ FEA7                          ___ftge 4360                       ??___aldiv 0088  
                     ??___almod 0096                          ___wmul 50A4                       ??___awdiv 008A  
                     ??___ftadd 00C0                  __CFG_STVREN$ON 000000                       ??___awmod 0084  
                     ??___ftdiv 0098                       ??___ftneg 0083                       ??___lldiv 0088  
                     ??___ftmul 00A7                       ??___llmod 0095                       ??___ftsub 00CC  
                     ??___fttol 00CA                          _fround 23AA                          clear_0 4F46  
              ___awdiv@quotient 008C                          _period 0113                 ___awmod@divisor 0082  
                     ??_lcdHome 0084                 ___awmod@counter 0084                          _servos 0173  
                     ??_lcdInst 0082                          _printf 0012                __end_of_pinSetup 506A  
              __end_of_setAngle 4360                  i2___awdiv@sign 000C               analogRead@channel 0080  
         ___ftmul@f3_as_product 00AB                       ??_initLCD 0084                       ??_isdigit 0080  
             __end_ofi2___awdiv 4A92               __end_ofi2___ftadd 2CB0               __end_ofi2___awmod 4C78  
                i2___ftadd@exp1 0039                  i2___ftadd@exp2 0038               __end_ofi2___ftneg 51FA  
             __end_ofi2___lldiv 4B14               __end_ofi2___ftmul 40AE                   setAngle@angle 00EE  
             __end_ofi2___llmod 4CDE               __end_ofi2___ftsub 502C               __end_ofi2___fttol 41A2  
                i2___ftadd@sign 0037                    __mediumconst FE30                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                   setAngle@motor 00EC  
                     ??_service 0068                  i2___awmod@sign 0006               __end_ofi2_lcdInst 523E  
             __end_ofi2_isdigit 525C                      __accesstop 0080         __end_of__initialization 4F58  
                    ___altoft@c 0088                      ___ftadd@f1 00BA                      ___ftadd@f2 00BD  
           __size_ofi2___ftpack 00AE                  i2printf@tmpval 0056                      ___ftge@ff1 0080  
                    ___ftge@ff2 0083             __size_ofi2___lltoft 005C                   ___rparam_used 000001  
                    ___ftdiv@f1 0092                      ___ftdiv@f2 0095                      ___ftdiv@f3 009C  
                    ___ftneg@f1 0080                      ___awtoft@c 0088                  i2___ftpack@arg 0001  
         __size_ofi2_startTimer 004C              i2__tdiv_to_l_@exp1 000F               i2___llmod@divisor 0012  
                i2___ftpack@exp 0004              i2__tdiv_to_l_@cntr 000E               i2___llmod@counter 0016  
            i2__tdiv_to_l_@quot 000A                      ___ftmul@f1 00A1                      ___ftmul@f2 00A4  
                    ___ftsub@f1 00C6                      ___ftsub@f2 00C9                      ___fttol@f1 00C6  
          __end_of_happynewyear FEDF                  __pcstackCOMRAM 0001              i2___lldiv@dividend 0001  
         __size_of_angleToPulse 0166             __size_ofi2_lcdClear 0008                    __pidataBANK1 506A  
                    ___lltoft@c 0088                   _cylinderMotor 0125                  i2___ftmul@cntr 0022  
                 __end_of_scale 1C00                    ?_sortBattery 0001                  i2___ftmul@sign 0023  
                 __end_of_putch 51B0                     i2printf@idx 004D                     i2printf@len 0050  
                   i2printf@exp 005A                     i2printf@val 005C                  i2___fttol@exp1 0039  
                i2___fttol@lval 0035                       ?i2___ftge 0001                       ?i2___wmul 000F  
                 i2__tdiv_to_l_ 380C              __size_of_lcdNibble 0078                      __div_to_l_ 2FF6  
                   i2putch@data 0005                       ?i2_fround 0024                       ?i2_printf 0040  
               __div_to_l_@exp1 008B                 __div_to_l_@cntr 008A                         ??_scale 00B3  
                i2___lltoft@exp 0011                 __div_to_l_@quot 0086                         ??_putch 0084  
            i2___lldiv@quotient 0009                    i2_startTimer 4E8A                      __pbssBANK0 00FF  
                    __pbssBANK1 016B                i2__tdiv_to_l_@f1 0001                i2__tdiv_to_l_@f2 0004  
                  _angleToPulse 317E           __size_of_digitalWrite 0104              __size_of_initTimer 004E  
            __size_of_initServo 008C                      _analogRead 4FAA                   __div_to_l_@f1 0080  
                 __div_to_l_@f2 0083                         ?___ftge 0080                    ?i2_lcdNibble 0001  
                       ?___wmul 008E           sortBattery@resolution 015D                       ?___altoft 0088  
                       ?_fround 00B0                      _lcdNewline 525C                       ?___awtoft 0088  
                     ?___ftpack 0080                         ?_printf 00D5                       ?___lltoft 0088  
                ?i2__tdiv_to_l_ 0001                      ??i2___ftge 0007                      ??i2___wmul 0013  
__size_of_servoInterruptService 00FA   __end_of_servoInterruptService 3FBA                      ??i2_fround 0027  
             i2startTimer@timer 0007                       ?_lcdClear 0001                angleToPulse@a000 00E8  
                    ??i2_printf 0044                angleToPulse@a180 00E1                    _digitalWrite 3DBC  
                       _SSPCON1 000FC6                         _SSPCON2 000FC5                         _SSPSTAT 000FC7  
       __size_ofi2_digitalWrite 00C8                         i2_scale 1C00                         _V_LIM_C 0106  
              _nothingImportant 010B                         i2_putch 51FA                       ?_pinSetup 0001  
                     ?_setAngle 00EC               __end_of_lcdNibble 4C08               __end_of__npowers_ FE80  
                       __Hparam 0000                      _scale$1332 00B3                         __Lparam 0000  
                       ___aldiv 3B96                         ___almod 41A2                 __size_of___ftge 00C8  
                       ___awdiv 44F0                         ___ftadd 2656                         ___awmod 4718  
                    _readKeypad 510A                         ___ftdiv 3442                         ___ftneg 50DA  
                       ___lldiv 45AE                 __size_of___wmul 0036                         ___ftmul 32E4  
                       ___llmod 4858                         ___ftsub 4E3E                         ___fttol 358E  
                    ??___altoft 008C                         __pcinit 4F20                    ??i2___ftpack 0006  
                    ??___awtoft 008B                      ??___ftpack 0085                 __size_of_fround 02AC  
       i2___ftmul@f3_as_product 001F                         __ramtop 1000                         _lcdHome 526C  
                  ??i2___lltoft 000D                         _lcdInst 515E                      ??___lltoft 008C  
                       __ptext0 2CB0                         __ptext1 1FF0                         __ptext2 510A  
                       __ptext3 0012                         __ptext4 1752                         __ptext5 5188  
                       __ptext6 525C                         __ptext7 5134                         __ptext8 23AA  
                       __ptext9 50A4                 __size_of_printf 0CB8                         _padPin1 0129  
                       _padPin2 012D                         _padPin3 017B                   i2_fround$1525 002A  
                 i2_fround$1526 0027                   startTimer@val 0082                         _initLCD 4ED6  
             __end_of_hexpowers FEC7                     ?__div_to_l_ 0080                         _lastKey 00FF  
             __end_of_initTimer 4E3E               __end_of_initServo 4A0E                   i2_isdigit$956 0002  
                       _dpowers FE31                    i2fround@prec 002D                         _isdigit 5134  
              ___awmod@dividend 0080                ___aldiv@dividend 0080                    ??i2_lcdClear 0005  
                    ??_lcdClear 0084                         _service 0008                  __pintcode_body 36D2  
          end_of_initialization 4F58                   __Lmediumconst FE30                         int_func 36D2  
           i2___wmul@multiplier 000F                  digitalRead@pin 0080                     ?_analogRead 0080  
            __end_ofi2___ftpack 4718                      ??_pinSetup 0080                      ??_setAngle 00F0  
            __end_ofi2___lltoft 4DA0                 ___lldiv@divisor 0084                 ___lldiv@counter 008C  
                setAngle@period 00F2                         printf@c 0156                         printf@f 00D5  
              ___aldiv@quotient 008A                         postdec1 000FE5                         postdec2 000FDD  
               _batteryDetected 0183                         postinc0 000FEE                         postinc2 000FDE  
            __end_ofi2_lcdClear 5284                  __tdiv_to_l_@f1 0080                  __tdiv_to_l_@f2 0083  
               ??i2__tdiv_to_l_ 0007                   ??_digitalRead 0082                     ?_lcdNewline 0001  
                 ??__tdiv_to_l_ 0086                       _PORTBbits 000F81            __size_of_sortBattery 03BA  
           _redirectAngle_OTHER 011B                    _happynewyear FED8              angleToPulse@offset 00DD  
            sortBattery@V_float 0157                       i2___awdiv 4A0E                       i2___ftadd 2B04  
                     i2___awmod 4C08                       i2___ftneg 51D6                       i2___lldiv 4A92  
                     i2___ftmul 3FBA                       i2___llmod 4C78                       i2___ftsub 4FEC  
                     i2___fttol 40AE                      _startTimer 4DA0                       i2_lcdInst 521C  
                   ___ftdiv@exp 009F                     printf@width 014F              i2___llmod@dividend 000E  
            i2___awdiv@dividend 0007                 i2___ftpack@sign 0005                       i2_isdigit 523E  
           __size_of__div_to_l_ 0188                     ___ftmul@exp 00AA                     ?_readKeypad 0001  
                __end_of___ftge 4428                  __end_of___wmul 50DA            __size_ofi2_lcdNibble 0066  
                 i2lcdInst@data 0004                  __end_of_fround 2656                i2___wmul@product 0013  
                __end_of_printf 0CCA                   i2_printf$1528 004A                    i2printf@flag 0065  
                  i2printf@fval 0060             __size_of_analogRead 0042                    i2printf@prec 0054  
           start_initialization 4F20               __size_ofi2___ftge 0090             __end_of_digitalRead 3A6E  
            i2___awdiv@quotient 000D               __size_ofi2___wmul 0026             __end_of__tdiv_to_l_ 2FF6  
                initServo@angle 00F8                       i2printf@c 0067                       i2printf@f 0040  
                initTimer@timer 0080                 i2___fttol@sign1 0034                  initServo@motor 00F6  
             __size_ofi2_fround 0246                      ?i2___awdiv 0007                      ?i2___ftadd 002E  
                    ?i2___awmod 0001                      ?i2___ftneg 0001                      ?i2___lldiv 0001  
                    ?i2___ftmul 0015                      ?i2___llmod 000E                      ?i2___ftsub 003A  
                    ?i2___fttol 002B               __size_ofi2_printf 0A88                  i2_digitalWrite 4428  
                    ?i2_lcdInst 0001             __size_of_lcdNewline 0008                 ___llmod@divisor 0091  
               ___llmod@counter 0095                      ?i2_isdigit 0001                        ??___ftge 0086  
                      ??___wmul 0092                     __pdataBANK1 0100                __CFG_LPT1OSC$OFF 000000  
                      ??_fround 00B3                        ??_printf 00DF               __size_of___altoft 009E  
                    fround@prec 00B9                   ?i2__div_to_l_ 0001               __size_of___awtoft 0044  
             __size_of___ftpack 010C               __size_of___lltoft 007C                     __pbssCOMRAM 007B  
                 __pcstackBANK0 0080                   __pcstackBANK1 0139          __end_ofi2_digitalWrite 44F0  
        sortBattery@targetAngle 0160                     ?_startTimer 0080               __size_of_lcdClear 0008  
           __size_of_readKeypad 002A                        ?i2_scale 0024                        ?i2_putch 0001  
             i2digitalWrite@pin 0007               i2digitalWrite@val 0009               __CFG_CCP2MX$PORTC 000000  
             __size_of_pinSetup 003E               __size_of_setAngle 00CC                       __pintcode 0008  
                 __pmediumconst FE30                       _lcdNibble 4B90                        ?___aldiv 0080  
                      ?___almod 008E                        ?___awdiv 0086                        ?___ftadd 00BA  
                      ?___awmod 0080                        ?___ftdiv 0092                        ?___ftneg 0080  
                      ?___lldiv 0080                        ?___ftmul 00A1                        ?___llmod 008D  
                      ?___ftsub 00C6                       __npowers_ FE59                        ?___fttol 00C6  
                 ?i2_lcdNewline 0001                     _digitalRead 393E                ___almod@dividend 008E  
                      ?_lcdHome 0001                        ?_lcdInst 0001                     __tdiv_to_l_ 2E58  
                ??i2__div_to_l_ 0007                    ??__div_to_l_ 0086                        ?_initLCD 0001  
               startTimer@timer 0080                        ?_isdigit 0001                        ?_service 0001  
                     _hexpowers FEA7                       _initTimer 4DF0                       _initServo 4982  
               ?i2_digitalWrite 0007           _servoInterruptService 3EC0                     ??i2___awdiv 000B  
                   ??i2___ftadd 0034                     ??i2___awmod 0005                     ??i2___ftneg 0004  
                   ??i2___lldiv 0009                     ??i2___ftmul 001B                  __size_of_scale 04AE  
                   ??i2___llmod 0016                     ??i2___ftsub 0040                     ??i2___fttol 002F  
                __size_of_putch 0028                        _AA_float 011D                 ___aldiv@divisor 0084  
                   ??i2_lcdInst 0003                 ___aldiv@counter 0088                  sortBattery@Vcc 015A  
                ___wmul@product 0092                        _LATDbits 000F8C                    ??_analogRead 0084  
                   ??i2_isdigit 0001              __end_of__div_to_l_ 317E                        i2u700_40 0EE4  
                      i2u700_45 0EDA                        i2u622_44 4452                        i2u622_45 444C  
                      i2u722_40 12D6                        i2u658_40 40F8                        i2u658_45 40F0  
                      i2u793_47 520E                        i2u794_47 5222                        i2u795_47 5234  
                      i2u796_47 4CF6                        i2u797_47 4D04                        i2u798_47 4D2A  
                      i2u799_47 4D38                __CFG_WDTPS$32768 000000                      ?_lcdNibble 0001  
                _padAngle_CLOSE 010D                 i2__div_to_l_@f1 0001                 i2__div_to_l_@f2 0004  
                 digitalWrite@p 0087                  ??i2_lcdNewline 0005                      service@key 007A  
                  ??_lcdNewline 0084             __size_of_startTimer 0050               angleToPulse@angle 00D5  
             ___wmul@multiplier 008E                        i2___ftge 48F2                        i2___wmul 51B0  
                 lcdNibble@data 0081                      printf@flag 0154                   lcdNibble@temp 0080  
                    printf@fval 0151                      printf@prec 0143               i2___awdiv@divisor 0009  
                      i2_fround 28BE              __end_of_analogRead 4FEC                        _V_LIM_AA 0103  
                      _V_LIM_9V 0100               i2___awdiv@counter 000B                        i2_printf 0CCA  
                    ?_initTimer 0080                      ?_initServo 00F6               sortBattery@signal 0162  
                     copy_data0 4F34              i2___awmod@dividend 0001                __size_ofi2_scale 03F0  
              __size_ofi2_putch 0022              __end_of_lcdNewline 5264                   readKeypad@key 0080  
                      __Hrparam 0000                        __Lrparam 0000              __CFG_BOREN$SBORDIS 000000  
                  ??_readKeypad 0080                   ??_sortBattery 00F6                __size_of___aldiv 011A  
              __size_of___almod 00F2                __size_of___awdiv 00BE                __size_of___ftadd 0268  
              __size_of___awmod 00A2                __size_of___ftdiv 014C                __size_of___ftneg 0030  
         i2___wmul@multiplicand 0011                __size_of___lldiv 00BC                        ___altoft 47BA  
              __size_of___ftmul 015E                __size_of___llmod 009A                __size_of___ftsub 004C  
              __size_of___fttol 0144                        ___awtoft 4F66                        ___ftpack 3CB0  
                   _fround$1330 00B6                     _fround$1331 00B3                        ___lltoft 4B14  
         __end_ofi2__tdiv_to_l_ 393E                     _isdigit$956 0081                __size_of_lcdHome 0008  
              __size_of_lcdInst 002A                       setAngle@i 00F4                __size_of_initLCD 004A  
              __size_of_isdigit 002A          ?_servoInterruptService 0001                        _lcdClear 5264  
                      __ptext10 4718                        __ptext11 44F0                        __ptext20 5264  
                      __ptext12 2E58                        __ptext21 3DBC                        __ptext13 2FF6  
                      __ptext30 358E                        __ptext22 393E                        __ptext14 4B14  
                      __ptext31 32E4                        __ptext23 4FAA                        __ptext15 4858  
                      __ptext40 4B90                        __ptext32 3442                        __ptext24 502C  
                      __ptext16 45AE                        __ptext41 41A2                        __ptext33 2656  
                      __ptext25 526C                        __ptext17 4E3E                        __ptext50 51B0  
                      __ptext42 3B96                        __ptext34 4F66                        __ptext26 4982  
                      __ptext18 50DA                        __ptext51 3FBA                        __ptext35 47BA  
                      __ptext27 4DA0                        __ptext19 4360                        __ptext60 2B04  
                      __ptext52 4A0E                        __ptext44 0CCA                        __ptext36 3CB0  
                      __ptext28 4294                        __ptext61 466A                        __ptext53 380C  
                      __ptext45 1C00                        __ptext37 4DF0                        __ptext29 317E  
                      __ptext70 4C08                        __ptext62 51D6                        __ptext54 3A6E  
                      __ptext46 51FA                        __ptext38 4ED6                        __ptext63 48F2  
                      __ptext55 4D44                        __ptext47 5274                        __ptext39 515E  
                      __ptext64 527C                        __ptext56 4C78                        __ptext48 523E  
                      __ptext65 521C                        __ptext57 4A92                        __ptext49 28BE  
                      __ptext66 4CDE                        __ptext58 40AE                        __ptext67 3EC0  
                      __ptext59 4FEC                        __ptext68 4E8A                        __ptext69 4428  
                      __powers_ FE80                __size_of_service 3804                 i2startTimer@val 0009  
               ___almod@divisor 0092                   ?i2_startTimer 0007                        _padServo 0131  
               ___almod@counter 0096              __end_of_readKeypad 5134                   ?_angleToPulse 00D5  
                 __size_of_main 01A8            __end_ofi2__div_to_l_ 3B96                        _pinSetup 502C  
                      _setAngle 4294                        _prevTime 0187                   ??i2_lcdNibble 0001  
                   ??_lcdNibble 0080                   _padAngle_OPEN 0111                        int$flags 007F  
                     printf@idx 013E                       printf@len 013F                       printf@exp 0149  
                     printf@val 014B               i2___awmod@divisor 0003                       putch@data 0084  
             i2___awmod@counter 0005             __end_of_sortBattery 23AA                      _INTCONbits 000FF2  
                 ?_digitalWrite 0080                     ??_initTimer 0082                     ??_initServo 00FA  
                      isdigit@c 0082                        scale@scl 00B6                  ??i2_startTimer 000D  
                  ??_startTimer 0086                        intlevel2 0000                __tdiv_to_l_@exp1 008E  
              __tdiv_to_l_@cntr 008D                  ??_angleToPulse 00D9            __end_ofi2_lcdNewline 527C  
              __tdiv_to_l_@quot 0089                ___lldiv@dividend 0080                _redirectAngle_AA 0117  
              _redirectAngle_9V 0115                        printf@ap 0141                        printf@cp 013C  
                   lcdInst@data 0083                    ?_digitalRead 0080                    ?__tdiv_to_l_ 0080  
            __end_of_startTimer 4DF0                     _printf$1333 0139             __end_ofi2_lcdNibble 4D44  
              ??i2_digitalWrite 000B                ___lldiv@quotient 0088                  ??_digitalWrite 0084  
                  ___aldiv@sign 0089                 _redirectAngle_C 0119                _padAngle_NEUTRAL 010F  
               digitalWrite@pin 0080                 digitalWrite@val 0082               i2__div_to_l_@exp1 000C  
             i2__div_to_l_@cntr 000B                    ___almod@sign 0097               i2__div_to_l_@quot 0007  
