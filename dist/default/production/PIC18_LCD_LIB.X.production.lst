

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Mar 31 14:47:57 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    76                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    82                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    83                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    84  0000                     
    85                           ; Version 1.40
    86                           ; Generated 01/12/2016 GMT
    87                           ; 
    88                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    89                           ; All rights reserved.
    90                           ; 
    91                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    92                           ; 
    93                           ; Redistribution and use in source and binary forms, with or without modification, are
    94                           ; permitted provided that the following conditions are met:
    95                           ; 
    96                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    97                           ;        conditions and the following disclaimer.
    98                           ; 
    99                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   100                           ;        of conditions and the following disclaimer in the documentation and/or other
   101                           ;        materials provided with the distribution.
   102                           ; 
   103                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   104                           ;        software without specific prior written permission.
   105                           ; 
   106                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   107                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   108                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   109                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   110                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   111                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   112                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   113                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   114                           ; 
   115                           ; 
   116                           ; Code-generator required, PIC18F4620 Definitions
   117                           ; 
   118                           ; SFR Addresses
   119  0000                     
   120                           	psect	idataCOMRAM
   121  003D06                     __pidataCOMRAM:
   122                           	opt stack 0
   123                           
   124                           ;initializer for _V_LIM_9V
   125  003D06  77                 	db	119
   126  003D07  EE                 	db	238
   127  003D08  3F                 	db	63
   128                           
   129                           ;initializer for _V_LIM_AA
   130  003D09  C1                 	db	193
   131  003D0A  4A                 	db	74
   132  003D0B  3E                 	db	62
   133                           
   134                           ;initializer for _V_LIM_C
   135  003D0C  A7                 	db	167
   136  003D0D  A9                 	db	169
   137  003D0E  3F                 	db	63
   138                           
   139                           ;initializer for _angle
   140  003D0F  005A               	dw	90
   141                           
   142                           ;initializer for _padAngle_OPEN
   143  003D11  00B4               	dw	180
   144                           
   145                           ;initializer for _redirectAngle_9V
   146  003D13  0076               	dw	118
   147                           
   148                           ;initializer for _AA_float
   149  003D15  0002               	dw	2
   150  003D17  0005               	dw	5
   151                           
   152                           ;initializer for _padPin1
   153  003D19  0002               	dw	2
   154  003D1B  0006               	dw	6
   155                           
   156                           	psect	idataBANK0
   157  003D36                     __pidataBANK0:
   158                           	opt stack 0
   159                           
   160                           ;initializer for _padAngle_CLOSE
   161  003D36  001E               	dw	30
   162                           
   163                           ;initializer for _redirectAngle_C
   164  003D38  00A6               	dw	166
   165                           
   166                           ;initializer for _redirectAngle_OTHER
   167  003D3A  0099               	dw	153
   168                           
   169                           	psect	idataBANK1
   170  003CB0                     __pidataBANK1:
   171                           	opt stack 0
   172                           
   173                           ;initializer for _padAngle_NEUTRAL
   174  003CB0  004C               	dw	76
   175                           
   176                           ;initializer for _redirectAngle_AA
   177  003CB2  008A               	dw	138
   178                           
   179                           ;initializer for _stoppingTime
   180  003CB4  2710               	dw	10000
   181                           
   182                           ;initializer for _conveyorServo
   183  003CB6  0002               	dw	2
   184  003CB8  0002               	dw	2
   185                           
   186                           ;initializer for _cylinderDir
   187  003CBA  0003               	dw	3
   188  003CBC  0001               	dw	1
   189                           
   190                           ;initializer for _cylinderMotor
   191  003CBE  0002               	dw	2
   192  003CC0  0000               	dw	0
   193                           
   194                           ;initializer for _padPin2
   195  003CC2  0002               	dw	2
   196  003CC4  0007               	dw	7
   197                           
   198                           ;initializer for _padServo
   199  003CC6  0002               	dw	2
   200  003CC8  0001               	dw	1
   201                           
   202                           ;initializer for _redirectingServo
   203  003CCA  0003               	dw	3
   204  003CCC  0000               	dw	0
   205                           
   206                           	psect	mediumconst
   207  00FE10                     __pmediumconst:
   208                           	opt stack 0
   209  00FE10  00                 	db	0
   210  00FE11                     _dpowers:
   211                           	opt stack 0
   212  00FE11  0001               	dw	1
   213  00FE13  0000               	dw	0
   214  00FE15  000A               	dw	10
   215  00FE17  0000               	dw	0
   216  00FE19  0064               	dw	100
   217  00FE1B  0000               	dw	0
   218  00FE1D  03E8               	dw	1000
   219  00FE1F  0000               	dw	0
   220  00FE21  2710               	dw	10000
   221  00FE23  0000               	dw	0
   222  00FE25  86A0               	dw	34464
   223  00FE27  0001               	dw	1
   224  00FE29  4240               	dw	16960
   225  00FE2B  000F               	dw	15
   226  00FE2D  9680               	dw	38528
   227  00FE2F  0098               	dw	152
   228  00FE31  E100               	dw	57600
   229  00FE33  05F5               	dw	1525
   230  00FE35  CA00               	dw	51712
   231  00FE37  3B9A               	dw	15258
   232  00FE39                     __end_of_dpowers:
   233                           	opt stack 0
   234  00FE39                     __npowers_:
   235                           	opt stack 0
   236  00FE39  00                 	db	0
   237  00FE3A  80                 	db	128
   238  00FE3B  3F                 	db	63
   239  00FE3C  CD                 	db	205
   240  00FE3D  CC                 	db	204
   241  00FE3E  3D                 	db	61
   242  00FE3F  D7                 	db	215
   243  00FE40  23                 	db	35
   244  00FE41  3C                 	db	60
   245  00FE42  12                 	db	18
   246  00FE43  83                 	db	131
   247  00FE44  3A                 	db	58
   248  00FE45  B7                 	db	183
   249  00FE46  D1                 	db	209
   250  00FE47  38                 	db	56
   251  00FE48  C6                 	db	198
   252  00FE49  27                 	db	39
   253  00FE4A  37                 	db	55
   254  00FE4B  38                 	db	56
   255  00FE4C  86                 	db	134
   256  00FE4D  35                 	db	53
   257  00FE4E  C0                 	db	192
   258  00FE4F  D6                 	db	214
   259  00FE50  33                 	db	51
   260  00FE51  CC                 	db	204
   261  00FE52  2B                 	db	43
   262  00FE53  32                 	db	50
   263  00FE54  70                 	db	112
   264  00FE55  89                 	db	137
   265  00FE56  30                 	db	48
   266  00FE57  E7                 	db	231
   267  00FE58  DB                 	db	219
   268  00FE59  2E                 	db	46
   269  00FE5A  E5                 	db	229
   270  00FE5B  3C                 	db	60
   271  00FE5C  1E                 	db	30
   272  00FE5D  42                 	db	66
   273  00FE5E  A2                 	db	162
   274  00FE5F  0D                 	db	13
   275  00FE60                     __end_of__npowers_:
   276                           	opt stack 0
   277  00FE60                     __powers_:
   278                           	opt stack 0
   279  00FE60  00                 	db	0
   280  00FE61  80                 	db	128
   281  00FE62  3F                 	db	63
   282  00FE63  00                 	db	0
   283  00FE64  20                 	db	32
   284  00FE65  41                 	db	65
   285  00FE66  00                 	db	0
   286  00FE67  C8                 	db	200
   287  00FE68  42                 	db	66
   288  00FE69  00                 	db	0
   289  00FE6A  7A                 	db	122
   290  00FE6B  44                 	db	68
   291  00FE6C  40                 	db	64
   292  00FE6D  1C                 	db	28
   293  00FE6E  46                 	db	70
   294  00FE6F  50                 	db	80
   295  00FE70  C3                 	db	195
   296  00FE71  47                 	db	71
   297  00FE72  24                 	db	36
   298  00FE73  74                 	db	116
   299  00FE74  49                 	db	73
   300  00FE75  97                 	db	151
   301  00FE76  18                 	db	24
   302  00FE77  4B                 	db	75
   303  00FE78  BC                 	db	188
   304  00FE79  BE                 	db	190
   305  00FE7A  4C                 	db	76
   306  00FE7B  6B                 	db	107
   307  00FE7C  6E                 	db	110
   308  00FE7D  4E                 	db	78
   309  00FE7E  03                 	db	3
   310  00FE7F  15                 	db	21
   311  00FE80  50                 	db	80
   312  00FE81  79                 	db	121
   313  00FE82  AD                 	db	173
   314  00FE83  60                 	db	96
   315  00FE84  F3                 	db	243
   316  00FE85  49                 	db	73
   317  00FE86  71                 	db	113
   318  00FE87                     __end_of__powers_:
   319                           	opt stack 0
   320  00FE87                     _hexpowers:
   321                           	opt stack 0
   322  00FE87  0001               	dw	1
   323  00FE89  0000               	dw	0
   324  00FE8B  0010               	dw	16
   325  00FE8D  0000               	dw	0
   326  00FE8F  0100               	dw	256
   327  00FE91  0000               	dw	0
   328  00FE93  1000               	dw	4096
   329  00FE95  0000               	dw	0
   330  00FE97  0000               	dw	0
   331  00FE99  0001               	dw	1
   332  00FE9B  0000               	dw	0
   333  00FE9D  0010               	dw	16
   334  00FE9F  0000               	dw	0
   335  00FEA1  0100               	dw	256
   336  00FEA3  0000               	dw	0
   337  00FEA5  1000               	dw	4096
   338  00FEA7                     __end_of_hexpowers:
   339                           	opt stack 0
   340  00FEA7                     _keys:
   341                           	opt stack 0
   342  00FEA7  31                 	db	49
   343  00FEA8  32                 	db	50
   344  00FEA9  33                 	db	51
   345  00FEAA  41                 	db	65
   346  00FEAB  34                 	db	52
   347  00FEAC  35                 	db	53
   348  00FEAD  36                 	db	54
   349  00FEAE  42                 	db	66
   350  00FEAF  37                 	db	55
   351  00FEB0  38                 	db	56
   352  00FEB1  39                 	db	57
   353  00FEB2  43                 	db	67
   354  00FEB3  2A                 	db	42
   355  00FEB4  30                 	db	48
   356  00FEB5  23                 	db	35
   357  00FEB6  44                 	db	68
   358  00FEB7  00                 	db	0
   359  00FEB8                     __end_of_keys:
   360                           	opt stack 0
   361  00FEB8                     _happynewyear:
   362                           	opt stack 0
   363  00FEB8  00                 	db	0
   364  00FEB9  59                 	db	89
   365  00FEBA  03                 	db	3
   366  00FEBB  01                 	db	1
   367  00FEBC  13                 	db	19
   368  00FEBD  04                 	db	4
   369  00FEBE  17                 	db	23
   370  00FEBF                     __end_of_happynewyear:
   371                           	opt stack 0
   372  0000                     _ADCON0	set	4034
   373  0000                     _ADCON1	set	4033
   374  0000                     _ADCON2	set	4032
   375  0000                     _ADRESH	set	4036
   376  0000                     _ADRESL	set	4035
   377  0000                     _EEADR	set	4009
   378  0000                     _EEADRH	set	4010
   379  0000                     _EECON1	set	4006
   380  0000                     _EECON2	set	4007
   381  0000                     _EEDATA	set	4008
   382  0000                     _INTCONbits	set	4082
   383  0000                     _LATA	set	3977
   384  0000                     _LATB	set	3978
   385  0000                     _LATC	set	3979
   386  0000                     _LATD	set	3980
   387  0000                     _LATDbits	set	3980
   388  0000                     _LATE	set	3981
   389  0000                     _PORTA	set	3968
   390  0000                     _PORTB	set	3969
   391  0000                     _PORTBbits	set	3969
   392  0000                     _PORTC	set	3970
   393  0000                     _PORTD	set	3971
   394  0000                     _SSPADD	set	4040
   395  0000                     _SSPBUF	set	4041
   396  0000                     _SSPCON1	set	4038
   397  0000                     _SSPCON2	set	4037
   398  0000                     _SSPSTAT	set	4039
   399  0000                     _T0CON	set	4053
   400  0000                     _T1CON	set	4045
   401  0000                     _T3CON	set	4017
   402  0000                     _TMR0H	set	4055
   403  0000                     _TMR0L	set	4054
   404  0000                     _TMR1H	set	4047
   405  0000                     _TMR1L	set	4046
   406  0000                     _TMR3H	set	4019
   407  0000                     _TMR3L	set	4018
   408  0000                     _TRISA	set	3986
   409  0000                     _TRISB	set	3987
   410  0000                     _TRISC	set	3988
   411  0000                     _TRISD	set	3989
   412  0000                     _TRISE	set	3990
   413  0000                     _ACKDT	set	32301
   414  0000                     _ACKEN	set	32300
   415  0000                     _EEIF	set	32012
   416  0000                     _INT0IE	set	32660
   417  0000                     _INT0IF	set	32657
   418  0000                     _INT1IE	set	32643
   419  0000                     _INT1IF	set	32640
   420  0000                     _PEIE	set	32662
   421  0000                     _PEN	set	32298
   422  0000                     _RCEN	set	32299
   423  0000                     _RSEN	set	32297
   424  0000                     _SEN	set	32296
   425  0000                     _TMR0IE	set	32661
   426  0000                     _TMR0IF	set	32658
   427  0000                     _TMR1IE	set	31976
   428  0000                     _TMR1IF	set	31984
   429  0000                     _TMR3IE	set	32001
   430  0000                     _TRISC3	set	31907
   431  0000                     _TRISC4	set	31908
   432  00FEBF                     STR_17:
   433  00FEBF  25                 	db	37
   434  00FEC0  63                 	db	99	;'c'
   435  00FEC1  29                 	db	41
   436  00FEC2  20                 	db	32
   437  00FEC3  74                 	db	116	;'t'
   438  00FEC4  69                 	db	105	;'i'
   439  00FEC5  6D                 	db	109	;'m'
   440  00FEC6  65                 	db	101	;'e'
   441  00FEC7  20                 	db	32
   442  00FEC8  20                 	db	32
   443  00FEC9  3C                 	db	60	;'<'
   444  00FECA  41                 	db	65	;'A'
   445  00FECB  20                 	db	32
   446  00FECC  20                 	db	32
   447  00FECD  20                 	db	32
   448  00FECE  20                 	db	32
   449  00FECF  20                 	db	32
   450  00FED0  0A                 	db	10
   451  00FED1  00                 	db	0
   452  00FED2                     STR_13:
   453  00FED2  73                 	db	115	;'s'
   454  00FED3  74                 	db	116	;'t'
   455  00FED4  61                 	db	97	;'a'
   456  00FED5  72                 	db	114	;'r'
   457  00FED6  74                 	db	116	;'t'
   458  00FED7  20                 	db	32
   459  00FED8  20                 	db	32
   460  00FED9  20                 	db	32
   461  00FEDA  3C                 	db	60	;'<'
   462  00FEDB  42                 	db	66	;'B'
   463  00FEDC  20                 	db	32
   464  00FEDD  20                 	db	32
   465  00FEDE  20                 	db	32
   466  00FEDF  20                 	db	32
   467  00FEE0  20                 	db	32
   468  00FEE1  20                 	db	32
   469  00FEE2  0A                 	db	10
   470  00FEE3  00                 	db	0
   471  00FEE4                     STR_11:
   472  00FEE4  20                 	db	32
   473  00FEE5  20                 	db	32
   474  00FEE6  68                 	db	104	;'h'
   475  00FEE7  68                 	db	104	;'h'
   476  00FEE8  3A                 	db	58	;':'
   477  00FEE9  6D                 	db	109	;'m'
   478  00FEEA  6D                 	db	109	;'m'
   479  00FEEB  3A                 	db	58	;':'
   480  00FEEC  73                 	db	115	;'s'
   481  00FEED  73                 	db	115	;'s'
   482  00FEEE  20                 	db	32
   483  00FEEF  20                 	db	32
   484  00FEF0  20                 	db	32
   485  00FEF1  20                 	db	32
   486  00FEF2  20                 	db	32
   487  00FEF3  20                 	db	32
   488  00FEF4  0A                 	db	10
   489  00FEF5  00                 	db	0
   490  00FEF6                     STR_15:
   491  00FEF6  73                 	db	115	;'s'
   492  00FEF7  65                 	db	101	;'e'
   493  00FEF8  6C                 	db	108	;'l'
   494  00FEF9  65                 	db	101	;'e'
   495  00FEFA  63                 	db	99	;'c'
   496  00FEFB  74                 	db	116	;'t'
   497  00FEFC  20                 	db	32
   498  00FEFD  72                 	db	114	;'r'
   499  00FEFE  75                 	db	117	;'u'
   500  00FEFF  6E                 	db	110	;'n'
   501  00FF00  3A                 	db	58	;':'
   502  00FF01  20                 	db	32
   503  00FF02  20                 	db	32
   504  00FF03  20                 	db	32
   505  00FF04  20                 	db	32
   506  00FF05  20                 	db	32
   507  00FF06  0A                 	db	10
   508  00FF07  00                 	db	0
   509  00FF08                     STR_19:
   510  00FF08  74                 	db	116	;'t'
   511  00FF09  69                 	db	105	;'i'
   512  00FF0A  6D                 	db	109	;'m'
   513  00FF0B  65                 	db	101	;'e'
   514  00FF0C  3A                 	db	58	;':'
   515  00FF0D  20                 	db	32
   516  00FF0E  6E                 	db	110	;'n'
   517  00FF0F  6E                 	db	110	;'n'
   518  00FF10  6E                 	db	110	;'n'
   519  00FF11  20                 	db	32
   520  00FF12  73                 	db	115	;'s'
   521  00FF13  65                 	db	101	;'e'
   522  00FF14  63                 	db	99	;'c'
   523  00FF15  20                 	db	32
   524  00FF16  20                 	db	32
   525  00FF17  20                 	db	32
   526  00FF18  0A                 	db	10
   527  00FF19  00                 	db	0
   528  00FF1A                     STR_21:
   529  00FF1A  5B                 	db	91	;'['
   530  00FF1B  41                 	db	65	;'A'
   531  00FF1C  41                 	db	65	;'A'
   532  00FF1D  2C                 	db	44
   533  00FF1E  39                 	db	57	;'9'
   534  00FF1F  56                 	db	86	;'V'
   535  00FF20  2C                 	db	44
   536  00FF21  43                 	db	67	;'C'
   537  00FF22  2C                 	db	44
   538  00FF23  6F                 	db	111	;'o'
   539  00FF24  74                 	db	116	;'t'
   540  00FF25  68                 	db	104	;'h'
   541  00FF26  65                 	db	101	;'e'
   542  00FF27  72                 	db	114	;'r'
   543  00FF28  5D                 	db	93	;']'
   544  00FF29  20                 	db	32
   545  00FF2A  0A                 	db	10
   546  00FF2B  00                 	db	0
   547  00FF2C                     STR_23:
   548  00FF2C  30                 	db	48	;'0'
   549  00FF2D  31                 	db	49	;'1'
   550  00FF2E  32                 	db	50	;'2'
   551  00FF2F  33                 	db	51	;'3'
   552  00FF30  34                 	db	52	;'4'
   553  00FF31  35                 	db	53	;'5'
   554  00FF32  36                 	db	54	;'6'
   555  00FF33  37                 	db	55	;'7'
   556  00FF34  38                 	db	56	;'8'
   557  00FF35  39                 	db	57	;'9'
   558  00FF36  61                 	db	97	;'a'
   559  00FF37  62                 	db	98	;'b'
   560  00FF38  63                 	db	99	;'c'
   561  00FF39  64                 	db	100	;'d'
   562  00FF3A  65                 	db	101	;'e'
   563  00FF3B  66                 	db	102	;'f'
   564  00FF3C  00                 	db	0
   565  00FF3D                     STR_20:
   566  00FF3D  20                 	db	32
   567  00FF3E  20                 	db	32
   568  00FF3F  20                 	db	32
   569  00FF40  20                 	db	32
   570  00FF41  20                 	db	32
   571  00FF42  20                 	db	32
   572  00FF43  20                 	db	32
   573  00FF44  20                 	db	32
   574  00FF45  20                 	db	32
   575  00FF46  20                 	db	32
   576  00FF47  20                 	db	32
   577  00FF48  20                 	db	32
   578  00FF49  20                 	db	32
   579  00FF4A  20                 	db	32
   580  00FF4B  2A                 	db	42
   581  00FF4C  3E                 	db	62	;'>'
   582  00FF4D  00                 	db	0
   583  00FF4E                     STR_16:
   584  00FF4E  5B                 	db	91	;'['
   585  00FF4F  31                 	db	49	;'1'
   586  00FF50  2C                 	db	44
   587  00FF51  32                 	db	50	;'2'
   588  00FF52  2C                 	db	44
   589  00FF53  33                 	db	51	;'3'
   590  00FF54  2C                 	db	44
   591  00FF55  34                 	db	52	;'4'
   592  00FF56  5D                 	db	93	;']'
   593  00FF57  20                 	db	32
   594  00FF58  20                 	db	32
   595  00FF59  20                 	db	32
   596  00FF5A  20                 	db	32
   597  00FF5B  20                 	db	32
   598  00FF5C  2A                 	db	42
   599  00FF5D  3E                 	db	62	;'>'
   600  00FF5E  00                 	db	0
   601  00FF5F                     STR_14:
   602  00FF5F  68                 	db	104	;'h'
   603  00FF60  69                 	db	105	;'i'
   604  00FF61  73                 	db	115	;'s'
   605  00FF62  74                 	db	116	;'t'
   606  00FF63  6F                 	db	111	;'o'
   607  00FF64  72                 	db	114	;'r'
   608  00FF65  79                 	db	121	;'y'
   609  00FF66  20                 	db	32
   610  00FF67  3C                 	db	60	;'<'
   611  00FF68  43                 	db	67	;'C'
   612  00FF69  20                 	db	32
   613  00FF6A  20                 	db	32
   614  00FF6B  20                 	db	32
   615  00FF6C  20                 	db	32
   616  00FF6D  2A                 	db	42
   617  00FF6E  3E                 	db	62	;'>'
   618  00FF6F  00                 	db	0
   619  00FF70                     STR_18:
   620  00FF70  20                 	db	32
   621  00FF71  20                 	db	32
   622  00FF72  20                 	db	32
   623  00FF73  73                 	db	115	;'s'
   624  00FF74  74                 	db	116	;'t'
   625  00FF75  61                 	db	97	;'a'
   626  00FF76  74                 	db	116	;'t'
   627  00FF77  73                 	db	115	;'s'
   628  00FF78  20                 	db	32
   629  00FF79  3C                 	db	60	;'<'
   630  00FF7A  42                 	db	66	;'B'
   631  00FF7B  20                 	db	32
   632  00FF7C  20                 	db	32
   633  00FF7D  20                 	db	32
   634  00FF7E  2A                 	db	42
   635  00FF7F  3E                 	db	62	;'>'
   636  00FF80  00                 	db	0
   637  00FF81                     STR_22:
   638  00FF81  5B                 	db	91	;'['
   639  00FF82  6E                 	db	110	;'n'
   640  00FF83  6E                 	db	110	;'n'
   641  00FF84  2C                 	db	44
   642  00FF85  6E                 	db	110	;'n'
   643  00FF86  2C                 	db	44
   644  00FF87  6E                 	db	110	;'n'
   645  00FF88  2C                 	db	44
   646  00FF89  6E                 	db	110	;'n'
   647  00FF8A  6E                 	db	110	;'n'
   648  00FF8B  5D                 	db	93	;']'
   649  00FF8C  20                 	db	32
   650  00FF8D  20                 	db	32
   651  00FF8E  20                 	db	32
   652  00FF8F  2A                 	db	42
   653  00FF90  3E                 	db	62	;'>'
   654  00FF91  00                 	db	0
   655  00FF92                     STR_12:
   656  00FF92  20                 	db	32
   657  00FF93  20                 	db	32
   658  00FF94  6D                 	db	109	;'m'
   659  00FF95  6D                 	db	109	;'m'
   660  00FF96  3A                 	db	58	;':'
   661  00FF97  64                 	db	100	;'d'
   662  00FF98  64                 	db	100	;'d'
   663  00FF99  3A                 	db	58	;':'
   664  00FF9A  79                 	db	121	;'y'
   665  00FF9B  79                 	db	121	;'y'
   666  00FF9C  20                 	db	32
   667  00FF9D  20                 	db	32
   668  00FF9E  20                 	db	32
   669  00FF9F  20                 	db	32
   670  00FFA0  41                 	db	65	;'A'
   671  00FFA1  3E                 	db	62	;'>'
   672  00FFA2  00                 	db	0
   673  00FFA3                     STR_7:
   674  00FFA3  5B                 	db	91	;'['
   675  00FFA4  41                 	db	65	;'A'
   676  00FFA5  41                 	db	65	;'A'
   677  00FFA6  2C                 	db	44
   678  00FFA7  43                 	db	67	;'C'
   679  00FFA8  2C                 	db	44
   680  00FFA9  39                 	db	57	;'9'
   681  00FFAA  56                 	db	86	;'V'
   682  00FFAB  2C                 	db	44
   683  00FFAC  4F                 	db	79	;'O'
   684  00FFAD  54                 	db	84	;'T'
   685  00FFAE  48                 	db	72	;'H'
   686  00FFAF  45                 	db	69	;'E'
   687  00FFB0  52                 	db	82	;'R'
   688  00FFB1  5D                 	db	93	;']'
   689  00FFB2  0A                 	db	10
   690  00FFB3  00                 	db	0
   691  00FFB4                     STR_6:
   692  00FFB4  74                 	db	116	;'t'
   693  00FFB5  69                 	db	105	;'i'
   694  00FFB6  6D                 	db	109	;'m'
   695  00FFB7  65                 	db	101	;'e'
   696  00FFB8  20                 	db	32
   697  00FFB9  25                 	db	37
   698  00FFBA  30                 	db	48	;'0'
   699  00FFBB  32                 	db	50	;'2'
   700  00FFBC  6C                 	db	108	;'l'
   701  00FFBD  64                 	db	100	;'d'
   702  00FFBE  3A                 	db	58	;':'
   703  00FFBF  25                 	db	37
   704  00FFC0  30                 	db	48	;'0'
   705  00FFC1  32                 	db	50	;'2'
   706  00FFC2  6C                 	db	108	;'l'
   707  00FFC3  64                 	db	100	;'d'
   708  00FFC4  00                 	db	0
   709  00FFC5                     STR_9:
   710  00FFC5  4E                 	db	78	;'N'
   711  00FFC6  3A                 	db	58	;':'
   712  00FFC7  20                 	db	32
   713  00FFC8  25                 	db	37
   714  00FFC9  64                 	db	100	;'d'
   715  00FFCA  2C                 	db	44
   716  00FFCB  0A                 	db	10
   717  00FFCC  56                 	db	86	;'V'
   718  00FFCD  3A                 	db	58	;':'
   719  00FFCE  20                 	db	32
   720  00FFCF  25                 	db	37
   721  00FFD0  2E                 	db	46
   722  00FFD1  33                 	db	51	;'3'
   723  00FFD2  66                 	db	102	;'f'
   724  00FFD3  00                 	db	0
   725  00FFD4                     STR_8:
   726  00FFD4  5B                 	db	91	;'['
   727  00FFD5  25                 	db	37
   728  00FFD6  64                 	db	100	;'d'
   729  00FFD7  2C                 	db	44
   730  00FFD8  25                 	db	37
   731  00FFD9  64                 	db	100	;'d'
   732  00FFDA  2C                 	db	44
   733  00FFDB  25                 	db	37
   734  00FFDC  64                 	db	100	;'d'
   735  00FFDD  2C                 	db	44
   736  00FFDE  25                 	db	37
   737  00FFDF  64                 	db	100	;'d'
   738  00FFE0  5D                 	db	93	;']'
   739  00FFE1  00                 	db	0
   740  00FFE2  74                 	db	116	;'t'
   741  00FFE3  31                 	db	49	;'1'
   742  00FFE4  3A                 	db	58	;':'
   743  00FFE5  20                 	db	32
   744  00FFE6  25                 	db	37
   745  00FFE7  78                 	db	120	;'x'
   746  00FFE8  20                 	db	32
   747  00FFE9  00                 	db	0
   748  00FFEA                     STR_5:
   749  00FFEA  72                 	db	114	;'r'
   750  00FFEB  75                 	db	117	;'u'
   751  00FFEC  6E                 	db	110	;'n'
   752  00FFED  6E                 	db	110	;'n'
   753  00FFEE  69                 	db	105	;'i'
   754  00FFEF  6E                 	db	110	;'n'
   755  00FFF0  67                 	db	103	;'g'
   756  00FFF1  00                 	db	0
   757  00FFF2                     STR_2:
   758  00FFF2  6E                 	db	110	;'n'
   759  00FFF3  3A                 	db	58	;':'
   760  00FFF4  20                 	db	32
   761  00FFF5  25                 	db	37
   762  00FFF6  64                 	db	100	;'d'
   763  00FFF7  00                 	db	0
   764  00FFF8                     STR_3:
   765  00FFF8  25                 	db	37
   766  00FFF9  64                 	db	100	;'d'
   767  00FFFA  2C                 	db	44
   768  00FFFB  00                 	db	0
   769  00FFFC                     STR_1:
   770  00FFFC  73                 	db	115	;'s'
   771  00FFFD  00                 	db	0
   772  0000                     
   773                           ; #config settings
   774  00FFFE  00                 	db	0	; dummy byte at the end
   775  0000                     
   776                           	psect	cinit
   777  003304                     __pcinit:
   778                           	opt stack 0
   779  003304                     start_initialization:
   780                           	opt stack 0
   781  003304                     __initialization:
   782                           	opt stack 0
   783                           
   784                           ; Initialize objects allocated to BANK1 (30 bytes)
   785                           ; load TBLPTR registers with __pidataBANK1
   786  003304  0EB0               	movlw	low __pidataBANK1
   787  003306  6EF6               	movwf	tblptrl,c
   788  003308  0E3C               	movlw	high __pidataBANK1
   789  00330A  6EF7               	movwf	tblptrh,c
   790  00330C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   791  00330E  6EF8               	movwf	tblptru,c
   792  003310  EE01  F058         	lfsr	0,__pdataBANK1
   793  003314  EE10 F01E          	lfsr	1,30
   794  003318                     copy_data0:
   795  003318  0009               	tblrd		*+
   796  00331A  CFF5 FFEE          	movff	tablat,postinc0
   797  00331E  50E5               	movf	postdec1,w,c
   798  003320  50E1               	movf	fsr1l,w,c
   799  003322  E1FA               	bnz	copy_data0
   800                           
   801                           ; Initialize objects allocated to BANK0 (6 bytes)
   802                           ; load TBLPTR registers with __pidataBANK0
   803  003324  0E36               	movlw	low __pidataBANK0
   804  003326  6EF6               	movwf	tblptrl,c
   805  003328  0E3D               	movlw	high __pidataBANK0
   806  00332A  6EF7               	movwf	tblptrh,c
   807  00332C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   808  00332E  6EF8               	movwf	tblptru,c
   809  003330  EE00  F0EE         	lfsr	0,__pdataBANK0
   810  003334  EE10 F006          	lfsr	1,6
   811  003338                     copy_data1:
   812  003338  0009               	tblrd		*+
   813  00333A  CFF5 FFEE          	movff	tablat,postinc0
   814  00333E  50E5               	movf	postdec1,w,c
   815  003340  50E1               	movf	fsr1l,w,c
   816  003342  E1FA               	bnz	copy_data1
   817                           
   818                           ; Initialize objects allocated to COMRAM (23 bytes)
   819                           ; load TBLPTR registers with __pidataCOMRAM
   820  003344  0E06               	movlw	low __pidataCOMRAM
   821  003346  6EF6               	movwf	tblptrl,c
   822  003348  0E3D               	movlw	high __pidataCOMRAM
   823  00334A  6EF7               	movwf	tblptrh,c
   824  00334C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   825  00334E  6EF8               	movwf	tblptru,c
   826  003350  EE00  F03B         	lfsr	0,__pdataCOMRAM
   827  003354  EE10 F017          	lfsr	1,23
   828  003358                     copy_data2:
   829  003358  0009               	tblrd		*+
   830  00335A  CFF5 FFEE          	movff	tablat,postinc0
   831  00335E  50E5               	movf	postdec1,w,c
   832  003360  50E1               	movf	fsr1l,w,c
   833  003362  E1FA               	bnz	copy_data2
   834                           
   835                           ; Clear objects allocated to BANK1 (32 bytes)
   836  003364  EE01  F038         	lfsr	0,__pbssBANK1
   837  003368  0E20               	movlw	32
   838  00336A                     clear_0:
   839  00336A  6AEE               	clrf	postinc0,c
   840  00336C  06E8               	decf	wreg,f,c
   841  00336E  E1FD               	bnz	clear_0
   842                           
   843                           ; Clear objects allocated to BANK0 (2 bytes)
   844  003370  0100               	movlb	0
   845  003372  6BF5               	clrf	(__pbssBANK0+1)& (0+255),b
   846  003374  6BF4               	clrf	__pbssBANK0& (0+255),b
   847                           
   848                           ; Clear objects allocated to COMRAM (11 bytes)
   849  003376  EE00  F052         	lfsr	0,__pbssCOMRAM
   850  00337A  0E0B               	movlw	11
   851  00337C                     clear_1:
   852  00337C  6AEE               	clrf	postinc0,c
   853  00337E  06E8               	decf	wreg,f,c
   854  003380  E1FD               	bnz	clear_1
   855  003382                     end_of_initialization:
   856                           	opt stack 0
   857  003382                     __end_of__initialization:
   858                           	opt stack 0
   859  003382  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   860  003384  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   861  003386  0E00               	movlw	low (__Lmediumconst shr (0+16))
   862  003388  6EF8               	movwf	tblptru,c
   863  00338A  0100               	movlb	0
   864  00338C  EF84  F00B         	goto	_main	;jump to C main() function
   865                           tblptru	equ	0xFF8
   866                           tblptrh	equ	0xFF7
   867                           tblptrl	equ	0xFF6
   868                           tablat	equ	0xFF5
   869                           postinc0	equ	0xFEE
   870                           wreg	equ	0xFE8
   871                           postdec1	equ	0xFE5
   872                           fsr1l	equ	0xFE1
   873                           
   874                           	psect	bssCOMRAM
   875  000052                     __pbssCOMRAM:
   876                           	opt stack 0
   877  000052                     _padPin3:
   878                           	opt stack 0
   879  000052                     	ds	4
   880  000056                     _count:
   881                           	opt stack 0
   882  000056                     	ds	2
   883  000058                     _curr:
   884                           	opt stack 0
   885  000058                     	ds	2
   886  00005A                     _prevTime:
   887                           	opt stack 0
   888  00005A                     	ds	2
   889  00005C                     _lastKey:
   890                           	opt stack 0
   891  00005C                     	ds	1
   892                           tblptru	equ	0xFF8
   893                           tblptrh	equ	0xFF7
   894                           tblptrl	equ	0xFF6
   895                           tablat	equ	0xFF5
   896                           postinc0	equ	0xFEE
   897                           wreg	equ	0xFE8
   898                           postdec1	equ	0xFE5
   899                           fsr1l	equ	0xFE1
   900                           
   901                           	psect	dataCOMRAM
   902  00003B                     __pdataCOMRAM:
   903                           	opt stack 0
   904  00003B                     _V_LIM_9V:
   905                           	opt stack 0
   906  00003B                     	ds	3
   907  00003E                     _V_LIM_AA:
   908                           	opt stack 0
   909  00003E                     	ds	3
   910  000041                     _V_LIM_C:
   911                           	opt stack 0
   912  000041                     	ds	3
   913  000044                     _angle:
   914                           	opt stack 0
   915  000044                     	ds	2
   916  000046                     _padAngle_OPEN:
   917                           	opt stack 0
   918  000046                     	ds	2
   919  000048                     _redirectAngle_9V:
   920                           	opt stack 0
   921  000048                     	ds	2
   922  00004A                     _AA_float:
   923                           	opt stack 0
   924  00004A                     	ds	4
   925  00004E                     _padPin1:
   926                           	opt stack 0
   927  00004E                     	ds	4
   928                           tblptru	equ	0xFF8
   929                           tblptrh	equ	0xFF7
   930                           tblptrl	equ	0xFF6
   931                           tablat	equ	0xFF5
   932                           postinc0	equ	0xFEE
   933                           wreg	equ	0xFE8
   934                           postdec1	equ	0xFE5
   935                           fsr1l	equ	0xFE1
   936                           
   937                           	psect	bssBANK0
   938  0000F4                     __pbssBANK0:
   939                           	opt stack 0
   940  0000F4                     _n:
   941                           	opt stack 0
   942  0000F4                     	ds	2
   943                           tblptru	equ	0xFF8
   944                           tblptrh	equ	0xFF7
   945                           tblptrl	equ	0xFF6
   946                           tablat	equ	0xFF5
   947                           postinc0	equ	0xFEE
   948                           wreg	equ	0xFE8
   949                           postdec1	equ	0xFE5
   950                           fsr1l	equ	0xFE1
   951                           
   952                           	psect	dataBANK0
   953  0000EE                     __pdataBANK0:
   954                           	opt stack 0
   955  0000EE                     _padAngle_CLOSE:
   956                           	opt stack 0
   957  0000EE                     	ds	2
   958  0000F0                     _redirectAngle_C:
   959                           	opt stack 0
   960  0000F0                     	ds	2
   961  0000F2                     _redirectAngle_OTHER:
   962                           	opt stack 0
   963  0000F2                     	ds	2
   964                           tblptru	equ	0xFF8
   965                           tblptrh	equ	0xFF7
   966                           tblptrl	equ	0xFF6
   967                           tablat	equ	0xFF5
   968                           postinc0	equ	0xFEE
   969                           wreg	equ	0xFE8
   970                           postdec1	equ	0xFE5
   971                           fsr1l	equ	0xFE1
   972                           
   973                           	psect	bssBANK1
   974  000138                     __pbssBANK1:
   975                           	opt stack 0
   976  000138                     _pulse:
   977                           	opt stack 0
   978  000138                     	ds	8
   979  000140                     _servos:
   980                           	opt stack 0
   981  000140                     	ds	8
   982  000148                     _time:
   983                           	opt stack 0
   984  000148                     	ds	4
   985  00014C                     _batteryDetected:
   986                           	opt stack 0
   987  00014C                     	ds	2
   988  00014E                     _n_9V:
   989                           	opt stack 0
   990  00014E                     	ds	2
   991  000150                     _n_AA:
   992                           	opt stack 0
   993  000150                     	ds	2
   994  000152                     _n_C:
   995                           	opt stack 0
   996  000152                     	ds	2
   997  000154                     _n_OTHER:
   998                           	opt stack 0
   999  000154                     	ds	2
  1000  000156                     _terminate:
  1001                           	opt stack 0
  1002  000156                     	ds	2
  1003                           tblptru	equ	0xFF8
  1004                           tblptrh	equ	0xFF7
  1005                           tblptrl	equ	0xFF6
  1006                           tablat	equ	0xFF5
  1007                           postinc0	equ	0xFEE
  1008                           wreg	equ	0xFE8
  1009                           postdec1	equ	0xFE5
  1010                           fsr1l	equ	0xFE1
  1011                           
  1012                           	psect	dataBANK1
  1013  000158                     __pdataBANK1:
  1014                           	opt stack 0
  1015  000158                     _padAngle_NEUTRAL:
  1016                           	opt stack 0
  1017  000158                     	ds	2
  1018  00015A                     _redirectAngle_AA:
  1019                           	opt stack 0
  1020  00015A                     	ds	2
  1021  00015C                     _stoppingTime:
  1022                           	opt stack 0
  1023  00015C                     	ds	2
  1024  00015E                     _conveyorServo:
  1025                           	opt stack 0
  1026  00015E                     	ds	4
  1027  000162                     _cylinderDir:
  1028                           	opt stack 0
  1029  000162                     	ds	4
  1030  000166                     _cylinderMotor:
  1031                           	opt stack 0
  1032  000166                     	ds	4
  1033  00016A                     _padPin2:
  1034                           	opt stack 0
  1035  00016A                     	ds	4
  1036  00016E                     _padServo:
  1037                           	opt stack 0
  1038  00016E                     	ds	4
  1039  000172                     _redirectingServo:
  1040                           	opt stack 0
  1041  000172                     	ds	4
  1042                           tblptru	equ	0xFF8
  1043                           tblptrh	equ	0xFF7
  1044                           tblptrl	equ	0xFF6
  1045                           tablat	equ	0xFF5
  1046                           postinc0	equ	0xFEE
  1047                           wreg	equ	0xFE8
  1048                           postdec1	equ	0xFE5
  1049                           fsr1l	equ	0xFE1
  1050                           
  1051                           	psect	cstackBANK1
  1052  000100                     __pcstackBANK1:
  1053                           	opt stack 0
  1054  000100                     _sortBattery$1425:
  1055                           	opt stack 0
  1056  000100                     debug@run:
  1057                           	opt stack 0
  1058                           
  1059                           ; 14 bytes @ 0x0
  1060  000100                     	ds	2
  1061  000102                     sortBattery@V_float:
  1062                           	opt stack 0
  1063                           
  1064                           ; 3 bytes @ 0x2
  1065  000102                     	ds	3
  1066  000105                     sortBattery@pos_v_counter:
  1067                           	opt stack 0
  1068                           
  1069                           ; 2 bytes @ 0x5
  1070  000105                     	ds	2
  1071  000107                     sortBattery@signal:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x7
  1075  000107                     	ds	2
  1076  000109                     sortBattery@Vcc:
  1077                           	opt stack 0
  1078                           
  1079                           ; 3 bytes @ 0x9
  1080  000109                     	ds	3
  1081  00010C                     sortBattery@resolution:
  1082                           	opt stack 0
  1083                           
  1084                           ; 3 bytes @ 0xC
  1085  00010C                     	ds	2
  1086  00010E                     debug@n:
  1087                           	opt stack 0
  1088                           
  1089                           ; 2 bytes @ 0xE
  1090  00010E                     	ds	1
  1091  00010F                     sortBattery@V_max:
  1092                           	opt stack 0
  1093                           
  1094                           ; 3 bytes @ 0xF
  1095  00010F                     	ds	1
  1096  000110                     debug@run_286:
  1097                           	opt stack 0
  1098                           
  1099                           ; 2 bytes @ 0x10
  1100  000110                     	ds	2
  1101  000112                     sortBattery@i_314:
  1102                           	opt stack 0
  1103  000112                     _debug$1424:
  1104                           	opt stack 0
  1105                           
  1106                           ; 2 bytes @ 0x12
  1107  000112                     	ds	2
  1108  000114                     debug@key:
  1109                           	opt stack 0
  1110  000114                     sortBattery@targetAngle:
  1111                           	opt stack 0
  1112                           
  1113                           ; 2 bytes @ 0x14
  1114  000114                     	ds	1
  1115  000115                     debug@i_287:
  1116                           	opt stack 0
  1117                           
  1118                           ; 2 bytes @ 0x15
  1119  000115                     	ds	1
  1120  000116                     sortBattery@V:
  1121                           	opt stack 0
  1122                           
  1123                           ; 3 bytes @ 0x16
  1124  000116                     	ds	1
  1125  000117                     debug@i:
  1126                           	opt stack 0
  1127                           
  1128                           ; 2 bytes @ 0x17
  1129  000117                     	ds	2
  1130  000119                     sortBattery@i:
  1131                           	opt stack 0
  1132                           
  1133                           ; 3 bytes @ 0x19
  1134  000119                     	ds	3
  1135  00011C                     sortBattery@V_312:
  1136                           	opt stack 0
  1137                           
  1138                           ; 3 bytes @ 0x1C
  1139  00011C                     	ds	3
  1140  00011F                     ??_main:
  1141                           
  1142                           ; 1 bytes @ 0x1F
  1143  00011F                     	ds	13
  1144  00012C                     main@cylinderForward:
  1145                           	opt stack 0
  1146                           
  1147                           ; 2 bytes @ 0x2C
  1148  00012C                     	ds	2
  1149  00012E                     main@cylinderBackward:
  1150                           	opt stack 0
  1151                           
  1152                           ; 2 bytes @ 0x2E
  1153  00012E                     	ds	2
  1154  000130                     main@lastBatteryTime:
  1155                           	opt stack 0
  1156                           
  1157                           ; 2 bytes @ 0x30
  1158  000130                     	ds	2
  1159  000132                     main@cylinderStart:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x32
  1163  000132                     	ds	2
  1164  000134                     main@cylinderDur:
  1165                           	opt stack 0
  1166                           
  1167                           ; 2 bytes @ 0x34
  1168  000134                     	ds	2
  1169  000136                     main@prev:
  1170                           	opt stack 0
  1171                           
  1172                           ; 2 bytes @ 0x36
  1173  000136                     	ds	2
  1174                           tblptru	equ	0xFF8
  1175                           tblptrh	equ	0xFF7
  1176                           tblptrl	equ	0xFF6
  1177                           tablat	equ	0xFF5
  1178                           postinc0	equ	0xFEE
  1179                           wreg	equ	0xFE8
  1180                           postdec1	equ	0xFE5
  1181                           fsr1l	equ	0xFE1
  1182                           
  1183                           	psect	cstackBANK0
  1184  000080                     __pcstackBANK0:
  1185                           	opt stack 0
  1186  000080                     ??___ftdiv:
  1187  000080                     ?_readPastRun:
  1188                           	opt stack 0
  1189  000080                     ?___lwmod:
  1190                           	opt stack 0
  1191  000080                     readPastRun@run:
  1192                           	opt stack 0
  1193  000080                     eepromWrite@data:
  1194                           	opt stack 0
  1195  000080                     ___lwmod@dividend:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x0
  1199  000080                     	ds	2
  1200  000082                     ___lwmod@divisor:
  1201                           	opt stack 0
  1202  000082                     eepromWrite@address:
  1203                           	opt stack 0
  1204  000082                     readPastRun@data:
  1205                           	opt stack 0
  1206                           
  1207                           ; 14 bytes @ 0x2
  1208  000082                     	ds	1
  1209  000083                     ___ftdiv@cntr:
  1210                           	opt stack 0
  1211                           
  1212                           ; 1 bytes @ 0x3
  1213  000083                     	ds	1
  1214  000084                     ___lwmod@counter:
  1215                           	opt stack 0
  1216  000084                     ___ftdiv@f3:
  1217                           	opt stack 0
  1218                           
  1219                           ; 3 bytes @ 0x4
  1220  000084                     	ds	2
  1221  000086                     ??_eepromWrite:
  1222                           
  1223                           ; 1 bytes @ 0x6
  1224  000086                     	ds	1
  1225  000087                     ___ftdiv@exp:
  1226                           	opt stack 0
  1227  000087                     eepromWrite@ien:
  1228                           	opt stack 0
  1229                           
  1230                           ; 2 bytes @ 0x7
  1231  000087                     	ds	1
  1232  000088                     ___ftdiv@sign:
  1233                           	opt stack 0
  1234                           
  1235                           ; 1 bytes @ 0x8
  1236  000088                     	ds	1
  1237  000089                     ?___ftmul:
  1238                           	opt stack 0
  1239  000089                     saveNewRun@data:
  1240                           	opt stack 0
  1241  000089                     ___ftmul@f1:
  1242                           	opt stack 0
  1243                           
  1244                           ; 3 bytes @ 0x9
  1245  000089                     	ds	2
  1246  00008B                     saveNewRun@n:
  1247                           	opt stack 0
  1248                           
  1249                           ; 2 bytes @ 0xB
  1250  00008B                     	ds	1
  1251  00008C                     ___ftmul@f2:
  1252                           	opt stack 0
  1253                           
  1254                           ; 3 bytes @ 0xC
  1255  00008C                     	ds	1
  1256  00008D                     saveNewRun@i:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0xD
  1260  00008D                     	ds	2
  1261  00008F                     ??___ftmul:
  1262                           
  1263                           ; 1 bytes @ 0xF
  1264  00008F                     	ds	1
  1265  000090                     readPastRun@i:
  1266                           	opt stack 0
  1267                           
  1268                           ; 2 bytes @ 0x10
  1269  000090                     	ds	2
  1270  000092                     ___ftmul@exp:
  1271                           	opt stack 0
  1272                           
  1273                           ; 1 bytes @ 0x12
  1274  000092                     	ds	1
  1275  000093                     ___ftmul@f3_as_product:
  1276                           	opt stack 0
  1277                           
  1278                           ; 3 bytes @ 0x13
  1279  000093                     	ds	3
  1280  000096                     ___ftmul@cntr:
  1281                           	opt stack 0
  1282                           
  1283                           ; 1 bytes @ 0x16
  1284  000096                     	ds	1
  1285  000097                     ___ftmul@sign:
  1286                           	opt stack 0
  1287                           
  1288                           ; 1 bytes @ 0x17
  1289  000097                     	ds	1
  1290  000098                     ?_fround:
  1291                           	opt stack 0
  1292  000098                     ?_scale:
  1293                           	opt stack 0
  1294                           
  1295                           ; 3 bytes @ 0x18
  1296  000098                     	ds	3
  1297  00009B                     _fround$1428:
  1298                           	opt stack 0
  1299  00009B                     _scale$1429:
  1300                           	opt stack 0
  1301                           
  1302                           ; 3 bytes @ 0x1B
  1303  00009B                     	ds	3
  1304  00009E                     scale@scl:
  1305                           	opt stack 0
  1306  00009E                     _fround$1427:
  1307                           	opt stack 0
  1308                           
  1309                           ; 3 bytes @ 0x1E
  1310  00009E                     	ds	3
  1311  0000A1                     fround@prec:
  1312                           	opt stack 0
  1313                           
  1314                           ; 1 bytes @ 0x21
  1315  0000A1                     	ds	1
  1316  0000A2                     ?___ftadd:
  1317                           	opt stack 0
  1318  0000A2                     ___ftadd@f1:
  1319                           	opt stack 0
  1320                           
  1321                           ; 3 bytes @ 0x22
  1322  0000A2                     	ds	3
  1323  0000A5                     ___ftadd@f2:
  1324                           	opt stack 0
  1325                           
  1326                           ; 3 bytes @ 0x25
  1327  0000A5                     	ds	3
  1328  0000A8                     ??___ftadd:
  1329                           
  1330                           ; 1 bytes @ 0x28
  1331  0000A8                     	ds	3
  1332  0000AB                     ___ftadd@sign:
  1333                           	opt stack 0
  1334                           
  1335                           ; 1 bytes @ 0x2B
  1336  0000AB                     	ds	1
  1337  0000AC                     ___ftadd@exp2:
  1338                           	opt stack 0
  1339                           
  1340                           ; 1 bytes @ 0x2C
  1341  0000AC                     	ds	1
  1342  0000AD                     ___ftadd@exp1:
  1343                           	opt stack 0
  1344                           
  1345                           ; 1 bytes @ 0x2D
  1346  0000AD                     	ds	1
  1347  0000AE                     ?___ftsub:
  1348                           	opt stack 0
  1349  0000AE                     ?___fttol:
  1350                           	opt stack 0
  1351  0000AE                     ___ftsub@f1:
  1352                           	opt stack 0
  1353  0000AE                     ___fttol@f1:
  1354                           	opt stack 0
  1355                           
  1356                           ; 3 bytes @ 0x2E
  1357  0000AE                     	ds	3
  1358  0000B1                     ___ftsub@f2:
  1359                           	opt stack 0
  1360                           
  1361                           ; 3 bytes @ 0x31
  1362  0000B1                     	ds	1
  1363  0000B2                     ??___fttol:
  1364                           
  1365                           ; 1 bytes @ 0x32
  1366  0000B2                     	ds	5
  1367  0000B7                     ___fttol@sign1:
  1368                           	opt stack 0
  1369                           
  1370                           ; 1 bytes @ 0x37
  1371  0000B7                     	ds	1
  1372  0000B8                     ___fttol@lval:
  1373                           	opt stack 0
  1374                           
  1375                           ; 4 bytes @ 0x38
  1376  0000B8                     	ds	4
  1377  0000BC                     ___fttol@exp1:
  1378                           	opt stack 0
  1379                           
  1380                           ; 1 bytes @ 0x3C
  1381  0000BC                     	ds	1
  1382  0000BD                     ?_printf:
  1383                           	opt stack 0
  1384  0000BD                     ?_angleToPulse:
  1385                           	opt stack 0
  1386  0000BD                     angleToPulse@angle:
  1387                           	opt stack 0
  1388  0000BD                     printf@f:
  1389                           	opt stack 0
  1390                           
  1391                           ; 2 bytes @ 0x3D
  1392  0000BD                     	ds	4
  1393  0000C1                     ??_angleToPulse:
  1394                           
  1395                           ; 1 bytes @ 0x41
  1396  0000C1                     	ds	4
  1397  0000C5                     angleToPulse@offset:
  1398                           	opt stack 0
  1399                           
  1400                           ; 4 bytes @ 0x45
  1401  0000C5                     	ds	2
  1402  0000C7                     ??_printf:
  1403                           
  1404                           ; 1 bytes @ 0x47
  1405  0000C7                     	ds	2
  1406  0000C9                     angleToPulse@a180:
  1407                           	opt stack 0
  1408                           
  1409                           ; 4 bytes @ 0x49
  1410  0000C9                     	ds	4
  1411  0000CD                     _angleToPulse$1426:
  1412                           	opt stack 0
  1413  0000CD                     _printf$1430:
  1414                           	opt stack 0
  1415                           
  1416                           ; 3 bytes @ 0x4D
  1417  0000CD                     	ds	3
  1418  0000D0                     printf@idx:
  1419                           	opt stack 0
  1420  0000D0                     angleToPulse@a000:
  1421                           	opt stack 0
  1422                           
  1423                           ; 4 bytes @ 0x50
  1424  0000D0                     	ds	1
  1425  0000D1                     printf@cp:
  1426                           	opt stack 0
  1427                           
  1428                           ; 2 bytes @ 0x51
  1429  0000D1                     	ds	2
  1430  0000D3                     printf@len:
  1431                           	opt stack 0
  1432                           
  1433                           ; 2 bytes @ 0x53
  1434  0000D3                     	ds	1
  1435  0000D4                     setAngle@motor:
  1436                           	opt stack 0
  1437                           
  1438                           ; 2 bytes @ 0x54
  1439  0000D4                     	ds	1
  1440  0000D5                     printf@ap:
  1441                           	opt stack 0
  1442                           
  1443                           ; 2 bytes @ 0x55
  1444  0000D5                     	ds	1
  1445  0000D6                     setAngle@angle:
  1446                           	opt stack 0
  1447                           
  1448                           ; 2 bytes @ 0x56
  1449  0000D6                     	ds	1
  1450  0000D7                     printf@tmpval:
  1451                           	opt stack 0
  1452                           
  1453                           ; 4 bytes @ 0x57
  1454  0000D7                     	ds	1
  1455  0000D8                     ??_setAngle:
  1456                           
  1457                           ; 1 bytes @ 0x58
  1458  0000D8                     	ds	2
  1459  0000DA                     setAngle@period:
  1460                           	opt stack 0
  1461                           
  1462                           ; 2 bytes @ 0x5A
  1463  0000DA                     	ds	1
  1464  0000DB                     printf@exp:
  1465                           	opt stack 0
  1466                           
  1467                           ; 2 bytes @ 0x5B
  1468  0000DB                     	ds	1
  1469  0000DC                     setAngle@i:
  1470                           	opt stack 0
  1471                           
  1472                           ; 2 bytes @ 0x5C
  1473  0000DC                     	ds	1
  1474  0000DD                     printf@fval:
  1475                           	opt stack 0
  1476                           
  1477                           ; 3 bytes @ 0x5D
  1478  0000DD                     	ds	1
  1479  0000DE                     initServo@motor:
  1480                           	opt stack 0
  1481                           
  1482                           ; 2 bytes @ 0x5E
  1483  0000DE                     	ds	2
  1484  0000E0                     initServo@angle:
  1485                           	opt stack 0
  1486  0000E0                     printf@val:
  1487                           	opt stack 0
  1488                           
  1489                           ; 4 bytes @ 0x60
  1490  0000E0                     	ds	2
  1491  0000E2                     ??_initServo:
  1492                           
  1493                           ; 1 bytes @ 0x62
  1494  0000E2                     	ds	2
  1495  0000E4                     printf@width:
  1496                           	opt stack 0
  1497                           
  1498                           ; 2 bytes @ 0x64
  1499  0000E4                     	ds	2
  1500  0000E6                     initServo@i:
  1501                           	opt stack 0
  1502  0000E6                     printf@flag:
  1503                           	opt stack 0
  1504                           
  1505                           ; 2 bytes @ 0x66
  1506  0000E6                     	ds	2
  1507  0000E8                     printf@prec:
  1508                           	opt stack 0
  1509                           
  1510                           ; 2 bytes @ 0x68
  1511  0000E8                     	ds	2
  1512  0000EA                     printf@c:
  1513                           	opt stack 0
  1514                           
  1515                           ; 1 bytes @ 0x6A
  1516  0000EA                     	ds	1
  1517  0000EB                     ??_sortBattery:
  1518  0000EB                     ??_debug:
  1519  0000EB                     showMainMenu@k:
  1520                           	opt stack 0
  1521  0000EB                     showRunSelect@k:
  1522                           	opt stack 0
  1523  0000EB                     showRunMenu@key:
  1524                           	opt stack 0
  1525                           
  1526                           ; 1 bytes @ 0x6B
  1527  0000EB                     	ds	1
  1528  0000EC                     showRunMenu@k:
  1529                           	opt stack 0
  1530                           
  1531                           ; 1 bytes @ 0x6C
  1532  0000EC                     	ds	1
  1533  0000ED                     showInterface@key:
  1534                           	opt stack 0
  1535                           
  1536                           ; 1 bytes @ 0x6D
  1537  0000ED                     	ds	1
  1538                           tblptru	equ	0xFF8
  1539                           tblptrh	equ	0xFF7
  1540                           tblptrl	equ	0xFF6
  1541                           tablat	equ	0xFF5
  1542                           postinc0	equ	0xFEE
  1543                           wreg	equ	0xFE8
  1544                           postdec1	equ	0xFE5
  1545                           fsr1l	equ	0xFE1
  1546                           
  1547                           	psect	cstackCOMRAM
  1548  000001                     __pcstackCOMRAM:
  1549                           	opt stack 0
  1550  000001                     ?i2___awmod:
  1551                           	opt stack 0
  1552  000001                     i2___awmod@dividend:
  1553                           	opt stack 0
  1554                           
  1555                           ; 2 bytes @ 0x0
  1556  000001                     	ds	2
  1557  000003                     i2___awmod@divisor:
  1558                           	opt stack 0
  1559                           
  1560                           ; 2 bytes @ 0x2
  1561  000003                     	ds	2
  1562  000005                     i2___awmod@counter:
  1563                           	opt stack 0
  1564                           
  1565                           ; 1 bytes @ 0x4
  1566  000005                     	ds	1
  1567  000006                     i2___awmod@sign:
  1568                           	opt stack 0
  1569                           
  1570                           ; 1 bytes @ 0x5
  1571  000006                     	ds	1
  1572  000007                     i2digitalWrite@pin:
  1573                           	opt stack 0
  1574  000007                     i2startTimer@timer:
  1575                           	opt stack 0
  1576                           
  1577                           ; 2 bytes @ 0x6
  1578  000007                     	ds	2
  1579  000009                     i2digitalWrite@val:
  1580                           	opt stack 0
  1581  000009                     i2startTimer@val:
  1582                           	opt stack 0
  1583                           
  1584                           ; 4 bytes @ 0x8
  1585  000009                     	ds	2
  1586  00000B                     ??i2_digitalWrite:
  1587                           
  1588                           ; 1 bytes @ 0xA
  1589  00000B                     	ds	2
  1590  00000D                     ??i2_startTimer:
  1591                           
  1592                           ; 1 bytes @ 0xC
  1593  00000D                     	ds	1
  1594  00000E                     i2digitalWrite@p:
  1595                           	opt stack 0
  1596                           
  1597                           ; 2 bytes @ 0xD
  1598  00000E                     	ds	2
  1599  000010                     ??_servoInterruptService:
  1600                           
  1601                           ; 1 bytes @ 0xF
  1602  000010                     	ds	4
  1603  000014                     ??_service:
  1604                           
  1605                           ; 1 bytes @ 0x13
  1606  000014                     	ds	14
  1607  000022                     service@key:
  1608                           	opt stack 0
  1609                           
  1610                           ; 1 bytes @ 0x21
  1611  000022                     	ds	1
  1612  000023                     ??_isdigit:
  1613  000023                     ?_digitalRead:
  1614                           	opt stack 0
  1615  000023                     ?___awmod:
  1616                           	opt stack 0
  1617  000023                     ?___ftpack:
  1618                           	opt stack 0
  1619  000023                     ?___ftneg:
  1620                           	opt stack 0
  1621  000023                     ?_analogRead:
  1622                           	opt stack 0
  1623  000023                     ?__tdiv_to_l_:
  1624                           	opt stack 0
  1625  000023                     ?__div_to_l_:
  1626                           	opt stack 0
  1627  000023                     ?___aldiv:
  1628                           	opt stack 0
  1629  000023                     ?___lldiv:
  1630                           	opt stack 0
  1631  000023                     lcdNibble@temp:
  1632                           	opt stack 0
  1633  000023                     readKeypad@key:
  1634                           	opt stack 0
  1635  000023                     digitalRead@pin:
  1636                           	opt stack 0
  1637  000023                     digitalWrite@pin:
  1638                           	opt stack 0
  1639  000023                     analogRead@channel:
  1640                           	opt stack 0
  1641  000023                     initTimer@timer:
  1642                           	opt stack 0
  1643  000023                     startTimer@timer:
  1644                           	opt stack 0
  1645  000023                     ___awmod@dividend:
  1646                           	opt stack 0
  1647  000023                     __div_to_l_@f1:
  1648                           	opt stack 0
  1649  000023                     ___ftpack@arg:
  1650                           	opt stack 0
  1651  000023                     __tdiv_to_l_@f1:
  1652                           	opt stack 0
  1653  000023                     ___ftneg@f1:
  1654                           	opt stack 0
  1655  000023                     ___aldiv@dividend:
  1656                           	opt stack 0
  1657  000023                     ___lldiv@dividend:
  1658                           	opt stack 0
  1659                           
  1660                           ; 4 bytes @ 0x22
  1661  000023                     	ds	1
  1662  000024                     lcdNibble@data:
  1663                           	opt stack 0
  1664  000024                     _isdigit$1058:
  1665                           	opt stack 0
  1666                           
  1667                           ; 1 bytes @ 0x23
  1668  000024                     	ds	1
  1669  000025                     ??_initTimer:
  1670  000025                     ??_digitalRead:
  1671  000025                     ??_lcdInst:
  1672  000025                     isdigit@c:
  1673                           	opt stack 0
  1674  000025                     digitalWrite@val:
  1675                           	opt stack 0
  1676  000025                     ___awmod@divisor:
  1677                           	opt stack 0
  1678  000025                     startTimer@val:
  1679                           	opt stack 0
  1680                           
  1681                           ; 4 bytes @ 0x24
  1682  000025                     	ds	1
  1683  000026                     lcdInst@data:
  1684                           	opt stack 0
  1685  000026                     ___ftpack@exp:
  1686                           	opt stack 0
  1687  000026                     __div_to_l_@f2:
  1688                           	opt stack 0
  1689  000026                     __tdiv_to_l_@f2:
  1690                           	opt stack 0
  1691                           
  1692                           ; 3 bytes @ 0x25
  1693  000026                     	ds	1
  1694  000027                     ??_initLCD:
  1695  000027                     ??_digitalWrite:
  1696  000027                     ??_analogRead:
  1697  000027                     putch@data:
  1698                           	opt stack 0
  1699  000027                     ___awmod@counter:
  1700                           	opt stack 0
  1701  000027                     ___ftpack@sign:
  1702                           	opt stack 0
  1703  000027                     ___aldiv@divisor:
  1704                           	opt stack 0
  1705  000027                     ___lldiv@divisor:
  1706                           	opt stack 0
  1707                           
  1708                           ; 4 bytes @ 0x26
  1709  000027                     	ds	1
  1710  000028                     ??___ftpack:
  1711  000028                     ___awmod@sign:
  1712                           	opt stack 0
  1713                           
  1714                           ; 1 bytes @ 0x27
  1715  000028                     	ds	1
  1716  000029                     ??_startTimer:
  1717  000029                     ??__tdiv_to_l_:
  1718  000029                     ?___awdiv:
  1719                           	opt stack 0
  1720  000029                     ___awdiv@dividend:
  1721                           	opt stack 0
  1722  000029                     __div_to_l_@quot:
  1723                           	opt stack 0
  1724                           
  1725                           ; 4 bytes @ 0x28
  1726  000029                     	ds	1
  1727  00002A                     digitalWrite@p:
  1728                           	opt stack 0
  1729                           
  1730                           ; 2 bytes @ 0x29
  1731  00002A                     	ds	1
  1732  00002B                     ?___altoft:
  1733                           	opt stack 0
  1734  00002B                     ?___awtoft:
  1735                           	opt stack 0
  1736  00002B                     ?___lltoft:
  1737                           	opt stack 0
  1738  00002B                     ___aldiv@counter:
  1739                           	opt stack 0
  1740  00002B                     ___awdiv@divisor:
  1741                           	opt stack 0
  1742  00002B                     ___awtoft@c:
  1743                           	opt stack 0
  1744  00002B                     ___altoft@c:
  1745                           	opt stack 0
  1746  00002B                     ___lldiv@quotient:
  1747                           	opt stack 0
  1748  00002B                     ___lltoft@c:
  1749                           	opt stack 0
  1750                           
  1751                           ; 4 bytes @ 0x2A
  1752  00002B                     	ds	1
  1753  00002C                     ___aldiv@sign:
  1754                           	opt stack 0
  1755  00002C                     __tdiv_to_l_@quot:
  1756                           	opt stack 0
  1757                           
  1758                           ; 4 bytes @ 0x2B
  1759  00002C                     	ds	1
  1760  00002D                     ___awdiv@counter:
  1761                           	opt stack 0
  1762  00002D                     __div_to_l_@cntr:
  1763                           	opt stack 0
  1764  00002D                     ___aldiv@quotient:
  1765                           	opt stack 0
  1766                           
  1767                           ; 4 bytes @ 0x2C
  1768  00002D                     	ds	1
  1769  00002E                     ___awdiv@sign:
  1770                           	opt stack 0
  1771  00002E                     ___awtoft@sign:
  1772                           	opt stack 0
  1773  00002E                     __div_to_l_@exp1:
  1774                           	opt stack 0
  1775                           
  1776                           ; 1 bytes @ 0x2D
  1777  00002E                     	ds	1
  1778  00002F                     ??___altoft:
  1779  00002F                     ??___lltoft:
  1780  00002F                     ___lldiv@counter:
  1781                           	opt stack 0
  1782  00002F                     ___awdiv@quotient:
  1783                           	opt stack 0
  1784  00002F                     ___ftge@ff1:
  1785                           	opt stack 0
  1786                           
  1787                           ; 3 bytes @ 0x2E
  1788  00002F                     	ds	1
  1789  000030                     ?___llmod:
  1790                           	opt stack 0
  1791  000030                     __tdiv_to_l_@cntr:
  1792                           	opt stack 0
  1793  000030                     ___llmod@dividend:
  1794                           	opt stack 0
  1795                           
  1796                           ; 4 bytes @ 0x2F
  1797  000030                     	ds	1
  1798  000031                     ?___wmul:
  1799                           	opt stack 0
  1800  000031                     ?___almod:
  1801                           	opt stack 0
  1802  000031                     __tdiv_to_l_@exp1:
  1803                           	opt stack 0
  1804  000031                     ___wmul@multiplier:
  1805                           	opt stack 0
  1806  000031                     ___almod@dividend:
  1807                           	opt stack 0
  1808                           
  1809                           ; 4 bytes @ 0x30
  1810  000031                     	ds	1
  1811  000032                     ___ftge@ff2:
  1812                           	opt stack 0
  1813                           
  1814                           ; 3 bytes @ 0x31
  1815  000032                     	ds	1
  1816  000033                     ___altoft@exp:
  1817                           	opt stack 0
  1818  000033                     ___lltoft@exp:
  1819                           	opt stack 0
  1820  000033                     ___wmul@multiplicand:
  1821                           	opt stack 0
  1822                           
  1823                           ; 2 bytes @ 0x32
  1824  000033                     	ds	1
  1825  000034                     ___altoft@sign:
  1826                           	opt stack 0
  1827  000034                     ___llmod@divisor:
  1828                           	opt stack 0
  1829                           
  1830                           ; 4 bytes @ 0x33
  1831  000034                     	ds	1
  1832  000035                     ??___ftge:
  1833  000035                     ?___ftdiv:
  1834                           	opt stack 0
  1835  000035                     ___wmul@product:
  1836                           	opt stack 0
  1837  000035                     ___ftdiv@f1:
  1838                           	opt stack 0
  1839  000035                     ___almod@divisor:
  1840                           	opt stack 0
  1841                           
  1842                           ; 4 bytes @ 0x34
  1843  000035                     	ds	2
  1844  000037                     ?_eepromRead:
  1845                           	opt stack 0
  1846  000037                     eepromRead@address:
  1847                           	opt stack 0
  1848                           
  1849                           ; 4 bytes @ 0x36
  1850  000037                     	ds	1
  1851  000038                     ___llmod@counter:
  1852                           	opt stack 0
  1853  000038                     ___ftdiv@f2:
  1854                           	opt stack 0
  1855                           
  1856                           ; 3 bytes @ 0x37
  1857  000038                     	ds	1
  1858  000039                     ___almod@counter:
  1859                           	opt stack 0
  1860                           
  1861                           ; 1 bytes @ 0x38
  1862  000039                     	ds	1
  1863  00003A                     ___almod@sign:
  1864                           	opt stack 0
  1865                           
  1866                           ; 1 bytes @ 0x39
  1867  00003A                     	ds	1
  1868  00003B                     tblptru	equ	0xFF8
  1869                           tblptrh	equ	0xFF7
  1870                           tblptrl	equ	0xFF6
  1871                           tablat	equ	0xFF5
  1872                           postinc0	equ	0xFEE
  1873                           wreg	equ	0xFE8
  1874                           postdec1	equ	0xFE5
  1875                           fsr1l	equ	0xFE1
  1876                           
  1877                           ; 1 bytes @ 0x3A
  1878 ;;
  1879 ;;Main: autosize = 0, tempsize = 13, incstack = 0, save=0
  1880 ;;
  1881 ;; *************** function _main *****************
  1882 ;; Defined at:
  1883 ;;		line 130 in file "main.c"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;		None
  1886 ;; Auto vars:     Size  Location     Type
  1887 ;;  prev            2   54[BANK1 ] int 
  1888 ;;  cylinderDur     2   52[BANK1 ] int 
  1889 ;;  cylinderStar    2   50[BANK1 ] int 
  1890 ;;  lastBatteryT    2   48[BANK1 ] int 
  1891 ;;  cylinderBack    2   46[BANK1 ] int 
  1892 ;;  cylinderForw    2   44[BANK1 ] int 
  1893 ;; Return value:  Size  Location     Type
  1894 ;;                  1    wreg      void 
  1895 ;; Registers used:
  1896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1897 ;; Tracked objects:
  1898 ;;		On entry : 0/0
  1899 ;;		On exit  : 0/0
  1900 ;;		Unchanged: 0/0
  1901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1903 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1904 ;;      Temps:          0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1905 ;;      Totals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1906 ;;Total ram usage:       25 bytes
  1907 ;; Hardware stack levels required when called:   10
  1908 ;; This function calls:
  1909 ;;		___aldiv
  1910 ;;		___almod
  1911 ;;		_debug
  1912 ;;		_digitalRead
  1913 ;;		_digitalWrite
  1914 ;;		_initLCD
  1915 ;;		_initServo
  1916 ;;		_initTimer
  1917 ;;		_lcdClear
  1918 ;;		_lcdHome
  1919 ;;		_pinSetup
  1920 ;;		_printf
  1921 ;;		_readKeypad
  1922 ;;		_showInterface
  1923 ;;		_sortBattery
  1924 ;;		_startTimer
  1925 ;; This function is called by:
  1926 ;;		Startup code after reset
  1927 ;; This function uses a non-reentrant model
  1928 ;;
  1929                           
  1930                           	psect	text0
  1931  001708                     __ptext0:
  1932                           	opt stack 0
  1933  001708                     _main:
  1934                           	opt stack 21
  1935                           
  1936                           ;main.c: 132: debug();
  1937                           
  1938                           ;incstack = 0
  1939  001708  ECD2  F00F         	call	_debug	;wreg free
  1940                           
  1941                           ;main.c: 134: pinSetup();
  1942  00170C  EC5E  F01D         	call	_pinSetup	;wreg free
  1943                           
  1944                           ;main.c: 135: initLCD();
  1945  001710  EC3B  F01D         	call	_initLCD	;wreg free
  1946  001714                     l154:
  1947                           
  1948                           ;main.c: 138: showInterface();
  1949  001714  ECF7  F01A         	call	_showInterface	;wreg free
  1950                           
  1951                           ;main.c: 142: terminate = 0;
  1952  001718  0E00               	movlw	0
  1953  00171A  0101               	movlb	1	; () banked
  1954  00171C  6F57               	movwf	(_terminate+1)& (0+255),b
  1955  00171E  0E00               	movlw	0
  1956  001720  6F56               	movwf	_terminate& (0+255),b
  1957                           
  1958                           ; BSR set to: 1
  1959                           ;main.c: 143: time = 0;
  1960  001722  0E00               	movlw	0
  1961  001724  0101               	movlb	1	; () banked
  1962  001726  6F48               	movwf	_time& (0+255),b
  1963  001728  0E00               	movlw	0
  1964  00172A  6F49               	movwf	(_time+1)& (0+255),b
  1965  00172C  0E00               	movlw	0
  1966  00172E  6F4A               	movwf	(_time+2)& (0+255),b
  1967  001730  0E00               	movlw	0
  1968  001732  6F4B               	movwf	(_time+3)& (0+255),b
  1969                           
  1970                           ; BSR set to: 1
  1971                           ;main.c: 144: initTimer(1);
  1972  001734  0E00               	movlw	0
  1973  001736  6E24               	movwf	initTimer@timer+1,c
  1974  001738  0E01               	movlw	1
  1975  00173A  6E23               	movwf	initTimer@timer,c
  1976  00173C  EC16  F01D         	call	_initTimer	;wreg free
  1977                           
  1978                           ;main.c: 145: startTimer(1,0);
  1979  001740  0E00               	movlw	0
  1980  001742  6E24               	movwf	startTimer@timer+1,c
  1981  001744  0E01               	movlw	1
  1982  001746  6E23               	movwf	startTimer@timer,c
  1983  001748  0E00               	movlw	0
  1984  00174A  6E25               	movwf	startTimer@val,c
  1985  00174C  0E00               	movlw	0
  1986  00174E  6E26               	movwf	startTimer@val+1,c
  1987  001750  0E00               	movlw	0
  1988  001752  6E27               	movwf	startTimer@val+2,c
  1989  001754  0E00               	movlw	0
  1990  001756  6E28               	movwf	startTimer@val+3,c
  1991  001758  ECA4  F01C         	call	_startTimer	;wreg free
  1992                           
  1993                           ;main.c: 148: digitalWrite(cylinderMotor, 1);
  1994  00175C  0E66               	movlw	low _cylinderMotor
  1995  00175E  6E23               	movwf	digitalWrite@pin,c
  1996  001760  0E01               	movlw	high _cylinderMotor
  1997  001762  6E24               	movwf	digitalWrite@pin+1,c
  1998  001764  0E00               	movlw	0
  1999  001766  6E26               	movwf	digitalWrite@val+1,c
  2000  001768  0E01               	movlw	1
  2001  00176A  6E25               	movwf	digitalWrite@val,c
  2002  00176C  EC7C  F017         	call	_digitalWrite	;wreg free
  2003                           
  2004                           ;main.c: 149: initServo(conveyorServo, 130);
  2005  001770  0E5E               	movlw	low _conveyorServo
  2006  001772  0100               	movlb	0	; () banked
  2007  001774  6FDE               	movwf	initServo@motor& (0+255),b
  2008  001776  0E01               	movlw	high _conveyorServo
  2009  001778  0100               	movlb	0	; () banked
  2010  00177A  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  2011  00177C  0E00               	movlw	0
  2012  00177E  0100               	movlb	0	; () banked
  2013  001780  6FE1               	movwf	(initServo@angle+1)& (0+255),b
  2014  001782  0E82               	movlw	130
  2015  001784  6FE0               	movwf	initServo@angle& (0+255),b
  2016  001786  ECCA  F015         	call	_initServo	;wreg free
  2017                           
  2018                           ;main.c: 150: initServo(padServo, padAngle_NEUTRAL);
  2019  00178A  0E6E               	movlw	low _padServo
  2020  00178C  0100               	movlb	0	; () banked
  2021  00178E  6FDE               	movwf	initServo@motor& (0+255),b
  2022  001790  0E01               	movlw	high _padServo
  2023  001792  0100               	movlb	0	; () banked
  2024  001794  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  2025  001796  C158  F0E0         	movff	_padAngle_NEUTRAL,initServo@angle
  2026  00179A  C159  F0E1         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  2027  00179E  ECCA  F015         	call	_initServo	;wreg free
  2028                           
  2029                           ;main.c: 151: initServo(redirectingServo, redirectAngle_AA);
  2030  0017A2  0E72               	movlw	low _redirectingServo
  2031  0017A4  0100               	movlb	0	; () banked
  2032  0017A6  6FDE               	movwf	initServo@motor& (0+255),b
  2033  0017A8  0E01               	movlw	high _redirectingServo
  2034  0017AA  0100               	movlb	0	; () banked
  2035  0017AC  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  2036  0017AE  C15A  F0E0         	movff	_redirectAngle_AA,initServo@angle
  2037  0017B2  C15B  F0E1         	movff	_redirectAngle_AA+1,initServo@angle+1
  2038  0017B6  ECCA  F015         	call	_initServo	;wreg free
  2039  0017BA                     l7441:
  2040                           
  2041                           ;main.c: 155: lcdClear();
  2042  0017BA  EC97  F01E         	call	_lcdClear	;wreg free
  2043                           
  2044                           ;main.c: 156: printf("running");
  2045  0017BE  0EEA               	movlw	low STR_5
  2046  0017C0  0100               	movlb	0	; () banked
  2047  0017C2  6FBD               	movwf	printf@f& (0+255),b
  2048  0017C4  0EFF               	movlw	high STR_5
  2049  0017C6  0100               	movlb	0	; () banked
  2050  0017C8  6FBE               	movwf	(printf@f+1)& (0+255),b
  2051  0017CA  EC09  F000         	call	_printf	;wreg free
  2052                           
  2053                           ;main.c: 158: int lastBatteryTime = time;
  2054  0017CE  C148  F130         	movff	_time,main@lastBatteryTime
  2055  0017D2  C149  F131         	movff	_time+1,main@lastBatteryTime+1
  2056                           
  2057                           ;main.c: 160: int cylinderStart = time;
  2058  0017D6  C148  F132         	movff	_time,main@cylinderStart
  2059  0017DA  C149  F133         	movff	_time+1,main@cylinderStart+1
  2060                           
  2061                           ;main.c: 161: int cylinderDur = 0;
  2062  0017DE  0E00               	movlw	0
  2063  0017E0  0101               	movlb	1	; () banked
  2064  0017E2  6F35               	movwf	(main@cylinderDur+1)& (0+255),b
  2065  0017E4  0E00               	movlw	0
  2066  0017E6  6F34               	movwf	main@cylinderDur& (0+255),b
  2067                           
  2068                           ; BSR set to: 1
  2069                           ;main.c: 162: int cylinderForward = 10;
  2070  0017E8  0E00               	movlw	0
  2071  0017EA  0101               	movlb	1	; () banked
  2072  0017EC  6F2D               	movwf	(main@cylinderForward+1)& (0+255),b
  2073  0017EE  0E0A               	movlw	10
  2074  0017F0  6F2C               	movwf	main@cylinderForward& (0+255),b
  2075                           
  2076                           ; BSR set to: 1
  2077                           ;main.c: 163: int cylinderBackward = 10;
  2078  0017F2  0E00               	movlw	0
  2079  0017F4  0101               	movlb	1	; () banked
  2080  0017F6  6F2F               	movwf	(main@cylinderBackward+1)& (0+255),b
  2081  0017F8  0E0A               	movlw	10
  2082  0017FA  6F2E               	movwf	main@cylinderBackward& (0+255),b
  2083                           
  2084                           ;main.c: 165: while(!batteryDetected && !terminate){
  2085  0017FC  D121               	goto	l7473
  2086  0017FE                     l7455:
  2087                           
  2088                           ; BSR set to: 1
  2089                           ;main.c: 167: lcdHome();
  2090  0017FE  EC8F  F01E         	call	_lcdHome	;wreg free
  2091                           
  2092                           ;main.c: 168: printf("time %02ld:%02ld",time/600,(time/10)%60);
  2093  001802  0EB4               	movlw	low STR_6
  2094  001804  0100               	movlb	0	; () banked
  2095  001806  6FBD               	movwf	printf@f& (0+255),b
  2096  001808  0EFF               	movlw	high STR_6
  2097  00180A  0100               	movlb	0	; () banked
  2098  00180C  6FBE               	movwf	(printf@f+1)& (0+255),b
  2099  00180E  C148  F023         	movff	_time,___aldiv@dividend
  2100  001812  C149  F024         	movff	_time+1,___aldiv@dividend+1
  2101  001816  C14A  F025         	movff	_time+2,___aldiv@dividend+2
  2102  00181A  C14B  F026         	movff	_time+3,___aldiv@dividend+3
  2103  00181E  0E58               	movlw	88
  2104  001820  6E27               	movwf	___aldiv@divisor,c
  2105  001822  0E02               	movlw	2
  2106  001824  6E28               	movwf	___aldiv@divisor+1,c
  2107  001826  0E00               	movlw	0
  2108  001828  6E29               	movwf	___aldiv@divisor+2,c
  2109  00182A  0E00               	movlw	0
  2110  00182C  6E2A               	movwf	___aldiv@divisor+3,c
  2111  00182E  EC16  F017         	call	___aldiv	;wreg free
  2112  001832  C023  F0BF         	movff	?___aldiv,?_printf+2
  2113  001836  C024  F0C0         	movff	?___aldiv+1,?_printf+3
  2114  00183A  C025  F0C1         	movff	?___aldiv+2,?_printf+4
  2115  00183E  C026  F0C2         	movff	?___aldiv+3,?_printf+5
  2116  001842  0E0A               	movlw	10
  2117  001844  6E27               	movwf	___aldiv@divisor,c
  2118  001846  0E00               	movlw	0
  2119  001848  6E28               	movwf	___aldiv@divisor+1,c
  2120  00184A  0E00               	movlw	0
  2121  00184C  6E29               	movwf	___aldiv@divisor+2,c
  2122  00184E  0E00               	movlw	0
  2123  001850  6E2A               	movwf	___aldiv@divisor+3,c
  2124  001852  C148  F023         	movff	_time,___aldiv@dividend
  2125  001856  C149  F024         	movff	_time+1,___aldiv@dividend+1
  2126  00185A  C14A  F025         	movff	_time+2,___aldiv@dividend+2
  2127  00185E  C14B  F026         	movff	_time+3,___aldiv@dividend+3
  2128  001862  EC16  F017         	call	___aldiv	;wreg free
  2129  001866  C023  F031         	movff	?___aldiv,___almod@dividend
  2130  00186A  C024  F032         	movff	?___aldiv+1,___almod@dividend+1
  2131  00186E  C025  F033         	movff	?___aldiv+2,___almod@dividend+2
  2132  001872  C026  F034         	movff	?___aldiv+3,___almod@dividend+3
  2133  001876  0E3C               	movlw	60
  2134  001878  6E35               	movwf	___almod@divisor,c
  2135  00187A  0E00               	movlw	0
  2136  00187C  6E36               	movwf	___almod@divisor+1,c
  2137  00187E  0E00               	movlw	0
  2138  001880  6E37               	movwf	___almod@divisor+2,c
  2139  001882  0E00               	movlw	0
  2140  001884  6E38               	movwf	___almod@divisor+3,c
  2141  001886  EC9B  F018         	call	___almod	;wreg free
  2142  00188A  C031  F0C3         	movff	?___almod,?_printf+6
  2143  00188E  C032  F0C4         	movff	?___almod+1,?_printf+7
  2144  001892  C033  F0C5         	movff	?___almod+2,?_printf+8
  2145  001896  C034  F0C6         	movff	?___almod+3,?_printf+9
  2146  00189A  EC09  F000         	call	_printf	;wreg free
  2147                           
  2148                           ;main.c: 169: _delay((unsigned long)((77)*(10000000/4000.0)));
  2149  00189E  0EFA               	movlw	250
  2150  0018A0  0101               	movlb	1	; () banked
  2151  0018A2  6F1F               	movwf	??_main& (0+255),b
  2152  0018A4  0EFF               	movlw	255
  2153  0018A6                     u8147:
  2154  0018A6  2EE8               	decfsz	wreg,f,c
  2155  0018A8  D7FE               	bra	u8147
  2156  0018AA  2F1F               	decfsz	??_main& (0+255),f,b
  2157  0018AC  D7FC               	bra	u8147
  2158                           
  2159                           ;main.c: 172: if(time - cylinderStart >= cylinderDur)
  2160  0018AE  C134  F11F         	movff	main@cylinderDur,??_main
  2161  0018B2  C135  F120         	movff	main@cylinderDur+1,??_main+1
  2162  0018B6  0E00               	movlw	0
  2163  0018B8  0101               	movlb	1	; () banked
  2164  0018BA  BF20               	btfsc	(??_main+1)& (0+255),7,b
  2165  0018BC  0EFF               	movlw	255
  2166  0018BE  6F21               	movwf	(??_main+2)& (0+255),b
  2167  0018C0  6F22               	movwf	(??_main+3)& (0+255),b
  2168  0018C2  C132  F123         	movff	main@cylinderStart,??_main+4
  2169  0018C6  C133  F124         	movff	main@cylinderStart+1,??_main+5
  2170  0018CA  0E00               	movlw	0
  2171  0018CC  0101               	movlb	1	; () banked
  2172  0018CE  BF24               	btfsc	(??_main+5)& (0+255),7,b
  2173  0018D0  0EFF               	movlw	255
  2174  0018D2  6F25               	movwf	(??_main+6)& (0+255),b
  2175  0018D4  6F26               	movwf	(??_main+7)& (0+255),b
  2176  0018D6  0101               	movlb	1	; () banked
  2177  0018D8  1F23               	comf	(??_main+4)& (0+255),f,b
  2178  0018DA  1F24               	comf	(??_main+5)& (0+255),f,b
  2179  0018DC  1F25               	comf	(??_main+6)& (0+255),f,b
  2180  0018DE  1F26               	comf	(??_main+7)& (0+255),f,b
  2181  0018E0  2B23               	incf	(??_main+4)& (0+255),f,b
  2182  0018E2  0E00               	movlw	0
  2183  0018E4  2324               	addwfc	(??_main+5)& (0+255),f,b
  2184  0018E6  2325               	addwfc	(??_main+6)& (0+255),f,b
  2185  0018E8  2326               	addwfc	(??_main+7)& (0+255),f,b
  2186  0018EA  0101               	movlb	1	; () banked
  2187  0018EC  5148               	movf	_time& (0+255),w,b
  2188  0018EE  0101               	movlb	1	; () banked
  2189  0018F0  2523               	addwf	(??_main+4)& (0+255),w,b
  2190  0018F2  0101               	movlb	1	; () banked
  2191  0018F4  6F27               	movwf	(??_main+8)& (0+255),b
  2192  0018F6  0101               	movlb	1	; () banked
  2193  0018F8  5149               	movf	(_time+1)& (0+255),w,b
  2194  0018FA  0101               	movlb	1	; () banked
  2195  0018FC  2124               	addwfc	(??_main+5)& (0+255),w,b
  2196  0018FE  0101               	movlb	1	; () banked
  2197  001900  6F28               	movwf	(??_main+9)& (0+255),b
  2198  001902  0101               	movlb	1	; () banked
  2199  001904  514A               	movf	(_time+2)& (0+255),w,b
  2200  001906  0101               	movlb	1	; () banked
  2201  001908  2125               	addwfc	(??_main+6)& (0+255),w,b
  2202  00190A  0101               	movlb	1	; () banked
  2203  00190C  6F29               	movwf	(??_main+10)& (0+255),b
  2204  00190E  0101               	movlb	1	; () banked
  2205  001910  514B               	movf	(_time+3)& (0+255),w,b
  2206  001912  0101               	movlb	1	; () banked
  2207  001914  2126               	addwfc	(??_main+7)& (0+255),w,b
  2208  001916  0101               	movlb	1	; () banked
  2209  001918  6F2A               	movwf	(??_main+11)& (0+255),b
  2210  00191A  0101               	movlb	1	; () banked
  2211  00191C  511F               	movf	??_main& (0+255),w,b
  2212  00191E  0101               	movlb	1	; () banked
  2213  001920  5D27               	subwf	(??_main+8)& (0+255),w,b
  2214  001922  0101               	movlb	1	; () banked
  2215  001924  5120               	movf	(??_main+1)& (0+255),w,b
  2216  001926  0101               	movlb	1	; () banked
  2217  001928  5928               	subwfb	(??_main+9)& (0+255),w,b
  2218  00192A  0101               	movlb	1	; () banked
  2219  00192C  5121               	movf	(??_main+2)& (0+255),w,b
  2220  00192E  0101               	movlb	1	; () banked
  2221  001930  5929               	subwfb	(??_main+10)& (0+255),w,b
  2222  001932  0101               	movlb	1	; () banked
  2223  001934  512A               	movf	(??_main+11)& (0+255),w,b
  2224  001936  0A80               	xorlw	128
  2225  001938  0101               	movlb	1	; () banked
  2226  00193A  6F2B               	movwf	(??_main+12)& (0+255),b
  2227  00193C  0101               	movlb	1	; () banked
  2228  00193E  5122               	movf	(??_main+3)& (0+255),w,b
  2229  001940  0A80               	xorlw	128
  2230  001942  0101               	movlb	1	; () banked
  2231  001944  592B               	subwfb	(??_main+12)& (0+255),w,b
  2232  001946  A0D8               	btfss	status,0,c
  2233  001948  D02E               	goto	l7469
  2234                           
  2235                           ; BSR set to: 1
  2236                           ;main.c: 173: {
  2237                           ;main.c: 174: int prev = digitalRead(cylinderDir);
  2238  00194A  0E62               	movlw	low _cylinderDir
  2239  00194C  6E23               	movwf	digitalRead@pin,c
  2240  00194E  0E01               	movlw	high _cylinderDir
  2241  001950  6E24               	movwf	digitalRead@pin+1,c
  2242  001952  ECE0  F014         	call	_digitalRead	;wreg free
  2243  001956  C023  F136         	movff	?_digitalRead,main@prev
  2244  00195A  C024  F137         	movff	?_digitalRead+1,main@prev+1
  2245                           
  2246                           ;main.c: 175: digitalWrite(cylinderDir, !prev);
  2247  00195E  0E62               	movlw	low _cylinderDir
  2248  001960  6E23               	movwf	digitalWrite@pin,c
  2249  001962  0E01               	movlw	high _cylinderDir
  2250  001964  6E24               	movwf	digitalWrite@pin+1,c
  2251  001966  0101               	movlb	1	; () banked
  2252  001968  5136               	movf	main@prev& (0+255),w,b
  2253  00196A  0101               	movlb	1	; () banked
  2254  00196C  1137               	iorwf	(main@prev+1)& (0+255),w,b
  2255  00196E  A4D8               	btfss	status,2,c
  2256  001970  D002               	goto	u8050
  2257  001972  0E01               	movlw	1
  2258  001974  D001               	goto	u8060
  2259  001976                     u8050:
  2260  001976  0E00               	movlw	0
  2261  001978                     u8060:
  2262  001978  6E25               	movwf	digitalWrite@val,c
  2263  00197A  6A26               	clrf	digitalWrite@val+1,c
  2264  00197C  EC7C  F017         	call	_digitalWrite	;wreg free
  2265                           
  2266                           ;main.c: 176: if(prev)cylinderDur = cylinderBackward;
  2267  001980  0101               	movlb	1	; () banked
  2268  001982  5136               	movf	main@prev& (0+255),w,b
  2269  001984  0101               	movlb	1	; () banked
  2270  001986  1137               	iorwf	(main@prev+1)& (0+255),w,b
  2271  001988  B4D8               	btfsc	status,2,c
  2272  00198A  D005               	goto	l159
  2273                           
  2274                           ; BSR set to: 1
  2275  00198C  C12E  F134         	movff	main@cylinderBackward,main@cylinderDur
  2276  001990  C12F  F135         	movff	main@cylinderBackward+1,main@cylinderDur+1
  2277  001994  D004               	goto	l160
  2278  001996                     l159:
  2279                           
  2280                           ; BSR set to: 1
  2281                           ;main.c: 177: else cylinderDur = cylinderForward;
  2282  001996  C12C  F134         	movff	main@cylinderForward,main@cylinderDur
  2283  00199A  C12D  F135         	movff	main@cylinderForward+1,main@cylinderDur+1
  2284  00199E                     l160:
  2285                           
  2286                           ; BSR set to: 1
  2287                           ;main.c: 178: cylinderStart = time;
  2288  00199E  C148  F132         	movff	_time,main@cylinderStart
  2289  0019A2  C149  F133         	movff	_time+1,main@cylinderStart+1
  2290  0019A6                     l7469:
  2291                           
  2292                           ; BSR set to: 1
  2293                           ;main.c: 179: }
  2294                           ;main.c: 181: if(time - lastBatteryTime > stoppingTime)
  2295  0019A6  C130  F11F         	movff	main@lastBatteryTime,??_main
  2296  0019AA  C131  F120         	movff	main@lastBatteryTime+1,??_main+1
  2297  0019AE  0E00               	movlw	0
  2298  0019B0  0101               	movlb	1	; () banked
  2299  0019B2  BF20               	btfsc	(??_main+1)& (0+255),7,b
  2300  0019B4  0EFF               	movlw	255
  2301  0019B6  6F21               	movwf	(??_main+2)& (0+255),b
  2302  0019B8  6F22               	movwf	(??_main+3)& (0+255),b
  2303  0019BA  0101               	movlb	1	; () banked
  2304  0019BC  1F1F               	comf	??_main& (0+255),f,b
  2305  0019BE  1F20               	comf	(??_main+1)& (0+255),f,b
  2306  0019C0  1F21               	comf	(??_main+2)& (0+255),f,b
  2307  0019C2  1F22               	comf	(??_main+3)& (0+255),f,b
  2308  0019C4  2B1F               	incf	??_main& (0+255),f,b
  2309  0019C6  0E00               	movlw	0
  2310  0019C8  2320               	addwfc	(??_main+1)& (0+255),f,b
  2311  0019CA  2321               	addwfc	(??_main+2)& (0+255),f,b
  2312  0019CC  2322               	addwfc	(??_main+3)& (0+255),f,b
  2313  0019CE  0101               	movlb	1	; () banked
  2314  0019D0  5148               	movf	_time& (0+255),w,b
  2315  0019D2  0101               	movlb	1	; () banked
  2316  0019D4  251F               	addwf	??_main& (0+255),w,b
  2317  0019D6  0101               	movlb	1	; () banked
  2318  0019D8  6F23               	movwf	(??_main+4)& (0+255),b
  2319  0019DA  0101               	movlb	1	; () banked
  2320  0019DC  5149               	movf	(_time+1)& (0+255),w,b
  2321  0019DE  0101               	movlb	1	; () banked
  2322  0019E0  2120               	addwfc	(??_main+1)& (0+255),w,b
  2323  0019E2  0101               	movlb	1	; () banked
  2324  0019E4  6F24               	movwf	(??_main+5)& (0+255),b
  2325  0019E6  0101               	movlb	1	; () banked
  2326  0019E8  514A               	movf	(_time+2)& (0+255),w,b
  2327  0019EA  0101               	movlb	1	; () banked
  2328  0019EC  2121               	addwfc	(??_main+2)& (0+255),w,b
  2329  0019EE  0101               	movlb	1	; () banked
  2330  0019F0  6F25               	movwf	(??_main+6)& (0+255),b
  2331  0019F2  0101               	movlb	1	; () banked
  2332  0019F4  514B               	movf	(_time+3)& (0+255),w,b
  2333  0019F6  0101               	movlb	1	; () banked
  2334  0019F8  2122               	addwfc	(??_main+3)& (0+255),w,b
  2335  0019FA  0101               	movlb	1	; () banked
  2336  0019FC  6F26               	movwf	(??_main+7)& (0+255),b
  2337  0019FE  0E00               	movlw	0
  2338  001A00  0101               	movlb	1	; () banked
  2339  001A02  BF5D               	btfsc	(_stoppingTime+1)& (0+255),7,b
  2340  001A04  0EFF               	movlw	255
  2341  001A06  0101               	movlb	1	; () banked
  2342  001A08  6F28               	movwf	(??_main+9)& (0+255),b
  2343  001A0A  0A80               	xorlw	128
  2344  001A0C  6F27               	movwf	(??_main+8)& (0+255),b
  2345  001A0E  0101               	movlb	1	; () banked
  2346  001A10  5123               	movf	(??_main+4)& (0+255),w,b
  2347  001A12  0101               	movlb	1	; () banked
  2348  001A14  5D5C               	subwf	_stoppingTime& (0+255),w,b
  2349  001A16  0101               	movlb	1	; () banked
  2350  001A18  5124               	movf	(??_main+5)& (0+255),w,b
  2351  001A1A  0101               	movlb	1	; () banked
  2352  001A1C  595D               	subwfb	(_stoppingTime+1)& (0+255),w,b
  2353  001A1E  0101               	movlb	1	; () banked
  2354  001A20  5125               	movf	(??_main+6)& (0+255),w,b
  2355  001A22  0101               	movlb	1	; () banked
  2356  001A24  5928               	subwfb	(??_main+9)& (0+255),w,b
  2357  001A26  0101               	movlb	1	; () banked
  2358  001A28  5126               	movf	(??_main+7)& (0+255),w,b
  2359  001A2A  0A80               	xorlw	128
  2360  001A2C  0101               	movlb	1	; () banked
  2361  001A2E  5927               	subwfb	(??_main+8)& (0+255),w,b
  2362  001A30  B0D8               	btfsc	status,0,c
  2363  001A32  D006               	goto	l7473
  2364                           
  2365                           ; BSR set to: 1
  2366                           ;main.c: 182: {
  2367                           ;main.c: 183: terminate = 1;
  2368  001A34  0E00               	movlw	0
  2369  001A36  0101               	movlb	1	; () banked
  2370  001A38  6F57               	movwf	(_terminate+1)& (0+255),b
  2371  001A3A  0E01               	movlw	1
  2372  001A3C  6F56               	movwf	_terminate& (0+255),b
  2373                           
  2374                           ;main.c: 184: break;
  2375  001A3E  D00C               	goto	l7477
  2376  001A40                     l7473:
  2377                           
  2378                           ; BSR set to: 1
  2379  001A40  0101               	movlb	1	; () banked
  2380  001A42  514C               	movf	_batteryDetected& (0+255),w,b
  2381  001A44  0101               	movlb	1	; () banked
  2382  001A46  114D               	iorwf	(_batteryDetected+1)& (0+255),w,b
  2383  001A48  A4D8               	btfss	status,2,c
  2384  001A4A  D006               	goto	l7477
  2385                           
  2386                           ; BSR set to: 1
  2387  001A4C  0101               	movlb	1	; () banked
  2388  001A4E  5156               	movf	_terminate& (0+255),w,b
  2389  001A50  0101               	movlb	1	; () banked
  2390  001A52  1157               	iorwf	(_terminate+1)& (0+255),w,b
  2391  001A54  B4D8               	btfsc	status,2,c
  2392  001A56  D6D3               	goto	l7455
  2393  001A58                     l7477:
  2394                           
  2395                           ; BSR set to: 1
  2396                           ;main.c: 185: }
  2397                           ;main.c: 186: }
  2398                           ;main.c: 188: if(terminate)break;
  2399  001A58  0101               	movlb	1	; () banked
  2400  001A5A  5156               	movf	_terminate& (0+255),w,b
  2401  001A5C  0101               	movlb	1	; () banked
  2402  001A5E  1157               	iorwf	(_terminate+1)& (0+255),w,b
  2403  001A60  A4D8               	btfss	status,2,c
  2404  001A62  D00C               	goto	l7487
  2405                           
  2406                           ; BSR set to: 1
  2407                           ;main.c: 190: sortBattery();
  2408                           
  2409                           ; BSR set to: 1
  2410                           
  2411                           ; BSR set to: 1
  2412  001A64  EC05  F007         	call	_sortBattery	;wreg free
  2413                           
  2414                           ;main.c: 193: lastBatteryTime = time;
  2415  001A68  C148  F130         	movff	_time,main@lastBatteryTime
  2416  001A6C  C149  F131         	movff	_time+1,main@lastBatteryTime+1
  2417                           
  2418                           ;main.c: 194: batteryDetected = 0;
  2419  001A70  0E00               	movlw	0
  2420  001A72  0101               	movlb	1	; () banked
  2421  001A74  6F4D               	movwf	(_batteryDetected+1)& (0+255),b
  2422  001A76  0E00               	movlw	0
  2423  001A78  6F4C               	movwf	_batteryDetected& (0+255),b
  2424                           
  2425                           ; BSR set to: 1
  2426  001A7A  D69F               	goto	l7441
  2427  001A7C                     l7487:
  2428                           
  2429                           ; BSR set to: 1
  2430                           ;main.c: 195: }
  2431                           ;main.c: 198: digitalWrite(cylinderMotor, 0);
  2432  001A7C  0E66               	movlw	low _cylinderMotor
  2433  001A7E  6E23               	movwf	digitalWrite@pin,c
  2434  001A80  0E01               	movlw	high _cylinderMotor
  2435  001A82  6E24               	movwf	digitalWrite@pin+1,c
  2436  001A84  0E00               	movlw	0
  2437  001A86  6E26               	movwf	digitalWrite@val+1,c
  2438  001A88  0E00               	movlw	0
  2439  001A8A  6E25               	movwf	digitalWrite@val,c
  2440  001A8C  EC7C  F017         	call	_digitalWrite	;wreg free
  2441                           
  2442                           ;main.c: 201: lcdClear();
  2443  001A90  EC97  F01E         	call	_lcdClear	;wreg free
  2444                           
  2445                           ;main.c: 202: printf("[AA,C,9V,OTHER]\n");
  2446  001A94  0EA3               	movlw	low STR_7
  2447  001A96  0100               	movlb	0	; () banked
  2448  001A98  6FBD               	movwf	printf@f& (0+255),b
  2449  001A9A  0EFF               	movlw	high STR_7
  2450  001A9C  0100               	movlb	0	; () banked
  2451  001A9E  6FBE               	movwf	(printf@f+1)& (0+255),b
  2452  001AA0  EC09  F000         	call	_printf	;wreg free
  2453                           
  2454                           ;main.c: 203: printf("[%d,%d,%d,%d]",n_AA,n_C,n_9V,n_OTHER);
  2455  001AA4  0ED4               	movlw	low STR_8
  2456  001AA6  0100               	movlb	0	; () banked
  2457  001AA8  6FBD               	movwf	printf@f& (0+255),b
  2458  001AAA  0EFF               	movlw	high STR_8
  2459  001AAC  0100               	movlb	0	; () banked
  2460  001AAE  6FBE               	movwf	(printf@f+1)& (0+255),b
  2461  001AB0  C150  F0BF         	movff	_n_AA,?_printf+2
  2462  001AB4  C151  F0C0         	movff	_n_AA+1,?_printf+3
  2463  001AB8  C152  F0C1         	movff	_n_C,?_printf+4
  2464  001ABC  C153  F0C2         	movff	_n_C+1,?_printf+5
  2465  001AC0  C14E  F0C3         	movff	_n_9V,?_printf+6
  2466  001AC4  C14F  F0C4         	movff	_n_9V+1,?_printf+7
  2467  001AC8  C154  F0C5         	movff	_n_OTHER,?_printf+8
  2468  001ACC  C155  F0C6         	movff	_n_OTHER+1,?_printf+9
  2469  001AD0  EC09  F000         	call	_printf	;wreg free
  2470                           
  2471                           ;main.c: 204: readKeypad();
  2472  001AD4  ECFE  F01D         	call	_readKeypad	;wreg free
  2473  001AD8  D61D               	goto	l154
  2474  001ADA                     l170:
  2475  001ADA  D7FF               	goto	l170
  2476  001ADC                     __end_of_main:
  2477                           	opt stack 0
  2478                           tblptru	equ	0xFF8
  2479                           tblptrh	equ	0xFF7
  2480                           tblptrl	equ	0xFF6
  2481                           tablat	equ	0xFF5
  2482                           postinc0	equ	0xFEE
  2483                           wreg	equ	0xFE8
  2484                           postdec1	equ	0xFE5
  2485                           fsr1l	equ	0xFE1
  2486                           status	equ	0xFD8
  2487                           
  2488 ;; *************** function _sortBattery *****************
  2489 ;; Defined at:
  2490 ;;		line 212 in file "main.c"
  2491 ;; Parameters:    Size  Location     Type
  2492 ;;		None
  2493 ;; Auto vars:     Size  Location     Type
  2494 ;;  V               3   22[BANK1 ] float 
  2495 ;;  i               2   18[BANK1 ] int 
  2496 ;;  i               3   25[BANK1 ] float 
  2497 ;;  V               3   28[BANK1 ] float 
  2498 ;;  V_max           3   15[BANK1 ] float 
  2499 ;;  resolution      3   12[BANK1 ] float 
  2500 ;;  Vcc             3    9[BANK1 ] float 
  2501 ;;  V_float         3    2[BANK1 ] float 
  2502 ;;  targetAngle     2   20[BANK1 ] int 
  2503 ;;  signal          2    7[BANK1 ] int 
  2504 ;;  pos_v_counte    2    5[BANK1 ] int 
  2505 ;; Return value:  Size  Location     Type
  2506 ;;                  1    wreg      void 
  2507 ;; Registers used:
  2508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2515 ;;      Locals:         0       0      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2516 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2517 ;;      Totals:         0       2      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2518 ;;Total ram usage:       33 bytes
  2519 ;; Hardware stack levels used:    1
  2520 ;; Hardware stack levels required when called:    8
  2521 ;; This function calls:
  2522 ;;		___altoft
  2523 ;;		___awtoft
  2524 ;;		___ftdiv
  2525 ;;		___ftge
  2526 ;;		___ftmul
  2527 ;;		___ftsub
  2528 ;;		___fttol
  2529 ;;		_analogRead
  2530 ;;		_digitalRead
  2531 ;;		_digitalWrite
  2532 ;;		_lcdClear
  2533 ;;		_printf
  2534 ;;		_readKeypad
  2535 ;;		_setAngle
  2536 ;; This function is called by:
  2537 ;;		_main
  2538 ;; This function uses a non-reentrant model
  2539 ;;
  2540                           
  2541                           	psect	text1
  2542  000E0A                     __ptext1:
  2543                           	opt stack 0
  2544  000E0A                     _sortBattery:
  2545                           	opt stack 22
  2546                           
  2547                           ;main.c: 215: setAngle(conveyorServo, 90);
  2548                           
  2549                           ;incstack = 0
  2550  000E0A  0E5E               	movlw	low _conveyorServo
  2551  000E0C  0100               	movlb	0	; () banked
  2552  000E0E  6FD4               	movwf	setAngle@motor& (0+255),b
  2553  000E10  0E01               	movlw	high _conveyorServo
  2554  000E12  0100               	movlb	0	; () banked
  2555  000E14  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2556  000E16  0E00               	movlw	0
  2557  000E18  0100               	movlb	0	; () banked
  2558  000E1A  6FD7               	movwf	(setAngle@angle+1)& (0+255),b
  2559  000E1C  0E5A               	movlw	90
  2560  000E1E  6FD6               	movwf	setAngle@angle& (0+255),b
  2561  000E20  ECAC  F016         	call	_setAngle	;wreg free
  2562                           
  2563                           ;main.c: 216: digitalWrite(cylinderMotor, 0);
  2564  000E24  0E66               	movlw	low _cylinderMotor
  2565  000E26  6E23               	movwf	digitalWrite@pin,c
  2566  000E28  0E01               	movlw	high _cylinderMotor
  2567  000E2A  6E24               	movwf	digitalWrite@pin+1,c
  2568  000E2C  0E00               	movlw	0
  2569  000E2E  6E26               	movwf	digitalWrite@val+1,c
  2570  000E30  0E00               	movlw	0
  2571  000E32  6E25               	movwf	digitalWrite@val,c
  2572  000E34  EC7C  F017         	call	_digitalWrite	;wreg free
  2573                           
  2574                           ;main.c: 219: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2575  000E38  0E0D               	movlw	13
  2576  000E3A  0100               	movlb	0	; () banked
  2577  000E3C  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  2578  000E3E  0EAF               	movlw	175
  2579  000E40  0100               	movlb	0	; () banked
  2580  000E42  6FEB               	movwf	??_sortBattery& (0+255),b
  2581  000E44  0EB6               	movlw	182
  2582  000E46                     u8157:
  2583  000E46  2EE8               	decfsz	wreg,f,c
  2584  000E48  D7FE               	bra	u8157
  2585  000E4A  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  2586  000E4C  D7FC               	bra	u8157
  2587  000E4E  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2588  000E50  D7FA               	bra	u8157
  2589  000E52  F000               	nop	
  2590                           
  2591                           ;main.c: 221: float Vcc = 5.00;
  2592  000E54  0E00               	movlw	0
  2593  000E56  0101               	movlb	1	; () banked
  2594  000E58  6F09               	movwf	sortBattery@Vcc& (0+255),b
  2595  000E5A  0EA0               	movlw	160
  2596  000E5C  0101               	movlb	1	; () banked
  2597  000E5E  6F0A               	movwf	(sortBattery@Vcc+1)& (0+255),b
  2598  000E60  0E40               	movlw	64
  2599  000E62  0101               	movlb	1	; () banked
  2600  000E64  6F0B               	movwf	(sortBattery@Vcc+2)& (0+255),b
  2601                           
  2602                           ; BSR set to: 1
  2603                           ;main.c: 222: float resolution = (1<<10) - 1;
  2604  000E66  0EC0               	movlw	192
  2605  000E68  0101               	movlb	1	; () banked
  2606  000E6A  6F0C               	movwf	sortBattery@resolution& (0+255),b
  2607  000E6C  0E7F               	movlw	127
  2608  000E6E  0101               	movlb	1	; () banked
  2609  000E70  6F0D               	movwf	(sortBattery@resolution+1)& (0+255),b
  2610  000E72  0E44               	movlw	68
  2611  000E74  0101               	movlb	1	; () banked
  2612  000E76  6F0E               	movwf	(sortBattery@resolution+2)& (0+255),b
  2613                           
  2614                           ; BSR set to: 1
  2615                           ;main.c: 223: float V_max = 0;
  2616  000E78  0E00               	movlw	0
  2617  000E7A  0101               	movlb	1	; () banked
  2618  000E7C  6F0F               	movwf	sortBattery@V_max& (0+255),b
  2619  000E7E  0E00               	movlw	0
  2620  000E80  0101               	movlb	1	; () banked
  2621  000E82  6F10               	movwf	(sortBattery@V_max+1)& (0+255),b
  2622  000E84  0E00               	movlw	0
  2623  000E86  0101               	movlb	1	; () banked
  2624  000E88  6F11               	movwf	(sortBattery@V_max+2)& (0+255),b
  2625                           
  2626                           ; BSR set to: 1
  2627                           ;main.c: 224: float V_float = 0;
  2628  000E8A  0E00               	movlw	0
  2629  000E8C  0101               	movlb	1	; () banked
  2630  000E8E  6F02               	movwf	sortBattery@V_float& (0+255),b
  2631  000E90  0E00               	movlw	0
  2632  000E92  0101               	movlb	1	; () banked
  2633  000E94  6F03               	movwf	(sortBattery@V_float+1)& (0+255),b
  2634  000E96  0E00               	movlw	0
  2635  000E98  0101               	movlb	1	; () banked
  2636  000E9A  6F04               	movwf	(sortBattery@V_float+2)& (0+255),b
  2637                           
  2638                           ; BSR set to: 1
  2639                           ;main.c: 225: int pos_v_counter = 1;
  2640  000E9C  0E00               	movlw	0
  2641  000E9E  0101               	movlb	1	; () banked
  2642  000EA0  6F06               	movwf	(sortBattery@pos_v_counter+1)& (0+255),b
  2643  000EA2  0E01               	movlw	1
  2644  000EA4  6F05               	movwf	sortBattery@pos_v_counter& (0+255),b
  2645                           
  2646                           ; BSR set to: 1
  2647                           ;main.c: 226: int signal = 0;
  2648  000EA6  0E00               	movlw	0
  2649  000EA8  0101               	movlb	1	; () banked
  2650  000EAA  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2651  000EAC  0E00               	movlw	0
  2652  000EAE  6F07               	movwf	sortBattery@signal& (0+255),b
  2653                           
  2654                           ; BSR set to: 1
  2655                           ;main.c: 230: for(float i = (float)padAngle_NEUTRAL; i > padAngle_CLOSE; i -= 0.1) {
  2656  000EB0  C158  F02B         	movff	_padAngle_NEUTRAL,___awtoft@c
  2657  000EB4  C159  F02C         	movff	_padAngle_NEUTRAL+1,___awtoft@c+1
  2658  000EB8  EC9A  F01D         	call	___awtoft	;wreg free
  2659  000EBC  C02B  F119         	movff	?___awtoft,sortBattery@i
  2660  000EC0  C02C  F11A         	movff	?___awtoft+1,sortBattery@i+1
  2661  000EC4  C02D  F11B         	movff	?___awtoft+2,sortBattery@i+2
  2662  000EC8  D0F6               	goto	l7347
  2663  000ECA                     l7321:
  2664                           
  2665                           ;main.c: 231: setAngle(padServo, i);
  2666  000ECA  C119  F0AE         	movff	sortBattery@i,___fttol@f1
  2667  000ECE  C11A  F0AF         	movff	sortBattery@i+1,___fttol@f1+1
  2668  000ED2  C11B  F0B0         	movff	sortBattery@i+2,___fttol@f1+2
  2669  000ED6  EC03  F012         	call	___fttol	;wreg free
  2670  000EDA  C0AE  F100         	movff	?___fttol,_sortBattery$1425
  2671  000EDE  C0AF  F101         	movff	?___fttol+1,_sortBattery$1425+1
  2672                           
  2673                           ;main.c: 231: setAngle(padServo, i);
  2674  000EE2  0E6E               	movlw	low _padServo
  2675  000EE4  0100               	movlb	0	; () banked
  2676  000EE6  6FD4               	movwf	setAngle@motor& (0+255),b
  2677  000EE8  0E01               	movlw	high _padServo
  2678  000EEA  0100               	movlb	0	; () banked
  2679  000EEC  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2680  000EEE  C100  F0D6         	movff	_sortBattery$1425,setAngle@angle
  2681  000EF2  C101  F0D7         	movff	_sortBattery$1425+1,setAngle@angle+1
  2682  000EF6  ECAC  F016         	call	_setAngle	;wreg free
  2683                           
  2684                           ;main.c: 232: _delay((unsigned long)((100)*(10000000/4000000.0)));
  2685  000EFA  0E53               	movlw	83
  2686  000EFC                     u8167:
  2687  000EFC  2EE8               	decfsz	wreg,f,c
  2688  000EFE  D7FE               	bra	u8167
  2689  000F00  F000               	nop	
  2690                           
  2691                           ;main.c: 233: digitalWrite(AA_float, 1);
  2692  000F02  0E4A               	movlw	low _AA_float
  2693  000F04  6E23               	movwf	digitalWrite@pin,c
  2694  000F06  0E00               	movlw	high _AA_float
  2695  000F08  6E24               	movwf	digitalWrite@pin+1,c
  2696  000F0A  0E00               	movlw	0
  2697  000F0C  6E26               	movwf	digitalWrite@val+1,c
  2698  000F0E  0E01               	movlw	1
  2699  000F10  6E25               	movwf	digitalWrite@val,c
  2700  000F12  EC7C  F017         	call	_digitalWrite	;wreg free
  2701                           
  2702                           ;main.c: 234: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2703  000F16  C10C  F038         	movff	sortBattery@resolution,___ftdiv@f2
  2704  000F1A  C10D  F039         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2705  000F1E  C10E  F03A         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2706  000F22  C054  F023         	movff	_padPin3+2,analogRead@channel
  2707  000F26  C055  F024         	movff	_padPin3+3,analogRead@channel+1
  2708  000F2A  EC7E  F01D         	call	_analogRead	;wreg free
  2709  000F2E  C023  F02B         	movff	?_analogRead,___altoft@c
  2710  000F32  C024  F02C         	movff	?_analogRead+1,___altoft@c+1
  2711  000F36  C025  F02D         	movff	?_analogRead+2,___altoft@c+2
  2712  000F3A  C026  F02E         	movff	?_analogRead+3,___altoft@c+3
  2713  000F3E  EC4B  F01A         	call	___altoft	;wreg free
  2714  000F42  C02B  F035         	movff	?___altoft,___ftdiv@f1
  2715  000F46  C02C  F036         	movff	?___altoft+1,___ftdiv@f1+1
  2716  000F4A  C02D  F037         	movff	?___altoft+2,___ftdiv@f1+2
  2717  000F4E  ECD2  F013         	call	___ftdiv	;wreg free
  2718  000F52  C035  F089         	movff	?___ftdiv,___ftmul@f1
  2719  000F56  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
  2720  000F5A  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
  2721  000F5E  C109  F08C         	movff	sortBattery@Vcc,___ftmul@f2
  2722  000F62  C10A  F08D         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2723  000F66  C10B  F08E         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2724  000F6A  ECA8  F010         	call	___ftmul	;wreg free
  2725  000F6E  C089  F116         	movff	?___ftmul,sortBattery@V
  2726  000F72  C08A  F117         	movff	?___ftmul+1,sortBattery@V+1
  2727  000F76  C08B  F118         	movff	?___ftmul+2,sortBattery@V+2
  2728                           
  2729                           ;main.c: 236: if(V > 0.1)pos_v_counter++;
  2730  000F7A  0ECD               	movlw	205
  2731  000F7C  6E2F               	movwf	___ftge@ff1,c
  2732  000F7E  0ECC               	movlw	204
  2733  000F80  6E30               	movwf	___ftge@ff1+1,c
  2734  000F82  0E3D               	movlw	61
  2735  000F84  6E31               	movwf	___ftge@ff1+2,c
  2736  000F86  C116  F032         	movff	sortBattery@V,___ftge@ff2
  2737  000F8A  C117  F033         	movff	sortBattery@V+1,___ftge@ff2+1
  2738  000F8E  C118  F034         	movff	sortBattery@V+2,___ftge@ff2+2
  2739  000F92  EC3A  F019         	call	___ftge	;wreg free
  2740  000F96  B0D8               	btfsc	status,0,c
  2741  000F98  D003               	goto	l7335
  2742  000F9A  0101               	movlb	1	; () banked
  2743  000F9C  4B05               	infsnz	sortBattery@pos_v_counter& (0+255),f,b
  2744  000F9E  2B06               	incf	(sortBattery@pos_v_counter+1)& (0+255),f,b
  2745  000FA0                     l7335:
  2746                           
  2747                           ;main.c: 238: if(V > V_max) {
  2748  000FA0  C10F  F02F         	movff	sortBattery@V_max,___ftge@ff1
  2749  000FA4  C110  F030         	movff	sortBattery@V_max+1,___ftge@ff1+1
  2750  000FA8  C111  F031         	movff	sortBattery@V_max+2,___ftge@ff1+2
  2751  000FAC  C116  F032         	movff	sortBattery@V,___ftge@ff2
  2752  000FB0  C117  F033         	movff	sortBattery@V+1,___ftge@ff2+1
  2753  000FB4  C118  F034         	movff	sortBattery@V+2,___ftge@ff2+2
  2754  000FB8  EC3A  F019         	call	___ftge	;wreg free
  2755  000FBC  B0D8               	btfsc	status,0,c
  2756  000FBE  D064               	goto	l7345
  2757                           
  2758                           ;main.c: 239: signal = digitalRead(padPin1)<<1;
  2759  000FC0  0E4E               	movlw	low _padPin1
  2760  000FC2  6E23               	movwf	digitalRead@pin,c
  2761  000FC4  0E00               	movlw	high _padPin1
  2762  000FC6  6E24               	movwf	digitalRead@pin+1,c
  2763  000FC8  ECE0  F014         	call	_digitalRead	;wreg free
  2764  000FCC  90D8               	bcf	status,0,c
  2765  000FCE  3423               	rlcf	?_digitalRead,w,c
  2766  000FD0  0101               	movlb	1	; () banked
  2767  000FD2  6F07               	movwf	sortBattery@signal& (0+255),b
  2768  000FD4  3424               	rlcf	?_digitalRead+1,w,c
  2769  000FD6  0101               	movlb	1	; () banked
  2770  000FD8  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  2771                           
  2772                           ;main.c: 240: signal |= digitalRead(padPin2)<<0;
  2773  000FDA  0E6A               	movlw	low _padPin2
  2774  000FDC  6E23               	movwf	digitalRead@pin,c
  2775  000FDE  0E01               	movlw	high _padPin2
  2776  000FE0  6E24               	movwf	digitalRead@pin+1,c
  2777  000FE2  ECE0  F014         	call	_digitalRead	;wreg free
  2778  000FE6  5023               	movf	?_digitalRead,w,c
  2779  000FE8  0101               	movlb	1	; () banked
  2780  000FEA  1307               	iorwf	sortBattery@signal& (0+255),f,b
  2781  000FEC  5024               	movf	?_digitalRead+1,w,c
  2782  000FEE  0101               	movlb	1	; () banked
  2783  000FF0  1308               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  2784                           
  2785                           ; BSR set to: 1
  2786                           ;main.c: 242: V_max = V;
  2787  000FF2  C116  F10F         	movff	sortBattery@V,sortBattery@V_max
  2788  000FF6  C117  F110         	movff	sortBattery@V+1,sortBattery@V_max+1
  2789  000FFA  C118  F111         	movff	sortBattery@V+2,sortBattery@V_max+2
  2790                           
  2791                           ;main.c: 245: digitalWrite(AA_float, 0);
  2792  000FFE  0E4A               	movlw	low _AA_float
  2793  001000  6E23               	movwf	digitalWrite@pin,c
  2794  001002  0E00               	movlw	high _AA_float
  2795  001004  6E24               	movwf	digitalWrite@pin+1,c
  2796  001006  0E00               	movlw	0
  2797  001008  6E26               	movwf	digitalWrite@val+1,c
  2798  00100A  0E00               	movlw	0
  2799  00100C  6E25               	movwf	digitalWrite@val,c
  2800  00100E  EC7C  F017         	call	_digitalWrite	;wreg free
  2801                           
  2802                           ;main.c: 246: _delay((unsigned long)((1)*(10000000/4000.0)));
  2803  001012  0E04               	movlw	4
  2804  001014  0100               	movlb	0	; () banked
  2805  001016  6FEB               	movwf	??_sortBattery& (0+255),b
  2806  001018  0E3D               	movlw	61
  2807  00101A                     u8177:
  2808  00101A  2EE8               	decfsz	wreg,f,c
  2809  00101C  D7FE               	bra	u8177
  2810  00101E  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  2811  001020  D7FC               	bra	u8177
  2812  001022  D000               	nop2	
  2813                           
  2814                           ;main.c: 247: V_float = analogRead(padPin3[1]) / resolution * Vcc;
  2815  001024  C10C  F038         	movff	sortBattery@resolution,___ftdiv@f2
  2816  001028  C10D  F039         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2817  00102C  C10E  F03A         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2818  001030  C054  F023         	movff	_padPin3+2,analogRead@channel
  2819  001034  C055  F024         	movff	_padPin3+3,analogRead@channel+1
  2820  001038  EC7E  F01D         	call	_analogRead	;wreg free
  2821  00103C  C023  F02B         	movff	?_analogRead,___altoft@c
  2822  001040  C024  F02C         	movff	?_analogRead+1,___altoft@c+1
  2823  001044  C025  F02D         	movff	?_analogRead+2,___altoft@c+2
  2824  001048  C026  F02E         	movff	?_analogRead+3,___altoft@c+3
  2825  00104C  EC4B  F01A         	call	___altoft	;wreg free
  2826  001050  C02B  F035         	movff	?___altoft,___ftdiv@f1
  2827  001054  C02C  F036         	movff	?___altoft+1,___ftdiv@f1+1
  2828  001058  C02D  F037         	movff	?___altoft+2,___ftdiv@f1+2
  2829  00105C  ECD2  F013         	call	___ftdiv	;wreg free
  2830  001060  C035  F089         	movff	?___ftdiv,___ftmul@f1
  2831  001064  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
  2832  001068  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
  2833  00106C  C109  F08C         	movff	sortBattery@Vcc,___ftmul@f2
  2834  001070  C10A  F08D         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2835  001074  C10B  F08E         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2836  001078  ECA8  F010         	call	___ftmul	;wreg free
  2837  00107C  C089  F102         	movff	?___ftmul,sortBattery@V_float
  2838  001080  C08A  F103         	movff	?___ftmul+1,sortBattery@V_float+1
  2839  001084  C08B  F104         	movff	?___ftmul+2,sortBattery@V_float+2
  2840  001088                     l7345:
  2841  001088  C119  F0AE         	movff	sortBattery@i,___ftsub@f1
  2842  00108C  C11A  F0AF         	movff	sortBattery@i+1,___ftsub@f1+1
  2843  001090  C11B  F0B0         	movff	sortBattery@i+2,___ftsub@f1+2
  2844  001094  0ECD               	movlw	205
  2845  001096  0100               	movlb	0	; () banked
  2846  001098  6FB1               	movwf	___ftsub@f2& (0+255),b
  2847  00109A  0ECC               	movlw	204
  2848  00109C  0100               	movlb	0	; () banked
  2849  00109E  6FB2               	movwf	(___ftsub@f2+1)& (0+255),b
  2850  0010A0  0E3D               	movlw	61
  2851  0010A2  0100               	movlb	0	; () banked
  2852  0010A4  6FB3               	movwf	(___ftsub@f2+2)& (0+255),b
  2853  0010A6  ECCA  F01C         	call	___ftsub	;wreg free
  2854  0010AA  C0AE  F119         	movff	?___ftsub,sortBattery@i
  2855  0010AE  C0AF  F11A         	movff	?___ftsub+1,sortBattery@i+1
  2856  0010B2  C0B0  F11B         	movff	?___ftsub+2,sortBattery@i+2
  2857  0010B6                     l7347:
  2858  0010B6  C0EE  F02B         	movff	_padAngle_CLOSE,___awtoft@c
  2859  0010BA  C0EF  F02C         	movff	_padAngle_CLOSE+1,___awtoft@c+1
  2860  0010BE  EC9A  F01D         	call	___awtoft	;wreg free
  2861  0010C2  C02B  F02F         	movff	?___awtoft,___ftge@ff1
  2862  0010C6  C02C  F030         	movff	?___awtoft+1,___ftge@ff1+1
  2863  0010CA  C02D  F031         	movff	?___awtoft+2,___ftge@ff1+2
  2864  0010CE  C119  F032         	movff	sortBattery@i,___ftge@ff2
  2865  0010D2  C11A  F033         	movff	sortBattery@i+1,___ftge@ff2+1
  2866  0010D6  C11B  F034         	movff	sortBattery@i+2,___ftge@ff2+2
  2867  0010DA  EC3A  F019         	call	___ftge	;wreg free
  2868  0010DE  A0D8               	btfss	status,0,c
  2869  0010E0  D6F4               	goto	l7321
  2870                           
  2871                           ;main.c: 249: }
  2872                           ;main.c: 250: }
  2873                           ;main.c: 252: int targetAngle;
  2874                           ;main.c: 253: float V = V_max;
  2875  0010E2  C10F  F11C         	movff	sortBattery@V_max,sortBattery@V_312
  2876  0010E6  C110  F11D         	movff	sortBattery@V_max+1,sortBattery@V_312+1
  2877  0010EA  C111  F11E         	movff	sortBattery@V_max+2,sortBattery@V_312+2
  2878                           
  2879                           ;main.c: 255: lcdClear();
  2880  0010EE  EC97  F01E         	call	_lcdClear	;wreg free
  2881                           
  2882                           ;main.c: 256: printf("N: %d,\nV: %.3f",pos_v_counter, V);
  2883  0010F2  0EC5               	movlw	low STR_9
  2884  0010F4  0100               	movlb	0	; () banked
  2885  0010F6  6FBD               	movwf	printf@f& (0+255),b
  2886  0010F8  0EFF               	movlw	high STR_9
  2887  0010FA  0100               	movlb	0	; () banked
  2888  0010FC  6FBE               	movwf	(printf@f+1)& (0+255),b
  2889  0010FE  C105  F0BF         	movff	sortBattery@pos_v_counter,?_printf+2
  2890  001102  C106  F0C0         	movff	sortBattery@pos_v_counter+1,?_printf+3
  2891  001106  C11C  F0C1         	movff	sortBattery@V_312,?_printf+4
  2892  00110A  C11D  F0C2         	movff	sortBattery@V_312+1,?_printf+5
  2893  00110E  C11E  F0C3         	movff	sortBattery@V_312+2,?_printf+6
  2894  001112  EC09  F000         	call	_printf	;wreg free
  2895                           
  2896                           ;main.c: 258: readKeypad();
  2897  001116  ECFE  F01D         	call	_readKeypad	;wreg free
  2898                           
  2899                           ;main.c: 262: switch(signal){
  2900  00111A  D060               	goto	l7383
  2901  00111C                     l7355:
  2902                           
  2903                           ;main.c: 264: if(V_float < 0.1){
  2904  00111C  C102  F02F         	movff	sortBattery@V_float,___ftge@ff1
  2905  001120  C103  F030         	movff	sortBattery@V_float+1,___ftge@ff1+1
  2906  001124  C104  F031         	movff	sortBattery@V_float+2,___ftge@ff1+2
  2907  001128  0ECD               	movlw	205
  2908  00112A  6E32               	movwf	___ftge@ff2,c
  2909  00112C  0ECC               	movlw	204
  2910  00112E  6E33               	movwf	___ftge@ff2+1,c
  2911  001130  0E3D               	movlw	61
  2912  001132  6E34               	movwf	___ftge@ff2+2,c
  2913  001134  EC3A  F019         	call	___ftge	;wreg free
  2914  001138  B0D8               	btfsc	status,0,c
  2915  00113A  D018               	goto	l7365
  2916                           
  2917                           ;main.c: 265: if(V > V_LIM_AA){ targetAngle = redirectAngle_AA; n_AA+=1;}
  2918  00113C  C03E  F02F         	movff	_V_LIM_AA,___ftge@ff1
  2919  001140  C03F  F030         	movff	_V_LIM_AA+1,___ftge@ff1+1
  2920  001144  C040  F031         	movff	_V_LIM_AA+2,___ftge@ff1+2
  2921  001148  C11C  F032         	movff	sortBattery@V_312,___ftge@ff2
  2922  00114C  C11D  F033         	movff	sortBattery@V_312+1,___ftge@ff2+1
  2923  001150  C11E  F034         	movff	sortBattery@V_312+2,___ftge@ff2+2
  2924  001154  EC3A  F019         	call	___ftge	;wreg free
  2925  001158  B0D8               	btfsc	status,0,c
  2926  00115A  D038               	goto	l191
  2927  00115C  C15A  F114         	movff	_redirectAngle_AA,sortBattery@targetAngle
  2928  001160  C15B  F115         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  2929  001164  0101               	movlb	1	; () banked
  2930  001166  4B50               	infsnz	_n_AA& (0+255),f,b
  2931  001168  2B51               	incf	(_n_AA+1)& (0+255),f,b
  2932  00116A  D04C               	goto	l7385
  2933  00116C                     l7365:
  2934                           
  2935                           ;main.c: 271: if(V > V_LIM_9V) {targetAngle = redirectAngle_9V; n_9V+=1;}
  2936  00116C  C03B  F02F         	movff	_V_LIM_9V,___ftge@ff1
  2937  001170  C03C  F030         	movff	_V_LIM_9V+1,___ftge@ff1+1
  2938  001174  C03D  F031         	movff	_V_LIM_9V+2,___ftge@ff1+2
  2939  001178  C11C  F032         	movff	sortBattery@V_312,___ftge@ff2
  2940  00117C  C11D  F033         	movff	sortBattery@V_312+1,___ftge@ff2+1
  2941  001180  C11E  F034         	movff	sortBattery@V_312+2,___ftge@ff2+2
  2942  001184  EC3A  F019         	call	___ftge	;wreg free
  2943  001188  B0D8               	btfsc	status,0,c
  2944  00118A  D020               	goto	l191
  2945  00118C  C048  F114         	movff	_redirectAngle_9V,sortBattery@targetAngle
  2946  001190  C049  F115         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  2947  001194  0101               	movlb	1	; () banked
  2948  001196  4B4E               	infsnz	_n_9V& (0+255),f,b
  2949  001198  2B4F               	incf	(_n_9V+1)& (0+255),f,b
  2950  00119A  D034               	goto	l7385
  2951  00119C                     l7373:
  2952                           
  2953                           ;main.c: 275: if(V > V_LIM_C) {targetAngle = redirectAngle_C; n_C+=1;}
  2954  00119C  C041  F02F         	movff	_V_LIM_C,___ftge@ff1
  2955  0011A0  C042  F030         	movff	_V_LIM_C+1,___ftge@ff1+1
  2956  0011A4  C043  F031         	movff	_V_LIM_C+2,___ftge@ff1+2
  2957  0011A8  C11C  F032         	movff	sortBattery@V_312,___ftge@ff2
  2958  0011AC  C11D  F033         	movff	sortBattery@V_312+1,___ftge@ff2+1
  2959  0011B0  C11E  F034         	movff	sortBattery@V_312+2,___ftge@ff2+2
  2960  0011B4  EC3A  F019         	call	___ftge	;wreg free
  2961  0011B8  B0D8               	btfsc	status,0,c
  2962  0011BA  D008               	goto	l191
  2963  0011BC  C0F0  F114         	movff	_redirectAngle_C,sortBattery@targetAngle
  2964  0011C0  C0F1  F115         	movff	_redirectAngle_C+1,sortBattery@targetAngle+1
  2965  0011C4  0101               	movlb	1	; () banked
  2966  0011C6  4B52               	infsnz	_n_C& (0+255),f,b
  2967  0011C8  2B53               	incf	(_n_C+1)& (0+255),f,b
  2968  0011CA  D01C               	goto	l7385
  2969  0011CC                     l191:
  2970                           
  2971                           ;main.c: 276: else {targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  2972  0011CC  C0F2  F114         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  2973  0011D0  C0F3  F115         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  2974  0011D4  0101               	movlb	1	; () banked
  2975  0011D6  4B54               	infsnz	_n_OTHER& (0+255),f,b
  2976  0011D8  2B55               	incf	(_n_OTHER+1)& (0+255),f,b
  2977                           
  2978                           ; BSR set to: 1
  2979                           ;main.c: 278: }
  2980                           
  2981                           ; BSR set to: 1
  2982                           ;main.c: 277: break;
  2983  0011DA  D014               	goto	l7385
  2984  0011DC                     l7383:
  2985  0011DC  C107  F0EB         	movff	sortBattery@signal,??_sortBattery
  2986  0011E0  C108  F0EC         	movff	sortBattery@signal+1,??_sortBattery+1
  2987                           
  2988                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2989                           ; Switch size 1, requested type "space"
  2990                           ; Number of cases is 1, Range of values is 0 to 0
  2991                           ; switch strategies available:
  2992                           ; Name         Instructions Cycles
  2993                           ; simple_byte            4     3 (average)
  2994                           ;	Chosen strategy is simple_byte
  2995  0011E4  0100               	movlb	0	; () banked
  2996  0011E6  51EC               	movf	(??_sortBattery+1)& (0+255),w,b
  2997  0011E8  0A00               	xorlw	0	; case 0
  2998  0011EA  A4D8               	btfss	status,2,c
  2999  0011EC  D00B               	goto	l7385
  3000                           
  3001                           ; BSR set to: 0
  3002                           ; Switch size 1, requested type "space"
  3003                           ; Number of cases is 3, Range of values is 0 to 2
  3004                           ; switch strategies available:
  3005                           ; Name         Instructions Cycles
  3006                           ; simple_byte           10     6 (average)
  3007                           ;	Chosen strategy is simple_byte
  3008  0011EE  0100               	movlb	0	; () banked
  3009  0011F0  51EB               	movf	??_sortBattery& (0+255),w,b
  3010  0011F2  0A00               	xorlw	0	; case 0
  3011  0011F4  B4D8               	btfsc	status,2,c
  3012  0011F6  D792               	goto	l7355
  3013  0011F8  0A01               	xorlw	1	; case 1
  3014  0011FA  B4D8               	btfsc	status,2,c
  3015  0011FC  D7CF               	goto	l7373
  3016  0011FE  0A03               	xorlw	3	; case 2
  3017  001200  B4D8               	btfsc	status,2,c
  3018  001202  D7B4               	goto	l7365
  3019  001204                     l7385:
  3020                           
  3021                           ;main.c: 280: setAngle(redirectingServo, targetAngle);
  3022  001204  0E72               	movlw	low _redirectingServo
  3023  001206  0100               	movlb	0	; () banked
  3024  001208  6FD4               	movwf	setAngle@motor& (0+255),b
  3025  00120A  0E01               	movlw	high _redirectingServo
  3026  00120C  0100               	movlb	0	; () banked
  3027  00120E  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3028  001210  C114  F0D6         	movff	sortBattery@targetAngle,setAngle@angle
  3029  001214  C115  F0D7         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  3030  001218  ECAC  F016         	call	_setAngle	;wreg free
  3031                           
  3032                           ;main.c: 281: _delay((unsigned long)((500)*(10000000/4000.0)));
  3033  00121C  0E07               	movlw	7
  3034  00121E  0100               	movlb	0	; () banked
  3035  001220  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  3036  001222  0E58               	movlw	88
  3037  001224  0100               	movlb	0	; () banked
  3038  001226  6FEB               	movwf	??_sortBattery& (0+255),b
  3039  001228  0E59               	movlw	89
  3040  00122A                     u8187:
  3041  00122A  2EE8               	decfsz	wreg,f,c
  3042  00122C  D7FE               	bra	u8187
  3043  00122E  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  3044  001230  D7FC               	bra	u8187
  3045  001232  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  3046  001234  D7FA               	bra	u8187
  3047  001236  D000               	nop2	
  3048                           
  3049                           ;main.c: 285: for(int i = padAngle_CLOSE; i < padAngle_OPEN; i++) {
  3050  001238  C0EE  F112         	movff	_padAngle_CLOSE,sortBattery@i_314
  3051  00123C  C0EF  F113         	movff	_padAngle_CLOSE+1,sortBattery@i_314+1
  3052  001240  D018               	goto	l7397
  3053  001242                     l7391:
  3054                           
  3055                           ;main.c: 286: setAngle(padServo, i);
  3056  001242  0E6E               	movlw	low _padServo
  3057  001244  0100               	movlb	0	; () banked
  3058  001246  6FD4               	movwf	setAngle@motor& (0+255),b
  3059  001248  0E01               	movlw	high _padServo
  3060  00124A  0100               	movlb	0	; () banked
  3061  00124C  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3062  00124E  C112  F0D6         	movff	sortBattery@i_314,setAngle@angle
  3063  001252  C113  F0D7         	movff	sortBattery@i_314+1,setAngle@angle+1
  3064  001256  ECAC  F016         	call	_setAngle	;wreg free
  3065                           
  3066                           ;main.c: 287: _delay((unsigned long)((3)*(10000000/4000.0)));
  3067  00125A  0E0A               	movlw	10
  3068  00125C  0100               	movlb	0	; () banked
  3069  00125E  6FEB               	movwf	??_sortBattery& (0+255),b
  3070  001260  0EBC               	movlw	188
  3071  001262                     u8197:
  3072  001262  2EE8               	decfsz	wreg,f,c
  3073  001264  D7FE               	bra	u8197
  3074  001266  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  3075  001268  D7FC               	bra	u8197
  3076  00126A  F000               	nop	
  3077  00126C  0101               	movlb	1	; () banked
  3078  00126E  4B12               	infsnz	sortBattery@i_314& (0+255),f,b
  3079  001270  2B13               	incf	(sortBattery@i_314+1)& (0+255),f,b
  3080  001272                     l7397:
  3081  001272  5046               	movf	_padAngle_OPEN,w,c
  3082  001274  0101               	movlb	1	; () banked
  3083  001276  5D12               	subwf	sortBattery@i_314& (0+255),w,b
  3084  001278  0101               	movlb	1	; () banked
  3085  00127A  5113               	movf	(sortBattery@i_314+1)& (0+255),w,b
  3086  00127C  0A80               	xorlw	128
  3087  00127E  0100               	movlb	0	; () banked
  3088  001280  6FEB               	movwf	??_sortBattery& (0+255),b
  3089  001282  5047               	movf	_padAngle_OPEN+1,w,c
  3090  001284  0A80               	xorlw	128
  3091  001286  0100               	movlb	0	; () banked
  3092  001288  59EB               	subwfb	??_sortBattery& (0+255),w,b
  3093  00128A  A0D8               	btfss	status,0,c
  3094  00128C  D7DA               	goto	l7391
  3095                           
  3096                           ; BSR set to: 0
  3097                           ;main.c: 288: }
  3098                           ;main.c: 290: _delay((unsigned long)((1000)*(10000000/4000.0)));
  3099                           
  3100                           ; BSR set to: 0
  3101  00128E  0E0D               	movlw	13
  3102  001290  0100               	movlb	0	; () banked
  3103  001292  6FEC               	movwf	(??_sortBattery+1)& (0+255),b
  3104  001294  0EAF               	movlw	175
  3105  001296  0100               	movlb	0	; () banked
  3106  001298  6FEB               	movwf	??_sortBattery& (0+255),b
  3107  00129A  0EB6               	movlw	182
  3108  00129C                     u8207:
  3109  00129C  2EE8               	decfsz	wreg,f,c
  3110  00129E  D7FE               	bra	u8207
  3111  0012A0  2FEB               	decfsz	??_sortBattery& (0+255),f,b
  3112  0012A2  D7FC               	bra	u8207
  3113  0012A4  2FEC               	decfsz	(??_sortBattery+1)& (0+255),f,b
  3114  0012A6  D7FA               	bra	u8207
  3115  0012A8  F000               	nop	
  3116                           
  3117                           ;main.c: 294: setAngle(padServo, padAngle_NEUTRAL);
  3118  0012AA  0E6E               	movlw	low _padServo
  3119  0012AC  0100               	movlb	0	; () banked
  3120  0012AE  6FD4               	movwf	setAngle@motor& (0+255),b
  3121  0012B0  0E01               	movlw	high _padServo
  3122  0012B2  0100               	movlb	0	; () banked
  3123  0012B4  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3124  0012B6  C158  F0D6         	movff	_padAngle_NEUTRAL,setAngle@angle
  3125  0012BA  C159  F0D7         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  3126  0012BE  ECAC  F016         	call	_setAngle	;wreg free
  3127                           
  3128                           ;main.c: 298: setAngle(conveyorServo, 130);
  3129  0012C2  0E5E               	movlw	low _conveyorServo
  3130  0012C4  0100               	movlb	0	; () banked
  3131  0012C6  6FD4               	movwf	setAngle@motor& (0+255),b
  3132  0012C8  0E01               	movlw	high _conveyorServo
  3133  0012CA  0100               	movlb	0	; () banked
  3134  0012CC  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3135  0012CE  0E00               	movlw	0
  3136  0012D0  0100               	movlb	0	; () banked
  3137  0012D2  6FD7               	movwf	(setAngle@angle+1)& (0+255),b
  3138  0012D4  0E82               	movlw	130
  3139  0012D6  6FD6               	movwf	setAngle@angle& (0+255),b
  3140  0012D8  ECAC  F016         	call	_setAngle	;wreg free
  3141                           
  3142                           ;main.c: 299: digitalWrite(cylinderMotor, 1);
  3143  0012DC  0E66               	movlw	low _cylinderMotor
  3144  0012DE  6E23               	movwf	digitalWrite@pin,c
  3145  0012E0  0E01               	movlw	high _cylinderMotor
  3146  0012E2  6E24               	movwf	digitalWrite@pin+1,c
  3147  0012E4  0E00               	movlw	0
  3148  0012E6  6E26               	movwf	digitalWrite@val+1,c
  3149  0012E8  0E01               	movlw	1
  3150  0012EA  6E25               	movwf	digitalWrite@val,c
  3151  0012EC  EC7C  F017         	call	_digitalWrite	;wreg free
  3152  0012F0  0012               	return		;funcret
  3153  0012F2                     __end_of_sortBattery:
  3154                           	opt stack 0
  3155                           tblptru	equ	0xFF8
  3156                           tblptrh	equ	0xFF7
  3157                           tblptrl	equ	0xFF6
  3158                           tablat	equ	0xFF5
  3159                           postinc0	equ	0xFEE
  3160                           wreg	equ	0xFE8
  3161                           postdec1	equ	0xFE5
  3162                           fsr1l	equ	0xFE1
  3163                           status	equ	0xFD8
  3164                           
  3165 ;; *************** function _digitalWrite *****************
  3166 ;; Defined at:
  3167 ;;		line 53 in file "iopin.c"
  3168 ;; Parameters:    Size  Location     Type
  3169 ;;  pin             2   34[COMRAM] PTR int 
  3170 ;;		 -> AA_float(4), cylinderDir(4), redirectingServo(4), padServo(4), 
  3171 ;;		 -> conveyorServo(4), cylinderMotor(4), 
  3172 ;;  val             2   36[COMRAM] int 
  3173 ;; Auto vars:     Size  Location     Type
  3174 ;;  p               2   41[COMRAM] int 
  3175 ;; Return value:  Size  Location     Type
  3176 ;;                  1    wreg      void 
  3177 ;; Registers used:
  3178 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3179 ;; Tracked objects:
  3180 ;;		On entry : 0/0
  3181 ;;		On exit  : 0/0
  3182 ;;		Unchanged: 0/0
  3183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3184 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3185 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3186 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3187 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3188 ;;Total ram usage:        9 bytes
  3189 ;; Hardware stack levels used:    1
  3190 ;; Hardware stack levels required when called:    3
  3191 ;; This function calls:
  3192 ;;		Nothing
  3193 ;; This function is called by:
  3194 ;;		_main
  3195 ;;		_sortBattery
  3196 ;; This function uses a non-reentrant model
  3197 ;;
  3198                           
  3199                           	psect	text2
  3200  002EF8                     __ptext2:
  3201                           	opt stack 0
  3202  002EF8                     _digitalWrite:
  3203                           	opt stack 26
  3204                           
  3205                           ;iopin.c: 54: if(pin){
  3206                           
  3207                           ;incstack = 0
  3208  002EF8  5023               	movf	digitalWrite@pin,w,c
  3209  002EFA  1024               	iorwf	digitalWrite@pin+1,w,c
  3210  002EFC  B4D8               	btfsc	status,2,c
  3211  002EFE  0012               	return	
  3212                           
  3213                           ;iopin.c: 55: int p = 1 << pin[1];
  3214  002F00  EE20 F002          	lfsr	2,2
  3215  002F04  5023               	movf	digitalWrite@pin,w,c
  3216  002F06  26D9               	addwf	fsr2l,f,c
  3217  002F08  5024               	movf	digitalWrite@pin+1,w,c
  3218  002F0A  22DA               	addwfc	fsr2h,f,c
  3219  002F0C  50DF               	movf	indf2,w,c
  3220  002F0E  6E27               	movwf	??_digitalWrite& (0+255),c
  3221  002F10  0E01               	movlw	1
  3222  002F12  6E28               	movwf	(??_digitalWrite+1)& (0+255),c
  3223  002F14  0E00               	movlw	0
  3224  002F16  6E29               	movwf	(??_digitalWrite+2)& (0+255),c
  3225  002F18  2A27               	incf	??_digitalWrite,f,c
  3226  002F1A  D003               	goto	u7504
  3227  002F1C                     u7505:
  3228  002F1C  90D8               	bcf	status,0,c
  3229  002F1E  3628               	rlcf	??_digitalWrite+1,f,c
  3230  002F20  3629               	rlcf	??_digitalWrite+2,f,c
  3231  002F22                     u7504:
  3232  002F22  2E27               	decfsz	??_digitalWrite,f,c
  3233  002F24  D7FB               	goto	u7505
  3234  002F26  C028  F02A         	movff	??_digitalWrite+1,digitalWrite@p
  3235  002F2A  C029  F02B         	movff	??_digitalWrite+2,digitalWrite@p+1
  3236                           
  3237                           ;iopin.c: 56: if(val == 0){
  3238  002F2E  5025               	movf	digitalWrite@val,w,c
  3239  002F30  1026               	iorwf	digitalWrite@val+1,w,c
  3240  002F32  A4D8               	btfss	status,2,c
  3241  002F34  D02B               	goto	l7043
  3242                           
  3243                           ;iopin.c: 57: p ^= 0xff;
  3244  002F36  0EFF               	movlw	255
  3245  002F38  1A2A               	xorwf	digitalWrite@p,f,c
  3246                           
  3247                           ;iopin.c: 58: }
  3248                           ;iopin.c: 60: switch(pin[0]){
  3249  002F3A  D028               	goto	l7043
  3250  002F3C                     l7019:
  3251  002F3C  0425               	decf	digitalWrite@val,w,c
  3252  002F3E  1026               	iorwf	digitalWrite@val+1,w,c
  3253  002F40  A4D8               	btfss	status,2,c
  3254  002F42  D003               	goto	l7023
  3255  002F44  502A               	movf	digitalWrite@p,w,c
  3256  002F46  1289               	iorwf	3977,f,c	;volatile
  3257  002F48  0012               	return	
  3258  002F4A                     l7023:
  3259                           
  3260                           ;iopin.c: 62: else LATA &= p;
  3261  002F4A  502A               	movf	digitalWrite@p,w,c
  3262  002F4C  1689               	andwf	3977,f,c	;volatile
  3263                           
  3264                           ;iopin.c: 63: break;
  3265  002F4E  0012               	return	
  3266  002F50                     l7025:
  3267  002F50  0425               	decf	digitalWrite@val,w,c
  3268  002F52  1026               	iorwf	digitalWrite@val+1,w,c
  3269  002F54  A4D8               	btfss	status,2,c
  3270  002F56  D003               	goto	l7029
  3271  002F58  502A               	movf	digitalWrite@p,w,c
  3272  002F5A  128A               	iorwf	3978,f,c	;volatile
  3273  002F5C  0012               	return	
  3274  002F5E                     l7029:
  3275                           
  3276                           ;iopin.c: 65: else LATB &= p;
  3277  002F5E  502A               	movf	digitalWrite@p,w,c
  3278  002F60  168A               	andwf	3978,f,c	;volatile
  3279                           
  3280                           ;iopin.c: 66: break;
  3281  002F62  0012               	return	
  3282  002F64                     l7031:
  3283  002F64  0425               	decf	digitalWrite@val,w,c
  3284  002F66  1026               	iorwf	digitalWrite@val+1,w,c
  3285  002F68  A4D8               	btfss	status,2,c
  3286  002F6A  D003               	goto	l7035
  3287  002F6C  502A               	movf	digitalWrite@p,w,c
  3288  002F6E  128B               	iorwf	3979,f,c	;volatile
  3289  002F70  0012               	return	
  3290  002F72                     l7035:
  3291                           
  3292                           ;iopin.c: 68: else LATC &= p;
  3293  002F72  502A               	movf	digitalWrite@p,w,c
  3294  002F74  168B               	andwf	3979,f,c	;volatile
  3295                           
  3296                           ;iopin.c: 69: break;
  3297  002F76  0012               	return	
  3298  002F78                     l7037:
  3299  002F78  0425               	decf	digitalWrite@val,w,c
  3300  002F7A  1026               	iorwf	digitalWrite@val+1,w,c
  3301  002F7C  A4D8               	btfss	status,2,c
  3302  002F7E  D003               	goto	l7041
  3303  002F80  502A               	movf	digitalWrite@p,w,c
  3304  002F82  128C               	iorwf	3980,f,c	;volatile
  3305  002F84  0012               	return	
  3306  002F86                     l7041:
  3307                           
  3308                           ;iopin.c: 71: else LATD &= p;
  3309  002F86  502A               	movf	digitalWrite@p,w,c
  3310  002F88  168C               	andwf	3980,f,c	;volatile
  3311                           
  3312                           ;iopin.c: 72: }
  3313  002F8A  0012               	return	
  3314  002F8C                     l7043:
  3315  002F8C  C023  FFD9         	movff	digitalWrite@pin,fsr2l
  3316  002F90  C024  FFDA         	movff	digitalWrite@pin+1,fsr2h
  3317  002F94  CFDE F027          	movff	postinc2,??_digitalWrite
  3318  002F98  CFDD F028          	movff	postdec2,??_digitalWrite+1
  3319                           
  3320                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3321                           ; Switch size 1, requested type "space"
  3322                           ; Number of cases is 1, Range of values is 0 to 0
  3323                           ; switch strategies available:
  3324                           ; Name         Instructions Cycles
  3325                           ; simple_byte            4     3 (average)
  3326                           ;	Chosen strategy is simple_byte
  3327  002F9C  5028               	movf	??_digitalWrite+1,w,c
  3328  002F9E  0A00               	xorlw	0	; case 0
  3329  002FA0  A4D8               	btfss	status,2,c
  3330  002FA2  0012               	return	
  3331                           
  3332                           ; Switch size 1, requested type "space"
  3333                           ; Number of cases is 4, Range of values is 0 to 3
  3334                           ; switch strategies available:
  3335                           ; Name         Instructions Cycles
  3336                           ; simple_byte           13     7 (average)
  3337                           ;	Chosen strategy is simple_byte
  3338  002FA4  5027               	movf	??_digitalWrite,w,c
  3339  002FA6  0A00               	xorlw	0	; case 0
  3340  002FA8  B4D8               	btfsc	status,2,c
  3341  002FAA  D7C8               	goto	l7019
  3342  002FAC  0A01               	xorlw	1	; case 1
  3343  002FAE  B4D8               	btfsc	status,2,c
  3344  002FB0  D7CF               	goto	l7025
  3345  002FB2  0A03               	xorlw	3	; case 2
  3346  002FB4  B4D8               	btfsc	status,2,c
  3347  002FB6  D7D6               	goto	l7031
  3348  002FB8  0A01               	xorlw	1	; case 3
  3349  002FBA  A4D8               	btfss	status,2,c
  3350  002FBC  0012               	return	
  3351  002FBE  D7DC               	goto	l7037
  3352  002FC0                     __end_of_digitalWrite:
  3353                           	opt stack 0
  3354                           tblptru	equ	0xFF8
  3355                           tblptrh	equ	0xFF7
  3356                           tblptrl	equ	0xFF6
  3357                           tablat	equ	0xFF5
  3358                           postinc0	equ	0xFEE
  3359                           wreg	equ	0xFE8
  3360                           postdec1	equ	0xFE5
  3361                           fsr1l	equ	0xFE1
  3362                           indf2	equ	0xFDF
  3363                           postinc2	equ	0xFDE
  3364                           postdec2	equ	0xFDD
  3365                           fsr2h	equ	0xFDA
  3366                           fsr2l	equ	0xFD9
  3367                           status	equ	0xFD8
  3368                           
  3369 ;; *************** function _digitalRead *****************
  3370 ;; Defined at:
  3371 ;;		line 43 in file "iopin.c"
  3372 ;; Parameters:    Size  Location     Type
  3373 ;;  pin             2   34[COMRAM] PTR int 
  3374 ;;		 -> padPin2(4), padPin1(4), cylinderDir(4), 
  3375 ;; Auto vars:     Size  Location     Type
  3376 ;;		None
  3377 ;; Return value:  Size  Location     Type
  3378 ;;                  2   34[COMRAM] int 
  3379 ;; Registers used:
  3380 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3381 ;; Tracked objects:
  3382 ;;		On entry : 0/0
  3383 ;;		On exit  : 0/0
  3384 ;;		Unchanged: 0/0
  3385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3386 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3388 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3389 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3390 ;;Total ram usage:        4 bytes
  3391 ;; Hardware stack levels used:    1
  3392 ;; Hardware stack levels required when called:    3
  3393 ;; This function calls:
  3394 ;;		Nothing
  3395 ;; This function is called by:
  3396 ;;		_main
  3397 ;;		_sortBattery
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401                           	psect	text3
  3402  0029C0                     __ptext3:
  3403                           	opt stack 0
  3404  0029C0                     _digitalRead:
  3405                           	opt stack 26
  3406                           
  3407                           ;iopin.c: 44: switch(pin[0]){
  3408                           
  3409                           ;incstack = 0
  3410  0029C0  D058               	goto	l7069
  3411  0029C2                     l7051:
  3412  0029C2  EE20 F002          	lfsr	2,2
  3413  0029C6  5023               	movf	digitalRead@pin,w,c
  3414  0029C8  26D9               	addwf	fsr2l,f,c
  3415  0029CA  5024               	movf	digitalRead@pin+1,w,c
  3416  0029CC  22DA               	addwfc	fsr2h,f,c
  3417  0029CE  50DF               	movf	indf2,w,c
  3418  0029D0  6E25               	movwf	??_digitalRead& (0+255),c
  3419  0029D2  CF80 F026          	movff	3968,??_digitalRead+1	;volatile
  3420  0029D6  2A25               	incf	??_digitalRead,f,c
  3421  0029D8  D002               	goto	u7564
  3422  0029DA                     u7565:
  3423  0029DA  90D8               	bcf	status,0,c
  3424  0029DC  3226               	rrcf	??_digitalRead+1,f,c
  3425  0029DE                     u7564:
  3426  0029DE  2E25               	decfsz	??_digitalRead,f,c
  3427  0029E0  D7FC               	goto	u7565
  3428  0029E2  0E01               	movlw	1
  3429  0029E4  1626               	andwf	??_digitalRead+1,f,c
  3430  0029E6  5026               	movf	??_digitalRead+1,w,c
  3431  0029E8  6E23               	movwf	?_digitalRead,c
  3432  0029EA  6A24               	clrf	?_digitalRead+1,c
  3433  0029EC  0012               	return	
  3434  0029EE                     l7055:
  3435  0029EE  EE20 F002          	lfsr	2,2
  3436  0029F2  5023               	movf	digitalRead@pin,w,c
  3437  0029F4  26D9               	addwf	fsr2l,f,c
  3438  0029F6  5024               	movf	digitalRead@pin+1,w,c
  3439  0029F8  22DA               	addwfc	fsr2h,f,c
  3440  0029FA  50DF               	movf	indf2,w,c
  3441  0029FC  6E25               	movwf	??_digitalRead& (0+255),c
  3442  0029FE  CF81 F026          	movff	3969,??_digitalRead+1	;volatile
  3443  002A02  2A25               	incf	??_digitalRead,f,c
  3444  002A04  D002               	goto	u7574
  3445  002A06                     u7575:
  3446  002A06  90D8               	bcf	status,0,c
  3447  002A08  3226               	rrcf	??_digitalRead+1,f,c
  3448  002A0A                     u7574:
  3449  002A0A  2E25               	decfsz	??_digitalRead,f,c
  3450  002A0C  D7FC               	goto	u7575
  3451  002A0E  0E01               	movlw	1
  3452  002A10  1626               	andwf	??_digitalRead+1,f,c
  3453  002A12  5026               	movf	??_digitalRead+1,w,c
  3454  002A14  6E23               	movwf	?_digitalRead,c
  3455  002A16  6A24               	clrf	?_digitalRead+1,c
  3456  002A18  0012               	return	
  3457  002A1A                     l7059:
  3458  002A1A  EE20 F002          	lfsr	2,2
  3459  002A1E  5023               	movf	digitalRead@pin,w,c
  3460  002A20  26D9               	addwf	fsr2l,f,c
  3461  002A22  5024               	movf	digitalRead@pin+1,w,c
  3462  002A24  22DA               	addwfc	fsr2h,f,c
  3463  002A26  50DF               	movf	indf2,w,c
  3464  002A28  6E25               	movwf	??_digitalRead& (0+255),c
  3465  002A2A  CF82 F026          	movff	3970,??_digitalRead+1	;volatile
  3466  002A2E  2A25               	incf	??_digitalRead,f,c
  3467  002A30  D002               	goto	u7584
  3468  002A32                     u7585:
  3469  002A32  90D8               	bcf	status,0,c
  3470  002A34  3226               	rrcf	??_digitalRead+1,f,c
  3471  002A36                     u7584:
  3472  002A36  2E25               	decfsz	??_digitalRead,f,c
  3473  002A38  D7FC               	goto	u7585
  3474  002A3A  0E01               	movlw	1
  3475  002A3C  1626               	andwf	??_digitalRead+1,f,c
  3476  002A3E  5026               	movf	??_digitalRead+1,w,c
  3477  002A40  6E23               	movwf	?_digitalRead,c
  3478  002A42  6A24               	clrf	?_digitalRead+1,c
  3479  002A44  0012               	return	
  3480  002A46                     l7063:
  3481  002A46  EE20 F002          	lfsr	2,2
  3482  002A4A  5023               	movf	digitalRead@pin,w,c
  3483  002A4C  26D9               	addwf	fsr2l,f,c
  3484  002A4E  5024               	movf	digitalRead@pin+1,w,c
  3485  002A50  22DA               	addwfc	fsr2h,f,c
  3486  002A52  50DF               	movf	indf2,w,c
  3487  002A54  6E25               	movwf	??_digitalRead& (0+255),c
  3488  002A56  CF83 F026          	movff	3971,??_digitalRead+1	;volatile
  3489  002A5A  2A25               	incf	??_digitalRead,f,c
  3490  002A5C  D002               	goto	u7594
  3491  002A5E                     u7595:
  3492  002A5E  90D8               	bcf	status,0,c
  3493  002A60  3226               	rrcf	??_digitalRead+1,f,c
  3494  002A62                     u7594:
  3495  002A62  2E25               	decfsz	??_digitalRead,f,c
  3496  002A64  D7FC               	goto	u7595
  3497  002A66  0E01               	movlw	1
  3498  002A68  1626               	andwf	??_digitalRead+1,f,c
  3499  002A6A  5026               	movf	??_digitalRead+1,w,c
  3500  002A6C  6E23               	movwf	?_digitalRead,c
  3501  002A6E  6A24               	clrf	?_digitalRead+1,c
  3502  002A70  0012               	return	
  3503  002A72                     l7069:
  3504  002A72  C023  FFD9         	movff	digitalRead@pin,fsr2l
  3505  002A76  C024  FFDA         	movff	digitalRead@pin+1,fsr2h
  3506  002A7A  CFDE F025          	movff	postinc2,??_digitalRead
  3507  002A7E  CFDD F026          	movff	postdec2,??_digitalRead+1
  3508                           
  3509                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3510                           ; Switch size 1, requested type "space"
  3511                           ; Number of cases is 1, Range of values is 0 to 0
  3512                           ; switch strategies available:
  3513                           ; Name         Instructions Cycles
  3514                           ; simple_byte            4     3 (average)
  3515                           ;	Chosen strategy is simple_byte
  3516  002A82  5026               	movf	??_digitalRead+1,w,c
  3517  002A84  0A00               	xorlw	0	; case 0
  3518  002A86  A4D8               	btfss	status,2,c
  3519  002A88  D00D               	goto	l345
  3520                           
  3521                           ; Switch size 1, requested type "space"
  3522                           ; Number of cases is 4, Range of values is 0 to 3
  3523                           ; switch strategies available:
  3524                           ; Name         Instructions Cycles
  3525                           ; simple_byte           13     7 (average)
  3526                           ;	Chosen strategy is simple_byte
  3527  002A8A  5025               	movf	??_digitalRead,w,c
  3528  002A8C  0A00               	xorlw	0	; case 0
  3529  002A8E  B4D8               	btfsc	status,2,c
  3530  002A90  D798               	goto	l7051
  3531  002A92  0A01               	xorlw	1	; case 1
  3532  002A94  B4D8               	btfsc	status,2,c
  3533  002A96  D7AB               	goto	l7055
  3534  002A98  0A03               	xorlw	3	; case 2
  3535  002A9A  B4D8               	btfsc	status,2,c
  3536  002A9C  D7BE               	goto	l7059
  3537  002A9E  0A01               	xorlw	1	; case 3
  3538  002AA0  B4D8               	btfsc	status,2,c
  3539  002AA2  D7D1               	goto	l7063
  3540  002AA4                     l345:
  3541                           
  3542                           ;iopin.c: 50: return -1;
  3543  002AA4  6823               	setf	?_digitalRead,c
  3544  002AA6  6824               	setf	?_digitalRead+1,c
  3545  002AA8  0012               	return		;funcret
  3546  002AAA                     __end_of_digitalRead:
  3547                           	opt stack 0
  3548                           tblptru	equ	0xFF8
  3549                           tblptrh	equ	0xFF7
  3550                           tblptrl	equ	0xFF6
  3551                           tablat	equ	0xFF5
  3552                           postinc0	equ	0xFEE
  3553                           wreg	equ	0xFE8
  3554                           postdec1	equ	0xFE5
  3555                           fsr1l	equ	0xFE1
  3556                           indf2	equ	0xFDF
  3557                           postinc2	equ	0xFDE
  3558                           postdec2	equ	0xFDD
  3559                           fsr2h	equ	0xFDA
  3560                           fsr2l	equ	0xFD9
  3561                           status	equ	0xFD8
  3562                           
  3563 ;; *************** function _analogRead *****************
  3564 ;; Defined at:
  3565 ;;		line 90 in file "iopin.c"
  3566 ;; Parameters:    Size  Location     Type
  3567 ;;  channel         2   34[COMRAM] int 
  3568 ;; Auto vars:     Size  Location     Type
  3569 ;;		None
  3570 ;; Return value:  Size  Location     Type
  3571 ;;                  4   34[COMRAM] long 
  3572 ;; Registers used:
  3573 ;;		wreg, status,2, status,0
  3574 ;; Tracked objects:
  3575 ;;		On entry : 0/0
  3576 ;;		On exit  : 0/0
  3577 ;;		Unchanged: 0/0
  3578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3579 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3581 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3582 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3583 ;;Total ram usage:        6 bytes
  3584 ;; Hardware stack levels used:    1
  3585 ;; Hardware stack levels required when called:    3
  3586 ;; This function calls:
  3587 ;;		Nothing
  3588 ;; This function is called by:
  3589 ;;		_sortBattery
  3590 ;; This function uses a non-reentrant model
  3591 ;;
  3592                           
  3593                           	psect	text4
  3594  003AFC                     __ptext4:
  3595                           	opt stack 0
  3596  003AFC                     _analogRead:
  3597                           	opt stack 26
  3598                           
  3599                           ;iopin.c: 91: ADCON0 = channel<<2;
  3600                           
  3601                           ;incstack = 0
  3602  003AFC  4423               	rlncf	analogRead@channel,w,c
  3603  003AFE  46E8               	rlncf	wreg,f,c
  3604  003B00  0BFC               	andlw	252
  3605  003B02  6EC2               	movwf	4034,c	;volatile
  3606                           
  3607                           ;iopin.c: 92: ADCON0 |= 1<<0;
  3608  003B04  80C2               	bsf	4034,0,c	;volatile
  3609                           
  3610                           ;iopin.c: 93: ADCON0 |= 1<<1;
  3611  003B06  82C2               	bsf	4034,1,c	;volatile
  3612  003B08                     l370:
  3613  003B08  B2C2               	btfsc	4034,1,c	;volatile
  3614  003B0A  D7FE               	goto	l370
  3615                           
  3616                           ;iopin.c: 97: return (ADRESH<<8) + ADRESL;
  3617  003B0C  50C3               	movf	4035,w,c	;volatile
  3618  003B0E  CFC4 F027          	movff	4036,??_analogRead	;volatile
  3619  003B12  6A28               	clrf	(??_analogRead+1)& (0+255),c
  3620  003B14  C027  F028         	movff	??_analogRead,??_analogRead+1
  3621  003B18  6A27               	clrf	??_analogRead,c
  3622  003B1A  2627               	addwf	??_analogRead,f,c
  3623  003B1C  0E00               	movlw	0
  3624  003B1E  2228               	addwfc	??_analogRead+1,f,c
  3625  003B20  C027  F023         	movff	??_analogRead,?_analogRead
  3626  003B24  C028  F024         	movff	??_analogRead+1,?_analogRead+1
  3627  003B28  0E00               	movlw	0
  3628  003B2A  BE24               	btfsc	?_analogRead+1,7,c
  3629  003B2C  0EFF               	movlw	-1
  3630  003B2E  6E25               	movwf	?_analogRead+2,c
  3631  003B30  6E26               	movwf	?_analogRead+3,c
  3632  003B32  0012               	return	
  3633  003B34                     __end_of_analogRead:
  3634                           	opt stack 0
  3635                           tblptru	equ	0xFF8
  3636                           tblptrh	equ	0xFF7
  3637                           tblptrl	equ	0xFF6
  3638                           tablat	equ	0xFF5
  3639                           postinc0	equ	0xFEE
  3640                           wreg	equ	0xFE8
  3641                           postdec1	equ	0xFE5
  3642                           fsr1l	equ	0xFE1
  3643                           indf2	equ	0xFDF
  3644                           postinc2	equ	0xFDE
  3645                           postdec2	equ	0xFDD
  3646                           fsr2h	equ	0xFDA
  3647                           fsr2l	equ	0xFD9
  3648                           status	equ	0xFD8
  3649                           
  3650 ;; *************** function _showInterface *****************
  3651 ;; Defined at:
  3652 ;;		line 16 in file "interface.c"
  3653 ;; Parameters:    Size  Location     Type
  3654 ;;		None
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;  key             1  109[BANK0 ] unsigned char 
  3657 ;; Return value:  Size  Location     Type
  3658 ;;                  1    wreg      void 
  3659 ;; Registers used:
  3660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3661 ;; Tracked objects:
  3662 ;;		On entry : 0/0
  3663 ;;		On exit  : 0/0
  3664 ;;		Unchanged: 0/0
  3665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3667 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3669 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3670 ;;Total ram usage:        1 bytes
  3671 ;; Hardware stack levels used:    1
  3672 ;; Hardware stack levels required when called:    9
  3673 ;; This function calls:
  3674 ;;		_showDateTime
  3675 ;;		_showMainMenu
  3676 ;;		_showRunMenu
  3677 ;;		_showRunSelect
  3678 ;;		_showRunStats
  3679 ;;		_showRunTime
  3680 ;; This function is called by:
  3681 ;;		_main
  3682 ;; This function uses a non-reentrant model
  3683 ;;
  3684                           
  3685                           	psect	text5
  3686  0035EE                     __ptext5:
  3687                           	opt stack 0
  3688  0035EE                     _showInterface:
  3689                           	opt stack 21
  3690  0035EE                     
  3691                           ;interface.c: 22: showDateTime();
  3692  0035EE  ECE6  F01D         	call	_showDateTime	;wreg free
  3693  0035F2                     l632:
  3694                           
  3695                           ;interface.c: 25: key = showMainMenu();
  3696  0035F2  EC7C  F01C         	call	_showMainMenu	;wreg free
  3697  0035F6  0100               	movlb	0	; () banked
  3698  0035F8  6FED               	movwf	showInterface@key& (0+255),b
  3699                           
  3700                           ; BSR set to: 0
  3701                           ;interface.c: 27: if(key == 'C'){
  3702  0035FA  0E43               	movlw	67
  3703  0035FC  0100               	movlb	0	; () banked
  3704  0035FE  19ED               	xorwf	showInterface@key& (0+255),w,b
  3705  003600  A4D8               	btfss	status,2,c
  3706  003602  D01F               	goto	l7271
  3707                           
  3708                           ; BSR set to: 0
  3709                           ;interface.c: 30: key = showRunSelect();
  3710  003604  EC92  F01B         	call	_showRunSelect	;wreg free
  3711  003608  0100               	movlb	0	; () banked
  3712  00360A  6FED               	movwf	showInterface@key& (0+255),b
  3713  00360C                     l7253:
  3714                           
  3715                           ; BSR set to: 0
  3716                           ;interface.c: 32: if(key == '*')continue;
  3717  00360C  0E2A               	movlw	42
  3718  00360E  0100               	movlb	0	; () banked
  3719  003610  19ED               	xorwf	showInterface@key& (0+255),w,b
  3720  003612  B4D8               	btfsc	status,2,c
  3721  003614  D7EE               	goto	l632
  3722  003616                     l7257:
  3723                           
  3724                           ;interface.c: 37: key = showRunMenu(key);
  3725  003616  0100               	movlb	0	; () banked
  3726  003618  51ED               	movf	showInterface@key& (0+255),w,b
  3727  00361A  ECF5  F01B         	call	_showRunMenu
  3728  00361E  0100               	movlb	0	; () banked
  3729  003620  6FED               	movwf	showInterface@key& (0+255),b
  3730                           
  3731                           ; BSR set to: 0
  3732                           ;interface.c: 39: if(key == 'A') showRunTime();
  3733  003622  0E41               	movlw	65
  3734  003624  0100               	movlb	0	; () banked
  3735  003626  19ED               	xorwf	showInterface@key& (0+255),w,b
  3736  003628  A4D8               	btfss	status,2,c
  3737  00362A  D003               	goto	l7263
  3738                           
  3739                           ; BSR set to: 0
  3740  00362C  ECB6  F01D         	call	_showRunTime	;wreg free
  3741  003630  D7F2               	goto	l7257
  3742  003632                     l7263:
  3743                           
  3744                           ;interface.c: 40: else if(key == 'B') showRunStats();
  3745  003632  0E42               	movlw	66
  3746  003634  0100               	movlb	0	; () banked
  3747  003636  19ED               	xorwf	showInterface@key& (0+255),w,b
  3748  003638  A4D8               	btfss	status,2,c
  3749  00363A  D7E8               	goto	l7253
  3750                           
  3751                           ; BSR set to: 0
  3752  00363C  ECCE  F01D         	call	_showRunStats	;wreg free
  3753  003640  D7EA               	goto	l7257
  3754  003642                     l7271:
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;interface.c: 45: else if(key == 'B') return;
  3758  003642  0E42               	movlw	66
  3759  003644  0100               	movlb	0	; () banked
  3760  003646  19ED               	xorwf	showInterface@key& (0+255),w,b
  3761  003648  B4D8               	btfsc	status,2,c
  3762  00364A  0012               	return	
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;interface.c: 46: else if(key == '*') break;
  3766                           
  3767                           ; BSR set to: 0
  3768                           
  3769                           ; BSR set to: 0
  3770                           
  3771                           ; BSR set to: 0
  3772  00364C  0E2A               	movlw	42
  3773  00364E  0100               	movlb	0	; () banked
  3774  003650  19ED               	xorwf	showInterface@key& (0+255),w,b
  3775  003652  B4D8               	btfsc	status,2,c
  3776  003654  D7CC               	goto	l7247
  3777  003656  D7CD               	goto	l632
  3778  003658                     __end_of_showInterface:
  3779                           	opt stack 0
  3780                           tblptru	equ	0xFF8
  3781                           tblptrh	equ	0xFF7
  3782                           tblptrl	equ	0xFF6
  3783                           tablat	equ	0xFF5
  3784                           postinc0	equ	0xFEE
  3785                           wreg	equ	0xFE8
  3786                           postdec1	equ	0xFE5
  3787                           fsr1l	equ	0xFE1
  3788                           indf2	equ	0xFDF
  3789                           postinc2	equ	0xFDE
  3790                           postdec2	equ	0xFDD
  3791                           fsr2h	equ	0xFDA
  3792                           fsr2l	equ	0xFD9
  3793                           status	equ	0xFD8
  3794                           
  3795 ;; *************** function _showRunTime *****************
  3796 ;; Defined at:
  3797 ;;		line 105 in file "interface.c"
  3798 ;; Parameters:    Size  Location     Type
  3799 ;;		None
  3800 ;; Auto vars:     Size  Location     Type
  3801 ;;		None
  3802 ;; Return value:  Size  Location     Type
  3803 ;;                  1    wreg      unsigned char 
  3804 ;; Registers used:
  3805 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3806 ;; Tracked objects:
  3807 ;;		On entry : 0/0
  3808 ;;		On exit  : 0/0
  3809 ;;		Unchanged: 0/0
  3810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3815 ;;Total ram usage:        0 bytes
  3816 ;; Hardware stack levels used:    1
  3817 ;; Hardware stack levels required when called:    8
  3818 ;; This function calls:
  3819 ;;		_lcdClear
  3820 ;;		_printf
  3821 ;;		_readKeypad
  3822 ;; This function is called by:
  3823 ;;		_showInterface
  3824 ;; This function uses a non-reentrant model
  3825 ;;
  3826                           
  3827                           	psect	text6
  3828  003B6C                     __ptext6:
  3829                           	opt stack 0
  3830  003B6C                     _showRunTime:
  3831                           	opt stack 21
  3832                           
  3833                           ;interface.c: 106: lcdClear();
  3834                           
  3835                           ; BSR set to: 0
  3836                           ;incstack = 0
  3837  003B6C  EC97  F01E         	call	_lcdClear	;wreg free
  3838                           
  3839                           ;interface.c: 107: printf("time: nnn sec   \n");
  3840  003B70  0E08               	movlw	low STR_19
  3841  003B72  0100               	movlb	0	; () banked
  3842  003B74  6FBD               	movwf	printf@f& (0+255),b
  3843  003B76  0EFF               	movlw	high STR_19
  3844  003B78  0100               	movlb	0	; () banked
  3845  003B7A  6FBE               	movwf	(printf@f+1)& (0+255),b
  3846  003B7C  EC09  F000         	call	_printf	;wreg free
  3847                           
  3848                           ;interface.c: 108: printf("              *>");
  3849  003B80  0E3D               	movlw	low STR_20
  3850  003B82  0100               	movlb	0	; () banked
  3851  003B84  6FBD               	movwf	printf@f& (0+255),b
  3852  003B86  0EFF               	movlw	high STR_20
  3853  003B88  0100               	movlb	0	; () banked
  3854  003B8A  6FBE               	movwf	(printf@f+1)& (0+255),b
  3855  003B8C  EC09  F000         	call	_printf	;wreg free
  3856  003B90                     l7171:
  3857  003B90  ECFE  F01D         	call	_readKeypad	;wreg free
  3858  003B94  0A2A               	xorlw	42
  3859  003B96  B4D8               	btfsc	status,2,c
  3860  003B98  0012               	return	
  3861  003B9A  D7FA               	goto	l7171
  3862  003B9C                     __end_of_showRunTime:
  3863                           	opt stack 0
  3864                           tblptru	equ	0xFF8
  3865                           tblptrh	equ	0xFF7
  3866                           tblptrl	equ	0xFF6
  3867                           tablat	equ	0xFF5
  3868                           postinc0	equ	0xFEE
  3869                           wreg	equ	0xFE8
  3870                           postdec1	equ	0xFE5
  3871                           fsr1l	equ	0xFE1
  3872                           indf2	equ	0xFDF
  3873                           postinc2	equ	0xFDE
  3874                           postdec2	equ	0xFDD
  3875                           fsr2h	equ	0xFDA
  3876                           fsr2l	equ	0xFD9
  3877                           status	equ	0xFD8
  3878                           
  3879 ;; *************** function _showRunStats *****************
  3880 ;; Defined at:
  3881 ;;		line 113 in file "interface.c"
  3882 ;; Parameters:    Size  Location     Type
  3883 ;;		None
  3884 ;; Auto vars:     Size  Location     Type
  3885 ;;		None
  3886 ;; Return value:  Size  Location     Type
  3887 ;;                  1    wreg      unsigned char 
  3888 ;; Registers used:
  3889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3890 ;; Tracked objects:
  3891 ;;		On entry : 0/0
  3892 ;;		On exit  : 0/0
  3893 ;;		Unchanged: 0/0
  3894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3899 ;;Total ram usage:        0 bytes
  3900 ;; Hardware stack levels used:    1
  3901 ;; Hardware stack levels required when called:    8
  3902 ;; This function calls:
  3903 ;;		_lcdClear
  3904 ;;		_printf
  3905 ;;		_readKeypad
  3906 ;; This function is called by:
  3907 ;;		_showInterface
  3908 ;; This function uses a non-reentrant model
  3909 ;;
  3910                           
  3911                           	psect	text7
  3912  003B9C                     __ptext7:
  3913                           	opt stack 0
  3914  003B9C                     _showRunStats:
  3915                           	opt stack 21
  3916                           
  3917                           ;interface.c: 114: lcdClear();
  3918                           
  3919                           ;incstack = 0
  3920  003B9C  EC97  F01E         	call	_lcdClear	;wreg free
  3921                           
  3922                           ;interface.c: 115: printf("[AA,9V,C,other] \n");
  3923  003BA0  0E1A               	movlw	low STR_21
  3924  003BA2  0100               	movlb	0	; () banked
  3925  003BA4  6FBD               	movwf	printf@f& (0+255),b
  3926  003BA6  0EFF               	movlw	high STR_21
  3927  003BA8  0100               	movlb	0	; () banked
  3928  003BAA  6FBE               	movwf	(printf@f+1)& (0+255),b
  3929  003BAC  EC09  F000         	call	_printf	;wreg free
  3930                           
  3931                           ;interface.c: 116: printf("[nn,n,n,nn]   *>");
  3932  003BB0  0E81               	movlw	low STR_22
  3933  003BB2  0100               	movlb	0	; () banked
  3934  003BB4  6FBD               	movwf	printf@f& (0+255),b
  3935  003BB6  0EFF               	movlw	high STR_22
  3936  003BB8  0100               	movlb	0	; () banked
  3937  003BBA  6FBE               	movwf	(printf@f+1)& (0+255),b
  3938  003BBC  EC09  F000         	call	_printf	;wreg free
  3939  003BC0                     l7179:
  3940  003BC0  ECFE  F01D         	call	_readKeypad	;wreg free
  3941  003BC4  0A2A               	xorlw	42
  3942  003BC6  B4D8               	btfsc	status,2,c
  3943  003BC8  0012               	return	
  3944  003BCA  D7FA               	goto	l7179
  3945  003BCC                     __end_of_showRunStats:
  3946                           	opt stack 0
  3947                           tblptru	equ	0xFF8
  3948                           tblptrh	equ	0xFF7
  3949                           tblptrl	equ	0xFF6
  3950                           tablat	equ	0xFF5
  3951                           postinc0	equ	0xFEE
  3952                           wreg	equ	0xFE8
  3953                           postdec1	equ	0xFE5
  3954                           fsr1l	equ	0xFE1
  3955                           indf2	equ	0xFDF
  3956                           postinc2	equ	0xFDE
  3957                           postdec2	equ	0xFDD
  3958                           fsr2h	equ	0xFDA
  3959                           fsr2l	equ	0xFD9
  3960                           status	equ	0xFD8
  3961                           
  3962 ;; *************** function _showRunSelect *****************
  3963 ;; Defined at:
  3964 ;;		line 83 in file "interface.c"
  3965 ;; Parameters:    Size  Location     Type
  3966 ;;		None
  3967 ;; Auto vars:     Size  Location     Type
  3968 ;;  k               1  107[BANK0 ] unsigned char 
  3969 ;; Return value:  Size  Location     Type
  3970 ;;                  1    wreg      unsigned char 
  3971 ;; Registers used:
  3972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3973 ;; Tracked objects:
  3974 ;;		On entry : 0/0
  3975 ;;		On exit  : 0/0
  3976 ;;		Unchanged: 0/0
  3977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3979 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3981 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3982 ;;Total ram usage:        1 bytes
  3983 ;; Hardware stack levels used:    1
  3984 ;; Hardware stack levels required when called:    8
  3985 ;; This function calls:
  3986 ;;		_lcdClear
  3987 ;;		_printf
  3988 ;;		_readKeypad
  3989 ;; This function is called by:
  3990 ;;		_showInterface
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993                           
  3994                           	psect	text8
  3995  003724                     __ptext8:
  3996                           	opt stack 0
  3997  003724                     _showRunSelect:
  3998                           	opt stack 21
  3999                           
  4000                           ;interface.c: 84: lcdClear();
  4001                           
  4002                           ;incstack = 0
  4003  003724  EC97  F01E         	call	_lcdClear	;wreg free
  4004                           
  4005                           ;interface.c: 85: printf("select run:     \n");
  4006  003728  0EF6               	movlw	low STR_15
  4007  00372A  0100               	movlb	0	; () banked
  4008  00372C  6FBD               	movwf	printf@f& (0+255),b
  4009  00372E  0EFE               	movlw	high STR_15
  4010  003730  0100               	movlb	0	; () banked
  4011  003732  6FBE               	movwf	(printf@f+1)& (0+255),b
  4012  003734  EC09  F000         	call	_printf	;wreg free
  4013                           
  4014                           ;interface.c: 86: printf("[1,2,3,4]     *>");
  4015  003738  0E4E               	movlw	low STR_16
  4016  00373A  0100               	movlb	0	; () banked
  4017  00373C  6FBD               	movwf	printf@f& (0+255),b
  4018  00373E  0EFF               	movlw	high STR_16
  4019  003740  0100               	movlb	0	; () banked
  4020  003742  6FBE               	movwf	(printf@f+1)& (0+255),b
  4021  003744  EC09  F000         	call	_printf	;wreg free
  4022  003748                     l7131:
  4023  003748  ECFE  F01D         	call	_readKeypad	;wreg free
  4024  00374C  0100               	movlb	0	; () banked
  4025  00374E  6FEB               	movwf	showRunSelect@k& (0+255),b
  4026                           
  4027                           ; BSR set to: 0
  4028                           ;interface.c: 90: while(k != '1' && k != '2' && k != '3' && k != '4' && k != '*');
  4029  003750  0E31               	movlw	49
  4030  003752  0100               	movlb	0	; () banked
  4031  003754  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  4032  003756  B4D8               	btfsc	status,2,c
  4033  003758  D014               	goto	l7143
  4034                           
  4035                           ; BSR set to: 0
  4036  00375A  0E32               	movlw	50
  4037  00375C  0100               	movlb	0	; () banked
  4038  00375E  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  4039  003760  B4D8               	btfsc	status,2,c
  4040  003762  D00F               	goto	l7143
  4041                           
  4042                           ; BSR set to: 0
  4043  003764  0E33               	movlw	51
  4044  003766  0100               	movlb	0	; () banked
  4045  003768  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  4046  00376A  B4D8               	btfsc	status,2,c
  4047  00376C  D00A               	goto	l7143
  4048                           
  4049                           ; BSR set to: 0
  4050  00376E  0E34               	movlw	52
  4051  003770  0100               	movlb	0	; () banked
  4052  003772  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  4053  003774  B4D8               	btfsc	status,2,c
  4054  003776  D005               	goto	l7143
  4055                           
  4056                           ; BSR set to: 0
  4057  003778  0E2A               	movlw	42
  4058  00377A  0100               	movlb	0	; () banked
  4059  00377C  19EB               	xorwf	showRunSelect@k& (0+255),w,b
  4060  00377E  A4D8               	btfss	status,2,c
  4061  003780  D7E3               	goto	l7131
  4062  003782                     l7143:
  4063                           
  4064                           ; BSR set to: 0
  4065                           ;interface.c: 91: return k;
  4066  003782  0100               	movlb	0	; () banked
  4067  003784  51EB               	movf	showRunSelect@k& (0+255),w,b
  4068  003786  0012               	return	
  4069  003788                     __end_of_showRunSelect:
  4070                           	opt stack 0
  4071                           tblptru	equ	0xFF8
  4072                           tblptrh	equ	0xFF7
  4073                           tblptrl	equ	0xFF6
  4074                           tablat	equ	0xFF5
  4075                           postinc0	equ	0xFEE
  4076                           wreg	equ	0xFE8
  4077                           postdec1	equ	0xFE5
  4078                           fsr1l	equ	0xFE1
  4079                           indf2	equ	0xFDF
  4080                           postinc2	equ	0xFDE
  4081                           postdec2	equ	0xFDD
  4082                           fsr2h	equ	0xFDA
  4083                           fsr2l	equ	0xFD9
  4084                           status	equ	0xFD8
  4085                           
  4086 ;; *************** function _showRunMenu *****************
  4087 ;; Defined at:
  4088 ;;		line 94 in file "interface.c"
  4089 ;; Parameters:    Size  Location     Type
  4090 ;;  key             1    wreg     unsigned char 
  4091 ;; Auto vars:     Size  Location     Type
  4092 ;;  key             1  107[BANK0 ] unsigned char 
  4093 ;;  k               1  108[BANK0 ] unsigned char 
  4094 ;; Return value:  Size  Location     Type
  4095 ;;                  1    wreg      unsigned char 
  4096 ;; Registers used:
  4097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4098 ;; Tracked objects:
  4099 ;;		On entry : 0/0
  4100 ;;		On exit  : 0/0
  4101 ;;		Unchanged: 0/0
  4102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4104 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4106 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4107 ;;Total ram usage:        2 bytes
  4108 ;; Hardware stack levels used:    1
  4109 ;; Hardware stack levels required when called:    8
  4110 ;; This function calls:
  4111 ;;		_lcdClear
  4112 ;;		_printf
  4113 ;;		_readKeypad
  4114 ;; This function is called by:
  4115 ;;		_showInterface
  4116 ;; This function uses a non-reentrant model
  4117 ;;
  4118                           
  4119                           	psect	text9
  4120  0037EA                     __ptext9:
  4121                           	opt stack 0
  4122  0037EA                     _showRunMenu:
  4123                           	opt stack 21
  4124                           
  4125                           ; BSR set to: 0
  4126                           ;incstack = 0
  4127                           ;showRunMenu@key stored from wreg
  4128  0037EA  0100               	movlb	0	; () banked
  4129  0037EC  6FEB               	movwf	showRunMenu@key& (0+255),b
  4130                           
  4131                           ;interface.c: 95: lcdClear();
  4132  0037EE  EC97  F01E         	call	_lcdClear	;wreg free
  4133                           
  4134                           ;interface.c: 96: printf("%c) time  <A     \n",key);
  4135  0037F2  0EBF               	movlw	low STR_17
  4136  0037F4  0100               	movlb	0	; () banked
  4137  0037F6  6FBD               	movwf	printf@f& (0+255),b
  4138  0037F8  0EFE               	movlw	high STR_17
  4139  0037FA  0100               	movlb	0	; () banked
  4140  0037FC  6FBE               	movwf	(printf@f+1)& (0+255),b
  4141  0037FE  C0EB  F0BF         	movff	showRunMenu@key,?_printf+2
  4142  003802  0100               	movlb	0	; () banked
  4143  003804  6BC0               	clrf	(?_printf+3)& (0+255),b
  4144  003806  EC09  F000         	call	_printf	;wreg free
  4145                           
  4146                           ;interface.c: 97: printf( "   stats <B   *>");
  4147  00380A  0E70               	movlw	low STR_18
  4148  00380C  0100               	movlb	0	; () banked
  4149  00380E  6FBD               	movwf	printf@f& (0+255),b
  4150  003810  0EFF               	movlw	high STR_18
  4151  003812  0100               	movlb	0	; () banked
  4152  003814  6FBE               	movwf	(printf@f+1)& (0+255),b
  4153  003816  EC09  F000         	call	_printf	;wreg free
  4154  00381A                     l7153:
  4155  00381A  ECFE  F01D         	call	_readKeypad	;wreg free
  4156  00381E  0100               	movlb	0	; () banked
  4157  003820  6FEC               	movwf	showRunMenu@k& (0+255),b
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;interface.c: 101: while(k != 'A' && k != 'B' && k != '*');
  4161  003822  0E41               	movlw	65
  4162  003824  0100               	movlb	0	; () banked
  4163  003826  19EC               	xorwf	showRunMenu@k& (0+255),w,b
  4164  003828  B4D8               	btfsc	status,2,c
  4165  00382A  D00A               	goto	l7161
  4166                           
  4167                           ; BSR set to: 0
  4168  00382C  0E42               	movlw	66
  4169  00382E  0100               	movlb	0	; () banked
  4170  003830  19EC               	xorwf	showRunMenu@k& (0+255),w,b
  4171  003832  B4D8               	btfsc	status,2,c
  4172  003834  D005               	goto	l7161
  4173                           
  4174                           ; BSR set to: 0
  4175  003836  0E2A               	movlw	42
  4176  003838  0100               	movlb	0	; () banked
  4177  00383A  19EC               	xorwf	showRunMenu@k& (0+255),w,b
  4178  00383C  A4D8               	btfss	status,2,c
  4179  00383E  D7ED               	goto	l7153
  4180  003840                     l7161:
  4181                           
  4182                           ; BSR set to: 0
  4183                           ;interface.c: 102: return k;
  4184  003840  0100               	movlb	0	; () banked
  4185  003842  51EC               	movf	showRunMenu@k& (0+255),w,b
  4186  003844  0012               	return	
  4187  003846                     __end_of_showRunMenu:
  4188                           	opt stack 0
  4189                           tblptru	equ	0xFF8
  4190                           tblptrh	equ	0xFF7
  4191                           tblptrl	equ	0xFF6
  4192                           tablat	equ	0xFF5
  4193                           postinc0	equ	0xFEE
  4194                           wreg	equ	0xFE8
  4195                           postdec1	equ	0xFE5
  4196                           fsr1l	equ	0xFE1
  4197                           indf2	equ	0xFDF
  4198                           postinc2	equ	0xFDE
  4199                           postdec2	equ	0xFDD
  4200                           fsr2h	equ	0xFDA
  4201                           fsr2l	equ	0xFD9
  4202                           status	equ	0xFD8
  4203                           
  4204 ;; *************** function _showMainMenu *****************
  4205 ;; Defined at:
  4206 ;;		line 72 in file "interface.c"
  4207 ;; Parameters:    Size  Location     Type
  4208 ;;		None
  4209 ;; Auto vars:     Size  Location     Type
  4210 ;;  k               1  107[BANK0 ] unsigned char 
  4211 ;; Return value:  Size  Location     Type
  4212 ;;                  1    wreg      unsigned char 
  4213 ;; Registers used:
  4214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4215 ;; Tracked objects:
  4216 ;;		On entry : 0/0
  4217 ;;		On exit  : 0/0
  4218 ;;		Unchanged: 0/0
  4219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4221 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4223 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4224 ;;Total ram usage:        1 bytes
  4225 ;; Hardware stack levels used:    1
  4226 ;; Hardware stack levels required when called:    8
  4227 ;; This function calls:
  4228 ;;		_lcdClear
  4229 ;;		_printf
  4230 ;;		_readKeypad
  4231 ;; This function is called by:
  4232 ;;		_showInterface
  4233 ;; This function uses a non-reentrant model
  4234 ;;
  4235                           
  4236                           	psect	text10
  4237  0038F8                     __ptext10:
  4238                           	opt stack 0
  4239  0038F8                     _showMainMenu:
  4240                           	opt stack 21
  4241                           
  4242                           ;interface.c: 73: lcdClear();
  4243                           
  4244                           ; BSR set to: 0
  4245                           ;incstack = 0
  4246  0038F8  EC97  F01E         	call	_lcdClear	;wreg free
  4247                           
  4248                           ;interface.c: 74: printf("start   <B      \n");
  4249  0038FC  0ED2               	movlw	low STR_13
  4250  0038FE  0100               	movlb	0	; () banked
  4251  003900  6FBD               	movwf	printf@f& (0+255),b
  4252  003902  0EFE               	movlw	high STR_13
  4253  003904  0100               	movlb	0	; () banked
  4254  003906  6FBE               	movwf	(printf@f+1)& (0+255),b
  4255  003908  EC09  F000         	call	_printf	;wreg free
  4256                           
  4257                           ;interface.c: 75: printf("history <C    *>");
  4258  00390C  0E5F               	movlw	low STR_14
  4259  00390E  0100               	movlb	0	; () banked
  4260  003910  6FBD               	movwf	printf@f& (0+255),b
  4261  003912  0EFF               	movlw	high STR_14
  4262  003914  0100               	movlb	0	; () banked
  4263  003916  6FBE               	movwf	(printf@f+1)& (0+255),b
  4264  003918  EC09  F000         	call	_printf	;wreg free
  4265  00391C                     l7113:
  4266  00391C  ECFE  F01D         	call	_readKeypad	;wreg free
  4267  003920  0100               	movlb	0	; () banked
  4268  003922  6FEB               	movwf	showMainMenu@k& (0+255),b
  4269                           
  4270                           ; BSR set to: 0
  4271                           ;interface.c: 79: while(k != 'B' && k != 'C' && k != '*');
  4272  003924  0E42               	movlw	66
  4273  003926  0100               	movlb	0	; () banked
  4274  003928  19EB               	xorwf	showMainMenu@k& (0+255),w,b
  4275  00392A  B4D8               	btfsc	status,2,c
  4276  00392C  D00A               	goto	l7121
  4277                           
  4278                           ; BSR set to: 0
  4279  00392E  0E43               	movlw	67
  4280  003930  0100               	movlb	0	; () banked
  4281  003932  19EB               	xorwf	showMainMenu@k& (0+255),w,b
  4282  003934  B4D8               	btfsc	status,2,c
  4283  003936  D005               	goto	l7121
  4284                           
  4285                           ; BSR set to: 0
  4286  003938  0E2A               	movlw	42
  4287  00393A  0100               	movlb	0	; () banked
  4288  00393C  19EB               	xorwf	showMainMenu@k& (0+255),w,b
  4289  00393E  A4D8               	btfss	status,2,c
  4290  003940  D7ED               	goto	l7113
  4291  003942                     l7121:
  4292                           
  4293                           ; BSR set to: 0
  4294                           ;interface.c: 80: return k;
  4295  003942  0100               	movlb	0	; () banked
  4296  003944  51EB               	movf	showMainMenu@k& (0+255),w,b
  4297  003946  0012               	return	
  4298  003948                     __end_of_showMainMenu:
  4299                           	opt stack 0
  4300                           tblptru	equ	0xFF8
  4301                           tblptrh	equ	0xFF7
  4302                           tblptrl	equ	0xFF6
  4303                           tablat	equ	0xFF5
  4304                           postinc0	equ	0xFEE
  4305                           wreg	equ	0xFE8
  4306                           postdec1	equ	0xFE5
  4307                           fsr1l	equ	0xFE1
  4308                           indf2	equ	0xFDF
  4309                           postinc2	equ	0xFDE
  4310                           postdec2	equ	0xFDD
  4311                           fsr2h	equ	0xFDA
  4312                           fsr2l	equ	0xFD9
  4313                           status	equ	0xFD8
  4314                           
  4315 ;; *************** function _showDateTime *****************
  4316 ;; Defined at:
  4317 ;;		line 55 in file "interface.c"
  4318 ;; Parameters:    Size  Location     Type
  4319 ;;		None
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;		None
  4322 ;; Return value:  Size  Location     Type
  4323 ;;                  1    wreg      void 
  4324 ;; Registers used:
  4325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4326 ;; Tracked objects:
  4327 ;;		On entry : 0/0
  4328 ;;		On exit  : 0/0
  4329 ;;		Unchanged: 0/0
  4330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4335 ;;Total ram usage:        0 bytes
  4336 ;; Hardware stack levels used:    1
  4337 ;; Hardware stack levels required when called:    8
  4338 ;; This function calls:
  4339 ;;		_lcdClear
  4340 ;;		_printf
  4341 ;;		_readKeypad
  4342 ;; This function is called by:
  4343 ;;		_showInterface
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           	psect	text11
  4348  003BCC                     __ptext11:
  4349                           	opt stack 0
  4350  003BCC                     _showDateTime:
  4351                           	opt stack 21
  4352                           
  4353                           ;interface.c: 65: lcdClear();
  4354                           
  4355                           ; BSR set to: 0
  4356                           ;incstack = 0
  4357  003BCC  EC97  F01E         	call	_lcdClear	;wreg free
  4358                           
  4359                           ;interface.c: 66: printf("  hh:mm:ss      \n");
  4360  003BD0  0EE4               	movlw	low STR_11
  4361  003BD2  0100               	movlb	0	; () banked
  4362  003BD4  6FBD               	movwf	printf@f& (0+255),b
  4363  003BD6  0EFE               	movlw	high STR_11
  4364  003BD8  0100               	movlb	0	; () banked
  4365  003BDA  6FBE               	movwf	(printf@f+1)& (0+255),b
  4366  003BDC  EC09  F000         	call	_printf	;wreg free
  4367                           
  4368                           ;interface.c: 67: printf("  mm:dd:yy    A>");
  4369  003BE0  0E92               	movlw	low STR_12
  4370  003BE2  0100               	movlb	0	; () banked
  4371  003BE4  6FBD               	movwf	printf@f& (0+255),b
  4372  003BE6  0EFF               	movlw	high STR_12
  4373  003BE8  0100               	movlb	0	; () banked
  4374  003BEA  6FBE               	movwf	(printf@f+1)& (0+255),b
  4375  003BEC  EC09  F000         	call	_printf	;wreg free
  4376  003BF0                     l7105:
  4377  003BF0  ECFE  F01D         	call	_readKeypad	;wreg free
  4378  003BF4  0A41               	xorlw	65
  4379  003BF6  B4D8               	btfsc	status,2,c
  4380  003BF8  0012               	return	
  4381  003BFA  D7FA               	goto	l7105
  4382  003BFC                     __end_of_showDateTime:
  4383                           	opt stack 0
  4384                           tblptru	equ	0xFF8
  4385                           tblptrh	equ	0xFF7
  4386                           tblptrl	equ	0xFF6
  4387                           tablat	equ	0xFF5
  4388                           postinc0	equ	0xFEE
  4389                           wreg	equ	0xFE8
  4390                           postdec1	equ	0xFE5
  4391                           fsr1l	equ	0xFE1
  4392                           indf2	equ	0xFDF
  4393                           postinc2	equ	0xFDE
  4394                           postdec2	equ	0xFDD
  4395                           fsr2h	equ	0xFDA
  4396                           fsr2l	equ	0xFD9
  4397                           status	equ	0xFD8
  4398                           
  4399 ;; *************** function _lcdHome *****************
  4400 ;; Defined at:
  4401 ;;		line 70 in file "lcd.c"
  4402 ;; Parameters:    Size  Location     Type
  4403 ;;		None
  4404 ;; Auto vars:     Size  Location     Type
  4405 ;;		None
  4406 ;; Return value:  Size  Location     Type
  4407 ;;                  2   28[None  ] int 
  4408 ;; Registers used:
  4409 ;;		wreg, status,2, status,0, cstack
  4410 ;; Tracked objects:
  4411 ;;		On entry : 0/0
  4412 ;;		On exit  : 0/0
  4413 ;;		Unchanged: 0/0
  4414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4419 ;;Total ram usage:        0 bytes
  4420 ;; Hardware stack levels used:    1
  4421 ;; Hardware stack levels required when called:    5
  4422 ;; This function calls:
  4423 ;;		_lcdInst
  4424 ;; This function is called by:
  4425 ;;		_main
  4426 ;; This function uses a non-reentrant model
  4427 ;;
  4428                           
  4429                           	psect	text12
  4430  003D1E                     __ptext12:
  4431                           	opt stack 0
  4432  003D1E                     _lcdHome:
  4433                           	opt stack 25
  4434                           
  4435                           ;lcd.c: 71: lcdInst(0b11000000);
  4436                           
  4437                           ;incstack = 0
  4438  003D1E  0EC0               	movlw	192
  4439  003D20  EC47  F01E         	call	_lcdInst
  4440  003D24  0012               	return		;funcret
  4441  003D26                     __end_of_lcdHome:
  4442                           	opt stack 0
  4443                           tblptru	equ	0xFF8
  4444                           tblptrh	equ	0xFF7
  4445                           tblptrl	equ	0xFF6
  4446                           tablat	equ	0xFF5
  4447                           postinc0	equ	0xFEE
  4448                           wreg	equ	0xFE8
  4449                           postdec1	equ	0xFE5
  4450                           fsr1l	equ	0xFE1
  4451                           indf2	equ	0xFDF
  4452                           postinc2	equ	0xFDE
  4453                           postdec2	equ	0xFDD
  4454                           fsr2h	equ	0xFDA
  4455                           fsr2l	equ	0xFD9
  4456                           status	equ	0xFD8
  4457                           
  4458 ;; *************** function _initServo *****************
  4459 ;; Defined at:
  4460 ;;		line 21 in file "servo.c"
  4461 ;; Parameters:    Size  Location     Type
  4462 ;;  motor           2   94[BANK0 ] PTR int 
  4463 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
  4464 ;;  angle           2   96[BANK0 ] int 
  4465 ;; Auto vars:     Size  Location     Type
  4466 ;;  i               2  102[BANK0 ] int 
  4467 ;; Return value:  Size  Location     Type
  4468 ;;                  1    wreg      void 
  4469 ;; Registers used:
  4470 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4471 ;; Tracked objects:
  4472 ;;		On entry : 0/0
  4473 ;;		On exit  : 0/0
  4474 ;;		Unchanged: 0/0
  4475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4476 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4477 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4478 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4479 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4480 ;;Total ram usage:       10 bytes
  4481 ;; Hardware stack levels used:    1
  4482 ;; Hardware stack levels required when called:    7
  4483 ;; This function calls:
  4484 ;;		_initTimer
  4485 ;;		_setAngle
  4486 ;;		_startTimer
  4487 ;; This function is called by:
  4488 ;;		_main
  4489 ;; This function uses a non-reentrant model
  4490 ;;
  4491                           
  4492                           	psect	text13
  4493  002B94                     __ptext13:
  4494                           	opt stack 0
  4495  002B94                     _initServo:
  4496                           	opt stack 23
  4497                           
  4498                           ;servo.c: 24: for(int i = 0; i < n; i++){
  4499                           
  4500                           ;incstack = 0
  4501  002B94  0E00               	movlw	0
  4502  002B96  0100               	movlb	0	; () banked
  4503  002B98  6FE7               	movwf	(initServo@i+1)& (0+255),b
  4504  002B9A  0E00               	movlw	0
  4505  002B9C  6FE6               	movwf	initServo@i& (0+255),b
  4506  002B9E  D017               	goto	l7289
  4507  002BA0                     l7283:
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;servo.c: 25: if(servos[i] == motor)return;
  4511  002BA0  90D8               	bcf	status,0,c
  4512  002BA2  0100               	movlb	0	; () banked
  4513  002BA4  35E6               	rlcf	initServo@i& (0+255),w,b
  4514  002BA6  6ED9               	movwf	fsr2l,c
  4515  002BA8  0100               	movlb	0	; () banked
  4516  002BAA  35E7               	rlcf	(initServo@i+1)& (0+255),w,b
  4517  002BAC  6EDA               	movwf	fsr2h,c
  4518  002BAE  0E40               	movlw	low _servos
  4519  002BB0  26D9               	addwf	fsr2l,f,c
  4520  002BB2  0E01               	movlw	high _servos
  4521  002BB4  22DA               	addwfc	fsr2h,f,c
  4522  002BB6  0100               	movlb	0	; () banked
  4523  002BB8  51DE               	movf	initServo@motor& (0+255),w,b
  4524  002BBA  18DE               	xorwf	postinc2,w,c
  4525  002BBC  E105               	bnz	l7287
  4526  002BBE  0100               	movlb	0	; () banked
  4527  002BC0  51DF               	movf	(initServo@motor+1)& (0+255),w,b
  4528  002BC2  18DE               	xorwf	postinc2,w,c
  4529  002BC4  B4D8               	btfsc	status,2,c
  4530  002BC6  0012               	return	
  4531  002BC8                     l7287:
  4532                           
  4533                           ; BSR set to: 0
  4534  002BC8  0100               	movlb	0	; () banked
  4535  002BCA  4BE6               	infsnz	initServo@i& (0+255),f,b
  4536  002BCC  2BE7               	incf	(initServo@i+1)& (0+255),f,b
  4537  002BCE                     l7289:
  4538                           
  4539                           ; BSR set to: 0
  4540  002BCE  0100               	movlb	0	; () banked
  4541  002BD0  51F4               	movf	_n& (0+255),w,b
  4542  002BD2  0100               	movlb	0	; () banked
  4543  002BD4  5DE6               	subwf	initServo@i& (0+255),w,b
  4544  002BD6  0100               	movlb	0	; () banked
  4545  002BD8  51E7               	movf	(initServo@i+1)& (0+255),w,b
  4546  002BDA  0A80               	xorlw	128
  4547  002BDC  0100               	movlb	0	; () banked
  4548  002BDE  6FE2               	movwf	??_initServo& (0+255),b
  4549  002BE0  0100               	movlb	0	; () banked
  4550  002BE2  51F5               	movf	(_n+1)& (0+255),w,b
  4551  002BE4  0A80               	xorlw	128
  4552  002BE6  0100               	movlb	0	; () banked
  4553  002BE8  59E2               	subwfb	??_initServo& (0+255),w,b
  4554  002BEA  A0D8               	btfss	status,0,c
  4555  002BEC  D7D9               	goto	l7283
  4556                           
  4557                           ; BSR set to: 0
  4558                           ;servo.c: 26: }
  4559                           ;servo.c: 28: n++;
  4560                           
  4561                           ; BSR set to: 0
  4562  002BEE  0100               	movlb	0	; () banked
  4563  002BF0  4BF4               	infsnz	_n& (0+255),f,b
  4564  002BF2  2BF5               	incf	(_n+1)& (0+255),f,b
  4565                           
  4566                           ; BSR set to: 0
  4567                           ;servo.c: 29: servos[n-1] = motor;
  4568  002BF4  0EFE               	movlw	254
  4569  002BF6  0100               	movlb	0	; () banked
  4570  002BF8  6FE2               	movwf	??_initServo& (0+255),b
  4571  002BFA  0EFF               	movlw	255
  4572  002BFC  0100               	movlb	0	; () banked
  4573  002BFE  6FE3               	movwf	(??_initServo+1)& (0+255),b
  4574  002C00  C0F4  F0E4         	movff	_n,??_initServo+2
  4575  002C04  C0F5  F0E5         	movff	_n+1,??_initServo+3
  4576  002C08  90D8               	bcf	status,0,c
  4577  002C0A  0100               	movlb	0	; () banked
  4578  002C0C  37E4               	rlcf	(??_initServo+2)& (0+255),f,b
  4579  002C0E  37E5               	rlcf	(??_initServo+3)& (0+255),f,b
  4580  002C10  0100               	movlb	0	; () banked
  4581  002C12  51E2               	movf	??_initServo& (0+255),w,b
  4582  002C14  0100               	movlb	0	; () banked
  4583  002C16  27E4               	addwf	(??_initServo+2)& (0+255),f,b
  4584  002C18  0100               	movlb	0	; () banked
  4585  002C1A  51E3               	movf	(??_initServo+1)& (0+255),w,b
  4586  002C1C  0100               	movlb	0	; () banked
  4587  002C1E  23E5               	addwfc	(??_initServo+3)& (0+255),f,b
  4588  002C20  0E40               	movlw	low _servos
  4589  002C22  0100               	movlb	0	; () banked
  4590  002C24  25E4               	addwf	(??_initServo+2)& (0+255),w,b
  4591  002C26  6ED9               	movwf	fsr2l,c
  4592  002C28  0E01               	movlw	high _servos
  4593  002C2A  0100               	movlb	0	; () banked
  4594  002C2C  21E5               	addwfc	(??_initServo+3)& (0+255),w,b
  4595  002C2E  6EDA               	movwf	fsr2h,c
  4596  002C30  C0DE  FFDE         	movff	initServo@motor,postinc2
  4597  002C34  C0DF  FFDD         	movff	initServo@motor+1,postdec2
  4598                           
  4599                           ; BSR set to: 0
  4600                           ;servo.c: 30: setAngle(motor, angle);
  4601  002C38  C0DE  F0D4         	movff	initServo@motor,setAngle@motor
  4602  002C3C  C0DF  F0D5         	movff	initServo@motor+1,setAngle@motor+1
  4603  002C40  C0E0  F0D6         	movff	initServo@angle,setAngle@angle
  4604  002C44  C0E1  F0D7         	movff	initServo@angle+1,setAngle@angle+1
  4605  002C48  ECAC  F016         	call	_setAngle	;wreg free
  4606                           
  4607                           ;servo.c: 32: initTimer(0);
  4608  002C4C  0E00               	movlw	0
  4609  002C4E  6E24               	movwf	initTimer@timer+1,c
  4610  002C50  0E00               	movlw	0
  4611  002C52  6E23               	movwf	initTimer@timer,c
  4612  002C54  EC16  F01D         	call	_initTimer	;wreg free
  4613                           
  4614                           ;servo.c: 33: startTimer(0,0);
  4615  002C58  0E00               	movlw	0
  4616  002C5A  6E24               	movwf	startTimer@timer+1,c
  4617  002C5C  0E00               	movlw	0
  4618  002C5E  6E23               	movwf	startTimer@timer,c
  4619  002C60  0E00               	movlw	0
  4620  002C62  6E25               	movwf	startTimer@val,c
  4621  002C64  0E00               	movlw	0
  4622  002C66  6E26               	movwf	startTimer@val+1,c
  4623  002C68  0E00               	movlw	0
  4624  002C6A  6E27               	movwf	startTimer@val+2,c
  4625  002C6C  0E00               	movlw	0
  4626  002C6E  6E28               	movwf	startTimer@val+3,c
  4627  002C70  ECA4  F01C         	call	_startTimer	;wreg free
  4628  002C74  0012               	return		;funcret
  4629  002C76                     __end_of_initServo:
  4630                           	opt stack 0
  4631                           tblptru	equ	0xFF8
  4632                           tblptrh	equ	0xFF7
  4633                           tblptrl	equ	0xFF6
  4634                           tablat	equ	0xFF5
  4635                           postinc0	equ	0xFEE
  4636                           wreg	equ	0xFE8
  4637                           postdec1	equ	0xFE5
  4638                           fsr1l	equ	0xFE1
  4639                           indf2	equ	0xFDF
  4640                           postinc2	equ	0xFDE
  4641                           postdec2	equ	0xFDD
  4642                           fsr2h	equ	0xFDA
  4643                           fsr2l	equ	0xFD9
  4644                           status	equ	0xFD8
  4645                           
  4646 ;; *************** function _startTimer *****************
  4647 ;; Defined at:
  4648 ;;		line 76 in file "timer.c"
  4649 ;; Parameters:    Size  Location     Type
  4650 ;;  timer           2   34[COMRAM] int 
  4651 ;;  val             4   36[COMRAM] long 
  4652 ;; Auto vars:     Size  Location     Type
  4653 ;;		None
  4654 ;; Return value:  Size  Location     Type
  4655 ;;                  1    wreg      void 
  4656 ;; Registers used:
  4657 ;;		wreg, status,2, status,0
  4658 ;; Tracked objects:
  4659 ;;		On entry : 0/0
  4660 ;;		On exit  : 0/0
  4661 ;;		Unchanged: 0/0
  4662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4663 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4665 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4666 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4667 ;;Total ram usage:        8 bytes
  4668 ;; Hardware stack levels used:    1
  4669 ;; Hardware stack levels required when called:    3
  4670 ;; This function calls:
  4671 ;;		Nothing
  4672 ;; This function is called by:
  4673 ;;		_main
  4674 ;;		_initServo
  4675 ;;		_testFrequency
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679                           	psect	text14
  4680  003948                     __ptext14:
  4681                           	opt stack 0
  4682  003948                     _startTimer:
  4683                           	opt stack 27
  4684                           
  4685                           ;timer.c: 77: switch(timer){
  4686                           
  4687                           ;incstack = 0
  4688  003948  D012               	goto	l4965
  4689  00394A                     l465:
  4690                           
  4691                           ;timer.c: 79: TMR0H = val>>8;
  4692  00394A  C026  FFD7         	movff	startTimer@val+1,4055	;volatile
  4693                           
  4694                           ;timer.c: 80: TMR0L = val;
  4695  00394E  C025  FFD6         	movff	startTimer@val,4054	;volatile
  4696                           
  4697                           ;timer.c: 81: T0CON |= 1<<7;
  4698  003952  8ED5               	bsf	4053,7,c	;volatile
  4699                           
  4700                           ;timer.c: 82: break;
  4701  003954  0012               	return	
  4702  003956                     l467:
  4703                           
  4704                           ;timer.c: 84: TMR1H = val>>8;
  4705  003956  C026  FFCF         	movff	startTimer@val+1,4047	;volatile
  4706                           
  4707                           ;timer.c: 85: TMR1L = val;
  4708  00395A  C025  FFCE         	movff	startTimer@val,4046	;volatile
  4709                           
  4710                           ;timer.c: 86: T1CON |= 1<<0;
  4711  00395E  80CD               	bsf	4045,0,c	;volatile
  4712                           
  4713                           ;timer.c: 87: break;
  4714  003960  0012               	return	
  4715  003962                     l468:
  4716                           
  4717                           ;timer.c: 89: TMR3H = val>>8;
  4718  003962  C026  FFB3         	movff	startTimer@val+1,4019	;volatile
  4719                           
  4720                           ;timer.c: 90: TMR3L = val;
  4721  003966  C025  FFB2         	movff	startTimer@val,4018	;volatile
  4722                           
  4723                           ;timer.c: 91: T3CON |= 1<<0;
  4724  00396A  80B1               	bsf	4017,0,c	;volatile
  4725                           
  4726                           ;timer.c: 92: }
  4727  00396C  0012               	return	
  4728  00396E                     l4965:
  4729  00396E  C023  F029         	movff	startTimer@timer,??_startTimer
  4730  003972  C024  F02A         	movff	startTimer@timer+1,??_startTimer+1
  4731                           
  4732                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4733                           ; Switch size 1, requested type "space"
  4734                           ; Number of cases is 1, Range of values is 0 to 0
  4735                           ; switch strategies available:
  4736                           ; Name         Instructions Cycles
  4737                           ; simple_byte            4     3 (average)
  4738                           ;	Chosen strategy is simple_byte
  4739  003976  502A               	movf	??_startTimer+1,w,c
  4740  003978  0A00               	xorlw	0	; case 0
  4741  00397A  A4D8               	btfss	status,2,c
  4742  00397C  0012               	return	
  4743                           
  4744                           ; Switch size 1, requested type "space"
  4745                           ; Number of cases is 3, Range of values is 0 to 3
  4746                           ; switch strategies available:
  4747                           ; Name         Instructions Cycles
  4748                           ; simple_byte           10     6 (average)
  4749                           ;	Chosen strategy is simple_byte
  4750  00397E  5029               	movf	??_startTimer,w,c
  4751  003980  0A00               	xorlw	0	; case 0
  4752  003982  B4D8               	btfsc	status,2,c
  4753  003984  D7E2               	goto	l465
  4754  003986  0A01               	xorlw	1	; case 1
  4755  003988  B4D8               	btfsc	status,2,c
  4756  00398A  D7E5               	goto	l467
  4757  00398C  0A02               	xorlw	2	; case 3
  4758  00398E  A4D8               	btfss	status,2,c
  4759  003990  0012               	return	
  4760  003992  D7E7               	goto	l468
  4761  003994                     __end_of_startTimer:
  4762                           	opt stack 0
  4763                           tblptru	equ	0xFF8
  4764                           tblptrh	equ	0xFF7
  4765                           tblptrl	equ	0xFF6
  4766                           tablat	equ	0xFF5
  4767                           postinc0	equ	0xFEE
  4768                           wreg	equ	0xFE8
  4769                           postdec1	equ	0xFE5
  4770                           fsr1l	equ	0xFE1
  4771                           indf2	equ	0xFDF
  4772                           postinc2	equ	0xFDE
  4773                           postdec2	equ	0xFDD
  4774                           fsr2h	equ	0xFDA
  4775                           fsr2l	equ	0xFD9
  4776                           status	equ	0xFD8
  4777                           
  4778 ;; *************** function _setAngle *****************
  4779 ;; Defined at:
  4780 ;;		line 44 in file "servo.c"
  4781 ;; Parameters:    Size  Location     Type
  4782 ;;  motor           2   84[BANK0 ] PTR int 
  4783 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
  4784 ;;  angle           2   86[BANK0 ] int 
  4785 ;; Auto vars:     Size  Location     Type
  4786 ;;  i               2   92[BANK0 ] int 
  4787 ;;  period          2   90[BANK0 ] unsigned int 
  4788 ;; Return value:  Size  Location     Type
  4789 ;;                  1    wreg      void 
  4790 ;; Registers used:
  4791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4792 ;; Tracked objects:
  4793 ;;		On entry : 0/0
  4794 ;;		On exit  : 0/0
  4795 ;;		Unchanged: 0/0
  4796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4797 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4798 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4799 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4800 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4801 ;;Total ram usage:       10 bytes
  4802 ;; Hardware stack levels used:    1
  4803 ;; Hardware stack levels required when called:    6
  4804 ;; This function calls:
  4805 ;;		_angleToPulse
  4806 ;; This function is called by:
  4807 ;;		_sortBattery
  4808 ;;		_initServo
  4809 ;; This function uses a non-reentrant model
  4810 ;;
  4811                           
  4812                           	psect	text15
  4813  002D58                     __ptext15:
  4814                           	opt stack 0
  4815  002D58                     _setAngle:
  4816                           	opt stack 23
  4817                           
  4818                           ;servo.c: 45: unsigned int period = 50000;
  4819                           
  4820                           ;incstack = 0
  4821  002D58  0EC3               	movlw	195
  4822  002D5A  0100               	movlb	0	; () banked
  4823  002D5C  6FDB               	movwf	(setAngle@period+1)& (0+255),b
  4824  002D5E  0E50               	movlw	80
  4825  002D60  6FDA               	movwf	setAngle@period& (0+255),b
  4826                           
  4827                           ;servo.c: 46: for(int i = 0; i < n; i++){
  4828  002D62  0E00               	movlw	0
  4829  002D64  0100               	movlb	0	; () banked
  4830  002D66  6FDD               	movwf	(setAngle@i+1)& (0+255),b
  4831  002D68  0E00               	movlw	0
  4832  002D6A  6FDC               	movwf	setAngle@i& (0+255),b
  4833  002D6C  D03F               	goto	l7085
  4834  002D6E                     l7077:
  4835                           
  4836                           ; BSR set to: 0
  4837                           ;servo.c: 47: if(servos[i] == motor){
  4838  002D6E  90D8               	bcf	status,0,c
  4839  002D70  0100               	movlb	0	; () banked
  4840  002D72  35DC               	rlcf	setAngle@i& (0+255),w,b
  4841  002D74  6ED9               	movwf	fsr2l,c
  4842  002D76  0100               	movlb	0	; () banked
  4843  002D78  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
  4844  002D7A  6EDA               	movwf	fsr2h,c
  4845  002D7C  0E40               	movlw	low _servos
  4846  002D7E  26D9               	addwf	fsr2l,f,c
  4847  002D80  0E01               	movlw	high _servos
  4848  002D82  22DA               	addwfc	fsr2h,f,c
  4849  002D84  0100               	movlb	0	; () banked
  4850  002D86  51D4               	movf	setAngle@motor& (0+255),w,b
  4851  002D88  18DE               	xorwf	postinc2,w,c
  4852  002D8A  E11C               	bnz	l7081
  4853  002D8C  0100               	movlb	0	; () banked
  4854  002D8E  51D5               	movf	(setAngle@motor+1)& (0+255),w,b
  4855  002D90  18DE               	xorwf	postinc2,w,c
  4856  002D92  A4D8               	btfss	status,2,c
  4857  002D94  D017               	goto	l7081
  4858                           
  4859                           ; BSR set to: 0
  4860                           ;servo.c: 48: pulse[i] = angleToPulse(angle);
  4861  002D96  C0D6  F0BD         	movff	setAngle@angle,angleToPulse@angle
  4862  002D9A  C0D7  F0BE         	movff	setAngle@angle+1,angleToPulse@angle+1
  4863  002D9E  EC57  F011         	call	_angleToPulse	;wreg free
  4864  002DA2  90D8               	bcf	status,0,c
  4865  002DA4  0100               	movlb	0	; () banked
  4866  002DA6  35DC               	rlcf	setAngle@i& (0+255),w,b
  4867  002DA8  6ED9               	movwf	fsr2l,c
  4868  002DAA  0100               	movlb	0	; () banked
  4869  002DAC  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
  4870  002DAE  6EDA               	movwf	fsr2h,c
  4871  002DB0  0E38               	movlw	low _pulse
  4872  002DB2  26D9               	addwf	fsr2l,f,c
  4873  002DB4  0E01               	movlw	high _pulse
  4874  002DB6  22DA               	addwfc	fsr2h,f,c
  4875  002DB8  0100               	movlb	0	; () banked
  4876  002DBA  C0BD  FFDE         	movff	?_angleToPulse,postinc2
  4877  002DBE  0100               	movlb	0	; () banked
  4878  002DC0  C0BE  FFDD         	movff	?_angleToPulse+1,postdec2
  4879  002DC4                     l7081:
  4880                           
  4881                           ; BSR set to: 0
  4882                           ;servo.c: 49: }
  4883                           ;servo.c: 50: period-=pulse[i];
  4884  002DC4  90D8               	bcf	status,0,c
  4885  002DC6  0100               	movlb	0	; () banked
  4886  002DC8  35DC               	rlcf	setAngle@i& (0+255),w,b
  4887  002DCA  6ED9               	movwf	fsr2l,c
  4888  002DCC  0100               	movlb	0	; () banked
  4889  002DCE  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
  4890  002DD0  6EDA               	movwf	fsr2h,c
  4891  002DD2  0E38               	movlw	low _pulse
  4892  002DD4  26D9               	addwf	fsr2l,f,c
  4893  002DD6  0E01               	movlw	high _pulse
  4894  002DD8  22DA               	addwfc	fsr2h,f,c
  4895  002DDA  50DE               	movf	postinc2,w,c
  4896  002DDC  0100               	movlb	0	; () banked
  4897  002DDE  5FDA               	subwf	setAngle@period& (0+255),f,b
  4898  002DE0  50DD               	movf	postdec2,w,c
  4899  002DE2  0100               	movlb	0	; () banked
  4900  002DE4  5BDB               	subwfb	(setAngle@period+1)& (0+255),f,b
  4901                           
  4902                           ; BSR set to: 0
  4903  002DE6  0100               	movlb	0	; () banked
  4904  002DE8  4BDC               	infsnz	setAngle@i& (0+255),f,b
  4905  002DEA  2BDD               	incf	(setAngle@i+1)& (0+255),f,b
  4906  002DEC                     l7085:
  4907                           
  4908                           ; BSR set to: 0
  4909  002DEC  0100               	movlb	0	; () banked
  4910  002DEE  51F4               	movf	_n& (0+255),w,b
  4911  002DF0  0100               	movlb	0	; () banked
  4912  002DF2  5DDC               	subwf	setAngle@i& (0+255),w,b
  4913  002DF4  0100               	movlb	0	; () banked
  4914  002DF6  51DD               	movf	(setAngle@i+1)& (0+255),w,b
  4915  002DF8  0A80               	xorlw	128
  4916  002DFA  0100               	movlb	0	; () banked
  4917  002DFC  6FD8               	movwf	??_setAngle& (0+255),b
  4918  002DFE  0100               	movlb	0	; () banked
  4919  002E00  51F5               	movf	(_n+1)& (0+255),w,b
  4920  002E02  0A80               	xorlw	128
  4921  002E04  0100               	movlb	0	; () banked
  4922  002E06  59D8               	subwfb	??_setAngle& (0+255),w,b
  4923  002E08  A0D8               	btfss	status,0,c
  4924  002E0A  D7B1               	goto	l7077
  4925                           
  4926                           ; BSR set to: 0
  4927                           ;servo.c: 51: }
  4928                           ;servo.c: 52: pulse[n] = period;
  4929                           
  4930                           ; BSR set to: 0
  4931  002E0C  90D8               	bcf	status,0,c
  4932  002E0E  0100               	movlb	0	; () banked
  4933  002E10  35F4               	rlcf	_n& (0+255),w,b
  4934  002E12  6ED9               	movwf	fsr2l,c
  4935  002E14  0100               	movlb	0	; () banked
  4936  002E16  35F5               	rlcf	(_n+1)& (0+255),w,b
  4937  002E18  6EDA               	movwf	fsr2h,c
  4938  002E1A  0E38               	movlw	low _pulse
  4939  002E1C  26D9               	addwf	fsr2l,f,c
  4940  002E1E  0E01               	movlw	high _pulse
  4941  002E20  22DA               	addwfc	fsr2h,f,c
  4942  002E22  C0DA  FFDE         	movff	setAngle@period,postinc2
  4943  002E26  C0DB  FFDD         	movff	setAngle@period+1,postdec2
  4944                           
  4945                           ; BSR set to: 0
  4946  002E2A  0012               	return		;funcret
  4947  002E2C                     __end_of_setAngle:
  4948                           	opt stack 0
  4949                           tblptru	equ	0xFF8
  4950                           tblptrh	equ	0xFF7
  4951                           tblptrl	equ	0xFF6
  4952                           tablat	equ	0xFF5
  4953                           postinc0	equ	0xFEE
  4954                           wreg	equ	0xFE8
  4955                           postdec1	equ	0xFE5
  4956                           fsr1l	equ	0xFE1
  4957                           indf2	equ	0xFDF
  4958                           postinc2	equ	0xFDE
  4959                           postdec2	equ	0xFDD
  4960                           fsr2h	equ	0xFDA
  4961                           fsr2l	equ	0xFD9
  4962                           status	equ	0xFD8
  4963                           
  4964 ;; *************** function _angleToPulse *****************
  4965 ;; Defined at:
  4966 ;;		line 36 in file "servo.c"
  4967 ;; Parameters:    Size  Location     Type
  4968 ;;  angle           2   61[BANK0 ] int 
  4969 ;; Auto vars:     Size  Location     Type
  4970 ;;  a000            4   80[BANK0 ] long 
  4971 ;;  a180            4   73[BANK0 ] long 
  4972 ;;  offset          4   69[BANK0 ] long 
  4973 ;; Return value:  Size  Location     Type
  4974 ;;                  4   61[BANK0 ] long 
  4975 ;; Registers used:
  4976 ;;		wreg, status,2, status,0, cstack
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4982 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4983 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4984 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4985 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4986 ;;Total ram usage:       23 bytes
  4987 ;; Hardware stack levels used:    1
  4988 ;; Hardware stack levels required when called:    5
  4989 ;; This function calls:
  4990 ;;		___altoft
  4991 ;;		___awtoft
  4992 ;;		___ftadd
  4993 ;;		___ftdiv
  4994 ;;		___ftmul
  4995 ;;		___fttol
  4996 ;; This function is called by:
  4997 ;;		_setAngle
  4998 ;; This function uses a non-reentrant model
  4999 ;;
  5000                           
  5001                           	psect	text16
  5002  0022AE                     __ptext16:
  5003                           	opt stack 0
  5004  0022AE                     _angleToPulse:
  5005                           	opt stack 23
  5006                           
  5007                           ;servo.c: 37: long offset = -600;
  5008                           
  5009                           ; BSR set to: 0
  5010                           ;incstack = 0
  5011  0022AE  0EA8               	movlw	168
  5012  0022B0  0100               	movlb	0	; () banked
  5013  0022B2  6FC5               	movwf	angleToPulse@offset& (0+255),b
  5014  0022B4  0EFD               	movlw	253
  5015  0022B6  6FC6               	movwf	(angleToPulse@offset+1)& (0+255),b
  5016  0022B8  0EFF               	movlw	255
  5017  0022BA  6FC7               	movwf	(angleToPulse@offset+2)& (0+255),b
  5018  0022BC  0EFF               	movlw	255
  5019  0022BE  6FC8               	movwf	(angleToPulse@offset+3)& (0+255),b
  5020                           
  5021                           ;servo.c: 38: long a000 = 1250;
  5022  0022C0  0EE2               	movlw	226
  5023  0022C2  0100               	movlb	0	; () banked
  5024  0022C4  6FD0               	movwf	angleToPulse@a000& (0+255),b
  5025  0022C6  0E04               	movlw	4
  5026  0022C8  6FD1               	movwf	(angleToPulse@a000+1)& (0+255),b
  5027  0022CA  0E00               	movlw	0
  5028  0022CC  6FD2               	movwf	(angleToPulse@a000+2)& (0+255),b
  5029  0022CE  0E00               	movlw	0
  5030  0022D0  6FD3               	movwf	(angleToPulse@a000+3)& (0+255),b
  5031                           
  5032                           ;servo.c: 39: long a180 = 6250;
  5033  0022D2  0E6A               	movlw	106
  5034  0022D4  0100               	movlb	0	; () banked
  5035  0022D6  6FC9               	movwf	angleToPulse@a180& (0+255),b
  5036  0022D8  0E18               	movlw	24
  5037  0022DA  6FCA               	movwf	(angleToPulse@a180+1)& (0+255),b
  5038  0022DC  0E00               	movlw	0
  5039  0022DE  6FCB               	movwf	(angleToPulse@a180+2)& (0+255),b
  5040  0022E0  0E00               	movlw	0
  5041  0022E2  6FCC               	movwf	(angleToPulse@a180+3)& (0+255),b
  5042                           
  5043                           ; BSR set to: 0
  5044                           ;servo.c: 41: return a000 + angle/180.0*(a180-a000) + offset;
  5045  0022E4  C0D0  F0C1         	movff	angleToPulse@a000,??_angleToPulse
  5046  0022E8  C0D1  F0C2         	movff	angleToPulse@a000+1,??_angleToPulse+1
  5047  0022EC  C0D2  F0C3         	movff	angleToPulse@a000+2,??_angleToPulse+2
  5048  0022F0  C0D3  F0C4         	movff	angleToPulse@a000+3,??_angleToPulse+3
  5049  0022F4  0100               	movlb	0	; () banked
  5050  0022F6  1FC1               	comf	??_angleToPulse& (0+255),f,b
  5051  0022F8  1FC2               	comf	(??_angleToPulse+1)& (0+255),f,b
  5052  0022FA  1FC3               	comf	(??_angleToPulse+2)& (0+255),f,b
  5053  0022FC  1FC4               	comf	(??_angleToPulse+3)& (0+255),f,b
  5054  0022FE  2BC1               	incf	??_angleToPulse& (0+255),f,b
  5055  002300  0E00               	movlw	0
  5056  002302  23C2               	addwfc	(??_angleToPulse+1)& (0+255),f,b
  5057  002304  23C3               	addwfc	(??_angleToPulse+2)& (0+255),f,b
  5058  002306  23C4               	addwfc	(??_angleToPulse+3)& (0+255),f,b
  5059  002308  0100               	movlb	0	; () banked
  5060  00230A  51C9               	movf	angleToPulse@a180& (0+255),w,b
  5061  00230C  0100               	movlb	0	; () banked
  5062  00230E  25C1               	addwf	??_angleToPulse& (0+255),w,b
  5063  002310  6E2B               	movwf	___altoft@c,c
  5064  002312  0100               	movlb	0	; () banked
  5065  002314  51CA               	movf	(angleToPulse@a180+1)& (0+255),w,b
  5066  002316  0100               	movlb	0	; () banked
  5067  002318  21C2               	addwfc	(??_angleToPulse+1)& (0+255),w,b
  5068  00231A  6E2C               	movwf	___altoft@c+1,c
  5069  00231C  0100               	movlb	0	; () banked
  5070  00231E  51CB               	movf	(angleToPulse@a180+2)& (0+255),w,b
  5071  002320  0100               	movlb	0	; () banked
  5072  002322  21C3               	addwfc	(??_angleToPulse+2)& (0+255),w,b
  5073  002324  6E2D               	movwf	___altoft@c+2,c
  5074  002326  0100               	movlb	0	; () banked
  5075  002328  51CC               	movf	(angleToPulse@a180+3)& (0+255),w,b
  5076  00232A  0100               	movlb	0	; () banked
  5077  00232C  21C4               	addwfc	(??_angleToPulse+3)& (0+255),w,b
  5078  00232E  6E2E               	movwf	___altoft@c+3,c
  5079  002330  EC4B  F01A         	call	___altoft	;wreg free
  5080  002334  C02B  F08C         	movff	?___altoft,___ftmul@f2
  5081  002338  C02C  F08D         	movff	?___altoft+1,___ftmul@f2+1
  5082  00233C  C02D  F08E         	movff	?___altoft+2,___ftmul@f2+2
  5083  002340  0E00               	movlw	0
  5084  002342  6E38               	movwf	___ftdiv@f2,c
  5085  002344  0E34               	movlw	52
  5086  002346  6E39               	movwf	___ftdiv@f2+1,c
  5087  002348  0E43               	movlw	67
  5088  00234A  6E3A               	movwf	___ftdiv@f2+2,c
  5089  00234C  C0BD  F02B         	movff	angleToPulse@angle,___awtoft@c
  5090  002350  C0BE  F02C         	movff	angleToPulse@angle+1,___awtoft@c+1
  5091  002354  EC9A  F01D         	call	___awtoft	;wreg free
  5092  002358  C02B  F035         	movff	?___awtoft,___ftdiv@f1
  5093  00235C  C02C  F036         	movff	?___awtoft+1,___ftdiv@f1+1
  5094  002360  C02D  F037         	movff	?___awtoft+2,___ftdiv@f1+2
  5095  002364  ECD2  F013         	call	___ftdiv	;wreg free
  5096  002368  C035  F089         	movff	?___ftdiv,___ftmul@f1
  5097  00236C  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
  5098  002370  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
  5099  002374  ECA8  F010         	call	___ftmul	;wreg free
  5100  002378  C089  F0A5         	movff	?___ftmul,___ftadd@f2
  5101  00237C  C08A  F0A6         	movff	?___ftmul+1,___ftadd@f2+1
  5102  002380  C08B  F0A7         	movff	?___ftmul+2,___ftadd@f2+2
  5103  002384  C0D0  F02B         	movff	angleToPulse@a000,___altoft@c
  5104  002388  C0D1  F02C         	movff	angleToPulse@a000+1,___altoft@c+1
  5105  00238C  C0D2  F02D         	movff	angleToPulse@a000+2,___altoft@c+2
  5106  002390  C0D3  F02E         	movff	angleToPulse@a000+3,___altoft@c+3
  5107  002394  EC4B  F01A         	call	___altoft	;wreg free
  5108  002398  C02B  F0A2         	movff	?___altoft,___ftadd@f1
  5109  00239C  C02C  F0A3         	movff	?___altoft+1,___ftadd@f1+1
  5110  0023A0  C02D  F0A4         	movff	?___altoft+2,___ftadd@f1+2
  5111  0023A4  EC6E  F00D         	call	___ftadd	;wreg free
  5112  0023A8  C0A2  F0CD         	movff	?___ftadd,_angleToPulse$1426
  5113  0023AC  C0A3  F0CE         	movff	?___ftadd+1,_angleToPulse$1426+1
  5114  0023B0  C0A4  F0CF         	movff	?___ftadd+2,_angleToPulse$1426+2
  5115                           
  5116                           ;servo.c: 41: return a000 + angle/180.0*(a180-a000) + offset;
  5117  0023B4  C0C5  F02B         	movff	angleToPulse@offset,___altoft@c
  5118  0023B8  C0C6  F02C         	movff	angleToPulse@offset+1,___altoft@c+1
  5119  0023BC  C0C7  F02D         	movff	angleToPulse@offset+2,___altoft@c+2
  5120  0023C0  C0C8  F02E         	movff	angleToPulse@offset+3,___altoft@c+3
  5121  0023C4  EC4B  F01A         	call	___altoft	;wreg free
  5122  0023C8  C02B  F0A5         	movff	?___altoft,___ftadd@f2
  5123  0023CC  C02C  F0A6         	movff	?___altoft+1,___ftadd@f2+1
  5124  0023D0  C02D  F0A7         	movff	?___altoft+2,___ftadd@f2+2
  5125  0023D4  C0CD  F0A2         	movff	_angleToPulse$1426,___ftadd@f1
  5126  0023D8  C0CE  F0A3         	movff	_angleToPulse$1426+1,___ftadd@f1+1
  5127  0023DC  C0CF  F0A4         	movff	_angleToPulse$1426+2,___ftadd@f1+2
  5128  0023E0  EC6E  F00D         	call	___ftadd	;wreg free
  5129  0023E4  C0A2  F0AE         	movff	?___ftadd,___fttol@f1
  5130  0023E8  C0A3  F0AF         	movff	?___ftadd+1,___fttol@f1+1
  5131  0023EC  C0A4  F0B0         	movff	?___ftadd+2,___fttol@f1+2
  5132  0023F0  EC03  F012         	call	___fttol	;wreg free
  5133  0023F4  C0AE  F0BD         	movff	?___fttol,?_angleToPulse
  5134  0023F8  C0AF  F0BE         	movff	?___fttol+1,?_angleToPulse+1
  5135  0023FC  C0B0  F0BF         	movff	?___fttol+2,?_angleToPulse+2
  5136  002400  C0B1  F0C0         	movff	?___fttol+3,?_angleToPulse+3
  5137  002404  0012               	return	
  5138  002406                     __end_of_angleToPulse:
  5139                           	opt stack 0
  5140                           tblptru	equ	0xFF8
  5141                           tblptrh	equ	0xFF7
  5142                           tblptrl	equ	0xFF6
  5143                           tablat	equ	0xFF5
  5144                           postinc0	equ	0xFEE
  5145                           wreg	equ	0xFE8
  5146                           postdec1	equ	0xFE5
  5147                           fsr1l	equ	0xFE1
  5148                           indf2	equ	0xFDF
  5149                           postinc2	equ	0xFDE
  5150                           postdec2	equ	0xFDD
  5151                           fsr2h	equ	0xFDA
  5152                           fsr2l	equ	0xFD9
  5153                           status	equ	0xFD8
  5154                           
  5155 ;; *************** function ___ftdiv *****************
  5156 ;; Defined at:
  5157 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  5158 ;; Parameters:    Size  Location     Type
  5159 ;;  f1              3   52[COMRAM] float 
  5160 ;;  f2              3   55[COMRAM] float 
  5161 ;; Auto vars:     Size  Location     Type
  5162 ;;  f3              3    4[BANK0 ] float 
  5163 ;;  sign            1    8[BANK0 ] unsigned char 
  5164 ;;  exp             1    7[BANK0 ] unsigned char 
  5165 ;;  cntr            1    3[BANK0 ] unsigned char 
  5166 ;; Return value:  Size  Location     Type
  5167 ;;                  3   52[COMRAM] float 
  5168 ;; Registers used:
  5169 ;;		wreg, status,2, status,0, cstack
  5170 ;; Tracked objects:
  5171 ;;		On entry : 0/0
  5172 ;;		On exit  : 0/0
  5173 ;;		Unchanged: 0/0
  5174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5175 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5176 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5177 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5178 ;;      Totals:         6       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5179 ;;Total ram usage:       15 bytes
  5180 ;; Hardware stack levels used:    1
  5181 ;; Hardware stack levels required when called:    4
  5182 ;; This function calls:
  5183 ;;		___ftpack
  5184 ;; This function is called by:
  5185 ;;		_sortBattery
  5186 ;;		_angleToPulse
  5187 ;; This function uses a non-reentrant model
  5188 ;;
  5189                           
  5190                           	psect	text17
  5191  0027A4                     __ptext17:
  5192                           	opt stack 0
  5193  0027A4                     ___ftdiv:
  5194                           	opt stack 23
  5195                           
  5196                           ;incstack = 0
  5197  0027A4  C037  F080         	movff	___ftdiv@f1+2,??___ftdiv
  5198  0027A8  0100               	movlb	0	; () banked
  5199  0027AA  6B81               	clrf	(??___ftdiv+1)& (0+255),b
  5200  0027AC  6B82               	clrf	(??___ftdiv+2)& (0+255),b
  5201  0027AE  3436               	rlcf	___ftdiv@f1+1,w,c
  5202  0027B0  0100               	movlb	0	; () banked
  5203  0027B2  3780               	rlcf	??___ftdiv& (0+255),f,b
  5204  0027B4  E301               	bnc	u6451
  5205  0027B6  8181               	bsf	(??___ftdiv+1)& (0+255),0,b
  5206  0027B8                     u6451:
  5207  0027B8  0100               	movlb	0	; () banked
  5208  0027BA  5180               	movf	??___ftdiv& (0+255),w,b
  5209  0027BC  0100               	movlb	0	; () banked
  5210  0027BE  6F87               	movwf	___ftdiv@exp& (0+255),b
  5211  0027C0  0100               	movlb	0	; () banked
  5212  0027C2  5187               	movf	___ftdiv@exp& (0+255),w,b
  5213  0027C4  A4D8               	btfss	status,2,c
  5214  0027C6  D007               	goto	l6349
  5215                           
  5216                           ; BSR set to: 0
  5217  0027C8  0E00               	movlw	0
  5218  0027CA  6E35               	movwf	?___ftdiv,c
  5219  0027CC  0E00               	movlw	0
  5220  0027CE  6E36               	movwf	?___ftdiv+1,c
  5221  0027D0  0E00               	movlw	0
  5222  0027D2  6E37               	movwf	?___ftdiv+2,c
  5223                           
  5224                           ; BSR set to: 0
  5225  0027D4  0012               	return	
  5226  0027D6                     l6349:
  5227                           
  5228                           ; BSR set to: 0
  5229  0027D6  C03A  F080         	movff	___ftdiv@f2+2,??___ftdiv
  5230  0027DA  0100               	movlb	0	; () banked
  5231  0027DC  6B81               	clrf	(??___ftdiv+1)& (0+255),b
  5232  0027DE  6B82               	clrf	(??___ftdiv+2)& (0+255),b
  5233  0027E0  3439               	rlcf	___ftdiv@f2+1,w,c
  5234  0027E2  0100               	movlb	0	; () banked
  5235  0027E4  3780               	rlcf	??___ftdiv& (0+255),f,b
  5236  0027E6  E301               	bnc	u6471
  5237  0027E8  8181               	bsf	(??___ftdiv+1)& (0+255),0,b
  5238  0027EA                     u6471:
  5239  0027EA  0100               	movlb	0	; () banked
  5240  0027EC  5180               	movf	??___ftdiv& (0+255),w,b
  5241  0027EE  0100               	movlb	0	; () banked
  5242  0027F0  6F88               	movwf	___ftdiv@sign& (0+255),b
  5243  0027F2  0100               	movlb	0	; () banked
  5244  0027F4  5188               	movf	___ftdiv@sign& (0+255),w,b
  5245  0027F6  A4D8               	btfss	status,2,c
  5246  0027F8  D007               	goto	l6355
  5247                           
  5248                           ; BSR set to: 0
  5249  0027FA  0E00               	movlw	0
  5250  0027FC  6E35               	movwf	?___ftdiv,c
  5251  0027FE  0E00               	movlw	0
  5252  002800  6E36               	movwf	?___ftdiv+1,c
  5253  002802  0E00               	movlw	0
  5254  002804  6E37               	movwf	?___ftdiv+2,c
  5255                           
  5256                           ; BSR set to: 0
  5257  002806  0012               	return	
  5258  002808                     l6355:
  5259                           
  5260                           ; BSR set to: 0
  5261  002808  0E00               	movlw	0
  5262  00280A  0100               	movlb	0	; () banked
  5263  00280C  6F84               	movwf	___ftdiv@f3& (0+255),b
  5264  00280E  0E00               	movlw	0
  5265  002810  0100               	movlb	0	; () banked
  5266  002812  6F85               	movwf	(___ftdiv@f3+1)& (0+255),b
  5267  002814  0E00               	movlw	0
  5268  002816  0100               	movlb	0	; () banked
  5269  002818  6F86               	movwf	(___ftdiv@f3+2)& (0+255),b
  5270                           
  5271                           ; BSR set to: 0
  5272  00281A  0100               	movlb	0	; () banked
  5273  00281C  5188               	movf	___ftdiv@sign& (0+255),w,b
  5274  00281E  0F89               	addlw	137
  5275  002820  0100               	movlb	0	; () banked
  5276  002822  5F87               	subwf	___ftdiv@exp& (0+255),f,b
  5277                           
  5278                           ; BSR set to: 0
  5279  002824  C037  F088         	movff	___ftdiv@f1+2,___ftdiv@sign
  5280                           
  5281                           ; BSR set to: 0
  5282  002828  503A               	movf	___ftdiv@f2+2,w,c
  5283  00282A  0100               	movlb	0	; () banked
  5284  00282C  1B88               	xorwf	___ftdiv@sign& (0+255),f,b
  5285                           
  5286                           ; BSR set to: 0
  5287  00282E  0E80               	movlw	128
  5288  002830  0100               	movlb	0	; () banked
  5289  002832  1788               	andwf	___ftdiv@sign& (0+255),f,b
  5290                           
  5291                           ; BSR set to: 0
  5292  002834  8E36               	bsf	___ftdiv@f1+1,7,c
  5293                           
  5294                           ; BSR set to: 0
  5295  002836  0EFF               	movlw	255
  5296  002838  1635               	andwf	___ftdiv@f1,f,c
  5297  00283A  0EFF               	movlw	255
  5298  00283C  1636               	andwf	___ftdiv@f1+1,f,c
  5299  00283E  0E00               	movlw	0
  5300  002840  1637               	andwf	___ftdiv@f1+2,f,c
  5301                           
  5302                           ; BSR set to: 0
  5303  002842  8E39               	bsf	___ftdiv@f2+1,7,c
  5304                           
  5305                           ; BSR set to: 0
  5306  002844  0EFF               	movlw	255
  5307  002846  1638               	andwf	___ftdiv@f2,f,c
  5308  002848  0EFF               	movlw	255
  5309  00284A  1639               	andwf	___ftdiv@f2+1,f,c
  5310  00284C  0E00               	movlw	0
  5311  00284E  163A               	andwf	___ftdiv@f2+2,f,c
  5312                           
  5313                           ; BSR set to: 0
  5314  002850  0E18               	movlw	24
  5315  002852  0100               	movlb	0	; () banked
  5316  002854  6F83               	movwf	___ftdiv@cntr& (0+255),b
  5317  002856                     l6375:
  5318                           
  5319                           ; BSR set to: 0
  5320  002856  0100               	movlb	0	; () banked
  5321  002858  90D8               	bcf	status,0,c
  5322  00285A  3784               	rlcf	___ftdiv@f3& (0+255),f,b
  5323  00285C  3785               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  5324  00285E  3786               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  5325                           
  5326                           ; BSR set to: 0
  5327  002860  5038               	movf	___ftdiv@f2,w,c
  5328  002862  5C35               	subwf	___ftdiv@f1,w,c
  5329  002864  5039               	movf	___ftdiv@f2+1,w,c
  5330  002866  5836               	subwfb	___ftdiv@f1+1,w,c
  5331  002868  503A               	movf	___ftdiv@f2+2,w,c
  5332  00286A  5837               	subwfb	___ftdiv@f1+2,w,c
  5333  00286C  A0D8               	btfss	status,0,c
  5334  00286E  D008               	goto	l1166
  5335                           
  5336                           ; BSR set to: 0
  5337  002870  5038               	movf	___ftdiv@f2,w,c
  5338  002872  5E35               	subwf	___ftdiv@f1,f,c
  5339  002874  5039               	movf	___ftdiv@f2+1,w,c
  5340  002876  5A36               	subwfb	___ftdiv@f1+1,f,c
  5341  002878  503A               	movf	___ftdiv@f2+2,w,c
  5342  00287A  5A37               	subwfb	___ftdiv@f1+2,f,c
  5343                           
  5344                           ; BSR set to: 0
  5345  00287C  0100               	movlb	0	; () banked
  5346  00287E  8184               	bsf	___ftdiv@f3& (0+255),0,b
  5347  002880                     l1166:
  5348                           
  5349                           ; BSR set to: 0
  5350  002880  90D8               	bcf	status,0,c
  5351  002882  3635               	rlcf	___ftdiv@f1,f,c
  5352  002884  3636               	rlcf	___ftdiv@f1+1,f,c
  5353  002886  3637               	rlcf	___ftdiv@f1+2,f,c
  5354                           
  5355                           ; BSR set to: 0
  5356  002888  0100               	movlb	0	; () banked
  5357  00288A  2F83               	decfsz	___ftdiv@cntr& (0+255),f,b
  5358  00288C  D7E4               	goto	l6375
  5359                           
  5360                           ; BSR set to: 0
  5361                           
  5362                           ; BSR set to: 0
  5363  00288E  C084  F023         	movff	___ftdiv@f3,___ftpack@arg
  5364  002892  C085  F024         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5365  002896  C086  F025         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5366  00289A  C087  F026         	movff	___ftdiv@exp,___ftpack@exp
  5367  00289E  C088  F027         	movff	___ftdiv@sign,___ftpack@sign
  5368  0028A2  EC44  F018         	call	___ftpack	;wreg free
  5369  0028A6  C023  F035         	movff	?___ftpack,?___ftdiv
  5370  0028AA  C024  F036         	movff	?___ftpack+1,?___ftdiv+1
  5371  0028AE  C025  F037         	movff	?___ftpack+2,?___ftdiv+2
  5372  0028B2  0012               	return	
  5373  0028B4                     __end_of___ftdiv:
  5374                           	opt stack 0
  5375                           tblptru	equ	0xFF8
  5376                           tblptrh	equ	0xFF7
  5377                           tblptrl	equ	0xFF6
  5378                           tablat	equ	0xFF5
  5379                           postinc0	equ	0xFEE
  5380                           wreg	equ	0xFE8
  5381                           postdec1	equ	0xFE5
  5382                           fsr1l	equ	0xFE1
  5383                           indf2	equ	0xFDF
  5384                           postinc2	equ	0xFDE
  5385                           postdec2	equ	0xFDD
  5386                           fsr2h	equ	0xFDA
  5387                           fsr2l	equ	0xFD9
  5388                           status	equ	0xFD8
  5389                           
  5390 ;; *************** function ___awtoft *****************
  5391 ;; Defined at:
  5392 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  5393 ;; Parameters:    Size  Location     Type
  5394 ;;  c               2   42[COMRAM] int 
  5395 ;; Auto vars:     Size  Location     Type
  5396 ;;  sign            1   45[COMRAM] unsigned char 
  5397 ;; Return value:  Size  Location     Type
  5398 ;;                  3   42[COMRAM] float 
  5399 ;; Registers used:
  5400 ;;		wreg, status,2, status,0, cstack
  5401 ;; Tracked objects:
  5402 ;;		On entry : 0/0
  5403 ;;		On exit  : 0/0
  5404 ;;		Unchanged: 0/0
  5405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5406 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5407 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5409 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5410 ;;Total ram usage:        4 bytes
  5411 ;; Hardware stack levels used:    1
  5412 ;; Hardware stack levels required when called:    4
  5413 ;; This function calls:
  5414 ;;		___ftpack
  5415 ;; This function is called by:
  5416 ;;		_sortBattery
  5417 ;;		_angleToPulse
  5418 ;;		_testFrequency
  5419 ;; This function uses a non-reentrant model
  5420 ;;
  5421                           
  5422                           	psect	text18
  5423  003B34                     __ptext18:
  5424                           	opt stack 0
  5425  003B34                     ___awtoft:
  5426                           	opt stack 23
  5427                           
  5428                           ;incstack = 0
  5429  003B34  0E00               	movlw	0
  5430  003B36  6E2E               	movwf	___awtoft@sign,c
  5431  003B38  AE2C               	btfss	___awtoft@c+1,7,c
  5432  003B3A  D006               	goto	l6405
  5433  003B3C  6C2B               	negf	___awtoft@c,c
  5434  003B3E  1E2C               	comf	___awtoft@c+1,f,c
  5435  003B40  B0D8               	btfsc	status,0,c
  5436  003B42  2A2C               	incf	___awtoft@c+1,f,c
  5437  003B44  0E01               	movlw	1
  5438  003B46  6E2E               	movwf	___awtoft@sign,c
  5439  003B48                     l6405:
  5440  003B48  C02B  F023         	movff	___awtoft@c,___ftpack@arg
  5441  003B4C  C02C  F024         	movff	___awtoft@c+1,___ftpack@arg+1
  5442  003B50  6A25               	clrf	___ftpack@arg+2,c
  5443  003B52  0E8E               	movlw	142
  5444  003B54  6E26               	movwf	___ftpack@exp,c
  5445  003B56  C02E  F027         	movff	___awtoft@sign,___ftpack@sign
  5446  003B5A  EC44  F018         	call	___ftpack	;wreg free
  5447  003B5E  C023  F02B         	movff	?___ftpack,?___awtoft
  5448  003B62  C024  F02C         	movff	?___ftpack+1,?___awtoft+1
  5449  003B66  C025  F02D         	movff	?___ftpack+2,?___awtoft+2
  5450  003B6A  0012               	return	
  5451  003B6C                     __end_of___awtoft:
  5452                           	opt stack 0
  5453                           tblptru	equ	0xFF8
  5454                           tblptrh	equ	0xFF7
  5455                           tblptrl	equ	0xFF6
  5456                           tablat	equ	0xFF5
  5457                           postinc0	equ	0xFEE
  5458                           wreg	equ	0xFE8
  5459                           postdec1	equ	0xFE5
  5460                           fsr1l	equ	0xFE1
  5461                           indf2	equ	0xFDF
  5462                           postinc2	equ	0xFDE
  5463                           postdec2	equ	0xFDD
  5464                           fsr2h	equ	0xFDA
  5465                           fsr2l	equ	0xFD9
  5466                           status	equ	0xFD8
  5467                           
  5468 ;; *************** function ___altoft *****************
  5469 ;; Defined at:
  5470 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  5471 ;; Parameters:    Size  Location     Type
  5472 ;;  c               4   42[COMRAM] long 
  5473 ;; Auto vars:     Size  Location     Type
  5474 ;;  sign            1   51[COMRAM] unsigned char 
  5475 ;;  exp             1   50[COMRAM] unsigned char 
  5476 ;; Return value:  Size  Location     Type
  5477 ;;                  3   42[COMRAM] float 
  5478 ;; Registers used:
  5479 ;;		wreg, status,2, status,0, cstack
  5480 ;; Tracked objects:
  5481 ;;		On entry : 0/0
  5482 ;;		On exit  : 0/0
  5483 ;;		Unchanged: 0/0
  5484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5485 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5486 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5487 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5488 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5489 ;;Total ram usage:       10 bytes
  5490 ;; Hardware stack levels used:    1
  5491 ;; Hardware stack levels required when called:    4
  5492 ;; This function calls:
  5493 ;;		___ftpack
  5494 ;; This function is called by:
  5495 ;;		_sortBattery
  5496 ;;		_angleToPulse
  5497 ;; This function uses a non-reentrant model
  5498 ;;
  5499                           
  5500                           	psect	text19
  5501  003496                     __ptext19:
  5502                           	opt stack 0
  5503  003496                     ___altoft:
  5504                           	opt stack 23
  5505                           
  5506                           ;incstack = 0
  5507  003496  0E00               	movlw	0
  5508  003498  6E34               	movwf	___altoft@sign,c
  5509  00349A  0E8E               	movlw	142
  5510  00349C  6E33               	movwf	___altoft@exp,c
  5511  00349E  AE2E               	btfss	___altoft@c+3,7,c
  5512  0034A0  D011               	goto	l6337
  5513  0034A2  1E2E               	comf	___altoft@c+3,f,c
  5514  0034A4  1E2D               	comf	___altoft@c+2,f,c
  5515  0034A6  1E2C               	comf	___altoft@c+1,f,c
  5516  0034A8  6C2B               	negf	___altoft@c,c
  5517  0034AA  0E00               	movlw	0
  5518  0034AC  222C               	addwfc	___altoft@c+1,f,c
  5519  0034AE  222D               	addwfc	___altoft@c+2,f,c
  5520  0034B0  222E               	addwfc	___altoft@c+3,f,c
  5521  0034B2  0E01               	movlw	1
  5522  0034B4  6E34               	movwf	___altoft@sign,c
  5523  0034B6  D006               	goto	l6337
  5524  0034B8                     l6335:
  5525  0034B8  90D8               	bcf	status,0,c
  5526  0034BA  322E               	rrcf	___altoft@c+3,f,c
  5527  0034BC  322D               	rrcf	___altoft@c+2,f,c
  5528  0034BE  322C               	rrcf	___altoft@c+1,f,c
  5529  0034C0  322B               	rrcf	___altoft@c,f,c
  5530  0034C2  2A33               	incf	___altoft@exp,f,c
  5531  0034C4                     l6337:
  5532  0034C4  0E00               	movlw	0
  5533  0034C6  142B               	andwf	___altoft@c,w,c
  5534  0034C8  6E2F               	movwf	??___altoft& (0+255),c
  5535  0034CA  0E00               	movlw	0
  5536  0034CC  142C               	andwf	___altoft@c+1,w,c
  5537  0034CE  6E30               	movwf	(??___altoft+1)& (0+255),c
  5538  0034D0  0E00               	movlw	0
  5539  0034D2  142D               	andwf	___altoft@c+2,w,c
  5540  0034D4  6E31               	movwf	(??___altoft+2)& (0+255),c
  5541  0034D6  0EFF               	movlw	255
  5542  0034D8  142E               	andwf	___altoft@c+3,w,c
  5543  0034DA  6E32               	movwf	(??___altoft+3)& (0+255),c
  5544  0034DC  502F               	movf	??___altoft,w,c
  5545  0034DE  1030               	iorwf	??___altoft+1,w,c
  5546  0034E0  1031               	iorwf	??___altoft+2,w,c
  5547  0034E2  1032               	iorwf	??___altoft+3,w,c
  5548  0034E4  A4D8               	btfss	status,2,c
  5549  0034E6  D7E8               	goto	l6335
  5550  0034E8  C02B  F023         	movff	___altoft@c,___ftpack@arg
  5551  0034EC  C02C  F024         	movff	___altoft@c+1,___ftpack@arg+1
  5552  0034F0  C02D  F025         	movff	___altoft@c+2,___ftpack@arg+2
  5553  0034F4  C033  F026         	movff	___altoft@exp,___ftpack@exp
  5554  0034F8  C034  F027         	movff	___altoft@sign,___ftpack@sign
  5555  0034FC  EC44  F018         	call	___ftpack	;wreg free
  5556  003500  C023  F02B         	movff	?___ftpack,?___altoft
  5557  003504  C024  F02C         	movff	?___ftpack+1,?___altoft+1
  5558  003508  C025  F02D         	movff	?___ftpack+2,?___altoft+2
  5559  00350C  0012               	return	
  5560  00350E                     __end_of___altoft:
  5561                           	opt stack 0
  5562                           tblptru	equ	0xFF8
  5563                           tblptrh	equ	0xFF7
  5564                           tblptrl	equ	0xFF6
  5565                           tablat	equ	0xFF5
  5566                           postinc0	equ	0xFEE
  5567                           wreg	equ	0xFE8
  5568                           postdec1	equ	0xFE5
  5569                           fsr1l	equ	0xFE1
  5570                           indf2	equ	0xFDF
  5571                           postinc2	equ	0xFDE
  5572                           postdec2	equ	0xFDD
  5573                           fsr2h	equ	0xFDA
  5574                           fsr2l	equ	0xFD9
  5575                           status	equ	0xFD8
  5576                           
  5577 ;; *************** function _initTimer *****************
  5578 ;; Defined at:
  5579 ;;		line 52 in file "timer.c"
  5580 ;; Parameters:    Size  Location     Type
  5581 ;;  timer           2   34[COMRAM] int 
  5582 ;; Auto vars:     Size  Location     Type
  5583 ;;		None
  5584 ;; Return value:  Size  Location     Type
  5585 ;;                  1    wreg      void 
  5586 ;; Registers used:
  5587 ;;		wreg, status,2, status,0
  5588 ;; Tracked objects:
  5589 ;;		On entry : 0/0
  5590 ;;		On exit  : 0/0
  5591 ;;		Unchanged: 0/0
  5592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5593 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5595 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5596 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5597 ;;Total ram usage:        4 bytes
  5598 ;; Hardware stack levels used:    1
  5599 ;; Hardware stack levels required when called:    3
  5600 ;; This function calls:
  5601 ;;		Nothing
  5602 ;; This function is called by:
  5603 ;;		_main
  5604 ;;		_initServo
  5605 ;;		_testFrequency
  5606 ;; This function uses a non-reentrant model
  5607 ;;
  5608                           
  5609                           	psect	text20
  5610  003A2C                     __ptext20:
  5611                           	opt stack 0
  5612  003A2C                     _initTimer:
  5613                           	opt stack 27
  5614                           
  5615                           ;timer.c: 53: switch(timer){
  5616                           
  5617                           ;incstack = 0
  5618  003A2C  D00F               	goto	l4951
  5619  003A2E                     l4933:
  5620                           
  5621                           ;timer.c: 55: T0CON = 0;
  5622  003A2E  0E00               	movlw	0
  5623  003A30  6ED5               	movwf	4053,c	;volatile
  5624                           
  5625                           ;timer.c: 56: T0CON |= 1<<3;
  5626  003A32  86D5               	bsf	4053,3,c	;volatile
  5627                           
  5628                           ;timer.c: 58: TMR0IE = 1;
  5629  003A34  8AF2               	bsf	intcon,5,c	;volatile
  5630                           
  5631                           ;timer.c: 59: break;
  5632  003A36  D01C               	goto	l458
  5633  003A38                     l4939:
  5634                           
  5635                           ;timer.c: 61: T1CON = 0;
  5636  003A38  0E00               	movlw	0
  5637  003A3A  6ECD               	movwf	4045,c	;volatile
  5638                           
  5639                           ;timer.c: 63: T1CON |= 0b11<<4;
  5640  003A3C  0E30               	movlw	48
  5641  003A3E  12CD               	iorwf	4045,f,c	;volatile
  5642                           
  5643                           ;timer.c: 64: TMR1IE = 1;
  5644  003A40  809D               	bsf	3997,0,c	;volatile
  5645                           
  5646                           ;timer.c: 65: break;
  5647  003A42  D016               	goto	l458
  5648  003A44                     l4945:
  5649                           
  5650                           ;timer.c: 67: T3CON = 0;
  5651  003A44  0E00               	movlw	0
  5652  003A46  6EB1               	movwf	4017,c	;volatile
  5653                           
  5654                           ;timer.c: 68: TMR3IE = 1;
  5655  003A48  82A0               	bsf	4000,1,c	;volatile
  5656                           
  5657                           ;timer.c: 70: }
  5658                           
  5659                           ;timer.c: 69: break;
  5660  003A4A  D012               	goto	l458
  5661  003A4C                     l4951:
  5662  003A4C  C023  F025         	movff	initTimer@timer,??_initTimer
  5663  003A50  C024  F026         	movff	initTimer@timer+1,??_initTimer+1
  5664                           
  5665                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5666                           ; Switch size 1, requested type "space"
  5667                           ; Number of cases is 1, Range of values is 0 to 0
  5668                           ; switch strategies available:
  5669                           ; Name         Instructions Cycles
  5670                           ; simple_byte            4     3 (average)
  5671                           ;	Chosen strategy is simple_byte
  5672  003A54  5026               	movf	??_initTimer+1,w,c
  5673  003A56  0A00               	xorlw	0	; case 0
  5674  003A58  A4D8               	btfss	status,2,c
  5675  003A5A  D00A               	goto	l458
  5676                           
  5677                           ; Switch size 1, requested type "space"
  5678                           ; Number of cases is 3, Range of values is 0 to 3
  5679                           ; switch strategies available:
  5680                           ; Name         Instructions Cycles
  5681                           ; simple_byte           10     6 (average)
  5682                           ;	Chosen strategy is simple_byte
  5683  003A5C  5025               	movf	??_initTimer,w,c
  5684  003A5E  0A00               	xorlw	0	; case 0
  5685  003A60  B4D8               	btfsc	status,2,c
  5686  003A62  D7E5               	goto	l4933
  5687  003A64  0A01               	xorlw	1	; case 1
  5688  003A66  B4D8               	btfsc	status,2,c
  5689  003A68  D7E7               	goto	l4939
  5690  003A6A  0A02               	xorlw	2	; case 3
  5691  003A6C  B4D8               	btfsc	status,2,c
  5692  003A6E  D7EA               	goto	l4945
  5693  003A70                     l458:
  5694                           
  5695                           ;timer.c: 71: PEIE = 1;
  5696  003A70  8CF2               	bsf	intcon,6,c	;volatile
  5697                           
  5698                           ;timer.c: 72: (INTCONbits.GIE = 1);
  5699  003A72  8EF2               	bsf	intcon,7,c	;volatile
  5700  003A74  0012               	return		;funcret
  5701  003A76                     __end_of_initTimer:
  5702                           	opt stack 0
  5703                           tblptru	equ	0xFF8
  5704                           tblptrh	equ	0xFF7
  5705                           tblptrl	equ	0xFF6
  5706                           tablat	equ	0xFF5
  5707                           intcon	equ	0xFF2
  5708                           postinc0	equ	0xFEE
  5709                           wreg	equ	0xFE8
  5710                           postdec1	equ	0xFE5
  5711                           fsr1l	equ	0xFE1
  5712                           indf2	equ	0xFDF
  5713                           postinc2	equ	0xFDE
  5714                           postdec2	equ	0xFDD
  5715                           fsr2h	equ	0xFDA
  5716                           fsr2l	equ	0xFD9
  5717                           status	equ	0xFD8
  5718                           
  5719 ;; *************** function _debug *****************
  5720 ;; Defined at:
  5721 ;;		line 102 in file "main.c"
  5722 ;; Parameters:    Size  Location     Type
  5723 ;;		None
  5724 ;; Auto vars:     Size  Location     Type
  5725 ;;  i               2   21[BANK1 ] int 
  5726 ;;  i               2   23[BANK1 ] int 
  5727 ;;  run             2   16[BANK1 ] PTR int 
  5728 ;;		 -> readPastRun@data(14), 
  5729 ;;  run            14    0[BANK1 ] int [7]
  5730 ;;  n               2   14[BANK1 ] int 
  5731 ;;  key             1   20[BANK1 ] unsigned char 
  5732 ;; Return value:  Size  Location     Type
  5733 ;;                  1    wreg      void 
  5734 ;; Registers used:
  5735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5736 ;; Tracked objects:
  5737 ;;		On entry : 0/0
  5738 ;;		On exit  : 0/0
  5739 ;;		Unchanged: 0/0
  5740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5742 ;;      Locals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5743 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5744 ;;      Totals:         0       2      25       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5745 ;;Total ram usage:       27 bytes
  5746 ;; Hardware stack levels used:    1
  5747 ;; Hardware stack levels required when called:    8
  5748 ;; This function calls:
  5749 ;;		___lwmod
  5750 ;;		_eepromRead
  5751 ;;		_initLCD
  5752 ;;		_lcdClear
  5753 ;;		_pinSetup
  5754 ;;		_printf
  5755 ;;		_readKeypad
  5756 ;;		_readPastRun
  5757 ;;		_saveNewRun
  5758 ;; This function is called by:
  5759 ;;		_main
  5760 ;; This function uses a non-reentrant model
  5761 ;;
  5762                           
  5763                           	psect	text21
  5764  001FA4                     __ptext21:
  5765                           	opt stack 0
  5766  001FA4                     _debug:
  5767                           	opt stack 22
  5768                           
  5769                           ;main.c: 104: pinSetup();
  5770                           
  5771                           ;incstack = 0
  5772  001FA4  EC5E  F01D         	call	_pinSetup	;wreg free
  5773                           
  5774                           ;main.c: 105: initLCD();
  5775  001FA8  EC3B  F01D         	call	_initLCD	;wreg free
  5776  001FAC                     l7199:
  5777                           
  5778                           ;main.c: 108: char key = readKeypad();
  5779  001FAC  ECFE  F01D         	call	_readKeypad	;wreg free
  5780  001FB0  0101               	movlb	1	; () banked
  5781  001FB2  6F14               	movwf	debug@key& (0+255),b
  5782                           
  5783                           ; BSR set to: 1
  5784                           ;main.c: 109: printf("s");
  5785  001FB4  0EFC               	movlw	low STR_1
  5786  001FB6  0100               	movlb	0	; () banked
  5787  001FB8  6FBD               	movwf	printf@f& (0+255),b
  5788  001FBA  0EFF               	movlw	high STR_1
  5789  001FBC  0100               	movlb	0	; () banked
  5790  001FBE  6FBE               	movwf	(printf@f+1)& (0+255),b
  5791  001FC0  EC09  F000         	call	_printf	;wreg free
  5792                           
  5793                           ;main.c: 110: if(key == '1'){
  5794  001FC4  0E31               	movlw	49
  5795  001FC6  0101               	movlb	1	; () banked
  5796  001FC8  1914               	xorwf	debug@key& (0+255),w,b
  5797  001FCA  A4D8               	btfss	status,2,c
  5798  001FCC  D06B               	goto	l7225
  5799                           
  5800                           ; BSR set to: 1
  5801                           ;main.c: 111: int n = (eepromRead(0)+1)%0xffff;
  5802  001FCE  0E00               	movlw	0
  5803  001FD0  6E37               	movwf	eepromRead@address,c
  5804  001FD2  0E00               	movlw	0
  5805  001FD4  6E38               	movwf	eepromRead@address+1,c
  5806  001FD6  0E00               	movlw	0
  5807  001FD8  6E39               	movwf	eepromRead@address+2,c
  5808  001FDA  0E00               	movlw	0
  5809  001FDC  6E3A               	movwf	eepromRead@address+3,c
  5810  001FDE  EC76  F01E         	call	_eepromRead	;wreg free
  5811  001FE2  0E01               	movlw	1
  5812  001FE4  2437               	addwf	?_eepromRead,w,c
  5813  001FE6  0100               	movlb	0	; () banked
  5814  001FE8  6F80               	movwf	___lwmod@dividend& (0+255),b
  5815  001FEA  0E00               	movlw	0
  5816  001FEC  2038               	addwfc	?_eepromRead+1,w,c
  5817  001FEE  0100               	movlb	0	; () banked
  5818  001FF0  6F81               	movwf	(___lwmod@dividend+1)& (0+255),b
  5819  001FF2  0EFF               	movlw	255
  5820  001FF4  0100               	movlb	0	; () banked
  5821  001FF6  6F83               	movwf	(___lwmod@divisor+1)& (0+255),b
  5822  001FF8  6982               	setf	___lwmod@divisor& (0+255),b
  5823  001FFA  ECC4  F01B         	call	___lwmod	;wreg free
  5824  001FFE  C080  F10E         	movff	?___lwmod,debug@n
  5825  002002  C081  F10F         	movff	?___lwmod+1,debug@n+1
  5826                           
  5827                           ;main.c: 112: int run[7];
  5828                           ;main.c: 113: for(int i = 0; i < 7; i++)run[i] = i+n;
  5829  002006  0E00               	movlw	0
  5830  002008  0101               	movlb	1	; () banked
  5831  00200A  6F18               	movwf	(debug@i+1)& (0+255),b
  5832  00200C  0E00               	movlw	0
  5833  00200E  6F17               	movwf	debug@i& (0+255),b
  5834  002010                     l7209:
  5835                           
  5836                           ; BSR set to: 1
  5837  002010  0101               	movlb	1	; () banked
  5838  002012  BF18               	btfsc	(debug@i+1)& (0+255),7,b
  5839  002014  D008               	goto	l7213
  5840  002016  0101               	movlb	1	; () banked
  5841  002018  5118               	movf	(debug@i+1)& (0+255),w,b
  5842  00201A  E124               	bnz	l7219
  5843  00201C  0E07               	movlw	7
  5844  00201E  0101               	movlb	1	; () banked
  5845  002020  5D17               	subwf	debug@i& (0+255),w,b
  5846  002022  B0D8               	btfsc	status,0,c
  5847  002024  D01F               	goto	l7219
  5848  002026                     l7213:
  5849                           
  5850                           ; BSR set to: 1
  5851  002026  0101               	movlb	1	; () banked
  5852  002028  510E               	movf	debug@n& (0+255),w,b
  5853  00202A  0101               	movlb	1	; () banked
  5854  00202C  2517               	addwf	debug@i& (0+255),w,b
  5855  00202E  0100               	movlb	0	; () banked
  5856  002030  6FEB               	movwf	??_debug& (0+255),b
  5857  002032  0101               	movlb	1	; () banked
  5858  002034  510F               	movf	(debug@n+1)& (0+255),w,b
  5859  002036  0101               	movlb	1	; () banked
  5860  002038  2118               	addwfc	(debug@i+1)& (0+255),w,b
  5861  00203A  0100               	movlb	0	; () banked
  5862  00203C  6FEC               	movwf	(??_debug+1)& (0+255),b
  5863  00203E  90D8               	bcf	status,0,c
  5864  002040  0101               	movlb	1	; () banked
  5865  002042  3517               	rlcf	debug@i& (0+255),w,b
  5866  002044  6ED9               	movwf	fsr2l,c
  5867  002046  0101               	movlb	1	; () banked
  5868  002048  3518               	rlcf	(debug@i+1)& (0+255),w,b
  5869  00204A  6EDA               	movwf	fsr2h,c
  5870  00204C  0E00               	movlw	low debug@run
  5871  00204E  26D9               	addwf	fsr2l,f,c
  5872  002050  0E01               	movlw	high debug@run
  5873  002052  22DA               	addwfc	fsr2h,f,c
  5874  002054  C0EB  FFDE         	movff	??_debug,postinc2
  5875  002058  C0EC  FFDD         	movff	??_debug+1,postdec2
  5876                           
  5877                           ; BSR set to: 1
  5878  00205C  0101               	movlb	1	; () banked
  5879  00205E  4B17               	infsnz	debug@i& (0+255),f,b
  5880  002060  2B18               	incf	(debug@i+1)& (0+255),f,b
  5881  002062  D7D6               	goto	l7209
  5882  002064                     l7219:
  5883                           
  5884                           ; BSR set to: 1
  5885                           ;main.c: 114: saveNewRun(run);
  5886  002064  0E00               	movlw	low debug@run
  5887  002066  0100               	movlb	0	; () banked
  5888  002068  6F89               	movwf	saveNewRun@data& (0+255),b
  5889  00206A  0E01               	movlw	high debug@run
  5890  00206C  0100               	movlb	0	; () banked
  5891  00206E  6F8A               	movwf	(saveNewRun@data+1)& (0+255),b
  5892  002070  EC3B  F016         	call	_saveNewRun	;wreg free
  5893                           
  5894                           ;main.c: 115: lcdClear();
  5895  002074  EC97  F01E         	call	_lcdClear	;wreg free
  5896                           
  5897                           ;main.c: 116: printf("n: %d",eepromRead(0));
  5898  002078  0EF2               	movlw	low STR_2
  5899  00207A  0100               	movlb	0	; () banked
  5900  00207C  6FBD               	movwf	printf@f& (0+255),b
  5901  00207E  0EFF               	movlw	high STR_2
  5902  002080  0100               	movlb	0	; () banked
  5903  002082  6FBE               	movwf	(printf@f+1)& (0+255),b
  5904  002084  0E00               	movlw	0
  5905  002086  6E37               	movwf	eepromRead@address,c
  5906  002088  0E00               	movlw	0
  5907  00208A  6E38               	movwf	eepromRead@address+1,c
  5908  00208C  0E00               	movlw	0
  5909  00208E  6E39               	movwf	eepromRead@address+2,c
  5910  002090  0E00               	movlw	0
  5911  002092  6E3A               	movwf	eepromRead@address+3,c
  5912  002094  EC76  F01E         	call	_eepromRead	;wreg free
  5913  002098  C037  F0BF         	movff	?_eepromRead,?_printf+2
  5914  00209C  C038  F0C0         	movff	?_eepromRead+1,?_printf+3
  5915  0020A0  EC09  F000         	call	_printf	;wreg free
  5916  0020A4                     l7225:
  5917                           
  5918                           ;main.c: 117: }
  5919                           ;main.c: 118: if(key == '2'){
  5920  0020A4  0E32               	movlw	50
  5921  0020A6  0101               	movlb	1	; () banked
  5922  0020A8  1914               	xorwf	debug@key& (0+255),w,b
  5923  0020AA  A4D8               	btfss	status,2,c
  5924  0020AC  D047               	goto	l7245
  5925                           
  5926                           ; BSR set to: 1
  5927                           ;main.c: 119: int* run = readPastRun(eepromRead(0));
  5928  0020AE  0E00               	movlw	0
  5929  0020B0  6E37               	movwf	eepromRead@address,c
  5930  0020B2  0E00               	movlw	0
  5931  0020B4  6E38               	movwf	eepromRead@address+1,c
  5932  0020B6  0E00               	movlw	0
  5933  0020B8  6E39               	movwf	eepromRead@address+2,c
  5934  0020BA  0E00               	movlw	0
  5935  0020BC  6E3A               	movwf	eepromRead@address+3,c
  5936  0020BE  EC76  F01E         	call	_eepromRead	;wreg free
  5937  0020C2  C037  F112         	movff	?_eepromRead,_debug$1424
  5938  0020C6  C038  F113         	movff	?_eepromRead+1,_debug$1424+1
  5939                           
  5940                           ;main.c: 119: int* run = readPastRun(eepromRead(0));
  5941  0020CA  C112  F080         	movff	_debug$1424,readPastRun@run
  5942  0020CE  C113  F081         	movff	_debug$1424+1,readPastRun@run+1
  5943  0020D2  ECF1  F018         	call	_readPastRun	;wreg free
  5944  0020D6  C080  F110         	movff	?_readPastRun,debug@run_286
  5945  0020DA  C081  F111         	movff	?_readPastRun+1,debug@run_286+1
  5946                           
  5947                           ;main.c: 120: lcdClear();
  5948  0020DE  EC97  F01E         	call	_lcdClear	;wreg free
  5949                           
  5950                           ;main.c: 121: for(int i = 0; i < 7; i ++)
  5951  0020E2  0E00               	movlw	0
  5952  0020E4  0101               	movlb	1	; () banked
  5953  0020E6  6F16               	movwf	(debug@i_287+1)& (0+255),b
  5954  0020E8  0E00               	movlw	0
  5955  0020EA  6F15               	movwf	debug@i_287& (0+255),b
  5956  0020EC                     l7235:
  5957                           
  5958                           ; BSR set to: 1
  5959  0020EC  0101               	movlb	1	; () banked
  5960  0020EE  BF16               	btfsc	(debug@i_287+1)& (0+255),7,b
  5961  0020F0  D008               	goto	l7239
  5962  0020F2  0101               	movlb	1	; () banked
  5963  0020F4  5116               	movf	(debug@i_287+1)& (0+255),w,b
  5964  0020F6  E122               	bnz	l7245
  5965  0020F8  0E07               	movlw	7
  5966  0020FA  0101               	movlb	1	; () banked
  5967  0020FC  5D15               	subwf	debug@i_287& (0+255),w,b
  5968  0020FE  B0D8               	btfsc	status,0,c
  5969  002100  D01D               	goto	l7245
  5970  002102                     l7239:
  5971                           
  5972                           ; BSR set to: 1
  5973                           ;main.c: 122: printf("%d,",run[i]);
  5974  002102  0EF8               	movlw	low STR_3
  5975  002104  0100               	movlb	0	; () banked
  5976  002106  6FBD               	movwf	printf@f& (0+255),b
  5977  002108  0EFF               	movlw	high STR_3
  5978  00210A  0100               	movlb	0	; () banked
  5979  00210C  6FBE               	movwf	(printf@f+1)& (0+255),b
  5980  00210E  90D8               	bcf	status,0,c
  5981  002110  0101               	movlb	1	; () banked
  5982  002112  3515               	rlcf	debug@i_287& (0+255),w,b
  5983  002114  6ED9               	movwf	fsr2l,c
  5984  002116  0101               	movlb	1	; () banked
  5985  002118  3516               	rlcf	(debug@i_287+1)& (0+255),w,b
  5986  00211A  6EDA               	movwf	fsr2h,c
  5987  00211C  0101               	movlb	1	; () banked
  5988  00211E  5110               	movf	debug@run_286& (0+255),w,b
  5989  002120  26D9               	addwf	fsr2l,f,c
  5990  002122  0101               	movlb	1	; () banked
  5991  002124  5111               	movf	(debug@run_286+1)& (0+255),w,b
  5992  002126  22DA               	addwfc	fsr2h,f,c
  5993  002128  CFDE F0BF          	movff	postinc2,?_printf+2
  5994  00212C  CFDD F0C0          	movff	postdec2,?_printf+3
  5995  002130  EC09  F000         	call	_printf	;wreg free
  5996  002134  0101               	movlb	1	; () banked
  5997  002136  4B15               	infsnz	debug@i_287& (0+255),f,b
  5998  002138  2B16               	incf	(debug@i_287+1)& (0+255),f,b
  5999  00213A  D7D8               	goto	l7235
  6000  00213C                     l7245:
  6001                           
  6002                           ; BSR set to: 1
  6003                           ;main.c: 124: }
  6004                           ;main.c: 125: printf("f");
  6005  00213C  0ED2               	movlw	low (STR_9+13)
  6006  00213E  0100               	movlb	0	; () banked
  6007  002140  6FBD               	movwf	printf@f& (0+255),b
  6008  002142  0EFF               	movlw	high (STR_9+13)
  6009  002144  0100               	movlb	0	; () banked
  6010  002146  6FBE               	movwf	(printf@f+1)& (0+255),b
  6011  002148  EC09  F000         	call	_printf	;wreg free
  6012  00214C  D72F               	goto	l7199
  6013  00214E                     l148:
  6014  00214E  D7FF               	goto	l148
  6015  002150                     __end_of_debug:
  6016                           	opt stack 0
  6017                           tblptru	equ	0xFF8
  6018                           tblptrh	equ	0xFF7
  6019                           tblptrl	equ	0xFF6
  6020                           tablat	equ	0xFF5
  6021                           intcon	equ	0xFF2
  6022                           postinc0	equ	0xFEE
  6023                           wreg	equ	0xFE8
  6024                           postdec1	equ	0xFE5
  6025                           fsr1l	equ	0xFE1
  6026                           indf2	equ	0xFDF
  6027                           postinc2	equ	0xFDE
  6028                           postdec2	equ	0xFDD
  6029                           fsr2h	equ	0xFDA
  6030                           fsr2l	equ	0xFD9
  6031                           status	equ	0xFD8
  6032                           
  6033 ;; *************** function _saveNewRun *****************
  6034 ;; Defined at:
  6035 ;;		line 31 in file "eeprom.c"
  6036 ;; Parameters:    Size  Location     Type
  6037 ;;  data            2    9[BANK0 ] PTR int 
  6038 ;;		 -> debug@run(14), 
  6039 ;; Auto vars:     Size  Location     Type
  6040 ;;  i               2   13[BANK0 ] int 
  6041 ;;  n               2   11[BANK0 ] int 
  6042 ;; Return value:  Size  Location     Type
  6043 ;;                  1    wreg      void 
  6044 ;; Registers used:
  6045 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6046 ;; Tracked objects:
  6047 ;;		On entry : 0/0
  6048 ;;		On exit  : 0/0
  6049 ;;		Unchanged: 0/0
  6050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6051 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6052 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6054 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6055 ;;Total ram usage:        6 bytes
  6056 ;; Hardware stack levels used:    1
  6057 ;; Hardware stack levels required when called:    4
  6058 ;; This function calls:
  6059 ;;		___wmul
  6060 ;;		_eepromRead
  6061 ;;		_eepromWrite
  6062 ;; This function is called by:
  6063 ;;		_debug
  6064 ;; This function uses a non-reentrant model
  6065 ;;
  6066                           
  6067                           	psect	text22
  6068  002C76                     __ptext22:
  6069                           	opt stack 0
  6070  002C76                     _saveNewRun:
  6071                           	opt stack 25
  6072                           
  6073                           ;eeprom.c: 33: eepromWrite(eepromRead(0)+1,0);
  6074                           
  6075                           ;incstack = 0
  6076  002C76  0E00               	movlw	0
  6077  002C78  6E37               	movwf	eepromRead@address,c
  6078  002C7A  0E00               	movlw	0
  6079  002C7C  6E38               	movwf	eepromRead@address+1,c
  6080  002C7E  0E00               	movlw	0
  6081  002C80  6E39               	movwf	eepromRead@address+2,c
  6082  002C82  0E00               	movlw	0
  6083  002C84  6E3A               	movwf	eepromRead@address+3,c
  6084  002C86  EC76  F01E         	call	_eepromRead	;wreg free
  6085  002C8A  0E01               	movlw	1
  6086  002C8C  2437               	addwf	?_eepromRead,w,c
  6087  002C8E  0100               	movlb	0	; () banked
  6088  002C90  6F80               	movwf	eepromWrite@data& (0+255),b
  6089  002C92  0E00               	movlw	0
  6090  002C94  2038               	addwfc	?_eepromRead+1,w,c
  6091  002C96  0100               	movlb	0	; () banked
  6092  002C98  6F81               	movwf	(eepromWrite@data+1)& (0+255),b
  6093  002C9A  0E00               	movlw	0
  6094  002C9C  0100               	movlb	0	; () banked
  6095  002C9E  6F82               	movwf	eepromWrite@address& (0+255),b
  6096  002CA0  0E00               	movlw	0
  6097  002CA2  6F83               	movwf	(eepromWrite@address+1)& (0+255),b
  6098  002CA4  0E00               	movlw	0
  6099  002CA6  6F84               	movwf	(eepromWrite@address+2)& (0+255),b
  6100  002CA8  0E00               	movlw	0
  6101  002CAA  6F85               	movwf	(eepromWrite@address+3)& (0+255),b
  6102  002CAC  EC51  F01C         	call	_eepromWrite	;wreg free
  6103                           
  6104                           ;eeprom.c: 34: int n = eepromRead(0);
  6105  002CB0  0E00               	movlw	0
  6106  002CB2  6E37               	movwf	eepromRead@address,c
  6107  002CB4  0E00               	movlw	0
  6108  002CB6  6E38               	movwf	eepromRead@address+1,c
  6109  002CB8  0E00               	movlw	0
  6110  002CBA  6E39               	movwf	eepromRead@address+2,c
  6111  002CBC  0E00               	movlw	0
  6112  002CBE  6E3A               	movwf	eepromRead@address+3,c
  6113  002CC0  EC76  F01E         	call	_eepromRead	;wreg free
  6114  002CC4  C037  F08B         	movff	?_eepromRead,saveNewRun@n
  6115  002CC8  C038  F08C         	movff	?_eepromRead+1,saveNewRun@n+1
  6116                           
  6117                           ;eeprom.c: 36: for(int i = 0; i < 7; i++){
  6118  002CCC  0E00               	movlw	0
  6119  002CCE  0100               	movlb	0	; () banked
  6120  002CD0  6F8E               	movwf	(saveNewRun@i+1)& (0+255),b
  6121  002CD2  0E00               	movlw	0
  6122  002CD4  6F8D               	movwf	saveNewRun@i& (0+255),b
  6123  002CD6                     l6985:
  6124                           
  6125                           ; BSR set to: 0
  6126  002CD6  0100               	movlb	0	; () banked
  6127  002CD8  BF8E               	btfsc	(saveNewRun@i+1)& (0+255),7,b
  6128  002CDA  D008               	goto	l6989
  6129  002CDC  0100               	movlb	0	; () banked
  6130  002CDE  518E               	movf	(saveNewRun@i+1)& (0+255),w,b
  6131  002CE0  E13A               	bnz	l401
  6132  002CE2  0E07               	movlw	7
  6133  002CE4  0100               	movlb	0	; () banked
  6134  002CE6  5D8D               	subwf	saveNewRun@i& (0+255),w,b
  6135  002CE8  B0D8               	btfsc	status,0,c
  6136  002CEA  0012               	return	
  6137  002CEC                     l6989:
  6138                           
  6139                           ; BSR set to: 0
  6140                           ;eeprom.c: 37: eepromWrite(data[i], (n*7+1) + i);
  6141  002CEC  90D8               	bcf	status,0,c
  6142  002CEE  0100               	movlb	0	; () banked
  6143  002CF0  358D               	rlcf	saveNewRun@i& (0+255),w,b
  6144  002CF2  6ED9               	movwf	fsr2l,c
  6145  002CF4  0100               	movlb	0	; () banked
  6146  002CF6  358E               	rlcf	(saveNewRun@i+1)& (0+255),w,b
  6147  002CF8  6EDA               	movwf	fsr2h,c
  6148  002CFA  0100               	movlb	0	; () banked
  6149  002CFC  5189               	movf	saveNewRun@data& (0+255),w,b
  6150  002CFE  26D9               	addwf	fsr2l,f,c
  6151  002D00  0100               	movlb	0	; () banked
  6152  002D02  518A               	movf	(saveNewRun@data+1)& (0+255),w,b
  6153  002D04  22DA               	addwfc	fsr2h,f,c
  6154  002D06  CFDE F080          	movff	postinc2,eepromWrite@data
  6155  002D0A  CFDD F081          	movff	postdec2,eepromWrite@data+1
  6156  002D0E  C08B  F031         	movff	saveNewRun@n,___wmul@multiplier
  6157  002D12  C08C  F032         	movff	saveNewRun@n+1,___wmul@multiplier+1
  6158  002D16  0E00               	movlw	0
  6159  002D18  6E34               	movwf	___wmul@multiplicand+1,c
  6160  002D1A  0E07               	movlw	7
  6161  002D1C  6E33               	movwf	___wmul@multiplicand,c
  6162  002D1E  EC11  F01E         	call	___wmul	;wreg free
  6163  002D22  0100               	movlb	0	; () banked
  6164  002D24  518D               	movf	saveNewRun@i& (0+255),w,b
  6165  002D26  2631               	addwf	?___wmul,f,c
  6166  002D28  0100               	movlb	0	; () banked
  6167  002D2A  518E               	movf	(saveNewRun@i+1)& (0+255),w,b
  6168  002D2C  2232               	addwfc	?___wmul+1,f,c
  6169  002D2E  0E01               	movlw	1
  6170  002D30  2631               	addwf	?___wmul,f,c
  6171  002D32  0E00               	movlw	0
  6172  002D34  2232               	addwfc	?___wmul+1,f,c
  6173  002D36  C031  F082         	movff	?___wmul,eepromWrite@address
  6174  002D3A  C032  F083         	movff	?___wmul+1,eepromWrite@address+1
  6175  002D3E  0100               	movlb	0	; () banked
  6176  002D40  0E00               	movlw	0
  6177  002D42  BF83               	btfsc	(eepromWrite@address+1)& (0+255),7,b
  6178  002D44  0EFF               	movlw	-1
  6179  002D46  6F84               	movwf	(eepromWrite@address+2)& (0+255),b
  6180  002D48  6F85               	movwf	(eepromWrite@address+3)& (0+255),b
  6181  002D4A  EC51  F01C         	call	_eepromWrite	;wreg free
  6182  002D4E  0100               	movlb	0	; () banked
  6183  002D50  4B8D               	infsnz	saveNewRun@i& (0+255),f,b
  6184  002D52  2B8E               	incf	(saveNewRun@i+1)& (0+255),f,b
  6185  002D54  D7C0               	goto	l6985
  6186  002D56                     l401:
  6187                           
  6188                           ; BSR set to: 0
  6189  002D56  0012               	return		;funcret
  6190  002D58                     __end_of_saveNewRun:
  6191                           	opt stack 0
  6192                           tblptru	equ	0xFF8
  6193                           tblptrh	equ	0xFF7
  6194                           tblptrl	equ	0xFF6
  6195                           tablat	equ	0xFF5
  6196                           intcon	equ	0xFF2
  6197                           postinc0	equ	0xFEE
  6198                           wreg	equ	0xFE8
  6199                           postdec1	equ	0xFE5
  6200                           fsr1l	equ	0xFE1
  6201                           indf2	equ	0xFDF
  6202                           postinc2	equ	0xFDE
  6203                           postdec2	equ	0xFDD
  6204                           fsr2h	equ	0xFDA
  6205                           fsr2l	equ	0xFD9
  6206                           status	equ	0xFD8
  6207                           
  6208 ;; *************** function _eepromWrite *****************
  6209 ;; Defined at:
  6210 ;;		line 41 in file "eeprom.c"
  6211 ;; Parameters:    Size  Location     Type
  6212 ;;  data            2    0[BANK0 ] int 
  6213 ;;  address         4    2[BANK0 ] long 
  6214 ;; Auto vars:     Size  Location     Type
  6215 ;;  ien             2    7[BANK0 ] int 
  6216 ;; Return value:  Size  Location     Type
  6217 ;;                  1    wreg      void 
  6218 ;; Registers used:
  6219 ;;		wreg, status,2, status,0
  6220 ;; Tracked objects:
  6221 ;;		On entry : 0/0
  6222 ;;		On exit  : 0/0
  6223 ;;		Unchanged: 0/0
  6224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6225 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6226 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6227 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6228 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6229 ;;Total ram usage:        9 bytes
  6230 ;; Hardware stack levels used:    1
  6231 ;; Hardware stack levels required when called:    3
  6232 ;; This function calls:
  6233 ;;		Nothing
  6234 ;; This function is called by:
  6235 ;;		_saveNewRun
  6236 ;; This function uses a non-reentrant model
  6237 ;;
  6238                           
  6239                           	psect	text23
  6240  0038A2                     __ptext23:
  6241                           	opt stack 0
  6242  0038A2                     _eepromWrite:
  6243                           	opt stack 25
  6244  0038A2                     l404:
  6245  0038A2  B2A6               	btfsc	4006,1,c	;volatile
  6246  0038A4  D7FE               	goto	l404
  6247                           
  6248                           ;eeprom.c: 45: int ien = INTCONbits.GIE;
  6249  0038A6  AEF2               	btfss	intcon,7,c	;volatile
  6250  0038A8  D004               	goto	u7420
  6251  0038AA  0100               	movlb	0	; () banked
  6252  0038AC  6B86               	clrf	??_eepromWrite& (0+255),b
  6253  0038AE  2B86               	incf	??_eepromWrite& (0+255),f,b
  6254  0038B0  D002               	goto	u7428
  6255  0038B2                     u7420:
  6256  0038B2  0100               	movlb	0	; () banked
  6257  0038B4  6B86               	clrf	??_eepromWrite& (0+255),b
  6258  0038B6                     u7428:
  6259  0038B6  0100               	movlb	0	; () banked
  6260  0038B8  5186               	movf	??_eepromWrite& (0+255),w,b
  6261  0038BA  0100               	movlb	0	; () banked
  6262  0038BC  6F87               	movwf	eepromWrite@ien& (0+255),b
  6263  0038BE  6B88               	clrf	(eepromWrite@ien+1)& (0+255),b
  6264                           
  6265                           ; BSR set to: 0
  6266                           ;eeprom.c: 46: (INTCONbits.GIE = 0);
  6267  0038C0  9EF2               	bcf	intcon,7,c	;volatile
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;eeprom.c: 47: EEADR = address;
  6271  0038C2  C082  FFA9         	movff	eepromWrite@address,4009	;volatile
  6272                           
  6273                           ; BSR set to: 0
  6274                           ;eeprom.c: 48: EEADRH = (address>>8) & 0b11;
  6275  0038C6  0100               	movlb	0	; () banked
  6276  0038C8  5183               	movf	(eepromWrite@address+1)& (0+255),w,b
  6277  0038CA  0B03               	andlw	3
  6278  0038CC  6EAA               	movwf	4010,c	;volatile
  6279                           
  6280                           ; BSR set to: 0
  6281                           ;eeprom.c: 49: EEDATA = data;
  6282  0038CE  C080  FFA8         	movff	eepromWrite@data,4008	;volatile
  6283                           
  6284                           ; BSR set to: 0
  6285                           ;eeprom.c: 50: EECON1 = 0b100;
  6286  0038D2  0E04               	movlw	4
  6287  0038D4  6EA6               	movwf	4006,c	;volatile
  6288                           
  6289                           ; BSR set to: 0
  6290                           ;eeprom.c: 52: EECON2 = 0x55;
  6291  0038D6  0E55               	movlw	85
  6292  0038D8  6EA7               	movwf	4007,c	;volatile
  6293                           
  6294                           ; BSR set to: 0
  6295                           ;eeprom.c: 53: EECON2 = 0xaa;
  6296  0038DA  0EAA               	movlw	170
  6297  0038DC  6EA7               	movwf	4007,c	;volatile
  6298                           
  6299                           ; BSR set to: 0
  6300                           ;eeprom.c: 57: EECON1 |= 0b10;
  6301  0038DE  82A6               	bsf	4006,1,c	;volatile
  6302  0038E0                     l407:
  6303  0038E0  B2A6               	btfsc	4006,1,c	;volatile
  6304  0038E2  D7FE               	goto	l407
  6305                           
  6306                           ;eeprom.c: 60: EEIF = 0;
  6307  0038E4  98A1               	bcf	4001,4,c	;volatile
  6308                           
  6309                           ;eeprom.c: 62: EECON1 = 0;
  6310  0038E6  0E00               	movlw	0
  6311  0038E8  6EA6               	movwf	4006,c	;volatile
  6312                           
  6313                           ;eeprom.c: 63: INTCONbits.GIE = ien;
  6314  0038EA  0100               	movlb	0	; () banked
  6315  0038EC  B187               	btfsc	eepromWrite@ien& (0+255),0,b
  6316  0038EE  D002               	bra	u7445
  6317  0038F0  9EF2               	bcf	intcon,7,c	;volatile
  6318  0038F2  D001               	bra	u7446
  6319  0038F4                     u7445:
  6320  0038F4  8EF2               	bsf	intcon,7,c	;volatile
  6321  0038F6                     u7446:
  6322  0038F6  0012               	return		;funcret
  6323  0038F8                     __end_of_eepromWrite:
  6324                           	opt stack 0
  6325                           tblptru	equ	0xFF8
  6326                           tblptrh	equ	0xFF7
  6327                           tblptrl	equ	0xFF6
  6328                           tablat	equ	0xFF5
  6329                           intcon	equ	0xFF2
  6330                           postinc0	equ	0xFEE
  6331                           wreg	equ	0xFE8
  6332                           postdec1	equ	0xFE5
  6333                           fsr1l	equ	0xFE1
  6334                           indf2	equ	0xFDF
  6335                           postinc2	equ	0xFDE
  6336                           postdec2	equ	0xFDD
  6337                           fsr2h	equ	0xFDA
  6338                           fsr2l	equ	0xFD9
  6339                           status	equ	0xFD8
  6340                           
  6341 ;; *************** function _readPastRun *****************
  6342 ;; Defined at:
  6343 ;;		line 23 in file "eeprom.c"
  6344 ;; Parameters:    Size  Location     Type
  6345 ;;  run             2    0[BANK0 ] int 
  6346 ;; Auto vars:     Size  Location     Type
  6347 ;;  i               2   16[BANK0 ] int 
  6348 ;;  data           14    2[BANK0 ] int [7]
  6349 ;; Return value:  Size  Location     Type
  6350 ;;                  2    0[BANK0 ] PTR int 
  6351 ;; Registers used:
  6352 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6353 ;; Tracked objects:
  6354 ;;		On entry : 0/0
  6355 ;;		On exit  : 0/0
  6356 ;;		Unchanged: 0/0
  6357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6358 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6359 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6361 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6362 ;;Total ram usage:       18 bytes
  6363 ;; Hardware stack levels used:    1
  6364 ;; Hardware stack levels required when called:    4
  6365 ;; This function calls:
  6366 ;;		___wmul
  6367 ;;		_eepromRead
  6368 ;; This function is called by:
  6369 ;;		_debug
  6370 ;; This function uses a non-reentrant model
  6371 ;;
  6372                           
  6373                           	psect	text24
  6374  0031E2                     __ptext24:
  6375                           	opt stack 0
  6376  0031E2                     _readPastRun:
  6377                           	opt stack 25
  6378                           
  6379                           ;eeprom.c: 24: int data[7];
  6380                           ;eeprom.c: 25: for(int i = 0; i < 7; i++){
  6381                           
  6382                           ;incstack = 0
  6383  0031E2  0E00               	movlw	0
  6384  0031E4  0100               	movlb	0	; () banked
  6385  0031E6  6F91               	movwf	(readPastRun@i+1)& (0+255),b
  6386  0031E8  0E00               	movlw	0
  6387  0031EA  6F90               	movwf	readPastRun@i& (0+255),b
  6388  0031EC                     l6997:
  6389                           
  6390                           ; BSR set to: 0
  6391  0031EC  0100               	movlb	0	; () banked
  6392  0031EE  BF91               	btfsc	(readPastRun@i+1)& (0+255),7,b
  6393  0031F0  D008               	goto	l7001
  6394  0031F2  0100               	movlb	0	; () banked
  6395  0031F4  5191               	movf	(readPastRun@i+1)& (0+255),w,b
  6396  0031F6  E137               	bnz	l7007
  6397  0031F8  0E07               	movlw	7
  6398  0031FA  0100               	movlb	0	; () banked
  6399  0031FC  5D90               	subwf	readPastRun@i& (0+255),w,b
  6400  0031FE  B0D8               	btfsc	status,0,c
  6401  003200  D032               	goto	l7007
  6402  003202                     l7001:
  6403                           
  6404                           ; BSR set to: 0
  6405                           ;eeprom.c: 26: data[i] = eepromRead((run*7+1) + i);
  6406  003202  C080  F031         	movff	readPastRun@run,___wmul@multiplier
  6407  003206  C081  F032         	movff	readPastRun@run+1,___wmul@multiplier+1
  6408  00320A  0E00               	movlw	0
  6409  00320C  6E34               	movwf	___wmul@multiplicand+1,c
  6410  00320E  0E07               	movlw	7
  6411  003210  6E33               	movwf	___wmul@multiplicand,c
  6412  003212  EC11  F01E         	call	___wmul	;wreg free
  6413  003216  0100               	movlb	0	; () banked
  6414  003218  5190               	movf	readPastRun@i& (0+255),w,b
  6415  00321A  2631               	addwf	?___wmul,f,c
  6416  00321C  0100               	movlb	0	; () banked
  6417  00321E  5191               	movf	(readPastRun@i+1)& (0+255),w,b
  6418  003220  2232               	addwfc	?___wmul+1,f,c
  6419  003222  0E01               	movlw	1
  6420  003224  2631               	addwf	?___wmul,f,c
  6421  003226  0E00               	movlw	0
  6422  003228  2232               	addwfc	?___wmul+1,f,c
  6423  00322A  C031  F037         	movff	?___wmul,eepromRead@address
  6424  00322E  C032  F038         	movff	?___wmul+1,eepromRead@address+1
  6425  003232  0E00               	movlw	0
  6426  003234  BE38               	btfsc	eepromRead@address+1,7,c
  6427  003236  0EFF               	movlw	-1
  6428  003238  6E39               	movwf	eepromRead@address+2,c
  6429  00323A  6E3A               	movwf	eepromRead@address+3,c
  6430  00323C  EC76  F01E         	call	_eepromRead	;wreg free
  6431  003240  90D8               	bcf	status,0,c
  6432  003242  0100               	movlb	0	; () banked
  6433  003244  3590               	rlcf	readPastRun@i& (0+255),w,b
  6434  003246  6ED9               	movwf	fsr2l,c
  6435  003248  0100               	movlb	0	; () banked
  6436  00324A  3591               	rlcf	(readPastRun@i+1)& (0+255),w,b
  6437  00324C  6EDA               	movwf	fsr2h,c
  6438  00324E  0E82               	movlw	low readPastRun@data
  6439  003250  26D9               	addwf	fsr2l,f,c
  6440  003252  0E00               	movlw	high readPastRun@data
  6441  003254  22DA               	addwfc	fsr2h,f,c
  6442  003256  C037  FFDE         	movff	?_eepromRead,postinc2
  6443  00325A  C038  FFDD         	movff	?_eepromRead+1,postdec2
  6444                           
  6445                           ; BSR set to: 0
  6446  00325E  0100               	movlb	0	; () banked
  6447  003260  4B90               	infsnz	readPastRun@i& (0+255),f,b
  6448  003262  2B91               	incf	(readPastRun@i+1)& (0+255),f,b
  6449  003264  D7C3               	goto	l6997
  6450  003266                     l7007:
  6451                           
  6452                           ; BSR set to: 0
  6453                           ;eeprom.c: 27: }
  6454                           ;eeprom.c: 28: return data;
  6455  003266  0E82               	movlw	low readPastRun@data
  6456  003268  0100               	movlb	0	; () banked
  6457  00326A  6F80               	movwf	?_readPastRun& (0+255),b
  6458  00326C  0E00               	movlw	high readPastRun@data
  6459  00326E  0100               	movlb	0	; () banked
  6460  003270  6F81               	movwf	(?_readPastRun+1)& (0+255),b
  6461  003272  0012               	return	
  6462  003274                     __end_of_readPastRun:
  6463                           	opt stack 0
  6464                           tblptru	equ	0xFF8
  6465                           tblptrh	equ	0xFF7
  6466                           tblptrl	equ	0xFF6
  6467                           tablat	equ	0xFF5
  6468                           intcon	equ	0xFF2
  6469                           postinc0	equ	0xFEE
  6470                           wreg	equ	0xFE8
  6471                           postdec1	equ	0xFE5
  6472                           fsr1l	equ	0xFE1
  6473                           indf2	equ	0xFDF
  6474                           postinc2	equ	0xFDE
  6475                           postdec2	equ	0xFDD
  6476                           fsr2h	equ	0xFDA
  6477                           fsr2l	equ	0xFD9
  6478                           status	equ	0xFD8
  6479                           
  6480 ;; *************** function _eepromRead *****************
  6481 ;; Defined at:
  6482 ;;		line 66 in file "eeprom.c"
  6483 ;; Parameters:    Size  Location     Type
  6484 ;;  address         4   54[COMRAM] long 
  6485 ;; Auto vars:     Size  Location     Type
  6486 ;;		None
  6487 ;; Return value:  Size  Location     Type
  6488 ;;                  2   54[COMRAM] int 
  6489 ;; Registers used:
  6490 ;;		wreg, status,2, status,0
  6491 ;; Tracked objects:
  6492 ;;		On entry : 0/0
  6493 ;;		On exit  : 0/0
  6494 ;;		Unchanged: 0/0
  6495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6496 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6499 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6500 ;;Total ram usage:        4 bytes
  6501 ;; Hardware stack levels used:    1
  6502 ;; Hardware stack levels required when called:    3
  6503 ;; This function calls:
  6504 ;;		Nothing
  6505 ;; This function is called by:
  6506 ;;		_debug
  6507 ;;		_readPastRun
  6508 ;;		_saveNewRun
  6509 ;; This function uses a non-reentrant model
  6510 ;;
  6511                           
  6512                           	psect	text25
  6513  003CEC                     __ptext25:
  6514                           	opt stack 0
  6515  003CEC                     _eepromRead:
  6516                           	opt stack 25
  6517                           
  6518                           ;eeprom.c: 67: EEADR = address;
  6519                           
  6520                           ; BSR set to: 0
  6521                           ;incstack = 0
  6522  003CEC  C037  FFA9         	movff	eepromRead@address,4009	;volatile
  6523                           
  6524                           ;eeprom.c: 68: EEADRH = (address>>8) & 0b11;
  6525  003CF0  5038               	movf	eepromRead@address+1,w,c
  6526  003CF2  0B03               	andlw	3
  6527  003CF4  6EAA               	movwf	4010,c	;volatile
  6528                           
  6529                           ;eeprom.c: 69: EECON1 = 0;
  6530  003CF6  0E00               	movlw	0
  6531  003CF8  6EA6               	movwf	4006,c	;volatile
  6532                           
  6533                           ;eeprom.c: 70: EECON1 = 1;
  6534  003CFA  0E01               	movlw	1
  6535  003CFC  6EA6               	movwf	4006,c	;volatile
  6536                           
  6537                           ;eeprom.c: 71: return EEDATA;
  6538  003CFE  CFA8 F037          	movff	4008,?_eepromRead	;volatile
  6539  003D02  6A38               	clrf	?_eepromRead+1,c
  6540  003D04  0012               	return	
  6541  003D06                     __end_of_eepromRead:
  6542                           	opt stack 0
  6543                           tblptru	equ	0xFF8
  6544                           tblptrh	equ	0xFF7
  6545                           tblptrl	equ	0xFF6
  6546                           tablat	equ	0xFF5
  6547                           intcon	equ	0xFF2
  6548                           postinc0	equ	0xFEE
  6549                           wreg	equ	0xFE8
  6550                           postdec1	equ	0xFE5
  6551                           fsr1l	equ	0xFE1
  6552                           indf2	equ	0xFDF
  6553                           postinc2	equ	0xFDE
  6554                           postdec2	equ	0xFDD
  6555                           fsr2h	equ	0xFDA
  6556                           fsr2l	equ	0xFD9
  6557                           status	equ	0xFD8
  6558                           
  6559 ;; *************** function _readKeypad *****************
  6560 ;; Defined at:
  6561 ;;		line 36 in file "keypad.c"
  6562 ;; Parameters:    Size  Location     Type
  6563 ;;		None
  6564 ;; Auto vars:     Size  Location     Type
  6565 ;;  key             1   34[COMRAM] unsigned char 
  6566 ;; Return value:  Size  Location     Type
  6567 ;;                  1    wreg      unsigned char 
  6568 ;; Registers used:
  6569 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  6570 ;; Tracked objects:
  6571 ;;		On entry : 0/0
  6572 ;;		On exit  : 0/0
  6573 ;;		Unchanged: 0/0
  6574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6576 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6578 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6579 ;;Total ram usage:        1 bytes
  6580 ;; Hardware stack levels used:    1
  6581 ;; Hardware stack levels required when called:    3
  6582 ;; This function calls:
  6583 ;;		Nothing
  6584 ;; This function is called by:
  6585 ;;		_debug
  6586 ;;		_main
  6587 ;;		_sortBattery
  6588 ;;		_showDateTime
  6589 ;;		_showMainMenu
  6590 ;;		_showRunSelect
  6591 ;;		_showRunMenu
  6592 ;;		_showRunTime
  6593 ;;		_showRunStats
  6594 ;;		_pause
  6595 ;; This function uses a non-reentrant model
  6596 ;;
  6597                           
  6598                           	psect	text26
  6599  003BFC                     __ptext26:
  6600                           	opt stack 0
  6601  003BFC                     _readKeypad:
  6602                           	opt stack 26
  6603  003BFC                     l272:
  6604  003BFC  A281               	btfss	3969,1,c	;volatile
  6605  003BFE  D7FE               	goto	l272
  6606                           
  6607                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  6608  003C00  3881               	swapf	3969,w,c	;volatile
  6609  003C02  0B0F               	andlw	15
  6610  003C04  0B0F               	andlw	15
  6611  003C06  6E23               	movwf	readKeypad@key,c
  6612  003C08                     l275:
  6613  003C08  B281               	btfsc	3969,1,c	;volatile
  6614  003C0A  D7FE               	goto	l275
  6615                           
  6616                           ;keypad.c: 40: return keys[key];
  6617  003C0C  5023               	movf	readKeypad@key,w,c
  6618  003C0E  0D01               	mullw	1
  6619  003C10  0EA7               	movlw	low _keys
  6620  003C12  24F3               	addwf	prodl,w,c
  6621  003C14  6EF6               	movwf	tblptrl,c
  6622  003C16  0EFE               	movlw	high _keys
  6623  003C18  20F4               	addwfc	prodh,w,c
  6624  003C1A  6EF7               	movwf	tblptrh,c
  6625  003C1C                     	if	0	;There are less than 3 active tblptr bytes
  6626  003C1C                     	endif
  6627  003C1C  0008               	tblrd		*
  6628  003C1E  50F5               	movf	tablat,w,c
  6629  003C20  0012               	return	
  6630  003C22                     __end_of_readKeypad:
  6631                           	opt stack 0
  6632                           tblptru	equ	0xFF8
  6633                           tblptrh	equ	0xFF7
  6634                           tblptrl	equ	0xFF6
  6635                           tablat	equ	0xFF5
  6636                           prodh	equ	0xFF4
  6637                           prodl	equ	0xFF3
  6638                           intcon	equ	0xFF2
  6639                           postinc0	equ	0xFEE
  6640                           wreg	equ	0xFE8
  6641                           postdec1	equ	0xFE5
  6642                           fsr1l	equ	0xFE1
  6643                           indf2	equ	0xFDF
  6644                           postinc2	equ	0xFDE
  6645                           postdec2	equ	0xFDD
  6646                           fsr2h	equ	0xFDA
  6647                           fsr2l	equ	0xFD9
  6648                           status	equ	0xFD8
  6649                           
  6650 ;; *************** function _printf *****************
  6651 ;; Defined at:
  6652 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6653 ;; Parameters:    Size  Location     Type
  6654 ;;  f               2   61[BANK0 ] PTR const unsigned char 
  6655 ;;		 -> STR_22(17), STR_21(18), STR_20(17), STR_19(18), 
  6656 ;;		 -> STR_18(17), STR_17(19), STR_16(17), STR_15(18), 
  6657 ;;		 -> STR_14(17), STR_13(18), STR_12(17), STR_11(18), 
  6658 ;;		 -> STR_10(8), STR_9(15), STR_8(14), STR_7(17), 
  6659 ;;		 -> STR_6(17), STR_5(8), STR_4(2), STR_3(4), 
  6660 ;;		 -> STR_2(6), STR_1(2), 
  6661 ;; Auto vars:     Size  Location     Type
  6662 ;;  idx             1   80[BANK0 ] unsigned char 
  6663 ;;  val             4   96[BANK0 ] unsigned long 
  6664 ;;  tmpval          4   87[BANK0 ] struct .
  6665 ;;  fval            3   93[BANK0 ] struct .
  6666 ;;  prec            2  104[BANK0 ] int 
  6667 ;;  flag            2  102[BANK0 ] unsigned short 
  6668 ;;  width           2  100[BANK0 ] int 
  6669 ;;  exp             2   91[BANK0 ] int 
  6670 ;;  ap              2   85[BANK0 ] PTR void [1]
  6671 ;;		 -> ?_printf(2), 
  6672 ;;  len             2   83[BANK0 ] unsigned int 
  6673 ;;  cp              2   81[BANK0 ] PTR const unsigned char 
  6674 ;;		 -> printf@c(1), 
  6675 ;;  c               1  106[BANK0 ] char 
  6676 ;;  d               1    0        unsigned char 
  6677 ;; Return value:  Size  Location     Type
  6678 ;;                  2   61[BANK0 ] int 
  6679 ;; Registers used:
  6680 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6681 ;; Tracked objects:
  6682 ;;		On entry : 0/0
  6683 ;;		On exit  : 0/0
  6684 ;;		Unchanged: 0/0
  6685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6686 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6687 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6688 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6689 ;;      Totals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6690 ;;Total ram usage:       46 bytes
  6691 ;; Hardware stack levels used:    1
  6692 ;; Hardware stack levels required when called:    7
  6693 ;; This function calls:
  6694 ;;		___awdiv
  6695 ;;		___ftadd
  6696 ;;		___ftge
  6697 ;;		___ftmul
  6698 ;;		___ftneg
  6699 ;;		___ftsub
  6700 ;;		___fttol
  6701 ;;		___lldiv
  6702 ;;		___llmod
  6703 ;;		___lltoft
  6704 ;;		___wmul
  6705 ;;		__div_to_l_
  6706 ;;		__tdiv_to_l_
  6707 ;;		_fround
  6708 ;;		_isdigit
  6709 ;;		_putch
  6710 ;;		_scale
  6711 ;; This function is called by:
  6712 ;;		_debug
  6713 ;;		_main
  6714 ;;		_sortBattery
  6715 ;;		_showDateTime
  6716 ;;		_showMainMenu
  6717 ;;		_showRunSelect
  6718 ;;		_showRunMenu
  6719 ;;		_showRunTime
  6720 ;;		_showRunStats
  6721 ;;		_pause
  6722 ;;		_testFrequency
  6723 ;; This function uses a non-reentrant model
  6724 ;;
  6725                           
  6726                           	psect	text27
  6727  000012                     __ptext27:
  6728                           	opt stack 0
  6729  000012                     _printf:
  6730                           	opt stack 22
  6731                           
  6732                           ;doprnt.c: 466: va_list ap;
  6733                           ;doprnt.c: 499: signed char c;
  6734                           ;doprnt.c: 501: int width;
  6735                           ;doprnt.c: 504: int prec;
  6736                           ;doprnt.c: 508: unsigned short flag;
  6737                           ;doprnt.c: 515: char d;
  6738                           ;doprnt.c: 516: double fval;
  6739                           ;doprnt.c: 517: int exp;
  6740                           ;doprnt.c: 523: union {
  6741                           ;doprnt.c: 524: unsigned long vd;
  6742                           ;doprnt.c: 525: double integ;
  6743                           ;doprnt.c: 526: } tmpval;
  6744                           ;doprnt.c: 528: unsigned long val;
  6745                           ;doprnt.c: 529: unsigned len;
  6746                           ;doprnt.c: 530: const char * cp;
  6747                           ;doprnt.c: 533: *ap = __va_start();
  6748                           
  6749                           ;incstack = 0
  6750  000012  0EBF               	movlw	low (?_printf+2)
  6751  000014  0100               	movlb	0	; () banked
  6752  000016  6FD5               	movwf	printf@ap& (0+255),b
  6753  000018  0E00               	movlw	high (?_printf+2)
  6754  00001A  0100               	movlb	0	; () banked
  6755  00001C  6FD6               	movwf	(printf@ap+1)& (0+255),b
  6756                           
  6757                           ;doprnt.c: 536: while(c = *f++) {
  6758  00001E  EFF5  F006         	goto	l6901
  6759  000022                     l6535:
  6760                           
  6761                           ; BSR set to: 0
  6762                           ;doprnt.c: 538: if(c != '%')
  6763  000022  0E25               	movlw	37
  6764  000024  0100               	movlb	0	; () banked
  6765  000026  19EA               	xorwf	printf@c& (0+255),w,b
  6766  000028  B4D8               	btfsc	status,2,c
  6767  00002A  D006               	goto	l6539
  6768                           
  6769                           ; BSR set to: 0
  6770                           ;doprnt.c: 540: {
  6771                           ;doprnt.c: 541: (putch(c) );
  6772  00002C  0100               	movlb	0	; () banked
  6773  00002E  51EA               	movf	printf@c& (0+255),w,b
  6774  000030  EC36  F01E         	call	_putch
  6775                           
  6776                           ;doprnt.c: 542: continue;
  6777  000034  EFF5  F006         	goto	l6901
  6778  000038                     l6539:
  6779                           
  6780                           ;doprnt.c: 543: }
  6781                           ;doprnt.c: 546: width = 0;
  6782  000038  0E00               	movlw	0
  6783  00003A  0100               	movlb	0	; () banked
  6784  00003C  6FE5               	movwf	(printf@width+1)& (0+255),b
  6785  00003E  0E00               	movlw	0
  6786  000040  6FE4               	movwf	printf@width& (0+255),b
  6787                           
  6788                           ;doprnt.c: 548: flag = 0;
  6789  000042  0E00               	movlw	0
  6790  000044  0100               	movlb	0	; () banked
  6791  000046  6FE7               	movwf	(printf@flag+1)& (0+255),b
  6792  000048  0E00               	movlw	0
  6793  00004A  6FE6               	movwf	printf@flag& (0+255),b
  6794                           
  6795                           ; BSR set to: 0
  6796                           ;doprnt.c: 551: switch(*f) {
  6797                           
  6798                           ;doprnt.c: 550: for(;;) {
  6799  00004C  D005               	goto	l6545
  6800  00004E                     l6541:
  6801                           
  6802                           ;doprnt.c: 580: flag |= 0x04;
  6803  00004E  0100               	movlb	0	; () banked
  6804  000050  85E6               	bsf	printf@flag& (0+255),2,b
  6805                           
  6806                           ;doprnt.c: 581: f++;
  6807  000052  0100               	movlb	0	; () banked
  6808  000054  4BBD               	infsnz	printf@f& (0+255),f,b
  6809  000056  2BBE               	incf	(printf@f+1)& (0+255),f,b
  6810  000058                     l6545:
  6811  000058  C0BD  FFF6         	movff	printf@f,tblptrl
  6812  00005C  C0BE  FFF7         	movff	printf@f+1,tblptrh
  6813  000060                     	if	0	;tblptru may be non-zero
  6814  000060                     	endif
  6815  000060                     	if	0	;tblptru may be non-zero
  6816  000060                     	endif
  6817  000060  0008               	tblrd		*
  6818  000062  50F5               	movf	tablat,w,c
  6819                           
  6820                           ; Switch size 1, requested type "space"
  6821                           ; Number of cases is 1, Range of values is 48 to 48
  6822                           ; switch strategies available:
  6823                           ; Name         Instructions Cycles
  6824                           ; simple_byte            4     3 (average)
  6825                           ;	Chosen strategy is simple_byte
  6826  000064  0A30               	xorlw	48	; case 48
  6827  000066  B4D8               	btfsc	status,2,c
  6828  000068  D7F2               	goto	l6541
  6829                           
  6830                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6831                           
  6832                           ;doprnt.c: 586: }
  6833                           
  6834                           ;doprnt.c: 585: break;
  6835  00006A  C0BD  FFF6         	movff	printf@f,tblptrl
  6836  00006E  C0BE  FFF7         	movff	printf@f+1,tblptrh
  6837  000072                     	if	0	;tblptru may be non-zero
  6838  000072                     	endif
  6839  000072                     	if	0	;tblptru may be non-zero
  6840  000072                     	endif
  6841  000072  0008               	tblrd		*
  6842  000074  50F5               	movf	tablat,w,c
  6843  000076  EC67  F01E         	call	_isdigit
  6844  00007A  A0D8               	btfss	status,0,c
  6845  00007C  D03F               	goto	l6559
  6846                           
  6847                           ;doprnt.c: 598: width = 0;
  6848  00007E  0E00               	movlw	0
  6849  000080  0100               	movlb	0	; () banked
  6850  000082  6FE5               	movwf	(printf@width+1)& (0+255),b
  6851  000084  0E00               	movlw	0
  6852  000086  6FE4               	movwf	printf@width& (0+255),b
  6853  000088                     l6551:
  6854                           
  6855                           ;doprnt.c: 600: width *= 10;
  6856  000088  C0E4  F031         	movff	printf@width,___wmul@multiplier
  6857  00008C  C0E5  F032         	movff	printf@width+1,___wmul@multiplier+1
  6858  000090  0E00               	movlw	0
  6859  000092  6E34               	movwf	___wmul@multiplicand+1,c
  6860  000094  0E0A               	movlw	10
  6861  000096  6E33               	movwf	___wmul@multiplicand,c
  6862  000098  EC11  F01E         	call	___wmul	;wreg free
  6863  00009C  C031  F0E4         	movff	?___wmul,printf@width
  6864  0000A0  C032  F0E5         	movff	?___wmul+1,printf@width+1
  6865                           
  6866                           ;doprnt.c: 601: width += *f++ - '0';
  6867  0000A4  0ED0               	movlw	208
  6868  0000A6  0100               	movlb	0	; () banked
  6869  0000A8  6FC7               	movwf	??_printf& (0+255),b
  6870  0000AA  0EFF               	movlw	255
  6871  0000AC  0100               	movlb	0	; () banked
  6872  0000AE  6FC8               	movwf	(??_printf+1)& (0+255),b
  6873  0000B0  C0BD  FFF6         	movff	printf@f,tblptrl
  6874  0000B4  C0BE  FFF7         	movff	printf@f+1,tblptrh
  6875  0000B8                     	if	0	;tblptru may be non-zero
  6876  0000B8                     	endif
  6877  0000B8                     	if	0	;tblptru may be non-zero
  6878  0000B8                     	endif
  6879  0000B8  0008               	tblrd		*
  6880  0000BA  50F5               	movf	tablat,w,c
  6881  0000BC  0100               	movlb	0	; () banked
  6882  0000BE  6FC9               	movwf	(??_printf+2)& (0+255),b
  6883  0000C0  6BCA               	clrf	(??_printf+3)& (0+255),b
  6884  0000C2  0100               	movlb	0	; () banked
  6885  0000C4  51C7               	movf	??_printf& (0+255),w,b
  6886  0000C6  0100               	movlb	0	; () banked
  6887  0000C8  27C9               	addwf	(??_printf+2)& (0+255),f,b
  6888  0000CA  0100               	movlb	0	; () banked
  6889  0000CC  51C8               	movf	(??_printf+1)& (0+255),w,b
  6890  0000CE  0100               	movlb	0	; () banked
  6891  0000D0  23CA               	addwfc	(??_printf+3)& (0+255),f,b
  6892  0000D2  0100               	movlb	0	; () banked
  6893  0000D4  51C9               	movf	(??_printf+2)& (0+255),w,b
  6894  0000D6  0100               	movlb	0	; () banked
  6895  0000D8  27E4               	addwf	printf@width& (0+255),f,b
  6896  0000DA  0100               	movlb	0	; () banked
  6897  0000DC  51CA               	movf	(??_printf+3)& (0+255),w,b
  6898  0000DE  0100               	movlb	0	; () banked
  6899  0000E0  23E5               	addwfc	(printf@width+1)& (0+255),f,b
  6900                           
  6901                           ; BSR set to: 0
  6902  0000E2  0100               	movlb	0	; () banked
  6903  0000E4  4BBD               	infsnz	printf@f& (0+255),f,b
  6904  0000E6  2BBE               	incf	(printf@f+1)& (0+255),f,b
  6905                           
  6906                           ; BSR set to: 0
  6907                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6908  0000E8  C0BD  FFF6         	movff	printf@f,tblptrl
  6909  0000EC  C0BE  FFF7         	movff	printf@f+1,tblptrh
  6910  0000F0                     	if	0	;tblptru may be non-zero
  6911  0000F0                     	endif
  6912  0000F0                     	if	0	;tblptru may be non-zero
  6913  0000F0                     	endif
  6914  0000F0  0008               	tblrd		*
  6915  0000F2  50F5               	movf	tablat,w,c
  6916  0000F4  EC67  F01E         	call	_isdigit
  6917  0000F8  B0D8               	btfsc	status,0,c
  6918  0000FA  D7C6               	goto	l6551
  6919  0000FC                     l6559:
  6920                           
  6921                           ;doprnt.c: 608: }
  6922                           ;doprnt.c: 611: if(*f == '.') {
  6923  0000FC  C0BD  FFF6         	movff	printf@f,tblptrl
  6924  000100  C0BE  FFF7         	movff	printf@f+1,tblptrh
  6925  000104                     	if	0	;tblptru may be non-zero
  6926  000104                     	endif
  6927  000104                     	if	0	;tblptru may be non-zero
  6928  000104                     	endif
  6929  000104  0008               	tblrd		*
  6930  000106  50F5               	movf	tablat,w,c
  6931  000108  0A2E               	xorlw	46
  6932  00010A  A4D8               	btfss	status,2,c
  6933  00010C  D034               	goto	l6571
  6934                           
  6935                           ;doprnt.c: 612: flag |= 0x4000;
  6936  00010E  0100               	movlb	0	; () banked
  6937  000110  8DE7               	bsf	(printf@flag+1)& (0+255),6,b
  6938                           
  6939                           ;doprnt.c: 613: f++;
  6940  000112  0100               	movlb	0	; () banked
  6941  000114  4BBD               	infsnz	printf@f& (0+255),f,b
  6942  000116  2BBE               	incf	(printf@f+1)& (0+255),f,b
  6943                           
  6944                           ; BSR set to: 0
  6945                           ;doprnt.c: 620: {
  6946                           ;doprnt.c: 621: prec = 0;
  6947  000118  0E00               	movlw	0
  6948  00011A  0100               	movlb	0	; () banked
  6949  00011C  6FE9               	movwf	(printf@prec+1)& (0+255),b
  6950  00011E  0E00               	movlw	0
  6951  000120  6FE8               	movwf	printf@prec& (0+255),b
  6952                           
  6953                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  6954  000122  D01E               	goto	l6569
  6955  000124                     l6565:
  6956                           
  6957                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  6958  000124  C0E8  F031         	movff	printf@prec,___wmul@multiplier
  6959  000128  C0E9  F032         	movff	printf@prec+1,___wmul@multiplier+1
  6960  00012C  0E00               	movlw	0
  6961  00012E  6E34               	movwf	___wmul@multiplicand+1,c
  6962  000130  0E0A               	movlw	10
  6963  000132  6E33               	movwf	___wmul@multiplicand,c
  6964  000134  EC11  F01E         	call	___wmul	;wreg free
  6965  000138  C0BD  FFF6         	movff	printf@f,tblptrl
  6966  00013C  C0BE  FFF7         	movff	printf@f+1,tblptrh
  6967  000140                     	if	0	;tblptru may be non-zero
  6968  000140                     	endif
  6969  000140                     	if	0	;tblptru may be non-zero
  6970  000140                     	endif
  6971  000140  0008               	tblrd		*
  6972  000142  50F5               	movf	tablat,w,c
  6973  000144  2631               	addwf	?___wmul,f,c
  6974  000146  0E00               	movlw	0
  6975  000148  2232               	addwfc	?___wmul+1,f,c
  6976  00014A  0ED0               	movlw	208
  6977  00014C  2431               	addwf	?___wmul,w,c
  6978  00014E  0100               	movlb	0	; () banked
  6979  000150  6FE8               	movwf	printf@prec& (0+255),b
  6980  000152  0EFF               	movlw	255
  6981  000154  2032               	addwfc	?___wmul+1,w,c
  6982  000156  0100               	movlb	0	; () banked
  6983  000158  6FE9               	movwf	(printf@prec+1)& (0+255),b
  6984                           
  6985                           ; BSR set to: 0
  6986  00015A  0100               	movlb	0	; () banked
  6987  00015C  4BBD               	infsnz	printf@f& (0+255),f,b
  6988  00015E  2BBE               	incf	(printf@f+1)& (0+255),f,b
  6989  000160                     l6569:
  6990                           
  6991                           ; BSR set to: 0
  6992  000160  C0BD  FFF6         	movff	printf@f,tblptrl
  6993  000164  C0BE  FFF7         	movff	printf@f+1,tblptrh
  6994  000168                     	if	0	;tblptru may be non-zero
  6995  000168                     	endif
  6996  000168                     	if	0	;tblptru may be non-zero
  6997  000168                     	endif
  6998  000168  0008               	tblrd		*
  6999  00016A  50F5               	movf	tablat,w,c
  7000  00016C  EC67  F01E         	call	_isdigit
  7001  000170  A0D8               	btfss	status,0,c
  7002  000172  D07D               	goto	l6613
  7003  000174  D7D7               	goto	l6565
  7004  000176                     l6571:
  7005                           
  7006                           ;doprnt.c: 626: prec = 0;
  7007  000176  0E00               	movlw	0
  7008  000178  0100               	movlb	0	; () banked
  7009  00017A  6FE9               	movwf	(printf@prec+1)& (0+255),b
  7010  00017C  0E00               	movlw	0
  7011  00017E  6FE8               	movwf	printf@prec& (0+255),b
  7012                           
  7013                           ; BSR set to: 0
  7014                           ;doprnt.c: 628: flag |= 0x1000;
  7015  000180  0100               	movlb	0	; () banked
  7016  000182  89E7               	bsf	(printf@flag+1)& (0+255),4,b
  7017                           
  7018                           ; BSR set to: 0
  7019                           ;doprnt.c: 635: switch(c = *f++) {
  7020                           
  7021                           ;doprnt.c: 630: }
  7022                           ;doprnt.c: 633: loop:
  7023                           
  7024                           ; BSR set to: 0
  7025  000184  D074               	goto	l6613
  7026  000186                     l6575:
  7027                           
  7028                           ; BSR set to: 0
  7029                           ;doprnt.c: 643: flag |= 0x10;
  7030  000186  0100               	movlb	0	; () banked
  7031  000188  89E6               	bsf	printf@flag& (0+255),4,b
  7032                           
  7033                           ;doprnt.c: 644: goto loop;
  7034  00018A  D071               	goto	l6613
  7035  00018C                     l6577:
  7036                           
  7037                           ; BSR set to: 0
  7038                           ;doprnt.c: 663: flag |= 0x400;
  7039  00018C  0100               	movlb	0	; () banked
  7040  00018E  85E7               	bsf	(printf@flag+1)& (0+255),2,b
  7041                           
  7042                           ; BSR set to: 0
  7043                           ;doprnt.c: 698: case 'i':
  7044                           ;doprnt.c: 699: break;
  7045                           
  7046                           ; BSR set to: 0
  7047                           
  7048                           ;doprnt.c: 697: case 'd':
  7049                           
  7050                           ;doprnt.c: 664: break;
  7051  000190  D090               	goto	l6615
  7052  000192                     l6579:
  7053                           
  7054                           ; BSR set to: 0
  7055                           ;doprnt.c: 721: flag |= 0x80;
  7056  000192  0100               	movlb	0	; () banked
  7057  000194  8FE6               	bsf	printf@flag& (0+255),7,b
  7058                           
  7059                           ;doprnt.c: 723: break;
  7060  000196  D08D               	goto	l6615
  7061  000198                     l6581:
  7062                           
  7063                           ; BSR set to: 0
  7064                           ;doprnt.c: 753: if(prec && prec < len)
  7065  000198  0100               	movlb	0	; () banked
  7066  00019A  51E8               	movf	printf@prec& (0+255),w,b
  7067  00019C  0100               	movlb	0	; () banked
  7068  00019E  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  7069  0001A0  B4D8               	btfsc	status,2,c
  7070  0001A2  D00E               	goto	l6587
  7071                           
  7072                           ; BSR set to: 0
  7073  0001A4  0100               	movlb	0	; () banked
  7074  0001A6  51D3               	movf	printf@len& (0+255),w,b
  7075  0001A8  0100               	movlb	0	; () banked
  7076  0001AA  5DE8               	subwf	printf@prec& (0+255),w,b
  7077  0001AC  0100               	movlb	0	; () banked
  7078  0001AE  51D4               	movf	(printf@len+1)& (0+255),w,b
  7079  0001B0  0100               	movlb	0	; () banked
  7080  0001B2  59E9               	subwfb	(printf@prec+1)& (0+255),w,b
  7081  0001B4  B0D8               	btfsc	status,0,c
  7082  0001B6  D004               	goto	l6587
  7083                           
  7084                           ; BSR set to: 0
  7085                           ;doprnt.c: 754: len = prec;
  7086  0001B8  C0E8  F0D3         	movff	printf@prec,printf@len
  7087  0001BC  C0E9  F0D4         	movff	printf@prec+1,printf@len+1
  7088  0001C0                     l6587:
  7089                           
  7090                           ; BSR set to: 0
  7091                           ;doprnt.c: 757: if(width > len)
  7092  0001C0  0100               	movlb	0	; () banked
  7093  0001C2  51E4               	movf	printf@width& (0+255),w,b
  7094  0001C4  0100               	movlb	0	; () banked
  7095  0001C6  5DD3               	subwf	printf@len& (0+255),w,b
  7096  0001C8  0100               	movlb	0	; () banked
  7097  0001CA  51E5               	movf	(printf@width+1)& (0+255),w,b
  7098  0001CC  0100               	movlb	0	; () banked
  7099  0001CE  59D4               	subwfb	(printf@len+1)& (0+255),w,b
  7100  0001D0  B0D8               	btfsc	status,0,c
  7101  0001D2  D009               	goto	l6591
  7102                           
  7103                           ; BSR set to: 0
  7104                           ;doprnt.c: 758: width -= len;
  7105  0001D4  0100               	movlb	0	; () banked
  7106  0001D6  51D3               	movf	printf@len& (0+255),w,b
  7107  0001D8  0100               	movlb	0	; () banked
  7108  0001DA  5FE4               	subwf	printf@width& (0+255),f,b
  7109  0001DC  0100               	movlb	0	; () banked
  7110  0001DE  51D4               	movf	(printf@len+1)& (0+255),w,b
  7111  0001E0  0100               	movlb	0	; () banked
  7112  0001E2  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  7113  0001E4  D009               	goto	l6595
  7114  0001E6                     l6591:
  7115                           
  7116                           ; BSR set to: 0
  7117                           ;doprnt.c: 759: else
  7118                           ;doprnt.c: 760: width = 0;
  7119  0001E6  0E00               	movlw	0
  7120  0001E8  0100               	movlb	0	; () banked
  7121  0001EA  6FE5               	movwf	(printf@width+1)& (0+255),b
  7122  0001EC  0E00               	movlw	0
  7123  0001EE  6FE4               	movwf	printf@width& (0+255),b
  7124                           
  7125                           ; BSR set to: 0
  7126                           ;doprnt.c: 764: while(width--)
  7127  0001F0  D003               	goto	l6595
  7128  0001F2                     l6593:
  7129                           
  7130                           ; BSR set to: 0
  7131                           ;doprnt.c: 765: (putch(' ') );
  7132  0001F2  0E20               	movlw	32
  7133  0001F4  EC36  F01E         	call	_putch
  7134  0001F8                     l6595:
  7135  0001F8  0100               	movlb	0	; () banked
  7136  0001FA  07E4               	decf	printf@width& (0+255),f,b
  7137  0001FC  A0D8               	btfss	status,0,c
  7138  0001FE  07E5               	decf	(printf@width+1)& (0+255),f,b
  7139  000200  0100               	movlb	0	; () banked
  7140  000202  29E4               	incf	printf@width& (0+255),w,b
  7141  000204  E1F6               	bnz	l6593
  7142  000206  0100               	movlb	0	; () banked
  7143  000208  29E5               	incf	(printf@width+1)& (0+255),w,b
  7144  00020A  B4D8               	btfsc	status,2,c
  7145  00020C  D00B               	goto	l6601
  7146  00020E  D7F1               	goto	l6593
  7147  000210                     l6597:
  7148                           
  7149                           ; BSR set to: 0
  7150                           ;doprnt.c: 768: (putch(*cp++) );
  7151  000210  C0D1  FFD9         	movff	printf@cp,fsr2l
  7152  000214  C0D2  FFDA         	movff	printf@cp+1,fsr2h
  7153  000218  50DF               	movf	indf2,w,c
  7154  00021A  EC36  F01E         	call	_putch
  7155  00021E  0100               	movlb	0	; () banked
  7156  000220  4BD1               	infsnz	printf@cp& (0+255),f,b
  7157  000222  2BD2               	incf	(printf@cp+1)& (0+255),f,b
  7158  000224                     l6601:
  7159                           
  7160                           ; BSR set to: 0
  7161  000224  0100               	movlb	0	; () banked
  7162  000226  07D3               	decf	printf@len& (0+255),f,b
  7163  000228  A0D8               	btfss	status,0,c
  7164  00022A  07D4               	decf	(printf@len+1)& (0+255),f,b
  7165  00022C  0100               	movlb	0	; () banked
  7166  00022E  29D3               	incf	printf@len& (0+255),w,b
  7167  000230  E1EF               	bnz	l6597
  7168  000232  0100               	movlb	0	; () banked
  7169  000234  29D4               	incf	(printf@len+1)& (0+255),w,b
  7170  000236  B4D8               	btfsc	status,2,c
  7171  000238  EFF5  F006         	goto	l6901
  7172  00023C  D7E9               	goto	l6597
  7173  00023E                     l6603:
  7174                           
  7175                           ; BSR set to: 0
  7176                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  7177  00023E  C0D5  FFD9         	movff	printf@ap,fsr2l
  7178  000242  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  7179  000246  50DF               	movf	indf2,w,c
  7180  000248  0100               	movlb	0	; () banked
  7181  00024A  6FEA               	movwf	printf@c& (0+255),b
  7182                           
  7183                           ; BSR set to: 0
  7184  00024C  0E02               	movlw	2
  7185  00024E  0100               	movlb	0	; () banked
  7186  000250  27D5               	addwf	printf@ap& (0+255),f,b
  7187  000252  0E00               	movlw	0
  7188  000254  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  7189  000256                     l6607:
  7190                           
  7191                           ; BSR set to: 0
  7192                           ;doprnt.c: 805: cp = (char *)&c;
  7193  000256  0EEA               	movlw	low printf@c
  7194  000258  0100               	movlb	0	; () banked
  7195  00025A  6FD1               	movwf	printf@cp& (0+255),b
  7196  00025C  0E00               	movlw	high printf@c
  7197  00025E  0100               	movlb	0	; () banked
  7198  000260  6FD2               	movwf	(printf@cp+1)& (0+255),b
  7199                           
  7200                           ; BSR set to: 0
  7201                           ;doprnt.c: 806: len = 1;
  7202  000262  0E00               	movlw	0
  7203  000264  0100               	movlb	0	; () banked
  7204  000266  6FD4               	movwf	(printf@len+1)& (0+255),b
  7205  000268  0E01               	movlw	1
  7206  00026A  6FD3               	movwf	printf@len& (0+255),b
  7207                           
  7208                           ;doprnt.c: 807: goto dostring;
  7209  00026C  D795               	goto	l6581
  7210  00026E                     l6613:
  7211  00026E  C0BD  FFF6         	movff	printf@f,tblptrl
  7212  000272  C0BE  FFF7         	movff	printf@f+1,tblptrh
  7213  000276  0100               	movlb	0	; () banked
  7214  000278  4BBD               	infsnz	printf@f& (0+255),f,b
  7215  00027A  2BBE               	incf	(printf@f+1)& (0+255),f,b
  7216  00027C                     	if	0	;tblptru may be non-zero
  7217  00027C                     	endif
  7218  00027C                     	if	0	;tblptru may be non-zero
  7219  00027C                     	endif
  7220  00027C  0008               	tblrd		*
  7221  00027E  CFF5 F0EA          	movff	tablat,printf@c
  7222  000282  0100               	movlb	0	; () banked
  7223  000284  51EA               	movf	printf@c& (0+255),w,b
  7224                           
  7225                           ; Switch size 1, requested type "space"
  7226                           ; Number of cases is 7, Range of values is 0 to 120
  7227                           ; switch strategies available:
  7228                           ; Name         Instructions Cycles
  7229                           ; simple_byte           22    12 (average)
  7230                           ;	Chosen strategy is simple_byte
  7231  000286  0A00               	xorlw	0	; case 0
  7232  000288  B4D8               	btfsc	status,2,c
  7233  00028A  0012               	return	
  7234  00028C  0A63               	xorlw	99	; case 99
  7235  00028E  B4D8               	btfsc	status,2,c
  7236  000290  D7D6               	goto	l6603
  7237  000292  0A07               	xorlw	7	; case 100
  7238  000294  B4D8               	btfsc	status,2,c
  7239  000296  D00D               	goto	l6615
  7240  000298  0A02               	xorlw	2	; case 102
  7241  00029A  B4D8               	btfsc	status,2,c
  7242  00029C  D777               	goto	l6577
  7243  00029E  0A0F               	xorlw	15	; case 105
  7244  0002A0  B4D8               	btfsc	status,2,c
  7245  0002A2  D007               	goto	l6615
  7246  0002A4  0A05               	xorlw	5	; case 108
  7247  0002A6  B4D8               	btfsc	status,2,c
  7248  0002A8  D76E               	goto	l6575
  7249  0002AA  0A14               	xorlw	20	; case 120
  7250  0002AC  B4D8               	btfsc	status,2,c
  7251  0002AE  D771               	goto	l6579
  7252  0002B0  D7D2               	goto	l6607
  7253  0002B2                     l6615:
  7254                           
  7255                           ; BSR set to: 0
  7256                           ;doprnt.c: 825: if(flag & (0x700)) {
  7257  0002B2  0E07               	movlw	7
  7258  0002B4  0100               	movlb	0	; () banked
  7259  0002B6  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  7260  0002B8  B4D8               	btfsc	status,2,c
  7261  0002BA  D36D               	goto	l772
  7262                           
  7263                           ; BSR set to: 0
  7264                           ;doprnt.c: 827: if(flag & 0x1000)
  7265  0002BC  0100               	movlb	0	; () banked
  7266  0002BE  A9E7               	btfss	(printf@flag+1)& (0+255),4,b
  7267  0002C0  D005               	goto	l6621
  7268                           
  7269                           ; BSR set to: 0
  7270                           ;doprnt.c: 829: prec = 6;
  7271  0002C2  0E00               	movlw	0
  7272  0002C4  0100               	movlb	0	; () banked
  7273  0002C6  6FE9               	movwf	(printf@prec+1)& (0+255),b
  7274  0002C8  0E06               	movlw	6
  7275  0002CA  6FE8               	movwf	printf@prec& (0+255),b
  7276  0002CC                     l6621:
  7277                           
  7278                           ; BSR set to: 0
  7279                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  7280  0002CC  C0D5  FFD9         	movff	printf@ap,fsr2l
  7281  0002D0  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  7282  0002D4  CFDE F0DD          	movff	postinc2,printf@fval
  7283  0002D8  CFDE F0DE          	movff	postinc2,printf@fval+1
  7284  0002DC  CFDD F0DF          	movff	postdec2,printf@fval+2
  7285                           
  7286                           ; BSR set to: 0
  7287  0002E0  0E03               	movlw	3
  7288  0002E2  0100               	movlb	0	; () banked
  7289  0002E4  27D5               	addwf	printf@ap& (0+255),f,b
  7290  0002E6  0E00               	movlw	0
  7291  0002E8  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  7292                           
  7293                           ; BSR set to: 0
  7294                           ;doprnt.c: 831: if(fval < 0.0) {
  7295  0002EA  0100               	movlb	0	; () banked
  7296  0002EC  AFDF               	btfss	(printf@fval+2)& (0+255),7,b
  7297  0002EE  D011               	goto	l6631
  7298                           
  7299                           ; BSR set to: 0
  7300                           ;doprnt.c: 832: fval = -fval;
  7301  0002F0  C0DD  F023         	movff	printf@fval,___ftneg@f1
  7302  0002F4  C0DE  F024         	movff	printf@fval+1,___ftneg@f1+1
  7303  0002F8  C0DF  F025         	movff	printf@fval+2,___ftneg@f1+2
  7304  0002FC  EC24  F01E         	call	___ftneg	;wreg free
  7305  000300  C023  F0DD         	movff	?___ftneg,printf@fval
  7306  000304  C024  F0DE         	movff	?___ftneg+1,printf@fval+1
  7307  000308  C025  F0DF         	movff	?___ftneg+2,printf@fval+2
  7308                           
  7309                           ;doprnt.c: 833: flag |= 0x03;
  7310  00030C  0E03               	movlw	3
  7311  00030E  0100               	movlb	0	; () banked
  7312  000310  13E6               	iorwf	printf@flag& (0+255),f,b
  7313  000312                     l6631:
  7314                           
  7315                           ; BSR set to: 0
  7316                           ;doprnt.c: 834: }
  7317                           ;doprnt.c: 835: exp = 0;
  7318  000312  0E00               	movlw	0
  7319  000314  0100               	movlb	0	; () banked
  7320  000316  6FDC               	movwf	(printf@exp+1)& (0+255),b
  7321  000318  0E00               	movlw	0
  7322  00031A  6FDB               	movwf	printf@exp& (0+255),b
  7323                           
  7324                           ; BSR set to: 0
  7325                           ;doprnt.c: 836: if( fval!=0) {
  7326  00031C  0100               	movlb	0	; () banked
  7327  00031E  51DD               	movf	printf@fval& (0+255),w,b
  7328  000320  0100               	movlb	0	; () banked
  7329  000322  11DE               	iorwf	(printf@fval+1)& (0+255),w,b
  7330  000324  0100               	movlb	0	; () banked
  7331  000326  11DF               	iorwf	(printf@fval+2)& (0+255),w,b
  7332  000328  B4D8               	btfsc	status,2,c
  7333  00032A  D091               	goto	l6659
  7334                           
  7335                           ; BSR set to: 0
  7336                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  7337  00032C  0E82               	movlw	130
  7338  00032E  0100               	movlb	0	; () banked
  7339  000330  6FC7               	movwf	??_printf& (0+255),b
  7340  000332  0EFF               	movlw	255
  7341  000334  0100               	movlb	0	; () banked
  7342  000336  6FC8               	movwf	(??_printf+1)& (0+255),b
  7343  000338  C0DD  F0C9         	movff	printf@fval,??_printf+2
  7344  00033C  C0DE  F0CA         	movff	printf@fval+1,??_printf+3
  7345  000340  C0DF  F0CB         	movff	printf@fval+2,??_printf+4
  7346  000344  C0E0  F0CC         	movff	printf@fval+3,??_printf+5
  7347  000348  0E10               	movlw	16
  7348  00034A  D006               	goto	u6870
  7349  00034C                     u6875:
  7350  00034C  0100               	movlb	0	; () banked
  7351  00034E  90D8               	bcf	status,0,c
  7352  000350  33CC               	rrcf	(??_printf+5)& (0+255),f,b
  7353  000352  33CB               	rrcf	(??_printf+4)& (0+255),f,b
  7354  000354  33CA               	rrcf	(??_printf+3)& (0+255),f,b
  7355  000356  33C9               	rrcf	(??_printf+2)& (0+255),f,b
  7356  000358                     u6870:
  7357  000358  2EE8               	decfsz	wreg,f,c
  7358  00035A  D7F8               	goto	u6875
  7359  00035C  0100               	movlb	0	; () banked
  7360  00035E  51C9               	movf	(??_printf+2)& (0+255),w,b
  7361  000360  0100               	movlb	0	; () banked
  7362  000362  25C7               	addwf	??_printf& (0+255),w,b
  7363  000364  0100               	movlb	0	; () banked
  7364  000366  6FDB               	movwf	printf@exp& (0+255),b
  7365  000368  0E00               	movlw	0
  7366  00036A  0100               	movlb	0	; () banked
  7367  00036C  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  7368  00036E  0100               	movlb	0	; () banked
  7369  000370  6FDC               	movwf	(printf@exp+1)& (0+255),b
  7370                           
  7371                           ; BSR set to: 0
  7372                           ;doprnt.c: 838: exp--;
  7373  000372  0100               	movlb	0	; () banked
  7374  000374  07DB               	decf	printf@exp& (0+255),f,b
  7375  000376  A0D8               	btfss	status,0,c
  7376  000378  07DC               	decf	(printf@exp+1)& (0+255),f,b
  7377                           
  7378                           ; BSR set to: 0
  7379                           ;doprnt.c: 839: exp *= 3;
  7380  00037A  C0DB  F031         	movff	printf@exp,___wmul@multiplier
  7381  00037E  C0DC  F032         	movff	printf@exp+1,___wmul@multiplier+1
  7382  000382  0E00               	movlw	0
  7383  000384  6E34               	movwf	___wmul@multiplicand+1,c
  7384  000386  0E03               	movlw	3
  7385  000388  6E33               	movwf	___wmul@multiplicand,c
  7386  00038A  EC11  F01E         	call	___wmul	;wreg free
  7387  00038E  C031  F0DB         	movff	?___wmul,printf@exp
  7388  000392  C032  F0DC         	movff	?___wmul+1,printf@exp+1
  7389                           
  7390                           ;doprnt.c: 840: exp /= 10;
  7391  000396  C0DB  F029         	movff	printf@exp,___awdiv@dividend
  7392  00039A  C0DC  F02A         	movff	printf@exp+1,___awdiv@dividend+1
  7393  00039E  0E00               	movlw	0
  7394  0003A0  6E2C               	movwf	___awdiv@divisor+1,c
  7395  0003A2  0E0A               	movlw	10
  7396  0003A4  6E2B               	movwf	___awdiv@divisor,c
  7397  0003A6  ECC8  F019         	call	___awdiv	;wreg free
  7398  0003AA  C029  F0DB         	movff	?___awdiv,printf@exp
  7399  0003AE  C02A  F0DC         	movff	?___awdiv+1,printf@exp+1
  7400                           
  7401                           ;doprnt.c: 841: if(exp < 0)
  7402  0003B2  0100               	movlb	0	; () banked
  7403  0003B4  AFDC               	btfss	(printf@exp+1)& (0+255),7,b
  7404  0003B6  D004               	goto	l6647
  7405                           
  7406                           ; BSR set to: 0
  7407                           ;doprnt.c: 842: exp--;
  7408  0003B8  0100               	movlb	0	; () banked
  7409  0003BA  07DB               	decf	printf@exp& (0+255),f,b
  7410  0003BC  A0D8               	btfss	status,0,c
  7411  0003BE  07DC               	decf	(printf@exp+1)& (0+255),f,b
  7412  0003C0                     l6647:
  7413                           
  7414                           ; BSR set to: 0
  7415                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  7416  0003C0  0100               	movlb	0	; () banked
  7417  0003C2  51DB               	movf	printf@exp& (0+255),w,b
  7418  0003C4  0800               	sublw	0
  7419  0003C6  EC79  F009         	call	_scale
  7420  0003CA  C098  F0D7         	movff	?_scale,printf@tmpval
  7421  0003CE  C099  F0D8         	movff	?_scale+1,printf@tmpval+1
  7422  0003D2  C09A  F0D9         	movff	?_scale+2,printf@tmpval+2
  7423                           
  7424                           ;doprnt.c: 847: tmpval.integ *= fval;
  7425  0003D6  C0D7  F089         	movff	printf@tmpval,___ftmul@f1
  7426  0003DA  C0D8  F08A         	movff	printf@tmpval+1,___ftmul@f1+1
  7427  0003DE  C0D9  F08B         	movff	printf@tmpval+2,___ftmul@f1+2
  7428  0003E2  C0DD  F08C         	movff	printf@fval,___ftmul@f2
  7429  0003E6  C0DE  F08D         	movff	printf@fval+1,___ftmul@f2+1
  7430  0003EA  C0DF  F08E         	movff	printf@fval+2,___ftmul@f2+2
  7431  0003EE  ECA8  F010         	call	___ftmul	;wreg free
  7432  0003F2  C089  F0D7         	movff	?___ftmul,printf@tmpval
  7433  0003F6  C08A  F0D8         	movff	?___ftmul+1,printf@tmpval+1
  7434  0003FA  C08B  F0D9         	movff	?___ftmul+2,printf@tmpval+2
  7435                           
  7436                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  7437  0003FE  C0D7  F02F         	movff	printf@tmpval,___ftge@ff1
  7438  000402  C0D8  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  7439  000406  C0D9  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  7440  00040A  0E00               	movlw	0
  7441  00040C  6E32               	movwf	___ftge@ff2,c
  7442  00040E  0E80               	movlw	128
  7443  000410  6E33               	movwf	___ftge@ff2+1,c
  7444  000412  0E3F               	movlw	63
  7445  000414  6E34               	movwf	___ftge@ff2+2,c
  7446  000416  EC3A  F019         	call	___ftge	;wreg free
  7447  00041A  B0D8               	btfsc	status,0,c
  7448  00041C  D005               	goto	l6655
  7449                           
  7450                           ;doprnt.c: 849: exp--;
  7451  00041E  0100               	movlb	0	; () banked
  7452  000420  07DB               	decf	printf@exp& (0+255),f,b
  7453  000422  A0D8               	btfss	status,0,c
  7454  000424  07DC               	decf	(printf@exp+1)& (0+255),f,b
  7455  000426  D013               	goto	l6659
  7456  000428                     l6655:
  7457                           
  7458                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  7459  000428  C0D7  F02F         	movff	printf@tmpval,___ftge@ff1
  7460  00042C  C0D8  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  7461  000430  C0D9  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  7462  000434  0E00               	movlw	0
  7463  000436  6E32               	movwf	___ftge@ff2,c
  7464  000438  0E20               	movlw	32
  7465  00043A  6E33               	movwf	___ftge@ff2+1,c
  7466  00043C  0E41               	movlw	65
  7467  00043E  6E34               	movwf	___ftge@ff2+2,c
  7468  000440  EC3A  F019         	call	___ftge	;wreg free
  7469  000444  A0D8               	btfss	status,0,c
  7470  000446  D003               	goto	l6659
  7471                           
  7472                           ;doprnt.c: 851: exp++;
  7473  000448  0100               	movlb	0	; () banked
  7474  00044A  4BDB               	infsnz	printf@exp& (0+255),f,b
  7475  00044C  2BDC               	incf	(printf@exp+1)& (0+255),f,b
  7476  00044E                     l6659:
  7477                           
  7478                           ;doprnt.c: 852: }
  7479                           ;doprnt.c: 1112: if(prec <= 12)
  7480  00044E  0100               	movlb	0	; () banked
  7481  000450  BFE9               	btfsc	(printf@prec+1)& (0+255),7,b
  7482  000452  D008               	goto	l6661
  7483  000454  0100               	movlb	0	; () banked
  7484  000456  51E9               	movf	(printf@prec+1)& (0+255),w,b
  7485  000458  E11D               	bnz	l6663
  7486  00045A  0E0D               	movlw	13
  7487  00045C  0100               	movlb	0	; () banked
  7488  00045E  5DE8               	subwf	printf@prec& (0+255),w,b
  7489  000460  B0D8               	btfsc	status,0,c
  7490  000462  D018               	goto	l6663
  7491  000464                     l6661:
  7492                           
  7493                           ; BSR set to: 0
  7494                           ;doprnt.c: 1113: fval += fround(prec);
  7495  000464  C0DD  F0A2         	movff	printf@fval,___ftadd@f1
  7496  000468  C0DE  F0A3         	movff	printf@fval+1,___ftadd@f1+1
  7497  00046C  C0DF  F0A4         	movff	printf@fval+2,___ftadd@f1+2
  7498  000470  0100               	movlb	0	; () banked
  7499  000472  51E8               	movf	printf@prec& (0+255),w,b
  7500  000474  ECA2  F00E         	call	_fround
  7501  000478  C098  F0A5         	movff	?_fround,___ftadd@f2
  7502  00047C  C099  F0A6         	movff	?_fround+1,___ftadd@f2+1
  7503  000480  C09A  F0A7         	movff	?_fround+2,___ftadd@f2+2
  7504  000484  EC6E  F00D         	call	___ftadd	;wreg free
  7505  000488  C0A2  F0DD         	movff	?___ftadd,printf@fval
  7506  00048C  C0A3  F0DE         	movff	?___ftadd+1,printf@fval+1
  7507  000490  C0A4  F0DF         	movff	?___ftadd+2,printf@fval+2
  7508  000494                     l6663:
  7509                           
  7510                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  7511  000494  0100               	movlb	0	; () banked
  7512  000496  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  7513  000498  D008               	goto	l6665
  7514  00049A  0100               	movlb	0	; () banked
  7515  00049C  51DC               	movf	(printf@exp+1)& (0+255),w,b
  7516  00049E  E12A               	bnz	l6671
  7517  0004A0  0E0A               	movlw	10
  7518  0004A2  0100               	movlb	0	; () banked
  7519  0004A4  5DDB               	subwf	printf@exp& (0+255),w,b
  7520  0004A6  B0D8               	btfsc	status,0,c
  7521  0004A8  D025               	goto	l6671
  7522  0004AA                     l6665:
  7523                           
  7524                           ; BSR set to: 0
  7525  0004AA  0100               	movlb	0	; () banked
  7526  0004AC  51DD               	movf	printf@fval& (0+255),w,b
  7527  0004AE  0100               	movlb	0	; () banked
  7528  0004B0  11DE               	iorwf	(printf@fval+1)& (0+255),w,b
  7529  0004B2  0100               	movlb	0	; () banked
  7530  0004B4  11DF               	iorwf	(printf@fval+2)& (0+255),w,b
  7531  0004B6  B4D8               	btfsc	status,2,c
  7532  0004B8  D05F               	goto	l6685
  7533                           
  7534                           ; BSR set to: 0
  7535  0004BA  C0DD  F0AE         	movff	printf@fval,___fttol@f1
  7536  0004BE  C0DE  F0AF         	movff	printf@fval+1,___fttol@f1+1
  7537  0004C2  C0DF  F0B0         	movff	printf@fval+2,___fttol@f1+2
  7538  0004C6  EC03  F012         	call	___fttol	;wreg free
  7539  0004CA  0100               	movlb	0	; () banked
  7540  0004CC  51AE               	movf	?___fttol& (0+255),w,b
  7541  0004CE  0100               	movlb	0	; () banked
  7542  0004D0  11AF               	iorwf	(?___fttol+1)& (0+255),w,b
  7543  0004D2  0100               	movlb	0	; () banked
  7544  0004D4  11B0               	iorwf	(?___fttol+2)& (0+255),w,b
  7545  0004D6  0100               	movlb	0	; () banked
  7546  0004D8  11B1               	iorwf	(?___fttol+3)& (0+255),w,b
  7547  0004DA  A4D8               	btfss	status,2,c
  7548  0004DC  D04D               	goto	l6685
  7549                           
  7550                           ; BSR set to: 0
  7551  0004DE  0100               	movlb	0	; () banked
  7552  0004E0  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  7553  0004E2  D04A               	goto	l6685
  7554  0004E4  0100               	movlb	0	; () banked
  7555  0004E6  51DC               	movf	(printf@exp+1)& (0+255),w,b
  7556  0004E8  E105               	bnz	l6671
  7557  0004EA  0E02               	movlw	2
  7558  0004EC  0100               	movlb	0	; () banked
  7559  0004EE  5DDB               	subwf	printf@exp& (0+255),w,b
  7560  0004F0  A0D8               	btfss	status,0,c
  7561  0004F2  D042               	goto	l6685
  7562  0004F4                     l6671:
  7563                           
  7564                           ; BSR set to: 0
  7565                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  7566  0004F4  C0D7  F02F         	movff	printf@tmpval,___ftge@ff1
  7567  0004F8  C0D8  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  7568  0004FC  C0D9  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  7569  000500  0E70               	movlw	112
  7570  000502  6E32               	movwf	___ftge@ff2,c
  7571  000504  0E89               	movlw	137
  7572  000506  6E33               	movwf	___ftge@ff2+1,c
  7573  000508  0E40               	movlw	64
  7574  00050A  6E34               	movwf	___ftge@ff2+2,c
  7575  00050C  EC3A  F019         	call	___ftge	;wreg free
  7576  000510  B0D8               	btfsc	status,0,c
  7577  000512  D003               	goto	l6675
  7578                           
  7579                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  7580  000514  0100               	movlb	0	; () banked
  7581  000516  0EF7               	movlw	247
  7582  000518  D002               	goto	L1
  7583  00051A                     l6675:
  7584                           
  7585                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  7586  00051A  0100               	movlb	0	; () banked
  7587  00051C  0EF8               	movlw	248
  7588  00051E                     L1:
  7589  00051E  27DB               	addwf	printf@exp& (0+255),f,b
  7590  000520  0EFF               	movlw	255
  7591  000522  23DC               	addwfc	(printf@exp+1)& (0+255),f,b
  7592                           
  7593                           ; BSR set to: 0
  7594                           ;doprnt.c: 1124: }
  7595                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  7596                           
  7597                           ; BSR set to: 0
  7598  000524  0100               	movlb	0	; () banked
  7599  000526  51DB               	movf	printf@exp& (0+255),w,b
  7600  000528  EC79  F009         	call	_scale
  7601  00052C  C098  F0D7         	movff	?_scale,printf@tmpval
  7602  000530  C099  F0D8         	movff	?_scale+1,printf@tmpval+1
  7603  000534  C09A  F0D9         	movff	?_scale+2,printf@tmpval+2
  7604                           
  7605                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  7606  000538  C0DD  F023         	movff	printf@fval,__tdiv_to_l_@f1
  7607  00053C  C0DE  F024         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  7608  000540  C0DF  F025         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  7609  000544  C0D7  F026         	movff	printf@tmpval,__tdiv_to_l_@f2
  7610  000548  C0D8  F027         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  7611  00054C  C0D9  F028         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  7612  000550  ECA5  F012         	call	__tdiv_to_l_	;wreg free
  7613  000554  C023  F0E0         	movff	?__tdiv_to_l_,printf@val
  7614  000558  C024  F0E1         	movff	?__tdiv_to_l_+1,printf@val+1
  7615  00055C  C025  F0E2         	movff	?__tdiv_to_l_+2,printf@val+2
  7616  000560  C026  F0E3         	movff	?__tdiv_to_l_+3,printf@val+3
  7617                           
  7618                           ;doprnt.c: 1129: fval = 0.0;
  7619  000564  0E00               	movlw	0
  7620  000566  0100               	movlb	0	; () banked
  7621  000568  6FDD               	movwf	printf@fval& (0+255),b
  7622  00056A  0E00               	movlw	0
  7623  00056C  0100               	movlb	0	; () banked
  7624  00056E  6FDE               	movwf	(printf@fval+1)& (0+255),b
  7625  000570  0E00               	movlw	0
  7626  000572  0100               	movlb	0	; () banked
  7627  000574  6FDF               	movwf	(printf@fval+2)& (0+255),b
  7628                           
  7629                           ;doprnt.c: 1130: } else {
  7630  000576  D033               	goto	l6689
  7631  000578                     l6685:
  7632                           
  7633                           ; BSR set to: 0
  7634                           ;doprnt.c: 1131: val = (unsigned long)fval;
  7635  000578  C0DD  F0AE         	movff	printf@fval,___fttol@f1
  7636  00057C  C0DE  F0AF         	movff	printf@fval+1,___fttol@f1+1
  7637  000580  C0DF  F0B0         	movff	printf@fval+2,___fttol@f1+2
  7638  000584  EC03  F012         	call	___fttol	;wreg free
  7639  000588  C0AE  F0E0         	movff	?___fttol,printf@val
  7640  00058C  C0AF  F0E1         	movff	?___fttol+1,printf@val+1
  7641  000590  C0B0  F0E2         	movff	?___fttol+2,printf@val+2
  7642  000594  C0B1  F0E3         	movff	?___fttol+3,printf@val+3
  7643                           
  7644                           ;doprnt.c: 1132: fval -= (double)val;
  7645  000598  C0DD  F0AE         	movff	printf@fval,___ftsub@f1
  7646  00059C  C0DE  F0AF         	movff	printf@fval+1,___ftsub@f1+1
  7647  0005A0  C0DF  F0B0         	movff	printf@fval+2,___ftsub@f1+2
  7648  0005A4  C0E0  F02B         	movff	printf@val,___lltoft@c
  7649  0005A8  C0E1  F02C         	movff	printf@val+1,___lltoft@c+1
  7650  0005AC  C0E2  F02D         	movff	printf@val+2,___lltoft@c+2
  7651  0005B0  C0E3  F02E         	movff	printf@val+3,___lltoft@c+3
  7652  0005B4  EC23  F01C         	call	___lltoft	;wreg free
  7653  0005B8  C02B  F0B1         	movff	?___lltoft,___ftsub@f2
  7654  0005BC  C02C  F0B2         	movff	?___lltoft+1,___ftsub@f2+1
  7655  0005C0  C02D  F0B3         	movff	?___lltoft+2,___ftsub@f2+2
  7656  0005C4  ECCA  F01C         	call	___ftsub	;wreg free
  7657  0005C8  C0AE  F0DD         	movff	?___ftsub,printf@fval
  7658  0005CC  C0AF  F0DE         	movff	?___ftsub+1,printf@fval+1
  7659  0005D0  C0B0  F0DF         	movff	?___ftsub+2,printf@fval+2
  7660                           
  7661                           ;doprnt.c: 1133: exp = 0;
  7662  0005D4  0E00               	movlw	0
  7663  0005D6  0100               	movlb	0	; () banked
  7664  0005D8  6FDC               	movwf	(printf@exp+1)& (0+255),b
  7665  0005DA  0E00               	movlw	0
  7666  0005DC  6FDB               	movwf	printf@exp& (0+255),b
  7667  0005DE                     l6689:
  7668                           
  7669                           ; BSR set to: 0
  7670                           ;doprnt.c: 1134: }
  7671                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  7672  0005DE  0E01               	movlw	1
  7673  0005E0  0100               	movlb	0	; () banked
  7674  0005E2  6FEA               	movwf	printf@c& (0+255),b
  7675  0005E4                     l6691:
  7676                           
  7677                           ; BSR set to: 0
  7678  0005E4  0E0A               	movlw	10
  7679  0005E6  0100               	movlb	0	; () banked
  7680  0005E8  19EA               	xorwf	printf@c& (0+255),w,b
  7681  0005EA  B4D8               	btfsc	status,2,c
  7682  0005EC  D01E               	goto	l6703
  7683                           
  7684                           ; BSR set to: 0
  7685                           ;doprnt.c: 1137: if(val < dpowers[c])
  7686                           
  7687                           ; BSR set to: 0
  7688                           
  7689                           ; BSR set to: 0
  7690  0005EE  0100               	movlb	0	; () banked
  7691  0005F0  51EA               	movf	printf@c& (0+255),w,b
  7692  0005F2  0D04               	mullw	4
  7693  0005F4  0E11               	movlw	low _dpowers
  7694  0005F6  24F3               	addwf	prodl,w,c
  7695  0005F8  6EF6               	movwf	tblptrl,c
  7696  0005FA  0EFE               	movlw	high _dpowers
  7697  0005FC  20F4               	addwfc	prodh,w,c
  7698  0005FE  6EF7               	movwf	tblptrh,c
  7699  000600                     	if	0	;There are less than 3 active tblptr bytes
  7700  000600                     	endif
  7701  000600  0009               	tblrd		*+
  7702  000602  50F5               	movf	tablat,w,c
  7703  000604  0100               	movlb	0	; () banked
  7704  000606  5DE0               	subwf	printf@val& (0+255),w,b
  7705  000608  0009               	tblrd		*+
  7706  00060A  50F5               	movf	tablat,w,c
  7707  00060C  0100               	movlb	0	; () banked
  7708  00060E  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  7709  000610  0009               	tblrd		*+
  7710  000612  50F5               	movf	tablat,w,c
  7711  000614  0100               	movlb	0	; () banked
  7712  000616  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  7713  000618  0009               	tblrd		*+
  7714  00061A  50F5               	movf	tablat,w,c
  7715  00061C  0100               	movlb	0	; () banked
  7716  00061E  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  7717  000620  A0D8               	btfss	status,0,c
  7718  000622  D003               	goto	l6703
  7719                           
  7720                           ; BSR set to: 0
  7721                           
  7722                           ; BSR set to: 0
  7723                           
  7724                           ; BSR set to: 0
  7725                           ;doprnt.c: 1138: break;
  7726  000624  0100               	movlb	0	; () banked
  7727  000626  2BEA               	incf	printf@c& (0+255),f,b
  7728  000628  D7DD               	goto	l6691
  7729  00062A                     l6703:
  7730                           
  7731                           ; BSR set to: 0
  7732                           ;doprnt.c: 1142: width -= prec + c + exp;
  7733  00062A  C0EA  F0C7         	movff	printf@c,??_printf
  7734  00062E  0100               	movlb	0	; () banked
  7735  000630  6BC8               	clrf	(??_printf+1)& (0+255),b
  7736  000632  BFC7               	btfsc	??_printf& (0+255),7,b
  7737  000634  07C8               	decf	(??_printf+1)& (0+255),f,b
  7738  000636  0100               	movlb	0	; () banked
  7739  000638  51E8               	movf	printf@prec& (0+255),w,b
  7740  00063A  0100               	movlb	0	; () banked
  7741  00063C  27C7               	addwf	??_printf& (0+255),f,b
  7742  00063E  0100               	movlb	0	; () banked
  7743  000640  51E9               	movf	(printf@prec+1)& (0+255),w,b
  7744  000642  0100               	movlb	0	; () banked
  7745  000644  23C8               	addwfc	(??_printf+1)& (0+255),f,b
  7746  000646  0100               	movlb	0	; () banked
  7747  000648  51DB               	movf	printf@exp& (0+255),w,b
  7748  00064A  0100               	movlb	0	; () banked
  7749  00064C  27C7               	addwf	??_printf& (0+255),f,b
  7750  00064E  0100               	movlb	0	; () banked
  7751  000650  51DC               	movf	(printf@exp+1)& (0+255),w,b
  7752  000652  0100               	movlb	0	; () banked
  7753  000654  23C8               	addwfc	(??_printf+1)& (0+255),f,b
  7754  000656  0100               	movlb	0	; () banked
  7755  000658  51C7               	movf	??_printf& (0+255),w,b
  7756  00065A  0100               	movlb	0	; () banked
  7757  00065C  5FE4               	subwf	printf@width& (0+255),f,b
  7758  00065E  0100               	movlb	0	; () banked
  7759  000660  51C8               	movf	(??_printf+1)& (0+255),w,b
  7760  000662  0100               	movlb	0	; () banked
  7761  000664  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  7762                           
  7763                           ;doprnt.c: 1143: if(
  7764                           ;doprnt.c: 1147: prec)
  7765  000666  0100               	movlb	0	; () banked
  7766  000668  51E8               	movf	printf@prec& (0+255),w,b
  7767  00066A  0100               	movlb	0	; () banked
  7768  00066C  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  7769  00066E  B4D8               	btfsc	status,2,c
  7770  000670  D004               	goto	l6707
  7771                           
  7772                           ; BSR set to: 0
  7773                           ;doprnt.c: 1148: width--;
  7774  000672  0100               	movlb	0	; () banked
  7775  000674  07E4               	decf	printf@width& (0+255),f,b
  7776  000676  A0D8               	btfss	status,0,c
  7777  000678  07E5               	decf	(printf@width+1)& (0+255),f,b
  7778  00067A                     l6707:
  7779                           
  7780                           ; BSR set to: 0
  7781                           ;doprnt.c: 1149: if(flag & 0x03)
  7782  00067A  0E03               	movlw	3
  7783  00067C  0100               	movlb	0	; () banked
  7784  00067E  15E6               	andwf	printf@flag& (0+255),w,b
  7785  000680  0100               	movlb	0	; () banked
  7786  000682  6FC7               	movwf	??_printf& (0+255),b
  7787  000684  0E00               	movlw	0
  7788  000686  0100               	movlb	0	; () banked
  7789  000688  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  7790  00068A  0100               	movlb	0	; () banked
  7791  00068C  6FC8               	movwf	(??_printf+1)& (0+255),b
  7792  00068E  0100               	movlb	0	; () banked
  7793  000690  51C7               	movf	??_printf& (0+255),w,b
  7794  000692  0100               	movlb	0	; () banked
  7795  000694  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  7796  000696  B4D8               	btfsc	status,2,c
  7797  000698  D004               	goto	l6711
  7798                           
  7799                           ; BSR set to: 0
  7800                           ;doprnt.c: 1150: width--;
  7801  00069A  0100               	movlb	0	; () banked
  7802  00069C  07E4               	decf	printf@width& (0+255),f,b
  7803  00069E  A0D8               	btfss	status,0,c
  7804  0006A0  07E5               	decf	(printf@width+1)& (0+255),f,b
  7805  0006A2                     l6711:
  7806                           
  7807                           ; BSR set to: 0
  7808                           ;doprnt.c: 1153: if(flag & 0x04) {
  7809  0006A2  0100               	movlb	0	; () banked
  7810  0006A4  A5E6               	btfss	printf@flag& (0+255),2,b
  7811  0006A6  D02D               	goto	l6727
  7812                           
  7813                           ; BSR set to: 0
  7814                           ;doprnt.c: 1157: if(flag & 0x03)
  7815  0006A8  0E03               	movlw	3
  7816  0006AA  0100               	movlb	0	; () banked
  7817  0006AC  15E6               	andwf	printf@flag& (0+255),w,b
  7818  0006AE  0100               	movlb	0	; () banked
  7819  0006B0  6FC7               	movwf	??_printf& (0+255),b
  7820  0006B2  0E00               	movlw	0
  7821  0006B4  0100               	movlb	0	; () banked
  7822  0006B6  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  7823  0006B8  0100               	movlb	0	; () banked
  7824  0006BA  6FC8               	movwf	(??_printf+1)& (0+255),b
  7825  0006BC  0100               	movlb	0	; () banked
  7826  0006BE  51C7               	movf	??_printf& (0+255),w,b
  7827  0006C0  0100               	movlb	0	; () banked
  7828  0006C2  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  7829  0006C4  B4D8               	btfsc	status,2,c
  7830  0006C6  D00B               	goto	l6721
  7831                           
  7832                           ; BSR set to: 0
  7833                           ;doprnt.c: 1159: (putch('-') );
  7834  0006C8  0E2D               	movlw	45
  7835  0006CA  EC36  F01E         	call	_putch
  7836                           
  7837                           ;doprnt.c: 1168: while(width > 0) {
  7838  0006CE  D007               	goto	l6721
  7839  0006D0                     l6717:
  7840                           
  7841                           ;doprnt.c: 1169: (putch('0') );
  7842  0006D0  0E30               	movlw	48
  7843  0006D2  EC36  F01E         	call	_putch
  7844                           
  7845                           ;doprnt.c: 1170: width--;
  7846  0006D6  0100               	movlb	0	; () banked
  7847  0006D8  07E4               	decf	printf@width& (0+255),f,b
  7848  0006DA  A0D8               	btfss	status,0,c
  7849  0006DC  07E5               	decf	(printf@width+1)& (0+255),f,b
  7850  0006DE                     l6721:
  7851  0006DE  0100               	movlb	0	; () banked
  7852  0006E0  BFE5               	btfsc	(printf@width+1)& (0+255),7,b
  7853  0006E2  D073               	goto	l6739
  7854  0006E4  0100               	movlb	0	; () banked
  7855  0006E6  51E5               	movf	(printf@width+1)& (0+255),w,b
  7856  0006E8  E1F3               	bnz	l6717
  7857  0006EA  0100               	movlb	0	; () banked
  7858  0006EC  05E4               	decf	printf@width& (0+255),w,b
  7859  0006EE  A0D8               	btfss	status,0,c
  7860  0006F0  D06C               	goto	l6739
  7861  0006F2  D7EE               	goto	l6717
  7862  0006F4                     l6723:
  7863                           
  7864                           ; BSR set to: 0
  7865                           ;doprnt.c: 1181: (putch(' ') );
  7866  0006F4  0E20               	movlw	32
  7867  0006F6  EC36  F01E         	call	_putch
  7868                           
  7869                           ;doprnt.c: 1182: width--;
  7870  0006FA  0100               	movlb	0	; () banked
  7871  0006FC  07E4               	decf	printf@width& (0+255),f,b
  7872  0006FE  A0D8               	btfss	status,0,c
  7873  000700  07E5               	decf	(printf@width+1)& (0+255),f,b
  7874  000702                     l6727:
  7875                           
  7876                           ; BSR set to: 0
  7877  000702  0100               	movlb	0	; () banked
  7878  000704  BFE5               	btfsc	(printf@width+1)& (0+255),7,b
  7879  000706  D007               	goto	l6729
  7880  000708  0100               	movlb	0	; () banked
  7881  00070A  51E5               	movf	(printf@width+1)& (0+255),w,b
  7882  00070C  E1F3               	bnz	l6723
  7883  00070E  0100               	movlb	0	; () banked
  7884  000710  05E4               	decf	printf@width& (0+255),w,b
  7885  000712  B0D8               	btfsc	status,0,c
  7886  000714  D7EF               	goto	l6723
  7887  000716                     l6729:
  7888                           
  7889                           ; BSR set to: 0
  7890                           ;doprnt.c: 1183: }
  7891                           ;doprnt.c: 1188: if(flag & 0x03)
  7892  000716  0E03               	movlw	3
  7893  000718  0100               	movlb	0	; () banked
  7894  00071A  15E6               	andwf	printf@flag& (0+255),w,b
  7895  00071C  0100               	movlb	0	; () banked
  7896  00071E  6FC7               	movwf	??_printf& (0+255),b
  7897  000720  0E00               	movlw	0
  7898  000722  0100               	movlb	0	; () banked
  7899  000724  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  7900  000726  0100               	movlb	0	; () banked
  7901  000728  6FC8               	movwf	(??_printf+1)& (0+255),b
  7902  00072A  0100               	movlb	0	; () banked
  7903  00072C  51C7               	movf	??_printf& (0+255),w,b
  7904  00072E  0100               	movlb	0	; () banked
  7905  000730  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  7906  000732  B4D8               	btfsc	status,2,c
  7907  000734  D04A               	goto	l6739
  7908                           
  7909                           ; BSR set to: 0
  7910                           ;doprnt.c: 1190: (putch('-') );
  7911  000736  0E2D               	movlw	45
  7912  000738  EC36  F01E         	call	_putch
  7913                           
  7914                           ;doprnt.c: 1195: }
  7915                           ;doprnt.c: 1196: while(c--) {
  7916  00073C  D046               	goto	l6739
  7917  00073E                     l6733:
  7918                           
  7919                           ;doprnt.c: 1200: {
  7920                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  7921  00073E  C0E0  F023         	movff	printf@val,___lldiv@dividend
  7922  000742  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  7923  000746  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  7924  00074A  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  7925  00074E  0100               	movlb	0	; () banked
  7926  000750  51EA               	movf	printf@c& (0+255),w,b
  7927  000752  0D04               	mullw	4
  7928  000754  0E11               	movlw	low _dpowers
  7929  000756  24F3               	addwf	prodl,w,c
  7930  000758  6EF6               	movwf	tblptrl,c
  7931  00075A  0EFE               	movlw	high _dpowers
  7932  00075C  20F4               	addwfc	prodh,w,c
  7933  00075E  6EF7               	movwf	tblptrh,c
  7934  000760                     	if	0	;There are less than 3 active tblptr bytes
  7935  000760                     	endif
  7936  000760  0009               	tblrd		*+
  7937  000762  CFF5 F027          	movff	tablat,___lldiv@divisor
  7938  000766  0009               	tblrd		*+
  7939  000768  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  7940  00076C  0009               	tblrd		*+
  7941  00076E  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  7942  000772  000A               	tblrd		*-
  7943  000774  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  7944  000778  EC0A  F01A         	call	___lldiv	;wreg free
  7945  00077C  C023  F0D7         	movff	?___lldiv,printf@tmpval
  7946  000780  C024  F0D8         	movff	?___lldiv+1,printf@tmpval+1
  7947  000784  C025  F0D9         	movff	?___lldiv+2,printf@tmpval+2
  7948  000788  C026  F0DA         	movff	?___lldiv+3,printf@tmpval+3
  7949                           
  7950                           ;doprnt.c: 1202: tmpval.vd %= 10;
  7951  00078C  C0D7  F030         	movff	printf@tmpval,___llmod@dividend
  7952  000790  C0D8  F031         	movff	printf@tmpval+1,___llmod@dividend+1
  7953  000794  C0D9  F032         	movff	printf@tmpval+2,___llmod@dividend+2
  7954  000798  C0DA  F033         	movff	printf@tmpval+3,___llmod@dividend+3
  7955  00079C  0E0A               	movlw	10
  7956  00079E  6E34               	movwf	___llmod@divisor,c
  7957  0007A0  0E00               	movlw	0
  7958  0007A2  6E35               	movwf	___llmod@divisor+1,c
  7959  0007A4  0E00               	movlw	0
  7960  0007A6  6E36               	movwf	___llmod@divisor+2,c
  7961  0007A8  0E00               	movlw	0
  7962  0007AA  6E37               	movwf	___llmod@divisor+3,c
  7963  0007AC  EC2C  F01B         	call	___llmod	;wreg free
  7964  0007B0  C030  F0D7         	movff	?___llmod,printf@tmpval
  7965  0007B4  C031  F0D8         	movff	?___llmod+1,printf@tmpval+1
  7966  0007B8  C032  F0D9         	movff	?___llmod+2,printf@tmpval+2
  7967  0007BC  C033  F0DA         	movff	?___llmod+3,printf@tmpval+3
  7968                           
  7969                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  7970  0007C0  0100               	movlb	0	; () banked
  7971  0007C2  51D7               	movf	printf@tmpval& (0+255),w,b
  7972  0007C4  0F30               	addlw	48
  7973  0007C6  EC36  F01E         	call	_putch
  7974  0007CA                     l6739:
  7975  0007CA  0100               	movlb	0	; () banked
  7976  0007CC  07EA               	decf	printf@c& (0+255),f,b
  7977  0007CE  0100               	movlb	0	; () banked
  7978  0007D0  29EA               	incf	printf@c& (0+255),w,b
  7979  0007D2  B4D8               	btfsc	status,2,c
  7980  0007D4  D008               	goto	l6745
  7981  0007D6  D7B3               	goto	l6733
  7982  0007D8                     l6741:
  7983                           
  7984                           ; BSR set to: 0
  7985                           ;doprnt.c: 1208: (putch('0') );
  7986  0007D8  0E30               	movlw	48
  7987  0007DA  EC36  F01E         	call	_putch
  7988                           
  7989                           ;doprnt.c: 1209: exp--;
  7990  0007DE  0100               	movlb	0	; () banked
  7991  0007E0  07DB               	decf	printf@exp& (0+255),f,b
  7992  0007E2  A0D8               	btfss	status,0,c
  7993  0007E4  07DC               	decf	(printf@exp+1)& (0+255),f,b
  7994  0007E6                     l6745:
  7995                           
  7996                           ; BSR set to: 0
  7997  0007E6  0100               	movlb	0	; () banked
  7998  0007E8  BFDC               	btfsc	(printf@exp+1)& (0+255),7,b
  7999  0007EA  D007               	goto	l6747
  8000  0007EC  0100               	movlb	0	; () banked
  8001  0007EE  51DC               	movf	(printf@exp+1)& (0+255),w,b
  8002  0007F0  E1F3               	bnz	l6741
  8003  0007F2  0100               	movlb	0	; () banked
  8004  0007F4  05DB               	decf	printf@exp& (0+255),w,b
  8005  0007F6  B0D8               	btfsc	status,0,c
  8006  0007F8  D7EF               	goto	l6741
  8007  0007FA                     l6747:
  8008                           
  8009                           ; BSR set to: 0
  8010                           ;doprnt.c: 1210: }
  8011                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  8012  0007FA  0100               	movlb	0	; () banked
  8013  0007FC  BFE9               	btfsc	(printf@prec+1)& (0+255),7,b
  8014  0007FE  D00C               	goto	l812
  8015  000800  0100               	movlb	0	; () banked
  8016  000802  51E9               	movf	(printf@prec+1)& (0+255),w,b
  8017  000804  E105               	bnz	u7090
  8018  000806  0E09               	movlw	9
  8019  000808  0100               	movlb	0	; () banked
  8020  00080A  5DE8               	subwf	printf@prec& (0+255),w,b
  8021  00080C  A0D8               	btfss	status,0,c
  8022  00080E  D004               	goto	l812
  8023  000810                     u7090:
  8024                           
  8025                           ; BSR set to: 0
  8026                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  8027  000810  0E08               	movlw	8
  8028  000812  0100               	movlb	0	; () banked
  8029  000814  6FEA               	movwf	printf@c& (0+255),b
  8030  000816  D002               	goto	l6751
  8031  000818                     l812:
  8032                           
  8033                           ; BSR set to: 0
  8034                           ;doprnt.c: 1213: else
  8035                           ;doprnt.c: 1214: c = prec;
  8036  000818  C0E8  F0EA         	movff	printf@prec,printf@c
  8037  00081C                     l6751:
  8038                           
  8039                           ; BSR set to: 0
  8040                           ;doprnt.c: 1215: prec -= c;
  8041  00081C  0100               	movlb	0	; () banked
  8042  00081E  51EA               	movf	printf@c& (0+255),w,b
  8043  000820  0100               	movlb	0	; () banked
  8044  000822  5FE8               	subwf	printf@prec& (0+255),f,b
  8045  000824  0E00               	movlw	0
  8046  000826  0100               	movlb	0	; () banked
  8047  000828  BFEA               	btfsc	printf@c& (0+255),7,b
  8048  00082A  0EFF               	movlw	255
  8049  00082C  0100               	movlb	0	; () banked
  8050  00082E  5BE9               	subwfb	(printf@prec+1)& (0+255),f,b
  8051                           
  8052                           ; BSR set to: 0
  8053                           ;doprnt.c: 1219: if(c)
  8054  000830  0100               	movlb	0	; () banked
  8055  000832  51EA               	movf	printf@c& (0+255),w,b
  8056  000834  0100               	movlb	0	; () banked
  8057  000836  B4D8               	btfsc	status,2,c
  8058  000838  D003               	goto	l6757
  8059                           
  8060                           ; BSR set to: 0
  8061                           ;doprnt.c: 1221: (putch('.') );
  8062  00083A  0E2E               	movlw	46
  8063  00083C  EC36  F01E         	call	_putch
  8064  000840                     l6757:
  8065                           
  8066                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  8067  000840  0100               	movlb	0	; () banked
  8068  000842  51EA               	movf	printf@c& (0+255),w,b
  8069  000844  EC79  F009         	call	_scale
  8070  000848  C098  F0CD         	movff	?_scale,_printf$1430
  8071  00084C  C099  F0CE         	movff	?_scale+1,_printf$1430+1
  8072  000850  C09A  F0CF         	movff	?_scale+2,_printf$1430+2
  8073                           
  8074                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  8075  000854  C0DD  F08C         	movff	printf@fval,___ftmul@f2
  8076  000858  C0DE  F08D         	movff	printf@fval+1,___ftmul@f2+1
  8077  00085C  C0DF  F08E         	movff	printf@fval+2,___ftmul@f2+2
  8078  000860  C0CD  F089         	movff	_printf$1430,___ftmul@f1
  8079  000864  C0CE  F08A         	movff	_printf$1430+1,___ftmul@f1+1
  8080  000868  C0CF  F08B         	movff	_printf$1430+2,___ftmul@f1+2
  8081  00086C  ECA8  F010         	call	___ftmul	;wreg free
  8082  000870  C089  F0AE         	movff	?___ftmul,___fttol@f1
  8083  000874  C08A  F0AF         	movff	?___ftmul+1,___fttol@f1+1
  8084  000878  C08B  F0B0         	movff	?___ftmul+2,___fttol@f1+2
  8085  00087C  EC03  F012         	call	___fttol	;wreg free
  8086  000880  C0AE  F0E0         	movff	?___fttol,printf@val
  8087  000884  C0AF  F0E1         	movff	?___fttol+1,printf@val+1
  8088  000888  C0B0  F0E2         	movff	?___fttol+2,printf@val+2
  8089  00088C  C0B1  F0E3         	movff	?___fttol+3,printf@val+3
  8090                           
  8091                           ;doprnt.c: 1228: while(c--) {
  8092  000890  D06D               	goto	l6767
  8093  000892                     l6761:
  8094                           
  8095                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  8096  000892  C0E0  F023         	movff	printf@val,___lldiv@dividend
  8097  000896  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  8098  00089A  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  8099  00089E  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  8100  0008A2  0100               	movlb	0	; () banked
  8101  0008A4  51EA               	movf	printf@c& (0+255),w,b
  8102  0008A6  0D04               	mullw	4
  8103  0008A8  0E11               	movlw	low _dpowers
  8104  0008AA  24F3               	addwf	prodl,w,c
  8105  0008AC  6EF6               	movwf	tblptrl,c
  8106  0008AE  0EFE               	movlw	high _dpowers
  8107  0008B0  20F4               	addwfc	prodh,w,c
  8108  0008B2  6EF7               	movwf	tblptrh,c
  8109  0008B4                     	if	0	;There are less than 3 active tblptr bytes
  8110  0008B4                     	endif
  8111  0008B4  0009               	tblrd		*+
  8112  0008B6  CFF5 F027          	movff	tablat,___lldiv@divisor
  8113  0008BA  0009               	tblrd		*+
  8114  0008BC  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  8115  0008C0  0009               	tblrd		*+
  8116  0008C2  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  8117  0008C6  000A               	tblrd		*-
  8118  0008C8  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  8119  0008CC  EC0A  F01A         	call	___lldiv	;wreg free
  8120  0008D0  C023  F0D7         	movff	?___lldiv,printf@tmpval
  8121  0008D4  C024  F0D8         	movff	?___lldiv+1,printf@tmpval+1
  8122  0008D8  C025  F0D9         	movff	?___lldiv+2,printf@tmpval+2
  8123  0008DC  C026  F0DA         	movff	?___lldiv+3,printf@tmpval+3
  8124                           
  8125                           ;doprnt.c: 1230: tmpval.vd %= 10;
  8126  0008E0  C0D7  F030         	movff	printf@tmpval,___llmod@dividend
  8127  0008E4  C0D8  F031         	movff	printf@tmpval+1,___llmod@dividend+1
  8128  0008E8  C0D9  F032         	movff	printf@tmpval+2,___llmod@dividend+2
  8129  0008EC  C0DA  F033         	movff	printf@tmpval+3,___llmod@dividend+3
  8130  0008F0  0E0A               	movlw	10
  8131  0008F2  6E34               	movwf	___llmod@divisor,c
  8132  0008F4  0E00               	movlw	0
  8133  0008F6  6E35               	movwf	___llmod@divisor+1,c
  8134  0008F8  0E00               	movlw	0
  8135  0008FA  6E36               	movwf	___llmod@divisor+2,c
  8136  0008FC  0E00               	movlw	0
  8137  0008FE  6E37               	movwf	___llmod@divisor+3,c
  8138  000900  EC2C  F01B         	call	___llmod	;wreg free
  8139  000904  C030  F0D7         	movff	?___llmod,printf@tmpval
  8140  000908  C031  F0D8         	movff	?___llmod+1,printf@tmpval+1
  8141  00090C  C032  F0D9         	movff	?___llmod+2,printf@tmpval+2
  8142  000910  C033  F0DA         	movff	?___llmod+3,printf@tmpval+3
  8143                           
  8144                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  8145  000914  0100               	movlb	0	; () banked
  8146  000916  51D7               	movf	printf@tmpval& (0+255),w,b
  8147  000918  0F30               	addlw	48
  8148  00091A  EC36  F01E         	call	_putch
  8149                           
  8150                           ;doprnt.c: 1232: val %= dpowers[c];
  8151  00091E  C0E0  F030         	movff	printf@val,___llmod@dividend
  8152  000922  C0E1  F031         	movff	printf@val+1,___llmod@dividend+1
  8153  000926  C0E2  F032         	movff	printf@val+2,___llmod@dividend+2
  8154  00092A  C0E3  F033         	movff	printf@val+3,___llmod@dividend+3
  8155  00092E  0100               	movlb	0	; () banked
  8156  000930  51EA               	movf	printf@c& (0+255),w,b
  8157  000932  0D04               	mullw	4
  8158  000934  0E11               	movlw	low _dpowers
  8159  000936  24F3               	addwf	prodl,w,c
  8160  000938  6EF6               	movwf	tblptrl,c
  8161  00093A  0EFE               	movlw	high _dpowers
  8162  00093C  20F4               	addwfc	prodh,w,c
  8163  00093E  6EF7               	movwf	tblptrh,c
  8164  000940                     	if	0	;There are less than 3 active tblptr bytes
  8165  000940                     	endif
  8166  000940  0009               	tblrd		*+
  8167  000942  CFF5 F034          	movff	tablat,___llmod@divisor
  8168  000946  0009               	tblrd		*+
  8169  000948  CFF5 F035          	movff	tablat,___llmod@divisor+1
  8170  00094C  0009               	tblrd		*+
  8171  00094E  CFF5 F036          	movff	tablat,___llmod@divisor+2
  8172  000952  000A               	tblrd		*-
  8173  000954  CFF5 F037          	movff	tablat,___llmod@divisor+3
  8174  000958  EC2C  F01B         	call	___llmod	;wreg free
  8175  00095C  C030  F0E0         	movff	?___llmod,printf@val
  8176  000960  C031  F0E1         	movff	?___llmod+1,printf@val+1
  8177  000964  C032  F0E2         	movff	?___llmod+2,printf@val+2
  8178  000968  C033  F0E3         	movff	?___llmod+3,printf@val+3
  8179  00096C                     l6767:
  8180  00096C  0100               	movlb	0	; () banked
  8181  00096E  07EA               	decf	printf@c& (0+255),f,b
  8182  000970  0100               	movlb	0	; () banked
  8183  000972  29EA               	incf	printf@c& (0+255),w,b
  8184  000974  B4D8               	btfsc	status,2,c
  8185  000976  D008               	goto	l6773
  8186  000978  D78C               	goto	l6761
  8187  00097A                     l6769:
  8188                           
  8189                           ; BSR set to: 0
  8190                           ;doprnt.c: 1236: (putch('0') );
  8191  00097A  0E30               	movlw	48
  8192  00097C  EC36  F01E         	call	_putch
  8193                           
  8194                           ;doprnt.c: 1237: prec--;
  8195  000980  0100               	movlb	0	; () banked
  8196  000982  07E8               	decf	printf@prec& (0+255),f,b
  8197  000984  A0D8               	btfss	status,0,c
  8198  000986  07E9               	decf	(printf@prec+1)& (0+255),f,b
  8199  000988                     l6773:
  8200                           
  8201                           ; BSR set to: 0
  8202  000988  0100               	movlb	0	; () banked
  8203  00098A  51E8               	movf	printf@prec& (0+255),w,b
  8204  00098C  0100               	movlb	0	; () banked
  8205  00098E  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  8206  000990  B4D8               	btfsc	status,2,c
  8207  000992  D22B               	goto	l6901
  8208  000994  D7F2               	goto	l6769
  8209  000996                     l772:
  8210                           
  8211                           ; BSR set to: 0
  8212                           ;doprnt.c: 1246: }
  8213                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  8214  000996  0100               	movlb	0	; () banked
  8215  000998  BFE6               	btfsc	printf@flag& (0+255),7,b
  8216  00099A  D034               	goto	l821
  8217                           
  8218                           ; BSR set to: 0
  8219                           ;doprnt.c: 1253: {
  8220                           ;doprnt.c: 1255: if(flag & 0x10)
  8221  00099C  0100               	movlb	0	; () banked
  8222  00099E  A9E6               	btfss	printf@flag& (0+255),4,b
  8223  0009A0  D00E               	goto	l6781
  8224                           
  8225                           ; BSR set to: 0
  8226                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  8227  0009A2  C0D5  FFD9         	movff	printf@ap,fsr2l
  8228  0009A6  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  8229  0009AA  CFDE F0E0          	movff	postinc2,printf@val
  8230  0009AE  CFDE F0E1          	movff	postinc2,printf@val+1
  8231  0009B2  CFDE F0E2          	movff	postinc2,printf@val+2
  8232  0009B6  CFDE F0E3          	movff	postinc2,printf@val+3
  8233                           
  8234                           ; BSR set to: 0
  8235  0009BA  0E04               	movlw	4
  8236  0009BC  D00F               	goto	L2
  8237  0009BE                     l6781:
  8238                           
  8239                           ; BSR set to: 0
  8240                           ;doprnt.c: 1257: else
  8241                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  8242  0009BE  C0D5  FFD9         	movff	printf@ap,fsr2l
  8243  0009C2  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  8244  0009C6  CFDE F0E0          	movff	postinc2,printf@val
  8245  0009CA  CFDD F0E1          	movff	postdec2,printf@val+1
  8246  0009CE  0100               	movlb	0	; () banked
  8247  0009D0  0E00               	movlw	0
  8248  0009D2  BFE1               	btfsc	(printf@val+1)& (0+255),7,b
  8249  0009D4  0EFF               	movlw	-1
  8250  0009D6  6FE2               	movwf	(printf@val+2)& (0+255),b
  8251  0009D8  6FE3               	movwf	(printf@val+3)& (0+255),b
  8252                           
  8253                           ; BSR set to: 0
  8254  0009DA  0E02               	movlw	2
  8255  0009DC                     L2:
  8256  0009DC  0100               	movlb	0	; () banked
  8257  0009DE  27D5               	addwf	printf@ap& (0+255),f,b
  8258  0009E0  0E00               	movlw	0
  8259  0009E2  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  8260                           
  8261                           ; BSR set to: 0
  8262                           ;doprnt.c: 1261: if((long)val < 0) {
  8263                           
  8264                           ; BSR set to: 0
  8265  0009E4  0100               	movlb	0	; () banked
  8266  0009E6  AFE3               	btfss	(printf@val+3)& (0+255),7,b
  8267  0009E8  D032               	goto	l6799
  8268                           
  8269                           ; BSR set to: 0
  8270                           ;doprnt.c: 1262: flag |= 0x03;
  8271  0009EA  0E03               	movlw	3
  8272  0009EC  0100               	movlb	0	; () banked
  8273  0009EE  13E6               	iorwf	printf@flag& (0+255),f,b
  8274                           
  8275                           ; BSR set to: 0
  8276                           ;doprnt.c: 1263: val = -val;
  8277  0009F0  0100               	movlb	0	; () banked
  8278  0009F2  1FE3               	comf	(printf@val+3)& (0+255),f,b
  8279  0009F4  1FE2               	comf	(printf@val+2)& (0+255),f,b
  8280  0009F6  1FE1               	comf	(printf@val+1)& (0+255),f,b
  8281  0009F8  6DE0               	negf	printf@val& (0+255),b
  8282  0009FA  0E00               	movlw	0
  8283  0009FC  23E1               	addwfc	(printf@val+1)& (0+255),f,b
  8284  0009FE  23E2               	addwfc	(printf@val+2)& (0+255),f,b
  8285  000A00  23E3               	addwfc	(printf@val+3)& (0+255),f,b
  8286                           
  8287                           ; BSR set to: 0
  8288                           ;doprnt.c: 1264: }
  8289                           ;doprnt.c: 1266: }
  8290  000A02  D025               	goto	l6799
  8291  000A04                     l821:
  8292                           
  8293                           ; BSR set to: 0
  8294                           ;doprnt.c: 1268: else
  8295                           ;doprnt.c: 1273: {
  8296                           ;doprnt.c: 1281: if(flag & 0x10)
  8297  000A04  0100               	movlb	0	; () banked
  8298  000A06  A9E6               	btfss	printf@flag& (0+255),4,b
  8299  000A08  D00E               	goto	l6795
  8300                           
  8301                           ; BSR set to: 0
  8302                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  8303  000A0A  C0D5  FFD9         	movff	printf@ap,fsr2l
  8304  000A0E  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  8305  000A12  CFDE F0E0          	movff	postinc2,printf@val
  8306  000A16  CFDE F0E1          	movff	postinc2,printf@val+1
  8307  000A1A  CFDE F0E2          	movff	postinc2,printf@val+2
  8308  000A1E  CFDE F0E3          	movff	postinc2,printf@val+3
  8309                           
  8310                           ; BSR set to: 0
  8311  000A22  0E04               	movlw	4
  8312  000A24  D010               	goto	L3
  8313  000A26                     l6795:
  8314                           
  8315                           ; BSR set to: 0
  8316                           ;doprnt.c: 1283: else
  8317                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8318  000A26  C0D5  FFD9         	movff	printf@ap,fsr2l
  8319  000A2A  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  8320  000A2E  CFDE F0C7          	movff	postinc2,??_printf
  8321  000A32  CFDD F0C8          	movff	postdec2,??_printf+1
  8322  000A36  C0C7  F0E0         	movff	??_printf,printf@val
  8323  000A3A  C0C8  F0E1         	movff	??_printf+1,printf@val+1
  8324  000A3E  0100               	movlb	0	; () banked
  8325  000A40  6BE2               	clrf	(printf@val+2)& (0+255),b
  8326  000A42  6BE3               	clrf	(printf@val+3)& (0+255),b
  8327                           
  8328                           ; BSR set to: 0
  8329  000A44  0E02               	movlw	2
  8330  000A46                     L3:
  8331  000A46  0100               	movlb	0	; () banked
  8332  000A48  27D5               	addwf	printf@ap& (0+255),f,b
  8333  000A4A  0E00               	movlw	0
  8334  000A4C  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  8335  000A4E                     l6799:
  8336                           
  8337                           ; BSR set to: 0
  8338                           ;doprnt.c: 1287: }
  8339                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  8340  000A4E  0100               	movlb	0	; () banked
  8341  000A50  51E8               	movf	printf@prec& (0+255),w,b
  8342  000A52  0100               	movlb	0	; () banked
  8343  000A54  11E9               	iorwf	(printf@prec+1)& (0+255),w,b
  8344  000A56  A4D8               	btfss	status,2,c
  8345  000A58  D05A               	goto	l6835
  8346                           
  8347                           ; BSR set to: 0
  8348  000A5A  0100               	movlb	0	; () banked
  8349  000A5C  51E0               	movf	printf@val& (0+255),w,b
  8350  000A5E  0100               	movlb	0	; () banked
  8351  000A60  11E1               	iorwf	(printf@val+1)& (0+255),w,b
  8352  000A62  0100               	movlb	0	; () banked
  8353  000A64  11E2               	iorwf	(printf@val+2)& (0+255),w,b
  8354  000A66  0100               	movlb	0	; () banked
  8355  000A68  11E3               	iorwf	(printf@val+3)& (0+255),w,b
  8356  000A6A  A4D8               	btfss	status,2,c
  8357  000A6C  D050               	goto	l6835
  8358                           
  8359                           ; BSR set to: 0
  8360                           ;doprnt.c: 1291: prec++;
  8361  000A6E  0100               	movlb	0	; () banked
  8362  000A70  4BE8               	infsnz	printf@prec& (0+255),f,b
  8363  000A72  2BE9               	incf	(printf@prec+1)& (0+255),f,b
  8364                           
  8365                           ; BSR set to: 0
  8366                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  8367  000A74  D04C               	goto	l6835
  8368  000A76                     l6805:
  8369                           
  8370                           ; BSR set to: 0
  8371                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8372  000A76  0E01               	movlw	1
  8373  000A78  0100               	movlb	0	; () banked
  8374  000A7A  6FEA               	movwf	printf@c& (0+255),b
  8375  000A7C                     l6807:
  8376                           
  8377                           ; BSR set to: 0
  8378  000A7C  0E0A               	movlw	10
  8379  000A7E  0100               	movlb	0	; () banked
  8380  000A80  19EA               	xorwf	printf@c& (0+255),w,b
  8381  000A82  B4D8               	btfsc	status,2,c
  8382  000A84  D04D               	goto	l6837
  8383                           
  8384                           ; BSR set to: 0
  8385                           ;doprnt.c: 1306: if(val < dpowers[c])
  8386                           
  8387                           ; BSR set to: 0
  8388                           
  8389                           ; BSR set to: 0
  8390  000A86  0100               	movlb	0	; () banked
  8391  000A88  51EA               	movf	printf@c& (0+255),w,b
  8392  000A8A  0D04               	mullw	4
  8393  000A8C  0E11               	movlw	low _dpowers
  8394  000A8E  24F3               	addwf	prodl,w,c
  8395  000A90  6EF6               	movwf	tblptrl,c
  8396  000A92  0EFE               	movlw	high _dpowers
  8397  000A94  20F4               	addwfc	prodh,w,c
  8398  000A96  6EF7               	movwf	tblptrh,c
  8399  000A98                     	if	0	;There are less than 3 active tblptr bytes
  8400  000A98                     	endif
  8401  000A98  0009               	tblrd		*+
  8402  000A9A  50F5               	movf	tablat,w,c
  8403  000A9C  0100               	movlb	0	; () banked
  8404  000A9E  5DE0               	subwf	printf@val& (0+255),w,b
  8405  000AA0  0009               	tblrd		*+
  8406  000AA2  50F5               	movf	tablat,w,c
  8407  000AA4  0100               	movlb	0	; () banked
  8408  000AA6  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  8409  000AA8  0009               	tblrd		*+
  8410  000AAA  50F5               	movf	tablat,w,c
  8411  000AAC  0100               	movlb	0	; () banked
  8412  000AAE  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  8413  000AB0  0009               	tblrd		*+
  8414  000AB2  50F5               	movf	tablat,w,c
  8415  000AB4  0100               	movlb	0	; () banked
  8416  000AB6  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  8417  000AB8  A0D8               	btfss	status,0,c
  8418  000ABA  D032               	goto	l6837
  8419                           
  8420                           ; BSR set to: 0
  8421                           
  8422                           ; BSR set to: 0
  8423                           
  8424                           ; BSR set to: 0
  8425                           ;doprnt.c: 1307: break;
  8426  000ABC  0100               	movlb	0	; () banked
  8427  000ABE  2BEA               	incf	printf@c& (0+255),f,b
  8428  000AC0  D7DD               	goto	l6807
  8429  000AC2                     l6819:
  8430                           
  8431                           ; BSR set to: 0
  8432                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8433  000AC2  0E01               	movlw	1
  8434  000AC4  0100               	movlb	0	; () banked
  8435  000AC6  6FEA               	movwf	printf@c& (0+255),b
  8436  000AC8                     l6821:
  8437                           
  8438                           ; BSR set to: 0
  8439  000AC8  0E08               	movlw	8
  8440  000ACA  0100               	movlb	0	; () banked
  8441  000ACC  19EA               	xorwf	printf@c& (0+255),w,b
  8442  000ACE  B4D8               	btfsc	status,2,c
  8443  000AD0  D027               	goto	l6837
  8444                           
  8445                           ; BSR set to: 0
  8446                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8447                           
  8448                           ; BSR set to: 0
  8449                           
  8450                           ; BSR set to: 0
  8451  000AD2  0100               	movlb	0	; () banked
  8452  000AD4  51EA               	movf	printf@c& (0+255),w,b
  8453  000AD6  0D04               	mullw	4
  8454  000AD8  0E87               	movlw	low _hexpowers
  8455  000ADA  24F3               	addwf	prodl,w,c
  8456  000ADC  6EF6               	movwf	tblptrl,c
  8457  000ADE  0EFE               	movlw	high _hexpowers
  8458  000AE0  20F4               	addwfc	prodh,w,c
  8459  000AE2  6EF7               	movwf	tblptrh,c
  8460  000AE4                     	if	0	;There are less than 3 active tblptr bytes
  8461  000AE4                     	endif
  8462  000AE4  0009               	tblrd		*+
  8463  000AE6  50F5               	movf	tablat,w,c
  8464  000AE8  0100               	movlb	0	; () banked
  8465  000AEA  5DE0               	subwf	printf@val& (0+255),w,b
  8466  000AEC  0009               	tblrd		*+
  8467  000AEE  50F5               	movf	tablat,w,c
  8468  000AF0  0100               	movlb	0	; () banked
  8469  000AF2  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  8470  000AF4  0009               	tblrd		*+
  8471  000AF6  50F5               	movf	tablat,w,c
  8472  000AF8  0100               	movlb	0	; () banked
  8473  000AFA  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  8474  000AFC  0009               	tblrd		*+
  8475  000AFE  50F5               	movf	tablat,w,c
  8476  000B00  0100               	movlb	0	; () banked
  8477  000B02  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  8478  000B04  A0D8               	btfss	status,0,c
  8479  000B06  D00C               	goto	l6837
  8480                           
  8481                           ; BSR set to: 0
  8482                           
  8483                           ; BSR set to: 0
  8484                           
  8485                           ; BSR set to: 0
  8486                           ;doprnt.c: 1318: break;
  8487  000B08  0100               	movlb	0	; () banked
  8488  000B0A  2BEA               	incf	printf@c& (0+255),f,b
  8489  000B0C  D7DD               	goto	l6821
  8490  000B0E                     l6835:
  8491                           
  8492                           ; BSR set to: 0
  8493  000B0E  0100               	movlb	0	; () banked
  8494  000B10  51E6               	movf	printf@flag& (0+255),w,b
  8495  000B12  0B80               	andlw	128
  8496                           
  8497                           ; Switch size 1, requested type "space"
  8498                           ; Number of cases is 2, Range of values is 0 to 128
  8499                           ; switch strategies available:
  8500                           ; Name         Instructions Cycles
  8501                           ; simple_byte            7     4 (average)
  8502                           ;	Chosen strategy is simple_byte
  8503  000B14  0A00               	xorlw	0	; case 0
  8504  000B16  B4D8               	btfsc	status,2,c
  8505  000B18  D7AE               	goto	l6805
  8506  000B1A  0A80               	xorlw	128	; case 128
  8507  000B1C  B4D8               	btfsc	status,2,c
  8508  000B1E  D7D1               	goto	l6819
  8509  000B20                     l6837:
  8510                           
  8511                           ; BSR set to: 0
  8512                           ;doprnt.c: 1339: if(c < prec)
  8513  000B20  0E80               	movlw	128
  8514  000B22  0100               	movlb	0	; () banked
  8515  000B24  BFEA               	btfsc	printf@c& (0+255),7,b
  8516  000B26  0E7F               	movlw	127
  8517  000B28  0100               	movlb	0	; () banked
  8518  000B2A  6FC7               	movwf	??_printf& (0+255),b
  8519  000B2C  0100               	movlb	0	; () banked
  8520  000B2E  51E8               	movf	printf@prec& (0+255),w,b
  8521  000B30  0100               	movlb	0	; () banked
  8522  000B32  5DEA               	subwf	printf@c& (0+255),w,b
  8523  000B34  0100               	movlb	0	; () banked
  8524  000B36  51E9               	movf	(printf@prec+1)& (0+255),w,b
  8525  000B38  0A80               	xorlw	128
  8526  000B3A  0100               	movlb	0	; () banked
  8527  000B3C  59C7               	subwfb	??_printf& (0+255),w,b
  8528  000B3E  B0D8               	btfsc	status,0,c
  8529  000B40  D003               	goto	l6841
  8530                           
  8531                           ; BSR set to: 0
  8532                           ;doprnt.c: 1340: c = prec;
  8533  000B42  C0E8  F0EA         	movff	printf@prec,printf@c
  8534  000B46  D018               	goto	l6845
  8535  000B48                     l6841:
  8536                           
  8537                           ; BSR set to: 0
  8538                           ;doprnt.c: 1341: else if(prec < c)
  8539  000B48  0100               	movlb	0	; () banked
  8540  000B4A  51E9               	movf	(printf@prec+1)& (0+255),w,b
  8541  000B4C  0A80               	xorlw	128
  8542  000B4E  0100               	movlb	0	; () banked
  8543  000B50  6FC7               	movwf	??_printf& (0+255),b
  8544  000B52  0100               	movlb	0	; () banked
  8545  000B54  51EA               	movf	printf@c& (0+255),w,b
  8546  000B56  0100               	movlb	0	; () banked
  8547  000B58  5DE8               	subwf	printf@prec& (0+255),w,b
  8548  000B5A  0E80               	movlw	128
  8549  000B5C  0100               	movlb	0	; () banked
  8550  000B5E  BFEA               	btfsc	printf@c& (0+255),7,b
  8551  000B60  0E7F               	movlw	127
  8552  000B62  0100               	movlb	0	; () banked
  8553  000B64  59C7               	subwfb	??_printf& (0+255),w,b
  8554  000B66  B0D8               	btfsc	status,0,c
  8555  000B68  D007               	goto	l6845
  8556                           
  8557                           ; BSR set to: 0
  8558                           ;doprnt.c: 1342: prec = c;
  8559  000B6A  0100               	movlb	0	; () banked
  8560  000B6C  51EA               	movf	printf@c& (0+255),w,b
  8561  000B6E  0100               	movlb	0	; () banked
  8562  000B70  6FE8               	movwf	printf@prec& (0+255),b
  8563  000B72  6BE9               	clrf	(printf@prec+1)& (0+255),b
  8564  000B74  BFE8               	btfsc	printf@prec& (0+255),7,b
  8565  000B76  07E9               	decf	(printf@prec+1)& (0+255),f,b
  8566  000B78                     l6845:
  8567                           
  8568                           ; BSR set to: 0
  8569                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8570  000B78  0100               	movlb	0	; () banked
  8571  000B7A  51E4               	movf	printf@width& (0+255),w,b
  8572  000B7C  0100               	movlb	0	; () banked
  8573  000B7E  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  8574  000B80  B4D8               	btfsc	status,2,c
  8575  000B82  D014               	goto	l6851
  8576                           
  8577                           ; BSR set to: 0
  8578  000B84  0E03               	movlw	3
  8579  000B86  0100               	movlb	0	; () banked
  8580  000B88  15E6               	andwf	printf@flag& (0+255),w,b
  8581  000B8A  0100               	movlb	0	; () banked
  8582  000B8C  6FC7               	movwf	??_printf& (0+255),b
  8583  000B8E  0E00               	movlw	0
  8584  000B90  0100               	movlb	0	; () banked
  8585  000B92  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  8586  000B94  0100               	movlb	0	; () banked
  8587  000B96  6FC8               	movwf	(??_printf+1)& (0+255),b
  8588  000B98  0100               	movlb	0	; () banked
  8589  000B9A  51C7               	movf	??_printf& (0+255),w,b
  8590  000B9C  0100               	movlb	0	; () banked
  8591  000B9E  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  8592  000BA0  B4D8               	btfsc	status,2,c
  8593  000BA2  D004               	goto	l6851
  8594                           
  8595                           ; BSR set to: 0
  8596                           ;doprnt.c: 1346: width--;
  8597  000BA4  0100               	movlb	0	; () banked
  8598  000BA6  07E4               	decf	printf@width& (0+255),f,b
  8599  000BA8  A0D8               	btfss	status,0,c
  8600  000BAA  07E5               	decf	(printf@width+1)& (0+255),f,b
  8601  000BAC                     l6851:
  8602                           
  8603                           ; BSR set to: 0
  8604                           ;doprnt.c: 1348: if(flag & 0x4000) {
  8605  000BAC  0100               	movlb	0	; () banked
  8606  000BAE  ADE7               	btfss	(printf@flag+1)& (0+255),6,b
  8607  000BB0  D01E               	goto	l6859
  8608                           
  8609                           ; BSR set to: 0
  8610                           ;doprnt.c: 1349: if(width > prec)
  8611  000BB2  0100               	movlb	0	; () banked
  8612  000BB4  51E4               	movf	printf@width& (0+255),w,b
  8613  000BB6  0100               	movlb	0	; () banked
  8614  000BB8  5DE8               	subwf	printf@prec& (0+255),w,b
  8615  000BBA  0100               	movlb	0	; () banked
  8616  000BBC  51E9               	movf	(printf@prec+1)& (0+255),w,b
  8617  000BBE  0A80               	xorlw	128
  8618  000BC0  0100               	movlb	0	; () banked
  8619  000BC2  6FC7               	movwf	??_printf& (0+255),b
  8620  000BC4  0100               	movlb	0	; () banked
  8621  000BC6  51E5               	movf	(printf@width+1)& (0+255),w,b
  8622  000BC8  0A80               	xorlw	128
  8623  000BCA  0100               	movlb	0	; () banked
  8624  000BCC  59C7               	subwfb	??_printf& (0+255),w,b
  8625  000BCE  B0D8               	btfsc	status,0,c
  8626  000BD0  D009               	goto	l6857
  8627                           
  8628                           ; BSR set to: 0
  8629                           ;doprnt.c: 1350: width -= prec;
  8630  000BD2  0100               	movlb	0	; () banked
  8631  000BD4  51E8               	movf	printf@prec& (0+255),w,b
  8632  000BD6  0100               	movlb	0	; () banked
  8633  000BD8  5FE4               	subwf	printf@width& (0+255),f,b
  8634  000BDA  0100               	movlb	0	; () banked
  8635  000BDC  51E9               	movf	(printf@prec+1)& (0+255),w,b
  8636  000BDE  0100               	movlb	0	; () banked
  8637  000BE0  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  8638  000BE2  D005               	goto	l6859
  8639  000BE4                     l6857:
  8640                           
  8641                           ; BSR set to: 0
  8642                           ;doprnt.c: 1351: else
  8643                           ;doprnt.c: 1352: width = 0;
  8644  000BE4  0E00               	movlw	0
  8645  000BE6  0100               	movlb	0	; () banked
  8646  000BE8  6FE5               	movwf	(printf@width+1)& (0+255),b
  8647  000BEA  0E00               	movlw	0
  8648  000BEC  6FE4               	movwf	printf@width& (0+255),b
  8649  000BEE                     l6859:
  8650                           
  8651                           ; BSR set to: 0
  8652                           ;doprnt.c: 1353: }
  8653                           ;doprnt.c: 1381: if(width > c)
  8654  000BEE  0E80               	movlw	128
  8655  000BF0  0100               	movlb	0	; () banked
  8656  000BF2  BFEA               	btfsc	printf@c& (0+255),7,b
  8657  000BF4  0E7F               	movlw	127
  8658  000BF6  0100               	movlb	0	; () banked
  8659  000BF8  6FC7               	movwf	??_printf& (0+255),b
  8660  000BFA  0100               	movlb	0	; () banked
  8661  000BFC  51E4               	movf	printf@width& (0+255),w,b
  8662  000BFE  0100               	movlb	0	; () banked
  8663  000C00  5DEA               	subwf	printf@c& (0+255),w,b
  8664  000C02  0100               	movlb	0	; () banked
  8665  000C04  51E5               	movf	(printf@width+1)& (0+255),w,b
  8666  000C06  0A80               	xorlw	128
  8667  000C08  0100               	movlb	0	; () banked
  8668  000C0A  59C7               	subwfb	??_printf& (0+255),w,b
  8669  000C0C  B0D8               	btfsc	status,0,c
  8670  000C0E  D00B               	goto	l6863
  8671                           
  8672                           ; BSR set to: 0
  8673                           ;doprnt.c: 1382: width -= c;
  8674  000C10  0100               	movlb	0	; () banked
  8675  000C12  51EA               	movf	printf@c& (0+255),w,b
  8676  000C14  0100               	movlb	0	; () banked
  8677  000C16  5FE4               	subwf	printf@width& (0+255),f,b
  8678  000C18  0E00               	movlw	0
  8679  000C1A  0100               	movlb	0	; () banked
  8680  000C1C  BFEA               	btfsc	printf@c& (0+255),7,b
  8681  000C1E  0EFF               	movlw	255
  8682  000C20  0100               	movlb	0	; () banked
  8683  000C22  5BE5               	subwfb	(printf@width+1)& (0+255),f,b
  8684  000C24  D005               	goto	l6865
  8685  000C26                     l6863:
  8686                           
  8687                           ; BSR set to: 0
  8688                           ;doprnt.c: 1383: else
  8689                           ;doprnt.c: 1384: width = 0;
  8690  000C26  0E00               	movlw	0
  8691  000C28  0100               	movlb	0	; () banked
  8692  000C2A  6FE5               	movwf	(printf@width+1)& (0+255),b
  8693  000C2C  0E00               	movlw	0
  8694  000C2E  6FE4               	movwf	printf@width& (0+255),b
  8695  000C30                     l6865:
  8696                           
  8697                           ; BSR set to: 0
  8698                           ;doprnt.c: 1387: if(flag & 0x04) {
  8699  000C30  0100               	movlb	0	; () banked
  8700  000C32  A5E6               	btfss	printf@flag& (0+255),2,b
  8701  000C34  D021               	goto	l6877
  8702                           
  8703                           ; BSR set to: 0
  8704                           ;doprnt.c: 1392: if(flag & 0x03)
  8705  000C36  0E03               	movlw	3
  8706  000C38  0100               	movlb	0	; () banked
  8707  000C3A  15E6               	andwf	printf@flag& (0+255),w,b
  8708  000C3C  0100               	movlb	0	; () banked
  8709  000C3E  6FC7               	movwf	??_printf& (0+255),b
  8710  000C40  0E00               	movlw	0
  8711  000C42  0100               	movlb	0	; () banked
  8712  000C44  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  8713  000C46  0100               	movlb	0	; () banked
  8714  000C48  6FC8               	movwf	(??_printf+1)& (0+255),b
  8715  000C4A  0100               	movlb	0	; () banked
  8716  000C4C  51C7               	movf	??_printf& (0+255),w,b
  8717  000C4E  0100               	movlb	0	; () banked
  8718  000C50  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  8719  000C52  B4D8               	btfsc	status,2,c
  8720  000C54  D003               	goto	l6871
  8721                           
  8722                           ; BSR set to: 0
  8723                           ;doprnt.c: 1393: (putch('-') );
  8724  000C56  0E2D               	movlw	45
  8725  000C58  EC36  F01E         	call	_putch
  8726  000C5C                     l6871:
  8727                           
  8728                           ;doprnt.c: 1415: if(width)
  8729  000C5C  0100               	movlb	0	; () banked
  8730  000C5E  51E4               	movf	printf@width& (0+255),w,b
  8731  000C60  0100               	movlb	0	; () banked
  8732  000C62  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  8733  000C64  B4D8               	btfsc	status,2,c
  8734  000C66  D0B6               	goto	l6899
  8735                           
  8736                           ; BSR set to: 0
  8737                           ;doprnt.c: 1417: (putch('0') );
  8738                           
  8739                           ; BSR set to: 0
  8740                           
  8741                           ;doprnt.c: 1416: do
  8742  000C68  0E30               	movlw	48
  8743  000C6A  EC36  F01E         	call	_putch
  8744                           
  8745                           ;doprnt.c: 1418: while(--width);
  8746  000C6E  0100               	movlb	0	; () banked
  8747  000C70  07E4               	decf	printf@width& (0+255),f,b
  8748  000C72  A0D8               	btfss	status,0,c
  8749  000C74  07E5               	decf	(printf@width+1)& (0+255),f,b
  8750  000C76  D7F2               	goto	l6871
  8751  000C78                     l6877:
  8752                           
  8753                           ; BSR set to: 0
  8754                           ;doprnt.c: 1422: {
  8755                           ;doprnt.c: 1424: if(width
  8756                           ;doprnt.c: 1428: )
  8757  000C78  0100               	movlb	0	; () banked
  8758  000C7A  51E4               	movf	printf@width& (0+255),w,b
  8759  000C7C  0100               	movlb	0	; () banked
  8760  000C7E  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  8761  000C80  B4D8               	btfsc	status,2,c
  8762  000C82  D00D               	goto	l6883
  8763  000C84                     l6879:
  8764                           
  8765                           ; BSR set to: 0
  8766                           ;doprnt.c: 1430: (putch(' ') );
  8767  000C84  0E20               	movlw	32
  8768  000C86  EC36  F01E         	call	_putch
  8769                           
  8770                           ;doprnt.c: 1431: while(--width);
  8771  000C8A  0100               	movlb	0	; () banked
  8772  000C8C  07E4               	decf	printf@width& (0+255),f,b
  8773  000C8E  A0D8               	btfss	status,0,c
  8774  000C90  07E5               	decf	(printf@width+1)& (0+255),f,b
  8775  000C92  0100               	movlb	0	; () banked
  8776  000C94  51E4               	movf	printf@width& (0+255),w,b
  8777  000C96  0100               	movlb	0	; () banked
  8778  000C98  11E5               	iorwf	(printf@width+1)& (0+255),w,b
  8779  000C9A  A4D8               	btfss	status,2,c
  8780  000C9C  D7F3               	goto	l6879
  8781  000C9E                     l6883:
  8782                           
  8783                           ; BSR set to: 0
  8784                           ;doprnt.c: 1438: if(flag & 0x03)
  8785  000C9E  0E03               	movlw	3
  8786  000CA0  0100               	movlb	0	; () banked
  8787  000CA2  15E6               	andwf	printf@flag& (0+255),w,b
  8788  000CA4  0100               	movlb	0	; () banked
  8789  000CA6  6FC7               	movwf	??_printf& (0+255),b
  8790  000CA8  0E00               	movlw	0
  8791  000CAA  0100               	movlb	0	; () banked
  8792  000CAC  15E7               	andwf	(printf@flag+1)& (0+255),w,b
  8793  000CAE  0100               	movlb	0	; () banked
  8794  000CB0  6FC8               	movwf	(??_printf+1)& (0+255),b
  8795  000CB2  0100               	movlb	0	; () banked
  8796  000CB4  51C7               	movf	??_printf& (0+255),w,b
  8797  000CB6  0100               	movlb	0	; () banked
  8798  000CB8  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  8799  000CBA  B4D8               	btfsc	status,2,c
  8800  000CBC  D08B               	goto	l6899
  8801                           
  8802                           ; BSR set to: 0
  8803                           ;doprnt.c: 1439: (putch('-') );
  8804  000CBE  0E2D               	movlw	45
  8805  000CC0  EC36  F01E         	call	_putch
  8806                           
  8807                           ;doprnt.c: 1469: }
  8808                           ;doprnt.c: 1474: while(prec--) {
  8809  000CC4  D087               	goto	l6899
  8810  000CC6                     l6887:
  8811                           
  8812                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8813  000CC6  C0E8  F0C7         	movff	printf@prec,??_printf
  8814  000CCA  C0E9  F0C8         	movff	printf@prec+1,??_printf+1
  8815  000CCE  0100               	movlb	0	; () banked
  8816  000CD0  90D8               	bcf	status,0,c
  8817  000CD2  37C7               	rlcf	??_printf& (0+255),f,b
  8818  000CD4  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  8819  000CD6  0100               	movlb	0	; () banked
  8820  000CD8  90D8               	bcf	status,0,c
  8821  000CDA  37C7               	rlcf	??_printf& (0+255),f,b
  8822  000CDC  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  8823  000CDE  0E11               	movlw	low _dpowers
  8824  000CE0  0100               	movlb	0	; () banked
  8825  000CE2  25C7               	addwf	??_printf& (0+255),w,b
  8826  000CE4  6EF6               	movwf	tblptrl,c
  8827  000CE6  0EFE               	movlw	high _dpowers
  8828  000CE8  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  8829  000CEA  6EF7               	movwf	tblptrh,c
  8830  000CEC                     	if	0	;There are less than 3 active tblptr bytes
  8831  000CEC                     	endif
  8832  000CEC  0009               	tblrd		*+
  8833  000CEE  CFF5 F027          	movff	tablat,___lldiv@divisor
  8834  000CF2  0009               	tblrd		*+
  8835  000CF4  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  8836  000CF8  0009               	tblrd		*+
  8837  000CFA  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  8838  000CFE  000A               	tblrd		*-
  8839  000D00  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  8840  000D04  C0E0  F023         	movff	printf@val,___lldiv@dividend
  8841  000D08  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  8842  000D0C  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  8843  000D10  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  8844  000D14  EC0A  F01A         	call	___lldiv	;wreg free
  8845  000D18  C023  F030         	movff	?___lldiv,___llmod@dividend
  8846  000D1C  C024  F031         	movff	?___lldiv+1,___llmod@dividend+1
  8847  000D20  C025  F032         	movff	?___lldiv+2,___llmod@dividend+2
  8848  000D24  C026  F033         	movff	?___lldiv+3,___llmod@dividend+3
  8849  000D28  0E0A               	movlw	10
  8850  000D2A  6E34               	movwf	___llmod@divisor,c
  8851  000D2C  0E00               	movlw	0
  8852  000D2E  6E35               	movwf	___llmod@divisor+1,c
  8853  000D30  0E00               	movlw	0
  8854  000D32  6E36               	movwf	___llmod@divisor+2,c
  8855  000D34  0E00               	movlw	0
  8856  000D36  6E37               	movwf	___llmod@divisor+3,c
  8857  000D38  EC2C  F01B         	call	___llmod	;wreg free
  8858  000D3C  5030               	movf	?___llmod,w,c
  8859  000D3E  0F30               	addlw	48
  8860  000D40  0100               	movlb	0	; () banked
  8861  000D42  6FEA               	movwf	printf@c& (0+255),b
  8862                           
  8863                           ;doprnt.c: 1491: break;
  8864  000D44  D043               	goto	l6897
  8865  000D46                     l6889:
  8866                           
  8867                           ; BSR set to: 0
  8868                           ;doprnt.c: 1499: {
  8869                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8870  000D46  C0E0  F023         	movff	printf@val,___lldiv@dividend
  8871  000D4A  C0E1  F024         	movff	printf@val+1,___lldiv@dividend+1
  8872  000D4E  C0E2  F025         	movff	printf@val+2,___lldiv@dividend+2
  8873  000D52  C0E3  F026         	movff	printf@val+3,___lldiv@dividend+3
  8874  000D56  C0E8  F0C7         	movff	printf@prec,??_printf
  8875  000D5A  C0E9  F0C8         	movff	printf@prec+1,??_printf+1
  8876  000D5E  0100               	movlb	0	; () banked
  8877  000D60  90D8               	bcf	status,0,c
  8878  000D62  37C7               	rlcf	??_printf& (0+255),f,b
  8879  000D64  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  8880  000D66  0100               	movlb	0	; () banked
  8881  000D68  90D8               	bcf	status,0,c
  8882  000D6A  37C7               	rlcf	??_printf& (0+255),f,b
  8883  000D6C  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  8884  000D6E  0E87               	movlw	low _hexpowers
  8885  000D70  0100               	movlb	0	; () banked
  8886  000D72  25C7               	addwf	??_printf& (0+255),w,b
  8887  000D74  6EF6               	movwf	tblptrl,c
  8888  000D76  0EFE               	movlw	high _hexpowers
  8889  000D78  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  8890  000D7A  6EF7               	movwf	tblptrh,c
  8891  000D7C                     	if	0	;There are less than 3 active tblptr bytes
  8892  000D7C                     	endif
  8893  000D7C  0009               	tblrd		*+
  8894  000D7E  CFF5 F027          	movff	tablat,___lldiv@divisor
  8895  000D82  0009               	tblrd		*+
  8896  000D84  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  8897  000D88  0009               	tblrd		*+
  8898  000D8A  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  8899  000D8E  000A               	tblrd		*-
  8900  000D90  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  8901  000D94  EC0A  F01A         	call	___lldiv	;wreg free
  8902  000D98  5023               	movf	?___lldiv,w,c
  8903  000D9A  0B0F               	andlw	15
  8904  000D9C  0100               	movlb	0	; () banked
  8905  000D9E  6FD0               	movwf	printf@idx& (0+255),b
  8906                           
  8907                           ; BSR set to: 0
  8908                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  8909  000DA0  0100               	movlb	0	; () banked
  8910  000DA2  51D0               	movf	printf@idx& (0+255),w,b
  8911  000DA4  0D01               	mullw	1
  8912  000DA6  0E2C               	movlw	low STR_23
  8913  000DA8  24F3               	addwf	prodl,w,c
  8914  000DAA  6EF6               	movwf	tblptrl,c
  8915  000DAC  0EFF               	movlw	high STR_23
  8916  000DAE  20F4               	addwfc	prodh,w,c
  8917  000DB0  6EF7               	movwf	tblptrh,c
  8918  000DB2                     	if	0	;There are less than 3 active tblptr bytes
  8919  000DB2                     	endif
  8920  000DB2  0008               	tblrd		*
  8921  000DB4  CFF5 F0EA          	movff	tablat,printf@c
  8922                           
  8923                           ; BSR set to: 0
  8924                           ;doprnt.c: 1523: }
  8925                           
  8926                           ;doprnt.c: 1508: }
  8927                           ;doprnt.c: 1510: break;
  8928  000DB8  D009               	goto	l6897
  8929  000DBA                     l6895:
  8930  000DBA  0100               	movlb	0	; () banked
  8931  000DBC  51E6               	movf	printf@flag& (0+255),w,b
  8932  000DBE  0B80               	andlw	128
  8933                           
  8934                           ; Switch size 1, requested type "space"
  8935                           ; Number of cases is 2, Range of values is 0 to 128
  8936                           ; switch strategies available:
  8937                           ; Name         Instructions Cycles
  8938                           ; simple_byte            7     4 (average)
  8939                           ;	Chosen strategy is simple_byte
  8940  000DC0  0A00               	xorlw	0	; case 0
  8941  000DC2  B4D8               	btfsc	status,2,c
  8942  000DC4  D780               	goto	l6887
  8943  000DC6  0A80               	xorlw	128	; case 128
  8944  000DC8  B4D8               	btfsc	status,2,c
  8945  000DCA  D7BD               	goto	l6889
  8946  000DCC                     l6897:
  8947                           
  8948                           ; BSR set to: 0
  8949                           ;doprnt.c: 1524: (putch(c) );
  8950  000DCC  0100               	movlb	0	; () banked
  8951  000DCE  51EA               	movf	printf@c& (0+255),w,b
  8952  000DD0  EC36  F01E         	call	_putch
  8953  000DD4                     l6899:
  8954  000DD4  0100               	movlb	0	; () banked
  8955  000DD6  07E8               	decf	printf@prec& (0+255),f,b
  8956  000DD8  A0D8               	btfss	status,0,c
  8957  000DDA  07E9               	decf	(printf@prec+1)& (0+255),f,b
  8958  000DDC  0100               	movlb	0	; () banked
  8959  000DDE  29E8               	incf	printf@prec& (0+255),w,b
  8960  000DE0  E1EC               	bnz	l6895
  8961  000DE2  0100               	movlb	0	; () banked
  8962  000DE4  29E9               	incf	(printf@prec+1)& (0+255),w,b
  8963  000DE6  A4D8               	btfss	status,2,c
  8964  000DE8  D7E8               	goto	l6895
  8965  000DEA                     l6901:
  8966  000DEA  C0BD  FFF6         	movff	printf@f,tblptrl
  8967  000DEE  C0BE  FFF7         	movff	printf@f+1,tblptrh
  8968  000DF2  0100               	movlb	0	; () banked
  8969  000DF4  4BBD               	infsnz	printf@f& (0+255),f,b
  8970  000DF6  2BBE               	incf	(printf@f+1)& (0+255),f,b
  8971  000DF8                     	if	0	;tblptru may be non-zero
  8972  000DF8                     	endif
  8973  000DF8                     	if	0	;tblptru may be non-zero
  8974  000DF8                     	endif
  8975  000DF8  0008               	tblrd		*
  8976  000DFA  CFF5 F0EA          	movff	tablat,printf@c
  8977  000DFE  0100               	movlb	0	; () banked
  8978  000E00  51EA               	movf	printf@c& (0+255),w,b
  8979  000E02  B4D8               	btfsc	status,2,c
  8980  000E04  0012               	return	
  8981  000E06  EF11  F000         	goto	l6535
  8982  000E0A                     __end_of_printf:
  8983                           	opt stack 0
  8984                           tblptru	equ	0xFF8
  8985                           tblptrh	equ	0xFF7
  8986                           tblptrl	equ	0xFF6
  8987                           tablat	equ	0xFF5
  8988                           prodh	equ	0xFF4
  8989                           prodl	equ	0xFF3
  8990                           intcon	equ	0xFF2
  8991                           postinc0	equ	0xFEE
  8992                           wreg	equ	0xFE8
  8993                           postdec1	equ	0xFE5
  8994                           fsr1l	equ	0xFE1
  8995                           indf2	equ	0xFDF
  8996                           postinc2	equ	0xFDE
  8997                           postdec2	equ	0xFDD
  8998                           fsr2h	equ	0xFDA
  8999                           fsr2l	equ	0xFD9
  9000                           status	equ	0xFD8
  9001                           
  9002 ;; *************** function _scale *****************
  9003 ;; Defined at:
  9004 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  9005 ;; Parameters:    Size  Location     Type
  9006 ;;  scl             1    wreg     char 
  9007 ;; Auto vars:     Size  Location     Type
  9008 ;;  scl             1   30[BANK0 ] char 
  9009 ;; Return value:  Size  Location     Type
  9010 ;;                  3   24[BANK0 ] char 
  9011 ;; Registers used:
  9012 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9013 ;; Tracked objects:
  9014 ;;		On entry : 0/0
  9015 ;;		On exit  : 0/0
  9016 ;;		Unchanged: 0/0
  9017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9018 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9019 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9021 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9022 ;;Total ram usage:        7 bytes
  9023 ;; Hardware stack levels used:    1
  9024 ;; Hardware stack levels required when called:    5
  9025 ;; This function calls:
  9026 ;;		___awdiv
  9027 ;;		___awmod
  9028 ;;		___ftmul
  9029 ;;		___wmul
  9030 ;; This function is called by:
  9031 ;;		_printf
  9032 ;; This function uses a non-reentrant model
  9033 ;;
  9034                           
  9035                           	psect	text28
  9036  0012F2                     __ptext28:
  9037                           	opt stack 0
  9038  0012F2                     _scale:
  9039                           	opt stack 23
  9040                           
  9041                           ; BSR set to: 0
  9042                           ;incstack = 0
  9043                           ;scale@scl stored from wreg
  9044  0012F2  0100               	movlb	0	; () banked
  9045  0012F4  6F9E               	movwf	scale@scl& (0+255),b
  9046                           
  9047                           ;doprnt.c: 428: if(scl < 0) {
  9048  0012F6  0100               	movlb	0	; () banked
  9049  0012F8  AF9E               	btfss	scale@scl& (0+255),7,b
  9050  0012FA  D104               	goto	l6181
  9051                           
  9052                           ; BSR set to: 0
  9053                           ;doprnt.c: 429: scl = -scl;
  9054  0012FC  0100               	movlb	0	; () banked
  9055  0012FE  6D9E               	negf	scale@scl& (0+255),b
  9056                           
  9057                           ;doprnt.c: 430: if(scl>=110)
  9058  001300  0100               	movlb	0	; () banked
  9059  001302  519E               	movf	scale@scl& (0+255),w,b
  9060  001304  0A80               	xorlw	128
  9061  001306  0F12               	addlw	-238
  9062  001308  A0D8               	btfss	status,0,c
  9063  00130A  D094               	goto	l6171
  9064                           
  9065                           ; BSR set to: 0
  9066                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  9067  00130C  0E00               	movlw	0
  9068  00130E  6E34               	movwf	___wmul@multiplicand+1,c
  9069  001310  0E03               	movlw	3
  9070  001312  6E33               	movwf	___wmul@multiplicand,c
  9071  001314  0E00               	movlw	0
  9072  001316  6E2C               	movwf	___awdiv@divisor+1,c
  9073  001318  0E0A               	movlw	10
  9074  00131A  6E2B               	movwf	___awdiv@divisor,c
  9075  00131C  0E00               	movlw	0
  9076  00131E  6E26               	movwf	___awmod@divisor+1,c
  9077  001320  0E64               	movlw	100
  9078  001322  6E25               	movwf	___awmod@divisor,c
  9079  001324  0100               	movlb	0	; () banked
  9080  001326  519E               	movf	scale@scl& (0+255),w,b
  9081  001328  6E23               	movwf	___awmod@dividend,c
  9082  00132A  6A24               	clrf	___awmod@dividend+1,c
  9083  00132C  BE23               	btfsc	___awmod@dividend,7,c
  9084  00132E  0624               	decf	___awmod@dividend+1,f,c
  9085  001330  EC87  F01A         	call	___awmod	;wreg free
  9086  001334  C023  F029         	movff	?___awmod,___awdiv@dividend
  9087  001338  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  9088  00133C  ECC8  F019         	call	___awdiv	;wreg free
  9089  001340  0E09               	movlw	9
  9090  001342  2429               	addwf	?___awdiv,w,c
  9091  001344  6E31               	movwf	___wmul@multiplier,c
  9092  001346  0E00               	movlw	0
  9093  001348  202A               	addwfc	?___awdiv+1,w,c
  9094  00134A  6E32               	movwf	___wmul@multiplier+1,c
  9095  00134C  EC11  F01E         	call	___wmul	;wreg free
  9096  001350  0E39               	movlw	low __npowers_
  9097  001352  2431               	addwf	?___wmul,w,c
  9098  001354  6EF6               	movwf	tblptrl,c
  9099  001356  0EFE               	movlw	high __npowers_
  9100  001358  2032               	addwfc	?___wmul+1,w,c
  9101  00135A  6EF7               	movwf	tblptrh,c
  9102  00135C                     	if	0	;There are less than 3 active tblptr bytes
  9103  00135C                     	endif
  9104  00135C  0009               	tblrd		*+
  9105  00135E  CFF5 F08C          	movff	tablat,___ftmul@f2
  9106  001362  0009               	tblrd		*+
  9107  001364  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  9108  001368  000A               	tblrd		*-
  9109  00136A  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  9110  00136E  0E00               	movlw	0
  9111  001370  6E2C               	movwf	___awdiv@divisor+1,c
  9112  001372  0E64               	movlw	100
  9113  001374  6E2B               	movwf	___awdiv@divisor,c
  9114  001376  0100               	movlb	0	; () banked
  9115  001378  519E               	movf	scale@scl& (0+255),w,b
  9116  00137A  6E29               	movwf	___awdiv@dividend,c
  9117  00137C  6A2A               	clrf	___awdiv@dividend+1,c
  9118  00137E  BE29               	btfsc	___awdiv@dividend,7,c
  9119  001380  062A               	decf	___awdiv@dividend+1,f,c
  9120  001382  ECC8  F019         	call	___awdiv	;wreg free
  9121  001386  0E12               	movlw	18
  9122  001388  2429               	addwf	?___awdiv,w,c
  9123  00138A  6E31               	movwf	___wmul@multiplier,c
  9124  00138C  0E00               	movlw	0
  9125  00138E  202A               	addwfc	?___awdiv+1,w,c
  9126  001390  6E32               	movwf	___wmul@multiplier+1,c
  9127  001392  0E00               	movlw	0
  9128  001394  6E34               	movwf	___wmul@multiplicand+1,c
  9129  001396  0E03               	movlw	3
  9130  001398  6E33               	movwf	___wmul@multiplicand,c
  9131  00139A  EC11  F01E         	call	___wmul	;wreg free
  9132  00139E  0E39               	movlw	low __npowers_
  9133  0013A0  2431               	addwf	?___wmul,w,c
  9134  0013A2  6EF6               	movwf	tblptrl,c
  9135  0013A4  0EFE               	movlw	high __npowers_
  9136  0013A6  2032               	addwfc	?___wmul+1,w,c
  9137  0013A8  6EF7               	movwf	tblptrh,c
  9138  0013AA                     	if	0	;There are less than 3 active tblptr bytes
  9139  0013AA                     	endif
  9140  0013AA  0009               	tblrd		*+
  9141  0013AC  CFF5 F089          	movff	tablat,___ftmul@f1
  9142  0013B0  0009               	tblrd		*+
  9143  0013B2  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  9144  0013B6  000A               	tblrd		*-
  9145  0013B8  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  9146  0013BC  ECA8  F010         	call	___ftmul	;wreg free
  9147  0013C0  C089  F09B         	movff	?___ftmul,_scale$1429
  9148  0013C4  C08A  F09C         	movff	?___ftmul+1,_scale$1429+1
  9149  0013C8  C08B  F09D         	movff	?___ftmul+2,_scale$1429+2
  9150                           
  9151                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  9152  0013CC  C09B  F089         	movff	_scale$1429,___ftmul@f1
  9153  0013D0  C09C  F08A         	movff	_scale$1429+1,___ftmul@f1+1
  9154  0013D4  C09D  F08B         	movff	_scale$1429+2,___ftmul@f1+2
  9155  0013D8  0E00               	movlw	0
  9156  0013DA  6E34               	movwf	___wmul@multiplicand+1,c
  9157  0013DC  0E03               	movlw	3
  9158  0013DE  6E33               	movwf	___wmul@multiplicand,c
  9159  0013E0  0E00               	movlw	0
  9160  0013E2  6E26               	movwf	___awmod@divisor+1,c
  9161  0013E4  0E0A               	movlw	10
  9162  0013E6  6E25               	movwf	___awmod@divisor,c
  9163  0013E8  0100               	movlb	0	; () banked
  9164  0013EA  519E               	movf	scale@scl& (0+255),w,b
  9165  0013EC  6E23               	movwf	___awmod@dividend,c
  9166  0013EE  6A24               	clrf	___awmod@dividend+1,c
  9167  0013F0  BE23               	btfsc	___awmod@dividend,7,c
  9168  0013F2  0624               	decf	___awmod@dividend+1,f,c
  9169  0013F4  EC87  F01A         	call	___awmod	;wreg free
  9170  0013F8  C023  F031         	movff	?___awmod,___wmul@multiplier
  9171  0013FC  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  9172  001400  EC11  F01E         	call	___wmul	;wreg free
  9173  001404  0E39               	movlw	low __npowers_
  9174  001406  2431               	addwf	?___wmul,w,c
  9175  001408  6EF6               	movwf	tblptrl,c
  9176  00140A  0EFE               	movlw	high __npowers_
  9177  00140C  2032               	addwfc	?___wmul+1,w,c
  9178  00140E  6EF7               	movwf	tblptrh,c
  9179  001410                     	if	0	;There are less than 3 active tblptr bytes
  9180  001410                     	endif
  9181  001410  0009               	tblrd		*+
  9182  001412  CFF5 F08C          	movff	tablat,___ftmul@f2
  9183  001416  0009               	tblrd		*+
  9184  001418  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  9185  00141C  000A               	tblrd		*-
  9186  00141E  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  9187  001422  ECA8  F010         	call	___ftmul	;wreg free
  9188  001426  C089  F098         	movff	?___ftmul,?_scale
  9189  00142A  C08A  F099         	movff	?___ftmul+1,?_scale+1
  9190  00142E  C08B  F09A         	movff	?___ftmul+2,?_scale+2
  9191  001432  0012               	return	
  9192  001434                     l6171:
  9193                           
  9194                           ;doprnt.c: 432: else if(scl > 10)
  9195  001434  0100               	movlb	0	; () banked
  9196  001436  519E               	movf	scale@scl& (0+255),w,b
  9197  001438  0A80               	xorlw	128
  9198  00143A  0F75               	addlw	-139
  9199  00143C  A0D8               	btfss	status,0,c
  9200  00143E  D04F               	goto	l6177
  9201                           
  9202                           ; BSR set to: 0
  9203                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  9204  001440  0E00               	movlw	0
  9205  001442  6E2C               	movwf	___awdiv@divisor+1,c
  9206  001444  0E0A               	movlw	10
  9207  001446  6E2B               	movwf	___awdiv@divisor,c
  9208  001448  0100               	movlb	0	; () banked
  9209  00144A  519E               	movf	scale@scl& (0+255),w,b
  9210  00144C  6E29               	movwf	___awdiv@dividend,c
  9211  00144E  6A2A               	clrf	___awdiv@dividend+1,c
  9212  001450  BE29               	btfsc	___awdiv@dividend,7,c
  9213  001452  062A               	decf	___awdiv@dividend+1,f,c
  9214  001454  ECC8  F019         	call	___awdiv	;wreg free
  9215  001458  0E09               	movlw	9
  9216  00145A  2429               	addwf	?___awdiv,w,c
  9217  00145C  6E31               	movwf	___wmul@multiplier,c
  9218  00145E  0E00               	movlw	0
  9219  001460  202A               	addwfc	?___awdiv+1,w,c
  9220  001462  6E32               	movwf	___wmul@multiplier+1,c
  9221  001464  0E00               	movlw	0
  9222  001466  6E34               	movwf	___wmul@multiplicand+1,c
  9223  001468  0E03               	movlw	3
  9224  00146A  6E33               	movwf	___wmul@multiplicand,c
  9225  00146C  EC11  F01E         	call	___wmul	;wreg free
  9226  001470  0E39               	movlw	low __npowers_
  9227  001472  2431               	addwf	?___wmul,w,c
  9228  001474  6EF6               	movwf	tblptrl,c
  9229  001476  0EFE               	movlw	high __npowers_
  9230  001478  2032               	addwfc	?___wmul+1,w,c
  9231  00147A  6EF7               	movwf	tblptrh,c
  9232  00147C                     	if	0	;There are less than 3 active tblptr bytes
  9233  00147C                     	endif
  9234  00147C  0009               	tblrd		*+
  9235  00147E  CFF5 F089          	movff	tablat,___ftmul@f1
  9236  001482  0009               	tblrd		*+
  9237  001484  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  9238  001488  000A               	tblrd		*-
  9239  00148A  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  9240  00148E  0E00               	movlw	0
  9241  001490  6E34               	movwf	___wmul@multiplicand+1,c
  9242  001492  0E03               	movlw	3
  9243  001494  6E33               	movwf	___wmul@multiplicand,c
  9244  001496  0E00               	movlw	0
  9245  001498  6E26               	movwf	___awmod@divisor+1,c
  9246  00149A  0E0A               	movlw	10
  9247  00149C  6E25               	movwf	___awmod@divisor,c
  9248  00149E  0100               	movlb	0	; () banked
  9249  0014A0  519E               	movf	scale@scl& (0+255),w,b
  9250  0014A2  6E23               	movwf	___awmod@dividend,c
  9251  0014A4  6A24               	clrf	___awmod@dividend+1,c
  9252  0014A6  BE23               	btfsc	___awmod@dividend,7,c
  9253  0014A8  0624               	decf	___awmod@dividend+1,f,c
  9254  0014AA  EC87  F01A         	call	___awmod	;wreg free
  9255  0014AE  C023  F031         	movff	?___awmod,___wmul@multiplier
  9256  0014B2  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  9257  0014B6  EC11  F01E         	call	___wmul	;wreg free
  9258  0014BA  0E39               	movlw	low __npowers_
  9259  0014BC  2431               	addwf	?___wmul,w,c
  9260  0014BE  6EF6               	movwf	tblptrl,c
  9261  0014C0  0EFE               	movlw	high __npowers_
  9262  0014C2  2032               	addwfc	?___wmul+1,w,c
  9263  0014C4  6EF7               	movwf	tblptrh,c
  9264  0014C6                     	if	0	;There are less than 3 active tblptr bytes
  9265  0014C6                     	endif
  9266  0014C6  0009               	tblrd		*+
  9267  0014C8  CFF5 F08C          	movff	tablat,___ftmul@f2
  9268  0014CC  0009               	tblrd		*+
  9269  0014CE  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  9270  0014D2  000A               	tblrd		*-
  9271  0014D4  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  9272  0014D8  ECA8  F010         	call	___ftmul	;wreg free
  9273  0014DC  D7A4               	goto	L4
  9274  0014DE                     l6177:
  9275                           
  9276                           ;doprnt.c: 434: return _npowers_[scl];
  9277  0014DE  0100               	movlb	0	; () banked
  9278  0014E0  519E               	movf	scale@scl& (0+255),w,b
  9279  0014E2  0D03               	mullw	3
  9280  0014E4  0E39               	movlw	low __npowers_
  9281  0014E6  24F3               	addwf	prodl,w,c
  9282  0014E8  6EF6               	movwf	tblptrl,c
  9283  0014EA  0EFE               	movlw	high __npowers_
  9284  0014EC  20F4               	addwfc	prodh,w,c
  9285  0014EE  6EF7               	movwf	tblptrh,c
  9286  0014F0                     	if	0	;There are less than 3 active tblptr bytes
  9287  0014F0                     	endif
  9288  0014F0  0009               	tblrd		*+
  9289  0014F2  CFF5 F098          	movff	tablat,?_scale
  9290  0014F6  0009               	tblrd		*+
  9291  0014F8  CFF5 F099          	movff	tablat,?_scale+1
  9292  0014FC  000A               	tblrd		*-
  9293  0014FE  CFF5 F09A          	movff	tablat,?_scale+2
  9294                           
  9295                           ; BSR set to: 0
  9296  001502  0012               	return	
  9297  001504                     l6181:
  9298                           
  9299                           ; BSR set to: 0
  9300                           ;doprnt.c: 435: }
  9301                           ;doprnt.c: 436: if(scl>=110)
  9302  001504  0100               	movlb	0	; () banked
  9303  001506  519E               	movf	scale@scl& (0+255),w,b
  9304  001508  0A80               	xorlw	128
  9305  00150A  0F12               	addlw	-238
  9306  00150C  A0D8               	btfss	status,0,c
  9307  00150E  D094               	goto	l6189
  9308                           
  9309                           ; BSR set to: 0
  9310                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  9311  001510  0E00               	movlw	0
  9312  001512  6E34               	movwf	___wmul@multiplicand+1,c
  9313  001514  0E03               	movlw	3
  9314  001516  6E33               	movwf	___wmul@multiplicand,c
  9315  001518  0E00               	movlw	0
  9316  00151A  6E2C               	movwf	___awdiv@divisor+1,c
  9317  00151C  0E0A               	movlw	10
  9318  00151E  6E2B               	movwf	___awdiv@divisor,c
  9319  001520  0E00               	movlw	0
  9320  001522  6E26               	movwf	___awmod@divisor+1,c
  9321  001524  0E64               	movlw	100
  9322  001526  6E25               	movwf	___awmod@divisor,c
  9323  001528  0100               	movlb	0	; () banked
  9324  00152A  519E               	movf	scale@scl& (0+255),w,b
  9325  00152C  6E23               	movwf	___awmod@dividend,c
  9326  00152E  6A24               	clrf	___awmod@dividend+1,c
  9327  001530  BE23               	btfsc	___awmod@dividend,7,c
  9328  001532  0624               	decf	___awmod@dividend+1,f,c
  9329  001534  EC87  F01A         	call	___awmod	;wreg free
  9330  001538  C023  F029         	movff	?___awmod,___awdiv@dividend
  9331  00153C  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  9332  001540  ECC8  F019         	call	___awdiv	;wreg free
  9333  001544  0E09               	movlw	9
  9334  001546  2429               	addwf	?___awdiv,w,c
  9335  001548  6E31               	movwf	___wmul@multiplier,c
  9336  00154A  0E00               	movlw	0
  9337  00154C  202A               	addwfc	?___awdiv+1,w,c
  9338  00154E  6E32               	movwf	___wmul@multiplier+1,c
  9339  001550  EC11  F01E         	call	___wmul	;wreg free
  9340  001554  0E60               	movlw	low __powers_
  9341  001556  2431               	addwf	?___wmul,w,c
  9342  001558  6EF6               	movwf	tblptrl,c
  9343  00155A  0EFE               	movlw	high __powers_
  9344  00155C  2032               	addwfc	?___wmul+1,w,c
  9345  00155E  6EF7               	movwf	tblptrh,c
  9346  001560                     	if	0	;There are less than 3 active tblptr bytes
  9347  001560                     	endif
  9348  001560  0009               	tblrd		*+
  9349  001562  CFF5 F08C          	movff	tablat,___ftmul@f2
  9350  001566  0009               	tblrd		*+
  9351  001568  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  9352  00156C  000A               	tblrd		*-
  9353  00156E  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  9354  001572  0E00               	movlw	0
  9355  001574  6E2C               	movwf	___awdiv@divisor+1,c
  9356  001576  0E64               	movlw	100
  9357  001578  6E2B               	movwf	___awdiv@divisor,c
  9358  00157A  0100               	movlb	0	; () banked
  9359  00157C  519E               	movf	scale@scl& (0+255),w,b
  9360  00157E  6E29               	movwf	___awdiv@dividend,c
  9361  001580  6A2A               	clrf	___awdiv@dividend+1,c
  9362  001582  BE29               	btfsc	___awdiv@dividend,7,c
  9363  001584  062A               	decf	___awdiv@dividend+1,f,c
  9364  001586  ECC8  F019         	call	___awdiv	;wreg free
  9365  00158A  0E12               	movlw	18
  9366  00158C  2429               	addwf	?___awdiv,w,c
  9367  00158E  6E31               	movwf	___wmul@multiplier,c
  9368  001590  0E00               	movlw	0
  9369  001592  202A               	addwfc	?___awdiv+1,w,c
  9370  001594  6E32               	movwf	___wmul@multiplier+1,c
  9371  001596  0E00               	movlw	0
  9372  001598  6E34               	movwf	___wmul@multiplicand+1,c
  9373  00159A  0E03               	movlw	3
  9374  00159C  6E33               	movwf	___wmul@multiplicand,c
  9375  00159E  EC11  F01E         	call	___wmul	;wreg free
  9376  0015A2  0E60               	movlw	low __powers_
  9377  0015A4  2431               	addwf	?___wmul,w,c
  9378  0015A6  6EF6               	movwf	tblptrl,c
  9379  0015A8  0EFE               	movlw	high __powers_
  9380  0015AA  2032               	addwfc	?___wmul+1,w,c
  9381  0015AC  6EF7               	movwf	tblptrh,c
  9382  0015AE                     	if	0	;There are less than 3 active tblptr bytes
  9383  0015AE                     	endif
  9384  0015AE  0009               	tblrd		*+
  9385  0015B0  CFF5 F089          	movff	tablat,___ftmul@f1
  9386  0015B4  0009               	tblrd		*+
  9387  0015B6  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  9388  0015BA  000A               	tblrd		*-
  9389  0015BC  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  9390  0015C0  ECA8  F010         	call	___ftmul	;wreg free
  9391  0015C4  C089  F09B         	movff	?___ftmul,_scale$1429
  9392  0015C8  C08A  F09C         	movff	?___ftmul+1,_scale$1429+1
  9393  0015CC  C08B  F09D         	movff	?___ftmul+2,_scale$1429+2
  9394                           
  9395                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  9396  0015D0  C09B  F089         	movff	_scale$1429,___ftmul@f1
  9397  0015D4  C09C  F08A         	movff	_scale$1429+1,___ftmul@f1+1
  9398  0015D8  C09D  F08B         	movff	_scale$1429+2,___ftmul@f1+2
  9399  0015DC  0E00               	movlw	0
  9400  0015DE  6E34               	movwf	___wmul@multiplicand+1,c
  9401  0015E0  0E03               	movlw	3
  9402  0015E2  6E33               	movwf	___wmul@multiplicand,c
  9403  0015E4  0E00               	movlw	0
  9404  0015E6  6E26               	movwf	___awmod@divisor+1,c
  9405  0015E8  0E0A               	movlw	10
  9406  0015EA  6E25               	movwf	___awmod@divisor,c
  9407  0015EC  0100               	movlb	0	; () banked
  9408  0015EE  519E               	movf	scale@scl& (0+255),w,b
  9409  0015F0  6E23               	movwf	___awmod@dividend,c
  9410  0015F2  6A24               	clrf	___awmod@dividend+1,c
  9411  0015F4  BE23               	btfsc	___awmod@dividend,7,c
  9412  0015F6  0624               	decf	___awmod@dividend+1,f,c
  9413  0015F8  EC87  F01A         	call	___awmod	;wreg free
  9414  0015FC  C023  F031         	movff	?___awmod,___wmul@multiplier
  9415  001600  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  9416  001604  EC11  F01E         	call	___wmul	;wreg free
  9417  001608  0E60               	movlw	low __powers_
  9418  00160A  2431               	addwf	?___wmul,w,c
  9419  00160C  6EF6               	movwf	tblptrl,c
  9420  00160E  0EFE               	movlw	high __powers_
  9421  001610  2032               	addwfc	?___wmul+1,w,c
  9422  001612  6EF7               	movwf	tblptrh,c
  9423  001614                     	if	0	;There are less than 3 active tblptr bytes
  9424  001614                     	endif
  9425  001614  0009               	tblrd		*+
  9426  001616  CFF5 F08C          	movff	tablat,___ftmul@f2
  9427  00161A  0009               	tblrd		*+
  9428  00161C  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  9429  001620  000A               	tblrd		*-
  9430  001622  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  9431  001626  ECA8  F010         	call	___ftmul	;wreg free
  9432  00162A  C089  F098         	movff	?___ftmul,?_scale
  9433  00162E  C08A  F099         	movff	?___ftmul+1,?_scale+1
  9434  001632  C08B  F09A         	movff	?___ftmul+2,?_scale+2
  9435  001636  0012               	return	
  9436  001638                     l6189:
  9437                           
  9438                           ;doprnt.c: 438: else if(scl > 10)
  9439  001638  0100               	movlb	0	; () banked
  9440  00163A  519E               	movf	scale@scl& (0+255),w,b
  9441  00163C  0A80               	xorlw	128
  9442  00163E  0F75               	addlw	-139
  9443  001640  A0D8               	btfss	status,0,c
  9444  001642  D04F               	goto	l6195
  9445                           
  9446                           ; BSR set to: 0
  9447                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  9448  001644  0E00               	movlw	0
  9449  001646  6E2C               	movwf	___awdiv@divisor+1,c
  9450  001648  0E0A               	movlw	10
  9451  00164A  6E2B               	movwf	___awdiv@divisor,c
  9452  00164C  0100               	movlb	0	; () banked
  9453  00164E  519E               	movf	scale@scl& (0+255),w,b
  9454  001650  6E29               	movwf	___awdiv@dividend,c
  9455  001652  6A2A               	clrf	___awdiv@dividend+1,c
  9456  001654  BE29               	btfsc	___awdiv@dividend,7,c
  9457  001656  062A               	decf	___awdiv@dividend+1,f,c
  9458  001658  ECC8  F019         	call	___awdiv	;wreg free
  9459  00165C  0E09               	movlw	9
  9460  00165E  2429               	addwf	?___awdiv,w,c
  9461  001660  6E31               	movwf	___wmul@multiplier,c
  9462  001662  0E00               	movlw	0
  9463  001664  202A               	addwfc	?___awdiv+1,w,c
  9464  001666  6E32               	movwf	___wmul@multiplier+1,c
  9465  001668  0E00               	movlw	0
  9466  00166A  6E34               	movwf	___wmul@multiplicand+1,c
  9467  00166C  0E03               	movlw	3
  9468  00166E  6E33               	movwf	___wmul@multiplicand,c
  9469  001670  EC11  F01E         	call	___wmul	;wreg free
  9470  001674  0E60               	movlw	low __powers_
  9471  001676  2431               	addwf	?___wmul,w,c
  9472  001678  6EF6               	movwf	tblptrl,c
  9473  00167A  0EFE               	movlw	high __powers_
  9474  00167C  2032               	addwfc	?___wmul+1,w,c
  9475  00167E  6EF7               	movwf	tblptrh,c
  9476  001680                     	if	0	;There are less than 3 active tblptr bytes
  9477  001680                     	endif
  9478  001680  0009               	tblrd		*+
  9479  001682  CFF5 F089          	movff	tablat,___ftmul@f1
  9480  001686  0009               	tblrd		*+
  9481  001688  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  9482  00168C  000A               	tblrd		*-
  9483  00168E  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  9484  001692  0E00               	movlw	0
  9485  001694  6E34               	movwf	___wmul@multiplicand+1,c
  9486  001696  0E03               	movlw	3
  9487  001698  6E33               	movwf	___wmul@multiplicand,c
  9488  00169A  0E00               	movlw	0
  9489  00169C  6E26               	movwf	___awmod@divisor+1,c
  9490  00169E  0E0A               	movlw	10
  9491  0016A0  6E25               	movwf	___awmod@divisor,c
  9492  0016A2  0100               	movlb	0	; () banked
  9493  0016A4  519E               	movf	scale@scl& (0+255),w,b
  9494  0016A6  6E23               	movwf	___awmod@dividend,c
  9495  0016A8  6A24               	clrf	___awmod@dividend+1,c
  9496  0016AA  BE23               	btfsc	___awmod@dividend,7,c
  9497  0016AC  0624               	decf	___awmod@dividend+1,f,c
  9498  0016AE  EC87  F01A         	call	___awmod	;wreg free
  9499  0016B2  C023  F031         	movff	?___awmod,___wmul@multiplier
  9500  0016B6  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  9501  0016BA  EC11  F01E         	call	___wmul	;wreg free
  9502  0016BE  0E60               	movlw	low __powers_
  9503  0016C0  2431               	addwf	?___wmul,w,c
  9504  0016C2  6EF6               	movwf	tblptrl,c
  9505  0016C4  0EFE               	movlw	high __powers_
  9506  0016C6  2032               	addwfc	?___wmul+1,w,c
  9507  0016C8  6EF7               	movwf	tblptrh,c
  9508  0016CA                     	if	0	;There are less than 3 active tblptr bytes
  9509  0016CA                     	endif
  9510  0016CA  0009               	tblrd		*+
  9511  0016CC  CFF5 F08C          	movff	tablat,___ftmul@f2
  9512  0016D0  0009               	tblrd		*+
  9513  0016D2  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  9514  0016D6  000A               	tblrd		*-
  9515  0016D8  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  9516  0016DC  ECA8  F010         	call	___ftmul	;wreg free
  9517  0016E0  D7A4               	goto	L5
  9518  0016E2                     l6195:
  9519                           
  9520                           ;doprnt.c: 440: return _powers_[scl];
  9521  0016E2  0100               	movlb	0	; () banked
  9522  0016E4  519E               	movf	scale@scl& (0+255),w,b
  9523  0016E6  0D03               	mullw	3
  9524  0016E8  0E60               	movlw	low __powers_
  9525  0016EA  24F3               	addwf	prodl,w,c
  9526  0016EC  6EF6               	movwf	tblptrl,c
  9527  0016EE  0EFE               	movlw	high __powers_
  9528  0016F0  20F4               	addwfc	prodh,w,c
  9529  0016F2  6EF7               	movwf	tblptrh,c
  9530  0016F4                     	if	0	;There are less than 3 active tblptr bytes
  9531  0016F4                     	endif
  9532  0016F4  0009               	tblrd		*+
  9533  0016F6  CFF5 F098          	movff	tablat,?_scale
  9534  0016FA  0009               	tblrd		*+
  9535  0016FC  CFF5 F099          	movff	tablat,?_scale+1
  9536  001700  000A               	tblrd		*-
  9537  001702  CFF5 F09A          	movff	tablat,?_scale+2
  9538  001706  0012               	return	
  9539  001708                     __end_of_scale:
  9540                           	opt stack 0
  9541                           tblptru	equ	0xFF8
  9542                           tblptrh	equ	0xFF7
  9543                           tblptrl	equ	0xFF6
  9544                           tablat	equ	0xFF5
  9545                           prodh	equ	0xFF4
  9546                           prodl	equ	0xFF3
  9547                           intcon	equ	0xFF2
  9548                           postinc0	equ	0xFEE
  9549                           wreg	equ	0xFE8
  9550                           postdec1	equ	0xFE5
  9551                           fsr1l	equ	0xFE1
  9552                           indf2	equ	0xFDF
  9553                           postinc2	equ	0xFDE
  9554                           postdec2	equ	0xFDD
  9555                           fsr2h	equ	0xFDA
  9556                           fsr2l	equ	0xFD9
  9557                           status	equ	0xFD8
  9558                           
  9559 ;; *************** function _putch *****************
  9560 ;; Defined at:
  9561 ;;		line 35 in file "lcd.c"
  9562 ;; Parameters:    Size  Location     Type
  9563 ;;  data            1    wreg     unsigned char 
  9564 ;; Auto vars:     Size  Location     Type
  9565 ;;  data            1   38[COMRAM] unsigned char 
  9566 ;; Return value:  Size  Location     Type
  9567 ;;                  1    wreg      void 
  9568 ;; Registers used:
  9569 ;;		wreg, status,2, status,0, cstack
  9570 ;; Tracked objects:
  9571 ;;		On entry : 0/0
  9572 ;;		On exit  : 0/0
  9573 ;;		Unchanged: 0/0
  9574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9576 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9578 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9579 ;;Total ram usage:        1 bytes
  9580 ;; Hardware stack levels used:    1
  9581 ;; Hardware stack levels required when called:    6
  9582 ;; This function calls:
  9583 ;;		_lcdNewline
  9584 ;;		_lcdNibble
  9585 ;; This function is called by:
  9586 ;;		_printf
  9587 ;; This function uses a non-reentrant model
  9588 ;;
  9589                           
  9590                           	psect	text29
  9591  003C6C                     __ptext29:
  9592                           	opt stack 0
  9593  003C6C                     _putch:
  9594                           	opt stack 22
  9595                           
  9596                           ;incstack = 0
  9597                           ;putch@data stored from wreg
  9598  003C6C  6E27               	movwf	putch@data,c
  9599                           
  9600                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  9601  003C6E  0E0A               	movlw	10
  9602  003C70  1827               	xorwf	putch@data,w,c
  9603  003C72  A4D8               	btfss	status,2,c
  9604  003C74  D003               	goto	l236
  9605  003C76  EC93  F01E         	call	_lcdNewline	;wreg free
  9606  003C7A  0012               	return	
  9607  003C7C                     l236:
  9608                           
  9609                           ;lcd.c: 37: else
  9610                           ;lcd.c: 38: {
  9611                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  9612  003C7C  848C               	bsf	3980,2,c	;volatile
  9613                           
  9614                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  9615  003C7E  0E74               	movlw	116
  9616  003C80                     u8217:
  9617  003C80  2EE8               	decfsz	wreg,f,c
  9618  003C82  D7FE               	bra	u8217
  9619  003C84  D000               	nop2	
  9620                           
  9621                           ;lcd.c: 41: lcdNibble(data);
  9622  003C86  5027               	movf	putch@data,w,c
  9623  003C88  EC5F  F01B         	call	_lcdNibble
  9624  003C8C  0012               	return	
  9625  003C8E                     __end_of_putch:
  9626                           	opt stack 0
  9627                           tblptru	equ	0xFF8
  9628                           tblptrh	equ	0xFF7
  9629                           tblptrl	equ	0xFF6
  9630                           tablat	equ	0xFF5
  9631                           prodh	equ	0xFF4
  9632                           prodl	equ	0xFF3
  9633                           intcon	equ	0xFF2
  9634                           postinc0	equ	0xFEE
  9635                           wreg	equ	0xFE8
  9636                           postdec1	equ	0xFE5
  9637                           fsr1l	equ	0xFE1
  9638                           indf2	equ	0xFDF
  9639                           postinc2	equ	0xFDE
  9640                           postdec2	equ	0xFDD
  9641                           fsr2h	equ	0xFDA
  9642                           fsr2l	equ	0xFD9
  9643                           status	equ	0xFD8
  9644                           
  9645 ;; *************** function _lcdNewline *****************
  9646 ;; Defined at:
  9647 ;;		line 78 in file "lcd.c"
  9648 ;; Parameters:    Size  Location     Type
  9649 ;;		None
  9650 ;; Auto vars:     Size  Location     Type
  9651 ;;		None
  9652 ;; Return value:  Size  Location     Type
  9653 ;;                  1    wreg      void 
  9654 ;; Registers used:
  9655 ;;		wreg, status,2, status,0, cstack
  9656 ;; Tracked objects:
  9657 ;;		On entry : 0/0
  9658 ;;		On exit  : 0/0
  9659 ;;		Unchanged: 0/0
  9660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9665 ;;Total ram usage:        0 bytes
  9666 ;; Hardware stack levels used:    1
  9667 ;; Hardware stack levels required when called:    5
  9668 ;; This function calls:
  9669 ;;		_lcdInst
  9670 ;; This function is called by:
  9671 ;;		_putch
  9672 ;; This function uses a non-reentrant model
  9673 ;;
  9674                           
  9675                           	psect	text30
  9676  003D26                     __ptext30:
  9677                           	opt stack 0
  9678  003D26                     _lcdNewline:
  9679                           	opt stack 22
  9680                           
  9681                           ;lcd.c: 79: lcdInst(0b11000000);
  9682                           
  9683                           ;incstack = 0
  9684  003D26  0EC0               	movlw	192
  9685  003D28  EC47  F01E         	call	_lcdInst
  9686  003D2C  0012               	return		;funcret
  9687  003D2E                     __end_of_lcdNewline:
  9688                           	opt stack 0
  9689                           tblptru	equ	0xFF8
  9690                           tblptrh	equ	0xFF7
  9691                           tblptrl	equ	0xFF6
  9692                           tablat	equ	0xFF5
  9693                           prodh	equ	0xFF4
  9694                           prodl	equ	0xFF3
  9695                           intcon	equ	0xFF2
  9696                           postinc0	equ	0xFEE
  9697                           wreg	equ	0xFE8
  9698                           postdec1	equ	0xFE5
  9699                           fsr1l	equ	0xFE1
  9700                           indf2	equ	0xFDF
  9701                           postinc2	equ	0xFDE
  9702                           postdec2	equ	0xFDD
  9703                           fsr2h	equ	0xFDA
  9704                           fsr2l	equ	0xFD9
  9705                           status	equ	0xFD8
  9706                           
  9707 ;; *************** function _isdigit *****************
  9708 ;; Defined at:
  9709 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  9710 ;; Parameters:    Size  Location     Type
  9711 ;;  c               1    wreg     unsigned char 
  9712 ;; Auto vars:     Size  Location     Type
  9713 ;;  c               1   36[COMRAM] unsigned char 
  9714 ;; Return value:  Size  Location     Type
  9715 ;;		None               void
  9716 ;; Registers used:
  9717 ;;		wreg, status,2, status,0
  9718 ;; Tracked objects:
  9719 ;;		On entry : 0/0
  9720 ;;		On exit  : 0/0
  9721 ;;		Unchanged: 0/0
  9722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9724 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9725 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9726 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9727 ;;Total ram usage:        3 bytes
  9728 ;; Hardware stack levels used:    1
  9729 ;; Hardware stack levels required when called:    3
  9730 ;; This function calls:
  9731 ;;		Nothing
  9732 ;; This function is called by:
  9733 ;;		_printf
  9734 ;; This function uses a non-reentrant model
  9735 ;;
  9736                           
  9737                           	psect	text31
  9738  003CCE                     __ptext31:
  9739                           	opt stack 0
  9740  003CCE                     _isdigit:
  9741                           	opt stack 25
  9742                           
  9743                           ;incstack = 0
  9744                           ;isdigit@c stored from wreg
  9745  003CCE  6E25               	movwf	isdigit@c,c
  9746  003CD0  0E00               	movlw	0
  9747  003CD2  6E24               	movwf	_isdigit$1058,c
  9748  003CD4  0E3A               	movlw	58
  9749  003CD6  6025               	cpfslt	isdigit@c,c
  9750  003CD8  D005               	goto	l6207
  9751  003CDA  0E2F               	movlw	47
  9752  003CDC  6425               	cpfsgt	isdigit@c,c
  9753  003CDE  D002               	goto	l6207
  9754  003CE0  0E01               	movlw	1
  9755  003CE2  6E24               	movwf	_isdigit$1058,c
  9756  003CE4                     l6207:
  9757  003CE4  C024  F023         	movff	_isdigit$1058,??_isdigit
  9758  003CE8  3023               	rrcf	??_isdigit,w,c
  9759  003CEA  0012               	return	
  9760  003CEC                     __end_of_isdigit:
  9761                           	opt stack 0
  9762                           tblptru	equ	0xFF8
  9763                           tblptrh	equ	0xFF7
  9764                           tblptrl	equ	0xFF6
  9765                           tablat	equ	0xFF5
  9766                           prodh	equ	0xFF4
  9767                           prodl	equ	0xFF3
  9768                           intcon	equ	0xFF2
  9769                           postinc0	equ	0xFEE
  9770                           wreg	equ	0xFE8
  9771                           postdec1	equ	0xFE5
  9772                           fsr1l	equ	0xFE1
  9773                           indf2	equ	0xFDF
  9774                           postinc2	equ	0xFDE
  9775                           postdec2	equ	0xFDD
  9776                           fsr2h	equ	0xFDA
  9777                           fsr2l	equ	0xFD9
  9778                           status	equ	0xFD8
  9779                           
  9780 ;; *************** function _fround *****************
  9781 ;; Defined at:
  9782 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  9783 ;; Parameters:    Size  Location     Type
  9784 ;;  prec            1    wreg     unsigned char 
  9785 ;; Auto vars:     Size  Location     Type
  9786 ;;  prec            1   33[BANK0 ] unsigned char 
  9787 ;; Return value:  Size  Location     Type
  9788 ;;                  3   24[BANK0 ] unsigned char 
  9789 ;; Registers used:
  9790 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9791 ;; Tracked objects:
  9792 ;;		On entry : 0/0
  9793 ;;		On exit  : 0/0
  9794 ;;		Unchanged: 0/0
  9795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9796 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9797 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9799 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9800 ;;Total ram usage:       10 bytes
  9801 ;; Hardware stack levels used:    1
  9802 ;; Hardware stack levels required when called:    5
  9803 ;; This function calls:
  9804 ;;		___awdiv
  9805 ;;		___awmod
  9806 ;;		___ftmul
  9807 ;;		___wmul
  9808 ;; This function is called by:
  9809 ;;		_printf
  9810 ;; This function uses a non-reentrant model
  9811 ;;
  9812                           
  9813                           	psect	text32
  9814  001D44                     __ptext32:
  9815                           	opt stack 0
  9816  001D44                     _fround:
  9817                           	opt stack 23
  9818                           
  9819                           ;incstack = 0
  9820                           ;fround@prec stored from wreg
  9821  001D44  0100               	movlb	0	; () banked
  9822  001D46  6FA1               	movwf	fround@prec& (0+255),b
  9823                           
  9824                           ;doprnt.c: 413: if(prec>=110)
  9825  001D48  0E6D               	movlw	109
  9826  001D4A  0100               	movlb	0	; () banked
  9827  001D4C  65A1               	cpfsgt	fround@prec& (0+255),b
  9828  001D4E  D0A2               	goto	l6149
  9829                           
  9830                           ; BSR set to: 0
  9831                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9832  001D50  0E00               	movlw	0
  9833  001D52  6E34               	movwf	___wmul@multiplicand+1,c
  9834  001D54  0E03               	movlw	3
  9835  001D56  6E33               	movwf	___wmul@multiplicand,c
  9836  001D58  0E00               	movlw	0
  9837  001D5A  6E2C               	movwf	___awdiv@divisor+1,c
  9838  001D5C  0E0A               	movlw	10
  9839  001D5E  6E2B               	movwf	___awdiv@divisor,c
  9840  001D60  0E00               	movlw	0
  9841  001D62  6E26               	movwf	___awmod@divisor+1,c
  9842  001D64  0E64               	movlw	100
  9843  001D66  6E25               	movwf	___awmod@divisor,c
  9844  001D68  C0A1  F023         	movff	fround@prec,___awmod@dividend
  9845  001D6C  6A24               	clrf	___awmod@dividend+1,c
  9846  001D6E  EC87  F01A         	call	___awmod	;wreg free
  9847  001D72  C023  F029         	movff	?___awmod,___awdiv@dividend
  9848  001D76  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  9849  001D7A  ECC8  F019         	call	___awdiv	;wreg free
  9850  001D7E  0E09               	movlw	9
  9851  001D80  2429               	addwf	?___awdiv,w,c
  9852  001D82  6E31               	movwf	___wmul@multiplier,c
  9853  001D84  0E00               	movlw	0
  9854  001D86  202A               	addwfc	?___awdiv+1,w,c
  9855  001D88  6E32               	movwf	___wmul@multiplier+1,c
  9856  001D8A  EC11  F01E         	call	___wmul	;wreg free
  9857  001D8E  0E39               	movlw	low __npowers_
  9858  001D90  2431               	addwf	?___wmul,w,c
  9859  001D92  6EF6               	movwf	tblptrl,c
  9860  001D94  0EFE               	movlw	high __npowers_
  9861  001D96  2032               	addwfc	?___wmul+1,w,c
  9862  001D98  6EF7               	movwf	tblptrh,c
  9863  001D9A                     	if	0	;There are less than 3 active tblptr bytes
  9864  001D9A                     	endif
  9865  001D9A  0009               	tblrd		*+
  9866  001D9C  CFF5 F08C          	movff	tablat,___ftmul@f2
  9867  001DA0  0009               	tblrd		*+
  9868  001DA2  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  9869  001DA6  000A               	tblrd		*-
  9870  001DA8  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  9871  001DAC  0E00               	movlw	0
  9872  001DAE  6E2C               	movwf	___awdiv@divisor+1,c
  9873  001DB0  0E64               	movlw	100
  9874  001DB2  6E2B               	movwf	___awdiv@divisor,c
  9875  001DB4  C0A1  F029         	movff	fround@prec,___awdiv@dividend
  9876  001DB8  6A2A               	clrf	___awdiv@dividend+1,c
  9877  001DBA  ECC8  F019         	call	___awdiv	;wreg free
  9878  001DBE  0E12               	movlw	18
  9879  001DC0  2429               	addwf	?___awdiv,w,c
  9880  001DC2  6E31               	movwf	___wmul@multiplier,c
  9881  001DC4  0E00               	movlw	0
  9882  001DC6  202A               	addwfc	?___awdiv+1,w,c
  9883  001DC8  6E32               	movwf	___wmul@multiplier+1,c
  9884  001DCA  0E00               	movlw	0
  9885  001DCC  6E34               	movwf	___wmul@multiplicand+1,c
  9886  001DCE  0E03               	movlw	3
  9887  001DD0  6E33               	movwf	___wmul@multiplicand,c
  9888  001DD2  EC11  F01E         	call	___wmul	;wreg free
  9889  001DD6  0E39               	movlw	low __npowers_
  9890  001DD8  2431               	addwf	?___wmul,w,c
  9891  001DDA  6EF6               	movwf	tblptrl,c
  9892  001DDC  0EFE               	movlw	high __npowers_
  9893  001DDE  2032               	addwfc	?___wmul+1,w,c
  9894  001DE0  6EF7               	movwf	tblptrh,c
  9895  001DE2                     	if	0	;There are less than 3 active tblptr bytes
  9896  001DE2                     	endif
  9897  001DE2  0009               	tblrd		*+
  9898  001DE4  CFF5 F089          	movff	tablat,___ftmul@f1
  9899  001DE8  0009               	tblrd		*+
  9900  001DEA  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  9901  001DEE  000A               	tblrd		*-
  9902  001DF0  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  9903  001DF4  ECA8  F010         	call	___ftmul	;wreg free
  9904  001DF8  C089  F09E         	movff	?___ftmul,_fround$1427
  9905  001DFC  C08A  F09F         	movff	?___ftmul+1,_fround$1427+1
  9906  001E00  C08B  F0A0         	movff	?___ftmul+2,_fround$1427+2
  9907                           
  9908                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9909  001E04  0E00               	movlw	0
  9910  001E06  6E34               	movwf	___wmul@multiplicand+1,c
  9911  001E08  0E03               	movlw	3
  9912  001E0A  6E33               	movwf	___wmul@multiplicand,c
  9913  001E0C  0E00               	movlw	0
  9914  001E0E  6E26               	movwf	___awmod@divisor+1,c
  9915  001E10  0E0A               	movlw	10
  9916  001E12  6E25               	movwf	___awmod@divisor,c
  9917  001E14  C0A1  F023         	movff	fround@prec,___awmod@dividend
  9918  001E18  6A24               	clrf	___awmod@dividend+1,c
  9919  001E1A  EC87  F01A         	call	___awmod	;wreg free
  9920  001E1E  C023  F031         	movff	?___awmod,___wmul@multiplier
  9921  001E22  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  9922  001E26  EC11  F01E         	call	___wmul	;wreg free
  9923  001E2A  0E39               	movlw	low __npowers_
  9924  001E2C  2431               	addwf	?___wmul,w,c
  9925  001E2E  6EF6               	movwf	tblptrl,c
  9926  001E30  0EFE               	movlw	high __npowers_
  9927  001E32  2032               	addwfc	?___wmul+1,w,c
  9928  001E34  6EF7               	movwf	tblptrh,c
  9929  001E36                     	if	0	;There are less than 3 active tblptr bytes
  9930  001E36                     	endif
  9931  001E36  0009               	tblrd		*+
  9932  001E38  CFF5 F08C          	movff	tablat,___ftmul@f2
  9933  001E3C  0009               	tblrd		*+
  9934  001E3E  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  9935  001E42  000A               	tblrd		*-
  9936  001E44  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  9937  001E48  C09E  F089         	movff	_fround$1427,___ftmul@f1
  9938  001E4C  C09F  F08A         	movff	_fround$1427+1,___ftmul@f1+1
  9939  001E50  C0A0  F08B         	movff	_fround$1427+2,___ftmul@f1+2
  9940  001E54  ECA8  F010         	call	___ftmul	;wreg free
  9941  001E58  C089  F09B         	movff	?___ftmul,_fround$1428
  9942  001E5C  C08A  F09C         	movff	?___ftmul+1,_fround$1428+1
  9943  001E60  C08B  F09D         	movff	?___ftmul+2,_fround$1428+2
  9944                           
  9945                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9946  001E64  C09B  F089         	movff	_fround$1428,___ftmul@f1
  9947  001E68  C09C  F08A         	movff	_fround$1428+1,___ftmul@f1+1
  9948  001E6C  C09D  F08B         	movff	_fround$1428+2,___ftmul@f1+2
  9949  001E70  0E00               	movlw	0
  9950  001E72  0100               	movlb	0	; () banked
  9951  001E74  6F8C               	movwf	___ftmul@f2& (0+255),b
  9952  001E76  0E00               	movlw	0
  9953  001E78  0100               	movlb	0	; () banked
  9954  001E7A  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  9955  001E7C  0E3F               	movlw	63
  9956  001E7E  0100               	movlb	0	; () banked
  9957  001E80  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  9958  001E82  ECA8  F010         	call	___ftmul	;wreg free
  9959  001E86  C089  F098         	movff	?___ftmul,?_fround
  9960  001E8A  C08A  F099         	movff	?___ftmul+1,?_fround+1
  9961  001E8E  C08B  F09A         	movff	?___ftmul+2,?_fround+2
  9962  001E92  0012               	return	
  9963  001E94                     l6149:
  9964                           
  9965                           ;doprnt.c: 415: else if(prec > 10)
  9966  001E94  0E0A               	movlw	10
  9967  001E96  0100               	movlb	0	; () banked
  9968  001E98  65A1               	cpfsgt	fround@prec& (0+255),b
  9969  001E9A  D060               	goto	l6157
  9970                           
  9971                           ; BSR set to: 0
  9972                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9973  001E9C  0E00               	movlw	0
  9974  001E9E  6E34               	movwf	___wmul@multiplicand+1,c
  9975  001EA0  0E03               	movlw	3
  9976  001EA2  6E33               	movwf	___wmul@multiplicand,c
  9977  001EA4  0E00               	movlw	0
  9978  001EA6  6E26               	movwf	___awmod@divisor+1,c
  9979  001EA8  0E0A               	movlw	10
  9980  001EAA  6E25               	movwf	___awmod@divisor,c
  9981  001EAC  C0A1  F023         	movff	fround@prec,___awmod@dividend
  9982  001EB0  6A24               	clrf	___awmod@dividend+1,c
  9983  001EB2  EC87  F01A         	call	___awmod	;wreg free
  9984  001EB6  C023  F031         	movff	?___awmod,___wmul@multiplier
  9985  001EBA  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  9986  001EBE  EC11  F01E         	call	___wmul	;wreg free
  9987  001EC2  0E39               	movlw	low __npowers_
  9988  001EC4  2431               	addwf	?___wmul,w,c
  9989  001EC6  6EF6               	movwf	tblptrl,c
  9990  001EC8  0EFE               	movlw	high __npowers_
  9991  001ECA  2032               	addwfc	?___wmul+1,w,c
  9992  001ECC  6EF7               	movwf	tblptrh,c
  9993  001ECE                     	if	0	;There are less than 3 active tblptr bytes
  9994  001ECE                     	endif
  9995  001ECE  0009               	tblrd		*+
  9996  001ED0  CFF5 F08C          	movff	tablat,___ftmul@f2
  9997  001ED4  0009               	tblrd		*+
  9998  001ED6  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  9999  001EDA  000A               	tblrd		*-
 10000  001EDC  CFF5 F08E          	movff	tablat,___ftmul@f2+2
 10001  001EE0  0E00               	movlw	0
 10002  001EE2  6E2C               	movwf	___awdiv@divisor+1,c
 10003  001EE4  0E0A               	movlw	10
 10004  001EE6  6E2B               	movwf	___awdiv@divisor,c
 10005  001EE8  C0A1  F029         	movff	fround@prec,___awdiv@dividend
 10006  001EEC  6A2A               	clrf	___awdiv@dividend+1,c
 10007  001EEE  ECC8  F019         	call	___awdiv	;wreg free
 10008  001EF2  0E09               	movlw	9
 10009  001EF4  2429               	addwf	?___awdiv,w,c
 10010  001EF6  6E31               	movwf	___wmul@multiplier,c
 10011  001EF8  0E00               	movlw	0
 10012  001EFA  202A               	addwfc	?___awdiv+1,w,c
 10013  001EFC  6E32               	movwf	___wmul@multiplier+1,c
 10014  001EFE  0E00               	movlw	0
 10015  001F00  6E34               	movwf	___wmul@multiplicand+1,c
 10016  001F02  0E03               	movlw	3
 10017  001F04  6E33               	movwf	___wmul@multiplicand,c
 10018  001F06  EC11  F01E         	call	___wmul	;wreg free
 10019  001F0A  0E39               	movlw	low __npowers_
 10020  001F0C  2431               	addwf	?___wmul,w,c
 10021  001F0E  6EF6               	movwf	tblptrl,c
 10022  001F10  0EFE               	movlw	high __npowers_
 10023  001F12  2032               	addwfc	?___wmul+1,w,c
 10024  001F14  6EF7               	movwf	tblptrh,c
 10025  001F16                     	if	0	;There are less than 3 active tblptr bytes
 10026  001F16                     	endif
 10027  001F16  0009               	tblrd		*+
 10028  001F18  CFF5 F089          	movff	tablat,___ftmul@f1
 10029  001F1C  0009               	tblrd		*+
 10030  001F1E  CFF5 F08A          	movff	tablat,___ftmul@f1+1
 10031  001F22  000A               	tblrd		*-
 10032  001F24  CFF5 F08B          	movff	tablat,___ftmul@f1+2
 10033  001F28  ECA8  F010         	call	___ftmul	;wreg free
 10034  001F2C  C089  F09E         	movff	?___ftmul,_fround$1427
 10035  001F30  C08A  F09F         	movff	?___ftmul+1,_fround$1427+1
 10036  001F34  C08B  F0A0         	movff	?___ftmul+2,_fround$1427+2
 10037                           
 10038                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 10039  001F38  C09E  F089         	movff	_fround$1427,___ftmul@f1
 10040  001F3C  C09F  F08A         	movff	_fround$1427+1,___ftmul@f1+1
 10041  001F40  C0A0  F08B         	movff	_fround$1427+2,___ftmul@f1+2
 10042  001F44  0E00               	movlw	0
 10043  001F46  0100               	movlb	0	; () banked
 10044  001F48  6F8C               	movwf	___ftmul@f2& (0+255),b
 10045  001F4A  0E00               	movlw	0
 10046  001F4C  0100               	movlb	0	; () banked
 10047  001F4E  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
 10048  001F50  0E3F               	movlw	63
 10049  001F52  0100               	movlb	0	; () banked
 10050  001F54  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
 10051  001F56  ECA8  F010         	call	___ftmul	;wreg free
 10052  001F5A  D795               	goto	L6
 10053  001F5C                     l6157:
 10054                           
 10055                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 10056  001F5C  0100               	movlb	0	; () banked
 10057  001F5E  51A1               	movf	fround@prec& (0+255),w,b
 10058  001F60  0D03               	mullw	3
 10059  001F62  0E39               	movlw	low __npowers_
 10060  001F64  24F3               	addwf	prodl,w,c
 10061  001F66  6EF6               	movwf	tblptrl,c
 10062  001F68  0EFE               	movlw	high __npowers_
 10063  001F6A  20F4               	addwfc	prodh,w,c
 10064  001F6C  6EF7               	movwf	tblptrh,c
 10065  001F6E                     	if	0	;There are less than 3 active tblptr bytes
 10066  001F6E                     	endif
 10067  001F6E  0009               	tblrd		*+
 10068  001F70  CFF5 F089          	movff	tablat,___ftmul@f1
 10069  001F74  0009               	tblrd		*+
 10070  001F76  CFF5 F08A          	movff	tablat,___ftmul@f1+1
 10071  001F7A  000A               	tblrd		*-
 10072  001F7C  CFF5 F08B          	movff	tablat,___ftmul@f1+2
 10073  001F80  0E00               	movlw	0
 10074  001F82  0100               	movlb	0	; () banked
 10075  001F84  6F8C               	movwf	___ftmul@f2& (0+255),b
 10076  001F86  0E00               	movlw	0
 10077  001F88  0100               	movlb	0	; () banked
 10078  001F8A  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
 10079  001F8C  0E3F               	movlw	63
 10080  001F8E  0100               	movlb	0	; () banked
 10081  001F90  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
 10082  001F92  ECA8  F010         	call	___ftmul	;wreg free
 10083  001F96  C089  F098         	movff	?___ftmul,?_fround
 10084  001F9A  C08A  F099         	movff	?___ftmul+1,?_fround+1
 10085  001F9E  C08B  F09A         	movff	?___ftmul+2,?_fround+2
 10086  001FA2  0012               	return	
 10087  001FA4                     __end_of_fround:
 10088                           	opt stack 0
 10089                           tblptru	equ	0xFF8
 10090                           tblptrh	equ	0xFF7
 10091                           tblptrl	equ	0xFF6
 10092                           tablat	equ	0xFF5
 10093                           prodh	equ	0xFF4
 10094                           prodl	equ	0xFF3
 10095                           intcon	equ	0xFF2
 10096                           postinc0	equ	0xFEE
 10097                           wreg	equ	0xFE8
 10098                           postdec1	equ	0xFE5
 10099                           fsr1l	equ	0xFE1
 10100                           indf2	equ	0xFDF
 10101                           postinc2	equ	0xFDE
 10102                           postdec2	equ	0xFDD
 10103                           fsr2h	equ	0xFDA
 10104                           fsr2l	equ	0xFD9
 10105                           status	equ	0xFD8
 10106                           
 10107 ;; *************** function ___wmul *****************
 10108 ;; Defined at:
 10109 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 10110 ;; Parameters:    Size  Location     Type
 10111 ;;  multiplier      2   48[COMRAM] unsigned int 
 10112 ;;  multiplicand    2   50[COMRAM] unsigned int 
 10113 ;; Auto vars:     Size  Location     Type
 10114 ;;  product         2   52[COMRAM] unsigned int 
 10115 ;; Return value:  Size  Location     Type
 10116 ;;                  2   48[COMRAM] unsigned int 
 10117 ;; Registers used:
 10118 ;;		wreg, status,2, status,0, prodl, prodh
 10119 ;; Tracked objects:
 10120 ;;		On entry : 0/0
 10121 ;;		On exit  : 0/0
 10122 ;;		Unchanged: 0/0
 10123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10124 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10125 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10127 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10128 ;;Total ram usage:        6 bytes
 10129 ;; Hardware stack levels used:    1
 10130 ;; Hardware stack levels required when called:    3
 10131 ;; This function calls:
 10132 ;;		Nothing
 10133 ;; This function is called by:
 10134 ;;		_readPastRun
 10135 ;;		_saveNewRun
 10136 ;;		_fround
 10137 ;;		_scale
 10138 ;;		_printf
 10139 ;; This function uses a non-reentrant model
 10140 ;;
 10141                           
 10142                           	psect	text33
 10143  003C22                     __ptext33:
 10144                           	opt stack 0
 10145  003C22                     ___wmul:
 10146                           	opt stack 24
 10147                           
 10148                           ;incstack = 0
 10149  003C22  5031               	movf	___wmul@multiplier,w,c
 10150  003C24  0233               	mulwf	___wmul@multiplicand,c
 10151  003C26  CFF3 F035          	movff	prodl,___wmul@product
 10152  003C2A  CFF4 F036          	movff	prodh,___wmul@product+1
 10153  003C2E  5031               	movf	___wmul@multiplier,w,c
 10154  003C30  0234               	mulwf	___wmul@multiplicand+1,c
 10155  003C32  50F3               	movf	prodl,w,c
 10156  003C34  2636               	addwf	___wmul@product+1,f,c
 10157  003C36  5032               	movf	___wmul@multiplier+1,w,c
 10158  003C38  0233               	mulwf	___wmul@multiplicand,c
 10159  003C3A  50F3               	movf	prodl,w,c
 10160  003C3C  2636               	addwf	___wmul@product+1,f,c
 10161  003C3E  C035  F031         	movff	___wmul@product,?___wmul
 10162  003C42  C036  F032         	movff	___wmul@product+1,?___wmul+1
 10163  003C46  0012               	return	
 10164  003C48                     __end_of___wmul:
 10165                           	opt stack 0
 10166                           tblptru	equ	0xFF8
 10167                           tblptrh	equ	0xFF7
 10168                           tblptrl	equ	0xFF6
 10169                           tablat	equ	0xFF5
 10170                           prodh	equ	0xFF4
 10171                           prodl	equ	0xFF3
 10172                           intcon	equ	0xFF2
 10173                           postinc0	equ	0xFEE
 10174                           wreg	equ	0xFE8
 10175                           postdec1	equ	0xFE5
 10176                           fsr1l	equ	0xFE1
 10177                           indf2	equ	0xFDF
 10178                           postinc2	equ	0xFDE
 10179                           postdec2	equ	0xFDD
 10180                           fsr2h	equ	0xFDA
 10181                           fsr2l	equ	0xFD9
 10182                           status	equ	0xFD8
 10183                           
 10184 ;; *************** function ___ftmul *****************
 10185 ;; Defined at:
 10186 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 10187 ;; Parameters:    Size  Location     Type
 10188 ;;  f1              3    9[BANK0 ] float 
 10189 ;;  f2              3   12[BANK0 ] float 
 10190 ;; Auto vars:     Size  Location     Type
 10191 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 10192 ;;  sign            1   23[BANK0 ] unsigned char 
 10193 ;;  cntr            1   22[BANK0 ] unsigned char 
 10194 ;;  exp             1   18[BANK0 ] unsigned char 
 10195 ;; Return value:  Size  Location     Type
 10196 ;;                  3    9[BANK0 ] float 
 10197 ;; Registers used:
 10198 ;;		wreg, status,2, status,0, cstack
 10199 ;; Tracked objects:
 10200 ;;		On entry : 0/0
 10201 ;;		On exit  : 0/0
 10202 ;;		Unchanged: 0/0
 10203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10204 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10205 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10206 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10207 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10208 ;;Total ram usage:       15 bytes
 10209 ;; Hardware stack levels used:    1
 10210 ;; Hardware stack levels required when called:    4
 10211 ;; This function calls:
 10212 ;;		___ftpack
 10213 ;; This function is called by:
 10214 ;;		_sortBattery
 10215 ;;		_angleToPulse
 10216 ;;		_fround
 10217 ;;		_scale
 10218 ;;		_printf
 10219 ;; This function uses a non-reentrant model
 10220 ;;
 10221                           
 10222                           	psect	text34
 10223  002150                     __ptext34:
 10224                           	opt stack 0
 10225  002150                     ___ftmul:
 10226                           	opt stack 23
 10227                           
 10228                           ;incstack = 0
 10229  002150  C08B  F08F         	movff	___ftmul@f1+2,??___ftmul
 10230  002154  0100               	movlb	0	; () banked
 10231  002156  6B90               	clrf	(??___ftmul+1)& (0+255),b
 10232  002158  6B91               	clrf	(??___ftmul+2)& (0+255),b
 10233  00215A  0100               	movlb	0	; () banked
 10234  00215C  358A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 10235  00215E  0100               	movlb	0	; () banked
 10236  002160  378F               	rlcf	??___ftmul& (0+255),f,b
 10237  002162  E301               	bnc	u5991
 10238  002164  8190               	bsf	(??___ftmul+1)& (0+255),0,b
 10239  002166                     u5991:
 10240  002166  0100               	movlb	0	; () banked
 10241  002168  518F               	movf	??___ftmul& (0+255),w,b
 10242  00216A  0100               	movlb	0	; () banked
 10243  00216C  6F92               	movwf	___ftmul@exp& (0+255),b
 10244  00216E  0100               	movlb	0	; () banked
 10245  002170  5192               	movf	___ftmul@exp& (0+255),w,b
 10246  002172  A4D8               	btfss	status,2,c
 10247  002174  D00A               	goto	l6009
 10248                           
 10249                           ; BSR set to: 0
 10250  002176  0E00               	movlw	0
 10251  002178  0100               	movlb	0	; () banked
 10252  00217A  6F89               	movwf	?___ftmul& (0+255),b
 10253  00217C  0E00               	movlw	0
 10254  00217E  0100               	movlb	0	; () banked
 10255  002180  6F8A               	movwf	(?___ftmul+1)& (0+255),b
 10256  002182  0E00               	movlw	0
 10257  002184  0100               	movlb	0	; () banked
 10258  002186  6F8B               	movwf	(?___ftmul+2)& (0+255),b
 10259                           
 10260                           ; BSR set to: 0
 10261  002188  0012               	return	
 10262  00218A                     l6009:
 10263                           
 10264                           ; BSR set to: 0
 10265  00218A  C08E  F08F         	movff	___ftmul@f2+2,??___ftmul
 10266  00218E  0100               	movlb	0	; () banked
 10267  002190  6B90               	clrf	(??___ftmul+1)& (0+255),b
 10268  002192  6B91               	clrf	(??___ftmul+2)& (0+255),b
 10269  002194  0100               	movlb	0	; () banked
 10270  002196  358D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 10271  002198  0100               	movlb	0	; () banked
 10272  00219A  378F               	rlcf	??___ftmul& (0+255),f,b
 10273  00219C  E301               	bnc	u6011
 10274  00219E  8190               	bsf	(??___ftmul+1)& (0+255),0,b
 10275  0021A0                     u6011:
 10276  0021A0  0100               	movlb	0	; () banked
 10277  0021A2  518F               	movf	??___ftmul& (0+255),w,b
 10278  0021A4  0100               	movlb	0	; () banked
 10279  0021A6  6F97               	movwf	___ftmul@sign& (0+255),b
 10280  0021A8  0100               	movlb	0	; () banked
 10281  0021AA  5197               	movf	___ftmul@sign& (0+255),w,b
 10282  0021AC  A4D8               	btfss	status,2,c
 10283  0021AE  D00A               	goto	l6015
 10284                           
 10285                           ; BSR set to: 0
 10286  0021B0  0E00               	movlw	0
 10287  0021B2  0100               	movlb	0	; () banked
 10288  0021B4  6F89               	movwf	?___ftmul& (0+255),b
 10289  0021B6  0E00               	movlw	0
 10290  0021B8  0100               	movlb	0	; () banked
 10291  0021BA  6F8A               	movwf	(?___ftmul+1)& (0+255),b
 10292  0021BC  0E00               	movlw	0
 10293  0021BE  0100               	movlb	0	; () banked
 10294  0021C0  6F8B               	movwf	(?___ftmul+2)& (0+255),b
 10295                           
 10296                           ; BSR set to: 0
 10297  0021C2  0012               	return	
 10298  0021C4                     l6015:
 10299                           
 10300                           ; BSR set to: 0
 10301  0021C4  0100               	movlb	0	; () banked
 10302  0021C6  5197               	movf	___ftmul@sign& (0+255),w,b
 10303  0021C8  0F7B               	addlw	123
 10304  0021CA  0100               	movlb	0	; () banked
 10305  0021CC  2792               	addwf	___ftmul@exp& (0+255),f,b
 10306                           
 10307                           ; BSR set to: 0
 10308  0021CE  C08B  F097         	movff	___ftmul@f1+2,___ftmul@sign
 10309  0021D2  0100               	movlb	0	; () banked
 10310  0021D4  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 10311  0021D6  0100               	movlb	0	; () banked
 10312  0021D8  1B97               	xorwf	___ftmul@sign& (0+255),f,b
 10313  0021DA  0E80               	movlw	128
 10314  0021DC  0100               	movlb	0	; () banked
 10315  0021DE  1797               	andwf	___ftmul@sign& (0+255),f,b
 10316                           
 10317                           ; BSR set to: 0
 10318  0021E0  0100               	movlb	0	; () banked
 10319  0021E2  8F8A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 10320                           
 10321                           ; BSR set to: 0
 10322  0021E4  0100               	movlb	0	; () banked
 10323  0021E6  8F8D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 10324                           
 10325                           ; BSR set to: 0
 10326  0021E8  0EFF               	movlw	255
 10327  0021EA  0100               	movlb	0	; () banked
 10328  0021EC  178C               	andwf	___ftmul@f2& (0+255),f,b
 10329  0021EE  0EFF               	movlw	255
 10330  0021F0  0100               	movlb	0	; () banked
 10331  0021F2  178D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 10332  0021F4  0E00               	movlw	0
 10333  0021F6  0100               	movlb	0	; () banked
 10334  0021F8  178E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 10335                           
 10336                           ; BSR set to: 0
 10337  0021FA  0E00               	movlw	0
 10338  0021FC  0100               	movlb	0	; () banked
 10339  0021FE  6F93               	movwf	___ftmul@f3_as_product& (0+255),b
 10340  002200  0E00               	movlw	0
 10341  002202  0100               	movlb	0	; () banked
 10342  002204  6F94               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 10343  002206  0E00               	movlw	0
 10344  002208  0100               	movlb	0	; () banked
 10345  00220A  6F95               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 10346                           
 10347                           ; BSR set to: 0
 10348  00220C  0E07               	movlw	7
 10349  00220E  0100               	movlb	0	; () banked
 10350  002210  6F96               	movwf	___ftmul@cntr& (0+255),b
 10351  002212                     l6029:
 10352                           
 10353                           ; BSR set to: 0
 10354  002212  0100               	movlb	0	; () banked
 10355  002214  A189               	btfss	___ftmul@f1& (0+255),0,b
 10356  002216  D00C               	goto	l6033
 10357                           
 10358                           ; BSR set to: 0
 10359  002218  0100               	movlb	0	; () banked
 10360  00221A  518C               	movf	___ftmul@f2& (0+255),w,b
 10361  00221C  0100               	movlb	0	; () banked
 10362  00221E  2793               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10363  002220  0100               	movlb	0	; () banked
 10364  002222  518D               	movf	(___ftmul@f2+1)& (0+255),w,b
 10365  002224  0100               	movlb	0	; () banked
 10366  002226  2394               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10367  002228  0100               	movlb	0	; () banked
 10368  00222A  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 10369  00222C  0100               	movlb	0	; () banked
 10370  00222E  2395               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10371  002230                     l6033:
 10372                           
 10373                           ; BSR set to: 0
 10374  002230  0100               	movlb	0	; () banked
 10375  002232  90D8               	bcf	status,0,c
 10376  002234  338B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10377  002236  338A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10378  002238  3389               	rrcf	___ftmul@f1& (0+255),f,b
 10379  00223A  0100               	movlb	0	; () banked
 10380  00223C  90D8               	bcf	status,0,c
 10381  00223E  378C               	rlcf	___ftmul@f2& (0+255),f,b
 10382  002240  378D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 10383  002242  378E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 10384                           
 10385                           ; BSR set to: 0
 10386  002244  0100               	movlb	0	; () banked
 10387  002246  2F96               	decfsz	___ftmul@cntr& (0+255),f,b
 10388  002248  D7E4               	goto	l6029
 10389                           
 10390                           ; BSR set to: 0
 10391                           
 10392                           ; BSR set to: 0
 10393  00224A  0E09               	movlw	9
 10394  00224C  0100               	movlb	0	; () banked
 10395  00224E  6F96               	movwf	___ftmul@cntr& (0+255),b
 10396  002250                     l6039:
 10397                           
 10398                           ; BSR set to: 0
 10399  002250  0100               	movlb	0	; () banked
 10400  002252  A189               	btfss	___ftmul@f1& (0+255),0,b
 10401  002254  D00C               	goto	l6043
 10402                           
 10403                           ; BSR set to: 0
 10404  002256  0100               	movlb	0	; () banked
 10405  002258  518C               	movf	___ftmul@f2& (0+255),w,b
 10406  00225A  0100               	movlb	0	; () banked
 10407  00225C  2793               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10408  00225E  0100               	movlb	0	; () banked
 10409  002260  518D               	movf	(___ftmul@f2+1)& (0+255),w,b
 10410  002262  0100               	movlb	0	; () banked
 10411  002264  2394               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10412  002266  0100               	movlb	0	; () banked
 10413  002268  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 10414  00226A  0100               	movlb	0	; () banked
 10415  00226C  2395               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10416  00226E                     l6043:
 10417                           
 10418                           ; BSR set to: 0
 10419  00226E  0100               	movlb	0	; () banked
 10420  002270  90D8               	bcf	status,0,c
 10421  002272  338B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10422  002274  338A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10423  002276  3389               	rrcf	___ftmul@f1& (0+255),f,b
 10424  002278  0100               	movlb	0	; () banked
 10425  00227A  90D8               	bcf	status,0,c
 10426  00227C  3395               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10427  00227E  3394               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10428  002280  3393               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10429                           
 10430                           ; BSR set to: 0
 10431  002282  0100               	movlb	0	; () banked
 10432  002284  2F96               	decfsz	___ftmul@cntr& (0+255),f,b
 10433  002286  D7E4               	goto	l6039
 10434                           
 10435                           ; BSR set to: 0
 10436                           
 10437                           ; BSR set to: 0
 10438  002288  C093  F023         	movff	___ftmul@f3_as_product,___ftpack@arg
 10439  00228C  C094  F024         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10440  002290  C095  F025         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10441  002294  C092  F026         	movff	___ftmul@exp,___ftpack@exp
 10442  002298  C097  F027         	movff	___ftmul@sign,___ftpack@sign
 10443  00229C  EC44  F018         	call	___ftpack	;wreg free
 10444  0022A0  C023  F089         	movff	?___ftpack,?___ftmul
 10445  0022A4  C024  F08A         	movff	?___ftpack+1,?___ftmul+1
 10446  0022A8  C025  F08B         	movff	?___ftpack+2,?___ftmul+2
 10447  0022AC  0012               	return	
 10448  0022AE                     __end_of___ftmul:
 10449                           	opt stack 0
 10450                           tblptru	equ	0xFF8
 10451                           tblptrh	equ	0xFF7
 10452                           tblptrl	equ	0xFF6
 10453                           tablat	equ	0xFF5
 10454                           prodh	equ	0xFF4
 10455                           prodl	equ	0xFF3
 10456                           intcon	equ	0xFF2
 10457                           postinc0	equ	0xFEE
 10458                           wreg	equ	0xFE8
 10459                           postdec1	equ	0xFE5
 10460                           fsr1l	equ	0xFE1
 10461                           indf2	equ	0xFDF
 10462                           postinc2	equ	0xFDE
 10463                           postdec2	equ	0xFDD
 10464                           fsr2h	equ	0xFDA
 10465                           fsr2l	equ	0xFD9
 10466                           status	equ	0xFD8
 10467                           
 10468 ;; *************** function ___awmod *****************
 10469 ;; Defined at:
 10470 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 10471 ;; Parameters:    Size  Location     Type
 10472 ;;  dividend        2   34[COMRAM] int 
 10473 ;;  divisor         2   36[COMRAM] int 
 10474 ;; Auto vars:     Size  Location     Type
 10475 ;;  sign            1   39[COMRAM] unsigned char 
 10476 ;;  counter         1   38[COMRAM] unsigned char 
 10477 ;; Return value:  Size  Location     Type
 10478 ;;                  2   34[COMRAM] int 
 10479 ;; Registers used:
 10480 ;;		wreg, status,2, status,0
 10481 ;; Tracked objects:
 10482 ;;		On entry : 0/0
 10483 ;;		On exit  : 0/0
 10484 ;;		Unchanged: 0/0
 10485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10486 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10487 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10489 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10490 ;;Total ram usage:        6 bytes
 10491 ;; Hardware stack levels used:    1
 10492 ;; Hardware stack levels required when called:    3
 10493 ;; This function calls:
 10494 ;;		Nothing
 10495 ;; This function is called by:
 10496 ;;		_fround
 10497 ;;		_scale
 10498 ;; This function uses a non-reentrant model
 10499 ;;
 10500                           
 10501                           	psect	text35
 10502  00350E                     __ptext35:
 10503                           	opt stack 0
 10504  00350E                     ___awmod:
 10505                           	opt stack 24
 10506                           
 10507                           ;incstack = 0
 10508  00350E  0E00               	movlw	0
 10509  003510  6E28               	movwf	___awmod@sign,c
 10510  003512  AE24               	btfss	___awmod@dividend+1,7,c
 10511  003514  D006               	goto	l6103
 10512  003516  6C23               	negf	___awmod@dividend,c
 10513  003518  1E24               	comf	___awmod@dividend+1,f,c
 10514  00351A  B0D8               	btfsc	status,0,c
 10515  00351C  2A24               	incf	___awmod@dividend+1,f,c
 10516  00351E  0E01               	movlw	1
 10517  003520  6E28               	movwf	___awmod@sign,c
 10518  003522                     l6103:
 10519  003522  AE26               	btfss	___awmod@divisor+1,7,c
 10520  003524  D004               	goto	l6107
 10521  003526  6C25               	negf	___awmod@divisor,c
 10522  003528  1E26               	comf	___awmod@divisor+1,f,c
 10523  00352A  B0D8               	btfsc	status,0,c
 10524  00352C  2A26               	incf	___awmod@divisor+1,f,c
 10525  00352E                     l6107:
 10526  00352E  5025               	movf	___awmod@divisor,w,c
 10527  003530  1026               	iorwf	___awmod@divisor+1,w,c
 10528  003532  B4D8               	btfsc	status,2,c
 10529  003534  D018               	goto	l6123
 10530  003536  0E01               	movlw	1
 10531  003538  6E27               	movwf	___awmod@counter,c
 10532  00353A  D004               	goto	l6113
 10533  00353C                     l6111:
 10534  00353C  90D8               	bcf	status,0,c
 10535  00353E  3625               	rlcf	___awmod@divisor,f,c
 10536  003540  3626               	rlcf	___awmod@divisor+1,f,c
 10537  003542  2A27               	incf	___awmod@counter,f,c
 10538  003544                     l6113:
 10539  003544  AE26               	btfss	___awmod@divisor+1,7,c
 10540  003546  D7FA               	goto	l6111
 10541  003548                     l6115:
 10542  003548  5025               	movf	___awmod@divisor,w,c
 10543  00354A  5C23               	subwf	___awmod@dividend,w,c
 10544  00354C  5026               	movf	___awmod@divisor+1,w,c
 10545  00354E  5824               	subwfb	___awmod@dividend+1,w,c
 10546  003550  A0D8               	btfss	status,0,c
 10547  003552  D004               	goto	l6119
 10548  003554  5025               	movf	___awmod@divisor,w,c
 10549  003556  5E23               	subwf	___awmod@dividend,f,c
 10550  003558  5026               	movf	___awmod@divisor+1,w,c
 10551  00355A  5A24               	subwfb	___awmod@dividend+1,f,c
 10552  00355C                     l6119:
 10553  00355C  90D8               	bcf	status,0,c
 10554  00355E  3226               	rrcf	___awmod@divisor+1,f,c
 10555  003560  3225               	rrcf	___awmod@divisor,f,c
 10556  003562  2E27               	decfsz	___awmod@counter,f,c
 10557  003564  D7F1               	goto	l6115
 10558  003566                     l6123:
 10559  003566  5028               	movf	___awmod@sign,w,c
 10560  003568  B4D8               	btfsc	status,2,c
 10561  00356A  D004               	goto	l6127
 10562  00356C  6C23               	negf	___awmod@dividend,c
 10563  00356E  1E24               	comf	___awmod@dividend+1,f,c
 10564  003570  B0D8               	btfsc	status,0,c
 10565  003572  2A24               	incf	___awmod@dividend+1,f,c
 10566  003574                     l6127:
 10567  003574  C023  F023         	movff	___awmod@dividend,?___awmod
 10568  003578  C024  F024         	movff	___awmod@dividend+1,?___awmod+1
 10569  00357C  0012               	return	
 10570  00357E                     __end_of___awmod:
 10571                           	opt stack 0
 10572                           tblptru	equ	0xFF8
 10573                           tblptrh	equ	0xFF7
 10574                           tblptrl	equ	0xFF6
 10575                           tablat	equ	0xFF5
 10576                           prodh	equ	0xFF4
 10577                           prodl	equ	0xFF3
 10578                           intcon	equ	0xFF2
 10579                           postinc0	equ	0xFEE
 10580                           wreg	equ	0xFE8
 10581                           postdec1	equ	0xFE5
 10582                           fsr1l	equ	0xFE1
 10583                           indf2	equ	0xFDF
 10584                           postinc2	equ	0xFDE
 10585                           postdec2	equ	0xFDD
 10586                           fsr2h	equ	0xFDA
 10587                           fsr2l	equ	0xFD9
 10588                           status	equ	0xFD8
 10589                           
 10590 ;; *************** function ___awdiv *****************
 10591 ;; Defined at:
 10592 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10593 ;; Parameters:    Size  Location     Type
 10594 ;;  dividend        2   40[COMRAM] int 
 10595 ;;  divisor         2   42[COMRAM] int 
 10596 ;; Auto vars:     Size  Location     Type
 10597 ;;  quotient        2   46[COMRAM] int 
 10598 ;;  sign            1   45[COMRAM] unsigned char 
 10599 ;;  counter         1   44[COMRAM] unsigned char 
 10600 ;; Return value:  Size  Location     Type
 10601 ;;                  2   40[COMRAM] int 
 10602 ;; Registers used:
 10603 ;;		wreg, status,2, status,0
 10604 ;; Tracked objects:
 10605 ;;		On entry : 0/0
 10606 ;;		On exit  : 0/0
 10607 ;;		Unchanged: 0/0
 10608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10609 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10610 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10612 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10613 ;;Total ram usage:        8 bytes
 10614 ;; Hardware stack levels used:    1
 10615 ;; Hardware stack levels required when called:    3
 10616 ;; This function calls:
 10617 ;;		Nothing
 10618 ;; This function is called by:
 10619 ;;		_fround
 10620 ;;		_scale
 10621 ;;		_printf
 10622 ;; This function uses a non-reentrant model
 10623 ;;
 10624                           
 10625                           	psect	text36
 10626  003390                     __ptext36:
 10627                           	opt stack 0
 10628  003390                     ___awdiv:
 10629                           	opt stack 24
 10630                           
 10631                           ;incstack = 0
 10632  003390  0E00               	movlw	0
 10633  003392  6E2E               	movwf	___awdiv@sign,c
 10634  003394  AE2C               	btfss	___awdiv@divisor+1,7,c
 10635  003396  D006               	goto	l6059
 10636  003398  6C2B               	negf	___awdiv@divisor,c
 10637  00339A  1E2C               	comf	___awdiv@divisor+1,f,c
 10638  00339C  B0D8               	btfsc	status,0,c
 10639  00339E  2A2C               	incf	___awdiv@divisor+1,f,c
 10640  0033A0  0E01               	movlw	1
 10641  0033A2  6E2E               	movwf	___awdiv@sign,c
 10642  0033A4                     l6059:
 10643  0033A4  AE2A               	btfss	___awdiv@dividend+1,7,c
 10644  0033A6  D006               	goto	l6065
 10645  0033A8  6C29               	negf	___awdiv@dividend,c
 10646  0033AA  1E2A               	comf	___awdiv@dividend+1,f,c
 10647  0033AC  B0D8               	btfsc	status,0,c
 10648  0033AE  2A2A               	incf	___awdiv@dividend+1,f,c
 10649  0033B0  0E01               	movlw	1
 10650  0033B2  1A2E               	xorwf	___awdiv@sign,f,c
 10651  0033B4                     l6065:
 10652  0033B4  0E00               	movlw	0
 10653  0033B6  6E30               	movwf	___awdiv@quotient+1,c
 10654  0033B8  0E00               	movlw	0
 10655  0033BA  6E2F               	movwf	___awdiv@quotient,c
 10656  0033BC  502B               	movf	___awdiv@divisor,w,c
 10657  0033BE  102C               	iorwf	___awdiv@divisor+1,w,c
 10658  0033C0  B4D8               	btfsc	status,2,c
 10659  0033C2  D01C               	goto	l6087
 10660  0033C4  0E01               	movlw	1
 10661  0033C6  6E2D               	movwf	___awdiv@counter,c
 10662  0033C8  D004               	goto	l6073
 10663  0033CA                     l6071:
 10664  0033CA  90D8               	bcf	status,0,c
 10665  0033CC  362B               	rlcf	___awdiv@divisor,f,c
 10666  0033CE  362C               	rlcf	___awdiv@divisor+1,f,c
 10667  0033D0  2A2D               	incf	___awdiv@counter,f,c
 10668  0033D2                     l6073:
 10669  0033D2  AE2C               	btfss	___awdiv@divisor+1,7,c
 10670  0033D4  D7FA               	goto	l6071
 10671  0033D6                     l6075:
 10672  0033D6  90D8               	bcf	status,0,c
 10673  0033D8  362F               	rlcf	___awdiv@quotient,f,c
 10674  0033DA  3630               	rlcf	___awdiv@quotient+1,f,c
 10675  0033DC  502B               	movf	___awdiv@divisor,w,c
 10676  0033DE  5C29               	subwf	___awdiv@dividend,w,c
 10677  0033E0  502C               	movf	___awdiv@divisor+1,w,c
 10678  0033E2  582A               	subwfb	___awdiv@dividend+1,w,c
 10679  0033E4  A0D8               	btfss	status,0,c
 10680  0033E6  D005               	goto	l6083
 10681  0033E8  502B               	movf	___awdiv@divisor,w,c
 10682  0033EA  5E29               	subwf	___awdiv@dividend,f,c
 10683  0033EC  502C               	movf	___awdiv@divisor+1,w,c
 10684  0033EE  5A2A               	subwfb	___awdiv@dividend+1,f,c
 10685  0033F0  802F               	bsf	___awdiv@quotient,0,c
 10686  0033F2                     l6083:
 10687  0033F2  90D8               	bcf	status,0,c
 10688  0033F4  322C               	rrcf	___awdiv@divisor+1,f,c
 10689  0033F6  322B               	rrcf	___awdiv@divisor,f,c
 10690  0033F8  2E2D               	decfsz	___awdiv@counter,f,c
 10691  0033FA  D7ED               	goto	l6075
 10692  0033FC                     l6087:
 10693  0033FC  502E               	movf	___awdiv@sign,w,c
 10694  0033FE  B4D8               	btfsc	status,2,c
 10695  003400  D004               	goto	l6091
 10696  003402  6C2F               	negf	___awdiv@quotient,c
 10697  003404  1E30               	comf	___awdiv@quotient+1,f,c
 10698  003406  B0D8               	btfsc	status,0,c
 10699  003408  2A30               	incf	___awdiv@quotient+1,f,c
 10700  00340A                     l6091:
 10701  00340A  C02F  F029         	movff	___awdiv@quotient,?___awdiv
 10702  00340E  C030  F02A         	movff	___awdiv@quotient+1,?___awdiv+1
 10703  003412  0012               	return	
 10704  003414                     __end_of___awdiv:
 10705                           	opt stack 0
 10706                           tblptru	equ	0xFF8
 10707                           tblptrh	equ	0xFF7
 10708                           tblptrl	equ	0xFF6
 10709                           tablat	equ	0xFF5
 10710                           prodh	equ	0xFF4
 10711                           prodl	equ	0xFF3
 10712                           intcon	equ	0xFF2
 10713                           postinc0	equ	0xFEE
 10714                           wreg	equ	0xFE8
 10715                           postdec1	equ	0xFE5
 10716                           fsr1l	equ	0xFE1
 10717                           indf2	equ	0xFDF
 10718                           postinc2	equ	0xFDE
 10719                           postdec2	equ	0xFDD
 10720                           fsr2h	equ	0xFDA
 10721                           fsr2l	equ	0xFD9
 10722                           status	equ	0xFD8
 10723                           
 10724 ;; *************** function __tdiv_to_l_ *****************
 10725 ;; Defined at:
 10726 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
 10727 ;; Parameters:    Size  Location     Type
 10728 ;;  f1              3   34[COMRAM] float 
 10729 ;;  f2              3   37[COMRAM] float 
 10730 ;; Auto vars:     Size  Location     Type
 10731 ;;  quot            4   43[COMRAM] unsigned long 
 10732 ;;  exp1            1   48[COMRAM] unsigned char 
 10733 ;;  cntr            1   47[COMRAM] unsigned char 
 10734 ;; Return value:  Size  Location     Type
 10735 ;;                  4   34[COMRAM] unsigned long 
 10736 ;; Registers used:
 10737 ;;		wreg, status,2, status,0
 10738 ;; Tracked objects:
 10739 ;;		On entry : 0/0
 10740 ;;		On exit  : 0/0
 10741 ;;		Unchanged: 0/0
 10742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10743 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10744 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10745 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10746 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10747 ;;Total ram usage:       15 bytes
 10748 ;; Hardware stack levels used:    1
 10749 ;; Hardware stack levels required when called:    3
 10750 ;; This function calls:
 10751 ;;		Nothing
 10752 ;; This function is called by:
 10753 ;;		_printf
 10754 ;; This function uses a non-reentrant model
 10755 ;;
 10756                           
 10757                           	psect	text37
 10758  00254A                     __ptext37:
 10759                           	opt stack 0
 10760  00254A                     __tdiv_to_l_:
 10761                           	opt stack 25
 10762                           
 10763                           ;incstack = 0
 10764  00254A  C025  F029         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 10765  00254E  6A2A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 10766  002550  6A2B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 10767  002552  3424               	rlcf	__tdiv_to_l_@f1+1,w,c
 10768  002554  3629               	rlcf	??__tdiv_to_l_& (0+255),f,c
 10769  002556  E301               	bnc	u6271
 10770  002558  802A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 10771  00255A                     u6271:
 10772  00255A  5029               	movf	??__tdiv_to_l_,w,c
 10773  00255C  6E31               	movwf	__tdiv_to_l_@exp1,c
 10774  00255E  5031               	movf	__tdiv_to_l_@exp1,w,c
 10775  002560  A4D8               	btfss	status,2,c
 10776  002562  D009               	goto	l6217
 10777  002564  0E00               	movlw	0
 10778  002566  6E23               	movwf	?__tdiv_to_l_,c
 10779  002568  0E00               	movlw	0
 10780  00256A  6E24               	movwf	?__tdiv_to_l_+1,c
 10781  00256C  0E00               	movlw	0
 10782  00256E  6E25               	movwf	?__tdiv_to_l_+2,c
 10783  002570  0E00               	movlw	0
 10784  002572  6E26               	movwf	?__tdiv_to_l_+3,c
 10785  002574  0012               	return	
 10786  002576                     l6217:
 10787  002576  C028  F029         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 10788  00257A  6A2A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 10789  00257C  6A2B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 10790  00257E  3427               	rlcf	__tdiv_to_l_@f2+1,w,c
 10791  002580  3629               	rlcf	??__tdiv_to_l_& (0+255),f,c
 10792  002582  E301               	bnc	u6291
 10793  002584  802A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 10794  002586                     u6291:
 10795  002586  5029               	movf	??__tdiv_to_l_,w,c
 10796  002588  6E30               	movwf	__tdiv_to_l_@cntr,c
 10797  00258A  5030               	movf	__tdiv_to_l_@cntr,w,c
 10798  00258C  A4D8               	btfss	status,2,c
 10799  00258E  D009               	goto	l6223
 10800  002590  0E00               	movlw	0
 10801  002592  6E23               	movwf	?__tdiv_to_l_,c
 10802  002594  0E00               	movlw	0
 10803  002596  6E24               	movwf	?__tdiv_to_l_+1,c
 10804  002598  0E00               	movlw	0
 10805  00259A  6E25               	movwf	?__tdiv_to_l_+2,c
 10806  00259C  0E00               	movlw	0
 10807  00259E  6E26               	movwf	?__tdiv_to_l_+3,c
 10808  0025A0  0012               	return	
 10809  0025A2                     l6223:
 10810  0025A2  8E24               	bsf	__tdiv_to_l_@f1+1,7,c
 10811  0025A4  0EFF               	movlw	255
 10812  0025A6  1623               	andwf	__tdiv_to_l_@f1,f,c
 10813  0025A8  0EFF               	movlw	255
 10814  0025AA  1624               	andwf	__tdiv_to_l_@f1+1,f,c
 10815  0025AC  0E00               	movlw	0
 10816  0025AE  1625               	andwf	__tdiv_to_l_@f1+2,f,c
 10817  0025B0  8E27               	bsf	__tdiv_to_l_@f2+1,7,c
 10818  0025B2  0EFF               	movlw	255
 10819  0025B4  1626               	andwf	__tdiv_to_l_@f2,f,c
 10820  0025B6  0EFF               	movlw	255
 10821  0025B8  1627               	andwf	__tdiv_to_l_@f2+1,f,c
 10822  0025BA  0E00               	movlw	0
 10823  0025BC  1628               	andwf	__tdiv_to_l_@f2+2,f,c
 10824  0025BE  0E00               	movlw	0
 10825  0025C0  6E2C               	movwf	__tdiv_to_l_@quot,c
 10826  0025C2  0E00               	movlw	0
 10827  0025C4  6E2D               	movwf	__tdiv_to_l_@quot+1,c
 10828  0025C6  0E00               	movlw	0
 10829  0025C8  6E2E               	movwf	__tdiv_to_l_@quot+2,c
 10830  0025CA  0E00               	movlw	0
 10831  0025CC  6E2F               	movwf	__tdiv_to_l_@quot+3,c
 10832  0025CE  0E7F               	movlw	127
 10833  0025D0  5E31               	subwf	__tdiv_to_l_@exp1,f,c
 10834  0025D2  5030               	movf	__tdiv_to_l_@cntr,w,c
 10835  0025D4  0F98               	addlw	152
 10836  0025D6  5E31               	subwf	__tdiv_to_l_@exp1,f,c
 10837  0025D8  0E18               	movlw	24
 10838  0025DA  6E30               	movwf	__tdiv_to_l_@cntr,c
 10839  0025DC                     l1173:
 10840  0025DC  90D8               	bcf	status,0,c
 10841  0025DE  362C               	rlcf	__tdiv_to_l_@quot,f,c
 10842  0025E0  362D               	rlcf	__tdiv_to_l_@quot+1,f,c
 10843  0025E2  362E               	rlcf	__tdiv_to_l_@quot+2,f,c
 10844  0025E4  362F               	rlcf	__tdiv_to_l_@quot+3,f,c
 10845  0025E6  5026               	movf	__tdiv_to_l_@f2,w,c
 10846  0025E8  5C23               	subwf	__tdiv_to_l_@f1,w,c
 10847  0025EA  5027               	movf	__tdiv_to_l_@f2+1,w,c
 10848  0025EC  5824               	subwfb	__tdiv_to_l_@f1+1,w,c
 10849  0025EE  5028               	movf	__tdiv_to_l_@f2+2,w,c
 10850  0025F0  5825               	subwfb	__tdiv_to_l_@f1+2,w,c
 10851  0025F2  A0D8               	btfss	status,0,c
 10852  0025F4  D007               	goto	l1174
 10853  0025F6  5026               	movf	__tdiv_to_l_@f2,w,c
 10854  0025F8  5E23               	subwf	__tdiv_to_l_@f1,f,c
 10855  0025FA  5027               	movf	__tdiv_to_l_@f2+1,w,c
 10856  0025FC  5A24               	subwfb	__tdiv_to_l_@f1+1,f,c
 10857  0025FE  5028               	movf	__tdiv_to_l_@f2+2,w,c
 10858  002600  5A25               	subwfb	__tdiv_to_l_@f1+2,f,c
 10859  002602  802C               	bsf	__tdiv_to_l_@quot,0,c
 10860  002604                     l1174:
 10861  002604  90D8               	bcf	status,0,c
 10862  002606  3623               	rlcf	__tdiv_to_l_@f1,f,c
 10863  002608  3624               	rlcf	__tdiv_to_l_@f1+1,f,c
 10864  00260A  3625               	rlcf	__tdiv_to_l_@f1+2,f,c
 10865  00260C  2E30               	decfsz	__tdiv_to_l_@cntr,f,c
 10866  00260E  D7E6               	goto	l1173
 10867  002610  AE31               	btfss	__tdiv_to_l_@exp1,7,c
 10868  002612  D016               	goto	l6257
 10869  002614  5031               	movf	__tdiv_to_l_@exp1,w,c
 10870  002616  0A80               	xorlw	128
 10871  002618  0F97               	addlw	151
 10872  00261A  B0D8               	btfsc	status,0,c
 10873  00261C  D009               	goto	l6253
 10874  00261E  0E00               	movlw	0
 10875  002620  6E23               	movwf	?__tdiv_to_l_,c
 10876  002622  0E00               	movlw	0
 10877  002624  6E24               	movwf	?__tdiv_to_l_+1,c
 10878  002626  0E00               	movlw	0
 10879  002628  6E25               	movwf	?__tdiv_to_l_+2,c
 10880  00262A  0E00               	movlw	0
 10881  00262C  6E26               	movwf	?__tdiv_to_l_+3,c
 10882  00262E  0012               	return	
 10883  002630                     l6253:
 10884  002630  90D8               	bcf	status,0,c
 10885  002632  322F               	rrcf	__tdiv_to_l_@quot+3,f,c
 10886  002634  322E               	rrcf	__tdiv_to_l_@quot+2,f,c
 10887  002636  322D               	rrcf	__tdiv_to_l_@quot+1,f,c
 10888  002638  322C               	rrcf	__tdiv_to_l_@quot,f,c
 10889  00263A  3E31               	incfsz	__tdiv_to_l_@exp1,f,c
 10890  00263C  D7F9               	goto	l6253
 10891  00263E  D015               	goto	l1180
 10892  002640                     l6257:
 10893  002640  0E17               	movlw	23
 10894  002642  6431               	cpfsgt	__tdiv_to_l_@exp1,c
 10895  002644  D00F               	goto	l6265
 10896  002646  0E00               	movlw	0
 10897  002648  6E23               	movwf	?__tdiv_to_l_,c
 10898  00264A  0E00               	movlw	0
 10899  00264C  6E24               	movwf	?__tdiv_to_l_+1,c
 10900  00264E  0E00               	movlw	0
 10901  002650  6E25               	movwf	?__tdiv_to_l_+2,c
 10902  002652  0E00               	movlw	0
 10903  002654  6E26               	movwf	?__tdiv_to_l_+3,c
 10904  002656  0012               	return	
 10905  002658                     l6263:
 10906  002658  90D8               	bcf	status,0,c
 10907  00265A  362C               	rlcf	__tdiv_to_l_@quot,f,c
 10908  00265C  362D               	rlcf	__tdiv_to_l_@quot+1,f,c
 10909  00265E  362E               	rlcf	__tdiv_to_l_@quot+2,f,c
 10910  002660  362F               	rlcf	__tdiv_to_l_@quot+3,f,c
 10911  002662  0631               	decf	__tdiv_to_l_@exp1,f,c
 10912  002664                     l6265:
 10913  002664  5031               	movf	__tdiv_to_l_@exp1,w,c
 10914  002666  A4D8               	btfss	status,2,c
 10915  002668  D7F7               	goto	l6263
 10916  00266A                     l1180:
 10917  00266A  C02C  F023         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 10918  00266E  C02D  F024         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 10919  002672  C02E  F025         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 10920  002676  C02F  F026         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 10921  00267A  0012               	return		;funcret
 10922  00267C                     __end_of__tdiv_to_l_:
 10923                           	opt stack 0
 10924                           tblptru	equ	0xFF8
 10925                           tblptrh	equ	0xFF7
 10926                           tblptrl	equ	0xFF6
 10927                           tablat	equ	0xFF5
 10928                           prodh	equ	0xFF4
 10929                           prodl	equ	0xFF3
 10930                           intcon	equ	0xFF2
 10931                           postinc0	equ	0xFEE
 10932                           wreg	equ	0xFE8
 10933                           postdec1	equ	0xFE5
 10934                           fsr1l	equ	0xFE1
 10935                           indf2	equ	0xFDF
 10936                           postinc2	equ	0xFDE
 10937                           postdec2	equ	0xFDD
 10938                           fsr2h	equ	0xFDA
 10939                           fsr2l	equ	0xFD9
 10940                           status	equ	0xFD8
 10941                           
 10942 ;; *************** function __div_to_l_ *****************
 10943 ;; Defined at:
 10944 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
 10945 ;; Parameters:    Size  Location     Type
 10946 ;;  f1              3   34[COMRAM] unsigned long 
 10947 ;;  f2              3   37[COMRAM] unsigned long 
 10948 ;; Auto vars:     Size  Location     Type
 10949 ;;  quot            4   40[COMRAM] unsigned long 
 10950 ;;  exp1            1   45[COMRAM] unsigned char 
 10951 ;;  cntr            1   44[COMRAM] unsigned char 
 10952 ;; Return value:  Size  Location     Type
 10953 ;;                  4   34[COMRAM] unsigned long 
 10954 ;; Registers used:
 10955 ;;		wreg, status,2, status,0
 10956 ;; Tracked objects:
 10957 ;;		On entry : 0/0
 10958 ;;		On exit  : 0/0
 10959 ;;		Unchanged: 0/0
 10960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10961 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10962 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10964 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10965 ;;Total ram usage:       12 bytes
 10966 ;; Hardware stack levels used:    1
 10967 ;; Hardware stack levels required when called:    3
 10968 ;; This function calls:
 10969 ;;		Nothing
 10970 ;; This function is called by:
 10971 ;;		_printf
 10972 ;; This function uses a non-reentrant model
 10973 ;;
 10974                           
 10975                           	psect	text38
 10976  00267C                     __ptext38:
 10977                           	opt stack 0
 10978  00267C                     __div_to_l_:
 10979                           	opt stack 25
 10980                           
 10981                           ;incstack = 0
 10982  00267C  3425               	rlcf	__div_to_l_@f1+2,w,c
 10983  00267E  3426               	rlcf	__div_to_l_@f1+3,w,c
 10984  002680  6E2E               	movwf	__div_to_l_@exp1,c
 10985  002682  502E               	movf	__div_to_l_@exp1,w,c
 10986  002684  A4D8               	btfss	status,2,c
 10987  002686  D009               	goto	l6273
 10988  002688  0E00               	movlw	0
 10989  00268A  6E23               	movwf	?__div_to_l_,c
 10990  00268C  0E00               	movlw	0
 10991  00268E  6E24               	movwf	?__div_to_l_+1,c
 10992  002690  0E00               	movlw	0
 10993  002692  6E25               	movwf	?__div_to_l_+2,c
 10994  002694  0E00               	movlw	0
 10995  002696  6E26               	movwf	?__div_to_l_+3,c
 10996  002698  0012               	return	
 10997  00269A                     l6273:
 10998  00269A  3428               	rlcf	__div_to_l_@f2+2,w,c
 10999  00269C  3429               	rlcf	__div_to_l_@f2+3,w,c
 11000  00269E  6E2D               	movwf	__div_to_l_@cntr,c
 11001  0026A0  502D               	movf	__div_to_l_@cntr,w,c
 11002  0026A2  A4D8               	btfss	status,2,c
 11003  0026A4  D009               	goto	l6279
 11004  0026A6  0E00               	movlw	0
 11005  0026A8  6E23               	movwf	?__div_to_l_,c
 11006  0026AA  0E00               	movlw	0
 11007  0026AC  6E24               	movwf	?__div_to_l_+1,c
 11008  0026AE  0E00               	movlw	0
 11009  0026B0  6E25               	movwf	?__div_to_l_+2,c
 11010  0026B2  0E00               	movlw	0
 11011  0026B4  6E26               	movwf	?__div_to_l_+3,c
 11012  0026B6  0012               	return	
 11013  0026B8                     l6279:
 11014  0026B8  8E25               	bsf	__div_to_l_@f1+2,7,c
 11015  0026BA  0EFF               	movlw	255
 11016  0026BC  1623               	andwf	__div_to_l_@f1,f,c
 11017  0026BE  0EFF               	movlw	255
 11018  0026C0  1624               	andwf	__div_to_l_@f1+1,f,c
 11019  0026C2  0EFF               	movlw	255
 11020  0026C4  1625               	andwf	__div_to_l_@f1+2,f,c
 11021  0026C6  0E00               	movlw	0
 11022  0026C8  1626               	andwf	__div_to_l_@f1+3,f,c
 11023  0026CA  8E28               	bsf	__div_to_l_@f2+2,7,c
 11024  0026CC  0EFF               	movlw	255
 11025  0026CE  1626               	andwf	__div_to_l_@f2,f,c
 11026  0026D0  0EFF               	movlw	255
 11027  0026D2  1627               	andwf	__div_to_l_@f2+1,f,c
 11028  0026D4  0EFF               	movlw	255
 11029  0026D6  1628               	andwf	__div_to_l_@f2+2,f,c
 11030  0026D8  0E00               	movlw	0
 11031  0026DA  1629               	andwf	__div_to_l_@f2+3,f,c
 11032  0026DC  0E00               	movlw	0
 11033  0026DE  6E29               	movwf	__div_to_l_@quot,c
 11034  0026E0  0E00               	movlw	0
 11035  0026E2  6E2A               	movwf	__div_to_l_@quot+1,c
 11036  0026E4  0E00               	movlw	0
 11037  0026E6  6E2B               	movwf	__div_to_l_@quot+2,c
 11038  0026E8  0E00               	movlw	0
 11039  0026EA  6E2C               	movwf	__div_to_l_@quot+3,c
 11040  0026EC  0E7F               	movlw	127
 11041  0026EE  5E2E               	subwf	__div_to_l_@exp1,f,c
 11042  0026F0  502D               	movf	__div_to_l_@cntr,w,c
 11043  0026F2  0FA0               	addlw	160
 11044  0026F4  5E2E               	subwf	__div_to_l_@exp1,f,c
 11045  0026F6  0E20               	movlw	32
 11046  0026F8  6E2D               	movwf	__div_to_l_@cntr,c
 11047  0026FA                     l6293:
 11048  0026FA  90D8               	bcf	status,0,c
 11049  0026FC  3629               	rlcf	__div_to_l_@quot,f,c
 11050  0026FE  362A               	rlcf	__div_to_l_@quot+1,f,c
 11051  002700  362B               	rlcf	__div_to_l_@quot+2,f,c
 11052  002702  362C               	rlcf	__div_to_l_@quot+3,f,c
 11053  002704  5026               	movf	__div_to_l_@f2,w,c
 11054  002706  5C23               	subwf	__div_to_l_@f1,w,c
 11055  002708  5027               	movf	__div_to_l_@f2+1,w,c
 11056  00270A  5824               	subwfb	__div_to_l_@f1+1,w,c
 11057  00270C  5028               	movf	__div_to_l_@f2+2,w,c
 11058  00270E  5825               	subwfb	__div_to_l_@f1+2,w,c
 11059  002710  5029               	movf	__div_to_l_@f2+3,w,c
 11060  002712  5826               	subwfb	__div_to_l_@f1+3,w,c
 11061  002714  A0D8               	btfss	status,0,c
 11062  002716  D009               	goto	l6301
 11063  002718  5026               	movf	__div_to_l_@f2,w,c
 11064  00271A  5E23               	subwf	__div_to_l_@f1,f,c
 11065  00271C  5027               	movf	__div_to_l_@f2+1,w,c
 11066  00271E  5A24               	subwfb	__div_to_l_@f1+1,f,c
 11067  002720  5028               	movf	__div_to_l_@f2+2,w,c
 11068  002722  5A25               	subwfb	__div_to_l_@f1+2,f,c
 11069  002724  5029               	movf	__div_to_l_@f2+3,w,c
 11070  002726  5A26               	subwfb	__div_to_l_@f1+3,f,c
 11071  002728  8029               	bsf	__div_to_l_@quot,0,c
 11072  00272A                     l6301:
 11073  00272A  90D8               	bcf	status,0,c
 11074  00272C  3623               	rlcf	__div_to_l_@f1,f,c
 11075  00272E  3624               	rlcf	__div_to_l_@f1+1,f,c
 11076  002730  3625               	rlcf	__div_to_l_@f1+2,f,c
 11077  002732  3626               	rlcf	__div_to_l_@f1+3,f,c
 11078  002734  2E2D               	decfsz	__div_to_l_@cntr,f,c
 11079  002736  D7E1               	goto	l6293
 11080  002738  AE2E               	btfss	__div_to_l_@exp1,7,c
 11081  00273A  D016               	goto	l6317
 11082  00273C  502E               	movf	__div_to_l_@exp1,w,c
 11083  00273E  0A80               	xorlw	128
 11084  002740  0F9F               	addlw	159
 11085  002742  B0D8               	btfsc	status,0,c
 11086  002744  D009               	goto	l6313
 11087  002746  0E00               	movlw	0
 11088  002748  6E23               	movwf	?__div_to_l_,c
 11089  00274A  0E00               	movlw	0
 11090  00274C  6E24               	movwf	?__div_to_l_+1,c
 11091  00274E  0E00               	movlw	0
 11092  002750  6E25               	movwf	?__div_to_l_+2,c
 11093  002752  0E00               	movlw	0
 11094  002754  6E26               	movwf	?__div_to_l_+3,c
 11095  002756  0012               	return	
 11096  002758                     l6313:
 11097  002758  90D8               	bcf	status,0,c
 11098  00275A  322C               	rrcf	__div_to_l_@quot+3,f,c
 11099  00275C  322B               	rrcf	__div_to_l_@quot+2,f,c
 11100  00275E  322A               	rrcf	__div_to_l_@quot+1,f,c
 11101  002760  3229               	rrcf	__div_to_l_@quot,f,c
 11102  002762  3E2E               	incfsz	__div_to_l_@exp1,f,c
 11103  002764  D7F9               	goto	l6313
 11104  002766  D015               	goto	l1076
 11105  002768                     l6317:
 11106  002768  0E1F               	movlw	31
 11107  00276A  642E               	cpfsgt	__div_to_l_@exp1,c
 11108  00276C  D00F               	goto	l6325
 11109  00276E  0E00               	movlw	0
 11110  002770  6E23               	movwf	?__div_to_l_,c
 11111  002772  0E00               	movlw	0
 11112  002774  6E24               	movwf	?__div_to_l_+1,c
 11113  002776  0E00               	movlw	0
 11114  002778  6E25               	movwf	?__div_to_l_+2,c
 11115  00277A  0E00               	movlw	0
 11116  00277C  6E26               	movwf	?__div_to_l_+3,c
 11117  00277E  0012               	return	
 11118  002780                     l6323:
 11119  002780  90D8               	bcf	status,0,c
 11120  002782  3629               	rlcf	__div_to_l_@quot,f,c
 11121  002784  362A               	rlcf	__div_to_l_@quot+1,f,c
 11122  002786  362B               	rlcf	__div_to_l_@quot+2,f,c
 11123  002788  362C               	rlcf	__div_to_l_@quot+3,f,c
 11124  00278A  062E               	decf	__div_to_l_@exp1,f,c
 11125  00278C                     l6325:
 11126  00278C  502E               	movf	__div_to_l_@exp1,w,c
 11127  00278E  A4D8               	btfss	status,2,c
 11128  002790  D7F7               	goto	l6323
 11129  002792                     l1076:
 11130  002792  C029  F023         	movff	__div_to_l_@quot,?__div_to_l_
 11131  002796  C02A  F024         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 11132  00279A  C02B  F025         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 11133  00279E  C02C  F026         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 11134  0027A2  0012               	return		;funcret
 11135  0027A4                     __end_of__div_to_l_:
 11136                           	opt stack 0
 11137                           tblptru	equ	0xFF8
 11138                           tblptrh	equ	0xFF7
 11139                           tblptrl	equ	0xFF6
 11140                           tablat	equ	0xFF5
 11141                           prodh	equ	0xFF4
 11142                           prodl	equ	0xFF3
 11143                           intcon	equ	0xFF2
 11144                           postinc0	equ	0xFEE
 11145                           wreg	equ	0xFE8
 11146                           postdec1	equ	0xFE5
 11147                           fsr1l	equ	0xFE1
 11148                           indf2	equ	0xFDF
 11149                           postinc2	equ	0xFDE
 11150                           postdec2	equ	0xFDD
 11151                           fsr2h	equ	0xFDA
 11152                           fsr2l	equ	0xFD9
 11153                           status	equ	0xFD8
 11154                           
 11155 ;; *************** function ___lltoft *****************
 11156 ;; Defined at:
 11157 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 11158 ;; Parameters:    Size  Location     Type
 11159 ;;  c               4   42[COMRAM] unsigned long 
 11160 ;; Auto vars:     Size  Location     Type
 11161 ;;  exp             1   50[COMRAM] unsigned char 
 11162 ;; Return value:  Size  Location     Type
 11163 ;;                  3   42[COMRAM] float 
 11164 ;; Registers used:
 11165 ;;		wreg, status,2, status,0, cstack
 11166 ;; Tracked objects:
 11167 ;;		On entry : 0/0
 11168 ;;		On exit  : 0/0
 11169 ;;		Unchanged: 0/0
 11170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11171 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11172 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11173 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11174 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11175 ;;Total ram usage:        9 bytes
 11176 ;; Hardware stack levels used:    1
 11177 ;; Hardware stack levels required when called:    4
 11178 ;; This function calls:
 11179 ;;		___ftpack
 11180 ;; This function is called by:
 11181 ;;		_printf
 11182 ;; This function uses a non-reentrant model
 11183 ;;
 11184                           
 11185                           	psect	text39
 11186  003846                     __ptext39:
 11187                           	opt stack 0
 11188  003846                     ___lltoft:
 11189                           	opt stack 24
 11190                           
 11191                           ;incstack = 0
 11192  003846  0E8E               	movlw	142
 11193  003848  6E33               	movwf	___lltoft@exp,c
 11194  00384A  D006               	goto	l6519
 11195  00384C                     l6517:
 11196  00384C  90D8               	bcf	status,0,c
 11197  00384E  322E               	rrcf	___lltoft@c+3,f,c
 11198  003850  322D               	rrcf	___lltoft@c+2,f,c
 11199  003852  322C               	rrcf	___lltoft@c+1,f,c
 11200  003854  322B               	rrcf	___lltoft@c,f,c
 11201  003856  2A33               	incf	___lltoft@exp,f,c
 11202  003858                     l6519:
 11203  003858  0E00               	movlw	0
 11204  00385A  142B               	andwf	___lltoft@c,w,c
 11205  00385C  6E2F               	movwf	??___lltoft& (0+255),c
 11206  00385E  0E00               	movlw	0
 11207  003860  142C               	andwf	___lltoft@c+1,w,c
 11208  003862  6E30               	movwf	(??___lltoft+1)& (0+255),c
 11209  003864  0E00               	movlw	0
 11210  003866  142D               	andwf	___lltoft@c+2,w,c
 11211  003868  6E31               	movwf	(??___lltoft+2)& (0+255),c
 11212  00386A  0EFF               	movlw	255
 11213  00386C  142E               	andwf	___lltoft@c+3,w,c
 11214  00386E  6E32               	movwf	(??___lltoft+3)& (0+255),c
 11215  003870  502F               	movf	??___lltoft,w,c
 11216  003872  1030               	iorwf	??___lltoft+1,w,c
 11217  003874  1031               	iorwf	??___lltoft+2,w,c
 11218  003876  1032               	iorwf	??___lltoft+3,w,c
 11219  003878  A4D8               	btfss	status,2,c
 11220  00387A  D7E8               	goto	l6517
 11221  00387C  C02B  F023         	movff	___lltoft@c,___ftpack@arg
 11222  003880  C02C  F024         	movff	___lltoft@c+1,___ftpack@arg+1
 11223  003884  C02D  F025         	movff	___lltoft@c+2,___ftpack@arg+2
 11224  003888  C033  F026         	movff	___lltoft@exp,___ftpack@exp
 11225  00388C  0E00               	movlw	0
 11226  00388E  6E27               	movwf	___ftpack@sign,c
 11227  003890  EC44  F018         	call	___ftpack	;wreg free
 11228  003894  C023  F02B         	movff	?___ftpack,?___lltoft
 11229  003898  C024  F02C         	movff	?___ftpack+1,?___lltoft+1
 11230  00389C  C025  F02D         	movff	?___ftpack+2,?___lltoft+2
 11231  0038A0  0012               	return	
 11232  0038A2                     __end_of___lltoft:
 11233                           	opt stack 0
 11234                           tblptru	equ	0xFF8
 11235                           tblptrh	equ	0xFF7
 11236                           tblptrl	equ	0xFF6
 11237                           tablat	equ	0xFF5
 11238                           prodh	equ	0xFF4
 11239                           prodl	equ	0xFF3
 11240                           intcon	equ	0xFF2
 11241                           postinc0	equ	0xFEE
 11242                           wreg	equ	0xFE8
 11243                           postdec1	equ	0xFE5
 11244                           fsr1l	equ	0xFE1
 11245                           indf2	equ	0xFDF
 11246                           postinc2	equ	0xFDE
 11247                           postdec2	equ	0xFDD
 11248                           fsr2h	equ	0xFDA
 11249                           fsr2l	equ	0xFD9
 11250                           status	equ	0xFD8
 11251                           
 11252 ;; *************** function ___llmod *****************
 11253 ;; Defined at:
 11254 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
 11255 ;; Parameters:    Size  Location     Type
 11256 ;;  dividend        4   47[COMRAM] unsigned long 
 11257 ;;  divisor         4   51[COMRAM] unsigned long 
 11258 ;; Auto vars:     Size  Location     Type
 11259 ;;  counter         1   55[COMRAM] unsigned char 
 11260 ;; Return value:  Size  Location     Type
 11261 ;;                  4   47[COMRAM] unsigned long 
 11262 ;; Registers used:
 11263 ;;		wreg, status,2, status,0
 11264 ;; Tracked objects:
 11265 ;;		On entry : 0/0
 11266 ;;		On exit  : 0/0
 11267 ;;		Unchanged: 0/0
 11268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11269 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11270 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11272 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11273 ;;Total ram usage:        9 bytes
 11274 ;; Hardware stack levels used:    1
 11275 ;; Hardware stack levels required when called:    3
 11276 ;; This function calls:
 11277 ;;		Nothing
 11278 ;; This function is called by:
 11279 ;;		_printf
 11280 ;; This function uses a non-reentrant model
 11281 ;;
 11282                           
 11283                           	psect	text40
 11284  003658                     __ptext40:
 11285                           	opt stack 0
 11286  003658                     ___llmod:
 11287                           	opt stack 25
 11288                           
 11289                           ;incstack = 0
 11290  003658  5034               	movf	___llmod@divisor,w,c
 11291  00365A  1035               	iorwf	___llmod@divisor+1,w,c
 11292  00365C  1036               	iorwf	___llmod@divisor+2,w,c
 11293  00365E  1037               	iorwf	___llmod@divisor+3,w,c
 11294  003660  B4D8               	btfsc	status,2,c
 11295  003662  D024               	goto	l1265
 11296  003664  0E01               	movlw	1
 11297  003666  6E38               	movwf	___llmod@counter,c
 11298  003668  D006               	goto	l6505
 11299  00366A                     l6503:
 11300  00366A  90D8               	bcf	status,0,c
 11301  00366C  3634               	rlcf	___llmod@divisor,f,c
 11302  00366E  3635               	rlcf	___llmod@divisor+1,f,c
 11303  003670  3636               	rlcf	___llmod@divisor+2,f,c
 11304  003672  3637               	rlcf	___llmod@divisor+3,f,c
 11305  003674  2A38               	incf	___llmod@counter,f,c
 11306  003676                     l6505:
 11307  003676  AE37               	btfss	___llmod@divisor+3,7,c
 11308  003678  D7F8               	goto	l6503
 11309  00367A                     l6507:
 11310  00367A  5034               	movf	___llmod@divisor,w,c
 11311  00367C  5C30               	subwf	___llmod@dividend,w,c
 11312  00367E  5035               	movf	___llmod@divisor+1,w,c
 11313  003680  5831               	subwfb	___llmod@dividend+1,w,c
 11314  003682  5036               	movf	___llmod@divisor+2,w,c
 11315  003684  5832               	subwfb	___llmod@dividend+2,w,c
 11316  003686  5037               	movf	___llmod@divisor+3,w,c
 11317  003688  5833               	subwfb	___llmod@dividend+3,w,c
 11318  00368A  A0D8               	btfss	status,0,c
 11319  00368C  D008               	goto	l6511
 11320  00368E  5034               	movf	___llmod@divisor,w,c
 11321  003690  5E30               	subwf	___llmod@dividend,f,c
 11322  003692  5035               	movf	___llmod@divisor+1,w,c
 11323  003694  5A31               	subwfb	___llmod@dividend+1,f,c
 11324  003696  5036               	movf	___llmod@divisor+2,w,c
 11325  003698  5A32               	subwfb	___llmod@dividend+2,f,c
 11326  00369A  5037               	movf	___llmod@divisor+3,w,c
 11327  00369C  5A33               	subwfb	___llmod@dividend+3,f,c
 11328  00369E                     l6511:
 11329  00369E  90D8               	bcf	status,0,c
 11330  0036A0  3237               	rrcf	___llmod@divisor+3,f,c
 11331  0036A2  3236               	rrcf	___llmod@divisor+2,f,c
 11332  0036A4  3235               	rrcf	___llmod@divisor+1,f,c
 11333  0036A6  3234               	rrcf	___llmod@divisor,f,c
 11334  0036A8  2E38               	decfsz	___llmod@counter,f,c
 11335  0036AA  D7E7               	goto	l6507
 11336  0036AC                     l1265:
 11337  0036AC  C030  F030         	movff	___llmod@dividend,?___llmod
 11338  0036B0  C031  F031         	movff	___llmod@dividend+1,?___llmod+1
 11339  0036B4  C032  F032         	movff	___llmod@dividend+2,?___llmod+2
 11340  0036B8  C033  F033         	movff	___llmod@dividend+3,?___llmod+3
 11341  0036BC  0012               	return		;funcret
 11342  0036BE                     __end_of___llmod:
 11343                           	opt stack 0
 11344                           tblptru	equ	0xFF8
 11345                           tblptrh	equ	0xFF7
 11346                           tblptrl	equ	0xFF6
 11347                           tablat	equ	0xFF5
 11348                           prodh	equ	0xFF4
 11349                           prodl	equ	0xFF3
 11350                           intcon	equ	0xFF2
 11351                           postinc0	equ	0xFEE
 11352                           wreg	equ	0xFE8
 11353                           postdec1	equ	0xFE5
 11354                           fsr1l	equ	0xFE1
 11355                           indf2	equ	0xFDF
 11356                           postinc2	equ	0xFDE
 11357                           postdec2	equ	0xFDD
 11358                           fsr2h	equ	0xFDA
 11359                           fsr2l	equ	0xFD9
 11360                           status	equ	0xFD8
 11361                           
 11362 ;; *************** function ___lldiv *****************
 11363 ;; Defined at:
 11364 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 11365 ;; Parameters:    Size  Location     Type
 11366 ;;  dividend        4   34[COMRAM] unsigned long 
 11367 ;;  divisor         4   38[COMRAM] unsigned long 
 11368 ;; Auto vars:     Size  Location     Type
 11369 ;;  quotient        4   42[COMRAM] unsigned long 
 11370 ;;  counter         1   46[COMRAM] unsigned char 
 11371 ;; Return value:  Size  Location     Type
 11372 ;;                  4   34[COMRAM] unsigned long 
 11373 ;; Registers used:
 11374 ;;		wreg, status,2, status,0
 11375 ;; Tracked objects:
 11376 ;;		On entry : 0/0
 11377 ;;		On exit  : 0/0
 11378 ;;		Unchanged: 0/0
 11379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11380 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11381 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11383 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11384 ;;Total ram usage:       13 bytes
 11385 ;; Hardware stack levels used:    1
 11386 ;; Hardware stack levels required when called:    3
 11387 ;; This function calls:
 11388 ;;		Nothing
 11389 ;; This function is called by:
 11390 ;;		_printf
 11391 ;;		_I2C_Master_Init
 11392 ;; This function uses a non-reentrant model
 11393 ;;
 11394                           
 11395                           	psect	text41
 11396  003414                     __ptext41:
 11397                           	opt stack 0
 11398  003414                     ___lldiv:
 11399                           	opt stack 25
 11400                           
 11401                           ;incstack = 0
 11402  003414  0E00               	movlw	0
 11403  003416  6E2B               	movwf	___lldiv@quotient,c
 11404  003418  0E00               	movlw	0
 11405  00341A  6E2C               	movwf	___lldiv@quotient+1,c
 11406  00341C  0E00               	movlw	0
 11407  00341E  6E2D               	movwf	___lldiv@quotient+2,c
 11408  003420  0E00               	movlw	0
 11409  003422  6E2E               	movwf	___lldiv@quotient+3,c
 11410  003424  5027               	movf	___lldiv@divisor,w,c
 11411  003426  1028               	iorwf	___lldiv@divisor+1,w,c
 11412  003428  1029               	iorwf	___lldiv@divisor+2,w,c
 11413  00342A  102A               	iorwf	___lldiv@divisor+3,w,c
 11414  00342C  B4D8               	btfsc	status,2,c
 11415  00342E  D02A               	goto	l1255
 11416  003430  0E01               	movlw	1
 11417  003432  6E2F               	movwf	___lldiv@counter,c
 11418  003434  D006               	goto	l6485
 11419  003436                     l6483:
 11420  003436  90D8               	bcf	status,0,c
 11421  003438  3627               	rlcf	___lldiv@divisor,f,c
 11422  00343A  3628               	rlcf	___lldiv@divisor+1,f,c
 11423  00343C  3629               	rlcf	___lldiv@divisor+2,f,c
 11424  00343E  362A               	rlcf	___lldiv@divisor+3,f,c
 11425  003440  2A2F               	incf	___lldiv@counter,f,c
 11426  003442                     l6485:
 11427  003442  AE2A               	btfss	___lldiv@divisor+3,7,c
 11428  003444  D7F8               	goto	l6483
 11429  003446                     l6487:
 11430  003446  90D8               	bcf	status,0,c
 11431  003448  362B               	rlcf	___lldiv@quotient,f,c
 11432  00344A  362C               	rlcf	___lldiv@quotient+1,f,c
 11433  00344C  362D               	rlcf	___lldiv@quotient+2,f,c
 11434  00344E  362E               	rlcf	___lldiv@quotient+3,f,c
 11435  003450  5027               	movf	___lldiv@divisor,w,c
 11436  003452  5C23               	subwf	___lldiv@dividend,w,c
 11437  003454  5028               	movf	___lldiv@divisor+1,w,c
 11438  003456  5824               	subwfb	___lldiv@dividend+1,w,c
 11439  003458  5029               	movf	___lldiv@divisor+2,w,c
 11440  00345A  5825               	subwfb	___lldiv@dividend+2,w,c
 11441  00345C  502A               	movf	___lldiv@divisor+3,w,c
 11442  00345E  5826               	subwfb	___lldiv@dividend+3,w,c
 11443  003460  A0D8               	btfss	status,0,c
 11444  003462  D009               	goto	l6495
 11445  003464  5027               	movf	___lldiv@divisor,w,c
 11446  003466  5E23               	subwf	___lldiv@dividend,f,c
 11447  003468  5028               	movf	___lldiv@divisor+1,w,c
 11448  00346A  5A24               	subwfb	___lldiv@dividend+1,f,c
 11449  00346C  5029               	movf	___lldiv@divisor+2,w,c
 11450  00346E  5A25               	subwfb	___lldiv@dividend+2,f,c
 11451  003470  502A               	movf	___lldiv@divisor+3,w,c
 11452  003472  5A26               	subwfb	___lldiv@dividend+3,f,c
 11453  003474  802B               	bsf	___lldiv@quotient,0,c
 11454  003476                     l6495:
 11455  003476  90D8               	bcf	status,0,c
 11456  003478  322A               	rrcf	___lldiv@divisor+3,f,c
 11457  00347A  3229               	rrcf	___lldiv@divisor+2,f,c
 11458  00347C  3228               	rrcf	___lldiv@divisor+1,f,c
 11459  00347E  3227               	rrcf	___lldiv@divisor,f,c
 11460  003480  2E2F               	decfsz	___lldiv@counter,f,c
 11461  003482  D7E1               	goto	l6487
 11462  003484                     l1255:
 11463  003484  C02B  F023         	movff	___lldiv@quotient,?___lldiv
 11464  003488  C02C  F024         	movff	___lldiv@quotient+1,?___lldiv+1
 11465  00348C  C02D  F025         	movff	___lldiv@quotient+2,?___lldiv+2
 11466  003490  C02E  F026         	movff	___lldiv@quotient+3,?___lldiv+3
 11467  003494  0012               	return		;funcret
 11468  003496                     __end_of___lldiv:
 11469                           	opt stack 0
 11470                           tblptru	equ	0xFF8
 11471                           tblptrh	equ	0xFF7
 11472                           tblptrl	equ	0xFF6
 11473                           tablat	equ	0xFF5
 11474                           prodh	equ	0xFF4
 11475                           prodl	equ	0xFF3
 11476                           intcon	equ	0xFF2
 11477                           postinc0	equ	0xFEE
 11478                           wreg	equ	0xFE8
 11479                           postdec1	equ	0xFE5
 11480                           fsr1l	equ	0xFE1
 11481                           indf2	equ	0xFDF
 11482                           postinc2	equ	0xFDE
 11483                           postdec2	equ	0xFDD
 11484                           fsr2h	equ	0xFDA
 11485                           fsr2l	equ	0xFD9
 11486                           status	equ	0xFD8
 11487                           
 11488 ;; *************** function ___fttol *****************
 11489 ;; Defined at:
 11490 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 11491 ;; Parameters:    Size  Location     Type
 11492 ;;  f1              3   46[BANK0 ] float 
 11493 ;; Auto vars:     Size  Location     Type
 11494 ;;  lval            4   56[BANK0 ] unsigned long 
 11495 ;;  exp1            1   60[BANK0 ] unsigned char 
 11496 ;;  sign1           1   55[BANK0 ] unsigned char 
 11497 ;; Return value:  Size  Location     Type
 11498 ;;                  4   46[BANK0 ] long 
 11499 ;; Registers used:
 11500 ;;		wreg, status,2, status,0
 11501 ;; Tracked objects:
 11502 ;;		On entry : 0/0
 11503 ;;		On exit  : 0/0
 11504 ;;		Unchanged: 0/0
 11505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11506 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11507 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11508 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11509 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11510 ;;Total ram usage:       15 bytes
 11511 ;; Hardware stack levels used:    1
 11512 ;; Hardware stack levels required when called:    3
 11513 ;; This function calls:
 11514 ;;		Nothing
 11515 ;; This function is called by:
 11516 ;;		_sortBattery
 11517 ;;		_angleToPulse
 11518 ;;		_printf
 11519 ;; This function uses a non-reentrant model
 11520 ;;
 11521                           
 11522                           	psect	text42
 11523  002406                     __ptext42:
 11524                           	opt stack 0
 11525  002406                     ___fttol:
 11526                           	opt stack 24
 11527                           
 11528                           ;incstack = 0
 11529  002406  C0B0  F0B2         	movff	___fttol@f1+2,??___fttol
 11530  00240A  0100               	movlb	0	; () banked
 11531  00240C  6BB3               	clrf	(??___fttol+1)& (0+255),b
 11532  00240E  6BB4               	clrf	(??___fttol+2)& (0+255),b
 11533  002410  0100               	movlb	0	; () banked
 11534  002412  35AF               	rlcf	(___fttol@f1+1)& (0+255),w,b
 11535  002414  0100               	movlb	0	; () banked
 11536  002416  37B2               	rlcf	??___fttol& (0+255),f,b
 11537  002418  E301               	bnc	u6561
 11538  00241A  81B3               	bsf	(??___fttol+1)& (0+255),0,b
 11539  00241C                     u6561:
 11540  00241C  0100               	movlb	0	; () banked
 11541  00241E  51B2               	movf	??___fttol& (0+255),w,b
 11542  002420  0100               	movlb	0	; () banked
 11543  002422  6FBC               	movwf	___fttol@exp1& (0+255),b
 11544  002424  0100               	movlb	0	; () banked
 11545  002426  51BC               	movf	___fttol@exp1& (0+255),w,b
 11546  002428  A4D8               	btfss	status,2,c
 11547  00242A  D00A               	goto	l6437
 11548                           
 11549                           ; BSR set to: 0
 11550  00242C  0E00               	movlw	0
 11551  00242E  0100               	movlb	0	; () banked
 11552  002430  6FAE               	movwf	?___fttol& (0+255),b
 11553  002432  0E00               	movlw	0
 11554  002434  6FAF               	movwf	(?___fttol+1)& (0+255),b
 11555  002436  0E00               	movlw	0
 11556  002438  6FB0               	movwf	(?___fttol+2)& (0+255),b
 11557  00243A  0E00               	movlw	0
 11558  00243C  6FB1               	movwf	(?___fttol+3)& (0+255),b
 11559                           
 11560                           ; BSR set to: 0
 11561  00243E  0012               	return	
 11562  002440                     l6437:
 11563                           
 11564                           ; BSR set to: 0
 11565  002440  0E17               	movlw	23
 11566  002442  0100               	movlb	0	; () banked
 11567  002444  6FB2               	movwf	??___fttol& (0+255),b
 11568  002446  C0AE  F0B3         	movff	___fttol@f1,??___fttol+1
 11569  00244A  C0AF  F0B4         	movff	___fttol@f1+1,??___fttol+2
 11570  00244E  C0B0  F0B5         	movff	___fttol@f1+2,??___fttol+3
 11571  002452  0100               	movlb	0	; () banked
 11572  002454  29B2               	incf	??___fttol& (0+255),w,b
 11573  002456  0100               	movlb	0	; () banked
 11574  002458  6FB6               	movwf	(??___fttol+4)& (0+255),b
 11575  00245A  D005               	goto	u6580
 11576  00245C                     u6585:
 11577  00245C  0100               	movlb	0	; () banked
 11578  00245E  90D8               	bcf	status,0,c
 11579  002460  33B5               	rrcf	(??___fttol+3)& (0+255),f,b
 11580  002462  33B4               	rrcf	(??___fttol+2)& (0+255),f,b
 11581  002464  33B3               	rrcf	(??___fttol+1)& (0+255),f,b
 11582  002466                     u6580:
 11583  002466  0100               	movlb	0	; () banked
 11584  002468  2FB6               	decfsz	(??___fttol+4)& (0+255),f,b
 11585  00246A  D7F8               	goto	u6585
 11586  00246C  0100               	movlb	0	; () banked
 11587  00246E  51B3               	movf	(??___fttol+1)& (0+255),w,b
 11588  002470  0100               	movlb	0	; () banked
 11589  002472  6FB7               	movwf	___fttol@sign1& (0+255),b
 11590                           
 11591                           ; BSR set to: 0
 11592  002474  0100               	movlb	0	; () banked
 11593  002476  8FAF               	bsf	(___fttol@f1+1)& (0+255),7,b
 11594                           
 11595                           ; BSR set to: 0
 11596  002478  0EFF               	movlw	255
 11597  00247A  0100               	movlb	0	; () banked
 11598  00247C  17AE               	andwf	___fttol@f1& (0+255),f,b
 11599  00247E  0EFF               	movlw	255
 11600  002480  0100               	movlb	0	; () banked
 11601  002482  17AF               	andwf	(___fttol@f1+1)& (0+255),f,b
 11602  002484  0E00               	movlw	0
 11603  002486  0100               	movlb	0	; () banked
 11604  002488  17B0               	andwf	(___fttol@f1+2)& (0+255),f,b
 11605                           
 11606                           ; BSR set to: 0
 11607  00248A  0100               	movlb	0	; () banked
 11608  00248C  51AE               	movf	___fttol@f1& (0+255),w,b
 11609  00248E  0100               	movlb	0	; () banked
 11610  002490  6FB8               	movwf	___fttol@lval& (0+255),b
 11611  002492  0100               	movlb	0	; () banked
 11612  002494  51AF               	movf	(___fttol@f1+1)& (0+255),w,b
 11613  002496  0100               	movlb	0	; () banked
 11614  002498  6FB9               	movwf	(___fttol@lval+1)& (0+255),b
 11615  00249A  0100               	movlb	0	; () banked
 11616  00249C  51B0               	movf	(___fttol@f1+2)& (0+255),w,b
 11617  00249E  0100               	movlb	0	; () banked
 11618  0024A0  6FBA               	movwf	(___fttol@lval+2)& (0+255),b
 11619  0024A2  0100               	movlb	0	; () banked
 11620  0024A4  6BBB               	clrf	(___fttol@lval+3)& (0+255),b
 11621                           
 11622                           ; BSR set to: 0
 11623  0024A6  0E8E               	movlw	142
 11624  0024A8  0100               	movlb	0	; () banked
 11625  0024AA  5FBC               	subwf	___fttol@exp1& (0+255),f,b
 11626                           
 11627                           ; BSR set to: 0
 11628  0024AC  0100               	movlb	0	; () banked
 11629  0024AE  AFBC               	btfss	___fttol@exp1& (0+255),7,b
 11630  0024B0  D01A               	goto	l6459
 11631                           
 11632                           ; BSR set to: 0
 11633  0024B2  0100               	movlb	0	; () banked
 11634  0024B4  51BC               	movf	___fttol@exp1& (0+255),w,b
 11635  0024B6  0A80               	xorlw	128
 11636  0024B8  0F8F               	addlw	143
 11637  0024BA  B0D8               	btfsc	status,0,c
 11638  0024BC  D00A               	goto	l6455
 11639                           
 11640                           ; BSR set to: 0
 11641  0024BE  0E00               	movlw	0
 11642  0024C0  0100               	movlb	0	; () banked
 11643  0024C2  6FAE               	movwf	?___fttol& (0+255),b
 11644  0024C4  0E00               	movlw	0
 11645  0024C6  6FAF               	movwf	(?___fttol+1)& (0+255),b
 11646  0024C8  0E00               	movlw	0
 11647  0024CA  6FB0               	movwf	(?___fttol+2)& (0+255),b
 11648  0024CC  0E00               	movlw	0
 11649  0024CE  6FB1               	movwf	(?___fttol+3)& (0+255),b
 11650                           
 11651                           ; BSR set to: 0
 11652  0024D0  0012               	return	
 11653  0024D2                     l6455:
 11654                           
 11655                           ; BSR set to: 0
 11656  0024D2  0100               	movlb	0	; () banked
 11657  0024D4  90D8               	bcf	status,0,c
 11658  0024D6  33BB               	rrcf	(___fttol@lval+3)& (0+255),f,b
 11659  0024D8  33BA               	rrcf	(___fttol@lval+2)& (0+255),f,b
 11660  0024DA  33B9               	rrcf	(___fttol@lval+1)& (0+255),f,b
 11661  0024DC  33B8               	rrcf	___fttol@lval& (0+255),f,b
 11662                           
 11663                           ; BSR set to: 0
 11664  0024DE  0100               	movlb	0	; () banked
 11665  0024E0  3FBC               	incfsz	___fttol@exp1& (0+255),f,b
 11666  0024E2  D7F7               	goto	l6455
 11667                           
 11668                           ; BSR set to: 0
 11669  0024E4  D01B               	goto	l6469
 11670  0024E6                     l6459:
 11671                           
 11672                           ; BSR set to: 0
 11673  0024E6  0E17               	movlw	23
 11674  0024E8  0100               	movlb	0	; () banked
 11675  0024EA  65BC               	cpfsgt	___fttol@exp1& (0+255),b
 11676  0024EC  D012               	goto	l6467
 11677                           
 11678                           ; BSR set to: 0
 11679  0024EE  0E00               	movlw	0
 11680  0024F0  0100               	movlb	0	; () banked
 11681  0024F2  6FAE               	movwf	?___fttol& (0+255),b
 11682  0024F4  0E00               	movlw	0
 11683  0024F6  6FAF               	movwf	(?___fttol+1)& (0+255),b
 11684  0024F8  0E00               	movlw	0
 11685  0024FA  6FB0               	movwf	(?___fttol+2)& (0+255),b
 11686  0024FC  0E00               	movlw	0
 11687  0024FE  6FB1               	movwf	(?___fttol+3)& (0+255),b
 11688                           
 11689                           ; BSR set to: 0
 11690  002500  0012               	return	
 11691  002502                     l6465:
 11692                           
 11693                           ; BSR set to: 0
 11694  002502  0100               	movlb	0	; () banked
 11695  002504  90D8               	bcf	status,0,c
 11696  002506  37B8               	rlcf	___fttol@lval& (0+255),f,b
 11697  002508  37B9               	rlcf	(___fttol@lval+1)& (0+255),f,b
 11698  00250A  37BA               	rlcf	(___fttol@lval+2)& (0+255),f,b
 11699  00250C  37BB               	rlcf	(___fttol@lval+3)& (0+255),f,b
 11700  00250E  0100               	movlb	0	; () banked
 11701  002510  07BC               	decf	___fttol@exp1& (0+255),f,b
 11702  002512                     l6467:
 11703                           
 11704                           ; BSR set to: 0
 11705  002512  0100               	movlb	0	; () banked
 11706  002514  51BC               	movf	___fttol@exp1& (0+255),w,b
 11707  002516  0100               	movlb	0	; () banked
 11708  002518  A4D8               	btfss	status,2,c
 11709  00251A  D7F3               	goto	l6465
 11710  00251C                     l6469:
 11711                           
 11712                           ; BSR set to: 0
 11713  00251C  0100               	movlb	0	; () banked
 11714  00251E  51B7               	movf	___fttol@sign1& (0+255),w,b
 11715  002520  0100               	movlb	0	; () banked
 11716  002522  B4D8               	btfsc	status,2,c
 11717  002524  D009               	goto	l6473
 11718                           
 11719                           ; BSR set to: 0
 11720  002526  0100               	movlb	0	; () banked
 11721  002528  1FBB               	comf	(___fttol@lval+3)& (0+255),f,b
 11722  00252A  1FBA               	comf	(___fttol@lval+2)& (0+255),f,b
 11723  00252C  1FB9               	comf	(___fttol@lval+1)& (0+255),f,b
 11724  00252E  6DB8               	negf	___fttol@lval& (0+255),b
 11725  002530  0E00               	movlw	0
 11726  002532  23B9               	addwfc	(___fttol@lval+1)& (0+255),f,b
 11727  002534  23BA               	addwfc	(___fttol@lval+2)& (0+255),f,b
 11728  002536  23BB               	addwfc	(___fttol@lval+3)& (0+255),f,b
 11729  002538                     l6473:
 11730                           
 11731                           ; BSR set to: 0
 11732  002538  C0B8  F0AE         	movff	___fttol@lval,?___fttol
 11733  00253C  C0B9  F0AF         	movff	___fttol@lval+1,?___fttol+1
 11734  002540  C0BA  F0B0         	movff	___fttol@lval+2,?___fttol+2
 11735  002544  C0BB  F0B1         	movff	___fttol@lval+3,?___fttol+3
 11736  002548  0012               	return	
 11737  00254A                     __end_of___fttol:
 11738                           	opt stack 0
 11739                           tblptru	equ	0xFF8
 11740                           tblptrh	equ	0xFF7
 11741                           tblptrl	equ	0xFF6
 11742                           tablat	equ	0xFF5
 11743                           prodh	equ	0xFF4
 11744                           prodl	equ	0xFF3
 11745                           intcon	equ	0xFF2
 11746                           postinc0	equ	0xFEE
 11747                           wreg	equ	0xFE8
 11748                           postdec1	equ	0xFE5
 11749                           fsr1l	equ	0xFE1
 11750                           indf2	equ	0xFDF
 11751                           postinc2	equ	0xFDE
 11752                           postdec2	equ	0xFDD
 11753                           fsr2h	equ	0xFDA
 11754                           fsr2l	equ	0xFD9
 11755                           status	equ	0xFD8
 11756                           
 11757 ;; *************** function ___ftsub *****************
 11758 ;; Defined at:
 11759 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 11760 ;; Parameters:    Size  Location     Type
 11761 ;;  f1              3   46[BANK0 ] float 
 11762 ;;  f2              3   49[BANK0 ] float 
 11763 ;; Auto vars:     Size  Location     Type
 11764 ;;		None
 11765 ;; Return value:  Size  Location     Type
 11766 ;;                  3   46[BANK0 ] float 
 11767 ;; Registers used:
 11768 ;;		wreg, status,2, status,0, cstack
 11769 ;; Tracked objects:
 11770 ;;		On entry : 0/0
 11771 ;;		On exit  : 0/0
 11772 ;;		Unchanged: 0/0
 11773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11774 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11777 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11778 ;;Total ram usage:        6 bytes
 11779 ;; Hardware stack levels used:    1
 11780 ;; Hardware stack levels required when called:    5
 11781 ;; This function calls:
 11782 ;;		___ftadd
 11783 ;; This function is called by:
 11784 ;;		_sortBattery
 11785 ;;		_printf
 11786 ;; This function uses a non-reentrant model
 11787 ;;
 11788                           
 11789                           	psect	text43
 11790  003994                     __ptext43:
 11791                           	opt stack 0
 11792  003994                     ___ftsub:
 11793                           	opt stack 23
 11794                           
 11795                           ; BSR set to: 0
 11796                           ;incstack = 0
 11797  003994  0100               	movlb	0	; () banked
 11798  003996  51B1               	movf	___ftsub@f2& (0+255),w,b
 11799  003998  0100               	movlb	0	; () banked
 11800  00399A  11B2               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 11801  00399C  0100               	movlb	0	; () banked
 11802  00399E  11B3               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 11803  0039A0  B4D8               	btfsc	status,2,c
 11804  0039A2  D009               	goto	l6393
 11805                           
 11806                           ; BSR set to: 0
 11807  0039A4  0E00               	movlw	0
 11808  0039A6  0100               	movlb	0	; () banked
 11809  0039A8  1BB1               	xorwf	___ftsub@f2& (0+255),f,b
 11810  0039AA  0E00               	movlw	0
 11811  0039AC  0100               	movlb	0	; () banked
 11812  0039AE  1BB2               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 11813  0039B0  0E80               	movlw	128
 11814  0039B2  0100               	movlb	0	; () banked
 11815  0039B4  1BB3               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 11816  0039B6                     l6393:
 11817                           
 11818                           ; BSR set to: 0
 11819  0039B6  C0AE  F0A2         	movff	___ftsub@f1,___ftadd@f1
 11820  0039BA  C0AF  F0A3         	movff	___ftsub@f1+1,___ftadd@f1+1
 11821  0039BE  C0B0  F0A4         	movff	___ftsub@f1+2,___ftadd@f1+2
 11822  0039C2  C0B1  F0A5         	movff	___ftsub@f2,___ftadd@f2
 11823  0039C6  C0B2  F0A6         	movff	___ftsub@f2+1,___ftadd@f2+1
 11824  0039CA  C0B3  F0A7         	movff	___ftsub@f2+2,___ftadd@f2+2
 11825  0039CE  EC6E  F00D         	call	___ftadd	;wreg free
 11826  0039D2  C0A2  F0AE         	movff	?___ftadd,?___ftsub
 11827  0039D6  C0A3  F0AF         	movff	?___ftadd+1,?___ftsub+1
 11828  0039DA  C0A4  F0B0         	movff	?___ftadd+2,?___ftsub+2
 11829  0039DE  0012               	return	
 11830  0039E0                     __end_of___ftsub:
 11831                           	opt stack 0
 11832                           tblptru	equ	0xFF8
 11833                           tblptrh	equ	0xFF7
 11834                           tblptrl	equ	0xFF6
 11835                           tablat	equ	0xFF5
 11836                           prodh	equ	0xFF4
 11837                           prodl	equ	0xFF3
 11838                           intcon	equ	0xFF2
 11839                           postinc0	equ	0xFEE
 11840                           wreg	equ	0xFE8
 11841                           postdec1	equ	0xFE5
 11842                           fsr1l	equ	0xFE1
 11843                           indf2	equ	0xFDF
 11844                           postinc2	equ	0xFDE
 11845                           postdec2	equ	0xFDD
 11846                           fsr2h	equ	0xFDA
 11847                           fsr2l	equ	0xFD9
 11848                           status	equ	0xFD8
 11849                           
 11850 ;; *************** function ___ftadd *****************
 11851 ;; Defined at:
 11852 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 11853 ;; Parameters:    Size  Location     Type
 11854 ;;  f1              3   34[BANK0 ] float 
 11855 ;;  f2              3   37[BANK0 ] float 
 11856 ;; Auto vars:     Size  Location     Type
 11857 ;;  exp1            1   45[BANK0 ] unsigned char 
 11858 ;;  exp2            1   44[BANK0 ] unsigned char 
 11859 ;;  sign            1   43[BANK0 ] unsigned char 
 11860 ;; Return value:  Size  Location     Type
 11861 ;;                  3   34[BANK0 ] float 
 11862 ;; Registers used:
 11863 ;;		wreg, status,2, status,0, cstack
 11864 ;; Tracked objects:
 11865 ;;		On entry : 0/0
 11866 ;;		On exit  : 0/0
 11867 ;;		Unchanged: 0/0
 11868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11869 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11870 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11871 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11872 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11873 ;;Total ram usage:       12 bytes
 11874 ;; Hardware stack levels used:    1
 11875 ;; Hardware stack levels required when called:    4
 11876 ;; This function calls:
 11877 ;;		___ftpack
 11878 ;; This function is called by:
 11879 ;;		_angleToPulse
 11880 ;;		_printf
 11881 ;;		___ftsub
 11882 ;; This function uses a non-reentrant model
 11883 ;;
 11884                           
 11885                           	psect	text44
 11886  001ADC                     __ptext44:
 11887                           	opt stack 0
 11888  001ADC                     ___ftadd:
 11889                           	opt stack 23
 11890                           
 11891                           ;incstack = 0
 11892  001ADC  C0A4  F0A8         	movff	___ftadd@f1+2,??___ftadd
 11893  001AE0  0100               	movlb	0	; () banked
 11894  001AE2  6BA9               	clrf	(??___ftadd+1)& (0+255),b
 11895  001AE4  6BAA               	clrf	(??___ftadd+2)& (0+255),b
 11896  001AE6  0100               	movlb	0	; () banked
 11897  001AE8  35A3               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 11898  001AEA  0100               	movlb	0	; () banked
 11899  001AEC  37A8               	rlcf	??___ftadd& (0+255),f,b
 11900  001AEE  E301               	bnc	u5781
 11901  001AF0  81A9               	bsf	(??___ftadd+1)& (0+255),0,b
 11902  001AF2                     u5781:
 11903  001AF2  0100               	movlb	0	; () banked
 11904  001AF4  51A8               	movf	??___ftadd& (0+255),w,b
 11905  001AF6  0100               	movlb	0	; () banked
 11906  001AF8  6FAD               	movwf	___ftadd@exp1& (0+255),b
 11907  001AFA  C0A7  F0A8         	movff	___ftadd@f2+2,??___ftadd
 11908  001AFE  0100               	movlb	0	; () banked
 11909  001B00  6BA9               	clrf	(??___ftadd+1)& (0+255),b
 11910  001B02  6BAA               	clrf	(??___ftadd+2)& (0+255),b
 11911  001B04  0100               	movlb	0	; () banked
 11912  001B06  35A6               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 11913  001B08  0100               	movlb	0	; () banked
 11914  001B0A  37A8               	rlcf	??___ftadd& (0+255),f,b
 11915  001B0C  E301               	bnc	u5791
 11916  001B0E  81A9               	bsf	(??___ftadd+1)& (0+255),0,b
 11917  001B10                     u5791:
 11918  001B10  0100               	movlb	0	; () banked
 11919  001B12  51A8               	movf	??___ftadd& (0+255),w,b
 11920  001B14  0100               	movlb	0	; () banked
 11921  001B16  6FAC               	movwf	___ftadd@exp2& (0+255),b
 11922                           
 11923                           ; BSR set to: 0
 11924  001B18  0100               	movlb	0	; () banked
 11925  001B1A  51AD               	movf	___ftadd@exp1& (0+255),w,b
 11926  001B1C  0100               	movlb	0	; () banked
 11927  001B1E  B4D8               	btfsc	status,2,c
 11928  001B20  D011               	goto	l1131
 11929                           
 11930                           ; BSR set to: 0
 11931  001B22  0100               	movlb	0	; () banked
 11932  001B24  51AC               	movf	___ftadd@exp2& (0+255),w,b
 11933  001B26  0100               	movlb	0	; () banked
 11934  001B28  5DAD               	subwf	___ftadd@exp1& (0+255),w,b
 11935  001B2A  B0D8               	btfsc	status,0,c
 11936  001B2C  D012               	goto	l5941
 11937                           
 11938                           ; BSR set to: 0
 11939  001B2E  0100               	movlb	0	; () banked
 11940  001B30  51AD               	movf	___ftadd@exp1& (0+255),w,b
 11941  001B32  0800               	sublw	0
 11942  001B34  0100               	movlb	0	; () banked
 11943  001B36  25AC               	addwf	___ftadd@exp2& (0+255),w,b
 11944  001B38  0100               	movlb	0	; () banked
 11945  001B3A  6FA8               	movwf	??___ftadd& (0+255),b
 11946  001B3C  0E18               	movlw	24
 11947  001B3E  0100               	movlb	0	; () banked
 11948  001B40  65A8               	cpfsgt	??___ftadd& (0+255),b
 11949  001B42  D007               	goto	l5941
 11950  001B44                     l1131:
 11951                           
 11952                           ; BSR set to: 0
 11953  001B44  C0A5  F0A2         	movff	___ftadd@f2,?___ftadd
 11954  001B48  C0A6  F0A3         	movff	___ftadd@f2+1,?___ftadd+1
 11955  001B4C  C0A7  F0A4         	movff	___ftadd@f2+2,?___ftadd+2
 11956  001B50  0012               	return	
 11957  001B52                     l5941:
 11958                           
 11959                           ; BSR set to: 0
 11960  001B52  0100               	movlb	0	; () banked
 11961  001B54  51AC               	movf	___ftadd@exp2& (0+255),w,b
 11962  001B56  0100               	movlb	0	; () banked
 11963  001B58  B4D8               	btfsc	status,2,c
 11964  001B5A  D011               	goto	l1135
 11965                           
 11966                           ; BSR set to: 0
 11967  001B5C  0100               	movlb	0	; () banked
 11968  001B5E  51AD               	movf	___ftadd@exp1& (0+255),w,b
 11969  001B60  0100               	movlb	0	; () banked
 11970  001B62  5DAC               	subwf	___ftadd@exp2& (0+255),w,b
 11971  001B64  B0D8               	btfsc	status,0,c
 11972  001B66  D012               	goto	l5947
 11973                           
 11974                           ; BSR set to: 0
 11975  001B68  0100               	movlb	0	; () banked
 11976  001B6A  51AC               	movf	___ftadd@exp2& (0+255),w,b
 11977  001B6C  0800               	sublw	0
 11978  001B6E  0100               	movlb	0	; () banked
 11979  001B70  25AD               	addwf	___ftadd@exp1& (0+255),w,b
 11980  001B72  0100               	movlb	0	; () banked
 11981  001B74  6FA8               	movwf	??___ftadd& (0+255),b
 11982  001B76  0E18               	movlw	24
 11983  001B78  0100               	movlb	0	; () banked
 11984  001B7A  65A8               	cpfsgt	??___ftadd& (0+255),b
 11985  001B7C  D007               	goto	l5947
 11986  001B7E                     l1135:
 11987                           
 11988                           ; BSR set to: 0
 11989  001B7E  C0A2  F0A2         	movff	___ftadd@f1,?___ftadd
 11990  001B82  C0A3  F0A3         	movff	___ftadd@f1+1,?___ftadd+1
 11991  001B86  C0A4  F0A4         	movff	___ftadd@f1+2,?___ftadd+2
 11992  001B8A  0012               	return	
 11993  001B8C                     l5947:
 11994                           
 11995                           ; BSR set to: 0
 11996  001B8C  0E06               	movlw	6
 11997  001B8E  0100               	movlb	0	; () banked
 11998  001B90  6FAB               	movwf	___ftadd@sign& (0+255),b
 11999                           
 12000                           ; BSR set to: 0
 12001  001B92  0100               	movlb	0	; () banked
 12002  001B94  AFA4               	btfss	(___ftadd@f1+2)& (0+255),7,b
 12003  001B96  D002               	goto	l5953
 12004                           
 12005                           ; BSR set to: 0
 12006  001B98  0100               	movlb	0	; () banked
 12007  001B9A  8FAB               	bsf	___ftadd@sign& (0+255),7,b
 12008  001B9C                     l5953:
 12009                           
 12010                           ; BSR set to: 0
 12011  001B9C  0100               	movlb	0	; () banked
 12012  001B9E  AFA7               	btfss	(___ftadd@f2+2)& (0+255),7,b
 12013  001BA0  D002               	goto	l1137
 12014                           
 12015                           ; BSR set to: 0
 12016  001BA2  0100               	movlb	0	; () banked
 12017  001BA4  8DAB               	bsf	___ftadd@sign& (0+255),6,b
 12018  001BA6                     l1137:
 12019                           
 12020                           ; BSR set to: 0
 12021  001BA6  0100               	movlb	0	; () banked
 12022  001BA8  8FA3               	bsf	(___ftadd@f1+1)& (0+255),7,b
 12023                           
 12024                           ; BSR set to: 0
 12025  001BAA  0EFF               	movlw	255
 12026  001BAC  0100               	movlb	0	; () banked
 12027  001BAE  17A2               	andwf	___ftadd@f1& (0+255),f,b
 12028  001BB0  0EFF               	movlw	255
 12029  001BB2  0100               	movlb	0	; () banked
 12030  001BB4  17A3               	andwf	(___ftadd@f1+1)& (0+255),f,b
 12031  001BB6  0E00               	movlw	0
 12032  001BB8  0100               	movlb	0	; () banked
 12033  001BBA  17A4               	andwf	(___ftadd@f1+2)& (0+255),f,b
 12034  001BBC  0100               	movlb	0	; () banked
 12035  001BBE  8FA6               	bsf	(___ftadd@f2+1)& (0+255),7,b
 12036                           
 12037                           ; BSR set to: 0
 12038  001BC0  0EFF               	movlw	255
 12039  001BC2  0100               	movlb	0	; () banked
 12040  001BC4  17A5               	andwf	___ftadd@f2& (0+255),f,b
 12041  001BC6  0EFF               	movlw	255
 12042  001BC8  0100               	movlb	0	; () banked
 12043  001BCA  17A6               	andwf	(___ftadd@f2+1)& (0+255),f,b
 12044  001BCC  0E00               	movlw	0
 12045  001BCE  0100               	movlb	0	; () banked
 12046  001BD0  17A7               	andwf	(___ftadd@f2+2)& (0+255),f,b
 12047                           
 12048                           ; BSR set to: 0
 12049  001BD2  0100               	movlb	0	; () banked
 12050  001BD4  51AC               	movf	___ftadd@exp2& (0+255),w,b
 12051  001BD6  0100               	movlb	0	; () banked
 12052  001BD8  5DAD               	subwf	___ftadd@exp1& (0+255),w,b
 12053  001BDA  B0D8               	btfsc	status,0,c
 12054  001BDC  D025               	goto	l5973
 12055  001BDE                     l5963:
 12056                           
 12057                           ; BSR set to: 0
 12058  001BDE  0100               	movlb	0	; () banked
 12059  001BE0  90D8               	bcf	status,0,c
 12060  001BE2  37A5               	rlcf	___ftadd@f2& (0+255),f,b
 12061  001BE4  37A6               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 12062  001BE6  37A7               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 12063  001BE8  0100               	movlb	0	; () banked
 12064  001BEA  07AC               	decf	___ftadd@exp2& (0+255),f,b
 12065                           
 12066                           ; BSR set to: 0
 12067  001BEC  0100               	movlb	0	; () banked
 12068  001BEE  51AD               	movf	___ftadd@exp1& (0+255),w,b
 12069  001BF0  0100               	movlb	0	; () banked
 12070  001BF2  19AC               	xorwf	___ftadd@exp2& (0+255),w,b
 12071  001BF4  B4D8               	btfsc	status,2,c
 12072  001BF6  D011               	goto	l5971
 12073                           
 12074                           ; BSR set to: 0
 12075  001BF8  0100               	movlb	0	; () banked
 12076  001BFA  07AB               	decf	___ftadd@sign& (0+255),f,b
 12077  001BFC  C0AB  F0A8         	movff	___ftadd@sign,??___ftadd
 12078  001C00  0E07               	movlw	7
 12079  001C02  0100               	movlb	0	; () banked
 12080  001C04  17A8               	andwf	??___ftadd& (0+255),f,b
 12081  001C06  B4D8               	btfsc	status,2,c
 12082  001C08  D008               	goto	l5971
 12083  001C0A  D7E9               	goto	l5963
 12084  001C0C                     l5969:
 12085                           
 12086                           ; BSR set to: 0
 12087  001C0C  0100               	movlb	0	; () banked
 12088  001C0E  90D8               	bcf	status,0,c
 12089  001C10  33A4               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 12090  001C12  33A3               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 12091  001C14  33A2               	rrcf	___ftadd@f1& (0+255),f,b
 12092  001C16  0100               	movlb	0	; () banked
 12093  001C18  2BAD               	incf	___ftadd@exp1& (0+255),f,b
 12094  001C1A                     l5971:
 12095                           
 12096                           ; BSR set to: 0
 12097  001C1A  0100               	movlb	0	; () banked
 12098  001C1C  51AC               	movf	___ftadd@exp2& (0+255),w,b
 12099  001C1E  0100               	movlb	0	; () banked
 12100  001C20  19AD               	xorwf	___ftadd@exp1& (0+255),w,b
 12101  001C22  B4D8               	btfsc	status,2,c
 12102  001C24  D02B               	goto	l1146
 12103  001C26  D7F2               	goto	l5969
 12104  001C28                     l5973:
 12105                           
 12106                           ; BSR set to: 0
 12107  001C28  0100               	movlb	0	; () banked
 12108  001C2A  51AD               	movf	___ftadd@exp1& (0+255),w,b
 12109  001C2C  0100               	movlb	0	; () banked
 12110  001C2E  5DAC               	subwf	___ftadd@exp2& (0+255),w,b
 12111  001C30  B0D8               	btfsc	status,0,c
 12112  001C32  D024               	goto	l1146
 12113  001C34                     l5975:
 12114                           
 12115                           ; BSR set to: 0
 12116  001C34  0100               	movlb	0	; () banked
 12117  001C36  90D8               	bcf	status,0,c
 12118  001C38  37A2               	rlcf	___ftadd@f1& (0+255),f,b
 12119  001C3A  37A3               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 12120  001C3C  37A4               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 12121  001C3E  0100               	movlb	0	; () banked
 12122  001C40  07AD               	decf	___ftadd@exp1& (0+255),f,b
 12123                           
 12124                           ; BSR set to: 0
 12125  001C42  0100               	movlb	0	; () banked
 12126  001C44  51AD               	movf	___ftadd@exp1& (0+255),w,b
 12127  001C46  0100               	movlb	0	; () banked
 12128  001C48  19AC               	xorwf	___ftadd@exp2& (0+255),w,b
 12129  001C4A  B4D8               	btfsc	status,2,c
 12130  001C4C  D011               	goto	l5983
 12131                           
 12132                           ; BSR set to: 0
 12133  001C4E  0100               	movlb	0	; () banked
 12134  001C50  07AB               	decf	___ftadd@sign& (0+255),f,b
 12135  001C52  C0AB  F0A8         	movff	___ftadd@sign,??___ftadd
 12136  001C56  0E07               	movlw	7
 12137  001C58  0100               	movlb	0	; () banked
 12138  001C5A  17A8               	andwf	??___ftadd& (0+255),f,b
 12139  001C5C  B4D8               	btfsc	status,2,c
 12140  001C5E  D008               	goto	l5983
 12141  001C60  D7E9               	goto	l5975
 12142  001C62                     l5981:
 12143                           
 12144                           ; BSR set to: 0
 12145  001C62  0100               	movlb	0	; () banked
 12146  001C64  90D8               	bcf	status,0,c
 12147  001C66  33A7               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 12148  001C68  33A6               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 12149  001C6A  33A5               	rrcf	___ftadd@f2& (0+255),f,b
 12150  001C6C  0100               	movlb	0	; () banked
 12151  001C6E  2BAC               	incf	___ftadd@exp2& (0+255),f,b
 12152  001C70                     l5983:
 12153                           
 12154                           ; BSR set to: 0
 12155  001C70  0100               	movlb	0	; () banked
 12156  001C72  51AC               	movf	___ftadd@exp2& (0+255),w,b
 12157  001C74  0100               	movlb	0	; () banked
 12158  001C76  19AD               	xorwf	___ftadd@exp1& (0+255),w,b
 12159  001C78  A4D8               	btfss	status,2,c
 12160  001C7A  D7F3               	goto	l5981
 12161  001C7C                     l1146:
 12162                           
 12163                           ; BSR set to: 0
 12164  001C7C  0100               	movlb	0	; () banked
 12165  001C7E  AFAB               	btfss	___ftadd@sign& (0+255),7,b
 12166  001C80  D012               	goto	l1155
 12167                           
 12168                           ; BSR set to: 0
 12169  001C82  0EFF               	movlw	255
 12170  001C84  0100               	movlb	0	; () banked
 12171  001C86  1BA2               	xorwf	___ftadd@f1& (0+255),f,b
 12172  001C88  0EFF               	movlw	255
 12173  001C8A  0100               	movlb	0	; () banked
 12174  001C8C  1BA3               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 12175  001C8E  0EFF               	movlw	255
 12176  001C90  0100               	movlb	0	; () banked
 12177  001C92  1BA4               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 12178  001C94  0E01               	movlw	1
 12179  001C96  0100               	movlb	0	; () banked
 12180  001C98  27A2               	addwf	___ftadd@f1& (0+255),f,b
 12181  001C9A  0E00               	movlw	0
 12182  001C9C  0100               	movlb	0	; () banked
 12183  001C9E  23A3               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 12184  001CA0  0E00               	movlw	0
 12185  001CA2  0100               	movlb	0	; () banked
 12186  001CA4  23A4               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 12187  001CA6                     l1155:
 12188                           
 12189                           ; BSR set to: 0
 12190  001CA6  0100               	movlb	0	; () banked
 12191  001CA8  ADAB               	btfss	___ftadd@sign& (0+255),6,b
 12192  001CAA  D012               	goto	l5989
 12193                           
 12194                           ; BSR set to: 0
 12195  001CAC  0EFF               	movlw	255
 12196  001CAE  0100               	movlb	0	; () banked
 12197  001CB0  1BA5               	xorwf	___ftadd@f2& (0+255),f,b
 12198  001CB2  0EFF               	movlw	255
 12199  001CB4  0100               	movlb	0	; () banked
 12200  001CB6  1BA6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 12201  001CB8  0EFF               	movlw	255
 12202  001CBA  0100               	movlb	0	; () banked
 12203  001CBC  1BA7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 12204  001CBE  0E01               	movlw	1
 12205  001CC0  0100               	movlb	0	; () banked
 12206  001CC2  27A5               	addwf	___ftadd@f2& (0+255),f,b
 12207  001CC4  0E00               	movlw	0
 12208  001CC6  0100               	movlb	0	; () banked
 12209  001CC8  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 12210  001CCA  0E00               	movlw	0
 12211  001CCC  0100               	movlb	0	; () banked
 12212  001CCE  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 12213  001CD0                     l5989:
 12214                           
 12215                           ; BSR set to: 0
 12216  001CD0  0E00               	movlw	0
 12217  001CD2  0100               	movlb	0	; () banked
 12218  001CD4  6FAB               	movwf	___ftadd@sign& (0+255),b
 12219                           
 12220                           ; BSR set to: 0
 12221  001CD6  0100               	movlb	0	; () banked
 12222  001CD8  51A2               	movf	___ftadd@f1& (0+255),w,b
 12223  001CDA  0100               	movlb	0	; () banked
 12224  001CDC  27A5               	addwf	___ftadd@f2& (0+255),f,b
 12225  001CDE  0100               	movlb	0	; () banked
 12226  001CE0  51A3               	movf	(___ftadd@f1+1)& (0+255),w,b
 12227  001CE2  0100               	movlb	0	; () banked
 12228  001CE4  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 12229  001CE6  0100               	movlb	0	; () banked
 12230  001CE8  51A4               	movf	(___ftadd@f1+2)& (0+255),w,b
 12231  001CEA  0100               	movlb	0	; () banked
 12232  001CEC  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 12233                           
 12234                           ; BSR set to: 0
 12235  001CEE  0100               	movlb	0	; () banked
 12236  001CF0  AFA7               	btfss	(___ftadd@f2+2)& (0+255),7,b
 12237  001CF2  D015               	goto	l5999
 12238                           
 12239                           ; BSR set to: 0
 12240  001CF4  0EFF               	movlw	255
 12241  001CF6  0100               	movlb	0	; () banked
 12242  001CF8  1BA5               	xorwf	___ftadd@f2& (0+255),f,b
 12243  001CFA  0EFF               	movlw	255
 12244  001CFC  0100               	movlb	0	; () banked
 12245  001CFE  1BA6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 12246  001D00  0EFF               	movlw	255
 12247  001D02  0100               	movlb	0	; () banked
 12248  001D04  1BA7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 12249  001D06  0E01               	movlw	1
 12250  001D08  0100               	movlb	0	; () banked
 12251  001D0A  27A5               	addwf	___ftadd@f2& (0+255),f,b
 12252  001D0C  0E00               	movlw	0
 12253  001D0E  0100               	movlb	0	; () banked
 12254  001D10  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 12255  001D12  0E00               	movlw	0
 12256  001D14  0100               	movlb	0	; () banked
 12257  001D16  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 12258                           
 12259                           ; BSR set to: 0
 12260  001D18  0E01               	movlw	1
 12261  001D1A  0100               	movlb	0	; () banked
 12262  001D1C  6FAB               	movwf	___ftadd@sign& (0+255),b
 12263  001D1E                     l5999:
 12264                           
 12265                           ; BSR set to: 0
 12266  001D1E  C0A5  F023         	movff	___ftadd@f2,___ftpack@arg
 12267  001D22  C0A6  F024         	movff	___ftadd@f2+1,___ftpack@arg+1
 12268  001D26  C0A7  F025         	movff	___ftadd@f2+2,___ftpack@arg+2
 12269  001D2A  C0AD  F026         	movff	___ftadd@exp1,___ftpack@exp
 12270  001D2E  C0AB  F027         	movff	___ftadd@sign,___ftpack@sign
 12271  001D32  EC44  F018         	call	___ftpack	;wreg free
 12272  001D36  C023  F0A2         	movff	?___ftpack,?___ftadd
 12273  001D3A  C024  F0A3         	movff	?___ftpack+1,?___ftadd+1
 12274  001D3E  C025  F0A4         	movff	?___ftpack+2,?___ftadd+2
 12275  001D42  0012               	return	
 12276  001D44                     __end_of___ftadd:
 12277                           	opt stack 0
 12278                           tblptru	equ	0xFF8
 12279                           tblptrh	equ	0xFF7
 12280                           tblptrl	equ	0xFF6
 12281                           tablat	equ	0xFF5
 12282                           prodh	equ	0xFF4
 12283                           prodl	equ	0xFF3
 12284                           intcon	equ	0xFF2
 12285                           postinc0	equ	0xFEE
 12286                           wreg	equ	0xFE8
 12287                           postdec1	equ	0xFE5
 12288                           fsr1l	equ	0xFE1
 12289                           indf2	equ	0xFDF
 12290                           postinc2	equ	0xFDE
 12291                           postdec2	equ	0xFDD
 12292                           fsr2h	equ	0xFDA
 12293                           fsr2l	equ	0xFD9
 12294                           status	equ	0xFD8
 12295                           
 12296 ;; *************** function ___ftpack *****************
 12297 ;; Defined at:
 12298 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 12299 ;; Parameters:    Size  Location     Type
 12300 ;;  arg             3   34[COMRAM] unsigned um
 12301 ;;  exp             1   37[COMRAM] unsigned char 
 12302 ;;  sign            1   38[COMRAM] unsigned char 
 12303 ;; Auto vars:     Size  Location     Type
 12304 ;;		None
 12305 ;; Return value:  Size  Location     Type
 12306 ;;                  3   34[COMRAM] float 
 12307 ;; Registers used:
 12308 ;;		wreg, status,2, status,0
 12309 ;; Tracked objects:
 12310 ;;		On entry : 0/0
 12311 ;;		On exit  : 0/0
 12312 ;;		Unchanged: 0/0
 12313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12314 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12316 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12317 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12318 ;;Total ram usage:        8 bytes
 12319 ;; Hardware stack levels used:    1
 12320 ;; Hardware stack levels required when called:    3
 12321 ;; This function calls:
 12322 ;;		Nothing
 12323 ;; This function is called by:
 12324 ;;		___altoft
 12325 ;;		___awtoft
 12326 ;;		___ftadd
 12327 ;;		___ftdiv
 12328 ;;		___ftmul
 12329 ;;		___lltoft
 12330 ;; This function uses a non-reentrant model
 12331 ;;
 12332                           
 12333                           	psect	text45
 12334  003088                     __ptext45:
 12335                           	opt stack 0
 12336  003088                     ___ftpack:
 12337                           	opt stack 23
 12338                           
 12339                           ;incstack = 0
 12340  003088  5026               	movf	___ftpack@exp,w,c
 12341  00308A  B4D8               	btfsc	status,2,c
 12342  00308C  D005               	goto	l5893
 12343  00308E  5023               	movf	___ftpack@arg,w,c
 12344  003090  1024               	iorwf	___ftpack@arg+1,w,c
 12345  003092  1025               	iorwf	___ftpack@arg+2,w,c
 12346  003094  A4D8               	btfss	status,2,c
 12347  003096  D00C               	goto	l5899
 12348  003098                     l5893:
 12349  003098  0E00               	movlw	0
 12350  00309A  6E23               	movwf	?___ftpack,c
 12351  00309C  0E00               	movlw	0
 12352  00309E  6E24               	movwf	?___ftpack+1,c
 12353  0030A0  0E00               	movlw	0
 12354  0030A2  6E25               	movwf	?___ftpack+2,c
 12355  0030A4  0012               	return	
 12356  0030A6                     l5897:
 12357  0030A6  2A26               	incf	___ftpack@exp,f,c
 12358  0030A8  90D8               	bcf	status,0,c
 12359  0030AA  3225               	rrcf	___ftpack@arg+2,f,c
 12360  0030AC  3224               	rrcf	___ftpack@arg+1,f,c
 12361  0030AE  3223               	rrcf	___ftpack@arg,f,c
 12362  0030B0                     l5899:
 12363  0030B0  0E00               	movlw	0
 12364  0030B2  1423               	andwf	___ftpack@arg,w,c
 12365  0030B4  6E28               	movwf	??___ftpack& (0+255),c
 12366  0030B6  0E00               	movlw	0
 12367  0030B8  1424               	andwf	___ftpack@arg+1,w,c
 12368  0030BA  6E29               	movwf	(??___ftpack+1)& (0+255),c
 12369  0030BC  0EFE               	movlw	254
 12370  0030BE  1425               	andwf	___ftpack@arg+2,w,c
 12371  0030C0  6E2A               	movwf	(??___ftpack+2)& (0+255),c
 12372  0030C2  5028               	movf	??___ftpack,w,c
 12373  0030C4  1029               	iorwf	??___ftpack+1,w,c
 12374  0030C6  102A               	iorwf	??___ftpack+2,w,c
 12375  0030C8  B4D8               	btfsc	status,2,c
 12376  0030CA  D00C               	goto	l5905
 12377  0030CC  D7EC               	goto	l5897
 12378  0030CE                     l5901:
 12379  0030CE  2A26               	incf	___ftpack@exp,f,c
 12380  0030D0  0E01               	movlw	1
 12381  0030D2  2623               	addwf	___ftpack@arg,f,c
 12382  0030D4  0E00               	movlw	0
 12383  0030D6  2224               	addwfc	___ftpack@arg+1,f,c
 12384  0030D8  0E00               	movlw	0
 12385  0030DA  2225               	addwfc	___ftpack@arg+2,f,c
 12386  0030DC  90D8               	bcf	status,0,c
 12387  0030DE  3225               	rrcf	___ftpack@arg+2,f,c
 12388  0030E0  3224               	rrcf	___ftpack@arg+1,f,c
 12389  0030E2  3223               	rrcf	___ftpack@arg,f,c
 12390  0030E4                     l5905:
 12391  0030E4  0E00               	movlw	0
 12392  0030E6  1423               	andwf	___ftpack@arg,w,c
 12393  0030E8  6E28               	movwf	??___ftpack& (0+255),c
 12394  0030EA  0E00               	movlw	0
 12395  0030EC  1424               	andwf	___ftpack@arg+1,w,c
 12396  0030EE  6E29               	movwf	(??___ftpack+1)& (0+255),c
 12397  0030F0  0EFF               	movlw	255
 12398  0030F2  1425               	andwf	___ftpack@arg+2,w,c
 12399  0030F4  6E2A               	movwf	(??___ftpack+2)& (0+255),c
 12400  0030F6  5028               	movf	??___ftpack,w,c
 12401  0030F8  1029               	iorwf	??___ftpack+1,w,c
 12402  0030FA  102A               	iorwf	??___ftpack+2,w,c
 12403  0030FC  B4D8               	btfsc	status,2,c
 12404  0030FE  D006               	goto	l5909
 12405  003100  D7E6               	goto	l5901
 12406  003102                     l5907:
 12407  003102  0626               	decf	___ftpack@exp,f,c
 12408  003104  90D8               	bcf	status,0,c
 12409  003106  3623               	rlcf	___ftpack@arg,f,c
 12410  003108  3624               	rlcf	___ftpack@arg+1,f,c
 12411  00310A  3625               	rlcf	___ftpack@arg+2,f,c
 12412  00310C                     l5909:
 12413  00310C  BE24               	btfsc	___ftpack@arg+1,7,c
 12414  00310E  D003               	goto	l1108
 12415  003110  0E02               	movlw	2
 12416  003112  6026               	cpfslt	___ftpack@exp,c
 12417  003114  D7F6               	goto	l5907
 12418  003116                     l1108:
 12419  003116  A026               	btfss	___ftpack@exp,0,c
 12420  003118  9E24               	bcf	___ftpack@arg+1,7,c
 12421  00311A  90D8               	bcf	status,0,c
 12422  00311C  3226               	rrcf	___ftpack@exp,f,c
 12423  00311E  5026               	movf	___ftpack@exp,w,c
 12424  003120  1225               	iorwf	___ftpack@arg+2,f,c
 12425  003122  5027               	movf	___ftpack@sign,w,c
 12426  003124  A4D8               	btfss	status,2,c
 12427  003126  8E25               	bsf	___ftpack@arg+2,7,c
 12428  003128  C023  F023         	movff	___ftpack@arg,?___ftpack
 12429  00312C  C024  F024         	movff	___ftpack@arg+1,?___ftpack+1
 12430  003130  C025  F025         	movff	___ftpack@arg+2,?___ftpack+2
 12431  003134  0012               	return	
 12432  003136                     __end_of___ftpack:
 12433                           	opt stack 0
 12434                           tblptru	equ	0xFF8
 12435                           tblptrh	equ	0xFF7
 12436                           tblptrl	equ	0xFF6
 12437                           tablat	equ	0xFF5
 12438                           prodh	equ	0xFF4
 12439                           prodl	equ	0xFF3
 12440                           intcon	equ	0xFF2
 12441                           postinc0	equ	0xFEE
 12442                           wreg	equ	0xFE8
 12443                           postdec1	equ	0xFE5
 12444                           fsr1l	equ	0xFE1
 12445                           indf2	equ	0xFDF
 12446                           postinc2	equ	0xFDE
 12447                           postdec2	equ	0xFDD
 12448                           fsr2h	equ	0xFDA
 12449                           fsr2l	equ	0xFD9
 12450                           status	equ	0xFD8
 12451                           
 12452 ;; *************** function ___ftneg *****************
 12453 ;; Defined at:
 12454 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 12455 ;; Parameters:    Size  Location     Type
 12456 ;;  f1              3   34[COMRAM] float 
 12457 ;; Auto vars:     Size  Location     Type
 12458 ;;		None
 12459 ;; Return value:  Size  Location     Type
 12460 ;;                  3   34[COMRAM] float 
 12461 ;; Registers used:
 12462 ;;		wreg, status,2, status,0
 12463 ;; Tracked objects:
 12464 ;;		On entry : 0/0
 12465 ;;		On exit  : 0/0
 12466 ;;		Unchanged: 0/0
 12467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12468 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12471 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12472 ;;Total ram usage:        3 bytes
 12473 ;; Hardware stack levels used:    1
 12474 ;; Hardware stack levels required when called:    3
 12475 ;; This function calls:
 12476 ;;		Nothing
 12477 ;; This function is called by:
 12478 ;;		_printf
 12479 ;; This function uses a non-reentrant model
 12480 ;;
 12481                           
 12482                           	psect	text46
 12483  003C48                     __ptext46:
 12484                           	opt stack 0
 12485  003C48                     ___ftneg:
 12486                           	opt stack 25
 12487                           
 12488                           ;incstack = 0
 12489  003C48  5023               	movf	___ftneg@f1,w,c
 12490  003C4A  1024               	iorwf	___ftneg@f1+1,w,c
 12491  003C4C  1025               	iorwf	___ftneg@f1+2,w,c
 12492  003C4E  B4D8               	btfsc	status,2,c
 12493  003C50  D006               	goto	l1205
 12494  003C52  0E00               	movlw	0
 12495  003C54  1A23               	xorwf	___ftneg@f1,f,c
 12496  003C56  0E00               	movlw	0
 12497  003C58  1A24               	xorwf	___ftneg@f1+1,f,c
 12498  003C5A  0E80               	movlw	128
 12499  003C5C  1A25               	xorwf	___ftneg@f1+2,f,c
 12500  003C5E                     l1205:
 12501  003C5E  C023  F023         	movff	___ftneg@f1,?___ftneg
 12502  003C62  C024  F024         	movff	___ftneg@f1+1,?___ftneg+1
 12503  003C66  C025  F025         	movff	___ftneg@f1+2,?___ftneg+2
 12504  003C6A  0012               	return		;funcret
 12505  003C6C                     __end_of___ftneg:
 12506                           	opt stack 0
 12507                           tblptru	equ	0xFF8
 12508                           tblptrh	equ	0xFF7
 12509                           tblptrl	equ	0xFF6
 12510                           tablat	equ	0xFF5
 12511                           prodh	equ	0xFF4
 12512                           prodl	equ	0xFF3
 12513                           intcon	equ	0xFF2
 12514                           postinc0	equ	0xFEE
 12515                           wreg	equ	0xFE8
 12516                           postdec1	equ	0xFE5
 12517                           fsr1l	equ	0xFE1
 12518                           indf2	equ	0xFDF
 12519                           postinc2	equ	0xFDE
 12520                           postdec2	equ	0xFDD
 12521                           fsr2h	equ	0xFDA
 12522                           fsr2l	equ	0xFD9
 12523                           status	equ	0xFD8
 12524                           
 12525 ;; *************** function ___ftge *****************
 12526 ;; Defined at:
 12527 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 12528 ;; Parameters:    Size  Location     Type
 12529 ;;  ff1             3   46[COMRAM] float 
 12530 ;;  ff2             3   49[COMRAM] float 
 12531 ;; Auto vars:     Size  Location     Type
 12532 ;;		None
 12533 ;; Return value:  Size  Location     Type
 12534 ;;		None               void
 12535 ;; Registers used:
 12536 ;;		wreg, status,2, status,0
 12537 ;; Tracked objects:
 12538 ;;		On entry : 0/0
 12539 ;;		On exit  : 0/0
 12540 ;;		Unchanged: 0/0
 12541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12542 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12544 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12545 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12546 ;;Total ram usage:        9 bytes
 12547 ;; Hardware stack levels used:    1
 12548 ;; Hardware stack levels required when called:    3
 12549 ;; This function calls:
 12550 ;;		Nothing
 12551 ;; This function is called by:
 12552 ;;		_sortBattery
 12553 ;;		_printf
 12554 ;; This function uses a non-reentrant model
 12555 ;;
 12556                           
 12557                           	psect	text47
 12558  003274                     __ptext47:
 12559                           	opt stack 0
 12560  003274                     ___ftge:
 12561                           	opt stack 25
 12562                           
 12563                           ;incstack = 0
 12564  003274  AE31               	btfss	___ftge@ff1+2,7,c
 12565  003276  D016               	goto	l6413
 12566  003278  C02F  F035         	movff	___ftge@ff1,??___ftge
 12567  00327C  C030  F036         	movff	___ftge@ff1+1,??___ftge+1
 12568  003280  C031  F037         	movff	___ftge@ff1+2,??___ftge+2
 12569  003284  1E35               	comf	??___ftge,f,c
 12570  003286  1E36               	comf	??___ftge+1,f,c
 12571  003288  1E37               	comf	??___ftge+2,f,c
 12572  00328A  2A35               	incf	??___ftge,f,c
 12573  00328C  0E00               	movlw	0
 12574  00328E  2236               	addwfc	??___ftge+1,f,c
 12575  003290  2237               	addwfc	??___ftge+2,f,c
 12576  003292  0E00               	movlw	0
 12577  003294  2435               	addwf	??___ftge,w,c
 12578  003296  6E2F               	movwf	___ftge@ff1,c
 12579  003298  0E00               	movlw	0
 12580  00329A  2036               	addwfc	??___ftge+1,w,c
 12581  00329C  6E30               	movwf	___ftge@ff1+1,c
 12582  00329E  0E80               	movlw	128
 12583  0032A0  2037               	addwfc	??___ftge+2,w,c
 12584  0032A2  6E31               	movwf	___ftge@ff1+2,c
 12585  0032A4                     l6413:
 12586  0032A4  AE34               	btfss	___ftge@ff2+2,7,c
 12587  0032A6  D016               	goto	l6417
 12588  0032A8  C032  F035         	movff	___ftge@ff2,??___ftge
 12589  0032AC  C033  F036         	movff	___ftge@ff2+1,??___ftge+1
 12590  0032B0  C034  F037         	movff	___ftge@ff2+2,??___ftge+2
 12591  0032B4  1E35               	comf	??___ftge,f,c
 12592  0032B6  1E36               	comf	??___ftge+1,f,c
 12593  0032B8  1E37               	comf	??___ftge+2,f,c
 12594  0032BA  2A35               	incf	??___ftge,f,c
 12595  0032BC  0E00               	movlw	0
 12596  0032BE  2236               	addwfc	??___ftge+1,f,c
 12597  0032C0  2237               	addwfc	??___ftge+2,f,c
 12598  0032C2  0E00               	movlw	0
 12599  0032C4  2435               	addwf	??___ftge,w,c
 12600  0032C6  6E32               	movwf	___ftge@ff2,c
 12601  0032C8  0E00               	movlw	0
 12602  0032CA  2036               	addwfc	??___ftge+1,w,c
 12603  0032CC  6E33               	movwf	___ftge@ff2+1,c
 12604  0032CE  0E80               	movlw	128
 12605  0032D0  2037               	addwfc	??___ftge+2,w,c
 12606  0032D2  6E34               	movwf	___ftge@ff2+2,c
 12607  0032D4                     l6417:
 12608  0032D4  0E00               	movlw	0
 12609  0032D6  1A2F               	xorwf	___ftge@ff1,f,c
 12610  0032D8  0E00               	movlw	0
 12611  0032DA  1A30               	xorwf	___ftge@ff1+1,f,c
 12612  0032DC  0E80               	movlw	128
 12613  0032DE  1A31               	xorwf	___ftge@ff1+2,f,c
 12614  0032E0  0E00               	movlw	0
 12615  0032E2  1A32               	xorwf	___ftge@ff2,f,c
 12616  0032E4  0E00               	movlw	0
 12617  0032E6  1A33               	xorwf	___ftge@ff2+1,f,c
 12618  0032E8  0E80               	movlw	128
 12619  0032EA  1A34               	xorwf	___ftge@ff2+2,f,c
 12620  0032EC  5032               	movf	___ftge@ff2,w,c
 12621  0032EE  5C2F               	subwf	___ftge@ff1,w,c
 12622  0032F0  5033               	movf	___ftge@ff2+1,w,c
 12623  0032F2  5830               	subwfb	___ftge@ff1+1,w,c
 12624  0032F4  5034               	movf	___ftge@ff2+2,w,c
 12625  0032F6  5831               	subwfb	___ftge@ff1+2,w,c
 12626  0032F8  B0D8               	btfsc	status,0,c
 12627  0032FA  D002               	goto	l6423
 12628  0032FC  90D8               	bcf	status,0,c
 12629  0032FE  0012               	return	
 12630  003300                     l6423:
 12631  003300  80D8               	bsf	status,0,c
 12632  003302  0012               	return	
 12633  003304                     __end_of___ftge:
 12634                           	opt stack 0
 12635                           tblptru	equ	0xFF8
 12636                           tblptrh	equ	0xFF7
 12637                           tblptrl	equ	0xFF6
 12638                           tablat	equ	0xFF5
 12639                           prodh	equ	0xFF4
 12640                           prodl	equ	0xFF3
 12641                           intcon	equ	0xFF2
 12642                           postinc0	equ	0xFEE
 12643                           wreg	equ	0xFE8
 12644                           postdec1	equ	0xFE5
 12645                           fsr1l	equ	0xFE1
 12646                           indf2	equ	0xFDF
 12647                           postinc2	equ	0xFDE
 12648                           postdec2	equ	0xFDD
 12649                           fsr2h	equ	0xFDA
 12650                           fsr2l	equ	0xFD9
 12651                           status	equ	0xFD8
 12652                           
 12653 ;; *************** function _pinSetup *****************
 12654 ;; Defined at:
 12655 ;;		line 302 in file "main.c"
 12656 ;; Parameters:    Size  Location     Type
 12657 ;;		None
 12658 ;; Auto vars:     Size  Location     Type
 12659 ;;		None
 12660 ;; Return value:  Size  Location     Type
 12661 ;;                  1    wreg      void 
 12662 ;; Registers used:
 12663 ;;		wreg, status,2, status,0
 12664 ;; Tracked objects:
 12665 ;;		On entry : 0/0
 12666 ;;		On exit  : 0/0
 12667 ;;		Unchanged: 0/0
 12668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12673 ;;Total ram usage:        0 bytes
 12674 ;; Hardware stack levels used:    1
 12675 ;; Hardware stack levels required when called:    3
 12676 ;; This function calls:
 12677 ;;		Nothing
 12678 ;; This function is called by:
 12679 ;;		_debug
 12680 ;;		_main
 12681 ;; This function uses a non-reentrant model
 12682 ;;
 12683                           
 12684                           	psect	text48
 12685  003ABC                     __ptext48:
 12686                           	opt stack 0
 12687  003ABC                     _pinSetup:
 12688                           	opt stack 27
 12689                           
 12690                           ;main.c: 308: TRISA = 0xFF;
 12691                           
 12692                           ;incstack = 0
 12693  003ABC  6892               	setf	3986,c	;volatile
 12694                           
 12695                           ;main.c: 309: TRISB = 0xFF;
 12696  003ABE  6893               	setf	3987,c	;volatile
 12697                           
 12698                           ;main.c: 310: TRISC = 0b11000000;
 12699  003AC0  0EC0               	movlw	192
 12700  003AC2  6E94               	movwf	3988,c	;volatile
 12701                           
 12702                           ;main.c: 311: TRISD = 0x00;
 12703  003AC4  0E00               	movlw	0
 12704  003AC6  6E95               	movwf	3989,c	;volatile
 12705                           
 12706                           ;main.c: 312: TRISE = 0x00;
 12707  003AC8  0E00               	movlw	0
 12708  003ACA  6E96               	movwf	3990,c	;volatile
 12709                           
 12710                           ;main.c: 314: LATA = 0x00;
 12711  003ACC  0E00               	movlw	0
 12712  003ACE  6E89               	movwf	3977,c	;volatile
 12713                           
 12714                           ;main.c: 315: LATB = 0x00;
 12715  003AD0  0E00               	movlw	0
 12716  003AD2  6E8A               	movwf	3978,c	;volatile
 12717                           
 12718                           ;main.c: 316: LATC = 0x00;
 12719  003AD4  0E00               	movlw	0
 12720  003AD6  6E8B               	movwf	3979,c	;volatile
 12721                           
 12722                           ;main.c: 317: LATD = 0x00;
 12723  003AD8  0E00               	movlw	0
 12724  003ADA  6E8C               	movwf	3980,c	;volatile
 12725                           
 12726                           ;main.c: 318: LATE = 0x00;
 12727  003ADC  0E00               	movlw	0
 12728  003ADE  6E8D               	movwf	3981,c	;volatile
 12729                           
 12730                           ;main.c: 320: ADCON0 = 0x00;
 12731  003AE0  0E00               	movlw	0
 12732  003AE2  6EC2               	movwf	4034,c	;volatile
 12733                           
 12734                           ;main.c: 322: ADCON1 |= 0x0B;
 12735  003AE4  0E0B               	movlw	11
 12736  003AE6  12C1               	iorwf	4033,f,c	;volatile
 12737                           
 12738                           ;main.c: 327: ADCON2 = 0;
 12739  003AE8  0E00               	movlw	0
 12740  003AEA  6EC0               	movwf	4032,c	;volatile
 12741                           
 12742                           ;main.c: 328: ADCON2 |= 0b010;
 12743  003AEC  82C0               	bsf	4032,1,c	;volatile
 12744                           
 12745                           ;main.c: 329: ADCON2 |= 0b110<<3;
 12746  003AEE  0E30               	movlw	48
 12747  003AF0  12C0               	iorwf	4032,f,c	;volatile
 12748                           
 12749                           ;main.c: 330: ADCON2 |= 1<<7;
 12750  003AF2  8EC0               	bsf	4032,7,c	;volatile
 12751                           
 12752                           ;main.c: 333: INT1IE = 1;
 12753  003AF4  86F0               	bsf	intcon3,3,c	;volatile
 12754                           
 12755                           ;main.c: 334: INT0IE = 1;
 12756  003AF6  88F2               	bsf	intcon,4,c	;volatile
 12757                           
 12758                           ;main.c: 335: (INTCONbits.GIE = 1);
 12759  003AF8  8EF2               	bsf	intcon,7,c	;volatile
 12760  003AFA  0012               	return		;funcret
 12761  003AFC                     __end_of_pinSetup:
 12762                           	opt stack 0
 12763                           tblptru	equ	0xFF8
 12764                           tblptrh	equ	0xFF7
 12765                           tblptrl	equ	0xFF6
 12766                           tablat	equ	0xFF5
 12767                           prodh	equ	0xFF4
 12768                           prodl	equ	0xFF3
 12769                           intcon	equ	0xFF2
 12770                           intcon3	equ	0xFF0
 12771                           postinc0	equ	0xFEE
 12772                           wreg	equ	0xFE8
 12773                           postdec1	equ	0xFE5
 12774                           fsr1l	equ	0xFE1
 12775                           indf2	equ	0xFDF
 12776                           postinc2	equ	0xFDE
 12777                           postdec2	equ	0xFDD
 12778                           fsr2h	equ	0xFDA
 12779                           fsr2l	equ	0xFD9
 12780                           status	equ	0xFD8
 12781                           
 12782 ;; *************** function _lcdClear *****************
 12783 ;; Defined at:
 12784 ;;		line 74 in file "lcd.c"
 12785 ;; Parameters:    Size  Location     Type
 12786 ;;		None
 12787 ;; Auto vars:     Size  Location     Type
 12788 ;;		None
 12789 ;; Return value:  Size  Location     Type
 12790 ;;                  1    wreg      void 
 12791 ;; Registers used:
 12792 ;;		wreg, status,2, status,0, cstack
 12793 ;; Tracked objects:
 12794 ;;		On entry : 0/0
 12795 ;;		On exit  : 0/0
 12796 ;;		Unchanged: 0/0
 12797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12802 ;;Total ram usage:        0 bytes
 12803 ;; Hardware stack levels used:    1
 12804 ;; Hardware stack levels required when called:    5
 12805 ;; This function calls:
 12806 ;;		_lcdInst
 12807 ;; This function is called by:
 12808 ;;		_debug
 12809 ;;		_main
 12810 ;;		_sortBattery
 12811 ;;		_showDateTime
 12812 ;;		_showMainMenu
 12813 ;;		_showRunSelect
 12814 ;;		_showRunMenu
 12815 ;;		_showRunTime
 12816 ;;		_showRunStats
 12817 ;;		_pause
 12818 ;; This function uses a non-reentrant model
 12819 ;;
 12820                           
 12821                           	psect	text49
 12822  003D2E                     __ptext49:
 12823                           	opt stack 0
 12824  003D2E                     _lcdClear:
 12825                           	opt stack 24
 12826                           
 12827                           ;lcd.c: 75: lcdInst(0b00000001);
 12828                           
 12829                           ;incstack = 0
 12830  003D2E  0E01               	movlw	1
 12831  003D30  EC47  F01E         	call	_lcdInst
 12832  003D34  0012               	return		;funcret
 12833  003D36                     __end_of_lcdClear:
 12834                           	opt stack 0
 12835                           tblptru	equ	0xFF8
 12836                           tblptrh	equ	0xFF7
 12837                           tblptrl	equ	0xFF6
 12838                           tablat	equ	0xFF5
 12839                           prodh	equ	0xFF4
 12840                           prodl	equ	0xFF3
 12841                           intcon	equ	0xFF2
 12842                           intcon3	equ	0xFF0
 12843                           postinc0	equ	0xFEE
 12844                           wreg	equ	0xFE8
 12845                           postdec1	equ	0xFE5
 12846                           fsr1l	equ	0xFE1
 12847                           indf2	equ	0xFDF
 12848                           postinc2	equ	0xFDE
 12849                           postdec2	equ	0xFDD
 12850                           fsr2h	equ	0xFDA
 12851                           fsr2l	equ	0xFD9
 12852                           status	equ	0xFD8
 12853                           
 12854 ;; *************** function _initLCD *****************
 12855 ;; Defined at:
 12856 ;;		line 15 in file "lcd.c"
 12857 ;; Parameters:    Size  Location     Type
 12858 ;;		None
 12859 ;; Auto vars:     Size  Location     Type
 12860 ;;		None
 12861 ;; Return value:  Size  Location     Type
 12862 ;;                  1    wreg      void 
 12863 ;; Registers used:
 12864 ;;		wreg, status,2, status,0, cstack
 12865 ;; Tracked objects:
 12866 ;;		On entry : 0/0
 12867 ;;		On exit  : 0/0
 12868 ;;		Unchanged: 0/0
 12869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12872 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12873 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12874 ;;Total ram usage:        1 bytes
 12875 ;; Hardware stack levels used:    1
 12876 ;; Hardware stack levels required when called:    5
 12877 ;; This function calls:
 12878 ;;		_lcdInst
 12879 ;; This function is called by:
 12880 ;;		_debug
 12881 ;;		_main
 12882 ;; This function uses a non-reentrant model
 12883 ;;
 12884                           
 12885                           	psect	text50
 12886  003A76                     __ptext50:
 12887                           	opt stack 0
 12888  003A76                     _initLCD:
 12889                           	opt stack 25
 12890                           
 12891                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 12892                           
 12893                           ;incstack = 0
 12894  003A76  0E31               	movlw	49
 12895  003A78  6E27               	movwf	??_initLCD& (0+255),c
 12896  003A7A  0EB2               	movlw	178
 12897  003A7C                     u8227:
 12898  003A7C  2EE8               	decfsz	wreg,f,c
 12899  003A7E  D7FE               	bra	u8227
 12900  003A80  2E27               	decfsz	??_initLCD& (0+255),f,c
 12901  003A82  D7FC               	bra	u8227
 12902  003A84  D000               	nop2	
 12903                           
 12904                           ;lcd.c: 18: lcdInst(0b00110011);
 12905  003A86  0E33               	movlw	51
 12906  003A88  EC47  F01E         	call	_lcdInst
 12907                           
 12908                           ;lcd.c: 19: lcdInst(0b00110010);
 12909  003A8C  0E32               	movlw	50
 12910  003A8E  EC47  F01E         	call	_lcdInst
 12911                           
 12912                           ;lcd.c: 20: lcdInst(0b00101000);
 12913  003A92  0E28               	movlw	40
 12914  003A94  EC47  F01E         	call	_lcdInst
 12915                           
 12916                           ;lcd.c: 21: lcdInst(0b00001111);
 12917  003A98  0E0F               	movlw	15
 12918  003A9A  EC47  F01E         	call	_lcdInst
 12919                           
 12920                           ;lcd.c: 22: lcdInst(0b00000110);
 12921  003A9E  0E06               	movlw	6
 12922  003AA0  EC47  F01E         	call	_lcdInst
 12923                           
 12924                           ;lcd.c: 23: lcdInst(0b00000001);
 12925  003AA4  0E01               	movlw	1
 12926  003AA6  EC47  F01E         	call	_lcdInst
 12927                           
 12928                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 12929  003AAA  0E31               	movlw	49
 12930  003AAC  6E27               	movwf	??_initLCD& (0+255),c
 12931  003AAE  0EB2               	movlw	178
 12932  003AB0                     u8237:
 12933  003AB0  2EE8               	decfsz	wreg,f,c
 12934  003AB2  D7FE               	bra	u8237
 12935  003AB4  2E27               	decfsz	??_initLCD& (0+255),f,c
 12936  003AB6  D7FC               	bra	u8237
 12937  003AB8  D000               	nop2	
 12938  003ABA  0012               	return		;funcret
 12939  003ABC                     __end_of_initLCD:
 12940                           	opt stack 0
 12941                           tblptru	equ	0xFF8
 12942                           tblptrh	equ	0xFF7
 12943                           tblptrl	equ	0xFF6
 12944                           tablat	equ	0xFF5
 12945                           prodh	equ	0xFF4
 12946                           prodl	equ	0xFF3
 12947                           intcon	equ	0xFF2
 12948                           intcon3	equ	0xFF0
 12949                           postinc0	equ	0xFEE
 12950                           wreg	equ	0xFE8
 12951                           postdec1	equ	0xFE5
 12952                           fsr1l	equ	0xFE1
 12953                           indf2	equ	0xFDF
 12954                           postinc2	equ	0xFDE
 12955                           postdec2	equ	0xFDD
 12956                           fsr2h	equ	0xFDA
 12957                           fsr2l	equ	0xFD9
 12958                           status	equ	0xFD8
 12959                           
 12960 ;; *************** function _lcdInst *****************
 12961 ;; Defined at:
 12962 ;;		line 27 in file "lcd.c"
 12963 ;; Parameters:    Size  Location     Type
 12964 ;;  data            1    wreg     unsigned char 
 12965 ;; Auto vars:     Size  Location     Type
 12966 ;;  data            1   37[COMRAM] unsigned char 
 12967 ;; Return value:  Size  Location     Type
 12968 ;;                  1    wreg      void 
 12969 ;; Registers used:
 12970 ;;		wreg, status,2, status,0, cstack
 12971 ;; Tracked objects:
 12972 ;;		On entry : 0/0
 12973 ;;		On exit  : 0/0
 12974 ;;		Unchanged: 0/0
 12975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12977 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12978 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12979 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12980 ;;Total ram usage:        2 bytes
 12981 ;; Hardware stack levels used:    1
 12982 ;; Hardware stack levels required when called:    4
 12983 ;; This function calls:
 12984 ;;		_lcdNibble
 12985 ;; This function is called by:
 12986 ;;		_initLCD
 12987 ;;		_lcdHome
 12988 ;;		_lcdClear
 12989 ;;		_lcdNewline
 12990 ;; This function uses a non-reentrant model
 12991 ;;
 12992                           
 12993                           	psect	text51
 12994  003C8E                     __ptext51:
 12995                           	opt stack 0
 12996  003C8E                     _lcdInst:
 12997                           	opt stack 22
 12998                           
 12999                           ;incstack = 0
 13000                           ;lcdInst@data stored from wreg
 13001  003C8E  6E26               	movwf	lcdInst@data,c
 13002                           
 13003                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 13004  003C90  948C               	bcf	3980,2,c	;volatile
 13005                           
 13006                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 13007  003C92  0E74               	movlw	116
 13008  003C94                     u8247:
 13009  003C94  2EE8               	decfsz	wreg,f,c
 13010  003C96  D7FE               	bra	u8247
 13011  003C98  D000               	nop2	
 13012                           
 13013                           ;lcd.c: 30: lcdNibble(data);
 13014  003C9A  5026               	movf	lcdInst@data,w,c
 13015  003C9C  EC5F  F01B         	call	_lcdNibble
 13016                           
 13017                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 13018  003CA0  0E04               	movlw	4
 13019  003CA2  6E25               	movwf	??_lcdInst& (0+255),c
 13020  003CA4  0E3E               	movlw	62
 13021  003CA6                     u8257:
 13022  003CA6  2EE8               	decfsz	wreg,f,c
 13023  003CA8  D7FE               	bra	u8257
 13024  003CAA  2E25               	decfsz	??_lcdInst& (0+255),f,c
 13025  003CAC  D7FC               	bra	u8257
 13026  003CAE  0012               	return		;funcret
 13027  003CB0                     __end_of_lcdInst:
 13028                           	opt stack 0
 13029                           tblptru	equ	0xFF8
 13030                           tblptrh	equ	0xFF7
 13031                           tblptrl	equ	0xFF6
 13032                           tablat	equ	0xFF5
 13033                           prodh	equ	0xFF4
 13034                           prodl	equ	0xFF3
 13035                           intcon	equ	0xFF2
 13036                           intcon3	equ	0xFF0
 13037                           postinc0	equ	0xFEE
 13038                           wreg	equ	0xFE8
 13039                           postdec1	equ	0xFE5
 13040                           fsr1l	equ	0xFE1
 13041                           indf2	equ	0xFDF
 13042                           postinc2	equ	0xFDE
 13043                           postdec2	equ	0xFDD
 13044                           fsr2h	equ	0xFDA
 13045                           fsr2l	equ	0xFD9
 13046                           status	equ	0xFD8
 13047                           
 13048 ;; *************** function _lcdNibble *****************
 13049 ;; Defined at:
 13050 ;;		line 46 in file "lcd.c"
 13051 ;; Parameters:    Size  Location     Type
 13052 ;;  data            1    wreg     unsigned char 
 13053 ;; Auto vars:     Size  Location     Type
 13054 ;;  data            1   35[COMRAM] unsigned char 
 13055 ;;  temp            1   34[COMRAM] unsigned char 
 13056 ;; Return value:  Size  Location     Type
 13057 ;;                  1    wreg      void 
 13058 ;; Registers used:
 13059 ;;		wreg, status,2, status,0
 13060 ;; Tracked objects:
 13061 ;;		On entry : 0/0
 13062 ;;		On exit  : 0/0
 13063 ;;		Unchanged: 0/0
 13064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13066 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13068 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13069 ;;Total ram usage:        2 bytes
 13070 ;; Hardware stack levels used:    1
 13071 ;; Hardware stack levels required when called:    3
 13072 ;; This function calls:
 13073 ;;		Nothing
 13074 ;; This function is called by:
 13075 ;;		_lcdInst
 13076 ;;		_putch
 13077 ;; This function uses a non-reentrant model
 13078 ;;
 13079                           
 13080                           	psect	text52
 13081  0036BE                     __ptext52:
 13082                           	opt stack 0
 13083  0036BE                     _lcdNibble:
 13084                           	opt stack 24
 13085                           
 13086                           ;incstack = 0
 13087                           ;lcdNibble@data stored from wreg
 13088  0036BE  6E24               	movwf	lcdNibble@data,c
 13089                           
 13090                           ;lcd.c: 48: char temp = data & 0xF0;
 13091  0036C0  5024               	movf	lcdNibble@data,w,c
 13092  0036C2  0BF0               	andlw	240
 13093  0036C4  6E23               	movwf	lcdNibble@temp,c
 13094                           
 13095                           ;lcd.c: 49: LATD = LATD & 0x0F;
 13096  0036C6  508C               	movf	3980,w,c	;volatile
 13097  0036C8  0B0F               	andlw	15
 13098  0036CA  6E8C               	movwf	3980,c	;volatile
 13099                           
 13100                           ;lcd.c: 50: LATD = temp | LATD;
 13101  0036CC  5023               	movf	lcdNibble@temp,w,c
 13102  0036CE  108C               	iorwf	3980,w,c	;volatile
 13103  0036D0  6E8C               	movwf	3980,c	;volatile
 13104                           
 13105                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 13106  0036D2  968C               	bcf	3980,3,c	;volatile
 13107                           
 13108                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 13109  0036D4  0ED6               	movlw	214
 13110  0036D6                     u8267:
 13111  0036D6  D000               	nop2	
 13112  0036D8  D000               	nop2	
 13113  0036DA  2EE8               	decfsz	wreg,f,c
 13114  0036DC  D7FC               	bra	u8267
 13115  0036DE  D000               	nop2	
 13116                           
 13117                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 13118  0036E0  868C               	bsf	3980,3,c	;volatile
 13119                           
 13120                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 13121  0036E2  0ED6               	movlw	214
 13122  0036E4                     u8277:
 13123  0036E4  D000               	nop2	
 13124  0036E6  D000               	nop2	
 13125  0036E8  2EE8               	decfsz	wreg,f,c
 13126  0036EA  D7FC               	bra	u8277
 13127  0036EC  D000               	nop2	
 13128                           
 13129                           ;lcd.c: 58: data = data << 4;
 13130  0036EE  3824               	swapf	lcdNibble@data,w,c
 13131  0036F0  0BF0               	andlw	240
 13132  0036F2  6E24               	movwf	lcdNibble@data,c
 13133                           
 13134                           ;lcd.c: 60: temp = data & 0xF0;
 13135  0036F4  5024               	movf	lcdNibble@data,w,c
 13136  0036F6  0BF0               	andlw	240
 13137  0036F8  6E23               	movwf	lcdNibble@temp,c
 13138                           
 13139                           ;lcd.c: 61: LATD = LATD & 0x0F;
 13140  0036FA  508C               	movf	3980,w,c	;volatile
 13141  0036FC  0B0F               	andlw	15
 13142  0036FE  6E8C               	movwf	3980,c	;volatile
 13143                           
 13144                           ;lcd.c: 62: LATD = temp | LATD;
 13145  003700  5023               	movf	lcdNibble@temp,w,c
 13146  003702  108C               	iorwf	3980,w,c	;volatile
 13147  003704  6E8C               	movwf	3980,c	;volatile
 13148                           
 13149                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 13150  003706  968C               	bcf	3980,3,c	;volatile
 13151                           
 13152                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 13153  003708  0ED6               	movlw	214
 13154  00370A                     u8287:
 13155  00370A  D000               	nop2	
 13156  00370C  D000               	nop2	
 13157  00370E  2EE8               	decfsz	wreg,f,c
 13158  003710  D7FC               	bra	u8287
 13159  003712  D000               	nop2	
 13160                           
 13161                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 13162  003714  868C               	bsf	3980,3,c	;volatile
 13163                           
 13164                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 13165  003716  0ED6               	movlw	214
 13166  003718                     u8297:
 13167  003718  D000               	nop2	
 13168  00371A  D000               	nop2	
 13169  00371C  2EE8               	decfsz	wreg,f,c
 13170  00371E  D7FC               	bra	u8297
 13171  003720  D000               	nop2	
 13172  003722  0012               	return		;funcret
 13173  003724                     __end_of_lcdNibble:
 13174                           	opt stack 0
 13175                           tblptru	equ	0xFF8
 13176                           tblptrh	equ	0xFF7
 13177                           tblptrl	equ	0xFF6
 13178                           tablat	equ	0xFF5
 13179                           prodh	equ	0xFF4
 13180                           prodl	equ	0xFF3
 13181                           intcon	equ	0xFF2
 13182                           intcon3	equ	0xFF0
 13183                           postinc0	equ	0xFEE
 13184                           wreg	equ	0xFE8
 13185                           postdec1	equ	0xFE5
 13186                           fsr1l	equ	0xFE1
 13187                           indf2	equ	0xFDF
 13188                           postinc2	equ	0xFDE
 13189                           postdec2	equ	0xFDD
 13190                           fsr2h	equ	0xFDA
 13191                           fsr2l	equ	0xFD9
 13192                           status	equ	0xFD8
 13193                           
 13194 ;; *************** function ___lwmod *****************
 13195 ;; Defined at:
 13196 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 13197 ;; Parameters:    Size  Location     Type
 13198 ;;  dividend        2    0[BANK0 ] unsigned int 
 13199 ;;  divisor         2    2[BANK0 ] unsigned int 
 13200 ;; Auto vars:     Size  Location     Type
 13201 ;;  counter         1    4[BANK0 ] unsigned char 
 13202 ;; Return value:  Size  Location     Type
 13203 ;;                  2    0[BANK0 ] unsigned int 
 13204 ;; Registers used:
 13205 ;;		wreg, status,2, status,0
 13206 ;; Tracked objects:
 13207 ;;		On entry : 0/0
 13208 ;;		On exit  : 0/0
 13209 ;;		Unchanged: 0/0
 13210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13211 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13212 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13214 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13215 ;;Total ram usage:        5 bytes
 13216 ;; Hardware stack levels used:    1
 13217 ;; Hardware stack levels required when called:    3
 13218 ;; This function calls:
 13219 ;;		Nothing
 13220 ;; This function is called by:
 13221 ;;		_debug
 13222 ;; This function uses a non-reentrant model
 13223 ;;
 13224                           
 13225                           	psect	text53
 13226  003788                     __ptext53:
 13227                           	opt stack 0
 13228  003788                     ___lwmod:
 13229                           	opt stack 26
 13230                           
 13231                           ;incstack = 0
 13232  003788  0100               	movlb	0	; () banked
 13233  00378A  5182               	movf	___lwmod@divisor& (0+255),w,b
 13234  00378C  0100               	movlb	0	; () banked
 13235  00378E  1183               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 13236  003790  B4D8               	btfsc	status,2,c
 13237  003792  D026               	goto	l1318
 13238                           
 13239                           ; BSR set to: 0
 13240  003794  0E01               	movlw	1
 13241  003796  0100               	movlb	0	; () banked
 13242  003798  6F84               	movwf	___lwmod@counter& (0+255),b
 13243  00379A  D006               	goto	l7187
 13244  00379C                     l7185:
 13245                           
 13246                           ; BSR set to: 0
 13247  00379C  0100               	movlb	0	; () banked
 13248  00379E  90D8               	bcf	status,0,c
 13249  0037A0  3782               	rlcf	___lwmod@divisor& (0+255),f,b
 13250  0037A2  3783               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 13251  0037A4  0100               	movlb	0	; () banked
 13252  0037A6  2B84               	incf	___lwmod@counter& (0+255),f,b
 13253  0037A8                     l7187:
 13254                           
 13255                           ; BSR set to: 0
 13256  0037A8  0100               	movlb	0	; () banked
 13257  0037AA  AF83               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 13258  0037AC  D7F7               	goto	l7185
 13259  0037AE                     l7189:
 13260                           
 13261                           ; BSR set to: 0
 13262  0037AE  0100               	movlb	0	; () banked
 13263  0037B0  5182               	movf	___lwmod@divisor& (0+255),w,b
 13264  0037B2  0100               	movlb	0	; () banked
 13265  0037B4  5D80               	subwf	___lwmod@dividend& (0+255),w,b
 13266  0037B6  0100               	movlb	0	; () banked
 13267  0037B8  5183               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13268  0037BA  0100               	movlb	0	; () banked
 13269  0037BC  5981               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 13270  0037BE  A0D8               	btfss	status,0,c
 13271  0037C0  D008               	goto	l7193
 13272                           
 13273                           ; BSR set to: 0
 13274  0037C2  0100               	movlb	0	; () banked
 13275  0037C4  5182               	movf	___lwmod@divisor& (0+255),w,b
 13276  0037C6  0100               	movlb	0	; () banked
 13277  0037C8  5F80               	subwf	___lwmod@dividend& (0+255),f,b
 13278  0037CA  0100               	movlb	0	; () banked
 13279  0037CC  5183               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13280  0037CE  0100               	movlb	0	; () banked
 13281  0037D0  5B81               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 13282  0037D2                     l7193:
 13283                           
 13284                           ; BSR set to: 0
 13285  0037D2  0100               	movlb	0	; () banked
 13286  0037D4  90D8               	bcf	status,0,c
 13287  0037D6  3383               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 13288  0037D8  3382               	rrcf	___lwmod@divisor& (0+255),f,b
 13289                           
 13290                           ; BSR set to: 0
 13291  0037DA  0100               	movlb	0	; () banked
 13292  0037DC  2F84               	decfsz	___lwmod@counter& (0+255),f,b
 13293  0037DE  D7E7               	goto	l7189
 13294  0037E0                     l1318:
 13295                           
 13296                           ; BSR set to: 0
 13297  0037E0  C080  F080         	movff	___lwmod@dividend,?___lwmod
 13298  0037E4  C081  F081         	movff	___lwmod@dividend+1,?___lwmod+1
 13299                           
 13300                           ; BSR set to: 0
 13301  0037E8  0012               	return		;funcret
 13302  0037EA                     __end_of___lwmod:
 13303                           	opt stack 0
 13304                           tblptru	equ	0xFF8
 13305                           tblptrh	equ	0xFF7
 13306                           tblptrl	equ	0xFF6
 13307                           tablat	equ	0xFF5
 13308                           prodh	equ	0xFF4
 13309                           prodl	equ	0xFF3
 13310                           intcon	equ	0xFF2
 13311                           intcon3	equ	0xFF0
 13312                           postinc0	equ	0xFEE
 13313                           wreg	equ	0xFE8
 13314                           postdec1	equ	0xFE5
 13315                           fsr1l	equ	0xFE1
 13316                           indf2	equ	0xFDF
 13317                           postinc2	equ	0xFDE
 13318                           postdec2	equ	0xFDD
 13319                           fsr2h	equ	0xFDA
 13320                           fsr2l	equ	0xFD9
 13321                           status	equ	0xFD8
 13322                           
 13323 ;; *************** function ___almod *****************
 13324 ;; Defined at:
 13325 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\almod.c"
 13326 ;; Parameters:    Size  Location     Type
 13327 ;;  dividend        4   48[COMRAM] long 
 13328 ;;  divisor         4   52[COMRAM] long 
 13329 ;; Auto vars:     Size  Location     Type
 13330 ;;  sign            1   57[COMRAM] unsigned char 
 13331 ;;  counter         1   56[COMRAM] unsigned char 
 13332 ;; Return value:  Size  Location     Type
 13333 ;;                  4   48[COMRAM] long 
 13334 ;; Registers used:
 13335 ;;		wreg, status,2, status,0
 13336 ;; Tracked objects:
 13337 ;;		On entry : 0/0
 13338 ;;		On exit  : 0/0
 13339 ;;		Unchanged: 0/0
 13340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13341 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13342 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13344 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13345 ;;Total ram usage:       10 bytes
 13346 ;; Hardware stack levels used:    1
 13347 ;; Hardware stack levels required when called:    3
 13348 ;; This function calls:
 13349 ;;		Nothing
 13350 ;; This function is called by:
 13351 ;;		_main
 13352 ;; This function uses a non-reentrant model
 13353 ;;
 13354                           
 13355                           	psect	text54
 13356  003136                     __ptext54:
 13357                           	opt stack 0
 13358  003136                     ___almod:
 13359                           	opt stack 27
 13360                           
 13361                           ; BSR set to: 0
 13362                           ;incstack = 0
 13363  003136  0E00               	movlw	0
 13364  003138  6E3A               	movwf	___almod@sign,c
 13365  00313A  AE34               	btfss	___almod@dividend+3,7,c
 13366  00313C  D00A               	goto	l5535
 13367  00313E  1E34               	comf	___almod@dividend+3,f,c
 13368  003140  1E33               	comf	___almod@dividend+2,f,c
 13369  003142  1E32               	comf	___almod@dividend+1,f,c
 13370  003144  6C31               	negf	___almod@dividend,c
 13371  003146  0E00               	movlw	0
 13372  003148  2232               	addwfc	___almod@dividend+1,f,c
 13373  00314A  2233               	addwfc	___almod@dividend+2,f,c
 13374  00314C  2234               	addwfc	___almod@dividend+3,f,c
 13375  00314E  0E01               	movlw	1
 13376  003150  6E3A               	movwf	___almod@sign,c
 13377  003152                     l5535:
 13378  003152  AE38               	btfss	___almod@divisor+3,7,c
 13379  003154  D008               	goto	l5539
 13380  003156  1E38               	comf	___almod@divisor+3,f,c
 13381  003158  1E37               	comf	___almod@divisor+2,f,c
 13382  00315A  1E36               	comf	___almod@divisor+1,f,c
 13383  00315C  6C35               	negf	___almod@divisor,c
 13384  00315E  0E00               	movlw	0
 13385  003160  2236               	addwfc	___almod@divisor+1,f,c
 13386  003162  2237               	addwfc	___almod@divisor+2,f,c
 13387  003164  2238               	addwfc	___almod@divisor+3,f,c
 13388  003166                     l5539:
 13389  003166  5035               	movf	___almod@divisor,w,c
 13390  003168  1036               	iorwf	___almod@divisor+1,w,c
 13391  00316A  1037               	iorwf	___almod@divisor+2,w,c
 13392  00316C  1038               	iorwf	___almod@divisor+3,w,c
 13393  00316E  B4D8               	btfsc	status,2,c
 13394  003170  D024               	goto	l5555
 13395  003172  0E01               	movlw	1
 13396  003174  6E39               	movwf	___almod@counter,c
 13397  003176  D006               	goto	l5545
 13398  003178                     l5543:
 13399  003178  90D8               	bcf	status,0,c
 13400  00317A  3635               	rlcf	___almod@divisor,f,c
 13401  00317C  3636               	rlcf	___almod@divisor+1,f,c
 13402  00317E  3637               	rlcf	___almod@divisor+2,f,c
 13403  003180  3638               	rlcf	___almod@divisor+3,f,c
 13404  003182  2A39               	incf	___almod@counter,f,c
 13405  003184                     l5545:
 13406  003184  AE38               	btfss	___almod@divisor+3,7,c
 13407  003186  D7F8               	goto	l5543
 13408  003188                     l5547:
 13409  003188  5035               	movf	___almod@divisor,w,c
 13410  00318A  5C31               	subwf	___almod@dividend,w,c
 13411  00318C  5036               	movf	___almod@divisor+1,w,c
 13412  00318E  5832               	subwfb	___almod@dividend+1,w,c
 13413  003190  5037               	movf	___almod@divisor+2,w,c
 13414  003192  5833               	subwfb	___almod@dividend+2,w,c
 13415  003194  5038               	movf	___almod@divisor+3,w,c
 13416  003196  5834               	subwfb	___almod@dividend+3,w,c
 13417  003198  A0D8               	btfss	status,0,c
 13418  00319A  D008               	goto	l5551
 13419  00319C  5035               	movf	___almod@divisor,w,c
 13420  00319E  5E31               	subwf	___almod@dividend,f,c
 13421  0031A0  5036               	movf	___almod@divisor+1,w,c
 13422  0031A2  5A32               	subwfb	___almod@dividend+1,f,c
 13423  0031A4  5037               	movf	___almod@divisor+2,w,c
 13424  0031A6  5A33               	subwfb	___almod@dividend+2,f,c
 13425  0031A8  5038               	movf	___almod@divisor+3,w,c
 13426  0031AA  5A34               	subwfb	___almod@dividend+3,f,c
 13427  0031AC                     l5551:
 13428  0031AC  90D8               	bcf	status,0,c
 13429  0031AE  3238               	rrcf	___almod@divisor+3,f,c
 13430  0031B0  3237               	rrcf	___almod@divisor+2,f,c
 13431  0031B2  3236               	rrcf	___almod@divisor+1,f,c
 13432  0031B4  3235               	rrcf	___almod@divisor,f,c
 13433  0031B6  2E39               	decfsz	___almod@counter,f,c
 13434  0031B8  D7E7               	goto	l5547
 13435  0031BA                     l5555:
 13436  0031BA  503A               	movf	___almod@sign,w,c
 13437  0031BC  B4D8               	btfsc	status,2,c
 13438  0031BE  D008               	goto	l5559
 13439  0031C0  1E34               	comf	___almod@dividend+3,f,c
 13440  0031C2  1E33               	comf	___almod@dividend+2,f,c
 13441  0031C4  1E32               	comf	___almod@dividend+1,f,c
 13442  0031C6  6C31               	negf	___almod@dividend,c
 13443  0031C8  0E00               	movlw	0
 13444  0031CA  2232               	addwfc	___almod@dividend+1,f,c
 13445  0031CC  2233               	addwfc	___almod@dividend+2,f,c
 13446  0031CE  2234               	addwfc	___almod@dividend+3,f,c
 13447  0031D0                     l5559:
 13448  0031D0  C031  F031         	movff	___almod@dividend,?___almod
 13449  0031D4  C032  F032         	movff	___almod@dividend+1,?___almod+1
 13450  0031D8  C033  F033         	movff	___almod@dividend+2,?___almod+2
 13451  0031DC  C034  F034         	movff	___almod@dividend+3,?___almod+3
 13452  0031E0  0012               	return	
 13453  0031E2                     __end_of___almod:
 13454                           	opt stack 0
 13455                           tblptru	equ	0xFF8
 13456                           tblptrh	equ	0xFF7
 13457                           tblptrl	equ	0xFF6
 13458                           tablat	equ	0xFF5
 13459                           prodh	equ	0xFF4
 13460                           prodl	equ	0xFF3
 13461                           intcon	equ	0xFF2
 13462                           intcon3	equ	0xFF0
 13463                           postinc0	equ	0xFEE
 13464                           wreg	equ	0xFE8
 13465                           postdec1	equ	0xFE5
 13466                           fsr1l	equ	0xFE1
 13467                           indf2	equ	0xFDF
 13468                           postinc2	equ	0xFDE
 13469                           postdec2	equ	0xFDD
 13470                           fsr2h	equ	0xFDA
 13471                           fsr2l	equ	0xFD9
 13472                           status	equ	0xFD8
 13473                           
 13474 ;; *************** function ___aldiv *****************
 13475 ;; Defined at:
 13476 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
 13477 ;; Parameters:    Size  Location     Type
 13478 ;;  dividend        4   34[COMRAM] long 
 13479 ;;  divisor         4   38[COMRAM] long 
 13480 ;; Auto vars:     Size  Location     Type
 13481 ;;  quotient        4   44[COMRAM] long 
 13482 ;;  sign            1   43[COMRAM] unsigned char 
 13483 ;;  counter         1   42[COMRAM] unsigned char 
 13484 ;; Return value:  Size  Location     Type
 13485 ;;                  4   34[COMRAM] long 
 13486 ;; Registers used:
 13487 ;;		wreg, status,2, status,0
 13488 ;; Tracked objects:
 13489 ;;		On entry : 0/0
 13490 ;;		On exit  : 0/0
 13491 ;;		Unchanged: 0/0
 13492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13493 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13494 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13496 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13497 ;;Total ram usage:       14 bytes
 13498 ;; Hardware stack levels used:    1
 13499 ;; Hardware stack levels required when called:    3
 13500 ;; This function calls:
 13501 ;;		Nothing
 13502 ;; This function is called by:
 13503 ;;		_main
 13504 ;; This function uses a non-reentrant model
 13505 ;;
 13506                           
 13507                           	psect	text55
 13508  002E2C                     __ptext55:
 13509                           	opt stack 0
 13510  002E2C                     ___aldiv:
 13511                           	opt stack 27
 13512                           
 13513                           ;incstack = 0
 13514  002E2C  0E00               	movlw	0
 13515  002E2E  6E2C               	movwf	___aldiv@sign,c
 13516  002E30  AE2A               	btfss	___aldiv@divisor+3,7,c
 13517  002E32  D00A               	goto	l5491
 13518  002E34  1E2A               	comf	___aldiv@divisor+3,f,c
 13519  002E36  1E29               	comf	___aldiv@divisor+2,f,c
 13520  002E38  1E28               	comf	___aldiv@divisor+1,f,c
 13521  002E3A  6C27               	negf	___aldiv@divisor,c
 13522  002E3C  0E00               	movlw	0
 13523  002E3E  2228               	addwfc	___aldiv@divisor+1,f,c
 13524  002E40  2229               	addwfc	___aldiv@divisor+2,f,c
 13525  002E42  222A               	addwfc	___aldiv@divisor+3,f,c
 13526  002E44  0E01               	movlw	1
 13527  002E46  6E2C               	movwf	___aldiv@sign,c
 13528  002E48                     l5491:
 13529  002E48  AE26               	btfss	___aldiv@dividend+3,7,c
 13530  002E4A  D00A               	goto	l5497
 13531  002E4C  1E26               	comf	___aldiv@dividend+3,f,c
 13532  002E4E  1E25               	comf	___aldiv@dividend+2,f,c
 13533  002E50  1E24               	comf	___aldiv@dividend+1,f,c
 13534  002E52  6C23               	negf	___aldiv@dividend,c
 13535  002E54  0E00               	movlw	0
 13536  002E56  2224               	addwfc	___aldiv@dividend+1,f,c
 13537  002E58  2225               	addwfc	___aldiv@dividend+2,f,c
 13538  002E5A  2226               	addwfc	___aldiv@dividend+3,f,c
 13539  002E5C  0E01               	movlw	1
 13540  002E5E  1A2C               	xorwf	___aldiv@sign,f,c
 13541  002E60                     l5497:
 13542  002E60  0E00               	movlw	0
 13543  002E62  6E2D               	movwf	___aldiv@quotient,c
 13544  002E64  0E00               	movlw	0
 13545  002E66  6E2E               	movwf	___aldiv@quotient+1,c
 13546  002E68  0E00               	movlw	0
 13547  002E6A  6E2F               	movwf	___aldiv@quotient+2,c
 13548  002E6C  0E00               	movlw	0
 13549  002E6E  6E30               	movwf	___aldiv@quotient+3,c
 13550  002E70  5027               	movf	___aldiv@divisor,w,c
 13551  002E72  1028               	iorwf	___aldiv@divisor+1,w,c
 13552  002E74  1029               	iorwf	___aldiv@divisor+2,w,c
 13553  002E76  102A               	iorwf	___aldiv@divisor+3,w,c
 13554  002E78  B4D8               	btfsc	status,2,c
 13555  002E7A  D02A               	goto	l5519
 13556  002E7C  0E01               	movlw	1
 13557  002E7E  6E2B               	movwf	___aldiv@counter,c
 13558  002E80  D006               	goto	l5505
 13559  002E82                     l5503:
 13560  002E82  90D8               	bcf	status,0,c
 13561  002E84  3627               	rlcf	___aldiv@divisor,f,c
 13562  002E86  3628               	rlcf	___aldiv@divisor+1,f,c
 13563  002E88  3629               	rlcf	___aldiv@divisor+2,f,c
 13564  002E8A  362A               	rlcf	___aldiv@divisor+3,f,c
 13565  002E8C  2A2B               	incf	___aldiv@counter,f,c
 13566  002E8E                     l5505:
 13567  002E8E  AE2A               	btfss	___aldiv@divisor+3,7,c
 13568  002E90  D7F8               	goto	l5503
 13569  002E92                     l5507:
 13570  002E92  90D8               	bcf	status,0,c
 13571  002E94  362D               	rlcf	___aldiv@quotient,f,c
 13572  002E96  362E               	rlcf	___aldiv@quotient+1,f,c
 13573  002E98  362F               	rlcf	___aldiv@quotient+2,f,c
 13574  002E9A  3630               	rlcf	___aldiv@quotient+3,f,c
 13575  002E9C  5027               	movf	___aldiv@divisor,w,c
 13576  002E9E  5C23               	subwf	___aldiv@dividend,w,c
 13577  002EA0  5028               	movf	___aldiv@divisor+1,w,c
 13578  002EA2  5824               	subwfb	___aldiv@dividend+1,w,c
 13579  002EA4  5029               	movf	___aldiv@divisor+2,w,c
 13580  002EA6  5825               	subwfb	___aldiv@dividend+2,w,c
 13581  002EA8  502A               	movf	___aldiv@divisor+3,w,c
 13582  002EAA  5826               	subwfb	___aldiv@dividend+3,w,c
 13583  002EAC  A0D8               	btfss	status,0,c
 13584  002EAE  D009               	goto	l5515
 13585  002EB0  5027               	movf	___aldiv@divisor,w,c
 13586  002EB2  5E23               	subwf	___aldiv@dividend,f,c
 13587  002EB4  5028               	movf	___aldiv@divisor+1,w,c
 13588  002EB6  5A24               	subwfb	___aldiv@dividend+1,f,c
 13589  002EB8  5029               	movf	___aldiv@divisor+2,w,c
 13590  002EBA  5A25               	subwfb	___aldiv@dividend+2,f,c
 13591  002EBC  502A               	movf	___aldiv@divisor+3,w,c
 13592  002EBE  5A26               	subwfb	___aldiv@dividend+3,f,c
 13593  002EC0  802D               	bsf	___aldiv@quotient,0,c
 13594  002EC2                     l5515:
 13595  002EC2  90D8               	bcf	status,0,c
 13596  002EC4  322A               	rrcf	___aldiv@divisor+3,f,c
 13597  002EC6  3229               	rrcf	___aldiv@divisor+2,f,c
 13598  002EC8  3228               	rrcf	___aldiv@divisor+1,f,c
 13599  002ECA  3227               	rrcf	___aldiv@divisor,f,c
 13600  002ECC  2E2B               	decfsz	___aldiv@counter,f,c
 13601  002ECE  D7E1               	goto	l5507
 13602  002ED0                     l5519:
 13603  002ED0  502C               	movf	___aldiv@sign,w,c
 13604  002ED2  B4D8               	btfsc	status,2,c
 13605  002ED4  D008               	goto	l5523
 13606  002ED6  1E30               	comf	___aldiv@quotient+3,f,c
 13607  002ED8  1E2F               	comf	___aldiv@quotient+2,f,c
 13608  002EDA  1E2E               	comf	___aldiv@quotient+1,f,c
 13609  002EDC  6C2D               	negf	___aldiv@quotient,c
 13610  002EDE  0E00               	movlw	0
 13611  002EE0  222E               	addwfc	___aldiv@quotient+1,f,c
 13612  002EE2  222F               	addwfc	___aldiv@quotient+2,f,c
 13613  002EE4  2230               	addwfc	___aldiv@quotient+3,f,c
 13614  002EE6                     l5523:
 13615  002EE6  C02D  F023         	movff	___aldiv@quotient,?___aldiv
 13616  002EEA  C02E  F024         	movff	___aldiv@quotient+1,?___aldiv+1
 13617  002EEE  C02F  F025         	movff	___aldiv@quotient+2,?___aldiv+2
 13618  002EF2  C030  F026         	movff	___aldiv@quotient+3,?___aldiv+3
 13619  002EF6  0012               	return	
 13620  002EF8                     __end_of___aldiv:
 13621                           	opt stack 0
 13622                           tblptru	equ	0xFF8
 13623                           tblptrh	equ	0xFF7
 13624                           tblptrl	equ	0xFF6
 13625                           tablat	equ	0xFF5
 13626                           prodh	equ	0xFF4
 13627                           prodl	equ	0xFF3
 13628                           intcon	equ	0xFF2
 13629                           intcon3	equ	0xFF0
 13630                           postinc0	equ	0xFEE
 13631                           wreg	equ	0xFE8
 13632                           postdec1	equ	0xFE5
 13633                           fsr1l	equ	0xFE1
 13634                           indf2	equ	0xFDF
 13635                           postinc2	equ	0xFDE
 13636                           postdec2	equ	0xFDD
 13637                           fsr2h	equ	0xFDA
 13638                           fsr2l	equ	0xFD9
 13639                           status	equ	0xFD8
 13640                           
 13641 ;; *************** function _service *****************
 13642 ;; Defined at:
 13643 ;;		line 342 in file "main.c"
 13644 ;; Parameters:    Size  Location     Type
 13645 ;;		None
 13646 ;; Auto vars:     Size  Location     Type
 13647 ;;  key             1   33[COMRAM] unsigned char 
 13648 ;; Return value:  Size  Location     Type
 13649 ;;                  1    wreg      void 
 13650 ;; Registers used:
 13651 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13652 ;; Tracked objects:
 13653 ;;		On entry : 0/0
 13654 ;;		On exit  : 0/0
 13655 ;;		Unchanged: 0/0
 13656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13658 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13659 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13660 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13661 ;;Total ram usage:       15 bytes
 13662 ;; Hardware stack levels used:    1
 13663 ;; Hardware stack levels required when called:    2
 13664 ;; This function calls:
 13665 ;;		_servoInterruptService
 13666 ;;		i2_startTimer
 13667 ;; This function is called by:
 13668 ;;		Interrupt level 2
 13669 ;; This function uses a non-reentrant model
 13670 ;;
 13671                           
 13672                           	psect	intcode
 13673  000008                     __pintcode:
 13674                           	opt stack 0
 13675  000008                     _service:
 13676                           	opt stack 21
 13677                           
 13678                           ;incstack = 0
 13679  000008  825D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13680  00000A  ED55  F015         	call	int_func,f	;refresh shadow registers
 13681                           tblptru	equ	0xFF8
 13682                           tblptrh	equ	0xFF7
 13683                           tblptrl	equ	0xFF6
 13684                           tablat	equ	0xFF5
 13685                           prodh	equ	0xFF4
 13686                           prodl	equ	0xFF3
 13687                           intcon	equ	0xFF2
 13688                           intcon3	equ	0xFF0
 13689                           postinc0	equ	0xFEE
 13690                           wreg	equ	0xFE8
 13691                           postdec1	equ	0xFE5
 13692                           fsr1l	equ	0xFE1
 13693                           indf2	equ	0xFDF
 13694                           postinc2	equ	0xFDE
 13695                           postdec2	equ	0xFDD
 13696                           fsr2h	equ	0xFDA
 13697                           fsr2l	equ	0xFD9
 13698                           status	equ	0xFD8
 13699                           
 13700                           	psect	intcode_body
 13701  002AAA                     __pintcode_body:
 13702                           	opt stack 21
 13703  002AAA                     int_func:
 13704                           	opt stack 21
 13705  002AAA  0006               	pop		; remove dummy address from shadow register refresh
 13706  002AAC  CFFA F014          	movff	pclath,??_service
 13707  002AB0  CFFB F015          	movff	pclatu,??_service+1
 13708  002AB4  CFE9 F016          	movff	fsr0l,??_service+2
 13709  002AB8  CFEA F017          	movff	fsr0h,??_service+3
 13710  002ABC  CFE1 F018          	movff	fsr1l,??_service+4
 13711  002AC0  CFE2 F019          	movff	fsr1h,??_service+5
 13712  002AC4  CFD9 F01A          	movff	fsr2l,??_service+6
 13713  002AC8  CFDA F01B          	movff	fsr2h,??_service+7
 13714  002ACC  CFF3 F01C          	movff	prodl,??_service+8
 13715  002AD0  CFF4 F01D          	movff	prodh,??_service+9
 13716  002AD4  CFF6 F01E          	movff	tblptrl,??_service+10
 13717  002AD8  CFF7 F01F          	movff	tblptrh,??_service+11
 13718  002ADC  CFF8 F020          	movff	tblptru,??_service+12
 13719  002AE0  CFF5 F021          	movff	tablat,??_service+13
 13720                           
 13721                           ;main.c: 344: if( servoInterruptService() )return;
 13722  002AE4  EC5A  F014         	call	_servoInterruptService	;wreg free
 13723  002AE8  0900               	iorlw	0
 13724  002AEA  A4D8               	btfss	status,2,c
 13725  002AEC  D035               	goto	i2l205
 13726                           
 13727                           ;main.c: 346: if(TMR1IF){
 13728  002AEE  A09E               	btfss	3998,0,c	;volatile
 13729  002AF0  D017               	goto	i2l206
 13730                           
 13731                           ;main.c: 350: startTimer(1,0x8683);
 13732  002AF2  0E00               	movlw	0
 13733  002AF4  6E08               	movwf	i2startTimer@timer+1,c
 13734  002AF6  0E01               	movlw	1
 13735  002AF8  6E07               	movwf	i2startTimer@timer,c
 13736  002AFA  0E83               	movlw	131
 13737  002AFC  6E09               	movwf	i2startTimer@val,c
 13738  002AFE  0E86               	movlw	134
 13739  002B00  6E0A               	movwf	i2startTimer@val+1,c
 13740  002B02  0E00               	movlw	0
 13741  002B04  6E0B               	movwf	i2startTimer@val+2,c
 13742  002B06  0E00               	movlw	0
 13743  002B08  6E0C               	movwf	i2startTimer@val+3,c
 13744  002B0A  ECF0  F01C         	call	i2_startTimer	;wreg free
 13745                           
 13746                           ;main.c: 351: time+=1;
 13747  002B0E  0E01               	movlw	1
 13748  002B10  0101               	movlb	1	; () banked
 13749  002B12  2748               	addwf	_time& (0+255),f,b
 13750  002B14  0E00               	movlw	0
 13751  002B16  2349               	addwfc	(_time+1)& (0+255),f,b
 13752  002B18  234A               	addwfc	(_time+2)& (0+255),f,b
 13753  002B1A  234B               	addwfc	(_time+3)& (0+255),f,b
 13754                           
 13755                           ; BSR set to: 1
 13756                           ;main.c: 352: TMR1IF = 0;
 13757  002B1C  909E               	bcf	3998,0,c	;volatile
 13758                           
 13759                           ; BSR set to: 1
 13760                           ;main.c: 353: return;
 13761  002B1E  D01C               	goto	i2l205
 13762  002B20                     i2l206:
 13763                           
 13764                           ;main.c: 354: }
 13765                           ;main.c: 357: if(INT0IF){ INT0IF = 0;
 13766  002B20  A2F2               	btfss	intcon,1,c	;volatile
 13767  002B22  D007               	goto	i2l207
 13768  002B24  92F2               	bcf	intcon,1,c	;volatile
 13769                           
 13770                           ;main.c: 358: batteryDetected = 1;
 13771  002B26  0E00               	movlw	0
 13772  002B28  0101               	movlb	1	; () banked
 13773  002B2A  6F4D               	movwf	(_batteryDetected+1)& (0+255),b
 13774  002B2C  0E01               	movlw	1
 13775  002B2E  6F4C               	movwf	_batteryDetected& (0+255),b
 13776                           
 13777                           ; BSR set to: 1
 13778                           ;main.c: 359: return;
 13779  002B30  D013               	goto	i2l205
 13780  002B32                     i2l207:
 13781                           
 13782                           ;main.c: 360: }
 13783                           ;main.c: 363: if(INT1IF && INT1IE){INT1IF = 0;
 13784  002B32  B0F0               	btfsc	intcon3,0,c	;volatile
 13785  002B34  A6F0               	btfss	intcon3,3,c	;volatile
 13786  002B36  D010               	goto	i2l205
 13787  002B38  90F0               	bcf	intcon3,0,c	;volatile
 13788                           
 13789                           ;main.c: 364: char key = (PORTB & 0xF0) >> 4;
 13790  002B3A  3881               	swapf	3969,w,c	;volatile
 13791  002B3C  0B0F               	andlw	15
 13792  002B3E  0B0F               	andlw	15
 13793  002B40  6E22               	movwf	service@key,c
 13794                           
 13795                           ;main.c: 365: if(key == 12)terminate = 1;
 13796  002B42  0E0C               	movlw	12
 13797  002B44  1822               	xorwf	service@key,w,c
 13798  002B46  A4D8               	btfss	status,2,c
 13799  002B48  D005               	goto	i2l210
 13800  002B4A  0E00               	movlw	0
 13801  002B4C  0101               	movlb	1	; () banked
 13802  002B4E  6F57               	movwf	(_terminate+1)& (0+255),b
 13803  002B50  0E01               	movlw	1
 13804  002B52  6F56               	movwf	_terminate& (0+255),b
 13805  002B54                     i2l210:
 13806  002B54  B281               	btfsc	3969,1,c	;volatile
 13807  002B56  D7FE               	goto	i2l210
 13808  002B58                     i2l205:
 13809  002B58  C021  FFF5         	movff	??_service+13,tablat
 13810  002B5C  C020  FFF8         	movff	??_service+12,tblptru
 13811  002B60  C01F  FFF7         	movff	??_service+11,tblptrh
 13812  002B64  C01E  FFF6         	movff	??_service+10,tblptrl
 13813  002B68  C01D  FFF4         	movff	??_service+9,prodh
 13814  002B6C  C01C  FFF3         	movff	??_service+8,prodl
 13815  002B70  C01B  FFDA         	movff	??_service+7,fsr2h
 13816  002B74  C01A  FFD9         	movff	??_service+6,fsr2l
 13817  002B78  C019  FFE2         	movff	??_service+5,fsr1h
 13818  002B7C  C018  FFE1         	movff	??_service+4,fsr1l
 13819  002B80  C017  FFEA         	movff	??_service+3,fsr0h
 13820  002B84  C016  FFE9         	movff	??_service+2,fsr0l
 13821  002B88  C015  FFFB         	movff	??_service+1,pclatu
 13822  002B8C  C014  FFFA         	movff	??_service,pclath
 13823  002B90  925D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13824  002B92  0011               	retfie		f
 13825  002B94                     __end_of_service:
 13826                           	opt stack 0
 13827                           pclatu	equ	0xFFB
 13828                           pclath	equ	0xFFA
 13829                           tblptru	equ	0xFF8
 13830                           tblptrh	equ	0xFF7
 13831                           tblptrl	equ	0xFF6
 13832                           tablat	equ	0xFF5
 13833                           prodh	equ	0xFF4
 13834                           prodl	equ	0xFF3
 13835                           intcon	equ	0xFF2
 13836                           intcon3	equ	0xFF0
 13837                           postinc0	equ	0xFEE
 13838                           fsr0h	equ	0xFEA
 13839                           fsr0l	equ	0xFE9
 13840                           wreg	equ	0xFE8
 13841                           postdec1	equ	0xFE5
 13842                           fsr1h	equ	0xFE2
 13843                           fsr1l	equ	0xFE1
 13844                           indf2	equ	0xFDF
 13845                           postinc2	equ	0xFDE
 13846                           postdec2	equ	0xFDD
 13847                           fsr2h	equ	0xFDA
 13848                           fsr2l	equ	0xFD9
 13849                           status	equ	0xFD8
 13850                           
 13851 ;; *************** function _servoInterruptService *****************
 13852 ;; Defined at:
 13853 ;;		line 55 in file "servo.c"
 13854 ;; Parameters:    Size  Location     Type
 13855 ;;		None
 13856 ;; Auto vars:     Size  Location     Type
 13857 ;;		None
 13858 ;; Return value:  Size  Location     Type
 13859 ;;                  1    wreg      unsigned char 
 13860 ;; Registers used:
 13861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13862 ;; Tracked objects:
 13863 ;;		On entry : 0/0
 13864 ;;		On exit  : 0/0
 13865 ;;		Unchanged: 0/0
 13866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13869 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13870 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13871 ;;Total ram usage:        4 bytes
 13872 ;; Hardware stack levels used:    1
 13873 ;; Hardware stack levels required when called:    1
 13874 ;; This function calls:
 13875 ;;		i2___awmod
 13876 ;;		i2_digitalWrite
 13877 ;;		i2_startTimer
 13878 ;; This function is called by:
 13879 ;;		_service
 13880 ;; This function uses a non-reentrant model
 13881 ;;
 13882                           
 13883                           	psect	text57
 13884  0028B4                     __ptext57:
 13885                           	opt stack 0
 13886  0028B4                     _servoInterruptService:
 13887                           	opt stack 21
 13888                           
 13889                           ;servo.c: 57: if(TMR0IF){TMR0IF = 0;
 13890                           
 13891                           ;incstack = 0
 13892  0028B4  A4F2               	btfss	intcon,2,c	;volatile
 13893  0028B6  D082               	goto	i2l5471
 13894  0028B8  94F2               	bcf	intcon,2,c	;volatile
 13895                           
 13896                           ;servo.c: 58: digitalWrite(servos[curr],0);
 13897  0028BA  90D8               	bcf	status,0,c
 13898  0028BC  3458               	rlcf	_curr,w,c
 13899  0028BE  6ED9               	movwf	fsr2l,c
 13900  0028C0  3459               	rlcf	_curr+1,w,c
 13901  0028C2  6EDA               	movwf	fsr2h,c
 13902  0028C4  0E40               	movlw	low _servos
 13903  0028C6  26D9               	addwf	fsr2l,f,c
 13904  0028C8  0E01               	movlw	high _servos
 13905  0028CA  22DA               	addwfc	fsr2h,f,c
 13906  0028CC  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 13907  0028D0  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 13908  0028D4  0E00               	movlw	0
 13909  0028D6  6E0A               	movwf	i2digitalWrite@val+1,c
 13910  0028D8  0E00               	movlw	0
 13911  0028DA  6E09               	movwf	i2digitalWrite@val,c
 13912  0028DC  ECE0  F017         	call	i2_digitalWrite	;wreg free
 13913                           
 13914                           ;servo.c: 59: digitalWrite(servos[ (curr+1)%(n+1) ],1);
 13915  0028E0  0E01               	movlw	1
 13916  0028E2  2458               	addwf	_curr,w,c
 13917  0028E4  6E01               	movwf	i2___awmod@dividend,c
 13918  0028E6  0E00               	movlw	0
 13919  0028E8  2059               	addwfc	_curr+1,w,c
 13920  0028EA  6E02               	movwf	i2___awmod@dividend+1,c
 13921  0028EC  0E01               	movlw	1
 13922  0028EE  0100               	movlb	0	; () banked
 13923  0028F0  25F4               	addwf	_n& (0+255),w,b
 13924  0028F2  6E03               	movwf	i2___awmod@divisor,c
 13925  0028F4  0E00               	movlw	0
 13926  0028F6  0100               	movlb	0	; () banked
 13927  0028F8  21F5               	addwfc	(_n+1)& (0+255),w,b
 13928  0028FA  6E04               	movwf	i2___awmod@divisor+1,c
 13929  0028FC  ECBF  F01A         	call	i2___awmod	;wreg free
 13930  002900  90D8               	bcf	status,0,c
 13931  002902  3601               	rlcf	?i2___awmod,f,c
 13932  002904  3602               	rlcf	?i2___awmod+1,f,c
 13933  002906  0E40               	movlw	low _servos
 13934  002908  2401               	addwf	?i2___awmod,w,c
 13935  00290A  6ED9               	movwf	fsr2l,c
 13936  00290C  0E01               	movlw	high _servos
 13937  00290E  2002               	addwfc	?i2___awmod+1,w,c
 13938  002910  6EDA               	movwf	fsr2h,c
 13939  002912  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 13940  002916  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 13941  00291A  0E00               	movlw	0
 13942  00291C  6E0A               	movwf	i2digitalWrite@val+1,c
 13943  00291E  0E01               	movlw	1
 13944  002920  6E09               	movwf	i2digitalWrite@val,c
 13945  002922  ECE0  F017         	call	i2_digitalWrite	;wreg free
 13946                           
 13947                           ;servo.c: 60: startTimer(0, 0xFFFF - pulse[ (curr+1)%(n+1) ]);
 13948  002926  0E00               	movlw	0
 13949  002928  6E08               	movwf	i2startTimer@timer+1,c
 13950  00292A  0E00               	movlw	0
 13951  00292C  6E07               	movwf	i2startTimer@timer,c
 13952  00292E  0EFF               	movlw	255
 13953  002930  6E10               	movwf	??_servoInterruptService& (0+255),c
 13954  002932  0EFF               	movlw	255
 13955  002934  6E11               	movwf	(??_servoInterruptService+1)& (0+255),c
 13956  002936  0E01               	movlw	1
 13957  002938  2458               	addwf	_curr,w,c
 13958  00293A  6E01               	movwf	i2___awmod@dividend,c
 13959  00293C  0E00               	movlw	0
 13960  00293E  2059               	addwfc	_curr+1,w,c
 13961  002940  6E02               	movwf	i2___awmod@dividend+1,c
 13962  002942  0E01               	movlw	1
 13963  002944  0100               	movlb	0	; () banked
 13964  002946  25F4               	addwf	_n& (0+255),w,b
 13965  002948  6E03               	movwf	i2___awmod@divisor,c
 13966  00294A  0E00               	movlw	0
 13967  00294C  0100               	movlb	0	; () banked
 13968  00294E  21F5               	addwfc	(_n+1)& (0+255),w,b
 13969  002950  6E04               	movwf	i2___awmod@divisor+1,c
 13970  002952  ECBF  F01A         	call	i2___awmod	;wreg free
 13971  002956  90D8               	bcf	status,0,c
 13972  002958  3601               	rlcf	?i2___awmod,f,c
 13973  00295A  3602               	rlcf	?i2___awmod+1,f,c
 13974  00295C  0E38               	movlw	low _pulse
 13975  00295E  2401               	addwf	?i2___awmod,w,c
 13976  002960  6ED9               	movwf	fsr2l,c
 13977  002962  0E01               	movlw	high _pulse
 13978  002964  2002               	addwfc	?i2___awmod+1,w,c
 13979  002966  6EDA               	movwf	fsr2h,c
 13980  002968  CFDE F012          	movff	postinc2,??_servoInterruptService+2
 13981  00296C  CFDD F013          	movff	postdec2,??_servoInterruptService+3
 13982  002970  1E12               	comf	??_servoInterruptService+2,f,c
 13983  002972  1E13               	comf	??_servoInterruptService+3,f,c
 13984  002974  4A12               	infsnz	??_servoInterruptService+2,f,c
 13985  002976  2A13               	incf	??_servoInterruptService+3,f,c
 13986  002978  5010               	movf	??_servoInterruptService,w,c
 13987  00297A  2612               	addwf	??_servoInterruptService+2,f,c
 13988  00297C  5011               	movf	??_servoInterruptService+1,w,c
 13989  00297E  2213               	addwfc	??_servoInterruptService+3,f,c
 13990  002980  C012  F009         	movff	??_servoInterruptService+2,i2startTimer@val
 13991  002984  C013  F00A         	movff	??_servoInterruptService+3,i2startTimer@val+1
 13992  002988  6A0B               	clrf	i2startTimer@val+2,c
 13993  00298A  6A0C               	clrf	i2startTimer@val+3,c
 13994  00298C  ECF0  F01C         	call	i2_startTimer	;wreg free
 13995                           
 13996                           ;servo.c: 62: curr = (curr+1)%(n+1);
 13997  002990  0E01               	movlw	1
 13998  002992  2458               	addwf	_curr,w,c
 13999  002994  6E01               	movwf	i2___awmod@dividend,c
 14000  002996  0E00               	movlw	0
 14001  002998  2059               	addwfc	_curr+1,w,c
 14002  00299A  6E02               	movwf	i2___awmod@dividend+1,c
 14003  00299C  0E01               	movlw	1
 14004  00299E  0100               	movlb	0	; () banked
 14005  0029A0  25F4               	addwf	_n& (0+255),w,b
 14006  0029A2  6E03               	movwf	i2___awmod@divisor,c
 14007  0029A4  0E00               	movlw	0
 14008  0029A6  0100               	movlb	0	; () banked
 14009  0029A8  21F5               	addwfc	(_n+1)& (0+255),w,b
 14010  0029AA  6E04               	movwf	i2___awmod@divisor+1,c
 14011  0029AC  ECBF  F01A         	call	i2___awmod	;wreg free
 14012  0029B0  C001  F058         	movff	?i2___awmod,_curr
 14013  0029B4  C002  F059         	movff	?i2___awmod+1,_curr+1
 14014                           
 14015                           ;servo.c: 63: return 1;
 14016  0029B8  0E01               	movlw	1
 14017  0029BA  0012               	return	
 14018  0029BC                     i2l5471:
 14019                           
 14020                           ;servo.c: 64: }
 14021                           ;servo.c: 65: return 0;
 14022  0029BC  0E00               	movlw	0
 14023  0029BE  0012               	return	
 14024  0029C0                     __end_of_servoInterruptService:
 14025                           	opt stack 0
 14026                           pclatu	equ	0xFFB
 14027                           pclath	equ	0xFFA
 14028                           tblptru	equ	0xFF8
 14029                           tblptrh	equ	0xFF7
 14030                           tblptrl	equ	0xFF6
 14031                           tablat	equ	0xFF5
 14032                           prodh	equ	0xFF4
 14033                           prodl	equ	0xFF3
 14034                           intcon	equ	0xFF2
 14035                           intcon3	equ	0xFF0
 14036                           postinc0	equ	0xFEE
 14037                           fsr0h	equ	0xFEA
 14038                           fsr0l	equ	0xFE9
 14039                           wreg	equ	0xFE8
 14040                           postdec1	equ	0xFE5
 14041                           fsr1h	equ	0xFE2
 14042                           fsr1l	equ	0xFE1
 14043                           indf2	equ	0xFDF
 14044                           postinc2	equ	0xFDE
 14045                           postdec2	equ	0xFDD
 14046                           fsr2h	equ	0xFDA
 14047                           fsr2l	equ	0xFD9
 14048                           status	equ	0xFD8
 14049                           
 14050 ;; *************** function i2_startTimer *****************
 14051 ;; Defined at:
 14052 ;;		line 76 in file "timer.c"
 14053 ;; Parameters:    Size  Location     Type
 14054 ;;  timer           2    6[COMRAM] int 
 14055 ;;  val             4    8[COMRAM] long 
 14056 ;; Auto vars:     Size  Location     Type
 14057 ;;		None
 14058 ;; Return value:  Size  Location     Type
 14059 ;;                  1    wreg      void 
 14060 ;; Registers used:
 14061 ;;		wreg, status,2, status,0
 14062 ;; Tracked objects:
 14063 ;;		On entry : 0/0
 14064 ;;		On exit  : 0/0
 14065 ;;		Unchanged: 0/0
 14066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14067 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14069 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14070 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14071 ;;Total ram usage:        8 bytes
 14072 ;; Hardware stack levels used:    1
 14073 ;; This function calls:
 14074 ;;		Nothing
 14075 ;; This function is called by:
 14076 ;;		_service
 14077 ;;		_servoInterruptService
 14078 ;; This function uses a non-reentrant model
 14079 ;;
 14080                           
 14081                           	psect	text58
 14082  0039E0                     __ptext58:
 14083                           	opt stack 0
 14084  0039E0                     i2_startTimer:
 14085                           	opt stack 22
 14086                           
 14087                           ;timer.c: 77: switch(timer){
 14088                           
 14089                           ;incstack = 0
 14090  0039E0  D012               	goto	i2l5203
 14091  0039E2                     i2l465:
 14092                           
 14093                           ;timer.c: 79: TMR0H = val>>8;
 14094  0039E2  C00A  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 14095                           
 14096                           ;timer.c: 80: TMR0L = val;
 14097  0039E6  C009  FFD6         	movff	i2startTimer@val,4054	;volatile
 14098                           
 14099                           ;timer.c: 81: T0CON |= 1<<7;
 14100  0039EA  8ED5               	bsf	4053,7,c	;volatile
 14101                           
 14102                           ;timer.c: 82: break;
 14103  0039EC  0012               	return	
 14104  0039EE                     i2l467:
 14105                           
 14106                           ;timer.c: 84: TMR1H = val>>8;
 14107  0039EE  C00A  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 14108                           
 14109                           ;timer.c: 85: TMR1L = val;
 14110  0039F2  C009  FFCE         	movff	i2startTimer@val,4046	;volatile
 14111                           
 14112                           ;timer.c: 86: T1CON |= 1<<0;
 14113  0039F6  80CD               	bsf	4045,0,c	;volatile
 14114                           
 14115                           ;timer.c: 87: break;
 14116  0039F8  0012               	return	
 14117  0039FA                     i2l468:
 14118                           
 14119                           ;timer.c: 89: TMR3H = val>>8;
 14120  0039FA  C00A  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 14121                           
 14122                           ;timer.c: 90: TMR3L = val;
 14123  0039FE  C009  FFB2         	movff	i2startTimer@val,4018	;volatile
 14124                           
 14125                           ;timer.c: 91: T3CON |= 1<<0;
 14126  003A02  80B1               	bsf	4017,0,c	;volatile
 14127                           
 14128                           ;timer.c: 92: }
 14129  003A04  0012               	return	
 14130  003A06                     i2l5203:
 14131  003A06  C007  F00D         	movff	i2startTimer@timer,??i2_startTimer
 14132  003A0A  C008  F00E         	movff	i2startTimer@timer+1,??i2_startTimer+1
 14133                           
 14134                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14135                           ; Switch size 1, requested type "space"
 14136                           ; Number of cases is 1, Range of values is 0 to 0
 14137                           ; switch strategies available:
 14138                           ; Name         Instructions Cycles
 14139                           ; simple_byte            4     3 (average)
 14140                           ;	Chosen strategy is simple_byte
 14141  003A0E  500E               	movf	??i2_startTimer+1,w,c
 14142  003A10  0A00               	xorlw	0	; case 0
 14143  003A12  A4D8               	btfss	status,2,c
 14144  003A14  0012               	return	
 14145                           
 14146                           ; Switch size 1, requested type "space"
 14147                           ; Number of cases is 3, Range of values is 0 to 3
 14148                           ; switch strategies available:
 14149                           ; Name         Instructions Cycles
 14150                           ; simple_byte           10     6 (average)
 14151                           ;	Chosen strategy is simple_byte
 14152  003A16  500D               	movf	??i2_startTimer,w,c
 14153  003A18  0A00               	xorlw	0	; case 0
 14154  003A1A  B4D8               	btfsc	status,2,c
 14155  003A1C  D7E2               	goto	i2l465
 14156  003A1E  0A01               	xorlw	1	; case 1
 14157  003A20  B4D8               	btfsc	status,2,c
 14158  003A22  D7E5               	goto	i2l467
 14159  003A24  0A02               	xorlw	2	; case 3
 14160  003A26  A4D8               	btfss	status,2,c
 14161  003A28  0012               	return	
 14162  003A2A  D7E7               	goto	i2l468
 14163  003A2C                     __end_ofi2_startTimer:
 14164                           	opt stack 0
 14165                           pclatu	equ	0xFFB
 14166                           pclath	equ	0xFFA
 14167                           tblptru	equ	0xFF8
 14168                           tblptrh	equ	0xFF7
 14169                           tblptrl	equ	0xFF6
 14170                           tablat	equ	0xFF5
 14171                           prodh	equ	0xFF4
 14172                           prodl	equ	0xFF3
 14173                           intcon	equ	0xFF2
 14174                           intcon3	equ	0xFF0
 14175                           postinc0	equ	0xFEE
 14176                           fsr0h	equ	0xFEA
 14177                           fsr0l	equ	0xFE9
 14178                           wreg	equ	0xFE8
 14179                           postdec1	equ	0xFE5
 14180                           fsr1h	equ	0xFE2
 14181                           fsr1l	equ	0xFE1
 14182                           indf2	equ	0xFDF
 14183                           postinc2	equ	0xFDE
 14184                           postdec2	equ	0xFDD
 14185                           fsr2h	equ	0xFDA
 14186                           fsr2l	equ	0xFD9
 14187                           status	equ	0xFD8
 14188                           
 14189 ;; *************** function i2_digitalWrite *****************
 14190 ;; Defined at:
 14191 ;;		line 53 in file "iopin.c"
 14192 ;; Parameters:    Size  Location     Type
 14193 ;;  pin             2    6[COMRAM] PTR int 
 14194 ;;		 -> AA_float(4), cylinderDir(4), redirectingServo(4), padServo(4), 
 14195 ;;		 -> conveyorServo(4), cylinderMotor(4), 
 14196 ;;  val             2    8[COMRAM] int 
 14197 ;; Auto vars:     Size  Location     Type
 14198 ;;  digitalWrite    2   13[COMRAM] int 
 14199 ;; Return value:  Size  Location     Type
 14200 ;;                  1    wreg      void 
 14201 ;; Registers used:
 14202 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14203 ;; Tracked objects:
 14204 ;;		On entry : 0/0
 14205 ;;		On exit  : 0/0
 14206 ;;		Unchanged: 0/0
 14207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14208 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14209 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14210 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14211 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14212 ;;Total ram usage:        9 bytes
 14213 ;; Hardware stack levels used:    1
 14214 ;; This function calls:
 14215 ;;		Nothing
 14216 ;; This function is called by:
 14217 ;;		_servoInterruptService
 14218 ;; This function uses a non-reentrant model
 14219 ;;
 14220                           
 14221                           	psect	text59
 14222  002FC0                     __ptext59:
 14223                           	opt stack 0
 14224  002FC0                     i2_digitalWrite:
 14225                           	opt stack 21
 14226                           
 14227                           ;iopin.c: 54: if(pin){
 14228                           
 14229                           ;incstack = 0
 14230  002FC0  5007               	movf	i2digitalWrite@pin,w,c
 14231  002FC2  1008               	iorwf	i2digitalWrite@pin+1,w,c
 14232  002FC4  B4D8               	btfsc	status,2,c
 14233  002FC6  0012               	return	
 14234                           
 14235                           ;iopin.c: 55: int p = 1 << pin[1];
 14236  002FC8  EE20 F002          	lfsr	2,2
 14237  002FCC  5007               	movf	i2digitalWrite@pin,w,c
 14238  002FCE  26D9               	addwf	fsr2l,f,c
 14239  002FD0  5008               	movf	i2digitalWrite@pin+1,w,c
 14240  002FD2  22DA               	addwfc	fsr2h,f,c
 14241  002FD4  50DF               	movf	indf2,w,c
 14242  002FD6  6E0B               	movwf	??i2_digitalWrite& (0+255),c
 14243  002FD8  0E01               	movlw	1
 14244  002FDA  6E0C               	movwf	(??i2_digitalWrite+1)& (0+255),c
 14245  002FDC  0E00               	movlw	0
 14246  002FDE  6E0D               	movwf	(??i2_digitalWrite+2)& (0+255),c
 14247  002FE0  2A0B               	incf	??i2_digitalWrite,f,c
 14248  002FE2  D003               	goto	i2u504_44
 14249  002FE4                     i2u504_45:
 14250  002FE4  90D8               	bcf	status,0,c
 14251  002FE6  360C               	rlcf	??i2_digitalWrite+1,f,c
 14252  002FE8  360D               	rlcf	??i2_digitalWrite+2,f,c
 14253  002FEA                     i2u504_44:
 14254  002FEA  2E0B               	decfsz	??i2_digitalWrite,f,c
 14255  002FEC  D7FB               	goto	i2u504_45
 14256  002FEE  C00C  F00E         	movff	??i2_digitalWrite+1,i2digitalWrite@p
 14257  002FF2  C00D  F00F         	movff	??i2_digitalWrite+2,i2digitalWrite@p+1
 14258                           
 14259                           ;iopin.c: 56: if(val == 0){
 14260  002FF6  5009               	movf	i2digitalWrite@val,w,c
 14261  002FF8  100A               	iorwf	i2digitalWrite@val+1,w,c
 14262  002FFA  A4D8               	btfss	status,2,c
 14263  002FFC  D02B               	goto	i2l5189
 14264                           
 14265                           ;iopin.c: 57: p ^= 0xff;
 14266  002FFE  0EFF               	movlw	255
 14267  003000  1A0E               	xorwf	i2digitalWrite@p,f,c
 14268                           
 14269                           ;iopin.c: 58: }
 14270                           ;iopin.c: 60: switch(pin[0]){
 14271  003002  D028               	goto	i2l5189
 14272  003004                     i2l5165:
 14273  003004  0409               	decf	i2digitalWrite@val,w,c
 14274  003006  100A               	iorwf	i2digitalWrite@val+1,w,c
 14275  003008  A4D8               	btfss	status,2,c
 14276  00300A  D003               	goto	i2l5169
 14277  00300C  500E               	movf	i2digitalWrite@p,w,c
 14278  00300E  1289               	iorwf	3977,f,c	;volatile
 14279  003010  0012               	return	
 14280  003012                     i2l5169:
 14281                           
 14282                           ;iopin.c: 62: else LATA &= p;
 14283  003012  500E               	movf	i2digitalWrite@p,w,c
 14284  003014  1689               	andwf	3977,f,c	;volatile
 14285                           
 14286                           ;iopin.c: 63: break;
 14287  003016  0012               	return	
 14288  003018                     i2l5171:
 14289  003018  0409               	decf	i2digitalWrite@val,w,c
 14290  00301A  100A               	iorwf	i2digitalWrite@val+1,w,c
 14291  00301C  A4D8               	btfss	status,2,c
 14292  00301E  D003               	goto	i2l5175
 14293  003020  500E               	movf	i2digitalWrite@p,w,c
 14294  003022  128A               	iorwf	3978,f,c	;volatile
 14295  003024  0012               	return	
 14296  003026                     i2l5175:
 14297                           
 14298                           ;iopin.c: 65: else LATB &= p;
 14299  003026  500E               	movf	i2digitalWrite@p,w,c
 14300  003028  168A               	andwf	3978,f,c	;volatile
 14301                           
 14302                           ;iopin.c: 66: break;
 14303  00302A  0012               	return	
 14304  00302C                     i2l5177:
 14305  00302C  0409               	decf	i2digitalWrite@val,w,c
 14306  00302E  100A               	iorwf	i2digitalWrite@val+1,w,c
 14307  003030  A4D8               	btfss	status,2,c
 14308  003032  D003               	goto	i2l5181
 14309  003034  500E               	movf	i2digitalWrite@p,w,c
 14310  003036  128B               	iorwf	3979,f,c	;volatile
 14311  003038  0012               	return	
 14312  00303A                     i2l5181:
 14313                           
 14314                           ;iopin.c: 68: else LATC &= p;
 14315  00303A  500E               	movf	i2digitalWrite@p,w,c
 14316  00303C  168B               	andwf	3979,f,c	;volatile
 14317                           
 14318                           ;iopin.c: 69: break;
 14319  00303E  0012               	return	
 14320  003040                     i2l5183:
 14321  003040  0409               	decf	i2digitalWrite@val,w,c
 14322  003042  100A               	iorwf	i2digitalWrite@val+1,w,c
 14323  003044  A4D8               	btfss	status,2,c
 14324  003046  D003               	goto	i2l5187
 14325  003048  500E               	movf	i2digitalWrite@p,w,c
 14326  00304A  128C               	iorwf	3980,f,c	;volatile
 14327  00304C  0012               	return	
 14328  00304E                     i2l5187:
 14329                           
 14330                           ;iopin.c: 71: else LATD &= p;
 14331  00304E  500E               	movf	i2digitalWrite@p,w,c
 14332  003050  168C               	andwf	3980,f,c	;volatile
 14333                           
 14334                           ;iopin.c: 72: }
 14335  003052  0012               	return	
 14336  003054                     i2l5189:
 14337  003054  C007  FFD9         	movff	i2digitalWrite@pin,fsr2l
 14338  003058  C008  FFDA         	movff	i2digitalWrite@pin+1,fsr2h
 14339  00305C  CFDE F00B          	movff	postinc2,??i2_digitalWrite
 14340  003060  CFDD F00C          	movff	postdec2,??i2_digitalWrite+1
 14341                           
 14342                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14343                           ; Switch size 1, requested type "space"
 14344                           ; Number of cases is 1, Range of values is 0 to 0
 14345                           ; switch strategies available:
 14346                           ; Name         Instructions Cycles
 14347                           ; simple_byte            4     3 (average)
 14348                           ;	Chosen strategy is simple_byte
 14349  003064  500C               	movf	??i2_digitalWrite+1,w,c
 14350  003066  0A00               	xorlw	0	; case 0
 14351  003068  A4D8               	btfss	status,2,c
 14352  00306A  0012               	return	
 14353                           
 14354                           ; Switch size 1, requested type "space"
 14355                           ; Number of cases is 4, Range of values is 0 to 3
 14356                           ; switch strategies available:
 14357                           ; Name         Instructions Cycles
 14358                           ; simple_byte           13     7 (average)
 14359                           ;	Chosen strategy is simple_byte
 14360  00306C  500B               	movf	??i2_digitalWrite,w,c
 14361  00306E  0A00               	xorlw	0	; case 0
 14362  003070  B4D8               	btfsc	status,2,c
 14363  003072  D7C8               	goto	i2l5165
 14364  003074  0A01               	xorlw	1	; case 1
 14365  003076  B4D8               	btfsc	status,2,c
 14366  003078  D7CF               	goto	i2l5171
 14367  00307A  0A03               	xorlw	3	; case 2
 14368  00307C  B4D8               	btfsc	status,2,c
 14369  00307E  D7D6               	goto	i2l5177
 14370  003080  0A01               	xorlw	1	; case 3
 14371  003082  A4D8               	btfss	status,2,c
 14372  003084  0012               	return	
 14373  003086  D7DC               	goto	i2l5183
 14374  003088                     __end_ofi2_digitalWrite:
 14375                           	opt stack 0
 14376                           pclatu	equ	0xFFB
 14377                           pclath	equ	0xFFA
 14378                           tblptru	equ	0xFF8
 14379                           tblptrh	equ	0xFF7
 14380                           tblptrl	equ	0xFF6
 14381                           tablat	equ	0xFF5
 14382                           prodh	equ	0xFF4
 14383                           prodl	equ	0xFF3
 14384                           intcon	equ	0xFF2
 14385                           intcon3	equ	0xFF0
 14386                           postinc0	equ	0xFEE
 14387                           fsr0h	equ	0xFEA
 14388                           fsr0l	equ	0xFE9
 14389                           wreg	equ	0xFE8
 14390                           postdec1	equ	0xFE5
 14391                           fsr1h	equ	0xFE2
 14392                           fsr1l	equ	0xFE1
 14393                           indf2	equ	0xFDF
 14394                           postinc2	equ	0xFDE
 14395                           postdec2	equ	0xFDD
 14396                           fsr2h	equ	0xFDA
 14397                           fsr2l	equ	0xFD9
 14398                           status	equ	0xFD8
 14399                           
 14400 ;; *************** function i2___awmod *****************
 14401 ;; Defined at:
 14402 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 14403 ;; Parameters:    Size  Location     Type
 14404 ;;  dividend        2    0[COMRAM] int 
 14405 ;;  divisor         2    2[COMRAM] int 
 14406 ;; Auto vars:     Size  Location     Type
 14407 ;;  __awmod         1    5[COMRAM] unsigned char 
 14408 ;;  __awmod         1    4[COMRAM] unsigned char 
 14409 ;; Return value:  Size  Location     Type
 14410 ;;                  2    0[COMRAM] int 
 14411 ;; Registers used:
 14412 ;;		wreg, status,2, status,0
 14413 ;; Tracked objects:
 14414 ;;		On entry : 0/0
 14415 ;;		On exit  : 0/0
 14416 ;;		Unchanged: 0/0
 14417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14418 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14419 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14421 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14422 ;;Total ram usage:        6 bytes
 14423 ;; Hardware stack levels used:    1
 14424 ;; This function calls:
 14425 ;;		Nothing
 14426 ;; This function is called by:
 14427 ;;		_servoInterruptService
 14428 ;; This function uses a non-reentrant model
 14429 ;;
 14430                           
 14431                           	psect	text60
 14432  00357E                     __ptext60:
 14433                           	opt stack 0
 14434  00357E                     i2___awmod:
 14435                           	opt stack 21
 14436                           
 14437                           ;incstack = 0
 14438  00357E  0E00               	movlw	0
 14439  003580  6E06               	movwf	i2___awmod@sign,c
 14440  003582  AE02               	btfss	i2___awmod@dividend+1,7,c
 14441  003584  D006               	goto	i2l5217
 14442  003586  6C01               	negf	i2___awmod@dividend,c
 14443  003588  1E02               	comf	i2___awmod@dividend+1,f,c
 14444  00358A  B0D8               	btfsc	status,0,c
 14445  00358C  2A02               	incf	i2___awmod@dividend+1,f,c
 14446  00358E  0E01               	movlw	1
 14447  003590  6E06               	movwf	i2___awmod@sign,c
 14448  003592                     i2l5217:
 14449  003592  AE04               	btfss	i2___awmod@divisor+1,7,c
 14450  003594  D004               	goto	i2l5221
 14451  003596  6C03               	negf	i2___awmod@divisor,c
 14452  003598  1E04               	comf	i2___awmod@divisor+1,f,c
 14453  00359A  B0D8               	btfsc	status,0,c
 14454  00359C  2A04               	incf	i2___awmod@divisor+1,f,c
 14455  00359E                     i2l5221:
 14456  00359E  5003               	movf	i2___awmod@divisor,w,c
 14457  0035A0  1004               	iorwf	i2___awmod@divisor+1,w,c
 14458  0035A2  B4D8               	btfsc	status,2,c
 14459  0035A4  D018               	goto	i2l5237
 14460  0035A6  0E01               	movlw	1
 14461  0035A8  6E05               	movwf	i2___awmod@counter,c
 14462  0035AA  D004               	goto	i2l5227
 14463  0035AC                     i2l5225:
 14464  0035AC  90D8               	bcf	status,0,c
 14465  0035AE  3603               	rlcf	i2___awmod@divisor,f,c
 14466  0035B0  3604               	rlcf	i2___awmod@divisor+1,f,c
 14467  0035B2  2A05               	incf	i2___awmod@counter,f,c
 14468  0035B4                     i2l5227:
 14469  0035B4  AE04               	btfss	i2___awmod@divisor+1,7,c
 14470  0035B6  D7FA               	goto	i2l5225
 14471  0035B8                     i2l5229:
 14472  0035B8  5003               	movf	i2___awmod@divisor,w,c
 14473  0035BA  5C01               	subwf	i2___awmod@dividend,w,c
 14474  0035BC  5004               	movf	i2___awmod@divisor+1,w,c
 14475  0035BE  5802               	subwfb	i2___awmod@dividend+1,w,c
 14476  0035C0  A0D8               	btfss	status,0,c
 14477  0035C2  D004               	goto	i2l5233
 14478  0035C4  5003               	movf	i2___awmod@divisor,w,c
 14479  0035C6  5E01               	subwf	i2___awmod@dividend,f,c
 14480  0035C8  5004               	movf	i2___awmod@divisor+1,w,c
 14481  0035CA  5A02               	subwfb	i2___awmod@dividend+1,f,c
 14482  0035CC                     i2l5233:
 14483  0035CC  90D8               	bcf	status,0,c
 14484  0035CE  3204               	rrcf	i2___awmod@divisor+1,f,c
 14485  0035D0  3203               	rrcf	i2___awmod@divisor,f,c
 14486  0035D2  2E05               	decfsz	i2___awmod@counter,f,c
 14487  0035D4  D7F1               	goto	i2l5229
 14488  0035D6                     i2l5237:
 14489  0035D6  5006               	movf	i2___awmod@sign,w,c
 14490  0035D8  B4D8               	btfsc	status,2,c
 14491  0035DA  D004               	goto	i2l5241
 14492  0035DC  6C01               	negf	i2___awmod@dividend,c
 14493  0035DE  1E02               	comf	i2___awmod@dividend+1,f,c
 14494  0035E0  B0D8               	btfsc	status,0,c
 14495  0035E2  2A02               	incf	i2___awmod@dividend+1,f,c
 14496  0035E4                     i2l5241:
 14497  0035E4  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 14498  0035E8  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 14499  0035EC  0012               	return	
 14500  0035EE                     __end_ofi2___awmod:
 14501                           	opt stack 0
 14502                           pclatu	equ	0xFFB
 14503                           pclath	equ	0xFFA
 14504                           tblptru	equ	0xFF8
 14505                           tblptrh	equ	0xFF7
 14506                           tblptrl	equ	0xFF6
 14507                           tablat	equ	0xFF5
 14508                           prodh	equ	0xFF4
 14509                           prodl	equ	0xFF3
 14510                           intcon	equ	0xFF2
 14511                           intcon3	equ	0xFF0
 14512                           postinc0	equ	0xFEE
 14513                           fsr0h	equ	0xFEA
 14514                           fsr0l	equ	0xFE9
 14515                           wreg	equ	0xFE8
 14516                           postdec1	equ	0xFE5
 14517                           fsr1h	equ	0xFE2
 14518                           fsr1l	equ	0xFE1
 14519                           indf2	equ	0xFDF
 14520                           postinc2	equ	0xFDE
 14521                           postdec2	equ	0xFDD
 14522                           fsr2h	equ	0xFDA
 14523                           fsr2l	equ	0xFD9
 14524                           status	equ	0xFD8
 14525                           pclatu	equ	0xFFB
 14526                           pclath	equ	0xFFA
 14527                           tblptru	equ	0xFF8
 14528                           tblptrh	equ	0xFF7
 14529                           tblptrl	equ	0xFF6
 14530                           tablat	equ	0xFF5
 14531                           prodh	equ	0xFF4
 14532                           prodl	equ	0xFF3
 14533                           intcon	equ	0xFF2
 14534                           intcon3	equ	0xFF0
 14535                           postinc0	equ	0xFEE
 14536                           fsr0h	equ	0xFEA
 14537                           fsr0l	equ	0xFE9
 14538                           wreg	equ	0xFE8
 14539                           postdec1	equ	0xFE5
 14540                           fsr1h	equ	0xFE2
 14541                           fsr1l	equ	0xFE1
 14542                           indf2	equ	0xFDF
 14543                           postinc2	equ	0xFDE
 14544                           postdec2	equ	0xFDD
 14545                           fsr2h	equ	0xFDA
 14546                           fsr2l	equ	0xFD9
 14547                           status	equ	0xFD8
 14548                           
 14549                           	psect	rparam
 14550  0000                     pclatu	equ	0xFFB
 14551                           pclath	equ	0xFFA
 14552                           tblptru	equ	0xFF8
 14553                           tblptrh	equ	0xFF7
 14554                           tblptrl	equ	0xFF6
 14555                           tablat	equ	0xFF5
 14556                           prodh	equ	0xFF4
 14557                           prodl	equ	0xFF3
 14558                           intcon	equ	0xFF2
 14559                           intcon3	equ	0xFF0
 14560                           postinc0	equ	0xFEE
 14561                           fsr0h	equ	0xFEA
 14562                           fsr0l	equ	0xFE9
 14563                           wreg	equ	0xFE8
 14564                           postdec1	equ	0xFE5
 14565                           fsr1h	equ	0xFE2
 14566                           fsr1l	equ	0xFE1
 14567                           indf2	equ	0xFDF
 14568                           postinc2	equ	0xFDE
 14569                           postdec2	equ	0xFDD
 14570                           fsr2h	equ	0xFDA
 14571                           fsr2l	equ	0xFD9
 14572                           status	equ	0xFD8
 14573                           
 14574                           	psect	temp
 14575  00005D                     btemp:
 14576                           	opt stack 0
 14577  00005D                     	ds	1
 14578  0000                     int$flags	set	btemp
 14579                           pclatu	equ	0xFFB
 14580                           pclath	equ	0xFFA
 14581                           tblptru	equ	0xFF8
 14582                           tblptrh	equ	0xFF7
 14583                           tblptrl	equ	0xFF6
 14584                           tablat	equ	0xFF5
 14585                           prodh	equ	0xFF4
 14586                           prodl	equ	0xFF3
 14587                           intcon	equ	0xFF2
 14588                           intcon3	equ	0xFF0
 14589                           postinc0	equ	0xFEE
 14590                           fsr0h	equ	0xFEA
 14591                           fsr0l	equ	0xFE9
 14592                           wreg	equ	0xFE8
 14593                           postdec1	equ	0xFE5
 14594                           fsr1h	equ	0xFE2
 14595                           fsr1l	equ	0xFE1
 14596                           indf2	equ	0xFDF
 14597                           postinc2	equ	0xFDE
 14598                           postdec2	equ	0xFDD
 14599                           fsr2h	equ	0xFDA
 14600                           fsr2l	equ	0xFD9
 14601                           status	equ	0xFD8


Data Sizes:
    Strings     319
    Constant    174
    Data        59
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     58      92
    BANK0           128    110     118
    BANK1           256     56     118
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_22(CODE[17]), STR_21(CODE[18]), STR_20(CODE[17]), STR_19(CODE[18]), 
		 -> STR_18(CODE[17]), STR_17(CODE[19]), STR_16(CODE[17]), STR_15(CODE[18]), 
		 -> STR_14(CODE[17]), STR_13(CODE[18]), STR_12(CODE[17]), STR_11(CODE[18]), 
		 -> STR_10(CODE[8]), STR_9(CODE[15]), STR_8(CODE[14]), STR_7(CODE[17]), 
		 -> STR_6(CODE[17]), STR_5(CODE[8]), STR_4(CODE[2]), STR_3(CODE[4]), 
		 -> STR_2(CODE[6]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    initServo@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    servos	PTR int [4] size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    saveNewRun@data	PTR int  size(2) Largest target is 14
		 -> debug@run(BANK1[14]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 4
		 -> AA_float(COMRAM[4]), cylinderDir(BANK1[4]), redirectingServo(BANK1[4]), padServo(BANK1[4]), 
		 -> conveyorServo(BANK1[4]), cylinderMotor(BANK1[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 4
		 -> padPin2(BANK1[4]), padPin1(COMRAM[4]), cylinderDir(BANK1[4]), 

    sp__readPastRun	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    debug@run_286	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 


Critical Paths under _main in COMRAM

    _main->___almod
    _sortBattery->___ftdiv
    _lcdHome->_lcdInst
    _angleToPulse->___ftdiv
    ___ftdiv->___altoft
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _debug->_eepromRead
    _saveNewRun->_eepromRead
    _eepromWrite->_eepromRead
    _readPastRun->_eepromRead
    _eepromRead->___wmul
    _printf->___almod
    _printf->_eepromRead
    _lcdNewline->_lcdInst
    ___wmul->___awdiv
    ___ftmul->___ftdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftdiv
    ___ftadd->___ftdiv
    ___ftge->___awtoft
    _lcdClear->_lcdInst
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    ___lwmod->_eepromRead
    ___almod->___aldiv

Critical Paths under _service in COMRAM

    _service->_servoInterruptService
    _servoInterruptService->i2_digitalWrite
    i2_startTimer->i2___awmod
    i2_digitalWrite->i2___awmod

Critical Paths under _main in BANK0

    _main->_showInterface
    _sortBattery->_printf
    _showInterface->_showRunMenu
    _showRunTime->_printf
    _showRunStats->_printf
    _showRunSelect->_printf
    _showRunMenu->_printf
    _showMainMenu->_printf
    _showDateTime->_printf
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    _debug->_printf
    _saveNewRun->_eepromWrite
    _printf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___ftdiv
    ___fttol->___ftadd
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0  677015
                                             31 BANK1     25    25      0
                            ___aldiv
                            ___almod
                              _debug
                        _digitalRead
                       _digitalWrite
                            _initLCD
                          _initServo
                          _initTimer
                           _lcdClear
                            _lcdHome
                           _pinSetup
                             _printf
                         _readKeypad
                      _showInterface
                        _sortBattery
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         33    33      0  114008
                                            107 BANK0      2     2      0
                                              0 BANK1     31    31      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                         _analogRead
                        _digitalRead
                       _digitalWrite
                           _lcdClear
                             _printf
                         _readKeypad
                           _setAngle
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     5      4    1748
                                             34 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          4     2      2     386
                                             34 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     185
                                             34 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        1     1      0  392603
                                            109 BANK0      1     1      0
                       _showDateTime
                       _showMainMenu
                        _showRunMenu
                      _showRunSelect
                       _showRunStats
                        _showRunTime
 ---------------------------------------------------------------------------------
 (2) _showRunTime                                          0     0      0   65312
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunStats                                         0     0      0   65312
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunSelect                                        1     1      0   65501
                                            107 BANK0      1     1      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunMenu                                          2     2      0   65470
                                            107 BANK0      2     2      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showMainMenu                                         1     1      0   65439
                                            107 BANK0      1     1      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showDateTime                                         0     0      0   65312
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (1) _lcdHome                                              0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initServo                                           10     6      4   24017
                                             94 BANK0     10     6      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _startTimer                                           8     2      6     690
                                             34 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   22459
                                             84 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   21152
                                             61 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3580
                                             52 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3025
                                             42 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    3173
                                             42 COMRAM    10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            4     2      2     214
                                             34 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _debug                                               27    27      0   76420
                                            107 BANK0      2     2      0
                                              0 BANK1     25    25      0
                            ___lwmod
                         _eepromRead
                            _initLCD
                           _lcdClear
                           _pinSetup
                             _printf
                         _readKeypad
                        _readPastRun
                         _saveNewRun
 ---------------------------------------------------------------------------------
 (2) _saveNewRun                                           6     4      2    4967
                                              9 BANK0      6     4      2
                             ___wmul
                         _eepromRead
                        _eepromWrite
 ---------------------------------------------------------------------------------
 (3) _eepromWrite                                          9     3      6     435
                                              0 BANK0      9     3      6
                             ___wmul (ARG)
                         _eepromRead (ARG)
 ---------------------------------------------------------------------------------
 (2) _readPastRun                                         18    16      2    4569
                                              0 BANK0     18    16      2
                             ___wmul
                         _eepromRead
 ---------------------------------------------------------------------------------
 (3) _eepromRead                                           4     0      4     524
                                             54 COMRAM     4     0      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      34
                                             34 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _printf                                              47    37     10   65083
                                             61 BANK0     46    36     10
                            ___aldiv (ARG)
                            ___almod (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                         _eepromRead (ARG)
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   14293
                                             24 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     421
                                             38 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             34 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   14014
                                             24 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3736
                                             48 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5804
                                              9 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2071
                                             34 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1985
                                             40 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                             34 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     827
                                             34 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2763
                                             42 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                             47 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1011
                                             34 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     756
                                             46 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5057
                                             46 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4539
                                             34 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2584
                                             34 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     142
                                             34 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1738
                                             46 COMRAM     9     3      6
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _lcdClear                                             0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             38 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     195
                                             36 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             34 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                              0 BANK0      5     1      4
                         _eepromRead (ARG)
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     424
                                             48 COMRAM    10     2      8
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     556
                                             34 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             15    15      0    1449
                                             19 COMRAM    15    15      0
              _servoInterruptService
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                                4     4      0    1168
                                             15 COMRAM     4     4      0
                          i2___awmod
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) i2_startTimer                                         8     2      6     258
                                              6 COMRAM     8     2      6
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     5      4     458
                                              6 COMRAM     9     5      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     452
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
   ___almod
     ___aldiv (ARG)
   _debug
     ___lwmod
       _eepromRead (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _eepromRead
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdClear
       _lcdInst
         _lcdNibble
     _pinSetup
     _printf
       ___aldiv (ARG)
       ___almod (ARG)
         ___aldiv (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _eepromRead (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _readPastRun
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _eepromRead
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _saveNewRun
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _eepromRead
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _eepromWrite
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _eepromRead (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _digitalRead
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _initTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _lcdHome
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___aldiv (ARG)
     ___almod (ARG)
       ___aldiv (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___awtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _eepromRead (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _readKeypad
   _showInterface
     _showDateTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _eepromRead (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showMainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _eepromRead (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _eepromRead (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _eepromRead (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _eepromRead (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
         ___almod (ARG)
           ___aldiv (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _eepromRead (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
       ___awtoft (ARG)
         ___ftpack
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
       ___almod (ARG)
         ___aldiv (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _eepromRead (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _startTimer

 _service (ROOT)
   _servoInterruptService
     i2___awmod
     i2_digitalWrite
       i2___awmod (ARG)
     i2_startTimer
       i2___awmod (ARG)
   i2_startTimer
     i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     38      76       7       46.1%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     6E      76       5       92.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3A      5C       1       73.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     148      34        0.0%
DATA                 0      0     148       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Mar 31 14:47:57 2017

                  ___altoft@exp 0033                               _n 00F4               main@cylinderStart 0132  
          main@cylinderBackward 012E                   ___altoft@sign 0034                     _sortBattery 0E0A  
                showRunSelect@k 00EB                    ___awdiv@sign 002E             ___wmul@multiplicand 0033  
                   __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000  
                  __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000                     __CFG_OSC$HS 000000  
              _redirectingServo 0172                    ___ftadd@exp1 00AD                    ___ftadd@exp2 00AC  
           main@cylinderForward 012C                    ___ftadd@sign 00AB                             l160 199E  
                           l401 2D56                             l170 1ADA                             l154 1714  
                           l236 3C7C                             l404 38A2                             l148 214E  
                           l407 38E0                             l191 11CC                             l159 1996  
                           l272 3BFC                             l345 2AA4                             l370 3B08  
                           l275 3C08                             l632 35F2                             l465 394A  
                           l458 3A70                             l467 3956                             l812 0818  
                           l468 3962                             l821 0A04                             l772 0996  
               ??_showInterface 003B                    __CFG_CPB$OFF 000000                             _PEN 007E2A  
                  __CFG_CPD$OFF 000000                             _SEN 007E28                             _n_C 0152  
                  ___awmod@sign 0028                             wreg 000FE8                    __CFG_LVP$OFF 000000  
                  ___ftdiv@cntr 0083                    ___ftdiv@sign 0088                    __CFG_WDT$OFF 000000  
                          l1131 1B44                            l1108 3116                            l1205 3C5E  
                          l1135 1B7E                            l1137 1BA6                            l1146 1C7C  
                          l1155 1CA6                            l1076 2792                            l1180 266A  
                          l1173 25DC                            l1318 37E0                            l1174 2604  
                          l1166 2880                            l1255 3484                            l1265 36AC  
                          l6111 353C                            l6103 3522                            l6015 21C4  
                          l6113 3544                            l6033 2230                            l6009 218A  
                          l7001 3202                            l6115 3548                            l6123 3566  
                          l6107 352E                            l6043 226E                            l6301 272A  
                          l6029 2212                            l5503 2E82                            l6223 25A2  
                          l6071 33CA                            l6127 3574                            l6119 355C  
                          l6039 2250                            l6207 3CE4                            l7007 3266  
                          l7031 2F64                            l7023 2F4A                            l5505 2E8E  
                          l6313 2758                            l6217 2576                            l6073 33D2  
                          l6065 33B4                            l7105 3BF0                            l7121 3942  
                          l7113 391C                            l7041 2F86                            l7025 2F50  
                          l5523 2EE6                            l5515 2EC2                            l5507 2E92  
                          l6323 2780                            l6091 340A                            l6083 33F2  
                          l6075 33D6                            l6059 33A4                            l6171 1434  
                          l7131 3748                            l7051 29C2                            l7035 2F72  
                          l7019 2F3C                            l7043 2F8C                            l6413 32A4  
                          l6325 278C                            l6317 2768                            l6253 2630  
                          l6157 1F5C                            l6149 1E94                            l6181 1504  
                          l7213 2026                            l6405 3B48                            l7037 2F78  
                          l7029 2F5E                            l5519 2ED0                            l5551 31AC  
                          l5543 3178                            l5535 3152                            l6423 3300  
                          l6511 369E                            l6503 366A                            l6263 2658  
                          l6087 33FC                            l6335 34B8                            l7143 3782  
                          l7063 2A46                            l7055 29EE                            l5545 3184  
                          l6417 32D4                            l6505 3676                            l6273 269A  
                          l6265 2664                            l6257 2640                            l6177 14DE  
                          l6601 0224                            l7209 2010                            l7225 20A4  
                          l6337 34C4                            l7081 2DC4                            l7161 3840  
                          l7153 381A                            l7321 0ECA                            l5491 2E48  
                          l5547 3188                            l5555 31BA                            l5539 3166  
                          l6507 367A                            l6195 16E2                            l6603 023E  
                          l7235 20EC                            l7219 2064                            l6355 2808  
                          l7171 3B90                            l7059 2A1A                            l5901 30CE  
                          l6437 2440                            l6517 384C                            l6293 26FA  
                          l6189 1638                            l6621 02CC                            l6613 026E  
                          l6541 004E                            l7245 213C                            l4933 3A2E  
                          l6349 27D6                            l7077 2D6E                            l7085 2DEC  
                          l7253 360C                            l7069 2A72                            l5559 31D0  
                          l6455 24D2                            l6519 3858                            l6279 26B8  
                          l6711 06A2                            l6703 062A                            l6631 0312  
                          l6607 0256                            l6615 02B2                            l6551 0088  
                          l6535 0022                            l7239 2102                            l4951 3A4C  
                          l6375 2856                            l7263 3632                            l7271 3642  
                          l7247 35EE                            l7335 0FA0                            l5497 2E60  
                          l7193 37D2                            l7185 379C                            l5905 30E4  
                          l6393 39B6                            l6473 2538                            l6465 2502  
                          l6721 06DE                            l6545 0058                            l4945 3A44  
                          l7257 3616                            l7345 1088                            l7441 17BA  
                          l7187 37A8                            l5907 3102                            l6467 2512  
                          l6459 24E6                            l6483 3436                            l6723 06F4  
                          l6707 067A                            l6571 0176                            l6539 0038  
                          l4939 3A38                            l7283 2BA0                            l7179 3BC0  
                          l7355 111C                            l7347 10B6                            l7189 37AE  
                          l5909 310C                            l5941 1B52                            l6469 251C  
                          l6485 3442                            l6821 0AC8                            l6805 0A76  
                          l6741 07D8                            l6733 073E                            l6717 06D0  
                          l6661 0464                            l6581 0198                            l6565 0124  
                          l6901 0DEA                            l4965 396E                            l7373 119C  
                          l7365 116C                            l6495 3476                            l6487 3446  
                          l6807 0A7C                            l6751 081C                            l6727 0702  
                          l6671 04F4                            l6663 0494                            l6655 0428  
                          l6647 03C0                            l6591 01E6                            l6575 0186  
                          l6559 00FC                            l7199 1FAC                            l7287 2BC8  
                          l7391 1242                            l7383 11DC                            l7455 17FE  
                          l5953 1B9C                            l6841 0B48                            l6761 0892  
                          l6745 07E6                            l6729 0716                            l6665 04AA  
                          l6593 01F2                            l6577 018C                            l6569 0160  
                          l7289 2BCE                            l7385 1204                            l7473 1A40  
                          l5971 1C1A                            l5963 1BDE                            l5947 1B8C  
                          l6851 0BAC                            l6819 0AC2                            l6835 0B0E  
                          l6747 07FA                            l6739 07CA                            l6691 05E4  
                          l6675 051A                            l6659 044E                            l6595 01F8  
                          l6587 01C0                            l6579 0192                            l5893 3098  
                          l5981 1C62                            l5973 1C28                            l6845 0B78  
                          l6837 0B20                            l6781 09BE                            l6773 0988  
                          l6757 0840                            l6685 0578                            l6597 0210  
                          l7397 1272                            l7477 1A58                            l7469 19A6  
                          l5983 1C70                            l5975 1C34                            l6871 0C5C  
                          l6863 0C26                            l6767 096C                            l7487 1A7C  
                          l5897 30A6                            l5969 1C0C                            l6865 0C30  
                          l6857 0BE4                            l6769 097A                            l6689 05DE  
                          l5899 30B0                            l6883 0C9E                            l6859 0BEE  
                          l6795 0A26                            l5989 1CD0                            l6877 0C78  
                          l5999 1D1E                            l6887 0CC6                            l6895 0DBA  
                          l6879 0C84                            l6799 0A4E                            l6889 0D46  
                          l6897 0DCC                            l6985 2CD6                            l6899 0DD4  
                          l6997 31EC                            l6989 2CEC                            _EEIF 007D0C  
                          STR_1 FFFC                            STR_2 FFF2                            STR_3 FFF8  
                          STR_4 FFD2                            STR_5 FFEA                            STR_6 FFB4  
                          STR_7 FFA3                            STR_8 FFD4                            STR_9 FFC5  
                          _LATA 000F89                            _LATB 000F8A                            _LATC 000F8B  
                          _LATD 000F8C                            _LATE 000F8D                            u6011 21A0  
                  printf@tmpval 00D7                            _PEIE 007F96                            _RCEN 007E2B  
                          u6271 255A                            u7090 0810                            u8050 1976  
                          u6291 2586                            u6451 27B8                            u7420 38B2  
                          u8060 1978                            u6471 27EA                            u8207 129C  
                          u7504 2F22                            u6561 241C                            u8217 3C80  
                          u7505 2F1C                            u8227 3A7C                            u8147 18A6  
                          u6580 2466                            u7428 38B6                            u8237 3AB0  
                          u5781 1AF2                            u7445 38F4                            u8157 0E46  
                          u7446 38F6                            u8247 3C94                            u5791 1B10  
                          u8167 0EFC                            u8257 3CA6                            u6585 245C  
                          u8177 101A                            u8267 36D6                            u8187 122A  
                          u7564 29DE                            u8277 36E4                            u7565 29DA  
                          u8197 1262                            u6870 0358                            u7574 2A0A  
                          u8287 370A                            u5991 2166                            u7575 2A06  
                          u7584 2A36                            u8297 3718                            u7585 2A32  
                          u7594 2A62                            u6875 034C                            u7595 2A5E  
                          _RSEN 007E29                            _n_AA 0150                            _n_9V 014E  
                          _main 1708                            _curr 0058                    ___ftpack@arg 0023  
                          _keys FEA7                    ___ftpack@exp 0026                            _time 0148  
                          fsr0h 000FEA                            fsr1h 000FE2                            fsr2h 000FDA  
                          fsr0l 000FE9                            indf2 000FDF                            fsr1l 000FE1  
                          fsr2l 000FD9                            btemp 005D                 ??_showRunSelect 003B  
                          prodh 000FF4                            prodl 000FF3                            start 000E  
                 __CFG_IESO$OFF 000000                   __CFG_MCLRE$ON 000000                    ___ftmul@cntr 0096  
                  ___param_bank 000000                    ___ftmul@sign 0097                    ___fttol@exp1 00BC  
                  ___fttol@lval 00B8            __end_ofi2_startTimer 3A2C                    ?_readPastRun 0080  
          __end_of_angleToPulse 2406                 __end_of___aldiv 2EF8                 __end_of___almod 31E2  
                         ?_main 0001                           _ACKEN 007E2C                           _ACKDT 007E2D  
               __end_of___awdiv 3414                           _EEADR 000FA9                 __end_of___ftadd 1D44  
                         STR_10 FFE2                           STR_11 FEE4                           STR_12 FF92  
                         STR_20 FF3D                           STR_21 FF1A                           STR_13 FED2  
                         STR_22 FF81                           STR_14 FF5F                           STR_23 FF2C  
                         STR_15 FEF6                           STR_16 FF4E                           STR_17 FEBF  
                         STR_18 FF70                           STR_19 FF08                 __end_of___awmod 357E  
               __end_of___ftdiv 28B4         ??_servoInterruptService 0010                 __end_of___ftneg 3C6C  
               __end_of___lldiv 3496                 __end_of___ftmul 22AE                           _T0CON 000FD5  
               ___awdiv@divisor 002B                           _T1CON 000FCD                 __end_of___llmod 36BE  
               __end_of___ftsub 39E0                 __end_of___fttol 254A                           _T3CON 000FB1  
               __end_of___lwmod 37EA                           i2l210 2B54                           i2l205 2B58  
                         i2l206 2B20                           i2l207 2B32                           i2l465 39E2  
                         i2l467 39EE                           i2l468 39FA                 ___awdiv@counter 002D  
                         _TMR0H 000FD7                           _TMR1H 000FCF                           _TMR0L 000FD6  
                         _TMR3H 000FB3                           _TMR1L 000FCE                           _TMR3L 000FB2  
                         _PORTA 000F80                           _PORTB 000F81                           _PORTC 000F82  
                         _PORTD 000F83                           _TRISA 000F92                           _TRISB 000F93  
                         _TRISC 000F94                           _TRISD 000F95                           _TRISE 000F96  
                 __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                 __end_of_lcdHome 3D26  
                  ___lltoft@exp 0033                   _conveyorServo 015E                 __end_of_lcdInst 3CB0  
                __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000  
                __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                 __end_of_initLCD 3ABC  
                __CFG_EBTRB$OFF 000000                           _debug 1FA4                   ___awtoft@sign 002E  
                         _angle 0044                 __end_of_dpowers FE39                           _count 0056  
                         _scale 12F2                 __end_of_isdigit 3CEC                  eepromWrite@ien 0087  
                 ___ftpack@sign 0027                           _pulse 0138                           _putch 3C6C  
                         pclath 000FFA                           tablat 000FF5                 __end_of_service 2B94  
                         status 000FD8              __size_ofi2___awmod 0070                  __CFG_PBADEN$ON 000000  
          __end_of_digitalWrite 2FC0                 __initialization 3304                    __end_of_main 1ADC  
                  __end_of_keys FEB8                          ??_main 011F                   ___fttol@sign1 00B7  
                 __activetblptr 000002            __size_of_digitalRead 00EA            __size_of__tdiv_to_l_ 0132  
                  _stoppingTime 015C                 i2digitalWrite@p 000E                          ?_debug 0001  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
              __end_of___altoft 350E                ___llmod@dividend 0030                          ?_scale 0098  
                        _ADRESH 000FC4                          _EEADRH 000FAA                          _ADRESL 000FC3  
                        _EEDATA 000FA8                          _EECON1 000FA6                          _EECON2 000FA7  
              ___awdiv@dividend 0029                __end_of___awtoft 3B6C                          ?_putch 0001  
              __end_of___ftpack 3136                __end_of___lltoft 38A2                          _INT0IE 007F94  
                        _INT0IF 007F91                          _INT1IE 007F83                          _INT1IF 007F80  
                  sortBattery@V 0116                    sortBattery@i 0119                          i2l5203 3A06  
                        i2l5221 359E                          i2l5241 35E4                          i2l5233 35CC  
                        i2l5225 35AC                          i2l5217 3592                          i2l5227 35B4  
                        i2l5171 3018                          i2l5229 35B8                          i2l5237 35D6  
                        i2l5181 303A                          i2l5165 3004                          i2l5183 3040  
                        i2l5175 3026                          i2l5177 302C                          i2l5169 3012  
                        i2l5187 304E                          i2l5189 3054                          i2l5471 29BC  
                        _TMR0IE 007F95                          _TMR0IF 007F92                          _TMR1IE 007CE8  
                        _TMR1IF 007CF0                          _TMR3IE 007D01                          _SSPADD 000FC8  
                        _TRISC3 007CA3                          _TRISC4 007CA4                          _SSPBUF 000FC9  
              __end_of_lcdClear 3D36               _angleToPulse$1426 00CD                  __CFG_XINST$OFF 000000  
          __size_of_eepromWrite 0056                __end_of__powers_ FE87                          ___ftge 3274  
                     ??___aldiv 002B                       ??___almod 0039                          ___wmul 3C22  
                     ??___awdiv 002D                       ??___ftadd 00A8                  __CFG_STVREN$ON 000000  
                     ??___awmod 0027                       ??___ftdiv 0080                       ??___ftneg 0026  
                     ??___lldiv 002B                       ??___ftmul 008F                       ??___llmod 0038  
                     ??___ftsub 003B                       ??___fttol 00B2                       ??___lwmod 003B  
                        debug@i 0117                          debug@n 010E                          _fround 1D44  
                        clear_0 336A                          clear_1 337C                 eepromWrite@data 0080  
              ___awdiv@quotient 002F                 ___awmod@divisor 0025                       ??_lcdHome 0027  
               ___awmod@counter 0027                          _servos 0140                       ??_lcdInst 0025  
                        _printf 0012                __end_of_pinSetup 3AFC                __end_of_setAngle 2E2C  
             analogRead@channel 0023           ___ftmul@f3_as_product 0093                       ??_initLCD 0027  
                  __pdataCOMRAM 003B                       ??_isdigit 0023                 readPastRun@data 0082  
             __end_ofi2___awmod 35EE                   setAngle@angle 00D6                    __mediumconst FE10  
                  ?_showRunMenu 0001                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8                    ?_showRunTime 0001                   setAngle@motor 00D4  
                     ??_service 0014                  i2___awmod@sign 0006                      __accesstop 0080  
       __end_of__initialization 3382                      ___altoft@c 002B                      ___ftadd@f1 00A2  
                    ___ftadd@f2 00A5                      ___ftge@ff1 002F                      ___ftge@ff2 0032  
                 ___rparam_used 000001                      ___ftdiv@f1 0035                      ___ftdiv@f2 0038  
                    ___ftdiv@f3 0084                      ___ftneg@f1 0023                      ___awtoft@c 002B  
         __size_ofi2_startTimer 004C                      ___ftmul@f1 0089                      ___ftmul@f2 008C  
                    ___ftsub@f1 00AE                      ___ftsub@f2 00B1                      ___fttol@f1 00AE  
          __end_of_happynewyear FEBF                  __pcstackCOMRAM 0001           __size_of_angleToPulse 0158  
                  __pidataBANK0 3D36                    __pidataBANK1 3CB0                   __end_of_debug 2150  
                    ___lltoft@c 002B                   _cylinderMotor 0166                   __end_of_scale 1708  
                  ?_sortBattery 0001                   __end_of_putch 3C8E              __size_of_lcdNibble 0066  
                    __div_to_l_ 267C                      _debug$1424 0112               eepromRead@address 0037  
          __size_of_readPastRun 0092                         ??_debug 00EB                 __div_to_l_@exp1 002E  
               __div_to_l_@cntr 002D                         ??_scale 003B                 __div_to_l_@quot 0029  
                       ??_putch 0027                    i2_startTimer 39E0                      __pbssBANK0 00F4  
                    __pbssBANK1 0138                    _angleToPulse 22AE           __size_of_digitalWrite 00C8  
            __size_of_initTimer 004A              __size_of_initServo 00E2                      _analogRead 3AFC  
                 __div_to_l_@f1 0023                   __div_to_l_@f2 0026                         ?___ftge 002F  
                       ?___wmul 0031                _sortBattery$1425 0100           sortBattery@resolution 010C  
                   saveNewRun@i 008D                       ?___altoft 002B                     saveNewRun@n 008B  
                       ?_fround 0098                      _lcdNewline 3D26                       ?___awtoft 002B  
                     ?___ftpack 0023                         ?_printf 00BD                       ?___lltoft 002B  
                    _eepromRead 3CEC  __size_of_servoInterruptService 010C   __end_of_servoInterruptService 29C0  
         __end_of_showInterface 3658               i2startTimer@timer 0007                       ?_lcdClear 0001  
              angleToPulse@a000 00D0                angleToPulse@a180 00C9                    _digitalWrite 2EF8  
                       _SSPCON1 000FC6                         _SSPCON2 000FC5                         _SSPSTAT 000FC7  
       __size_ofi2_digitalWrite 00C8                         _V_LIM_C 0041             main@lastBatteryTime 0130  
                     ?_pinSetup 0001                       ?_setAngle 00D4               __end_of_lcdNibble 3724  
             __end_of__npowers_ FE60                         __Hparam 0000                      _scale$1429 009B  
         __end_of_showRunSelect 3788                         __Lparam 0000                      debug@i_287 0115  
                  readPastRun@i 0090                         ___aldiv 2E2C                         ___almod 3136  
               __size_of___ftge 0090                         ___awdiv 3390                         ___ftadd 1ADC  
                       ___awmod 350E                      _readKeypad 3BFC                         ___ftdiv 27A4  
                       ___ftneg 3C48                         ___lldiv 3414                 __size_of___wmul 0026  
                       ___ftmul 2150                         ___llmod 3658                         ___ftsub 3994  
                       ___fttol 2406                         _n_OTHER 0154                         ___lwmod 3788  
                    ??___altoft 002F                         __pcinit 3304                      ??___awtoft 002E  
                    ??___ftpack 0028                 __size_of_fround 0260                         __ramtop 1000  
                       _lcdHome 3D1E                         _lcdInst 3C8E                      ??___lltoft 002F  
                       __ptext0 1708                         __ptext1 0E0A                         __ptext2 2EF8  
                       __ptext3 29C0                         __ptext4 3AFC                         __ptext5 35EE  
                       __ptext6 3B6C                         __ptext7 3B9C                         __ptext8 3724  
                       __ptext9 37EA                   ?_showDateTime 0001                 __size_of_printf 0DF8  
                       _padPin1 004E                         _padPin2 016A                         _padPin3 0052  
                 startTimer@val 0025                         _initLCD 3A76               __end_of_hexpowers FEA7  
                   ?__div_to_l_ 0023                         _lastKey 005C               __end_of_initTimer 3A76  
             __end_of_initServo 2C76                         _dpowers FE11                         _isdigit 3CCE  
              ___awmod@dividend 0023                ___aldiv@dividend 0023                      ??_lcdClear 0027  
                 ?_showMainMenu 0001                         _service 0008            __size_of_showRunMenu 005C  
                __pintcode_body 2AAA            __size_of_showRunTime 0030            end_of_initialization 3382  
                    _saveNewRun 2C76                   __Lmediumconst FE10                         int_func 2AAA  
                digitalRead@pin 0023                     ?_analogRead 0023                      ??_pinSetup 0023  
                    ??_setAngle 00D8                 ___lldiv@divisor 0027                 ___lldiv@counter 002F  
                setAngle@period 00DA                   ?_showRunStats 0001                         printf@c 00EA  
                       printf@f 00BD                ___aldiv@quotient 002D                         postdec1 000FE5  
                       postdec2 000FDD                 _batteryDetected 014C                         postinc0 000FEE  
                       postinc2 000FDE                  __tdiv_to_l_@f1 0023                  __tdiv_to_l_@f2 0026  
                 ??_digitalRead 0025                     ?_lcdNewline 0001                   ??__tdiv_to_l_ 0029  
                ??_showDateTime 003B                       _PORTBbits 000F81            __size_of_sortBattery 04E8  
              showInterface@key 00ED                     ?_eepromRead 0037                  ??_showMainMenu 003B  
           _redirectAngle_OTHER 00F2                    _happynewyear FEB8              angleToPulse@offset 00C5  
            sortBattery@V_float 0102                       i2___awmod 357E                      _startTimer 3948  
                 ??_eepromWrite 0086                     ___ftdiv@exp 0087                     printf@width 00E4  
           __size_of__div_to_l_ 0128                  ??_showRunStats 003B                     ___ftmul@exp 0092  
                   ?_readKeypad 0001                  __end_of___ftge 3304                  __end_of___wmul 3C48  
                 __pidataCOMRAM 3D06                  __end_of_fround 1FA4                  __end_of_printf 0E0A  
           __size_of_analogRead 0038             start_initialization 3304             __end_of_digitalRead 2AAA  
           __end_of__tdiv_to_l_ 267C                  initServo@angle 00E0                  initTimer@timer 0023  
                initServo@motor 00DE                      ?i2___awmod 0001                     ?_saveNewRun 0089  
                i2_digitalWrite 2FC0             __size_of_lcdNewline 0008                 ___llmod@divisor 0034  
               ___llmod@counter 0038             __size_of_eepromRead 001A                      initServo@i 00E6  
                      ??___ftge 0035             __end_of_eepromWrite 38F8                        ??___wmul 0035  
                   __pdataBANK0 00EE                     __pdataBANK1 0158                __CFG_LPT1OSC$OFF 000000  
                      ??_fround 003B                   ??_readPastRun 003B                  readPastRun@run 0080  
                      ??_printf 00C7               __size_of___altoft 0078                      fround@prec 00A1  
             __size_of___awtoft 0038               __size_of___ftpack 00AE               __size_of___lltoft 005C  
                   __pbssCOMRAM 0052                   __pcstackBANK0 0080                   __pcstackBANK1 0100  
        __end_ofi2_digitalWrite 3088          sortBattery@targetAngle 0114                    _isdigit$1058 0024  
                   ?_startTimer 0023                    debug@run_286 0110               __size_of_lcdClear 0008  
           __size_of_readKeypad 0026            __end_of_showDateTime 3BFC               i2digitalWrite@pin 0007  
             i2digitalWrite@val 0009               __CFG_CCP2MX$PORTC 000000               __size_of_pinSetup 0040  
          __end_of_showMainMenu 3948               __size_of_setAngle 00D4                       __pintcode 0008  
                 __pmediumconst FE10                       _lcdNibble 36BE                        ?___aldiv 0023  
                      ?___almod 0031                        ?___awdiv 0029                        ?___ftadd 00A2  
                      ?___awmod 0023                        ?___ftdiv 0035                        ?___ftneg 0023  
                      ?___lldiv 0023                        ?___ftmul 0089                        ?___llmod 0030  
                      ?___ftsub 00AE                       __npowers_ FE39                        ?___fttol 00AE  
                      ?___lwmod 0080                     _digitalRead 29C0             __size_of_saveNewRun 00E2  
              ___almod@dividend 0031                        ?_lcdHome 0001                        ?_lcdInst 0001  
                   __tdiv_to_l_ 254A                    ??__div_to_l_ 0029                        ?_initLCD 0001  
               startTimer@timer 0023                        ?_isdigit 0001             __end_of_readPastRun 3274  
          __end_of_showRunStats 3BCC                        ?_service 0001                       _hexpowers FE87  
                     _initTimer 3A2C                       _initServo 2B94                 ?i2_digitalWrite 0007  
         _servoInterruptService 28B4                  __size_of_debug 01AC                     ??i2___awmod 0005  
                __size_of_scale 0416                  __size_of_putch 0022                        _AA_float 004A  
            eepromWrite@address 0082                 ___aldiv@divisor 0027                 ___aldiv@counter 002B  
                sortBattery@Vcc 0109                  ___wmul@product 0035                        _LATDbits 000F8C  
                  ??_analogRead 0027                     _eepromWrite 38A2                        i2u504_44 2FEA  
                      i2u504_45 2FE4              __end_of__div_to_l_ 27A4          __size_of_showInterface 006A  
              __CFG_WDTPS$32768 000000                      ?_lcdNibble 0001                  _padAngle_CLOSE 00EE  
                     _terminate 0156                   digitalWrite@p 002A                      service@key 0022  
                  ??_lcdNewline 0027             __size_of_startTimer 004C               angleToPulse@angle 00BD  
               main@cylinderDur 0134               ___wmul@multiplier 0031                   lcdNibble@data 0024  
                  ??_eepromRead 003B                      printf@flag 00E6                   lcdNibble@temp 0023  
                    printf@fval 00DD                      printf@prec 00E8                   ??_showRunMenu 003B  
                 ??_showRunTime 003B              __end_of_analogRead 3B34                        _V_LIM_AA 003E  
                      _V_LIM_9V 003B          __size_of_showRunSelect 0064                  saveNewRun@data 0089  
                    ?_initTimer 0023                      ?_initServo 00DE               sortBattery@signal 0107  
      sortBattery@pos_v_counter 0105                       copy_data0 3318                       copy_data1 3338  
                     copy_data2 3358              i2___awmod@dividend 0001              __end_of_lcdNewline 3D2E  
                 readKeypad@key 0023                        __Hrparam 0000                        __Lrparam 0000  
            __end_of_eepromRead 3D06              __CFG_BOREN$SBORDIS 000000                    ??_readKeypad 0023  
                 ??_sortBattery 00EB                __size_of___aldiv 00CC                __size_of___almod 00AC  
              __size_of___awdiv 0084                __size_of___ftadd 0268                __size_of___awmod 0070  
              __size_of___ftdiv 0110                __size_of___ftneg 0024                __size_of___lldiv 0082  
                      ___altoft 3496                __size_of___ftmul 015E                __size_of___llmod 0066  
              __size_of___ftsub 004C                __size_of___fttol 0144                __size_of___lwmod 0062  
                      ___awtoft 3B34                        ___ftpack 3088                     _readPastRun 31E2  
                   _fround$1427 009E                     _fround$1428 009B                     _cylinderDir 0162  
                      ___lltoft 3846                __size_of_lcdHome 0008                __size_of_lcdInst 0022  
                     setAngle@i 00DC                __size_of_initLCD 0046                __size_of_isdigit 001E  
        ?_servoInterruptService 0001                   _showInterface 35EE                        _lcdClear 3D2E  
                      __ptext10 38F8                        __ptext11 3BCC                        __ptext20 3A2C  
                      __ptext12 3D1E                        __ptext21 1FA4                        __ptext13 2B94  
                      __ptext30 3D26                        __ptext22 2C76                        __ptext14 3948  
                      __ptext31 3CCE                        __ptext23 38A2                        __ptext15 2D58  
                      __ptext40 3658                        __ptext32 1D44                        __ptext24 31E2  
                      __ptext16 22AE                        __ptext41 3414                        __ptext33 3C22  
                      __ptext25 3CEC                        __ptext17 27A4                        __ptext50 3A76  
                      __ptext42 2406                        __ptext34 2150                        __ptext26 3BFC  
                      __ptext18 3B34                        __ptext51 3C8E                        __ptext43 3994  
                      __ptext35 350E                        __ptext27 0012                        __ptext19 3496  
                      __ptext60 357E                        __ptext52 36BE                        __ptext44 1ADC  
                      __ptext36 3390                        __ptext28 12F2                        __ptext53 3788  
                      __ptext45 3088                        __ptext37 254A                        __ptext29 3C6C  
                      __ptext54 3136                        __ptext46 3C48                        __ptext38 267C  
                      __ptext55 2E2C                        __ptext47 3274                        __ptext39 3846  
                      __ptext48 3ABC                        __ptext57 28B4                        __ptext49 3D2E  
                      __ptext58 39E0                        __ptext59 2FC0           __size_of_showDateTime 0030  
                      __powers_ FE60                __size_of_service 2B8C                 i2startTimer@val 0009  
               ___almod@divisor 0035                    ??_saveNewRun 003B                   ?i2_startTimer 0007  
                      _padServo 016E                 ___almod@counter 0039             __end_of_showRunMenu 3846  
            __end_of_readKeypad 3C22             __end_of_showRunTime 3B9C                   ?_angleToPulse 00BD  
                      debug@key 0114                        debug@run 0100                   __size_of_main 03D4  
         __size_of_showMainMenu 0050                        _pinSetup 3ABC                        _setAngle 2D58  
                 _showRunSelect 3724                        _prevTime 005A                sortBattery@V_312 011C  
                   ??_lcdNibble 0023                   _padAngle_OPEN 0046                        int$flags 005D  
              sortBattery@i_314 0112                sortBattery@V_max 010F                       printf@idx 00D0  
                     printf@len 00D3                       printf@exp 00DB                       printf@val 00E0  
                      main@prev 0136                   showMainMenu@k 00EB              __end_of_saveNewRun 2D58  
         __size_of_showRunStats 0030                    _showDateTime 3BCC               i2___awmod@divisor 0003  
                     putch@data 0027               i2___awmod@counter 0005             __end_of_sortBattery 12F2  
                    _INTCONbits 000FF2                  ?_showInterface 0001                   ?_digitalWrite 0023  
                   ??_initTimer 0025                     ??_initServo 00E2                        isdigit@c 0025  
                  _showMainMenu 38F8                        scale@scl 009E                  ??i2_startTimer 000D  
                  ??_startTimer 0029                        intlevel2 0000                __tdiv_to_l_@exp1 0031  
              __tdiv_to_l_@cntr 0030                  ??_angleToPulse 00C1                __tdiv_to_l_@quot 002C  
              ___lwmod@dividend 0080                ___lldiv@dividend 0023                  ?_showRunSelect 0001  
                  _showRunStats 3B9C                _redirectAngle_AA 015A                _redirectAngle_9V 0048  
                      printf@ap 00D5                        printf@cp 00D1                     lcdInst@data 0026  
                  ?_digitalRead 0023                    ?__tdiv_to_l_ 0023              __end_of_startTimer 3994  
                   _printf$1430 00CD                ??i2_digitalWrite 000B                ___lldiv@quotient 002B  
               ___lwmod@divisor 0082                 ___lwmod@counter 0084                  ??_digitalWrite 0027  
                  ___aldiv@sign 002C                     _showRunMenu 37EA                     _showRunTime 3B6C  
               _redirectAngle_C 00F0                _padAngle_NEUTRAL 0158                 digitalWrite@pin 0023  
               digitalWrite@val 0025                    ___almod@sign 003A                    ?_eepromWrite 0080  
                  showRunMenu@k 00EC                  showRunMenu@key 00EB  
