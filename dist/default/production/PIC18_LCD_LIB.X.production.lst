

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Mar 10 01:13:22 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    52                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    53  0000                     
    54                           ; Version 1.40
    55                           ; Generated 01/12/2016 GMT
    56                           ; 
    57                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F4620 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	idataCOMRAM
    90  002FF0                     __pidataCOMRAM:
    91                           	opt stack 0
    92                           
    93                           ;initializer for _extFreq
    94  002FF0  A6E0               	dw	42720
    95  002FF2  01E0               	dw	480
    96                           
    97                           ;initializer for _angle
    98  002FF4  00                 	db	0
    99  002FF5  34                 	db	52
   100  002FF6  43                 	db	67
   101                           
   102                           ;initializer for _flag0
   103  002FF7  0001               	dw	1
   104                           
   105                           	psect	smallconst
   106  001000                     __psmallconst:
   107                           	opt stack 0
   108  001000  00                 	db	0
   109  001001                     _dpowers:
   110                           	opt stack 0
   111  001001  0001               	dw	1
   112  001003  0000               	dw	0
   113  001005  000A               	dw	10
   114  001007  0000               	dw	0
   115  001009  0064               	dw	100
   116  00100B  0000               	dw	0
   117  00100D  03E8               	dw	1000
   118  00100F  0000               	dw	0
   119  001011  2710               	dw	10000
   120  001013  0000               	dw	0
   121  001015  86A0               	dw	34464
   122  001017  0001               	dw	1
   123  001019  4240               	dw	16960
   124  00101B  000F               	dw	15
   125  00101D  9680               	dw	38528
   126  00101F  0098               	dw	152
   127  001021  E100               	dw	57600
   128  001023  05F5               	dw	1525
   129  001025  CA00               	dw	51712
   130  001027  3B9A               	dw	15258
   131  001029                     __end_of_dpowers:
   132                           	opt stack 0
   133  001029                     __npowers_:
   134                           	opt stack 0
   135  001029  00                 	db	0
   136  00102A  80                 	db	128
   137  00102B  3F                 	db	63
   138  00102C  CD                 	db	205
   139  00102D  CC                 	db	204
   140  00102E  3D                 	db	61
   141  00102F  D7                 	db	215
   142  001030  23                 	db	35
   143  001031  3C                 	db	60
   144  001032  12                 	db	18
   145  001033  83                 	db	131
   146  001034  3A                 	db	58
   147  001035  B7                 	db	183
   148  001036  D1                 	db	209
   149  001037  38                 	db	56
   150  001038  C6                 	db	198
   151  001039  27                 	db	39
   152  00103A  37                 	db	55
   153  00103B  38                 	db	56
   154  00103C  86                 	db	134
   155  00103D  35                 	db	53
   156  00103E  C0                 	db	192
   157  00103F  D6                 	db	214
   158  001040  33                 	db	51
   159  001041  CC                 	db	204
   160  001042  2B                 	db	43
   161  001043  32                 	db	50
   162  001044  70                 	db	112
   163  001045  89                 	db	137
   164  001046  30                 	db	48
   165  001047  E7                 	db	231
   166  001048  DB                 	db	219
   167  001049  2E                 	db	46
   168  00104A  E5                 	db	229
   169  00104B  3C                 	db	60
   170  00104C  1E                 	db	30
   171  00104D  42                 	db	66
   172  00104E  A2                 	db	162
   173  00104F  0D                 	db	13
   174  001050                     __end_of__npowers_:
   175                           	opt stack 0
   176  001050                     __powers_:
   177                           	opt stack 0
   178  001050  00                 	db	0
   179  001051  80                 	db	128
   180  001052  3F                 	db	63
   181  001053  00                 	db	0
   182  001054  20                 	db	32
   183  001055  41                 	db	65
   184  001056  00                 	db	0
   185  001057  C8                 	db	200
   186  001058  42                 	db	66
   187  001059  00                 	db	0
   188  00105A  7A                 	db	122
   189  00105B  44                 	db	68
   190  00105C  40                 	db	64
   191  00105D  1C                 	db	28
   192  00105E  46                 	db	70
   193  00105F  50                 	db	80
   194  001060  C3                 	db	195
   195  001061  47                 	db	71
   196  001062  24                 	db	36
   197  001063  74                 	db	116
   198  001064  49                 	db	73
   199  001065  97                 	db	151
   200  001066  18                 	db	24
   201  001067  4B                 	db	75
   202  001068  BC                 	db	188
   203  001069  BE                 	db	190
   204  00106A  4C                 	db	76
   205  00106B  6B                 	db	107
   206  00106C  6E                 	db	110
   207  00106D  4E                 	db	78
   208  00106E  03                 	db	3
   209  00106F  15                 	db	21
   210  001070  50                 	db	80
   211  001071  79                 	db	121
   212  001072  AD                 	db	173
   213  001073  60                 	db	96
   214  001074  F3                 	db	243
   215  001075  49                 	db	73
   216  001076  71                 	db	113
   217  001077                     __end_of__powers_:
   218                           	opt stack 0
   219  001077                     _hexpowers:
   220                           	opt stack 0
   221  001077  0001               	dw	1
   222  001079  0000               	dw	0
   223  00107B  0010               	dw	16
   224  00107D  0000               	dw	0
   225  00107F  0100               	dw	256
   226  001081  0000               	dw	0
   227  001083  1000               	dw	4096
   228  001085  0000               	dw	0
   229  001087  0000               	dw	0
   230  001089  0001               	dw	1
   231  00108B  0000               	dw	0
   232  00108D  0010               	dw	16
   233  00108F  0000               	dw	0
   234  001091  0100               	dw	256
   235  001093  0000               	dw	0
   236  001095  1000               	dw	4096
   237  001097                     __end_of_hexpowers:
   238                           	opt stack 0
   239  001097  31                 	db	49
   240  001098  32                 	db	50
   241  001099  33                 	db	51
   242  00109A  41                 	db	65
   243  00109B  34                 	db	52
   244  00109C  35                 	db	53
   245  00109D  36                 	db	54
   246  00109E  42                 	db	66
   247  00109F  37                 	db	55
   248  0010A0  38                 	db	56
   249  0010A1  39                 	db	57
   250  0010A2  43                 	db	67
   251  0010A3  2A                 	db	42
   252  0010A4  30                 	db	48
   253  0010A5  23                 	db	35
   254  0010A6  44                 	db	68
   255  0010A7  00                 	db	0
   256  0010A8                     __end_of_keys:
   257                           	opt stack 0
   258  0010A8                     _happynewyear:
   259                           	opt stack 0
   260  0010A8  45                 	db	69
   261  0010A9  59                 	db	89
   262  0010AA  23                 	db	35
   263  0010AB  07                 	db	7
   264  0010AC  31                 	db	49
   265  0010AD  12                 	db	18
   266  0010AE  16                 	db	22
   267  0010AF                     __end_of_happynewyear:
   268                           	opt stack 0
   269  0000                     _ADCON0	set	4034
   270  0000                     _ADCON1	set	4033
   271  0000                     _ADCON2	set	4032
   272  0000                     _ADRESH	set	4036
   273  0000                     _ADRESL	set	4035
   274  0000                     _EEADR	set	4009
   275  0000                     _EEADRH	set	4010
   276  0000                     _EECON1	set	4006
   277  0000                     _EECON2	set	4007
   278  0000                     _EEDATA	set	4008
   279  0000                     _INTCONbits	set	4082
   280  0000                     _LATA	set	3977
   281  0000                     _LATB	set	3978
   282  0000                     _LATC	set	3979
   283  0000                     _LATD	set	3980
   284  0000                     _LATDbits	set	3980
   285  0000                     _LATE	set	3981
   286  0000                     _PORTA	set	3968
   287  0000                     _PORTB	set	3969
   288  0000                     _PORTBbits	set	3969
   289  0000                     _PORTC	set	3970
   290  0000                     _PORTD	set	3971
   291  0000                     _SSPADD	set	4040
   292  0000                     _SSPBUF	set	4041
   293  0000                     _SSPCON1	set	4038
   294  0000                     _SSPCON2	set	4037
   295  0000                     _SSPSTAT	set	4039
   296  0000                     _T0CON	set	4053
   297  0000                     _TMR0H	set	4055
   298  0000                     _TMR0L	set	4054
   299  0000                     _TRISA	set	3986
   300  0000                     _TRISB	set	3987
   301  0000                     _TRISC	set	3988
   302  0000                     _TRISD	set	3989
   303  0000                     _TRISE	set	3990
   304  0000                     _ACKDT	set	32301
   305  0000                     _ACKEN	set	32300
   306  0000                     _EEIF	set	32012
   307  0000                     _INT1IF	set	32640
   308  0000                     _PEIE	set	32662
   309  0000                     _PEN	set	32298
   310  0000                     _RCEN	set	32299
   311  0000                     _RSEN	set	32297
   312  0000                     _SEN	set	32296
   313  0000                     _TMR0IE	set	32661
   314  0000                     _TMR0IF	set	32658
   315  0000                     _TRISC3	set	31907
   316  0000                     _TRISC4	set	31908
   317  0010AF                     STR_6:
   318  0010AF  30                 	db	48	;'0'
   319  0010B0  31                 	db	49	;'1'
   320  0010B1  32                 	db	50	;'2'
   321  0010B2  33                 	db	51	;'3'
   322  0010B3  34                 	db	52	;'4'
   323  0010B4  35                 	db	53	;'5'
   324  0010B5  36                 	db	54	;'6'
   325  0010B6  37                 	db	55	;'7'
   326  0010B7  38                 	db	56	;'8'
   327  0010B8  39                 	db	57	;'9'
   328  0010B9  61                 	db	97	;'a'
   329  0010BA  62                 	db	98	;'b'
   330  0010BB  63                 	db	99	;'c'
   331  0010BC  64                 	db	100	;'d'
   332  0010BD  65                 	db	101	;'e'
   333  0010BE  66                 	db	102	;'f'
   334  0010BF  00                 	db	0
   335  0010C0  68                 	db	104	;'h'
   336  0010C1  69                 	db	105	;'i'
   337  0010C2  67                 	db	103	;'g'
   338  0010C3  68                 	db	104	;'h'
   339  0010C4  3A                 	db	58	;':'
   340  0010C5  20                 	db	32
   341  0010C6  25                 	db	37
   342  0010C7  6C                 	db	108	;'l'
   343  0010C8  64                 	db	100	;'d'
   344  0010C9  0A                 	db	10
   345  0010CA  00                 	db	0
   346  0010CB  6C                 	db	108	;'l'
   347  0010CC  6F                 	db	111	;'o'
   348  0010CD  77                 	db	119	;'w'
   349  0010CE  20                 	db	32
   350  0010CF  3A                 	db	58	;':'
   351  0010D0  20                 	db	32
   352  0010D1  25                 	db	37
   353  0010D2  6C                 	db	108	;'l'
   354  0010D3  64                 	db	100	;'d'
   355  0010D4  00                 	db	0
   356  0010D5                     STR_3:
   357  0010D5  5B                 	db	91	;'['
   358  0010D6  25                 	db	37
   359  0010D7  78                 	db	120	;'x'
   360  0010D8  20                 	db	32
   361  0010D9  25                 	db	37
   362  0010DA  78                 	db	120	;'x'
   363  0010DB  5D                 	db	93	;']'
   364  0010DC  0A                 	db	10
   365  0010DD  00                 	db	0
   366  0010DE                     STR_1:
   367  0010DE  66                 	db	102	;'f'
   368  0010DF  72                 	db	114	;'r'
   369  0010E0  65                 	db	101	;'e'
   370  0010E1  71                 	db	113	;'q'
   371  0010E2  3A                 	db	58	;':'
   372  0010E3  20                 	db	32
   373  0010E4  25                 	db	37
   374  0010E5  66                 	db	102	;'f'
   375  0010E6  00                 	db	0
   376  0010E7                     STR_2:
   377  0010E7  74                 	db	116	;'t'
   378  0010E8  31                 	db	49	;'1'
   379  0010E9  3A                 	db	58	;':'
   380  0010EA  20                 	db	32
   381  0010EB  25                 	db	37
   382  0010EC  78                 	db	120	;'x'
   383  0010ED  20                 	db	32
   384  0010EE  00                 	db	0
   385                           
   386                           ; #config settings
   387  0010EF  00                 	db	0	; dummy byte at the end
   388  0000                     
   389                           	psect	cinit
   390  002E9C                     __pcinit:
   391                           	opt stack 0
   392  002E9C                     start_initialization:
   393                           	opt stack 0
   394  002E9C                     __initialization:
   395                           	opt stack 0
   396                           
   397                           ; Initialize objects allocated to COMRAM (9 bytes)
   398                           ; load TBLPTR registers with __pidataCOMRAM
   399  002E9C  0EF0               	movlw	low __pidataCOMRAM
   400  002E9E  6EF6               	movwf	tblptrl,c
   401  002EA0  0E2F               	movlw	high __pidataCOMRAM
   402  002EA2  6EF7               	movwf	tblptrh,c
   403  002EA4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   404  002EA6  6EF8               	movwf	tblptru,c
   405  002EA8  EE00  F064         	lfsr	0,__pdataCOMRAM
   406  002EAC  EE10 F009          	lfsr	1,9
   407  002EB0                     copy_data0:
   408  002EB0  0009               	tblrd		*+
   409  002EB2  CFF5 FFEE          	movff	tablat,postinc0
   410  002EB6  50E5               	movf	postdec1,w,c
   411  002EB8  50E1               	movf	fsr1l,w,c
   412  002EBA  E1FA               	bnz	copy_data0
   413                           
   414                           ; Clear objects allocated to COMRAM (4 bytes)
   415  002EBC  6A70               	clrf	(__pbssCOMRAM+3)& (0+255),c
   416  002EBE  6A6F               	clrf	(__pbssCOMRAM+2)& (0+255),c
   417  002EC0  6A6E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   418  002EC2  6A6D               	clrf	__pbssCOMRAM& (0+255),c
   419  002EC4                     end_of_initialization:
   420                           	opt stack 0
   421  002EC4                     __end_of__initialization:
   422                           	opt stack 0
   423  002EC4  9071               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   424  002EC6  9271               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   425  002EC8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   426  002ECA  6EF8               	movwf	tblptru,c
   427  002ECC  0100               	movlb	0
   428  002ECE  EF69  F017         	goto	_main	;jump to C main() function
   429                           tblptru	equ	0xFF8
   430                           tblptrh	equ	0xFF7
   431                           tblptrl	equ	0xFF6
   432                           tablat	equ	0xFF5
   433                           postinc0	equ	0xFEE
   434                           postdec1	equ	0xFE5
   435                           fsr1l	equ	0xFE1
   436                           
   437                           	psect	bssCOMRAM
   438  00006D                     __pbssCOMRAM:
   439                           	opt stack 0
   440  00006D                     _count:
   441                           	opt stack 0
   442  00006D                     	ds	2
   443  00006F                     _time:
   444                           	opt stack 0
   445  00006F                     	ds	2
   446                           tblptru	equ	0xFF8
   447                           tblptrh	equ	0xFF7
   448                           tblptrl	equ	0xFF6
   449                           tablat	equ	0xFF5
   450                           postinc0	equ	0xFEE
   451                           postdec1	equ	0xFE5
   452                           fsr1l	equ	0xFE1
   453                           
   454                           	psect	dataCOMRAM
   455  000064                     __pdataCOMRAM:
   456                           	opt stack 0
   457  000064                     _extFreq:
   458                           	opt stack 0
   459  000064                     	ds	4
   460  000068                     _angle:
   461                           	opt stack 0
   462  000068                     	ds	3
   463  00006B                     _flag0:
   464                           	opt stack 0
   465  00006B                     	ds	2
   466                           tblptru	equ	0xFF8
   467                           tblptrh	equ	0xFF7
   468                           tblptrl	equ	0xFF6
   469                           tablat	equ	0xFF5
   470                           postinc0	equ	0xFEE
   471                           postdec1	equ	0xFE5
   472                           fsr1l	equ	0xFE1
   473                           
   474                           	psect	cstackBANK0
   475  000080                     __pcstackBANK0:
   476                           	opt stack 0
   477  000080                     _printf$1115:
   478                           	opt stack 0
   479                           
   480                           ; 3 bytes @ 0x0
   481  000080                     	ds	3
   482  000083                     printf@idx:
   483                           	opt stack 0
   484                           
   485                           ; 1 bytes @ 0x3
   486  000083                     	ds	1
   487  000084                     printf@ap:
   488                           	opt stack 0
   489                           
   490                           ; 2 bytes @ 0x4
   491  000084                     	ds	2
   492  000086                     printf@prec:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x6
   496  000086                     	ds	2
   497  000088                     printf@flag:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x8
   501  000088                     	ds	2
   502  00008A                     printf@exp:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0xA
   506  00008A                     	ds	2
   507  00008C                     printf@tmpval:
   508                           	opt stack 0
   509                           
   510                           ; 4 bytes @ 0xC
   511  00008C                     	ds	4
   512  000090                     printf@val:
   513                           	opt stack 0
   514                           
   515                           ; 4 bytes @ 0x10
   516  000090                     	ds	4
   517  000094                     printf@fval:
   518                           	opt stack 0
   519                           
   520                           ; 3 bytes @ 0x14
   521  000094                     	ds	3
   522  000097                     printf@c:
   523                           	opt stack 0
   524                           
   525                           ; 1 bytes @ 0x17
   526  000097                     	ds	1
   527  000098                     testFrequency@count:
   528                           	opt stack 0
   529                           
   530                           ; 4 bytes @ 0x18
   531  000098                     	ds	4
   532  00009C                     testFrequency@prev:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x1C
   536  00009C                     	ds	2
   537  00009E                     testFrequency@timerOff:
   538                           	opt stack 0
   539                           
   540                           ; 2 bytes @ 0x1E
   541  00009E                     	ds	2
   542  0000A0                     testFrequency@first:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x20
   546  0000A0                     	ds	2
   547  0000A2                     testFrequency@time:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x22
   551  0000A2                     	ds	2
   552                           tblptru	equ	0xFF8
   553                           tblptrh	equ	0xFF7
   554                           tblptrl	equ	0xFF6
   555                           tablat	equ	0xFF5
   556                           postinc0	equ	0xFEE
   557                           postdec1	equ	0xFE5
   558                           fsr1l	equ	0xFE1
   559                           
   560                           	psect	cstackCOMRAM
   561  000001                     __pcstackCOMRAM:
   562                           	opt stack 0
   563  000001                     ??_service:
   564  000001                     
   565                           ; 2 bytes @ 0x0
   566  000001                     	ds	14
   567  00000F                     ??_I2C_Master_Wait:
   568  00000F                     ?___awmod:
   569                           	opt stack 0
   570  00000F                     ?___ftpack:
   571                           	opt stack 0
   572  00000F                     ?___ftneg:
   573                           	opt stack 0
   574  00000F                     ?__tdiv_to_l_:
   575                           	opt stack 0
   576  00000F                     ?__div_to_l_:
   577                           	opt stack 0
   578  00000F                     ?___lldiv:
   579                           	opt stack 0
   580  00000F                     lcdNibble@temp:
   581                           	opt stack 0
   582  00000F                     ___awmod@dividend:
   583                           	opt stack 0
   584  00000F                     __div_to_l_@f1:
   585                           	opt stack 0
   586  00000F                     ___ftpack@arg:
   587                           	opt stack 0
   588  00000F                     __tdiv_to_l_@f1:
   589                           	opt stack 0
   590  00000F                     ___ftge@ff1:
   591                           	opt stack 0
   592  00000F                     ___ftneg@f1:
   593                           	opt stack 0
   594  00000F                     startT0@val:
   595                           	opt stack 0
   596  00000F                     ___lldiv@dividend:
   597                           	opt stack 0
   598                           
   599                           ; 4 bytes @ 0xE
   600  00000F                     	ds	1
   601  000010                     lcdNibble@data:
   602                           	opt stack 0
   603  000010                     I2C_Master_Read@a:
   604                           	opt stack 0
   605  000010                     I2C_Master_Write@d:
   606                           	opt stack 0
   607                           
   608                           ; 2 bytes @ 0xF
   609  000010                     	ds	1
   610  000011                     ??_lcdInst:
   611  000011                     I2C_Master_Read@temp:
   612                           	opt stack 0
   613  000011                     ___awmod@divisor:
   614                           	opt stack 0
   615                           
   616                           ; 2 bytes @ 0x10
   617  000011                     	ds	1
   618  000012                     lcdInst@data:
   619                           	opt stack 0
   620  000012                     ___ftpack@exp:
   621                           	opt stack 0
   622  000012                     __div_to_l_@f2:
   623                           	opt stack 0
   624  000012                     __tdiv_to_l_@f2:
   625                           	opt stack 0
   626  000012                     ___ftge@ff2:
   627                           	opt stack 0
   628                           
   629                           ; 3 bytes @ 0x11
   630  000012                     	ds	1
   631  000013                     ??_initLCD:
   632  000013                     putch@data:
   633                           	opt stack 0
   634  000013                     ___awmod@counter:
   635                           	opt stack 0
   636  000013                     ___ftpack@sign:
   637                           	opt stack 0
   638  000013                     ___lldiv@divisor:
   639                           	opt stack 0
   640                           
   641                           ; 4 bytes @ 0x12
   642  000013                     	ds	1
   643  000014                     ??___ftpack:
   644  000014                     ___awmod@sign:
   645                           	opt stack 0
   646                           
   647                           ; 1 bytes @ 0x13
   648  000014                     	ds	1
   649  000015                     ??__tdiv_to_l_:
   650  000015                     ??___ftge:
   651  000015                     ?___awdiv:
   652                           	opt stack 0
   653  000015                     ___awdiv@dividend:
   654                           	opt stack 0
   655  000015                     __div_to_l_@quot:
   656                           	opt stack 0
   657                           
   658                           ; 4 bytes @ 0x14
   659  000015                     	ds	2
   660  000017                     ?___altoft:
   661                           	opt stack 0
   662  000017                     ?___lltoft:
   663                           	opt stack 0
   664  000017                     ___awdiv@divisor:
   665                           	opt stack 0
   666  000017                     ___altoft@c:
   667                           	opt stack 0
   668  000017                     ___lldiv@quotient:
   669                           	opt stack 0
   670  000017                     ___lltoft@c:
   671                           	opt stack 0
   672                           
   673                           ; 4 bytes @ 0x16
   674  000017                     	ds	1
   675  000018                     __tdiv_to_l_@quot:
   676                           	opt stack 0
   677                           
   678                           ; 4 bytes @ 0x17
   679  000018                     	ds	1
   680  000019                     ___awdiv@counter:
   681                           	opt stack 0
   682  000019                     __div_to_l_@cntr:
   683                           	opt stack 0
   684                           
   685                           ; 1 bytes @ 0x18
   686  000019                     	ds	1
   687  00001A                     ___awdiv@sign:
   688                           	opt stack 0
   689  00001A                     __div_to_l_@exp1:
   690                           	opt stack 0
   691                           
   692                           ; 1 bytes @ 0x19
   693  00001A                     	ds	1
   694  00001B                     ??___altoft:
   695  00001B                     ??___lltoft:
   696  00001B                     ___lldiv@counter:
   697                           	opt stack 0
   698  00001B                     ___awdiv@quotient:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0x1A
   702  00001B                     	ds	1
   703  00001C                     ?___llmod:
   704                           	opt stack 0
   705  00001C                     __tdiv_to_l_@cntr:
   706                           	opt stack 0
   707  00001C                     I2C_Master_Init@c:
   708                           	opt stack 0
   709  00001C                     ___llmod@dividend:
   710                           	opt stack 0
   711                           
   712                           ; 4 bytes @ 0x1B
   713  00001C                     	ds	1
   714  00001D                     ?___wmul:
   715                           	opt stack 0
   716  00001D                     __tdiv_to_l_@exp1:
   717                           	opt stack 0
   718  00001D                     ___wmul@multiplier:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x1C
   722  00001D                     	ds	2
   723  00001F                     ___altoft@exp:
   724                           	opt stack 0
   725  00001F                     ___lltoft@exp:
   726                           	opt stack 0
   727  00001F                     ___wmul@multiplicand:
   728                           	opt stack 0
   729                           
   730                           ; 2 bytes @ 0x1E
   731  00001F                     	ds	1
   732  000020                     ??_I2C_Master_Init:
   733  000020                     ___altoft@sign:
   734                           	opt stack 0
   735  000020                     ___llmod@divisor:
   736                           	opt stack 0
   737                           
   738                           ; 4 bytes @ 0x1F
   739  000020                     	ds	1
   740  000021                     ?___ftdiv:
   741                           	opt stack 0
   742  000021                     ___wmul@product:
   743                           	opt stack 0
   744  000021                     ___ftdiv@f1:
   745                           	opt stack 0
   746                           
   747                           ; 3 bytes @ 0x20
   748  000021                     	ds	2
   749  000023                     ?___ftmul:
   750                           	opt stack 0
   751  000023                     ___ftmul@f1:
   752                           	opt stack 0
   753                           
   754                           ; 3 bytes @ 0x22
   755  000023                     	ds	1
   756  000024                     ___llmod@counter:
   757                           	opt stack 0
   758  000024                     ___ftdiv@f2:
   759                           	opt stack 0
   760                           
   761                           ; 3 bytes @ 0x23
   762  000024                     	ds	2
   763  000026                     ___ftmul@f2:
   764                           	opt stack 0
   765                           
   766                           ; 3 bytes @ 0x25
   767  000026                     	ds	1
   768  000027                     ??___ftdiv:
   769                           
   770                           ; 1 bytes @ 0x26
   771  000027                     	ds	2
   772  000029                     ??___ftmul:
   773                           
   774                           ; 1 bytes @ 0x28
   775  000029                     	ds	1
   776  00002A                     ___ftdiv@cntr:
   777                           	opt stack 0
   778                           
   779                           ; 1 bytes @ 0x29
   780  00002A                     	ds	1
   781  00002B                     ___ftdiv@f3:
   782                           	opt stack 0
   783                           
   784                           ; 3 bytes @ 0x2A
   785  00002B                     	ds	1
   786  00002C                     ___ftmul@exp:
   787                           	opt stack 0
   788                           
   789                           ; 1 bytes @ 0x2B
   790  00002C                     	ds	1
   791  00002D                     ___ftmul@f3_as_product:
   792                           	opt stack 0
   793                           
   794                           ; 3 bytes @ 0x2C
   795  00002D                     	ds	1
   796  00002E                     ___ftdiv@exp:
   797                           	opt stack 0
   798                           
   799                           ; 1 bytes @ 0x2D
   800  00002E                     	ds	1
   801  00002F                     ___ftdiv@sign:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0x2E
   805  00002F                     	ds	1
   806  000030                     ___ftmul@cntr:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x2F
   810  000030                     	ds	1
   811  000031                     ___ftmul@sign:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0x30
   815  000031                     	ds	1
   816  000032                     ?_fround:
   817                           	opt stack 0
   818  000032                     ?_scale:
   819                           	opt stack 0
   820                           
   821                           ; 3 bytes @ 0x31
   822  000032                     	ds	3
   823  000035                     _fround$1113:
   824                           	opt stack 0
   825  000035                     _scale$1114:
   826                           	opt stack 0
   827                           
   828                           ; 3 bytes @ 0x34
   829  000035                     	ds	3
   830  000038                     scale@scl:
   831                           	opt stack 0
   832  000038                     _fround$1112:
   833                           	opt stack 0
   834                           
   835                           ; 3 bytes @ 0x37
   836  000038                     	ds	1
   837  000039                     ?___fttol:
   838                           	opt stack 0
   839  000039                     ___fttol@f1:
   840                           	opt stack 0
   841                           
   842                           ; 3 bytes @ 0x38
   843  000039                     	ds	2
   844  00003B                     fround@prec:
   845                           	opt stack 0
   846                           
   847                           ; 1 bytes @ 0x3A
   848  00003B                     	ds	1
   849  00003C                     ?___ftadd:
   850                           	opt stack 0
   851  00003C                     ___ftadd@f1:
   852                           	opt stack 0
   853                           
   854                           ; 3 bytes @ 0x3B
   855  00003C                     	ds	1
   856  00003D                     ??___fttol:
   857                           
   858                           ; 1 bytes @ 0x3C
   859  00003D                     	ds	2
   860  00003F                     ___ftadd@f2:
   861                           	opt stack 0
   862                           
   863                           ; 3 bytes @ 0x3E
   864  00003F                     	ds	3
   865  000042                     ??___ftadd:
   866  000042                     ___fttol@sign1:
   867                           	opt stack 0
   868                           
   869                           ; 1 bytes @ 0x41
   870  000042                     	ds	1
   871  000043                     ___fttol@lval:
   872                           	opt stack 0
   873                           
   874                           ; 4 bytes @ 0x42
   875  000043                     	ds	2
   876  000045                     ___ftadd@sign:
   877                           	opt stack 0
   878                           
   879                           ; 1 bytes @ 0x44
   880  000045                     	ds	1
   881  000046                     ___ftadd@exp2:
   882                           	opt stack 0
   883                           
   884                           ; 1 bytes @ 0x45
   885  000046                     	ds	1
   886  000047                     ___ftadd@exp1:
   887                           	opt stack 0
   888  000047                     ___fttol@exp1:
   889                           	opt stack 0
   890                           
   891                           ; 1 bytes @ 0x46
   892  000047                     	ds	1
   893  000048                     ?___ftsub:
   894                           	opt stack 0
   895  000048                     ___ftsub@f1:
   896                           	opt stack 0
   897                           
   898                           ; 3 bytes @ 0x47
   899  000048                     	ds	3
   900  00004B                     ___ftsub@f2:
   901                           	opt stack 0
   902                           
   903                           ; 3 bytes @ 0x4A
   904  00004B                     	ds	3
   905  00004E                     ?_printf:
   906                           	opt stack 0
   907  00004E                     printf@f:
   908                           	opt stack 0
   909                           
   910                           ; 2 bytes @ 0x4D
   911  00004E                     	ds	6
   912  000054                     ??_printf:
   913                           
   914                           ; 1 bytes @ 0x53
   915  000054                     	ds	6
   916  00005A                     ?_testFrequency:
   917                           	opt stack 0
   918                           
   919                           ; 3 bytes @ 0x59
   920  00005A                     	ds	3
   921  00005D                     ??_testFrequency:
   922                           
   923                           ; 1 bytes @ 0x5C
   924  00005D                     	ds	4
   925  000061                     _main$1109:
   926                           	opt stack 0
   927                           
   928                           ; 3 bytes @ 0x60
   929  000061                     	ds	3
   930                           tblptru	equ	0xFF8
   931                           tblptrh	equ	0xFF7
   932                           tblptrl	equ	0xFF6
   933                           tablat	equ	0xFF5
   934                           postinc0	equ	0xFEE
   935                           postdec1	equ	0xFE5
   936                           fsr1l	equ	0xFE1
   937                           
   938 ;;
   939 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   940 ;;
   941 ;; *************** function _main *****************
   942 ;; Defined at:
   943 ;;		line 56 in file "main.c"
   944 ;; Parameters:    Size  Location     Type
   945 ;;		None
   946 ;; Auto vars:     Size  Location     Type
   947 ;;		None
   948 ;; Return value:  Size  Location     Type
   949 ;;                  1    wreg      void 
   950 ;; Registers used:
   951 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   952 ;; Tracked objects:
   953 ;;		On entry : 0/0
   954 ;;		On exit  : 0/0
   955 ;;		Unchanged: 0/0
   956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   958 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   960 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   961 ;;Total ram usage:        3 bytes
   962 ;; Hardware stack levels required when called:    7
   963 ;; This function calls:
   964 ;;		_initLCD
   965 ;;		_pinSetup
   966 ;;		_printf
   967 ;;		_testFrequency
   968 ;; This function is called by:
   969 ;;		Startup code after reset
   970 ;; This function uses a non-reentrant model
   971 ;;
   972                           
   973                           	psect	text0
   974  002ED2                     __ptext0:
   975                           	opt stack 0
   976  002ED2                     _main:
   977                           	opt stack 24
   978                           
   979                           ;main.c: 57: pinSetup();
   980                           
   981                           ;incstack = 0
   982  002ED2  EC31  F017         	call	_pinSetup	;wreg free
   983                           
   984                           ;main.c: 58: initLCD();
   985  002ED6  ECEE  F016         	call	_initLCD	;wreg free
   986                           
   987                           ;main.c: 60: printf("freq: %f",testFrequency());
   988  002EDA  ECF9  F010         	call	_testFrequency	;wreg free
   989  002EDE  C05A  F061         	movff	?_testFrequency,_main$1109
   990  002EE2  C05B  F062         	movff	?_testFrequency+1,_main$1109+1
   991  002EE6  C05C  F063         	movff	?_testFrequency+2,_main$1109+2
   992                           
   993                           ;main.c: 60: printf("freq: %f",testFrequency());
   994  002EEA  0EDE               	movlw	low STR_1
   995  002EEC  6E4E               	movwf	printf@f,c
   996  002EEE  0E10               	movlw	high STR_1
   997  002EF0  6E4F               	movwf	printf@f+1,c
   998  002EF2  C061  F050         	movff	_main$1109,?_printf+2
   999  002EF6  C062  F051         	movff	_main$1109+1,?_printf+3
  1000  002EFA  C063  F052         	movff	_main$1109+2,?_printf+4
  1001  002EFE  EC78  F008         	call	_printf	;wreg free
  1002  002F02                     l44:
  1003  002F02  D7FF               	goto	l44
  1004  002F04                     __end_of_main:
  1005                           	opt stack 0
  1006                           tblptru	equ	0xFF8
  1007                           tblptrh	equ	0xFF7
  1008                           tblptrl	equ	0xFF6
  1009                           tablat	equ	0xFF5
  1010                           postinc0	equ	0xFEE
  1011                           postdec1	equ	0xFE5
  1012                           fsr1l	equ	0xFE1
  1013                           
  1014 ;; *************** function _testFrequency *****************
  1015 ;; Defined at:
  1016 ;;		line 77 in file "timer.c"
  1017 ;; Parameters:    Size  Location     Type
  1018 ;;		None
  1019 ;; Auto vars:     Size  Location     Type
  1020 ;;  count           4   24[BANK0 ] long 
  1021 ;;  time            2   34[BANK0 ] int 
  1022 ;;  first           2   32[BANK0 ] int 
  1023 ;;  timerOff        2   30[BANK0 ] int 
  1024 ;;  prev            2   28[BANK0 ] int 
  1025 ;; Return value:  Size  Location     Type
  1026 ;;                  3   89[COMRAM] float 
  1027 ;; Registers used:
  1028 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1029 ;; Tracked objects:
  1030 ;;		On entry : 0/0
  1031 ;;		On exit  : 0/0
  1032 ;;		Unchanged: 0/0
  1033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1034 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1035 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1036 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1037 ;;      Totals:         7      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1038 ;;Total ram usage:       19 bytes
  1039 ;; Hardware stack levels used:    1
  1040 ;; Hardware stack levels required when called:    6
  1041 ;; This function calls:
  1042 ;;		_I2C_Master_Init
  1043 ;;		_I2C_Master_Read
  1044 ;;		_I2C_Master_Start
  1045 ;;		_I2C_Master_Stop
  1046 ;;		_I2C_Master_Write
  1047 ;;		___altoft
  1048 ;;		___ftdiv
  1049 ;;		_initT0
  1050 ;;		_printf
  1051 ;;		_startT0
  1052 ;; This function is called by:
  1053 ;;		_main
  1054 ;; This function uses a non-reentrant model
  1055 ;;
  1056                           
  1057                           	psect	text1
  1058  0021F2                     __ptext1:
  1059                           	opt stack 0
  1060  0021F2                     _testFrequency:
  1061                           	opt stack 24
  1062                           
  1063                           ;timer.c: 78: I2C_Master_Init(10000);
  1064                           
  1065                           ;incstack = 0
  1066  0021F2  0E10               	movlw	16
  1067  0021F4  6E1C               	movwf	I2C_Master_Init@c,c
  1068  0021F6  0E27               	movlw	39
  1069  0021F8  6E1D               	movwf	I2C_Master_Init@c+1,c
  1070  0021FA  0E00               	movlw	0
  1071  0021FC  6E1E               	movwf	I2C_Master_Init@c+2,c
  1072  0021FE  0E00               	movlw	0
  1073  002200  6E1F               	movwf	I2C_Master_Init@c+3,c
  1074  002202  ECC1  F016         	call	_I2C_Master_Init	;wreg free
  1075                           
  1076                           ;timer.c: 80: int time;
  1077                           ;timer.c: 81: int prev = 0;
  1078  002206  0E00               	movlw	0
  1079  002208  0100               	movlb	0	; () banked
  1080  00220A  6F9D               	movwf	(testFrequency@prev+1)& (0+255),b
  1081  00220C  0E00               	movlw	0
  1082  00220E  6F9C               	movwf	testFrequency@prev& (0+255),b
  1083                           
  1084                           ; BSR set to: 0
  1085                           ;timer.c: 82: int timerOff = 1;
  1086  002210  0E00               	movlw	0
  1087  002212  0100               	movlb	0	; () banked
  1088  002214  6F9F               	movwf	(testFrequency@timerOff+1)& (0+255),b
  1089  002216  0E01               	movlw	1
  1090  002218  6F9E               	movwf	testFrequency@timerOff& (0+255),b
  1091                           
  1092                           ; BSR set to: 0
  1093                           ;timer.c: 83: int first = 1;
  1094  00221A  0E00               	movlw	0
  1095  00221C  0100               	movlb	0	; () banked
  1096  00221E  6FA1               	movwf	(testFrequency@first+1)& (0+255),b
  1097  002220  0E01               	movlw	1
  1098  002222  6FA0               	movwf	testFrequency@first& (0+255),b
  1099  002224                     l4445:
  1100                           
  1101                           ;timer.c: 87: I2C_Master_Start();
  1102  002224  EC05  F018         	call	_I2C_Master_Start	;wreg free
  1103                           
  1104                           ;timer.c: 88: I2C_Master_Write(0b11010000);
  1105  002228  0E00               	movlw	0
  1106  00222A  6E11               	movwf	I2C_Master_Write@d+1,c
  1107  00222C  0ED0               	movlw	208
  1108  00222E  6E10               	movwf	I2C_Master_Write@d,c
  1109  002230  ECF3  F017         	call	_I2C_Master_Write	;wreg free
  1110                           
  1111                           ;timer.c: 89: I2C_Master_Write(0x00);
  1112  002234  0E00               	movlw	0
  1113  002236  6E11               	movwf	I2C_Master_Write@d+1,c
  1114  002238  0E00               	movlw	0
  1115  00223A  6E10               	movwf	I2C_Master_Write@d,c
  1116  00223C  ECF3  F017         	call	_I2C_Master_Write	;wreg free
  1117                           
  1118                           ;timer.c: 90: I2C_Master_Stop();
  1119  002240  EC01  F018         	call	_I2C_Master_Stop	;wreg free
  1120                           
  1121                           ;timer.c: 93: I2C_Master_Start();
  1122  002244  EC05  F018         	call	_I2C_Master_Start	;wreg free
  1123                           
  1124                           ;timer.c: 94: I2C_Master_Write(0b11010001);
  1125  002248  0E00               	movlw	0
  1126  00224A  6E11               	movwf	I2C_Master_Write@d+1,c
  1127  00224C  0ED1               	movlw	209
  1128  00224E  6E10               	movwf	I2C_Master_Write@d,c
  1129  002250  ECF3  F017         	call	_I2C_Master_Write	;wreg free
  1130                           
  1131                           ;timer.c: 95: time = I2C_Master_Read(0);
  1132  002254  0E00               	movlw	0
  1133  002256  EC95  F017         	call	_I2C_Master_Read
  1134  00225A  6E5D               	movwf	??_testFrequency& (0+255),c
  1135  00225C  505D               	movf	??_testFrequency,w,c
  1136  00225E  0100               	movlb	0	; () banked
  1137  002260  6FA2               	movwf	testFrequency@time& (0+255),b
  1138  002262  6BA3               	clrf	(testFrequency@time+1)& (0+255),b
  1139                           
  1140                           ; BSR set to: 0
  1141                           ;timer.c: 96: I2C_Master_Stop();
  1142  002264  EC01  F018         	call	_I2C_Master_Stop	;wreg free
  1143                           
  1144                           ;timer.c: 98: if(time^prev){
  1145  002268  0100               	movlb	0	; () banked
  1146  00226A  519C               	movf	testFrequency@prev& (0+255),w,b
  1147  00226C  0100               	movlb	0	; () banked
  1148  00226E  19A2               	xorwf	testFrequency@time& (0+255),w,b
  1149  002270  6E5D               	movwf	??_testFrequency& (0+255),c
  1150  002272  0100               	movlb	0	; () banked
  1151  002274  519D               	movf	(testFrequency@prev+1)& (0+255),w,b
  1152  002276  0100               	movlb	0	; () banked
  1153  002278  19A3               	xorwf	(testFrequency@time+1)& (0+255),w,b
  1154  00227A  6E5E               	movwf	(??_testFrequency+1)& (0+255),c
  1155  00227C  505D               	movf	??_testFrequency,w,c
  1156  00227E  105E               	iorwf	??_testFrequency+1,w,c
  1157  002280  B4D8               	btfsc	status,2,c
  1158  002282  D07F               	goto	l266
  1159                           
  1160                           ; BSR set to: 0
  1161                           ;timer.c: 99: if(first)
  1162  002284  0100               	movlb	0	; () banked
  1163  002286  51A0               	movf	testFrequency@first& (0+255),w,b
  1164  002288  0100               	movlb	0	; () banked
  1165  00228A  11A1               	iorwf	(testFrequency@first+1)& (0+255),w,b
  1166  00228C  B4D8               	btfsc	status,2,c
  1167  00228E  D006               	goto	l4467
  1168                           
  1169                           ; BSR set to: 0
  1170                           ;timer.c: 100: first = 0;
  1171  002290  0E00               	movlw	0
  1172  002292  0100               	movlb	0	; () banked
  1173  002294  6FA1               	movwf	(testFrequency@first+1)& (0+255),b
  1174  002296  0E00               	movlw	0
  1175  002298  6FA0               	movwf	testFrequency@first& (0+255),b
  1176  00229A  D073               	goto	l266
  1177  00229C                     l4467:
  1178                           
  1179                           ; BSR set to: 0
  1180                           ;timer.c: 101: else
  1181                           ;timer.c: 102: if(timerOff){
  1182  00229C  0100               	movlb	0	; () banked
  1183  00229E  519E               	movf	testFrequency@timerOff& (0+255),w,b
  1184  0022A0  0100               	movlb	0	; () banked
  1185  0022A2  119F               	iorwf	(testFrequency@timerOff+1)& (0+255),w,b
  1186  0022A4  B4D8               	btfsc	status,2,c
  1187  0022A6  D01C               	goto	l269
  1188                           
  1189                           ; BSR set to: 0
  1190                           ;timer.c: 103: printf("t1: %x ",time);
  1191  0022A8  0EE7               	movlw	low STR_2
  1192  0022AA  6E4E               	movwf	printf@f,c
  1193  0022AC  0E10               	movlw	high STR_2
  1194  0022AE  6E4F               	movwf	printf@f+1,c
  1195  0022B0  C0A2  F050         	movff	testFrequency@time,?_printf+2
  1196  0022B4  C0A3  F051         	movff	testFrequency@time+1,?_printf+3
  1197  0022B8  EC78  F008         	call	_printf	;wreg free
  1198                           
  1199                           ;timer.c: 104: initT0();
  1200  0022BC  ECE5  F017         	call	_initT0	;wreg free
  1201                           
  1202                           ;timer.c: 105: startT0(0);
  1203  0022C0  0E00               	movlw	0
  1204  0022C2  6E0F               	movwf	startT0@val,c
  1205  0022C4  0E00               	movlw	0
  1206  0022C6  6E10               	movwf	startT0@val+1,c
  1207  0022C8  0E00               	movlw	0
  1208  0022CA  6E11               	movwf	startT0@val+2,c
  1209  0022CC  0E00               	movlw	0
  1210  0022CE  6E12               	movwf	startT0@val+3,c
  1211  0022D0  ECED  F017         	call	_startT0	;wreg free
  1212                           
  1213                           ;timer.c: 106: timerOff = 0;
  1214  0022D4  0E00               	movlw	0
  1215  0022D6  0100               	movlb	0	; () banked
  1216  0022D8  6F9F               	movwf	(testFrequency@timerOff+1)& (0+255),b
  1217  0022DA  0E00               	movlw	0
  1218  0022DC  6F9E               	movwf	testFrequency@timerOff& (0+255),b
  1219                           
  1220                           ;timer.c: 107: }
  1221  0022DE  D051               	goto	l266
  1222  0022E0                     l269:
  1223                           
  1224                           ; BSR set to: 0
  1225                           ;timer.c: 108: else{
  1226                           ;timer.c: 109: (INTCONbits.GIE = 0);
  1227  0022E0  9EF2               	bcf	intcon,7,c	;volatile
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;timer.c: 110: printf("[%x %x]\n",TMR0L, TMR0H);
  1231  0022E2  0ED5               	movlw	low STR_3
  1232  0022E4  6E4E               	movwf	printf@f,c
  1233  0022E6  0E10               	movlw	high STR_3
  1234  0022E8  6E4F               	movwf	printf@f+1,c
  1235  0022EA  CFD6 F050          	movff	4054,?_printf+2	;volatile
  1236  0022EE  6A51               	clrf	?_printf+3,c
  1237  0022F0  CFD7 F052          	movff	4055,?_printf+4	;volatile
  1238  0022F4  6A53               	clrf	?_printf+5,c
  1239  0022F6  EC78  F008         	call	_printf	;wreg free
  1240                           
  1241                           ;timer.c: 111: T0CON = 0;
  1242  0022FA  0E00               	movlw	0
  1243  0022FC  6ED5               	movwf	4053,c	;volatile
  1244                           
  1245                           ;timer.c: 112: long count = TMR0L + (TMR0H<<8);
  1246  0022FE  50D7               	movf	4055,w,c	;volatile
  1247  002300  6E5E               	movwf	(??_testFrequency+1)& (0+255),c
  1248  002302  6A5D               	clrf	??_testFrequency& (0+255),c
  1249  002304  50D6               	movf	4054,w,c	;volatile
  1250  002306  6E5F               	movwf	(??_testFrequency+2)& (0+255),c
  1251  002308  6A60               	clrf	(??_testFrequency+3)& (0+255),c
  1252  00230A  505D               	movf	??_testFrequency,w,c
  1253  00230C  265F               	addwf	??_testFrequency+2,f,c
  1254  00230E  505E               	movf	??_testFrequency+1,w,c
  1255  002310  2260               	addwfc	??_testFrequency+3,f,c
  1256  002312  C05F  F098         	movff	??_testFrequency+2,testFrequency@count
  1257  002316  C060  F099         	movff	??_testFrequency+3,testFrequency@count+1
  1258  00231A  0100               	movlb	0	; () banked
  1259  00231C  0E00               	movlw	0
  1260  00231E  BF99               	btfsc	(testFrequency@count+1)& (0+255),7,b
  1261  002320  0EFF               	movlw	-1
  1262  002322  6F9A               	movwf	(testFrequency@count+2)& (0+255),b
  1263  002324  6F9B               	movwf	(testFrequency@count+3)& (0+255),b
  1264                           
  1265                           ; BSR set to: 0
  1266                           ;timer.c: 113: return count*256*4 / 1000000.0;
  1267  002326  C098  F05E         	movff	testFrequency@count,??_testFrequency+1
  1268  00232A  C099  F05F         	movff	testFrequency@count+1,??_testFrequency+2
  1269  00232E  C09A  F060         	movff	testFrequency@count+2,??_testFrequency+3
  1270  002332  6A5D               	clrf	??_testFrequency& (0+255),c
  1271  002334  0E02               	movlw	2
  1272  002336                     u4655:
  1273  002336  90D8               	bcf	status,0,c
  1274  002338  365D               	rlcf	??_testFrequency,f,c
  1275  00233A  365E               	rlcf	??_testFrequency+1,f,c
  1276  00233C  365F               	rlcf	??_testFrequency+2,f,c
  1277  00233E  3660               	rlcf	??_testFrequency+3,f,c
  1278  002340  2EE8               	decfsz	wreg,f,c
  1279  002342  D7F9               	goto	u4655
  1280  002344  C05D  F017         	movff	??_testFrequency,___altoft@c
  1281  002348  C05E  F018         	movff	??_testFrequency+1,___altoft@c+1
  1282  00234C  C05F  F019         	movff	??_testFrequency+2,___altoft@c+2
  1283  002350  C060  F01A         	movff	??_testFrequency+3,___altoft@c+3
  1284  002354  ECB9  F015         	call	___altoft	;wreg free
  1285  002358  C017  F021         	movff	?___altoft,___ftdiv@f1
  1286  00235C  C018  F022         	movff	?___altoft+1,___ftdiv@f1+1
  1287  002360  C019  F023         	movff	?___altoft+2,___ftdiv@f1+2
  1288  002364  0E24               	movlw	36
  1289  002366  6E24               	movwf	___ftdiv@f2,c
  1290  002368  0E74               	movlw	116
  1291  00236A  6E25               	movwf	___ftdiv@f2+1,c
  1292  00236C  0E49               	movlw	73
  1293  00236E  6E26               	movwf	___ftdiv@f2+2,c
  1294  002370  ECE7  F013         	call	___ftdiv	;wreg free
  1295  002374  C021  F05A         	movff	?___ftdiv,?_testFrequency
  1296  002378  C022  F05B         	movff	?___ftdiv+1,?_testFrequency+1
  1297  00237C  C023  F05C         	movff	?___ftdiv+2,?_testFrequency+2
  1298  002380  0012               	return	
  1299  002382                     l266:
  1300                           
  1301                           ;timer.c: 114: }
  1302                           ;timer.c: 115: }
  1303                           ;timer.c: 117: prev = time;
  1304  002382  C0A2  F09C         	movff	testFrequency@time,testFrequency@prev
  1305  002386  C0A3  F09D         	movff	testFrequency@time+1,testFrequency@prev+1
  1306  00238A  D74C               	goto	l4445
  1307  00238C                     __end_of_testFrequency:
  1308                           	opt stack 0
  1309                           tblptru	equ	0xFF8
  1310                           tblptrh	equ	0xFF7
  1311                           tblptrl	equ	0xFF6
  1312                           tablat	equ	0xFF5
  1313                           intcon	equ	0xFF2
  1314                           postinc0	equ	0xFEE
  1315                           wreg	equ	0xFE8
  1316                           postdec1	equ	0xFE5
  1317                           fsr1l	equ	0xFE1
  1318                           status	equ	0xFD8
  1319                           
  1320 ;; *************** function _startT0 *****************
  1321 ;; Defined at:
  1322 ;;		line 70 in file "timer.c"
  1323 ;; Parameters:    Size  Location     Type
  1324 ;;  val             4   14[COMRAM] long 
  1325 ;; Auto vars:     Size  Location     Type
  1326 ;;		None
  1327 ;; Return value:  Size  Location     Type
  1328 ;;                  1    wreg      void 
  1329 ;; Registers used:
  1330 ;;		status,2, status,0
  1331 ;; Tracked objects:
  1332 ;;		On entry : 0/0
  1333 ;;		On exit  : 0/0
  1334 ;;		Unchanged: 0/0
  1335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1336 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1339 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1340 ;;Total ram usage:        4 bytes
  1341 ;; Hardware stack levels used:    1
  1342 ;; Hardware stack levels required when called:    1
  1343 ;; This function calls:
  1344 ;;		Nothing
  1345 ;; This function is called by:
  1346 ;;		_testFrequency
  1347 ;;		_initServo
  1348 ;;		_updateAngle
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351                           
  1352                           	psect	text2
  1353  002FDA                     __ptext2:
  1354                           	opt stack 0
  1355  002FDA                     _startT0:
  1356                           	opt stack 28
  1357                           
  1358                           ;timer.c: 71: TMR0H = val>>8;
  1359                           
  1360                           ;incstack = 0
  1361  002FDA  C010  FFD7         	movff	startT0@val+1,4055	;volatile
  1362                           
  1363                           ;timer.c: 72: TMR0L = val;
  1364  002FDE  C00F  FFD6         	movff	startT0@val,4054	;volatile
  1365                           
  1366                           ;timer.c: 73: T0CON |= 1<<7;
  1367  002FE2  8ED5               	bsf	4053,7,c	;volatile
  1368  002FE4  0012               	return		;funcret
  1369  002FE6                     __end_of_startT0:
  1370                           	opt stack 0
  1371                           tblptru	equ	0xFF8
  1372                           tblptrh	equ	0xFF7
  1373                           tblptrl	equ	0xFF6
  1374                           tablat	equ	0xFF5
  1375                           intcon	equ	0xFF2
  1376                           postinc0	equ	0xFEE
  1377                           wreg	equ	0xFE8
  1378                           postdec1	equ	0xFE5
  1379                           fsr1l	equ	0xFE1
  1380                           status	equ	0xFD8
  1381                           
  1382 ;; *************** function _printf *****************
  1383 ;; Defined at:
  1384 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  1385 ;; Parameters:    Size  Location     Type
  1386 ;;  f               2   77[COMRAM] PTR const unsigned char 
  1387 ;;		 -> STR_5(10), STR_4(11), STR_3(9), STR_2(8), 
  1388 ;;		 -> STR_1(9), 
  1389 ;; Auto vars:     Size  Location     Type
  1390 ;;  idx             1    3[BANK0 ] unsigned char 
  1391 ;;  val             4   16[BANK0 ] unsigned long 
  1392 ;;  tmpval          4   12[BANK0 ] struct .
  1393 ;;  fval            3   20[BANK0 ] struct .
  1394 ;;  cp              3    0        PTR const unsigned char 
  1395 ;;  exp             2   10[BANK0 ] int 
  1396 ;;  flag            2    8[BANK0 ] unsigned short 
  1397 ;;  prec            2    6[BANK0 ] int 
  1398 ;;  ap              2    4[BANK0 ] PTR void [1]
  1399 ;;		 -> ?_printf(2), 
  1400 ;;  len             2    0        unsigned int 
  1401 ;;  width           2    0        int 
  1402 ;;  c               1   23[BANK0 ] char 
  1403 ;;  d               1    0        unsigned char 
  1404 ;; Return value:  Size  Location     Type
  1405 ;;                  2   77[COMRAM] int 
  1406 ;; Registers used:
  1407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1408 ;; Tracked objects:
  1409 ;;		On entry : 0/0
  1410 ;;		On exit  : 0/0
  1411 ;;		Unchanged: 0/0
  1412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1413 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1414 ;;      Locals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1415 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1416 ;;      Totals:        12      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1417 ;;Total ram usage:       36 bytes
  1418 ;; Hardware stack levels used:    1
  1419 ;; Hardware stack levels required when called:    5
  1420 ;; This function calls:
  1421 ;;		___awdiv
  1422 ;;		___ftadd
  1423 ;;		___ftge
  1424 ;;		___ftmul
  1425 ;;		___ftneg
  1426 ;;		___ftsub
  1427 ;;		___fttol
  1428 ;;		___lldiv
  1429 ;;		___llmod
  1430 ;;		___lltoft
  1431 ;;		___wmul
  1432 ;;		__div_to_l_
  1433 ;;		__tdiv_to_l_
  1434 ;;		_fround
  1435 ;;		_putch
  1436 ;;		_scale
  1437 ;; This function is called by:
  1438 ;;		_main
  1439 ;;		_testFrequency
  1440 ;;		_angleToPulseLength
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444                           	psect	text3
  1445  0010F0                     __ptext3:
  1446                           	opt stack 0
  1447  0010F0                     _printf:
  1448                           	opt stack 24
  1449                           
  1450                           ;doprnt.c: 466: va_list ap;
  1451                           ;doprnt.c: 499: signed char c;
  1452                           ;doprnt.c: 501: int width;
  1453                           ;doprnt.c: 504: int prec;
  1454                           ;doprnt.c: 508: unsigned short flag;
  1455                           ;doprnt.c: 515: char d;
  1456                           ;doprnt.c: 516: double fval;
  1457                           ;doprnt.c: 517: int exp;
  1458                           ;doprnt.c: 523: union {
  1459                           ;doprnt.c: 524: unsigned long vd;
  1460                           ;doprnt.c: 525: double integ;
  1461                           ;doprnt.c: 526: } tmpval;
  1462                           ;doprnt.c: 528: unsigned long val;
  1463                           ;doprnt.c: 529: unsigned len;
  1464                           ;doprnt.c: 530: const char * cp;
  1465                           ;doprnt.c: 533: *ap = __va_start();
  1466                           
  1467                           ;incstack = 0
  1468  0010F0  0E50               	movlw	low (?_printf+2)
  1469  0010F2  0100               	movlb	0	; () banked
  1470  0010F4  6F84               	movwf	printf@ap& (0+255),b
  1471  0010F6  0E00               	movlw	high (?_printf+2)
  1472  0010F8  0100               	movlb	0	; () banked
  1473  0010FA  6F85               	movwf	(printf@ap+1)& (0+255),b
  1474                           
  1475                           ;doprnt.c: 536: while(c = *f++) {
  1476  0010FC  EFF9  F00C         	goto	l4311
  1477  001100                     l4087:
  1478                           
  1479                           ; BSR set to: 0
  1480                           ;doprnt.c: 538: if(c != '%')
  1481  001100  0E25               	movlw	37
  1482  001102  0100               	movlb	0	; () banked
  1483  001104  1997               	xorwf	printf@c& (0+255),w,b
  1484  001106  B4D8               	btfsc	status,2,c
  1485  001108  D006               	goto	l4091
  1486                           
  1487                           ; BSR set to: 0
  1488                           ;doprnt.c: 540: {
  1489                           ;doprnt.c: 541: (putch(c) );
  1490  00110A  0100               	movlb	0	; () banked
  1491  00110C  5197               	movf	printf@c& (0+255),w,b
  1492  00110E  ECBA  F017         	call	_putch
  1493                           
  1494                           ;doprnt.c: 542: continue;
  1495  001112  EFF9  F00C         	goto	l4311
  1496  001116                     l4091:
  1497                           
  1498                           ;doprnt.c: 543: }
  1499                           ;doprnt.c: 548: flag = 0;
  1500  001116  0E00               	movlw	0
  1501  001118  0100               	movlb	0	; () banked
  1502  00111A  6F89               	movwf	(printf@flag+1)& (0+255),b
  1503  00111C  0E00               	movlw	0
  1504  00111E  6F88               	movwf	printf@flag& (0+255),b
  1505                           
  1506                           ; BSR set to: 0
  1507                           ;doprnt.c: 635: switch(c = *f++) {
  1508                           
  1509                           ;doprnt.c: 633: loop:
  1510  001120  D009               	goto	l4101
  1511  001122                     l4093:
  1512                           
  1513                           ; BSR set to: 0
  1514                           ;doprnt.c: 643: flag |= 0x10;
  1515  001122  0100               	movlb	0	; () banked
  1516  001124  8988               	bsf	printf@flag& (0+255),4,b
  1517                           
  1518                           ;doprnt.c: 644: goto loop;
  1519  001126  D006               	goto	l4101
  1520  001128                     l4095:
  1521                           
  1522                           ; BSR set to: 0
  1523                           ;doprnt.c: 663: flag |= 0x400;
  1524  001128  0100               	movlb	0	; () banked
  1525  00112A  8589               	bsf	(printf@flag+1)& (0+255),2,b
  1526                           
  1527                           ; BSR set to: 0
  1528                           ;doprnt.c: 698: case 'i':
  1529                           ;doprnt.c: 699: break;
  1530                           
  1531                           ; BSR set to: 0
  1532                           
  1533                           ;doprnt.c: 697: case 'd':
  1534                           
  1535                           ;doprnt.c: 664: break;
  1536  00112C  D022               	goto	l4103
  1537  00112E                     l4097:
  1538                           
  1539                           ; BSR set to: 0
  1540                           ;doprnt.c: 721: flag |= 0x80;
  1541  00112E  0100               	movlb	0	; () banked
  1542  001130  8F88               	bsf	printf@flag& (0+255),7,b
  1543                           
  1544                           ;doprnt.c: 723: break;
  1545  001132  D01F               	goto	l4103
  1546  001134                     l4101:
  1547                           
  1548                           ; BSR set to: 0
  1549  001134  C04E  FFF6         	movff	printf@f,tblptrl
  1550  001138  C04F  FFF7         	movff	printf@f+1,tblptrh
  1551  00113C  4A4E               	infsnz	printf@f,f,c
  1552  00113E  2A4F               	incf	printf@f+1,f,c
  1553  001140                     	if	0	;tblptru may be non-zero
  1554  001140                     	endif
  1555  001140                     	if	0	;tblptru may be non-zero
  1556  001140                     	endif
  1557  001140  0008               	tblrd		*
  1558  001142  CFF5 F097          	movff	tablat,printf@c
  1559  001146  0100               	movlb	0	; () banked
  1560  001148  5197               	movf	printf@c& (0+255),w,b
  1561                           
  1562                           ; Switch size 1, requested type "space"
  1563                           ; Number of cases is 6, Range of values is 0 to 120
  1564                           ; switch strategies available:
  1565                           ; Name         Instructions Cycles
  1566                           ; simple_byte           19    10 (average)
  1567                           ;	Chosen strategy is simple_byte
  1568  00114A  0A00               	xorlw	0	; case 0
  1569  00114C  B4D8               	btfsc	status,2,c
  1570  00114E  0012               	return	
  1571  001150  0A64               	xorlw	100	; case 100
  1572  001152  B4D8               	btfsc	status,2,c
  1573  001154  D00E               	goto	l4103
  1574  001156  0A02               	xorlw	2	; case 102
  1575  001158  B4D8               	btfsc	status,2,c
  1576  00115A  D7E6               	goto	l4095
  1577  00115C  0A0F               	xorlw	15	; case 105
  1578  00115E  B4D8               	btfsc	status,2,c
  1579  001160  D008               	goto	l4103
  1580  001162  0A05               	xorlw	5	; case 108
  1581  001164  B4D8               	btfsc	status,2,c
  1582  001166  D7DD               	goto	l4093
  1583  001168  0A14               	xorlw	20	; case 120
  1584  00116A  B4D8               	btfsc	status,2,c
  1585  00116C  D7E0               	goto	l4097
  1586  00116E  EFF9  F00C         	goto	l4311
  1587  001172                     l4103:
  1588                           
  1589                           ; BSR set to: 0
  1590                           ;doprnt.c: 825: if(flag & (0x700)) {
  1591  001172  0E07               	movlw	7
  1592  001174  0100               	movlb	0	; () banked
  1593  001176  1589               	andwf	(printf@flag+1)& (0+255),w,b
  1594  001178  B4D8               	btfsc	status,2,c
  1595  00117A  D2E6               	goto	l426
  1596                           
  1597                           ; BSR set to: 0
  1598                           ;doprnt.c: 829: prec = 6;
  1599  00117C  0E00               	movlw	0
  1600  00117E  0100               	movlb	0	; () banked
  1601  001180  6F87               	movwf	(printf@prec+1)& (0+255),b
  1602  001182  0E06               	movlw	6
  1603  001184  6F86               	movwf	printf@prec& (0+255),b
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1607  001186  C084  FFD9         	movff	printf@ap,fsr2l
  1608  00118A  C085  FFDA         	movff	printf@ap+1,fsr2h
  1609  00118E  CFDE F094          	movff	postinc2,printf@fval
  1610  001192  CFDE F095          	movff	postinc2,printf@fval+1
  1611  001196  CFDD F096          	movff	postdec2,printf@fval+2
  1612                           
  1613                           ; BSR set to: 0
  1614  00119A  0E03               	movlw	3
  1615  00119C  0100               	movlb	0	; () banked
  1616  00119E  2784               	addwf	printf@ap& (0+255),f,b
  1617  0011A0  0E00               	movlw	0
  1618  0011A2  2385               	addwfc	(printf@ap+1)& (0+255),f,b
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;doprnt.c: 831: if(fval < 0.0) {
  1622  0011A4  0100               	movlb	0	; () banked
  1623  0011A6  AF96               	btfss	(printf@fval+2)& (0+255),7,b
  1624  0011A8  D011               	goto	l4117
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;doprnt.c: 832: fval = -fval;
  1628  0011AA  C094  F00F         	movff	printf@fval,___ftneg@f1
  1629  0011AE  C095  F010         	movff	printf@fval+1,___ftneg@f1+1
  1630  0011B2  C096  F011         	movff	printf@fval+2,___ftneg@f1+2
  1631  0011B6  ECA8  F017         	call	___ftneg	;wreg free
  1632  0011BA  C00F  F094         	movff	?___ftneg,printf@fval
  1633  0011BE  C010  F095         	movff	?___ftneg+1,printf@fval+1
  1634  0011C2  C011  F096         	movff	?___ftneg+2,printf@fval+2
  1635                           
  1636                           ;doprnt.c: 833: flag |= 0x03;
  1637  0011C6  0E03               	movlw	3
  1638  0011C8  0100               	movlb	0	; () banked
  1639  0011CA  1388               	iorwf	printf@flag& (0+255),f,b
  1640  0011CC                     l4117:
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;doprnt.c: 834: }
  1644                           ;doprnt.c: 835: exp = 0;
  1645  0011CC  0E00               	movlw	0
  1646  0011CE  0100               	movlb	0	; () banked
  1647  0011D0  6F8B               	movwf	(printf@exp+1)& (0+255),b
  1648  0011D2  0E00               	movlw	0
  1649  0011D4  6F8A               	movwf	printf@exp& (0+255),b
  1650                           
  1651                           ; BSR set to: 0
  1652                           ;doprnt.c: 836: if( fval!=0) {
  1653  0011D6  0100               	movlb	0	; () banked
  1654  0011D8  5194               	movf	printf@fval& (0+255),w,b
  1655  0011DA  0100               	movlb	0	; () banked
  1656  0011DC  1195               	iorwf	(printf@fval+1)& (0+255),w,b
  1657  0011DE  0100               	movlb	0	; () banked
  1658  0011E0  1196               	iorwf	(printf@fval+2)& (0+255),w,b
  1659  0011E2  B4D8               	btfsc	status,2,c
  1660  0011E4  D08B               	goto	l4145
  1661                           
  1662                           ; BSR set to: 0
  1663                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1664  0011E6  0E82               	movlw	130
  1665  0011E8  6E54               	movwf	??_printf& (0+255),c
  1666  0011EA  0EFF               	movlw	255
  1667  0011EC  6E55               	movwf	(??_printf+1)& (0+255),c
  1668  0011EE  C094  F056         	movff	printf@fval,??_printf+2
  1669  0011F2  C095  F057         	movff	printf@fval+1,??_printf+3
  1670  0011F6  C096  F058         	movff	printf@fval+2,??_printf+4
  1671  0011FA  C097  F059         	movff	printf@fval+3,??_printf+5
  1672  0011FE  0E10               	movlw	16
  1673  001200  D005               	goto	u4190
  1674  001202                     u4195:
  1675  001202  90D8               	bcf	status,0,c
  1676  001204  3259               	rrcf	??_printf+5,f,c
  1677  001206  3258               	rrcf	??_printf+4,f,c
  1678  001208  3257               	rrcf	??_printf+3,f,c
  1679  00120A  3256               	rrcf	??_printf+2,f,c
  1680  00120C                     u4190:
  1681  00120C  2EE8               	decfsz	wreg,f,c
  1682  00120E  D7F9               	goto	u4195
  1683  001210  5056               	movf	??_printf+2,w,c
  1684  001212  2454               	addwf	??_printf,w,c
  1685  001214  0100               	movlb	0	; () banked
  1686  001216  6F8A               	movwf	printf@exp& (0+255),b
  1687  001218  0E00               	movlw	0
  1688  00121A  2055               	addwfc	??_printf+1,w,c
  1689  00121C  0100               	movlb	0	; () banked
  1690  00121E  6F8B               	movwf	(printf@exp+1)& (0+255),b
  1691                           
  1692                           ; BSR set to: 0
  1693                           ;doprnt.c: 838: exp--;
  1694  001220  0100               	movlb	0	; () banked
  1695  001222  078A               	decf	printf@exp& (0+255),f,b
  1696  001224  A0D8               	btfss	status,0,c
  1697  001226  078B               	decf	(printf@exp+1)& (0+255),f,b
  1698                           
  1699                           ; BSR set to: 0
  1700                           ;doprnt.c: 839: exp *= 3;
  1701  001228  C08A  F01D         	movff	printf@exp,___wmul@multiplier
  1702  00122C  C08B  F01E         	movff	printf@exp+1,___wmul@multiplier+1
  1703  001230  0E00               	movlw	0
  1704  001232  6E20               	movwf	___wmul@multiplicand+1,c
  1705  001234  0E03               	movlw	3
  1706  001236  6E1F               	movwf	___wmul@multiplicand,c
  1707  001238  EC82  F017         	call	___wmul	;wreg free
  1708  00123C  C01D  F08A         	movff	?___wmul,printf@exp
  1709  001240  C01E  F08B         	movff	?___wmul+1,printf@exp+1
  1710                           
  1711                           ;doprnt.c: 840: exp /= 10;
  1712  001244  C08A  F015         	movff	printf@exp,___awdiv@dividend
  1713  001248  C08B  F016         	movff	printf@exp+1,___awdiv@dividend+1
  1714  00124C  0E00               	movlw	0
  1715  00124E  6E18               	movwf	___awdiv@divisor+1,c
  1716  001250  0E0A               	movlw	10
  1717  001252  6E17               	movwf	___awdiv@divisor,c
  1718  001254  ECF9  F014         	call	___awdiv	;wreg free
  1719  001258  C015  F08A         	movff	?___awdiv,printf@exp
  1720  00125C  C016  F08B         	movff	?___awdiv+1,printf@exp+1
  1721                           
  1722                           ;doprnt.c: 841: if(exp < 0)
  1723  001260  0100               	movlb	0	; () banked
  1724  001262  AF8B               	btfss	(printf@exp+1)& (0+255),7,b
  1725  001264  D004               	goto	l4133
  1726                           
  1727                           ; BSR set to: 0
  1728                           ;doprnt.c: 842: exp--;
  1729  001266  0100               	movlb	0	; () banked
  1730  001268  078A               	decf	printf@exp& (0+255),f,b
  1731  00126A  A0D8               	btfss	status,0,c
  1732  00126C  078B               	decf	(printf@exp+1)& (0+255),f,b
  1733  00126E                     l4133:
  1734                           
  1735                           ; BSR set to: 0
  1736                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1737  00126E  0100               	movlb	0	; () banked
  1738  001270  518A               	movf	printf@exp& (0+255),w,b
  1739  001272  0800               	sublw	0
  1740  001274  EC08  F00D         	call	_scale
  1741  001278  C032  F08C         	movff	?_scale,printf@tmpval
  1742  00127C  C033  F08D         	movff	?_scale+1,printf@tmpval+1
  1743  001280  C034  F08E         	movff	?_scale+2,printf@tmpval+2
  1744                           
  1745                           ;doprnt.c: 847: tmpval.integ *= fval;
  1746  001284  C08C  F023         	movff	printf@tmpval,___ftmul@f1
  1747  001288  C08D  F024         	movff	printf@tmpval+1,___ftmul@f1+1
  1748  00128C  C08E  F025         	movff	printf@tmpval+2,___ftmul@f1+2
  1749  001290  C094  F026         	movff	printf@fval,___ftmul@f2
  1750  001294  C095  F027         	movff	printf@fval+1,___ftmul@f2+1
  1751  001298  C096  F028         	movff	printf@fval+2,___ftmul@f2+2
  1752  00129C  ECF3  F012         	call	___ftmul	;wreg free
  1753  0012A0  C023  F08C         	movff	?___ftmul,printf@tmpval
  1754  0012A4  C024  F08D         	movff	?___ftmul+1,printf@tmpval+1
  1755  0012A8  C025  F08E         	movff	?___ftmul+2,printf@tmpval+2
  1756                           
  1757                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1758  0012AC  C08C  F00F         	movff	printf@tmpval,___ftge@ff1
  1759  0012B0  C08D  F010         	movff	printf@tmpval+1,___ftge@ff1+1
  1760  0012B4  C08E  F011         	movff	printf@tmpval+2,___ftge@ff1+2
  1761  0012B8  0E00               	movlw	0
  1762  0012BA  6E12               	movwf	___ftge@ff2,c
  1763  0012BC  0E80               	movlw	128
  1764  0012BE  6E13               	movwf	___ftge@ff2+1,c
  1765  0012C0  0E3F               	movlw	63
  1766  0012C2  6E14               	movwf	___ftge@ff2+2,c
  1767  0012C4  ECB1  F014         	call	___ftge	;wreg free
  1768  0012C8  B0D8               	btfsc	status,0,c
  1769  0012CA  D005               	goto	l4141
  1770                           
  1771                           ;doprnt.c: 849: exp--;
  1772  0012CC  0100               	movlb	0	; () banked
  1773  0012CE  078A               	decf	printf@exp& (0+255),f,b
  1774  0012D0  A0D8               	btfss	status,0,c
  1775  0012D2  078B               	decf	(printf@exp+1)& (0+255),f,b
  1776  0012D4  D013               	goto	l4145
  1777  0012D6                     l4141:
  1778                           
  1779                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1780  0012D6  C08C  F00F         	movff	printf@tmpval,___ftge@ff1
  1781  0012DA  C08D  F010         	movff	printf@tmpval+1,___ftge@ff1+1
  1782  0012DE  C08E  F011         	movff	printf@tmpval+2,___ftge@ff1+2
  1783  0012E2  0E00               	movlw	0
  1784  0012E4  6E12               	movwf	___ftge@ff2,c
  1785  0012E6  0E20               	movlw	32
  1786  0012E8  6E13               	movwf	___ftge@ff2+1,c
  1787  0012EA  0E41               	movlw	65
  1788  0012EC  6E14               	movwf	___ftge@ff2+2,c
  1789  0012EE  ECB1  F014         	call	___ftge	;wreg free
  1790  0012F2  A0D8               	btfss	status,0,c
  1791  0012F4  D003               	goto	l4145
  1792                           
  1793                           ;doprnt.c: 851: exp++;
  1794  0012F6  0100               	movlb	0	; () banked
  1795  0012F8  4B8A               	infsnz	printf@exp& (0+255),f,b
  1796  0012FA  2B8B               	incf	(printf@exp+1)& (0+255),f,b
  1797  0012FC                     l4145:
  1798                           
  1799                           ;doprnt.c: 852: }
  1800                           ;doprnt.c: 1112: if(prec <= 12)
  1801  0012FC  0100               	movlb	0	; () banked
  1802  0012FE  BF87               	btfsc	(printf@prec+1)& (0+255),7,b
  1803  001300  D008               	goto	l4147
  1804  001302  0100               	movlb	0	; () banked
  1805  001304  5187               	movf	(printf@prec+1)& (0+255),w,b
  1806  001306  E11D               	bnz	l4149
  1807  001308  0E0D               	movlw	13
  1808  00130A  0100               	movlb	0	; () banked
  1809  00130C  5D86               	subwf	printf@prec& (0+255),w,b
  1810  00130E  B0D8               	btfsc	status,0,c
  1811  001310  D018               	goto	l4149
  1812  001312                     l4147:
  1813                           
  1814                           ; BSR set to: 0
  1815                           ;doprnt.c: 1113: fval += fround(prec);
  1816  001312  C094  F03C         	movff	printf@fval,___ftadd@f1
  1817  001316  C095  F03D         	movff	printf@fval+1,___ftadd@f1+1
  1818  00131A  C096  F03E         	movff	printf@fval+2,___ftadd@f1+2
  1819  00131E  0100               	movlb	0	; () banked
  1820  001320  5186               	movf	printf@prec& (0+255),w,b
  1821  001322  EC00  F00F         	call	_fround
  1822  001326  C032  F03F         	movff	?_fround,___ftadd@f2
  1823  00132A  C033  F040         	movff	?_fround+1,___ftadd@f2+1
  1824  00132E  C034  F041         	movff	?_fround+2,___ftadd@f2+2
  1825  001332  EC23  F010         	call	___ftadd	;wreg free
  1826  001336  C03C  F094         	movff	?___ftadd,printf@fval
  1827  00133A  C03D  F095         	movff	?___ftadd+1,printf@fval+1
  1828  00133E  C03E  F096         	movff	?___ftadd+2,printf@fval+2
  1829  001342                     l4149:
  1830                           
  1831                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1832  001342  0100               	movlb	0	; () banked
  1833  001344  BF8B               	btfsc	(printf@exp+1)& (0+255),7,b
  1834  001346  D008               	goto	l4151
  1835  001348  0100               	movlb	0	; () banked
  1836  00134A  518B               	movf	(printf@exp+1)& (0+255),w,b
  1837  00134C  E126               	bnz	l4157
  1838  00134E  0E0A               	movlw	10
  1839  001350  0100               	movlb	0	; () banked
  1840  001352  5D8A               	subwf	printf@exp& (0+255),w,b
  1841  001354  B0D8               	btfsc	status,0,c
  1842  001356  D021               	goto	l4157
  1843  001358                     l4151:
  1844                           
  1845                           ; BSR set to: 0
  1846  001358  0100               	movlb	0	; () banked
  1847  00135A  5194               	movf	printf@fval& (0+255),w,b
  1848  00135C  0100               	movlb	0	; () banked
  1849  00135E  1195               	iorwf	(printf@fval+1)& (0+255),w,b
  1850  001360  0100               	movlb	0	; () banked
  1851  001362  1196               	iorwf	(printf@fval+2)& (0+255),w,b
  1852  001364  B4D8               	btfsc	status,2,c
  1853  001366  D05B               	goto	l4171
  1854                           
  1855                           ; BSR set to: 0
  1856  001368  C094  F039         	movff	printf@fval,___fttol@f1
  1857  00136C  C095  F03A         	movff	printf@fval+1,___fttol@f1+1
  1858  001370  C096  F03B         	movff	printf@fval+2,___fttol@f1+2
  1859  001374  EC6D  F013         	call	___fttol	;wreg free
  1860  001378  5039               	movf	?___fttol,w,c
  1861  00137A  103A               	iorwf	?___fttol+1,w,c
  1862  00137C  103B               	iorwf	?___fttol+2,w,c
  1863  00137E  103C               	iorwf	?___fttol+3,w,c
  1864  001380  A4D8               	btfss	status,2,c
  1865  001382  D04D               	goto	l4171
  1866  001384  0100               	movlb	0	; () banked
  1867  001386  BF8B               	btfsc	(printf@exp+1)& (0+255),7,b
  1868  001388  D04A               	goto	l4171
  1869  00138A  0100               	movlb	0	; () banked
  1870  00138C  518B               	movf	(printf@exp+1)& (0+255),w,b
  1871  00138E  E105               	bnz	l4157
  1872  001390  0E02               	movlw	2
  1873  001392  0100               	movlb	0	; () banked
  1874  001394  5D8A               	subwf	printf@exp& (0+255),w,b
  1875  001396  A0D8               	btfss	status,0,c
  1876  001398  D042               	goto	l4171
  1877  00139A                     l4157:
  1878                           
  1879                           ; BSR set to: 0
  1880                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1881  00139A  C08C  F00F         	movff	printf@tmpval,___ftge@ff1
  1882  00139E  C08D  F010         	movff	printf@tmpval+1,___ftge@ff1+1
  1883  0013A2  C08E  F011         	movff	printf@tmpval+2,___ftge@ff1+2
  1884  0013A6  0E70               	movlw	112
  1885  0013A8  6E12               	movwf	___ftge@ff2,c
  1886  0013AA  0E89               	movlw	137
  1887  0013AC  6E13               	movwf	___ftge@ff2+1,c
  1888  0013AE  0E40               	movlw	64
  1889  0013B0  6E14               	movwf	___ftge@ff2+2,c
  1890  0013B2  ECB1  F014         	call	___ftge	;wreg free
  1891  0013B6  B0D8               	btfsc	status,0,c
  1892  0013B8  D003               	goto	l4161
  1893                           
  1894                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1895  0013BA  0100               	movlb	0	; () banked
  1896  0013BC  0EF7               	movlw	247
  1897  0013BE  D002               	goto	L1
  1898  0013C0                     l4161:
  1899                           
  1900                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1901  0013C0  0100               	movlb	0	; () banked
  1902  0013C2  0EF8               	movlw	248
  1903  0013C4                     L1:
  1904  0013C4  278A               	addwf	printf@exp& (0+255),f,b
  1905  0013C6  0EFF               	movlw	255
  1906  0013C8  238B               	addwfc	(printf@exp+1)& (0+255),f,b
  1907                           
  1908                           ; BSR set to: 0
  1909                           ;doprnt.c: 1124: }
  1910                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1911                           
  1912                           ; BSR set to: 0
  1913  0013CA  0100               	movlb	0	; () banked
  1914  0013CC  518A               	movf	printf@exp& (0+255),w,b
  1915  0013CE  EC08  F00D         	call	_scale
  1916  0013D2  C032  F08C         	movff	?_scale,printf@tmpval
  1917  0013D6  C033  F08D         	movff	?_scale+1,printf@tmpval+1
  1918  0013DA  C034  F08E         	movff	?_scale+2,printf@tmpval+2
  1919                           
  1920                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1921  0013DE  C094  F00F         	movff	printf@fval,__tdiv_to_l_@f1
  1922  0013E2  C095  F010         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1923  0013E6  C096  F011         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1924  0013EA  C08C  F012         	movff	printf@tmpval,__tdiv_to_l_@f2
  1925  0013EE  C08D  F013         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  1926  0013F2  C08E  F014         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  1927  0013F6  ECC6  F011         	call	__tdiv_to_l_	;wreg free
  1928  0013FA  C00F  F090         	movff	?__tdiv_to_l_,printf@val
  1929  0013FE  C010  F091         	movff	?__tdiv_to_l_+1,printf@val+1
  1930  001402  C011  F092         	movff	?__tdiv_to_l_+2,printf@val+2
  1931  001406  C012  F093         	movff	?__tdiv_to_l_+3,printf@val+3
  1932                           
  1933                           ;doprnt.c: 1129: fval = 0.0;
  1934  00140A  0E00               	movlw	0
  1935  00140C  0100               	movlb	0	; () banked
  1936  00140E  6F94               	movwf	printf@fval& (0+255),b
  1937  001410  0E00               	movlw	0
  1938  001412  0100               	movlb	0	; () banked
  1939  001414  6F95               	movwf	(printf@fval+1)& (0+255),b
  1940  001416  0E00               	movlw	0
  1941  001418  0100               	movlb	0	; () banked
  1942  00141A  6F96               	movwf	(printf@fval+2)& (0+255),b
  1943                           
  1944                           ;doprnt.c: 1130: } else {
  1945  00141C  D033               	goto	l4175
  1946  00141E                     l4171:
  1947                           
  1948                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1949  00141E  C094  F039         	movff	printf@fval,___fttol@f1
  1950  001422  C095  F03A         	movff	printf@fval+1,___fttol@f1+1
  1951  001426  C096  F03B         	movff	printf@fval+2,___fttol@f1+2
  1952  00142A  EC6D  F013         	call	___fttol	;wreg free
  1953  00142E  C039  F090         	movff	?___fttol,printf@val
  1954  001432  C03A  F091         	movff	?___fttol+1,printf@val+1
  1955  001436  C03B  F092         	movff	?___fttol+2,printf@val+2
  1956  00143A  C03C  F093         	movff	?___fttol+3,printf@val+3
  1957                           
  1958                           ;doprnt.c: 1132: fval -= (double)val;
  1959  00143E  C094  F048         	movff	printf@fval,___ftsub@f1
  1960  001442  C095  F049         	movff	printf@fval+1,___ftsub@f1+1
  1961  001446  C096  F04A         	movff	printf@fval+2,___ftsub@f1+2
  1962  00144A  C090  F017         	movff	printf@val,___lltoft@c
  1963  00144E  C091  F018         	movff	printf@val+1,___lltoft@c+1
  1964  001452  C092  F019         	movff	printf@val+2,___lltoft@c+2
  1965  001456  C093  F01A         	movff	printf@val+3,___lltoft@c+3
  1966  00145A  EC93  F016         	call	___lltoft	;wreg free
  1967  00145E  C017  F04B         	movff	?___lltoft,___ftsub@f2
  1968  001462  C018  F04C         	movff	?___lltoft+1,___ftsub@f2+1
  1969  001466  C019  F04D         	movff	?___lltoft+2,___ftsub@f2+2
  1970  00146A  EC11  F017         	call	___ftsub	;wreg free
  1971  00146E  C048  F094         	movff	?___ftsub,printf@fval
  1972  001472  C049  F095         	movff	?___ftsub+1,printf@fval+1
  1973  001476  C04A  F096         	movff	?___ftsub+2,printf@fval+2
  1974                           
  1975                           ;doprnt.c: 1133: exp = 0;
  1976  00147A  0E00               	movlw	0
  1977  00147C  0100               	movlb	0	; () banked
  1978  00147E  6F8B               	movwf	(printf@exp+1)& (0+255),b
  1979  001480  0E00               	movlw	0
  1980  001482  6F8A               	movwf	printf@exp& (0+255),b
  1981  001484                     l4175:
  1982                           
  1983                           ; BSR set to: 0
  1984                           ;doprnt.c: 1134: }
  1985                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1986  001484  0E01               	movlw	1
  1987  001486  0100               	movlb	0	; () banked
  1988  001488  6F97               	movwf	printf@c& (0+255),b
  1989  00148A                     l4177:
  1990                           
  1991                           ; BSR set to: 0
  1992  00148A  0E0A               	movlw	10
  1993  00148C  0100               	movlb	0	; () banked
  1994  00148E  1997               	xorwf	printf@c& (0+255),w,b
  1995  001490  B4D8               	btfsc	status,2,c
  1996  001492  D01E               	goto	l4189
  1997                           
  1998                           ; BSR set to: 0
  1999                           ;doprnt.c: 1137: if(val < dpowers[c])
  2000                           
  2001                           ; BSR set to: 0
  2002                           
  2003                           ; BSR set to: 0
  2004  001494  0100               	movlb	0	; () banked
  2005  001496  5197               	movf	printf@c& (0+255),w,b
  2006  001498  0D04               	mullw	4
  2007  00149A  0E01               	movlw	low _dpowers
  2008  00149C  24F3               	addwf	prodl,w,c
  2009  00149E  6EF6               	movwf	tblptrl,c
  2010  0014A0  0E10               	movlw	high _dpowers
  2011  0014A2  20F4               	addwfc	prodh,w,c
  2012  0014A4  6EF7               	movwf	tblptrh,c
  2013  0014A6                     	if	0	;There are less than 3 active tblptr bytes
  2014  0014A6                     	endif
  2015  0014A6  0009               	tblrd		*+
  2016  0014A8  50F5               	movf	tablat,w,c
  2017  0014AA  0100               	movlb	0	; () banked
  2018  0014AC  5D90               	subwf	printf@val& (0+255),w,b
  2019  0014AE  0009               	tblrd		*+
  2020  0014B0  50F5               	movf	tablat,w,c
  2021  0014B2  0100               	movlb	0	; () banked
  2022  0014B4  5991               	subwfb	(printf@val+1)& (0+255),w,b
  2023  0014B6  0009               	tblrd		*+
  2024  0014B8  50F5               	movf	tablat,w,c
  2025  0014BA  0100               	movlb	0	; () banked
  2026  0014BC  5992               	subwfb	(printf@val+2)& (0+255),w,b
  2027  0014BE  0009               	tblrd		*+
  2028  0014C0  50F5               	movf	tablat,w,c
  2029  0014C2  0100               	movlb	0	; () banked
  2030  0014C4  5993               	subwfb	(printf@val+3)& (0+255),w,b
  2031  0014C6  A0D8               	btfss	status,0,c
  2032  0014C8  D003               	goto	l4189
  2033                           
  2034                           ; BSR set to: 0
  2035                           
  2036                           ; BSR set to: 0
  2037                           
  2038                           ; BSR set to: 0
  2039                           ;doprnt.c: 1138: break;
  2040  0014CA  0100               	movlb	0	; () banked
  2041  0014CC  2B97               	incf	printf@c& (0+255),f,b
  2042  0014CE  D7DD               	goto	l4177
  2043  0014D0                     l4189:
  2044                           
  2045                           ; BSR set to: 0
  2046                           ;doprnt.c: 1175: {
  2047                           ;doprnt.c: 1188: if(flag & 0x03)
  2048  0014D0  0E03               	movlw	3
  2049  0014D2  0100               	movlb	0	; () banked
  2050  0014D4  1588               	andwf	printf@flag& (0+255),w,b
  2051  0014D6  6E54               	movwf	??_printf& (0+255),c
  2052  0014D8  0E00               	movlw	0
  2053  0014DA  0100               	movlb	0	; () banked
  2054  0014DC  1589               	andwf	(printf@flag+1)& (0+255),w,b
  2055  0014DE  6E55               	movwf	(??_printf+1)& (0+255),c
  2056  0014E0  5054               	movf	??_printf,w,c
  2057  0014E2  1055               	iorwf	??_printf+1,w,c
  2058  0014E4  B4D8               	btfsc	status,2,c
  2059  0014E6  D04A               	goto	l4199
  2060                           
  2061                           ; BSR set to: 0
  2062                           ;doprnt.c: 1190: (putch('-') );
  2063  0014E8  0E2D               	movlw	45
  2064  0014EA  ECBA  F017         	call	_putch
  2065                           
  2066                           ;doprnt.c: 1195: }
  2067                           ;doprnt.c: 1196: while(c--) {
  2068  0014EE  D046               	goto	l4199
  2069  0014F0                     l4193:
  2070                           
  2071                           ;doprnt.c: 1200: {
  2072                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2073  0014F0  C090  F00F         	movff	printf@val,___lldiv@dividend
  2074  0014F4  C091  F010         	movff	printf@val+1,___lldiv@dividend+1
  2075  0014F8  C092  F011         	movff	printf@val+2,___lldiv@dividend+2
  2076  0014FC  C093  F012         	movff	printf@val+3,___lldiv@dividend+3
  2077  001500  0100               	movlb	0	; () banked
  2078  001502  5197               	movf	printf@c& (0+255),w,b
  2079  001504  0D04               	mullw	4
  2080  001506  0E01               	movlw	low _dpowers
  2081  001508  24F3               	addwf	prodl,w,c
  2082  00150A  6EF6               	movwf	tblptrl,c
  2083  00150C  0E10               	movlw	high _dpowers
  2084  00150E  20F4               	addwfc	prodh,w,c
  2085  001510  6EF7               	movwf	tblptrh,c
  2086  001512                     	if	0	;There are less than 3 active tblptr bytes
  2087  001512                     	endif
  2088  001512  0009               	tblrd		*+
  2089  001514  CFF5 F013          	movff	tablat,___lldiv@divisor
  2090  001518  0009               	tblrd		*+
  2091  00151A  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  2092  00151E  0009               	tblrd		*+
  2093  001520  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  2094  001524  000A               	tblrd		*-
  2095  001526  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  2096  00152A  EC3B  F015         	call	___lldiv	;wreg free
  2097  00152E  C00F  F08C         	movff	?___lldiv,printf@tmpval
  2098  001532  C010  F08D         	movff	?___lldiv+1,printf@tmpval+1
  2099  001536  C011  F08E         	movff	?___lldiv+2,printf@tmpval+2
  2100  00153A  C012  F08F         	movff	?___lldiv+3,printf@tmpval+3
  2101                           
  2102                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2103  00153E  C08C  F01C         	movff	printf@tmpval,___llmod@dividend
  2104  001542  C08D  F01D         	movff	printf@tmpval+1,___llmod@dividend+1
  2105  001546  C08E  F01E         	movff	printf@tmpval+2,___llmod@dividend+2
  2106  00154A  C08F  F01F         	movff	printf@tmpval+3,___llmod@dividend+3
  2107  00154E  0E0A               	movlw	10
  2108  001550  6E20               	movwf	___llmod@divisor,c
  2109  001552  0E00               	movlw	0
  2110  001554  6E21               	movwf	___llmod@divisor+1,c
  2111  001556  0E00               	movlw	0
  2112  001558  6E22               	movwf	___llmod@divisor+2,c
  2113  00155A  0E00               	movlw	0
  2114  00155C  6E23               	movwf	___llmod@divisor+3,c
  2115  00155E  EC2D  F016         	call	___llmod	;wreg free
  2116  001562  C01C  F08C         	movff	?___llmod,printf@tmpval
  2117  001566  C01D  F08D         	movff	?___llmod+1,printf@tmpval+1
  2118  00156A  C01E  F08E         	movff	?___llmod+2,printf@tmpval+2
  2119  00156E  C01F  F08F         	movff	?___llmod+3,printf@tmpval+3
  2120                           
  2121                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  2122  001572  0100               	movlb	0	; () banked
  2123  001574  518C               	movf	printf@tmpval& (0+255),w,b
  2124  001576  0F30               	addlw	48
  2125  001578  ECBA  F017         	call	_putch
  2126  00157C                     l4199:
  2127  00157C  0100               	movlb	0	; () banked
  2128  00157E  0797               	decf	printf@c& (0+255),f,b
  2129  001580  0100               	movlb	0	; () banked
  2130  001582  2997               	incf	printf@c& (0+255),w,b
  2131  001584  B4D8               	btfsc	status,2,c
  2132  001586  D008               	goto	l4205
  2133  001588  D7B3               	goto	l4193
  2134  00158A                     l4201:
  2135                           
  2136                           ; BSR set to: 0
  2137                           ;doprnt.c: 1208: (putch('0') );
  2138  00158A  0E30               	movlw	48
  2139  00158C  ECBA  F017         	call	_putch
  2140                           
  2141                           ;doprnt.c: 1209: exp--;
  2142  001590  0100               	movlb	0	; () banked
  2143  001592  078A               	decf	printf@exp& (0+255),f,b
  2144  001594  A0D8               	btfss	status,0,c
  2145  001596  078B               	decf	(printf@exp+1)& (0+255),f,b
  2146  001598                     l4205:
  2147                           
  2148                           ; BSR set to: 0
  2149  001598  0100               	movlb	0	; () banked
  2150  00159A  BF8B               	btfsc	(printf@exp+1)& (0+255),7,b
  2151  00159C  D007               	goto	l4207
  2152  00159E  0100               	movlb	0	; () banked
  2153  0015A0  518B               	movf	(printf@exp+1)& (0+255),w,b
  2154  0015A2  E1F3               	bnz	l4201
  2155  0015A4  0100               	movlb	0	; () banked
  2156  0015A6  058A               	decf	printf@exp& (0+255),w,b
  2157  0015A8  B0D8               	btfsc	status,0,c
  2158  0015AA  D7EF               	goto	l4201
  2159  0015AC                     l4207:
  2160                           
  2161                           ; BSR set to: 0
  2162                           ;doprnt.c: 1210: }
  2163                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2164  0015AC  0100               	movlb	0	; () banked
  2165  0015AE  BF87               	btfsc	(printf@prec+1)& (0+255),7,b
  2166  0015B0  D00C               	goto	l454
  2167  0015B2  0100               	movlb	0	; () banked
  2168  0015B4  5187               	movf	(printf@prec+1)& (0+255),w,b
  2169  0015B6  E105               	bnz	u4350
  2170  0015B8  0E09               	movlw	9
  2171  0015BA  0100               	movlb	0	; () banked
  2172  0015BC  5D86               	subwf	printf@prec& (0+255),w,b
  2173  0015BE  A0D8               	btfss	status,0,c
  2174  0015C0  D004               	goto	l454
  2175  0015C2                     u4350:
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2179  0015C2  0E08               	movlw	8
  2180  0015C4  0100               	movlb	0	; () banked
  2181  0015C6  6F97               	movwf	printf@c& (0+255),b
  2182  0015C8  D002               	goto	l4211
  2183  0015CA                     l454:
  2184                           
  2185                           ; BSR set to: 0
  2186                           ;doprnt.c: 1213: else
  2187                           ;doprnt.c: 1214: c = prec;
  2188  0015CA  C086  F097         	movff	printf@prec,printf@c
  2189  0015CE                     l4211:
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;doprnt.c: 1215: prec -= c;
  2193  0015CE  0100               	movlb	0	; () banked
  2194  0015D0  5197               	movf	printf@c& (0+255),w,b
  2195  0015D2  0100               	movlb	0	; () banked
  2196  0015D4  5F86               	subwf	printf@prec& (0+255),f,b
  2197  0015D6  0E00               	movlw	0
  2198  0015D8  0100               	movlb	0	; () banked
  2199  0015DA  BF97               	btfsc	printf@c& (0+255),7,b
  2200  0015DC  0EFF               	movlw	255
  2201  0015DE  0100               	movlb	0	; () banked
  2202  0015E0  5B87               	subwfb	(printf@prec+1)& (0+255),f,b
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;doprnt.c: 1219: if(c)
  2206  0015E2  0100               	movlb	0	; () banked
  2207  0015E4  5197               	movf	printf@c& (0+255),w,b
  2208  0015E6  0100               	movlb	0	; () banked
  2209  0015E8  B4D8               	btfsc	status,2,c
  2210  0015EA  D003               	goto	l4217
  2211                           
  2212                           ; BSR set to: 0
  2213                           ;doprnt.c: 1221: (putch('.') );
  2214  0015EC  0E2E               	movlw	46
  2215  0015EE  ECBA  F017         	call	_putch
  2216  0015F2                     l4217:
  2217                           
  2218                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2219  0015F2  0100               	movlb	0	; () banked
  2220  0015F4  5197               	movf	printf@c& (0+255),w,b
  2221  0015F6  EC08  F00D         	call	_scale
  2222  0015FA  C032  F080         	movff	?_scale,_printf$1115
  2223  0015FE  C033  F081         	movff	?_scale+1,_printf$1115+1
  2224  001602  C034  F082         	movff	?_scale+2,_printf$1115+2
  2225                           
  2226                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2227  001606  C094  F026         	movff	printf@fval,___ftmul@f2
  2228  00160A  C095  F027         	movff	printf@fval+1,___ftmul@f2+1
  2229  00160E  C096  F028         	movff	printf@fval+2,___ftmul@f2+2
  2230  001612  C080  F023         	movff	_printf$1115,___ftmul@f1
  2231  001616  C081  F024         	movff	_printf$1115+1,___ftmul@f1+1
  2232  00161A  C082  F025         	movff	_printf$1115+2,___ftmul@f1+2
  2233  00161E  ECF3  F012         	call	___ftmul	;wreg free
  2234  001622  C023  F039         	movff	?___ftmul,___fttol@f1
  2235  001626  C024  F03A         	movff	?___ftmul+1,___fttol@f1+1
  2236  00162A  C025  F03B         	movff	?___ftmul+2,___fttol@f1+2
  2237  00162E  EC6D  F013         	call	___fttol	;wreg free
  2238  001632  C039  F090         	movff	?___fttol,printf@val
  2239  001636  C03A  F091         	movff	?___fttol+1,printf@val+1
  2240  00163A  C03B  F092         	movff	?___fttol+2,printf@val+2
  2241  00163E  C03C  F093         	movff	?___fttol+3,printf@val+3
  2242                           
  2243                           ;doprnt.c: 1228: while(c--) {
  2244  001642  D06D               	goto	l4227
  2245  001644                     l4221:
  2246                           
  2247                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2248  001644  C090  F00F         	movff	printf@val,___lldiv@dividend
  2249  001648  C091  F010         	movff	printf@val+1,___lldiv@dividend+1
  2250  00164C  C092  F011         	movff	printf@val+2,___lldiv@dividend+2
  2251  001650  C093  F012         	movff	printf@val+3,___lldiv@dividend+3
  2252  001654  0100               	movlb	0	; () banked
  2253  001656  5197               	movf	printf@c& (0+255),w,b
  2254  001658  0D04               	mullw	4
  2255  00165A  0E01               	movlw	low _dpowers
  2256  00165C  24F3               	addwf	prodl,w,c
  2257  00165E  6EF6               	movwf	tblptrl,c
  2258  001660  0E10               	movlw	high _dpowers
  2259  001662  20F4               	addwfc	prodh,w,c
  2260  001664  6EF7               	movwf	tblptrh,c
  2261  001666                     	if	0	;There are less than 3 active tblptr bytes
  2262  001666                     	endif
  2263  001666  0009               	tblrd		*+
  2264  001668  CFF5 F013          	movff	tablat,___lldiv@divisor
  2265  00166C  0009               	tblrd		*+
  2266  00166E  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  2267  001672  0009               	tblrd		*+
  2268  001674  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  2269  001678  000A               	tblrd		*-
  2270  00167A  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  2271  00167E  EC3B  F015         	call	___lldiv	;wreg free
  2272  001682  C00F  F08C         	movff	?___lldiv,printf@tmpval
  2273  001686  C010  F08D         	movff	?___lldiv+1,printf@tmpval+1
  2274  00168A  C011  F08E         	movff	?___lldiv+2,printf@tmpval+2
  2275  00168E  C012  F08F         	movff	?___lldiv+3,printf@tmpval+3
  2276                           
  2277                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2278  001692  C08C  F01C         	movff	printf@tmpval,___llmod@dividend
  2279  001696  C08D  F01D         	movff	printf@tmpval+1,___llmod@dividend+1
  2280  00169A  C08E  F01E         	movff	printf@tmpval+2,___llmod@dividend+2
  2281  00169E  C08F  F01F         	movff	printf@tmpval+3,___llmod@dividend+3
  2282  0016A2  0E0A               	movlw	10
  2283  0016A4  6E20               	movwf	___llmod@divisor,c
  2284  0016A6  0E00               	movlw	0
  2285  0016A8  6E21               	movwf	___llmod@divisor+1,c
  2286  0016AA  0E00               	movlw	0
  2287  0016AC  6E22               	movwf	___llmod@divisor+2,c
  2288  0016AE  0E00               	movlw	0
  2289  0016B0  6E23               	movwf	___llmod@divisor+3,c
  2290  0016B2  EC2D  F016         	call	___llmod	;wreg free
  2291  0016B6  C01C  F08C         	movff	?___llmod,printf@tmpval
  2292  0016BA  C01D  F08D         	movff	?___llmod+1,printf@tmpval+1
  2293  0016BE  C01E  F08E         	movff	?___llmod+2,printf@tmpval+2
  2294  0016C2  C01F  F08F         	movff	?___llmod+3,printf@tmpval+3
  2295                           
  2296                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  2297  0016C6  0100               	movlb	0	; () banked
  2298  0016C8  518C               	movf	printf@tmpval& (0+255),w,b
  2299  0016CA  0F30               	addlw	48
  2300  0016CC  ECBA  F017         	call	_putch
  2301                           
  2302                           ;doprnt.c: 1232: val %= dpowers[c];
  2303  0016D0  C090  F01C         	movff	printf@val,___llmod@dividend
  2304  0016D4  C091  F01D         	movff	printf@val+1,___llmod@dividend+1
  2305  0016D8  C092  F01E         	movff	printf@val+2,___llmod@dividend+2
  2306  0016DC  C093  F01F         	movff	printf@val+3,___llmod@dividend+3
  2307  0016E0  0100               	movlb	0	; () banked
  2308  0016E2  5197               	movf	printf@c& (0+255),w,b
  2309  0016E4  0D04               	mullw	4
  2310  0016E6  0E01               	movlw	low _dpowers
  2311  0016E8  24F3               	addwf	prodl,w,c
  2312  0016EA  6EF6               	movwf	tblptrl,c
  2313  0016EC  0E10               	movlw	high _dpowers
  2314  0016EE  20F4               	addwfc	prodh,w,c
  2315  0016F0  6EF7               	movwf	tblptrh,c
  2316  0016F2                     	if	0	;There are less than 3 active tblptr bytes
  2317  0016F2                     	endif
  2318  0016F2  0009               	tblrd		*+
  2319  0016F4  CFF5 F020          	movff	tablat,___llmod@divisor
  2320  0016F8  0009               	tblrd		*+
  2321  0016FA  CFF5 F021          	movff	tablat,___llmod@divisor+1
  2322  0016FE  0009               	tblrd		*+
  2323  001700  CFF5 F022          	movff	tablat,___llmod@divisor+2
  2324  001704  000A               	tblrd		*-
  2325  001706  CFF5 F023          	movff	tablat,___llmod@divisor+3
  2326  00170A  EC2D  F016         	call	___llmod	;wreg free
  2327  00170E  C01C  F090         	movff	?___llmod,printf@val
  2328  001712  C01D  F091         	movff	?___llmod+1,printf@val+1
  2329  001716  C01E  F092         	movff	?___llmod+2,printf@val+2
  2330  00171A  C01F  F093         	movff	?___llmod+3,printf@val+3
  2331  00171E                     l4227:
  2332  00171E  0100               	movlb	0	; () banked
  2333  001720  0797               	decf	printf@c& (0+255),f,b
  2334  001722  0100               	movlb	0	; () banked
  2335  001724  2997               	incf	printf@c& (0+255),w,b
  2336  001726  B4D8               	btfsc	status,2,c
  2337  001728  D008               	goto	l4233
  2338  00172A  D78C               	goto	l4221
  2339  00172C                     l4229:
  2340                           
  2341                           ; BSR set to: 0
  2342                           ;doprnt.c: 1236: (putch('0') );
  2343  00172C  0E30               	movlw	48
  2344  00172E  ECBA  F017         	call	_putch
  2345                           
  2346                           ;doprnt.c: 1237: prec--;
  2347  001732  0100               	movlb	0	; () banked
  2348  001734  0786               	decf	printf@prec& (0+255),f,b
  2349  001736  A0D8               	btfss	status,0,c
  2350  001738  0787               	decf	(printf@prec+1)& (0+255),f,b
  2351  00173A                     l4233:
  2352                           
  2353                           ; BSR set to: 0
  2354  00173A  0100               	movlb	0	; () banked
  2355  00173C  5186               	movf	printf@prec& (0+255),w,b
  2356  00173E  0100               	movlb	0	; () banked
  2357  001740  1187               	iorwf	(printf@prec+1)& (0+255),w,b
  2358  001742  B4D8               	btfsc	status,2,c
  2359  001744  D156               	goto	l4311
  2360  001746  D7F2               	goto	l4229
  2361  001748                     l426:
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;doprnt.c: 1246: }
  2365                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2366  001748  0100               	movlb	0	; () banked
  2367  00174A  BF88               	btfsc	printf@flag& (0+255),7,b
  2368  00174C  D034               	goto	l463
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;doprnt.c: 1253: {
  2372                           ;doprnt.c: 1255: if(flag & 0x10)
  2373  00174E  0100               	movlb	0	; () banked
  2374  001750  A988               	btfss	printf@flag& (0+255),4,b
  2375  001752  D00E               	goto	l4241
  2376                           
  2377                           ; BSR set to: 0
  2378                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2379  001754  C084  FFD9         	movff	printf@ap,fsr2l
  2380  001758  C085  FFDA         	movff	printf@ap+1,fsr2h
  2381  00175C  CFDE F090          	movff	postinc2,printf@val
  2382  001760  CFDE F091          	movff	postinc2,printf@val+1
  2383  001764  CFDE F092          	movff	postinc2,printf@val+2
  2384  001768  CFDE F093          	movff	postinc2,printf@val+3
  2385                           
  2386                           ; BSR set to: 0
  2387  00176C  0E04               	movlw	4
  2388  00176E  D00F               	goto	L2
  2389  001770                     l4241:
  2390                           
  2391                           ; BSR set to: 0
  2392                           ;doprnt.c: 1257: else
  2393                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2394  001770  C084  FFD9         	movff	printf@ap,fsr2l
  2395  001774  C085  FFDA         	movff	printf@ap+1,fsr2h
  2396  001778  CFDE F090          	movff	postinc2,printf@val
  2397  00177C  CFDD F091          	movff	postdec2,printf@val+1
  2398  001780  0100               	movlb	0	; () banked
  2399  001782  0E00               	movlw	0
  2400  001784  BF91               	btfsc	(printf@val+1)& (0+255),7,b
  2401  001786  0EFF               	movlw	-1
  2402  001788  6F92               	movwf	(printf@val+2)& (0+255),b
  2403  00178A  6F93               	movwf	(printf@val+3)& (0+255),b
  2404                           
  2405                           ; BSR set to: 0
  2406  00178C  0E02               	movlw	2
  2407  00178E                     L2:
  2408  00178E  0100               	movlb	0	; () banked
  2409  001790  2784               	addwf	printf@ap& (0+255),f,b
  2410  001792  0E00               	movlw	0
  2411  001794  2385               	addwfc	(printf@ap+1)& (0+255),f,b
  2412                           
  2413                           ; BSR set to: 0
  2414                           ;doprnt.c: 1261: if((long)val < 0) {
  2415                           
  2416                           ; BSR set to: 0
  2417  001796  0100               	movlb	0	; () banked
  2418  001798  AF93               	btfss	(printf@val+3)& (0+255),7,b
  2419  00179A  D07F               	goto	l4289
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;doprnt.c: 1262: flag |= 0x03;
  2423  00179C  0E03               	movlw	3
  2424  00179E  0100               	movlb	0	; () banked
  2425  0017A0  1388               	iorwf	printf@flag& (0+255),f,b
  2426                           
  2427                           ; BSR set to: 0
  2428                           ;doprnt.c: 1263: val = -val;
  2429  0017A2  0100               	movlb	0	; () banked
  2430  0017A4  1F93               	comf	(printf@val+3)& (0+255),f,b
  2431  0017A6  1F92               	comf	(printf@val+2)& (0+255),f,b
  2432  0017A8  1F91               	comf	(printf@val+1)& (0+255),f,b
  2433  0017AA  6D90               	negf	printf@val& (0+255),b
  2434  0017AC  0E00               	movlw	0
  2435  0017AE  2391               	addwfc	(printf@val+1)& (0+255),f,b
  2436  0017B0  2392               	addwfc	(printf@val+2)& (0+255),f,b
  2437  0017B2  2393               	addwfc	(printf@val+3)& (0+255),f,b
  2438                           
  2439                           ; BSR set to: 0
  2440                           ;doprnt.c: 1264: }
  2441                           ;doprnt.c: 1266: }
  2442  0017B4  D072               	goto	l4289
  2443  0017B6                     l463:
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;doprnt.c: 1268: else
  2447                           ;doprnt.c: 1273: {
  2448                           ;doprnt.c: 1281: if(flag & 0x10)
  2449  0017B6  0100               	movlb	0	; () banked
  2450  0017B8  A988               	btfss	printf@flag& (0+255),4,b
  2451  0017BA  D00E               	goto	l4255
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2455  0017BC  C084  FFD9         	movff	printf@ap,fsr2l
  2456  0017C0  C085  FFDA         	movff	printf@ap+1,fsr2h
  2457  0017C4  CFDE F090          	movff	postinc2,printf@val
  2458  0017C8  CFDE F091          	movff	postinc2,printf@val+1
  2459  0017CC  CFDE F092          	movff	postinc2,printf@val+2
  2460  0017D0  CFDE F093          	movff	postinc2,printf@val+3
  2461                           
  2462                           ; BSR set to: 0
  2463  0017D4  0E04               	movlw	4
  2464  0017D6  D010               	goto	L3
  2465  0017D8                     l4255:
  2466                           
  2467                           ; BSR set to: 0
  2468                           ;doprnt.c: 1283: else
  2469                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2470  0017D8  C084  FFD9         	movff	printf@ap,fsr2l
  2471  0017DC  C085  FFDA         	movff	printf@ap+1,fsr2h
  2472  0017E0  CFDE F054          	movff	postinc2,??_printf
  2473  0017E4  CFDD F055          	movff	postdec2,??_printf+1
  2474  0017E8  C054  F090         	movff	??_printf,printf@val
  2475  0017EC  C055  F091         	movff	??_printf+1,printf@val+1
  2476  0017F0  0100               	movlb	0	; () banked
  2477  0017F2  6B92               	clrf	(printf@val+2)& (0+255),b
  2478  0017F4  6B93               	clrf	(printf@val+3)& (0+255),b
  2479                           
  2480                           ; BSR set to: 0
  2481  0017F6  0E02               	movlw	2
  2482  0017F8                     L3:
  2483  0017F8  0100               	movlb	0	; () banked
  2484  0017FA  2784               	addwf	printf@ap& (0+255),f,b
  2485  0017FC  0E00               	movlw	0
  2486  0017FE  2385               	addwfc	(printf@ap+1)& (0+255),f,b
  2487                           
  2488                           ; BSR set to: 0
  2489                           ;doprnt.c: 1287: }
  2490                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2491                           
  2492                           ; BSR set to: 0
  2493  001800  D04C               	goto	l4289
  2494  001802                     l4259:
  2495                           
  2496                           ; BSR set to: 0
  2497                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2498  001802  0E01               	movlw	1
  2499  001804  0100               	movlb	0	; () banked
  2500  001806  6F97               	movwf	printf@c& (0+255),b
  2501  001808                     l4261:
  2502                           
  2503                           ; BSR set to: 0
  2504  001808  0E0A               	movlw	10
  2505  00180A  0100               	movlb	0	; () banked
  2506  00180C  1997               	xorwf	printf@c& (0+255),w,b
  2507  00180E  B4D8               	btfsc	status,2,c
  2508  001810  D04D               	goto	l4291
  2509                           
  2510                           ; BSR set to: 0
  2511                           ;doprnt.c: 1306: if(val < dpowers[c])
  2512                           
  2513                           ; BSR set to: 0
  2514                           
  2515                           ; BSR set to: 0
  2516  001812  0100               	movlb	0	; () banked
  2517  001814  5197               	movf	printf@c& (0+255),w,b
  2518  001816  0D04               	mullw	4
  2519  001818  0E01               	movlw	low _dpowers
  2520  00181A  24F3               	addwf	prodl,w,c
  2521  00181C  6EF6               	movwf	tblptrl,c
  2522  00181E  0E10               	movlw	high _dpowers
  2523  001820  20F4               	addwfc	prodh,w,c
  2524  001822  6EF7               	movwf	tblptrh,c
  2525  001824                     	if	0	;There are less than 3 active tblptr bytes
  2526  001824                     	endif
  2527  001824  0009               	tblrd		*+
  2528  001826  50F5               	movf	tablat,w,c
  2529  001828  0100               	movlb	0	; () banked
  2530  00182A  5D90               	subwf	printf@val& (0+255),w,b
  2531  00182C  0009               	tblrd		*+
  2532  00182E  50F5               	movf	tablat,w,c
  2533  001830  0100               	movlb	0	; () banked
  2534  001832  5991               	subwfb	(printf@val+1)& (0+255),w,b
  2535  001834  0009               	tblrd		*+
  2536  001836  50F5               	movf	tablat,w,c
  2537  001838  0100               	movlb	0	; () banked
  2538  00183A  5992               	subwfb	(printf@val+2)& (0+255),w,b
  2539  00183C  0009               	tblrd		*+
  2540  00183E  50F5               	movf	tablat,w,c
  2541  001840  0100               	movlb	0	; () banked
  2542  001842  5993               	subwfb	(printf@val+3)& (0+255),w,b
  2543  001844  A0D8               	btfss	status,0,c
  2544  001846  D032               	goto	l4291
  2545                           
  2546                           ; BSR set to: 0
  2547                           
  2548                           ; BSR set to: 0
  2549                           
  2550                           ; BSR set to: 0
  2551                           ;doprnt.c: 1307: break;
  2552  001848  0100               	movlb	0	; () banked
  2553  00184A  2B97               	incf	printf@c& (0+255),f,b
  2554  00184C  D7DD               	goto	l4261
  2555  00184E                     l4273:
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2559  00184E  0E01               	movlw	1
  2560  001850  0100               	movlb	0	; () banked
  2561  001852  6F97               	movwf	printf@c& (0+255),b
  2562  001854                     l4275:
  2563                           
  2564                           ; BSR set to: 0
  2565  001854  0E08               	movlw	8
  2566  001856  0100               	movlb	0	; () banked
  2567  001858  1997               	xorwf	printf@c& (0+255),w,b
  2568  00185A  B4D8               	btfsc	status,2,c
  2569  00185C  D027               	goto	l4291
  2570                           
  2571                           ; BSR set to: 0
  2572                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2573                           
  2574                           ; BSR set to: 0
  2575                           
  2576                           ; BSR set to: 0
  2577  00185E  0100               	movlb	0	; () banked
  2578  001860  5197               	movf	printf@c& (0+255),w,b
  2579  001862  0D04               	mullw	4
  2580  001864  0E77               	movlw	low _hexpowers
  2581  001866  24F3               	addwf	prodl,w,c
  2582  001868  6EF6               	movwf	tblptrl,c
  2583  00186A  0E10               	movlw	high _hexpowers
  2584  00186C  20F4               	addwfc	prodh,w,c
  2585  00186E  6EF7               	movwf	tblptrh,c
  2586  001870                     	if	0	;There are less than 3 active tblptr bytes
  2587  001870                     	endif
  2588  001870  0009               	tblrd		*+
  2589  001872  50F5               	movf	tablat,w,c
  2590  001874  0100               	movlb	0	; () banked
  2591  001876  5D90               	subwf	printf@val& (0+255),w,b
  2592  001878  0009               	tblrd		*+
  2593  00187A  50F5               	movf	tablat,w,c
  2594  00187C  0100               	movlb	0	; () banked
  2595  00187E  5991               	subwfb	(printf@val+1)& (0+255),w,b
  2596  001880  0009               	tblrd		*+
  2597  001882  50F5               	movf	tablat,w,c
  2598  001884  0100               	movlb	0	; () banked
  2599  001886  5992               	subwfb	(printf@val+2)& (0+255),w,b
  2600  001888  0009               	tblrd		*+
  2601  00188A  50F5               	movf	tablat,w,c
  2602  00188C  0100               	movlb	0	; () banked
  2603  00188E  5993               	subwfb	(printf@val+3)& (0+255),w,b
  2604  001890  A0D8               	btfss	status,0,c
  2605  001892  D00C               	goto	l4291
  2606                           
  2607                           ; BSR set to: 0
  2608                           
  2609                           ; BSR set to: 0
  2610                           
  2611                           ; BSR set to: 0
  2612                           ;doprnt.c: 1318: break;
  2613  001894  0100               	movlb	0	; () banked
  2614  001896  2B97               	incf	printf@c& (0+255),f,b
  2615  001898  D7DD               	goto	l4275
  2616  00189A                     l4289:
  2617                           
  2618                           ; BSR set to: 0
  2619  00189A  0100               	movlb	0	; () banked
  2620  00189C  5188               	movf	printf@flag& (0+255),w,b
  2621  00189E  0B80               	andlw	128
  2622                           
  2623                           ; Switch size 1, requested type "space"
  2624                           ; Number of cases is 2, Range of values is 0 to 128
  2625                           ; switch strategies available:
  2626                           ; Name         Instructions Cycles
  2627                           ; simple_byte            7     4 (average)
  2628                           ;	Chosen strategy is simple_byte
  2629  0018A0  0A00               	xorlw	0	; case 0
  2630  0018A2  B4D8               	btfsc	status,2,c
  2631  0018A4  D7AE               	goto	l4259
  2632  0018A6  0A80               	xorlw	128	; case 128
  2633  0018A8  B4D8               	btfsc	status,2,c
  2634  0018AA  D7D1               	goto	l4273
  2635  0018AC                     l4291:
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;doprnt.c: 1422: {
  2639                           ;doprnt.c: 1438: if(flag & 0x03)
  2640  0018AC  0E03               	movlw	3
  2641  0018AE  0100               	movlb	0	; () banked
  2642  0018B0  1588               	andwf	printf@flag& (0+255),w,b
  2643  0018B2  6E54               	movwf	??_printf& (0+255),c
  2644  0018B4  0E00               	movlw	0
  2645  0018B6  0100               	movlb	0	; () banked
  2646  0018B8  1589               	andwf	(printf@flag+1)& (0+255),w,b
  2647  0018BA  6E55               	movwf	(??_printf+1)& (0+255),c
  2648  0018BC  5054               	movf	??_printf,w,c
  2649  0018BE  1055               	iorwf	??_printf+1,w,c
  2650  0018C0  B4D8               	btfsc	status,2,c
  2651  0018C2  D003               	goto	l4295
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;doprnt.c: 1439: (putch('-') );
  2655  0018C4  0E2D               	movlw	45
  2656  0018C6  ECBA  F017         	call	_putch
  2657  0018CA                     l4295:
  2658                           
  2659                           ;doprnt.c: 1469: }
  2660                           ;doprnt.c: 1472: prec = c;
  2661  0018CA  0100               	movlb	0	; () banked
  2662  0018CC  5197               	movf	printf@c& (0+255),w,b
  2663  0018CE  0100               	movlb	0	; () banked
  2664  0018D0  6F86               	movwf	printf@prec& (0+255),b
  2665  0018D2  6B87               	clrf	(printf@prec+1)& (0+255),b
  2666  0018D4  BF86               	btfsc	printf@prec& (0+255),7,b
  2667  0018D6  0787               	decf	(printf@prec+1)& (0+255),f,b
  2668                           
  2669                           ;doprnt.c: 1474: while(prec--) {
  2670  0018D8  D081               	goto	l4309
  2671  0018DA                     l4297:
  2672                           
  2673                           ; BSR set to: 0
  2674                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2675  0018DA  C086  F054         	movff	printf@prec,??_printf
  2676  0018DE  C087  F055         	movff	printf@prec+1,??_printf+1
  2677  0018E2  90D8               	bcf	status,0,c
  2678  0018E4  3654               	rlcf	??_printf,f,c
  2679  0018E6  3655               	rlcf	??_printf+1,f,c
  2680  0018E8  90D8               	bcf	status,0,c
  2681  0018EA  3654               	rlcf	??_printf,f,c
  2682  0018EC  3655               	rlcf	??_printf+1,f,c
  2683  0018EE  0E01               	movlw	low _dpowers
  2684  0018F0  2454               	addwf	??_printf,w,c
  2685  0018F2  6EF6               	movwf	tblptrl,c
  2686  0018F4  0E10               	movlw	high _dpowers
  2687  0018F6  2055               	addwfc	??_printf+1,w,c
  2688  0018F8  6EF7               	movwf	tblptrh,c
  2689  0018FA                     	if	0	;There are less than 3 active tblptr bytes
  2690  0018FA                     	endif
  2691  0018FA  0009               	tblrd		*+
  2692  0018FC  CFF5 F013          	movff	tablat,___lldiv@divisor
  2693  001900  0009               	tblrd		*+
  2694  001902  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  2695  001906  0009               	tblrd		*+
  2696  001908  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  2697  00190C  000A               	tblrd		*-
  2698  00190E  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  2699  001912  C090  F00F         	movff	printf@val,___lldiv@dividend
  2700  001916  C091  F010         	movff	printf@val+1,___lldiv@dividend+1
  2701  00191A  C092  F011         	movff	printf@val+2,___lldiv@dividend+2
  2702  00191E  C093  F012         	movff	printf@val+3,___lldiv@dividend+3
  2703  001922  EC3B  F015         	call	___lldiv	;wreg free
  2704  001926  C00F  F01C         	movff	?___lldiv,___llmod@dividend
  2705  00192A  C010  F01D         	movff	?___lldiv+1,___llmod@dividend+1
  2706  00192E  C011  F01E         	movff	?___lldiv+2,___llmod@dividend+2
  2707  001932  C012  F01F         	movff	?___lldiv+3,___llmod@dividend+3
  2708  001936  0E0A               	movlw	10
  2709  001938  6E20               	movwf	___llmod@divisor,c
  2710  00193A  0E00               	movlw	0
  2711  00193C  6E21               	movwf	___llmod@divisor+1,c
  2712  00193E  0E00               	movlw	0
  2713  001940  6E22               	movwf	___llmod@divisor+2,c
  2714  001942  0E00               	movlw	0
  2715  001944  6E23               	movwf	___llmod@divisor+3,c
  2716  001946  EC2D  F016         	call	___llmod	;wreg free
  2717  00194A  501C               	movf	?___llmod,w,c
  2718  00194C  0F30               	addlw	48
  2719  00194E  0100               	movlb	0	; () banked
  2720  001950  6F97               	movwf	printf@c& (0+255),b
  2721                           
  2722                           ;doprnt.c: 1491: break;
  2723  001952  D040               	goto	l4307
  2724  001954                     l4299:
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;doprnt.c: 1499: {
  2728                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2729  001954  C090  F00F         	movff	printf@val,___lldiv@dividend
  2730  001958  C091  F010         	movff	printf@val+1,___lldiv@dividend+1
  2731  00195C  C092  F011         	movff	printf@val+2,___lldiv@dividend+2
  2732  001960  C093  F012         	movff	printf@val+3,___lldiv@dividend+3
  2733  001964  C086  F054         	movff	printf@prec,??_printf
  2734  001968  C087  F055         	movff	printf@prec+1,??_printf+1
  2735  00196C  90D8               	bcf	status,0,c
  2736  00196E  3654               	rlcf	??_printf,f,c
  2737  001970  3655               	rlcf	??_printf+1,f,c
  2738  001972  90D8               	bcf	status,0,c
  2739  001974  3654               	rlcf	??_printf,f,c
  2740  001976  3655               	rlcf	??_printf+1,f,c
  2741  001978  0E77               	movlw	low _hexpowers
  2742  00197A  2454               	addwf	??_printf,w,c
  2743  00197C  6EF6               	movwf	tblptrl,c
  2744  00197E  0E10               	movlw	high _hexpowers
  2745  001980  2055               	addwfc	??_printf+1,w,c
  2746  001982  6EF7               	movwf	tblptrh,c
  2747  001984                     	if	0	;There are less than 3 active tblptr bytes
  2748  001984                     	endif
  2749  001984  0009               	tblrd		*+
  2750  001986  CFF5 F013          	movff	tablat,___lldiv@divisor
  2751  00198A  0009               	tblrd		*+
  2752  00198C  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  2753  001990  0009               	tblrd		*+
  2754  001992  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  2755  001996  000A               	tblrd		*-
  2756  001998  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  2757  00199C  EC3B  F015         	call	___lldiv	;wreg free
  2758  0019A0  500F               	movf	?___lldiv,w,c
  2759  0019A2  0B0F               	andlw	15
  2760  0019A4  0100               	movlb	0	; () banked
  2761  0019A6  6F83               	movwf	printf@idx& (0+255),b
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2765  0019A8  0100               	movlb	0	; () banked
  2766  0019AA  5183               	movf	printf@idx& (0+255),w,b
  2767  0019AC  0D01               	mullw	1
  2768  0019AE  0EAF               	movlw	low STR_6
  2769  0019B0  24F3               	addwf	prodl,w,c
  2770  0019B2  6EF6               	movwf	tblptrl,c
  2771  0019B4  0E10               	movlw	high STR_6
  2772  0019B6  20F4               	addwfc	prodh,w,c
  2773  0019B8  6EF7               	movwf	tblptrh,c
  2774  0019BA                     	if	0	;There are less than 3 active tblptr bytes
  2775  0019BA                     	endif
  2776  0019BA  0008               	tblrd		*
  2777  0019BC  CFF5 F097          	movff	tablat,printf@c
  2778                           
  2779                           ; BSR set to: 0
  2780                           ;doprnt.c: 1523: }
  2781                           
  2782                           ;doprnt.c: 1508: }
  2783                           ;doprnt.c: 1510: break;
  2784  0019C0  D009               	goto	l4307
  2785  0019C2                     l4305:
  2786                           
  2787                           ; BSR set to: 0
  2788  0019C2  0100               	movlb	0	; () banked
  2789  0019C4  5188               	movf	printf@flag& (0+255),w,b
  2790  0019C6  0B80               	andlw	128
  2791                           
  2792                           ; Switch size 1, requested type "space"
  2793                           ; Number of cases is 2, Range of values is 0 to 128
  2794                           ; switch strategies available:
  2795                           ; Name         Instructions Cycles
  2796                           ; simple_byte            7     4 (average)
  2797                           ;	Chosen strategy is simple_byte
  2798  0019C8  0A00               	xorlw	0	; case 0
  2799  0019CA  B4D8               	btfsc	status,2,c
  2800  0019CC  D786               	goto	l4297
  2801  0019CE  0A80               	xorlw	128	; case 128
  2802  0019D0  B4D8               	btfsc	status,2,c
  2803  0019D2  D7C0               	goto	l4299
  2804  0019D4                     l4307:
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;doprnt.c: 1524: (putch(c) );
  2808  0019D4  0100               	movlb	0	; () banked
  2809  0019D6  5197               	movf	printf@c& (0+255),w,b
  2810  0019D8  ECBA  F017         	call	_putch
  2811  0019DC                     l4309:
  2812  0019DC  0100               	movlb	0	; () banked
  2813  0019DE  0786               	decf	printf@prec& (0+255),f,b
  2814  0019E0  A0D8               	btfss	status,0,c
  2815  0019E2  0787               	decf	(printf@prec+1)& (0+255),f,b
  2816  0019E4  0100               	movlb	0	; () banked
  2817  0019E6  2986               	incf	printf@prec& (0+255),w,b
  2818  0019E8  E1EC               	bnz	l4305
  2819  0019EA  0100               	movlb	0	; () banked
  2820  0019EC  2987               	incf	(printf@prec+1)& (0+255),w,b
  2821  0019EE  A4D8               	btfss	status,2,c
  2822  0019F0  D7E8               	goto	l4305
  2823  0019F2                     l4311:
  2824  0019F2  C04E  FFF6         	movff	printf@f,tblptrl
  2825  0019F6  C04F  FFF7         	movff	printf@f+1,tblptrh
  2826  0019FA  4A4E               	infsnz	printf@f,f,c
  2827  0019FC  2A4F               	incf	printf@f+1,f,c
  2828  0019FE                     	if	0	;tblptru may be non-zero
  2829  0019FE                     	endif
  2830  0019FE                     	if	0	;tblptru may be non-zero
  2831  0019FE                     	endif
  2832  0019FE  0008               	tblrd		*
  2833  001A00  CFF5 F097          	movff	tablat,printf@c
  2834  001A04  0100               	movlb	0	; () banked
  2835  001A06  5197               	movf	printf@c& (0+255),w,b
  2836  001A08  B4D8               	btfsc	status,2,c
  2837  001A0A  0012               	return	
  2838  001A0C  EF80  F008         	goto	l4087
  2839  001A10                     __end_of_printf:
  2840                           	opt stack 0
  2841                           tblptru	equ	0xFF8
  2842                           tblptrh	equ	0xFF7
  2843                           tblptrl	equ	0xFF6
  2844                           tablat	equ	0xFF5
  2845                           prodh	equ	0xFF4
  2846                           prodl	equ	0xFF3
  2847                           intcon	equ	0xFF2
  2848                           postinc0	equ	0xFEE
  2849                           wreg	equ	0xFE8
  2850                           postdec1	equ	0xFE5
  2851                           fsr1l	equ	0xFE1
  2852                           postinc2	equ	0xFDE
  2853                           postdec2	equ	0xFDD
  2854                           fsr2h	equ	0xFDA
  2855                           fsr2l	equ	0xFD9
  2856                           status	equ	0xFD8
  2857                           
  2858 ;; *************** function _scale *****************
  2859 ;; Defined at:
  2860 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2861 ;; Parameters:    Size  Location     Type
  2862 ;;  scl             1    wreg     char 
  2863 ;; Auto vars:     Size  Location     Type
  2864 ;;  scl             1   55[COMRAM] char 
  2865 ;; Return value:  Size  Location     Type
  2866 ;;                  3   49[COMRAM] char 
  2867 ;; Registers used:
  2868 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2869 ;; Tracked objects:
  2870 ;;		On entry : 0/0
  2871 ;;		On exit  : 0/0
  2872 ;;		Unchanged: 0/0
  2873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2874 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2875 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2877 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2878 ;;Total ram usage:        7 bytes
  2879 ;; Hardware stack levels used:    1
  2880 ;; Hardware stack levels required when called:    3
  2881 ;; This function calls:
  2882 ;;		___awdiv
  2883 ;;		___awmod
  2884 ;;		___ftmul
  2885 ;;		___wmul
  2886 ;; This function is called by:
  2887 ;;		_printf
  2888 ;; This function uses a non-reentrant model
  2889 ;;
  2890                           
  2891                           	psect	text4
  2892  001A10                     __ptext4:
  2893                           	opt stack 0
  2894  001A10                     _scale:
  2895                           	opt stack 25
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;incstack = 0
  2899                           ;scale@scl stored from wreg
  2900  001A10  6E38               	movwf	scale@scl,c
  2901                           
  2902                           ;doprnt.c: 428: if(scl < 0) {
  2903  001A12  AE38               	btfss	scale@scl,7,c
  2904  001A14  D0FB               	goto	l3827
  2905                           
  2906                           ;doprnt.c: 429: scl = -scl;
  2907  001A16  6C38               	negf	scale@scl,c
  2908                           
  2909                           ;doprnt.c: 430: if(scl>=110)
  2910  001A18  5038               	movf	scale@scl,w,c
  2911  001A1A  0A80               	xorlw	128
  2912  001A1C  0F12               	addlw	-238
  2913  001A1E  A0D8               	btfss	status,0,c
  2914  001A20  D091               	goto	l3817
  2915                           
  2916                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2917  001A22  0E00               	movlw	0
  2918  001A24  6E20               	movwf	___wmul@multiplicand+1,c
  2919  001A26  0E03               	movlw	3
  2920  001A28  6E1F               	movwf	___wmul@multiplicand,c
  2921  001A2A  0E00               	movlw	0
  2922  001A2C  6E18               	movwf	___awdiv@divisor+1,c
  2923  001A2E  0E0A               	movlw	10
  2924  001A30  6E17               	movwf	___awdiv@divisor,c
  2925  001A32  0E00               	movlw	0
  2926  001A34  6E12               	movwf	___awmod@divisor+1,c
  2927  001A36  0E64               	movlw	100
  2928  001A38  6E11               	movwf	___awmod@divisor,c
  2929  001A3A  5038               	movf	scale@scl,w,c
  2930  001A3C  6E0F               	movwf	___awmod@dividend,c
  2931  001A3E  6A10               	clrf	___awmod@dividend+1,c
  2932  001A40  BE0F               	btfsc	___awmod@dividend,7,c
  2933  001A42  0610               	decf	___awmod@dividend+1,f,c
  2934  001A44  ECF5  F015         	call	___awmod	;wreg free
  2935  001A48  C00F  F015         	movff	?___awmod,___awdiv@dividend
  2936  001A4C  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  2937  001A50  ECF9  F014         	call	___awdiv	;wreg free
  2938  001A54  0E09               	movlw	9
  2939  001A56  2415               	addwf	?___awdiv,w,c
  2940  001A58  6E1D               	movwf	___wmul@multiplier,c
  2941  001A5A  0E00               	movlw	0
  2942  001A5C  2016               	addwfc	?___awdiv+1,w,c
  2943  001A5E  6E1E               	movwf	___wmul@multiplier+1,c
  2944  001A60  EC82  F017         	call	___wmul	;wreg free
  2945  001A64  0E29               	movlw	low __npowers_
  2946  001A66  241D               	addwf	?___wmul,w,c
  2947  001A68  6EF6               	movwf	tblptrl,c
  2948  001A6A  0E10               	movlw	high __npowers_
  2949  001A6C  201E               	addwfc	?___wmul+1,w,c
  2950  001A6E  6EF7               	movwf	tblptrh,c
  2951  001A70                     	if	0	;There are less than 3 active tblptr bytes
  2952  001A70                     	endif
  2953  001A70  0009               	tblrd		*+
  2954  001A72  CFF5 F026          	movff	tablat,___ftmul@f2
  2955  001A76  0009               	tblrd		*+
  2956  001A78  CFF5 F027          	movff	tablat,___ftmul@f2+1
  2957  001A7C  000A               	tblrd		*-
  2958  001A7E  CFF5 F028          	movff	tablat,___ftmul@f2+2
  2959  001A82  0E00               	movlw	0
  2960  001A84  6E18               	movwf	___awdiv@divisor+1,c
  2961  001A86  0E64               	movlw	100
  2962  001A88  6E17               	movwf	___awdiv@divisor,c
  2963  001A8A  5038               	movf	scale@scl,w,c
  2964  001A8C  6E15               	movwf	___awdiv@dividend,c
  2965  001A8E  6A16               	clrf	___awdiv@dividend+1,c
  2966  001A90  BE15               	btfsc	___awdiv@dividend,7,c
  2967  001A92  0616               	decf	___awdiv@dividend+1,f,c
  2968  001A94  ECF9  F014         	call	___awdiv	;wreg free
  2969  001A98  0E12               	movlw	18
  2970  001A9A  2415               	addwf	?___awdiv,w,c
  2971  001A9C  6E1D               	movwf	___wmul@multiplier,c
  2972  001A9E  0E00               	movlw	0
  2973  001AA0  2016               	addwfc	?___awdiv+1,w,c
  2974  001AA2  6E1E               	movwf	___wmul@multiplier+1,c
  2975  001AA4  0E00               	movlw	0
  2976  001AA6  6E20               	movwf	___wmul@multiplicand+1,c
  2977  001AA8  0E03               	movlw	3
  2978  001AAA  6E1F               	movwf	___wmul@multiplicand,c
  2979  001AAC  EC82  F017         	call	___wmul	;wreg free
  2980  001AB0  0E29               	movlw	low __npowers_
  2981  001AB2  241D               	addwf	?___wmul,w,c
  2982  001AB4  6EF6               	movwf	tblptrl,c
  2983  001AB6  0E10               	movlw	high __npowers_
  2984  001AB8  201E               	addwfc	?___wmul+1,w,c
  2985  001ABA  6EF7               	movwf	tblptrh,c
  2986  001ABC                     	if	0	;There are less than 3 active tblptr bytes
  2987  001ABC                     	endif
  2988  001ABC  0009               	tblrd		*+
  2989  001ABE  CFF5 F023          	movff	tablat,___ftmul@f1
  2990  001AC2  0009               	tblrd		*+
  2991  001AC4  CFF5 F024          	movff	tablat,___ftmul@f1+1
  2992  001AC8  000A               	tblrd		*-
  2993  001ACA  CFF5 F025          	movff	tablat,___ftmul@f1+2
  2994  001ACE  ECF3  F012         	call	___ftmul	;wreg free
  2995  001AD2  C023  F035         	movff	?___ftmul,_scale$1114
  2996  001AD6  C024  F036         	movff	?___ftmul+1,_scale$1114+1
  2997  001ADA  C025  F037         	movff	?___ftmul+2,_scale$1114+2
  2998                           
  2999                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3000  001ADE  C035  F023         	movff	_scale$1114,___ftmul@f1
  3001  001AE2  C036  F024         	movff	_scale$1114+1,___ftmul@f1+1
  3002  001AE6  C037  F025         	movff	_scale$1114+2,___ftmul@f1+2
  3003  001AEA  0E00               	movlw	0
  3004  001AEC  6E20               	movwf	___wmul@multiplicand+1,c
  3005  001AEE  0E03               	movlw	3
  3006  001AF0  6E1F               	movwf	___wmul@multiplicand,c
  3007  001AF2  0E00               	movlw	0
  3008  001AF4  6E12               	movwf	___awmod@divisor+1,c
  3009  001AF6  0E0A               	movlw	10
  3010  001AF8  6E11               	movwf	___awmod@divisor,c
  3011  001AFA  5038               	movf	scale@scl,w,c
  3012  001AFC  6E0F               	movwf	___awmod@dividend,c
  3013  001AFE  6A10               	clrf	___awmod@dividend+1,c
  3014  001B00  BE0F               	btfsc	___awmod@dividend,7,c
  3015  001B02  0610               	decf	___awmod@dividend+1,f,c
  3016  001B04  ECF5  F015         	call	___awmod	;wreg free
  3017  001B08  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  3018  001B0C  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  3019  001B10  EC82  F017         	call	___wmul	;wreg free
  3020  001B14  0E29               	movlw	low __npowers_
  3021  001B16  241D               	addwf	?___wmul,w,c
  3022  001B18  6EF6               	movwf	tblptrl,c
  3023  001B1A  0E10               	movlw	high __npowers_
  3024  001B1C  201E               	addwfc	?___wmul+1,w,c
  3025  001B1E  6EF7               	movwf	tblptrh,c
  3026  001B20                     	if	0	;There are less than 3 active tblptr bytes
  3027  001B20                     	endif
  3028  001B20  0009               	tblrd		*+
  3029  001B22  CFF5 F026          	movff	tablat,___ftmul@f2
  3030  001B26  0009               	tblrd		*+
  3031  001B28  CFF5 F027          	movff	tablat,___ftmul@f2+1
  3032  001B2C  000A               	tblrd		*-
  3033  001B2E  CFF5 F028          	movff	tablat,___ftmul@f2+2
  3034  001B32  ECF3  F012         	call	___ftmul	;wreg free
  3035  001B36  C023  F032         	movff	?___ftmul,?_scale
  3036  001B3A  C024  F033         	movff	?___ftmul+1,?_scale+1
  3037  001B3E  C025  F034         	movff	?___ftmul+2,?_scale+2
  3038  001B42  0012               	return	
  3039  001B44                     l3817:
  3040                           
  3041                           ;doprnt.c: 432: else if(scl > 10)
  3042  001B44  5038               	movf	scale@scl,w,c
  3043  001B46  0A80               	xorlw	128
  3044  001B48  0F75               	addlw	-139
  3045  001B4A  A0D8               	btfss	status,0,c
  3046  001B4C  D04D               	goto	l3823
  3047                           
  3048                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3049  001B4E  0E00               	movlw	0
  3050  001B50  6E18               	movwf	___awdiv@divisor+1,c
  3051  001B52  0E0A               	movlw	10
  3052  001B54  6E17               	movwf	___awdiv@divisor,c
  3053  001B56  5038               	movf	scale@scl,w,c
  3054  001B58  6E15               	movwf	___awdiv@dividend,c
  3055  001B5A  6A16               	clrf	___awdiv@dividend+1,c
  3056  001B5C  BE15               	btfsc	___awdiv@dividend,7,c
  3057  001B5E  0616               	decf	___awdiv@dividend+1,f,c
  3058  001B60  ECF9  F014         	call	___awdiv	;wreg free
  3059  001B64  0E09               	movlw	9
  3060  001B66  2415               	addwf	?___awdiv,w,c
  3061  001B68  6E1D               	movwf	___wmul@multiplier,c
  3062  001B6A  0E00               	movlw	0
  3063  001B6C  2016               	addwfc	?___awdiv+1,w,c
  3064  001B6E  6E1E               	movwf	___wmul@multiplier+1,c
  3065  001B70  0E00               	movlw	0
  3066  001B72  6E20               	movwf	___wmul@multiplicand+1,c
  3067  001B74  0E03               	movlw	3
  3068  001B76  6E1F               	movwf	___wmul@multiplicand,c
  3069  001B78  EC82  F017         	call	___wmul	;wreg free
  3070  001B7C  0E29               	movlw	low __npowers_
  3071  001B7E  241D               	addwf	?___wmul,w,c
  3072  001B80  6EF6               	movwf	tblptrl,c
  3073  001B82  0E10               	movlw	high __npowers_
  3074  001B84  201E               	addwfc	?___wmul+1,w,c
  3075  001B86  6EF7               	movwf	tblptrh,c
  3076  001B88                     	if	0	;There are less than 3 active tblptr bytes
  3077  001B88                     	endif
  3078  001B88  0009               	tblrd		*+
  3079  001B8A  CFF5 F023          	movff	tablat,___ftmul@f1
  3080  001B8E  0009               	tblrd		*+
  3081  001B90  CFF5 F024          	movff	tablat,___ftmul@f1+1
  3082  001B94  000A               	tblrd		*-
  3083  001B96  CFF5 F025          	movff	tablat,___ftmul@f1+2
  3084  001B9A  0E00               	movlw	0
  3085  001B9C  6E20               	movwf	___wmul@multiplicand+1,c
  3086  001B9E  0E03               	movlw	3
  3087  001BA0  6E1F               	movwf	___wmul@multiplicand,c
  3088  001BA2  0E00               	movlw	0
  3089  001BA4  6E12               	movwf	___awmod@divisor+1,c
  3090  001BA6  0E0A               	movlw	10
  3091  001BA8  6E11               	movwf	___awmod@divisor,c
  3092  001BAA  5038               	movf	scale@scl,w,c
  3093  001BAC  6E0F               	movwf	___awmod@dividend,c
  3094  001BAE  6A10               	clrf	___awmod@dividend+1,c
  3095  001BB0  BE0F               	btfsc	___awmod@dividend,7,c
  3096  001BB2  0610               	decf	___awmod@dividend+1,f,c
  3097  001BB4  ECF5  F015         	call	___awmod	;wreg free
  3098  001BB8  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  3099  001BBC  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  3100  001BC0  EC82  F017         	call	___wmul	;wreg free
  3101  001BC4  0E29               	movlw	low __npowers_
  3102  001BC6  241D               	addwf	?___wmul,w,c
  3103  001BC8  6EF6               	movwf	tblptrl,c
  3104  001BCA  0E10               	movlw	high __npowers_
  3105  001BCC  201E               	addwfc	?___wmul+1,w,c
  3106  001BCE  6EF7               	movwf	tblptrh,c
  3107  001BD0                     	if	0	;There are less than 3 active tblptr bytes
  3108  001BD0                     	endif
  3109  001BD0  0009               	tblrd		*+
  3110  001BD2  CFF5 F026          	movff	tablat,___ftmul@f2
  3111  001BD6  0009               	tblrd		*+
  3112  001BD8  CFF5 F027          	movff	tablat,___ftmul@f2+1
  3113  001BDC  000A               	tblrd		*-
  3114  001BDE  CFF5 F028          	movff	tablat,___ftmul@f2+2
  3115  001BE2  ECF3  F012         	call	___ftmul	;wreg free
  3116  001BE6  D7A7               	goto	L4
  3117  001BE8                     l3823:
  3118                           
  3119                           ;doprnt.c: 434: return _npowers_[scl];
  3120  001BE8  5038               	movf	scale@scl,w,c
  3121  001BEA  0D03               	mullw	3
  3122  001BEC  0E29               	movlw	low __npowers_
  3123  001BEE  24F3               	addwf	prodl,w,c
  3124  001BF0  6EF6               	movwf	tblptrl,c
  3125  001BF2  0E10               	movlw	high __npowers_
  3126  001BF4  20F4               	addwfc	prodh,w,c
  3127  001BF6  6EF7               	movwf	tblptrh,c
  3128  001BF8                     	if	0	;There are less than 3 active tblptr bytes
  3129  001BF8                     	endif
  3130  001BF8  0009               	tblrd		*+
  3131  001BFA  CFF5 F032          	movff	tablat,?_scale
  3132  001BFE  0009               	tblrd		*+
  3133  001C00  CFF5 F033          	movff	tablat,?_scale+1
  3134  001C04  000A               	tblrd		*-
  3135  001C06  CFF5 F034          	movff	tablat,?_scale+2
  3136  001C0A  0012               	return	
  3137  001C0C                     l3827:
  3138                           
  3139                           ;doprnt.c: 435: }
  3140                           ;doprnt.c: 436: if(scl>=110)
  3141  001C0C  5038               	movf	scale@scl,w,c
  3142  001C0E  0A80               	xorlw	128
  3143  001C10  0F12               	addlw	-238
  3144  001C12  A0D8               	btfss	status,0,c
  3145  001C14  D091               	goto	l3835
  3146                           
  3147                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3148  001C16  0E00               	movlw	0
  3149  001C18  6E20               	movwf	___wmul@multiplicand+1,c
  3150  001C1A  0E03               	movlw	3
  3151  001C1C  6E1F               	movwf	___wmul@multiplicand,c
  3152  001C1E  0E00               	movlw	0
  3153  001C20  6E18               	movwf	___awdiv@divisor+1,c
  3154  001C22  0E0A               	movlw	10
  3155  001C24  6E17               	movwf	___awdiv@divisor,c
  3156  001C26  0E00               	movlw	0
  3157  001C28  6E12               	movwf	___awmod@divisor+1,c
  3158  001C2A  0E64               	movlw	100
  3159  001C2C  6E11               	movwf	___awmod@divisor,c
  3160  001C2E  5038               	movf	scale@scl,w,c
  3161  001C30  6E0F               	movwf	___awmod@dividend,c
  3162  001C32  6A10               	clrf	___awmod@dividend+1,c
  3163  001C34  BE0F               	btfsc	___awmod@dividend,7,c
  3164  001C36  0610               	decf	___awmod@dividend+1,f,c
  3165  001C38  ECF5  F015         	call	___awmod	;wreg free
  3166  001C3C  C00F  F015         	movff	?___awmod,___awdiv@dividend
  3167  001C40  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  3168  001C44  ECF9  F014         	call	___awdiv	;wreg free
  3169  001C48  0E09               	movlw	9
  3170  001C4A  2415               	addwf	?___awdiv,w,c
  3171  001C4C  6E1D               	movwf	___wmul@multiplier,c
  3172  001C4E  0E00               	movlw	0
  3173  001C50  2016               	addwfc	?___awdiv+1,w,c
  3174  001C52  6E1E               	movwf	___wmul@multiplier+1,c
  3175  001C54  EC82  F017         	call	___wmul	;wreg free
  3176  001C58  0E50               	movlw	low __powers_
  3177  001C5A  241D               	addwf	?___wmul,w,c
  3178  001C5C  6EF6               	movwf	tblptrl,c
  3179  001C5E  0E10               	movlw	high __powers_
  3180  001C60  201E               	addwfc	?___wmul+1,w,c
  3181  001C62  6EF7               	movwf	tblptrh,c
  3182  001C64                     	if	0	;There are less than 3 active tblptr bytes
  3183  001C64                     	endif
  3184  001C64  0009               	tblrd		*+
  3185  001C66  CFF5 F026          	movff	tablat,___ftmul@f2
  3186  001C6A  0009               	tblrd		*+
  3187  001C6C  CFF5 F027          	movff	tablat,___ftmul@f2+1
  3188  001C70  000A               	tblrd		*-
  3189  001C72  CFF5 F028          	movff	tablat,___ftmul@f2+2
  3190  001C76  0E00               	movlw	0
  3191  001C78  6E18               	movwf	___awdiv@divisor+1,c
  3192  001C7A  0E64               	movlw	100
  3193  001C7C  6E17               	movwf	___awdiv@divisor,c
  3194  001C7E  5038               	movf	scale@scl,w,c
  3195  001C80  6E15               	movwf	___awdiv@dividend,c
  3196  001C82  6A16               	clrf	___awdiv@dividend+1,c
  3197  001C84  BE15               	btfsc	___awdiv@dividend,7,c
  3198  001C86  0616               	decf	___awdiv@dividend+1,f,c
  3199  001C88  ECF9  F014         	call	___awdiv	;wreg free
  3200  001C8C  0E12               	movlw	18
  3201  001C8E  2415               	addwf	?___awdiv,w,c
  3202  001C90  6E1D               	movwf	___wmul@multiplier,c
  3203  001C92  0E00               	movlw	0
  3204  001C94  2016               	addwfc	?___awdiv+1,w,c
  3205  001C96  6E1E               	movwf	___wmul@multiplier+1,c
  3206  001C98  0E00               	movlw	0
  3207  001C9A  6E20               	movwf	___wmul@multiplicand+1,c
  3208  001C9C  0E03               	movlw	3
  3209  001C9E  6E1F               	movwf	___wmul@multiplicand,c
  3210  001CA0  EC82  F017         	call	___wmul	;wreg free
  3211  001CA4  0E50               	movlw	low __powers_
  3212  001CA6  241D               	addwf	?___wmul,w,c
  3213  001CA8  6EF6               	movwf	tblptrl,c
  3214  001CAA  0E10               	movlw	high __powers_
  3215  001CAC  201E               	addwfc	?___wmul+1,w,c
  3216  001CAE  6EF7               	movwf	tblptrh,c
  3217  001CB0                     	if	0	;There are less than 3 active tblptr bytes
  3218  001CB0                     	endif
  3219  001CB0  0009               	tblrd		*+
  3220  001CB2  CFF5 F023          	movff	tablat,___ftmul@f1
  3221  001CB6  0009               	tblrd		*+
  3222  001CB8  CFF5 F024          	movff	tablat,___ftmul@f1+1
  3223  001CBC  000A               	tblrd		*-
  3224  001CBE  CFF5 F025          	movff	tablat,___ftmul@f1+2
  3225  001CC2  ECF3  F012         	call	___ftmul	;wreg free
  3226  001CC6  C023  F035         	movff	?___ftmul,_scale$1114
  3227  001CCA  C024  F036         	movff	?___ftmul+1,_scale$1114+1
  3228  001CCE  C025  F037         	movff	?___ftmul+2,_scale$1114+2
  3229                           
  3230                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3231  001CD2  C035  F023         	movff	_scale$1114,___ftmul@f1
  3232  001CD6  C036  F024         	movff	_scale$1114+1,___ftmul@f1+1
  3233  001CDA  C037  F025         	movff	_scale$1114+2,___ftmul@f1+2
  3234  001CDE  0E00               	movlw	0
  3235  001CE0  6E20               	movwf	___wmul@multiplicand+1,c
  3236  001CE2  0E03               	movlw	3
  3237  001CE4  6E1F               	movwf	___wmul@multiplicand,c
  3238  001CE6  0E00               	movlw	0
  3239  001CE8  6E12               	movwf	___awmod@divisor+1,c
  3240  001CEA  0E0A               	movlw	10
  3241  001CEC  6E11               	movwf	___awmod@divisor,c
  3242  001CEE  5038               	movf	scale@scl,w,c
  3243  001CF0  6E0F               	movwf	___awmod@dividend,c
  3244  001CF2  6A10               	clrf	___awmod@dividend+1,c
  3245  001CF4  BE0F               	btfsc	___awmod@dividend,7,c
  3246  001CF6  0610               	decf	___awmod@dividend+1,f,c
  3247  001CF8  ECF5  F015         	call	___awmod	;wreg free
  3248  001CFC  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  3249  001D00  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  3250  001D04  EC82  F017         	call	___wmul	;wreg free
  3251  001D08  0E50               	movlw	low __powers_
  3252  001D0A  241D               	addwf	?___wmul,w,c
  3253  001D0C  6EF6               	movwf	tblptrl,c
  3254  001D0E  0E10               	movlw	high __powers_
  3255  001D10  201E               	addwfc	?___wmul+1,w,c
  3256  001D12  6EF7               	movwf	tblptrh,c
  3257  001D14                     	if	0	;There are less than 3 active tblptr bytes
  3258  001D14                     	endif
  3259  001D14  0009               	tblrd		*+
  3260  001D16  CFF5 F026          	movff	tablat,___ftmul@f2
  3261  001D1A  0009               	tblrd		*+
  3262  001D1C  CFF5 F027          	movff	tablat,___ftmul@f2+1
  3263  001D20  000A               	tblrd		*-
  3264  001D22  CFF5 F028          	movff	tablat,___ftmul@f2+2
  3265  001D26  ECF3  F012         	call	___ftmul	;wreg free
  3266  001D2A  C023  F032         	movff	?___ftmul,?_scale
  3267  001D2E  C024  F033         	movff	?___ftmul+1,?_scale+1
  3268  001D32  C025  F034         	movff	?___ftmul+2,?_scale+2
  3269  001D36  0012               	return	
  3270  001D38                     l3835:
  3271                           
  3272                           ;doprnt.c: 438: else if(scl > 10)
  3273  001D38  5038               	movf	scale@scl,w,c
  3274  001D3A  0A80               	xorlw	128
  3275  001D3C  0F75               	addlw	-139
  3276  001D3E  A0D8               	btfss	status,0,c
  3277  001D40  D04D               	goto	l3841
  3278                           
  3279                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3280  001D42  0E00               	movlw	0
  3281  001D44  6E18               	movwf	___awdiv@divisor+1,c
  3282  001D46  0E0A               	movlw	10
  3283  001D48  6E17               	movwf	___awdiv@divisor,c
  3284  001D4A  5038               	movf	scale@scl,w,c
  3285  001D4C  6E15               	movwf	___awdiv@dividend,c
  3286  001D4E  6A16               	clrf	___awdiv@dividend+1,c
  3287  001D50  BE15               	btfsc	___awdiv@dividend,7,c
  3288  001D52  0616               	decf	___awdiv@dividend+1,f,c
  3289  001D54  ECF9  F014         	call	___awdiv	;wreg free
  3290  001D58  0E09               	movlw	9
  3291  001D5A  2415               	addwf	?___awdiv,w,c
  3292  001D5C  6E1D               	movwf	___wmul@multiplier,c
  3293  001D5E  0E00               	movlw	0
  3294  001D60  2016               	addwfc	?___awdiv+1,w,c
  3295  001D62  6E1E               	movwf	___wmul@multiplier+1,c
  3296  001D64  0E00               	movlw	0
  3297  001D66  6E20               	movwf	___wmul@multiplicand+1,c
  3298  001D68  0E03               	movlw	3
  3299  001D6A  6E1F               	movwf	___wmul@multiplicand,c
  3300  001D6C  EC82  F017         	call	___wmul	;wreg free
  3301  001D70  0E50               	movlw	low __powers_
  3302  001D72  241D               	addwf	?___wmul,w,c
  3303  001D74  6EF6               	movwf	tblptrl,c
  3304  001D76  0E10               	movlw	high __powers_
  3305  001D78  201E               	addwfc	?___wmul+1,w,c
  3306  001D7A  6EF7               	movwf	tblptrh,c
  3307  001D7C                     	if	0	;There are less than 3 active tblptr bytes
  3308  001D7C                     	endif
  3309  001D7C  0009               	tblrd		*+
  3310  001D7E  CFF5 F023          	movff	tablat,___ftmul@f1
  3311  001D82  0009               	tblrd		*+
  3312  001D84  CFF5 F024          	movff	tablat,___ftmul@f1+1
  3313  001D88  000A               	tblrd		*-
  3314  001D8A  CFF5 F025          	movff	tablat,___ftmul@f1+2
  3315  001D8E  0E00               	movlw	0
  3316  001D90  6E20               	movwf	___wmul@multiplicand+1,c
  3317  001D92  0E03               	movlw	3
  3318  001D94  6E1F               	movwf	___wmul@multiplicand,c
  3319  001D96  0E00               	movlw	0
  3320  001D98  6E12               	movwf	___awmod@divisor+1,c
  3321  001D9A  0E0A               	movlw	10
  3322  001D9C  6E11               	movwf	___awmod@divisor,c
  3323  001D9E  5038               	movf	scale@scl,w,c
  3324  001DA0  6E0F               	movwf	___awmod@dividend,c
  3325  001DA2  6A10               	clrf	___awmod@dividend+1,c
  3326  001DA4  BE0F               	btfsc	___awmod@dividend,7,c
  3327  001DA6  0610               	decf	___awmod@dividend+1,f,c
  3328  001DA8  ECF5  F015         	call	___awmod	;wreg free
  3329  001DAC  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  3330  001DB0  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  3331  001DB4  EC82  F017         	call	___wmul	;wreg free
  3332  001DB8  0E50               	movlw	low __powers_
  3333  001DBA  241D               	addwf	?___wmul,w,c
  3334  001DBC  6EF6               	movwf	tblptrl,c
  3335  001DBE  0E10               	movlw	high __powers_
  3336  001DC0  201E               	addwfc	?___wmul+1,w,c
  3337  001DC2  6EF7               	movwf	tblptrh,c
  3338  001DC4                     	if	0	;There are less than 3 active tblptr bytes
  3339  001DC4                     	endif
  3340  001DC4  0009               	tblrd		*+
  3341  001DC6  CFF5 F026          	movff	tablat,___ftmul@f2
  3342  001DCA  0009               	tblrd		*+
  3343  001DCC  CFF5 F027          	movff	tablat,___ftmul@f2+1
  3344  001DD0  000A               	tblrd		*-
  3345  001DD2  CFF5 F028          	movff	tablat,___ftmul@f2+2
  3346  001DD6  ECF3  F012         	call	___ftmul	;wreg free
  3347  001DDA  D7A7               	goto	L5
  3348  001DDC                     l3841:
  3349                           
  3350                           ;doprnt.c: 440: return _powers_[scl];
  3351  001DDC  5038               	movf	scale@scl,w,c
  3352  001DDE  0D03               	mullw	3
  3353  001DE0  0E50               	movlw	low __powers_
  3354  001DE2  24F3               	addwf	prodl,w,c
  3355  001DE4  6EF6               	movwf	tblptrl,c
  3356  001DE6  0E10               	movlw	high __powers_
  3357  001DE8  20F4               	addwfc	prodh,w,c
  3358  001DEA  6EF7               	movwf	tblptrh,c
  3359  001DEC                     	if	0	;There are less than 3 active tblptr bytes
  3360  001DEC                     	endif
  3361  001DEC  0009               	tblrd		*+
  3362  001DEE  CFF5 F032          	movff	tablat,?_scale
  3363  001DF2  0009               	tblrd		*+
  3364  001DF4  CFF5 F033          	movff	tablat,?_scale+1
  3365  001DF8  000A               	tblrd		*-
  3366  001DFA  CFF5 F034          	movff	tablat,?_scale+2
  3367  001DFE  0012               	return	
  3368  001E00                     __end_of_scale:
  3369                           	opt stack 0
  3370                           tblptru	equ	0xFF8
  3371                           tblptrh	equ	0xFF7
  3372                           tblptrl	equ	0xFF6
  3373                           tablat	equ	0xFF5
  3374                           prodh	equ	0xFF4
  3375                           prodl	equ	0xFF3
  3376                           intcon	equ	0xFF2
  3377                           postinc0	equ	0xFEE
  3378                           wreg	equ	0xFE8
  3379                           postdec1	equ	0xFE5
  3380                           fsr1l	equ	0xFE1
  3381                           postinc2	equ	0xFDE
  3382                           postdec2	equ	0xFDD
  3383                           fsr2h	equ	0xFDA
  3384                           fsr2l	equ	0xFD9
  3385                           status	equ	0xFD8
  3386                           
  3387 ;; *************** function _putch *****************
  3388 ;; Defined at:
  3389 ;;		line 35 in file "lcd.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;  data            1    wreg     unsigned char 
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;  data            1   18[COMRAM] unsigned char 
  3394 ;; Return value:  Size  Location     Type
  3395 ;;                  1    wreg      void 
  3396 ;; Registers used:
  3397 ;;		wreg, status,2, status,0, cstack
  3398 ;; Tracked objects:
  3399 ;;		On entry : 0/0
  3400 ;;		On exit  : 0/0
  3401 ;;		Unchanged: 0/0
  3402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3404 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;Total ram usage:        1 bytes
  3408 ;; Hardware stack levels used:    1
  3409 ;; Hardware stack levels required when called:    4
  3410 ;; This function calls:
  3411 ;;		_lcdNewline
  3412 ;;		_lcdNibble
  3413 ;; This function is called by:
  3414 ;;		_printf
  3415 ;; This function uses a non-reentrant model
  3416 ;;
  3417                           
  3418                           	psect	text5
  3419  002F74                     __ptext5:
  3420                           	opt stack 0
  3421  002F74                     _putch:
  3422                           	opt stack 24
  3423                           
  3424                           ;incstack = 0
  3425                           ;putch@data stored from wreg
  3426  002F74  6E13               	movwf	putch@data,c
  3427                           
  3428                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  3429  002F76  0E0A               	movlw	10
  3430  002F78  1813               	xorwf	putch@data,w,c
  3431  002F7A  A4D8               	btfss	status,2,c
  3432  002F7C  D003               	goto	l76
  3433  002F7E  ECFD  F017         	call	_lcdNewline	;wreg free
  3434  002F82  0012               	return	
  3435  002F84                     l76:
  3436                           
  3437                           ;lcd.c: 37: else
  3438                           ;lcd.c: 38: {
  3439                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  3440  002F84  848C               	bsf	3980,2,c	;volatile
  3441                           
  3442                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  3443  002F86  0E74               	movlw	116
  3444  002F88                     u4727:
  3445  002F88  2EE8               	decfsz	wreg,f,c
  3446  002F8A  D7FE               	bra	u4727
  3447  002F8C  D000               	nop2	
  3448                           
  3449                           ;lcd.c: 41: lcdNibble(data);
  3450  002F8E  5013               	movf	putch@data,w,c
  3451  002F90  EC60  F016         	call	_lcdNibble
  3452  002F94  0012               	return	
  3453  002F96                     __end_of_putch:
  3454                           	opt stack 0
  3455                           tblptru	equ	0xFF8
  3456                           tblptrh	equ	0xFF7
  3457                           tblptrl	equ	0xFF6
  3458                           tablat	equ	0xFF5
  3459                           prodh	equ	0xFF4
  3460                           prodl	equ	0xFF3
  3461                           intcon	equ	0xFF2
  3462                           postinc0	equ	0xFEE
  3463                           wreg	equ	0xFE8
  3464                           postdec1	equ	0xFE5
  3465                           fsr1l	equ	0xFE1
  3466                           postinc2	equ	0xFDE
  3467                           postdec2	equ	0xFDD
  3468                           fsr2h	equ	0xFDA
  3469                           fsr2l	equ	0xFD9
  3470                           status	equ	0xFD8
  3471                           
  3472 ;; *************** function _lcdNewline *****************
  3473 ;; Defined at:
  3474 ;;		line 78 in file "lcd.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;		None
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;		None
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  1    wreg      void 
  3481 ;; Registers used:
  3482 ;;		wreg, status,2, status,0, cstack
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/0
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3492 ;;Total ram usage:        0 bytes
  3493 ;; Hardware stack levels used:    1
  3494 ;; Hardware stack levels required when called:    3
  3495 ;; This function calls:
  3496 ;;		_lcdInst
  3497 ;; This function is called by:
  3498 ;;		_putch
  3499 ;; This function uses a non-reentrant model
  3500 ;;
  3501                           
  3502                           	psect	text6
  3503  002FFA                     __ptext6:
  3504                           	opt stack 0
  3505  002FFA                     _lcdNewline:
  3506                           	opt stack 24
  3507                           
  3508                           ;lcd.c: 79: lcdInst(0b11000000);
  3509                           
  3510                           ;incstack = 0
  3511  002FFA  0EC0               	movlw	192
  3512  002FFC  ECCB  F017         	call	_lcdInst
  3513  003000  0012               	return		;funcret
  3514  003002                     __end_of_lcdNewline:
  3515                           	opt stack 0
  3516                           tblptru	equ	0xFF8
  3517                           tblptrh	equ	0xFF7
  3518                           tblptrl	equ	0xFF6
  3519                           tablat	equ	0xFF5
  3520                           prodh	equ	0xFF4
  3521                           prodl	equ	0xFF3
  3522                           intcon	equ	0xFF2
  3523                           postinc0	equ	0xFEE
  3524                           wreg	equ	0xFE8
  3525                           postdec1	equ	0xFE5
  3526                           fsr1l	equ	0xFE1
  3527                           postinc2	equ	0xFDE
  3528                           postdec2	equ	0xFDD
  3529                           fsr2h	equ	0xFDA
  3530                           fsr2l	equ	0xFD9
  3531                           status	equ	0xFD8
  3532                           
  3533 ;; *************** function _fround *****************
  3534 ;; Defined at:
  3535 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3536 ;; Parameters:    Size  Location     Type
  3537 ;;  prec            1    wreg     unsigned char 
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;  prec            1   58[COMRAM] unsigned char 
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  3   49[COMRAM] unsigned char 
  3542 ;; Registers used:
  3543 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3549 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3550 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3552 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3553 ;;Total ram usage:       10 bytes
  3554 ;; Hardware stack levels used:    1
  3555 ;; Hardware stack levels required when called:    3
  3556 ;; This function calls:
  3557 ;;		___awdiv
  3558 ;;		___awmod
  3559 ;;		___ftmul
  3560 ;;		___wmul
  3561 ;; This function is called by:
  3562 ;;		_printf
  3563 ;; This function uses a non-reentrant model
  3564 ;;
  3565                           
  3566                           	psect	text7
  3567  001E00                     __ptext7:
  3568                           	opt stack 0
  3569  001E00                     _fround:
  3570                           	opt stack 25
  3571                           
  3572                           ;incstack = 0
  3573                           ;fround@prec stored from wreg
  3574  001E00  6E3B               	movwf	fround@prec,c
  3575                           
  3576                           ;doprnt.c: 413: if(prec>=110)
  3577  001E02  0E6D               	movlw	109
  3578  001E04  643B               	cpfsgt	fround@prec,c
  3579  001E06  D09F               	goto	l3795
  3580                           
  3581                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3582  001E08  0E00               	movlw	0
  3583  001E0A  6E20               	movwf	___wmul@multiplicand+1,c
  3584  001E0C  0E03               	movlw	3
  3585  001E0E  6E1F               	movwf	___wmul@multiplicand,c
  3586  001E10  0E00               	movlw	0
  3587  001E12  6E18               	movwf	___awdiv@divisor+1,c
  3588  001E14  0E0A               	movlw	10
  3589  001E16  6E17               	movwf	___awdiv@divisor,c
  3590  001E18  0E00               	movlw	0
  3591  001E1A  6E12               	movwf	___awmod@divisor+1,c
  3592  001E1C  0E64               	movlw	100
  3593  001E1E  6E11               	movwf	___awmod@divisor,c
  3594  001E20  C03B  F00F         	movff	fround@prec,___awmod@dividend
  3595  001E24  6A10               	clrf	___awmod@dividend+1,c
  3596  001E26  ECF5  F015         	call	___awmod	;wreg free
  3597  001E2A  C00F  F015         	movff	?___awmod,___awdiv@dividend
  3598  001E2E  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  3599  001E32  ECF9  F014         	call	___awdiv	;wreg free
  3600  001E36  0E09               	movlw	9
  3601  001E38  2415               	addwf	?___awdiv,w,c
  3602  001E3A  6E1D               	movwf	___wmul@multiplier,c
  3603  001E3C  0E00               	movlw	0
  3604  001E3E  2016               	addwfc	?___awdiv+1,w,c
  3605  001E40  6E1E               	movwf	___wmul@multiplier+1,c
  3606  001E42  EC82  F017         	call	___wmul	;wreg free
  3607  001E46  0E29               	movlw	low __npowers_
  3608  001E48  241D               	addwf	?___wmul,w,c
  3609  001E4A  6EF6               	movwf	tblptrl,c
  3610  001E4C  0E10               	movlw	high __npowers_
  3611  001E4E  201E               	addwfc	?___wmul+1,w,c
  3612  001E50  6EF7               	movwf	tblptrh,c
  3613  001E52                     	if	0	;There are less than 3 active tblptr bytes
  3614  001E52                     	endif
  3615  001E52  0009               	tblrd		*+
  3616  001E54  CFF5 F026          	movff	tablat,___ftmul@f2
  3617  001E58  0009               	tblrd		*+
  3618  001E5A  CFF5 F027          	movff	tablat,___ftmul@f2+1
  3619  001E5E  000A               	tblrd		*-
  3620  001E60  CFF5 F028          	movff	tablat,___ftmul@f2+2
  3621  001E64  0E00               	movlw	0
  3622  001E66  6E18               	movwf	___awdiv@divisor+1,c
  3623  001E68  0E64               	movlw	100
  3624  001E6A  6E17               	movwf	___awdiv@divisor,c
  3625  001E6C  C03B  F015         	movff	fround@prec,___awdiv@dividend
  3626  001E70  6A16               	clrf	___awdiv@dividend+1,c
  3627  001E72  ECF9  F014         	call	___awdiv	;wreg free
  3628  001E76  0E12               	movlw	18
  3629  001E78  2415               	addwf	?___awdiv,w,c
  3630  001E7A  6E1D               	movwf	___wmul@multiplier,c
  3631  001E7C  0E00               	movlw	0
  3632  001E7E  2016               	addwfc	?___awdiv+1,w,c
  3633  001E80  6E1E               	movwf	___wmul@multiplier+1,c
  3634  001E82  0E00               	movlw	0
  3635  001E84  6E20               	movwf	___wmul@multiplicand+1,c
  3636  001E86  0E03               	movlw	3
  3637  001E88  6E1F               	movwf	___wmul@multiplicand,c
  3638  001E8A  EC82  F017         	call	___wmul	;wreg free
  3639  001E8E  0E29               	movlw	low __npowers_
  3640  001E90  241D               	addwf	?___wmul,w,c
  3641  001E92  6EF6               	movwf	tblptrl,c
  3642  001E94  0E10               	movlw	high __npowers_
  3643  001E96  201E               	addwfc	?___wmul+1,w,c
  3644  001E98  6EF7               	movwf	tblptrh,c
  3645  001E9A                     	if	0	;There are less than 3 active tblptr bytes
  3646  001E9A                     	endif
  3647  001E9A  0009               	tblrd		*+
  3648  001E9C  CFF5 F023          	movff	tablat,___ftmul@f1
  3649  001EA0  0009               	tblrd		*+
  3650  001EA2  CFF5 F024          	movff	tablat,___ftmul@f1+1
  3651  001EA6  000A               	tblrd		*-
  3652  001EA8  CFF5 F025          	movff	tablat,___ftmul@f1+2
  3653  001EAC  ECF3  F012         	call	___ftmul	;wreg free
  3654  001EB0  C023  F038         	movff	?___ftmul,_fround$1112
  3655  001EB4  C024  F039         	movff	?___ftmul+1,_fround$1112+1
  3656  001EB8  C025  F03A         	movff	?___ftmul+2,_fround$1112+2
  3657                           
  3658                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3659  001EBC  0E00               	movlw	0
  3660  001EBE  6E20               	movwf	___wmul@multiplicand+1,c
  3661  001EC0  0E03               	movlw	3
  3662  001EC2  6E1F               	movwf	___wmul@multiplicand,c
  3663  001EC4  0E00               	movlw	0
  3664  001EC6  6E12               	movwf	___awmod@divisor+1,c
  3665  001EC8  0E0A               	movlw	10
  3666  001ECA  6E11               	movwf	___awmod@divisor,c
  3667  001ECC  C03B  F00F         	movff	fround@prec,___awmod@dividend
  3668  001ED0  6A10               	clrf	___awmod@dividend+1,c
  3669  001ED2  ECF5  F015         	call	___awmod	;wreg free
  3670  001ED6  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  3671  001EDA  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  3672  001EDE  EC82  F017         	call	___wmul	;wreg free
  3673  001EE2  0E29               	movlw	low __npowers_
  3674  001EE4  241D               	addwf	?___wmul,w,c
  3675  001EE6  6EF6               	movwf	tblptrl,c
  3676  001EE8  0E10               	movlw	high __npowers_
  3677  001EEA  201E               	addwfc	?___wmul+1,w,c
  3678  001EEC  6EF7               	movwf	tblptrh,c
  3679  001EEE                     	if	0	;There are less than 3 active tblptr bytes
  3680  001EEE                     	endif
  3681  001EEE  0009               	tblrd		*+
  3682  001EF0  CFF5 F026          	movff	tablat,___ftmul@f2
  3683  001EF4  0009               	tblrd		*+
  3684  001EF6  CFF5 F027          	movff	tablat,___ftmul@f2+1
  3685  001EFA  000A               	tblrd		*-
  3686  001EFC  CFF5 F028          	movff	tablat,___ftmul@f2+2
  3687  001F00  C038  F023         	movff	_fround$1112,___ftmul@f1
  3688  001F04  C039  F024         	movff	_fround$1112+1,___ftmul@f1+1
  3689  001F08  C03A  F025         	movff	_fround$1112+2,___ftmul@f1+2
  3690  001F0C  ECF3  F012         	call	___ftmul	;wreg free
  3691  001F10  C023  F035         	movff	?___ftmul,_fround$1113
  3692  001F14  C024  F036         	movff	?___ftmul+1,_fround$1113+1
  3693  001F18  C025  F037         	movff	?___ftmul+2,_fround$1113+2
  3694                           
  3695                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3696  001F1C  C035  F023         	movff	_fround$1113,___ftmul@f1
  3697  001F20  C036  F024         	movff	_fround$1113+1,___ftmul@f1+1
  3698  001F24  C037  F025         	movff	_fround$1113+2,___ftmul@f1+2
  3699  001F28  0E00               	movlw	0
  3700  001F2A  6E26               	movwf	___ftmul@f2,c
  3701  001F2C  0E00               	movlw	0
  3702  001F2E  6E27               	movwf	___ftmul@f2+1,c
  3703  001F30  0E3F               	movlw	63
  3704  001F32  6E28               	movwf	___ftmul@f2+2,c
  3705  001F34  ECF3  F012         	call	___ftmul	;wreg free
  3706  001F38  C023  F032         	movff	?___ftmul,?_fround
  3707  001F3C  C024  F033         	movff	?___ftmul+1,?_fround+1
  3708  001F40  C025  F034         	movff	?___ftmul+2,?_fround+2
  3709  001F44  0012               	return	
  3710  001F46                     l3795:
  3711                           
  3712                           ;doprnt.c: 415: else if(prec > 10)
  3713  001F46  0E0A               	movlw	10
  3714  001F48  643B               	cpfsgt	fround@prec,c
  3715  001F4A  D05D               	goto	l3803
  3716                           
  3717                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3718  001F4C  0E00               	movlw	0
  3719  001F4E  6E20               	movwf	___wmul@multiplicand+1,c
  3720  001F50  0E03               	movlw	3
  3721  001F52  6E1F               	movwf	___wmul@multiplicand,c
  3722  001F54  0E00               	movlw	0
  3723  001F56  6E12               	movwf	___awmod@divisor+1,c
  3724  001F58  0E0A               	movlw	10
  3725  001F5A  6E11               	movwf	___awmod@divisor,c
  3726  001F5C  C03B  F00F         	movff	fround@prec,___awmod@dividend
  3727  001F60  6A10               	clrf	___awmod@dividend+1,c
  3728  001F62  ECF5  F015         	call	___awmod	;wreg free
  3729  001F66  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  3730  001F6A  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  3731  001F6E  EC82  F017         	call	___wmul	;wreg free
  3732  001F72  0E29               	movlw	low __npowers_
  3733  001F74  241D               	addwf	?___wmul,w,c
  3734  001F76  6EF6               	movwf	tblptrl,c
  3735  001F78  0E10               	movlw	high __npowers_
  3736  001F7A  201E               	addwfc	?___wmul+1,w,c
  3737  001F7C  6EF7               	movwf	tblptrh,c
  3738  001F7E                     	if	0	;There are less than 3 active tblptr bytes
  3739  001F7E                     	endif
  3740  001F7E  0009               	tblrd		*+
  3741  001F80  CFF5 F026          	movff	tablat,___ftmul@f2
  3742  001F84  0009               	tblrd		*+
  3743  001F86  CFF5 F027          	movff	tablat,___ftmul@f2+1
  3744  001F8A  000A               	tblrd		*-
  3745  001F8C  CFF5 F028          	movff	tablat,___ftmul@f2+2
  3746  001F90  0E00               	movlw	0
  3747  001F92  6E18               	movwf	___awdiv@divisor+1,c
  3748  001F94  0E0A               	movlw	10
  3749  001F96  6E17               	movwf	___awdiv@divisor,c
  3750  001F98  C03B  F015         	movff	fround@prec,___awdiv@dividend
  3751  001F9C  6A16               	clrf	___awdiv@dividend+1,c
  3752  001F9E  ECF9  F014         	call	___awdiv	;wreg free
  3753  001FA2  0E09               	movlw	9
  3754  001FA4  2415               	addwf	?___awdiv,w,c
  3755  001FA6  6E1D               	movwf	___wmul@multiplier,c
  3756  001FA8  0E00               	movlw	0
  3757  001FAA  2016               	addwfc	?___awdiv+1,w,c
  3758  001FAC  6E1E               	movwf	___wmul@multiplier+1,c
  3759  001FAE  0E00               	movlw	0
  3760  001FB0  6E20               	movwf	___wmul@multiplicand+1,c
  3761  001FB2  0E03               	movlw	3
  3762  001FB4  6E1F               	movwf	___wmul@multiplicand,c
  3763  001FB6  EC82  F017         	call	___wmul	;wreg free
  3764  001FBA  0E29               	movlw	low __npowers_
  3765  001FBC  241D               	addwf	?___wmul,w,c
  3766  001FBE  6EF6               	movwf	tblptrl,c
  3767  001FC0  0E10               	movlw	high __npowers_
  3768  001FC2  201E               	addwfc	?___wmul+1,w,c
  3769  001FC4  6EF7               	movwf	tblptrh,c
  3770  001FC6                     	if	0	;There are less than 3 active tblptr bytes
  3771  001FC6                     	endif
  3772  001FC6  0009               	tblrd		*+
  3773  001FC8  CFF5 F023          	movff	tablat,___ftmul@f1
  3774  001FCC  0009               	tblrd		*+
  3775  001FCE  CFF5 F024          	movff	tablat,___ftmul@f1+1
  3776  001FD2  000A               	tblrd		*-
  3777  001FD4  CFF5 F025          	movff	tablat,___ftmul@f1+2
  3778  001FD8  ECF3  F012         	call	___ftmul	;wreg free
  3779  001FDC  C023  F038         	movff	?___ftmul,_fround$1112
  3780  001FE0  C024  F039         	movff	?___ftmul+1,_fround$1112+1
  3781  001FE4  C025  F03A         	movff	?___ftmul+2,_fround$1112+2
  3782                           
  3783                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3784  001FE8  C038  F023         	movff	_fround$1112,___ftmul@f1
  3785  001FEC  C039  F024         	movff	_fround$1112+1,___ftmul@f1+1
  3786  001FF0  C03A  F025         	movff	_fround$1112+2,___ftmul@f1+2
  3787  001FF4  0E00               	movlw	0
  3788  001FF6  6E26               	movwf	___ftmul@f2,c
  3789  001FF8  0E00               	movlw	0
  3790  001FFA  6E27               	movwf	___ftmul@f2+1,c
  3791  001FFC  0E3F               	movlw	63
  3792  001FFE  6E28               	movwf	___ftmul@f2+2,c
  3793  002000  ECF3  F012         	call	___ftmul	;wreg free
  3794  002004  D799               	goto	L6
  3795  002006                     l3803:
  3796                           
  3797                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3798  002006  503B               	movf	fround@prec,w,c
  3799  002008  0D03               	mullw	3
  3800  00200A  0E29               	movlw	low __npowers_
  3801  00200C  24F3               	addwf	prodl,w,c
  3802  00200E  6EF6               	movwf	tblptrl,c
  3803  002010  0E10               	movlw	high __npowers_
  3804  002012  20F4               	addwfc	prodh,w,c
  3805  002014  6EF7               	movwf	tblptrh,c
  3806  002016                     	if	0	;There are less than 3 active tblptr bytes
  3807  002016                     	endif
  3808  002016  0009               	tblrd		*+
  3809  002018  CFF5 F023          	movff	tablat,___ftmul@f1
  3810  00201C  0009               	tblrd		*+
  3811  00201E  CFF5 F024          	movff	tablat,___ftmul@f1+1
  3812  002022  000A               	tblrd		*-
  3813  002024  CFF5 F025          	movff	tablat,___ftmul@f1+2
  3814  002028  0E00               	movlw	0
  3815  00202A  6E26               	movwf	___ftmul@f2,c
  3816  00202C  0E00               	movlw	0
  3817  00202E  6E27               	movwf	___ftmul@f2+1,c
  3818  002030  0E3F               	movlw	63
  3819  002032  6E28               	movwf	___ftmul@f2+2,c
  3820  002034  ECF3  F012         	call	___ftmul	;wreg free
  3821  002038  C023  F032         	movff	?___ftmul,?_fround
  3822  00203C  C024  F033         	movff	?___ftmul+1,?_fround+1
  3823  002040  C025  F034         	movff	?___ftmul+2,?_fround+2
  3824  002044  0012               	return	
  3825  002046                     __end_of_fround:
  3826                           	opt stack 0
  3827                           tblptru	equ	0xFF8
  3828                           tblptrh	equ	0xFF7
  3829                           tblptrl	equ	0xFF6
  3830                           tablat	equ	0xFF5
  3831                           prodh	equ	0xFF4
  3832                           prodl	equ	0xFF3
  3833                           intcon	equ	0xFF2
  3834                           postinc0	equ	0xFEE
  3835                           wreg	equ	0xFE8
  3836                           postdec1	equ	0xFE5
  3837                           fsr1l	equ	0xFE1
  3838                           postinc2	equ	0xFDE
  3839                           postdec2	equ	0xFDD
  3840                           fsr2h	equ	0xFDA
  3841                           fsr2l	equ	0xFD9
  3842                           status	equ	0xFD8
  3843                           
  3844 ;; *************** function ___wmul *****************
  3845 ;; Defined at:
  3846 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  3847 ;; Parameters:    Size  Location     Type
  3848 ;;  multiplier      2   28[COMRAM] unsigned int 
  3849 ;;  multiplicand    2   30[COMRAM] unsigned int 
  3850 ;; Auto vars:     Size  Location     Type
  3851 ;;  product         2   32[COMRAM] unsigned int 
  3852 ;; Return value:  Size  Location     Type
  3853 ;;                  2   28[COMRAM] unsigned int 
  3854 ;; Registers used:
  3855 ;;		wreg, status,2, status,0, prodl, prodh
  3856 ;; Tracked objects:
  3857 ;;		On entry : 0/0
  3858 ;;		On exit  : 0/0
  3859 ;;		Unchanged: 0/0
  3860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3861 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3862 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3864 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3865 ;;Total ram usage:        6 bytes
  3866 ;; Hardware stack levels used:    1
  3867 ;; Hardware stack levels required when called:    1
  3868 ;; This function calls:
  3869 ;;		Nothing
  3870 ;; This function is called by:
  3871 ;;		_fround
  3872 ;;		_scale
  3873 ;;		_printf
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           	psect	text8
  3878  002F04                     __ptext8:
  3879                           	opt stack 0
  3880  002F04                     ___wmul:
  3881                           	opt stack 26
  3882                           
  3883                           ;incstack = 0
  3884  002F04  501D               	movf	___wmul@multiplier,w,c
  3885  002F06  021F               	mulwf	___wmul@multiplicand,c
  3886  002F08  CFF3 F021          	movff	prodl,___wmul@product
  3887  002F0C  CFF4 F022          	movff	prodh,___wmul@product+1
  3888  002F10  501D               	movf	___wmul@multiplier,w,c
  3889  002F12  0220               	mulwf	___wmul@multiplicand+1,c
  3890  002F14  50F3               	movf	prodl,w,c
  3891  002F16  2622               	addwf	___wmul@product+1,f,c
  3892  002F18  501E               	movf	___wmul@multiplier+1,w,c
  3893  002F1A  021F               	mulwf	___wmul@multiplicand,c
  3894  002F1C  50F3               	movf	prodl,w,c
  3895  002F1E  2622               	addwf	___wmul@product+1,f,c
  3896  002F20  C021  F01D         	movff	___wmul@product,?___wmul
  3897  002F24  C022  F01E         	movff	___wmul@product+1,?___wmul+1
  3898  002F28  0012               	return	
  3899  002F2A                     __end_of___wmul:
  3900                           	opt stack 0
  3901                           tblptru	equ	0xFF8
  3902                           tblptrh	equ	0xFF7
  3903                           tblptrl	equ	0xFF6
  3904                           tablat	equ	0xFF5
  3905                           prodh	equ	0xFF4
  3906                           prodl	equ	0xFF3
  3907                           intcon	equ	0xFF2
  3908                           postinc0	equ	0xFEE
  3909                           wreg	equ	0xFE8
  3910                           postdec1	equ	0xFE5
  3911                           fsr1l	equ	0xFE1
  3912                           postinc2	equ	0xFDE
  3913                           postdec2	equ	0xFDD
  3914                           fsr2h	equ	0xFDA
  3915                           fsr2l	equ	0xFD9
  3916                           status	equ	0xFD8
  3917                           
  3918 ;; *************** function ___ftmul *****************
  3919 ;; Defined at:
  3920 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  3921 ;; Parameters:    Size  Location     Type
  3922 ;;  f1              3   34[COMRAM] float 
  3923 ;;  f2              3   37[COMRAM] float 
  3924 ;; Auto vars:     Size  Location     Type
  3925 ;;  f3_as_produc    3   44[COMRAM] unsigned um
  3926 ;;  sign            1   48[COMRAM] unsigned char 
  3927 ;;  cntr            1   47[COMRAM] unsigned char 
  3928 ;;  exp             1   43[COMRAM] unsigned char 
  3929 ;; Return value:  Size  Location     Type
  3930 ;;                  3   34[COMRAM] float 
  3931 ;; Registers used:
  3932 ;;		wreg, status,2, status,0, cstack
  3933 ;; Tracked objects:
  3934 ;;		On entry : 0/0
  3935 ;;		On exit  : 0/0
  3936 ;;		Unchanged: 0/0
  3937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3938 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3939 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3940 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3941 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3942 ;;Total ram usage:       15 bytes
  3943 ;; Hardware stack levels used:    1
  3944 ;; Hardware stack levels required when called:    2
  3945 ;; This function calls:
  3946 ;;		___ftpack
  3947 ;; This function is called by:
  3948 ;;		_fround
  3949 ;;		_scale
  3950 ;;		_printf
  3951 ;;		_angleToPulseLength
  3952 ;; This function uses a non-reentrant model
  3953 ;;
  3954                           
  3955                           	psect	text9
  3956  0025E6                     __ptext9:
  3957                           	opt stack 0
  3958  0025E6                     ___ftmul:
  3959                           	opt stack 25
  3960                           
  3961                           ;incstack = 0
  3962  0025E6  C025  F029         	movff	___ftmul@f1+2,??___ftmul
  3963  0025EA  6A2A               	clrf	(??___ftmul+1)& (0+255),c
  3964  0025EC  6A2B               	clrf	(??___ftmul+2)& (0+255),c
  3965  0025EE  3424               	rlcf	___ftmul@f1+1,w,c
  3966  0025F0  3629               	rlcf	??___ftmul& (0+255),f,c
  3967  0025F2  E301               	bnc	u3511
  3968  0025F4  802A               	bsf	(??___ftmul+1)& (0+255),0,c
  3969  0025F6                     u3511:
  3970  0025F6  5029               	movf	??___ftmul,w,c
  3971  0025F8  6E2C               	movwf	___ftmul@exp,c
  3972  0025FA  502C               	movf	___ftmul@exp,w,c
  3973  0025FC  A4D8               	btfss	status,2,c
  3974  0025FE  D007               	goto	l3651
  3975  002600  0E00               	movlw	0
  3976  002602  6E23               	movwf	?___ftmul,c
  3977  002604  0E00               	movlw	0
  3978  002606  6E24               	movwf	?___ftmul+1,c
  3979  002608  0E00               	movlw	0
  3980  00260A  6E25               	movwf	?___ftmul+2,c
  3981  00260C  0012               	return	
  3982  00260E                     l3651:
  3983  00260E  C028  F029         	movff	___ftmul@f2+2,??___ftmul
  3984  002612  6A2A               	clrf	(??___ftmul+1)& (0+255),c
  3985  002614  6A2B               	clrf	(??___ftmul+2)& (0+255),c
  3986  002616  3427               	rlcf	___ftmul@f2+1,w,c
  3987  002618  3629               	rlcf	??___ftmul& (0+255),f,c
  3988  00261A  E301               	bnc	u3531
  3989  00261C  802A               	bsf	(??___ftmul+1)& (0+255),0,c
  3990  00261E                     u3531:
  3991  00261E  5029               	movf	??___ftmul,w,c
  3992  002620  6E31               	movwf	___ftmul@sign,c
  3993  002622  5031               	movf	___ftmul@sign,w,c
  3994  002624  A4D8               	btfss	status,2,c
  3995  002626  D007               	goto	l3657
  3996  002628  0E00               	movlw	0
  3997  00262A  6E23               	movwf	?___ftmul,c
  3998  00262C  0E00               	movlw	0
  3999  00262E  6E24               	movwf	?___ftmul+1,c
  4000  002630  0E00               	movlw	0
  4001  002632  6E25               	movwf	?___ftmul+2,c
  4002  002634  0012               	return	
  4003  002636                     l3657:
  4004  002636  5031               	movf	___ftmul@sign,w,c
  4005  002638  0F7B               	addlw	123
  4006  00263A  262C               	addwf	___ftmul@exp,f,c
  4007  00263C  C025  F031         	movff	___ftmul@f1+2,___ftmul@sign
  4008  002640  5028               	movf	___ftmul@f2+2,w,c
  4009  002642  1A31               	xorwf	___ftmul@sign,f,c
  4010  002644  0E80               	movlw	128
  4011  002646  1631               	andwf	___ftmul@sign,f,c
  4012  002648  8E24               	bsf	___ftmul@f1+1,7,c
  4013  00264A  8E27               	bsf	___ftmul@f2+1,7,c
  4014  00264C  0EFF               	movlw	255
  4015  00264E  1626               	andwf	___ftmul@f2,f,c
  4016  002650  0EFF               	movlw	255
  4017  002652  1627               	andwf	___ftmul@f2+1,f,c
  4018  002654  0E00               	movlw	0
  4019  002656  1628               	andwf	___ftmul@f2+2,f,c
  4020  002658  0E00               	movlw	0
  4021  00265A  6E2D               	movwf	___ftmul@f3_as_product,c
  4022  00265C  0E00               	movlw	0
  4023  00265E  6E2E               	movwf	___ftmul@f3_as_product+1,c
  4024  002660  0E00               	movlw	0
  4025  002662  6E2F               	movwf	___ftmul@f3_as_product+2,c
  4026  002664  0E07               	movlw	7
  4027  002666  6E30               	movwf	___ftmul@cntr,c
  4028  002668                     l3671:
  4029  002668  A023               	btfss	___ftmul@f1,0,c
  4030  00266A  D006               	goto	l3675
  4031  00266C  5026               	movf	___ftmul@f2,w,c
  4032  00266E  262D               	addwf	___ftmul@f3_as_product,f,c
  4033  002670  5027               	movf	___ftmul@f2+1,w,c
  4034  002672  222E               	addwfc	___ftmul@f3_as_product+1,f,c
  4035  002674  5028               	movf	___ftmul@f2+2,w,c
  4036  002676  222F               	addwfc	___ftmul@f3_as_product+2,f,c
  4037  002678                     l3675:
  4038  002678  90D8               	bcf	status,0,c
  4039  00267A  3225               	rrcf	___ftmul@f1+2,f,c
  4040  00267C  3224               	rrcf	___ftmul@f1+1,f,c
  4041  00267E  3223               	rrcf	___ftmul@f1,f,c
  4042  002680  90D8               	bcf	status,0,c
  4043  002682  3626               	rlcf	___ftmul@f2,f,c
  4044  002684  3627               	rlcf	___ftmul@f2+1,f,c
  4045  002686  3628               	rlcf	___ftmul@f2+2,f,c
  4046  002688  2E30               	decfsz	___ftmul@cntr,f,c
  4047  00268A  D7EE               	goto	l3671
  4048  00268C  0E09               	movlw	9
  4049  00268E  6E30               	movwf	___ftmul@cntr,c
  4050  002690                     l3681:
  4051  002690  A023               	btfss	___ftmul@f1,0,c
  4052  002692  D006               	goto	l3685
  4053  002694  5026               	movf	___ftmul@f2,w,c
  4054  002696  262D               	addwf	___ftmul@f3_as_product,f,c
  4055  002698  5027               	movf	___ftmul@f2+1,w,c
  4056  00269A  222E               	addwfc	___ftmul@f3_as_product+1,f,c
  4057  00269C  5028               	movf	___ftmul@f2+2,w,c
  4058  00269E  222F               	addwfc	___ftmul@f3_as_product+2,f,c
  4059  0026A0                     l3685:
  4060  0026A0  90D8               	bcf	status,0,c
  4061  0026A2  3225               	rrcf	___ftmul@f1+2,f,c
  4062  0026A4  3224               	rrcf	___ftmul@f1+1,f,c
  4063  0026A6  3223               	rrcf	___ftmul@f1,f,c
  4064  0026A8  90D8               	bcf	status,0,c
  4065  0026AA  322F               	rrcf	___ftmul@f3_as_product+2,f,c
  4066  0026AC  322E               	rrcf	___ftmul@f3_as_product+1,f,c
  4067  0026AE  322D               	rrcf	___ftmul@f3_as_product,f,c
  4068  0026B0  2E30               	decfsz	___ftmul@cntr,f,c
  4069  0026B2  D7EE               	goto	l3681
  4070  0026B4  C02D  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
  4071  0026B8  C02E  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4072  0026BC  C02F  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4073  0026C0  C02C  F012         	movff	___ftmul@exp,___ftpack@exp
  4074  0026C4  C031  F013         	movff	___ftmul@sign,___ftpack@sign
  4075  0026C8  EC5A  F014         	call	___ftpack	;wreg free
  4076  0026CC  C00F  F023         	movff	?___ftpack,?___ftmul
  4077  0026D0  C010  F024         	movff	?___ftpack+1,?___ftmul+1
  4078  0026D4  C011  F025         	movff	?___ftpack+2,?___ftmul+2
  4079  0026D8  0012               	return	
  4080  0026DA                     __end_of___ftmul:
  4081                           	opt stack 0
  4082                           tblptru	equ	0xFF8
  4083                           tblptrh	equ	0xFF7
  4084                           tblptrl	equ	0xFF6
  4085                           tablat	equ	0xFF5
  4086                           prodh	equ	0xFF4
  4087                           prodl	equ	0xFF3
  4088                           intcon	equ	0xFF2
  4089                           postinc0	equ	0xFEE
  4090                           wreg	equ	0xFE8
  4091                           postdec1	equ	0xFE5
  4092                           fsr1l	equ	0xFE1
  4093                           postinc2	equ	0xFDE
  4094                           postdec2	equ	0xFDD
  4095                           fsr2h	equ	0xFDA
  4096                           fsr2l	equ	0xFD9
  4097                           status	equ	0xFD8
  4098                           
  4099 ;; *************** function ___awmod *****************
  4100 ;; Defined at:
  4101 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;  dividend        2   14[COMRAM] int 
  4104 ;;  divisor         2   16[COMRAM] int 
  4105 ;; Auto vars:     Size  Location     Type
  4106 ;;  sign            1   19[COMRAM] unsigned char 
  4107 ;;  counter         1   18[COMRAM] unsigned char 
  4108 ;; Return value:  Size  Location     Type
  4109 ;;                  2   14[COMRAM] int 
  4110 ;; Registers used:
  4111 ;;		wreg, status,2, status,0
  4112 ;; Tracked objects:
  4113 ;;		On entry : 0/0
  4114 ;;		On exit  : 0/0
  4115 ;;		Unchanged: 0/0
  4116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4117 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4118 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4120 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4121 ;;Total ram usage:        6 bytes
  4122 ;; Hardware stack levels used:    1
  4123 ;; Hardware stack levels required when called:    1
  4124 ;; This function calls:
  4125 ;;		Nothing
  4126 ;; This function is called by:
  4127 ;;		_fround
  4128 ;;		_scale
  4129 ;; This function uses a non-reentrant model
  4130 ;;
  4131                           
  4132                           	psect	text10
  4133  002BEA                     __ptext10:
  4134                           	opt stack 0
  4135  002BEA                     ___awmod:
  4136                           	opt stack 26
  4137                           
  4138                           ;incstack = 0
  4139  002BEA  0E00               	movlw	0
  4140  002BEC  6E14               	movwf	___awmod@sign,c
  4141  002BEE  AE10               	btfss	___awmod@dividend+1,7,c
  4142  002BF0  D006               	goto	l3745
  4143  002BF2  6C0F               	negf	___awmod@dividend,c
  4144  002BF4  1E10               	comf	___awmod@dividend+1,f,c
  4145  002BF6  B0D8               	btfsc	status,0,c
  4146  002BF8  2A10               	incf	___awmod@dividend+1,f,c
  4147  002BFA  0E01               	movlw	1
  4148  002BFC  6E14               	movwf	___awmod@sign,c
  4149  002BFE                     l3745:
  4150  002BFE  AE12               	btfss	___awmod@divisor+1,7,c
  4151  002C00  D004               	goto	l3749
  4152  002C02  6C11               	negf	___awmod@divisor,c
  4153  002C04  1E12               	comf	___awmod@divisor+1,f,c
  4154  002C06  B0D8               	btfsc	status,0,c
  4155  002C08  2A12               	incf	___awmod@divisor+1,f,c
  4156  002C0A                     l3749:
  4157  002C0A  5011               	movf	___awmod@divisor,w,c
  4158  002C0C  1012               	iorwf	___awmod@divisor+1,w,c
  4159  002C0E  B4D8               	btfsc	status,2,c
  4160  002C10  D018               	goto	l3765
  4161  002C12  0E01               	movlw	1
  4162  002C14  6E13               	movwf	___awmod@counter,c
  4163  002C16  D004               	goto	l3755
  4164  002C18                     l3753:
  4165  002C18  90D8               	bcf	status,0,c
  4166  002C1A  3611               	rlcf	___awmod@divisor,f,c
  4167  002C1C  3612               	rlcf	___awmod@divisor+1,f,c
  4168  002C1E  2A13               	incf	___awmod@counter,f,c
  4169  002C20                     l3755:
  4170  002C20  AE12               	btfss	___awmod@divisor+1,7,c
  4171  002C22  D7FA               	goto	l3753
  4172  002C24                     l3757:
  4173  002C24  5011               	movf	___awmod@divisor,w,c
  4174  002C26  5C0F               	subwf	___awmod@dividend,w,c
  4175  002C28  5012               	movf	___awmod@divisor+1,w,c
  4176  002C2A  5810               	subwfb	___awmod@dividend+1,w,c
  4177  002C2C  A0D8               	btfss	status,0,c
  4178  002C2E  D004               	goto	l3761
  4179  002C30  5011               	movf	___awmod@divisor,w,c
  4180  002C32  5E0F               	subwf	___awmod@dividend,f,c
  4181  002C34  5012               	movf	___awmod@divisor+1,w,c
  4182  002C36  5A10               	subwfb	___awmod@dividend+1,f,c
  4183  002C38                     l3761:
  4184  002C38  90D8               	bcf	status,0,c
  4185  002C3A  3212               	rrcf	___awmod@divisor+1,f,c
  4186  002C3C  3211               	rrcf	___awmod@divisor,f,c
  4187  002C3E  2E13               	decfsz	___awmod@counter,f,c
  4188  002C40  D7F1               	goto	l3757
  4189  002C42                     l3765:
  4190  002C42  5014               	movf	___awmod@sign,w,c
  4191  002C44  B4D8               	btfsc	status,2,c
  4192  002C46  D004               	goto	l3769
  4193  002C48  6C0F               	negf	___awmod@dividend,c
  4194  002C4A  1E10               	comf	___awmod@dividend+1,f,c
  4195  002C4C  B0D8               	btfsc	status,0,c
  4196  002C4E  2A10               	incf	___awmod@dividend+1,f,c
  4197  002C50                     l3769:
  4198  002C50  C00F  F00F         	movff	___awmod@dividend,?___awmod
  4199  002C54  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
  4200  002C58  0012               	return	
  4201  002C5A                     __end_of___awmod:
  4202                           	opt stack 0
  4203                           tblptru	equ	0xFF8
  4204                           tblptrh	equ	0xFF7
  4205                           tblptrl	equ	0xFF6
  4206                           tablat	equ	0xFF5
  4207                           prodh	equ	0xFF4
  4208                           prodl	equ	0xFF3
  4209                           intcon	equ	0xFF2
  4210                           postinc0	equ	0xFEE
  4211                           wreg	equ	0xFE8
  4212                           postdec1	equ	0xFE5
  4213                           fsr1l	equ	0xFE1
  4214                           postinc2	equ	0xFDE
  4215                           postdec2	equ	0xFDD
  4216                           fsr2h	equ	0xFDA
  4217                           fsr2l	equ	0xFD9
  4218                           status	equ	0xFD8
  4219                           
  4220 ;; *************** function ___awdiv *****************
  4221 ;; Defined at:
  4222 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  4223 ;; Parameters:    Size  Location     Type
  4224 ;;  dividend        2   20[COMRAM] int 
  4225 ;;  divisor         2   22[COMRAM] int 
  4226 ;; Auto vars:     Size  Location     Type
  4227 ;;  quotient        2   26[COMRAM] int 
  4228 ;;  sign            1   25[COMRAM] unsigned char 
  4229 ;;  counter         1   24[COMRAM] unsigned char 
  4230 ;; Return value:  Size  Location     Type
  4231 ;;                  2   20[COMRAM] int 
  4232 ;; Registers used:
  4233 ;;		wreg, status,2, status,0
  4234 ;; Tracked objects:
  4235 ;;		On entry : 0/0
  4236 ;;		On exit  : 0/0
  4237 ;;		Unchanged: 0/0
  4238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4239 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4240 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4242 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4243 ;;Total ram usage:        8 bytes
  4244 ;; Hardware stack levels used:    1
  4245 ;; Hardware stack levels required when called:    1
  4246 ;; This function calls:
  4247 ;;		Nothing
  4248 ;; This function is called by:
  4249 ;;		_fround
  4250 ;;		_scale
  4251 ;;		_printf
  4252 ;; This function uses a non-reentrant model
  4253 ;;
  4254                           
  4255                           	psect	text11
  4256  0029F2                     __ptext11:
  4257                           	opt stack 0
  4258  0029F2                     ___awdiv:
  4259                           	opt stack 26
  4260                           
  4261                           ;incstack = 0
  4262  0029F2  0E00               	movlw	0
  4263  0029F4  6E1A               	movwf	___awdiv@sign,c
  4264  0029F6  AE18               	btfss	___awdiv@divisor+1,7,c
  4265  0029F8  D006               	goto	l3701
  4266  0029FA  6C17               	negf	___awdiv@divisor,c
  4267  0029FC  1E18               	comf	___awdiv@divisor+1,f,c
  4268  0029FE  B0D8               	btfsc	status,0,c
  4269  002A00  2A18               	incf	___awdiv@divisor+1,f,c
  4270  002A02  0E01               	movlw	1
  4271  002A04  6E1A               	movwf	___awdiv@sign,c
  4272  002A06                     l3701:
  4273  002A06  AE16               	btfss	___awdiv@dividend+1,7,c
  4274  002A08  D006               	goto	l3707
  4275  002A0A  6C15               	negf	___awdiv@dividend,c
  4276  002A0C  1E16               	comf	___awdiv@dividend+1,f,c
  4277  002A0E  B0D8               	btfsc	status,0,c
  4278  002A10  2A16               	incf	___awdiv@dividend+1,f,c
  4279  002A12  0E01               	movlw	1
  4280  002A14  1A1A               	xorwf	___awdiv@sign,f,c
  4281  002A16                     l3707:
  4282  002A16  0E00               	movlw	0
  4283  002A18  6E1C               	movwf	___awdiv@quotient+1,c
  4284  002A1A  0E00               	movlw	0
  4285  002A1C  6E1B               	movwf	___awdiv@quotient,c
  4286  002A1E  5017               	movf	___awdiv@divisor,w,c
  4287  002A20  1018               	iorwf	___awdiv@divisor+1,w,c
  4288  002A22  B4D8               	btfsc	status,2,c
  4289  002A24  D01C               	goto	l3729
  4290  002A26  0E01               	movlw	1
  4291  002A28  6E19               	movwf	___awdiv@counter,c
  4292  002A2A  D004               	goto	l3715
  4293  002A2C                     l3713:
  4294  002A2C  90D8               	bcf	status,0,c
  4295  002A2E  3617               	rlcf	___awdiv@divisor,f,c
  4296  002A30  3618               	rlcf	___awdiv@divisor+1,f,c
  4297  002A32  2A19               	incf	___awdiv@counter,f,c
  4298  002A34                     l3715:
  4299  002A34  AE18               	btfss	___awdiv@divisor+1,7,c
  4300  002A36  D7FA               	goto	l3713
  4301  002A38                     l3717:
  4302  002A38  90D8               	bcf	status,0,c
  4303  002A3A  361B               	rlcf	___awdiv@quotient,f,c
  4304  002A3C  361C               	rlcf	___awdiv@quotient+1,f,c
  4305  002A3E  5017               	movf	___awdiv@divisor,w,c
  4306  002A40  5C15               	subwf	___awdiv@dividend,w,c
  4307  002A42  5018               	movf	___awdiv@divisor+1,w,c
  4308  002A44  5816               	subwfb	___awdiv@dividend+1,w,c
  4309  002A46  A0D8               	btfss	status,0,c
  4310  002A48  D005               	goto	l3725
  4311  002A4A  5017               	movf	___awdiv@divisor,w,c
  4312  002A4C  5E15               	subwf	___awdiv@dividend,f,c
  4313  002A4E  5018               	movf	___awdiv@divisor+1,w,c
  4314  002A50  5A16               	subwfb	___awdiv@dividend+1,f,c
  4315  002A52  801B               	bsf	___awdiv@quotient,0,c
  4316  002A54                     l3725:
  4317  002A54  90D8               	bcf	status,0,c
  4318  002A56  3218               	rrcf	___awdiv@divisor+1,f,c
  4319  002A58  3217               	rrcf	___awdiv@divisor,f,c
  4320  002A5A  2E19               	decfsz	___awdiv@counter,f,c
  4321  002A5C  D7ED               	goto	l3717
  4322  002A5E                     l3729:
  4323  002A5E  501A               	movf	___awdiv@sign,w,c
  4324  002A60  B4D8               	btfsc	status,2,c
  4325  002A62  D004               	goto	l3733
  4326  002A64  6C1B               	negf	___awdiv@quotient,c
  4327  002A66  1E1C               	comf	___awdiv@quotient+1,f,c
  4328  002A68  B0D8               	btfsc	status,0,c
  4329  002A6A  2A1C               	incf	___awdiv@quotient+1,f,c
  4330  002A6C                     l3733:
  4331  002A6C  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  4332  002A70  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  4333  002A74  0012               	return	
  4334  002A76                     __end_of___awdiv:
  4335                           	opt stack 0
  4336                           tblptru	equ	0xFF8
  4337                           tblptrh	equ	0xFF7
  4338                           tblptrl	equ	0xFF6
  4339                           tablat	equ	0xFF5
  4340                           prodh	equ	0xFF4
  4341                           prodl	equ	0xFF3
  4342                           intcon	equ	0xFF2
  4343                           postinc0	equ	0xFEE
  4344                           wreg	equ	0xFE8
  4345                           postdec1	equ	0xFE5
  4346                           fsr1l	equ	0xFE1
  4347                           postinc2	equ	0xFDE
  4348                           postdec2	equ	0xFDD
  4349                           fsr2h	equ	0xFDA
  4350                           fsr2l	equ	0xFD9
  4351                           status	equ	0xFD8
  4352                           
  4353 ;; *************** function __tdiv_to_l_ *****************
  4354 ;; Defined at:
  4355 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  4356 ;; Parameters:    Size  Location     Type
  4357 ;;  f1              3   14[COMRAM] float 
  4358 ;;  f2              3   17[COMRAM] float 
  4359 ;; Auto vars:     Size  Location     Type
  4360 ;;  quot            4   23[COMRAM] unsigned long 
  4361 ;;  exp1            1   28[COMRAM] unsigned char 
  4362 ;;  cntr            1   27[COMRAM] unsigned char 
  4363 ;; Return value:  Size  Location     Type
  4364 ;;                  4   14[COMRAM] unsigned long 
  4365 ;; Registers used:
  4366 ;;		wreg, status,2, status,0
  4367 ;; Tracked objects:
  4368 ;;		On entry : 0/0
  4369 ;;		On exit  : 0/0
  4370 ;;		Unchanged: 0/0
  4371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4372 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4373 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4374 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4375 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4376 ;;Total ram usage:       15 bytes
  4377 ;; Hardware stack levels used:    1
  4378 ;; Hardware stack levels required when called:    1
  4379 ;; This function calls:
  4380 ;;		Nothing
  4381 ;; This function is called by:
  4382 ;;		_printf
  4383 ;; This function uses a non-reentrant model
  4384 ;;
  4385                           
  4386                           	psect	text12
  4387  00238C                     __ptext12:
  4388                           	opt stack 0
  4389  00238C                     __tdiv_to_l_:
  4390                           	opt stack 27
  4391                           
  4392                           ;incstack = 0
  4393  00238C  C011  F015         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4394  002390  6A16               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4395  002392  6A17               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4396  002394  3410               	rlcf	__tdiv_to_l_@f1+1,w,c
  4397  002396  3615               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4398  002398  E301               	bnc	u3791
  4399  00239A  8016               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4400  00239C                     u3791:
  4401  00239C  5015               	movf	??__tdiv_to_l_,w,c
  4402  00239E  6E1D               	movwf	__tdiv_to_l_@exp1,c
  4403  0023A0  501D               	movf	__tdiv_to_l_@exp1,w,c
  4404  0023A2  A4D8               	btfss	status,2,c
  4405  0023A4  D009               	goto	l3851
  4406  0023A6  0E00               	movlw	0
  4407  0023A8  6E0F               	movwf	?__tdiv_to_l_,c
  4408  0023AA  0E00               	movlw	0
  4409  0023AC  6E10               	movwf	?__tdiv_to_l_+1,c
  4410  0023AE  0E00               	movlw	0
  4411  0023B0  6E11               	movwf	?__tdiv_to_l_+2,c
  4412  0023B2  0E00               	movlw	0
  4413  0023B4  6E12               	movwf	?__tdiv_to_l_+3,c
  4414  0023B6  0012               	return	
  4415  0023B8                     l3851:
  4416  0023B8  C014  F015         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4417  0023BC  6A16               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4418  0023BE  6A17               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4419  0023C0  3413               	rlcf	__tdiv_to_l_@f2+1,w,c
  4420  0023C2  3615               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4421  0023C4  E301               	bnc	u3811
  4422  0023C6  8016               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4423  0023C8                     u3811:
  4424  0023C8  5015               	movf	??__tdiv_to_l_,w,c
  4425  0023CA  6E1C               	movwf	__tdiv_to_l_@cntr,c
  4426  0023CC  501C               	movf	__tdiv_to_l_@cntr,w,c
  4427  0023CE  A4D8               	btfss	status,2,c
  4428  0023D0  D009               	goto	l3857
  4429  0023D2  0E00               	movlw	0
  4430  0023D4  6E0F               	movwf	?__tdiv_to_l_,c
  4431  0023D6  0E00               	movlw	0
  4432  0023D8  6E10               	movwf	?__tdiv_to_l_+1,c
  4433  0023DA  0E00               	movlw	0
  4434  0023DC  6E11               	movwf	?__tdiv_to_l_+2,c
  4435  0023DE  0E00               	movlw	0
  4436  0023E0  6E12               	movwf	?__tdiv_to_l_+3,c
  4437  0023E2  0012               	return	
  4438  0023E4                     l3857:
  4439  0023E4  8E10               	bsf	__tdiv_to_l_@f1+1,7,c
  4440  0023E6  0EFF               	movlw	255
  4441  0023E8  160F               	andwf	__tdiv_to_l_@f1,f,c
  4442  0023EA  0EFF               	movlw	255
  4443  0023EC  1610               	andwf	__tdiv_to_l_@f1+1,f,c
  4444  0023EE  0E00               	movlw	0
  4445  0023F0  1611               	andwf	__tdiv_to_l_@f1+2,f,c
  4446  0023F2  8E13               	bsf	__tdiv_to_l_@f2+1,7,c
  4447  0023F4  0EFF               	movlw	255
  4448  0023F6  1612               	andwf	__tdiv_to_l_@f2,f,c
  4449  0023F8  0EFF               	movlw	255
  4450  0023FA  1613               	andwf	__tdiv_to_l_@f2+1,f,c
  4451  0023FC  0E00               	movlw	0
  4452  0023FE  1614               	andwf	__tdiv_to_l_@f2+2,f,c
  4453  002400  0E00               	movlw	0
  4454  002402  6E18               	movwf	__tdiv_to_l_@quot,c
  4455  002404  0E00               	movlw	0
  4456  002406  6E19               	movwf	__tdiv_to_l_@quot+1,c
  4457  002408  0E00               	movlw	0
  4458  00240A  6E1A               	movwf	__tdiv_to_l_@quot+2,c
  4459  00240C  0E00               	movlw	0
  4460  00240E  6E1B               	movwf	__tdiv_to_l_@quot+3,c
  4461  002410  0E7F               	movlw	127
  4462  002412  5E1D               	subwf	__tdiv_to_l_@exp1,f,c
  4463  002414  501C               	movf	__tdiv_to_l_@cntr,w,c
  4464  002416  0F98               	addlw	152
  4465  002418  5E1D               	subwf	__tdiv_to_l_@exp1,f,c
  4466  00241A  0E18               	movlw	24
  4467  00241C  6E1C               	movwf	__tdiv_to_l_@cntr,c
  4468  00241E                     l796:
  4469  00241E  90D8               	bcf	status,0,c
  4470  002420  3618               	rlcf	__tdiv_to_l_@quot,f,c
  4471  002422  3619               	rlcf	__tdiv_to_l_@quot+1,f,c
  4472  002424  361A               	rlcf	__tdiv_to_l_@quot+2,f,c
  4473  002426  361B               	rlcf	__tdiv_to_l_@quot+3,f,c
  4474  002428  5012               	movf	__tdiv_to_l_@f2,w,c
  4475  00242A  5C0F               	subwf	__tdiv_to_l_@f1,w,c
  4476  00242C  5013               	movf	__tdiv_to_l_@f2+1,w,c
  4477  00242E  5810               	subwfb	__tdiv_to_l_@f1+1,w,c
  4478  002430  5014               	movf	__tdiv_to_l_@f2+2,w,c
  4479  002432  5811               	subwfb	__tdiv_to_l_@f1+2,w,c
  4480  002434  A0D8               	btfss	status,0,c
  4481  002436  D007               	goto	l797
  4482  002438  5012               	movf	__tdiv_to_l_@f2,w,c
  4483  00243A  5E0F               	subwf	__tdiv_to_l_@f1,f,c
  4484  00243C  5013               	movf	__tdiv_to_l_@f2+1,w,c
  4485  00243E  5A10               	subwfb	__tdiv_to_l_@f1+1,f,c
  4486  002440  5014               	movf	__tdiv_to_l_@f2+2,w,c
  4487  002442  5A11               	subwfb	__tdiv_to_l_@f1+2,f,c
  4488  002444  8018               	bsf	__tdiv_to_l_@quot,0,c
  4489  002446                     l797:
  4490  002446  90D8               	bcf	status,0,c
  4491  002448  360F               	rlcf	__tdiv_to_l_@f1,f,c
  4492  00244A  3610               	rlcf	__tdiv_to_l_@f1+1,f,c
  4493  00244C  3611               	rlcf	__tdiv_to_l_@f1+2,f,c
  4494  00244E  2E1C               	decfsz	__tdiv_to_l_@cntr,f,c
  4495  002450  D7E6               	goto	l796
  4496  002452  AE1D               	btfss	__tdiv_to_l_@exp1,7,c
  4497  002454  D016               	goto	l3891
  4498  002456  501D               	movf	__tdiv_to_l_@exp1,w,c
  4499  002458  0A80               	xorlw	128
  4500  00245A  0F97               	addlw	151
  4501  00245C  B0D8               	btfsc	status,0,c
  4502  00245E  D009               	goto	l3887
  4503  002460  0E00               	movlw	0
  4504  002462  6E0F               	movwf	?__tdiv_to_l_,c
  4505  002464  0E00               	movlw	0
  4506  002466  6E10               	movwf	?__tdiv_to_l_+1,c
  4507  002468  0E00               	movlw	0
  4508  00246A  6E11               	movwf	?__tdiv_to_l_+2,c
  4509  00246C  0E00               	movlw	0
  4510  00246E  6E12               	movwf	?__tdiv_to_l_+3,c
  4511  002470  0012               	return	
  4512  002472                     l3887:
  4513  002472  90D8               	bcf	status,0,c
  4514  002474  321B               	rrcf	__tdiv_to_l_@quot+3,f,c
  4515  002476  321A               	rrcf	__tdiv_to_l_@quot+2,f,c
  4516  002478  3219               	rrcf	__tdiv_to_l_@quot+1,f,c
  4517  00247A  3218               	rrcf	__tdiv_to_l_@quot,f,c
  4518  00247C  3E1D               	incfsz	__tdiv_to_l_@exp1,f,c
  4519  00247E  D7F9               	goto	l3887
  4520  002480  D015               	goto	l803
  4521  002482                     l3891:
  4522  002482  0E17               	movlw	23
  4523  002484  641D               	cpfsgt	__tdiv_to_l_@exp1,c
  4524  002486  D00F               	goto	l3899
  4525  002488  0E00               	movlw	0
  4526  00248A  6E0F               	movwf	?__tdiv_to_l_,c
  4527  00248C  0E00               	movlw	0
  4528  00248E  6E10               	movwf	?__tdiv_to_l_+1,c
  4529  002490  0E00               	movlw	0
  4530  002492  6E11               	movwf	?__tdiv_to_l_+2,c
  4531  002494  0E00               	movlw	0
  4532  002496  6E12               	movwf	?__tdiv_to_l_+3,c
  4533  002498  0012               	return	
  4534  00249A                     l3897:
  4535  00249A  90D8               	bcf	status,0,c
  4536  00249C  3618               	rlcf	__tdiv_to_l_@quot,f,c
  4537  00249E  3619               	rlcf	__tdiv_to_l_@quot+1,f,c
  4538  0024A0  361A               	rlcf	__tdiv_to_l_@quot+2,f,c
  4539  0024A2  361B               	rlcf	__tdiv_to_l_@quot+3,f,c
  4540  0024A4  061D               	decf	__tdiv_to_l_@exp1,f,c
  4541  0024A6                     l3899:
  4542  0024A6  501D               	movf	__tdiv_to_l_@exp1,w,c
  4543  0024A8  A4D8               	btfss	status,2,c
  4544  0024AA  D7F7               	goto	l3897
  4545  0024AC                     l803:
  4546  0024AC  C018  F00F         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4547  0024B0  C019  F010         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4548  0024B4  C01A  F011         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4549  0024B8  C01B  F012         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4550  0024BC  0012               	return		;funcret
  4551  0024BE                     __end_of__tdiv_to_l_:
  4552                           	opt stack 0
  4553                           tblptru	equ	0xFF8
  4554                           tblptrh	equ	0xFF7
  4555                           tblptrl	equ	0xFF6
  4556                           tablat	equ	0xFF5
  4557                           prodh	equ	0xFF4
  4558                           prodl	equ	0xFF3
  4559                           intcon	equ	0xFF2
  4560                           postinc0	equ	0xFEE
  4561                           wreg	equ	0xFE8
  4562                           postdec1	equ	0xFE5
  4563                           fsr1l	equ	0xFE1
  4564                           postinc2	equ	0xFDE
  4565                           postdec2	equ	0xFDD
  4566                           fsr2h	equ	0xFDA
  4567                           fsr2l	equ	0xFD9
  4568                           status	equ	0xFD8
  4569                           
  4570 ;; *************** function __div_to_l_ *****************
  4571 ;; Defined at:
  4572 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  4573 ;; Parameters:    Size  Location     Type
  4574 ;;  f1              3   14[COMRAM] unsigned long 
  4575 ;;  f2              3   17[COMRAM] unsigned long 
  4576 ;; Auto vars:     Size  Location     Type
  4577 ;;  quot            4   20[COMRAM] unsigned long 
  4578 ;;  exp1            1   25[COMRAM] unsigned char 
  4579 ;;  cntr            1   24[COMRAM] unsigned char 
  4580 ;; Return value:  Size  Location     Type
  4581 ;;                  4   14[COMRAM] unsigned long 
  4582 ;; Registers used:
  4583 ;;		wreg, status,2, status,0
  4584 ;; Tracked objects:
  4585 ;;		On entry : 0/0
  4586 ;;		On exit  : 0/0
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4589 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4590 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4592 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4593 ;;Total ram usage:       12 bytes
  4594 ;; Hardware stack levels used:    1
  4595 ;; Hardware stack levels required when called:    1
  4596 ;; This function calls:
  4597 ;;		Nothing
  4598 ;; This function is called by:
  4599 ;;		_printf
  4600 ;; This function uses a non-reentrant model
  4601 ;;
  4602                           
  4603                           	psect	text13
  4604  0024BE                     __ptext13:
  4605                           	opt stack 0
  4606  0024BE                     __div_to_l_:
  4607                           	opt stack 27
  4608                           
  4609                           ;incstack = 0
  4610  0024BE  3411               	rlcf	__div_to_l_@f1+2,w,c
  4611  0024C0  3412               	rlcf	__div_to_l_@f1+3,w,c
  4612  0024C2  6E1A               	movwf	__div_to_l_@exp1,c
  4613  0024C4  501A               	movf	__div_to_l_@exp1,w,c
  4614  0024C6  A4D8               	btfss	status,2,c
  4615  0024C8  D009               	goto	l3907
  4616  0024CA  0E00               	movlw	0
  4617  0024CC  6E0F               	movwf	?__div_to_l_,c
  4618  0024CE  0E00               	movlw	0
  4619  0024D0  6E10               	movwf	?__div_to_l_+1,c
  4620  0024D2  0E00               	movlw	0
  4621  0024D4  6E11               	movwf	?__div_to_l_+2,c
  4622  0024D6  0E00               	movlw	0
  4623  0024D8  6E12               	movwf	?__div_to_l_+3,c
  4624  0024DA  0012               	return	
  4625  0024DC                     l3907:
  4626  0024DC  3414               	rlcf	__div_to_l_@f2+2,w,c
  4627  0024DE  3415               	rlcf	__div_to_l_@f2+3,w,c
  4628  0024E0  6E19               	movwf	__div_to_l_@cntr,c
  4629  0024E2  5019               	movf	__div_to_l_@cntr,w,c
  4630  0024E4  A4D8               	btfss	status,2,c
  4631  0024E6  D009               	goto	l3913
  4632  0024E8  0E00               	movlw	0
  4633  0024EA  6E0F               	movwf	?__div_to_l_,c
  4634  0024EC  0E00               	movlw	0
  4635  0024EE  6E10               	movwf	?__div_to_l_+1,c
  4636  0024F0  0E00               	movlw	0
  4637  0024F2  6E11               	movwf	?__div_to_l_+2,c
  4638  0024F4  0E00               	movlw	0
  4639  0024F6  6E12               	movwf	?__div_to_l_+3,c
  4640  0024F8  0012               	return	
  4641  0024FA                     l3913:
  4642  0024FA  8E11               	bsf	__div_to_l_@f1+2,7,c
  4643  0024FC  0EFF               	movlw	255
  4644  0024FE  160F               	andwf	__div_to_l_@f1,f,c
  4645  002500  0EFF               	movlw	255
  4646  002502  1610               	andwf	__div_to_l_@f1+1,f,c
  4647  002504  0EFF               	movlw	255
  4648  002506  1611               	andwf	__div_to_l_@f1+2,f,c
  4649  002508  0E00               	movlw	0
  4650  00250A  1612               	andwf	__div_to_l_@f1+3,f,c
  4651  00250C  8E14               	bsf	__div_to_l_@f2+2,7,c
  4652  00250E  0EFF               	movlw	255
  4653  002510  1612               	andwf	__div_to_l_@f2,f,c
  4654  002512  0EFF               	movlw	255
  4655  002514  1613               	andwf	__div_to_l_@f2+1,f,c
  4656  002516  0EFF               	movlw	255
  4657  002518  1614               	andwf	__div_to_l_@f2+2,f,c
  4658  00251A  0E00               	movlw	0
  4659  00251C  1615               	andwf	__div_to_l_@f2+3,f,c
  4660  00251E  0E00               	movlw	0
  4661  002520  6E15               	movwf	__div_to_l_@quot,c
  4662  002522  0E00               	movlw	0
  4663  002524  6E16               	movwf	__div_to_l_@quot+1,c
  4664  002526  0E00               	movlw	0
  4665  002528  6E17               	movwf	__div_to_l_@quot+2,c
  4666  00252A  0E00               	movlw	0
  4667  00252C  6E18               	movwf	__div_to_l_@quot+3,c
  4668  00252E  0E7F               	movlw	127
  4669  002530  5E1A               	subwf	__div_to_l_@exp1,f,c
  4670  002532  5019               	movf	__div_to_l_@cntr,w,c
  4671  002534  0FA0               	addlw	160
  4672  002536  5E1A               	subwf	__div_to_l_@exp1,f,c
  4673  002538  0E20               	movlw	32
  4674  00253A  6E19               	movwf	__div_to_l_@cntr,c
  4675  00253C                     l3927:
  4676  00253C  90D8               	bcf	status,0,c
  4677  00253E  3615               	rlcf	__div_to_l_@quot,f,c
  4678  002540  3616               	rlcf	__div_to_l_@quot+1,f,c
  4679  002542  3617               	rlcf	__div_to_l_@quot+2,f,c
  4680  002544  3618               	rlcf	__div_to_l_@quot+3,f,c
  4681  002546  5012               	movf	__div_to_l_@f2,w,c
  4682  002548  5C0F               	subwf	__div_to_l_@f1,w,c
  4683  00254A  5013               	movf	__div_to_l_@f2+1,w,c
  4684  00254C  5810               	subwfb	__div_to_l_@f1+1,w,c
  4685  00254E  5014               	movf	__div_to_l_@f2+2,w,c
  4686  002550  5811               	subwfb	__div_to_l_@f1+2,w,c
  4687  002552  5015               	movf	__div_to_l_@f2+3,w,c
  4688  002554  5812               	subwfb	__div_to_l_@f1+3,w,c
  4689  002556  A0D8               	btfss	status,0,c
  4690  002558  D009               	goto	l3935
  4691  00255A  5012               	movf	__div_to_l_@f2,w,c
  4692  00255C  5E0F               	subwf	__div_to_l_@f1,f,c
  4693  00255E  5013               	movf	__div_to_l_@f2+1,w,c
  4694  002560  5A10               	subwfb	__div_to_l_@f1+1,f,c
  4695  002562  5014               	movf	__div_to_l_@f2+2,w,c
  4696  002564  5A11               	subwfb	__div_to_l_@f1+2,f,c
  4697  002566  5015               	movf	__div_to_l_@f2+3,w,c
  4698  002568  5A12               	subwfb	__div_to_l_@f1+3,f,c
  4699  00256A  8015               	bsf	__div_to_l_@quot,0,c
  4700  00256C                     l3935:
  4701  00256C  90D8               	bcf	status,0,c
  4702  00256E  360F               	rlcf	__div_to_l_@f1,f,c
  4703  002570  3610               	rlcf	__div_to_l_@f1+1,f,c
  4704  002572  3611               	rlcf	__div_to_l_@f1+2,f,c
  4705  002574  3612               	rlcf	__div_to_l_@f1+3,f,c
  4706  002576  2E19               	decfsz	__div_to_l_@cntr,f,c
  4707  002578  D7E1               	goto	l3927
  4708  00257A  AE1A               	btfss	__div_to_l_@exp1,7,c
  4709  00257C  D016               	goto	l3951
  4710  00257E  501A               	movf	__div_to_l_@exp1,w,c
  4711  002580  0A80               	xorlw	128
  4712  002582  0F9F               	addlw	159
  4713  002584  B0D8               	btfsc	status,0,c
  4714  002586  D009               	goto	l3947
  4715  002588  0E00               	movlw	0
  4716  00258A  6E0F               	movwf	?__div_to_l_,c
  4717  00258C  0E00               	movlw	0
  4718  00258E  6E10               	movwf	?__div_to_l_+1,c
  4719  002590  0E00               	movlw	0
  4720  002592  6E11               	movwf	?__div_to_l_+2,c
  4721  002594  0E00               	movlw	0
  4722  002596  6E12               	movwf	?__div_to_l_+3,c
  4723  002598  0012               	return	
  4724  00259A                     l3947:
  4725  00259A  90D8               	bcf	status,0,c
  4726  00259C  3218               	rrcf	__div_to_l_@quot+3,f,c
  4727  00259E  3217               	rrcf	__div_to_l_@quot+2,f,c
  4728  0025A0  3216               	rrcf	__div_to_l_@quot+1,f,c
  4729  0025A2  3215               	rrcf	__div_to_l_@quot,f,c
  4730  0025A4  3E1A               	incfsz	__div_to_l_@exp1,f,c
  4731  0025A6  D7F9               	goto	l3947
  4732  0025A8  D015               	goto	l699
  4733  0025AA                     l3951:
  4734  0025AA  0E1F               	movlw	31
  4735  0025AC  641A               	cpfsgt	__div_to_l_@exp1,c
  4736  0025AE  D00F               	goto	l3959
  4737  0025B0  0E00               	movlw	0
  4738  0025B2  6E0F               	movwf	?__div_to_l_,c
  4739  0025B4  0E00               	movlw	0
  4740  0025B6  6E10               	movwf	?__div_to_l_+1,c
  4741  0025B8  0E00               	movlw	0
  4742  0025BA  6E11               	movwf	?__div_to_l_+2,c
  4743  0025BC  0E00               	movlw	0
  4744  0025BE  6E12               	movwf	?__div_to_l_+3,c
  4745  0025C0  0012               	return	
  4746  0025C2                     l3957:
  4747  0025C2  90D8               	bcf	status,0,c
  4748  0025C4  3615               	rlcf	__div_to_l_@quot,f,c
  4749  0025C6  3616               	rlcf	__div_to_l_@quot+1,f,c
  4750  0025C8  3617               	rlcf	__div_to_l_@quot+2,f,c
  4751  0025CA  3618               	rlcf	__div_to_l_@quot+3,f,c
  4752  0025CC  061A               	decf	__div_to_l_@exp1,f,c
  4753  0025CE                     l3959:
  4754  0025CE  501A               	movf	__div_to_l_@exp1,w,c
  4755  0025D0  A4D8               	btfss	status,2,c
  4756  0025D2  D7F7               	goto	l3957
  4757  0025D4                     l699:
  4758  0025D4  C015  F00F         	movff	__div_to_l_@quot,?__div_to_l_
  4759  0025D8  C016  F010         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4760  0025DC  C017  F011         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4761  0025E0  C018  F012         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4762  0025E4  0012               	return		;funcret
  4763  0025E6                     __end_of__div_to_l_:
  4764                           	opt stack 0
  4765                           tblptru	equ	0xFF8
  4766                           tblptrh	equ	0xFF7
  4767                           tblptrl	equ	0xFF6
  4768                           tablat	equ	0xFF5
  4769                           prodh	equ	0xFF4
  4770                           prodl	equ	0xFF3
  4771                           intcon	equ	0xFF2
  4772                           postinc0	equ	0xFEE
  4773                           wreg	equ	0xFE8
  4774                           postdec1	equ	0xFE5
  4775                           fsr1l	equ	0xFE1
  4776                           postinc2	equ	0xFDE
  4777                           postdec2	equ	0xFDD
  4778                           fsr2h	equ	0xFDA
  4779                           fsr2l	equ	0xFD9
  4780                           status	equ	0xFD8
  4781                           
  4782 ;; *************** function ___lltoft *****************
  4783 ;; Defined at:
  4784 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  4785 ;; Parameters:    Size  Location     Type
  4786 ;;  c               4   22[COMRAM] unsigned long 
  4787 ;; Auto vars:     Size  Location     Type
  4788 ;;  exp             1   30[COMRAM] unsigned char 
  4789 ;; Return value:  Size  Location     Type
  4790 ;;                  3   22[COMRAM] float 
  4791 ;; Registers used:
  4792 ;;		wreg, status,2, status,0, cstack
  4793 ;; Tracked objects:
  4794 ;;		On entry : 0/0
  4795 ;;		On exit  : 0/0
  4796 ;;		Unchanged: 0/0
  4797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4798 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4799 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4800 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4801 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4802 ;;Total ram usage:        9 bytes
  4803 ;; Hardware stack levels used:    1
  4804 ;; Hardware stack levels required when called:    2
  4805 ;; This function calls:
  4806 ;;		___ftpack
  4807 ;; This function is called by:
  4808 ;;		_printf
  4809 ;; This function uses a non-reentrant model
  4810 ;;
  4811                           
  4812                           	psect	text14
  4813  002D26                     __ptext14:
  4814                           	opt stack 0
  4815  002D26                     ___lltoft:
  4816                           	opt stack 26
  4817                           
  4818                           ;incstack = 0
  4819  002D26  0E8E               	movlw	142
  4820  002D28  6E1F               	movwf	___lltoft@exp,c
  4821  002D2A  D006               	goto	l4079
  4822  002D2C                     l4077:
  4823  002D2C  90D8               	bcf	status,0,c
  4824  002D2E  321A               	rrcf	___lltoft@c+3,f,c
  4825  002D30  3219               	rrcf	___lltoft@c+2,f,c
  4826  002D32  3218               	rrcf	___lltoft@c+1,f,c
  4827  002D34  3217               	rrcf	___lltoft@c,f,c
  4828  002D36  2A1F               	incf	___lltoft@exp,f,c
  4829  002D38                     l4079:
  4830  002D38  0E00               	movlw	0
  4831  002D3A  1417               	andwf	___lltoft@c,w,c
  4832  002D3C  6E1B               	movwf	??___lltoft& (0+255),c
  4833  002D3E  0E00               	movlw	0
  4834  002D40  1418               	andwf	___lltoft@c+1,w,c
  4835  002D42  6E1C               	movwf	(??___lltoft+1)& (0+255),c
  4836  002D44  0E00               	movlw	0
  4837  002D46  1419               	andwf	___lltoft@c+2,w,c
  4838  002D48  6E1D               	movwf	(??___lltoft+2)& (0+255),c
  4839  002D4A  0EFF               	movlw	255
  4840  002D4C  141A               	andwf	___lltoft@c+3,w,c
  4841  002D4E  6E1E               	movwf	(??___lltoft+3)& (0+255),c
  4842  002D50  501B               	movf	??___lltoft,w,c
  4843  002D52  101C               	iorwf	??___lltoft+1,w,c
  4844  002D54  101D               	iorwf	??___lltoft+2,w,c
  4845  002D56  101E               	iorwf	??___lltoft+3,w,c
  4846  002D58  A4D8               	btfss	status,2,c
  4847  002D5A  D7E8               	goto	l4077
  4848  002D5C  C017  F00F         	movff	___lltoft@c,___ftpack@arg
  4849  002D60  C018  F010         	movff	___lltoft@c+1,___ftpack@arg+1
  4850  002D64  C019  F011         	movff	___lltoft@c+2,___ftpack@arg+2
  4851  002D68  C01F  F012         	movff	___lltoft@exp,___ftpack@exp
  4852  002D6C  0E00               	movlw	0
  4853  002D6E  6E13               	movwf	___ftpack@sign,c
  4854  002D70  EC5A  F014         	call	___ftpack	;wreg free
  4855  002D74  C00F  F017         	movff	?___ftpack,?___lltoft
  4856  002D78  C010  F018         	movff	?___ftpack+1,?___lltoft+1
  4857  002D7C  C011  F019         	movff	?___ftpack+2,?___lltoft+2
  4858  002D80  0012               	return	
  4859  002D82                     __end_of___lltoft:
  4860                           	opt stack 0
  4861                           tblptru	equ	0xFF8
  4862                           tblptrh	equ	0xFF7
  4863                           tblptrl	equ	0xFF6
  4864                           tablat	equ	0xFF5
  4865                           prodh	equ	0xFF4
  4866                           prodl	equ	0xFF3
  4867                           intcon	equ	0xFF2
  4868                           postinc0	equ	0xFEE
  4869                           wreg	equ	0xFE8
  4870                           postdec1	equ	0xFE5
  4871                           fsr1l	equ	0xFE1
  4872                           postinc2	equ	0xFDE
  4873                           postdec2	equ	0xFDD
  4874                           fsr2h	equ	0xFDA
  4875                           fsr2l	equ	0xFD9
  4876                           status	equ	0xFD8
  4877                           
  4878 ;; *************** function ___llmod *****************
  4879 ;; Defined at:
  4880 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  4881 ;; Parameters:    Size  Location     Type
  4882 ;;  dividend        4   27[COMRAM] unsigned long 
  4883 ;;  divisor         4   31[COMRAM] unsigned long 
  4884 ;; Auto vars:     Size  Location     Type
  4885 ;;  counter         1   35[COMRAM] unsigned char 
  4886 ;; Return value:  Size  Location     Type
  4887 ;;                  4   27[COMRAM] unsigned long 
  4888 ;; Registers used:
  4889 ;;		wreg, status,2, status,0
  4890 ;; Tracked objects:
  4891 ;;		On entry : 0/0
  4892 ;;		On exit  : 0/0
  4893 ;;		Unchanged: 0/0
  4894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4895 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4896 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4898 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4899 ;;Total ram usage:        9 bytes
  4900 ;; Hardware stack levels used:    1
  4901 ;; Hardware stack levels required when called:    1
  4902 ;; This function calls:
  4903 ;;		Nothing
  4904 ;; This function is called by:
  4905 ;;		_printf
  4906 ;; This function uses a non-reentrant model
  4907 ;;
  4908                           
  4909                           	psect	text15
  4910  002C5A                     __ptext15:
  4911                           	opt stack 0
  4912  002C5A                     ___llmod:
  4913                           	opt stack 27
  4914                           
  4915                           ;incstack = 0
  4916  002C5A  5020               	movf	___llmod@divisor,w,c
  4917  002C5C  1021               	iorwf	___llmod@divisor+1,w,c
  4918  002C5E  1022               	iorwf	___llmod@divisor+2,w,c
  4919  002C60  1023               	iorwf	___llmod@divisor+3,w,c
  4920  002C62  B4D8               	btfsc	status,2,c
  4921  002C64  D024               	goto	l883
  4922  002C66  0E01               	movlw	1
  4923  002C68  6E24               	movwf	___llmod@counter,c
  4924  002C6A  D006               	goto	l4065
  4925  002C6C                     l4063:
  4926  002C6C  90D8               	bcf	status,0,c
  4927  002C6E  3620               	rlcf	___llmod@divisor,f,c
  4928  002C70  3621               	rlcf	___llmod@divisor+1,f,c
  4929  002C72  3622               	rlcf	___llmod@divisor+2,f,c
  4930  002C74  3623               	rlcf	___llmod@divisor+3,f,c
  4931  002C76  2A24               	incf	___llmod@counter,f,c
  4932  002C78                     l4065:
  4933  002C78  AE23               	btfss	___llmod@divisor+3,7,c
  4934  002C7A  D7F8               	goto	l4063
  4935  002C7C                     l4067:
  4936  002C7C  5020               	movf	___llmod@divisor,w,c
  4937  002C7E  5C1C               	subwf	___llmod@dividend,w,c
  4938  002C80  5021               	movf	___llmod@divisor+1,w,c
  4939  002C82  581D               	subwfb	___llmod@dividend+1,w,c
  4940  002C84  5022               	movf	___llmod@divisor+2,w,c
  4941  002C86  581E               	subwfb	___llmod@dividend+2,w,c
  4942  002C88  5023               	movf	___llmod@divisor+3,w,c
  4943  002C8A  581F               	subwfb	___llmod@dividend+3,w,c
  4944  002C8C  A0D8               	btfss	status,0,c
  4945  002C8E  D008               	goto	l4071
  4946  002C90  5020               	movf	___llmod@divisor,w,c
  4947  002C92  5E1C               	subwf	___llmod@dividend,f,c
  4948  002C94  5021               	movf	___llmod@divisor+1,w,c
  4949  002C96  5A1D               	subwfb	___llmod@dividend+1,f,c
  4950  002C98  5022               	movf	___llmod@divisor+2,w,c
  4951  002C9A  5A1E               	subwfb	___llmod@dividend+2,f,c
  4952  002C9C  5023               	movf	___llmod@divisor+3,w,c
  4953  002C9E  5A1F               	subwfb	___llmod@dividend+3,f,c
  4954  002CA0                     l4071:
  4955  002CA0  90D8               	bcf	status,0,c
  4956  002CA2  3223               	rrcf	___llmod@divisor+3,f,c
  4957  002CA4  3222               	rrcf	___llmod@divisor+2,f,c
  4958  002CA6  3221               	rrcf	___llmod@divisor+1,f,c
  4959  002CA8  3220               	rrcf	___llmod@divisor,f,c
  4960  002CAA  2E24               	decfsz	___llmod@counter,f,c
  4961  002CAC  D7E7               	goto	l4067
  4962  002CAE                     l883:
  4963  002CAE  C01C  F01C         	movff	___llmod@dividend,?___llmod
  4964  002CB2  C01D  F01D         	movff	___llmod@dividend+1,?___llmod+1
  4965  002CB6  C01E  F01E         	movff	___llmod@dividend+2,?___llmod+2
  4966  002CBA  C01F  F01F         	movff	___llmod@dividend+3,?___llmod+3
  4967  002CBE  0012               	return		;funcret
  4968  002CC0                     __end_of___llmod:
  4969                           	opt stack 0
  4970                           tblptru	equ	0xFF8
  4971                           tblptrh	equ	0xFF7
  4972                           tblptrl	equ	0xFF6
  4973                           tablat	equ	0xFF5
  4974                           prodh	equ	0xFF4
  4975                           prodl	equ	0xFF3
  4976                           intcon	equ	0xFF2
  4977                           postinc0	equ	0xFEE
  4978                           wreg	equ	0xFE8
  4979                           postdec1	equ	0xFE5
  4980                           fsr1l	equ	0xFE1
  4981                           postinc2	equ	0xFDE
  4982                           postdec2	equ	0xFDD
  4983                           fsr2h	equ	0xFDA
  4984                           fsr2l	equ	0xFD9
  4985                           status	equ	0xFD8
  4986                           
  4987 ;; *************** function ___fttol *****************
  4988 ;; Defined at:
  4989 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  4990 ;; Parameters:    Size  Location     Type
  4991 ;;  f1              3   56[COMRAM] float 
  4992 ;; Auto vars:     Size  Location     Type
  4993 ;;  lval            4   66[COMRAM] unsigned long 
  4994 ;;  exp1            1   70[COMRAM] unsigned char 
  4995 ;;  sign1           1   65[COMRAM] unsigned char 
  4996 ;; Return value:  Size  Location     Type
  4997 ;;                  4   56[COMRAM] long 
  4998 ;; Registers used:
  4999 ;;		wreg, status,2, status,0
  5000 ;; Tracked objects:
  5001 ;;		On entry : 0/0
  5002 ;;		On exit  : 0/0
  5003 ;;		Unchanged: 0/0
  5004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5005 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5006 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5007 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5008 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5009 ;;Total ram usage:       15 bytes
  5010 ;; Hardware stack levels used:    1
  5011 ;; Hardware stack levels required when called:    1
  5012 ;; This function calls:
  5013 ;;		Nothing
  5014 ;; This function is called by:
  5015 ;;		_printf
  5016 ;;		_angleToPulseLength
  5017 ;; This function uses a non-reentrant model
  5018 ;;
  5019                           
  5020                           	psect	text16
  5021  0026DA                     __ptext16:
  5022                           	opt stack 0
  5023  0026DA                     ___fttol:
  5024                           	opt stack 27
  5025                           
  5026                           ;incstack = 0
  5027  0026DA  C03B  F03D         	movff	___fttol@f1+2,??___fttol
  5028  0026DE  6A3E               	clrf	(??___fttol+1)& (0+255),c
  5029  0026E0  6A3F               	clrf	(??___fttol+2)& (0+255),c
  5030  0026E2  343A               	rlcf	___fttol@f1+1,w,c
  5031  0026E4  363D               	rlcf	??___fttol& (0+255),f,c
  5032  0026E6  E301               	bnc	u4001
  5033  0026E8  803E               	bsf	(??___fttol+1)& (0+255),0,c
  5034  0026EA                     u4001:
  5035  0026EA  503D               	movf	??___fttol,w,c
  5036  0026EC  6E47               	movwf	___fttol@exp1,c
  5037  0026EE  5047               	movf	___fttol@exp1,w,c
  5038  0026F0  A4D8               	btfss	status,2,c
  5039  0026F2  D009               	goto	l3997
  5040  0026F4  0E00               	movlw	0
  5041  0026F6  6E39               	movwf	?___fttol,c
  5042  0026F8  0E00               	movlw	0
  5043  0026FA  6E3A               	movwf	?___fttol+1,c
  5044  0026FC  0E00               	movlw	0
  5045  0026FE  6E3B               	movwf	?___fttol+2,c
  5046  002700  0E00               	movlw	0
  5047  002702  6E3C               	movwf	?___fttol+3,c
  5048  002704  0012               	return	
  5049  002706                     l3997:
  5050  002706  0E17               	movlw	23
  5051  002708  6E3D               	movwf	??___fttol& (0+255),c
  5052  00270A  C039  F03E         	movff	___fttol@f1,??___fttol+1
  5053  00270E  C03A  F03F         	movff	___fttol@f1+1,??___fttol+2
  5054  002712  C03B  F040         	movff	___fttol@f1+2,??___fttol+3
  5055  002716  283D               	incf	??___fttol,w,c
  5056  002718  6E41               	movwf	(??___fttol+4)& (0+255),c
  5057  00271A  D004               	goto	u4020
  5058  00271C                     u4025:
  5059  00271C  90D8               	bcf	status,0,c
  5060  00271E  3240               	rrcf	??___fttol+3,f,c
  5061  002720  323F               	rrcf	??___fttol+2,f,c
  5062  002722  323E               	rrcf	??___fttol+1,f,c
  5063  002724                     u4020:
  5064  002724  2E41               	decfsz	(??___fttol+4)& (0+255),f,c
  5065  002726  D7FA               	goto	u4025
  5066  002728  503E               	movf	??___fttol+1,w,c
  5067  00272A  6E42               	movwf	___fttol@sign1,c
  5068  00272C  8E3A               	bsf	___fttol@f1+1,7,c
  5069  00272E  0EFF               	movlw	255
  5070  002730  1639               	andwf	___fttol@f1,f,c
  5071  002732  0EFF               	movlw	255
  5072  002734  163A               	andwf	___fttol@f1+1,f,c
  5073  002736  0E00               	movlw	0
  5074  002738  163B               	andwf	___fttol@f1+2,f,c
  5075  00273A  5039               	movf	___fttol@f1,w,c
  5076  00273C  6E43               	movwf	___fttol@lval,c
  5077  00273E  503A               	movf	___fttol@f1+1,w,c
  5078  002740  6E44               	movwf	___fttol@lval+1,c
  5079  002742  503B               	movf	___fttol@f1+2,w,c
  5080  002744  6E45               	movwf	___fttol@lval+2,c
  5081  002746  6A46               	clrf	___fttol@lval+3,c
  5082  002748  0E8E               	movlw	142
  5083  00274A  5E47               	subwf	___fttol@exp1,f,c
  5084  00274C  AE47               	btfss	___fttol@exp1,7,c
  5085  00274E  D016               	goto	l4019
  5086  002750  5047               	movf	___fttol@exp1,w,c
  5087  002752  0A80               	xorlw	128
  5088  002754  0F8F               	addlw	143
  5089  002756  B0D8               	btfsc	status,0,c
  5090  002758  D009               	goto	l4015
  5091  00275A  0E00               	movlw	0
  5092  00275C  6E39               	movwf	?___fttol,c
  5093  00275E  0E00               	movlw	0
  5094  002760  6E3A               	movwf	?___fttol+1,c
  5095  002762  0E00               	movlw	0
  5096  002764  6E3B               	movwf	?___fttol+2,c
  5097  002766  0E00               	movlw	0
  5098  002768  6E3C               	movwf	?___fttol+3,c
  5099  00276A  0012               	return	
  5100  00276C                     l4015:
  5101  00276C  90D8               	bcf	status,0,c
  5102  00276E  3246               	rrcf	___fttol@lval+3,f,c
  5103  002770  3245               	rrcf	___fttol@lval+2,f,c
  5104  002772  3244               	rrcf	___fttol@lval+1,f,c
  5105  002774  3243               	rrcf	___fttol@lval,f,c
  5106  002776  3E47               	incfsz	___fttol@exp1,f,c
  5107  002778  D7F9               	goto	l4015
  5108  00277A  D015               	goto	l4029
  5109  00277C                     l4019:
  5110  00277C  0E17               	movlw	23
  5111  00277E  6447               	cpfsgt	___fttol@exp1,c
  5112  002780  D00F               	goto	l4027
  5113  002782  0E00               	movlw	0
  5114  002784  6E39               	movwf	?___fttol,c
  5115  002786  0E00               	movlw	0
  5116  002788  6E3A               	movwf	?___fttol+1,c
  5117  00278A  0E00               	movlw	0
  5118  00278C  6E3B               	movwf	?___fttol+2,c
  5119  00278E  0E00               	movlw	0
  5120  002790  6E3C               	movwf	?___fttol+3,c
  5121  002792  0012               	return	
  5122  002794                     l4025:
  5123  002794  90D8               	bcf	status,0,c
  5124  002796  3643               	rlcf	___fttol@lval,f,c
  5125  002798  3644               	rlcf	___fttol@lval+1,f,c
  5126  00279A  3645               	rlcf	___fttol@lval+2,f,c
  5127  00279C  3646               	rlcf	___fttol@lval+3,f,c
  5128  00279E  0647               	decf	___fttol@exp1,f,c
  5129  0027A0                     l4027:
  5130  0027A0  5047               	movf	___fttol@exp1,w,c
  5131  0027A2  A4D8               	btfss	status,2,c
  5132  0027A4  D7F7               	goto	l4025
  5133  0027A6                     l4029:
  5134  0027A6  5042               	movf	___fttol@sign1,w,c
  5135  0027A8  B4D8               	btfsc	status,2,c
  5136  0027AA  D008               	goto	l4033
  5137  0027AC  1E46               	comf	___fttol@lval+3,f,c
  5138  0027AE  1E45               	comf	___fttol@lval+2,f,c
  5139  0027B0  1E44               	comf	___fttol@lval+1,f,c
  5140  0027B2  6C43               	negf	___fttol@lval,c
  5141  0027B4  0E00               	movlw	0
  5142  0027B6  2244               	addwfc	___fttol@lval+1,f,c
  5143  0027B8  2245               	addwfc	___fttol@lval+2,f,c
  5144  0027BA  2246               	addwfc	___fttol@lval+3,f,c
  5145  0027BC                     l4033:
  5146  0027BC  C043  F039         	movff	___fttol@lval,?___fttol
  5147  0027C0  C044  F03A         	movff	___fttol@lval+1,?___fttol+1
  5148  0027C4  C045  F03B         	movff	___fttol@lval+2,?___fttol+2
  5149  0027C8  C046  F03C         	movff	___fttol@lval+3,?___fttol+3
  5150  0027CC  0012               	return	
  5151  0027CE                     __end_of___fttol:
  5152                           	opt stack 0
  5153                           tblptru	equ	0xFF8
  5154                           tblptrh	equ	0xFF7
  5155                           tblptrl	equ	0xFF6
  5156                           tablat	equ	0xFF5
  5157                           prodh	equ	0xFF4
  5158                           prodl	equ	0xFF3
  5159                           intcon	equ	0xFF2
  5160                           postinc0	equ	0xFEE
  5161                           wreg	equ	0xFE8
  5162                           postdec1	equ	0xFE5
  5163                           fsr1l	equ	0xFE1
  5164                           postinc2	equ	0xFDE
  5165                           postdec2	equ	0xFDD
  5166                           fsr2h	equ	0xFDA
  5167                           fsr2l	equ	0xFD9
  5168                           status	equ	0xFD8
  5169                           
  5170 ;; *************** function ___ftsub *****************
  5171 ;; Defined at:
  5172 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  5173 ;; Parameters:    Size  Location     Type
  5174 ;;  f1              3   71[COMRAM] float 
  5175 ;;  f2              3   74[COMRAM] float 
  5176 ;; Auto vars:     Size  Location     Type
  5177 ;;		None
  5178 ;; Return value:  Size  Location     Type
  5179 ;;                  3   71[COMRAM] float 
  5180 ;; Registers used:
  5181 ;;		wreg, status,2, status,0, cstack
  5182 ;; Tracked objects:
  5183 ;;		On entry : 0/0
  5184 ;;		On exit  : 0/0
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5187 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5190 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5191 ;;Total ram usage:        6 bytes
  5192 ;; Hardware stack levels used:    1
  5193 ;; Hardware stack levels required when called:    3
  5194 ;; This function calls:
  5195 ;;		___ftadd
  5196 ;; This function is called by:
  5197 ;;		_printf
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201                           	psect	text17
  5202  002E22                     __ptext17:
  5203                           	opt stack 0
  5204  002E22                     ___ftsub:
  5205                           	opt stack 25
  5206                           
  5207                           ;incstack = 0
  5208  002E22  504B               	movf	___ftsub@f2,w,c
  5209  002E24  104C               	iorwf	___ftsub@f2+1,w,c
  5210  002E26  104D               	iorwf	___ftsub@f2+2,w,c
  5211  002E28  B4D8               	btfsc	status,2,c
  5212  002E2A  D006               	goto	l3965
  5213  002E2C  0E00               	movlw	0
  5214  002E2E  1A4B               	xorwf	___ftsub@f2,f,c
  5215  002E30  0E00               	movlw	0
  5216  002E32  1A4C               	xorwf	___ftsub@f2+1,f,c
  5217  002E34  0E80               	movlw	128
  5218  002E36  1A4D               	xorwf	___ftsub@f2+2,f,c
  5219  002E38                     l3965:
  5220  002E38  C048  F03C         	movff	___ftsub@f1,___ftadd@f1
  5221  002E3C  C049  F03D         	movff	___ftsub@f1+1,___ftadd@f1+1
  5222  002E40  C04A  F03E         	movff	___ftsub@f1+2,___ftadd@f1+2
  5223  002E44  C04B  F03F         	movff	___ftsub@f2,___ftadd@f2
  5224  002E48  C04C  F040         	movff	___ftsub@f2+1,___ftadd@f2+1
  5225  002E4C  C04D  F041         	movff	___ftsub@f2+2,___ftadd@f2+2
  5226  002E50  EC23  F010         	call	___ftadd	;wreg free
  5227  002E54  C03C  F048         	movff	?___ftadd,?___ftsub
  5228  002E58  C03D  F049         	movff	?___ftadd+1,?___ftsub+1
  5229  002E5C  C03E  F04A         	movff	?___ftadd+2,?___ftsub+2
  5230  002E60  0012               	return	
  5231  002E62                     __end_of___ftsub:
  5232                           	opt stack 0
  5233                           tblptru	equ	0xFF8
  5234                           tblptrh	equ	0xFF7
  5235                           tblptrl	equ	0xFF6
  5236                           tablat	equ	0xFF5
  5237                           prodh	equ	0xFF4
  5238                           prodl	equ	0xFF3
  5239                           intcon	equ	0xFF2
  5240                           postinc0	equ	0xFEE
  5241                           wreg	equ	0xFE8
  5242                           postdec1	equ	0xFE5
  5243                           fsr1l	equ	0xFE1
  5244                           postinc2	equ	0xFDE
  5245                           postdec2	equ	0xFDD
  5246                           fsr2h	equ	0xFDA
  5247                           fsr2l	equ	0xFD9
  5248                           status	equ	0xFD8
  5249                           
  5250 ;; *************** function ___ftadd *****************
  5251 ;; Defined at:
  5252 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  5253 ;; Parameters:    Size  Location     Type
  5254 ;;  f1              3   59[COMRAM] float 
  5255 ;;  f2              3   62[COMRAM] float 
  5256 ;; Auto vars:     Size  Location     Type
  5257 ;;  exp1            1   70[COMRAM] unsigned char 
  5258 ;;  exp2            1   69[COMRAM] unsigned char 
  5259 ;;  sign            1   68[COMRAM] unsigned char 
  5260 ;; Return value:  Size  Location     Type
  5261 ;;                  3   59[COMRAM] float 
  5262 ;; Registers used:
  5263 ;;		wreg, status,2, status,0, cstack
  5264 ;; Tracked objects:
  5265 ;;		On entry : 0/0
  5266 ;;		On exit  : 0/0
  5267 ;;		Unchanged: 0/0
  5268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5269 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5270 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5271 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5272 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5273 ;;Total ram usage:       12 bytes
  5274 ;; Hardware stack levels used:    1
  5275 ;; Hardware stack levels required when called:    2
  5276 ;; This function calls:
  5277 ;;		___ftpack
  5278 ;; This function is called by:
  5279 ;;		_printf
  5280 ;;		___ftsub
  5281 ;;		_angleToPulseLength
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           	psect	text18
  5286  002046                     __ptext18:
  5287                           	opt stack 0
  5288  002046                     ___ftadd:
  5289                           	opt stack 25
  5290                           
  5291                           ;incstack = 0
  5292  002046  C03E  F042         	movff	___ftadd@f1+2,??___ftadd
  5293  00204A  6A43               	clrf	(??___ftadd+1)& (0+255),c
  5294  00204C  6A44               	clrf	(??___ftadd+2)& (0+255),c
  5295  00204E  343D               	rlcf	___ftadd@f1+1,w,c
  5296  002050  3642               	rlcf	??___ftadd& (0+255),f,c
  5297  002052  E301               	bnc	u3301
  5298  002054  8043               	bsf	(??___ftadd+1)& (0+255),0,c
  5299  002056                     u3301:
  5300  002056  5042               	movf	??___ftadd,w,c
  5301  002058  6E47               	movwf	___ftadd@exp1,c
  5302  00205A  C041  F042         	movff	___ftadd@f2+2,??___ftadd
  5303  00205E  6A43               	clrf	(??___ftadd+1)& (0+255),c
  5304  002060  6A44               	clrf	(??___ftadd+2)& (0+255),c
  5305  002062  3440               	rlcf	___ftadd@f2+1,w,c
  5306  002064  3642               	rlcf	??___ftadd& (0+255),f,c
  5307  002066  E301               	bnc	u3311
  5308  002068  8043               	bsf	(??___ftadd+1)& (0+255),0,c
  5309  00206A                     u3311:
  5310  00206A  5042               	movf	??___ftadd,w,c
  5311  00206C  6E46               	movwf	___ftadd@exp2,c
  5312  00206E  5047               	movf	___ftadd@exp1,w,c
  5313  002070  B4D8               	btfsc	status,2,c
  5314  002072  D00B               	goto	l754
  5315  002074  5046               	movf	___ftadd@exp2,w,c
  5316  002076  5C47               	subwf	___ftadd@exp1,w,c
  5317  002078  B0D8               	btfsc	status,0,c
  5318  00207A  D00E               	goto	l3583
  5319  00207C  5047               	movf	___ftadd@exp1,w,c
  5320  00207E  0800               	sublw	0
  5321  002080  2446               	addwf	___ftadd@exp2,w,c
  5322  002082  6E42               	movwf	??___ftadd& (0+255),c
  5323  002084  0E18               	movlw	24
  5324  002086  6442               	cpfsgt	??___ftadd,c
  5325  002088  D007               	goto	l3583
  5326  00208A                     l754:
  5327  00208A  C03F  F03C         	movff	___ftadd@f2,?___ftadd
  5328  00208E  C040  F03D         	movff	___ftadd@f2+1,?___ftadd+1
  5329  002092  C041  F03E         	movff	___ftadd@f2+2,?___ftadd+2
  5330  002096  0012               	return	
  5331  002098                     l3583:
  5332  002098  5046               	movf	___ftadd@exp2,w,c
  5333  00209A  B4D8               	btfsc	status,2,c
  5334  00209C  D00B               	goto	l758
  5335  00209E  5047               	movf	___ftadd@exp1,w,c
  5336  0020A0  5C46               	subwf	___ftadd@exp2,w,c
  5337  0020A2  B0D8               	btfsc	status,0,c
  5338  0020A4  D00E               	goto	l3589
  5339  0020A6  5046               	movf	___ftadd@exp2,w,c
  5340  0020A8  0800               	sublw	0
  5341  0020AA  2447               	addwf	___ftadd@exp1,w,c
  5342  0020AC  6E42               	movwf	??___ftadd& (0+255),c
  5343  0020AE  0E18               	movlw	24
  5344  0020B0  6442               	cpfsgt	??___ftadd,c
  5345  0020B2  D007               	goto	l3589
  5346  0020B4                     l758:
  5347  0020B4  C03C  F03C         	movff	___ftadd@f1,?___ftadd
  5348  0020B8  C03D  F03D         	movff	___ftadd@f1+1,?___ftadd+1
  5349  0020BC  C03E  F03E         	movff	___ftadd@f1+2,?___ftadd+2
  5350  0020C0  0012               	return	
  5351  0020C2                     l3589:
  5352  0020C2  0E06               	movlw	6
  5353  0020C4  6E45               	movwf	___ftadd@sign,c
  5354  0020C6  BE3E               	btfsc	___ftadd@f1+2,7,c
  5355  0020C8  8E45               	bsf	___ftadd@sign,7,c
  5356  0020CA  BE41               	btfsc	___ftadd@f2+2,7,c
  5357  0020CC  8C45               	bsf	___ftadd@sign,6,c
  5358  0020CE  8E3D               	bsf	___ftadd@f1+1,7,c
  5359  0020D0  0EFF               	movlw	255
  5360  0020D2  163C               	andwf	___ftadd@f1,f,c
  5361  0020D4  0EFF               	movlw	255
  5362  0020D6  163D               	andwf	___ftadd@f1+1,f,c
  5363  0020D8  0E00               	movlw	0
  5364  0020DA  163E               	andwf	___ftadd@f1+2,f,c
  5365  0020DC  8E40               	bsf	___ftadd@f2+1,7,c
  5366  0020DE  0EFF               	movlw	255
  5367  0020E0  163F               	andwf	___ftadd@f2,f,c
  5368  0020E2  0EFF               	movlw	255
  5369  0020E4  1640               	andwf	___ftadd@f2+1,f,c
  5370  0020E6  0E00               	movlw	0
  5371  0020E8  1641               	andwf	___ftadd@f2+2,f,c
  5372  0020EA  5046               	movf	___ftadd@exp2,w,c
  5373  0020EC  5C47               	subwf	___ftadd@exp1,w,c
  5374  0020EE  B0D8               	btfsc	status,0,c
  5375  0020F0  D01B               	goto	l3615
  5376  0020F2                     l3605:
  5377  0020F2  90D8               	bcf	status,0,c
  5378  0020F4  363F               	rlcf	___ftadd@f2,f,c
  5379  0020F6  3640               	rlcf	___ftadd@f2+1,f,c
  5380  0020F8  3641               	rlcf	___ftadd@f2+2,f,c
  5381  0020FA  0646               	decf	___ftadd@exp2,f,c
  5382  0020FC  5047               	movf	___ftadd@exp1,w,c
  5383  0020FE  1846               	xorwf	___ftadd@exp2,w,c
  5384  002100  B4D8               	btfsc	status,2,c
  5385  002102  D00D               	goto	l3613
  5386  002104  0645               	decf	___ftadd@sign,f,c
  5387  002106  C045  F042         	movff	___ftadd@sign,??___ftadd
  5388  00210A  0E07               	movlw	7
  5389  00210C  1642               	andwf	??___ftadd,f,c
  5390  00210E  B4D8               	btfsc	status,2,c
  5391  002110  D006               	goto	l3613
  5392  002112  D7EF               	goto	l3605
  5393  002114                     l3611:
  5394  002114  90D8               	bcf	status,0,c
  5395  002116  323E               	rrcf	___ftadd@f1+2,f,c
  5396  002118  323D               	rrcf	___ftadd@f1+1,f,c
  5397  00211A  323C               	rrcf	___ftadd@f1,f,c
  5398  00211C  2A47               	incf	___ftadd@exp1,f,c
  5399  00211E                     l3613:
  5400  00211E  5046               	movf	___ftadd@exp2,w,c
  5401  002120  1847               	xorwf	___ftadd@exp1,w,c
  5402  002122  B4D8               	btfsc	status,2,c
  5403  002124  D01F               	goto	l769
  5404  002126  D7F6               	goto	l3611
  5405  002128                     l3615:
  5406  002128  5047               	movf	___ftadd@exp1,w,c
  5407  00212A  5C46               	subwf	___ftadd@exp2,w,c
  5408  00212C  B0D8               	btfsc	status,0,c
  5409  00212E  D01A               	goto	l769
  5410  002130                     l3617:
  5411  002130  90D8               	bcf	status,0,c
  5412  002132  363C               	rlcf	___ftadd@f1,f,c
  5413  002134  363D               	rlcf	___ftadd@f1+1,f,c
  5414  002136  363E               	rlcf	___ftadd@f1+2,f,c
  5415  002138  0647               	decf	___ftadd@exp1,f,c
  5416  00213A  5047               	movf	___ftadd@exp1,w,c
  5417  00213C  1846               	xorwf	___ftadd@exp2,w,c
  5418  00213E  B4D8               	btfsc	status,2,c
  5419  002140  D00D               	goto	l3625
  5420  002142  0645               	decf	___ftadd@sign,f,c
  5421  002144  C045  F042         	movff	___ftadd@sign,??___ftadd
  5422  002148  0E07               	movlw	7
  5423  00214A  1642               	andwf	??___ftadd,f,c
  5424  00214C  B4D8               	btfsc	status,2,c
  5425  00214E  D006               	goto	l3625
  5426  002150  D7EF               	goto	l3617
  5427  002152                     l3623:
  5428  002152  90D8               	bcf	status,0,c
  5429  002154  3241               	rrcf	___ftadd@f2+2,f,c
  5430  002156  3240               	rrcf	___ftadd@f2+1,f,c
  5431  002158  323F               	rrcf	___ftadd@f2,f,c
  5432  00215A  2A46               	incf	___ftadd@exp2,f,c
  5433  00215C                     l3625:
  5434  00215C  5046               	movf	___ftadd@exp2,w,c
  5435  00215E  1847               	xorwf	___ftadd@exp1,w,c
  5436  002160  A4D8               	btfss	status,2,c
  5437  002162  D7F7               	goto	l3623
  5438  002164                     l769:
  5439  002164  AE45               	btfss	___ftadd@sign,7,c
  5440  002166  D00C               	goto	l778
  5441  002168  0EFF               	movlw	255
  5442  00216A  1A3C               	xorwf	___ftadd@f1,f,c
  5443  00216C  0EFF               	movlw	255
  5444  00216E  1A3D               	xorwf	___ftadd@f1+1,f,c
  5445  002170  0EFF               	movlw	255
  5446  002172  1A3E               	xorwf	___ftadd@f1+2,f,c
  5447  002174  0E01               	movlw	1
  5448  002176  263C               	addwf	___ftadd@f1,f,c
  5449  002178  0E00               	movlw	0
  5450  00217A  223D               	addwfc	___ftadd@f1+1,f,c
  5451  00217C  0E00               	movlw	0
  5452  00217E  223E               	addwfc	___ftadd@f1+2,f,c
  5453  002180                     l778:
  5454  002180  AC45               	btfss	___ftadd@sign,6,c
  5455  002182  D00C               	goto	l3631
  5456  002184  0EFF               	movlw	255
  5457  002186  1A3F               	xorwf	___ftadd@f2,f,c
  5458  002188  0EFF               	movlw	255
  5459  00218A  1A40               	xorwf	___ftadd@f2+1,f,c
  5460  00218C  0EFF               	movlw	255
  5461  00218E  1A41               	xorwf	___ftadd@f2+2,f,c
  5462  002190  0E01               	movlw	1
  5463  002192  263F               	addwf	___ftadd@f2,f,c
  5464  002194  0E00               	movlw	0
  5465  002196  2240               	addwfc	___ftadd@f2+1,f,c
  5466  002198  0E00               	movlw	0
  5467  00219A  2241               	addwfc	___ftadd@f2+2,f,c
  5468  00219C                     l3631:
  5469  00219C  0E00               	movlw	0
  5470  00219E  6E45               	movwf	___ftadd@sign,c
  5471  0021A0  503C               	movf	___ftadd@f1,w,c
  5472  0021A2  263F               	addwf	___ftadd@f2,f,c
  5473  0021A4  503D               	movf	___ftadd@f1+1,w,c
  5474  0021A6  2240               	addwfc	___ftadd@f2+1,f,c
  5475  0021A8  503E               	movf	___ftadd@f1+2,w,c
  5476  0021AA  2241               	addwfc	___ftadd@f2+2,f,c
  5477  0021AC  AE41               	btfss	___ftadd@f2+2,7,c
  5478  0021AE  D00E               	goto	l3641
  5479  0021B0  0EFF               	movlw	255
  5480  0021B2  1A3F               	xorwf	___ftadd@f2,f,c
  5481  0021B4  0EFF               	movlw	255
  5482  0021B6  1A40               	xorwf	___ftadd@f2+1,f,c
  5483  0021B8  0EFF               	movlw	255
  5484  0021BA  1A41               	xorwf	___ftadd@f2+2,f,c
  5485  0021BC  0E01               	movlw	1
  5486  0021BE  263F               	addwf	___ftadd@f2,f,c
  5487  0021C0  0E00               	movlw	0
  5488  0021C2  2240               	addwfc	___ftadd@f2+1,f,c
  5489  0021C4  0E00               	movlw	0
  5490  0021C6  2241               	addwfc	___ftadd@f2+2,f,c
  5491  0021C8  0E01               	movlw	1
  5492  0021CA  6E45               	movwf	___ftadd@sign,c
  5493  0021CC                     l3641:
  5494  0021CC  C03F  F00F         	movff	___ftadd@f2,___ftpack@arg
  5495  0021D0  C040  F010         	movff	___ftadd@f2+1,___ftpack@arg+1
  5496  0021D4  C041  F011         	movff	___ftadd@f2+2,___ftpack@arg+2
  5497  0021D8  C047  F012         	movff	___ftadd@exp1,___ftpack@exp
  5498  0021DC  C045  F013         	movff	___ftadd@sign,___ftpack@sign
  5499  0021E0  EC5A  F014         	call	___ftpack	;wreg free
  5500  0021E4  C00F  F03C         	movff	?___ftpack,?___ftadd
  5501  0021E8  C010  F03D         	movff	?___ftpack+1,?___ftadd+1
  5502  0021EC  C011  F03E         	movff	?___ftpack+2,?___ftadd+2
  5503  0021F0  0012               	return	
  5504  0021F2                     __end_of___ftadd:
  5505                           	opt stack 0
  5506                           tblptru	equ	0xFF8
  5507                           tblptrh	equ	0xFF7
  5508                           tblptrl	equ	0xFF6
  5509                           tablat	equ	0xFF5
  5510                           prodh	equ	0xFF4
  5511                           prodl	equ	0xFF3
  5512                           intcon	equ	0xFF2
  5513                           postinc0	equ	0xFEE
  5514                           wreg	equ	0xFE8
  5515                           postdec1	equ	0xFE5
  5516                           fsr1l	equ	0xFE1
  5517                           postinc2	equ	0xFDE
  5518                           postdec2	equ	0xFDD
  5519                           fsr2h	equ	0xFDA
  5520                           fsr2l	equ	0xFD9
  5521                           status	equ	0xFD8
  5522                           
  5523 ;; *************** function ___ftneg *****************
  5524 ;; Defined at:
  5525 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  5526 ;; Parameters:    Size  Location     Type
  5527 ;;  f1              3   14[COMRAM] float 
  5528 ;; Auto vars:     Size  Location     Type
  5529 ;;		None
  5530 ;; Return value:  Size  Location     Type
  5531 ;;                  3   14[COMRAM] float 
  5532 ;; Registers used:
  5533 ;;		wreg, status,2, status,0
  5534 ;; Tracked objects:
  5535 ;;		On entry : 0/0
  5536 ;;		On exit  : 0/0
  5537 ;;		Unchanged: 0/0
  5538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5539 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5542 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5543 ;;Total ram usage:        3 bytes
  5544 ;; Hardware stack levels used:    1
  5545 ;; Hardware stack levels required when called:    1
  5546 ;; This function calls:
  5547 ;;		Nothing
  5548 ;; This function is called by:
  5549 ;;		_printf
  5550 ;;		_angleToPulseLength
  5551 ;; This function uses a non-reentrant model
  5552 ;;
  5553                           
  5554                           	psect	text19
  5555  002F50                     __ptext19:
  5556                           	opt stack 0
  5557  002F50                     ___ftneg:
  5558                           	opt stack 27
  5559                           
  5560                           ;incstack = 0
  5561  002F50  500F               	movf	___ftneg@f1,w,c
  5562  002F52  1010               	iorwf	___ftneg@f1+1,w,c
  5563  002F54  1011               	iorwf	___ftneg@f1+2,w,c
  5564  002F56  B4D8               	btfsc	status,2,c
  5565  002F58  D006               	goto	l828
  5566  002F5A  0E00               	movlw	0
  5567  002F5C  1A0F               	xorwf	___ftneg@f1,f,c
  5568  002F5E  0E00               	movlw	0
  5569  002F60  1A10               	xorwf	___ftneg@f1+1,f,c
  5570  002F62  0E80               	movlw	128
  5571  002F64  1A11               	xorwf	___ftneg@f1+2,f,c
  5572  002F66                     l828:
  5573  002F66  C00F  F00F         	movff	___ftneg@f1,?___ftneg
  5574  002F6A  C010  F010         	movff	___ftneg@f1+1,?___ftneg+1
  5575  002F6E  C011  F011         	movff	___ftneg@f1+2,?___ftneg+2
  5576  002F72  0012               	return		;funcret
  5577  002F74                     __end_of___ftneg:
  5578                           	opt stack 0
  5579                           tblptru	equ	0xFF8
  5580                           tblptrh	equ	0xFF7
  5581                           tblptrl	equ	0xFF6
  5582                           tablat	equ	0xFF5
  5583                           prodh	equ	0xFF4
  5584                           prodl	equ	0xFF3
  5585                           intcon	equ	0xFF2
  5586                           postinc0	equ	0xFEE
  5587                           wreg	equ	0xFE8
  5588                           postdec1	equ	0xFE5
  5589                           fsr1l	equ	0xFE1
  5590                           postinc2	equ	0xFDE
  5591                           postdec2	equ	0xFDD
  5592                           fsr2h	equ	0xFDA
  5593                           fsr2l	equ	0xFD9
  5594                           status	equ	0xFD8
  5595                           
  5596 ;; *************** function ___ftge *****************
  5597 ;; Defined at:
  5598 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  5599 ;; Parameters:    Size  Location     Type
  5600 ;;  ff1             3   14[COMRAM] float 
  5601 ;;  ff2             3   17[COMRAM] float 
  5602 ;; Auto vars:     Size  Location     Type
  5603 ;;		None
  5604 ;; Return value:  Size  Location     Type
  5605 ;;		None               void
  5606 ;; Registers used:
  5607 ;;		wreg, status,2, status,0
  5608 ;; Tracked objects:
  5609 ;;		On entry : 0/0
  5610 ;;		On exit  : 0/0
  5611 ;;		Unchanged: 0/0
  5612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5613 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5615 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5616 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5617 ;;Total ram usage:        9 bytes
  5618 ;; Hardware stack levels used:    1
  5619 ;; Hardware stack levels required when called:    1
  5620 ;; This function calls:
  5621 ;;		Nothing
  5622 ;; This function is called by:
  5623 ;;		_printf
  5624 ;; This function uses a non-reentrant model
  5625 ;;
  5626                           
  5627                           	psect	text20
  5628  002962                     __ptext20:
  5629                           	opt stack 0
  5630  002962                     ___ftge:
  5631                           	opt stack 27
  5632                           
  5633                           ;incstack = 0
  5634  002962  AE11               	btfss	___ftge@ff1+2,7,c
  5635  002964  D016               	goto	l3973
  5636  002966  C00F  F015         	movff	___ftge@ff1,??___ftge
  5637  00296A  C010  F016         	movff	___ftge@ff1+1,??___ftge+1
  5638  00296E  C011  F017         	movff	___ftge@ff1+2,??___ftge+2
  5639  002972  1E15               	comf	??___ftge,f,c
  5640  002974  1E16               	comf	??___ftge+1,f,c
  5641  002976  1E17               	comf	??___ftge+2,f,c
  5642  002978  2A15               	incf	??___ftge,f,c
  5643  00297A  0E00               	movlw	0
  5644  00297C  2216               	addwfc	??___ftge+1,f,c
  5645  00297E  2217               	addwfc	??___ftge+2,f,c
  5646  002980  0E00               	movlw	0
  5647  002982  2415               	addwf	??___ftge,w,c
  5648  002984  6E0F               	movwf	___ftge@ff1,c
  5649  002986  0E00               	movlw	0
  5650  002988  2016               	addwfc	??___ftge+1,w,c
  5651  00298A  6E10               	movwf	___ftge@ff1+1,c
  5652  00298C  0E80               	movlw	128
  5653  00298E  2017               	addwfc	??___ftge+2,w,c
  5654  002990  6E11               	movwf	___ftge@ff1+2,c
  5655  002992                     l3973:
  5656  002992  AE14               	btfss	___ftge@ff2+2,7,c
  5657  002994  D016               	goto	l3977
  5658  002996  C012  F015         	movff	___ftge@ff2,??___ftge
  5659  00299A  C013  F016         	movff	___ftge@ff2+1,??___ftge+1
  5660  00299E  C014  F017         	movff	___ftge@ff2+2,??___ftge+2
  5661  0029A2  1E15               	comf	??___ftge,f,c
  5662  0029A4  1E16               	comf	??___ftge+1,f,c
  5663  0029A6  1E17               	comf	??___ftge+2,f,c
  5664  0029A8  2A15               	incf	??___ftge,f,c
  5665  0029AA  0E00               	movlw	0
  5666  0029AC  2216               	addwfc	??___ftge+1,f,c
  5667  0029AE  2217               	addwfc	??___ftge+2,f,c
  5668  0029B0  0E00               	movlw	0
  5669  0029B2  2415               	addwf	??___ftge,w,c
  5670  0029B4  6E12               	movwf	___ftge@ff2,c
  5671  0029B6  0E00               	movlw	0
  5672  0029B8  2016               	addwfc	??___ftge+1,w,c
  5673  0029BA  6E13               	movwf	___ftge@ff2+1,c
  5674  0029BC  0E80               	movlw	128
  5675  0029BE  2017               	addwfc	??___ftge+2,w,c
  5676  0029C0  6E14               	movwf	___ftge@ff2+2,c
  5677  0029C2                     l3977:
  5678  0029C2  0E00               	movlw	0
  5679  0029C4  1A0F               	xorwf	___ftge@ff1,f,c
  5680  0029C6  0E00               	movlw	0
  5681  0029C8  1A10               	xorwf	___ftge@ff1+1,f,c
  5682  0029CA  0E80               	movlw	128
  5683  0029CC  1A11               	xorwf	___ftge@ff1+2,f,c
  5684  0029CE  0E00               	movlw	0
  5685  0029D0  1A12               	xorwf	___ftge@ff2,f,c
  5686  0029D2  0E00               	movlw	0
  5687  0029D4  1A13               	xorwf	___ftge@ff2+1,f,c
  5688  0029D6  0E80               	movlw	128
  5689  0029D8  1A14               	xorwf	___ftge@ff2+2,f,c
  5690  0029DA  5012               	movf	___ftge@ff2,w,c
  5691  0029DC  5C0F               	subwf	___ftge@ff1,w,c
  5692  0029DE  5013               	movf	___ftge@ff2+1,w,c
  5693  0029E0  5810               	subwfb	___ftge@ff1+1,w,c
  5694  0029E2  5014               	movf	___ftge@ff2+2,w,c
  5695  0029E4  5811               	subwfb	___ftge@ff1+2,w,c
  5696  0029E6  B0D8               	btfsc	status,0,c
  5697  0029E8  D002               	goto	l3983
  5698  0029EA  90D8               	bcf	status,0,c
  5699  0029EC  0012               	return	
  5700  0029EE                     l3983:
  5701  0029EE  80D8               	bsf	status,0,c
  5702  0029F0  0012               	return	
  5703  0029F2                     __end_of___ftge:
  5704                           	opt stack 0
  5705                           tblptru	equ	0xFF8
  5706                           tblptrh	equ	0xFF7
  5707                           tblptrl	equ	0xFF6
  5708                           tablat	equ	0xFF5
  5709                           prodh	equ	0xFF4
  5710                           prodl	equ	0xFF3
  5711                           intcon	equ	0xFF2
  5712                           postinc0	equ	0xFEE
  5713                           wreg	equ	0xFE8
  5714                           postdec1	equ	0xFE5
  5715                           fsr1l	equ	0xFE1
  5716                           postinc2	equ	0xFDE
  5717                           postdec2	equ	0xFDD
  5718                           fsr2h	equ	0xFDA
  5719                           fsr2l	equ	0xFD9
  5720                           status	equ	0xFD8
  5721                           
  5722 ;; *************** function _initT0 *****************
  5723 ;; Defined at:
  5724 ;;		line 52 in file "timer.c"
  5725 ;; Parameters:    Size  Location     Type
  5726 ;;		None
  5727 ;; Auto vars:     Size  Location     Type
  5728 ;;		None
  5729 ;; Return value:  Size  Location     Type
  5730 ;;                  1    wreg      void 
  5731 ;; Registers used:
  5732 ;;		wreg, status,2, status,0
  5733 ;; Tracked objects:
  5734 ;;		On entry : 0/0
  5735 ;;		On exit  : 0/0
  5736 ;;		Unchanged: 0/0
  5737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5742 ;;Total ram usage:        0 bytes
  5743 ;; Hardware stack levels used:    1
  5744 ;; Hardware stack levels required when called:    1
  5745 ;; This function calls:
  5746 ;;		Nothing
  5747 ;; This function is called by:
  5748 ;;		_testFrequency
  5749 ;;		_initServo
  5750 ;; This function uses a non-reentrant model
  5751 ;;
  5752                           
  5753                           	psect	text21
  5754  002FCA                     __ptext21:
  5755                           	opt stack 0
  5756  002FCA                     _initT0:
  5757                           	opt stack 28
  5758                           
  5759                           ;timer.c: 53: T0CON = 0;
  5760                           
  5761                           ;incstack = 0
  5762  002FCA  0E00               	movlw	0
  5763  002FCC  6ED5               	movwf	4053,c	;volatile
  5764                           
  5765                           ;timer.c: 56: T0CON |= 0b111;
  5766  002FCE  0E07               	movlw	7
  5767  002FD0  12D5               	iorwf	4053,f,c	;volatile
  5768                           
  5769                           ;timer.c: 58: TMR0IE = 1;
  5770  002FD2  8AF2               	bsf	intcon,5,c	;volatile
  5771                           
  5772                           ;timer.c: 59: PEIE = 1;
  5773  002FD4  8CF2               	bsf	intcon,6,c	;volatile
  5774                           
  5775                           ;timer.c: 60: (INTCONbits.GIE = 1);
  5776  002FD6  8EF2               	bsf	intcon,7,c	;volatile
  5777  002FD8  0012               	return		;funcret
  5778  002FDA                     __end_of_initT0:
  5779                           	opt stack 0
  5780                           tblptru	equ	0xFF8
  5781                           tblptrh	equ	0xFF7
  5782                           tblptrl	equ	0xFF6
  5783                           tablat	equ	0xFF5
  5784                           prodh	equ	0xFF4
  5785                           prodl	equ	0xFF3
  5786                           intcon	equ	0xFF2
  5787                           postinc0	equ	0xFEE
  5788                           wreg	equ	0xFE8
  5789                           postdec1	equ	0xFE5
  5790                           fsr1l	equ	0xFE1
  5791                           postinc2	equ	0xFDE
  5792                           postdec2	equ	0xFDD
  5793                           fsr2h	equ	0xFDA
  5794                           fsr2l	equ	0xFD9
  5795                           status	equ	0xFD8
  5796                           
  5797 ;; *************** function ___ftdiv *****************
  5798 ;; Defined at:
  5799 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  5800 ;; Parameters:    Size  Location     Type
  5801 ;;  f1              3   32[COMRAM] float 
  5802 ;;  f2              3   35[COMRAM] float 
  5803 ;; Auto vars:     Size  Location     Type
  5804 ;;  f3              3   42[COMRAM] float 
  5805 ;;  sign            1   46[COMRAM] unsigned char 
  5806 ;;  exp             1   45[COMRAM] unsigned char 
  5807 ;;  cntr            1   41[COMRAM] unsigned char 
  5808 ;; Return value:  Size  Location     Type
  5809 ;;                  3   32[COMRAM] float 
  5810 ;; Registers used:
  5811 ;;		wreg, status,2, status,0, cstack
  5812 ;; Tracked objects:
  5813 ;;		On entry : 0/0
  5814 ;;		On exit  : 0/0
  5815 ;;		Unchanged: 0/0
  5816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5817 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5818 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5819 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5820 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5821 ;;Total ram usage:       15 bytes
  5822 ;; Hardware stack levels used:    1
  5823 ;; Hardware stack levels required when called:    2
  5824 ;; This function calls:
  5825 ;;		___ftpack
  5826 ;; This function is called by:
  5827 ;;		_testFrequency
  5828 ;;		_angleToPulseLength
  5829 ;; This function uses a non-reentrant model
  5830 ;;
  5831                           
  5832                           	psect	text22
  5833  0027CE                     __ptext22:
  5834                           	opt stack 0
  5835  0027CE                     ___ftdiv:
  5836                           	opt stack 27
  5837                           
  5838                           ;incstack = 0
  5839  0027CE  C023  F027         	movff	___ftdiv@f1+2,??___ftdiv
  5840  0027D2  6A28               	clrf	(??___ftdiv+1)& (0+255),c
  5841  0027D4  6A29               	clrf	(??___ftdiv+2)& (0+255),c
  5842  0027D6  3422               	rlcf	___ftdiv@f1+1,w,c
  5843  0027D8  3627               	rlcf	??___ftdiv& (0+255),f,c
  5844  0027DA  E301               	bnc	u4571
  5845  0027DC  8028               	bsf	(??___ftdiv+1)& (0+255),0,c
  5846  0027DE                     u4571:
  5847  0027DE  5027               	movf	??___ftdiv,w,c
  5848  0027E0  6E2E               	movwf	___ftdiv@exp,c
  5849  0027E2  502E               	movf	___ftdiv@exp,w,c
  5850  0027E4  A4D8               	btfss	status,2,c
  5851  0027E6  D007               	goto	l4383
  5852  0027E8  0E00               	movlw	0
  5853  0027EA  6E21               	movwf	?___ftdiv,c
  5854  0027EC  0E00               	movlw	0
  5855  0027EE  6E22               	movwf	?___ftdiv+1,c
  5856  0027F0  0E00               	movlw	0
  5857  0027F2  6E23               	movwf	?___ftdiv+2,c
  5858  0027F4  0012               	return	
  5859  0027F6                     l4383:
  5860  0027F6  C026  F027         	movff	___ftdiv@f2+2,??___ftdiv
  5861  0027FA  6A28               	clrf	(??___ftdiv+1)& (0+255),c
  5862  0027FC  6A29               	clrf	(??___ftdiv+2)& (0+255),c
  5863  0027FE  3425               	rlcf	___ftdiv@f2+1,w,c
  5864  002800  3627               	rlcf	??___ftdiv& (0+255),f,c
  5865  002802  E301               	bnc	u4591
  5866  002804  8028               	bsf	(??___ftdiv+1)& (0+255),0,c
  5867  002806                     u4591:
  5868  002806  5027               	movf	??___ftdiv,w,c
  5869  002808  6E2F               	movwf	___ftdiv@sign,c
  5870  00280A  502F               	movf	___ftdiv@sign,w,c
  5871  00280C  A4D8               	btfss	status,2,c
  5872  00280E  D007               	goto	l4389
  5873  002810  0E00               	movlw	0
  5874  002812  6E21               	movwf	?___ftdiv,c
  5875  002814  0E00               	movlw	0
  5876  002816  6E22               	movwf	?___ftdiv+1,c
  5877  002818  0E00               	movlw	0
  5878  00281A  6E23               	movwf	?___ftdiv+2,c
  5879  00281C  0012               	return	
  5880  00281E                     l4389:
  5881  00281E  0E00               	movlw	0
  5882  002820  6E2B               	movwf	___ftdiv@f3,c
  5883  002822  0E00               	movlw	0
  5884  002824  6E2C               	movwf	___ftdiv@f3+1,c
  5885  002826  0E00               	movlw	0
  5886  002828  6E2D               	movwf	___ftdiv@f3+2,c
  5887  00282A  502F               	movf	___ftdiv@sign,w,c
  5888  00282C  0F89               	addlw	137
  5889  00282E  5E2E               	subwf	___ftdiv@exp,f,c
  5890  002830  C023  F02F         	movff	___ftdiv@f1+2,___ftdiv@sign
  5891  002834  5026               	movf	___ftdiv@f2+2,w,c
  5892  002836  1A2F               	xorwf	___ftdiv@sign,f,c
  5893  002838  0E80               	movlw	128
  5894  00283A  162F               	andwf	___ftdiv@sign,f,c
  5895  00283C  8E22               	bsf	___ftdiv@f1+1,7,c
  5896  00283E  0EFF               	movlw	255
  5897  002840  1621               	andwf	___ftdiv@f1,f,c
  5898  002842  0EFF               	movlw	255
  5899  002844  1622               	andwf	___ftdiv@f1+1,f,c
  5900  002846  0E00               	movlw	0
  5901  002848  1623               	andwf	___ftdiv@f1+2,f,c
  5902  00284A  8E25               	bsf	___ftdiv@f2+1,7,c
  5903  00284C  0EFF               	movlw	255
  5904  00284E  1624               	andwf	___ftdiv@f2,f,c
  5905  002850  0EFF               	movlw	255
  5906  002852  1625               	andwf	___ftdiv@f2+1,f,c
  5907  002854  0E00               	movlw	0
  5908  002856  1626               	andwf	___ftdiv@f2+2,f,c
  5909  002858  0E18               	movlw	24
  5910  00285A  6E2A               	movwf	___ftdiv@cntr,c
  5911  00285C                     l4409:
  5912  00285C  90D8               	bcf	status,0,c
  5913  00285E  362B               	rlcf	___ftdiv@f3,f,c
  5914  002860  362C               	rlcf	___ftdiv@f3+1,f,c
  5915  002862  362D               	rlcf	___ftdiv@f3+2,f,c
  5916  002864  5024               	movf	___ftdiv@f2,w,c
  5917  002866  5C21               	subwf	___ftdiv@f1,w,c
  5918  002868  5025               	movf	___ftdiv@f2+1,w,c
  5919  00286A  5822               	subwfb	___ftdiv@f1+1,w,c
  5920  00286C  5026               	movf	___ftdiv@f2+2,w,c
  5921  00286E  5823               	subwfb	___ftdiv@f1+2,w,c
  5922  002870  A0D8               	btfss	status,0,c
  5923  002872  D007               	goto	l789
  5924  002874  5024               	movf	___ftdiv@f2,w,c
  5925  002876  5E21               	subwf	___ftdiv@f1,f,c
  5926  002878  5025               	movf	___ftdiv@f2+1,w,c
  5927  00287A  5A22               	subwfb	___ftdiv@f1+1,f,c
  5928  00287C  5026               	movf	___ftdiv@f2+2,w,c
  5929  00287E  5A23               	subwfb	___ftdiv@f1+2,f,c
  5930  002880  802B               	bsf	___ftdiv@f3,0,c
  5931  002882                     l789:
  5932  002882  90D8               	bcf	status,0,c
  5933  002884  3621               	rlcf	___ftdiv@f1,f,c
  5934  002886  3622               	rlcf	___ftdiv@f1+1,f,c
  5935  002888  3623               	rlcf	___ftdiv@f1+2,f,c
  5936  00288A  2E2A               	decfsz	___ftdiv@cntr,f,c
  5937  00288C  D7E7               	goto	l4409
  5938  00288E  C02B  F00F         	movff	___ftdiv@f3,___ftpack@arg
  5939  002892  C02C  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5940  002896  C02D  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5941  00289A  C02E  F012         	movff	___ftdiv@exp,___ftpack@exp
  5942  00289E  C02F  F013         	movff	___ftdiv@sign,___ftpack@sign
  5943  0028A2  EC5A  F014         	call	___ftpack	;wreg free
  5944  0028A6  C00F  F021         	movff	?___ftpack,?___ftdiv
  5945  0028AA  C010  F022         	movff	?___ftpack+1,?___ftdiv+1
  5946  0028AE  C011  F023         	movff	?___ftpack+2,?___ftdiv+2
  5947  0028B2  0012               	return	
  5948  0028B4                     __end_of___ftdiv:
  5949                           	opt stack 0
  5950                           tblptru	equ	0xFF8
  5951                           tblptrh	equ	0xFF7
  5952                           tblptrl	equ	0xFF6
  5953                           tablat	equ	0xFF5
  5954                           prodh	equ	0xFF4
  5955                           prodl	equ	0xFF3
  5956                           intcon	equ	0xFF2
  5957                           postinc0	equ	0xFEE
  5958                           wreg	equ	0xFE8
  5959                           postdec1	equ	0xFE5
  5960                           fsr1l	equ	0xFE1
  5961                           postinc2	equ	0xFDE
  5962                           postdec2	equ	0xFDD
  5963                           fsr2h	equ	0xFDA
  5964                           fsr2l	equ	0xFD9
  5965                           status	equ	0xFD8
  5966                           
  5967 ;; *************** function ___altoft *****************
  5968 ;; Defined at:
  5969 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  5970 ;; Parameters:    Size  Location     Type
  5971 ;;  c               4   22[COMRAM] long 
  5972 ;; Auto vars:     Size  Location     Type
  5973 ;;  sign            1   31[COMRAM] unsigned char 
  5974 ;;  exp             1   30[COMRAM] unsigned char 
  5975 ;; Return value:  Size  Location     Type
  5976 ;;                  3   22[COMRAM] float 
  5977 ;; Registers used:
  5978 ;;		wreg, status,2, status,0, cstack
  5979 ;; Tracked objects:
  5980 ;;		On entry : 0/0
  5981 ;;		On exit  : 0/0
  5982 ;;		Unchanged: 0/0
  5983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5984 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5985 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5986 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5987 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5988 ;;Total ram usage:       10 bytes
  5989 ;; Hardware stack levels used:    1
  5990 ;; Hardware stack levels required when called:    2
  5991 ;; This function calls:
  5992 ;;		___ftpack
  5993 ;; This function is called by:
  5994 ;;		_testFrequency
  5995 ;;		_angleToPulseLength
  5996 ;; This function uses a non-reentrant model
  5997 ;;
  5998                           
  5999                           	psect	text23
  6000  002B72                     __ptext23:
  6001                           	opt stack 0
  6002  002B72                     ___altoft:
  6003                           	opt stack 27
  6004                           
  6005                           ;incstack = 0
  6006  002B72  0E00               	movlw	0
  6007  002B74  6E20               	movwf	___altoft@sign,c
  6008  002B76  0E8E               	movlw	142
  6009  002B78  6E1F               	movwf	___altoft@exp,c
  6010  002B7A  AE1A               	btfss	___altoft@c+3,7,c
  6011  002B7C  D011               	goto	l4371
  6012  002B7E  1E1A               	comf	___altoft@c+3,f,c
  6013  002B80  1E19               	comf	___altoft@c+2,f,c
  6014  002B82  1E18               	comf	___altoft@c+1,f,c
  6015  002B84  6C17               	negf	___altoft@c,c
  6016  002B86  0E00               	movlw	0
  6017  002B88  2218               	addwfc	___altoft@c+1,f,c
  6018  002B8A  2219               	addwfc	___altoft@c+2,f,c
  6019  002B8C  221A               	addwfc	___altoft@c+3,f,c
  6020  002B8E  0E01               	movlw	1
  6021  002B90  6E20               	movwf	___altoft@sign,c
  6022  002B92  D006               	goto	l4371
  6023  002B94                     l4369:
  6024  002B94  90D8               	bcf	status,0,c
  6025  002B96  321A               	rrcf	___altoft@c+3,f,c
  6026  002B98  3219               	rrcf	___altoft@c+2,f,c
  6027  002B9A  3218               	rrcf	___altoft@c+1,f,c
  6028  002B9C  3217               	rrcf	___altoft@c,f,c
  6029  002B9E  2A1F               	incf	___altoft@exp,f,c
  6030  002BA0                     l4371:
  6031  002BA0  0E00               	movlw	0
  6032  002BA2  1417               	andwf	___altoft@c,w,c
  6033  002BA4  6E1B               	movwf	??___altoft& (0+255),c
  6034  002BA6  0E00               	movlw	0
  6035  002BA8  1418               	andwf	___altoft@c+1,w,c
  6036  002BAA  6E1C               	movwf	(??___altoft+1)& (0+255),c
  6037  002BAC  0E00               	movlw	0
  6038  002BAE  1419               	andwf	___altoft@c+2,w,c
  6039  002BB0  6E1D               	movwf	(??___altoft+2)& (0+255),c
  6040  002BB2  0EFF               	movlw	255
  6041  002BB4  141A               	andwf	___altoft@c+3,w,c
  6042  002BB6  6E1E               	movwf	(??___altoft+3)& (0+255),c
  6043  002BB8  501B               	movf	??___altoft,w,c
  6044  002BBA  101C               	iorwf	??___altoft+1,w,c
  6045  002BBC  101D               	iorwf	??___altoft+2,w,c
  6046  002BBE  101E               	iorwf	??___altoft+3,w,c
  6047  002BC0  A4D8               	btfss	status,2,c
  6048  002BC2  D7E8               	goto	l4369
  6049  002BC4  C017  F00F         	movff	___altoft@c,___ftpack@arg
  6050  002BC8  C018  F010         	movff	___altoft@c+1,___ftpack@arg+1
  6051  002BCC  C019  F011         	movff	___altoft@c+2,___ftpack@arg+2
  6052  002BD0  C01F  F012         	movff	___altoft@exp,___ftpack@exp
  6053  002BD4  C020  F013         	movff	___altoft@sign,___ftpack@sign
  6054  002BD8  EC5A  F014         	call	___ftpack	;wreg free
  6055  002BDC  C00F  F017         	movff	?___ftpack,?___altoft
  6056  002BE0  C010  F018         	movff	?___ftpack+1,?___altoft+1
  6057  002BE4  C011  F019         	movff	?___ftpack+2,?___altoft+2
  6058  002BE8  0012               	return	
  6059  002BEA                     __end_of___altoft:
  6060                           	opt stack 0
  6061                           tblptru	equ	0xFF8
  6062                           tblptrh	equ	0xFF7
  6063                           tblptrl	equ	0xFF6
  6064                           tablat	equ	0xFF5
  6065                           prodh	equ	0xFF4
  6066                           prodl	equ	0xFF3
  6067                           intcon	equ	0xFF2
  6068                           postinc0	equ	0xFEE
  6069                           wreg	equ	0xFE8
  6070                           postdec1	equ	0xFE5
  6071                           fsr1l	equ	0xFE1
  6072                           postinc2	equ	0xFDE
  6073                           postdec2	equ	0xFDD
  6074                           fsr2h	equ	0xFDA
  6075                           fsr2l	equ	0xFD9
  6076                           status	equ	0xFD8
  6077                           
  6078 ;; *************** function ___ftpack *****************
  6079 ;; Defined at:
  6080 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6081 ;; Parameters:    Size  Location     Type
  6082 ;;  arg             3   14[COMRAM] unsigned um
  6083 ;;  exp             1   17[COMRAM] unsigned char 
  6084 ;;  sign            1   18[COMRAM] unsigned char 
  6085 ;; Auto vars:     Size  Location     Type
  6086 ;;		None
  6087 ;; Return value:  Size  Location     Type
  6088 ;;                  3   14[COMRAM] float 
  6089 ;; Registers used:
  6090 ;;		wreg, status,2, status,0
  6091 ;; Tracked objects:
  6092 ;;		On entry : 0/0
  6093 ;;		On exit  : 0/0
  6094 ;;		Unchanged: 0/0
  6095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6096 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6098 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6099 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6100 ;;Total ram usage:        8 bytes
  6101 ;; Hardware stack levels used:    1
  6102 ;; Hardware stack levels required when called:    1
  6103 ;; This function calls:
  6104 ;;		Nothing
  6105 ;; This function is called by:
  6106 ;;		___altoft
  6107 ;;		___ftadd
  6108 ;;		___ftdiv
  6109 ;;		___ftmul
  6110 ;;		___lltoft
  6111 ;; This function uses a non-reentrant model
  6112 ;;
  6113                           
  6114                           	psect	text24
  6115  0028B4                     __ptext24:
  6116                           	opt stack 0
  6117  0028B4                     ___ftpack:
  6118                           	opt stack 25
  6119                           
  6120                           ;incstack = 0
  6121  0028B4  5012               	movf	___ftpack@exp,w,c
  6122  0028B6  B4D8               	btfsc	status,2,c
  6123  0028B8  D005               	goto	l3535
  6124  0028BA  500F               	movf	___ftpack@arg,w,c
  6125  0028BC  1010               	iorwf	___ftpack@arg+1,w,c
  6126  0028BE  1011               	iorwf	___ftpack@arg+2,w,c
  6127  0028C0  A4D8               	btfss	status,2,c
  6128  0028C2  D00C               	goto	l3541
  6129  0028C4                     l3535:
  6130  0028C4  0E00               	movlw	0
  6131  0028C6  6E0F               	movwf	?___ftpack,c
  6132  0028C8  0E00               	movlw	0
  6133  0028CA  6E10               	movwf	?___ftpack+1,c
  6134  0028CC  0E00               	movlw	0
  6135  0028CE  6E11               	movwf	?___ftpack+2,c
  6136  0028D0  0012               	return	
  6137  0028D2                     l3539:
  6138  0028D2  2A12               	incf	___ftpack@exp,f,c
  6139  0028D4  90D8               	bcf	status,0,c
  6140  0028D6  3211               	rrcf	___ftpack@arg+2,f,c
  6141  0028D8  3210               	rrcf	___ftpack@arg+1,f,c
  6142  0028DA  320F               	rrcf	___ftpack@arg,f,c
  6143  0028DC                     l3541:
  6144  0028DC  0E00               	movlw	0
  6145  0028DE  140F               	andwf	___ftpack@arg,w,c
  6146  0028E0  6E14               	movwf	??___ftpack& (0+255),c
  6147  0028E2  0E00               	movlw	0
  6148  0028E4  1410               	andwf	___ftpack@arg+1,w,c
  6149  0028E6  6E15               	movwf	(??___ftpack+1)& (0+255),c
  6150  0028E8  0EFE               	movlw	254
  6151  0028EA  1411               	andwf	___ftpack@arg+2,w,c
  6152  0028EC  6E16               	movwf	(??___ftpack+2)& (0+255),c
  6153  0028EE  5014               	movf	??___ftpack,w,c
  6154  0028F0  1015               	iorwf	??___ftpack+1,w,c
  6155  0028F2  1016               	iorwf	??___ftpack+2,w,c
  6156  0028F4  B4D8               	btfsc	status,2,c
  6157  0028F6  D00C               	goto	l3547
  6158  0028F8  D7EC               	goto	l3539
  6159  0028FA                     l3543:
  6160  0028FA  2A12               	incf	___ftpack@exp,f,c
  6161  0028FC  0E01               	movlw	1
  6162  0028FE  260F               	addwf	___ftpack@arg,f,c
  6163  002900  0E00               	movlw	0
  6164  002902  2210               	addwfc	___ftpack@arg+1,f,c
  6165  002904  0E00               	movlw	0
  6166  002906  2211               	addwfc	___ftpack@arg+2,f,c
  6167  002908  90D8               	bcf	status,0,c
  6168  00290A  3211               	rrcf	___ftpack@arg+2,f,c
  6169  00290C  3210               	rrcf	___ftpack@arg+1,f,c
  6170  00290E  320F               	rrcf	___ftpack@arg,f,c
  6171  002910                     l3547:
  6172  002910  0E00               	movlw	0
  6173  002912  140F               	andwf	___ftpack@arg,w,c
  6174  002914  6E14               	movwf	??___ftpack& (0+255),c
  6175  002916  0E00               	movlw	0
  6176  002918  1410               	andwf	___ftpack@arg+1,w,c
  6177  00291A  6E15               	movwf	(??___ftpack+1)& (0+255),c
  6178  00291C  0EFF               	movlw	255
  6179  00291E  1411               	andwf	___ftpack@arg+2,w,c
  6180  002920  6E16               	movwf	(??___ftpack+2)& (0+255),c
  6181  002922  5014               	movf	??___ftpack,w,c
  6182  002924  1015               	iorwf	??___ftpack+1,w,c
  6183  002926  1016               	iorwf	??___ftpack+2,w,c
  6184  002928  B4D8               	btfsc	status,2,c
  6185  00292A  D006               	goto	l3551
  6186  00292C  D7E6               	goto	l3543
  6187  00292E                     l3549:
  6188  00292E  0612               	decf	___ftpack@exp,f,c
  6189  002930  90D8               	bcf	status,0,c
  6190  002932  360F               	rlcf	___ftpack@arg,f,c
  6191  002934  3610               	rlcf	___ftpack@arg+1,f,c
  6192  002936  3611               	rlcf	___ftpack@arg+2,f,c
  6193  002938                     l3551:
  6194  002938  BE10               	btfsc	___ftpack@arg+1,7,c
  6195  00293A  D003               	goto	l731
  6196  00293C  0E02               	movlw	2
  6197  00293E  6012               	cpfslt	___ftpack@exp,c
  6198  002940  D7F6               	goto	l3549
  6199  002942                     l731:
  6200  002942  A012               	btfss	___ftpack@exp,0,c
  6201  002944  9E10               	bcf	___ftpack@arg+1,7,c
  6202  002946  90D8               	bcf	status,0,c
  6203  002948  3212               	rrcf	___ftpack@exp,f,c
  6204  00294A  5012               	movf	___ftpack@exp,w,c
  6205  00294C  1211               	iorwf	___ftpack@arg+2,f,c
  6206  00294E  5013               	movf	___ftpack@sign,w,c
  6207  002950  A4D8               	btfss	status,2,c
  6208  002952  8E11               	bsf	___ftpack@arg+2,7,c
  6209  002954  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  6210  002958  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  6211  00295C  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  6212  002960  0012               	return	
  6213  002962                     __end_of___ftpack:
  6214                           	opt stack 0
  6215                           tblptru	equ	0xFF8
  6216                           tblptrh	equ	0xFF7
  6217                           tblptrl	equ	0xFF6
  6218                           tablat	equ	0xFF5
  6219                           prodh	equ	0xFF4
  6220                           prodl	equ	0xFF3
  6221                           intcon	equ	0xFF2
  6222                           postinc0	equ	0xFEE
  6223                           wreg	equ	0xFE8
  6224                           postdec1	equ	0xFE5
  6225                           fsr1l	equ	0xFE1
  6226                           postinc2	equ	0xFDE
  6227                           postdec2	equ	0xFDD
  6228                           fsr2h	equ	0xFDA
  6229                           fsr2l	equ	0xFD9
  6230                           status	equ	0xFD8
  6231                           
  6232 ;; *************** function _I2C_Master_Write *****************
  6233 ;; Defined at:
  6234 ;;		line 47 in file "I2C.c"
  6235 ;; Parameters:    Size  Location     Type
  6236 ;;  d               2   15[COMRAM] unsigned int 
  6237 ;; Auto vars:     Size  Location     Type
  6238 ;;		None
  6239 ;; Return value:  Size  Location     Type
  6240 ;;                  1    wreg      void 
  6241 ;; Registers used:
  6242 ;;		wreg, status,2, status,0, cstack
  6243 ;; Tracked objects:
  6244 ;;		On entry : 0/0
  6245 ;;		On exit  : 0/0
  6246 ;;		Unchanged: 0/0
  6247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6248 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6251 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6252 ;;Total ram usage:        2 bytes
  6253 ;; Hardware stack levels used:    1
  6254 ;; Hardware stack levels required when called:    2
  6255 ;; This function calls:
  6256 ;;		_I2C_Master_Wait
  6257 ;; This function is called by:
  6258 ;;		_testFrequency
  6259 ;;		_getTime
  6260 ;;		_setTime
  6261 ;; This function uses a non-reentrant model
  6262 ;;
  6263                           
  6264                           	psect	text25
  6265  002FE6                     __ptext25:
  6266                           	opt stack 0
  6267  002FE6                     _I2C_Master_Write:
  6268                           	opt stack 27
  6269                           
  6270                           ;I2C.c: 49: I2C_Master_Wait();
  6271                           
  6272                           ;incstack = 0
  6273  002FE6  ECDC  F017         	call	_I2C_Master_Wait	;wreg free
  6274                           
  6275                           ;I2C.c: 50: SSPBUF = d;
  6276  002FEA  C010  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  6277  002FEE  0012               	return		;funcret
  6278  002FF0                     __end_of_I2C_Master_Write:
  6279                           	opt stack 0
  6280                           tblptru	equ	0xFF8
  6281                           tblptrh	equ	0xFF7
  6282                           tblptrl	equ	0xFF6
  6283                           tablat	equ	0xFF5
  6284                           prodh	equ	0xFF4
  6285                           prodl	equ	0xFF3
  6286                           intcon	equ	0xFF2
  6287                           postinc0	equ	0xFEE
  6288                           wreg	equ	0xFE8
  6289                           postdec1	equ	0xFE5
  6290                           fsr1l	equ	0xFE1
  6291                           postinc2	equ	0xFDE
  6292                           postdec2	equ	0xFDD
  6293                           fsr2h	equ	0xFDA
  6294                           fsr2l	equ	0xFD9
  6295                           status	equ	0xFD8
  6296                           
  6297 ;; *************** function _I2C_Master_Stop *****************
  6298 ;; Defined at:
  6299 ;;		line 41 in file "I2C.c"
  6300 ;; Parameters:    Size  Location     Type
  6301 ;;		None
  6302 ;; Auto vars:     Size  Location     Type
  6303 ;;		None
  6304 ;; Return value:  Size  Location     Type
  6305 ;;                  2  250[None  ] int 
  6306 ;; Registers used:
  6307 ;;		wreg, status,2, status,0, cstack
  6308 ;; Tracked objects:
  6309 ;;		On entry : 0/0
  6310 ;;		On exit  : 0/0
  6311 ;;		Unchanged: 0/0
  6312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6317 ;;Total ram usage:        0 bytes
  6318 ;; Hardware stack levels used:    1
  6319 ;; Hardware stack levels required when called:    2
  6320 ;; This function calls:
  6321 ;;		_I2C_Master_Wait
  6322 ;; This function is called by:
  6323 ;;		_testFrequency
  6324 ;;		_getTime
  6325 ;;		_setTime
  6326 ;; This function uses a non-reentrant model
  6327 ;;
  6328                           
  6329                           	psect	text26
  6330  003002                     __ptext26:
  6331                           	opt stack 0
  6332  003002                     _I2C_Master_Stop:
  6333                           	opt stack 27
  6334                           
  6335                           ;I2C.c: 43: I2C_Master_Wait();
  6336                           
  6337                           ;incstack = 0
  6338  003002  ECDC  F017         	call	_I2C_Master_Wait	;wreg free
  6339                           
  6340                           ;I2C.c: 44: PEN = 1;
  6341  003006  84C5               	bsf	4037,2,c	;volatile
  6342  003008  0012               	return		;funcret
  6343  00300A                     __end_of_I2C_Master_Stop:
  6344                           	opt stack 0
  6345                           tblptru	equ	0xFF8
  6346                           tblptrh	equ	0xFF7
  6347                           tblptrl	equ	0xFF6
  6348                           tablat	equ	0xFF5
  6349                           prodh	equ	0xFF4
  6350                           prodl	equ	0xFF3
  6351                           intcon	equ	0xFF2
  6352                           postinc0	equ	0xFEE
  6353                           wreg	equ	0xFE8
  6354                           postdec1	equ	0xFE5
  6355                           fsr1l	equ	0xFE1
  6356                           postinc2	equ	0xFDE
  6357                           postdec2	equ	0xFDD
  6358                           fsr2h	equ	0xFDA
  6359                           fsr2l	equ	0xFD9
  6360                           status	equ	0xFD8
  6361                           
  6362 ;; *************** function _I2C_Master_Start *****************
  6363 ;; Defined at:
  6364 ;;		line 29 in file "I2C.c"
  6365 ;; Parameters:    Size  Location     Type
  6366 ;;		None
  6367 ;; Auto vars:     Size  Location     Type
  6368 ;;		None
  6369 ;; Return value:  Size  Location     Type
  6370 ;;                  2  246[None  ] int 
  6371 ;; Registers used:
  6372 ;;		wreg, status,2, status,0, cstack
  6373 ;; Tracked objects:
  6374 ;;		On entry : 0/0
  6375 ;;		On exit  : 0/0
  6376 ;;		Unchanged: 0/0
  6377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6382 ;;Total ram usage:        0 bytes
  6383 ;; Hardware stack levels used:    1
  6384 ;; Hardware stack levels required when called:    2
  6385 ;; This function calls:
  6386 ;;		_I2C_Master_Wait
  6387 ;; This function is called by:
  6388 ;;		_testFrequency
  6389 ;;		_getTime
  6390 ;;		_setTime
  6391 ;; This function uses a non-reentrant model
  6392 ;;
  6393                           
  6394                           	psect	text27
  6395  00300A                     __ptext27:
  6396                           	opt stack 0
  6397  00300A                     _I2C_Master_Start:
  6398                           	opt stack 27
  6399                           
  6400                           ;I2C.c: 31: I2C_Master_Wait();
  6401                           
  6402                           ;incstack = 0
  6403  00300A  ECDC  F017         	call	_I2C_Master_Wait	;wreg free
  6404                           
  6405                           ;I2C.c: 32: SEN = 1;
  6406  00300E  80C5               	bsf	4037,0,c	;volatile
  6407  003010  0012               	return		;funcret
  6408  003012                     __end_of_I2C_Master_Start:
  6409                           	opt stack 0
  6410                           tblptru	equ	0xFF8
  6411                           tblptrh	equ	0xFF7
  6412                           tblptrl	equ	0xFF6
  6413                           tablat	equ	0xFF5
  6414                           prodh	equ	0xFF4
  6415                           prodl	equ	0xFF3
  6416                           intcon	equ	0xFF2
  6417                           postinc0	equ	0xFEE
  6418                           wreg	equ	0xFE8
  6419                           postdec1	equ	0xFE5
  6420                           fsr1l	equ	0xFE1
  6421                           postinc2	equ	0xFDE
  6422                           postdec2	equ	0xFDD
  6423                           fsr2h	equ	0xFDA
  6424                           fsr2l	equ	0xFD9
  6425                           status	equ	0xFD8
  6426                           
  6427 ;; *************** function _I2C_Master_Read *****************
  6428 ;; Defined at:
  6429 ;;		line 53 in file "I2C.c"
  6430 ;; Parameters:    Size  Location     Type
  6431 ;;  a               1    wreg     unsigned char 
  6432 ;; Auto vars:     Size  Location     Type
  6433 ;;  a               1   15[COMRAM] unsigned char 
  6434 ;;  temp            1   16[COMRAM] unsigned char 
  6435 ;; Return value:  Size  Location     Type
  6436 ;;                  1    wreg      unsigned char 
  6437 ;; Registers used:
  6438 ;;		wreg, status,2, status,0, cstack
  6439 ;; Tracked objects:
  6440 ;;		On entry : 0/0
  6441 ;;		On exit  : 0/0
  6442 ;;		Unchanged: 0/0
  6443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6445 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6447 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6448 ;;Total ram usage:        2 bytes
  6449 ;; Hardware stack levels used:    1
  6450 ;; Hardware stack levels required when called:    2
  6451 ;; This function calls:
  6452 ;;		_I2C_Master_Wait
  6453 ;; This function is called by:
  6454 ;;		_testFrequency
  6455 ;;		_getTime
  6456 ;; This function uses a non-reentrant model
  6457 ;;
  6458                           
  6459                           	psect	text28
  6460  002F2A                     __ptext28:
  6461                           	opt stack 0
  6462  002F2A                     _I2C_Master_Read:
  6463                           	opt stack 27
  6464                           
  6465                           ;incstack = 0
  6466                           ;I2C_Master_Read@a stored from wreg
  6467  002F2A  6E10               	movwf	I2C_Master_Read@a,c
  6468                           
  6469                           ;I2C.c: 55: unsigned char temp;
  6470                           ;I2C.c: 56: I2C_Master_Wait();
  6471  002F2C  ECDC  F017         	call	_I2C_Master_Wait	;wreg free
  6472                           
  6473                           ;I2C.c: 57: RCEN = 1;
  6474  002F30  86C5               	bsf	4037,3,c	;volatile
  6475                           
  6476                           ;I2C.c: 58: I2C_Master_Wait();
  6477  002F32  ECDC  F017         	call	_I2C_Master_Wait	;wreg free
  6478                           
  6479                           ;I2C.c: 59: temp = SSPBUF;
  6480  002F36  CFC9 F011          	movff	4041,I2C_Master_Read@temp	;volatile
  6481                           
  6482                           ;I2C.c: 60: I2C_Master_Wait();
  6483  002F3A  ECDC  F017         	call	_I2C_Master_Wait	;wreg free
  6484                           
  6485                           ;I2C.c: 61: ACKDT = (a)?0:1;
  6486  002F3E  5010               	movf	I2C_Master_Read@a,w,c
  6487  002F40  A4D8               	btfss	status,2,c
  6488  002F42  D002               	goto	u4530
  6489  002F44  8AC5               	bsf	4037,5,c	;volatile
  6490  002F46  D001               	goto	l4355
  6491  002F48                     u4530:
  6492  002F48  9AC5               	bcf	4037,5,c	;volatile
  6493  002F4A                     l4355:
  6494                           
  6495                           ;I2C.c: 62: ACKEN = 1;
  6496  002F4A  88C5               	bsf	4037,4,c	;volatile
  6497                           
  6498                           ;I2C.c: 63: return temp;
  6499  002F4C  5011               	movf	I2C_Master_Read@temp,w,c
  6500  002F4E  0012               	return	
  6501  002F50                     __end_of_I2C_Master_Read:
  6502                           	opt stack 0
  6503                           tblptru	equ	0xFF8
  6504                           tblptrh	equ	0xFF7
  6505                           tblptrl	equ	0xFF6
  6506                           tablat	equ	0xFF5
  6507                           prodh	equ	0xFF4
  6508                           prodl	equ	0xFF3
  6509                           intcon	equ	0xFF2
  6510                           postinc0	equ	0xFEE
  6511                           wreg	equ	0xFE8
  6512                           postdec1	equ	0xFE5
  6513                           fsr1l	equ	0xFE1
  6514                           postinc2	equ	0xFDE
  6515                           postdec2	equ	0xFDD
  6516                           fsr2h	equ	0xFDA
  6517                           fsr2l	equ	0xFD9
  6518                           status	equ	0xFD8
  6519                           
  6520 ;; *************** function _I2C_Master_Wait *****************
  6521 ;; Defined at:
  6522 ;;		line 24 in file "I2C.c"
  6523 ;; Parameters:    Size  Location     Type
  6524 ;;		None
  6525 ;; Auto vars:     Size  Location     Type
  6526 ;;		None
  6527 ;; Return value:  Size  Location     Type
  6528 ;;                  1    wreg      void 
  6529 ;; Registers used:
  6530 ;;		wreg, status,2, status,0
  6531 ;; Tracked objects:
  6532 ;;		On entry : 0/0
  6533 ;;		On exit  : 0/0
  6534 ;;		Unchanged: 0/0
  6535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6538 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6539 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6540 ;;Total ram usage:        1 bytes
  6541 ;; Hardware stack levels used:    1
  6542 ;; Hardware stack levels required when called:    1
  6543 ;; This function calls:
  6544 ;;		Nothing
  6545 ;; This function is called by:
  6546 ;;		_I2C_Master_Start
  6547 ;;		_I2C_Master_Stop
  6548 ;;		_I2C_Master_Write
  6549 ;;		_I2C_Master_Read
  6550 ;;		_I2C_Master_RepeatedStart
  6551 ;; This function uses a non-reentrant model
  6552 ;;
  6553                           
  6554                           	psect	text29
  6555  002FB8                     __ptext29:
  6556                           	opt stack 0
  6557  002FB8                     _I2C_Master_Wait:
  6558                           	opt stack 27
  6559  002FB8                     l310:
  6560  002FB8  B4C7               	btfsc	4039,2,c	;volatile
  6561  002FBA  D7FE               	goto	l310
  6562  002FBC  CFC5 F00F          	movff	4037,??_I2C_Master_Wait	;volatile
  6563  002FC0  0E1F               	movlw	31
  6564  002FC2  160F               	andwf	??_I2C_Master_Wait,f,c
  6565  002FC4  B4D8               	btfsc	status,2,c
  6566  002FC6  0012               	return	
  6567  002FC8  D7F7               	goto	l310
  6568  002FCA                     __end_of_I2C_Master_Wait:
  6569                           	opt stack 0
  6570                           tblptru	equ	0xFF8
  6571                           tblptrh	equ	0xFF7
  6572                           tblptrl	equ	0xFF6
  6573                           tablat	equ	0xFF5
  6574                           prodh	equ	0xFF4
  6575                           prodl	equ	0xFF3
  6576                           intcon	equ	0xFF2
  6577                           postinc0	equ	0xFEE
  6578                           wreg	equ	0xFE8
  6579                           postdec1	equ	0xFE5
  6580                           fsr1l	equ	0xFE1
  6581                           postinc2	equ	0xFDE
  6582                           postdec2	equ	0xFDD
  6583                           fsr2h	equ	0xFDA
  6584                           fsr2l	equ	0xFD9
  6585                           status	equ	0xFD8
  6586                           
  6587 ;; *************** function _I2C_Master_Init *****************
  6588 ;; Defined at:
  6589 ;;		line 13 in file "I2C.c"
  6590 ;; Parameters:    Size  Location     Type
  6591 ;;  c               4   27[COMRAM] const unsigned long 
  6592 ;; Auto vars:     Size  Location     Type
  6593 ;;		None
  6594 ;; Return value:  Size  Location     Type
  6595 ;;                  1    wreg      void 
  6596 ;; Registers used:
  6597 ;;		wreg, status,2, status,0, cstack
  6598 ;; Tracked objects:
  6599 ;;		On entry : 0/0
  6600 ;;		On exit  : 0/0
  6601 ;;		Unchanged: 0/0
  6602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6603 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6605 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6606 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6607 ;;Total ram usage:        8 bytes
  6608 ;; Hardware stack levels used:    1
  6609 ;; Hardware stack levels required when called:    2
  6610 ;; This function calls:
  6611 ;;		___lldiv
  6612 ;; This function is called by:
  6613 ;;		_testFrequency
  6614 ;; This function uses a non-reentrant model
  6615 ;;
  6616                           
  6617                           	psect	text30
  6618  002D82                     __ptext30:
  6619                           	opt stack 0
  6620  002D82                     _I2C_Master_Init:
  6621                           	opt stack 27
  6622                           
  6623                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  6624                           
  6625                           ;incstack = 0
  6626  002D82  0E00               	movlw	0
  6627  002D84  6EC7               	movwf	4039,c	;volatile
  6628                           
  6629                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  6630  002D86  0E28               	movlw	40
  6631  002D88  6EC6               	movwf	4038,c	;volatile
  6632                           
  6633                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  6634  002D8A  0E00               	movlw	0
  6635  002D8C  6EC5               	movwf	4037,c	;volatile
  6636                           
  6637                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  6638  002D8E  0E80               	movlw	128
  6639  002D90  6E0F               	movwf	___lldiv@dividend,c
  6640  002D92  0E96               	movlw	150
  6641  002D94  6E10               	movwf	___lldiv@dividend+1,c
  6642  002D96  0E98               	movlw	152
  6643  002D98  6E11               	movwf	___lldiv@dividend+2,c
  6644  002D9A  0E00               	movlw	0
  6645  002D9C  6E12               	movwf	___lldiv@dividend+3,c
  6646  002D9E  C01C  F020         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6647  002DA2  C01D  F021         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6648  002DA6  C01E  F022         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6649  002DAA  C01F  F023         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6650  002DAE  0E02               	movlw	2
  6651  002DB0                     u4525:
  6652  002DB0  90D8               	bcf	status,0,c
  6653  002DB2  3620               	rlcf	??_I2C_Master_Init,f,c
  6654  002DB4  3621               	rlcf	??_I2C_Master_Init+1,f,c
  6655  002DB6  3622               	rlcf	??_I2C_Master_Init+2,f,c
  6656  002DB8  3623               	rlcf	??_I2C_Master_Init+3,f,c
  6657  002DBA  2EE8               	decfsz	wreg,f,c
  6658  002DBC  D7F9               	goto	u4525
  6659  002DBE  C020  F013         	movff	??_I2C_Master_Init,___lldiv@divisor
  6660  002DC2  C021  F014         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6661  002DC6  C022  F015         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6662  002DCA  C023  F016         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6663  002DCE  EC3B  F015         	call	___lldiv	;wreg free
  6664  002DD2  040F               	decf	?___lldiv,w,c
  6665  002DD4  6EC8               	movwf	4040,c	;volatile
  6666                           
  6667                           ;I2C.c: 20: TRISC3 = 1;
  6668  002DD6  8694               	bsf	3988,3,c	;volatile
  6669                           
  6670                           ;I2C.c: 21: TRISC4 = 1;
  6671  002DD8  8894               	bsf	3988,4,c	;volatile
  6672  002DDA  0012               	return		;funcret
  6673  002DDC                     __end_of_I2C_Master_Init:
  6674                           	opt stack 0
  6675                           tblptru	equ	0xFF8
  6676                           tblptrh	equ	0xFF7
  6677                           tblptrl	equ	0xFF6
  6678                           tablat	equ	0xFF5
  6679                           prodh	equ	0xFF4
  6680                           prodl	equ	0xFF3
  6681                           intcon	equ	0xFF2
  6682                           postinc0	equ	0xFEE
  6683                           wreg	equ	0xFE8
  6684                           postdec1	equ	0xFE5
  6685                           fsr1l	equ	0xFE1
  6686                           postinc2	equ	0xFDE
  6687                           postdec2	equ	0xFDD
  6688                           fsr2h	equ	0xFDA
  6689                           fsr2l	equ	0xFD9
  6690                           status	equ	0xFD8
  6691                           
  6692 ;; *************** function ___lldiv *****************
  6693 ;; Defined at:
  6694 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6695 ;; Parameters:    Size  Location     Type
  6696 ;;  dividend        4   14[COMRAM] unsigned long 
  6697 ;;  divisor         4   18[COMRAM] unsigned long 
  6698 ;; Auto vars:     Size  Location     Type
  6699 ;;  quotient        4   22[COMRAM] unsigned long 
  6700 ;;  counter         1   26[COMRAM] unsigned char 
  6701 ;; Return value:  Size  Location     Type
  6702 ;;                  4   14[COMRAM] unsigned long 
  6703 ;; Registers used:
  6704 ;;		wreg, status,2, status,0
  6705 ;; Tracked objects:
  6706 ;;		On entry : 0/0
  6707 ;;		On exit  : 0/0
  6708 ;;		Unchanged: 0/0
  6709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6710 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6711 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6713 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6714 ;;Total ram usage:       13 bytes
  6715 ;; Hardware stack levels used:    1
  6716 ;; Hardware stack levels required when called:    1
  6717 ;; This function calls:
  6718 ;;		Nothing
  6719 ;; This function is called by:
  6720 ;;		_I2C_Master_Init
  6721 ;;		_printf
  6722 ;; This function uses a non-reentrant model
  6723 ;;
  6724                           
  6725                           	psect	text31
  6726  002A76                     __ptext31:
  6727                           	opt stack 0
  6728  002A76                     ___lldiv:
  6729                           	opt stack 27
  6730                           
  6731                           ;incstack = 0
  6732  002A76  0E00               	movlw	0
  6733  002A78  6E17               	movwf	___lldiv@quotient,c
  6734  002A7A  0E00               	movlw	0
  6735  002A7C  6E18               	movwf	___lldiv@quotient+1,c
  6736  002A7E  0E00               	movlw	0
  6737  002A80  6E19               	movwf	___lldiv@quotient+2,c
  6738  002A82  0E00               	movlw	0
  6739  002A84  6E1A               	movwf	___lldiv@quotient+3,c
  6740  002A86  5013               	movf	___lldiv@divisor,w,c
  6741  002A88  1014               	iorwf	___lldiv@divisor+1,w,c
  6742  002A8A  1015               	iorwf	___lldiv@divisor+2,w,c
  6743  002A8C  1016               	iorwf	___lldiv@divisor+3,w,c
  6744  002A8E  B4D8               	btfsc	status,2,c
  6745  002A90  D02A               	goto	l873
  6746  002A92  0E01               	movlw	1
  6747  002A94  6E1B               	movwf	___lldiv@counter,c
  6748  002A96  D006               	goto	l4045
  6749  002A98                     l4043:
  6750  002A98  90D8               	bcf	status,0,c
  6751  002A9A  3613               	rlcf	___lldiv@divisor,f,c
  6752  002A9C  3614               	rlcf	___lldiv@divisor+1,f,c
  6753  002A9E  3615               	rlcf	___lldiv@divisor+2,f,c
  6754  002AA0  3616               	rlcf	___lldiv@divisor+3,f,c
  6755  002AA2  2A1B               	incf	___lldiv@counter,f,c
  6756  002AA4                     l4045:
  6757  002AA4  AE16               	btfss	___lldiv@divisor+3,7,c
  6758  002AA6  D7F8               	goto	l4043
  6759  002AA8                     l4047:
  6760  002AA8  90D8               	bcf	status,0,c
  6761  002AAA  3617               	rlcf	___lldiv@quotient,f,c
  6762  002AAC  3618               	rlcf	___lldiv@quotient+1,f,c
  6763  002AAE  3619               	rlcf	___lldiv@quotient+2,f,c
  6764  002AB0  361A               	rlcf	___lldiv@quotient+3,f,c
  6765  002AB2  5013               	movf	___lldiv@divisor,w,c
  6766  002AB4  5C0F               	subwf	___lldiv@dividend,w,c
  6767  002AB6  5014               	movf	___lldiv@divisor+1,w,c
  6768  002AB8  5810               	subwfb	___lldiv@dividend+1,w,c
  6769  002ABA  5015               	movf	___lldiv@divisor+2,w,c
  6770  002ABC  5811               	subwfb	___lldiv@dividend+2,w,c
  6771  002ABE  5016               	movf	___lldiv@divisor+3,w,c
  6772  002AC0  5812               	subwfb	___lldiv@dividend+3,w,c
  6773  002AC2  A0D8               	btfss	status,0,c
  6774  002AC4  D009               	goto	l4055
  6775  002AC6  5013               	movf	___lldiv@divisor,w,c
  6776  002AC8  5E0F               	subwf	___lldiv@dividend,f,c
  6777  002ACA  5014               	movf	___lldiv@divisor+1,w,c
  6778  002ACC  5A10               	subwfb	___lldiv@dividend+1,f,c
  6779  002ACE  5015               	movf	___lldiv@divisor+2,w,c
  6780  002AD0  5A11               	subwfb	___lldiv@dividend+2,f,c
  6781  002AD2  5016               	movf	___lldiv@divisor+3,w,c
  6782  002AD4  5A12               	subwfb	___lldiv@dividend+3,f,c
  6783  002AD6  8017               	bsf	___lldiv@quotient,0,c
  6784  002AD8                     l4055:
  6785  002AD8  90D8               	bcf	status,0,c
  6786  002ADA  3216               	rrcf	___lldiv@divisor+3,f,c
  6787  002ADC  3215               	rrcf	___lldiv@divisor+2,f,c
  6788  002ADE  3214               	rrcf	___lldiv@divisor+1,f,c
  6789  002AE0  3213               	rrcf	___lldiv@divisor,f,c
  6790  002AE2  2E1B               	decfsz	___lldiv@counter,f,c
  6791  002AE4  D7E1               	goto	l4047
  6792  002AE6                     l873:
  6793  002AE6  C017  F00F         	movff	___lldiv@quotient,?___lldiv
  6794  002AEA  C018  F010         	movff	___lldiv@quotient+1,?___lldiv+1
  6795  002AEE  C019  F011         	movff	___lldiv@quotient+2,?___lldiv+2
  6796  002AF2  C01A  F012         	movff	___lldiv@quotient+3,?___lldiv+3
  6797  002AF6  0012               	return		;funcret
  6798  002AF8                     __end_of___lldiv:
  6799                           	opt stack 0
  6800                           tblptru	equ	0xFF8
  6801                           tblptrh	equ	0xFF7
  6802                           tblptrl	equ	0xFF6
  6803                           tablat	equ	0xFF5
  6804                           prodh	equ	0xFF4
  6805                           prodl	equ	0xFF3
  6806                           intcon	equ	0xFF2
  6807                           postinc0	equ	0xFEE
  6808                           wreg	equ	0xFE8
  6809                           postdec1	equ	0xFE5
  6810                           fsr1l	equ	0xFE1
  6811                           postinc2	equ	0xFDE
  6812                           postdec2	equ	0xFDD
  6813                           fsr2h	equ	0xFDA
  6814                           fsr2l	equ	0xFD9
  6815                           status	equ	0xFD8
  6816                           
  6817 ;; *************** function _pinSetup *****************
  6818 ;; Defined at:
  6819 ;;		line 25 in file "main.c"
  6820 ;; Parameters:    Size  Location     Type
  6821 ;;		None
  6822 ;; Auto vars:     Size  Location     Type
  6823 ;;		None
  6824 ;; Return value:  Size  Location     Type
  6825 ;;                  1    wreg      void 
  6826 ;; Registers used:
  6827 ;;		wreg, status,2, status,0
  6828 ;; Tracked objects:
  6829 ;;		On entry : 0/0
  6830 ;;		On exit  : 0/0
  6831 ;;		Unchanged: 0/0
  6832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6837 ;;Total ram usage:        0 bytes
  6838 ;; Hardware stack levels used:    1
  6839 ;; Hardware stack levels required when called:    1
  6840 ;; This function calls:
  6841 ;;		Nothing
  6842 ;; This function is called by:
  6843 ;;		_main
  6844 ;; This function uses a non-reentrant model
  6845 ;;
  6846                           
  6847                           	psect	text32
  6848  002E62                     __ptext32:
  6849                           	opt stack 0
  6850  002E62                     _pinSetup:
  6851                           	opt stack 29
  6852                           
  6853                           ;main.c: 31: TRISA = 0xFF;
  6854                           
  6855                           ;incstack = 0
  6856  002E62  6892               	setf	3986,c	;volatile
  6857                           
  6858                           ;main.c: 32: TRISB = 0xFF;
  6859  002E64  6893               	setf	3987,c	;volatile
  6860                           
  6861                           ;main.c: 33: TRISC = 0x00;
  6862  002E66  0E00               	movlw	0
  6863  002E68  6E94               	movwf	3988,c	;volatile
  6864                           
  6865                           ;main.c: 34: TRISD = 0x00;
  6866  002E6A  0E00               	movlw	0
  6867  002E6C  6E95               	movwf	3989,c	;volatile
  6868                           
  6869                           ;main.c: 35: TRISE = 0x00;
  6870  002E6E  0E00               	movlw	0
  6871  002E70  6E96               	movwf	3990,c	;volatile
  6872                           
  6873                           ;main.c: 37: LATA = 0x00;
  6874  002E72  0E00               	movlw	0
  6875  002E74  6E89               	movwf	3977,c	;volatile
  6876                           
  6877                           ;main.c: 38: LATB = 0x00;
  6878  002E76  0E00               	movlw	0
  6879  002E78  6E8A               	movwf	3978,c	;volatile
  6880                           
  6881                           ;main.c: 39: LATC = 0x00;
  6882  002E7A  0E00               	movlw	0
  6883  002E7C  6E8B               	movwf	3979,c	;volatile
  6884                           
  6885                           ;main.c: 40: LATD = 0x00;
  6886  002E7E  0E00               	movlw	0
  6887  002E80  6E8C               	movwf	3980,c	;volatile
  6888                           
  6889                           ;main.c: 41: LATE = 0x00;
  6890  002E82  0E00               	movlw	0
  6891  002E84  6E8D               	movwf	3981,c	;volatile
  6892                           
  6893                           ;main.c: 43: ADCON0 = 0x00;
  6894  002E86  0E00               	movlw	0
  6895  002E88  6EC2               	movwf	4034,c	;volatile
  6896                           
  6897                           ;main.c: 44: ADCON1 |= 0x0A;
  6898  002E8A  0E0A               	movlw	10
  6899  002E8C  12C1               	iorwf	4033,f,c	;volatile
  6900                           
  6901                           ;main.c: 48: ADCON2 = 0;
  6902  002E8E  0E00               	movlw	0
  6903  002E90  6EC0               	movwf	4032,c	;volatile
  6904                           
  6905                           ;main.c: 49: ADCON2 |= 0b010;
  6906  002E92  82C0               	bsf	4032,1,c	;volatile
  6907                           
  6908                           ;main.c: 50: ADCON2 |= 0b110<<3;
  6909  002E94  0E30               	movlw	48
  6910  002E96  12C0               	iorwf	4032,f,c	;volatile
  6911                           
  6912                           ;main.c: 51: ADCON2 |= 1<<7;
  6913  002E98  8EC0               	bsf	4032,7,c	;volatile
  6914  002E9A  0012               	return		;funcret
  6915  002E9C                     __end_of_pinSetup:
  6916                           	opt stack 0
  6917                           tblptru	equ	0xFF8
  6918                           tblptrh	equ	0xFF7
  6919                           tblptrl	equ	0xFF6
  6920                           tablat	equ	0xFF5
  6921                           prodh	equ	0xFF4
  6922                           prodl	equ	0xFF3
  6923                           intcon	equ	0xFF2
  6924                           postinc0	equ	0xFEE
  6925                           wreg	equ	0xFE8
  6926                           postdec1	equ	0xFE5
  6927                           fsr1l	equ	0xFE1
  6928                           postinc2	equ	0xFDE
  6929                           postdec2	equ	0xFDD
  6930                           fsr2h	equ	0xFDA
  6931                           fsr2l	equ	0xFD9
  6932                           status	equ	0xFD8
  6933                           
  6934 ;; *************** function _initLCD *****************
  6935 ;; Defined at:
  6936 ;;		line 15 in file "lcd.c"
  6937 ;; Parameters:    Size  Location     Type
  6938 ;;		None
  6939 ;; Auto vars:     Size  Location     Type
  6940 ;;		None
  6941 ;; Return value:  Size  Location     Type
  6942 ;;                  1    wreg      void 
  6943 ;; Registers used:
  6944 ;;		wreg, status,2, status,0, cstack
  6945 ;; Tracked objects:
  6946 ;;		On entry : 0/0
  6947 ;;		On exit  : 0/0
  6948 ;;		Unchanged: 0/0
  6949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6952 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6953 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6954 ;;Total ram usage:        1 bytes
  6955 ;; Hardware stack levels used:    1
  6956 ;; Hardware stack levels required when called:    3
  6957 ;; This function calls:
  6958 ;;		_lcdInst
  6959 ;; This function is called by:
  6960 ;;		_main
  6961 ;; This function uses a non-reentrant model
  6962 ;;
  6963                           
  6964                           	psect	text33
  6965  002DDC                     __ptext33:
  6966                           	opt stack 0
  6967  002DDC                     _initLCD:
  6968                           	opt stack 27
  6969                           
  6970                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
  6971                           
  6972                           ;incstack = 0
  6973  002DDC  0E31               	movlw	49
  6974  002DDE  6E13               	movwf	??_initLCD& (0+255),c
  6975  002DE0  0EB2               	movlw	178
  6976  002DE2                     u4737:
  6977  002DE2  2EE8               	decfsz	wreg,f,c
  6978  002DE4  D7FE               	bra	u4737
  6979  002DE6  2E13               	decfsz	??_initLCD& (0+255),f,c
  6980  002DE8  D7FC               	bra	u4737
  6981  002DEA  D000               	nop2	
  6982                           
  6983                           ;lcd.c: 18: lcdInst(0b00110011);
  6984  002DEC  0E33               	movlw	51
  6985  002DEE  ECCB  F017         	call	_lcdInst
  6986                           
  6987                           ;lcd.c: 19: lcdInst(0b00110010);
  6988  002DF2  0E32               	movlw	50
  6989  002DF4  ECCB  F017         	call	_lcdInst
  6990                           
  6991                           ;lcd.c: 20: lcdInst(0b00101000);
  6992  002DF8  0E28               	movlw	40
  6993  002DFA  ECCB  F017         	call	_lcdInst
  6994                           
  6995                           ;lcd.c: 21: lcdInst(0b00001111);
  6996  002DFE  0E0F               	movlw	15
  6997  002E00  ECCB  F017         	call	_lcdInst
  6998                           
  6999                           ;lcd.c: 22: lcdInst(0b00000110);
  7000  002E04  0E06               	movlw	6
  7001  002E06  ECCB  F017         	call	_lcdInst
  7002                           
  7003                           ;lcd.c: 23: lcdInst(0b00000001);
  7004  002E0A  0E01               	movlw	1
  7005  002E0C  ECCB  F017         	call	_lcdInst
  7006                           
  7007                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
  7008  002E10  0E31               	movlw	49
  7009  002E12  6E13               	movwf	??_initLCD& (0+255),c
  7010  002E14  0EB2               	movlw	178
  7011  002E16                     u4747:
  7012  002E16  2EE8               	decfsz	wreg,f,c
  7013  002E18  D7FE               	bra	u4747
  7014  002E1A  2E13               	decfsz	??_initLCD& (0+255),f,c
  7015  002E1C  D7FC               	bra	u4747
  7016  002E1E  D000               	nop2	
  7017  002E20  0012               	return		;funcret
  7018  002E22                     __end_of_initLCD:
  7019                           	opt stack 0
  7020                           tblptru	equ	0xFF8
  7021                           tblptrh	equ	0xFF7
  7022                           tblptrl	equ	0xFF6
  7023                           tablat	equ	0xFF5
  7024                           prodh	equ	0xFF4
  7025                           prodl	equ	0xFF3
  7026                           intcon	equ	0xFF2
  7027                           postinc0	equ	0xFEE
  7028                           wreg	equ	0xFE8
  7029                           postdec1	equ	0xFE5
  7030                           fsr1l	equ	0xFE1
  7031                           postinc2	equ	0xFDE
  7032                           postdec2	equ	0xFDD
  7033                           fsr2h	equ	0xFDA
  7034                           fsr2l	equ	0xFD9
  7035                           status	equ	0xFD8
  7036                           
  7037 ;; *************** function _lcdInst *****************
  7038 ;; Defined at:
  7039 ;;		line 27 in file "lcd.c"
  7040 ;; Parameters:    Size  Location     Type
  7041 ;;  data            1    wreg     unsigned char 
  7042 ;; Auto vars:     Size  Location     Type
  7043 ;;  data            1   17[COMRAM] unsigned char 
  7044 ;; Return value:  Size  Location     Type
  7045 ;;                  1    wreg      void 
  7046 ;; Registers used:
  7047 ;;		wreg, status,2, status,0, cstack
  7048 ;; Tracked objects:
  7049 ;;		On entry : 0/0
  7050 ;;		On exit  : 0/0
  7051 ;;		Unchanged: 0/0
  7052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7054 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7055 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7056 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7057 ;;Total ram usage:        2 bytes
  7058 ;; Hardware stack levels used:    1
  7059 ;; Hardware stack levels required when called:    2
  7060 ;; This function calls:
  7061 ;;		_lcdNibble
  7062 ;; This function is called by:
  7063 ;;		_initLCD
  7064 ;;		_lcdNewline
  7065 ;;		_lcdHome
  7066 ;;		_lcdClear
  7067 ;; This function uses a non-reentrant model
  7068 ;;
  7069                           
  7070                           	psect	text34
  7071  002F96                     __ptext34:
  7072                           	opt stack 0
  7073  002F96                     _lcdInst:
  7074                           	opt stack 24
  7075                           
  7076                           ;incstack = 0
  7077                           ;lcdInst@data stored from wreg
  7078  002F96  6E12               	movwf	lcdInst@data,c
  7079                           
  7080                           ;lcd.c: 28: LATDbits.LATD2 = 0;
  7081  002F98  948C               	bcf	3980,2,c	;volatile
  7082                           
  7083                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
  7084  002F9A  0E74               	movlw	116
  7085  002F9C                     u4757:
  7086  002F9C  2EE8               	decfsz	wreg,f,c
  7087  002F9E  D7FE               	bra	u4757
  7088  002FA0  D000               	nop2	
  7089                           
  7090                           ;lcd.c: 30: lcdNibble(data);
  7091  002FA2  5012               	movf	lcdInst@data,w,c
  7092  002FA4  EC60  F016         	call	_lcdNibble
  7093                           
  7094                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
  7095  002FA8  0E04               	movlw	4
  7096  002FAA  6E11               	movwf	??_lcdInst& (0+255),c
  7097  002FAC  0E3E               	movlw	62
  7098  002FAE                     u4767:
  7099  002FAE  2EE8               	decfsz	wreg,f,c
  7100  002FB0  D7FE               	bra	u4767
  7101  002FB2  2E11               	decfsz	??_lcdInst& (0+255),f,c
  7102  002FB4  D7FC               	bra	u4767
  7103  002FB6  0012               	return		;funcret
  7104  002FB8                     __end_of_lcdInst:
  7105                           	opt stack 0
  7106                           tblptru	equ	0xFF8
  7107                           tblptrh	equ	0xFF7
  7108                           tblptrl	equ	0xFF6
  7109                           tablat	equ	0xFF5
  7110                           prodh	equ	0xFF4
  7111                           prodl	equ	0xFF3
  7112                           intcon	equ	0xFF2
  7113                           postinc0	equ	0xFEE
  7114                           wreg	equ	0xFE8
  7115                           postdec1	equ	0xFE5
  7116                           fsr1l	equ	0xFE1
  7117                           postinc2	equ	0xFDE
  7118                           postdec2	equ	0xFDD
  7119                           fsr2h	equ	0xFDA
  7120                           fsr2l	equ	0xFD9
  7121                           status	equ	0xFD8
  7122                           
  7123 ;; *************** function _lcdNibble *****************
  7124 ;; Defined at:
  7125 ;;		line 46 in file "lcd.c"
  7126 ;; Parameters:    Size  Location     Type
  7127 ;;  data            1    wreg     unsigned char 
  7128 ;; Auto vars:     Size  Location     Type
  7129 ;;  data            1   15[COMRAM] unsigned char 
  7130 ;;  temp            1   14[COMRAM] unsigned char 
  7131 ;; Return value:  Size  Location     Type
  7132 ;;                  1    wreg      void 
  7133 ;; Registers used:
  7134 ;;		wreg, status,2, status,0
  7135 ;; Tracked objects:
  7136 ;;		On entry : 0/0
  7137 ;;		On exit  : 0/0
  7138 ;;		Unchanged: 0/0
  7139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7141 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7143 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7144 ;;Total ram usage:        2 bytes
  7145 ;; Hardware stack levels used:    1
  7146 ;; Hardware stack levels required when called:    1
  7147 ;; This function calls:
  7148 ;;		Nothing
  7149 ;; This function is called by:
  7150 ;;		_lcdInst
  7151 ;;		_putch
  7152 ;; This function uses a non-reentrant model
  7153 ;;
  7154                           
  7155                           	psect	text35
  7156  002CC0                     __ptext35:
  7157                           	opt stack 0
  7158  002CC0                     _lcdNibble:
  7159                           	opt stack 26
  7160                           
  7161                           ;incstack = 0
  7162                           ;lcdNibble@data stored from wreg
  7163  002CC0  6E10               	movwf	lcdNibble@data,c
  7164                           
  7165                           ;lcd.c: 48: char temp = data & 0xF0;
  7166  002CC2  5010               	movf	lcdNibble@data,w,c
  7167  002CC4  0BF0               	andlw	240
  7168  002CC6  6E0F               	movwf	lcdNibble@temp,c
  7169                           
  7170                           ;lcd.c: 49: LATD = LATD & 0x0F;
  7171  002CC8  508C               	movf	3980,w,c	;volatile
  7172  002CCA  0B0F               	andlw	15
  7173  002CCC  6E8C               	movwf	3980,c	;volatile
  7174                           
  7175                           ;lcd.c: 50: LATD = temp | LATD;
  7176  002CCE  500F               	movf	lcdNibble@temp,w,c
  7177  002CD0  108C               	iorwf	3980,w,c	;volatile
  7178  002CD2  6E8C               	movwf	3980,c	;volatile
  7179                           
  7180                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  7181  002CD4  968C               	bcf	3980,3,c	;volatile
  7182                           
  7183                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
  7184  002CD6  0ED6               	movlw	214
  7185  002CD8                     u4777:
  7186  002CD8  D000               	nop2	
  7187  002CDA  D000               	nop2	
  7188  002CDC  2EE8               	decfsz	wreg,f,c
  7189  002CDE  D7FC               	bra	u4777
  7190  002CE0  D000               	nop2	
  7191                           
  7192                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  7193  002CE2  868C               	bsf	3980,3,c	;volatile
  7194                           
  7195                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
  7196  002CE4  0ED6               	movlw	214
  7197  002CE6                     u4787:
  7198  002CE6  D000               	nop2	
  7199  002CE8  D000               	nop2	
  7200  002CEA  2EE8               	decfsz	wreg,f,c
  7201  002CEC  D7FC               	bra	u4787
  7202  002CEE  D000               	nop2	
  7203                           
  7204                           ;lcd.c: 58: data = data << 4;
  7205  002CF0  3810               	swapf	lcdNibble@data,w,c
  7206  002CF2  0BF0               	andlw	240
  7207  002CF4  6E10               	movwf	lcdNibble@data,c
  7208                           
  7209                           ;lcd.c: 60: temp = data & 0xF0;
  7210  002CF6  5010               	movf	lcdNibble@data,w,c
  7211  002CF8  0BF0               	andlw	240
  7212  002CFA  6E0F               	movwf	lcdNibble@temp,c
  7213                           
  7214                           ;lcd.c: 61: LATD = LATD & 0x0F;
  7215  002CFC  508C               	movf	3980,w,c	;volatile
  7216  002CFE  0B0F               	andlw	15
  7217  002D00  6E8C               	movwf	3980,c	;volatile
  7218                           
  7219                           ;lcd.c: 62: LATD = temp | LATD;
  7220  002D02  500F               	movf	lcdNibble@temp,w,c
  7221  002D04  108C               	iorwf	3980,w,c	;volatile
  7222  002D06  6E8C               	movwf	3980,c	;volatile
  7223                           
  7224                           ;lcd.c: 64: LATDbits.LATD3 = 0;
  7225  002D08  968C               	bcf	3980,3,c	;volatile
  7226                           
  7227                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
  7228  002D0A  0ED6               	movlw	214
  7229  002D0C                     u4797:
  7230  002D0C  D000               	nop2	
  7231  002D0E  D000               	nop2	
  7232  002D10  2EE8               	decfsz	wreg,f,c
  7233  002D12  D7FC               	bra	u4797
  7234  002D14  D000               	nop2	
  7235                           
  7236                           ;lcd.c: 66: LATDbits.LATD3 = 1;
  7237  002D16  868C               	bsf	3980,3,c	;volatile
  7238                           
  7239                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
  7240  002D18  0ED6               	movlw	214
  7241  002D1A                     u4807:
  7242  002D1A  D000               	nop2	
  7243  002D1C  D000               	nop2	
  7244  002D1E  2EE8               	decfsz	wreg,f,c
  7245  002D20  D7FC               	bra	u4807
  7246  002D22  D000               	nop2	
  7247  002D24  0012               	return		;funcret
  7248  002D26                     __end_of_lcdNibble:
  7249                           	opt stack 0
  7250                           tblptru	equ	0xFF8
  7251                           tblptrh	equ	0xFF7
  7252                           tblptrl	equ	0xFF6
  7253                           tablat	equ	0xFF5
  7254                           prodh	equ	0xFF4
  7255                           prodl	equ	0xFF3
  7256                           intcon	equ	0xFF2
  7257                           postinc0	equ	0xFEE
  7258                           wreg	equ	0xFE8
  7259                           postdec1	equ	0xFE5
  7260                           fsr1l	equ	0xFE1
  7261                           postinc2	equ	0xFDE
  7262                           postdec2	equ	0xFDD
  7263                           fsr2h	equ	0xFDA
  7264                           fsr2l	equ	0xFD9
  7265                           status	equ	0xFD8
  7266                           
  7267 ;; *************** function _service *****************
  7268 ;; Defined at:
  7269 ;;		line 66 in file "main.c"
  7270 ;; Parameters:    Size  Location     Type
  7271 ;;		None
  7272 ;; Auto vars:     Size  Location     Type
  7273 ;;		None
  7274 ;; Return value:  Size  Location     Type
  7275 ;;                  1    wreg      void 
  7276 ;; Registers used:
  7277 ;;		None
  7278 ;; Tracked objects:
  7279 ;;		On entry : 0/0
  7280 ;;		On exit  : 0/0
  7281 ;;		Unchanged: 0/0
  7282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7285 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7286 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7287 ;;Total ram usage:       14 bytes
  7288 ;; Hardware stack levels used:    1
  7289 ;; This function calls:
  7290 ;;		Nothing
  7291 ;; This function is called by:
  7292 ;;		Interrupt level 2
  7293 ;; This function uses a non-reentrant model
  7294 ;;
  7295                           
  7296                           	psect	intcode
  7297  000008                     __pintcode:
  7298                           	opt stack 0
  7299  000008                     _service:
  7300                           	opt stack 24
  7301                           
  7302                           ;incstack = 0
  7303  000008  8271               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7304  00000A  ED7C  F015         	call	int_func,f	;refresh shadow registers
  7305                           tblptru	equ	0xFF8
  7306                           tblptrh	equ	0xFF7
  7307                           tblptrl	equ	0xFF6
  7308                           tablat	equ	0xFF5
  7309                           prodh	equ	0xFF4
  7310                           prodl	equ	0xFF3
  7311                           intcon	equ	0xFF2
  7312                           postinc0	equ	0xFEE
  7313                           wreg	equ	0xFE8
  7314                           postdec1	equ	0xFE5
  7315                           fsr1l	equ	0xFE1
  7316                           postinc2	equ	0xFDE
  7317                           postdec2	equ	0xFDD
  7318                           fsr2h	equ	0xFDA
  7319                           fsr2l	equ	0xFD9
  7320                           status	equ	0xFD8
  7321                           
  7322                           	psect	intcode_body
  7323  002AF8                     __pintcode_body:
  7324                           	opt stack 24
  7325  002AF8                     int_func:
  7326                           	opt stack 24
  7327  002AF8  0006               	pop		; remove dummy address from shadow register refresh
  7328  002AFA  CFFA F001          	movff	pclath,??_service
  7329  002AFE  CFFB F002          	movff	pclatu,??_service+1
  7330  002B02  CFE9 F003          	movff	fsr0l,??_service+2
  7331  002B06  CFEA F004          	movff	fsr0h,??_service+3
  7332  002B0A  CFE1 F005          	movff	fsr1l,??_service+4
  7333  002B0E  CFE2 F006          	movff	fsr1h,??_service+5
  7334  002B12  CFD9 F007          	movff	fsr2l,??_service+6
  7335  002B16  CFDA F008          	movff	fsr2h,??_service+7
  7336  002B1A  CFF3 F009          	movff	prodl,??_service+8
  7337  002B1E  CFF4 F00A          	movff	prodh,??_service+9
  7338  002B22  CFF6 F00B          	movff	tblptrl,??_service+10
  7339  002B26  CFF7 F00C          	movff	tblptrh,??_service+11
  7340  002B2A  CFF8 F00D          	movff	tblptru,??_service+12
  7341  002B2E  CFF5 F00E          	movff	tablat,??_service+13
  7342                           
  7343                           ;main.c: 69: if(INT1IF){INT1IF = 0;
  7344  002B32  B0F0               	btfsc	intcon3,0,c	;volatile
  7345  002B34  90F0               	bcf	intcon3,0,c	;volatile
  7346  002B36  C00E  FFF5         	movff	??_service+13,tablat
  7347  002B3A  C00D  FFF8         	movff	??_service+12,tblptru
  7348  002B3E  C00C  FFF7         	movff	??_service+11,tblptrh
  7349  002B42  C00B  FFF6         	movff	??_service+10,tblptrl
  7350  002B46  C00A  FFF4         	movff	??_service+9,prodh
  7351  002B4A  C009  FFF3         	movff	??_service+8,prodl
  7352  002B4E  C008  FFDA         	movff	??_service+7,fsr2h
  7353  002B52  C007  FFD9         	movff	??_service+6,fsr2l
  7354  002B56  C006  FFE2         	movff	??_service+5,fsr1h
  7355  002B5A  C005  FFE1         	movff	??_service+4,fsr1l
  7356  002B5E  C004  FFEA         	movff	??_service+3,fsr0h
  7357  002B62  C003  FFE9         	movff	??_service+2,fsr0l
  7358  002B66  C002  FFFB         	movff	??_service+1,pclatu
  7359  002B6A  C001  FFFA         	movff	??_service,pclath
  7360  002B6E  9271               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7361  002B70  0011               	retfie		f
  7362  002B72                     __end_of_service:
  7363                           	opt stack 0
  7364                           pclatu	equ	0xFFB
  7365                           pclath	equ	0xFFA
  7366                           tblptru	equ	0xFF8
  7367                           tblptrh	equ	0xFF7
  7368                           tblptrl	equ	0xFF6
  7369                           tablat	equ	0xFF5
  7370                           prodh	equ	0xFF4
  7371                           prodl	equ	0xFF3
  7372                           intcon	equ	0xFF2
  7373                           intcon3	equ	0xFF0
  7374                           postinc0	equ	0xFEE
  7375                           fsr0h	equ	0xFEA
  7376                           fsr0l	equ	0xFE9
  7377                           wreg	equ	0xFE8
  7378                           postdec1	equ	0xFE5
  7379                           fsr1h	equ	0xFE2
  7380                           fsr1l	equ	0xFE1
  7381                           postinc2	equ	0xFDE
  7382                           postdec2	equ	0xFDD
  7383                           fsr2h	equ	0xFDA
  7384                           fsr2l	equ	0xFD9
  7385                           status	equ	0xFD8
  7386                           pclatu	equ	0xFFB
  7387                           pclath	equ	0xFFA
  7388                           tblptru	equ	0xFF8
  7389                           tblptrh	equ	0xFF7
  7390                           tblptrl	equ	0xFF6
  7391                           tablat	equ	0xFF5
  7392                           prodh	equ	0xFF4
  7393                           prodl	equ	0xFF3
  7394                           intcon	equ	0xFF2
  7395                           intcon3	equ	0xFF0
  7396                           postinc0	equ	0xFEE
  7397                           fsr0h	equ	0xFEA
  7398                           fsr0l	equ	0xFE9
  7399                           wreg	equ	0xFE8
  7400                           postdec1	equ	0xFE5
  7401                           fsr1h	equ	0xFE2
  7402                           fsr1l	equ	0xFE1
  7403                           postinc2	equ	0xFDE
  7404                           postdec2	equ	0xFDD
  7405                           fsr2h	equ	0xFDA
  7406                           fsr2l	equ	0xFD9
  7407                           status	equ	0xFD8
  7408                           
  7409                           	psect	rparam
  7410  0000                     pclatu	equ	0xFFB
  7411                           pclath	equ	0xFFA
  7412                           tblptru	equ	0xFF8
  7413                           tblptrh	equ	0xFF7
  7414                           tblptrl	equ	0xFF6
  7415                           tablat	equ	0xFF5
  7416                           prodh	equ	0xFF4
  7417                           prodl	equ	0xFF3
  7418                           intcon	equ	0xFF2
  7419                           intcon3	equ	0xFF0
  7420                           postinc0	equ	0xFEE
  7421                           fsr0h	equ	0xFEA
  7422                           fsr0l	equ	0xFE9
  7423                           wreg	equ	0xFE8
  7424                           postdec1	equ	0xFE5
  7425                           fsr1h	equ	0xFE2
  7426                           fsr1l	equ	0xFE1
  7427                           postinc2	equ	0xFDE
  7428                           postdec2	equ	0xFDD
  7429                           fsr2h	equ	0xFDA
  7430                           fsr2l	equ	0xFD9
  7431                           status	equ	0xFD8
  7432                           
  7433                           	psect	temp
  7434  000071                     btemp:
  7435                           	opt stack 0
  7436  000071                     	ds	1
  7437  0000                     int$flags	set	btemp
  7438                           pclatu	equ	0xFFB
  7439                           pclath	equ	0xFFA
  7440                           tblptru	equ	0xFF8
  7441                           tblptrh	equ	0xFF7
  7442                           tblptrl	equ	0xFF6
  7443                           tablat	equ	0xFF5
  7444                           prodh	equ	0xFF4
  7445                           prodl	equ	0xFF3
  7446                           intcon	equ	0xFF2
  7447                           intcon3	equ	0xFF0
  7448                           postinc0	equ	0xFEE
  7449                           fsr0h	equ	0xFEA
  7450                           fsr0l	equ	0xFE9
  7451                           wreg	equ	0xFE8
  7452                           postdec1	equ	0xFE5
  7453                           fsr1h	equ	0xFE2
  7454                           fsr1l	equ	0xFE1
  7455                           postinc2	equ	0xFDE
  7456                           postdec2	equ	0xFDD
  7457                           fsr2h	equ	0xFDA
  7458                           fsr2l	equ	0xFD9
  7459                           status	equ	0xFD8


Data Sizes:
    Strings     64
    Constant    174
    Data        9
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     99     112
    BANK0           128     36      36
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[10]), STR_4(CODE[11]), STR_3(CODE[9]), STR_2(CODE[8]), 
		 -> STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__getTime	PTR int  size(2) Largest target is 7
		 -> getTime@time(COMRAM[7]), 


Critical Paths under _main in COMRAM

    _main->_testFrequency
    _testFrequency->_printf
    _printf->___ftsub
    _scale->___ftmul
    _lcdNewline->_lcdInst
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftdiv->___altoft
    ___altoft->___ftpack
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_testFrequency
    _testFrequency->_printf

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  121725
                                             96 COMRAM     3     3      0
                            _initLCD
                           _pinSetup
                             _printf
                      _testFrequency
 ---------------------------------------------------------------------------------
 (1) _testFrequency                                       19    16      3   65555
                                             89 COMRAM     7     4      3
                                             24 BANK0     12    12      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                           ___altoft
                            ___ftdiv
                             _initT0
                             _printf
                            _startT0
 ---------------------------------------------------------------------------------
 (2) _startT0                                              4     0      4     370
                                             14 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _printf                                              44    38      6   55941
                                             77 COMRAM    12     6      6
                                              0 BANK0     24    24      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   12787
                                             49 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     421
                                             18 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   12508
                                             49 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2696
                                             28 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5590
                                             34 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1819
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1985
                                             20 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                             14 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     827
                                             14 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2703
                                             22 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                             27 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     756
                                             56 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4689
                                             71 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4325
                                             59 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     219
                                             14 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     660
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _initT0                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4136
                                             32 COMRAM    15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4    2959
                                             22 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2524
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     724
                                             15 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      65
                                             15 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4    1119
                                             27 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1011
                                             14 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             18 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     195
                                             16 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _service                                             14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _testFrequency
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___altoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     _initT0
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _putch
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _startT0

 _service (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     24      24       5       28.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     63      70       1       88.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      94      34        0.0%
DATA                 0      0      94       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Mar 10 01:13:22 2017

             ___altoft@exp 001F              ___altoft@sign 0020                         l44 2F02  
                       l76 2F84               ___awdiv@sign 001A        ___wmul@multiplicand 001F  
              __CFG_BORV$3 000000               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000            ??_testFrequency 005D  
              __CFG_OSC$HS 000000               ___ftadd@exp1 0047               ___ftadd@exp2 0046  
             ___ftadd@sign 0045                        l310 2FB8                        l426 1748  
                      l266 2382                        l269 22E0                        l454 15CA  
                      l463 17B6                        l731 2942                        l803 24AC  
                      l754 208A                        l828 2F66                        l758 20B4  
                      l873 2AE6                        l769 2164                        l778 2180  
                      l883 2CAE                        l699 25D4                        l796 241E  
                      l789 2882                        l797 2446               __CFG_CPB$OFF 000000  
                      _PEN 007E2A               __CFG_CPD$OFF 000000                        _SEN 007E28  
             ___awmod@sign 0014                        wreg 000FE8               __CFG_LVP$OFF 000000  
             ___ftdiv@cntr 002A               ___ftdiv@sign 002F               __CFG_WDT$OFF 000000  
                     l4101 1134                       l4015 276C                       l4103 1172  
                     l4033 27BC                       l4025 2794                       l4201 158A  
                     l4043 2A98                       l4027 27A0                       l4019 277C  
                     l4211 15CE                       l4045 2AA4                       l4029 27A6  
                     l4221 1644                       l4205 1598                       l4141 12D6  
                     l4133 126E                       l4117 11CC                       l4055 2AD8  
                     l4047 2AA8                       l4071 2CA0                       l4063 2C6C  
                     l4207 15AC                       l4151 1358                       l4311 19F2  
                     l4065 2C78                       l4305 19C2                       l4241 1770  
                     l4233 173A                       l4217 15F2                       l4161 13C0  
                     l4145 12FC                       l3611 2114                       l4067 2C7C  
                     l4307 19D4                       l4227 171E                       l4171 141E  
                     l4147 1312                       l4091 1116                       l3541 28DC  
                     l3613 211E                       l3605 20F2                       l4077 2D2C  
                     l3701 2A06                       l4309 19DC                       l4261 1808  
                     l4229 172C                       l4157 139A                       l4149 1342  
                     l4093 1122                       l3551 2938                       l3543 28FA  
                     l3535 28C4                       l3631 219C                       l3623 2152  
                     l3615 2128                       l4079 2D38                       l4255 17D8  
                     l4175 1484                       l4095 1128                       l4087 1100  
                     l4409 285C                       l3641 21CC                       l3625 215C  
                     l3617 2130                       l3713 2A2C                       l4273 184E  
                     l4193 14F0                       l4177 148A                       l4097 112E  
                     l4355 2F4A                       l3547 2910                       l3539 28D2  
                     l4371 2BA0                       l3715 2A34                       l3707 2A16  
                     l3651 260E                       l3803 2006                       l4275 1854  
                     l4291 18AC                       l4259 1802                       l3549 292E  
                     l3733 2A6C                       l3725 2A54                       l3717 2A38  
                     l4189 14D0                       l4445 2224                       l4383 27F6  
                     l3583 2098                       l3671 2668                       l3823 1BE8  
                     l4295 18CA                       l4199 157C                       l4369 2B94  
                     l3913 24FA                       l3729 2A5E                       l3761 2C38  
                     l3753 2C18                       l3745 2BFE                       l3681 2690  
                     l3657 2636                       l3841 1DDC                       l3817 1B44  
                     l4297 18DA                       l4289 189A                       l3907 24DC  
                     l3851 23B8                       l3755 2C20                       l3675 2678  
                     l3835 1D38                       l3827 1C0C                       l4299 1954  
                     l4467 229C                       l4389 281E                       l3589 20C2  
                     l3757 2C24                       l3765 2C42                       l3749 2C0A  
                     l3685 26A0                       l3951 25AA                       l3935 256C  
                     l3927 253C                       l3857 23E4                       l3769 2C50  
                     l3947 259A                       l3891 2482                       l3795 1F46  
                     l3973 2992                       l3965 2E38                       l3957 25C2  
                     l3983 29EE                       l3959 25CE                       l3887 2472  
                     l3977 29C2                       l3897 249A                       l3899 24A6  
                     l3997 2706                       _EEIF 007D0C                       STR_1 10DE  
                     STR_2 10E7                       STR_3 10D5                       STR_4 10C0  
                     STR_5 10CB                       STR_6 10AF                       _LATA 000F89  
                     _LATB 000F8A                       _LATC 000F8B                       _LATD 000F8C  
                     u4001 26EA                       _LATE 000F8D                       u4020 2724  
                     u3301 2056                       u3311 206A                       u4025 271C  
                     u3511 25F6                       u3531 261E               printf@tmpval 008C  
                     u4350 15C2                       u4190 120C                       u4530 2F48  
                     u3811 23C8                       u4195 1202                       _PEIE 007F96  
                     u4525 2DB0                       u4571 27DE                       _RCEN 007E2B  
                     u4807 2D1A                       u4591 2806                       u3791 239C  
                     u4727 2F88                       u4655 2336                       u4737 2DE2  
                     u4747 2E16                       u4757 2F9C                       u4767 2FAE  
                     u4777 2CD8                       u4787 2CE6                       u4797 2D0C  
                     _RSEN 007E29                       _main 2ED2               ___ftpack@arg 000F  
                     _keys 1097               ___ftpack@exp 0012                       _time 006F  
                     fsr0h 000FEA                       fsr1h 000FE2                       fsr2h 000FDA  
                     fsr0l 000FE9                       fsr1l 000FE1                       fsr2l 000FD9  
                     btemp 0071                       prodh 000FF4                       prodl 000FF3  
                     start 000E              __CFG_IESO$OFF 000000              __CFG_MCLRE$ON 000000  
             ___ftmul@cntr 0030               ___param_bank 000000               ___ftmul@sign 0031  
             ___fttol@exp1 0047               ___fttol@lval 0043           ?_I2C_Master_Init 001C  
         ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001  
                    ?_main 0001                      _ACKEN 007E2C                      _ACKDT 007E2D  
          __end_of___awdiv 2A76                      _EEADR 000FA9            __end_of___ftadd 21F2  
          __end_of___awmod 2C5A            __end_of___ftdiv 28B4            __end_of___ftneg 2F74  
          __end_of___lldiv 2AF8            __end_of___ftmul 26DA                      _T0CON 000FD5  
          ___awdiv@divisor 0017            __end_of___llmod 2CC0            __end_of___ftsub 2E62  
          __end_of___fttol 27CE            ___awdiv@counter 0019                      _TMR0H 000FD7  
                    _TMR0L 000FD6                      _PORTA 000F80                      _PORTB 000F81  
                    _PORTC 000F82                      _PORTD 000F83                      _TRISA 000F92  
                    _TRISB 000F93                      _TRISC 000F94                      _TRISD 000F95  
                    _TRISE 000F96              __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
             ___lltoft@exp 001F            __end_of_lcdInst 2FB8             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000            __end_of_initLCD 2E22             __CFG_EBTRB$OFF 000000  
                    _flag0 006B                      _angle 0068            __end_of_dpowers 1029  
                    _count 006D                      _scale 1A10              ___ftpack@sign 0013  
                    _putch 2F74                      pclath 000FFA                      tablat 000FF5  
          __end_of_service 2B72            __end_of_startT0 2FE6                      status 000FD8  
           __CFG_PBADEN$ON 000000            __initialization 2E9C               __end_of_main 2F04  
             __end_of_keys 10A8                     ??_main 0061              ___fttol@sign1 0042  
            __activetblptr 000002       __size_of__tdiv_to_l_ 0132          ?_I2C_Master_Start 0001  
        ?_I2C_Master_Write 0010         ??_I2C_Master_Start 0010                     _ADCON0 000FC2  
                   _ADCON1 000FC1         ??_I2C_Master_Write 0012                     _ADCON2 000FC0  
         __end_of___altoft 2BEA           ___llmod@dividend 001C                     ?_scale 0032  
                   _ADRESH 000FC4                     _EEADRH 000FAA                     _ADRESL 000FC3  
                   _EEDATA 000FA8                     _EECON1 000FA6                     _EECON2 000FA7  
         ___awdiv@dividend 0015                     ?_putch 0001           __end_of___ftpack 2962  
         __end_of___lltoft 2D82                     _INT1IF 007F80                     _TMR0IE 007F95  
                   _TMR0IF 007F92                     _SSPADD 000FC8                     _TRISC3 007CA3  
                   _TRISC4 007CA4                     _SSPBUF 000FC9             __CFG_XINST$OFF 000000  
         __end_of__powers_ 1077                     ___ftge 2962                     ___wmul 2F04  
                ??___awdiv 0019                  ??___ftadd 0042             __CFG_STVREN$ON 000000  
                ??___awmod 0013                  ??___ftdiv 0027                  ??___ftneg 0012  
                ??___lldiv 0017                  ??___ftmul 0029                  ??___llmod 0024  
                ??___ftsub 004E                  ??___fttol 003D                     _initT0 2FCA  
                   _fround 1E00           ___awdiv@quotient 001B            ___awmod@divisor 0011  
          ___awmod@counter 0013                  ??_lcdInst 0011                     _printf 10F0  
         __end_of_pinSetup 2E9C      ___ftmul@f3_as_product 002D                  ??_initLCD 0013  
             __pdataCOMRAM 0064               __mediumconst 0000                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8                  ??_service 0001  
                ??_startT0 0013                 __accesstop 0080    __end_of__initialization 2EC4  
               ___altoft@c 0017                 ___ftadd@f1 003C                 ___ftadd@f2 003F  
               ___ftge@ff1 000F                 ___ftge@ff2 0012              ___rparam_used 000001  
               ___ftdiv@f1 0021                 ___ftdiv@f2 0024                 ___ftdiv@f3 002B  
               ___ftneg@f1 000F                 ___ftmul@f1 0023                 ___ftmul@f2 0026  
               ___ftsub@f1 0048                 ___ftsub@f2 004B                 ___fttol@f1 0039  
     __end_of_happynewyear 10AF             __pcstackCOMRAM 0001                 ___lltoft@c 0017  
            __end_of_scale 1E00              __end_of_putch 2F96         __size_of_lcdNibble 0066  
               __div_to_l_ 24BE            __div_to_l_@exp1 001A            __div_to_l_@cntr 0019  
                  ??_scale 0035            __div_to_l_@quot 0015                    ??_putch 0013  
            __div_to_l_@f1 000F              __div_to_l_@f2 0012                    ?___ftge 000F  
                  ?___wmul 001D                    ?_initT0 0001                  ?___altoft 0017  
                  ?_fround 0032                 _lcdNewline 2FFA                  ?___ftpack 000F  
                  ?_printf 004E                  ?___lltoft 0017      __end_of_testFrequency 238C  
                  _SSPCON1 000FC6                    _SSPCON2 000FC5                    _SSPSTAT 000FC7  
                ?_pinSetup 0001          __end_of_lcdNibble 2D26          __end_of__npowers_ 1050  
                  __Hparam 0000                 _scale$1114 0035                    __Lparam 0000  
          __size_of___ftge 0090                    ___awdiv 29F2                    ___ftadd 2046  
                  ___awmod 2BEA                    ___ftdiv 27CE                    ___ftneg 2F50  
                  ___lldiv 2A76            __size_of___wmul 0026                    ___ftmul 25E6  
                  ___llmod 2C5A                    ___ftsub 2E22                    ___fttol 26DA  
             __psmallconst 1000                 ??___altoft 001B            __size_of_initT0 0010  
                  __pcinit 2E9C                 ??___ftpack 0014            __size_of_fround 0246  
                  __ramtop 1000                    _lcdInst 2F96                 ??___lltoft 001B  
                  __ptext0 2ED2                    __ptext1 21F2                    __ptext2 2FDA  
                  __ptext3 10F0                    __ptext4 1A10                    __ptext5 2F74  
                  __ptext6 2FFA                    __ptext7 1E00                    __ptext8 2F04  
                  __ptext9 25E6            __size_of_printf 0920                    _initLCD 2DDC  
        __end_of_hexpowers 1097                ?__div_to_l_ 000F                    _dpowers 1001  
                  _extFreq 0064           ___awmod@dividend 000F   __size_of_I2C_Master_Init 005A  
 __size_of_I2C_Master_Read 0026   __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008  
                  _service 0008                    _startT0 2FDA             __pintcode_body 2AF8  
     end_of_initialization 2EC4              __Lmediumconst 0000                    int_func 2AF8  
               ??_pinSetup 000F  __size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A  
          ___lldiv@divisor 0013            ___lldiv@counter 001B                    printf@c 0097  
                  printf@f 004E           I2C_Master_Init@c 001C           I2C_Master_Read@a 0010  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc2 000FDE             __tdiv_to_l_@f1 000F             __tdiv_to_l_@f2 0012  
              ?_lcdNewline 0001              ??__tdiv_to_l_ 0015                  _PORTBbits 000F81  
             _happynewyear 10A8                ___ftdiv@exp 002E        __size_of__div_to_l_ 0128  
              ___ftmul@exp 002C             __end_of___ftge 29F2             __end_of___wmul 2F2A  
            __pidataCOMRAM 2FF0             __end_of_initT0 2FDA             __end_of_fround 2046  
           __end_of_printf 1A10        start_initialization 2E9C        __end_of__tdiv_to_l_ 24BE  
        ??_I2C_Master_Init 0020          ??_I2C_Master_Read 0010          ??_I2C_Master_Wait 000F  
        ??_I2C_Master_Stop 0010        __size_of_lcdNewline 0008            ___llmod@divisor 0020  
          ___llmod@counter 0024                   ??___ftge 0015                   ??___wmul 0021  
                 ??_initT0 000F           __CFG_LPT1OSC$OFF 000000                   ??_fround 0035  
                 ??_printf 0054          __size_of___altoft 0078                 fround@prec 003B  
        __size_of___ftpack 00AE          __size_of___lltoft 005C                __pbssCOMRAM 006D  
            __pcstackBANK0 0080           _I2C_Master_Start 300A           _I2C_Master_Write 2FE6  
                _main$1109 0061          __CFG_CCP2MX$PORTC 000000          __size_of_pinSetup 003A  
                __pintcode 0008                  _lcdNibble 2CC0                   ?___awdiv 0015  
                 ?___ftadd 003C                   ?___awmod 000F                   ?___ftdiv 0021  
                 ?___ftneg 000F                   ?___lldiv 000F                   ?___ftmul 0023  
                 ?___llmod 001C                   ?___ftsub 0048                  __npowers_ 1029  
                 ?___fttol 0039                   ?_lcdInst 0001                __tdiv_to_l_ 238C  
             ??__div_to_l_ 0015                   ?_initLCD 0001                __smallconst 1000  
                 ?_service 0001                  _hexpowers 1077                   ?_startT0 000F  
           __size_of_scale 03F0             __size_of_putch 0022             ___wmul@product 0021  
                 _LATDbits 000F8C     __size_of_testFrequency 019A         __end_of__div_to_l_ 25E6  
       testFrequency@first 00A0         testFrequency@count 0098           __CFG_WDTPS$32768 000000  
               ?_lcdNibble 0001               ??_lcdNewline 0013          ___wmul@multiplier 001D  
            lcdNibble@data 0010                 printf@flag 0088              lcdNibble@temp 000F  
               printf@fval 0094                 printf@prec 0086        I2C_Master_Read@temp 0011  
                copy_data0 2EB0                 startT0@val 000F         __end_of_lcdNewline 3002  
                 __Hrparam 0000                   __Lrparam 0000         __CFG_BOREN$SBORDIS 000000  
         __size_of___awdiv 0084           __size_of___ftadd 01AC           __size_of___awmod 0070  
         __size_of___ftdiv 00E6           __size_of___ftneg 0024           __size_of___lldiv 0082  
                 ___altoft 2B72           __size_of___ftmul 00F4           __size_of___llmod 0066  
         __size_of___ftsub 0040           __size_of___fttol 00F4                   ___ftpack 28B4  
              _fround$1112 0038                _fround$1113 0035                   ___lltoft 2D26  
         __size_of_lcdInst 0022            _I2C_Master_Init 2D82            _I2C_Master_Read 2F2A  
         __size_of_initLCD 0046            _I2C_Master_Wait 2FB8            _I2C_Master_Stop 3002  
            _testFrequency 21F2                   __ptext10 2BEA                   __ptext11 29F2  
                 __ptext20 2962                   __ptext12 238C                   __ptext21 2FCA  
                 __ptext13 24BE                   __ptext30 2D82                   __ptext22 27CE  
                 __ptext14 2D26                   __ptext31 2A76                   __ptext23 2B72  
                 __ptext15 2C5A                   __ptext32 2E62                   __ptext24 28B4  
                 __ptext16 26DA                   __ptext33 2DDC                   __ptext25 2FE6  
                 __ptext17 2E22                   __ptext34 2F96                   __ptext26 3002  
                 __ptext18 2046                   __ptext35 2CC0                   __ptext27 300A  
                 __ptext19 2F50                   __ptext28 2F2A                   __ptext29 2FB8  
                 __powers_ 1050           __size_of_service 2B6A           __size_of_startT0 000C  
            __size_of_main 0032                   _pinSetup 2E62          testFrequency@time 00A2  
        testFrequency@prev 009C                ??_lcdNibble 000F                   int$flags 0071  
                printf@idx 0083                  printf@exp 008A                  printf@val 0090  
    testFrequency@timerOff 009E                  putch@data 0013             ?_testFrequency 005A  
 __end_of_I2C_Master_Start 3012   __end_of_I2C_Master_Write 2FF0                 _INTCONbits 000FF2  
                 scale@scl 0038                   intlevel2 0000           __tdiv_to_l_@exp1 001D  
         __tdiv_to_l_@cntr 001C           __tdiv_to_l_@quot 0018           ___lldiv@dividend 000F  
                 printf@ap 0084    __end_of_I2C_Master_Init 2DDC    __end_of_I2C_Master_Read 2F50  
  __end_of_I2C_Master_Wait 2FCA    __end_of_I2C_Master_Stop 300A                lcdInst@data 0012  
             ?__tdiv_to_l_ 000F                _printf$1115 0080           ___lldiv@quotient 0017  
        I2C_Master_Write@d 0010  
