

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Feb 18 13:13:13 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17  0000                     
    18                           ; Version 1.40
    19                           ; Generated 01/12/2016 GMT
    20                           ; 
    21                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F4620 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     
    53                           	psect	smallconst
    54  001000                     __psmallconst:
    55                           	opt stack 0
    56  001000  00                 	db	0
    57  001001                     _keys:
    58                           	opt stack 0
    59  001001  31                 	db	49
    60  001002  32                 	db	50
    61  001003  33                 	db	51
    62  001004  41                 	db	65
    63  001005  34                 	db	52
    64  001006  35                 	db	53
    65  001007  36                 	db	54
    66  001008  42                 	db	66
    67  001009  37                 	db	55
    68  00100A  38                 	db	56
    69  00100B  39                 	db	57
    70  00100C  43                 	db	67
    71  00100D  2A                 	db	42
    72  00100E  30                 	db	48
    73  00100F  23                 	db	35
    74  001010  44                 	db	68
    75  001011  00                 	db	0
    76  001012                     __end_of_keys:
    77                           	opt stack 0
    78  0000                     _ADCON0	set	4034
    79  0000                     _ADCON1	set	4033
    80  0000                     _LATB	set	3978
    81  0000                     _LATC	set	3979
    82  0000                     _LATD	set	3980
    83  0000                     _LATDbits	set	3980
    84  0000                     _PORTB	set	3969
    85  0000                     _PORTBbits	set	3969
    86  0000                     _TRISB	set	3987
    87  0000                     _TRISC	set	3988
    88  0000                     _TRISD	set	3989
    89  001012                     STR_1:
    90  001012  31                 	db	49	;'1'
    91  001013  31                 	db	49	;'1'
    92  001014  31                 	db	49	;'1'
    93  001015  0A                 	db	10
    94  001016  00                 	db	0
    95  001017                     STR_2:
    96  001017  32                 	db	50	;'2'
    97  001018  32                 	db	50	;'2'
    98  001019  33                 	db	51	;'3'
    99  00101A  00                 	db	0
   100                           
   101                           ; #config settings
   102  00101B  00                 	db	0	; dummy byte at the end
   103  0000                     
   104                           	psect	cinit
   105  00118C                     __pcinit:
   106                           	opt stack 0
   107  00118C                     start_initialization:
   108                           	opt stack 0
   109  00118C                     __initialization:
   110                           	opt stack 0
   111  00118C                     end_of_initialization:
   112                           	opt stack 0
   113  00118C                     __end_of__initialization:
   114                           	opt stack 0
   115  00118C  0E00               	movlw	low (__Lsmallconst shr (0+16))
   116  00118E  6EF8               	movwf	tblptru,c
   117  001190  0E10               	movlw	high __Lsmallconst
   118  001192  6EF7               	movwf	tblptrh,c
   119  001194  0100               	movlb	0
   120  001196  EF0E  F008         	goto	_main	;jump to C main() function
   121                           tblptru	equ	0xFF8
   122                           tblptrh	equ	0xFF7
   123                           
   124                           	psect	cstackCOMRAM
   125  000001                     __pcstackCOMRAM:
   126                           	opt stack 0
   127  000001                     lcdNibble@temp:
   128                           	opt stack 0
   129                           
   130                           ; 1 bytes @ 0x0
   131  000001                     	ds	1
   132  000002                     lcdNibble@data:
   133                           	opt stack 0
   134                           
   135                           ; 1 bytes @ 0x1
   136  000002                     	ds	1
   137  000003                     lcdInst@data:
   138                           	opt stack 0
   139                           
   140                           ; 1 bytes @ 0x2
   141  000003                     	ds	1
   142  000004                     ??_initLCD:
   143  000004                     putch@data:
   144                           	opt stack 0
   145                           
   146                           ; 1 bytes @ 0x3
   147  000004                     	ds	1
   148  000005                     ?_printf:
   149                           	opt stack 0
   150  000005                     printf@f:
   151                           	opt stack 0
   152                           
   153                           ; 2 bytes @ 0x4
   154  000005                     	ds	2
   155  000007                     printf@ap:
   156                           	opt stack 0
   157                           
   158                           ; 2 bytes @ 0x6
   159  000007                     	ds	2
   160  000009                     printf@c:
   161                           	opt stack 0
   162                           
   163                           ; 1 bytes @ 0x8
   164  000009                     	ds	1
   165  00000A                     ??_main:
   166                           
   167                           ; 1 bytes @ 0x9
   168  00000A                     	ds	1
   169  00000B                     main@keypress:
   170                           	opt stack 0
   171                           
   172                           ; 1 bytes @ 0xA
   173  00000B                     	ds	1
   174  00000C                     main@temp:
   175                           	opt stack 0
   176                           
   177                           ; 1 bytes @ 0xB
   178  00000C                     	ds	1
   179  00000D                     main@i:
   180                           	opt stack 0
   181                           
   182                           ; 1 bytes @ 0xC
   183  00000D                     	ds	1
   184                           tblptru	equ	0xFF8
   185                           tblptrh	equ	0xFF7
   186                           
   187 ;;
   188 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   189 ;;
   190 ;; *************** function _main *****************
   191 ;; Defined at:
   192 ;;		line 22 in file "main.c"
   193 ;; Parameters:    Size  Location     Type
   194 ;;		None
   195 ;; Auto vars:     Size  Location     Type
   196 ;;  i               1   12[COMRAM] unsigned char 
   197 ;;  temp            1   11[COMRAM] unsigned char 
   198 ;;  keypress        1   10[COMRAM] unsigned char 
   199 ;; Return value:  Size  Location     Type
   200 ;;                  1    wreg      void 
   201 ;; Registers used:
   202 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   203 ;; Tracked objects:
   204 ;;		On entry : 0/0
   205 ;;		On exit  : 0/0
   206 ;;		Unchanged: 0/0
   207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   209 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   210 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   211 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   212 ;;Total ram usage:        4 bytes
   213 ;; Hardware stack levels required when called:    5
   214 ;; This function calls:
   215 ;;		_initLCD
   216 ;;		_lcdNewline
   217 ;;		_printf
   218 ;;		_putch
   219 ;; This function is called by:
   220 ;;		Startup code after reset
   221 ;; This function uses a non-reentrant model
   222 ;;
   223                           
   224                           	psect	text0
   225  00101C                     __ptext0:
   226                           	opt stack 0
   227  00101C                     _main:
   228                           	opt stack 26
   229                           
   230                           ;main.c: 23: TRISC = 0x00;
   231                           
   232                           ;incstack = 0
   233  00101C  0E00               	movlw	0
   234  00101E  6E94               	movwf	3988,c	;volatile
   235                           
   236                           ;main.c: 24: TRISD = 0x00;
   237  001020  0E00               	movlw	0
   238  001022  6E95               	movwf	3989,c	;volatile
   239                           
   240                           ;main.c: 25: TRISB = 0xFF;
   241  001024  6893               	setf	3987,c	;volatile
   242                           
   243                           ;main.c: 26: LATB = 0x00;
   244  001026  0E00               	movlw	0
   245  001028  6E8A               	movwf	3978,c	;volatile
   246                           
   247                           ;main.c: 27: LATC = 0x00;
   248  00102A  0E00               	movlw	0
   249  00102C  6E8B               	movwf	3979,c	;volatile
   250                           
   251                           ;main.c: 28: ADCON0 = 0x00;
   252  00102E  0E00               	movlw	0
   253  001030  6EC2               	movwf	4034,c	;volatile
   254                           
   255                           ;main.c: 29: ADCON1 = 0xFF;
   256  001032  68C1               	setf	4033,c	;volatile
   257  001034                     l804:
   258                           
   259                           ;main.c: 33: initLCD();
   260  001034  EC81  F008         	call	_initLCD	;wreg free
   261                           
   262                           ;main.c: 34: printf("111\n");
   263  001038  0E12               	movlw	low STR_1
   264  00103A  6E05               	movwf	printf@f,c
   265  00103C  0E10               	movlw	high STR_1
   266  00103E  6E06               	movwf	printf@f+1,c
   267  001040  ECA4  F008         	call	_printf	;wreg free
   268                           
   269                           ;main.c: 35: lcdNewline();
   270  001044  ECD3  F008         	call	_lcdNewline	;wreg free
   271                           
   272                           ;main.c: 36: lcdNewline();
   273  001048  ECD3  F008         	call	_lcdNewline	;wreg free
   274                           
   275                           ;main.c: 37: printf("223");
   276  00104C  0E17               	movlw	low STR_2
   277  00104E  6E05               	movwf	printf@f,c
   278  001050  0E10               	movlw	high STR_2
   279  001052  6E06               	movwf	printf@f+1,c
   280  001054  ECA4  F008         	call	_printf	;wreg free
   281  001058                     l36:
   282  001058  A281               	btfss	3969,1,c	;volatile
   283  00105A  D7FE               	goto	l36
   284                           
   285                           ;main.c: 42: }
   286                           ;main.c: 43: unsigned char keypress = (PORTB & 0xF0)>>4;
   287  00105C  3881               	swapf	3969,w,c	;volatile
   288  00105E  0B0F               	andlw	15
   289  001060  0B0F               	andlw	15
   290  001062  6E0B               	movwf	main@keypress,c
   291  001064                     l39:
   292  001064  B281               	btfsc	3969,1,c	;volatile
   293  001066  D7FE               	goto	l39
   294                           
   295                           ;main.c: 47: }
   296                           ;main.c: 49: initLCD();
   297  001068  EC81  F008         	call	_initLCD	;wreg free
   298                           
   299                           ;main.c: 51: __nop();
   300  00106C  F000               	nop	
   301                           
   302                           ;main.c: 52: __nop();
   303  00106E  F000               	nop	
   304                           
   305                           ;main.c: 53: unsigned char temp = keys[keypress];
   306  001070  500B               	movf	main@keypress,w,c
   307  001072  0D01               	mullw	1
   308  001074  0E01               	movlw	low _keys
   309  001076  24F3               	addwf	prodl,w,c
   310  001078  6EF6               	movwf	tblptrl,c
   311  00107A  0E10               	movlw	high _keys
   312  00107C  20F4               	addwfc	prodh,w,c
   313  00107E  6EF7               	movwf	tblptrh,c
   314  001080                     	if	0	;There are less than 3 active tblptr bytes
   315  001080                     	endif
   316  001080  0008               	tblrd		*
   317  001082  CFF5 F00C          	movff	tablat,main@temp
   318                           
   319                           ;main.c: 54: putch(temp);
   320  001086  500C               	movf	main@temp,w,c
   321  001088  ECB9  F008         	call	_putch
   322                           
   323                           ;main.c: 56: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(8000000/4000.0)));};
   324  00108C  0E00               	movlw	0
   325  00108E  6E0D               	movwf	main@i,c
   326  001090                     l828:
   327  001090  0E63               	movlw	99
   328  001092  640D               	cpfsgt	main@i,c
   329  001094  D001               	goto	l832
   330  001096  D7CE               	goto	l804
   331  001098                     l832:
   332  001098  0E1A               	movlw	26
   333  00109A  6E0A               	movwf	??_main& (0+255),c
   334  00109C  0EF8               	movlw	248
   335  00109E                     u127:
   336  00109E  2EE8               	decfsz	wreg,f,c
   337  0010A0  D7FE               	bra	u127
   338  0010A2  2E0A               	decfsz	??_main& (0+255),f,c
   339  0010A4  D7FC               	bra	u127
   340  0010A6  D000               	nop2	
   341  0010A8  2A0D               	incf	main@i,f,c
   342  0010AA  D7F2               	goto	l828
   343  0010AC                     __end_of_main:
   344                           	opt stack 0
   345                           tblptru	equ	0xFF8
   346                           tblptrh	equ	0xFF7
   347                           tblptrl	equ	0xFF6
   348                           tablat	equ	0xFF5
   349                           prodh	equ	0xFF4
   350                           prodl	equ	0xFF3
   351                           wreg	equ	0xFE8
   352                           
   353 ;; *************** function _printf *****************
   354 ;; Defined at:
   355 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
   356 ;; Parameters:    Size  Location     Type
   357 ;;  f               2    4[COMRAM] PTR const unsigned char 
   358 ;;		 -> STR_2(4), STR_1(5), 
   359 ;; Auto vars:     Size  Location     Type
   360 ;;  tmpval          4    0        struct .
   361 ;;  cp              3    0        PTR const unsigned char 
   362 ;;  ap              2    6[COMRAM] PTR void [1]
   363 ;;		 -> ?_printf(2), 
   364 ;;  len             2    0        unsigned int 
   365 ;;  val             2    0        unsigned int 
   366 ;;  c               1    8[COMRAM] char 
   367 ;;  flag            1    0        unsigned char 
   368 ;;  prec            1    0        char 
   369 ;; Return value:  Size  Location     Type
   370 ;;                  2    4[COMRAM] int 
   371 ;; Registers used:
   372 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   373 ;; Tracked objects:
   374 ;;		On entry : 0/0
   375 ;;		On exit  : 0/0
   376 ;;		Unchanged: 0/0
   377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   378 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   379 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   381 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   382 ;;Total ram usage:        5 bytes
   383 ;; Hardware stack levels used:    1
   384 ;; Hardware stack levels required when called:    4
   385 ;; This function calls:
   386 ;;		_putch
   387 ;; This function is called by:
   388 ;;		_main
   389 ;; This function uses a non-reentrant model
   390 ;;
   391                           
   392                           	psect	text1
   393  001148                     __ptext1:
   394                           	opt stack 0
   395  001148                     _printf:
   396                           	opt stack 26
   397                           
   398                           ;doprnt.c: 466: va_list ap;
   399                           ;doprnt.c: 499: signed char c;
   400                           ;doprnt.c: 506: signed char prec;
   401                           ;doprnt.c: 508: unsigned char flag;
   402                           ;doprnt.c: 523: union {
   403                           ;doprnt.c: 524: unsigned long vd;
   404                           ;doprnt.c: 525: double integ;
   405                           ;doprnt.c: 526: } tmpval;
   406                           ;doprnt.c: 528: unsigned int val;
   407                           ;doprnt.c: 529: unsigned len;
   408                           ;doprnt.c: 530: const char * cp;
   409                           ;doprnt.c: 533: *ap = __va_start();
   410                           
   411                           ;incstack = 0
   412  001148  0E07               	movlw	low (?_printf+2)
   413  00114A  6E07               	movwf	printf@ap,c
   414  00114C  0E00               	movlw	high (?_printf+2)
   415  00114E  6E08               	movwf	printf@ap+1,c
   416                           
   417                           ;doprnt.c: 536: while(c = *f++) {
   418  001150  D003               	goto	l796
   419  001152                     l794:
   420                           
   421                           ;doprnt.c: 540: {
   422                           ;doprnt.c: 541: (putch(c) );
   423  001152  5009               	movf	printf@c,w,c
   424  001154  ECB9  F008         	call	_putch
   425  001158                     l796:
   426  001158  C005  FFF6         	movff	printf@f,tblptrl
   427  00115C  C006  FFF7         	movff	printf@f+1,tblptrh
   428  001160  4A05               	infsnz	printf@f,f,c
   429  001162  2A06               	incf	printf@f+1,f,c
   430  001164                     	if	0	;tblptru may be non-zero
   431  001164                     	endif
   432  001164                     	if	0	;tblptru may be non-zero
   433  001164                     	endif
   434  001164  0008               	tblrd		*
   435  001166  CFF5 F009          	movff	tablat,printf@c
   436  00116A  5009               	movf	printf@c,w,c
   437  00116C  B4D8               	btfsc	status,2,c
   438  00116E  0012               	return	
   439  001170  D7F0               	goto	l794
   440  001172                     __end_of_printf:
   441                           	opt stack 0
   442                           tblptru	equ	0xFF8
   443                           tblptrh	equ	0xFF7
   444                           tblptrl	equ	0xFF6
   445                           tablat	equ	0xFF5
   446                           prodh	equ	0xFF4
   447                           prodl	equ	0xFF3
   448                           wreg	equ	0xFE8
   449                           status	equ	0xFD8
   450                           
   451 ;; *************** function _putch *****************
   452 ;; Defined at:
   453 ;;		line 31 in file "lcd.c"
   454 ;; Parameters:    Size  Location     Type
   455 ;;  data            1    wreg     unsigned char 
   456 ;; Auto vars:     Size  Location     Type
   457 ;;  data            1    3[COMRAM] unsigned char 
   458 ;; Return value:  Size  Location     Type
   459 ;;                  1    wreg      void 
   460 ;; Registers used:
   461 ;;		wreg, status,2, status,0, cstack
   462 ;; Tracked objects:
   463 ;;		On entry : 0/0
   464 ;;		On exit  : 0/0
   465 ;;		Unchanged: 0/0
   466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   468 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   470 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   471 ;;Total ram usage:        1 bytes
   472 ;; Hardware stack levels used:    1
   473 ;; Hardware stack levels required when called:    3
   474 ;; This function calls:
   475 ;;		_lcdNewline
   476 ;;		_lcdNibble
   477 ;; This function is called by:
   478 ;;		_main
   479 ;;		_printf
   480 ;; This function uses a non-reentrant model
   481 ;;
   482                           
   483                           	psect	text2
   484  001172                     __ptext2:
   485                           	opt stack 0
   486  001172                     _putch:
   487                           	opt stack 27
   488                           
   489                           ;incstack = 0
   490                           ;putch@data stored from wreg
   491  001172  6E04               	movwf	putch@data,c
   492                           
   493                           ;lcd.c: 32: if(data == '\n')lcdNewline();
   494  001174  0E0A               	movlw	10
   495  001176  1804               	xorwf	putch@data,w,c
   496  001178  A4D8               	btfss	status,2,c
   497  00117A  D003               	goto	l67
   498  00117C  ECD3  F008         	call	_lcdNewline	;wreg free
   499  001180  0012               	return	
   500  001182                     l67:
   501                           
   502                           ;lcd.c: 33: else
   503                           ;lcd.c: 34: {
   504                           ;lcd.c: 35: LATDbits.LATD2 = 1;
   505  001182  848C               	bsf	3980,2,c	;volatile
   506                           
   507                           ;lcd.c: 36: lcdNibble(data);
   508  001184  5004               	movf	putch@data,w,c
   509  001186  EC56  F008         	call	_lcdNibble
   510  00118A  0012               	return	
   511  00118C                     __end_of_putch:
   512                           	opt stack 0
   513                           tblptru	equ	0xFF8
   514                           tblptrh	equ	0xFF7
   515                           tblptrl	equ	0xFF6
   516                           tablat	equ	0xFF5
   517                           prodh	equ	0xFF4
   518                           prodl	equ	0xFF3
   519                           wreg	equ	0xFE8
   520                           status	equ	0xFD8
   521                           
   522 ;; *************** function _lcdNewline *****************
   523 ;; Defined at:
   524 ;;		line 68 in file "lcd.c"
   525 ;; Parameters:    Size  Location     Type
   526 ;;		None
   527 ;; Auto vars:     Size  Location     Type
   528 ;;		None
   529 ;; Return value:  Size  Location     Type
   530 ;;                  1    wreg      void 
   531 ;; Registers used:
   532 ;;		wreg, status,2, status,0, cstack
   533 ;; Tracked objects:
   534 ;;		On entry : 0/0
   535 ;;		On exit  : 0/0
   536 ;;		Unchanged: 0/0
   537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   542 ;;Total ram usage:        0 bytes
   543 ;; Hardware stack levels used:    1
   544 ;; Hardware stack levels required when called:    2
   545 ;; This function calls:
   546 ;;		_lcdInst
   547 ;; This function is called by:
   548 ;;		_main
   549 ;;		_putch
   550 ;; This function uses a non-reentrant model
   551 ;;
   552                           
   553                           	psect	text3
   554  0011A6                     __ptext3:
   555                           	opt stack 0
   556  0011A6                     _lcdNewline:
   557                           	opt stack 27
   558                           
   559                           ;lcd.c: 69: lcdInst(0b11000000);
   560                           
   561                           ;incstack = 0
   562  0011A6  0EC0               	movlw	192
   563  0011A8  ECCD  F008         	call	_lcdInst
   564  0011AC  0012               	return		;funcret
   565  0011AE                     __end_of_lcdNewline:
   566                           	opt stack 0
   567                           tblptru	equ	0xFF8
   568                           tblptrh	equ	0xFF7
   569                           tblptrl	equ	0xFF6
   570                           tablat	equ	0xFF5
   571                           prodh	equ	0xFF4
   572                           prodl	equ	0xFF3
   573                           wreg	equ	0xFE8
   574                           status	equ	0xFD8
   575                           
   576 ;; *************** function _initLCD *****************
   577 ;; Defined at:
   578 ;;		line 14 in file "lcd.c"
   579 ;; Parameters:    Size  Location     Type
   580 ;;		None
   581 ;; Auto vars:     Size  Location     Type
   582 ;;		None
   583 ;; Return value:  Size  Location     Type
   584 ;;                  1    wreg      void 
   585 ;; Registers used:
   586 ;;		wreg, status,2, status,0, cstack
   587 ;; Tracked objects:
   588 ;;		On entry : 0/0
   589 ;;		On exit  : 0/0
   590 ;;		Unchanged: 0/0
   591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   594 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   595 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   596 ;;Total ram usage:        1 bytes
   597 ;; Hardware stack levels used:    1
   598 ;; Hardware stack levels required when called:    2
   599 ;; This function calls:
   600 ;;		_lcdInst
   601 ;; This function is called by:
   602 ;;		_main
   603 ;; This function uses a non-reentrant model
   604 ;;
   605                           
   606                           	psect	text4
   607  001102                     __ptext4:
   608                           	opt stack 0
   609  001102                     _initLCD:
   610                           	opt stack 28
   611                           
   612                           ;lcd.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
   613                           
   614                           ;incstack = 0
   615  001102  0E27               	movlw	39
   616  001104  6E04               	movwf	??_initLCD& (0+255),c
   617  001106  0EF5               	movlw	245
   618  001108                     u137:
   619  001108  2EE8               	decfsz	wreg,f,c
   620  00110A  D7FE               	bra	u137
   621  00110C  2E04               	decfsz	??_initLCD& (0+255),f,c
   622  00110E  D7FC               	bra	u137
   623  001110  F000               	nop	
   624                           
   625                           ;lcd.c: 16: lcdInst(0b00110011);
   626  001112  0E33               	movlw	51
   627  001114  ECCD  F008         	call	_lcdInst
   628                           
   629                           ;lcd.c: 17: lcdInst(0b00110010);
   630  001118  0E32               	movlw	50
   631  00111A  ECCD  F008         	call	_lcdInst
   632                           
   633                           ;lcd.c: 18: lcdInst(0b00101000);
   634  00111E  0E28               	movlw	40
   635  001120  ECCD  F008         	call	_lcdInst
   636                           
   637                           ;lcd.c: 19: lcdInst(0b00001111);
   638  001124  0E0F               	movlw	15
   639  001126  ECCD  F008         	call	_lcdInst
   640                           
   641                           ;lcd.c: 20: lcdInst(0b00000110);
   642  00112A  0E06               	movlw	6
   643  00112C  ECCD  F008         	call	_lcdInst
   644                           
   645                           ;lcd.c: 21: lcdInst(0b00000001);
   646  001130  0E01               	movlw	1
   647  001132  ECCD  F008         	call	_lcdInst
   648                           
   649                           ;lcd.c: 22: _delay((unsigned long)((15)*(8000000/4000.0)));
   650  001136  0E27               	movlw	39
   651  001138  6E04               	movwf	??_initLCD& (0+255),c
   652  00113A  0EF5               	movlw	245
   653  00113C                     u147:
   654  00113C  2EE8               	decfsz	wreg,f,c
   655  00113E  D7FE               	bra	u147
   656  001140  2E04               	decfsz	??_initLCD& (0+255),f,c
   657  001142  D7FC               	bra	u147
   658  001144  F000               	nop	
   659  001146  0012               	return		;funcret
   660  001148                     __end_of_initLCD:
   661                           	opt stack 0
   662                           tblptru	equ	0xFF8
   663                           tblptrh	equ	0xFF7
   664                           tblptrl	equ	0xFF6
   665                           tablat	equ	0xFF5
   666                           prodh	equ	0xFF4
   667                           prodl	equ	0xFF3
   668                           wreg	equ	0xFE8
   669                           status	equ	0xFD8
   670                           
   671 ;; *************** function _lcdInst *****************
   672 ;; Defined at:
   673 ;;		line 25 in file "lcd.c"
   674 ;; Parameters:    Size  Location     Type
   675 ;;  data            1    wreg     unsigned char 
   676 ;; Auto vars:     Size  Location     Type
   677 ;;  data            1    2[COMRAM] unsigned char 
   678 ;; Return value:  Size  Location     Type
   679 ;;                  1    wreg      void 
   680 ;; Registers used:
   681 ;;		wreg, status,2, status,0, cstack
   682 ;; Tracked objects:
   683 ;;		On entry : 0/0
   684 ;;		On exit  : 0/0
   685 ;;		Unchanged: 0/0
   686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   688 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   690 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   691 ;;Total ram usage:        1 bytes
   692 ;; Hardware stack levels used:    1
   693 ;; Hardware stack levels required when called:    1
   694 ;; This function calls:
   695 ;;		_lcdNibble
   696 ;; This function is called by:
   697 ;;		_initLCD
   698 ;;		_lcdNewline
   699 ;;		_lcdClear
   700 ;; This function uses a non-reentrant model
   701 ;;
   702                           
   703                           	psect	text5
   704  00119A                     __ptext5:
   705                           	opt stack 0
   706  00119A                     _lcdInst:
   707                           	opt stack 27
   708                           
   709                           ;incstack = 0
   710                           ;lcdInst@data stored from wreg
   711  00119A  6E03               	movwf	lcdInst@data,c
   712                           
   713                           ;lcd.c: 26: LATDbits.LATD2 = 0;
   714  00119C  948C               	bcf	3980,2,c	;volatile
   715                           
   716                           ;lcd.c: 27: lcdNibble(data);
   717  00119E  5003               	movf	lcdInst@data,w,c
   718  0011A0  EC56  F008         	call	_lcdNibble
   719  0011A4  0012               	return		;funcret
   720  0011A6                     __end_of_lcdInst:
   721                           	opt stack 0
   722                           tblptru	equ	0xFF8
   723                           tblptrh	equ	0xFF7
   724                           tblptrl	equ	0xFF6
   725                           tablat	equ	0xFF5
   726                           prodh	equ	0xFF4
   727                           prodl	equ	0xFF3
   728                           wreg	equ	0xFE8
   729                           status	equ	0xFD8
   730                           
   731 ;; *************** function _lcdNibble *****************
   732 ;; Defined at:
   733 ;;		line 40 in file "lcd.c"
   734 ;; Parameters:    Size  Location     Type
   735 ;;  data            1    wreg     unsigned char 
   736 ;; Auto vars:     Size  Location     Type
   737 ;;  data            1    1[COMRAM] unsigned char 
   738 ;;  temp            1    0[COMRAM] unsigned char 
   739 ;; Return value:  Size  Location     Type
   740 ;;                  1    wreg      void 
   741 ;; Registers used:
   742 ;;		wreg, status,2, status,0
   743 ;; Tracked objects:
   744 ;;		On entry : 0/0
   745 ;;		On exit  : 0/0
   746 ;;		Unchanged: 0/0
   747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   749 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   751 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   752 ;;Total ram usage:        2 bytes
   753 ;; Hardware stack levels used:    1
   754 ;; This function calls:
   755 ;;		Nothing
   756 ;; This function is called by:
   757 ;;		_lcdInst
   758 ;;		_putch
   759 ;; This function uses a non-reentrant model
   760 ;;
   761                           
   762                           	psect	text6
   763  0010AC                     __ptext6:
   764                           	opt stack 0
   765  0010AC                     _lcdNibble:
   766                           	opt stack 29
   767                           
   768                           ;incstack = 0
   769                           ;lcdNibble@data stored from wreg
   770  0010AC  6E02               	movwf	lcdNibble@data,c
   771                           
   772                           ;lcd.c: 42: char temp = data & 0xF0;
   773  0010AE  5002               	movf	lcdNibble@data,w,c
   774  0010B0  0BF0               	andlw	240
   775  0010B2  6E01               	movwf	lcdNibble@temp,c
   776                           
   777                           ;lcd.c: 43: LATD = LATD & 0x0F;
   778  0010B4  508C               	movf	3980,w,c	;volatile
   779  0010B6  0B0F               	andlw	15
   780  0010B8  6E8C               	movwf	3980,c	;volatile
   781                           
   782                           ;lcd.c: 44: LATD = temp | LATD;
   783  0010BA  5001               	movf	lcdNibble@temp,w,c
   784  0010BC  108C               	iorwf	3980,w,c	;volatile
   785  0010BE  6E8C               	movwf	3980,c	;volatile
   786                           
   787                           ;lcd.c: 46: LATDbits.LATD3 = 0;
   788  0010C0  968C               	bcf	3980,3,c	;volatile
   789                           
   790                           ;lcd.c: 47: _delay((unsigned long)((25)*(8000000/4000000.0)));
   791  0010C2  0E10               	movlw	16
   792  0010C4                     u157:
   793  0010C4  2EE8               	decfsz	wreg,f,c
   794  0010C6  D7FE               	bra	u157
   795  0010C8  D000               	nop2	
   796                           
   797                           ;lcd.c: 48: LATDbits.LATD3 = 1;
   798  0010CA  868C               	bsf	3980,3,c	;volatile
   799                           
   800                           ;lcd.c: 49: _delay((unsigned long)((25)*(8000000/4000000.0)));
   801  0010CC  0E10               	movlw	16
   802  0010CE                     u167:
   803  0010CE  2EE8               	decfsz	wreg,f,c
   804  0010D0  D7FE               	bra	u167
   805  0010D2  D000               	nop2	
   806                           
   807                           ;lcd.c: 51: data = data << 4;
   808  0010D4  3802               	swapf	lcdNibble@data,w,c
   809  0010D6  0BF0               	andlw	240
   810  0010D8  6E02               	movwf	lcdNibble@data,c
   811                           
   812                           ;lcd.c: 53: temp = data & 0xF0;
   813  0010DA  5002               	movf	lcdNibble@data,w,c
   814  0010DC  0BF0               	andlw	240
   815  0010DE  6E01               	movwf	lcdNibble@temp,c
   816                           
   817                           ;lcd.c: 54: LATD = LATD & 0x0F;
   818  0010E0  508C               	movf	3980,w,c	;volatile
   819  0010E2  0B0F               	andlw	15
   820  0010E4  6E8C               	movwf	3980,c	;volatile
   821                           
   822                           ;lcd.c: 55: LATD = temp | LATD;
   823  0010E6  5001               	movf	lcdNibble@temp,w,c
   824  0010E8  108C               	iorwf	3980,w,c	;volatile
   825  0010EA  6E8C               	movwf	3980,c	;volatile
   826                           
   827                           ;lcd.c: 57: LATDbits.LATD3 = 0;
   828  0010EC  968C               	bcf	3980,3,c	;volatile
   829                           
   830                           ;lcd.c: 58: _delay((unsigned long)((25)*(8000000/4000000.0)));
   831  0010EE  0E10               	movlw	16
   832  0010F0                     u177:
   833  0010F0  2EE8               	decfsz	wreg,f,c
   834  0010F2  D7FE               	bra	u177
   835  0010F4  D000               	nop2	
   836                           
   837                           ;lcd.c: 59: LATDbits.LATD3 = 1;
   838  0010F6  868C               	bsf	3980,3,c	;volatile
   839                           
   840                           ;lcd.c: 60: _delay((unsigned long)((25)*(8000000/4000000.0)));
   841  0010F8  0E10               	movlw	16
   842  0010FA                     u187:
   843  0010FA  2EE8               	decfsz	wreg,f,c
   844  0010FC  D7FE               	bra	u187
   845  0010FE  D000               	nop2	
   846  001100  0012               	return		;funcret
   847  001102                     __end_of_lcdNibble:
   848                           	opt stack 0
   849                           tblptru	equ	0xFF8
   850                           tblptrh	equ	0xFF7
   851                           tblptrl	equ	0xFF6
   852                           tablat	equ	0xFF5
   853                           prodh	equ	0xFF4
   854                           prodl	equ	0xFF3
   855                           wreg	equ	0xFE8
   856                           status	equ	0xFD8
   857                           tblptru	equ	0xFF8
   858                           tblptrh	equ	0xFF7
   859                           tblptrl	equ	0xFF6
   860                           tablat	equ	0xFF5
   861                           prodh	equ	0xFF4
   862                           prodl	equ	0xFF3
   863                           wreg	equ	0xFE8
   864                           status	equ	0xFD8
   865                           
   866                           	psect	rparam
   867  0000                     tblptru	equ	0xFF8
   868                           tblptrh	equ	0xFF7
   869                           tblptrl	equ	0xFF6
   870                           tablat	equ	0xFF5
   871                           prodh	equ	0xFF4
   872                           prodl	equ	0xFF3
   873                           wreg	equ	0xFE8
   874                           status	equ	0xFD8


Data Sizes:
    Strings     9
    Constant    17
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     13      13
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[4]), STR_1(CODE[5]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->_putch
    _lcdNewline->_lcdInst
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     836
                                              9 COMRAM     4     4      0
                            _initLCD
                         _lcdNewline
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     369
                                              4 COMRAM     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0     195
                                              3 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _lcdNewline                                           0     0      0      90
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdNewline
     _lcdInst
       _lcdNibble
   _printf
     _putch
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
   _putch
     _lcdNewline
       _lcdInst
         _lcdNibble
     _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F      D       D       1       10.2%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
ABS                  0      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BIGRAM             F7F      0       0      37        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Feb 18 13:13:13 2017

                     l36 1058                       l39 1064                       l67 1182  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000              __CFG_OSC$HS 000000  
                    l804 1034                      l832 1098                      l828 1090  
                    l794 1152                      l796 1158             __CFG_CPB$OFF 000000  
                    u127 109E                      u137 1108                      u147 113C  
                    u157 10C4                      u167 10CE                      u177 10F0  
           __CFG_CPD$OFF 000000                      u187 10FA                      wreg 000FE8  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     STR_1 1012  
                   STR_2 1017                     _LATB 000F8A                     _LATC 000F8B  
                   _LATD 000F8C                     _main 101C                     _keys 1001  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
                  ?_main 0001                    _PORTB 000F81                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000          __end_of_lcdInst 11A6           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
           main@keypress 000B           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000          __end_of_initLCD 1148  
         __CFG_EBTRB$OFF 000000                    _putch 1172                    main@i 000D  
                  tablat 000FF5                    status 000FD8           __CFG_PBADEN$ON 000000  
        __initialization 118C             __end_of_main 10AC             __end_of_keys 1012  
                 ??_main 000A            __activetblptr 000001                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   ?_putch 0001           __CFG_XINST$OFF 000000  
         __CFG_STVREN$ON 000000                ??_lcdInst 0003                   _printf 1148  
              ??_initLCD 0004             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8               __accesstop 0080  
__end_of__initialization 118C            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_putch 118C       __size_of_lcdNibble 0056                  ??_putch 0004  
             _lcdNewline 11A6                  ?_printf 0005        __end_of_lcdNibble 1102  
                __Hparam 0000                  __Lparam 0000             __psmallconst 1000  
                __pcinit 118C                  __ramtop 1000                  _lcdInst 119A  
                __ptext0 101C                  __ptext1 1148                  __ptext2 1172  
                __ptext3 11A6                  __ptext4 1102                  __ptext5 119A  
                __ptext6 10AC          __size_of_printf 002A                  _initLCD 1102  
   end_of_initialization 118C                  printf@c 0009                  printf@f 0005  
            ?_lcdNewline 0001                _PORTBbits 000F81           __end_of_printf 1172  
    start_initialization 118C      __size_of_lcdNewline 0008         __CFG_LPT1OSC$OFF 000000  
               ??_printf 0007        __CFG_CCP2MX$PORTC 000000                _lcdNibble 10AC  
               ?_lcdInst 0001                 ?_initLCD 0001              __smallconst 1000  
         __size_of_putch 001A                 _LATDbits 000F8C         __CFG_WDTPS$32768 000000  
             ?_lcdNibble 0001             ??_lcdNewline 0004            lcdNibble@data 0002  
          lcdNibble@temp 0001       __end_of_lcdNewline 11AE                 __Hrparam 0000  
               __Lrparam 0000             __Lsmallconst 1000       __CFG_BOREN$SBORDIS 000000  
       __size_of_lcdInst 000C         __size_of_initLCD 0046            __size_of_main 0090  
            ??_lcdNibble 0001                 main@temp 000C                putch@data 0004  
               printf@ap 0007              lcdInst@data 0003  
