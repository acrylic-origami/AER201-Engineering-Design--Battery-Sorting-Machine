

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Apr 10 10:09:48 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    84                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    91                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    92                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    93  0000                     
    94                           ; Version 1.40
    95                           ; Generated 01/12/2016 GMT
    96                           ; 
    97                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    98                           ; All rights reserved.
    99                           ; 
   100                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   101                           ; 
   102                           ; Redistribution and use in source and binary forms, with or without modification, are
   103                           ; permitted provided that the following conditions are met:
   104                           ; 
   105                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   106                           ;        conditions and the following disclaimer.
   107                           ; 
   108                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   109                           ;        of conditions and the following disclaimer in the documentation and/or other
   110                           ;        materials provided with the distribution.
   111                           ; 
   112                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   113                           ;        software without specific prior written permission.
   114                           ; 
   115                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   116                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   117                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   118                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   119                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   120                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   121                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   122                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   123                           ; 
   124                           ; 
   125                           ; Code-generator required, PIC18F4620 Definitions
   126                           ; 
   127                           ; SFR Addresses
   128  0000                     
   129                           	psect	idataCOMRAM
   130  0041A2                     __pidataCOMRAM:
   131                           	opt stack 0
   132                           
   133                           ;initializer for _V_LIM_9V
   134  0041A2  33                 	db	51
   135  0041A3  A3                 	db	163
   136  0041A4  3F                 	db	63
   137                           
   138                           ;initializer for _V_LIM_AA
   139  0041A5  EC                 	db	236
   140  0041A6  D1                 	db	209
   141  0041A7  3E                 	db	62
   142                           
   143                           ;initializer for _V_LIM_C
   144  0041A8  33                 	db	51
   145  0041A9  13                 	db	19
   146  0041AA  40                 	db	64
   147                           
   148                           ;initializer for _angle
   149  0041AB  005A               	dw	90
   150                           
   151                           ;initializer for _padAngle_CLOSE
   152  0041AD  0046               	dw	70
   153                           
   154                           ;initializer for _padAngle_OPEN
   155  0041AF  00B4               	dw	180
   156                           
   157                           ;initializer for _redirectAngle_9V
   158  0041B1  0076               	dw	118
   159                           
   160                           ;initializer for _redirectAngle_C
   161  0041B3  00A6               	dw	166
   162                           
   163                           ;initializer for _AA_float
   164  0041B5  0002               	dw	2
   165  0041B7  0005               	dw	5
   166                           
   167                           	psect	idataBANK0
   168  004220                     __pidataBANK0:
   169                           	opt stack 0
   170                           
   171                           ;initializer for _redirectAngle_OTHER
   172  004220  0099               	dw	153
   173                           
   174                           	psect	idataBANK1
   175  00404A                     __pidataBANK1:
   176                           	opt stack 0
   177                           
   178                           ;initializer for _cylinderBackward
   179  00404A  001E               	dw	30
   180                           
   181                           ;initializer for _cylinderForward
   182  00404C  0046               	dw	70
   183                           
   184                           ;initializer for _padAngle_NEUTRAL
   185  00404E  0082               	dw	130
   186                           
   187                           ;initializer for _redirectAngle_AA
   188  004050  008A               	dw	138
   189                           
   190                           ;initializer for _stoppingTime
   191  004052  00C8               	dw	200
   192                           
   193                           ;initializer for _conveyorServo
   194  004054  0002               	dw	2
   195  004056  0000               	dw	0
   196                           
   197                           ;initializer for _cylinderMotor1
   198  004058  0003               	dw	3
   199  00405A  0000               	dw	0
   200                           
   201                           ;initializer for _cylinderMotor2
   202  00405C  0003               	dw	3
   203  00405E  0001               	dw	1
   204                           
   205                           ;initializer for _padPin1
   206  004060  0002               	dw	2
   207  004062  0006               	dw	6
   208                           
   209                           ;initializer for _padPin2
   210  004064  0002               	dw	2
   211  004066  0007               	dw	7
   212                           
   213                           ;initializer for _padServo
   214  004068  0002               	dw	2
   215  00406A  0001               	dw	1
   216                           
   217                           ;initializer for _redirectingServo
   218  00406C  0002               	dw	2
   219  00406E  0002               	dw	2
   220                           
   221                           	psect	mediumconst
   222  00FDBA                     __pmediumconst:
   223                           	opt stack 0
   224  00FDBA  00                 	db	0
   225  00FDBB                     _dpowers:
   226                           	opt stack 0
   227  00FDBB  0001               	dw	1
   228  00FDBD  0000               	dw	0
   229  00FDBF  000A               	dw	10
   230  00FDC1  0000               	dw	0
   231  00FDC3  0064               	dw	100
   232  00FDC5  0000               	dw	0
   233  00FDC7  03E8               	dw	1000
   234  00FDC9  0000               	dw	0
   235  00FDCB  2710               	dw	10000
   236  00FDCD  0000               	dw	0
   237  00FDCF  86A0               	dw	34464
   238  00FDD1  0001               	dw	1
   239  00FDD3  4240               	dw	16960
   240  00FDD5  000F               	dw	15
   241  00FDD7  9680               	dw	38528
   242  00FDD9  0098               	dw	152
   243  00FDDB  E100               	dw	57600
   244  00FDDD  05F5               	dw	1525
   245  00FDDF  CA00               	dw	51712
   246  00FDE1  3B9A               	dw	15258
   247  00FDE3                     __end_of_dpowers:
   248                           	opt stack 0
   249  00FDE3                     __npowers_:
   250                           	opt stack 0
   251  00FDE3  00                 	db	0
   252  00FDE4  80                 	db	128
   253  00FDE5  3F                 	db	63
   254  00FDE6  CD                 	db	205
   255  00FDE7  CC                 	db	204
   256  00FDE8  3D                 	db	61
   257  00FDE9  D7                 	db	215
   258  00FDEA  23                 	db	35
   259  00FDEB  3C                 	db	60
   260  00FDEC  12                 	db	18
   261  00FDED  83                 	db	131
   262  00FDEE  3A                 	db	58
   263  00FDEF  B7                 	db	183
   264  00FDF0  D1                 	db	209
   265  00FDF1  38                 	db	56
   266  00FDF2  C6                 	db	198
   267  00FDF3  27                 	db	39
   268  00FDF4  37                 	db	55
   269  00FDF5  38                 	db	56
   270  00FDF6  86                 	db	134
   271  00FDF7  35                 	db	53
   272  00FDF8  C0                 	db	192
   273  00FDF9  D6                 	db	214
   274  00FDFA  33                 	db	51
   275  00FDFB  CC                 	db	204
   276  00FDFC  2B                 	db	43
   277  00FDFD  32                 	db	50
   278  00FDFE  70                 	db	112
   279  00FDFF  89                 	db	137
   280  00FE00  30                 	db	48
   281  00FE01  E7                 	db	231
   282  00FE02  DB                 	db	219
   283  00FE03  2E                 	db	46
   284  00FE04  E5                 	db	229
   285  00FE05  3C                 	db	60
   286  00FE06  1E                 	db	30
   287  00FE07  42                 	db	66
   288  00FE08  A2                 	db	162
   289  00FE09  0D                 	db	13
   290  00FE0A                     __end_of__npowers_:
   291                           	opt stack 0
   292  00FE0A                     __powers_:
   293                           	opt stack 0
   294  00FE0A  00                 	db	0
   295  00FE0B  80                 	db	128
   296  00FE0C  3F                 	db	63
   297  00FE0D  00                 	db	0
   298  00FE0E  20                 	db	32
   299  00FE0F  41                 	db	65
   300  00FE10  00                 	db	0
   301  00FE11  C8                 	db	200
   302  00FE12  42                 	db	66
   303  00FE13  00                 	db	0
   304  00FE14  7A                 	db	122
   305  00FE15  44                 	db	68
   306  00FE16  40                 	db	64
   307  00FE17  1C                 	db	28
   308  00FE18  46                 	db	70
   309  00FE19  50                 	db	80
   310  00FE1A  C3                 	db	195
   311  00FE1B  47                 	db	71
   312  00FE1C  24                 	db	36
   313  00FE1D  74                 	db	116
   314  00FE1E  49                 	db	73
   315  00FE1F  97                 	db	151
   316  00FE20  18                 	db	24
   317  00FE21  4B                 	db	75
   318  00FE22  BC                 	db	188
   319  00FE23  BE                 	db	190
   320  00FE24  4C                 	db	76
   321  00FE25  6B                 	db	107
   322  00FE26  6E                 	db	110
   323  00FE27  4E                 	db	78
   324  00FE28  03                 	db	3
   325  00FE29  15                 	db	21
   326  00FE2A  50                 	db	80
   327  00FE2B  79                 	db	121
   328  00FE2C  AD                 	db	173
   329  00FE2D  60                 	db	96
   330  00FE2E  F3                 	db	243
   331  00FE2F  49                 	db	73
   332  00FE30  71                 	db	113
   333  00FE31                     __end_of__powers_:
   334                           	opt stack 0
   335  00FE31                     _hexpowers:
   336                           	opt stack 0
   337  00FE31  0001               	dw	1
   338  00FE33  0000               	dw	0
   339  00FE35  0010               	dw	16
   340  00FE37  0000               	dw	0
   341  00FE39  0100               	dw	256
   342  00FE3B  0000               	dw	0
   343  00FE3D  1000               	dw	4096
   344  00FE3F  0000               	dw	0
   345  00FE41  0000               	dw	0
   346  00FE43  0001               	dw	1
   347  00FE45  0000               	dw	0
   348  00FE47  0010               	dw	16
   349  00FE49  0000               	dw	0
   350  00FE4B  0100               	dw	256
   351  00FE4D  0000               	dw	0
   352  00FE4F  1000               	dw	4096
   353  00FE51                     __end_of_hexpowers:
   354                           	opt stack 0
   355  00FE51                     _keys:
   356                           	opt stack 0
   357  00FE51  31                 	db	49
   358  00FE52  32                 	db	50
   359  00FE53  33                 	db	51
   360  00FE54  41                 	db	65
   361  00FE55  34                 	db	52
   362  00FE56  35                 	db	53
   363  00FE57  36                 	db	54
   364  00FE58  42                 	db	66
   365  00FE59  37                 	db	55
   366  00FE5A  38                 	db	56
   367  00FE5B  39                 	db	57
   368  00FE5C  43                 	db	67
   369  00FE5D  2A                 	db	42
   370  00FE5E  30                 	db	48
   371  00FE5F  23                 	db	35
   372  00FE60  44                 	db	68
   373  00FE61  00                 	db	0
   374  00FE62                     __end_of_keys:
   375                           	opt stack 0
   376  00FE62                     _happynewyear:
   377                           	opt stack 0
   378  00FE62  00                 	db	0
   379  00FE63  00                 	db	0
   380  00FE64  00                 	db	0
   381  00FE65  01                 	db	1
   382  00FE66  08                 	db	8
   383  00FE67  04                 	db	4
   384  00FE68  17                 	db	23
   385  00FE69                     __end_of_happynewyear:
   386                           	opt stack 0
   387  0000                     _ADCON0	set	4034
   388  0000                     _ADCON1	set	4033
   389  0000                     _ADCON2	set	4032
   390  0000                     _ADRESH	set	4036
   391  0000                     _ADRESL	set	4035
   392  0000                     _EEADR	set	4009
   393  0000                     _EEADRH	set	4010
   394  0000                     _EECON1	set	4006
   395  0000                     _EECON2	set	4007
   396  0000                     _EEDATA	set	4008
   397  0000                     _INTCONbits	set	4082
   398  0000                     _LATA	set	3977
   399  0000                     _LATB	set	3978
   400  0000                     _LATC	set	3979
   401  0000                     _LATD	set	3980
   402  0000                     _LATDbits	set	3980
   403  0000                     _LATE	set	3981
   404  0000                     _PORTA	set	3968
   405  0000                     _PORTB	set	3969
   406  0000                     _PORTBbits	set	3969
   407  0000                     _PORTC	set	3970
   408  0000                     _PORTD	set	3971
   409  0000                     _SSPADD	set	4040
   410  0000                     _SSPBUF	set	4041
   411  0000                     _SSPCON1	set	4038
   412  0000                     _SSPCON2	set	4037
   413  0000                     _SSPSTAT	set	4039
   414  0000                     _T0CON	set	4053
   415  0000                     _T1CON	set	4045
   416  0000                     _T3CON	set	4017
   417  0000                     _TMR0H	set	4055
   418  0000                     _TMR0L	set	4054
   419  0000                     _TMR1H	set	4047
   420  0000                     _TMR1L	set	4046
   421  0000                     _TMR3H	set	4019
   422  0000                     _TMR3L	set	4018
   423  0000                     _TRISA	set	3986
   424  0000                     _TRISB	set	3987
   425  0000                     _TRISC	set	3988
   426  0000                     _TRISD	set	3989
   427  0000                     _TRISE	set	3990
   428  0000                     _ACKDT	set	32301
   429  0000                     _ACKEN	set	32300
   430  0000                     _EEIF	set	32012
   431  0000                     _INT0IE	set	32660
   432  0000                     _INT0IF	set	32657
   433  0000                     _INT1IE	set	32643
   434  0000                     _INT1IF	set	32640
   435  0000                     _PEIE	set	32662
   436  0000                     _PEN	set	32298
   437  0000                     _RCEN	set	32299
   438  0000                     _RSEN	set	32297
   439  0000                     _SEN	set	32296
   440  0000                     _TMR0IE	set	32661
   441  0000                     _TMR0IF	set	32658
   442  0000                     _TMR1IE	set	31976
   443  0000                     _TMR1IF	set	31984
   444  0000                     _TMR3IE	set	32001
   445  0000                     _TRISC3	set	31907
   446  0000                     _TRISC4	set	31908
   447  00FE69                     STR_4:
   448  00FE69  73                 	db	115	;'s'
   449  00FE6A  74                 	db	116	;'t'
   450  00FE6B  6F                 	db	111	;'o'
   451  00FE6C  70                 	db	112	;'p'
   452  00FE6D  20                 	db	32
   453  00FE6E  69                 	db	105	;'i'
   454  00FE6F  6E                 	db	110	;'n'
   455  00FE70  3A                 	db	58	;':'
   456  00FE71  20                 	db	32
   457  00FE72  25                 	db	37
   458  00FE73  64                 	db	100	;'d'
   459  00FE74  20                 	db	32
   460  00FE75  20                 	db	32
   461  00FE76  20                 	db	32
   462  00FE77  20                 	db	32
   463  00FE78  20                 	db	32
   464  00FE79  20                 	db	32
   465  00FE7A  20                 	db	32
   466  00FE7B  20                 	db	32
   467  00FE7C  20                 	db	32
   468  00FE7D  20                 	db	32
   469  00FE7E  20                 	db	32
   470  00FE7F  20                 	db	32
   471  00FE80  20                 	db	32
   472  00FE81  20                 	db	32
   473  00FE82  20                 	db	32
   474  00FE83  20                 	db	32
   475  00FE84  20                 	db	32
   476  00FE85  20                 	db	32
   477  00FE86  00                 	db	0
   478  00FE87                     STR_3:
   479  00FE87  74                 	db	116	;'t'
   480  00FE88  69                 	db	105	;'i'
   481  00FE89  6D                 	db	109	;'m'
   482  00FE8A  65                 	db	101	;'e'
   483  00FE8B  20                 	db	32
   484  00FE8C  25                 	db	37
   485  00FE8D  30                 	db	48	;'0'
   486  00FE8E  32                 	db	50	;'2'
   487  00FE8F  6C                 	db	108	;'l'
   488  00FE90  64                 	db	100	;'d'
   489  00FE91  3A                 	db	58	;':'
   490  00FE92  25                 	db	37
   491  00FE93  30                 	db	48	;'0'
   492  00FE94  32                 	db	50	;'2'
   493  00FE95  6C                 	db	108	;'l'
   494  00FE96  64                 	db	100	;'d'
   495  00FE97  2E                 	db	46
   496  00FE98  25                 	db	37
   497  00FE99  30                 	db	48	;'0'
   498  00FE9A  31                 	db	49	;'1'
   499  00FE9B  6C                 	db	108	;'l'
   500  00FE9C  64                 	db	100	;'d'
   501  00FE9D  20                 	db	32
   502  00FE9E  20                 	db	32
   503  00FE9F  20                 	db	32
   504  00FEA0  20                 	db	32
   505  00FEA1  20                 	db	32
   506  00FEA2  0A                 	db	10
   507  00FEA3  00                 	db	0
   508  00FEA4                     STR_18:
   509  00FEA4  74                 	db	116	;'t'
   510  00FEA5  69                 	db	105	;'i'
   511  00FEA6  6D                 	db	109	;'m'
   512  00FEA7  65                 	db	101	;'e'
   513  00FEA8  20                 	db	32
   514  00FEA9  25                 	db	37
   515  00FEAA  30                 	db	48	;'0'
   516  00FEAB  32                 	db	50	;'2'
   517  00FEAC  6C                 	db	108	;'l'
   518  00FEAD  64                 	db	100	;'d'
   519  00FEAE  3A                 	db	58	;':'
   520  00FEAF  25                 	db	37
   521  00FEB0  30                 	db	48	;'0'
   522  00FEB1  32                 	db	50	;'2'
   523  00FEB2  6C                 	db	108	;'l'
   524  00FEB3  64                 	db	100	;'d'
   525  00FEB4  2E                 	db	46
   526  00FEB5  25                 	db	37
   527  00FEB6  30                 	db	48	;'0'
   528  00FEB7  31                 	db	49	;'1'
   529  00FEB8  6C                 	db	108	;'l'
   530  00FEB9  64                 	db	100	;'d'
   531  00FEBA  0A                 	db	10
   532  00FEBB  00                 	db	0
   533  00FEBC                     STR_11:
   534  00FEBC  20                 	db	32
   535  00FEBD  20                 	db	32
   536  00FEBE  20                 	db	32
   537  00FEBF  25                 	db	37
   538  00FEC0  30                 	db	48	;'0'
   539  00FEC1  32                 	db	50	;'2'
   540  00FEC2  78                 	db	120	;'x'
   541  00FEC3  3A                 	db	58	;':'
   542  00FEC4  25                 	db	37
   543  00FEC5  30                 	db	48	;'0'
   544  00FEC6  32                 	db	50	;'2'
   545  00FEC7  78                 	db	120	;'x'
   546  00FEC8  3A                 	db	58	;':'
   547  00FEC9  25                 	db	37
   548  00FECA  30                 	db	48	;'0'
   549  00FECB  32                 	db	50	;'2'
   550  00FECC  78                 	db	120	;'x'
   551  00FECD  20                 	db	32
   552  00FECE  20                 	db	32
   553  00FECF  20                 	db	32
   554  00FED0  41                 	db	65	;'A'
   555  00FED1  3E                 	db	62	;'>'
   556  00FED2  00                 	db	0
   557  00FED3                     STR_10:
   558  00FED3  20                 	db	32
   559  00FED4  20                 	db	32
   560  00FED5  32                 	db	50	;'2'
   561  00FED6  30                 	db	48	;'0'
   562  00FED7  25                 	db	37
   563  00FED8  30                 	db	48	;'0'
   564  00FED9  32                 	db	50	;'2'
   565  00FEDA  78                 	db	120	;'x'
   566  00FEDB  2F                 	db	47
   567  00FEDC  25                 	db	37
   568  00FEDD  30                 	db	48	;'0'
   569  00FEDE  32                 	db	50	;'2'
   570  00FEDF  78                 	db	120	;'x'
   571  00FEE0  2F                 	db	47
   572  00FEE1  25                 	db	37
   573  00FEE2  30                 	db	48	;'0'
   574  00FEE3  32                 	db	50	;'2'
   575  00FEE4  78                 	db	120	;'x'
   576  00FEE5  0A                 	db	10
   577  00FEE6  00                 	db	0
   578  00FEE7                     STR_16:
   579  00FEE7  25                 	db	37
   580  00FEE8  63                 	db	99	;'c'
   581  00FEE9  29                 	db	41
   582  00FEEA  20                 	db	32
   583  00FEEB  74                 	db	116	;'t'
   584  00FEEC  69                 	db	105	;'i'
   585  00FEED  6D                 	db	109	;'m'
   586  00FEEE  65                 	db	101	;'e'
   587  00FEEF  20                 	db	32
   588  00FEF0  20                 	db	32
   589  00FEF1  3C                 	db	60	;'<'
   590  00FEF2  41                 	db	65	;'A'
   591  00FEF3  20                 	db	32
   592  00FEF4  20                 	db	32
   593  00FEF5  20                 	db	32
   594  00FEF6  20                 	db	32
   595  00FEF7  20                 	db	32
   596  00FEF8  0A                 	db	10
   597  00FEF9  00                 	db	0
   598  00FEFA                     STR_21:
   599  00FEFA  5B                 	db	91	;'['
   600  00FEFB  25                 	db	37
   601  00FEFC  64                 	db	100	;'d'
   602  00FEFD  2C                 	db	44
   603  00FEFE  25                 	db	37
   604  00FEFF  64                 	db	100	;'d'
   605  00FF00  2C                 	db	44
   606  00FF01  25                 	db	37
   607  00FF02  64                 	db	100	;'d'
   608  00FF03  2C                 	db	44
   609  00FF04  25                 	db	37
   610  00FF05  64                 	db	100	;'d'
   611  00FF06  5D                 	db	93	;']'
   612  00FF07  20                 	db	32
   613  00FF08  20                 	db	32
   614  00FF09  20                 	db	32
   615  00FF0A  2A                 	db	42
   616  00FF0B  3E                 	db	62	;'>'
   617  00FF0C  00                 	db	0
   618  00FF0D                     STR_12:
   619  00FF0D  73                 	db	115	;'s'
   620  00FF0E  74                 	db	116	;'t'
   621  00FF0F  61                 	db	97	;'a'
   622  00FF10  72                 	db	114	;'r'
   623  00FF11  74                 	db	116	;'t'
   624  00FF12  20                 	db	32
   625  00FF13  20                 	db	32
   626  00FF14  20                 	db	32
   627  00FF15  3C                 	db	60	;'<'
   628  00FF16  42                 	db	66	;'B'
   629  00FF17  20                 	db	32
   630  00FF18  20                 	db	32
   631  00FF19  20                 	db	32
   632  00FF1A  20                 	db	32
   633  00FF1B  20                 	db	32
   634  00FF1C  20                 	db	32
   635  00FF1D  0A                 	db	10
   636  00FF1E  00                 	db	0
   637  00FF1F                     STR_14:
   638  00FF1F  73                 	db	115	;'s'
   639  00FF20  65                 	db	101	;'e'
   640  00FF21  6C                 	db	108	;'l'
   641  00FF22  65                 	db	101	;'e'
   642  00FF23  63                 	db	99	;'c'
   643  00FF24  74                 	db	116	;'t'
   644  00FF25  20                 	db	32
   645  00FF26  72                 	db	114	;'r'
   646  00FF27  75                 	db	117	;'u'
   647  00FF28  6E                 	db	110	;'n'
   648  00FF29  3A                 	db	58	;':'
   649  00FF2A  20                 	db	32
   650  00FF2B  20                 	db	32
   651  00FF2C  20                 	db	32
   652  00FF2D  20                 	db	32
   653  00FF2E  20                 	db	32
   654  00FF2F  0A                 	db	10
   655  00FF30  00                 	db	0
   656  00FF31                     STR_20:
   657  00FF31  5B                 	db	91	;'['
   658  00FF32  41                 	db	65	;'A'
   659  00FF33  41                 	db	65	;'A'
   660  00FF34  2C                 	db	44
   661  00FF35  39                 	db	57	;'9'
   662  00FF36  56                 	db	86	;'V'
   663  00FF37  2C                 	db	44
   664  00FF38  43                 	db	67	;'C'
   665  00FF39  2C                 	db	44
   666  00FF3A  6F                 	db	111	;'o'
   667  00FF3B  74                 	db	116	;'t'
   668  00FF3C  68                 	db	104	;'h'
   669  00FF3D  65                 	db	101	;'e'
   670  00FF3E  72                 	db	114	;'r'
   671  00FF3F  5D                 	db	93	;']'
   672  00FF40  20                 	db	32
   673  00FF41  0A                 	db	10
   674  00FF42  00                 	db	0
   675  00FF43                     STR_24:
   676  00FF43  30                 	db	48	;'0'
   677  00FF44  31                 	db	49	;'1'
   678  00FF45  32                 	db	50	;'2'
   679  00FF46  33                 	db	51	;'3'
   680  00FF47  34                 	db	52	;'4'
   681  00FF48  35                 	db	53	;'5'
   682  00FF49  36                 	db	54	;'6'
   683  00FF4A  37                 	db	55	;'7'
   684  00FF4B  38                 	db	56	;'8'
   685  00FF4C  39                 	db	57	;'9'
   686  00FF4D  61                 	db	97	;'a'
   687  00FF4E  62                 	db	98	;'b'
   688  00FF4F  63                 	db	99	;'c'
   689  00FF50  64                 	db	100	;'d'
   690  00FF51  65                 	db	101	;'e'
   691  00FF52  66                 	db	102	;'f'
   692  00FF53  00                 	db	0
   693  00FF54                     STR_19:
   694  00FF54  20                 	db	32
   695  00FF55  20                 	db	32
   696  00FF56  20                 	db	32
   697  00FF57  20                 	db	32
   698  00FF58  20                 	db	32
   699  00FF59  20                 	db	32
   700  00FF5A  20                 	db	32
   701  00FF5B  20                 	db	32
   702  00FF5C  20                 	db	32
   703  00FF5D  20                 	db	32
   704  00FF5E  20                 	db	32
   705  00FF5F  20                 	db	32
   706  00FF60  20                 	db	32
   707  00FF61  20                 	db	32
   708  00FF62  2A                 	db	42
   709  00FF63  3E                 	db	62	;'>'
   710  00FF64  00                 	db	0
   711  00FF65                     STR_15:
   712  00FF65  5B                 	db	91	;'['
   713  00FF66  31                 	db	49	;'1'
   714  00FF67  2C                 	db	44
   715  00FF68  32                 	db	50	;'2'
   716  00FF69  2C                 	db	44
   717  00FF6A  33                 	db	51	;'3'
   718  00FF6B  2C                 	db	44
   719  00FF6C  34                 	db	52	;'4'
   720  00FF6D  5D                 	db	93	;']'
   721  00FF6E  20                 	db	32
   722  00FF6F  20                 	db	32
   723  00FF70  20                 	db	32
   724  00FF71  20                 	db	32
   725  00FF72  20                 	db	32
   726  00FF73  2A                 	db	42
   727  00FF74  3E                 	db	62	;'>'
   728  00FF75  00                 	db	0
   729  00FF76                     STR_13:
   730  00FF76  68                 	db	104	;'h'
   731  00FF77  69                 	db	105	;'i'
   732  00FF78  73                 	db	115	;'s'
   733  00FF79  74                 	db	116	;'t'
   734  00FF7A  6F                 	db	111	;'o'
   735  00FF7B  72                 	db	114	;'r'
   736  00FF7C  79                 	db	121	;'y'
   737  00FF7D  20                 	db	32
   738  00FF7E  3C                 	db	60	;'<'
   739  00FF7F  43                 	db	67	;'C'
   740  00FF80  20                 	db	32
   741  00FF81  20                 	db	32
   742  00FF82  20                 	db	32
   743  00FF83  20                 	db	32
   744  00FF84  2A                 	db	42
   745  00FF85  3E                 	db	62	;'>'
   746  00FF86  00                 	db	0
   747  00FF87                     STR_17:
   748  00FF87  20                 	db	32
   749  00FF88  20                 	db	32
   750  00FF89  20                 	db	32
   751  00FF8A  73                 	db	115	;'s'
   752  00FF8B  74                 	db	116	;'t'
   753  00FF8C  61                 	db	97	;'a'
   754  00FF8D  74                 	db	116	;'t'
   755  00FF8E  73                 	db	115	;'s'
   756  00FF8F  20                 	db	32
   757  00FF90  3C                 	db	60	;'<'
   758  00FF91  42                 	db	66	;'B'
   759  00FF92  20                 	db	32
   760  00FF93  20                 	db	32
   761  00FF94  20                 	db	32
   762  00FF95  2A                 	db	42
   763  00FF96  3E                 	db	62	;'>'
   764  00FF97  00                 	db	0
   765  00FF98                     STR_23:
   766  00FF98  20                 	db	32
   767  00FF99  20                 	db	32
   768  00FF9A  61                 	db	97	;'a'
   769  00FF9B  76                 	db	118	;'v'
   770  00FF9C  61                 	db	97	;'a'
   771  00FF9D  69                 	db	105	;'i'
   772  00FF9E  6C                 	db	108	;'l'
   773  00FF9F  61                 	db	97	;'a'
   774  00FFA0  62                 	db	98	;'b'
   775  00FFA1  6C                 	db	108	;'l'
   776  00FFA2  65                 	db	101	;'e'
   777  00FFA3  20                 	db	32
   778  00FFA4  20                 	db	32
   779  00FFA5  20                 	db	32
   780  00FFA6  2A                 	db	42
   781  00FFA7  3E                 	db	62	;'>'
   782  00FFA8  00                 	db	0
   783  00FFA9                     STR_5:
   784  00FFA9  56                 	db	86	;'V'
   785  00FFAA  3A                 	db	58	;':'
   786  00FFAB  20                 	db	32
   787  00FFAC  25                 	db	37
   788  00FFAD  2E                 	db	46
   789  00FFAE  33                 	db	51	;'3'
   790  00FFAF  66                 	db	102	;'f'
   791  00FFB0  2C                 	db	44
   792  00FFB1  20                 	db	32
   793  00FFB2  4E                 	db	78	;'N'
   794  00FFB3  3A                 	db	58	;':'
   795  00FFB4  20                 	db	32
   796  00FFB5  25                 	db	37
   797  00FFB6  64                 	db	100	;'d'
   798  00FFB7  0A                 	db	10
   799  00FFB8  00                 	db	0
   800  00FFB9                     STR_22:
   801  00FFB9  20                 	db	32
   802  00FFBA  72                 	db	114	;'r'
   803  00FFBB  75                 	db	117	;'u'
   804  00FFBC  6E                 	db	110	;'n'
   805  00FFBD  20                 	db	32
   806  00FFBE  6E                 	db	110	;'n'
   807  00FFBF  6F                 	db	111	;'o'
   808  00FFC0  74                 	db	116	;'t'
   809  00FFC1  20                 	db	32
   810  00FFC2  0A                 	db	10
   811  00FFC3  00                 	db	0
   812  00FFC4                     STR_8:
   813  00FFC4  43                 	db	67	;'C'
   814  00FFC5  20                 	db	32
   815  00FFC6  20                 	db	32
   816  00FFC7  6C                 	db	108	;'l'
   817  00FFC8  69                 	db	105	;'i'
   818  00FFC9  6D                 	db	109	;'m'
   819  00FFCA  3A                 	db	58	;':'
   820  00FFCB  20                 	db	32
   821  00FFCC  25                 	db	37
   822  00FFCD  66                 	db	102	;'f'
   823  00FFCE  00                 	db	0
   824  00FFCF                     STR_6:
   825  00FFCF  41                 	db	65	;'A'
   826  00FFD0  41                 	db	65	;'A'
   827  00FFD1  20                 	db	32
   828  00FFD2  6C                 	db	108	;'l'
   829  00FFD3  69                 	db	105	;'i'
   830  00FFD4  6D                 	db	109	;'m'
   831  00FFD5  3A                 	db	58	;':'
   832  00FFD6  20                 	db	32
   833  00FFD7  25                 	db	37
   834  00FFD8  66                 	db	102	;'f'
   835  00FFD9  00                 	db	0
   836  00FFDA                     STR_7:
   837  00FFDA  39                 	db	57	;'9'
   838  00FFDB  56                 	db	86	;'V'
   839  00FFDC  20                 	db	32
   840  00FFDD  6C                 	db	108	;'l'
   841  00FFDE  69                 	db	105	;'i'
   842  00FFDF  6D                 	db	109	;'m'
   843  00FFE0  3A                 	db	58	;':'
   844  00FFE1  20                 	db	32
   845  00FFE2  25                 	db	37
   846  00FFE3  66                 	db	102	;'f'
   847  00FFE4  00                 	db	0
   848  00FFE5  25                 	db	37
   849  00FFE6  64                 	db	100	;'d'
   850  00FFE7  2C                 	db	44
   851  00FFE8  20                 	db	32
   852  00FFE9  25                 	db	37
   853  00FFEA  30                 	db	48	;'0'
   854  00FFEB  32                 	db	50	;'2'
   855  00FFEC  78                 	db	120	;'x'
   856  00FFED  00                 	db	0
   857  00FFEE  74                 	db	116	;'t'
   858  00FFEF  31                 	db	49	;'1'
   859  00FFF0  3A                 	db	58	;':'
   860  00FFF1  20                 	db	32
   861  00FFF2  25                 	db	37
   862  00FFF3  78                 	db	120	;'x'
   863  00FFF4  20                 	db	32
   864  00FFF5  00                 	db	0
   865  00FFF6                     STR_2:
   866  00FFF6  72                 	db	114	;'r'
   867  00FFF7  75                 	db	117	;'u'
   868  00FFF8  6E                 	db	110	;'n'
   869  00FFF9  6E                 	db	110	;'n'
   870  00FFFA  69                 	db	105	;'i'
   871  00FFFB  6E                 	db	110	;'n'
   872  00FFFC  67                 	db	103	;'g'
   873  00FFFD  00                 	db	0
   874                           
   875                           ; #config settings
   876  00FFFE  00                 	db	0	; dummy byte at the end
   877  0000                     
   878                           	psect	cinit
   879  0037AA                     __pcinit:
   880                           	opt stack 0
   881  0037AA                     start_initialization:
   882                           	opt stack 0
   883  0037AA                     __initialization:
   884                           	opt stack 0
   885                           
   886                           ; Initialize objects allocated to BANK1 (38 bytes)
   887                           ; load TBLPTR registers with __pidataBANK1
   888  0037AA  0E4A               	movlw	low __pidataBANK1
   889  0037AC  6EF6               	movwf	tblptrl,c
   890  0037AE  0E40               	movlw	high __pidataBANK1
   891  0037B0  6EF7               	movwf	tblptrh,c
   892  0037B2  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   893  0037B4  6EF8               	movwf	tblptru,c
   894  0037B6  EE01  F044         	lfsr	0,__pdataBANK1
   895  0037BA  EE10 F026          	lfsr	1,38
   896  0037BE                     copy_data0:
   897  0037BE  0009               	tblrd		*+
   898  0037C0  CFF5 FFEE          	movff	tablat,postinc0
   899  0037C4  50E5               	movf	postdec1,w,c
   900  0037C6  50E1               	movf	fsr1l,w,c
   901  0037C8  E1FA               	bnz	copy_data0
   902                           
   903                           ; Initialize objects allocated to BANK0 (2 bytes)
   904                           ; load TBLPTR registers with __pidataBANK0
   905  0037CA  0E20               	movlw	low __pidataBANK0
   906  0037CC  6EF6               	movwf	tblptrl,c
   907  0037CE  0E42               	movlw	high __pidataBANK0
   908  0037D0  6EF7               	movwf	tblptrh,c
   909  0037D2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   910  0037D4  6EF8               	movwf	tblptru,c
   911  0037D6  0009               	tblrd		*+	;fetch initializer
   912  0037D8  CFF5 F0FD          	movff	tablat,__pdataBANK0
   913  0037DC  0009               	tblrd		*+	;fetch initializer
   914  0037DE  CFF5 F0FE          	movff	tablat,__pdataBANK0+1
   915                           
   916                           ; Initialize objects allocated to COMRAM (23 bytes)
   917                           ; load TBLPTR registers with __pidataCOMRAM
   918  0037E2  0EA2               	movlw	low __pidataCOMRAM
   919  0037E4  6EF6               	movwf	tblptrl,c
   920  0037E6  0E41               	movlw	high __pidataCOMRAM
   921  0037E8  6EF7               	movwf	tblptrh,c
   922  0037EA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   923  0037EC  6EF8               	movwf	tblptru,c
   924  0037EE  EE00  F03B         	lfsr	0,__pdataCOMRAM
   925  0037F2  EE10 F017          	lfsr	1,23
   926  0037F6                     copy_data1:
   927  0037F6  0009               	tblrd		*+
   928  0037F8  CFF5 FFEE          	movff	tablat,postinc0
   929  0037FC  50E5               	movf	postdec1,w,c
   930  0037FE  50E1               	movf	fsr1l,w,c
   931  003800  E1FA               	bnz	copy_data1
   932                           
   933                           ; Clear objects allocated to BANK1 (32 bytes)
   934  003802  EE01  F06A         	lfsr	0,__pbssBANK1
   935  003806  0E20               	movlw	32
   936  003808                     clear_0:
   937  003808  6AEE               	clrf	postinc0,c
   938  00380A  06E8               	decf	wreg,f,c
   939  00380C  E1FD               	bnz	clear_0
   940                           
   941                           ; Clear objects allocated to BANK0 (2 bytes)
   942  00380E  0100               	movlb	0
   943  003810  6BFC               	clrf	(__pbssBANK0+1)& (0+255),b
   944  003812  6BFB               	clrf	__pbssBANK0& (0+255),b
   945                           
   946                           ; Clear objects allocated to COMRAM (11 bytes)
   947  003814  EE00  F052         	lfsr	0,__pbssCOMRAM
   948  003818  0E0B               	movlw	11
   949  00381A                     clear_1:
   950  00381A  6AEE               	clrf	postinc0,c
   951  00381C  06E8               	decf	wreg,f,c
   952  00381E  E1FD               	bnz	clear_1
   953  003820                     end_of_initialization:
   954                           	opt stack 0
   955  003820                     __end_of__initialization:
   956                           	opt stack 0
   957  003820  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   958  003822  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   959  003824  0E00               	movlw	low (__Lmediumconst shr (0+16))
   960  003826  6EF8               	movwf	tblptru,c
   961  003828  0100               	movlb	0
   962  00382A  EF05  F007         	goto	_main	;jump to C main() function
   963                           tblptru	equ	0xFF8
   964                           tblptrh	equ	0xFF7
   965                           tblptrl	equ	0xFF6
   966                           tablat	equ	0xFF5
   967                           postinc0	equ	0xFEE
   968                           wreg	equ	0xFE8
   969                           postdec1	equ	0xFE5
   970                           fsr1l	equ	0xFE1
   971                           
   972                           	psect	bssCOMRAM
   973  000052                     __pbssCOMRAM:
   974                           	opt stack 0
   975  000052                     _padPin3:
   976                           	opt stack 0
   977  000052                     	ds	4
   978  000056                     _count:
   979                           	opt stack 0
   980  000056                     	ds	2
   981  000058                     _curr:
   982                           	opt stack 0
   983  000058                     	ds	2
   984  00005A                     _prevTime:
   985                           	opt stack 0
   986  00005A                     	ds	2
   987  00005C                     _lastKey:
   988                           	opt stack 0
   989  00005C                     	ds	1
   990                           tblptru	equ	0xFF8
   991                           tblptrh	equ	0xFF7
   992                           tblptrl	equ	0xFF6
   993                           tablat	equ	0xFF5
   994                           postinc0	equ	0xFEE
   995                           wreg	equ	0xFE8
   996                           postdec1	equ	0xFE5
   997                           fsr1l	equ	0xFE1
   998                           
   999                           	psect	dataCOMRAM
  1000  00003B                     __pdataCOMRAM:
  1001                           	opt stack 0
  1002  00003B                     _V_LIM_9V:
  1003                           	opt stack 0
  1004  00003B                     	ds	3
  1005  00003E                     _V_LIM_AA:
  1006                           	opt stack 0
  1007  00003E                     	ds	3
  1008  000041                     _V_LIM_C:
  1009                           	opt stack 0
  1010  000041                     	ds	3
  1011  000044                     _angle:
  1012                           	opt stack 0
  1013  000044                     	ds	2
  1014  000046                     _padAngle_CLOSE:
  1015                           	opt stack 0
  1016  000046                     	ds	2
  1017  000048                     _padAngle_OPEN:
  1018                           	opt stack 0
  1019  000048                     	ds	2
  1020  00004A                     _redirectAngle_9V:
  1021                           	opt stack 0
  1022  00004A                     	ds	2
  1023  00004C                     _redirectAngle_C:
  1024                           	opt stack 0
  1025  00004C                     	ds	2
  1026  00004E                     _AA_float:
  1027                           	opt stack 0
  1028  00004E                     	ds	4
  1029                           tblptru	equ	0xFF8
  1030                           tblptrh	equ	0xFF7
  1031                           tblptrl	equ	0xFF6
  1032                           tablat	equ	0xFF5
  1033                           postinc0	equ	0xFEE
  1034                           wreg	equ	0xFE8
  1035                           postdec1	equ	0xFE5
  1036                           fsr1l	equ	0xFE1
  1037                           
  1038                           	psect	bssBANK0
  1039  0000FB                     __pbssBANK0:
  1040                           	opt stack 0
  1041  0000FB                     _n:
  1042                           	opt stack 0
  1043  0000FB                     	ds	2
  1044                           tblptru	equ	0xFF8
  1045                           tblptrh	equ	0xFF7
  1046                           tblptrl	equ	0xFF6
  1047                           tablat	equ	0xFF5
  1048                           postinc0	equ	0xFEE
  1049                           wreg	equ	0xFE8
  1050                           postdec1	equ	0xFE5
  1051                           fsr1l	equ	0xFE1
  1052                           
  1053                           	psect	dataBANK0
  1054  0000FD                     __pdataBANK0:
  1055                           	opt stack 0
  1056  0000FD                     _redirectAngle_OTHER:
  1057                           	opt stack 0
  1058  0000FD                     	ds	2
  1059                           tblptru	equ	0xFF8
  1060                           tblptrh	equ	0xFF7
  1061                           tblptrl	equ	0xFF6
  1062                           tablat	equ	0xFF5
  1063                           postinc0	equ	0xFEE
  1064                           wreg	equ	0xFE8
  1065                           postdec1	equ	0xFE5
  1066                           fsr1l	equ	0xFE1
  1067                           
  1068                           	psect	bssBANK1
  1069  00016A                     __pbssBANK1:
  1070                           	opt stack 0
  1071  00016A                     _pulse:
  1072                           	opt stack 0
  1073  00016A                     	ds	8
  1074  000172                     _servos:
  1075                           	opt stack 0
  1076  000172                     	ds	8
  1077  00017A                     _time:
  1078                           	opt stack 0
  1079  00017A                     	ds	4
  1080  00017E                     _batteryDetected:
  1081                           	opt stack 0
  1082  00017E                     	ds	2
  1083  000180                     _n_9V:
  1084                           	opt stack 0
  1085  000180                     	ds	2
  1086  000182                     _n_AA:
  1087                           	opt stack 0
  1088  000182                     	ds	2
  1089  000184                     _n_C:
  1090                           	opt stack 0
  1091  000184                     	ds	2
  1092  000186                     _n_OTHER:
  1093                           	opt stack 0
  1094  000186                     	ds	2
  1095  000188                     _terminate:
  1096                           	opt stack 0
  1097  000188                     	ds	2
  1098                           tblptru	equ	0xFF8
  1099                           tblptrh	equ	0xFF7
  1100                           tblptrl	equ	0xFF6
  1101                           tablat	equ	0xFF5
  1102                           postinc0	equ	0xFEE
  1103                           wreg	equ	0xFE8
  1104                           postdec1	equ	0xFE5
  1105                           fsr1l	equ	0xFE1
  1106                           
  1107                           	psect	dataBANK1
  1108  000144                     __pdataBANK1:
  1109                           	opt stack 0
  1110  000144                     _cylinderBackward:
  1111                           	opt stack 0
  1112  000144                     	ds	2
  1113  000146                     _cylinderForward:
  1114                           	opt stack 0
  1115  000146                     	ds	2
  1116  000148                     _padAngle_NEUTRAL:
  1117                           	opt stack 0
  1118  000148                     	ds	2
  1119  00014A                     _redirectAngle_AA:
  1120                           	opt stack 0
  1121  00014A                     	ds	2
  1122  00014C                     _stoppingTime:
  1123                           	opt stack 0
  1124  00014C                     	ds	2
  1125  00014E                     _conveyorServo:
  1126                           	opt stack 0
  1127  00014E                     	ds	4
  1128  000152                     _cylinderMotor1:
  1129                           	opt stack 0
  1130  000152                     	ds	4
  1131  000156                     _cylinderMotor2:
  1132                           	opt stack 0
  1133  000156                     	ds	4
  1134  00015A                     _padPin1:
  1135                           	opt stack 0
  1136  00015A                     	ds	4
  1137  00015E                     _padPin2:
  1138                           	opt stack 0
  1139  00015E                     	ds	4
  1140  000162                     _padServo:
  1141                           	opt stack 0
  1142  000162                     	ds	4
  1143  000166                     _redirectingServo:
  1144                           	opt stack 0
  1145  000166                     	ds	4
  1146                           tblptru	equ	0xFF8
  1147                           tblptrh	equ	0xFF7
  1148                           tblptrl	equ	0xFF6
  1149                           tablat	equ	0xFF5
  1150                           postinc0	equ	0xFEE
  1151                           wreg	equ	0xFE8
  1152                           postdec1	equ	0xFE5
  1153                           fsr1l	equ	0xFE1
  1154                           
  1155                           	psect	cstackBANK1
  1156  000100                     __pcstackBANK1:
  1157                           	opt stack 0
  1158  000100                     showDateTime@sec:
  1159                           	opt stack 0
  1160  000100                     _sortBattery$1418:
  1161                           	opt stack 0
  1162  000100                     _showRunTime$1420:
  1163                           	opt stack 0
  1164                           
  1165                           ; 4 bytes @ 0x0
  1166  000100                     	ds	2
  1167  000102                     showDateTime@min:
  1168                           	opt stack 0
  1169  000102                     sortBattery@V_float:
  1170                           	opt stack 0
  1171                           
  1172                           ; 3 bytes @ 0x2
  1173  000102                     	ds	2
  1174  000104                     showDateTime@hour:
  1175                           	opt stack 0
  1176  000104                     showRunTime@t1:
  1177                           	opt stack 0
  1178                           
  1179                           ; 2 bytes @ 0x4
  1180  000104                     	ds	1
  1181  000105                     sortBattery@pos_v_counter:
  1182                           	opt stack 0
  1183                           
  1184                           ; 2 bytes @ 0x5
  1185  000105                     	ds	1
  1186  000106                     showDateTime@day:
  1187                           	opt stack 0
  1188  000106                     showRunTime@t2:
  1189                           	opt stack 0
  1190                           
  1191                           ; 2 bytes @ 0x6
  1192  000106                     	ds	1
  1193  000107                     sortBattery@signal:
  1194                           	opt stack 0
  1195                           
  1196                           ; 2 bytes @ 0x7
  1197  000107                     	ds	1
  1198  000108                     showDateTime@mon:
  1199                           	opt stack 0
  1200  000108                     showRunTime@time:
  1201                           	opt stack 0
  1202                           
  1203                           ; 4 bytes @ 0x8
  1204  000108                     	ds	1
  1205  000109                     sortBattery@Vcc:
  1206                           	opt stack 0
  1207                           
  1208                           ; 3 bytes @ 0x9
  1209  000109                     	ds	1
  1210  00010A                     showDateTime@year:
  1211                           	opt stack 0
  1212                           
  1213                           ; 2 bytes @ 0xA
  1214  00010A                     	ds	2
  1215  00010C                     showDateTime@t:
  1216                           	opt stack 0
  1217  00010C                     sortBattery@resolution:
  1218                           	opt stack 0
  1219                           
  1220                           ; 3 bytes @ 0xC
  1221  00010C                     	ds	2
  1222  00010E                     showInterface@n:
  1223                           	opt stack 0
  1224                           
  1225                           ; 2 bytes @ 0xE
  1226  00010E                     	ds	1
  1227  00010F                     sortBattery@V_max:
  1228                           	opt stack 0
  1229                           
  1230                           ; 3 bytes @ 0xF
  1231  00010F                     	ds	1
  1232  000110                     showInterface@run:
  1233                           	opt stack 0
  1234                           
  1235                           ; 2 bytes @ 0x10
  1236  000110                     	ds	2
  1237  000112                     showInterface@key:
  1238                           	opt stack 0
  1239  000112                     sortBattery@i_250:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x12
  1243  000112                     	ds	2
  1244  000114                     sortBattery@targetAngle:
  1245                           	opt stack 0
  1246                           
  1247                           ; 2 bytes @ 0x14
  1248  000114                     	ds	2
  1249  000116                     sortBattery@V:
  1250                           	opt stack 0
  1251                           
  1252                           ; 3 bytes @ 0x16
  1253  000116                     	ds	3
  1254  000119                     sortBattery@i:
  1255                           	opt stack 0
  1256                           
  1257                           ; 3 bytes @ 0x19
  1258  000119                     	ds	3
  1259  00011C                     sortBattery@V_245:
  1260                           	opt stack 0
  1261                           
  1262                           ; 3 bytes @ 0x1C
  1263  00011C                     	ds	3
  1264  00011F                     ??_main:
  1265                           
  1266                           ; 1 bytes @ 0x1F
  1267  00011F                     	ds	13
  1268  00012C                     _main$1417:
  1269                           	opt stack 0
  1270                           
  1271                           ; 4 bytes @ 0x2C
  1272  00012C                     	ds	4
  1273  000130                     main@cylinderStart:
  1274                           	opt stack 0
  1275                           
  1276                           ; 2 bytes @ 0x30
  1277  000130                     	ds	2
  1278  000132                     main@run:
  1279                           	opt stack 0
  1280                           
  1281                           ; 14 bytes @ 0x32
  1282  000132                     	ds	14
  1283  000140                     main@duration:
  1284                           	opt stack 0
  1285                           
  1286                           ; 2 bytes @ 0x40
  1287  000140                     	ds	2
  1288  000142                     main@lastBatteryTime:
  1289                           	opt stack 0
  1290                           
  1291                           ; 2 bytes @ 0x42
  1292  000142                     	ds	2
  1293                           tblptru	equ	0xFF8
  1294                           tblptrh	equ	0xFF7
  1295                           tblptrl	equ	0xFF6
  1296                           tablat	equ	0xFF5
  1297                           postinc0	equ	0xFEE
  1298                           wreg	equ	0xFE8
  1299                           postdec1	equ	0xFE5
  1300                           fsr1l	equ	0xFE1
  1301                           
  1302                           	psect	cstackBANK0
  1303  000080                     __pcstackBANK0:
  1304                           	opt stack 0
  1305  000080                     ??___ftdiv:
  1306  000080                     ?_readPastRun:
  1307                           	opt stack 0
  1308  000080                     readPastRun@run:
  1309                           	opt stack 0
  1310  000080                     eepromWrite@data:
  1311                           	opt stack 0
  1312                           
  1313                           ; 2 bytes @ 0x0
  1314  000080                     	ds	2
  1315  000082                     eepromWrite@address:
  1316                           	opt stack 0
  1317  000082                     readPastRun@data:
  1318                           	opt stack 0
  1319                           
  1320                           ; 14 bytes @ 0x2
  1321  000082                     	ds	1
  1322  000083                     ___ftdiv@cntr:
  1323                           	opt stack 0
  1324                           
  1325                           ; 1 bytes @ 0x3
  1326  000083                     	ds	1
  1327  000084                     ___ftdiv@f3:
  1328                           	opt stack 0
  1329                           
  1330                           ; 3 bytes @ 0x4
  1331  000084                     	ds	2
  1332  000086                     ??_eepromWrite:
  1333                           
  1334                           ; 1 bytes @ 0x6
  1335  000086                     	ds	1
  1336  000087                     ___ftdiv@exp:
  1337                           	opt stack 0
  1338  000087                     eepromWrite@ien:
  1339                           	opt stack 0
  1340                           
  1341                           ; 2 bytes @ 0x7
  1342  000087                     	ds	1
  1343  000088                     ___ftdiv@sign:
  1344                           	opt stack 0
  1345                           
  1346                           ; 1 bytes @ 0x8
  1347  000088                     	ds	1
  1348  000089                     ?___ftmul:
  1349                           	opt stack 0
  1350  000089                     saveNewRun@data:
  1351                           	opt stack 0
  1352  000089                     ___ftmul@f1:
  1353                           	opt stack 0
  1354                           
  1355                           ; 3 bytes @ 0x9
  1356  000089                     	ds	2
  1357  00008B                     saveNewRun@n:
  1358                           	opt stack 0
  1359                           
  1360                           ; 2 bytes @ 0xB
  1361  00008B                     	ds	1
  1362  00008C                     ___ftmul@f2:
  1363                           	opt stack 0
  1364                           
  1365                           ; 3 bytes @ 0xC
  1366  00008C                     	ds	1
  1367  00008D                     saveNewRun@i:
  1368                           	opt stack 0
  1369                           
  1370                           ; 2 bytes @ 0xD
  1371  00008D                     	ds	2
  1372  00008F                     ??___ftmul:
  1373                           
  1374                           ; 1 bytes @ 0xF
  1375  00008F                     	ds	1
  1376  000090                     readPastRun@i:
  1377                           	opt stack 0
  1378                           
  1379                           ; 2 bytes @ 0x10
  1380  000090                     	ds	2
  1381  000092                     ___ftmul@exp:
  1382                           	opt stack 0
  1383                           
  1384                           ; 1 bytes @ 0x12
  1385  000092                     	ds	1
  1386  000093                     ___ftmul@f3_as_product:
  1387                           	opt stack 0
  1388                           
  1389                           ; 3 bytes @ 0x13
  1390  000093                     	ds	3
  1391  000096                     ___ftmul@cntr:
  1392                           	opt stack 0
  1393                           
  1394                           ; 1 bytes @ 0x16
  1395  000096                     	ds	1
  1396  000097                     ___ftmul@sign:
  1397                           	opt stack 0
  1398                           
  1399                           ; 1 bytes @ 0x17
  1400  000097                     	ds	1
  1401  000098                     ?_fround:
  1402                           	opt stack 0
  1403  000098                     ?_scale:
  1404                           	opt stack 0
  1405                           
  1406                           ; 3 bytes @ 0x18
  1407  000098                     	ds	3
  1408  00009B                     _fround$1422:
  1409                           	opt stack 0
  1410  00009B                     _scale$1423:
  1411                           	opt stack 0
  1412                           
  1413                           ; 3 bytes @ 0x1B
  1414  00009B                     	ds	3
  1415  00009E                     scale@scl:
  1416                           	opt stack 0
  1417  00009E                     _fround$1421:
  1418                           	opt stack 0
  1419                           
  1420                           ; 3 bytes @ 0x1E
  1421  00009E                     	ds	3
  1422  0000A1                     fround@prec:
  1423                           	opt stack 0
  1424                           
  1425                           ; 1 bytes @ 0x21
  1426  0000A1                     	ds	1
  1427  0000A2                     ?___ftadd:
  1428                           	opt stack 0
  1429  0000A2                     ___ftadd@f1:
  1430                           	opt stack 0
  1431                           
  1432                           ; 3 bytes @ 0x22
  1433  0000A2                     	ds	3
  1434  0000A5                     ___ftadd@f2:
  1435                           	opt stack 0
  1436                           
  1437                           ; 3 bytes @ 0x25
  1438  0000A5                     	ds	3
  1439  0000A8                     ??___ftadd:
  1440                           
  1441                           ; 1 bytes @ 0x28
  1442  0000A8                     	ds	3
  1443  0000AB                     ___ftadd@sign:
  1444                           	opt stack 0
  1445                           
  1446                           ; 1 bytes @ 0x2B
  1447  0000AB                     	ds	1
  1448  0000AC                     ___ftadd@exp2:
  1449                           	opt stack 0
  1450                           
  1451                           ; 1 bytes @ 0x2C
  1452  0000AC                     	ds	1
  1453  0000AD                     ___ftadd@exp1:
  1454                           	opt stack 0
  1455                           
  1456                           ; 1 bytes @ 0x2D
  1457  0000AD                     	ds	1
  1458  0000AE                     ?___ftsub:
  1459                           	opt stack 0
  1460  0000AE                     ?___fttol:
  1461                           	opt stack 0
  1462  0000AE                     ___ftsub@f1:
  1463                           	opt stack 0
  1464  0000AE                     ___fttol@f1:
  1465                           	opt stack 0
  1466                           
  1467                           ; 3 bytes @ 0x2E
  1468  0000AE                     	ds	3
  1469  0000B1                     ___ftsub@f2:
  1470                           	opt stack 0
  1471                           
  1472                           ; 3 bytes @ 0x31
  1473  0000B1                     	ds	1
  1474  0000B2                     ??___fttol:
  1475                           
  1476                           ; 1 bytes @ 0x32
  1477  0000B2                     	ds	5
  1478  0000B7                     ___fttol@sign1:
  1479                           	opt stack 0
  1480                           
  1481                           ; 1 bytes @ 0x37
  1482  0000B7                     	ds	1
  1483  0000B8                     ___fttol@lval:
  1484                           	opt stack 0
  1485                           
  1486                           ; 4 bytes @ 0x38
  1487  0000B8                     	ds	4
  1488  0000BC                     ___fttol@exp1:
  1489                           	opt stack 0
  1490                           
  1491                           ; 1 bytes @ 0x3C
  1492  0000BC                     	ds	1
  1493  0000BD                     ?_printf:
  1494                           	opt stack 0
  1495  0000BD                     ?_angleToPulse:
  1496                           	opt stack 0
  1497  0000BD                     angleToPulse@angle:
  1498                           	opt stack 0
  1499  0000BD                     printf@f:
  1500                           	opt stack 0
  1501                           
  1502                           ; 2 bytes @ 0x3D
  1503  0000BD                     	ds	4
  1504  0000C1                     ??_angleToPulse:
  1505                           
  1506                           ; 1 bytes @ 0x41
  1507  0000C1                     	ds	4
  1508  0000C5                     angleToPulse@offset:
  1509                           	opt stack 0
  1510                           
  1511                           ; 4 bytes @ 0x45
  1512  0000C5                     	ds	4
  1513  0000C9                     angleToPulse@a180:
  1514                           	opt stack 0
  1515                           
  1516                           ; 4 bytes @ 0x49
  1517  0000C9                     	ds	2
  1518  0000CB                     ??_printf:
  1519                           
  1520                           ; 1 bytes @ 0x4B
  1521  0000CB                     	ds	2
  1522  0000CD                     _angleToPulse$1419:
  1523                           	opt stack 0
  1524                           
  1525                           ; 3 bytes @ 0x4D
  1526  0000CD                     	ds	3
  1527  0000D0                     angleToPulse@a000:
  1528                           	opt stack 0
  1529                           
  1530                           ; 4 bytes @ 0x50
  1531  0000D0                     	ds	1
  1532  0000D1                     _printf$1424:
  1533                           	opt stack 0
  1534                           
  1535                           ; 3 bytes @ 0x51
  1536  0000D1                     	ds	3
  1537  0000D4                     printf@idx:
  1538                           	opt stack 0
  1539  0000D4                     setAngle@motor:
  1540                           	opt stack 0
  1541                           
  1542                           ; 2 bytes @ 0x54
  1543  0000D4                     	ds	1
  1544  0000D5                     printf@cp:
  1545                           	opt stack 0
  1546                           
  1547                           ; 2 bytes @ 0x55
  1548  0000D5                     	ds	1
  1549  0000D6                     setAngle@angle:
  1550                           	opt stack 0
  1551                           
  1552                           ; 2 bytes @ 0x56
  1553  0000D6                     	ds	1
  1554  0000D7                     printf@len:
  1555                           	opt stack 0
  1556                           
  1557                           ; 2 bytes @ 0x57
  1558  0000D7                     	ds	1
  1559  0000D8                     ??_setAngle:
  1560                           
  1561                           ; 1 bytes @ 0x58
  1562  0000D8                     	ds	1
  1563  0000D9                     printf@ap:
  1564                           	opt stack 0
  1565                           
  1566                           ; 2 bytes @ 0x59
  1567  0000D9                     	ds	1
  1568  0000DA                     setAngle@period:
  1569                           	opt stack 0
  1570                           
  1571                           ; 2 bytes @ 0x5A
  1572  0000DA                     	ds	1
  1573  0000DB                     printf@tmpval:
  1574                           	opt stack 0
  1575                           
  1576                           ; 4 bytes @ 0x5B
  1577  0000DB                     	ds	1
  1578  0000DC                     setAngle@i:
  1579                           	opt stack 0
  1580                           
  1581                           ; 2 bytes @ 0x5C
  1582  0000DC                     	ds	2
  1583  0000DE                     initServo@motor:
  1584                           	opt stack 0
  1585                           
  1586                           ; 2 bytes @ 0x5E
  1587  0000DE                     	ds	1
  1588  0000DF                     printf@exp:
  1589                           	opt stack 0
  1590                           
  1591                           ; 2 bytes @ 0x5F
  1592  0000DF                     	ds	1
  1593  0000E0                     initServo@angle:
  1594                           	opt stack 0
  1595                           
  1596                           ; 2 bytes @ 0x60
  1597  0000E0                     	ds	1
  1598  0000E1                     printf@fval:
  1599                           	opt stack 0
  1600                           
  1601                           ; 3 bytes @ 0x61
  1602  0000E1                     	ds	1
  1603  0000E2                     ??_initServo:
  1604                           
  1605                           ; 1 bytes @ 0x62
  1606  0000E2                     	ds	2
  1607  0000E4                     printf@val:
  1608                           	opt stack 0
  1609                           
  1610                           ; 4 bytes @ 0x64
  1611  0000E4                     	ds	2
  1612  0000E6                     initServo@i:
  1613                           	opt stack 0
  1614                           
  1615                           ; 2 bytes @ 0x66
  1616  0000E6                     	ds	2
  1617  0000E8                     printf@width:
  1618                           	opt stack 0
  1619                           
  1620                           ; 2 bytes @ 0x68
  1621  0000E8                     	ds	2
  1622  0000EA                     printf@flag:
  1623                           	opt stack 0
  1624                           
  1625                           ; 2 bytes @ 0x6A
  1626  0000EA                     	ds	2
  1627  0000EC                     printf@prec:
  1628                           	opt stack 0
  1629                           
  1630                           ; 2 bytes @ 0x6C
  1631  0000EC                     	ds	2
  1632  0000EE                     printf@c:
  1633                           	opt stack 0
  1634                           
  1635                           ; 1 bytes @ 0x6E
  1636  0000EE                     	ds	1
  1637  0000EF                     ??_sortBattery:
  1638  0000EF                     ??_showDateTime:
  1639  0000EF                     showMainMenu@k:
  1640                           	opt stack 0
  1641  0000EF                     showRunSelect@k:
  1642                           	opt stack 0
  1643  0000EF                     showRunMenu@key:
  1644                           	opt stack 0
  1645  0000EF                     showRunTime@run:
  1646                           	opt stack 0
  1647  0000EF                     showRunStats@run:
  1648                           	opt stack 0
  1649                           
  1650                           ; 2 bytes @ 0x6F
  1651  0000EF                     	ds	1
  1652  0000F0                     showRunMenu@k:
  1653                           	opt stack 0
  1654                           
  1655                           ; 1 bytes @ 0x70
  1656  0000F0                     	ds	1
  1657  0000F1                     ??_showRunTime:
  1658  0000F1                     showRunStats@n_AA:
  1659                           	opt stack 0
  1660                           
  1661                           ; 2 bytes @ 0x71
  1662  0000F1                     	ds	2
  1663  0000F3                     showRunStats@n_9V:
  1664                           	opt stack 0
  1665                           
  1666                           ; 2 bytes @ 0x73
  1667  0000F3                     	ds	2
  1668  0000F5                     showRunStats@n_C:
  1669                           	opt stack 0
  1670                           
  1671                           ; 2 bytes @ 0x75
  1672  0000F5                     	ds	2
  1673  0000F7                     showRunStats@n_OTHER:
  1674                           	opt stack 0
  1675                           
  1676                           ; 2 bytes @ 0x77
  1677  0000F7                     	ds	2
  1678  0000F9                     ??_showInterface:
  1679                           
  1680                           ; 1 bytes @ 0x79
  1681  0000F9                     	ds	2
  1682                           tblptru	equ	0xFF8
  1683                           tblptrh	equ	0xFF7
  1684                           tblptrl	equ	0xFF6
  1685                           tablat	equ	0xFF5
  1686                           postinc0	equ	0xFEE
  1687                           wreg	equ	0xFE8
  1688                           postdec1	equ	0xFE5
  1689                           fsr1l	equ	0xFE1
  1690                           
  1691                           	psect	cstackCOMRAM
  1692  000001                     __pcstackCOMRAM:
  1693                           	opt stack 0
  1694  000001                     ?i2___awmod:
  1695                           	opt stack 0
  1696  000001                     keyPressedInterruptService@key:
  1697                           	opt stack 0
  1698  000001                     i2___awmod@dividend:
  1699                           	opt stack 0
  1700                           
  1701                           ; 2 bytes @ 0x0
  1702  000001                     	ds	2
  1703  000003                     i2___awmod@divisor:
  1704                           	opt stack 0
  1705                           
  1706                           ; 2 bytes @ 0x2
  1707  000003                     	ds	2
  1708  000005                     i2___awmod@counter:
  1709                           	opt stack 0
  1710                           
  1711                           ; 1 bytes @ 0x4
  1712  000005                     	ds	1
  1713  000006                     i2___awmod@sign:
  1714                           	opt stack 0
  1715                           
  1716                           ; 1 bytes @ 0x5
  1717  000006                     	ds	1
  1718  000007                     i2digitalWrite@pin:
  1719                           	opt stack 0
  1720  000007                     i2startTimer@timer:
  1721                           	opt stack 0
  1722                           
  1723                           ; 2 bytes @ 0x6
  1724  000007                     	ds	2
  1725  000009                     i2digitalWrite@val:
  1726                           	opt stack 0
  1727  000009                     i2startTimer@val:
  1728                           	opt stack 0
  1729                           
  1730                           ; 4 bytes @ 0x8
  1731  000009                     	ds	2
  1732  00000B                     ??i2_digitalWrite:
  1733                           
  1734                           ; 1 bytes @ 0xA
  1735  00000B                     	ds	2
  1736  00000D                     ??i2_startTimer:
  1737                           
  1738                           ; 1 bytes @ 0xC
  1739  00000D                     	ds	1
  1740  00000E                     i2digitalWrite@p:
  1741                           	opt stack 0
  1742                           
  1743                           ; 2 bytes @ 0xD
  1744  00000E                     	ds	2
  1745  000010                     ??_servoInterruptService:
  1746                           
  1747                           ; 1 bytes @ 0xF
  1748  000010                     	ds	4
  1749  000014                     ??_service:
  1750                           
  1751                           ; 1 bytes @ 0x13
  1752  000014                     	ds	14
  1753  000022                     service@key:
  1754                           	opt stack 0
  1755                           
  1756                           ; 1 bytes @ 0x21
  1757  000022                     	ds	1
  1758  000023                     ??_isdigit:
  1759  000023                     ??_I2C_Master_Wait:
  1760  000023                     ?_digitalRead:
  1761                           	opt stack 0
  1762  000023                     ?___awmod:
  1763                           	opt stack 0
  1764  000023                     ?___ftpack:
  1765                           	opt stack 0
  1766  000023                     ?___ftneg:
  1767                           	opt stack 0
  1768  000023                     ?_analogRead:
  1769                           	opt stack 0
  1770  000023                     ?__tdiv_to_l_:
  1771                           	opt stack 0
  1772  000023                     ?__div_to_l_:
  1773                           	opt stack 0
  1774  000023                     ?___almod:
  1775                           	opt stack 0
  1776  000023                     ?___lldiv:
  1777                           	opt stack 0
  1778  000023                     lcdNibble@temp:
  1779                           	opt stack 0
  1780  000023                     readKeypad@key:
  1781                           	opt stack 0
  1782  000023                     keyPressed@key:
  1783                           	opt stack 0
  1784  000023                     digitalRead@pin:
  1785                           	opt stack 0
  1786  000023                     digitalWrite@pin:
  1787                           	opt stack 0
  1788  000023                     analogRead@channel:
  1789                           	opt stack 0
  1790  000023                     initTimer@timer:
  1791                           	opt stack 0
  1792  000023                     startTimer@timer:
  1793                           	opt stack 0
  1794  000023                     ___awmod@dividend:
  1795                           	opt stack 0
  1796  000023                     __div_to_l_@f1:
  1797                           	opt stack 0
  1798  000023                     ___ftpack@arg:
  1799                           	opt stack 0
  1800  000023                     __tdiv_to_l_@f1:
  1801                           	opt stack 0
  1802  000023                     ___ftneg@f1:
  1803                           	opt stack 0
  1804  000023                     ___almod@dividend:
  1805                           	opt stack 0
  1806  000023                     ___lldiv@dividend:
  1807                           	opt stack 0
  1808                           
  1809                           ; 4 bytes @ 0x22
  1810  000023                     	ds	1
  1811  000024                     lcdNibble@data:
  1812                           	opt stack 0
  1813  000024                     I2C_Master_Read@a:
  1814                           	opt stack 0
  1815  000024                     _isdigit$1053:
  1816                           	opt stack 0
  1817  000024                     I2C_Master_Write@d:
  1818                           	opt stack 0
  1819                           
  1820                           ; 2 bytes @ 0x23
  1821  000024                     	ds	1
  1822  000025                     ??_initTimer:
  1823  000025                     ??_digitalRead:
  1824  000025                     ??_lcdInst:
  1825  000025                     I2C_Master_Read@temp:
  1826                           	opt stack 0
  1827  000025                     isdigit@c:
  1828                           	opt stack 0
  1829  000025                     digitalWrite@val:
  1830                           	opt stack 0
  1831  000025                     ___awmod@divisor:
  1832                           	opt stack 0
  1833  000025                     startTimer@val:
  1834                           	opt stack 0
  1835                           
  1836                           ; 4 bytes @ 0x24
  1837  000025                     	ds	1
  1838  000026                     ?_getTime:
  1839                           	opt stack 0
  1840  000026                     lcdInst@data:
  1841                           	opt stack 0
  1842  000026                     ___ftpack@exp:
  1843                           	opt stack 0
  1844  000026                     __div_to_l_@f2:
  1845                           	opt stack 0
  1846  000026                     __tdiv_to_l_@f2:
  1847                           	opt stack 0
  1848                           
  1849                           ; 3 bytes @ 0x25
  1850  000026                     	ds	1
  1851  000027                     ??_initLCD:
  1852  000027                     ??_digitalWrite:
  1853  000027                     ??_analogRead:
  1854  000027                     putch@data:
  1855                           	opt stack 0
  1856  000027                     ___awmod@counter:
  1857                           	opt stack 0
  1858  000027                     ___ftpack@sign:
  1859                           	opt stack 0
  1860  000027                     ___almod@divisor:
  1861                           	opt stack 0
  1862  000027                     ___lldiv@divisor:
  1863                           	opt stack 0
  1864                           
  1865                           ; 4 bytes @ 0x26
  1866  000027                     	ds	1
  1867  000028                     ??___ftpack:
  1868  000028                     ??_getTime:
  1869  000028                     ___awmod@sign:
  1870                           	opt stack 0
  1871                           
  1872                           ; 1 bytes @ 0x27
  1873  000028                     	ds	1
  1874  000029                     ??_startTimer:
  1875  000029                     ??__tdiv_to_l_:
  1876  000029                     ?___awdiv:
  1877                           	opt stack 0
  1878  000029                     ___awdiv@dividend:
  1879                           	opt stack 0
  1880  000029                     __div_to_l_@quot:
  1881                           	opt stack 0
  1882                           
  1883                           ; 4 bytes @ 0x28
  1884  000029                     	ds	1
  1885  00002A                     digitalWrite@p:
  1886                           	opt stack 0
  1887  00002A                     getTime@time:
  1888                           	opt stack 0
  1889                           
  1890                           ; 14 bytes @ 0x29
  1891  00002A                     	ds	1
  1892  00002B                     ?___altoft:
  1893                           	opt stack 0
  1894  00002B                     ?___awtoft:
  1895                           	opt stack 0
  1896  00002B                     ?___lltoft:
  1897                           	opt stack 0
  1898  00002B                     ___almod@counter:
  1899                           	opt stack 0
  1900  00002B                     ___awdiv@divisor:
  1901                           	opt stack 0
  1902  00002B                     ___awtoft@c:
  1903                           	opt stack 0
  1904  00002B                     ___altoft@c:
  1905                           	opt stack 0
  1906  00002B                     ___lldiv@quotient:
  1907                           	opt stack 0
  1908  00002B                     ___lltoft@c:
  1909                           	opt stack 0
  1910                           
  1911                           ; 4 bytes @ 0x2A
  1912  00002B                     	ds	1
  1913  00002C                     ___almod@sign:
  1914                           	opt stack 0
  1915  00002C                     __tdiv_to_l_@quot:
  1916                           	opt stack 0
  1917                           
  1918                           ; 4 bytes @ 0x2B
  1919  00002C                     	ds	1
  1920  00002D                     ?___aldiv:
  1921                           	opt stack 0
  1922  00002D                     ___awdiv@counter:
  1923                           	opt stack 0
  1924  00002D                     __div_to_l_@cntr:
  1925                           	opt stack 0
  1926  00002D                     ___aldiv@dividend:
  1927                           	opt stack 0
  1928                           
  1929                           ; 4 bytes @ 0x2C
  1930  00002D                     	ds	1
  1931  00002E                     ___awdiv@sign:
  1932                           	opt stack 0
  1933  00002E                     ___awtoft@sign:
  1934                           	opt stack 0
  1935  00002E                     __div_to_l_@exp1:
  1936                           	opt stack 0
  1937                           
  1938                           ; 1 bytes @ 0x2D
  1939  00002E                     	ds	1
  1940  00002F                     ??___altoft:
  1941  00002F                     ??___lltoft:
  1942  00002F                     ___lldiv@counter:
  1943                           	opt stack 0
  1944  00002F                     ___awdiv@quotient:
  1945                           	opt stack 0
  1946  00002F                     ___ftge@ff1:
  1947                           	opt stack 0
  1948                           
  1949                           ; 3 bytes @ 0x2E
  1950  00002F                     	ds	1
  1951  000030                     ?___llmod:
  1952                           	opt stack 0
  1953  000030                     __tdiv_to_l_@cntr:
  1954                           	opt stack 0
  1955  000030                     I2C_Master_Init@c:
  1956                           	opt stack 0
  1957  000030                     ___llmod@dividend:
  1958                           	opt stack 0
  1959                           
  1960                           ; 4 bytes @ 0x2F
  1961  000030                     	ds	1
  1962  000031                     ?___wmul:
  1963                           	opt stack 0
  1964  000031                     __tdiv_to_l_@exp1:
  1965                           	opt stack 0
  1966  000031                     ___wmul@multiplier:
  1967                           	opt stack 0
  1968  000031                     ___aldiv@divisor:
  1969                           	opt stack 0
  1970                           
  1971                           ; 4 bytes @ 0x30
  1972  000031                     	ds	1
  1973  000032                     ___ftge@ff2:
  1974                           	opt stack 0
  1975                           
  1976                           ; 3 bytes @ 0x31
  1977  000032                     	ds	1
  1978  000033                     ___altoft@exp:
  1979                           	opt stack 0
  1980  000033                     ___lltoft@exp:
  1981                           	opt stack 0
  1982  000033                     ___wmul@multiplicand:
  1983                           	opt stack 0
  1984                           
  1985                           ; 2 bytes @ 0x32
  1986  000033                     	ds	1
  1987  000034                     ??_I2C_Master_Init:
  1988  000034                     ___altoft@sign:
  1989                           	opt stack 0
  1990  000034                     ___llmod@divisor:
  1991                           	opt stack 0
  1992                           
  1993                           ; 4 bytes @ 0x33
  1994  000034                     	ds	1
  1995  000035                     ??___ftge:
  1996  000035                     ?___ftdiv:
  1997                           	opt stack 0
  1998  000035                     ___aldiv@counter:
  1999                           	opt stack 0
  2000  000035                     ___wmul@product:
  2001                           	opt stack 0
  2002  000035                     ___ftdiv@f1:
  2003                           	opt stack 0
  2004                           
  2005                           ; 3 bytes @ 0x34
  2006  000035                     	ds	1
  2007  000036                     ___aldiv@sign:
  2008                           	opt stack 0
  2009                           
  2010                           ; 1 bytes @ 0x35
  2011  000036                     	ds	1
  2012  000037                     ?_eepromRead:
  2013                           	opt stack 0
  2014  000037                     eepromRead@address:
  2015                           	opt stack 0
  2016  000037                     ___aldiv@quotient:
  2017                           	opt stack 0
  2018                           
  2019                           ; 4 bytes @ 0x36
  2020  000037                     	ds	1
  2021  000038                     getTime@i:
  2022                           	opt stack 0
  2023  000038                     ___llmod@counter:
  2024                           	opt stack 0
  2025  000038                     ___ftdiv@f2:
  2026                           	opt stack 0
  2027                           
  2028                           ; 3 bytes @ 0x37
  2029  000038                     	ds	3
  2030  00003B                     tblptru	equ	0xFF8
  2031                           tblptrh	equ	0xFF7
  2032                           tblptrl	equ	0xFF6
  2033                           tablat	equ	0xFF5
  2034                           postinc0	equ	0xFEE
  2035                           wreg	equ	0xFE8
  2036                           postdec1	equ	0xFE5
  2037                           fsr1l	equ	0xFE1
  2038                           
  2039                           ; 1 bytes @ 0x3A
  2040 ;;
  2041 ;;Main: autosize = 0, tempsize = 13, incstack = 0, save=0
  2042 ;;
  2043 ;; *************** function _main *****************
  2044 ;; Defined at:
  2045 ;;		line 121 in file "main.c"
  2046 ;; Parameters:    Size  Location     Type
  2047 ;;		None
  2048 ;; Auto vars:     Size  Location     Type
  2049 ;;  lastBatteryT    2   66[BANK1 ] int 
  2050 ;;  duration        2   64[BANK1 ] int 
  2051 ;;  cylinderStar    2   48[BANK1 ] int 
  2052 ;;  run            14   50[BANK1 ] int [7]
  2053 ;; Return value:  Size  Location     Type
  2054 ;;                  1    wreg      void 
  2055 ;; Registers used:
  2056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2057 ;; Tracked objects:
  2058 ;;		On entry : 0/0
  2059 ;;		On exit  : 0/0
  2060 ;;		Unchanged: 0/0
  2061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2063 ;;      Locals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2064 ;;      Temps:          0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2065 ;;      Totals:         0       0      37       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2066 ;;Total ram usage:       37 bytes
  2067 ;; Hardware stack levels required when called:   10
  2068 ;; This function calls:
  2069 ;;		___aldiv
  2070 ;;		___almod
  2071 ;;		_digitalRead
  2072 ;;		_digitalWrite
  2073 ;;		_initLCD
  2074 ;;		_initServo
  2075 ;;		_initTimer
  2076 ;;		_lcdClear
  2077 ;;		_lcdHome
  2078 ;;		_pinSetup
  2079 ;;		_printf
  2080 ;;		_saveNewRun
  2081 ;;		_setAngle
  2082 ;;		_showInterface
  2083 ;;		_showRunStats
  2084 ;;		_showRunTime
  2085 ;;		_sortBattery
  2086 ;;		_startTimer
  2087 ;; This function is called by:
  2088 ;;		Startup code after reset
  2089 ;; This function uses a non-reentrant model
  2090 ;;
  2091                           
  2092                           	psect	text0
  2093  000E0A                     __ptext0:
  2094                           	opt stack 0
  2095  000E0A                     _main:
  2096                           	opt stack 21
  2097                           
  2098                           ;main.c: 125: pinSetup();
  2099                           
  2100                           ;incstack = 0
  2101  000E0A  ECB5  F01F         	call	_pinSetup	;wreg free
  2102                           
  2103                           ;main.c: 126: initLCD();
  2104  000E0E  EC92  F01F         	call	_initLCD	;wreg free
  2105  000E12                     l7679:
  2106                           
  2107                           ;main.c: 129: showInterface();
  2108  000E12  ECAE  F018         	call	_showInterface	;wreg free
  2109                           
  2110                           ;main.c: 132: terminate = 0;
  2111  000E16  0E00               	movlw	0
  2112  000E18  0101               	movlb	1	; () banked
  2113  000E1A  6F89               	movwf	(_terminate+1)& (0+255),b
  2114  000E1C  0E00               	movlw	0
  2115  000E1E  6F88               	movwf	_terminate& (0+255),b
  2116                           
  2117                           ; BSR set to: 1
  2118                           ;main.c: 133: time = 0;
  2119  000E20  0E00               	movlw	0
  2120  000E22  0101               	movlb	1	; () banked
  2121  000E24  6F7A               	movwf	_time& (0+255),b
  2122  000E26  0E00               	movlw	0
  2123  000E28  6F7B               	movwf	(_time+1)& (0+255),b
  2124  000E2A  0E00               	movlw	0
  2125  000E2C  6F7C               	movwf	(_time+2)& (0+255),b
  2126  000E2E  0E00               	movlw	0
  2127  000E30  6F7D               	movwf	(_time+3)& (0+255),b
  2128                           
  2129                           ; BSR set to: 1
  2130                           ;main.c: 134: initTimer(1);
  2131  000E32  0E00               	movlw	0
  2132  000E34  6E24               	movwf	initTimer@timer+1,c
  2133  000E36  0E01               	movlw	1
  2134  000E38  6E23               	movwf	initTimer@timer,c
  2135  000E3A  EC6D  F01F         	call	_initTimer	;wreg free
  2136                           
  2137                           ;main.c: 135: startTimer(1,0);
  2138  000E3E  0E00               	movlw	0
  2139  000E40  6E24               	movwf	startTimer@timer+1,c
  2140  000E42  0E01               	movlw	1
  2141  000E44  6E23               	movwf	startTimer@timer,c
  2142  000E46  0E00               	movlw	0
  2143  000E48  6E25               	movwf	startTimer@val,c
  2144  000E4A  0E00               	movlw	0
  2145  000E4C  6E26               	movwf	startTimer@val+1,c
  2146  000E4E  0E00               	movlw	0
  2147  000E50  6E27               	movwf	startTimer@val+2,c
  2148  000E52  0E00               	movlw	0
  2149  000E54  6E28               	movwf	startTimer@val+3,c
  2150  000E56  EC21  F01F         	call	_startTimer	;wreg free
  2151                           
  2152                           ;main.c: 138: digitalWrite(cylinderMotor1, 1);
  2153  000E5A  0E52               	movlw	low _cylinderMotor1
  2154  000E5C  6E23               	movwf	digitalWrite@pin,c
  2155  000E5E  0E01               	movlw	high _cylinderMotor1
  2156  000E60  6E24               	movwf	digitalWrite@pin+1,c
  2157  000E62  0E00               	movlw	0
  2158  000E64  6E26               	movwf	digitalWrite@val+1,c
  2159  000E66  0E01               	movlw	1
  2160  000E68  6E25               	movwf	digitalWrite@val,c
  2161  000E6A  EC7B  F019         	call	_digitalWrite	;wreg free
  2162                           
  2163                           ;main.c: 139: initServo(conveyorServo, 130);
  2164  000E6E  0E4E               	movlw	low _conveyorServo
  2165  000E70  0100               	movlb	0	; () banked
  2166  000E72  6FDE               	movwf	initServo@motor& (0+255),b
  2167  000E74  0E01               	movlw	high _conveyorServo
  2168  000E76  0100               	movlb	0	; () banked
  2169  000E78  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  2170  000E7A  0E00               	movlw	0
  2171  000E7C  0100               	movlb	0	; () banked
  2172  000E7E  6FE1               	movwf	(initServo@angle+1)& (0+255),b
  2173  000E80  0E82               	movlw	130
  2174  000E82  6FE0               	movwf	initServo@angle& (0+255),b
  2175  000E84  ECD3  F017         	call	_initServo	;wreg free
  2176                           
  2177                           ;main.c: 140: initServo(padServo, padAngle_NEUTRAL);
  2178  000E88  0E62               	movlw	low _padServo
  2179  000E8A  0100               	movlb	0	; () banked
  2180  000E8C  6FDE               	movwf	initServo@motor& (0+255),b
  2181  000E8E  0E01               	movlw	high _padServo
  2182  000E90  0100               	movlb	0	; () banked
  2183  000E92  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  2184  000E94  C148  F0E0         	movff	_padAngle_NEUTRAL,initServo@angle
  2185  000E98  C149  F0E1         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  2186  000E9C  ECD3  F017         	call	_initServo	;wreg free
  2187                           
  2188                           ;main.c: 141: initServo(redirectingServo, redirectAngle_AA);
  2189  000EA0  0E66               	movlw	low _redirectingServo
  2190  000EA2  0100               	movlb	0	; () banked
  2191  000EA4  6FDE               	movwf	initServo@motor& (0+255),b
  2192  000EA6  0E01               	movlw	high _redirectingServo
  2193  000EA8  0100               	movlb	0	; () banked
  2194  000EAA  6FDF               	movwf	(initServo@motor+1)& (0+255),b
  2195  000EAC  C14A  F0E0         	movff	_redirectAngle_AA,initServo@angle
  2196  000EB0  C14B  F0E1         	movff	_redirectAngle_AA+1,initServo@angle+1
  2197  000EB4  ECD3  F017         	call	_initServo	;wreg free
  2198  000EB8                     l7697:
  2199                           
  2200                           ;main.c: 145: lcdClear();
  2201  000EB8  EC04  F021         	call	_lcdClear	;wreg free
  2202                           
  2203                           ;main.c: 146: printf("running");
  2204  000EBC  0EF6               	movlw	low STR_2
  2205  000EBE  0100               	movlb	0	; () banked
  2206  000EC0  6FBD               	movwf	printf@f& (0+255),b
  2207  000EC2  0EFF               	movlw	high STR_2
  2208  000EC4  0100               	movlb	0	; () banked
  2209  000EC6  6FBE               	movwf	(printf@f+1)& (0+255),b
  2210  000EC8  EC09  F000         	call	_printf	;wreg free
  2211                           
  2212                           ;main.c: 148: int lastBatteryTime = time;
  2213  000ECC  C17A  F142         	movff	_time,main@lastBatteryTime
  2214  000ED0  C17B  F143         	movff	_time+1,main@lastBatteryTime+1
  2215                           
  2216                           ;main.c: 150: int cylinderStart = time;
  2217  000ED4  C17A  F130         	movff	_time,main@cylinderStart
  2218  000ED8  C17B  F131         	movff	_time+1,main@cylinderStart+1
  2219                           
  2220                           ;main.c: 151: int duration = 0;
  2221  000EDC  0E00               	movlw	0
  2222  000EDE  0101               	movlb	1	; () banked
  2223  000EE0  6F41               	movwf	(main@duration+1)& (0+255),b
  2224  000EE2  0E00               	movlw	0
  2225  000EE4  6F40               	movwf	main@duration& (0+255),b
  2226                           
  2227                           ;main.c: 153: while(!batteryDetected && !terminate){
  2228  000EE6  D1EF               	goto	l7731
  2229  000EE8                     l7705:
  2230                           
  2231                           ; BSR set to: 1
  2232                           ;main.c: 155: lcdHome();
  2233  000EE8  EC00  F021         	call	_lcdHome	;wreg free
  2234                           
  2235                           ;main.c: 156: printf("time %02ld:%02ld.%01ld     \n",time/600,(time%600)/10,(time%600)%1
      +                          0);
  2236  000EEC  0E58               	movlw	88
  2237  000EEE  6E27               	movwf	___almod@divisor,c
  2238  000EF0  0E02               	movlw	2
  2239  000EF2  6E28               	movwf	___almod@divisor+1,c
  2240  000EF4  0E00               	movlw	0
  2241  000EF6  6E29               	movwf	___almod@divisor+2,c
  2242  000EF8  0E00               	movlw	0
  2243  000EFA  6E2A               	movwf	___almod@divisor+3,c
  2244  000EFC  C17A  F023         	movff	_time,___almod@dividend
  2245  000F00  C17B  F024         	movff	_time+1,___almod@dividend+1
  2246  000F04  C17C  F025         	movff	_time+2,___almod@dividend+2
  2247  000F08  C17D  F026         	movff	_time+3,___almod@dividend+3
  2248  000F0C  EC9A  F01A         	call	___almod	;wreg free
  2249  000F10  C023  F12C         	movff	?___almod,_main$1417
  2250  000F14  C024  F12D         	movff	?___almod+1,_main$1417+1
  2251  000F18  C025  F12E         	movff	?___almod+2,_main$1417+2
  2252  000F1C  C026  F12F         	movff	?___almod+3,_main$1417+3
  2253                           
  2254                           ;main.c: 156: printf("time %02ld:%02ld.%01ld     \n",time/600,(time%600)/10,(time%600)%1
      +                          0);
  2255  000F20  0E87               	movlw	low STR_3
  2256  000F22  0100               	movlb	0	; () banked
  2257  000F24  6FBD               	movwf	printf@f& (0+255),b
  2258  000F26  0EFE               	movlw	high STR_3
  2259  000F28  0100               	movlb	0	; () banked
  2260  000F2A  6FBE               	movwf	(printf@f+1)& (0+255),b
  2261  000F2C  C17A  F02D         	movff	_time,___aldiv@dividend
  2262  000F30  C17B  F02E         	movff	_time+1,___aldiv@dividend+1
  2263  000F34  C17C  F02F         	movff	_time+2,___aldiv@dividend+2
  2264  000F38  C17D  F030         	movff	_time+3,___aldiv@dividend+3
  2265  000F3C  0E58               	movlw	88
  2266  000F3E  6E31               	movwf	___aldiv@divisor,c
  2267  000F40  0E02               	movlw	2
  2268  000F42  6E32               	movwf	___aldiv@divisor+1,c
  2269  000F44  0E00               	movlw	0
  2270  000F46  6E33               	movwf	___aldiv@divisor+2,c
  2271  000F48  0E00               	movlw	0
  2272  000F4A  6E34               	movwf	___aldiv@divisor+3,c
  2273  000F4C  EC15  F019         	call	___aldiv	;wreg free
  2274  000F50  C02D  F0BF         	movff	?___aldiv,?_printf+2
  2275  000F54  C02E  F0C0         	movff	?___aldiv+1,?_printf+3
  2276  000F58  C02F  F0C1         	movff	?___aldiv+2,?_printf+4
  2277  000F5C  C030  F0C2         	movff	?___aldiv+3,?_printf+5
  2278  000F60  0E58               	movlw	88
  2279  000F62  6E27               	movwf	___almod@divisor,c
  2280  000F64  0E02               	movlw	2
  2281  000F66  6E28               	movwf	___almod@divisor+1,c
  2282  000F68  0E00               	movlw	0
  2283  000F6A  6E29               	movwf	___almod@divisor+2,c
  2284  000F6C  0E00               	movlw	0
  2285  000F6E  6E2A               	movwf	___almod@divisor+3,c
  2286  000F70  C17A  F023         	movff	_time,___almod@dividend
  2287  000F74  C17B  F024         	movff	_time+1,___almod@dividend+1
  2288  000F78  C17C  F025         	movff	_time+2,___almod@dividend+2
  2289  000F7C  C17D  F026         	movff	_time+3,___almod@dividend+3
  2290  000F80  EC9A  F01A         	call	___almod	;wreg free
  2291  000F84  C023  F02D         	movff	?___almod,___aldiv@dividend
  2292  000F88  C024  F02E         	movff	?___almod+1,___aldiv@dividend+1
  2293  000F8C  C025  F02F         	movff	?___almod+2,___aldiv@dividend+2
  2294  000F90  C026  F030         	movff	?___almod+3,___aldiv@dividend+3
  2295  000F94  0E0A               	movlw	10
  2296  000F96  6E31               	movwf	___aldiv@divisor,c
  2297  000F98  0E00               	movlw	0
  2298  000F9A  6E32               	movwf	___aldiv@divisor+1,c
  2299  000F9C  0E00               	movlw	0
  2300  000F9E  6E33               	movwf	___aldiv@divisor+2,c
  2301  000FA0  0E00               	movlw	0
  2302  000FA2  6E34               	movwf	___aldiv@divisor+3,c
  2303  000FA4  EC15  F019         	call	___aldiv	;wreg free
  2304  000FA8  C02D  F0C3         	movff	?___aldiv,?_printf+6
  2305  000FAC  C02E  F0C4         	movff	?___aldiv+1,?_printf+7
  2306  000FB0  C02F  F0C5         	movff	?___aldiv+2,?_printf+8
  2307  000FB4  C030  F0C6         	movff	?___aldiv+3,?_printf+9
  2308  000FB8  C12C  F023         	movff	_main$1417,___almod@dividend
  2309  000FBC  C12D  F024         	movff	_main$1417+1,___almod@dividend+1
  2310  000FC0  C12E  F025         	movff	_main$1417+2,___almod@dividend+2
  2311  000FC4  C12F  F026         	movff	_main$1417+3,___almod@dividend+3
  2312  000FC8  0E0A               	movlw	10
  2313  000FCA  6E27               	movwf	___almod@divisor,c
  2314  000FCC  0E00               	movlw	0
  2315  000FCE  6E28               	movwf	___almod@divisor+1,c
  2316  000FD0  0E00               	movlw	0
  2317  000FD2  6E29               	movwf	___almod@divisor+2,c
  2318  000FD4  0E00               	movlw	0
  2319  000FD6  6E2A               	movwf	___almod@divisor+3,c
  2320  000FD8  EC9A  F01A         	call	___almod	;wreg free
  2321  000FDC  C023  F0C7         	movff	?___almod,?_printf+10
  2322  000FE0  C024  F0C8         	movff	?___almod+1,?_printf+11
  2323  000FE4  C025  F0C9         	movff	?___almod+2,?_printf+12
  2324  000FE8  C026  F0CA         	movff	?___almod+3,?_printf+13
  2325  000FEC  EC09  F000         	call	_printf	;wreg free
  2326                           
  2327                           ;main.c: 157: printf("stop in: %d                  ",(1+stoppingTime - (time-lastBattery
      +                          Time) )%600/10);
  2328  000FF0  0E69               	movlw	low STR_4
  2329  000FF2  0100               	movlb	0	; () banked
  2330  000FF4  6FBD               	movwf	printf@f& (0+255),b
  2331  000FF6  0EFE               	movlw	high STR_4
  2332  000FF8  0100               	movlb	0	; () banked
  2333  000FFA  6FBE               	movwf	(printf@f+1)& (0+255),b
  2334  000FFC  0E58               	movlw	88
  2335  000FFE  6E27               	movwf	___almod@divisor,c
  2336  001000  0E02               	movlw	2
  2337  001002  6E28               	movwf	___almod@divisor+1,c
  2338  001004  0E00               	movlw	0
  2339  001006  6E29               	movwf	___almod@divisor+2,c
  2340  001008  0E00               	movlw	0
  2341  00100A  6E2A               	movwf	___almod@divisor+3,c
  2342  00100C  C142  F11F         	movff	main@lastBatteryTime,??_main
  2343  001010  C143  F120         	movff	main@lastBatteryTime+1,??_main+1
  2344  001014  0E00               	movlw	0
  2345  001016  0101               	movlb	1	; () banked
  2346  001018  BF20               	btfsc	(??_main+1)& (0+255),7,b
  2347  00101A  0EFF               	movlw	255
  2348  00101C  6F21               	movwf	(??_main+2)& (0+255),b
  2349  00101E  6F22               	movwf	(??_main+3)& (0+255),b
  2350  001020  0101               	movlb	1	; () banked
  2351  001022  1F1F               	comf	??_main& (0+255),f,b
  2352  001024  1F20               	comf	(??_main+1)& (0+255),f,b
  2353  001026  1F21               	comf	(??_main+2)& (0+255),f,b
  2354  001028  1F22               	comf	(??_main+3)& (0+255),f,b
  2355  00102A  2B1F               	incf	??_main& (0+255),f,b
  2356  00102C  0E00               	movlw	0
  2357  00102E  2320               	addwfc	(??_main+1)& (0+255),f,b
  2358  001030  2321               	addwfc	(??_main+2)& (0+255),f,b
  2359  001032  2322               	addwfc	(??_main+3)& (0+255),f,b
  2360  001034  0101               	movlb	1	; () banked
  2361  001036  517A               	movf	_time& (0+255),w,b
  2362  001038  0101               	movlb	1	; () banked
  2363  00103A  251F               	addwf	??_main& (0+255),w,b
  2364  00103C  0101               	movlb	1	; () banked
  2365  00103E  6F23               	movwf	(??_main+4)& (0+255),b
  2366  001040  0101               	movlb	1	; () banked
  2367  001042  517B               	movf	(_time+1)& (0+255),w,b
  2368  001044  0101               	movlb	1	; () banked
  2369  001046  2120               	addwfc	(??_main+1)& (0+255),w,b
  2370  001048  0101               	movlb	1	; () banked
  2371  00104A  6F24               	movwf	(??_main+5)& (0+255),b
  2372  00104C  0101               	movlb	1	; () banked
  2373  00104E  517C               	movf	(_time+2)& (0+255),w,b
  2374  001050  0101               	movlb	1	; () banked
  2375  001052  2121               	addwfc	(??_main+2)& (0+255),w,b
  2376  001054  0101               	movlb	1	; () banked
  2377  001056  6F25               	movwf	(??_main+6)& (0+255),b
  2378  001058  0101               	movlb	1	; () banked
  2379  00105A  517D               	movf	(_time+3)& (0+255),w,b
  2380  00105C  0101               	movlb	1	; () banked
  2381  00105E  2122               	addwfc	(??_main+3)& (0+255),w,b
  2382  001060  0101               	movlb	1	; () banked
  2383  001062  6F26               	movwf	(??_main+7)& (0+255),b
  2384  001064  0101               	movlb	1	; () banked
  2385  001066  1F23               	comf	(??_main+4)& (0+255),f,b
  2386  001068  1F24               	comf	(??_main+5)& (0+255),f,b
  2387  00106A  1F25               	comf	(??_main+6)& (0+255),f,b
  2388  00106C  1F26               	comf	(??_main+7)& (0+255),f,b
  2389  00106E  2B23               	incf	(??_main+4)& (0+255),f,b
  2390  001070  0E00               	movlw	0
  2391  001072  2324               	addwfc	(??_main+5)& (0+255),f,b
  2392  001074  2325               	addwfc	(??_main+6)& (0+255),f,b
  2393  001076  2326               	addwfc	(??_main+7)& (0+255),f,b
  2394  001078  0E01               	movlw	1
  2395  00107A  0101               	movlb	1	; () banked
  2396  00107C  254C               	addwf	_stoppingTime& (0+255),w,b
  2397  00107E  0101               	movlb	1	; () banked
  2398  001080  6F27               	movwf	(??_main+8)& (0+255),b
  2399  001082  0E00               	movlw	0
  2400  001084  0101               	movlb	1	; () banked
  2401  001086  214D               	addwfc	(_stoppingTime+1)& (0+255),w,b
  2402  001088  0101               	movlb	1	; () banked
  2403  00108A  6F28               	movwf	(??_main+9)& (0+255),b
  2404  00108C  0101               	movlb	1	; () banked
  2405  00108E  6B29               	clrf	(??_main+10)& (0+255),b
  2406  001090  0101               	movlb	1	; () banked
  2407  001092  BF28               	btfsc	(??_main+9)& (0+255),7,b
  2408  001094  0729               	decf	(??_main+10)& (0+255),f,b
  2409  001096  0101               	movlb	1	; () banked
  2410  001098  5129               	movf	(??_main+10)& (0+255),w,b
  2411  00109A  0101               	movlb	1	; () banked
  2412  00109C  6F2A               	movwf	(??_main+11)& (0+255),b
  2413  00109E  0101               	movlb	1	; () banked
  2414  0010A0  5123               	movf	(??_main+4)& (0+255),w,b
  2415  0010A2  0101               	movlb	1	; () banked
  2416  0010A4  2527               	addwf	(??_main+8)& (0+255),w,b
  2417  0010A6  6E23               	movwf	___almod@dividend,c
  2418  0010A8  0101               	movlb	1	; () banked
  2419  0010AA  5124               	movf	(??_main+5)& (0+255),w,b
  2420  0010AC  0101               	movlb	1	; () banked
  2421  0010AE  2128               	addwfc	(??_main+9)& (0+255),w,b
  2422  0010B0  6E24               	movwf	___almod@dividend+1,c
  2423  0010B2  0101               	movlb	1	; () banked
  2424  0010B4  5125               	movf	(??_main+6)& (0+255),w,b
  2425  0010B6  0101               	movlb	1	; () banked
  2426  0010B8  2129               	addwfc	(??_main+10)& (0+255),w,b
  2427  0010BA  6E25               	movwf	___almod@dividend+2,c
  2428  0010BC  0101               	movlb	1	; () banked
  2429  0010BE  5126               	movf	(??_main+7)& (0+255),w,b
  2430  0010C0  0101               	movlb	1	; () banked
  2431  0010C2  212A               	addwfc	(??_main+11)& (0+255),w,b
  2432  0010C4  6E26               	movwf	___almod@dividend+3,c
  2433  0010C6  EC9A  F01A         	call	___almod	;wreg free
  2434  0010CA  C023  F02D         	movff	?___almod,___aldiv@dividend
  2435  0010CE  C024  F02E         	movff	?___almod+1,___aldiv@dividend+1
  2436  0010D2  C025  F02F         	movff	?___almod+2,___aldiv@dividend+2
  2437  0010D6  C026  F030         	movff	?___almod+3,___aldiv@dividend+3
  2438  0010DA  0E0A               	movlw	10
  2439  0010DC  6E31               	movwf	___aldiv@divisor,c
  2440  0010DE  0E00               	movlw	0
  2441  0010E0  6E32               	movwf	___aldiv@divisor+1,c
  2442  0010E2  0E00               	movlw	0
  2443  0010E4  6E33               	movwf	___aldiv@divisor+2,c
  2444  0010E6  0E00               	movlw	0
  2445  0010E8  6E34               	movwf	___aldiv@divisor+3,c
  2446  0010EA  EC15  F019         	call	___aldiv	;wreg free
  2447  0010EE  C02D  F0BF         	movff	?___aldiv,?_printf+2
  2448  0010F2  C02E  F0C0         	movff	?___aldiv+1,?_printf+3
  2449  0010F6  C02F  F0C1         	movff	?___aldiv+2,?_printf+4
  2450  0010FA  C030  F0C2         	movff	?___aldiv+3,?_printf+5
  2451  0010FE  EC09  F000         	call	_printf	;wreg free
  2452                           
  2453                           ;main.c: 158: _delay((unsigned long)((45)*(10000000/4000.0)));
  2454  001102  0E93               	movlw	147
  2455  001104  0101               	movlb	1	; () banked
  2456  001106  6F1F               	movwf	??_main& (0+255),b
  2457  001108  0E19               	movlw	25
  2458  00110A                     u8137:
  2459  00110A  2EE8               	decfsz	wreg,f,c
  2460  00110C  D7FE               	bra	u8137
  2461  00110E  2F1F               	decfsz	??_main& (0+255),f,b
  2462  001110  D7FC               	bra	u8137
  2463                           
  2464                           ;main.c: 161: if(time - cylinderStart >= duration)
  2465  001112  C140  F11F         	movff	main@duration,??_main
  2466  001116  C141  F120         	movff	main@duration+1,??_main+1
  2467  00111A  0E00               	movlw	0
  2468  00111C  0101               	movlb	1	; () banked
  2469  00111E  BF20               	btfsc	(??_main+1)& (0+255),7,b
  2470  001120  0EFF               	movlw	255
  2471  001122  6F21               	movwf	(??_main+2)& (0+255),b
  2472  001124  6F22               	movwf	(??_main+3)& (0+255),b
  2473  001126  C130  F123         	movff	main@cylinderStart,??_main+4
  2474  00112A  C131  F124         	movff	main@cylinderStart+1,??_main+5
  2475  00112E  0E00               	movlw	0
  2476  001130  0101               	movlb	1	; () banked
  2477  001132  BF24               	btfsc	(??_main+5)& (0+255),7,b
  2478  001134  0EFF               	movlw	255
  2479  001136  6F25               	movwf	(??_main+6)& (0+255),b
  2480  001138  6F26               	movwf	(??_main+7)& (0+255),b
  2481  00113A  0101               	movlb	1	; () banked
  2482  00113C  1F23               	comf	(??_main+4)& (0+255),f,b
  2483  00113E  1F24               	comf	(??_main+5)& (0+255),f,b
  2484  001140  1F25               	comf	(??_main+6)& (0+255),f,b
  2485  001142  1F26               	comf	(??_main+7)& (0+255),f,b
  2486  001144  2B23               	incf	(??_main+4)& (0+255),f,b
  2487  001146  0E00               	movlw	0
  2488  001148  2324               	addwfc	(??_main+5)& (0+255),f,b
  2489  00114A  2325               	addwfc	(??_main+6)& (0+255),f,b
  2490  00114C  2326               	addwfc	(??_main+7)& (0+255),f,b
  2491  00114E  0101               	movlb	1	; () banked
  2492  001150  517A               	movf	_time& (0+255),w,b
  2493  001152  0101               	movlb	1	; () banked
  2494  001154  2523               	addwf	(??_main+4)& (0+255),w,b
  2495  001156  0101               	movlb	1	; () banked
  2496  001158  6F27               	movwf	(??_main+8)& (0+255),b
  2497  00115A  0101               	movlb	1	; () banked
  2498  00115C  517B               	movf	(_time+1)& (0+255),w,b
  2499  00115E  0101               	movlb	1	; () banked
  2500  001160  2124               	addwfc	(??_main+5)& (0+255),w,b
  2501  001162  0101               	movlb	1	; () banked
  2502  001164  6F28               	movwf	(??_main+9)& (0+255),b
  2503  001166  0101               	movlb	1	; () banked
  2504  001168  517C               	movf	(_time+2)& (0+255),w,b
  2505  00116A  0101               	movlb	1	; () banked
  2506  00116C  2125               	addwfc	(??_main+6)& (0+255),w,b
  2507  00116E  0101               	movlb	1	; () banked
  2508  001170  6F29               	movwf	(??_main+10)& (0+255),b
  2509  001172  0101               	movlb	1	; () banked
  2510  001174  517D               	movf	(_time+3)& (0+255),w,b
  2511  001176  0101               	movlb	1	; () banked
  2512  001178  2126               	addwfc	(??_main+7)& (0+255),w,b
  2513  00117A  0101               	movlb	1	; () banked
  2514  00117C  6F2A               	movwf	(??_main+11)& (0+255),b
  2515  00117E  0101               	movlb	1	; () banked
  2516  001180  511F               	movf	??_main& (0+255),w,b
  2517  001182  0101               	movlb	1	; () banked
  2518  001184  5D27               	subwf	(??_main+8)& (0+255),w,b
  2519  001186  0101               	movlb	1	; () banked
  2520  001188  5120               	movf	(??_main+1)& (0+255),w,b
  2521  00118A  0101               	movlb	1	; () banked
  2522  00118C  5928               	subwfb	(??_main+9)& (0+255),w,b
  2523  00118E  0101               	movlb	1	; () banked
  2524  001190  5121               	movf	(??_main+2)& (0+255),w,b
  2525  001192  0101               	movlb	1	; () banked
  2526  001194  5929               	subwfb	(??_main+10)& (0+255),w,b
  2527  001196  0101               	movlb	1	; () banked
  2528  001198  512A               	movf	(??_main+11)& (0+255),w,b
  2529  00119A  0A80               	xorlw	128
  2530  00119C  0101               	movlb	1	; () banked
  2531  00119E  6F2B               	movwf	(??_main+12)& (0+255),b
  2532  0011A0  0101               	movlb	1	; () banked
  2533  0011A2  5122               	movf	(??_main+3)& (0+255),w,b
  2534  0011A4  0A80               	xorlw	128
  2535  0011A6  0101               	movlb	1	; () banked
  2536  0011A8  592B               	subwfb	(??_main+12)& (0+255),w,b
  2537  0011AA  A0D8               	btfss	status,0,c
  2538  0011AC  D03F               	goto	l7727
  2539                           
  2540                           ; BSR set to: 1
  2541                           ;main.c: 162: {
  2542                           ;main.c: 163: if(digitalRead(cylinderMotor1)){
  2543  0011AE  0E52               	movlw	low _cylinderMotor1
  2544  0011B0  6E23               	movwf	digitalRead@pin,c
  2545  0011B2  0E01               	movlw	high _cylinderMotor1
  2546  0011B4  6E24               	movwf	digitalRead@pin+1,c
  2547  0011B6  EC78  F016         	call	_digitalRead	;wreg free
  2548  0011BA  5023               	movf	?_digitalRead,w,c
  2549  0011BC  1024               	iorwf	?_digitalRead+1,w,c
  2550  0011BE  B4D8               	btfsc	status,2,c
  2551  0011C0  D019               	goto	l7721
  2552                           
  2553                           ;main.c: 164: digitalWrite(cylinderMotor2, 0);
  2554  0011C2  0E56               	movlw	low _cylinderMotor2
  2555  0011C4  6E23               	movwf	digitalWrite@pin,c
  2556  0011C6  0E01               	movlw	high _cylinderMotor2
  2557  0011C8  6E24               	movwf	digitalWrite@pin+1,c
  2558  0011CA  0E00               	movlw	0
  2559  0011CC  6E26               	movwf	digitalWrite@val+1,c
  2560  0011CE  0E00               	movlw	0
  2561  0011D0  6E25               	movwf	digitalWrite@val,c
  2562  0011D2  EC7B  F019         	call	_digitalWrite	;wreg free
  2563                           
  2564                           ;main.c: 165: digitalWrite(cylinderMotor1, 1);
  2565  0011D6  0E52               	movlw	low _cylinderMotor1
  2566  0011D8  6E23               	movwf	digitalWrite@pin,c
  2567  0011DA  0E01               	movlw	high _cylinderMotor1
  2568  0011DC  6E24               	movwf	digitalWrite@pin+1,c
  2569  0011DE  0E00               	movlw	0
  2570  0011E0  6E26               	movwf	digitalWrite@val+1,c
  2571  0011E2  0E01               	movlw	1
  2572  0011E4  6E25               	movwf	digitalWrite@val,c
  2573  0011E6  EC7B  F019         	call	_digitalWrite	;wreg free
  2574                           
  2575                           ;main.c: 166: duration = cylinderForward;
  2576  0011EA  C146  F140         	movff	_cylinderForward,main@duration
  2577  0011EE  C147  F141         	movff	_cylinderForward+1,main@duration+1
  2578                           
  2579                           ;main.c: 167: }else{
  2580  0011F2  D018               	goto	l7725
  2581  0011F4                     l7721:
  2582                           
  2583                           ;main.c: 168: digitalWrite(cylinderMotor1, 0);
  2584  0011F4  0E52               	movlw	low _cylinderMotor1
  2585  0011F6  6E23               	movwf	digitalWrite@pin,c
  2586  0011F8  0E01               	movlw	high _cylinderMotor1
  2587  0011FA  6E24               	movwf	digitalWrite@pin+1,c
  2588  0011FC  0E00               	movlw	0
  2589  0011FE  6E26               	movwf	digitalWrite@val+1,c
  2590  001200  0E00               	movlw	0
  2591  001202  6E25               	movwf	digitalWrite@val,c
  2592  001204  EC7B  F019         	call	_digitalWrite	;wreg free
  2593                           
  2594                           ;main.c: 169: digitalWrite(cylinderMotor2, 1);
  2595  001208  0E56               	movlw	low _cylinderMotor2
  2596  00120A  6E23               	movwf	digitalWrite@pin,c
  2597  00120C  0E01               	movlw	high _cylinderMotor2
  2598  00120E  6E24               	movwf	digitalWrite@pin+1,c
  2599  001210  0E00               	movlw	0
  2600  001212  6E26               	movwf	digitalWrite@val+1,c
  2601  001214  0E01               	movlw	1
  2602  001216  6E25               	movwf	digitalWrite@val,c
  2603  001218  EC7B  F019         	call	_digitalWrite	;wreg free
  2604                           
  2605                           ;main.c: 170: duration = cylinderBackward;
  2606  00121C  C144  F140         	movff	_cylinderBackward,main@duration
  2607  001220  C145  F141         	movff	_cylinderBackward+1,main@duration+1
  2608  001224                     l7725:
  2609                           
  2610                           ;main.c: 171: }
  2611                           ;main.c: 173: cylinderStart = time;
  2612  001224  C17A  F130         	movff	_time,main@cylinderStart
  2613  001228  C17B  F131         	movff	_time+1,main@cylinderStart+1
  2614  00122C                     l7727:
  2615                           
  2616                           ;main.c: 174: }
  2617                           ;main.c: 176: if(time - lastBatteryTime > stoppingTime)
  2618  00122C  C142  F11F         	movff	main@lastBatteryTime,??_main
  2619  001230  C143  F120         	movff	main@lastBatteryTime+1,??_main+1
  2620  001234  0E00               	movlw	0
  2621  001236  0101               	movlb	1	; () banked
  2622  001238  BF20               	btfsc	(??_main+1)& (0+255),7,b
  2623  00123A  0EFF               	movlw	255
  2624  00123C  6F21               	movwf	(??_main+2)& (0+255),b
  2625  00123E  6F22               	movwf	(??_main+3)& (0+255),b
  2626  001240  0101               	movlb	1	; () banked
  2627  001242  1F1F               	comf	??_main& (0+255),f,b
  2628  001244  1F20               	comf	(??_main+1)& (0+255),f,b
  2629  001246  1F21               	comf	(??_main+2)& (0+255),f,b
  2630  001248  1F22               	comf	(??_main+3)& (0+255),f,b
  2631  00124A  2B1F               	incf	??_main& (0+255),f,b
  2632  00124C  0E00               	movlw	0
  2633  00124E  2320               	addwfc	(??_main+1)& (0+255),f,b
  2634  001250  2321               	addwfc	(??_main+2)& (0+255),f,b
  2635  001252  2322               	addwfc	(??_main+3)& (0+255),f,b
  2636  001254  0101               	movlb	1	; () banked
  2637  001256  517A               	movf	_time& (0+255),w,b
  2638  001258  0101               	movlb	1	; () banked
  2639  00125A  251F               	addwf	??_main& (0+255),w,b
  2640  00125C  0101               	movlb	1	; () banked
  2641  00125E  6F23               	movwf	(??_main+4)& (0+255),b
  2642  001260  0101               	movlb	1	; () banked
  2643  001262  517B               	movf	(_time+1)& (0+255),w,b
  2644  001264  0101               	movlb	1	; () banked
  2645  001266  2120               	addwfc	(??_main+1)& (0+255),w,b
  2646  001268  0101               	movlb	1	; () banked
  2647  00126A  6F24               	movwf	(??_main+5)& (0+255),b
  2648  00126C  0101               	movlb	1	; () banked
  2649  00126E  517C               	movf	(_time+2)& (0+255),w,b
  2650  001270  0101               	movlb	1	; () banked
  2651  001272  2121               	addwfc	(??_main+2)& (0+255),w,b
  2652  001274  0101               	movlb	1	; () banked
  2653  001276  6F25               	movwf	(??_main+6)& (0+255),b
  2654  001278  0101               	movlb	1	; () banked
  2655  00127A  517D               	movf	(_time+3)& (0+255),w,b
  2656  00127C  0101               	movlb	1	; () banked
  2657  00127E  2122               	addwfc	(??_main+3)& (0+255),w,b
  2658  001280  0101               	movlb	1	; () banked
  2659  001282  6F26               	movwf	(??_main+7)& (0+255),b
  2660  001284  0E00               	movlw	0
  2661  001286  0101               	movlb	1	; () banked
  2662  001288  BF4D               	btfsc	(_stoppingTime+1)& (0+255),7,b
  2663  00128A  0EFF               	movlw	255
  2664  00128C  0101               	movlb	1	; () banked
  2665  00128E  6F28               	movwf	(??_main+9)& (0+255),b
  2666  001290  0A80               	xorlw	128
  2667  001292  6F27               	movwf	(??_main+8)& (0+255),b
  2668  001294  0101               	movlb	1	; () banked
  2669  001296  5123               	movf	(??_main+4)& (0+255),w,b
  2670  001298  0101               	movlb	1	; () banked
  2671  00129A  5D4C               	subwf	_stoppingTime& (0+255),w,b
  2672  00129C  0101               	movlb	1	; () banked
  2673  00129E  5124               	movf	(??_main+5)& (0+255),w,b
  2674  0012A0  0101               	movlb	1	; () banked
  2675  0012A2  594D               	subwfb	(_stoppingTime+1)& (0+255),w,b
  2676  0012A4  0101               	movlb	1	; () banked
  2677  0012A6  5125               	movf	(??_main+6)& (0+255),w,b
  2678  0012A8  0101               	movlb	1	; () banked
  2679  0012AA  5928               	subwfb	(??_main+9)& (0+255),w,b
  2680  0012AC  0101               	movlb	1	; () banked
  2681  0012AE  5126               	movf	(??_main+7)& (0+255),w,b
  2682  0012B0  0A80               	xorlw	128
  2683  0012B2  0101               	movlb	1	; () banked
  2684  0012B4  5927               	subwfb	(??_main+8)& (0+255),w,b
  2685  0012B6  B0D8               	btfsc	status,0,c
  2686  0012B8  D006               	goto	l7731
  2687                           
  2688                           ; BSR set to: 1
  2689                           ;main.c: 177: {
  2690                           ;main.c: 178: terminate = 1;
  2691  0012BA  0E00               	movlw	0
  2692  0012BC  0101               	movlb	1	; () banked
  2693  0012BE  6F89               	movwf	(_terminate+1)& (0+255),b
  2694  0012C0  0E01               	movlw	1
  2695  0012C2  6F88               	movwf	_terminate& (0+255),b
  2696                           
  2697                           ;main.c: 179: break;
  2698  0012C4  D00C               	goto	l7735
  2699  0012C6                     l7731:
  2700                           
  2701                           ; BSR set to: 1
  2702  0012C6  0101               	movlb	1	; () banked
  2703  0012C8  517E               	movf	_batteryDetected& (0+255),w,b
  2704  0012CA  0101               	movlb	1	; () banked
  2705  0012CC  117F               	iorwf	(_batteryDetected+1)& (0+255),w,b
  2706  0012CE  A4D8               	btfss	status,2,c
  2707  0012D0  D006               	goto	l7735
  2708                           
  2709                           ; BSR set to: 1
  2710  0012D2  0101               	movlb	1	; () banked
  2711  0012D4  5188               	movf	_terminate& (0+255),w,b
  2712  0012D6  0101               	movlb	1	; () banked
  2713  0012D8  1189               	iorwf	(_terminate+1)& (0+255),w,b
  2714  0012DA  B4D8               	btfsc	status,2,c
  2715  0012DC  D605               	goto	l7705
  2716  0012DE                     l7735:
  2717                           
  2718                           ; BSR set to: 1
  2719                           ;main.c: 180: }
  2720                           ;main.c: 181: }
  2721                           ;main.c: 183: if(terminate)break;
  2722  0012DE  0101               	movlb	1	; () banked
  2723  0012E0  5188               	movf	_terminate& (0+255),w,b
  2724  0012E2  0101               	movlb	1	; () banked
  2725  0012E4  1189               	iorwf	(_terminate+1)& (0+255),w,b
  2726  0012E6  A4D8               	btfss	status,2,c
  2727  0012E8  D00C               	goto	l7745
  2728                           
  2729                           ; BSR set to: 1
  2730                           ;main.c: 185: sortBattery();
  2731                           
  2732                           ; BSR set to: 1
  2733                           
  2734                           ; BSR set to: 1
  2735  0012EA  ECD5  F009         	call	_sortBattery	;wreg free
  2736                           
  2737                           ;main.c: 188: lastBatteryTime = time;
  2738  0012EE  C17A  F142         	movff	_time,main@lastBatteryTime
  2739  0012F2  C17B  F143         	movff	_time+1,main@lastBatteryTime+1
  2740                           
  2741                           ;main.c: 189: batteryDetected = 0;
  2742  0012F6  0E00               	movlw	0
  2743  0012F8  0101               	movlb	1	; () banked
  2744  0012FA  6F7F               	movwf	(_batteryDetected+1)& (0+255),b
  2745  0012FC  0E00               	movlw	0
  2746  0012FE  6F7E               	movwf	_batteryDetected& (0+255),b
  2747                           
  2748                           ; BSR set to: 1
  2749  001300  D5DB               	goto	l7697
  2750  001302                     l7745:
  2751                           
  2752                           ; BSR set to: 1
  2753                           ;main.c: 190: }
  2754                           ;main.c: 193: setAngle(conveyorServo, 90);
  2755  001302  0E4E               	movlw	low _conveyorServo
  2756  001304  0100               	movlb	0	; () banked
  2757  001306  6FD4               	movwf	setAngle@motor& (0+255),b
  2758  001308  0E01               	movlw	high _conveyorServo
  2759  00130A  0100               	movlb	0	; () banked
  2760  00130C  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2761  00130E  0E00               	movlw	0
  2762  001310  0100               	movlb	0	; () banked
  2763  001312  6FD7               	movwf	(setAngle@angle+1)& (0+255),b
  2764  001314  0E5A               	movlw	90
  2765  001316  6FD6               	movwf	setAngle@angle& (0+255),b
  2766  001318  EC44  F018         	call	_setAngle	;wreg free
  2767                           
  2768                           ;main.c: 194: digitalWrite(cylinderMotor1, 0);
  2769  00131C  0E52               	movlw	low _cylinderMotor1
  2770  00131E  6E23               	movwf	digitalWrite@pin,c
  2771  001320  0E01               	movlw	high _cylinderMotor1
  2772  001322  6E24               	movwf	digitalWrite@pin+1,c
  2773  001324  0E00               	movlw	0
  2774  001326  6E26               	movwf	digitalWrite@val+1,c
  2775  001328  0E00               	movlw	0
  2776  00132A  6E25               	movwf	digitalWrite@val,c
  2777  00132C  EC7B  F019         	call	_digitalWrite	;wreg free
  2778                           
  2779                           ;main.c: 195: digitalWrite(cylinderMotor2, 0);
  2780  001330  0E56               	movlw	low _cylinderMotor2
  2781  001332  6E23               	movwf	digitalWrite@pin,c
  2782  001334  0E01               	movlw	high _cylinderMotor2
  2783  001336  6E24               	movwf	digitalWrite@pin+1,c
  2784  001338  0E00               	movlw	0
  2785  00133A  6E26               	movwf	digitalWrite@val+1,c
  2786  00133C  0E00               	movlw	0
  2787  00133E  6E25               	movwf	digitalWrite@val,c
  2788  001340  EC7B  F019         	call	_digitalWrite	;wreg free
  2789                           
  2790                           ;main.c: 198: int run[7];
  2791                           ;main.c: 199: run[0] = time>>8;
  2792  001344  C17B  F132         	movff	_time+1,main@run
  2793  001348  C17C  F133         	movff	_time+2,main@run+1
  2794                           
  2795                           ;main.c: 200: run[1] = time&0xff;
  2796  00134C  0101               	movlb	1	; () banked
  2797  00134E  517A               	movf	_time& (0+255),w,b
  2798  001350  0101               	movlb	1	; () banked
  2799  001352  6F34               	movwf	(main@run+2)& (0+255),b
  2800  001354  6B35               	clrf	(main@run+3)& (0+255),b
  2801                           
  2802                           ; BSR set to: 1
  2803                           ;main.c: 201: run[2] = n_AA;
  2804  001356  C182  F136         	movff	_n_AA,main@run+4
  2805  00135A  C183  F137         	movff	_n_AA+1,main@run+5
  2806                           
  2807                           ; BSR set to: 1
  2808                           ;main.c: 202: run[3] = n_9V;
  2809  00135E  C180  F138         	movff	_n_9V,main@run+6
  2810  001362  C181  F139         	movff	_n_9V+1,main@run+7
  2811                           
  2812                           ; BSR set to: 1
  2813                           ;main.c: 203: run[4] = n_C;
  2814  001366  C184  F13A         	movff	_n_C,main@run+8
  2815  00136A  C185  F13B         	movff	_n_C+1,main@run+9
  2816                           
  2817                           ; BSR set to: 1
  2818                           ;main.c: 204: run[5] = n_OTHER;
  2819  00136E  C186  F13C         	movff	_n_OTHER,main@run+10
  2820  001372  C187  F13D         	movff	_n_OTHER+1,main@run+11
  2821                           
  2822                           ; BSR set to: 1
  2823                           ;main.c: 206: saveNewRun(run);
  2824  001376  0E32               	movlw	low main@run
  2825  001378  0100               	movlb	0	; () banked
  2826  00137A  6F89               	movwf	saveNewRun@data& (0+255),b
  2827  00137C  0E01               	movlw	high main@run
  2828  00137E  0100               	movlb	0	; () banked
  2829  001380  6F8A               	movwf	(saveNewRun@data+1)& (0+255),b
  2830  001382  EC62  F017         	call	_saveNewRun	;wreg free
  2831                           
  2832                           ;main.c: 207: showRunTime(run);
  2833  001386  0E32               	movlw	low main@run
  2834  001388  0100               	movlb	0	; () banked
  2835  00138A  6FEF               	movwf	showRunTime@run& (0+255),b
  2836  00138C  0E01               	movlw	high main@run
  2837  00138E  0100               	movlb	0	; () banked
  2838  001390  6FF0               	movwf	(showRunTime@run+1)& (0+255),b
  2839  001392  ECFC  F010         	call	_showRunTime	;wreg free
  2840                           
  2841                           ;main.c: 208: showRunStats(run);
  2842  001396  0E32               	movlw	low main@run
  2843  001398  0100               	movlb	0	; () banked
  2844  00139A  6FEF               	movwf	showRunStats@run& (0+255),b
  2845  00139C  0E01               	movlw	high main@run
  2846  00139E  0100               	movlb	0	; () banked
  2847  0013A0  6FF0               	movwf	(showRunStats@run+1)& (0+255),b
  2848  0013A2  ECF0  F01A         	call	_showRunStats	;wreg free
  2849  0013A6  D535               	goto	l7679
  2850  0013A8                     l170:
  2851  0013A8  D7FF               	goto	l170
  2852  0013AA                     __end_of_main:
  2853                           	opt stack 0
  2854                           tblptru	equ	0xFF8
  2855                           tblptrh	equ	0xFF7
  2856                           tblptrl	equ	0xFF6
  2857                           tablat	equ	0xFF5
  2858                           postinc0	equ	0xFEE
  2859                           wreg	equ	0xFE8
  2860                           postdec1	equ	0xFE5
  2861                           fsr1l	equ	0xFE1
  2862                           status	equ	0xFD8
  2863                           
  2864 ;; *************** function _sortBattery *****************
  2865 ;; Defined at:
  2866 ;;		line 216 in file "main.c"
  2867 ;; Parameters:    Size  Location     Type
  2868 ;;		None
  2869 ;; Auto vars:     Size  Location     Type
  2870 ;;  V               3   22[BANK1 ] float 
  2871 ;;  i               2   18[BANK1 ] int 
  2872 ;;  i               3   25[BANK1 ] float 
  2873 ;;  V               3   28[BANK1 ] float 
  2874 ;;  V_max           3   15[BANK1 ] float 
  2875 ;;  resolution      3   12[BANK1 ] float 
  2876 ;;  Vcc             3    9[BANK1 ] float 
  2877 ;;  V_float         3    2[BANK1 ] float 
  2878 ;;  targetAngle     2   20[BANK1 ] int 
  2879 ;;  signal          2    7[BANK1 ] int 
  2880 ;;  pos_v_counte    2    5[BANK1 ] int 
  2881 ;; Return value:  Size  Location     Type
  2882 ;;                  1    wreg      void 
  2883 ;; Registers used:
  2884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2885 ;; Tracked objects:
  2886 ;;		On entry : 0/0
  2887 ;;		On exit  : 0/0
  2888 ;;		Unchanged: 0/0
  2889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2891 ;;      Locals:         0       0      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2892 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2893 ;;      Totals:         0       2      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2894 ;;Total ram usage:       33 bytes
  2895 ;; Hardware stack levels used:    1
  2896 ;; Hardware stack levels required when called:    8
  2897 ;; This function calls:
  2898 ;;		___altoft
  2899 ;;		___awtoft
  2900 ;;		___ftdiv
  2901 ;;		___ftge
  2902 ;;		___ftmul
  2903 ;;		___ftsub
  2904 ;;		___fttol
  2905 ;;		_analogRead
  2906 ;;		_digitalRead
  2907 ;;		_digitalWrite
  2908 ;;		_lcdClear
  2909 ;;		_printf
  2910 ;;		_readKeypad
  2911 ;;		_setAngle
  2912 ;; This function is called by:
  2913 ;;		_main
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           	psect	text1
  2918  0013AA                     __ptext1:
  2919                           	opt stack 0
  2920  0013AA                     _sortBattery:
  2921                           	opt stack 22
  2922                           
  2923                           ;main.c: 219: setAngle(conveyorServo, 90);
  2924                           
  2925                           ;incstack = 0
  2926  0013AA  0E4E               	movlw	low _conveyorServo
  2927  0013AC  0100               	movlb	0	; () banked
  2928  0013AE  6FD4               	movwf	setAngle@motor& (0+255),b
  2929  0013B0  0E01               	movlw	high _conveyorServo
  2930  0013B2  0100               	movlb	0	; () banked
  2931  0013B4  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  2932  0013B6  0E00               	movlw	0
  2933  0013B8  0100               	movlb	0	; () banked
  2934  0013BA  6FD7               	movwf	(setAngle@angle+1)& (0+255),b
  2935  0013BC  0E5A               	movlw	90
  2936  0013BE  6FD6               	movwf	setAngle@angle& (0+255),b
  2937  0013C0  EC44  F018         	call	_setAngle	;wreg free
  2938                           
  2939                           ;main.c: 220: digitalWrite(cylinderMotor1, 0);
  2940  0013C4  0E52               	movlw	low _cylinderMotor1
  2941  0013C6  6E23               	movwf	digitalWrite@pin,c
  2942  0013C8  0E01               	movlw	high _cylinderMotor1
  2943  0013CA  6E24               	movwf	digitalWrite@pin+1,c
  2944  0013CC  0E00               	movlw	0
  2945  0013CE  6E26               	movwf	digitalWrite@val+1,c
  2946  0013D0  0E00               	movlw	0
  2947  0013D2  6E25               	movwf	digitalWrite@val,c
  2948  0013D4  EC7B  F019         	call	_digitalWrite	;wreg free
  2949                           
  2950                           ;main.c: 221: digitalWrite(cylinderMotor2, 0);
  2951  0013D8  0E56               	movlw	low _cylinderMotor2
  2952  0013DA  6E23               	movwf	digitalWrite@pin,c
  2953  0013DC  0E01               	movlw	high _cylinderMotor2
  2954  0013DE  6E24               	movwf	digitalWrite@pin+1,c
  2955  0013E0  0E00               	movlw	0
  2956  0013E2  6E26               	movwf	digitalWrite@val+1,c
  2957  0013E4  0E00               	movlw	0
  2958  0013E6  6E25               	movwf	digitalWrite@val,c
  2959  0013E8  EC7B  F019         	call	_digitalWrite	;wreg free
  2960                           
  2961                           ;main.c: 224: _delay((unsigned long)((1000)*(10000000/4000.0)));
  2962  0013EC  0E0D               	movlw	13
  2963  0013EE  0100               	movlb	0	; () banked
  2964  0013F0  6FF0               	movwf	(??_sortBattery+1)& (0+255),b
  2965  0013F2  0EAF               	movlw	175
  2966  0013F4  0100               	movlb	0	; () banked
  2967  0013F6  6FEF               	movwf	??_sortBattery& (0+255),b
  2968  0013F8  0EB6               	movlw	182
  2969  0013FA                     u8147:
  2970  0013FA  2EE8               	decfsz	wreg,f,c
  2971  0013FC  D7FE               	bra	u8147
  2972  0013FE  2FEF               	decfsz	??_sortBattery& (0+255),f,b
  2973  001400  D7FC               	bra	u8147
  2974  001402  2FF0               	decfsz	(??_sortBattery+1)& (0+255),f,b
  2975  001404  D7FA               	bra	u8147
  2976  001406  F000               	nop	
  2977                           
  2978                           ;main.c: 226: float Vcc = 5.00;
  2979  001408  0E00               	movlw	0
  2980  00140A  0101               	movlb	1	; () banked
  2981  00140C  6F09               	movwf	sortBattery@Vcc& (0+255),b
  2982  00140E  0EA0               	movlw	160
  2983  001410  0101               	movlb	1	; () banked
  2984  001412  6F0A               	movwf	(sortBattery@Vcc+1)& (0+255),b
  2985  001414  0E40               	movlw	64
  2986  001416  0101               	movlb	1	; () banked
  2987  001418  6F0B               	movwf	(sortBattery@Vcc+2)& (0+255),b
  2988                           
  2989                           ; BSR set to: 1
  2990                           ;main.c: 227: float resolution = (1<<10) - 1;
  2991  00141A  0EC0               	movlw	192
  2992  00141C  0101               	movlb	1	; () banked
  2993  00141E  6F0C               	movwf	sortBattery@resolution& (0+255),b
  2994  001420  0E7F               	movlw	127
  2995  001422  0101               	movlb	1	; () banked
  2996  001424  6F0D               	movwf	(sortBattery@resolution+1)& (0+255),b
  2997  001426  0E44               	movlw	68
  2998  001428  0101               	movlb	1	; () banked
  2999  00142A  6F0E               	movwf	(sortBattery@resolution+2)& (0+255),b
  3000                           
  3001                           ; BSR set to: 1
  3002                           ;main.c: 228: float V_max = 0;
  3003  00142C  0E00               	movlw	0
  3004  00142E  0101               	movlb	1	; () banked
  3005  001430  6F0F               	movwf	sortBattery@V_max& (0+255),b
  3006  001432  0E00               	movlw	0
  3007  001434  0101               	movlb	1	; () banked
  3008  001436  6F10               	movwf	(sortBattery@V_max+1)& (0+255),b
  3009  001438  0E00               	movlw	0
  3010  00143A  0101               	movlb	1	; () banked
  3011  00143C  6F11               	movwf	(sortBattery@V_max+2)& (0+255),b
  3012                           
  3013                           ; BSR set to: 1
  3014                           ;main.c: 229: float V_float = 0;
  3015  00143E  0E00               	movlw	0
  3016  001440  0101               	movlb	1	; () banked
  3017  001442  6F02               	movwf	sortBattery@V_float& (0+255),b
  3018  001444  0E00               	movlw	0
  3019  001446  0101               	movlb	1	; () banked
  3020  001448  6F03               	movwf	(sortBattery@V_float+1)& (0+255),b
  3021  00144A  0E00               	movlw	0
  3022  00144C  0101               	movlb	1	; () banked
  3023  00144E  6F04               	movwf	(sortBattery@V_float+2)& (0+255),b
  3024                           
  3025                           ; BSR set to: 1
  3026                           ;main.c: 230: int pos_v_counter = 1;
  3027  001450  0E00               	movlw	0
  3028  001452  0101               	movlb	1	; () banked
  3029  001454  6F06               	movwf	(sortBattery@pos_v_counter+1)& (0+255),b
  3030  001456  0E01               	movlw	1
  3031  001458  6F05               	movwf	sortBattery@pos_v_counter& (0+255),b
  3032                           
  3033                           ; BSR set to: 1
  3034                           ;main.c: 231: int signal = 0;
  3035  00145A  0E00               	movlw	0
  3036  00145C  0101               	movlb	1	; () banked
  3037  00145E  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  3038  001460  0E00               	movlw	0
  3039  001462  6F07               	movwf	sortBattery@signal& (0+255),b
  3040                           
  3041                           ; BSR set to: 1
  3042                           ;main.c: 235: for(float i = (float)padAngle_NEUTRAL; i > padAngle_CLOSE; i -= 0.1) {
  3043  001464  C148  F02B         	movff	_padAngle_NEUTRAL,___awtoft@c
  3044  001468  C149  F02C         	movff	_padAngle_NEUTRAL+1,___awtoft@c+1
  3045  00146C  ECF1  F01F         	call	___awtoft	;wreg free
  3046  001470  C02B  F119         	movff	?___awtoft,sortBattery@i
  3047  001474  C02C  F11A         	movff	?___awtoft+1,sortBattery@i+1
  3048  001478  C02D  F11B         	movff	?___awtoft+2,sortBattery@i+2
  3049  00147C  D0F6               	goto	l7581
  3050  00147E                     l7555:
  3051                           
  3052                           ;main.c: 236: setAngle(padServo, i);
  3053  00147E  C119  F0AE         	movff	sortBattery@i,___fttol@f1
  3054  001482  C11A  F0AF         	movff	sortBattery@i+1,___fttol@f1+1
  3055  001486  C11B  F0B0         	movff	sortBattery@i+2,___fttol@f1+2
  3056  00148A  EC13  F013         	call	___fttol	;wreg free
  3057  00148E  C0AE  F100         	movff	?___fttol,_sortBattery$1418
  3058  001492  C0AF  F101         	movff	?___fttol+1,_sortBattery$1418+1
  3059                           
  3060                           ;main.c: 236: setAngle(padServo, i);
  3061  001496  0E62               	movlw	low _padServo
  3062  001498  0100               	movlb	0	; () banked
  3063  00149A  6FD4               	movwf	setAngle@motor& (0+255),b
  3064  00149C  0E01               	movlw	high _padServo
  3065  00149E  0100               	movlb	0	; () banked
  3066  0014A0  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3067  0014A2  C100  F0D6         	movff	_sortBattery$1418,setAngle@angle
  3068  0014A6  C101  F0D7         	movff	_sortBattery$1418+1,setAngle@angle+1
  3069  0014AA  EC44  F018         	call	_setAngle	;wreg free
  3070                           
  3071                           ;main.c: 237: _delay((unsigned long)((100)*(10000000/4000000.0)));
  3072  0014AE  0E53               	movlw	83
  3073  0014B0                     u8157:
  3074  0014B0  2EE8               	decfsz	wreg,f,c
  3075  0014B2  D7FE               	bra	u8157
  3076  0014B4  F000               	nop	
  3077                           
  3078                           ;main.c: 238: digitalWrite(AA_float, 1);
  3079  0014B6  0E4E               	movlw	low _AA_float
  3080  0014B8  6E23               	movwf	digitalWrite@pin,c
  3081  0014BA  0E00               	movlw	high _AA_float
  3082  0014BC  6E24               	movwf	digitalWrite@pin+1,c
  3083  0014BE  0E00               	movlw	0
  3084  0014C0  6E26               	movwf	digitalWrite@val+1,c
  3085  0014C2  0E01               	movlw	1
  3086  0014C4  6E25               	movwf	digitalWrite@val,c
  3087  0014C6  EC7B  F019         	call	_digitalWrite	;wreg free
  3088                           
  3089                           ;main.c: 239: float V = analogRead(padPin3[1]) / resolution * Vcc;
  3090  0014CA  C10C  F038         	movff	sortBattery@resolution,___ftdiv@f2
  3091  0014CE  C10D  F039         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  3092  0014D2  C10E  F03A         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  3093  0014D6  C054  F023         	movff	_padPin3+2,analogRead@channel
  3094  0014DA  C055  F024         	movff	_padPin3+3,analogRead@channel+1
  3095  0014DE  ECD5  F01F         	call	_analogRead	;wreg free
  3096  0014E2  C023  F02B         	movff	?_analogRead,___altoft@c
  3097  0014E6  C024  F02C         	movff	?_analogRead+1,___altoft@c+1
  3098  0014EA  C025  F02D         	movff	?_analogRead+2,___altoft@c+2
  3099  0014EE  C026  F02E         	movff	?_analogRead+3,___altoft@c+3
  3100  0014F2  ECDB  F01C         	call	___altoft	;wreg free
  3101  0014F6  C02B  F035         	movff	?___altoft,___ftdiv@f1
  3102  0014FA  C02C  F036         	movff	?___altoft+1,___ftdiv@f1+1
  3103  0014FE  C02D  F037         	movff	?___altoft+2,___ftdiv@f1+2
  3104  001502  EC6A  F015         	call	___ftdiv	;wreg free
  3105  001506  C035  F089         	movff	?___ftdiv,___ftmul@f1
  3106  00150A  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
  3107  00150E  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
  3108  001512  C109  F08C         	movff	sortBattery@Vcc,___ftmul@f2
  3109  001516  C10A  F08D         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  3110  00151A  C10B  F08E         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  3111  00151E  ECB8  F011         	call	___ftmul	;wreg free
  3112  001522  C089  F116         	movff	?___ftmul,sortBattery@V
  3113  001526  C08A  F117         	movff	?___ftmul+1,sortBattery@V+1
  3114  00152A  C08B  F118         	movff	?___ftmul+2,sortBattery@V+2
  3115                           
  3116                           ;main.c: 241: if(V > 0.1)pos_v_counter++;
  3117  00152E  0ECD               	movlw	205
  3118  001530  6E2F               	movwf	___ftge@ff1,c
  3119  001532  0ECC               	movlw	204
  3120  001534  6E30               	movwf	___ftge@ff1+1,c
  3121  001536  0E3D               	movlw	61
  3122  001538  6E31               	movwf	___ftge@ff1+2,c
  3123  00153A  C116  F032         	movff	sortBattery@V,___ftge@ff2
  3124  00153E  C117  F033         	movff	sortBattery@V+1,___ftge@ff2+1
  3125  001542  C118  F034         	movff	sortBattery@V+2,___ftge@ff2+2
  3126  001546  EC8D  F01B         	call	___ftge	;wreg free
  3127  00154A  B0D8               	btfsc	status,0,c
  3128  00154C  D003               	goto	l7569
  3129  00154E  0101               	movlb	1	; () banked
  3130  001550  4B05               	infsnz	sortBattery@pos_v_counter& (0+255),f,b
  3131  001552  2B06               	incf	(sortBattery@pos_v_counter+1)& (0+255),f,b
  3132  001554                     l7569:
  3133                           
  3134                           ;main.c: 243: if(V > V_max) {
  3135  001554  C10F  F02F         	movff	sortBattery@V_max,___ftge@ff1
  3136  001558  C110  F030         	movff	sortBattery@V_max+1,___ftge@ff1+1
  3137  00155C  C111  F031         	movff	sortBattery@V_max+2,___ftge@ff1+2
  3138  001560  C116  F032         	movff	sortBattery@V,___ftge@ff2
  3139  001564  C117  F033         	movff	sortBattery@V+1,___ftge@ff2+1
  3140  001568  C118  F034         	movff	sortBattery@V+2,___ftge@ff2+2
  3141  00156C  EC8D  F01B         	call	___ftge	;wreg free
  3142  001570  B0D8               	btfsc	status,0,c
  3143  001572  D064               	goto	l7579
  3144                           
  3145                           ;main.c: 244: signal = digitalRead(padPin1)<<1;
  3146  001574  0E5A               	movlw	low _padPin1
  3147  001576  6E23               	movwf	digitalRead@pin,c
  3148  001578  0E01               	movlw	high _padPin1
  3149  00157A  6E24               	movwf	digitalRead@pin+1,c
  3150  00157C  EC78  F016         	call	_digitalRead	;wreg free
  3151  001580  90D8               	bcf	status,0,c
  3152  001582  3423               	rlcf	?_digitalRead,w,c
  3153  001584  0101               	movlb	1	; () banked
  3154  001586  6F07               	movwf	sortBattery@signal& (0+255),b
  3155  001588  3424               	rlcf	?_digitalRead+1,w,c
  3156  00158A  0101               	movlb	1	; () banked
  3157  00158C  6F08               	movwf	(sortBattery@signal+1)& (0+255),b
  3158                           
  3159                           ;main.c: 245: signal |= digitalRead(padPin2)<<0;
  3160  00158E  0E5E               	movlw	low _padPin2
  3161  001590  6E23               	movwf	digitalRead@pin,c
  3162  001592  0E01               	movlw	high _padPin2
  3163  001594  6E24               	movwf	digitalRead@pin+1,c
  3164  001596  EC78  F016         	call	_digitalRead	;wreg free
  3165  00159A  5023               	movf	?_digitalRead,w,c
  3166  00159C  0101               	movlb	1	; () banked
  3167  00159E  1307               	iorwf	sortBattery@signal& (0+255),f,b
  3168  0015A0  5024               	movf	?_digitalRead+1,w,c
  3169  0015A2  0101               	movlb	1	; () banked
  3170  0015A4  1308               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  3171                           
  3172                           ; BSR set to: 1
  3173                           ;main.c: 247: V_max = V;
  3174  0015A6  C116  F10F         	movff	sortBattery@V,sortBattery@V_max
  3175  0015AA  C117  F110         	movff	sortBattery@V+1,sortBattery@V_max+1
  3176  0015AE  C118  F111         	movff	sortBattery@V+2,sortBattery@V_max+2
  3177                           
  3178                           ;main.c: 250: digitalWrite(AA_float, 0);
  3179  0015B2  0E4E               	movlw	low _AA_float
  3180  0015B4  6E23               	movwf	digitalWrite@pin,c
  3181  0015B6  0E00               	movlw	high _AA_float
  3182  0015B8  6E24               	movwf	digitalWrite@pin+1,c
  3183  0015BA  0E00               	movlw	0
  3184  0015BC  6E26               	movwf	digitalWrite@val+1,c
  3185  0015BE  0E00               	movlw	0
  3186  0015C0  6E25               	movwf	digitalWrite@val,c
  3187  0015C2  EC7B  F019         	call	_digitalWrite	;wreg free
  3188                           
  3189                           ;main.c: 251: _delay((unsigned long)((1)*(10000000/4000.0)));
  3190  0015C6  0E04               	movlw	4
  3191  0015C8  0100               	movlb	0	; () banked
  3192  0015CA  6FEF               	movwf	??_sortBattery& (0+255),b
  3193  0015CC  0E3D               	movlw	61
  3194  0015CE                     u8167:
  3195  0015CE  2EE8               	decfsz	wreg,f,c
  3196  0015D0  D7FE               	bra	u8167
  3197  0015D2  2FEF               	decfsz	??_sortBattery& (0+255),f,b
  3198  0015D4  D7FC               	bra	u8167
  3199  0015D6  D000               	nop2	
  3200                           
  3201                           ;main.c: 252: V_float = analogRead(padPin3[1]) / resolution * Vcc;
  3202  0015D8  C10C  F038         	movff	sortBattery@resolution,___ftdiv@f2
  3203  0015DC  C10D  F039         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  3204  0015E0  C10E  F03A         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  3205  0015E4  C054  F023         	movff	_padPin3+2,analogRead@channel
  3206  0015E8  C055  F024         	movff	_padPin3+3,analogRead@channel+1
  3207  0015EC  ECD5  F01F         	call	_analogRead	;wreg free
  3208  0015F0  C023  F02B         	movff	?_analogRead,___altoft@c
  3209  0015F4  C024  F02C         	movff	?_analogRead+1,___altoft@c+1
  3210  0015F8  C025  F02D         	movff	?_analogRead+2,___altoft@c+2
  3211  0015FC  C026  F02E         	movff	?_analogRead+3,___altoft@c+3
  3212  001600  ECDB  F01C         	call	___altoft	;wreg free
  3213  001604  C02B  F035         	movff	?___altoft,___ftdiv@f1
  3214  001608  C02C  F036         	movff	?___altoft+1,___ftdiv@f1+1
  3215  00160C  C02D  F037         	movff	?___altoft+2,___ftdiv@f1+2
  3216  001610  EC6A  F015         	call	___ftdiv	;wreg free
  3217  001614  C035  F089         	movff	?___ftdiv,___ftmul@f1
  3218  001618  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
  3219  00161C  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
  3220  001620  C109  F08C         	movff	sortBattery@Vcc,___ftmul@f2
  3221  001624  C10A  F08D         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  3222  001628  C10B  F08E         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  3223  00162C  ECB8  F011         	call	___ftmul	;wreg free
  3224  001630  C089  F102         	movff	?___ftmul,sortBattery@V_float
  3225  001634  C08A  F103         	movff	?___ftmul+1,sortBattery@V_float+1
  3226  001638  C08B  F104         	movff	?___ftmul+2,sortBattery@V_float+2
  3227  00163C                     l7579:
  3228  00163C  C119  F0AE         	movff	sortBattery@i,___ftsub@f1
  3229  001640  C11A  F0AF         	movff	sortBattery@i+1,___ftsub@f1+1
  3230  001644  C11B  F0B0         	movff	sortBattery@i+2,___ftsub@f1+2
  3231  001648  0ECD               	movlw	205
  3232  00164A  0100               	movlb	0	; () banked
  3233  00164C  6FB1               	movwf	___ftsub@f2& (0+255),b
  3234  00164E  0ECC               	movlw	204
  3235  001650  0100               	movlb	0	; () banked
  3236  001652  6FB2               	movwf	(___ftsub@f2+1)& (0+255),b
  3237  001654  0E3D               	movlw	61
  3238  001656  0100               	movlb	0	; () banked
  3239  001658  6FB3               	movwf	(___ftsub@f2+2)& (0+255),b
  3240  00165A  ECFB  F01E         	call	___ftsub	;wreg free
  3241  00165E  C0AE  F119         	movff	?___ftsub,sortBattery@i
  3242  001662  C0AF  F11A         	movff	?___ftsub+1,sortBattery@i+1
  3243  001666  C0B0  F11B         	movff	?___ftsub+2,sortBattery@i+2
  3244  00166A                     l7581:
  3245  00166A  C046  F02B         	movff	_padAngle_CLOSE,___awtoft@c
  3246  00166E  C047  F02C         	movff	_padAngle_CLOSE+1,___awtoft@c+1
  3247  001672  ECF1  F01F         	call	___awtoft	;wreg free
  3248  001676  C02B  F02F         	movff	?___awtoft,___ftge@ff1
  3249  00167A  C02C  F030         	movff	?___awtoft+1,___ftge@ff1+1
  3250  00167E  C02D  F031         	movff	?___awtoft+2,___ftge@ff1+2
  3251  001682  C119  F032         	movff	sortBattery@i,___ftge@ff2
  3252  001686  C11A  F033         	movff	sortBattery@i+1,___ftge@ff2+1
  3253  00168A  C11B  F034         	movff	sortBattery@i+2,___ftge@ff2+2
  3254  00168E  EC8D  F01B         	call	___ftge	;wreg free
  3255  001692  A0D8               	btfss	status,0,c
  3256  001694  D6F4               	goto	l7555
  3257                           
  3258                           ;main.c: 254: }
  3259                           ;main.c: 255: }
  3260                           ;main.c: 257: int targetAngle;
  3261                           ;main.c: 258: float V = V_max;
  3262  001696  C10F  F11C         	movff	sortBattery@V_max,sortBattery@V_245
  3263  00169A  C110  F11D         	movff	sortBattery@V_max+1,sortBattery@V_245+1
  3264  00169E  C111  F11E         	movff	sortBattery@V_max+2,sortBattery@V_245+2
  3265                           
  3266                           ;main.c: 260: lcdClear();
  3267  0016A2  EC04  F021         	call	_lcdClear	;wreg free
  3268                           
  3269                           ;main.c: 261: printf("V: %.3f, N: %d\n",V,pos_v_counter);
  3270  0016A6  0EA9               	movlw	low STR_5
  3271  0016A8  0100               	movlb	0	; () banked
  3272  0016AA  6FBD               	movwf	printf@f& (0+255),b
  3273  0016AC  0EFF               	movlw	high STR_5
  3274  0016AE  0100               	movlb	0	; () banked
  3275  0016B0  6FBE               	movwf	(printf@f+1)& (0+255),b
  3276  0016B2  C11C  F0BF         	movff	sortBattery@V_245,?_printf+2
  3277  0016B6  C11D  F0C0         	movff	sortBattery@V_245+1,?_printf+3
  3278  0016BA  C11E  F0C1         	movff	sortBattery@V_245+2,?_printf+4
  3279  0016BE  C105  F0C2         	movff	sortBattery@pos_v_counter,?_printf+5
  3280  0016C2  C106  F0C3         	movff	sortBattery@pos_v_counter+1,?_printf+6
  3281  0016C6  EC09  F000         	call	_printf	;wreg free
  3282                           
  3283                           ;main.c: 266: switch(signal){
  3284  0016CA  D09A               	goto	l7621
  3285  0016CC                     l7587:
  3286                           
  3287                           ;main.c: 268: if(V_float < 0.1){
  3288  0016CC  C102  F02F         	movff	sortBattery@V_float,___ftge@ff1
  3289  0016D0  C103  F030         	movff	sortBattery@V_float+1,___ftge@ff1+1
  3290  0016D4  C104  F031         	movff	sortBattery@V_float+2,___ftge@ff1+2
  3291  0016D8  0ECD               	movlw	205
  3292  0016DA  6E32               	movwf	___ftge@ff2,c
  3293  0016DC  0ECC               	movlw	204
  3294  0016DE  6E33               	movwf	___ftge@ff2+1,c
  3295  0016E0  0E3D               	movlw	61
  3296  0016E2  6E34               	movwf	___ftge@ff2+2,c
  3297  0016E4  EC8D  F01B         	call	___ftge	;wreg free
  3298  0016E8  B0D8               	btfsc	status,0,c
  3299  0016EA  D02E               	goto	l7599
  3300                           
  3301                           ;main.c: 269: if(V > V_LIM_AA){ targetAngle = redirectAngle_AA; n_AA+=1;}
  3302  0016EC  C03E  F02F         	movff	_V_LIM_AA,___ftge@ff1
  3303  0016F0  C03F  F030         	movff	_V_LIM_AA+1,___ftge@ff1+1
  3304  0016F4  C040  F031         	movff	_V_LIM_AA+2,___ftge@ff1+2
  3305  0016F8  C11C  F032         	movff	sortBattery@V_245,___ftge@ff2
  3306  0016FC  C11D  F033         	movff	sortBattery@V_245+1,___ftge@ff2+1
  3307  001700  C11E  F034         	movff	sortBattery@V_245+2,___ftge@ff2+2
  3308  001704  EC8D  F01B         	call	___ftge	;wreg free
  3309  001708  B0D8               	btfsc	status,0,c
  3310  00170A  D008               	goto	l184
  3311  00170C  C14A  F114         	movff	_redirectAngle_AA,sortBattery@targetAngle
  3312  001710  C14B  F115         	movff	_redirectAngle_AA+1,sortBattery@targetAngle+1
  3313  001714  0101               	movlb	1	; () banked
  3314  001716  4B82               	infsnz	_n_AA& (0+255),f,b
  3315  001718  2B83               	incf	(_n_AA+1)& (0+255),f,b
  3316  00171A  D007               	goto	l7597
  3317  00171C                     l184:
  3318                           
  3319                           ;main.c: 270: else { targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  3320  00171C  C0FD  F114         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  3321  001720  C0FE  F115         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  3322  001724  0101               	movlb	1	; () banked
  3323  001726  4B86               	infsnz	_n_OTHER& (0+255),f,b
  3324  001728  2B87               	incf	(_n_OTHER+1)& (0+255),f,b
  3325  00172A                     l7597:
  3326                           
  3327                           ; BSR set to: 1
  3328                           ;main.c: 271: printf("AA lim: %f",V_LIM_AA);
  3329  00172A  0ECF               	movlw	low STR_6
  3330  00172C  0100               	movlb	0	; () banked
  3331  00172E  6FBD               	movwf	printf@f& (0+255),b
  3332  001730  0EFF               	movlw	high STR_6
  3333  001732  0100               	movlb	0	; () banked
  3334  001734  6FBE               	movwf	(printf@f+1)& (0+255),b
  3335  001736  C03E  F0BF         	movff	_V_LIM_AA,?_printf+2
  3336  00173A  C03F  F0C0         	movff	_V_LIM_AA+1,?_printf+3
  3337  00173E  C040  F0C1         	movff	_V_LIM_AA+2,?_printf+4
  3338  001742  EC09  F000         	call	_printf	;wreg free
  3339                           
  3340                           ;main.c: 272: break;
  3341  001746  D070               	goto	l7623
  3342  001748                     l7599:
  3343                           
  3344                           ;main.c: 276: if(V > V_LIM_9V) {targetAngle = redirectAngle_9V; n_9V+=1;}
  3345  001748  C03B  F02F         	movff	_V_LIM_9V,___ftge@ff1
  3346  00174C  C03C  F030         	movff	_V_LIM_9V+1,___ftge@ff1+1
  3347  001750  C03D  F031         	movff	_V_LIM_9V+2,___ftge@ff1+2
  3348  001754  C11C  F032         	movff	sortBattery@V_245,___ftge@ff2
  3349  001758  C11D  F033         	movff	sortBattery@V_245+1,___ftge@ff2+1
  3350  00175C  C11E  F034         	movff	sortBattery@V_245+2,___ftge@ff2+2
  3351  001760  EC8D  F01B         	call	___ftge	;wreg free
  3352  001764  B0D8               	btfsc	status,0,c
  3353  001766  D008               	goto	l188
  3354  001768  C04A  F114         	movff	_redirectAngle_9V,sortBattery@targetAngle
  3355  00176C  C04B  F115         	movff	_redirectAngle_9V+1,sortBattery@targetAngle+1
  3356  001770  0101               	movlb	1	; () banked
  3357  001772  4B80               	infsnz	_n_9V& (0+255),f,b
  3358  001774  2B81               	incf	(_n_9V+1)& (0+255),f,b
  3359  001776  D007               	goto	l7607
  3360  001778                     l188:
  3361                           
  3362                           ;main.c: 277: else {targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  3363  001778  C0FD  F114         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  3364  00177C  C0FE  F115         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  3365  001780  0101               	movlb	1	; () banked
  3366  001782  4B86               	infsnz	_n_OTHER& (0+255),f,b
  3367  001784  2B87               	incf	(_n_OTHER+1)& (0+255),f,b
  3368  001786                     l7607:
  3369                           
  3370                           ; BSR set to: 1
  3371                           ;main.c: 278: printf("9V lim: %f",V_LIM_9V);
  3372  001786  0EDA               	movlw	low STR_7
  3373  001788  0100               	movlb	0	; () banked
  3374  00178A  6FBD               	movwf	printf@f& (0+255),b
  3375  00178C  0EFF               	movlw	high STR_7
  3376  00178E  0100               	movlb	0	; () banked
  3377  001790  6FBE               	movwf	(printf@f+1)& (0+255),b
  3378  001792  C03B  F0BF         	movff	_V_LIM_9V,?_printf+2
  3379  001796  C03C  F0C0         	movff	_V_LIM_9V+1,?_printf+3
  3380  00179A  C03D  F0C1         	movff	_V_LIM_9V+2,?_printf+4
  3381  00179E  EC09  F000         	call	_printf	;wreg free
  3382                           
  3383                           ;main.c: 279: break;
  3384  0017A2  D042               	goto	l7623
  3385  0017A4                     l7609:
  3386                           
  3387                           ;main.c: 281: if(V > V_LIM_C) {targetAngle = redirectAngle_C; n_C+=1;}
  3388  0017A4  C041  F02F         	movff	_V_LIM_C,___ftge@ff1
  3389  0017A8  C042  F030         	movff	_V_LIM_C+1,___ftge@ff1+1
  3390  0017AC  C043  F031         	movff	_V_LIM_C+2,___ftge@ff1+2
  3391  0017B0  C11C  F032         	movff	sortBattery@V_245,___ftge@ff2
  3392  0017B4  C11D  F033         	movff	sortBattery@V_245+1,___ftge@ff2+1
  3393  0017B8  C11E  F034         	movff	sortBattery@V_245+2,___ftge@ff2+2
  3394  0017BC  EC8D  F01B         	call	___ftge	;wreg free
  3395  0017C0  B0D8               	btfsc	status,0,c
  3396  0017C2  D008               	goto	l191
  3397  0017C4  C04C  F114         	movff	_redirectAngle_C,sortBattery@targetAngle
  3398  0017C8  C04D  F115         	movff	_redirectAngle_C+1,sortBattery@targetAngle+1
  3399  0017CC  0101               	movlb	1	; () banked
  3400  0017CE  4B84               	infsnz	_n_C& (0+255),f,b
  3401  0017D0  2B85               	incf	(_n_C+1)& (0+255),f,b
  3402  0017D2  D007               	goto	l7617
  3403  0017D4                     l191:
  3404                           
  3405                           ;main.c: 282: else {targetAngle = redirectAngle_OTHER; n_OTHER+=1;}
  3406  0017D4  C0FD  F114         	movff	_redirectAngle_OTHER,sortBattery@targetAngle
  3407  0017D8  C0FE  F115         	movff	_redirectAngle_OTHER+1,sortBattery@targetAngle+1
  3408  0017DC  0101               	movlb	1	; () banked
  3409  0017DE  4B86               	infsnz	_n_OTHER& (0+255),f,b
  3410  0017E0  2B87               	incf	(_n_OTHER+1)& (0+255),f,b
  3411  0017E2                     l7617:
  3412                           
  3413                           ; BSR set to: 1
  3414                           ;main.c: 283: printf("C  lim: %f",V_LIM_C);
  3415  0017E2  0EC4               	movlw	low STR_8
  3416  0017E4  0100               	movlb	0	; () banked
  3417  0017E6  6FBD               	movwf	printf@f& (0+255),b
  3418  0017E8  0EFF               	movlw	high STR_8
  3419  0017EA  0100               	movlb	0	; () banked
  3420  0017EC  6FBE               	movwf	(printf@f+1)& (0+255),b
  3421  0017EE  C041  F0BF         	movff	_V_LIM_C,?_printf+2
  3422  0017F2  C042  F0C0         	movff	_V_LIM_C+1,?_printf+3
  3423  0017F6  C043  F0C1         	movff	_V_LIM_C+2,?_printf+4
  3424  0017FA  EC09  F000         	call	_printf	;wreg free
  3425                           
  3426                           ;main.c: 285: }
  3427                           
  3428                           ;main.c: 284: break;
  3429  0017FE  D014               	goto	l7623
  3430  001800                     l7621:
  3431  001800  C107  F0EF         	movff	sortBattery@signal,??_sortBattery
  3432  001804  C108  F0F0         	movff	sortBattery@signal+1,??_sortBattery+1
  3433                           
  3434                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3435                           ; Switch size 1, requested type "space"
  3436                           ; Number of cases is 1, Range of values is 0 to 0
  3437                           ; switch strategies available:
  3438                           ; Name         Instructions Cycles
  3439                           ; simple_byte            4     3 (average)
  3440                           ;	Chosen strategy is simple_byte
  3441  001808  0100               	movlb	0	; () banked
  3442  00180A  51F0               	movf	(??_sortBattery+1)& (0+255),w,b
  3443  00180C  0A00               	xorlw	0	; case 0
  3444  00180E  A4D8               	btfss	status,2,c
  3445  001810  D00B               	goto	l7623
  3446                           
  3447                           ; BSR set to: 0
  3448                           ; Switch size 1, requested type "space"
  3449                           ; Number of cases is 3, Range of values is 0 to 2
  3450                           ; switch strategies available:
  3451                           ; Name         Instructions Cycles
  3452                           ; simple_byte           10     6 (average)
  3453                           ;	Chosen strategy is simple_byte
  3454  001812  0100               	movlb	0	; () banked
  3455  001814  51EF               	movf	??_sortBattery& (0+255),w,b
  3456  001816  0A00               	xorlw	0	; case 0
  3457  001818  B4D8               	btfsc	status,2,c
  3458  00181A  D796               	goto	l7599
  3459  00181C  0A01               	xorlw	1	; case 1
  3460  00181E  B4D8               	btfsc	status,2,c
  3461  001820  D7C1               	goto	l7609
  3462  001822  0A03               	xorlw	3	; case 2
  3463  001824  B4D8               	btfsc	status,2,c
  3464  001826  D752               	goto	l7587
  3465  001828                     l7623:
  3466                           
  3467                           ;main.c: 288: readKeypad();
  3468  001828  EC38  F020         	call	_readKeypad	;wreg free
  3469                           
  3470                           ;main.c: 289: setAngle(redirectingServo, targetAngle);
  3471  00182C  0E66               	movlw	low _redirectingServo
  3472  00182E  0100               	movlb	0	; () banked
  3473  001830  6FD4               	movwf	setAngle@motor& (0+255),b
  3474  001832  0E01               	movlw	high _redirectingServo
  3475  001834  0100               	movlb	0	; () banked
  3476  001836  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3477  001838  C114  F0D6         	movff	sortBattery@targetAngle,setAngle@angle
  3478  00183C  C115  F0D7         	movff	sortBattery@targetAngle+1,setAngle@angle+1
  3479  001840  EC44  F018         	call	_setAngle	;wreg free
  3480                           
  3481                           ;main.c: 290: _delay((unsigned long)((500)*(10000000/4000.0)));
  3482  001844  0E07               	movlw	7
  3483  001846  0100               	movlb	0	; () banked
  3484  001848  6FF0               	movwf	(??_sortBattery+1)& (0+255),b
  3485  00184A  0E58               	movlw	88
  3486  00184C  0100               	movlb	0	; () banked
  3487  00184E  6FEF               	movwf	??_sortBattery& (0+255),b
  3488  001850  0E59               	movlw	89
  3489  001852                     u8177:
  3490  001852  2EE8               	decfsz	wreg,f,c
  3491  001854  D7FE               	bra	u8177
  3492  001856  2FEF               	decfsz	??_sortBattery& (0+255),f,b
  3493  001858  D7FC               	bra	u8177
  3494  00185A  2FF0               	decfsz	(??_sortBattery+1)& (0+255),f,b
  3495  00185C  D7FA               	bra	u8177
  3496  00185E  D000               	nop2	
  3497                           
  3498                           ;main.c: 294: for(int i = padAngle_CLOSE; i < padAngle_OPEN; i++) {
  3499  001860  C046  F112         	movff	_padAngle_CLOSE,sortBattery@i_250
  3500  001864  C047  F113         	movff	_padAngle_CLOSE+1,sortBattery@i_250+1
  3501  001868  D018               	goto	l7637
  3502  00186A                     l7631:
  3503                           
  3504                           ;main.c: 295: setAngle(padServo, i);
  3505  00186A  0E62               	movlw	low _padServo
  3506  00186C  0100               	movlb	0	; () banked
  3507  00186E  6FD4               	movwf	setAngle@motor& (0+255),b
  3508  001870  0E01               	movlw	high _padServo
  3509  001872  0100               	movlb	0	; () banked
  3510  001874  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3511  001876  C112  F0D6         	movff	sortBattery@i_250,setAngle@angle
  3512  00187A  C113  F0D7         	movff	sortBattery@i_250+1,setAngle@angle+1
  3513  00187E  EC44  F018         	call	_setAngle	;wreg free
  3514                           
  3515                           ;main.c: 296: _delay((unsigned long)((3)*(10000000/4000.0)));
  3516  001882  0E0A               	movlw	10
  3517  001884  0100               	movlb	0	; () banked
  3518  001886  6FEF               	movwf	??_sortBattery& (0+255),b
  3519  001888  0EBC               	movlw	188
  3520  00188A                     u8187:
  3521  00188A  2EE8               	decfsz	wreg,f,c
  3522  00188C  D7FE               	bra	u8187
  3523  00188E  2FEF               	decfsz	??_sortBattery& (0+255),f,b
  3524  001890  D7FC               	bra	u8187
  3525  001892  F000               	nop	
  3526  001894  0101               	movlb	1	; () banked
  3527  001896  4B12               	infsnz	sortBattery@i_250& (0+255),f,b
  3528  001898  2B13               	incf	(sortBattery@i_250+1)& (0+255),f,b
  3529  00189A                     l7637:
  3530  00189A  5048               	movf	_padAngle_OPEN,w,c
  3531  00189C  0101               	movlb	1	; () banked
  3532  00189E  5D12               	subwf	sortBattery@i_250& (0+255),w,b
  3533  0018A0  0101               	movlb	1	; () banked
  3534  0018A2  5113               	movf	(sortBattery@i_250+1)& (0+255),w,b
  3535  0018A4  0A80               	xorlw	128
  3536  0018A6  0100               	movlb	0	; () banked
  3537  0018A8  6FEF               	movwf	??_sortBattery& (0+255),b
  3538  0018AA  5049               	movf	_padAngle_OPEN+1,w,c
  3539  0018AC  0A80               	xorlw	128
  3540  0018AE  0100               	movlb	0	; () banked
  3541  0018B0  59EF               	subwfb	??_sortBattery& (0+255),w,b
  3542  0018B2  A0D8               	btfss	status,0,c
  3543  0018B4  D7DA               	goto	l7631
  3544                           
  3545                           ; BSR set to: 0
  3546                           ;main.c: 297: }
  3547                           ;main.c: 299: _delay((unsigned long)((1000)*(10000000/4000.0)));
  3548                           
  3549                           ; BSR set to: 0
  3550  0018B6  0E0D               	movlw	13
  3551  0018B8  0100               	movlb	0	; () banked
  3552  0018BA  6FF0               	movwf	(??_sortBattery+1)& (0+255),b
  3553  0018BC  0EAF               	movlw	175
  3554  0018BE  0100               	movlb	0	; () banked
  3555  0018C0  6FEF               	movwf	??_sortBattery& (0+255),b
  3556  0018C2  0EB6               	movlw	182
  3557  0018C4                     u8197:
  3558  0018C4  2EE8               	decfsz	wreg,f,c
  3559  0018C6  D7FE               	bra	u8197
  3560  0018C8  2FEF               	decfsz	??_sortBattery& (0+255),f,b
  3561  0018CA  D7FC               	bra	u8197
  3562  0018CC  2FF0               	decfsz	(??_sortBattery+1)& (0+255),f,b
  3563  0018CE  D7FA               	bra	u8197
  3564  0018D0  F000               	nop	
  3565                           
  3566                           ;main.c: 303: setAngle(padServo, padAngle_NEUTRAL);
  3567  0018D2  0E62               	movlw	low _padServo
  3568  0018D4  0100               	movlb	0	; () banked
  3569  0018D6  6FD4               	movwf	setAngle@motor& (0+255),b
  3570  0018D8  0E01               	movlw	high _padServo
  3571  0018DA  0100               	movlb	0	; () banked
  3572  0018DC  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3573  0018DE  C148  F0D6         	movff	_padAngle_NEUTRAL,setAngle@angle
  3574  0018E2  C149  F0D7         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  3575  0018E6  EC44  F018         	call	_setAngle	;wreg free
  3576                           
  3577                           ;main.c: 307: setAngle(conveyorServo, 130);
  3578  0018EA  0E4E               	movlw	low _conveyorServo
  3579  0018EC  0100               	movlb	0	; () banked
  3580  0018EE  6FD4               	movwf	setAngle@motor& (0+255),b
  3581  0018F0  0E01               	movlw	high _conveyorServo
  3582  0018F2  0100               	movlb	0	; () banked
  3583  0018F4  6FD5               	movwf	(setAngle@motor+1)& (0+255),b
  3584  0018F6  0E00               	movlw	0
  3585  0018F8  0100               	movlb	0	; () banked
  3586  0018FA  6FD7               	movwf	(setAngle@angle+1)& (0+255),b
  3587  0018FC  0E82               	movlw	130
  3588  0018FE  6FD6               	movwf	setAngle@angle& (0+255),b
  3589  001900  EC44  F018         	call	_setAngle	;wreg free
  3590                           
  3591                           ;main.c: 308: digitalWrite(cylinderMotor1, 1);
  3592  001904  0E52               	movlw	low _cylinderMotor1
  3593  001906  6E23               	movwf	digitalWrite@pin,c
  3594  001908  0E01               	movlw	high _cylinderMotor1
  3595  00190A  6E24               	movwf	digitalWrite@pin+1,c
  3596  00190C  0E00               	movlw	0
  3597  00190E  6E26               	movwf	digitalWrite@val+1,c
  3598  001910  0E01               	movlw	1
  3599  001912  6E25               	movwf	digitalWrite@val,c
  3600  001914  EC7B  F019         	call	_digitalWrite	;wreg free
  3601  001918  0012               	return		;funcret
  3602  00191A                     __end_of_sortBattery:
  3603                           	opt stack 0
  3604                           tblptru	equ	0xFF8
  3605                           tblptrh	equ	0xFF7
  3606                           tblptrl	equ	0xFF6
  3607                           tablat	equ	0xFF5
  3608                           postinc0	equ	0xFEE
  3609                           wreg	equ	0xFE8
  3610                           postdec1	equ	0xFE5
  3611                           fsr1l	equ	0xFE1
  3612                           status	equ	0xFD8
  3613                           
  3614 ;; *************** function _digitalWrite *****************
  3615 ;; Defined at:
  3616 ;;		line 53 in file "iopin.c"
  3617 ;; Parameters:    Size  Location     Type
  3618 ;;  pin             2   34[COMRAM] PTR int 
  3619 ;;		 -> AA_float(4), cylinderMotor2(4), redirectingServo(4), padServo(4), 
  3620 ;;		 -> conveyorServo(4), cylinderMotor1(4), 
  3621 ;;  val             2   36[COMRAM] int 
  3622 ;; Auto vars:     Size  Location     Type
  3623 ;;  p               2   41[COMRAM] int 
  3624 ;; Return value:  Size  Location     Type
  3625 ;;                  1    wreg      void 
  3626 ;; Registers used:
  3627 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3628 ;; Tracked objects:
  3629 ;;		On entry : 0/0
  3630 ;;		On exit  : 0/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3633 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3634 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3635 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3636 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3637 ;;Total ram usage:        9 bytes
  3638 ;; Hardware stack levels used:    1
  3639 ;; Hardware stack levels required when called:    3
  3640 ;; This function calls:
  3641 ;;		Nothing
  3642 ;; This function is called by:
  3643 ;;		_main
  3644 ;;		_sortBattery
  3645 ;; This function uses a non-reentrant model
  3646 ;;
  3647                           
  3648                           	psect	text2
  3649  0032F6                     __ptext2:
  3650                           	opt stack 0
  3651  0032F6                     _digitalWrite:
  3652                           	opt stack 26
  3653                           
  3654                           ;iopin.c: 54: if(pin){
  3655                           
  3656                           ;incstack = 0
  3657  0032F6  5023               	movf	digitalWrite@pin,w,c
  3658  0032F8  1024               	iorwf	digitalWrite@pin+1,w,c
  3659  0032FA  B4D8               	btfsc	status,2,c
  3660  0032FC  0012               	return	
  3661                           
  3662                           ;iopin.c: 55: int p = 1 << pin[1];
  3663  0032FE  EE20 F002          	lfsr	2,2
  3664  003302  5023               	movf	digitalWrite@pin,w,c
  3665  003304  26D9               	addwf	fsr2l,f,c
  3666  003306  5024               	movf	digitalWrite@pin+1,w,c
  3667  003308  22DA               	addwfc	fsr2h,f,c
  3668  00330A  50DF               	movf	indf2,w,c
  3669  00330C  6E27               	movwf	??_digitalWrite& (0+255),c
  3670  00330E  0E01               	movlw	1
  3671  003310  6E28               	movwf	(??_digitalWrite+1)& (0+255),c
  3672  003312  0E00               	movlw	0
  3673  003314  6E29               	movwf	(??_digitalWrite+2)& (0+255),c
  3674  003316  2A27               	incf	??_digitalWrite,f,c
  3675  003318  D003               	goto	u7494
  3676  00331A                     u7495:
  3677  00331A  90D8               	bcf	status,0,c
  3678  00331C  3628               	rlcf	??_digitalWrite+1,f,c
  3679  00331E  3629               	rlcf	??_digitalWrite+2,f,c
  3680  003320                     u7494:
  3681  003320  2E27               	decfsz	??_digitalWrite,f,c
  3682  003322  D7FB               	goto	u7495
  3683  003324  C028  F02A         	movff	??_digitalWrite+1,digitalWrite@p
  3684  003328  C029  F02B         	movff	??_digitalWrite+2,digitalWrite@p+1
  3685                           
  3686                           ;iopin.c: 56: if(val == 0){
  3687  00332C  5025               	movf	digitalWrite@val,w,c
  3688  00332E  1026               	iorwf	digitalWrite@val+1,w,c
  3689  003330  A4D8               	btfss	status,2,c
  3690  003332  D02B               	goto	l7247
  3691                           
  3692                           ;iopin.c: 57: p ^= 0xff;
  3693  003334  0EFF               	movlw	255
  3694  003336  1A2A               	xorwf	digitalWrite@p,f,c
  3695                           
  3696                           ;iopin.c: 58: }
  3697                           ;iopin.c: 60: switch(pin[0]){
  3698  003338  D028               	goto	l7247
  3699  00333A                     l7223:
  3700  00333A  0425               	decf	digitalWrite@val,w,c
  3701  00333C  1026               	iorwf	digitalWrite@val+1,w,c
  3702  00333E  A4D8               	btfss	status,2,c
  3703  003340  D003               	goto	l7227
  3704  003342  502A               	movf	digitalWrite@p,w,c
  3705  003344  1289               	iorwf	3977,f,c	;volatile
  3706  003346  0012               	return	
  3707  003348                     l7227:
  3708                           
  3709                           ;iopin.c: 62: else LATA &= p;
  3710  003348  502A               	movf	digitalWrite@p,w,c
  3711  00334A  1689               	andwf	3977,f,c	;volatile
  3712                           
  3713                           ;iopin.c: 63: break;
  3714  00334C  0012               	return	
  3715  00334E                     l7229:
  3716  00334E  0425               	decf	digitalWrite@val,w,c
  3717  003350  1026               	iorwf	digitalWrite@val+1,w,c
  3718  003352  A4D8               	btfss	status,2,c
  3719  003354  D003               	goto	l7233
  3720  003356  502A               	movf	digitalWrite@p,w,c
  3721  003358  128A               	iorwf	3978,f,c	;volatile
  3722  00335A  0012               	return	
  3723  00335C                     l7233:
  3724                           
  3725                           ;iopin.c: 65: else LATB &= p;
  3726  00335C  502A               	movf	digitalWrite@p,w,c
  3727  00335E  168A               	andwf	3978,f,c	;volatile
  3728                           
  3729                           ;iopin.c: 66: break;
  3730  003360  0012               	return	
  3731  003362                     l7235:
  3732  003362  0425               	decf	digitalWrite@val,w,c
  3733  003364  1026               	iorwf	digitalWrite@val+1,w,c
  3734  003366  A4D8               	btfss	status,2,c
  3735  003368  D003               	goto	l7239
  3736  00336A  502A               	movf	digitalWrite@p,w,c
  3737  00336C  128B               	iorwf	3979,f,c	;volatile
  3738  00336E  0012               	return	
  3739  003370                     l7239:
  3740                           
  3741                           ;iopin.c: 68: else LATC &= p;
  3742  003370  502A               	movf	digitalWrite@p,w,c
  3743  003372  168B               	andwf	3979,f,c	;volatile
  3744                           
  3745                           ;iopin.c: 69: break;
  3746  003374  0012               	return	
  3747  003376                     l7241:
  3748  003376  0425               	decf	digitalWrite@val,w,c
  3749  003378  1026               	iorwf	digitalWrite@val+1,w,c
  3750  00337A  A4D8               	btfss	status,2,c
  3751  00337C  D003               	goto	l7245
  3752  00337E  502A               	movf	digitalWrite@p,w,c
  3753  003380  128C               	iorwf	3980,f,c	;volatile
  3754  003382  0012               	return	
  3755  003384                     l7245:
  3756                           
  3757                           ;iopin.c: 71: else LATD &= p;
  3758  003384  502A               	movf	digitalWrite@p,w,c
  3759  003386  168C               	andwf	3980,f,c	;volatile
  3760                           
  3761                           ;iopin.c: 72: }
  3762  003388  0012               	return	
  3763  00338A                     l7247:
  3764  00338A  C023  FFD9         	movff	digitalWrite@pin,fsr2l
  3765  00338E  C024  FFDA         	movff	digitalWrite@pin+1,fsr2h
  3766  003392  CFDE F027          	movff	postinc2,??_digitalWrite
  3767  003396  CFDD F028          	movff	postdec2,??_digitalWrite+1
  3768                           
  3769                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3770                           ; Switch size 1, requested type "space"
  3771                           ; Number of cases is 1, Range of values is 0 to 0
  3772                           ; switch strategies available:
  3773                           ; Name         Instructions Cycles
  3774                           ; simple_byte            4     3 (average)
  3775                           ;	Chosen strategy is simple_byte
  3776  00339A  5028               	movf	??_digitalWrite+1,w,c
  3777  00339C  0A00               	xorlw	0	; case 0
  3778  00339E  A4D8               	btfss	status,2,c
  3779  0033A0  0012               	return	
  3780                           
  3781                           ; Switch size 1, requested type "space"
  3782                           ; Number of cases is 4, Range of values is 0 to 3
  3783                           ; switch strategies available:
  3784                           ; Name         Instructions Cycles
  3785                           ; simple_byte           13     7 (average)
  3786                           ;	Chosen strategy is simple_byte
  3787  0033A2  5027               	movf	??_digitalWrite,w,c
  3788  0033A4  0A00               	xorlw	0	; case 0
  3789  0033A6  B4D8               	btfsc	status,2,c
  3790  0033A8  D7C8               	goto	l7223
  3791  0033AA  0A01               	xorlw	1	; case 1
  3792  0033AC  B4D8               	btfsc	status,2,c
  3793  0033AE  D7CF               	goto	l7229
  3794  0033B0  0A03               	xorlw	3	; case 2
  3795  0033B2  B4D8               	btfsc	status,2,c
  3796  0033B4  D7D6               	goto	l7235
  3797  0033B6  0A01               	xorlw	1	; case 3
  3798  0033B8  A4D8               	btfss	status,2,c
  3799  0033BA  0012               	return	
  3800  0033BC  D7DC               	goto	l7241
  3801  0033BE                     __end_of_digitalWrite:
  3802                           	opt stack 0
  3803                           tblptru	equ	0xFF8
  3804                           tblptrh	equ	0xFF7
  3805                           tblptrl	equ	0xFF6
  3806                           tablat	equ	0xFF5
  3807                           postinc0	equ	0xFEE
  3808                           wreg	equ	0xFE8
  3809                           postdec1	equ	0xFE5
  3810                           fsr1l	equ	0xFE1
  3811                           indf2	equ	0xFDF
  3812                           postinc2	equ	0xFDE
  3813                           postdec2	equ	0xFDD
  3814                           fsr2h	equ	0xFDA
  3815                           fsr2l	equ	0xFD9
  3816                           status	equ	0xFD8
  3817                           
  3818 ;; *************** function _digitalRead *****************
  3819 ;; Defined at:
  3820 ;;		line 43 in file "iopin.c"
  3821 ;; Parameters:    Size  Location     Type
  3822 ;;  pin             2   34[COMRAM] PTR int 
  3823 ;;		 -> padPin2(4), padPin1(4), cylinderMotor1(4), 
  3824 ;; Auto vars:     Size  Location     Type
  3825 ;;		None
  3826 ;; Return value:  Size  Location     Type
  3827 ;;                  2   34[COMRAM] int 
  3828 ;; Registers used:
  3829 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3830 ;; Tracked objects:
  3831 ;;		On entry : 0/0
  3832 ;;		On exit  : 0/0
  3833 ;;		Unchanged: 0/0
  3834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3835 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3837 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3838 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3839 ;;Total ram usage:        4 bytes
  3840 ;; Hardware stack levels used:    1
  3841 ;; Hardware stack levels required when called:    3
  3842 ;; This function calls:
  3843 ;;		Nothing
  3844 ;; This function is called by:
  3845 ;;		_main
  3846 ;;		_sortBattery
  3847 ;; This function uses a non-reentrant model
  3848 ;;
  3849                           
  3850                           	psect	text3
  3851  002CF0                     __ptext3:
  3852                           	opt stack 0
  3853  002CF0                     _digitalRead:
  3854                           	opt stack 26
  3855                           
  3856                           ;iopin.c: 44: switch(pin[0]){
  3857                           
  3858                           ;incstack = 0
  3859  002CF0  D058               	goto	l7273
  3860  002CF2                     l7255:
  3861  002CF2  EE20 F002          	lfsr	2,2
  3862  002CF6  5023               	movf	digitalRead@pin,w,c
  3863  002CF8  26D9               	addwf	fsr2l,f,c
  3864  002CFA  5024               	movf	digitalRead@pin+1,w,c
  3865  002CFC  22DA               	addwfc	fsr2h,f,c
  3866  002CFE  50DF               	movf	indf2,w,c
  3867  002D00  6E25               	movwf	??_digitalRead& (0+255),c
  3868  002D02  CF80 F026          	movff	3968,??_digitalRead+1	;volatile
  3869  002D06  2A25               	incf	??_digitalRead,f,c
  3870  002D08  D002               	goto	u7554
  3871  002D0A                     u7555:
  3872  002D0A  90D8               	bcf	status,0,c
  3873  002D0C  3226               	rrcf	??_digitalRead+1,f,c
  3874  002D0E                     u7554:
  3875  002D0E  2E25               	decfsz	??_digitalRead,f,c
  3876  002D10  D7FC               	goto	u7555
  3877  002D12  0E01               	movlw	1
  3878  002D14  1626               	andwf	??_digitalRead+1,f,c
  3879  002D16  5026               	movf	??_digitalRead+1,w,c
  3880  002D18  6E23               	movwf	?_digitalRead,c
  3881  002D1A  6A24               	clrf	?_digitalRead+1,c
  3882  002D1C  0012               	return	
  3883  002D1E                     l7259:
  3884  002D1E  EE20 F002          	lfsr	2,2
  3885  002D22  5023               	movf	digitalRead@pin,w,c
  3886  002D24  26D9               	addwf	fsr2l,f,c
  3887  002D26  5024               	movf	digitalRead@pin+1,w,c
  3888  002D28  22DA               	addwfc	fsr2h,f,c
  3889  002D2A  50DF               	movf	indf2,w,c
  3890  002D2C  6E25               	movwf	??_digitalRead& (0+255),c
  3891  002D2E  CF81 F026          	movff	3969,??_digitalRead+1	;volatile
  3892  002D32  2A25               	incf	??_digitalRead,f,c
  3893  002D34  D002               	goto	u7564
  3894  002D36                     u7565:
  3895  002D36  90D8               	bcf	status,0,c
  3896  002D38  3226               	rrcf	??_digitalRead+1,f,c
  3897  002D3A                     u7564:
  3898  002D3A  2E25               	decfsz	??_digitalRead,f,c
  3899  002D3C  D7FC               	goto	u7565
  3900  002D3E  0E01               	movlw	1
  3901  002D40  1626               	andwf	??_digitalRead+1,f,c
  3902  002D42  5026               	movf	??_digitalRead+1,w,c
  3903  002D44  6E23               	movwf	?_digitalRead,c
  3904  002D46  6A24               	clrf	?_digitalRead+1,c
  3905  002D48  0012               	return	
  3906  002D4A                     l7263:
  3907  002D4A  EE20 F002          	lfsr	2,2
  3908  002D4E  5023               	movf	digitalRead@pin,w,c
  3909  002D50  26D9               	addwf	fsr2l,f,c
  3910  002D52  5024               	movf	digitalRead@pin+1,w,c
  3911  002D54  22DA               	addwfc	fsr2h,f,c
  3912  002D56  50DF               	movf	indf2,w,c
  3913  002D58  6E25               	movwf	??_digitalRead& (0+255),c
  3914  002D5A  CF82 F026          	movff	3970,??_digitalRead+1	;volatile
  3915  002D5E  2A25               	incf	??_digitalRead,f,c
  3916  002D60  D002               	goto	u7574
  3917  002D62                     u7575:
  3918  002D62  90D8               	bcf	status,0,c
  3919  002D64  3226               	rrcf	??_digitalRead+1,f,c
  3920  002D66                     u7574:
  3921  002D66  2E25               	decfsz	??_digitalRead,f,c
  3922  002D68  D7FC               	goto	u7575
  3923  002D6A  0E01               	movlw	1
  3924  002D6C  1626               	andwf	??_digitalRead+1,f,c
  3925  002D6E  5026               	movf	??_digitalRead+1,w,c
  3926  002D70  6E23               	movwf	?_digitalRead,c
  3927  002D72  6A24               	clrf	?_digitalRead+1,c
  3928  002D74  0012               	return	
  3929  002D76                     l7267:
  3930  002D76  EE20 F002          	lfsr	2,2
  3931  002D7A  5023               	movf	digitalRead@pin,w,c
  3932  002D7C  26D9               	addwf	fsr2l,f,c
  3933  002D7E  5024               	movf	digitalRead@pin+1,w,c
  3934  002D80  22DA               	addwfc	fsr2h,f,c
  3935  002D82  50DF               	movf	indf2,w,c
  3936  002D84  6E25               	movwf	??_digitalRead& (0+255),c
  3937  002D86  CF83 F026          	movff	3971,??_digitalRead+1	;volatile
  3938  002D8A  2A25               	incf	??_digitalRead,f,c
  3939  002D8C  D002               	goto	u7584
  3940  002D8E                     u7585:
  3941  002D8E  90D8               	bcf	status,0,c
  3942  002D90  3226               	rrcf	??_digitalRead+1,f,c
  3943  002D92                     u7584:
  3944  002D92  2E25               	decfsz	??_digitalRead,f,c
  3945  002D94  D7FC               	goto	u7585
  3946  002D96  0E01               	movlw	1
  3947  002D98  1626               	andwf	??_digitalRead+1,f,c
  3948  002D9A  5026               	movf	??_digitalRead+1,w,c
  3949  002D9C  6E23               	movwf	?_digitalRead,c
  3950  002D9E  6A24               	clrf	?_digitalRead+1,c
  3951  002DA0  0012               	return	
  3952  002DA2                     l7273:
  3953  002DA2  C023  FFD9         	movff	digitalRead@pin,fsr2l
  3954  002DA6  C024  FFDA         	movff	digitalRead@pin+1,fsr2h
  3955  002DAA  CFDE F025          	movff	postinc2,??_digitalRead
  3956  002DAE  CFDD F026          	movff	postdec2,??_digitalRead+1
  3957                           
  3958                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3959                           ; Switch size 1, requested type "space"
  3960                           ; Number of cases is 1, Range of values is 0 to 0
  3961                           ; switch strategies available:
  3962                           ; Name         Instructions Cycles
  3963                           ; simple_byte            4     3 (average)
  3964                           ;	Chosen strategy is simple_byte
  3965  002DB2  5026               	movf	??_digitalRead+1,w,c
  3966  002DB4  0A00               	xorlw	0	; case 0
  3967  002DB6  A4D8               	btfss	status,2,c
  3968  002DB8  D00D               	goto	l342
  3969                           
  3970                           ; Switch size 1, requested type "space"
  3971                           ; Number of cases is 4, Range of values is 0 to 3
  3972                           ; switch strategies available:
  3973                           ; Name         Instructions Cycles
  3974                           ; simple_byte           13     7 (average)
  3975                           ;	Chosen strategy is simple_byte
  3976  002DBA  5025               	movf	??_digitalRead,w,c
  3977  002DBC  0A00               	xorlw	0	; case 0
  3978  002DBE  B4D8               	btfsc	status,2,c
  3979  002DC0  D798               	goto	l7255
  3980  002DC2  0A01               	xorlw	1	; case 1
  3981  002DC4  B4D8               	btfsc	status,2,c
  3982  002DC6  D7AB               	goto	l7259
  3983  002DC8  0A03               	xorlw	3	; case 2
  3984  002DCA  B4D8               	btfsc	status,2,c
  3985  002DCC  D7BE               	goto	l7263
  3986  002DCE  0A01               	xorlw	1	; case 3
  3987  002DD0  B4D8               	btfsc	status,2,c
  3988  002DD2  D7D1               	goto	l7267
  3989  002DD4                     l342:
  3990                           
  3991                           ;iopin.c: 50: return -1;
  3992  002DD4  6823               	setf	?_digitalRead,c
  3993  002DD6  6824               	setf	?_digitalRead+1,c
  3994  002DD8  0012               	return		;funcret
  3995  002DDA                     __end_of_digitalRead:
  3996                           	opt stack 0
  3997                           tblptru	equ	0xFF8
  3998                           tblptrh	equ	0xFF7
  3999                           tblptrl	equ	0xFF6
  4000                           tablat	equ	0xFF5
  4001                           postinc0	equ	0xFEE
  4002                           wreg	equ	0xFE8
  4003                           postdec1	equ	0xFE5
  4004                           fsr1l	equ	0xFE1
  4005                           indf2	equ	0xFDF
  4006                           postinc2	equ	0xFDE
  4007                           postdec2	equ	0xFDD
  4008                           fsr2h	equ	0xFDA
  4009                           fsr2l	equ	0xFD9
  4010                           status	equ	0xFD8
  4011                           
  4012 ;; *************** function _analogRead *****************
  4013 ;; Defined at:
  4014 ;;		line 90 in file "iopin.c"
  4015 ;; Parameters:    Size  Location     Type
  4016 ;;  channel         2   34[COMRAM] int 
  4017 ;; Auto vars:     Size  Location     Type
  4018 ;;		None
  4019 ;; Return value:  Size  Location     Type
  4020 ;;                  4   34[COMRAM] long 
  4021 ;; Registers used:
  4022 ;;		wreg, status,2, status,0
  4023 ;; Tracked objects:
  4024 ;;		On entry : 0/0
  4025 ;;		On exit  : 0/0
  4026 ;;		Unchanged: 0/0
  4027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4028 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4030 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4031 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4032 ;;Total ram usage:        6 bytes
  4033 ;; Hardware stack levels used:    1
  4034 ;; Hardware stack levels required when called:    3
  4035 ;; This function calls:
  4036 ;;		Nothing
  4037 ;; This function is called by:
  4038 ;;		_sortBattery
  4039 ;; This function uses a non-reentrant model
  4040 ;;
  4041                           
  4042                           	psect	text4
  4043  003FAA                     __ptext4:
  4044                           	opt stack 0
  4045  003FAA                     _analogRead:
  4046                           	opt stack 26
  4047                           
  4048                           ;iopin.c: 91: ADCON0 = channel<<2;
  4049                           
  4050                           ;incstack = 0
  4051  003FAA  4423               	rlncf	analogRead@channel,w,c
  4052  003FAC  46E8               	rlncf	wreg,f,c
  4053  003FAE  0BFC               	andlw	252
  4054  003FB0  6EC2               	movwf	4034,c	;volatile
  4055                           
  4056                           ;iopin.c: 92: ADCON0 |= 1<<0;
  4057  003FB2  80C2               	bsf	4034,0,c	;volatile
  4058                           
  4059                           ;iopin.c: 93: ADCON0 |= 1<<1;
  4060  003FB4  82C2               	bsf	4034,1,c	;volatile
  4061  003FB6                     l367:
  4062  003FB6  B2C2               	btfsc	4034,1,c	;volatile
  4063  003FB8  D7FE               	goto	l367
  4064                           
  4065                           ;iopin.c: 97: return (ADRESH<<8) + ADRESL;
  4066  003FBA  50C3               	movf	4035,w,c	;volatile
  4067  003FBC  CFC4 F027          	movff	4036,??_analogRead	;volatile
  4068  003FC0  6A28               	clrf	(??_analogRead+1)& (0+255),c
  4069  003FC2  C027  F028         	movff	??_analogRead,??_analogRead+1
  4070  003FC6  6A27               	clrf	??_analogRead,c
  4071  003FC8  2627               	addwf	??_analogRead,f,c
  4072  003FCA  0E00               	movlw	0
  4073  003FCC  2228               	addwfc	??_analogRead+1,f,c
  4074  003FCE  C027  F023         	movff	??_analogRead,?_analogRead
  4075  003FD2  C028  F024         	movff	??_analogRead+1,?_analogRead+1
  4076  003FD6  0E00               	movlw	0
  4077  003FD8  BE24               	btfsc	?_analogRead+1,7,c
  4078  003FDA  0EFF               	movlw	-1
  4079  003FDC  6E25               	movwf	?_analogRead+2,c
  4080  003FDE  6E26               	movwf	?_analogRead+3,c
  4081  003FE0  0012               	return	
  4082  003FE2                     __end_of_analogRead:
  4083                           	opt stack 0
  4084                           tblptru	equ	0xFF8
  4085                           tblptrh	equ	0xFF7
  4086                           tblptrl	equ	0xFF6
  4087                           tablat	equ	0xFF5
  4088                           postinc0	equ	0xFEE
  4089                           wreg	equ	0xFE8
  4090                           postdec1	equ	0xFE5
  4091                           fsr1l	equ	0xFE1
  4092                           indf2	equ	0xFDF
  4093                           postinc2	equ	0xFDE
  4094                           postdec2	equ	0xFDD
  4095                           fsr2h	equ	0xFDA
  4096                           fsr2l	equ	0xFD9
  4097                           status	equ	0xFD8
  4098                           
  4099 ;; *************** function _showInterface *****************
  4100 ;; Defined at:
  4101 ;;		line 18 in file "interface.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;		None
  4104 ;; Auto vars:     Size  Location     Type
  4105 ;;  run             2   16[BANK1 ] PTR int 
  4106 ;;		 -> readPastRun@data(14), 
  4107 ;;  n               2   14[BANK1 ] int 
  4108 ;;  key             1   18[BANK1 ] unsigned char 
  4109 ;; Return value:  Size  Location     Type
  4110 ;;                  1    wreg      void 
  4111 ;; Registers used:
  4112 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4113 ;; Tracked objects:
  4114 ;;		On entry : 0/0
  4115 ;;		On exit  : 0/0
  4116 ;;		Unchanged: 0/0
  4117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4119 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4120 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4121 ;;      Totals:         0       2       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4122 ;;Total ram usage:        7 bytes
  4123 ;; Hardware stack levels used:    1
  4124 ;; Hardware stack levels required when called:    9
  4125 ;; This function calls:
  4126 ;;		_initRTC
  4127 ;;		_readPastRun
  4128 ;;		_showDateTime
  4129 ;;		_showErrorMessage
  4130 ;;		_showMainMenu
  4131 ;;		_showRunMenu
  4132 ;;		_showRunSelect
  4133 ;;		_showRunStats
  4134 ;;		_showRunTime
  4135 ;; This function is called by:
  4136 ;;		_main
  4137 ;; This function uses a non-reentrant model
  4138 ;;
  4139                           
  4140                           	psect	text5
  4141  00315C                     __ptext5:
  4142                           	opt stack 0
  4143  00315C                     _showInterface:
  4144                           	opt stack 21
  4145                           
  4146                           ;interface.c: 20: initRTC();
  4147                           
  4148                           ;incstack = 0
  4149  00315C  ECDD  F020         	call	_initRTC	;wreg free
  4150  003160                     l7475:
  4151                           
  4152                           ;interface.c: 23: showDateTime();
  4153  003160  ECE2  F014         	call	_showDateTime	;wreg free
  4154  003164                     l7477:
  4155                           
  4156                           ;interface.c: 26: key = showMainMenu();
  4157  003164  ECD3  F01E         	call	_showMainMenu	;wreg free
  4158  003168  0101               	movlb	1	; () banked
  4159  00316A  6F12               	movwf	showInterface@key& (0+255),b
  4160                           
  4161                           ; BSR set to: 1
  4162                           ;interface.c: 28: if(key == 'C'){
  4163  00316C  0E43               	movlw	67
  4164  00316E  0101               	movlb	1	; () banked
  4165  003170  1912               	xorwf	showInterface@key& (0+255),w,b
  4166  003172  A4D8               	btfss	status,2,c
  4167  003174  D04F               	goto	l7507
  4168                           
  4169                           ; BSR set to: 1
  4170                           ;interface.c: 30: int n = showRunSelect();
  4171  003176  ECED  F01D         	call	_showRunSelect	;wreg free
  4172  00317A  0100               	movlb	0	; () banked
  4173  00317C  6FF9               	movwf	??_showInterface& (0+255),b
  4174  00317E  0100               	movlb	0	; () banked
  4175  003180  51F9               	movf	??_showInterface& (0+255),w,b
  4176  003182  0101               	movlb	1	; () banked
  4177  003184  6F0E               	movwf	showInterface@n& (0+255),b
  4178  003186  6B0F               	clrf	(showInterface@n+1)& (0+255),b
  4179                           
  4180                           ; BSR set to: 1
  4181                           ;interface.c: 32: if(n == '*')continue;
  4182  003188  0E2A               	movlw	42
  4183  00318A  0101               	movlb	1	; () banked
  4184  00318C  190E               	xorwf	showInterface@n& (0+255),w,b
  4185  00318E  0101               	movlb	1	; () banked
  4186  003190  110F               	iorwf	(showInterface@n+1)& (0+255),w,b
  4187  003192  B4D8               	btfsc	status,2,c
  4188  003194  D7E7               	goto	l7477
  4189                           
  4190                           ; BSR set to: 1
  4191                           ;interface.c: 34: int* run = readPastRun( n - '1');
  4192                           
  4193                           ; BSR set to: 1
  4194                           
  4195                           ; BSR set to: 1
  4196  003196  0ECF               	movlw	207
  4197  003198  0101               	movlb	1	; () banked
  4198  00319A  250E               	addwf	showInterface@n& (0+255),w,b
  4199  00319C  0100               	movlb	0	; () banked
  4200  00319E  6F80               	movwf	readPastRun@run& (0+255),b
  4201  0031A0  0EFF               	movlw	255
  4202  0031A2  0101               	movlb	1	; () banked
  4203  0031A4  210F               	addwfc	(showInterface@n+1)& (0+255),w,b
  4204  0031A6  0100               	movlb	0	; () banked
  4205  0031A8  6F81               	movwf	(readPastRun@run+1)& (0+255),b
  4206  0031AA  EC44  F01B         	call	_readPastRun	;wreg free
  4207  0031AE  C080  F110         	movff	?_readPastRun,showInterface@run
  4208  0031B2  C081  F111         	movff	?_readPastRun+1,showInterface@run+1
  4209                           
  4210                           ;interface.c: 35: if(run[0] == 0xff){
  4211  0031B6  C110  FFD9         	movff	showInterface@run,fsr2l
  4212  0031BA  C111  FFDA         	movff	showInterface@run+1,fsr2h
  4213  0031BE  28DE               	incf	postinc2,w,c
  4214  0031C0  10DE               	iorwf	postinc2,w,c
  4215  0031C2  A4D8               	btfss	status,2,c
  4216  0031C4  D003               	goto	l7493
  4217                           
  4218                           ;interface.c: 36: showErrorMessage();
  4219  0031C6  EC0D  F020         	call	_showErrorMessage	;wreg free
  4220                           
  4221                           ;interface.c: 37: continue;
  4222  0031CA  D7CC               	goto	l7477
  4223  0031CC                     l7493:
  4224                           
  4225                           ;interface.c: 41: key = showRunMenu(n);
  4226  0031CC  0101               	movlb	1	; () banked
  4227  0031CE  510E               	movf	showInterface@n& (0+255),w,b
  4228  0031D0  EC1F  F01E         	call	_showRunMenu
  4229  0031D4  0101               	movlb	1	; () banked
  4230  0031D6  6F12               	movwf	showInterface@key& (0+255),b
  4231                           
  4232                           ; BSR set to: 1
  4233                           ;interface.c: 43: if(key == 'A') showRunTime(run);
  4234  0031D8  0E41               	movlw	65
  4235  0031DA  0101               	movlb	1	; () banked
  4236  0031DC  1912               	xorwf	showInterface@key& (0+255),w,b
  4237  0031DE  A4D8               	btfss	status,2,c
  4238  0031E0  D007               	goto	l7499
  4239                           
  4240                           ; BSR set to: 1
  4241  0031E2  C110  F0EF         	movff	showInterface@run,showRunTime@run
  4242  0031E6  C111  F0F0         	movff	showInterface@run+1,showRunTime@run+1
  4243  0031EA  ECFC  F010         	call	_showRunTime	;wreg free
  4244  0031EE  D7EE               	goto	l7493
  4245  0031F0                     l7499:
  4246                           
  4247                           ;interface.c: 44: else if(key == 'B') showRunStats(run);
  4248  0031F0  0E42               	movlw	66
  4249  0031F2  0101               	movlb	1	; () banked
  4250  0031F4  1912               	xorwf	showInterface@key& (0+255),w,b
  4251  0031F6  A4D8               	btfss	status,2,c
  4252  0031F8  D007               	goto	l7503
  4253                           
  4254                           ; BSR set to: 1
  4255  0031FA  C110  F0EF         	movff	showInterface@run,showRunStats@run
  4256  0031FE  C111  F0F0         	movff	showInterface@run+1,showRunStats@run+1
  4257  003202  ECF0  F01A         	call	_showRunStats	;wreg free
  4258  003206  D7E2               	goto	l7493
  4259  003208                     l7503:
  4260                           
  4261                           ;interface.c: 45: else if(key == '*') break;
  4262  003208  0E2A               	movlw	42
  4263  00320A  0101               	movlb	1	; () banked
  4264  00320C  1912               	xorwf	showInterface@key& (0+255),w,b
  4265  00320E  B4D8               	btfsc	status,2,c
  4266  003210  D7A9               	goto	l7477
  4267  003212  D7DC               	goto	l7493
  4268  003214                     l7507:
  4269                           
  4270                           ; BSR set to: 1
  4271                           ;interface.c: 49: else if(key == 'B') return;
  4272  003214  0E42               	movlw	66
  4273  003216  0101               	movlb	1	; () banked
  4274  003218  1912               	xorwf	showInterface@key& (0+255),w,b
  4275  00321A  B4D8               	btfsc	status,2,c
  4276  00321C  0012               	return	
  4277                           
  4278                           ; BSR set to: 1
  4279                           ;interface.c: 50: else if(key == '*') break;
  4280                           
  4281                           ; BSR set to: 1
  4282                           
  4283                           ; BSR set to: 1
  4284                           
  4285                           ; BSR set to: 1
  4286  00321E  0E2A               	movlw	42
  4287  003220  0101               	movlb	1	; () banked
  4288  003222  1912               	xorwf	showInterface@key& (0+255),w,b
  4289  003224  B4D8               	btfsc	status,2,c
  4290  003226  D79C               	goto	l7475
  4291  003228  D79D               	goto	l7477
  4292  00322A                     __end_of_showInterface:
  4293                           	opt stack 0
  4294                           tblptru	equ	0xFF8
  4295                           tblptrh	equ	0xFF7
  4296                           tblptrl	equ	0xFF6
  4297                           tablat	equ	0xFF5
  4298                           postinc0	equ	0xFEE
  4299                           wreg	equ	0xFE8
  4300                           postdec1	equ	0xFE5
  4301                           fsr1l	equ	0xFE1
  4302                           indf2	equ	0xFDF
  4303                           postinc2	equ	0xFDE
  4304                           postdec2	equ	0xFDD
  4305                           fsr2h	equ	0xFDA
  4306                           fsr2l	equ	0xFD9
  4307                           status	equ	0xFD8
  4308                           
  4309 ;; *************** function _showRunTime *****************
  4310 ;; Defined at:
  4311 ;;		line 108 in file "interface.c"
  4312 ;; Parameters:    Size  Location     Type
  4313 ;;  run             2  111[BANK0 ] PTR int 
  4314 ;;		 -> readPastRun@data(14), main@run(14), 
  4315 ;; Auto vars:     Size  Location     Type
  4316 ;;  time            4    8[BANK1 ] long 
  4317 ;;  t2              2    6[BANK1 ] int 
  4318 ;;  t1              2    4[BANK1 ] int 
  4319 ;; Return value:  Size  Location     Type
  4320 ;;                  1    wreg      unsigned char 
  4321 ;; Registers used:
  4322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4323 ;; Tracked objects:
  4324 ;;		On entry : 0/0
  4325 ;;		On exit  : 0/0
  4326 ;;		Unchanged: 0/0
  4327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4328 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4329 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4330 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4331 ;;      Totals:         0       4      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4332 ;;Total ram usage:       16 bytes
  4333 ;; Hardware stack levels used:    1
  4334 ;; Hardware stack levels required when called:    8
  4335 ;; This function calls:
  4336 ;;		___aldiv
  4337 ;;		___almod
  4338 ;;		_lcdClear
  4339 ;;		_printf
  4340 ;;		_readKeypad
  4341 ;; This function is called by:
  4342 ;;		_main
  4343 ;;		_showInterface
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           	psect	text6
  4348  0021F8                     __ptext6:
  4349                           	opt stack 0
  4350  0021F8                     _showRunTime:
  4351                           	opt stack 22
  4352                           
  4353                           ;interface.c: 109: int t1 = run[0], t2 = run[1];
  4354                           
  4355                           ; BSR set to: 1
  4356                           ;incstack = 0
  4357  0021F8  C0EF  FFD9         	movff	showRunTime@run,fsr2l
  4358  0021FC  C0F0  FFDA         	movff	showRunTime@run+1,fsr2h
  4359  002200  CFDE F104          	movff	postinc2,showRunTime@t1
  4360  002204  CFDD F105          	movff	postdec2,showRunTime@t1+1
  4361  002208  0100               	movlb	0	; () banked
  4362  00220A  EE20 F002          	lfsr	2,2
  4363  00220E  51EF               	movf	showRunTime@run& (0+255),w,b
  4364  002210  26D9               	addwf	fsr2l,f,c
  4365  002212  51F0               	movf	(showRunTime@run+1)& (0+255),w,b
  4366  002214  22DA               	addwfc	fsr2h,f,c
  4367  002216  CFDE F106          	movff	postinc2,showRunTime@t2
  4368  00221A  CFDD F107          	movff	postdec2,showRunTime@t2+1
  4369                           
  4370                           ;interface.c: 110: long time = (t1<<8) + t2;
  4371  00221E  0101               	movlb	1	; () banked
  4372  002220  5104               	movf	showRunTime@t1& (0+255),w,b
  4373  002222  0100               	movlb	0	; () banked
  4374  002224  6FF2               	movwf	(??_showRunTime+1)& (0+255),b
  4375  002226  6BF1               	clrf	??_showRunTime& (0+255),b
  4376  002228  0101               	movlb	1	; () banked
  4377  00222A  5106               	movf	showRunTime@t2& (0+255),w,b
  4378  00222C  0100               	movlb	0	; () banked
  4379  00222E  27F1               	addwf	??_showRunTime& (0+255),f,b
  4380  002230  0101               	movlb	1	; () banked
  4381  002232  5107               	movf	(showRunTime@t2+1)& (0+255),w,b
  4382  002234  0100               	movlb	0	; () banked
  4383  002236  23F2               	addwfc	(??_showRunTime+1)& (0+255),f,b
  4384  002238  C0F1  F108         	movff	??_showRunTime,showRunTime@time
  4385  00223C  C0F2  F109         	movff	??_showRunTime+1,showRunTime@time+1
  4386  002240  0101               	movlb	1	; () banked
  4387  002242  0E00               	movlw	0
  4388  002244  BF09               	btfsc	(showRunTime@time+1)& (0+255),7,b
  4389  002246  0EFF               	movlw	-1
  4390  002248  6F0A               	movwf	(showRunTime@time+2)& (0+255),b
  4391  00224A  6F0B               	movwf	(showRunTime@time+3)& (0+255),b
  4392                           
  4393                           ; BSR set to: 1
  4394                           ;interface.c: 112: lcdClear();
  4395  00224C  EC04  F021         	call	_lcdClear	;wreg free
  4396                           
  4397                           ;interface.c: 113: printf("time %02ld:%02ld.%01ld\n",time/600,(time%600)/10,(time%600)%1
      +                          0);
  4398  002250  0E58               	movlw	88
  4399  002252  6E27               	movwf	___almod@divisor,c
  4400  002254  0E02               	movlw	2
  4401  002256  6E28               	movwf	___almod@divisor+1,c
  4402  002258  0E00               	movlw	0
  4403  00225A  6E29               	movwf	___almod@divisor+2,c
  4404  00225C  0E00               	movlw	0
  4405  00225E  6E2A               	movwf	___almod@divisor+3,c
  4406  002260  C108  F023         	movff	showRunTime@time,___almod@dividend
  4407  002264  C109  F024         	movff	showRunTime@time+1,___almod@dividend+1
  4408  002268  C10A  F025         	movff	showRunTime@time+2,___almod@dividend+2
  4409  00226C  C10B  F026         	movff	showRunTime@time+3,___almod@dividend+3
  4410  002270  EC9A  F01A         	call	___almod	;wreg free
  4411  002274  C023  F100         	movff	?___almod,_showRunTime$1420
  4412  002278  C024  F101         	movff	?___almod+1,_showRunTime$1420+1
  4413  00227C  C025  F102         	movff	?___almod+2,_showRunTime$1420+2
  4414  002280  C026  F103         	movff	?___almod+3,_showRunTime$1420+3
  4415                           
  4416                           ;interface.c: 113: printf("time %02ld:%02ld.%01ld\n",time/600,(time%600)/10,(time%600)%1
      +                          0);
  4417  002284  0EA4               	movlw	low STR_18
  4418  002286  0100               	movlb	0	; () banked
  4419  002288  6FBD               	movwf	printf@f& (0+255),b
  4420  00228A  0EFE               	movlw	high STR_18
  4421  00228C  0100               	movlb	0	; () banked
  4422  00228E  6FBE               	movwf	(printf@f+1)& (0+255),b
  4423  002290  C108  F02D         	movff	showRunTime@time,___aldiv@dividend
  4424  002294  C109  F02E         	movff	showRunTime@time+1,___aldiv@dividend+1
  4425  002298  C10A  F02F         	movff	showRunTime@time+2,___aldiv@dividend+2
  4426  00229C  C10B  F030         	movff	showRunTime@time+3,___aldiv@dividend+3
  4427  0022A0  0E58               	movlw	88
  4428  0022A2  6E31               	movwf	___aldiv@divisor,c
  4429  0022A4  0E02               	movlw	2
  4430  0022A6  6E32               	movwf	___aldiv@divisor+1,c
  4431  0022A8  0E00               	movlw	0
  4432  0022AA  6E33               	movwf	___aldiv@divisor+2,c
  4433  0022AC  0E00               	movlw	0
  4434  0022AE  6E34               	movwf	___aldiv@divisor+3,c
  4435  0022B0  EC15  F019         	call	___aldiv	;wreg free
  4436  0022B4  C02D  F0BF         	movff	?___aldiv,?_printf+2
  4437  0022B8  C02E  F0C0         	movff	?___aldiv+1,?_printf+3
  4438  0022BC  C02F  F0C1         	movff	?___aldiv+2,?_printf+4
  4439  0022C0  C030  F0C2         	movff	?___aldiv+3,?_printf+5
  4440  0022C4  0E58               	movlw	88
  4441  0022C6  6E27               	movwf	___almod@divisor,c
  4442  0022C8  0E02               	movlw	2
  4443  0022CA  6E28               	movwf	___almod@divisor+1,c
  4444  0022CC  0E00               	movlw	0
  4445  0022CE  6E29               	movwf	___almod@divisor+2,c
  4446  0022D0  0E00               	movlw	0
  4447  0022D2  6E2A               	movwf	___almod@divisor+3,c
  4448  0022D4  C108  F023         	movff	showRunTime@time,___almod@dividend
  4449  0022D8  C109  F024         	movff	showRunTime@time+1,___almod@dividend+1
  4450  0022DC  C10A  F025         	movff	showRunTime@time+2,___almod@dividend+2
  4451  0022E0  C10B  F026         	movff	showRunTime@time+3,___almod@dividend+3
  4452  0022E4  EC9A  F01A         	call	___almod	;wreg free
  4453  0022E8  C023  F02D         	movff	?___almod,___aldiv@dividend
  4454  0022EC  C024  F02E         	movff	?___almod+1,___aldiv@dividend+1
  4455  0022F0  C025  F02F         	movff	?___almod+2,___aldiv@dividend+2
  4456  0022F4  C026  F030         	movff	?___almod+3,___aldiv@dividend+3
  4457  0022F8  0E0A               	movlw	10
  4458  0022FA  6E31               	movwf	___aldiv@divisor,c
  4459  0022FC  0E00               	movlw	0
  4460  0022FE  6E32               	movwf	___aldiv@divisor+1,c
  4461  002300  0E00               	movlw	0
  4462  002302  6E33               	movwf	___aldiv@divisor+2,c
  4463  002304  0E00               	movlw	0
  4464  002306  6E34               	movwf	___aldiv@divisor+3,c
  4465  002308  EC15  F019         	call	___aldiv	;wreg free
  4466  00230C  C02D  F0C3         	movff	?___aldiv,?_printf+6
  4467  002310  C02E  F0C4         	movff	?___aldiv+1,?_printf+7
  4468  002314  C02F  F0C5         	movff	?___aldiv+2,?_printf+8
  4469  002318  C030  F0C6         	movff	?___aldiv+3,?_printf+9
  4470  00231C  C100  F023         	movff	_showRunTime$1420,___almod@dividend
  4471  002320  C101  F024         	movff	_showRunTime$1420+1,___almod@dividend+1
  4472  002324  C102  F025         	movff	_showRunTime$1420+2,___almod@dividend+2
  4473  002328  C103  F026         	movff	_showRunTime$1420+3,___almod@dividend+3
  4474  00232C  0E0A               	movlw	10
  4475  00232E  6E27               	movwf	___almod@divisor,c
  4476  002330  0E00               	movlw	0
  4477  002332  6E28               	movwf	___almod@divisor+1,c
  4478  002334  0E00               	movlw	0
  4479  002336  6E29               	movwf	___almod@divisor+2,c
  4480  002338  0E00               	movlw	0
  4481  00233A  6E2A               	movwf	___almod@divisor+3,c
  4482  00233C  EC9A  F01A         	call	___almod	;wreg free
  4483  002340  C023  F0C7         	movff	?___almod,?_printf+10
  4484  002344  C024  F0C8         	movff	?___almod+1,?_printf+11
  4485  002348  C025  F0C9         	movff	?___almod+2,?_printf+12
  4486  00234C  C026  F0CA         	movff	?___almod+3,?_printf+13
  4487  002350  EC09  F000         	call	_printf	;wreg free
  4488                           
  4489                           ;interface.c: 114: printf("              *>");
  4490  002354  0E54               	movlw	low STR_19
  4491  002356  0100               	movlb	0	; () banked
  4492  002358  6FBD               	movwf	printf@f& (0+255),b
  4493  00235A  0EFF               	movlw	high STR_19
  4494  00235C  0100               	movlb	0	; () banked
  4495  00235E  6FBE               	movwf	(printf@f+1)& (0+255),b
  4496  002360  EC09  F000         	call	_printf	;wreg free
  4497  002364                     l7305:
  4498  002364  EC38  F020         	call	_readKeypad	;wreg free
  4499  002368  0A2A               	xorlw	42
  4500  00236A  B4D8               	btfsc	status,2,c
  4501  00236C  0012               	return	
  4502  00236E  D7FA               	goto	l7305
  4503  002370                     __end_of_showRunTime:
  4504                           	opt stack 0
  4505                           tblptru	equ	0xFF8
  4506                           tblptrh	equ	0xFF7
  4507                           tblptrl	equ	0xFF6
  4508                           tablat	equ	0xFF5
  4509                           postinc0	equ	0xFEE
  4510                           wreg	equ	0xFE8
  4511                           postdec1	equ	0xFE5
  4512                           fsr1l	equ	0xFE1
  4513                           indf2	equ	0xFDF
  4514                           postinc2	equ	0xFDE
  4515                           postdec2	equ	0xFDD
  4516                           fsr2h	equ	0xFDA
  4517                           fsr2l	equ	0xFD9
  4518                           status	equ	0xFD8
  4519                           
  4520 ;; *************** function ___almod *****************
  4521 ;; Defined at:
  4522 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\almod.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;  dividend        4   34[COMRAM] long 
  4525 ;;  divisor         4   38[COMRAM] long 
  4526 ;; Auto vars:     Size  Location     Type
  4527 ;;  sign            1   43[COMRAM] unsigned char 
  4528 ;;  counter         1   42[COMRAM] unsigned char 
  4529 ;; Return value:  Size  Location     Type
  4530 ;;                  4   34[COMRAM] long 
  4531 ;; Registers used:
  4532 ;;		wreg, status,2, status,0
  4533 ;; Tracked objects:
  4534 ;;		On entry : 0/0
  4535 ;;		On exit  : 0/0
  4536 ;;		Unchanged: 0/0
  4537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4538 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4539 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4541 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4542 ;;Total ram usage:       10 bytes
  4543 ;; Hardware stack levels used:    1
  4544 ;; Hardware stack levels required when called:    3
  4545 ;; This function calls:
  4546 ;;		Nothing
  4547 ;; This function is called by:
  4548 ;;		_main
  4549 ;;		_showRunTime
  4550 ;; This function uses a non-reentrant model
  4551 ;;
  4552                           
  4553                           	psect	text7
  4554  003534                     __ptext7:
  4555                           	opt stack 0
  4556  003534                     ___almod:
  4557                           	opt stack 26
  4558                           
  4559                           ;incstack = 0
  4560  003534  0E00               	movlw	0
  4561  003536  6E2C               	movwf	___almod@sign,c
  4562  003538  AE26               	btfss	___almod@dividend+3,7,c
  4563  00353A  D00A               	goto	l7187
  4564  00353C  1E26               	comf	___almod@dividend+3,f,c
  4565  00353E  1E25               	comf	___almod@dividend+2,f,c
  4566  003540  1E24               	comf	___almod@dividend+1,f,c
  4567  003542  6C23               	negf	___almod@dividend,c
  4568  003544  0E00               	movlw	0
  4569  003546  2224               	addwfc	___almod@dividend+1,f,c
  4570  003548  2225               	addwfc	___almod@dividend+2,f,c
  4571  00354A  2226               	addwfc	___almod@dividend+3,f,c
  4572  00354C  0E01               	movlw	1
  4573  00354E  6E2C               	movwf	___almod@sign,c
  4574  003550                     l7187:
  4575  003550  AE2A               	btfss	___almod@divisor+3,7,c
  4576  003552  D008               	goto	l7191
  4577  003554  1E2A               	comf	___almod@divisor+3,f,c
  4578  003556  1E29               	comf	___almod@divisor+2,f,c
  4579  003558  1E28               	comf	___almod@divisor+1,f,c
  4580  00355A  6C27               	negf	___almod@divisor,c
  4581  00355C  0E00               	movlw	0
  4582  00355E  2228               	addwfc	___almod@divisor+1,f,c
  4583  003560  2229               	addwfc	___almod@divisor+2,f,c
  4584  003562  222A               	addwfc	___almod@divisor+3,f,c
  4585  003564                     l7191:
  4586  003564  5027               	movf	___almod@divisor,w,c
  4587  003566  1028               	iorwf	___almod@divisor+1,w,c
  4588  003568  1029               	iorwf	___almod@divisor+2,w,c
  4589  00356A  102A               	iorwf	___almod@divisor+3,w,c
  4590  00356C  B4D8               	btfsc	status,2,c
  4591  00356E  D024               	goto	l7207
  4592  003570  0E01               	movlw	1
  4593  003572  6E2B               	movwf	___almod@counter,c
  4594  003574  D006               	goto	l7197
  4595  003576                     l7195:
  4596  003576  90D8               	bcf	status,0,c
  4597  003578  3627               	rlcf	___almod@divisor,f,c
  4598  00357A  3628               	rlcf	___almod@divisor+1,f,c
  4599  00357C  3629               	rlcf	___almod@divisor+2,f,c
  4600  00357E  362A               	rlcf	___almod@divisor+3,f,c
  4601  003580  2A2B               	incf	___almod@counter,f,c
  4602  003582                     l7197:
  4603  003582  AE2A               	btfss	___almod@divisor+3,7,c
  4604  003584  D7F8               	goto	l7195
  4605  003586                     l7199:
  4606  003586  5027               	movf	___almod@divisor,w,c
  4607  003588  5C23               	subwf	___almod@dividend,w,c
  4608  00358A  5028               	movf	___almod@divisor+1,w,c
  4609  00358C  5824               	subwfb	___almod@dividend+1,w,c
  4610  00358E  5029               	movf	___almod@divisor+2,w,c
  4611  003590  5825               	subwfb	___almod@dividend+2,w,c
  4612  003592  502A               	movf	___almod@divisor+3,w,c
  4613  003594  5826               	subwfb	___almod@dividend+3,w,c
  4614  003596  A0D8               	btfss	status,0,c
  4615  003598  D008               	goto	l7203
  4616  00359A  5027               	movf	___almod@divisor,w,c
  4617  00359C  5E23               	subwf	___almod@dividend,f,c
  4618  00359E  5028               	movf	___almod@divisor+1,w,c
  4619  0035A0  5A24               	subwfb	___almod@dividend+1,f,c
  4620  0035A2  5029               	movf	___almod@divisor+2,w,c
  4621  0035A4  5A25               	subwfb	___almod@dividend+2,f,c
  4622  0035A6  502A               	movf	___almod@divisor+3,w,c
  4623  0035A8  5A26               	subwfb	___almod@dividend+3,f,c
  4624  0035AA                     l7203:
  4625  0035AA  90D8               	bcf	status,0,c
  4626  0035AC  322A               	rrcf	___almod@divisor+3,f,c
  4627  0035AE  3229               	rrcf	___almod@divisor+2,f,c
  4628  0035B0  3228               	rrcf	___almod@divisor+1,f,c
  4629  0035B2  3227               	rrcf	___almod@divisor,f,c
  4630  0035B4  2E2B               	decfsz	___almod@counter,f,c
  4631  0035B6  D7E7               	goto	l7199
  4632  0035B8                     l7207:
  4633  0035B8  502C               	movf	___almod@sign,w,c
  4634  0035BA  B4D8               	btfsc	status,2,c
  4635  0035BC  D008               	goto	l7211
  4636  0035BE  1E26               	comf	___almod@dividend+3,f,c
  4637  0035C0  1E25               	comf	___almod@dividend+2,f,c
  4638  0035C2  1E24               	comf	___almod@dividend+1,f,c
  4639  0035C4  6C23               	negf	___almod@dividend,c
  4640  0035C6  0E00               	movlw	0
  4641  0035C8  2224               	addwfc	___almod@dividend+1,f,c
  4642  0035CA  2225               	addwfc	___almod@dividend+2,f,c
  4643  0035CC  2226               	addwfc	___almod@dividend+3,f,c
  4644  0035CE                     l7211:
  4645  0035CE  C023  F023         	movff	___almod@dividend,?___almod
  4646  0035D2  C024  F024         	movff	___almod@dividend+1,?___almod+1
  4647  0035D6  C025  F025         	movff	___almod@dividend+2,?___almod+2
  4648  0035DA  C026  F026         	movff	___almod@dividend+3,?___almod+3
  4649  0035DE  0012               	return	
  4650  0035E0                     __end_of___almod:
  4651                           	opt stack 0
  4652                           tblptru	equ	0xFF8
  4653                           tblptrh	equ	0xFF7
  4654                           tblptrl	equ	0xFF6
  4655                           tablat	equ	0xFF5
  4656                           postinc0	equ	0xFEE
  4657                           wreg	equ	0xFE8
  4658                           postdec1	equ	0xFE5
  4659                           fsr1l	equ	0xFE1
  4660                           indf2	equ	0xFDF
  4661                           postinc2	equ	0xFDE
  4662                           postdec2	equ	0xFDD
  4663                           fsr2h	equ	0xFDA
  4664                           fsr2l	equ	0xFD9
  4665                           status	equ	0xFD8
  4666                           
  4667 ;; *************** function ___aldiv *****************
  4668 ;; Defined at:
  4669 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
  4670 ;; Parameters:    Size  Location     Type
  4671 ;;  dividend        4   44[COMRAM] long 
  4672 ;;  divisor         4   48[COMRAM] long 
  4673 ;; Auto vars:     Size  Location     Type
  4674 ;;  quotient        4   54[COMRAM] long 
  4675 ;;  sign            1   53[COMRAM] unsigned char 
  4676 ;;  counter         1   52[COMRAM] unsigned char 
  4677 ;; Return value:  Size  Location     Type
  4678 ;;                  4   44[COMRAM] long 
  4679 ;; Registers used:
  4680 ;;		wreg, status,2, status,0
  4681 ;; Tracked objects:
  4682 ;;		On entry : 0/0
  4683 ;;		On exit  : 0/0
  4684 ;;		Unchanged: 0/0
  4685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4686 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4687 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4689 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4690 ;;Total ram usage:       14 bytes
  4691 ;; Hardware stack levels used:    1
  4692 ;; Hardware stack levels required when called:    3
  4693 ;; This function calls:
  4694 ;;		Nothing
  4695 ;; This function is called by:
  4696 ;;		_main
  4697 ;;		_showRunTime
  4698 ;; This function uses a non-reentrant model
  4699 ;;
  4700                           
  4701                           	psect	text8
  4702  00322A                     __ptext8:
  4703                           	opt stack 0
  4704  00322A                     ___aldiv:
  4705                           	opt stack 26
  4706                           
  4707                           ;incstack = 0
  4708  00322A  0E00               	movlw	0
  4709  00322C  6E36               	movwf	___aldiv@sign,c
  4710  00322E  AE34               	btfss	___aldiv@divisor+3,7,c
  4711  003230  D00A               	goto	l7143
  4712  003232  1E34               	comf	___aldiv@divisor+3,f,c
  4713  003234  1E33               	comf	___aldiv@divisor+2,f,c
  4714  003236  1E32               	comf	___aldiv@divisor+1,f,c
  4715  003238  6C31               	negf	___aldiv@divisor,c
  4716  00323A  0E00               	movlw	0
  4717  00323C  2232               	addwfc	___aldiv@divisor+1,f,c
  4718  00323E  2233               	addwfc	___aldiv@divisor+2,f,c
  4719  003240  2234               	addwfc	___aldiv@divisor+3,f,c
  4720  003242  0E01               	movlw	1
  4721  003244  6E36               	movwf	___aldiv@sign,c
  4722  003246                     l7143:
  4723  003246  AE30               	btfss	___aldiv@dividend+3,7,c
  4724  003248  D00A               	goto	l7149
  4725  00324A  1E30               	comf	___aldiv@dividend+3,f,c
  4726  00324C  1E2F               	comf	___aldiv@dividend+2,f,c
  4727  00324E  1E2E               	comf	___aldiv@dividend+1,f,c
  4728  003250  6C2D               	negf	___aldiv@dividend,c
  4729  003252  0E00               	movlw	0
  4730  003254  222E               	addwfc	___aldiv@dividend+1,f,c
  4731  003256  222F               	addwfc	___aldiv@dividend+2,f,c
  4732  003258  2230               	addwfc	___aldiv@dividend+3,f,c
  4733  00325A  0E01               	movlw	1
  4734  00325C  1A36               	xorwf	___aldiv@sign,f,c
  4735  00325E                     l7149:
  4736  00325E  0E00               	movlw	0
  4737  003260  6E37               	movwf	___aldiv@quotient,c
  4738  003262  0E00               	movlw	0
  4739  003264  6E38               	movwf	___aldiv@quotient+1,c
  4740  003266  0E00               	movlw	0
  4741  003268  6E39               	movwf	___aldiv@quotient+2,c
  4742  00326A  0E00               	movlw	0
  4743  00326C  6E3A               	movwf	___aldiv@quotient+3,c
  4744  00326E  5031               	movf	___aldiv@divisor,w,c
  4745  003270  1032               	iorwf	___aldiv@divisor+1,w,c
  4746  003272  1033               	iorwf	___aldiv@divisor+2,w,c
  4747  003274  1034               	iorwf	___aldiv@divisor+3,w,c
  4748  003276  B4D8               	btfsc	status,2,c
  4749  003278  D02A               	goto	l7171
  4750  00327A  0E01               	movlw	1
  4751  00327C  6E35               	movwf	___aldiv@counter,c
  4752  00327E  D006               	goto	l7157
  4753  003280                     l7155:
  4754  003280  90D8               	bcf	status,0,c
  4755  003282  3631               	rlcf	___aldiv@divisor,f,c
  4756  003284  3632               	rlcf	___aldiv@divisor+1,f,c
  4757  003286  3633               	rlcf	___aldiv@divisor+2,f,c
  4758  003288  3634               	rlcf	___aldiv@divisor+3,f,c
  4759  00328A  2A35               	incf	___aldiv@counter,f,c
  4760  00328C                     l7157:
  4761  00328C  AE34               	btfss	___aldiv@divisor+3,7,c
  4762  00328E  D7F8               	goto	l7155
  4763  003290                     l7159:
  4764  003290  90D8               	bcf	status,0,c
  4765  003292  3637               	rlcf	___aldiv@quotient,f,c
  4766  003294  3638               	rlcf	___aldiv@quotient+1,f,c
  4767  003296  3639               	rlcf	___aldiv@quotient+2,f,c
  4768  003298  363A               	rlcf	___aldiv@quotient+3,f,c
  4769  00329A  5031               	movf	___aldiv@divisor,w,c
  4770  00329C  5C2D               	subwf	___aldiv@dividend,w,c
  4771  00329E  5032               	movf	___aldiv@divisor+1,w,c
  4772  0032A0  582E               	subwfb	___aldiv@dividend+1,w,c
  4773  0032A2  5033               	movf	___aldiv@divisor+2,w,c
  4774  0032A4  582F               	subwfb	___aldiv@dividend+2,w,c
  4775  0032A6  5034               	movf	___aldiv@divisor+3,w,c
  4776  0032A8  5830               	subwfb	___aldiv@dividend+3,w,c
  4777  0032AA  A0D8               	btfss	status,0,c
  4778  0032AC  D009               	goto	l7167
  4779  0032AE  5031               	movf	___aldiv@divisor,w,c
  4780  0032B0  5E2D               	subwf	___aldiv@dividend,f,c
  4781  0032B2  5032               	movf	___aldiv@divisor+1,w,c
  4782  0032B4  5A2E               	subwfb	___aldiv@dividend+1,f,c
  4783  0032B6  5033               	movf	___aldiv@divisor+2,w,c
  4784  0032B8  5A2F               	subwfb	___aldiv@dividend+2,f,c
  4785  0032BA  5034               	movf	___aldiv@divisor+3,w,c
  4786  0032BC  5A30               	subwfb	___aldiv@dividend+3,f,c
  4787  0032BE  8037               	bsf	___aldiv@quotient,0,c
  4788  0032C0                     l7167:
  4789  0032C0  90D8               	bcf	status,0,c
  4790  0032C2  3234               	rrcf	___aldiv@divisor+3,f,c
  4791  0032C4  3233               	rrcf	___aldiv@divisor+2,f,c
  4792  0032C6  3232               	rrcf	___aldiv@divisor+1,f,c
  4793  0032C8  3231               	rrcf	___aldiv@divisor,f,c
  4794  0032CA  2E35               	decfsz	___aldiv@counter,f,c
  4795  0032CC  D7E1               	goto	l7159
  4796  0032CE                     l7171:
  4797  0032CE  5036               	movf	___aldiv@sign,w,c
  4798  0032D0  B4D8               	btfsc	status,2,c
  4799  0032D2  D008               	goto	l7175
  4800  0032D4  1E3A               	comf	___aldiv@quotient+3,f,c
  4801  0032D6  1E39               	comf	___aldiv@quotient+2,f,c
  4802  0032D8  1E38               	comf	___aldiv@quotient+1,f,c
  4803  0032DA  6C37               	negf	___aldiv@quotient,c
  4804  0032DC  0E00               	movlw	0
  4805  0032DE  2238               	addwfc	___aldiv@quotient+1,f,c
  4806  0032E0  2239               	addwfc	___aldiv@quotient+2,f,c
  4807  0032E2  223A               	addwfc	___aldiv@quotient+3,f,c
  4808  0032E4                     l7175:
  4809  0032E4  C037  F02D         	movff	___aldiv@quotient,?___aldiv
  4810  0032E8  C038  F02E         	movff	___aldiv@quotient+1,?___aldiv+1
  4811  0032EC  C039  F02F         	movff	___aldiv@quotient+2,?___aldiv+2
  4812  0032F0  C03A  F030         	movff	___aldiv@quotient+3,?___aldiv+3
  4813  0032F4  0012               	return	
  4814  0032F6                     __end_of___aldiv:
  4815                           	opt stack 0
  4816                           tblptru	equ	0xFF8
  4817                           tblptrh	equ	0xFF7
  4818                           tblptrl	equ	0xFF6
  4819                           tablat	equ	0xFF5
  4820                           postinc0	equ	0xFEE
  4821                           wreg	equ	0xFE8
  4822                           postdec1	equ	0xFE5
  4823                           fsr1l	equ	0xFE1
  4824                           indf2	equ	0xFDF
  4825                           postinc2	equ	0xFDE
  4826                           postdec2	equ	0xFDD
  4827                           fsr2h	equ	0xFDA
  4828                           fsr2l	equ	0xFD9
  4829                           status	equ	0xFD8
  4830                           
  4831 ;; *************** function _showRunStats *****************
  4832 ;; Defined at:
  4833 ;;		line 119 in file "interface.c"
  4834 ;; Parameters:    Size  Location     Type
  4835 ;;  run             2  111[BANK0 ] PTR int 
  4836 ;;		 -> readPastRun@data(14), main@run(14), 
  4837 ;; Auto vars:     Size  Location     Type
  4838 ;;  n_OTHER         2  119[BANK0 ] int 
  4839 ;;  n_C             2  117[BANK0 ] int 
  4840 ;;  n_9V            2  115[BANK0 ] int 
  4841 ;;  n_AA            2  113[BANK0 ] int 
  4842 ;; Return value:  Size  Location     Type
  4843 ;;                  1    wreg      unsigned char 
  4844 ;; Registers used:
  4845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4846 ;; Tracked objects:
  4847 ;;		On entry : 0/0
  4848 ;;		On exit  : 0/0
  4849 ;;		Unchanged: 0/0
  4850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4851 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4852 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4854 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4855 ;;Total ram usage:       10 bytes
  4856 ;; Hardware stack levels used:    1
  4857 ;; Hardware stack levels required when called:    8
  4858 ;; This function calls:
  4859 ;;		_lcdClear
  4860 ;;		_printf
  4861 ;;		_readKeypad
  4862 ;; This function is called by:
  4863 ;;		_main
  4864 ;;		_showInterface
  4865 ;; This function uses a non-reentrant model
  4866 ;;
  4867                           
  4868                           	psect	text9
  4869  0035E0                     __ptext9:
  4870                           	opt stack 0
  4871  0035E0                     _showRunStats:
  4872                           	opt stack 22
  4873                           
  4874                           ;interface.c: 120: int n_AA = run[2], n_9V = run[3], n_C = run[4], n_OTHER = run[5];
  4875                           
  4876                           ;incstack = 0
  4877  0035E0  0100               	movlb	0	; () banked
  4878  0035E2  EE20 F004          	lfsr	2,4
  4879  0035E6  51EF               	movf	showRunStats@run& (0+255),w,b
  4880  0035E8  26D9               	addwf	fsr2l,f,c
  4881  0035EA  51F0               	movf	(showRunStats@run+1)& (0+255),w,b
  4882  0035EC  22DA               	addwfc	fsr2h,f,c
  4883  0035EE  CFDE F0F1          	movff	postinc2,showRunStats@n_AA
  4884  0035F2  CFDD F0F2          	movff	postdec2,showRunStats@n_AA+1
  4885  0035F6  0100               	movlb	0	; () banked
  4886  0035F8  EE20 F006          	lfsr	2,6
  4887  0035FC  51EF               	movf	showRunStats@run& (0+255),w,b
  4888  0035FE  26D9               	addwf	fsr2l,f,c
  4889  003600  51F0               	movf	(showRunStats@run+1)& (0+255),w,b
  4890  003602  22DA               	addwfc	fsr2h,f,c
  4891  003604  CFDE F0F3          	movff	postinc2,showRunStats@n_9V
  4892  003608  CFDD F0F4          	movff	postdec2,showRunStats@n_9V+1
  4893  00360C  0100               	movlb	0	; () banked
  4894  00360E  EE20 F008          	lfsr	2,8
  4895  003612  51EF               	movf	showRunStats@run& (0+255),w,b
  4896  003614  26D9               	addwf	fsr2l,f,c
  4897  003616  51F0               	movf	(showRunStats@run+1)& (0+255),w,b
  4898  003618  22DA               	addwfc	fsr2h,f,c
  4899  00361A  CFDE F0F5          	movff	postinc2,showRunStats@n_C
  4900  00361E  CFDD F0F6          	movff	postdec2,showRunStats@n_C+1
  4901  003622  0100               	movlb	0	; () banked
  4902  003624  EE20 F00A          	lfsr	2,10
  4903  003628  51EF               	movf	showRunStats@run& (0+255),w,b
  4904  00362A  26D9               	addwf	fsr2l,f,c
  4905  00362C  51F0               	movf	(showRunStats@run+1)& (0+255),w,b
  4906  00362E  22DA               	addwfc	fsr2h,f,c
  4907  003630  CFDE F0F7          	movff	postinc2,showRunStats@n_OTHER
  4908  003634  CFDD F0F8          	movff	postdec2,showRunStats@n_OTHER+1
  4909                           
  4910                           ; BSR set to: 0
  4911                           ;interface.c: 122: lcdClear();
  4912  003638  EC04  F021         	call	_lcdClear	;wreg free
  4913                           
  4914                           ;interface.c: 123: printf("[AA,9V,C,other] \n");
  4915  00363C  0E31               	movlw	low STR_20
  4916  00363E  0100               	movlb	0	; () banked
  4917  003640  6FBD               	movwf	printf@f& (0+255),b
  4918  003642  0EFF               	movlw	high STR_20
  4919  003644  0100               	movlb	0	; () banked
  4920  003646  6FBE               	movwf	(printf@f+1)& (0+255),b
  4921  003648  EC09  F000         	call	_printf	;wreg free
  4922                           
  4923                           ;interface.c: 124: printf("[%d,%d,%d,%d]   *>",n_AA,n_9V,n_C,n_OTHER);
  4924  00364C  0EFA               	movlw	low STR_21
  4925  00364E  0100               	movlb	0	; () banked
  4926  003650  6FBD               	movwf	printf@f& (0+255),b
  4927  003652  0EFE               	movlw	high STR_21
  4928  003654  0100               	movlb	0	; () banked
  4929  003656  6FBE               	movwf	(printf@f+1)& (0+255),b
  4930  003658  C0F1  F0BF         	movff	showRunStats@n_AA,?_printf+2
  4931  00365C  C0F2  F0C0         	movff	showRunStats@n_AA+1,?_printf+3
  4932  003660  C0F3  F0C1         	movff	showRunStats@n_9V,?_printf+4
  4933  003664  C0F4  F0C2         	movff	showRunStats@n_9V+1,?_printf+5
  4934  003668  C0F5  F0C3         	movff	showRunStats@n_C,?_printf+6
  4935  00366C  C0F6  F0C4         	movff	showRunStats@n_C+1,?_printf+7
  4936  003670  C0F7  F0C5         	movff	showRunStats@n_OTHER,?_printf+8
  4937  003674  C0F8  F0C6         	movff	showRunStats@n_OTHER+1,?_printf+9
  4938  003678  EC09  F000         	call	_printf	;wreg free
  4939  00367C                     l7315:
  4940  00367C  EC38  F020         	call	_readKeypad	;wreg free
  4941  003680  0A2A               	xorlw	42
  4942  003682  B4D8               	btfsc	status,2,c
  4943  003684  0012               	return	
  4944  003686  D7FA               	goto	l7315
  4945  003688                     __end_of_showRunStats:
  4946                           	opt stack 0
  4947                           tblptru	equ	0xFF8
  4948                           tblptrh	equ	0xFF7
  4949                           tblptrl	equ	0xFF6
  4950                           tablat	equ	0xFF5
  4951                           postinc0	equ	0xFEE
  4952                           wreg	equ	0xFE8
  4953                           postdec1	equ	0xFE5
  4954                           fsr1l	equ	0xFE1
  4955                           indf2	equ	0xFDF
  4956                           postinc2	equ	0xFDE
  4957                           postdec2	equ	0xFDD
  4958                           fsr2h	equ	0xFDA
  4959                           fsr2l	equ	0xFD9
  4960                           status	equ	0xFD8
  4961                           
  4962 ;; *************** function _showRunSelect *****************
  4963 ;; Defined at:
  4964 ;;		line 86 in file "interface.c"
  4965 ;; Parameters:    Size  Location     Type
  4966 ;;		None
  4967 ;; Auto vars:     Size  Location     Type
  4968 ;;  k               1  111[BANK0 ] unsigned char 
  4969 ;; Return value:  Size  Location     Type
  4970 ;;                  1    wreg      unsigned char 
  4971 ;; Registers used:
  4972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4973 ;; Tracked objects:
  4974 ;;		On entry : 0/0
  4975 ;;		On exit  : 0/0
  4976 ;;		Unchanged: 0/0
  4977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4979 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4981 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4982 ;;Total ram usage:        1 bytes
  4983 ;; Hardware stack levels used:    1
  4984 ;; Hardware stack levels required when called:    8
  4985 ;; This function calls:
  4986 ;;		_lcdClear
  4987 ;;		_printf
  4988 ;;		_readKeypad
  4989 ;; This function is called by:
  4990 ;;		_showInterface
  4991 ;; This function uses a non-reentrant model
  4992 ;;
  4993                           
  4994                           	psect	text10
  4995  003BDA                     __ptext10:
  4996                           	opt stack 0
  4997  003BDA                     _showRunSelect:
  4998                           	opt stack 21
  4999                           
  5000                           ;interface.c: 87: lcdClear();
  5001                           
  5002                           ;incstack = 0
  5003  003BDA  EC04  F021         	call	_lcdClear	;wreg free
  5004                           
  5005                           ;interface.c: 88: printf("select run:     \n");
  5006  003BDE  0E1F               	movlw	low STR_14
  5007  003BE0  0100               	movlb	0	; () banked
  5008  003BE2  6FBD               	movwf	printf@f& (0+255),b
  5009  003BE4  0EFF               	movlw	high STR_14
  5010  003BE6  0100               	movlb	0	; () banked
  5011  003BE8  6FBE               	movwf	(printf@f+1)& (0+255),b
  5012  003BEA  EC09  F000         	call	_printf	;wreg free
  5013                           
  5014                           ;interface.c: 89: printf("[1,2,3,4]     *>");
  5015  003BEE  0E65               	movlw	low STR_15
  5016  003BF0  0100               	movlb	0	; () banked
  5017  003BF2  6FBD               	movwf	printf@f& (0+255),b
  5018  003BF4  0EFF               	movlw	high STR_15
  5019  003BF6  0100               	movlb	0	; () banked
  5020  003BF8  6FBE               	movwf	(printf@f+1)& (0+255),b
  5021  003BFA  EC09  F000         	call	_printf	;wreg free
  5022  003BFE                     l7417:
  5023  003BFE  EC38  F020         	call	_readKeypad	;wreg free
  5024  003C02  0100               	movlb	0	; () banked
  5025  003C04  6FEF               	movwf	showRunSelect@k& (0+255),b
  5026                           
  5027                           ; BSR set to: 0
  5028                           ;interface.c: 93: while(k != '1' && k != '2' && k != '3' && k != '4' && k != '*');
  5029  003C06  0E31               	movlw	49
  5030  003C08  0100               	movlb	0	; () banked
  5031  003C0A  19EF               	xorwf	showRunSelect@k& (0+255),w,b
  5032  003C0C  B4D8               	btfsc	status,2,c
  5033  003C0E  D014               	goto	l7429
  5034                           
  5035                           ; BSR set to: 0
  5036  003C10  0E32               	movlw	50
  5037  003C12  0100               	movlb	0	; () banked
  5038  003C14  19EF               	xorwf	showRunSelect@k& (0+255),w,b
  5039  003C16  B4D8               	btfsc	status,2,c
  5040  003C18  D00F               	goto	l7429
  5041                           
  5042                           ; BSR set to: 0
  5043  003C1A  0E33               	movlw	51
  5044  003C1C  0100               	movlb	0	; () banked
  5045  003C1E  19EF               	xorwf	showRunSelect@k& (0+255),w,b
  5046  003C20  B4D8               	btfsc	status,2,c
  5047  003C22  D00A               	goto	l7429
  5048                           
  5049                           ; BSR set to: 0
  5050  003C24  0E34               	movlw	52
  5051  003C26  0100               	movlb	0	; () banked
  5052  003C28  19EF               	xorwf	showRunSelect@k& (0+255),w,b
  5053  003C2A  B4D8               	btfsc	status,2,c
  5054  003C2C  D005               	goto	l7429
  5055                           
  5056                           ; BSR set to: 0
  5057  003C2E  0E2A               	movlw	42
  5058  003C30  0100               	movlb	0	; () banked
  5059  003C32  19EF               	xorwf	showRunSelect@k& (0+255),w,b
  5060  003C34  A4D8               	btfss	status,2,c
  5061  003C36  D7E3               	goto	l7417
  5062  003C38                     l7429:
  5063                           
  5064                           ; BSR set to: 0
  5065                           ;interface.c: 94: return k;
  5066  003C38  0100               	movlb	0	; () banked
  5067  003C3A  51EF               	movf	showRunSelect@k& (0+255),w,b
  5068  003C3C  0012               	return	
  5069  003C3E                     __end_of_showRunSelect:
  5070                           	opt stack 0
  5071                           tblptru	equ	0xFF8
  5072                           tblptrh	equ	0xFF7
  5073                           tblptrl	equ	0xFF6
  5074                           tablat	equ	0xFF5
  5075                           postinc0	equ	0xFEE
  5076                           wreg	equ	0xFE8
  5077                           postdec1	equ	0xFE5
  5078                           fsr1l	equ	0xFE1
  5079                           indf2	equ	0xFDF
  5080                           postinc2	equ	0xFDE
  5081                           postdec2	equ	0xFDD
  5082                           fsr2h	equ	0xFDA
  5083                           fsr2l	equ	0xFD9
  5084                           status	equ	0xFD8
  5085                           
  5086 ;; *************** function _showRunMenu *****************
  5087 ;; Defined at:
  5088 ;;		line 97 in file "interface.c"
  5089 ;; Parameters:    Size  Location     Type
  5090 ;;  key             1    wreg     unsigned char 
  5091 ;; Auto vars:     Size  Location     Type
  5092 ;;  key             1  111[BANK0 ] unsigned char 
  5093 ;;  k               1  112[BANK0 ] unsigned char 
  5094 ;; Return value:  Size  Location     Type
  5095 ;;                  1    wreg      unsigned char 
  5096 ;; Registers used:
  5097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5098 ;; Tracked objects:
  5099 ;;		On entry : 0/0
  5100 ;;		On exit  : 0/0
  5101 ;;		Unchanged: 0/0
  5102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5104 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5106 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5107 ;;Total ram usage:        2 bytes
  5108 ;; Hardware stack levels used:    1
  5109 ;; Hardware stack levels required when called:    8
  5110 ;; This function calls:
  5111 ;;		_lcdClear
  5112 ;;		_printf
  5113 ;;		_readKeypad
  5114 ;; This function is called by:
  5115 ;;		_showInterface
  5116 ;; This function uses a non-reentrant model
  5117 ;;
  5118                           
  5119                           	psect	text11
  5120  003C3E                     __ptext11:
  5121                           	opt stack 0
  5122  003C3E                     _showRunMenu:
  5123                           	opt stack 21
  5124                           
  5125                           ; BSR set to: 0
  5126                           ;incstack = 0
  5127                           ;showRunMenu@key stored from wreg
  5128  003C3E  0100               	movlb	0	; () banked
  5129  003C40  6FEF               	movwf	showRunMenu@key& (0+255),b
  5130                           
  5131                           ;interface.c: 98: lcdClear();
  5132  003C42  EC04  F021         	call	_lcdClear	;wreg free
  5133                           
  5134                           ;interface.c: 99: printf("%c) time  <A     \n",key);
  5135  003C46  0EE7               	movlw	low STR_16
  5136  003C48  0100               	movlb	0	; () banked
  5137  003C4A  6FBD               	movwf	printf@f& (0+255),b
  5138  003C4C  0EFE               	movlw	high STR_16
  5139  003C4E  0100               	movlb	0	; () banked
  5140  003C50  6FBE               	movwf	(printf@f+1)& (0+255),b
  5141  003C52  C0EF  F0BF         	movff	showRunMenu@key,?_printf+2
  5142  003C56  0100               	movlb	0	; () banked
  5143  003C58  6BC0               	clrf	(?_printf+3)& (0+255),b
  5144  003C5A  EC09  F000         	call	_printf	;wreg free
  5145                           
  5146                           ;interface.c: 100: printf( "   stats <B   *>");
  5147  003C5E  0E87               	movlw	low STR_17
  5148  003C60  0100               	movlb	0	; () banked
  5149  003C62  6FBD               	movwf	printf@f& (0+255),b
  5150  003C64  0EFF               	movlw	high STR_17
  5151  003C66  0100               	movlb	0	; () banked
  5152  003C68  6FBE               	movwf	(printf@f+1)& (0+255),b
  5153  003C6A  EC09  F000         	call	_printf	;wreg free
  5154  003C6E                     l7447:
  5155  003C6E  EC38  F020         	call	_readKeypad	;wreg free
  5156  003C72  0100               	movlb	0	; () banked
  5157  003C74  6FF0               	movwf	showRunMenu@k& (0+255),b
  5158                           
  5159                           ; BSR set to: 0
  5160                           ;interface.c: 104: while(k != 'A' && k != 'B' && k != '*');
  5161  003C76  0E41               	movlw	65
  5162  003C78  0100               	movlb	0	; () banked
  5163  003C7A  19F0               	xorwf	showRunMenu@k& (0+255),w,b
  5164  003C7C  B4D8               	btfsc	status,2,c
  5165  003C7E  D00A               	goto	l7455
  5166                           
  5167                           ; BSR set to: 0
  5168  003C80  0E42               	movlw	66
  5169  003C82  0100               	movlb	0	; () banked
  5170  003C84  19F0               	xorwf	showRunMenu@k& (0+255),w,b
  5171  003C86  B4D8               	btfsc	status,2,c
  5172  003C88  D005               	goto	l7455
  5173                           
  5174                           ; BSR set to: 0
  5175  003C8A  0E2A               	movlw	42
  5176  003C8C  0100               	movlb	0	; () banked
  5177  003C8E  19F0               	xorwf	showRunMenu@k& (0+255),w,b
  5178  003C90  A4D8               	btfss	status,2,c
  5179  003C92  D7ED               	goto	l7447
  5180  003C94                     l7455:
  5181                           
  5182                           ; BSR set to: 0
  5183                           ;interface.c: 105: return k;
  5184  003C94  0100               	movlb	0	; () banked
  5185  003C96  51F0               	movf	showRunMenu@k& (0+255),w,b
  5186  003C98  0012               	return	
  5187  003C9A                     __end_of_showRunMenu:
  5188                           	opt stack 0
  5189                           tblptru	equ	0xFF8
  5190                           tblptrh	equ	0xFF7
  5191                           tblptrl	equ	0xFF6
  5192                           tablat	equ	0xFF5
  5193                           postinc0	equ	0xFEE
  5194                           wreg	equ	0xFE8
  5195                           postdec1	equ	0xFE5
  5196                           fsr1l	equ	0xFE1
  5197                           indf2	equ	0xFDF
  5198                           postinc2	equ	0xFDE
  5199                           postdec2	equ	0xFDD
  5200                           fsr2h	equ	0xFDA
  5201                           fsr2l	equ	0xFD9
  5202                           status	equ	0xFD8
  5203                           
  5204 ;; *************** function _showMainMenu *****************
  5205 ;; Defined at:
  5206 ;;		line 75 in file "interface.c"
  5207 ;; Parameters:    Size  Location     Type
  5208 ;;		None
  5209 ;; Auto vars:     Size  Location     Type
  5210 ;;  k               1  111[BANK0 ] unsigned char 
  5211 ;; Return value:  Size  Location     Type
  5212 ;;                  1    wreg      unsigned char 
  5213 ;; Registers used:
  5214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5215 ;; Tracked objects:
  5216 ;;		On entry : 0/0
  5217 ;;		On exit  : 0/0
  5218 ;;		Unchanged: 0/0
  5219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5221 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5223 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5224 ;;Total ram usage:        1 bytes
  5225 ;; Hardware stack levels used:    1
  5226 ;; Hardware stack levels required when called:    8
  5227 ;; This function calls:
  5228 ;;		_lcdClear
  5229 ;;		_printf
  5230 ;;		_readKeypad
  5231 ;; This function is called by:
  5232 ;;		_showInterface
  5233 ;; This function uses a non-reentrant model
  5234 ;;
  5235                           
  5236                           	psect	text12
  5237  003DA6                     __ptext12:
  5238                           	opt stack 0
  5239  003DA6                     _showMainMenu:
  5240                           	opt stack 21
  5241                           
  5242                           ;interface.c: 76: lcdClear();
  5243                           
  5244                           ; BSR set to: 0
  5245                           ;incstack = 0
  5246  003DA6  EC04  F021         	call	_lcdClear	;wreg free
  5247                           
  5248                           ;interface.c: 77: printf("start   <B      \n");
  5249  003DAA  0E0D               	movlw	low STR_12
  5250  003DAC  0100               	movlb	0	; () banked
  5251  003DAE  6FBD               	movwf	printf@f& (0+255),b
  5252  003DB0  0EFF               	movlw	high STR_12
  5253  003DB2  0100               	movlb	0	; () banked
  5254  003DB4  6FBE               	movwf	(printf@f+1)& (0+255),b
  5255  003DB6  EC09  F000         	call	_printf	;wreg free
  5256                           
  5257                           ;interface.c: 78: printf("history <C    *>");
  5258  003DBA  0E76               	movlw	low STR_13
  5259  003DBC  0100               	movlb	0	; () banked
  5260  003DBE  6FBD               	movwf	printf@f& (0+255),b
  5261  003DC0  0EFF               	movlw	high STR_13
  5262  003DC2  0100               	movlb	0	; () banked
  5263  003DC4  6FBE               	movwf	(printf@f+1)& (0+255),b
  5264  003DC6  EC09  F000         	call	_printf	;wreg free
  5265  003DCA                     l7399:
  5266  003DCA  EC38  F020         	call	_readKeypad	;wreg free
  5267  003DCE  0100               	movlb	0	; () banked
  5268  003DD0  6FEF               	movwf	showMainMenu@k& (0+255),b
  5269                           
  5270                           ; BSR set to: 0
  5271                           ;interface.c: 82: while(k != 'B' && k != 'C' && k != '*');
  5272  003DD2  0E42               	movlw	66
  5273  003DD4  0100               	movlb	0	; () banked
  5274  003DD6  19EF               	xorwf	showMainMenu@k& (0+255),w,b
  5275  003DD8  B4D8               	btfsc	status,2,c
  5276  003DDA  D00A               	goto	l7407
  5277                           
  5278                           ; BSR set to: 0
  5279  003DDC  0E43               	movlw	67
  5280  003DDE  0100               	movlb	0	; () banked
  5281  003DE0  19EF               	xorwf	showMainMenu@k& (0+255),w,b
  5282  003DE2  B4D8               	btfsc	status,2,c
  5283  003DE4  D005               	goto	l7407
  5284                           
  5285                           ; BSR set to: 0
  5286  003DE6  0E2A               	movlw	42
  5287  003DE8  0100               	movlb	0	; () banked
  5288  003DEA  19EF               	xorwf	showMainMenu@k& (0+255),w,b
  5289  003DEC  A4D8               	btfss	status,2,c
  5290  003DEE  D7ED               	goto	l7399
  5291  003DF0                     l7407:
  5292                           
  5293                           ; BSR set to: 0
  5294                           ;interface.c: 83: return k;
  5295  003DF0  0100               	movlb	0	; () banked
  5296  003DF2  51EF               	movf	showMainMenu@k& (0+255),w,b
  5297  003DF4  0012               	return	
  5298  003DF6                     __end_of_showMainMenu:
  5299                           	opt stack 0
  5300                           tblptru	equ	0xFF8
  5301                           tblptrh	equ	0xFF7
  5302                           tblptrl	equ	0xFF6
  5303                           tablat	equ	0xFF5
  5304                           postinc0	equ	0xFEE
  5305                           wreg	equ	0xFE8
  5306                           postdec1	equ	0xFE5
  5307                           fsr1l	equ	0xFE1
  5308                           indf2	equ	0xFDF
  5309                           postinc2	equ	0xFDE
  5310                           postdec2	equ	0xFDD
  5311                           fsr2h	equ	0xFDA
  5312                           fsr2l	equ	0xFD9
  5313                           status	equ	0xFD8
  5314                           
  5315 ;; *************** function _showErrorMessage *****************
  5316 ;; Defined at:
  5317 ;;		line 129 in file "interface.c"
  5318 ;; Parameters:    Size  Location     Type
  5319 ;;		None
  5320 ;; Auto vars:     Size  Location     Type
  5321 ;;		None
  5322 ;; Return value:  Size  Location     Type
  5323 ;;                  1    wreg      void 
  5324 ;; Registers used:
  5325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5326 ;; Tracked objects:
  5327 ;;		On entry : 0/0
  5328 ;;		On exit  : 0/0
  5329 ;;		Unchanged: 0/0
  5330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5335 ;;Total ram usage:        0 bytes
  5336 ;; Hardware stack levels used:    1
  5337 ;; Hardware stack levels required when called:    8
  5338 ;; This function calls:
  5339 ;;		_lcdClear
  5340 ;;		_printf
  5341 ;;		_readKeypad
  5342 ;; This function is called by:
  5343 ;;		_showInterface
  5344 ;; This function uses a non-reentrant model
  5345 ;;
  5346                           
  5347                           	psect	text13
  5348  00401A                     __ptext13:
  5349                           	opt stack 0
  5350  00401A                     _showErrorMessage:
  5351                           	opt stack 21
  5352                           
  5353                           ;interface.c: 130: lcdClear();
  5354                           
  5355                           ; BSR set to: 0
  5356                           ;incstack = 0
  5357  00401A  EC04  F021         	call	_lcdClear	;wreg free
  5358                           
  5359                           ;interface.c: 132: printf(" run not \n");
  5360  00401E  0EB9               	movlw	low STR_22
  5361  004020  0100               	movlb	0	; () banked
  5362  004022  6FBD               	movwf	printf@f& (0+255),b
  5363  004024  0EFF               	movlw	high STR_22
  5364  004026  0100               	movlb	0	; () banked
  5365  004028  6FBE               	movwf	(printf@f+1)& (0+255),b
  5366  00402A  EC09  F000         	call	_printf	;wreg free
  5367                           
  5368                           ;interface.c: 133: printf("  available   *>");
  5369  00402E  0E98               	movlw	low STR_23
  5370  004030  0100               	movlb	0	; () banked
  5371  004032  6FBD               	movwf	printf@f& (0+255),b
  5372  004034  0EFF               	movlw	high STR_23
  5373  004036  0100               	movlb	0	; () banked
  5374  004038  6FBE               	movwf	(printf@f+1)& (0+255),b
  5375  00403A  EC09  F000         	call	_printf	;wreg free
  5376  00403E                     l7439:
  5377  00403E  EC38  F020         	call	_readKeypad	;wreg free
  5378  004042  0A2A               	xorlw	42
  5379  004044  B4D8               	btfsc	status,2,c
  5380  004046  0012               	return	
  5381  004048  D7FA               	goto	l7439
  5382  00404A                     __end_of_showErrorMessage:
  5383                           	opt stack 0
  5384                           tblptru	equ	0xFF8
  5385                           tblptrh	equ	0xFF7
  5386                           tblptrl	equ	0xFF6
  5387                           tablat	equ	0xFF5
  5388                           postinc0	equ	0xFEE
  5389                           wreg	equ	0xFE8
  5390                           postdec1	equ	0xFE5
  5391                           fsr1l	equ	0xFE1
  5392                           indf2	equ	0xFDF
  5393                           postinc2	equ	0xFDE
  5394                           postdec2	equ	0xFDD
  5395                           fsr2h	equ	0xFDA
  5396                           fsr2l	equ	0xFD9
  5397                           status	equ	0xFD8
  5398                           
  5399 ;; *************** function _readKeypad *****************
  5400 ;; Defined at:
  5401 ;;		line 36 in file "keypad.c"
  5402 ;; Parameters:    Size  Location     Type
  5403 ;;		None
  5404 ;; Auto vars:     Size  Location     Type
  5405 ;;  key             1   34[COMRAM] unsigned char 
  5406 ;; Return value:  Size  Location     Type
  5407 ;;                  1    wreg      unsigned char 
  5408 ;; Registers used:
  5409 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5410 ;; Tracked objects:
  5411 ;;		On entry : 0/0
  5412 ;;		On exit  : 0/0
  5413 ;;		Unchanged: 0/0
  5414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5416 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5418 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5419 ;;Total ram usage:        1 bytes
  5420 ;; Hardware stack levels used:    1
  5421 ;; Hardware stack levels required when called:    3
  5422 ;; This function calls:
  5423 ;;		Nothing
  5424 ;; This function is called by:
  5425 ;;		_sortBattery
  5426 ;;		_showMainMenu
  5427 ;;		_showRunSelect
  5428 ;;		_showRunMenu
  5429 ;;		_showRunTime
  5430 ;;		_showRunStats
  5431 ;;		_showErrorMessage
  5432 ;;		_debug
  5433 ;;		_pause
  5434 ;; This function uses a non-reentrant model
  5435 ;;
  5436                           
  5437                           	psect	text14
  5438  004070                     __ptext14:
  5439                           	opt stack 0
  5440  004070                     _readKeypad:
  5441                           	opt stack 26
  5442  004070                     l269:
  5443  004070  A281               	btfss	3969,1,c	;volatile
  5444  004072  D7FE               	goto	l269
  5445                           
  5446                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  5447  004074  3881               	swapf	3969,w,c	;volatile
  5448  004076  0B0F               	andlw	15
  5449  004078  0B0F               	andlw	15
  5450  00407A  6E23               	movwf	readKeypad@key,c
  5451  00407C                     l272:
  5452  00407C  B281               	btfsc	3969,1,c	;volatile
  5453  00407E  D7FE               	goto	l272
  5454                           
  5455                           ;keypad.c: 40: return keys[key];
  5456  004080  5023               	movf	readKeypad@key,w,c
  5457  004082  0D01               	mullw	1
  5458  004084  0E51               	movlw	low _keys
  5459  004086  24F3               	addwf	prodl,w,c
  5460  004088  6EF6               	movwf	tblptrl,c
  5461  00408A  0EFE               	movlw	high _keys
  5462  00408C  20F4               	addwfc	prodh,w,c
  5463  00408E  6EF7               	movwf	tblptrh,c
  5464  004090                     	if	0	;There are less than 3 active tblptr bytes
  5465  004090                     	endif
  5466  004090  0008               	tblrd		*
  5467  004092  50F5               	movf	tablat,w,c
  5468  004094  0012               	return	
  5469  004096                     __end_of_readKeypad:
  5470                           	opt stack 0
  5471                           tblptru	equ	0xFF8
  5472                           tblptrh	equ	0xFF7
  5473                           tblptrl	equ	0xFF6
  5474                           tablat	equ	0xFF5
  5475                           prodh	equ	0xFF4
  5476                           prodl	equ	0xFF3
  5477                           postinc0	equ	0xFEE
  5478                           wreg	equ	0xFE8
  5479                           postdec1	equ	0xFE5
  5480                           fsr1l	equ	0xFE1
  5481                           indf2	equ	0xFDF
  5482                           postinc2	equ	0xFDE
  5483                           postdec2	equ	0xFDD
  5484                           fsr2h	equ	0xFDA
  5485                           fsr2l	equ	0xFD9
  5486                           status	equ	0xFD8
  5487                           
  5488 ;; *************** function _showDateTime *****************
  5489 ;; Defined at:
  5490 ;;		line 59 in file "interface.c"
  5491 ;; Parameters:    Size  Location     Type
  5492 ;;		None
  5493 ;; Auto vars:     Size  Location     Type
  5494 ;;  t               2   12[BANK1 ] PTR int 
  5495 ;;		 -> getTime@time(14), 
  5496 ;;  year            2   10[BANK1 ] int 
  5497 ;;  mon             2    8[BANK1 ] int 
  5498 ;;  day             2    6[BANK1 ] int 
  5499 ;;  hour            2    4[BANK1 ] int 
  5500 ;;  min             2    2[BANK1 ] int 
  5501 ;;  sec             2    0[BANK1 ] int 
  5502 ;; Return value:  Size  Location     Type
  5503 ;;                  1    wreg      void 
  5504 ;; Registers used:
  5505 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5506 ;; Tracked objects:
  5507 ;;		On entry : 0/0
  5508 ;;		On exit  : 0/0
  5509 ;;		Unchanged: 0/0
  5510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5512 ;;      Locals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5513 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5514 ;;      Totals:         0       2      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5515 ;;Total ram usage:       16 bytes
  5516 ;; Hardware stack levels used:    1
  5517 ;; Hardware stack levels required when called:    8
  5518 ;; This function calls:
  5519 ;;		_getTime
  5520 ;;		_initRTC
  5521 ;;		_keyPressed
  5522 ;;		_lcdClear
  5523 ;;		_lcdHome
  5524 ;;		_printf
  5525 ;; This function is called by:
  5526 ;;		_showInterface
  5527 ;; This function uses a non-reentrant model
  5528 ;;
  5529                           
  5530                           	psect	text15
  5531  0029C4                     __ptext15:
  5532                           	opt stack 0
  5533  0029C4                     _showDateTime:
  5534                           	opt stack 21
  5535                           
  5536                           ;interface.c: 60: lcdClear();
  5537                           
  5538                           ;incstack = 0
  5539  0029C4  EC04  F021         	call	_lcdClear	;wreg free
  5540                           
  5541                           ;interface.c: 61: initRTC();
  5542  0029C8  ECDD  F020         	call	_initRTC	;wreg free
  5543                           
  5544                           ;interface.c: 63: while(keyPressed() != 'A'){
  5545  0029CC  D07D               	goto	l7391
  5546  0029CE                     l7369:
  5547                           
  5548                           ;interface.c: 64: int* t = getTime();
  5549  0029CE  EC9A  F01C         	call	_getTime	;wreg free
  5550  0029D2  C026  F10C         	movff	?_getTime,showDateTime@t
  5551  0029D6  C027  F10D         	movff	?_getTime+1,showDateTime@t+1
  5552                           
  5553                           ;interface.c: 65: int sec = t[0], min = t[1], hour = t[2];
  5554  0029DA  C10C  FFD9         	movff	showDateTime@t,fsr2l
  5555  0029DE  C10D  FFDA         	movff	showDateTime@t+1,fsr2h
  5556  0029E2  CFDE F100          	movff	postinc2,showDateTime@sec
  5557  0029E6  CFDD F101          	movff	postdec2,showDateTime@sec+1
  5558  0029EA  0101               	movlb	1	; () banked
  5559  0029EC  EE20 F002          	lfsr	2,2
  5560  0029F0  510C               	movf	showDateTime@t& (0+255),w,b
  5561  0029F2  26D9               	addwf	fsr2l,f,c
  5562  0029F4  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  5563  0029F6  22DA               	addwfc	fsr2h,f,c
  5564  0029F8  CFDE F102          	movff	postinc2,showDateTime@min
  5565  0029FC  CFDD F103          	movff	postdec2,showDateTime@min+1
  5566                           
  5567                           ; BSR set to: 1
  5568  002A00  0101               	movlb	1	; () banked
  5569  002A02  EE20 F004          	lfsr	2,4
  5570  002A06  510C               	movf	showDateTime@t& (0+255),w,b
  5571  002A08  26D9               	addwf	fsr2l,f,c
  5572  002A0A  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  5573  002A0C  22DA               	addwfc	fsr2h,f,c
  5574  002A0E  CFDE F104          	movff	postinc2,showDateTime@hour
  5575  002A12  CFDD F105          	movff	postdec2,showDateTime@hour+1
  5576                           
  5577                           ; BSR set to: 1
  5578                           ;interface.c: 66: int day = t[4], mon = t[5], year = t[6];
  5579  002A16  0101               	movlb	1	; () banked
  5580  002A18  EE20 F008          	lfsr	2,8
  5581  002A1C  510C               	movf	showDateTime@t& (0+255),w,b
  5582  002A1E  26D9               	addwf	fsr2l,f,c
  5583  002A20  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  5584  002A22  22DA               	addwfc	fsr2h,f,c
  5585  002A24  CFDE F106          	movff	postinc2,showDateTime@day
  5586  002A28  CFDD F107          	movff	postdec2,showDateTime@day+1
  5587                           
  5588                           ; BSR set to: 1
  5589  002A2C  0101               	movlb	1	; () banked
  5590  002A2E  EE20 F00A          	lfsr	2,10
  5591  002A32  510C               	movf	showDateTime@t& (0+255),w,b
  5592  002A34  26D9               	addwf	fsr2l,f,c
  5593  002A36  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  5594  002A38  22DA               	addwfc	fsr2h,f,c
  5595  002A3A  CFDE F108          	movff	postinc2,showDateTime@mon
  5596  002A3E  CFDD F109          	movff	postdec2,showDateTime@mon+1
  5597                           
  5598                           ; BSR set to: 1
  5599  002A42  0101               	movlb	1	; () banked
  5600  002A44  EE20 F00C          	lfsr	2,12
  5601  002A48  510C               	movf	showDateTime@t& (0+255),w,b
  5602  002A4A  26D9               	addwf	fsr2l,f,c
  5603  002A4C  510D               	movf	(showDateTime@t+1)& (0+255),w,b
  5604  002A4E  22DA               	addwfc	fsr2h,f,c
  5605  002A50  CFDE F10A          	movff	postinc2,showDateTime@year
  5606  002A54  CFDD F10B          	movff	postdec2,showDateTime@year+1
  5607                           
  5608                           ; BSR set to: 1
  5609                           ;interface.c: 68: lcdHome();
  5610  002A58  EC00  F021         	call	_lcdHome	;wreg free
  5611                           
  5612                           ;interface.c: 69: printf("  20%02x/%02x/%02x\n",year,mon,day);
  5613  002A5C  0ED3               	movlw	low STR_10
  5614  002A5E  0100               	movlb	0	; () banked
  5615  002A60  6FBD               	movwf	printf@f& (0+255),b
  5616  002A62  0EFE               	movlw	high STR_10
  5617  002A64  0100               	movlb	0	; () banked
  5618  002A66  6FBE               	movwf	(printf@f+1)& (0+255),b
  5619  002A68  C10A  F0BF         	movff	showDateTime@year,?_printf+2
  5620  002A6C  C10B  F0C0         	movff	showDateTime@year+1,?_printf+3
  5621  002A70  C108  F0C1         	movff	showDateTime@mon,?_printf+4
  5622  002A74  C109  F0C2         	movff	showDateTime@mon+1,?_printf+5
  5623  002A78  C106  F0C3         	movff	showDateTime@day,?_printf+6
  5624  002A7C  C107  F0C4         	movff	showDateTime@day+1,?_printf+7
  5625  002A80  EC09  F000         	call	_printf	;wreg free
  5626                           
  5627                           ;interface.c: 70: printf("   %02x:%02x:%02x   A>",hour,min,sec);
  5628  002A84  0EBC               	movlw	low STR_11
  5629  002A86  0100               	movlb	0	; () banked
  5630  002A88  6FBD               	movwf	printf@f& (0+255),b
  5631  002A8A  0EFE               	movlw	high STR_11
  5632  002A8C  0100               	movlb	0	; () banked
  5633  002A8E  6FBE               	movwf	(printf@f+1)& (0+255),b
  5634  002A90  C104  F0BF         	movff	showDateTime@hour,?_printf+2
  5635  002A94  C105  F0C0         	movff	showDateTime@hour+1,?_printf+3
  5636  002A98  C102  F0C1         	movff	showDateTime@min,?_printf+4
  5637  002A9C  C103  F0C2         	movff	showDateTime@min+1,?_printf+5
  5638  002AA0  C100  F0C3         	movff	showDateTime@sec,?_printf+6
  5639  002AA4  C101  F0C4         	movff	showDateTime@sec+1,?_printf+7
  5640  002AA8  EC09  F000         	call	_printf	;wreg free
  5641                           
  5642                           ;interface.c: 71: _delay((unsigned long)((100)*(10000000/4000.0)));
  5643  002AAC  0E02               	movlw	2
  5644  002AAE  0100               	movlb	0	; () banked
  5645  002AB0  6FF0               	movwf	(??_showDateTime+1)& (0+255),b
  5646  002AB2  0E45               	movlw	69
  5647  002AB4  0100               	movlb	0	; () banked
  5648  002AB6  6FEF               	movwf	??_showDateTime& (0+255),b
  5649  002AB8  0EA9               	movlw	169
  5650  002ABA                     u8207:
  5651  002ABA  2EE8               	decfsz	wreg,f,c
  5652  002ABC  D7FE               	bra	u8207
  5653  002ABE  2FEF               	decfsz	??_showDateTime& (0+255),f,b
  5654  002AC0  D7FC               	bra	u8207
  5655  002AC2  2FF0               	decfsz	(??_showDateTime+1)& (0+255),f,b
  5656  002AC4  D7FA               	bra	u8207
  5657  002AC6  D000               	nop2	
  5658  002AC8                     l7391:
  5659  002AC8  ECF1  F020         	call	_keyPressed	;wreg free
  5660  002ACC  0A41               	xorlw	65
  5661  002ACE  B4D8               	btfsc	status,2,c
  5662  002AD0  0012               	return	
  5663  002AD2  D77D               	goto	l7369
  5664  002AD4                     __end_of_showDateTime:
  5665                           	opt stack 0
  5666                           tblptru	equ	0xFF8
  5667                           tblptrh	equ	0xFF7
  5668                           tblptrl	equ	0xFF6
  5669                           tablat	equ	0xFF5
  5670                           prodh	equ	0xFF4
  5671                           prodl	equ	0xFF3
  5672                           postinc0	equ	0xFEE
  5673                           wreg	equ	0xFE8
  5674                           postdec1	equ	0xFE5
  5675                           fsr1l	equ	0xFE1
  5676                           indf2	equ	0xFDF
  5677                           postinc2	equ	0xFDE
  5678                           postdec2	equ	0xFDD
  5679                           fsr2h	equ	0xFDA
  5680                           fsr2l	equ	0xFD9
  5681                           status	equ	0xFD8
  5682                           
  5683 ;; *************** function _printf *****************
  5684 ;; Defined at:
  5685 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5686 ;; Parameters:    Size  Location     Type
  5687 ;;  f               2   61[BANK0 ] PTR const unsigned char 
  5688 ;;		 -> STR_23(17), STR_22(11), STR_21(19), STR_20(18), 
  5689 ;;		 -> STR_19(17), STR_18(24), STR_17(17), STR_16(19), 
  5690 ;;		 -> STR_15(17), STR_14(18), STR_13(17), STR_12(18), 
  5691 ;;		 -> STR_11(23), STR_10(20), STR_9(8), STR_8(11), 
  5692 ;;		 -> STR_7(11), STR_6(11), STR_5(16), STR_4(30), 
  5693 ;;		 -> STR_3(29), STR_2(8), STR_1(9), 
  5694 ;; Auto vars:     Size  Location     Type
  5695 ;;  idx             1   84[BANK0 ] unsigned char 
  5696 ;;  val             4  100[BANK0 ] unsigned long 
  5697 ;;  tmpval          4   91[BANK0 ] struct .
  5698 ;;  fval            3   97[BANK0 ] struct .
  5699 ;;  prec            2  108[BANK0 ] int 
  5700 ;;  flag            2  106[BANK0 ] unsigned short 
  5701 ;;  width           2  104[BANK0 ] int 
  5702 ;;  exp             2   95[BANK0 ] int 
  5703 ;;  ap              2   89[BANK0 ] PTR void [1]
  5704 ;;		 -> ?_printf(2), 
  5705 ;;  len             2   87[BANK0 ] unsigned int 
  5706 ;;  cp              2   85[BANK0 ] PTR const unsigned char 
  5707 ;;		 -> printf@c(1), 
  5708 ;;  c               1  110[BANK0 ] char 
  5709 ;;  d               1    0        unsigned char 
  5710 ;; Return value:  Size  Location     Type
  5711 ;;                  2   61[BANK0 ] int 
  5712 ;; Registers used:
  5713 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5714 ;; Tracked objects:
  5715 ;;		On entry : 0/0
  5716 ;;		On exit  : 0/0
  5717 ;;		Unchanged: 0/0
  5718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5719 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5720 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5721 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5722 ;;      Totals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5723 ;;Total ram usage:       50 bytes
  5724 ;; Hardware stack levels used:    1
  5725 ;; Hardware stack levels required when called:    7
  5726 ;; This function calls:
  5727 ;;		___awdiv
  5728 ;;		___ftadd
  5729 ;;		___ftge
  5730 ;;		___ftmul
  5731 ;;		___ftneg
  5732 ;;		___ftsub
  5733 ;;		___fttol
  5734 ;;		___lldiv
  5735 ;;		___llmod
  5736 ;;		___lltoft
  5737 ;;		___wmul
  5738 ;;		__div_to_l_
  5739 ;;		__tdiv_to_l_
  5740 ;;		_fround
  5741 ;;		_isdigit
  5742 ;;		_putch
  5743 ;;		_scale
  5744 ;; This function is called by:
  5745 ;;		_main
  5746 ;;		_sortBattery
  5747 ;;		_showDateTime
  5748 ;;		_showMainMenu
  5749 ;;		_showRunSelect
  5750 ;;		_showRunMenu
  5751 ;;		_showRunTime
  5752 ;;		_showRunStats
  5753 ;;		_showErrorMessage
  5754 ;;		_debug
  5755 ;;		_pause
  5756 ;;		_testFrequency
  5757 ;; This function uses a non-reentrant model
  5758 ;;
  5759                           
  5760                           	psect	text16
  5761  000012                     __ptext16:
  5762                           	opt stack 0
  5763  000012                     _printf:
  5764                           	opt stack 22
  5765                           
  5766                           ;doprnt.c: 466: va_list ap;
  5767                           ;doprnt.c: 499: signed char c;
  5768                           ;doprnt.c: 501: int width;
  5769                           ;doprnt.c: 504: int prec;
  5770                           ;doprnt.c: 508: unsigned short flag;
  5771                           ;doprnt.c: 515: char d;
  5772                           ;doprnt.c: 516: double fval;
  5773                           ;doprnt.c: 517: int exp;
  5774                           ;doprnt.c: 523: union {
  5775                           ;doprnt.c: 524: unsigned long vd;
  5776                           ;doprnt.c: 525: double integ;
  5777                           ;doprnt.c: 526: } tmpval;
  5778                           ;doprnt.c: 528: unsigned long val;
  5779                           ;doprnt.c: 529: unsigned len;
  5780                           ;doprnt.c: 530: const char * cp;
  5781                           ;doprnt.c: 533: *ap = __va_start();
  5782                           
  5783                           ;incstack = 0
  5784  000012  0EBF               	movlw	low (?_printf+2)
  5785  000014  0100               	movlb	0	; () banked
  5786  000016  6FD9               	movwf	printf@ap& (0+255),b
  5787  000018  0E00               	movlw	high (?_printf+2)
  5788  00001A  0100               	movlb	0	; () banked
  5789  00001C  6FDA               	movwf	(printf@ap+1)& (0+255),b
  5790                           
  5791                           ;doprnt.c: 536: while(c = *f++) {
  5792  00001E  EFF5  F006         	goto	l7083
  5793  000022                     l6717:
  5794                           
  5795                           ; BSR set to: 0
  5796                           ;doprnt.c: 538: if(c != '%')
  5797  000022  0E25               	movlw	37
  5798  000024  0100               	movlb	0	; () banked
  5799  000026  19EE               	xorwf	printf@c& (0+255),w,b
  5800  000028  B4D8               	btfsc	status,2,c
  5801  00002A  D006               	goto	l6721
  5802                           
  5803                           ; BSR set to: 0
  5804                           ;doprnt.c: 540: {
  5805                           ;doprnt.c: 541: (putch(c) );
  5806  00002C  0100               	movlb	0	; () banked
  5807  00002E  51EE               	movf	printf@c& (0+255),w,b
  5808  000030  EC83  F020         	call	_putch
  5809                           
  5810                           ;doprnt.c: 542: continue;
  5811  000034  EFF5  F006         	goto	l7083
  5812  000038                     l6721:
  5813                           
  5814                           ;doprnt.c: 543: }
  5815                           ;doprnt.c: 546: width = 0;
  5816  000038  0E00               	movlw	0
  5817  00003A  0100               	movlb	0	; () banked
  5818  00003C  6FE9               	movwf	(printf@width+1)& (0+255),b
  5819  00003E  0E00               	movlw	0
  5820  000040  6FE8               	movwf	printf@width& (0+255),b
  5821                           
  5822                           ;doprnt.c: 548: flag = 0;
  5823  000042  0E00               	movlw	0
  5824  000044  0100               	movlb	0	; () banked
  5825  000046  6FEB               	movwf	(printf@flag+1)& (0+255),b
  5826  000048  0E00               	movlw	0
  5827  00004A  6FEA               	movwf	printf@flag& (0+255),b
  5828                           
  5829                           ; BSR set to: 0
  5830                           ;doprnt.c: 551: switch(*f) {
  5831                           
  5832                           ;doprnt.c: 550: for(;;) {
  5833  00004C  D005               	goto	l6727
  5834  00004E                     l6723:
  5835                           
  5836                           ;doprnt.c: 580: flag |= 0x04;
  5837  00004E  0100               	movlb	0	; () banked
  5838  000050  85EA               	bsf	printf@flag& (0+255),2,b
  5839                           
  5840                           ;doprnt.c: 581: f++;
  5841  000052  0100               	movlb	0	; () banked
  5842  000054  4BBD               	infsnz	printf@f& (0+255),f,b
  5843  000056  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5844  000058                     l6727:
  5845  000058  C0BD  FFF6         	movff	printf@f,tblptrl
  5846  00005C  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5847  000060                     	if	0	;tblptru may be non-zero
  5848  000060                     	endif
  5849  000060                     	if	0	;tblptru may be non-zero
  5850  000060                     	endif
  5851  000060  0008               	tblrd		*
  5852  000062  50F5               	movf	tablat,w,c
  5853                           
  5854                           ; Switch size 1, requested type "space"
  5855                           ; Number of cases is 1, Range of values is 48 to 48
  5856                           ; switch strategies available:
  5857                           ; Name         Instructions Cycles
  5858                           ; simple_byte            4     3 (average)
  5859                           ;	Chosen strategy is simple_byte
  5860  000064  0A30               	xorlw	48	; case 48
  5861  000066  B4D8               	btfsc	status,2,c
  5862  000068  D7F2               	goto	l6723
  5863                           
  5864                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5865                           
  5866                           ;doprnt.c: 586: }
  5867                           
  5868                           ;doprnt.c: 585: break;
  5869  00006A  C0BD  FFF6         	movff	printf@f,tblptrl
  5870  00006E  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5871  000072                     	if	0	;tblptru may be non-zero
  5872  000072                     	endif
  5873  000072                     	if	0	;tblptru may be non-zero
  5874  000072                     	endif
  5875  000072  0008               	tblrd		*
  5876  000074  50F5               	movf	tablat,w,c
  5877  000076  ECB5  F020         	call	_isdigit
  5878  00007A  A0D8               	btfss	status,0,c
  5879  00007C  D03F               	goto	l6741
  5880                           
  5881                           ;doprnt.c: 598: width = 0;
  5882  00007E  0E00               	movlw	0
  5883  000080  0100               	movlb	0	; () banked
  5884  000082  6FE9               	movwf	(printf@width+1)& (0+255),b
  5885  000084  0E00               	movlw	0
  5886  000086  6FE8               	movwf	printf@width& (0+255),b
  5887  000088                     l6733:
  5888                           
  5889                           ;doprnt.c: 600: width *= 10;
  5890  000088  C0E8  F031         	movff	printf@width,___wmul@multiplier
  5891  00008C  C0E9  F032         	movff	printf@width+1,___wmul@multiplier+1
  5892  000090  0E00               	movlw	0
  5893  000092  6E34               	movwf	___wmul@multiplicand+1,c
  5894  000094  0E0A               	movlw	10
  5895  000096  6E33               	movwf	___wmul@multiplicand,c
  5896  000098  EC5E  F020         	call	___wmul	;wreg free
  5897  00009C  C031  F0E8         	movff	?___wmul,printf@width
  5898  0000A0  C032  F0E9         	movff	?___wmul+1,printf@width+1
  5899                           
  5900                           ;doprnt.c: 601: width += *f++ - '0';
  5901  0000A4  0ED0               	movlw	208
  5902  0000A6  0100               	movlb	0	; () banked
  5903  0000A8  6FCB               	movwf	??_printf& (0+255),b
  5904  0000AA  0EFF               	movlw	255
  5905  0000AC  0100               	movlb	0	; () banked
  5906  0000AE  6FCC               	movwf	(??_printf+1)& (0+255),b
  5907  0000B0  C0BD  FFF6         	movff	printf@f,tblptrl
  5908  0000B4  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5909  0000B8                     	if	0	;tblptru may be non-zero
  5910  0000B8                     	endif
  5911  0000B8                     	if	0	;tblptru may be non-zero
  5912  0000B8                     	endif
  5913  0000B8  0008               	tblrd		*
  5914  0000BA  50F5               	movf	tablat,w,c
  5915  0000BC  0100               	movlb	0	; () banked
  5916  0000BE  6FCD               	movwf	(??_printf+2)& (0+255),b
  5917  0000C0  6BCE               	clrf	(??_printf+3)& (0+255),b
  5918  0000C2  0100               	movlb	0	; () banked
  5919  0000C4  51CB               	movf	??_printf& (0+255),w,b
  5920  0000C6  0100               	movlb	0	; () banked
  5921  0000C8  27CD               	addwf	(??_printf+2)& (0+255),f,b
  5922  0000CA  0100               	movlb	0	; () banked
  5923  0000CC  51CC               	movf	(??_printf+1)& (0+255),w,b
  5924  0000CE  0100               	movlb	0	; () banked
  5925  0000D0  23CE               	addwfc	(??_printf+3)& (0+255),f,b
  5926  0000D2  0100               	movlb	0	; () banked
  5927  0000D4  51CD               	movf	(??_printf+2)& (0+255),w,b
  5928  0000D6  0100               	movlb	0	; () banked
  5929  0000D8  27E8               	addwf	printf@width& (0+255),f,b
  5930  0000DA  0100               	movlb	0	; () banked
  5931  0000DC  51CE               	movf	(??_printf+3)& (0+255),w,b
  5932  0000DE  0100               	movlb	0	; () banked
  5933  0000E0  23E9               	addwfc	(printf@width+1)& (0+255),f,b
  5934                           
  5935                           ; BSR set to: 0
  5936  0000E2  0100               	movlb	0	; () banked
  5937  0000E4  4BBD               	infsnz	printf@f& (0+255),f,b
  5938  0000E6  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5939                           
  5940                           ; BSR set to: 0
  5941                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5942  0000E8  C0BD  FFF6         	movff	printf@f,tblptrl
  5943  0000EC  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5944  0000F0                     	if	0	;tblptru may be non-zero
  5945  0000F0                     	endif
  5946  0000F0                     	if	0	;tblptru may be non-zero
  5947  0000F0                     	endif
  5948  0000F0  0008               	tblrd		*
  5949  0000F2  50F5               	movf	tablat,w,c
  5950  0000F4  ECB5  F020         	call	_isdigit
  5951  0000F8  B0D8               	btfsc	status,0,c
  5952  0000FA  D7C6               	goto	l6733
  5953  0000FC                     l6741:
  5954                           
  5955                           ;doprnt.c: 608: }
  5956                           ;doprnt.c: 611: if(*f == '.') {
  5957  0000FC  C0BD  FFF6         	movff	printf@f,tblptrl
  5958  000100  C0BE  FFF7         	movff	printf@f+1,tblptrh
  5959  000104                     	if	0	;tblptru may be non-zero
  5960  000104                     	endif
  5961  000104                     	if	0	;tblptru may be non-zero
  5962  000104                     	endif
  5963  000104  0008               	tblrd		*
  5964  000106  50F5               	movf	tablat,w,c
  5965  000108  0A2E               	xorlw	46
  5966  00010A  A4D8               	btfss	status,2,c
  5967  00010C  D034               	goto	l6753
  5968                           
  5969                           ;doprnt.c: 612: flag |= 0x4000;
  5970  00010E  0100               	movlb	0	; () banked
  5971  000110  8DEB               	bsf	(printf@flag+1)& (0+255),6,b
  5972                           
  5973                           ;doprnt.c: 613: f++;
  5974  000112  0100               	movlb	0	; () banked
  5975  000114  4BBD               	infsnz	printf@f& (0+255),f,b
  5976  000116  2BBE               	incf	(printf@f+1)& (0+255),f,b
  5977                           
  5978                           ; BSR set to: 0
  5979                           ;doprnt.c: 620: {
  5980                           ;doprnt.c: 621: prec = 0;
  5981  000118  0E00               	movlw	0
  5982  00011A  0100               	movlb	0	; () banked
  5983  00011C  6FED               	movwf	(printf@prec+1)& (0+255),b
  5984  00011E  0E00               	movlw	0
  5985  000120  6FEC               	movwf	printf@prec& (0+255),b
  5986                           
  5987                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  5988  000122  D01E               	goto	l6751
  5989  000124                     l6747:
  5990                           
  5991                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  5992  000124  C0EC  F031         	movff	printf@prec,___wmul@multiplier
  5993  000128  C0ED  F032         	movff	printf@prec+1,___wmul@multiplier+1
  5994  00012C  0E00               	movlw	0
  5995  00012E  6E34               	movwf	___wmul@multiplicand+1,c
  5996  000130  0E0A               	movlw	10
  5997  000132  6E33               	movwf	___wmul@multiplicand,c
  5998  000134  EC5E  F020         	call	___wmul	;wreg free
  5999  000138  C0BD  FFF6         	movff	printf@f,tblptrl
  6000  00013C  C0BE  FFF7         	movff	printf@f+1,tblptrh
  6001  000140                     	if	0	;tblptru may be non-zero
  6002  000140                     	endif
  6003  000140                     	if	0	;tblptru may be non-zero
  6004  000140                     	endif
  6005  000140  0008               	tblrd		*
  6006  000142  50F5               	movf	tablat,w,c
  6007  000144  2631               	addwf	?___wmul,f,c
  6008  000146  0E00               	movlw	0
  6009  000148  2232               	addwfc	?___wmul+1,f,c
  6010  00014A  0ED0               	movlw	208
  6011  00014C  2431               	addwf	?___wmul,w,c
  6012  00014E  0100               	movlb	0	; () banked
  6013  000150  6FEC               	movwf	printf@prec& (0+255),b
  6014  000152  0EFF               	movlw	255
  6015  000154  2032               	addwfc	?___wmul+1,w,c
  6016  000156  0100               	movlb	0	; () banked
  6017  000158  6FED               	movwf	(printf@prec+1)& (0+255),b
  6018                           
  6019                           ; BSR set to: 0
  6020  00015A  0100               	movlb	0	; () banked
  6021  00015C  4BBD               	infsnz	printf@f& (0+255),f,b
  6022  00015E  2BBE               	incf	(printf@f+1)& (0+255),f,b
  6023  000160                     l6751:
  6024                           
  6025                           ; BSR set to: 0
  6026  000160  C0BD  FFF6         	movff	printf@f,tblptrl
  6027  000164  C0BE  FFF7         	movff	printf@f+1,tblptrh
  6028  000168                     	if	0	;tblptru may be non-zero
  6029  000168                     	endif
  6030  000168                     	if	0	;tblptru may be non-zero
  6031  000168                     	endif
  6032  000168  0008               	tblrd		*
  6033  00016A  50F5               	movf	tablat,w,c
  6034  00016C  ECB5  F020         	call	_isdigit
  6035  000170  A0D8               	btfss	status,0,c
  6036  000172  D07D               	goto	l6795
  6037  000174  D7D7               	goto	l6747
  6038  000176                     l6753:
  6039                           
  6040                           ;doprnt.c: 626: prec = 0;
  6041  000176  0E00               	movlw	0
  6042  000178  0100               	movlb	0	; () banked
  6043  00017A  6FED               	movwf	(printf@prec+1)& (0+255),b
  6044  00017C  0E00               	movlw	0
  6045  00017E  6FEC               	movwf	printf@prec& (0+255),b
  6046                           
  6047                           ; BSR set to: 0
  6048                           ;doprnt.c: 628: flag |= 0x1000;
  6049  000180  0100               	movlb	0	; () banked
  6050  000182  89EB               	bsf	(printf@flag+1)& (0+255),4,b
  6051                           
  6052                           ; BSR set to: 0
  6053                           ;doprnt.c: 635: switch(c = *f++) {
  6054                           
  6055                           ;doprnt.c: 630: }
  6056                           ;doprnt.c: 633: loop:
  6057                           
  6058                           ; BSR set to: 0
  6059  000184  D074               	goto	l6795
  6060  000186                     l6757:
  6061                           
  6062                           ; BSR set to: 0
  6063                           ;doprnt.c: 643: flag |= 0x10;
  6064  000186  0100               	movlb	0	; () banked
  6065  000188  89EA               	bsf	printf@flag& (0+255),4,b
  6066                           
  6067                           ;doprnt.c: 644: goto loop;
  6068  00018A  D071               	goto	l6795
  6069  00018C                     l6759:
  6070                           
  6071                           ; BSR set to: 0
  6072                           ;doprnt.c: 663: flag |= 0x400;
  6073  00018C  0100               	movlb	0	; () banked
  6074  00018E  85EB               	bsf	(printf@flag+1)& (0+255),2,b
  6075                           
  6076                           ; BSR set to: 0
  6077                           ;doprnt.c: 698: case 'i':
  6078                           ;doprnt.c: 699: break;
  6079                           
  6080                           ; BSR set to: 0
  6081                           
  6082                           ;doprnt.c: 697: case 'd':
  6083                           
  6084                           ;doprnt.c: 664: break;
  6085  000190  D090               	goto	l6797
  6086  000192                     l6761:
  6087                           
  6088                           ; BSR set to: 0
  6089                           ;doprnt.c: 721: flag |= 0x80;
  6090  000192  0100               	movlb	0	; () banked
  6091  000194  8FEA               	bsf	printf@flag& (0+255),7,b
  6092                           
  6093                           ;doprnt.c: 723: break;
  6094  000196  D08D               	goto	l6797
  6095  000198                     l6763:
  6096                           
  6097                           ; BSR set to: 0
  6098                           ;doprnt.c: 753: if(prec && prec < len)
  6099  000198  0100               	movlb	0	; () banked
  6100  00019A  51EC               	movf	printf@prec& (0+255),w,b
  6101  00019C  0100               	movlb	0	; () banked
  6102  00019E  11ED               	iorwf	(printf@prec+1)& (0+255),w,b
  6103  0001A0  B4D8               	btfsc	status,2,c
  6104  0001A2  D00E               	goto	l6769
  6105                           
  6106                           ; BSR set to: 0
  6107  0001A4  0100               	movlb	0	; () banked
  6108  0001A6  51D7               	movf	printf@len& (0+255),w,b
  6109  0001A8  0100               	movlb	0	; () banked
  6110  0001AA  5DEC               	subwf	printf@prec& (0+255),w,b
  6111  0001AC  0100               	movlb	0	; () banked
  6112  0001AE  51D8               	movf	(printf@len+1)& (0+255),w,b
  6113  0001B0  0100               	movlb	0	; () banked
  6114  0001B2  59ED               	subwfb	(printf@prec+1)& (0+255),w,b
  6115  0001B4  B0D8               	btfsc	status,0,c
  6116  0001B6  D004               	goto	l6769
  6117                           
  6118                           ; BSR set to: 0
  6119                           ;doprnt.c: 754: len = prec;
  6120  0001B8  C0EC  F0D7         	movff	printf@prec,printf@len
  6121  0001BC  C0ED  F0D8         	movff	printf@prec+1,printf@len+1
  6122  0001C0                     l6769:
  6123                           
  6124                           ; BSR set to: 0
  6125                           ;doprnt.c: 757: if(width > len)
  6126  0001C0  0100               	movlb	0	; () banked
  6127  0001C2  51E8               	movf	printf@width& (0+255),w,b
  6128  0001C4  0100               	movlb	0	; () banked
  6129  0001C6  5DD7               	subwf	printf@len& (0+255),w,b
  6130  0001C8  0100               	movlb	0	; () banked
  6131  0001CA  51E9               	movf	(printf@width+1)& (0+255),w,b
  6132  0001CC  0100               	movlb	0	; () banked
  6133  0001CE  59D8               	subwfb	(printf@len+1)& (0+255),w,b
  6134  0001D0  B0D8               	btfsc	status,0,c
  6135  0001D2  D009               	goto	l6773
  6136                           
  6137                           ; BSR set to: 0
  6138                           ;doprnt.c: 758: width -= len;
  6139  0001D4  0100               	movlb	0	; () banked
  6140  0001D6  51D7               	movf	printf@len& (0+255),w,b
  6141  0001D8  0100               	movlb	0	; () banked
  6142  0001DA  5FE8               	subwf	printf@width& (0+255),f,b
  6143  0001DC  0100               	movlb	0	; () banked
  6144  0001DE  51D8               	movf	(printf@len+1)& (0+255),w,b
  6145  0001E0  0100               	movlb	0	; () banked
  6146  0001E2  5BE9               	subwfb	(printf@width+1)& (0+255),f,b
  6147  0001E4  D009               	goto	l6777
  6148  0001E6                     l6773:
  6149                           
  6150                           ; BSR set to: 0
  6151                           ;doprnt.c: 759: else
  6152                           ;doprnt.c: 760: width = 0;
  6153  0001E6  0E00               	movlw	0
  6154  0001E8  0100               	movlb	0	; () banked
  6155  0001EA  6FE9               	movwf	(printf@width+1)& (0+255),b
  6156  0001EC  0E00               	movlw	0
  6157  0001EE  6FE8               	movwf	printf@width& (0+255),b
  6158                           
  6159                           ; BSR set to: 0
  6160                           ;doprnt.c: 764: while(width--)
  6161  0001F0  D003               	goto	l6777
  6162  0001F2                     l6775:
  6163                           
  6164                           ; BSR set to: 0
  6165                           ;doprnt.c: 765: (putch(' ') );
  6166  0001F2  0E20               	movlw	32
  6167  0001F4  EC83  F020         	call	_putch
  6168  0001F8                     l6777:
  6169  0001F8  0100               	movlb	0	; () banked
  6170  0001FA  07E8               	decf	printf@width& (0+255),f,b
  6171  0001FC  A0D8               	btfss	status,0,c
  6172  0001FE  07E9               	decf	(printf@width+1)& (0+255),f,b
  6173  000200  0100               	movlb	0	; () banked
  6174  000202  29E8               	incf	printf@width& (0+255),w,b
  6175  000204  E1F6               	bnz	l6775
  6176  000206  0100               	movlb	0	; () banked
  6177  000208  29E9               	incf	(printf@width+1)& (0+255),w,b
  6178  00020A  B4D8               	btfsc	status,2,c
  6179  00020C  D00B               	goto	l6783
  6180  00020E  D7F1               	goto	l6775
  6181  000210                     l6779:
  6182                           
  6183                           ; BSR set to: 0
  6184                           ;doprnt.c: 768: (putch(*cp++) );
  6185  000210  C0D5  FFD9         	movff	printf@cp,fsr2l
  6186  000214  C0D6  FFDA         	movff	printf@cp+1,fsr2h
  6187  000218  50DF               	movf	indf2,w,c
  6188  00021A  EC83  F020         	call	_putch
  6189  00021E  0100               	movlb	0	; () banked
  6190  000220  4BD5               	infsnz	printf@cp& (0+255),f,b
  6191  000222  2BD6               	incf	(printf@cp+1)& (0+255),f,b
  6192  000224                     l6783:
  6193                           
  6194                           ; BSR set to: 0
  6195  000224  0100               	movlb	0	; () banked
  6196  000226  07D7               	decf	printf@len& (0+255),f,b
  6197  000228  A0D8               	btfss	status,0,c
  6198  00022A  07D8               	decf	(printf@len+1)& (0+255),f,b
  6199  00022C  0100               	movlb	0	; () banked
  6200  00022E  29D7               	incf	printf@len& (0+255),w,b
  6201  000230  E1EF               	bnz	l6779
  6202  000232  0100               	movlb	0	; () banked
  6203  000234  29D8               	incf	(printf@len+1)& (0+255),w,b
  6204  000236  B4D8               	btfsc	status,2,c
  6205  000238  EFF5  F006         	goto	l7083
  6206  00023C  D7E9               	goto	l6779
  6207  00023E                     l6785:
  6208                           
  6209                           ; BSR set to: 0
  6210                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6211  00023E  C0D9  FFD9         	movff	printf@ap,fsr2l
  6212  000242  C0DA  FFDA         	movff	printf@ap+1,fsr2h
  6213  000246  50DF               	movf	indf2,w,c
  6214  000248  0100               	movlb	0	; () banked
  6215  00024A  6FEE               	movwf	printf@c& (0+255),b
  6216                           
  6217                           ; BSR set to: 0
  6218  00024C  0E02               	movlw	2
  6219  00024E  0100               	movlb	0	; () banked
  6220  000250  27D9               	addwf	printf@ap& (0+255),f,b
  6221  000252  0E00               	movlw	0
  6222  000254  23DA               	addwfc	(printf@ap+1)& (0+255),f,b
  6223  000256                     l6789:
  6224                           
  6225                           ; BSR set to: 0
  6226                           ;doprnt.c: 805: cp = (char *)&c;
  6227  000256  0EEE               	movlw	low printf@c
  6228  000258  0100               	movlb	0	; () banked
  6229  00025A  6FD5               	movwf	printf@cp& (0+255),b
  6230  00025C  0E00               	movlw	high printf@c
  6231  00025E  0100               	movlb	0	; () banked
  6232  000260  6FD6               	movwf	(printf@cp+1)& (0+255),b
  6233                           
  6234                           ; BSR set to: 0
  6235                           ;doprnt.c: 806: len = 1;
  6236  000262  0E00               	movlw	0
  6237  000264  0100               	movlb	0	; () banked
  6238  000266  6FD8               	movwf	(printf@len+1)& (0+255),b
  6239  000268  0E01               	movlw	1
  6240  00026A  6FD7               	movwf	printf@len& (0+255),b
  6241                           
  6242                           ;doprnt.c: 807: goto dostring;
  6243  00026C  D795               	goto	l6763
  6244  00026E                     l6795:
  6245  00026E  C0BD  FFF6         	movff	printf@f,tblptrl
  6246  000272  C0BE  FFF7         	movff	printf@f+1,tblptrh
  6247  000276  0100               	movlb	0	; () banked
  6248  000278  4BBD               	infsnz	printf@f& (0+255),f,b
  6249  00027A  2BBE               	incf	(printf@f+1)& (0+255),f,b
  6250  00027C                     	if	0	;tblptru may be non-zero
  6251  00027C                     	endif
  6252  00027C                     	if	0	;tblptru may be non-zero
  6253  00027C                     	endif
  6254  00027C  0008               	tblrd		*
  6255  00027E  CFF5 F0EE          	movff	tablat,printf@c
  6256  000282  0100               	movlb	0	; () banked
  6257  000284  51EE               	movf	printf@c& (0+255),w,b
  6258                           
  6259                           ; Switch size 1, requested type "space"
  6260                           ; Number of cases is 7, Range of values is 0 to 120
  6261                           ; switch strategies available:
  6262                           ; Name         Instructions Cycles
  6263                           ; simple_byte           22    12 (average)
  6264                           ;	Chosen strategy is simple_byte
  6265  000286  0A00               	xorlw	0	; case 0
  6266  000288  B4D8               	btfsc	status,2,c
  6267  00028A  0012               	return	
  6268  00028C  0A63               	xorlw	99	; case 99
  6269  00028E  B4D8               	btfsc	status,2,c
  6270  000290  D7D6               	goto	l6785
  6271  000292  0A07               	xorlw	7	; case 100
  6272  000294  B4D8               	btfsc	status,2,c
  6273  000296  D00D               	goto	l6797
  6274  000298  0A02               	xorlw	2	; case 102
  6275  00029A  B4D8               	btfsc	status,2,c
  6276  00029C  D777               	goto	l6759
  6277  00029E  0A0F               	xorlw	15	; case 105
  6278  0002A0  B4D8               	btfsc	status,2,c
  6279  0002A2  D007               	goto	l6797
  6280  0002A4  0A05               	xorlw	5	; case 108
  6281  0002A6  B4D8               	btfsc	status,2,c
  6282  0002A8  D76E               	goto	l6757
  6283  0002AA  0A14               	xorlw	20	; case 120
  6284  0002AC  B4D8               	btfsc	status,2,c
  6285  0002AE  D771               	goto	l6761
  6286  0002B0  D7D2               	goto	l6789
  6287  0002B2                     l6797:
  6288                           
  6289                           ; BSR set to: 0
  6290                           ;doprnt.c: 825: if(flag & (0x700)) {
  6291  0002B2  0E07               	movlw	7
  6292  0002B4  0100               	movlb	0	; () banked
  6293  0002B6  15EB               	andwf	(printf@flag+1)& (0+255),w,b
  6294  0002B8  B4D8               	btfsc	status,2,c
  6295  0002BA  D36D               	goto	l790
  6296                           
  6297                           ; BSR set to: 0
  6298                           ;doprnt.c: 827: if(flag & 0x1000)
  6299  0002BC  0100               	movlb	0	; () banked
  6300  0002BE  A9EB               	btfss	(printf@flag+1)& (0+255),4,b
  6301  0002C0  D005               	goto	l6803
  6302                           
  6303                           ; BSR set to: 0
  6304                           ;doprnt.c: 829: prec = 6;
  6305  0002C2  0E00               	movlw	0
  6306  0002C4  0100               	movlb	0	; () banked
  6307  0002C6  6FED               	movwf	(printf@prec+1)& (0+255),b
  6308  0002C8  0E06               	movlw	6
  6309  0002CA  6FEC               	movwf	printf@prec& (0+255),b
  6310  0002CC                     l6803:
  6311                           
  6312                           ; BSR set to: 0
  6313                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  6314  0002CC  C0D9  FFD9         	movff	printf@ap,fsr2l
  6315  0002D0  C0DA  FFDA         	movff	printf@ap+1,fsr2h
  6316  0002D4  CFDE F0E1          	movff	postinc2,printf@fval
  6317  0002D8  CFDE F0E2          	movff	postinc2,printf@fval+1
  6318  0002DC  CFDD F0E3          	movff	postdec2,printf@fval+2
  6319                           
  6320                           ; BSR set to: 0
  6321  0002E0  0E03               	movlw	3
  6322  0002E2  0100               	movlb	0	; () banked
  6323  0002E4  27D9               	addwf	printf@ap& (0+255),f,b
  6324  0002E6  0E00               	movlw	0
  6325  0002E8  23DA               	addwfc	(printf@ap+1)& (0+255),f,b
  6326                           
  6327                           ; BSR set to: 0
  6328                           ;doprnt.c: 831: if(fval < 0.0) {
  6329  0002EA  0100               	movlb	0	; () banked
  6330  0002EC  AFE3               	btfss	(printf@fval+2)& (0+255),7,b
  6331  0002EE  D011               	goto	l6813
  6332                           
  6333                           ; BSR set to: 0
  6334                           ;doprnt.c: 832: fval = -fval;
  6335  0002F0  C0E1  F023         	movff	printf@fval,___ftneg@f1
  6336  0002F4  C0E2  F024         	movff	printf@fval+1,___ftneg@f1+1
  6337  0002F8  C0E3  F025         	movff	printf@fval+2,___ftneg@f1+2
  6338  0002FC  EC71  F020         	call	___ftneg	;wreg free
  6339  000300  C023  F0E1         	movff	?___ftneg,printf@fval
  6340  000304  C024  F0E2         	movff	?___ftneg+1,printf@fval+1
  6341  000308  C025  F0E3         	movff	?___ftneg+2,printf@fval+2
  6342                           
  6343                           ;doprnt.c: 833: flag |= 0x03;
  6344  00030C  0E03               	movlw	3
  6345  00030E  0100               	movlb	0	; () banked
  6346  000310  13EA               	iorwf	printf@flag& (0+255),f,b
  6347  000312                     l6813:
  6348                           
  6349                           ; BSR set to: 0
  6350                           ;doprnt.c: 834: }
  6351                           ;doprnt.c: 835: exp = 0;
  6352  000312  0E00               	movlw	0
  6353  000314  0100               	movlb	0	; () banked
  6354  000316  6FE0               	movwf	(printf@exp+1)& (0+255),b
  6355  000318  0E00               	movlw	0
  6356  00031A  6FDF               	movwf	printf@exp& (0+255),b
  6357                           
  6358                           ; BSR set to: 0
  6359                           ;doprnt.c: 836: if( fval!=0) {
  6360  00031C  0100               	movlb	0	; () banked
  6361  00031E  51E1               	movf	printf@fval& (0+255),w,b
  6362  000320  0100               	movlb	0	; () banked
  6363  000322  11E2               	iorwf	(printf@fval+1)& (0+255),w,b
  6364  000324  0100               	movlb	0	; () banked
  6365  000326  11E3               	iorwf	(printf@fval+2)& (0+255),w,b
  6366  000328  B4D8               	btfsc	status,2,c
  6367  00032A  D091               	goto	l6841
  6368                           
  6369                           ; BSR set to: 0
  6370                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6371  00032C  0E82               	movlw	130
  6372  00032E  0100               	movlb	0	; () banked
  6373  000330  6FCB               	movwf	??_printf& (0+255),b
  6374  000332  0EFF               	movlw	255
  6375  000334  0100               	movlb	0	; () banked
  6376  000336  6FCC               	movwf	(??_printf+1)& (0+255),b
  6377  000338  C0E1  F0CD         	movff	printf@fval,??_printf+2
  6378  00033C  C0E2  F0CE         	movff	printf@fval+1,??_printf+3
  6379  000340  C0E3  F0CF         	movff	printf@fval+2,??_printf+4
  6380  000344  C0E4  F0D0         	movff	printf@fval+3,??_printf+5
  6381  000348  0E10               	movlw	16
  6382  00034A  D006               	goto	u6780
  6383  00034C                     u6785:
  6384  00034C  0100               	movlb	0	; () banked
  6385  00034E  90D8               	bcf	status,0,c
  6386  000350  33D0               	rrcf	(??_printf+5)& (0+255),f,b
  6387  000352  33CF               	rrcf	(??_printf+4)& (0+255),f,b
  6388  000354  33CE               	rrcf	(??_printf+3)& (0+255),f,b
  6389  000356  33CD               	rrcf	(??_printf+2)& (0+255),f,b
  6390  000358                     u6780:
  6391  000358  2EE8               	decfsz	wreg,f,c
  6392  00035A  D7F8               	goto	u6785
  6393  00035C  0100               	movlb	0	; () banked
  6394  00035E  51CD               	movf	(??_printf+2)& (0+255),w,b
  6395  000360  0100               	movlb	0	; () banked
  6396  000362  25CB               	addwf	??_printf& (0+255),w,b
  6397  000364  0100               	movlb	0	; () banked
  6398  000366  6FDF               	movwf	printf@exp& (0+255),b
  6399  000368  0E00               	movlw	0
  6400  00036A  0100               	movlb	0	; () banked
  6401  00036C  21CC               	addwfc	(??_printf+1)& (0+255),w,b
  6402  00036E  0100               	movlb	0	; () banked
  6403  000370  6FE0               	movwf	(printf@exp+1)& (0+255),b
  6404                           
  6405                           ; BSR set to: 0
  6406                           ;doprnt.c: 838: exp--;
  6407  000372  0100               	movlb	0	; () banked
  6408  000374  07DF               	decf	printf@exp& (0+255),f,b
  6409  000376  A0D8               	btfss	status,0,c
  6410  000378  07E0               	decf	(printf@exp+1)& (0+255),f,b
  6411                           
  6412                           ; BSR set to: 0
  6413                           ;doprnt.c: 839: exp *= 3;
  6414  00037A  C0DF  F031         	movff	printf@exp,___wmul@multiplier
  6415  00037E  C0E0  F032         	movff	printf@exp+1,___wmul@multiplier+1
  6416  000382  0E00               	movlw	0
  6417  000384  6E34               	movwf	___wmul@multiplicand+1,c
  6418  000386  0E03               	movlw	3
  6419  000388  6E33               	movwf	___wmul@multiplicand,c
  6420  00038A  EC5E  F020         	call	___wmul	;wreg free
  6421  00038E  C031  F0DF         	movff	?___wmul,printf@exp
  6422  000392  C032  F0E0         	movff	?___wmul+1,printf@exp+1
  6423                           
  6424                           ;doprnt.c: 840: exp /= 10;
  6425  000396  C0DF  F029         	movff	printf@exp,___awdiv@dividend
  6426  00039A  C0E0  F02A         	movff	printf@exp+1,___awdiv@dividend+1
  6427  00039E  0E00               	movlw	0
  6428  0003A0  6E2C               	movwf	___awdiv@divisor+1,c
  6429  0003A2  0E0A               	movlw	10
  6430  0003A4  6E2B               	movwf	___awdiv@divisor,c
  6431  0003A6  EC17  F01C         	call	___awdiv	;wreg free
  6432  0003AA  C029  F0DF         	movff	?___awdiv,printf@exp
  6433  0003AE  C02A  F0E0         	movff	?___awdiv+1,printf@exp+1
  6434                           
  6435                           ;doprnt.c: 841: if(exp < 0)
  6436  0003B2  0100               	movlb	0	; () banked
  6437  0003B4  AFE0               	btfss	(printf@exp+1)& (0+255),7,b
  6438  0003B6  D004               	goto	l6829
  6439                           
  6440                           ; BSR set to: 0
  6441                           ;doprnt.c: 842: exp--;
  6442  0003B8  0100               	movlb	0	; () banked
  6443  0003BA  07DF               	decf	printf@exp& (0+255),f,b
  6444  0003BC  A0D8               	btfss	status,0,c
  6445  0003BE  07E0               	decf	(printf@exp+1)& (0+255),f,b
  6446  0003C0                     l6829:
  6447                           
  6448                           ; BSR set to: 0
  6449                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  6450  0003C0  0100               	movlb	0	; () banked
  6451  0003C2  51DF               	movf	printf@exp& (0+255),w,b
  6452  0003C4  0800               	sublw	0
  6453  0003C6  EC8D  F00C         	call	_scale
  6454  0003CA  C098  F0DB         	movff	?_scale,printf@tmpval
  6455  0003CE  C099  F0DC         	movff	?_scale+1,printf@tmpval+1
  6456  0003D2  C09A  F0DD         	movff	?_scale+2,printf@tmpval+2
  6457                           
  6458                           ;doprnt.c: 847: tmpval.integ *= fval;
  6459  0003D6  C0DB  F089         	movff	printf@tmpval,___ftmul@f1
  6460  0003DA  C0DC  F08A         	movff	printf@tmpval+1,___ftmul@f1+1
  6461  0003DE  C0DD  F08B         	movff	printf@tmpval+2,___ftmul@f1+2
  6462  0003E2  C0E1  F08C         	movff	printf@fval,___ftmul@f2
  6463  0003E6  C0E2  F08D         	movff	printf@fval+1,___ftmul@f2+1
  6464  0003EA  C0E3  F08E         	movff	printf@fval+2,___ftmul@f2+2
  6465  0003EE  ECB8  F011         	call	___ftmul	;wreg free
  6466  0003F2  C089  F0DB         	movff	?___ftmul,printf@tmpval
  6467  0003F6  C08A  F0DC         	movff	?___ftmul+1,printf@tmpval+1
  6468  0003FA  C08B  F0DD         	movff	?___ftmul+2,printf@tmpval+2
  6469                           
  6470                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  6471  0003FE  C0DB  F02F         	movff	printf@tmpval,___ftge@ff1
  6472  000402  C0DC  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  6473  000406  C0DD  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  6474  00040A  0E00               	movlw	0
  6475  00040C  6E32               	movwf	___ftge@ff2,c
  6476  00040E  0E80               	movlw	128
  6477  000410  6E33               	movwf	___ftge@ff2+1,c
  6478  000412  0E3F               	movlw	63
  6479  000414  6E34               	movwf	___ftge@ff2+2,c
  6480  000416  EC8D  F01B         	call	___ftge	;wreg free
  6481  00041A  B0D8               	btfsc	status,0,c
  6482  00041C  D005               	goto	l6837
  6483                           
  6484                           ;doprnt.c: 849: exp--;
  6485  00041E  0100               	movlb	0	; () banked
  6486  000420  07DF               	decf	printf@exp& (0+255),f,b
  6487  000422  A0D8               	btfss	status,0,c
  6488  000424  07E0               	decf	(printf@exp+1)& (0+255),f,b
  6489  000426  D013               	goto	l6841
  6490  000428                     l6837:
  6491                           
  6492                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  6493  000428  C0DB  F02F         	movff	printf@tmpval,___ftge@ff1
  6494  00042C  C0DC  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  6495  000430  C0DD  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  6496  000434  0E00               	movlw	0
  6497  000436  6E32               	movwf	___ftge@ff2,c
  6498  000438  0E20               	movlw	32
  6499  00043A  6E33               	movwf	___ftge@ff2+1,c
  6500  00043C  0E41               	movlw	65
  6501  00043E  6E34               	movwf	___ftge@ff2+2,c
  6502  000440  EC8D  F01B         	call	___ftge	;wreg free
  6503  000444  A0D8               	btfss	status,0,c
  6504  000446  D003               	goto	l6841
  6505                           
  6506                           ;doprnt.c: 851: exp++;
  6507  000448  0100               	movlb	0	; () banked
  6508  00044A  4BDF               	infsnz	printf@exp& (0+255),f,b
  6509  00044C  2BE0               	incf	(printf@exp+1)& (0+255),f,b
  6510  00044E                     l6841:
  6511                           
  6512                           ;doprnt.c: 852: }
  6513                           ;doprnt.c: 1112: if(prec <= 12)
  6514  00044E  0100               	movlb	0	; () banked
  6515  000450  BFED               	btfsc	(printf@prec+1)& (0+255),7,b
  6516  000452  D008               	goto	l6843
  6517  000454  0100               	movlb	0	; () banked
  6518  000456  51ED               	movf	(printf@prec+1)& (0+255),w,b
  6519  000458  E11D               	bnz	l6845
  6520  00045A  0E0D               	movlw	13
  6521  00045C  0100               	movlb	0	; () banked
  6522  00045E  5DEC               	subwf	printf@prec& (0+255),w,b
  6523  000460  B0D8               	btfsc	status,0,c
  6524  000462  D018               	goto	l6845
  6525  000464                     l6843:
  6526                           
  6527                           ; BSR set to: 0
  6528                           ;doprnt.c: 1113: fval += fround(prec);
  6529  000464  C0E1  F0A2         	movff	printf@fval,___ftadd@f1
  6530  000468  C0E2  F0A3         	movff	printf@fval+1,___ftadd@f1+1
  6531  00046C  C0E3  F0A4         	movff	printf@fval+2,___ftadd@f1+2
  6532  000470  0100               	movlb	0	; () banked
  6533  000472  51EC               	movf	printf@prec& (0+255),w,b
  6534  000474  ECCC  F00F         	call	_fround
  6535  000478  C098  F0A5         	movff	?_fround,___ftadd@f2
  6536  00047C  C099  F0A6         	movff	?_fround+1,___ftadd@f2+1
  6537  000480  C09A  F0A7         	movff	?_fround+2,___ftadd@f2+2
  6538  000484  EC98  F00E         	call	___ftadd	;wreg free
  6539  000488  C0A2  F0E1         	movff	?___ftadd,printf@fval
  6540  00048C  C0A3  F0E2         	movff	?___ftadd+1,printf@fval+1
  6541  000490  C0A4  F0E3         	movff	?___ftadd+2,printf@fval+2
  6542  000494                     l6845:
  6543                           
  6544                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  6545  000494  0100               	movlb	0	; () banked
  6546  000496  BFE0               	btfsc	(printf@exp+1)& (0+255),7,b
  6547  000498  D008               	goto	l6847
  6548  00049A  0100               	movlb	0	; () banked
  6549  00049C  51E0               	movf	(printf@exp+1)& (0+255),w,b
  6550  00049E  E12A               	bnz	l6853
  6551  0004A0  0E0A               	movlw	10
  6552  0004A2  0100               	movlb	0	; () banked
  6553  0004A4  5DDF               	subwf	printf@exp& (0+255),w,b
  6554  0004A6  B0D8               	btfsc	status,0,c
  6555  0004A8  D025               	goto	l6853
  6556  0004AA                     l6847:
  6557                           
  6558                           ; BSR set to: 0
  6559  0004AA  0100               	movlb	0	; () banked
  6560  0004AC  51E1               	movf	printf@fval& (0+255),w,b
  6561  0004AE  0100               	movlb	0	; () banked
  6562  0004B0  11E2               	iorwf	(printf@fval+1)& (0+255),w,b
  6563  0004B2  0100               	movlb	0	; () banked
  6564  0004B4  11E3               	iorwf	(printf@fval+2)& (0+255),w,b
  6565  0004B6  B4D8               	btfsc	status,2,c
  6566  0004B8  D05F               	goto	l6867
  6567                           
  6568                           ; BSR set to: 0
  6569  0004BA  C0E1  F0AE         	movff	printf@fval,___fttol@f1
  6570  0004BE  C0E2  F0AF         	movff	printf@fval+1,___fttol@f1+1
  6571  0004C2  C0E3  F0B0         	movff	printf@fval+2,___fttol@f1+2
  6572  0004C6  EC13  F013         	call	___fttol	;wreg free
  6573  0004CA  0100               	movlb	0	; () banked
  6574  0004CC  51AE               	movf	?___fttol& (0+255),w,b
  6575  0004CE  0100               	movlb	0	; () banked
  6576  0004D0  11AF               	iorwf	(?___fttol+1)& (0+255),w,b
  6577  0004D2  0100               	movlb	0	; () banked
  6578  0004D4  11B0               	iorwf	(?___fttol+2)& (0+255),w,b
  6579  0004D6  0100               	movlb	0	; () banked
  6580  0004D8  11B1               	iorwf	(?___fttol+3)& (0+255),w,b
  6581  0004DA  A4D8               	btfss	status,2,c
  6582  0004DC  D04D               	goto	l6867
  6583                           
  6584                           ; BSR set to: 0
  6585  0004DE  0100               	movlb	0	; () banked
  6586  0004E0  BFE0               	btfsc	(printf@exp+1)& (0+255),7,b
  6587  0004E2  D04A               	goto	l6867
  6588  0004E4  0100               	movlb	0	; () banked
  6589  0004E6  51E0               	movf	(printf@exp+1)& (0+255),w,b
  6590  0004E8  E105               	bnz	l6853
  6591  0004EA  0E02               	movlw	2
  6592  0004EC  0100               	movlb	0	; () banked
  6593  0004EE  5DDF               	subwf	printf@exp& (0+255),w,b
  6594  0004F0  A0D8               	btfss	status,0,c
  6595  0004F2  D042               	goto	l6867
  6596  0004F4                     l6853:
  6597                           
  6598                           ; BSR set to: 0
  6599                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  6600  0004F4  C0DB  F02F         	movff	printf@tmpval,___ftge@ff1
  6601  0004F8  C0DC  F030         	movff	printf@tmpval+1,___ftge@ff1+1
  6602  0004FC  C0DD  F031         	movff	printf@tmpval+2,___ftge@ff1+2
  6603  000500  0E70               	movlw	112
  6604  000502  6E32               	movwf	___ftge@ff2,c
  6605  000504  0E89               	movlw	137
  6606  000506  6E33               	movwf	___ftge@ff2+1,c
  6607  000508  0E40               	movlw	64
  6608  00050A  6E34               	movwf	___ftge@ff2+2,c
  6609  00050C  EC8D  F01B         	call	___ftge	;wreg free
  6610  000510  B0D8               	btfsc	status,0,c
  6611  000512  D003               	goto	l6857
  6612                           
  6613                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  6614  000514  0100               	movlb	0	; () banked
  6615  000516  0EF7               	movlw	247
  6616  000518  D002               	goto	L1
  6617  00051A                     l6857:
  6618                           
  6619                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  6620  00051A  0100               	movlb	0	; () banked
  6621  00051C  0EF8               	movlw	248
  6622  00051E                     L1:
  6623  00051E  27DF               	addwf	printf@exp& (0+255),f,b
  6624  000520  0EFF               	movlw	255
  6625  000522  23E0               	addwfc	(printf@exp+1)& (0+255),f,b
  6626                           
  6627                           ; BSR set to: 0
  6628                           ;doprnt.c: 1124: }
  6629                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  6630                           
  6631                           ; BSR set to: 0
  6632  000524  0100               	movlb	0	; () banked
  6633  000526  51DF               	movf	printf@exp& (0+255),w,b
  6634  000528  EC8D  F00C         	call	_scale
  6635  00052C  C098  F0DB         	movff	?_scale,printf@tmpval
  6636  000530  C099  F0DC         	movff	?_scale+1,printf@tmpval+1
  6637  000534  C09A  F0DD         	movff	?_scale+2,printf@tmpval+2
  6638                           
  6639                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  6640  000538  C0E1  F023         	movff	printf@fval,__tdiv_to_l_@f1
  6641  00053C  C0E2  F024         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  6642  000540  C0E3  F025         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  6643  000544  C0DB  F026         	movff	printf@tmpval,__tdiv_to_l_@f2
  6644  000548  C0DC  F027         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  6645  00054C  C0DD  F028         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  6646  000550  ECB5  F013         	call	__tdiv_to_l_	;wreg free
  6647  000554  C023  F0E4         	movff	?__tdiv_to_l_,printf@val
  6648  000558  C024  F0E5         	movff	?__tdiv_to_l_+1,printf@val+1
  6649  00055C  C025  F0E6         	movff	?__tdiv_to_l_+2,printf@val+2
  6650  000560  C026  F0E7         	movff	?__tdiv_to_l_+3,printf@val+3
  6651                           
  6652                           ;doprnt.c: 1129: fval = 0.0;
  6653  000564  0E00               	movlw	0
  6654  000566  0100               	movlb	0	; () banked
  6655  000568  6FE1               	movwf	printf@fval& (0+255),b
  6656  00056A  0E00               	movlw	0
  6657  00056C  0100               	movlb	0	; () banked
  6658  00056E  6FE2               	movwf	(printf@fval+1)& (0+255),b
  6659  000570  0E00               	movlw	0
  6660  000572  0100               	movlb	0	; () banked
  6661  000574  6FE3               	movwf	(printf@fval+2)& (0+255),b
  6662                           
  6663                           ;doprnt.c: 1130: } else {
  6664  000576  D033               	goto	l6871
  6665  000578                     l6867:
  6666                           
  6667                           ; BSR set to: 0
  6668                           ;doprnt.c: 1131: val = (unsigned long)fval;
  6669  000578  C0E1  F0AE         	movff	printf@fval,___fttol@f1
  6670  00057C  C0E2  F0AF         	movff	printf@fval+1,___fttol@f1+1
  6671  000580  C0E3  F0B0         	movff	printf@fval+2,___fttol@f1+2
  6672  000584  EC13  F013         	call	___fttol	;wreg free
  6673  000588  C0AE  F0E4         	movff	?___fttol,printf@val
  6674  00058C  C0AF  F0E5         	movff	?___fttol+1,printf@val+1
  6675  000590  C0B0  F0E6         	movff	?___fttol+2,printf@val+2
  6676  000594  C0B1  F0E7         	movff	?___fttol+3,printf@val+3
  6677                           
  6678                           ;doprnt.c: 1132: fval -= (double)val;
  6679  000598  C0E1  F0AE         	movff	printf@fval,___ftsub@f1
  6680  00059C  C0E2  F0AF         	movff	printf@fval+1,___ftsub@f1+1
  6681  0005A0  C0E3  F0B0         	movff	printf@fval+2,___ftsub@f1+2
  6682  0005A4  C0E4  F02B         	movff	printf@val,___lltoft@c
  6683  0005A8  C0E5  F02C         	movff	printf@val+1,___lltoft@c+1
  6684  0005AC  C0E6  F02D         	movff	printf@val+2,___lltoft@c+2
  6685  0005B0  C0E7  F02E         	movff	printf@val+3,___lltoft@c+3
  6686  0005B4  EC4D  F01E         	call	___lltoft	;wreg free
  6687  0005B8  C02B  F0B1         	movff	?___lltoft,___ftsub@f2
  6688  0005BC  C02C  F0B2         	movff	?___lltoft+1,___ftsub@f2+1
  6689  0005C0  C02D  F0B3         	movff	?___lltoft+2,___ftsub@f2+2
  6690  0005C4  ECFB  F01E         	call	___ftsub	;wreg free
  6691  0005C8  C0AE  F0E1         	movff	?___ftsub,printf@fval
  6692  0005CC  C0AF  F0E2         	movff	?___ftsub+1,printf@fval+1
  6693  0005D0  C0B0  F0E3         	movff	?___ftsub+2,printf@fval+2
  6694                           
  6695                           ;doprnt.c: 1133: exp = 0;
  6696  0005D4  0E00               	movlw	0
  6697  0005D6  0100               	movlb	0	; () banked
  6698  0005D8  6FE0               	movwf	(printf@exp+1)& (0+255),b
  6699  0005DA  0E00               	movlw	0
  6700  0005DC  6FDF               	movwf	printf@exp& (0+255),b
  6701  0005DE                     l6871:
  6702                           
  6703                           ; BSR set to: 0
  6704                           ;doprnt.c: 1134: }
  6705                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6706  0005DE  0E01               	movlw	1
  6707  0005E0  0100               	movlb	0	; () banked
  6708  0005E2  6FEE               	movwf	printf@c& (0+255),b
  6709  0005E4                     l6873:
  6710                           
  6711                           ; BSR set to: 0
  6712  0005E4  0E0A               	movlw	10
  6713  0005E6  0100               	movlb	0	; () banked
  6714  0005E8  19EE               	xorwf	printf@c& (0+255),w,b
  6715  0005EA  B4D8               	btfsc	status,2,c
  6716  0005EC  D01E               	goto	l6885
  6717                           
  6718                           ; BSR set to: 0
  6719                           ;doprnt.c: 1137: if(val < dpowers[c])
  6720                           
  6721                           ; BSR set to: 0
  6722                           
  6723                           ; BSR set to: 0
  6724  0005EE  0100               	movlb	0	; () banked
  6725  0005F0  51EE               	movf	printf@c& (0+255),w,b
  6726  0005F2  0D04               	mullw	4
  6727  0005F4  0EBB               	movlw	low _dpowers
  6728  0005F6  24F3               	addwf	prodl,w,c
  6729  0005F8  6EF6               	movwf	tblptrl,c
  6730  0005FA  0EFD               	movlw	high _dpowers
  6731  0005FC  20F4               	addwfc	prodh,w,c
  6732  0005FE  6EF7               	movwf	tblptrh,c
  6733  000600                     	if	0	;There are less than 3 active tblptr bytes
  6734  000600                     	endif
  6735  000600  0009               	tblrd		*+
  6736  000602  50F5               	movf	tablat,w,c
  6737  000604  0100               	movlb	0	; () banked
  6738  000606  5DE4               	subwf	printf@val& (0+255),w,b
  6739  000608  0009               	tblrd		*+
  6740  00060A  50F5               	movf	tablat,w,c
  6741  00060C  0100               	movlb	0	; () banked
  6742  00060E  59E5               	subwfb	(printf@val+1)& (0+255),w,b
  6743  000610  0009               	tblrd		*+
  6744  000612  50F5               	movf	tablat,w,c
  6745  000614  0100               	movlb	0	; () banked
  6746  000616  59E6               	subwfb	(printf@val+2)& (0+255),w,b
  6747  000618  0009               	tblrd		*+
  6748  00061A  50F5               	movf	tablat,w,c
  6749  00061C  0100               	movlb	0	; () banked
  6750  00061E  59E7               	subwfb	(printf@val+3)& (0+255),w,b
  6751  000620  A0D8               	btfss	status,0,c
  6752  000622  D003               	goto	l6885
  6753                           
  6754                           ; BSR set to: 0
  6755                           
  6756                           ; BSR set to: 0
  6757                           
  6758                           ; BSR set to: 0
  6759                           ;doprnt.c: 1138: break;
  6760  000624  0100               	movlb	0	; () banked
  6761  000626  2BEE               	incf	printf@c& (0+255),f,b
  6762  000628  D7DD               	goto	l6873
  6763  00062A                     l6885:
  6764                           
  6765                           ; BSR set to: 0
  6766                           ;doprnt.c: 1142: width -= prec + c + exp;
  6767  00062A  C0EE  F0CB         	movff	printf@c,??_printf
  6768  00062E  0100               	movlb	0	; () banked
  6769  000630  6BCC               	clrf	(??_printf+1)& (0+255),b
  6770  000632  BFCB               	btfsc	??_printf& (0+255),7,b
  6771  000634  07CC               	decf	(??_printf+1)& (0+255),f,b
  6772  000636  0100               	movlb	0	; () banked
  6773  000638  51EC               	movf	printf@prec& (0+255),w,b
  6774  00063A  0100               	movlb	0	; () banked
  6775  00063C  27CB               	addwf	??_printf& (0+255),f,b
  6776  00063E  0100               	movlb	0	; () banked
  6777  000640  51ED               	movf	(printf@prec+1)& (0+255),w,b
  6778  000642  0100               	movlb	0	; () banked
  6779  000644  23CC               	addwfc	(??_printf+1)& (0+255),f,b
  6780  000646  0100               	movlb	0	; () banked
  6781  000648  51DF               	movf	printf@exp& (0+255),w,b
  6782  00064A  0100               	movlb	0	; () banked
  6783  00064C  27CB               	addwf	??_printf& (0+255),f,b
  6784  00064E  0100               	movlb	0	; () banked
  6785  000650  51E0               	movf	(printf@exp+1)& (0+255),w,b
  6786  000652  0100               	movlb	0	; () banked
  6787  000654  23CC               	addwfc	(??_printf+1)& (0+255),f,b
  6788  000656  0100               	movlb	0	; () banked
  6789  000658  51CB               	movf	??_printf& (0+255),w,b
  6790  00065A  0100               	movlb	0	; () banked
  6791  00065C  5FE8               	subwf	printf@width& (0+255),f,b
  6792  00065E  0100               	movlb	0	; () banked
  6793  000660  51CC               	movf	(??_printf+1)& (0+255),w,b
  6794  000662  0100               	movlb	0	; () banked
  6795  000664  5BE9               	subwfb	(printf@width+1)& (0+255),f,b
  6796                           
  6797                           ;doprnt.c: 1143: if(
  6798                           ;doprnt.c: 1147: prec)
  6799  000666  0100               	movlb	0	; () banked
  6800  000668  51EC               	movf	printf@prec& (0+255),w,b
  6801  00066A  0100               	movlb	0	; () banked
  6802  00066C  11ED               	iorwf	(printf@prec+1)& (0+255),w,b
  6803  00066E  B4D8               	btfsc	status,2,c
  6804  000670  D004               	goto	l6889
  6805                           
  6806                           ; BSR set to: 0
  6807                           ;doprnt.c: 1148: width--;
  6808  000672  0100               	movlb	0	; () banked
  6809  000674  07E8               	decf	printf@width& (0+255),f,b
  6810  000676  A0D8               	btfss	status,0,c
  6811  000678  07E9               	decf	(printf@width+1)& (0+255),f,b
  6812  00067A                     l6889:
  6813                           
  6814                           ; BSR set to: 0
  6815                           ;doprnt.c: 1149: if(flag & 0x03)
  6816  00067A  0E03               	movlw	3
  6817  00067C  0100               	movlb	0	; () banked
  6818  00067E  15EA               	andwf	printf@flag& (0+255),w,b
  6819  000680  0100               	movlb	0	; () banked
  6820  000682  6FCB               	movwf	??_printf& (0+255),b
  6821  000684  0E00               	movlw	0
  6822  000686  0100               	movlb	0	; () banked
  6823  000688  15EB               	andwf	(printf@flag+1)& (0+255),w,b
  6824  00068A  0100               	movlb	0	; () banked
  6825  00068C  6FCC               	movwf	(??_printf+1)& (0+255),b
  6826  00068E  0100               	movlb	0	; () banked
  6827  000690  51CB               	movf	??_printf& (0+255),w,b
  6828  000692  0100               	movlb	0	; () banked
  6829  000694  11CC               	iorwf	(??_printf+1)& (0+255),w,b
  6830  000696  B4D8               	btfsc	status,2,c
  6831  000698  D004               	goto	l6893
  6832                           
  6833                           ; BSR set to: 0
  6834                           ;doprnt.c: 1150: width--;
  6835  00069A  0100               	movlb	0	; () banked
  6836  00069C  07E8               	decf	printf@width& (0+255),f,b
  6837  00069E  A0D8               	btfss	status,0,c
  6838  0006A0  07E9               	decf	(printf@width+1)& (0+255),f,b
  6839  0006A2                     l6893:
  6840                           
  6841                           ; BSR set to: 0
  6842                           ;doprnt.c: 1153: if(flag & 0x04) {
  6843  0006A2  0100               	movlb	0	; () banked
  6844  0006A4  A5EA               	btfss	printf@flag& (0+255),2,b
  6845  0006A6  D02D               	goto	l6909
  6846                           
  6847                           ; BSR set to: 0
  6848                           ;doprnt.c: 1157: if(flag & 0x03)
  6849  0006A8  0E03               	movlw	3
  6850  0006AA  0100               	movlb	0	; () banked
  6851  0006AC  15EA               	andwf	printf@flag& (0+255),w,b
  6852  0006AE  0100               	movlb	0	; () banked
  6853  0006B0  6FCB               	movwf	??_printf& (0+255),b
  6854  0006B2  0E00               	movlw	0
  6855  0006B4  0100               	movlb	0	; () banked
  6856  0006B6  15EB               	andwf	(printf@flag+1)& (0+255),w,b
  6857  0006B8  0100               	movlb	0	; () banked
  6858  0006BA  6FCC               	movwf	(??_printf+1)& (0+255),b
  6859  0006BC  0100               	movlb	0	; () banked
  6860  0006BE  51CB               	movf	??_printf& (0+255),w,b
  6861  0006C0  0100               	movlb	0	; () banked
  6862  0006C2  11CC               	iorwf	(??_printf+1)& (0+255),w,b
  6863  0006C4  B4D8               	btfsc	status,2,c
  6864  0006C6  D00B               	goto	l6903
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;doprnt.c: 1159: (putch('-') );
  6868  0006C8  0E2D               	movlw	45
  6869  0006CA  EC83  F020         	call	_putch
  6870                           
  6871                           ;doprnt.c: 1168: while(width > 0) {
  6872  0006CE  D007               	goto	l6903
  6873  0006D0                     l6899:
  6874                           
  6875                           ;doprnt.c: 1169: (putch('0') );
  6876  0006D0  0E30               	movlw	48
  6877  0006D2  EC83  F020         	call	_putch
  6878                           
  6879                           ;doprnt.c: 1170: width--;
  6880  0006D6  0100               	movlb	0	; () banked
  6881  0006D8  07E8               	decf	printf@width& (0+255),f,b
  6882  0006DA  A0D8               	btfss	status,0,c
  6883  0006DC  07E9               	decf	(printf@width+1)& (0+255),f,b
  6884  0006DE                     l6903:
  6885  0006DE  0100               	movlb	0	; () banked
  6886  0006E0  BFE9               	btfsc	(printf@width+1)& (0+255),7,b
  6887  0006E2  D073               	goto	l6921
  6888  0006E4  0100               	movlb	0	; () banked
  6889  0006E6  51E9               	movf	(printf@width+1)& (0+255),w,b
  6890  0006E8  E1F3               	bnz	l6899
  6891  0006EA  0100               	movlb	0	; () banked
  6892  0006EC  05E8               	decf	printf@width& (0+255),w,b
  6893  0006EE  A0D8               	btfss	status,0,c
  6894  0006F0  D06C               	goto	l6921
  6895  0006F2  D7EE               	goto	l6899
  6896  0006F4                     l6905:
  6897                           
  6898                           ; BSR set to: 0
  6899                           ;doprnt.c: 1181: (putch(' ') );
  6900  0006F4  0E20               	movlw	32
  6901  0006F6  EC83  F020         	call	_putch
  6902                           
  6903                           ;doprnt.c: 1182: width--;
  6904  0006FA  0100               	movlb	0	; () banked
  6905  0006FC  07E8               	decf	printf@width& (0+255),f,b
  6906  0006FE  A0D8               	btfss	status,0,c
  6907  000700  07E9               	decf	(printf@width+1)& (0+255),f,b
  6908  000702                     l6909:
  6909                           
  6910                           ; BSR set to: 0
  6911  000702  0100               	movlb	0	; () banked
  6912  000704  BFE9               	btfsc	(printf@width+1)& (0+255),7,b
  6913  000706  D007               	goto	l6911
  6914  000708  0100               	movlb	0	; () banked
  6915  00070A  51E9               	movf	(printf@width+1)& (0+255),w,b
  6916  00070C  E1F3               	bnz	l6905
  6917  00070E  0100               	movlb	0	; () banked
  6918  000710  05E8               	decf	printf@width& (0+255),w,b
  6919  000712  B0D8               	btfsc	status,0,c
  6920  000714  D7EF               	goto	l6905
  6921  000716                     l6911:
  6922                           
  6923                           ; BSR set to: 0
  6924                           ;doprnt.c: 1183: }
  6925                           ;doprnt.c: 1188: if(flag & 0x03)
  6926  000716  0E03               	movlw	3
  6927  000718  0100               	movlb	0	; () banked
  6928  00071A  15EA               	andwf	printf@flag& (0+255),w,b
  6929  00071C  0100               	movlb	0	; () banked
  6930  00071E  6FCB               	movwf	??_printf& (0+255),b
  6931  000720  0E00               	movlw	0
  6932  000722  0100               	movlb	0	; () banked
  6933  000724  15EB               	andwf	(printf@flag+1)& (0+255),w,b
  6934  000726  0100               	movlb	0	; () banked
  6935  000728  6FCC               	movwf	(??_printf+1)& (0+255),b
  6936  00072A  0100               	movlb	0	; () banked
  6937  00072C  51CB               	movf	??_printf& (0+255),w,b
  6938  00072E  0100               	movlb	0	; () banked
  6939  000730  11CC               	iorwf	(??_printf+1)& (0+255),w,b
  6940  000732  B4D8               	btfsc	status,2,c
  6941  000734  D04A               	goto	l6921
  6942                           
  6943                           ; BSR set to: 0
  6944                           ;doprnt.c: 1190: (putch('-') );
  6945  000736  0E2D               	movlw	45
  6946  000738  EC83  F020         	call	_putch
  6947                           
  6948                           ;doprnt.c: 1195: }
  6949                           ;doprnt.c: 1196: while(c--) {
  6950  00073C  D046               	goto	l6921
  6951  00073E                     l6915:
  6952                           
  6953                           ;doprnt.c: 1200: {
  6954                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  6955  00073E  C0E4  F023         	movff	printf@val,___lldiv@dividend
  6956  000742  C0E5  F024         	movff	printf@val+1,___lldiv@dividend+1
  6957  000746  C0E6  F025         	movff	printf@val+2,___lldiv@dividend+2
  6958  00074A  C0E7  F026         	movff	printf@val+3,___lldiv@dividend+3
  6959  00074E  0100               	movlb	0	; () banked
  6960  000750  51EE               	movf	printf@c& (0+255),w,b
  6961  000752  0D04               	mullw	4
  6962  000754  0EBB               	movlw	low _dpowers
  6963  000756  24F3               	addwf	prodl,w,c
  6964  000758  6EF6               	movwf	tblptrl,c
  6965  00075A  0EFD               	movlw	high _dpowers
  6966  00075C  20F4               	addwfc	prodh,w,c
  6967  00075E  6EF7               	movwf	tblptrh,c
  6968  000760                     	if	0	;There are less than 3 active tblptr bytes
  6969  000760                     	endif
  6970  000760  0009               	tblrd		*+
  6971  000762  CFF5 F027          	movff	tablat,___lldiv@divisor
  6972  000766  0009               	tblrd		*+
  6973  000768  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  6974  00076C  0009               	tblrd		*+
  6975  00076E  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  6976  000772  000A               	tblrd		*-
  6977  000774  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  6978  000778  EC59  F01C         	call	___lldiv	;wreg free
  6979  00077C  C023  F0DB         	movff	?___lldiv,printf@tmpval
  6980  000780  C024  F0DC         	movff	?___lldiv+1,printf@tmpval+1
  6981  000784  C025  F0DD         	movff	?___lldiv+2,printf@tmpval+2
  6982  000788  C026  F0DE         	movff	?___lldiv+3,printf@tmpval+3
  6983                           
  6984                           ;doprnt.c: 1202: tmpval.vd %= 10;
  6985  00078C  C0DB  F030         	movff	printf@tmpval,___llmod@dividend
  6986  000790  C0DC  F031         	movff	printf@tmpval+1,___llmod@dividend+1
  6987  000794  C0DD  F032         	movff	printf@tmpval+2,___llmod@dividend+2
  6988  000798  C0DE  F033         	movff	printf@tmpval+3,___llmod@dividend+3
  6989  00079C  0E0A               	movlw	10
  6990  00079E  6E34               	movwf	___llmod@divisor,c
  6991  0007A0  0E00               	movlw	0
  6992  0007A2  6E35               	movwf	___llmod@divisor+1,c
  6993  0007A4  0E00               	movlw	0
  6994  0007A6  6E36               	movwf	___llmod@divisor+2,c
  6995  0007A8  0E00               	movlw	0
  6996  0007AA  6E37               	movwf	___llmod@divisor+3,c
  6997  0007AC  EC87  F01D         	call	___llmod	;wreg free
  6998  0007B0  C030  F0DB         	movff	?___llmod,printf@tmpval
  6999  0007B4  C031  F0DC         	movff	?___llmod+1,printf@tmpval+1
  7000  0007B8  C032  F0DD         	movff	?___llmod+2,printf@tmpval+2
  7001  0007BC  C033  F0DE         	movff	?___llmod+3,printf@tmpval+3
  7002                           
  7003                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  7004  0007C0  0100               	movlb	0	; () banked
  7005  0007C2  51DB               	movf	printf@tmpval& (0+255),w,b
  7006  0007C4  0F30               	addlw	48
  7007  0007C6  EC83  F020         	call	_putch
  7008  0007CA                     l6921:
  7009  0007CA  0100               	movlb	0	; () banked
  7010  0007CC  07EE               	decf	printf@c& (0+255),f,b
  7011  0007CE  0100               	movlb	0	; () banked
  7012  0007D0  29EE               	incf	printf@c& (0+255),w,b
  7013  0007D2  B4D8               	btfsc	status,2,c
  7014  0007D4  D008               	goto	l6927
  7015  0007D6  D7B3               	goto	l6915
  7016  0007D8                     l6923:
  7017                           
  7018                           ; BSR set to: 0
  7019                           ;doprnt.c: 1208: (putch('0') );
  7020  0007D8  0E30               	movlw	48
  7021  0007DA  EC83  F020         	call	_putch
  7022                           
  7023                           ;doprnt.c: 1209: exp--;
  7024  0007DE  0100               	movlb	0	; () banked
  7025  0007E0  07DF               	decf	printf@exp& (0+255),f,b
  7026  0007E2  A0D8               	btfss	status,0,c
  7027  0007E4  07E0               	decf	(printf@exp+1)& (0+255),f,b
  7028  0007E6                     l6927:
  7029                           
  7030                           ; BSR set to: 0
  7031  0007E6  0100               	movlb	0	; () banked
  7032  0007E8  BFE0               	btfsc	(printf@exp+1)& (0+255),7,b
  7033  0007EA  D007               	goto	l6929
  7034  0007EC  0100               	movlb	0	; () banked
  7035  0007EE  51E0               	movf	(printf@exp+1)& (0+255),w,b
  7036  0007F0  E1F3               	bnz	l6923
  7037  0007F2  0100               	movlb	0	; () banked
  7038  0007F4  05DF               	decf	printf@exp& (0+255),w,b
  7039  0007F6  B0D8               	btfsc	status,0,c
  7040  0007F8  D7EF               	goto	l6923
  7041  0007FA                     l6929:
  7042                           
  7043                           ; BSR set to: 0
  7044                           ;doprnt.c: 1210: }
  7045                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  7046  0007FA  0100               	movlb	0	; () banked
  7047  0007FC  BFED               	btfsc	(printf@prec+1)& (0+255),7,b
  7048  0007FE  D00C               	goto	l830
  7049  000800  0100               	movlb	0	; () banked
  7050  000802  51ED               	movf	(printf@prec+1)& (0+255),w,b
  7051  000804  E105               	bnz	u7000
  7052  000806  0E09               	movlw	9
  7053  000808  0100               	movlb	0	; () banked
  7054  00080A  5DEC               	subwf	printf@prec& (0+255),w,b
  7055  00080C  A0D8               	btfss	status,0,c
  7056  00080E  D004               	goto	l830
  7057  000810                     u7000:
  7058                           
  7059                           ; BSR set to: 0
  7060                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  7061  000810  0E08               	movlw	8
  7062  000812  0100               	movlb	0	; () banked
  7063  000814  6FEE               	movwf	printf@c& (0+255),b
  7064  000816  D002               	goto	l6933
  7065  000818                     l830:
  7066                           
  7067                           ; BSR set to: 0
  7068                           ;doprnt.c: 1213: else
  7069                           ;doprnt.c: 1214: c = prec;
  7070  000818  C0EC  F0EE         	movff	printf@prec,printf@c
  7071  00081C                     l6933:
  7072                           
  7073                           ; BSR set to: 0
  7074                           ;doprnt.c: 1215: prec -= c;
  7075  00081C  0100               	movlb	0	; () banked
  7076  00081E  51EE               	movf	printf@c& (0+255),w,b
  7077  000820  0100               	movlb	0	; () banked
  7078  000822  5FEC               	subwf	printf@prec& (0+255),f,b
  7079  000824  0E00               	movlw	0
  7080  000826  0100               	movlb	0	; () banked
  7081  000828  BFEE               	btfsc	printf@c& (0+255),7,b
  7082  00082A  0EFF               	movlw	255
  7083  00082C  0100               	movlb	0	; () banked
  7084  00082E  5BED               	subwfb	(printf@prec+1)& (0+255),f,b
  7085                           
  7086                           ; BSR set to: 0
  7087                           ;doprnt.c: 1219: if(c)
  7088  000830  0100               	movlb	0	; () banked
  7089  000832  51EE               	movf	printf@c& (0+255),w,b
  7090  000834  0100               	movlb	0	; () banked
  7091  000836  B4D8               	btfsc	status,2,c
  7092  000838  D003               	goto	l6939
  7093                           
  7094                           ; BSR set to: 0
  7095                           ;doprnt.c: 1221: (putch('.') );
  7096  00083A  0E2E               	movlw	46
  7097  00083C  EC83  F020         	call	_putch
  7098  000840                     l6939:
  7099                           
  7100                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7101  000840  0100               	movlb	0	; () banked
  7102  000842  51EE               	movf	printf@c& (0+255),w,b
  7103  000844  EC8D  F00C         	call	_scale
  7104  000848  C098  F0D1         	movff	?_scale,_printf$1424
  7105  00084C  C099  F0D2         	movff	?_scale+1,_printf$1424+1
  7106  000850  C09A  F0D3         	movff	?_scale+2,_printf$1424+2
  7107                           
  7108                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7109  000854  C0E1  F08C         	movff	printf@fval,___ftmul@f2
  7110  000858  C0E2  F08D         	movff	printf@fval+1,___ftmul@f2+1
  7111  00085C  C0E3  F08E         	movff	printf@fval+2,___ftmul@f2+2
  7112  000860  C0D1  F089         	movff	_printf$1424,___ftmul@f1
  7113  000864  C0D2  F08A         	movff	_printf$1424+1,___ftmul@f1+1
  7114  000868  C0D3  F08B         	movff	_printf$1424+2,___ftmul@f1+2
  7115  00086C  ECB8  F011         	call	___ftmul	;wreg free
  7116  000870  C089  F0AE         	movff	?___ftmul,___fttol@f1
  7117  000874  C08A  F0AF         	movff	?___ftmul+1,___fttol@f1+1
  7118  000878  C08B  F0B0         	movff	?___ftmul+2,___fttol@f1+2
  7119  00087C  EC13  F013         	call	___fttol	;wreg free
  7120  000880  C0AE  F0E4         	movff	?___fttol,printf@val
  7121  000884  C0AF  F0E5         	movff	?___fttol+1,printf@val+1
  7122  000888  C0B0  F0E6         	movff	?___fttol+2,printf@val+2
  7123  00088C  C0B1  F0E7         	movff	?___fttol+3,printf@val+3
  7124                           
  7125                           ;doprnt.c: 1228: while(c--) {
  7126  000890  D06D               	goto	l6949
  7127  000892                     l6943:
  7128                           
  7129                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  7130  000892  C0E4  F023         	movff	printf@val,___lldiv@dividend
  7131  000896  C0E5  F024         	movff	printf@val+1,___lldiv@dividend+1
  7132  00089A  C0E6  F025         	movff	printf@val+2,___lldiv@dividend+2
  7133  00089E  C0E7  F026         	movff	printf@val+3,___lldiv@dividend+3
  7134  0008A2  0100               	movlb	0	; () banked
  7135  0008A4  51EE               	movf	printf@c& (0+255),w,b
  7136  0008A6  0D04               	mullw	4
  7137  0008A8  0EBB               	movlw	low _dpowers
  7138  0008AA  24F3               	addwf	prodl,w,c
  7139  0008AC  6EF6               	movwf	tblptrl,c
  7140  0008AE  0EFD               	movlw	high _dpowers
  7141  0008B0  20F4               	addwfc	prodh,w,c
  7142  0008B2  6EF7               	movwf	tblptrh,c
  7143  0008B4                     	if	0	;There are less than 3 active tblptr bytes
  7144  0008B4                     	endif
  7145  0008B4  0009               	tblrd		*+
  7146  0008B6  CFF5 F027          	movff	tablat,___lldiv@divisor
  7147  0008BA  0009               	tblrd		*+
  7148  0008BC  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  7149  0008C0  0009               	tblrd		*+
  7150  0008C2  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  7151  0008C6  000A               	tblrd		*-
  7152  0008C8  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  7153  0008CC  EC59  F01C         	call	___lldiv	;wreg free
  7154  0008D0  C023  F0DB         	movff	?___lldiv,printf@tmpval
  7155  0008D4  C024  F0DC         	movff	?___lldiv+1,printf@tmpval+1
  7156  0008D8  C025  F0DD         	movff	?___lldiv+2,printf@tmpval+2
  7157  0008DC  C026  F0DE         	movff	?___lldiv+3,printf@tmpval+3
  7158                           
  7159                           ;doprnt.c: 1230: tmpval.vd %= 10;
  7160  0008E0  C0DB  F030         	movff	printf@tmpval,___llmod@dividend
  7161  0008E4  C0DC  F031         	movff	printf@tmpval+1,___llmod@dividend+1
  7162  0008E8  C0DD  F032         	movff	printf@tmpval+2,___llmod@dividend+2
  7163  0008EC  C0DE  F033         	movff	printf@tmpval+3,___llmod@dividend+3
  7164  0008F0  0E0A               	movlw	10
  7165  0008F2  6E34               	movwf	___llmod@divisor,c
  7166  0008F4  0E00               	movlw	0
  7167  0008F6  6E35               	movwf	___llmod@divisor+1,c
  7168  0008F8  0E00               	movlw	0
  7169  0008FA  6E36               	movwf	___llmod@divisor+2,c
  7170  0008FC  0E00               	movlw	0
  7171  0008FE  6E37               	movwf	___llmod@divisor+3,c
  7172  000900  EC87  F01D         	call	___llmod	;wreg free
  7173  000904  C030  F0DB         	movff	?___llmod,printf@tmpval
  7174  000908  C031  F0DC         	movff	?___llmod+1,printf@tmpval+1
  7175  00090C  C032  F0DD         	movff	?___llmod+2,printf@tmpval+2
  7176  000910  C033  F0DE         	movff	?___llmod+3,printf@tmpval+3
  7177                           
  7178                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  7179  000914  0100               	movlb	0	; () banked
  7180  000916  51DB               	movf	printf@tmpval& (0+255),w,b
  7181  000918  0F30               	addlw	48
  7182  00091A  EC83  F020         	call	_putch
  7183                           
  7184                           ;doprnt.c: 1232: val %= dpowers[c];
  7185  00091E  C0E4  F030         	movff	printf@val,___llmod@dividend
  7186  000922  C0E5  F031         	movff	printf@val+1,___llmod@dividend+1
  7187  000926  C0E6  F032         	movff	printf@val+2,___llmod@dividend+2
  7188  00092A  C0E7  F033         	movff	printf@val+3,___llmod@dividend+3
  7189  00092E  0100               	movlb	0	; () banked
  7190  000930  51EE               	movf	printf@c& (0+255),w,b
  7191  000932  0D04               	mullw	4
  7192  000934  0EBB               	movlw	low _dpowers
  7193  000936  24F3               	addwf	prodl,w,c
  7194  000938  6EF6               	movwf	tblptrl,c
  7195  00093A  0EFD               	movlw	high _dpowers
  7196  00093C  20F4               	addwfc	prodh,w,c
  7197  00093E  6EF7               	movwf	tblptrh,c
  7198  000940                     	if	0	;There are less than 3 active tblptr bytes
  7199  000940                     	endif
  7200  000940  0009               	tblrd		*+
  7201  000942  CFF5 F034          	movff	tablat,___llmod@divisor
  7202  000946  0009               	tblrd		*+
  7203  000948  CFF5 F035          	movff	tablat,___llmod@divisor+1
  7204  00094C  0009               	tblrd		*+
  7205  00094E  CFF5 F036          	movff	tablat,___llmod@divisor+2
  7206  000952  000A               	tblrd		*-
  7207  000954  CFF5 F037          	movff	tablat,___llmod@divisor+3
  7208  000958  EC87  F01D         	call	___llmod	;wreg free
  7209  00095C  C030  F0E4         	movff	?___llmod,printf@val
  7210  000960  C031  F0E5         	movff	?___llmod+1,printf@val+1
  7211  000964  C032  F0E6         	movff	?___llmod+2,printf@val+2
  7212  000968  C033  F0E7         	movff	?___llmod+3,printf@val+3
  7213  00096C                     l6949:
  7214  00096C  0100               	movlb	0	; () banked
  7215  00096E  07EE               	decf	printf@c& (0+255),f,b
  7216  000970  0100               	movlb	0	; () banked
  7217  000972  29EE               	incf	printf@c& (0+255),w,b
  7218  000974  B4D8               	btfsc	status,2,c
  7219  000976  D008               	goto	l6955
  7220  000978  D78C               	goto	l6943
  7221  00097A                     l6951:
  7222                           
  7223                           ; BSR set to: 0
  7224                           ;doprnt.c: 1236: (putch('0') );
  7225  00097A  0E30               	movlw	48
  7226  00097C  EC83  F020         	call	_putch
  7227                           
  7228                           ;doprnt.c: 1237: prec--;
  7229  000980  0100               	movlb	0	; () banked
  7230  000982  07EC               	decf	printf@prec& (0+255),f,b
  7231  000984  A0D8               	btfss	status,0,c
  7232  000986  07ED               	decf	(printf@prec+1)& (0+255),f,b
  7233  000988                     l6955:
  7234                           
  7235                           ; BSR set to: 0
  7236  000988  0100               	movlb	0	; () banked
  7237  00098A  51EC               	movf	printf@prec& (0+255),w,b
  7238  00098C  0100               	movlb	0	; () banked
  7239  00098E  11ED               	iorwf	(printf@prec+1)& (0+255),w,b
  7240  000990  B4D8               	btfsc	status,2,c
  7241  000992  D22B               	goto	l7083
  7242  000994  D7F2               	goto	l6951
  7243  000996                     l790:
  7244                           
  7245                           ; BSR set to: 0
  7246                           ;doprnt.c: 1246: }
  7247                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7248  000996  0100               	movlb	0	; () banked
  7249  000998  BFEA               	btfsc	printf@flag& (0+255),7,b
  7250  00099A  D034               	goto	l839
  7251                           
  7252                           ; BSR set to: 0
  7253                           ;doprnt.c: 1253: {
  7254                           ;doprnt.c: 1255: if(flag & 0x10)
  7255  00099C  0100               	movlb	0	; () banked
  7256  00099E  A9EA               	btfss	printf@flag& (0+255),4,b
  7257  0009A0  D00E               	goto	l6963
  7258                           
  7259                           ; BSR set to: 0
  7260                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  7261  0009A2  C0D9  FFD9         	movff	printf@ap,fsr2l
  7262  0009A6  C0DA  FFDA         	movff	printf@ap+1,fsr2h
  7263  0009AA  CFDE F0E4          	movff	postinc2,printf@val
  7264  0009AE  CFDE F0E5          	movff	postinc2,printf@val+1
  7265  0009B2  CFDE F0E6          	movff	postinc2,printf@val+2
  7266  0009B6  CFDE F0E7          	movff	postinc2,printf@val+3
  7267                           
  7268                           ; BSR set to: 0
  7269  0009BA  0E04               	movlw	4
  7270  0009BC  D00F               	goto	L2
  7271  0009BE                     l6963:
  7272                           
  7273                           ; BSR set to: 0
  7274                           ;doprnt.c: 1257: else
  7275                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  7276  0009BE  C0D9  FFD9         	movff	printf@ap,fsr2l
  7277  0009C2  C0DA  FFDA         	movff	printf@ap+1,fsr2h
  7278  0009C6  CFDE F0E4          	movff	postinc2,printf@val
  7279  0009CA  CFDD F0E5          	movff	postdec2,printf@val+1
  7280  0009CE  0100               	movlb	0	; () banked
  7281  0009D0  0E00               	movlw	0
  7282  0009D2  BFE5               	btfsc	(printf@val+1)& (0+255),7,b
  7283  0009D4  0EFF               	movlw	-1
  7284  0009D6  6FE6               	movwf	(printf@val+2)& (0+255),b
  7285  0009D8  6FE7               	movwf	(printf@val+3)& (0+255),b
  7286                           
  7287                           ; BSR set to: 0
  7288  0009DA  0E02               	movlw	2
  7289  0009DC                     L2:
  7290  0009DC  0100               	movlb	0	; () banked
  7291  0009DE  27D9               	addwf	printf@ap& (0+255),f,b
  7292  0009E0  0E00               	movlw	0
  7293  0009E2  23DA               	addwfc	(printf@ap+1)& (0+255),f,b
  7294                           
  7295                           ; BSR set to: 0
  7296                           ;doprnt.c: 1261: if((long)val < 0) {
  7297                           
  7298                           ; BSR set to: 0
  7299  0009E4  0100               	movlb	0	; () banked
  7300  0009E6  AFE7               	btfss	(printf@val+3)& (0+255),7,b
  7301  0009E8  D032               	goto	l6981
  7302                           
  7303                           ; BSR set to: 0
  7304                           ;doprnt.c: 1262: flag |= 0x03;
  7305  0009EA  0E03               	movlw	3
  7306  0009EC  0100               	movlb	0	; () banked
  7307  0009EE  13EA               	iorwf	printf@flag& (0+255),f,b
  7308                           
  7309                           ; BSR set to: 0
  7310                           ;doprnt.c: 1263: val = -val;
  7311  0009F0  0100               	movlb	0	; () banked
  7312  0009F2  1FE7               	comf	(printf@val+3)& (0+255),f,b
  7313  0009F4  1FE6               	comf	(printf@val+2)& (0+255),f,b
  7314  0009F6  1FE5               	comf	(printf@val+1)& (0+255),f,b
  7315  0009F8  6DE4               	negf	printf@val& (0+255),b
  7316  0009FA  0E00               	movlw	0
  7317  0009FC  23E5               	addwfc	(printf@val+1)& (0+255),f,b
  7318  0009FE  23E6               	addwfc	(printf@val+2)& (0+255),f,b
  7319  000A00  23E7               	addwfc	(printf@val+3)& (0+255),f,b
  7320                           
  7321                           ; BSR set to: 0
  7322                           ;doprnt.c: 1264: }
  7323                           ;doprnt.c: 1266: }
  7324  000A02  D025               	goto	l6981
  7325  000A04                     l839:
  7326                           
  7327                           ; BSR set to: 0
  7328                           ;doprnt.c: 1268: else
  7329                           ;doprnt.c: 1273: {
  7330                           ;doprnt.c: 1281: if(flag & 0x10)
  7331  000A04  0100               	movlb	0	; () banked
  7332  000A06  A9EA               	btfss	printf@flag& (0+255),4,b
  7333  000A08  D00E               	goto	l6977
  7334                           
  7335                           ; BSR set to: 0
  7336                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  7337  000A0A  C0D9  FFD9         	movff	printf@ap,fsr2l
  7338  000A0E  C0DA  FFDA         	movff	printf@ap+1,fsr2h
  7339  000A12  CFDE F0E4          	movff	postinc2,printf@val
  7340  000A16  CFDE F0E5          	movff	postinc2,printf@val+1
  7341  000A1A  CFDE F0E6          	movff	postinc2,printf@val+2
  7342  000A1E  CFDE F0E7          	movff	postinc2,printf@val+3
  7343                           
  7344                           ; BSR set to: 0
  7345  000A22  0E04               	movlw	4
  7346  000A24  D010               	goto	L3
  7347  000A26                     l6977:
  7348                           
  7349                           ; BSR set to: 0
  7350                           ;doprnt.c: 1283: else
  7351                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7352  000A26  C0D9  FFD9         	movff	printf@ap,fsr2l
  7353  000A2A  C0DA  FFDA         	movff	printf@ap+1,fsr2h
  7354  000A2E  CFDE F0CB          	movff	postinc2,??_printf
  7355  000A32  CFDD F0CC          	movff	postdec2,??_printf+1
  7356  000A36  C0CB  F0E4         	movff	??_printf,printf@val
  7357  000A3A  C0CC  F0E5         	movff	??_printf+1,printf@val+1
  7358  000A3E  0100               	movlb	0	; () banked
  7359  000A40  6BE6               	clrf	(printf@val+2)& (0+255),b
  7360  000A42  6BE7               	clrf	(printf@val+3)& (0+255),b
  7361                           
  7362                           ; BSR set to: 0
  7363  000A44  0E02               	movlw	2
  7364  000A46                     L3:
  7365  000A46  0100               	movlb	0	; () banked
  7366  000A48  27D9               	addwf	printf@ap& (0+255),f,b
  7367  000A4A  0E00               	movlw	0
  7368  000A4C  23DA               	addwfc	(printf@ap+1)& (0+255),f,b
  7369  000A4E                     l6981:
  7370                           
  7371                           ; BSR set to: 0
  7372                           ;doprnt.c: 1287: }
  7373                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7374  000A4E  0100               	movlb	0	; () banked
  7375  000A50  51EC               	movf	printf@prec& (0+255),w,b
  7376  000A52  0100               	movlb	0	; () banked
  7377  000A54  11ED               	iorwf	(printf@prec+1)& (0+255),w,b
  7378  000A56  A4D8               	btfss	status,2,c
  7379  000A58  D05A               	goto	l7017
  7380                           
  7381                           ; BSR set to: 0
  7382  000A5A  0100               	movlb	0	; () banked
  7383  000A5C  51E4               	movf	printf@val& (0+255),w,b
  7384  000A5E  0100               	movlb	0	; () banked
  7385  000A60  11E5               	iorwf	(printf@val+1)& (0+255),w,b
  7386  000A62  0100               	movlb	0	; () banked
  7387  000A64  11E6               	iorwf	(printf@val+2)& (0+255),w,b
  7388  000A66  0100               	movlb	0	; () banked
  7389  000A68  11E7               	iorwf	(printf@val+3)& (0+255),w,b
  7390  000A6A  A4D8               	btfss	status,2,c
  7391  000A6C  D050               	goto	l7017
  7392                           
  7393                           ; BSR set to: 0
  7394                           ;doprnt.c: 1291: prec++;
  7395  000A6E  0100               	movlb	0	; () banked
  7396  000A70  4BEC               	infsnz	printf@prec& (0+255),f,b
  7397  000A72  2BED               	incf	(printf@prec+1)& (0+255),f,b
  7398                           
  7399                           ; BSR set to: 0
  7400                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7401  000A74  D04C               	goto	l7017
  7402  000A76                     l6987:
  7403                           
  7404                           ; BSR set to: 0
  7405                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7406  000A76  0E01               	movlw	1
  7407  000A78  0100               	movlb	0	; () banked
  7408  000A7A  6FEE               	movwf	printf@c& (0+255),b
  7409  000A7C                     l6989:
  7410                           
  7411                           ; BSR set to: 0
  7412  000A7C  0E0A               	movlw	10
  7413  000A7E  0100               	movlb	0	; () banked
  7414  000A80  19EE               	xorwf	printf@c& (0+255),w,b
  7415  000A82  B4D8               	btfsc	status,2,c
  7416  000A84  D04D               	goto	l7019
  7417                           
  7418                           ; BSR set to: 0
  7419                           ;doprnt.c: 1306: if(val < dpowers[c])
  7420                           
  7421                           ; BSR set to: 0
  7422                           
  7423                           ; BSR set to: 0
  7424  000A86  0100               	movlb	0	; () banked
  7425  000A88  51EE               	movf	printf@c& (0+255),w,b
  7426  000A8A  0D04               	mullw	4
  7427  000A8C  0EBB               	movlw	low _dpowers
  7428  000A8E  24F3               	addwf	prodl,w,c
  7429  000A90  6EF6               	movwf	tblptrl,c
  7430  000A92  0EFD               	movlw	high _dpowers
  7431  000A94  20F4               	addwfc	prodh,w,c
  7432  000A96  6EF7               	movwf	tblptrh,c
  7433  000A98                     	if	0	;There are less than 3 active tblptr bytes
  7434  000A98                     	endif
  7435  000A98  0009               	tblrd		*+
  7436  000A9A  50F5               	movf	tablat,w,c
  7437  000A9C  0100               	movlb	0	; () banked
  7438  000A9E  5DE4               	subwf	printf@val& (0+255),w,b
  7439  000AA0  0009               	tblrd		*+
  7440  000AA2  50F5               	movf	tablat,w,c
  7441  000AA4  0100               	movlb	0	; () banked
  7442  000AA6  59E5               	subwfb	(printf@val+1)& (0+255),w,b
  7443  000AA8  0009               	tblrd		*+
  7444  000AAA  50F5               	movf	tablat,w,c
  7445  000AAC  0100               	movlb	0	; () banked
  7446  000AAE  59E6               	subwfb	(printf@val+2)& (0+255),w,b
  7447  000AB0  0009               	tblrd		*+
  7448  000AB2  50F5               	movf	tablat,w,c
  7449  000AB4  0100               	movlb	0	; () banked
  7450  000AB6  59E7               	subwfb	(printf@val+3)& (0+255),w,b
  7451  000AB8  A0D8               	btfss	status,0,c
  7452  000ABA  D032               	goto	l7019
  7453                           
  7454                           ; BSR set to: 0
  7455                           
  7456                           ; BSR set to: 0
  7457                           
  7458                           ; BSR set to: 0
  7459                           ;doprnt.c: 1307: break;
  7460  000ABC  0100               	movlb	0	; () banked
  7461  000ABE  2BEE               	incf	printf@c& (0+255),f,b
  7462  000AC0  D7DD               	goto	l6989
  7463  000AC2                     l7001:
  7464                           
  7465                           ; BSR set to: 0
  7466                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7467  000AC2  0E01               	movlw	1
  7468  000AC4  0100               	movlb	0	; () banked
  7469  000AC6  6FEE               	movwf	printf@c& (0+255),b
  7470  000AC8                     l7003:
  7471                           
  7472                           ; BSR set to: 0
  7473  000AC8  0E08               	movlw	8
  7474  000ACA  0100               	movlb	0	; () banked
  7475  000ACC  19EE               	xorwf	printf@c& (0+255),w,b
  7476  000ACE  B4D8               	btfsc	status,2,c
  7477  000AD0  D027               	goto	l7019
  7478                           
  7479                           ; BSR set to: 0
  7480                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7481                           
  7482                           ; BSR set to: 0
  7483                           
  7484                           ; BSR set to: 0
  7485  000AD2  0100               	movlb	0	; () banked
  7486  000AD4  51EE               	movf	printf@c& (0+255),w,b
  7487  000AD6  0D04               	mullw	4
  7488  000AD8  0E31               	movlw	low _hexpowers
  7489  000ADA  24F3               	addwf	prodl,w,c
  7490  000ADC  6EF6               	movwf	tblptrl,c
  7491  000ADE  0EFE               	movlw	high _hexpowers
  7492  000AE0  20F4               	addwfc	prodh,w,c
  7493  000AE2  6EF7               	movwf	tblptrh,c
  7494  000AE4                     	if	0	;There are less than 3 active tblptr bytes
  7495  000AE4                     	endif
  7496  000AE4  0009               	tblrd		*+
  7497  000AE6  50F5               	movf	tablat,w,c
  7498  000AE8  0100               	movlb	0	; () banked
  7499  000AEA  5DE4               	subwf	printf@val& (0+255),w,b
  7500  000AEC  0009               	tblrd		*+
  7501  000AEE  50F5               	movf	tablat,w,c
  7502  000AF0  0100               	movlb	0	; () banked
  7503  000AF2  59E5               	subwfb	(printf@val+1)& (0+255),w,b
  7504  000AF4  0009               	tblrd		*+
  7505  000AF6  50F5               	movf	tablat,w,c
  7506  000AF8  0100               	movlb	0	; () banked
  7507  000AFA  59E6               	subwfb	(printf@val+2)& (0+255),w,b
  7508  000AFC  0009               	tblrd		*+
  7509  000AFE  50F5               	movf	tablat,w,c
  7510  000B00  0100               	movlb	0	; () banked
  7511  000B02  59E7               	subwfb	(printf@val+3)& (0+255),w,b
  7512  000B04  A0D8               	btfss	status,0,c
  7513  000B06  D00C               	goto	l7019
  7514                           
  7515                           ; BSR set to: 0
  7516                           
  7517                           ; BSR set to: 0
  7518                           
  7519                           ; BSR set to: 0
  7520                           ;doprnt.c: 1318: break;
  7521  000B08  0100               	movlb	0	; () banked
  7522  000B0A  2BEE               	incf	printf@c& (0+255),f,b
  7523  000B0C  D7DD               	goto	l7003
  7524  000B0E                     l7017:
  7525                           
  7526                           ; BSR set to: 0
  7527  000B0E  0100               	movlb	0	; () banked
  7528  000B10  51EA               	movf	printf@flag& (0+255),w,b
  7529  000B12  0B80               	andlw	128
  7530                           
  7531                           ; Switch size 1, requested type "space"
  7532                           ; Number of cases is 2, Range of values is 0 to 128
  7533                           ; switch strategies available:
  7534                           ; Name         Instructions Cycles
  7535                           ; simple_byte            7     4 (average)
  7536                           ;	Chosen strategy is simple_byte
  7537  000B14  0A00               	xorlw	0	; case 0
  7538  000B16  B4D8               	btfsc	status,2,c
  7539  000B18  D7AE               	goto	l6987
  7540  000B1A  0A80               	xorlw	128	; case 128
  7541  000B1C  B4D8               	btfsc	status,2,c
  7542  000B1E  D7D1               	goto	l7001
  7543  000B20                     l7019:
  7544                           
  7545                           ; BSR set to: 0
  7546                           ;doprnt.c: 1339: if(c < prec)
  7547  000B20  0E80               	movlw	128
  7548  000B22  0100               	movlb	0	; () banked
  7549  000B24  BFEE               	btfsc	printf@c& (0+255),7,b
  7550  000B26  0E7F               	movlw	127
  7551  000B28  0100               	movlb	0	; () banked
  7552  000B2A  6FCB               	movwf	??_printf& (0+255),b
  7553  000B2C  0100               	movlb	0	; () banked
  7554  000B2E  51EC               	movf	printf@prec& (0+255),w,b
  7555  000B30  0100               	movlb	0	; () banked
  7556  000B32  5DEE               	subwf	printf@c& (0+255),w,b
  7557  000B34  0100               	movlb	0	; () banked
  7558  000B36  51ED               	movf	(printf@prec+1)& (0+255),w,b
  7559  000B38  0A80               	xorlw	128
  7560  000B3A  0100               	movlb	0	; () banked
  7561  000B3C  59CB               	subwfb	??_printf& (0+255),w,b
  7562  000B3E  B0D8               	btfsc	status,0,c
  7563  000B40  D003               	goto	l7023
  7564                           
  7565                           ; BSR set to: 0
  7566                           ;doprnt.c: 1340: c = prec;
  7567  000B42  C0EC  F0EE         	movff	printf@prec,printf@c
  7568  000B46  D018               	goto	l7027
  7569  000B48                     l7023:
  7570                           
  7571                           ; BSR set to: 0
  7572                           ;doprnt.c: 1341: else if(prec < c)
  7573  000B48  0100               	movlb	0	; () banked
  7574  000B4A  51ED               	movf	(printf@prec+1)& (0+255),w,b
  7575  000B4C  0A80               	xorlw	128
  7576  000B4E  0100               	movlb	0	; () banked
  7577  000B50  6FCB               	movwf	??_printf& (0+255),b
  7578  000B52  0100               	movlb	0	; () banked
  7579  000B54  51EE               	movf	printf@c& (0+255),w,b
  7580  000B56  0100               	movlb	0	; () banked
  7581  000B58  5DEC               	subwf	printf@prec& (0+255),w,b
  7582  000B5A  0E80               	movlw	128
  7583  000B5C  0100               	movlb	0	; () banked
  7584  000B5E  BFEE               	btfsc	printf@c& (0+255),7,b
  7585  000B60  0E7F               	movlw	127
  7586  000B62  0100               	movlb	0	; () banked
  7587  000B64  59CB               	subwfb	??_printf& (0+255),w,b
  7588  000B66  B0D8               	btfsc	status,0,c
  7589  000B68  D007               	goto	l7027
  7590                           
  7591                           ; BSR set to: 0
  7592                           ;doprnt.c: 1342: prec = c;
  7593  000B6A  0100               	movlb	0	; () banked
  7594  000B6C  51EE               	movf	printf@c& (0+255),w,b
  7595  000B6E  0100               	movlb	0	; () banked
  7596  000B70  6FEC               	movwf	printf@prec& (0+255),b
  7597  000B72  6BED               	clrf	(printf@prec+1)& (0+255),b
  7598  000B74  BFEC               	btfsc	printf@prec& (0+255),7,b
  7599  000B76  07ED               	decf	(printf@prec+1)& (0+255),f,b
  7600  000B78                     l7027:
  7601                           
  7602                           ; BSR set to: 0
  7603                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7604  000B78  0100               	movlb	0	; () banked
  7605  000B7A  51E8               	movf	printf@width& (0+255),w,b
  7606  000B7C  0100               	movlb	0	; () banked
  7607  000B7E  11E9               	iorwf	(printf@width+1)& (0+255),w,b
  7608  000B80  B4D8               	btfsc	status,2,c
  7609  000B82  D014               	goto	l7033
  7610                           
  7611                           ; BSR set to: 0
  7612  000B84  0E03               	movlw	3
  7613  000B86  0100               	movlb	0	; () banked
  7614  000B88  15EA               	andwf	printf@flag& (0+255),w,b
  7615  000B8A  0100               	movlb	0	; () banked
  7616  000B8C  6FCB               	movwf	??_printf& (0+255),b
  7617  000B8E  0E00               	movlw	0
  7618  000B90  0100               	movlb	0	; () banked
  7619  000B92  15EB               	andwf	(printf@flag+1)& (0+255),w,b
  7620  000B94  0100               	movlb	0	; () banked
  7621  000B96  6FCC               	movwf	(??_printf+1)& (0+255),b
  7622  000B98  0100               	movlb	0	; () banked
  7623  000B9A  51CB               	movf	??_printf& (0+255),w,b
  7624  000B9C  0100               	movlb	0	; () banked
  7625  000B9E  11CC               	iorwf	(??_printf+1)& (0+255),w,b
  7626  000BA0  B4D8               	btfsc	status,2,c
  7627  000BA2  D004               	goto	l7033
  7628                           
  7629                           ; BSR set to: 0
  7630                           ;doprnt.c: 1346: width--;
  7631  000BA4  0100               	movlb	0	; () banked
  7632  000BA6  07E8               	decf	printf@width& (0+255),f,b
  7633  000BA8  A0D8               	btfss	status,0,c
  7634  000BAA  07E9               	decf	(printf@width+1)& (0+255),f,b
  7635  000BAC                     l7033:
  7636                           
  7637                           ; BSR set to: 0
  7638                           ;doprnt.c: 1348: if(flag & 0x4000) {
  7639  000BAC  0100               	movlb	0	; () banked
  7640  000BAE  ADEB               	btfss	(printf@flag+1)& (0+255),6,b
  7641  000BB0  D01E               	goto	l7041
  7642                           
  7643                           ; BSR set to: 0
  7644                           ;doprnt.c: 1349: if(width > prec)
  7645  000BB2  0100               	movlb	0	; () banked
  7646  000BB4  51E8               	movf	printf@width& (0+255),w,b
  7647  000BB6  0100               	movlb	0	; () banked
  7648  000BB8  5DEC               	subwf	printf@prec& (0+255),w,b
  7649  000BBA  0100               	movlb	0	; () banked
  7650  000BBC  51ED               	movf	(printf@prec+1)& (0+255),w,b
  7651  000BBE  0A80               	xorlw	128
  7652  000BC0  0100               	movlb	0	; () banked
  7653  000BC2  6FCB               	movwf	??_printf& (0+255),b
  7654  000BC4  0100               	movlb	0	; () banked
  7655  000BC6  51E9               	movf	(printf@width+1)& (0+255),w,b
  7656  000BC8  0A80               	xorlw	128
  7657  000BCA  0100               	movlb	0	; () banked
  7658  000BCC  59CB               	subwfb	??_printf& (0+255),w,b
  7659  000BCE  B0D8               	btfsc	status,0,c
  7660  000BD0  D009               	goto	l7039
  7661                           
  7662                           ; BSR set to: 0
  7663                           ;doprnt.c: 1350: width -= prec;
  7664  000BD2  0100               	movlb	0	; () banked
  7665  000BD4  51EC               	movf	printf@prec& (0+255),w,b
  7666  000BD6  0100               	movlb	0	; () banked
  7667  000BD8  5FE8               	subwf	printf@width& (0+255),f,b
  7668  000BDA  0100               	movlb	0	; () banked
  7669  000BDC  51ED               	movf	(printf@prec+1)& (0+255),w,b
  7670  000BDE  0100               	movlb	0	; () banked
  7671  000BE0  5BE9               	subwfb	(printf@width+1)& (0+255),f,b
  7672  000BE2  D005               	goto	l7041
  7673  000BE4                     l7039:
  7674                           
  7675                           ; BSR set to: 0
  7676                           ;doprnt.c: 1351: else
  7677                           ;doprnt.c: 1352: width = 0;
  7678  000BE4  0E00               	movlw	0
  7679  000BE6  0100               	movlb	0	; () banked
  7680  000BE8  6FE9               	movwf	(printf@width+1)& (0+255),b
  7681  000BEA  0E00               	movlw	0
  7682  000BEC  6FE8               	movwf	printf@width& (0+255),b
  7683  000BEE                     l7041:
  7684                           
  7685                           ; BSR set to: 0
  7686                           ;doprnt.c: 1353: }
  7687                           ;doprnt.c: 1381: if(width > c)
  7688  000BEE  0E80               	movlw	128
  7689  000BF0  0100               	movlb	0	; () banked
  7690  000BF2  BFEE               	btfsc	printf@c& (0+255),7,b
  7691  000BF4  0E7F               	movlw	127
  7692  000BF6  0100               	movlb	0	; () banked
  7693  000BF8  6FCB               	movwf	??_printf& (0+255),b
  7694  000BFA  0100               	movlb	0	; () banked
  7695  000BFC  51E8               	movf	printf@width& (0+255),w,b
  7696  000BFE  0100               	movlb	0	; () banked
  7697  000C00  5DEE               	subwf	printf@c& (0+255),w,b
  7698  000C02  0100               	movlb	0	; () banked
  7699  000C04  51E9               	movf	(printf@width+1)& (0+255),w,b
  7700  000C06  0A80               	xorlw	128
  7701  000C08  0100               	movlb	0	; () banked
  7702  000C0A  59CB               	subwfb	??_printf& (0+255),w,b
  7703  000C0C  B0D8               	btfsc	status,0,c
  7704  000C0E  D00B               	goto	l7045
  7705                           
  7706                           ; BSR set to: 0
  7707                           ;doprnt.c: 1382: width -= c;
  7708  000C10  0100               	movlb	0	; () banked
  7709  000C12  51EE               	movf	printf@c& (0+255),w,b
  7710  000C14  0100               	movlb	0	; () banked
  7711  000C16  5FE8               	subwf	printf@width& (0+255),f,b
  7712  000C18  0E00               	movlw	0
  7713  000C1A  0100               	movlb	0	; () banked
  7714  000C1C  BFEE               	btfsc	printf@c& (0+255),7,b
  7715  000C1E  0EFF               	movlw	255
  7716  000C20  0100               	movlb	0	; () banked
  7717  000C22  5BE9               	subwfb	(printf@width+1)& (0+255),f,b
  7718  000C24  D005               	goto	l7047
  7719  000C26                     l7045:
  7720                           
  7721                           ; BSR set to: 0
  7722                           ;doprnt.c: 1383: else
  7723                           ;doprnt.c: 1384: width = 0;
  7724  000C26  0E00               	movlw	0
  7725  000C28  0100               	movlb	0	; () banked
  7726  000C2A  6FE9               	movwf	(printf@width+1)& (0+255),b
  7727  000C2C  0E00               	movlw	0
  7728  000C2E  6FE8               	movwf	printf@width& (0+255),b
  7729  000C30                     l7047:
  7730                           
  7731                           ; BSR set to: 0
  7732                           ;doprnt.c: 1387: if(flag & 0x04) {
  7733  000C30  0100               	movlb	0	; () banked
  7734  000C32  A5EA               	btfss	printf@flag& (0+255),2,b
  7735  000C34  D021               	goto	l7059
  7736                           
  7737                           ; BSR set to: 0
  7738                           ;doprnt.c: 1392: if(flag & 0x03)
  7739  000C36  0E03               	movlw	3
  7740  000C38  0100               	movlb	0	; () banked
  7741  000C3A  15EA               	andwf	printf@flag& (0+255),w,b
  7742  000C3C  0100               	movlb	0	; () banked
  7743  000C3E  6FCB               	movwf	??_printf& (0+255),b
  7744  000C40  0E00               	movlw	0
  7745  000C42  0100               	movlb	0	; () banked
  7746  000C44  15EB               	andwf	(printf@flag+1)& (0+255),w,b
  7747  000C46  0100               	movlb	0	; () banked
  7748  000C48  6FCC               	movwf	(??_printf+1)& (0+255),b
  7749  000C4A  0100               	movlb	0	; () banked
  7750  000C4C  51CB               	movf	??_printf& (0+255),w,b
  7751  000C4E  0100               	movlb	0	; () banked
  7752  000C50  11CC               	iorwf	(??_printf+1)& (0+255),w,b
  7753  000C52  B4D8               	btfsc	status,2,c
  7754  000C54  D003               	goto	l7053
  7755                           
  7756                           ; BSR set to: 0
  7757                           ;doprnt.c: 1393: (putch('-') );
  7758  000C56  0E2D               	movlw	45
  7759  000C58  EC83  F020         	call	_putch
  7760  000C5C                     l7053:
  7761                           
  7762                           ;doprnt.c: 1415: if(width)
  7763  000C5C  0100               	movlb	0	; () banked
  7764  000C5E  51E8               	movf	printf@width& (0+255),w,b
  7765  000C60  0100               	movlb	0	; () banked
  7766  000C62  11E9               	iorwf	(printf@width+1)& (0+255),w,b
  7767  000C64  B4D8               	btfsc	status,2,c
  7768  000C66  D0B6               	goto	l7081
  7769                           
  7770                           ; BSR set to: 0
  7771                           ;doprnt.c: 1417: (putch('0') );
  7772                           
  7773                           ; BSR set to: 0
  7774                           
  7775                           ;doprnt.c: 1416: do
  7776  000C68  0E30               	movlw	48
  7777  000C6A  EC83  F020         	call	_putch
  7778                           
  7779                           ;doprnt.c: 1418: while(--width);
  7780  000C6E  0100               	movlb	0	; () banked
  7781  000C70  07E8               	decf	printf@width& (0+255),f,b
  7782  000C72  A0D8               	btfss	status,0,c
  7783  000C74  07E9               	decf	(printf@width+1)& (0+255),f,b
  7784  000C76  D7F2               	goto	l7053
  7785  000C78                     l7059:
  7786                           
  7787                           ; BSR set to: 0
  7788                           ;doprnt.c: 1422: {
  7789                           ;doprnt.c: 1424: if(width
  7790                           ;doprnt.c: 1428: )
  7791  000C78  0100               	movlb	0	; () banked
  7792  000C7A  51E8               	movf	printf@width& (0+255),w,b
  7793  000C7C  0100               	movlb	0	; () banked
  7794  000C7E  11E9               	iorwf	(printf@width+1)& (0+255),w,b
  7795  000C80  B4D8               	btfsc	status,2,c
  7796  000C82  D00D               	goto	l7065
  7797  000C84                     l7061:
  7798                           
  7799                           ; BSR set to: 0
  7800                           ;doprnt.c: 1430: (putch(' ') );
  7801  000C84  0E20               	movlw	32
  7802  000C86  EC83  F020         	call	_putch
  7803                           
  7804                           ;doprnt.c: 1431: while(--width);
  7805  000C8A  0100               	movlb	0	; () banked
  7806  000C8C  07E8               	decf	printf@width& (0+255),f,b
  7807  000C8E  A0D8               	btfss	status,0,c
  7808  000C90  07E9               	decf	(printf@width+1)& (0+255),f,b
  7809  000C92  0100               	movlb	0	; () banked
  7810  000C94  51E8               	movf	printf@width& (0+255),w,b
  7811  000C96  0100               	movlb	0	; () banked
  7812  000C98  11E9               	iorwf	(printf@width+1)& (0+255),w,b
  7813  000C9A  A4D8               	btfss	status,2,c
  7814  000C9C  D7F3               	goto	l7061
  7815  000C9E                     l7065:
  7816                           
  7817                           ; BSR set to: 0
  7818                           ;doprnt.c: 1438: if(flag & 0x03)
  7819  000C9E  0E03               	movlw	3
  7820  000CA0  0100               	movlb	0	; () banked
  7821  000CA2  15EA               	andwf	printf@flag& (0+255),w,b
  7822  000CA4  0100               	movlb	0	; () banked
  7823  000CA6  6FCB               	movwf	??_printf& (0+255),b
  7824  000CA8  0E00               	movlw	0
  7825  000CAA  0100               	movlb	0	; () banked
  7826  000CAC  15EB               	andwf	(printf@flag+1)& (0+255),w,b
  7827  000CAE  0100               	movlb	0	; () banked
  7828  000CB0  6FCC               	movwf	(??_printf+1)& (0+255),b
  7829  000CB2  0100               	movlb	0	; () banked
  7830  000CB4  51CB               	movf	??_printf& (0+255),w,b
  7831  000CB6  0100               	movlb	0	; () banked
  7832  000CB8  11CC               	iorwf	(??_printf+1)& (0+255),w,b
  7833  000CBA  B4D8               	btfsc	status,2,c
  7834  000CBC  D08B               	goto	l7081
  7835                           
  7836                           ; BSR set to: 0
  7837                           ;doprnt.c: 1439: (putch('-') );
  7838  000CBE  0E2D               	movlw	45
  7839  000CC0  EC83  F020         	call	_putch
  7840                           
  7841                           ;doprnt.c: 1469: }
  7842                           ;doprnt.c: 1474: while(prec--) {
  7843  000CC4  D087               	goto	l7081
  7844  000CC6                     l7069:
  7845                           
  7846                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7847  000CC6  C0EC  F0CB         	movff	printf@prec,??_printf
  7848  000CCA  C0ED  F0CC         	movff	printf@prec+1,??_printf+1
  7849  000CCE  0100               	movlb	0	; () banked
  7850  000CD0  90D8               	bcf	status,0,c
  7851  000CD2  37CB               	rlcf	??_printf& (0+255),f,b
  7852  000CD4  37CC               	rlcf	(??_printf+1)& (0+255),f,b
  7853  000CD6  0100               	movlb	0	; () banked
  7854  000CD8  90D8               	bcf	status,0,c
  7855  000CDA  37CB               	rlcf	??_printf& (0+255),f,b
  7856  000CDC  37CC               	rlcf	(??_printf+1)& (0+255),f,b
  7857  000CDE  0EBB               	movlw	low _dpowers
  7858  000CE0  0100               	movlb	0	; () banked
  7859  000CE2  25CB               	addwf	??_printf& (0+255),w,b
  7860  000CE4  6EF6               	movwf	tblptrl,c
  7861  000CE6  0EFD               	movlw	high _dpowers
  7862  000CE8  21CC               	addwfc	(??_printf+1)& (0+255),w,b
  7863  000CEA  6EF7               	movwf	tblptrh,c
  7864  000CEC                     	if	0	;There are less than 3 active tblptr bytes
  7865  000CEC                     	endif
  7866  000CEC  0009               	tblrd		*+
  7867  000CEE  CFF5 F027          	movff	tablat,___lldiv@divisor
  7868  000CF2  0009               	tblrd		*+
  7869  000CF4  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  7870  000CF8  0009               	tblrd		*+
  7871  000CFA  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  7872  000CFE  000A               	tblrd		*-
  7873  000D00  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  7874  000D04  C0E4  F023         	movff	printf@val,___lldiv@dividend
  7875  000D08  C0E5  F024         	movff	printf@val+1,___lldiv@dividend+1
  7876  000D0C  C0E6  F025         	movff	printf@val+2,___lldiv@dividend+2
  7877  000D10  C0E7  F026         	movff	printf@val+3,___lldiv@dividend+3
  7878  000D14  EC59  F01C         	call	___lldiv	;wreg free
  7879  000D18  C023  F030         	movff	?___lldiv,___llmod@dividend
  7880  000D1C  C024  F031         	movff	?___lldiv+1,___llmod@dividend+1
  7881  000D20  C025  F032         	movff	?___lldiv+2,___llmod@dividend+2
  7882  000D24  C026  F033         	movff	?___lldiv+3,___llmod@dividend+3
  7883  000D28  0E0A               	movlw	10
  7884  000D2A  6E34               	movwf	___llmod@divisor,c
  7885  000D2C  0E00               	movlw	0
  7886  000D2E  6E35               	movwf	___llmod@divisor+1,c
  7887  000D30  0E00               	movlw	0
  7888  000D32  6E36               	movwf	___llmod@divisor+2,c
  7889  000D34  0E00               	movlw	0
  7890  000D36  6E37               	movwf	___llmod@divisor+3,c
  7891  000D38  EC87  F01D         	call	___llmod	;wreg free
  7892  000D3C  5030               	movf	?___llmod,w,c
  7893  000D3E  0F30               	addlw	48
  7894  000D40  0100               	movlb	0	; () banked
  7895  000D42  6FEE               	movwf	printf@c& (0+255),b
  7896                           
  7897                           ;doprnt.c: 1491: break;
  7898  000D44  D043               	goto	l7079
  7899  000D46                     l7071:
  7900                           
  7901                           ; BSR set to: 0
  7902                           ;doprnt.c: 1499: {
  7903                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7904  000D46  C0E4  F023         	movff	printf@val,___lldiv@dividend
  7905  000D4A  C0E5  F024         	movff	printf@val+1,___lldiv@dividend+1
  7906  000D4E  C0E6  F025         	movff	printf@val+2,___lldiv@dividend+2
  7907  000D52  C0E7  F026         	movff	printf@val+3,___lldiv@dividend+3
  7908  000D56  C0EC  F0CB         	movff	printf@prec,??_printf
  7909  000D5A  C0ED  F0CC         	movff	printf@prec+1,??_printf+1
  7910  000D5E  0100               	movlb	0	; () banked
  7911  000D60  90D8               	bcf	status,0,c
  7912  000D62  37CB               	rlcf	??_printf& (0+255),f,b
  7913  000D64  37CC               	rlcf	(??_printf+1)& (0+255),f,b
  7914  000D66  0100               	movlb	0	; () banked
  7915  000D68  90D8               	bcf	status,0,c
  7916  000D6A  37CB               	rlcf	??_printf& (0+255),f,b
  7917  000D6C  37CC               	rlcf	(??_printf+1)& (0+255),f,b
  7918  000D6E  0E31               	movlw	low _hexpowers
  7919  000D70  0100               	movlb	0	; () banked
  7920  000D72  25CB               	addwf	??_printf& (0+255),w,b
  7921  000D74  6EF6               	movwf	tblptrl,c
  7922  000D76  0EFE               	movlw	high _hexpowers
  7923  000D78  21CC               	addwfc	(??_printf+1)& (0+255),w,b
  7924  000D7A  6EF7               	movwf	tblptrh,c
  7925  000D7C                     	if	0	;There are less than 3 active tblptr bytes
  7926  000D7C                     	endif
  7927  000D7C  0009               	tblrd		*+
  7928  000D7E  CFF5 F027          	movff	tablat,___lldiv@divisor
  7929  000D82  0009               	tblrd		*+
  7930  000D84  CFF5 F028          	movff	tablat,___lldiv@divisor+1
  7931  000D88  0009               	tblrd		*+
  7932  000D8A  CFF5 F029          	movff	tablat,___lldiv@divisor+2
  7933  000D8E  000A               	tblrd		*-
  7934  000D90  CFF5 F02A          	movff	tablat,___lldiv@divisor+3
  7935  000D94  EC59  F01C         	call	___lldiv	;wreg free
  7936  000D98  5023               	movf	?___lldiv,w,c
  7937  000D9A  0B0F               	andlw	15
  7938  000D9C  0100               	movlb	0	; () banked
  7939  000D9E  6FD4               	movwf	printf@idx& (0+255),b
  7940                           
  7941                           ; BSR set to: 0
  7942                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7943  000DA0  0100               	movlb	0	; () banked
  7944  000DA2  51D4               	movf	printf@idx& (0+255),w,b
  7945  000DA4  0D01               	mullw	1
  7946  000DA6  0E43               	movlw	low STR_24
  7947  000DA8  24F3               	addwf	prodl,w,c
  7948  000DAA  6EF6               	movwf	tblptrl,c
  7949  000DAC  0EFF               	movlw	high STR_24
  7950  000DAE  20F4               	addwfc	prodh,w,c
  7951  000DB0  6EF7               	movwf	tblptrh,c
  7952  000DB2                     	if	0	;There are less than 3 active tblptr bytes
  7953  000DB2                     	endif
  7954  000DB2  0008               	tblrd		*
  7955  000DB4  CFF5 F0EE          	movff	tablat,printf@c
  7956                           
  7957                           ; BSR set to: 0
  7958                           ;doprnt.c: 1523: }
  7959                           
  7960                           ;doprnt.c: 1508: }
  7961                           ;doprnt.c: 1510: break;
  7962  000DB8  D009               	goto	l7079
  7963  000DBA                     l7077:
  7964  000DBA  0100               	movlb	0	; () banked
  7965  000DBC  51EA               	movf	printf@flag& (0+255),w,b
  7966  000DBE  0B80               	andlw	128
  7967                           
  7968                           ; Switch size 1, requested type "space"
  7969                           ; Number of cases is 2, Range of values is 0 to 128
  7970                           ; switch strategies available:
  7971                           ; Name         Instructions Cycles
  7972                           ; simple_byte            7     4 (average)
  7973                           ;	Chosen strategy is simple_byte
  7974  000DC0  0A00               	xorlw	0	; case 0
  7975  000DC2  B4D8               	btfsc	status,2,c
  7976  000DC4  D780               	goto	l7069
  7977  000DC6  0A80               	xorlw	128	; case 128
  7978  000DC8  B4D8               	btfsc	status,2,c
  7979  000DCA  D7BD               	goto	l7071
  7980  000DCC                     l7079:
  7981                           
  7982                           ; BSR set to: 0
  7983                           ;doprnt.c: 1524: (putch(c) );
  7984  000DCC  0100               	movlb	0	; () banked
  7985  000DCE  51EE               	movf	printf@c& (0+255),w,b
  7986  000DD0  EC83  F020         	call	_putch
  7987  000DD4                     l7081:
  7988  000DD4  0100               	movlb	0	; () banked
  7989  000DD6  07EC               	decf	printf@prec& (0+255),f,b
  7990  000DD8  A0D8               	btfss	status,0,c
  7991  000DDA  07ED               	decf	(printf@prec+1)& (0+255),f,b
  7992  000DDC  0100               	movlb	0	; () banked
  7993  000DDE  29EC               	incf	printf@prec& (0+255),w,b
  7994  000DE0  E1EC               	bnz	l7077
  7995  000DE2  0100               	movlb	0	; () banked
  7996  000DE4  29ED               	incf	(printf@prec+1)& (0+255),w,b
  7997  000DE6  A4D8               	btfss	status,2,c
  7998  000DE8  D7E8               	goto	l7077
  7999  000DEA                     l7083:
  8000  000DEA  C0BD  FFF6         	movff	printf@f,tblptrl
  8001  000DEE  C0BE  FFF7         	movff	printf@f+1,tblptrh
  8002  000DF2  0100               	movlb	0	; () banked
  8003  000DF4  4BBD               	infsnz	printf@f& (0+255),f,b
  8004  000DF6  2BBE               	incf	(printf@f+1)& (0+255),f,b
  8005  000DF8                     	if	0	;tblptru may be non-zero
  8006  000DF8                     	endif
  8007  000DF8                     	if	0	;tblptru may be non-zero
  8008  000DF8                     	endif
  8009  000DF8  0008               	tblrd		*
  8010  000DFA  CFF5 F0EE          	movff	tablat,printf@c
  8011  000DFE  0100               	movlb	0	; () banked
  8012  000E00  51EE               	movf	printf@c& (0+255),w,b
  8013  000E02  B4D8               	btfsc	status,2,c
  8014  000E04  0012               	return	
  8015  000E06  EF11  F000         	goto	l6717
  8016  000E0A                     __end_of_printf:
  8017                           	opt stack 0
  8018                           tblptru	equ	0xFF8
  8019                           tblptrh	equ	0xFF7
  8020                           tblptrl	equ	0xFF6
  8021                           tablat	equ	0xFF5
  8022                           prodh	equ	0xFF4
  8023                           prodl	equ	0xFF3
  8024                           postinc0	equ	0xFEE
  8025                           wreg	equ	0xFE8
  8026                           postdec1	equ	0xFE5
  8027                           fsr1l	equ	0xFE1
  8028                           indf2	equ	0xFDF
  8029                           postinc2	equ	0xFDE
  8030                           postdec2	equ	0xFDD
  8031                           fsr2h	equ	0xFDA
  8032                           fsr2l	equ	0xFD9
  8033                           status	equ	0xFD8
  8034                           
  8035 ;; *************** function _scale *****************
  8036 ;; Defined at:
  8037 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  8038 ;; Parameters:    Size  Location     Type
  8039 ;;  scl             1    wreg     char 
  8040 ;; Auto vars:     Size  Location     Type
  8041 ;;  scl             1   30[BANK0 ] char 
  8042 ;; Return value:  Size  Location     Type
  8043 ;;                  3   24[BANK0 ] char 
  8044 ;; Registers used:
  8045 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8046 ;; Tracked objects:
  8047 ;;		On entry : 0/0
  8048 ;;		On exit  : 0/0
  8049 ;;		Unchanged: 0/0
  8050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8051 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8052 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8054 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8055 ;;Total ram usage:        7 bytes
  8056 ;; Hardware stack levels used:    1
  8057 ;; Hardware stack levels required when called:    5
  8058 ;; This function calls:
  8059 ;;		___awdiv
  8060 ;;		___awmod
  8061 ;;		___ftmul
  8062 ;;		___wmul
  8063 ;; This function is called by:
  8064 ;;		_printf
  8065 ;; This function uses a non-reentrant model
  8066 ;;
  8067                           
  8068                           	psect	text17
  8069  00191A                     __ptext17:
  8070                           	opt stack 0
  8071  00191A                     _scale:
  8072                           	opt stack 23
  8073                           
  8074                           ; BSR set to: 0
  8075                           ;incstack = 0
  8076                           ;scale@scl stored from wreg
  8077  00191A  0100               	movlb	0	; () banked
  8078  00191C  6F9E               	movwf	scale@scl& (0+255),b
  8079                           
  8080                           ;doprnt.c: 428: if(scl < 0) {
  8081  00191E  0100               	movlb	0	; () banked
  8082  001920  AF9E               	btfss	scale@scl& (0+255),7,b
  8083  001922  D104               	goto	l6379
  8084                           
  8085                           ; BSR set to: 0
  8086                           ;doprnt.c: 429: scl = -scl;
  8087  001924  0100               	movlb	0	; () banked
  8088  001926  6D9E               	negf	scale@scl& (0+255),b
  8089                           
  8090                           ;doprnt.c: 430: if(scl>=110)
  8091  001928  0100               	movlb	0	; () banked
  8092  00192A  519E               	movf	scale@scl& (0+255),w,b
  8093  00192C  0A80               	xorlw	128
  8094  00192E  0F12               	addlw	-238
  8095  001930  A0D8               	btfss	status,0,c
  8096  001932  D094               	goto	l6369
  8097                           
  8098                           ; BSR set to: 0
  8099                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8100  001934  0E00               	movlw	0
  8101  001936  6E34               	movwf	___wmul@multiplicand+1,c
  8102  001938  0E03               	movlw	3
  8103  00193A  6E33               	movwf	___wmul@multiplicand,c
  8104  00193C  0E00               	movlw	0
  8105  00193E  6E2C               	movwf	___awdiv@divisor+1,c
  8106  001940  0E0A               	movlw	10
  8107  001942  6E2B               	movwf	___awdiv@divisor,c
  8108  001944  0E00               	movlw	0
  8109  001946  6E26               	movwf	___awmod@divisor+1,c
  8110  001948  0E64               	movlw	100
  8111  00194A  6E25               	movwf	___awmod@divisor,c
  8112  00194C  0100               	movlb	0	; () banked
  8113  00194E  519E               	movf	scale@scl& (0+255),w,b
  8114  001950  6E23               	movwf	___awmod@dividend,c
  8115  001952  6A24               	clrf	___awmod@dividend+1,c
  8116  001954  BE23               	btfsc	___awmod@dividend,7,c
  8117  001956  0624               	decf	___awmod@dividend+1,f,c
  8118  001958  EC17  F01D         	call	___awmod	;wreg free
  8119  00195C  C023  F029         	movff	?___awmod,___awdiv@dividend
  8120  001960  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  8121  001964  EC17  F01C         	call	___awdiv	;wreg free
  8122  001968  0E09               	movlw	9
  8123  00196A  2429               	addwf	?___awdiv,w,c
  8124  00196C  6E31               	movwf	___wmul@multiplier,c
  8125  00196E  0E00               	movlw	0
  8126  001970  202A               	addwfc	?___awdiv+1,w,c
  8127  001972  6E32               	movwf	___wmul@multiplier+1,c
  8128  001974  EC5E  F020         	call	___wmul	;wreg free
  8129  001978  0EE3               	movlw	low __npowers_
  8130  00197A  2431               	addwf	?___wmul,w,c
  8131  00197C  6EF6               	movwf	tblptrl,c
  8132  00197E  0EFD               	movlw	high __npowers_
  8133  001980  2032               	addwfc	?___wmul+1,w,c
  8134  001982  6EF7               	movwf	tblptrh,c
  8135  001984                     	if	0	;There are less than 3 active tblptr bytes
  8136  001984                     	endif
  8137  001984  0009               	tblrd		*+
  8138  001986  CFF5 F08C          	movff	tablat,___ftmul@f2
  8139  00198A  0009               	tblrd		*+
  8140  00198C  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8141  001990  000A               	tblrd		*-
  8142  001992  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8143  001996  0E00               	movlw	0
  8144  001998  6E2C               	movwf	___awdiv@divisor+1,c
  8145  00199A  0E64               	movlw	100
  8146  00199C  6E2B               	movwf	___awdiv@divisor,c
  8147  00199E  0100               	movlb	0	; () banked
  8148  0019A0  519E               	movf	scale@scl& (0+255),w,b
  8149  0019A2  6E29               	movwf	___awdiv@dividend,c
  8150  0019A4  6A2A               	clrf	___awdiv@dividend+1,c
  8151  0019A6  BE29               	btfsc	___awdiv@dividend,7,c
  8152  0019A8  062A               	decf	___awdiv@dividend+1,f,c
  8153  0019AA  EC17  F01C         	call	___awdiv	;wreg free
  8154  0019AE  0E12               	movlw	18
  8155  0019B0  2429               	addwf	?___awdiv,w,c
  8156  0019B2  6E31               	movwf	___wmul@multiplier,c
  8157  0019B4  0E00               	movlw	0
  8158  0019B6  202A               	addwfc	?___awdiv+1,w,c
  8159  0019B8  6E32               	movwf	___wmul@multiplier+1,c
  8160  0019BA  0E00               	movlw	0
  8161  0019BC  6E34               	movwf	___wmul@multiplicand+1,c
  8162  0019BE  0E03               	movlw	3
  8163  0019C0  6E33               	movwf	___wmul@multiplicand,c
  8164  0019C2  EC5E  F020         	call	___wmul	;wreg free
  8165  0019C6  0EE3               	movlw	low __npowers_
  8166  0019C8  2431               	addwf	?___wmul,w,c
  8167  0019CA  6EF6               	movwf	tblptrl,c
  8168  0019CC  0EFD               	movlw	high __npowers_
  8169  0019CE  2032               	addwfc	?___wmul+1,w,c
  8170  0019D0  6EF7               	movwf	tblptrh,c
  8171  0019D2                     	if	0	;There are less than 3 active tblptr bytes
  8172  0019D2                     	endif
  8173  0019D2  0009               	tblrd		*+
  8174  0019D4  CFF5 F089          	movff	tablat,___ftmul@f1
  8175  0019D8  0009               	tblrd		*+
  8176  0019DA  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8177  0019DE  000A               	tblrd		*-
  8178  0019E0  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8179  0019E4  ECB8  F011         	call	___ftmul	;wreg free
  8180  0019E8  C089  F09B         	movff	?___ftmul,_scale$1423
  8181  0019EC  C08A  F09C         	movff	?___ftmul+1,_scale$1423+1
  8182  0019F0  C08B  F09D         	movff	?___ftmul+2,_scale$1423+2
  8183                           
  8184                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8185  0019F4  C09B  F089         	movff	_scale$1423,___ftmul@f1
  8186  0019F8  C09C  F08A         	movff	_scale$1423+1,___ftmul@f1+1
  8187  0019FC  C09D  F08B         	movff	_scale$1423+2,___ftmul@f1+2
  8188  001A00  0E00               	movlw	0
  8189  001A02  6E34               	movwf	___wmul@multiplicand+1,c
  8190  001A04  0E03               	movlw	3
  8191  001A06  6E33               	movwf	___wmul@multiplicand,c
  8192  001A08  0E00               	movlw	0
  8193  001A0A  6E26               	movwf	___awmod@divisor+1,c
  8194  001A0C  0E0A               	movlw	10
  8195  001A0E  6E25               	movwf	___awmod@divisor,c
  8196  001A10  0100               	movlb	0	; () banked
  8197  001A12  519E               	movf	scale@scl& (0+255),w,b
  8198  001A14  6E23               	movwf	___awmod@dividend,c
  8199  001A16  6A24               	clrf	___awmod@dividend+1,c
  8200  001A18  BE23               	btfsc	___awmod@dividend,7,c
  8201  001A1A  0624               	decf	___awmod@dividend+1,f,c
  8202  001A1C  EC17  F01D         	call	___awmod	;wreg free
  8203  001A20  C023  F031         	movff	?___awmod,___wmul@multiplier
  8204  001A24  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  8205  001A28  EC5E  F020         	call	___wmul	;wreg free
  8206  001A2C  0EE3               	movlw	low __npowers_
  8207  001A2E  2431               	addwf	?___wmul,w,c
  8208  001A30  6EF6               	movwf	tblptrl,c
  8209  001A32  0EFD               	movlw	high __npowers_
  8210  001A34  2032               	addwfc	?___wmul+1,w,c
  8211  001A36  6EF7               	movwf	tblptrh,c
  8212  001A38                     	if	0	;There are less than 3 active tblptr bytes
  8213  001A38                     	endif
  8214  001A38  0009               	tblrd		*+
  8215  001A3A  CFF5 F08C          	movff	tablat,___ftmul@f2
  8216  001A3E  0009               	tblrd		*+
  8217  001A40  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8218  001A44  000A               	tblrd		*-
  8219  001A46  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8220  001A4A  ECB8  F011         	call	___ftmul	;wreg free
  8221  001A4E  C089  F098         	movff	?___ftmul,?_scale
  8222  001A52  C08A  F099         	movff	?___ftmul+1,?_scale+1
  8223  001A56  C08B  F09A         	movff	?___ftmul+2,?_scale+2
  8224  001A5A  0012               	return	
  8225  001A5C                     l6369:
  8226                           
  8227                           ;doprnt.c: 432: else if(scl > 10)
  8228  001A5C  0100               	movlb	0	; () banked
  8229  001A5E  519E               	movf	scale@scl& (0+255),w,b
  8230  001A60  0A80               	xorlw	128
  8231  001A62  0F75               	addlw	-139
  8232  001A64  A0D8               	btfss	status,0,c
  8233  001A66  D04F               	goto	l6375
  8234                           
  8235                           ; BSR set to: 0
  8236                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  8237  001A68  0E00               	movlw	0
  8238  001A6A  6E2C               	movwf	___awdiv@divisor+1,c
  8239  001A6C  0E0A               	movlw	10
  8240  001A6E  6E2B               	movwf	___awdiv@divisor,c
  8241  001A70  0100               	movlb	0	; () banked
  8242  001A72  519E               	movf	scale@scl& (0+255),w,b
  8243  001A74  6E29               	movwf	___awdiv@dividend,c
  8244  001A76  6A2A               	clrf	___awdiv@dividend+1,c
  8245  001A78  BE29               	btfsc	___awdiv@dividend,7,c
  8246  001A7A  062A               	decf	___awdiv@dividend+1,f,c
  8247  001A7C  EC17  F01C         	call	___awdiv	;wreg free
  8248  001A80  0E09               	movlw	9
  8249  001A82  2429               	addwf	?___awdiv,w,c
  8250  001A84  6E31               	movwf	___wmul@multiplier,c
  8251  001A86  0E00               	movlw	0
  8252  001A88  202A               	addwfc	?___awdiv+1,w,c
  8253  001A8A  6E32               	movwf	___wmul@multiplier+1,c
  8254  001A8C  0E00               	movlw	0
  8255  001A8E  6E34               	movwf	___wmul@multiplicand+1,c
  8256  001A90  0E03               	movlw	3
  8257  001A92  6E33               	movwf	___wmul@multiplicand,c
  8258  001A94  EC5E  F020         	call	___wmul	;wreg free
  8259  001A98  0EE3               	movlw	low __npowers_
  8260  001A9A  2431               	addwf	?___wmul,w,c
  8261  001A9C  6EF6               	movwf	tblptrl,c
  8262  001A9E  0EFD               	movlw	high __npowers_
  8263  001AA0  2032               	addwfc	?___wmul+1,w,c
  8264  001AA2  6EF7               	movwf	tblptrh,c
  8265  001AA4                     	if	0	;There are less than 3 active tblptr bytes
  8266  001AA4                     	endif
  8267  001AA4  0009               	tblrd		*+
  8268  001AA6  CFF5 F089          	movff	tablat,___ftmul@f1
  8269  001AAA  0009               	tblrd		*+
  8270  001AAC  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8271  001AB0  000A               	tblrd		*-
  8272  001AB2  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8273  001AB6  0E00               	movlw	0
  8274  001AB8  6E34               	movwf	___wmul@multiplicand+1,c
  8275  001ABA  0E03               	movlw	3
  8276  001ABC  6E33               	movwf	___wmul@multiplicand,c
  8277  001ABE  0E00               	movlw	0
  8278  001AC0  6E26               	movwf	___awmod@divisor+1,c
  8279  001AC2  0E0A               	movlw	10
  8280  001AC4  6E25               	movwf	___awmod@divisor,c
  8281  001AC6  0100               	movlb	0	; () banked
  8282  001AC8  519E               	movf	scale@scl& (0+255),w,b
  8283  001ACA  6E23               	movwf	___awmod@dividend,c
  8284  001ACC  6A24               	clrf	___awmod@dividend+1,c
  8285  001ACE  BE23               	btfsc	___awmod@dividend,7,c
  8286  001AD0  0624               	decf	___awmod@dividend+1,f,c
  8287  001AD2  EC17  F01D         	call	___awmod	;wreg free
  8288  001AD6  C023  F031         	movff	?___awmod,___wmul@multiplier
  8289  001ADA  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  8290  001ADE  EC5E  F020         	call	___wmul	;wreg free
  8291  001AE2  0EE3               	movlw	low __npowers_
  8292  001AE4  2431               	addwf	?___wmul,w,c
  8293  001AE6  6EF6               	movwf	tblptrl,c
  8294  001AE8  0EFD               	movlw	high __npowers_
  8295  001AEA  2032               	addwfc	?___wmul+1,w,c
  8296  001AEC  6EF7               	movwf	tblptrh,c
  8297  001AEE                     	if	0	;There are less than 3 active tblptr bytes
  8298  001AEE                     	endif
  8299  001AEE  0009               	tblrd		*+
  8300  001AF0  CFF5 F08C          	movff	tablat,___ftmul@f2
  8301  001AF4  0009               	tblrd		*+
  8302  001AF6  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8303  001AFA  000A               	tblrd		*-
  8304  001AFC  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8305  001B00  ECB8  F011         	call	___ftmul	;wreg free
  8306  001B04  D7A4               	goto	L4
  8307  001B06                     l6375:
  8308                           
  8309                           ;doprnt.c: 434: return _npowers_[scl];
  8310  001B06  0100               	movlb	0	; () banked
  8311  001B08  519E               	movf	scale@scl& (0+255),w,b
  8312  001B0A  0D03               	mullw	3
  8313  001B0C  0EE3               	movlw	low __npowers_
  8314  001B0E  24F3               	addwf	prodl,w,c
  8315  001B10  6EF6               	movwf	tblptrl,c
  8316  001B12  0EFD               	movlw	high __npowers_
  8317  001B14  20F4               	addwfc	prodh,w,c
  8318  001B16  6EF7               	movwf	tblptrh,c
  8319  001B18                     	if	0	;There are less than 3 active tblptr bytes
  8320  001B18                     	endif
  8321  001B18  0009               	tblrd		*+
  8322  001B1A  CFF5 F098          	movff	tablat,?_scale
  8323  001B1E  0009               	tblrd		*+
  8324  001B20  CFF5 F099          	movff	tablat,?_scale+1
  8325  001B24  000A               	tblrd		*-
  8326  001B26  CFF5 F09A          	movff	tablat,?_scale+2
  8327                           
  8328                           ; BSR set to: 0
  8329  001B2A  0012               	return	
  8330  001B2C                     l6379:
  8331                           
  8332                           ; BSR set to: 0
  8333                           ;doprnt.c: 435: }
  8334                           ;doprnt.c: 436: if(scl>=110)
  8335  001B2C  0100               	movlb	0	; () banked
  8336  001B2E  519E               	movf	scale@scl& (0+255),w,b
  8337  001B30  0A80               	xorlw	128
  8338  001B32  0F12               	addlw	-238
  8339  001B34  A0D8               	btfss	status,0,c
  8340  001B36  D094               	goto	l6387
  8341                           
  8342                           ; BSR set to: 0
  8343                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8344  001B38  0E00               	movlw	0
  8345  001B3A  6E34               	movwf	___wmul@multiplicand+1,c
  8346  001B3C  0E03               	movlw	3
  8347  001B3E  6E33               	movwf	___wmul@multiplicand,c
  8348  001B40  0E00               	movlw	0
  8349  001B42  6E2C               	movwf	___awdiv@divisor+1,c
  8350  001B44  0E0A               	movlw	10
  8351  001B46  6E2B               	movwf	___awdiv@divisor,c
  8352  001B48  0E00               	movlw	0
  8353  001B4A  6E26               	movwf	___awmod@divisor+1,c
  8354  001B4C  0E64               	movlw	100
  8355  001B4E  6E25               	movwf	___awmod@divisor,c
  8356  001B50  0100               	movlb	0	; () banked
  8357  001B52  519E               	movf	scale@scl& (0+255),w,b
  8358  001B54  6E23               	movwf	___awmod@dividend,c
  8359  001B56  6A24               	clrf	___awmod@dividend+1,c
  8360  001B58  BE23               	btfsc	___awmod@dividend,7,c
  8361  001B5A  0624               	decf	___awmod@dividend+1,f,c
  8362  001B5C  EC17  F01D         	call	___awmod	;wreg free
  8363  001B60  C023  F029         	movff	?___awmod,___awdiv@dividend
  8364  001B64  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  8365  001B68  EC17  F01C         	call	___awdiv	;wreg free
  8366  001B6C  0E09               	movlw	9
  8367  001B6E  2429               	addwf	?___awdiv,w,c
  8368  001B70  6E31               	movwf	___wmul@multiplier,c
  8369  001B72  0E00               	movlw	0
  8370  001B74  202A               	addwfc	?___awdiv+1,w,c
  8371  001B76  6E32               	movwf	___wmul@multiplier+1,c
  8372  001B78  EC5E  F020         	call	___wmul	;wreg free
  8373  001B7C  0E0A               	movlw	low __powers_
  8374  001B7E  2431               	addwf	?___wmul,w,c
  8375  001B80  6EF6               	movwf	tblptrl,c
  8376  001B82  0EFE               	movlw	high __powers_
  8377  001B84  2032               	addwfc	?___wmul+1,w,c
  8378  001B86  6EF7               	movwf	tblptrh,c
  8379  001B88                     	if	0	;There are less than 3 active tblptr bytes
  8380  001B88                     	endif
  8381  001B88  0009               	tblrd		*+
  8382  001B8A  CFF5 F08C          	movff	tablat,___ftmul@f2
  8383  001B8E  0009               	tblrd		*+
  8384  001B90  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8385  001B94  000A               	tblrd		*-
  8386  001B96  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8387  001B9A  0E00               	movlw	0
  8388  001B9C  6E2C               	movwf	___awdiv@divisor+1,c
  8389  001B9E  0E64               	movlw	100
  8390  001BA0  6E2B               	movwf	___awdiv@divisor,c
  8391  001BA2  0100               	movlb	0	; () banked
  8392  001BA4  519E               	movf	scale@scl& (0+255),w,b
  8393  001BA6  6E29               	movwf	___awdiv@dividend,c
  8394  001BA8  6A2A               	clrf	___awdiv@dividend+1,c
  8395  001BAA  BE29               	btfsc	___awdiv@dividend,7,c
  8396  001BAC  062A               	decf	___awdiv@dividend+1,f,c
  8397  001BAE  EC17  F01C         	call	___awdiv	;wreg free
  8398  001BB2  0E12               	movlw	18
  8399  001BB4  2429               	addwf	?___awdiv,w,c
  8400  001BB6  6E31               	movwf	___wmul@multiplier,c
  8401  001BB8  0E00               	movlw	0
  8402  001BBA  202A               	addwfc	?___awdiv+1,w,c
  8403  001BBC  6E32               	movwf	___wmul@multiplier+1,c
  8404  001BBE  0E00               	movlw	0
  8405  001BC0  6E34               	movwf	___wmul@multiplicand+1,c
  8406  001BC2  0E03               	movlw	3
  8407  001BC4  6E33               	movwf	___wmul@multiplicand,c
  8408  001BC6  EC5E  F020         	call	___wmul	;wreg free
  8409  001BCA  0E0A               	movlw	low __powers_
  8410  001BCC  2431               	addwf	?___wmul,w,c
  8411  001BCE  6EF6               	movwf	tblptrl,c
  8412  001BD0  0EFE               	movlw	high __powers_
  8413  001BD2  2032               	addwfc	?___wmul+1,w,c
  8414  001BD4  6EF7               	movwf	tblptrh,c
  8415  001BD6                     	if	0	;There are less than 3 active tblptr bytes
  8416  001BD6                     	endif
  8417  001BD6  0009               	tblrd		*+
  8418  001BD8  CFF5 F089          	movff	tablat,___ftmul@f1
  8419  001BDC  0009               	tblrd		*+
  8420  001BDE  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8421  001BE2  000A               	tblrd		*-
  8422  001BE4  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8423  001BE8  ECB8  F011         	call	___ftmul	;wreg free
  8424  001BEC  C089  F09B         	movff	?___ftmul,_scale$1423
  8425  001BF0  C08A  F09C         	movff	?___ftmul+1,_scale$1423+1
  8426  001BF4  C08B  F09D         	movff	?___ftmul+2,_scale$1423+2
  8427                           
  8428                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8429  001BF8  C09B  F089         	movff	_scale$1423,___ftmul@f1
  8430  001BFC  C09C  F08A         	movff	_scale$1423+1,___ftmul@f1+1
  8431  001C00  C09D  F08B         	movff	_scale$1423+2,___ftmul@f1+2
  8432  001C04  0E00               	movlw	0
  8433  001C06  6E34               	movwf	___wmul@multiplicand+1,c
  8434  001C08  0E03               	movlw	3
  8435  001C0A  6E33               	movwf	___wmul@multiplicand,c
  8436  001C0C  0E00               	movlw	0
  8437  001C0E  6E26               	movwf	___awmod@divisor+1,c
  8438  001C10  0E0A               	movlw	10
  8439  001C12  6E25               	movwf	___awmod@divisor,c
  8440  001C14  0100               	movlb	0	; () banked
  8441  001C16  519E               	movf	scale@scl& (0+255),w,b
  8442  001C18  6E23               	movwf	___awmod@dividend,c
  8443  001C1A  6A24               	clrf	___awmod@dividend+1,c
  8444  001C1C  BE23               	btfsc	___awmod@dividend,7,c
  8445  001C1E  0624               	decf	___awmod@dividend+1,f,c
  8446  001C20  EC17  F01D         	call	___awmod	;wreg free
  8447  001C24  C023  F031         	movff	?___awmod,___wmul@multiplier
  8448  001C28  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  8449  001C2C  EC5E  F020         	call	___wmul	;wreg free
  8450  001C30  0E0A               	movlw	low __powers_
  8451  001C32  2431               	addwf	?___wmul,w,c
  8452  001C34  6EF6               	movwf	tblptrl,c
  8453  001C36  0EFE               	movlw	high __powers_
  8454  001C38  2032               	addwfc	?___wmul+1,w,c
  8455  001C3A  6EF7               	movwf	tblptrh,c
  8456  001C3C                     	if	0	;There are less than 3 active tblptr bytes
  8457  001C3C                     	endif
  8458  001C3C  0009               	tblrd		*+
  8459  001C3E  CFF5 F08C          	movff	tablat,___ftmul@f2
  8460  001C42  0009               	tblrd		*+
  8461  001C44  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8462  001C48  000A               	tblrd		*-
  8463  001C4A  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8464  001C4E  ECB8  F011         	call	___ftmul	;wreg free
  8465  001C52  C089  F098         	movff	?___ftmul,?_scale
  8466  001C56  C08A  F099         	movff	?___ftmul+1,?_scale+1
  8467  001C5A  C08B  F09A         	movff	?___ftmul+2,?_scale+2
  8468  001C5E  0012               	return	
  8469  001C60                     l6387:
  8470                           
  8471                           ;doprnt.c: 438: else if(scl > 10)
  8472  001C60  0100               	movlb	0	; () banked
  8473  001C62  519E               	movf	scale@scl& (0+255),w,b
  8474  001C64  0A80               	xorlw	128
  8475  001C66  0F75               	addlw	-139
  8476  001C68  A0D8               	btfss	status,0,c
  8477  001C6A  D04F               	goto	l6393
  8478                           
  8479                           ; BSR set to: 0
  8480                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  8481  001C6C  0E00               	movlw	0
  8482  001C6E  6E2C               	movwf	___awdiv@divisor+1,c
  8483  001C70  0E0A               	movlw	10
  8484  001C72  6E2B               	movwf	___awdiv@divisor,c
  8485  001C74  0100               	movlb	0	; () banked
  8486  001C76  519E               	movf	scale@scl& (0+255),w,b
  8487  001C78  6E29               	movwf	___awdiv@dividend,c
  8488  001C7A  6A2A               	clrf	___awdiv@dividend+1,c
  8489  001C7C  BE29               	btfsc	___awdiv@dividend,7,c
  8490  001C7E  062A               	decf	___awdiv@dividend+1,f,c
  8491  001C80  EC17  F01C         	call	___awdiv	;wreg free
  8492  001C84  0E09               	movlw	9
  8493  001C86  2429               	addwf	?___awdiv,w,c
  8494  001C88  6E31               	movwf	___wmul@multiplier,c
  8495  001C8A  0E00               	movlw	0
  8496  001C8C  202A               	addwfc	?___awdiv+1,w,c
  8497  001C8E  6E32               	movwf	___wmul@multiplier+1,c
  8498  001C90  0E00               	movlw	0
  8499  001C92  6E34               	movwf	___wmul@multiplicand+1,c
  8500  001C94  0E03               	movlw	3
  8501  001C96  6E33               	movwf	___wmul@multiplicand,c
  8502  001C98  EC5E  F020         	call	___wmul	;wreg free
  8503  001C9C  0E0A               	movlw	low __powers_
  8504  001C9E  2431               	addwf	?___wmul,w,c
  8505  001CA0  6EF6               	movwf	tblptrl,c
  8506  001CA2  0EFE               	movlw	high __powers_
  8507  001CA4  2032               	addwfc	?___wmul+1,w,c
  8508  001CA6  6EF7               	movwf	tblptrh,c
  8509  001CA8                     	if	0	;There are less than 3 active tblptr bytes
  8510  001CA8                     	endif
  8511  001CA8  0009               	tblrd		*+
  8512  001CAA  CFF5 F089          	movff	tablat,___ftmul@f1
  8513  001CAE  0009               	tblrd		*+
  8514  001CB0  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8515  001CB4  000A               	tblrd		*-
  8516  001CB6  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8517  001CBA  0E00               	movlw	0
  8518  001CBC  6E34               	movwf	___wmul@multiplicand+1,c
  8519  001CBE  0E03               	movlw	3
  8520  001CC0  6E33               	movwf	___wmul@multiplicand,c
  8521  001CC2  0E00               	movlw	0
  8522  001CC4  6E26               	movwf	___awmod@divisor+1,c
  8523  001CC6  0E0A               	movlw	10
  8524  001CC8  6E25               	movwf	___awmod@divisor,c
  8525  001CCA  0100               	movlb	0	; () banked
  8526  001CCC  519E               	movf	scale@scl& (0+255),w,b
  8527  001CCE  6E23               	movwf	___awmod@dividend,c
  8528  001CD0  6A24               	clrf	___awmod@dividend+1,c
  8529  001CD2  BE23               	btfsc	___awmod@dividend,7,c
  8530  001CD4  0624               	decf	___awmod@dividend+1,f,c
  8531  001CD6  EC17  F01D         	call	___awmod	;wreg free
  8532  001CDA  C023  F031         	movff	?___awmod,___wmul@multiplier
  8533  001CDE  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  8534  001CE2  EC5E  F020         	call	___wmul	;wreg free
  8535  001CE6  0E0A               	movlw	low __powers_
  8536  001CE8  2431               	addwf	?___wmul,w,c
  8537  001CEA  6EF6               	movwf	tblptrl,c
  8538  001CEC  0EFE               	movlw	high __powers_
  8539  001CEE  2032               	addwfc	?___wmul+1,w,c
  8540  001CF0  6EF7               	movwf	tblptrh,c
  8541  001CF2                     	if	0	;There are less than 3 active tblptr bytes
  8542  001CF2                     	endif
  8543  001CF2  0009               	tblrd		*+
  8544  001CF4  CFF5 F08C          	movff	tablat,___ftmul@f2
  8545  001CF8  0009               	tblrd		*+
  8546  001CFA  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8547  001CFE  000A               	tblrd		*-
  8548  001D00  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8549  001D04  ECB8  F011         	call	___ftmul	;wreg free
  8550  001D08  D7A4               	goto	L5
  8551  001D0A                     l6393:
  8552                           
  8553                           ;doprnt.c: 440: return _powers_[scl];
  8554  001D0A  0100               	movlb	0	; () banked
  8555  001D0C  519E               	movf	scale@scl& (0+255),w,b
  8556  001D0E  0D03               	mullw	3
  8557  001D10  0E0A               	movlw	low __powers_
  8558  001D12  24F3               	addwf	prodl,w,c
  8559  001D14  6EF6               	movwf	tblptrl,c
  8560  001D16  0EFE               	movlw	high __powers_
  8561  001D18  20F4               	addwfc	prodh,w,c
  8562  001D1A  6EF7               	movwf	tblptrh,c
  8563  001D1C                     	if	0	;There are less than 3 active tblptr bytes
  8564  001D1C                     	endif
  8565  001D1C  0009               	tblrd		*+
  8566  001D1E  CFF5 F098          	movff	tablat,?_scale
  8567  001D22  0009               	tblrd		*+
  8568  001D24  CFF5 F099          	movff	tablat,?_scale+1
  8569  001D28  000A               	tblrd		*-
  8570  001D2A  CFF5 F09A          	movff	tablat,?_scale+2
  8571  001D2E  0012               	return	
  8572  001D30                     __end_of_scale:
  8573                           	opt stack 0
  8574                           tblptru	equ	0xFF8
  8575                           tblptrh	equ	0xFF7
  8576                           tblptrl	equ	0xFF6
  8577                           tablat	equ	0xFF5
  8578                           prodh	equ	0xFF4
  8579                           prodl	equ	0xFF3
  8580                           postinc0	equ	0xFEE
  8581                           wreg	equ	0xFE8
  8582                           postdec1	equ	0xFE5
  8583                           fsr1l	equ	0xFE1
  8584                           indf2	equ	0xFDF
  8585                           postinc2	equ	0xFDE
  8586                           postdec2	equ	0xFDD
  8587                           fsr2h	equ	0xFDA
  8588                           fsr2l	equ	0xFD9
  8589                           status	equ	0xFD8
  8590                           
  8591 ;; *************** function _putch *****************
  8592 ;; Defined at:
  8593 ;;		line 35 in file "lcd.c"
  8594 ;; Parameters:    Size  Location     Type
  8595 ;;  data            1    wreg     unsigned char 
  8596 ;; Auto vars:     Size  Location     Type
  8597 ;;  data            1   38[COMRAM] unsigned char 
  8598 ;; Return value:  Size  Location     Type
  8599 ;;                  1    wreg      void 
  8600 ;; Registers used:
  8601 ;;		wreg, status,2, status,0, cstack
  8602 ;; Tracked objects:
  8603 ;;		On entry : 0/0
  8604 ;;		On exit  : 0/0
  8605 ;;		Unchanged: 0/0
  8606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8608 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8610 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8611 ;;Total ram usage:        1 bytes
  8612 ;; Hardware stack levels used:    1
  8613 ;; Hardware stack levels required when called:    6
  8614 ;; This function calls:
  8615 ;;		_lcdNewline
  8616 ;;		_lcdNibble
  8617 ;; This function is called by:
  8618 ;;		_printf
  8619 ;; This function uses a non-reentrant model
  8620 ;;
  8621                           
  8622                           	psect	text18
  8623  004106                     __ptext18:
  8624                           	opt stack 0
  8625  004106                     _putch:
  8626                           	opt stack 22
  8627                           
  8628                           ;incstack = 0
  8629                           ;putch@data stored from wreg
  8630  004106  6E27               	movwf	putch@data,c
  8631                           
  8632                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  8633  004108  0E0A               	movlw	10
  8634  00410A  1827               	xorwf	putch@data,w,c
  8635  00410C  A4D8               	btfss	status,2,c
  8636  00410E  D003               	goto	l233
  8637  004110  ECFC  F020         	call	_lcdNewline	;wreg free
  8638  004114  0012               	return	
  8639  004116                     l233:
  8640                           
  8641                           ;lcd.c: 37: else
  8642                           ;lcd.c: 38: {
  8643                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  8644  004116  848C               	bsf	3980,2,c	;volatile
  8645                           
  8646                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  8647  004118  0E74               	movlw	116
  8648  00411A                     u8217:
  8649  00411A  2EE8               	decfsz	wreg,f,c
  8650  00411C  D7FE               	bra	u8217
  8651  00411E  D000               	nop2	
  8652                           
  8653                           ;lcd.c: 41: lcdNibble(data);
  8654  004120  5027               	movf	putch@data,w,c
  8655  004122  ECBA  F01D         	call	_lcdNibble
  8656  004126  0012               	return	
  8657  004128                     __end_of_putch:
  8658                           	opt stack 0
  8659                           tblptru	equ	0xFF8
  8660                           tblptrh	equ	0xFF7
  8661                           tblptrl	equ	0xFF6
  8662                           tablat	equ	0xFF5
  8663                           prodh	equ	0xFF4
  8664                           prodl	equ	0xFF3
  8665                           postinc0	equ	0xFEE
  8666                           wreg	equ	0xFE8
  8667                           postdec1	equ	0xFE5
  8668                           fsr1l	equ	0xFE1
  8669                           indf2	equ	0xFDF
  8670                           postinc2	equ	0xFDE
  8671                           postdec2	equ	0xFDD
  8672                           fsr2h	equ	0xFDA
  8673                           fsr2l	equ	0xFD9
  8674                           status	equ	0xFD8
  8675                           
  8676 ;; *************** function _lcdNewline *****************
  8677 ;; Defined at:
  8678 ;;		line 78 in file "lcd.c"
  8679 ;; Parameters:    Size  Location     Type
  8680 ;;		None
  8681 ;; Auto vars:     Size  Location     Type
  8682 ;;		None
  8683 ;; Return value:  Size  Location     Type
  8684 ;;                  1    wreg      void 
  8685 ;; Registers used:
  8686 ;;		wreg, status,2, status,0, cstack
  8687 ;; Tracked objects:
  8688 ;;		On entry : 0/0
  8689 ;;		On exit  : 0/0
  8690 ;;		Unchanged: 0/0
  8691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8696 ;;Total ram usage:        0 bytes
  8697 ;; Hardware stack levels used:    1
  8698 ;; Hardware stack levels required when called:    5
  8699 ;; This function calls:
  8700 ;;		_lcdInst
  8701 ;; This function is called by:
  8702 ;;		_putch
  8703 ;; This function uses a non-reentrant model
  8704 ;;
  8705                           
  8706                           	psect	text19
  8707  0041F8                     __ptext19:
  8708                           	opt stack 0
  8709  0041F8                     _lcdNewline:
  8710                           	opt stack 22
  8711                           
  8712                           ;lcd.c: 79: lcdInst(0b11000000);
  8713                           
  8714                           ;incstack = 0
  8715  0041F8  0EC0               	movlw	192
  8716  0041FA  EC94  F020         	call	_lcdInst
  8717  0041FE  0012               	return		;funcret
  8718  004200                     __end_of_lcdNewline:
  8719                           	opt stack 0
  8720                           tblptru	equ	0xFF8
  8721                           tblptrh	equ	0xFF7
  8722                           tblptrl	equ	0xFF6
  8723                           tablat	equ	0xFF5
  8724                           prodh	equ	0xFF4
  8725                           prodl	equ	0xFF3
  8726                           postinc0	equ	0xFEE
  8727                           wreg	equ	0xFE8
  8728                           postdec1	equ	0xFE5
  8729                           fsr1l	equ	0xFE1
  8730                           indf2	equ	0xFDF
  8731                           postinc2	equ	0xFDE
  8732                           postdec2	equ	0xFDD
  8733                           fsr2h	equ	0xFDA
  8734                           fsr2l	equ	0xFD9
  8735                           status	equ	0xFD8
  8736                           
  8737 ;; *************** function _isdigit *****************
  8738 ;; Defined at:
  8739 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  8740 ;; Parameters:    Size  Location     Type
  8741 ;;  c               1    wreg     unsigned char 
  8742 ;; Auto vars:     Size  Location     Type
  8743 ;;  c               1   36[COMRAM] unsigned char 
  8744 ;; Return value:  Size  Location     Type
  8745 ;;		None               void
  8746 ;; Registers used:
  8747 ;;		wreg, status,2, status,0
  8748 ;; Tracked objects:
  8749 ;;		On entry : 0/0
  8750 ;;		On exit  : 0/0
  8751 ;;		Unchanged: 0/0
  8752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8754 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8755 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8756 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8757 ;;Total ram usage:        3 bytes
  8758 ;; Hardware stack levels used:    1
  8759 ;; Hardware stack levels required when called:    3
  8760 ;; This function calls:
  8761 ;;		Nothing
  8762 ;; This function is called by:
  8763 ;;		_printf
  8764 ;; This function uses a non-reentrant model
  8765 ;;
  8766                           
  8767                           	psect	text20
  8768  00416A                     __ptext20:
  8769                           	opt stack 0
  8770  00416A                     _isdigit:
  8771                           	opt stack 25
  8772                           
  8773                           ;incstack = 0
  8774                           ;isdigit@c stored from wreg
  8775  00416A  6E25               	movwf	isdigit@c,c
  8776  00416C  0E00               	movlw	0
  8777  00416E  6E24               	movwf	_isdigit$1053,c
  8778  004170  0E3A               	movlw	58
  8779  004172  6025               	cpfslt	isdigit@c,c
  8780  004174  D005               	goto	l6405
  8781  004176  0E2F               	movlw	47
  8782  004178  6425               	cpfsgt	isdigit@c,c
  8783  00417A  D002               	goto	l6405
  8784  00417C  0E01               	movlw	1
  8785  00417E  6E24               	movwf	_isdigit$1053,c
  8786  004180                     l6405:
  8787  004180  C024  F023         	movff	_isdigit$1053,??_isdigit
  8788  004184  3023               	rrcf	??_isdigit,w,c
  8789  004186  0012               	return	
  8790  004188                     __end_of_isdigit:
  8791                           	opt stack 0
  8792                           tblptru	equ	0xFF8
  8793                           tblptrh	equ	0xFF7
  8794                           tblptrl	equ	0xFF6
  8795                           tablat	equ	0xFF5
  8796                           prodh	equ	0xFF4
  8797                           prodl	equ	0xFF3
  8798                           postinc0	equ	0xFEE
  8799                           wreg	equ	0xFE8
  8800                           postdec1	equ	0xFE5
  8801                           fsr1l	equ	0xFE1
  8802                           indf2	equ	0xFDF
  8803                           postinc2	equ	0xFDE
  8804                           postdec2	equ	0xFDD
  8805                           fsr2h	equ	0xFDA
  8806                           fsr2l	equ	0xFD9
  8807                           status	equ	0xFD8
  8808                           
  8809 ;; *************** function _fround *****************
  8810 ;; Defined at:
  8811 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  8812 ;; Parameters:    Size  Location     Type
  8813 ;;  prec            1    wreg     unsigned char 
  8814 ;; Auto vars:     Size  Location     Type
  8815 ;;  prec            1   33[BANK0 ] unsigned char 
  8816 ;; Return value:  Size  Location     Type
  8817 ;;                  3   24[BANK0 ] unsigned char 
  8818 ;; Registers used:
  8819 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8820 ;; Tracked objects:
  8821 ;;		On entry : 0/0
  8822 ;;		On exit  : 0/0
  8823 ;;		Unchanged: 0/0
  8824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8825 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8826 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8828 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8829 ;;Total ram usage:       10 bytes
  8830 ;; Hardware stack levels used:    1
  8831 ;; Hardware stack levels required when called:    5
  8832 ;; This function calls:
  8833 ;;		___awdiv
  8834 ;;		___awmod
  8835 ;;		___ftmul
  8836 ;;		___wmul
  8837 ;; This function is called by:
  8838 ;;		_printf
  8839 ;; This function uses a non-reentrant model
  8840 ;;
  8841                           
  8842                           	psect	text21
  8843  001F98                     __ptext21:
  8844                           	opt stack 0
  8845  001F98                     _fround:
  8846                           	opt stack 23
  8847                           
  8848                           ;incstack = 0
  8849                           ;fround@prec stored from wreg
  8850  001F98  0100               	movlb	0	; () banked
  8851  001F9A  6FA1               	movwf	fround@prec& (0+255),b
  8852                           
  8853                           ;doprnt.c: 413: if(prec>=110)
  8854  001F9C  0E6D               	movlw	109
  8855  001F9E  0100               	movlb	0	; () banked
  8856  001FA0  65A1               	cpfsgt	fround@prec& (0+255),b
  8857  001FA2  D0A2               	goto	l6347
  8858                           
  8859                           ; BSR set to: 0
  8860                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8861  001FA4  0E00               	movlw	0
  8862  001FA6  6E34               	movwf	___wmul@multiplicand+1,c
  8863  001FA8  0E03               	movlw	3
  8864  001FAA  6E33               	movwf	___wmul@multiplicand,c
  8865  001FAC  0E00               	movlw	0
  8866  001FAE  6E2C               	movwf	___awdiv@divisor+1,c
  8867  001FB0  0E0A               	movlw	10
  8868  001FB2  6E2B               	movwf	___awdiv@divisor,c
  8869  001FB4  0E00               	movlw	0
  8870  001FB6  6E26               	movwf	___awmod@divisor+1,c
  8871  001FB8  0E64               	movlw	100
  8872  001FBA  6E25               	movwf	___awmod@divisor,c
  8873  001FBC  C0A1  F023         	movff	fround@prec,___awmod@dividend
  8874  001FC0  6A24               	clrf	___awmod@dividend+1,c
  8875  001FC2  EC17  F01D         	call	___awmod	;wreg free
  8876  001FC6  C023  F029         	movff	?___awmod,___awdiv@dividend
  8877  001FCA  C024  F02A         	movff	?___awmod+1,___awdiv@dividend+1
  8878  001FCE  EC17  F01C         	call	___awdiv	;wreg free
  8879  001FD2  0E09               	movlw	9
  8880  001FD4  2429               	addwf	?___awdiv,w,c
  8881  001FD6  6E31               	movwf	___wmul@multiplier,c
  8882  001FD8  0E00               	movlw	0
  8883  001FDA  202A               	addwfc	?___awdiv+1,w,c
  8884  001FDC  6E32               	movwf	___wmul@multiplier+1,c
  8885  001FDE  EC5E  F020         	call	___wmul	;wreg free
  8886  001FE2  0EE3               	movlw	low __npowers_
  8887  001FE4  2431               	addwf	?___wmul,w,c
  8888  001FE6  6EF6               	movwf	tblptrl,c
  8889  001FE8  0EFD               	movlw	high __npowers_
  8890  001FEA  2032               	addwfc	?___wmul+1,w,c
  8891  001FEC  6EF7               	movwf	tblptrh,c
  8892  001FEE                     	if	0	;There are less than 3 active tblptr bytes
  8893  001FEE                     	endif
  8894  001FEE  0009               	tblrd		*+
  8895  001FF0  CFF5 F08C          	movff	tablat,___ftmul@f2
  8896  001FF4  0009               	tblrd		*+
  8897  001FF6  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8898  001FFA  000A               	tblrd		*-
  8899  001FFC  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8900  002000  0E00               	movlw	0
  8901  002002  6E2C               	movwf	___awdiv@divisor+1,c
  8902  002004  0E64               	movlw	100
  8903  002006  6E2B               	movwf	___awdiv@divisor,c
  8904  002008  C0A1  F029         	movff	fround@prec,___awdiv@dividend
  8905  00200C  6A2A               	clrf	___awdiv@dividend+1,c
  8906  00200E  EC17  F01C         	call	___awdiv	;wreg free
  8907  002012  0E12               	movlw	18
  8908  002014  2429               	addwf	?___awdiv,w,c
  8909  002016  6E31               	movwf	___wmul@multiplier,c
  8910  002018  0E00               	movlw	0
  8911  00201A  202A               	addwfc	?___awdiv+1,w,c
  8912  00201C  6E32               	movwf	___wmul@multiplier+1,c
  8913  00201E  0E00               	movlw	0
  8914  002020  6E34               	movwf	___wmul@multiplicand+1,c
  8915  002022  0E03               	movlw	3
  8916  002024  6E33               	movwf	___wmul@multiplicand,c
  8917  002026  EC5E  F020         	call	___wmul	;wreg free
  8918  00202A  0EE3               	movlw	low __npowers_
  8919  00202C  2431               	addwf	?___wmul,w,c
  8920  00202E  6EF6               	movwf	tblptrl,c
  8921  002030  0EFD               	movlw	high __npowers_
  8922  002032  2032               	addwfc	?___wmul+1,w,c
  8923  002034  6EF7               	movwf	tblptrh,c
  8924  002036                     	if	0	;There are less than 3 active tblptr bytes
  8925  002036                     	endif
  8926  002036  0009               	tblrd		*+
  8927  002038  CFF5 F089          	movff	tablat,___ftmul@f1
  8928  00203C  0009               	tblrd		*+
  8929  00203E  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  8930  002042  000A               	tblrd		*-
  8931  002044  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  8932  002048  ECB8  F011         	call	___ftmul	;wreg free
  8933  00204C  C089  F09E         	movff	?___ftmul,_fround$1421
  8934  002050  C08A  F09F         	movff	?___ftmul+1,_fround$1421+1
  8935  002054  C08B  F0A0         	movff	?___ftmul+2,_fround$1421+2
  8936                           
  8937                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8938  002058  0E00               	movlw	0
  8939  00205A  6E34               	movwf	___wmul@multiplicand+1,c
  8940  00205C  0E03               	movlw	3
  8941  00205E  6E33               	movwf	___wmul@multiplicand,c
  8942  002060  0E00               	movlw	0
  8943  002062  6E26               	movwf	___awmod@divisor+1,c
  8944  002064  0E0A               	movlw	10
  8945  002066  6E25               	movwf	___awmod@divisor,c
  8946  002068  C0A1  F023         	movff	fround@prec,___awmod@dividend
  8947  00206C  6A24               	clrf	___awmod@dividend+1,c
  8948  00206E  EC17  F01D         	call	___awmod	;wreg free
  8949  002072  C023  F031         	movff	?___awmod,___wmul@multiplier
  8950  002076  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  8951  00207A  EC5E  F020         	call	___wmul	;wreg free
  8952  00207E  0EE3               	movlw	low __npowers_
  8953  002080  2431               	addwf	?___wmul,w,c
  8954  002082  6EF6               	movwf	tblptrl,c
  8955  002084  0EFD               	movlw	high __npowers_
  8956  002086  2032               	addwfc	?___wmul+1,w,c
  8957  002088  6EF7               	movwf	tblptrh,c
  8958  00208A                     	if	0	;There are less than 3 active tblptr bytes
  8959  00208A                     	endif
  8960  00208A  0009               	tblrd		*+
  8961  00208C  CFF5 F08C          	movff	tablat,___ftmul@f2
  8962  002090  0009               	tblrd		*+
  8963  002092  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  8964  002096  000A               	tblrd		*-
  8965  002098  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  8966  00209C  C09E  F089         	movff	_fround$1421,___ftmul@f1
  8967  0020A0  C09F  F08A         	movff	_fround$1421+1,___ftmul@f1+1
  8968  0020A4  C0A0  F08B         	movff	_fround$1421+2,___ftmul@f1+2
  8969  0020A8  ECB8  F011         	call	___ftmul	;wreg free
  8970  0020AC  C089  F09B         	movff	?___ftmul,_fround$1422
  8971  0020B0  C08A  F09C         	movff	?___ftmul+1,_fround$1422+1
  8972  0020B4  C08B  F09D         	movff	?___ftmul+2,_fround$1422+2
  8973                           
  8974                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8975  0020B8  C09B  F089         	movff	_fround$1422,___ftmul@f1
  8976  0020BC  C09C  F08A         	movff	_fround$1422+1,___ftmul@f1+1
  8977  0020C0  C09D  F08B         	movff	_fround$1422+2,___ftmul@f1+2
  8978  0020C4  0E00               	movlw	0
  8979  0020C6  0100               	movlb	0	; () banked
  8980  0020C8  6F8C               	movwf	___ftmul@f2& (0+255),b
  8981  0020CA  0E00               	movlw	0
  8982  0020CC  0100               	movlb	0	; () banked
  8983  0020CE  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  8984  0020D0  0E3F               	movlw	63
  8985  0020D2  0100               	movlb	0	; () banked
  8986  0020D4  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  8987  0020D6  ECB8  F011         	call	___ftmul	;wreg free
  8988  0020DA  C089  F098         	movff	?___ftmul,?_fround
  8989  0020DE  C08A  F099         	movff	?___ftmul+1,?_fround+1
  8990  0020E2  C08B  F09A         	movff	?___ftmul+2,?_fround+2
  8991  0020E6  0012               	return	
  8992  0020E8                     l6347:
  8993                           
  8994                           ;doprnt.c: 415: else if(prec > 10)
  8995  0020E8  0E0A               	movlw	10
  8996  0020EA  0100               	movlb	0	; () banked
  8997  0020EC  65A1               	cpfsgt	fround@prec& (0+255),b
  8998  0020EE  D060               	goto	l6355
  8999                           
  9000                           ; BSR set to: 0
  9001                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9002  0020F0  0E00               	movlw	0
  9003  0020F2  6E34               	movwf	___wmul@multiplicand+1,c
  9004  0020F4  0E03               	movlw	3
  9005  0020F6  6E33               	movwf	___wmul@multiplicand,c
  9006  0020F8  0E00               	movlw	0
  9007  0020FA  6E26               	movwf	___awmod@divisor+1,c
  9008  0020FC  0E0A               	movlw	10
  9009  0020FE  6E25               	movwf	___awmod@divisor,c
  9010  002100  C0A1  F023         	movff	fround@prec,___awmod@dividend
  9011  002104  6A24               	clrf	___awmod@dividend+1,c
  9012  002106  EC17  F01D         	call	___awmod	;wreg free
  9013  00210A  C023  F031         	movff	?___awmod,___wmul@multiplier
  9014  00210E  C024  F032         	movff	?___awmod+1,___wmul@multiplier+1
  9015  002112  EC5E  F020         	call	___wmul	;wreg free
  9016  002116  0EE3               	movlw	low __npowers_
  9017  002118  2431               	addwf	?___wmul,w,c
  9018  00211A  6EF6               	movwf	tblptrl,c
  9019  00211C  0EFD               	movlw	high __npowers_
  9020  00211E  2032               	addwfc	?___wmul+1,w,c
  9021  002120  6EF7               	movwf	tblptrh,c
  9022  002122                     	if	0	;There are less than 3 active tblptr bytes
  9023  002122                     	endif
  9024  002122  0009               	tblrd		*+
  9025  002124  CFF5 F08C          	movff	tablat,___ftmul@f2
  9026  002128  0009               	tblrd		*+
  9027  00212A  CFF5 F08D          	movff	tablat,___ftmul@f2+1
  9028  00212E  000A               	tblrd		*-
  9029  002130  CFF5 F08E          	movff	tablat,___ftmul@f2+2
  9030  002134  0E00               	movlw	0
  9031  002136  6E2C               	movwf	___awdiv@divisor+1,c
  9032  002138  0E0A               	movlw	10
  9033  00213A  6E2B               	movwf	___awdiv@divisor,c
  9034  00213C  C0A1  F029         	movff	fround@prec,___awdiv@dividend
  9035  002140  6A2A               	clrf	___awdiv@dividend+1,c
  9036  002142  EC17  F01C         	call	___awdiv	;wreg free
  9037  002146  0E09               	movlw	9
  9038  002148  2429               	addwf	?___awdiv,w,c
  9039  00214A  6E31               	movwf	___wmul@multiplier,c
  9040  00214C  0E00               	movlw	0
  9041  00214E  202A               	addwfc	?___awdiv+1,w,c
  9042  002150  6E32               	movwf	___wmul@multiplier+1,c
  9043  002152  0E00               	movlw	0
  9044  002154  6E34               	movwf	___wmul@multiplicand+1,c
  9045  002156  0E03               	movlw	3
  9046  002158  6E33               	movwf	___wmul@multiplicand,c
  9047  00215A  EC5E  F020         	call	___wmul	;wreg free
  9048  00215E  0EE3               	movlw	low __npowers_
  9049  002160  2431               	addwf	?___wmul,w,c
  9050  002162  6EF6               	movwf	tblptrl,c
  9051  002164  0EFD               	movlw	high __npowers_
  9052  002166  2032               	addwfc	?___wmul+1,w,c
  9053  002168  6EF7               	movwf	tblptrh,c
  9054  00216A                     	if	0	;There are less than 3 active tblptr bytes
  9055  00216A                     	endif
  9056  00216A  0009               	tblrd		*+
  9057  00216C  CFF5 F089          	movff	tablat,___ftmul@f1
  9058  002170  0009               	tblrd		*+
  9059  002172  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  9060  002176  000A               	tblrd		*-
  9061  002178  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  9062  00217C  ECB8  F011         	call	___ftmul	;wreg free
  9063  002180  C089  F09E         	movff	?___ftmul,_fround$1421
  9064  002184  C08A  F09F         	movff	?___ftmul+1,_fround$1421+1
  9065  002188  C08B  F0A0         	movff	?___ftmul+2,_fround$1421+2
  9066                           
  9067                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9068  00218C  C09E  F089         	movff	_fround$1421,___ftmul@f1
  9069  002190  C09F  F08A         	movff	_fround$1421+1,___ftmul@f1+1
  9070  002194  C0A0  F08B         	movff	_fround$1421+2,___ftmul@f1+2
  9071  002198  0E00               	movlw	0
  9072  00219A  0100               	movlb	0	; () banked
  9073  00219C  6F8C               	movwf	___ftmul@f2& (0+255),b
  9074  00219E  0E00               	movlw	0
  9075  0021A0  0100               	movlb	0	; () banked
  9076  0021A2  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  9077  0021A4  0E3F               	movlw	63
  9078  0021A6  0100               	movlb	0	; () banked
  9079  0021A8  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  9080  0021AA  ECB8  F011         	call	___ftmul	;wreg free
  9081  0021AE  D795               	goto	L6
  9082  0021B0                     l6355:
  9083                           
  9084                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  9085  0021B0  0100               	movlb	0	; () banked
  9086  0021B2  51A1               	movf	fround@prec& (0+255),w,b
  9087  0021B4  0D03               	mullw	3
  9088  0021B6  0EE3               	movlw	low __npowers_
  9089  0021B8  24F3               	addwf	prodl,w,c
  9090  0021BA  6EF6               	movwf	tblptrl,c
  9091  0021BC  0EFD               	movlw	high __npowers_
  9092  0021BE  20F4               	addwfc	prodh,w,c
  9093  0021C0  6EF7               	movwf	tblptrh,c
  9094  0021C2                     	if	0	;There are less than 3 active tblptr bytes
  9095  0021C2                     	endif
  9096  0021C2  0009               	tblrd		*+
  9097  0021C4  CFF5 F089          	movff	tablat,___ftmul@f1
  9098  0021C8  0009               	tblrd		*+
  9099  0021CA  CFF5 F08A          	movff	tablat,___ftmul@f1+1
  9100  0021CE  000A               	tblrd		*-
  9101  0021D0  CFF5 F08B          	movff	tablat,___ftmul@f1+2
  9102  0021D4  0E00               	movlw	0
  9103  0021D6  0100               	movlb	0	; () banked
  9104  0021D8  6F8C               	movwf	___ftmul@f2& (0+255),b
  9105  0021DA  0E00               	movlw	0
  9106  0021DC  0100               	movlb	0	; () banked
  9107  0021DE  6F8D               	movwf	(___ftmul@f2+1)& (0+255),b
  9108  0021E0  0E3F               	movlw	63
  9109  0021E2  0100               	movlb	0	; () banked
  9110  0021E4  6F8E               	movwf	(___ftmul@f2+2)& (0+255),b
  9111  0021E6  ECB8  F011         	call	___ftmul	;wreg free
  9112  0021EA  C089  F098         	movff	?___ftmul,?_fround
  9113  0021EE  C08A  F099         	movff	?___ftmul+1,?_fround+1
  9114  0021F2  C08B  F09A         	movff	?___ftmul+2,?_fround+2
  9115  0021F6  0012               	return	
  9116  0021F8                     __end_of_fround:
  9117                           	opt stack 0
  9118                           tblptru	equ	0xFF8
  9119                           tblptrh	equ	0xFF7
  9120                           tblptrl	equ	0xFF6
  9121                           tablat	equ	0xFF5
  9122                           prodh	equ	0xFF4
  9123                           prodl	equ	0xFF3
  9124                           postinc0	equ	0xFEE
  9125                           wreg	equ	0xFE8
  9126                           postdec1	equ	0xFE5
  9127                           fsr1l	equ	0xFE1
  9128                           indf2	equ	0xFDF
  9129                           postinc2	equ	0xFDE
  9130                           postdec2	equ	0xFDD
  9131                           fsr2h	equ	0xFDA
  9132                           fsr2l	equ	0xFD9
  9133                           status	equ	0xFD8
  9134                           
  9135 ;; *************** function ___awmod *****************
  9136 ;; Defined at:
  9137 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9138 ;; Parameters:    Size  Location     Type
  9139 ;;  dividend        2   34[COMRAM] int 
  9140 ;;  divisor         2   36[COMRAM] int 
  9141 ;; Auto vars:     Size  Location     Type
  9142 ;;  sign            1   39[COMRAM] unsigned char 
  9143 ;;  counter         1   38[COMRAM] unsigned char 
  9144 ;; Return value:  Size  Location     Type
  9145 ;;                  2   34[COMRAM] int 
  9146 ;; Registers used:
  9147 ;;		wreg, status,2, status,0
  9148 ;; Tracked objects:
  9149 ;;		On entry : 0/0
  9150 ;;		On exit  : 0/0
  9151 ;;		Unchanged: 0/0
  9152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9153 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9154 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9156 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9157 ;;Total ram usage:        6 bytes
  9158 ;; Hardware stack levels used:    1
  9159 ;; Hardware stack levels required when called:    3
  9160 ;; This function calls:
  9161 ;;		Nothing
  9162 ;; This function is called by:
  9163 ;;		_fround
  9164 ;;		_scale
  9165 ;; This function uses a non-reentrant model
  9166 ;;
  9167                           
  9168                           	psect	text22
  9169  003A2E                     __ptext22:
  9170                           	opt stack 0
  9171  003A2E                     ___awmod:
  9172                           	opt stack 24
  9173                           
  9174                           ;incstack = 0
  9175  003A2E  0E00               	movlw	0
  9176  003A30  6E28               	movwf	___awmod@sign,c
  9177  003A32  AE24               	btfss	___awmod@dividend+1,7,c
  9178  003A34  D006               	goto	l6245
  9179  003A36  6C23               	negf	___awmod@dividend,c
  9180  003A38  1E24               	comf	___awmod@dividend+1,f,c
  9181  003A3A  B0D8               	btfsc	status,0,c
  9182  003A3C  2A24               	incf	___awmod@dividend+1,f,c
  9183  003A3E  0E01               	movlw	1
  9184  003A40  6E28               	movwf	___awmod@sign,c
  9185  003A42                     l6245:
  9186  003A42  AE26               	btfss	___awmod@divisor+1,7,c
  9187  003A44  D004               	goto	l6249
  9188  003A46  6C25               	negf	___awmod@divisor,c
  9189  003A48  1E26               	comf	___awmod@divisor+1,f,c
  9190  003A4A  B0D8               	btfsc	status,0,c
  9191  003A4C  2A26               	incf	___awmod@divisor+1,f,c
  9192  003A4E                     l6249:
  9193  003A4E  5025               	movf	___awmod@divisor,w,c
  9194  003A50  1026               	iorwf	___awmod@divisor+1,w,c
  9195  003A52  B4D8               	btfsc	status,2,c
  9196  003A54  D018               	goto	l6265
  9197  003A56  0E01               	movlw	1
  9198  003A58  6E27               	movwf	___awmod@counter,c
  9199  003A5A  D004               	goto	l6255
  9200  003A5C                     l6253:
  9201  003A5C  90D8               	bcf	status,0,c
  9202  003A5E  3625               	rlcf	___awmod@divisor,f,c
  9203  003A60  3626               	rlcf	___awmod@divisor+1,f,c
  9204  003A62  2A27               	incf	___awmod@counter,f,c
  9205  003A64                     l6255:
  9206  003A64  AE26               	btfss	___awmod@divisor+1,7,c
  9207  003A66  D7FA               	goto	l6253
  9208  003A68                     l6257:
  9209  003A68  5025               	movf	___awmod@divisor,w,c
  9210  003A6A  5C23               	subwf	___awmod@dividend,w,c
  9211  003A6C  5026               	movf	___awmod@divisor+1,w,c
  9212  003A6E  5824               	subwfb	___awmod@dividend+1,w,c
  9213  003A70  A0D8               	btfss	status,0,c
  9214  003A72  D004               	goto	l6261
  9215  003A74  5025               	movf	___awmod@divisor,w,c
  9216  003A76  5E23               	subwf	___awmod@dividend,f,c
  9217  003A78  5026               	movf	___awmod@divisor+1,w,c
  9218  003A7A  5A24               	subwfb	___awmod@dividend+1,f,c
  9219  003A7C                     l6261:
  9220  003A7C  90D8               	bcf	status,0,c
  9221  003A7E  3226               	rrcf	___awmod@divisor+1,f,c
  9222  003A80  3225               	rrcf	___awmod@divisor,f,c
  9223  003A82  2E27               	decfsz	___awmod@counter,f,c
  9224  003A84  D7F1               	goto	l6257
  9225  003A86                     l6265:
  9226  003A86  5028               	movf	___awmod@sign,w,c
  9227  003A88  B4D8               	btfsc	status,2,c
  9228  003A8A  D004               	goto	l6269
  9229  003A8C  6C23               	negf	___awmod@dividend,c
  9230  003A8E  1E24               	comf	___awmod@dividend+1,f,c
  9231  003A90  B0D8               	btfsc	status,0,c
  9232  003A92  2A24               	incf	___awmod@dividend+1,f,c
  9233  003A94                     l6269:
  9234  003A94  C023  F023         	movff	___awmod@dividend,?___awmod
  9235  003A98  C024  F024         	movff	___awmod@dividend+1,?___awmod+1
  9236  003A9C  0012               	return	
  9237  003A9E                     __end_of___awmod:
  9238                           	opt stack 0
  9239                           tblptru	equ	0xFF8
  9240                           tblptrh	equ	0xFF7
  9241                           tblptrl	equ	0xFF6
  9242                           tablat	equ	0xFF5
  9243                           prodh	equ	0xFF4
  9244                           prodl	equ	0xFF3
  9245                           postinc0	equ	0xFEE
  9246                           wreg	equ	0xFE8
  9247                           postdec1	equ	0xFE5
  9248                           fsr1l	equ	0xFE1
  9249                           indf2	equ	0xFDF
  9250                           postinc2	equ	0xFDE
  9251                           postdec2	equ	0xFDD
  9252                           fsr2h	equ	0xFDA
  9253                           fsr2l	equ	0xFD9
  9254                           status	equ	0xFD8
  9255                           
  9256 ;; *************** function ___awdiv *****************
  9257 ;; Defined at:
  9258 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9259 ;; Parameters:    Size  Location     Type
  9260 ;;  dividend        2   40[COMRAM] int 
  9261 ;;  divisor         2   42[COMRAM] int 
  9262 ;; Auto vars:     Size  Location     Type
  9263 ;;  quotient        2   46[COMRAM] int 
  9264 ;;  sign            1   45[COMRAM] unsigned char 
  9265 ;;  counter         1   44[COMRAM] unsigned char 
  9266 ;; Return value:  Size  Location     Type
  9267 ;;                  2   40[COMRAM] int 
  9268 ;; Registers used:
  9269 ;;		wreg, status,2, status,0
  9270 ;; Tracked objects:
  9271 ;;		On entry : 0/0
  9272 ;;		On exit  : 0/0
  9273 ;;		Unchanged: 0/0
  9274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9275 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9276 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9278 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9279 ;;Total ram usage:        8 bytes
  9280 ;; Hardware stack levels used:    1
  9281 ;; Hardware stack levels required when called:    3
  9282 ;; This function calls:
  9283 ;;		Nothing
  9284 ;; This function is called by:
  9285 ;;		_fround
  9286 ;;		_scale
  9287 ;;		_printf
  9288 ;; This function uses a non-reentrant model
  9289 ;;
  9290                           
  9291                           	psect	text23
  9292  00382E                     __ptext23:
  9293                           	opt stack 0
  9294  00382E                     ___awdiv:
  9295                           	opt stack 24
  9296                           
  9297                           ;incstack = 0
  9298  00382E  0E00               	movlw	0
  9299  003830  6E2E               	movwf	___awdiv@sign,c
  9300  003832  AE2C               	btfss	___awdiv@divisor+1,7,c
  9301  003834  D006               	goto	l6201
  9302  003836  6C2B               	negf	___awdiv@divisor,c
  9303  003838  1E2C               	comf	___awdiv@divisor+1,f,c
  9304  00383A  B0D8               	btfsc	status,0,c
  9305  00383C  2A2C               	incf	___awdiv@divisor+1,f,c
  9306  00383E  0E01               	movlw	1
  9307  003840  6E2E               	movwf	___awdiv@sign,c
  9308  003842                     l6201:
  9309  003842  AE2A               	btfss	___awdiv@dividend+1,7,c
  9310  003844  D006               	goto	l6207
  9311  003846  6C29               	negf	___awdiv@dividend,c
  9312  003848  1E2A               	comf	___awdiv@dividend+1,f,c
  9313  00384A  B0D8               	btfsc	status,0,c
  9314  00384C  2A2A               	incf	___awdiv@dividend+1,f,c
  9315  00384E  0E01               	movlw	1
  9316  003850  1A2E               	xorwf	___awdiv@sign,f,c
  9317  003852                     l6207:
  9318  003852  0E00               	movlw	0
  9319  003854  6E30               	movwf	___awdiv@quotient+1,c
  9320  003856  0E00               	movlw	0
  9321  003858  6E2F               	movwf	___awdiv@quotient,c
  9322  00385A  502B               	movf	___awdiv@divisor,w,c
  9323  00385C  102C               	iorwf	___awdiv@divisor+1,w,c
  9324  00385E  B4D8               	btfsc	status,2,c
  9325  003860  D01C               	goto	l6229
  9326  003862  0E01               	movlw	1
  9327  003864  6E2D               	movwf	___awdiv@counter,c
  9328  003866  D004               	goto	l6215
  9329  003868                     l6213:
  9330  003868  90D8               	bcf	status,0,c
  9331  00386A  362B               	rlcf	___awdiv@divisor,f,c
  9332  00386C  362C               	rlcf	___awdiv@divisor+1,f,c
  9333  00386E  2A2D               	incf	___awdiv@counter,f,c
  9334  003870                     l6215:
  9335  003870  AE2C               	btfss	___awdiv@divisor+1,7,c
  9336  003872  D7FA               	goto	l6213
  9337  003874                     l6217:
  9338  003874  90D8               	bcf	status,0,c
  9339  003876  362F               	rlcf	___awdiv@quotient,f,c
  9340  003878  3630               	rlcf	___awdiv@quotient+1,f,c
  9341  00387A  502B               	movf	___awdiv@divisor,w,c
  9342  00387C  5C29               	subwf	___awdiv@dividend,w,c
  9343  00387E  502C               	movf	___awdiv@divisor+1,w,c
  9344  003880  582A               	subwfb	___awdiv@dividend+1,w,c
  9345  003882  A0D8               	btfss	status,0,c
  9346  003884  D005               	goto	l6225
  9347  003886  502B               	movf	___awdiv@divisor,w,c
  9348  003888  5E29               	subwf	___awdiv@dividend,f,c
  9349  00388A  502C               	movf	___awdiv@divisor+1,w,c
  9350  00388C  5A2A               	subwfb	___awdiv@dividend+1,f,c
  9351  00388E  802F               	bsf	___awdiv@quotient,0,c
  9352  003890                     l6225:
  9353  003890  90D8               	bcf	status,0,c
  9354  003892  322C               	rrcf	___awdiv@divisor+1,f,c
  9355  003894  322B               	rrcf	___awdiv@divisor,f,c
  9356  003896  2E2D               	decfsz	___awdiv@counter,f,c
  9357  003898  D7ED               	goto	l6217
  9358  00389A                     l6229:
  9359  00389A  502E               	movf	___awdiv@sign,w,c
  9360  00389C  B4D8               	btfsc	status,2,c
  9361  00389E  D004               	goto	l6233
  9362  0038A0  6C2F               	negf	___awdiv@quotient,c
  9363  0038A2  1E30               	comf	___awdiv@quotient+1,f,c
  9364  0038A4  B0D8               	btfsc	status,0,c
  9365  0038A6  2A30               	incf	___awdiv@quotient+1,f,c
  9366  0038A8                     l6233:
  9367  0038A8  C02F  F029         	movff	___awdiv@quotient,?___awdiv
  9368  0038AC  C030  F02A         	movff	___awdiv@quotient+1,?___awdiv+1
  9369  0038B0  0012               	return	
  9370  0038B2                     __end_of___awdiv:
  9371                           	opt stack 0
  9372                           tblptru	equ	0xFF8
  9373                           tblptrh	equ	0xFF7
  9374                           tblptrl	equ	0xFF6
  9375                           tablat	equ	0xFF5
  9376                           prodh	equ	0xFF4
  9377                           prodl	equ	0xFF3
  9378                           postinc0	equ	0xFEE
  9379                           wreg	equ	0xFE8
  9380                           postdec1	equ	0xFE5
  9381                           fsr1l	equ	0xFE1
  9382                           indf2	equ	0xFDF
  9383                           postinc2	equ	0xFDE
  9384                           postdec2	equ	0xFDD
  9385                           fsr2h	equ	0xFDA
  9386                           fsr2l	equ	0xFD9
  9387                           status	equ	0xFD8
  9388                           
  9389 ;; *************** function __tdiv_to_l_ *****************
  9390 ;; Defined at:
  9391 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  9392 ;; Parameters:    Size  Location     Type
  9393 ;;  f1              3   34[COMRAM] float 
  9394 ;;  f2              3   37[COMRAM] float 
  9395 ;; Auto vars:     Size  Location     Type
  9396 ;;  quot            4   43[COMRAM] unsigned long 
  9397 ;;  exp1            1   48[COMRAM] unsigned char 
  9398 ;;  cntr            1   47[COMRAM] unsigned char 
  9399 ;; Return value:  Size  Location     Type
  9400 ;;                  4   34[COMRAM] unsigned long 
  9401 ;; Registers used:
  9402 ;;		wreg, status,2, status,0
  9403 ;; Tracked objects:
  9404 ;;		On entry : 0/0
  9405 ;;		On exit  : 0/0
  9406 ;;		Unchanged: 0/0
  9407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9408 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9409 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9410 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9411 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9412 ;;Total ram usage:       15 bytes
  9413 ;; Hardware stack levels used:    1
  9414 ;; Hardware stack levels required when called:    3
  9415 ;; This function calls:
  9416 ;;		Nothing
  9417 ;; This function is called by:
  9418 ;;		_printf
  9419 ;; This function uses a non-reentrant model
  9420 ;;
  9421                           
  9422                           	psect	text24
  9423  00276A                     __ptext24:
  9424                           	opt stack 0
  9425  00276A                     __tdiv_to_l_:
  9426                           	opt stack 25
  9427                           
  9428                           ;incstack = 0
  9429  00276A  C025  F029         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  9430  00276E  6A2A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  9431  002770  6A2B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  9432  002772  3424               	rlcf	__tdiv_to_l_@f1+1,w,c
  9433  002774  3629               	rlcf	??__tdiv_to_l_& (0+255),f,c
  9434  002776  E301               	bnc	u6231
  9435  002778  802A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  9436  00277A                     u6231:
  9437  00277A  5029               	movf	??__tdiv_to_l_,w,c
  9438  00277C  6E31               	movwf	__tdiv_to_l_@exp1,c
  9439  00277E  5031               	movf	__tdiv_to_l_@exp1,w,c
  9440  002780  A4D8               	btfss	status,2,c
  9441  002782  D009               	goto	l6415
  9442  002784  0E00               	movlw	0
  9443  002786  6E23               	movwf	?__tdiv_to_l_,c
  9444  002788  0E00               	movlw	0
  9445  00278A  6E24               	movwf	?__tdiv_to_l_+1,c
  9446  00278C  0E00               	movlw	0
  9447  00278E  6E25               	movwf	?__tdiv_to_l_+2,c
  9448  002790  0E00               	movlw	0
  9449  002792  6E26               	movwf	?__tdiv_to_l_+3,c
  9450  002794  0012               	return	
  9451  002796                     l6415:
  9452  002796  C028  F029         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  9453  00279A  6A2A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  9454  00279C  6A2B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  9455  00279E  3427               	rlcf	__tdiv_to_l_@f2+1,w,c
  9456  0027A0  3629               	rlcf	??__tdiv_to_l_& (0+255),f,c
  9457  0027A2  E301               	bnc	u6251
  9458  0027A4  802A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  9459  0027A6                     u6251:
  9460  0027A6  5029               	movf	??__tdiv_to_l_,w,c
  9461  0027A8  6E30               	movwf	__tdiv_to_l_@cntr,c
  9462  0027AA  5030               	movf	__tdiv_to_l_@cntr,w,c
  9463  0027AC  A4D8               	btfss	status,2,c
  9464  0027AE  D009               	goto	l6421
  9465  0027B0  0E00               	movlw	0
  9466  0027B2  6E23               	movwf	?__tdiv_to_l_,c
  9467  0027B4  0E00               	movlw	0
  9468  0027B6  6E24               	movwf	?__tdiv_to_l_+1,c
  9469  0027B8  0E00               	movlw	0
  9470  0027BA  6E25               	movwf	?__tdiv_to_l_+2,c
  9471  0027BC  0E00               	movlw	0
  9472  0027BE  6E26               	movwf	?__tdiv_to_l_+3,c
  9473  0027C0  0012               	return	
  9474  0027C2                     l6421:
  9475  0027C2  8E24               	bsf	__tdiv_to_l_@f1+1,7,c
  9476  0027C4  0EFF               	movlw	255
  9477  0027C6  1623               	andwf	__tdiv_to_l_@f1,f,c
  9478  0027C8  0EFF               	movlw	255
  9479  0027CA  1624               	andwf	__tdiv_to_l_@f1+1,f,c
  9480  0027CC  0E00               	movlw	0
  9481  0027CE  1625               	andwf	__tdiv_to_l_@f1+2,f,c
  9482  0027D0  8E27               	bsf	__tdiv_to_l_@f2+1,7,c
  9483  0027D2  0EFF               	movlw	255
  9484  0027D4  1626               	andwf	__tdiv_to_l_@f2,f,c
  9485  0027D6  0EFF               	movlw	255
  9486  0027D8  1627               	andwf	__tdiv_to_l_@f2+1,f,c
  9487  0027DA  0E00               	movlw	0
  9488  0027DC  1628               	andwf	__tdiv_to_l_@f2+2,f,c
  9489  0027DE  0E00               	movlw	0
  9490  0027E0  6E2C               	movwf	__tdiv_to_l_@quot,c
  9491  0027E2  0E00               	movlw	0
  9492  0027E4  6E2D               	movwf	__tdiv_to_l_@quot+1,c
  9493  0027E6  0E00               	movlw	0
  9494  0027E8  6E2E               	movwf	__tdiv_to_l_@quot+2,c
  9495  0027EA  0E00               	movlw	0
  9496  0027EC  6E2F               	movwf	__tdiv_to_l_@quot+3,c
  9497  0027EE  0E7F               	movlw	127
  9498  0027F0  5E31               	subwf	__tdiv_to_l_@exp1,f,c
  9499  0027F2  5030               	movf	__tdiv_to_l_@cntr,w,c
  9500  0027F4  0F98               	addlw	152
  9501  0027F6  5E31               	subwf	__tdiv_to_l_@exp1,f,c
  9502  0027F8  0E18               	movlw	24
  9503  0027FA  6E30               	movwf	__tdiv_to_l_@cntr,c
  9504  0027FC                     l1191:
  9505  0027FC  90D8               	bcf	status,0,c
  9506  0027FE  362C               	rlcf	__tdiv_to_l_@quot,f,c
  9507  002800  362D               	rlcf	__tdiv_to_l_@quot+1,f,c
  9508  002802  362E               	rlcf	__tdiv_to_l_@quot+2,f,c
  9509  002804  362F               	rlcf	__tdiv_to_l_@quot+3,f,c
  9510  002806  5026               	movf	__tdiv_to_l_@f2,w,c
  9511  002808  5C23               	subwf	__tdiv_to_l_@f1,w,c
  9512  00280A  5027               	movf	__tdiv_to_l_@f2+1,w,c
  9513  00280C  5824               	subwfb	__tdiv_to_l_@f1+1,w,c
  9514  00280E  5028               	movf	__tdiv_to_l_@f2+2,w,c
  9515  002810  5825               	subwfb	__tdiv_to_l_@f1+2,w,c
  9516  002812  A0D8               	btfss	status,0,c
  9517  002814  D007               	goto	l1192
  9518  002816  5026               	movf	__tdiv_to_l_@f2,w,c
  9519  002818  5E23               	subwf	__tdiv_to_l_@f1,f,c
  9520  00281A  5027               	movf	__tdiv_to_l_@f2+1,w,c
  9521  00281C  5A24               	subwfb	__tdiv_to_l_@f1+1,f,c
  9522  00281E  5028               	movf	__tdiv_to_l_@f2+2,w,c
  9523  002820  5A25               	subwfb	__tdiv_to_l_@f1+2,f,c
  9524  002822  802C               	bsf	__tdiv_to_l_@quot,0,c
  9525  002824                     l1192:
  9526  002824  90D8               	bcf	status,0,c
  9527  002826  3623               	rlcf	__tdiv_to_l_@f1,f,c
  9528  002828  3624               	rlcf	__tdiv_to_l_@f1+1,f,c
  9529  00282A  3625               	rlcf	__tdiv_to_l_@f1+2,f,c
  9530  00282C  2E30               	decfsz	__tdiv_to_l_@cntr,f,c
  9531  00282E  D7E6               	goto	l1191
  9532  002830  AE31               	btfss	__tdiv_to_l_@exp1,7,c
  9533  002832  D016               	goto	l6455
  9534  002834  5031               	movf	__tdiv_to_l_@exp1,w,c
  9535  002836  0A80               	xorlw	128
  9536  002838  0F97               	addlw	151
  9537  00283A  B0D8               	btfsc	status,0,c
  9538  00283C  D009               	goto	l6451
  9539  00283E  0E00               	movlw	0
  9540  002840  6E23               	movwf	?__tdiv_to_l_,c
  9541  002842  0E00               	movlw	0
  9542  002844  6E24               	movwf	?__tdiv_to_l_+1,c
  9543  002846  0E00               	movlw	0
  9544  002848  6E25               	movwf	?__tdiv_to_l_+2,c
  9545  00284A  0E00               	movlw	0
  9546  00284C  6E26               	movwf	?__tdiv_to_l_+3,c
  9547  00284E  0012               	return	
  9548  002850                     l6451:
  9549  002850  90D8               	bcf	status,0,c
  9550  002852  322F               	rrcf	__tdiv_to_l_@quot+3,f,c
  9551  002854  322E               	rrcf	__tdiv_to_l_@quot+2,f,c
  9552  002856  322D               	rrcf	__tdiv_to_l_@quot+1,f,c
  9553  002858  322C               	rrcf	__tdiv_to_l_@quot,f,c
  9554  00285A  3E31               	incfsz	__tdiv_to_l_@exp1,f,c
  9555  00285C  D7F9               	goto	l6451
  9556  00285E  D015               	goto	l1198
  9557  002860                     l6455:
  9558  002860  0E17               	movlw	23
  9559  002862  6431               	cpfsgt	__tdiv_to_l_@exp1,c
  9560  002864  D00F               	goto	l6463
  9561  002866  0E00               	movlw	0
  9562  002868  6E23               	movwf	?__tdiv_to_l_,c
  9563  00286A  0E00               	movlw	0
  9564  00286C  6E24               	movwf	?__tdiv_to_l_+1,c
  9565  00286E  0E00               	movlw	0
  9566  002870  6E25               	movwf	?__tdiv_to_l_+2,c
  9567  002872  0E00               	movlw	0
  9568  002874  6E26               	movwf	?__tdiv_to_l_+3,c
  9569  002876  0012               	return	
  9570  002878                     l6461:
  9571  002878  90D8               	bcf	status,0,c
  9572  00287A  362C               	rlcf	__tdiv_to_l_@quot,f,c
  9573  00287C  362D               	rlcf	__tdiv_to_l_@quot+1,f,c
  9574  00287E  362E               	rlcf	__tdiv_to_l_@quot+2,f,c
  9575  002880  362F               	rlcf	__tdiv_to_l_@quot+3,f,c
  9576  002882  0631               	decf	__tdiv_to_l_@exp1,f,c
  9577  002884                     l6463:
  9578  002884  5031               	movf	__tdiv_to_l_@exp1,w,c
  9579  002886  A4D8               	btfss	status,2,c
  9580  002888  D7F7               	goto	l6461
  9581  00288A                     l1198:
  9582  00288A  C02C  F023         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  9583  00288E  C02D  F024         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  9584  002892  C02E  F025         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  9585  002896  C02F  F026         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  9586  00289A  0012               	return		;funcret
  9587  00289C                     __end_of__tdiv_to_l_:
  9588                           	opt stack 0
  9589                           tblptru	equ	0xFF8
  9590                           tblptrh	equ	0xFF7
  9591                           tblptrl	equ	0xFF6
  9592                           tablat	equ	0xFF5
  9593                           prodh	equ	0xFF4
  9594                           prodl	equ	0xFF3
  9595                           postinc0	equ	0xFEE
  9596                           wreg	equ	0xFE8
  9597                           postdec1	equ	0xFE5
  9598                           fsr1l	equ	0xFE1
  9599                           indf2	equ	0xFDF
  9600                           postinc2	equ	0xFDE
  9601                           postdec2	equ	0xFDD
  9602                           fsr2h	equ	0xFDA
  9603                           fsr2l	equ	0xFD9
  9604                           status	equ	0xFD8
  9605                           
  9606 ;; *************** function __div_to_l_ *****************
  9607 ;; Defined at:
  9608 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  9609 ;; Parameters:    Size  Location     Type
  9610 ;;  f1              3   34[COMRAM] unsigned long 
  9611 ;;  f2              3   37[COMRAM] unsigned long 
  9612 ;; Auto vars:     Size  Location     Type
  9613 ;;  quot            4   40[COMRAM] unsigned long 
  9614 ;;  exp1            1   45[COMRAM] unsigned char 
  9615 ;;  cntr            1   44[COMRAM] unsigned char 
  9616 ;; Return value:  Size  Location     Type
  9617 ;;                  4   34[COMRAM] unsigned long 
  9618 ;; Registers used:
  9619 ;;		wreg, status,2, status,0
  9620 ;; Tracked objects:
  9621 ;;		On entry : 0/0
  9622 ;;		On exit  : 0/0
  9623 ;;		Unchanged: 0/0
  9624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9625 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9626 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9628 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9629 ;;Total ram usage:       12 bytes
  9630 ;; Hardware stack levels used:    1
  9631 ;; Hardware stack levels required when called:    3
  9632 ;; This function calls:
  9633 ;;		Nothing
  9634 ;; This function is called by:
  9635 ;;		_printf
  9636 ;; This function uses a non-reentrant model
  9637 ;;
  9638                           
  9639                           	psect	text25
  9640  00289C                     __ptext25:
  9641                           	opt stack 0
  9642  00289C                     __div_to_l_:
  9643                           	opt stack 25
  9644                           
  9645                           ;incstack = 0
  9646  00289C  3425               	rlcf	__div_to_l_@f1+2,w,c
  9647  00289E  3426               	rlcf	__div_to_l_@f1+3,w,c
  9648  0028A0  6E2E               	movwf	__div_to_l_@exp1,c
  9649  0028A2  502E               	movf	__div_to_l_@exp1,w,c
  9650  0028A4  A4D8               	btfss	status,2,c
  9651  0028A6  D009               	goto	l6471
  9652  0028A8  0E00               	movlw	0
  9653  0028AA  6E23               	movwf	?__div_to_l_,c
  9654  0028AC  0E00               	movlw	0
  9655  0028AE  6E24               	movwf	?__div_to_l_+1,c
  9656  0028B0  0E00               	movlw	0
  9657  0028B2  6E25               	movwf	?__div_to_l_+2,c
  9658  0028B4  0E00               	movlw	0
  9659  0028B6  6E26               	movwf	?__div_to_l_+3,c
  9660  0028B8  0012               	return	
  9661  0028BA                     l6471:
  9662  0028BA  3428               	rlcf	__div_to_l_@f2+2,w,c
  9663  0028BC  3429               	rlcf	__div_to_l_@f2+3,w,c
  9664  0028BE  6E2D               	movwf	__div_to_l_@cntr,c
  9665  0028C0  502D               	movf	__div_to_l_@cntr,w,c
  9666  0028C2  A4D8               	btfss	status,2,c
  9667  0028C4  D009               	goto	l6477
  9668  0028C6  0E00               	movlw	0
  9669  0028C8  6E23               	movwf	?__div_to_l_,c
  9670  0028CA  0E00               	movlw	0
  9671  0028CC  6E24               	movwf	?__div_to_l_+1,c
  9672  0028CE  0E00               	movlw	0
  9673  0028D0  6E25               	movwf	?__div_to_l_+2,c
  9674  0028D2  0E00               	movlw	0
  9675  0028D4  6E26               	movwf	?__div_to_l_+3,c
  9676  0028D6  0012               	return	
  9677  0028D8                     l6477:
  9678  0028D8  8E25               	bsf	__div_to_l_@f1+2,7,c
  9679  0028DA  0EFF               	movlw	255
  9680  0028DC  1623               	andwf	__div_to_l_@f1,f,c
  9681  0028DE  0EFF               	movlw	255
  9682  0028E0  1624               	andwf	__div_to_l_@f1+1,f,c
  9683  0028E2  0EFF               	movlw	255
  9684  0028E4  1625               	andwf	__div_to_l_@f1+2,f,c
  9685  0028E6  0E00               	movlw	0
  9686  0028E8  1626               	andwf	__div_to_l_@f1+3,f,c
  9687  0028EA  8E28               	bsf	__div_to_l_@f2+2,7,c
  9688  0028EC  0EFF               	movlw	255
  9689  0028EE  1626               	andwf	__div_to_l_@f2,f,c
  9690  0028F0  0EFF               	movlw	255
  9691  0028F2  1627               	andwf	__div_to_l_@f2+1,f,c
  9692  0028F4  0EFF               	movlw	255
  9693  0028F6  1628               	andwf	__div_to_l_@f2+2,f,c
  9694  0028F8  0E00               	movlw	0
  9695  0028FA  1629               	andwf	__div_to_l_@f2+3,f,c
  9696  0028FC  0E00               	movlw	0
  9697  0028FE  6E29               	movwf	__div_to_l_@quot,c
  9698  002900  0E00               	movlw	0
  9699  002902  6E2A               	movwf	__div_to_l_@quot+1,c
  9700  002904  0E00               	movlw	0
  9701  002906  6E2B               	movwf	__div_to_l_@quot+2,c
  9702  002908  0E00               	movlw	0
  9703  00290A  6E2C               	movwf	__div_to_l_@quot+3,c
  9704  00290C  0E7F               	movlw	127
  9705  00290E  5E2E               	subwf	__div_to_l_@exp1,f,c
  9706  002910  502D               	movf	__div_to_l_@cntr,w,c
  9707  002912  0FA0               	addlw	160
  9708  002914  5E2E               	subwf	__div_to_l_@exp1,f,c
  9709  002916  0E20               	movlw	32
  9710  002918  6E2D               	movwf	__div_to_l_@cntr,c
  9711  00291A                     l6491:
  9712  00291A  90D8               	bcf	status,0,c
  9713  00291C  3629               	rlcf	__div_to_l_@quot,f,c
  9714  00291E  362A               	rlcf	__div_to_l_@quot+1,f,c
  9715  002920  362B               	rlcf	__div_to_l_@quot+2,f,c
  9716  002922  362C               	rlcf	__div_to_l_@quot+3,f,c
  9717  002924  5026               	movf	__div_to_l_@f2,w,c
  9718  002926  5C23               	subwf	__div_to_l_@f1,w,c
  9719  002928  5027               	movf	__div_to_l_@f2+1,w,c
  9720  00292A  5824               	subwfb	__div_to_l_@f1+1,w,c
  9721  00292C  5028               	movf	__div_to_l_@f2+2,w,c
  9722  00292E  5825               	subwfb	__div_to_l_@f1+2,w,c
  9723  002930  5029               	movf	__div_to_l_@f2+3,w,c
  9724  002932  5826               	subwfb	__div_to_l_@f1+3,w,c
  9725  002934  A0D8               	btfss	status,0,c
  9726  002936  D009               	goto	l6499
  9727  002938  5026               	movf	__div_to_l_@f2,w,c
  9728  00293A  5E23               	subwf	__div_to_l_@f1,f,c
  9729  00293C  5027               	movf	__div_to_l_@f2+1,w,c
  9730  00293E  5A24               	subwfb	__div_to_l_@f1+1,f,c
  9731  002940  5028               	movf	__div_to_l_@f2+2,w,c
  9732  002942  5A25               	subwfb	__div_to_l_@f1+2,f,c
  9733  002944  5029               	movf	__div_to_l_@f2+3,w,c
  9734  002946  5A26               	subwfb	__div_to_l_@f1+3,f,c
  9735  002948  8029               	bsf	__div_to_l_@quot,0,c
  9736  00294A                     l6499:
  9737  00294A  90D8               	bcf	status,0,c
  9738  00294C  3623               	rlcf	__div_to_l_@f1,f,c
  9739  00294E  3624               	rlcf	__div_to_l_@f1+1,f,c
  9740  002950  3625               	rlcf	__div_to_l_@f1+2,f,c
  9741  002952  3626               	rlcf	__div_to_l_@f1+3,f,c
  9742  002954  2E2D               	decfsz	__div_to_l_@cntr,f,c
  9743  002956  D7E1               	goto	l6491
  9744  002958  AE2E               	btfss	__div_to_l_@exp1,7,c
  9745  00295A  D016               	goto	l6515
  9746  00295C  502E               	movf	__div_to_l_@exp1,w,c
  9747  00295E  0A80               	xorlw	128
  9748  002960  0F9F               	addlw	159
  9749  002962  B0D8               	btfsc	status,0,c
  9750  002964  D009               	goto	l6511
  9751  002966  0E00               	movlw	0
  9752  002968  6E23               	movwf	?__div_to_l_,c
  9753  00296A  0E00               	movlw	0
  9754  00296C  6E24               	movwf	?__div_to_l_+1,c
  9755  00296E  0E00               	movlw	0
  9756  002970  6E25               	movwf	?__div_to_l_+2,c
  9757  002972  0E00               	movlw	0
  9758  002974  6E26               	movwf	?__div_to_l_+3,c
  9759  002976  0012               	return	
  9760  002978                     l6511:
  9761  002978  90D8               	bcf	status,0,c
  9762  00297A  322C               	rrcf	__div_to_l_@quot+3,f,c
  9763  00297C  322B               	rrcf	__div_to_l_@quot+2,f,c
  9764  00297E  322A               	rrcf	__div_to_l_@quot+1,f,c
  9765  002980  3229               	rrcf	__div_to_l_@quot,f,c
  9766  002982  3E2E               	incfsz	__div_to_l_@exp1,f,c
  9767  002984  D7F9               	goto	l6511
  9768  002986  D015               	goto	l1094
  9769  002988                     l6515:
  9770  002988  0E1F               	movlw	31
  9771  00298A  642E               	cpfsgt	__div_to_l_@exp1,c
  9772  00298C  D00F               	goto	l6523
  9773  00298E  0E00               	movlw	0
  9774  002990  6E23               	movwf	?__div_to_l_,c
  9775  002992  0E00               	movlw	0
  9776  002994  6E24               	movwf	?__div_to_l_+1,c
  9777  002996  0E00               	movlw	0
  9778  002998  6E25               	movwf	?__div_to_l_+2,c
  9779  00299A  0E00               	movlw	0
  9780  00299C  6E26               	movwf	?__div_to_l_+3,c
  9781  00299E  0012               	return	
  9782  0029A0                     l6521:
  9783  0029A0  90D8               	bcf	status,0,c
  9784  0029A2  3629               	rlcf	__div_to_l_@quot,f,c
  9785  0029A4  362A               	rlcf	__div_to_l_@quot+1,f,c
  9786  0029A6  362B               	rlcf	__div_to_l_@quot+2,f,c
  9787  0029A8  362C               	rlcf	__div_to_l_@quot+3,f,c
  9788  0029AA  062E               	decf	__div_to_l_@exp1,f,c
  9789  0029AC                     l6523:
  9790  0029AC  502E               	movf	__div_to_l_@exp1,w,c
  9791  0029AE  A4D8               	btfss	status,2,c
  9792  0029B0  D7F7               	goto	l6521
  9793  0029B2                     l1094:
  9794  0029B2  C029  F023         	movff	__div_to_l_@quot,?__div_to_l_
  9795  0029B6  C02A  F024         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  9796  0029BA  C02B  F025         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  9797  0029BE  C02C  F026         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  9798  0029C2  0012               	return		;funcret
  9799  0029C4                     __end_of__div_to_l_:
  9800                           	opt stack 0
  9801                           tblptru	equ	0xFF8
  9802                           tblptrh	equ	0xFF7
  9803                           tblptrl	equ	0xFF6
  9804                           tablat	equ	0xFF5
  9805                           prodh	equ	0xFF4
  9806                           prodl	equ	0xFF3
  9807                           postinc0	equ	0xFEE
  9808                           wreg	equ	0xFE8
  9809                           postdec1	equ	0xFE5
  9810                           fsr1l	equ	0xFE1
  9811                           indf2	equ	0xFDF
  9812                           postinc2	equ	0xFDE
  9813                           postdec2	equ	0xFDD
  9814                           fsr2h	equ	0xFDA
  9815                           fsr2l	equ	0xFD9
  9816                           status	equ	0xFD8
  9817                           
  9818 ;; *************** function ___lltoft *****************
  9819 ;; Defined at:
  9820 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  9821 ;; Parameters:    Size  Location     Type
  9822 ;;  c               4   42[COMRAM] unsigned long 
  9823 ;; Auto vars:     Size  Location     Type
  9824 ;;  exp             1   50[COMRAM] unsigned char 
  9825 ;; Return value:  Size  Location     Type
  9826 ;;                  3   42[COMRAM] float 
  9827 ;; Registers used:
  9828 ;;		wreg, status,2, status,0, cstack
  9829 ;; Tracked objects:
  9830 ;;		On entry : 0/0
  9831 ;;		On exit  : 0/0
  9832 ;;		Unchanged: 0/0
  9833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9834 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9835 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9836 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9837 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9838 ;;Total ram usage:        9 bytes
  9839 ;; Hardware stack levels used:    1
  9840 ;; Hardware stack levels required when called:    4
  9841 ;; This function calls:
  9842 ;;		___ftpack
  9843 ;; This function is called by:
  9844 ;;		_printf
  9845 ;; This function uses a non-reentrant model
  9846 ;;
  9847                           
  9848                           	psect	text26
  9849  003C9A                     __ptext26:
  9850                           	opt stack 0
  9851  003C9A                     ___lltoft:
  9852                           	opt stack 24
  9853                           
  9854                           ;incstack = 0
  9855  003C9A  0E8E               	movlw	142
  9856  003C9C  6E33               	movwf	___lltoft@exp,c
  9857  003C9E  D006               	goto	l6695
  9858  003CA0                     l6693:
  9859  003CA0  90D8               	bcf	status,0,c
  9860  003CA2  322E               	rrcf	___lltoft@c+3,f,c
  9861  003CA4  322D               	rrcf	___lltoft@c+2,f,c
  9862  003CA6  322C               	rrcf	___lltoft@c+1,f,c
  9863  003CA8  322B               	rrcf	___lltoft@c,f,c
  9864  003CAA  2A33               	incf	___lltoft@exp,f,c
  9865  003CAC                     l6695:
  9866  003CAC  0E00               	movlw	0
  9867  003CAE  142B               	andwf	___lltoft@c,w,c
  9868  003CB0  6E2F               	movwf	??___lltoft& (0+255),c
  9869  003CB2  0E00               	movlw	0
  9870  003CB4  142C               	andwf	___lltoft@c+1,w,c
  9871  003CB6  6E30               	movwf	(??___lltoft+1)& (0+255),c
  9872  003CB8  0E00               	movlw	0
  9873  003CBA  142D               	andwf	___lltoft@c+2,w,c
  9874  003CBC  6E31               	movwf	(??___lltoft+2)& (0+255),c
  9875  003CBE  0EFF               	movlw	255
  9876  003CC0  142E               	andwf	___lltoft@c+3,w,c
  9877  003CC2  6E32               	movwf	(??___lltoft+3)& (0+255),c
  9878  003CC4  502F               	movf	??___lltoft,w,c
  9879  003CC6  1030               	iorwf	??___lltoft+1,w,c
  9880  003CC8  1031               	iorwf	??___lltoft+2,w,c
  9881  003CCA  1032               	iorwf	??___lltoft+3,w,c
  9882  003CCC  A4D8               	btfss	status,2,c
  9883  003CCE  D7E8               	goto	l6693
  9884  003CD0  C02B  F023         	movff	___lltoft@c,___ftpack@arg
  9885  003CD4  C02C  F024         	movff	___lltoft@c+1,___ftpack@arg+1
  9886  003CD8  C02D  F025         	movff	___lltoft@c+2,___ftpack@arg+2
  9887  003CDC  C033  F026         	movff	___lltoft@exp,___ftpack@exp
  9888  003CE0  0E00               	movlw	0
  9889  003CE2  6E27               	movwf	___ftpack@sign,c
  9890  003CE4  EC43  F01A         	call	___ftpack	;wreg free
  9891  003CE8  C023  F02B         	movff	?___ftpack,?___lltoft
  9892  003CEC  C024  F02C         	movff	?___ftpack+1,?___lltoft+1
  9893  003CF0  C025  F02D         	movff	?___ftpack+2,?___lltoft+2
  9894  003CF4  0012               	return	
  9895  003CF6                     __end_of___lltoft:
  9896                           	opt stack 0
  9897                           tblptru	equ	0xFF8
  9898                           tblptrh	equ	0xFF7
  9899                           tblptrl	equ	0xFF6
  9900                           tablat	equ	0xFF5
  9901                           prodh	equ	0xFF4
  9902                           prodl	equ	0xFF3
  9903                           postinc0	equ	0xFEE
  9904                           wreg	equ	0xFE8
  9905                           postdec1	equ	0xFE5
  9906                           fsr1l	equ	0xFE1
  9907                           indf2	equ	0xFDF
  9908                           postinc2	equ	0xFDE
  9909                           postdec2	equ	0xFDD
  9910                           fsr2h	equ	0xFDA
  9911                           fsr2l	equ	0xFD9
  9912                           status	equ	0xFD8
  9913                           
  9914 ;; *************** function ___llmod *****************
  9915 ;; Defined at:
  9916 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  9917 ;; Parameters:    Size  Location     Type
  9918 ;;  dividend        4   47[COMRAM] unsigned long 
  9919 ;;  divisor         4   51[COMRAM] unsigned long 
  9920 ;; Auto vars:     Size  Location     Type
  9921 ;;  counter         1   55[COMRAM] unsigned char 
  9922 ;; Return value:  Size  Location     Type
  9923 ;;                  4   47[COMRAM] unsigned long 
  9924 ;; Registers used:
  9925 ;;		wreg, status,2, status,0
  9926 ;; Tracked objects:
  9927 ;;		On entry : 0/0
  9928 ;;		On exit  : 0/0
  9929 ;;		Unchanged: 0/0
  9930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9931 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9932 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9934 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9935 ;;Total ram usage:        9 bytes
  9936 ;; Hardware stack levels used:    1
  9937 ;; Hardware stack levels required when called:    3
  9938 ;; This function calls:
  9939 ;;		Nothing
  9940 ;; This function is called by:
  9941 ;;		_printf
  9942 ;; This function uses a non-reentrant model
  9943 ;;
  9944                           
  9945                           	psect	text27
  9946  003B0E                     __ptext27:
  9947                           	opt stack 0
  9948  003B0E                     ___llmod:
  9949                           	opt stack 25
  9950                           
  9951                           ;incstack = 0
  9952  003B0E  5034               	movf	___llmod@divisor,w,c
  9953  003B10  1035               	iorwf	___llmod@divisor+1,w,c
  9954  003B12  1036               	iorwf	___llmod@divisor+2,w,c
  9955  003B14  1037               	iorwf	___llmod@divisor+3,w,c
  9956  003B16  B4D8               	btfsc	status,2,c
  9957  003B18  D024               	goto	l1283
  9958  003B1A  0E01               	movlw	1
  9959  003B1C  6E38               	movwf	___llmod@counter,c
  9960  003B1E  D006               	goto	l6681
  9961  003B20                     l6679:
  9962  003B20  90D8               	bcf	status,0,c
  9963  003B22  3634               	rlcf	___llmod@divisor,f,c
  9964  003B24  3635               	rlcf	___llmod@divisor+1,f,c
  9965  003B26  3636               	rlcf	___llmod@divisor+2,f,c
  9966  003B28  3637               	rlcf	___llmod@divisor+3,f,c
  9967  003B2A  2A38               	incf	___llmod@counter,f,c
  9968  003B2C                     l6681:
  9969  003B2C  AE37               	btfss	___llmod@divisor+3,7,c
  9970  003B2E  D7F8               	goto	l6679
  9971  003B30                     l6683:
  9972  003B30  5034               	movf	___llmod@divisor,w,c
  9973  003B32  5C30               	subwf	___llmod@dividend,w,c
  9974  003B34  5035               	movf	___llmod@divisor+1,w,c
  9975  003B36  5831               	subwfb	___llmod@dividend+1,w,c
  9976  003B38  5036               	movf	___llmod@divisor+2,w,c
  9977  003B3A  5832               	subwfb	___llmod@dividend+2,w,c
  9978  003B3C  5037               	movf	___llmod@divisor+3,w,c
  9979  003B3E  5833               	subwfb	___llmod@dividend+3,w,c
  9980  003B40  A0D8               	btfss	status,0,c
  9981  003B42  D008               	goto	l6687
  9982  003B44  5034               	movf	___llmod@divisor,w,c
  9983  003B46  5E30               	subwf	___llmod@dividend,f,c
  9984  003B48  5035               	movf	___llmod@divisor+1,w,c
  9985  003B4A  5A31               	subwfb	___llmod@dividend+1,f,c
  9986  003B4C  5036               	movf	___llmod@divisor+2,w,c
  9987  003B4E  5A32               	subwfb	___llmod@dividend+2,f,c
  9988  003B50  5037               	movf	___llmod@divisor+3,w,c
  9989  003B52  5A33               	subwfb	___llmod@dividend+3,f,c
  9990  003B54                     l6687:
  9991  003B54  90D8               	bcf	status,0,c
  9992  003B56  3237               	rrcf	___llmod@divisor+3,f,c
  9993  003B58  3236               	rrcf	___llmod@divisor+2,f,c
  9994  003B5A  3235               	rrcf	___llmod@divisor+1,f,c
  9995  003B5C  3234               	rrcf	___llmod@divisor,f,c
  9996  003B5E  2E38               	decfsz	___llmod@counter,f,c
  9997  003B60  D7E7               	goto	l6683
  9998  003B62                     l1283:
  9999  003B62  C030  F030         	movff	___llmod@dividend,?___llmod
 10000  003B66  C031  F031         	movff	___llmod@dividend+1,?___llmod+1
 10001  003B6A  C032  F032         	movff	___llmod@dividend+2,?___llmod+2
 10002  003B6E  C033  F033         	movff	___llmod@dividend+3,?___llmod+3
 10003  003B72  0012               	return		;funcret
 10004  003B74                     __end_of___llmod:
 10005                           	opt stack 0
 10006                           tblptru	equ	0xFF8
 10007                           tblptrh	equ	0xFF7
 10008                           tblptrl	equ	0xFF6
 10009                           tablat	equ	0xFF5
 10010                           prodh	equ	0xFF4
 10011                           prodl	equ	0xFF3
 10012                           postinc0	equ	0xFEE
 10013                           wreg	equ	0xFE8
 10014                           postdec1	equ	0xFE5
 10015                           fsr1l	equ	0xFE1
 10016                           indf2	equ	0xFDF
 10017                           postinc2	equ	0xFDE
 10018                           postdec2	equ	0xFDD
 10019                           fsr2h	equ	0xFDA
 10020                           fsr2l	equ	0xFD9
 10021                           status	equ	0xFD8
 10022                           
 10023 ;; *************** function ___ftsub *****************
 10024 ;; Defined at:
 10025 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 10026 ;; Parameters:    Size  Location     Type
 10027 ;;  f1              3   46[BANK0 ] float 
 10028 ;;  f2              3   49[BANK0 ] float 
 10029 ;; Auto vars:     Size  Location     Type
 10030 ;;		None
 10031 ;; Return value:  Size  Location     Type
 10032 ;;                  3   46[BANK0 ] float 
 10033 ;; Registers used:
 10034 ;;		wreg, status,2, status,0, cstack
 10035 ;; Tracked objects:
 10036 ;;		On entry : 0/0
 10037 ;;		On exit  : 0/0
 10038 ;;		Unchanged: 0/0
 10039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10040 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10043 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10044 ;;Total ram usage:        6 bytes
 10045 ;; Hardware stack levels used:    1
 10046 ;; Hardware stack levels required when called:    5
 10047 ;; This function calls:
 10048 ;;		___ftadd
 10049 ;; This function is called by:
 10050 ;;		_sortBattery
 10051 ;;		_printf
 10052 ;; This function uses a non-reentrant model
 10053 ;;
 10054                           
 10055                           	psect	text28
 10056  003DF6                     __ptext28:
 10057                           	opt stack 0
 10058  003DF6                     ___ftsub:
 10059                           	opt stack 23
 10060                           
 10061                           ;incstack = 0
 10062  003DF6  0100               	movlb	0	; () banked
 10063  003DF8  51B1               	movf	___ftsub@f2& (0+255),w,b
 10064  003DFA  0100               	movlb	0	; () banked
 10065  003DFC  11B2               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 10066  003DFE  0100               	movlb	0	; () banked
 10067  003E00  11B3               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 10068  003E02  B4D8               	btfsc	status,2,c
 10069  003E04  D009               	goto	l6591
 10070                           
 10071                           ; BSR set to: 0
 10072  003E06  0E00               	movlw	0
 10073  003E08  0100               	movlb	0	; () banked
 10074  003E0A  1BB1               	xorwf	___ftsub@f2& (0+255),f,b
 10075  003E0C  0E00               	movlw	0
 10076  003E0E  0100               	movlb	0	; () banked
 10077  003E10  1BB2               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 10078  003E12  0E80               	movlw	128
 10079  003E14  0100               	movlb	0	; () banked
 10080  003E16  1BB3               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 10081  003E18                     l6591:
 10082                           
 10083                           ; BSR set to: 0
 10084  003E18  C0AE  F0A2         	movff	___ftsub@f1,___ftadd@f1
 10085  003E1C  C0AF  F0A3         	movff	___ftsub@f1+1,___ftadd@f1+1
 10086  003E20  C0B0  F0A4         	movff	___ftsub@f1+2,___ftadd@f1+2
 10087  003E24  C0B1  F0A5         	movff	___ftsub@f2,___ftadd@f2
 10088  003E28  C0B2  F0A6         	movff	___ftsub@f2+1,___ftadd@f2+1
 10089  003E2C  C0B3  F0A7         	movff	___ftsub@f2+2,___ftadd@f2+2
 10090  003E30  EC98  F00E         	call	___ftadd	;wreg free
 10091  003E34  C0A2  F0AE         	movff	?___ftadd,?___ftsub
 10092  003E38  C0A3  F0AF         	movff	?___ftadd+1,?___ftsub+1
 10093  003E3C  C0A4  F0B0         	movff	?___ftadd+2,?___ftsub+2
 10094  003E40  0012               	return	
 10095  003E42                     __end_of___ftsub:
 10096                           	opt stack 0
 10097                           tblptru	equ	0xFF8
 10098                           tblptrh	equ	0xFF7
 10099                           tblptrl	equ	0xFF6
 10100                           tablat	equ	0xFF5
 10101                           prodh	equ	0xFF4
 10102                           prodl	equ	0xFF3
 10103                           postinc0	equ	0xFEE
 10104                           wreg	equ	0xFE8
 10105                           postdec1	equ	0xFE5
 10106                           fsr1l	equ	0xFE1
 10107                           indf2	equ	0xFDF
 10108                           postinc2	equ	0xFDE
 10109                           postdec2	equ	0xFDD
 10110                           fsr2h	equ	0xFDA
 10111                           fsr2l	equ	0xFD9
 10112                           status	equ	0xFD8
 10113                           
 10114 ;; *************** function ___ftneg *****************
 10115 ;; Defined at:
 10116 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 10117 ;; Parameters:    Size  Location     Type
 10118 ;;  f1              3   34[COMRAM] float 
 10119 ;; Auto vars:     Size  Location     Type
 10120 ;;		None
 10121 ;; Return value:  Size  Location     Type
 10122 ;;                  3   34[COMRAM] float 
 10123 ;; Registers used:
 10124 ;;		wreg, status,2, status,0
 10125 ;; Tracked objects:
 10126 ;;		On entry : 0/0
 10127 ;;		On exit  : 0/0
 10128 ;;		Unchanged: 0/0
 10129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10130 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10133 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10134 ;;Total ram usage:        3 bytes
 10135 ;; Hardware stack levels used:    1
 10136 ;; Hardware stack levels required when called:    3
 10137 ;; This function calls:
 10138 ;;		Nothing
 10139 ;; This function is called by:
 10140 ;;		_printf
 10141 ;; This function uses a non-reentrant model
 10142 ;;
 10143                           
 10144                           	psect	text29
 10145  0040E2                     __ptext29:
 10146                           	opt stack 0
 10147  0040E2                     ___ftneg:
 10148                           	opt stack 25
 10149                           
 10150                           ;incstack = 0
 10151  0040E2  5023               	movf	___ftneg@f1,w,c
 10152  0040E4  1024               	iorwf	___ftneg@f1+1,w,c
 10153  0040E6  1025               	iorwf	___ftneg@f1+2,w,c
 10154  0040E8  B4D8               	btfsc	status,2,c
 10155  0040EA  D006               	goto	l1223
 10156  0040EC  0E00               	movlw	0
 10157  0040EE  1A23               	xorwf	___ftneg@f1,f,c
 10158  0040F0  0E00               	movlw	0
 10159  0040F2  1A24               	xorwf	___ftneg@f1+1,f,c
 10160  0040F4  0E80               	movlw	128
 10161  0040F6  1A25               	xorwf	___ftneg@f1+2,f,c
 10162  0040F8                     l1223:
 10163  0040F8  C023  F023         	movff	___ftneg@f1,?___ftneg
 10164  0040FC  C024  F024         	movff	___ftneg@f1+1,?___ftneg+1
 10165  004100  C025  F025         	movff	___ftneg@f1+2,?___ftneg+2
 10166  004104  0012               	return		;funcret
 10167  004106                     __end_of___ftneg:
 10168                           	opt stack 0
 10169                           tblptru	equ	0xFF8
 10170                           tblptrh	equ	0xFF7
 10171                           tblptrl	equ	0xFF6
 10172                           tablat	equ	0xFF5
 10173                           prodh	equ	0xFF4
 10174                           prodl	equ	0xFF3
 10175                           postinc0	equ	0xFEE
 10176                           wreg	equ	0xFE8
 10177                           postdec1	equ	0xFE5
 10178                           fsr1l	equ	0xFE1
 10179                           indf2	equ	0xFDF
 10180                           postinc2	equ	0xFDE
 10181                           postdec2	equ	0xFDD
 10182                           fsr2h	equ	0xFDA
 10183                           fsr2l	equ	0xFD9
 10184                           status	equ	0xFD8
 10185                           
 10186 ;; *************** function ___ftge *****************
 10187 ;; Defined at:
 10188 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 10189 ;; Parameters:    Size  Location     Type
 10190 ;;  ff1             3   46[COMRAM] float 
 10191 ;;  ff2             3   49[COMRAM] float 
 10192 ;; Auto vars:     Size  Location     Type
 10193 ;;		None
 10194 ;; Return value:  Size  Location     Type
 10195 ;;		None               void
 10196 ;; Registers used:
 10197 ;;		wreg, status,2, status,0
 10198 ;; Tracked objects:
 10199 ;;		On entry : 0/0
 10200 ;;		On exit  : 0/0
 10201 ;;		Unchanged: 0/0
 10202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10203 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10205 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10206 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10207 ;;Total ram usage:        9 bytes
 10208 ;; Hardware stack levels used:    1
 10209 ;; Hardware stack levels required when called:    3
 10210 ;; This function calls:
 10211 ;;		Nothing
 10212 ;; This function is called by:
 10213 ;;		_sortBattery
 10214 ;;		_printf
 10215 ;; This function uses a non-reentrant model
 10216 ;;
 10217                           
 10218                           	psect	text30
 10219  00371A                     __ptext30:
 10220                           	opt stack 0
 10221  00371A                     ___ftge:
 10222                           	opt stack 25
 10223                           
 10224                           ;incstack = 0
 10225  00371A  AE31               	btfss	___ftge@ff1+2,7,c
 10226  00371C  D016               	goto	l6611
 10227  00371E  C02F  F035         	movff	___ftge@ff1,??___ftge
 10228  003722  C030  F036         	movff	___ftge@ff1+1,??___ftge+1
 10229  003726  C031  F037         	movff	___ftge@ff1+2,??___ftge+2
 10230  00372A  1E35               	comf	??___ftge,f,c
 10231  00372C  1E36               	comf	??___ftge+1,f,c
 10232  00372E  1E37               	comf	??___ftge+2,f,c
 10233  003730  2A35               	incf	??___ftge,f,c
 10234  003732  0E00               	movlw	0
 10235  003734  2236               	addwfc	??___ftge+1,f,c
 10236  003736  2237               	addwfc	??___ftge+2,f,c
 10237  003738  0E00               	movlw	0
 10238  00373A  2435               	addwf	??___ftge,w,c
 10239  00373C  6E2F               	movwf	___ftge@ff1,c
 10240  00373E  0E00               	movlw	0
 10241  003740  2036               	addwfc	??___ftge+1,w,c
 10242  003742  6E30               	movwf	___ftge@ff1+1,c
 10243  003744  0E80               	movlw	128
 10244  003746  2037               	addwfc	??___ftge+2,w,c
 10245  003748  6E31               	movwf	___ftge@ff1+2,c
 10246  00374A                     l6611:
 10247  00374A  AE34               	btfss	___ftge@ff2+2,7,c
 10248  00374C  D016               	goto	l6615
 10249  00374E  C032  F035         	movff	___ftge@ff2,??___ftge
 10250  003752  C033  F036         	movff	___ftge@ff2+1,??___ftge+1
 10251  003756  C034  F037         	movff	___ftge@ff2+2,??___ftge+2
 10252  00375A  1E35               	comf	??___ftge,f,c
 10253  00375C  1E36               	comf	??___ftge+1,f,c
 10254  00375E  1E37               	comf	??___ftge+2,f,c
 10255  003760  2A35               	incf	??___ftge,f,c
 10256  003762  0E00               	movlw	0
 10257  003764  2236               	addwfc	??___ftge+1,f,c
 10258  003766  2237               	addwfc	??___ftge+2,f,c
 10259  003768  0E00               	movlw	0
 10260  00376A  2435               	addwf	??___ftge,w,c
 10261  00376C  6E32               	movwf	___ftge@ff2,c
 10262  00376E  0E00               	movlw	0
 10263  003770  2036               	addwfc	??___ftge+1,w,c
 10264  003772  6E33               	movwf	___ftge@ff2+1,c
 10265  003774  0E80               	movlw	128
 10266  003776  2037               	addwfc	??___ftge+2,w,c
 10267  003778  6E34               	movwf	___ftge@ff2+2,c
 10268  00377A                     l6615:
 10269  00377A  0E00               	movlw	0
 10270  00377C  1A2F               	xorwf	___ftge@ff1,f,c
 10271  00377E  0E00               	movlw	0
 10272  003780  1A30               	xorwf	___ftge@ff1+1,f,c
 10273  003782  0E80               	movlw	128
 10274  003784  1A31               	xorwf	___ftge@ff1+2,f,c
 10275  003786  0E00               	movlw	0
 10276  003788  1A32               	xorwf	___ftge@ff2,f,c
 10277  00378A  0E00               	movlw	0
 10278  00378C  1A33               	xorwf	___ftge@ff2+1,f,c
 10279  00378E  0E80               	movlw	128
 10280  003790  1A34               	xorwf	___ftge@ff2+2,f,c
 10281  003792  5032               	movf	___ftge@ff2,w,c
 10282  003794  5C2F               	subwf	___ftge@ff1,w,c
 10283  003796  5033               	movf	___ftge@ff2+1,w,c
 10284  003798  5830               	subwfb	___ftge@ff1+1,w,c
 10285  00379A  5034               	movf	___ftge@ff2+2,w,c
 10286  00379C  5831               	subwfb	___ftge@ff1+2,w,c
 10287  00379E  B0D8               	btfsc	status,0,c
 10288  0037A0  D002               	goto	l6621
 10289  0037A2  90D8               	bcf	status,0,c
 10290  0037A4  0012               	return	
 10291  0037A6                     l6621:
 10292  0037A6  80D8               	bsf	status,0,c
 10293  0037A8  0012               	return	
 10294  0037AA                     __end_of___ftge:
 10295                           	opt stack 0
 10296                           tblptru	equ	0xFF8
 10297                           tblptrh	equ	0xFF7
 10298                           tblptrl	equ	0xFF6
 10299                           tablat	equ	0xFF5
 10300                           prodh	equ	0xFF4
 10301                           prodl	equ	0xFF3
 10302                           postinc0	equ	0xFEE
 10303                           wreg	equ	0xFE8
 10304                           postdec1	equ	0xFE5
 10305                           fsr1l	equ	0xFE1
 10306                           indf2	equ	0xFDF
 10307                           postinc2	equ	0xFDE
 10308                           postdec2	equ	0xFDD
 10309                           fsr2h	equ	0xFDA
 10310                           fsr2l	equ	0xFD9
 10311                           status	equ	0xFD8
 10312                           
 10313 ;; *************** function _lcdHome *****************
 10314 ;; Defined at:
 10315 ;;		line 70 in file "lcd.c"
 10316 ;; Parameters:    Size  Location     Type
 10317 ;;		None
 10318 ;; Auto vars:     Size  Location     Type
 10319 ;;		None
 10320 ;; Return value:  Size  Location     Type
 10321 ;;                  2   24[None  ] int 
 10322 ;; Registers used:
 10323 ;;		wreg, status,2, status,0, cstack
 10324 ;; Tracked objects:
 10325 ;;		On entry : 0/0
 10326 ;;		On exit  : 0/0
 10327 ;;		Unchanged: 0/0
 10328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10332 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10333 ;;Total ram usage:        0 bytes
 10334 ;; Hardware stack levels used:    1
 10335 ;; Hardware stack levels required when called:    5
 10336 ;; This function calls:
 10337 ;;		_lcdInst
 10338 ;; This function is called by:
 10339 ;;		_main
 10340 ;;		_showDateTime
 10341 ;; This function uses a non-reentrant model
 10342 ;;
 10343                           
 10344                           	psect	text31
 10345  004200                     __ptext31:
 10346                           	opt stack 0
 10347  004200                     _lcdHome:
 10348                           	opt stack 23
 10349                           
 10350                           ;lcd.c: 71: lcdInst(0b00000010);
 10351                           
 10352                           ;incstack = 0
 10353  004200  0E02               	movlw	2
 10354  004202  EC94  F020         	call	_lcdInst
 10355  004206  0012               	return		;funcret
 10356  004208                     __end_of_lcdHome:
 10357                           	opt stack 0
 10358                           tblptru	equ	0xFF8
 10359                           tblptrh	equ	0xFF7
 10360                           tblptrl	equ	0xFF6
 10361                           tablat	equ	0xFF5
 10362                           prodh	equ	0xFF4
 10363                           prodl	equ	0xFF3
 10364                           postinc0	equ	0xFEE
 10365                           wreg	equ	0xFE8
 10366                           postdec1	equ	0xFE5
 10367                           fsr1l	equ	0xFE1
 10368                           indf2	equ	0xFDF
 10369                           postinc2	equ	0xFDE
 10370                           postdec2	equ	0xFDD
 10371                           fsr2h	equ	0xFDA
 10372                           fsr2l	equ	0xFD9
 10373                           status	equ	0xFD8
 10374                           
 10375 ;; *************** function _lcdClear *****************
 10376 ;; Defined at:
 10377 ;;		line 74 in file "lcd.c"
 10378 ;; Parameters:    Size  Location     Type
 10379 ;;		None
 10380 ;; Auto vars:     Size  Location     Type
 10381 ;;		None
 10382 ;; Return value:  Size  Location     Type
 10383 ;;                  1    wreg      void 
 10384 ;; Registers used:
 10385 ;;		wreg, status,2, status,0, cstack
 10386 ;; Tracked objects:
 10387 ;;		On entry : 0/0
 10388 ;;		On exit  : 0/0
 10389 ;;		Unchanged: 0/0
 10390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10395 ;;Total ram usage:        0 bytes
 10396 ;; Hardware stack levels used:    1
 10397 ;; Hardware stack levels required when called:    5
 10398 ;; This function calls:
 10399 ;;		_lcdInst
 10400 ;; This function is called by:
 10401 ;;		_main
 10402 ;;		_sortBattery
 10403 ;;		_showDateTime
 10404 ;;		_showMainMenu
 10405 ;;		_showRunSelect
 10406 ;;		_showRunMenu
 10407 ;;		_showRunTime
 10408 ;;		_showRunStats
 10409 ;;		_showErrorMessage
 10410 ;;		_debug
 10411 ;;		_pause
 10412 ;; This function uses a non-reentrant model
 10413 ;;
 10414                           
 10415                           	psect	text32
 10416  004208                     __ptext32:
 10417                           	opt stack 0
 10418  004208                     _lcdClear:
 10419                           	opt stack 24
 10420                           
 10421                           ;lcd.c: 75: lcdInst(0b00000001);
 10422                           
 10423                           ;incstack = 0
 10424  004208  0E01               	movlw	1
 10425  00420A  EC94  F020         	call	_lcdInst
 10426  00420E  0012               	return		;funcret
 10427  004210                     __end_of_lcdClear:
 10428                           	opt stack 0
 10429                           tblptru	equ	0xFF8
 10430                           tblptrh	equ	0xFF7
 10431                           tblptrl	equ	0xFF6
 10432                           tablat	equ	0xFF5
 10433                           prodh	equ	0xFF4
 10434                           prodl	equ	0xFF3
 10435                           postinc0	equ	0xFEE
 10436                           wreg	equ	0xFE8
 10437                           postdec1	equ	0xFE5
 10438                           fsr1l	equ	0xFE1
 10439                           indf2	equ	0xFDF
 10440                           postinc2	equ	0xFDE
 10441                           postdec2	equ	0xFDD
 10442                           fsr2h	equ	0xFDA
 10443                           fsr2l	equ	0xFD9
 10444                           status	equ	0xFD8
 10445                           
 10446 ;; *************** function _keyPressed *****************
 10447 ;; Defined at:
 10448 ;;		line 43 in file "keypad.c"
 10449 ;; Parameters:    Size  Location     Type
 10450 ;;		None
 10451 ;; Auto vars:     Size  Location     Type
 10452 ;;  key             1   34[COMRAM] unsigned char 
 10453 ;; Return value:  Size  Location     Type
 10454 ;;                  1    wreg      unsigned char 
 10455 ;; Registers used:
 10456 ;;		wreg, status,2
 10457 ;; Tracked objects:
 10458 ;;		On entry : 0/0
 10459 ;;		On exit  : 0/0
 10460 ;;		Unchanged: 0/0
 10461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10463 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10465 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10466 ;;Total ram usage:        1 bytes
 10467 ;; Hardware stack levels used:    1
 10468 ;; Hardware stack levels required when called:    3
 10469 ;; This function calls:
 10470 ;;		Nothing
 10471 ;; This function is called by:
 10472 ;;		_showDateTime
 10473 ;; This function uses a non-reentrant model
 10474 ;;
 10475                           
 10476                           	psect	text33
 10477  0041E2                     __ptext33:
 10478                           	opt stack 0
 10479  0041E2                     _keyPressed:
 10480                           	opt stack 25
 10481                           
 10482                           ;keypad.c: 44: char key = lastKey;
 10483                           
 10484                           ;incstack = 0
 10485  0041E2  C05C  F023         	movff	_lastKey,keyPressed@key
 10486                           
 10487                           ;keypad.c: 45: lastKey = 0;
 10488  0041E6  0E00               	movlw	0
 10489  0041E8  6E5C               	movwf	_lastKey,c
 10490                           
 10491                           ;keypad.c: 46: return key;
 10492  0041EA  5023               	movf	keyPressed@key,w,c
 10493  0041EC  0012               	return	
 10494  0041EE                     __end_of_keyPressed:
 10495                           	opt stack 0
 10496                           tblptru	equ	0xFF8
 10497                           tblptrh	equ	0xFF7
 10498                           tblptrl	equ	0xFF6
 10499                           tablat	equ	0xFF5
 10500                           prodh	equ	0xFF4
 10501                           prodl	equ	0xFF3
 10502                           postinc0	equ	0xFEE
 10503                           wreg	equ	0xFE8
 10504                           postdec1	equ	0xFE5
 10505                           fsr1l	equ	0xFE1
 10506                           indf2	equ	0xFDF
 10507                           postinc2	equ	0xFDE
 10508                           postdec2	equ	0xFDD
 10509                           fsr2h	equ	0xFDA
 10510                           fsr2l	equ	0xFD9
 10511                           status	equ	0xFD8
 10512                           
 10513 ;; *************** function _initRTC *****************
 10514 ;; Defined at:
 10515 ;;		line 19 in file "RTC.c"
 10516 ;; Parameters:    Size  Location     Type
 10517 ;;		None
 10518 ;; Auto vars:     Size  Location     Type
 10519 ;;		None
 10520 ;; Return value:  Size  Location     Type
 10521 ;;                  1    wreg      void 
 10522 ;; Registers used:
 10523 ;;		wreg, status,2, status,0, cstack
 10524 ;; Tracked objects:
 10525 ;;		On entry : 0/0
 10526 ;;		On exit  : 0/0
 10527 ;;		Unchanged: 0/0
 10528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10533 ;;Total ram usage:        0 bytes
 10534 ;; Hardware stack levels used:    1
 10535 ;; Hardware stack levels required when called:    5
 10536 ;; This function calls:
 10537 ;;		_I2C_Master_Init
 10538 ;; This function is called by:
 10539 ;;		_showInterface
 10540 ;;		_showDateTime
 10541 ;; This function uses a non-reentrant model
 10542 ;;
 10543                           
 10544                           	psect	text34
 10545  0041BA                     __ptext34:
 10546                           	opt stack 0
 10547  0041BA                     _initRTC:
 10548                           	opt stack 23
 10549                           
 10550                           ;RTC.c: 20: I2C_Master_Init(10000);
 10551                           
 10552                           ;incstack = 0
 10553  0041BA  0E10               	movlw	16
 10554  0041BC  6E30               	movwf	I2C_Master_Init@c,c
 10555  0041BE  0E27               	movlw	39
 10556  0041C0  6E31               	movwf	I2C_Master_Init@c+1,c
 10557  0041C2  0E00               	movlw	0
 10558  0041C4  6E32               	movwf	I2C_Master_Init@c+2,c
 10559  0041C6  0E00               	movlw	0
 10560  0041C8  6E33               	movwf	I2C_Master_Init@c+3,c
 10561  0041CA  EC7B  F01E         	call	_I2C_Master_Init	;wreg free
 10562  0041CE  0012               	return		;funcret
 10563  0041D0                     __end_of_initRTC:
 10564                           	opt stack 0
 10565                           tblptru	equ	0xFF8
 10566                           tblptrh	equ	0xFF7
 10567                           tblptrl	equ	0xFF6
 10568                           tablat	equ	0xFF5
 10569                           prodh	equ	0xFF4
 10570                           prodl	equ	0xFF3
 10571                           postinc0	equ	0xFEE
 10572                           wreg	equ	0xFE8
 10573                           postdec1	equ	0xFE5
 10574                           fsr1l	equ	0xFE1
 10575                           indf2	equ	0xFDF
 10576                           postinc2	equ	0xFDE
 10577                           postdec2	equ	0xFDD
 10578                           fsr2h	equ	0xFDA
 10579                           fsr2l	equ	0xFD9
 10580                           status	equ	0xFD8
 10581                           
 10582 ;; *************** function _I2C_Master_Init *****************
 10583 ;; Defined at:
 10584 ;;		line 13 in file "I2C.c"
 10585 ;; Parameters:    Size  Location     Type
 10586 ;;  c               4   47[COMRAM] const unsigned long 
 10587 ;; Auto vars:     Size  Location     Type
 10588 ;;		None
 10589 ;; Return value:  Size  Location     Type
 10590 ;;                  1    wreg      void 
 10591 ;; Registers used:
 10592 ;;		wreg, status,2, status,0, cstack
 10593 ;; Tracked objects:
 10594 ;;		On entry : 0/0
 10595 ;;		On exit  : 0/0
 10596 ;;		Unchanged: 0/0
 10597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10598 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10600 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10601 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10602 ;;Total ram usage:        8 bytes
 10603 ;; Hardware stack levels used:    1
 10604 ;; Hardware stack levels required when called:    4
 10605 ;; This function calls:
 10606 ;;		___lldiv
 10607 ;; This function is called by:
 10608 ;;		_initRTC
 10609 ;;		_testFrequency
 10610 ;; This function uses a non-reentrant model
 10611 ;;
 10612                           
 10613                           	psect	text35
 10614  003CF6                     __ptext35:
 10615                           	opt stack 0
 10616  003CF6                     _I2C_Master_Init:
 10617                           	opt stack 23
 10618                           
 10619                           ;I2C.c: 16: SSPSTAT = 0b00000000;
 10620                           
 10621                           ;incstack = 0
 10622  003CF6  0E00               	movlw	0
 10623  003CF8  6EC7               	movwf	4039,c	;volatile
 10624                           
 10625                           ;I2C.c: 17: SSPCON1 = 0b00101000;
 10626  003CFA  0E28               	movlw	40
 10627  003CFC  6EC6               	movwf	4038,c	;volatile
 10628                           
 10629                           ;I2C.c: 18: SSPCON2 = 0b00000000;
 10630  003CFE  0E00               	movlw	0
 10631  003D00  6EC5               	movwf	4037,c	;volatile
 10632                           
 10633                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
 10634  003D02  0E80               	movlw	128
 10635  003D04  6E23               	movwf	___lldiv@dividend,c
 10636  003D06  0E96               	movlw	150
 10637  003D08  6E24               	movwf	___lldiv@dividend+1,c
 10638  003D0A  0E98               	movlw	152
 10639  003D0C  6E25               	movwf	___lldiv@dividend+2,c
 10640  003D0E  0E00               	movlw	0
 10641  003D10  6E26               	movwf	___lldiv@dividend+3,c
 10642  003D12  C030  F034         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 10643  003D16  C031  F035         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 10644  003D1A  C032  F036         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 10645  003D1E  C033  F037         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 10646  003D22  0E02               	movlw	2
 10647  003D24                     u6115:
 10648  003D24  90D8               	bcf	status,0,c
 10649  003D26  3634               	rlcf	??_I2C_Master_Init,f,c
 10650  003D28  3635               	rlcf	??_I2C_Master_Init+1,f,c
 10651  003D2A  3636               	rlcf	??_I2C_Master_Init+2,f,c
 10652  003D2C  3637               	rlcf	??_I2C_Master_Init+3,f,c
 10653  003D2E  2EE8               	decfsz	wreg,f,c
 10654  003D30  D7F9               	goto	u6115
 10655  003D32  C034  F027         	movff	??_I2C_Master_Init,___lldiv@divisor
 10656  003D36  C035  F028         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 10657  003D3A  C036  F029         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 10658  003D3E  C037  F02A         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 10659  003D42  EC59  F01C         	call	___lldiv	;wreg free
 10660  003D46  0423               	decf	?___lldiv,w,c
 10661  003D48  6EC8               	movwf	4040,c	;volatile
 10662                           
 10663                           ;I2C.c: 20: TRISC3 = 1;
 10664  003D4A  8694               	bsf	3988,3,c	;volatile
 10665                           
 10666                           ;I2C.c: 21: TRISC4 = 1;
 10667  003D4C  8894               	bsf	3988,4,c	;volatile
 10668  003D4E  0012               	return		;funcret
 10669  003D50                     __end_of_I2C_Master_Init:
 10670                           	opt stack 0
 10671                           tblptru	equ	0xFF8
 10672                           tblptrh	equ	0xFF7
 10673                           tblptrl	equ	0xFF6
 10674                           tablat	equ	0xFF5
 10675                           prodh	equ	0xFF4
 10676                           prodl	equ	0xFF3
 10677                           postinc0	equ	0xFEE
 10678                           wreg	equ	0xFE8
 10679                           postdec1	equ	0xFE5
 10680                           fsr1l	equ	0xFE1
 10681                           indf2	equ	0xFDF
 10682                           postinc2	equ	0xFDE
 10683                           postdec2	equ	0xFDD
 10684                           fsr2h	equ	0xFDA
 10685                           fsr2l	equ	0xFD9
 10686                           status	equ	0xFD8
 10687                           
 10688 ;; *************** function ___lldiv *****************
 10689 ;; Defined at:
 10690 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 10691 ;; Parameters:    Size  Location     Type
 10692 ;;  dividend        4   34[COMRAM] unsigned long 
 10693 ;;  divisor         4   38[COMRAM] unsigned long 
 10694 ;; Auto vars:     Size  Location     Type
 10695 ;;  quotient        4   42[COMRAM] unsigned long 
 10696 ;;  counter         1   46[COMRAM] unsigned char 
 10697 ;; Return value:  Size  Location     Type
 10698 ;;                  4   34[COMRAM] unsigned long 
 10699 ;; Registers used:
 10700 ;;		wreg, status,2, status,0
 10701 ;; Tracked objects:
 10702 ;;		On entry : 0/0
 10703 ;;		On exit  : 0/0
 10704 ;;		Unchanged: 0/0
 10705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10706 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10707 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10709 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10710 ;;Total ram usage:       13 bytes
 10711 ;; Hardware stack levels used:    1
 10712 ;; Hardware stack levels required when called:    3
 10713 ;; This function calls:
 10714 ;;		Nothing
 10715 ;; This function is called by:
 10716 ;;		_I2C_Master_Init
 10717 ;;		_printf
 10718 ;; This function uses a non-reentrant model
 10719 ;;
 10720                           
 10721                           	psect	text36
 10722  0038B2                     __ptext36:
 10723                           	opt stack 0
 10724  0038B2                     ___lldiv:
 10725                           	opt stack 25
 10726                           
 10727                           ;incstack = 0
 10728  0038B2  0E00               	movlw	0
 10729  0038B4  6E2B               	movwf	___lldiv@quotient,c
 10730  0038B6  0E00               	movlw	0
 10731  0038B8  6E2C               	movwf	___lldiv@quotient+1,c
 10732  0038BA  0E00               	movlw	0
 10733  0038BC  6E2D               	movwf	___lldiv@quotient+2,c
 10734  0038BE  0E00               	movlw	0
 10735  0038C0  6E2E               	movwf	___lldiv@quotient+3,c
 10736  0038C2  5027               	movf	___lldiv@divisor,w,c
 10737  0038C4  1028               	iorwf	___lldiv@divisor+1,w,c
 10738  0038C6  1029               	iorwf	___lldiv@divisor+2,w,c
 10739  0038C8  102A               	iorwf	___lldiv@divisor+3,w,c
 10740  0038CA  B4D8               	btfsc	status,2,c
 10741  0038CC  D02A               	goto	l1273
 10742  0038CE  0E01               	movlw	1
 10743  0038D0  6E2F               	movwf	___lldiv@counter,c
 10744  0038D2  D006               	goto	l6281
 10745  0038D4                     l6279:
 10746  0038D4  90D8               	bcf	status,0,c
 10747  0038D6  3627               	rlcf	___lldiv@divisor,f,c
 10748  0038D8  3628               	rlcf	___lldiv@divisor+1,f,c
 10749  0038DA  3629               	rlcf	___lldiv@divisor+2,f,c
 10750  0038DC  362A               	rlcf	___lldiv@divisor+3,f,c
 10751  0038DE  2A2F               	incf	___lldiv@counter,f,c
 10752  0038E0                     l6281:
 10753  0038E0  AE2A               	btfss	___lldiv@divisor+3,7,c
 10754  0038E2  D7F8               	goto	l6279
 10755  0038E4                     l6283:
 10756  0038E4  90D8               	bcf	status,0,c
 10757  0038E6  362B               	rlcf	___lldiv@quotient,f,c
 10758  0038E8  362C               	rlcf	___lldiv@quotient+1,f,c
 10759  0038EA  362D               	rlcf	___lldiv@quotient+2,f,c
 10760  0038EC  362E               	rlcf	___lldiv@quotient+3,f,c
 10761  0038EE  5027               	movf	___lldiv@divisor,w,c
 10762  0038F0  5C23               	subwf	___lldiv@dividend,w,c
 10763  0038F2  5028               	movf	___lldiv@divisor+1,w,c
 10764  0038F4  5824               	subwfb	___lldiv@dividend+1,w,c
 10765  0038F6  5029               	movf	___lldiv@divisor+2,w,c
 10766  0038F8  5825               	subwfb	___lldiv@dividend+2,w,c
 10767  0038FA  502A               	movf	___lldiv@divisor+3,w,c
 10768  0038FC  5826               	subwfb	___lldiv@dividend+3,w,c
 10769  0038FE  A0D8               	btfss	status,0,c
 10770  003900  D009               	goto	l6291
 10771  003902  5027               	movf	___lldiv@divisor,w,c
 10772  003904  5E23               	subwf	___lldiv@dividend,f,c
 10773  003906  5028               	movf	___lldiv@divisor+1,w,c
 10774  003908  5A24               	subwfb	___lldiv@dividend+1,f,c
 10775  00390A  5029               	movf	___lldiv@divisor+2,w,c
 10776  00390C  5A25               	subwfb	___lldiv@dividend+2,f,c
 10777  00390E  502A               	movf	___lldiv@divisor+3,w,c
 10778  003910  5A26               	subwfb	___lldiv@dividend+3,f,c
 10779  003912  802B               	bsf	___lldiv@quotient,0,c
 10780  003914                     l6291:
 10781  003914  90D8               	bcf	status,0,c
 10782  003916  322A               	rrcf	___lldiv@divisor+3,f,c
 10783  003918  3229               	rrcf	___lldiv@divisor+2,f,c
 10784  00391A  3228               	rrcf	___lldiv@divisor+1,f,c
 10785  00391C  3227               	rrcf	___lldiv@divisor,f,c
 10786  00391E  2E2F               	decfsz	___lldiv@counter,f,c
 10787  003920  D7E1               	goto	l6283
 10788  003922                     l1273:
 10789  003922  C02B  F023         	movff	___lldiv@quotient,?___lldiv
 10790  003926  C02C  F024         	movff	___lldiv@quotient+1,?___lldiv+1
 10791  00392A  C02D  F025         	movff	___lldiv@quotient+2,?___lldiv+2
 10792  00392E  C02E  F026         	movff	___lldiv@quotient+3,?___lldiv+3
 10793  003932  0012               	return		;funcret
 10794  003934                     __end_of___lldiv:
 10795                           	opt stack 0
 10796                           tblptru	equ	0xFF8
 10797                           tblptrh	equ	0xFF7
 10798                           tblptrl	equ	0xFF6
 10799                           tablat	equ	0xFF5
 10800                           prodh	equ	0xFF4
 10801                           prodl	equ	0xFF3
 10802                           postinc0	equ	0xFEE
 10803                           wreg	equ	0xFE8
 10804                           postdec1	equ	0xFE5
 10805                           fsr1l	equ	0xFE1
 10806                           indf2	equ	0xFDF
 10807                           postinc2	equ	0xFDE
 10808                           postdec2	equ	0xFDD
 10809                           fsr2h	equ	0xFDA
 10810                           fsr2l	equ	0xFD9
 10811                           status	equ	0xFD8
 10812                           
 10813 ;; *************** function _getTime *****************
 10814 ;; Defined at:
 10815 ;;		line 23 in file "RTC.c"
 10816 ;; Parameters:    Size  Location     Type
 10817 ;;		None
 10818 ;; Auto vars:     Size  Location     Type
 10819 ;;  i               1   55[COMRAM] unsigned char 
 10820 ;;  time           14   41[COMRAM] int [7]
 10821 ;; Return value:  Size  Location     Type
 10822 ;;                  2   37[COMRAM] PTR int 
 10823 ;; Registers used:
 10824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10825 ;; Tracked objects:
 10826 ;;		On entry : 0/0
 10827 ;;		On exit  : 0/0
 10828 ;;		Unchanged: 0/0
 10829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10830 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10831 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10832 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10833 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10834 ;;Total ram usage:       19 bytes
 10835 ;; Hardware stack levels used:    1
 10836 ;; Hardware stack levels required when called:    5
 10837 ;; This function calls:
 10838 ;;		_I2C_Master_Read
 10839 ;;		_I2C_Master_Start
 10840 ;;		_I2C_Master_Stop
 10841 ;;		_I2C_Master_Write
 10842 ;; This function is called by:
 10843 ;;		_showDateTime
 10844 ;; This function uses a non-reentrant model
 10845 ;;
 10846                           
 10847                           	psect	text37
 10848  003934                     __ptext37:
 10849                           	opt stack 0
 10850  003934                     _getTime:
 10851                           	opt stack 23
 10852                           
 10853                           ;RTC.c: 24: int time[7];
 10854                           ;RTC.c: 26: (INTCONbits.GIE = 0);
 10855                           
 10856                           ;incstack = 0
 10857  003934  9EF2               	bcf	intcon,7,c	;volatile
 10858                           
 10859                           ;RTC.c: 29: I2C_Master_Start();
 10860  003936  EC0C  F021         	call	_I2C_Master_Start	;wreg free
 10861                           
 10862                           ;RTC.c: 30: I2C_Master_Write(0b11010000);
 10863  00393A  0E00               	movlw	0
 10864  00393C  6E25               	movwf	I2C_Master_Write@d+1,c
 10865  00393E  0ED0               	movlw	208
 10866  003940  6E24               	movwf	I2C_Master_Write@d,c
 10867  003942  ECF7  F020         	call	_I2C_Master_Write	;wreg free
 10868                           
 10869                           ;RTC.c: 31: I2C_Master_Write(0x00);
 10870  003946  0E00               	movlw	0
 10871  003948  6E25               	movwf	I2C_Master_Write@d+1,c
 10872  00394A  0E00               	movlw	0
 10873  00394C  6E24               	movwf	I2C_Master_Write@d,c
 10874  00394E  ECF7  F020         	call	_I2C_Master_Write	;wreg free
 10875                           
 10876                           ;RTC.c: 32: I2C_Master_Stop();
 10877  003952  EC08  F021         	call	_I2C_Master_Stop	;wreg free
 10878                           
 10879                           ;RTC.c: 35: I2C_Master_Start();
 10880  003956  EC0C  F021         	call	_I2C_Master_Start	;wreg free
 10881                           
 10882                           ;RTC.c: 36: I2C_Master_Write(0b11010001);
 10883  00395A  0E00               	movlw	0
 10884  00395C  6E25               	movwf	I2C_Master_Write@d+1,c
 10885  00395E  0ED1               	movlw	209
 10886  003960  6E24               	movwf	I2C_Master_Write@d,c
 10887  003962  ECF7  F020         	call	_I2C_Master_Write	;wreg free
 10888                           
 10889                           ;RTC.c: 37: for(unsigned char i=0;i<6;i++){
 10890  003966  0E00               	movlw	0
 10891  003968  6E38               	movwf	getTime@i,c
 10892  00396A                     l7117:
 10893  00396A  0E05               	movlw	5
 10894  00396C  6438               	cpfsgt	getTime@i,c
 10895  00396E  D001               	goto	l7121
 10896  003970  D013               	goto	l7127
 10897  003972                     l7121:
 10898                           
 10899                           ;RTC.c: 38: time[i] = I2C_Master_Read(1);
 10900  003972  0E01               	movlw	1
 10901  003974  EC4B  F020         	call	_I2C_Master_Read
 10902  003978  6E28               	movwf	??_getTime& (0+255),c
 10903  00397A  6A29               	clrf	(??_getTime+1)& (0+255),c
 10904  00397C  5038               	movf	getTime@i,w,c
 10905  00397E  0D02               	mullw	2
 10906  003980  0E2A               	movlw	low getTime@time
 10907  003982  24F3               	addwf	prodl,w,c
 10908  003984  6ED9               	movwf	fsr2l,c
 10909  003986  0E00               	movlw	high getTime@time
 10910  003988  20F4               	addwfc	prodh,w,c
 10911  00398A  6EDA               	movwf	fsr2h,c
 10912  00398C  C028  FFDE         	movff	??_getTime,postinc2
 10913  003990  C029  FFDD         	movff	??_getTime+1,postdec2
 10914  003994  2A38               	incf	getTime@i,f,c
 10915  003996  D7E9               	goto	l7117
 10916  003998                     l7127:
 10917                           
 10918                           ;RTC.c: 39: }
 10919                           ;RTC.c: 40: time[6] = I2C_Master_Read(0);
 10920  003998  0E00               	movlw	0
 10921  00399A  EC4B  F020         	call	_I2C_Master_Read
 10922  00399E  6E28               	movwf	??_getTime& (0+255),c
 10923  0039A0  5028               	movf	??_getTime,w,c
 10924  0039A2  6E36               	movwf	getTime@time+12,c
 10925  0039A4  6A37               	clrf	getTime@time+13,c
 10926                           
 10927                           ;RTC.c: 41: I2C_Master_Stop();
 10928  0039A6  EC08  F021         	call	_I2C_Master_Stop	;wreg free
 10929                           
 10930                           ;RTC.c: 43: (INTCONbits.GIE = 1);
 10931  0039AA  8EF2               	bsf	intcon,7,c	;volatile
 10932                           
 10933                           ;RTC.c: 45: return time;
 10934  0039AC  0E2A               	movlw	low getTime@time
 10935  0039AE  6E26               	movwf	?_getTime,c
 10936  0039B0  0E00               	movlw	high getTime@time
 10937  0039B2  6E27               	movwf	?_getTime+1,c
 10938  0039B4  0012               	return	
 10939  0039B6                     __end_of_getTime:
 10940                           	opt stack 0
 10941                           tblptru	equ	0xFF8
 10942                           tblptrh	equ	0xFF7
 10943                           tblptrl	equ	0xFF6
 10944                           tablat	equ	0xFF5
 10945                           prodh	equ	0xFF4
 10946                           prodl	equ	0xFF3
 10947                           intcon	equ	0xFF2
 10948                           postinc0	equ	0xFEE
 10949                           wreg	equ	0xFE8
 10950                           postdec1	equ	0xFE5
 10951                           fsr1l	equ	0xFE1
 10952                           indf2	equ	0xFDF
 10953                           postinc2	equ	0xFDE
 10954                           postdec2	equ	0xFDD
 10955                           fsr2h	equ	0xFDA
 10956                           fsr2l	equ	0xFD9
 10957                           status	equ	0xFD8
 10958                           
 10959 ;; *************** function _I2C_Master_Write *****************
 10960 ;; Defined at:
 10961 ;;		line 47 in file "I2C.c"
 10962 ;; Parameters:    Size  Location     Type
 10963 ;;  d               2   35[COMRAM] unsigned int 
 10964 ;; Auto vars:     Size  Location     Type
 10965 ;;		None
 10966 ;; Return value:  Size  Location     Type
 10967 ;;                  1    wreg      void 
 10968 ;; Registers used:
 10969 ;;		wreg, status,2, status,0, cstack
 10970 ;; Tracked objects:
 10971 ;;		On entry : 0/0
 10972 ;;		On exit  : 0/0
 10973 ;;		Unchanged: 0/0
 10974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10975 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10978 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10979 ;;Total ram usage:        2 bytes
 10980 ;; Hardware stack levels used:    1
 10981 ;; Hardware stack levels required when called:    4
 10982 ;; This function calls:
 10983 ;;		_I2C_Master_Wait
 10984 ;; This function is called by:
 10985 ;;		_getTime
 10986 ;;		_testFrequency
 10987 ;;		_setTime
 10988 ;; This function uses a non-reentrant model
 10989 ;;
 10990                           
 10991                           	psect	text38
 10992  0041EE                     __ptext38:
 10993                           	opt stack 0
 10994  0041EE                     _I2C_Master_Write:
 10995                           	opt stack 23
 10996                           
 10997                           ;I2C.c: 49: I2C_Master_Wait();
 10998                           
 10999                           ;incstack = 0
 11000  0041EE  ECE8  F020         	call	_I2C_Master_Wait	;wreg free
 11001                           
 11002                           ;I2C.c: 50: SSPBUF = d;
 11003  0041F2  C024  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 11004  0041F6  0012               	return		;funcret
 11005  0041F8                     __end_of_I2C_Master_Write:
 11006                           	opt stack 0
 11007                           tblptru	equ	0xFF8
 11008                           tblptrh	equ	0xFF7
 11009                           tblptrl	equ	0xFF6
 11010                           tablat	equ	0xFF5
 11011                           prodh	equ	0xFF4
 11012                           prodl	equ	0xFF3
 11013                           intcon	equ	0xFF2
 11014                           postinc0	equ	0xFEE
 11015                           wreg	equ	0xFE8
 11016                           postdec1	equ	0xFE5
 11017                           fsr1l	equ	0xFE1
 11018                           indf2	equ	0xFDF
 11019                           postinc2	equ	0xFDE
 11020                           postdec2	equ	0xFDD
 11021                           fsr2h	equ	0xFDA
 11022                           fsr2l	equ	0xFD9
 11023                           status	equ	0xFD8
 11024                           
 11025 ;; *************** function _I2C_Master_Stop *****************
 11026 ;; Defined at:
 11027 ;;		line 41 in file "I2C.c"
 11028 ;; Parameters:    Size  Location     Type
 11029 ;;		None
 11030 ;; Auto vars:     Size  Location     Type
 11031 ;;		None
 11032 ;; Return value:  Size  Location     Type
 11033 ;;                  2  446[None  ] int 
 11034 ;; Registers used:
 11035 ;;		wreg, status,2, status,0, cstack
 11036 ;; Tracked objects:
 11037 ;;		On entry : 0/0
 11038 ;;		On exit  : 0/0
 11039 ;;		Unchanged: 0/0
 11040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11045 ;;Total ram usage:        0 bytes
 11046 ;; Hardware stack levels used:    1
 11047 ;; Hardware stack levels required when called:    4
 11048 ;; This function calls:
 11049 ;;		_I2C_Master_Wait
 11050 ;; This function is called by:
 11051 ;;		_getTime
 11052 ;;		_testFrequency
 11053 ;;		_setTime
 11054 ;; This function uses a non-reentrant model
 11055 ;;
 11056                           
 11057                           	psect	text39
 11058  004210                     __ptext39:
 11059                           	opt stack 0
 11060  004210                     _I2C_Master_Stop:
 11061                           	opt stack 23
 11062                           
 11063                           ;I2C.c: 43: I2C_Master_Wait();
 11064                           
 11065                           ;incstack = 0
 11066  004210  ECE8  F020         	call	_I2C_Master_Wait	;wreg free
 11067                           
 11068                           ;I2C.c: 44: PEN = 1;
 11069  004214  84C5               	bsf	4037,2,c	;volatile
 11070  004216  0012               	return		;funcret
 11071  004218                     __end_of_I2C_Master_Stop:
 11072                           	opt stack 0
 11073                           tblptru	equ	0xFF8
 11074                           tblptrh	equ	0xFF7
 11075                           tblptrl	equ	0xFF6
 11076                           tablat	equ	0xFF5
 11077                           prodh	equ	0xFF4
 11078                           prodl	equ	0xFF3
 11079                           intcon	equ	0xFF2
 11080                           postinc0	equ	0xFEE
 11081                           wreg	equ	0xFE8
 11082                           postdec1	equ	0xFE5
 11083                           fsr1l	equ	0xFE1
 11084                           indf2	equ	0xFDF
 11085                           postinc2	equ	0xFDE
 11086                           postdec2	equ	0xFDD
 11087                           fsr2h	equ	0xFDA
 11088                           fsr2l	equ	0xFD9
 11089                           status	equ	0xFD8
 11090                           
 11091 ;; *************** function _I2C_Master_Start *****************
 11092 ;; Defined at:
 11093 ;;		line 29 in file "I2C.c"
 11094 ;; Parameters:    Size  Location     Type
 11095 ;;		None
 11096 ;; Auto vars:     Size  Location     Type
 11097 ;;		None
 11098 ;; Return value:  Size  Location     Type
 11099 ;;                  2  442[None  ] int 
 11100 ;; Registers used:
 11101 ;;		wreg, status,2, status,0, cstack
 11102 ;; Tracked objects:
 11103 ;;		On entry : 0/0
 11104 ;;		On exit  : 0/0
 11105 ;;		Unchanged: 0/0
 11106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11111 ;;Total ram usage:        0 bytes
 11112 ;; Hardware stack levels used:    1
 11113 ;; Hardware stack levels required when called:    4
 11114 ;; This function calls:
 11115 ;;		_I2C_Master_Wait
 11116 ;; This function is called by:
 11117 ;;		_getTime
 11118 ;;		_testFrequency
 11119 ;;		_setTime
 11120 ;; This function uses a non-reentrant model
 11121 ;;
 11122                           
 11123                           	psect	text40
 11124  004218                     __ptext40:
 11125                           	opt stack 0
 11126  004218                     _I2C_Master_Start:
 11127                           	opt stack 23
 11128                           
 11129                           ;I2C.c: 31: I2C_Master_Wait();
 11130                           
 11131                           ;incstack = 0
 11132  004218  ECE8  F020         	call	_I2C_Master_Wait	;wreg free
 11133                           
 11134                           ;I2C.c: 32: SEN = 1;
 11135  00421C  80C5               	bsf	4037,0,c	;volatile
 11136  00421E  0012               	return		;funcret
 11137  004220                     __end_of_I2C_Master_Start:
 11138                           	opt stack 0
 11139                           tblptru	equ	0xFF8
 11140                           tblptrh	equ	0xFF7
 11141                           tblptrl	equ	0xFF6
 11142                           tablat	equ	0xFF5
 11143                           prodh	equ	0xFF4
 11144                           prodl	equ	0xFF3
 11145                           intcon	equ	0xFF2
 11146                           postinc0	equ	0xFEE
 11147                           wreg	equ	0xFE8
 11148                           postdec1	equ	0xFE5
 11149                           fsr1l	equ	0xFE1
 11150                           indf2	equ	0xFDF
 11151                           postinc2	equ	0xFDE
 11152                           postdec2	equ	0xFDD
 11153                           fsr2h	equ	0xFDA
 11154                           fsr2l	equ	0xFD9
 11155                           status	equ	0xFD8
 11156                           
 11157 ;; *************** function _I2C_Master_Read *****************
 11158 ;; Defined at:
 11159 ;;		line 53 in file "I2C.c"
 11160 ;; Parameters:    Size  Location     Type
 11161 ;;  a               1    wreg     unsigned char 
 11162 ;; Auto vars:     Size  Location     Type
 11163 ;;  a               1   35[COMRAM] unsigned char 
 11164 ;;  temp            1   36[COMRAM] unsigned char 
 11165 ;; Return value:  Size  Location     Type
 11166 ;;                  1    wreg      unsigned char 
 11167 ;; Registers used:
 11168 ;;		wreg, status,2, status,0, cstack
 11169 ;; Tracked objects:
 11170 ;;		On entry : 0/0
 11171 ;;		On exit  : 0/0
 11172 ;;		Unchanged: 0/0
 11173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11175 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11177 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11178 ;;Total ram usage:        2 bytes
 11179 ;; Hardware stack levels used:    1
 11180 ;; Hardware stack levels required when called:    4
 11181 ;; This function calls:
 11182 ;;		_I2C_Master_Wait
 11183 ;; This function is called by:
 11184 ;;		_getTime
 11185 ;;		_testFrequency
 11186 ;; This function uses a non-reentrant model
 11187 ;;
 11188                           
 11189                           	psect	text41
 11190  004096                     __ptext41:
 11191                           	opt stack 0
 11192  004096                     _I2C_Master_Read:
 11193                           	opt stack 23
 11194                           
 11195                           ;incstack = 0
 11196                           ;I2C_Master_Read@a stored from wreg
 11197  004096  6E24               	movwf	I2C_Master_Read@a,c
 11198                           
 11199                           ;I2C.c: 55: unsigned char temp;
 11200                           ;I2C.c: 56: I2C_Master_Wait();
 11201  004098  ECE8  F020         	call	_I2C_Master_Wait	;wreg free
 11202                           
 11203                           ;I2C.c: 57: RCEN = 1;
 11204  00409C  86C5               	bsf	4037,3,c	;volatile
 11205                           
 11206                           ;I2C.c: 58: I2C_Master_Wait();
 11207  00409E  ECE8  F020         	call	_I2C_Master_Wait	;wreg free
 11208                           
 11209                           ;I2C.c: 59: temp = SSPBUF;
 11210  0040A2  CFC9 F025          	movff	4041,I2C_Master_Read@temp	;volatile
 11211                           
 11212                           ;I2C.c: 60: I2C_Master_Wait();
 11213  0040A6  ECE8  F020         	call	_I2C_Master_Wait	;wreg free
 11214                           
 11215                           ;I2C.c: 61: ACKDT = (a)?0:1;
 11216  0040AA  5024               	movf	I2C_Master_Read@a,w,c
 11217  0040AC  A4D8               	btfss	status,2,c
 11218  0040AE  D002               	goto	u6120
 11219  0040B0  8AC5               	bsf	4037,5,c	;volatile
 11220  0040B2  D001               	goto	l6331
 11221  0040B4                     u6120:
 11222  0040B4  9AC5               	bcf	4037,5,c	;volatile
 11223  0040B6                     l6331:
 11224                           
 11225                           ;I2C.c: 62: ACKEN = 1;
 11226  0040B6  88C5               	bsf	4037,4,c	;volatile
 11227                           
 11228                           ;I2C.c: 63: return temp;
 11229  0040B8  5025               	movf	I2C_Master_Read@temp,w,c
 11230  0040BA  0012               	return	
 11231  0040BC                     __end_of_I2C_Master_Read:
 11232                           	opt stack 0
 11233                           tblptru	equ	0xFF8
 11234                           tblptrh	equ	0xFF7
 11235                           tblptrl	equ	0xFF6
 11236                           tablat	equ	0xFF5
 11237                           prodh	equ	0xFF4
 11238                           prodl	equ	0xFF3
 11239                           intcon	equ	0xFF2
 11240                           postinc0	equ	0xFEE
 11241                           wreg	equ	0xFE8
 11242                           postdec1	equ	0xFE5
 11243                           fsr1l	equ	0xFE1
 11244                           indf2	equ	0xFDF
 11245                           postinc2	equ	0xFDE
 11246                           postdec2	equ	0xFDD
 11247                           fsr2h	equ	0xFDA
 11248                           fsr2l	equ	0xFD9
 11249                           status	equ	0xFD8
 11250                           
 11251 ;; *************** function _I2C_Master_Wait *****************
 11252 ;; Defined at:
 11253 ;;		line 24 in file "I2C.c"
 11254 ;; Parameters:    Size  Location     Type
 11255 ;;		None
 11256 ;; Auto vars:     Size  Location     Type
 11257 ;;		None
 11258 ;; Return value:  Size  Location     Type
 11259 ;;                  1    wreg      void 
 11260 ;; Registers used:
 11261 ;;		wreg, status,2, status,0
 11262 ;; Tracked objects:
 11263 ;;		On entry : 0/0
 11264 ;;		On exit  : 0/0
 11265 ;;		Unchanged: 0/0
 11266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11269 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11270 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11271 ;;Total ram usage:        1 bytes
 11272 ;; Hardware stack levels used:    1
 11273 ;; Hardware stack levels required when called:    3
 11274 ;; This function calls:
 11275 ;;		Nothing
 11276 ;; This function is called by:
 11277 ;;		_I2C_Master_Start
 11278 ;;		_I2C_Master_Stop
 11279 ;;		_I2C_Master_Write
 11280 ;;		_I2C_Master_Read
 11281 ;;		_I2C_Master_RepeatedStart
 11282 ;; This function uses a non-reentrant model
 11283 ;;
 11284                           
 11285                           	psect	text42
 11286  0041D0                     __ptext42:
 11287                           	opt stack 0
 11288  0041D0                     _I2C_Master_Wait:
 11289                           	opt stack 23
 11290  0041D0                     l517:
 11291  0041D0  B4C7               	btfsc	4039,2,c	;volatile
 11292  0041D2  D7FE               	goto	l517
 11293  0041D4  CFC5 F023          	movff	4037,??_I2C_Master_Wait	;volatile
 11294  0041D8  0E1F               	movlw	31
 11295  0041DA  1623               	andwf	??_I2C_Master_Wait,f,c
 11296  0041DC  B4D8               	btfsc	status,2,c
 11297  0041DE  0012               	return	
 11298  0041E0  D7F7               	goto	l517
 11299  0041E2                     __end_of_I2C_Master_Wait:
 11300                           	opt stack 0
 11301                           tblptru	equ	0xFF8
 11302                           tblptrh	equ	0xFF7
 11303                           tblptrl	equ	0xFF6
 11304                           tablat	equ	0xFF5
 11305                           prodh	equ	0xFF4
 11306                           prodl	equ	0xFF3
 11307                           intcon	equ	0xFF2
 11308                           postinc0	equ	0xFEE
 11309                           wreg	equ	0xFE8
 11310                           postdec1	equ	0xFE5
 11311                           fsr1l	equ	0xFE1
 11312                           indf2	equ	0xFDF
 11313                           postinc2	equ	0xFDE
 11314                           postdec2	equ	0xFDD
 11315                           fsr2h	equ	0xFDA
 11316                           fsr2l	equ	0xFD9
 11317                           status	equ	0xFD8
 11318                           
 11319 ;; *************** function _readPastRun *****************
 11320 ;; Defined at:
 11321 ;;		line 23 in file "eeprom.c"
 11322 ;; Parameters:    Size  Location     Type
 11323 ;;  run             2    0[BANK0 ] int 
 11324 ;; Auto vars:     Size  Location     Type
 11325 ;;  i               2   16[BANK0 ] int 
 11326 ;;  data           14    2[BANK0 ] int [7]
 11327 ;; Return value:  Size  Location     Type
 11328 ;;                  2    0[BANK0 ] PTR int 
 11329 ;; Registers used:
 11330 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11331 ;; Tracked objects:
 11332 ;;		On entry : 0/0
 11333 ;;		On exit  : 0/0
 11334 ;;		Unchanged: 0/0
 11335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11336 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11337 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11339 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11340 ;;Total ram usage:       18 bytes
 11341 ;; Hardware stack levels used:    1
 11342 ;; Hardware stack levels required when called:    4
 11343 ;; This function calls:
 11344 ;;		___wmul
 11345 ;;		_eepromRead
 11346 ;; This function is called by:
 11347 ;;		_showInterface
 11348 ;; This function uses a non-reentrant model
 11349 ;;
 11350                           
 11351                           	psect	text43
 11352  003688                     __ptext43:
 11353                           	opt stack 0
 11354  003688                     _readPastRun:
 11355                           	opt stack 25
 11356                           
 11357                           ;eeprom.c: 24: int data[7];
 11358                           ;eeprom.c: 25: for(int i = 0; i < 7; i++){
 11359                           
 11360                           ;incstack = 0
 11361  003688  0E00               	movlw	0
 11362  00368A  0100               	movlb	0	; () banked
 11363  00368C  6F91               	movwf	(readPastRun@i+1)& (0+255),b
 11364  00368E  0E00               	movlw	0
 11365  003690  6F90               	movwf	readPastRun@i& (0+255),b
 11366  003692                     l7329:
 11367                           
 11368                           ; BSR set to: 0
 11369  003692  0100               	movlb	0	; () banked
 11370  003694  BF91               	btfsc	(readPastRun@i+1)& (0+255),7,b
 11371  003696  D008               	goto	l7333
 11372  003698  0100               	movlb	0	; () banked
 11373  00369A  5191               	movf	(readPastRun@i+1)& (0+255),w,b
 11374  00369C  E137               	bnz	l7339
 11375  00369E  0E07               	movlw	7
 11376  0036A0  0100               	movlb	0	; () banked
 11377  0036A2  5D90               	subwf	readPastRun@i& (0+255),w,b
 11378  0036A4  B0D8               	btfsc	status,0,c
 11379  0036A6  D032               	goto	l7339
 11380  0036A8                     l7333:
 11381                           
 11382                           ; BSR set to: 0
 11383                           ;eeprom.c: 26: data[i] = eepromRead((run*7+1) + i);
 11384  0036A8  C080  F031         	movff	readPastRun@run,___wmul@multiplier
 11385  0036AC  C081  F032         	movff	readPastRun@run+1,___wmul@multiplier+1
 11386  0036B0  0E00               	movlw	0
 11387  0036B2  6E34               	movwf	___wmul@multiplicand+1,c
 11388  0036B4  0E07               	movlw	7
 11389  0036B6  6E33               	movwf	___wmul@multiplicand,c
 11390  0036B8  EC5E  F020         	call	___wmul	;wreg free
 11391  0036BC  0100               	movlb	0	; () banked
 11392  0036BE  5190               	movf	readPastRun@i& (0+255),w,b
 11393  0036C0  2631               	addwf	?___wmul,f,c
 11394  0036C2  0100               	movlb	0	; () banked
 11395  0036C4  5191               	movf	(readPastRun@i+1)& (0+255),w,b
 11396  0036C6  2232               	addwfc	?___wmul+1,f,c
 11397  0036C8  0E01               	movlw	1
 11398  0036CA  2631               	addwf	?___wmul,f,c
 11399  0036CC  0E00               	movlw	0
 11400  0036CE  2232               	addwfc	?___wmul+1,f,c
 11401  0036D0  C031  F037         	movff	?___wmul,eepromRead@address
 11402  0036D4  C032  F038         	movff	?___wmul+1,eepromRead@address+1
 11403  0036D8  0E00               	movlw	0
 11404  0036DA  BE38               	btfsc	eepromRead@address+1,7,c
 11405  0036DC  0EFF               	movlw	-1
 11406  0036DE  6E39               	movwf	eepromRead@address+2,c
 11407  0036E0  6E3A               	movwf	eepromRead@address+3,c
 11408  0036E2  ECC4  F020         	call	_eepromRead	;wreg free
 11409  0036E6  90D8               	bcf	status,0,c
 11410  0036E8  0100               	movlb	0	; () banked
 11411  0036EA  3590               	rlcf	readPastRun@i& (0+255),w,b
 11412  0036EC  6ED9               	movwf	fsr2l,c
 11413  0036EE  0100               	movlb	0	; () banked
 11414  0036F0  3591               	rlcf	(readPastRun@i+1)& (0+255),w,b
 11415  0036F2  6EDA               	movwf	fsr2h,c
 11416  0036F4  0E82               	movlw	low readPastRun@data
 11417  0036F6  26D9               	addwf	fsr2l,f,c
 11418  0036F8  0E00               	movlw	high readPastRun@data
 11419  0036FA  22DA               	addwfc	fsr2h,f,c
 11420  0036FC  C037  FFDE         	movff	?_eepromRead,postinc2
 11421  003700  C038  FFDD         	movff	?_eepromRead+1,postdec2
 11422                           
 11423                           ; BSR set to: 0
 11424  003704  0100               	movlb	0	; () banked
 11425  003706  4B90               	infsnz	readPastRun@i& (0+255),f,b
 11426  003708  2B91               	incf	(readPastRun@i+1)& (0+255),f,b
 11427  00370A  D7C3               	goto	l7329
 11428  00370C                     l7339:
 11429                           
 11430                           ; BSR set to: 0
 11431                           ;eeprom.c: 27: }
 11432                           ;eeprom.c: 28: return data;
 11433  00370C  0E82               	movlw	low readPastRun@data
 11434  00370E  0100               	movlb	0	; () banked
 11435  003710  6F80               	movwf	?_readPastRun& (0+255),b
 11436  003712  0E00               	movlw	high readPastRun@data
 11437  003714  0100               	movlb	0	; () banked
 11438  003716  6F81               	movwf	(?_readPastRun+1)& (0+255),b
 11439  003718  0012               	return	
 11440  00371A                     __end_of_readPastRun:
 11441                           	opt stack 0
 11442                           tblptru	equ	0xFF8
 11443                           tblptrh	equ	0xFF7
 11444                           tblptrl	equ	0xFF6
 11445                           tablat	equ	0xFF5
 11446                           prodh	equ	0xFF4
 11447                           prodl	equ	0xFF3
 11448                           intcon	equ	0xFF2
 11449                           postinc0	equ	0xFEE
 11450                           wreg	equ	0xFE8
 11451                           postdec1	equ	0xFE5
 11452                           fsr1l	equ	0xFE1
 11453                           indf2	equ	0xFDF
 11454                           postinc2	equ	0xFDE
 11455                           postdec2	equ	0xFDD
 11456                           fsr2h	equ	0xFDA
 11457                           fsr2l	equ	0xFD9
 11458                           status	equ	0xFD8
 11459                           
 11460 ;; *************** function _saveNewRun *****************
 11461 ;; Defined at:
 11462 ;;		line 31 in file "eeprom.c"
 11463 ;; Parameters:    Size  Location     Type
 11464 ;;  data            2    9[BANK0 ] PTR int 
 11465 ;;		 -> main@run(14), 
 11466 ;; Auto vars:     Size  Location     Type
 11467 ;;  i               2   13[BANK0 ] int 
 11468 ;;  n               2   11[BANK0 ] int 
 11469 ;; Return value:  Size  Location     Type
 11470 ;;                  1    wreg      void 
 11471 ;; Registers used:
 11472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11473 ;; Tracked objects:
 11474 ;;		On entry : 0/0
 11475 ;;		On exit  : 0/0
 11476 ;;		Unchanged: 0/0
 11477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11478 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11479 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11481 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11482 ;;Total ram usage:        6 bytes
 11483 ;; Hardware stack levels used:    1
 11484 ;; Hardware stack levels required when called:    4
 11485 ;; This function calls:
 11486 ;;		___wmul
 11487 ;;		_eepromRead
 11488 ;;		_eepromWrite
 11489 ;; This function is called by:
 11490 ;;		_main
 11491 ;; This function uses a non-reentrant model
 11492 ;;
 11493                           
 11494                           	psect	text44
 11495  002EC4                     __ptext44:
 11496                           	opt stack 0
 11497  002EC4                     _saveNewRun:
 11498                           	opt stack 26
 11499                           
 11500                           ;eeprom.c: 33: eepromWrite(eepromRead(0)+1,0);
 11501                           
 11502                           ; BSR set to: 0
 11503                           ;incstack = 0
 11504  002EC4  0E00               	movlw	0
 11505  002EC6  6E37               	movwf	eepromRead@address,c
 11506  002EC8  0E00               	movlw	0
 11507  002ECA  6E38               	movwf	eepromRead@address+1,c
 11508  002ECC  0E00               	movlw	0
 11509  002ECE  6E39               	movwf	eepromRead@address+2,c
 11510  002ED0  0E00               	movlw	0
 11511  002ED2  6E3A               	movwf	eepromRead@address+3,c
 11512  002ED4  ECC4  F020         	call	_eepromRead	;wreg free
 11513  002ED8  0E01               	movlw	1
 11514  002EDA  2437               	addwf	?_eepromRead,w,c
 11515  002EDC  0100               	movlb	0	; () banked
 11516  002EDE  6F80               	movwf	eepromWrite@data& (0+255),b
 11517  002EE0  0E00               	movlw	0
 11518  002EE2  2038               	addwfc	?_eepromRead+1,w,c
 11519  002EE4  0100               	movlb	0	; () banked
 11520  002EE6  6F81               	movwf	(eepromWrite@data+1)& (0+255),b
 11521  002EE8  0E00               	movlw	0
 11522  002EEA  0100               	movlb	0	; () banked
 11523  002EEC  6F82               	movwf	eepromWrite@address& (0+255),b
 11524  002EEE  0E00               	movlw	0
 11525  002EF0  6F83               	movwf	(eepromWrite@address+1)& (0+255),b
 11526  002EF2  0E00               	movlw	0
 11527  002EF4  6F84               	movwf	(eepromWrite@address+2)& (0+255),b
 11528  002EF6  0E00               	movlw	0
 11529  002EF8  6F85               	movwf	(eepromWrite@address+3)& (0+255),b
 11530  002EFA  ECA8  F01E         	call	_eepromWrite	;wreg free
 11531                           
 11532                           ;eeprom.c: 34: int n = eepromRead(0);
 11533  002EFE  0E00               	movlw	0
 11534  002F00  6E37               	movwf	eepromRead@address,c
 11535  002F02  0E00               	movlw	0
 11536  002F04  6E38               	movwf	eepromRead@address+1,c
 11537  002F06  0E00               	movlw	0
 11538  002F08  6E39               	movwf	eepromRead@address+2,c
 11539  002F0A  0E00               	movlw	0
 11540  002F0C  6E3A               	movwf	eepromRead@address+3,c
 11541  002F0E  ECC4  F020         	call	_eepromRead	;wreg free
 11542  002F12  C037  F08B         	movff	?_eepromRead,saveNewRun@n
 11543  002F16  C038  F08C         	movff	?_eepromRead+1,saveNewRun@n+1
 11544                           
 11545                           ;eeprom.c: 36: for(int i = 0; i < 7; i++){
 11546  002F1A  0E00               	movlw	0
 11547  002F1C  0100               	movlb	0	; () banked
 11548  002F1E  6F8E               	movwf	(saveNewRun@i+1)& (0+255),b
 11549  002F20  0E00               	movlw	0
 11550  002F22  6F8D               	movwf	saveNewRun@i& (0+255),b
 11551  002F24                     l7655:
 11552                           
 11553                           ; BSR set to: 0
 11554  002F24  0100               	movlb	0	; () banked
 11555  002F26  BF8E               	btfsc	(saveNewRun@i+1)& (0+255),7,b
 11556  002F28  D008               	goto	l7659
 11557  002F2A  0100               	movlb	0	; () banked
 11558  002F2C  518E               	movf	(saveNewRun@i+1)& (0+255),w,b
 11559  002F2E  E13A               	bnz	l398
 11560  002F30  0E07               	movlw	7
 11561  002F32  0100               	movlb	0	; () banked
 11562  002F34  5D8D               	subwf	saveNewRun@i& (0+255),w,b
 11563  002F36  B0D8               	btfsc	status,0,c
 11564  002F38  0012               	return	
 11565  002F3A                     l7659:
 11566                           
 11567                           ; BSR set to: 0
 11568                           ;eeprom.c: 37: eepromWrite(data[i], (n*7+1) + i);
 11569  002F3A  90D8               	bcf	status,0,c
 11570  002F3C  0100               	movlb	0	; () banked
 11571  002F3E  358D               	rlcf	saveNewRun@i& (0+255),w,b
 11572  002F40  6ED9               	movwf	fsr2l,c
 11573  002F42  0100               	movlb	0	; () banked
 11574  002F44  358E               	rlcf	(saveNewRun@i+1)& (0+255),w,b
 11575  002F46  6EDA               	movwf	fsr2h,c
 11576  002F48  0100               	movlb	0	; () banked
 11577  002F4A  5189               	movf	saveNewRun@data& (0+255),w,b
 11578  002F4C  26D9               	addwf	fsr2l,f,c
 11579  002F4E  0100               	movlb	0	; () banked
 11580  002F50  518A               	movf	(saveNewRun@data+1)& (0+255),w,b
 11581  002F52  22DA               	addwfc	fsr2h,f,c
 11582  002F54  CFDE F080          	movff	postinc2,eepromWrite@data
 11583  002F58  CFDD F081          	movff	postdec2,eepromWrite@data+1
 11584  002F5C  C08B  F031         	movff	saveNewRun@n,___wmul@multiplier
 11585  002F60  C08C  F032         	movff	saveNewRun@n+1,___wmul@multiplier+1
 11586  002F64  0E00               	movlw	0
 11587  002F66  6E34               	movwf	___wmul@multiplicand+1,c
 11588  002F68  0E07               	movlw	7
 11589  002F6A  6E33               	movwf	___wmul@multiplicand,c
 11590  002F6C  EC5E  F020         	call	___wmul	;wreg free
 11591  002F70  0100               	movlb	0	; () banked
 11592  002F72  518D               	movf	saveNewRun@i& (0+255),w,b
 11593  002F74  2631               	addwf	?___wmul,f,c
 11594  002F76  0100               	movlb	0	; () banked
 11595  002F78  518E               	movf	(saveNewRun@i+1)& (0+255),w,b
 11596  002F7A  2232               	addwfc	?___wmul+1,f,c
 11597  002F7C  0E01               	movlw	1
 11598  002F7E  2631               	addwf	?___wmul,f,c
 11599  002F80  0E00               	movlw	0
 11600  002F82  2232               	addwfc	?___wmul+1,f,c
 11601  002F84  C031  F082         	movff	?___wmul,eepromWrite@address
 11602  002F88  C032  F083         	movff	?___wmul+1,eepromWrite@address+1
 11603  002F8C  0100               	movlb	0	; () banked
 11604  002F8E  0E00               	movlw	0
 11605  002F90  BF83               	btfsc	(eepromWrite@address+1)& (0+255),7,b
 11606  002F92  0EFF               	movlw	-1
 11607  002F94  6F84               	movwf	(eepromWrite@address+2)& (0+255),b
 11608  002F96  6F85               	movwf	(eepromWrite@address+3)& (0+255),b
 11609  002F98  ECA8  F01E         	call	_eepromWrite	;wreg free
 11610  002F9C  0100               	movlb	0	; () banked
 11611  002F9E  4B8D               	infsnz	saveNewRun@i& (0+255),f,b
 11612  002FA0  2B8E               	incf	(saveNewRun@i+1)& (0+255),f,b
 11613  002FA2  D7C0               	goto	l7655
 11614  002FA4                     l398:
 11615                           
 11616                           ; BSR set to: 0
 11617  002FA4  0012               	return		;funcret
 11618  002FA6                     __end_of_saveNewRun:
 11619                           	opt stack 0
 11620                           tblptru	equ	0xFF8
 11621                           tblptrh	equ	0xFF7
 11622                           tblptrl	equ	0xFF6
 11623                           tablat	equ	0xFF5
 11624                           prodh	equ	0xFF4
 11625                           prodl	equ	0xFF3
 11626                           intcon	equ	0xFF2
 11627                           postinc0	equ	0xFEE
 11628                           wreg	equ	0xFE8
 11629                           postdec1	equ	0xFE5
 11630                           fsr1l	equ	0xFE1
 11631                           indf2	equ	0xFDF
 11632                           postinc2	equ	0xFDE
 11633                           postdec2	equ	0xFDD
 11634                           fsr2h	equ	0xFDA
 11635                           fsr2l	equ	0xFD9
 11636                           status	equ	0xFD8
 11637                           
 11638 ;; *************** function _eepromWrite *****************
 11639 ;; Defined at:
 11640 ;;		line 41 in file "eeprom.c"
 11641 ;; Parameters:    Size  Location     Type
 11642 ;;  data            2    0[BANK0 ] int 
 11643 ;;  address         4    2[BANK0 ] long 
 11644 ;; Auto vars:     Size  Location     Type
 11645 ;;  ien             2    7[BANK0 ] int 
 11646 ;; Return value:  Size  Location     Type
 11647 ;;                  1    wreg      void 
 11648 ;; Registers used:
 11649 ;;		wreg, status,2, status,0
 11650 ;; Tracked objects:
 11651 ;;		On entry : 0/0
 11652 ;;		On exit  : 0/0
 11653 ;;		Unchanged: 0/0
 11654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11655 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11656 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11657 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11658 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11659 ;;Total ram usage:        9 bytes
 11660 ;; Hardware stack levels used:    1
 11661 ;; Hardware stack levels required when called:    3
 11662 ;; This function calls:
 11663 ;;		Nothing
 11664 ;; This function is called by:
 11665 ;;		_saveNewRun
 11666 ;; This function uses a non-reentrant model
 11667 ;;
 11668                           
 11669                           	psect	text45
 11670  003D50                     __ptext45:
 11671                           	opt stack 0
 11672  003D50                     _eepromWrite:
 11673                           	opt stack 26
 11674  003D50                     l401:
 11675  003D50  B2A6               	btfsc	4006,1,c	;volatile
 11676  003D52  D7FE               	goto	l401
 11677                           
 11678                           ;eeprom.c: 45: int ien = INTCONbits.GIE;
 11679  003D54  AEF2               	btfss	intcon,7,c	;volatile
 11680  003D56  D004               	goto	u7670
 11681  003D58  0100               	movlb	0	; () banked
 11682  003D5A  6B86               	clrf	??_eepromWrite& (0+255),b
 11683  003D5C  2B86               	incf	??_eepromWrite& (0+255),f,b
 11684  003D5E  D002               	goto	u7678
 11685  003D60                     u7670:
 11686  003D60  0100               	movlb	0	; () banked
 11687  003D62  6B86               	clrf	??_eepromWrite& (0+255),b
 11688  003D64                     u7678:
 11689  003D64  0100               	movlb	0	; () banked
 11690  003D66  5186               	movf	??_eepromWrite& (0+255),w,b
 11691  003D68  0100               	movlb	0	; () banked
 11692  003D6A  6F87               	movwf	eepromWrite@ien& (0+255),b
 11693  003D6C  6B88               	clrf	(eepromWrite@ien+1)& (0+255),b
 11694                           
 11695                           ; BSR set to: 0
 11696                           ;eeprom.c: 46: (INTCONbits.GIE = 0);
 11697  003D6E  9EF2               	bcf	intcon,7,c	;volatile
 11698                           
 11699                           ; BSR set to: 0
 11700                           ;eeprom.c: 47: EEADR = address;
 11701  003D70  C082  FFA9         	movff	eepromWrite@address,4009	;volatile
 11702                           
 11703                           ; BSR set to: 0
 11704                           ;eeprom.c: 48: EEADRH = (address>>8) & 0b11;
 11705  003D74  0100               	movlb	0	; () banked
 11706  003D76  5183               	movf	(eepromWrite@address+1)& (0+255),w,b
 11707  003D78  0B03               	andlw	3
 11708  003D7A  6EAA               	movwf	4010,c	;volatile
 11709                           
 11710                           ; BSR set to: 0
 11711                           ;eeprom.c: 49: EEDATA = data;
 11712  003D7C  C080  FFA8         	movff	eepromWrite@data,4008	;volatile
 11713                           
 11714                           ; BSR set to: 0
 11715                           ;eeprom.c: 50: EECON1 = 0b100;
 11716  003D80  0E04               	movlw	4
 11717  003D82  6EA6               	movwf	4006,c	;volatile
 11718                           
 11719                           ; BSR set to: 0
 11720                           ;eeprom.c: 52: EECON2 = 0x55;
 11721  003D84  0E55               	movlw	85
 11722  003D86  6EA7               	movwf	4007,c	;volatile
 11723                           
 11724                           ; BSR set to: 0
 11725                           ;eeprom.c: 53: EECON2 = 0xaa;
 11726  003D88  0EAA               	movlw	170
 11727  003D8A  6EA7               	movwf	4007,c	;volatile
 11728                           
 11729                           ; BSR set to: 0
 11730                           ;eeprom.c: 57: EECON1 |= 0b10;
 11731  003D8C  82A6               	bsf	4006,1,c	;volatile
 11732  003D8E                     l404:
 11733  003D8E  B2A6               	btfsc	4006,1,c	;volatile
 11734  003D90  D7FE               	goto	l404
 11735                           
 11736                           ;eeprom.c: 60: EEIF = 0;
 11737  003D92  98A1               	bcf	4001,4,c	;volatile
 11738                           
 11739                           ;eeprom.c: 62: EECON1 = 0;
 11740  003D94  0E00               	movlw	0
 11741  003D96  6EA6               	movwf	4006,c	;volatile
 11742                           
 11743                           ;eeprom.c: 63: INTCONbits.GIE = ien;
 11744  003D98  0100               	movlb	0	; () banked
 11745  003D9A  B187               	btfsc	eepromWrite@ien& (0+255),0,b
 11746  003D9C  D002               	bra	u7695
 11747  003D9E  9EF2               	bcf	intcon,7,c	;volatile
 11748  003DA0  D001               	bra	u7696
 11749  003DA2                     u7695:
 11750  003DA2  8EF2               	bsf	intcon,7,c	;volatile
 11751  003DA4                     u7696:
 11752  003DA4  0012               	return		;funcret
 11753  003DA6                     __end_of_eepromWrite:
 11754                           	opt stack 0
 11755                           tblptru	equ	0xFF8
 11756                           tblptrh	equ	0xFF7
 11757                           tblptrl	equ	0xFF6
 11758                           tablat	equ	0xFF5
 11759                           prodh	equ	0xFF4
 11760                           prodl	equ	0xFF3
 11761                           intcon	equ	0xFF2
 11762                           postinc0	equ	0xFEE
 11763                           wreg	equ	0xFE8
 11764                           postdec1	equ	0xFE5
 11765                           fsr1l	equ	0xFE1
 11766                           indf2	equ	0xFDF
 11767                           postinc2	equ	0xFDE
 11768                           postdec2	equ	0xFDD
 11769                           fsr2h	equ	0xFDA
 11770                           fsr2l	equ	0xFD9
 11771                           status	equ	0xFD8
 11772                           
 11773 ;; *************** function _eepromRead *****************
 11774 ;; Defined at:
 11775 ;;		line 66 in file "eeprom.c"
 11776 ;; Parameters:    Size  Location     Type
 11777 ;;  address         4   54[COMRAM] long 
 11778 ;; Auto vars:     Size  Location     Type
 11779 ;;		None
 11780 ;; Return value:  Size  Location     Type
 11781 ;;                  2   54[COMRAM] int 
 11782 ;; Registers used:
 11783 ;;		wreg, status,2, status,0
 11784 ;; Tracked objects:
 11785 ;;		On entry : 0/0
 11786 ;;		On exit  : 0/0
 11787 ;;		Unchanged: 0/0
 11788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11789 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11792 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11793 ;;Total ram usage:        4 bytes
 11794 ;; Hardware stack levels used:    1
 11795 ;; Hardware stack levels required when called:    3
 11796 ;; This function calls:
 11797 ;;		Nothing
 11798 ;; This function is called by:
 11799 ;;		_readPastRun
 11800 ;;		_saveNewRun
 11801 ;;		_debug
 11802 ;; This function uses a non-reentrant model
 11803 ;;
 11804                           
 11805                           	psect	text46
 11806  004188                     __ptext46:
 11807                           	opt stack 0
 11808  004188                     _eepromRead:
 11809                           	opt stack 25
 11810                           
 11811                           ;eeprom.c: 67: EEADR = address;
 11812                           
 11813                           ;incstack = 0
 11814  004188  C037  FFA9         	movff	eepromRead@address,4009	;volatile
 11815                           
 11816                           ;eeprom.c: 68: EEADRH = (address>>8) & 0b11;
 11817  00418C  5038               	movf	eepromRead@address+1,w,c
 11818  00418E  0B03               	andlw	3
 11819  004190  6EAA               	movwf	4010,c	;volatile
 11820                           
 11821                           ;eeprom.c: 69: EECON1 = 0;
 11822  004192  0E00               	movlw	0
 11823  004194  6EA6               	movwf	4006,c	;volatile
 11824                           
 11825                           ;eeprom.c: 70: EECON1 = 1;
 11826  004196  0E01               	movlw	1
 11827  004198  6EA6               	movwf	4006,c	;volatile
 11828                           
 11829                           ;eeprom.c: 71: return EEDATA;
 11830  00419A  CFA8 F037          	movff	4008,?_eepromRead	;volatile
 11831  00419E  6A38               	clrf	?_eepromRead+1,c
 11832  0041A0  0012               	return	
 11833  0041A2                     __end_of_eepromRead:
 11834                           	opt stack 0
 11835                           tblptru	equ	0xFF8
 11836                           tblptrh	equ	0xFF7
 11837                           tblptrl	equ	0xFF6
 11838                           tablat	equ	0xFF5
 11839                           prodh	equ	0xFF4
 11840                           prodl	equ	0xFF3
 11841                           intcon	equ	0xFF2
 11842                           postinc0	equ	0xFEE
 11843                           wreg	equ	0xFE8
 11844                           postdec1	equ	0xFE5
 11845                           fsr1l	equ	0xFE1
 11846                           indf2	equ	0xFDF
 11847                           postinc2	equ	0xFDE
 11848                           postdec2	equ	0xFDD
 11849                           fsr2h	equ	0xFDA
 11850                           fsr2l	equ	0xFD9
 11851                           status	equ	0xFD8
 11852                           
 11853 ;; *************** function ___wmul *****************
 11854 ;; Defined at:
 11855 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 11856 ;; Parameters:    Size  Location     Type
 11857 ;;  multiplier      2   48[COMRAM] unsigned int 
 11858 ;;  multiplicand    2   50[COMRAM] unsigned int 
 11859 ;; Auto vars:     Size  Location     Type
 11860 ;;  product         2   52[COMRAM] unsigned int 
 11861 ;; Return value:  Size  Location     Type
 11862 ;;                  2   48[COMRAM] unsigned int 
 11863 ;; Registers used:
 11864 ;;		wreg, status,2, status,0, prodl, prodh
 11865 ;; Tracked objects:
 11866 ;;		On entry : 0/0
 11867 ;;		On exit  : 0/0
 11868 ;;		Unchanged: 0/0
 11869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11870 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11871 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11873 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11874 ;;Total ram usage:        6 bytes
 11875 ;; Hardware stack levels used:    1
 11876 ;; Hardware stack levels required when called:    3
 11877 ;; This function calls:
 11878 ;;		Nothing
 11879 ;; This function is called by:
 11880 ;;		_readPastRun
 11881 ;;		_saveNewRun
 11882 ;;		_fround
 11883 ;;		_scale
 11884 ;;		_printf
 11885 ;; This function uses a non-reentrant model
 11886 ;;
 11887                           
 11888                           	psect	text47
 11889  0040BC                     __ptext47:
 11890                           	opt stack 0
 11891  0040BC                     ___wmul:
 11892                           	opt stack 24
 11893                           
 11894                           ;incstack = 0
 11895  0040BC  5031               	movf	___wmul@multiplier,w,c
 11896  0040BE  0233               	mulwf	___wmul@multiplicand,c
 11897  0040C0  CFF3 F035          	movff	prodl,___wmul@product
 11898  0040C4  CFF4 F036          	movff	prodh,___wmul@product+1
 11899  0040C8  5031               	movf	___wmul@multiplier,w,c
 11900  0040CA  0234               	mulwf	___wmul@multiplicand+1,c
 11901  0040CC  50F3               	movf	prodl,w,c
 11902  0040CE  2636               	addwf	___wmul@product+1,f,c
 11903  0040D0  5032               	movf	___wmul@multiplier+1,w,c
 11904  0040D2  0233               	mulwf	___wmul@multiplicand,c
 11905  0040D4  50F3               	movf	prodl,w,c
 11906  0040D6  2636               	addwf	___wmul@product+1,f,c
 11907  0040D8  C035  F031         	movff	___wmul@product,?___wmul
 11908  0040DC  C036  F032         	movff	___wmul@product+1,?___wmul+1
 11909  0040E0  0012               	return	
 11910  0040E2                     __end_of___wmul:
 11911                           	opt stack 0
 11912                           tblptru	equ	0xFF8
 11913                           tblptrh	equ	0xFF7
 11914                           tblptrl	equ	0xFF6
 11915                           tablat	equ	0xFF5
 11916                           prodh	equ	0xFF4
 11917                           prodl	equ	0xFF3
 11918                           intcon	equ	0xFF2
 11919                           postinc0	equ	0xFEE
 11920                           wreg	equ	0xFE8
 11921                           postdec1	equ	0xFE5
 11922                           fsr1l	equ	0xFE1
 11923                           indf2	equ	0xFDF
 11924                           postinc2	equ	0xFDE
 11925                           postdec2	equ	0xFDD
 11926                           fsr2h	equ	0xFDA
 11927                           fsr2l	equ	0xFD9
 11928                           status	equ	0xFD8
 11929                           
 11930 ;; *************** function _pinSetup *****************
 11931 ;; Defined at:
 11932 ;;		line 311 in file "main.c"
 11933 ;; Parameters:    Size  Location     Type
 11934 ;;		None
 11935 ;; Auto vars:     Size  Location     Type
 11936 ;;		None
 11937 ;; Return value:  Size  Location     Type
 11938 ;;                  1    wreg      void 
 11939 ;; Registers used:
 11940 ;;		wreg, status,2, status,0
 11941 ;; Tracked objects:
 11942 ;;		On entry : 0/0
 11943 ;;		On exit  : 0/0
 11944 ;;		Unchanged: 0/0
 11945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11950 ;;Total ram usage:        0 bytes
 11951 ;; Hardware stack levels used:    1
 11952 ;; Hardware stack levels required when called:    3
 11953 ;; This function calls:
 11954 ;;		Nothing
 11955 ;; This function is called by:
 11956 ;;		_main
 11957 ;;		_debug
 11958 ;; This function uses a non-reentrant model
 11959 ;;
 11960                           
 11961                           	psect	text48
 11962  003F6A                     __ptext48:
 11963                           	opt stack 0
 11964  003F6A                     _pinSetup:
 11965                           	opt stack 27
 11966                           
 11967                           ;main.c: 317: TRISA = 0xFF;
 11968                           
 11969                           ;incstack = 0
 11970  003F6A  6892               	setf	3986,c	;volatile
 11971                           
 11972                           ;main.c: 318: TRISB = 0xFF;
 11973  003F6C  6893               	setf	3987,c	;volatile
 11974                           
 11975                           ;main.c: 319: TRISC = 0b11000000;
 11976  003F6E  0EC0               	movlw	192
 11977  003F70  6E94               	movwf	3988,c	;volatile
 11978                           
 11979                           ;main.c: 320: TRISD = 0x00;
 11980  003F72  0E00               	movlw	0
 11981  003F74  6E95               	movwf	3989,c	;volatile
 11982                           
 11983                           ;main.c: 321: TRISE = 0x00;
 11984  003F76  0E00               	movlw	0
 11985  003F78  6E96               	movwf	3990,c	;volatile
 11986                           
 11987                           ;main.c: 323: LATA = 0x00;
 11988  003F7A  0E00               	movlw	0
 11989  003F7C  6E89               	movwf	3977,c	;volatile
 11990                           
 11991                           ;main.c: 324: LATB = 0x00;
 11992  003F7E  0E00               	movlw	0
 11993  003F80  6E8A               	movwf	3978,c	;volatile
 11994                           
 11995                           ;main.c: 325: LATC = 0x00;
 11996  003F82  0E00               	movlw	0
 11997  003F84  6E8B               	movwf	3979,c	;volatile
 11998                           
 11999                           ;main.c: 326: LATD = 0x00;
 12000  003F86  0E00               	movlw	0
 12001  003F88  6E8C               	movwf	3980,c	;volatile
 12002                           
 12003                           ;main.c: 327: LATE = 0x00;
 12004  003F8A  0E00               	movlw	0
 12005  003F8C  6E8D               	movwf	3981,c	;volatile
 12006                           
 12007                           ;main.c: 329: ADCON0 = 0x00;
 12008  003F8E  0E00               	movlw	0
 12009  003F90  6EC2               	movwf	4034,c	;volatile
 12010                           
 12011                           ;main.c: 331: ADCON1 |= 0x0B;
 12012  003F92  0E0B               	movlw	11
 12013  003F94  12C1               	iorwf	4033,f,c	;volatile
 12014                           
 12015                           ;main.c: 336: ADCON2 = 0;
 12016  003F96  0E00               	movlw	0
 12017  003F98  6EC0               	movwf	4032,c	;volatile
 12018                           
 12019                           ;main.c: 337: ADCON2 |= 0b010;
 12020  003F9A  82C0               	bsf	4032,1,c	;volatile
 12021                           
 12022                           ;main.c: 338: ADCON2 |= 0b110<<3;
 12023  003F9C  0E30               	movlw	48
 12024  003F9E  12C0               	iorwf	4032,f,c	;volatile
 12025                           
 12026                           ;main.c: 339: ADCON2 |= 1<<7;
 12027  003FA0  8EC0               	bsf	4032,7,c	;volatile
 12028                           
 12029                           ;main.c: 342: INT1IE = 1;
 12030  003FA2  86F0               	bsf	intcon3,3,c	;volatile
 12031                           
 12032                           ;main.c: 343: INT0IE = 1;
 12033  003FA4  88F2               	bsf	intcon,4,c	;volatile
 12034                           
 12035                           ;main.c: 344: (INTCONbits.GIE = 1);
 12036  003FA6  8EF2               	bsf	intcon,7,c	;volatile
 12037  003FA8  0012               	return		;funcret
 12038  003FAA                     __end_of_pinSetup:
 12039                           	opt stack 0
 12040                           tblptru	equ	0xFF8
 12041                           tblptrh	equ	0xFF7
 12042                           tblptrl	equ	0xFF6
 12043                           tablat	equ	0xFF5
 12044                           prodh	equ	0xFF4
 12045                           prodl	equ	0xFF3
 12046                           intcon	equ	0xFF2
 12047                           intcon3	equ	0xFF0
 12048                           postinc0	equ	0xFEE
 12049                           wreg	equ	0xFE8
 12050                           postdec1	equ	0xFE5
 12051                           fsr1l	equ	0xFE1
 12052                           indf2	equ	0xFDF
 12053                           postinc2	equ	0xFDE
 12054                           postdec2	equ	0xFDD
 12055                           fsr2h	equ	0xFDA
 12056                           fsr2l	equ	0xFD9
 12057                           status	equ	0xFD8
 12058                           
 12059 ;; *************** function _initServo *****************
 12060 ;; Defined at:
 12061 ;;		line 21 in file "servo.c"
 12062 ;; Parameters:    Size  Location     Type
 12063 ;;  motor           2   94[BANK0 ] PTR int 
 12064 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
 12065 ;;  angle           2   96[BANK0 ] int 
 12066 ;; Auto vars:     Size  Location     Type
 12067 ;;  i               2  102[BANK0 ] int 
 12068 ;; Return value:  Size  Location     Type
 12069 ;;                  1    wreg      void 
 12070 ;; Registers used:
 12071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12072 ;; Tracked objects:
 12073 ;;		On entry : 0/0
 12074 ;;		On exit  : 0/0
 12075 ;;		Unchanged: 0/0
 12076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12077 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12078 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12079 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12080 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12081 ;;Total ram usage:       10 bytes
 12082 ;; Hardware stack levels used:    1
 12083 ;; Hardware stack levels required when called:    7
 12084 ;; This function calls:
 12085 ;;		_initTimer
 12086 ;;		_setAngle
 12087 ;;		_startTimer
 12088 ;; This function is called by:
 12089 ;;		_main
 12090 ;; This function uses a non-reentrant model
 12091 ;;
 12092                           
 12093                           	psect	text49
 12094  002FA6                     __ptext49:
 12095                           	opt stack 0
 12096  002FA6                     _initServo:
 12097                           	opt stack 23
 12098                           
 12099                           ;servo.c: 24: for(int i = 0; i < n; i++){
 12100                           
 12101                           ;incstack = 0
 12102  002FA6  0E00               	movlw	0
 12103  002FA8  0100               	movlb	0	; () banked
 12104  002FAA  6FE7               	movwf	(initServo@i+1)& (0+255),b
 12105  002FAC  0E00               	movlw	0
 12106  002FAE  6FE6               	movwf	initServo@i& (0+255),b
 12107  002FB0  D017               	goto	l7525
 12108  002FB2                     l7519:
 12109                           
 12110                           ; BSR set to: 0
 12111                           ;servo.c: 25: if(servos[i] == motor)return;
 12112  002FB2  90D8               	bcf	status,0,c
 12113  002FB4  0100               	movlb	0	; () banked
 12114  002FB6  35E6               	rlcf	initServo@i& (0+255),w,b
 12115  002FB8  6ED9               	movwf	fsr2l,c
 12116  002FBA  0100               	movlb	0	; () banked
 12117  002FBC  35E7               	rlcf	(initServo@i+1)& (0+255),w,b
 12118  002FBE  6EDA               	movwf	fsr2h,c
 12119  002FC0  0E72               	movlw	low _servos
 12120  002FC2  26D9               	addwf	fsr2l,f,c
 12121  002FC4  0E01               	movlw	high _servos
 12122  002FC6  22DA               	addwfc	fsr2h,f,c
 12123  002FC8  0100               	movlb	0	; () banked
 12124  002FCA  51DE               	movf	initServo@motor& (0+255),w,b
 12125  002FCC  18DE               	xorwf	postinc2,w,c
 12126  002FCE  E105               	bnz	l7523
 12127  002FD0  0100               	movlb	0	; () banked
 12128  002FD2  51DF               	movf	(initServo@motor+1)& (0+255),w,b
 12129  002FD4  18DE               	xorwf	postinc2,w,c
 12130  002FD6  B4D8               	btfsc	status,2,c
 12131  002FD8  0012               	return	
 12132  002FDA                     l7523:
 12133                           
 12134                           ; BSR set to: 0
 12135  002FDA  0100               	movlb	0	; () banked
 12136  002FDC  4BE6               	infsnz	initServo@i& (0+255),f,b
 12137  002FDE  2BE7               	incf	(initServo@i+1)& (0+255),f,b
 12138  002FE0                     l7525:
 12139                           
 12140                           ; BSR set to: 0
 12141  002FE0  0100               	movlb	0	; () banked
 12142  002FE2  51FB               	movf	_n& (0+255),w,b
 12143  002FE4  0100               	movlb	0	; () banked
 12144  002FE6  5DE6               	subwf	initServo@i& (0+255),w,b
 12145  002FE8  0100               	movlb	0	; () banked
 12146  002FEA  51E7               	movf	(initServo@i+1)& (0+255),w,b
 12147  002FEC  0A80               	xorlw	128
 12148  002FEE  0100               	movlb	0	; () banked
 12149  002FF0  6FE2               	movwf	??_initServo& (0+255),b
 12150  002FF2  0100               	movlb	0	; () banked
 12151  002FF4  51FC               	movf	(_n+1)& (0+255),w,b
 12152  002FF6  0A80               	xorlw	128
 12153  002FF8  0100               	movlb	0	; () banked
 12154  002FFA  59E2               	subwfb	??_initServo& (0+255),w,b
 12155  002FFC  A0D8               	btfss	status,0,c
 12156  002FFE  D7D9               	goto	l7519
 12157                           
 12158                           ; BSR set to: 0
 12159                           ;servo.c: 26: }
 12160                           ;servo.c: 28: n++;
 12161                           
 12162                           ; BSR set to: 0
 12163  003000  0100               	movlb	0	; () banked
 12164  003002  4BFB               	infsnz	_n& (0+255),f,b
 12165  003004  2BFC               	incf	(_n+1)& (0+255),f,b
 12166                           
 12167                           ; BSR set to: 0
 12168                           ;servo.c: 29: servos[n-1] = motor;
 12169  003006  0EFE               	movlw	254
 12170  003008  0100               	movlb	0	; () banked
 12171  00300A  6FE2               	movwf	??_initServo& (0+255),b
 12172  00300C  0EFF               	movlw	255
 12173  00300E  0100               	movlb	0	; () banked
 12174  003010  6FE3               	movwf	(??_initServo+1)& (0+255),b
 12175  003012  C0FB  F0E4         	movff	_n,??_initServo+2
 12176  003016  C0FC  F0E5         	movff	_n+1,??_initServo+3
 12177  00301A  90D8               	bcf	status,0,c
 12178  00301C  0100               	movlb	0	; () banked
 12179  00301E  37E4               	rlcf	(??_initServo+2)& (0+255),f,b
 12180  003020  37E5               	rlcf	(??_initServo+3)& (0+255),f,b
 12181  003022  0100               	movlb	0	; () banked
 12182  003024  51E2               	movf	??_initServo& (0+255),w,b
 12183  003026  0100               	movlb	0	; () banked
 12184  003028  27E4               	addwf	(??_initServo+2)& (0+255),f,b
 12185  00302A  0100               	movlb	0	; () banked
 12186  00302C  51E3               	movf	(??_initServo+1)& (0+255),w,b
 12187  00302E  0100               	movlb	0	; () banked
 12188  003030  23E5               	addwfc	(??_initServo+3)& (0+255),f,b
 12189  003032  0E72               	movlw	low _servos
 12190  003034  0100               	movlb	0	; () banked
 12191  003036  25E4               	addwf	(??_initServo+2)& (0+255),w,b
 12192  003038  6ED9               	movwf	fsr2l,c
 12193  00303A  0E01               	movlw	high _servos
 12194  00303C  0100               	movlb	0	; () banked
 12195  00303E  21E5               	addwfc	(??_initServo+3)& (0+255),w,b
 12196  003040  6EDA               	movwf	fsr2h,c
 12197  003042  C0DE  FFDE         	movff	initServo@motor,postinc2
 12198  003046  C0DF  FFDD         	movff	initServo@motor+1,postdec2
 12199                           
 12200                           ; BSR set to: 0
 12201                           ;servo.c: 30: setAngle(motor, angle);
 12202  00304A  C0DE  F0D4         	movff	initServo@motor,setAngle@motor
 12203  00304E  C0DF  F0D5         	movff	initServo@motor+1,setAngle@motor+1
 12204  003052  C0E0  F0D6         	movff	initServo@angle,setAngle@angle
 12205  003056  C0E1  F0D7         	movff	initServo@angle+1,setAngle@angle+1
 12206  00305A  EC44  F018         	call	_setAngle	;wreg free
 12207                           
 12208                           ;servo.c: 32: initTimer(0);
 12209  00305E  0E00               	movlw	0
 12210  003060  6E24               	movwf	initTimer@timer+1,c
 12211  003062  0E00               	movlw	0
 12212  003064  6E23               	movwf	initTimer@timer,c
 12213  003066  EC6D  F01F         	call	_initTimer	;wreg free
 12214                           
 12215                           ;servo.c: 33: startTimer(0,0);
 12216  00306A  0E00               	movlw	0
 12217  00306C  6E24               	movwf	startTimer@timer+1,c
 12218  00306E  0E00               	movlw	0
 12219  003070  6E23               	movwf	startTimer@timer,c
 12220  003072  0E00               	movlw	0
 12221  003074  6E25               	movwf	startTimer@val,c
 12222  003076  0E00               	movlw	0
 12223  003078  6E26               	movwf	startTimer@val+1,c
 12224  00307A  0E00               	movlw	0
 12225  00307C  6E27               	movwf	startTimer@val+2,c
 12226  00307E  0E00               	movlw	0
 12227  003080  6E28               	movwf	startTimer@val+3,c
 12228  003082  EC21  F01F         	call	_startTimer	;wreg free
 12229  003086  0012               	return		;funcret
 12230  003088                     __end_of_initServo:
 12231                           	opt stack 0
 12232                           tblptru	equ	0xFF8
 12233                           tblptrh	equ	0xFF7
 12234                           tblptrl	equ	0xFF6
 12235                           tablat	equ	0xFF5
 12236                           prodh	equ	0xFF4
 12237                           prodl	equ	0xFF3
 12238                           intcon	equ	0xFF2
 12239                           intcon3	equ	0xFF0
 12240                           postinc0	equ	0xFEE
 12241                           wreg	equ	0xFE8
 12242                           postdec1	equ	0xFE5
 12243                           fsr1l	equ	0xFE1
 12244                           indf2	equ	0xFDF
 12245                           postinc2	equ	0xFDE
 12246                           postdec2	equ	0xFDD
 12247                           fsr2h	equ	0xFDA
 12248                           fsr2l	equ	0xFD9
 12249                           status	equ	0xFD8
 12250                           
 12251 ;; *************** function _startTimer *****************
 12252 ;; Defined at:
 12253 ;;		line 77 in file "timer.c"
 12254 ;; Parameters:    Size  Location     Type
 12255 ;;  timer           2   34[COMRAM] int 
 12256 ;;  val             4   36[COMRAM] long 
 12257 ;; Auto vars:     Size  Location     Type
 12258 ;;		None
 12259 ;; Return value:  Size  Location     Type
 12260 ;;                  1    wreg      void 
 12261 ;; Registers used:
 12262 ;;		wreg, status,2, status,0
 12263 ;; Tracked objects:
 12264 ;;		On entry : 0/0
 12265 ;;		On exit  : 0/0
 12266 ;;		Unchanged: 0/0
 12267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12268 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12270 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12271 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12272 ;;Total ram usage:        8 bytes
 12273 ;; Hardware stack levels used:    1
 12274 ;; Hardware stack levels required when called:    3
 12275 ;; This function calls:
 12276 ;;		Nothing
 12277 ;; This function is called by:
 12278 ;;		_main
 12279 ;;		_initServo
 12280 ;;		_testFrequency
 12281 ;; This function uses a non-reentrant model
 12282 ;;
 12283                           
 12284                           	psect	text50
 12285  003E42                     __ptext50:
 12286                           	opt stack 0
 12287  003E42                     _startTimer:
 12288                           	opt stack 27
 12289                           
 12290                           ;timer.c: 78: switch(timer){
 12291                           
 12292                           ;incstack = 0
 12293  003E42  D012               	goto	l5069
 12294  003E44                     l462:
 12295                           
 12296                           ;timer.c: 80: TMR0H = val>>8;
 12297  003E44  C026  FFD7         	movff	startTimer@val+1,4055	;volatile
 12298                           
 12299                           ;timer.c: 81: TMR0L = val;
 12300  003E48  C025  FFD6         	movff	startTimer@val,4054	;volatile
 12301                           
 12302                           ;timer.c: 82: T0CON |= 1<<7;
 12303  003E4C  8ED5               	bsf	4053,7,c	;volatile
 12304                           
 12305                           ;timer.c: 83: break;
 12306  003E4E  0012               	return	
 12307  003E50                     l464:
 12308                           
 12309                           ;timer.c: 85: TMR1H = val>>8;
 12310  003E50  C026  FFCF         	movff	startTimer@val+1,4047	;volatile
 12311                           
 12312                           ;timer.c: 86: TMR1L = val;
 12313  003E54  C025  FFCE         	movff	startTimer@val,4046	;volatile
 12314                           
 12315                           ;timer.c: 87: T1CON |= 1<<0;
 12316  003E58  80CD               	bsf	4045,0,c	;volatile
 12317                           
 12318                           ;timer.c: 88: break;
 12319  003E5A  0012               	return	
 12320  003E5C                     l465:
 12321                           
 12322                           ;timer.c: 90: TMR3H = val>>8;
 12323  003E5C  C026  FFB3         	movff	startTimer@val+1,4019	;volatile
 12324                           
 12325                           ;timer.c: 91: TMR3L = val;
 12326  003E60  C025  FFB2         	movff	startTimer@val,4018	;volatile
 12327                           
 12328                           ;timer.c: 92: T3CON |= 1<<0;
 12329  003E64  80B1               	bsf	4017,0,c	;volatile
 12330                           
 12331                           ;timer.c: 93: }
 12332  003E66  0012               	return	
 12333  003E68                     l5069:
 12334  003E68  C023  F029         	movff	startTimer@timer,??_startTimer
 12335  003E6C  C024  F02A         	movff	startTimer@timer+1,??_startTimer+1
 12336                           
 12337                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12338                           ; Switch size 1, requested type "space"
 12339                           ; Number of cases is 1, Range of values is 0 to 0
 12340                           ; switch strategies available:
 12341                           ; Name         Instructions Cycles
 12342                           ; simple_byte            4     3 (average)
 12343                           ;	Chosen strategy is simple_byte
 12344  003E70  502A               	movf	??_startTimer+1,w,c
 12345  003E72  0A00               	xorlw	0	; case 0
 12346  003E74  A4D8               	btfss	status,2,c
 12347  003E76  0012               	return	
 12348                           
 12349                           ; Switch size 1, requested type "space"
 12350                           ; Number of cases is 3, Range of values is 0 to 3
 12351                           ; switch strategies available:
 12352                           ; Name         Instructions Cycles
 12353                           ; simple_byte           10     6 (average)
 12354                           ;	Chosen strategy is simple_byte
 12355  003E78  5029               	movf	??_startTimer,w,c
 12356  003E7A  0A00               	xorlw	0	; case 0
 12357  003E7C  B4D8               	btfsc	status,2,c
 12358  003E7E  D7E2               	goto	l462
 12359  003E80  0A01               	xorlw	1	; case 1
 12360  003E82  B4D8               	btfsc	status,2,c
 12361  003E84  D7E5               	goto	l464
 12362  003E86  0A02               	xorlw	2	; case 3
 12363  003E88  A4D8               	btfss	status,2,c
 12364  003E8A  0012               	return	
 12365  003E8C  D7E7               	goto	l465
 12366  003E8E                     __end_of_startTimer:
 12367                           	opt stack 0
 12368                           tblptru	equ	0xFF8
 12369                           tblptrh	equ	0xFF7
 12370                           tblptrl	equ	0xFF6
 12371                           tablat	equ	0xFF5
 12372                           prodh	equ	0xFF4
 12373                           prodl	equ	0xFF3
 12374                           intcon	equ	0xFF2
 12375                           intcon3	equ	0xFF0
 12376                           postinc0	equ	0xFEE
 12377                           wreg	equ	0xFE8
 12378                           postdec1	equ	0xFE5
 12379                           fsr1l	equ	0xFE1
 12380                           indf2	equ	0xFDF
 12381                           postinc2	equ	0xFDE
 12382                           postdec2	equ	0xFDD
 12383                           fsr2h	equ	0xFDA
 12384                           fsr2l	equ	0xFD9
 12385                           status	equ	0xFD8
 12386                           
 12387 ;; *************** function _setAngle *****************
 12388 ;; Defined at:
 12389 ;;		line 44 in file "servo.c"
 12390 ;; Parameters:    Size  Location     Type
 12391 ;;  motor           2   84[BANK0 ] PTR int 
 12392 ;;		 -> redirectingServo(4), padServo(4), conveyorServo(4), 
 12393 ;;  angle           2   86[BANK0 ] int 
 12394 ;; Auto vars:     Size  Location     Type
 12395 ;;  i               2   92[BANK0 ] int 
 12396 ;;  period          2   90[BANK0 ] unsigned int 
 12397 ;; Return value:  Size  Location     Type
 12398 ;;                  1    wreg      void 
 12399 ;; Registers used:
 12400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12401 ;; Tracked objects:
 12402 ;;		On entry : 0/0
 12403 ;;		On exit  : 0/0
 12404 ;;		Unchanged: 0/0
 12405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12406 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12407 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12408 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12409 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12410 ;;Total ram usage:       10 bytes
 12411 ;; Hardware stack levels used:    1
 12412 ;; Hardware stack levels required when called:    6
 12413 ;; This function calls:
 12414 ;;		_angleToPulse
 12415 ;; This function is called by:
 12416 ;;		_main
 12417 ;;		_sortBattery
 12418 ;;		_initServo
 12419 ;; This function uses a non-reentrant model
 12420 ;;
 12421                           
 12422                           	psect	text51
 12423  003088                     __ptext51:
 12424                           	opt stack 0
 12425  003088                     _setAngle:
 12426                           	opt stack 23
 12427                           
 12428                           ;servo.c: 45: unsigned int period = 50000;
 12429                           
 12430                           ;incstack = 0
 12431  003088  0EC3               	movlw	195
 12432  00308A  0100               	movlb	0	; () banked
 12433  00308C  6FDB               	movwf	(setAngle@period+1)& (0+255),b
 12434  00308E  0E50               	movlw	80
 12435  003090  6FDA               	movwf	setAngle@period& (0+255),b
 12436                           
 12437                           ;servo.c: 46: for(int i = 0; i < n; i++){
 12438  003092  0E00               	movlw	0
 12439  003094  0100               	movlb	0	; () banked
 12440  003096  6FDD               	movwf	(setAngle@i+1)& (0+255),b
 12441  003098  0E00               	movlw	0
 12442  00309A  6FDC               	movwf	setAngle@i& (0+255),b
 12443  00309C  D03F               	goto	l7289
 12444  00309E                     l7281:
 12445                           
 12446                           ; BSR set to: 0
 12447                           ;servo.c: 47: if(servos[i] == motor){
 12448  00309E  90D8               	bcf	status,0,c
 12449  0030A0  0100               	movlb	0	; () banked
 12450  0030A2  35DC               	rlcf	setAngle@i& (0+255),w,b
 12451  0030A4  6ED9               	movwf	fsr2l,c
 12452  0030A6  0100               	movlb	0	; () banked
 12453  0030A8  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
 12454  0030AA  6EDA               	movwf	fsr2h,c
 12455  0030AC  0E72               	movlw	low _servos
 12456  0030AE  26D9               	addwf	fsr2l,f,c
 12457  0030B0  0E01               	movlw	high _servos
 12458  0030B2  22DA               	addwfc	fsr2h,f,c
 12459  0030B4  0100               	movlb	0	; () banked
 12460  0030B6  51D4               	movf	setAngle@motor& (0+255),w,b
 12461  0030B8  18DE               	xorwf	postinc2,w,c
 12462  0030BA  E11C               	bnz	l7285
 12463  0030BC  0100               	movlb	0	; () banked
 12464  0030BE  51D5               	movf	(setAngle@motor+1)& (0+255),w,b
 12465  0030C0  18DE               	xorwf	postinc2,w,c
 12466  0030C2  A4D8               	btfss	status,2,c
 12467  0030C4  D017               	goto	l7285
 12468                           
 12469                           ; BSR set to: 0
 12470                           ;servo.c: 48: pulse[i] = angleToPulse(angle);
 12471  0030C6  C0D6  F0BD         	movff	setAngle@angle,angleToPulse@angle
 12472  0030CA  C0D7  F0BE         	movff	setAngle@angle+1,angleToPulse@angle+1
 12473  0030CE  EC67  F012         	call	_angleToPulse	;wreg free
 12474  0030D2  90D8               	bcf	status,0,c
 12475  0030D4  0100               	movlb	0	; () banked
 12476  0030D6  35DC               	rlcf	setAngle@i& (0+255),w,b
 12477  0030D8  6ED9               	movwf	fsr2l,c
 12478  0030DA  0100               	movlb	0	; () banked
 12479  0030DC  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
 12480  0030DE  6EDA               	movwf	fsr2h,c
 12481  0030E0  0E6A               	movlw	low _pulse
 12482  0030E2  26D9               	addwf	fsr2l,f,c
 12483  0030E4  0E01               	movlw	high _pulse
 12484  0030E6  22DA               	addwfc	fsr2h,f,c
 12485  0030E8  0100               	movlb	0	; () banked
 12486  0030EA  C0BD  FFDE         	movff	?_angleToPulse,postinc2
 12487  0030EE  0100               	movlb	0	; () banked
 12488  0030F0  C0BE  FFDD         	movff	?_angleToPulse+1,postdec2
 12489  0030F4                     l7285:
 12490                           
 12491                           ; BSR set to: 0
 12492                           ;servo.c: 49: }
 12493                           ;servo.c: 50: period-=pulse[i];
 12494  0030F4  90D8               	bcf	status,0,c
 12495  0030F6  0100               	movlb	0	; () banked
 12496  0030F8  35DC               	rlcf	setAngle@i& (0+255),w,b
 12497  0030FA  6ED9               	movwf	fsr2l,c
 12498  0030FC  0100               	movlb	0	; () banked
 12499  0030FE  35DD               	rlcf	(setAngle@i+1)& (0+255),w,b
 12500  003100  6EDA               	movwf	fsr2h,c
 12501  003102  0E6A               	movlw	low _pulse
 12502  003104  26D9               	addwf	fsr2l,f,c
 12503  003106  0E01               	movlw	high _pulse
 12504  003108  22DA               	addwfc	fsr2h,f,c
 12505  00310A  50DE               	movf	postinc2,w,c
 12506  00310C  0100               	movlb	0	; () banked
 12507  00310E  5FDA               	subwf	setAngle@period& (0+255),f,b
 12508  003110  50DD               	movf	postdec2,w,c
 12509  003112  0100               	movlb	0	; () banked
 12510  003114  5BDB               	subwfb	(setAngle@period+1)& (0+255),f,b
 12511                           
 12512                           ; BSR set to: 0
 12513  003116  0100               	movlb	0	; () banked
 12514  003118  4BDC               	infsnz	setAngle@i& (0+255),f,b
 12515  00311A  2BDD               	incf	(setAngle@i+1)& (0+255),f,b
 12516  00311C                     l7289:
 12517                           
 12518                           ; BSR set to: 0
 12519  00311C  0100               	movlb	0	; () banked
 12520  00311E  51FB               	movf	_n& (0+255),w,b
 12521  003120  0100               	movlb	0	; () banked
 12522  003122  5DDC               	subwf	setAngle@i& (0+255),w,b
 12523  003124  0100               	movlb	0	; () banked
 12524  003126  51DD               	movf	(setAngle@i+1)& (0+255),w,b
 12525  003128  0A80               	xorlw	128
 12526  00312A  0100               	movlb	0	; () banked
 12527  00312C  6FD8               	movwf	??_setAngle& (0+255),b
 12528  00312E  0100               	movlb	0	; () banked
 12529  003130  51FC               	movf	(_n+1)& (0+255),w,b
 12530  003132  0A80               	xorlw	128
 12531  003134  0100               	movlb	0	; () banked
 12532  003136  59D8               	subwfb	??_setAngle& (0+255),w,b
 12533  003138  A0D8               	btfss	status,0,c
 12534  00313A  D7B1               	goto	l7281
 12535                           
 12536                           ; BSR set to: 0
 12537                           ;servo.c: 51: }
 12538                           ;servo.c: 52: pulse[n] = period;
 12539                           
 12540                           ; BSR set to: 0
 12541  00313C  90D8               	bcf	status,0,c
 12542  00313E  0100               	movlb	0	; () banked
 12543  003140  35FB               	rlcf	_n& (0+255),w,b
 12544  003142  6ED9               	movwf	fsr2l,c
 12545  003144  0100               	movlb	0	; () banked
 12546  003146  35FC               	rlcf	(_n+1)& (0+255),w,b
 12547  003148  6EDA               	movwf	fsr2h,c
 12548  00314A  0E6A               	movlw	low _pulse
 12549  00314C  26D9               	addwf	fsr2l,f,c
 12550  00314E  0E01               	movlw	high _pulse
 12551  003150  22DA               	addwfc	fsr2h,f,c
 12552  003152  C0DA  FFDE         	movff	setAngle@period,postinc2
 12553  003156  C0DB  FFDD         	movff	setAngle@period+1,postdec2
 12554                           
 12555                           ; BSR set to: 0
 12556  00315A  0012               	return		;funcret
 12557  00315C                     __end_of_setAngle:
 12558                           	opt stack 0
 12559                           tblptru	equ	0xFF8
 12560                           tblptrh	equ	0xFF7
 12561                           tblptrl	equ	0xFF6
 12562                           tablat	equ	0xFF5
 12563                           prodh	equ	0xFF4
 12564                           prodl	equ	0xFF3
 12565                           intcon	equ	0xFF2
 12566                           intcon3	equ	0xFF0
 12567                           postinc0	equ	0xFEE
 12568                           wreg	equ	0xFE8
 12569                           postdec1	equ	0xFE5
 12570                           fsr1l	equ	0xFE1
 12571                           indf2	equ	0xFDF
 12572                           postinc2	equ	0xFDE
 12573                           postdec2	equ	0xFDD
 12574                           fsr2h	equ	0xFDA
 12575                           fsr2l	equ	0xFD9
 12576                           status	equ	0xFD8
 12577                           
 12578 ;; *************** function _angleToPulse *****************
 12579 ;; Defined at:
 12580 ;;		line 36 in file "servo.c"
 12581 ;; Parameters:    Size  Location     Type
 12582 ;;  angle           2   61[BANK0 ] int 
 12583 ;; Auto vars:     Size  Location     Type
 12584 ;;  a000            4   80[BANK0 ] long 
 12585 ;;  a180            4   73[BANK0 ] long 
 12586 ;;  offset          4   69[BANK0 ] long 
 12587 ;; Return value:  Size  Location     Type
 12588 ;;                  4   61[BANK0 ] long 
 12589 ;; Registers used:
 12590 ;;		wreg, status,2, status,0, cstack
 12591 ;; Tracked objects:
 12592 ;;		On entry : 0/0
 12593 ;;		On exit  : 0/0
 12594 ;;		Unchanged: 0/0
 12595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12596 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12597 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12598 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12599 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12600 ;;Total ram usage:       23 bytes
 12601 ;; Hardware stack levels used:    1
 12602 ;; Hardware stack levels required when called:    5
 12603 ;; This function calls:
 12604 ;;		___altoft
 12605 ;;		___awtoft
 12606 ;;		___ftadd
 12607 ;;		___ftdiv
 12608 ;;		___ftmul
 12609 ;;		___fttol
 12610 ;; This function is called by:
 12611 ;;		_setAngle
 12612 ;; This function uses a non-reentrant model
 12613 ;;
 12614                           
 12615                           	psect	text52
 12616  0024CE                     __ptext52:
 12617                           	opt stack 0
 12618  0024CE                     _angleToPulse:
 12619                           	opt stack 23
 12620                           
 12621                           ;servo.c: 37: long offset = -600;
 12622                           
 12623                           ; BSR set to: 0
 12624                           ;incstack = 0
 12625  0024CE  0EA8               	movlw	168
 12626  0024D0  0100               	movlb	0	; () banked
 12627  0024D2  6FC5               	movwf	angleToPulse@offset& (0+255),b
 12628  0024D4  0EFD               	movlw	253
 12629  0024D6  6FC6               	movwf	(angleToPulse@offset+1)& (0+255),b
 12630  0024D8  0EFF               	movlw	255
 12631  0024DA  6FC7               	movwf	(angleToPulse@offset+2)& (0+255),b
 12632  0024DC  0EFF               	movlw	255
 12633  0024DE  6FC8               	movwf	(angleToPulse@offset+3)& (0+255),b
 12634                           
 12635                           ;servo.c: 38: long a000 = 1250;
 12636  0024E0  0EE2               	movlw	226
 12637  0024E2  0100               	movlb	0	; () banked
 12638  0024E4  6FD0               	movwf	angleToPulse@a000& (0+255),b
 12639  0024E6  0E04               	movlw	4
 12640  0024E8  6FD1               	movwf	(angleToPulse@a000+1)& (0+255),b
 12641  0024EA  0E00               	movlw	0
 12642  0024EC  6FD2               	movwf	(angleToPulse@a000+2)& (0+255),b
 12643  0024EE  0E00               	movlw	0
 12644  0024F0  6FD3               	movwf	(angleToPulse@a000+3)& (0+255),b
 12645                           
 12646                           ;servo.c: 39: long a180 = 6250;
 12647  0024F2  0E6A               	movlw	106
 12648  0024F4  0100               	movlb	0	; () banked
 12649  0024F6  6FC9               	movwf	angleToPulse@a180& (0+255),b
 12650  0024F8  0E18               	movlw	24
 12651  0024FA  6FCA               	movwf	(angleToPulse@a180+1)& (0+255),b
 12652  0024FC  0E00               	movlw	0
 12653  0024FE  6FCB               	movwf	(angleToPulse@a180+2)& (0+255),b
 12654  002500  0E00               	movlw	0
 12655  002502  6FCC               	movwf	(angleToPulse@a180+3)& (0+255),b
 12656                           
 12657                           ; BSR set to: 0
 12658                           ;servo.c: 41: return a000 + angle/180.0*(a180-a000) + offset;
 12659  002504  C0D0  F0C1         	movff	angleToPulse@a000,??_angleToPulse
 12660  002508  C0D1  F0C2         	movff	angleToPulse@a000+1,??_angleToPulse+1
 12661  00250C  C0D2  F0C3         	movff	angleToPulse@a000+2,??_angleToPulse+2
 12662  002510  C0D3  F0C4         	movff	angleToPulse@a000+3,??_angleToPulse+3
 12663  002514  0100               	movlb	0	; () banked
 12664  002516  1FC1               	comf	??_angleToPulse& (0+255),f,b
 12665  002518  1FC2               	comf	(??_angleToPulse+1)& (0+255),f,b
 12666  00251A  1FC3               	comf	(??_angleToPulse+2)& (0+255),f,b
 12667  00251C  1FC4               	comf	(??_angleToPulse+3)& (0+255),f,b
 12668  00251E  2BC1               	incf	??_angleToPulse& (0+255),f,b
 12669  002520  0E00               	movlw	0
 12670  002522  23C2               	addwfc	(??_angleToPulse+1)& (0+255),f,b
 12671  002524  23C3               	addwfc	(??_angleToPulse+2)& (0+255),f,b
 12672  002526  23C4               	addwfc	(??_angleToPulse+3)& (0+255),f,b
 12673  002528  0100               	movlb	0	; () banked
 12674  00252A  51C9               	movf	angleToPulse@a180& (0+255),w,b
 12675  00252C  0100               	movlb	0	; () banked
 12676  00252E  25C1               	addwf	??_angleToPulse& (0+255),w,b
 12677  002530  6E2B               	movwf	___altoft@c,c
 12678  002532  0100               	movlb	0	; () banked
 12679  002534  51CA               	movf	(angleToPulse@a180+1)& (0+255),w,b
 12680  002536  0100               	movlb	0	; () banked
 12681  002538  21C2               	addwfc	(??_angleToPulse+1)& (0+255),w,b
 12682  00253A  6E2C               	movwf	___altoft@c+1,c
 12683  00253C  0100               	movlb	0	; () banked
 12684  00253E  51CB               	movf	(angleToPulse@a180+2)& (0+255),w,b
 12685  002540  0100               	movlb	0	; () banked
 12686  002542  21C3               	addwfc	(??_angleToPulse+2)& (0+255),w,b
 12687  002544  6E2D               	movwf	___altoft@c+2,c
 12688  002546  0100               	movlb	0	; () banked
 12689  002548  51CC               	movf	(angleToPulse@a180+3)& (0+255),w,b
 12690  00254A  0100               	movlb	0	; () banked
 12691  00254C  21C4               	addwfc	(??_angleToPulse+3)& (0+255),w,b
 12692  00254E  6E2E               	movwf	___altoft@c+3,c
 12693  002550  ECDB  F01C         	call	___altoft	;wreg free
 12694  002554  C02B  F08C         	movff	?___altoft,___ftmul@f2
 12695  002558  C02C  F08D         	movff	?___altoft+1,___ftmul@f2+1
 12696  00255C  C02D  F08E         	movff	?___altoft+2,___ftmul@f2+2
 12697  002560  0E00               	movlw	0
 12698  002562  6E38               	movwf	___ftdiv@f2,c
 12699  002564  0E34               	movlw	52
 12700  002566  6E39               	movwf	___ftdiv@f2+1,c
 12701  002568  0E43               	movlw	67
 12702  00256A  6E3A               	movwf	___ftdiv@f2+2,c
 12703  00256C  C0BD  F02B         	movff	angleToPulse@angle,___awtoft@c
 12704  002570  C0BE  F02C         	movff	angleToPulse@angle+1,___awtoft@c+1
 12705  002574  ECF1  F01F         	call	___awtoft	;wreg free
 12706  002578  C02B  F035         	movff	?___awtoft,___ftdiv@f1
 12707  00257C  C02C  F036         	movff	?___awtoft+1,___ftdiv@f1+1
 12708  002580  C02D  F037         	movff	?___awtoft+2,___ftdiv@f1+2
 12709  002584  EC6A  F015         	call	___ftdiv	;wreg free
 12710  002588  C035  F089         	movff	?___ftdiv,___ftmul@f1
 12711  00258C  C036  F08A         	movff	?___ftdiv+1,___ftmul@f1+1
 12712  002590  C037  F08B         	movff	?___ftdiv+2,___ftmul@f1+2
 12713  002594  ECB8  F011         	call	___ftmul	;wreg free
 12714  002598  C089  F0A5         	movff	?___ftmul,___ftadd@f2
 12715  00259C  C08A  F0A6         	movff	?___ftmul+1,___ftadd@f2+1
 12716  0025A0  C08B  F0A7         	movff	?___ftmul+2,___ftadd@f2+2
 12717  0025A4  C0D0  F02B         	movff	angleToPulse@a000,___altoft@c
 12718  0025A8  C0D1  F02C         	movff	angleToPulse@a000+1,___altoft@c+1
 12719  0025AC  C0D2  F02D         	movff	angleToPulse@a000+2,___altoft@c+2
 12720  0025B0  C0D3  F02E         	movff	angleToPulse@a000+3,___altoft@c+3
 12721  0025B4  ECDB  F01C         	call	___altoft	;wreg free
 12722  0025B8  C02B  F0A2         	movff	?___altoft,___ftadd@f1
 12723  0025BC  C02C  F0A3         	movff	?___altoft+1,___ftadd@f1+1
 12724  0025C0  C02D  F0A4         	movff	?___altoft+2,___ftadd@f1+2
 12725  0025C4  EC98  F00E         	call	___ftadd	;wreg free
 12726  0025C8  C0A2  F0CD         	movff	?___ftadd,_angleToPulse$1419
 12727  0025CC  C0A3  F0CE         	movff	?___ftadd+1,_angleToPulse$1419+1
 12728  0025D0  C0A4  F0CF         	movff	?___ftadd+2,_angleToPulse$1419+2
 12729                           
 12730                           ;servo.c: 41: return a000 + angle/180.0*(a180-a000) + offset;
 12731  0025D4  C0C5  F02B         	movff	angleToPulse@offset,___altoft@c
 12732  0025D8  C0C6  F02C         	movff	angleToPulse@offset+1,___altoft@c+1
 12733  0025DC  C0C7  F02D         	movff	angleToPulse@offset+2,___altoft@c+2
 12734  0025E0  C0C8  F02E         	movff	angleToPulse@offset+3,___altoft@c+3
 12735  0025E4  ECDB  F01C         	call	___altoft	;wreg free
 12736  0025E8  C02B  F0A5         	movff	?___altoft,___ftadd@f2
 12737  0025EC  C02C  F0A6         	movff	?___altoft+1,___ftadd@f2+1
 12738  0025F0  C02D  F0A7         	movff	?___altoft+2,___ftadd@f2+2
 12739  0025F4  C0CD  F0A2         	movff	_angleToPulse$1419,___ftadd@f1
 12740  0025F8  C0CE  F0A3         	movff	_angleToPulse$1419+1,___ftadd@f1+1
 12741  0025FC  C0CF  F0A4         	movff	_angleToPulse$1419+2,___ftadd@f1+2
 12742  002600  EC98  F00E         	call	___ftadd	;wreg free
 12743  002604  C0A2  F0AE         	movff	?___ftadd,___fttol@f1
 12744  002608  C0A3  F0AF         	movff	?___ftadd+1,___fttol@f1+1
 12745  00260C  C0A4  F0B0         	movff	?___ftadd+2,___fttol@f1+2
 12746  002610  EC13  F013         	call	___fttol	;wreg free
 12747  002614  C0AE  F0BD         	movff	?___fttol,?_angleToPulse
 12748  002618  C0AF  F0BE         	movff	?___fttol+1,?_angleToPulse+1
 12749  00261C  C0B0  F0BF         	movff	?___fttol+2,?_angleToPulse+2
 12750  002620  C0B1  F0C0         	movff	?___fttol+3,?_angleToPulse+3
 12751  002624  0012               	return	
 12752  002626                     __end_of_angleToPulse:
 12753                           	opt stack 0
 12754                           tblptru	equ	0xFF8
 12755                           tblptrh	equ	0xFF7
 12756                           tblptrl	equ	0xFF6
 12757                           tablat	equ	0xFF5
 12758                           prodh	equ	0xFF4
 12759                           prodl	equ	0xFF3
 12760                           intcon	equ	0xFF2
 12761                           intcon3	equ	0xFF0
 12762                           postinc0	equ	0xFEE
 12763                           wreg	equ	0xFE8
 12764                           postdec1	equ	0xFE5
 12765                           fsr1l	equ	0xFE1
 12766                           indf2	equ	0xFDF
 12767                           postinc2	equ	0xFDE
 12768                           postdec2	equ	0xFDD
 12769                           fsr2h	equ	0xFDA
 12770                           fsr2l	equ	0xFD9
 12771                           status	equ	0xFD8
 12772                           
 12773 ;; *************** function ___fttol *****************
 12774 ;; Defined at:
 12775 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 12776 ;; Parameters:    Size  Location     Type
 12777 ;;  f1              3   46[BANK0 ] float 
 12778 ;; Auto vars:     Size  Location     Type
 12779 ;;  lval            4   56[BANK0 ] unsigned long 
 12780 ;;  exp1            1   60[BANK0 ] unsigned char 
 12781 ;;  sign1           1   55[BANK0 ] unsigned char 
 12782 ;; Return value:  Size  Location     Type
 12783 ;;                  4   46[BANK0 ] long 
 12784 ;; Registers used:
 12785 ;;		wreg, status,2, status,0
 12786 ;; Tracked objects:
 12787 ;;		On entry : 0/0
 12788 ;;		On exit  : 0/0
 12789 ;;		Unchanged: 0/0
 12790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12791 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12792 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12793 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12794 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12795 ;;Total ram usage:       15 bytes
 12796 ;; Hardware stack levels used:    1
 12797 ;; Hardware stack levels required when called:    3
 12798 ;; This function calls:
 12799 ;;		Nothing
 12800 ;; This function is called by:
 12801 ;;		_sortBattery
 12802 ;;		_angleToPulse
 12803 ;;		_printf
 12804 ;; This function uses a non-reentrant model
 12805 ;;
 12806                           
 12807                           	psect	text53
 12808  002626                     __ptext53:
 12809                           	opt stack 0
 12810  002626                     ___fttol:
 12811                           	opt stack 24
 12812                           
 12813                           ;incstack = 0
 12814  002626  C0B0  F0B2         	movff	___fttol@f1+2,??___fttol
 12815  00262A  0100               	movlb	0	; () banked
 12816  00262C  6BB3               	clrf	(??___fttol+1)& (0+255),b
 12817  00262E  6BB4               	clrf	(??___fttol+2)& (0+255),b
 12818  002630  0100               	movlb	0	; () banked
 12819  002632  35AF               	rlcf	(___fttol@f1+1)& (0+255),w,b
 12820  002634  0100               	movlb	0	; () banked
 12821  002636  37B2               	rlcf	??___fttol& (0+255),f,b
 12822  002638  E301               	bnc	u6521
 12823  00263A  81B3               	bsf	(??___fttol+1)& (0+255),0,b
 12824  00263C                     u6521:
 12825  00263C  0100               	movlb	0	; () banked
 12826  00263E  51B2               	movf	??___fttol& (0+255),w,b
 12827  002640  0100               	movlb	0	; () banked
 12828  002642  6FBC               	movwf	___fttol@exp1& (0+255),b
 12829  002644  0100               	movlb	0	; () banked
 12830  002646  51BC               	movf	___fttol@exp1& (0+255),w,b
 12831  002648  A4D8               	btfss	status,2,c
 12832  00264A  D00A               	goto	l6635
 12833                           
 12834                           ; BSR set to: 0
 12835  00264C  0E00               	movlw	0
 12836  00264E  0100               	movlb	0	; () banked
 12837  002650  6FAE               	movwf	?___fttol& (0+255),b
 12838  002652  0E00               	movlw	0
 12839  002654  6FAF               	movwf	(?___fttol+1)& (0+255),b
 12840  002656  0E00               	movlw	0
 12841  002658  6FB0               	movwf	(?___fttol+2)& (0+255),b
 12842  00265A  0E00               	movlw	0
 12843  00265C  6FB1               	movwf	(?___fttol+3)& (0+255),b
 12844                           
 12845                           ; BSR set to: 0
 12846  00265E  0012               	return	
 12847  002660                     l6635:
 12848                           
 12849                           ; BSR set to: 0
 12850  002660  0E17               	movlw	23
 12851  002662  0100               	movlb	0	; () banked
 12852  002664  6FB2               	movwf	??___fttol& (0+255),b
 12853  002666  C0AE  F0B3         	movff	___fttol@f1,??___fttol+1
 12854  00266A  C0AF  F0B4         	movff	___fttol@f1+1,??___fttol+2
 12855  00266E  C0B0  F0B5         	movff	___fttol@f1+2,??___fttol+3
 12856  002672  0100               	movlb	0	; () banked
 12857  002674  29B2               	incf	??___fttol& (0+255),w,b
 12858  002676  0100               	movlb	0	; () banked
 12859  002678  6FB6               	movwf	(??___fttol+4)& (0+255),b
 12860  00267A  D005               	goto	u6540
 12861  00267C                     u6545:
 12862  00267C  0100               	movlb	0	; () banked
 12863  00267E  90D8               	bcf	status,0,c
 12864  002680  33B5               	rrcf	(??___fttol+3)& (0+255),f,b
 12865  002682  33B4               	rrcf	(??___fttol+2)& (0+255),f,b
 12866  002684  33B3               	rrcf	(??___fttol+1)& (0+255),f,b
 12867  002686                     u6540:
 12868  002686  0100               	movlb	0	; () banked
 12869  002688  2FB6               	decfsz	(??___fttol+4)& (0+255),f,b
 12870  00268A  D7F8               	goto	u6545
 12871  00268C  0100               	movlb	0	; () banked
 12872  00268E  51B3               	movf	(??___fttol+1)& (0+255),w,b
 12873  002690  0100               	movlb	0	; () banked
 12874  002692  6FB7               	movwf	___fttol@sign1& (0+255),b
 12875                           
 12876                           ; BSR set to: 0
 12877  002694  0100               	movlb	0	; () banked
 12878  002696  8FAF               	bsf	(___fttol@f1+1)& (0+255),7,b
 12879                           
 12880                           ; BSR set to: 0
 12881  002698  0EFF               	movlw	255
 12882  00269A  0100               	movlb	0	; () banked
 12883  00269C  17AE               	andwf	___fttol@f1& (0+255),f,b
 12884  00269E  0EFF               	movlw	255
 12885  0026A0  0100               	movlb	0	; () banked
 12886  0026A2  17AF               	andwf	(___fttol@f1+1)& (0+255),f,b
 12887  0026A4  0E00               	movlw	0
 12888  0026A6  0100               	movlb	0	; () banked
 12889  0026A8  17B0               	andwf	(___fttol@f1+2)& (0+255),f,b
 12890                           
 12891                           ; BSR set to: 0
 12892  0026AA  0100               	movlb	0	; () banked
 12893  0026AC  51AE               	movf	___fttol@f1& (0+255),w,b
 12894  0026AE  0100               	movlb	0	; () banked
 12895  0026B0  6FB8               	movwf	___fttol@lval& (0+255),b
 12896  0026B2  0100               	movlb	0	; () banked
 12897  0026B4  51AF               	movf	(___fttol@f1+1)& (0+255),w,b
 12898  0026B6  0100               	movlb	0	; () banked
 12899  0026B8  6FB9               	movwf	(___fttol@lval+1)& (0+255),b
 12900  0026BA  0100               	movlb	0	; () banked
 12901  0026BC  51B0               	movf	(___fttol@f1+2)& (0+255),w,b
 12902  0026BE  0100               	movlb	0	; () banked
 12903  0026C0  6FBA               	movwf	(___fttol@lval+2)& (0+255),b
 12904  0026C2  0100               	movlb	0	; () banked
 12905  0026C4  6BBB               	clrf	(___fttol@lval+3)& (0+255),b
 12906                           
 12907                           ; BSR set to: 0
 12908  0026C6  0E8E               	movlw	142
 12909  0026C8  0100               	movlb	0	; () banked
 12910  0026CA  5FBC               	subwf	___fttol@exp1& (0+255),f,b
 12911                           
 12912                           ; BSR set to: 0
 12913  0026CC  0100               	movlb	0	; () banked
 12914  0026CE  AFBC               	btfss	___fttol@exp1& (0+255),7,b
 12915  0026D0  D01A               	goto	l6657
 12916                           
 12917                           ; BSR set to: 0
 12918  0026D2  0100               	movlb	0	; () banked
 12919  0026D4  51BC               	movf	___fttol@exp1& (0+255),w,b
 12920  0026D6  0A80               	xorlw	128
 12921  0026D8  0F8F               	addlw	143
 12922  0026DA  B0D8               	btfsc	status,0,c
 12923  0026DC  D00A               	goto	l6653
 12924                           
 12925                           ; BSR set to: 0
 12926  0026DE  0E00               	movlw	0
 12927  0026E0  0100               	movlb	0	; () banked
 12928  0026E2  6FAE               	movwf	?___fttol& (0+255),b
 12929  0026E4  0E00               	movlw	0
 12930  0026E6  6FAF               	movwf	(?___fttol+1)& (0+255),b
 12931  0026E8  0E00               	movlw	0
 12932  0026EA  6FB0               	movwf	(?___fttol+2)& (0+255),b
 12933  0026EC  0E00               	movlw	0
 12934  0026EE  6FB1               	movwf	(?___fttol+3)& (0+255),b
 12935                           
 12936                           ; BSR set to: 0
 12937  0026F0  0012               	return	
 12938  0026F2                     l6653:
 12939                           
 12940                           ; BSR set to: 0
 12941  0026F2  0100               	movlb	0	; () banked
 12942  0026F4  90D8               	bcf	status,0,c
 12943  0026F6  33BB               	rrcf	(___fttol@lval+3)& (0+255),f,b
 12944  0026F8  33BA               	rrcf	(___fttol@lval+2)& (0+255),f,b
 12945  0026FA  33B9               	rrcf	(___fttol@lval+1)& (0+255),f,b
 12946  0026FC  33B8               	rrcf	___fttol@lval& (0+255),f,b
 12947                           
 12948                           ; BSR set to: 0
 12949  0026FE  0100               	movlb	0	; () banked
 12950  002700  3FBC               	incfsz	___fttol@exp1& (0+255),f,b
 12951  002702  D7F7               	goto	l6653
 12952                           
 12953                           ; BSR set to: 0
 12954  002704  D01B               	goto	l6667
 12955  002706                     l6657:
 12956                           
 12957                           ; BSR set to: 0
 12958  002706  0E17               	movlw	23
 12959  002708  0100               	movlb	0	; () banked
 12960  00270A  65BC               	cpfsgt	___fttol@exp1& (0+255),b
 12961  00270C  D012               	goto	l6665
 12962                           
 12963                           ; BSR set to: 0
 12964  00270E  0E00               	movlw	0
 12965  002710  0100               	movlb	0	; () banked
 12966  002712  6FAE               	movwf	?___fttol& (0+255),b
 12967  002714  0E00               	movlw	0
 12968  002716  6FAF               	movwf	(?___fttol+1)& (0+255),b
 12969  002718  0E00               	movlw	0
 12970  00271A  6FB0               	movwf	(?___fttol+2)& (0+255),b
 12971  00271C  0E00               	movlw	0
 12972  00271E  6FB1               	movwf	(?___fttol+3)& (0+255),b
 12973                           
 12974                           ; BSR set to: 0
 12975  002720  0012               	return	
 12976  002722                     l6663:
 12977                           
 12978                           ; BSR set to: 0
 12979  002722  0100               	movlb	0	; () banked
 12980  002724  90D8               	bcf	status,0,c
 12981  002726  37B8               	rlcf	___fttol@lval& (0+255),f,b
 12982  002728  37B9               	rlcf	(___fttol@lval+1)& (0+255),f,b
 12983  00272A  37BA               	rlcf	(___fttol@lval+2)& (0+255),f,b
 12984  00272C  37BB               	rlcf	(___fttol@lval+3)& (0+255),f,b
 12985  00272E  0100               	movlb	0	; () banked
 12986  002730  07BC               	decf	___fttol@exp1& (0+255),f,b
 12987  002732                     l6665:
 12988                           
 12989                           ; BSR set to: 0
 12990  002732  0100               	movlb	0	; () banked
 12991  002734  51BC               	movf	___fttol@exp1& (0+255),w,b
 12992  002736  0100               	movlb	0	; () banked
 12993  002738  A4D8               	btfss	status,2,c
 12994  00273A  D7F3               	goto	l6663
 12995  00273C                     l6667:
 12996                           
 12997                           ; BSR set to: 0
 12998  00273C  0100               	movlb	0	; () banked
 12999  00273E  51B7               	movf	___fttol@sign1& (0+255),w,b
 13000  002740  0100               	movlb	0	; () banked
 13001  002742  B4D8               	btfsc	status,2,c
 13002  002744  D009               	goto	l6671
 13003                           
 13004                           ; BSR set to: 0
 13005  002746  0100               	movlb	0	; () banked
 13006  002748  1FBB               	comf	(___fttol@lval+3)& (0+255),f,b
 13007  00274A  1FBA               	comf	(___fttol@lval+2)& (0+255),f,b
 13008  00274C  1FB9               	comf	(___fttol@lval+1)& (0+255),f,b
 13009  00274E  6DB8               	negf	___fttol@lval& (0+255),b
 13010  002750  0E00               	movlw	0
 13011  002752  23B9               	addwfc	(___fttol@lval+1)& (0+255),f,b
 13012  002754  23BA               	addwfc	(___fttol@lval+2)& (0+255),f,b
 13013  002756  23BB               	addwfc	(___fttol@lval+3)& (0+255),f,b
 13014  002758                     l6671:
 13015                           
 13016                           ; BSR set to: 0
 13017  002758  C0B8  F0AE         	movff	___fttol@lval,?___fttol
 13018  00275C  C0B9  F0AF         	movff	___fttol@lval+1,?___fttol+1
 13019  002760  C0BA  F0B0         	movff	___fttol@lval+2,?___fttol+2
 13020  002764  C0BB  F0B1         	movff	___fttol@lval+3,?___fttol+3
 13021  002768  0012               	return	
 13022  00276A                     __end_of___fttol:
 13023                           	opt stack 0
 13024                           tblptru	equ	0xFF8
 13025                           tblptrh	equ	0xFF7
 13026                           tblptrl	equ	0xFF6
 13027                           tablat	equ	0xFF5
 13028                           prodh	equ	0xFF4
 13029                           prodl	equ	0xFF3
 13030                           intcon	equ	0xFF2
 13031                           intcon3	equ	0xFF0
 13032                           postinc0	equ	0xFEE
 13033                           wreg	equ	0xFE8
 13034                           postdec1	equ	0xFE5
 13035                           fsr1l	equ	0xFE1
 13036                           indf2	equ	0xFDF
 13037                           postinc2	equ	0xFDE
 13038                           postdec2	equ	0xFDD
 13039                           fsr2h	equ	0xFDA
 13040                           fsr2l	equ	0xFD9
 13041                           status	equ	0xFD8
 13042                           
 13043 ;; *************** function ___ftmul *****************
 13044 ;; Defined at:
 13045 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 13046 ;; Parameters:    Size  Location     Type
 13047 ;;  f1              3    9[BANK0 ] float 
 13048 ;;  f2              3   12[BANK0 ] float 
 13049 ;; Auto vars:     Size  Location     Type
 13050 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 13051 ;;  sign            1   23[BANK0 ] unsigned char 
 13052 ;;  cntr            1   22[BANK0 ] unsigned char 
 13053 ;;  exp             1   18[BANK0 ] unsigned char 
 13054 ;; Return value:  Size  Location     Type
 13055 ;;                  3    9[BANK0 ] float 
 13056 ;; Registers used:
 13057 ;;		wreg, status,2, status,0, cstack
 13058 ;; Tracked objects:
 13059 ;;		On entry : 0/0
 13060 ;;		On exit  : 0/0
 13061 ;;		Unchanged: 0/0
 13062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13063 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13064 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13065 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13066 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13067 ;;Total ram usage:       15 bytes
 13068 ;; Hardware stack levels used:    1
 13069 ;; Hardware stack levels required when called:    4
 13070 ;; This function calls:
 13071 ;;		___ftpack
 13072 ;; This function is called by:
 13073 ;;		_sortBattery
 13074 ;;		_angleToPulse
 13075 ;;		_fround
 13076 ;;		_scale
 13077 ;;		_printf
 13078 ;; This function uses a non-reentrant model
 13079 ;;
 13080                           
 13081                           	psect	text54
 13082  002370                     __ptext54:
 13083                           	opt stack 0
 13084  002370                     ___ftmul:
 13085                           	opt stack 23
 13086                           
 13087                           ; BSR set to: 0
 13088                           ;incstack = 0
 13089  002370  C08B  F08F         	movff	___ftmul@f1+2,??___ftmul
 13090  002374  0100               	movlb	0	; () banked
 13091  002376  6B90               	clrf	(??___ftmul+1)& (0+255),b
 13092  002378  6B91               	clrf	(??___ftmul+2)& (0+255),b
 13093  00237A  0100               	movlb	0	; () banked
 13094  00237C  358A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 13095  00237E  0100               	movlb	0	; () banked
 13096  002380  378F               	rlcf	??___ftmul& (0+255),f,b
 13097  002382  E301               	bnc	u5891
 13098  002384  8190               	bsf	(??___ftmul+1)& (0+255),0,b
 13099  002386                     u5891:
 13100  002386  0100               	movlb	0	; () banked
 13101  002388  518F               	movf	??___ftmul& (0+255),w,b
 13102  00238A  0100               	movlb	0	; () banked
 13103  00238C  6F92               	movwf	___ftmul@exp& (0+255),b
 13104  00238E  0100               	movlb	0	; () banked
 13105  002390  5192               	movf	___ftmul@exp& (0+255),w,b
 13106  002392  A4D8               	btfss	status,2,c
 13107  002394  D00A               	goto	l6151
 13108                           
 13109                           ; BSR set to: 0
 13110  002396  0E00               	movlw	0
 13111  002398  0100               	movlb	0	; () banked
 13112  00239A  6F89               	movwf	?___ftmul& (0+255),b
 13113  00239C  0E00               	movlw	0
 13114  00239E  0100               	movlb	0	; () banked
 13115  0023A0  6F8A               	movwf	(?___ftmul+1)& (0+255),b
 13116  0023A2  0E00               	movlw	0
 13117  0023A4  0100               	movlb	0	; () banked
 13118  0023A6  6F8B               	movwf	(?___ftmul+2)& (0+255),b
 13119                           
 13120                           ; BSR set to: 0
 13121  0023A8  0012               	return	
 13122  0023AA                     l6151:
 13123                           
 13124                           ; BSR set to: 0
 13125  0023AA  C08E  F08F         	movff	___ftmul@f2+2,??___ftmul
 13126  0023AE  0100               	movlb	0	; () banked
 13127  0023B0  6B90               	clrf	(??___ftmul+1)& (0+255),b
 13128  0023B2  6B91               	clrf	(??___ftmul+2)& (0+255),b
 13129  0023B4  0100               	movlb	0	; () banked
 13130  0023B6  358D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 13131  0023B8  0100               	movlb	0	; () banked
 13132  0023BA  378F               	rlcf	??___ftmul& (0+255),f,b
 13133  0023BC  E301               	bnc	u5911
 13134  0023BE  8190               	bsf	(??___ftmul+1)& (0+255),0,b
 13135  0023C0                     u5911:
 13136  0023C0  0100               	movlb	0	; () banked
 13137  0023C2  518F               	movf	??___ftmul& (0+255),w,b
 13138  0023C4  0100               	movlb	0	; () banked
 13139  0023C6  6F97               	movwf	___ftmul@sign& (0+255),b
 13140  0023C8  0100               	movlb	0	; () banked
 13141  0023CA  5197               	movf	___ftmul@sign& (0+255),w,b
 13142  0023CC  A4D8               	btfss	status,2,c
 13143  0023CE  D00A               	goto	l6157
 13144                           
 13145                           ; BSR set to: 0
 13146  0023D0  0E00               	movlw	0
 13147  0023D2  0100               	movlb	0	; () banked
 13148  0023D4  6F89               	movwf	?___ftmul& (0+255),b
 13149  0023D6  0E00               	movlw	0
 13150  0023D8  0100               	movlb	0	; () banked
 13151  0023DA  6F8A               	movwf	(?___ftmul+1)& (0+255),b
 13152  0023DC  0E00               	movlw	0
 13153  0023DE  0100               	movlb	0	; () banked
 13154  0023E0  6F8B               	movwf	(?___ftmul+2)& (0+255),b
 13155                           
 13156                           ; BSR set to: 0
 13157  0023E2  0012               	return	
 13158  0023E4                     l6157:
 13159                           
 13160                           ; BSR set to: 0
 13161  0023E4  0100               	movlb	0	; () banked
 13162  0023E6  5197               	movf	___ftmul@sign& (0+255),w,b
 13163  0023E8  0F7B               	addlw	123
 13164  0023EA  0100               	movlb	0	; () banked
 13165  0023EC  2792               	addwf	___ftmul@exp& (0+255),f,b
 13166                           
 13167                           ; BSR set to: 0
 13168  0023EE  C08B  F097         	movff	___ftmul@f1+2,___ftmul@sign
 13169  0023F2  0100               	movlb	0	; () banked
 13170  0023F4  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 13171  0023F6  0100               	movlb	0	; () banked
 13172  0023F8  1B97               	xorwf	___ftmul@sign& (0+255),f,b
 13173  0023FA  0E80               	movlw	128
 13174  0023FC  0100               	movlb	0	; () banked
 13175  0023FE  1797               	andwf	___ftmul@sign& (0+255),f,b
 13176                           
 13177                           ; BSR set to: 0
 13178  002400  0100               	movlb	0	; () banked
 13179  002402  8F8A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 13180                           
 13181                           ; BSR set to: 0
 13182  002404  0100               	movlb	0	; () banked
 13183  002406  8F8D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 13184                           
 13185                           ; BSR set to: 0
 13186  002408  0EFF               	movlw	255
 13187  00240A  0100               	movlb	0	; () banked
 13188  00240C  178C               	andwf	___ftmul@f2& (0+255),f,b
 13189  00240E  0EFF               	movlw	255
 13190  002410  0100               	movlb	0	; () banked
 13191  002412  178D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 13192  002414  0E00               	movlw	0
 13193  002416  0100               	movlb	0	; () banked
 13194  002418  178E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 13195                           
 13196                           ; BSR set to: 0
 13197  00241A  0E00               	movlw	0
 13198  00241C  0100               	movlb	0	; () banked
 13199  00241E  6F93               	movwf	___ftmul@f3_as_product& (0+255),b
 13200  002420  0E00               	movlw	0
 13201  002422  0100               	movlb	0	; () banked
 13202  002424  6F94               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 13203  002426  0E00               	movlw	0
 13204  002428  0100               	movlb	0	; () banked
 13205  00242A  6F95               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 13206                           
 13207                           ; BSR set to: 0
 13208  00242C  0E07               	movlw	7
 13209  00242E  0100               	movlb	0	; () banked
 13210  002430  6F96               	movwf	___ftmul@cntr& (0+255),b
 13211  002432                     l6171:
 13212                           
 13213                           ; BSR set to: 0
 13214  002432  0100               	movlb	0	; () banked
 13215  002434  A189               	btfss	___ftmul@f1& (0+255),0,b
 13216  002436  D00C               	goto	l6175
 13217                           
 13218                           ; BSR set to: 0
 13219  002438  0100               	movlb	0	; () banked
 13220  00243A  518C               	movf	___ftmul@f2& (0+255),w,b
 13221  00243C  0100               	movlb	0	; () banked
 13222  00243E  2793               	addwf	___ftmul@f3_as_product& (0+255),f,b
 13223  002440  0100               	movlb	0	; () banked
 13224  002442  518D               	movf	(___ftmul@f2+1)& (0+255),w,b
 13225  002444  0100               	movlb	0	; () banked
 13226  002446  2394               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 13227  002448  0100               	movlb	0	; () banked
 13228  00244A  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 13229  00244C  0100               	movlb	0	; () banked
 13230  00244E  2395               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 13231  002450                     l6175:
 13232                           
 13233                           ; BSR set to: 0
 13234  002450  0100               	movlb	0	; () banked
 13235  002452  90D8               	bcf	status,0,c
 13236  002454  338B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 13237  002456  338A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 13238  002458  3389               	rrcf	___ftmul@f1& (0+255),f,b
 13239  00245A  0100               	movlb	0	; () banked
 13240  00245C  90D8               	bcf	status,0,c
 13241  00245E  378C               	rlcf	___ftmul@f2& (0+255),f,b
 13242  002460  378D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 13243  002462  378E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 13244                           
 13245                           ; BSR set to: 0
 13246  002464  0100               	movlb	0	; () banked
 13247  002466  2F96               	decfsz	___ftmul@cntr& (0+255),f,b
 13248  002468  D7E4               	goto	l6171
 13249                           
 13250                           ; BSR set to: 0
 13251                           
 13252                           ; BSR set to: 0
 13253  00246A  0E09               	movlw	9
 13254  00246C  0100               	movlb	0	; () banked
 13255  00246E  6F96               	movwf	___ftmul@cntr& (0+255),b
 13256  002470                     l6181:
 13257                           
 13258                           ; BSR set to: 0
 13259  002470  0100               	movlb	0	; () banked
 13260  002472  A189               	btfss	___ftmul@f1& (0+255),0,b
 13261  002474  D00C               	goto	l6185
 13262                           
 13263                           ; BSR set to: 0
 13264  002476  0100               	movlb	0	; () banked
 13265  002478  518C               	movf	___ftmul@f2& (0+255),w,b
 13266  00247A  0100               	movlb	0	; () banked
 13267  00247C  2793               	addwf	___ftmul@f3_as_product& (0+255),f,b
 13268  00247E  0100               	movlb	0	; () banked
 13269  002480  518D               	movf	(___ftmul@f2+1)& (0+255),w,b
 13270  002482  0100               	movlb	0	; () banked
 13271  002484  2394               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 13272  002486  0100               	movlb	0	; () banked
 13273  002488  518E               	movf	(___ftmul@f2+2)& (0+255),w,b
 13274  00248A  0100               	movlb	0	; () banked
 13275  00248C  2395               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 13276  00248E                     l6185:
 13277                           
 13278                           ; BSR set to: 0
 13279  00248E  0100               	movlb	0	; () banked
 13280  002490  90D8               	bcf	status,0,c
 13281  002492  338B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 13282  002494  338A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 13283  002496  3389               	rrcf	___ftmul@f1& (0+255),f,b
 13284  002498  0100               	movlb	0	; () banked
 13285  00249A  90D8               	bcf	status,0,c
 13286  00249C  3395               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 13287  00249E  3394               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 13288  0024A0  3393               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 13289                           
 13290                           ; BSR set to: 0
 13291  0024A2  0100               	movlb	0	; () banked
 13292  0024A4  2F96               	decfsz	___ftmul@cntr& (0+255),f,b
 13293  0024A6  D7E4               	goto	l6181
 13294                           
 13295                           ; BSR set to: 0
 13296                           
 13297                           ; BSR set to: 0
 13298  0024A8  C093  F023         	movff	___ftmul@f3_as_product,___ftpack@arg
 13299  0024AC  C094  F024         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 13300  0024B0  C095  F025         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 13301  0024B4  C092  F026         	movff	___ftmul@exp,___ftpack@exp
 13302  0024B8  C097  F027         	movff	___ftmul@sign,___ftpack@sign
 13303  0024BC  EC43  F01A         	call	___ftpack	;wreg free
 13304  0024C0  C023  F089         	movff	?___ftpack,?___ftmul
 13305  0024C4  C024  F08A         	movff	?___ftpack+1,?___ftmul+1
 13306  0024C8  C025  F08B         	movff	?___ftpack+2,?___ftmul+2
 13307  0024CC  0012               	return	
 13308  0024CE                     __end_of___ftmul:
 13309                           	opt stack 0
 13310                           tblptru	equ	0xFF8
 13311                           tblptrh	equ	0xFF7
 13312                           tblptrl	equ	0xFF6
 13313                           tablat	equ	0xFF5
 13314                           prodh	equ	0xFF4
 13315                           prodl	equ	0xFF3
 13316                           intcon	equ	0xFF2
 13317                           intcon3	equ	0xFF0
 13318                           postinc0	equ	0xFEE
 13319                           wreg	equ	0xFE8
 13320                           postdec1	equ	0xFE5
 13321                           fsr1l	equ	0xFE1
 13322                           indf2	equ	0xFDF
 13323                           postinc2	equ	0xFDE
 13324                           postdec2	equ	0xFDD
 13325                           fsr2h	equ	0xFDA
 13326                           fsr2l	equ	0xFD9
 13327                           status	equ	0xFD8
 13328                           
 13329 ;; *************** function ___ftdiv *****************
 13330 ;; Defined at:
 13331 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 13332 ;; Parameters:    Size  Location     Type
 13333 ;;  f1              3   52[COMRAM] float 
 13334 ;;  f2              3   55[COMRAM] float 
 13335 ;; Auto vars:     Size  Location     Type
 13336 ;;  f3              3    4[BANK0 ] float 
 13337 ;;  sign            1    8[BANK0 ] unsigned char 
 13338 ;;  exp             1    7[BANK0 ] unsigned char 
 13339 ;;  cntr            1    3[BANK0 ] unsigned char 
 13340 ;; Return value:  Size  Location     Type
 13341 ;;                  3   52[COMRAM] float 
 13342 ;; Registers used:
 13343 ;;		wreg, status,2, status,0, cstack
 13344 ;; Tracked objects:
 13345 ;;		On entry : 0/0
 13346 ;;		On exit  : 0/0
 13347 ;;		Unchanged: 0/0
 13348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13349 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13350 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13351 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13352 ;;      Totals:         6       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13353 ;;Total ram usage:       15 bytes
 13354 ;; Hardware stack levels used:    1
 13355 ;; Hardware stack levels required when called:    4
 13356 ;; This function calls:
 13357 ;;		___ftpack
 13358 ;; This function is called by:
 13359 ;;		_sortBattery
 13360 ;;		_angleToPulse
 13361 ;; This function uses a non-reentrant model
 13362 ;;
 13363                           
 13364                           	psect	text55
 13365  002AD4                     __ptext55:
 13366                           	opt stack 0
 13367  002AD4                     ___ftdiv:
 13368                           	opt stack 23
 13369                           
 13370                           ;incstack = 0
 13371  002AD4  C037  F080         	movff	___ftdiv@f1+2,??___ftdiv
 13372  002AD8  0100               	movlb	0	; () banked
 13373  002ADA  6B81               	clrf	(??___ftdiv+1)& (0+255),b
 13374  002ADC  6B82               	clrf	(??___ftdiv+2)& (0+255),b
 13375  002ADE  3436               	rlcf	___ftdiv@f1+1,w,c
 13376  002AE0  0100               	movlb	0	; () banked
 13377  002AE2  3780               	rlcf	??___ftdiv& (0+255),f,b
 13378  002AE4  E301               	bnc	u6411
 13379  002AE6  8181               	bsf	(??___ftdiv+1)& (0+255),0,b
 13380  002AE8                     u6411:
 13381  002AE8  0100               	movlb	0	; () banked
 13382  002AEA  5180               	movf	??___ftdiv& (0+255),w,b
 13383  002AEC  0100               	movlb	0	; () banked
 13384  002AEE  6F87               	movwf	___ftdiv@exp& (0+255),b
 13385  002AF0  0100               	movlb	0	; () banked
 13386  002AF2  5187               	movf	___ftdiv@exp& (0+255),w,b
 13387  002AF4  A4D8               	btfss	status,2,c
 13388  002AF6  D007               	goto	l6547
 13389                           
 13390                           ; BSR set to: 0
 13391  002AF8  0E00               	movlw	0
 13392  002AFA  6E35               	movwf	?___ftdiv,c
 13393  002AFC  0E00               	movlw	0
 13394  002AFE  6E36               	movwf	?___ftdiv+1,c
 13395  002B00  0E00               	movlw	0
 13396  002B02  6E37               	movwf	?___ftdiv+2,c
 13397                           
 13398                           ; BSR set to: 0
 13399  002B04  0012               	return	
 13400  002B06                     l6547:
 13401                           
 13402                           ; BSR set to: 0
 13403  002B06  C03A  F080         	movff	___ftdiv@f2+2,??___ftdiv
 13404  002B0A  0100               	movlb	0	; () banked
 13405  002B0C  6B81               	clrf	(??___ftdiv+1)& (0+255),b
 13406  002B0E  6B82               	clrf	(??___ftdiv+2)& (0+255),b
 13407  002B10  3439               	rlcf	___ftdiv@f2+1,w,c
 13408  002B12  0100               	movlb	0	; () banked
 13409  002B14  3780               	rlcf	??___ftdiv& (0+255),f,b
 13410  002B16  E301               	bnc	u6431
 13411  002B18  8181               	bsf	(??___ftdiv+1)& (0+255),0,b
 13412  002B1A                     u6431:
 13413  002B1A  0100               	movlb	0	; () banked
 13414  002B1C  5180               	movf	??___ftdiv& (0+255),w,b
 13415  002B1E  0100               	movlb	0	; () banked
 13416  002B20  6F88               	movwf	___ftdiv@sign& (0+255),b
 13417  002B22  0100               	movlb	0	; () banked
 13418  002B24  5188               	movf	___ftdiv@sign& (0+255),w,b
 13419  002B26  A4D8               	btfss	status,2,c
 13420  002B28  D007               	goto	l6553
 13421                           
 13422                           ; BSR set to: 0
 13423  002B2A  0E00               	movlw	0
 13424  002B2C  6E35               	movwf	?___ftdiv,c
 13425  002B2E  0E00               	movlw	0
 13426  002B30  6E36               	movwf	?___ftdiv+1,c
 13427  002B32  0E00               	movlw	0
 13428  002B34  6E37               	movwf	?___ftdiv+2,c
 13429                           
 13430                           ; BSR set to: 0
 13431  002B36  0012               	return	
 13432  002B38                     l6553:
 13433                           
 13434                           ; BSR set to: 0
 13435  002B38  0E00               	movlw	0
 13436  002B3A  0100               	movlb	0	; () banked
 13437  002B3C  6F84               	movwf	___ftdiv@f3& (0+255),b
 13438  002B3E  0E00               	movlw	0
 13439  002B40  0100               	movlb	0	; () banked
 13440  002B42  6F85               	movwf	(___ftdiv@f3+1)& (0+255),b
 13441  002B44  0E00               	movlw	0
 13442  002B46  0100               	movlb	0	; () banked
 13443  002B48  6F86               	movwf	(___ftdiv@f3+2)& (0+255),b
 13444                           
 13445                           ; BSR set to: 0
 13446  002B4A  0100               	movlb	0	; () banked
 13447  002B4C  5188               	movf	___ftdiv@sign& (0+255),w,b
 13448  002B4E  0F89               	addlw	137
 13449  002B50  0100               	movlb	0	; () banked
 13450  002B52  5F87               	subwf	___ftdiv@exp& (0+255),f,b
 13451                           
 13452                           ; BSR set to: 0
 13453  002B54  C037  F088         	movff	___ftdiv@f1+2,___ftdiv@sign
 13454                           
 13455                           ; BSR set to: 0
 13456  002B58  503A               	movf	___ftdiv@f2+2,w,c
 13457  002B5A  0100               	movlb	0	; () banked
 13458  002B5C  1B88               	xorwf	___ftdiv@sign& (0+255),f,b
 13459                           
 13460                           ; BSR set to: 0
 13461  002B5E  0E80               	movlw	128
 13462  002B60  0100               	movlb	0	; () banked
 13463  002B62  1788               	andwf	___ftdiv@sign& (0+255),f,b
 13464                           
 13465                           ; BSR set to: 0
 13466  002B64  8E36               	bsf	___ftdiv@f1+1,7,c
 13467                           
 13468                           ; BSR set to: 0
 13469  002B66  0EFF               	movlw	255
 13470  002B68  1635               	andwf	___ftdiv@f1,f,c
 13471  002B6A  0EFF               	movlw	255
 13472  002B6C  1636               	andwf	___ftdiv@f1+1,f,c
 13473  002B6E  0E00               	movlw	0
 13474  002B70  1637               	andwf	___ftdiv@f1+2,f,c
 13475                           
 13476                           ; BSR set to: 0
 13477  002B72  8E39               	bsf	___ftdiv@f2+1,7,c
 13478                           
 13479                           ; BSR set to: 0
 13480  002B74  0EFF               	movlw	255
 13481  002B76  1638               	andwf	___ftdiv@f2,f,c
 13482  002B78  0EFF               	movlw	255
 13483  002B7A  1639               	andwf	___ftdiv@f2+1,f,c
 13484  002B7C  0E00               	movlw	0
 13485  002B7E  163A               	andwf	___ftdiv@f2+2,f,c
 13486                           
 13487                           ; BSR set to: 0
 13488  002B80  0E18               	movlw	24
 13489  002B82  0100               	movlb	0	; () banked
 13490  002B84  6F83               	movwf	___ftdiv@cntr& (0+255),b
 13491  002B86                     l6573:
 13492                           
 13493                           ; BSR set to: 0
 13494  002B86  0100               	movlb	0	; () banked
 13495  002B88  90D8               	bcf	status,0,c
 13496  002B8A  3784               	rlcf	___ftdiv@f3& (0+255),f,b
 13497  002B8C  3785               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 13498  002B8E  3786               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 13499                           
 13500                           ; BSR set to: 0
 13501  002B90  5038               	movf	___ftdiv@f2,w,c
 13502  002B92  5C35               	subwf	___ftdiv@f1,w,c
 13503  002B94  5039               	movf	___ftdiv@f2+1,w,c
 13504  002B96  5836               	subwfb	___ftdiv@f1+1,w,c
 13505  002B98  503A               	movf	___ftdiv@f2+2,w,c
 13506  002B9A  5837               	subwfb	___ftdiv@f1+2,w,c
 13507  002B9C  A0D8               	btfss	status,0,c
 13508  002B9E  D008               	goto	l1184
 13509                           
 13510                           ; BSR set to: 0
 13511  002BA0  5038               	movf	___ftdiv@f2,w,c
 13512  002BA2  5E35               	subwf	___ftdiv@f1,f,c
 13513  002BA4  5039               	movf	___ftdiv@f2+1,w,c
 13514  002BA6  5A36               	subwfb	___ftdiv@f1+1,f,c
 13515  002BA8  503A               	movf	___ftdiv@f2+2,w,c
 13516  002BAA  5A37               	subwfb	___ftdiv@f1+2,f,c
 13517                           
 13518                           ; BSR set to: 0
 13519  002BAC  0100               	movlb	0	; () banked
 13520  002BAE  8184               	bsf	___ftdiv@f3& (0+255),0,b
 13521  002BB0                     l1184:
 13522                           
 13523                           ; BSR set to: 0
 13524  002BB0  90D8               	bcf	status,0,c
 13525  002BB2  3635               	rlcf	___ftdiv@f1,f,c
 13526  002BB4  3636               	rlcf	___ftdiv@f1+1,f,c
 13527  002BB6  3637               	rlcf	___ftdiv@f1+2,f,c
 13528                           
 13529                           ; BSR set to: 0
 13530  002BB8  0100               	movlb	0	; () banked
 13531  002BBA  2F83               	decfsz	___ftdiv@cntr& (0+255),f,b
 13532  002BBC  D7E4               	goto	l6573
 13533                           
 13534                           ; BSR set to: 0
 13535                           
 13536                           ; BSR set to: 0
 13537  002BBE  C084  F023         	movff	___ftdiv@f3,___ftpack@arg
 13538  002BC2  C085  F024         	movff	___ftdiv@f3+1,___ftpack@arg+1
 13539  002BC6  C086  F025         	movff	___ftdiv@f3+2,___ftpack@arg+2
 13540  002BCA  C087  F026         	movff	___ftdiv@exp,___ftpack@exp
 13541  002BCE  C088  F027         	movff	___ftdiv@sign,___ftpack@sign
 13542  002BD2  EC43  F01A         	call	___ftpack	;wreg free
 13543  002BD6  C023  F035         	movff	?___ftpack,?___ftdiv
 13544  002BDA  C024  F036         	movff	?___ftpack+1,?___ftdiv+1
 13545  002BDE  C025  F037         	movff	?___ftpack+2,?___ftdiv+2
 13546  002BE2  0012               	return	
 13547  002BE4                     __end_of___ftdiv:
 13548                           	opt stack 0
 13549                           tblptru	equ	0xFF8
 13550                           tblptrh	equ	0xFF7
 13551                           tblptrl	equ	0xFF6
 13552                           tablat	equ	0xFF5
 13553                           prodh	equ	0xFF4
 13554                           prodl	equ	0xFF3
 13555                           intcon	equ	0xFF2
 13556                           intcon3	equ	0xFF0
 13557                           postinc0	equ	0xFEE
 13558                           wreg	equ	0xFE8
 13559                           postdec1	equ	0xFE5
 13560                           fsr1l	equ	0xFE1
 13561                           indf2	equ	0xFDF
 13562                           postinc2	equ	0xFDE
 13563                           postdec2	equ	0xFDD
 13564                           fsr2h	equ	0xFDA
 13565                           fsr2l	equ	0xFD9
 13566                           status	equ	0xFD8
 13567                           
 13568 ;; *************** function ___ftadd *****************
 13569 ;; Defined at:
 13570 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 13571 ;; Parameters:    Size  Location     Type
 13572 ;;  f1              3   34[BANK0 ] float 
 13573 ;;  f2              3   37[BANK0 ] float 
 13574 ;; Auto vars:     Size  Location     Type
 13575 ;;  exp1            1   45[BANK0 ] unsigned char 
 13576 ;;  exp2            1   44[BANK0 ] unsigned char 
 13577 ;;  sign            1   43[BANK0 ] unsigned char 
 13578 ;; Return value:  Size  Location     Type
 13579 ;;                  3   34[BANK0 ] float 
 13580 ;; Registers used:
 13581 ;;		wreg, status,2, status,0, cstack
 13582 ;; Tracked objects:
 13583 ;;		On entry : 0/0
 13584 ;;		On exit  : 0/0
 13585 ;;		Unchanged: 0/0
 13586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13587 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13588 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13589 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13590 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13591 ;;Total ram usage:       12 bytes
 13592 ;; Hardware stack levels used:    1
 13593 ;; Hardware stack levels required when called:    4
 13594 ;; This function calls:
 13595 ;;		___ftpack
 13596 ;; This function is called by:
 13597 ;;		_angleToPulse
 13598 ;;		_printf
 13599 ;;		___ftsub
 13600 ;; This function uses a non-reentrant model
 13601 ;;
 13602                           
 13603                           	psect	text56
 13604  001D30                     __ptext56:
 13605                           	opt stack 0
 13606  001D30                     ___ftadd:
 13607                           	opt stack 23
 13608                           
 13609                           ;incstack = 0
 13610  001D30  C0A4  F0A8         	movff	___ftadd@f1+2,??___ftadd
 13611  001D34  0100               	movlb	0	; () banked
 13612  001D36  6BA9               	clrf	(??___ftadd+1)& (0+255),b
 13613  001D38  6BAA               	clrf	(??___ftadd+2)& (0+255),b
 13614  001D3A  0100               	movlb	0	; () banked
 13615  001D3C  35A3               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 13616  001D3E  0100               	movlb	0	; () banked
 13617  001D40  37A8               	rlcf	??___ftadd& (0+255),f,b
 13618  001D42  E301               	bnc	u5681
 13619  001D44  81A9               	bsf	(??___ftadd+1)& (0+255),0,b
 13620  001D46                     u5681:
 13621  001D46  0100               	movlb	0	; () banked
 13622  001D48  51A8               	movf	??___ftadd& (0+255),w,b
 13623  001D4A  0100               	movlb	0	; () banked
 13624  001D4C  6FAD               	movwf	___ftadd@exp1& (0+255),b
 13625  001D4E  C0A7  F0A8         	movff	___ftadd@f2+2,??___ftadd
 13626  001D52  0100               	movlb	0	; () banked
 13627  001D54  6BA9               	clrf	(??___ftadd+1)& (0+255),b
 13628  001D56  6BAA               	clrf	(??___ftadd+2)& (0+255),b
 13629  001D58  0100               	movlb	0	; () banked
 13630  001D5A  35A6               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 13631  001D5C  0100               	movlb	0	; () banked
 13632  001D5E  37A8               	rlcf	??___ftadd& (0+255),f,b
 13633  001D60  E301               	bnc	u5691
 13634  001D62  81A9               	bsf	(??___ftadd+1)& (0+255),0,b
 13635  001D64                     u5691:
 13636  001D64  0100               	movlb	0	; () banked
 13637  001D66  51A8               	movf	??___ftadd& (0+255),w,b
 13638  001D68  0100               	movlb	0	; () banked
 13639  001D6A  6FAC               	movwf	___ftadd@exp2& (0+255),b
 13640                           
 13641                           ; BSR set to: 0
 13642  001D6C  0100               	movlb	0	; () banked
 13643  001D6E  51AD               	movf	___ftadd@exp1& (0+255),w,b
 13644  001D70  0100               	movlb	0	; () banked
 13645  001D72  B4D8               	btfsc	status,2,c
 13646  001D74  D011               	goto	l1149
 13647                           
 13648                           ; BSR set to: 0
 13649  001D76  0100               	movlb	0	; () banked
 13650  001D78  51AC               	movf	___ftadd@exp2& (0+255),w,b
 13651  001D7A  0100               	movlb	0	; () banked
 13652  001D7C  5DAD               	subwf	___ftadd@exp1& (0+255),w,b
 13653  001D7E  B0D8               	btfsc	status,0,c
 13654  001D80  D012               	goto	l6083
 13655                           
 13656                           ; BSR set to: 0
 13657  001D82  0100               	movlb	0	; () banked
 13658  001D84  51AD               	movf	___ftadd@exp1& (0+255),w,b
 13659  001D86  0800               	sublw	0
 13660  001D88  0100               	movlb	0	; () banked
 13661  001D8A  25AC               	addwf	___ftadd@exp2& (0+255),w,b
 13662  001D8C  0100               	movlb	0	; () banked
 13663  001D8E  6FA8               	movwf	??___ftadd& (0+255),b
 13664  001D90  0E18               	movlw	24
 13665  001D92  0100               	movlb	0	; () banked
 13666  001D94  65A8               	cpfsgt	??___ftadd& (0+255),b
 13667  001D96  D007               	goto	l6083
 13668  001D98                     l1149:
 13669                           
 13670                           ; BSR set to: 0
 13671  001D98  C0A5  F0A2         	movff	___ftadd@f2,?___ftadd
 13672  001D9C  C0A6  F0A3         	movff	___ftadd@f2+1,?___ftadd+1
 13673  001DA0  C0A7  F0A4         	movff	___ftadd@f2+2,?___ftadd+2
 13674  001DA4  0012               	return	
 13675  001DA6                     l6083:
 13676                           
 13677                           ; BSR set to: 0
 13678  001DA6  0100               	movlb	0	; () banked
 13679  001DA8  51AC               	movf	___ftadd@exp2& (0+255),w,b
 13680  001DAA  0100               	movlb	0	; () banked
 13681  001DAC  B4D8               	btfsc	status,2,c
 13682  001DAE  D011               	goto	l1153
 13683                           
 13684                           ; BSR set to: 0
 13685  001DB0  0100               	movlb	0	; () banked
 13686  001DB2  51AD               	movf	___ftadd@exp1& (0+255),w,b
 13687  001DB4  0100               	movlb	0	; () banked
 13688  001DB6  5DAC               	subwf	___ftadd@exp2& (0+255),w,b
 13689  001DB8  B0D8               	btfsc	status,0,c
 13690  001DBA  D012               	goto	l6089
 13691                           
 13692                           ; BSR set to: 0
 13693  001DBC  0100               	movlb	0	; () banked
 13694  001DBE  51AC               	movf	___ftadd@exp2& (0+255),w,b
 13695  001DC0  0800               	sublw	0
 13696  001DC2  0100               	movlb	0	; () banked
 13697  001DC4  25AD               	addwf	___ftadd@exp1& (0+255),w,b
 13698  001DC6  0100               	movlb	0	; () banked
 13699  001DC8  6FA8               	movwf	??___ftadd& (0+255),b
 13700  001DCA  0E18               	movlw	24
 13701  001DCC  0100               	movlb	0	; () banked
 13702  001DCE  65A8               	cpfsgt	??___ftadd& (0+255),b
 13703  001DD0  D007               	goto	l6089
 13704  001DD2                     l1153:
 13705                           
 13706                           ; BSR set to: 0
 13707  001DD2  C0A2  F0A2         	movff	___ftadd@f1,?___ftadd
 13708  001DD6  C0A3  F0A3         	movff	___ftadd@f1+1,?___ftadd+1
 13709  001DDA  C0A4  F0A4         	movff	___ftadd@f1+2,?___ftadd+2
 13710  001DDE  0012               	return	
 13711  001DE0                     l6089:
 13712                           
 13713                           ; BSR set to: 0
 13714  001DE0  0E06               	movlw	6
 13715  001DE2  0100               	movlb	0	; () banked
 13716  001DE4  6FAB               	movwf	___ftadd@sign& (0+255),b
 13717                           
 13718                           ; BSR set to: 0
 13719  001DE6  0100               	movlb	0	; () banked
 13720  001DE8  AFA4               	btfss	(___ftadd@f1+2)& (0+255),7,b
 13721  001DEA  D002               	goto	l6095
 13722                           
 13723                           ; BSR set to: 0
 13724  001DEC  0100               	movlb	0	; () banked
 13725  001DEE  8FAB               	bsf	___ftadd@sign& (0+255),7,b
 13726  001DF0                     l6095:
 13727                           
 13728                           ; BSR set to: 0
 13729  001DF0  0100               	movlb	0	; () banked
 13730  001DF2  AFA7               	btfss	(___ftadd@f2+2)& (0+255),7,b
 13731  001DF4  D002               	goto	l1155
 13732                           
 13733                           ; BSR set to: 0
 13734  001DF6  0100               	movlb	0	; () banked
 13735  001DF8  8DAB               	bsf	___ftadd@sign& (0+255),6,b
 13736  001DFA                     l1155:
 13737                           
 13738                           ; BSR set to: 0
 13739  001DFA  0100               	movlb	0	; () banked
 13740  001DFC  8FA3               	bsf	(___ftadd@f1+1)& (0+255),7,b
 13741                           
 13742                           ; BSR set to: 0
 13743  001DFE  0EFF               	movlw	255
 13744  001E00  0100               	movlb	0	; () banked
 13745  001E02  17A2               	andwf	___ftadd@f1& (0+255),f,b
 13746  001E04  0EFF               	movlw	255
 13747  001E06  0100               	movlb	0	; () banked
 13748  001E08  17A3               	andwf	(___ftadd@f1+1)& (0+255),f,b
 13749  001E0A  0E00               	movlw	0
 13750  001E0C  0100               	movlb	0	; () banked
 13751  001E0E  17A4               	andwf	(___ftadd@f1+2)& (0+255),f,b
 13752  001E10  0100               	movlb	0	; () banked
 13753  001E12  8FA6               	bsf	(___ftadd@f2+1)& (0+255),7,b
 13754                           
 13755                           ; BSR set to: 0
 13756  001E14  0EFF               	movlw	255
 13757  001E16  0100               	movlb	0	; () banked
 13758  001E18  17A5               	andwf	___ftadd@f2& (0+255),f,b
 13759  001E1A  0EFF               	movlw	255
 13760  001E1C  0100               	movlb	0	; () banked
 13761  001E1E  17A6               	andwf	(___ftadd@f2+1)& (0+255),f,b
 13762  001E20  0E00               	movlw	0
 13763  001E22  0100               	movlb	0	; () banked
 13764  001E24  17A7               	andwf	(___ftadd@f2+2)& (0+255),f,b
 13765                           
 13766                           ; BSR set to: 0
 13767  001E26  0100               	movlb	0	; () banked
 13768  001E28  51AC               	movf	___ftadd@exp2& (0+255),w,b
 13769  001E2A  0100               	movlb	0	; () banked
 13770  001E2C  5DAD               	subwf	___ftadd@exp1& (0+255),w,b
 13771  001E2E  B0D8               	btfsc	status,0,c
 13772  001E30  D025               	goto	l6115
 13773  001E32                     l6105:
 13774                           
 13775                           ; BSR set to: 0
 13776  001E32  0100               	movlb	0	; () banked
 13777  001E34  90D8               	bcf	status,0,c
 13778  001E36  37A5               	rlcf	___ftadd@f2& (0+255),f,b
 13779  001E38  37A6               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 13780  001E3A  37A7               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 13781  001E3C  0100               	movlb	0	; () banked
 13782  001E3E  07AC               	decf	___ftadd@exp2& (0+255),f,b
 13783                           
 13784                           ; BSR set to: 0
 13785  001E40  0100               	movlb	0	; () banked
 13786  001E42  51AD               	movf	___ftadd@exp1& (0+255),w,b
 13787  001E44  0100               	movlb	0	; () banked
 13788  001E46  19AC               	xorwf	___ftadd@exp2& (0+255),w,b
 13789  001E48  B4D8               	btfsc	status,2,c
 13790  001E4A  D011               	goto	l6113
 13791                           
 13792                           ; BSR set to: 0
 13793  001E4C  0100               	movlb	0	; () banked
 13794  001E4E  07AB               	decf	___ftadd@sign& (0+255),f,b
 13795  001E50  C0AB  F0A8         	movff	___ftadd@sign,??___ftadd
 13796  001E54  0E07               	movlw	7
 13797  001E56  0100               	movlb	0	; () banked
 13798  001E58  17A8               	andwf	??___ftadd& (0+255),f,b
 13799  001E5A  B4D8               	btfsc	status,2,c
 13800  001E5C  D008               	goto	l6113
 13801  001E5E  D7E9               	goto	l6105
 13802  001E60                     l6111:
 13803                           
 13804                           ; BSR set to: 0
 13805  001E60  0100               	movlb	0	; () banked
 13806  001E62  90D8               	bcf	status,0,c
 13807  001E64  33A4               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 13808  001E66  33A3               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 13809  001E68  33A2               	rrcf	___ftadd@f1& (0+255),f,b
 13810  001E6A  0100               	movlb	0	; () banked
 13811  001E6C  2BAD               	incf	___ftadd@exp1& (0+255),f,b
 13812  001E6E                     l6113:
 13813                           
 13814                           ; BSR set to: 0
 13815  001E6E  0100               	movlb	0	; () banked
 13816  001E70  51AC               	movf	___ftadd@exp2& (0+255),w,b
 13817  001E72  0100               	movlb	0	; () banked
 13818  001E74  19AD               	xorwf	___ftadd@exp1& (0+255),w,b
 13819  001E76  B4D8               	btfsc	status,2,c
 13820  001E78  D02B               	goto	l1164
 13821  001E7A  D7F2               	goto	l6111
 13822  001E7C                     l6115:
 13823                           
 13824                           ; BSR set to: 0
 13825  001E7C  0100               	movlb	0	; () banked
 13826  001E7E  51AD               	movf	___ftadd@exp1& (0+255),w,b
 13827  001E80  0100               	movlb	0	; () banked
 13828  001E82  5DAC               	subwf	___ftadd@exp2& (0+255),w,b
 13829  001E84  B0D8               	btfsc	status,0,c
 13830  001E86  D024               	goto	l1164
 13831  001E88                     l6117:
 13832                           
 13833                           ; BSR set to: 0
 13834  001E88  0100               	movlb	0	; () banked
 13835  001E8A  90D8               	bcf	status,0,c
 13836  001E8C  37A2               	rlcf	___ftadd@f1& (0+255),f,b
 13837  001E8E  37A3               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 13838  001E90  37A4               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 13839  001E92  0100               	movlb	0	; () banked
 13840  001E94  07AD               	decf	___ftadd@exp1& (0+255),f,b
 13841                           
 13842                           ; BSR set to: 0
 13843  001E96  0100               	movlb	0	; () banked
 13844  001E98  51AD               	movf	___ftadd@exp1& (0+255),w,b
 13845  001E9A  0100               	movlb	0	; () banked
 13846  001E9C  19AC               	xorwf	___ftadd@exp2& (0+255),w,b
 13847  001E9E  B4D8               	btfsc	status,2,c
 13848  001EA0  D011               	goto	l6125
 13849                           
 13850                           ; BSR set to: 0
 13851  001EA2  0100               	movlb	0	; () banked
 13852  001EA4  07AB               	decf	___ftadd@sign& (0+255),f,b
 13853  001EA6  C0AB  F0A8         	movff	___ftadd@sign,??___ftadd
 13854  001EAA  0E07               	movlw	7
 13855  001EAC  0100               	movlb	0	; () banked
 13856  001EAE  17A8               	andwf	??___ftadd& (0+255),f,b
 13857  001EB0  B4D8               	btfsc	status,2,c
 13858  001EB2  D008               	goto	l6125
 13859  001EB4  D7E9               	goto	l6117
 13860  001EB6                     l6123:
 13861                           
 13862                           ; BSR set to: 0
 13863  001EB6  0100               	movlb	0	; () banked
 13864  001EB8  90D8               	bcf	status,0,c
 13865  001EBA  33A7               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 13866  001EBC  33A6               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 13867  001EBE  33A5               	rrcf	___ftadd@f2& (0+255),f,b
 13868  001EC0  0100               	movlb	0	; () banked
 13869  001EC2  2BAC               	incf	___ftadd@exp2& (0+255),f,b
 13870  001EC4                     l6125:
 13871                           
 13872                           ; BSR set to: 0
 13873  001EC4  0100               	movlb	0	; () banked
 13874  001EC6  51AC               	movf	___ftadd@exp2& (0+255),w,b
 13875  001EC8  0100               	movlb	0	; () banked
 13876  001ECA  19AD               	xorwf	___ftadd@exp1& (0+255),w,b
 13877  001ECC  A4D8               	btfss	status,2,c
 13878  001ECE  D7F3               	goto	l6123
 13879  001ED0                     l1164:
 13880                           
 13881                           ; BSR set to: 0
 13882  001ED0  0100               	movlb	0	; () banked
 13883  001ED2  AFAB               	btfss	___ftadd@sign& (0+255),7,b
 13884  001ED4  D012               	goto	l1173
 13885                           
 13886                           ; BSR set to: 0
 13887  001ED6  0EFF               	movlw	255
 13888  001ED8  0100               	movlb	0	; () banked
 13889  001EDA  1BA2               	xorwf	___ftadd@f1& (0+255),f,b
 13890  001EDC  0EFF               	movlw	255
 13891  001EDE  0100               	movlb	0	; () banked
 13892  001EE0  1BA3               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 13893  001EE2  0EFF               	movlw	255
 13894  001EE4  0100               	movlb	0	; () banked
 13895  001EE6  1BA4               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 13896  001EE8  0E01               	movlw	1
 13897  001EEA  0100               	movlb	0	; () banked
 13898  001EEC  27A2               	addwf	___ftadd@f1& (0+255),f,b
 13899  001EEE  0E00               	movlw	0
 13900  001EF0  0100               	movlb	0	; () banked
 13901  001EF2  23A3               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 13902  001EF4  0E00               	movlw	0
 13903  001EF6  0100               	movlb	0	; () banked
 13904  001EF8  23A4               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 13905  001EFA                     l1173:
 13906                           
 13907                           ; BSR set to: 0
 13908  001EFA  0100               	movlb	0	; () banked
 13909  001EFC  ADAB               	btfss	___ftadd@sign& (0+255),6,b
 13910  001EFE  D012               	goto	l6131
 13911                           
 13912                           ; BSR set to: 0
 13913  001F00  0EFF               	movlw	255
 13914  001F02  0100               	movlb	0	; () banked
 13915  001F04  1BA5               	xorwf	___ftadd@f2& (0+255),f,b
 13916  001F06  0EFF               	movlw	255
 13917  001F08  0100               	movlb	0	; () banked
 13918  001F0A  1BA6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 13919  001F0C  0EFF               	movlw	255
 13920  001F0E  0100               	movlb	0	; () banked
 13921  001F10  1BA7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 13922  001F12  0E01               	movlw	1
 13923  001F14  0100               	movlb	0	; () banked
 13924  001F16  27A5               	addwf	___ftadd@f2& (0+255),f,b
 13925  001F18  0E00               	movlw	0
 13926  001F1A  0100               	movlb	0	; () banked
 13927  001F1C  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 13928  001F1E  0E00               	movlw	0
 13929  001F20  0100               	movlb	0	; () banked
 13930  001F22  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 13931  001F24                     l6131:
 13932                           
 13933                           ; BSR set to: 0
 13934  001F24  0E00               	movlw	0
 13935  001F26  0100               	movlb	0	; () banked
 13936  001F28  6FAB               	movwf	___ftadd@sign& (0+255),b
 13937                           
 13938                           ; BSR set to: 0
 13939  001F2A  0100               	movlb	0	; () banked
 13940  001F2C  51A2               	movf	___ftadd@f1& (0+255),w,b
 13941  001F2E  0100               	movlb	0	; () banked
 13942  001F30  27A5               	addwf	___ftadd@f2& (0+255),f,b
 13943  001F32  0100               	movlb	0	; () banked
 13944  001F34  51A3               	movf	(___ftadd@f1+1)& (0+255),w,b
 13945  001F36  0100               	movlb	0	; () banked
 13946  001F38  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 13947  001F3A  0100               	movlb	0	; () banked
 13948  001F3C  51A4               	movf	(___ftadd@f1+2)& (0+255),w,b
 13949  001F3E  0100               	movlb	0	; () banked
 13950  001F40  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 13951                           
 13952                           ; BSR set to: 0
 13953  001F42  0100               	movlb	0	; () banked
 13954  001F44  AFA7               	btfss	(___ftadd@f2+2)& (0+255),7,b
 13955  001F46  D015               	goto	l6141
 13956                           
 13957                           ; BSR set to: 0
 13958  001F48  0EFF               	movlw	255
 13959  001F4A  0100               	movlb	0	; () banked
 13960  001F4C  1BA5               	xorwf	___ftadd@f2& (0+255),f,b
 13961  001F4E  0EFF               	movlw	255
 13962  001F50  0100               	movlb	0	; () banked
 13963  001F52  1BA6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 13964  001F54  0EFF               	movlw	255
 13965  001F56  0100               	movlb	0	; () banked
 13966  001F58  1BA7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 13967  001F5A  0E01               	movlw	1
 13968  001F5C  0100               	movlb	0	; () banked
 13969  001F5E  27A5               	addwf	___ftadd@f2& (0+255),f,b
 13970  001F60  0E00               	movlw	0
 13971  001F62  0100               	movlb	0	; () banked
 13972  001F64  23A6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 13973  001F66  0E00               	movlw	0
 13974  001F68  0100               	movlb	0	; () banked
 13975  001F6A  23A7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 13976                           
 13977                           ; BSR set to: 0
 13978  001F6C  0E01               	movlw	1
 13979  001F6E  0100               	movlb	0	; () banked
 13980  001F70  6FAB               	movwf	___ftadd@sign& (0+255),b
 13981  001F72                     l6141:
 13982                           
 13983                           ; BSR set to: 0
 13984  001F72  C0A5  F023         	movff	___ftadd@f2,___ftpack@arg
 13985  001F76  C0A6  F024         	movff	___ftadd@f2+1,___ftpack@arg+1
 13986  001F7A  C0A7  F025         	movff	___ftadd@f2+2,___ftpack@arg+2
 13987  001F7E  C0AD  F026         	movff	___ftadd@exp1,___ftpack@exp
 13988  001F82  C0AB  F027         	movff	___ftadd@sign,___ftpack@sign
 13989  001F86  EC43  F01A         	call	___ftpack	;wreg free
 13990  001F8A  C023  F0A2         	movff	?___ftpack,?___ftadd
 13991  001F8E  C024  F0A3         	movff	?___ftpack+1,?___ftadd+1
 13992  001F92  C025  F0A4         	movff	?___ftpack+2,?___ftadd+2
 13993  001F96  0012               	return	
 13994  001F98                     __end_of___ftadd:
 13995                           	opt stack 0
 13996                           tblptru	equ	0xFF8
 13997                           tblptrh	equ	0xFF7
 13998                           tblptrl	equ	0xFF6
 13999                           tablat	equ	0xFF5
 14000                           prodh	equ	0xFF4
 14001                           prodl	equ	0xFF3
 14002                           intcon	equ	0xFF2
 14003                           intcon3	equ	0xFF0
 14004                           postinc0	equ	0xFEE
 14005                           wreg	equ	0xFE8
 14006                           postdec1	equ	0xFE5
 14007                           fsr1l	equ	0xFE1
 14008                           indf2	equ	0xFDF
 14009                           postinc2	equ	0xFDE
 14010                           postdec2	equ	0xFDD
 14011                           fsr2h	equ	0xFDA
 14012                           fsr2l	equ	0xFD9
 14013                           status	equ	0xFD8
 14014                           
 14015 ;; *************** function ___awtoft *****************
 14016 ;; Defined at:
 14017 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 14018 ;; Parameters:    Size  Location     Type
 14019 ;;  c               2   42[COMRAM] int 
 14020 ;; Auto vars:     Size  Location     Type
 14021 ;;  sign            1   45[COMRAM] unsigned char 
 14022 ;; Return value:  Size  Location     Type
 14023 ;;                  3   42[COMRAM] float 
 14024 ;; Registers used:
 14025 ;;		wreg, status,2, status,0, cstack
 14026 ;; Tracked objects:
 14027 ;;		On entry : 0/0
 14028 ;;		On exit  : 0/0
 14029 ;;		Unchanged: 0/0
 14030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14031 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14032 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14034 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14035 ;;Total ram usage:        4 bytes
 14036 ;; Hardware stack levels used:    1
 14037 ;; Hardware stack levels required when called:    4
 14038 ;; This function calls:
 14039 ;;		___ftpack
 14040 ;; This function is called by:
 14041 ;;		_sortBattery
 14042 ;;		_angleToPulse
 14043 ;;		_testFrequency
 14044 ;; This function uses a non-reentrant model
 14045 ;;
 14046                           
 14047                           	psect	text57
 14048  003FE2                     __ptext57:
 14049                           	opt stack 0
 14050  003FE2                     ___awtoft:
 14051                           	opt stack 23
 14052                           
 14053                           ;incstack = 0
 14054  003FE2  0E00               	movlw	0
 14055  003FE4  6E2E               	movwf	___awtoft@sign,c
 14056  003FE6  AE2C               	btfss	___awtoft@c+1,7,c
 14057  003FE8  D006               	goto	l6603
 14058  003FEA  6C2B               	negf	___awtoft@c,c
 14059  003FEC  1E2C               	comf	___awtoft@c+1,f,c
 14060  003FEE  B0D8               	btfsc	status,0,c
 14061  003FF0  2A2C               	incf	___awtoft@c+1,f,c
 14062  003FF2  0E01               	movlw	1
 14063  003FF4  6E2E               	movwf	___awtoft@sign,c
 14064  003FF6                     l6603:
 14065  003FF6  C02B  F023         	movff	___awtoft@c,___ftpack@arg
 14066  003FFA  C02C  F024         	movff	___awtoft@c+1,___ftpack@arg+1
 14067  003FFE  6A25               	clrf	___ftpack@arg+2,c
 14068  004000  0E8E               	movlw	142
 14069  004002  6E26               	movwf	___ftpack@exp,c
 14070  004004  C02E  F027         	movff	___awtoft@sign,___ftpack@sign
 14071  004008  EC43  F01A         	call	___ftpack	;wreg free
 14072  00400C  C023  F02B         	movff	?___ftpack,?___awtoft
 14073  004010  C024  F02C         	movff	?___ftpack+1,?___awtoft+1
 14074  004014  C025  F02D         	movff	?___ftpack+2,?___awtoft+2
 14075  004018  0012               	return	
 14076  00401A                     __end_of___awtoft:
 14077                           	opt stack 0
 14078                           tblptru	equ	0xFF8
 14079                           tblptrh	equ	0xFF7
 14080                           tblptrl	equ	0xFF6
 14081                           tablat	equ	0xFF5
 14082                           prodh	equ	0xFF4
 14083                           prodl	equ	0xFF3
 14084                           intcon	equ	0xFF2
 14085                           intcon3	equ	0xFF0
 14086                           postinc0	equ	0xFEE
 14087                           wreg	equ	0xFE8
 14088                           postdec1	equ	0xFE5
 14089                           fsr1l	equ	0xFE1
 14090                           indf2	equ	0xFDF
 14091                           postinc2	equ	0xFDE
 14092                           postdec2	equ	0xFDD
 14093                           fsr2h	equ	0xFDA
 14094                           fsr2l	equ	0xFD9
 14095                           status	equ	0xFD8
 14096                           
 14097 ;; *************** function ___altoft *****************
 14098 ;; Defined at:
 14099 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 14100 ;; Parameters:    Size  Location     Type
 14101 ;;  c               4   42[COMRAM] long 
 14102 ;; Auto vars:     Size  Location     Type
 14103 ;;  sign            1   51[COMRAM] unsigned char 
 14104 ;;  exp             1   50[COMRAM] unsigned char 
 14105 ;; Return value:  Size  Location     Type
 14106 ;;                  3   42[COMRAM] float 
 14107 ;; Registers used:
 14108 ;;		wreg, status,2, status,0, cstack
 14109 ;; Tracked objects:
 14110 ;;		On entry : 0/0
 14111 ;;		On exit  : 0/0
 14112 ;;		Unchanged: 0/0
 14113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14114 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14115 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14116 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14117 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14118 ;;Total ram usage:       10 bytes
 14119 ;; Hardware stack levels used:    1
 14120 ;; Hardware stack levels required when called:    4
 14121 ;; This function calls:
 14122 ;;		___ftpack
 14123 ;; This function is called by:
 14124 ;;		_sortBattery
 14125 ;;		_angleToPulse
 14126 ;; This function uses a non-reentrant model
 14127 ;;
 14128                           
 14129                           	psect	text58
 14130  0039B6                     __ptext58:
 14131                           	opt stack 0
 14132  0039B6                     ___altoft:
 14133                           	opt stack 23
 14134                           
 14135                           ;incstack = 0
 14136  0039B6  0E00               	movlw	0
 14137  0039B8  6E34               	movwf	___altoft@sign,c
 14138  0039BA  0E8E               	movlw	142
 14139  0039BC  6E33               	movwf	___altoft@exp,c
 14140  0039BE  AE2E               	btfss	___altoft@c+3,7,c
 14141  0039C0  D011               	goto	l6535
 14142  0039C2  1E2E               	comf	___altoft@c+3,f,c
 14143  0039C4  1E2D               	comf	___altoft@c+2,f,c
 14144  0039C6  1E2C               	comf	___altoft@c+1,f,c
 14145  0039C8  6C2B               	negf	___altoft@c,c
 14146  0039CA  0E00               	movlw	0
 14147  0039CC  222C               	addwfc	___altoft@c+1,f,c
 14148  0039CE  222D               	addwfc	___altoft@c+2,f,c
 14149  0039D0  222E               	addwfc	___altoft@c+3,f,c
 14150  0039D2  0E01               	movlw	1
 14151  0039D4  6E34               	movwf	___altoft@sign,c
 14152  0039D6  D006               	goto	l6535
 14153  0039D8                     l6533:
 14154  0039D8  90D8               	bcf	status,0,c
 14155  0039DA  322E               	rrcf	___altoft@c+3,f,c
 14156  0039DC  322D               	rrcf	___altoft@c+2,f,c
 14157  0039DE  322C               	rrcf	___altoft@c+1,f,c
 14158  0039E0  322B               	rrcf	___altoft@c,f,c
 14159  0039E2  2A33               	incf	___altoft@exp,f,c
 14160  0039E4                     l6535:
 14161  0039E4  0E00               	movlw	0
 14162  0039E6  142B               	andwf	___altoft@c,w,c
 14163  0039E8  6E2F               	movwf	??___altoft& (0+255),c
 14164  0039EA  0E00               	movlw	0
 14165  0039EC  142C               	andwf	___altoft@c+1,w,c
 14166  0039EE  6E30               	movwf	(??___altoft+1)& (0+255),c
 14167  0039F0  0E00               	movlw	0
 14168  0039F2  142D               	andwf	___altoft@c+2,w,c
 14169  0039F4  6E31               	movwf	(??___altoft+2)& (0+255),c
 14170  0039F6  0EFF               	movlw	255
 14171  0039F8  142E               	andwf	___altoft@c+3,w,c
 14172  0039FA  6E32               	movwf	(??___altoft+3)& (0+255),c
 14173  0039FC  502F               	movf	??___altoft,w,c
 14174  0039FE  1030               	iorwf	??___altoft+1,w,c
 14175  003A00  1031               	iorwf	??___altoft+2,w,c
 14176  003A02  1032               	iorwf	??___altoft+3,w,c
 14177  003A04  A4D8               	btfss	status,2,c
 14178  003A06  D7E8               	goto	l6533
 14179  003A08  C02B  F023         	movff	___altoft@c,___ftpack@arg
 14180  003A0C  C02C  F024         	movff	___altoft@c+1,___ftpack@arg+1
 14181  003A10  C02D  F025         	movff	___altoft@c+2,___ftpack@arg+2
 14182  003A14  C033  F026         	movff	___altoft@exp,___ftpack@exp
 14183  003A18  C034  F027         	movff	___altoft@sign,___ftpack@sign
 14184  003A1C  EC43  F01A         	call	___ftpack	;wreg free
 14185  003A20  C023  F02B         	movff	?___ftpack,?___altoft
 14186  003A24  C024  F02C         	movff	?___ftpack+1,?___altoft+1
 14187  003A28  C025  F02D         	movff	?___ftpack+2,?___altoft+2
 14188  003A2C  0012               	return	
 14189  003A2E                     __end_of___altoft:
 14190                           	opt stack 0
 14191                           tblptru	equ	0xFF8
 14192                           tblptrh	equ	0xFF7
 14193                           tblptrl	equ	0xFF6
 14194                           tablat	equ	0xFF5
 14195                           prodh	equ	0xFF4
 14196                           prodl	equ	0xFF3
 14197                           intcon	equ	0xFF2
 14198                           intcon3	equ	0xFF0
 14199                           postinc0	equ	0xFEE
 14200                           wreg	equ	0xFE8
 14201                           postdec1	equ	0xFE5
 14202                           fsr1l	equ	0xFE1
 14203                           indf2	equ	0xFDF
 14204                           postinc2	equ	0xFDE
 14205                           postdec2	equ	0xFDD
 14206                           fsr2h	equ	0xFDA
 14207                           fsr2l	equ	0xFD9
 14208                           status	equ	0xFD8
 14209                           
 14210 ;; *************** function ___ftpack *****************
 14211 ;; Defined at:
 14212 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 14213 ;; Parameters:    Size  Location     Type
 14214 ;;  arg             3   34[COMRAM] unsigned um
 14215 ;;  exp             1   37[COMRAM] unsigned char 
 14216 ;;  sign            1   38[COMRAM] unsigned char 
 14217 ;; Auto vars:     Size  Location     Type
 14218 ;;		None
 14219 ;; Return value:  Size  Location     Type
 14220 ;;                  3   34[COMRAM] float 
 14221 ;; Registers used:
 14222 ;;		wreg, status,2, status,0
 14223 ;; Tracked objects:
 14224 ;;		On entry : 0/0
 14225 ;;		On exit  : 0/0
 14226 ;;		Unchanged: 0/0
 14227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14228 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14230 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14231 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14232 ;;Total ram usage:        8 bytes
 14233 ;; Hardware stack levels used:    1
 14234 ;; Hardware stack levels required when called:    3
 14235 ;; This function calls:
 14236 ;;		Nothing
 14237 ;; This function is called by:
 14238 ;;		___altoft
 14239 ;;		___awtoft
 14240 ;;		___ftadd
 14241 ;;		___ftdiv
 14242 ;;		___ftmul
 14243 ;;		___lltoft
 14244 ;; This function uses a non-reentrant model
 14245 ;;
 14246                           
 14247                           	psect	text59
 14248  003486                     __ptext59:
 14249                           	opt stack 0
 14250  003486                     ___ftpack:
 14251                           	opt stack 23
 14252                           
 14253                           ;incstack = 0
 14254  003486  5026               	movf	___ftpack@exp,w,c
 14255  003488  B4D8               	btfsc	status,2,c
 14256  00348A  D005               	goto	l6031
 14257  00348C  5023               	movf	___ftpack@arg,w,c
 14258  00348E  1024               	iorwf	___ftpack@arg+1,w,c
 14259  003490  1025               	iorwf	___ftpack@arg+2,w,c
 14260  003492  A4D8               	btfss	status,2,c
 14261  003494  D00C               	goto	l6037
 14262  003496                     l6031:
 14263  003496  0E00               	movlw	0
 14264  003498  6E23               	movwf	?___ftpack,c
 14265  00349A  0E00               	movlw	0
 14266  00349C  6E24               	movwf	?___ftpack+1,c
 14267  00349E  0E00               	movlw	0
 14268  0034A0  6E25               	movwf	?___ftpack+2,c
 14269  0034A2  0012               	return	
 14270  0034A4                     l6035:
 14271  0034A4  2A26               	incf	___ftpack@exp,f,c
 14272  0034A6  90D8               	bcf	status,0,c
 14273  0034A8  3225               	rrcf	___ftpack@arg+2,f,c
 14274  0034AA  3224               	rrcf	___ftpack@arg+1,f,c
 14275  0034AC  3223               	rrcf	___ftpack@arg,f,c
 14276  0034AE                     l6037:
 14277  0034AE  0E00               	movlw	0
 14278  0034B0  1423               	andwf	___ftpack@arg,w,c
 14279  0034B2  6E28               	movwf	??___ftpack& (0+255),c
 14280  0034B4  0E00               	movlw	0
 14281  0034B6  1424               	andwf	___ftpack@arg+1,w,c
 14282  0034B8  6E29               	movwf	(??___ftpack+1)& (0+255),c
 14283  0034BA  0EFE               	movlw	254
 14284  0034BC  1425               	andwf	___ftpack@arg+2,w,c
 14285  0034BE  6E2A               	movwf	(??___ftpack+2)& (0+255),c
 14286  0034C0  5028               	movf	??___ftpack,w,c
 14287  0034C2  1029               	iorwf	??___ftpack+1,w,c
 14288  0034C4  102A               	iorwf	??___ftpack+2,w,c
 14289  0034C6  B4D8               	btfsc	status,2,c
 14290  0034C8  D00C               	goto	l6043
 14291  0034CA  D7EC               	goto	l6035
 14292  0034CC                     l6039:
 14293  0034CC  2A26               	incf	___ftpack@exp,f,c
 14294  0034CE  0E01               	movlw	1
 14295  0034D0  2623               	addwf	___ftpack@arg,f,c
 14296  0034D2  0E00               	movlw	0
 14297  0034D4  2224               	addwfc	___ftpack@arg+1,f,c
 14298  0034D6  0E00               	movlw	0
 14299  0034D8  2225               	addwfc	___ftpack@arg+2,f,c
 14300  0034DA  90D8               	bcf	status,0,c
 14301  0034DC  3225               	rrcf	___ftpack@arg+2,f,c
 14302  0034DE  3224               	rrcf	___ftpack@arg+1,f,c
 14303  0034E0  3223               	rrcf	___ftpack@arg,f,c
 14304  0034E2                     l6043:
 14305  0034E2  0E00               	movlw	0
 14306  0034E4  1423               	andwf	___ftpack@arg,w,c
 14307  0034E6  6E28               	movwf	??___ftpack& (0+255),c
 14308  0034E8  0E00               	movlw	0
 14309  0034EA  1424               	andwf	___ftpack@arg+1,w,c
 14310  0034EC  6E29               	movwf	(??___ftpack+1)& (0+255),c
 14311  0034EE  0EFF               	movlw	255
 14312  0034F0  1425               	andwf	___ftpack@arg+2,w,c
 14313  0034F2  6E2A               	movwf	(??___ftpack+2)& (0+255),c
 14314  0034F4  5028               	movf	??___ftpack,w,c
 14315  0034F6  1029               	iorwf	??___ftpack+1,w,c
 14316  0034F8  102A               	iorwf	??___ftpack+2,w,c
 14317  0034FA  B4D8               	btfsc	status,2,c
 14318  0034FC  D006               	goto	l6047
 14319  0034FE  D7E6               	goto	l6039
 14320  003500                     l6045:
 14321  003500  0626               	decf	___ftpack@exp,f,c
 14322  003502  90D8               	bcf	status,0,c
 14323  003504  3623               	rlcf	___ftpack@arg,f,c
 14324  003506  3624               	rlcf	___ftpack@arg+1,f,c
 14325  003508  3625               	rlcf	___ftpack@arg+2,f,c
 14326  00350A                     l6047:
 14327  00350A  BE24               	btfsc	___ftpack@arg+1,7,c
 14328  00350C  D003               	goto	l1126
 14329  00350E  0E02               	movlw	2
 14330  003510  6026               	cpfslt	___ftpack@exp,c
 14331  003512  D7F6               	goto	l6045
 14332  003514                     l1126:
 14333  003514  A026               	btfss	___ftpack@exp,0,c
 14334  003516  9E24               	bcf	___ftpack@arg+1,7,c
 14335  003518  90D8               	bcf	status,0,c
 14336  00351A  3226               	rrcf	___ftpack@exp,f,c
 14337  00351C  5026               	movf	___ftpack@exp,w,c
 14338  00351E  1225               	iorwf	___ftpack@arg+2,f,c
 14339  003520  5027               	movf	___ftpack@sign,w,c
 14340  003522  A4D8               	btfss	status,2,c
 14341  003524  8E25               	bsf	___ftpack@arg+2,7,c
 14342  003526  C023  F023         	movff	___ftpack@arg,?___ftpack
 14343  00352A  C024  F024         	movff	___ftpack@arg+1,?___ftpack+1
 14344  00352E  C025  F025         	movff	___ftpack@arg+2,?___ftpack+2
 14345  003532  0012               	return	
 14346  003534                     __end_of___ftpack:
 14347                           	opt stack 0
 14348                           tblptru	equ	0xFF8
 14349                           tblptrh	equ	0xFF7
 14350                           tblptrl	equ	0xFF6
 14351                           tablat	equ	0xFF5
 14352                           prodh	equ	0xFF4
 14353                           prodl	equ	0xFF3
 14354                           intcon	equ	0xFF2
 14355                           intcon3	equ	0xFF0
 14356                           postinc0	equ	0xFEE
 14357                           wreg	equ	0xFE8
 14358                           postdec1	equ	0xFE5
 14359                           fsr1l	equ	0xFE1
 14360                           indf2	equ	0xFDF
 14361                           postinc2	equ	0xFDE
 14362                           postdec2	equ	0xFDD
 14363                           fsr2h	equ	0xFDA
 14364                           fsr2l	equ	0xFD9
 14365                           status	equ	0xFD8
 14366                           
 14367 ;; *************** function _initTimer *****************
 14368 ;; Defined at:
 14369 ;;		line 53 in file "timer.c"
 14370 ;; Parameters:    Size  Location     Type
 14371 ;;  timer           2   34[COMRAM] int 
 14372 ;; Auto vars:     Size  Location     Type
 14373 ;;		None
 14374 ;; Return value:  Size  Location     Type
 14375 ;;                  1    wreg      void 
 14376 ;; Registers used:
 14377 ;;		wreg, status,2, status,0
 14378 ;; Tracked objects:
 14379 ;;		On entry : 0/0
 14380 ;;		On exit  : 0/0
 14381 ;;		Unchanged: 0/0
 14382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14383 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14385 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14386 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14387 ;;Total ram usage:        4 bytes
 14388 ;; Hardware stack levels used:    1
 14389 ;; Hardware stack levels required when called:    3
 14390 ;; This function calls:
 14391 ;;		Nothing
 14392 ;; This function is called by:
 14393 ;;		_main
 14394 ;;		_initServo
 14395 ;;		_testFrequency
 14396 ;; This function uses a non-reentrant model
 14397 ;;
 14398                           
 14399                           	psect	text60
 14400  003EDA                     __ptext60:
 14401                           	opt stack 0
 14402  003EDA                     _initTimer:
 14403                           	opt stack 27
 14404                           
 14405                           ;timer.c: 54: switch(timer){
 14406                           
 14407                           ;incstack = 0
 14408  003EDA  D00F               	goto	l5055
 14409  003EDC                     l5037:
 14410                           
 14411                           ;timer.c: 56: T0CON = 0;
 14412  003EDC  0E00               	movlw	0
 14413  003EDE  6ED5               	movwf	4053,c	;volatile
 14414                           
 14415                           ;timer.c: 57: T0CON |= 1<<3;
 14416  003EE0  86D5               	bsf	4053,3,c	;volatile
 14417                           
 14418                           ;timer.c: 59: TMR0IE = 1;
 14419  003EE2  8AF2               	bsf	intcon,5,c	;volatile
 14420                           
 14421                           ;timer.c: 60: break;
 14422  003EE4  D01C               	goto	l455
 14423  003EE6                     l5043:
 14424                           
 14425                           ;timer.c: 62: T1CON = 0;
 14426  003EE6  0E00               	movlw	0
 14427  003EE8  6ECD               	movwf	4045,c	;volatile
 14428                           
 14429                           ;timer.c: 64: T1CON |= 0b11<<4;
 14430  003EEA  0E30               	movlw	48
 14431  003EEC  12CD               	iorwf	4045,f,c	;volatile
 14432                           
 14433                           ;timer.c: 65: TMR1IE = 1;
 14434  003EEE  809D               	bsf	3997,0,c	;volatile
 14435                           
 14436                           ;timer.c: 66: break;
 14437  003EF0  D016               	goto	l455
 14438  003EF2                     l5049:
 14439                           
 14440                           ;timer.c: 68: T3CON = 0;
 14441  003EF2  0E00               	movlw	0
 14442  003EF4  6EB1               	movwf	4017,c	;volatile
 14443                           
 14444                           ;timer.c: 69: TMR3IE = 1;
 14445  003EF6  82A0               	bsf	4000,1,c	;volatile
 14446                           
 14447                           ;timer.c: 71: }
 14448                           
 14449                           ;timer.c: 70: break;
 14450  003EF8  D012               	goto	l455
 14451  003EFA                     l5055:
 14452  003EFA  C023  F025         	movff	initTimer@timer,??_initTimer
 14453  003EFE  C024  F026         	movff	initTimer@timer+1,??_initTimer+1
 14454                           
 14455                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14456                           ; Switch size 1, requested type "space"
 14457                           ; Number of cases is 1, Range of values is 0 to 0
 14458                           ; switch strategies available:
 14459                           ; Name         Instructions Cycles
 14460                           ; simple_byte            4     3 (average)
 14461                           ;	Chosen strategy is simple_byte
 14462  003F02  5026               	movf	??_initTimer+1,w,c
 14463  003F04  0A00               	xorlw	0	; case 0
 14464  003F06  A4D8               	btfss	status,2,c
 14465  003F08  D00A               	goto	l455
 14466                           
 14467                           ; Switch size 1, requested type "space"
 14468                           ; Number of cases is 3, Range of values is 0 to 3
 14469                           ; switch strategies available:
 14470                           ; Name         Instructions Cycles
 14471                           ; simple_byte           10     6 (average)
 14472                           ;	Chosen strategy is simple_byte
 14473  003F0A  5025               	movf	??_initTimer,w,c
 14474  003F0C  0A00               	xorlw	0	; case 0
 14475  003F0E  B4D8               	btfsc	status,2,c
 14476  003F10  D7E5               	goto	l5037
 14477  003F12  0A01               	xorlw	1	; case 1
 14478  003F14  B4D8               	btfsc	status,2,c
 14479  003F16  D7E7               	goto	l5043
 14480  003F18  0A02               	xorlw	2	; case 3
 14481  003F1A  B4D8               	btfsc	status,2,c
 14482  003F1C  D7EA               	goto	l5049
 14483  003F1E                     l455:
 14484                           
 14485                           ;timer.c: 72: PEIE = 1;
 14486  003F1E  8CF2               	bsf	intcon,6,c	;volatile
 14487                           
 14488                           ;timer.c: 73: (INTCONbits.GIE = 1);
 14489  003F20  8EF2               	bsf	intcon,7,c	;volatile
 14490  003F22  0012               	return		;funcret
 14491  003F24                     __end_of_initTimer:
 14492                           	opt stack 0
 14493                           tblptru	equ	0xFF8
 14494                           tblptrh	equ	0xFF7
 14495                           tblptrl	equ	0xFF6
 14496                           tablat	equ	0xFF5
 14497                           prodh	equ	0xFF4
 14498                           prodl	equ	0xFF3
 14499                           intcon	equ	0xFF2
 14500                           intcon3	equ	0xFF0
 14501                           postinc0	equ	0xFEE
 14502                           wreg	equ	0xFE8
 14503                           postdec1	equ	0xFE5
 14504                           fsr1l	equ	0xFE1
 14505                           indf2	equ	0xFDF
 14506                           postinc2	equ	0xFDE
 14507                           postdec2	equ	0xFDD
 14508                           fsr2h	equ	0xFDA
 14509                           fsr2l	equ	0xFD9
 14510                           status	equ	0xFD8
 14511                           
 14512 ;; *************** function _initLCD *****************
 14513 ;; Defined at:
 14514 ;;		line 15 in file "lcd.c"
 14515 ;; Parameters:    Size  Location     Type
 14516 ;;		None
 14517 ;; Auto vars:     Size  Location     Type
 14518 ;;		None
 14519 ;; Return value:  Size  Location     Type
 14520 ;;                  1    wreg      void 
 14521 ;; Registers used:
 14522 ;;		wreg, status,2, status,0, cstack
 14523 ;; Tracked objects:
 14524 ;;		On entry : 0/0
 14525 ;;		On exit  : 0/0
 14526 ;;		Unchanged: 0/0
 14527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14530 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14531 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14532 ;;Total ram usage:        1 bytes
 14533 ;; Hardware stack levels used:    1
 14534 ;; Hardware stack levels required when called:    5
 14535 ;; This function calls:
 14536 ;;		_lcdInst
 14537 ;; This function is called by:
 14538 ;;		_main
 14539 ;;		_debug
 14540 ;; This function uses a non-reentrant model
 14541 ;;
 14542                           
 14543                           	psect	text61
 14544  003F24                     __ptext61:
 14545                           	opt stack 0
 14546  003F24                     _initLCD:
 14547                           	opt stack 25
 14548                           
 14549                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 14550                           
 14551                           ;incstack = 0
 14552  003F24  0E31               	movlw	49
 14553  003F26  6E27               	movwf	??_initLCD& (0+255),c
 14554  003F28  0EB2               	movlw	178
 14555  003F2A                     u8227:
 14556  003F2A  2EE8               	decfsz	wreg,f,c
 14557  003F2C  D7FE               	bra	u8227
 14558  003F2E  2E27               	decfsz	??_initLCD& (0+255),f,c
 14559  003F30  D7FC               	bra	u8227
 14560  003F32  D000               	nop2	
 14561                           
 14562                           ;lcd.c: 18: lcdInst(0b00110011);
 14563  003F34  0E33               	movlw	51
 14564  003F36  EC94  F020         	call	_lcdInst
 14565                           
 14566                           ;lcd.c: 19: lcdInst(0b00110010);
 14567  003F3A  0E32               	movlw	50
 14568  003F3C  EC94  F020         	call	_lcdInst
 14569                           
 14570                           ;lcd.c: 20: lcdInst(0b00101000);
 14571  003F40  0E28               	movlw	40
 14572  003F42  EC94  F020         	call	_lcdInst
 14573                           
 14574                           ;lcd.c: 21: lcdInst(0b00001111);
 14575  003F46  0E0F               	movlw	15
 14576  003F48  EC94  F020         	call	_lcdInst
 14577                           
 14578                           ;lcd.c: 22: lcdInst(0b00000110);
 14579  003F4C  0E06               	movlw	6
 14580  003F4E  EC94  F020         	call	_lcdInst
 14581                           
 14582                           ;lcd.c: 23: lcdInst(0b00000001);
 14583  003F52  0E01               	movlw	1
 14584  003F54  EC94  F020         	call	_lcdInst
 14585                           
 14586                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 14587  003F58  0E31               	movlw	49
 14588  003F5A  6E27               	movwf	??_initLCD& (0+255),c
 14589  003F5C  0EB2               	movlw	178
 14590  003F5E                     u8237:
 14591  003F5E  2EE8               	decfsz	wreg,f,c
 14592  003F60  D7FE               	bra	u8237
 14593  003F62  2E27               	decfsz	??_initLCD& (0+255),f,c
 14594  003F64  D7FC               	bra	u8237
 14595  003F66  D000               	nop2	
 14596  003F68  0012               	return		;funcret
 14597  003F6A                     __end_of_initLCD:
 14598                           	opt stack 0
 14599                           tblptru	equ	0xFF8
 14600                           tblptrh	equ	0xFF7
 14601                           tblptrl	equ	0xFF6
 14602                           tablat	equ	0xFF5
 14603                           prodh	equ	0xFF4
 14604                           prodl	equ	0xFF3
 14605                           intcon	equ	0xFF2
 14606                           intcon3	equ	0xFF0
 14607                           postinc0	equ	0xFEE
 14608                           wreg	equ	0xFE8
 14609                           postdec1	equ	0xFE5
 14610                           fsr1l	equ	0xFE1
 14611                           indf2	equ	0xFDF
 14612                           postinc2	equ	0xFDE
 14613                           postdec2	equ	0xFDD
 14614                           fsr2h	equ	0xFDA
 14615                           fsr2l	equ	0xFD9
 14616                           status	equ	0xFD8
 14617                           
 14618 ;; *************** function _lcdInst *****************
 14619 ;; Defined at:
 14620 ;;		line 27 in file "lcd.c"
 14621 ;; Parameters:    Size  Location     Type
 14622 ;;  data            1    wreg     unsigned char 
 14623 ;; Auto vars:     Size  Location     Type
 14624 ;;  data            1   37[COMRAM] unsigned char 
 14625 ;; Return value:  Size  Location     Type
 14626 ;;                  1    wreg      void 
 14627 ;; Registers used:
 14628 ;;		wreg, status,2, status,0, cstack
 14629 ;; Tracked objects:
 14630 ;;		On entry : 0/0
 14631 ;;		On exit  : 0/0
 14632 ;;		Unchanged: 0/0
 14633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14635 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14636 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14637 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14638 ;;Total ram usage:        2 bytes
 14639 ;; Hardware stack levels used:    1
 14640 ;; Hardware stack levels required when called:    4
 14641 ;; This function calls:
 14642 ;;		_lcdNibble
 14643 ;; This function is called by:
 14644 ;;		_initLCD
 14645 ;;		_lcdHome
 14646 ;;		_lcdClear
 14647 ;;		_lcdNewline
 14648 ;; This function uses a non-reentrant model
 14649 ;;
 14650                           
 14651                           	psect	text62
 14652  004128                     __ptext62:
 14653                           	opt stack 0
 14654  004128                     _lcdInst:
 14655                           	opt stack 22
 14656                           
 14657                           ;incstack = 0
 14658                           ;lcdInst@data stored from wreg
 14659  004128  6E26               	movwf	lcdInst@data,c
 14660                           
 14661                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 14662  00412A  948C               	bcf	3980,2,c	;volatile
 14663                           
 14664                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 14665  00412C  0E74               	movlw	116
 14666  00412E                     u8247:
 14667  00412E  2EE8               	decfsz	wreg,f,c
 14668  004130  D7FE               	bra	u8247
 14669  004132  D000               	nop2	
 14670                           
 14671                           ;lcd.c: 30: lcdNibble(data);
 14672  004134  5026               	movf	lcdInst@data,w,c
 14673  004136  ECBA  F01D         	call	_lcdNibble
 14674                           
 14675                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 14676  00413A  0E04               	movlw	4
 14677  00413C  6E25               	movwf	??_lcdInst& (0+255),c
 14678  00413E  0E3E               	movlw	62
 14679  004140                     u8257:
 14680  004140  2EE8               	decfsz	wreg,f,c
 14681  004142  D7FE               	bra	u8257
 14682  004144  2E25               	decfsz	??_lcdInst& (0+255),f,c
 14683  004146  D7FC               	bra	u8257
 14684  004148  0012               	return		;funcret
 14685  00414A                     __end_of_lcdInst:
 14686                           	opt stack 0
 14687                           tblptru	equ	0xFF8
 14688                           tblptrh	equ	0xFF7
 14689                           tblptrl	equ	0xFF6
 14690                           tablat	equ	0xFF5
 14691                           prodh	equ	0xFF4
 14692                           prodl	equ	0xFF3
 14693                           intcon	equ	0xFF2
 14694                           intcon3	equ	0xFF0
 14695                           postinc0	equ	0xFEE
 14696                           wreg	equ	0xFE8
 14697                           postdec1	equ	0xFE5
 14698                           fsr1l	equ	0xFE1
 14699                           indf2	equ	0xFDF
 14700                           postinc2	equ	0xFDE
 14701                           postdec2	equ	0xFDD
 14702                           fsr2h	equ	0xFDA
 14703                           fsr2l	equ	0xFD9
 14704                           status	equ	0xFD8
 14705                           
 14706 ;; *************** function _lcdNibble *****************
 14707 ;; Defined at:
 14708 ;;		line 46 in file "lcd.c"
 14709 ;; Parameters:    Size  Location     Type
 14710 ;;  data            1    wreg     unsigned char 
 14711 ;; Auto vars:     Size  Location     Type
 14712 ;;  data            1   35[COMRAM] unsigned char 
 14713 ;;  temp            1   34[COMRAM] unsigned char 
 14714 ;; Return value:  Size  Location     Type
 14715 ;;                  1    wreg      void 
 14716 ;; Registers used:
 14717 ;;		wreg, status,2, status,0
 14718 ;; Tracked objects:
 14719 ;;		On entry : 0/0
 14720 ;;		On exit  : 0/0
 14721 ;;		Unchanged: 0/0
 14722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14724 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14726 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14727 ;;Total ram usage:        2 bytes
 14728 ;; Hardware stack levels used:    1
 14729 ;; Hardware stack levels required when called:    3
 14730 ;; This function calls:
 14731 ;;		Nothing
 14732 ;; This function is called by:
 14733 ;;		_lcdInst
 14734 ;;		_putch
 14735 ;; This function uses a non-reentrant model
 14736 ;;
 14737                           
 14738                           	psect	text63
 14739  003B74                     __ptext63:
 14740                           	opt stack 0
 14741  003B74                     _lcdNibble:
 14742                           	opt stack 24
 14743                           
 14744                           ;incstack = 0
 14745                           ;lcdNibble@data stored from wreg
 14746  003B74  6E24               	movwf	lcdNibble@data,c
 14747                           
 14748                           ;lcd.c: 48: char temp = data & 0xF0;
 14749  003B76  5024               	movf	lcdNibble@data,w,c
 14750  003B78  0BF0               	andlw	240
 14751  003B7A  6E23               	movwf	lcdNibble@temp,c
 14752                           
 14753                           ;lcd.c: 49: LATD = LATD & 0x0F;
 14754  003B7C  508C               	movf	3980,w,c	;volatile
 14755  003B7E  0B0F               	andlw	15
 14756  003B80  6E8C               	movwf	3980,c	;volatile
 14757                           
 14758                           ;lcd.c: 50: LATD = temp | LATD;
 14759  003B82  5023               	movf	lcdNibble@temp,w,c
 14760  003B84  108C               	iorwf	3980,w,c	;volatile
 14761  003B86  6E8C               	movwf	3980,c	;volatile
 14762                           
 14763                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 14764  003B88  968C               	bcf	3980,3,c	;volatile
 14765                           
 14766                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 14767  003B8A  0ED6               	movlw	214
 14768  003B8C                     u8267:
 14769  003B8C  D000               	nop2	
 14770  003B8E  D000               	nop2	
 14771  003B90  2EE8               	decfsz	wreg,f,c
 14772  003B92  D7FC               	bra	u8267
 14773  003B94  D000               	nop2	
 14774                           
 14775                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 14776  003B96  868C               	bsf	3980,3,c	;volatile
 14777                           
 14778                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 14779  003B98  0ED6               	movlw	214
 14780  003B9A                     u8277:
 14781  003B9A  D000               	nop2	
 14782  003B9C  D000               	nop2	
 14783  003B9E  2EE8               	decfsz	wreg,f,c
 14784  003BA0  D7FC               	bra	u8277
 14785  003BA2  D000               	nop2	
 14786                           
 14787                           ;lcd.c: 58: data = data << 4;
 14788  003BA4  3824               	swapf	lcdNibble@data,w,c
 14789  003BA6  0BF0               	andlw	240
 14790  003BA8  6E24               	movwf	lcdNibble@data,c
 14791                           
 14792                           ;lcd.c: 60: temp = data & 0xF0;
 14793  003BAA  5024               	movf	lcdNibble@data,w,c
 14794  003BAC  0BF0               	andlw	240
 14795  003BAE  6E23               	movwf	lcdNibble@temp,c
 14796                           
 14797                           ;lcd.c: 61: LATD = LATD & 0x0F;
 14798  003BB0  508C               	movf	3980,w,c	;volatile
 14799  003BB2  0B0F               	andlw	15
 14800  003BB4  6E8C               	movwf	3980,c	;volatile
 14801                           
 14802                           ;lcd.c: 62: LATD = temp | LATD;
 14803  003BB6  5023               	movf	lcdNibble@temp,w,c
 14804  003BB8  108C               	iorwf	3980,w,c	;volatile
 14805  003BBA  6E8C               	movwf	3980,c	;volatile
 14806                           
 14807                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 14808  003BBC  968C               	bcf	3980,3,c	;volatile
 14809                           
 14810                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 14811  003BBE  0ED6               	movlw	214
 14812  003BC0                     u8287:
 14813  003BC0  D000               	nop2	
 14814  003BC2  D000               	nop2	
 14815  003BC4  2EE8               	decfsz	wreg,f,c
 14816  003BC6  D7FC               	bra	u8287
 14817  003BC8  D000               	nop2	
 14818                           
 14819                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 14820  003BCA  868C               	bsf	3980,3,c	;volatile
 14821                           
 14822                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 14823  003BCC  0ED6               	movlw	214
 14824  003BCE                     u8297:
 14825  003BCE  D000               	nop2	
 14826  003BD0  D000               	nop2	
 14827  003BD2  2EE8               	decfsz	wreg,f,c
 14828  003BD4  D7FC               	bra	u8297
 14829  003BD6  D000               	nop2	
 14830  003BD8  0012               	return		;funcret
 14831  003BDA                     __end_of_lcdNibble:
 14832                           	opt stack 0
 14833                           tblptru	equ	0xFF8
 14834                           tblptrh	equ	0xFF7
 14835                           tblptrl	equ	0xFF6
 14836                           tablat	equ	0xFF5
 14837                           prodh	equ	0xFF4
 14838                           prodl	equ	0xFF3
 14839                           intcon	equ	0xFF2
 14840                           intcon3	equ	0xFF0
 14841                           postinc0	equ	0xFEE
 14842                           wreg	equ	0xFE8
 14843                           postdec1	equ	0xFE5
 14844                           fsr1l	equ	0xFE1
 14845                           indf2	equ	0xFDF
 14846                           postinc2	equ	0xFDE
 14847                           postdec2	equ	0xFDD
 14848                           fsr2h	equ	0xFDA
 14849                           fsr2l	equ	0xFD9
 14850                           status	equ	0xFD8
 14851                           
 14852 ;; *************** function _service *****************
 14853 ;; Defined at:
 14854 ;;		line 351 in file "main.c"
 14855 ;; Parameters:    Size  Location     Type
 14856 ;;		None
 14857 ;; Auto vars:     Size  Location     Type
 14858 ;;  key             1   33[COMRAM] unsigned char 
 14859 ;; Return value:  Size  Location     Type
 14860 ;;                  1    wreg      void 
 14861 ;; Registers used:
 14862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14863 ;; Tracked objects:
 14864 ;;		On entry : 0/0
 14865 ;;		On exit  : 0/0
 14866 ;;		Unchanged: 0/0
 14867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14869 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14870 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14871 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14872 ;;Total ram usage:       15 bytes
 14873 ;; Hardware stack levels used:    1
 14874 ;; Hardware stack levels required when called:    2
 14875 ;; This function calls:
 14876 ;;		_keyPressedInterruptService
 14877 ;;		_servoInterruptService
 14878 ;;		i2_startTimer
 14879 ;; This function is called by:
 14880 ;;		Interrupt level 2
 14881 ;; This function uses a non-reentrant model
 14882 ;;
 14883                           
 14884                           	psect	intcode
 14885  000008                     __pintcode:
 14886                           	opt stack 0
 14887  000008                     _service:
 14888                           	opt stack 21
 14889                           
 14890                           ;incstack = 0
 14891  000008  825D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14892  00000A  EDED  F016         	call	int_func,f	;refresh shadow registers
 14893                           tblptru	equ	0xFF8
 14894                           tblptrh	equ	0xFF7
 14895                           tblptrl	equ	0xFF6
 14896                           tablat	equ	0xFF5
 14897                           prodh	equ	0xFF4
 14898                           prodl	equ	0xFF3
 14899                           intcon	equ	0xFF2
 14900                           intcon3	equ	0xFF0
 14901                           postinc0	equ	0xFEE
 14902                           wreg	equ	0xFE8
 14903                           postdec1	equ	0xFE5
 14904                           fsr1l	equ	0xFE1
 14905                           indf2	equ	0xFDF
 14906                           postinc2	equ	0xFDE
 14907                           postdec2	equ	0xFDD
 14908                           fsr2h	equ	0xFDA
 14909                           fsr2l	equ	0xFD9
 14910                           status	equ	0xFD8
 14911                           
 14912                           	psect	intcode_body
 14913  002DDA                     __pintcode_body:
 14914                           	opt stack 21
 14915  002DDA                     int_func:
 14916                           	opt stack 21
 14917  002DDA  0006               	pop		; remove dummy address from shadow register refresh
 14918  002DDC  CFFA F014          	movff	pclath,??_service
 14919  002DE0  CFFB F015          	movff	pclatu,??_service+1
 14920  002DE4  CFE9 F016          	movff	fsr0l,??_service+2
 14921  002DE8  CFEA F017          	movff	fsr0h,??_service+3
 14922  002DEC  CFE1 F018          	movff	fsr1l,??_service+4
 14923  002DF0  CFE2 F019          	movff	fsr1h,??_service+5
 14924  002DF4  CFD9 F01A          	movff	fsr2l,??_service+6
 14925  002DF8  CFDA F01B          	movff	fsr2h,??_service+7
 14926  002DFC  CFF3 F01C          	movff	prodl,??_service+8
 14927  002E00  CFF4 F01D          	movff	prodh,??_service+9
 14928  002E04  CFF6 F01E          	movff	tblptrl,??_service+10
 14929  002E08  CFF7 F01F          	movff	tblptrh,??_service+11
 14930  002E0C  CFF8 F020          	movff	tblptru,??_service+12
 14931  002E10  CFF5 F021          	movff	tablat,??_service+13
 14932                           
 14933                           ;main.c: 353: if( servoInterruptService() )return;
 14934  002E14  ECF2  F015         	call	_servoInterruptService	;wreg free
 14935  002E18  0900               	iorlw	0
 14936  002E1A  A4D8               	btfss	status,2,c
 14937  002E1C  D035               	goto	i2l205
 14938                           
 14939                           ;main.c: 358: if(TMR1IF){
 14940  002E1E  A09E               	btfss	3998,0,c	;volatile
 14941  002E20  D017               	goto	i2l206
 14942                           
 14943                           ;main.c: 359: startTimer(1,0x8683);
 14944  002E22  0E00               	movlw	0
 14945  002E24  6E08               	movwf	i2startTimer@timer+1,c
 14946  002E26  0E01               	movlw	1
 14947  002E28  6E07               	movwf	i2startTimer@timer,c
 14948  002E2A  0E83               	movlw	131
 14949  002E2C  6E09               	movwf	i2startTimer@val,c
 14950  002E2E  0E86               	movlw	134
 14951  002E30  6E0A               	movwf	i2startTimer@val+1,c
 14952  002E32  0E00               	movlw	0
 14953  002E34  6E0B               	movwf	i2startTimer@val+2,c
 14954  002E36  0E00               	movlw	0
 14955  002E38  6E0C               	movwf	i2startTimer@val+3,c
 14956  002E3A  EC47  F01F         	call	i2_startTimer	;wreg free
 14957                           
 14958                           ;main.c: 360: time+=1;
 14959  002E3E  0E01               	movlw	1
 14960  002E40  0101               	movlb	1	; () banked
 14961  002E42  277A               	addwf	_time& (0+255),f,b
 14962  002E44  0E00               	movlw	0
 14963  002E46  237B               	addwfc	(_time+1)& (0+255),f,b
 14964  002E48  237C               	addwfc	(_time+2)& (0+255),f,b
 14965  002E4A  237D               	addwfc	(_time+3)& (0+255),f,b
 14966                           
 14967                           ; BSR set to: 1
 14968                           ;main.c: 361: TMR1IF = 0;
 14969  002E4C  909E               	bcf	3998,0,c	;volatile
 14970                           
 14971                           ; BSR set to: 1
 14972                           ;main.c: 362: return;
 14973  002E4E  D01C               	goto	i2l205
 14974  002E50                     i2l206:
 14975                           
 14976                           ;main.c: 363: }
 14977                           ;main.c: 366: if(INT0IF){ INT0IF = 0;
 14978  002E50  A2F2               	btfss	intcon,1,c	;volatile
 14979  002E52  D007               	goto	i2l207
 14980  002E54  92F2               	bcf	intcon,1,c	;volatile
 14981                           
 14982                           ;main.c: 367: batteryDetected = 1;
 14983  002E56  0E00               	movlw	0
 14984  002E58  0101               	movlb	1	; () banked
 14985  002E5A  6F7F               	movwf	(_batteryDetected+1)& (0+255),b
 14986  002E5C  0E01               	movlw	1
 14987  002E5E  6F7E               	movwf	_batteryDetected& (0+255),b
 14988                           
 14989                           ; BSR set to: 1
 14990                           ;main.c: 368: return;
 14991  002E60  D013               	goto	i2l205
 14992  002E62                     i2l207:
 14993                           
 14994                           ;main.c: 369: }
 14995                           ;main.c: 372: if(INT1IF && INT1IE){INT1IF = 0;
 14996  002E62  B0F0               	btfsc	intcon3,0,c	;volatile
 14997  002E64  A6F0               	btfss	intcon3,3,c	;volatile
 14998  002E66  D010               	goto	i2l205
 14999  002E68  90F0               	bcf	intcon3,0,c	;volatile
 15000                           
 15001                           ;main.c: 373: keyPressedInterruptService();
 15002  002E6A  ECA5  F020         	call	_keyPressedInterruptService	;wreg free
 15003                           
 15004                           ;main.c: 374: char key = (PORTB & 0xF0) >> 4;
 15005  002E6E  3881               	swapf	3969,w,c	;volatile
 15006  002E70  0B0F               	andlw	15
 15007  002E72  0B0F               	andlw	15
 15008  002E74  6E22               	movwf	service@key,c
 15009                           
 15010                           ;main.c: 375: if(key == 12)terminate = 1;
 15011  002E76  0E0C               	movlw	12
 15012  002E78  1822               	xorwf	service@key,w,c
 15013  002E7A  A4D8               	btfss	status,2,c
 15014  002E7C  D005               	goto	i2l205
 15015  002E7E  0E00               	movlw	0
 15016  002E80  0101               	movlb	1	; () banked
 15017  002E82  6F89               	movwf	(_terminate+1)& (0+255),b
 15018  002E84  0E01               	movlw	1
 15019  002E86  6F88               	movwf	_terminate& (0+255),b
 15020  002E88                     i2l205:
 15021  002E88  C021  FFF5         	movff	??_service+13,tablat
 15022  002E8C  C020  FFF8         	movff	??_service+12,tblptru
 15023  002E90  C01F  FFF7         	movff	??_service+11,tblptrh
 15024  002E94  C01E  FFF6         	movff	??_service+10,tblptrl
 15025  002E98  C01D  FFF4         	movff	??_service+9,prodh
 15026  002E9C  C01C  FFF3         	movff	??_service+8,prodl
 15027  002EA0  C01B  FFDA         	movff	??_service+7,fsr2h
 15028  002EA4  C01A  FFD9         	movff	??_service+6,fsr2l
 15029  002EA8  C019  FFE2         	movff	??_service+5,fsr1h
 15030  002EAC  C018  FFE1         	movff	??_service+4,fsr1l
 15031  002EB0  C017  FFEA         	movff	??_service+3,fsr0h
 15032  002EB4  C016  FFE9         	movff	??_service+2,fsr0l
 15033  002EB8  C015  FFFB         	movff	??_service+1,pclatu
 15034  002EBC  C014  FFFA         	movff	??_service,pclath
 15035  002EC0  925D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15036  002EC2  0011               	retfie		f
 15037  002EC4                     __end_of_service:
 15038                           	opt stack 0
 15039                           pclatu	equ	0xFFB
 15040                           pclath	equ	0xFFA
 15041                           tblptru	equ	0xFF8
 15042                           tblptrh	equ	0xFF7
 15043                           tblptrl	equ	0xFF6
 15044                           tablat	equ	0xFF5
 15045                           prodh	equ	0xFF4
 15046                           prodl	equ	0xFF3
 15047                           intcon	equ	0xFF2
 15048                           intcon3	equ	0xFF0
 15049                           postinc0	equ	0xFEE
 15050                           fsr0h	equ	0xFEA
 15051                           fsr0l	equ	0xFE9
 15052                           wreg	equ	0xFE8
 15053                           postdec1	equ	0xFE5
 15054                           fsr1h	equ	0xFE2
 15055                           fsr1l	equ	0xFE1
 15056                           indf2	equ	0xFDF
 15057                           postinc2	equ	0xFDE
 15058                           postdec2	equ	0xFDD
 15059                           fsr2h	equ	0xFDA
 15060                           fsr2l	equ	0xFD9
 15061                           status	equ	0xFD8
 15062                           
 15063 ;; *************** function _servoInterruptService *****************
 15064 ;; Defined at:
 15065 ;;		line 55 in file "servo.c"
 15066 ;; Parameters:    Size  Location     Type
 15067 ;;		None
 15068 ;; Auto vars:     Size  Location     Type
 15069 ;;		None
 15070 ;; Return value:  Size  Location     Type
 15071 ;;                  1    wreg      unsigned char 
 15072 ;; Registers used:
 15073 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15074 ;; Tracked objects:
 15075 ;;		On entry : 0/0
 15076 ;;		On exit  : 0/0
 15077 ;;		Unchanged: 0/0
 15078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15081 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15082 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15083 ;;Total ram usage:        4 bytes
 15084 ;; Hardware stack levels used:    1
 15085 ;; Hardware stack levels required when called:    1
 15086 ;; This function calls:
 15087 ;;		i2___awmod
 15088 ;;		i2_digitalWrite
 15089 ;;		i2_startTimer
 15090 ;; This function is called by:
 15091 ;;		_service
 15092 ;; This function uses a non-reentrant model
 15093 ;;
 15094                           
 15095                           	psect	text65
 15096  002BE4                     __ptext65:
 15097                           	opt stack 0
 15098  002BE4                     _servoInterruptService:
 15099                           	opt stack 21
 15100                           
 15101                           ;servo.c: 57: if(TMR0IF){TMR0IF = 0;
 15102                           
 15103                           ;incstack = 0
 15104  002BE4  A4F2               	btfss	intcon,2,c	;volatile
 15105  002BE6  D082               	goto	i2l5643
 15106  002BE8  94F2               	bcf	intcon,2,c	;volatile
 15107                           
 15108                           ;servo.c: 58: digitalWrite(servos[curr],0);
 15109  002BEA  90D8               	bcf	status,0,c
 15110  002BEC  3458               	rlcf	_curr,w,c
 15111  002BEE  6ED9               	movwf	fsr2l,c
 15112  002BF0  3459               	rlcf	_curr+1,w,c
 15113  002BF2  6EDA               	movwf	fsr2h,c
 15114  002BF4  0E72               	movlw	low _servos
 15115  002BF6  26D9               	addwf	fsr2l,f,c
 15116  002BF8  0E01               	movlw	high _servos
 15117  002BFA  22DA               	addwfc	fsr2h,f,c
 15118  002BFC  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 15119  002C00  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 15120  002C04  0E00               	movlw	0
 15121  002C06  6E0A               	movwf	i2digitalWrite@val+1,c
 15122  002C08  0E00               	movlw	0
 15123  002C0A  6E09               	movwf	i2digitalWrite@val,c
 15124  002C0C  ECDF  F019         	call	i2_digitalWrite	;wreg free
 15125                           
 15126                           ;servo.c: 59: digitalWrite(servos[ (curr+1)%(n+1) ],1);
 15127  002C10  0E01               	movlw	1
 15128  002C12  2458               	addwf	_curr,w,c
 15129  002C14  6E01               	movwf	i2___awmod@dividend,c
 15130  002C16  0E00               	movlw	0
 15131  002C18  2059               	addwfc	_curr+1,w,c
 15132  002C1A  6E02               	movwf	i2___awmod@dividend+1,c
 15133  002C1C  0E01               	movlw	1
 15134  002C1E  0100               	movlb	0	; () banked
 15135  002C20  25FB               	addwf	_n& (0+255),w,b
 15136  002C22  6E03               	movwf	i2___awmod@divisor,c
 15137  002C24  0E00               	movlw	0
 15138  002C26  0100               	movlb	0	; () banked
 15139  002C28  21FC               	addwfc	(_n+1)& (0+255),w,b
 15140  002C2A  6E04               	movwf	i2___awmod@divisor+1,c
 15141  002C2C  EC4F  F01D         	call	i2___awmod	;wreg free
 15142  002C30  90D8               	bcf	status,0,c
 15143  002C32  3601               	rlcf	?i2___awmod,f,c
 15144  002C34  3602               	rlcf	?i2___awmod+1,f,c
 15145  002C36  0E72               	movlw	low _servos
 15146  002C38  2401               	addwf	?i2___awmod,w,c
 15147  002C3A  6ED9               	movwf	fsr2l,c
 15148  002C3C  0E01               	movlw	high _servos
 15149  002C3E  2002               	addwfc	?i2___awmod+1,w,c
 15150  002C40  6EDA               	movwf	fsr2h,c
 15151  002C42  CFDE F007          	movff	postinc2,i2digitalWrite@pin
 15152  002C46  CFDD F008          	movff	postdec2,i2digitalWrite@pin+1
 15153  002C4A  0E00               	movlw	0
 15154  002C4C  6E0A               	movwf	i2digitalWrite@val+1,c
 15155  002C4E  0E01               	movlw	1
 15156  002C50  6E09               	movwf	i2digitalWrite@val,c
 15157  002C52  ECDF  F019         	call	i2_digitalWrite	;wreg free
 15158                           
 15159                           ;servo.c: 60: startTimer(0, 0xFFFF - pulse[ (curr+1)%(n+1) ]);
 15160  002C56  0E00               	movlw	0
 15161  002C58  6E08               	movwf	i2startTimer@timer+1,c
 15162  002C5A  0E00               	movlw	0
 15163  002C5C  6E07               	movwf	i2startTimer@timer,c
 15164  002C5E  0EFF               	movlw	255
 15165  002C60  6E10               	movwf	??_servoInterruptService& (0+255),c
 15166  002C62  0EFF               	movlw	255
 15167  002C64  6E11               	movwf	(??_servoInterruptService+1)& (0+255),c
 15168  002C66  0E01               	movlw	1
 15169  002C68  2458               	addwf	_curr,w,c
 15170  002C6A  6E01               	movwf	i2___awmod@dividend,c
 15171  002C6C  0E00               	movlw	0
 15172  002C6E  2059               	addwfc	_curr+1,w,c
 15173  002C70  6E02               	movwf	i2___awmod@dividend+1,c
 15174  002C72  0E01               	movlw	1
 15175  002C74  0100               	movlb	0	; () banked
 15176  002C76  25FB               	addwf	_n& (0+255),w,b
 15177  002C78  6E03               	movwf	i2___awmod@divisor,c
 15178  002C7A  0E00               	movlw	0
 15179  002C7C  0100               	movlb	0	; () banked
 15180  002C7E  21FC               	addwfc	(_n+1)& (0+255),w,b
 15181  002C80  6E04               	movwf	i2___awmod@divisor+1,c
 15182  002C82  EC4F  F01D         	call	i2___awmod	;wreg free
 15183  002C86  90D8               	bcf	status,0,c
 15184  002C88  3601               	rlcf	?i2___awmod,f,c
 15185  002C8A  3602               	rlcf	?i2___awmod+1,f,c
 15186  002C8C  0E6A               	movlw	low _pulse
 15187  002C8E  2401               	addwf	?i2___awmod,w,c
 15188  002C90  6ED9               	movwf	fsr2l,c
 15189  002C92  0E01               	movlw	high _pulse
 15190  002C94  2002               	addwfc	?i2___awmod+1,w,c
 15191  002C96  6EDA               	movwf	fsr2h,c
 15192  002C98  CFDE F012          	movff	postinc2,??_servoInterruptService+2
 15193  002C9C  CFDD F013          	movff	postdec2,??_servoInterruptService+3
 15194  002CA0  1E12               	comf	??_servoInterruptService+2,f,c
 15195  002CA2  1E13               	comf	??_servoInterruptService+3,f,c
 15196  002CA4  4A12               	infsnz	??_servoInterruptService+2,f,c
 15197  002CA6  2A13               	incf	??_servoInterruptService+3,f,c
 15198  002CA8  5010               	movf	??_servoInterruptService,w,c
 15199  002CAA  2612               	addwf	??_servoInterruptService+2,f,c
 15200  002CAC  5011               	movf	??_servoInterruptService+1,w,c
 15201  002CAE  2213               	addwfc	??_servoInterruptService+3,f,c
 15202  002CB0  C012  F009         	movff	??_servoInterruptService+2,i2startTimer@val
 15203  002CB4  C013  F00A         	movff	??_servoInterruptService+3,i2startTimer@val+1
 15204  002CB8  6A0B               	clrf	i2startTimer@val+2,c
 15205  002CBA  6A0C               	clrf	i2startTimer@val+3,c
 15206  002CBC  EC47  F01F         	call	i2_startTimer	;wreg free
 15207                           
 15208                           ;servo.c: 62: curr = (curr+1)%(n+1);
 15209  002CC0  0E01               	movlw	1
 15210  002CC2  2458               	addwf	_curr,w,c
 15211  002CC4  6E01               	movwf	i2___awmod@dividend,c
 15212  002CC6  0E00               	movlw	0
 15213  002CC8  2059               	addwfc	_curr+1,w,c
 15214  002CCA  6E02               	movwf	i2___awmod@dividend+1,c
 15215  002CCC  0E01               	movlw	1
 15216  002CCE  0100               	movlb	0	; () banked
 15217  002CD0  25FB               	addwf	_n& (0+255),w,b
 15218  002CD2  6E03               	movwf	i2___awmod@divisor,c
 15219  002CD4  0E00               	movlw	0
 15220  002CD6  0100               	movlb	0	; () banked
 15221  002CD8  21FC               	addwfc	(_n+1)& (0+255),w,b
 15222  002CDA  6E04               	movwf	i2___awmod@divisor+1,c
 15223  002CDC  EC4F  F01D         	call	i2___awmod	;wreg free
 15224  002CE0  C001  F058         	movff	?i2___awmod,_curr
 15225  002CE4  C002  F059         	movff	?i2___awmod+1,_curr+1
 15226                           
 15227                           ;servo.c: 63: return 1;
 15228  002CE8  0E01               	movlw	1
 15229  002CEA  0012               	return	
 15230  002CEC                     i2l5643:
 15231                           
 15232                           ;servo.c: 64: }
 15233                           ;servo.c: 65: return 0;
 15234  002CEC  0E00               	movlw	0
 15235  002CEE  0012               	return	
 15236  002CF0                     __end_of_servoInterruptService:
 15237                           	opt stack 0
 15238                           pclatu	equ	0xFFB
 15239                           pclath	equ	0xFFA
 15240                           tblptru	equ	0xFF8
 15241                           tblptrh	equ	0xFF7
 15242                           tblptrl	equ	0xFF6
 15243                           tablat	equ	0xFF5
 15244                           prodh	equ	0xFF4
 15245                           prodl	equ	0xFF3
 15246                           intcon	equ	0xFF2
 15247                           intcon3	equ	0xFF0
 15248                           postinc0	equ	0xFEE
 15249                           fsr0h	equ	0xFEA
 15250                           fsr0l	equ	0xFE9
 15251                           wreg	equ	0xFE8
 15252                           postdec1	equ	0xFE5
 15253                           fsr1h	equ	0xFE2
 15254                           fsr1l	equ	0xFE1
 15255                           indf2	equ	0xFDF
 15256                           postinc2	equ	0xFDE
 15257                           postdec2	equ	0xFDD
 15258                           fsr2h	equ	0xFDA
 15259                           fsr2l	equ	0xFD9
 15260                           status	equ	0xFD8
 15261                           
 15262 ;; *************** function i2_startTimer *****************
 15263 ;; Defined at:
 15264 ;;		line 77 in file "timer.c"
 15265 ;; Parameters:    Size  Location     Type
 15266 ;;  timer           2    6[COMRAM] int 
 15267 ;;  val             4    8[COMRAM] long 
 15268 ;; Auto vars:     Size  Location     Type
 15269 ;;		None
 15270 ;; Return value:  Size  Location     Type
 15271 ;;                  1    wreg      void 
 15272 ;; Registers used:
 15273 ;;		wreg, status,2, status,0
 15274 ;; Tracked objects:
 15275 ;;		On entry : 0/0
 15276 ;;		On exit  : 0/0
 15277 ;;		Unchanged: 0/0
 15278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15279 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15281 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15282 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15283 ;;Total ram usage:        8 bytes
 15284 ;; Hardware stack levels used:    1
 15285 ;; This function calls:
 15286 ;;		Nothing
 15287 ;; This function is called by:
 15288 ;;		_service
 15289 ;;		_servoInterruptService
 15290 ;; This function uses a non-reentrant model
 15291 ;;
 15292                           
 15293                           	psect	text66
 15294  003E8E                     __ptext66:
 15295                           	opt stack 0
 15296  003E8E                     i2_startTimer:
 15297                           	opt stack 22
 15298                           
 15299                           ;timer.c: 78: switch(timer){
 15300                           
 15301                           ;incstack = 0
 15302  003E8E  D012               	goto	i2l5365
 15303  003E90                     i2l462:
 15304                           
 15305                           ;timer.c: 80: TMR0H = val>>8;
 15306  003E90  C00A  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 15307                           
 15308                           ;timer.c: 81: TMR0L = val;
 15309  003E94  C009  FFD6         	movff	i2startTimer@val,4054	;volatile
 15310                           
 15311                           ;timer.c: 82: T0CON |= 1<<7;
 15312  003E98  8ED5               	bsf	4053,7,c	;volatile
 15313                           
 15314                           ;timer.c: 83: break;
 15315  003E9A  0012               	return	
 15316  003E9C                     i2l464:
 15317                           
 15318                           ;timer.c: 85: TMR1H = val>>8;
 15319  003E9C  C00A  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 15320                           
 15321                           ;timer.c: 86: TMR1L = val;
 15322  003EA0  C009  FFCE         	movff	i2startTimer@val,4046	;volatile
 15323                           
 15324                           ;timer.c: 87: T1CON |= 1<<0;
 15325  003EA4  80CD               	bsf	4045,0,c	;volatile
 15326                           
 15327                           ;timer.c: 88: break;
 15328  003EA6  0012               	return	
 15329  003EA8                     i2l465:
 15330                           
 15331                           ;timer.c: 90: TMR3H = val>>8;
 15332  003EA8  C00A  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 15333                           
 15334                           ;timer.c: 91: TMR3L = val;
 15335  003EAC  C009  FFB2         	movff	i2startTimer@val,4018	;volatile
 15336                           
 15337                           ;timer.c: 92: T3CON |= 1<<0;
 15338  003EB0  80B1               	bsf	4017,0,c	;volatile
 15339                           
 15340                           ;timer.c: 93: }
 15341  003EB2  0012               	return	
 15342  003EB4                     i2l5365:
 15343  003EB4  C007  F00D         	movff	i2startTimer@timer,??i2_startTimer
 15344  003EB8  C008  F00E         	movff	i2startTimer@timer+1,??i2_startTimer+1
 15345                           
 15346                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15347                           ; Switch size 1, requested type "space"
 15348                           ; Number of cases is 1, Range of values is 0 to 0
 15349                           ; switch strategies available:
 15350                           ; Name         Instructions Cycles
 15351                           ; simple_byte            4     3 (average)
 15352                           ;	Chosen strategy is simple_byte
 15353  003EBC  500E               	movf	??i2_startTimer+1,w,c
 15354  003EBE  0A00               	xorlw	0	; case 0
 15355  003EC0  A4D8               	btfss	status,2,c
 15356  003EC2  0012               	return	
 15357                           
 15358                           ; Switch size 1, requested type "space"
 15359                           ; Number of cases is 3, Range of values is 0 to 3
 15360                           ; switch strategies available:
 15361                           ; Name         Instructions Cycles
 15362                           ; simple_byte           10     6 (average)
 15363                           ;	Chosen strategy is simple_byte
 15364  003EC4  500D               	movf	??i2_startTimer,w,c
 15365  003EC6  0A00               	xorlw	0	; case 0
 15366  003EC8  B4D8               	btfsc	status,2,c
 15367  003ECA  D7E2               	goto	i2l462
 15368  003ECC  0A01               	xorlw	1	; case 1
 15369  003ECE  B4D8               	btfsc	status,2,c
 15370  003ED0  D7E5               	goto	i2l464
 15371  003ED2  0A02               	xorlw	2	; case 3
 15372  003ED4  A4D8               	btfss	status,2,c
 15373  003ED6  0012               	return	
 15374  003ED8  D7E7               	goto	i2l465
 15375  003EDA                     __end_ofi2_startTimer:
 15376                           	opt stack 0
 15377                           pclatu	equ	0xFFB
 15378                           pclath	equ	0xFFA
 15379                           tblptru	equ	0xFF8
 15380                           tblptrh	equ	0xFF7
 15381                           tblptrl	equ	0xFF6
 15382                           tablat	equ	0xFF5
 15383                           prodh	equ	0xFF4
 15384                           prodl	equ	0xFF3
 15385                           intcon	equ	0xFF2
 15386                           intcon3	equ	0xFF0
 15387                           postinc0	equ	0xFEE
 15388                           fsr0h	equ	0xFEA
 15389                           fsr0l	equ	0xFE9
 15390                           wreg	equ	0xFE8
 15391                           postdec1	equ	0xFE5
 15392                           fsr1h	equ	0xFE2
 15393                           fsr1l	equ	0xFE1
 15394                           indf2	equ	0xFDF
 15395                           postinc2	equ	0xFDE
 15396                           postdec2	equ	0xFDD
 15397                           fsr2h	equ	0xFDA
 15398                           fsr2l	equ	0xFD9
 15399                           status	equ	0xFD8
 15400                           
 15401 ;; *************** function i2_digitalWrite *****************
 15402 ;; Defined at:
 15403 ;;		line 53 in file "iopin.c"
 15404 ;; Parameters:    Size  Location     Type
 15405 ;;  pin             2    6[COMRAM] PTR int 
 15406 ;;		 -> AA_float(4), cylinderMotor2(4), redirectingServo(4), padServo(4), 
 15407 ;;		 -> conveyorServo(4), cylinderMotor1(4), 
 15408 ;;  val             2    8[COMRAM] int 
 15409 ;; Auto vars:     Size  Location     Type
 15410 ;;  digitalWrite    2   13[COMRAM] int 
 15411 ;; Return value:  Size  Location     Type
 15412 ;;                  1    wreg      void 
 15413 ;; Registers used:
 15414 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15415 ;; Tracked objects:
 15416 ;;		On entry : 0/0
 15417 ;;		On exit  : 0/0
 15418 ;;		Unchanged: 0/0
 15419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15420 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15421 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15422 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15423 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15424 ;;Total ram usage:        9 bytes
 15425 ;; Hardware stack levels used:    1
 15426 ;; This function calls:
 15427 ;;		Nothing
 15428 ;; This function is called by:
 15429 ;;		_servoInterruptService
 15430 ;; This function uses a non-reentrant model
 15431 ;;
 15432                           
 15433                           	psect	text67
 15434  0033BE                     __ptext67:
 15435                           	opt stack 0
 15436  0033BE                     i2_digitalWrite:
 15437                           	opt stack 21
 15438                           
 15439                           ;iopin.c: 54: if(pin){
 15440                           
 15441                           ;incstack = 0
 15442  0033BE  5007               	movf	i2digitalWrite@pin,w,c
 15443  0033C0  1008               	iorwf	i2digitalWrite@pin+1,w,c
 15444  0033C2  B4D8               	btfsc	status,2,c
 15445  0033C4  0012               	return	
 15446                           
 15447                           ;iopin.c: 55: int p = 1 << pin[1];
 15448  0033C6  EE20 F002          	lfsr	2,2
 15449  0033CA  5007               	movf	i2digitalWrite@pin,w,c
 15450  0033CC  26D9               	addwf	fsr2l,f,c
 15451  0033CE  5008               	movf	i2digitalWrite@pin+1,w,c
 15452  0033D0  22DA               	addwfc	fsr2h,f,c
 15453  0033D2  50DF               	movf	indf2,w,c
 15454  0033D4  6E0B               	movwf	??i2_digitalWrite& (0+255),c
 15455  0033D6  0E01               	movlw	1
 15456  0033D8  6E0C               	movwf	(??i2_digitalWrite+1)& (0+255),c
 15457  0033DA  0E00               	movlw	0
 15458  0033DC  6E0D               	movwf	(??i2_digitalWrite+2)& (0+255),c
 15459  0033DE  2A0B               	incf	??i2_digitalWrite,f,c
 15460  0033E0  D003               	goto	i2u509_44
 15461  0033E2                     i2u509_45:
 15462  0033E2  90D8               	bcf	status,0,c
 15463  0033E4  360C               	rlcf	??i2_digitalWrite+1,f,c
 15464  0033E6  360D               	rlcf	??i2_digitalWrite+2,f,c
 15465  0033E8                     i2u509_44:
 15466  0033E8  2E0B               	decfsz	??i2_digitalWrite,f,c
 15467  0033EA  D7FB               	goto	i2u509_45
 15468  0033EC  C00C  F00E         	movff	??i2_digitalWrite+1,i2digitalWrite@p
 15469  0033F0  C00D  F00F         	movff	??i2_digitalWrite+2,i2digitalWrite@p+1
 15470                           
 15471                           ;iopin.c: 56: if(val == 0){
 15472  0033F4  5009               	movf	i2digitalWrite@val,w,c
 15473  0033F6  100A               	iorwf	i2digitalWrite@val+1,w,c
 15474  0033F8  A4D8               	btfss	status,2,c
 15475  0033FA  D02B               	goto	i2l5351
 15476                           
 15477                           ;iopin.c: 57: p ^= 0xff;
 15478  0033FC  0EFF               	movlw	255
 15479  0033FE  1A0E               	xorwf	i2digitalWrite@p,f,c
 15480                           
 15481                           ;iopin.c: 58: }
 15482                           ;iopin.c: 60: switch(pin[0]){
 15483  003400  D028               	goto	i2l5351
 15484  003402                     i2l5327:
 15485  003402  0409               	decf	i2digitalWrite@val,w,c
 15486  003404  100A               	iorwf	i2digitalWrite@val+1,w,c
 15487  003406  A4D8               	btfss	status,2,c
 15488  003408  D003               	goto	i2l5331
 15489  00340A  500E               	movf	i2digitalWrite@p,w,c
 15490  00340C  1289               	iorwf	3977,f,c	;volatile
 15491  00340E  0012               	return	
 15492  003410                     i2l5331:
 15493                           
 15494                           ;iopin.c: 62: else LATA &= p;
 15495  003410  500E               	movf	i2digitalWrite@p,w,c
 15496  003412  1689               	andwf	3977,f,c	;volatile
 15497                           
 15498                           ;iopin.c: 63: break;
 15499  003414  0012               	return	
 15500  003416                     i2l5333:
 15501  003416  0409               	decf	i2digitalWrite@val,w,c
 15502  003418  100A               	iorwf	i2digitalWrite@val+1,w,c
 15503  00341A  A4D8               	btfss	status,2,c
 15504  00341C  D003               	goto	i2l5337
 15505  00341E  500E               	movf	i2digitalWrite@p,w,c
 15506  003420  128A               	iorwf	3978,f,c	;volatile
 15507  003422  0012               	return	
 15508  003424                     i2l5337:
 15509                           
 15510                           ;iopin.c: 65: else LATB &= p;
 15511  003424  500E               	movf	i2digitalWrite@p,w,c
 15512  003426  168A               	andwf	3978,f,c	;volatile
 15513                           
 15514                           ;iopin.c: 66: break;
 15515  003428  0012               	return	
 15516  00342A                     i2l5339:
 15517  00342A  0409               	decf	i2digitalWrite@val,w,c
 15518  00342C  100A               	iorwf	i2digitalWrite@val+1,w,c
 15519  00342E  A4D8               	btfss	status,2,c
 15520  003430  D003               	goto	i2l5343
 15521  003432  500E               	movf	i2digitalWrite@p,w,c
 15522  003434  128B               	iorwf	3979,f,c	;volatile
 15523  003436  0012               	return	
 15524  003438                     i2l5343:
 15525                           
 15526                           ;iopin.c: 68: else LATC &= p;
 15527  003438  500E               	movf	i2digitalWrite@p,w,c
 15528  00343A  168B               	andwf	3979,f,c	;volatile
 15529                           
 15530                           ;iopin.c: 69: break;
 15531  00343C  0012               	return	
 15532  00343E                     i2l5345:
 15533  00343E  0409               	decf	i2digitalWrite@val,w,c
 15534  003440  100A               	iorwf	i2digitalWrite@val+1,w,c
 15535  003442  A4D8               	btfss	status,2,c
 15536  003444  D003               	goto	i2l5349
 15537  003446  500E               	movf	i2digitalWrite@p,w,c
 15538  003448  128C               	iorwf	3980,f,c	;volatile
 15539  00344A  0012               	return	
 15540  00344C                     i2l5349:
 15541                           
 15542                           ;iopin.c: 71: else LATD &= p;
 15543  00344C  500E               	movf	i2digitalWrite@p,w,c
 15544  00344E  168C               	andwf	3980,f,c	;volatile
 15545                           
 15546                           ;iopin.c: 72: }
 15547  003450  0012               	return	
 15548  003452                     i2l5351:
 15549  003452  C007  FFD9         	movff	i2digitalWrite@pin,fsr2l
 15550  003456  C008  FFDA         	movff	i2digitalWrite@pin+1,fsr2h
 15551  00345A  CFDE F00B          	movff	postinc2,??i2_digitalWrite
 15552  00345E  CFDD F00C          	movff	postdec2,??i2_digitalWrite+1
 15553                           
 15554                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15555                           ; Switch size 1, requested type "space"
 15556                           ; Number of cases is 1, Range of values is 0 to 0
 15557                           ; switch strategies available:
 15558                           ; Name         Instructions Cycles
 15559                           ; simple_byte            4     3 (average)
 15560                           ;	Chosen strategy is simple_byte
 15561  003462  500C               	movf	??i2_digitalWrite+1,w,c
 15562  003464  0A00               	xorlw	0	; case 0
 15563  003466  A4D8               	btfss	status,2,c
 15564  003468  0012               	return	
 15565                           
 15566                           ; Switch size 1, requested type "space"
 15567                           ; Number of cases is 4, Range of values is 0 to 3
 15568                           ; switch strategies available:
 15569                           ; Name         Instructions Cycles
 15570                           ; simple_byte           13     7 (average)
 15571                           ;	Chosen strategy is simple_byte
 15572  00346A  500B               	movf	??i2_digitalWrite,w,c
 15573  00346C  0A00               	xorlw	0	; case 0
 15574  00346E  B4D8               	btfsc	status,2,c
 15575  003470  D7C8               	goto	i2l5327
 15576  003472  0A01               	xorlw	1	; case 1
 15577  003474  B4D8               	btfsc	status,2,c
 15578  003476  D7CF               	goto	i2l5333
 15579  003478  0A03               	xorlw	3	; case 2
 15580  00347A  B4D8               	btfsc	status,2,c
 15581  00347C  D7D6               	goto	i2l5339
 15582  00347E  0A01               	xorlw	1	; case 3
 15583  003480  A4D8               	btfss	status,2,c
 15584  003482  0012               	return	
 15585  003484  D7DC               	goto	i2l5345
 15586  003486                     __end_ofi2_digitalWrite:
 15587                           	opt stack 0
 15588                           pclatu	equ	0xFFB
 15589                           pclath	equ	0xFFA
 15590                           tblptru	equ	0xFF8
 15591                           tblptrh	equ	0xFF7
 15592                           tblptrl	equ	0xFF6
 15593                           tablat	equ	0xFF5
 15594                           prodh	equ	0xFF4
 15595                           prodl	equ	0xFF3
 15596                           intcon	equ	0xFF2
 15597                           intcon3	equ	0xFF0
 15598                           postinc0	equ	0xFEE
 15599                           fsr0h	equ	0xFEA
 15600                           fsr0l	equ	0xFE9
 15601                           wreg	equ	0xFE8
 15602                           postdec1	equ	0xFE5
 15603                           fsr1h	equ	0xFE2
 15604                           fsr1l	equ	0xFE1
 15605                           indf2	equ	0xFDF
 15606                           postinc2	equ	0xFDE
 15607                           postdec2	equ	0xFDD
 15608                           fsr2h	equ	0xFDA
 15609                           fsr2l	equ	0xFD9
 15610                           status	equ	0xFD8
 15611                           
 15612 ;; *************** function i2___awmod *****************
 15613 ;; Defined at:
 15614 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 15615 ;; Parameters:    Size  Location     Type
 15616 ;;  dividend        2    0[COMRAM] int 
 15617 ;;  divisor         2    2[COMRAM] int 
 15618 ;; Auto vars:     Size  Location     Type
 15619 ;;  __awmod         1    5[COMRAM] unsigned char 
 15620 ;;  __awmod         1    4[COMRAM] unsigned char 
 15621 ;; Return value:  Size  Location     Type
 15622 ;;                  2    0[COMRAM] int 
 15623 ;; Registers used:
 15624 ;;		wreg, status,2, status,0
 15625 ;; Tracked objects:
 15626 ;;		On entry : 0/0
 15627 ;;		On exit  : 0/0
 15628 ;;		Unchanged: 0/0
 15629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15630 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15631 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15633 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15634 ;;Total ram usage:        6 bytes
 15635 ;; Hardware stack levels used:    1
 15636 ;; This function calls:
 15637 ;;		Nothing
 15638 ;; This function is called by:
 15639 ;;		_servoInterruptService
 15640 ;; This function uses a non-reentrant model
 15641 ;;
 15642                           
 15643                           	psect	text68
 15644  003A9E                     __ptext68:
 15645                           	opt stack 0
 15646  003A9E                     i2___awmod:
 15647                           	opt stack 21
 15648                           
 15649                           ;incstack = 0
 15650  003A9E  0E00               	movlw	0
 15651  003AA0  6E06               	movwf	i2___awmod@sign,c
 15652  003AA2  AE02               	btfss	i2___awmod@dividend+1,7,c
 15653  003AA4  D006               	goto	i2l5379
 15654  003AA6  6C01               	negf	i2___awmod@dividend,c
 15655  003AA8  1E02               	comf	i2___awmod@dividend+1,f,c
 15656  003AAA  B0D8               	btfsc	status,0,c
 15657  003AAC  2A02               	incf	i2___awmod@dividend+1,f,c
 15658  003AAE  0E01               	movlw	1
 15659  003AB0  6E06               	movwf	i2___awmod@sign,c
 15660  003AB2                     i2l5379:
 15661  003AB2  AE04               	btfss	i2___awmod@divisor+1,7,c
 15662  003AB4  D004               	goto	i2l5383
 15663  003AB6  6C03               	negf	i2___awmod@divisor,c
 15664  003AB8  1E04               	comf	i2___awmod@divisor+1,f,c
 15665  003ABA  B0D8               	btfsc	status,0,c
 15666  003ABC  2A04               	incf	i2___awmod@divisor+1,f,c
 15667  003ABE                     i2l5383:
 15668  003ABE  5003               	movf	i2___awmod@divisor,w,c
 15669  003AC0  1004               	iorwf	i2___awmod@divisor+1,w,c
 15670  003AC2  B4D8               	btfsc	status,2,c
 15671  003AC4  D018               	goto	i2l5399
 15672  003AC6  0E01               	movlw	1
 15673  003AC8  6E05               	movwf	i2___awmod@counter,c
 15674  003ACA  D004               	goto	i2l5389
 15675  003ACC                     i2l5387:
 15676  003ACC  90D8               	bcf	status,0,c
 15677  003ACE  3603               	rlcf	i2___awmod@divisor,f,c
 15678  003AD0  3604               	rlcf	i2___awmod@divisor+1,f,c
 15679  003AD2  2A05               	incf	i2___awmod@counter,f,c
 15680  003AD4                     i2l5389:
 15681  003AD4  AE04               	btfss	i2___awmod@divisor+1,7,c
 15682  003AD6  D7FA               	goto	i2l5387
 15683  003AD8                     i2l5391:
 15684  003AD8  5003               	movf	i2___awmod@divisor,w,c
 15685  003ADA  5C01               	subwf	i2___awmod@dividend,w,c
 15686  003ADC  5004               	movf	i2___awmod@divisor+1,w,c
 15687  003ADE  5802               	subwfb	i2___awmod@dividend+1,w,c
 15688  003AE0  A0D8               	btfss	status,0,c
 15689  003AE2  D004               	goto	i2l5395
 15690  003AE4  5003               	movf	i2___awmod@divisor,w,c
 15691  003AE6  5E01               	subwf	i2___awmod@dividend,f,c
 15692  003AE8  5004               	movf	i2___awmod@divisor+1,w,c
 15693  003AEA  5A02               	subwfb	i2___awmod@dividend+1,f,c
 15694  003AEC                     i2l5395:
 15695  003AEC  90D8               	bcf	status,0,c
 15696  003AEE  3204               	rrcf	i2___awmod@divisor+1,f,c
 15697  003AF0  3203               	rrcf	i2___awmod@divisor,f,c
 15698  003AF2  2E05               	decfsz	i2___awmod@counter,f,c
 15699  003AF4  D7F1               	goto	i2l5391
 15700  003AF6                     i2l5399:
 15701  003AF6  5006               	movf	i2___awmod@sign,w,c
 15702  003AF8  B4D8               	btfsc	status,2,c
 15703  003AFA  D004               	goto	i2l5403
 15704  003AFC  6C01               	negf	i2___awmod@dividend,c
 15705  003AFE  1E02               	comf	i2___awmod@dividend+1,f,c
 15706  003B00  B0D8               	btfsc	status,0,c
 15707  003B02  2A02               	incf	i2___awmod@dividend+1,f,c
 15708  003B04                     i2l5403:
 15709  003B04  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 15710  003B08  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 15711  003B0C  0012               	return	
 15712  003B0E                     __end_ofi2___awmod:
 15713                           	opt stack 0
 15714                           pclatu	equ	0xFFB
 15715                           pclath	equ	0xFFA
 15716                           tblptru	equ	0xFF8
 15717                           tblptrh	equ	0xFF7
 15718                           tblptrl	equ	0xFF6
 15719                           tablat	equ	0xFF5
 15720                           prodh	equ	0xFF4
 15721                           prodl	equ	0xFF3
 15722                           intcon	equ	0xFF2
 15723                           intcon3	equ	0xFF0
 15724                           postinc0	equ	0xFEE
 15725                           fsr0h	equ	0xFEA
 15726                           fsr0l	equ	0xFE9
 15727                           wreg	equ	0xFE8
 15728                           postdec1	equ	0xFE5
 15729                           fsr1h	equ	0xFE2
 15730                           fsr1l	equ	0xFE1
 15731                           indf2	equ	0xFDF
 15732                           postinc2	equ	0xFDE
 15733                           postdec2	equ	0xFDD
 15734                           fsr2h	equ	0xFDA
 15735                           fsr2l	equ	0xFD9
 15736                           status	equ	0xFD8
 15737                           
 15738 ;; *************** function _keyPressedInterruptService *****************
 15739 ;; Defined at:
 15740 ;;		line 49 in file "keypad.c"
 15741 ;; Parameters:    Size  Location     Type
 15742 ;;		None
 15743 ;; Auto vars:     Size  Location     Type
 15744 ;;  key             1    0[COMRAM] unsigned char 
 15745 ;; Return value:  Size  Location     Type
 15746 ;;                  1    wreg      void 
 15747 ;; Registers used:
 15748 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 15749 ;; Tracked objects:
 15750 ;;		On entry : 0/0
 15751 ;;		On exit  : 0/0
 15752 ;;		Unchanged: 0/0
 15753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15755 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15757 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15758 ;;Total ram usage:        1 bytes
 15759 ;; Hardware stack levels used:    1
 15760 ;; This function calls:
 15761 ;;		Nothing
 15762 ;; This function is called by:
 15763 ;;		_service
 15764 ;; This function uses a non-reentrant model
 15765 ;;
 15766                           
 15767                           	psect	text69
 15768  00414A                     __ptext69:
 15769                           	opt stack 0
 15770  00414A                     _keyPressedInterruptService:
 15771                           	opt stack 22
 15772                           
 15773                           ;keypad.c: 50: char key = (PORTB & 0xF0) >> 4;
 15774                           
 15775                           ;incstack = 0
 15776  00414A  3881               	swapf	3969,w,c	;volatile
 15777  00414C  0B0F               	andlw	15
 15778  00414E  0B0F               	andlw	15
 15779  004150  6E01               	movwf	keyPressedInterruptService@key,c
 15780                           
 15781                           ;keypad.c: 51: lastKey = keys[key];
 15782  004152  5001               	movf	keyPressedInterruptService@key,w,c
 15783  004154  0D01               	mullw	1
 15784  004156  0E51               	movlw	low _keys
 15785  004158  24F3               	addwf	prodl,w,c
 15786  00415A  6EF6               	movwf	tblptrl,c
 15787  00415C  0EFE               	movlw	high _keys
 15788  00415E  20F4               	addwfc	prodh,w,c
 15789  004160  6EF7               	movwf	tblptrh,c
 15790  004162                     	if	0	;There are less than 3 active tblptr bytes
 15791  004162                     	endif
 15792  004162  0008               	tblrd		*
 15793  004164  CFF5 F05C          	movff	tablat,_lastKey
 15794  004168  0012               	return		;funcret
 15795  00416A                     __end_of_keyPressedInterruptService:
 15796                           	opt stack 0
 15797                           pclatu	equ	0xFFB
 15798                           pclath	equ	0xFFA
 15799                           tblptru	equ	0xFF8
 15800                           tblptrh	equ	0xFF7
 15801                           tblptrl	equ	0xFF6
 15802                           tablat	equ	0xFF5
 15803                           prodh	equ	0xFF4
 15804                           prodl	equ	0xFF3
 15805                           intcon	equ	0xFF2
 15806                           intcon3	equ	0xFF0
 15807                           postinc0	equ	0xFEE
 15808                           fsr0h	equ	0xFEA
 15809                           fsr0l	equ	0xFE9
 15810                           wreg	equ	0xFE8
 15811                           postdec1	equ	0xFE5
 15812                           fsr1h	equ	0xFE2
 15813                           fsr1l	equ	0xFE1
 15814                           indf2	equ	0xFDF
 15815                           postinc2	equ	0xFDE
 15816                           postdec2	equ	0xFDD
 15817                           fsr2h	equ	0xFDA
 15818                           fsr2l	equ	0xFD9
 15819                           status	equ	0xFD8
 15820                           pclatu	equ	0xFFB
 15821                           pclath	equ	0xFFA
 15822                           tblptru	equ	0xFF8
 15823                           tblptrh	equ	0xFF7
 15824                           tblptrl	equ	0xFF6
 15825                           tablat	equ	0xFF5
 15826                           prodh	equ	0xFF4
 15827                           prodl	equ	0xFF3
 15828                           intcon	equ	0xFF2
 15829                           intcon3	equ	0xFF0
 15830                           postinc0	equ	0xFEE
 15831                           fsr0h	equ	0xFEA
 15832                           fsr0l	equ	0xFE9
 15833                           wreg	equ	0xFE8
 15834                           postdec1	equ	0xFE5
 15835                           fsr1h	equ	0xFE2
 15836                           fsr1l	equ	0xFE1
 15837                           indf2	equ	0xFDF
 15838                           postinc2	equ	0xFDE
 15839                           postdec2	equ	0xFDD
 15840                           fsr2h	equ	0xFDA
 15841                           fsr2l	equ	0xFD9
 15842                           status	equ	0xFD8
 15843                           
 15844                           	psect	rparam
 15845  0000                     pclatu	equ	0xFFB
 15846                           pclath	equ	0xFFA
 15847                           tblptru	equ	0xFF8
 15848                           tblptrh	equ	0xFF7
 15849                           tblptrl	equ	0xFF6
 15850                           tablat	equ	0xFF5
 15851                           prodh	equ	0xFF4
 15852                           prodl	equ	0xFF3
 15853                           intcon	equ	0xFF2
 15854                           intcon3	equ	0xFF0
 15855                           postinc0	equ	0xFEE
 15856                           fsr0h	equ	0xFEA
 15857                           fsr0l	equ	0xFE9
 15858                           wreg	equ	0xFE8
 15859                           postdec1	equ	0xFE5
 15860                           fsr1h	equ	0xFE2
 15861                           fsr1l	equ	0xFE1
 15862                           indf2	equ	0xFDF
 15863                           postinc2	equ	0xFDE
 15864                           postdec2	equ	0xFDD
 15865                           fsr2h	equ	0xFDA
 15866                           fsr2l	equ	0xFD9
 15867                           status	equ	0xFD8
 15868                           
 15869                           	psect	temp
 15870  00005D                     btemp:
 15871                           	opt stack 0
 15872  00005D                     	ds	1
 15873  0000                     int$flags	set	btemp
 15874                           pclatu	equ	0xFFB
 15875                           pclath	equ	0xFFA
 15876                           tblptru	equ	0xFF8
 15877                           tblptrh	equ	0xFF7
 15878                           tblptrl	equ	0xFF6
 15879                           tablat	equ	0xFF5
 15880                           prodh	equ	0xFF4
 15881                           prodl	equ	0xFF3
 15882                           intcon	equ	0xFF2
 15883                           intcon3	equ	0xFF0
 15884                           postinc0	equ	0xFEE
 15885                           fsr0h	equ	0xFEA
 15886                           fsr0l	equ	0xFE9
 15887                           wreg	equ	0xFE8
 15888                           postdec1	equ	0xFE5
 15889                           fsr1h	equ	0xFE2
 15890                           fsr1l	equ	0xFE1
 15891                           indf2	equ	0xFDF
 15892                           postinc2	equ	0xFDE
 15893                           postdec2	equ	0xFDD
 15894                           fsr2h	equ	0xFDA
 15895                           fsr2l	equ	0xFD9
 15896                           status	equ	0xFD8


Data Sizes:
    Strings     405
    Constant    174
    Data        63
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     58      92
    BANK0           128    123     127
    BANK1           256     68     138
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_23(CODE[17]), STR_22(CODE[11]), STR_21(CODE[19]), STR_20(CODE[18]), 
		 -> STR_19(CODE[17]), STR_18(CODE[24]), STR_17(CODE[17]), STR_16(CODE[19]), 
		 -> STR_15(CODE[17]), STR_14(CODE[18]), STR_13(CODE[17]), STR_12(CODE[18]), 
		 -> STR_11(CODE[23]), STR_10(CODE[20]), STR_9(CODE[8]), STR_8(CODE[11]), 
		 -> STR_7(CODE[11]), STR_6(CODE[11]), STR_5(CODE[16]), STR_4(CODE[30]), 
		 -> STR_3(CODE[29]), STR_2(CODE[8]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    showRunStats@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), main@run(BANK1[14]), 

    showRunTime@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), main@run(BANK1[14]), 

    showDateTime@t	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    showInterface@run	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    setAngle@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    initServo@motor	PTR int  size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    servos	PTR int [4] size(2) Largest target is 4
		 -> redirectingServo(BANK1[4]), padServo(BANK1[4]), conveyorServo(BANK1[4]), 

    saveNewRun@data	PTR int  size(2) Largest target is 14
		 -> main@run(BANK1[14]), 

    sp__readPastRun	PTR int  size(2) Largest target is 14
		 -> readPastRun@data(BANK0[14]), 

    digitalWrite@pin	PTR int  size(2) Largest target is 4
		 -> AA_float(COMRAM[4]), cylinderMotor2(BANK1[4]), redirectingServo(BANK1[4]), padServo(BANK1[4]), 
		 -> conveyorServo(BANK1[4]), cylinderMotor1(BANK1[4]), 

    digitalRead@pin	PTR int  size(2) Largest target is 4
		 -> padPin2(BANK1[4]), padPin1(BANK1[4]), cylinderMotor1(BANK1[4]), 


Critical Paths under _main in COMRAM

    _main->___aldiv
    _sortBattery->___ftdiv
    _showRunTime->___aldiv
    ___aldiv->___almod
    _printf->___aldiv
    _lcdNewline->_lcdInst
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftge->___awtoft
    _lcdHome->_lcdInst
    _lcdClear->_lcdInst
    _initRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _getTime->_I2C_Master_Read
    _getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _readPastRun->_eepromRead
    _saveNewRun->_eepromRead
    _eepromWrite->_eepromRead
    _eepromRead->___wmul
    ___wmul->___awdiv
    _angleToPulse->___ftdiv
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___altoft
    ___ftadd->___ftdiv
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in COMRAM

    _service->_servoInterruptService
    _servoInterruptService->i2_digitalWrite
    i2_startTimer->i2___awmod
    i2_digitalWrite->i2___awmod

Critical Paths under _main in BANK0

    _main->_showInterface
    _sortBattery->_printf
    _showInterface->_showRunStats
    _showRunTime->_printf
    _showRunStats->_printf
    _showRunSelect->_printf
    _showRunMenu->_printf
    _showMainMenu->_printf
    _showErrorMessage->_printf
    _showDateTime->_printf
    _printf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___ftsub->___ftadd
    _saveNewRun->_eepromWrite
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    ___fttol->___ftadd
    ___ftmul->___ftdiv
    ___ftadd->_fround

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery
    _showInterface->_showDateTime

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                37    37      0  844257
                                             31 BANK1     37    37      0
                            ___aldiv
                            ___almod
                        _digitalRead
                       _digitalWrite
                            _initLCD
                          _initServo
                          _initTimer
                           _lcdClear
                            _lcdHome
                           _pinSetup
                             _printf
                         _saveNewRun
                           _setAngle
                      _showInterface
                       _showRunStats
                        _showRunTime
                        _sortBattery
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         33    33      0  115009
                                            111 BANK0      2     2      0
                                              0 BANK1     31    31      0
                           ___altoft
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                         _analogRead
                        _digitalRead
                       _digitalWrite
                           _lcdClear
                             _printf
                         _readKeypad
                           _setAngle
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     5      4    2518
                                             34 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          4     2      2     386
                                             34 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     185
                                             34 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        7     7      0  470559
                                            121 BANK0      2     2      0
                                             14 BANK1      5     5      0
                            _initRTC
                        _readPastRun
                       _showDateTime
                   _showErrorMessage
                       _showMainMenu
                        _showRunMenu
                      _showRunSelect
                       _showRunStats
                        _showRunTime
 ---------------------------------------------------------------------------------
 (1) _showRunTime                                         16    14      2   68529
                                            111 BANK0      4     2      2
                                              0 BANK1     12    12      0
                            ___aldiv
                            ___almod
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) ___almod                                             10     2      8    1511
                                             34 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8    1215
                                             44 COMRAM    14     6      8
                            ___almod (ARG)
 ---------------------------------------------------------------------------------
 (1) _showRunStats                                        10     8      2   65803
                                            111 BANK0     10     8      2
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunSelect                                        1     1      0   65578
                                            111 BANK0      1     1      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showRunMenu                                          2     2      0   65547
                                            111 BANK0      2     2      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showMainMenu                                         1     1      0   65516
                                            111 BANK0      1     1      0
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _showErrorMessage                                     0     0      0   65389
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      34
                                             34 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _showDateTime                                        16    16      0   68184
                                            111 BANK0      2     2      0
                                              0 BANK1     14    14      0
                            _getTime
                            _initRTC
                         _keyPressed
                           _lcdClear
                            _lcdHome
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              51    37     14   65160
                                             61 BANK0     50    36     14
                            ___aldiv (ARG)
                            ___almod (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   14293
                                             24 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     421
                                             38 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             34 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   14014
                                             24 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2071
                                             34 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1985
                                             40 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                             34 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     827
                                             34 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2763
                                             42 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                             47 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5057
                                             46 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     142
                                             34 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1738
                                             46 COMRAM     9     3      6
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) _lcdHome                                              0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdClear                                             0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _keyPressed                                           1     1      0      34
                                             34 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _initRTC                                              0     0      0    1196
                    _I2C_Master_Init
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Init                                      8     4      4    1196
                                             47 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1011
                                             34 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _getTime                                             19    17      2    1011
                                             37 COMRAM    19    17      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Write                                     2     0      2     724
                                             35 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Read                                      2     2      0      65
                                             35 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Wait                                      1     1      0       0
                                             34 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _readPastRun                                         18    16      2    4433
                                              0 BANK0     18    16      2
                             ___wmul
                         _eepromRead
 ---------------------------------------------------------------------------------
 (1) _saveNewRun                                           6     4      2    4813
                                              9 BANK0      6     4      2
                             ___wmul
                         _eepromRead
                        _eepromWrite
 ---------------------------------------------------------------------------------
 (2) _eepromWrite                                          9     3      6     435
                                              0 BANK0      9     3      6
                             ___wmul (ARG)
                         _eepromRead (ARG)
 ---------------------------------------------------------------------------------
 (3) _eepromRead                                           4     0      4     370
                                             54 COMRAM     4     0      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3736
                                             48 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initServo                                           10     6      4   24171
                                             94 BANK0     10     6      4
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _startTimer                                           8     2      6     690
                                             34 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   22613
                                             84 BANK0     10     6      4
                       _angleToPulse
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   21152
                                             61 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     756
                                             46 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5804
                                              9 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3580
                                             52 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4539
                                             34 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3025
                                             42 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    3173
                                             42 COMRAM    10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2584
                                             34 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            4     2      2     214
                                             34 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             38 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     195
                                             36 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             34 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             15    15      0    1472
                                             19 COMRAM    15    15      0
         _keyPressedInterruptService
              _servoInterruptService
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                                4     4      0    1168
                                             15 COMRAM     4     4      0
                          i2___awmod
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (9) i2_startTimer                                         8     2      6     258
                                              6 COMRAM     8     2      6
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     5      4     458
                                              6 COMRAM     9     5      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     452
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _keyPressedInterruptService                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
     ___almod (ARG)
   ___almod
   _digitalRead
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _startTimer
   _initTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _lcdHome
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___aldiv (ARG)
       ___almod (ARG)
     ___almod (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       ___awtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _saveNewRun
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _eepromRead
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _eepromWrite
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _eepromRead (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _setAngle
     _angleToPulse
       ___altoft
         ___ftpack
         _analogRead (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _showInterface
     _initRTC
       _I2C_Master_Init
         ___lldiv
     _readPastRun
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _eepromRead
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _showDateTime
       _getTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _initRTC
         _I2C_Master_Init
           ___lldiv
       _keyPressed
       _lcdClear
         _lcdInst
           _lcdNibble
       _lcdHome
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _showErrorMessage
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showMainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _showRunTime
       ___aldiv
         ___almod (ARG)
       ___almod
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___aldiv (ARG)
           ___almod (ARG)
         ___almod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
   _showRunStats
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
         ___almod (ARG)
       ___almod (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
   _showRunTime
     ___aldiv
       ___almod (ARG)
     ___almod
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
         ___almod (ARG)
       ___almod (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftge
       ___awtoft (ARG)
         ___ftpack
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _lcdClear
       _lcdInst
         _lcdNibble
     _printf
       ___aldiv (ARG)
         ___almod (ARG)
       ___almod (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         ___awtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _startTimer

 _service (ROOT)
   _keyPressedInterruptService
   _servoInterruptService
     i2___awmod
     i2_digitalWrite
       i2___awmod (ARG)
     i2_startTimer
       i2___awmod (ARG)
   i2_startTimer
     i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     44      8A       7       53.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     7B      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3A      5C       1       73.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     165      34        0.0%
DATA                 0      0     165       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Apr 10 10:09:48 2017

                       ___altoft@exp 0033                        showRunTime@t1 0104  
                      showRunTime@t2 0106                                    _n 00FB  
                  main@cylinderStart 0130                        ___altoft@sign 0034  
                        _sortBattery 13AA                       showRunSelect@k 00EF  
                       ___awdiv@sign 002E                  ___wmul@multiplicand 0033  
                        __CFG_BORV$3 000000                       showRunTime@run 00EF  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                        __CFG_OSC$HS 000000                     _redirectingServo 0166  
                       ___ftadd@exp1 00AD                         ___ftadd@exp2 00AC  
                       ___ftadd@sign 00AB                                  l401 3D50  
                                l233 4116                                  l170 13A8  
                                l404 3D8E                                  l342 2DD4  
                                l191 17D4                                  l272 407C  
                                l184 171C                                  l188 1778  
                                l517 41D0                                  l269 4070  
                                l462 3E44                                  l455 3F1E  
                                l367 3FB6                                  l464 3E50  
                                l465 3E5C                                  l398 2FA4  
                                l830 0818                      ??_showInterface 00F9  
                                l790 0996                                  l839 0A04  
                       __CFG_CPB$OFF 000000                                  _PEN 007E2A  
                       __CFG_CPD$OFF 000000                                  _SEN 007E28  
                                _n_C 0184                         ___awmod@sign 0028  
                                prod 000FF3                                  wreg 000FE8  
                    showRunTime@time 0108                         __CFG_LVP$OFF 000000  
                       ___ftdiv@cntr 0083                         ___ftdiv@sign 0088  
                       __CFG_WDT$OFF 000000                                 l1126 3514  
                               l1223 40F8                                 l1153 1DD2  
                               l1155 1DFA                                 l1164 1ED0  
                               l1173 1EFA                                 l1149 1D98  
                               l1094 29B2                                 l1191 27FC  
                               l1184 2BB0                                 l1192 2824  
                               l1273 3922                                 l1283 3B62  
                               l1198 288A                                 l5043 3EE6  
                               l5037 3EDC                                 l5055 3EFA  
                               l6031 3496                                 l6111 1E60  
                               l5049 3EF2                                 l6113 1E6E  
                               l6105 1E32                                 l6201 3842  
                               l7001 0AC2                                 l6043 34E2  
                               l6035 34A4                                 l6131 1F24  
                               l6123 1EB6                                 l6115 1E7C  
                               l7003 0AC8                                 l6045 3500  
                               l6037 34AE                                 l6141 1F72  
                               l6125 1EC4                                 l6117 1E88  
                               l5069 3E68                                 l6213 3868  
                               l6047 350A                                 l6039 34CC  
                               l6151 23AA                                 l6215 3870  
                               l6207 3852                                 l7023 0B48  
                               l7121 3972                                 l6233 38A8  
                               l6225 3890                                 l6217 3874  
                               l7041 0BEE                                 l7033 0BAC  
                               l7017 0B0E                                 l6083 1DA6  
                               l6171 2432                                 l6331 40B6  
                               l7027 0B78                                 l7019 0B20  
                               l7211 35CE                                 l7203 35AA  
                               l6181 2470                                 l6157 23E4  
                               l7117 396A                                 l6421 27C2  
                               l6229 389A                                 l6261 3A7C  
                               l6253 3A5C                                 l6245 3A42  
                               l6405 4180                                 l7061 0C84  
                               l7053 0C5C                                 l7045 0C26  
                               l6095 1DF0                                 l6175 2450  
                               l7127 3998                                 l6511 2978  
                               l6415 2796                                 l6255 3A64  
                               l7071 0D46                                 l7047 0C30  
                               l7039 0BE4                                 l7143 3246  
                               l7207 35B8                                 l7223 333A  
                               l6089 1DE0                                 l6185 248E  
                               l6281 38E0                                 l6521 29A0  
                               l6257 3A68                                 l6265 3A86  
                               l6249 3A4E                                 l7065 0C9E  
                               l7081 0DD4                                 l7305 2364  
                               l7241 3376                                 l7233 335C  
                               l6603 3FF6                                 l6291 3914  
                               l6283 38E4                                 l6611 374A  
                               l6523 29AC                                 l6515 2988  
                               l6451 2850                                 l6355 21B0  
                               l6347 20E8                                 l7059 0C78  
                               l7083 0DEA                                 l7315 367C  
                               l7155 3280                                 l7171 32CE  
                               l7235 3362                                 l7227 3348  
                               l6533 39D8                                 l7333 36A8  
                               l6621 37A6                                 l6461 2878  
                               l6269 3A94                                 l7069 0CC6  
                               l7077 0DBA                                 l7157 328C  
                               l7149 325E                                 l7245 3384  
                               l7229 334E                                 l6535 39E4  
                               l6279 38D4                                 l6615 377A  
                               l6471 28BA                                 l6463 2884  
                               l6455 2860                                 l6375 1B06  
                               l7079 0DCC                                 l7407 3DF0  
                               l7175 32E4                                 l7167 32C0  
                               l7159 3290                                 l7191 3564  
                               l7503 3208                                 l7263 2D4A  
                               l7255 2CF2                                 l7239 3370  
                               l7247 338A                                 l6553 2B38  
                               l7281 309E                                 l7329 3692  
                               l6393 1D0A                                 l6369 1A5C  
                               l6721 0038                                 l7417 3BFE  
                               l7273 2DA2                                 l6547 2B06  
                               l6635 2660                                 l7523 2FDA  
                               l7339 370C                                 l6491 291A  
                               l6387 1C60                                 l6379 1B2C  
                               l6803 02CC                                 l6723 004E  
                               l7195 3576                                 l7187 3550  
                               l7507 3214                                 l7267 2D76  
                               l7259 2D1E                                 l6573 2B86  
                               l6653 26F2                                 l7285 30F4  
                               l7525 2FE0                                 l6477 28D8  
                               l6813 0312                                 l6733 0088  
                               l6741 00FC                                 l6717 0022  
                               l7429 3C38                                 l7197 3582  
                               l7621 1800                                 l6671 2758  
                               l6663 2722                                 l7519 2FB2  
                               l6591 3E18                                 l6911 0716  
                               l6903 06DE                                 l6751 0160  
                               l6727 0058                                 l7391 2AC8  
                               l7439 403E                                 l7455 3C94  
                               l7447 3C6E                                 l7199 3586  
                               l7631 186A                                 l7607 1786  
                               l7623 1828                                 l6665 2732  
                               l6657 2706                                 l7289 311C  
                               l6681 3B2C                                 l6905 06F4  
                               l6921 07CA                                 l6841 044E  
                               l6761 0192                                 l6753 0176  
                               l7369 29CE                                 l7617 17E2  
                               l7609 17A4                                 l7721 11F4  
                               l7705 0EE8                                 l6667 273C  
                               l6683 3B30                                 l6499 294A  
                               l6923 07D8                                 l6915 073E  
                               l6843 0464                                 l6763 0198  
                               l6747 0124                                 l7475 3160  
                               l7555 147E                                 l7731 12C6  
                               l6693 3CA0                                 l6933 081C  
                               l6909 0702                                 l6853 04F4  
                               l6845 0494                                 l6837 0428  
                               l6829 03C0                                 l6773 01E6  
                               l6757 0186                                 l7493 31CC  
                               l7477 3164                                 l7637 189A  
                               l7581 166A                                 l7725 1224  
                               l7655 2F24                                 l6687 3B54  
                               l6679 3B20                                 l6695 3CAC  
                               l6951 097A                                 l6943 0892  
                               l6927 07E6                                 l6871 05DE  
                               l6847 04AA                                 l6783 0224  
                               l6775 01F2                                 l6759 018C  
                               l7399 3DCA                                 l7735 12DE  
                               l7727 122C                                 l6929 07FA  
                               l6873 05E4                                 l6857 051A  
                               l6785 023E                                 l6777 01F8  
                               l6769 01C0                                 l7569 1554  
                               l7745 1302                                 l7659 2F3A  
                               l6963 09BE                                 l6955 0988  
                               l6939 0840                                 l6867 0578  
                               l6779 0210                                 l6795 026E  
                               l7499 31F0                                 l7587 16CC  
                               l7579 163C                                 l6981 0A4E  
                               l6949 096C                                 l6893 06A2  
                               l6885 062A                                 l6789 0256  
                               l6797 02B2                                 l7597 172A  
                               l7599 1748                                 l7679 0E12  
                               l6977 0A26                                 l6889 067A  
                               l7697 0EB8                                 l6987 0A76  
                               l6899 06D0                                 l6989 0A7C  
                               _EEIF 007D0C                                 STR_1 FFE5  
                               STR_2 FFF6                                 STR_3 FE87  
                               STR_4 FE69                                 STR_5 FFA9  
                               STR_6 FFCF                                 STR_7 FFDA  
                               STR_8 FFC4                                 STR_9 FFEE  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                         printf@tmpval 00DB  
                               u6120 40B4                                 u7000 0810  
                               u6115 3D24                                 _PEIE 007F96  
                               u6231 277A                                 u6411 2AE8  
                               u6251 27A6                                 _RCEN 007E2B  
                               u6431 2B1A                                 u6521 263C  
                               u6540 2686                                 u5911 23C0  
                               u8207 2ABA                                 u5681 1D46  
                               u6545 267C                                 u8217 411A  
                               u8137 110A                                 u8227 3F2A  
                               u5691 1D64                                 u8147 13FA  
                               u8237 3F5E                                 u8157 14B0  
                               u8247 412E                                 u8167 15CE  
                               u8257 4140                                 u8177 1852  
                               u7554 2D0E                                 u8267 3B8C  
                               u5891 2386                                 u7555 2D0A  
                               u8187 188A                                 u6780 0358  
                               u7564 2D3A                                 u8277 3B9A  
                               u7565 2D36                                 u8197 18C4  
                               u7670 3D60                                 u7574 2D66  
                               u7494 3320                                 u8287 3BC0  
                               u7575 2D62                                 u7495 331A  
                               u7584 2D92                                 u8297 3BCE  
                               u6785 034C                                 u7585 2D8E  
                               u7678 3D64                                 u7695 3DA2  
                               u7696 3DA4                                 _RSEN 007E29  
                    showRunStats@n_C 00F5                                 _n_AA 0182  
                               _n_9V 0180                      showRunStats@run 00EF  
                               _main 0E0A                                 _curr 0058  
                       ___ftpack@arg 0023                                 _keys FE51  
                       ___ftpack@exp 0026                                 _time 017A  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr2h 000FDA                                 fsr0l 000FE9  
                               indf2 000FDF                                 fsr1l 000FE1  
                               fsr2l 000FD9                                 btemp 005D  
                    ??_showRunSelect 003B                                 prodh 000FF4  
                               prodl 000FF3                                 start 000E  
                      __CFG_IESO$OFF 000000                        __CFG_MCLRE$ON 000000  
                       ___ftmul@cntr 0096                         ___param_bank 000000  
                       ___ftmul@sign 0097                         ___fttol@exp1 00BC  
                       ___fttol@lval 00B8                 __end_ofi2_startTimer 3EDA  
                   ?_I2C_Master_Init 0030                     ?_I2C_Master_Read 0001  
                   ?_I2C_Master_Wait 0001                     ?_I2C_Master_Stop 0001  
                       ?_readPastRun 0080                 __end_of_angleToPulse 2626  
                    __end_of___aldiv 32F6                      __end_of___almod 35E0  
                              ?_main 0001                                _ACKEN 007E2C  
                              _ACKDT 007E2D                      __end_of___awdiv 38B2  
                              _EEADR 000FA9                      __end_of___ftadd 1F98  
                              STR_10 FED3                                STR_11 FEBC  
                              STR_20 FF31                                STR_12 FF0D  
                              STR_13 FF76                                STR_21 FEFA  
                              STR_22 FFB9                                STR_14 FF1F  
                              STR_23 FF98                                STR_15 FF65  
                              STR_24 FF43                                STR_16 FEE7  
                              STR_17 FF87                                STR_18 FEA4  
                              STR_19 FF54                      __end_of___awmod 3A9E  
                    __end_of___ftdiv 2BE4              ??_servoInterruptService 0010  
                    __end_of___ftneg 4106                      __end_of___lldiv 3934  
                    __end_of___ftmul 24CE                                _T0CON 000FD5  
                    ___awdiv@divisor 002B                                _T1CON 000FCD  
                    __end_of___llmod 3B74                      __end_of___ftsub 3E42  
                    __end_of___fttol 276A                                _T3CON 000FB1  
                              i2l205 2E88                                i2l206 2E50  
                              i2l207 2E62                                i2l462 3E90  
                              i2l464 3E9C                                i2l465 3EA8  
                    ___awdiv@counter 002D                                _TMR0H 000FD7  
                              _TMR1H 000FCF                                _TMR0L 000FD6  
                              _TMR3H 000FB3                                _TMR1L 000FCE  
                              _TMR3L 000FB2                                _PORTA 000F80  
                              _PORTB 000F81                                _PORTC 000F82  
                              _PORTD 000F83                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
                       main@duration 0140                        __CFG_PWRT$OFF 000000  
                    _cylinderForward 0146                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                      __end_of_lcdHome 4208  
                       ___lltoft@exp 0033                        _conveyorServo 014E  
                    __end_of_lcdInst 414A                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                      __end_of_getTime 39B6  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                     showRunStats@n_AA 00F1  
                   showRunStats@n_9V 00F3                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                    __end_of_initLCD 3F6A                       __CFG_EBTRB$OFF 000000  
                      ___awtoft@sign 002E                                _angle 0044  
                    __end_of_initRTC 41D0                      __end_of_dpowers FDE3  
                              _count 0056                                _scale 191A  
                    __end_of_isdigit 4188                       eepromWrite@ien 0087  
                      ___ftpack@sign 0027                    ?_showErrorMessage 0001  
                              _pulse 016A                                _putch 4106  
                              pclath 000FFA                                tablat 000FF5  
                    __end_of_service 2EC4                   ??_showErrorMessage 003B  
                              status 000FD8                   __size_ofi2___awmod 0070  
                     __CFG_PBADEN$ON 000000                 __end_of_digitalWrite 33BE  
                    __initialization 37AA                         __end_of_main 13AA  
                       __end_of_keys FE62                               ??_main 011F  
                      ___fttol@sign1 00B7                        __activetblptr 000002  
               __size_of_digitalRead 00EA                     _cylinderBackward 0144  
               __size_of__tdiv_to_l_ 0132                         _stoppingTime 014C  
                  ?_I2C_Master_Start 0001                      i2digitalWrite@p 000E  
                  ?_I2C_Master_Write 0024                   ??_I2C_Master_Start 0024  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                 ??_I2C_Master_Write 0026                               _ADCON2 000FC0  
                   __end_of___altoft 3A2E                     ___llmod@dividend 0030  
                             ?_scale 0098                               _ADRESH 000FC4  
                             _EEADRH 000FAA                               _ADRESL 000FC3  
                             _EEDATA 000FA8                               _EECON1 000FA6  
                             _EECON2 000FA7        keyPressedInterruptService@key 0001  
                   ___awdiv@dividend 0029                     __end_of___awtoft 401A  
                             ?_putch 0001                     __end_of___ftpack 3534  
                   __end_of___lltoft 3CF6                               _INT0IE 007F94  
                             _INT0IF 007F91                               _INT1IE 007F83  
                             _INT1IF 007F80                         sortBattery@V 0116  
                       sortBattery@i 0119                               i2l5403 3B04  
                             i2l5331 3410                               i2l5333 3416  
                             i2l5343 3438                               i2l5327 3402  
                             i2l5351 3452                               i2l5345 343E  
                             i2l5337 3424                               i2l5339 342A  
                             i2l5349 344C                               i2l5365 3EB4  
                             i2l5391 3AD8                               i2l5383 3ABE  
                             i2l5395 3AEC                               i2l5387 3ACC  
                             i2l5379 3AB2                               i2l5643 2CEC  
                             i2l5389 3AD4                               i2l5399 3AF6  
                             _TMR0IE 007F95                               _TMR0IF 007F92  
                             _TMR1IE 007CE8                               _TMR1IF 007CF0  
                             _TMR3IE 007D01                               _SSPADD 000FC8  
                             _TRISC3 007CA3                               _TRISC4 007CA4  
                             _SSPBUF 000FC9                     __end_of_lcdClear 4210  
                  _angleToPulse$1419 00CD                       __CFG_XINST$OFF 000000  
               __size_of_eepromWrite 0056                     __end_of__powers_ FE31  
                             ___ftge 371A                            ??___aldiv 0035  
                          ??___almod 002B                               ___wmul 40BC  
                          ??___awdiv 002D                            ??___ftadd 00A8  
                     __CFG_STVREN$ON 000000                            ??___awmod 0027  
                          ??___ftdiv 0080                            ??___ftneg 0026  
                          ??___lldiv 002B                            ??___ftmul 008F  
                          ??___llmod 0038                            ??___ftsub 003B  
                          ??___fttol 00B2                               _fround 1F98  
                             clear_0 3808                               clear_1 381A  
                    eepromWrite@data 0080                     ___awdiv@quotient 002F  
                    ___awmod@divisor 0025                            ??_lcdHome 0027  
                    ___awmod@counter 0027                               _servos 0172  
                          ??_lcdInst 0025                               _printf 0012  
                          ??_getTime 0028                     __end_of_pinSetup 3FAA  
                   __end_of_setAngle 315C                    analogRead@channel 0023  
              ___ftmul@f3_as_product 0093                            ??_initLCD 0027  
                          ??_initRTC 0038                         __pdataCOMRAM 003B  
                          ??_isdigit 0023                      readPastRun@data 0082  
                  __end_ofi2___awmod 3B0E                        setAngle@angle 00D6  
                       __mediumconst FDBA                         ?_showRunMenu 0001  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                         ?_showRunTime 00EF  
                      setAngle@motor 00D4                            ??_service 0014  
                     i2___awmod@sign 0006                           __accesstop 0080  
            __end_of__initialization 3820                           ___altoft@c 002B  
                         ___ftadd@f1 00A2                           ___ftadd@f2 00A5  
                         ___ftge@ff1 002F                           ___ftge@ff2 0032  
                      ___rparam_used 000001                           ___ftdiv@f1 0035  
                         ___ftdiv@f2 0038                           ___ftdiv@f3 0084  
                         ___ftneg@f1 0023                           ___awtoft@c 002B  
              __size_ofi2_startTimer 004C                           ___ftmul@f1 0089  
                         ___ftmul@f2 008C                           ___ftsub@f1 00AE  
                         ___ftsub@f2 00B1                           ___fttol@f1 00AE  
               __end_of_happynewyear FE69                       __pcstackCOMRAM 0001  
              __size_of_angleToPulse 0158                         __pidataBANK0 4220  
                       __pidataBANK1 404A                           ___lltoft@c 002B  
                      __end_of_scale 1D30                         ?_sortBattery 0001  
                      __end_of_putch 4128                   __size_of_lcdNibble 0066  
                         __div_to_l_ 289C                    eepromRead@address 0037  
               __size_of_readPastRun 0092                      showDateTime@day 0106  
                    showDateTime@min 0102                      showDateTime@sec 0100  
                    showDateTime@mon 0108                      __div_to_l_@exp1 002E  
                    __div_to_l_@cntr 002D                              ??_scale 003B  
                    __div_to_l_@quot 0029                              ??_putch 0027  
                       i2_startTimer 3E8E                           __pbssBANK0 00FB  
                         __pbssBANK1 016A                         _angleToPulse 24CE  
              __size_of_digitalWrite 00C8                   __size_of_initTimer 004A  
                 __size_of_initServo 00E2                           _analogRead 3FAA  
                      __div_to_l_@f1 0023                        __div_to_l_@f2 0026  
                            ?___ftge 002F                              ?___wmul 0031  
                   _sortBattery$1418 0100                sortBattery@resolution 010C  
                        saveNewRun@i 008D                            ?___altoft 002B  
                        saveNewRun@n 008B                              ?_fround 0098  
                         _lcdNewline 41F8                            ?___awtoft 002B  
                          ?___ftpack 0023                              ?_printf 00BD  
                          ?___lltoft 002B                           _eepromRead 4188  
     __size_of_servoInterruptService 010C        __end_of_servoInterruptService 2CF0  
              __end_of_showInterface 322A                    i2startTimer@timer 0007  
                          ?_lcdClear 0001                     angleToPulse@a000 00D0  
                   angleToPulse@a180 00C9                         _digitalWrite 32F6  
                            _SSPCON1 000FC6                              _SSPCON2 000FC5  
                            _SSPSTAT 000FC7              __size_ofi2_digitalWrite 00C8  
                            _V_LIM_C 0041                  main@lastBatteryTime 0142  
                          ?_pinSetup 0001                            ?_setAngle 00D4  
                  __end_of_lcdNibble 3BDA                    __end_of__npowers_ FE0A  
                            __Hparam 0000                           _scale$1423 009B  
              __end_of_showRunSelect 3C3E                           _keyPressed 41E2  
                            __Lparam 0000                         readPastRun@i 0090  
                            ___aldiv 322A            __size_of_showErrorMessage 0030  
                            ___almod 3534                      __size_of___ftge 0090  
                            ___awdiv 382E                              ___ftadd 1D30  
                            ___awmod 3A2E                           _readKeypad 4070  
                            ___ftdiv 2AD4                              ___ftneg 40E2  
                            ___lldiv 38B2                      __size_of___wmul 0026  
                            ___ftmul 2370                              ___llmod 3B0E  
                            ___ftsub 3DF6                              ___fttol 2626  
                            _n_OTHER 0186                           ??___altoft 002F  
                            __pcinit 37AA                           ??___awtoft 002E  
                         ??___ftpack 0028                      __size_of_fround 0260  
                            __ramtop 1000                              _lcdHome 4200  
                            _lcdInst 4128                           ??___lltoft 002F  
                            __ptext0 0E0A                              __ptext1 13AA  
                            __ptext2 32F6                              __ptext3 2CF0  
                            _getTime 3934                              __ptext4 3FAA  
                            __ptext5 315C                              __ptext6 21F8  
                            __ptext7 3534                              __ptext8 322A  
                            __ptext9 35E0                        ?_showDateTime 0001  
                    __size_of_printf 0DF8                              _padPin1 015A  
                            _padPin2 015E                              _padPin3 0052  
                      startTimer@val 0025                              _initLCD 3F24  
                  __end_of_hexpowers FE51                          ?__div_to_l_ 0023  
                            _lastKey 005C                              _initRTC 41BA  
                  __end_of_initTimer 3F24                    __end_of_initServo 3088  
                            _dpowers FDBB                              _isdigit 416A  
                   ___awmod@dividend 0023                     ___aldiv@dividend 002D  
           __size_of_I2C_Master_Init 005A             __size_of_I2C_Master_Read 0026  
                         ??_lcdClear 0027             __size_of_I2C_Master_Wait 0012  
           __size_of_I2C_Master_Stop 0008                        ?_showMainMenu 0001  
                            _service 0008                              main@run 0132  
               __size_of_showRunMenu 005C                       __pintcode_body 2DDA  
               __size_of_showRunTime 0178                 end_of_initialization 3820  
                         _saveNewRun 2EC4                        __Lmediumconst FDBA  
                            int_func 2DDA                       digitalRead@pin 0023  
                        ?_analogRead 0023                           ??_pinSetup 0023  
                         ??_setAngle 00D8            __size_of_I2C_Master_Start 0008  
          __size_of_I2C_Master_Write 000A                      ___lldiv@divisor 0027  
                    ___lldiv@counter 002F                       setAngle@period 00DA  
                      ?_showRunStats 00EF                              printf@c 00EE  
                            printf@f 00BD                     ___aldiv@quotient 0037  
                   I2C_Master_Init@c 0030                     I2C_Master_Read@a 0024  
                            postdec1 000FE5                              postdec2 000FDD  
                    _batteryDetected 017E                              postinc0 000FEE  
                            postinc2 000FDE                       __tdiv_to_l_@f1 0023  
                     __tdiv_to_l_@f2 0026                        ??_digitalRead 0025  
                        ?_lcdNewline 0001                        ??__tdiv_to_l_ 0029  
                     ??_showDateTime 00EF                            _PORTBbits 000F81  
               __size_of_sortBattery 0570                     showInterface@key 0112  
                   showInterface@run 0110                          ?_eepromRead 0037  
                     ??_showMainMenu 003B         ??_keyPressedInterruptService 0001  
                _redirectAngle_OTHER 00FD                         _happynewyear FE62  
                 angleToPulse@offset 00C5                   sortBattery@V_float 0102  
                          i2___awmod 3A9E                           _startTimer 3E42  
                      ??_eepromWrite 0086                          ___ftdiv@exp 0087  
                        printf@width 00E8                  __size_of__div_to_l_ 0128  
                     ??_showRunStats 003B                          ?_keyPressed 0001  
                        ___ftmul@exp 0092                          ?_readKeypad 0001  
                     __end_of___ftge 37AA                       __end_of___wmul 40E2  
                      __pidataCOMRAM 41A2  __size_of_keyPressedInterruptService 0020  
                     _cylinderMotor1 0152                       _cylinderMotor2 0156  
                     __end_of_fround 21F8                       __end_of_printf 0E0A  
                __size_of_analogRead 0038                  start_initialization 37AA  
                __end_of_digitalRead 2DDA                  __end_of__tdiv_to_l_ 289C  
                     initServo@angle 00E0                       initTimer@timer 0023  
                     initServo@motor 00DE                           ?i2___awmod 0001  
                        ?_saveNewRun 0089                       i2_digitalWrite 33BE  
                  ??_I2C_Master_Init 0034                    ??_I2C_Master_Read 0024  
                  ??_I2C_Master_Wait 0023                    ??_I2C_Master_Stop 0024  
                __size_of_lcdNewline 0008                      ___llmod@divisor 0034  
                    ___llmod@counter 0038                  __size_of_eepromRead 001A  
                         initServo@i 00E6                     showDateTime@hour 0104  
                   showDateTime@year 010A                             ??___ftge 0035  
                   _showErrorMessage 401A                  __end_of_eepromWrite 3DA6  
                           ??___wmul 0035                          __pdataBANK0 00FD  
                        __pdataBANK1 0144                     __CFG_LPT1OSC$OFF 000000  
                           ??_fround 003B                        ??_readPastRun 003B  
                     readPastRun@run 0080                             ??_printf 00CB  
                  __size_of___altoft 0078                           fround@prec 00A1  
                  __size_of___awtoft 0038                    __size_of___ftpack 00AE  
                  __size_of___lltoft 005C                          __pbssCOMRAM 0052  
                      __pcstackBANK0 0080                        __pcstackBANK1 0100  
                __size_of_keyPressed 000C               __end_ofi2_digitalWrite 3486  
             sortBattery@targetAngle 0114                         _isdigit$1053 0024  
                      keyPressed@key 0023                          ?_startTimer 0023  
                  __size_of_lcdClear 0008                  __size_of_readKeypad 0026  
               __end_of_showDateTime 2AD4                    i2digitalWrite@pin 0007  
                  i2digitalWrite@val 0009                     _I2C_Master_Start 4218  
                   _I2C_Master_Write 41EE                            _main$1417 012C  
                  __CFG_CCP2MX$PORTC 000000                    __size_of_pinSetup 0040  
               __end_of_showMainMenu 3DF6                    __size_of_setAngle 00D4  
                          __pintcode 0008                        __pmediumconst FDBA  
                          _lcdNibble 3B74                             ?___aldiv 002D  
                           ?___almod 0023                             ?___awdiv 0029  
                           ?___ftadd 00A2                             ?___awmod 0023  
                           ?___ftdiv 0035                             ?___ftneg 0023  
                           ?___lldiv 0023                             ?___ftmul 0089  
                           ?___llmod 0030                             ?___ftsub 00AE  
                          __npowers_ FDE3                             ?___fttol 00AE  
                        _digitalRead 2CF0                  __size_of_saveNewRun 00E2  
                   ___almod@dividend 0023                             ?_lcdHome 0001  
                           ?_lcdInst 0001                          __tdiv_to_l_ 276A  
                           ?_getTime 0026                         ??__div_to_l_ 0029  
                           ?_initLCD 0001                             ?_initRTC 0001  
                    startTimer@timer 0023                             ?_isdigit 0001  
 __end_of_keyPressedInterruptService 416A           _keyPressedInterruptService 414A  
                __end_of_readPastRun 371A                 __end_of_showRunStats 3688  
                           ?_service 0001                            _hexpowers FE31  
                          _initTimer 3EDA                            _initServo 2FA6  
                    ?i2_digitalWrite 0007                _servoInterruptService 2BE4  
                        ??i2___awmod 0005                       __size_of_scale 0416  
                     __size_of_putch 0022                             _AA_float 004E  
                 eepromWrite@address 0082                      ___aldiv@divisor 0031  
                    ___aldiv@counter 0035                       sortBattery@Vcc 0109  
                     ___wmul@product 0035                             _LATDbits 000F8C  
                       ??_analogRead 0027                          _eepromWrite 3D50  
                 __end_of__div_to_l_ 29C4                             i2u509_44 33E8  
                           i2u509_45 33E2               __size_of_showInterface 00CE  
                   __CFG_WDTPS$32768 000000                           ?_lcdNibble 0001  
                     _padAngle_CLOSE 0046                            _terminate 0188  
                      digitalWrite@p 002A                           service@key 0022  
                       ??_lcdNewline 0027                  __size_of_startTimer 004C  
                  angleToPulse@angle 00BD                    ___wmul@multiplier 0031  
                      lcdNibble@data 0024                         ??_eepromRead 003B  
                         printf@flag 00EA                        lcdNibble@temp 0023  
                         printf@fval 00E1                           printf@prec 00EC  
                      ??_showRunMenu 003B                        ??_showRunTime 00F1  
                 __end_of_analogRead 3FE2                             _V_LIM_AA 003E  
                           _V_LIM_9V 003B               __size_of_showRunSelect 0064  
                     saveNewRun@data 0089                           ?_initTimer 0023  
                         ?_initServo 00DE                    sortBattery@signal 0107  
           sortBattery@pos_v_counter 0105                  I2C_Master_Read@temp 0025  
                          copy_data0 37BE                            copy_data1 37F6  
                 i2___awmod@dividend 0001                   __end_of_lcdNewline 4200  
                      readKeypad@key 0023                             __Hrparam 0000  
                       ??_keyPressed 0023                             __Lrparam 0000  
                 __end_of_eepromRead 41A2                   __CFG_BOREN$SBORDIS 000000  
                       ??_readKeypad 0023                  showRunStats@n_OTHER 00F7  
                      ??_sortBattery 00EF                     __size_of___aldiv 00CC  
                   __size_of___almod 00AC                     __size_of___awdiv 0084  
                   __size_of___ftadd 0268                     __size_of___awmod 0070  
                   __size_of___ftdiv 0110                     __size_of___ftneg 0024  
                   __size_of___lldiv 0082                             ___altoft 39B6  
                   __size_of___ftmul 015E                     __size_of___llmod 0066  
                   __size_of___ftsub 004C                     __size_of___fttol 0144  
                           ___awtoft 3FE2                             ___ftpack 3486  
                        _readPastRun 3688                          _fround$1421 009E  
                        _fround$1422 009B                             ___lltoft 3C9A  
                   __size_of_lcdHome 0008                     __size_of_lcdInst 0022  
                   __size_of_getTime 0082                        showDateTime@t 010C  
                          setAngle@i 00DC                      _I2C_Master_Init 3CF6  
                    _I2C_Master_Read 4096                     __size_of_initLCD 0046  
                    _I2C_Master_Wait 41D0                     __size_of_initRTC 0016  
                    _I2C_Master_Stop 4210                     __size_of_isdigit 001E  
             ?_servoInterruptService 0001                        _showInterface 315C  
                           _lcdClear 4208                             __ptext10 3BDA  
                           __ptext11 3C3E                             __ptext20 416A  
                           __ptext12 3DA6                             __ptext21 1F98  
                           __ptext13 401A                             __ptext30 371A  
                           __ptext22 3A2E                             __ptext14 4070  
                           __ptext31 4200                             __ptext23 382E  
                           __ptext15 29C4                             __ptext40 4218  
                           __ptext32 4208                             __ptext24 276A  
                           __ptext16 0012                             __ptext41 4096  
                           __ptext33 41E2                             __ptext25 289C  
                           __ptext17 191A                             __ptext50 3E42  
                           __ptext42 41D0                             __ptext34 41BA  
                           __ptext26 3C9A                             __ptext18 4106  
                           __ptext51 3088                             __ptext43 3688  
                           __ptext35 3CF6                             __ptext27 3B0E  
                           __ptext19 41F8                             __ptext60 3EDA  
                           __ptext52 24CE                             __ptext44 2EC4  
                           __ptext36 38B2                             __ptext28 3DF6  
                           __ptext61 3F24                             __ptext53 2626  
                           __ptext45 3D50                             __ptext37 3934  
                           __ptext29 40E2                             __ptext62 4128  
                           __ptext54 2370                             __ptext46 4188  
                           __ptext38 41EE                             __ptext63 3B74  
                           __ptext55 2AD4                             __ptext47 40BC  
                           __ptext39 4210                             __ptext56 1D30  
                           __ptext48 3F6A                             __ptext65 2BE4  
                           __ptext57 3FE2                             __ptext49 2FA6  
                           __ptext66 3E8E                             __ptext58 39B6  
                           __ptext67 33BE                             __ptext59 3486  
                           __ptext68 3A9E                             __ptext69 414A  
           __end_of_showErrorMessage 404A                   __end_of_keyPressed 41EE  
              __size_of_showDateTime 0110                             __powers_ FE0A  
                   __size_of_service 2EBC                      i2startTimer@val 0009  
                    ___almod@divisor 0027                         ??_saveNewRun 003B  
                      ?i2_startTimer 0007                             _padServo 0162  
                    ___almod@counter 002B                  __end_of_showRunMenu 3C9A  
                 __end_of_readKeypad 4096                  __end_of_showRunTime 2370  
                      ?_angleToPulse 00BD                        __size_of_main 05A0  
              __size_of_showMainMenu 0050                             _pinSetup 3F6A  
                           _setAngle 3088                        _showRunSelect 3BDA  
                           _prevTime 005A                     sortBattery@V_245 011C  
                        ??_lcdNibble 0023                             getTime@i 0038  
                     showInterface@n 010E                        _padAngle_OPEN 0048  
                           int$flags 005D                     sortBattery@i_250 0112  
                   sortBattery@V_max 010F                            printf@idx 00D4  
                          printf@len 00D7                            printf@exp 00DF  
                          printf@val 00E4                        showMainMenu@k 00EF  
                 __end_of_saveNewRun 2FA6                __size_of_showRunStats 00A8  
                       _showDateTime 29C4                    i2___awmod@divisor 0003  
                          putch@data 0027                    i2___awmod@counter 0005  
           __end_of_I2C_Master_Start 4220                  __end_of_sortBattery 191A  
           __end_of_I2C_Master_Write 41F8                           _INTCONbits 000FF2  
                     ?_showInterface 0001                        ?_digitalWrite 0023  
                        ??_initTimer 0025                          ??_initServo 00E2  
                           isdigit@c 0025                         _showMainMenu 3DA6  
                           scale@scl 009E                       ??i2_startTimer 000D  
                       ??_startTimer 0029                             intlevel2 0000  
                   __tdiv_to_l_@exp1 0031                     __tdiv_to_l_@cntr 0030  
                     ??_angleToPulse 00C1                     __tdiv_to_l_@quot 002C  
                   ___lldiv@dividend 0023                     _showRunTime$1420 0100  
                     ?_showRunSelect 0001                         _showRunStats 35E0  
                   _redirectAngle_AA 014A                     _redirectAngle_9V 004A  
                           printf@ap 00D9                             printf@cp 00D5  
            __end_of_I2C_Master_Init 3D50              __end_of_I2C_Master_Read 40BC  
            __end_of_I2C_Master_Wait 41E2              __end_of_I2C_Master_Stop 4218  
                        lcdInst@data 0026                         ?_digitalRead 0023  
                       ?__tdiv_to_l_ 0023                   __end_of_startTimer 3E8E  
                        _printf$1424 00D1                     ??i2_digitalWrite 000B  
                   ___lldiv@quotient 002B                    I2C_Master_Write@d 0024  
                     ??_digitalWrite 0027          ?_keyPressedInterruptService 0001  
                       ___aldiv@sign 0036                          _showRunMenu 3C3E  
                        _showRunTime 21F8                      _redirectAngle_C 004C  
                        getTime@time 002A                     _padAngle_NEUTRAL 0148  
                    digitalWrite@pin 0023                      digitalWrite@val 0025  
                       ___almod@sign 002C                         ?_eepromWrite 0080  
                       showRunMenu@k 00F0                       showRunMenu@key 00EF  
